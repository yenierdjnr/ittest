{
  "description": "The Querying Microsoft SQL Server 2014 show is for those who are seeking to validate their skills and knowledge in writing Transact SQL queries.  The show helps the certification candidate by describing, discussing and demonstrating SQL query writing skills in multiple areas. The episodes will cover the advanced SELECT statements, grouping sets, aggregates, SET operators, basic T-SQL programming and Performance Improvement.  The show focuses heavily on demonstrating the syntax and logic of writing the queries.  This particular exam is intended for candidates that have two or more years of experience in writing queries with Microsoft SQL Server",
  "descriptionMD": "",
  "length": "69315",
  "name": "Microsoft SQL Server 2014 - 70-461",
  "practiceExam": true,
  "subtitle": "Querying Microsoft SQL Server 2014",
  "tagUrl": "microsoft-technical",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Ronnie give a general overview of what to expect in the upcoming Querying SQL series. They cover topics like who is the intended audience, what the scope of the series will cover, and what are some specific topics that will be addressed.",
          "length": "479",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-0-overview-051316-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-0-overview-051316-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-0-overview-051316-1-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.025 --> 00:00:04.874\n[SOUND] In this segment,\nwe're gonna give you\n\n2\n00:00:04.874 --> 00:00:09.596\na general overview on\nour upcoming series on\n\n3\n00:00:09.596 --> 00:00:14.586\nquerying the Microsoft SQL server 2014.\n\n4\n00:00:14.586 --> 00:00:18.534\nAnd Ronnie I'm glad you're here with me\ntoday because I was hoping you could give\n\n5\n00:00:18.534 --> 00:00:22.193\nus a very good overview, at least\na general expectation of what we should,\n\n6\n00:00:22.193 --> 00:00:24.130\nwell expect, on the upcoming series.\n\n7\n00:00:24.130 --> 00:00:26.000\n>> Sure that'd be a great way for\n\n8\n00:00:26.000 --> 00:00:30.120\nus to get started when we start\nin on Microsoft SQL server 2014.\n\n9\n00:00:30.120 --> 00:00:33.090\nNow let's go ahead and take a look at\nthe official exam objectives here.\n\n10\n00:00:33.090 --> 00:00:36.480\nAnd that way that will help us to get\nsituated in the mindset that we need.\n\n11\n00:00:36.480 --> 00:00:40.550\nSo on my screen I went ahead and pulled\nup the official exam objective page.\n\n12\n00:00:40.550 --> 00:00:41.640\nNow you're going to notice something.\n\n13\n00:00:41.640 --> 00:00:44.040\nEven though we centered\nin on SQL server 2014,\n\n14\n00:00:44.040 --> 00:00:49.410\nwe use that as the environment for\neverything that we did in our show.\n\n15\n00:00:49.410 --> 00:00:52.960\nYou'll notice it's actually for querying,\nwell both SQL Server 2012 and 2014,\n\n16\n00:00:52.960 --> 00:00:57.580\nthe entire exam actually\ncenters around both of them.\n\n17\n00:00:57.580 --> 00:01:00.330\nBut the great thing is everything that\nwe've actually done in the show should\n\n18\n00:01:00.330 --> 00:01:02.170\nwork for both products.\n\n19\n00:01:02.170 --> 00:01:05.644\nSo that's why we're not so\nmuch worried about going between 2012 and\n\n20\n00:01:05.644 --> 00:01:09.700\n2014 SQL server right\nat the beginning here.\n\n21\n00:01:09.700 --> 00:01:14.280\nNow when it comes down to what we end up\ncovering in the exam objectives itself,\n\n22\n00:01:14.280 --> 00:01:18.420\nwe take the official exam objectives and\nwhat we're going to do of course\n\n23\n00:01:18.420 --> 00:01:23.150\nis we're going to essentially cover all\nthe elements in those exam objectives.\n\n24\n00:01:23.150 --> 00:01:26.720\nSo where we're gonna begin\nis taking a look of course\n\n25\n00:01:26.720 --> 00:01:29.220\nat the database objects as well.\n\n26\n00:01:29.220 --> 00:01:32.710\nSo we are going to make sure that we\nunderstand how of course to create and\n\n27\n00:01:32.710 --> 00:01:36.650\nalter tables and that's of course\nusing SQL querying to help us\n\n28\n00:01:36.650 --> 00:01:40.700\nto understand those elements that we need\nand the syntax that we need to do that.\n\n29\n00:01:40.700 --> 00:01:44.170\nAs well as create the idea of\nviews which is a very powerful way\n\n30\n00:01:44.170 --> 00:01:45.920\nthat we can get the information\nthat we need and\n\n31\n00:01:45.920 --> 00:01:50.370\nactually limit that particular exposure\nto the entire database as well.\n\n32\n00:01:50.370 --> 00:01:53.650\nWe'll talk about of course\nthe idea of designing the views.\n\n33\n00:01:53.650 --> 00:01:58.120\nAnd then table constraints as well as some\nof the triggers that we can use to help us\n\n34\n00:01:58.120 --> 00:02:02.860\nto ensure that if we do one thing, we can\nalso trigger another process, as well.\n\n35\n00:02:02.860 --> 00:02:06.700\nNow, we also want to actually took\na look there because that's about\n\n36\n00:02:06.700 --> 00:02:09.650\na quarter of the exam\nis working with data.\n\n37\n00:02:09.650 --> 00:02:14.010\nAnd this is the main process that we\nactually spend a little bit more time on.\n\n38\n00:02:14.010 --> 00:02:17.320\nThis takes up almost a full\nthird of the exam itself.\n\n39\n00:02:17.320 --> 00:02:19.170\nWhere we begin with\nsimple select statements.\n\n40\n00:02:19.170 --> 00:02:23.594\nAnd we'll actually see that quite often\nas we actually go in there that more than\n\n41\n00:02:23.594 --> 00:02:28.018\nlikely select statements are where we'll\nfocus in so we do a lot of examples from\n\n42\n00:02:28.018 --> 00:02:32.010\nthis idea and show you some of\nthe different ways we can do it.\n\n43\n00:02:32.010 --> 00:02:34.660\nIncluding of course\nbuilding sub queries and\n\n44\n00:02:34.660 --> 00:02:37.380\nworking with data types\nas well as aggregates.\n\n45\n00:02:37.380 --> 00:02:39.930\nAnd then we do a little bit\nof a brief example here\n\n46\n00:02:39.930 --> 00:02:42.560\nin terms of xml querying as well.\n\n47\n00:02:42.560 --> 00:02:47.580\nOkay and then we go into modifying our\ndata and this is where we get into\n\n48\n00:02:47.580 --> 00:02:52.740\na little bit more advanced things that we\ncan do inside of querying our SQL server.\n\n49\n00:02:52.740 --> 00:02:57.520\nWhen we start to create and of course\neven alter the idea of stored procedures.\n\n50\n00:02:57.520 --> 00:03:01.330\nWhich allows us, once again,\nto be able to limit the access that\n\n51\n00:03:01.330 --> 00:03:04.250\nother people can have to our\ndatabase if we choose to.\n\n52\n00:03:04.250 --> 00:03:08.120\nAnd to make sure that the complex logic\nbehind some of the things that we have to\n\n53\n00:03:08.120 --> 00:03:12.120\ndo, is not gonna ever have to be exposed\nto a course our customers as well.\n\n54\n00:03:12.120 --> 00:03:16.250\nBeing able to build other objects inside\nusing Insert, Delete, and Update, as\n\n55\n00:03:16.250 --> 00:03:20.540\nwell as combining data sets together, and\nof course, basic working with functions.\n\n56\n00:03:20.540 --> 00:03:25.900\nOur last little section is going\nto be on optimizing our queries,\n\n57\n00:03:25.900 --> 00:03:28.780\ntalking about how transactions\nare managed here.\n\n58\n00:03:28.780 --> 00:03:32.040\nAs well as of course\nthe idea of error handling.\n\n59\n00:03:32.040 --> 00:03:36.860\nAnd then noticing the differences\nbetween row based operations and\n\n60\n00:03:36.860 --> 00:03:39.490\nof course set based operations too.\n\n61\n00:03:39.490 --> 00:03:44.260\nNow all those elements, every single\nepisode that we actually are going to do\n\n62\n00:03:44.260 --> 00:03:48.550\nYou're gonna see that it's gonna\nbe jam packed with examples and\n\n63\n00:03:48.550 --> 00:03:51.840\nof course actually work\ninside of the query analyzer.\n\n64\n00:03:51.840 --> 00:03:56.410\nNow, the reason why I want to point that\nout is because it does require you then as\n\n65\n00:03:56.410 --> 00:04:00.510\nyou are preparing for it not just enough\nthat you can watch the episodes here.\n\n66\n00:04:00.510 --> 00:04:04.310\nBut you do need to get your hands\nin working inside the SQL and\n\n67\n00:04:04.310 --> 00:04:06.830\nactually doing the querying\nthat you need to do.\n\n68\n00:04:06.830 --> 00:04:08.310\nAnd that's actually very important.\n\n69\n00:04:08.310 --> 00:04:11.450\nThe reason why is that you're\ngonna see that a lot of times,\n\n70\n00:04:11.450 --> 00:04:14.190\nespecially when you're getting ready for\nthe exam that's all about\n\n71\n00:04:14.190 --> 00:04:17.420\ncomparing what queries actually\ndo work and what they don't.\n\n72\n00:04:17.420 --> 00:04:22.287\nSo understanding the syntax,\ngetting the muscle memory that you need to\n\n73\n00:04:22.287 --> 00:04:25.559\ninvolved is actually gonna\nbe very important for\n\n74\n00:04:25.559 --> 00:04:29.170\njust about everything that we do for\nthe exam as well.\n\n75\n00:04:29.170 --> 00:04:33.231\nNow I do want us to make sure that we\nunderstand there is a couple of things we\n\n76\n00:04:33.231 --> 00:04:37.816\nwould consider prerequisites, when getting\nready for the exam, and so lets go and\n\n77\n00:04:37.816 --> 00:04:40.987\ntake a look at my page again and\nthis should help us out to.\n\n78\n00:04:40.987 --> 00:04:46.770\nOkay, so notice that it even says who\nshould actually take this exam here?\n\n79\n00:04:46.770 --> 00:04:50.750\nIt says this exam is intended for\nSQL Server database administrators,\n\n80\n00:04:50.750 --> 00:04:52.780\nsystem engineers, and developers.\n\n81\n00:04:52.780 --> 00:04:57.020\nAnd the key is right here at the end,\ntwo or more years of experience\n\n82\n00:04:57.020 --> 00:05:01.670\nwho are seeking to validate their\nknowledge in of course in writing queries.\n\n83\n00:05:01.670 --> 00:05:03.620\nNow this is actually very important.\n\n84\n00:05:03.620 --> 00:05:07.530\nIt doesn't mean that you cannot\ntake the exam any time you want to.\n\n85\n00:05:07.530 --> 00:05:10.430\nRegardless of whether or\nnot you have the SQL experience or\n\n86\n00:05:10.430 --> 00:05:13.280\nnot but\nwhat it does mean is if you don't you're\n\n87\n00:05:13.280 --> 00:05:17.020\ngoing to be very confused by some of\nthe things that they're going to show you.\n\n88\n00:05:17.020 --> 00:05:20.290\nThey're gonna implement of course\ndifferent scenarios that you might not be\n\n89\n00:05:20.290 --> 00:05:25.180\nfamiliar with if you're not working\nwith SQL pretty much on a daily basis.\n\n90\n00:05:25.180 --> 00:05:29.250\nSo do not expect as a beginner\nhere if you're just learning SQL\n\n91\n00:05:29.250 --> 00:05:31.910\nthat this is the exam for you right away.\n\n92\n00:05:31.910 --> 00:05:36.820\nYou may wanna make sure that you ahead and\nhave the foundational concepts down and\n\n93\n00:05:36.820 --> 00:05:41.470\nthat you feel very comfortable in\nwriting at least basic SQL statements\n\n94\n00:05:41.470 --> 00:05:46.410\nbefore you start actually on this as\na track that you may wish to follow.\n\n95\n00:05:46.410 --> 00:05:50.430\nSo it's very important that we do\nthat because a lot of times maybe\n\n96\n00:05:50.430 --> 00:05:54.540\nyou have this expectation that this\nis a very much a fundamental exam.\n\n97\n00:05:54.540 --> 00:05:58.270\nThat you can jump right into it but you\ngonna see challenges here that you may not\n\n98\n00:05:58.270 --> 00:06:03.420\nexpect to see and you do not work\nin SQL just about on a daily basis.\n\n99\n00:06:03.420 --> 00:06:10.045\nNow overall though for the exam itself the\nprice in US dollars is about $150 here.\n\n100\n00:06:10.045 --> 00:06:12.950\nSo it does require you\nto pay that exam fee.\n\n101\n00:06:12.950 --> 00:06:17.500\nSo you go to your\nPearson Vue testing center.\n\n102\n00:06:17.500 --> 00:06:19.700\nAnd don't forget,\nyou do actually have to sign up for this.\n\n103\n00:06:19.700 --> 00:06:22.290\nYou can go online to make sure\nyou have your account, and\n\n104\n00:06:22.290 --> 00:06:26.560\nthat you pay the fee, and register\nto the nearest Pearson Vue center,\n\n105\n00:06:26.560 --> 00:06:31.740\nwhere you'll schedule a date and then you\nwill go in and take that exam as well.\n\n106\n00:06:31.740 --> 00:06:35.430\nSo, this particular exam even\nthough it may cover both of them\n\n107\n00:06:35.430 --> 00:06:38.200\neverything that we'll cover\nessentially works on both.\n\n108\n00:06:38.200 --> 00:06:43.110\nAnd the other thing, if you are really\nconcerned about the idea that hey,\n\n109\n00:06:43.110 --> 00:06:45.090\n2012 is different from 2014,\n\n110\n00:06:45.090 --> 00:06:50.550\nyou'll see that Microsoft itself,\nin December 2015 here, okay?\n\n111\n00:06:50.550 --> 00:06:54.490\nEvaluated that the exam didn't\nneed to be updated between both.\n\n112\n00:06:54.490 --> 00:06:57.570\nSo in other words, whatever you\nactually learned on SQL Server 2012,\n\n113\n00:06:57.570 --> 00:07:00.980\nif you've already been studying for\nthat you can jump right into this and\n\n114\n00:07:00.980 --> 00:07:03.760\nthis should also to continue\nto help you out as well.\n\n115\n00:07:03.760 --> 00:07:05.840\nSo there's some details in it, but\n\n116\n00:07:05.840 --> 00:07:07.730\nyou actually see that\nwe'll cover a lot of them.\n\n117\n00:07:07.730 --> 00:07:11.760\nAnd we actually make sure that we use\na bunch of examples as well to ensure that\n\n118\n00:07:11.760 --> 00:07:15.990\nyou actually have the most visuals that\nyou can and you'll actually be typing\n\n119\n00:07:15.990 --> 00:07:20.340\nin SQL, just about, I want to say at least\n50% of the content that we end up actually\n\n120\n00:07:20.340 --> 00:07:25.650\ncovering will end up being straight\nexamples that we end up using.\n\n121\n00:07:25.650 --> 00:07:28.960\nSo just make sure that you take the time,\ngo through that.\n\n122\n00:07:28.960 --> 00:07:31.430\nAnd make sure you study\non your own as well.\n\n123\n00:07:31.430 --> 00:07:33.780\nAnd that's really going to help you.\n\n124\n00:07:33.780 --> 00:07:37.330\nIf you're working towards\nyour SQL server MCSA.\n\n125\n00:07:37.330 --> 00:07:39.870\n>> All right, Ronnie well thank you so\nmuch for that overview, it was great.\n\n126\n00:07:39.870 --> 00:07:43.750\nAnd hopefully if that's something that\nsounds like that you might be interested\n\n127\n00:07:43.750 --> 00:07:47.687\nin or that you need to prepare for to get\nthat actual exam certification underneath\n\n128\n00:07:47.687 --> 00:07:50.960\nyour belt, we look forward to seeing\nyou in the upcoming episodes.\n\n129\n00:07:50.960 --> 00:07:58.391\n[SOUND]\n\n",
          "vimeoId": "166815114"
        },
        {
          "description": "In this episode, Daniel and Ronnie begin their discussion of querying Microsoft SQL Server 2014. Here they begin at the beginning; going over the basics of MS SQL Server 2014 editions as well as a primer on SQL databases in general, including terms you should be familiar with.",
          "length": "2034",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-1-sql_server_basics-041816-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-1-sql_server_basics-041816-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-1-sql_server_basics-041816-1-sm.jpg",
          "title": "SQL Server Basics",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.479 --> 00:00:15.881\nAll right, greetings everyone, and\nwelcome to another episode of ITProTV.\n\n3\n00:00:15.881 --> 00:00:18.055\nI'm your host, Daniel Lowrie, and\n\n4\n00:00:18.055 --> 00:00:23.469\nin today's episode we are kicking off our\nquerying Microsoft SQL Server 2014 series.\n\n5\n00:00:23.469 --> 00:00:27.883\nJoining in us in the studio today to help\nus actually start doing those things is\n\n6\n00:00:27.883 --> 00:00:29.771\nour good friend Mister Ronnie Wong.\n\n7\n00:00:29.771 --> 00:00:31.191\nRonnie, welcome to the show sir,\nhow's it going?\n\n8\n00:00:31.191 --> 00:00:32.871\n>> Well thank you for\nhaving me on the show.\n\n9\n00:00:32.871 --> 00:00:36.290\nAs we begin our series here on\nMicrosoft SQL Server 2014 and\n\n10\n00:00:36.290 --> 00:00:40.300\nwhat we're actually taking a look\nat doing here, right, is making\n\n11\n00:00:40.300 --> 00:00:45.510\nsure that we understand the fundamentals\nof querying a Microsoft SQL Server.\n\n12\n00:00:45.510 --> 00:00:49.700\nNow if you haven't dealt with SQL before,\nthis may be a little bit over your head,\n\n13\n00:00:49.700 --> 00:00:53.404\nwe're gonna do a little bit of a basic\nreview of course of SQL itself, and\n\n14\n00:00:53.404 --> 00:00:57.205\nthen we'll actually talk about the idea\nhere of actually the server too.\n\n15\n00:00:57.205 --> 00:01:00.490\nNow when we start actually taking\na look at something like that, right.\n\n16\n00:01:00.490 --> 00:01:02.420\nThere's actually a lot more for\nus to cover, so\n\n17\n00:01:02.420 --> 00:01:06.842\nwe're actually getting ready to also\ntake an exam too which is gonna be\n\n18\n00:01:06.842 --> 00:01:12.420\nthe 70-461 exam on fundamental\nquerying of the Microsoft SQL Server.\n\n19\n00:01:12.420 --> 00:01:13.630\nSo when we take a look at that,\n\n20\n00:01:13.630 --> 00:01:15.740\nwe'll actually see a lot\nof different statements.\n\n21\n00:01:15.740 --> 00:01:17.040\nAnd they want you to\nbe familiar with that.\n\n22\n00:01:17.040 --> 00:01:19.910\nAnd we'll go over tons of them\nduring this entire series.\n\n23\n00:01:19.910 --> 00:01:22.760\nBut right here at the beginning,\nwe wanna take a look at the very\n\n24\n00:01:22.760 --> 00:01:26.310\nbasics is what we want to do to\nget you familiar with the product.\n\n25\n00:01:26.310 --> 00:01:29.730\nNow, the good thing is,\nif you've already worked with SQL.\n\n26\n00:01:29.730 --> 00:01:32.660\nA lot of this may actually be review,\nand you may go, I don't wanna see that.\n\n27\n00:01:32.660 --> 00:01:34.640\nAnd you're not gonna hurt\nmy feelings if you go,\n\n28\n00:01:34.640 --> 00:01:37.460\nlook let me just kinda skip through this.\n\n29\n00:01:37.460 --> 00:01:40.780\nBut if you're new at this, and you go,\nI just wanna learn a little bit more about\n\n30\n00:01:40.780 --> 00:01:44.960\nSQL Server, well this is actually one of\nthe classes that can really help you out\n\n31\n00:01:44.960 --> 00:01:47.180\nbut it doesn't help if you\nhave no experience at all, so\n\n32\n00:01:47.180 --> 00:01:50.980\nwe're gonna do a little bit of\na kind of a primer to help us out.\n\n33\n00:01:50.980 --> 00:01:55.130\nOr a primer, if you're actually\non the more English side I guess.\n\n34\n00:01:55.130 --> 00:01:58.030\nTo help us out to understand\nwhat the product actually is.\n\n35\n00:01:58.030 --> 00:02:02.510\nAnd also of course, are the basics of\nthe actual querying language as well.\n\n36\n00:02:02.510 --> 00:02:06.660\nSo where do we want to start off\nwhen we start talking about the idea\n\n37\n00:02:06.660 --> 00:02:09.250\nof the basics of SQL Server?\n\n38\n00:02:09.250 --> 00:02:13.030\nWell when it starts off, you gotta\nactually know what a SQL Server is for.\n\n39\n00:02:13.030 --> 00:02:16.248\nNow when you're reading it, you're\nprobably saying Ronnie you keep saying\n\n40\n00:02:16.248 --> 00:02:18.980\nSQL Server but I saw right there\nat the beginning it said S-Q-L.\n\n41\n00:02:18.980 --> 00:02:22.620\nWell it's just a way that we normally say,\nit in Microsoft language,\n\n42\n00:02:22.620 --> 00:02:25.410\nwe don't actually say,\nMicrosoft S-Q-L Server.\n\n43\n00:02:25.410 --> 00:02:25.920\nCan you say it?\n\n44\n00:02:25.920 --> 00:02:27.480\nSure, perfectly fine.\n\n45\n00:02:27.480 --> 00:02:30.920\nNormally, you hear people call it\nMicrosoft SQL Server, and that's for\n\n46\n00:02:30.920 --> 00:02:33.870\nthat acronym there that\nactually spreads out.\n\n47\n00:02:33.870 --> 00:02:36.450\nI'll talk about that in just\na little bit of time here and\n\n48\n00:02:36.450 --> 00:02:37.770\nwhat will end up happening.\n\n49\n00:02:37.770 --> 00:02:38.710\nBut what is it about?\n\n50\n00:02:38.710 --> 00:02:44.470\nWell it's fundamentally about the idea of\ncourse, of getting access to databases.\n\n51\n00:02:44.470 --> 00:02:48.560\nNow when you and I start talking\nabout the idea of databases,\n\n52\n00:02:48.560 --> 00:02:52.360\nit really doesn't help you if you haven't\nhad any experience in databases at all.\n\n53\n00:02:52.360 --> 00:02:56.340\nBut it helps when you actually start\nthinking about the idea of the way that\n\n54\n00:02:56.340 --> 00:03:00.150\nyou put together, something that you're\nactually gonna wear each and every day.\n\n55\n00:03:00.150 --> 00:03:03.840\nSo when I first started working with\nthe idea of databases it's like okay.\n\n56\n00:03:03.840 --> 00:03:04.410\nIt's simple.\n\n57\n00:03:04.410 --> 00:03:08.000\nI just take all of my data\nthat exists somewhere.\n\n58\n00:03:08.000 --> 00:03:11.360\nAnd then you tell me what the question\nis and I go and look for that answer.\n\n59\n00:03:11.360 --> 00:03:14.600\nThat's exactly what we think\nabout in terms of databases.\n\n60\n00:03:14.600 --> 00:03:18.510\nWell the problem with that\nparticular concept is fairly simple.\n\n61\n00:03:18.510 --> 00:03:22.550\nIt actually is a little bit more\ncumbersome to get information out the way\n\n62\n00:03:22.550 --> 00:03:23.780\nthat you want to.\n\n63\n00:03:23.780 --> 00:03:26.930\nSo I always try to relay to something that\nI've actually done quite a bit which is\n\n64\n00:03:26.930 --> 00:03:30.570\nessentially laundry is\nwhat it comes down to.\n\n65\n00:03:30.570 --> 00:03:34.220\nSo when I think about something\nlike the idea of doing laundry,\n\n66\n00:03:34.220 --> 00:03:38.580\nwell the goal of doing laundry is not for\nme to just get clean clothes, but so\n\n67\n00:03:38.580 --> 00:03:41.830\nthat I actually do pick out\nsomething that I want to wear.\n\n68\n00:03:41.830 --> 00:03:45.930\nSo that I actually do look halfway decent\nand people don't laugh at me as I get\n\n69\n00:03:45.930 --> 00:03:49.750\ndressed and come to work and also go\nout and do other things as well, okay.\n\n70\n00:03:49.750 --> 00:03:54.582\nWhen I start thinking about that,\nwhat normally ends up happening of\n\n71\n00:03:54.582 --> 00:03:58.090\ncourse is that we end up\nactually doing our laundry,\n\n72\n00:03:58.090 --> 00:04:02.360\nwe take our hamper of clothes we've\nworn in the past, we go and wash it and\n\n73\n00:04:02.360 --> 00:04:05.230\nthen we come back with a laundry\nbasket full of clothes.\n\n74\n00:04:05.230 --> 00:04:08.140\nAnd normally what ends up\nhappening is that we wash it, and\n\n75\n00:04:08.140 --> 00:04:11.470\nthen we actually fold it and\nwe put it away, and what does that do?\n\n76\n00:04:11.470 --> 00:04:14.050\nIt helps to make it a lot easier for\nyou and\n\n77\n00:04:14.050 --> 00:04:17.830\nme then, to actually get dressed once\nthe information is actually put away.\n\n78\n00:04:17.830 --> 00:04:21.580\nSo let me kinda show you a graphic example\nof what I'm talking about here, and\n\n79\n00:04:21.580 --> 00:04:23.020\nsee if this actually makes sense to you.\n\n80\n00:04:23.020 --> 00:04:25.050\nCuz this is the way that it\nactually makes sense to me.\n\n81\n00:04:25.050 --> 00:04:27.560\nSo here it is, when I talk about\nthe idea of a database and\n\n82\n00:04:27.560 --> 00:04:31.370\nI think about the idea of laundry,\nwell when I was in college Daniel,\n\n83\n00:04:31.370 --> 00:04:33.030\nI used to do laundry a bit different,\nright.\n\n84\n00:04:33.030 --> 00:04:37.040\nAt the end of the week, it's time to do\nlaundry, so you just grab all the clothes,\n\n85\n00:04:37.040 --> 00:04:40.360\nyou throw it into your laundry basket and\nyou go get it washed someplace.\n\n86\n00:04:40.360 --> 00:04:44.610\nYou come back and what would normally\nhappen for me is this, is that\n\n87\n00:04:44.610 --> 00:04:48.600\nall of my washed and clean clothes would\nessentially stay in that basket, okay.\n\n88\n00:04:48.600 --> 00:04:51.430\nSo that when I was ready to go to class\n\n89\n00:04:51.430 --> 00:04:53.310\nI would just rummage through the basket,\nright.\n\n90\n00:04:53.310 --> 00:04:56.060\nAnd just pick out, that's clean,\nthat's clean and put it together and\n\n91\n00:04:56.060 --> 00:04:57.590\nI'd be off and ready to go.\n\n92\n00:04:57.590 --> 00:05:02.000\nWell the problem is that after awhile,\nright when you keep doing that usually\n\n93\n00:05:02.000 --> 00:05:05.850\nwhat ends up happening is after awhile\nyou just get so lazy about it that you\n\n94\n00:05:05.850 --> 00:05:09.030\njust dump the whole thing out on your bed\nand you just search for what you want to.\n\n95\n00:05:09.030 --> 00:05:11.730\nAnd you grab everything back up and\nyou put it back into the basket,\n\n96\n00:05:11.730 --> 00:05:15.330\nnext day it becomes a little bit more\nchallenging as you actually get together\n\n97\n00:05:15.330 --> 00:05:18.640\nwhat you want to wear and the same thing\nhappens day, after day, after day.\n\n98\n00:05:18.640 --> 00:05:22.020\nSo now, you have a bunch of data\nthat's actually in there or\n\n99\n00:05:22.020 --> 00:05:25.130\na bunch of clothing articles that are in\nthere, but it becomes much more difficult,\n\n100\n00:05:25.130 --> 00:05:29.200\nand then by Friday, you're really only\nleft with your default it's like,\n\n101\n00:05:29.200 --> 00:05:31.870\nman I shouldn't have actually worn that\nat a little bit earlier this week and\n\n102\n00:05:31.870 --> 00:05:36.460\nnow I'm left with this\nkind of rodeo clown outfit\n\n103\n00:05:36.460 --> 00:05:40.798\nis what ends up happening sometimes and\npeople are making fun of you.\n\n104\n00:05:40.798 --> 00:05:43.880\n>> Leather vest and sweat pants [LAUGH].\n\n105\n00:05:43.880 --> 00:05:47.750\n>> Well not far from the truth to\ntell you when you start doing that.\n\n106\n00:05:47.750 --> 00:05:51.830\nWell the idea of databases essentially\nstarted off on that where it's like,\n\n107\n00:05:51.830 --> 00:05:54.630\nlet's just get the data held somehow.\n\n108\n00:05:54.630 --> 00:05:58.130\nSo what did people really start to\ndo with massive amounts of data?\n\n109\n00:05:58.130 --> 00:06:01.920\nThey started actually going look, we need\nto move it off receipts that went into\n\n110\n00:06:01.920 --> 00:06:06.860\ncigar boxes, we need to move that data\noff these actually going in these books\n\n111\n00:06:06.860 --> 00:06:11.220\nthat we have, and so they started putting\nthem in the different spreadsheets, okay.\n\n112\n00:06:11.220 --> 00:06:15.200\nAnd those spreadsheets, whether they\nwere ledger books, or whatever it is,\n\n113\n00:06:15.200 --> 00:06:17.760\nnow you actually collated them into books.\n\n114\n00:06:17.760 --> 00:06:20.410\nBut a lot of times, what ended up\nhappening is that somebody said,\n\n115\n00:06:20.410 --> 00:06:22.650\nwhy don't we make a master spreadsheet.\n\n116\n00:06:22.650 --> 00:06:25.720\nAnd every item that they had to keep\ntrack of, they just kept adding columns,\n\n117\n00:06:25.720 --> 00:06:29.170\nafter columns, after columns, and these\nspreadsheets started growing gigantically\n\n118\n00:06:29.170 --> 00:06:34.380\nledger books started becoming 50 columns\nwide, and you need a six foot desk\n\n119\n00:06:34.380 --> 00:06:37.950\nto able to kind of unfold that book and\nsee where everything was going.\n\n120\n00:06:37.950 --> 00:06:41.950\nWell that actually starts to get\ninto where the data's becoming\n\n121\n00:06:41.950 --> 00:06:43.790\nmore unmanageable, right.\n\n122\n00:06:43.790 --> 00:06:47.660\nAnd that's the same idea as\nthe laundry basket I described, right.\n\n123\n00:06:47.660 --> 00:06:51.980\nAfter you start using to get the exact\ndata out, after a while it just becomes\n\n124\n00:06:51.980 --> 00:06:55.670\nharder and harder, because what\nyou normally get out of it, right.\n\n125\n00:06:55.670 --> 00:06:57.860\nNow it becomes much more\ndifficult as you add more, and\n\n126\n00:06:57.860 --> 00:07:00.050\nmore clothing into that basket.\n\n127\n00:07:00.050 --> 00:07:02.660\nOr as you add more, and\nmore data into that spreadsheet,\n\n128\n00:07:02.660 --> 00:07:04.860\nit becomes much more difficult to find.\n\n129\n00:07:04.860 --> 00:07:08.100\nSo instead, if you were to\ncarry through the samething,\n\n130\n00:07:08.100 --> 00:07:11.730\nlaundry that in a way that you actually do\nit, well the way that I actually started\n\n131\n00:07:11.730 --> 00:07:14.850\ndoing is a little bit better, I got\nmarried, which is what ended up happening.\n\n132\n00:07:14.850 --> 00:07:17.867\nAnd so my wife said, you mean,\nafter you do laundry,\n\n133\n00:07:17.867 --> 00:07:19.689\nyou just leave in the bathroom.\n\n134\n00:07:19.689 --> 00:07:24.700\nYeah, it's worked forever and she said,\nno you put it away and what does that do?\n\n135\n00:07:24.700 --> 00:07:28.220\nOnce you actually start putting things\naway, now everything is actually\n\n136\n00:07:28.220 --> 00:07:32.310\ncategorized into whatever\nthe drawer is categorized into and\n\n137\n00:07:32.310 --> 00:07:36.590\nit makes so easy for you at the beginning\nof the day that get ready for work.\n\n138\n00:07:36.590 --> 00:07:38.740\nBecause you know ware\neverything has she is, right.\n\n139\n00:07:38.740 --> 00:07:41.690\nAll the data or\nthe closes store where you want to.\n\n140\n00:07:41.690 --> 00:07:44.980\nAnd the same thing\nhappened the data it self.\n\n141\n00:07:44.980 --> 00:07:48.780\nA data base and then she has\nwhere the data is structure, and\n\n142\n00:07:48.780 --> 00:07:51.820\nstore according to particular roles here.\n\n143\n00:07:51.820 --> 00:07:55.382\nIt makes it easier then for\nus to be able to find that data and\n\n144\n00:07:55.382 --> 00:07:57.798\nto retrieve that information as well.\n\n145\n00:07:57.798 --> 00:08:01.952\nSo essentially when it comes down to a\ndatabase, if you think about a database as\n\n146\n00:08:01.952 --> 00:08:05.238\nbeing more like when you do laundry and\neverything is put away.\n\n147\n00:08:05.238 --> 00:08:07.798\nIt's the same thing that happens for\nme morning after morning.\n\n148\n00:08:07.798 --> 00:08:11.830\nI get up really early and\na lot of times my wife is still asleep.\n\n149\n00:08:11.830 --> 00:08:14.850\nAnd for me I don't even have to turn on\nthe light to actually be able to get out\n\n150\n00:08:14.850 --> 00:08:16.270\nthe items that I need.\n\n151\n00:08:16.270 --> 00:08:17.380\nWell, why is that?\n\n152\n00:08:17.380 --> 00:08:20.000\nThe reason is because I know\nwhere everything actually is.\n\n153\n00:08:20.000 --> 00:08:22.310\nI simply open that drawer out.\n\n154\n00:08:22.310 --> 00:08:25.210\nAnd I get all of my items together and\nthen I can go into the restroom,\n\n155\n00:08:25.210 --> 00:08:27.516\nget dressed and\nI don't even have to worry.\n\n156\n00:08:27.516 --> 00:08:30.700\nWhy did I not have to worry about it is\nbecause I knew where every single item\n\n157\n00:08:30.700 --> 00:08:34.530\nactually was and how it was stored and\nI knew the proper procedures to get\n\n158\n00:08:34.530 --> 00:08:38.450\ninformation out, or to get my clothing\nout I should say, I'm gonna actually slip\n\n159\n00:08:38.450 --> 00:08:41.530\nback and fourth in between that\ncuz I'm using that weird analogy.\n\n160\n00:08:41.530 --> 00:08:44.900\nBut as far as the fundamentals\nof databases go,\n\n161\n00:08:44.900 --> 00:08:46.220\nthat's what we're talking about.\n\n162\n00:08:46.220 --> 00:08:48.300\nIt's not just that\nthe data stored somewhere.\n\n163\n00:08:48.300 --> 00:08:51.638\nIt's stored in a particular structure and\nthat's what we want to get to,\n\n164\n00:08:51.638 --> 00:08:55.800\nthat structure in which it\nactually makes it easy then for\n\n165\n00:08:55.800 --> 00:08:57.950\nus to use something that you and\n\n166\n00:08:57.950 --> 00:09:02.690\nI can actually retrieve that data from and\nget the information out that we need to.\n\n167\n00:09:02.690 --> 00:09:06.820\nSo, that is the whole idea\nbehind what we call a database.\n\n168\n00:09:06.820 --> 00:09:11.150\nNow that particular type of database is\nactually something specific for you and\n\n169\n00:09:11.150 --> 00:09:15.870\nme, and it's what is called\na relational database instead.\n\n170\n00:09:15.870 --> 00:09:19.300\nAnd when you start taking or\nstart thinking about that,\n\n171\n00:09:19.300 --> 00:09:21.830\nyour mind probably goes in\nmultiple different directions.\n\n172\n00:09:21.830 --> 00:09:25.280\nMen are from Mars, and\nwomen are from Venus.\n\n173\n00:09:25.280 --> 00:09:27.610\nWe're not talking about\nthat type of relationship.\n\n174\n00:09:27.610 --> 00:09:30.800\nBut it really comes down\nto what mathematical\n\n175\n00:09:30.800 --> 00:09:33.780\nset theory is what it comes down to so\n\n176\n00:09:33.780 --> 00:09:37.940\nwhen we start talking about a relational\ndatabase, what that's actually saying for\n\n177\n00:09:37.940 --> 00:09:43.290\nus is that term relation is almost\nequivalent to what we call a table, okay?\n\n178\n00:09:43.290 --> 00:09:47.040\nSo what we're saying is we take\nthe data that you and I understand, and\n\n179\n00:09:47.040 --> 00:09:49.480\nwe store it in the form of tables.\n\n180\n00:09:49.480 --> 00:09:54.130\nAnd tables are actually, again,\nlogical structures that we have.\n\n181\n00:09:54.130 --> 00:09:55.170\nNow, we say look,\n\n182\n00:09:55.170 --> 00:09:58.580\nwe're gonna actually kind of keep\na topic of things together here.\n\n183\n00:09:58.580 --> 00:10:01.400\nAnd then all of that data wants\nto be stored in a table and\n\n184\n00:10:01.400 --> 00:10:04.420\ninformation that's related\nto that particular item is\n\n185\n00:10:04.420 --> 00:10:06.640\nactually gonna get stored\nin those tables here.\n\n186\n00:10:06.640 --> 00:10:09.780\nNow, the problem that you and I have is,\nwhen I start thinking about a table and\n\n187\n00:10:09.780 --> 00:10:13.230\nI've never dealt with databases, why the\nheck would I put everything onto a table?\n\n188\n00:10:13.230 --> 00:10:15.000\nWell, it makes it easier to find.\n\n189\n00:10:15.000 --> 00:10:18.060\nBut when we start talking\nabout it in terms of math,\n\n190\n00:10:18.060 --> 00:10:22.150\na table comes in the form of\na grid is what it comes in, okay?\n\n191\n00:10:22.150 --> 00:10:26.230\nSo when we start talking about tabular\ndata what you're normally talking about is\n\n192\n00:10:26.230 --> 00:10:30.830\ndata that is stored in columns and\nof course stored in rows, okay?\n\n193\n00:10:30.830 --> 00:10:35.670\nAnd so when you start taking a look at\nthat particular idea, what that means is\n\n194\n00:10:35.670 --> 00:10:40.710\nthat all of the data that's actually\nin these columns here are actually\n\n195\n00:10:40.710 --> 00:10:45.160\ngoing to be individual pieces of data or\nof some type of data that we have,\n\n196\n00:10:45.160 --> 00:10:50.050\na type of data is what you're normally\nlooking for, and then on the row,\n\n197\n00:10:50.050 --> 00:10:54.980\nthat is how we relate all those individual\npieces of information together as well.\n\n198\n00:10:54.980 --> 00:10:59.840\nSo, normally, when we started storing\ndata, we create columns of data\n\n199\n00:10:59.840 --> 00:11:03.630\nthat's normally, of course, of a different\ntype of data type that we have.\n\n200\n00:11:03.630 --> 00:11:07.980\nAnd, of course, of categories of\ninformation that we might also see.\n\n201\n00:11:07.980 --> 00:11:10.265\nAnd then, an individual row,\n\n202\n00:11:10.265 --> 00:11:15.250\nyou'll also hear the term record,\nmeans that here is a single item in which\n\n203\n00:11:15.250 --> 00:11:20.020\nit actually has elements of all of these\ndifferent categories related to them so\n\n204\n00:11:20.020 --> 00:11:23.270\nthat I can actually go\nthroughout that entire database,\n\n205\n00:11:23.270 --> 00:11:28.470\nbe able to actually look for a column and\nbe able to return that entire row\n\n206\n00:11:28.470 --> 00:11:33.130\nof information if I need to by being able\nto search for this column of information.\n\n207\n00:11:33.130 --> 00:11:37.468\nWell there's a couple of terms you're\ngonna also need to pick up on in database\n\n208\n00:11:37.468 --> 00:11:38.531\nlanguage as well.\n\n209\n00:11:38.531 --> 00:11:43.829\nWhenever you hear the term attribute, when\nwe start talking in terms of databases\n\n210\n00:11:43.829 --> 00:11:48.768\nhere, that normally refers to\na particular column of information, okay?\n\n211\n00:11:48.768 --> 00:11:50.958\nWhenever you hear the term tuple,\n\n212\n00:11:50.958 --> 00:11:55.261\nhopefully you won't hear that too\noften even during our class, but\n\n213\n00:11:55.261 --> 00:11:59.340\nthis is a technical term that\nreally is equal to a row of data.\n\n214\n00:11:59.340 --> 00:12:01.100\n>> And is it tuple or tuple?\n\n215\n00:12:01.100 --> 00:12:02.270\n>> I do not know for\nsure to tell you the truth.\n\n216\n00:12:02.270 --> 00:12:05.850\n>> Because I've heard quadruple,\nand we've heard quintuple.\n\n217\n00:12:05.850 --> 00:12:06.550\n>> Right.\n>> Right,\n\n218\n00:12:06.550 --> 00:12:09.980\nso I've always figured it's just six\nof one, half a dozen of the other.\n\n219\n00:12:09.980 --> 00:12:11.320\n>> Right.\n>> Whatever the way you like it, right?\n\n220\n00:12:11.320 --> 00:12:12.670\n>> Right, that's essentially what I have.\n\n221\n00:12:12.670 --> 00:12:16.221\nSo if you hear the term tuple or tuple,\nI normally say tuple, I don't know why,\n\n222\n00:12:16.221 --> 00:12:19.415\nI think it's because of the long u\nis what I'm normally used to saying.\n\n223\n00:12:19.415 --> 00:12:21.736\nBut yeah, however you tend\nto say it is perfectly fine.\n\n224\n00:12:21.736 --> 00:12:25.777\nBut when you hear that term tuple or\ntuple, make sure you understand that\n\n225\n00:12:25.777 --> 00:12:30.930\nthey're saying, here's that row of data or\nthat record of data that you also hear.\n\n226\n00:12:30.930 --> 00:12:35.080\nNow those don't necessarily always\nmean exactly the same thing.\n\n227\n00:12:35.080 --> 00:12:39.840\nSo, as yes, you get more and more\nexperience into database, administration\n\n228\n00:12:39.840 --> 00:12:44.370\nand management, you will have people that\nknow way more about SQL than I ever will\n\n229\n00:12:44.370 --> 00:12:47.330\nthat will tell you technically\nRonnie you're saying this wrong.\n\n230\n00:12:47.330 --> 00:12:49.310\nNot only am I saying wrong but\n\n231\n00:12:49.310 --> 00:12:52.480\nit's technically not\nexactly a one to one match.\n\n232\n00:12:52.480 --> 00:12:54.530\nIt's as close as you and I can get and\n\n233\n00:12:54.530 --> 00:12:58.259\nthat is because when we start\ntalking about storing data,\n\n234\n00:12:58.259 --> 00:13:02.170\nwell, you think about it, data's not\nstored like clothing or books, right?\n\n235\n00:13:02.170 --> 00:13:04.630\nThere's no physical thing that we have.\n\n236\n00:13:04.630 --> 00:13:06.750\nWe normally refer to logical containers.\n\n237\n00:13:06.750 --> 00:13:10.520\nWell, a table is a logical\ncontainer of data, okay?\n\n238\n00:13:10.520 --> 00:13:13.372\nAnd when we start taking a look at that\nthen we're actually saying that even\n\n239\n00:13:13.372 --> 00:13:15.195\nwithin that logical\ncontainer there's what?\n\n240\n00:13:15.195 --> 00:13:16.195\nThere's a structure.\n\n241\n00:13:16.195 --> 00:13:16.778\nOkay?\nAnd so\n\n242\n00:13:16.778 --> 00:13:20.180\nwe normally refer to that as a attribute,\nOkay.\n\n243\n00:13:20.180 --> 00:13:21.792\nAnd the way that it displays to you and\n\n244\n00:13:21.792 --> 00:13:24.034\nI when we look at it,\nit looks like a column of data.\n\n245\n00:13:24.034 --> 00:13:27.068\nOkay, And then when we say,\nhey, this column of data,\n\n246\n00:13:27.068 --> 00:13:28.695\nwho's actually a part of it?\n\n247\n00:13:28.695 --> 00:13:33.551\nAnd we can actually look for records or\nrows of information that also have this\n\n248\n00:13:33.551 --> 00:13:37.580\ndata in it and\nbe able to also find that as well, okay?\n\n249\n00:13:37.580 --> 00:13:40.530\nNow, the whole thing,\nlike I told you at the beginning here,\n\n250\n00:13:40.530 --> 00:13:45.320\nis actually kind of built around what\nwe call mathematical set theory.\n\n251\n00:13:45.320 --> 00:13:49.450\nAnd also precedent theory is\nwhat it's called as well.\n\n252\n00:13:49.450 --> 00:13:53.813\nSo you'll also end up seeing that too,\nso when you talk about a set of data,\n\n253\n00:13:53.813 --> 00:13:58.580\nyou're saying the entire, the all,\nthe whole of all your data, okay?\n\n254\n00:13:58.580 --> 00:14:01.250\nSo a set of data could refer\nto your entire database.\n\n255\n00:14:01.250 --> 00:14:03.210\nOr it could refer to a single table.\n\n256\n00:14:03.210 --> 00:14:07.020\nIt could refer to something that you've\nactually queried and only filtered out.\n\n257\n00:14:07.020 --> 00:14:11.060\nAnd that's actually your data set or\nyour set of data, as well.\n\n258\n00:14:11.060 --> 00:14:15.331\nSo it's actually what you actually wanted\nto gather and then from that point,\n\n259\n00:14:15.331 --> 00:14:19.534\nyou can filter it out, you can weed it\ndown, you can add in more information to\n\n260\n00:14:19.534 --> 00:14:22.791\nshow you from the set of data\nyou are really trying to get to.\n\n261\n00:14:22.791 --> 00:14:24.149\nSo those are some basic terms.\n\n262\n00:14:24.149 --> 00:14:28.664\nNow, when it comes down to getting ready\nfor the exam, you're gonna see that\n\n263\n00:14:28.664 --> 00:14:33.248\nthey are gonna expect you to know at least\nsome of these terms here because I hate\n\n264\n00:14:33.248 --> 00:14:37.555\nto say it, as much as I've worked with\ndatabases over the past ten years,\n\n265\n00:14:37.555 --> 00:14:40.992\nI haven't really ever used\nthese terms too much, right?\n\n266\n00:14:40.992 --> 00:14:44.400\nSo when somebody says that they insist\non me using it, then I'll use it.\n\n267\n00:14:44.400 --> 00:14:47.760\nBut normally I just say it the way\nthat it makes logical sense to me.\n\n268\n00:14:47.760 --> 00:14:51.840\nOn the exam expect both but\ngo with the right way,\n\n269\n00:14:51.840 --> 00:14:55.610\nin other words, know the terminology,\nI wouldn't actually use tuple or\n\n270\n00:14:55.610 --> 00:14:59.630\ntuple in a normal conversation,\nbut, in other words,\n\n271\n00:14:59.630 --> 00:15:04.090\ndon't expect the exam to shy away from\nthose particular terminology as well.\n\n272\n00:15:04.090 --> 00:15:06.510\nSo make sure you pay attention there too.\n\n273\n00:15:06.510 --> 00:15:08.500\nSo remember that,\neven though I didn't write it down here,\n\n274\n00:15:08.500 --> 00:15:12.360\na relation is essentially\nequal to a table, right?\n\n275\n00:15:12.360 --> 00:15:15.570\nIn other words, we're referring\nto the structure itself, okay?\n\n276\n00:15:15.570 --> 00:15:18.900\nWe're not actually referring to\na solid wood table or anything else.\n\n277\n00:15:18.900 --> 00:15:22.100\nWe're actually referring to the logical\nstructure in the way that data\n\n278\n00:15:22.100 --> 00:15:23.390\nis actually kept.\n\n279\n00:15:23.390 --> 00:15:27.590\nNice and uniform in the pattern that\nit actually normally is going to be.\n\n280\n00:15:27.590 --> 00:15:32.170\nSo you do wanna make sure that you pay\nattention to information like that as it's\n\n281\n00:15:32.170 --> 00:15:35.510\nactually presented to you, especially\nwhen getting ready for the exam.\n\n282\n00:15:36.740 --> 00:15:39.850\nAll right, now, the other thing\nthat we have to talk about then,\n\n283\n00:15:39.850 --> 00:15:44.450\nnow that we've talked about the idea\nof the database itself, is what you and\n\n284\n00:15:44.450 --> 00:15:47.810\nI are really going to be doing\nin this course, which is,\n\n285\n00:15:47.810 --> 00:15:51.400\nwe're going to be what we call querying or\nquerying the data.\n\n286\n00:15:51.400 --> 00:15:52.858\nNow I've heard that said\na couple of ways too.\n\n287\n00:15:52.858 --> 00:15:58.198\nI know that, Don, our guru essentially,\nhe says querying.\n\n288\n00:15:58.198 --> 00:15:58.898\n>> Yeah.\n\n289\n00:15:58.898 --> 00:16:02.238\n>> And And\nmore than likely that's 99% right.\n\n290\n00:16:02.238 --> 00:16:03.508\nRonnie says querying and\n\n291\n00:16:03.508 --> 00:16:07.600\nthat's just because that's Ronnie's\naccent is what come out here.\n\n292\n00:16:07.600 --> 00:16:09.900\nSo when it talks about that,\nwhat are we really talking about.\n\n293\n00:16:09.900 --> 00:16:13.690\nWell we're really saying how do we\nask our database questions, okay?\n\n294\n00:16:13.690 --> 00:16:17.820\nSo you and I now know that we can have all\nthe information gathered logically into\n\n295\n00:16:17.820 --> 00:16:19.990\nsome piece of software right,\n\n296\n00:16:19.990 --> 00:16:23.910\nsomething that actually allows us\nto store that data electronically.\n\n297\n00:16:23.910 --> 00:16:27.950\nWell then, how do you go and\nyou pick out data?\n\n298\n00:16:27.950 --> 00:16:32.170\nSo this is not like the fresh\nseafood restaurant where you go,\n\n299\n00:16:32.170 --> 00:16:35.700\nthat's a nice lobster,\nget me that one, okay.\n\n300\n00:16:35.700 --> 00:16:39.350\nYou have to actually\nknow the language that\n\n301\n00:16:39.350 --> 00:16:44.740\nyou can use to ask the database questions\nto get that information out of it.\n\n302\n00:16:44.740 --> 00:16:47.590\nAnd that particular\nlanguage of the database\n\n303\n00:16:47.590 --> 00:16:53.070\nin the most generic terms is what you and\nI call SQL, okay?\n\n304\n00:16:53.070 --> 00:16:57.390\nNow when we call it SQL,\nthis actually has an older term,\n\n305\n00:16:57.390 --> 00:17:01.530\nand it's the one that I've always been\nreferring to which is the term Sequel.\n\n306\n00:17:01.530 --> 00:17:03.100\nNow when you start hearing\nthe term Sequel, and\n\n307\n00:17:03.100 --> 00:17:09.054\nI'll probably mention this again,\nSequel, as it's spelled out S-E-Q-U-E-L,\n\n308\n00:17:09.054 --> 00:17:12.250\nSequel, actually did stand for something.\n\n309\n00:17:12.250 --> 00:17:15.950\nAnd so the original specification for\nthis was that it stood for\n\n310\n00:17:15.950 --> 00:17:20.860\nStructured English Querying Language,\nright?\n\n311\n00:17:20.860 --> 00:17:24.150\nSo when you actually put all that out,\ncuz people were like no, no, they just\n\n312\n00:17:24.150 --> 00:17:28.730\nkinda pronounced because they added in\nsome vowels and that was pretty much it.\n\n313\n00:17:28.730 --> 00:17:31.320\nBut that actually was\noriginally called Sequel and\n\n314\n00:17:31.320 --> 00:17:35.280\nactually spelled out as sequel, but they\nran into a trademark dispute with some\n\n315\n00:17:35.280 --> 00:17:39.450\nairline at some point way\nback in the past here, and\n\n316\n00:17:39.450 --> 00:17:42.750\nwhen they actually ended up doing that\nthey said look, we can't do that.\n\n317\n00:17:42.750 --> 00:17:43.350\nSo what did they do?\n\n318\n00:17:43.350 --> 00:17:46.955\nThey just changed it to\nstructured querying language and\n\n319\n00:17:46.955 --> 00:17:48.793\nit became an acronym of SQL.\n\n320\n00:17:48.793 --> 00:17:54.205\nNow, SQL is essentially the kind of\nroot language of just about every single\n\n321\n00:17:54.205 --> 00:17:58.390\nquerying language that you and I are going\nto encounter at some point, okay.\n\n322\n00:17:58.390 --> 00:18:02.550\nDifferent database products that are out\nthere, okay, will actually have their own\n\n323\n00:18:02.550 --> 00:18:07.120\nversion of it,\nwhat SQL normally calls a dialect of SQL.\n\n324\n00:18:07.120 --> 00:18:12.720\nIt is different enough where all of\na sudden, you actually know it in one,\n\n325\n00:18:12.720 --> 00:18:16.320\nyou start typing in a different one,\nit may tell you that the syntax is wrong,\n\n326\n00:18:16.320 --> 00:18:19.140\nokay, but the good this is\nthey all share a same root so\n\n327\n00:18:19.140 --> 00:18:24.380\nthat it's fairly common on knowing the\nstructure and knowing some of the syntax,\n\n328\n00:18:24.380 --> 00:18:28.210\njust kinda changing a few items is\nwhat you have to be able to do.\n\n329\n00:18:28.210 --> 00:18:32.810\nSo now, the structured query language\ntoday is actually an ISO and\n\n330\n00:18:32.810 --> 00:18:35.890\nand ANSI standard and\nthat's actually fairly important.\n\n331\n00:18:35.890 --> 00:18:40.550\nBecause of that standardization,\nit normally means that ever dialect that\n\n332\n00:18:40.550 --> 00:18:45.180\nhas branched off from that in order\nto change because of that product.\n\n333\n00:18:45.180 --> 00:18:51.185\nWell it actually shares the common you\nknow good I'm going to say 60% to 70%,\n\n334\n00:18:51.185 --> 00:18:55.580\nI'm going to say maybe even 80%, is gonna\nbe just about identical to every other\n\n335\n00:18:55.580 --> 00:18:59.330\ndialect of SQL that you'll end up seeing.\n\n336\n00:18:59.330 --> 00:19:05.600\nNow the one we are going to focus\non in Microsoft's SQL server\n\n337\n00:19:05.600 --> 00:19:10.940\n2014 is gonna be the one that it uses\nwhich is gonna be what we called T-SQL.\n\n338\n00:19:10.940 --> 00:19:14.490\nYou will hear that term as well and\nyou'll see it written that way too so\n\n339\n00:19:14.490 --> 00:19:19.160\ndon't mistake it you know when\nyou see that, where it's T-SQL or\n\n340\n00:19:19.160 --> 00:19:23.450\nyou hear the term Transact SQL they're\nreferring to the exact same thing.\n\n341\n00:19:23.450 --> 00:19:28.160\nSo on the exam,\ndon't get confused if you see one or\n\n342\n00:19:28.160 --> 00:19:32.350\nthe other, they mean the same thing is\nwhat you're actually hearing, okay.\n\n343\n00:19:32.350 --> 00:19:36.810\nSo this is gonna be that main language\nthat we have in SQL Server 2014.\n\n344\n00:19:36.810 --> 00:19:40.480\nNow, because of the way that this\nis actually mentioned, like I said,\n\n345\n00:19:40.480 --> 00:19:45.110\nis considered a dialect of SQL, in other\nwords, it's just different enough, but\n\n346\n00:19:45.110 --> 00:19:48.210\nat the same time, most of the time,\n\n347\n00:19:48.210 --> 00:19:52.830\nit also means that even inside\nof the T-SQL, the Transact SQL,\n\n348\n00:19:52.830 --> 00:19:58.070\nwhich is the one that Microsoft SQL\nserver uses, it also tends to follow\n\n349\n00:19:58.070 --> 00:20:02.320\na lot of the standardizations as well,\nokay, the standards tha are out there.\n\n350\n00:20:02.320 --> 00:20:05.520\nSo that means you can have it where it's\nactually written in a particular way in\n\n351\n00:20:05.520 --> 00:20:08.547\nthe standard and\nit will work just fine and\n\n352\n00:20:08.547 --> 00:20:12.720\nthen the way that Transact SQL chose\nto change it, it'll work just fine.\n\n353\n00:20:12.720 --> 00:20:17.220\nSo as an example, let me see if I\ncan just do a quick typing here.\n\n354\n00:20:17.220 --> 00:20:20.880\nSo let's just say that like in SQL itself,\n\n355\n00:20:20.880 --> 00:20:24.780\nthe not equal sign is\nactually written like this.\n\n356\n00:20:24.780 --> 00:20:27.400\nLet me make that bigger even though\nit's actually pretty big there.\n\n357\n00:20:27.400 --> 00:20:30.350\nI'll make that bigger, okay?\n\n358\n00:20:30.350 --> 00:20:35.260\nSo inside of SQL, this is\n\n359\n00:20:35.260 --> 00:20:40.520\nactually the standard here and\nlet's just say it's ISO, okay?\n\n360\n00:20:40.520 --> 00:20:45.570\nSo that's actually for\nnot equal is right there, okay?\n\n361\n00:20:45.570 --> 00:20:50.580\nNow if you were to do this thing for\nT-SQL, you'd also\n\n362\n00:20:50.580 --> 00:20:56.350\nend up seeing that for T-SQL, that's\nnot actually gonna be the official one,\n\n363\n00:20:56.350 --> 00:21:01.380\ninstead T-SQL uses what\nthe old way is called,\n\n364\n00:21:01.380 --> 00:21:05.720\nold guys like me,\nwe call it the bang and the equal sign.\n\n365\n00:21:05.720 --> 00:21:07.580\nThat actually is not equal.\n\n366\n00:21:07.580 --> 00:21:10.415\nAnd you'll actually see this\neven inside of Microsoft Access\n\n367\n00:21:10.415 --> 00:21:11.935\nyou can do this same thing here.\n\n368\n00:21:11.935 --> 00:21:13.535\n>> Programming languages use this as well.\n\n369\n00:21:13.535 --> 00:21:14.955\n>> Right.\n>> Scripting we use that.\n\n370\n00:21:14.955 --> 00:21:17.745\n>> Yeah, and you'll see that\nbecause it's a standardization, or\n\n371\n00:21:17.745 --> 00:21:21.655\na standard that's actually out there and\nyou'll see things like this as well.\n\n372\n00:21:21.655 --> 00:21:26.535\nWell just because T-SQL says this is the\nway you're supposed to write not equal,\n\n373\n00:21:26.535 --> 00:21:29.420\nif you also write it this way,\nit will still work.\n\n374\n00:21:29.420 --> 00:21:32.170\nIt'll still work, and\nit'll still actually be that way.\n\n375\n00:21:32.170 --> 00:21:35.040\nAnd according to best practices, and so\n\n376\n00:21:35.040 --> 00:21:39.550\nthis is what they call database best\npractices, as much as possible, you should\n\n377\n00:21:39.550 --> 00:21:44.530\ntry and use the standard, unless there\nis a special reason that you cannot.\n\n378\n00:21:44.530 --> 00:21:47.350\nNow you might go, what the heck are those\nspecial reasons that you can't?\n\n379\n00:21:47.350 --> 00:21:51.730\nWell you might find something\nin SQL Server 2014 that says,\n\n380\n00:21:51.730 --> 00:21:55.120\nhere's what you can do\nin SQL Server 2014 and\n\n381\n00:21:55.120 --> 00:21:59.120\nyou might find out that you can't do that\nin any other product that's actually like\n\n382\n00:21:59.120 --> 00:22:02.580\na database server product,\nokay, you might find that out.\n\n383\n00:22:02.580 --> 00:22:07.445\nAnd so they're saying if there's a special\nreason that you cannot do the actual\n\n384\n00:22:07.445 --> 00:22:12.590\nstandard, then use the language that T-SQL\n\n385\n00:22:12.590 --> 00:22:17.650\nactually says you should use, but at all\ntimes if you can, do the standardization.\n\n386\n00:22:17.650 --> 00:22:20.340\nNow you might be going, well Ronnie,\nwhy the heck are you emphasizing this?\n\n387\n00:22:20.340 --> 00:22:23.170\nWell, let's think about it\nas far as getting ready for\n\n388\n00:22:23.170 --> 00:22:26.200\nthe exam because this is why we're\nreally trying to be helpful, okay?\n\n389\n00:22:26.200 --> 00:22:29.410\nSo if you come across the exam and\nyou think about, right?\n\n390\n00:22:29.410 --> 00:22:31.000\nYou see two statements and\n\n391\n00:22:31.000 --> 00:22:35.340\nyou read them both and\nthey're both using the not equal okay and\n\n392\n00:22:35.340 --> 00:22:40.700\nof course Daniel, this has never happened\nto you where it says pick the best answer,\n\n393\n00:22:40.700 --> 00:22:44.750\nnot the right answer but which of the\nfollowing is considered the best answer?\n\n394\n00:22:44.750 --> 00:22:49.370\nWell the best answer then according\nto Microsoft SQL server itself\n\n395\n00:22:49.370 --> 00:22:51.700\nis to use the standard itself.\n\n396\n00:22:51.700 --> 00:22:55.110\nSo even if you read them both and\ngo man, that's the exact same thing,\n\n397\n00:22:55.110 --> 00:22:58.640\nboth of those should be right,\nyou're absolutely right.\n\n398\n00:22:58.640 --> 00:23:02.290\nThe problem that you had is what they\nactually said as being the best answer\n\n399\n00:23:02.290 --> 00:23:03.980\nis pretty much the key.\n\n400\n00:23:03.980 --> 00:23:07.560\nSo when you have that opportunity and\nyou see those choices there,\n\n401\n00:23:07.560 --> 00:23:12.850\nabout something that's exclusive to\na T-SQL or to Transact SQL versus what\n\n402\n00:23:12.850 --> 00:23:17.970\nis the standard, in SQL server land, this\nis kind of giving you a hint, hint, right?\n\n403\n00:23:17.970 --> 00:23:21.840\nIn SQL server land, make sure you\nchoose the standard if you can.\n\n404\n00:23:21.840 --> 00:23:25.470\nNow this means you should be familiar\nwith a lot of the standardizations here.\n\n405\n00:23:25.470 --> 00:23:28.040\nAnd that's hopefully what you're\nactually gonna see in just about\n\n406\n00:23:28.040 --> 00:23:30.330\neverything that we're gonna try and\nfollow in our courses,\n\n407\n00:23:30.330 --> 00:23:34.160\nespecially when I'm querying is we'll\ntry and keep most of those standards.\n\n408\n00:23:34.160 --> 00:23:37.470\nSo I'm not gonna actually do\na lot of the Transact SQL ones,\n\n409\n00:23:37.470 --> 00:23:41.120\nbecause what I believe is that if you\nactually look at the right way to do it\n\n410\n00:23:41.120 --> 00:23:44.470\nall of the time, you should be able to\npick out the wrong one, when you go,\n\n411\n00:23:44.470 --> 00:23:50.075\nI know that that says the same thing, but\nhere's what the best recommendation is.\n\n412\n00:23:50.075 --> 00:23:51.633\nIt's always a great hint\nwhen you actually know that.\n\n413\n00:23:51.633 --> 00:23:55.353\n>> Yeah, I call those the Microsoft\nspecials cuz they love to do that.\n\n414\n00:23:55.353 --> 00:23:58.753\nThey love to say here's a bunch of\nanswers that are actually correct.\n\n415\n00:23:58.753 --> 00:24:02.933\nBut we're looking for the specific way\nin which we think you should do this.\n\n416\n00:24:02.933 --> 00:24:05.357\nSo they can trip you up\nwith that kind of stuff,\n\n417\n00:24:05.357 --> 00:24:09.300\nI know I've fallen prey to them plenty\nof times on the Microsoft exam.\n\n418\n00:24:09.300 --> 00:24:11.740\nSo that's what we're gonna try\nto help you guys out with.\n\n419\n00:24:11.740 --> 00:24:16.280\nUsually the hardest way is the Microsoft\nway, so Ronnie's doing you\n\n420\n00:24:16.280 --> 00:24:21.250\nguys a service by showing you the as we\nsay the correct way to do these things.\n\n421\n00:24:21.250 --> 00:24:23.000\nSo, thank you for that Ronnie.\n\n422\n00:24:23.000 --> 00:24:25.220\nI know it seems, it's like it's always so\nmuch more difficult, right?\n\n423\n00:24:25.220 --> 00:24:28.100\nWe've gotta learn two\ndifferent ways to do something\n\n424\n00:24:28.100 --> 00:24:31.090\nwell if you've got more ways to do\nsomething you've got more options, right?\n\n425\n00:24:31.090 --> 00:24:32.876\nSo we know which way\nthey're gonna expect and\n\n426\n00:24:32.876 --> 00:24:35.450\nthen you know which way is\ngonna be convenient for you.\n\n427\n00:24:35.450 --> 00:24:37.310\nAnd now you've got a better tool kit.\n\n428\n00:24:37.310 --> 00:24:41.590\n>> All right, so now that we have\nan understanding at least of an insanely,\n\n429\n00:24:41.590 --> 00:24:44.930\nover simplified understanding of\nwhat a database actually is, and\n\n430\n00:24:44.930 --> 00:24:48.700\nthen the language that we can use\nto pull that information out.\n\n431\n00:24:48.700 --> 00:24:52.620\nWell, then we need to actually\ntalk about the SQL server itself.\n\n432\n00:24:52.620 --> 00:24:56.440\nNow, everything that I've been doing\nactually does actually relates to SQL\n\n433\n00:24:56.440 --> 00:25:00.650\nserver 2014 and it really does help in\nhaving that fundamental background and\n\n434\n00:25:00.650 --> 00:25:02.340\nunderstanding that, that we have.\n\n435\n00:25:02.340 --> 00:25:05.560\nThat we have the database itself that\nwe need to get information from,\n\n436\n00:25:05.560 --> 00:25:08.780\nwe have the language that's gonna help\nus to get to the information from it\n\n437\n00:25:08.780 --> 00:25:11.775\nwell now we have to actually know what\nhelps us to meet that in between.\n\n438\n00:25:11.775 --> 00:25:15.190\nSo its kinda the, the weird thing, right?\n\n439\n00:25:15.190 --> 00:25:17.050\nAs I started thinking about it right here.\n\n440\n00:25:17.050 --> 00:25:20.920\nIt's like if I said,\nDaniel tomorrow let's do this.\n\n441\n00:25:20.920 --> 00:25:25.560\nLet's learn Icelandic language,\nwhatever that Icelandic language is, but\n\n442\n00:25:25.560 --> 00:25:29.570\nwe don't have anybody to speak\nto in the Icelandic language,\n\n443\n00:25:29.570 --> 00:25:31.570\nit's really not gonna help us out.\n\n444\n00:25:31.570 --> 00:25:32.320\nWell the same thing.\n\n445\n00:25:32.320 --> 00:25:35.630\nIf you learn all of the querying\ninside the SQL, right?\n\n446\n00:25:35.630 --> 00:25:39.660\nAnd you know that there are databases\nout there that you need to get to, okay?\n\n447\n00:25:39.660 --> 00:25:45.210\nWell how in the world do you, or where do\ntend to actually take that language and\n\n448\n00:25:45.210 --> 00:25:48.150\nwrite that language, or\nquery something, okay?\n\n449\n00:25:48.150 --> 00:25:52.080\nWell, where you tend to do that\nis in a database engine, and\n\n450\n00:25:52.080 --> 00:25:56.330\nour engine is what we call\nMicrosoft SQL Server 2014.\n\n451\n00:25:56.330 --> 00:25:59.750\nNow, that actually leaves us to\na little bit of a conundrum here.\n\n452\n00:25:59.750 --> 00:26:02.748\nThe reason why I say that is\na lot of you might be saying,\n\n453\n00:26:02.748 --> 00:26:08.180\nwell Ronnie I have 2012,\nand I don't have 2014.\n\n454\n00:26:08.180 --> 00:26:10.280\nIs this still going to work?\n\n455\n00:26:10.280 --> 00:26:12.010\nYou better believe it, okay?\n\n456\n00:26:12.010 --> 00:26:16.460\nAnd actually even according to\nthe official Microsoft exam page\n\n457\n00:26:16.460 --> 00:26:20.370\nthat all the elements that we're\ngonna do here in the 2014,\n\n458\n00:26:20.370 --> 00:26:23.720\nis actually straight from\nthe 2012 edition as well.\n\n459\n00:26:23.720 --> 00:26:27.110\nThey decided not to update any\nof the exam objectives either.\n\n460\n00:26:27.110 --> 00:26:30.310\nSo in other words, they're saying that\neverything you would have studied for\n\n461\n00:26:30.310 --> 00:26:33.510\nin 2012 we said that there's no\nneed to change it because it's\n\n462\n00:26:33.510 --> 00:26:37.420\nactually everything that we\nactually expected for 2014 as well.\n\n463\n00:26:37.420 --> 00:26:41.110\nSo it's really gonna help you out,\nthat there's not a ton of changes.\n\n464\n00:26:41.110 --> 00:26:43.400\nBut where there are changes,\nwe also will point those things out.\n\n465\n00:26:43.400 --> 00:26:45.440\nWhere they're specific to 2014,\n\n466\n00:26:45.440 --> 00:26:48.130\nwe'll make sure we point those\nthings out as well, okay?\n\n467\n00:26:48.130 --> 00:26:49.700\nSo that's what you also end up seeing.\n\n468\n00:26:49.700 --> 00:26:53.830\nThere's no at least\nexam objective changes.\n\n469\n00:26:53.830 --> 00:26:57.910\nNo weird things that you have to worry\nabout, but we will point those things out.\n\n470\n00:26:57.910 --> 00:27:00.250\nSo what does that mean for\nyou and me then?\n\n471\n00:27:00.250 --> 00:27:05.543\nWell, that means that when we take a look\nat actually querying something, you and\n\n472\n00:27:05.543 --> 00:27:10.860\nI are actually going to be querying\nagainst a `1SQL 1014 SQL server.\n\n473\n00:27:10.860 --> 00:27:12.931\nAnd we're actually gonna use\npart of that to help us out.\n\n474\n00:27:12.931 --> 00:27:16.760\nNow, one of the things that we have to\nactually also think about to get ready for\n\n475\n00:27:16.760 --> 00:27:20.550\nthe exam as well is that there are\nmultiple editions of Microsoft SQL Server.\n\n476\n00:27:20.550 --> 00:27:25.640\nSo let's take a look here at a list of\nthings that I have available for us, okay?\n\n477\n00:27:25.640 --> 00:27:28.294\nLet me go ahead and\nkey in on this why this is important for\n\n478\n00:27:28.294 --> 00:27:30.115\nthe querying fundamentals, right?\n\n479\n00:27:30.115 --> 00:27:32.485\nAs far as what we are preparing for, okay?\n\n480\n00:27:32.485 --> 00:27:36.071\nRegardless of what edition\nthat you have running, okay?\n\n481\n00:27:36.071 --> 00:27:40.842\nIt's the same core database engine, so\nweather you are actually at the enterprise\n\n482\n00:27:40.842 --> 00:27:45.139\nlevel gone through these business\nintelligence ones, even coming down to\n\n483\n00:27:45.139 --> 00:27:49.590\nthe express version the engine,\nthe main core database engine, stores it.\n\n484\n00:27:49.590 --> 00:27:51.510\nAnd how it stores it, and how you and\n\n485\n00:27:51.510 --> 00:27:54.470\nI can retrieve information\nfrom it is identical, okay?\n\n486\n00:27:54.470 --> 00:27:56.490\nAnd that's something you wanna\nmake sure that you understand.\n\n487\n00:27:56.490 --> 00:27:58.880\nIn other words you don't have to\nactually learn something new and\n\n488\n00:27:58.880 --> 00:28:00.650\ndifferent on each version here.\n\n489\n00:28:00.650 --> 00:28:03.106\nThe core database engine\nitself is the same.\n\n490\n00:28:03.106 --> 00:28:06.327\nSo the heart of everything that\nyou are doing is the same but\n\n491\n00:28:06.327 --> 00:28:10.296\nthere are Enterprise editions versus\nStandard editions here, okay?\n\n492\n00:28:10.296 --> 00:28:14.556\nThe main thing about the enterprise\nedition that makes it different is that it\n\n493\n00:28:14.556 --> 00:28:17.304\nnot only can you do the querying\nthat you need to but\n\n494\n00:28:17.304 --> 00:28:20.859\nit has a complete comprehensive\nlist of some analytical tools.\n\n495\n00:28:20.859 --> 00:28:25.617\nThey'll help you optimize it much\nbetter and you can use it with large,\n\n496\n00:28:25.617 --> 00:28:29.285\ngigantic servers in terms\nof performance on servers.\n\n497\n00:28:29.285 --> 00:28:34.421\nSo what I saying is that\nyou can access more RAM and\n\n498\n00:28:34.421 --> 00:28:39.435\nalso use the CPU power\nbehind those servers that\n\n499\n00:28:39.435 --> 00:28:45.700\nactually have not quad cores but\nactually four or more.\n\n500\n00:28:45.700 --> 00:28:47.650\nSo you can actually get these things, and\n\n501\n00:28:47.650 --> 00:28:54.070\nthey can actually utilize the entire power\nof multiple CPUs simultaneously too.\n\n502\n00:28:54.070 --> 00:28:57.240\nSo the Enterprise edition will\nhelp you to do that, okay?\n\n503\n00:28:57.240 --> 00:29:00.520\nWhen you come down to the standard\nedition, it will allow you to do\n\n504\n00:29:00.520 --> 00:29:03.430\nthe querying in the same way that\nyou can do in Enterprise but\n\n505\n00:29:03.430 --> 00:29:06.890\nsome of the analytical tools\nare not actually gonna be there.\n\n506\n00:29:06.890 --> 00:29:10.680\nSo some of these that actually have\nreally detailed and really gigantic\n\n507\n00:29:10.680 --> 00:29:14.390\nbusiness intelligence features\nenterprise includes everything, right?\n\n508\n00:29:14.390 --> 00:29:16.330\nIncludes everything that\nstandard would include.\n\n509\n00:29:16.330 --> 00:29:19.240\nIncludes everything that what we call\nbusiness intelligence features would also\n\n510\n00:29:19.240 --> 00:29:23.920\ninclude as well but also can actually\naccess some bit gigantic servers,\n\n511\n00:29:23.920 --> 00:29:27.050\nmultiple CPUs, a ton more RAM as well.\n\n512\n00:29:27.050 --> 00:29:29.260\nStandard a little bit less, okay?\n\n513\n00:29:29.260 --> 00:29:33.530\nSo with the standard editions you can\nstill do that the analytical ability\n\n514\n00:29:33.530 --> 00:29:38.220\nthough is a bit more strict in this one,\nokay?\n\n515\n00:29:38.220 --> 00:29:41.690\nSo this one doesn't tend to have any\nof the business intelligence features\n\n516\n00:29:41.690 --> 00:29:43.670\nthat you might also have.\n\n517\n00:29:43.670 --> 00:29:47.840\nBut then you can actually have specific\nbusiness intelligence as well too,\n\n518\n00:29:47.840 --> 00:29:50.400\nwhich is designed for\nspecific types of businesses.\n\n519\n00:29:50.400 --> 00:29:52.760\nNow, when it comes down to SQL 2014,\n\n520\n00:29:52.760 --> 00:29:58.010\nthey developed three other specific\nadditions depending on what you needed.\n\n521\n00:29:58.010 --> 00:30:02.660\nOne where they call a parallel data\nwarehouse edition and this is exactly what\n\n522\n00:30:02.660 --> 00:30:06.120\nit sounds like, you're actually\nclustering these things together, okay?\n\n523\n00:30:06.120 --> 00:30:09.260\nSo you can actually run that,\na web developer edition, and\n\n524\n00:30:09.260 --> 00:30:13.540\nthen for testing sake you might\ndo the idea of the express.\n\n525\n00:30:13.540 --> 00:30:15.520\nSo what it sounds like is exactly that.\n\n526\n00:30:15.520 --> 00:30:19.110\nIf you actually have an enterprise where\nyou multiple SQL servers that are running\n\n527\n00:30:19.110 --> 00:30:23.490\nand a ton,\nin other words super hefty servers here.\n\n528\n00:30:23.490 --> 00:30:25.880\nEnterprise is probably the way to go.\n\n529\n00:30:25.880 --> 00:30:29.750\nIn a small to medium business,\nmore than likely standard is.\n\n530\n00:30:29.750 --> 00:30:32.830\nIn a business that is really focusing\non specific in on specific industry,\n\n531\n00:30:32.830 --> 00:30:36.380\nyou might pick the business intelligence\none that gives you specific analytic\n\n532\n00:30:36.380 --> 00:30:37.700\nfeatures that you want.\n\n533\n00:30:37.700 --> 00:30:40.290\nAnd then if you go to SQL Server 2014 here\n\n534\n00:30:40.290 --> 00:30:43.533\nis the other three additions that\nyou might also pick on as well.\n\n535\n00:30:43.533 --> 00:30:47.600\n>> Ronnie for this show specifically our\nviewers are gonna be able to get away with\n\n536\n00:30:47.600 --> 00:30:52.260\njust using the expression do they need to\nactually try to get hands on copy of what\n\n537\n00:30:52.260 --> 00:30:56.120\ndo we have here, the parallel data\nwarehouse and all the other versions?\n\n538\n00:30:56.120 --> 00:31:00.400\n>> Yeah in this one, you should be able to\nget away with the express edition if you\n\n539\n00:31:00.400 --> 00:31:03.210\nneed to, and\nthe nice thing is that means you can.\n\n540\n00:31:03.210 --> 00:31:06.600\nNow the only limitation that\nyou're gonna have if you try and\n\n541\n00:31:06.600 --> 00:31:11.370\ndo the express edition, you probably\nwill not be able to do the exact same\n\n542\n00:31:12.500 --> 00:31:16.600\ndatabase that I'm doing, even though I'm\nusing the example database from Microsoft.\n\n543\n00:31:16.600 --> 00:31:19.870\nAnd the reason why is that this is\nnot designed to handle a fairly\n\n544\n00:31:19.870 --> 00:31:21.800\nhefty sized database.\n\n545\n00:31:21.800 --> 00:31:26.100\nI'm actually using one that Microsoft\ndoes have as an example database.\n\n546\n00:31:26.100 --> 00:31:29.180\nIt might actually be where it tells\nyou you can't run this one on Express.\n\n547\n00:31:29.180 --> 00:31:32.560\nI'm not exactly sure cuz I did not\nrun it on Express to find out.\n\n548\n00:31:32.560 --> 00:31:34.470\nSo in that sense,\n\n549\n00:31:34.470 --> 00:31:37.850\nI'm using a standard edition because\nI didn't need the Enterprise to run.\n\n550\n00:31:37.850 --> 00:31:41.220\nBut on the Standard edition\nthe one that I'm using might have\n\n551\n00:31:41.220 --> 00:31:43.080\nclose to a million rows of data I think.\n\n552\n00:31:43.080 --> 00:31:47.420\nSo it's, it's not huge at\nthe same time it's not small.\n\n553\n00:31:47.420 --> 00:31:50.840\nSo you actually see there's a lot of\nrepetition in the way that they've\n\n554\n00:31:50.840 --> 00:31:51.986\nactually performed everything.\n\n555\n00:31:51.986 --> 00:31:55.460\nSo there's, I'm gonna say there's\nat least 300 thousand rows of data\n\n556\n00:31:55.460 --> 00:31:56.810\nin the one that I'm using.\n\n557\n00:31:56.810 --> 00:32:00.020\nAnd so you might find out that\nthe express edition may be able to do it,\n\n558\n00:32:00.020 --> 00:32:01.840\nmay not, I don't know for sure.\n\n559\n00:32:01.840 --> 00:32:03.290\nBut you can try.\n\n560\n00:32:03.290 --> 00:32:06.000\nThat's what I'd say is try and\nbe able to see that.\n\n561\n00:32:06.000 --> 00:32:10.590\nBut overall though, if it comes with its\nown little example database, you can run\n\n562\n00:32:10.590 --> 00:32:14.420\nthe same types of commands, but you may\nnot be able to do the exact same one.\n\n563\n00:32:14.420 --> 00:32:16.810\nBut if you do tend to\nrun the standard one.\n\n564\n00:32:16.810 --> 00:32:19.850\nYou can actually run the exact\nthing that I'll be running and\n\n565\n00:32:19.850 --> 00:32:22.000\nbe able to actually work with it as well.\n\n566\n00:32:22.000 --> 00:32:24.860\nSo that's what it actually\ntakes a look at when we start\n\n567\n00:32:24.860 --> 00:32:26.730\ntalking about the idea here, okay?\n\n568\n00:32:26.730 --> 00:32:32.940\nThat these systems are actually there and\navailable for us to be able to work with.\n\n569\n00:32:32.940 --> 00:32:35.640\nSo in SQL server as far\nas this class goes,\n\n570\n00:32:35.640 --> 00:32:38.550\nwe're gonna be using the Standard edition\nand we're gonna be using a fairly\n\n571\n00:32:38.550 --> 00:32:43.030\nlarge database here and\nactually fairly complex at the same time.\n\n572\n00:32:43.030 --> 00:32:45.470\nSo even though this is about\nthe fundamentals of querying,\n\n573\n00:32:45.470 --> 00:32:48.540\nwe're actually gonna see that we're\ngoing to use something that's actually\n\n574\n00:32:48.540 --> 00:32:52.690\ngoing to get us beyond the idea of just,\nwhat we call, a simple select statement.\n\n575\n00:32:52.690 --> 00:32:56.670\nAnd we'll actually be doing a lot of\ndifferent querying even with XML data as\n\n576\n00:32:56.670 --> 00:32:57.870\nwell in the future.\n\n577\n00:32:57.870 --> 00:33:01.040\nSo there's a lot of different things that\nwe'll actually be able to handle here\n\n578\n00:33:01.040 --> 00:33:02.580\nin our example and our shows.\n\n579\n00:33:02.580 --> 00:33:05.200\nJust to make sure that you're\nnot only ready for the exam but\n\n580\n00:33:05.200 --> 00:33:06.630\nany type of data that you come across,\n\n581\n00:33:06.630 --> 00:33:09.640\nhopefully you'll be able to pull out\nthe information that you want to and\n\n582\n00:33:09.640 --> 00:33:14.010\nfeel much more comfortable at it and\neven get certified inside of SQL Server.\n\n583\n00:33:14.010 --> 00:33:16.270\nAt least the fundamentals exam with that.\n\n584\n00:33:16.270 --> 00:33:17.500\n>> Well that's our series now.\n\n585\n00:33:17.500 --> 00:33:18.720\nI'm just kidding [LAUGH].\n\n586\n00:33:18.720 --> 00:33:20.790\nThere are plenty more\nthings to go over but\n\n587\n00:33:20.790 --> 00:33:24.920\nwe are looking at our clock in it\ndwindle down very, very quick for us.\n\n588\n00:33:24.920 --> 00:33:28.268\nRonnie we thank you for\ndropping by today and getting us ready and\n\n589\n00:33:28.268 --> 00:33:30.130\nprepare to embark on this journey.\n\n590\n00:33:30.130 --> 00:33:34.300\nAnd hopefully you guys are feeling that\nway and continue to watch with us.\n\n591\n00:33:34.300 --> 00:33:36.760\nCuz I know Ronnie's got a lot of cool\nstuff up his sleeve when it comes to\n\n592\n00:33:36.760 --> 00:33:37.440\nthe SQL business.\n\n593\n00:33:37.440 --> 00:33:40.229\nSo again Ronnie, thanks for joining us and\nwe thank you guys for watching.\n\n594\n00:33:40.229 --> 00:33:43.095\nSigning off for ITProTV,\nI've been your host Daniel Lowrey\n\n595\n00:33:43.095 --> 00:33:44.058\n>> And I'm Ronnie Wong.\n\n596\n00:33:44.058 --> 00:33:45.916\n>> We'll see you next time.\n\n597\n00:33:45.916 --> 00:33:53.740\n[MUSIC]\n\n",
          "vimeoId": "164047410"
        },
        {
          "description": "In this episode, Daniel and Ronnie come back to finish up their discussion and primer of working with the Microsoft SQL Server 2014 Management interface. They also discuss the different default databases you'll encounter after installation, which includes the System Databases (Master, MSDB, Model, TempDB) and User created databases.",
          "length": "1271",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-1-2-sql_server_basics_pt2-041816-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-1-2-sql_server_basics_pt2-041816-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-1-2-sql_server_basics_pt2-041816-1-sm.jpg",
          "title": "SQL Server Basics Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.148 --> 00:00:16.178\nAll right, greetings everyone and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:16.178 --> 00:00:20.647\nI'm your host, Daniel Lowrie and\nin today's episode we're continuing\n\n4\n00:00:20.647 --> 00:00:24.880\non with our Querying Microsoft's\nSQL Server 2014 series.\n\n5\n00:00:24.880 --> 00:00:28.500\nJoining us back in the studio again for\npart two on some basics,\n\n6\n00:00:28.500 --> 00:00:31.000\na little bit of a primer,\nis our good friend Mr. Ronnie Wong.\n\n7\n00:00:31.000 --> 00:00:32.920\nRonnie, welcome back, how's it going, sir?\n\n8\n00:00:32.920 --> 00:00:33.770\n>> It's going well.\n\n9\n00:00:33.770 --> 00:00:37.350\nThank you for having me back on the show\nas we continue on to take a look at more\n\n10\n00:00:37.350 --> 00:00:39.530\nof the SQL Server 2014.\n\n11\n00:00:39.530 --> 00:00:42.078\nNow we want to jump back into a part\ntwo cuz there are a few left,\n\n12\n00:00:42.078 --> 00:00:44.285\na few things that I've\nactually left out of part one.\n\n13\n00:00:44.285 --> 00:00:47.370\nI wanna make sure that we\nalso cover that as well.\n\n14\n00:00:47.370 --> 00:00:50.480\nSo let's go back and pick up where\nwe had actually just finished.\n\n15\n00:00:50.480 --> 00:00:53.350\nWe just take a look at some\nof the SQL Server additions.\n\n16\n00:00:53.350 --> 00:00:54.981\nSo as we take a look here on my screen,\n\n17\n00:00:54.981 --> 00:00:57.999\nwe're just talking about some of\nthese different additions here.\n\n18\n00:00:57.999 --> 00:01:02.125\nAnd we were taking a look at what they\nactually do bring for us and the benefits\n\n19\n00:01:02.125 --> 00:01:06.520\nand we'll be using the standard edition\nduring the rest of our entire show.\n\n20\n00:01:06.520 --> 00:01:09.790\nSo with the enterprise again,\nbig gigantic business to.\n\n21\n00:01:09.790 --> 00:01:13.903\nAnd one of the things I did forget mention\nthat I should mention right now is that\n\n22\n00:01:13.903 --> 00:01:17.016\nnot only does that sport of course,\nthe ability to do a lot,\n\n23\n00:01:17.016 --> 00:01:19.072\nbut you can also virtualize of course,\n\n24\n00:01:19.072 --> 00:01:22.477\nMicrosoft SQL Server is another\nthing that we wanna add in here.\n\n25\n00:01:22.477 --> 00:01:26.150\nWhereas your not going to be able to\ndo that with the actual standard dish.\n\n26\n00:01:26.150 --> 00:01:28.870\nNow I say that,\nI'm running it in a virtual machine, so\n\n27\n00:01:28.870 --> 00:01:31.120\nit actually is working in that sense.\n\n28\n00:01:31.120 --> 00:01:33.600\nSo it seems like it actually\ndoes work even though they say,\n\n29\n00:01:33.600 --> 00:01:36.510\nthat its limited to\nthe Enterprise editions as well.\n\n30\n00:01:36.510 --> 00:01:38.112\n>> Is that the same for\nthe Microsoft Azure?\n\n31\n00:01:38.112 --> 00:01:43.605\nObviously they have Azure SQL, and\nthen you could also build a provisional\n\n32\n00:01:43.605 --> 00:01:48.940\nmachine and install SQL, and does it\ntake all versions in there as well?\n\n33\n00:01:48.940 --> 00:01:50.230\n>> It does, it really does.\n\n34\n00:01:50.230 --> 00:01:53.311\nBut the nice thing about Microsoft, and\nthis is actually where a great point is,\n\n35\n00:01:53.311 --> 00:01:55.678\nthat leads us from the virtualization,\nso thank you Daniel.\n\n36\n00:01:55.678 --> 00:01:56.816\n>> Yeah, you're welcome.\n[LAUGH]\n\n37\n00:01:56.816 --> 00:01:58.300\n>> So when we start taking a look at it.\n\n38\n00:01:58.300 --> 00:02:00.665\nWhen you actually do\nbuild virtual machines,\n\n39\n00:02:00.665 --> 00:02:04.195\nreally what you're doing is essentially\nprovisioning a SQL server, and\n\n40\n00:02:04.195 --> 00:02:06.665\nyou build that out,\nwell how do you get access to it?\n\n41\n00:02:06.665 --> 00:02:09.885\nThe nice thing is you get access to it\njust like a regular network resource.\n\n42\n00:02:09.885 --> 00:02:14.185\nSo you know how to connect into anything\nelse that you do across network,\n\n43\n00:02:14.185 --> 00:02:16.865\nMicrosoft SQl Server allows\nyou to do the same thing,\n\n44\n00:02:16.865 --> 00:02:20.760\nusing the same UNC path, using all that,\nand you can actually make that available.\n\n45\n00:02:20.760 --> 00:02:24.620\nThe other of course to awesome provision\nis what Daniel just mentioned.\n\n46\n00:02:24.620 --> 00:02:27.974\nThe idea of using\nthe Azure SQL Server too.\n\n47\n00:02:27.974 --> 00:02:29.774\nNow, when you start talking\nabout Azure SQL Server,\n\n48\n00:02:29.774 --> 00:02:32.104\nthe benefit is you don't have to\nworry about provisioning anymore.\n\n49\n00:02:32.104 --> 00:02:36.308\nCuz you just kind of go to Azure and go,\nI need a SQL Server and you just tell them\n\n50\n00:02:36.308 --> 00:02:41.000\nhow big you want to build it and it's\nactually up and available and ready to go.\n\n51\n00:02:41.000 --> 00:02:45.170\nAnd it works seamlessly again\neven with your on-premises stuff\n\n52\n00:02:45.170 --> 00:02:48.380\nas you integrate that\ninto your cloud as well.\n\n53\n00:02:48.380 --> 00:02:52.410\nSo it's actually very nice that now\nSQL Server actually does run and\n\n54\n00:02:52.410 --> 00:02:55.440\nthe good thing is regardless, whether\nyou're actually running it in the cloud\n\n55\n00:02:55.440 --> 00:02:58.530\nand you don't have a clue where that\nserver actually is on the planet.\n\n56\n00:02:58.530 --> 00:03:02.350\nOr whether you're running it right here\non-premises, wherever you actually are,\n\n57\n00:03:02.350 --> 00:03:06.280\nyou're actually gonna connect and\nbe able to run the queries the same way.\n\n58\n00:03:06.280 --> 00:03:10.070\nSo there's not a lot of complexity in\nterms of what we're having to do with it.\n\n59\n00:03:10.070 --> 00:03:11.230\nIf there's any complexity at all,\n\n60\n00:03:11.230 --> 00:03:14.690\nit's actually gonna be just making sure\nwe're given the right permissions to be\n\n61\n00:03:14.690 --> 00:03:18.710\nable to connect in a do the querying that\nwe're actually needing to be able to do.\n\n62\n00:03:18.710 --> 00:03:22.790\nSo with that then, when you start taking\na look then, remember that you do have\n\n63\n00:03:22.790 --> 00:03:26.850\njust kind of these advantages\nhere in using each one of these.\n\n64\n00:03:26.850 --> 00:03:30.570\nSo it really doesn't matter which\nparticular edition you end up with.\n\n65\n00:03:30.570 --> 00:03:33.120\nWhat we're gonna show you should\nwork across all the editions and\n\n66\n00:03:33.120 --> 00:03:35.530\nthat's the key that we have.\n\n67\n00:03:35.530 --> 00:03:40.140\nSo Daniel also asked\na question in the last episode\n\n68\n00:03:40.140 --> 00:03:43.390\nthat we were taking a look at\nhere about express version.\n\n69\n00:03:43.390 --> 00:03:45.925\nCan we actually run the express\nversion even for this show?\n\n70\n00:03:45.925 --> 00:03:50.908\nYes, you can and one of the things I\nmentioned was the database that I'm using\n\n71\n00:03:50.908 --> 00:03:55.500\nthough is a fairly,\nit's large but it's not gigantic.\n\n72\n00:03:55.500 --> 00:04:00.110\nAnd one of the limitations behind express\nis that it essentially will run, but\n\n73\n00:04:00.110 --> 00:04:05.560\nit can only recognize a max of 1 gig of\nRAM and about 10 gigs of hard drive space\n\n74\n00:04:05.560 --> 00:04:09.970\nis what you need to be able to install\nwith it as well and a single processor.\n\n75\n00:04:09.970 --> 00:04:13.830\nSo if you do try to run it with a larger\ndatabase, you're gonna find out something.\n\n76\n00:04:13.830 --> 00:04:18.650\nIt's not that it won't run but your disk\nIO is going to increase tremendously.\n\n77\n00:04:18.650 --> 00:04:21.850\nSo that means that your hard drive\nis going to hit pretty heavily,\n\n78\n00:04:21.850 --> 00:04:25.530\nif you try and run it with a fairly\nlarge database in the background.\n\n79\n00:04:25.530 --> 00:04:28.470\nAnd so don't expect super high performance\n\n80\n00:04:28.470 --> 00:04:33.310\nif you do happen to connect into a large\ndatabase with the SQL Express edition.\n\n81\n00:04:33.310 --> 00:04:34.030\nIt'll allow you to do it,\n\n82\n00:04:34.030 --> 00:04:38.430\nbut when it starts having to do all\nthat exchange as far as the disk IO,\n\n83\n00:04:38.430 --> 00:04:42.255\nyou're probably not gonna actually enjoy\nthat, that waiting that you'll need to do.\n\n84\n00:04:42.255 --> 00:04:45.205\nSo not saying you can't do it, but\njust kinda be willing to wait for\n\n85\n00:04:45.205 --> 00:04:45.925\nsome of the results.\n\n86\n00:04:45.925 --> 00:04:46.909\n>> It's like the dial-up of SQL.\n\n87\n00:04:46.909 --> 00:04:48.466\n[LAUGH]\n>> Yeah,\n\n88\n00:04:48.466 --> 00:04:51.663\nit's just limited in terms of\nthe resources that you have and so\n\n89\n00:04:51.663 --> 00:04:54.031\nperformance is not gonna\nbe where you want it.\n\n90\n00:04:54.031 --> 00:04:55.947\nHopefully, it's a little\nbit better than dial-up.\n\n91\n00:04:55.947 --> 00:04:58.453\n>> [LAUGH]\n>> At least that's what I'm hoping for, so\n\n92\n00:04:58.453 --> 00:05:00.710\nbut you will have that as well All right?\n\n93\n00:05:00.710 --> 00:05:02.937\nSo now,\nlet's take a look here in our part two.\n\n94\n00:05:02.937 --> 00:05:06.400\nNow that I've talked about it right,\nsaying okay, so\n\n95\n00:05:06.400 --> 00:05:09.170\nwhat do we need to actually do that.\n\n96\n00:05:09.170 --> 00:05:13.330\nWell, I'm gonna actually just flipped\non over to my install of SQL.\n\n97\n00:05:13.330 --> 00:05:16.780\nNow, I am running this on a Server 2012,\nthat's what you saw that just popped up.\n\n98\n00:05:16.780 --> 00:05:19.510\nSo you're saying, no Ronnie,\nyou're running the SQL 2012.\n\n99\n00:05:19.510 --> 00:05:23.900\nI'm running the SQL 2014 as well and\nso that's what we have here.\n\n100\n00:05:23.900 --> 00:05:26.865\nAnd you'll see it's actually\nSQL Server 2014 and\n\n101\n00:05:26.865 --> 00:05:29.990\nthe edition that's actually\nout there as well.\n\n102\n00:05:29.990 --> 00:05:34.540\nNow, when you start doing this,\nthe install of the process of running SQL.\n\n103\n00:05:34.540 --> 00:05:37.710\nWe're not there to really do\na lot of the installation\n\n104\n00:05:37.710 --> 00:05:40.260\nof everything that has to\ngo on in the background.\n\n105\n00:05:40.260 --> 00:05:43.430\nBut you wanna make sure that's actually\na couple of things are included in\n\n106\n00:05:43.430 --> 00:05:44.940\nthe install.\n\n107\n00:05:44.940 --> 00:05:47.580\nSo you of course,\nwill actually get to this point,\n\n108\n00:05:47.580 --> 00:05:51.780\nwhere if you're actually installing SQL\nfor your own test environment like this.\n\n109\n00:05:51.780 --> 00:05:53.410\nWell, what you'll actually be able to see,\n\n110\n00:05:53.410 --> 00:05:57.520\nis that once you get to Microsoft SQL\nServer 2014, and there it is right here..\n\n111\n00:05:58.850 --> 00:06:02.940\nYou wanna make sure that you\ncheckmark that it has this, which is\n\n112\n00:06:02.940 --> 00:06:08.640\nthe SQL Server 2014 Management Studio or\n2012 Management Studio, whichever one.\n\n113\n00:06:08.640 --> 00:06:12.370\nYou gotta have the Management Studio, so\nit'll give you checkboxes of what you want\n\n114\n00:06:12.370 --> 00:06:15.660\nto actually have installed on here and\nwhat you don't want.\n\n115\n00:06:15.660 --> 00:06:18.300\nYou need to make sure you\nhave this installed as well.\n\n116\n00:06:18.300 --> 00:06:21.040\nYou might also see that there's\ngoing to be plenty of different\n\n117\n00:06:21.040 --> 00:06:24.820\nprerequisites that you also\nhave to install on there.\n\n118\n00:06:24.820 --> 00:06:27.950\nSome framework, .net framework and stuff.\n\n119\n00:06:27.950 --> 00:06:29.650\nMake sure you install all that stuff.\n\n120\n00:06:29.650 --> 00:06:32.970\nBut this is the actual\nmanagement window that you and\n\n121\n00:06:32.970 --> 00:06:37.960\nI are gonna use when it comes\ndown to clearing Microsoft's SQL.\n\n122\n00:06:37.960 --> 00:06:40.170\nSo it's going to be the SQL Server 2014,\n\n123\n00:06:40.170 --> 00:06:43.500\nthat Management Studio is\nthe one that you want.\n\n124\n00:06:43.500 --> 00:06:47.230\nAnd I also went ahead and\npinned it down here to my task bar, so\n\n125\n00:06:47.230 --> 00:06:50.580\nthat it would actually be up and\nrunning when I was ready to go.\n\n126\n00:06:50.580 --> 00:06:54.950\nSo when you take a look at what\nwe're actually normally doing here,\n\n127\n00:06:56.000 --> 00:06:58.670\nis that once SQL server's\nactually installed\n\n128\n00:06:58.670 --> 00:07:03.030\nit also means that you'll have to be\nable to import a database in here.\n\n129\n00:07:03.030 --> 00:07:06.240\nNow these do not come by default,\nthese temporary or\n\n130\n00:07:06.240 --> 00:07:09.420\nI shouldn't say temporary,\nsample databases.\n\n131\n00:07:09.420 --> 00:07:12.280\nYou again, only have to do a little\nbit of research on your own.\n\n132\n00:07:12.280 --> 00:07:16.010\nYou can go out and do this and\ntype in, like I have both.\n\n133\n00:07:16.010 --> 00:07:20.210\nAdventure Works 2012,\nas well as Adventure Works 2014.\n\n134\n00:07:20.210 --> 00:07:25.260\nChoose a stable edition when you do find\nit from the official Microsoft source.\n\n135\n00:07:25.260 --> 00:07:29.140\nAnd then make sure you follow their\nreadme guide to installing this.\n\n136\n00:07:29.140 --> 00:07:33.380\nIf not, you will run into frustrations\nif you do not follow that readme guide.\n\n137\n00:07:33.380 --> 00:07:34.600\nTrust me.\n\n138\n00:07:34.600 --> 00:07:37.030\nSo you'll just install that in there and\n\n139\n00:07:37.030 --> 00:07:39.750\nthen it will actually\nadd into your databases.\n\n140\n00:07:39.750 --> 00:07:43.730\nSo when SQL Server's installed and\nthe Management Studio's installed,\n\n141\n00:07:43.730 --> 00:07:47.830\nit really handles really two\nbasic types of databases.\n\n142\n00:07:47.830 --> 00:07:49.615\nOne's actually what they\ncall the system database.\n\n143\n00:07:49.615 --> 00:07:51.932\nIn other words,\nthis is what makes the SQL server run and\n\n144\n00:07:51.932 --> 00:07:54.013\ndo everything in the background\nthat it needs to.\n\n145\n00:07:54.013 --> 00:07:58.004\nAnd have all the elements in there that we\nneed to actually make sure that it does\n\n146\n00:07:58.004 --> 00:07:58.738\nwhat we need.\n\n147\n00:07:58.738 --> 00:08:02.044\nAnd then it will also have\nuser databases as well.\n\n148\n00:08:02.044 --> 00:08:05.754\nSo the way that we tell the difference in\nthem is over here on the left-hand side in\n\n149\n00:08:05.754 --> 00:08:07.190\nour Object Explorer.\n\n150\n00:08:07.190 --> 00:08:11.810\nAnd let me see if I can zoom in on this\nObject Explorer just a little bit more and\n\n151\n00:08:12.880 --> 00:08:13.720\nsee if I, there we go.\n\n152\n00:08:13.720 --> 00:08:16.550\nI was gonna say hopefully I can do that.\n\n153\n00:08:16.550 --> 00:08:20.270\nSo here on the left-hand side is what\nthey call the Object Explorer, and\n\n154\n00:08:20.270 --> 00:08:24.850\nthis is actually all the objects that you\ncan deal with in the SQL Server, okay?\n\n155\n00:08:24.850 --> 00:08:26.550\nSo normally by default,\n\n156\n00:08:26.550 --> 00:08:31.860\nwhen you install SQL Server, it'll also\ncome with what we call System Databases.\n\n157\n00:08:31.860 --> 00:08:36.318\nSystem Databases are really what's gonna\nhelp make things work in the background\n\n158\n00:08:36.318 --> 00:08:39.038\nand there are actually\nfour different ones here.\n\n159\n00:08:39.038 --> 00:08:41.240\nActually, there's five, one's hidden.\n\n160\n00:08:41.240 --> 00:08:43.580\nAnd that's why you don't\nactually see the fifth one here.\n\n161\n00:08:43.580 --> 00:08:45.970\nBut these are the actual four, and\n\n162\n00:08:45.970 --> 00:08:49.060\nthere's like I said there is a fifth\none and you do need to know them.\n\n163\n00:08:49.060 --> 00:08:51.910\nI don't know why,\nI'm probably just saying them out loud.\n\n164\n00:08:51.910 --> 00:08:55.340\nNo, you wanna make sure that\nyou at least know them, right.\n\n165\n00:08:55.340 --> 00:08:58.450\nSo make sure you realize\nthat these are here.\n\n166\n00:08:58.450 --> 00:09:00.130\nSo when you start taking a look here,\nokay,\n\n167\n00:09:00.130 --> 00:09:06.090\nnotice that there's one called the master\ndatabase and it's a system database.\n\n168\n00:09:06.090 --> 00:09:08.760\nThis is the main system\nconfiguration database.\n\n169\n00:09:08.760 --> 00:09:12.830\nSo this is what actually helps everything\nbe able to be configured the way that\n\n170\n00:09:12.830 --> 00:09:13.920\nwe need it to.\n\n171\n00:09:13.920 --> 00:09:17.539\nIt holds all the information about\nthe way SQL Server of course is gonna be\n\n172\n00:09:17.539 --> 00:09:19.240\nconfigured for us.\n\n173\n00:09:19.240 --> 00:09:22.200\nWe also have what's called model.\n\n174\n00:09:22.200 --> 00:09:27.300\nThis is the configuration for the agent\nfor the SQL Server agent as well,\n\n175\n00:09:27.300 --> 00:09:29.930\nand also for any other services\nthat are running in the background.\n\n176\n00:09:29.930 --> 00:09:32.440\nSo this holds our\nconfiguration information.\n\n177\n00:09:32.440 --> 00:09:35.050\nSo this again a database is structured and\nstored.\n\n178\n00:09:35.050 --> 00:09:36.240\nIf you want to take a look at them,\n\n179\n00:09:36.240 --> 00:09:38.720\nall you have to do is expand\nthem out at the plus sign.\n\n180\n00:09:38.720 --> 00:09:40.300\nAnd then you can take\na look at those tables.\n\n181\n00:09:40.300 --> 00:09:42.908\nRemember that the term table\nis the same as relation and\n\n182\n00:09:42.908 --> 00:09:45.232\nthen you can expand them out and\nthen you can see,\n\n183\n00:09:45.232 --> 00:09:48.703\nhere is actually some of the table\ninformation that you have available.\n\n184\n00:09:48.703 --> 00:09:53.077\nIn each one of these, DBO stands for\nDatabase Object, is what it stands for and\n\n185\n00:09:53.077 --> 00:09:54.830\nyou also see the name.\n\n186\n00:09:54.830 --> 00:09:59.650\nNow, traditionally according to\nthe way that we work inside of SQL,\n\n187\n00:09:59.650 --> 00:10:04.330\nwhen you do create tables,\nthey should not have spaces in them.\n\n188\n00:10:04.330 --> 00:10:09.280\nSo here you see where it says\ndbo.MSreplication_options,\n\n189\n00:10:09.280 --> 00:10:12.470\nif you do need to, or\nyou do wanna see a space in between them,\n\n190\n00:10:12.470 --> 00:10:16.540\nthe recommendation here is that\nyou do use an underscore instead.\n\n191\n00:10:16.540 --> 00:10:20.340\nYou do not want table names to have\nspaces in them, is what you don't want.\n\n192\n00:10:20.340 --> 00:10:25.396\nAnd so they followed that same structure\nfor us even in the system ones too.\n\n193\n00:10:25.396 --> 00:10:27.459\nAnd so here is-\n>> Is that just a convention or\n\n194\n00:10:27.459 --> 00:10:29.059\nis it something that will break?\n\n195\n00:10:29.059 --> 00:10:29.960\n>> No, it's a convention.\n\n196\n00:10:29.960 --> 00:10:31.800\nIt shouldn't break anything, but\n\n197\n00:10:31.800 --> 00:10:36.300\nthe idea is following the convention\nreally does help, cuz this way it's just\n\n198\n00:10:36.300 --> 00:10:39.550\none of the things that makes everything\nstandard more than anything else.\n\n199\n00:10:39.550 --> 00:10:41.385\nAnd same thing in the master database,\n\n200\n00:10:41.385 --> 00:10:44.506\nyou'll kinda see some of the same\ninformation here, well maybe.\n\n201\n00:10:44.506 --> 00:10:48.630\nActually in the model one, I can't even\nexpand that one out, it doesn't let me.\n\n202\n00:10:48.630 --> 00:10:50.380\nIt just sits there for us.\n\n203\n00:10:50.380 --> 00:10:52.260\nBut this actually holds\nthe information for\n\n204\n00:10:52.260 --> 00:10:57.410\nthe agent that we can also install to\nactually work with the SQL Server too.\n\n205\n00:10:57.410 --> 00:11:01.370\nAnd yeah, excuse me, MI2 is the other one.\n\n206\n00:11:01.370 --> 00:11:02.150\nI skipped over one.\n\n207\n00:11:02.150 --> 00:11:03.870\nIt's actually in the wrong order here for\nme.\n\n208\n00:11:03.870 --> 00:11:04.807\n>> Ronnie's like pay no attention\nto this database over here.\n\n209\n00:11:04.807 --> 00:11:07.546\n>> Yes, pay no attention,\nyeah, MSDB, excuse me,\n\n210\n00:11:07.546 --> 00:11:11.010\nis the actual configuration database for\nthe SQL Server agent.\n\n211\n00:11:11.010 --> 00:11:12.281\nThat's what I was trying to get to.\n\n212\n00:11:12.281 --> 00:11:14.200\nAnd I was like why isn't\nthat expanding out?\n\n213\n00:11:14.200 --> 00:11:16.150\nCuz there's actually tables in this one.\n\n214\n00:11:16.150 --> 00:11:19.240\nSo this is again the agent,\nthe information,\n\n215\n00:11:19.240 --> 00:11:22.840\nthat we can actually use to be\nable to connect to others too.\n\n216\n00:11:22.840 --> 00:11:26.850\nSo you have that and so normally we\ndo not mess around with these at all.\n\n217\n00:11:26.850 --> 00:11:29.290\nThe model of course is\nactually a template idea for\n\n218\n00:11:29.290 --> 00:11:33.620\nus that we can also end up using for new\ndatabases that we choose to create them.\n\n219\n00:11:33.620 --> 00:11:36.790\nIt essentially has a template for\na basic table and\n\n220\n00:11:36.790 --> 00:11:38.650\nhas a few other things that we can have.\n\n221\n00:11:38.650 --> 00:11:43.533\nNow this tempdb is tempting to absolutely\nget rid of, if you haven't done anything\n\n222\n00:11:43.533 --> 00:11:47.301\nwith them, and that's because\nit's like the model database,\n\n223\n00:11:47.301 --> 00:11:50.529\nwhich it doesn't actually\nallow you to see a lot in it.\n\n224\n00:11:50.529 --> 00:11:54.444\nBut as you start creating database\nobjects, and we'll talk about views and\n\n225\n00:11:54.444 --> 00:11:57.566\nsome different other things\nlater like stored procedures,\n\n226\n00:11:57.566 --> 00:12:00.197\nthis is where it tends to\nkeep that information, so\n\n227\n00:12:00.197 --> 00:12:03.102\nthat you can use that a little\nbit later on if you need to.\n\n228\n00:12:03.102 --> 00:12:08.146\nAnd it empties itself out if you ever\nrestart the SQL service itself, okay.\n\n229\n00:12:08.146 --> 00:12:11.682\nSo this is just, call it a scratch\narea for your database and\n\n230\n00:12:11.682 --> 00:12:13.280\nworking things out here.\n\n231\n00:12:13.280 --> 00:12:17.340\nSo when you make something and you go hey\nyou know I'm making it, I'm storing it in\n\n232\n00:12:17.340 --> 00:12:19.490\nRAM right now, but I think I'm going\nto be using it in about an hour or\n\n233\n00:12:19.490 --> 00:12:22.100\ntwo It really does keep\nit stored right here.\n\n234\n00:12:22.100 --> 00:12:26.710\nSo that later on, when you go and call it\nback up, you can also do that as well.\n\n235\n00:12:26.710 --> 00:12:29.400\nNow, there's another one, like I said,\nin the background that's actually hidden,\n\n236\n00:12:29.400 --> 00:12:31.250\nthat's called resource, okay?\n\n237\n00:12:31.250 --> 00:12:33.570\nSo this is a very hidden database.\n\n238\n00:12:33.570 --> 00:12:39.100\nAnd it's actually one that all the other\nsystem databases depend on, so they\n\n239\n00:12:39.100 --> 00:12:42.840\ndon't want you messing with it at all, so\nthey went ahead and hid it completely.\n\n240\n00:12:42.840 --> 00:12:44.740\nSo you do wannna make sure\nyou know those names.\n\n241\n00:12:44.740 --> 00:12:49.790\nRestore, master, model, MSDB, and tempDB.\n\n242\n00:12:49.790 --> 00:12:53.050\nThese are part of the system\ndatabases that are also installed\n\n243\n00:12:53.050 --> 00:12:56.640\nwhen you install SQL Server 2014.\n\n244\n00:12:56.640 --> 00:12:58.110\nNow, you and I though,\n\n245\n00:12:58.110 --> 00:13:02.910\nwe are not really gonna mess with those\nparticular databases at all, okay?\n\n246\n00:13:02.910 --> 00:13:05.870\nWhat we're actually gonna be dealing\nwith is what we call user databases.\n\n247\n00:13:05.870 --> 00:13:09.580\nSo we have system databases,\nwe have user databases.\n\n248\n00:13:09.580 --> 00:13:11.680\nAnd when you actually\nstart working with them,\n\n249\n00:13:11.680 --> 00:13:15.680\nyou can actually create your own database\nfrom scratch to be able to do so.\n\n250\n00:13:15.680 --> 00:13:20.200\nNow, I chose one that was actually already\nloaded up with some information for us.\n\n251\n00:13:20.200 --> 00:13:21.350\nAnd so I went ahead and\n\n252\n00:13:21.350 --> 00:13:24.540\nactually installed two of them is\nwhat we're gonna end up seeing.\n\n253\n00:13:24.540 --> 00:13:27.110\nSo for me,\nI'm gonna use it in this way, so\n\n254\n00:13:27.110 --> 00:13:29.870\nthat you understand what\nI'm actually doing, okay.\n\n255\n00:13:29.870 --> 00:13:33.800\nAnytime I'm running regular queries\nthat's not going to affect the database,\n\n256\n00:13:33.800 --> 00:13:36.660\nin other words, I just need to a query and\npull information from,\n\n257\n00:13:36.660 --> 00:13:39.290\nI'm gonna run it off of this\nAdventureWorks2014, okay.\n\n258\n00:13:41.110 --> 00:13:45.718\nBut if I'm gonna be adding tables and\ncreating different procedures,\n\n259\n00:13:45.718 --> 00:13:48.880\nI'm gonna use this 2012 database instead.\n\n260\n00:13:48.880 --> 00:13:51.670\nNow as far as the data goes,\nthey're essentially identical.\n\n261\n00:13:51.670 --> 00:13:55.830\nThere's a few elements that may not\nactually be in the 2012 that's in\n\n262\n00:13:55.830 --> 00:14:01.320\nthe 2014, but that way I don't continue to\nmodify the original database that I have.\n\n263\n00:14:01.320 --> 00:14:05.605\nThis will give me a kind of working sample\nthat if I'm going to be manipulating and\n\n264\n00:14:05.605 --> 00:14:10.142\nchanging up table and data information, so\nthat I don't know what's actually gonna\n\n265\n00:14:10.142 --> 00:14:14.386\nhappen, I'm going to use this 2012 one\nhere to be able to run that against.\n\n266\n00:14:14.386 --> 00:14:18.416\nAnd that way I know that if I make any\nchanges I'm fine, it's not gonna effect\n\n267\n00:14:18.416 --> 00:14:21.440\nall the other queries I have\nactually ready for us to go.\n\n268\n00:14:21.440 --> 00:14:23.910\nAnd you're probably saying, well Ronnie\naren't you just gonna create them?\n\n269\n00:14:23.910 --> 00:14:25.890\nWell, I'm gonna create some of them,\nright?\n\n270\n00:14:25.890 --> 00:14:28.870\nBut if you ever actually see\nme in a show and try and type,\n\n271\n00:14:28.870 --> 00:14:31.125\nit's not the best idea in the world for\nme to type.\n\n272\n00:14:31.125 --> 00:14:36.042\nSo I've actually created a handful, if\nnot actually 20 or 30 different types of\n\n273\n00:14:36.042 --> 00:14:40.198\nqueries we're gonna be going over,\nand they're already typed out for\n\n274\n00:14:40.198 --> 00:14:44.519\nu,s cuz they are fairly complex,\nI'm gonna say medium to complex here.\n\n275\n00:14:44.519 --> 00:14:47.458\nAnd it's something that we're actually\ngonna pull up and get ready to go.\n\n276\n00:14:47.458 --> 00:14:49.330\nAnd that way you don't\nhave to watch me type,\n\n277\n00:14:49.330 --> 00:14:51.610\nwhich is probably more\nstrenuous than anything else.\n\n278\n00:14:51.610 --> 00:14:54.540\n>> We are the typing challenged\naround ITProTV, it is true.\n\n279\n00:14:54.540 --> 00:14:57.090\n>> There is no doubt,\nthat is just one of those things.\n\n280\n00:14:57.090 --> 00:14:58.344\nBut that way you'll actually\nbe able to do that.\n\n281\n00:14:58.344 --> 00:15:01.511\nAnd we'll kinda talk through it,\nand we'll run it multiple times.\n\n282\n00:15:01.511 --> 00:15:04.339\nThat way you can actually see\nthe results we're looking for and\n\n283\n00:15:04.339 --> 00:15:05.950\nwe'll actually show this as well.\n\n284\n00:15:05.950 --> 00:15:09.415\nSo I'm gonna expand out this\nAdventureWorks database,\n\n285\n00:15:09.415 --> 00:15:10.864\none that I imported in.\n\n286\n00:15:10.864 --> 00:15:15.346\nAnd you'll also see that it\nactually has a lot of tables, okay.\n\n287\n00:15:15.346 --> 00:15:20.431\nSo and the nice thing is man, we have\na ton of data that we can work against,\n\n288\n00:15:20.431 --> 00:15:25.107\nand so this is not just the normal\nkind of table that we would normally\n\n289\n00:15:25.107 --> 00:15:29.920\nexpect to see about 5 or\n6 tables with 30 or 40 rows here.\n\n290\n00:15:29.920 --> 00:15:33.620\nThis, I think, actually has\nseveral hundred thousand rows for\n\n291\n00:15:33.620 --> 00:15:37.430\nus to actually work with, so\nyou'd be able to actually see that too.\n\n292\n00:15:37.430 --> 00:15:39.984\nNow in objects that we\nend up creating as well,\n\n293\n00:15:39.984 --> 00:15:44.043\nwhich also will help you out as you start\nto do this on your own too, is I do,\n\n294\n00:15:44.043 --> 00:15:48.495\nI recommend that you go out to Microsoft\nand that you download this database, and\n\n295\n00:15:48.495 --> 00:15:50.880\nbe able to actually use\nthis if you want to.\n\n296\n00:15:50.880 --> 00:15:55.791\nBut its some of the things you don't get\npointed out a lot, often here, which is\n\n297\n00:15:55.791 --> 00:16:00.647\nthis idea of what we call the Diagram or\nthe entity-relationship diagram.\n\n298\n00:16:00.647 --> 00:16:03.244\nIn other words how\nare the tables tied together?\n\n299\n00:16:03.244 --> 00:16:08.041\nSo just as a basic here, the good thing\nis, inside of this Management Studio,\n\n300\n00:16:08.041 --> 00:16:12.390\nthere's a lot of different options\nthat you do have available.\n\n301\n00:16:12.390 --> 00:16:15.880\nAnd we're actually gonna talk about this\nidea of diagrams in just a little bit of\n\n302\n00:16:15.880 --> 00:16:16.710\ntime here.\n\n303\n00:16:16.710 --> 00:16:17.854\nBut let me also go ahead and\n\n304\n00:16:17.854 --> 00:16:21.036\njust finish up on some of these other\nthings that we're gonna deal with.\n\n305\n00:16:21.036 --> 00:16:26.390\nAs you go on through some of the other\nseries in the SQL Server series, right?\n\n306\n00:16:26.390 --> 00:16:30.990\nYou'll learn about all these other\nobjects that are actually out here.\n\n307\n00:16:30.990 --> 00:16:35.200\nWe're specifically gonna be dealing\ninside of our databases for querying.\n\n308\n00:16:35.200 --> 00:16:38.576\nSo all these objects that you seen in\nterms of security, server objects,\n\n309\n00:16:38.576 --> 00:16:40.920\nreplication, we're not\ngonna deal with that.\n\n310\n00:16:40.920 --> 00:16:43.370\nYou can actually see those in\nthe later series that you have.\n\n311\n00:16:43.370 --> 00:16:46.230\nSo, make sure you do jump into those\nto learn a little bit more about\n\n312\n00:16:46.230 --> 00:16:47.569\ndatabase management, okay?\n\n313\n00:16:47.569 --> 00:16:51.323\nAnd so this does bring us then into some\nof the language that we'll actually have\n\n314\n00:16:51.323 --> 00:16:52.870\nto deal with as well.\n\n315\n00:16:52.870 --> 00:16:57.270\nNow, setting things up, when I talked\nabout the area in which we're actually\n\n316\n00:16:57.270 --> 00:17:01.660\ngonna end up creating queries, it's\ngonna be right here in this area, okay?\n\n317\n00:17:01.660 --> 00:17:05.528\nEvery time I want to create a new\nparticular query, it's simple.\n\n318\n00:17:05.528 --> 00:17:09.450\nI simply select new query, and\nthat just brings up another tab.\n\n319\n00:17:09.450 --> 00:17:12.530\nSo I can actually have\nmultiple queries right here.\n\n320\n00:17:12.530 --> 00:17:15.335\nAnd I've got one set up that we're\nactually gonna be using in just a little\n\n321\n00:17:15.335 --> 00:17:16.021\nbit of time here.\n\n322\n00:17:16.021 --> 00:17:19.063\nBut you can actually see this right here,\nokay?\n\n323\n00:17:19.063 --> 00:17:22.428\nSo this Management Studio,\nand this window,\n\n324\n00:17:22.428 --> 00:17:26.238\nthis is the place where we\nend up typing our queries.\n\n325\n00:17:26.238 --> 00:17:28.026\nAnd we'll actually be able to see that.\n\n326\n00:17:28.026 --> 00:17:31.582\nAnd it actually does have some very\nimportant features for us, too.\n\n327\n00:17:31.582 --> 00:17:35.104\nSo not only do we actually need to\nknow the name of our database but\n\n328\n00:17:35.104 --> 00:17:38.511\nwe also need to be able to query\nagainst that database as well.\n\n329\n00:17:38.511 --> 00:17:42.281\nAnd the way you tell that is by the status\nbar down here at the bottom where it says\n\n330\n00:17:42.281 --> 00:17:43.494\nConnected (1/1).\n\n331\n00:17:43.494 --> 00:17:47.630\nIt tells you you're connected to the SQL\nserver, tells you what the SQL server is,\n\n332\n00:17:47.630 --> 00:17:50.060\nas well as who's connected.\n\n333\n00:17:50.060 --> 00:17:53.070\nBut this is the key area is right here.\n\n334\n00:17:53.070 --> 00:17:54.640\nAnd let me see if I can zoom in.\n\n335\n00:17:54.640 --> 00:17:59.349\nRight there is where it tells you the name\nof the database that we're actually\n\n336\n00:17:59.349 --> 00:18:03.781\nquerying, which is that AdventureWorks\ndatabase right there, okay?\n\n337\n00:18:03.781 --> 00:18:07.240\nSo, in that one,\nnothing's actually being queried against.\n\n338\n00:18:07.240 --> 00:18:11.550\nSo, that's one of the very first commands\nwe'll actually end up running right here.\n\n339\n00:18:11.550 --> 00:18:14.703\nSo if you wanna change that, let's say\nthat I have multiple user databases over\n\n340\n00:18:14.703 --> 00:18:16.362\nhere on the left-hand side, which I do.\n\n341\n00:18:16.362 --> 00:18:19.634\nAnd I wanna change this over\nto the AdventureWorks2012.\n\n342\n00:18:19.634 --> 00:18:25.170\nI simply type in the word USE, which is\na keyword for us, or I key it in, okay?\n\n343\n00:18:25.170 --> 00:18:28.820\nAnd then, Adventure, and\nnotice it gives me a dropdown.\n\n344\n00:18:28.820 --> 00:18:30.340\nAnd I can choose whichever one I want to.\n\n345\n00:18:30.340 --> 00:18:32.810\nI'm using the arrow keys to do that.\n\n346\n00:18:32.810 --> 00:18:35.540\nAnd from that point here,\nI just hit my Tab key.\n\n347\n00:18:35.540 --> 00:18:39.490\nAnd then some of the syntax, which we're\ngonna learn about in our other show here\n\n348\n00:18:39.490 --> 00:18:45.020\non basic querying here,\nis that I'm gonna end it with a semicolon.\n\n349\n00:18:45.020 --> 00:18:48.380\nAnd then I'm gonna also type in\nanother keyword here called GO.\n\n350\n00:18:48.380 --> 00:18:50.410\nAnd then I select Execute.\n\n351\n00:18:50.410 --> 00:18:53.941\nAnd notice I get a verification that\nsays the command has been successfully\n\n352\n00:18:53.941 --> 00:18:54.565\ncompleted.\n\n353\n00:18:54.565 --> 00:18:57.537\nAnd of course, I did something\nweird there, which is move the C.\n\n354\n00:18:57.537 --> 00:19:00.240\n>> [LAUGH]\n>> I don't know why I did that.\n\n355\n00:19:00.240 --> 00:19:00.944\nThere we go.\n\n356\n00:19:00.944 --> 00:19:03.060\nCommand has been successfully completed.\n\n357\n00:19:03.060 --> 00:19:06.361\nBut then if I go back in\nthe lower right-hand corner again,\n\n358\n00:19:06.361 --> 00:19:11.470\nyou can see right here where its actually\nchanged it to, well, AdventureWorks2012.\n\n359\n00:19:11.470 --> 00:19:15.610\nSo, that's one of the key elements for\nus as we get started, is to verify\n\n360\n00:19:15.610 --> 00:19:19.400\nthat we're actually using the correct\ndatabase to be able to run queries.\n\n361\n00:19:19.400 --> 00:19:23.680\nAnd as we are actually connected then,\nnotice that I have this other one here.\n\n362\n00:19:23.680 --> 00:19:26.458\nAnd this one's a little more complex, and\nwe're gonna talk about this, like I said,\n\n363\n00:19:26.458 --> 00:19:27.400\nin another show.\n\n364\n00:19:27.400 --> 00:19:31.220\nJust to be able to run that,\nif I execute it, it runs perfectly fine.\n\n365\n00:19:31.220 --> 00:19:35.010\nI can tell over here in the lower\nright-hand corner, I got 46 rows.\n\n366\n00:19:35.010 --> 00:19:40.180\nAnd I actually went ahead and ran that\nagainst the AdventureWorks2014 database.\n\n367\n00:19:40.180 --> 00:19:43.690\nSo, you always wanna make sure that\nyou can verify at least those things.\n\n368\n00:19:43.690 --> 00:19:46.587\nNow by default, this window though, okay?\n\n369\n00:19:46.587 --> 00:19:49.312\nIt doesn't actually have this size,\nso I changed it so\n\n370\n00:19:49.312 --> 00:19:51.840\nwe can see it a lot better on the show.\n\n371\n00:19:51.840 --> 00:19:56.000\nBut if I go up to Tools > Options,\n\n372\n00:19:56.000 --> 00:19:59.140\nit's right here that you\nthen find Fonts and Colors.\n\n373\n00:19:59.140 --> 00:20:01.645\nAnd this is where you can\nchange the size of that.\n\n374\n00:20:01.645 --> 00:20:04.940\nIf not, it's gonna be like,\nI think, eight point or ten point-\n\n375\n00:20:04.940 --> 00:20:05.630\n>> [LAUGH] Man.\n\n376\n00:20:05.630 --> 00:20:06.686\n>> Is what it defaults to.\n>> Microscopic.\n\n377\n00:20:06.686 --> 00:20:08.650\n>> Yeah, it's microscopic.\n\n378\n00:20:08.650 --> 00:20:09.530\n>> So I like changing it.\n\n379\n00:20:09.530 --> 00:20:11.980\nAnd that way,\\ we can actually\nsee it a little bit better.\n\n380\n00:20:11.980 --> 00:20:15.130\nBut overall though,\ngetting used to at least the elements\n\n381\n00:20:15.130 --> 00:20:17.710\nI just showed you is\nreally gonna help us out\n\n382\n00:20:17.710 --> 00:20:22.200\nas we actually start taking a look at at\nleast at beginning the idea of querying.\n\n383\n00:20:22.200 --> 00:20:26.180\nBut that's a basic introduction,\nof course, then to our SQL Server.\n\n384\n00:20:26.180 --> 00:20:29.530\nAnd, we'll then start to have a little\nbit of fun when we start actually using\n\n385\n00:20:29.530 --> 00:20:31.090\nthe query language itself and\n\n386\n00:20:31.090 --> 00:20:33.900\nbuilding actual SELECT statements\nto run against our database.\n\n387\n00:20:33.900 --> 00:20:34.870\n>> Awesome stuff, Ronnie.\n\n388\n00:20:34.870 --> 00:20:37.200\nThanks for so much for\ncoming back for the part two.\n\n389\n00:20:37.200 --> 00:20:39.870\nGiving us the more well rounded tour,\nright?\n\n390\n00:20:39.870 --> 00:20:41.713\nNot just the nickel tour.\nWe got the $0.25 tour on this one.\n\n391\n00:20:41.713 --> 00:20:44.616\n>> [LAUGH]\n>> Now we're a little more familiar with\n\n392\n00:20:44.616 --> 00:20:48.880\nthe Management Studio and how we're going\nto work with the databases themselves.\n\n393\n00:20:48.880 --> 00:20:51.430\nAnd maybe a little more\nunderstanding when it comes to\n\n394\n00:20:51.430 --> 00:20:53.220\nhow these things\nare actually going to work.\n\n395\n00:20:53.220 --> 00:20:54.670\nWhat's going on in the backgrounds.\n\n396\n00:20:54.670 --> 00:20:55.480\nWe appreciate that, Ronnie.\n\n397\n00:20:55.480 --> 00:20:56.620\nThank you so much.\n\n398\n00:20:56.620 --> 00:20:58.110\nThank you guys for watching.\n\n399\n00:20:58.110 --> 00:20:58.900\nWe're gonna go ahead and sign off.\n\n400\n00:20:58.900 --> 00:21:00.966\nFor ITProTv,\nI've been your host Daniel Lowrie.\n\n401\n00:21:00.966 --> 00:21:01.802\n>> And I'm Ronnie Wong.\n\n402\n00:21:01.802 --> 00:21:03.729\n>> And we'll see you next time.\n\n403\n00:21:03.729 --> 00:21:11.270\n[SOUND]\n\n",
          "vimeoId": "164051120"
        },
        {
          "description": "In this episode, Daniel and Ronnie look into the basics of SQL querying. They start by defining what SQL is and how it differs from Transact SQL. They also explain the 3 categories of T-SQL statements which are Data Manipulation Language (DML), Data Definition Language(DDL), and Data Control Language(DCL). Finally, they explain the Key-In Order vs. the Processing Order.",
          "length": "2092",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-2-sql_querying_basics-041816-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-2-sql_querying_basics-041816-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-0-2-sql_querying_basics-041816-1-sm.jpg",
          "title": "SQL Querying Basics",
          "transcript": "WEBVTT\n\n1\n00:00:00.030 --> 00:00:10.030\n[MUSIC]\n\n2\n00:00:11.789 --> 00:00:16.610\nAll right, greetings everyone, and welcome\nto another fantastic episode of ITPro TV.\n\n3\n00:00:16.610 --> 00:00:20.628\nI'm your host, Daniel Lowry, and in\ntoday's episode we are continuing on with\n\n4\n00:00:20.628 --> 00:00:22.970\nour querying Microsoft SQL Server 2014.\n\n5\n00:00:22.970 --> 00:00:25.860\nAnd joining us back in the studio again\ntoday to help us out with that is our good\n\n6\n00:00:25.860 --> 00:00:27.610\nfriend, Mr. Ronnie Wong.\n\n7\n00:00:27.610 --> 00:00:28.740\nRonnie, welcome back to the show, sir.\n\n8\n00:00:28.740 --> 00:00:29.580\nHow's it going?\n\n9\n00:00:29.580 --> 00:00:33.400\n>> It is going well as we continue\non taking a look at the idea here of\n\n10\n00:00:33.400 --> 00:00:34.890\nquerying the SQL Server 2014.\n\n11\n00:00:34.890 --> 00:00:37.680\nAnd we really need to get into at\n\n12\n00:00:37.680 --> 00:00:40.780\nleast the basics of understanding\nthe query language.\n\n13\n00:00:40.780 --> 00:00:44.440\nNow we already talked a little bit about\nit, so we're going to actually review that\n\n14\n00:00:44.440 --> 00:00:47.160\njust a little, but then we're actually\ngoing to get into the fundamentals\n\n15\n00:00:47.160 --> 00:00:50.890\nof querying, and understanding\nthe structure of the query itself.\n\n16\n00:00:50.890 --> 00:00:53.600\nAnd then we'll even run a couple of\nqueries making sure that we understand how\n\n17\n00:00:53.600 --> 00:00:55.550\nthat works too.\n\n18\n00:00:55.550 --> 00:00:59.780\nSo let's go ahead and\nstart right here on my screen again, and\n\n19\n00:00:59.780 --> 00:01:02.510\nthat way we lay down\nthe foundation down once more.\n\n20\n00:01:02.510 --> 00:01:06.904\nWhen we start talking about the SQL\nlanguage, itself, and the query language,\n\n21\n00:01:06.904 --> 00:01:10.588\nthis is the language of the databases,\nessentially our database,\n\n22\n00:01:10.588 --> 00:01:15.326\nwhich is gonna be our SQL server 2014, and\nit starts off with what we call SQL here.\n\n23\n00:01:15.326 --> 00:01:18.882\nSo remember that people will\nactually continue to call it SEQUEL,\n\n24\n00:01:18.882 --> 00:01:23.391\neven though technically according to\nthe standard it is considered S-Q-L, now.\n\n25\n00:01:23.391 --> 00:01:26.893\nSo just remembers that stands for\nSequel Query Language,\n\n26\n00:01:26.893 --> 00:01:29.950\nand it is an ISO and an ANSI standard too.\n\n27\n00:01:29.950 --> 00:01:34.798\nAnd just about every single dialect of\nthat, in other words a sub-langauge,\n\n28\n00:01:34.798 --> 00:01:39.573\na sub-tract of SQL, is going to have\nit's foundations in SQL in about 80,\n\n29\n00:01:39.573 --> 00:01:44.422\nI'm going to say 80 plus % of most of\nthose languages are going to be directly\n\n30\n00:01:44.422 --> 00:01:45.691\nfrom the standard.\n\n31\n00:01:45.691 --> 00:01:49.070\nBut you will also see, of course,\nthen personalizations.\n\n32\n00:01:49.070 --> 00:01:54.631\nFor example, in Microsoft SQL's 2014,\nthey use what we call Transact SQL.\n\n33\n00:01:54.631 --> 00:01:59.428\nAnd transact SQL is a language that we're\nreally going to be focusing in on, And\n\n34\n00:01:59.428 --> 00:02:03.240\nthis is where you will have some\ndifferences to that language.\n\n35\n00:02:03.240 --> 00:02:06.300\nSo you may see that there's gonna be some\ncommands that are only gonna be specific\n\n36\n00:02:06.300 --> 00:02:08.430\nto SQL Server 2014.\n\n37\n00:02:08.430 --> 00:02:11.420\nSo much so that if you were to try and\ncopy that and\n\n38\n00:02:11.420 --> 00:02:17.480\nthen go over to something like a Sybex,\nor an Oracle server, it's not gonna run.\n\n39\n00:02:17.480 --> 00:02:19.910\nIt's gonna go, no way,\nI don't want to do that.\n\n40\n00:02:19.910 --> 00:02:23.460\nBut most of the time, most of the queries\nthat you and I are going to be running,\n\n41\n00:02:23.460 --> 00:02:27.340\nwe're gonna try and keep them as close\nto the SQL standard as possible, and\n\n42\n00:02:27.340 --> 00:02:29.230\neven though we're actually using T-SQL, or\n\n43\n00:02:29.230 --> 00:02:32.650\nTransact SQL,\nit should run perfectly fine.\n\n44\n00:02:32.650 --> 00:02:33.883\nRemember, also,\n\n45\n00:02:33.883 --> 00:02:38.982\naccording to the best practices here that\nwhat we have is this ability though.\n\n46\n00:02:38.982 --> 00:02:42.582\nIs that when we have two things that\nmay actually mean the same thing, and\n\n47\n00:02:42.582 --> 00:02:47.610\none is part of that kind of proprietary\nT-SQL, notice, specific to that dialect.\n\n48\n00:02:47.610 --> 00:02:50.760\nAnd we have another command\nthat absolutely runs and\n\n49\n00:02:50.760 --> 00:02:52.360\nis also part of the standard.\n\n50\n00:02:52.360 --> 00:02:57.230\nThe idea and the best practice is to try\nand run it according to the standard.\n\n51\n00:02:57.230 --> 00:03:00.660\nIf you're trying to choose and go I\ndon't know which one I should use here.\n\n52\n00:03:00.660 --> 00:03:03.370\nBest default is to actually\ngo with the standard.\n\n53\n00:03:03.370 --> 00:03:06.630\nOnly if there's a special reason,\nif there's something,\n\n54\n00:03:06.630 --> 00:03:10.950\nsome command that you run that doesn't\nhave an equivalent inside this standard,\n\n55\n00:03:10.950 --> 00:03:14.570\ndo you really want to actually stick\nwith that kind of non-standardized\n\n56\n00:03:14.570 --> 00:03:18.990\nlanguage instead, and stick with\nthat SQL terminology instead here.\n\n57\n00:03:18.990 --> 00:03:22.230\nSo that's usually the time that you're\nactually talking about using that.\n\n58\n00:03:22.230 --> 00:03:26.520\nSo those were kinda the basics that we\nhad gone over in a previous episode here.\n\n59\n00:03:26.520 --> 00:03:28.358\nSo just kinda remember that, too.\n\n60\n00:03:28.358 --> 00:03:32.650\nAnd historically, when it comes down\nto it, it was originally called SEQUEL\n\n61\n00:03:32.650 --> 00:03:36.760\nlike we said, it stands for\nthe Structured English Querying Language.\n\n62\n00:03:36.760 --> 00:03:39.420\nBut because of a trademark\ndispute with some airline\n\n63\n00:03:39.420 --> 00:03:42.960\nthey actually did end up where\nthey changed it to just SQL.\n\n64\n00:03:42.960 --> 00:03:46.050\nJust a little bit of a reminder of a\ncouple of different things going on there.\n\n65\n00:03:46.050 --> 00:03:47.630\n>> Lawsuits ruin everything, Ronnie.\n\n66\n00:03:47.630 --> 00:03:51.460\n>> It can, they really can end up changing\nthings that really doesn't seem to make\n\n67\n00:03:51.460 --> 00:03:56.570\nsense but apparently that would have\nabsolutely injured the airline if somebody\n\n68\n00:03:56.570 --> 00:04:00.350\nwould have absolutely said SEQUEL, and\nthought of this instead of the airline.\n\n69\n00:04:00.350 --> 00:04:04.360\nSo who knows what would happen there,\nbut that's just the way it does.\n\n70\n00:04:04.360 --> 00:04:07.450\nSo just kind of remember that those\nare kind of some of the basics and\n\n71\n00:04:07.450 --> 00:04:08.560\nthe background.\n\n72\n00:04:08.560 --> 00:04:13.218\nNow, the unusual thing about T-SQL,\nTransact SQL,\n\n73\n00:04:13.218 --> 00:04:19.294\nis that even within Transact SQL,\nit breaks down into three separate,\n\n74\n00:04:19.294 --> 00:04:22.857\nreally distinct sub-languages, too.\n\n75\n00:04:22.857 --> 00:04:24.410\nCan you imagine that, right?\n\n76\n00:04:24.410 --> 00:04:28.645\nSQL breaks off into lord knows how many\ndifferent dialects that there are, and\n\n77\n00:04:28.645 --> 00:04:32.638\nthen within this, there's actually\neven sub-dialects that you have.\n\n78\n00:04:32.638 --> 00:04:36.250\nAnd so here's something that we\nactually need to understand as well.\n\n79\n00:04:36.250 --> 00:04:40.225\nSo when we take a look at T-SQL then,\nthere's essentially three\n\n80\n00:04:40.225 --> 00:04:46.260\nsub-languages that you also need to\nknow about, at least briefly here.\n\n81\n00:04:46.260 --> 00:04:51.849\nSo when we take a look at T-SQL\nwe have what's called DML,\n\n82\n00:04:51.849 --> 00:04:56.424\nand you have DDL, and\nthen you have DCL as well.\n\n83\n00:04:56.424 --> 00:05:02.540\nSo just like it sounds like here, DML\nstands for the Data Manipulation Language.\n\n84\n00:05:02.540 --> 00:05:07.280\nAnd this is where we're gonna be spending\nmost of our time in our particular\n\n85\n00:05:07.280 --> 00:05:11.170\nseries here, and it's gonna be in\nthis Data Manipulation Language.\n\n86\n00:05:11.170 --> 00:05:15.190\nAnd this particular focus is,\nof course, then on asking questions and\n\n87\n00:05:15.190 --> 00:05:17.130\ngetting the answers that we need.\n\n88\n00:05:17.130 --> 00:05:20.360\nAnd the idea of actually modifying,\nin other words displaying,\n\n89\n00:05:20.360 --> 00:05:23.050\nit's showing what we actually\nhave to display here.\n\n90\n00:05:23.050 --> 00:05:26.700\nSo normally in this there's gonna be\nkeywords that are normally associated with\n\n91\n00:05:26.700 --> 00:05:29.010\nthis language such as SELECT,\n\n92\n00:05:29.010 --> 00:05:32.750\nwhich allows us to be able to say\nhere's the data we want to choose.\n\n93\n00:05:32.750 --> 00:05:37.715\nINSERT usually means we're actually gonna\nbe inserting in a column of information.\n\n94\n00:05:37.715 --> 00:05:40.290\nUPDATE means of course,\nwe're actually gonna be updating that, and\n\n95\n00:05:40.290 --> 00:05:42.940\nthen even deleting that\ninformation as well.\n\n96\n00:05:42.940 --> 00:05:45.920\nSo normally, all that is done\ninside of what we call DML.\n\n97\n00:05:45.920 --> 00:05:50.320\nAnd we'll actually see some of\nthe examples of just about all these,\n\n98\n00:05:50.320 --> 00:05:53.820\nI believe, during our entire\nseries as we go on through that.\n\n99\n00:05:53.820 --> 00:05:57.670\nSo we'll see the majority of\nwhat we'll be spending here.\n\n100\n00:05:57.670 --> 00:06:02.337\nThen, as you want to create databases\non your own, well then, yes,\n\n101\n00:06:02.337 --> 00:06:07.813\nyou move into what we call DDL, which is\nthe Data Definition Language, itself.\n\n102\n00:06:07.813 --> 00:06:11.460\nThis is what helps us to\ndefine these database objects.\n\n103\n00:06:11.460 --> 00:06:13.325\nSo when you're creating different objects,\n\n104\n00:06:13.325 --> 00:06:15.760\nwell let me see if I can\nscroll on over here.\n\n105\n00:06:15.760 --> 00:06:18.340\nRemember that here it is on my SQL server,\n\n106\n00:06:18.340 --> 00:06:21.753\nover here on the left hand\nside in the Object Explorer.\n\n107\n00:06:21.753 --> 00:06:26.070\nWell that means all these different ones\nthat we have here with the plus signs, and\n\n108\n00:06:26.070 --> 00:06:30.290\nof course, even the minus signs,\nthese are considered our database objects.\n\n109\n00:06:30.290 --> 00:06:32.718\nSo, if we're creating views,\nif we're creating tables,\n\n110\n00:06:32.718 --> 00:06:34.900\nif we're creating databases themselves.\n\n111\n00:06:34.900 --> 00:06:37.950\nThese are considered objects and\nwhen we do something like\n\n112\n00:06:37.950 --> 00:06:41.540\nthat using the actual querying language,\nwell this is where we do it.\n\n113\n00:06:41.540 --> 00:06:44.390\nWe are defining those\ndatabase objects here, and\n\n114\n00:06:44.390 --> 00:06:47.550\nthis is where we can create\nwhatever we want to.\n\n115\n00:06:47.550 --> 00:06:51.040\nWe can change it up and\nwe can even drop that particular one so\n\n116\n00:06:51.040 --> 00:06:53.320\nit's not actually used anymore as well.\n\n117\n00:06:53.320 --> 00:06:54.520\nWhen that drops out,\n\n118\n00:06:54.520 --> 00:06:57.820\nit normally does actually take it\naway to where you cannot use it.\n\n119\n00:06:57.820 --> 00:07:01.000\nSo there is\nthe Database Definition Language.\n\n120\n00:07:01.000 --> 00:07:05.780\nNow, normally, when you start taking a\nlook and the combination of both of those,\n\n121\n00:07:05.780 --> 00:07:11.360\nthere's a lot of power behind what you\ncan end up doing to your database.\n\n122\n00:07:11.360 --> 00:07:14.220\nAnd so, you do need to be careful,\nyou wanna make sure\n\n123\n00:07:14.220 --> 00:07:18.790\nyou're not just running these particular\ntypes of queries in just haphazardly.\n\n124\n00:07:18.790 --> 00:07:22.550\nEspecially when you start talking about\ndropping tables, or inserting and\n\n125\n00:07:22.550 --> 00:07:23.920\ndeleting data.\n\n126\n00:07:23.920 --> 00:07:29.170\nThis can really mess up a database to\nthe point where it becomes unusable.\n\n127\n00:07:29.170 --> 00:07:32.090\nSo also, of course, then that means\nhopefully you're running your great\n\n128\n00:07:32.090 --> 00:07:34.010\nbackups on everything that you're doing.\n\n129\n00:07:34.010 --> 00:07:37.670\nBut at the same time,\ndon't just run these just because you go,\n\n130\n00:07:37.670 --> 00:07:40.120\nI want a chance to run this and\nsee what it's like.\n\n131\n00:07:40.120 --> 00:07:43.340\nIf you do, download a sample database and\nrun it against that.\n\n132\n00:07:43.340 --> 00:07:45.900\nDon't do it against your\nactually true production data.\n\n133\n00:07:45.900 --> 00:07:48.440\nLosing data like that becomes just about\n\n134\n00:07:48.440 --> 00:07:51.810\nincalculable about how much value\nthat data was actually worth.\n\n135\n00:07:51.810 --> 00:07:53.230\n>> Real quick question on this Ronnie.\n\n136\n00:07:53.230 --> 00:07:57.140\nI understand the differences\nthat you're setting before us.\n\n137\n00:07:57.140 --> 00:08:00.261\nWith the data manipulation language\nyou're manipulating the data.\n\n138\n00:08:00.261 --> 00:08:03.291\nYou can select it,\nI need to insert something into it.\n\n139\n00:08:03.291 --> 00:08:08.708\nUpdate and delete, but I jump over to the\nDDL and I see some similarities there and\n\n140\n00:08:08.708 --> 00:08:13.980\nit seems to me there's probably\nan inherent danger for us to get confused.\n\n141\n00:08:13.980 --> 00:08:17.538\nUpdate seems a lot like alter,\nand delete seems a lot like drop.\n\n142\n00:08:17.538 --> 00:08:20.010\nIs that something we're gonna\nhave to look out for, or\n\n143\n00:08:20.010 --> 00:08:23.251\nare we gonna address that in upcoming\nissues or are we gonna do that now?\n\n144\n00:08:23.251 --> 00:08:26.015\n>> Yeah, we're gonna actually gonna\naddress that in upcoming issues here when\n\n145\n00:08:26.015 --> 00:08:28.310\nwe talk about the differences\nbetween this, right?\n\n146\n00:08:28.310 --> 00:08:32.696\nSo this is really actually altering and\ndropping the entire tables themselves,\n\n147\n00:08:32.696 --> 00:08:37.357\nwhereas updating and deleting normally is\nreferring to columns of data that we have.\n\n148\n00:08:37.357 --> 00:08:40.237\nAnd so normally when you're updating,\nyou're adding in a new column.\n\n149\n00:08:40.237 --> 00:08:43.430\nAnd when you're deleting,\nyou're actually removing a column.\n\n150\n00:08:43.430 --> 00:08:46.760\nAnd the problem is, there's\nactually data now attached to that.\n\n151\n00:08:46.760 --> 00:08:51.246\nSo you're actually being able to do stuff\nlike that by adding in stuff to do that.\n\n152\n00:08:51.246 --> 00:08:55.860\nWhereas in altering here, you're literally\naltering the structure of that table or\n\n153\n00:08:55.860 --> 00:08:58.687\nyou're actually getting\nrid of that table as well.\n\n154\n00:08:58.687 --> 00:09:01.758\nSo you do have to be careful with these\ndifferent objects here when you start\n\n155\n00:09:01.758 --> 00:09:05.500\nto take a look, and the same thing with\nviews and some of the different ones here.\n\n156\n00:09:05.500 --> 00:09:08.530\nBut this is where it comes\ndown to understanding when you\n\n157\n00:09:08.530 --> 00:09:11.640\nstart talking about this type of\nlanguage and what we're dealing with.\n\n158\n00:09:11.640 --> 00:09:15.115\nAnd we'll get into it when we get into the\nselect clauses here in just a moment and\n\n159\n00:09:15.115 --> 00:09:16.660\ntrying to deal with it a little bit more.\n\n160\n00:09:16.660 --> 00:09:19.700\nThere's one more,\nwhich is what we call DCL, okay?\n\n161\n00:09:19.700 --> 00:09:23.416\nSo this is used to manage\nsecurity permissions.\n\n162\n00:09:23.416 --> 00:09:26.260\nEssentially you're gonna be granting,\nrevoking, and denying.\n\n163\n00:09:26.260 --> 00:09:29.990\nNow in this, it's usually like, wow,\nthere's only three different things, but\n\n164\n00:09:29.990 --> 00:09:34.250\ntrust me, it's actually much more\ndifficult than you believe here, okay?\n\n165\n00:09:34.250 --> 00:09:39.090\nSomeone like me being able to query and\nbeing able to create reports,\n\n166\n00:09:39.090 --> 00:09:41.850\nokay, off of the database that I have.\n\n167\n00:09:41.850 --> 00:09:46.143\nSo, for example, if you're actually\nsomeone that's actually depended upon to\n\n168\n00:09:46.143 --> 00:09:50.244\nrun reports, to say hey, I need to find\nout how many people are actually in this\n\n169\n00:09:50.244 --> 00:09:52.180\ndepartment versus this one.\n\n170\n00:09:52.180 --> 00:09:57.340\nHow much revenue did this company bring\nversus this company or department?\n\n171\n00:09:57.340 --> 00:10:00.795\nWell, then you're probably\nreally using this DML language,\n\n172\n00:10:00.795 --> 00:10:02.626\npretty much all the time, okay?\n\n173\n00:10:02.626 --> 00:10:06.765\nIf you're actually a database designer and\na creator, okay,\n\n174\n00:10:06.765 --> 00:10:12.309\nyou're probably gonna be sticking in with\nthis DDL language here, and then you'll\n\n175\n00:10:12.309 --> 00:10:17.719\nbe using the manipulations language to\nhelp to populate that data as well, okay?\n\n176\n00:10:17.719 --> 00:10:20.964\nBut here in the DCL,\nthis is about literally controlling\n\n177\n00:10:20.964 --> 00:10:25.302\naccess to the entirety of your databases\nand everything that you have here.\n\n178\n00:10:25.302 --> 00:10:30.054\nThis is more where you actually do have\nthat database administrator, right,\n\n179\n00:10:30.054 --> 00:10:35.094\nthat comes in and they actually manage the\nentirety of how you access the database,\n\n180\n00:10:35.094 --> 00:10:38.400\nand who gets access,\nwho doesn't get access.\n\n181\n00:10:38.400 --> 00:10:40.280\nWhat in the world needs to happen here?\n\n182\n00:10:40.280 --> 00:10:44.380\nThey're the ones also going to be\noptimizing the databases, you name it.\n\n183\n00:10:44.380 --> 00:10:48.295\nThere's a ton that's actually behind\nhere when you start doing this.\n\n184\n00:10:48.295 --> 00:10:52.313\nSo each of these language by\nthemselves is important, but\n\n185\n00:10:52.313 --> 00:10:57.653\nalso the combination of all three is\nactually incredibly important as well.\n\n186\n00:10:57.653 --> 00:11:01.324\nWhere we're gonna be spending\nthe majority of our time, like I said,\n\n187\n00:11:01.324 --> 00:11:03.066\nis gonna really be this DML here,\n\n188\n00:11:03.066 --> 00:11:06.755\nunderstanding how we get the results\nthat we need out of our database.\n\n189\n00:11:06.755 --> 00:11:09.578\nAnd be able to actually create\nthe reports that we need,\n\n190\n00:11:09.578 --> 00:11:13.542\nbe able to actually run the things that we\nneed so that we can see information and\n\n191\n00:11:13.542 --> 00:11:18.430\nhelp us to make good business decisions\noverall, is really where the key comes in.\n\n192\n00:11:18.430 --> 00:11:24.300\nSo when we start to take a look then\nat being able to do stuff like this,\n\n193\n00:11:24.300 --> 00:11:27.800\nwell, it comes down then to\nwhere do we actually start\n\n194\n00:11:27.800 --> 00:11:29.860\nto write these particular statements, and\n\n195\n00:11:29.860 --> 00:11:33.400\nthen what do we actually have to write\nin these statements as well, okay?\n\n196\n00:11:33.400 --> 00:11:37.860\nSo there's a couple of ways\nto think about this idea.\n\n197\n00:11:37.860 --> 00:11:42.500\nSo let's say that what ends up happening\nhere is that Daniel invites me\n\n198\n00:11:42.500 --> 00:11:46.450\nover to his home and\nhe offers me something to drink.\n\n199\n00:11:46.450 --> 00:11:49.111\nAnd he happens to be in the living\nroom and I'm near the kitchen, and\n\n200\n00:11:49.111 --> 00:11:50.388\nI'm right there.\n\n201\n00:11:50.388 --> 00:11:54.762\nAnd he just says, Ronnie,\ngrab a soda out of the refrigerator, okay?\n\n202\n00:11:54.762 --> 00:11:59.950\nWell, that is essentially Daniel\nissuing a query, if he wants to.\n\n203\n00:11:59.950 --> 00:12:01.810\nHe's trying to actually\nget me to do something,\n\n204\n00:12:01.810 --> 00:12:04.590\nto return the information,\nthen I can get a soda for myself.\n\n205\n00:12:04.590 --> 00:12:09.620\nAnd maybe even bring him another\nsoft drink or whatever it might be.\n\n206\n00:12:09.620 --> 00:12:13.120\nSo in that sense, there's a couple of\nthings that need to happen, right,\n\n207\n00:12:13.120 --> 00:12:15.020\nwhen we do something like that.\n\n208\n00:12:15.020 --> 00:12:17.590\nFirst of all,\nDaniel's actually saying it's okay for\n\n209\n00:12:17.590 --> 00:12:21.230\nme because I'm right there in the kitchen\nand I should be able to identify where\n\n210\n00:12:21.230 --> 00:12:25.870\nthe actual soda resides inside\nof the refrigerator, okay?\n\n211\n00:12:25.870 --> 00:12:27.930\nSo in that sense, first and foremost,\n\n212\n00:12:27.930 --> 00:12:30.870\nI have to know where in\nthe world to get the soda, okay?\n\n213\n00:12:30.870 --> 00:12:33.590\nSecondly, he actually told\nme what I need to get.\n\n214\n00:12:33.590 --> 00:12:36.180\nYeah, there's a soda inside there,\njust get one, get one for\n\n215\n00:12:36.180 --> 00:12:38.040\nme at the same time, okay?\n\n216\n00:12:38.040 --> 00:12:41.700\nSo I also know what it is that\nI'm actually retrieving, and\n\n217\n00:12:41.700 --> 00:12:45.820\nthen being able to return that to Daniel\nis what we need to be able to do.\n\n218\n00:12:45.820 --> 00:12:50.470\nNow if you think about it, that is what we\ncall a declarative statement of some sort.\n\n219\n00:12:50.470 --> 00:12:52.539\nHe's actually asking something, but\n\n220\n00:12:52.539 --> 00:12:55.995\nhe's actually declaring what it\nis that needs to happen, okay?\n\n221\n00:12:55.995 --> 00:13:01.305\nThe reason why we need to understand that\nis when we actually start to try and\n\n222\n00:13:01.305 --> 00:13:06.957\nquery a database we're not actually\ntelling it exactly what we're looking for\n\n223\n00:13:06.957 --> 00:13:08.069\nin that sense.\n\n224\n00:13:08.069 --> 00:13:11.670\nWe're essentially saying\nhere's the location and\n\n225\n00:13:11.670 --> 00:13:14.541\nhere's what I'm expecting you to find.\n\n226\n00:13:14.541 --> 00:13:16.197\nCan you tell me that?\n\n227\n00:13:16.197 --> 00:13:19.127\nOkay, so\nthat's really kind of the basics when\n\n228\n00:13:19.127 --> 00:13:24.070\nit comes down to what we talk about is\nbeing the basics of querying, okay?\n\n229\n00:13:24.070 --> 00:13:26.400\nIs that we need at least tell what?\n\n230\n00:13:26.400 --> 00:13:29.250\nWhere it is that we need to actually go,\nand\n\n231\n00:13:29.250 --> 00:13:32.330\nthen what it is that I'm\nexpecting to find, okay?\n\n232\n00:13:32.330 --> 00:13:36.992\nSo from that particular result,\nunderstanding that is actually\n\n233\n00:13:36.992 --> 00:13:42.003\ngoing to help us at the very beginning\nhere to do what we need to, okay?\n\n234\n00:13:42.003 --> 00:13:46.741\nNow when it comes now to SQL, right,\nStructured Querying Language,\n\n235\n00:13:46.741 --> 00:13:52.868\nremember it was originally called\nthe Structured English Querying Language.\n\n236\n00:13:52.868 --> 00:13:57.650\nWell, it is actually structured in\nthat way, where in terms of English\n\n237\n00:13:57.650 --> 00:14:02.000\nwe actually do say hey, this is what we\nneed and here is where you get it from.\n\n238\n00:14:03.050 --> 00:14:04.480\nMake sense, okay?\n\n239\n00:14:04.480 --> 00:14:05.490\nSo that's why,\n\n240\n00:14:05.490 --> 00:14:10.670\nwhen we actually start to write it out,\nthere's gonna be a structure or an order\n\n241\n00:14:10.670 --> 00:14:15.300\nto the way that we type things out as\nfar as querying our SQL database, okay?\n\n242\n00:14:15.300 --> 00:14:16.790\nSo let me show you an example here.\n\n243\n00:14:17.930 --> 00:14:21.450\nSo I'm gonna go ahead and\nflip on over to our SQL Server,\n\n244\n00:14:21.450 --> 00:14:24.520\nand I've got the Management Studio\nopened up here.\n\n245\n00:14:24.520 --> 00:14:27.460\nAnd in this Management Studio, first and\n\n246\n00:14:27.460 --> 00:14:29.710\nforemost here's just a basic\none that you want to do.\n\n247\n00:14:29.710 --> 00:14:32.540\nYou wanna actually pick\nthe database that you're gonna use.\n\n248\n00:14:32.540 --> 00:14:38.614\nSo you actually type in the word USE, and\nI'm gonna do the AdventureWorks2014, okay?\n\n249\n00:14:38.614 --> 00:14:42.658\nNow whenever you actually finish writing\na statement, a complete statement,\n\n250\n00:14:42.658 --> 00:14:46.410\nyou wanna make sure that you end\nit with a semicolon here, okay?\n\n251\n00:14:46.410 --> 00:14:49.942\nSo that is just part of\nthe actual ISO standard itself.\n\n252\n00:14:49.942 --> 00:14:51.940\nNow this is how you normally type it up.\n\n253\n00:14:51.940 --> 00:14:53.520\nNow the strange thing is this.\n\n254\n00:14:53.520 --> 00:14:54.710\nWhat if I leave it off?\n\n255\n00:14:54.710 --> 00:14:55.330\nWell, guess what?\n\n256\n00:14:55.330 --> 00:14:59.061\nT-SQL says, well according to T-SQL,\nnot the standard,\n\n257\n00:14:59.061 --> 00:15:02.510\nI don't care if you actually\nhave the semicolon or not.\n\n258\n00:15:03.810 --> 00:15:06.070\nBest practice though is still what?\n\n259\n00:15:06.070 --> 00:15:07.550\nUse the semicolon, okay?\n\n260\n00:15:07.550 --> 00:15:09.730\nSo even though T-SQL says,\nI don't care if you do it or\n\n261\n00:15:09.730 --> 00:15:11.230\nnot, I say go ahead and use it.\n\n262\n00:15:12.560 --> 00:15:16.080\nAnd then the other one that says hey,\nhere's a complete batch here.\n\n263\n00:15:16.080 --> 00:15:18.340\nAnd I just simply select Execute.\n\n264\n00:15:18.340 --> 00:15:21.170\nI get a verification here that\ntells me that the command was\n\n265\n00:15:21.170 --> 00:15:23.120\ncompleted successfully.\n\n266\n00:15:23.120 --> 00:15:26.406\nAnd I wanna verify,\nin the lower right hand corner, that hey,\n\n267\n00:15:26.406 --> 00:15:30.438\nI've actually gotten my database and\nit does say AdventureWorks2014.\n\n268\n00:15:30.438 --> 00:15:32.221\nFrom that particular point here,\n\n269\n00:15:32.221 --> 00:15:34.991\nI'm just gonna click back\nup into this upper window.\n\n270\n00:15:34.991 --> 00:15:40.147\nAnd so, this is where I will actually be\nable to write my statements, and down here\n\n271\n00:15:40.147 --> 00:15:45.257\nat the bottom is where I'll get messages\nor I will get the resulting data, okay?\n\n272\n00:15:45.257 --> 00:15:50.598\nSo from here, if I actually expand\nthis out just a little bit,\n\n273\n00:15:50.598 --> 00:15:56.680\nI'm gonna take a look at these tables\nhere and just do a simple select.\n\n274\n00:15:56.680 --> 00:15:59.630\nSo this is not gonna make sense,\nbut let's just go ahead and\n\n275\n00:15:59.630 --> 00:16:03.701\ndo the most basic selection that we can do\nSo, the key word that we are going to use,\n\n276\n00:16:03.701 --> 00:16:07.720\nand when we start typing in here, it's\ncalled keying in our statements, here.\n\n277\n00:16:09.310 --> 00:16:10.880\nIt begins with what we call a select.\n\n278\n00:16:10.880 --> 00:16:13.850\nIn other words,\nwhat am I expecting to find?\n\n279\n00:16:13.850 --> 00:16:14.690\nOkay?\n\n280\n00:16:14.690 --> 00:16:18.650\nThe most basic thing that we can expect\nto find is going to be everything.\n\n281\n00:16:18.650 --> 00:16:20.150\nSo, I'm going to use a wild card,\n\n282\n00:16:20.150 --> 00:16:22.980\nwhich all of us have probably\nused at some point, here.\n\n283\n00:16:22.980 --> 00:16:25.390\nAn asterisk representing everything.\n\n284\n00:16:25.390 --> 00:16:26.760\nNow when I say that,\n\n285\n00:16:26.760 --> 00:16:32.450\nwhat I'm actually selecting here is\nactually gonna be columns of information.\n\n286\n00:16:32.450 --> 00:16:36.750\nSo I don't even know what's actually\nin one of these tables that I want.\n\n287\n00:16:36.750 --> 00:16:43.770\nBut let me go ahead and choose,\nlet's say, person.address here.\n\n288\n00:16:43.770 --> 00:16:46.260\nNow, when I do that I say, hey.\n\n289\n00:16:46.260 --> 00:16:48.560\nHere's what I'm to find, everything.\n\n290\n00:16:48.560 --> 00:16:52.840\nWell now I need that second part,\nwhich is where do I find that.\n\n291\n00:16:52.840 --> 00:16:56.730\nSo I actually can use the keyword FROM,\nokay?\n\n292\n00:16:56.730 --> 00:17:01.150\nNow, when we do this here, okay,\nthe problem that we have in terms of\n\n293\n00:17:01.150 --> 00:17:05.000\ndatabases is that databases\ncan actually end up\n\n294\n00:17:05.000 --> 00:17:09.330\nbeing strange depending on who works\non it and who adds tables in to it and\n\n295\n00:17:09.330 --> 00:17:13.430\nthey can accidentally add names\nin that may be almost duplicated.\n\n296\n00:17:14.560 --> 00:17:18.900\nSo what you normally see here is kind\nof an unusual hierarchy in the name.\n\n297\n00:17:18.900 --> 00:17:21.340\nSo you see a structure\nin the name as well.\n\n298\n00:17:21.340 --> 00:17:24.970\nSo for example, like I said,\nfor the person.address,\n\n299\n00:17:24.970 --> 00:17:30.170\nwell, the actual table name is\nactually one that's called address.\n\n300\n00:17:30.170 --> 00:17:31.750\nBut person represents what?\n\n301\n00:17:31.750 --> 00:17:34.020\nA category, if that makes sense.\n\n302\n00:17:34.020 --> 00:17:38.290\nJust like human resources represents\na department or a category, and\n\n303\n00:17:38.290 --> 00:17:40.620\nthen department represents the table name.\n\n304\n00:17:40.620 --> 00:17:44.210\nSo you also see this kind of\nhierarchical name, as well.\n\n305\n00:17:44.210 --> 00:17:47.900\nAnd the recommendation, of course,\nis to use the hierarchy, as well,\n\n306\n00:17:47.900 --> 00:17:49.450\naccording to the standard.\n\n307\n00:17:49.450 --> 00:17:51.690\nSo for me, if I type in person,\n\n308\n00:17:51.690 --> 00:17:54.340\nnotice that it automatically can\nactually help me pick this out.\n\n309\n00:17:54.340 --> 00:17:56.750\nAnd you might be saying,\nshould I use that?\n\n310\n00:17:56.750 --> 00:17:58.740\nAt any time, if you can, yes you should.\n\n311\n00:17:58.740 --> 00:18:02.630\nAnd the reason why Is that, if you're\nlike me and you're not great at typing,\n\n312\n00:18:02.630 --> 00:18:04.810\nthis is absolutely the greatest\nthing in the world.\n\n313\n00:18:04.810 --> 00:18:08.960\nCuz I simply select it and\nit types it out for me.\n\n314\n00:18:08.960 --> 00:18:12.840\nAnd from this particular point I've\nactually written my very first query.\n\n315\n00:18:12.840 --> 00:18:13.850\nNow before I do so,\n\n316\n00:18:13.850 --> 00:18:16.920\nI wanna make sure that we understand\nwhat we're actually saying here.\n\n317\n00:18:16.920 --> 00:18:20.702\nI'm actually telling it to\nselect every single column.\n\n318\n00:18:20.702 --> 00:18:23.870\nFrom person.address and\n\n319\n00:18:23.870 --> 00:18:29.410\nreturn that to me in the form of\nwhat we call a relation, okay?\n\n320\n00:18:29.410 --> 00:18:32.710\nNow what relation means,\nrelation means a table.\n\n321\n00:18:32.710 --> 00:18:37.290\nSo when I actually get this information\nI'm saying select every single column and\n\n322\n00:18:37.290 --> 00:18:39.900\nreturn it to me in the form of a table.\n\n323\n00:18:39.900 --> 00:18:42.120\nAnd I can then come up here and\nselect execute.\n\n324\n00:18:42.120 --> 00:18:45.740\nNotice that if I hover over it I get\na tool tip that says I can press my\n\n325\n00:18:45.740 --> 00:18:46.740\nF5 key as well.\n\n326\n00:18:47.770 --> 00:18:52.065\nAnd when I run that, and now you\ncan actually take a look below, and\n\n327\n00:18:52.065 --> 00:18:57.469\nyou will end up seeing that there is, here\nis every single column in my result here.\n\n328\n00:18:59.426 --> 00:19:01.100\nHas actually been run.\n\n329\n00:19:01.100 --> 00:19:04.230\nAnd you can see there's results\nstarting with address ID.\n\n330\n00:19:04.230 --> 00:19:06.140\nAnd so here's every single column.\n\n331\n00:19:06.140 --> 00:19:09.850\nAddress ID, address line,\naddress two, city, state,\n\n332\n00:19:09.850 --> 00:19:13.350\nprovince and spatial location.\n\n333\n00:19:13.350 --> 00:19:16.390\nWe're gonna get into some spatial\ndata a little bit later on.\n\n334\n00:19:16.390 --> 00:19:21.030\nThis actually uniquely ensures that\neach row is actually gonna be unique.\n\n335\n00:19:21.030 --> 00:19:26.740\nThis rowguid, even the modification date\nand if we actually full screen this for\n\n336\n00:19:26.740 --> 00:19:29.770\na moment we'll actually see a little\nbit more information which is,\n\n337\n00:19:29.770 --> 00:19:31.180\nlet me scroll down right here.\n\n338\n00:19:31.180 --> 00:19:37.610\nAnd so you can see that in this data\nbase here, I have about 20,000 rows.\n\n339\n00:19:37.610 --> 00:19:41.940\nOkay, of information in this\nparticular table itself.\n\n340\n00:19:43.180 --> 00:19:47.250\nNow, when I say that,\nthat's actually unique data okay?\n\n341\n00:19:47.250 --> 00:19:52.660\nSo when we query the way that the query\nends up running is that it normally is,\n\n342\n00:19:52.660 --> 00:19:58.080\naccording to SQL supposed to actually\nreturn to us unique rows of data.\n\n343\n00:19:59.350 --> 00:20:02.310\nNow transact SQL does it\na little bit differently.\n\n344\n00:20:02.310 --> 00:20:03.890\nTransact SQL says, you asked for\n\n345\n00:20:03.890 --> 00:20:08.530\neverything Ronnie, if there's duplicates,\nI'll return a duplicate okay.\n\n346\n00:20:08.530 --> 00:20:13.610\nI'll do it, and even though the original\nidea of SQL in terms of the language here,\n\n347\n00:20:13.610 --> 00:20:16.020\nit doesn't actually end up doing it.\n\n348\n00:20:16.020 --> 00:20:20.000\nYou know, for us though, in transact SQL,\nif there's actually going to be duplicates\n\n349\n00:20:20.000 --> 00:20:22.830\nthat says, yeah, let me go ahead and\ndo it, because it wants to actually do\n\n350\n00:20:22.830 --> 00:20:25.920\neverything that you want it to do,\nrather than the way that SQL says.\n\n351\n00:20:25.920 --> 00:20:28.040\nIt should just return distinct rows.\n\n352\n00:20:28.040 --> 00:20:31.630\nIt returns distinct rows,\nyou could have information missing.\n\n353\n00:20:31.630 --> 00:20:34.740\nAnd then SQL server says, we don't\nwant to return missing information.\n\n354\n00:20:34.740 --> 00:20:37.220\nIf you say you want everything,\nlet's return everything,\n\n355\n00:20:37.220 --> 00:20:38.560\neven if there's duplicates.\n\n356\n00:20:38.560 --> 00:20:39.620\n>> That's a good plan right?\n\n357\n00:20:39.620 --> 00:20:43.300\nCuz like you said, like Ronnie said,\nif I'm looking for something specific but\n\n358\n00:20:43.300 --> 00:20:47.510\nmaybe I'm not 100% sure of what it is\nI'm looking for, the easiest thing to do\n\n359\n00:20:47.510 --> 00:20:50.620\nis to just say, you know what, give me\neverything and then I'll parse through\n\n360\n00:20:50.620 --> 00:20:55.520\nthat data a little more granularly once I\nfigure out where it is I'm trying to go.\n\n361\n00:20:55.520 --> 00:20:58.530\n>> Now, this is also something\na little bit strange too.\n\n362\n00:20:58.530 --> 00:21:01.550\nSo even though we have it in\nthis particular order and\n\n363\n00:21:01.550 --> 00:21:06.320\nwe can use wild cards, it's never\na great idea to actually use wild cards.\n\n364\n00:21:06.320 --> 00:21:08.140\nSo it's kind of strange, right?\n\n365\n00:21:08.140 --> 00:21:11.760\nSo this is something that's good when\nyour database is relatively small so\n\n366\n00:21:11.760 --> 00:21:13.020\nthat you can see it.\n\n367\n00:21:13.020 --> 00:21:16.040\nBut imagine if I were to run\nmultiple queries at the same time.\n\n368\n00:21:16.040 --> 00:21:18.440\nYou're saying can I do that, sure I can.\n\n369\n00:21:18.440 --> 00:21:21.220\nWatch what oops,\nlet me just expand that out.\n\n370\n00:21:21.220 --> 00:21:23.350\nWatch what happens here.\n\n371\n00:21:23.350 --> 00:21:25.670\nI'm just going to copy, oops.\n\n372\n00:21:25.670 --> 00:21:29.890\nI'm going to try and copy,\nand paste this again here.\n\n373\n00:21:29.890 --> 00:21:34.340\nAnd this time I'm going\nto choose another table.\n\n374\n00:21:34.340 --> 00:21:42.040\nI'm going to do\nhumanresources.employee instead.\n\n375\n00:21:44.520 --> 00:21:50.010\nThen I can hit F5 on my keyboard again,\nand now notice that I ran both of those.\n\n376\n00:21:50.010 --> 00:21:52.560\nNow I don't know,\nyou might not have been able to see it but\n\n377\n00:21:52.560 --> 00:21:57.160\nI could visibly experience that it's\nslow in that second query okay.\n\n378\n00:21:57.160 --> 00:22:01.160\nThat second one is slow down\ntremendously when it did that and\n\n379\n00:22:01.160 --> 00:22:05.250\nthe reason why is now all the stuff\nthat I'm actually seeing right here\n\n380\n00:22:05.250 --> 00:22:08.920\nis now being held in RAM and\nif you don't have a lot of RAM\n\n381\n00:22:08.920 --> 00:22:13.870\nit's going to slow down there's gonna have\nto actually do the heavy disk IO right.\n\n382\n00:22:13.870 --> 00:22:18.310\nSo normally we don't just do asterisks,\njust on a general basis.\n\n383\n00:22:18.310 --> 00:22:20.140\nBut I wanted to show you\na simple query here.\n\n384\n00:22:20.140 --> 00:22:24.920\nSo if I click on let's say this\nbottom half here, there's 290 rows.\n\n385\n00:22:24.920 --> 00:22:31.130\nAnd this top one actually returned\n19,614 rows as I take a look here.\n\n386\n00:22:31.130 --> 00:22:34.570\nSo you can see where something like this\ncould actually become a little bit hefty.\n\n387\n00:22:34.570 --> 00:22:39.590\nSo normally, you do not want to run\nqueries like this, if you do so.\n\n388\n00:22:39.590 --> 00:22:43.690\nThe neat thing though, if you do have\nmultiple queries you're testing out,\n\n389\n00:22:43.690 --> 00:22:49.380\nas far as just running simple queries\nhere, you can also simply select this.\n\n390\n00:22:49.380 --> 00:22:52.660\nAnd so this is kind of neat inside\nof the management studio here.\n\n391\n00:22:52.660 --> 00:22:58.360\nIs that if I highlight this, and I want to\nrun this one, okay, I can just highlight\n\n392\n00:22:58.360 --> 00:23:03.670\nit, and then press my F5, and then it\nwill only run that one query instead.\n\n393\n00:23:03.670 --> 00:23:07.270\nSo, it actually gives me that ability\nto run exactly what I want to, and\n\n394\n00:23:07.270 --> 00:23:10.940\nnot necessarily have to run both of\nthem if I didn't want to run them, okay?\n\n395\n00:23:12.140 --> 00:23:14.870\nSo there is a lot of information\nlike this that we can get\n\n396\n00:23:14.870 --> 00:23:16.510\njust in terms of simple querying.\n\n397\n00:23:17.580 --> 00:23:21.510\nNow, the other thing that we also need to\npay attention to is something else that's\n\n398\n00:23:21.510 --> 00:23:25.060\ngonna happen when we start to\nget a little bit more specific\n\n399\n00:23:25.060 --> 00:23:28.100\nat the things that we want to query, okay?\n\n400\n00:23:28.100 --> 00:23:31.015\nSo from this particular point here.\n\n401\n00:23:31.015 --> 00:23:32.679\nI can also go ahead and do this,\n\n402\n00:23:32.679 --> 00:23:35.691\nlet me see if I can find\nsomething this postal code here.\n\n403\n00:23:35.691 --> 00:23:43.961\n9800011 I'm hoping that not everybody\nactually okay so not everybody's in.\n\n404\n00:23:43.961 --> 00:23:48.861\nIf I wanted to actually put\na filter in other words limit this\n\n405\n00:23:48.861 --> 00:23:54.055\ndown I could go ahead and\ntype in another key word called Where,\n\n406\n00:23:54.055 --> 00:23:57.779\nokay, and\nthen I need that field name again or\n\n407\n00:23:57.779 --> 00:24:03.169\nwhat we call that column name and\nthat's going to be Postal Code so\n\n408\n00:24:03.169 --> 00:24:09.570\nthis is going to be From person.postal\ncode, did I not type in the right one?\n\n409\n00:24:13.652 --> 00:24:16.780\nPerson.postal code, where's postal code?\n\n410\n00:24:19.581 --> 00:24:20.660\nWell, I'm lying to you.\n\n411\n00:24:20.660 --> 00:24:25.220\nWhere is that [LAUGH] hold on\nbefore I tell you wrong here.\n\n412\n00:24:27.010 --> 00:24:30.590\nLet me verify that this is actually what,\nthat does say postal code there.\n\n413\n00:24:30.590 --> 00:24:35.699\nSo, it actually does have a name, but\nsomewhere along the line I'm missing where\n\n414\n00:24:35.699 --> 00:24:40.560\n[BLANK AUDIO] say post,\nthere it is, say postal code.\n\n415\n00:24:40.560 --> 00:24:41.290\nOkay.\n\n416\n00:24:41.290 --> 00:24:42.330\nNow, notice this.\n\n417\n00:24:42.330 --> 00:24:46.130\nThis time I did not actually also\nadd in the hierarchical name here.\n\n418\n00:24:46.130 --> 00:24:46.860\nOkay?\n\n419\n00:24:46.860 --> 00:24:51.480\nBut when I do something like this, it\nautomatically knows because of this FROM.\n\n420\n00:24:51.480 --> 00:24:54.410\nAnd we're gonna talk about why\nit actually knows that here.\n\n421\n00:24:54.410 --> 00:24:55.190\nJust a moment.\n\n422\n00:24:55.190 --> 00:24:56.640\nI'm gonna do an =.\n\n423\n00:24:56.640 --> 00:25:01.480\nAnd then, single quotes here,\n9 8011, close it with\n\n424\n00:25:01.480 --> 00:25:06.770\nsingle quotes and then execute.\n\n425\n00:25:06.770 --> 00:25:09.410\nAnd now notice that I have\nactually just a few rows.\n\n426\n00:25:09.410 --> 00:25:14.220\nIt doesn't return anything but\nthe ones that have the postal\n\n427\n00:25:14.220 --> 00:25:18.210\ncode for 98001 and\nthat's actually about 26 rows of data.\n\n428\n00:25:19.460 --> 00:25:23.520\nNow, when I take a look at this, the way\nthat Daniel has talked about the idea of\n\n429\n00:25:23.520 --> 00:25:26.200\nprogramming languages, normally when\nwe start writing stuff like that,\n\n430\n00:25:26.200 --> 00:25:30.140\nright, it actually starts to do it\nfrom what, top to bottom, right?\n\n431\n00:25:30.140 --> 00:25:32.000\nGoes from top to bottom.\n\n432\n00:25:32.000 --> 00:25:34.520\nBut notice this, though, kay?\n\n433\n00:25:34.520 --> 00:25:37.270\nThe way that this ended up\nworking is a little bit strange.\n\n434\n00:25:37.270 --> 00:25:40.290\nThis says, first of all, in order to\nwork this from top to bottom, Daniel,\n\n435\n00:25:40.290 --> 00:25:43.390\nwe'll just,\nwe'll just try to use programming logic.\n\n436\n00:25:43.390 --> 00:25:44.930\nThat says what?\n\n437\n00:25:44.930 --> 00:25:45.710\n>> Select everything.\n\n438\n00:25:45.710 --> 00:25:47.510\n>> Select everything first.\n\n439\n00:25:47.510 --> 00:25:50.120\nIn other words, take a look at\nthe entire database and what?\n\n440\n00:25:50.120 --> 00:25:51.520\nSelect it all, okay?\n\n441\n00:25:52.700 --> 00:25:56.020\nThen I'm telling it from where.\n\n442\n00:25:57.330 --> 00:26:01.180\nSo that logic does not seem to\nwork out the way it should, right?\n\n443\n00:26:01.180 --> 00:26:03.750\nSo for us, you're like, wait a minute.\n\n444\n00:26:03.750 --> 00:26:05.700\nYeah, that would not be right.\n\n445\n00:26:05.700 --> 00:26:08.000\nI wanna select everything\nin the entire database and\n\n446\n00:26:08.000 --> 00:26:12.940\nthen specify where I'm filtering down and\nthen filtering again?\n\n447\n00:26:12.940 --> 00:26:17.590\nWell that's because SQL, even though\nit actually works well in English,\n\n448\n00:26:17.590 --> 00:26:20.280\naccording to the way that you and\nI think in English,\n\n449\n00:26:20.280 --> 00:26:24.310\nit doesn't follow that in terms of\nthe processing way that it does it.\n\n450\n00:26:24.310 --> 00:26:28.190\nSo this is where it also will end\nup helping us out a little bit too\n\n451\n00:26:28.190 --> 00:26:30.790\nis understanding that there's\na process order to this.\n\n452\n00:26:30.790 --> 00:26:31.760\nOkay?\n\n453\n00:26:31.760 --> 00:26:35.810\nSo the way that you and\nI would normally key in data, okay?\n\n454\n00:26:35.810 --> 00:26:38.820\nOr key in our queries\ninside of that window\n\n455\n00:26:38.820 --> 00:26:42.170\nIs going to be over here\non the left hand side.\n\n456\n00:26:42.170 --> 00:26:46.270\nNow, there's an easy mnemonic that\nI learned years and years ago,\n\n457\n00:26:46.270 --> 00:26:51.200\nif you're ever lost and you're like, man I\ncan't remember what the query loader is,\n\n458\n00:26:51.200 --> 00:26:56.380\nso the mnemonic that I used to\nuse here is just a mnemonic,\n\n459\n00:26:56.380 --> 00:26:59.808\nit doesn't actually spell anything,\nbut it's software\n\n460\n00:26:59.808 --> 00:27:08.920\nSoFt WHERE and then GHOst.\n\n461\n00:27:11.366 --> 00:27:12.600\nIt was like this, okay?\n\n462\n00:27:12.600 --> 00:27:14.530\nSo notice all the capital letters here.\n\n463\n00:27:14.530 --> 00:27:20.520\nS for Select and then F From, and\nthen the word, WHERE, for where statement.\n\n464\n00:27:20.520 --> 00:27:25.130\nAnd then G, for group by,\nH for having an order by or O.\n\n465\n00:27:25.130 --> 00:27:28.300\nSo that's something that you can actually\nuse if that's something you're not\n\n466\n00:27:28.300 --> 00:27:29.110\nused to.\n\n467\n00:27:29.110 --> 00:27:32.290\nIf you're not actually used to\ntyping out sequel statement.\n\n468\n00:27:32.290 --> 00:27:33.420\nMost people are gonna use this.\n\n469\n00:27:33.420 --> 00:27:37.730\nBut just in case you aren't, here's the\nway that we would normally type this out.\n\n470\n00:27:37.730 --> 00:27:43.210\nSo because it's actually called structured\nEnglish in the original English querying,\n\n471\n00:27:43.210 --> 00:27:46.640\nhere's the order that made sense in\nterms of you and I know English.\n\n472\n00:27:46.640 --> 00:27:47.540\nRight?\n\n473\n00:27:47.540 --> 00:27:51.275\nSelect what you want and\nWhere are you actually getting t from?\n\n474\n00:27:52.405 --> 00:27:57.905\nWell, in the processing order though in\nsequel it actually changes it like this.\n\n475\n00:27:57.905 --> 00:28:03.005\nSo the order here, even though it doesn't\nmatter to you and me, notice it says from\n\n476\n00:28:03.005 --> 00:28:07.315\nso when the first things that ends up\nprocessing is actually right here from and\n\n477\n00:28:07.315 --> 00:28:09.180\nthen the where statement.\n\n478\n00:28:09.180 --> 00:28:12.810\nAnd then group by having select,\nand then, order by.\n\n479\n00:28:12.810 --> 00:28:14.720\nSelect way down here at the bottom.\n\n480\n00:28:14.720 --> 00:28:16.520\nNow, you're saying, why does that matter?\n\n481\n00:28:16.520 --> 00:28:18.190\nWell, let me show you, okay?\n\n482\n00:28:18.190 --> 00:28:22.380\nThe reason why it matters is that\nthe first thing that's process is here.\n\n483\n00:28:22.380 --> 00:28:24.100\nIt says go to what?\n\n484\n00:28:24.100 --> 00:28:25.930\nThat location, right?\n\n485\n00:28:25.930 --> 00:28:27.395\nLimit yourself to where.\n\n486\n00:28:27.395 --> 00:28:30.170\nperson.address.\n\n487\n00:28:30.170 --> 00:28:31.270\nOk?\n\n488\n00:28:31.270 --> 00:28:36.630\nThen, go ahead at that, once you\nactually get to that table, filter,\n\n489\n00:28:36.630 --> 00:28:41.500\nin other words where that column\npostal code equals 98011.\n\n490\n00:28:41.500 --> 00:28:45.090\nGo ahead and do it.\n\n491\n00:28:45.090 --> 00:28:50.530\nFilter that down to that selection and\nthen at the end,\n\n492\n00:28:50.530 --> 00:28:55.226\nreturn to me all those other columns\nas long as those two are actually met.\n\n493\n00:28:55.226 --> 00:28:59.350\nNow notice that person.Address.\n\n494\n00:28:59.350 --> 00:29:02.620\nAnd notice I did not put\nperson up here at postal code.\n\n495\n00:29:02.620 --> 00:29:04.260\nWhy didn't it matter?\n\n496\n00:29:04.260 --> 00:29:05.310\nIt's because what?\n\n497\n00:29:05.310 --> 00:29:07.860\nI already told it limit itself to where?\n\n498\n00:29:07.860 --> 00:29:12.050\nPerson, because I guarantee you postal\ncode appears all throughout this entire\n\n499\n00:29:12.050 --> 00:29:13.640\ndatabase, it appears everywhere.\n\n500\n00:29:13.640 --> 00:29:19.590\nIn just about 10-15 of those tables,\nyou'll actually see postal code appear.\n\n501\n00:29:19.590 --> 00:29:25.570\nSo in this particular one, what you\nactually end up seeing here, because\n\n502\n00:29:25.570 --> 00:29:30.260\nthe from actually gets processed first\nit says limited to person not address.\n\n503\n00:29:30.260 --> 00:29:33.730\nAnd now everywhere else in my statement\nI don't ever have to worry about.\n\n504\n00:29:33.730 --> 00:29:37.360\nEven if I come up here\nlet's say to select.\n\n505\n00:29:37.360 --> 00:29:41.150\nAt this point if I wanted to,\nlet's see if I can do a city here.\n\n506\n00:29:41.150 --> 00:29:45.250\nSo what I'm gonna do instead\nis just type in city.\n\n507\n00:29:45.250 --> 00:29:48.660\nWell I know that city's actually gonna\nappear somewhere else in my database but\n\n508\n00:29:48.660 --> 00:29:53.870\nbecause of that first one\nactually just returns to me here.\n\n509\n00:29:53.870 --> 00:29:57.510\nAnd it's the same 26 rows\nthat have that same address.\n\n510\n00:29:57.510 --> 00:30:02.120\nSo there is a limitation in that\nprocessing order is also key.\n\n511\n00:30:02.120 --> 00:30:06.290\nYou want to make sure you understand this\nbecause sometimes when you type in things\n\n512\n00:30:06.290 --> 00:30:09.950\na little bit unusually It's not gonna\nwork out the way that you think.\n\n513\n00:30:09.950 --> 00:30:12.370\nAnd you're actually gonna be kinda stuck.\n\n514\n00:30:12.370 --> 00:30:15.420\nBut one of the things you wanna\nunderstand is why isn't it working?\n\n515\n00:30:15.420 --> 00:30:18.130\nYou've gotta understand\nthe processing order.\n\n516\n00:30:18.130 --> 00:30:20.120\nSo even if your SELECT\nstatement looks perfect.\n\n517\n00:30:20.120 --> 00:30:22.840\nAnd you're going that makes\nsense to me in English.\n\n518\n00:30:22.840 --> 00:30:23.560\nOkay?\n\n519\n00:30:23.560 --> 00:30:26.410\nWithout understanding this process order,\nit's not gonna help.\n\n520\n00:30:26.410 --> 00:30:29.690\nNow Daniel what do you think is gonna\nhappen, if I take that SELECT statement.\n\n521\n00:30:31.110 --> 00:30:33.190\n>> It's not gonna work I think.\n\n522\n00:30:33.190 --> 00:30:35.110\n>> Yeah, so let's take a look here.\n\n523\n00:30:35.110 --> 00:30:37.540\nSo we'll see notice that.\n\n524\n00:30:37.540 --> 00:30:40.610\nSo now mushy is getting a message here and\nthis is something we're gonna be\n\n525\n00:30:40.610 --> 00:30:45.560\npaying attention throughout the course\nas well as we'll gonna see messages\n\n526\n00:30:45.560 --> 00:30:50.010\nthat will tell us, hey, this is\nan incorrect syntax, near the word from.\n\n527\n00:30:50.010 --> 00:30:51.310\nWhy is it actually near the word from?\n\n528\n00:30:51.310 --> 00:30:55.750\nIt's saying hey, I don't see what I expect\nto see, which is a select statement, okay?\n\n529\n00:30:55.750 --> 00:30:58.030\nSo, I don't see select,\nit's not going to happen.\n\n530\n00:30:58.030 --> 00:31:02.630\nNow notice, I didn't actually\nput also in any of this, right?\n\n531\n00:31:02.630 --> 00:31:06.830\nThe idea of some of those things\nthat I said we should put\n\n532\n00:31:06.830 --> 00:31:10.920\nwhich is gonna be like the semicolon\nhere at the end to run that.\n\n533\n00:31:10.920 --> 00:31:12.120\nAnd it still executes.\n\n534\n00:31:12.120 --> 00:31:15.120\nIt still works, and\nthat's because Transact-SQL will do that.\n\n535\n00:31:15.120 --> 00:31:17.490\nBut remember that the recommendation,\nespecially when you see this, and\n\n536\n00:31:17.490 --> 00:31:19.360\nI'm gonna say it, on the exam.\n\n537\n00:31:19.360 --> 00:31:22.190\nMake sure if you actually have\na choice between two of them that\n\n538\n00:31:22.190 --> 00:31:24.300\nlook almost identical like this?\n\n539\n00:31:24.300 --> 00:31:25.540\nOne of them is following the standard.\n\n540\n00:31:25.540 --> 00:31:27.560\nMake sure you follow the standard.\n\n541\n00:31:27.560 --> 00:31:31.670\nA lot of times you'll also see that after\nthat you'll still see the key word go as\n\n542\n00:31:31.670 --> 00:31:36.180\nwell, if that's actually the way\nthat it's shown rather than this,\n\n543\n00:31:36.180 --> 00:31:40.470\nthat's also a standard so make sure you\nalso follow that particular statement too.\n\n544\n00:31:40.470 --> 00:31:42.320\nThat should actually go in step.\n\n545\n00:31:43.540 --> 00:31:47.928\nSo there's a couple of different things\nhere as well when you start seeing that.\n\n546\n00:31:47.928 --> 00:31:52.047\nNow here's one that I actually\nmade a little more complex and\n\n547\n00:31:52.047 --> 00:31:56.404\nfrom this one if you take a look here\nright so if we talk about it and\n\n548\n00:31:56.404 --> 00:32:01.333\nprocess in order I'm saying what\nfirst go to humanresources.employee\n\n549\n00:32:01.333 --> 00:32:04.723\nokay Then what you wanna\ndo is you wanna filter by,\n\n550\n00:32:04.723 --> 00:32:09.200\nas long as the hire date is\ngreater than the year 2003, okay?\n\n551\n00:32:10.300 --> 00:32:15.406\nAnd the group by, this is where we're\nactually grouping the data together okay?\n\n552\n00:32:15.406 --> 00:32:17.160\nBy job titles.\n\n553\n00:32:17.160 --> 00:32:19.628\nAnd then the year is next okay?\n\n554\n00:32:19.628 --> 00:32:21.826\nFrom that if I actually have groups and\n\n555\n00:32:21.826 --> 00:32:26.410\nI need to also do the idea of filtering\nI'm gonna use the word having.\n\n556\n00:32:26.410 --> 00:32:28.760\nSo as long as that's actually\nhas a count of one or\n\n557\n00:32:28.760 --> 00:32:32.780\nhigher make sure you report that,\nand then do the select statement.\n\n558\n00:32:32.780 --> 00:32:34.250\nRun through and do this.\n\n559\n00:32:34.250 --> 00:32:37.230\nAnd we're gonna actually be getting into\nthis a little bit later where we actually\n\n560\n00:32:37.230 --> 00:32:42.120\nare using things like as which\nis things like aliases as well.\n\n561\n00:32:42.120 --> 00:32:47.114\nAnd then also, of course,\naggregate types of things such as account,\n\n562\n00:32:47.114 --> 00:32:49.458\nand also functions such as year.\n\n563\n00:32:49.458 --> 00:32:54.019\nSo we're actually gonna be seeing all\nthis during our particular entirety of\n\n564\n00:32:54.019 --> 00:32:56.767\nthe series as we run through this here,\nokay?\n\n565\n00:32:56.767 --> 00:33:00.655\nBut the key here is to also remember\nthat that processing order is key, so\n\n566\n00:33:00.655 --> 00:33:04.700\ndo you have to type the statements in\nthe correct way just like I showed you?\n\n567\n00:33:04.700 --> 00:33:05.830\nYes.\nOkay?\n\n568\n00:33:05.830 --> 00:33:09.175\nBut if you run into problems one of\nthe first things that I would make sure I\n\n569\n00:33:09.175 --> 00:33:12.090\ncheck is also that processing order.\n\n570\n00:33:12.090 --> 00:33:14.770\nMake sure that she says what\nyou think it's going to say.\n\n571\n00:33:15.810 --> 00:33:18.201\nA lot of times when you see that and\nyou run that query and\n\n572\n00:33:18.201 --> 00:33:23.260\nyou get some type of message invalid\nsyntax, or near here, near that.\n\n573\n00:33:23.260 --> 00:33:25.215\nCheck out your processing order and\n\n574\n00:33:25.215 --> 00:33:28.546\ngo hey, did that actually make\nsense when I typed out or not.\n\n575\n00:33:28.546 --> 00:33:32.091\nAnd you'll probably see that processing\norder is probably one things that\n\n576\n00:33:32.091 --> 00:33:35.577\nabsolutely is going to jump out to be\none of the first things you'll need to\n\n577\n00:33:35.577 --> 00:33:36.530\ncorrect.\n\n578\n00:33:36.530 --> 00:33:38.540\nAnd just make sure\nthe logic works from there.\n\n579\n00:33:38.540 --> 00:33:40.420\n>> Well, Ronnie we thank you so much for\n\n580\n00:33:40.420 --> 00:33:44.390\nexplaining these things to us because I\nremember when I first started into IT,\n\n581\n00:33:44.390 --> 00:33:48.190\nI thought, aw you know what I'll take some\ndatabase classes, and that'll be good for\n\n582\n00:33:48.190 --> 00:33:50.470\nme cuz databases\nare prevalent throughout IT.\n\n583\n00:33:50.470 --> 00:33:52.400\nAnd I was telling you this\nbefore the show, I was,\n\n584\n00:33:52.400 --> 00:33:54.266\nI made it half way through the class.\n\n585\n00:33:54.266 --> 00:33:55.830\n>> [LAUGH]\n>> And I was, yeah, this ain't for me,\n\n586\n00:33:55.830 --> 00:33:57.290\nthis is not my cup of tea.\n\n587\n00:33:57.290 --> 00:34:00.640\nBut it's because of things like this\nI didn't understand what's happening.\n\n588\n00:34:00.640 --> 00:34:03.460\nAnd of course the instructor\nat the time just wasn't\n\n589\n00:34:03.460 --> 00:34:06.000\ngiving it to me the way\nyou just showed it to us.\n\n590\n00:34:06.000 --> 00:34:07.140\nSo now it starts to make more sense,\n\n591\n00:34:07.140 --> 00:34:08.880\nhopefully it's making\nsense to you as well,\n\n592\n00:34:08.880 --> 00:34:12.950\nthat we need to really understand\nthe difference between the way that SQL\n\n593\n00:34:12.950 --> 00:34:17.232\nis actually, you're keying in the order\nversus the way that it's being processed.\n\n594\n00:34:17.232 --> 00:34:21.770\nYou gotta get those things squared away or\nyou're gonna be super confused, and\n\n595\n00:34:21.770 --> 00:34:24.830\nobviously your queries aren't going\nto work as you expect them to.\n\n596\n00:34:24.830 --> 00:34:29.780\nSo thank you so much for\ndispelling some of that fog from us.\n\n597\n00:34:29.780 --> 00:34:33.750\nBut, looking at the clock there running,\nwe have definitely exhausted the time for\n\n598\n00:34:33.750 --> 00:34:34.790\nthis episode.\n\n599\n00:34:34.790 --> 00:34:36.220\nWe thank you guys for joining us.\n\n600\n00:34:36.220 --> 00:34:38.390\nHopefully we'll see you in\nthe upcoming episodes but as for\n\n601\n00:34:38.390 --> 00:34:40.610\nthis one, we're signing off for ITProTV.\n\n602\n00:34:40.610 --> 00:34:42.200\nI've been your host Daniel Lowry.\n\n603\n00:34:42.200 --> 00:34:42.850\n>> And I'm Ronnie Wong.\n\n604\n00:34:42.850 --> 00:34:44.680\n>> And we'll see you next time.\n\n605\n00:34:44.680 --> 00:34:52.210\n[MUSIC]\n\n",
          "vimeoId": "164043274"
        },
        {
          "description": "In this episode, Wes and Ronnie discuss table creation with T-SQL. They talk about T-SQL syntax and demonstrate how to create, alter and compress tables. They look at querying information from existing tables to new tables.",
          "length": "2162",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-1-create_and_alter_tables-042716-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-1-create_and_alter_tables-042716-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-1-create_and_alter_tables-042716-1-sm.jpg",
          "title": "Create and Alter Tables",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.907 --> 00:00:14.814\nWelcome back to another exciting\nepisode here at ITProTV.\n\n3\n00:00:14.814 --> 00:00:19.753\nI'm your host Wes Bryan and\nin today's episode we are continuing along\n\n4\n00:00:19.753 --> 00:00:23.170\nin our querying Microsoft SQL Server 2014.\n\n5\n00:00:23.170 --> 00:00:26.163\nAnd joining me back in the studio again\nis none other than Mr. Ronnie Wong.\n\n6\n00:00:26.163 --> 00:00:27.422\nRonnie, how are you doing, sir?\n\n7\n00:00:27.422 --> 00:00:32.178\n>> I am doing fine as we continue to\ntake a look at now, more, of course,\n\n8\n00:00:32.178 --> 00:00:34.730\nMicrosoft's SQL Server 2014.\n\n9\n00:00:34.730 --> 00:00:40.510\nAnd today we're specifically getting into\nthe realm of creating and altering tables.\n\n10\n00:00:40.510 --> 00:00:42.560\nNow, everything that we've\nbeen doing in the series so\n\n11\n00:00:42.560 --> 00:00:46.680\nfar has been really talking about this\nidea, of course, of just saying look,\n\n12\n00:00:46.680 --> 00:00:49.260\nwe need to make sure that we understand\nthe fundamentals of querying.\n\n13\n00:00:49.260 --> 00:00:53.010\nAnd we've showed you how to actually do\nselect statements, hopefully in just about\n\n14\n00:00:53.010 --> 00:00:56.510\nevery variety that you can see,\nsome complex, some fairly simple.\n\n15\n00:00:56.510 --> 00:00:59.940\nBut showed you a lot of that and\nwhy this is actually very important.\n\n16\n00:00:59.940 --> 00:01:03.830\nAnd now we are getting into some of these\nstatements that will help us to create\n\n17\n00:01:03.830 --> 00:01:05.430\ntables as well.\n\n18\n00:01:05.430 --> 00:01:09.070\nAnd that means we are ready to do\nsome of the fundamentals here of\n\n19\n00:01:09.070 --> 00:01:12.630\nactually beginning that idea of\ncreating that complete database.\n\n20\n00:01:12.630 --> 00:01:14.280\nNow, remember that when we\nstarted creating tables,\n\n21\n00:01:14.280 --> 00:01:18.240\nit's not just something that we\nchoose to do just because we want to.\n\n22\n00:01:18.240 --> 00:01:20.550\nBecause it doesn't mean that\nyou end up with a coherent and\n\n23\n00:01:20.550 --> 00:01:22.800\na completely designed database.\n\n24\n00:01:22.800 --> 00:01:24.365\nSo of course,\nall that begins with planning.\n\n25\n00:01:24.365 --> 00:01:27.925\nAnd you might wanna take a look at\nsomething called relational database\n\n26\n00:01:27.925 --> 00:01:31.839\ndesign to help you out and understand how\nthose tables that we end up creating,\n\n27\n00:01:31.839 --> 00:01:33.760\nof course, are connected together.\n\n28\n00:01:33.760 --> 00:01:37.240\nAnd why we would actually create the\ntables in the way that we would want them.\n\n29\n00:01:37.240 --> 00:01:41.200\nSo that they can be queried as\na relational database as well.\n\n30\n00:01:41.200 --> 00:01:42.010\nBut for us though,\n\n31\n00:01:42.010 --> 00:01:46.420\nlet's say that we've gotten to that point\nwhere we are now ready to create tables.\n\n32\n00:01:46.420 --> 00:01:50.390\nAnd that's where we're actually setting\nourselves up when we start to do this.\n\n33\n00:01:50.390 --> 00:01:53.840\nNow, in terms of creating tables\ninside of the SQL Server,\n\n34\n00:01:53.840 --> 00:01:57.190\nthere are a couple of methods,\nof course, that you can use.\n\n35\n00:01:57.190 --> 00:02:00.420\nAnd there's at least one method that\nyou can use that's built right into\n\n36\n00:02:00.420 --> 00:02:01.680\nthe SQL Server.\n\n37\n00:02:01.680 --> 00:02:05.270\nSo we wanna take a look at\nleast the beginning of that.\n\n38\n00:02:05.270 --> 00:02:08.660\nBut as it comes down to what we're\ndoing for this show which is,\n\n39\n00:02:08.660 --> 00:02:11.340\nof course,\nalso getting ready for the exam.\n\n40\n00:02:11.340 --> 00:02:13.352\nOne of the specific things\nthat they call out, Wes,\n\n41\n00:02:13.352 --> 00:02:15.243\nis something that's\na little bit more unusual.\n\n42\n00:02:15.243 --> 00:02:17.453\nWhich is create tables and\n\n43\n00:02:17.453 --> 00:02:22.830\nalter tables not using\nthe built-in tools in SQL Server.\n\n44\n00:02:22.830 --> 00:02:26.900\nSo you might go, okay, I'm pretty sure\nI can figure out how to create a table.\n\n45\n00:02:26.900 --> 00:02:30.730\nWell, let's take a look at that and then\nwe'll take a look at the actual way they\n\n46\n00:02:30.730 --> 00:02:33.640\nwant us to create it for\ngetting ready for the exam.\n\n47\n00:02:33.640 --> 00:02:37.190\nSo here I am,\nI'm actually at my SQL Server.\n\n48\n00:02:37.190 --> 00:02:40.856\nAnd so when we take a look over here\nin the Object Explorer on the left\n\n49\n00:02:40.856 --> 00:02:41.913\nhand side, okay?\n\n50\n00:02:41.913 --> 00:02:45.560\nThere are plenty, of course,\nof things that we can take a look at.\n\n51\n00:02:45.560 --> 00:02:49.169\nAnd I've got the AdventureWorks2012 here.\n\n52\n00:02:49.169 --> 00:02:53.041\nAnd If I want to create a table, believe\nit or not it's as easy as something that\n\n53\n00:02:53.041 --> 00:02:57.450\nmost of us will end up figuring out by\ndoing what we call right-clicking, right?\n\n54\n00:02:57.450 --> 00:03:01.870\nWell, notice as soon as I right-click on\nthe word Table, it shows me hey, New.\n\n55\n00:03:01.870 --> 00:03:03.770\nAnd then if I wanna create a table,\n\n56\n00:03:03.770 --> 00:03:07.410\nWes, I can't think of anything\nmore simple than that.\n\n57\n00:03:07.410 --> 00:03:08.920\nIt is, it's just that way.\n\n58\n00:03:08.920 --> 00:03:10.760\n>> So that's gonna be the easy route.\n\n59\n00:03:10.760 --> 00:03:15.074\nAnd like I've seen on some of [LAUGH] the\nMicrosoft exams, what you would do easily\n\n60\n00:03:15.074 --> 00:03:19.210\nis, very easily, not the way they're\ngonna be asking you [LAUGH] on the exam.\n\n61\n00:03:19.210 --> 00:03:21.990\nSo it looks like there's gonna be\na long scenic approach to this.\n\n62\n00:03:21.990 --> 00:03:25.040\n>> Yeah, there's gonna be a little bit\nmore to this than what we're seeing.\n\n63\n00:03:25.040 --> 00:03:29.229\nBut just to show you how in line it\nreally is with what we're gonna be\n\n64\n00:03:29.229 --> 00:03:29.825\ncreating, right?\n\n65\n00:03:29.825 --> 00:03:34.310\nSo that just went ahead and created this\nlittle tab for me and then I just simply\n\n66\n00:03:34.310 --> 00:03:38.397\nhave to fill in a Table Name, okay,\nor excuse me, a Column Name here.\n\n67\n00:03:38.397 --> 00:03:40.881\nAnd then also, of course,\nthe Data Type, and\n\n68\n00:03:40.881 --> 00:03:43.483\nnotice that it actually\ngives me a drop-down.\n\n69\n00:03:43.483 --> 00:03:47.740\nAnd so this absolutely,\nat least the Data Type, for me,\n\n70\n00:03:47.740 --> 00:03:52.520\nwould be a big plus and why I would\nchoose to create tables this way, okay?\n\n71\n00:03:52.520 --> 00:03:54.270\nBut of course, like I said,\nwhen you're getting ready for\n\n72\n00:03:54.270 --> 00:03:55.363\nthe exam it's not gonna be that way.\n\n73\n00:03:55.363 --> 00:03:58.240\nWe're gonna show you how to do it using,\nof course, the Query window to do so.\n\n74\n00:03:58.240 --> 00:04:02.750\nAnd then whether or not we're gonna allow\nit to actually be a null or not as well.\n\n75\n00:04:02.750 --> 00:04:05.412\nSo notice that you can have\nsomething like that by default.\n\n76\n00:04:05.412 --> 00:04:06.516\nIt actually says,\n\n77\n00:04:06.516 --> 00:04:11.280\nhey, we're gonna actually do this\ncharacter here of 10 at the max here.\n\n78\n00:04:11.280 --> 00:04:14.645\nSo of course, since I'm not actually\ndoing that, and there we go.\n\n79\n00:04:14.645 --> 00:04:18.070\nOop, well maybe I am, okay, so\napparently I saved a table there.\n\n80\n00:04:18.070 --> 00:04:19.660\nI thought I had cancelled it out.\n\n81\n00:04:19.660 --> 00:04:22.580\nBut there actually shows you two\nthings that have to be done when\n\n82\n00:04:22.580 --> 00:04:24.350\nyou start creating a table.\n\n83\n00:04:24.350 --> 00:04:27.240\nOne is you need what we call a Table Name,\nokay?\n\n84\n00:04:27.240 --> 00:04:29.820\nSomething that we'll actually end\nup creating here is that we need\n\n85\n00:04:29.820 --> 00:04:30.830\na table name.\n\n86\n00:04:30.830 --> 00:04:32.889\nAnd then two, you need the name\nof the columns of the fields.\n\n87\n00:04:32.889 --> 00:04:36.835\nAnd then, of course, what we've also\ntalked about in a previous episode here,\n\n88\n00:04:36.835 --> 00:04:40.020\nis the idea of understanding\nthe data type of those fields.\n\n89\n00:04:40.020 --> 00:04:42.470\nNow, you're probably saying, well,\nwhere do I come up with that information?\n\n90\n00:04:42.470 --> 00:04:45.240\nWell, it's during that\nplanning of the database\n\n91\n00:04:45.240 --> 00:04:48.555\nthat you come up with all that\ninformation as well, okay?\n\n92\n00:04:48.555 --> 00:04:52.773\nAnd allows you to be able to create those\nthings in the manner that you need to.\n\n93\n00:04:52.773 --> 00:04:56.171\nAnd then it becomes a complete database\nonce you understand how to connect those\n\n94\n00:04:56.171 --> 00:04:57.410\ntables together.\n\n95\n00:04:57.410 --> 00:04:59.136\nBut right now let say that fundamentally,\n\n96\n00:04:59.136 --> 00:05:02.520\nwe're gonna start off with this idea\nof actually creating these tables\n\n97\n00:05:02.520 --> 00:05:06.620\nhere manually by not using\nwhat's built in to the system.\n\n98\n00:05:06.620 --> 00:05:10.075\nBecause that's actually the easy way and,\neven though the easy way works,\n\n99\n00:05:10.075 --> 00:05:13.740\nMicrosoft says,\nnot using those built in tools, okay?\n\n100\n00:05:13.740 --> 00:05:18.530\nSo there's two ways that we can create\ntables inside of SQL Server 2012, 2014,\n\n101\n00:05:18.530 --> 00:05:24.660\nwhichever version you're using there,\nthat will actually help you to do this.\n\n102\n00:05:24.660 --> 00:05:27.664\nNow, you might be wondering, well,\nwhat's the big difference between the two?\n\n103\n00:05:27.664 --> 00:05:28.370\nWe're gonna, of course,\n\n104\n00:05:28.370 --> 00:05:31.630\nshow you the big difference\nbetween those two as well, okay?\n\n105\n00:05:31.630 --> 00:05:33.535\nSo let's go ahead and take a look here.\n\n106\n00:05:33.535 --> 00:05:38.046\nOver on the right hand side\ninside of my text editor here for\n\n107\n00:05:38.046 --> 00:05:40.360\nthe querying window, okay?\n\n108\n00:05:40.360 --> 00:05:45.940\nI went ahead and we are going to use\nthat AdventureWorks2012 database.\n\n109\n00:05:45.940 --> 00:05:49.750\nDuring our query episodes,\nwhen we took a look, the majority of\n\n110\n00:05:49.750 --> 00:05:53.330\neverything that we did, and I mean\nthe majority of it, not all the time, but\n\n111\n00:05:53.330 --> 00:05:57.470\nI really was using the AdventureWorks2014\nto just query data out of.\n\n112\n00:05:57.470 --> 00:06:01.269\nAnd I said that what I would do during\nthis series, is if I'm gonna make changes\n\n113\n00:06:01.269 --> 00:06:04.166\nto the database itself,\nI'm gonna do it in this 2012.\n\n114\n00:06:04.166 --> 00:06:08.520\nThat way if I happen to run another\nquery in 2014 it doesn't mess it up.\n\n115\n00:06:08.520 --> 00:06:11.250\nSo here it is,\nthis is gonna be my database here for\n\n116\n00:06:11.250 --> 00:06:13.790\npracticing these queries\nthat will help me.\n\n117\n00:06:13.790 --> 00:06:14.700\nI shouldn't say queries,\n\n118\n00:06:14.700 --> 00:06:19.200\nthese statements that will help me to\ncreate more objects inside of my database.\n\n119\n00:06:19.200 --> 00:06:23.897\nSo the first thing I'm gonna do is I'm\ngonna to create a table using the command\n\n120\n00:06:23.897 --> 00:06:26.850\ncalled CREATE space TABLE here, okay?\n\n121\n00:06:26.850 --> 00:06:30.790\nSo when we actually start to do this,\none of the most important things that\n\n122\n00:06:30.790 --> 00:06:35.830\nyou want to do, is you wanna make\nsure that you name your table.\n\n123\n00:06:35.830 --> 00:06:39.960\nNow, you do not always have to name it\nexactly in the way that I do right here,\n\n124\n00:06:39.960 --> 00:06:42.980\nwhich is with this prefix.\n\n125\n00:06:42.980 --> 00:06:45.370\nBut normally we're running\nwhat we call this prefix,\n\n126\n00:06:45.370 --> 00:06:47.960\nthis is what we call the schema, okay?\n\n127\n00:06:47.960 --> 00:06:49.690\nSo when you start doing\nsomething like that,\n\n128\n00:06:49.690 --> 00:06:53.120\nthat's what it's called, is that first\npart is what's called the schema.\n\n129\n00:06:53.120 --> 00:06:57.300\nThe schema helps us to be able\nto group tables together, but\n\n130\n00:06:57.300 --> 00:06:59.990\nwithout actually calling on\nthe individual table so far.\n\n131\n00:06:59.990 --> 00:07:04.910\nSo let me show you over here in my Object\nExplorer what I am talking about, okay?\n\n132\n00:07:04.910 --> 00:07:07.660\nSo dbo is just a prefix here for\n\n133\n00:07:07.660 --> 00:07:10.880\ndatabase object and\nI'm just saying I'm creating a new object.\n\n134\n00:07:10.880 --> 00:07:15.890\nBut notice that down here inside of\nthe AdventureWorks2012 database, they went\n\n135\n00:07:15.890 --> 00:07:20.760\nahead and all these actually begin\nwith a schema name of HumanResources.\n\n136\n00:07:20.760 --> 00:07:24.198\nHumanResources, HumanResources,\nHumanResources, HumanResources, and\n\n137\n00:07:24.198 --> 00:07:25.660\nyou start seeing that.\n\n138\n00:07:25.660 --> 00:07:29.530\nI continue to scroll down, and\nnotice then it goes to Person.\n\n139\n00:07:29.530 --> 00:07:33.848\nWell, that essentially is grouping what,\nall of these together by saying look,\n\n140\n00:07:33.848 --> 00:07:37.740\nwe're actually looking at this\nHumanResources and Employee.\n\n141\n00:07:37.740 --> 00:07:41.660\nWhat we might find out is that\nsomewhere else inside of my database,\n\n142\n00:07:41.660 --> 00:07:45.300\nI may choose to actually create\nanother name that's the same, okay?\n\n143\n00:07:45.300 --> 00:07:47.250\nSuch as Employee table here, okay?\n\n144\n00:07:47.250 --> 00:07:49.837\nAnd I might not have it\nunder HumanResources, but\n\n145\n00:07:49.837 --> 00:07:52.125\nI might have it under\na department instead.\n\n146\n00:07:52.125 --> 00:07:55.314\nI might say department and\nthen employees if I wanted to,\n\n147\n00:07:55.314 --> 00:07:57.581\nand actually manage it that way as well.\n\n148\n00:07:57.581 --> 00:08:03.189\nSo it allows me to be able to reuse\ntable names here If I really want to.\n\n149\n00:08:03.189 --> 00:08:06.589\nAnd then have this as kinda\nbeing that hierarchical names,\n\n150\n00:08:06.589 --> 00:08:10.397\njust like in the same way that you and\nI might use DNS names, right?\n\n151\n00:08:10.397 --> 00:08:13.988\nSo, you can think about like the human\nresource, even though technically,\n\n152\n00:08:13.988 --> 00:08:17.429\nit's called the schema name,\nas being sort of like a domain name, okay?\n\n153\n00:08:17.429 --> 00:08:20.004\nBut it's actually just\ncompartmentalizing or\n\n154\n00:08:20.004 --> 00:08:22.880\npartitioning our database in that sense.\n\n155\n00:08:22.880 --> 00:08:25.500\nAnd then we can take these names and\nwe can reuse them.\n\n156\n00:08:25.500 --> 00:08:30.187\nThe second portion of the name right here,\nthe key thing is to remember\n\n157\n00:08:30.187 --> 00:08:34.487\nthat when we do this,\nit should not begin with a numeral, okay?\n\n158\n00:08:34.487 --> 00:08:38.020\nIs what we also want to be able to do.\n\n159\n00:08:38.020 --> 00:08:42.289\nNow way back in the past, but back when\nI first started dealing with databases.\n\n160\n00:08:43.410 --> 00:08:45.920\nUsed to always actually\nput a tab here instead.\n\n161\n00:08:45.920 --> 00:08:46.790\nSo it's a.\n\n162\n00:08:46.790 --> 00:08:50.860\nSo like if I was creating a table,\nyou type in TBL, short for table.\n\n163\n00:08:50.860 --> 00:08:54.175\nAnd then you're creating a view,\nyou'd actually type in like V, I, E or\n\n164\n00:08:54.175 --> 00:08:56.754\nsomething like that or V, W,\nto do something like that.\n\n165\n00:08:56.754 --> 00:09:02.280\nBut today, in SQL Server 2014, they\nstill recommend you do the schema name.\n\n166\n00:09:02.280 --> 00:09:04.890\nI just followed what was\nactually conventional here too.\n\n167\n00:09:04.890 --> 00:09:05.470\nOkay?\n\n168\n00:09:05.470 --> 00:09:09.150\nSo, you wanna make sure that she begins\nwith some type of alpha numeric character.\n\n169\n00:09:09.150 --> 00:09:14.828\nThe other that you should not have in\na table name is spaces either, okay?\n\n170\n00:09:14.828 --> 00:09:19.673\nSo, you should not have a space it should\nnot have a number as a beginning so,\n\n171\n00:09:19.673 --> 00:09:22.800\nyou don't wanna see anything like this,\nokay?\n\n172\n00:09:22.800 --> 00:09:25.590\nIf you go I need to see that\nspace the recommendation and\n\n173\n00:09:25.590 --> 00:09:28.090\nthe standard has always been instead.\n\n174\n00:09:28.090 --> 00:09:31.159\nTo make sure that you actually use,\ninstead,\n\n175\n00:09:31.159 --> 00:09:35.804\nthis idea of the underscore that helps\nto display that space if you need\n\n176\n00:09:35.804 --> 00:09:39.129\nthat to be something like\nthis if you want it to be.\n\n177\n00:09:39.129 --> 00:09:44.990\nSo you don't like seeing the crunched\nup name, I don't mind it myself.\n\n178\n00:09:44.990 --> 00:09:48.530\nBut if you don't like seeing that,\nwell that's what you want to do, okay?\n\n179\n00:09:48.530 --> 00:09:52.740\nThe other things that you also\nwant to consider then is,\n\n180\n00:09:52.740 --> 00:09:55.890\nwhat are the columns that\nare gonna be in this table?\n\n181\n00:09:55.890 --> 00:09:59.940\nNow, this is where it goes back to\nrelational database designing again,\n\n182\n00:09:59.940 --> 00:10:02.260\nis talking about how big\nthis table should be.\n\n183\n00:10:02.260 --> 00:10:04.020\nAnything that we list under here,\n\n184\n00:10:04.020 --> 00:10:07.810\nthey're essentially gonna be\nlisted as column names, okay?\n\n185\n00:10:07.810 --> 00:10:12.250\nSo when you start dealing with this,\nwe talk about the atomization of tables.\n\n186\n00:10:12.250 --> 00:10:16.930\nAnd that means you only want it to\nhold data that's actually related\n\n187\n00:10:16.930 --> 00:10:20.070\nto something like this,\nwhatever your new employee is.\n\n188\n00:10:20.070 --> 00:10:23.455\nIf its departments, its only data\nthat's related to departments\n\n189\n00:10:23.455 --> 00:10:26.002\nthat you would essentially\nend up searching for.\n\n190\n00:10:26.002 --> 00:10:27.680\nSo when you start doing that, right?\n\n191\n00:10:27.680 --> 00:10:32.080\nThere's a logical grouping of\nthe information that you find within this\n\n192\n00:10:32.080 --> 00:10:33.490\ntable, okay?\n\n193\n00:10:33.490 --> 00:10:36.553\nSo then of course that means\neach of these column names,\n\n194\n00:10:36.553 --> 00:10:38.713\nit follows that same standard as well.\n\n195\n00:10:38.713 --> 00:10:42.321\nYou wanna make sure it begins with some\ntype of alphabetical character and\n\n196\n00:10:42.321 --> 00:10:43.374\nnot a number, okay?\n\n197\n00:10:43.374 --> 00:10:47.964\nAnd also the recommendation here\nis to make sure you do not have\n\n198\n00:10:47.964 --> 00:10:51.155\nspaces in these names as well, okay?\n\n199\n00:10:51.155 --> 00:10:55.530\n>> Ronny, you've been mentioned throughout\nthis series that planning, planning,\n\n200\n00:10:55.530 --> 00:10:56.190\npreparation.\n\n201\n00:10:56.190 --> 00:10:58.824\nSo now I'm gonna play\ndevil's advocate here.\n\n202\n00:10:58.824 --> 00:11:02.432\nIs there a potential that if you don't do\nyour planning that you can end up storing\n\n203\n00:11:02.432 --> 00:11:04.250\nthat information more than you need to.\n\n204\n00:11:04.250 --> 00:11:05.760\nAnd clearing up your data with,\n\n205\n00:11:05.760 --> 00:11:07.890\nwe really could have just\nstored that information once.\n\n206\n00:11:07.890 --> 00:11:08.460\n>> Correct.\n\n207\n00:11:08.460 --> 00:11:11.230\nWithout the idea of actually\nunderstanding the underlying\n\n208\n00:11:11.230 --> 00:11:15.730\nplan of your database design,\nthen you're creating a random tables.\n\n209\n00:11:15.730 --> 00:11:19.980\nWhat you might end up doing is you\nre-duplicate these data in our places.\n\n210\n00:11:19.980 --> 00:11:21.908\nAnd now when you go to do a querying,\n\n211\n00:11:21.908 --> 00:11:26.150\nyou're not exactly sure where that\ndata is actually going to come from.\n\n212\n00:11:26.150 --> 00:11:30.720\nThe whole goal behind relational database\ndesign is to ensure that the data is\n\n213\n00:11:30.720 --> 00:11:35.340\nstored one time and one time only,\nand not stored in multiple places.\n\n214\n00:11:35.340 --> 00:11:37.750\nNow, are there new database\ndesigns that says, yes,\n\n215\n00:11:37.750 --> 00:11:38.870\nstore the data in multiple places?\n\n216\n00:11:38.870 --> 00:11:40.460\nYou better believe it, okay?\n\n217\n00:11:40.460 --> 00:11:44.850\nBut in our sense here and what we actually\nare doing in terms of databases and\n\n218\n00:11:44.850 --> 00:11:47.530\ntables here, is that's what\nwe're actually trying to do.\n\n219\n00:11:47.530 --> 00:11:52.005\nWe're trying to follow that relational\ndatabase design instead, okay?\n\n220\n00:11:52.005 --> 00:11:57.390\nSo now that we have our basic\nbest practice here, okay?\n\n221\n00:11:57.390 --> 00:12:00.452\nOnce we actually do that we're\ngonna use this Create Table, and\n\n222\n00:12:00.452 --> 00:12:04.095\nwhat essentially are we doing here when\nwe start doing this for each column?\n\n223\n00:12:04.095 --> 00:12:08.077\nWhat we are defining the columns\nby giving it a unique name.\n\n224\n00:12:08.077 --> 00:12:13.100\nNow this is where I kind of violate\nthe rules just a bit here, okay?\n\n225\n00:12:13.100 --> 00:12:20.030\nTable names, and of course, column names\nshould be as descriptive as possible.\n\n226\n00:12:20.030 --> 00:12:22.240\nBut at the same time, not super long.\n\n227\n00:12:22.240 --> 00:12:24.670\nSo like BusinessEntityID.\n\n228\n00:12:24.670 --> 00:12:27.340\nThere's no real limitation,\nbut they're saying,\n\n229\n00:12:27.340 --> 00:12:31.130\nif you're gonna be doing querying,\nyou really don't want it to be this long.\n\n230\n00:12:31.130 --> 00:12:34.910\nBut if you shorten it up too much,\nlet me show you an example.\n\n231\n00:12:34.910 --> 00:12:40.550\nSo if I do this, somebody might be\nwondering what in the world is Bus Entity?\n\n232\n00:12:40.550 --> 00:12:46.310\nThat really means nothing to us,\nso maybe that's not the way to go.\n\n233\n00:12:46.310 --> 00:12:50.240\nSo you want to be as descriptive as\npossible, but as short as you can.\n\n234\n00:12:50.240 --> 00:12:54.850\nUsing abbreviations will work if\nit's a standardized abbreviation.\n\n235\n00:12:54.850 --> 00:12:57.660\nBut they don't recommend that you\nuse an abbreviation that only\n\n236\n00:12:57.660 --> 00:13:01.130\nyou understand because it\ncould be multiple database.\n\n237\n00:13:02.200 --> 00:13:06.610\nOr a report writers or even admins are\ngonna combine in one or the same thing.\n\n238\n00:13:06.610 --> 00:13:09.370\nLike I said if I wanted to\nshorted that up to the bus and\n\n239\n00:13:09.370 --> 00:13:13.640\nto the ID, you might of wondered am I\nactually referring to an electrical bus?\n\n240\n00:13:13.640 --> 00:13:14.950\nAm I referring to a real bus?\n\n241\n00:13:14.950 --> 00:13:16.480\nWhat are we talking about.\n\n242\n00:13:16.480 --> 00:13:19.320\nSo that's why they recommend\nthe shortest possible, but\n\n243\n00:13:19.320 --> 00:13:21.050\nas descriptive as possible as well.\n\n244\n00:13:21.050 --> 00:13:24.180\n>> That was the first thing that came to\nmy mind when you said bus identity ID.\n\n245\n00:13:24.180 --> 00:13:26.480\nI'm thinking gosh,\nhere we go back to the IRQs.\n\n246\n00:13:26.480 --> 00:13:28.970\n>> Yes.\n>> So, consistency.\n\n247\n00:13:28.970 --> 00:13:34.420\nIn your naming convention and something\nthat's easily identifiable makes for\n\n248\n00:13:34.420 --> 00:13:37.420\nmaybe if you have more than\none database DBA on this.\n\n249\n00:13:37.420 --> 00:13:39.510\nThey'll understand what's\ngoing on in the table.\n\n250\n00:13:39.510 --> 00:13:41.927\n>> Yep, and so\nwe wanna make sure that that's done.\n\n251\n00:13:41.927 --> 00:13:43.364\nNow the rest of this.\n\n252\n00:13:43.364 --> 00:13:45.240\nThere's a couple of other things\nwe also need to point out.\n\n253\n00:13:45.240 --> 00:13:48.117\nSo let's go back here to the screen\nto help us out a little bit more.\n\n254\n00:13:48.117 --> 00:13:50.658\nSo not only do we name on the column, but\n\n255\n00:13:50.658 --> 00:13:56.770\nwe of course also need to declare a data\ntype for that particular column as well.\n\n256\n00:13:56.770 --> 00:14:00.180\nSo along with that data type,\nand then we'll decide whether or\n\n257\n00:14:00.180 --> 00:14:03.450\nnot that data type is\nallowed null vales or not.\n\n258\n00:14:03.450 --> 00:14:07.750\nNow remember that the idea of\nallowing nulls means it can be empty\n\n259\n00:14:07.750 --> 00:14:09.950\nwhen we actually first start this.\n\n260\n00:14:09.950 --> 00:14:12.040\nOr when we start data entry, I should say.\n\n261\n00:14:12.040 --> 00:14:14.960\nOkay, in other words, we could skip\nover that field if we don't have it.\n\n262\n00:14:14.960 --> 00:14:19.895\nBut if we choose not null, we're saying,\nit is a required field that\n\n263\n00:14:19.895 --> 00:14:24.164\nhas to be filled in when it comes time for\ndata entry, okay?\n\n264\n00:14:24.164 --> 00:14:28.099\nSo the majority of this, but\nnotice phone number here is not required.\n\n265\n00:14:28.099 --> 00:14:32.000\nMost times you may see that people\ndon't have a phone number as well.\n\n266\n00:14:32.000 --> 00:14:34.910\nAnd so you might see some of these that\nactually like that's the only one that I\n\n267\n00:14:34.910 --> 00:14:37.220\nhave and that's not considered null.\n\n268\n00:14:37.220 --> 00:14:42.149\nThe rest of this stuff I want to do that\nand now you also start seeing right here\n\n269\n00:14:42.149 --> 00:14:47.022\nthe string characters that we can actually\ndo and the sizes of them as well.\n\n270\n00:14:47.022 --> 00:14:49.250\nWe also are gonna see that too.\n\n271\n00:14:49.250 --> 00:14:52.970\nSo, once I have that down, okay?\n\n272\n00:14:52.970 --> 00:14:58.520\nThen I have a set of parenthesis here,\nthat I'm gonna encase that in.\n\n273\n00:14:58.520 --> 00:15:01.070\nSo, it's create the table, and then,\n\n274\n00:15:01.070 --> 00:15:05.590\ninside of those parenthesis are all of the\ncolumns that I'm gonna end up creating.\n\n275\n00:15:05.590 --> 00:15:07.090\nAnd I end it with a semicolon,\n\n276\n00:15:07.090 --> 00:15:12.220\nto end my batch and then I can select\nthe whole thing, then I can run it.\n\n277\n00:15:12.220 --> 00:15:15.240\nNow when I do this right here,\nremember what it's gonna do, it's gonna\n\n278\n00:15:15.240 --> 00:15:20.390\ncreate a table with all of these fields\nin it, but the table is gonna be empty.\n\n279\n00:15:20.390 --> 00:15:21.390\nBut the good thing is,\n\n280\n00:15:21.390 --> 00:15:24.890\nI've already predefined the fields\nin the way that I want to.\n\n281\n00:15:24.890 --> 00:15:29.120\nI can verify that, I actually said\nwhether or not this field can be empty or\n\n282\n00:15:29.120 --> 00:15:30.510\nwhether or not it can't.\n\n283\n00:15:30.510 --> 00:15:33.500\nI've actually named the actual table,\nor the column,\n\n284\n00:15:33.500 --> 00:15:36.210\nexcuse me, the way that I want to as well.\n\n285\n00:15:36.210 --> 00:15:38.735\nThe other nice thing about\nyou doing it this way,\n\n286\n00:15:38.735 --> 00:15:41.515\neven though it's kind of\na more of a two step process.\n\n287\n00:15:41.515 --> 00:15:45.446\nIs that you can, actually, define these\nnames to look the way that you want,\n\n288\n00:15:45.446 --> 00:15:47.697\ninstead of relying on\nother people to do so.\n\n289\n00:15:47.697 --> 00:15:51.015\nSo, let me go ahead and\nexecute this, and when I do that,\n\n290\n00:15:51.015 --> 00:15:55.046\nit should go ahead and add itself\ninto the AdventureWorks database.\n\n291\n00:15:55.046 --> 00:16:00.389\nAnd I don't have any table, over here,\nthat is ID, new employee one So\n\n292\n00:16:00.389 --> 00:16:06.268\nnow if I right-click on Tables and\nrefresh, and that's kind of the key here,\n\n293\n00:16:06.268 --> 00:16:11.780\nis now I will have the New Employees\ntable, or the New Employee table 1.\n\n294\n00:16:11.780 --> 00:16:16.240\nAnd then if I expand that out and\nalso the columns, there it is.\n\n295\n00:16:16.240 --> 00:16:21.160\nSo I should see an identical mark here,\nwhere we\n\n296\n00:16:21.160 --> 00:16:26.450\ncan see that it actually does match up to\nwhat's over here on the right hand side,\n\n297\n00:16:26.450 --> 00:16:29.470\nas well as on the left hand side,\nthese are all the fields.\n\n298\n00:16:29.470 --> 00:16:32.867\nSo here is the brand new\ntable that I created.\n\n299\n00:16:32.867 --> 00:16:36.555\nSo we can go ahead and do that and\nactually do this for every single table\n\n300\n00:16:36.555 --> 00:16:40.510\nbut remember where it really begins\nis all of my data based design.\n\n301\n00:16:40.510 --> 00:16:45.480\nSo I could create 10, 15, 20, 30 tables\nexactly like this, and still have\n\n302\n00:16:45.480 --> 00:16:50.330\nto actually link them up together,\nto make them into a relational database.\n\n303\n00:16:50.330 --> 00:16:53.170\nBut it begins just like this here.\n\n304\n00:16:53.170 --> 00:16:55.780\nSo the problem, like I said,\nthe only problem at this point,\n\n305\n00:16:55.780 --> 00:16:58.350\nthat I would have, is simple.\n\n306\n00:16:58.350 --> 00:17:03.413\nIs, if I do a select statement for\neverything,\n\n307\n00:17:03.413 --> 00:17:09.364\nFrom dbo.NewEmployee1 and\nI select that statement,\n\n308\n00:17:09.364 --> 00:17:13.750\nthen I can press my F5 key and I run that.\n\n309\n00:17:13.750 --> 00:17:18.253\nWell, now, I can take a look and\n\n310\n00:17:18.253 --> 00:17:22.680\nno data is actually entered into\nthat particular table, okay?\n\n311\n00:17:22.680 --> 00:17:25.770\nSo we can do something just\nlike that very easily.\n\n312\n00:17:25.770 --> 00:17:29.720\nNow is the time, then, for\ndata entry to occur if we choose to.\n\n313\n00:17:29.720 --> 00:17:31.990\nBut a lot of times we're\nalready finishing up and\n\n314\n00:17:31.990 --> 00:17:34.990\ncreating all those tables,\nthen we actually link everything together\n\n315\n00:17:34.990 --> 00:17:37.800\nto make sure our database starts\nto have information in it.\n\n316\n00:17:37.800 --> 00:17:40.791\n>> Now Ronnie, what if you have\nexisting information and you decide,\n\n317\n00:17:40.791 --> 00:17:43.781\nI wanna take that existing information,\nand I want to pull it out and\n\n318\n00:17:43.781 --> 00:17:46.996\nI wanna make a table out of information\nthat's already in the database.\n\n319\n00:17:46.996 --> 00:17:48.120\nCan you do something like that?\n\n320\n00:17:48.120 --> 00:17:49.030\n>> You really can.\n\n321\n00:17:49.030 --> 00:17:50.980\nSo, what you can also do, of course,\n\n322\n00:17:50.980 --> 00:17:56.370\nis then create a new table that also\npopulates it with data at the same time.\n\n323\n00:17:56.370 --> 00:18:00.810\nNow, you're probably wondering, well heck,\nthat's absolutely the way to go, right?\n\n324\n00:18:00.810 --> 00:18:04.440\nIf I know that the data exists somewhere,\nwhy not go ahead and\n\n325\n00:18:04.440 --> 00:18:07.080\ncreate a new table and\nhave it populate at the same time?\n\n326\n00:18:07.080 --> 00:18:10.748\nWell, you're right, that might be\nabsolutely the best way to go.\n\n327\n00:18:10.748 --> 00:18:14.810\nBut when you do something like that,\nremember what you don't get to decide.\n\n328\n00:18:14.810 --> 00:18:17.060\nYou normally don't get to decide,\nessentially,\n\n329\n00:18:17.060 --> 00:18:22.210\nwhat the column names are gonna be,\nif you want those column names.\n\n330\n00:18:22.210 --> 00:18:26.839\nYou don't get to decide on things like the\ndata type, if you wanted to change that,\n\n331\n00:18:26.839 --> 00:18:28.774\nor whether it's null or not null.\n\n332\n00:18:28.774 --> 00:18:31.755\nYou essentially are accepting\nwhatever is there, and\n\n333\n00:18:31.755 --> 00:18:35.449\nyou're creating a replica of that\nparticular database table, and\n\n334\n00:18:35.449 --> 00:18:39.420\nthen you're actually bringing\nthat into your results instead.\n\n335\n00:18:39.420 --> 00:18:41.090\nSo I do have an example of that.\n\n336\n00:18:41.090 --> 00:18:46.630\nIf I can actually zoom out here, and\nscroll down a little bit more, okay?\n\n337\n00:18:46.630 --> 00:18:51.180\nSo instead of actually using the new\ntable, instead, what you and\n\n338\n00:18:51.180 --> 00:18:58.360\nI can use is what we call, of course,\nthe SELECT INTO, okay, statement instead.\n\n339\n00:18:58.360 --> 00:19:04.120\nNow, notice that I have a SELECT\nstatement and then also an INTO.\n\n340\n00:19:04.120 --> 00:19:09.040\nAnd look at the order that it appears in,\nwhich is directly ahead of FROM, okay?\n\n341\n00:19:09.040 --> 00:19:13.508\nSo, here I'm actually gonna\ncreate a brand new table called\n\n342\n00:19:13.508 --> 00:19:19.085\nEmployeeInfo1 dbo.EmployeeInfo1.\n\n343\n00:19:19.085 --> 00:19:23.926\nAnd so if I do this, okay,\nI can create a brand new table.\n\n344\n00:19:23.926 --> 00:19:28.230\nSo I'm gonna select all of\nthis information right here\n\n345\n00:19:28.230 --> 00:19:32.150\nthat I want to be in\nthis EmployeeInfo1 and\n\n346\n00:19:32.150 --> 00:19:36.500\nthen, I can tell it where I want it\nto actually pull information from.\n\n347\n00:19:36.500 --> 00:19:40.820\nNow in this sense,\nwhat I'm doing is actually from\n\n348\n00:19:40.820 --> 00:19:45.730\na join of five different tables\nwhich is what it looks like joined.\n\n349\n00:19:45.730 --> 00:19:51.540\nYep, five different tables that I have the\ninformation pulling from into one table.\n\n350\n00:19:51.540 --> 00:19:53.790\nAnd I can do that, if I choose to.\n\n351\n00:19:53.790 --> 00:19:56.070\nI can also do it if it's\nactually from an existing table,\n\n352\n00:19:56.070 --> 00:19:58.660\nif I wanted to carry that\ninformation over as well.\n\n353\n00:19:58.660 --> 00:20:02.104\nBut in this sense here, I'm creating\na brand new table in which all\n\n354\n00:20:02.104 --> 00:20:06.596\nthat information's actually distributed\nacross these four or five different tables\n\n355\n00:20:06.596 --> 00:20:09.940\nhere and that I actually want\nto be able to pull it together.\n\n356\n00:20:09.940 --> 00:20:13.610\nSo notice I don't have to\nactually pull from just existing,\n\n357\n00:20:13.610 --> 00:20:17.070\nI can actually query that information and\n\n358\n00:20:17.070 --> 00:20:23.560\nthen have it insert into\nthat new table instead.\n\n359\n00:20:23.560 --> 00:20:27.910\nSo now look at what's happening,\nis I'm actually creating a table and\n\n360\n00:20:27.910 --> 00:20:32.640\nthen populating it with\nselected data from a query.\n\n361\n00:20:32.640 --> 00:20:35.970\nSo that's actually even more impressive,\nif you think about it.\n\n362\n00:20:35.970 --> 00:20:40.641\nBut remember that once you do this, you do\nnot have the ability to select as far as\n\n363\n00:20:40.641 --> 00:20:45.557\nthe data type goes, or the character link,\nor even whether it's null or not null.\n\n364\n00:20:45.557 --> 00:20:47.960\nYou'll accept it as it really is.\n\n365\n00:20:47.960 --> 00:20:49.192\n>> Now, how about this, Ronnie?\n\n366\n00:20:49.192 --> 00:20:52.791\nWhat if let's say, a boss comes to you and\nsays, you know what,\n\n367\n00:20:52.791 --> 00:20:55.670\nwe now want to add something\nto one of these tables.\n\n368\n00:20:55.670 --> 00:20:59.792\nWe've got an additional bit of criteria\nthat we need, maybe we've got a date that\n\n369\n00:20:59.792 --> 00:21:03.095\nthey were offboarded, if you will,\nthey've left the company.\n\n370\n00:21:03.095 --> 00:21:04.955\nWe didn't have that in\nthe table originally,\n\n371\n00:21:04.955 --> 00:21:08.425\nis there a way we can take an existing\ntable and make modifications to it?\n\n372\n00:21:08.425 --> 00:21:11.401\n>> Well, there is, and\nwhat we have to do first, of course,\n\n373\n00:21:11.401 --> 00:21:15.190\nthen is actually take a look here\nat what has to happen ,okay?\n\n374\n00:21:15.190 --> 00:21:19.150\nSo let me run this one first and\nlet's see the result of this,\n\n375\n00:21:19.150 --> 00:21:23.950\nwhich should create a new table\nright here inside of that object.\n\n376\n00:21:23.950 --> 00:21:25.530\nI'm gonna refresh this.\n\n377\n00:21:25.530 --> 00:21:29.972\nAnd now I should see,\nwhere I have dbo.EmployeeInfo1, and\n\n378\n00:21:29.972 --> 00:21:32.620\nI expand that one out and take a look,\n\n379\n00:21:32.620 --> 00:21:37.844\nthere's actually the new columns that\nI have ready and available to go.\n\n380\n00:21:37.844 --> 00:21:39.860\nSo that's exactly what I just queried.\n\n381\n00:21:39.860 --> 00:21:41.980\nNow, let's take a look at that query.\n\n382\n00:21:41.980 --> 00:21:46.780\nAnd then we'll take a look at what Wes is\nactually asking us here about as well.\n\n383\n00:21:46.780 --> 00:21:54.710\nOkay, so now if I query this new one,\nright here and I execute it.\n\n384\n00:21:55.940 --> 00:21:57.990\nOops, hold on,\nI may have actually typed it in wrong.\n\n385\n00:21:59.280 --> 00:21:59.795\nThat's why.\n\n386\n00:21:59.795 --> 00:22:02.817\nCuz I actually didn't have new,\nactually EmployeeInfo.\n\n387\n00:22:02.817 --> 00:22:05.640\nSo I typed in the wrong name there.\n\n388\n00:22:06.980 --> 00:22:08.800\nNow it's executed successfully.\n\n389\n00:22:10.910 --> 00:22:15.760\nNow when we take a look, notice that\nthat brand new table here has all of\n\n390\n00:22:15.760 --> 00:22:18.730\nthis information added into it already.\n\n391\n00:22:18.730 --> 00:22:23.650\nSo, brand new table populated with\ninformation, that we have on hand, and\n\n392\n00:22:23.650 --> 00:22:24.930\nalso ready to go.\n\n393\n00:22:24.930 --> 00:22:27.630\nNow, what Wes is asking about here is,\n\n394\n00:22:27.630 --> 00:22:31.580\nnow that we have a table that has\nsome information as well in it,\n\n395\n00:22:31.580 --> 00:22:36.610\nokay, what if we also wanted to go\nahead and add in columns as well?\n\n396\n00:22:36.610 --> 00:22:37.280\nOkay?\n\n397\n00:22:37.280 --> 00:22:39.760\nWell, let's go ahead and\ndo this without data.\n\n398\n00:22:39.760 --> 00:22:41.670\nCuz sometimes when there's\ndata in it already,\n\n399\n00:22:41.670 --> 00:22:45.180\nit becomes a little bit harder\nto actually mess around with\n\n400\n00:22:45.180 --> 00:22:47.870\nbecause it's actually saying,\nwe don't have any data progress with.\n\n401\n00:22:47.870 --> 00:22:52.347\nSo, let's go ahead and create a brand new\ntable and we'll call this one Employee2.\n\n402\n00:22:52.347 --> 00:22:55.320\nIt's essentially the same table\nas Employee1 that we created\n\n403\n00:22:55.320 --> 00:22:58.300\ndefining all of the database and\nthe definition here.\n\n404\n00:23:00.680 --> 00:23:05.843\nAnd good thing is we know that there's no\ndata in it at all and I can verify that.\n\n405\n00:23:05.843 --> 00:23:08.900\nMake sure I do that.\n\n406\n00:23:08.900 --> 00:23:12.805\nAnd now, let's say that we wanted\nto add in those two new columns.\n\n407\n00:23:12.805 --> 00:23:17.128\nLet's say that we forgot and now somebody\ncomes back in and says look, you actually\n\n408\n00:23:17.128 --> 00:23:21.137\ndid create a nice table for us, and\nas I take a look at the information, okay,\n\n409\n00:23:21.137 --> 00:23:23.575\nit has just about everything\nthat I want in it.\n\n410\n00:23:23.575 --> 00:23:28.698\nBut I wanted a middle initial to actually\nbe here, and then I also wanted an email\n\n411\n00:23:28.698 --> 00:23:34.790\naddress to also be listed here as well,\nbut you don't have that in this new table.\n\n412\n00:23:34.790 --> 00:23:37.520\nWell, the good thing is we\ncan go back in and modify.\n\n413\n00:23:37.520 --> 00:23:42.390\nNow, we saw earlier that there are some\nthings that we can't modify, right?\n\n414\n00:23:42.390 --> 00:23:46.110\nSo in other words, there are some things\nwhere we have to drop the entire table and\n\n415\n00:23:46.110 --> 00:23:51.350\nthen we actually recreate that thing and\nactually go ahead and do that again.\n\n416\n00:23:51.350 --> 00:23:53.813\nSo things like synonyms we can't do that,\nokay.\n\n417\n00:23:53.813 --> 00:23:57.087\nBut here, we can go ahead and do this.\n\n418\n00:23:57.087 --> 00:24:02.330\nNow, when we start talking about\nadding in information, here's the two.\n\n419\n00:24:02.330 --> 00:24:05.900\nOop, let me see if I can get back in here,\nokay.\n\n420\n00:24:05.900 --> 00:24:08.100\nHere's what we'll actually end up doing.\n\n421\n00:24:08.100 --> 00:24:11.360\nNow instead,\nwe can alter that particular table,\n\n422\n00:24:11.360 --> 00:24:15.505\nokay, by using the ALTER TABLE\ncommand instead, okay.\n\n423\n00:24:15.505 --> 00:24:21.162\nWith the ALTER TABLE command,\nI tell it that hey,\n\n424\n00:24:21.162 --> 00:24:26.157\nI'm going to alter, well maybe, why not.\n\n425\n00:24:26.157 --> 00:24:29.630\n[LAUGH] Why do it\nthe actual right way okay?\n\n426\n00:24:29.630 --> 00:24:34.623\nWith the ALTER TABLE command I'm gonna\nalter this table and I'm simply gonna add\n\n427\n00:24:34.623 --> 00:24:38.968\na new column called MiddleInitial,\nhopefully I spelled that right.\n\n428\n00:24:38.968 --> 00:24:42.268\nAnd I'm gonna declare this, all right,\n\n429\n00:24:42.268 --> 00:24:46.020\nlet me see if I can do this\nwithout wrecking the whole thing.\n\n430\n00:24:46.020 --> 00:24:47.016\nThere we go.\n\n431\n00:24:47.016 --> 00:24:52.210\nAnd then I'm gonna add in this data\ntype here with three characters and\n\n432\n00:24:52.210 --> 00:24:55.260\nI'm gonna say that this one\ncan actually be a null value.\n\n433\n00:24:55.260 --> 00:25:02.470\nDon't get me wrong, if I actually make\nit as a, I can't say it, a not null.\n\n434\n00:25:02.470 --> 00:25:03.850\nWill it work, yes.\n\n435\n00:25:03.850 --> 00:25:08.780\nBut it means I have to back in to fill in\nevery single one of those values right.\n\n436\n00:25:08.780 --> 00:25:11.720\nWhat if somebody doesn't\nhave a middle name okay?\n\n437\n00:25:11.720 --> 00:25:13.950\nSo, believe it or\nnot people don't have a middle name.\n\n438\n00:25:13.950 --> 00:25:19.355\nWhat about those that have three\nmiddle names, or three initials here?\n\n439\n00:25:19.355 --> 00:25:23.770\nWell I went ahead and added three so\nI can make sure that they do that okay.\n\n440\n00:25:23.770 --> 00:25:27.400\nSo we can actually do something\nlike this as well, okay.\n\n441\n00:25:27.400 --> 00:25:31.490\nThen I'm also gonna add in one for email\nand it's the same thing if you actually\n\n442\n00:25:31.490 --> 00:25:34.420\nnotice it, and\nthis one I also said could be null.\n\n443\n00:25:34.420 --> 00:25:38.490\nSo by using the ALTER TABLE command,\nwe can go ahead and do that.\n\n444\n00:25:38.490 --> 00:25:41.090\nSo notice down here at the bottom,\nhere is my result that I have,\n\n445\n00:25:41.090 --> 00:25:44.780\nand the last thing that I have in\nthat field is this current flag.\n\n446\n00:25:44.780 --> 00:25:49.771\nSo if I run this ALTER TABLE command,\nI'm gonna do one at a time.\n\n447\n00:25:53.517 --> 00:25:56.860\nAnd then add those two in there, okay?\n\n448\n00:25:56.860 --> 00:26:03.000\nNow, once I do that, I should be able to\nrun the verification and execution here.\n\n449\n00:26:04.610 --> 00:26:09.400\nOops, maybe not, let me do it that way,\nlet me add in the select statement,\n\n450\n00:26:09.400 --> 00:26:10.410\nthat would help.\n\n451\n00:26:10.410 --> 00:26:13.490\nAnd now if you take a look,\nat least I think you can see this.\n\n452\n00:26:14.940 --> 00:26:17.490\nIt actually added in at the end here.\n\n453\n00:26:17.490 --> 00:26:21.670\nSo notice that, there it is, it's now got\nthe MiddleInitial and also the Email.\n\n454\n00:26:21.670 --> 00:26:26.300\nNow, that location is not exactly\nwhere I would like it to be, okay, but\n\n455\n00:26:26.300 --> 00:26:28.100\nI can change that in my select statement.\n\n456\n00:26:28.100 --> 00:26:31.210\nSo it doesn't really matter where\nit's actually showing up right now.\n\n457\n00:26:31.210 --> 00:26:34.020\nIt's showing up in the order\nin which I added them in.\n\n458\n00:26:34.020 --> 00:26:37.660\nBut in the end here, when I do a select\nstatement I can actually always tell it to\n\n459\n00:26:37.660 --> 00:26:43.330\nshow up in between LastName and\nFirstName if I choose to make that do so.\n\n460\n00:26:43.330 --> 00:26:44.890\nSo by being able to do that,\n\n461\n00:26:44.890 --> 00:26:48.200\nnotice I can actually create\ntables that have no data in it.\n\n462\n00:26:48.200 --> 00:26:51.890\nI can create a table that also\nhas data where it populates and\n\n463\n00:26:51.890 --> 00:26:53.760\npopulates to the same time.\n\n464\n00:26:53.760 --> 00:26:56.560\nI can also take an existing table and\n\n465\n00:26:56.560 --> 00:26:59.770\nadd in additional columns\nif I need to as well.\n\n466\n00:26:59.770 --> 00:27:04.790\nThe key here is to be careful because when\nyou do have a table that has existing\n\n467\n00:27:04.790 --> 00:27:09.600\ndata, adding in an additional column or\nan additional two columns may end up\n\n468\n00:27:09.600 --> 00:27:13.600\nviolating what we call some different\nreferential integrity constraints here.\n\n469\n00:27:13.600 --> 00:27:15.460\nSo we do wanna be careful with that.\n\n470\n00:27:15.460 --> 00:27:20.410\nBut adding in to a table that's not yet\nconnected to my database, no big deal.\n\n471\n00:27:20.410 --> 00:27:24.500\nI can continue to modify that and\nalter that particular table as well.\n\n472\n00:27:26.330 --> 00:27:30.560\nNow, there's a couple of other commands\nwe also need to focus in on here at\n\n473\n00:27:30.560 --> 00:27:31.940\nthe M2, okay.\n\n474\n00:27:31.940 --> 00:27:36.290\nOne is, what if you actually have a table\nand now you want to get rid of it, okay?\n\n475\n00:27:36.290 --> 00:27:40.120\nWell, let me show you what you\ncan also can do here too, okay.\n\n476\n00:27:40.120 --> 00:27:43.790\nSo, the good thing is, if you have\nthe tools that are available to you, okay,\n\n477\n00:27:43.790 --> 00:27:46.130\nwhich is right over here, okay.\n\n478\n00:27:46.130 --> 00:27:50.910\nSo, if I wanted to get rid of the table\nvery easily, I simply right-click, and\n\n479\n00:27:50.910 --> 00:27:52.980\nnotice I can select Delete.\n\n480\n00:27:52.980 --> 00:27:56.260\nAnd when I do that it brings up\nthis little property window for me,\n\n481\n00:27:56.260 --> 00:27:59.340\nand it says Delete Object at the top.\n\n482\n00:27:59.340 --> 00:28:03.540\nAnd I simply click OK, and\nthen it's deleted out of there.\n\n483\n00:28:03.540 --> 00:28:06.395\nBut what if you actually\nneed to do this but\n\n484\n00:28:06.395 --> 00:28:10.321\nyou do not have the ability to\ndo it by using that command?\n\n485\n00:28:10.321 --> 00:28:12.852\nIn other words you're told,\nyou can do this, but\n\n486\n00:28:12.852 --> 00:28:16.500\nwhich of the following commands\nin gonna allow you to do this?\n\n487\n00:28:16.500 --> 00:28:21.110\nWell this is why we are focusing\nin on this one instead.\n\n488\n00:28:22.630 --> 00:28:28.040\nSo if I wanted to delete\nan object out completely, here,\n\n489\n00:28:28.040 --> 00:28:32.990\nI have now a DROP TABLE\ncommand that we can use too.\n\n490\n00:28:32.990 --> 00:28:38.135\nSo this one is saying if you can\nfind the object that is labeled as\n\n491\n00:28:38.135 --> 00:28:44.390\ndbo.NewEmployees2 and\nalso one that begins with a U or\n\n492\n00:28:44.390 --> 00:28:47.720\nwhatever the next object is for\nthe unique one here, and it's not null.\n\n493\n00:28:47.720 --> 00:28:50.190\nIn other words, it has values in it.\n\n494\n00:28:50.190 --> 00:28:51.770\nDrop the table, okay?\n\n495\n00:28:51.770 --> 00:28:53.480\nSo that's what it's telling it to do.\n\n496\n00:28:53.480 --> 00:28:58.540\nSo look inside of it, take a look, if it's\nnot null then you can drop that table.\n\n497\n00:28:58.540 --> 00:29:03.400\nSo that's actually a great command for you\nto be able to also run if you needed to.\n\n498\n00:29:03.400 --> 00:29:07.800\nNow, at this point, there is no\ndata in it so I'm not gonna run it\n\n499\n00:29:07.800 --> 00:29:10.820\ncuz I don't wanna delete it because I have\nsomething else we're gonna show as well.\n\n500\n00:29:10.820 --> 00:29:14.980\nOkay, but overall though,\nyou do want to make sure that you know\n\n501\n00:29:14.980 --> 00:29:18.530\nwhat command is not only gonna\nbe able to generate a table, but\n\n502\n00:29:18.530 --> 00:29:21.610\nbe able to drop a table, if you need to,\nif you need to get out of it.\n\n503\n00:29:21.610 --> 00:29:25.840\nSo, remember that it's actually something\nthat looks fairly similar to this.\n\n504\n00:29:25.840 --> 00:29:27.800\nNow, in this sense,\n\n505\n00:29:27.800 --> 00:29:31.735\nperfectly fine, something that\nyou do need to do sometimes here.\n\n506\n00:29:31.735 --> 00:29:34.350\nWhere if you're like me you might create\nmultiple objects and then realize\n\n507\n00:29:34.350 --> 00:29:37.900\nthat it's actually all wrong and you do\nneed to get those things out of there.\n\n508\n00:29:37.900 --> 00:29:41.750\nAgain, fairly easy enough to right-click,\nbut if you absolutely have to do it using\n\n509\n00:29:41.750 --> 00:29:44.500\nthe query window,\nthis is the way you're going to do it.\n\n510\n00:29:44.500 --> 00:29:46.860\nNow the other thing that we can do\n\n511\n00:29:46.860 --> 00:29:51.260\nis that there is another command\nwhich is also called ALTER COLUMN.\n\n512\n00:29:51.260 --> 00:29:54.390\nNow if you're like me the first time\nyou think about it like alter a column\n\n513\n00:29:55.410 --> 00:29:57.510\nwell what do you really\nhave to alter in a column?\n\n514\n00:29:57.510 --> 00:30:00.580\nWell I always thought well what\nif I wanted to remove a column,\n\n515\n00:30:00.580 --> 00:30:02.870\nwell that's not the way you'd do it, okay.\n\n516\n00:30:02.870 --> 00:30:07.070\nThis one will absolutely only\nallow you to do this to modify\n\n517\n00:30:07.070 --> 00:30:12.470\nthat column's Data Type and\nthat is the key to alter a column okay.\n\n518\n00:30:12.470 --> 00:30:16.370\nSo if I wanted to change,\nnotice that remember when I added in\n\n519\n00:30:16.370 --> 00:30:20.260\nthe email to Employee2,\nit was 100 characters, right here?\n\n520\n00:30:21.750 --> 00:30:27.202\nSo if I scroll over here\nto the left hand side,\n\n521\n00:30:27.202 --> 00:30:33.239\nand let's verify that\nthat actually took place.\n\n522\n00:30:33.239 --> 00:30:35.331\nSo you should see there it is,\n\n523\n00:30:35.331 --> 00:30:39.620\nemail character is a 100\ncharacter at this point.\n\n524\n00:30:39.620 --> 00:30:44.695\nBut now what I'm gonna do instead is I'm\ngonna run this command that says look,\n\n525\n00:30:44.695 --> 00:30:50.096\non that column, I wanna change that to 50\ncharacters instead, for the Data Type.\n\n526\n00:30:50.096 --> 00:30:51.960\nI can actually, let me see.\n\n527\n00:30:53.540 --> 00:30:54.150\nGuess what I did?\n\n528\n00:30:54.150 --> 00:30:56.725\nI've added in an s at the end,\nso that's why.\n\n529\n00:30:56.725 --> 00:30:59.830\n[LAUGH] All right, let me run it again.\n\n530\n00:30:59.830 --> 00:31:00.660\nThere we go.\n\n531\n00:31:00.660 --> 00:31:02.220\nCommand completed successfully.\n\n532\n00:31:03.410 --> 00:31:08.860\nNow if I go ahead and refresh, I just\nlike refreshing all the tables instead,\n\n533\n00:31:10.960 --> 00:31:14.720\nand then NewEmployee2,\nand I go to Columns.\n\n534\n00:31:14.720 --> 00:31:16.260\nAnd now you can see, oops.\n\n535\n00:31:16.260 --> 00:31:20.390\nWell, maybe if somebody were better\nat navigating, you could see it.\n\n536\n00:31:21.890 --> 00:31:22.920\nThere you go.\n\n537\n00:31:22.920 --> 00:31:27.951\nNotice that it just changed the entire\ndata type here, from 100 characters to\n\n538\n00:31:27.951 --> 00:31:32.770\nthe ID of 50 characters here instead,\ngives you that ability, very quickly,\n\n539\n00:31:33.840 --> 00:31:38.900\nvery easily, if you needed that to match\nanother table at some point, some time.\n\n540\n00:31:38.900 --> 00:31:41.580\nNow just at the end here we need\nto talk about something but\n\n541\n00:31:41.580 --> 00:31:46.850\nthe problem is it will only run\non Enterprise Editions, okay?\n\n542\n00:31:46.850 --> 00:31:50.120\nSo the edition that I'm running is\nStandard edition, it's not gonna work.\n\n543\n00:31:50.120 --> 00:31:53.232\nAnd that is dealing with what\nwe call table compression, okay?\n\n544\n00:31:53.232 --> 00:31:55.464\nTable compression essentially says look,\n\n545\n00:31:55.464 --> 00:31:59.322\nbefore you start running a lot of this,\nin storage space you want to compress\n\n546\n00:31:59.322 --> 00:32:02.112\neverything down as much as\npossible if you can, okay?\n\n547\n00:32:02.112 --> 00:32:04.910\nWell, you can do the same thing here,\nokay?\n\n548\n00:32:04.910 --> 00:32:08.540\nBut the problem is, like I said, with the\nStandard, it's not gonna end up running.\n\n549\n00:32:08.540 --> 00:32:11.150\nThe only thing that you're doing\ndifferently at the very beginning,\n\n550\n00:32:11.150 --> 00:32:16.170\nwhen you create this, is you're adding\nin one line, okay, which is with, and\n\n551\n00:32:16.170 --> 00:32:21.400\nthen the term data compression, and\nit's actually row or page, okay?\n\n552\n00:32:21.400 --> 00:32:24.780\nSo, this is only gonna happen\nwith the Enterprise edition.\n\n553\n00:32:24.780 --> 00:32:28.540\nYou can do row level compression where\nyou take every single row of data and\n\n554\n00:32:28.540 --> 00:32:32.080\nkind of squish another, take out all\nthe spaces and all the stuff here.\n\n555\n00:32:32.080 --> 00:32:34.070\nSquish it in as tight as possible.\n\n556\n00:32:34.070 --> 00:32:35.880\nOr you can do it by the page.\n\n557\n00:32:35.880 --> 00:32:38.560\nNow, by the page is a little bit stranger,\nright?\n\n558\n00:32:38.560 --> 00:32:42.270\nBecause what it's saying is actually take\nthe idea of a paging information and\n\n559\n00:32:42.270 --> 00:32:45.350\nthe file there and\nkind of compress that out instead.\n\n560\n00:32:45.350 --> 00:32:49.790\nSo, it's all about, of course, performance\nimpact and benefit for us as well, and\n\n561\n00:32:49.790 --> 00:32:52.670\nif you were to actually write that one,\nyou can do that as well,\n\n562\n00:32:52.670 --> 00:32:54.600\nchange that to the word page.\n\n563\n00:32:54.600 --> 00:32:58.090\nBut if you were running this on\nan Enterprise edition instead, and\n\n564\n00:32:58.090 --> 00:33:00.560\nyou started off with row compression, and\n\n565\n00:33:00.560 --> 00:33:06.130\nyou wanted to change it to page\ncompression, you can do that as well.\n\n566\n00:33:06.130 --> 00:33:08.740\nNow, the only thing that's\ndifferent about the row and\n\n567\n00:33:08.740 --> 00:33:12.180\nthe page level types of\ncompression is this.\n\n568\n00:33:12.180 --> 00:33:14.590\nRow compression only does row compression.\n\n569\n00:33:14.590 --> 00:33:17.220\nPage compression though\ndoes row compression\n\n570\n00:33:17.220 --> 00:33:21.110\nas well as the paging file type\nof compression as well, okay.\n\n571\n00:33:21.110 --> 00:33:23.520\nSo, it actually does both for you.\n\n572\n00:33:23.520 --> 00:33:24.820\nIs there a benefit to doing both?\n\n573\n00:33:24.820 --> 00:33:27.990\nWell, yeah, there's always a benefit\nto actually compressing data,\n\n574\n00:33:27.990 --> 00:33:30.870\nmaking sure that you're actually\nas compact as possible.\n\n575\n00:33:30.870 --> 00:33:33.480\nBut, overall though,\nit really depends on what you need\n\n576\n00:33:33.480 --> 00:33:38.380\ndone at that particular point in time or\nwhat the requirement actually is gonna be.\n\n577\n00:33:38.380 --> 00:33:41.860\nSo, just kind of remember here that\nit's a fairly simple idea, but\n\n578\n00:33:41.860 --> 00:33:46.080\nit's not gonna run if you try and actually\ndo this inside of the Standard edition.\n\n579\n00:33:46.080 --> 00:33:49.020\nIf I remember correctly because\nI was trying to do this\n\n580\n00:33:49.020 --> 00:33:49.730\njust a little bit earlier.\n\n581\n00:33:49.730 --> 00:33:52.410\nLet me see if I can run this here,\nand execute.\n\n582\n00:33:54.020 --> 00:34:00.430\nIt says to me here, it says, Cannot\nenable compression for this new object\n\n583\n00:34:00.430 --> 00:34:06.080\nthat I created, only SQL Server Enterprise\nEdition supports the compression.\n\n584\n00:34:06.080 --> 00:34:08.600\nSo if you're actually wondering,\nif you try and run this and\n\n585\n00:34:08.600 --> 00:34:11.910\ngo hey, it's not working, it's more\nthan likely you're exactly like me here,\n\n586\n00:34:11.910 --> 00:34:13.780\nyou're running the Standard Edition of it.\n\n587\n00:34:13.780 --> 00:34:18.540\nBut you do need to pay attention to that\nidea and understand that there's row and\n\n588\n00:34:18.540 --> 00:34:21.240\nthat there's page compression\nthat you may have to deal with.\n\n589\n00:34:21.240 --> 00:34:24.660\nAnd remember that page actually does both,\nrow only does row.\n\n590\n00:34:24.660 --> 00:34:27.490\nSo, some of the things that will\nhelp you out when you start creating\n\n591\n00:34:27.490 --> 00:34:31.260\nthe tables here and getting everything\ncompressed down the way that you want to,\n\n592\n00:34:31.260 --> 00:34:35.160\nas well as understanding the two ways\nthat you can create the tables here.\n\n593\n00:34:35.160 --> 00:34:38.890\nEither creating it with the definition\nalready there or creating it where you\n\n594\n00:34:38.890 --> 00:34:43.850\nactually go ahead and you actually\nadd the data in at the same time, and\n\n595\n00:34:43.850 --> 00:34:47.500\nyou're left with whatever the defaults\nare when you actually add that data in.\n\n596\n00:34:47.500 --> 00:34:49.410\nAnd then of course being able to alter or\n\n597\n00:34:49.410 --> 00:34:53.800\nmodify by changing or\nadding in a couple of different columns.\n\n598\n00:34:53.800 --> 00:34:58.624\nIt really does help you out when you start\ncreating tables inside of SQL Server 2014.\n\n599\n00:34:58.624 --> 00:35:00.366\n>> In this episode we've been looking at,\n\n600\n00:35:00.366 --> 00:35:02.376\njust like Ronnie said,\nhow to create tables.\n\n601\n00:35:02.376 --> 00:35:05.921\nAnd keep Ronnie's advice on hand because\nI've taken some of these Microsoft\n\n602\n00:35:05.921 --> 00:35:08.697\nexams and I can tell you the one\nway that is the easiest way to do\n\n603\n00:35:08.697 --> 00:35:10.625\nwon't be the way they ask you on the exam.\n\n604\n00:35:10.625 --> 00:35:11.745\nSo know your syntax.\n\n605\n00:35:11.745 --> 00:35:12.985\nRonnie, thank you for that information.\n\n606\n00:35:12.985 --> 00:35:14.555\nDo you have anything else for\nus in this one?\n\n607\n00:35:14.555 --> 00:35:16.775\n>> Well, the only other thing is practice.\n\n608\n00:35:16.775 --> 00:35:19.895\nThat's the only thing that's gonna help\nyou to get better at this is to continue\n\n609\n00:35:19.895 --> 00:35:21.110\nto practice.\n\n610\n00:35:21.110 --> 00:35:22.540\nAdd those things in there,\n\n611\n00:35:22.540 --> 00:35:26.600\nremove them, make sure you start\nusing these commands more regularly.\n\n612\n00:35:26.600 --> 00:35:27.480\nOn the exam,\n\n613\n00:35:27.480 --> 00:35:31.570\nidentifying which of the commands is\nabsolutely gonna work is gonna be key for\n\n614\n00:35:31.570 --> 00:35:36.730\nus when we get ready to take that exam and\nwhich one absolutely won't work, as well.\n\n615\n00:35:36.730 --> 00:35:40.140\nBut data types, especially in this one,\nare very important, so\n\n616\n00:35:40.140 --> 00:35:43.000\nmake sure you pay attention\nto those data types as well.\n\n617\n00:35:43.000 --> 00:35:45.880\n>> All right Ronnie, as always we\nappreciate you joining us here, and\n\n618\n00:35:45.880 --> 00:35:48.860\nwe appreciate you the viewers joining\nus too, but we're gonna go ahead and\n\n619\n00:35:48.860 --> 00:35:50.480\nsign out for ITPRO.TV.\n\n620\n00:35:50.480 --> 00:35:51.810\nI've been your host Wes Bryan.\n\n621\n00:35:51.810 --> 00:35:52.583\n>> And I'm Ronnie Wong.\n\n622\n00:35:52.583 --> 00:35:55.097\n>> And we'll see you next time.\n\n623\n00:35:55.097 --> 00:36:02.400\n[MUSIC]\n\n",
          "vimeoId": "164707960"
        },
        {
          "description": "In this episode, Wes and Ronnie explain how to restrict the information presented to a user or application by creating views. They also demonstrate how to the a view that has already been created.",
          "length": "1984",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-1-create_and_alter_views-042816-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-1-create_and_alter_views-042816-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-1-create_and_alter_views-042816-1-sm.jpg",
          "title": "Create and Alter Views",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.288 --> 00:00:14.051\nWelcome back to another exciting episode.\n\n3\n00:00:14.051 --> 00:00:16.370\nHere at IT Pro TV,\nI'm your host Wes Bryan.\n\n4\n00:00:16.370 --> 00:00:19.560\nAnd in today's episode we're\nmoving through more of querying\n\n5\n00:00:19.560 --> 00:00:20.820\nMicrosoft's Sequel Server 2014.\n\n6\n00:00:20.820 --> 00:00:24.040\nAnd we've got none other than Mr.\nRonny Wong with us today.\n\n7\n00:00:24.040 --> 00:00:25.260\nRonny, how are you doing today sir?\n\n8\n00:00:25.260 --> 00:00:29.510\n>> I am doing great as we continue on our\njourney taking us through some more about.\n\n9\n00:00:29.510 --> 00:00:33.010\nCreating some different objects that we\nhave to create inside of our database.\n\n10\n00:00:33.010 --> 00:00:36.220\nAnd we've taken look at basic table\ncreation already in the series.\n\n11\n00:00:36.220 --> 00:00:39.850\nSo, make sure you check that\nparticular episode out, as well.\n\n12\n00:00:39.850 --> 00:00:43.340\nAnd we also talked a lot about\nquerying in our series as well.\n\n13\n00:00:43.340 --> 00:00:48.235\nNow, for us, when we start to go a little\nbit more and a little bit deeper into what\n\n14\n00:00:48.235 --> 00:00:52.110\nwe need, we actually have to take\na look at something that we call views,\n\n15\n00:00:52.110 --> 00:00:53.600\nis what we have to take a look at.\n\n16\n00:00:53.600 --> 00:00:58.135\nNow just like it sounds, it actually\ngives us a view into our database.\n\n17\n00:00:58.135 --> 00:01:01.520\nWell, this is a very helpful\nelement that we can add in that\n\n18\n00:01:01.520 --> 00:01:04.360\nit becomes an object\ninside of our database.\n\n19\n00:01:04.360 --> 00:01:08.030\nThat we can actually use very easily and\nvery readily and\n\n20\n00:01:08.030 --> 00:01:12.760\nyou might be asking yourself, okay,\nwhy is it so important that we do this?\n\n21\n00:01:12.760 --> 00:01:16.446\nWell if you think about the idea\nof a simple query that you and\n\n22\n00:01:16.446 --> 00:01:21.166\nI actually can end up running inside of\nmy SQL database or in your SQL database\n\n23\n00:01:21.166 --> 00:01:26.610\nthink about what's actually being exposed\nat that particular point in time.\n\n24\n00:01:26.610 --> 00:01:30.970\nThe majority of that exposure, is when you\nwrite some type of select statement and\n\n25\n00:01:30.970 --> 00:01:35.130\nthe from, you're actually accessing right,\n\n26\n00:01:35.130 --> 00:01:39.180\nthe data that exists on those base tables,\nright?\n\n27\n00:01:39.180 --> 00:01:44.550\nThe actual logical structures,\nwhere the data absolutely exists.\n\n28\n00:01:44.550 --> 00:01:48.940\nNow when we start thinking about that,\na lot of times, when we have other things\n\n29\n00:01:48.940 --> 00:01:52.795\nbesides people like me, writing\nqueries such as report writers right.\n\n30\n00:01:52.795 --> 00:01:57.180\nYou might also then have\napplications that connect in and\n\n31\n00:01:57.180 --> 00:02:00.250\nget information out of\nthat database as well.\n\n32\n00:02:00.250 --> 00:02:04.340\nAnd so there's a lot of different ways\nthat we can connect and get that data.\n\n33\n00:02:04.340 --> 00:02:07.160\nAnd there's actually some other things\nthat can happen when we actually\n\n34\n00:02:07.160 --> 00:02:08.540\naccess the data directly too.\n\n35\n00:02:08.540 --> 00:02:12.340\n>> You know Ronnie, I'm thinking\nsecurity kind of mindset here,\n\n36\n00:02:12.340 --> 00:02:15.360\nif you are giving somebody\na view to a database.\n\n37\n00:02:15.360 --> 00:02:18.250\nNow that sounds like it could\nbe a security risk that\n\n38\n00:02:18.250 --> 00:02:21.040\nI'm giving you access and\nyou can see what's in my database,\n\n39\n00:02:21.040 --> 00:02:24.900\nand we know we're talking\nabout a relational database.\n\n40\n00:02:24.900 --> 00:02:27.800\nAnd all those relations behind the scenes,\nnow is that something that can\n\n41\n00:02:27.800 --> 00:02:30.380\nhappen if you do\n>> have somebody generate a query, and\n\n42\n00:02:30.380 --> 00:02:34.360\nit returns information, could it give them\naccess to maybe too much information?\n\n43\n00:02:34.360 --> 00:02:35.160\n>> It really can,\n\n44\n00:02:35.160 --> 00:02:39.550\nespecially if they're accessing those\nbase database tables directly, right.\n\n45\n00:02:39.550 --> 00:02:42.880\nSo if you're actually exposing it to\nwhere somebody can write a query, or\n\n46\n00:02:42.880 --> 00:02:46.460\nan application can write a query,\ndirectly to those tables.\n\n47\n00:02:46.460 --> 00:02:50.420\nIt also may mean, even with a little\nbit of modification of permissions,\n\n48\n00:02:50.420 --> 00:02:54.270\nunauthorized access as well, that what\ncan happen is they can go and they can\n\n49\n00:02:54.270 --> 00:02:59.640\nmodify the data and the weird thing is\nit's directly modifying the data itself.\n\n50\n00:02:59.640 --> 00:03:04.710\nSo what you and I generally want to do\ninstead is to create what we call views\n\n51\n00:03:04.710 --> 00:03:08.840\nthat will essentially show them\nthe view of the data base in the way\n\n52\n00:03:08.840 --> 00:03:13.480\nthat we want them to be able to see it and\naccess it on, you know, instead.\n\n53\n00:03:13.480 --> 00:03:16.720\nNow this is actually very important\nbecause of what it really does\n\n54\n00:03:16.720 --> 00:03:17.770\ncreate for us.\n\n55\n00:03:17.770 --> 00:03:20.160\nIt essentially gives us a limitation,\n\n56\n00:03:20.160 --> 00:03:23.260\nit allows us to say here's\nwhat these people need.\n\n57\n00:03:23.260 --> 00:03:25.340\nHere's what this application needs.\n\n58\n00:03:25.340 --> 00:03:28.470\nNot exposure to the entirety\nof the database but\n\n59\n00:03:28.470 --> 00:03:32.980\nonly to the columns, or\nthe technical term, the fields,\n\n60\n00:03:32.980 --> 00:03:37.390\nthat we want them to be able to access and\nto be able to pull all the information in.\n\n61\n00:03:37.390 --> 00:03:42.040\nSo that way, when they go and they try and\nconnect in through this view, well they're\n\n62\n00:03:42.040 --> 00:03:47.800\nonly given a very limited access depending\non the view that you end up creating.\n\n63\n00:03:47.800 --> 00:03:52.670\nSo it is a way to actually be able to do\na little bit of security in this sense and\n\n64\n00:03:52.670 --> 00:03:56.710\nthe very fact that you're only exposing\nwhat you really need to expose and\n\n65\n00:03:56.710 --> 00:03:59.800\nyou're not giving them access\nto the entire database.\n\n66\n00:03:59.800 --> 00:04:03.150\n>> Ronnie, could you give us maybe\nan example of where we might see some\n\n67\n00:04:03.150 --> 00:04:06.610\ninformation come back that maybe you\ndon't want somebody to have access to?\n\n68\n00:04:06.610 --> 00:04:10.540\n>> Sure thing, let's go ahead and\ntake a look inside of our SQL server here.\n\n69\n00:04:10.540 --> 00:04:12.780\n>> And\nthis will help us out just a little bit.\n\n70\n00:04:12.780 --> 00:04:16.250\nLet's say that what we want to\nactually be able to do here is, and\n\n71\n00:04:16.250 --> 00:04:22.193\nthis is something that we can at\nleast see, so here I went ahead and\n\n72\n00:04:22.193 --> 00:04:27.880\nI've connected to the Adventure Works\n2014 database itself.\n\n73\n00:04:27.880 --> 00:04:31.480\nAnd then I have this query\nunderneath here, okay.\n\n74\n00:04:31.480 --> 00:04:34.970\nAnd this is going to be a select\nquery that shows the total sales by\n\n75\n00:04:34.970 --> 00:04:39.340\nthe salespersons that I have\nlisted in my database itself.\n\n76\n00:04:39.340 --> 00:04:42.820\nNow if this is query I want to run,\nthat's perfectly fine.\n\n77\n00:04:42.820 --> 00:04:44.370\nI can go ahead and do that.\n\n78\n00:04:44.370 --> 00:04:45.520\nWell, maybe I can do that.\n\n79\n00:04:45.520 --> 00:04:50.360\nLet me see if I can do it without messing\nup too badly, oop, see if I can do this.\n\n80\n00:04:50.360 --> 00:04:55.490\nSo if I select this particular query\nI can go ahead and execute it.\n\n81\n00:04:55.490 --> 00:05:00.260\nAnd then let me pull up this row here and\n\n82\n00:05:00.260 --> 00:05:04.810\nthat way we can see\nthe results of the query here.\n\n83\n00:05:04.810 --> 00:05:05.610\nOkay.\n\n84\n00:05:05.610 --> 00:05:09.201\nSo when I take a look at the results\nof the query for right now,\n\n85\n00:05:09.201 --> 00:05:11.880\nI can see all of this information.\n\n86\n00:05:11.880 --> 00:05:14.500\nNow this is a fairly limited\namount of information, but\n\n87\n00:05:14.500 --> 00:05:16.350\nyou have got to remember something.\n\n88\n00:05:16.350 --> 00:05:20.110\nIf I am giving somebody\ndirect access to my database,\n\n89\n00:05:20.110 --> 00:05:23.220\nit does not necessarily mean that this\nis the only query that they can run.\n\n90\n00:05:24.230 --> 00:05:26.530\nIt means that if I am\nactually giving them access,\n\n91\n00:05:26.530 --> 00:05:29.620\nthey may be actually able to\nconnect to more than this and\n\n92\n00:05:29.620 --> 00:05:34.910\na lot of times there are a lot of fields\nthat are not being exposed right now.\n\n93\n00:05:34.910 --> 00:05:38.920\nEach one of these particular\ninner joins that I have\n\n94\n00:05:38.920 --> 00:05:42.020\nis really connecting\nthose tables together.\n\n95\n00:05:42.020 --> 00:05:45.950\nSo if they knew the names of\nthe columns in those tables\n\n96\n00:05:45.950 --> 00:05:49.120\nit is very possible that even\nthough I'm only picking one or\n\n97\n00:05:49.120 --> 00:05:55.110\ntwo fields out of that entire connection\nof all four of these tables here.\n\n98\n00:05:55.110 --> 00:05:59.190\nThen what could end up happening is\nthat they could actually access at least\n\n99\n00:05:59.190 --> 00:06:00.720\nthat data right there.\n\n100\n00:06:00.720 --> 00:06:04.370\nAnd then maybe even be able to discover\na little bit more and actually ask more\n\n101\n00:06:04.370 --> 00:06:08.520\nquestions and get access to data that I\nreally don't want them to be able to do.\n\n102\n00:06:08.520 --> 00:06:11.270\nNow can we control it a little\nbit by using permissions?\n\n103\n00:06:11.270 --> 00:06:16.290\nYes, but at the same time they already\nhave access to your base tables, and\n\n104\n00:06:16.290 --> 00:06:17.790\neven if they don't do anything else,\n\n105\n00:06:17.790 --> 00:06:21.140\nthey could maybe potentially\nmess this up at times too.\n\n106\n00:06:21.140 --> 00:06:25.975\n>> So Ronny, it sounds like they could\npotentially gain transitive access through\n\n107\n00:06:25.975 --> 00:06:28.925\nthose relationships just by\na simple query like this.\n\n108\n00:06:28.925 --> 00:06:30.585\n>> It really is very possible, right?\n\n109\n00:06:30.585 --> 00:06:33.435\nIf we're not very careful,\nif what I might do is,\n\n110\n00:06:33.435 --> 00:06:37.100\njust because of let's say\neither lack of experience or\n\n111\n00:06:37.100 --> 00:06:41.610\nthe idea here that look I don't\nthink that Wes will do anything.\n\n112\n00:06:41.610 --> 00:06:44.010\nWes I'm just going to open\nup my database to you.\n\n113\n00:06:44.010 --> 00:06:46.750\nAnd you just query\nthe information that you need.\n\n114\n00:06:46.750 --> 00:06:50.690\nWell that could actually expose it a lot\nmore than what we actually realize.\n\n115\n00:06:50.690 --> 00:06:55.050\nAnd so this can be potentially bad\nespecially if somebody else has\n\n116\n00:06:55.050 --> 00:06:57.960\nunauthorized access and\nthen can manipulate the data.\n\n117\n00:06:57.960 --> 00:07:00.740\nChange data that should\nnever be changed for us.\n\n118\n00:07:00.740 --> 00:07:02.970\nNow we have issues and problems.\n\n119\n00:07:02.970 --> 00:07:06.650\nWell, this is where a view\nreally helps us out.\n\n120\n00:07:06.650 --> 00:07:10.520\nWhen we start talking about\na view what we're now doing is,\n\n121\n00:07:10.520 --> 00:07:14.210\nwe're pretty much creating\nthe way that we hope.\n\n122\n00:07:14.210 --> 00:07:17.450\nOr not hope,\nthe way that we actually say, excuse me.\n\n123\n00:07:17.450 --> 00:07:21.160\nThat people are going to\nbe on access to that data.\n\n124\n00:07:21.160 --> 00:07:27.330\nSo I can actually use that query that I\njust ran and create a View instead that\n\n125\n00:07:27.330 --> 00:07:34.270\nwill now help me in this sense to be able\nto say, 'here's what you have access to.\n\n126\n00:07:34.270 --> 00:07:36.090\nAnd you're not going to get\naccess to anything else,\n\n127\n00:07:36.090 --> 00:07:41.730\nif the only thing I'm exposing you to, or\nyour application to, is the view itself.\n\n128\n00:07:41.730 --> 00:07:44.330\nNow, let's go ahead and\ntake a look using that query\n\n129\n00:07:44.330 --> 00:07:49.090\nabout how we also generate the idea\nof this view to help us out.\n\n130\n00:07:49.090 --> 00:07:50.170\nSo here it is.\n\n131\n00:07:50.170 --> 00:07:53.622\nI'm gonna actually scroll\nup a little bit more.\n\n132\n00:07:53.622 --> 00:07:57.248\nAnd at the very beginning,\nwhat we're going to do is notice that I've\n\n133\n00:07:57.248 --> 00:07:59.836\nactually got that same\nquery going on right here.\n\n134\n00:07:59.836 --> 00:08:02.974\nSo the entirety of all that query and\n\n135\n00:08:02.974 --> 00:08:08.500\nthen at the top this is where\nwe change a little bit okay.\n\n136\n00:08:08.500 --> 00:08:13.310\nSo when we start to take a look at\nthis query and itself here okay.\n\n137\n00:08:13.310 --> 00:08:16.085\nNotice the way it really begins here,\nokay?\n\n138\n00:08:16.085 --> 00:08:18.090\nIs that it's simple wording, all right?\n\n139\n00:08:18.090 --> 00:08:21.989\nI wanna create a view and\nthen you give it a name.\n\n140\n00:08:21.989 --> 00:08:27.350\nNow the name that I'm giving it right here\nit doesn't have to be that in particular.\n\n141\n00:08:27.350 --> 00:08:30.650\nThe recommendation of course since\nyou're working with SQL servers and\n\n142\n00:08:30.650 --> 00:08:34.030\nthen of course transact SQL is to do\n\n143\n00:08:34.030 --> 00:08:39.510\nthe combination here of the schema name\nas well as the table name itself too.\n\n144\n00:08:39.510 --> 00:08:44.200\nNow, I put a little v right here in\nthe front of that particular table name\n\n145\n00:08:44.200 --> 00:08:45.650\nto indicate that this is a view.\n\n146\n00:08:45.650 --> 00:08:47.480\nNow you don't have to do that,\n\n147\n00:08:47.480 --> 00:08:50.870\nit's just something that I want to do\nto make sure that as we display it on\n\n148\n00:08:50.870 --> 00:08:55.300\nour show here that you could actually\nknow that is what I meant by that.\n\n149\n00:08:55.300 --> 00:08:58.190\nI'm creating this view and\nI'm actually putting a little v.\n\n150\n00:08:58.190 --> 00:09:01.437\nNow sometimes you'll actually see that\nthere's other views that were pre-created\n\n151\n00:09:01.437 --> 00:09:02.500\nas well.\n\n152\n00:09:02.500 --> 00:09:07.124\nInside of your database and let me show\nyou that as well and let me zoom back out.\n\n153\n00:09:07.124 --> 00:09:11.985\nAnd over on the left-hand side in my\nObject Explorer, let me collapse that\n\n154\n00:09:11.985 --> 00:09:15.854\ndown so we can explore it just\na little bit more here, okay.\n\n155\n00:09:15.854 --> 00:09:20.380\nSo notice,\nthere's that AdventureWorks2014 database.\n\n156\n00:09:20.380 --> 00:09:21.910\nAnd if I click on that plus sign,\n\n157\n00:09:21.910 --> 00:09:25.730\nand expand it out,\nnotice I have my Database Diagrams.\n\n158\n00:09:25.730 --> 00:09:29.460\nI have the tables and those are the base\ntables that we're talking about.\n\n159\n00:09:29.460 --> 00:09:32.560\nAnd then I have this word Views here, so\n\n160\n00:09:32.560 --> 00:09:36.720\nwhen I end up creating a view,\nit's not gonna store it as a table.\n\n161\n00:09:36.720 --> 00:09:39.590\nIt's gonna store it here in Views and\n\n162\n00:09:39.590 --> 00:09:43.010\nnotice that there's actually\na few of them already here.\n\n163\n00:09:43.010 --> 00:09:46.260\nAnd the AdventureWorks\ndatabase itself went ahead and\n\n164\n00:09:46.260 --> 00:09:48.960\ncreated a lot of these views for us.\n\n165\n00:09:48.960 --> 00:09:53.637\nAnd the reason it did it is so that we\ncould access the data a lot easier even if\n\n166\n00:09:53.637 --> 00:09:56.696\nwe are actually just doing\nsome simple testing.\n\n167\n00:09:56.696 --> 00:09:58.780\nAnd you might be wondering like why is it?\n\n168\n00:09:58.780 --> 00:10:04.100\nIt's because this is a relatively complex\ndatabase that we have access to and\n\n169\n00:10:04.100 --> 00:10:09.070\nso they've went ahead and created a lot of\nthese views right here in this database.\n\n170\n00:10:09.070 --> 00:10:13.190\nSo that you can make your querying\na little bit easier instead and\n\n171\n00:10:13.190 --> 00:10:17.870\nalso limited as well so that you don't\nhave to go in and search for everything.\n\n172\n00:10:17.870 --> 00:10:22.650\nNow, in this set's, you may see a few,\nyou may see not many,\n\n173\n00:10:22.650 --> 00:10:26.430\nyou may see a ton of them,\nin your own production database.\n\n174\n00:10:26.430 --> 00:10:29.839\nBut if you do, if you say, well, Ronnie,\nI wanna run the query that you're running.\n\n175\n00:10:29.839 --> 00:10:34.472\nWell, don't forget you can always go up\nonline and go back to Microsoft's site,\n\n176\n00:10:34.472 --> 00:10:39.041\ndownload the Adventure Works 2014 database\nAnd import that thing right in or\n\n177\n00:10:39.041 --> 00:10:40.950\nattach it right in there.\n\n178\n00:10:40.950 --> 00:10:43.570\nAnd you will probably see that you'll\nget the majority of these views and\n\n179\n00:10:43.570 --> 00:10:45.430\nnot exactly all these views.\n\n180\n00:10:45.430 --> 00:10:49.910\nSo I'm about to add in one here but\noverall though, that's what it will be.\n\n181\n00:10:49.910 --> 00:10:53.360\nSo this lets you know something, that\nthe view itself is actually storing itself\n\n182\n00:10:53.360 --> 00:10:56.126\nas an object in the database itself.\n\n183\n00:10:56.126 --> 00:10:59.524\nNow, unlike tables, right?\n\n184\n00:10:59.524 --> 00:11:03.130\nWhere tables hold data,\nin other words they're holding data,\n\n185\n00:11:03.130 --> 00:11:05.480\nthey're like containers holding data.\n\n186\n00:11:06.520 --> 00:11:08.507\nViews do not hold data.\n\n187\n00:11:08.507 --> 00:11:10.828\nViews essentially hold the query, or\n\n188\n00:11:10.828 --> 00:11:15.758\nthe structure of how that information is\ngoing to retrieve, so that I don't have\n\n189\n00:11:15.758 --> 00:11:20.777\nto ask you to rewrite a query every single\ntime I need to get that same information.\n\n190\n00:11:20.777 --> 00:11:25.561\nI'm essentially just saying here it is,\nhere's the information I need and\n\n191\n00:11:25.561 --> 00:11:29.597\nnow I can take that and now allow\nexposure then to somebody else or\n\n192\n00:11:29.597 --> 00:11:32.820\nto another application connecting in.\n\n193\n00:11:32.820 --> 00:11:36.130\nSo now that Wes is actually\na customer of mine and\n\n194\n00:11:36.130 --> 00:11:38.912\nhe is accessing through some\nparticular application.\n\n195\n00:11:38.912 --> 00:11:43.890\nWell, the only thing I would have to do is\nsay Wes' application has access to this\n\n196\n00:11:43.890 --> 00:11:50.100\nview and that essentially limits him to\nwhat I have already previously queried and\n\n197\n00:11:50.100 --> 00:11:55.030\nthen it actually does not give him\naccess to the tables directly.\n\n198\n00:11:55.030 --> 00:12:00.470\nSo notice just by the logic in that,\nthis is a great thing to actually use.\n\n199\n00:12:00.470 --> 00:12:04.180\nWhen you actually start clearing, is to be\nable to create this view because you are.\n\n200\n00:12:04.180 --> 00:12:07.370\nYou're not exposing\nthe tables directly here\n\n201\n00:12:07.370 --> 00:12:10.310\nyou're only exposing this particular view.\n\n202\n00:12:10.310 --> 00:12:12.360\nAnd that view will normally be limited and\n\n203\n00:12:12.360 --> 00:12:16.480\nwon't be accessing the entirety\nof the database itself, okay?\n\n204\n00:12:16.480 --> 00:12:20.420\nSo it really is kind of neat\nwhen you start thinking about\n\n205\n00:12:20.420 --> 00:12:23.750\nall the things that views allow you to do.\n\n206\n00:12:23.750 --> 00:12:28.860\nAnd limitation and the idea here of\neven some basic security in the sense\n\n207\n00:12:28.860 --> 00:12:33.560\nof I'm not giving you access and exposure\nto every single table in my database.\n\n208\n00:12:33.560 --> 00:12:37.620\nI'm really only giving you access to\nwhat I want exposed there instead.\n\n209\n00:12:37.620 --> 00:12:41.470\n>> Yeah, Ronnie, that sounds like\neven in just at a elementary level,\n\n210\n00:12:41.470 --> 00:12:43.450\nyou're giving a principle\nof least privilege.\n\n211\n00:12:43.450 --> 00:12:45.750\nI'm only giving you access to what\nyou need and the information.\n\n212\n00:12:45.750 --> 00:12:48.803\nNow, I certainly don't\nwanna confuse the term but\n\n213\n00:12:48.803 --> 00:12:52.999\nit seems like views would really be\nclose to a concept like a template.\n\n214\n00:12:52.999 --> 00:12:55.878\n>> To a point,\nif you think about it, right?\n\n215\n00:12:55.878 --> 00:12:59.584\nThe very fact is, when you talk about\na template we're essentially creating\n\n216\n00:12:59.584 --> 00:13:02.160\nthat select statement and\nprestoring it just about.\n\n217\n00:13:02.160 --> 00:13:06.660\nSo that when we need it, when we run it,\nwe instead can put that into the from\n\n218\n00:13:06.660 --> 00:13:12.180\ncolumn, into the from statement, and\nwe are only accessing what that view.\n\n219\n00:13:12.180 --> 00:13:15.730\nSo we're only calling up essentially\ncolumns from that one view.\n\n220\n00:13:15.730 --> 00:13:17.780\nWe're not actually being able to pick and\nchoose.\n\n221\n00:13:17.780 --> 00:13:20.480\nWe're not creating our own joins,\nwe're not doing any of that.\n\n222\n00:13:20.480 --> 00:13:23.680\nWe're actually just pulling\ndirectly from here to do this.\n\n223\n00:13:23.680 --> 00:13:26.840\nNow, we need to take a look at\nthe syntax again because sometimes\n\n224\n00:13:26.840 --> 00:13:30.910\nthis can actually get a little\nmore unusual as well, okay?\n\n225\n00:13:30.910 --> 00:13:35.670\nNow when you do create the view,\nremember you do need a unique name, okay?\n\n226\n00:13:35.670 --> 00:13:39.200\nNow remember that also\naccording to TSQL it's\n\n227\n00:13:39.200 --> 00:13:43.960\nnice to have the Short as name as\npossible but still a descriptive.\n\n228\n00:13:43.960 --> 00:13:47.812\nThey would rather you not do something\nlike this sales by sales person.\n\n229\n00:13:47.812 --> 00:13:51.036\nThis is the one that I came up\nwith here but it was short, no,\n\n230\n00:13:51.036 --> 00:13:53.454\nI'll say super short,\nit was descriptive and\n\n231\n00:13:53.454 --> 00:13:58.350\nthat's the key that I wanted to make sure,\nthat I remember what this view is about.\n\n232\n00:13:58.350 --> 00:14:00.130\nThe one thing you don't\nwant to do is make it so\n\n233\n00:14:00.130 --> 00:14:04.920\ngeneric that you have to run through and\nactually run every single view and\n\n234\n00:14:04.920 --> 00:14:07.540\ngo, yeah,\nI remember what I was querying about here.\n\n235\n00:14:07.540 --> 00:14:10.220\nYou wanna make sure, of course,\nthat this is created and\n\n236\n00:14:10.220 --> 00:14:12.030\nthat the name actually helps you out.\n\n237\n00:14:12.030 --> 00:14:14.390\nNow, the second thing that\nyou also want to do is,\n\n238\n00:14:14.390 --> 00:14:18.540\nyou can actually add in what is\ncalled WITH SCHEMABINDING and\n\n239\n00:14:18.540 --> 00:14:22.340\nthis essentially makes sure\nthat the metadata, okay?\n\n240\n00:14:22.340 --> 00:14:28.040\nAlso in the background of this query\nis also come along with this so\n\n241\n00:14:28.040 --> 00:14:33.550\nthat when we actually do run any type\nof query against the view itself,\n\n242\n00:14:33.550 --> 00:14:37.570\nthat the background table meta\ndata also comes along with that.\n\n243\n00:14:37.570 --> 00:14:39.330\nYou might be going,\nis that really important?\n\n244\n00:14:39.330 --> 00:14:42.820\nIt really can be, especially when\nyou actually need to deal with some\n\n245\n00:14:42.820 --> 00:14:45.140\nconstraints that may be going on as well.\n\n246\n00:14:45.140 --> 00:14:48.290\nSo you always wanna make sure that\nthis is the one that you have.\n\n247\n00:14:48.290 --> 00:14:51.838\nNow there's two of them in green,\nI went ahead and commented them out.\n\n248\n00:14:51.838 --> 00:14:57.070\nI'm not gonna run them right now, and that\nis because you do have to worry especially\n\n249\n00:14:58.070 --> 00:15:02.680\nwhen you are exposing this\nto third parties as well.\n\n250\n00:15:02.680 --> 00:15:07.060\nWe can also run this with\nthe WITH ENCRYPTION as well too,\n\n251\n00:15:07.060 --> 00:15:11.630\nI'm gonna put that back just in\ncase something goes wrong here.\n\n252\n00:15:11.630 --> 00:15:17.240\nThe WITH ENCRYPTION, it is a fairly\nweak encryption and this sucks, okay?\n\n253\n00:15:17.240 --> 00:15:20.880\nIt really does hide just\na little bit of the information.\n\n254\n00:15:20.880 --> 00:15:24.710\nIn other words, you really don't get\nto see over on the left hand side\n\n255\n00:15:24.710 --> 00:15:26.800\nthe table structures and stuff like that.\n\n256\n00:15:26.800 --> 00:15:31.510\nBut the other thing that it really does\nin the background that helps this out\n\n257\n00:15:31.510 --> 00:15:36.730\nis that in the background when you have\nmultiple SQL servers that are connected,\n\n258\n00:15:36.730 --> 00:15:39.860\nthey normally will\nreplicate with each other.\n\n259\n00:15:39.860 --> 00:15:44.357\nIn other words, a view that I keep here,\nor that a create here on mine,\n\n260\n00:15:44.357 --> 00:15:48.956\nit can actually, after a time,\nreplicate over to another SQL Server.\n\n261\n00:15:48.956 --> 00:15:52.929\nIf one is residing over in Wes' office,\nor in his branch office,\n\n262\n00:15:52.929 --> 00:15:57.845\nit can go ahead and replicate and pulls it\ndown there as well Now normally we don't\n\n263\n00:15:57.845 --> 00:16:01.531\nworry about stuff like that,\nbut if we are, in other words,\n\n264\n00:16:01.531 --> 00:16:05.724\nif we don't want that to be replicated\nusing the with encryption will\n\n265\n00:16:05.724 --> 00:16:11.030\nalso prevent the idea of the SQL Server\nreplicating this view as well, okay?\n\n266\n00:16:11.030 --> 00:16:15.210\nNow the other one is WITH VIEW METADATA.\n\n267\n00:16:16.330 --> 00:16:19.320\nThis is actually a little bit stranger,\nokay?\n\n268\n00:16:19.320 --> 00:16:24.650\nIf you go look, I know what's actually in\nthis query as far as the data goes, but\n\n269\n00:16:24.650 --> 00:16:30.280\nyou only want to see the views\nmetadata itself, well,\n\n270\n00:16:30.280 --> 00:16:35.270\nyou can instead turn that one on, is what\nyou can actually end up doing as well.\n\n271\n00:16:35.270 --> 00:16:37.020\nAnd you can actually run all three.\n\n272\n00:16:37.020 --> 00:16:39.564\nOkay, I'm not gonna do that because I\ndon't know how long that will end up\n\n273\n00:16:39.564 --> 00:16:41.080\ntaking so that's why I'm not doing that.\n\n274\n00:16:41.080 --> 00:16:43.940\nBut you can actually run\nall three of them and\n\n275\n00:16:43.940 --> 00:16:46.670\nin the end here it will\ncreate that view for us.\n\n276\n00:16:46.670 --> 00:16:50.758\nAnd then in theory, you should also be\nable to see just the metadata itself.\n\n277\n00:16:50.758 --> 00:16:54.530\nBut this is the key one,\nit's with the schemabinding itself,\n\n278\n00:16:54.530 --> 00:16:59.050\nto ensure that the structure is going\nto be there when we run the data,\n\n279\n00:16:59.050 --> 00:17:01.580\nmake sure that the data\nis actually gonna come in\n\n280\n00:17:01.580 --> 00:17:05.610\nin the structure that we actually designed\nit for and the schemabinding itself.\n\n281\n00:17:05.610 --> 00:17:08.150\nNow notice also the key word AS here.\n\n282\n00:17:08.150 --> 00:17:13.590\nSo we're creating a view and we're telling\nit how that view is to be created.\n\n283\n00:17:13.590 --> 00:17:18.094\nSo this is where we can come\nback in here and see briefly.\n\n284\n00:17:18.094 --> 00:17:21.391\nLet me zoom out just a little bit and\nup a little bit here and\n\n285\n00:17:21.391 --> 00:17:25.051\nhere is the rest of that select\nstatement that we have, right.\n\n286\n00:17:25.051 --> 00:17:30.447\nSo I'm going to pull in to this\nparticular view, the BusinessEntityID,\n\n287\n00:17:30.447 --> 00:17:36.390\nFirstName, LastName, the total sales here,\nand that's all I'm gonna do.\n\n288\n00:17:36.390 --> 00:17:39.600\nAnd it actually is gonna pull that\ninformation from multiple tables from\n\n289\n00:17:39.600 --> 00:17:42.240\nacross my entire database.\n\n290\n00:17:42.240 --> 00:17:46.147\nNow the other thing that I actually\nwant to be aware of, right,\n\n291\n00:17:46.147 --> 00:17:50.721\nis that this is something that we also\ntalked about during our SQL querying\n\n292\n00:17:50.721 --> 00:17:53.339\non the idea of aggregates, too, right?\n\n293\n00:17:53.339 --> 00:17:57.745\nAnd I've actually, creating\naggregate types of queries is that,\n\n294\n00:17:57.745 --> 00:18:02.689\nwhen I have some type of aggregate\nfunction, like sum, count, max, min,\n\n295\n00:18:02.689 --> 00:18:08.254\naverage, stuff like that, that means I'm\nactually going to create a single value,\n\n296\n00:18:08.254 --> 00:18:11.970\na aggregate,\na summary of some sort, right?\n\n297\n00:18:11.970 --> 00:18:17.070\nWell, remember that I now need\na GROUP BY statement as well, okay?\n\n298\n00:18:17.070 --> 00:18:21.970\nAnd I need to ensure that on every single\none of these columns then, is everything\n\n299\n00:18:21.970 --> 00:18:27.190\nelse in my select statement besides\nthe one that I'm actually grouping by, or\n\n300\n00:18:27.190 --> 00:18:31.300\nthat I actually have the summary of,\nwhich is right here, in this SUM, okay?\n\n301\n00:18:31.300 --> 00:18:33.850\nSo inside I've got a,\nit's not a complex one, right?\n\n302\n00:18:33.850 --> 00:18:36.520\nIt's order of quantity\ntimes the unit price\n\n303\n00:18:36.520 --> 00:18:39.920\nthat will give us our total sales here,\nright?\n\n304\n00:18:39.920 --> 00:18:41.360\nSo when I go ahead and\n\n305\n00:18:41.360 --> 00:18:45.980\nI create this particular view,\nit's gonna be amazing, Wes.\n\n306\n00:18:45.980 --> 00:18:49.600\nYou're gonna see, you're gonna be so\nimpressed with the results here.\n\n307\n00:18:49.600 --> 00:18:52.520\nIt's gonna blow your mind.\n\n308\n00:18:52.520 --> 00:18:54.390\nI'm gonna lie to you, okay?\n\n309\n00:18:54.390 --> 00:18:56.240\nSo you're probably gonna go, is that it?\n\n310\n00:18:56.240 --> 00:18:57.870\nAnd yes, that will be it.\n\n311\n00:18:57.870 --> 00:18:58.590\n>> I'm waiting.\n\n312\n00:18:58.590 --> 00:19:02.200\n>> So, I'm executing that,\nand there it is, Wes!\n\n313\n00:19:02.200 --> 00:19:04.570\nThere is the entire result there.\n\n314\n00:19:04.570 --> 00:19:06.140\n>> Mind is blown, I can tell you.\n\n315\n00:19:06.140 --> 00:19:07.610\n>> Yes. [LAUGH] >> My mind is blown.\n\n316\n00:19:07.610 --> 00:19:09.750\n>> Command is completed successfully.\n\n317\n00:19:09.750 --> 00:19:10.960\nNow that doesn't bring you joy.\n\n318\n00:19:10.960 --> 00:19:13.470\nIt brings me a lot of joy,\nbecause, okay, that means what?\n\n319\n00:19:13.470 --> 00:19:15.570\nIt ran, and it ran successfully.\n\n320\n00:19:15.570 --> 00:19:16.510\nBut the problem is,\n\n321\n00:19:16.510 --> 00:19:21.540\nyou don't really see the actual end\nresult at that particular point in time.\n\n322\n00:19:21.540 --> 00:19:25.750\nBut now if I go back over to\nthe object explorer over here,\n\n323\n00:19:25.750 --> 00:19:29.270\nremember that not everything\nshows up right away, okay.\n\n324\n00:19:29.270 --> 00:19:33.020\nSo if I scroll over there and\nI expanded out views,\n\n325\n00:19:33.020 --> 00:19:37.630\nI am not gonna see that Sales,\nthat vSalesbySalesPerson.\n\n326\n00:19:37.630 --> 00:19:39.353\nIt's close here.\n\n327\n00:19:39.353 --> 00:19:42.239\nI've got vSalesPerson, but remember,\n\n328\n00:19:42.239 --> 00:19:47.450\nI actually created one that was\ncalled vSalesbySalesPerson, okay?\n\n329\n00:19:47.450 --> 00:19:50.540\nOr something like that,\nif I remember right.\n\n330\n00:19:50.540 --> 00:19:52.320\nSo what do I need to do?\n\n331\n00:19:52.320 --> 00:19:54.020\nWell, because it doesn't\nshow up automatically,\n\n332\n00:19:54.020 --> 00:20:00.600\nI'm gonna right-click on Views > Refresh\nand now when I do that, there it is.\n\n333\n00:20:00.600 --> 00:20:03.460\nThere is the actual view\nthat I ended up creating.\n\n334\n00:20:03.460 --> 00:20:07.590\nNow remember that it actually created it,\nbut it's not storing any data.\n\n335\n00:20:07.590 --> 00:20:11.460\nBut now notice there is some\nof the metadata as well.\n\n336\n00:20:11.460 --> 00:20:13.180\nIt's actually showing me the columns and\n\n337\n00:20:13.180 --> 00:20:15.920\nthe column names along\nwith the data types here.\n\n338\n00:20:15.920 --> 00:20:19.940\nSo there it is, exactly like I told you,\nis the BusinessEntity that I said I'm\n\n339\n00:20:19.940 --> 00:20:23.000\npulling in from my database,\nmy base tables.\n\n340\n00:20:23.000 --> 00:20:25.090\nFirstName and LastName, and\n\n341\n00:20:25.090 --> 00:20:29.680\nthen I generated this particular\ncolumn as well, okay.\n\n342\n00:20:29.680 --> 00:20:33.488\nSo, now that I have that\nparticular information,\n\n343\n00:20:33.488 --> 00:20:37.563\nwell, if Wes's application connects in,\nokay, and\n\n344\n00:20:37.563 --> 00:20:41.636\nsays, I need that information,\nI can now do a select,\n\n345\n00:20:41.636 --> 00:20:46.530\nand I'm just gonna do a select\neverything here, and then a from.\n\n346\n00:20:46.530 --> 00:20:50.070\nThen it's going to be sales, V.\n\n347\n00:20:50.070 --> 00:20:56.270\nAnd then I should be able to\nsee here SalesbySalesperson.\n\n348\n00:20:56.270 --> 00:20:59.890\nLet me be good and make sure I\nactually end my batch statement there.\n\n349\n00:20:59.890 --> 00:21:04.220\nOops, and\nthen I'm going to execute this, and\n\n350\n00:21:04.220 --> 00:21:09.260\nnotice that it actually ran, and\nit gave me the same result here.\n\n351\n00:21:09.260 --> 00:21:12.920\nOkay, so there's all 17 rows.\n\n352\n00:21:12.920 --> 00:21:15.150\nAnd you go, why is that impressive?\n\n353\n00:21:15.150 --> 00:21:20.260\nWell, if you compare it, right,\nso let's see again here, okay?\n\n354\n00:21:20.260 --> 00:21:24.520\nSo there's the statement that I just ran,\nthe SQL query that I just ran, okay?\n\n355\n00:21:24.520 --> 00:21:27.410\nThat's it, and\nthat's the entirety of the SQL query.\n\n356\n00:21:27.410 --> 00:21:35.290\nWell, that now becomes equal to all that,\nokay?\n\n357\n00:21:35.290 --> 00:21:39.590\nSo if you take a look and\nsee that information, well,\n\n358\n00:21:39.590 --> 00:21:41.420\nnow notice the difference.\n\n359\n00:21:41.420 --> 00:21:45.780\nI am no longer exposing any\nof this to Wes's application.\n\n360\n00:21:45.780 --> 00:21:51.020\nWes's application now that he knows that\nhe's connected to that one view, well,\n\n361\n00:21:51.020 --> 00:21:54.410\nhe can request from those\ncolumns whatever he wants to.\n\n362\n00:21:54.410 --> 00:21:57.360\nBut notice it's not showing him the actual\n\n363\n00:21:57.360 --> 00:22:00.910\ninner workings of how that\nparticular view was created.\n\n364\n00:22:00.910 --> 00:22:05.630\nThe only thing that Wes's application\nknows is that he has access to well,\n\n365\n00:22:05.630 --> 00:22:07.400\na table of information.\n\n366\n00:22:07.400 --> 00:22:12.420\nAnd according to Wes's application, this\nis pretty much his access to the entire\n\n367\n00:22:12.420 --> 00:22:18.300\nuniverse of my database, so his particular\nview right there that he might need.\n\n368\n00:22:18.300 --> 00:22:22.430\n>> Now, that's great, Ronnie, just being\nable to lock that down and control it,\n\n369\n00:22:22.430 --> 00:22:26.910\nbut let's say that if it was Wes\nmaking that view and I decided,\n\n370\n00:22:26.910 --> 00:22:29.360\nyou know what,\nI think I left something out or\n\n371\n00:22:29.360 --> 00:22:33.200\nmaybe we decide that an application\nneeds a little bit more information.\n\n372\n00:22:33.200 --> 00:22:36.850\nAnd we didn't quite put that column\nin there and we need to modify.\n\n373\n00:22:36.850 --> 00:22:39.860\nCan we make modifications to\nthe data that we're gonna see?\n\n374\n00:22:39.860 --> 00:22:41.938\n>> Yeah, this is actually\nsomething that's really good.\n\n375\n00:22:41.938 --> 00:22:45.665\nAnd that's a great question because\nwhat we've actually seen before, when\n\n376\n00:22:45.665 --> 00:22:49.734\nwe started using things like synonyms and\nsome of the other things that we've used,\n\n377\n00:22:49.734 --> 00:22:52.910\nwe can't actually alter\nsomething like a synonym.\n\n378\n00:22:52.910 --> 00:22:56.070\nEssentially what we have to do\nis we have to get rid of it and\n\n379\n00:22:56.070 --> 00:22:57.960\nthen we can recreate it.\n\n380\n00:22:57.960 --> 00:23:02.190\nWell, even this, right, unless you're\nreally good at remembering everything,\n\n381\n00:23:03.190 --> 00:23:07.130\nthat particular query that I ran actually\ntook me a bit of time to kind of piece\n\n382\n00:23:07.130 --> 00:23:09.220\ntogether and\nmake sure I knew where everything was.\n\n383\n00:23:09.220 --> 00:23:10.630\nWell, I wouldn't want\nto do that thing again.\n\n384\n00:23:10.630 --> 00:23:14.260\nI would not want to re-type out or\nrefigure out where everything goes.\n\n385\n00:23:14.260 --> 00:23:17.550\nSo I don't like that idea of having\nto drop the entire table and\n\n386\n00:23:17.550 --> 00:23:19.540\nthen recreate it again, okay.\n\n387\n00:23:19.540 --> 00:23:21.165\nUnless I already have it written down or\n\n388\n00:23:21.165 --> 00:23:24.700\ncopied to someplace where I can\npaste it back in very quickly.\n\n389\n00:23:24.700 --> 00:23:27.300\nWell, the good thing is, inside of Views,\n\n390\n00:23:27.300 --> 00:23:33.400\nyou absolutely have the ability\nto alter the view, okay?\n\n391\n00:23:33.400 --> 00:23:37.130\nAnd that way you can add in a couple of\nelements that you may not have added in.\n\n392\n00:23:37.130 --> 00:23:41.288\nAnd we'll talk about why this\nis also helpful, too, okay?\n\n393\n00:23:41.288 --> 00:23:42.921\nSo you might be wondering,\n\n394\n00:23:42.921 --> 00:23:47.260\nwhy does this essentially wind up\nbeing something that really matters?\n\n395\n00:23:47.260 --> 00:23:52.154\nWell, if I drop that view, okay, and\nnow I have my production database and\n\n396\n00:23:52.154 --> 00:23:56.973\nI've got hundreds of customers, right,\nthat are also connecting in and\n\n397\n00:23:56.973 --> 00:24:01.789\nusing that view Well, if I drop it it\nmeans they can't do it essentially it\n\n398\n00:24:01.789 --> 00:24:05.450\nbreaks their access into\nmy database as well, okay.\n\n399\n00:24:05.450 --> 00:24:09.510\nSo what I need to do is now\nthat there's actually something\n\n400\n00:24:09.510 --> 00:24:12.890\nthat we can actually alter which\nis to alter the actual view here.\n\n401\n00:24:12.890 --> 00:24:17.770\nI can go ahead and just modify it and\nwhen that happens it doesn't break any\n\n402\n00:24:17.770 --> 00:24:21.420\nof the connections that my customers\nwould have into that view.\n\n403\n00:24:21.420 --> 00:24:23.950\nIt essentially keeps everything\nactually running and\n\n404\n00:24:23.950 --> 00:24:28.070\noperating at the same time, but\nalso allows me to alter the view.\n\n405\n00:24:28.070 --> 00:24:32.360\nAnd, so now what should happen is,\nwhen Wes' connection refreshes,\n\n406\n00:24:32.360 --> 00:24:35.400\nhe might see that he has access\nto more information as well.\n\n407\n00:24:35.400 --> 00:24:37.890\nBut it didn't actually do\nanything else and you might say,\n\n408\n00:24:37.890 --> 00:24:40.030\nwell, why is this actually important?\n\n409\n00:24:40.030 --> 00:24:42.190\nIt's because it's fairly generic, right?\n\n410\n00:24:42.190 --> 00:24:45.990\nMultiple applications of Wes is using\na different one from Megan over here or\n\n411\n00:24:45.990 --> 00:24:49.900\nfrom you know why can I not\nremember him by his name?\n\n412\n00:24:49.900 --> 00:24:51.350\nDaniel and Don.\n\n413\n00:24:51.350 --> 00:24:55.420\nDaniel and Don well, they might have\nmultiple different applications but\n\n414\n00:24:55.420 --> 00:24:59.030\nI just say all you have to do is from\nyour application regardless of what it is\n\n415\n00:24:59.030 --> 00:25:02.140\nconnect to this view you're up and\nready to go.\n\n416\n00:25:02.140 --> 00:25:05.040\nWe don't have to make any\nmodifications on my end as far\n\n417\n00:25:05.040 --> 00:25:06.260\nas the internal structure goes.\n\n418\n00:25:06.260 --> 00:25:09.030\nThey don't have to make any\nmodifications on their end.\n\n419\n00:25:09.030 --> 00:25:12.240\nThey're actually connecting to this view\nand the only thing I'm doing is actually\n\n420\n00:25:12.240 --> 00:25:15.470\naltering the actual table or\nthe view here to do this.\n\n421\n00:25:15.470 --> 00:25:20.350\nSo let's go ahead and take a look\nat what we can do, so let's see.\n\n422\n00:25:20.350 --> 00:25:22.280\nNow, it's actually not a lot different.\n\n423\n00:25:22.280 --> 00:25:25.490\nWe're kind of doing just pretty much\nthe same thing that we did before in\n\n424\n00:25:25.490 --> 00:25:26.740\nthe create view.\n\n425\n00:25:26.740 --> 00:25:29.680\nBut now we've changed,\nwell a little bit, okay?\n\n426\n00:25:29.680 --> 00:25:33.340\nThe first thing that we changed\nof course is alter view.\n\n427\n00:25:33.340 --> 00:25:37.110\nNotice the rest of the syntax at this\npoint pretty much stays the same\n\n428\n00:25:37.110 --> 00:25:38.420\nhere, okay?\n\n429\n00:25:38.420 --> 00:25:39.610\nSo now, with that,\n\n430\n00:25:39.610 --> 00:25:43.460\nthe only thing I did is I added in\na couple of elements here, okay?\n\n431\n00:25:43.460 --> 00:25:47.241\nI added in, of course, the Territory Name,\nbecause I wanted to see the sales by\n\n432\n00:25:47.241 --> 00:25:50.740\nthe salesperson, and\nalso of course, by the territory.\n\n433\n00:25:50.740 --> 00:25:57.490\nAnd also, we are gonna add in the year,\nokay as well, all right.\n\n434\n00:25:57.490 --> 00:26:01.170\nSo I went ahead, and at this point I think\nI was gonna do it two steps here but\n\n435\n00:26:01.170 --> 00:26:02.760\nlet's just do it all at one time.\n\n436\n00:26:02.760 --> 00:26:04.660\nIf I get an error,\nit's probably because of the year and\n\n437\n00:26:04.660 --> 00:26:07.400\nthat's probably why I marked it\nout before, but we'll see here.\n\n438\n00:26:07.400 --> 00:26:12.130\nSo I am now actually doing\na combination of things, right.\n\n439\n00:26:12.130 --> 00:26:16.180\nThe very fact is, I have this aggregate\nand I now have this YEAR function.\n\n440\n00:26:16.180 --> 00:26:19.280\nAnd I'm just telling him because I know\nthe OrderDate is actually in year,\n\n441\n00:26:19.280 --> 00:26:20.650\nmonth and day.\n\n442\n00:26:20.650 --> 00:26:24.040\nI really only wanna focus on\njust displaying the year,\n\n443\n00:26:24.040 --> 00:26:26.340\ni do not want to focus on anything else.\n\n444\n00:26:26.340 --> 00:26:34.180\nI'm adding in a year and i'm adding\nin a territory too, so it should\n\n445\n00:26:34.180 --> 00:26:39.220\nbe that I run this query successfully,\nover here on the left hand side.\n\n446\n00:26:39.220 --> 00:26:44.010\nWhen I refresh this I should end up with\na couple of extra columns over here.\n\n447\n00:26:44.010 --> 00:26:48.320\nAnd that way I can query against any\nof those and should be fine, okay?\n\n448\n00:26:48.320 --> 00:26:52.980\nSo that is the great hope of what\nI'm telling you that should happen.\n\n449\n00:26:52.980 --> 00:26:54.390\nNow don't forget that at the end,\n\n450\n00:26:54.390 --> 00:26:57.930\nespecially if you're using\naggregates to do this, okay?\n\n451\n00:26:57.930 --> 00:27:02.390\nYou wanna make sure that everything\nthat is in your GROUP BY line\n\n452\n00:27:02.390 --> 00:27:05.770\nIs everything else besides\nthat aggregate function.\n\n453\n00:27:05.770 --> 00:27:10.660\nNow you might say here it's not an\naggregate function that's just a date time\n\n454\n00:27:10.660 --> 00:27:16.430\nfunction, so notice I actually added\nin both of these right here at the end.\n\n455\n00:27:16.430 --> 00:27:20.270\nHave at the end with the semicolon here\nwhich is supposed to be best practice for\n\n456\n00:27:20.270 --> 00:27:27.190\nus and then I am going to run\nthe alter view here and execute.\n\n457\n00:27:28.980 --> 00:27:31.310\nAnd this time it didn't like it, okay?\n\n458\n00:27:31.310 --> 00:27:34.050\nSo it says, hey this failed\nbecause there was no column\n\n459\n00:27:34.050 --> 00:27:36.790\nname specified it won't notice that.\n\n460\n00:27:36.790 --> 00:27:40.530\nWhen it actually took a look it said look\nunder the select statement the sixth\n\n461\n00:27:40.530 --> 00:27:42.600\none is what it's saying, okay.\n\n462\n00:27:42.600 --> 00:27:46.120\nNow during our series so\nfar I've been trying to point out as\n\n463\n00:27:46.120 --> 00:27:50.490\nmany of these as I can because a lot of\ntimes you actually do get the information.\n\n464\n00:27:50.490 --> 00:27:52.780\nAnd it's telling you in the create view or\n\n465\n00:27:52.780 --> 00:27:56.110\nfunction failed because no column\nname was specified for column 6.\n\n466\n00:27:56.110 --> 00:28:02.740\nSo if I take a look here one,\ntwo, three, four, five, and six.\n\n467\n00:28:02.740 --> 00:28:06.780\nIt's saying I did not\nspecify an alias here and\n\n468\n00:28:06.780 --> 00:28:10.320\nthat's not actually something hat's\ngonna be willing to deal with.\n\n469\n00:28:10.320 --> 00:28:14.530\nSo, I'm gonna say as and then year and\n\n470\n00:28:14.530 --> 00:28:19.250\nthat way, now that was the only\nthing it actually balked about.\n\n471\n00:28:19.250 --> 00:28:24.500\nSo, I think we're doing pretty good if I\ncan actually just highlight this one and\n\n472\n00:28:24.500 --> 00:28:28.188\nnot get caught doing too much here, okay?\n\n473\n00:28:28.188 --> 00:28:33.169\nSo I'm gonna run that statement again and\nnow there it is,\n\n474\n00:28:33.169 --> 00:28:38.863\ncommand completely successfully and\nnow if I refresh all the views\n\n475\n00:28:38.863 --> 00:28:44.550\nin the object explorer And then\n\n476\n00:28:44.550 --> 00:28:50.380\nI come down here to sales by sales person,\ntry and make sure you can actually see it.\n\n477\n00:28:50.380 --> 00:28:52.230\nAnd expand out columns,\n\n478\n00:28:52.230 --> 00:28:56.660\nnow notice there's no longer just\nthose three on the total sales here.\n\n479\n00:28:56.660 --> 00:29:01.260\nThere's territory, and\nthere's now year also inside of that\n\n480\n00:29:01.260 --> 00:29:04.747\nview which now also means\nthat when we run a query\n\n481\n00:29:09.000 --> 00:29:14.740\nI can also do this and\nexecute that query, and now notice,\n\n482\n00:29:14.740 --> 00:29:19.909\njust as simply,\nwe were able to also do this, okay?\n\n483\n00:29:19.909 --> 00:29:22.256\nSo we added in the additional columns,\n\n484\n00:29:22.256 --> 00:29:27.240\nnow, remember that that view is not\nstoring any additional data, okay?\n\n485\n00:29:27.240 --> 00:29:30.660\nThe only thing I did is I took that view,\nI took the structure, and\n\n486\n00:29:30.660 --> 00:29:35.390\nnow when I run a select statement\nI can use it in the from clause\n\n487\n00:29:35.390 --> 00:29:37.960\nthat allows it now to be\nthe basis of everything.\n\n488\n00:29:37.960 --> 00:29:42.530\nNow, can we be more specific if we wanted\nto and actually only select a few things?\n\n489\n00:29:42.530 --> 00:29:43.924\nOf course we can, okay?\n\n490\n00:29:43.924 --> 00:29:49.465\nSo now, I can actually do first name and\nthen I can even some concatenation,\n\n491\n00:29:49.465 --> 00:29:52.667\nat least I think I can,\nI may not be able to and\n\n492\n00:29:52.667 --> 00:29:58.360\nthat wouldn't be the fault sequel server,\nthat would be my fault.\n\n493\n00:29:58.360 --> 00:30:02.670\nLet's do first name,\nlast name, all together and\n\n494\n00:30:02.670 --> 00:30:06.180\nthen we'll do total sales, here.\n\n495\n00:30:09.741 --> 00:30:12.570\nAnd now, if I just select these two.\n\n496\n00:30:12.570 --> 00:30:15.900\nI guess I could do it by territory as\nwell, it doesn't matter and execute.\n\n497\n00:30:18.080 --> 00:30:22.320\nThere we go, s oops,\nI forgot to actually add in\n\n498\n00:30:23.920 --> 00:30:28.080\na [LAUGH] An alias so\nthe good thing is it's just a query.\n\n499\n00:30:31.390 --> 00:30:35.940\nSo now, you can actually end up\nseeing where we don't actually\n\n500\n00:30:35.940 --> 00:30:40.510\nexpose then our entire database table and\nthe under structure to it.\n\n501\n00:30:40.510 --> 00:30:44.872\nWhat essentially ends up happening is that\nwe're only exposing that view which is\n\n502\n00:30:44.872 --> 00:30:47.601\nallowing me to limit that\nview that applications.\n\n503\n00:30:47.601 --> 00:30:51.602\nAnd even other people accessing my\ndatabase to what I want to give\n\n504\n00:30:51.602 --> 00:30:55.980\nthem access to and not to\nthe entirety of the database itself.\n\n505\n00:30:55.980 --> 00:30:59.850\nSo, there's a lot of power in views and\nthis is why it's one of the more popular\n\n506\n00:30:59.850 --> 00:31:03.590\nelements that we have to\nactually be able to do this.\n\n507\n00:31:03.590 --> 00:31:07.260\nNow, does it actually\nimpact performance any.\n\n508\n00:31:07.260 --> 00:31:08.610\nWell, if you think about it,\n\n509\n00:31:08.610 --> 00:31:12.870\nit actually impacts performance for\nat least the application is connecting\n\n510\n00:31:12.870 --> 00:31:16.230\nin just a little bit cuz they're\nonly really accessing this view.\n\n511\n00:31:16.230 --> 00:31:17.594\nBut in the background though,\n\n512\n00:31:17.594 --> 00:31:20.644\nremember there is actually still\nall of the schema infrastructure.\n\n513\n00:31:20.644 --> 00:31:24.090\nAnd that select statement is still\nbeing run in the background but\n\n514\n00:31:24.090 --> 00:31:27.380\nnow nobody actually sees what\nthat select statement is.\n\n515\n00:31:27.380 --> 00:31:30.110\nThe only thing that you are doing is\nyour querying against what the data\n\n516\n00:31:30.110 --> 00:31:31.910\nis actually supposed to pull in here.\n\n517\n00:31:31.910 --> 00:31:35.880\nAnd you're only gonna get access to\nthat and not the entirety of everything.\n\n518\n00:31:35.880 --> 00:31:39.537\nWe do have a few other things that\nwe actually have to talk about,\n\n519\n00:31:39.537 --> 00:31:43.482\nbut overall though, for us in terms\nof creating and altering a view.\n\n520\n00:31:43.482 --> 00:31:45.594\nWell, this is actually the heart and\nsoul of it,\n\n521\n00:31:45.594 --> 00:31:47.610\nis to be able to do\nsomething just like this.\n\n522\n00:31:47.610 --> 00:31:50.740\n>> That's great, being able to put\nthat information behind the glass and\n\n523\n00:31:50.740 --> 00:31:51.820\nlocked display case.\n\n524\n00:31:51.820 --> 00:31:55.249\nSo only displaying the information\nthat you want them to have access to.\n\n525\n00:31:55.249 --> 00:31:57.750\nRonnie, thanks for\nall that good information.\n\n526\n00:31:57.750 --> 00:32:00.530\nI know we're gonna come back with\na part two because we've got plenty of\n\n527\n00:32:00.530 --> 00:32:02.530\nmore good information to go.\n\n528\n00:32:02.530 --> 00:32:05.950\nSo, Ronnie, got any parting words for\nthis episode?\n\n529\n00:32:05.950 --> 00:32:09.900\n>> Well, just try, so that's the key.\n\n530\n00:32:09.900 --> 00:32:14.970\nAnd remember the syntax, itself,\nis also key, especially for the exam.\n\n531\n00:32:14.970 --> 00:32:19.270\nAnd take a look at that\nsyntax especially closely and\n\n532\n00:32:19.270 --> 00:32:21.630\nalso of course those error messages too.\n\n533\n00:32:21.630 --> 00:32:24.070\nDo not put it past them\non the exam to say,\n\n534\n00:32:24.070 --> 00:32:27.540\nthe error message indicates which\nof the following didn't happen?\n\n535\n00:32:27.540 --> 00:32:30.925\nAnd it's very easy to overlook,\nso make sure you pay attention.\n\n536\n00:32:30.925 --> 00:32:32.365\nAttend to those error messages.\n\n537\n00:32:32.365 --> 00:32:36.245\nSee if it really helps you out as well,\nbut practice is pretty much the key here\n\n538\n00:32:36.245 --> 00:32:40.335\nin getting used to working inside of\nthat database and feeling comfortable.\n\n539\n00:32:40.335 --> 00:32:43.825\nWhen you read through those select\nqueries of what's actually gonna happen\n\n540\n00:32:43.825 --> 00:32:45.485\nline by line as you actually take it.\n\n541\n00:32:45.485 --> 00:32:46.595\nSo just remember that.\n\n542\n00:32:46.595 --> 00:32:48.726\n>> Ronnie thank you that looks\nlike a good place to wrap up.\n\n543\n00:32:48.726 --> 00:32:51.791\nSo we're gonna go ahead and\ntake the time to sign out here at ITProTV.\n\n544\n00:32:51.791 --> 00:32:53.075\nI've been your host Wes Bryan.\n\n545\n00:32:53.075 --> 00:32:53.933\n>> And I'm Ronnie Wong.\n\n546\n00:32:53.933 --> 00:32:55.234\n>> And we'll see you next time.\n\n547\n00:32:55.234 --> 00:33:01.463\n[SOUND]\n\n",
          "vimeoId": "165148231"
        },
        {
          "description": "In this episode, Wes and Ronnie continue their discussion on restricting the information presented to users or applications. They using the inline table-valued function as well as creating indexed views to optimize performance. They also talk about how to ensure that the database doesn’t break.",
          "length": "2160",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-2-create_and_alter_views_pt2-042816-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-2-create_and_alter_views_pt2-042816-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-2-create_and_alter_views_pt2-042816-1-sm.jpg",
          "title": "Create and Alter Views Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.663 --> 00:00:15.635\nWelcome back to to another exciting\nepisode here at IT PRO TV.\n\n3\n00:00:15.635 --> 00:00:17.015\nI'm your host Wes Bryan.\n\n4\n00:00:17.015 --> 00:00:21.975\nAnd, in today's episode we're moving\nalong in our querying Microsoft SQL\n\n5\n00:00:21.975 --> 00:00:25.535\nserver 2014 and we're actually\ncoming back with a part two.\n\n6\n00:00:25.535 --> 00:00:30.542\nThat's right, this is a part two\nto creating and altering views.\n\n7\n00:00:30.542 --> 00:00:33.902\nSo, back in the studio with us today\nis none other than Mr. Ronnie Wong.\n\n8\n00:00:33.902 --> 00:00:34.792\nHow are you doing Ronnie?\n\n9\n00:00:34.792 --> 00:00:37.372\n>> I am doing fine as we continue\non to take a look at more of\n\n10\n00:00:37.372 --> 00:00:39.552\nthe Microsoft SQL Server 2014.\n\n11\n00:00:39.552 --> 00:00:43.732\nWe're specifically talking about,\nof course, the idea of creating views and,\n\n12\n00:00:43.732 --> 00:00:45.142\nof course, altering views.\n\n13\n00:00:45.142 --> 00:00:48.252\nAnd, there's a couple of other things\nthat also fall in line with the idea\n\n14\n00:00:48.252 --> 00:00:49.280\nof views here.\n\n15\n00:00:49.280 --> 00:00:53.500\nRemember that for us views really do\nhelp us to limit what we really want\n\n16\n00:00:53.500 --> 00:00:56.000\nother people to be able to see or\neven ourselves.\n\n17\n00:00:56.000 --> 00:00:58.890\nBut, it also helps us out as\nwell by not having to expose\n\n18\n00:00:58.890 --> 00:01:01.070\nthe underlying infrastructure or\n\n19\n00:01:01.070 --> 00:01:04.440\nthe actual tables themselves to\nsomebody trying to do a query.\n\n20\n00:01:04.440 --> 00:01:07.570\nWe instead can give them\naccess to those views as well.\n\n21\n00:01:07.570 --> 00:01:10.910\nNow, when we create the idea of views,\nit really is very helpful, and\n\n22\n00:01:10.910 --> 00:01:14.160\nit really is a management\nidea that we really do love.\n\n23\n00:01:14.160 --> 00:01:15.700\nThere's also one other\nthing we need to do,\n\n24\n00:01:15.700 --> 00:01:18.360\nwhich is the idea of\ndropping the view as well.\n\n25\n00:01:18.360 --> 00:01:21.650\nAnd, this is very important, and the\nreason why it's important is I think it's\n\n26\n00:01:21.650 --> 00:01:25.020\npart of the exam objective so we better\nmake sure that we cover that as well.\n\n27\n00:01:25.020 --> 00:01:28.610\nAnd then, we'll talk about a couple of\nother things such as the idea here of\n\n28\n00:01:28.610 --> 00:01:33.170\na user defined type of function, that we\ncall an inline table function, as well.\n\n29\n00:01:33.170 --> 00:01:35.970\nAnd then,\nwe'll get into indexed views as well.\n\n30\n00:01:35.970 --> 00:01:37.490\nSo, let's go ahead and\n\n31\n00:01:37.490 --> 00:01:43.560\ntake a look at what we're talking about in\nterms of being able to drop a view for us.\n\n32\n00:01:43.560 --> 00:01:46.970\nNow, of course, inside of SQL Server.\n\n33\n00:01:46.970 --> 00:01:47.690\nIt really did.\n\n34\n00:01:47.690 --> 00:01:50.520\nIt has tried to actually make\neverything very easy for\n\n35\n00:01:50.520 --> 00:01:55.300\nus as users of the SQL Server, to where if\nwe do not have to actually be able to do\n\n36\n00:01:55.300 --> 00:01:59.960\nthis by using the query window,\nwe absolutely can.\n\n37\n00:01:59.960 --> 00:02:03.500\nAnd so, I'm going to just zoom on in here.\n\n38\n00:02:03.500 --> 00:02:05.330\nAnd, if I wanted to drop this view,\n\n39\n00:02:05.330 --> 00:02:09.090\nit's fairly easy, I simply right-click\non it, then I scroll down, and\n\n40\n00:02:09.090 --> 00:02:12.660\nI'll see that I can delete that\nthing right out of there, okay?\n\n41\n00:02:12.660 --> 00:02:15.570\nSo, of course, though in the true,\n\n42\n00:02:15.570 --> 00:02:19.570\nin the real exam objectives, they say, you\nneed to actually know how to drop a table.\n\n43\n00:02:19.570 --> 00:02:22.760\nBut, without using what\nthe built-in tools is\n\n44\n00:02:22.760 --> 00:02:25.010\npretty much what they want\nyou to be able to do.\n\n45\n00:02:25.010 --> 00:02:26.530\nAnd so, we want to just focus in on this.\n\n46\n00:02:26.530 --> 00:02:33.020\nIt's not a very long instance here, but it\nis something that we need to take a look\n\n47\n00:02:33.020 --> 00:02:38.176\nat to make sure that we understand how\nthis is done in terms of the syntax.\n\n48\n00:02:38.176 --> 00:02:39.810\nSo, I'm going to scroll on up, and\n\n49\n00:02:39.810 --> 00:02:44.070\nI've got this underneath this line\nright here, that says, Drop the View.\n\n50\n00:02:44.070 --> 00:02:49.050\nNow, you really do not have to do\neverything that I've got listed here.\n\n51\n00:02:49.050 --> 00:02:53.160\nSo, what mine is saying is if you\ncan identify this particular object,\n\n52\n00:02:53.160 --> 00:02:56.880\nwhich is this view, and\nthis V here again says verbose,\n\n53\n00:02:56.880 --> 00:02:59.490\nis actually saying hey take\na look at all that information.\n\n54\n00:02:59.490 --> 00:03:03.840\nIt is not null, okay, then go ahead and\ndrop in other words, if you find data in\n\n55\n00:03:03.840 --> 00:03:07.680\nit get rid of it because I really\ndon't want to actually see it.\n\n56\n00:03:07.680 --> 00:03:12.112\nBut, believe it or not,\nif I just even run just this one line,\n\n57\n00:03:12.112 --> 00:03:16.632\nwhich is just to drop the view of\nthe sales by salesperson here,\n\n58\n00:03:16.632 --> 00:03:19.660\nit will also end up working as well.\n\n59\n00:03:19.660 --> 00:03:23.010\nSo, the other one just sets an extra\ncondition on it, which is saying\n\n60\n00:03:23.010 --> 00:03:26.540\nyou know have I messed with it, have I\nmodified, have I done anything with it?\n\n61\n00:03:26.540 --> 00:03:27.610\nThen go ahead and drop that.\n\n62\n00:03:27.610 --> 00:03:30.830\nBut, right now if I just wanted\nto drop it, I definitely could.\n\n63\n00:03:30.830 --> 00:03:34.260\nI can hit select it, and\nthen I hit my F5 key and\n\n64\n00:03:34.260 --> 00:03:36.390\nat this point I'm going\nto use zoom out again.\n\n65\n00:03:36.390 --> 00:03:43.010\nAnd then, I'm going to scroll over, right\nclick on views, make sure I refresh it.\n\n66\n00:03:43.010 --> 00:03:49.140\nAnd then, if I now try and\nfind sales by salesperson,\n\n67\n00:03:49.140 --> 00:03:52.750\nyou end up seeing that it absolutely\ndid get rid of it as well.\n\n68\n00:03:52.750 --> 00:03:56.260\nSo, even though you might see it\nwritten a little bit more complex,\n\n69\n00:03:56.260 --> 00:03:59.940\nand the reason why is we've done\nsome insert statements in there.\n\n70\n00:03:59.940 --> 00:04:01.110\nAnd, we just wanted to say look,\n\n71\n00:04:01.110 --> 00:04:04.530\nwe're getting rid of it just because\nthere's actually data in it.\n\n72\n00:04:04.530 --> 00:04:06.560\nBut, we can recreate it very quickly.\n\n73\n00:04:06.560 --> 00:04:07.570\nBut, a lot of times for us,\n\n74\n00:04:07.570 --> 00:04:11.890\nif we just need to drop the table because\nwe need to do it, just type in DROP TABLE.\n\n75\n00:04:11.890 --> 00:04:15.230\nView, excuse me, if we need to\ndrop the view, just type that in.\n\n76\n00:04:15.230 --> 00:04:18.690\nDROP VIEW, and\nthen of course the schema name with it.\n\n77\n00:04:18.690 --> 00:04:23.020\nAnd, of course, with the semicolon at\nthe end is pretty much the key, all right.\n\n78\n00:04:23.020 --> 00:04:27.080\nSo, it was something that really we need\nto make sure that we did cover as far as\n\n79\n00:04:27.080 --> 00:04:28.300\nbeing now able to create one.\n\n80\n00:04:28.300 --> 00:04:33.440\nWe now know how to drop a view if we\nneed to as well as alter a view as well.\n\n81\n00:04:33.440 --> 00:04:37.080\nSo, we did pretty much the majority\nof that inside of the first part of\n\n82\n00:04:37.080 --> 00:04:39.330\nthis little mini series here.\n\n83\n00:04:39.330 --> 00:04:43.840\nAnd, now we are moving onto what we\ncall the idea of user defined function,\n\n84\n00:04:43.840 --> 00:04:48.530\nspecifically what is called\nan inline table function, okay?\n\n85\n00:04:48.530 --> 00:04:52.050\nNow, we've actually used functions\nbefore throughout our series.\n\n86\n00:04:52.050 --> 00:04:55.610\nAnd, I've actually got one\nup here that I can show you.\n\n87\n00:04:55.610 --> 00:04:59.500\nSo, for example, when we start\ntalking about functions here.\n\n88\n00:04:59.500 --> 00:05:02.730\nWell here's a sum function, okay?\n\n89\n00:05:02.730 --> 00:05:06.660\nNow, when you take a look at what that\nparticular function is telling us right\n\n90\n00:05:06.660 --> 00:05:11.510\nhere, okay, is the order quantity\ntimes the actual unit price.\n\n91\n00:05:11.510 --> 00:05:14.520\nNow, I'm telling it\nmultiply that together and\n\n92\n00:05:14.520 --> 00:05:18.340\nthen go ahead and also sum it up for me.\n\n93\n00:05:18.340 --> 00:05:20.010\nSo, in other words,\ngo ahead and group it together.\n\n94\n00:05:20.010 --> 00:05:24.690\nMake an aggregate of it,\nmake a summary of this by business entity,\n\n95\n00:05:24.690 --> 00:05:27.380\nID, first name, last name,\nterritory, okay?\n\n96\n00:05:27.380 --> 00:05:31.080\nSo, go ahead and group all that stuff\nup and then display that, okay?\n\n97\n00:05:31.080 --> 00:05:32.820\nSo, that is function.\n\n98\n00:05:32.820 --> 00:05:35.470\nNotice the same thing here with year.\n\n99\n00:05:35.470 --> 00:05:40.280\nI simply took the order date\ncolumn which came out of the sales\n\n100\n00:05:40.280 --> 00:05:42.630\norder detail table, okay?\n\n101\n00:05:42.630 --> 00:05:47.150\nAnd, I told it just report to me\na single part of the entire date\n\n102\n00:05:47.150 --> 00:05:50.980\ntime function of the ordered day\ninstead which was just the year part.\n\n103\n00:05:52.160 --> 00:05:54.610\nNow, if you're trying to say, okay so,\n\n104\n00:05:54.610 --> 00:05:58.859\nwhat makes that different from what you're\ntalking about the inline table function?\n\n105\n00:06:00.040 --> 00:06:01.730\nWell, in both of these,\n\n106\n00:06:01.730 --> 00:06:06.020\nessentially it actually ends up reporting\nout well a single value, right?\n\n107\n00:06:06.020 --> 00:06:08.390\nSo like the YEAR here,\nit strips it all down and\n\n108\n00:06:08.390 --> 00:06:10.510\nit reports me a single value, okay?\n\n109\n00:06:10.510 --> 00:06:11.880\nThe same thing with the SUM.\n\n110\n00:06:11.880 --> 00:06:16.560\nIt actually ends up reporting that one\nvalue for us so that we can have a single\n\n111\n00:06:16.560 --> 00:06:19.740\nvalue that's being displayed, and\nmost of the time functions are doing that.\n\n112\n00:06:19.740 --> 00:06:23.810\nIt's actually taking that and giving us\na spitting output of really of one value,\n\n113\n00:06:23.810 --> 00:06:27.000\nsuch as the order date, or\nthe unit price, or whatever it is.\n\n114\n00:06:27.000 --> 00:06:29.090\nWe can do all that, ok?\n\n115\n00:06:29.090 --> 00:06:33.820\nThe inline table type of function\nthat we're talking about here,\n\n116\n00:06:33.820 --> 00:06:39.200\ndoes something a little bit different\nin its result and its output, okay?\n\n117\n00:06:39.200 --> 00:06:44.100\nSo, when we start to take a look at this\nidea of an inline tabled value function\n\n118\n00:06:44.100 --> 00:06:49.240\ninstead, the result of this\nis not a single value.\n\n119\n00:06:49.240 --> 00:06:51.680\nBut, the result is that\nthe user goes ahead and\n\n120\n00:06:51.680 --> 00:06:56.320\ndefines the entirety of what we need\nto look for and returns to us, well\n\n121\n00:06:56.320 --> 00:07:02.720\nthe information in a table format itself,\nand the entire table in itself, too.\n\n122\n00:07:02.720 --> 00:07:06.650\nSo, now I have a bunch of\nvalues that I can have, and\n\n123\n00:07:06.650 --> 00:07:10.700\nnot just looking for one value and\none function when we do this.\n\n124\n00:07:10.700 --> 00:07:14.260\nNow, normally we can actually\ntake this entire thing and\n\n125\n00:07:14.260 --> 00:07:16.500\nthen use it instead of a view.\n\n126\n00:07:16.500 --> 00:07:17.910\nSo, as an alternative or\n\n127\n00:07:17.910 --> 00:07:21.820\nas a replacement to a view It can\nactually be used instead of a view.\n\n128\n00:07:21.820 --> 00:07:23.120\nIt can be used instead of a table.\n\n129\n00:07:23.120 --> 00:07:27.180\nIt can be used instead of a stored\nprocedure, if we wanted to.\n\n130\n00:07:27.180 --> 00:07:28.890\nSo that when we go ahead and query,\n\n131\n00:07:28.890 --> 00:07:32.500\nwe can query against this\nentire function if we want.\n\n132\n00:07:32.500 --> 00:07:35.140\nOr, we can do a view, or\na table, or a stored procedure,\n\n133\n00:07:35.140 --> 00:07:36.610\nwhatever it might be here.\n\n134\n00:07:36.610 --> 00:07:39.730\nIt actually allows us to essentially\nallows us to replace all those\n\n135\n00:07:39.730 --> 00:07:42.870\nelements in terms of\na function when we do that.\n\n136\n00:07:42.870 --> 00:07:46.500\nSo, when we start seeing this\nthe other result of this,\n\n137\n00:07:46.500 --> 00:07:50.610\nof course, is that because it can\nactually be inside of their front claws.\n\n138\n00:07:50.610 --> 00:07:53.489\nWell, it actually allows us to\ndo well several things, right?\n\n139\n00:07:53.489 --> 00:07:56.852\nIt actually becomes the source of\nall the querying that I can have And\n\n140\n00:07:56.852 --> 00:08:00.687\nit's actually stored as a single tiny\nfunction instead of all of these things\n\n141\n00:08:00.687 --> 00:08:04.227\nthat we have which is the views that\nstore what looks like the columns but\n\n142\n00:08:04.227 --> 00:08:07.670\nit's actually the structure\nthat calls upon the columns.\n\n143\n00:08:07.670 --> 00:08:12.040\nTables will again do the same thing but\nfor us here the function is a little bit\n\n144\n00:08:12.040 --> 00:08:14.430\nmore efficient in the very fact\nthat it's generating it and\n\n145\n00:08:14.430 --> 00:08:16.240\nis storing it in that way.\n\n146\n00:08:16.240 --> 00:08:18.460\nSo the good thing is\nthe functions can be stored and\n\n147\n00:08:18.460 --> 00:08:20.340\nthen reused whenever we need them.\n\n148\n00:08:20.340 --> 00:08:22.920\nAnd need them to actually\nbe reused as well.\n\n149\n00:08:22.920 --> 00:08:24.290\nOkay.\nSo\n\n150\n00:08:24.290 --> 00:08:28.500\nthey really do become\na nice little difference.\n\n151\n00:08:28.500 --> 00:08:29.070\nRight.\n\n152\n00:08:29.070 --> 00:08:33.170\nAn alternative to some of the ways\nthat things we actually have here\n\n153\n00:08:33.170 --> 00:08:35.130\nare actually called upon as well.\n\n154\n00:08:35.130 --> 00:08:35.870\nOkay.\n\n155\n00:08:35.870 --> 00:08:38.680\nSo the easiest thing of course\nis to take a look here and\n\n156\n00:08:38.680 --> 00:08:42.300\nlet's go ahead and\nsee how we create a function, okay.\n\n157\n00:08:42.300 --> 00:08:47.280\nNow this one adds in a little\nbit more syntax by comparison.\n\n158\n00:08:47.280 --> 00:08:50.720\nAnd the create view is really\ntwo lines that it added in\n\n159\n00:08:50.720 --> 00:08:52.530\nif you remember in the create view, right.\n\n160\n00:08:52.530 --> 00:08:56.540\nWe had create view and then the second\nline was width schema binding and\n\n161\n00:08:56.540 --> 00:09:00.200\nthen we could add in a couple\nof other elements as well.\n\n162\n00:09:00.200 --> 00:09:03.490\nNow some of those other elements that\nare like with the there was one that was\n\n163\n00:09:03.490 --> 00:09:06.560\ncalled with encryption and\nI did forget to mention this so\n\n164\n00:09:06.560 --> 00:09:09.100\nthis is a great place for\nme to mention this as well.\n\n165\n00:09:09.100 --> 00:09:14.340\nInside of Server 2012, 2016 you might\nsee if I would have run that one and\n\n166\n00:09:14.340 --> 00:09:16.500\nthat's why I chose also not to run it.\n\n167\n00:09:16.500 --> 00:09:20.490\nIs that, it might tell you that, hey, you\ndon't get the encryption if you don't have\n\n168\n00:09:20.490 --> 00:09:24.050\nthe enterprise addition, and\nI'm running the standard edition of this.\n\n169\n00:09:24.050 --> 00:09:26.190\nSo, you might actually\nsee something like that.\n\n170\n00:09:26.190 --> 00:09:29.900\nBut, for us here, it actually does\nget just a little bit more complex.\n\n171\n00:09:29.900 --> 00:09:34.830\nNow, it doesn't have to get super complex,\nbut it's a little bit more here.\n\n172\n00:09:34.830 --> 00:09:39.380\nFirst and foremost we begin with\nthe idea of create function, okay?\n\n173\n00:09:39.380 --> 00:09:43.200\nSo not exactly a very difficult syntax,\nand\n\n174\n00:09:43.200 --> 00:09:46.710\nthen we need to to provide it\nthis entire schema name as well.\n\n175\n00:09:46.710 --> 00:09:50.650\nNow on this one function is\nnormally represented by 'fn' as\n\n176\n00:09:50.650 --> 00:09:53.170\nfar as a standard type of abbreviation.\n\n177\n00:09:53.170 --> 00:09:54.260\nAnd I like going ahead and\n\n178\n00:09:54.260 --> 00:09:57.580\nputting that in front of anything that\nI name if I'm gonna create a function.\n\n179\n00:09:57.580 --> 00:09:58.820\nNow, do you have to?\n\n180\n00:09:58.820 --> 00:10:01.760\nNope, you don't have to at all,\nbut I like that so\n\n181\n00:10:01.760 --> 00:10:05.200\nthat I know that this is gonna be\ncalled upon as a function itself.\n\n182\n00:10:05.200 --> 00:10:07.840\nWe're gonna skip over this green line for\n\n183\n00:10:07.840 --> 00:10:11.180\na moment because that's not\nreally essential at this point.\n\n184\n00:10:11.180 --> 00:10:13.050\nIn a basic and the most basic and\n\n185\n00:10:13.050 --> 00:10:17.650\nthe simplest type\nOf Inline Table-Valued Function here.\n\n186\n00:10:17.650 --> 00:10:19.640\nThe only thing we need\nis actually two lines.\n\n187\n00:10:19.640 --> 00:10:22.840\nNow, this is where you have to be careful,\nokay?\n\n188\n00:10:22.840 --> 00:10:28.720\nNotice that this is actually written\nas RETURNS with an S at the end, okay?\n\n189\n00:10:28.720 --> 00:10:33.110\nAnd we can even go ahead and\ngive it a name if we want to, in between.\n\n190\n00:10:33.110 --> 00:10:36.210\nOr if you don't want to give it a name,\nyou don't have to and I did not.\n\n191\n00:10:36.210 --> 00:10:38.470\nI did not put a name right in here.\n\n192\n00:10:38.470 --> 00:10:40.800\nOkay?\nSo you can actually go ahead and\n\n193\n00:10:40.800 --> 00:10:44.250\ngive it a name and you can call upon\nit like a variable if you wanted to.\n\n194\n00:10:44.250 --> 00:10:48.010\nAdd an at symbol and then type in\nwhatever name that you wanted and\n\n195\n00:10:48.010 --> 00:10:49.570\nwe can also do that.\n\n196\n00:10:49.570 --> 00:10:50.790\nBut if I'm actually not so\n\n197\n00:10:50.790 --> 00:10:55.710\nworried about that the only other thing\nthat I'm telling it is the format, okay?\n\n198\n00:10:55.710 --> 00:11:01.700\nSo I want whatever this function\nOrderTotalsByYear is going to be\n\n199\n00:11:01.700 --> 00:11:07.540\nto essentially return to me a table,\nokay, is what I want it to do.\n\n200\n00:11:07.540 --> 00:11:13.050\nNow once I do that, then I have an AS\njust like I had with the Create view,\n\n201\n00:11:13.050 --> 00:11:17.080\nand even create table, but\nnow I'm telling it what\n\n202\n00:11:17.080 --> 00:11:21.211\nis actually going to be returned\ninto that table up here, okay.\n\n203\n00:11:22.540 --> 00:11:25.340\nSo the function's going to\nreturn to me a table, and\n\n204\n00:11:25.340 --> 00:11:29.710\nthen I'm telling what to return\ninto that table, is what I'm doing.\n\n205\n00:11:29.710 --> 00:11:31.450\nSo in this sense,\n\n206\n00:11:31.450 --> 00:11:35.530\nit actually will insert in the rows\ninto whatever this variable is.\n\n207\n00:11:35.530 --> 00:11:37.910\nAnd I don't have to go ahead and\ngive it a name.\n\n208\n00:11:37.910 --> 00:11:40.710\nIf I'm not gonna reuse this I don't\nreally have to actually do that.\n\n209\n00:11:40.710 --> 00:11:43.540\nSo here we're just doing a very basic one.\n\n210\n00:11:43.540 --> 00:11:48.180\nNow at that point we can now just\nwrite out our select statement.\n\n211\n00:11:48.180 --> 00:11:49.830\nAnd I've been very generic here.\n\n212\n00:11:49.830 --> 00:11:53.770\nThis is pretty much the very same\none that we've been using throughout\n\n213\n00:11:53.770 --> 00:11:58.950\nat least these couple of episodes\nhere on creating views as well.\n\n214\n00:11:58.950 --> 00:12:03.250\nSo, notice I simply type out a select\nstatement at this particular point in\n\n215\n00:12:03.250 --> 00:12:08.600\ntime, and then we can run it and\nit will create a function and then.\n\n216\n00:12:08.600 --> 00:12:12.690\nAll I have to do is I can verify that\nthis whole thing will actually run for\n\n217\n00:12:12.690 --> 00:12:15.910\nus and we will be off and\nwe will be ready to go.\n\n218\n00:12:15.910 --> 00:12:19.450\nNow, when we start doing that,\nit's nothing that we haven't seen before.\n\n219\n00:12:19.450 --> 00:12:23.380\nThe output looks exactly\nlike what I've showed you\n\n220\n00:12:23.380 --> 00:12:25.480\nin part one of this little mini series.\n\n221\n00:12:25.480 --> 00:12:26.160\nAnd you're probably like,\n\n222\n00:12:26.160 --> 00:12:31.190\n\"why don't you just run it?\" Because\nthere's really no reason to run it yet.\n\n223\n00:12:31.190 --> 00:12:35.740\nBecause one of the most amazing things\nthat we can do with views is actually\n\n224\n00:12:35.740 --> 00:12:38.530\nkind of those green lines\nthat I left out here, okay.\n\n225\n00:12:38.530 --> 00:12:44.670\nSo when we run a view, there is really\nnothing that we can actually return\n\n226\n00:12:44.670 --> 00:12:48.950\ninto the view itself in that select\nstatement, okay, that says hey,\n\n227\n00:12:48.950 --> 00:12:53.400\nI need this to actually run through\nbefore you report it out to me, okay?\n\n228\n00:12:53.400 --> 00:12:59.310\nBut in an inline table function, I can\nactually pass what we call 'parameters'\n\n229\n00:12:59.310 --> 00:13:03.420\nback into the Select statement while\nit's creating the function itself, and\n\n230\n00:13:03.420 --> 00:13:06.320\nthen have it report for me instead.\n\n231\n00:13:06.320 --> 00:13:10.160\nSo whereas a View will essentially\ngenerate the whole thing, and\n\n232\n00:13:10.160 --> 00:13:13.390\nthen when I do my Select statement on\nthe entire View, in other words run\n\n233\n00:13:13.390 --> 00:13:18.560\na completely separate Select statement\non the entire view that I created.\n\n234\n00:13:18.560 --> 00:13:22.060\nIt's there that I can actually filter,\nand I can order by, and\n\n235\n00:13:22.060 --> 00:13:23.830\nI can do all that stuff.\n\n236\n00:13:23.830 --> 00:13:26.700\nBut, here, on this one though, I can't.\n\n237\n00:13:26.700 --> 00:13:28.620\nI don't have to do that.\n\n238\n00:13:28.620 --> 00:13:31.370\nI can now turn around, and\n\n239\n00:13:31.370 --> 00:13:35.822\ninstead, do something a little\nbit different here, okay.\n\n240\n00:13:35.822 --> 00:13:41.150\nSo what I can also do is I'm\ngoing to remove this, okay.\n\n241\n00:13:41.150 --> 00:13:45.850\nNow when I do that notice that the line\nactually turns out not to be green anymore\n\n242\n00:13:45.850 --> 00:13:49.620\nbut now I'm also declared\nanother variable, okay.\n\n243\n00:13:49.620 --> 00:13:52.269\nSo when I create this function\nI'm also gonna create\n\n244\n00:13:52.269 --> 00:13:55.440\nsomething called a variable\nthat's called @top.\n\n245\n00:13:55.440 --> 00:13:56.530\nAs an integer.\n\n246\n00:13:56.530 --> 00:13:57.740\nNow normally we don't do that.\n\n247\n00:13:57.740 --> 00:14:00.690\nWe normally just define what\nthis integer is going to be.\n\n248\n00:14:00.690 --> 00:14:04.850\nBut I've just said,\n@top is going to be some type of integer,\n\n249\n00:14:04.850 --> 00:14:09.930\nsome type of data type, which is going\nto be an integer value for me, okay?\n\n250\n00:14:09.930 --> 00:14:15.400\nThen, the other thing I'm going to do,\nis I'm going to add in another aggregate,\n\n251\n00:14:15.400 --> 00:14:16.410\nwhich is right here.\n\n252\n00:14:18.050 --> 00:14:20.010\nOn this line, okay.\n\n253\n00:14:20.010 --> 00:14:25.608\nSo I'm telling it instead that what we're\ngoing to do is that this @top here,\n\n254\n00:14:25.608 --> 00:14:31.070\nokay, is going to essentially\nbe represented by this.\n\n255\n00:14:31.070 --> 00:14:36.060\nSo that what I want to do is actually\nselect the top whatever I put in here\n\n256\n00:14:36.060 --> 00:14:40.390\nokay according to this value\nas being the total sales.\n\n257\n00:14:40.390 --> 00:14:45.670\nOkay now when I actually run the rest\nof this what does that help me to do.\n\n258\n00:14:45.670 --> 00:14:50.180\nWell down here at the bottom okay\nwhen I verify the statement.\n\n259\n00:14:50.180 --> 00:14:53.160\nI can now add in whatever\nnumber that I want.\n\n260\n00:14:53.160 --> 00:14:56.620\nAnd it should only return to\nme those particular numbers.\n\n261\n00:14:56.620 --> 00:14:59.180\nSo, let's go ahead and do this, okay?\n\n262\n00:14:59.180 --> 00:15:01.090\nSo, we'll change it up just a little bit.\n\n263\n00:15:01.090 --> 00:15:06.110\nI'm gonna select the entirety\nof this query right here.\n\n264\n00:15:06.110 --> 00:15:07.010\nAnd execute it.\n\n265\n00:15:07.010 --> 00:15:08.430\nAnd let's see if I've gotten any errors.\n\n266\n00:15:09.490 --> 00:15:11.700\nIt actually did find an error here for\nme, so\n\n267\n00:15:11.700 --> 00:15:13.900\nlet me see if I can take a look at that.\n\n268\n00:15:13.900 --> 00:15:17.360\nAnd I should notice,\nbecause I see that squiggly red line here.\n\n269\n00:15:17.360 --> 00:15:21.638\nSo I've typed in something\nincorrect here is what I've done.\n\n270\n00:15:24.836 --> 00:15:25.536\nLet's see.\n\n271\n00:15:30.389 --> 00:15:38.150\n[LAUGH] There we go.\n\n272\n00:15:38.150 --> 00:15:41.360\nThat should work and then SP.\n\n273\n00:15:42.720 --> 00:15:43.620\nThere we go.\n\n274\n00:15:43.620 --> 00:15:48.641\nSo I forgot that when I had actually\nremoved those comment lines, that I\n\n275\n00:15:48.641 --> 00:15:53.928\nhad to add in a comma after that very\nfirst thing that I'm having to report.\n\n276\n00:15:53.928 --> 00:15:55.693\nSo that's the only thing that I did.\n\n277\n00:15:55.693 --> 00:15:57.601\nIs I simply removed\nthose comment lines and\n\n278\n00:15:57.601 --> 00:15:59.779\nthen I need to say here's\nthe next in the series.\n\n279\n00:15:59.779 --> 00:16:02.148\nWhich is gonna be a business entity ID.\n\n280\n00:16:02.148 --> 00:16:06.943\nSo now without those squiggly\nred lines telling me that\n\n281\n00:16:06.943 --> 00:16:11.931\nI've got some syntax that's\nincorrect here, oops.\n\n282\n00:16:11.931 --> 00:16:14.669\nCome on, you're probably wondering\nlike what's the other one for?\n\n283\n00:16:14.669 --> 00:16:20.672\nCuz we haven't created it yet, so now, if\nI select the whole thing and I execute it.\n\n284\n00:16:20.672 --> 00:16:28.750\nNow, I need to go back over here to the\nleft hand side where I have all my views.\n\n285\n00:16:30.770 --> 00:16:34.140\nAnd this in here that it becomes a little\nbit more of a search if you haven't\n\n286\n00:16:34.140 --> 00:16:35.060\nplayed around with this.\n\n287\n00:16:37.300 --> 00:16:41.560\nSo, inside of adventure works\n2014 what we are now looking for\n\n288\n00:16:41.560 --> 00:16:44.250\nis underneath programmability.\n\n289\n00:16:44.250 --> 00:16:47.640\nSo if I select programmability,\nnotice that there's functions and\n\n290\n00:16:47.640 --> 00:16:49.740\nthere is that table valued function here.\n\n291\n00:16:52.870 --> 00:16:54.310\nAnd where did it go?\n\n292\n00:16:54.310 --> 00:16:54.830\nLet's see.\n\n293\n00:16:55.930 --> 00:16:57.290\nMaybe I'm lying to you.\n\n294\n00:16:57.290 --> 00:16:58.690\nWait, let me see.\n\n295\n00:16:58.690 --> 00:17:01.120\nMaybe I actually selected\nthe wrong database.\n\n296\n00:17:01.120 --> 00:17:02.190\nThat's why.\n\n297\n00:17:02.190 --> 00:17:03.504\nNope, that is 2014.\n\n298\n00:17:05.820 --> 00:17:08.870\nIt does tell me the command\ncompleted successfully.\n\n299\n00:17:08.870 --> 00:17:12.820\nLet me try and refresh that one more time,\nmaybe I didn't do that.\n\n300\n00:17:14.600 --> 00:17:16.846\nRefresh, there we go.\n\n301\n00:17:16.846 --> 00:17:19.132\nI'm just gonna say,\nwait a minute [LAUGH], see?\n\n302\n00:17:19.132 --> 00:17:24.512\nAgain, I can trick myself very easily into\ngoing, I know it actually did run but\n\n303\n00:17:24.512 --> 00:17:28.385\nthere it is, sales FN order by total and\nthe year, okay.\n\n304\n00:17:28.385 --> 00:17:31.950\nThat we have, and everything is\nactually ready from that point.\n\n305\n00:17:33.140 --> 00:17:37.260\nNow, if I just run the entirety of\nthat function just like we've been\n\n306\n00:17:37.260 --> 00:17:40.683\ndoing just to prove that we can\nget data out of this thing.\n\n307\n00:17:44.167 --> 00:17:47.120\nJust gonna highlight and execute,\n\n308\n00:17:47.120 --> 00:17:52.220\nnow it says,\nInsufficient Number of Arguments, okay?\n\n309\n00:17:52.220 --> 00:17:55.270\nSo, notice that now, it's actually\nsaying look, you don't have enough\n\n310\n00:17:55.270 --> 00:17:59.740\narguments in here, and I actually\njust have these parentheses, okay?\n\n311\n00:17:59.740 --> 00:18:04.061\nSo, now if I just say, I want the top,\nlet's just say five, okay?\n\n312\n00:18:04.061 --> 00:18:09.442\nWell, now, I can select that and\nI press my F5 key and\n\n313\n00:18:09.442 --> 00:18:13.756\nthen if I move that up,\nnotice there it is.\n\n314\n00:18:13.756 --> 00:18:18.405\nThere's five different columns for\nme in doing the top five, so\n\n315\n00:18:18.405 --> 00:18:20.310\nI was able to return that.\n\n316\n00:18:20.310 --> 00:18:21.300\nAnd let's just do one more.\n\n317\n00:18:21.300 --> 00:18:24.880\nLet's just do like top three and\nselect this one.\n\n318\n00:18:24.880 --> 00:18:29.800\nAgain, you'll want to run the entire\neverything, and notice it can change for\n\n319\n00:18:29.800 --> 00:18:31.090\nus right here.\n\n320\n00:18:31.090 --> 00:18:36.750\nSo this is a very good way if we know\nthat we need to actually have parameters,\n\n321\n00:18:36.750 --> 00:18:41.580\nbut yet I still want the power\nof a view instead, right?\n\n322\n00:18:41.580 --> 00:18:44.778\nWell a views not gonna allow\nme to do something like this,\n\n323\n00:18:44.778 --> 00:18:47.975\nif Wes is a customer he goes I\nwanna see my top three sales or\n\n324\n00:18:47.975 --> 00:18:51.062\nmy top three buys that I had for\nyour company, Ronnie.\n\n325\n00:18:51.062 --> 00:18:54.809\nWell, I can't just say, well here's a\nview, cuz I'd have to actually write that,\n\n326\n00:18:54.809 --> 00:18:56.384\nbut then he'd only have top three.\n\n327\n00:18:56.384 --> 00:18:59.430\nHe says,\nwell what if I wanted the top ten, okay?\n\n328\n00:18:59.430 --> 00:19:02.361\nWell, then I'd have to go in and\nchange that view again, and\n\n329\n00:19:02.361 --> 00:19:03.917\nthen Wes could rerun the query.\n\n330\n00:19:03.917 --> 00:19:07.003\nInstead, I could present\nto him this function, and\n\n331\n00:19:07.003 --> 00:19:11.702\nsay, just enter in the number of records\nthat you actually want to look for, and\n\n332\n00:19:11.702 --> 00:19:14.949\nthat way you can actually\nreturn whatever you want to.\n\n333\n00:19:14.949 --> 00:19:18.125\nI don't know if there's actually 10,\nI'll need to take a look, there it goes.\n\n334\n00:19:18.125 --> 00:19:21.059\n[SOUND] nope,\n10 is too many is what it's saying, so\n\n335\n00:19:21.059 --> 00:19:24.201\nlet's go back to it's\nprobably going everything.\n\n336\n00:19:24.201 --> 00:19:25.210\nSorry that was my fault.\n\n337\n00:19:25.210 --> 00:19:29.202\n>> [LAUGH]\n>> There we go, so there's top 4.\n\n338\n00:19:29.202 --> 00:19:32.126\nSo just just ran every single query that\nI have stacked up all the way to the top.\n\n339\n00:19:32.126 --> 00:19:35.401\nIt was like, wait a minute,\nyou ran half of this stuff,\n\n340\n00:19:35.401 --> 00:19:38.902\nif not everything,\nwe can actually run that to help us out.\n\n341\n00:19:38.902 --> 00:19:41.683\nWhen you do need\nthe limitation of a view but\n\n342\n00:19:41.683 --> 00:19:45.237\nyou also need to be able to\nprovide whatever customer or\n\n343\n00:19:45.237 --> 00:19:50.680\nwhatever application with some parameters\nthat they also need to enter in.\n\n344\n00:19:50.680 --> 00:19:54.200\nWell, this type of table inline\nfunction I'm gonna say it wrong\n\n345\n00:19:54.200 --> 00:19:57.620\ninline table valued function\nis going to be the way to go.\n\n346\n00:19:57.620 --> 00:20:01.280\nYou also see it written as TVF, as well so\n\n347\n00:20:01.280 --> 00:20:03.140\njust kind of realize that\nthat's what it's gonna do.\n\n348\n00:20:03.140 --> 00:20:06.941\nIf you only need the view so that you can\nquery against just what you see there in\n\n349\n00:20:06.941 --> 00:20:10.174\nthe view, then use a view and\nthat will also end up working for us.\n\n350\n00:20:10.174 --> 00:20:11.984\nBut neither of these, right,\n\n351\n00:20:11.984 --> 00:20:15.754\nactually store the data directly\nin to the function or the view.\n\n352\n00:20:15.754 --> 00:20:17.578\n>> Now the next thing\nthat we're gonna look at,\n\n353\n00:20:17.578 --> 00:20:19.790\nand Ronnie you had mentioned this,\nare indexed view.\n\n354\n00:20:19.790 --> 00:20:21.710\nRonnie, can you help us out\nwith the indexed views?\n\n355\n00:20:21.710 --> 00:20:25.270\n>> When we start talking about now\nthe idea of the indexed views,\n\n356\n00:20:25.270 --> 00:20:28.820\nindexes are one of the neat things\nthat we can do with our data, right?\n\n357\n00:20:28.820 --> 00:20:30.320\nAs our data continues to grow and\n\n358\n00:20:30.320 --> 00:20:33.900\ngrow, it now begins to slow down\nbecause what does it have to do?\n\n359\n00:20:33.900 --> 00:20:36.960\nIt has to go and\nfind those individual records and\n\n360\n00:20:36.960 --> 00:20:39.910\nthen be able to actually\npull the information up.\n\n361\n00:20:39.910 --> 00:20:42.620\nIndexes essentially\ncreate a single source or\n\n362\n00:20:42.620 --> 00:20:46.700\nlocation that essentially points to\nwhere those records are gonna be.\n\n363\n00:20:46.700 --> 00:20:50.570\nAnd then, when I end up running a query\nit actually checks the index first,\n\n364\n00:20:50.570 --> 00:20:54.870\nknows exactly where to go and\nfind those picker values.\n\n365\n00:20:54.870 --> 00:20:59.842\nBut in a regular query though It can cost\nsome time and some compute cycles and\n\n366\n00:20:59.842 --> 00:21:03.585\nthat's what we actually have\nto worry about sometimes.\n\n367\n00:21:03.585 --> 00:21:05.642\nBecause remember that in\na real production database,\n\n368\n00:21:05.642 --> 00:21:07.662\nit's not that you're getting\nhit like I am, right?\n\n369\n00:21:07.662 --> 00:21:12.334\nI'm the only one on this particular\nSQL Server, so its performance is not,\n\n370\n00:21:12.334 --> 00:21:16.790\nanything that I generate should not\nhit the performance that heavily.\n\n371\n00:21:16.790 --> 00:21:20.960\nDon't get me wrong, I can actually run\nsome that can make it generate some heavy\n\n372\n00:21:20.960 --> 00:21:23.710\nstuff on the actual disk itself.\n\n373\n00:21:23.710 --> 00:21:28.426\nBut overall though, when you now actually\nmultiple hundreds if not thousands\n\n374\n00:21:28.426 --> 00:21:32.719\nof customers have something like\nAmazon million of customer per hour.\n\n375\n00:21:32.719 --> 00:21:37.638\nNow all of a sudden the idea of actually\ndoing something like an index does help.\n\n376\n00:21:37.638 --> 00:21:41.266\nNow, we might actually think about this\nidea of actually creating an index on like\n\n377\n00:21:41.266 --> 00:21:44.653\nthe tables which is really helpful and\nwe're actually gonna be doing that.\n\n378\n00:21:44.653 --> 00:21:49.536\nWe actually have a whole section on the\nidea of performance enhancements and being\n\n379\n00:21:49.536 --> 00:21:54.660\nable to see more indexing there, but we\nwanted to show you, especially here, okay?\n\n380\n00:21:54.660 --> 00:22:00.390\nThat we can create an index type\nof view that will also help and\n\n381\n00:22:00.390 --> 00:22:03.590\nI wanna show you, therefore, performance\nof that we can get on this too,\n\n382\n00:22:03.590 --> 00:22:06.260\nso that we can see the way is working.\n\n383\n00:22:07.590 --> 00:22:08.940\nSo, let's go ahead and take a look.\n\n384\n00:22:08.940 --> 00:22:10.438\nNow, does it mean necessarily anything?\n\n385\n00:22:10.438 --> 00:22:12.214\nNo, not necessarily, okay?\n\n386\n00:22:12.214 --> 00:22:15.960\nBut if you know that you are gonna be\nrunning certain types of views over and\n\n387\n00:22:15.960 --> 00:22:19.980\nover and over again, and you know\nthat the data is actually growing.\n\n388\n00:22:19.980 --> 00:22:22.948\nThen creating indexes\ncan actually be helpful.\n\n389\n00:22:22.948 --> 00:22:24.216\nIt can be harmful as well,\n\n390\n00:22:24.216 --> 00:22:28.250\nbecause it has to regenerate new indexes\nevery time more data is added in.\n\n391\n00:22:28.250 --> 00:22:30.434\nSo you have to kind of\nbalance that out and\n\n392\n00:22:30.434 --> 00:22:33.597\nthat's more towards your data\nbase administrator side.\n\n393\n00:22:33.597 --> 00:22:36.908\nIf you're not good at indexing and\nnot everybody is here, but\n\n394\n00:22:36.908 --> 00:22:40.664\nyou gotta actually take a look at\nwhere this stuff is gonna generate and\n\n395\n00:22:40.664 --> 00:22:42.778\nhow much time it's gonna take to do so.\n\n396\n00:22:42.778 --> 00:22:45.313\n>> Ronnie, you said the index\npoints to a single source or\n\n397\n00:22:45.313 --> 00:22:47.308\nlocation to find a specific piece of data.\n\n398\n00:22:47.308 --> 00:22:50.867\nI can only imagine that if you have\neverything indexed than you no longer have\n\n399\n00:22:50.867 --> 00:22:52.890\na single source or a single location.\n\n400\n00:22:52.890 --> 00:22:54.860\nAnd it has to take some time\nto filter through those?\n\n401\n00:22:54.860 --> 00:22:56.020\n>> Yeah, it really does right.\n\n402\n00:22:56.020 --> 00:22:59.120\nThe larger the index grows,\nthe less performance you're gonna get.\n\n403\n00:22:59.120 --> 00:23:03.600\nSo, the idea is finding a balance of\nwhat really does need to be indexed and\n\n404\n00:23:03.600 --> 00:23:05.870\nwhat doesn't need to be indexed as well.\n\n405\n00:23:05.870 --> 00:23:09.820\nAnd we'll see that a little bit when we\nget into that side of the performance.\n\n406\n00:23:09.820 --> 00:23:11.930\nBut here,\nwe wanna show you especially on a view and\n\n407\n00:23:11.930 --> 00:23:14.820\nshow you the difference\nthat it really can make.\n\n408\n00:23:14.820 --> 00:23:19.192\nSo let's go ahead and\ntake a look at my SQL Server here, and\n\n409\n00:23:19.192 --> 00:23:22.950\nthen we will take a look\nat something else, okay.\n\n410\n00:23:22.950 --> 00:23:24.225\nSo at this point,\n\n411\n00:23:24.225 --> 00:23:28.815\nI've got a couple of things going\non at the very top of my screen,\n\n412\n00:23:28.815 --> 00:23:34.520\nlet's see what I can show that little bit\nmore that should be set to off instead.\n\n413\n00:23:36.240 --> 00:23:41.142\nAll right, now the first thing I'm gonna\ndo is simply run this particular query\n\n414\n00:23:41.142 --> 00:23:42.839\nright here and execute it.\n\n415\n00:23:42.839 --> 00:23:45.914\nIf you were to count the time,\nhow long do you think that took?\n\n416\n00:23:45.914 --> 00:23:47.579\n>> I would say 0.88 seconds.\n\n417\n00:23:47.579 --> 00:23:48.531\n>> [LAUGH]\n>> Yeah, yeah.\n\n418\n00:23:48.531 --> 00:23:52.313\nSee this happens so\nquickly right that for you and me,\n\n419\n00:23:52.313 --> 00:23:58.209\nactually the timer even inside of\nthe SQL services, 0.0.0.0.0, okay?\n\n420\n00:23:58.209 --> 00:24:02.648\nSo, Wes could be absolutely right here,\nwhen that actually ran Now, you and\n\n421\n00:24:02.648 --> 00:24:05.738\nI when we see it,\nwe do not know what it actually took.\n\n422\n00:24:05.738 --> 00:24:09.580\nBut, the good thing is, I'm just running\nan aggregate here with a join statement.\n\n423\n00:24:09.580 --> 00:24:10.830\nSo, it's nothing really fancy,\n\n424\n00:24:10.830 --> 00:24:14.130\nit's just telling me the total\nsales by country right now.\n\n425\n00:24:14.130 --> 00:24:18.550\nWhich is fine, but notice I have\nthe ability to also do what I call\n\n426\n00:24:18.550 --> 00:24:23.410\nset statistics IO for\ninput/output on, okay?\n\n427\n00:24:23.410 --> 00:24:30.570\nSo now, if I run that particular query,\nright there, and now I've executed.\n\n428\n00:24:30.570 --> 00:24:35.750\nAnd then, I run this query again here,\nand I execute it.\n\n429\n00:24:35.750 --> 00:24:40.735\nWell, now, you go, I don't see any\ndifference here, what the heck did it do?\n\n430\n00:24:40.735 --> 00:24:44.520\nWell, let me zoom in just a little bit,\nokay?\n\n431\n00:24:44.520 --> 00:24:49.070\nEvery time that I've actually done this,\nso far i this series, really the idea here\n\n432\n00:24:49.070 --> 00:24:52.710\nhas been just to see the results that\nit generates, which is perfectly fine.\n\n433\n00:24:52.710 --> 00:24:55.190\nThis time, when I go to messages though,\n\n434\n00:24:55.190 --> 00:24:58.360\nit has more than just completed\nsuccessfully or, Ronnie, you don't know\n\n435\n00:24:58.360 --> 00:25:02.730\nhow to type, is what it actually normally\nsays when it shows up all in red, right?\n\n436\n00:25:02.730 --> 00:25:07.389\nSo it tells me that ten rows were\naffected but now notice right here.\n\n437\n00:25:07.389 --> 00:25:10.590\nOkay, let me try to do this\nwithout making us sea sick.\n\n438\n00:25:10.590 --> 00:25:13.200\nNotice that the sales territory it got\n\n439\n00:25:13.200 --> 00:25:16.850\nread 20 times to actually\nbring that information in.\n\n440\n00:25:16.850 --> 00:25:19.930\nOkay, now because of all\nthe joins that I had.\n\n441\n00:25:19.930 --> 00:25:26.760\nNotice that this table which is\nthe other table, 689 reads instead.\n\n442\n00:25:26.760 --> 00:25:30.520\nSo that's a pretty hefty hit when\nwe start taking a look at just\n\n443\n00:25:30.520 --> 00:25:35.010\nthe basics here of\nthe idea of input output.\n\n444\n00:25:35.010 --> 00:25:38.990\nNow there's a neat view that you and\nI can see, though, okay?\n\n445\n00:25:38.990 --> 00:25:43.090\nUp here on my toolbar, let me get up here.\n\n446\n00:25:43.090 --> 00:25:45.990\nSee if I can zoom in a little bit more so\nwe can see it.\n\n447\n00:25:45.990 --> 00:25:48.280\nThere we go, that's a little bit better.\n\n448\n00:25:48.280 --> 00:25:53.050\nTo the right of Debug, you'll see this\ncheck mark which I'm not so worried about,\n\n449\n00:25:53.050 --> 00:25:56.745\nparse but it's the one next to it\nthat we call an Execution Plan.\n\n450\n00:25:56.745 --> 00:26:02.570\nAn estimated Execution Plan that will\nshow us a little bit more detail and\n\n451\n00:26:02.570 --> 00:26:06.024\neven a map of how that query got run,\nokay?\n\n452\n00:26:06.024 --> 00:26:09.503\nAnd so that's the one that we're gonna\ntake a look at just briefly here,\n\n453\n00:26:09.503 --> 00:26:13.270\nwe're not going to spend a tremendous\namount of time in it, okay?\n\n454\n00:26:13.270 --> 00:26:17.200\nBut there we go, so now I'm actually\nshowing the execution plan itself\n\n455\n00:26:19.776 --> 00:26:22.560\nTrying to make sure we can see it.\n\n456\n00:26:22.560 --> 00:26:27.060\nAnd so now, if I hover over that very\nfirst one on the select statement,\n\n457\n00:26:28.130 --> 00:26:32.850\nwhat we're looking at is where it\nsays Estimated Subtree Cost, okay?\n\n458\n00:26:32.850 --> 00:26:35.395\nNow if one is, let's say 100%.\n\n459\n00:26:35.395 --> 00:26:40.515\nNow, I don't know exactly what the numbers\nare, but let's just say that 1.00 is 100%.\n\n460\n00:26:40.515 --> 00:26:47.230\nEstimated Subtree cost,\nlet's say is gonna be 0.77, or 77%, okay?\n\n461\n00:26:47.230 --> 00:26:49.940\nSo those numbers, I'm making them up, but\n\n462\n00:26:49.940 --> 00:26:52.720\njust kind of do that reference\nflip with me right now.\n\n463\n00:26:52.720 --> 00:26:56.780\nSo let's say that it took 77% to\njust run that cost here and so\n\n464\n00:26:56.780 --> 00:27:00.130\nif you were to take a look,\nthere's 29% of it, okay?\n\n465\n00:27:00.130 --> 00:27:03.833\nAnd then, there's 70% here and\nthe clustered index scan.\n\n466\n00:27:03.833 --> 00:27:08.663\nSo you can see where it really did cost\nthe system pretty much just to be able to\n\n467\n00:27:08.663 --> 00:27:14.280\ncreate that clustered index, to scan that\nthing more than anything else that we saw.\n\n468\n00:27:14.280 --> 00:27:18.100\nThat's what it actually ended up doing\nhere, was doing something like that.\n\n469\n00:27:19.120 --> 00:27:24.944\nNow, the key though, is by taking\na look at, when we create this view.\n\n470\n00:27:24.944 --> 00:27:28.690\nI'm gonna turn this statistics off for\nright now.\n\n471\n00:27:30.274 --> 00:27:32.406\nSo I'm just turning it off.\n\n472\n00:27:32.406 --> 00:27:36.890\nI wanted to kinda clear the bottom,\nis I wanted to do.\n\n473\n00:27:36.890 --> 00:27:38.820\nWe're gonna create this view, but\n\n474\n00:27:38.820 --> 00:27:44.850\nthis view is also gonna be clustered\nas well, and also indexed.\n\n475\n00:27:44.850 --> 00:27:47.740\nNow when I create this view, there's\na couple of things that have to be done,\n\n476\n00:27:47.740 --> 00:27:49.390\nespecially when you're using a summary.\n\n477\n00:27:50.410 --> 00:27:55.280\nSo if you have some type of\naggregate here you must have\n\n478\n00:27:55.280 --> 00:27:58.310\nthis as being a function, okay?\n\n479\n00:27:58.310 --> 00:28:01.190\nThere's no ands, if and\nbuts about this, right?\n\n480\n00:28:01.190 --> 00:28:03.020\nSo you wanna create an index view and\n\n481\n00:28:03.020 --> 00:28:08.080\nthere is an aggregate in there you must\nactually use the account underscore big\n\n482\n00:28:08.080 --> 00:28:13.000\nfunction to essentially count all\nthe rows here to do what it needs to do.\n\n483\n00:28:13.000 --> 00:28:13.880\nYou don't have that?\n\n484\n00:28:13.880 --> 00:28:16.950\nThe actual view that you create here and\n\n485\n00:28:16.950 --> 00:28:20.590\nthe clustered index view that you'll\ncreate, it will not work, okay.\n\n486\n00:28:20.590 --> 00:28:25.473\nSo I hope I've emphasized that enough,\nthat's what I'm pretty much hoping is that\n\n487\n00:28:25.473 --> 00:28:28.243\nthat is enough of an emphasis\nthat let you know.\n\n488\n00:28:28.243 --> 00:28:31.150\nHey, I wonder if he's actually\nstressing that because of the exam?\n\n489\n00:28:31.150 --> 00:28:35.388\nYes, that's pretty much\ndirect as much as I can.\n\n490\n00:28:35.388 --> 00:28:39.770\nSo I'm gonna go ahead and create this\nview, we've actually talked about creating\n\n491\n00:28:39.770 --> 00:28:44.046\na view before, so I'm going to execute\nthat, and now that view will be created.\n\n492\n00:28:44.046 --> 00:28:47.925\nI just wanna make sure that\nit's actually there and\n\n493\n00:28:47.925 --> 00:28:52.530\nthis is called quantity by territory And\nit's under sales.\n\n494\n00:28:54.020 --> 00:28:57.260\nAnd there it is, so it's actually right\nthere which is perfectly fine and\n\n495\n00:28:57.260 --> 00:28:58.540\nthat's what we want.\n\n496\n00:28:58.540 --> 00:29:00.500\nNow the other part of this,\n\n497\n00:29:00.500 --> 00:29:05.670\nright, is now that we've created our view,\nis how do we index the view, okay.\n\n498\n00:29:05.670 --> 00:29:09.510\nSo the way that we index\nthe view is this right here.\n\n499\n00:29:09.510 --> 00:29:15.520\nCreate UNIQUE CLUSTERED INDEX on\nthat particular review, and then\n\n500\n00:29:15.520 --> 00:29:19.530\nyou have to give it a column or multiple\ncolumns that you're gonna index by.\n\n501\n00:29:19.530 --> 00:29:20.990\nIt's all up to you, okay?\n\n502\n00:29:20.990 --> 00:29:23.360\nI just did the single\ncolumn called Name but\n\n503\n00:29:23.360 --> 00:29:26.320\nyou could index by whatever you want to,\nor by every single column.\n\n504\n00:29:26.320 --> 00:29:29.640\nNot usually a great idea, but\nyou can actually do that if you choose to.\n\n505\n00:29:29.640 --> 00:29:35.180\nAnd here it is, IDX is the prefix I am\nusing for that, and then to also indicate\n\n506\n00:29:35.180 --> 00:29:41.170\na cluster I did CL and then this is based\non territory, is what I've done there.\n\n507\n00:29:41.170 --> 00:29:44.930\nSo, when I run that,\nit will actually execute, and\n\n508\n00:29:44.930 --> 00:29:47.930\nnow it tells me that it actually\ncreated a clustered index.\n\n509\n00:29:47.930 --> 00:29:53.090\nNow, the way that you and I though\nwill actually be able to see this And\n\n510\n00:29:53.090 --> 00:29:59.080\nbe able to tell this\nif I span that out and\n\n511\n00:29:59.080 --> 00:30:03.080\nunderneath sales v quantity by territory.\n\n512\n00:30:03.080 --> 00:30:08.680\nNotice that there is a node here called\nindexes and expand that out there it is.\n\n513\n00:30:08.680 --> 00:30:11.879\nSo if it doesn't show up here you\ndidn't properly index it, okay?\n\n514\n00:30:11.879 --> 00:30:15.506\nSo make sure you refresh so\nyou can see whether or\n\n515\n00:30:15.506 --> 00:30:18.972\nnot it actually showed up there,\nall right?\n\n516\n00:30:18.972 --> 00:30:22.560\nAll right now, I do need to tell\nyou something though, okay?\n\n517\n00:30:22.560 --> 00:30:28.113\nRight here, if I simply\n\n518\n00:30:28.113 --> 00:30:32.450\nrun the same select statement here, okay?\n\n519\n00:30:32.450 --> 00:30:37.500\nFrom using this view, I went ahead and\ntook out this little portion right here.\n\n520\n00:30:37.500 --> 00:30:40.550\nIf I run this you go, okay,\nRonnie you've created an index.\n\n521\n00:30:40.550 --> 00:30:45.730\nRun it, this should be much more,\nyou know, efficient, right?\n\n522\n00:30:45.730 --> 00:30:49.328\nBut you have to deal with SQL Server and\nthat's the key, okay?\n\n523\n00:30:49.328 --> 00:30:54.900\nSQL Server 2014 already has built\nin query optimizing, whatever\n\n524\n00:30:54.900 --> 00:30:58.620\nit's actually technically called, as I\ncan't remember off the top of my head.\n\n525\n00:30:58.620 --> 00:31:00.350\nBut whatever that thing is,\n\n526\n00:31:00.350 --> 00:31:03.260\nwhat that actually gives it\nthe ability to do is this.\n\n527\n00:31:03.260 --> 00:31:07.190\nIt can say Ronnie, I know you\ncreated the clustered index, okay?\n\n528\n00:31:07.190 --> 00:31:12.575\nI know that I have my query optimizer,\nI'm gonna choose to use query optimizer.\n\n529\n00:31:12.575 --> 00:31:17.391\n[LAUGH] So in other words, even if you\ndo all those work, it can say, look,\n\n530\n00:31:17.391 --> 00:31:20.950\nRonnie, I don't care about your indexing.\n\n531\n00:31:20.950 --> 00:31:24.350\nI think that mine's gonna be more\nefficient than the way that you did it.\n\n532\n00:31:24.350 --> 00:31:27.260\nSo instead, we're gonna use mine, okay.\n\n533\n00:31:27.260 --> 00:31:29.410\nNow if I run this and try and\n\n534\n00:31:29.410 --> 00:31:32.730\ndo that, I'm gonna see some It's\nnot gonna be much more efficient.\n\n535\n00:31:32.730 --> 00:31:37.130\nThere's some that can kind of wrap\nyour head to no end here, okay.\n\n536\n00:31:37.130 --> 00:31:40.840\nAnd that's because any time that SQL\nServer 2014 wants to it says, Ronnie, you\n\n537\n00:31:40.840 --> 00:31:44.300\ncan create all the indexes you want to,\nI'm gonna use it the way that I want to.\n\n538\n00:31:44.300 --> 00:31:45.589\nAnd I don't like yours and\n\n539\n00:31:45.589 --> 00:31:49.585\nI'll run mine and it would just repeat\nthe same thing over and over again, okay?\n\n540\n00:31:49.585 --> 00:31:54.934\nSo what you have to do, if you wanna\nactually see if your index actually\n\n541\n00:31:54.934 --> 00:32:00.009\nhelped any, is to add in just two\nLittle words, believe it or not,\n\n542\n00:32:00.009 --> 00:32:04.903\nand those two little words,\nI shouldn't say two little words,\n\n543\n00:32:04.903 --> 00:32:09.290\nthere they are, okay with and\nthen no expand right here.\n\n544\n00:32:09.290 --> 00:32:14.420\nWhen you do that, you're saying look, pay\nattention to my index, SQL server 2014.\n\n545\n00:32:14.420 --> 00:32:16.850\nDon't use your query, do mine.\n\n546\n00:32:16.850 --> 00:32:19.250\nDon't do yours instead.\n\n547\n00:32:19.250 --> 00:32:22.540\nIs what we're saying at\nthis point to do that.\n\n548\n00:32:22.540 --> 00:32:29.470\nSo now when I run that and\nI'm gonna hit my execution there, okay,\n\n549\n00:32:29.470 --> 00:32:34.860\nnow I can take a look here and notice it\nonly does those 10 rows affected, okay.\n\n550\n00:32:34.860 --> 00:32:38.150\nNow the reason why is that I did\nnot turn that index back on,\n\n551\n00:32:38.150 --> 00:32:42.460\nlet me do something here,\nand we'll run it again.\n\n552\n00:32:42.460 --> 00:32:46.200\nSo, I'm gonna just turn\nthat index back on here.\n\n553\n00:32:46.200 --> 00:32:46.960\nJust briefly.\n\n554\n00:32:48.540 --> 00:32:51.970\nNow, you do wanna make sure you don't\nleave that thing on all the time, okay.\n\n555\n00:32:51.970 --> 00:32:55.970\nBecause every single query will then\npop up with that same information.\n\n556\n00:32:55.970 --> 00:32:58.770\nAnd you might want that, but\nyou may not want all that, as well.\n\n557\n00:32:58.770 --> 00:33:02.100\nSo, let me select the whole thing,\nright here.\n\n558\n00:33:03.580 --> 00:33:05.170\nAnd execute.\n\n559\n00:33:05.170 --> 00:33:10.840\nAnd now under the messages,\nlet's see if I can get it up here.\n\n560\n00:33:10.840 --> 00:33:12.030\nAnd let's see the difference.\n\n561\n00:33:14.210 --> 00:33:18.140\nWe went from 20 to 2 logical reads, okay?\n\n562\n00:33:18.140 --> 00:33:21.090\nThat's an insane performance\nimprovement right.\n\n563\n00:33:21.090 --> 00:33:23.640\nWhen you start seeing\nsomething like that okay.\n\n564\n00:33:23.640 --> 00:33:25.370\nis that the, she said,\nlook I just ran through that.\n\n565\n00:33:25.370 --> 00:33:27.040\nI ran through it twice.\n\n566\n00:33:27.040 --> 00:33:29.530\nAnd I was able to actually\nrun that entire thing.\n\n567\n00:33:29.530 --> 00:33:32.470\nIf we go back up and\ntake a look at the execution plan.\n\n568\n00:33:33.640 --> 00:33:41.554\nAnd now, when I hover over this here,\nwell remember before it was .77 right?\n\n569\n00:33:41.554 --> 00:33:46.290\nSo about 77% if you were to\ndo that as a scale right.\n\n570\n00:33:46.290 --> 00:33:52.605\nWell now the estimated\nsubtree costs says what .003.\n\n571\n00:33:52.605 --> 00:33:59.040\nWell, this obviously ran much faster and\nit was now that I told it to do what?\n\n572\n00:33:59.040 --> 00:34:03.140\nTo use the actual index\nit'd absolutely mattered.\n\n573\n00:34:03.140 --> 00:34:07.490\nIf I don't do it and I think I'd just run\nit and it shows me the exact same thing\n\n574\n00:34:07.490 --> 00:34:14.540\nthat's where that SQL query optimizer\nsays, Ronnie, your're indexing, forget it.\n\n575\n00:34:14.540 --> 00:34:15.710\nI don't want that.\n\n576\n00:34:15.710 --> 00:34:21.310\nI'm gonna do it my way with the actual\nexpand, right, inside there.\n\n577\n00:34:21.310 --> 00:34:27.690\nYou absolutely get it to actually\ntell it hey, I'm the boss and\n\n578\n00:34:27.690 --> 00:34:31.390\nI want to run it the way that I\nwant you to run it instead of it.\n\n579\n00:34:31.390 --> 00:34:32.570\nSo, with the no expand.\n\n580\n00:34:32.570 --> 00:34:34.100\nI'm about to say with expand.\n\n581\n00:34:34.100 --> 00:34:35.200\nShould not have said that.\n\n582\n00:34:35.200 --> 00:34:36.750\nWith no expand.\n\n583\n00:34:36.750 --> 00:34:39.760\nAnd this will allow you to actually see\n\n584\n00:34:39.760 --> 00:34:43.660\nwhy being able to do things like\nindexes are really important.\n\n585\n00:34:43.660 --> 00:34:48.362\nEspecially once you learn how to tweak\nit and once you understand the basics\n\n586\n00:34:48.362 --> 00:34:51.882\nof creating those types of\nindexes how much it can help.\n\n587\n00:34:51.882 --> 00:34:57.303\nTo go from a 0.77 to a 0.003\nin the execution time.\n\n588\n00:34:58.430 --> 00:34:59.150\nYou can't beat that.\n\n589\n00:34:59.150 --> 00:35:02.190\nThat is incredibly much faster.\n\n590\n00:35:02.190 --> 00:35:03.860\n>> Yeah.\nYeah, definitely reduced the performance\n\n591\n00:35:03.860 --> 00:35:04.790\ncost overall.\n\n592\n00:35:04.790 --> 00:35:05.510\nI tell you.\n\n593\n00:35:05.510 --> 00:35:08.520\nLot of great information in this episode.\n\n594\n00:35:08.520 --> 00:35:12.050\nNow, Ronnie I know that you still have\nsome more that we need to discuss, but\n\n595\n00:35:12.050 --> 00:35:13.050\nI'm looking at the time and\n\n596\n00:35:13.050 --> 00:35:15.910\nit does look like we're coming\nto the end of another episode.\n\n597\n00:35:15.910 --> 00:35:19.420\nSo we're going to go ahead, and we're\nprobably going to go into a part three.\n\n598\n00:35:19.420 --> 00:35:21.920\nBut before we do, Ronnie,\ngot any other advice?\n\n599\n00:35:21.920 --> 00:35:24.490\n>> Well, just again,\ntake a look at the indexing right, and\n\n600\n00:35:24.490 --> 00:35:26.660\nmake sure you pay attention to the syntax.\n\n601\n00:35:26.660 --> 00:35:29.660\nThat's going to be key, especially when\nyou're getting ready for the exam.\n\n602\n00:35:29.660 --> 00:35:33.210\nThe only way to make sure you\naccomplish this is not by reading but\n\n603\n00:35:33.210 --> 00:35:36.460\nby doing it over and\nover again until it makes sense.\n\n604\n00:35:36.460 --> 00:35:40.160\nSo make sure you take some time to\nrun through your own SQL server and\n\n605\n00:35:40.160 --> 00:35:42.150\nbe able to actually perform\nsome of these functions.\n\n606\n00:35:42.150 --> 00:35:43.830\n>> Ronnie,\nlook forward to seeing you in part three.\n\n607\n00:35:43.830 --> 00:35:45.925\nAnd we look forward to seeing\nyou as well in part three but\n\n608\n00:35:45.925 --> 00:35:47.850\nwe're gonna go ahead to\ntake this time to sign out.\n\n609\n00:35:47.850 --> 00:35:49.250\nI've been your host, Wes Bryan.\n\n610\n00:35:49.250 --> 00:35:50.070\n>> And I'm Ronnie Wong.\n\n611\n00:35:50.070 --> 00:35:53.734\n>> And we'll see you next time.\n\n612\n00:35:53.734 --> 00:35:56.532\n[MUSIC]\n\n",
          "vimeoId": "165148080"
        },
        {
          "description": "In this episode, Wes and Ronnie continue their discussion on creating and altering views with querying Microsoft SQL Server 2014. They discuss topics like ensuring code non-regression and data validation.",
          "length": "824",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-3-create_and_alter_views_pt3-042816-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-3-create_and_alter_views_pt3-042816-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-2-3-create_and_alter_views_pt3-042816-1-sm.jpg",
          "title": "Create and Alter Views Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.937 --> 00:00:14.990\nWelcome back to another exciting\nepisode here at Here at IT Pro TV.\n\n3\n00:00:14.990 --> 00:00:17.710\nI am your host, Wes Bryan and\nin today's episode,\n\n4\n00:00:17.710 --> 00:00:21.190\nwe are moving through querying\nMicrosoft SQL server 2014 and\n\n5\n00:00:21.190 --> 00:00:26.540\nwe are coming back with a part three\nin creating and altering views.\n\n6\n00:00:26.540 --> 00:00:30.450\nAnd we did this because, well, we got\na little bit more information to tell you,\n\n7\n00:00:30.450 --> 00:00:32.450\nbut we couldn't quite fit\nit in the last segment.\n\n8\n00:00:32.450 --> 00:00:34.960\nJoining me back in the studio again is Mr.\nRonnie Wong.\n\n9\n00:00:34.960 --> 00:00:36.140\nRonnie, how are you doing today, sir?\n\n10\n00:00:36.140 --> 00:00:39.060\n>> I am doing fine today as we\ncontinue on taking a look at just\n\n11\n00:00:39.060 --> 00:00:42.300\na little bit more information about\ncreating and altering views here.\n\n12\n00:00:42.300 --> 00:00:45.280\nAnd the reason we extended part three\nis because Wes let me talk to long.\n\n13\n00:00:45.280 --> 00:00:47.530\nThat's what usually ends up happening.\n\n14\n00:00:47.530 --> 00:00:50.590\nSo now we have a little bit\nmore information to cover, and\n\n15\n00:00:50.590 --> 00:00:55.240\nthe reason why we have to cover again is\nbecause of the exam objectives themselves.\n\n16\n00:00:55.240 --> 00:00:58.240\nNow it's one of those things, when you\ntake a look at the exam objectives and\n\n17\n00:00:58.240 --> 00:01:01.030\nyou start studying, it's easy enough\nto go, look, they're wanting me to\n\n18\n00:01:01.030 --> 00:01:04.530\ncreate a view, they're wanting me to\nalter a view, wanting me to drop a view.\n\n19\n00:01:04.530 --> 00:01:05.500\nThat's easy enough.\n\n20\n00:01:05.500 --> 00:01:08.638\nBut then you run across\na statement like this,\n\n21\n00:01:08.638 --> 00:01:14.530\nensure code non-regression by\nkeeping consistent signature for\n\n22\n00:01:14.530 --> 00:01:19.410\nprocedures views and functions, and\nall of a sudden it leaves you with your\n\n23\n00:01:19.410 --> 00:01:23.620\nhead kind of like well what are they boy\nwhat the heck are they talking about?\n\n24\n00:01:23.620 --> 00:01:25.710\n>> I can tell you that\nreally rolls off the tongue,\n\n25\n00:01:25.710 --> 00:01:28.630\nbecause Ronnie told me, right before\nwe started, you can read that.\n\n26\n00:01:28.630 --> 00:01:32.055\nAnd I said yes I can, but\nyou're gonna be the one saying it.\n\n27\n00:01:32.055 --> 00:01:34.530\n[LAUGH]\n>> Yeah so when we start taking a look at\n\n28\n00:01:34.530 --> 00:01:39.580\nthis particular idea we do have to break\nit down into some components here right?\n\n29\n00:01:39.580 --> 00:01:44.520\nSo when we start talking about this idea\nof ensuring code non regression well\n\n30\n00:01:44.520 --> 00:01:49.040\nlet's go ahead and talk about what that\nreally means for us at this point okay?\n\n31\n00:01:49.040 --> 00:01:54.510\nWhen you start working with SQL server\n2014 undoubtedly it's not really the first\n\n32\n00:01:54.510 --> 00:01:58.280\nversion of SQL server that probably\nyour company has actually worked with.\n\n33\n00:01:58.280 --> 00:02:02.080\nAnd, it's probably not the only\nversion of sequel server that its also\n\n34\n00:02:02.080 --> 00:02:03.570\ntalking with as well.\n\n35\n00:02:03.570 --> 00:02:07.480\nAnd you might find out that elements\nthat exist inside of sequel server 2014,\n\n36\n00:02:07.480 --> 00:02:13.040\nwere simply carried over from earlier\nversions such as 2005 and 2008.\n\n37\n00:02:13.040 --> 00:02:17.760\nAnd some of the different things that\nwe have in there actually should work.\n\n38\n00:02:17.760 --> 00:02:20.730\nNow, the thing that you wanna\nworry about here is the idea of\n\n39\n00:02:20.730 --> 00:02:23.880\nensuring code non regression here\n\n40\n00:02:23.880 --> 00:02:28.800\nis saying we don't want those things that\nare connecting to our database to break.\n\n41\n00:02:28.800 --> 00:02:31.080\nAnd that is what we're trying to.\n\n42\n00:02:31.080 --> 00:02:35.700\nSo the very fact is there's a lot of\nthings that can end up breaking and so\n\n43\n00:02:35.700 --> 00:02:40.510\nwhat we wanna do here is that we actually\nhave to think about two things, okay?\n\n44\n00:02:40.510 --> 00:02:44.920\nOne, of course,\nis that things can break by accident.\n\n45\n00:02:44.920 --> 00:02:49.430\nNow, when we start dealing with something\nlike that, they get accidentally broken\n\n46\n00:02:49.430 --> 00:02:53.320\nbecause people accidentally\ndelete things like entire tables.\n\n47\n00:02:53.320 --> 00:02:56.880\nBy right-clicking and going, I wonder\nif this delete really means delete.\n\n48\n00:02:56.880 --> 00:02:58.550\nAnd, believe it or not, it really does.\n\n49\n00:02:58.550 --> 00:03:06.310\nIn Excel, in not Excel, in SQL Server\n2014 Whatever version I'm in, 2014 here.\n\n50\n00:03:06.310 --> 00:03:09.050\nIt really does actually\ndelete the object out.\n\n51\n00:03:09.050 --> 00:03:11.450\nAnd so it could be where you break\n\n52\n00:03:11.450 --> 00:03:15.720\nthe actual database connections by\njust deleting out of that object.\n\n53\n00:03:15.720 --> 00:03:19.820\nSame thing even with a view, you delete\nout a view and somebody was connected to\n\n54\n00:03:19.820 --> 00:03:24.080\nit, well you have issues there too where\nnow something else has changed and\n\n55\n00:03:24.080 --> 00:03:25.840\nthat's something that\nyou have to worry about.\n\n56\n00:03:25.840 --> 00:03:26.460\nOkay.\n\n57\n00:03:26.460 --> 00:03:29.610\nThe idea of ensuring code non regression,\nright?\n\n58\n00:03:29.610 --> 00:03:33.580\nIs to say look we wanna actually\nsee what we can put in place\n\n59\n00:03:33.580 --> 00:03:35.700\nas our views are being created.\n\n60\n00:03:35.700 --> 00:03:41.088\nEspecially that is not going to break\nthings that might already exist.\n\n61\n00:03:41.088 --> 00:03:44.390\nAnd we wanna make sure people\ndon't accidentally break things\n\n62\n00:03:45.420 --> 00:03:48.010\nbecause they've done\nsomething just that silly.\n\n63\n00:03:48.010 --> 00:03:52.700\nNow the other part of this of course\nIs the Malicious side of things too.\n\n64\n00:03:52.700 --> 00:03:56.030\nUnauthorized access is still one of\nthe biggest things that we have to\n\n65\n00:03:56.030 --> 00:04:00.880\nworry about, and of course things like\ndata input validation, all these things,\n\n66\n00:04:00.880 --> 00:04:04.480\nhelp us to insure things like\nthe data integrity itself.\n\n67\n00:04:04.480 --> 00:04:07.370\nAnd that's something that we\nalso have to worry about too.\n\n68\n00:04:07.370 --> 00:04:11.910\nSo, in that side of things one of\nthe great things about the idea of using\n\n69\n00:04:11.910 --> 00:04:12.910\nviews.\n\n70\n00:04:12.910 --> 00:04:18.860\nAnd of course stored procedures and\nthe table inline types of functions\n\n71\n00:04:18.860 --> 00:04:22.640\nthat we've been, inline table value\nfunctions that we've been talking about,\n\n72\n00:04:22.640 --> 00:04:26.080\nis that all these can actually we\ncan add some type of signature.\n\n73\n00:04:26.080 --> 00:04:31.330\nSome type of Digital Signature to it to\nensure that somebody doesn't modify that\n\n74\n00:04:31.330 --> 00:04:36.140\ninstead to cause some havoc for\nus as well without us knowing about it.\n\n75\n00:04:36.140 --> 00:04:40.480\nSo, it's actually one way to be able\nto protect yourselves in that way and\n\n76\n00:04:40.480 --> 00:04:41.590\nto think about it.\n\n77\n00:04:41.590 --> 00:04:43.500\nSo, let me kinda give you a for\ninstance here.\n\n78\n00:04:43.500 --> 00:04:46.530\nNow, we've actually talked about\nthis during our entire series, but\n\n79\n00:04:46.530 --> 00:04:49.190\na view is one of the most\nuseful things that we can have\n\n80\n00:04:49.190 --> 00:04:53.920\nbecause it really does offer us\na fairly limited view of what we're\n\n81\n00:04:53.920 --> 00:04:57.799\ngiving people access to our database to be\nable to see and to be able to use, right?\n\n82\n00:04:58.870 --> 00:04:59.370\nWith that,\n\n83\n00:04:59.370 --> 00:05:03.820\nwe are also creating what we call\na layer of abstraction at the same time.\n\n84\n00:05:03.820 --> 00:05:07.570\nThat layer of abstraction essentially\nsays we're not going to give\n\n85\n00:05:07.570 --> 00:05:11.730\nsomebody direct access into our\nbase database tables anymore.\n\n86\n00:05:11.730 --> 00:05:15.590\nWhat we are doing is giving\nthem access to that view.\n\n87\n00:05:15.590 --> 00:05:19.880\nAnd that means that you can use your\napplication to connect to that view and\n\n88\n00:05:19.880 --> 00:05:22.330\nyou can use your application to\nrun a query against that view.\n\n89\n00:05:22.330 --> 00:05:24.560\nYou can use your\napplication to do that but\n\n90\n00:05:24.560 --> 00:05:28.610\nit doesn't actually affect\nthe underlying database tables, okay.\n\n91\n00:05:28.610 --> 00:05:33.820\nSo that really helps us out when we create\nthings like that to help us to do that.\n\n92\n00:05:33.820 --> 00:05:39.170\nSo, the nice thing is also, then,\nwe can modify the actual view\n\n93\n00:05:39.170 --> 00:05:43.430\nto ensure that hey, when they actually\nconnect in, they can actually have that\n\n94\n00:05:43.430 --> 00:05:47.170\ncomplete modification without actually\nbreaking anything in the meantime,\n\n95\n00:05:47.170 --> 00:05:50.740\nas well, if they're connecting using\nmultiple applications as well.\n\n96\n00:05:50.740 --> 00:05:54.060\nSo views and being able to actually\nunderstand this idea of nonregression\n\n97\n00:05:54.060 --> 00:05:56.170\nare some of the things we\nactually need to think about,\n\n98\n00:05:56.170 --> 00:05:58.330\nand we'll see a couple of\nterms to help us out here.\n\n99\n00:05:58.330 --> 00:06:01.830\n>> So Ronnie, in general when you talk\nabout nonregression, if you do make\n\n100\n00:06:01.830 --> 00:06:05.050\na modification to one of those tables,\nyou're trying really just to make sure\n\n101\n00:06:05.050 --> 00:06:08.580\nthat whatever the intended result is\nthat you actually get that result.\n\n102\n00:06:08.580 --> 00:06:12.920\nRight, yeah, the idea here is simply\nwhat we call data validation,\n\n103\n00:06:12.920 --> 00:06:15.010\nnot data, data integrity, right?\n\n104\n00:06:15.010 --> 00:06:18.640\nThe idea of making sure that our data\nremains the way that it needs to.\n\n105\n00:06:18.640 --> 00:06:21.980\nSo remember that sometimes\nviews can actually have several\n\n106\n00:06:21.980 --> 00:06:23.340\nelements involved in them.\n\n107\n00:06:23.340 --> 00:06:27.130\nSo let's go back to my machine here\njust briefly for a few minutes here.\n\n108\n00:06:27.130 --> 00:06:28.580\nThat will help us out.\n\n109\n00:06:28.580 --> 00:06:34.230\nNow one of the ways that we can help\nprotect ourselves here, of course,\n\n110\n00:06:34.230 --> 00:06:39.880\nis by simply using this particular\noption which is the with encryption.\n\n111\n00:06:39.880 --> 00:06:43.330\nNow you can run these things together,\nwe're not gonna run it again here, but\n\n112\n00:06:43.330 --> 00:06:47.640\nyou can actually run these things together\nto make sure that the encryption here is\n\n113\n00:06:47.640 --> 00:06:52.850\nnot a very strong encryption, but at least\nobfuscates stuff a little bit more where\n\n114\n00:06:52.850 --> 00:06:57.600\nthey can't actually see where the actual\ntables are gonna be and stuff like that.\n\n115\n00:06:57.600 --> 00:07:01.000\nSo this helps a little bit when\nwe start thinking about it.\n\n116\n00:07:01.000 --> 00:07:05.540\nBut the other thing that it does, again,\nand I think I've mentioned it before,\n\n117\n00:07:05.540 --> 00:07:09.110\nis that, when replication\nhappens between SQL servers,\n\n118\n00:07:09.110 --> 00:07:11.270\nthe with encryption will prevent that.\n\n119\n00:07:11.270 --> 00:07:13.770\nSo if I wanted to make sure that that view\n\n120\n00:07:13.770 --> 00:07:17.340\ndoesn't spread out beyond the means\nof what I believe it should be.\n\n121\n00:07:17.340 --> 00:07:19.070\nI'm also going to implement this.\n\n122\n00:07:19.070 --> 00:07:22.060\nNow anytime you do this, you might find\nout that there's a limitation that it's\n\n123\n00:07:22.060 --> 00:07:26.100\nonly going to be done on the actual\nenterprise level license instead of\n\n124\n00:07:26.100 --> 00:07:28.700\nthe standard version and\nit's the one that I'm running here.\n\n125\n00:07:28.700 --> 00:07:32.120\nBut you do need to pay attention\nto things like that as well.\n\n126\n00:07:32.120 --> 00:07:35.870\nNow the other thing that can also happen\nis that with the view even though we don't\n\n127\n00:07:35.870 --> 00:07:39.720\ntend to talk about it so\nmuch here you can actually take a view and\n\n128\n00:07:39.720 --> 00:07:44.880\nyou can even modify data inside of\nyour database with a view as well and\n\n129\n00:07:44.880 --> 00:07:47.320\nthis is where you must be careful, right?\n\n130\n00:07:47.320 --> 00:07:53.420\nThe very fact is a view, essentially,\nis a select query that we run.\n\n131\n00:07:53.420 --> 00:07:56.190\nAnd then we can filter it\nout by using the term where.\n\n132\n00:07:56.190 --> 00:07:57.840\nThat becomes our filter.\n\n133\n00:07:57.840 --> 00:08:02.560\nWell, because of the way that views work,\nwe can also turn that around to modify and\n\n134\n00:08:02.560 --> 00:08:06.380\nto alter the actual data\nthat's inside of our database.\n\n135\n00:08:06.380 --> 00:08:08.850\nAnd the problem that we have\nis that we can alter it so\n\n136\n00:08:08.850 --> 00:08:12.660\nmuch that the results that I might\nhave actually tried to filter out\n\n137\n00:08:12.660 --> 00:08:15.400\nare no longer actually able\nto be filtered out anymore.\n\n138\n00:08:15.400 --> 00:08:19.730\nIn other words, I can modify something to\nthe point where I can't find it anymore,\n\n139\n00:08:19.730 --> 00:08:22.550\nand that can become problematic as well.\n\n140\n00:08:22.550 --> 00:08:27.140\nNow when you start doing something like\nthat there's another option that is called\n\n141\n00:08:27.140 --> 00:08:28.920\nWith check, okay?\n\n142\n00:08:28.920 --> 00:08:33.450\nNow again we're not going into that too\nmuch but you do need to know at least\n\n143\n00:08:33.450 --> 00:08:37.620\nthese options here so that when you start\nseeing it listed here, and you start\n\n144\n00:08:37.620 --> 00:08:41.630\nseeing with check here, that's actually\ngoing to say look, here's what has to\n\n145\n00:08:41.630 --> 00:08:45.920\nhappen if you're going to create this view\nis that inside of that where clause what\n\n146\n00:08:45.920 --> 00:08:51.690\nwill end up happening it will only allow\nyou to modify what you can filter there.\n\n147\n00:08:51.690 --> 00:08:54.130\nSo that way you can't\naccidentally modify and\n\n148\n00:08:54.130 --> 00:08:58.380\nchange anything else inside of that\nview but you can only modify and\n\n149\n00:08:58.380 --> 00:09:01.210\nchange what's actually\ninside of the where clause.\n\n150\n00:09:01.210 --> 00:09:06.400\nAnd that now limits your ability to cause\nmore damage than you might think as well.\n\n151\n00:09:06.400 --> 00:09:07.040\nOkay?\n\n152\n00:09:07.040 --> 00:09:10.700\nSo there's a lot of options that\nyou do have available to you But,\n\n153\n00:09:10.700 --> 00:09:13.400\nthese are just some of\nthe basic ones as well.\n\n154\n00:09:13.400 --> 00:09:18.510\nThe other things that also ensure that\nwe are not going to break things so that\n\n155\n00:09:18.510 --> 00:09:22.050\nwe can't find them again are things that\nare normally implemented when we create\n\n156\n00:09:22.050 --> 00:09:26.920\nthe tables and the linking between them by\nusing, of course, table constraints, too.\n\n157\n00:09:26.920 --> 00:09:31.300\nAnd so we're gonna end up seeing that when\nwe get into our table constraints episode.\n\n158\n00:09:31.300 --> 00:09:34.610\nBut the very fact is, that we actually\nhave to take all of this into\n\n159\n00:09:34.610 --> 00:09:39.160\nconsideration as we start to actually\nuse these more complex types of things.\n\n160\n00:09:39.160 --> 00:09:43.180\nLike views, and the table functions\nthat we talked about, and\n\n161\n00:09:43.180 --> 00:09:45.570\nalso other functions that\nwe have available to us.\n\n162\n00:09:45.570 --> 00:09:47.220\nTemporary tables, you name it.\n\n163\n00:09:47.220 --> 00:09:49.770\nAll of these are actually key elements,\nright?\n\n164\n00:09:49.770 --> 00:09:52.330\nThat's gonna help us to ensure\nthat we don't break anything.\n\n165\n00:09:52.330 --> 00:09:56.500\nOur database will be up and ready to\nbe queried anytime that we need to.\n\n166\n00:09:56.500 --> 00:10:00.490\nSo, do pay attention to things like\nthe signing we can do with those objects.\n\n167\n00:10:00.490 --> 00:10:04.410\nDo pay attention again, to things\nlike using the with encryption and\n\n168\n00:10:04.410 --> 00:10:07.380\nalso with the check option\nthat's also there as well.\n\n169\n00:10:07.380 --> 00:10:09.140\nNow we'll again, validate against that.\n\n170\n00:10:09.140 --> 00:10:11.805\nSo be sure and make sure you're aware.\n\n171\n00:10:11.805 --> 00:10:14.530\n>> Ronnie when you apply a Digital\nSignature to your databases, is this\n\n172\n00:10:14.530 --> 00:10:19.380\npretty much like you would any checksum\nwhere you can prove what the state of\n\n173\n00:10:19.380 --> 00:10:22.380\nthe database is on the original checksum,\nrun the same type or digital or\n\n174\n00:10:22.380 --> 00:10:26.630\nchecksum again and if the value match then\nyou know the data has not been modified.\n\n175\n00:10:26.630 --> 00:10:28.440\nIt can be a hashing type of value, but\n\n176\n00:10:28.440 --> 00:10:32.510\nthis one also keys into that idea\nthat digital certificate too.\n\n177\n00:10:32.510 --> 00:10:34.700\nIs to make sure you get that\ndigital certificate and\n\n178\n00:10:34.700 --> 00:10:37.350\nthat you sign that particular\nview that you have.\n\n179\n00:10:37.350 --> 00:10:42.310\nSo, if any modification happens that\nview is actually immediately noted that,\n\n180\n00:10:42.310 --> 00:10:45.140\nhey this is not the view that you\nthink it's actually gonna be.\n\n181\n00:10:45.140 --> 00:10:48.080\nSo it actually allows you to\nnote unauthorized changes\n\n182\n00:10:48.080 --> 00:10:50.030\nthat may have happened as well.\n\n183\n00:10:50.030 --> 00:10:52.760\nSo you do wanna make sure you\npay attention to all those\n\n184\n00:10:52.760 --> 00:10:54.680\noptions that are available to us.\n\n185\n00:10:54.680 --> 00:10:58.700\nAnd in terms of security impacts that's\nexactly what happens here right.\n\n186\n00:10:58.700 --> 00:11:02.870\nIs that we have to think about the idea\nof securing our data in multiple ways.\n\n187\n00:11:02.870 --> 00:11:05.982\nNot only do we wanna secure\nagainst unauthorized access.\n\n188\n00:11:05.982 --> 00:11:09.420\nWe wanna make sure that the data remains\nin the state that it actually is in,\n\n189\n00:11:09.420 --> 00:11:11.550\nin terms of our data integrity, so\n\n190\n00:11:11.550 --> 00:11:15.348\nthat nobody's modifying data\nwithout any authorization at all.\n\n191\n00:11:15.348 --> 00:11:17.100\nWe also wanna make sure that when we can,\n\n192\n00:11:17.100 --> 00:11:21.090\nwe provide some level of encryption,\nhiding the data, right?\n\n193\n00:11:21.090 --> 00:11:24.170\nBehind the encryption, so\nthat people can't just easily\n\n194\n00:11:24.170 --> 00:11:27.710\nview it without having the proper\nkey in available there too.\n\n195\n00:11:27.710 --> 00:11:30.500\nso the signature helps us\nto provide all of that and\n\n196\n00:11:30.500 --> 00:11:35.150\nthen adding in these little extra\nstatements, as we've talked about here,\n\n197\n00:11:35.150 --> 00:11:39.130\nare really helpful in making sure that\nwhen do some of the silly things that we\n\n198\n00:11:39.130 --> 00:11:43.990\ndo, that it might actually limit\nthe damage if not actually remove\n\n199\n00:11:43.990 --> 00:11:48.280\nit out of the possibility of damaging\nthe structure that we have in place.\n\n200\n00:11:48.280 --> 00:11:51.160\nSo do realize that there\nare actually that are built in so\n\n201\n00:11:51.160 --> 00:11:55.780\nthat we don't have any type of code\nregression that we're actually going\n\n202\n00:11:55.780 --> 00:11:59.300\nto have to worry about too much, but\na lot of it comes down to vigilance.\n\n203\n00:11:59.300 --> 00:12:02.280\nIn other words before you run that\nmake sure you know what the actual\n\n204\n00:12:02.280 --> 00:12:03.760\nprocedure's gonna do.\n\n205\n00:12:03.760 --> 00:12:06.150\nDo not run against a production database.\n\n206\n00:12:06.150 --> 00:12:08.740\nSome particular stored procedure or\n\n207\n00:12:08.740 --> 00:12:13.030\nsome code that you don't know what\nthe value is that you are going to see.\n\n208\n00:12:13.030 --> 00:12:15.760\nThat is absolutely gonna\nbe damaging to you,\n\n209\n00:12:15.760 --> 00:12:17.930\nespecially if it's not just\na simple select statement.\n\n210\n00:12:17.930 --> 00:12:19.535\nSo be very Very aware.\n\n211\n00:12:19.535 --> 00:12:20.855\n>> Pay attention to what Ronnie's saying.\n\n212\n00:12:20.855 --> 00:12:23.093\nYou wanna maintain\nthe consistency of your database.\n\n213\n00:12:23.093 --> 00:12:26.135\nYou don't wanna present more\ninformation to your end user or\n\n214\n00:12:26.135 --> 00:12:28.405\nto an application than\nwhat you've expected.\n\n215\n00:12:28.405 --> 00:12:29.755\nRonnie, thank you for that information.\n\n216\n00:12:29.755 --> 00:12:32.085\nGot any parting words\nbefore we call it a day?\n\n217\n00:12:32.085 --> 00:12:34.875\n>> Well just remember that\na lot of this is not really\n\n218\n00:12:34.875 --> 00:12:39.055\nin the realm of what we're taking a look\nat for getting ready for this exam.\n\n219\n00:12:39.055 --> 00:12:42.790\nBut it is about the idea of completeness\nin our understanding That security is\n\n220\n00:12:42.790 --> 00:12:46.602\na big part of what we do as well as\nwe're trying to clear your R data.\n\n221\n00:12:46.602 --> 00:12:50.280\nWe wanna make sure of course that\nwe don't expose the database to any\n\n222\n00:12:50.280 --> 00:12:53.880\nmore than we need to and that's why views\nare very important and we actually keep\n\n223\n00:12:53.880 --> 00:12:57.980\nthose under lock and key and know what's\nactually running in each one of them.\n\n224\n00:12:57.980 --> 00:13:00.800\nSo it's all about you getting\na little bit better and\n\n225\n00:13:00.800 --> 00:13:03.010\nacknowledging some of the basic\nthings that are here.\n\n226\n00:13:03.010 --> 00:13:04.140\nNow is that the only thing you can do?\n\n227\n00:13:04.140 --> 00:13:07.600\nNo, there's plenty more, but\nat least for what we're doing,\n\n228\n00:13:07.600 --> 00:13:11.260\nthese are some of the things we should end\nup seeing as we start writing more and\n\n229\n00:13:11.260 --> 00:13:12.810\nmore and even better coding.\n\n230\n00:13:12.810 --> 00:13:16.020\n>> Ronnie, thanks for the explanation over\nthe couple of parts that we've looked at,\n\n231\n00:13:16.020 --> 00:13:18.090\nthe creation and\nmodification of the views.\n\n232\n00:13:18.090 --> 00:13:20.240\nKeep in mind that it is\nimportant information and\n\n233\n00:13:20.240 --> 00:13:24.120\ndefinitely important information If you're\ngoing for your certification endeavors.\n\n234\n00:13:24.120 --> 00:13:25.960\nWe appreciate having you here.\n\n235\n00:13:25.960 --> 00:13:27.950\nExcuse me if I can't say that.\n\n236\n00:13:27.950 --> 00:13:30.050\nAnd we definitely appreciate\nour viewers out here.\n\n237\n00:13:30.050 --> 00:13:32.260\nBut we're gonna go ahead and\nsign out at ITProTV.\n\n238\n00:13:32.260 --> 00:13:34.070\nI've been your host, Wes Bryan.\n\n239\n00:13:34.070 --> 00:13:34.800\n>> And I'm Ronnie Wong.\n\n240\n00:13:34.800 --> 00:13:36.904\n>> And we'll see you next time.\n\n241\n00:13:36.904 --> 00:13:44.539\n[MUSIC]\n\n",
          "vimeoId": "165147257"
        },
        {
          "description": "In this episode, Wes and Ronnie take a look a ways to maintain consistency within a database by using constraints. They discuss primary key constraints with demonstrations on how to implement them. They will also explore using foreign key constraints while demonstrating their implementation.",
          "length": "1949",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-3-1-create_and_modify_constraints-042916-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-3-1-create_and_modify_constraints-042916-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-3-1-create_and_modify_constraints-042916-1-sm.jpg",
          "title": "Create and Modify Constraints",
          "transcript": "WEBVTT\n\n1\n00:00:00.099 --> 00:00:10.099\n[MUSIC]\n\n2\n00:00:11.756 --> 00:00:14.690\nWelcome back to another exciting\nepisode here at ITProTV.\n\n3\n00:00:14.690 --> 00:00:16.380\nI'm your host, Wes Bryan.\n\n4\n00:00:16.380 --> 00:00:17.520\nAnd in today's episode,\n\n5\n00:00:17.520 --> 00:00:21.540\nwe are moving through our querying\nMicrosoft SQL Server 2014.\n\n6\n00:00:21.540 --> 00:00:24.195\nAnd we got Ronnie Wong\non hand to help us out.\n\n7\n00:00:24.195 --> 00:00:25.180\nRonnie, how you doing sir?\n\n8\n00:00:25.180 --> 00:00:26.120\n>> I am doing great,\n\n9\n00:00:26.120 --> 00:00:29.740\nas we continue on to take a look at some\nof the different topics that we need to.\n\n10\n00:00:29.740 --> 00:00:34.210\nAnd today, we're actually focusing in\non what we call Table Constraints,\n\n11\n00:00:34.210 --> 00:00:36.740\nand how we actually\ndeal with the idea here\n\n12\n00:00:36.740 --> 00:00:40.130\nof making sure that we have what we\ncall Referential Integrity, right?\n\n13\n00:00:40.130 --> 00:00:42.300\nNow, that's a weird term, but\n\n14\n00:00:42.300 --> 00:00:44.080\nit's actually some of the things\nthat we've been doing,\n\n15\n00:00:44.080 --> 00:00:47.760\nin a little bit of the previous\nepisodes that we've been talking about.\n\n16\n00:00:47.760 --> 00:00:52.540\nIs that we can mess stuff up in\nour database very easily at times.\n\n17\n00:00:52.540 --> 00:00:56.630\nAnd so, what we wanna do is as\na database person, right, somebody\n\n18\n00:00:56.630 --> 00:01:01.190\nthat may actually be creating tables,\nmay be actually entering in data also,\n\n19\n00:01:01.190 --> 00:01:04.760\nmay be structuring these tables, and\nalso of course, creating databases.\n\n20\n00:01:04.760 --> 00:01:08.640\nThat we want to ensure that we\ndon't end up losing any data and\n\n21\n00:01:08.640 --> 00:01:13.820\nwe also don't want to break anything that\ncould cause us to lose data as well.\n\n22\n00:01:13.820 --> 00:01:15.430\nSo one of the ways that we can do that,\n\n23\n00:01:15.430 --> 00:01:20.250\nof course, is by modifying our tables\nto ensure that they have what we\n\n24\n00:01:20.250 --> 00:01:24.720\ncall different types of constraints\nwithin them that will allow us to say,\n\n25\n00:01:24.720 --> 00:01:28.110\nlook, we have to ensure that these\nthings actually are linked up,\n\n26\n00:01:28.110 --> 00:01:33.070\nare actually existing, or we're not going\nto allow any changes to end up happening.\n\n27\n00:01:33.070 --> 00:01:33.570\nSo, normally,\n\n28\n00:01:33.570 --> 00:01:37.320\nwhen we start talking about stuff like\nthis there's a couple of different ones,\n\n29\n00:01:37.320 --> 00:01:41.680\nactually a few of them, that we're\ngoing to be going over today as well.\n\n30\n00:01:41.680 --> 00:01:45.450\nNow before we do so the great thing is\neverything that you've actually seen in\n\n31\n00:01:45.450 --> 00:01:51.370\nour series so far, in terms of actually\nbeing able to query a database, right.\n\n32\n00:01:51.370 --> 00:01:53.070\nAnd being able to actually create or\n\n33\n00:01:53.070 --> 00:01:57.610\nalter tables all that's actually going to\ngo into helping you to actually do some\n\n34\n00:01:57.610 --> 00:01:59.770\nof the things that we're\nactually doing today.\n\n35\n00:01:59.770 --> 00:02:03.080\nSo the good solid foundation that you've\ngotten here on the show and, of course,\n\n36\n00:02:03.080 --> 00:02:06.460\nif you've already experienced with that\nyou're probably pretty good at it and\n\n37\n00:02:06.460 --> 00:02:07.380\nyou don't really need that.\n\n38\n00:02:07.380 --> 00:02:10.680\nBut overall, though, today we're going\nto talk about the idea when we create\n\n39\n00:02:10.680 --> 00:02:12.790\nthe tables, how do we go ahead and\n\n40\n00:02:12.790 --> 00:02:17.180\nimplement these types of constraints\nin them so that they already exist?\n\n41\n00:02:17.180 --> 00:02:21.910\nSo when we start talking about the idea\nof constraints there's a few of them that\n\n42\n00:02:21.910 --> 00:02:22.620\nwe need to get to.\n\n43\n00:02:22.620 --> 00:02:26.500\nOne is what we call primary\nkey constraint, and\n\n44\n00:02:26.500 --> 00:02:29.325\nthere is also what we call\na foreign key constraint.\n\n45\n00:02:29.325 --> 00:02:33.350\nWe`re also gonna be dealing what\nwe call unique constraints,\n\n46\n00:02:33.350 --> 00:02:36.150\nas well as a default constraints, as well.\n\n47\n00:02:36.150 --> 00:02:40.840\nNow is that the limitation of constraints\nthat we can put on our data tables?\n\n48\n00:02:40.840 --> 00:02:41.470\nNot really ok?\n\n49\n00:02:41.470 --> 00:02:46.280\nThere are plenty of others but those are\nkind of the basic ones that will help us,\n\n50\n00:02:46.280 --> 00:02:50.010\nespecially not only for preparing for\nthe exam but also in general.\n\n51\n00:02:50.010 --> 00:02:55.210\nThese are the more used types of\nconstraints that we tend to see\n\n52\n00:02:55.210 --> 00:02:58.310\nvisually and\nwe can actually identify them very easily.\n\n53\n00:02:58.310 --> 00:03:01.440\nSo that's a great place for\nus to go ahead and begin,\n\n54\n00:03:01.440 --> 00:03:06.940\nis to take a look at how they're\nidentified in SQL Server 2014 first.\n\n55\n00:03:06.940 --> 00:03:08.000\nSo let's go ahead and\n\n56\n00:03:08.000 --> 00:03:11.610\non my screen here we'll take a look\nat a couple of different options.\n\n57\n00:03:11.610 --> 00:03:15.345\nAnd we're going to be spending a little\nbit of time in the object explorer so\n\n58\n00:03:15.345 --> 00:03:18.620\nthat I can show you how they\nare normally identified.\n\n59\n00:03:18.620 --> 00:03:24.460\nWe're going to be working in\nthe Adventure Works 2012 database here.\n\n60\n00:03:24.460 --> 00:03:29.090\nAnd in that Adventure Works 2012 database,\nwe of course have the different tables\n\n61\n00:03:29.090 --> 00:03:33.630\nthat we have existing for\nthat entire database itself.\n\n62\n00:03:33.630 --> 00:03:36.920\nNow, when we start dealing\nwith that area of constraints,\n\n63\n00:03:36.920 --> 00:03:40.570\nlet me scroll down here and I'll pick a\ntable that we've been using throughout our\n\n64\n00:03:40.570 --> 00:03:45.680\nseries here,\nwhich is gonna be the Person.Person table.\n\n65\n00:03:45.680 --> 00:03:47.220\nSo when I see that and\n\n66\n00:03:47.220 --> 00:03:52.370\nthen, of course, I expand out columns cuz\nthat's where our data normally is kept.\n\n67\n00:03:52.370 --> 00:03:56.090\nWe can see just a couple of\ndifferent things right away.\n\n68\n00:03:56.090 --> 00:04:01.170\nBut the first and foremost way that\nyou can identify a constraint visually\n\n69\n00:04:01.170 --> 00:04:04.770\nis you'll actually notice that the icon\nappears a little bit differently.\n\n70\n00:04:04.770 --> 00:04:05.400\nOkay?\n\n71\n00:04:05.400 --> 00:04:07.260\nSo notice person type here.\n\n72\n00:04:07.260 --> 00:04:09.950\nIt looks like it's actually\na little icon of a table.\n\n73\n00:04:09.950 --> 00:04:12.130\nBut notice this one up here as well.\n\n74\n00:04:12.130 --> 00:04:14.690\nIt actually turns into a little gold key.\n\n75\n00:04:14.690 --> 00:04:16.970\nSo you might end up seeing\nsomething like that.\n\n76\n00:04:16.970 --> 00:04:19.490\nNow, you might even see more options, and\n\n77\n00:04:19.490 --> 00:04:23.340\nI'm trying to make sure that I\ngo ahead and take a look at one.\n\n78\n00:04:23.340 --> 00:04:26.910\nSo I'm gonna go up to this business\nentity and this column here.\n\n79\n00:04:26.910 --> 00:04:29.210\nActually, I'm telling you that's\nprobably not the right one.\n\n80\n00:04:29.210 --> 00:04:31.990\nI need to find one that actually\nhas multiple ones here.\n\n81\n00:04:31.990 --> 00:04:34.961\nSo I think every one I pick is\nprobably only going to have one, but\n\n82\n00:04:34.961 --> 00:04:36.073\nit shouldn't do that.\n\n83\n00:04:36.073 --> 00:04:38.745\nLet me scroll down here and\nI know that I will find some.\n\n84\n00:04:38.745 --> 00:04:42.542\nIf I go down to, where is my sales?\n\n85\n00:04:42.542 --> 00:04:45.086\nThere's scrolling down\nhere a little bit further.\n\n86\n00:04:45.086 --> 00:04:49.010\nSales territory, I know that one actually\nhas a couple more that we can see.\n\n87\n00:04:50.140 --> 00:04:52.740\nSo now notice that you're\nalso seeing something else.\n\n88\n00:04:52.740 --> 00:04:56.060\nSo not only do I have a little gold key,\nand it's also marked with a PK,\n\n89\n00:04:56.060 --> 00:04:58.070\nthat means Primary Key.\n\n90\n00:04:58.070 --> 00:05:01.900\nBut also I have one\nthat's called FK as well.\n\n91\n00:05:01.900 --> 00:05:04.360\nAnd this also stands for a Foreign Key.\n\n92\n00:05:04.360 --> 00:05:07.620\nSo being able to actually see some of\nthose marks like that will help us\n\n93\n00:05:07.620 --> 00:05:12.650\nto identify some of the constraints that\nare already there as part of the database.\n\n94\n00:05:12.650 --> 00:05:14.360\nNow, other times, though,\n\n95\n00:05:14.360 --> 00:05:19.830\nokay, you might also see that there is\na link here also for the word Constraints.\n\n96\n00:05:19.830 --> 00:05:23.435\nAnd if I click on that,\nyou can now see that there's actually\n\n97\n00:05:23.435 --> 00:05:27.235\nother types of constraints\nthat you can create as well.\n\n98\n00:05:27.235 --> 00:05:28.265\nNow the good thing is,\n\n99\n00:05:28.265 --> 00:05:31.395\nif you follow the way the naming\nconventions are like we're going to try to\n\n100\n00:05:31.395 --> 00:05:34.275\npoint at them, I'm not going to tell\nyou to follow them all the time.\n\n101\n00:05:34.275 --> 00:05:37.565\nBut it actually does help you to know what\ntypes of constraints that there are and\n\n102\n00:05:37.565 --> 00:05:41.120\nthere's one that I already mentioned that\nwe're gonna go over just briefly, but\n\n103\n00:05:41.120 --> 00:05:44.660\nthere's another one that I didn't\nmention that's also existing here too.\n\n104\n00:05:46.250 --> 00:05:49.870\nBeginning here in the way that they named\nthese constraints is also something that\n\n105\n00:05:49.870 --> 00:05:54.190\ncan help you out if you follow\nthis particular format as well.\n\n106\n00:05:54.190 --> 00:05:58.420\nDF is actually an abbreviation for\na default constraint.\n\n107\n00:05:58.420 --> 00:06:03.920\nAnd then CK an abbreviation for\nwhat we call a check constraint as well.\n\n108\n00:06:03.920 --> 00:06:06.770\nSo there are different types of\nconstraints that you'll also\n\n109\n00:06:06.770 --> 00:06:10.860\nend up being able to create and\nthen add in to the table so\n\n110\n00:06:10.860 --> 00:06:14.210\nthat it doesn't mess with anything\nin the way that you think.\n\n111\n00:06:14.210 --> 00:06:19.280\nSo, for example here,\non CK territory cost last year,\n\n112\n00:06:19.280 --> 00:06:22.940\nwhat we could do is say,\nlook you can't enter this value\n\n113\n00:06:22.940 --> 00:06:27.130\nunless there's a check on cost last year,\nor the cost year-to-date.\n\n114\n00:06:27.130 --> 00:06:29.440\nIn other words,\nit may actually be that, you know,\n\n115\n00:06:29.440 --> 00:06:32.790\nat the end of everything that's\nactually being put into that table,\n\n116\n00:06:32.790 --> 00:06:35.900\nit has to go through and\nit has to check each of these fields, and\n\n117\n00:06:35.900 --> 00:06:39.640\nsee whether there's a value there or\nnot before it can be entered in.\n\n118\n00:06:39.640 --> 00:06:43.420\nThe other idea here and the default\nconstraint in which we'll get to,\n\n119\n00:06:43.420 --> 00:06:47.940\nis we talk about this idea of just making\nsure, especially if these fields allow for\n\n120\n00:06:47.940 --> 00:06:50.090\nnull values to be there,\n\n121\n00:06:50.090 --> 00:06:54.230\nthat we don't want to actually prevent\nanything if something is missing.\n\n122\n00:06:54.230 --> 00:06:57.410\nSo the rest of these fields here\nmight be the very fact that,\n\n123\n00:06:57.410 --> 00:06:59.990\nlook we wanna make sure\nthat data gets entered in.\n\n124\n00:06:59.990 --> 00:07:01.620\nBut what if we don't have the data for it?\n\n125\n00:07:01.620 --> 00:07:04.890\nIs it gonna prevent me from actually\nentering in information into that\n\n126\n00:07:04.890 --> 00:07:06.160\nfield as well?\n\n127\n00:07:06.160 --> 00:07:09.760\nSo there are different ways that\nwe can actually add in, excuse me,\n\n128\n00:07:09.760 --> 00:07:16.600\nbe able to see where a constraint is\nactually do fit into the database itself.\n\n129\n00:07:16.600 --> 00:07:21.470\nSo let's go ahead and start and make sure\nthat we understand that what we want\n\n130\n00:07:21.470 --> 00:07:26.350\nto do is be able to know how we can\nactually add in some of those constraints.\n\n131\n00:07:26.350 --> 00:07:28.200\nAnd the easiest way, like I said, for\n\n132\n00:07:28.200 --> 00:07:33.380\nus to at least get used to this,\nis to just create some additional tables.\n\n133\n00:07:33.380 --> 00:07:37.230\nAnd when I do that it's gonna appear\nup here at the top of the list\n\n134\n00:07:37.230 --> 00:07:38.320\nis where it's gonna appear.\n\n135\n00:07:38.320 --> 00:07:41.094\nI'm gonna always name mine\nwith the dbo prefix and\n\n136\n00:07:41.094 --> 00:07:43.602\nthat way we can not have\nto worry about where it\n\n137\n00:07:43.602 --> 00:07:48.247\nis inside that gigantic list of the the\nAdventure Works 2012 database as well.\n\n138\n00:07:48.247 --> 00:07:51.803\nSo the first thing that I'm going\nto do is create the idea of\n\n139\n00:07:51.803 --> 00:07:54.644\nwhat we call a primary\nkey value in a new table.\n\n140\n00:07:54.644 --> 00:07:59.604\nNow, remember the purpose of\nthe primary key is to ensure uniqueness\n\n141\n00:07:59.604 --> 00:08:02.867\nOf each of the rows in\nthat particular table.\n\n142\n00:08:02.867 --> 00:08:07.491\nAnd the way that it does so, right, is by\nusually, creating just a unique sequential\n\n143\n00:08:07.491 --> 00:08:12.370\nnumber or some type of number that we\nknow that's not gonna be repeated again.\n\n144\n00:08:12.370 --> 00:08:15.640\nWe can actually ask\nthe system to do it for us,\n\n145\n00:08:15.640 --> 00:08:18.510\nwhich is probably a better idea or\nwe can actually\n\n146\n00:08:18.510 --> 00:08:21.990\ngenerate it on our own as long as we\nactually know it's going to be unique.\n\n147\n00:08:21.990 --> 00:08:25.750\nSo, for example, if you had an employee's\ntable that you were creating,\n\n148\n00:08:25.750 --> 00:08:27.160\nyou can probably actually say, look,\n\n149\n00:08:27.160 --> 00:08:32.440\nI want the primary key to be,\nlet's say for example my employee ID.\n\n150\n00:08:32.440 --> 00:08:35.220\nWell, that should actually\nbe different between me and\n\n151\n00:08:35.220 --> 00:08:37.820\nbetween Wes in terms of our employee ID.\n\n152\n00:08:37.820 --> 00:08:42.990\nBut what if you had 26 John Smiths\nworking in the same company?\n\n153\n00:08:42.990 --> 00:08:45.660\nWell, and\nthey actually had the same first name?\n\n154\n00:08:45.660 --> 00:08:48.260\nHeaven forbid they have\nthe same middle name, but\n\n155\n00:08:48.260 --> 00:08:51.280\ndefinitely they're gonna\nhave the same last name.\n\n156\n00:08:51.280 --> 00:08:54.550\nSo, if you actually had\neven that particular match\n\n157\n00:08:54.550 --> 00:08:57.980\nwell how do you differentiate\nthem as far as employees go?\n\n158\n00:08:57.980 --> 00:09:02.990\nWell, we need a column in the database\nthat ensures something like that happens.\n\n159\n00:09:02.990 --> 00:09:05.380\nAnd, even though you and\nI can actually choose that, and\n\n160\n00:09:05.380 --> 00:09:07.170\nwe're gonna show you how that's done.\n\n161\n00:09:07.170 --> 00:09:10.670\nEven though you and I can choose that,\nwe can also say, look, if you make a new\n\n162\n00:09:10.670 --> 00:09:14.880\nentry in the employee table, go ahead and\ngenerate a unique ID for it as well.\n\n163\n00:09:14.880 --> 00:09:16.030\nSo that can also help.\n\n164\n00:09:16.030 --> 00:09:20.830\n>> Ronnie, that sounds a little bit like\nthe unique security identifiers that you\n\n165\n00:09:20.830 --> 00:09:23.720\nsee in how an operating system\nrecognizes a basic user.\n\n166\n00:09:23.720 --> 00:09:25.201\nThey can have whatever name they want.\n\n167\n00:09:25.201 --> 00:09:28.210\nIn fact, it could be 15 John Smiths\non the same computer but\n\n168\n00:09:28.210 --> 00:09:30.756\nwhen you log in underneath\nthe hood what's going.\n\n169\n00:09:30.756 --> 00:09:33.600\nYou're saying that there is\na unique string of characters.\n\n170\n00:09:33.600 --> 00:09:35.340\nIs it something like that,\nis that what we're saying?\n\n171\n00:09:35.340 --> 00:09:36.170\n>> It really is.\n\n172\n00:09:36.170 --> 00:09:38.527\nWhen it comes down to it,\nwhat you're talking about,\n\n173\n00:09:38.527 --> 00:09:41.053\nthere is of course the active\ndirectory database itself.\n\n174\n00:09:41.053 --> 00:09:44.333\nWell, if you think about it, the term that\nI just used even if we don't call it that,\n\n175\n00:09:44.333 --> 00:09:45.966\nwe normally just call Active Directory.\n\n176\n00:09:45.966 --> 00:09:50.574\nIt is an Active Directory database, so\nwhat active directory does is it says\n\n177\n00:09:50.574 --> 00:09:55.820\nlook, I'm gonna go ahead and ensure that\nby putting this information in there.\n\n178\n00:09:55.820 --> 00:09:59.024\nAnd in the background it's actually\ngenerating some type of GUI\n\n179\n00:09:59.024 --> 00:09:59.924\nactually an SID.\n\n180\n00:09:59.924 --> 00:10:03.301\nThat is what's generated but it's really\na GUI in the background really putting\n\n181\n00:10:03.301 --> 00:10:06.295\neverything together to make sure\nthat you're actually unique there.\n\n182\n00:10:06.295 --> 00:10:10.990\nBut in the same way in database entries\nusually, especially a relational database.\n\n183\n00:10:10.990 --> 00:10:15.130\nEvery single table that we add\ninto that entire database,\n\n184\n00:10:15.130 --> 00:10:17.690\nthey're like the Adventure Works\n2012 database.\n\n185\n00:10:17.690 --> 00:10:21.690\nEvery single table is gonna probably\nneed to have what we call a primary\n\n186\n00:10:21.690 --> 00:10:23.380\nkey value added in.\n\n187\n00:10:23.380 --> 00:10:28.380\nSo if I wanna add in additional\ntables into that database,\n\n188\n00:10:28.380 --> 00:10:33.310\nI am also going to need to go ahead and\ncreate a primary key value as well, so\n\n189\n00:10:33.310 --> 00:10:35.830\nlet's go ahead and\nshow you how we're going to do this.\n\n190\n00:10:35.830 --> 00:10:38.700\nFirst and foremost,\nwhat we're going to take a look at and\n\n191\n00:10:38.700 --> 00:10:43.180\ndo for right now, is we're just\ngonna create a basic table here,\n\n192\n00:10:43.180 --> 00:10:48.610\nokay, that goes ahead and\nactually creates a primary key, okay.\n\n193\n00:10:48.610 --> 00:10:53.490\nSo if I take a look at this situation\nright here, let's make sure we understand,\n\n194\n00:10:53.490 --> 00:10:56.700\nso the good thing is we already\nknow the idea of creating a table.\n\n195\n00:10:56.700 --> 00:11:01.030\nWe go ahead and we use a create table\nsyntax and then we give it a name and\n\n196\n00:11:01.030 --> 00:11:03.509\nmines gonna be DBO.categories here.\n\n197\n00:11:03.509 --> 00:11:08.161\nAnd then inside of a set of parenthesis,\nI'm gonna list the columns that I\n\n198\n00:11:08.161 --> 00:11:11.852\nessentially want to create and\nalong with those columns.\n\n199\n00:11:11.852 --> 00:11:16.262\nI need to make sure that I declare\nthe data type and whether or\n\n200\n00:11:16.262 --> 00:11:20.820\nnot this thing can be a null value or\nnot as well, okay.\n\n201\n00:11:20.820 --> 00:11:25.590\nNow, the other thing that we can also do\nat this point of course is once we do that\n\n202\n00:11:25.590 --> 00:11:29.270\nI can declare my very first constraint.\n\n203\n00:11:29.270 --> 00:11:31.710\nAnd that's what this line is for.\n\n204\n00:11:31.710 --> 00:11:33.910\nNotice the placement of it,\nit doesn't have to be at the end.\n\n205\n00:11:33.910 --> 00:11:36.280\nThat's just where I chose to place it but\n\n206\n00:11:36.280 --> 00:11:38.550\nlook at what it says here\nas far as the constraint.\n\n207\n00:11:39.560 --> 00:11:42.680\nHere's the constraint, and\nI'm going to give it a name,\n\n208\n00:11:42.680 --> 00:11:44.310\nI'm just gonna call it PK_Cat.\n\n209\n00:11:44.310 --> 00:11:45.740\nNow, do you have to do that?\n\n210\n00:11:45.740 --> 00:11:47.674\nNo, you can call it whatever you want to,\nokay?\n\n211\n00:11:47.674 --> 00:11:49.400\nBut I'm gonna go ahead and say,\n\n212\n00:11:49.400 --> 00:11:53.900\nthe primary key is gonna be\ngenerated as a unique key here.\n\n213\n00:11:53.900 --> 00:11:55.890\nAnd it's actually going to go ahead and\n\n214\n00:11:55.890 --> 00:12:00.310\nbe based on the Category ID\nright here as well.\n\n215\n00:12:00.310 --> 00:12:02.030\nSo we can do something like that.\n\n216\n00:12:02.030 --> 00:12:04.180\nNow if I wanted it to be also,\n\n217\n00:12:04.180 --> 00:12:09.550\nof course, the actual primary\nkey as far as the Category ID,\n\n218\n00:12:09.550 --> 00:12:15.460\nI can also add in the term\nidentity at the end instead.\n\n219\n00:12:15.460 --> 00:12:19.380\nSo that way that it actually marks that\nas being the actual primary key itself,\n\n220\n00:12:21.390 --> 00:12:22.950\nso we can do some of that now.\n\n221\n00:12:22.950 --> 00:12:25.610\nLet me verify that I've actually\ntold you correctly here.\n\n222\n00:12:25.610 --> 00:12:30.090\nLet's see if I run this statement and\nI'll execute that.\n\n223\n00:12:30.090 --> 00:12:33.580\nAnd notice it tells me that the commands\nwere actually run successfully\n\n224\n00:12:33.580 --> 00:12:34.139\nat this point.\n\n225\n00:12:35.158 --> 00:12:39.620\nAnd then, if I go over to the left\nhand side with my object explorer,\n\n226\n00:12:39.620 --> 00:12:44.650\nI need to refresh the tables or\nmy dbo categories isn't gonna show up.\n\n227\n00:12:44.650 --> 00:12:50.070\nAnd now under dbo categories, let's see if\nI can zoom in a little bit more on that.\n\n228\n00:12:50.070 --> 00:12:53.840\nAnd then, I'm gonna expand and\nexpand columns again.\n\n229\n00:12:53.840 --> 00:12:59.350\nAnd now notice it went ahead and took\nmy CategoryID, and it added in a little\n\n230\n00:12:59.350 --> 00:13:04.830\ngold key here, which is actually symbolic\nof, this is actually now your primary key.\n\n231\n00:13:04.830 --> 00:13:08.110\nNow, in that particular sense there,\n\n232\n00:13:08.110 --> 00:13:11.020\nit's nice to actually know that\nit visually identifies it.\n\n233\n00:13:11.020 --> 00:13:13.930\nBut if I come down here to\nthe next node underneath that,\n\n234\n00:13:13.930 --> 00:13:16.260\nwhere it says keys and I click.\n\n235\n00:13:16.260 --> 00:13:20.120\nNotice it actually created\nthe name of that key right here.\n\n236\n00:13:20.120 --> 00:13:24.191\nSo it's not actually a column and\nnow it just becomes a name.\n\n237\n00:13:24.191 --> 00:13:27.753\nNow when you start seeing that like\nwhy is that actually important,\n\n238\n00:13:27.753 --> 00:13:32.550\nit's important because the keys that\nwe have, as far as the primary keys go.\n\n239\n00:13:32.550 --> 00:13:36.870\nEvery single primary key in the database\nis actually system wide, so\n\n240\n00:13:36.870 --> 00:13:42.120\nthat means it has to be unique in the\nentirety of the data base as well, okay?\n\n241\n00:13:42.120 --> 00:13:46.550\nNow, does that mean I can't re-use\nthe term Category ID somewhere else?\n\n242\n00:13:46.550 --> 00:13:49.760\nNo, remember that the schema name\nhelps us to do that, all right?\n\n243\n00:13:49.760 --> 00:13:53.750\nSo this one is dbo categories, but there's\nactually another table that I think is\n\n244\n00:13:53.750 --> 00:13:56.650\ncalled production dot categories but\nI could be wrong on that.\n\n245\n00:13:56.650 --> 00:14:01.100\nBut, I can actually reuse that but not\nthat I've generated that we can also end\n\n246\n00:14:01.100 --> 00:14:06.660\nup seeing where that actually is\nstored here to help us out, okay?\n\n247\n00:14:06.660 --> 00:14:10.020\n>> Ronnie, how many primary key\nconstraints can be on a single table?\n\n248\n00:14:10.020 --> 00:14:12.680\n>> Well,\nnormally there's only gonna be one, okay?\n\n249\n00:14:12.680 --> 00:14:16.180\nSo we'll only have a single,\nprimary key per table.\n\n250\n00:14:16.180 --> 00:14:17.200\nNow, people will say,\n\n251\n00:14:17.200 --> 00:14:19.308\nwell what about all those other\nkeys that we were talking about.\n\n252\n00:14:19.308 --> 00:14:22.720\nWell, we're gonna talk about the idea of\na foreign key a little bit later, but\n\n253\n00:14:22.720 --> 00:14:27.490\non every table there's usually only\ngoing to be one particular primary key.\n\n254\n00:14:27.490 --> 00:14:30.740\nSo it does make sure that it\nis going to be unique and\n\n255\n00:14:30.740 --> 00:14:32.880\nlet me zoom out just a little bit more.\n\n256\n00:14:32.880 --> 00:14:37.430\nNow if I wanted to take a look\nat the primary keys here,\n\n257\n00:14:37.430 --> 00:14:41.800\nI've got a little query down here at\nthe end to verify what I just told you.\n\n258\n00:14:41.800 --> 00:14:45.180\nThat all of the primary keys are\nessentially unique throughout the entire\n\n259\n00:14:45.180 --> 00:14:46.170\ndatabase.\n\n260\n00:14:46.170 --> 00:14:48.950\nWell, even though I have a listing of it,\nthat hey,\n\n261\n00:14:48.950 --> 00:14:54.110\nhere's what I named that primary key,\nwell, where is that value actually stored?\n\n262\n00:14:54.110 --> 00:14:56.990\nWell, I can run this select\nstatement right here.\n\n263\n00:14:56.990 --> 00:14:58.890\nNow I'm gonna pull in every\nsingle primary key so\n\n264\n00:14:58.890 --> 00:15:02.830\nwe can see it in context of every\nother primary key that's out there.\n\n265\n00:15:02.830 --> 00:15:08.440\nBut notice this is a table right here, and\nit's particular scheme begins with sys,\n\n266\n00:15:08.440 --> 00:15:14.160\nwhich means it's a system wide table\nher that actually is gonna be access.\n\n267\n00:15:14.160 --> 00:15:18.380\nAnd then I'm just gonna limit it to\nall the ones that have PK in it,\n\n268\n00:15:18.380 --> 00:15:23.660\nwhich is normally our standard here for\nidentifying primary keys.\n\n269\n00:15:23.660 --> 00:15:27.730\nNow when I take a look, oops, right here.\n\n270\n00:15:28.740 --> 00:15:33.980\nI can see, and you can't see it very well,\nbut let me see, if I zoom in right there.\n\n271\n00:15:33.980 --> 00:15:38.200\nThere is the one that I just created,\ncalled PK_Cat.\n\n272\n00:15:38.200 --> 00:15:40.790\nAnd notice that it has it's own object ID,\n\n273\n00:15:40.790 --> 00:15:45.250\nand it follows the scheme on\nactually knows it's parent object.\n\n274\n00:15:45.250 --> 00:15:50.171\nAnd you can see that its description here\nsays that it is a Primary Key Constraint,\n\n275\n00:15:50.171 --> 00:15:52.682\nand it even tells you when it was created.\n\n276\n00:15:52.682 --> 00:15:54.687\nAnd that is actually the proper date for\n\n277\n00:15:54.687 --> 00:15:58.164\nthe actual recording today of today\nthat we actually end up seeing.\n\n278\n00:15:58.164 --> 00:16:01.205\nSo, there's a lot of information\nthat's stored right here.\n\n279\n00:16:01.205 --> 00:16:05.607\nBut that makes sure that every single\nprimary key is also going to be unique\n\n280\n00:16:05.607 --> 00:16:09.840\nthroughout the entire system\nwhen we start doing this, okay?\n\n281\n00:16:09.840 --> 00:16:15.780\nSo it is very possible for us to go ahead\nand create that primary key as well, okay.\n\n282\n00:16:15.780 --> 00:16:20.940\nNow, we can do it when we create\nthe database table itself or\n\n283\n00:16:20.940 --> 00:16:23.130\nwe can do it a little\nbit differently as well.\n\n284\n00:16:23.130 --> 00:16:25.730\nSo I'm gonna get rid of\nthis table again and\n\n285\n00:16:25.730 --> 00:16:28.230\nthen we're gonna actually\nadd it in a different way.\n\n286\n00:16:28.230 --> 00:16:31.420\nSo I'm just gonna right-click and\ndelete that table out.\n\n287\n00:16:31.420 --> 00:16:34.960\nMake sure I'm deleting the right table,\nbefore I say yes let's do that.\n\n288\n00:16:34.960 --> 00:16:37.040\nVerify that by refreshing.\n\n289\n00:16:37.040 --> 00:16:40.820\nSo now, it's actually gone from\nmy database Object Explorer.\n\n290\n00:16:40.820 --> 00:16:42.730\nThis time,\nI'm gonna remove a couple of things.\n\n291\n00:16:42.730 --> 00:16:45.660\nI'm gonna remove the word identity and,\n\n292\n00:16:45.660 --> 00:16:48.040\nI'm gonna get rid of this\nline in the constraint.\n\n293\n00:16:48.040 --> 00:16:50.790\nI'm just gonna go ahead and\ncomment it out here, so\n\n294\n00:16:50.790 --> 00:16:55.710\nit's not going to run and\nwe're going to recreate this table.\n\n295\n00:16:56.960 --> 00:16:57.510\nSo now.\n\n296\n00:16:57.510 --> 00:17:02.890\nI've recreated that table, but\nwith the primary key element missing, so\n\n297\n00:17:02.890 --> 00:17:04.790\nif I right click and I go to refresh.\n\n298\n00:17:05.800 --> 00:17:09.850\nAnd then I took a look at categories and\ncolumn IDs.\n\n299\n00:17:09.850 --> 00:17:12.589\nAnd let's see if we can visually\nsee the difference then what we\n\n300\n00:17:12.589 --> 00:17:14.096\nwere seeing a little bit earlier.\n\n301\n00:17:14.096 --> 00:17:15.152\nNotice, Wes,\n\n302\n00:17:15.152 --> 00:17:20.516\nthat the category ID is not turned into\na little gold key When the icon is, it's\n\n303\n00:17:20.516 --> 00:17:25.906\njust a simple plain table that does not\nhave any value added in there right now.\n\n304\n00:17:25.906 --> 00:17:29.921\nAnd when I expanded out keys, notice that\nthere are no keys, so, there's nothing for\n\n305\n00:17:29.921 --> 00:17:31.350\nme to expand into.\n\n306\n00:17:31.350 --> 00:17:34.380\nSo, right there you can actually see\na very visible difference that we don't go\n\n307\n00:17:34.380 --> 00:17:35.800\nahead and declare that primary key.\n\n308\n00:17:35.800 --> 00:17:38.750\n>> That's interesting, so\nthe table's already been created.\n\n309\n00:17:38.750 --> 00:17:42.620\nIs there any way to add\nthe key after the fact?\n\n310\n00:17:42.620 --> 00:17:45.010\n>> That is what we're\nactually gonna do right now.\n\n311\n00:17:45.010 --> 00:17:48.570\nIf we take a look and, what we're gonna\ndo is use a statement that you and\n\n312\n00:17:48.570 --> 00:17:52.370\nI have already seen in\nprevious episodes here.\n\n313\n00:17:52.370 --> 00:17:56.560\nWhich is gonna be using\nthe ALTER TABLE statement instead.\n\n314\n00:17:56.560 --> 00:17:59.460\nSo, now when we take a look at\nthat ALTER TABLE statement,\n\n315\n00:17:59.460 --> 00:18:01.140\nnotice it's fairly simple.\n\n316\n00:18:01.140 --> 00:18:04.400\nI just need to say hey,\nwhat table am I altering?\n\n317\n00:18:04.400 --> 00:18:08.160\nAnd then make sure I do put\nin the name of that table.\n\n318\n00:18:08.160 --> 00:18:12.360\nAnd now notice, I'm gonna add in this\nPK_Cat, here, I'm gonna add in the number\n\n319\n00:18:12.360 --> 00:18:16.632\n1 just in case it actually did keep it in\nthe system database, the earlier one here.\n\n320\n00:18:16.632 --> 00:18:20.083\nSo now,\nI can select something like this and\n\n321\n00:18:20.083 --> 00:18:24.572\nbecause it knows what table I\nwant to add the primary key.\n\n322\n00:18:24.572 --> 00:18:28.706\nThat INT in the middle there is\nthe database, I cannot remember, datatype,\n\n323\n00:18:28.706 --> 00:18:31.314\nI was trying, not the database,\nthe datatype,\n\n324\n00:18:31.314 --> 00:18:36.070\nis actually saying that this is going to\nbe an integer that's gonna be added in.\n\n325\n00:18:36.070 --> 00:18:40.160\nI'm gonna highlight that which means it\nwill only run this from my query window,\n\n326\n00:18:40.160 --> 00:18:42.980\nverify that the command actually\ncompleted successfully,\n\n327\n00:18:42.980 --> 00:18:45.050\nwhich is what it tells me here.\n\n328\n00:18:45.050 --> 00:18:50.600\nSo everything looks good so far and then\nI'm going to refresh the Tables again,\n\n329\n00:18:50.600 --> 00:18:52.510\nor actually I could just\nrefresh Categories.\n\n330\n00:18:53.910 --> 00:18:59.280\nAnd now, when I do that,\nnotice that it added in another field,\n\n331\n00:18:59.280 --> 00:19:04.559\nso I didn't tell it to take category\nid as being my primary key.\n\n332\n00:19:04.559 --> 00:19:08.530\nYou can now see that there's a difference\nwhere it actually did create\n\n333\n00:19:08.530 --> 00:19:09.479\nanother field.\n\n334\n00:19:09.479 --> 00:19:18.380\nIn other words, another column inside of\nthe table that we call categories here.\n\n335\n00:19:18.380 --> 00:19:20.750\nSo now, it's not just reusing the field.\n\n336\n00:19:20.750 --> 00:19:23.440\nI actually created a very\nseparate column and\n\n337\n00:19:23.440 --> 00:19:27.550\nif I expand out Keys this time,\nnotice it now actually generated one.\n\n338\n00:19:27.550 --> 00:19:31.350\nNow, because I really didn't\ngive it a very descriptive name,\n\n339\n00:19:31.350 --> 00:19:33.740\nnotice that instead,\nwhat we saw a little bit earlier, right?\n\n340\n00:19:33.740 --> 00:19:38.680\nIt actually just said PK_Cat,\nthe actual name that I defined it in,\n\n341\n00:19:38.680 --> 00:19:41.990\nin the constraint when I did it when\nI created the entire table, but\n\n342\n00:19:41.990 --> 00:19:43.720\nnow notice this one.\n\n343\n00:19:43.720 --> 00:19:47.050\nIt now has a strange-looking primary key.\n\n344\n00:19:47.050 --> 00:19:51.810\nAnd that's because it's saying, look,\nRonnie, that particular name Cat1,\n\n345\n00:19:51.810 --> 00:19:55.690\nthat will work, but\nI'm gonna give it my own name as well.\n\n346\n00:19:55.690 --> 00:19:58.040\nSo instead of recognizing it as this,\n\n347\n00:19:58.040 --> 00:20:02.660\nit's gonna recognize it as something else\nthat it generates in the background for\n\n348\n00:20:02.660 --> 00:20:06.960\nus to be able to make sure that\nit's unique in the entire system.\n\n349\n00:20:06.960 --> 00:20:11.028\nSo it is very neat when you actually start\nseeing some of the ways that you can\n\n350\n00:20:11.028 --> 00:20:11.552\ndo this.\n\n351\n00:20:11.552 --> 00:20:16.155\nBut that is one of the very first types\nof constraints that you want to be able\n\n352\n00:20:16.155 --> 00:20:19.005\nto make sure that you\nunderstand when you start\n\n353\n00:20:19.005 --> 00:20:23.046\ntalking about adding in constraints or\nmodifying constraints.\n\n354\n00:20:23.046 --> 00:20:26.749\nCreating constraints, and\nmodifying constraints,\n\n355\n00:20:26.749 --> 00:20:29.490\nto be able to put in to that table, okay?\n\n356\n00:20:29.490 --> 00:20:32.826\n>> Now Ronnie you mentioned at the\nbeginning of this episode something about\n\n357\n00:20:32.826 --> 00:20:34.187\nthe foreign key constraint.\n\n358\n00:20:34.187 --> 00:20:35.830\nCan you tell us a little bit about that?\n\n359\n00:20:35.830 --> 00:20:40.150\n>> Sure, when we start talking about\nthe idea of a foreign key constraint.\n\n360\n00:20:40.150 --> 00:20:43.900\nWe already saw where it actually\ndoes add in another key, right?\n\n361\n00:20:43.900 --> 00:20:45.960\nAnd that key is actually\na little bit grayed out,\n\n362\n00:20:45.960 --> 00:20:50.140\nor it's actually gray as far as I\ncan tell, as far as the color goes.\n\n363\n00:20:50.140 --> 00:20:52.660\nBut that's the only thing that it does,\nokay.\n\n364\n00:20:52.660 --> 00:20:55.260\nNow, when we start talking\nabout these constraints, right?\n\n365\n00:20:55.260 --> 00:20:58.472\nWe are now starting to put\nsome limitations on what we\n\n366\n00:20:58.472 --> 00:21:01.400\ncan actually do with our data as well.\n\n367\n00:21:01.400 --> 00:21:06.002\nThe foreign key is going to be what\nwe also call the idea of actually\n\n368\n00:21:06.002 --> 00:21:09.528\nbeing able to look up to\nanother table somewhere.\n\n369\n00:21:09.528 --> 00:21:13.504\nSo this is gonna be the column\nthat we actually will say, look,\n\n370\n00:21:13.504 --> 00:21:17.266\nwe can actually use this column\nto look up to another table.\n\n371\n00:21:17.266 --> 00:21:19.763\nIn other words,\nto link to another table, so\n\n372\n00:21:19.763 --> 00:21:23.550\nthat they can actually be able\nto be joined together as well.\n\n373\n00:21:23.550 --> 00:21:28.970\nNow does every single link normally have\nto be a primary key to a foreign key type\n\n374\n00:21:28.970 --> 00:21:30.110\nof link and relationship?\n\n375\n00:21:30.110 --> 00:21:32.010\nNot necessarily, okay?\n\n376\n00:21:32.010 --> 00:21:34.400\nBut does it tend to happen\nthat way very often?\n\n377\n00:21:34.400 --> 00:21:39.340\nYes, so what normally happens if that I\nwanted to take that product, excuse me,\n\n378\n00:21:39.340 --> 00:21:42.120\nthat category table and\nlink it, let's say,\n\n379\n00:21:42.120 --> 00:21:45.310\nto another table that we\ncall products at this point.\n\n380\n00:21:45.310 --> 00:21:49.702\nWell, I would need to make sure that\nif I did something like that, okay,\n\n381\n00:21:49.702 --> 00:21:53.528\nthat in both tables I would share\na common column between them.\n\n382\n00:21:53.528 --> 00:21:58.042\nAnd so, if I chose category ID\ninside my categories table,\n\n383\n00:21:58.042 --> 00:22:01.022\nI can also take the other table and say,\n\n384\n00:22:01.022 --> 00:22:05.191\nhey this particular same\ncolumn that exist over here.\n\n385\n00:22:05.191 --> 00:22:09.598\nI can mark that as being a foreign key\nthat will link back to that original\n\n386\n00:22:09.598 --> 00:22:11.180\ncolumn as well.\n\n387\n00:22:11.180 --> 00:22:16.190\nSo let's go ahead and see what we can do\nhere when start and to take a look, okay?\n\n388\n00:22:16.190 --> 00:22:19.100\nNow the good thing is we've\nalready created a table,\n\n389\n00:22:19.100 --> 00:22:22.410\nso we don't have to worry about\nrecreating the entire table again.\n\n390\n00:22:22.410 --> 00:22:26.095\nBut you can actually add all this\nstuff in at the same time, okay.\n\n391\n00:22:26.095 --> 00:22:28.318\nBut here,\nwe're just gonna use the alter table.\n\n392\n00:22:28.318 --> 00:22:33.194\nLet me see if I can zoom in then, so we\ncan see it a little bit better here, okay?\n\n393\n00:22:33.194 --> 00:22:35.394\nSo right now,\nwe're gonna work with that one,\n\n394\n00:22:35.394 --> 00:22:39.135\nactually we aren't gonna work with that\nparticular table for right now because I\n\n395\n00:22:39.135 --> 00:22:43.125\nneed to actually generate another table\nwhich I do not have in my database yet.\n\n396\n00:22:43.125 --> 00:22:47.525\nLet me go ahead and generate a new\ntable here first before I do that, so\n\n397\n00:22:47.525 --> 00:22:49.423\nI was about to go ahead and\nuse the alter table.\n\n398\n00:22:49.423 --> 00:22:52.530\nThat's not gonna work because I don't have\nthe other one that I want to connect to.\n\n399\n00:22:52.530 --> 00:22:55.520\nSo, I wanna connect products\nto categories here.\n\n400\n00:22:55.520 --> 00:22:59.370\nSo, here's the category table where\nwe just implemented the primary key.\n\n401\n00:22:59.370 --> 00:23:07.090\nNow, on this one I'm gonna create a new\ntable called products instead, all right?\n\n402\n00:23:07.090 --> 00:23:08.930\nSo, if I execute that,\n\n403\n00:23:08.930 --> 00:23:12.960\nlet me verify that that table\nactually will end up showing up here.\n\n404\n00:23:12.960 --> 00:23:14.320\nRefresh that, and there it is.\n\n405\n00:23:14.320 --> 00:23:16.066\nHere's the one called Products over here.\n\n406\n00:23:16.066 --> 00:23:18.744\nAnd now, [SOUND] let me see if I\n\n407\n00:23:18.744 --> 00:23:23.666\ncan do that again without\nzooming past everything.\n\n408\n00:23:23.666 --> 00:23:28.160\nNotice that I have the Product ID,\nand I added in this Category ID.\n\n409\n00:23:28.160 --> 00:23:33.260\nI did that specifically so I could link\nthis back to the Categories table itself.\n\n410\n00:23:33.260 --> 00:23:39.660\nWell, now for me to be able to do that, I\nknow that this particular one right here.\n\n411\n00:23:39.660 --> 00:23:43.170\nI know that that same field\nexists in my categories table and\n\n412\n00:23:43.170 --> 00:23:47.880\nI wanna use this field to be able to\nconnect products and categories together.\n\n413\n00:23:47.880 --> 00:23:52.161\nSo, I'm gonna change this\nfield into a foreign key.\n\n414\n00:23:52.161 --> 00:23:56.572\nThat now we'll actually link over\nto the next category table, okay,\n\n415\n00:23:56.572 --> 00:23:58.160\nis what I'm going to do.\n\n416\n00:23:58.160 --> 00:24:01.262\nSo, let's see if I can do that.\n\n417\n00:24:01.262 --> 00:24:05.911\nNow, because I went ahead and created the\ntable originally without a product key,\n\n418\n00:24:05.911 --> 00:24:08.000\nlet me see if I can do that.\n\n419\n00:24:08.000 --> 00:24:10.050\nLet's go ahead and take a look.\n\n420\n00:24:10.050 --> 00:24:11.620\nI'll zoom out a little bit more.\n\n421\n00:24:11.620 --> 00:24:14.670\nAnd then focus back in here as\nthat would've been silly for\n\n422\n00:24:14.670 --> 00:24:17.320\nme to try to link without\nthe table existing.\n\n423\n00:24:17.320 --> 00:24:19.870\nThis time,\nwe are going to alter the table.\n\n424\n00:24:19.870 --> 00:24:23.430\nSo we are changing up the products\ntable that we just created.\n\n425\n00:24:23.430 --> 00:24:29.800\nNotice I have something here\nthat's called WITH CHECK.\n\n426\n00:24:29.800 --> 00:24:34.210\nNow, if I add this particular\nstatement in here, It's saying,\n\n427\n00:24:34.210 --> 00:24:40.790\nyou've gotta be able to verify that what\nyou are going to do here can be validate.\n\n428\n00:24:40.790 --> 00:24:45.270\nSo, in other words, if I am actually going\nto add in this constraint, I have to be\n\n429\n00:24:45.270 --> 00:24:49.550\nable to check everything here, okay, and\nverify that those things also exist.\n\n430\n00:24:49.550 --> 00:24:51.160\nIt's just kinda the opposite here.\n\n431\n00:24:51.160 --> 00:24:56.750\nIt's saying, look, the product table Does\nthat field exist in the product table?\n\n432\n00:24:56.750 --> 00:25:01.490\nDoes that field also exist in\nthe categories table before you do this?\n\n433\n00:25:01.490 --> 00:25:02.580\nSo it's gonna verify that,\n\n434\n00:25:02.580 --> 00:25:06.310\nit's not gonna allow me to create\na foreign key that doesn't go anywhere.\n\n435\n00:25:06.310 --> 00:25:08.880\nSo when I add that in,\nit absolutely is gonna check everything.\n\n436\n00:25:08.880 --> 00:25:13.060\nSo here it is, we're gonna add in this\nconstraint, and I'm adding in now\n\n437\n00:25:13.060 --> 00:25:17.950\na prefix here, to help follow the same\nthing that we've been seeing here,\n\n438\n00:25:17.950 --> 00:25:21.490\nwhich is that people actually do\nadd in their own standards here.\n\n439\n00:25:21.490 --> 00:25:27.180\nSo FK, again, stands for foreign key,\nwhereas PK stood for primary key.\n\n440\n00:25:27.180 --> 00:25:30.140\nAnd we're gonna call this, and\nyou can name it whatever you want to, but\n\n441\n00:25:30.140 --> 00:25:33.500\nI'm just gonna say this is gonna\nbe based on product category, and\n\n442\n00:25:33.500 --> 00:25:37.219\nI've identified the foreign key, which\nis gonna be right here on this table.\n\n443\n00:25:38.350 --> 00:25:42.260\nAnd the table that it references\nwhich is the category table\n\n444\n00:25:42.260 --> 00:25:44.610\non that same field, okay.\n\n445\n00:25:44.610 --> 00:25:51.730\nSo now when I alter this table and\nthen I hit the F5 key to run it, oops.\n\n446\n00:25:54.900 --> 00:25:57.220\nNow I'm starting to see\nsomething else here okay.\n\n447\n00:25:57.220 --> 00:26:02.410\nSo there are no primary or\ncandidate keys in The table,\n\n448\n00:26:02.410 --> 00:26:04.890\nover there on the other side,\nthat matches us.\n\n449\n00:26:04.890 --> 00:26:09.640\nSo it's actually saying look, I do not\nhave the actual options that I need\n\n450\n00:26:09.640 --> 00:26:14.980\nover on that other table or the one that\nI have does not actually exist here.\n\n451\n00:26:14.980 --> 00:26:19.480\nSo let's take a look and see if maybe\nI've done something wrong here.\n\n452\n00:26:19.480 --> 00:26:22.110\nSo it could be that I did something wrong.\n\n453\n00:26:22.110 --> 00:26:22.880\nBut let me see here.\n\n454\n00:26:22.880 --> 00:26:26.790\nSo this is where we would compare,\nthese two tables here, just briefly.\n\n455\n00:26:28.140 --> 00:26:31.740\nSo there's the product category ID,\nand this one says it can be null, and\n\n456\n00:26:31.740 --> 00:26:36.230\na foreign key can be null, whereas\na primary key cannot have a null value.\n\n457\n00:26:36.230 --> 00:26:41.870\nAnd then in the column here,\nI also have a category ID.\n\n458\n00:26:41.870 --> 00:26:43.360\nDid I misspell them?\n\n459\n00:26:43.360 --> 00:26:45.820\nActually everything looks good here.\n\n460\n00:26:45.820 --> 00:26:52.270\nSo let us check it out, DBO products,\nor product, no it is products.\n\n461\n00:26:52.270 --> 00:26:55.970\nAnd then categories, all right.\n\n462\n00:26:57.160 --> 00:27:01.480\nSo there are no primary or\ncandidate keys in the reference table So\n\n463\n00:27:01.480 --> 00:27:05.470\nhere, it's saying that that is\nnot actually going to be that.\n\n464\n00:27:06.640 --> 00:27:08.850\nI know exactly what happened\non this point here.\n\n465\n00:27:08.850 --> 00:27:09.950\nOkay?\n\n466\n00:27:09.950 --> 00:27:13.760\nWhat's actually happening is because\nI generated my own primary key,\n\n467\n00:27:13.760 --> 00:27:15.630\nwhich is this PCAT1.\n\n468\n00:27:15.630 --> 00:27:20.630\nIt didn't like the way that I had that\nactually established at that point.\n\n469\n00:27:20.630 --> 00:27:23.080\nSo, it wants this one,\nover here on this side,\n\n470\n00:27:23.080 --> 00:27:26.920\nto be the primary key,\nsince that's what I'm linking to.\n\n471\n00:27:26.920 --> 00:27:31.280\nSo, we've gotta actually make a couple of\nchanges here, if we are going to do this.\n\n472\n00:27:31.280 --> 00:27:31.840\nOkay?\n\n473\n00:27:31.840 --> 00:27:37.610\nNow, it actually is a little bit more\ncomplex to actually change a primary key.\n\n474\n00:27:37.610 --> 00:27:43.180\nSo, instead what I'm gonna do is I'm going\nto just redo that entire table instead.\n\n475\n00:27:43.180 --> 00:27:44.390\nLet me delete that thing out.\n\n476\n00:27:45.870 --> 00:27:52.990\nAnd then I'm going to just run that\noriginal one that I had instead.\n\n477\n00:27:54.580 --> 00:27:55.760\nSo let me go ahead and do that.\n\n478\n00:27:57.860 --> 00:28:00.040\nVerify that that table is now here.\n\n479\n00:28:01.870 --> 00:28:03.900\nSo now I have categories, and\n\n480\n00:28:03.900 --> 00:28:09.160\nremember Well that's not gonna\nwork since I didn't do that.\n\n481\n00:28:09.160 --> 00:28:10.620\nLet's try that one more time here.\n\n482\n00:28:12.820 --> 00:28:14.400\nSo just for this.\n\n483\n00:28:14.400 --> 00:28:15.390\nWe delete this out.\n\n484\n00:28:18.080 --> 00:28:20.800\nAnd then one time.\n\n485\n00:28:20.800 --> 00:28:22.060\nOne more time.\n\n486\n00:28:22.060 --> 00:28:23.835\nThird time should be the charm there.\n\n487\n00:28:23.835 --> 00:28:25.860\n[LAUGH] Maybe.\n\n488\n00:28:25.860 --> 00:28:29.030\nAlright so now verify okay there we go,\n\n489\n00:28:29.030 --> 00:28:32.780\nnow I have a category ID\nthat's now a primary key, so\n\n490\n00:28:32.780 --> 00:28:37.990\nwhen I create a foreign key then what is\nit it was expecting to find is a link\n\n491\n00:28:37.990 --> 00:28:43.180\nto a primary key so that's what the issue\nwas when we started seeing that.\n\n492\n00:28:44.310 --> 00:28:47.590\nThat unusual message, which is\nactually a good message for us to see.\n\n493\n00:28:47.590 --> 00:28:51.720\nAnd now I've executed and\nnotice I didn't change any of the plans,\n\n494\n00:28:51.720 --> 00:28:54.950\nreally, as far as the statement was here.\n\n495\n00:28:54.950 --> 00:28:58.250\nIt was just that I'd forgotten that when I\ndid that second one, and I altered it and\n\n496\n00:28:58.250 --> 00:29:00.250\nI added in my own key instead.\n\n497\n00:29:00.250 --> 00:29:03.970\nAnd then use it on the key that it was\nlooking for, well that's what happens.\n\n498\n00:29:03.970 --> 00:29:09.210\nSo usually when you do link\na foreign key to a another table,\n\n499\n00:29:09.210 --> 00:29:13.920\nright, that particular field\nthat it's looking to link to, or\n\n500\n00:29:13.920 --> 00:29:18.280\ncolumn that it's looking to link to is\nnormally going to be a primary key field.\n\n501\n00:29:18.280 --> 00:29:19.690\nNow once I've done that.\n\n502\n00:29:21.190 --> 00:29:24.610\nWell, what ends up happening then,\nif I can find the products table\n\n503\n00:29:24.610 --> 00:29:30.200\nagain, and expand our categories.\n\n504\n00:29:30.200 --> 00:29:31.500\nThere we go.\n\n505\n00:29:31.500 --> 00:29:36.650\nNow, you can see right here where\nit finally did add this in.\n\n506\n00:29:36.650 --> 00:29:39.920\nNow, even more than this,\nif I right click on it And\n\n507\n00:29:39.920 --> 00:29:44.270\nI go to properties, gotta zoom\nback out here, just a little bit.\n\n508\n00:29:45.450 --> 00:29:49.940\nIn the properties value, usually you might\nend up seeing, especially if this is\n\n509\n00:29:49.940 --> 00:29:52.670\nall typed in, and everything's,\nand I don't have it all typed in.\n\n510\n00:29:52.670 --> 00:29:56.780\nA lot of times, we can document\nthe information, that says hey,\n\n511\n00:29:56.780 --> 00:30:01.070\nthis foreign key here,\nis linked to DVO categories and\n\n512\n00:30:01.070 --> 00:30:03.420\nthat way you can see\ninformation like that as well.\n\n513\n00:30:03.420 --> 00:30:08.850\nBut I don't have a link but I can show\nyou an example of what I'm talking about.\n\n514\n00:30:08.850 --> 00:30:12.760\nLet's see lets go back to that\nsales territory for a moment.\n\n515\n00:30:12.760 --> 00:30:13.640\nLet me show you that.\n\n516\n00:30:15.720 --> 00:30:19.440\nIf I select like this one here.\n\n517\n00:30:19.440 --> 00:30:21.745\nThe country code ID in reference.\n\n518\n00:30:21.745 --> 00:30:27.050\nExtended properties,\nyou can now see where there is a Microsoft\n\n519\n00:30:27.050 --> 00:30:32.040\ndescription that says ISO standard\ncountry region, foreign key two.\n\n520\n00:30:32.040 --> 00:30:36.760\nWell, country region\ndot country region co.\n\n521\n00:30:36.760 --> 00:30:39.750\nSo that means that the system\nactually entered that one in there.\n\n522\n00:30:39.750 --> 00:30:42.750\nBut if it were up to me, if I'm actually\none that's properly documenting\n\n523\n00:30:42.750 --> 00:30:44.840\nthe database I would go back in and\n\n524\n00:30:44.840 --> 00:30:50.060\nactually add that information in there\nas well for that products category too.\n\n525\n00:30:50.060 --> 00:30:51.460\nSo adding in a primary and\n\n526\n00:30:51.460 --> 00:30:56.020\nforeign key to help us to constrain our\nvalues is actually going to help out.\n\n527\n00:30:56.020 --> 00:31:00.080\nBecause what will end up now\nhappening as we have data entry.\n\n528\n00:31:00.080 --> 00:31:04.520\nIt's going to ensure that there's\nnot going to be a foreign key added.\n\n529\n00:31:04.520 --> 00:31:07.440\nIn other words somebody's not going to add\n\n530\n00:31:07.440 --> 00:31:12.240\na product that's also not gonna\nactually be in the categories table.\n\n531\n00:31:12.240 --> 00:31:15.020\nNor should we end up seeing\nit the other way as well.\n\n532\n00:31:15.020 --> 00:31:17.550\nIn which we can actually\nsay look Here it is.\n\n533\n00:31:17.550 --> 00:31:20.360\nI'm going to add something into\nthe categories, and as people start\n\n534\n00:31:20.360 --> 00:31:23.600\nfilling in information, they can't\nskip over adding in the category, and\n\n535\n00:31:23.600 --> 00:31:25.760\nthen come back and add that in.\n\n536\n00:31:25.760 --> 00:31:28.120\nBut it should always be an option for\nthem.\n\n537\n00:31:28.120 --> 00:31:32.150\nSo somebody can't just modify the foreign\nkey database, in other words,\n\n538\n00:31:32.150 --> 00:31:33.450\nthe products table.\n\n539\n00:31:33.450 --> 00:31:36.750\nWithout actually also of\ncourse adding in something\n\n540\n00:31:36.750 --> 00:31:40.190\nto the original table which\nis the categories table.\n\n541\n00:31:40.190 --> 00:31:42.580\n>> A lot of great information\nin this one ont he constraints.\n\n542\n00:31:42.580 --> 00:31:45.160\nNow Ronny I know we've got more\ninformation on constraints.\n\n543\n00:31:45.160 --> 00:31:46.320\nBut I am looking at the time and\n\n544\n00:31:46.320 --> 00:31:49.110\nit looks like we're coming to\nthe end of another episode.\n\n545\n00:31:49.110 --> 00:31:51.320\nGot any other words of wisdom?\n\n546\n00:31:51.320 --> 00:31:53.155\nI know we're coming back for\na part two though.\n\n547\n00:31:53.155 --> 00:31:54.010\n[LAUGH]\n>> Yeah\n\n548\n00:31:54.010 --> 00:31:57.410\nwe've still got plenty to cover as\nfar as some of the different keys go.\n\n549\n00:31:57.410 --> 00:31:59.350\nBut just remember that at\nleast at the beginning here,\n\n550\n00:31:59.350 --> 00:32:02.360\nthe primary key and\nthe foreign those are kinda\n\n551\n00:32:02.360 --> 00:32:05.470\nthe two most basic constraints\nthat we have to be able to set.\n\n552\n00:32:05.470 --> 00:32:07.590\nUse the create tables,\nuse the alter tables,\n\n553\n00:32:07.590 --> 00:32:10.240\nmake sure you practice\nyou know doing both.\n\n554\n00:32:10.240 --> 00:32:13.840\n>> All right well we appreciate all\nthat good information there Ronnie, and\n\n555\n00:32:13.840 --> 00:32:17.670\nwe appreciate you the viewers, but we're\ngonna go ahead and sign off IT Pro TV.\n\n556\n00:32:17.670 --> 00:32:18.980\nI've been your host Wes Bryan.\n\n557\n00:32:18.980 --> 00:32:19.770\n>> And I'm Ronnie Wong.\n\n558\n00:32:19.770 --> 00:32:20.409\n>> And we'll see you next time.\n\n559\n00:32:20.409 --> 00:32:28.940\n>> [MUSIC]\n\n",
          "vimeoId": "165147066"
        },
        {
          "description": "In this episode, Wes and Ronnie continue their discussion on maintaining consistency within a database using constraints. They look at unique constraints and demonstrate how they should be implemented as well as diving into the using default constraints.",
          "length": "1686",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-3-2-create_and_modify_constraints_pt2-042916-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-3-2-create_and_modify_constraints_pt2-042916-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-3-2-create_and_modify_constraints_pt2-042916-1-sm.jpg",
          "title": "Create and Modify Constraints Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.009 --> 00:00:14.988\nWelcome back to another exciting\nepisode here at ITProTV,\n\n3\n00:00:14.988 --> 00:00:17.488\nI'm your host Wes Bryan and\nin today's episode,\n\n4\n00:00:17.488 --> 00:00:21.313\nwe're continuing along with our\nQuerying Microsoft SQL Server 2014.\n\n5\n00:00:21.313 --> 00:00:23.291\nWe're actually coming\nback with a part two.\n\n6\n00:00:23.291 --> 00:00:25.550\nThat's right, part two on constraints,\nand we got Mr.\n\n7\n00:00:25.550 --> 00:00:26.990\nRonnie Wong to help us out with that.\n\n8\n00:00:26.990 --> 00:00:28.210\nRonnie, how you doing today, Sir?\n\n9\n00:00:28.210 --> 00:00:31.320\n>> I'm doing great as we continue\nto take a look at more, of course,\n\n10\n00:00:31.320 --> 00:00:32.850\nSQL Server 2014.\n\n11\n00:00:32.850 --> 00:00:36.660\nWe've been talking about, of course, the\ndifferent types of constraints that we can\n\n12\n00:00:36.660 --> 00:00:40.030\ngo ahead and\nimplement as we create tables as well.\n\n13\n00:00:40.030 --> 00:00:44.356\nAnd we did spend quite a bit of time on\ntechnically primary key constraints as\n\n14\n00:00:44.356 --> 00:00:46.323\nwell as foreign key constraints.\n\n15\n00:00:46.323 --> 00:00:51.060\nAnd now, we need to talk about just a few\nother constraints too to help us to round\n\n16\n00:00:51.060 --> 00:00:53.125\nthat the entirety of that set out.\n\n17\n00:00:53.125 --> 00:00:56.625\nNow remember that you can actually create\na lot of different constraints depending\n\n18\n00:00:56.625 --> 00:00:57.800\non what you need.\n\n19\n00:00:57.800 --> 00:01:03.300\nThat's actually how we keep our\ndata safe the way that we need to.\n\n20\n00:01:03.300 --> 00:01:06.420\nIt ensures that we don't delete\nsomething out of one table and\n\n21\n00:01:06.420 --> 00:01:09.850\nthen leave a reference to it\nin another table as well.\n\n22\n00:01:09.850 --> 00:01:12.030\nAnd that way, when you try and\nfind something you go,\n\n23\n00:01:12.030 --> 00:01:16.100\nhey, it's showing me that data's here but\nthen show me the complete bit of data.\n\n24\n00:01:16.100 --> 00:01:18.790\nSo the whole goal behind\nkeeping those constraints,\n\n25\n00:01:18.790 --> 00:01:22.550\nof course, is essentially saying\nwe're not breaking anything.\n\n26\n00:01:22.550 --> 00:01:26.700\nSo remember that for\nus primary keys and foreign keys\n\n27\n00:01:26.700 --> 00:01:32.120\nthat's usually how relational databases\nbegin their connection together to do so.\n\n28\n00:01:32.120 --> 00:01:35.810\nSo, what we also showed you, of course,\nthen is how do you set those primary keys\n\n29\n00:01:35.810 --> 00:01:37.680\nand how do you actually\nadd in a primary key,\n\n30\n00:01:37.680 --> 00:01:40.530\nif you want to and\nthe same anything with a foreign key.\n\n31\n00:01:40.530 --> 00:01:43.040\nThe trick behind the foreign\nkey is to make sure, and\n\n32\n00:01:43.040 --> 00:01:47.330\nthis is something we also learned in\nthe last episode as well in the part one,\n\n33\n00:01:47.330 --> 00:01:51.968\nis that we have to make sure that it\nlinks to a primary key of another table.\n\n34\n00:01:51.968 --> 00:01:55.380\nSo, you wanna make sure that that happens\nor you end with what I did which was,\n\n35\n00:01:55.380 --> 00:01:59.940\nyes I forgot I actually created it in the\nother order that I didn't want to first.\n\n36\n00:01:59.940 --> 00:02:03.030\nAnd then I added in my own and it didn't\nwork the way that it needed to but\n\n37\n00:02:03.030 --> 00:02:05.960\noverall though, you can actually\nfix it fairly quickly and easily,\n\n38\n00:02:05.960 --> 00:02:08.420\nespecially if you don't have\nany data in those tables.\n\n39\n00:02:08.420 --> 00:02:10.770\nSo it doesn't really end up mattering,\nokay?\n\n40\n00:02:10.770 --> 00:02:13.997\nNow, in everything that we've done,\nas far as the primary key goes.\n\n41\n00:02:13.997 --> 00:02:17.805\nI wanna make sure that I emphasize this\nagain, because we're about to talk about\n\n42\n00:02:17.805 --> 00:02:21.066\nanother key that sounds almost like\na primary key but isn't, okay?\n\n43\n00:02:21.066 --> 00:02:24.090\nSo when we actually talk about\nthe nature of the primary key,\n\n44\n00:02:24.090 --> 00:02:27.013\nthere's a couple of characteristics\nof the primary key.\n\n45\n00:02:27.013 --> 00:02:30.520\nOne, of course,\nis gonna be a unique key, right?\n\n46\n00:02:30.520 --> 00:02:35.060\nEvery single row that goes into that\ntable is gonna be 100% unique and\n\n47\n00:02:35.060 --> 00:02:38.190\nusually if all the other\nfields end up matching\n\n48\n00:02:38.190 --> 00:02:41.930\nat least that primary key\nwill absolutely be unique.\n\n49\n00:02:41.930 --> 00:02:46.470\nAnd that's what may actually be\nthe identifier for that one key.\n\n50\n00:02:46.470 --> 00:02:49.140\nThe other thing that we have\nin a primary key, though,\n\n51\n00:02:49.140 --> 00:02:54.750\nis that there cannot be a null value\nin the primary key field itself.\n\n52\n00:02:54.750 --> 00:02:59.390\nOkay, so normally we won't see that,\nso usually unless you see that every\n\n53\n00:02:59.390 --> 00:03:03.180\nsingle table that has a primary\nkey value they will all.\n\n54\n00:03:03.180 --> 00:03:05.780\nExcuse me.\nThat has a primary key field or\n\n55\n00:03:05.780 --> 00:03:09.410\na column will always have\na value in that column as well.\n\n56\n00:03:09.410 --> 00:03:11.860\nYou won't see anything that should skip.\n\n57\n00:03:11.860 --> 00:03:15.623\nNow, can any field in that\ntable be a primary key?\n\n58\n00:03:15.623 --> 00:03:16.676\nYes, okay?\n\n59\n00:03:16.676 --> 00:03:18.929\nAs long as they're actually unique values.\n\n60\n00:03:18.929 --> 00:03:23.852\nThey do not have to actually be\nthe data type of an integer,\n\n61\n00:03:23.852 --> 00:03:28.079\nokay some number but\nit usually makes more sense.\n\n62\n00:03:28.079 --> 00:03:32.236\nThe idea of actually making a string\nas being a primary key can it work?\n\n63\n00:03:32.236 --> 00:03:37.110\nYes, as long as you ensure that\nyou keep that consistent, right?\n\n64\n00:03:37.110 --> 00:03:38.185\nThat in other words,\n\n65\n00:03:38.185 --> 00:03:41.483\nevery single one that you actually\nsay is gonna be my primary key.\n\n66\n00:03:41.483 --> 00:03:43.161\nIt's gonna actually be this value and\n\n67\n00:03:43.161 --> 00:03:46.469\nyou're actually gonna make sure that\nyou have enough combinations to make\n\n68\n00:03:46.469 --> 00:03:49.830\nit unique, especially as those\nnumbers start getting bigger.\n\n69\n00:03:49.830 --> 00:03:51.890\nSo you can choose any field\nthat you want to, but\n\n70\n00:03:51.890 --> 00:03:56.150\nusually a lot of times instead what we\ndo is we just use an integer, okay.\n\n71\n00:03:56.150 --> 00:03:59.130\nNow, we also talked about that then,\nright.\n\n72\n00:03:59.130 --> 00:04:02.910\nWhen we go into the realm of foreign keys\n\n73\n00:04:02.910 --> 00:04:06.850\njust about everything I said on\nprimary keys is just about the same\n\n74\n00:04:07.860 --> 00:04:12.730\nexcept that when we get into the idea\nof unique constraints instead.\n\n75\n00:04:12.730 --> 00:04:15.820\nThe only thing that's really\nmissing at this point\n\n76\n00:04:15.820 --> 00:04:19.550\nis the idea of the null value instead,\nokay.\n\n77\n00:04:19.550 --> 00:04:24.010\nSo in other words,\nunique constraints can be nulls, okay.\n\n78\n00:04:24.010 --> 00:04:26.430\nIf we actually need them to be and\nyou might be one of like,\n\n79\n00:04:26.430 --> 00:04:28.940\nwell why would we want anything like that?\n\n80\n00:04:28.940 --> 00:04:32.200\nWell, it's because a lot of times\nyou might still want to keep\n\n81\n00:04:32.200 --> 00:04:34.870\nthe unique value with an account, okay.\n\n82\n00:04:34.870 --> 00:04:40.090\nLet's take the example here of category\nname as being a unique value or\n\n83\n00:04:40.090 --> 00:04:42.238\na product name is being a unique value.\n\n84\n00:04:42.238 --> 00:04:44.830\nWe wanna ensure that all\nof our categories or\n\n85\n00:04:44.830 --> 00:04:47.790\nall of our products are not\ngoing to be repeated.\n\n86\n00:04:47.790 --> 00:04:51.581\nAs far as names go, well, we can\nactually insure something like that but\n\n87\n00:04:51.581 --> 00:04:55.637\nusually category's probably the big one\nthat we might want to put out there.\n\n88\n00:04:55.637 --> 00:04:57.851\nBut we can actually use that, right?\n\n89\n00:04:57.851 --> 00:05:04.283\nSo we can actually insure that even though\ncategory name is not a primary key.\n\n90\n00:05:04.283 --> 00:05:08.275\nIn other words, I don't have to have it I\nwant to make sure that if someone comes in\n\n91\n00:05:08.275 --> 00:05:09.887\nand does a different category.\n\n92\n00:05:09.887 --> 00:05:12.197\nIn other words,\nif I add it to my product line,\n\n93\n00:05:12.197 --> 00:05:15.970\na new category of products I want to\nmake sure the name is actually unique.\n\n94\n00:05:15.970 --> 00:05:17.737\nNow, how unique does it have to be?\n\n95\n00:05:17.737 --> 00:05:19.441\nIt doesn't have to be super unique, right?\n\n96\n00:05:19.441 --> 00:05:24.030\n>> So if I actually said hey,\nwe're making a mountain box, okay?\n\n97\n00:05:24.030 --> 00:05:26.690\nCould you actually make mountain\nbikes two as a category?\n\n98\n00:05:26.690 --> 00:05:32.070\nYes, as long as it's unique, could you\nmake mountain bikes zero as being in kind?\n\n99\n00:05:32.070 --> 00:05:36.940\nAbsolutely, so it doesn't have to\nbe completely 100% unique in fact\n\n100\n00:05:36.940 --> 00:05:41.540\nas far as the you know being extremely\n\n101\n00:05:41.540 --> 00:05:46.220\ncontrasting unique I should say but\nit does actually market uniqueness there.\n\n102\n00:05:46.220 --> 00:05:49.580\nThe problem that you have of course\nif you're gonna name something like\n\n103\n00:05:49.580 --> 00:05:52.279\na category like that it's just so\ngeneric at that point.\n\n104\n00:05:52.279 --> 00:05:55.574\nThe only thing you should actually be\nanswering questions about then is well\n\n105\n00:05:55.574 --> 00:05:58.818\nwhat's the difference between mountain\nbike zero and mountain bike six,\n\n106\n00:05:58.818 --> 00:06:00.640\nthat you actually ended up naming.\n\n107\n00:06:00.640 --> 00:06:03.920\nYou wanna be a little bit more descriptive\nthan that when you name something.\n\n108\n00:06:03.920 --> 00:06:07.292\nBut there are times when you do\nwant that type of uniqueness, okay?\n\n109\n00:06:07.292 --> 00:06:09.820\nYou wanna ensure that that uniqueness\n\n110\n00:06:09.820 --> 00:06:12.768\nis maintained even though\nit is not a primary key.\n\n111\n00:06:12.768 --> 00:06:15.650\nAnd you wanna actually make sure\nthat as data entry goes on,\n\n112\n00:06:15.650 --> 00:06:19.910\ndoes not require to also be there if you\ndon't have anything that should be there.\n\n113\n00:06:19.910 --> 00:06:24.420\nSo in that sense, it is fairly for easy\nfor us to go ahead and say, yes, we wanna\n\n114\n00:06:24.420 --> 00:06:30.420\nactually have a uniqueness enforced to\nthat prime and that is the key okay.\n\n115\n00:06:30.420 --> 00:06:33.620\nIs that we don't want somebody to\nduplicate it because it just didn't have\n\n116\n00:06:33.620 --> 00:06:35.710\nsomething else that they needed here,\n\n117\n00:06:35.710 --> 00:06:38.410\nwe just wanna make sure that\nwe do go ahead and do that.\n\n118\n00:06:38.410 --> 00:06:43.020\nSo it's more for the sake if you think\nabout it here the logic behind it rather\n\n119\n00:06:43.020 --> 00:06:47.950\nthan something that the database\nitself has to have, right?\n\n120\n00:06:47.950 --> 00:06:53.040\nThis is an enforcement or a constraint\nthat the database can then sure for you.\n\n121\n00:06:53.040 --> 00:06:55.136\nThat way,\nyou don't actually have to worry,\n\n122\n00:06:55.136 --> 00:06:57.835\nwas this actually duplicated by accident,\nor wasn't it?\n\n123\n00:06:57.835 --> 00:06:59.520\nAnd we can do that.\n\n124\n00:06:59.520 --> 00:07:00.720\nNow the good thing is,\n\n125\n00:07:00.720 --> 00:07:04.460\nit normally begins in the same way that\nwe would begin with the primary key.\n\n126\n00:07:04.460 --> 00:07:09.740\nWe'd simply create a table, and then can\nadd in the constraint in the same way.\n\n127\n00:07:09.740 --> 00:07:12.890\nAnd what we're doing instead when\nwe add in that constraint line,\n\n128\n00:07:12.890 --> 00:07:15.240\nlet me go back to my machine here.\n\n129\n00:07:15.240 --> 00:07:19.940\nAnd I didn't actually put it out this\nway but it'd be easy for us to see.\n\n130\n00:07:19.940 --> 00:07:22.650\nInstead, this is where we\ncould also do it, right?\n\n131\n00:07:22.650 --> 00:07:24.760\nIt's when we create the table\nwe add in the constraint.\n\n132\n00:07:24.760 --> 00:07:30.220\nInstead, we actually put in unique value\ninstead To add that thing in there, okay.\n\n133\n00:07:30.220 --> 00:07:32.420\nAnd that way, when we create it,\nit can be that unique value.\n\n134\n00:07:32.420 --> 00:07:37.100\nNow, what we're gonna do instead is\nactually just use the Alter because\n\n135\n00:07:37.100 --> 00:07:39.360\nit actually makes it, well, fairly easy.\n\n136\n00:07:39.360 --> 00:07:41.600\nThat way, we can go back in if we realize,\n\n137\n00:07:41.600 --> 00:07:44.890\nlater on, that we've created\na table with a primary key.\n\n138\n00:07:44.890 --> 00:07:49.428\nWe've created a table that also now has\na foreign key value in it, perfectly fine.\n\n139\n00:07:49.428 --> 00:07:55.258\nBut now, I want to ensure a uniqueness\nto my categories and the category name.\n\n140\n00:07:55.258 --> 00:07:59.748\nSo let me expand out the Categories\ntable and that way, we can see, here.\n\n141\n00:07:59.748 --> 00:08:01.768\nWhat we're talking about.\n\n142\n00:08:01.768 --> 00:08:05.277\nSo, in the categories table that we\ncreated in the first part of this\n\n143\n00:08:05.277 --> 00:08:08.170\nparticular little mini series here, right?\n\n144\n00:08:08.170 --> 00:08:11.441\nIt really only has three\nparticular categories in it and\n\n145\n00:08:11.441 --> 00:08:14.928\nwe also went ahead and\nmade the category ID the primary key.\n\n146\n00:08:14.928 --> 00:08:19.835\nAnd have a description here but that's\nnot one I wanna really make unique but\n\n147\n00:08:19.835 --> 00:08:25.138\nI wanna ensure that this particular name\nright here stays unique in this table,.\n\n148\n00:08:25.138 --> 00:08:28.517\nSo the good thing is it doesn't matter\nif another one matching kind of does\n\n149\n00:08:28.517 --> 00:08:29.288\nthe same thing.\n\n150\n00:08:29.288 --> 00:08:32.984\nBut we wanna make that sure nobody\nactually enters this information and\n\n151\n00:08:32.984 --> 00:08:36.540\nit's gonna be duplicated is\nwhat we want to do instead.\n\n152\n00:08:36.540 --> 00:08:40.930\nSo what we're gonna do is we're\ngonna alter that table and\n\n153\n00:08:40.930 --> 00:08:43.310\nthe way that we're gonna\ndo it is right here.\n\n154\n00:08:43.310 --> 00:08:48.900\nRight in the center, if I can actually\npull it up here, is alter that table,\n\n155\n00:08:48.900 --> 00:08:51.140\nthe dbo.Categories.\n\n156\n00:08:51.140 --> 00:08:54.040\nAnd we're gonna add in a constraint,\n\n157\n00:08:54.040 --> 00:08:58.690\nnow notice again the little\nprefix identifier for us.\n\n158\n00:08:58.690 --> 00:09:03.560\nSo we've seen one that says PK,\nwe've seen one that says FK.\n\n159\n00:09:03.560 --> 00:09:10.150\nAnd we now see a new one here,\nthat says UC for UNIQUE Constraint,\n\n160\n00:09:10.150 --> 00:09:14.380\nand then underscore, and then what I'm\nactually doing this on, if I wanted to.\n\n161\n00:09:15.590 --> 00:09:18.280\nSo I can actually add in categories or\nif I wanted to be\n\n162\n00:09:18.280 --> 00:09:22.680\nspecific here I could actually change\nthat to CategoryName if I wanted to.\n\n163\n00:09:22.680 --> 00:09:25.480\nIt doesn't really matter at that point and\nthen there it is.\n\n164\n00:09:25.480 --> 00:09:28.290\nI'm declaring it as being unique and\n\n165\n00:09:28.290 --> 00:09:33.170\nI tell it what field I really want it to\nbe a unique category on, which is that\n\n166\n00:09:33.170 --> 00:09:39.000\ncategory name field that we have over\nhere on the left hand side, okay.\n\n167\n00:09:39.000 --> 00:09:43.000\nSo that was really being proper,\nlet me make sure I was nice.\n\n168\n00:09:43.000 --> 00:09:46.040\nSometimes I'm just typing in\nfast is what's happening here.\n\n169\n00:09:46.040 --> 00:09:50.940\nBut with the existing table and if\neverything is set up correctly here then I\n\n170\n00:09:50.940 --> 00:09:56.820\nshould just be able to highlight that\nportion of my code and then execute it.\n\n171\n00:09:56.820 --> 00:10:01.451\nAnd now, it was completed successfully\nwhich is always a good sign for\n\n172\n00:10:01.451 --> 00:10:05.236\nus that we want and\nthen if I go ahead and refresh this table\n\n173\n00:10:07.958 --> 00:10:10.278\nAnd then, I expand this out.\n\n174\n00:10:10.278 --> 00:10:15.340\nNow, you go, okay, Ronnie that\nreally didn't do anything for us.\n\n175\n00:10:15.340 --> 00:10:17.440\nIt doesn't look like it\nactually showed up anything.\n\n176\n00:10:17.440 --> 00:10:21.710\nIt didn't do anything, but\nnow if I expand out, well hopefully.\n\n177\n00:10:21.710 --> 00:10:22.770\nI'm lying to you now.\n\n178\n00:10:22.770 --> 00:10:23.710\nDid I not run that?\n\n179\n00:10:23.710 --> 00:10:26.040\nIt says it completed successfully.\n\n180\n00:10:26.040 --> 00:10:27.970\nLet me verify one more time here.\n\n181\n00:10:30.540 --> 00:10:32.978\nMaybe I should do the whole table.\n\n182\n00:10:32.978 --> 00:10:36.798\nAll right, we'll try one more time.\n\n183\n00:10:36.798 --> 00:10:39.274\nColumns, category names, there it goes.\n\n184\n00:10:39.274 --> 00:10:41.934\nIt's under Keys,\nnot actually underneath the constraints,\n\n185\n00:10:41.934 --> 00:10:44.310\nthat's what I was thinking\nit would show up.\n\n186\n00:10:44.310 --> 00:10:45.870\nIt's actually right here that it shows up.\n\n187\n00:10:45.870 --> 00:10:55.010\nAnd this time, you do see another unusual\nobject, another little unusual icon.\n\n188\n00:10:55.010 --> 00:11:00.080\nSo before, when we've showed up the idea\nof primary key notice it was gold.\n\n189\n00:11:00.080 --> 00:11:04.990\nWhen we saw the foreign key it was\nessentially a silver key but identical to\n\n190\n00:11:04.990 --> 00:11:09.670\nthis, a unique key, which is probably\nwhat I should have actually said here.\n\n191\n00:11:09.670 --> 00:11:13.030\nA unique constraint\nthough on Category Name.\n\n192\n00:11:13.030 --> 00:11:15.940\nNotice it's a key but notice it's blue and\n\n193\n00:11:15.940 --> 00:11:19.330\nit's in a different direction as well,\nokay?\n\n194\n00:11:19.330 --> 00:11:24.230\nSo it absolutely can use that as a way\n\n195\n00:11:24.230 --> 00:11:28.490\nto keep the uniqueness of\nthat particular field.\n\n196\n00:11:28.490 --> 00:11:31.420\nSo the good thing is that category then,\n\n197\n00:11:31.420 --> 00:11:35.920\nthat category name field now\nhas a unique constraint.\n\n198\n00:11:35.920 --> 00:11:39.800\nNow, if we go in and take a look at\nthat idea of the constraints here, okay?\n\n199\n00:11:39.800 --> 00:11:45.388\nThis is also something else to verify\nthat it really is going to be unique.\n\n200\n00:11:45.388 --> 00:11:51.226\nIn our entirety of the database is I\ncan run this select command, right?\n\n201\n00:11:51.226 --> 00:11:53.420\nRemember where I'm running it from, okay?\n\n202\n00:11:53.420 --> 00:11:58.870\nThe sys dot key underscore\nconstraints table and\n\n203\n00:11:58.870 --> 00:12:04.660\nI execute it and let me see,\nwe can take a look here.\n\n204\n00:12:06.630 --> 00:12:10.800\nAnd there you start seeing there's\nthe two fo them right now, so here it is.\n\n205\n00:12:10.800 --> 00:12:15.340\nHere's another particular constraint and\nthere it's called a unique constraint for\n\n206\n00:12:15.340 --> 00:12:17.440\nus, tells me the date and\n\n207\n00:12:17.440 --> 00:12:21.980\nall of the actual indexing that goes on\nover here even on the right hand side.\n\n208\n00:12:21.980 --> 00:12:26.630\nSo we do have that ability to ensure\nthat we can keep unique values.\n\n209\n00:12:28.240 --> 00:12:34.850\nAnd not duplicating values for that\nparticular column of information as well.\n\n210\n00:12:34.850 --> 00:12:38.480\nSo even though it really doesn't matter\nto our database whether I duplicate it or\n\n211\n00:12:38.480 --> 00:12:40.950\nnot, as far as that one goes.\n\n212\n00:12:40.950 --> 00:12:43.510\nIt does actually matter to me\nif that becomes a duplicate.\n\n213\n00:12:43.510 --> 00:12:48.030\nSo unique constraints are normally\nthe ones that we can actually end up doing\n\n214\n00:12:48.030 --> 00:12:50.990\nto be able to find that if we need to.\n\n215\n00:12:50.990 --> 00:12:52.300\nNow I'll tell you the truth,\n\n216\n00:12:52.300 --> 00:12:55.138\nI've never really needed to use\nthe unique constraint, okay.\n\n217\n00:12:55.138 --> 00:13:00.043\nBut if you do have that situation where\nyou do find it handy to ensure that you do\n\n218\n00:13:00.043 --> 00:13:05.038\nhave unique values in that particular\ncategory, that is the way to go, okay.\n\n219\n00:13:05.038 --> 00:13:07.590\nSo unique constraints can help you out.\n\n220\n00:13:07.590 --> 00:13:10.490\nBut remember that a lot of times\nwhen we start creating databases,\n\n221\n00:13:10.490 --> 00:13:13.480\nwe're probably focused in our\nprimary key and foreign key instead.\n\n222\n00:13:13.480 --> 00:13:18.210\n>> Right now, the next type of constraint\nthat we have to look at is something that\n\n223\n00:13:18.210 --> 00:13:19.895\nis called a default constraint.\n\n224\n00:13:19.895 --> 00:13:21.380\nRonnie, could you help us out with that?\n\n225\n00:13:21.380 --> 00:13:25.390\n>> Sure, a default constraint is\nactually kind of a neat constraint.\n\n226\n00:13:25.390 --> 00:13:28.420\nBut it's also kind of a nothing\nconstraint at the same time,\n\n227\n00:13:28.420 --> 00:13:33.570\nso it has value, and\nthen it's value is in not having a value.\n\n228\n00:13:33.570 --> 00:13:36.296\nI know that that's a little bit unusual,\nbut\n\n229\n00:13:36.296 --> 00:13:39.678\nit really can help us in\na couple of situations, right?\n\n230\n00:13:39.678 --> 00:13:43.718\nSo, there are times when you\nquery your database, okay?\n\n231\n00:13:43.718 --> 00:13:48.953\nAnd, you end up with null values\nthat come out as a result.\n\n232\n00:13:48.953 --> 00:13:51.878\nWell, I say null values,\ntechnically it's called a null mark,\n\n233\n00:13:51.878 --> 00:13:54.430\nit's not considered a value itself.\n\n234\n00:13:54.430 --> 00:13:59.079\nSo when we start talking about we end\nup with a null as being a result,\n\n235\n00:13:59.079 --> 00:14:02.768\nwell, you gotta think about\nwhat that really means.\n\n236\n00:14:02.768 --> 00:14:05.710\nSometimes especially with\npeople as old as I am,\n\n237\n00:14:05.710 --> 00:14:08.090\nyou might say it means nothing, okay?\n\n238\n00:14:08.090 --> 00:14:10.590\nA null really means nothing at all.\n\n239\n00:14:10.590 --> 00:14:13.038\nWell, in theory, it could mean nothing.\n\n240\n00:14:13.038 --> 00:14:17.514\nIn other words, it could be that\na value we actually calculated\n\n241\n00:14:17.514 --> 00:14:21.238\nout didn't actually come up with anything,\nokay?\n\n242\n00:14:21.238 --> 00:14:25.609\nBut when we do stuff like that, a lot of\ntimes we end up getting a value of zero,\n\n243\n00:14:25.609 --> 00:14:27.038\nor something like that.\n\n244\n00:14:27.038 --> 00:14:31.026\nBut it could be that nobody's\nentered data in right then.\n\n245\n00:14:31.026 --> 00:14:33.561\nIn other words,\nthere is a value to it, but\n\n246\n00:14:33.561 --> 00:14:38.230\nit's just because of late data entry\nthat we're not getting a value.\n\n247\n00:14:38.230 --> 00:14:42.510\nSo if you think logically, does that\nmean that the value really exists?\n\n248\n00:14:42.510 --> 00:14:43.940\nOr does it not exist?\n\n249\n00:14:43.940 --> 00:14:47.300\nWell, now we get into a little bit\nof metaphysics here, is it real or\n\n250\n00:14:47.300 --> 00:14:48.280\nis it not real?\n\n251\n00:14:48.280 --> 00:14:51.600\nWell, that means a value does exist for\nwhatever I was querying for.\n\n252\n00:14:51.600 --> 00:14:54.420\nIt's just not been entered in yet, but\n\n253\n00:14:54.420 --> 00:14:56.750\nthat doesn't necessarily\nmean that there's no value.\n\n254\n00:14:56.750 --> 00:14:59.450\nIt just means it just\nhasn't been entered in yet.\n\n255\n00:14:59.450 --> 00:15:03.860\nIt could be where I actually am\ntrying to pull information in and\n\n256\n00:15:03.860 --> 00:15:07.070\nwhatever information,\nbecause of the way that I queried it,\n\n257\n00:15:07.070 --> 00:15:11.480\nit didn't make sense to the database\nto report it in that way, okay?\n\n258\n00:15:11.480 --> 00:15:15.730\nSo in other words, if the database goes\nhere and here and I'm trying to give you\n\n259\n00:15:15.730 --> 00:15:19.870\na value but the value doesn't make sense,\nthere's two possibilities here, okay?\n\n260\n00:15:19.870 --> 00:15:23.010\nOne, it could give me an error message,\nred letters, which always is bad\n\n261\n00:15:23.010 --> 00:15:27.020\nexcept for this class because they\nreally want you to focus in on saying\n\n262\n00:15:27.020 --> 00:15:30.600\nhey I know what to do with that particular\nmessage or what needs to be done.\n\n263\n00:15:30.600 --> 00:15:34.500\nWell, we've actually seen quite a bit of\nthem throughout our class here, class,\n\n264\n00:15:34.500 --> 00:15:36.160\nour series and our show.\n\n265\n00:15:36.160 --> 00:15:38.680\nBut overall though,\nwhen you start seeing stuff like that,\n\n266\n00:15:38.680 --> 00:15:41.170\nit could be that that's\nthe error that we get.\n\n267\n00:15:41.170 --> 00:15:44.340\nBut there are times especially\non calculated values\n\n268\n00:15:44.340 --> 00:15:47.900\nthat the value itself is\nactually what was calculated.\n\n269\n00:15:47.900 --> 00:15:51.290\nIt's just that the database says yeah,\nI don't know what that means.\n\n270\n00:15:51.290 --> 00:15:53.028\nIn other words, it's unknown, okay?\n\n271\n00:15:53.028 --> 00:15:57.564\nIt's an unknown value that ended up\ngenerating, so at that point, when we\n\n272\n00:15:57.564 --> 00:16:02.178\nstart seeing that Which of those is\nright when you see a blank result, okay?\n\n273\n00:16:02.178 --> 00:16:06.082\nIs it actually going to be something in\nwhich we sit there and go, all right,\n\n274\n00:16:06.082 --> 00:16:10.080\nit's not that it doesn't exist it\njust hasn't been entered in yet.\n\n275\n00:16:10.080 --> 00:16:12.230\nAnd how do we account for that, okay?\n\n276\n00:16:12.230 --> 00:16:15.028\nAnd then of course,\nis it something that's just missing?\n\n277\n00:16:15.028 --> 00:16:16.868\nOr is it something like\nwhat I just described?\n\n278\n00:16:16.868 --> 00:16:19.810\nThere's multiple ways in which\nnulls can be interpreted.\n\n279\n00:16:19.810 --> 00:16:23.960\n>> So Ronnie, the null value, that\ndoesn't necessarily mean a zero value,\n\n280\n00:16:23.960 --> 00:16:26.550\nit just could mean at the time\nthat the data just doesn't exist.\n\n281\n00:16:26.550 --> 00:16:29.750\n>> Well, you know,\nspeaking of zeros, it could!\n\n282\n00:16:29.750 --> 00:16:31.050\nOkay?\nIf you think about,\n\n283\n00:16:31.050 --> 00:16:34.190\nit it could mean that it is a zero value.\n\n284\n00:16:34.190 --> 00:16:37.860\nIn other words, when it calculates, it\ndidn't report an actual zero in its place,\n\n285\n00:16:37.860 --> 00:16:42.465\nit just says hey look, the value is zero\nso I don't really have to report it, do I?\n\n286\n00:16:42.465 --> 00:16:48.020\nBecause in reality and in meaning,\nit doesn't really seem to mean anything.\n\n287\n00:16:48.020 --> 00:16:50.950\nSo in that sense,\nthere's multiple things that can happen\n\n288\n00:16:50.950 --> 00:16:54.750\nwhen a null value is actually reported or\nnot reported.\n\n289\n00:16:54.750 --> 00:16:57.630\nSo, what in the world we actually\nhave here is what we called\n\n290\n00:16:57.630 --> 00:16:59.660\na default constraint.\n\n291\n00:16:59.660 --> 00:17:03.560\nIf you think about it,\nthe name hopefully gives it away.\n\n292\n00:17:03.560 --> 00:17:09.490\nIs that what we're saying is,\nwe instead can put onto our tables and\n\n293\n00:17:09.490 --> 00:17:16.040\ninto our columns here that if\nit is a possibility of a null.\n\n294\n00:17:16.040 --> 00:17:19.800\nIn other words,\nif there's no values actually there,\n\n295\n00:17:19.800 --> 00:17:24.930\nI instead don't have to report a null and\nkeep you guessing.\n\n296\n00:17:24.930 --> 00:17:27.120\nI should actually use the right\nwords when I speak here.\n\n297\n00:17:27.120 --> 00:17:31.630\nOkay, so it doesn't necessarily mean\nthat I'm just making you guess.\n\n298\n00:17:31.630 --> 00:17:38.290\nWhat it means though, is here's what\nyou should have if it's not a value.\n\n299\n00:17:38.290 --> 00:17:40.770\nIn other words, what should it default to?\n\n300\n00:17:40.770 --> 00:17:41.310\nOkay?\n\n301\n00:17:41.310 --> 00:17:43.732\nAnd I can make it default to\nanything that I want to but\n\n302\n00:17:43.732 --> 00:17:45.448\nusually a zero is what we talk about.\n\n303\n00:17:45.448 --> 00:17:48.600\nSo let's think about this\nidea of quantity, right?\n\n304\n00:17:48.600 --> 00:17:51.150\nWhen I have a quantity\nas being represented,\n\n305\n00:17:51.150 --> 00:17:55.660\nlet say, in my database, let's say it's\nsomething like an order quantity, okay?\n\n306\n00:17:55.660 --> 00:17:59.055\nThere's no doubt that I could\nleave that thing blank, okay?\n\n307\n00:17:59.055 --> 00:18:03.483\nSo if I print it out here, I've got Wes,\nI've got Peter as my customers and\n\n308\n00:18:03.483 --> 00:18:06.808\nthat is fine, and\nnow I print that thing out as a report.\n\n309\n00:18:06.808 --> 00:18:11.992\nWell, it shows Wes is actually ordering\nthree, Ronnie is ordering two, and\n\n310\n00:18:11.992 --> 00:18:17.680\nthen Peter's is just blank, over on\nthat column that says order quantity.\n\n311\n00:18:17.680 --> 00:18:20.170\nWell, what does that mean for Peter?\n\n312\n00:18:20.170 --> 00:18:22.140\nWhat does that value actually mean?\n\n313\n00:18:22.140 --> 00:18:25.780\nDoes that mean that Peter just did not\nreport it to me like I was talking about?\n\n314\n00:18:25.780 --> 00:18:30.120\nDoes that mean that Peter didn't actually\nturn in any particular quantity for\n\n315\n00:18:30.120 --> 00:18:32.750\nthe sales that he had,\nor for what he's buying?\n\n316\n00:18:32.750 --> 00:18:34.440\nWell, it could be that.\n\n317\n00:18:34.440 --> 00:18:37.180\nIt could be that he absolutely\ndidn't order anything.\n\n318\n00:18:37.180 --> 00:18:39.138\nIt could be that he just\ndidn't report it yet.\n\n319\n00:18:39.138 --> 00:18:43.880\nIt could be that we're just waiting for\nhim to actually tell us what's going on.\n\n320\n00:18:43.880 --> 00:18:45.610\nSo we don't have a clue.\n\n321\n00:18:45.610 --> 00:18:50.010\nBut what I can do instead, right,\nif I run a report that generates something\n\n322\n00:18:50.010 --> 00:18:54.120\nlike here's the sales order of\nquantity on everybody, right?\n\n323\n00:18:54.120 --> 00:18:58.630\nIs that instead,\nwhen it actually lists out Wes five and\n\n324\n00:18:58.630 --> 00:19:03.150\nRonnie two, and then Peter,\ninstead of it being a zero or\n\n325\n00:19:03.150 --> 00:19:05.850\nwhatever, it starts off with\na default value instead.\n\n326\n00:19:05.850 --> 00:19:06.400\nOkay?\n\n327\n00:19:06.400 --> 00:19:12.100\nAnd we could put no sale if we wanted,\nto or no amount yet, or none reported,\n\n328\n00:19:12.100 --> 00:19:16.600\nor whatever it might be, a zero might be\nthe best place to actually start, okay?\n\n329\n00:19:16.600 --> 00:19:18.988\nAnd that's the key here,\nis the default that we're left with.\n\n330\n00:19:18.988 --> 00:19:20.249\n>> So the default constraint,\n\n331\n00:19:20.249 --> 00:19:23.086\nit can potentially save you some\nof the investigative reporting\n\n332\n00:19:23.086 --> 00:19:26.430\nthat you'll have to do to be able to\nfind out what the heck's going on.\n\n333\n00:19:26.430 --> 00:19:30.340\n>> Right, and that's what we really want\nto actually put in place here, okay?\n\n334\n00:19:30.340 --> 00:19:34.960\nSo instead, you might see that, a kind of\na b something that you have to deal with.\n\n335\n00:19:34.960 --> 00:19:36.494\nSo, let's take a look here and\n\n336\n00:19:36.494 --> 00:19:40.745\nhopefully this will also help clear it up\ncuz sometimes my explanations don't really\n\n337\n00:19:40.745 --> 00:19:43.238\nclear any water as much as\nit muddles it a bit more.\n\n338\n00:19:43.238 --> 00:19:45.320\nSo, let's take a look here, okay?\n\n339\n00:19:45.320 --> 00:19:47.890\nSo, we're gonna create this table and\nwe're gonna try and\n\n340\n00:19:47.890 --> 00:19:53.030\ntake care by using the default\nconstraints here, to help out.\n\n341\n00:19:53.030 --> 00:19:55.380\nSo I'm hoping that the explanation,\nas we walk through here,\n\n342\n00:19:55.380 --> 00:19:57.480\nhelps us out a little bit more.\n\n343\n00:19:57.480 --> 00:19:59.930\nSo, we're gonna create a new table and\nwe're gonna call it Products1.\n\n344\n00:19:59.930 --> 00:20:05.040\nI already have a products table, but\nI wanted to add in these values as well.\n\n345\n00:20:05.040 --> 00:20:07.060\nSo, my product ID here\nis gonna be an integer.\n\n346\n00:20:07.060 --> 00:20:11.600\nI'm gonna make sure it's not a null,\nand this is gonna be a prime one for\n\n347\n00:20:11.600 --> 00:20:12.700\na primary key.\n\n348\n00:20:12.700 --> 00:20:15.167\nSo that's why I also added an identity,\nokay?\n\n349\n00:20:15.167 --> 00:20:19.040\nProduct name, fifty characters long,\nthis one cannot be a null.\n\n350\n00:20:19.040 --> 00:20:21.480\nSupplier ID,\nwanna make sure that that's not a null.\n\n351\n00:20:21.480 --> 00:20:24.320\nCategory ID,\nI wanna make sure that's not a null here.\n\n352\n00:20:24.320 --> 00:20:27.943\nUnit price, I wanna make sure that's\nactually a money data format,\n\n353\n00:20:27.943 --> 00:20:31.090\nor data type, and that one's not a null.\n\n354\n00:20:31.090 --> 00:20:35.830\nBut, what if we don't know how much it\nactually cost at that point, right?\n\n355\n00:20:35.830 --> 00:20:40.400\nSo even if I have products, it could\nbe that we don't know exactly what it\n\n356\n00:20:40.400 --> 00:20:44.520\nactually costs as far as\nthe per unit right now, okay.\n\n357\n00:20:44.520 --> 00:20:47.590\nSo now, notice that what I'm doing, okay,\n\n358\n00:20:47.590 --> 00:20:49.960\nbecause I'm telling it that I\ndon't want it to be a null.\n\n359\n00:20:49.960 --> 00:20:53.030\nI don't want there to be a possibility\nthat we're not doing this.\n\n360\n00:20:53.030 --> 00:20:54.710\nI'm gonna add in this constraint.\n\n361\n00:20:54.710 --> 00:20:58.790\nAnd now you see another prefix here, DFT.\n\n362\n00:20:58.790 --> 00:21:02.370\nNow, I actually added in the T in there\ncuz I like that with the default.\n\n363\n00:21:02.370 --> 00:21:05.950\nBut we saw it a little bit earlier\nwhen we were demonstrating something,\n\n364\n00:21:05.950 --> 00:21:09.380\nthat you also normally see\nit reported as a DF instead.\n\n365\n00:21:09.380 --> 00:21:13.280\nSo I like adding in the T cuz it just\nmakes me feel a little bit better, okay?\n\n366\n00:21:13.280 --> 00:21:15.050\nThen I'm gonna do it on this unit price.\n\n367\n00:21:15.050 --> 00:21:17.650\nAnd now, notice what I can declare.\n\n368\n00:21:17.650 --> 00:21:20.110\nI can declare what that\ndefault value is gonna be.\n\n369\n00:21:20.110 --> 00:21:22.470\nNow, that doesn't mean that\nthat value can't change.\n\n370\n00:21:22.470 --> 00:21:25.440\nBut I'm saying,\nI just want it if it's not there, okay.\n\n371\n00:21:25.440 --> 00:21:28.624\nIn other words, if you don't\nsee a value there, report a 0.\n\n372\n00:21:29.680 --> 00:21:32.320\nSo that's why it's called\na default constraint for us,\n\n373\n00:21:32.320 --> 00:21:34.580\nto be able to do this as well.\n\n374\n00:21:34.580 --> 00:21:36.480\nNow, we can do this with\nmultiple data types,\n\n375\n00:21:36.480 --> 00:21:38.670\nnotice I change it up\non the next one here.\n\n376\n00:21:38.670 --> 00:21:43.590\nThis discontinued BIT is\njust a check mark, okay?\n\n377\n00:21:43.590 --> 00:21:45.490\nIs it discontinued, or is it not, right?\n\n378\n00:21:45.490 --> 00:21:48.680\nIt's just a simple binary\ntype of check mark here.\n\n379\n00:21:48.680 --> 00:21:52.300\nBut I'm also saying I don't want\nthat to actually be able to be left\n\n380\n00:21:52.300 --> 00:21:54.650\nwithout an answer.\n\n381\n00:21:54.650 --> 00:21:57.030\nSo instead,\nI'm also gonna be able to constrain this.\n\n382\n00:21:57.030 --> 00:21:59.648\nAnd I'm gonna tell it, hey,\nby default, it's gonna be off, okay.\n\n383\n00:21:59.648 --> 00:22:01.426\nSo that makes sense, right, the 0?\n\n384\n00:22:01.426 --> 00:22:03.606\nLet me see if I can make that\nscroll over a little bit.\n\n385\n00:22:03.606 --> 00:22:04.610\nThere we go.\n\n386\n00:22:04.610 --> 00:22:08.380\nOkay, a 0's actually meaning\nthe idea of off for us.\n\n387\n00:22:08.380 --> 00:22:10.980\nSo I wanna just make sure\nthat I report something\n\n388\n00:22:10.980 --> 00:22:15.850\nif we are actually going to end up\ndoing that for what we want, okay?\n\n389\n00:22:15.850 --> 00:22:20.860\nSo that way, we don't have the idea\nof null is just interspersed.\n\n390\n00:22:20.860 --> 00:22:22.980\nBecause I didn't know what else to do.\n\n391\n00:22:22.980 --> 00:22:24.420\nI can now say that.\n\n392\n00:22:24.420 --> 00:22:27.100\nSo you can again, like I said,\nreport it however you want to.\n\n393\n00:22:27.100 --> 00:22:28.678\nYou can change those numbers.\n\n394\n00:22:28.678 --> 00:22:30.118\nUsually the key here if you do it,\n\n395\n00:22:30.118 --> 00:22:34.130\nis to make sure that you change it to\nthe data type, the same data type.\n\n396\n00:22:34.130 --> 00:22:38.520\nSo for example, MONEY here,\nthat's not a great one for\n\n397\n00:22:38.520 --> 00:22:43.108\nme to put no value as far as\na string data type goes, right?\n\n398\n00:22:43.108 --> 00:22:46.622\nBut at the same time,\nI think you could do it if you wanted to.\n\n399\n00:22:46.622 --> 00:22:49.967\nI'm not gonna try it for right now, but\nI think you could but a lot of times what\n\n400\n00:22:49.967 --> 00:22:53.078\nthat means is you have to convert it\nover to a string to actually do that.\n\n401\n00:22:53.078 --> 00:22:56.820\nBut you don't want to actually get\ninto that if you don't need to.\n\n402\n00:22:56.820 --> 00:23:01.090\nSo usually, you're keeping the same\nidea of the data type here in between.\n\n403\n00:23:01.090 --> 00:23:06.340\nSo in this sense, that's what we can end\nup doing so let's go ahead and run this.\n\n404\n00:23:06.340 --> 00:23:07.970\nLet me make sure that\nI'm only running that.\n\n405\n00:23:10.160 --> 00:23:13.240\nSo I'm gonna highlight\nmy entire code there.\n\n406\n00:23:13.240 --> 00:23:14.320\nAnd execute it.\n\n407\n00:23:14.320 --> 00:23:18.830\nAnd now, it's actually telling me I\nhave an unusual table constraint here.\n\n408\n00:23:18.830 --> 00:23:22.300\nFor the definition of table.\n\n409\n00:23:22.300 --> 00:23:23.979\nAll right, well, let's see here.\n\n410\n00:23:23.979 --> 00:23:25.250\nSee what I did wrong.\n\n411\n00:23:26.650 --> 00:23:29.310\nAll right, so I found out what\nthe issue actually is here.\n\n412\n00:23:29.310 --> 00:23:31.212\nI went overboard on the commas, okay?\n\n413\n00:23:31.212 --> 00:23:33.708\nAnd with that,\nwith my constraint statements,\n\n414\n00:23:33.708 --> 00:23:35.570\nbecause that's where\nit's complaining about.\n\n415\n00:23:35.570 --> 00:23:37.720\nIt's essentially saying I'm looking for\nthis but\n\n416\n00:23:37.720 --> 00:23:40.978\nI don't know what you wanna link to, so\nI need to link that back to UnitPrice.\n\n417\n00:23:40.978 --> 00:23:44.600\nSo that's what I'm gonna do here and\nalso remove that other comma.\n\n418\n00:23:44.600 --> 00:23:48.471\nAnd so now when we run this entirety here,\nit should run and\n\n419\n00:23:48.471 --> 00:23:52.588\nshould allow me to have those\ndefault constraints set there.\n\n420\n00:23:52.588 --> 00:23:56.598\nSo now when I do that, and it doesn't\nmatter cuz I don't have any data in it.\n\n421\n00:23:56.598 --> 00:24:02.957\nBut if I were to do a simple SELECT\nstatement here, FROM dbo.Products,\n\n422\n00:24:02.957 --> 00:24:09.019\nI'm about to type in categories,\nProducts1 is the one that I want.\n\n423\n00:24:12.641 --> 00:24:14.190\nAnd then I execute it.\n\n424\n00:24:14.190 --> 00:24:15.924\nWell now, it actually does show up.\n\n425\n00:24:15.924 --> 00:24:19.316\nBut if I had data in there,\nwhat should happen is that unit price nor\n\n426\n00:24:19.316 --> 00:24:21.559\nthe discontinued would actually be blank,\n\n427\n00:24:21.559 --> 00:24:25.090\nit would actually show up as a default\nin one way or the other, right?\n\n428\n00:24:25.090 --> 00:24:29.634\nThe bit's not gonna show up, but the ID\nof the UnitPrice should show up as a 0\n\n429\n00:24:29.634 --> 00:24:32.119\ninstead, and that really does help out.\n\n430\n00:24:32.119 --> 00:24:35.388\nNow, when we start to take a look\nat something like this, right?\n\n431\n00:24:35.388 --> 00:24:39.112\nAnd I can see the actual\nstatements here in the end.\n\n432\n00:24:39.112 --> 00:24:43.077\nWell, you still go back to the same\nplace if you want to see if those unique\n\n433\n00:24:43.077 --> 00:24:44.837\nconstraints really are there.\n\n434\n00:24:45.914 --> 00:24:48.330\nSo, back to that system constraints.\n\n435\n00:24:48.330 --> 00:24:48.990\nThis one though,\n\n436\n00:24:48.990 --> 00:24:53.530\nis actually on a different table which\nis called sys.default_constraints, and\n\n437\n00:24:53.530 --> 00:24:57.650\nyou can see that there's the two\nthat I created right here as well.\n\n438\n00:24:57.650 --> 00:25:01.710\nAnd it absolutely shows up, gives us that\nability to know that those constraints\n\n439\n00:25:01.710 --> 00:25:06.800\nwill absolutely work when we want them\nto and should do it all the time.\n\n440\n00:25:06.800 --> 00:25:09.530\nNow you might wonder,\nwhat did this really help overall?\n\n441\n00:25:09.530 --> 00:25:12.510\nIt added in a lot more\nwork that I need to do.\n\n442\n00:25:12.510 --> 00:25:16.120\nBut the work is absolutely\nhelpful in this sense, okay?\n\n443\n00:25:16.120 --> 00:25:19.500\nRemember that we linked categories and\nproducts together, right,\n\n444\n00:25:19.500 --> 00:25:21.220\nthose two tables together.\n\n445\n00:25:21.220 --> 00:25:23.260\nSo now, let's say that here it is.\n\n446\n00:25:23.260 --> 00:25:26.630\nWes is deciding that he's\nlooking around my database.\n\n447\n00:25:26.630 --> 00:25:31.530\nAnd what he sees is this unusual\nthing called Categories and Products.\n\n448\n00:25:31.530 --> 00:25:34.655\nAnd he doesn't know what\nthose two tables are about.\n\n449\n00:25:34.655 --> 00:25:40.352\nWell, if he right-clicks on this thing and\nthen goes down to Delete,\n\n450\n00:25:41.814 --> 00:25:46.059\nHere, now he's at the Delete Object and\nhe goes, I don't need that.\n\n451\n00:25:46.059 --> 00:25:48.817\nThat shouldn't be in my database,\nand clicks OK.\n\n452\n00:25:48.817 --> 00:25:49.584\nWell look at that.\n\n453\n00:25:49.584 --> 00:25:52.359\nIt actually ended up\ngenerating an error here.\n\n454\n00:25:53.844 --> 00:25:57.036\nAnd you can see it, where it says,\nlook, drop ended up failing for\n\n455\n00:25:57.036 --> 00:25:58.235\nthat particular table.\n\n456\n00:25:58.235 --> 00:25:59.351\nAnd if I hover over that,\n\n457\n00:25:59.351 --> 00:26:02.603\nlet's see if I can actually show you\nwhen I hover over that what happens.\n\n458\n00:26:02.603 --> 00:26:05.933\nAnd it actually says, drop failed for\nthis particular table, and\n\n459\n00:26:05.933 --> 00:26:07.590\nI select the message.\n\n460\n00:26:07.590 --> 00:26:10.400\nLet's see if we can take a look\nat what this message says, okay?\n\n461\n00:26:11.900 --> 00:26:16.800\nIt says, an exception while executing\nthis could not drop the actual categories\n\n462\n00:26:16.800 --> 00:26:18.880\nbecause it is referenced by what?\n\n463\n00:26:18.880 --> 00:26:20.670\nA FOREIGN KEY.\n\n464\n00:26:20.670 --> 00:26:25.210\nSo notice how it's not allowing\nme to delete the table,\n\n465\n00:26:25.210 --> 00:26:30.860\nbecause now I have linked the foreign\nkey inside of the Products table\n\n466\n00:26:30.860 --> 00:26:33.650\nto the Categories table itself.\n\n467\n00:26:33.650 --> 00:26:37.160\nSo this is where we offer that idea\nof that referential integrity.\n\n468\n00:26:37.160 --> 00:26:40.468\nIf you delete that value,\nwhat it's telling you, Ronnie,\n\n469\n00:26:40.468 --> 00:26:44.890\nif you delete categories, then whatever is\nreferred to in the product tables in that\n\n470\n00:26:44.890 --> 00:26:47.680\ncategories column will\nno longer have a link.\n\n471\n00:26:47.680 --> 00:26:51.700\nAnd that means that I'll have orphaned\ndata in that particular table.\n\n472\n00:26:51.700 --> 00:26:54.200\nSo, no, I will not allow you do this.\n\n473\n00:26:54.200 --> 00:26:58.700\nAnd setting up these constraints is\nwhat really helps us to set that up and\n\n474\n00:26:58.700 --> 00:27:01.910\nset that apart, and\nmake sure that our data will\n\n475\n00:27:01.910 --> 00:27:06.250\nalways have that type of referential\nintegrity that it needs to have.\n\n476\n00:27:06.250 --> 00:27:09.050\nSo you can see why setting\nthese constraints up,\n\n477\n00:27:09.050 --> 00:27:12.610\nwhether it's the primary key or\nthe foreign key, default or unique,\n\n478\n00:27:12.610 --> 00:27:15.870\nare really helpful to us, especially\nwhen we're dealing with databases.\n\n479\n00:27:15.870 --> 00:27:16.520\n>> I tell you, Ronnie,\n\n480\n00:27:16.520 --> 00:27:18.980\nthose constraints can definitely\nlook like they'll come in handy,\n\n481\n00:27:18.980 --> 00:27:22.120\nespecially maintaining the consistency and\nthe integrity that you're talking about.\n\n482\n00:27:22.120 --> 00:27:23.280\nA lot of great information, and\n\n483\n00:27:23.280 --> 00:27:25.700\ndo what Ronnie's been telling you,\nremember your syntax.\n\n484\n00:27:25.700 --> 00:27:28.720\nJust because they got a nice\nlittle right-click option for\n\n485\n00:27:28.720 --> 00:27:31.550\nsomething, probably not gonna be the way\nMicrosoft's gonna ask you on the exam.\n\n486\n00:27:31.550 --> 00:27:33.030\nSo know your syntax.\nRonnie, thanks for\n\n487\n00:27:33.030 --> 00:27:35.840\nthat information, but it does look we're\ncoming to the end of this episode.\n\n488\n00:27:35.840 --> 00:27:38.290\nDo you have any additional\nwords of wisdom for us?\n\n489\n00:27:38.290 --> 00:27:41.430\n>> Once again, practice is the only\nword of wisdom that you really need.\n\n490\n00:27:41.430 --> 00:27:45.650\nYou gotta keep going over them\nuntil it becomes second nature.\n\n491\n00:27:45.650 --> 00:27:49.648\nUnderstand each of the concepts fully and\nthen you will be ready for the exam.\n\n492\n00:27:49.648 --> 00:27:51.750\n>> All right, Ronnie,\nas always thank you for being here, and\n\n493\n00:27:51.750 --> 00:27:53.030\nthank you to our viewers for watching.\n\n494\n00:27:53.030 --> 00:27:54.850\nBut we're gonna go ahead and\nsign out for ITPro.TV.\n\n495\n00:27:54.850 --> 00:27:56.300\nI've been your host, Wes Bryan.\n\n496\n00:27:56.300 --> 00:27:57.089\n>> And I'm Ronnie Wong.\n\n497\n00:27:57.089 --> 00:27:58.087\n>> And we'll see you next time.\n\n498\n00:27:58.087 --> 00:28:06.530\n[MUSIC].\n\n",
          "vimeoId": "165146910"
        },
        {
          "description": "In this episode, Daniel and Ronnie demonstrate how to create and alter DML Triggers in SQL 2014. The start by explaining the particulars of DML Triggers; the when/where/why/how they are used. Then they take a look at the AFTER trigger type followed by the INSTEAD OF trigger type. Finally, they explore nested triggers and how to use the UPDATE function.",
          "length": "1930",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-4-create_and_alter_dml_triggers-050916-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-4-create_and_alter_dml_triggers-050916-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-1-4-create_and_alter_dml_triggers-050916-1-sm.jpg",
          "title": "Create and Alter DML Triggers",
          "transcript": "WEBVTT\n\n1\n00:00:00.125 --> 00:00:10.125\n[MUSIC]\n\n2\n00:00:11.967 --> 00:00:16.170\nAll right, greetings everyone, and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:16.170 --> 00:00:19.104\nI'm your host Daniel Lowrie and\nin today's episode,\n\n4\n00:00:19.104 --> 00:00:23.650\nwe are continuing on with our series on\nquerying the Microsoft SQL Server 2014.\n\n5\n00:00:23.650 --> 00:00:26.640\nJoining me back in the studio again\ntoday is the master blaster himself,\n\n6\n00:00:26.640 --> 00:00:27.656\nthe king of all SQL.\n\n7\n00:00:27.656 --> 00:00:29.430\n>> [LAUGH]\n>> That is Mr. Ronnie Wong.\n\n8\n00:00:29.430 --> 00:00:31.130\nRonnie, welcome back to the show sir,\nhow's it going?\n\n9\n00:00:31.130 --> 00:00:32.750\n>> Well, thank you for\nhaving me back on the show.\n\n10\n00:00:32.750 --> 00:00:36.564\nAs we continue on taking a look at some\nof the other elements that we need to\n\n11\n00:00:36.564 --> 00:00:39.391\nunderstand about querying\nthe SQL Server 2014.\n\n12\n00:00:39.391 --> 00:00:44.068\nToday we're gonna focus in on\na special type of a stored\n\n13\n00:00:44.068 --> 00:00:47.332\nprocedure that we call DML triggers.\n\n14\n00:00:47.332 --> 00:00:50.202\nNow, don't get me wrong, if you're\nactually watching and you're saying, wait\n\n15\n00:00:50.202 --> 00:00:53.420\na minute, this doesn't seem to be right,\nwe haven't talked about triggers at all.\n\n16\n00:00:53.420 --> 00:00:55.860\nWell, we do,\nwe'll cover it in another episode, so\n\n17\n00:00:55.860 --> 00:01:00.450\nmake sure you check that show out on\ntalking about stored procedures as well.\n\n18\n00:01:00.450 --> 00:01:04.500\nBut this one is focusing in on that\nspecial type that we call triggers.\n\n19\n00:01:04.500 --> 00:01:08.990\nNow when it comes down to triggers, this\nis some of the procedures that we do or\n\n20\n00:01:08.990 --> 00:01:10.240\nroutine that we do.\n\n21\n00:01:10.240 --> 00:01:13.730\nSo that if we actually want\nto make some type of change,\n\n22\n00:01:13.730 --> 00:01:17.680\nwe want to be able to allow that, but\nwe also want to ensure some things.\n\n23\n00:01:17.680 --> 00:01:21.680\nIn other words, we wanna make sure\nthat if I enter something in wrong, or\n\n24\n00:01:21.680 --> 00:01:23.090\nif there's a duplicate.\n\n25\n00:01:23.090 --> 00:01:25.280\nOr if there's something that I'm\nactually trying to delete and\n\n26\n00:01:25.280 --> 00:01:30.040\nI'm not sure about it, that I want to\nmaybe issue me a statement of some sort.\n\n27\n00:01:30.040 --> 00:01:32.270\nOr to prevent the action from happening.\n\n28\n00:01:32.270 --> 00:01:36.860\nAnd so when we start talking about\ntriggers, that's normally the routines\n\n29\n00:01:36.860 --> 00:01:41.690\nthat we also add in on top of learning\nthings like our SQL statements, right?\n\n30\n00:01:41.690 --> 00:01:46.700\nOur select statements, our queries that we\ndo that will help us to do this as well.\n\n31\n00:01:46.700 --> 00:01:51.020\nAnd so when we start taking a look here,\nthis is normally extra stuff right?\n\n32\n00:01:51.020 --> 00:01:53.990\nSo it doesn't have to do with being\nable to get the information out\n\n33\n00:01:53.990 --> 00:01:57.690\nas much as to insure that at times when\nwe do need to add in information or\n\n34\n00:01:57.690 --> 00:02:00.495\nwe need to delete information or\nupdate information.\n\n35\n00:02:00.495 --> 00:02:04.140\nThat what we can do is we can set\nan action plan in place that says\n\n36\n00:02:04.140 --> 00:02:06.760\nif you start noticing\nthis stuff happening.\n\n37\n00:02:06.760 --> 00:02:09.410\nWhen we're starting to query\nthe SQL server itself, or\n\n38\n00:02:09.410 --> 00:02:13.730\nmake some type of insertion into the SQL\nserver that it instead can actually\n\n39\n00:02:13.730 --> 00:02:18.260\nhave something happen, or we can actually\ntell it to address it in some other way.\n\n40\n00:02:18.260 --> 00:02:21.540\nSo a very powerful way to essentially\nallow those that are querying the SQL\n\n41\n00:02:21.540 --> 00:02:26.340\nserver to know that something is happening\nand that the SQL server is aware of it.\n\n42\n00:02:26.340 --> 00:02:29.670\nSo it's a great place for\nus to actually take a moment here and\n\n43\n00:02:29.670 --> 00:02:32.040\ntalk about the idea of triggers as well.\n\n44\n00:02:32.040 --> 00:02:35.060\n>> So it sounds like we're building\nin a bit of a safety net for\n\n45\n00:02:35.060 --> 00:02:39.390\nourselves in case we start maybe doing\nthings that we want to be aware of and\n\n46\n00:02:39.390 --> 00:02:40.770\nwe're just not realizing.\n\n47\n00:02:40.770 --> 00:02:42.940\n>> Yeah, a lot of times that's\nexactly what happens, right?\n\n48\n00:02:42.940 --> 00:02:46.810\nSo even though we might actually come up\nwith a select statement to get information\n\n49\n00:02:46.810 --> 00:02:49.650\nout, there's sometimes,\nlike I said, when you're updating,\n\n50\n00:02:49.650 --> 00:02:53.810\nespecially when you're trying to update\ninformation inside of your SQL database.\n\n51\n00:02:53.810 --> 00:02:56.800\nThat you may say all right, I want to\nupdate the information but now you start\n\n52\n00:02:56.800 --> 00:03:00.562\nlooking at some of the records and all the\nsudden you see things like duplication.\n\n53\n00:03:00.562 --> 00:03:02.623\nWell if you want to prevent duplications,\n\n54\n00:03:02.623 --> 00:03:05.040\na trigger is probably one\nof the best ways to do so.\n\n55\n00:03:05.040 --> 00:03:08.802\nBecause it means that if I actually create\nsome kind of insertion statement and\n\n56\n00:03:08.802 --> 00:03:11.025\nit actually ends up being\na duplicate of that,\n\n57\n00:03:11.025 --> 00:03:14.282\nit can send me a trigger saying whoa,\nI already sensed a duplicate.\n\n58\n00:03:14.282 --> 00:03:16.671\nI'm not gonna allow you to go ahead and\nupdate this,\n\n59\n00:03:16.671 --> 00:03:19.947\nlet me just give you a warning message\ninstead, so it really does help.\n\n60\n00:03:19.947 --> 00:03:24.980\nNow, when we actually use triggers, is\nthat the only thing that a trigger can do?\n\n61\n00:03:24.980 --> 00:03:29.861\nNot necessarily, we can also have this,\nof course, implemented in .net coding.\n\n62\n00:03:29.861 --> 00:03:32.856\nYou can also have it implemented in some\nof the other things that we're doing.\n\n63\n00:03:32.856 --> 00:03:36.737\nBut specifically, especially when\nwe're getting ready for this exam,\n\n64\n00:03:36.737 --> 00:03:40.379\nwe're gonna really be focusing in on,\nwell, very basic triggers.\n\n65\n00:03:40.379 --> 00:03:45.420\nAnd these are what we call after and\ninstead of triggers, instead, okay?\n\n66\n00:03:45.420 --> 00:03:49.410\nOr, what we call instead triggers I think\nis probably the proper terminology.\n\n67\n00:03:49.410 --> 00:03:53.090\nSo, we're not really focusing on all\nthose things that have to do with more\n\n68\n00:03:53.090 --> 00:03:55.510\nprogramming, even though we can.\n\n69\n00:03:55.510 --> 00:03:59.440\nMost of what we're doing here really\ndoes have to tie into the things that we\n\n70\n00:03:59.440 --> 00:04:04.670\nalready learned about in our basic way of\nquerying the SQL, the database itself.\n\n71\n00:04:04.670 --> 00:04:10.325\nSo you will hear people talk\nabout DML triggers as well.\n\n72\n00:04:10.325 --> 00:04:11.325\nAnd so a lot of these,\n\n73\n00:04:11.325 --> 00:04:15.005\nthey have to have an event assigned to\nthem that will allow them to do that.\n\n74\n00:04:15.005 --> 00:04:18.595\nAnd then once you get focused in on how\nwe actually create a trigger as well.\n\n75\n00:04:18.595 --> 00:04:21.965\nAnd then you'll also have\nwhat they call DDL triggers,\n\n76\n00:04:21.965 --> 00:04:25.560\nwhich is the data definition\nlanguage triggers instead.\n\n77\n00:04:25.560 --> 00:04:29.265\nIf you're going to create a table,\nyou instead can actually say look,\n\n78\n00:04:29.265 --> 00:04:33.649\nsince we're now working at the data access\nlayer, I wanna make sure that the table is\n\n79\n00:04:33.649 --> 00:04:37.321\ngonna be created according to whatever\nformat that I wanted created.\n\n80\n00:04:37.321 --> 00:04:40.224\nAnd I can go ahead and\nimplement triggers like that as well.\n\n81\n00:04:40.224 --> 00:04:43.320\nBut that's a whole different level,\nand as we go on for\n\n82\n00:04:43.320 --> 00:04:47.306\nthrough the series of getting towards\nyour MCSA or MCSE in SQL Server.\n\n83\n00:04:47.306 --> 00:04:51.180\nYou'll learn more about\nthat in that DDL instead.\n\n84\n00:04:51.180 --> 00:04:53.737\nSo at this point we're\nreally just focusing\n\n85\n00:04:53.737 --> 00:04:58.381\non the most basic of DML triggers here,\nand that's what we want to be able to do.\n\n86\n00:04:58.381 --> 00:05:01.363\nNow there are some rules about\ntriggers that we have to talk about\n\n87\n00:05:01.363 --> 00:05:02.863\nright at the beginning, okay.\n\n88\n00:05:02.863 --> 00:05:04.528\nCuz you might start to think,\n\n89\n00:05:04.528 --> 00:05:07.658\nwell If I can actually run\nmultiple select statements,\n\n90\n00:05:07.658 --> 00:05:11.800\nthen I can actually create a trigger\non those select statements and work.\n\n91\n00:05:11.800 --> 00:05:13.950\nAnd that's perfectly fine, right.\n\n92\n00:05:13.950 --> 00:05:16.300\nBut normally,\nwhen you actually do create a trigger,\n\n93\n00:05:16.300 --> 00:05:19.870\nwhat you've gotta realize is that a\ntrigger can only be triggered one time in\n\n94\n00:05:19.870 --> 00:05:22.120\nthat batch of coding that you're writing.\n\n95\n00:05:22.120 --> 00:05:24.820\nNow can you make two separate batches and\nrun a trigger, yes.\n\n96\n00:05:24.820 --> 00:05:27.879\nBut remember each one of them only\ncan only have one trigger, so\n\n97\n00:05:27.879 --> 00:05:29.600\nit only happens one time.\n\n98\n00:05:29.600 --> 00:05:32.550\nSo that's one of the keys that\nwe have to think about as well.\n\n99\n00:05:32.550 --> 00:05:34.712\nBut normally for\nus that's actually gonna be enough for\n\n100\n00:05:34.712 --> 00:05:36.052\nwhat we're actually going to do.\n\n101\n00:05:36.052 --> 00:05:39.608\nSo let's go ahead and\ntake a look at just the basic creation of\n\n102\n00:05:39.608 --> 00:05:42.206\na trigger that will help us out here,\nokay?\n\n103\n00:05:42.206 --> 00:05:45.280\nSo, on my screen, I went ahead and\n\n104\n00:05:45.280 --> 00:05:51.006\nI started off here by creating\nwhat's called an after trigger.\n\n105\n00:05:51.006 --> 00:05:53.275\nNow, when we start talking about that,\n\n106\n00:05:53.275 --> 00:05:57.229\nthis is something that actually ends\nup happening a lot of times here.\n\n107\n00:05:57.229 --> 00:06:01.455\nWhen we say hey, I want this to occur\nafter you read the statement, okay?\n\n108\n00:06:01.455 --> 00:06:04.883\nSo it's not gonna replace\nwhat is going to happen, but\n\n109\n00:06:04.883 --> 00:06:09.354\nwe actually want to implement some\ntype of action, some type of event or\n\n110\n00:06:09.354 --> 00:06:13.600\nnot even, some type of action I\nthink is probably the best one.\n\n111\n00:06:13.600 --> 00:06:16.300\nAfter some type of event occurs here,\nokay?\n\n112\n00:06:16.300 --> 00:06:19.490\nNow, this is typically how you'll\nend up seeing it formatted.\n\n113\n00:06:19.490 --> 00:06:21.820\nSo I could strip it down to\njust the bare element, but\n\n114\n00:06:21.820 --> 00:06:24.400\nyou might not see it that way,\nespecially when it comes to the exam.\n\n115\n00:06:24.400 --> 00:06:28.280\nSo one of the things that they do right at\nthe beginning, the majority of the time,\n\n116\n00:06:28.280 --> 00:06:31.100\nespecially when you're learning this,\nis that whatever name\n\n117\n00:06:31.100 --> 00:06:34.760\nyou're gonna create the trigger,\njust in case it exists before.\n\n118\n00:06:34.760 --> 00:06:38.530\nIn other words, you might think that hey,\nI wanna create a brand new one, but\n\n119\n00:06:38.530 --> 00:06:40.900\nI don't know if this actually has existed.\n\n120\n00:06:40.900 --> 00:06:43.770\nWell, you can go ahead and\ndrop that trigger instead.\n\n121\n00:06:43.770 --> 00:06:47.040\nYou run this command to ensure\nthat you're starting from scratch.\n\n122\n00:06:47.040 --> 00:06:48.670\nNow do you have to do that every time?\n\n123\n00:06:48.670 --> 00:06:51.900\nNo, but since we're actually in testing\nright now, it's a great thing for\n\n124\n00:06:51.900 --> 00:06:53.390\nus to go ahead and do.\n\n125\n00:06:53.390 --> 00:06:56.450\nAnd this is just saying look, here's the\nname of the trigger that I'm gonna create,\n\n126\n00:06:56.450 --> 00:06:59.060\nwhich is a little bit hefty here, okay?\n\n127\n00:06:59.060 --> 00:07:00.840\nBut it's fairly descriptive.\n\n128\n00:07:00.840 --> 00:07:05.370\nSo in the production table, okay, I'm\nactually gonna create a trigger with tr as\n\n129\n00:07:05.370 --> 00:07:07.540\nkind of a prefix to help us remember that.\n\n130\n00:07:07.540 --> 00:07:11.942\nCall it ProductCategory and we're actually\ngonna call it CategoryName here and\n\n131\n00:07:11.942 --> 00:07:15.740\nwe also have a little TR over here for\nan abbreviation.\n\n132\n00:07:15.740 --> 00:07:19.860\nNow the thing that I'm telling you is\ngo ahead and drop this if you find it.\n\n133\n00:07:19.860 --> 00:07:22.680\nAnd there's information in this trigger,\nokay.\n\n134\n00:07:22.680 --> 00:07:24.106\nGo ahead and drop it.\n\n135\n00:07:24.106 --> 00:07:28.026\nAnd I should see at the bottom of the\nscreen it tells me that the command was\n\n136\n00:07:28.026 --> 00:07:30.027\nactually completed successfully.\n\n137\n00:07:30.027 --> 00:07:31.699\nAll right, so that's actually fine.\n\n138\n00:07:31.699 --> 00:07:33.957\nSo now we know that we're\nstarting from scratch,\n\n139\n00:07:33.957 --> 00:07:37.935\nso that way nothing else might actually\ninterfere with what we're going to do.\n\n140\n00:07:37.935 --> 00:07:39.960\n>> Ronnie, really quickly,\nhow does this differ?\n\n141\n00:07:39.960 --> 00:07:43.300\nIt seems very much like conditional\nstatements, right, the ifs and\n\n142\n00:07:43.300 --> 00:07:45.610\nthe cases that we've seen before.\n\n143\n00:07:45.610 --> 00:07:47.460\nHow is this different than that?\n\n144\n00:07:47.460 --> 00:07:49.972\nI mean it really seems like\nyou're setting up a condition and\n\n145\n00:07:49.972 --> 00:07:52.888\nif it meets that condition, then it\nfires off a set of queries or code.\n\n146\n00:07:52.888 --> 00:07:56.896\n>> Yeah, actually it's very much similar\nto the idea of a conditional statement\n\n147\n00:07:56.896 --> 00:07:58.668\nhere that we're actually doing.\n\n148\n00:07:58.668 --> 00:08:02.395\nSo, instead of us doing a conditional\nstatement that just kinda report\n\n149\n00:08:02.395 --> 00:08:03.085\nsomething.\n\n150\n00:08:03.085 --> 00:08:06.491\nWe're actually going to create this so\nthat actually says when you see this\n\n151\n00:08:06.491 --> 00:08:09.130\nhappening in the database,\nthen do something about it.\n\n152\n00:08:09.130 --> 00:08:11.600\nEither create a record\nstatement that says, or\n\n153\n00:08:11.600 --> 00:08:14.120\na printed statement that says\nyes there's a duplicate.\n\n154\n00:08:14.120 --> 00:08:17.390\nOr, don't let it happen,\nyou actually figured it out,\n\n155\n00:08:17.390 --> 00:08:19.080\nthat's what's gonna happen here.\n\n156\n00:08:19.080 --> 00:08:21.860\nSo, notice that the first thing that we\nhave to do when we create a trigger is\n\n157\n00:08:21.860 --> 00:08:22.960\nfairly simple.\n\n158\n00:08:22.960 --> 00:08:24.830\nWe have to give it a name, okay?\n\n159\n00:08:24.830 --> 00:08:28.050\nNow, when you do so,\nnotice it's not very difficult, okay?\n\n160\n00:08:28.050 --> 00:08:30.470\nCreate trigger, and\nthen you give it a name.\n\n161\n00:08:30.470 --> 00:08:33.150\nNow, does it have to be this long, no.\n\n162\n00:08:33.150 --> 00:08:38.080\nBut you do want to make sure that it's\nlong enough to where you understand it.\n\n163\n00:08:38.080 --> 00:08:43.123\nBrevity is kind of the key, and the width,\nand the soul, of course, of SQL, right.\n\n164\n00:08:43.123 --> 00:08:46.781\nSo they really want you to keep it as\nshort as possible, but at the same time\n\n165\n00:08:46.781 --> 00:08:50.650\nthey will accept long names, so\nI also wanted to show that as well.\n\n166\n00:08:50.650 --> 00:08:56.063\nNow in this one, I could have left off\neven this production dot if I wanted to.\n\n167\n00:08:56.063 --> 00:09:00.761\nBut I wanted to make sure that I actually\nput it in the same schema that I\n\n168\n00:09:00.761 --> 00:09:03.360\nwant the trigger to also run in.\n\n169\n00:09:03.360 --> 00:09:07.660\nAnd this is also key, I cannot\ntake this particular trigger then,\n\n170\n00:09:07.660 --> 00:09:11.510\nnow that I've associated with a schema and\nrun it against something else.\n\n171\n00:09:11.510 --> 00:09:15.740\nIt says look, it's in the production\nschema so it will only run in production.\n\n172\n00:09:15.740 --> 00:09:19.720\nAnd then, I'm about to move stuff around\nwhich is gonna be really bad here,\n\n173\n00:09:19.720 --> 00:09:20.300\nwhich I did.\n\n174\n00:09:21.580 --> 00:09:24.060\nLook at that, see,\nlet me go ahead and undo that.\n\n175\n00:09:24.060 --> 00:09:26.980\nSo great thing about the undo\nkey will help us out here.\n\n176\n00:09:26.980 --> 00:09:30.160\nSo this will actually ensure that\nwe have everything that we need.\n\n177\n00:09:30.160 --> 00:09:34.300\nAnd notice that I'm also going to\ndo this on this one table here.\n\n178\n00:09:34.300 --> 00:09:38.565\nSo I'm creating a trigger for this one\nsingle table, and we've now got a name.\n\n179\n00:09:38.565 --> 00:09:42.390\nAnd I'm going to create an after trigger,\nis what we're going to do.\n\n180\n00:09:42.390 --> 00:09:46.740\nNow, when I say that, what am I telling\nit that's actually gonna happen?\n\n181\n00:09:46.740 --> 00:09:53.120\nThe two events that can happen here is\nactually an insert statement or an update.\n\n182\n00:09:53.120 --> 00:09:56.430\nOkay, and, actually, if I had both\nI could actually do both here.\n\n183\n00:09:56.430 --> 00:09:59.970\nSo I can take our one of these\nstatements if I want to.\n\n184\n00:09:59.970 --> 00:10:01.653\nAnd it will do so,\nI wanted to show you both.\n\n185\n00:10:01.653 --> 00:10:05.885\nSo if you say hey, after an update\noccurs then run back through here and\n\n186\n00:10:05.885 --> 00:10:10.712\nrun this trigger and see if it actually\nmeets the condition that's set, okay?\n\n187\n00:10:10.712 --> 00:10:14.812\nOr I can do it after an insert also\nhappens as well to show me something else\n\n188\n00:10:14.812 --> 00:10:16.780\nthat's going on.\n\n189\n00:10:16.780 --> 00:10:20.310\nSo in this particular trigger though,\nI'm just going to leave them both.\n\n190\n00:10:20.310 --> 00:10:23.400\nBecause I might actually be able to do\nboth of them, whether it's actually\n\n191\n00:10:23.400 --> 00:10:26.510\nan insert or an update that is\ngonna happen here, we can run that.\n\n192\n00:10:27.690 --> 00:10:30.713\nThen triggers,\nwe normally want to go ahead and\n\n193\n00:10:30.713 --> 00:10:35.183\nactually take the remaining code\nthat we have in this second section.\n\n194\n00:10:35.183 --> 00:10:38.632\nAnd put it in between begin and\nan end statement,\n\n195\n00:10:38.632 --> 00:10:44.310\nessentially encapsulating what we want\nto happen in this trigger as well.\n\n196\n00:10:44.310 --> 00:10:47.610\nOkay, so that's what we're\nalso putting it in between.\n\n197\n00:10:47.610 --> 00:10:51.220\nSo we also of course have this as to\nactually show us where it's going to\n\n198\n00:10:51.220 --> 00:10:52.450\nbegin, okay?\n\n199\n00:10:52.450 --> 00:10:54.770\nSo here's where\nthe coding's gonna come in.\n\n200\n00:10:54.770 --> 00:10:59.950\nSo now, the first thing I'm actually\ntelling it, that if you do a row count.\n\n201\n00:10:59.950 --> 00:11:04.576\nOkay, so in other words, as I run through\nthis statement, if I do a row count,\n\n202\n00:11:04.576 --> 00:11:09.660\nI want it to begin with zero and then to\nshow me what that return is going to be.\n\n203\n00:11:09.660 --> 00:11:11.698\nSo now I’m actually stating that,\nhey, go ahead and\n\n204\n00:11:11.698 --> 00:11:13.253\ncount through the rows that you need to.\n\n205\n00:11:13.253 --> 00:11:17.669\nBut with whatever it actually meets that\nthere’s a condition down at the bottom,\n\n206\n00:11:17.669 --> 00:11:19.550\ngive me a row count of that as well.\n\n207\n00:11:19.550 --> 00:11:23.903\nSo I can do that, and\nthen I also have this set no count on.\n\n208\n00:11:23.903 --> 00:11:27.390\nNow this is a little bit\nmore unusual here, okay?\n\n209\n00:11:27.390 --> 00:11:30.400\nSQL Server loves to actually give you,\nof course, messages.\n\n210\n00:11:30.400 --> 00:11:33.670\nThat tell you hey, this has been run on\nthree rows, it's been run on six rows,\n\n211\n00:11:33.670 --> 00:11:36.230\nit's been run on 50,000 rows overall.\n\n212\n00:11:36.230 --> 00:11:38.562\nWell every time we do that,\nright, it has to stop and\n\n213\n00:11:38.562 --> 00:11:41.603\ndo a generate that particular total,\nmake it report to the screen.\n\n214\n00:11:41.603 --> 00:11:45.540\nAnd then go ahead and generate more and\nreport it back to the screen.\n\n215\n00:11:45.540 --> 00:11:49.810\nBy setting the no count on, I'm saying\nlook, don't report to me these kind of\n\n216\n00:11:49.810 --> 00:11:52.910\nintermediate messages that really\ndon't have any meaning for\n\n217\n00:11:52.910 --> 00:11:54.630\nme to actually do anything about.\n\n218\n00:11:54.630 --> 00:11:56.550\nSo just let me go ahead and\nturn that on and\n\n219\n00:11:56.550 --> 00:12:00.030\nsay don't count it up,\nlet's just set it as it is.\n\n220\n00:12:00.030 --> 00:12:02.280\nNow this is where we were getting\ninto what Daniel was saying,\n\n221\n00:12:02.280 --> 00:12:04.420\nthe idea of an if statement here.\n\n222\n00:12:04.420 --> 00:12:09.690\nNow notice what I have, if the following\nexists is what we're saying, right?\n\n223\n00:12:09.690 --> 00:12:14.680\nSo if I'm actually ready to run\na select to count up everything,\n\n224\n00:12:14.680 --> 00:12:18.050\nfrom a table called inserted.\n\n225\n00:12:18.050 --> 00:12:23.266\nDoing a join on\nthe Production.ProductCategory,\n\n226\n00:12:23.266 --> 00:12:27.303\nthen I can go ahead and group by the name.\n\n227\n00:12:27.303 --> 00:12:27.827\nAnd then,\n\n228\n00:12:27.827 --> 00:12:31.280\nreturn to me a count of everything\nthat's actually greater than one.\n\n229\n00:12:31.280 --> 00:12:34.740\nIn other words make sure that\nat least there's more than one,\n\n230\n00:12:36.180 --> 00:12:37.952\nrecords that are actually there.\n\n231\n00:12:37.952 --> 00:12:40.585\nAll right so that's what it\nactually ends up saying here.\n\n232\n00:12:40.585 --> 00:12:43.745\nSo if this particular idea exists,\n\n233\n00:12:43.745 --> 00:12:48.945\nthe count of the number rows exists here,\nokay, based on this product category name.\n\n234\n00:12:48.945 --> 00:12:51.915\nAnd there's more than one,\n\n235\n00:12:51.915 --> 00:12:54.635\nthen I should have something\nthat actually comes about here.\n\n236\n00:12:54.635 --> 00:12:59.311\nAnd so what we see, is now we're\nactually beginning to say what is\n\n237\n00:12:59.311 --> 00:13:02.660\ngonna happen once that event occurs.\n\n238\n00:13:02.660 --> 00:13:07.640\nSo my trigger, instead, is going to\nactually throw up something else.\n\n239\n00:13:07.640 --> 00:13:12.460\nIt's gonna throw up a code here of 50,000\nand tell me that duplicate category\n\n240\n00:13:12.460 --> 00:13:17.730\nnames are not allowed, as if I update,\nor I insert in a duplicate category.\n\n241\n00:13:17.730 --> 00:13:19.238\nOkay, so that's what we're also getting.\n\n242\n00:13:19.238 --> 00:13:23.730\nSo, it's gonna go through all\nthe records of that table, count it up.\n\n243\n00:13:23.730 --> 00:13:25.960\nAnd then if I'm actually\nthe one doing an insert and\n\n244\n00:13:25.960 --> 00:13:30.435\nI add in an additional category that's\nexactly the same, it should throw this up.\n\n245\n00:13:30.435 --> 00:13:34.970\nOkay, or else, it shouldn't throw up\nanything and I end that statement, okay?\n\n246\n00:13:34.970 --> 00:13:38.290\nSo, that's what we're doing here, is\nwe're actually saying however it actually\n\n247\n00:13:38.290 --> 00:13:42.060\nhappens, I want to make\nsure that I can run this.\n\n248\n00:13:42.060 --> 00:13:46.380\nSo I'm gonna select the entire statement,\nall the way through the word go, and\n\n249\n00:13:46.380 --> 00:13:47.470\nthen execute it.\n\n250\n00:13:47.470 --> 00:13:50.180\nAnd let me verify that it ran here.\n\n251\n00:13:50.180 --> 00:13:53.975\nSo I get a command, successfully\ncompleted, which is what I wanted.\n\n252\n00:13:53.975 --> 00:13:59.255\nAnd so now, let me see if I\n\n253\n00:13:59.255 --> 00:14:03.365\njust kinda zoom out just a little bit so\nthat we can see a little bit more here.\n\n254\n00:14:03.365 --> 00:14:05.915\nNotice that I have a test\nstatement as well.\n\n255\n00:14:05.915 --> 00:14:10.245\nSo here it is, let's say that\nnow it's my duty to go ahead and\n\n256\n00:14:10.245 --> 00:14:14.450\ninsert a value into the product category.\n\n257\n00:14:14.450 --> 00:14:19.270\nAnd that is actually gonna be in the name\ncolumn in that ProductCategory table.\n\n258\n00:14:19.270 --> 00:14:22.090\nAnd that value that I'm inserting\nin there is TestCategory1.\n\n259\n00:14:22.090 --> 00:14:26.080\nNow before I do that, let me go ahead and\nrun this select statement so\n\n260\n00:14:26.080 --> 00:14:29.149\nthat we can see what's\nactually in that table.\n\n261\n00:14:30.870 --> 00:14:36.360\nAll right, so in that product category\ntable, I see a product category ID.\n\n262\n00:14:36.360 --> 00:14:41.190\nI see the names of the categories here and\nI see this row and\n\n263\n00:14:41.190 --> 00:14:43.960\nI see this test test category one.\n\n264\n00:14:43.960 --> 00:14:47.680\nSo, this test category one has\nalready been created in there.\n\n265\n00:14:47.680 --> 00:14:50.420\nAnd let's go ahead and\nsee what happens when we run that again.\n\n266\n00:14:50.420 --> 00:14:55.520\nActually I can change that up a little\nbit, and this will help us out as well.\n\n267\n00:14:55.520 --> 00:14:58.380\nLet me scroll back up.\n\n268\n00:14:58.380 --> 00:15:02.040\nSo let me add in a test category two\nbecause I know what should happen, is it\n\n269\n00:15:02.040 --> 00:15:06.700\nshould actually do a duplicate and then\nthey would actually tell me I can't do it.\n\n270\n00:15:06.700 --> 00:15:12.380\nLet me go ahead and insert this one\nas a new category and execute it.\n\n271\n00:15:12.380 --> 00:15:16.270\nSo one row has been affected and\nnow if I run that same statement again.\n\n272\n00:15:19.960 --> 00:15:25.500\nRight here, I should see that category\ntwo has now been added into that table,\n\n273\n00:15:25.500 --> 00:15:26.760\nwhich is exactly what we wanted.\n\n274\n00:15:28.040 --> 00:15:32.040\nSo that's perfectly fine, but\nnow if we come back in and\n\n275\n00:15:32.040 --> 00:15:34.140\nlet's do the idea of an update.\n\n276\n00:15:34.140 --> 00:15:37.595\nLet's say that what ends\nup happening here instead,\n\n277\n00:15:37.595 --> 00:15:40.915\nis that I also wanted to\nset the clothing category.\n\n278\n00:15:40.915 --> 00:15:44.933\nOkay, and then the name here,\nlet's say test category two,\n\n279\n00:15:44.933 --> 00:15:47.112\nthe one that we just did instead.\n\n280\n00:15:47.112 --> 00:15:51.707\nSo if I did an update statement\ninstead that actually set\n\n281\n00:15:51.707 --> 00:15:55.727\nthis up to being test category two,\non the name.\n\n282\n00:15:55.727 --> 00:15:57.550\nLet's see what happens here.\n\n283\n00:15:57.550 --> 00:15:58.780\nAnd I execute it.\n\n284\n00:15:58.780 --> 00:16:01.590\nI want you to see what happens, okay?\n\n285\n00:16:01.590 --> 00:16:03.832\nNotice it doesn't say that it actually,\n\n286\n00:16:03.832 --> 00:16:08.880\nlet me see if I can zoom in just a little\nbit more here so that we can see it, okay?\n\n287\n00:16:08.880 --> 00:16:12.423\nCannot insert duplicate key row object, so\n\n288\n00:16:12.423 --> 00:16:16.165\nit's not because the syntax is wrong,\nokay.\n\n289\n00:16:16.165 --> 00:16:20.205\nBut it's because it saw somewhere along\nthe line in this update statement\n\n290\n00:16:20.205 --> 00:16:21.545\nthat I had.\n\n291\n00:16:21.545 --> 00:16:24.845\nI could SET clothing if I wanted to,\nbut notice where when it actually\n\n292\n00:16:24.845 --> 00:16:27.600\nhit category2,\nit says a duplicate was installed.\n\n293\n00:16:27.600 --> 00:16:30.756\nSo it will not actually\nallow me to do that.\n\n294\n00:16:30.756 --> 00:16:35.266\nSo it has actually sensed this\nafter it happens instead, to say,\n\n295\n00:16:35.266 --> 00:16:38.874\nlook I'm not gonna allow\nthis duplicate to happen,\n\n296\n00:16:38.874 --> 00:16:43.481\nafter I read the entire statement\nthat we had up above here to work.\n\n297\n00:16:43.481 --> 00:16:47.541\nIt now says as I go through and you're\ntrying to do it, I will then go ahead and\n\n298\n00:16:47.541 --> 00:16:49.180\ntrigger that off..\n\n299\n00:16:49.180 --> 00:16:53.332\nAnd now I will get this and the statement\nwill be terminated where it doesn't allow\n\n300\n00:16:53.332 --> 00:16:57.566\nme to complete the action that may have\nactually caused more duplicates to happen.\n\n301\n00:16:57.566 --> 00:16:59.620\nSo it's one of these\nthings that we can do.\n\n302\n00:16:59.620 --> 00:17:05.610\nAnd then if I now try to add in,\nlet's say, category 2 again, I should\n\n303\n00:17:05.610 --> 00:17:09.180\nalso get the very same thing because\nwhether I choose to insert or whether I'm\n\n304\n00:17:09.180 --> 00:17:13.220\ntrying to update something that already\nexisted, we don't want that to happen.\n\n305\n00:17:13.220 --> 00:17:16.270\nSo being able to do this will\nallow me to not have to wonder,\n\n306\n00:17:16.270 --> 00:17:19.080\ndid I do this on purpose or\ndid I not do it on purpose.\n\n307\n00:17:19.080 --> 00:17:22.050\nIf I'm not gonna allow for duplicates,\nthis is one of the ways to do that.\n\n308\n00:17:22.050 --> 00:17:25.410\n>> So Ronnie,\nif we didn't have the trigger in there,\n\n309\n00:17:25.410 --> 00:17:28.150\nwould we still get an error cuz we\nwere trying to add a duplicate or\n\n310\n00:17:28.150 --> 00:17:31.170\nwould it just be a different error or\nwhat would've happened?\n\n311\n00:17:31.170 --> 00:17:33.780\nYou probably would have actually\ngotten a duplicate, believe it or not.\n\n312\n00:17:33.780 --> 00:17:35.700\nIt would have actually\ngiven you another name.\n\n313\n00:17:35.700 --> 00:17:37.560\nIt might have actually marked\nit a little bit differently, but\n\n314\n00:17:37.560 --> 00:17:41.210\nit would have actually given you\nthe ability to duplicate that.\n\n315\n00:17:41.210 --> 00:17:44.122\nThe GUID ID, right,\nthat row GUID ID would have changed, but\n\n316\n00:17:44.122 --> 00:17:47.150\nthe name would have actually\ngone ahead and said, category 2.\n\n317\n00:17:47.150 --> 00:17:52.157\n>> So this is almost like setting up our\nown erroring and alerting system for\n\n318\n00:17:52.157 --> 00:17:57.720\nconditions that SQL doesn't, by default,\ncatch and give us a response to.\n\n319\n00:17:57.720 --> 00:17:58.609\n>> Yeah, it can, right.\n\n320\n00:17:58.609 --> 00:18:02.820\nSo it can either enforce it just like it\ndid here, or it can just be an auditing.\n\n321\n00:18:02.820 --> 00:18:06.010\nThe very fact that you go,\nan error occurred, you need to go and\n\n322\n00:18:06.010 --> 00:18:09.350\ncheck the database and see if it\nactually did allow you to enter it in.\n\n323\n00:18:09.350 --> 00:18:13.220\nBut on this one it clearly says, look,\nwe're not gonna run this statement, so\n\n324\n00:18:13.220 --> 00:18:15.370\nthat's the way it actually\nended up happening.\n\n325\n00:18:15.370 --> 00:18:18.390\nSo something like this\ncan work very easily for\n\n326\n00:18:18.390 --> 00:18:22.660\nus, but we do have to take the time\nto actually take a look at doing it.\n\n327\n00:18:22.660 --> 00:18:24.410\nNow sometimes if you're like me,\nright, and\n\n328\n00:18:24.410 --> 00:18:28.410\nyou're typing a lot of these\nstatements in, you can very easily fat\n\n329\n00:18:28.410 --> 00:18:32.590\nfinger the statements and you will\nget syntax errors because of that.\n\n330\n00:18:32.590 --> 00:18:35.850\nBut sometimes, yes, you do it and\nthen you realize it worked, but\n\n331\n00:18:35.850 --> 00:18:36.740\nit wasn't for the name.\n\n332\n00:18:36.740 --> 00:18:38.900\nSo you mistyped the name or something.\n\n333\n00:18:38.900 --> 00:18:41.810\nWell, if you want to\nalter a DML statement,\n\n334\n00:18:41.810 --> 00:18:44.250\nit's fairly easy to do so as well.\n\n335\n00:18:44.250 --> 00:18:48.040\nAnd I'm not gonna run through this\nwhole thing for us, but all we do is,\n\n336\n00:18:48.040 --> 00:18:52.590\nif we wanna create a change here,\nis we simply change\n\n337\n00:18:52.590 --> 00:18:58.080\nthe key word here to alter,\nif I can spell it, instead of create.\n\n338\n00:18:58.080 --> 00:19:02.660\nAnd once you do that, now you can\ngo back in and anything in here,\n\n339\n00:19:02.660 --> 00:19:07.380\nokay, you can just delete\nout update if you wanted to.\n\n340\n00:19:07.380 --> 00:19:10.450\nYou can change anything in the begin\nstatements underneath that.\n\n341\n00:19:10.450 --> 00:19:13.250\nLet me see if I can zoom out and\nthat way we can look at that.\n\n342\n00:19:13.250 --> 00:19:16.910\nYou can then go ahead and alter that and\nactually have it run at the same time and\n\n343\n00:19:16.910 --> 00:19:19.260\nthat will change the trigger as well.\n\n344\n00:19:19.260 --> 00:19:22.308\nNow, one thing I should have pointed out,\nwhich I didn't here,\n\n345\n00:19:22.308 --> 00:19:25.032\nis where in the world are these\ntriggers actually stored?\n\n346\n00:19:25.032 --> 00:19:29.425\nWell, over here in the object\nstored on the left-hand side,\n\n347\n00:19:29.425 --> 00:19:34.300\nwhen we take a look here, well,\nunderneath, let me zoom in.\n\n348\n00:19:34.300 --> 00:19:40.600\nIn Production.ProductCategory,\nif I click on that plus sign, notice that\n\n349\n00:19:40.600 --> 00:19:45.470\nunderneath it I have all of these nodes\nand I can select Triggers and there it is.\n\n350\n00:19:45.470 --> 00:19:49.030\nHere is the actual trigger that\nI created right here, okay.\n\n351\n00:19:49.030 --> 00:19:51.680\nAnd that actually gives\nme that ability to do so.\n\n352\n00:19:51.680 --> 00:19:53.370\nNow you actually notice something, and\n\n353\n00:19:53.370 --> 00:19:55.180\nthis is what I also wanted to point out,\ntoo.\n\n354\n00:19:56.400 --> 00:19:59.140\nNotice if I right-click on\nthat particular trigger,\n\n355\n00:19:59.140 --> 00:20:02.050\nit gives me the ability\nto create a new trigger.\n\n356\n00:20:02.050 --> 00:20:05.550\nNow can you do that, yes, okay.\n\n357\n00:20:05.550 --> 00:20:10.090\nIt is not the way that you'll actually\nend up seeing it for the exam, but\n\n358\n00:20:10.090 --> 00:20:12.140\nthere's a lot of people that\ntake advantage of that.\n\n359\n00:20:12.140 --> 00:20:16.440\nBecause it essentially sets up a template\nfor you, and all you do is you add in your\n\n360\n00:20:16.440 --> 00:20:20.820\ntable name, and you add in your\nselect statements, and you do that.\n\n361\n00:20:20.820 --> 00:20:25.210\nBut on the exam, you can't expect that to\nhappen, everything about this is a manual\n\n362\n00:20:25.210 --> 00:20:29.530\ntype of understanding, the process and\nwhat you walked through to do this.\n\n363\n00:20:29.530 --> 00:20:30.680\nSo that's why I've avoided it.\n\n364\n00:20:30.680 --> 00:20:34.050\nBut take advantage of that, take a look\nat what it actually sets you up for.\n\n365\n00:20:34.050 --> 00:20:37.410\nLet me see here, I'm just gonna do this\noff the cuff here just for a moment so\n\n366\n00:20:37.410 --> 00:20:39.660\nthat we can see what\nhappens at the beginning.\n\n367\n00:20:39.660 --> 00:20:41.910\nThen I'm gonna right-click and\nselect New Trigger.\n\n368\n00:20:41.910 --> 00:20:45.240\nAnd now notice right here\nit actually generated\n\n369\n00:20:45.240 --> 00:20:47.970\nthis template that you can\nactually create a trigger.\n\n370\n00:20:47.970 --> 00:20:51.925\nAnd notice you just simply fill\nin the stuff that's not in green.\n\n371\n00:20:51.925 --> 00:20:53.620\n>> [LAUGH]\n>> And there you go.\n\n372\n00:20:53.620 --> 00:20:54.890\nYou are ready to go.\n\n373\n00:20:54.890 --> 00:20:58.720\nNow, it's not as easy as it seems, but\nit's down here underneath the no count.\n\n374\n00:20:58.720 --> 00:21:02.227\nThat's where I had it in my select query,\nand everything else that I needed to and\n\n375\n00:21:02.227 --> 00:21:03.060\nit's ready to go.\n\n376\n00:21:03.060 --> 00:21:04.610\nPeople do this all the time.\n\n377\n00:21:04.610 --> 00:21:08.280\nPerfectly fine, but you won't find\nthat on the exam as a way for\n\n378\n00:21:08.280 --> 00:21:09.630\nyou to create a trigger.\n\n379\n00:21:09.630 --> 00:21:10.450\nBut can it be done?\n\n380\n00:21:10.450 --> 00:21:12.841\nYes, you absolutely can do it that way,\nbut\n\n381\n00:21:12.841 --> 00:21:16.979\njust kinda realize that's not our\nstandard procedure for getting ready for\n\n382\n00:21:16.979 --> 00:21:20.874\nthe exam or for you understanding\nthe logic behind this as well, okay.\n\n383\n00:21:20.874 --> 00:21:24.674\nSo there is that after trigger\nthat really is kind of a key for\n\n384\n00:21:24.674 --> 00:21:27.117\nsome of the things that we're doing.\n\n385\n00:21:27.117 --> 00:21:29.210\nNow along with this after trigger,\n\n386\n00:21:29.210 --> 00:21:33.090\nthere's something else that's called\nan instead of trigger as well.\n\n387\n00:21:33.090 --> 00:21:35.070\nNow it's exactly like it sounds.\n\n388\n00:21:35.070 --> 00:21:38.340\nAfter means run the whole thing, and\nthen let's check it afterwards, right?\n\n389\n00:21:38.340 --> 00:21:39.110\nSo usually for\n\n390\n00:21:39.110 --> 00:21:42.760\nus it's gonna be some type of auditing\nstatement that then leads to something.\n\n391\n00:21:42.760 --> 00:21:45.510\nBut what we wanna do is if it\nactually does go wrong, okay,\n\n392\n00:21:45.510 --> 00:21:47.910\nwe want it to actually run\nsomething else instead.\n\n393\n00:21:47.910 --> 00:21:51.430\nSo this is the one that we are actually\ngonna focus in on a little bit more, too.\n\n394\n00:21:52.440 --> 00:21:55.815\nSo now at the beginning,\nI'm gonna instead go ahead and\n\n395\n00:21:55.815 --> 00:21:57.310\nactually run this first statement.\n\n396\n00:21:57.310 --> 00:21:59.320\nThat's gonna get rid of my trigger.\n\n397\n00:21:59.320 --> 00:22:01.710\nAnd remember it's actually showing\nup over here on the left-hand side.\n\n398\n00:22:01.710 --> 00:22:03.450\nI'm gonna execute that one.\n\n399\n00:22:03.450 --> 00:22:07.630\nAnd now at the Refresh, and\nwhat I should see is that\n\n400\n00:22:07.630 --> 00:22:11.680\nmy trigger now is actually gone so\nI know I can start all over.\n\n401\n00:22:11.680 --> 00:22:14.050\nCould I have altered it\nto get to this point?\n\n402\n00:22:14.050 --> 00:22:17.940\nYes, but at the same time a little bit\nmore than what we're actually wanting\n\n403\n00:22:17.940 --> 00:22:18.446\nto do right now.\n\n404\n00:22:18.446 --> 00:22:21.159\nWe just wanna make sure that you\nunderstand there's really two\n\n405\n00:22:21.159 --> 00:22:21.985\ndifferent types.\n\n406\n00:22:21.985 --> 00:22:26.480\nThere's after triggers, and\nof course instead of triggers here.\n\n407\n00:22:26.480 --> 00:22:32.570\nBut you'll notice that really\nit's not super different, okay?\n\n408\n00:22:32.570 --> 00:22:36.390\nBut instead of where we had the insert and\nthe after, well,\n\n409\n00:22:36.390 --> 00:22:40.200\nnow we actually have instead of insert.\n\n410\n00:22:40.200 --> 00:22:45.090\nSo we can create that very same exact\ntrigger, just like we started here, and\n\n411\n00:22:45.090 --> 00:22:51.370\nnow I can say, instead of insert,\nthen you're actually gonna go ahead and\n\n412\n00:22:51.370 --> 00:22:54.960\ndo an if, then, else statement,\nis what it comes down to, right?\n\n413\n00:22:54.960 --> 00:22:56.000\nSo we've already done this.\n\n414\n00:22:56.000 --> 00:22:57.970\nSo if this actually exists,\n\n415\n00:22:57.970 --> 00:23:01.700\nthen what we should do is actually\nthrow up this error over here.\n\n416\n00:23:01.700 --> 00:23:04.440\nElse, notice what it says here.\n\n417\n00:23:04.440 --> 00:23:08.220\nGo ahead and\nactually do this insert statement and\n\n418\n00:23:08.220 --> 00:23:11.030\nthis is what I wanted to focus in on,\nokay.\n\n419\n00:23:11.030 --> 00:23:12.370\nSo here it is.\n\n420\n00:23:12.370 --> 00:23:16.380\nI'm telling it to actually go into,\nwell, insert it.\n\n421\n00:23:16.380 --> 00:23:18.380\nNow when you take a look at that,\n\n422\n00:23:18.380 --> 00:23:23.680\nthat's a little bit more unusual\nbecause I can go over here to my query,\n\n423\n00:23:23.680 --> 00:23:28.580\nor my object explorer inside of my\ndatabase and I can see something\n\n424\n00:23:28.580 --> 00:23:33.660\nthat there is no inserted object\nright here as far as the table goes.\n\n425\n00:23:33.660 --> 00:23:36.160\nBut that's what it's\nactually telling me to do.\n\n426\n00:23:36.160 --> 00:23:39.420\nIt's telling me that I need to pull\nup from this idea of inserted.\n\n427\n00:23:39.420 --> 00:23:41.046\nSo what in the world is going on,\n\n428\n00:23:41.046 --> 00:23:44.618\nthat I'm gonna insert something\ninto an object that doesn't exist?\n\n429\n00:23:44.618 --> 00:23:47.533\nWell, when we create triggers, actually,\n\n430\n00:23:47.533 --> 00:23:51.062\nwhen we actually do anything\nlike delete or update, or\n\n431\n00:23:51.062 --> 00:23:55.918\nwe actually do something like the idea\nof insert And update as well, okay?\n\n432\n00:23:55.918 --> 00:23:59.615\nWhenever you do that, it actually ends\nup creating a couple of different tables\n\n433\n00:23:59.615 --> 00:24:01.680\nin the background in SQL Server.\n\n434\n00:24:01.680 --> 00:24:06.390\nOne is called the deleted table and\nthe other is called the inserted table.\n\n435\n00:24:06.390 --> 00:24:10.540\nThe inserted table is essentially\nholding that information for us in RAM.\n\n436\n00:24:10.540 --> 00:24:13.500\nIt says hey, when you do an insert,\nwe're not gonna insert it\n\n437\n00:24:13.500 --> 00:24:17.420\nimmediately right away,\nwe're gonna put it into this table.\n\n438\n00:24:17.420 --> 00:24:19.770\nAnd then at that next transaction,\n\n439\n00:24:19.770 --> 00:24:23.260\nwe're gonna put it in to\nthe actual real database itself.\n\n440\n00:24:23.260 --> 00:24:27.120\nSo there's a couple of different tables\nin here that's really gonna throw us off\n\n441\n00:24:27.120 --> 00:24:29.590\nif we try and actually do it\nthe way that we're thinking.\n\n442\n00:24:29.590 --> 00:24:32.880\nBut there is what's called the inserted\ntable and there is what is called\n\n443\n00:24:32.880 --> 00:24:36.620\na deleted table that we do have to worry\nabout when we start doing this stuff.\n\n444\n00:24:36.620 --> 00:24:40.060\nSo it actually does depend on\nthe logic that you're doing.\n\n445\n00:24:40.060 --> 00:24:43.885\nSo remember that if you're using delete,\nmore than likely, here it's saying.\n\n446\n00:24:43.885 --> 00:24:46.625\nWhen you go ahead and run this and\nyou insert a product category name.\n\n447\n00:24:46.625 --> 00:24:50.195\nThe first thing that's gonna happen\nis you're gonna insert it in from\n\n448\n00:24:50.195 --> 00:24:51.565\nwhatever that table was.\n\n449\n00:24:51.565 --> 00:24:54.205\nThat it had already found in that\nconditional statement that it made.\n\n450\n00:24:55.355 --> 00:24:58.645\nIf you actually run a delete\nstatement instead of delete,\n\n451\n00:24:58.645 --> 00:25:00.625\nit actually went ahead and\nkept it in the delete table.\n\n452\n00:25:00.625 --> 00:25:01.185\nJust for\n\n453\n00:25:01.185 --> 00:25:05.500\nthat immediate time and then it says look,\nyou're pulling it from what you deleted.\n\n454\n00:25:05.500 --> 00:25:09.060\nAnd then I'll actually run the delete\non the actual table as well.\n\n455\n00:25:09.060 --> 00:25:12.770\nSo it's a little bit more\ncomplicated than it seems, but\n\n456\n00:25:12.770 --> 00:25:16.090\nat the same time you do have\nsome extra tables in there.\n\n457\n00:25:16.090 --> 00:25:18.650\nUnnamed, that you're actually not\ngonna be super familiar with,\n\n458\n00:25:18.650 --> 00:25:21.040\nthat's actually inside of the database.\n\n459\n00:25:21.040 --> 00:25:24.520\nSo if everything is fine,\nthen we should actually see that if it\n\n460\n00:25:24.520 --> 00:25:28.300\ntriggers that event, I should get\na duplicate categories not allowed.\n\n461\n00:25:28.300 --> 00:25:32.180\nElse, go ahead and allow this to happen,\nrun inside the insert table, okay?\n\n462\n00:25:32.180 --> 00:25:35.580\nSo that will actually end up running for\nus very well too.\n\n463\n00:25:36.860 --> 00:25:41.310\nSo then I can run this,\noops, I think I can,\n\n464\n00:25:41.310 --> 00:25:44.910\nlet me see if I can do this\nwithout going nuts here.\n\n465\n00:25:44.910 --> 00:25:45.410\nAll right.\n\n466\n00:25:48.240 --> 00:25:52.150\nSo I've executed that and at that point,\nif I were to try and do it,\n\n467\n00:25:52.150 --> 00:25:52.990\nit'd be the same thing.\n\n468\n00:25:52.990 --> 00:25:55.000\nBut notice it was really that different,\nright?\n\n469\n00:25:55.000 --> 00:25:58.970\nEither after or I guess you say instead\nof whatever you want to do here, okay?\n\n470\n00:25:58.970 --> 00:26:01.670\nAnd the only thing that we also added\nin here was we pointed out more of\n\n471\n00:26:01.670 --> 00:26:03.960\nthe inserted or deleted table.\n\n472\n00:26:03.960 --> 00:26:06.497\nUsually you'll see inserted\nis used more often especially\n\n473\n00:26:06.497 --> 00:26:09.370\nwhen we're doing updates of\n[INAUDIBLE] as well, okay?\n\n474\n00:26:09.370 --> 00:26:10.070\nNow don't get me wrong,\n\n475\n00:26:10.070 --> 00:26:12.910\ncan you delete information out\nof your database by doing this?\n\n476\n00:26:12.910 --> 00:26:15.340\nYes, I do not recommend\n\n477\n00:26:15.340 --> 00:26:19.310\nif we're beginners to delete anything\nout of our production database.\n\n478\n00:26:19.310 --> 00:26:20.320\nI'm not saying you can't do it.\n\n479\n00:26:20.320 --> 00:26:24.800\nBut make sure you have\nabsolute authorization\n\n480\n00:26:24.800 --> 00:26:28.930\nto say running a delete statement against\nthe database is a good thing to do.\n\n481\n00:26:28.930 --> 00:26:32.730\nNever, inserting you can delete\nout rows you've inserted.\n\n482\n00:26:32.730 --> 00:26:35.430\nBut if you're not sure, if you're deleting\nsomething out, I would not do it.\n\n483\n00:26:35.430 --> 00:26:37.510\n>> Yeah,\nprobably not a good idea in case you are.\n\n484\n00:26:37.510 --> 00:26:42.054\n100% sure because data is a little,\nwell, people take it really seriously.\n\n485\n00:26:42.054 --> 00:26:45.160\nNow Ronnie, maybe I missed this.\n\n486\n00:26:45.160 --> 00:26:46.940\nDo we use the deleted table and\n\n487\n00:26:46.940 --> 00:26:50.910\nthe inserted table in conjunction with\neach other or do we use one or the other?\n\n488\n00:26:50.910 --> 00:26:51.880\n>> We normally use one or\n\n489\n00:26:51.880 --> 00:26:55.330\nthe other, okay, in what we're\ndoing in the background, right?\n\n490\n00:26:55.330 --> 00:26:58.250\nSo if we're actually going\nto do the instead of insert,\n\n491\n00:26:58.250 --> 00:26:59.840\nwe end up actually using\nthe inserted table.\n\n492\n00:26:59.840 --> 00:27:03.598\nIf we do instead of delete,\nwe're gonna use the deleted table instead.\n\n493\n00:27:03.598 --> 00:27:08.560\nAnd it's harder to use those words and\nthe statement at the same time.\n\n494\n00:27:08.560 --> 00:27:10.540\nBut yeah, normally we're\nactually using one or the other.\n\n495\n00:27:10.540 --> 00:27:13.400\nBut those two are actually in\nthe background of what's actually in\n\n496\n00:27:13.400 --> 00:27:16.290\nthe SQL Server to help us out.\n\n497\n00:27:16.290 --> 00:27:20.200\nKind of understand that there's a lot\nmore going on than what you think.\n\n498\n00:27:20.200 --> 00:27:22.420\nSo, as easy as a statement seems and\n\n499\n00:27:22.420 --> 00:27:26.760\nhopefully the logic seems the same if\nyou've ever been working inside of SQL.\n\n500\n00:27:26.760 --> 00:27:29.635\nIt's not very difficult as far as\nanything else that we've added in,\n\n501\n00:27:29.635 --> 00:27:32.325\nwe've just added in\na little more code to it.\n\n502\n00:27:32.325 --> 00:27:36.215\nBut the SQL query was still there,\nthat we've actually done before and\n\n503\n00:27:36.215 --> 00:27:38.665\nall we've done is we've said\nwe're gonna create a trigger.\n\n504\n00:27:38.665 --> 00:27:41.005\nAnd then we're either gonna do an insert,\na delete or\n\n505\n00:27:41.005 --> 00:27:45.160\nan update and at that point,\nwe're just about ready to go.\n\n506\n00:27:45.160 --> 00:27:49.040\nSo both these are very powerful ways that\nreally help us to do things by auditing.\n\n507\n00:27:49.040 --> 00:27:52.570\nAs well as enforcing some of\nthe policies that we may set.\n\n508\n00:27:52.570 --> 00:27:57.550\nAnd these are actually good enforcements\nbecause it doesn't require me to watch it.\n\n509\n00:27:57.550 --> 00:28:00.040\nIt just says when you run the coding,\nwatch for it and\n\n510\n00:28:00.040 --> 00:28:02.220\nallow SQL to actually watch it for us.\n\n511\n00:28:02.220 --> 00:28:04.720\nSo there's a lot of information\nthat's right there for\n\n512\n00:28:04.720 --> 00:28:07.760\nus to actually be ready to\nbe able to use as well.\n\n513\n00:28:07.760 --> 00:28:10.150\nNow, the other thing that we also have,\na couple of other things.\n\n514\n00:28:10.150 --> 00:28:15.360\nEverything that I've done is really about\nupdating one column, one row, one thing.\n\n515\n00:28:15.360 --> 00:28:18.240\nIf I wanna do this with multiple columns,\ncan I?\n\n516\n00:28:18.240 --> 00:28:21.450\nYes, you can actually do it with\nmultiple columns in a couple of ways.\n\n517\n00:28:21.450 --> 00:28:23.130\nLet me show you this too, okay?\n\n518\n00:28:23.130 --> 00:28:27.990\nSo at this particular point here,\nI can actually create a simpler trigger.\n\n519\n00:28:27.990 --> 00:28:29.020\nAnd so everything I've showed you,\n\n520\n00:28:29.020 --> 00:28:32.580\nI don't wanna say it's complex,\nprobably more typical for the norm.\n\n521\n00:28:32.580 --> 00:28:36.720\nBut I did wanna show you that you\ncan also do this as well, okay?\n\n522\n00:28:36.720 --> 00:28:40.720\nSo I can create a trigger and this\none's based off of the Person.Address.\n\n523\n00:28:40.720 --> 00:28:43.250\nThat says after the update, okay?\n\n524\n00:28:43.250 --> 00:28:49.230\nThat if you actually update either\na StateProvinceID or the PostalCode, okay?\n\n525\n00:28:49.230 --> 00:28:52.580\nSo if this happens and there's some\ntype of error that ends up happening,\n\n526\n00:28:52.580 --> 00:28:55.740\nnotice I can actually tell it\ninstead to raise an error.\n\n527\n00:28:55.740 --> 00:28:58.115\nAnd that error number would\nbe generated as this,\n\n528\n00:28:58.115 --> 00:29:01.930\n50,009 and I can tell it to\ndo a code 16 and a code 10.\n\n529\n00:29:01.930 --> 00:29:04.220\nI can make up these numbers as I want to,\nokay?\n\n530\n00:29:04.220 --> 00:29:07.280\nSo if I wanted to, I could do that.\n\n531\n00:29:07.280 --> 00:29:09.790\nLet me go ahead and\nrun something like that, okay?\n\n532\n00:29:11.220 --> 00:29:12.460\nThat's right.\n\n533\n00:29:12.460 --> 00:29:15.880\nSee, I had already created this one and\nthat's why I should go ahead and\n\n534\n00:29:15.880 --> 00:29:17.960\nalso run my drop statement as well.\n\n535\n00:29:17.960 --> 00:29:19.210\nLet's do this properly here.\n\n536\n00:29:20.240 --> 00:29:22.420\nI was getting a little\nbit ahead of myself.\n\n537\n00:29:22.420 --> 00:29:24.766\nLet me verify that that\nis actually done and\n\n538\n00:29:24.766 --> 00:29:27.120\nnow I'm gonna create this trigger again.\n\n539\n00:29:29.348 --> 00:29:33.065\nAll right, so if I do that and\nnow we run an update.\n\n540\n00:29:33.065 --> 00:29:35.821\nI'm gonna update that Person.Address and\n\n541\n00:29:35.821 --> 00:29:40.370\nI'm gonna set the PostalCode to this,\ninstead of what it actually was.\n\n542\n00:29:41.690 --> 00:29:42.900\nSo, if I go ahead and\n\n543\n00:29:42.900 --> 00:29:48.400\nexecute, what I should end up seeing\nonce again allowing the code to do so.\n\n544\n00:29:48.400 --> 00:29:52.190\nAnd let me see if I can zoom in on those\nnumbers so that we can see it here.\n\n545\n00:29:52.190 --> 00:29:55.617\nSo remember I typed in 50,009,\nI said it was error 50,009,\n\n546\n00:29:55.617 --> 00:29:57.420\nI can define that myself.\n\n547\n00:29:57.420 --> 00:29:59.460\nI set it for severity level 16.\n\n548\n00:29:59.460 --> 00:30:01.320\nAgain, I can make up those numbers and\n\n549\n00:30:01.320 --> 00:30:04.430\nthen whatever state flag\nwas actually raised here.\n\n550\n00:30:04.430 --> 00:30:08.170\nBut notice because I didn't define them,\nit then actually give me a message.\n\n551\n00:30:08.170 --> 00:30:13.040\nSo, you can actually set all that stuff up\nand customize it the way that you want to,\n\n552\n00:30:13.040 --> 00:30:16.180\nto help you to develop\nthe code a little bit more.\n\n553\n00:30:16.180 --> 00:30:18.182\nNow can you do this even with functions?\n\n554\n00:30:18.182 --> 00:30:20.780\nYes, there's some other ones\nthat are there in terms of\n\n555\n00:30:20.780 --> 00:30:22.200\nnested functions that you can do.\n\n556\n00:30:22.200 --> 00:30:25.040\nAnd you can even do that\nif you wanted to as well.\n\n557\n00:30:25.040 --> 00:30:27.830\nYou can continue to nest triggers, okay?\n\n558\n00:30:27.830 --> 00:30:32.304\nAnd I think you can do up to 32 levels\nof nesting, are we gonna do any of that?\n\n559\n00:30:32.304 --> 00:30:33.012\nNo, okay?\n\n560\n00:30:33.012 --> 00:30:35.913\n>> [LAUGH]\n>> Cuz you really have to follow the logic\n\n561\n00:30:35.913 --> 00:30:39.010\npretty much in detail and\nthere are people that need it.\n\n562\n00:30:39.010 --> 00:30:43.238\nBut in our example, being sure that you\ncan identify the difference between\n\n563\n00:30:43.238 --> 00:30:46.480\nthe after and\nthe instead is kind of the key here.\n\n564\n00:30:46.480 --> 00:30:50.190\nMaking sure that you understand when\nyou would use them is also the key.\n\n565\n00:30:50.190 --> 00:30:54.580\nAnd also of course, realizing that if you\nalready have that trigger that's in place,\n\n566\n00:30:54.580 --> 00:30:55.190\nit doesn't matter.\n\n567\n00:30:55.190 --> 00:30:57.990\nIf you try and actually run that\ntrigger again, it's not going to work.\n\n568\n00:30:57.990 --> 00:31:01.483\nSo in other words, if it's already\nthere and you try and go hey,\n\n569\n00:31:01.483 --> 00:31:02.854\nlet me regenerate this.\n\n570\n00:31:02.854 --> 00:31:05.390\nIt just says I'm not gonna do\nit cuz I already see it there.\n\n571\n00:31:05.390 --> 00:31:07.260\nSo always drop that trigger or\n\n572\n00:31:07.260 --> 00:31:10.760\nalter it to a point where you can now\ncreate a new one if you choose to.\n\n573\n00:31:10.760 --> 00:31:13.660\nBut those are kind of the key\nelements behind understanding at\n\n574\n00:31:13.660 --> 00:31:14.790\nleast the triggers.\n\n575\n00:31:14.790 --> 00:31:16.140\nThe majority that's like I said,\n\n576\n00:31:16.140 --> 00:31:19.910\nwhen you take a look here, it's really\nabout understanding the stored procedures.\n\n577\n00:31:19.910 --> 00:31:22.151\nSo if you understand stored procedures,\n\n578\n00:31:22.151 --> 00:31:25.965\nunderstanding the DML triggers\nis gonna be a lot easier.\n\n579\n00:31:25.965 --> 00:31:29.045\nAnd if you're going well, I don't\nunderstand stored procedures, go back and\n\n580\n00:31:29.045 --> 00:31:31.165\ncheck out the stored procedures episode.\n\n581\n00:31:31.165 --> 00:31:34.415\nAnd that will actually help you out a\nlittle bit more in getting to this point.\n\n582\n00:31:34.415 --> 00:31:37.573\nBecause this is a subcategory\nof those stored procedures.\n\n583\n00:31:37.573 --> 00:31:40.475\n>> All right, Ronnie, well,\nthank you so much for stopping by and\n\n584\n00:31:40.475 --> 00:31:41.995\nexplaining triggers for us.\n\n585\n00:31:41.995 --> 00:31:45.075\nIncreasing our SQL knowledge and\nbetter preparing us for\n\n586\n00:31:45.075 --> 00:31:47.130\nthe exam if that's what we're going for.\n\n587\n00:31:47.130 --> 00:31:50.870\nThat being said, looks like we've run\nout of time for this episode [LAUGH] and\n\n588\n00:31:50.870 --> 00:31:53.230\njust perfectly too,\nI mean you hit it right on the nose.\n\n589\n00:31:53.230 --> 00:31:54.705\nSo kudos to Ryan today.\n\n590\n00:31:54.705 --> 00:31:56.070\nAgain, thanks for dropping by.\n\n591\n00:31:56.070 --> 00:31:59.740\nWe thank you for watching, signing off for\nITProTV, I've been your host,\n\n592\n00:31:59.740 --> 00:32:00.300\nDaniel Lowrie.\n\n593\n00:32:00.300 --> 00:32:01.080\n>> And I'm Ronnie Wong.\n\n594\n00:32:01.080 --> 00:32:02.206\n>> We'll see you next time.\n\n595\n00:32:02.206 --> 00:32:10.370\n[SOUND]\n\n",
          "vimeoId": "166550115"
        }
      ],
      "title": "Create database objects"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Ronnie start their exposition of the SELECT SQL query. They start by showing you how to perform a simple SELECT query to find set data from a database. Then they pair down the results by using the WHERE and GROUP BY filter statements.",
          "length": "1842",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-1-1-basic_select_queries-041916-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-1-1-basic_select_queries-041916-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-1-1-basic_select_queries-041916-1-sm.jpg",
          "title": "Basic SELECT Queries",
          "transcript": "WEBVTT\n\n1\n00:00:00.003 --> 00:00:10.003\n[MUSIC]\n\n2\n00:00:12.309 --> 00:00:16.666\nAll right, greetings everyone and welcome\nto another exciting episode of ITproTV.\n\n3\n00:00:16.666 --> 00:00:20.838\nI'm your host Daniel Lowry and in today's\nepisode we are continuing on with our\n\n4\n00:00:20.838 --> 00:00:23.280\nquery Microsoft SQL Server 2014 series.\n\n5\n00:00:23.280 --> 00:00:27.139\nJoining us back in the studio again today\nto help us out with that endeavour,\n\n6\n00:00:27.139 --> 00:00:30.360\nteach us the ways of the SQL is\nour good friend Mr. Ronnie Wong.\n\n7\n00:00:30.360 --> 00:00:31.320\nRonnie, welcome back to the show.\n\n8\n00:00:31.320 --> 00:00:32.170\nHow's it going there?\n\n9\n00:00:32.170 --> 00:00:33.490\n>> It's going well today.\n\n10\n00:00:33.490 --> 00:00:36.540\nThank you again for\nthat introduction into our show here and\n\n11\n00:00:36.540 --> 00:00:38.480\ntaking a look at querying the SQL server.\n\n12\n00:00:38.480 --> 00:00:41.600\nWhat we're actually gonna take a look\nat today of course then is to actually\n\n13\n00:00:41.600 --> 00:00:47.000\nadvance ourselves in moving into actually\nsome querying in to our server as well.\n\n14\n00:00:47.000 --> 00:00:51.610\nAnd so we wanna make sure of course\nthat we understand the basics of it and\n\n15\n00:00:51.610 --> 00:00:54.320\nactually make sure you understand that\nwhat we're beginning with is we're going\n\n16\n00:00:54.320 --> 00:00:59.540\nto be using SELECT statements to help us\nto retrieve information from one table.\n\n17\n00:00:59.540 --> 00:01:02.990\nNow, even though our database\nhas many different tables in it.\n\n18\n00:01:02.990 --> 00:01:06.400\nWell were gonna start off, of course,\nwith querying a single table and\n\n19\n00:01:06.400 --> 00:01:09.540\nthen we're gonna show you how you\ncan use SELECT statements also\n\n20\n00:01:09.540 --> 00:01:13.050\nto help you to query from\nmultiple tables at the same time\n\n21\n00:01:13.050 --> 00:01:15.870\nas information now needs to be\ngathered from more than one.\n\n22\n00:01:15.870 --> 00:01:18.000\nBut let's start off with\nthe very basics here which is,\n\n23\n00:01:18.000 --> 00:01:20.130\nof course,\njust doing SELECT statements and\n\n24\n00:01:20.130 --> 00:01:23.530\ngetting the information out of one\ntable the way that we need to.\n\n25\n00:01:23.530 --> 00:01:27.520\nNow, as we actually begin to do that\nremember that what we're taking a look\n\n26\n00:01:27.520 --> 00:01:32.590\nat here of course is using that key\nterm when we key it in called select.\n\n27\n00:01:32.590 --> 00:01:36.090\nAnd select tells us that what we need\nto do is we need to know the names of\n\n28\n00:01:36.090 --> 00:01:40.200\nthe columns that we're actually\ngonna pull the information from, and\n\n29\n00:01:40.200 --> 00:01:43.450\nthen we also need to know\nthe source of it as well.\n\n30\n00:01:43.450 --> 00:01:46.690\nSo that's where we're actually\ngonna start off as we begin here.\n\n31\n00:01:46.690 --> 00:01:48.680\nLet's go ahead and\ntake a look at a very simple and\n\n32\n00:01:48.680 --> 00:01:52.570\na very basic SELECT statement that\nI'm gonna type in when we start.\n\n33\n00:01:52.570 --> 00:01:57.274\nSo one of the key aspects of this is\nsomething that most of us have to actually\n\n34\n00:01:57.274 --> 00:01:59.480\nhave an understanding of.\n\n35\n00:01:59.480 --> 00:02:04.480\nYou're not gonna be able to actually run\nvery many SELECT statements super quickly\n\n36\n00:02:04.480 --> 00:02:07.660\nor even very well if you\ndon't have an understanding\n\n37\n00:02:07.660 --> 00:02:11.080\nof at least some of the elements\ninside of your database.\n\n38\n00:02:11.080 --> 00:02:16.120\nSo inside of my database right here is the\nAdventureWorks2014 which is right here,\n\n39\n00:02:16.120 --> 00:02:17.990\nlet me go ahead and zoom right in, and\n\n40\n00:02:17.990 --> 00:02:22.940\nof course what I'm talking about is\nat least the names of the tables.\n\n41\n00:02:22.940 --> 00:02:24.930\nNow you're actually\ngonna be querying from.\n\n42\n00:02:24.930 --> 00:02:29.180\nSo the good thing is, since we have the\nobject explorer for us, we can actually\n\n43\n00:02:29.180 --> 00:02:34.400\nscroll down, and you can see that there's\na lot of tables inside of my database,\n\n44\n00:02:34.400 --> 00:02:39.040\nand so each one of those rows\nthere represents a table for\n\n45\n00:02:39.040 --> 00:02:40.495\nus that we can actually query from.\n\n46\n00:02:40.495 --> 00:02:44.600\nAnd so what we want to do is actually\nunderstand here that when we begin to\n\n47\n00:02:44.600 --> 00:02:48.640\nquery the best practices, pretty much,\nkey is that we need to go ahead and\n\n48\n00:02:48.640 --> 00:02:53.340\nbegin by listing a table\nname itself as well.\n\n49\n00:02:53.340 --> 00:02:57.440\nNow, you actually see that the table names\nare actually reported in a hierarchical\n\n50\n00:02:57.440 --> 00:03:00.290\ntype of way here, as far as the name.\n\n51\n00:03:00.290 --> 00:03:03.714\nSo, notice that there's a category\ncalled human resources,\n\n52\n00:03:03.714 --> 00:03:08.303\nyou'll see multiple tables that actually\nhave human resources as the beginning and\n\n53\n00:03:08.303 --> 00:03:11.750\nthen there's a dot at the middle and\nthen the name of the table.\n\n54\n00:03:11.750 --> 00:03:12.318\nOkay?\n\n55\n00:03:12.318 --> 00:03:15.660\nIs how this is also going to be.\n\n56\n00:03:15.660 --> 00:03:20.570\nSo, normally when you begin here and\nyou start typing in, SELECT.\n\n57\n00:03:20.570 --> 00:03:22.980\nYou can actually type in the keyword,\nSELECT.\n\n58\n00:03:22.980 --> 00:03:24.940\nAnd then if I wanted to choose a table.\n\n59\n00:03:24.940 --> 00:03:28.540\nAnd we're gonna use\nthe HumanResources.Employee table here.\n\n60\n00:03:28.540 --> 00:03:31.130\nI simply can start typing in, Human.\n\n61\n00:03:31.130 --> 00:03:35.270\nAnd then, because of the way\nthat SQL server is kind of made\n\n62\n00:03:35.270 --> 00:03:40.010\nthis query window for us, it gives us the\nbest option that's actually available, and\n\n63\n00:03:40.010 --> 00:03:43.330\nI normally suggest you use that\nif you have the option to use it.\n\n64\n00:03:43.330 --> 00:03:46.620\nThe reason why is that it actually\ndoes help with things like typos.\n\n65\n00:03:46.620 --> 00:03:50.460\nA lot of times, inside of databases,\nyou may find out the table names\n\n66\n00:03:50.460 --> 00:03:55.420\nare not exactly easy to spell nor are they\nactually easy a lot of times actually\n\n67\n00:03:55.420 --> 00:04:00.000\nat least or being intuitive to actually\nknow exactly what you're looking for.\n\n68\n00:04:00.000 --> 00:04:04.300\nSo you may actually assume that it might\nbe like HR for human resources but\n\n69\n00:04:04.300 --> 00:04:05.840\nit's not that way.\n\n70\n00:04:05.840 --> 00:04:09.330\nSo then I'm gonna do a dot just like it\nsays and notice it automatically gives me\n\n71\n00:04:09.330 --> 00:04:12.490\nthe next hierarchy which\nis gonna be the table name.\n\n72\n00:04:12.490 --> 00:04:16.010\nAnd then I can select Employee,\nI hit my tab, and there we go.\n\n73\n00:04:16.010 --> 00:04:21.250\nNow, if I do one more dot after that\nit is here that you actually do see all\n\n74\n00:04:21.250 --> 00:04:27.040\nof the column names that we have available\nto us inside of the Employee table.\n\n75\n00:04:27.040 --> 00:04:31.430\nNow if I take a look at that and I come\nover here to the left-hand side under my\n\n76\n00:04:31.430 --> 00:04:35.970\nObject Explorer I can expand\nout the Employee tables and\n\n77\n00:04:35.970 --> 00:04:38.940\nnotice that the Columns are actually\nlisted right here, okay?\n\n78\n00:04:38.940 --> 00:04:43.820\nAnd so those columns and each of these is\nactually a match that we'll end up seeing.\n\n79\n00:04:43.820 --> 00:04:48.098\nWe have some unusual icons that\nwe can also point out as well.\n\n80\n00:04:48.098 --> 00:04:52.010\nSo sometimes you'll also get something\nlike this which is actually a key.\n\n81\n00:04:52.010 --> 00:04:54.960\nWhich shows us that this\nis a primary key as well.\n\n82\n00:04:54.960 --> 00:04:58.440\nAnd I expand this out a little bit more,\nwe can also get some details.\n\n83\n00:04:58.440 --> 00:05:03.140\nNotice inside of the parentheses here,\nit says PK, which stands for primary key.\n\n84\n00:05:03.140 --> 00:05:05.950\nFK here is for the foreign key.\n\n85\n00:05:05.950 --> 00:05:08.540\nAnd then you have the integer, INT, and\n\n86\n00:05:08.540 --> 00:05:12.610\nthat this value cannot\nbe a null value as well.\n\n87\n00:05:12.610 --> 00:05:16.510\nSo, inside of the Object Explorer dash,\nit shows us that the attributes that\n\n88\n00:05:16.510 --> 00:05:20.600\nare actually associated with this\ncolumn are actually part of that, too.\n\n89\n00:05:20.600 --> 00:05:24.123\nSo, every column usually has,\nof course, a data type, and\n\n90\n00:05:24.123 --> 00:05:28.216\nwhether or not that column can be null,\nand it is actually a key or not.\n\n91\n00:05:28.216 --> 00:05:32.110\nAnd then of course you have other columns\nhere that actually show you some other\n\n92\n00:05:32.110 --> 00:05:33.232\ninformation as well.\n\n93\n00:05:33.232 --> 00:05:34.230\nOkay?\nSo\n\n94\n00:05:34.230 --> 00:05:37.230\neach one of these can actually be\nselected in the way that we need.\n\n95\n00:05:37.230 --> 00:05:40.090\nAnd notice that some of these\nare not exactly intuitive,\n\n96\n00:05:40.090 --> 00:05:43.070\nsuch as NationalIDNumber.\n\n97\n00:05:43.070 --> 00:05:46.980\nYou might not even know what that's\nactually for or even salary flagged,\n\n98\n00:05:46.980 --> 00:05:48.620\nyou don't know what the information is.\n\n99\n00:05:48.620 --> 00:05:52.987\nAnd so that makes the idea here of\nactually doing just a basic query a little\n\n100\n00:05:52.987 --> 00:05:57.426\nbit more difficult if you're not exactly\nsure what information each one of\n\n101\n00:05:57.426 --> 00:05:59.273\nthose tables ends up holding.\n\n102\n00:05:59.273 --> 00:06:00.027\nOkay?\n\n103\n00:06:00.027 --> 00:06:03.971\nSo at the very beginning here, we're\ngonna simply just do a couple of them.\n\n104\n00:06:03.971 --> 00:06:04.559\nOkay?\n\n105\n00:06:04.559 --> 00:06:07.095\nSo I'm gonna type in the LoginID.\n\n106\n00:06:08.140 --> 00:06:10.900\nAnd we're going to select that\nsingle column for right now.\n\n107\n00:06:12.120 --> 00:06:15.420\nAnd then I'm going to go ahead and\npress enter, and\n\n108\n00:06:15.420 --> 00:06:17.880\nthat way I can type in the word FROM.\n\n109\n00:06:17.880 --> 00:06:21.250\nNow, you don't have to do it\nin this particular format.\n\n110\n00:06:21.250 --> 00:06:25.390\nThe whole goal behind SQL, of course,\nis that the statements are, as much as\n\n111\n00:06:25.390 --> 00:06:30.030\npossible, completely legible, in other\nwords readable, as much as we can.\n\n112\n00:06:30.030 --> 00:06:32.730\nSo, if I were to just do\nthis all on one line,\n\n113\n00:06:32.730 --> 00:06:36.340\nI can just go ahead do the next\none right here beside it.\n\n114\n00:06:36.340 --> 00:06:42.087\nAnd then I start typing in\nHumanResources.Employee.\n\n115\n00:06:42.087 --> 00:06:44.240\nJust like that.\n\n116\n00:06:44.240 --> 00:06:47.800\nAnd if I go ahead and select that,\nand now I press enter.\n\n117\n00:06:47.800 --> 00:06:49.380\nWell, notice it goes on next line and\n\n118\n00:06:49.380 --> 00:06:52.470\nwhat happens here on my screen,\nis that it actually cuts it off.\n\n119\n00:06:52.470 --> 00:06:55.430\nSo now I have to use\nthe scrollbar to go across here.\n\n120\n00:06:55.430 --> 00:06:56.090\nAnd you can do that.\n\n121\n00:06:56.090 --> 00:06:57.870\nThat's perfectly fine and good.\n\n122\n00:06:57.870 --> 00:07:01.870\nBut for the purposes of what we want to\nshow you, so that you can see it better.\n\n123\n00:07:01.870 --> 00:07:05.370\nI'm simply going to go ahead and\njust hit the next line here.\n\n124\n00:07:05.370 --> 00:07:09.130\nAnd that way, we can actually make it\na little bit more readable for us, so\n\n125\n00:07:09.130 --> 00:07:11.150\nthat we have these statements here.\n\n126\n00:07:11.150 --> 00:07:11.900\nFrom this point,\n\n127\n00:07:11.900 --> 00:07:16.220\nthis is just a simple query, just like\nwhat we've done in the previous episode.\n\n128\n00:07:16.220 --> 00:07:21.230\nI hit the F5 key, and\nnow I can see the results listed below.\n\n129\n00:07:21.230 --> 00:07:23.560\nAnd you can see that it\nactually cause a result tab for\n\n130\n00:07:23.560 --> 00:07:26.205\nus as well that we can also see.\n\n131\n00:07:26.205 --> 00:07:29.905\nAnd so, from here, there's actually\nanother query on this page,\n\n132\n00:07:29.905 --> 00:07:32.260\nthat's why you're seeing\nanother result here.\n\n133\n00:07:32.260 --> 00:07:33.225\nSo let me limit that.\n\n134\n00:07:33.225 --> 00:07:36.620\nI simply selecting the whole thing and\nthen clicking Execute,\n\n135\n00:07:36.620 --> 00:07:38.280\nand that make it a little bit easier.\n\n136\n00:07:38.280 --> 00:07:42.861\nSo now here's all of the login ID's for\neverybody that's actually in\n\n137\n00:07:42.861 --> 00:07:47.298\nthe Employee table at this particular\npoint in what we're seeing.\n\n138\n00:07:47.298 --> 00:07:50.123\nNow if I wanted to add in\nmultiple columns, well,\n\n139\n00:07:50.123 --> 00:07:54.361\nthis is where we can add in just now in\nthe SELECT statement then a comma, and\n\n140\n00:07:54.361 --> 00:07:58.358\nthis is very important is actually\nmake sure you have the comma there.\n\n141\n00:07:58.358 --> 00:08:02.540\nAnd then we would type in the same thing,\n\n142\n00:08:02.540 --> 00:08:06.724\nHumanResources from this point here and\n\n143\n00:08:06.724 --> 00:08:11.660\nthen we'll just do the employee and\njob title.\n\n144\n00:08:13.470 --> 00:08:17.560\nNow remember that even though we know that\nall of this stuff can be typed in on one\n\n145\n00:08:17.560 --> 00:08:18.210\nline.\n\n146\n00:08:19.340 --> 00:08:22.480\nAnd you can see I'm having a problem\ntyping because that's just me,\n\n147\n00:08:22.480 --> 00:08:24.530\nI can't type very well.\n\n148\n00:08:24.530 --> 00:08:27.307\nWell, what I normally like to\ndo instead is just go ahead and\n\n149\n00:08:27.307 --> 00:08:31.700\njust list it out like this so that we're\nactually able to see a little bit better.\n\n150\n00:08:31.700 --> 00:08:35.851\nSo now, I actually have these two columns\nlisted here and you'll see it's actually\n\n151\n00:08:35.851 --> 00:08:39.670\nthe employee, the login ID, and\nnow I'm asking for the job title.\n\n152\n00:08:39.670 --> 00:08:45.450\nAnd then we'll do one more here to give us\njust a little bit of information as well.\n\n153\n00:08:45.450 --> 00:08:47.500\nAnd I'm gonna do the comma\non the next line.\n\n154\n00:08:47.500 --> 00:08:50.170\nThat way,\nI know exactly that I need that comma.\n\n155\n00:08:50.170 --> 00:08:53.520\nSo, HumanResources.Employee and this one,\n\n156\n00:08:53.520 --> 00:08:58.530\nwe're gonna do HireDate, is what we're\ngoing to choose here, all right?\n\n157\n00:08:58.530 --> 00:09:00.210\nSo, now, I have this complete.\n\n158\n00:09:01.530 --> 00:09:03.690\nOops, let me try and\ndo that a little bit better.\n\n159\n00:09:04.730 --> 00:09:06.540\nAnd let's run that again.\n\n160\n00:09:06.540 --> 00:09:10.560\nLook at that, now it's actually\nkind of asking me something here.\n\n161\n00:09:10.560 --> 00:09:14.410\nIt's like saying hey, look, something is\nwrong with the way that I did it, and\n\n162\n00:09:14.410 --> 00:09:16.180\nthis is something we have\nto actually worry about.\n\n163\n00:09:16.180 --> 00:09:17.910\n>> So that red wordage, that's bad.\n\n164\n00:09:17.910 --> 00:09:19.230\nThat's not what we want, right?\n\n165\n00:09:19.230 --> 00:09:22.250\n>> No, that's not what we want, and\nthe nice thing is, if you take a look\n\n166\n00:09:22.250 --> 00:09:26.660\nat the actual lingo that it shows us down\nhere, it tells me that something is wrong.\n\n167\n00:09:26.660 --> 00:09:29.920\nAnd the good thing is that is\neven kind of helping me up.\n\n168\n00:09:29.920 --> 00:09:34.370\nThe multi-part identifier\nhuman resource employee title\n\n169\n00:09:34.370 --> 00:09:36.960\ncould not actually be found, okay?\n\n170\n00:09:36.960 --> 00:09:40.870\nSo saying hey, something is\nwrong here on line number five.\n\n171\n00:09:40.870 --> 00:09:43.850\n>> So if I scroll back out here and\nI start taking a look at it from the very\n\n172\n00:09:43.850 --> 00:09:48.390\ntop, I take one, two,\nthree, four, five, so yeah.\n\n173\n00:09:48.390 --> 00:09:51.600\nSo it's saying it does not like\nwhat I actually put right here.\n\n174\n00:09:51.600 --> 00:09:55.330\nAnd so if I take a look, it's saying\nsomething is wrong, notice the other ones.\n\n175\n00:09:55.330 --> 00:09:59.820\nI see the simple misspelling and\nnow there it is, if I select that now.\n\n176\n00:09:59.820 --> 00:10:03.380\nAnd then I select those same lines again\nlet me move this down a little bit so\n\n177\n00:10:03.380 --> 00:10:06.470\nwe can use it and we just start with this.\n\n178\n00:10:07.600 --> 00:10:12.380\nThere we go I can execute that and\nnow we can take a look at below and\n\n179\n00:10:12.380 --> 00:10:16.380\nwe'll see this information was actually\nreported in what we were expecting\n\n180\n00:10:16.380 --> 00:10:19.910\nRemember that the whole goal behind\nthe basic select statements here\n\n181\n00:10:19.910 --> 00:10:22.420\nis to return to you a table or\n\n182\n00:10:22.420 --> 00:10:27.640\na set of information you're looking for in\na relational form which is gonna be this.\n\n183\n00:10:27.640 --> 00:10:33.670\nNow, all relational forms, okay, will\nalways report to us rows of data, okay?\n\n184\n00:10:33.670 --> 00:10:39.220\nAnd, also, the columnar data that we\nhave should also have attributes to it.\n\n185\n00:10:39.220 --> 00:10:41.390\nIn other words, should also have a name or\n\n186\n00:10:41.390 --> 00:10:44.360\nsomething that uniquely\nidentifies that column.\n\n187\n00:10:44.360 --> 00:10:47.710\nAnd that actually keeps us in\nwhat we call relational format.\n\n188\n00:10:47.710 --> 00:10:51.730\nNow sometimes you're gonna end up seeing\nthat some of this may not appear,\n\n189\n00:10:51.730 --> 00:10:54.620\nsuch as these headers that we see up here.\n\n190\n00:10:54.620 --> 00:10:58.350\nAnd that means that the data that's\nbeing reported is not completely,\n\n191\n00:10:58.350 --> 00:11:01.030\nin what they call the relational format.\n\n192\n00:11:01.030 --> 00:11:04.840\nSo in that instance here you may actually\nhave to go ahead and add in a little bit\n\n193\n00:11:04.840 --> 00:11:09.570\nmore information to help you out, but\nfrom this point I can actually see that in\n\n194\n00:11:09.570 --> 00:11:14.170\nthe lower right-hand corner it's actually\nbehind my head here on the screen.\n\n195\n00:11:14.170 --> 00:11:19.440\nIt actually says 290 rows were returned,\nso if I take a look, that's\n\n196\n00:11:19.440 --> 00:11:25.990\nabout 290 different employees that I have\nlisted inside of that employees table.\n\n197\n00:11:25.990 --> 00:11:30.950\nSo we can actually start with just\nsomething just that simple to help us out\n\n198\n00:11:30.950 --> 00:11:35.950\nas we start to go ahead and\nlearn a little bit more about doing this.\n\n199\n00:11:35.950 --> 00:11:40.030\nNow one of the keys of course also in\nbuilding simple select statements,\n\n200\n00:11:40.030 --> 00:11:41.240\nlet me get rid of this one.\n\n201\n00:11:41.240 --> 00:11:43.890\nIt's just a repeat of\nwhat I just did here.\n\n202\n00:11:43.890 --> 00:11:44.920\nLet me scroll back up.\n\n203\n00:11:45.940 --> 00:11:51.676\nIs you saw where I had to constantly\nrepeat this HumanResources.Employee,\n\n204\n00:11:51.676 --> 00:11:53.750\nloginID on each one of these rows.\n\n205\n00:11:53.750 --> 00:11:57.310\nThat's what's considered best\npractices that you do it in this way.\n\n206\n00:11:57.310 --> 00:12:00.280\nBut the good thing is,\nin terms of Transact SQL,\n\n207\n00:12:00.280 --> 00:12:04.150\nthey give you the ability\nto shorten this up, okay?\n\n208\n00:12:04.150 --> 00:12:09.180\nAnd the way that we do this is by creating\nwhat we call different aliases to help us.\n\n209\n00:12:09.180 --> 00:12:11.920\nSo instead of me having to type\nin HumanResources.Employee\n\n210\n00:12:11.920 --> 00:12:16.360\nevery time that I do this,\nokay I instead can change it, and\n\n211\n00:12:16.360 --> 00:12:21.480\nthe way that I do it is from\nthe from statement right here, okay?\n\n212\n00:12:21.480 --> 00:12:26.960\nSo right here in the from line, okay,\nwhat I can actually do is I can create\n\n213\n00:12:26.960 --> 00:12:32.540\nan alias for well the human\nresources dot employee right here.\n\n214\n00:12:32.540 --> 00:12:35.980\nAnd the way that we do that is\na couple of different ways, okay?\n\n215\n00:12:35.980 --> 00:12:39.340\nSo, the way that I like doing it is just\ntyping in another key word that we call\n\n216\n00:12:39.340 --> 00:12:40.738\nAS.\n\n217\n00:12:40.738 --> 00:12:45.200\nNow, you wanna shorten this as much as you\ncan, but you also want to be careful when\n\n218\n00:12:45.200 --> 00:12:48.690\nyou shorten this, too, so\nit's also identifiable.\n\n219\n00:12:48.690 --> 00:12:51.620\nNow, I know that I'm only gonna\nbe querying from one table, I\n\n220\n00:12:51.620 --> 00:12:55.822\ncan shorten this up as much as one letter,\nif I want to, and I'm just gonna do that.\n\n221\n00:12:55.822 --> 00:13:01.210\nI'm gonna tell it that hey, what I want\nto do is actually turn it into an E, so\n\n222\n00:13:01.210 --> 00:13:04.790\nthat when you mention\nHumanResources.Employee,\n\n223\n00:13:04.790 --> 00:13:08.890\nthat absolutely turns it into\nan E at this point instead.\n\n224\n00:13:08.890 --> 00:13:12.330\nSo what happens if I run this\nstatement now and I execute it?\n\n225\n00:13:13.410 --> 00:13:18.260\nNo, now I actually get more information\nhere, and let's take a look.\n\n226\n00:13:18.260 --> 00:13:19.442\nNow that I've done this,\n\n227\n00:13:19.442 --> 00:13:22.950\nnotice that I'm actually having some\ndifferent issues going on here, too.\n\n228\n00:13:22.950 --> 00:13:27.085\nSo even though I've actually referred\nto it by the hierarchical name and\n\n229\n00:13:27.085 --> 00:13:31.921\nthe select statement, the way that I ended\nup typing in the from statement, right?\n\n230\n00:13:31.921 --> 00:13:34.961\nWhere I had HumanResources.Employee as E,\n\n231\n00:13:34.961 --> 00:13:38.883\nremember the processing order\nthat comes in now, right?\n\n232\n00:13:38.883 --> 00:13:43.582\nSo even though if you and I were to look\nat it, we have kind of like the fully\n\n233\n00:13:43.582 --> 00:13:47.620\nqualified name here,\njust like we would in DNS, right?\n\n234\n00:13:47.620 --> 00:13:51.570\nIt really does list everything we\nwould have to be able to find us.\n\n235\n00:13:51.570 --> 00:13:57.650\nBut because this is\nwhat's processed first,\n\n236\n00:13:57.650 --> 00:14:04.240\nit says that from this point on, I should\nrefer to HumanResources.Employee as what?\n\n237\n00:14:04.240 --> 00:14:07.220\nAs the letter E which,\nI shouldn't have done that.\n\n238\n00:14:07.220 --> 00:14:07.941\n>> You've just destroyed.\n\n239\n00:14:07.941 --> 00:14:09.870\n[LAUGH]\n>> Which I just destroyed there.\n\n240\n00:14:09.870 --> 00:14:12.350\nSo that's what I shouldn't do,\nbut I just did that.\n\n241\n00:14:12.350 --> 00:14:13.540\nSo what does that mean?\n\n242\n00:14:13.540 --> 00:14:16.975\nThat means that now,\nI can get rid of well,\n\n243\n00:14:16.975 --> 00:14:21.664\njust about all of this right\nup here to the letter e, okay?\n\n244\n00:14:21.664 --> 00:14:24.472\nNow, does it matter if its uppercase or\nlowercase?\n\n245\n00:14:24.472 --> 00:14:26.770\nI don't think so.\n\n246\n00:14:26.770 --> 00:14:28.650\nBut lets try it, lets see what happens.\n\n247\n00:14:28.650 --> 00:14:29.872\nIt may actually matter, lets see.\n\n248\n00:14:29.872 --> 00:14:33.911\n>> It does seem interesting that your\nselect statement starts once you said\n\n249\n00:14:33.911 --> 00:14:38.342\nthe from and then gave it the actual place\nyou want it to look from and it said as e,\n\n250\n00:14:38.342 --> 00:14:40.080\neverything above it changes.\n\n251\n00:14:41.610 --> 00:14:45.990\nWhereas typically, in scripting language,\nyou have to kinda work your way down.\n\n252\n00:14:45.990 --> 00:14:48.380\nIt filters downwards,\nyou can't go above it.\n\n253\n00:14:48.380 --> 00:14:49.780\nBut here, it looks like you can.\n\n254\n00:14:49.780 --> 00:14:53.050\n>> Yeah, and that's where it comes back to\nbeing a little bit different than what we\n\n255\n00:14:53.050 --> 00:14:56.150\nwould normally learn,\nin terms of the programming again.\n\n256\n00:14:56.150 --> 00:14:58.780\nSo this is where we have to\nlearn that processing order.\n\n257\n00:14:58.780 --> 00:15:01.590\nAnd why I said, a lot of time when\nyou start seeing red, specially,\n\n258\n00:15:01.590 --> 00:15:04.810\nif you finished typing in\nthe statement Is not necessarily that\n\n259\n00:15:04.810 --> 00:15:09.770\nthe syntax is completely wrong,\nis that you just forgot something and\n\n260\n00:15:09.770 --> 00:15:12.350\none of the things you might have\nforgotten is the processing order of\n\n261\n00:15:12.350 --> 00:15:14.610\nwhy that didn't work\nthe way that you needed to.\n\n262\n00:15:14.610 --> 00:15:18.180\nSo always remember now here I have\nactually done something of a little a bit\n\n263\n00:15:18.180 --> 00:15:20.320\nof a challenge as well.\n\n264\n00:15:20.320 --> 00:15:24.680\nNormally we wanna refer to the exact\nsame way as we can, right?\n\n265\n00:15:24.680 --> 00:15:26.420\nSo even referring to table names and\n\n266\n00:15:26.420 --> 00:15:29.550\nstuff If it's capitalized\nyou wanna do that as well.\n\n267\n00:15:29.550 --> 00:15:32.500\nBut Transact-SQL doesn't really care,\nTransact-SQL says,\n\n268\n00:15:32.500 --> 00:15:37.300\nI'll take whatever you want to, just to\ntry and make it as efficient as possible.\n\n269\n00:15:37.300 --> 00:15:43.070\nBut let's see what happens now that\nI've added in this capital E as well.\n\n270\n00:15:43.070 --> 00:15:46.830\nAnd let me get out of that first,\nand then execute it.\n\n271\n00:15:46.830 --> 00:15:48.328\nLook at that, it took it too.\n\n272\n00:15:48.328 --> 00:15:52.412\nSo it actually isn't case\nsensitive in that sense and\n\n273\n00:15:52.412 --> 00:15:55.508\nneither are even the actual names here.\n\n274\n00:15:55.508 --> 00:15:59.837\nSo if I change this,\nlet's say to A lower case l for\n\n275\n00:15:59.837 --> 00:16:03.559\nloginID, and I run that execution again.\n\n276\n00:16:03.559 --> 00:16:07.387\nDaniel, I don't know if you can actually\nsee that cuz it's actually a little bit\n\n277\n00:16:07.387 --> 00:16:11.130\nfar away from us, but something did\nactually change in the results here.\n\n278\n00:16:11.130 --> 00:16:13.890\nWith a little bit\ndifficult to actually see.\n\n279\n00:16:13.890 --> 00:16:17.606\nThe only way that you can actually tell\nthis is that whatever you actually type in\n\n280\n00:16:17.606 --> 00:16:20.007\nup here, right,\nit's gonna give us the results.\n\n281\n00:16:20.007 --> 00:16:22.340\nAnd we can actually see\nthat it matches up.\n\n282\n00:16:22.340 --> 00:16:24.940\nThe thing that changes right here,\nin the header.\n\n283\n00:16:24.940 --> 00:16:28.990\nIt actually also became\na lowercase loginID as well.\n\n284\n00:16:28.990 --> 00:16:32.420\nAnd notice how all of these are actually\nthe same as what we see up here.\n\n285\n00:16:32.420 --> 00:16:34.640\nNow, most of the time,\nthat doesn't matter to us.\n\n286\n00:16:34.640 --> 00:16:36.240\nWe're just running queries.\n\n287\n00:16:36.240 --> 00:16:39.941\nWhere this tends to matter is if\nyou're generating reports, and\n\n288\n00:16:39.941 --> 00:16:42.241\nyou're now actually having this data.\n\n289\n00:16:42.241 --> 00:16:47.583\nSo it is absolutely beneficial,\nif you're actually the report writer for\n\n290\n00:16:47.583 --> 00:16:53.348\nthis particular company and you do need to\nkeep all of the elements consistent and\n\n291\n00:16:53.348 --> 00:16:58.124\nthe proper case and title that yes,\nyou should run the same thing.\n\n292\n00:16:58.124 --> 00:17:00.072\nThat you should also try and\n\n293\n00:17:00.072 --> 00:17:04.970\nkeep this as much as you can in that\nproper format and order as well.\n\n294\n00:17:04.970 --> 00:17:09.530\nAnd that way, it actually runs for you and\neverything is actually properly titled,\n\n295\n00:17:09.530 --> 00:17:13.080\nwhen you go to make your reports,\neverything is going to be nice and\n\n296\n00:17:13.080 --> 00:17:14.710\nconsistent in that way.\n\n297\n00:17:14.710 --> 00:17:17.548\nBut if you don't, it means you're gonna\nhave a lot of different things that you're\n\n298\n00:17:17.548 --> 00:17:21.830\ngonna now always have to come back to\nthe SQL to help you adjust and change.\n\n299\n00:17:21.830 --> 00:17:25.490\nSo being able to do that,\nnotice how much cleaner, and\n\n300\n00:17:25.490 --> 00:17:28.190\nhow much smaller everything looks now.\n\n301\n00:17:28.190 --> 00:17:32.460\nIs that, hey, now that I've got everything\ntogether in the way that I need to,\n\n302\n00:17:32.460 --> 00:17:34.470\nthat's exactly what we wanted to do.\n\n303\n00:17:34.470 --> 00:17:36.800\n>> Yeah, Ronnie,\nit seems like such a simple thing, right?\n\n304\n00:17:36.800 --> 00:17:37.560\nOkay, it's cool.\n\n305\n00:17:37.560 --> 00:17:38.752\nWe can create an alias.\n\n306\n00:17:38.752 --> 00:17:43.626\nNot a a huge deal, but it actually it kind\nof is, it kind of works out to be that.\n\n307\n00:17:43.626 --> 00:17:47.469\nBecause as you're typing throughout\nthese things, I'm not a SQL guy, but\n\n308\n00:17:47.469 --> 00:17:51.131\nI have done some scripting, I have\ndone a little bit of programming, and\n\n309\n00:17:51.131 --> 00:17:52.890\nthe same kind of rules apply here.\n\n310\n00:17:52.890 --> 00:17:57.032\nThe fact that you're doing a lot of\ntyping, and the lesser amount of typing\n\n311\n00:17:57.032 --> 00:18:00.582\nyou can do, it helps create efficiency,\nit's easier to read,\n\n312\n00:18:00.582 --> 00:18:05.290\nyou start understanding, we start talking\nabout process order and key-in order.\n\n313\n00:18:05.290 --> 00:18:07.652\nWhere, which way is this trying to go?\n\n314\n00:18:07.652 --> 00:18:11.470\nIt starts making that easier for\nus as humans to deal with that.\n\n315\n00:18:11.470 --> 00:18:16.020\nSo if I take this SQL query, and I've\nwritten it up and I've created the alias.\n\n316\n00:18:16.020 --> 00:18:17.250\nAnd that's one of\nthe first things I've done.\n\n317\n00:18:17.250 --> 00:18:18.790\nAnd then, so, I give it to Ronnie.\n\n318\n00:18:18.790 --> 00:18:20.987\nRonnie's gonna be able to look at it and\ngo, okay.\n\n319\n00:18:20.987 --> 00:18:23.244\nCuz if I just start\nputting a bunch of stuff,\n\n320\n00:18:23.244 --> 00:18:26.410\nhis mind is gonna say this\nis too much information.\n\n321\n00:18:26.410 --> 00:18:30.450\nSo as we truncate it down it makes it\nmuch easier for us to process, and\n\n322\n00:18:30.450 --> 00:18:33.610\nI guess that's the biggest thing for\nit, right?\n\n323\n00:18:33.610 --> 00:18:38.100\nThat easier processing time, for\nour minds, that's the key benefit.\n\n324\n00:18:38.100 --> 00:18:40.880\nAnd the readability is kind of key, right?\n\n325\n00:18:40.880 --> 00:18:43.390\nThe very fact is that if we write code,\n\n326\n00:18:43.390 --> 00:18:46.730\nit could be that somebody else examines\nthat code and it's not necessarily\n\n327\n00:18:46.730 --> 00:18:49.920\nthat you're trying to make sure that\nthey don't understand the code, right?\n\n328\n00:18:49.920 --> 00:18:52.470\nYou want to make sure that it's\nactually understandable, that they\n\n329\n00:18:52.470 --> 00:18:56.360\ncan take a look at it and maybe have\na sense of where you were going with it,\n\n330\n00:18:56.360 --> 00:19:00.420\nespecially if other people are also gonna\nbe having to debug that code as well.\n\n331\n00:19:00.420 --> 00:19:02.320\nAnd so the same thing applies here.\n\n332\n00:19:02.320 --> 00:19:06.050\nWe normally don't try and write everything\non a single line if we don't have to.\n\n333\n00:19:06.050 --> 00:19:08.880\nBut I have seen it where there's\nactually been lines and lines of code\n\n334\n00:19:08.880 --> 00:19:12.370\nthat I would have divided up into\nmultiple lines to make it easier to read,\n\n335\n00:19:12.370 --> 00:19:17.470\nwhere somebody else just said no I like\nto see everything on one entire line.\n\n336\n00:19:17.470 --> 00:19:20.280\nAnd that way even when you print it out\nyou're kind of amazed that it goes all\n\n337\n00:19:20.280 --> 00:19:24.700\nthe way across a sheet of paper that\nyou'd actually print landscape and\n\n338\n00:19:24.700 --> 00:19:27.330\nyou're still not exactly sure\nwhat you're looking for.\n\n339\n00:19:27.330 --> 00:19:30.210\nSo readability is one of the key\nfunctions that they try to do.\n\n340\n00:19:30.210 --> 00:19:33.490\nNow here, I'm trying to make sure\nthat we present all on the screen and\n\n341\n00:19:33.490 --> 00:19:36.640\nmy screen resolution isn't as big.\n\n342\n00:19:36.640 --> 00:19:39.550\nBut it actually does allow us to\nsee everything a little bit better.\n\n343\n00:19:39.550 --> 00:19:41.390\nOne of the elements that\nwe also need to do, right,\n\n344\n00:19:41.390 --> 00:19:44.030\nis that this returns the entire set.\n\n345\n00:19:44.030 --> 00:19:47.020\nSo what I've really done is\nthe only that I've done in terms of\n\n346\n00:19:47.020 --> 00:19:51.110\nfiltering the data that you saw from\nthe humanresources.employee table,\n\n347\n00:19:51.110 --> 00:19:53.320\nis I just chose three columns, right?\n\n348\n00:19:53.320 --> 00:19:56.907\nI didn't choose every single column that's\nactually there because there were about\n\n349\n00:19:56.907 --> 00:20:00.016\nsix or seven, actually I'm lying to you,\nthere were about 10 or 15.\n\n350\n00:20:00.016 --> 00:20:03.293\nYeah, 10 or 12 different columns\nactually in that table, so\n\n351\n00:20:03.293 --> 00:20:06.060\nthat's the only filtering that I've done.\n\n352\n00:20:06.060 --> 00:20:10.727\nBut a lot of times, we need to actually be\nable to filter exactly based on what we\n\n353\n00:20:10.727 --> 00:20:15.340\nsee here in our records down here,\nor our set of data that we need.\n\n354\n00:20:15.340 --> 00:20:17.560\nAnd when we start looking at that, now,\n\n355\n00:20:17.560 --> 00:20:21.720\nthis is where we start expanding\nout our basic select state, okay?\n\n356\n00:20:21.720 --> 00:20:26.240\nSo the next expansion that we want to\ntalk about is the use of filtering, okay?\n\n357\n00:20:26.240 --> 00:20:30.290\nSo let's say that from this particular\ntable here, what I want to do is,\n\n358\n00:20:30.290 --> 00:20:32.560\nI want to filter by.\n\n359\n00:20:32.560 --> 00:20:35.623\nLet me see, I'm trying to take\na look at the dates here and verify,\n\n360\n00:20:35.623 --> 00:20:37.341\nlet's just say by 2009, okay.\n\n361\n00:20:37.341 --> 00:20:45.150\nSo, I want to actually see all of the\nemployees really essentially since 2009.\n\n362\n00:20:45.150 --> 00:20:49.510\nI'm gonna leave out the 2007 that I see,\nas well as the 2008.\n\n363\n00:20:49.510 --> 00:20:51.950\nSo, let's do that.\n\n364\n00:20:51.950 --> 00:20:53.510\nWell, how do we do that?\n\n365\n00:20:53.510 --> 00:20:58.660\nWell what we do is we tell it,\nright, from the employees table,\n\n366\n00:20:58.660 --> 00:21:02.045\nselect these, don't select these yet,\nbut let's do this.\n\n367\n00:21:02.045 --> 00:21:02.770\n>> Mm-hm.\n>> Yeah, so\n\n368\n00:21:02.770 --> 00:21:04.930\nhere's where the processing\norder comes in.\n\n369\n00:21:04.930 --> 00:21:10.210\nSelect from the employees table, so\ntake a look at the entire employees table.\n\n370\n00:21:10.210 --> 00:21:15.187\nWhere and\nthen I'm gonna type in e because it's\n\n371\n00:21:15.187 --> 00:21:20.040\nalready processed as e\nas far as the from goes,\n\n372\n00:21:20.040 --> 00:21:23.158\nright, e and then hire date.\n\n373\n00:21:23.158 --> 00:21:25.215\nMake sure I actually type that in right.\n\n374\n00:21:25.215 --> 00:21:29.915\nHire date,\nokay is going to be greater than or\n\n375\n00:21:29.915 --> 00:21:33.505\nequal to well now notice I'm using\narithmetic operators, right?\n\n376\n00:21:33.505 --> 00:21:35.689\nI'm using some type of operation\nthat's actually going to be\n\n377\n00:21:35.689 --> 00:21:36.534\nsomething that we see.\n\n378\n00:21:36.534 --> 00:21:39.330\nSo I have a greater than and\nan equal to, and\n\n379\n00:21:39.330 --> 00:21:42.748\nnow I need to take a look at\nthat hire date column, and\n\n380\n00:21:42.748 --> 00:21:48.458\nI'm gonna put it in single quotes, cuz\nthat's exactly how it appears, so 2009.\n\n381\n00:21:48.458 --> 00:21:53.729\nSo I'm actually just on to go ahead and\n\n382\n00:21:53.729 --> 00:21:58.025\nfill in that just in case here.\n\n383\n00:21:58.025 --> 00:22:03.070\nI don't wanna accidentally be wrong\njust for the sake of being wrong here.\n\n384\n00:22:03.070 --> 00:22:04.790\nSo let's go ahead and do this now.\n\n385\n00:22:04.790 --> 00:22:07.420\nLet's read this and\nmake sure we understand what's going on.\n\n386\n00:22:07.420 --> 00:22:12.430\nOkay, so what I'm saying is, I wanna\nmake sure that I showed the login ID,\n\n387\n00:22:12.430 --> 00:22:17.450\nthe job title, the hire date\nfrom the employee's table, okay.\n\n388\n00:22:17.450 --> 00:22:22.058\nAs long as the hire date is 2009,\nJanuary 1st, okay.\n\n389\n00:22:22.058 --> 00:22:26.240\nSo this particular order is actually\nthe way that the system kept it, so\n\n390\n00:22:26.240 --> 00:22:29.660\nthat's why I'm keeping\nit exactly that way.\n\n391\n00:22:29.660 --> 00:22:32.530\nAnd so\nthen when I click Execute from here.\n\n392\n00:22:34.030 --> 00:22:35.550\nYeah, so it actually said greater than.\n\n393\n00:22:35.550 --> 00:22:36.838\nSo, I shouldn't see any 2008.\n\n394\n00:22:36.838 --> 00:22:41.620\nLet's see if I can zoom in to kind\nof help us out a little bit here.\n\n395\n00:22:41.620 --> 00:22:42.590\nThere we go.\n\n396\n00:22:42.590 --> 00:22:44.980\nI'm actually able to zoom in\na little bit better here.\n\n397\n00:22:44.980 --> 00:22:51.242\nSo then, if I can zoom in here, and\nthen scroll down a little bit at a time,\n\n398\n00:22:51.242 --> 00:22:56.512\nwe can actually see those dates\nare from 2009 or greater.\n\n399\n00:22:56.512 --> 00:23:03.160\nSo I should not see any 2008 and\n2007 dates that are actually in here.\n\n400\n00:23:03.160 --> 00:23:07.050\nI can actually use that where\nas being a condition for\n\n401\n00:23:07.050 --> 00:23:12.340\nfiltering that allows us to be able\nto now zoom in on what we need.\n\n402\n00:23:12.340 --> 00:23:17.918\nNow could I change that if I wanted to,\nlet's say, like a less than, sure.\n\n403\n00:23:17.918 --> 00:23:22.380\nI simply change the sign there and\nthen I click Execute and\n\n404\n00:23:22.380 --> 00:23:23.750\nnow you'll see the difference.\n\n405\n00:23:25.060 --> 00:23:29.100\nSo now notice that all\nthe dates are actually 2009 or\n\n406\n00:23:29.100 --> 00:23:34.310\nactually less than January first\nof 2009 is what we'll see.\n\n407\n00:23:34.310 --> 00:23:37.830\nNow, when I did that,\nthat actually became 83 rows.\n\n408\n00:23:37.830 --> 00:23:39.570\nAnd the other one when\nI did the greater than,\n\n409\n00:23:39.570 --> 00:23:42.510\nI should have counted that beginning but\nI didn't.\n\n410\n00:23:42.510 --> 00:23:43.328\nThat's 209 rows.\n\n411\n00:23:43.328 --> 00:23:47.896\nSo, we actually can see the differences\nthere when we actually do something like\n\n412\n00:23:47.896 --> 00:23:52.148\nthis to help us just to be able to filter\nout what we're looking for as well.\n\n413\n00:23:52.148 --> 00:23:56.888\nSo by being able to do something like\nthat, that works incredibly neatly, right.\n\n414\n00:23:56.888 --> 00:24:00.028\nThat what we can do is\nalso in this where clause.\n\n415\n00:24:00.028 --> 00:24:03.750\nAnd we're gonna see this later on in\na little bit more advanced querying.\n\n416\n00:24:03.750 --> 00:24:06.700\nWhere we can actually do\nsome incredible filtering.\n\n417\n00:24:08.150 --> 00:24:11.220\nBeyond the idea of just taking\na column and saying what we\n\n418\n00:24:11.220 --> 00:24:15.400\nthink it should represent, and being\nable to see that data from one table.\n\n419\n00:24:15.400 --> 00:24:17.970\nYou're gonna see that we're actually able\nto do this filtering when we connect\n\n420\n00:24:17.970 --> 00:24:22.090\nmultiple tables together, and\nactually even multiple filters together.\n\n421\n00:24:22.090 --> 00:24:23.760\nIt's pretty neat when we get into that.\n\n422\n00:24:23.760 --> 00:24:24.390\n>> That's right.\n\n423\n00:24:24.390 --> 00:24:28.630\nThis gets very, very powerful, we're just\nscratching the surface on what we can do\n\n424\n00:24:28.630 --> 00:24:33.460\nwith our SQL querying in just, in getting\nyou started with these select statements.\n\n425\n00:24:33.460 --> 00:24:36.440\nNow, Ronnie, I was looking at your\ntables as you had returned them.\n\n426\n00:24:36.440 --> 00:24:40.645\nAnd I noticed one thing about it and that\nwas the job titles were all jumbled up.\n\n427\n00:24:40.645 --> 00:24:42.920\nIt just kind of returned\nthem as it found them or\n\n428\n00:24:42.920 --> 00:24:47.100\nat least it seemed that way or\nit was filtered by some other way.\n\n429\n00:24:47.100 --> 00:24:50.690\nI like things grouped together and\nI know that SQL does that.\n\n430\n00:24:50.690 --> 00:24:54.901\nYou have the ability to say I\nwant to group like types of data.\n\n431\n00:24:54.901 --> 00:24:57.360\nCan we show how to do that\nmaybe with the job title?\n\n432\n00:24:57.360 --> 00:24:59.436\nWe definitely can.\n\n433\n00:24:59.436 --> 00:25:00.350\nWe can take the information and\n\n434\n00:25:00.350 --> 00:25:05.350\nreally help us out by even now being able\nto group some of the data together, okay?\n\n435\n00:25:05.350 --> 00:25:09.050\nSo let's go ahead and\ndo exactly what we are talking about here.\n\n436\n00:25:09.050 --> 00:25:11.600\nNow, when we started actually\nimplementing groups,\n\n437\n00:25:11.600 --> 00:25:13.770\nthis is where it get's\na little bit more complex.\n\n438\n00:25:13.770 --> 00:25:16.819\nIt seems simple enough,\nthat I know that after the where,\n\n439\n00:25:16.819 --> 00:25:20.800\nthere is something that's called GROUP BY,\noops if I can spell it.\n\n440\n00:25:20.800 --> 00:25:22.580\nGROUP BY, okay.\n\n441\n00:25:22.580 --> 00:25:26.010\nAnd then from this point here, let's\nsay that what I want is that job title.\n\n442\n00:25:26.010 --> 00:25:28.940\nSo I'd say e JobTitle, okay?\n\n443\n00:25:30.640 --> 00:25:34.670\nSo, that seems natural as it can be,\nright?\n\n444\n00:25:34.670 --> 00:25:38.630\nSo even though SQL's actually designed\nto actually be very easily read,\n\n445\n00:25:38.630 --> 00:25:40.850\nthere are a few tricky elements, and\n\n446\n00:25:40.850 --> 00:25:44.700\nthis is one of the very first ones that\nwe have to actually get used to, okay?\n\n447\n00:25:44.700 --> 00:25:47.510\nSo let me run this query and, there we go.\n\n448\n00:25:48.620 --> 00:25:53.372\nWhen I take a look at this here,\nit now gives me another message ID, okay?\n\n449\n00:25:53.372 --> 00:25:56.340\nAnd this actually happened\ndirectly after the GROUP BY.\n\n450\n00:25:56.340 --> 00:26:00.530\nSo, here's one of the troubleshooting\nthings that I do right away, right?\n\n451\n00:26:00.530 --> 00:26:04.300\nSo if I'm not sure what's causing it,\nI can also type in a dash dash that\n\n452\n00:26:04.300 --> 00:26:08.110\nessentially comments that line out and\nthen I can run that query again.\n\n453\n00:26:08.110 --> 00:26:08.800\nWell, maybe.\n\n454\n00:26:08.800 --> 00:26:09.500\nOkay?\n\n455\n00:26:09.500 --> 00:26:11.320\nAnd notice that it fixes it, right?\n\n456\n00:26:11.320 --> 00:26:14.150\nSo if I know that that's\nactually what fixes it,\n\n457\n00:26:14.150 --> 00:26:16.370\nit means I need to focus in on where.\n\n458\n00:26:16.370 --> 00:26:17.340\nOn that GROUP BY.\n\n459\n00:26:17.340 --> 00:26:21.348\nIt means that something else is actually\nright here and the good thing is these\n\n460\n00:26:21.348 --> 00:26:25.244\nmessages are actually trying to tell\nus what's actually happening here.\n\n461\n00:26:25.244 --> 00:26:30.182\nAnd it's saying, hey, there's a column\nthat you're mentioning essentially\n\n462\n00:26:30.182 --> 00:26:34.900\nin the select clause here, okay, that\nis invalid because it is not contained\n\n463\n00:26:34.900 --> 00:26:38.768\nin either an aggregate function or\nthe GROUP BY clause itself.\n\n464\n00:26:38.768 --> 00:26:42.280\nNow what in the world is that about, okay.\n\n465\n00:26:42.280 --> 00:26:46.395\nWell, the way that this works is if\nwe're going to GROUP BY one, okay,\n\n466\n00:26:46.395 --> 00:26:49.240\none of these things in the select clause,\n\n467\n00:26:49.240 --> 00:26:53.915\nwe need to make sure that everything\nelse up here is also in a group as well.\n\n468\n00:26:53.915 --> 00:26:58.210\nNow, we can do this in this way\nwhere I simply type in a comma.\n\n469\n00:26:58.210 --> 00:27:04.750\nAnd then I do e.loginID and\nthen I do an e.HireDate as well.\n\n470\n00:27:04.750 --> 00:27:07.793\nNow this is not gonna make much sense\ncuz it doesn't make sense to GROUP BY\n\n471\n00:27:07.793 --> 00:27:11.240\nsomebody's login ID nor\neven by the hire date,\n\n472\n00:27:11.240 --> 00:27:12.960\neven though hire date\ncould actually be there.\n\n473\n00:27:12.960 --> 00:27:13.720\nBut I can do that.\n\n474\n00:27:13.720 --> 00:27:18.280\nNow notice that everything is\nactually kind of okay again, okay?\n\n475\n00:27:18.280 --> 00:27:19.970\nWell, so now when we take a look,\n\n476\n00:27:19.970 --> 00:27:23.380\nyou can see where it's actually\ngrouping a little bit better here.\n\n477\n00:27:23.380 --> 00:27:26.030\nSo let me kind of scroll this up for\nus, and\n\n478\n00:27:26.030 --> 00:27:30.190\nnotice how now all of the stuff is\nactually, well exactly like I said.\n\n479\n00:27:30.190 --> 00:27:33.460\nIt's not grouping in terms of actually\nmaking one name like research and\n\n480\n00:27:33.460 --> 00:27:36.180\ndevelopment manager and\nsaying here's all the people.\n\n481\n00:27:36.180 --> 00:27:39.760\nBut notice how they're all actually\ngrouped together, right there, okay?\n\n482\n00:27:39.760 --> 00:27:43.670\nAlso you can see with marketing assistant\nhow all those are grouped together.\n\n483\n00:27:43.670 --> 00:27:46.280\nOops, let me click down here and\nthen you could scroll down and\n\n484\n00:27:46.280 --> 00:27:48.990\nsee how all the production technicians and\n\n485\n00:27:48.990 --> 00:27:53.020\nthen supervisor, those are also\ngrouped together as well, okay?\n\n486\n00:27:53.020 --> 00:27:55.920\nSo you can see that there's a few of them\nthat aren't grouped in that way, and\n\n487\n00:27:55.920 --> 00:27:58.940\nthat's because of the way that\nthis database is actually have it.\n\n488\n00:27:58.940 --> 00:28:00.750\nSo you might see where\nit's actually the 20 and\n\n489\n00:28:00.750 --> 00:28:06.020\nthe 30 and that's why it's actually\na little bit different here as well, okay?\n\n490\n00:28:06.020 --> 00:28:09.740\nSo it is grouping them\ntogether in that sense.\n\n491\n00:28:09.740 --> 00:28:13.360\nSo one of the keys here when you\nstart doing stuff like this,\n\n492\n00:28:13.360 --> 00:28:18.130\nof course, is then to make sure that\nwhen you group, when you use a GROUP BY,\n\n493\n00:28:18.130 --> 00:28:22.040\nverify that all these other columns\nare actually doing what they need to.\n\n494\n00:28:22.040 --> 00:28:25.840\nNow if the only thing you wanted\nto GROUP BY was a job title, well,\n\n495\n00:28:25.840 --> 00:28:28.230\nall we have to do is get rid of these.\n\n496\n00:28:28.230 --> 00:28:31.000\nAnd then up here in the SELECT statement,\nthis is just for testing,\n\n497\n00:28:31.000 --> 00:28:32.560\nsomething that you can use here.\n\n498\n00:28:32.560 --> 00:28:37.360\nAnd just test out, is I can simply go\nahead and just add in those double dashes.\n\n499\n00:28:37.360 --> 00:28:38.410\nAnd that actually says, hey,\n\n500\n00:28:38.410 --> 00:28:42.680\nanything after these dashes,\nmake it a comment instead for right now.\n\n501\n00:28:42.680 --> 00:28:44.380\nAnd then, actually that's the wrong one.\n\n502\n00:28:44.380 --> 00:28:45.700\nThat's not gonna work [LAUGH].\n\n503\n00:28:45.700 --> 00:28:46.700\nHire date.\n\n504\n00:28:46.700 --> 00:28:48.290\nSo there we go.\n\n505\n00:28:48.290 --> 00:28:49.720\nOops, three's not gonna work either.\n\n506\n00:28:49.720 --> 00:28:52.570\nSo now it's actually saying, look at that.\n\n507\n00:28:52.570 --> 00:28:56.210\nNow, here's something a little\nbit more different, okay?\n\n508\n00:28:56.210 --> 00:29:00.540\nSo now it's telling me that there's\nan incorrect syntax near a comma.\n\n509\n00:29:00.540 --> 00:29:04.183\nWell, you can imagine as these start\ngetting larger, it becomes a little bit\n\n510\n00:29:04.183 --> 00:29:07.154\nmore difficult to actually\nunderstand where the heck that is,\n\n511\n00:29:07.154 --> 00:29:09.618\nbut it tells me what line it's on,\nwhich is line 4,\n\n512\n00:29:09.618 --> 00:29:13.920\nso on this one, I'm actually supposed to\ngo back to line 4 which is right here.\n\n513\n00:29:13.920 --> 00:29:18.520\nAnd it's saying look, it doesn't make\nsense for you to say SELECT, JobTitle.\n\n514\n00:29:18.520 --> 00:29:21.770\nSo let's simply remove that comma and\nnow I run it.\n\n515\n00:29:21.770 --> 00:29:23.770\nNotice there it goes, okay.\n\n516\n00:29:23.770 --> 00:29:26.980\nSo as long as what I have\nthere in the JobTitle,\n\n517\n00:29:26.980 --> 00:29:31.740\nwhat I've selected is also grouped, well\nthen I can actually go ahead and do that.\n\n518\n00:29:31.740 --> 00:29:35.500\nAnd now you can see all of the same\nthings in terms of the GROUP BY,\n\n519\n00:29:35.500 --> 00:29:38.080\ndoing that as well, okay?\n\n520\n00:29:38.080 --> 00:29:42.160\nSo it really does help us out to be able\nto understand that if we're grouping\n\n521\n00:29:42.160 --> 00:29:45.730\nstuff, everything in our SELECT\nstatement has to be grouped.\n\n522\n00:29:45.730 --> 00:29:46.990\nOr you can do like I did here,\n\n523\n00:29:46.990 --> 00:29:50.490\nwhich is simply, well,\nremove it from needing to do that.\n\n524\n00:29:50.490 --> 00:29:52.050\n>> All right, Ronnie, very cool stuff.\n\n525\n00:29:52.050 --> 00:29:55.790\nWe're starting to understand\nhow to build upon our power.\n\n526\n00:29:55.790 --> 00:29:59.820\nBuild a foundation, and then use that\nfoundational knowledge to build upon that\n\n527\n00:29:59.820 --> 00:30:02.520\nto give us a little extra flexibility,\nmaybe,\n\n528\n00:30:02.520 --> 00:30:05.410\nwhen it comes to paring\ndown our SQL queries, so\n\n529\n00:30:05.410 --> 00:30:09.080\nthat we can get exactly what it is\nthat we're looking for in the results.\n\n530\n00:30:09.080 --> 00:30:10.970\nRonnie, I know you got\na little bit more to go,\n\n531\n00:30:10.970 --> 00:30:14.780\nwhen it comes to this wonderful SELECT\nstatement that we have for SQL.\n\n532\n00:30:14.780 --> 00:30:18.260\nBut our time is woefully inadequate for\nthe job.\n\n533\n00:30:18.260 --> 00:30:21.140\nSo, looks like we'll have to come back for\nat least a short part two,\n\n534\n00:30:21.140 --> 00:30:22.360\nif not a full one, who knows.\n\n535\n00:30:22.360 --> 00:30:24.920\n>> Yeah, sounds good.\n>> Look forward to seeing you there.\n\n536\n00:30:24.920 --> 00:30:26.730\nLooking forward to seeing\nyou guys there as well.\n\n537\n00:30:26.730 --> 00:30:29.023\nHopefully you enjoyed this episode, but\nwe're going to go ahead and sign off.\n\n538\n00:30:29.023 --> 00:30:31.514\nFor IT Pro TV,\nI've been your host, Daniel Lowrie\n\n539\n00:30:31.514 --> 00:30:32.419\n>> And I'm Ronnie Wong.\n\n540\n00:30:32.419 --> 00:30:34.532\n>> We'll see you next time.\n\n541\n00:30:34.532 --> 00:30:42.090\n>> [MUSIC]\n\n",
          "vimeoId": "164048204"
        },
        {
          "description": "In this episode, Daniel and Ronnie continue their exposition of the SELECT SQL query. They begin by showing you how to perform a SELECT query to filter grouped data and then filter even more by removing duplicate results. Finally, they introduce you to some decision making features of SQL by employing the CASE command.",
          "length": "1889",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-1-2-basic_select_queries_pt2-041916-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-1-2-basic_select_queries_pt2-041916-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-1-2-basic_select_queries_pt2-041916-1-sm.jpg",
          "title": "Basic SELECT Queries Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.105 --> 00:00:13.491\nAll right, greetings everyone!\n\n3\n00:00:13.491 --> 00:00:15.930\nAnd welcome to another\ngreat episode of ITProTV.\n\n4\n00:00:15.930 --> 00:00:18.560\nI'm your host Daniel Lowrie,\nand in today's\n\n5\n00:00:18.560 --> 00:00:23.920\nepisode we are continuing on with our\nQuerying Microsoft SQL server 2014 and\n\n6\n00:00:23.920 --> 00:00:28.220\nactually this is a sequel, crediting my\nman Curtis out there in our chat room.\n\n7\n00:00:28.220 --> 00:00:30.082\nHe let us know it's SQL the sequel.\n\n8\n00:00:30.082 --> 00:00:33.421\n[LAUGH] That's right, this is a sequel,\nand joining us back for\n\n9\n00:00:33.421 --> 00:00:37.400\nthat part two is our good friend,\nthe master of the SQL, Mr. Ronnie Wong.\n\n10\n00:00:37.400 --> 00:00:38.210\nRonnie, welcome back sir.\n\n11\n00:00:38.210 --> 00:00:39.350\nHow is it going?\n>> Well thank you for\n\n12\n00:00:39.350 --> 00:00:41.210\nhaving me back on SQL the sequel.\n\n13\n00:00:41.210 --> 00:00:45.810\nIt's absolutely a great day to be right\nhere as we continue on taking a look at\n\n14\n00:00:45.810 --> 00:00:50.210\nthe basics of using our select statements\nto help us to query the data that we need\n\n15\n00:00:50.210 --> 00:00:51.390\nout of our database.\n\n16\n00:00:51.390 --> 00:00:55.010\nNow remember that we're still focusing\nin on trying to pull information\n\n17\n00:00:55.010 --> 00:00:56.730\nout of a single table.\n\n18\n00:00:56.730 --> 00:01:01.100\nBut having these fundamentals down\nare what's really gonna help accelerate\n\n19\n00:01:01.100 --> 00:01:06.740\nyour learning and that curve, so\nthat when we get into much more complex\n\n20\n00:01:06.740 --> 00:01:09.420\ntypes of querying,\nit's gonna really help you out.\n\n21\n00:01:09.420 --> 00:01:14.030\nFoundations and of course fundamentals are\npretty much the key at what we're doing.\n\n22\n00:01:14.030 --> 00:01:16.510\nNow, we've actually gone though a lot so\nfar, right?\n\n23\n00:01:16.510 --> 00:01:20.700\nJust showing you how to do simple select\nstatements using the select and from.\n\n24\n00:01:20.700 --> 00:01:24.667\nWe also showed you how to filter in the\nprevious episodes so make sure you check\n\n25\n00:01:24.667 --> 00:01:28.693\nthat out as well and then we ended with\nwhat we called the group buy, showing how\n\n26\n00:01:28.693 --> 00:01:32.906\nwe can actually group the information\ntogether inside of our select statements,\n\n27\n00:01:32.906 --> 00:01:34.630\nhelping us out there.\n\n28\n00:01:34.630 --> 00:01:37.270\nBut we actually need to go\na little bit further than that and\n\n29\n00:01:37.270 --> 00:01:39.400\nwe'll actually see where this leads us.\n\n30\n00:01:39.400 --> 00:01:41.860\nSo, let's take a look at\nmy screen right here, and\n\n31\n00:01:41.860 --> 00:01:45.310\nlet's verify that we understand what\nwe're actually starting to see, okay?\n\n32\n00:01:45.310 --> 00:01:48.910\nSo, remember that we're actually connected\nto that adventure works database that we\n\n33\n00:01:48.910 --> 00:01:53.720\nhave, and our select statement right now,\nwe've kind of ended with this group by,\n\n34\n00:01:53.720 --> 00:01:57.570\nwhere the only thing I'm really\nshowing is job title, okay?\n\n35\n00:01:57.570 --> 00:01:59.620\nAnd we're grouping by that job title.\n\n36\n00:01:59.620 --> 00:02:04.980\nWe're actually only showing the data,\nor all the rows that actually have\n\n37\n00:02:04.980 --> 00:02:09.840\na date later than or\nequal to January 1st, 2009.\n\n38\n00:02:09.840 --> 00:02:13.179\nSo it's down here on the bottom,\nlet me click down here and\n\n39\n00:02:13.179 --> 00:02:14.485\nthat way we can see it.\n\n40\n00:02:14.485 --> 00:02:16.500\nYou can actually see that down here,\n\n41\n00:02:16.500 --> 00:02:19.820\nthese are essentially all of\nthose different job titles.\n\n42\n00:02:19.820 --> 00:02:25.110\nThese are all of the employees that we\nhave available to us when we take a look.\n\n43\n00:02:25.110 --> 00:02:27.760\nAt least,\ntheir job roles that we have available.\n\n44\n00:02:27.760 --> 00:02:30.050\nAnd that's what we're\ntaking a look at now.\n\n45\n00:02:30.050 --> 00:02:35.250\nFrom this particular point here, what if I\nwanted to see how many people are actually\n\n46\n00:02:35.250 --> 00:02:40.580\nin each of these particular\njob titles here?\n\n47\n00:02:40.580 --> 00:02:43.340\nWell, that's actually taking\nthat group information,\n\n48\n00:02:43.340 --> 00:02:47.990\nsuch as the idea here of the accounts\nmanager, or accounts payable specialist,\n\n49\n00:02:47.990 --> 00:02:51.480\nor even one of the ones I know down here,\nlike production technicians.\n\n50\n00:02:51.480 --> 00:02:53.220\nThere's a whole slough of those.\n\n51\n00:02:53.220 --> 00:02:56.460\nHow many people are actually hired for\nthose positions?\n\n52\n00:02:56.460 --> 00:03:01.080\nWell, this actually allows me now to take\nthat grouped information that I've grouped\n\n53\n00:03:01.080 --> 00:03:06.590\nby job title and allows me to find out\ninformation like that if I want too.\n\n54\n00:03:06.590 --> 00:03:11.240\nSo what we're actually gonna use is what's\nactually called the having clause as well.\n\n55\n00:03:11.240 --> 00:03:14.580\nNow the way that we do this is we need to\ngo back up to the select statement and\n\n56\n00:03:14.580 --> 00:03:16.070\nwe need to add in now, what we call,\n\n57\n00:03:16.070 --> 00:03:20.020\nsome type of aggregation\nfunction is what we need.\n\n58\n00:03:20.020 --> 00:03:24.840\nSo the first thing that I'm actually going\nto do is actually use the word count and\n\n59\n00:03:24.840 --> 00:03:32.190\ninside of count here I want us to\ngo ahead count by the hire date.\n\n60\n00:03:32.190 --> 00:03:34.230\nSo I'm actually just gonna\ntell it to go ahead and\n\n61\n00:03:34.230 --> 00:03:38.010\ncount all of the entire hire date here and\nso if I were to run this,\n\n62\n00:03:38.010 --> 00:03:41.190\nlet me get rid of, let me see,\nyeah let me do this right now.\n\n63\n00:03:41.190 --> 00:03:43.503\nLet's see if I can\nactually run that as well.\n\n64\n00:03:43.503 --> 00:03:44.969\nOkay, yep, so\nlet me get rid of this group by and\n\n65\n00:03:44.969 --> 00:03:46.128\nI just want us to see if we can do that.\n\n66\n00:03:46.128 --> 00:03:49.292\nNope, notice that because\nI now have this and\n\n67\n00:03:49.292 --> 00:03:53.956\nI don't have the group buy as well,\nit's actually showing me that\n\n68\n00:03:53.956 --> 00:03:59.142\nthere's actually some incorrect syntax\nhere that I need to take care of.\n\n69\n00:03:59.142 --> 00:04:03.549\nBut we're actually going to see that it's\nactually not just that, okay, so we know\n\n70\n00:04:03.549 --> 00:04:07.955\nthat it worked before this, if I take this\nout, so I know that that actually worked,\n\n71\n00:04:07.955 --> 00:04:11.970\nso the problem is actually right\nhere when I added in this count.\n\n72\n00:04:11.970 --> 00:04:15.650\nAnd what this is actually telling us is\nthat we've actually got to do a little bit\n\n73\n00:04:15.650 --> 00:04:19.330\nmore here, okay, so\nI need to type in having\n\n74\n00:04:21.510 --> 00:04:26.510\nand this is where we're essentially\nputting a filter in on the group.\n\n75\n00:04:26.510 --> 00:04:31.270\nSo if we only have the select statements,\nand we need to run a filter on\n\n76\n00:04:31.270 --> 00:04:37.010\nany one of these particular columns,\nwe would use where to help us out.\n\n77\n00:04:37.010 --> 00:04:42.870\nBut once we add in group by and\nwe now need to filter by those groups.\n\n78\n00:04:42.870 --> 00:04:46.830\nWell the way that we do that is by\nactually having the HAVING clause.\n\n79\n00:04:46.830 --> 00:04:49.940\nI know that that sounds strange,\nbut that's the way it goes, okay.\n\n80\n00:04:49.940 --> 00:04:58.910\nSo here, now if I go ahead and\ntake then count here e, let me see.\n\n81\n00:04:58.910 --> 00:05:03.910\nOops, higher date, let's do that.\n\n82\n00:05:03.910 --> 00:05:08.740\nAnd then, we're going to actually\ndo greater than or equal to one.\n\n83\n00:05:08.740 --> 00:05:10.920\nSo at least one employee\nis what we want to do.\n\n84\n00:05:12.170 --> 00:05:15.940\nAnd now it's actually just telling\nme that I've actually got some\n\n85\n00:05:15.940 --> 00:05:18.410\nerror that I did not take care of here.\n\n86\n00:05:18.410 --> 00:05:22.290\nAll right, so actually having taken\na look at it a little bit closer.\n\n87\n00:05:22.290 --> 00:05:25.790\nAs I continue to run this,\nI realize something else is happening and\n\n88\n00:05:25.790 --> 00:05:29.780\nit's actually telling me right here at\nline six, which is one, two, three, four,\n\n89\n00:05:29.780 --> 00:05:33.270\nfive, six that I'm actually\nmissing something near the e.\n\n90\n00:05:34.280 --> 00:05:37.350\nThat's not exactly a very specific error.\n\n91\n00:05:37.350 --> 00:05:38.741\n>> No.\n\n92\n00:05:38.741 --> 00:05:39.970\n>> But at least it led me to line six.\n\n93\n00:05:39.970 --> 00:05:41.600\nAnd this is something that\nDaniel actually helped me out.\n\n94\n00:05:41.600 --> 00:05:43.730\nAnd this is something that\nwill help you out as well.\n\n95\n00:05:43.730 --> 00:05:49.080\nWhen you run into an error like this, it\ncan be the smallest of possibilities here.\n\n96\n00:05:49.080 --> 00:05:54.010\nAnd what I actually missed is I forgot\nthat when I'm actually doing the select,\n\n97\n00:05:54.010 --> 00:05:56.320\nwhat normally has to happen\nafter this JobTitle,\n\n98\n00:05:56.320 --> 00:05:58.330\neven though these are commented out,\nright?\n\n99\n00:05:58.330 --> 00:06:03.410\nSo if I take out this, and\nI take this out here, like that?\n\n100\n00:06:03.410 --> 00:06:05.940\nWell, I'm actually saying I\nneed two elements, right,\n\n101\n00:06:05.940 --> 00:06:09.260\nwhich is job title as well\nas a count of hire date.\n\n102\n00:06:09.260 --> 00:06:11.500\nBut what I'm missing is\nessentially commas, so\n\n103\n00:06:11.500 --> 00:06:16.620\nlet me put those back before I do\nsomething I don't want to do instead.\n\n104\n00:06:16.620 --> 00:06:20.400\nSo I just need to add a comma right here.\n\n105\n00:06:20.400 --> 00:06:23.820\nSo I wanted to keep those in line so\nthat we can pretty much see them.\n\n106\n00:06:23.820 --> 00:06:27.680\nSo now I'm saying choose JobDate comma and\n\n107\n00:06:27.680 --> 00:06:30.460\nthen do the account of\nthe HireDate as well.\n\n108\n00:06:30.460 --> 00:06:33.060\nOkay, so now if I run that and\n\n109\n00:06:33.060 --> 00:06:37.610\nI do an execution well now we can\ntake a look at the results below.\n\n110\n00:06:37.610 --> 00:06:41.170\nSo it was just something as\nsimple as just a simple comma but\n\n111\n00:06:41.170 --> 00:06:44.900\nit is something we do need to look for\nperfect syntax is the only thing that\n\n112\n00:06:44.900 --> 00:06:47.950\nessentially T-SQL is\ngoing to actually except.\n\n113\n00:06:47.950 --> 00:06:49.250\nSo we've gotta make sure of that.\n\n114\n00:06:49.250 --> 00:06:51.790\nNow when we take a look\nat the result right.\n\n115\n00:06:51.790 --> 00:06:54.790\nThis is a little bit\nlarger set of data but\n\n116\n00:06:54.790 --> 00:06:58.960\nit is still our data that we're looking\nfor and it is now in a relation.\n\n117\n00:06:58.960 --> 00:07:03.206\nNow this is actually reporting to\nus some non relational elements.\n\n118\n00:07:03.206 --> 00:07:07.685\nAnd what I mean by this is that when we\ntake a look at this result if I were to\n\n119\n00:07:07.685 --> 00:07:12.616\nprint this out and hand this over to\nDaniel, Daniel understands what job title\n\n120\n00:07:12.616 --> 00:07:15.976\nmeans, but over here Daniel,\nin the second column,\n\n121\n00:07:15.976 --> 00:07:20.637\nlet's see if I can zoom in there,\nit actually says no column name, okay.\n\n122\n00:07:20.637 --> 00:07:24.935\nWell that means that this second column\nDaniel, what could it actually represent?\n\n123\n00:07:24.935 --> 00:07:26.370\n>> I have no idea, it could be anything.\n\n124\n00:07:26.370 --> 00:07:30.400\n>> Yeah, it could be anything, and\nthat's where the problem actually resides.\n\n125\n00:07:30.400 --> 00:07:34.910\nIn relational data right, in\nthe relational database and in querying,\n\n126\n00:07:34.910 --> 00:07:40.130\nthe whole goal is ensure that we\nhave unambiguous data as well.\n\n127\n00:07:40.130 --> 00:07:44.030\nIn other words something like this,\nit shouldn't happen, okay?\n\n128\n00:07:44.030 --> 00:07:49.940\nNow, T-SQL says, you know,\nthat's the way that you typed it Ronnie.\n\n129\n00:07:49.940 --> 00:07:52.350\nAnd guess what,\nthat's the way I'm going to return it.\n\n130\n00:07:52.350 --> 00:07:56.201\nSo T-SQL in the dialect of SQL that it\ndoes says, hey I'm okay with it if Ronnie.\n\n131\n00:07:56.201 --> 00:07:57.234\n>> Yeah, because you know what you want.\n\n132\n00:07:57.234 --> 00:07:59.996\n>> That's right,\nyou know exactly what you want, and so\n\n133\n00:07:59.996 --> 00:08:02.410\nnobody should actually\nhave to worry about it.\n\n134\n00:08:02.410 --> 00:08:04.870\nSo Ronnie, as long as you\nactually know what you want,\n\n135\n00:08:04.870 --> 00:08:06.965\nit doesn't matter if there's a title or\nnot.\n\n136\n00:08:06.965 --> 00:08:11.871\nBut in real SQL accordingly,\n\n137\n00:08:11.871 --> 00:08:15.604\nwe should not do this.\n\n138\n00:08:15.604 --> 00:08:19.945\nSo by doing this here,\nnow notice that I have accountants.\n\n139\n00:08:19.945 --> 00:08:23.450\nAnd you can see, because we were\ntalking about it a little bit earlier,\n\n140\n00:08:23.450 --> 00:08:28.027\nthere's at least two accountants that were\nactually hired after January 1st of 2009.\n\n141\n00:08:28.027 --> 00:08:30.764\nNow if I change this number,\nlet's say 2005,\n\n142\n00:08:30.764 --> 00:08:35.040\nI know I didn't have anything earlier\nthan that and I run the execution.\n\n143\n00:08:35.040 --> 00:08:39.910\nWell that actually turned out to\nbe 67 rows of data that I have and\n\n144\n00:08:39.910 --> 00:08:41.240\nif I change that back to 2009.\n\n145\n00:08:41.240 --> 00:08:43.474\nLet me check this out and verify.\n\n146\n00:08:43.474 --> 00:08:45.633\nYeah, that's 54 rows.\n\n147\n00:08:45.633 --> 00:08:50.602\nSo when I actually change just that date,\nthere's 54.\n\n148\n00:08:50.602 --> 00:08:57.130\nBut now, if I change that back to 2005 and\nexecute, now there's 67 rows.\n\n149\n00:08:57.130 --> 00:09:00.360\nSo you can see that down here\nin the lower right hand corner\n\n150\n00:09:00.360 --> 00:09:02.670\nof the screen when we take a look at that.\n\n151\n00:09:02.670 --> 00:09:07.427\nSo here's everything, and if I scroll on\ndown through this information you can\n\n152\n00:09:07.427 --> 00:09:09.351\nsee at one point here, Buyers.\n\n153\n00:09:09.351 --> 00:09:14.225\nThere are nine buyers that's actually\nbeen listed through time and\n\n154\n00:09:14.225 --> 00:09:17.742\nthen we get down here into\nthe production stuff.\n\n155\n00:09:17.742 --> 00:09:22.699\nAnd you can now see where\nthe technicians WC10 17,\n\n156\n00:09:22.699 --> 00:09:25.624\nWC20 22, 30 you name it.\n\n157\n00:09:25.624 --> 00:09:28.360\nThere's a lot of them\nas we go on through and\n\n158\n00:09:28.360 --> 00:09:33.380\nthis actually being able to count all\nthat information up for us by doing that.\n\n159\n00:09:33.380 --> 00:09:40.490\nSo the HAVING clause is how we actually\nfilter by that idea of using groups.\n\n160\n00:09:40.490 --> 00:09:46.270\nNow, notice that I also typed in COUNT\ndifferently in both instances here too.\n\n161\n00:09:46.270 --> 00:09:48.990\nSo it doesn't take into\nthe idea of case sensitivity.\n\n162\n00:09:48.990 --> 00:09:52.480\nNow you might be saying,\nshould I keep it one way or the other?\n\n163\n00:09:52.480 --> 00:09:55.210\nYes, because it's actually\nabout readability.\n\n164\n00:09:55.210 --> 00:09:57.690\nWhen we type things out in all caps,\n\n165\n00:09:57.690 --> 00:10:02.082\nwe understand what we're normally\nusing there are key words.\n\n166\n00:10:02.082 --> 00:10:05.379\nThat it's not actually a part of\nthe data that I'm looking for.\n\n167\n00:10:05.379 --> 00:10:10.196\nBut you can actually type it in however\nyou want to, its all up to you as well.\n\n168\n00:10:10.196 --> 00:10:14.208\nNow, the other thing, let's say that I\nwanted to make sure that what I wanted\n\n169\n00:10:14.208 --> 00:10:18.366\nto find out is, I only want to see the\npositions I have more than let's say, 5.\n\n170\n00:10:18.366 --> 00:10:23.371\n5, different people that\nare actually on the higher date.\n\n171\n00:10:23.371 --> 00:10:26.984\nSo let me go ahead and click on Execute.\n\n172\n00:10:26.984 --> 00:10:31.095\nAnd now that actually leaves\nme with 10 separate rows.\n\n173\n00:10:31.095 --> 00:10:35.135\nSo notice that I can now filter by those\ngroups which is of course of the job\n\n174\n00:10:35.135 --> 00:10:36.465\ntitle itself.\n\n175\n00:10:36.465 --> 00:10:40.135\nSo helping us to do that\nis really kind of a key.\n\n176\n00:10:40.135 --> 00:10:44.955\nNow, because we wanna keep our data\nrelational in the way that we need to.\n\n177\n00:10:44.955 --> 00:10:48.931\nWe now also need to take a look\nhere at the idea of an alias for\n\n178\n00:10:48.931 --> 00:10:54.580\nthis column of information right here,\nwhich is the count of the hire date.\n\n179\n00:10:54.580 --> 00:10:56.906\nNow, we could have done\nanything that we wanted to, but\n\n180\n00:10:56.906 --> 00:10:58.449\nthe count actually made sense here.\n\n181\n00:10:58.449 --> 00:11:01.119\nIf I wanted to find out\nthe number of people, it's easy,\n\n182\n00:11:01.119 --> 00:11:02.912\nyou just count up as far as employees.\n\n183\n00:11:02.912 --> 00:11:06.125\nYou count up their number of hire dates\nand that should give you the number of\n\n184\n00:11:06.125 --> 00:11:08.950\nemployees you have at least\nthat's way it should go.\n\n185\n00:11:08.950 --> 00:11:12.640\nBut now we can do the same\nthing we did in the FROM line.\n\n186\n00:11:12.640 --> 00:11:17.244\nI can now type in the word AS.\n\n187\n00:11:17.244 --> 00:11:22.980\nAnd when I do this,\nnow I can give it an alias as well.\n\n188\n00:11:22.980 --> 00:11:26.384\nNow you do not always have to do that,\nI recommend you do that,\n\n189\n00:11:26.384 --> 00:11:28.180\nbut you don't have to.\n\n190\n00:11:28.180 --> 00:11:32.165\nIf you do not put anything intervening,\nthere's one of two things that can happen.\n\n191\n00:11:32.165 --> 00:11:34.968\nIt can happen like what\nhappened to me earlier,\n\n192\n00:11:34.968 --> 00:11:37.630\nit can just give me\na syntax error saying hey,\n\n193\n00:11:37.630 --> 00:11:43.420\nyou forgot a comma by the e somewhere, and\nyou just need to figure out what this is.\n\n194\n00:11:43.420 --> 00:11:46.320\nBut a lot of times if it follows that,\n\n195\n00:11:46.320 --> 00:11:49.270\nI can simply type in\nwhat I want it to report.\n\n196\n00:11:49.270 --> 00:11:55.492\nAnd I wanna actually report,\nand I'm gonna put Number of or\n\n197\n00:11:55.492 --> 00:11:59.611\nnumber, let me do this, yeah Number.\n\n198\n00:11:59.611 --> 00:12:00.935\nWhat did I yeah, \"Number of\".\n\n199\n00:12:00.935 --> 00:12:03.700\nI was trying to make sure that\nI actually did that right here.\n\n200\n00:12:03.700 --> 00:12:08.200\nSo now, what if I don't have that\nkeyword as we see what happens here.\n\n201\n00:12:08.200 --> 00:12:13.837\nNotice that it also changed it here so\nif it follows that keyword.\n\n202\n00:12:13.837 --> 00:12:15.641\nAnd also that field that I want and\n\n203\n00:12:15.641 --> 00:12:18.485\neven though I don't have\nthe key word AS right here.\n\n204\n00:12:18.485 --> 00:12:19.834\nNotice it still took and\n\n205\n00:12:19.834 --> 00:12:24.320\nthat's something that's actually\nkind of unique to trans act SQL.\n\n206\n00:12:24.320 --> 00:12:27.150\nWell remember then when I said that\nwhen you have a chance to actually be\n\n207\n00:12:27.150 --> 00:12:30.550\nable to this whether it's Transact-SQL's\nunique way of doing it or\n\n208\n00:12:30.550 --> 00:12:32.540\nwhether it's SQL's unique way of doing it.\n\n209\n00:12:32.540 --> 00:12:37.499\nOr not SQL's, SQL's standard way of\ndoing it then you should always follow\n\n210\n00:12:37.499 --> 00:12:39.912\nof course SQL standards to help out.\n\n211\n00:12:39.912 --> 00:12:44.790\nBecause this can become a little bit more\nconfusing when you start to read this and\n\n212\n00:12:44.790 --> 00:12:47.527\ngo, I don't know why\nthat number of is here.\n\n213\n00:12:47.527 --> 00:12:49.768\nAnd it's only if you see the result,\n\n214\n00:12:49.768 --> 00:12:55.130\ndo you actually realize that it changed\nthe actual column header is what we see.\n\n215\n00:12:55.130 --> 00:13:00.280\nSo if I now just go ahead and\nput this in it makes it less ambiguous.\n\n216\n00:13:00.280 --> 00:13:05.090\nPeople understand that you're\nusing that now as a alias instead.\n\n217\n00:13:05.090 --> 00:13:07.370\nNow notice that I put it in single quotes.\n\n218\n00:13:07.370 --> 00:13:11.396\nWell, a lot of times depending\non the SQL that you're using,\n\n219\n00:13:11.396 --> 00:13:14.427\nyou may see the idea of\ndouble quotes here too.\n\n220\n00:13:14.427 --> 00:13:17.769\nBut notice how mine didn't change color,\nso let's see what happens when I run that.\n\n221\n00:13:17.769 --> 00:13:20.127\nIt still takes it, so why?\n\n222\n00:13:20.127 --> 00:13:24.070\nBecause the SQL standard says look,\nyou can do it that way too.\n\n223\n00:13:24.070 --> 00:13:27.570\nBut this one here,\nI like using the way that Transact-SQL is\n\n224\n00:13:27.570 --> 00:13:31.910\nbecause it actually changes colors and\nthat's me but you can do either one.\n\n225\n00:13:31.910 --> 00:13:34.680\nSo if you actually take a look\nat whatever the standard is,\n\n226\n00:13:34.680 --> 00:13:36.170\nmake sure you tend to follow that.\n\n227\n00:13:36.170 --> 00:13:39.030\nThat's pretty much the key, but\nhere it actually makes it look nice and\n\n228\n00:13:39.030 --> 00:13:40.250\nbright on the screen.\n\n229\n00:13:40.250 --> 00:13:44.110\nSo I like using Transact-SQL's way\nof actually identifying it and\n\n230\n00:13:44.110 --> 00:13:48.480\nyou'll see that these will be different\nalso depending on data type too.\n\n231\n00:13:48.480 --> 00:13:52.910\nSo whereas this works here with the data\ntype you may actually see that if you\n\n232\n00:13:52.910 --> 00:13:56.620\ngo to some type of Unicode, for\nsome reason or another you want it to show\n\n233\n00:13:56.620 --> 00:14:00.000\nUnicode characters you'll not\nbe able to use this at all.\n\n234\n00:14:00.000 --> 00:14:06.360\nThere's actually gonna be what they'll\ncall a just a capital N and a single\n\n235\n00:14:06.360 --> 00:14:11.590\nquote like that instead, and whatever\nfollows that will also be considered.\n\n236\n00:14:11.590 --> 00:14:15.430\nYou want it to actually display exactly,\nliterally in that way as well.\n\n237\n00:14:15.430 --> 00:14:16.920\nSo there's a couple of different ones.\n\n238\n00:14:16.920 --> 00:14:19.570\nWhen we get into data types we'll\ntalk about it a little bit more.\n\n239\n00:14:19.570 --> 00:14:23.552\nBut just so that you're not confused when\nyou end up seeing something like that.\n\n240\n00:14:23.552 --> 00:14:28.259\nEspecially as you go and face the exam,\nthey can show multiple different ways.\n\n241\n00:14:28.259 --> 00:14:30.608\nRemember you're looking for the best way,\n\n242\n00:14:30.608 --> 00:14:34.681\nbest way means more standard than the\nactually way that SQL have us doing it.\n\n243\n00:14:34.681 --> 00:14:38.490\nSo being able to actually run this and\nunderstanding it.\n\n244\n00:14:38.490 --> 00:14:40.822\nSo the key is,\nwe've actually started very general,\n\n245\n00:14:40.822 --> 00:14:42.964\npulling all the information\nfrom a single table.\n\n246\n00:14:42.964 --> 00:14:46.469\nThen we showed you how to filter\nthat down to what you're looking for\n\n247\n00:14:46.469 --> 00:14:48.310\nusing the WHERE clause.\n\n248\n00:14:48.310 --> 00:14:52.940\nThen we said hey, let's group these things\ntogether by using the GROUP BY clause.\n\n249\n00:14:52.940 --> 00:14:55.890\nAnd then if you wanna\nfilter again by the groups,\n\n250\n00:14:55.890 --> 00:14:59.050\nremember you actually have halving\nthat will also help you out.\n\n251\n00:14:59.050 --> 00:15:03.140\nSo now we've actually gone through\npretty much the majority here.\n\n252\n00:15:03.140 --> 00:15:06.030\nAnd there's still a couple of\nthings that we need to do.\n\n253\n00:15:06.030 --> 00:15:09.570\nOne more, and we're kind of finished\nwith the basics here of this, and\n\n254\n00:15:09.570 --> 00:15:11.820\nwe've got a couple of other\nthings that we wanna show you.\n\n255\n00:15:11.820 --> 00:15:15.940\nBut notice that down here on my results,\n\n256\n00:15:15.940 --> 00:15:19.540\nit's not actually listed\nin any particular order.\n\n257\n00:15:19.540 --> 00:15:23.480\nAnd that is because it's actually normally\nlisted when you end up seeing the results\n\n258\n00:15:23.480 --> 00:15:24.170\nof your data.\n\n259\n00:15:25.850 --> 00:15:30.432\nListed in the way that it was entered in\nthe database, what we call the natural\n\n260\n00:15:30.432 --> 00:15:34.663\norder of the way that the data actually\nresides in the database itself,\n\n261\n00:15:34.663 --> 00:15:37.082\nbut you can change this if you choose to.\n\n262\n00:15:37.082 --> 00:15:41.740\nIn other words you can actually\nbe deterministic about it.\n\n263\n00:15:41.740 --> 00:15:45.000\nThat's a cool SQL term that\nthey want you to understand.\n\n264\n00:15:45.000 --> 00:15:47.280\nWhen you actually need\nit to be determined,\n\n265\n00:15:47.280 --> 00:15:52.370\nthere's only two ways that we can order\nour data in deterministic fashion,\n\n266\n00:15:52.370 --> 00:15:56.100\nand that's the idea of ascending or\ndescending.\n\n267\n00:15:56.100 --> 00:16:00.965\nSo we can either list it especially, let's\nsay, by job title here a to z or z to a.\n\n268\n00:16:00.965 --> 00:16:03.605\nNow, let me get rid of this and\ngo back to a 1 instead, and\n\n269\n00:16:03.605 --> 00:16:06.304\nthat will give us a larger mess\nof data to mess around with.\n\n270\n00:16:06.304 --> 00:16:12.106\nSo here, this one actually looks like it\nis actually in ascending order, okay.\n\n271\n00:16:12.106 --> 00:16:15.650\nSo as I take a look at it,\nit looks like A to V, that looks good.\n\n272\n00:16:15.650 --> 00:16:20.165\nBut if I wanted to change\nthat to descending order,\n\n273\n00:16:20.165 --> 00:16:26.679\nI simply now type in order by, and then,\nI can also claim by the job title.\n\n274\n00:16:29.544 --> 00:16:33.560\nAnd then ascending or descending, okay.\n\n275\n00:16:33.560 --> 00:16:36.180\nSo ascending is not by\ntyping in ascending,\n\n276\n00:16:36.180 --> 00:16:40.180\nbut ASC, okay, that's for ascending.\n\n277\n00:16:40.180 --> 00:16:44.820\nAnd descending is just DESC,\nI'm gonna say that wrong, I can tell.\n\n278\n00:16:46.060 --> 00:16:46.980\nAnd then I run the execute.\n\n279\n00:16:46.980 --> 00:16:51.000\nOops, let me tell, okay,\nwell, maybe I'm lying to you.\n\n280\n00:16:51.000 --> 00:16:55.220\nOrder by, under the key word order.\n\n281\n00:16:55.220 --> 00:16:56.400\nI see.\n\n282\n00:16:56.400 --> 00:16:58.850\nThere is that last little thing there.\n\n283\n00:16:58.850 --> 00:17:00.500\nThat semicolon there at the end.\n\n284\n00:17:00.500 --> 00:17:02.097\n>> It's the little things that get you,\nRonnie, every time.\n\n285\n00:17:02.097 --> 00:17:03.894\n[LAUGH]\n>> Yeah, I'll tell you the truth.\n\n286\n00:17:03.894 --> 00:17:08.140\nRemember that that semicolon pretty much\nsays, end of statement, that's my batch.\n\n287\n00:17:08.140 --> 00:17:09.520\nAnd so what I was saying is,\n\n288\n00:17:09.520 --> 00:17:11.750\nrun an order by without anything\nelse actually saying that.\n\n289\n00:17:11.750 --> 00:17:13.410\nThat's not going to work for us.\n\n290\n00:17:13.410 --> 00:17:16.860\nBut by simply moving that\nlittle semicolon is what I had.\n\n291\n00:17:16.860 --> 00:17:19.120\nAnd I forgot that she moved it down here.\n\n292\n00:17:19.120 --> 00:17:21.900\nSo notice that it's actually saying,\nrun this whole thing as a batch.\n\n293\n00:17:21.900 --> 00:17:23.500\nAnd now, when you take a look.\n\n294\n00:17:23.500 --> 00:17:26.190\nNotice that, in position number one.\n\n295\n00:17:26.190 --> 00:17:29.470\nInstead is actually vice\npresident of sales.\n\n296\n00:17:29.470 --> 00:17:34.640\nAnd then it goes down on through,\nas we actually go descending\n\n297\n00:17:34.640 --> 00:17:38.760\nall the way through to, well,\nthe accountant down here at the bottom.\n\n298\n00:17:38.760 --> 00:17:42.660\nSo, being able to actually understand\nat least a few of these, right, and\n\n299\n00:17:42.660 --> 00:17:47.530\nwhen you do this, this is kind of\nthe basics of the fundamentals of\n\n300\n00:17:47.530 --> 00:17:52.230\nquerying as far as just coming to\nthe use of a SELECT statement, right.\n\n301\n00:17:52.230 --> 00:17:57.000\nWe've gone through select,\nfrom, where, group by,\n\n302\n00:17:57.000 --> 00:18:01.290\nhaving, order, and then at the end here\nI have a go, but that's just saying,\n\n303\n00:18:01.290 --> 00:18:05.570\nrun the entire batch as it needs to,\nin the way that needs to as well, okay.\n\n304\n00:18:05.570 --> 00:18:10.690\nSo being able to do something just as\nsimple really is going to be helpful for\n\n305\n00:18:10.690 --> 00:18:14.800\nus as we run on through\nsomething like this as well.\n\n306\n00:18:14.800 --> 00:18:17.820\n>> It's really all about formatting\nthe data in the way that's gonna be\n\n307\n00:18:17.820 --> 00:18:22.325\nmost helpful for yourself, so learning on\nthis little ways in which you can do that\n\n308\n00:18:22.325 --> 00:18:25.150\nis basically adding\nfunctionality into yourself.\n\n309\n00:18:25.150 --> 00:18:27.773\nTo say okay I need this data,\nbut I need to be able to read,\n\n310\n00:18:27.773 --> 00:18:29.700\nI need to be able to work with it.\n\n311\n00:18:29.700 --> 00:18:32.340\nSo just doing a simple\nselect give me everything.\n\n312\n00:18:32.340 --> 00:18:34.801\nThis is basically drinking\nfrom a fire hose, right.\n\n313\n00:18:34.801 --> 00:18:37.158\n>> [LAUGH]\n>> What we wanna do is we wanna pair that\n\n314\n00:18:37.158 --> 00:18:41.533\ndown, we wanna make it something that's\nmanageable and in an order that makes\n\n315\n00:18:41.533 --> 00:18:46.130\nsense to the people that are actually\ntaking in this information, right Ronnie?\n\n316\n00:18:46.130 --> 00:18:47.380\n>> It really is right.\n\n317\n00:18:47.380 --> 00:18:50.340\nBeing able to pull out the information\nexactly the way you need to,\n\n318\n00:18:50.340 --> 00:18:52.520\nthat is the key behind SQL.\n\n319\n00:18:52.520 --> 00:18:56.020\nThere is no doubt that we can pull in\neverything, no doubt that we can do that,\n\n320\n00:18:56.020 --> 00:19:00.370\nbut everything normally is again too much\nPulling out the right information and\n\n321\n00:19:00.370 --> 00:19:05.250\nunderstanding the idea, the logic\nbehind it is also the key here too.\n\n322\n00:19:05.250 --> 00:19:08.040\nAnd making sure that we get\naccess to what we need to.\n\n323\n00:19:08.040 --> 00:19:11.970\nNow the other thing that also makes\nthis particular table even though\n\n324\n00:19:11.970 --> 00:19:14.830\nwhat we at the beginning we were\ntalking about the idea the column.\n\n325\n00:19:14.830 --> 00:19:19.060\nAnd we've got actually just a couple\nmore topics here is a couple of things.\n\n326\n00:19:19.060 --> 00:19:21.110\nLet's go back to actually\nseeing the results here and\n\n327\n00:19:21.110 --> 00:19:23.470\nseeing what's happened from this point,\nokay.\n\n328\n00:19:23.470 --> 00:19:26.490\nSo remember that we were looking at this\nand one of the earliest elements that we\n\n329\n00:19:26.490 --> 00:19:31.295\nhad that showed the idea of non relational\ndata, that I'm trying to get this thing to\n\n330\n00:19:31.295 --> 00:19:35.115\nexpand here and I couldn't remember\nwhere it was, was that number of, right?\n\n331\n00:19:35.115 --> 00:19:36.505\nSo now I have an alias, and\n\n332\n00:19:36.505 --> 00:19:39.775\nnow you can actually see the number\nof vice presidents of sales.\n\n333\n00:19:39.775 --> 00:19:40.935\nYou notice that there's one.\n\n334\n00:19:40.935 --> 00:19:44.265\nAnd then sales representatives,\nthere's 14 of them, okay.\n\n335\n00:19:44.265 --> 00:19:46.535\nWell, at some point here, okay.\n\n336\n00:19:46.535 --> 00:19:51.590\nWhen we take a look at the information\nthat we get, we may find out that inside\n\n337\n00:19:51.590 --> 00:19:57.260\nof our database itself, that we can\nend up with some duplicates, okay.\n\n338\n00:19:57.260 --> 00:20:03.420\nNow, in relational database, as far as SQL\ngoes, the whole goal behind it, of course,\n\n339\n00:20:03.420 --> 00:20:09.130\nis that when it returns to you a result\nset, okay, the idea, the relation,\n\n340\n00:20:09.130 --> 00:20:15.600\nevery single row of data should also\nbe 100% unique in that return, okay.\n\n341\n00:20:15.600 --> 00:20:21.620\nSo that if you have duplicates then\nthat's a no no according to SQL, okay.\n\n342\n00:20:21.620 --> 00:20:26.050\nBut the guy that essentially invented\nthe idea of relational databases,\n\n343\n00:20:26.050 --> 00:20:27.920\nhis names is EF Cod, okay.\n\n344\n00:20:27.920 --> 00:20:31.040\nI kid you not, EF Cod in 1969.\n\n345\n00:20:31.040 --> 00:20:33.290\nThis guy started saying look it's,\n\n346\n00:20:33.290 --> 00:20:37.970\nwe understand the theory of returning\nunique and individual rows of data.\n\n347\n00:20:37.970 --> 00:20:42.940\nBut the very fact is, when you're actually\nlooking for data in a database you may\n\n348\n00:20:42.940 --> 00:20:48.090\nfind out some information here which is\nthere are some things that are duplicates.\n\n349\n00:20:48.090 --> 00:20:49.570\nLet's take for an example, Daniel and\n\n350\n00:20:49.570 --> 00:20:52.510\nI may have been hired on\nthe exact same day, okay.\n\n351\n00:20:52.510 --> 00:20:56.580\nWell that as far as just looking for\nthose for like the higher days right.\n\n352\n00:20:56.580 --> 00:20:57.890\nThat could be duplicated.\n\n353\n00:20:57.890 --> 00:21:00.830\nBut the very fact is each one of us might\nhave different record because we're\n\n354\n00:21:00.830 --> 00:21:02.520\ndifferent people inside of our database.\n\n355\n00:21:02.520 --> 00:21:03.420\nAnd we add that up.\n\n356\n00:21:03.420 --> 00:21:07.315\nAnd so that makes it unique, but there’s\nsome elements where you may find out that\n\n357\n00:21:07.315 --> 00:21:11.055\nit is exactly identical because they\nwere entered in a little bit unusual.\n\n358\n00:21:11.055 --> 00:21:12.703\nAnd there’s still valid records there.\n\n359\n00:21:12.703 --> 00:21:17.795\nBut sometimes EF Cod said you’re looking\nfor duplicates on purpose, okay.\n\n360\n00:21:17.795 --> 00:21:19.705\nSo in the way that the data\njust got entered in,\n\n361\n00:21:19.705 --> 00:21:21.655\nyou want to make sure you\nactually see all of it.\n\n362\n00:21:21.655 --> 00:21:24.230\nIf it's duplicated,\nyou wanna make sure it's duplicated.\n\n363\n00:21:24.230 --> 00:21:27.210\nThe problem that we also have\nis that we may have data that\n\n364\n00:21:27.210 --> 00:21:30.400\nwe don't know why the data\nis actually where it is.\n\n365\n00:21:30.400 --> 00:21:34.660\nWe come up with what we call unknowns and\nwe call them nulls as well.\n\n366\n00:21:34.660 --> 00:21:39.020\nSo there has to be a way that we\ncan actually return everything or\n\n367\n00:21:39.020 --> 00:21:42.680\nreturn exactly the distinct\ndata that we need to.\n\n368\n00:21:42.680 --> 00:21:45.650\nOr return nothing at all if\nwe don't need to, as well.\n\n369\n00:21:45.650 --> 00:21:50.900\nSo EF Cod actually said that and so in SQL\nthey had ways to help us develop that.\n\n370\n00:21:50.900 --> 00:21:54.880\nSo one of the things, because transact\nSQL says, Ronnie you asked for\n\n371\n00:21:54.880 --> 00:21:59.690\neverything, duplicates or not,\nI'm returning everything to you, okay.\n\n372\n00:21:59.690 --> 00:22:00.920\nSo we can do that.\n\n373\n00:22:00.920 --> 00:22:05.400\nThe key is, if you need to actually\nverify that this distinct rows of data,\n\n374\n00:22:05.400 --> 00:22:06.350\nyou can dot hat as well.\n\n375\n00:22:06.350 --> 00:22:09.140\nSo let's go ahead and\nshow you this one, okay.\n\n376\n00:22:09.140 --> 00:22:11.480\nWith the idea of distinct sets of data,\nokay.\n\n377\n00:22:11.480 --> 00:22:16.377\nNow this is not gonna work very well on\nthis particular query because all of these\n\n378\n00:22:16.377 --> 00:22:18.716\nare actually fairly distinct here but\n\n379\n00:22:18.716 --> 00:22:22.901\nthe only thing that we need to do\nis add in distinct, oops distinct.\n\n380\n00:22:22.901 --> 00:22:26.531\nHere if I can spell it and\nnow I'm telling it look for\n\n381\n00:22:26.531 --> 00:22:31.358\na distinct job title and\nall of the other information here instead.\n\n382\n00:22:31.358 --> 00:22:36.478\nWell currently I have 67 rows of data and\nnow if I run the execution\n\n383\n00:22:36.478 --> 00:22:41.430\nit tells me that the command\ndid run successfully, okay.\n\n384\n00:22:41.430 --> 00:22:44.950\nBut it actually returned\nto me zero rows of data.\n\n385\n00:22:44.950 --> 00:22:47.310\nSo that's a little bit more\nunusual when you see that.\n\n386\n00:22:47.310 --> 00:22:49.780\nAnd then like I said,\nit's not gonna actually be very easy\n\n387\n00:22:49.780 --> 00:22:51.565\nbecause of all the stuff\nthat I've already done here.\n\n388\n00:22:51.565 --> 00:22:53.530\nDistinct doesn't really work with this.\n\n389\n00:22:53.530 --> 00:22:58.100\nBut if you actually realize, I think that\nthere's a lot of duplicates in whatever\n\n390\n00:22:58.100 --> 00:23:00.286\nI'm actually getting returned here,\n\n391\n00:23:00.286 --> 00:23:04.131\nyou can always add in this distinct\nclause for you and that will ensure\n\n392\n00:23:04.131 --> 00:23:08.794\nthat you only show those distinct rows of\ndata as we come across this as well, okay.\n\n393\n00:23:08.794 --> 00:23:12.849\nSo that's why you actually want to make\nsure that you do pay attention when you're\n\n394\n00:23:12.849 --> 00:23:16.497\nlooking for distinct elements verifying\nthat you're only getting those\n\n395\n00:23:16.497 --> 00:23:19.235\ndistinct records,\nmake sure you add in that key word.\n\n396\n00:23:19.235 --> 00:23:20.805\nSo it's not very difficult.\n\n397\n00:23:20.805 --> 00:23:24.725\nYou see it's just a simple addition\nof another keyword for us, okay.\n\n398\n00:23:24.725 --> 00:23:28.045\nOur last element that we wanna take\na look at in this particular episode\n\n399\n00:23:28.045 --> 00:23:31.810\nis something we're gonna jump\ninto much more in depth later on.\n\n400\n00:23:31.810 --> 00:23:35.870\nBut sometimes there's actually\ncases that we end up running into\n\n401\n00:23:35.870 --> 00:23:37.350\nthat we need to pay attention to.\n\n402\n00:23:37.350 --> 00:23:38.680\nSo here it is.\n\n403\n00:23:38.680 --> 00:23:42.880\nOn my, I went ahead and\nswitched on over to another query for us.\n\n404\n00:23:42.880 --> 00:23:46.130\nAnd it's what we call using\nsomething called case here, okay.\n\n405\n00:23:46.130 --> 00:23:49.590\nSo for right now let's say that\nwhat I want to do is run a query\n\n406\n00:23:49.590 --> 00:23:52.920\nthat actually returns products and\nthe category name.\n\n407\n00:23:52.920 --> 00:23:55.960\nSo I'm gonna go ahead and\nexecute that right now.\n\n408\n00:23:55.960 --> 00:23:59.925\nSo you'll see it's a simple select\nstatement that has three particular\n\n409\n00:23:59.925 --> 00:24:02.139\ncolumns for us from the products table.\n\n410\n00:24:02.139 --> 00:24:07.520\nAnd notice that I actually added in\nan alias for us to be able to use as well.\n\n411\n00:24:07.520 --> 00:24:11.794\nAnd when I take a look at\nthe identifying columns down here,\n\n412\n00:24:11.794 --> 00:24:16.339\nit's actually showing me the ProductID and\nthe ProductName.\n\n413\n00:24:16.339 --> 00:24:20.536\nAnd then the category and\nthere's a lot of no values in here, but\n\n414\n00:24:20.536 --> 00:24:25.511\nif I scroll one down far enough, you\nactually see that it has a categoryID for\n\n415\n00:24:25.511 --> 00:24:27.950\nme, but not a name that helps us out.\n\n416\n00:24:29.440 --> 00:24:32.990\nSo let's say, that this is what really\ndoes exist in our database here,\n\n417\n00:24:32.990 --> 00:24:34.170\nis that at some point.\n\n418\n00:24:34.170 --> 00:24:36.430\nLet's say, early on in\nthe development of the database,\n\n419\n00:24:36.430 --> 00:24:39.120\nwe really didn't have a category,\nwe really only sold one product.\n\n420\n00:24:39.120 --> 00:24:41.742\nAn then all of a sudden it started\ngrowing, we started selling more and\n\n421\n00:24:41.742 --> 00:24:43.110\nmore products.\n\n422\n00:24:43.110 --> 00:24:45.774\nAnd then we didn't realize that\ncategories were important, so\n\n423\n00:24:45.774 --> 00:24:49.196\nwe started actually getting categories,\nbut we assigned a number to a category.\n\n424\n00:24:49.196 --> 00:24:52.410\nThis one's first,\nthis one's second, third.\n\n425\n00:24:52.410 --> 00:24:54.920\nAnd then now here it is,\nnow somebody saying,\n\n426\n00:24:54.920 --> 00:24:58.420\nwell what categories of\nproducts do you have?\n\n427\n00:24:58.420 --> 00:25:02.890\nWell, if I only have the idea of\na category that's actually linked to\n\n428\n00:25:02.890 --> 00:25:08.200\na number what I want to do is I wanna\nreturn a name value for that instead.\n\n429\n00:25:08.200 --> 00:25:11.823\nBut the problem that we have is\nas I scroll down through here,\n\n430\n00:25:11.823 --> 00:25:14.676\nit actually looks like\nthere's a number 31.\n\n431\n00:25:14.676 --> 00:25:19.520\nSo I need to come up with 31 distinctive\nnames, if that's what I'm looking for.\n\n432\n00:25:19.520 --> 00:25:20.792\nWell, probably.\n\n433\n00:25:20.792 --> 00:25:23.820\nSo we're actually gonna simplify\nthat a little bit more.\n\n434\n00:25:23.820 --> 00:25:26.890\nAnd the way that we can do that is by\nusing what we call a CASE statement to\n\n435\n00:25:26.890 --> 00:25:28.760\nhelp us out.\n\n436\n00:25:28.760 --> 00:25:31.510\nSo let me show you my\nCASE statement instead.\n\n437\n00:25:33.530 --> 00:25:37.260\nSo what we're gonna do is we're gonna take\nCategory, that value, that whatever digit\n\n438\n00:25:37.260 --> 00:25:41.510\nvalue that we have, and\nreport a meaningful value for it instead.\n\n439\n00:25:41.510 --> 00:25:42.959\nNotice that the first\nhalf of the sequence.\n\n440\n00:25:42.959 --> 00:25:45.160\nOops, didn't mean to do that.\n\n441\n00:25:45.160 --> 00:25:49.370\nNotice the first part of this statement\nhere as far as this lot goes.\n\n442\n00:25:49.370 --> 00:25:53.410\nThis all looks normal,\nwe're selecting a column and\n\n443\n00:25:53.410 --> 00:25:55.900\nwe're actually giving it alias here.\n\n444\n00:25:55.900 --> 00:26:00.860\nWe actually have a from, so\nthe majority of this is normal.\n\n445\n00:26:00.860 --> 00:26:03.750\nJust like what you and\nI would actually use.\n\n446\n00:26:03.750 --> 00:26:09.710\nThe CASE value though, we're actually\nadding that in as a different value.\n\n447\n00:26:09.710 --> 00:26:12.420\nSo it's just another column,\nis what we're actually saying.\n\n448\n00:26:12.420 --> 00:26:14.700\nNow, what we're actually\npresenting though,\n\n449\n00:26:14.700 --> 00:26:17.264\nis a CASE that's actually gonna begin and\nEND as well.\n\n450\n00:26:17.264 --> 00:26:20.369\nNotice that there's CASE,\nand then there's an END and\n\n451\n00:26:20.369 --> 00:26:23.490\nthen we're telling to report\nit as CategoryName here.\n\n452\n00:26:23.490 --> 00:26:27.580\nAnd let me change that\nCategoryName like that.\n\n453\n00:26:27.580 --> 00:26:28.966\nSo what am I saying?\n\n454\n00:26:28.966 --> 00:26:33.345\nI'm saying that as we go through this\nmake sure we report the ProductName,\n\n455\n00:26:33.345 --> 00:26:35.918\nmake sure we report the Category.\n\n456\n00:26:35.918 --> 00:26:38.070\nIn this CategoryName here, and\n\n457\n00:26:38.070 --> 00:26:40.820\nthen make sure we actually categorize\nwhatever that information says,\n\n458\n00:26:40.820 --> 00:26:44.720\nwhich is 1, 2, 3 or all the way up\nthrough 31, give it a name instead.\n\n459\n00:26:46.220 --> 00:26:50.700\nSo now,\nwe use our if then logic to help us out.\n\n460\n00:26:50.700 --> 00:26:55.820\nSo the CASE that I'm making,\nis in the ProductsubcategoryID,\n\n461\n00:26:55.820 --> 00:27:01.130\nthat when you find a 1, report Mountain.\n\n462\n00:27:01.130 --> 00:27:04.394\nWhen you find a 2, report Road Racing.\n\n463\n00:27:04.394 --> 00:27:08.122\nWhen you find a 3, report Touring instead.\n\n464\n00:27:08.122 --> 00:27:11.543\nAnd then everything else,\njust report it as parts for right now.\n\n465\n00:27:11.543 --> 00:27:15.320\nAnd let's say, we're doing this as a test\njust to see if this is gonna work.\n\n466\n00:27:15.320 --> 00:27:17.838\nLater on we can actually go\non down through there and\n\n467\n00:27:17.838 --> 00:27:20.430\nactually define 1 all the way through 31.\n\n468\n00:27:20.430 --> 00:27:23.360\nAnd as you go ahead and\nidentify every single one them.\n\n469\n00:27:23.360 --> 00:27:27.190\nBut for right now, let's just say that\nwe're doing a test to see if this works.\n\n470\n00:27:27.190 --> 00:27:30.010\nThen everything else is\ngonna be labeled as Parts.\n\n471\n00:27:30.010 --> 00:27:31.770\nAnd we're actually gonna go ahead and\n\n472\n00:27:31.770 --> 00:27:34.465\nmark that as an ending of\nthe entire case that I'm making.\n\n473\n00:27:34.465 --> 00:27:38.111\nAnd we're gonna tell it to report\nit as a CategoryName instead,\n\n474\n00:27:38.111 --> 00:27:40.310\nfrom that single table.\n\n475\n00:27:40.310 --> 00:27:43.167\nSo now, when I run this instead,\n\n476\n00:27:43.167 --> 00:27:47.530\nnotice that categories [INAUDIBLE]\nactually reporting as nulls.\n\n477\n00:27:47.530 --> 00:27:51.660\nIf I execute now, well now notice I\nwanted to leave that category in there so\n\n478\n00:27:51.660 --> 00:27:53.840\nthat we could actually\nsee the difference here.\n\n479\n00:27:53.840 --> 00:27:57.480\nLet me scroll down or zoom on in.\n\n480\n00:27:57.480 --> 00:28:01.210\nWell, now notice we have\na ton of parts here.\n\n481\n00:28:01.210 --> 00:28:04.950\nListed as the NULL values, so each one\nof those are actually different parts so\n\n482\n00:28:04.950 --> 00:28:05.660\nyou can see them.\n\n483\n00:28:06.760 --> 00:28:11.600\nAnd then as I scroll on through,\neven the higher numbers, right up here.\n\n484\n00:28:11.600 --> 00:28:15.830\n14, 31, the only ones I listed were 1,\n2, 3, so now, look at that.\n\n485\n00:28:15.830 --> 00:28:17.857\nAll the ones that actually\nhave a category of two.\n\n486\n00:28:17.857 --> 00:28:18.577\nDo what?\n\n487\n00:28:18.577 --> 00:28:20.934\nReport it as Road Racing.\n\n488\n00:28:20.934 --> 00:28:23.046\nSo now we can actually do that and\n\n489\n00:28:23.046 --> 00:28:27.906\nthen as I scroll on through there's\nMountain Bikes, Road Racing again.\n\n490\n00:28:27.906 --> 00:28:31.866\nParts, and down here somewhere there's\nprobably a Touring bike somewhere,\n\n491\n00:28:31.866 --> 00:28:32.530\nthere we go.\n\n492\n00:28:32.530 --> 00:28:34.170\nTouring, Road Racing, so\n\n493\n00:28:34.170 --> 00:28:38.180\nas we go on through we can actually see\nall those different categories now.\n\n494\n00:28:39.200 --> 00:28:42.040\nGiving us a value that actually\ndoes exist in our database, but\n\n495\n00:28:42.040 --> 00:28:46.680\nreporting it as something meaningful to\nsomeone that I might need to hand this to.\n\n496\n00:28:46.680 --> 00:28:51.068\nVery much a handy thing to be able to do\nat the very beginnings with your basic\n\n497\n00:28:51.068 --> 00:28:52.192\nquerying as well.\n\n498\n00:28:52.192 --> 00:28:54.825\nSo understanding the select statements and\n\n499\n00:28:54.825 --> 00:28:58.390\ngetting through that whole idea\nof using each one is right.\n\n500\n00:28:58.390 --> 00:29:06.180\nSelect, from, where, group by, having,\nand then even order by at the end.\n\n501\n00:29:06.180 --> 00:29:08.260\nReally those help give\nus the foundation and\n\n502\n00:29:08.260 --> 00:29:11.600\nhopefully you have a better\nunderstanding of when to use it and\n\n503\n00:29:11.600 --> 00:29:14.950\nhow to use it, as well as this\nidea of adding in a simple case,\n\n504\n00:29:14.950 --> 00:29:18.900\nwhich we're gonna see much, we're\ngonna see it again, I guarantee that.\n\n505\n00:29:18.900 --> 00:29:20.652\nWe'll see it again in our series here.\n\n506\n00:29:20.652 --> 00:29:24.350\nBut being able to do stuff like that is\nreally helpful at the very beginning.\n\n507\n00:29:24.350 --> 00:29:28.630\nCuz laying the foundation here\nthe rest of the course is actually\n\n508\n00:29:28.630 --> 00:29:31.760\ngonna be built off of understanding\nthis stuff right here.\n\n509\n00:29:31.760 --> 00:29:35.215\nSo if you have a great solid understand\nhere, the rest of the course, for\n\n510\n00:29:35.215 --> 00:29:38.405\nmost of us is gonna be fairly I'm\nnot gonna say, it's super easy.\n\n511\n00:29:38.405 --> 00:29:39.026\n>> [LAUGH]\n>> But\n\n512\n00:29:39.026 --> 00:29:42.763\nit's at least going to be meaningful and\nit actually would be something that you\n\n513\n00:29:42.763 --> 00:29:45.686\ngo, I know how he got to that point,\nis what's gonna happen.\n\n514\n00:29:45.686 --> 00:29:48.848\nNot Ronnie did some sort of\nmagic typing voodoo there,\n\n515\n00:29:48.848 --> 00:29:53.190\nI didn't it's all based off of this\nfundamental understanding right here.\n\n516\n00:29:53.190 --> 00:29:55.058\n>> Ronnie, we all know it was magic typing\n\n517\n00:29:55.058 --> 00:29:55.898\nvoodoo-\n>> [LAUGH]\n\n518\n00:29:55.898 --> 00:29:57.293\n>> There is no logic into this program,\n\n519\n00:29:57.293 --> 00:29:59.379\nRonnie throws chicken bones and ash at it-\n>> Yeah.\n\n520\n00:29:59.379 --> 00:30:01.685\n>> And that's how it all works.\n\n521\n00:30:01.685 --> 00:30:04.772\nIt's got a lot of functionality and\nnow you're starting to see.\n\n522\n00:30:04.772 --> 00:30:08.642\nWe've been saying, we're only scratching\nthe surface of what it can do and\n\n523\n00:30:08.642 --> 00:30:11.480\nyeah, a lot of that is where\nyou kind of hang out at.\n\n524\n00:30:11.480 --> 00:30:14.150\nIt's just return some data for me but\n\n525\n00:30:14.150 --> 00:30:18.060\nas you've seen, built inside\nthere is a more powerful engine.\n\n526\n00:30:18.060 --> 00:30:20.154\nThere is a Ferrari under\nthe hood of this Pinto.\n\n527\n00:30:20.154 --> 00:30:21.059\n>> Yeah.\n[LAUGH]\n\n528\n00:30:21.059 --> 00:30:22.366\n>> And it's starting to be able\n\n529\n00:30:22.366 --> 00:30:24.276\nto make decisions using case functions.\n\n530\n00:30:24.276 --> 00:30:30.310\nThis is things that we see in higher level\nlanguages, scripting and programming.\n\n531\n00:30:30.310 --> 00:30:33.212\nNow we're being able to\nthrow that at it as well.\n\n532\n00:30:33.212 --> 00:30:36.540\nIt's gonna help us make easier,\nwith the decision making.\n\n533\n00:30:36.540 --> 00:30:40.930\nReturn the data that we're looking for\nin a much more efficient fashion.\n\n534\n00:30:40.930 --> 00:30:43.810\nMake things more readable,\nmake things more useable.\n\n535\n00:30:43.810 --> 00:30:45.630\nAnd that's what it's all\nabout at the end of the day.\n\n536\n00:30:45.630 --> 00:30:49.560\nRonnie, as we've seen in SQL has and\nit has some definite more, and\n\n537\n00:30:49.560 --> 00:30:52.730\nmore horsepower that we\nmay have once assumed.\n\n538\n00:30:52.730 --> 00:30:56.640\nSo we do thank you for showing us that and\nit's gonna help us in our\n\n539\n00:30:56.640 --> 00:31:01.320\nsubsequent episodes from here as we\nget in to more advanced functionality.\n\n540\n00:31:01.320 --> 00:31:02.260\nRonnie, I'm looking at the clock.\n\n541\n00:31:02.260 --> 00:31:03.090\nWe have done it.\n\n542\n00:31:03.090 --> 00:31:05.770\nWe have actually killed yet\nanother part two.\n\n543\n00:31:05.770 --> 00:31:07.727\nI do appreciate your wisdom and\nyour effort.\n\n544\n00:31:07.727 --> 00:31:09.853\n>> [LAUGH]\n>> Into teaching us laymen here how to\n\n545\n00:31:09.853 --> 00:31:11.152\nwork with these SQL queries.\n\n546\n00:31:11.152 --> 00:31:12.813\nIt's much well needed.\n\n547\n00:31:12.813 --> 00:31:16.200\nAnd we thank you guys for watching,\nbut we're gonna go ahead and sign off.\n\n548\n00:31:16.200 --> 00:31:18.623\nFor ITProTV, I've been your host,\nDaniel Lowrie.\n\n549\n00:31:18.623 --> 00:31:19.469\n>> And I'm Ronnie Wong.\n\n550\n00:31:19.469 --> 00:31:20.201\n>> And we'll see you next time.\n\n551\n00:31:20.201 --> 00:31:29.290\n[MUSIC]\n\n",
          "vimeoId": "164045246"
        },
        {
          "description": "In this episode, Daniel and Ronnie describe how to use the JOINs function to return data from multiple databases. They begin by looking at the traditional way to query data from multiple databases and then how to use the INNER JOIN command to filter that data down. Then they show you the LEFT JOIN and RIGHT JOIN commands to return data sets that have matching values as well as all values from either the right or left tables respectively.",
          "length": "2173",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-2-1-query_using_joins-042016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-2-1-query_using_joins-042016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-2-1-query_using_joins-042016-1-sm.jpg",
          "title": "Query Using JOINS",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.865 --> 00:00:15.841\nAll right greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:15.841 --> 00:00:19.700\nI'm your host Daniel Lowrie, and today's\nepisode we are continuing on with our\n\n4\n00:00:19.700 --> 00:00:23.720\nseries on querying\nthe Microsoft SQL server 2014.\n\n5\n00:00:23.720 --> 00:00:26.510\nAnd joining me back in the studio\nagain today to help us out with that\n\n6\n00:00:26.510 --> 00:00:29.350\nendeavor is our good friend and\nmentor, Mr. Ronnie Wong.\n\n7\n00:00:29.350 --> 00:00:30.281\nRonnie, welcome back to the show.\n\n8\n00:00:30.281 --> 00:00:30.990\nHow's it going?\n\n9\n00:00:30.990 --> 00:00:34.750\n>> It's going very well, as we continue\non to take a look at SQL server 2014,\n\n10\n00:00:34.750 --> 00:00:38.530\nand especially the TSQL,\nor the transact SQL.\n\n11\n00:00:38.530 --> 00:00:43.400\nWe are now moving in beyond the idea\nof basic querying of a single table.\n\n12\n00:00:43.400 --> 00:00:47.310\nNow don't get me wrong, those skills that\nwe learned about in a previous episode on\n\n13\n00:00:47.310 --> 00:00:51.080\nquerying this information from a single\ntable, all that will actually apply\n\n14\n00:00:51.080 --> 00:00:54.860\nthrough every episode that we'll\nbe doing right here for SQL 2014.\n\n15\n00:00:54.860 --> 00:00:58.650\nBut at the same time,\nwe actually have to realize something,\n\n16\n00:00:58.650 --> 00:01:00.260\nthat there's a limitation.\n\n17\n00:01:00.260 --> 00:01:03.390\nAnd that particular\nlimitation is fairly simple.\n\n18\n00:01:03.390 --> 00:01:07.380\nI have one table, and I have the select\nstatements and everything else that I can\n\n19\n00:01:07.380 --> 00:01:11.260\nalso write with it, to help me\nfilter out exactly what I want to.\n\n20\n00:01:11.260 --> 00:01:13.250\nBut the problem is I'm\nlimited to one table.\n\n21\n00:01:13.250 --> 00:01:16.970\nLet me kinda show you a kinda\ngraphic representation\n\n22\n00:01:16.970 --> 00:01:19.870\nof what I mean by that to\nhelp us set this right.\n\n23\n00:01:19.870 --> 00:01:23.120\nSo, here on my screen I tried to make\njust a graphic representation of what I'm\n\n24\n00:01:23.120 --> 00:01:24.210\ntalking about.\n\n25\n00:01:24.210 --> 00:01:26.790\nSo, let's take for example,\ninside of my database\n\n26\n00:01:26.790 --> 00:01:31.510\nI do have a table over here on the left\nhand side called Sales.SalesPerson.\n\n27\n00:01:31.510 --> 00:01:35.500\nAnd we actually will be using\na table like this as well.\n\n28\n00:01:35.500 --> 00:01:42.020\nAnd so if I want to actually run a SQL\nquery on it, I'm gonna use Select,\n\n29\n00:01:42.020 --> 00:01:45.240\nand everything in that query is\nessentially represented by this line.\n\n30\n00:01:45.240 --> 00:01:50.780\nAnd what should end up resulting though\nis probably a smaller set of data but\n\n31\n00:01:50.780 --> 00:01:55.090\neverything comes from that\none single table, okay.\n\n32\n00:01:55.090 --> 00:01:59.880\nSo in that sense even though all those\nelements that we have to be able to query\n\n33\n00:01:59.880 --> 00:02:04.030\nthat data is very powerful allows\nus to get the information out and\n\n34\n00:02:04.030 --> 00:02:06.480\nhopefully display it\nthe way that we need to.\n\n35\n00:02:06.480 --> 00:02:10.720\nAt the same time, it is a limitation,\nbecause it is a single table\n\n36\n00:02:10.720 --> 00:02:14.440\nthat we are actually asking all\nthe information to be pulled from.\n\n37\n00:02:14.440 --> 00:02:18.190\nA lot of times, especially in databases\nthat are fairly large, you're going to\n\n38\n00:02:18.190 --> 00:02:23.410\nfind out that this is not going to be the\nway that will end up having queries done.\n\n39\n00:02:23.410 --> 00:02:27.000\nAnd, the reason why is because,\nas tables get larger,\n\n40\n00:02:27.000 --> 00:02:30.680\nand larger, and larger,\nthey become a bit more unmanageable.\n\n41\n00:02:30.680 --> 00:02:31.960\nAnd this is the same way and\n\n42\n00:02:31.960 --> 00:02:35.540\nthe same things that started\nhappening even on things like paper.\n\n43\n00:02:35.540 --> 00:02:39.330\nIf we go all the way back to before\nelectronic management systems,\n\n44\n00:02:39.330 --> 00:02:42.370\nwe essentially managed databases\nin what we called ledger books and\n\n45\n00:02:42.370 --> 00:02:46.450\nledger paper and stuff like that,\nand that's perfectly fine.\n\n46\n00:02:46.450 --> 00:02:49.690\nThere comes a point though when you\nactually have one big ledger book for\n\n47\n00:02:49.690 --> 00:02:53.180\neverything that after a while\nit becomes very difficult for\n\n48\n00:02:53.180 --> 00:02:56.860\nyou to actually find the information\nthat you need to, and that is because\n\n49\n00:02:56.860 --> 00:03:00.330\nyou actually have way too many columns,\nand the rows, there's so many of them.\n\n50\n00:03:00.330 --> 00:03:03.850\nIt's very difficult to actually look up by\na column name and then go all the way down\n\n51\n00:03:03.850 --> 00:03:09.480\nto whatever row 14,000 that you need to to\npull that one piece of information out.\n\n52\n00:03:09.480 --> 00:03:14.310\nSo what started happening then with the\ndata is that data started becoming that\n\n53\n00:03:14.310 --> 00:03:18.330\nunmanageable and that's where EF Cod came\nup with the idea of a relational database\n\n54\n00:03:18.330 --> 00:03:22.260\nsystem that said look what we need to do\nis we need to actually start storing data\n\n55\n00:03:22.260 --> 00:03:23.950\nin manageable chunks.\n\n56\n00:03:23.950 --> 00:03:28.360\nAnd those chunks were essentially based\noff of mathematical set theory which meant\n\n57\n00:03:28.360 --> 00:03:33.390\ntables and so that's what E.F.\nCod really did for us is actually say look\n\n58\n00:03:33.390 --> 00:03:36.630\nwe need to take that data,\nbe able to store them in multiple tables.\n\n59\n00:03:36.630 --> 00:03:40.830\nWell that also then means that\nif we need to retrieve data\n\n60\n00:03:40.830 --> 00:03:45.740\nwe also need to be able to retrieve\nit between multiple tables as well.\n\n61\n00:03:45.740 --> 00:03:50.840\nSo when you think about something like\nthat, the idea of retrieving the data from\n\n62\n00:03:50.840 --> 00:03:55.160\na single table, that was simple enough\nto do, the idea of retrieving data from\n\n63\n00:03:55.160 --> 00:04:00.390\nmultiple tables, you would also think\nwell that shouldn't be too hefty.\n\n64\n00:04:00.390 --> 00:04:03.070\nIt should be fairly simple for\nus to do so.\n\n65\n00:04:03.070 --> 00:04:05.990\nSo here it is,\nI've gone on my screen here.\n\n66\n00:04:05.990 --> 00:04:07.140\nKind of example and\n\n67\n00:04:07.140 --> 00:04:11.050\nthe way that I would think that it would\nwork logically if I were to do this.\n\n68\n00:04:11.050 --> 00:04:14.450\nBecause of the way that we've showed you\nin the past by pulling data out of one\n\n69\n00:04:14.450 --> 00:04:18.830\ntable and using the select statements and\neverything else that follows after that.\n\n70\n00:04:18.830 --> 00:04:22.500\nLet's take a look at this example here and\nI actually marked it as an assumption.\n\n71\n00:04:22.500 --> 00:04:24.300\nLet's say that I want\nto pull information but\n\n72\n00:04:24.300 --> 00:04:28.430\nthe result or the information is actually\nin two different tables and what these\n\n73\n00:04:28.430 --> 00:04:32.750\ntwo different tables I need to be able\nto combine that information together.\n\n74\n00:04:32.750 --> 00:04:35.689\nSo what I would do is I'd start\nwriting my select statement.\n\n75\n00:04:35.689 --> 00:04:38.167\nI want the business entity ID.\n\n76\n00:04:38.167 --> 00:04:43.610\nI want the first and last name of the\nbusiness entity that I'm talking about.\n\n77\n00:04:43.610 --> 00:04:47.130\nAnd also to relate that\nto last year's sales.\n\n78\n00:04:47.130 --> 00:04:51.110\nSo that we've all done before, and we've\nactually all pretty much done everything\n\n79\n00:04:51.110 --> 00:04:57.780\nup until, up into this point right here,\nwe actually retrieved it from one table.\n\n80\n00:04:57.780 --> 00:05:01.550\nAnd everything's fine,\nexcept notice that in my aliases though,\n\n81\n00:05:01.550 --> 00:05:03.280\nthe aliases have changed.\n\n82\n00:05:03.280 --> 00:05:07.290\nI have an S-P for one and\nhave a P for the other one here.\n\n83\n00:05:07.290 --> 00:05:10.250\nAnd when I do something like that, now\nthat's actually giving me a visual hint\n\n84\n00:05:10.250 --> 00:05:12.630\nthat I'm actually pulling\nfrom two different tables.\n\n85\n00:05:12.630 --> 00:05:13.340\nOkay?\n\n86\n00:05:13.340 --> 00:05:18.040\nSo, what I would assume is the same thing\nthat I've kind of been talking about here,\n\n87\n00:05:18.040 --> 00:05:19.810\nis that, here's one table.\n\n88\n00:05:19.810 --> 00:05:26.100\nI simply put a comma right here, and\ngo ahead and write out the rest of it.\n\n89\n00:05:26.100 --> 00:05:27.040\nOkay?\n\n90\n00:05:27.040 --> 00:05:29.597\nThat sounds like a logical assumption\nto me, what about you Daniel?\n\n91\n00:05:29.597 --> 00:05:30.214\nSound logical?\n\n92\n00:05:30.214 --> 00:05:31.860\n>> That seems logical, right.\n\n93\n00:05:31.860 --> 00:05:35.820\nYou got two tables, I want some data\nthat is similar from each of them,\n\n94\n00:05:35.820 --> 00:05:38.150\nyou got a very nice structured\nsquare there for you.\n\n95\n00:05:38.150 --> 00:05:40.700\n>> It seems to go okay,\nlet's go ahead and do this.\n\n96\n00:05:40.700 --> 00:05:45.190\nSo if I select that particular\nstatement right there, so\n\n97\n00:05:45.190 --> 00:05:49.530\nthe whole thing that I just did,\nI execute, look at that, I get results.\n\n98\n00:05:49.530 --> 00:05:54.640\nSo perfectly fine, I'm happy and\nI'm perfectly glad about that.\n\n99\n00:05:54.640 --> 00:05:55.940\n>> Thanks for watching everyone.\n\n100\n00:05:55.940 --> 00:05:58.670\n>> Yeah, there you go,\nthat was as easy as it gets.\n\n101\n00:05:58.670 --> 00:06:01.520\nBut let me show you something\nelse that happened here, okay?\n\n102\n00:06:01.520 --> 00:06:02.420\nSo what we have to do though,\n\n103\n00:06:02.420 --> 00:06:06.240\nwe need to zoom in to the lower right\nhand corner of the screen here.\n\n104\n00:06:06.240 --> 00:06:07.460\nSo let me see if I can do that.\n\n105\n00:06:07.460 --> 00:06:09.230\nLet me get back over here.\n\n106\n00:06:09.230 --> 00:06:16.160\nAnd let me start to pull up something\nhere and when you look at this number,\n\n107\n00:06:16.160 --> 00:06:21.020\nDaniel, this is 339,524 rows.\n\n108\n00:06:21.020 --> 00:06:21.892\nOkay?\n>> That's a lot.\n\n109\n00:06:21.892 --> 00:06:22.930\n>> That's a lot.\n\n110\n00:06:22.930 --> 00:06:27.864\nNow, it's not that I didn't want that,\nbut that's not exactly very possible for\n\n111\n00:06:27.864 --> 00:06:32.729\nus to actually have that many sales and if\nyou start looking at just even the results\n\n112\n00:06:32.729 --> 00:06:36.748\nhere, well, I pulled up stuff but\nnotice that last year's sales,\n\n113\n00:06:36.748 --> 00:06:40.131\nthey all seem to be zeroes and\nthen they start adding up and\n\n114\n00:06:40.131 --> 00:06:44.713\nyou're starting to see a lot of figures\nthat are actually duplicated here but\n\n115\n00:06:44.713 --> 00:06:49.290\nnotice that every name is actually\nshowing up also multiple times.\n\n116\n00:06:49.290 --> 00:06:51.450\nWell, what it is happening here.\n\n117\n00:06:51.450 --> 00:06:54.830\nIs something that even EF Cod\npredicted here as well and\n\n118\n00:06:54.830 --> 00:06:57.910\nit's something that's really bad normally.\n\n119\n00:06:57.910 --> 00:07:01.780\nSo this is what is technically\ncalled a cartesian product.\n\n120\n00:07:01.780 --> 00:07:03.480\nI know we're using fancy terms, aren't we?\n\n121\n00:07:03.480 --> 00:07:05.740\nYou might here the term cross product,\nyeah.\n\n122\n00:07:05.740 --> 00:07:08.480\nBut it's called a cartesian product and\n\n123\n00:07:08.480 --> 00:07:11.970\nwhat that's saying in terms\nof the cartesian product.\n\n124\n00:07:11.970 --> 00:07:15.500\nIs, Ronnie,\nyou said to go ahead and do this.\n\n125\n00:07:15.500 --> 00:07:19.875\nTake every single row,\nfrom that SalesPerson table and\n\n126\n00:07:19.875 --> 00:07:26.085\nalso match it up to\nthe Person.Person table as well.\n\n127\n00:07:26.085 --> 00:07:29.640\nWhen we do that,\nwhen we take that possibility here,\n\n128\n00:07:29.640 --> 00:07:33.990\nit's going to multiply every single\nrow I have in the SalesPerson table\n\n129\n00:07:33.990 --> 00:07:39.210\nas well as every single row that I\nhave in the person table as well.\n\n130\n00:07:39.210 --> 00:07:45.240\nSo you will actually get a possibility\nof every possible combination, okay?\n\n131\n00:07:45.240 --> 00:07:48.861\nSo if I have ten rows,\nlet's say on the sales person table and\n\n132\n00:07:48.861 --> 00:07:52.269\nI have ten rows over in\nthe person.person table, well,\n\n133\n00:07:52.269 --> 00:07:55.900\nthat should give me a combination\nof 100 possibilities.\n\n134\n00:07:55.900 --> 00:07:59.073\nCuz you're taking every, single row and\nyou're multiplying it by every\n\n135\n00:07:59.073 --> 00:08:01.700\nsingle other row, and\neverything that you have over there.\n\n136\n00:08:01.700 --> 00:08:03.499\nAnd so, when you do that,\nthat's what you're doing is,\n\n137\n00:08:03.499 --> 00:08:04.541\nyou're multiplying it by that.\n\n138\n00:08:04.541 --> 00:08:05.860\nAnd that gives you a result.\n\n139\n00:08:05.860 --> 00:08:09.621\nNow you're saying, well Ronnie,\nthat means that there are results in this\n\n140\n00:08:09.621 --> 00:08:12.730\ntable that mean absolutely nothing,\nexactly, okay?\n\n141\n00:08:12.730 --> 00:08:17.280\nAnd that's why even though this\nactually ran a good query, and\n\n142\n00:08:17.280 --> 00:08:18.760\nI can take a look at messages.\n\n143\n00:08:18.760 --> 00:08:22.200\nSaid yeah, I ran it, and\nit actually was a successful run.\n\n144\n00:08:22.200 --> 00:08:25.272\nThe problem that we had with running this,\nis now,\n\n145\n00:08:25.272 --> 00:08:29.620\ndo I actually have the data\nI'm looking for here, okay?\n\n146\n00:08:29.620 --> 00:08:31.760\nYou better believe it, one,\n\n147\n00:08:31.760 --> 00:08:35.850\nat least one of those rows is gonna\nbe exactly what I was hoping, okay?\n\n148\n00:08:35.850 --> 00:08:37.650\nSo in other words,\nwhen I came up with this query,\n\n149\n00:08:37.650 --> 00:08:41.450\nthis is exactly what I was hoping for,\n\n150\n00:08:41.450 --> 00:08:44.050\none of them, one of those 339,524\n>> Find your needle in your stack\n\n151\n00:08:44.050 --> 00:08:44.580\nof needles, right?\n\n152\n00:08:44.580 --> 00:08:46.870\n>> That's it, that's exactly it.\n\n153\n00:08:46.870 --> 00:08:50.180\nSo it's saying look,\nRonnie you asked for this and\n\n154\n00:08:50.180 --> 00:08:51.980\nI know one of these is a possibility.\n\n155\n00:08:51.980 --> 00:08:55.170\nSo instead of just me\ntrying to figure out,\n\n156\n00:08:55.170 --> 00:08:58.510\nI'll just return to you all the results,\none of them's gotta be right.\n\n157\n00:08:58.510 --> 00:09:00.160\nSo I'm not doing anything wrong.\n\n158\n00:09:00.160 --> 00:09:04.220\nSo that's what SQL server MT,\nT SQL Is doing for us.\n\n159\n00:09:04.220 --> 00:09:08.740\nIt's not saying, all right, Ronnie,\nwithout any intervening idea, here,\n\n160\n00:09:08.740 --> 00:09:13.270\nbetween these two tables, and you're\ncalling on these two tables in this way.\n\n161\n00:09:13.270 --> 00:09:17.470\nThen, the only result that I have is to\ndo that, is to take every, single row and\n\n162\n00:09:17.470 --> 00:09:21.610\nmultiply it that way, and when I do so,\nI'll end up with a cartesian product.\n\n163\n00:09:21.610 --> 00:09:24.530\nAnd then you'll just have to actually\npick the right one from there.\n\n164\n00:09:24.530 --> 00:09:25.890\nSo what does it really expect of me?\n\n165\n00:09:25.890 --> 00:09:28.510\nAt this point, it's expecting\nme to write where statements and\n\n166\n00:09:28.510 --> 00:09:30.640\ngrouped by statements and\nstuff like that so\n\n167\n00:09:30.640 --> 00:09:35.180\nI actually get exactly what I'm looking\nfor if I do something like this.\n\n168\n00:09:35.180 --> 00:09:39.160\nWell, the good thing is,\nwhen we start seeing stuff like this,\n\n169\n00:09:39.160 --> 00:09:41.570\nwe don't have to actually do it that way,\nokay?\n\n170\n00:09:41.570 --> 00:09:44.420\nBut this is a great place for us to begin.\n\n171\n00:09:44.420 --> 00:09:47.220\nIs it absolutely wrong if\nwe don't actually do it\n\n172\n00:09:47.220 --> 00:09:48.120\nthe way that I'm gonna show?\n\n173\n00:09:48.120 --> 00:09:50.830\nNo, notice it gives you a product here,\nokay.\n\n174\n00:09:50.830 --> 00:09:53.200\nAre you gonna find the right\nanswer that you're looking for?\n\n175\n00:09:53.200 --> 00:09:56.760\nIs it a real possibility that you\ncould dig through all 339,000 and\n\n176\n00:09:56.760 --> 00:09:59.000\nfind exactly what you're looking for?\n\n177\n00:09:59.000 --> 00:10:04.570\nYes, okay, but is it actually returning\nwhat you're expecting it to return?\n\n178\n00:10:04.570 --> 00:10:06.480\nAbsolutely not, okay?\n\n179\n00:10:06.480 --> 00:10:09.580\nSo in that sense, this will work, but\n\n180\n00:10:09.580 --> 00:10:12.780\nit will only give you that cartesian\nproduct and not filter it out.\n\n181\n00:10:12.780 --> 00:10:16.590\nSo yes, you will be taking that needle and\ntrying to find that exact needle in\n\n182\n00:10:16.590 --> 00:10:19.720\na stack of needles to try and figure\nout which ones actually your needle.\n\n183\n00:10:19.720 --> 00:10:20.480\n[LAUGH]\n>> Well, Ronnie,\n\n184\n00:10:20.480 --> 00:10:25.500\nnow you're begging the question, if we\nhave this needle, it's in there somewhere,\n\n185\n00:10:25.500 --> 00:10:31.040\ncan we use our SQL query language\nto extract that needle and\n\n186\n00:10:31.040 --> 00:10:34.170\nmake it a magnet, as it were,\nthat only works on our needle?\n\n187\n00:10:34.170 --> 00:10:35.510\n>> That's exactly what we have to do.\n\n188\n00:10:35.510 --> 00:10:39.288\nSo what we have to do is we have to use,\nwell what we actually entitled this show,\n\n189\n00:10:39.288 --> 00:10:42.080\nbeing able to actually query using what we\n\n190\n00:10:42.080 --> 00:10:44.910\ncall join statements to help\nus out then doing this.\n\n191\n00:10:44.910 --> 00:10:47.560\nNow before I actually start\nshowing you joins, because just by\n\n192\n00:10:47.560 --> 00:10:51.960\nreading them the first time, your eyes\nstart to cross just a little bit.\n\n193\n00:10:51.960 --> 00:10:55.710\nAnd I'll show you in a minute what I'm\ntalking about, but I want to show you\n\n194\n00:10:55.710 --> 00:11:00.310\nlogically, or at least graphically,\nwhat I believe will actually help us out.\n\n195\n00:11:00.310 --> 00:11:02.500\nLet me get out of that zoom there for\na moment.\n\n196\n00:11:02.500 --> 00:11:06.620\nSo let's talk about the idea here and\nwhat has happened, okay?\n\n197\n00:11:06.620 --> 00:11:09.590\nSo if I am going to instead,\n\n198\n00:11:09.590 --> 00:11:13.520\nokay, try to query between two\ndifferent tables here, okay?\n\n199\n00:11:13.520 --> 00:11:19.290\nSo here's the Person.Person table that\nwe had and here's that SalesPerson table\n\n200\n00:11:19.290 --> 00:11:23.870\nIf I want to query between both of them,\nokay, and be able to return\n\n201\n00:11:23.870 --> 00:11:29.530\nthe information that I want, well I need\nto have what we call a common field.\n\n202\n00:11:29.530 --> 00:11:34.350\nNow, remember the term field in database\nterminology that's equal to a column,\n\n203\n00:11:34.350 --> 00:11:35.100\nokay, so\n\n204\n00:11:35.100 --> 00:11:39.890\nthere has to be a shared column in both\nof those tables if I want to do that.\n\n205\n00:11:39.890 --> 00:11:41.810\nNow that's not technically 100% true, and\n\n206\n00:11:41.810 --> 00:11:44.160\nI'll show you what I'm talking\nabout a little bit later here.\n\n207\n00:11:44.160 --> 00:11:48.020\nBut at this point, there has to\nbe what we call a common field.\n\n208\n00:11:48.020 --> 00:11:52.360\nSo when we look at our database here, we\nshould be able to find that common field.\n\n209\n00:11:52.360 --> 00:11:54.280\nAnd I already found it here,\ngraphically, for us, but\n\n210\n00:11:54.280 --> 00:11:57.900\nI'll show you what I'm talking about and\nhow you actually do it inside a SQL server\n\n211\n00:11:57.900 --> 00:12:01.030\nthat will help you out a little bit,\nif you're not familiar with our database.\n\n212\n00:12:01.030 --> 00:12:04.940\nBut hopefully you're more familiar with\nyour database and that means you'll go\n\n213\n00:12:04.940 --> 00:12:08.030\nyeah, I know that there's a field\nover here that links to this one and\n\n214\n00:12:08.030 --> 00:12:09.620\nthat's the one that you want.\n\n215\n00:12:09.620 --> 00:12:14.160\nSo first and foremost, if you know that\nyou're gonna be doing a query with at\n\n216\n00:12:14.160 --> 00:12:18.360\nleast two tables here, and let's just say\nthat we're gonna just work with two for\n\n217\n00:12:18.360 --> 00:12:21.330\nright now so we don't go beyond that for\nright now here.\n\n218\n00:12:21.330 --> 00:12:24.400\nIf we're going to be doing that\nwe have to find that one common\n\n219\n00:12:24.400 --> 00:12:27.220\nfield to link those two tables together.\n\n220\n00:12:27.220 --> 00:12:31.340\nIf they have in their database,\nlet's say Person.Person has 20 rows and\n\n221\n00:12:31.340 --> 00:12:34.490\nSalesPerson has 25 rows here right?\n\n222\n00:12:34.490 --> 00:12:37.330\nWe need to actually take a look at each,\nor not rows, columns.\n\n223\n00:12:37.330 --> 00:12:40.420\nExcuse me, we have to take a look\nat both of those and try and\n\n224\n00:12:40.420 --> 00:12:44.680\nsee which one of those is actually going\nto be something that we can actually link\n\n225\n00:12:44.680 --> 00:12:49.410\non that shares a commonality of data for\nus, is what we need to do.\n\n226\n00:12:49.410 --> 00:12:54.520\nNow once we actually have that link,\nit's at that particular point,\n\n227\n00:12:54.520 --> 00:12:59.270\nnoticed this is linked on business entity\nhere, ID which is what I showed you.\n\n228\n00:12:59.270 --> 00:13:05.360\nIt is now that I've established that link\nthen, that I can now run my query and\n\n229\n00:13:05.360 --> 00:13:09.790\nI can pull results from\nthe row that I need to,\n\n230\n00:13:09.790 --> 00:13:12.550\nthe columns that I need\nto from both of these.\n\n231\n00:13:12.550 --> 00:13:16.380\nAnd end up with my subset,\nmy particular set of data.\n\n232\n00:13:16.380 --> 00:13:19.320\nBy being an a pool from both of those,\nokay?\n\n233\n00:13:19.320 --> 00:13:22.653\nBut without that commonality\nin between us, okay,\n\n234\n00:13:22.653 --> 00:13:26.440\nthat is where we are gonna\nend up having an issue.\n\n235\n00:13:26.440 --> 00:13:29.160\nSo normally, when you start doing this,\nyou actually,\n\n236\n00:13:29.160 --> 00:13:31.728\ncreate what we call joins, okay?\n\n237\n00:13:31.728 --> 00:13:36.560\nSo we're essentially saying that the sales\nperson table is joined to the person\n\n238\n00:13:36.560 --> 00:13:41.860\ntable based on a column here,\nis what we're going to do.\n\n239\n00:13:41.860 --> 00:13:44.730\nSo when we do that we're actually saying,\nhey,\n\n240\n00:13:44.730 --> 00:13:50.770\nbased on this linking piece of information\nright here, I can now run a regular query\n\n241\n00:13:50.770 --> 00:13:56.020\nthat I want to pull the information from\ncolumns over here and columns over here,\n\n242\n00:13:56.020 --> 00:14:00.700\ncombine them together and report them\nthe way that I want to and that I need to.\n\n243\n00:14:00.700 --> 00:14:03.550\nNow, when we start actually\ndoing the queries,\n\n244\n00:14:03.550 --> 00:14:06.120\nthere's a couple of different things and\ngo on.\n\n245\n00:14:06.120 --> 00:14:08.275\nWe’ll see this happening as well.\n\n246\n00:14:08.275 --> 00:14:11.970\nWe're just gonna show you the basic\nstandard queries that most people gonna\n\n247\n00:14:11.970 --> 00:14:15.070\nget from this,\nwhich is called an inner join.\n\n248\n00:14:16.270 --> 00:14:20.140\nAn inner join is actually\nsaying as long as\n\n249\n00:14:20.140 --> 00:14:24.885\nI have a business entity ID\nfield that matches over here,\n\n250\n00:14:24.885 --> 00:14:30.580\nthat matches this side as well,\nthen report to me that information.\n\n251\n00:14:30.580 --> 00:14:34.600\nSo whatever you ask for,\nas long as there's a commonality of this,\n\n252\n00:14:34.600 --> 00:14:38.540\nright here in the middle,\nthen report to me that okay.\n\n253\n00:14:38.540 --> 00:14:41.460\nNow can you actually do more\nthen that if you want to?\n\n254\n00:14:41.460 --> 00:14:42.880\nYou better believe it, okay.\n\n255\n00:14:42.880 --> 00:14:45.480\nAnd we'll actually show you that\nin what we call a left join and\n\n256\n00:14:45.480 --> 00:14:47.070\nalso a right join as well.\n\n257\n00:14:47.070 --> 00:14:48.750\nBut for right now let's just\nstick with the inner join\n\n258\n00:14:48.750 --> 00:14:51.880\nbecause that's what we'll use to\nactually taking a look at for now.\n\n259\n00:14:51.880 --> 00:14:56.850\nSo let me go ahead and\nscroll back over to my SQL server and\n\n260\n00:14:56.850 --> 00:15:01.920\nnow we're moving away from this idea\nof just the regular cartesian product.\n\n261\n00:15:01.920 --> 00:15:04.720\nAnd now I will go ahead, actually I'm not,\n\n262\n00:15:04.720 --> 00:15:08.700\nI'm actually going to do something else\ndown here is what I'm going to do.\n\n263\n00:15:08.700 --> 00:15:12.750\nAnd we'll show you a harder\nexample in just a moment.\n\n264\n00:15:12.750 --> 00:15:14.890\nSo I'm actually using these marks here.\n\n265\n00:15:14.890 --> 00:15:18.070\nNow I haven't mentioned\nthese marks in a show yet.\n\n266\n00:15:18.070 --> 00:15:22.450\nBut you can also not only comment out\nline-by-line by doing a double dash in\n\n267\n00:15:22.450 --> 00:15:27.410\nfront of that line, if I wanna comment\nout an entire section of information,\n\n268\n00:15:29.480 --> 00:15:32.920\nI can actually use a slash and\nan asterisk.\n\n269\n00:15:32.920 --> 00:15:36.520\nAnd then whatever I wanna make sure\nI comment out, at the end of that,\n\n270\n00:15:36.520 --> 00:15:40.360\nI actually do an asterisk and\na slash, essentially closing that in.\n\n271\n00:15:40.360 --> 00:15:44.220\nAnd then, if I don't want this query to\nrun again, which I really don't need it to\n\n272\n00:15:44.220 --> 00:15:49.210\nrun again, I'm simply gonna move it to\nthe end of my batch statement there.\n\n273\n00:15:49.210 --> 00:15:51.500\nAnd once I do that,\nnotice how everything turns green and\n\n274\n00:15:51.500 --> 00:15:54.875\nthat makes it a comment here, okay.\n\n275\n00:15:54.875 --> 00:15:57.155\nWhat I wanted to do is I\nwanna scroll down on and\n\n276\n00:15:57.155 --> 00:16:00.035\nshow you how we actually link\nthese two tables together.\n\n277\n00:16:00.035 --> 00:16:04.197\nNow, I showed you logically,\nin terms of the linking, but how we do it,\n\n278\n00:16:04.197 --> 00:16:06.875\nthis is actually where\nlike I said if you're.\n\n279\n00:16:06.875 --> 00:16:07.909\nYou're not careful,\n\n280\n00:16:07.909 --> 00:16:12.040\nyour eyes are gonna cross just a little\nbit as you're doing this here.\n\n281\n00:16:12.040 --> 00:16:13.090\nSo let's take a look.\n\n282\n00:16:13.090 --> 00:16:15.750\nIt's the very same statement,\nbut now I've got them linked and\n\n283\n00:16:15.750 --> 00:16:17.340\nwe'll see some different results.\n\n284\n00:16:17.340 --> 00:16:22.920\nRemember that the earlier result, the\ncartesian product, was about 339,000 rows.\n\n285\n00:16:22.920 --> 00:16:23.890\nSo now this time,\n\n286\n00:16:23.890 --> 00:16:28.510\nif you take a look at my statement here,\nkinda the same statement, right?\n\n287\n00:16:28.510 --> 00:16:32.780\nBusiness ID,\nthe business entity ID first name and\n\n288\n00:16:32.780 --> 00:16:35.810\nlast name as well as last years sales.\n\n289\n00:16:35.810 --> 00:16:37.800\nThis time I'm actually going ahead and\n\n290\n00:16:37.800 --> 00:16:43.030\nannouncing at this point here,\nthe sales person table as SP.\n\n291\n00:16:43.030 --> 00:16:47.330\nSo not only am I declaring that here's\na table I want to pull from, and\n\n292\n00:16:47.330 --> 00:16:49.850\nhere's the alias, but now,\n\n293\n00:16:49.850 --> 00:16:55.580\nI need to tell it I want it to be\nlinked to the person.person table.\n\n294\n00:16:55.580 --> 00:16:57.270\nOkay?\nAnd the way that we do that is\n\n295\n00:16:57.270 --> 00:16:58.940\ntype in the word inner join.\n\n296\n00:16:58.940 --> 00:17:01.750\nOkay, so that's the key here.\n\n297\n00:17:01.750 --> 00:17:06.680\nIs we're saying we want you to find\nthe inner join between these two\n\n298\n00:17:06.680 --> 00:17:11.620\nhere based on the column and\nnotice these columns.\n\n299\n00:17:11.620 --> 00:17:15.895\nIt's the business entity ID and\nthe sales person table equals\n\n300\n00:17:15.895 --> 00:17:21.200\nthe person.person business\nentity ID as well.\n\n301\n00:17:21.200 --> 00:17:26.060\nSo only if those two actually have\ndata in them are you gonna return\n\n302\n00:17:26.060 --> 00:17:32.320\nthe values of the ID, the first and\nlast name as well as last years sales.\n\n303\n00:17:32.320 --> 00:17:37.760\nSo if I now use this to help\nme to limit my selection\n\n304\n00:17:37.760 --> 00:17:43.420\nof what I want executed and run, I can hit\nmy F5 key if I can see it on my keyboard.\n\n305\n00:17:43.420 --> 00:17:45.941\nAnd now when I run this here, okay.\n\n306\n00:17:45.941 --> 00:17:50.548\nYou actually can see the results of what's\nhappened and now I'm pulling it up,\n\n307\n00:17:50.548 --> 00:17:53.706\nand let me see if I can zoom\nin just a little bit here, and\n\n308\n00:17:53.706 --> 00:17:57.720\nnow notice that it's not showing\nme 339,000 rows, Daniel.\n\n309\n00:17:57.720 --> 00:17:59.377\n>> There's considerably less.\n\n310\n00:17:59.377 --> 00:18:00.740\n[LAUGH]\n>> You see a lot less here,\n\n311\n00:18:00.740 --> 00:18:01.930\nis what you end up seeing.\n\n312\n00:18:01.930 --> 00:18:04.360\nSo about 17 rows instead.\n\n313\n00:18:04.360 --> 00:18:08.510\nAnd so what is happening is that what\nwe're seeing is that on one side,\n\n314\n00:18:08.510 --> 00:18:11.320\nit found all of these BusinessEntityIDs.\n\n315\n00:18:11.320 --> 00:18:13.740\nAnd on the other side it did\nthe same thing and then said.\n\n316\n00:18:13.740 --> 00:18:17.240\nHere's the rows that you want to actually\nreturn from both of those tables and\n\n317\n00:18:17.240 --> 00:18:19.480\nreport it right here, okay?\n\n318\n00:18:19.480 --> 00:18:24.270\nSo that normally is gonna be probably\none of the most common ways that you and\n\n319\n00:18:24.270 --> 00:18:28.540\nI are actually going to end up running\nqueries when we start to see them, okay?\n\n320\n00:18:28.540 --> 00:18:33.260\nSo, linking those two tables together will\nhelp us to get the actual result that we\n\n321\n00:18:33.260 --> 00:18:35.810\nwant to be able to run, and see.\n\n322\n00:18:35.810 --> 00:18:40.300\nLet me pull that one back down\nhere just for a moment and\n\n323\n00:18:40.300 --> 00:18:42.820\nsee if I have anything else that\nI want to show right there.\n\n324\n00:18:42.820 --> 00:18:46.800\nBut for at least the basics here,\nthat's what we can actually do\n\n325\n00:18:46.800 --> 00:18:49.920\nby using what we call that\ninner join to help us out.\n\n326\n00:18:51.030 --> 00:18:53.920\nNow, sometimes though,\nremember what this is gonna do.\n\n327\n00:18:53.920 --> 00:18:56.970\nIt's actually going to\nbring those two tables and\n\n328\n00:18:56.970 --> 00:19:00.310\nit really is gonna give us\nthe smallest set of data\n\n329\n00:19:00.310 --> 00:19:04.470\nthat's gonna be equal on both\nsides based on business entity ID.\n\n330\n00:19:04.470 --> 00:19:09.980\nBut sometimes though you actually need to\nverify do you have more data than this?\n\n331\n00:19:09.980 --> 00:19:14.490\nOkay, so you may wanna find\nout not who only has the same\n\n332\n00:19:14.490 --> 00:19:18.580\nBusinessEntityID on one side,\nbut you may also wanna find out\n\n333\n00:19:18.580 --> 00:19:22.700\nare there actually any other connections\nthat are actually there and available.\n\n334\n00:19:22.700 --> 00:19:24.840\nSo when we start to take a look.\n\n335\n00:19:24.840 --> 00:19:27.510\nRemember I told you that there's\na left and there's a right join.\n\n336\n00:19:27.510 --> 00:19:29.830\nThere's a left join,\nthere's a right join here.\n\n337\n00:19:29.830 --> 00:19:33.280\nWell, the syntax here is actually\nwhat gets a little bit confusing and\n\n338\n00:19:33.280 --> 00:19:34.510\nhow we start to do this.\n\n339\n00:19:34.510 --> 00:19:36.360\nSo let's play with the syntax.\n\n340\n00:19:36.360 --> 00:19:38.950\nOr let's look at the syntax, play with it.\n\n341\n00:19:38.950 --> 00:19:41.550\nLet's look at the syntax\na little bit more.\n\n342\n00:19:41.550 --> 00:19:44.770\nNow, you do not have to do it in this\nparticular order, but I think it helps,\n\n343\n00:19:44.770 --> 00:19:46.900\nlogically, if you keep it this way.\n\n344\n00:19:46.900 --> 00:19:50.830\nSo, when you actually try and\ndo a join, what I recommend is that,\n\n345\n00:19:50.830 --> 00:19:53.670\nwhatever table that you're\nactually gonna pull from,\n\n346\n00:19:53.670 --> 00:19:56.280\nwhatever you start with\nat the beginning here?\n\n347\n00:19:56.280 --> 00:19:59.650\nKeep that as being your left table,\nwhatever it is, okay?\n\n348\n00:19:59.650 --> 00:20:01.720\nSo, that's what you want, okay?\n\n349\n00:20:01.720 --> 00:20:04.300\nAnd then whatever you actually\nstack on next after that, for\n\n350\n00:20:04.300 --> 00:20:05.560\nyour selections, here.\n\n351\n00:20:05.560 --> 00:20:06.870\nGo ahead and try and keep those together.\n\n352\n00:20:06.870 --> 00:20:09.740\nNow you'll notice that I didn't do that,\nand I didn't do it on purpose.\n\n353\n00:20:09.740 --> 00:20:12.480\nI wanted you to see that it didn't\nmatter what order you put it on.\n\n354\n00:20:12.480 --> 00:20:16.180\nBut logically,\nideally this is what you'd want, okay?\n\n355\n00:20:16.180 --> 00:20:20.190\nNow I put it this way cuz I wanted\nto see it differently, okay?\n\n356\n00:20:20.190 --> 00:20:23.830\nSo I wanted to see the sales,\nlast year's sales here at the end.\n\n357\n00:20:23.830 --> 00:20:27.670\nI didn't want it actually being\nright after the business entity ID.\n\n358\n00:20:27.670 --> 00:20:31.250\nSo this is actually just gonna determine\nthe order of the display that we're seeing\n\n359\n00:20:31.250 --> 00:20:33.090\ndown here in the results, okay?\n\n360\n00:20:33.090 --> 00:20:37.460\nBut I normally say hey, here's the first\none, I'm gonna keep that on the left side.\n\n361\n00:20:37.460 --> 00:20:40.830\nSo I go ahead and normally you'd list.\n\n362\n00:20:40.830 --> 00:20:45.610\nHere it is, salesperson first, and\nthat's gonna be on the left side.\n\n363\n00:20:45.610 --> 00:20:48.500\nAnd then interjoin, and then the next one.\n\n364\n00:20:48.500 --> 00:20:51.310\nSo I try and keep it consistent, you know?\n\n365\n00:20:51.310 --> 00:20:55.360\nSo that this, essentially,\non this side of the interjoin.\n\n366\n00:20:55.360 --> 00:20:57.290\nSo before, I guess.\n\n367\n00:20:57.290 --> 00:21:01.490\nBefore the word, interjoin, I'm going\nto use that as being my left table.\n\n368\n00:21:01.490 --> 00:21:04.650\nAnd then what normally\nhappens after left join,\n\n369\n00:21:04.650 --> 00:21:10.060\nI put that after inner join as well, and\nthen the actual equation of that table.\n\n370\n00:21:10.060 --> 00:21:12.780\nNow I promised you something\nthat I would show you,\n\n371\n00:21:12.780 --> 00:21:17.740\nhow the heck do you actually find out if\nthese things actually will have in common.\n\n372\n00:21:17.740 --> 00:21:22.380\nWell, there's a couple of ways you\ncan do this, one is manually, right?\n\n373\n00:21:22.380 --> 00:21:27.630\nSo, if I scroll in, and\nI take a look at the database tables,\n\n374\n00:21:27.630 --> 00:21:32.826\nand I scroll down here to sales person,\nlet's see, here,\n\n375\n00:21:32.826 --> 00:21:38.060\nsales.sales person and I expand that out.\n\n376\n00:21:38.060 --> 00:21:41.120\nI can see that there's\nbusiness entity right there.\n\n377\n00:21:41.120 --> 00:21:46.120\nAnd then I'd have to scroll back\nup her to person.person, and\n\n378\n00:21:46.120 --> 00:21:47.890\nthen I can manually compare them.\n\n379\n00:21:47.890 --> 00:21:50.140\nSo here's business entity as well.\n\n380\n00:21:50.140 --> 00:21:51.790\nSo that's one way you can do it.\n\n381\n00:21:51.790 --> 00:21:55.030\nIs that a pretty hefty\nway to do it though?\n\n382\n00:21:55.030 --> 00:21:56.490\nManually having to do that?\n\n383\n00:21:56.490 --> 00:22:00.200\nYeah, it's pretty darn hefty if\nyou're actually trying to do that.\n\n384\n00:22:00.200 --> 00:22:03.330\nBut there are actually a couple\nother things that you can do.\n\n385\n00:22:03.330 --> 00:22:05.640\nThat's also something that I\nwanted to show you as well.\n\n386\n00:22:07.250 --> 00:22:10.580\nSo the nice thing about the way\nthat SQL server also works\n\n387\n00:22:10.580 --> 00:22:14.350\nis that underneath adventure works\n2014 that you see right here,\n\n388\n00:22:14.350 --> 00:22:18.710\nthere is actually a link here\nthat says Database Diagrams.\n\n389\n00:22:18.710 --> 00:22:24.000\nAnd if I right click on that,\nI can go to New Database Diagram\n\n390\n00:22:25.640 --> 00:22:27.580\nand now I've gotta zoom\nout just a little bit.\n\n391\n00:22:27.580 --> 00:22:30.400\nLet me zoom back out.\n\n392\n00:22:30.400 --> 00:22:34.060\nAnd then I can pick the table.\n\n393\n00:22:34.060 --> 00:22:37.310\nSo let's say mine was actually\nthe Person table here.\n\n394\n00:22:38.340 --> 00:22:41.150\nSo there it is,\nPerson table and I click Add.\n\n395\n00:22:42.550 --> 00:22:46.120\nNow I can add that table\ninto this diagram for\n\n396\n00:22:46.120 --> 00:22:49.300\nright now and\nthen there's something else you can do.\n\n397\n00:22:49.300 --> 00:22:52.430\nNow you might go this is not\nimpressive Ronnie, big deal.\n\n398\n00:22:52.430 --> 00:22:55.610\nWell the nice thing is, if you're at\nleast initially looking for this and\n\n399\n00:22:55.610 --> 00:22:57.540\nyou're not sure about all the tables,\n\n400\n00:22:57.540 --> 00:23:02.380\nthe other thing that you can do is\nyou can right click from here, okay?\n\n401\n00:23:02.380 --> 00:23:07.570\nI actually do it right here on\nthe top of the header up here.\n\n402\n00:23:07.570 --> 00:23:09.420\nI'm trying to think of what that's called.\n\n403\n00:23:09.420 --> 00:23:13.309\nAnd then I can come down to\nwhere it says relationships.\n\n404\n00:23:14.410 --> 00:23:19.320\nAnd then if I click there,\nI can actually see some of these different\n\n405\n00:23:19.320 --> 00:23:23.250\nkeys and even some of the different\ntables it's actually linked to, so\n\n406\n00:23:23.250 --> 00:23:27.430\nnotice I can actually select this and come\nall the way down here and actually see,\n\n407\n00:23:27.430 --> 00:23:31.550\nlike there's other information\nright here that we can also see.\n\n408\n00:23:31.550 --> 00:23:33.460\nAnd be able to link to\nthose tables as well.\n\n409\n00:23:33.460 --> 00:23:36.130\nBut that wasn't exactly\nthe one I was looking for,\n\n410\n00:23:36.130 --> 00:23:41.880\nthe one I was actually looking for\nis under Add Related Tables okay?\n\n411\n00:23:41.880 --> 00:23:46.809\nSo if I select this,\nI can now load up every single\n\n412\n00:23:46.809 --> 00:23:51.739\ntable that this particular\ntable is linked to and\n\n413\n00:23:51.739 --> 00:23:55.480\nactually see those relationships.\n\n414\n00:23:55.480 --> 00:24:00.373\nNow, you may not actually want to do this\nwith every single table that you pull up\n\n415\n00:24:00.373 --> 00:24:04.027\nbut if you actually start looking\naround a little bit more,\n\n416\n00:24:04.027 --> 00:24:08.360\nit will eventually lead me all the way\nover at least at some point here.\n\n417\n00:24:08.360 --> 00:24:12.097\nTo another table that I can then\nactually end up linking and\n\n418\n00:24:12.097 --> 00:24:16.700\nI believe that's how she linked\non this one, the employee table.\n\n419\n00:24:16.700 --> 00:24:20.920\nLinked all the way back over to that\nsales.salesperson table as well.\n\n420\n00:24:20.920 --> 00:24:24.770\nSo you can actually use this on each one\nto actually show you those links and\n\n421\n00:24:24.770 --> 00:24:27.620\nwhat's actually available to you,\nto help you out.\n\n422\n00:24:27.620 --> 00:24:30.780\nNow remember you want to be careful\nhere because there are 50 or\n\n423\n00:24:30.780 --> 00:24:31.820\n60 tables over here.\n\n424\n00:24:31.820 --> 00:24:34.110\nYou don't want to actually\nopen up every table to try and\n\n425\n00:24:34.110 --> 00:24:37.270\nlink to every other one because that\nwill make a lot of different tables.\n\n426\n00:24:37.270 --> 00:24:40.560\nBut you can at least start by doing that.\n\n427\n00:24:40.560 --> 00:24:44.550\nOnce you are actually cleared with that\nyou can just simply get out of that so\n\n428\n00:24:44.550 --> 00:24:46.020\nyou don't actually need to do that.\n\n429\n00:24:46.020 --> 00:24:49.280\nBut those are kind of two ways that\nyou can figure out where that linking\n\n430\n00:24:49.280 --> 00:24:53.080\nrelationship can be in\nterms of the interjoin and\n\n431\n00:24:53.080 --> 00:24:55.140\nstuff that you actually need to do.\n\n432\n00:24:55.140 --> 00:24:57.960\nWell you actually just have to have\na common field in between them to link\n\n433\n00:24:57.960 --> 00:24:59.420\nthem together.\n\n434\n00:24:59.420 --> 00:25:02.760\nNow, let's talk about this idea\nof LEFT and RIGHT JOIN here for\n\n435\n00:25:02.760 --> 00:25:05.320\na few minutes as well.\n\n436\n00:25:05.320 --> 00:25:08.910\nSo, remember that the interjoin is going\nto return to us essentially the smallest\n\n437\n00:25:08.910 --> 00:25:12.140\nsubset of data that we have\nbetween those two tables,\n\n438\n00:25:12.140 --> 00:25:15.880\nbecause it's only gonna do it\nbased on what is matching here.\n\n439\n00:25:15.880 --> 00:25:18.800\nNow, if I change just a simple word, okay?\n\n440\n00:25:18.800 --> 00:25:23.680\nWhich is right here where it says INNER,\nto LEFT JOIN.\n\n441\n00:25:23.680 --> 00:25:24.520\nOkay?\n\n442\n00:25:24.520 --> 00:25:27.760\nWhat that actually means is to\ntake a look in the left table,\n\n443\n00:25:27.760 --> 00:25:32.810\nwhich is going to be my Sales.SalesPerson\nreturn to me every single\n\n444\n00:25:32.810 --> 00:25:38.800\nrecord that is matching on\nthe business entity on both sides but\n\n445\n00:25:38.800 --> 00:25:45.050\nalso return to me everything\nelse in that left side table.\n\n446\n00:25:45.050 --> 00:25:48.120\nSo, I actually made a little graphic for\nthis to help us out.\n\n447\n00:25:50.110 --> 00:25:51.345\nJust to do this LEFT JOIN.\n\n448\n00:25:52.640 --> 00:25:54.450\nSo, here's what the results should be.\n\n449\n00:25:54.450 --> 00:25:57.820\nIt should be everything that\nmatches on both sides, and\n\n450\n00:25:57.820 --> 00:26:01.910\nthen everything else,\nall the other rows that are in here.\n\n451\n00:26:01.910 --> 00:26:05.290\nSo, if I were to fill this in with chalk,\nand I can't do it, but if I were to fill\n\n452\n00:26:05.290 --> 00:26:08.890\nthis in with chalk, it would essentially\nbe returning every single record over\n\n453\n00:26:08.890 --> 00:26:13.279\nhere, and then only the records that match\non the business entity ID over here.\n\n454\n00:26:14.480 --> 00:26:18.460\nSo that way you can actually see not only\nwhere that particular relationship is, but\n\n455\n00:26:18.460 --> 00:26:21.790\nyou can also see every other record\nover here in this table as well.\n\n456\n00:26:21.790 --> 00:26:23.610\nAll right?\n\n457\n00:26:23.610 --> 00:26:25.110\nSo let's do this.\n\n458\n00:26:25.110 --> 00:26:27.840\nLet's run this particular link here.\n\n459\n00:26:27.840 --> 00:26:29.160\nAnd this join.\n\n460\n00:26:29.160 --> 00:26:33.600\nAnd now when I run the execution Ronnie,\nit didn't return anything any differently.\n\n461\n00:26:33.600 --> 00:26:38.430\nIt's still the same 17 rows and you can't\nsee that but let me pull it up for you.\n\n462\n00:26:38.430 --> 00:26:40.910\nIt's still the same 17 rows of data and\n\n463\n00:26:40.910 --> 00:26:44.170\na lot of times when you do\na LEFT JOIN it's gonna be that way.\n\n464\n00:26:44.170 --> 00:26:47.620\nAnd the reason for that is because\nnormally when you pick that and\n\n465\n00:26:47.620 --> 00:26:49.030\nyou picked the field that you matched on,\n\n466\n00:26:49.030 --> 00:26:53.140\nyou're essentially saying look over\nhere in this table first, right?\n\n467\n00:26:53.140 --> 00:26:56.190\nLook in this table first, find everything.\n\n468\n00:26:56.190 --> 00:26:56.950\nOkay, so\n\n469\n00:26:56.950 --> 00:27:00.730\nusually that table's going to end up being\nsmaller no matter what that subset is.\n\n470\n00:27:00.730 --> 00:27:05.180\nAnd then that way you can actually pull\nup every bit of information of it and\n\n471\n00:27:05.180 --> 00:27:07.630\nsee not only rows that\nhave it in common but\n\n472\n00:27:07.630 --> 00:27:10.350\nnotice that we some of these\nthat have zero's in them.\n\n473\n00:27:10.350 --> 00:27:13.600\nTwo, usually these aren't gonna\nbe the ones that show up.\n\n474\n00:27:13.600 --> 00:27:16.900\nNow in our join it did because it actually\ndoes show up as a zero instead of\n\n475\n00:27:16.900 --> 00:27:18.270\na null value.\n\n476\n00:27:18.270 --> 00:27:20.470\nSo that's what happened there.\n\n477\n00:27:20.470 --> 00:27:22.930\nSo what happens if I change\nthis over to the RIGHT JOIN?\n\n478\n00:27:24.290 --> 00:27:28.860\nWell the RIGHT JOIN says hey,\npull from this table instead.\n\n479\n00:27:28.860 --> 00:27:32.990\nNot only the ones that match but\nfrom the Person.Person table.\n\n480\n00:27:32.990 --> 00:27:36.900\nWell in the way that this database\nis actually created right.\n\n481\n00:27:36.900 --> 00:27:41.955\nSales person is a smaller table right is\nactually a subset of all the people okay.\n\n482\n00:27:41.955 --> 00:27:45.430\nPerson.Person actually\nrepresents not only sales people\n\n483\n00:27:45.430 --> 00:27:49.920\nother employees it even represents\ncustomers in this particular database.\n\n484\n00:27:49.920 --> 00:27:54.330\nSo on this particular sense,\nif I do a RIGHT JOIN, and I run execute.\n\n485\n00:27:54.330 --> 00:27:57.060\nOops, I shouldn't have selected that,\nsorry.\n\n486\n00:27:57.060 --> 00:27:58.690\nMy fault, there we go.\n\n487\n00:27:58.690 --> 00:28:00.270\nNow, when I take a look.\n\n488\n00:28:00.270 --> 00:28:07.030\nAnd let's see if we can go to the lower\nright hand corner on the screen here.\n\n489\n00:28:07.030 --> 00:28:09.570\nAnd see if I can zoom in.\n\n490\n00:28:09.570 --> 00:28:13.090\nDaniel, you can see that\nwhat happened here is\n\n491\n00:28:13.090 --> 00:28:16.780\nit returned about 19,972 rows, okay?\n\n492\n00:28:16.780 --> 00:28:20.880\nSo if we need to see the matching values\nfrom the right hand side as well as\n\n493\n00:28:20.880 --> 00:28:23.750\nevery other value, we can do that too and\n\n494\n00:28:23.750 --> 00:28:25.630\nthe reason why you might\ndo that is verification.\n\n495\n00:28:25.630 --> 00:28:28.820\nIf you know how many rows are in\na table and you want to verify but\n\n496\n00:28:28.820 --> 00:28:31.500\nhey, I am actually doing this query right.\n\n497\n00:28:31.500 --> 00:28:32.740\nIt returned to me 19 rows, but\n\n498\n00:28:32.740 --> 00:28:36.190\nlet me verify that each side is\nactually what it reports to be.\n\n499\n00:28:36.190 --> 00:28:38.570\nThat's actually what we\nwant to have happen.\n\n500\n00:28:38.570 --> 00:28:40.560\nSo it gives us that ability to do that.\n\n501\n00:28:40.560 --> 00:28:44.320\nNow I, to tell you the truth in\nall reality, I've done LEFT JOINS,\n\n502\n00:28:44.320 --> 00:28:46.360\nI've done RIGHT JOINS all the time.\n\n503\n00:28:46.360 --> 00:28:47.250\nNot right joints,\n\n504\n00:28:47.250 --> 00:28:52.190\ninner joins all the time rarely have\nactually done the idea of a write join,\n\n505\n00:28:52.190 --> 00:28:56.750\nwhere you might do that in scheduling\nof things that are actually to come.\n\n506\n00:28:56.750 --> 00:29:01.750\nSo you might find out, hey, we've got\nshows scheduled every day here at ITProTV,\n\n507\n00:29:01.750 --> 00:29:03.860\nbut what if I wanted to find\nout in the future whether or\n\n508\n00:29:03.860 --> 00:29:07.740\nnot there were actually shows\nscheduled for beyond that?\n\n509\n00:29:07.740 --> 00:29:10.690\nSo we might find all these dates\nwe might have a possibility but\n\n510\n00:29:10.690 --> 00:29:12.330\nno shows assigned to it.\n\n511\n00:29:12.330 --> 00:29:15.630\nI might actually able to find all\nthose dates they don't have any shows\n\n512\n00:29:15.630 --> 00:29:16.620\nassigned to it.\n\n513\n00:29:16.620 --> 00:29:19.130\nA right join in theory in term of a query\n\n514\n00:29:19.130 --> 00:29:21.980\nwill help us to do something\njust like that as well.\n\n515\n00:29:21.980 --> 00:29:26.740\nSo being out you see stuff like\nthis is actually fairly important.\n\n516\n00:29:26.740 --> 00:29:29.930\nWhen we start taking a look\nat the idea of joins here.\n\n517\n00:29:29.930 --> 00:29:33.470\nNow before we close out we got a couple\nof minutes before we close out.\n\n518\n00:29:33.470 --> 00:29:37.220\nI wanted to show you, because right now\nI'm showing you the very basics, right?\n\n519\n00:29:37.220 --> 00:29:40.360\nBetween two tables and\nit's even simpler, right?\n\n520\n00:29:40.360 --> 00:29:43.520\nBecause both of those tables\nhad the exact same column\n\n521\n00:29:43.520 --> 00:29:45.450\nthat actually ended up matching up.\n\n522\n00:29:45.450 --> 00:29:48.980\nBut what happens when you\ndon't have a direct match?\n\n523\n00:29:50.510 --> 00:29:53.220\nWell, when you don't have a direct match,\n\n524\n00:29:53.220 --> 00:29:55.900\nnotice now that instead of\nactually using INNER JOIN once,\n\n525\n00:29:55.900 --> 00:30:01.250\nyou actually see that you can actually\nINNER JOIN multiple times here.\n\n526\n00:30:01.250 --> 00:30:03.070\nSo here's the same way, I went ahead and\n\n527\n00:30:03.070 --> 00:30:07.710\nput this now there's no direct\nlink between those two tables now.\n\n528\n00:30:07.710 --> 00:30:12.350\nAnd what you are now actually starting\nto see there is that as long as I can\n\n529\n00:30:12.350 --> 00:30:16.050\nactually link through the tables that\nI call upon, in other words there is\n\n530\n00:30:16.050 --> 00:30:21.060\nactually a shared field between this\ntable as well as this table and\n\n531\n00:30:21.060 --> 00:30:25.030\nbetween this table and other table\nwe can also link those together.\n\n532\n00:30:25.030 --> 00:30:28.740\nSo here it is it's an INNER JOIN example\nof two tables but not direct link.\n\n533\n00:30:28.740 --> 00:30:32.240\nSo I have the human resources\ndepartment name, okay?\n\n534\n00:30:32.240 --> 00:30:33.740\nSo the name of the department.\n\n535\n00:30:33.740 --> 00:30:35.330\nOkay, that you work for and\n\n536\n00:30:35.330 --> 00:30:40.790\nthen I wanna find out who's actually in\nthose departments, is what happens here.\n\n537\n00:30:40.790 --> 00:30:42.610\nWell notice that person here and\n\n538\n00:30:42.610 --> 00:30:45.740\nhuman resources department, they don't\nreally share anything in common.\n\n539\n00:30:45.740 --> 00:30:48.940\nIn other words they're not\ndone on the business ID.\n\n540\n00:30:48.940 --> 00:30:52.970\nThey're not done on anything so\nat this point here,\n\n541\n00:30:52.970 --> 00:30:58.560\nyou would start off by going ahead and\nselecting who's on the left hand side, and\n\n542\n00:30:58.560 --> 00:31:04.290\ninner joining here and I had to find it\nthrough another particular table, right?\n\n543\n00:31:04.290 --> 00:31:09.050\nEmployee department history is what I was\nable to link up the persons table with,\n\n544\n00:31:09.050 --> 00:31:14.030\nbased on that business\nentity ID between those two.\n\n545\n00:31:14.030 --> 00:31:19.710\nAnd then I took that and\nI was now able to link employee\n\n546\n00:31:19.710 --> 00:31:24.000\ndepartment history to the department and\n\n547\n00:31:25.330 --> 00:31:30.310\nthen from that point, based on the\ndepartment ID and both of those tables.\n\n548\n00:31:30.310 --> 00:31:34.260\nSo it's a two step link\nthat you can see here.\n\n549\n00:31:34.260 --> 00:31:35.990\nAnd then, I only actually went ahead and\n\n550\n00:31:35.990 --> 00:31:39.900\ndid a filter by where,\nwhich is based on sales.\n\n551\n00:31:39.900 --> 00:31:44.660\nAnd then I said, hey, let's go ahead and\nactually apply a sort to them, and\n\n552\n00:31:44.660 --> 00:31:49.090\nfrom this point here, let me go and\nexecute that, and I can actually see.\n\n553\n00:31:49.090 --> 00:31:51.959\nOops, I ran a couple of\nqueries here at one time.\n\n554\n00:31:54.210 --> 00:31:57.610\nLet me do that one again so I don't\nrun both of those queries at one time\n\n555\n00:31:57.610 --> 00:31:59.430\ncuz I got another one\nthat I should show you.\n\n556\n00:31:59.430 --> 00:32:00.926\nSo there it is on sales and\n\n557\n00:32:00.926 --> 00:32:04.290\nwhat it returned to me were\n18 different rows, okay?\n\n558\n00:32:04.290 --> 00:32:07.598\nSo you can see right here,\n18 rows of data, and\n\n559\n00:32:07.598 --> 00:32:10.850\nnotice all of them\nare actually based on sales.\n\n560\n00:32:10.850 --> 00:32:14.030\nBeing able to do this and\nchange it up as well.\n\n561\n00:32:14.030 --> 00:32:17.713\nLet me see if I can do that,\nchange it just a little bit here.\n\n562\n00:32:23.773 --> 00:32:25.870\nAnd let's say that I have\nan engineering department.\n\n563\n00:32:27.000 --> 00:32:30.603\nOops, did that wrong.\n\n564\n00:32:30.603 --> 00:32:32.018\nThere we go.\n\n565\n00:32:32.018 --> 00:32:36.105\nEngineering.\n\n566\n00:32:36.105 --> 00:32:37.579\nRun the same query again.\n\n567\n00:32:41.385 --> 00:32:45.297\nAnd now you can see that we can use this\nto actually query over and over again,\n\n568\n00:32:45.297 --> 00:32:48.780\nthe department as well as\nthe actual person that's in it.\n\n569\n00:32:48.780 --> 00:32:54.200\nEven though there is not a shared\ncolumn in between persons and\n\n570\n00:32:54.200 --> 00:32:55.850\nthe actual department table as well.\n\n571\n00:32:56.910 --> 00:32:58.210\nNow the other thing is,\n\n572\n00:32:58.210 --> 00:33:02.370\nI did this on purpose to kind\nof frustrate us a little bit.\n\n573\n00:33:02.370 --> 00:33:04.213\nNotice I typed out everything, Daniel.\n\n574\n00:33:04.213 --> 00:33:08.850\nAnd the idea of me actually having to\ntype out everything more than one time\n\n575\n00:33:08.850 --> 00:33:10.310\nis not something I'd like to do.\n\n576\n00:33:10.310 --> 00:33:12.070\nThat thing looks messy.\n\n577\n00:33:12.070 --> 00:33:13.920\nAnd it looks intimidating.\n\n578\n00:33:13.920 --> 00:33:15.030\nLike crazy, right?\n\n579\n00:33:15.030 --> 00:33:17.140\nWhen you start looking at it,\nman, that's a lot of words,\n\n580\n00:33:17.140 --> 00:33:19.810\nespecially right here in the middle,\nall jumbled up together.\n\n581\n00:33:19.810 --> 00:33:22.110\nAnd you're like, wow,\nam I even reading that right?\n\n582\n00:33:22.110 --> 00:33:24.720\nYeah, that's the key is\ntrying to figure that out.\n\n583\n00:33:24.720 --> 00:33:29.380\nWell, one of the things, of course, that\nis recommended then is to use aliases.\n\n584\n00:33:29.380 --> 00:33:33.460\nNow, this is not exactly the same query.\n\n585\n00:33:33.460 --> 00:33:35.050\nBut it's close.\n\n586\n00:33:35.050 --> 00:33:37.240\nI did it just a little bit differently,\nbut\n\n587\n00:33:37.240 --> 00:33:41.440\nnotice how kind of neat this\none actually looks too.\n\n588\n00:33:41.440 --> 00:33:47.760\nMuch smaller, a couple of lines here\ncompared to this thing that essentially,\n\n589\n00:33:47.760 --> 00:33:49.100\nthat's pretty darn big.\n\n590\n00:33:49.100 --> 00:33:51.500\nIt takes up just about\nthat whole screen there.\n\n591\n00:33:51.500 --> 00:33:53.170\nThis one's a little bit less.\n\n592\n00:33:54.990 --> 00:33:59.100\nAnd now you can see there's the name for\nthe department, first and\n\n593\n00:33:59.100 --> 00:34:03.110\nlast name, and\nthe actual job title that that person has.\n\n594\n00:34:03.110 --> 00:34:05.720\nWe can actually select that one.\n\n595\n00:34:05.720 --> 00:34:09.240\nAnd now, because I've used all those\naliases that we've talked about,\n\n596\n00:34:09.240 --> 00:34:11.880\nusing the as instead, it shortens it up.\n\n597\n00:34:11.880 --> 00:34:17.300\nAnd now, when I run and I execute that,\nI can still see the same 18 rows here, but\n\n598\n00:34:17.300 --> 00:34:20.870\nnow I've also added in job\ntitle at the end, as well.\n\n599\n00:34:20.870 --> 00:34:21.710\nSo you can see, everybody,\n\n600\n00:34:21.710 --> 00:34:26.050\nthere's actually a part that\nhas the word sales in it, too.\n\n601\n00:34:26.050 --> 00:34:29.230\nSo when you see something like that,\nyou might be saying, or no excuse me,\n\n602\n00:34:29.230 --> 00:34:31.763\nthe name of the department is sales and\nthen the job titles.\n\n603\n00:34:31.763 --> 00:34:35.130\nThey just all happen to, of course,\nto have the word sales in it as well.\n\n604\n00:34:35.130 --> 00:34:38.081\nSo that way you can actually see that\nthere's a couple of different things that\n\n605\n00:34:38.081 --> 00:34:39.900\nwill help you out in terms of the joints.\n\n606\n00:34:39.900 --> 00:34:43.120\nNow does it take a little while\nto work with the aliases?\n\n607\n00:34:43.120 --> 00:34:44.838\nYes, until you feel comfortable with them.\n\n608\n00:34:44.838 --> 00:34:50.410\nBut overall though, being able to actually\ncreate an inner join is kind of one\n\n609\n00:34:50.410 --> 00:34:53.180\nof the first things that we\nhave to be used to doing.\n\n610\n00:34:53.180 --> 00:34:54.700\nBecause more than likely,\n\n611\n00:34:54.700 --> 00:34:58.340\nas far as your databases go in\nthe real production environment,\n\n612\n00:34:58.340 --> 00:35:01.090\nI doubt there's gonna be a time you're\nnot going to be doing the join.\n\n613\n00:35:01.090 --> 00:35:02.290\nI really do.\n\n614\n00:35:02.290 --> 00:35:05.613\nSo getting that stuff right,\nunderstanding the logic behind it,\n\n615\n00:35:05.613 --> 00:35:09.607\ntrying to figure out those relationships,\nand that single column in between.\n\n616\n00:35:09.607 --> 00:35:11.972\nThat is gonna be key for\nyou to be able to do this, and\n\n617\n00:35:11.972 --> 00:35:14.942\nactually start becoming much\nmore efficient at writing joins,\n\n618\n00:35:14.942 --> 00:35:17.988\nespecially when you're actually\nquerying more than one table.\n\n619\n00:35:17.988 --> 00:35:21.150\n>> All right Ronnie, well thanks so\nmuch for stopping by and\n\n620\n00:35:21.150 --> 00:35:25.930\nheaping more knowledge onto\nour SQL querying toolkit,\n\n621\n00:35:25.930 --> 00:35:29.160\nas it were, as we build up and\nget better at doing this.\n\n622\n00:35:29.160 --> 00:35:32.010\nAnd the joins is something interesting for\n\n623\n00:35:32.010 --> 00:35:34.685\nus, work with multiple\ndifferent databases.\n\n624\n00:35:34.685 --> 00:35:38.010\nPulling some of the data\nsets that we need, and\n\n625\n00:35:38.010 --> 00:35:40.870\nthen filter down to only exactly\nwhat it is we're looking for.\n\n626\n00:35:40.870 --> 00:35:45.510\nCuz that's always fun to get those 9,000\nmillion different tables that we get back,\n\n627\n00:35:45.510 --> 00:35:46.840\nor rows and columns.\n\n628\n00:35:46.840 --> 00:35:48.380\nThat's not a good time had by anyone, but\n\n629\n00:35:48.380 --> 00:35:50.320\nI know you got a little more\ninformation for us to go.\n\n630\n00:35:50.320 --> 00:35:53.782\nSo there will be a part two to this,\nso definitely drop by and\n\n631\n00:35:53.782 --> 00:35:55.210\nhave a look at that.\n\n632\n00:35:55.210 --> 00:35:56.650\nRonnie, we look forward\nto seeing you there and\n\n633\n00:35:56.650 --> 00:35:58.190\nwe look forward to seeing\nyou there as well.\n\n634\n00:35:58.190 --> 00:36:01.250\nAs for this episode, we're gonna go\nahead and sign off, for ItProTV,\n\n635\n00:36:01.250 --> 00:36:02.895\nI've been your host, Daniel Lowry.\n\n636\n00:36:02.895 --> 00:36:03.642\n>> And I'm Ronnie Wong.\n\n637\n00:36:03.642 --> 00:36:04.495\n>> We'll see you next time.\n\n638\n00:36:04.495 --> 00:36:13.290\n[MUSIC]\n\n",
          "vimeoId": "164042034"
        },
        {
          "description": "In this episode, Daniel and Ronnie explain the concept and use of Temporary Tables, Views, and Derived Tables. They start by showing you how to use the Temporary Tables and Views and while both can be beneficial, also have their problems. Then they jump into the use of Derived Tables which are more efficient than using Temp Tables.",
          "length": "1295",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-2-2-query_using_joins_pt2-042016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-2-2-query_using_joins_pt2-042016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-2-2-query_using_joins_pt2-042016-1-sm.jpg",
          "title": "Query Using JOINS Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.148 --> 00:00:10.148\n[MUSIC]\n\n2\n00:00:12.142 --> 00:00:17.180\nAll right, greeting everyone, and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:17.180 --> 00:00:20.021\nI'm your host Daniel Lowrie and\nin today's episode we\n\n4\n00:00:20.021 --> 00:00:24.603\nare continuing forward with our series on\nquerying the Microsoft SQL Server 2014.\n\n5\n00:00:24.603 --> 00:00:27.143\nAnd joining us back in\nthe studio again today for\n\n6\n00:00:27.143 --> 00:00:31.207\npart two on some very interesting ways\nin which we can query our SQL servers,\n\n7\n00:00:31.207 --> 00:00:33.200\nis our good friend Mr. Ronnie Wong.\n\n8\n00:00:33.200 --> 00:00:33.862\nRonnie, welcome back, sir.\n\n9\n00:00:33.862 --> 00:00:34.511\nHow's it going today?\n\n10\n00:00:34.511 --> 00:00:37.207\n>> Well, thank you for\nhaving me back on the show, and\n\n11\n00:00:37.207 --> 00:00:41.727\nit's going very well as we continue on our\njourney here, and expanding our knowledge\n\n12\n00:00:41.727 --> 00:00:47.110\nin terms of SQL 2014, and of course also\nT-SQL as well, our Transact-SQL knowledge.\n\n13\n00:00:47.110 --> 00:00:51.852\nSo that we can actually make fairly\ncomplex types of queries that we need to.\n\n14\n00:00:51.852 --> 00:00:55.713\nNow remember that so far in our series we\nhave already taken a look at just simple\n\n15\n00:00:55.713 --> 00:00:59.652\nselect statements, pulling information\nfrom a single table in our database.\n\n16\n00:00:59.652 --> 00:01:04.019\nAnd then in a previous episode which I\nthink is actually the part one to this\n\n17\n00:01:04.019 --> 00:01:07.260\nepisode, we also took a look\nat the beginnings here and\n\n18\n00:01:07.260 --> 00:01:12.051\nthe foundations of now beginning to query\nwhat multiple tables at the same time,\n\n19\n00:01:12.051 --> 00:01:14.910\nand creating what we call joins, right?\n\n20\n00:01:14.910 --> 00:01:17.560\nJoins essentially, allows us to\nlink those tables together, and\n\n21\n00:01:17.560 --> 00:01:21.700\nto ensure that we get the values\nthat we need as we actually make our\n\n22\n00:01:21.700 --> 00:01:25.230\nqueries a little bit more complex by\nusing the filtering that we can do.\n\n23\n00:01:25.230 --> 00:01:28.280\nInstead of just returning what\nwe call a cartesian product.\n\n24\n00:01:28.280 --> 00:01:30.860\nNow if anything that I said in those\nlast couple of sentences there,\n\n25\n00:01:30.860 --> 00:01:33.760\nyou're like whoa that was\na lot of information.\n\n26\n00:01:33.760 --> 00:01:36.190\nMake sure you go back and watch part one,\n\n27\n00:01:36.190 --> 00:01:39.190\nas we actually show you the examples of\nwhat we're talking about right there.\n\n28\n00:01:39.190 --> 00:01:41.350\nSo we're not gonna rehash all of that,\n\n29\n00:01:41.350 --> 00:01:44.558\nbut we do want to actually\ncontinue to move forward here and\n\n30\n00:01:44.558 --> 00:01:48.691\ntake a look at some of the other things\nthat we have to actually worry about.\n\n31\n00:01:48.691 --> 00:01:52.945\nOne of the key features in terms of\ndealing with the transact-SQL and\n\n32\n00:01:52.945 --> 00:01:57.709\nyour SQL server is that remember that your\nSQL server has a ton of data normally\n\n33\n00:01:57.709 --> 00:02:00.448\nthat normally it's actually very active.\n\n34\n00:02:00.448 --> 00:02:03.592\nThere's always people pulling\ninformation and a data from it.\n\n35\n00:02:03.592 --> 00:02:09.492\nAnd so one of the best things that you and\nI can actually end up doing is to make\n\n36\n00:02:09.492 --> 00:02:14.551\nour particular queries as efficiently\nwritten as they can be and\n\n37\n00:02:14.551 --> 00:02:18.110\nto ensure that what we\nactually do is we try and\n\n38\n00:02:18.110 --> 00:02:21.720\nhit the engine as little as possible,\nokay?\n\n39\n00:02:21.720 --> 00:02:23.630\nSo, there's a couple of\nthings that are going on.\n\n40\n00:02:23.630 --> 00:02:25.180\nNow you might say, well, Ronnie, why?\n\n41\n00:02:25.180 --> 00:02:28.950\nWell, it is because if there are multiple\npeople writing queries against it,\n\n42\n00:02:28.950 --> 00:02:32.350\npulling information out,\nit could be just two or three.\n\n43\n00:02:32.350 --> 00:02:34.110\nBut it could be hundreds,\nit could be thousands,\n\n44\n00:02:34.110 --> 00:02:36.440\nespecially if you're\nconnected to a website.\n\n45\n00:02:36.440 --> 00:02:39.730\nIf you're actually doing all that stuff,\nit could be millions of hits, for\n\n46\n00:02:39.730 --> 00:02:40.830\nall you know.\n\n47\n00:02:40.830 --> 00:02:44.030\nSo one of the things that you're doing,\nis actually making sure that you try to\n\n48\n00:02:44.030 --> 00:02:47.220\nmake your queries as\nefficient as possible.\n\n49\n00:02:47.220 --> 00:02:51.100\nNow, we've already shown that,\nwith multiple tables, when we need to pull\n\n50\n00:02:51.100 --> 00:02:55.230\nthe data up how to actually create\njoins that will help us to do that.\n\n51\n00:02:55.230 --> 00:02:58.787\nBut the other thing that we\nactually need to do sometimes,\n\n52\n00:02:58.787 --> 00:03:01.182\nis to be able to create\ndata on the fly and\n\n53\n00:03:01.182 --> 00:03:06.068\nuse that data to be able to report that\nto, what we call, another query, okay?\n\n54\n00:03:06.068 --> 00:03:08.874\nAnd what we wanna do at that\nparticular point, right,\n\n55\n00:03:08.874 --> 00:03:12.969\nis that we don't wanna actually create\nanother structure to hold data, okay?\n\n56\n00:03:12.969 --> 00:03:17.510\nSo let's think about something like\nthis that if every time we need to\n\n57\n00:03:17.510 --> 00:03:20.173\nactually get a value from our database,\n\n58\n00:03:20.173 --> 00:03:24.112\nand then I needed that value only for\nanother single query.\n\n59\n00:03:24.112 --> 00:03:27.103\nWell what could end up happening\nis that if the way that\n\n60\n00:03:27.103 --> 00:03:30.161\nthe database function is that\nI will create an object,\n\n61\n00:03:30.161 --> 00:03:34.808\nright, some type of software object\ninside of my database so it can be used.\n\n62\n00:03:34.808 --> 00:03:37.070\nWell, that begins to add up over time and\n\n63\n00:03:37.070 --> 00:03:39.560\nactually adds up into space\nthat it's being stored on,\n\n64\n00:03:39.560 --> 00:03:43.920\nwhich means more hits, more space,\nmore RAM that's actually being used.\n\n65\n00:03:43.920 --> 00:03:45.042\nSo sometimes you actually have to\n\n66\n00:03:45.042 --> 00:03:47.650\ndo things a little bit more efficiently,\nokay?\n\n67\n00:03:47.650 --> 00:03:52.070\nNow, there are actually permit structures\nthat are also made when you query your\n\n68\n00:03:52.070 --> 00:03:52.720\ndatabase.\n\n69\n00:03:52.720 --> 00:03:56.677\nIf you need stuff like that, and\nyou can actually build those things.\n\n70\n00:03:56.677 --> 00:04:01.768\nTwo of those things are what\nwe call temporary tables and\n\n71\n00:04:01.768 --> 00:04:04.703\nalso what we call views, okay?\n\n72\n00:04:04.703 --> 00:04:09.647\nNow, let's take a look at my\nmachine here just for a moment, and\n\n73\n00:04:09.647 --> 00:04:13.676\nwe'll deal with the query\nhere in just a moment, but\n\n74\n00:04:13.676 --> 00:04:19.200\nover here on the left hand side,\nokay, inside of our Object Explorer.\n\n75\n00:04:19.200 --> 00:04:22.460\nOops, let me see if I can not do that,\nhow's that?\n\n76\n00:04:22.460 --> 00:04:26.550\nLet me see if I can zoom in\njust a little bit there, okay?\n\n77\n00:04:26.550 --> 00:04:30.643\nSo, inside of the Object Explorer, notice\nthat I have my databases we're gonna be\n\n78\n00:04:30.643 --> 00:04:33.590\nworking with, this AdventureWorks2014.\n\n79\n00:04:33.590 --> 00:04:36.650\nBut up here at the top where\nit says System Databases,\n\n80\n00:04:37.760 --> 00:04:42.140\nif I expand that one out and also expand\nout the tempdb, notice that there's\n\n81\n00:04:42.140 --> 00:04:47.920\nactually something called\nTemporary Tables and also Views, okay?\n\n82\n00:04:47.920 --> 00:04:51.100\nSo these are the objects that I was\nactually mentioning that it gives us\n\n83\n00:04:51.100 --> 00:04:57.190\nthe ability to create these objects here\ntemporarily, and also Views that also\n\n84\n00:04:57.190 --> 00:05:01.200\nallows us to create these objects that\nwe can also run queries against as well.\n\n85\n00:05:01.200 --> 00:05:05.567\nBut when we do stuff like this, usually\nin Temporary Tables, its not only holding\n\n86\n00:05:05.567 --> 00:05:08.710\na structure temporarily for\nyou, so that you can do that.\n\n87\n00:05:08.710 --> 00:05:13.800\nBut then you actually have to run another\nquery to populate that table, okay?\n\n88\n00:05:13.800 --> 00:05:17.470\nAnd then once you're done populating that\ntable, you have to run another query\n\n89\n00:05:17.470 --> 00:05:21.510\nagainst that temporary table to\nget the information you want out.\n\n90\n00:05:21.510 --> 00:05:24.780\nAnd then, after that,\nit also ends up cleaning up that table.\n\n91\n00:05:24.780 --> 00:05:28.920\nIn other words, when you actually do that\nparticular select statement against that\n\n92\n00:05:28.920 --> 00:05:30.070\ntemporary table,\n\n93\n00:05:30.070 --> 00:05:34.530\nit then kinda weeds out all those other\nfields you really didn't tend to use.\n\n94\n00:05:34.530 --> 00:05:35.515\n>> That sounds simple, Ronnie.\n\n95\n00:05:35.515 --> 00:05:37.490\n[LAUGH]\n>> It sounds incredibly simple, okay?\n\n96\n00:05:37.490 --> 00:05:39.070\nAnd it's a very powerful tool and\n\n97\n00:05:39.070 --> 00:05:41.445\nsomething that we will end\nup using a lot of times.\n\n98\n00:05:41.445 --> 00:05:42.444\n>> I was being facetious.\n\n99\n00:05:42.444 --> 00:05:43.593\n[LAUGH]\n>> Sorry.\n\n100\n00:05:43.593 --> 00:05:46.838\n[LAUGH]\n>> Ronnies like this is easy.\n\n101\n00:05:46.838 --> 00:05:49.535\n[LAUGH] Everybody does this.\n\n102\n00:05:49.535 --> 00:05:51.825\n[LAUGH]\n>> Well I thought so.\n\n103\n00:05:51.825 --> 00:05:56.252\n[LAUGH] But\ntemporary tables are really helpful, okay?\n\n104\n00:05:56.252 --> 00:05:59.656\nThey're helpful when you do\nneed to run multiple times\n\n105\n00:05:59.656 --> 00:06:01.960\nthrough that same set of data.\n\n106\n00:06:01.960 --> 00:06:05.490\nYou know it's gonna be constantly, you\nknow somebody else is gonna need to do it\n\n107\n00:06:05.490 --> 00:06:08.790\nand something else is gonna need to\nhappen to it again and again and again.\n\n108\n00:06:08.790 --> 00:06:12.554\nBut sometimes when you actually create\nsomething like that, it stays there and\n\n109\n00:06:12.554 --> 00:06:13.855\nwe forget about it, okay?\n\n110\n00:06:13.855 --> 00:06:17.935\nAnd the idea of forgetting about it means\nthat more and more temporary tables that\n\n111\n00:06:17.935 --> 00:06:21.180\nare created means more and\nmore of a workload on your SQL server.\n\n112\n00:06:21.180 --> 00:06:23.390\nSo you do need to go back in and\nclean these things up.\n\n113\n00:06:23.390 --> 00:06:27.622\nAnd the same thing with Views, creating\nviews is one of the neatest things\n\n114\n00:06:27.622 --> 00:06:30.489\ncuz there's already bunches\nof views in there for\n\n115\n00:06:30.489 --> 00:06:34.331\nyou to make database searching\na lot easier for you as well, okay?\n\n116\n00:06:34.331 --> 00:06:37.900\nSo a lot of times you actually do\nhave tons of views that are there.\n\n117\n00:06:37.900 --> 00:06:41.680\nBut then you can also create your own\nthat will also be stored here too.\n\n118\n00:06:41.680 --> 00:06:44.860\nSo all these actually\nare storing the objects for us.\n\n119\n00:06:44.860 --> 00:06:47.660\nBut there are times though instead\n\n120\n00:06:47.660 --> 00:06:51.060\nthat what you need is\nkinda the same experience.\n\n121\n00:06:51.060 --> 00:06:55.852\nIn terms of getting the data that you need\nand returning a table of information,\n\n122\n00:06:55.852 --> 00:06:58.584\nbut only for\nthe query that you're running.\n\n123\n00:06:58.584 --> 00:07:03.001\nWell, it seems a little bit of an overkill\nthen to actually create an actual table or\n\n124\n00:07:03.001 --> 00:07:05.160\na view, just for a single query, okay?\n\n125\n00:07:05.160 --> 00:07:10.158\nIf you really do need all that information\npopulated in the way that you need to,\n\n126\n00:07:10.158 --> 00:07:12.179\nit seems like overkill to do it.\n\n127\n00:07:12.179 --> 00:07:16.219\nBut that's kinda some of the stuff that\nnormally has to happen if you actually\n\n128\n00:07:16.219 --> 00:07:19.961\nare gonna be running queries that\nare a little bit more complex, okay?\n\n129\n00:07:19.961 --> 00:07:23.365\nSo beyond the idea of just creating joins,\nokay?\n\n130\n00:07:23.365 --> 00:07:27.435\nJoins allow us to be able to pull\nfrom multiple tables that exist in\n\n131\n00:07:27.435 --> 00:07:28.398\nthe database.\n\n132\n00:07:28.398 --> 00:07:31.451\nBut now what if you do need\ninformation that you, or\n\n133\n00:07:31.451 --> 00:07:33.729\ndata that you've created on the fly?\n\n134\n00:07:33.729 --> 00:07:36.169\nIn other words,\nsomething that was just generated and\n\n135\n00:07:36.169 --> 00:07:38.570\nyou still need to run\na query against that?\n\n136\n00:07:38.570 --> 00:07:42.440\nWell you have those two options,\nessentially creating a view or\n\n137\n00:07:42.440 --> 00:07:43.967\ncreating a temporary table, okay?\n\n138\n00:07:45.030 --> 00:07:49.760\nBut there's a third option that\nwe call a derived table, okay?\n\n139\n00:07:49.760 --> 00:07:54.085\nA derived table is different in\nthe very fact that in one step-in-step,\n\n140\n00:07:54.085 --> 00:07:58.689\nit creates a table like the temporary\ntable does, I know that sounds strange,\n\n141\n00:07:58.689 --> 00:08:00.523\nbut it does create that table.\n\n142\n00:08:00.523 --> 00:08:05.920\nAnd it also populates the data\nin that table at the same time.\n\n143\n00:08:05.920 --> 00:08:09.374\nRemember that in temporary tables,\nit actually creates the table structure\n\n144\n00:08:09.374 --> 00:08:11.509\nfirst, then you have to\nactually populate it.\n\n145\n00:08:11.509 --> 00:08:14.961\nAnd then you have to actually run your\nqueries to get what you want out of it\n\n146\n00:08:14.961 --> 00:08:15.495\ninstead.\n\n147\n00:08:15.495 --> 00:08:19.758\nWhereas in view so you essentially\nactually create all that in one step.\n\n148\n00:08:19.758 --> 00:08:23.637\nSo let me show you the contrast of\nwhat we're actually talking about that\n\n149\n00:08:23.637 --> 00:08:26.560\nwill help us to fill\nthis gap in a little bit.\n\n150\n00:08:26.560 --> 00:08:31.920\nSo here it is inside of my\nSQL Management Studio here.\n\n151\n00:08:31.920 --> 00:08:34.180\nAnd the first query that I want or\n\n152\n00:08:34.180 --> 00:08:39.190\nultimately what I want to do, is I want\na query to find out how I can categorize\n\n153\n00:08:39.190 --> 00:08:43.740\neach of my customers into categories\nbased on the total sales themselves.\n\n154\n00:08:44.850 --> 00:08:46.630\nSo if I wanted to do that,\n\n155\n00:08:46.630 --> 00:08:51.210\nhow would I first approach it if\nI were writing a SQL statement.\n\n156\n00:08:51.210 --> 00:08:55.490\nSo by myself if I were to think about that\none of the very first queries that I would\n\n157\n00:08:55.490 --> 00:09:00.840\nend up doing is I would end up\ncreating a query that actually\n\n158\n00:09:00.840 --> 00:09:05.550\nbrings me the total sales by each customer\nid and I would have it and type that out.\n\n159\n00:09:05.550 --> 00:09:10.466\nSo here it is, here is my SELECT statement\nwhere I have the CustomerID, and\n\n160\n00:09:10.466 --> 00:09:15.270\nI have the total of UnitPrice\ntimes the OrderQty as TotalSales.\n\n161\n00:09:15.270 --> 00:09:19.300\nAnd notice because though that data\nactually comes from separate tables here,\n\n162\n00:09:19.300 --> 00:09:26.720\nI did an inner joint on SalesOrderDetails\nversus SalesOrderHeader.\n\n163\n00:09:26.720 --> 00:09:29.220\nAnd then I went ahead and\ngrouped it and I ordered it as well.\n\n164\n00:09:30.440 --> 00:09:35.780\nSo that is the first information\nthat I want to go ahead and run.\n\n165\n00:09:35.780 --> 00:09:40.480\nAnd when I do that,\nI end up with quite a few rows here.\n\n166\n00:09:40.480 --> 00:09:43.058\nNow you can't really see it too well, but\n\n167\n00:09:43.058 --> 00:09:46.974\nif we actually full screen that just for\na moment, there we go.\n\n168\n00:09:46.974 --> 00:09:52.599\nYou'll see that it returned\n19,119 rows of data,\n\n169\n00:09:52.599 --> 00:09:55.880\nis what it returned for me.\n\n170\n00:09:55.880 --> 00:09:58.680\nSo here, I can see every single customer\n\n171\n00:09:58.680 --> 00:10:02.820\nby their TotalSales is what\nI can actually see here.\n\n172\n00:10:02.820 --> 00:10:06.980\nNow that hasn't actually given me\nthe categories that I want it to.\n\n173\n00:10:06.980 --> 00:10:09.840\nLet's say that what I'm hoping to do here,\n\n174\n00:10:09.840 --> 00:10:14.820\nis actually be able to get some\ncategories recognized for us.\n\n175\n00:10:14.820 --> 00:10:18.290\nSo I can actually group my customers\n\n176\n00:10:18.290 --> 00:10:22.700\ninto different categories such as mini and\nmicro, etc., stuff like that.\n\n177\n00:10:23.860 --> 00:10:26.410\nSo based on the TotalSales that we have.\n\n178\n00:10:26.410 --> 00:10:30.790\nWell at this point, I know at least\nhave the data I'm going to use for that.\n\n179\n00:10:32.810 --> 00:10:37.550\nSo now, I want to actually run a query\nthat's going to turn all the customers,\n\n180\n00:10:38.600 --> 00:10:41.200\nand also go ahead and make a case for\n\n181\n00:10:41.200 --> 00:10:46.110\neach customer to return a value\nbased on the TotalSales.\n\n182\n00:10:46.110 --> 00:10:47.988\nSo in this particular instance here.\n\n183\n00:10:51.828 --> 00:10:55.303\nLet me see if I can scroll here, so that\nwe can see just about the whole thing.\n\n184\n00:10:57.975 --> 00:10:59.940\nA little bit.\n\n185\n00:10:59.940 --> 00:11:02.320\nSo I'll have to scroll\njust a little bit here.\n\n186\n00:11:02.320 --> 00:11:06.218\nSo at the beginning,\nsame information just about.\n\n187\n00:11:06.218 --> 00:11:11.303\nSo now, same thing, customer ID,\nstill the same columns here.\n\n188\n00:11:11.303 --> 00:11:16.318\nCustomer ID and the total sales,\nbut now what do I want it to do?\n\n189\n00:11:16.318 --> 00:11:21.069\nI want it to create another column based\non the case of what I have in the second\n\n190\n00:11:21.069 --> 00:11:22.820\ncolumn here.\n\n191\n00:11:22.820 --> 00:11:29.190\nSo WHEN SUM of the UnitPrice\ntimes OrderQTy.\n\n192\n00:11:29.190 --> 00:11:31.378\nIf that number is between 0 and\n\n193\n00:11:31.378 --> 00:11:35.750\n5,000 then I want it to report\nout another column here.\n\n194\n00:11:35.750 --> 00:11:37.837\nAnd I want it to put 'Micro' in its place.\n\n195\n00:11:37.837 --> 00:11:42.214\nBetween 5,000 and\n10,000 I want to call it 'Mini'.\n\n196\n00:11:42.214 --> 00:11:46.330\nBetween 10,000 and 15,000 'Medium'.\n\n197\n00:11:46.330 --> 00:11:49.048\nAnd then of course, 15 to 20,000,\nwe'll call it 'Mega',\n\n198\n00:11:49.048 --> 00:11:51.370\nand then if it's beyond that,\nwe'll call it 'Mighty'.\n\n199\n00:11:51.370 --> 00:11:55.950\nI was trying to keep the alliteration\ngoing is what I was trying to do.\n\n200\n00:11:55.950 --> 00:11:56.573\n>> And a good job you did.\n\n201\n00:11:56.573 --> 00:11:57.293\n>> Yeah, I tried.\n\n202\n00:11:57.293 --> 00:11:59.020\nSo there we go.\n\n203\n00:11:59.020 --> 00:12:01.950\nSo I tried to do that and\nthen we end that case.\n\n204\n00:12:01.950 --> 00:12:04.919\nAnd we're gonna report that as\nthe grouping order is what we're gonna\n\n205\n00:12:04.919 --> 00:12:05.535\nreport it as.\n\n206\n00:12:05.535 --> 00:12:08.750\nThen I'm gonna pull that\nfrom that sales table, and\n\n207\n00:12:08.750 --> 00:12:13.250\nwe're gonna do an inter join on\nthe header as well as SalesOrderHeader.\n\n208\n00:12:13.250 --> 00:12:17.520\nGo ahead and GROUP it, and\nalso order it by the TotalSales.\n\n209\n00:12:17.520 --> 00:12:19.710\nSure, I can actually run that statement.\n\n210\n00:12:19.710 --> 00:12:20.472\nOops, too much.\n\n211\n00:12:20.472 --> 00:12:21.600\nThere we go.\n\n212\n00:12:23.880 --> 00:12:26.000\nI forgot an s, can you believe that?\n\n213\n00:12:26.000 --> 00:12:29.106\nIt's gonna a little bit\nmore than I wanted.\n\n214\n00:12:29.106 --> 00:12:33.786\nSo let me run that one and\nlet's see what ends up happening here as\n\n215\n00:12:33.786 --> 00:12:39.810\nthe If I can get that,\nlet's see, drag it up here.\n\n216\n00:12:39.810 --> 00:12:45.750\nSo now you guys should be able to see\nthat what started to happen here is,\n\n217\n00:12:45.750 --> 00:12:50.720\nit went ahead and it made that third\ncolumn for us based on TotalSales.\n\n218\n00:12:50.720 --> 00:12:53.990\nSo whatever that TotalSales was,\nthis was based on greater than 20,000.\n\n219\n00:12:53.990 --> 00:12:57.336\nYou actually see Mighty and\nthen if I scroll on down here,\n\n220\n00:12:57.336 --> 00:13:00.066\nat some point it's gonna change,\nmaybe not.\n\n221\n00:13:00.066 --> 00:13:02.976\nWow, boy, this company is.\n\n222\n00:13:02.976 --> 00:13:04.059\nThere we go.\n\n223\n00:13:04.059 --> 00:13:04.686\nI was gonna say, man.\n\n224\n00:13:04.686 --> 00:13:07.310\nThis company right here is\nactually doing fairly well.\n\n225\n00:13:07.310 --> 00:13:14.231\nMega sales, and then Medium sales and\nthen of course Mini.\n\n226\n00:13:14.231 --> 00:13:18.475\nAnd then those that were under 5,000\nI believe, I called them Micro, and\n\n227\n00:13:18.475 --> 00:13:21.670\nI'm pretty sure there's some down here.\n\n228\n00:13:21.670 --> 00:13:22.780\nThis having to scroll through a lot.\n\n229\n00:13:25.280 --> 00:13:27.063\nYeah, so\nyou'd actually be able to see that.\n\n230\n00:13:27.063 --> 00:13:29.120\nLet me not have to scroll through.\n\n231\n00:13:29.120 --> 00:13:29.790\nThere's a ton of them.\n\n232\n00:13:29.790 --> 00:13:30.482\nLet me scroll, there we go.\n\n233\n00:13:30.482 --> 00:13:37.070\nMicro sales, so\nwe can actually see that right there.\n\n234\n00:13:37.070 --> 00:13:39.480\nThat's in two steps so far.\n\n235\n00:13:39.480 --> 00:13:42.298\nSo the first one that I generated\nif you kind of remember.\n\n236\n00:13:42.298 --> 00:13:45.870\nI know that that a lot to\nactually be able to see here, but\n\n237\n00:13:45.870 --> 00:13:50.010\nthe first one simply just showed\nme the first two columns.\n\n238\n00:13:50.010 --> 00:13:52.940\nCustomerID and TotalSales,\nthat's exactly what I needed.\n\n239\n00:13:53.950 --> 00:13:54.640\nBut then for\n\n240\n00:13:54.640 --> 00:13:59.350\nme to start categorizing it, I need to be\nable to take this number in TotalSales,\n\n241\n00:13:59.350 --> 00:14:03.610\nto make a determination based off of it\nto actually report this third one too.\n\n242\n00:14:04.660 --> 00:14:06.478\nNow, the problem that I have is simple.\n\n243\n00:14:06.478 --> 00:14:09.671\nIs that I still want to actually\ndo a little bit more than that.\n\n244\n00:14:09.671 --> 00:14:14.300\nAnd what I want to do is\nactually group it even further.\n\n245\n00:14:14.300 --> 00:14:16.730\nI wanna categorize it all the way down.\n\n246\n00:14:18.000 --> 00:14:21.670\nAnd the way I am gonna do that\ninstead is to find out how many\n\n247\n00:14:21.670 --> 00:14:24.270\ncustomers are actually\nin each order group.\n\n248\n00:14:24.270 --> 00:14:27.660\nSo how many of my customers\nare actually Mini customers,\n\n249\n00:14:27.660 --> 00:14:29.010\nhow many are Mega customers?\n\n250\n00:14:29.010 --> 00:14:30.295\nHow many are Medium customers?\n\n251\n00:14:30.295 --> 00:14:30.825\n>> Of course,\n\n252\n00:14:30.825 --> 00:14:32.861\nI could have chosen a better name-\n>> [LAUGH]\n\n253\n00:14:32.861 --> 00:14:33.987\n>> But Medium Customer sounds pretty bad.\n\n254\n00:14:33.987 --> 00:14:35.705\nMini customers and Micro customers.\n\n255\n00:14:35.705 --> 00:14:36.947\n>> Are your average customers.\n\n256\n00:14:36.947 --> 00:14:38.890\n[LAUGH]\n>> That's my average customers, and\n\n257\n00:14:38.890 --> 00:14:40.280\nthat would have ruined the deliberation.\n\n258\n00:14:40.280 --> 00:14:41.545\n>> [LAUGH]\n>> That's what I have.\n\n259\n00:14:41.545 --> 00:14:43.220\nSo I want to do that.\n\n260\n00:14:43.220 --> 00:14:48.188\nI want to actually count those numbers up\ninstead, cuz I don't need all that data.\n\n261\n00:14:48.188 --> 00:14:51.048\nThat's 19,119 rows, and\ndon't get me wrong,\n\n262\n00:14:51.048 --> 00:14:55.100\nthat gives me something and\nI can actually start accounting it.\n\n263\n00:14:55.100 --> 00:14:57.156\nBut remember that what I've done that,\n\n264\n00:14:57.156 --> 00:14:59.881\nthat would actually be three\nsteps is what I would do.\n\n265\n00:14:59.881 --> 00:15:04.820\nNow what I'm actually gonna show you\nhere is what's called a derived table.\n\n266\n00:15:04.820 --> 00:15:09.880\nNow a derived table was really almost\na technically don't like a sub query,\n\n267\n00:15:09.880 --> 00:15:11.730\nbut it is it's a sub query.\n\n268\n00:15:11.730 --> 00:15:15.790\nIt's a query that resides in\nanother query is what we have.\n\n269\n00:15:15.790 --> 00:15:21.148\nAnd on this one this particular derived\ntable happens in the FROM statement.\n\n270\n00:15:21.148 --> 00:15:24.530\nMost sub queries, as we get into sub\nqueries we're gonna talk about that\n\n271\n00:15:24.530 --> 00:15:27.520\na little bit later,\nreside inside of the WHERE statement.\n\n272\n00:15:27.520 --> 00:15:31.190\nBut this one actually resides\nin the FROM statement here.\n\n273\n00:15:31.190 --> 00:15:35.390\nSo in this particular sense,\nit's the same query that I just ran.\n\n274\n00:15:35.390 --> 00:15:40.110\nSo notice the FROM, and everything that\nI have in here in these parenthesis\n\n275\n00:15:40.110 --> 00:15:42.350\nis the same query that I just ran.\n\n276\n00:15:44.220 --> 00:15:49.200\nNow the only thing that I cannot do\nwith this type of derived table,\n\n277\n00:15:49.200 --> 00:15:51.990\nI cannot have an order by clause.\n\n278\n00:15:51.990 --> 00:15:54.860\nSo there is no order by in\nterms of derive tables.\n\n279\n00:15:54.860 --> 00:15:56.562\nYou add one in there it's gonna tell you,\nguess what?\n\n280\n00:15:56.562 --> 00:15:58.826\nYou can't do this in a derive table.\n\n281\n00:15:58.826 --> 00:16:00.766\nThat's pretty much what it's\ngonna end up telling you.\n\n282\n00:16:00.766 --> 00:16:01.706\nBut besides that,\n\n283\n00:16:01.706 --> 00:16:05.070\nthat's the only thing that I'm\nmissing in terms of that subquery.\n\n284\n00:16:05.070 --> 00:16:10.746\nSo what it's gonna do, it's gonna run\nthrough that exact thing and show you or\n\n285\n00:16:10.746 --> 00:16:15.992\nactually not show you, but take\nthe information that we see right here on\n\n286\n00:16:15.992 --> 00:16:21.513\nour screen in terms of the results and\nit's gonna report it to this out here.\n\n287\n00:16:21.513 --> 00:16:24.819\nAnd it's actually og OrderGroup.\n\n288\n00:16:24.819 --> 00:16:28.978\nAnd that is because I told it, hey,\n\n289\n00:16:28.978 --> 00:16:35.230\nfrom that particular select query,\nreport it as og.\n\n290\n00:16:37.900 --> 00:16:40.810\nI'm gonna make sure I'm actually right.\n\n291\n00:16:40.810 --> 00:16:43.990\nAnd then, do the count of the OrderGroup.\n\n292\n00:16:43.990 --> 00:16:46.300\nIn other words, what it actually is here.\n\n293\n00:16:46.300 --> 00:16:50.047\nAnd tell me the NumberOf\nall those separate counts.\n\n294\n00:16:50.047 --> 00:16:51.231\nOkay?\n\n295\n00:16:51.231 --> 00:16:54.919\nSo that's why I don't really need\nthat data to exist anywhere else.\n\n296\n00:16:54.919 --> 00:16:55.462\nOkay?\n\n297\n00:16:55.462 --> 00:16:58.007\nAnd the only thing I'm doing is I\njust want to see how many customers\n\n298\n00:16:58.007 --> 00:16:59.850\nare actually marked in this way.\n\n299\n00:16:59.850 --> 00:17:01.900\nSo, that's all we're really doing.\n\n300\n00:17:01.900 --> 00:17:04.800\nAnd I don't need to actually have\nthat in just a temporary table or\n\n301\n00:17:04.800 --> 00:17:08.500\na view, forever and ever,\nI just need it for this one query.\n\n302\n00:17:08.500 --> 00:17:12.460\nAnd then I click Execute, and now,\n\n303\n00:17:12.460 --> 00:17:16.159\nlet me see if I can scroll into it.\n\n304\n00:17:16.159 --> 00:17:19.920\nNow we can take a look and\nsee that if I were to try and\n\n305\n00:17:19.920 --> 00:17:25.386\ndetermine the way that my customers\ndistributed out here, I have,\n\n306\n00:17:25.386 --> 00:17:31.122\na lot of micro customers, those that\nactually ordered under 5,000 and\n\n307\n00:17:31.122 --> 00:17:35.990\nthen from that point,\nbetween five to ten, about 1,764.\n\n308\n00:17:35.990 --> 00:17:43.420\nOkay, and then from 10 to 15,\nthat would be medium, okay, right here.\n\n309\n00:17:43.420 --> 00:17:46.090\nAnd then from 15 to 20 would be Mega.\n\n310\n00:17:46.090 --> 00:17:47.550\nAnd then of course, look at that,\n\n311\n00:17:47.550 --> 00:17:52.320\nmy Mighty,\nover $20,000 worth of orders here, 386.\n\n312\n00:17:52.320 --> 00:17:53.730\n>> Ronnie's doing well.\n\n313\n00:17:53.730 --> 00:17:56.420\n>> That is a good distribution there.\n\n314\n00:17:56.420 --> 00:17:57.060\nI like that.\n\n315\n00:17:57.060 --> 00:18:01.820\nThe very fact that they're actually that,\nthat's actually the high number there.\n\n316\n00:18:01.820 --> 00:18:06.580\nBut, that's what we can do and noticed\nthat this really only took one step, okay?\n\n317\n00:18:06.580 --> 00:18:10.699\nSo that's why we would use something like\na derived table, if you know that you can\n\n318\n00:18:10.699 --> 00:18:14.701\nbe using those figures over and over\nagain, yeah, you can use temporary tables\n\n319\n00:18:14.701 --> 00:18:18.550\nor even use views that are actually\ngonna be stored inside of your database.\n\n320\n00:18:18.550 --> 00:18:23.550\nBut overall though, if you're just running\nthis because you actually needed to\n\n321\n00:18:23.550 --> 00:18:28.180\nreport something like that on the fly,\nbeing able to create the idea of this\n\n322\n00:18:28.180 --> 00:18:31.460\nderived table is the way\nto go as an example.\n\n323\n00:18:31.460 --> 00:18:33.560\nSo, the first ones that we showed you,\nremember,\n\n324\n00:18:33.560 --> 00:18:36.510\ndon't count those as being derived\ntables and how you arrive at,\n\n325\n00:18:36.510 --> 00:18:40.390\nit's actually that third example that we\njust did which shows all of that stuff,\n\n326\n00:18:40.390 --> 00:18:43.450\nessentially combined and\nactually does it all at one time.\n\n327\n00:18:43.450 --> 00:18:47.570\nIt doesn't really have to take\nthree steps to get down to do that.\n\n328\n00:18:47.570 --> 00:18:51.650\nWe can actually do it all in one fail\nsweep, report that same information, and\n\n329\n00:18:51.650 --> 00:18:54.970\nthat's what makes it much more efficiently\ncuz we're only hitting the database once\n\n330\n00:18:54.970 --> 00:18:59.330\ninstead of three or four different times\nwhich makes much more efficiency as well.\n\n331\n00:18:59.330 --> 00:19:01.710\nSo, when you think about that, right?\n\n332\n00:19:01.710 --> 00:19:03.937\nRemember that when you create joints,\nokay?\n\n333\n00:19:03.937 --> 00:19:06.071\nWhen you're actually doing some of that,\n\n334\n00:19:06.071 --> 00:19:10.223\nyou are actually running a query between\ntwo tables that are actually in physical,\n\n335\n00:19:10.223 --> 00:19:14.010\nnot, I should say physical existence,\nand electronic existence.\n\n336\n00:19:14.010 --> 00:19:17.260\nI'm trying to make sure, I'm gonna\nsay physical, it's just like yeah,\n\n337\n00:19:17.260 --> 00:19:19.350\nsure Ronnie, if that was right\nthere on the wooden table.\n\n338\n00:19:19.350 --> 00:19:20.830\nNo, that's not what I mean.\n\n339\n00:19:20.830 --> 00:19:24.450\nThe data stored electronically and\nthey're actually separated in those table,\n\n340\n00:19:24.450 --> 00:19:26.520\nthose logical storages, right?\n\n341\n00:19:26.520 --> 00:19:31.956\nWell, when we actually need to run it but\nwhat if one of those tables doesn't exist?\n\n342\n00:19:31.956 --> 00:19:35.450\nWhat if I want to actually run\nit against the table that exist?\n\n343\n00:19:35.450 --> 00:19:38.610\nBut one, I haven't actually built\nany of the structures for it and\n\n344\n00:19:38.610 --> 00:19:40.470\nI'm not supposed to\nbuild temporary tables.\n\n345\n00:19:40.470 --> 00:19:44.440\nI'm not supposed to have a view for,\nderived table is the way to go, especially\n\n346\n00:19:44.440 --> 00:19:49.330\nif you need the data very quickly, and\non the fly, that's what you can do.\n\n347\n00:19:49.330 --> 00:19:53.320\nAnd then from that point, so just remember\nthat when you actually do need to make\n\n348\n00:19:53.320 --> 00:19:59.360\na choice between, do I use a join\nin this particular instance here,\n\n349\n00:19:59.360 --> 00:20:02.280\nor do I actually use a derived table?\n\n350\n00:20:02.280 --> 00:20:07.000\nWell, that's the reason why, is the data\non the fly, created really just for\n\n351\n00:20:07.000 --> 00:20:11.520\nthat one statement, it's not gonna be\nstored anywhere else and that is the key.\n\n352\n00:20:11.520 --> 00:20:16.156\nNow just when I say that, again,\nexam hint more than anything right?\n\n353\n00:20:16.156 --> 00:20:21.966\nCan you run a join against temporary\ntables and of course, yes.\n\n354\n00:20:21.966 --> 00:20:24.530\nSo, why would I still pick that?\n\n355\n00:20:24.530 --> 00:20:26.890\nI don't want to create temporary tables.\n\n356\n00:20:26.890 --> 00:20:29.347\nOr I don't want to create a view to do so.\n\n357\n00:20:29.347 --> 00:20:33.250\nI will also reuse derived tables as well.\n\n358\n00:20:33.250 --> 00:20:34.540\nSo that is the reason.\n\n359\n00:20:34.540 --> 00:20:36.450\nAnd you're gonna see that on the.\n\n360\n00:20:36.450 --> 00:20:39.680\nAs far as the exam objectives go\nthey want you to be able to pick out\n\n361\n00:20:39.680 --> 00:20:42.390\nwhen you would a join\nversus a derived table.\n\n362\n00:20:42.390 --> 00:20:46.130\nSo we want to make sure that we made\nthat clear as well in this part too.\n\n363\n00:20:46.130 --> 00:20:51.690\n>> Well, Ronnie you are a SQL querying\nwizard and your kungfu is strong sir.\n\n364\n00:20:51.690 --> 00:20:53.580\nIt was very cool to watch\nyou be able to use.\n\n365\n00:20:53.580 --> 00:20:56.490\nObviously, derived tables are something\nthat are very helpful for\n\n366\n00:20:56.490 --> 00:20:58.440\nus, that will be to our benefit.\n\n367\n00:20:58.440 --> 00:20:59.680\nSo we wanna understand them.\n\n368\n00:20:59.680 --> 00:21:01.080\nWe wanna be able to use them.\n\n369\n00:21:01.080 --> 00:21:03.120\nSo that we can get the data\nthat we're looking for.\n\n370\n00:21:03.120 --> 00:21:05.390\nThat's what it's all about when\nyou're talking about databases.\n\n371\n00:21:05.390 --> 00:21:08.250\nShow me the data that I actually need and\n\n372\n00:21:08.250 --> 00:21:12.200\nnot all that extraneous stuff that I\nmight not need now but will need later.\n\n373\n00:21:12.200 --> 00:21:12.989\nSo hold on to it.\n\n374\n00:21:12.989 --> 00:21:15.882\n[LAUGH] That being said Ronnie,\nI know it was a short episode but\n\n375\n00:21:15.882 --> 00:21:17.560\nit was a very informative one.\n\n376\n00:21:17.560 --> 00:21:19.030\nWe thank you for explaining for us.\n\n377\n00:21:19.030 --> 00:21:22.610\nWe thank you guys for joining us but we're\ngonna go ahead and sign off for ITproTV,\n\n378\n00:21:22.610 --> 00:21:24.320\nI've been your host Daniel Lowrie.\n\n379\n00:21:24.320 --> 00:21:25.025\n>> And I'm Ronnie Wong.\n\n380\n00:21:25.025 --> 00:21:26.334\n>> We'll see you next time.\n\n381\n00:21:26.334 --> 00:21:32.069\n[MUSIC]\n\n",
          "vimeoId": "164050675"
        },
        {
          "description": "In this episode, Daniel and Ronnie explain and implement 3 different types of Subqueries in SQL. They start off with the Scalar subquery, which is used to return a single value result. Next they look at the Multi-Valued subquery, which is used to return multiple results. Finally they test your logical aptitude with Correlated Subqueries which works together with the outer query.",
          "length": "2012",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-implement_subqueries-042016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-implement_subqueries-042016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-implement_subqueries-042016-1-sm.jpg",
          "title": "Implement Subqueries",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.342 --> 00:00:16.543\nAll right, greetings everyone and welcome\nto another fantastic episode of IT PRO.TV,\n\n3\n00:00:16.543 --> 00:00:18.111\nI'm your host, Daniel Lowrie.\n\n4\n00:00:18.111 --> 00:00:19.613\nAnd in today's episode,\n\n5\n00:00:19.613 --> 00:00:24.607\nwe are continuing on with our Microsoft\nSQL Server 2014 and the querying thereof.\n\n6\n00:00:24.607 --> 00:00:28.760\nAnd joining us back in the studio to help\nus with that very endeavour is the kung fu\n\n7\n00:00:28.760 --> 00:00:30.700\nmaster himself, Mr. Ronnie Wong.\n\n8\n00:00:30.700 --> 00:00:31.890\nRonnie, welcome back to the show.\n\n9\n00:00:31.890 --> 00:00:32.660\nSo how's it going?\n\n10\n00:00:32.660 --> 00:00:33.790\n>> It is going well.\n\n11\n00:00:33.790 --> 00:00:35.380\nKung fu master, I don't think so.\n\n12\n00:00:35.380 --> 00:00:37.185\n>> Your kung fu is stronger\nthan mine on this junk.\n\n13\n00:00:37.185 --> 00:00:39.706\n>> [LAUGH]\n>> Well, when it comes down to SQL Server.\n\n14\n00:00:39.706 --> 00:00:40.460\n>> You got me beat.\n\n15\n00:00:40.460 --> 00:00:43.134\n>> I've worked with it a little\nbit longer here than you have.\n\n16\n00:00:43.134 --> 00:00:47.889\nBut overall though, we are continuing\non our journey, taking a look at more\n\n17\n00:00:47.889 --> 00:00:53.360\nSQL Server 2014 and working of course\nwith the language itself, Transact-SQL.\n\n18\n00:00:53.360 --> 00:00:57.745\nAnd we're up into this point where we need\nto talk about a little bit more unusual\n\n19\n00:00:57.745 --> 00:00:58.862\nquerying, right?\n\n20\n00:00:58.862 --> 00:01:02.560\nSo we already talked about of course,\nin previous episodes here,\n\n21\n00:01:02.560 --> 00:01:06.666\nof being able to make sure that we know\nhow to query against a single table.\n\n22\n00:01:06.666 --> 00:01:09.203\nAnd then we also talked about\nJoins which allow us to\n\n23\n00:01:09.203 --> 00:01:13.109\nbe able to connect multiple tables\ntogether and run queries against them too.\n\n24\n00:01:13.109 --> 00:01:18.328\nAnd we even mentioned a little bit, dove\ninto derived tables just briefly as well.\n\n25\n00:01:18.328 --> 00:01:21.918\nAnd now, we're actually going to start\nentering into the world of what basic\n\n26\n00:01:21.918 --> 00:01:24.800\nsubquerying is what we're\nactually talking about.\n\n27\n00:01:24.800 --> 00:01:26.710\nNow, it's exactly like it sounds like.\n\n28\n00:01:26.710 --> 00:01:31.178\nThe term subquery, under a query, or\ntechnically, what we're actually doing is,\n\n29\n00:01:31.178 --> 00:01:33.735\nwe're actually running\na query within a query.\n\n30\n00:01:33.735 --> 00:01:37.182\nWe're not running two separate queries,\nokay?\n\n31\n00:01:37.182 --> 00:01:39.808\nBut we're actually running\na query within a query.\n\n32\n00:01:39.808 --> 00:01:44.180\nNow, if you think about this, right, when\nwe talked about the realm of Inner Joins,\n\n33\n00:01:44.180 --> 00:01:47.701\nif you're not familiar with the idea\nof Joins make sure you go back and\n\n34\n00:01:47.701 --> 00:01:51.180\ntake a look at the episode there\nabout querying with Joins.\n\n35\n00:01:51.180 --> 00:01:55.500\nAnd we talk about the ability to,\nwell, take two separate tables and\n\n36\n00:01:55.500 --> 00:01:59.530\nbe able to actually run a single query and\nget information out of both tables.\n\n37\n00:01:59.530 --> 00:02:04.930\nIn terms of subquerying,\nthe logic works almost the same, okay?\n\n38\n00:02:04.930 --> 00:02:09.440\nIn this sense is that we actually have\na query that we actually need to run and\n\n39\n00:02:09.440 --> 00:02:12.900\nwe actually have another query that's\ngonna help us to get the information that\n\n40\n00:02:12.900 --> 00:02:17.700\nwe need as well to help\nthe other query run too.\n\n41\n00:02:17.700 --> 00:02:19.940\nSo we're essentially taking\nthat information and\n\n42\n00:02:19.940 --> 00:02:25.090\npulling it from two separate queries and\nthen having the results report as one.\n\n43\n00:02:25.090 --> 00:02:29.180\nNow, when we start talking about\nthe idea of subqueries then,\n\n44\n00:02:29.180 --> 00:02:32.580\nthere are a couple of different types,\nactually three different types of\n\n45\n00:02:32.580 --> 00:02:36.130\nsubqueries that you and\nI need to be familiar with.\n\n46\n00:02:36.130 --> 00:02:37.855\nAnd there of course is, well,\n\n47\n00:02:37.855 --> 00:02:42.270\nT-SQL terminology that you need\nto be familiar with as well.\n\n48\n00:02:42.270 --> 00:02:44.380\nAnd so this is a great place for\n\n49\n00:02:44.380 --> 00:02:48.780\nus to actually take a brief moment\nto talk about this too, okay?\n\n50\n00:02:48.780 --> 00:02:53.740\nSo, when we talk about the purpose\nof creating a subquery,\n\n51\n00:02:53.740 --> 00:02:55.630\nokay, and why we actually need it?\n\n52\n00:02:55.630 --> 00:03:00.880\nIt is because normally when we go ahead\nand we select information, right?\n\n53\n00:03:00.880 --> 00:03:03.480\nWe're just selecting entire columns, okay,\n\n54\n00:03:03.480 --> 00:03:07.890\nthat we actually need from the table\nthat we need, and that makes sense.\n\n55\n00:03:07.890 --> 00:03:09.880\nAnd then at some point though,\n\n56\n00:03:09.880 --> 00:03:15.550\nwe normally also end up providing a filter\nusing the where statement as well.\n\n57\n00:03:15.550 --> 00:03:18.820\nAnd normally when we do something like\nthat we actually add in the word where.\n\n58\n00:03:18.820 --> 00:03:22.140\nAnd then from that point we might\ndo something like an equal sign.\n\n59\n00:03:22.140 --> 00:03:25.760\nOr we might do one of those operators\nthat helps us out saying that, hey,\n\n60\n00:03:25.760 --> 00:03:30.950\nwhere this particular field is equal\nto this value that we want, okay?\n\n61\n00:03:30.950 --> 00:03:34.180\nSo, that's kind of a basic\nfilter that we have.\n\n62\n00:03:34.180 --> 00:03:36.100\nBut in terms of subquerying,\n\n63\n00:03:36.100 --> 00:03:40.430\nwe might find out that we want that\nfilter to be a little bit more detailed.\n\n64\n00:03:40.430 --> 00:03:43.680\nWe want that filter to\nactually do something else and\n\n65\n00:03:43.680 --> 00:03:47.180\nreturn that information to\nthe outer query for us too.\n\n66\n00:03:47.180 --> 00:03:50.520\nAnd that's what subquerying\nhelps us to be able to do.\n\n67\n00:03:50.520 --> 00:03:53.880\nSo, when we first start\nto look at subqueries,\n\n68\n00:03:53.880 --> 00:03:56.990\nyou have to know the key\nbehind making this work, okay?\n\n69\n00:03:56.990 --> 00:04:01.560\nThe key behind making this work is\nto realize that the subquery itself\n\n70\n00:04:01.560 --> 00:04:05.590\ncan only return a single value, okay?\n\n71\n00:04:05.590 --> 00:04:09.030\nSo, if you actually say, hey,\nI wanna do a subquery, and\n\n72\n00:04:09.030 --> 00:04:12.450\nthen you actually run that\nparticular query by itself and\n\n73\n00:04:12.450 --> 00:04:16.670\nreturn to you multiple values,\nit normally means something's wrong.\n\n74\n00:04:16.670 --> 00:04:21.120\nSo, let me show you an example of\nwhat I'm talking about right here.\n\n75\n00:04:21.120 --> 00:04:24.010\nSo, here it is on my SQL Server.\n\n76\n00:04:24.010 --> 00:04:29.194\nI've got a fairly simple subquery\ngoing on, and I went ahead and\n\n77\n00:04:29.194 --> 00:04:35.380\nput in the comment here,\nwhat we call a Scalar Subquery, okay?\n\n78\n00:04:35.380 --> 00:04:39.650\nNow, this is the terminology you\nneed to be familiar with, okay?\n\n79\n00:04:39.650 --> 00:04:43.419\nThe term scalar for\nus in terms of the SQL language,\n\n80\n00:04:43.419 --> 00:04:47.727\nmeans that it's gonna return\nonly a single value, okay?\n\n81\n00:04:47.727 --> 00:04:52.213\nSo if you actually get multiple\nvalues that means it's wrong, okay?\n\n82\n00:04:52.213 --> 00:04:56.032\nAnd it can't be considered\na Scalar Subquery, okay?\n\n83\n00:04:56.032 --> 00:04:59.752\nYou actually have a Scalar Subquery when\nthe value inside of that actually is only\n\n84\n00:04:59.752 --> 00:05:01.500\nreturned one time.\n\n85\n00:05:01.500 --> 00:05:04.980\nAlso in subquerying then,\nwhen you go ahead and\n\n86\n00:05:04.980 --> 00:05:09.351\ndo this traditionally you find\nsubqueries in the Where statement, okay?\n\n87\n00:05:10.490 --> 00:05:15.014\nSo notice right here where I have\nWhere and that's gonna be a bonus and\n\n88\n00:05:15.014 --> 00:05:19.464\nthat bonus is gonna equal this\nparticular query right here, okay?\n\n89\n00:05:19.464 --> 00:05:21.970\nSo when we start to see\nsomething like that,\n\n90\n00:05:21.970 --> 00:05:25.583\nthat actually looks like it's\nactually fine and good, okay?\n\n91\n00:05:25.583 --> 00:05:29.333\nSo the key though is if I need\nto return a Scalar Subquery,\n\n92\n00:05:29.333 --> 00:05:33.800\nI need to be careful, okay,\nabout what value it actually returns.\n\n93\n00:05:33.800 --> 00:05:38.320\nSo this is in theory here suppose\nto return to me a single value.\n\n94\n00:05:38.320 --> 00:05:40.720\nNow the other thing\nabout subqueries though,\n\n95\n00:05:40.720 --> 00:05:44.470\nespecially when you're running a Scalar\nSubquery is that the query itself,\n\n96\n00:05:44.470 --> 00:05:46.650\nthe subquery I should say, excuse me.\n\n97\n00:05:46.650 --> 00:05:49.670\nNotice that there's two select statements,\nthis one and of course,\n\n98\n00:05:49.670 --> 00:05:51.070\nthe outer one here.\n\n99\n00:05:51.070 --> 00:05:53.330\nThe subquery's actually right here.\n\n100\n00:05:53.330 --> 00:05:56.680\nI should be able to\nhighlight that subquery and\n\n101\n00:05:56.680 --> 00:06:01.490\nrun it execution wise, and\nnotice it returns to me values.\n\n102\n00:06:01.490 --> 00:06:04.150\nNow, when I take a look at\nthe values that it returns,\n\n103\n00:06:04.150 --> 00:06:10.130\nthat actually returned to me 17 different\nrows is what it actually returned.\n\n104\n00:06:10.130 --> 00:06:14.540\nNow, when I told you that it only\nreturns one value, a lot of times at\n\n105\n00:06:14.540 --> 00:06:17.688\nthe beginning we think that that's exactly\nwhat it's doing because I see what,\n\n106\n00:06:17.688 --> 00:06:20.220\none column, okay?\n\n107\n00:06:20.220 --> 00:06:22.680\nSo we think that that's right,\nthat that will actually run and\n\n108\n00:06:22.680 --> 00:06:25.430\nthat's perfectly good and\nthat's what we should do.\n\n109\n00:06:25.430 --> 00:06:29.080\nBut when I meant that it actually\nreturned to a single value,\n\n110\n00:06:29.080 --> 00:06:31.250\nthat's all it's supposed to do.\n\n111\n00:06:31.250 --> 00:06:34.910\nSo most of us at the beginning when we\nrealize it's really just a query within\n\n112\n00:06:34.910 --> 00:06:38.350\na query that we add in\nhere inside of the Where.\n\n113\n00:06:38.350 --> 00:06:43.090\nThe only thing we need to make sure\nof is the logic behind it, right?\n\n114\n00:06:43.090 --> 00:06:44.940\nSo let's take a look at\nwhat I'm doing here and\n\n115\n00:06:44.940 --> 00:06:48.310\nI've actually got a couple of other\nelements that have now thrown us a little\n\n116\n00:06:48.310 --> 00:06:51.890\nbit more into the advanced element in\nwhich we may not have seen before.\n\n117\n00:06:51.890 --> 00:06:55.570\nSo what I'm saying is in\nthis particular query,\n\n118\n00:06:55.570 --> 00:06:58.997\nmake sure you return the first and\nlast name.\n\n119\n00:06:58.997 --> 00:07:02.786\nNow, when you take a look at what\nI've highlighted here, okay?\n\n120\n00:07:02.786 --> 00:07:04.695\nNotice it's a little bit different,\n\n121\n00:07:04.695 --> 00:07:07.210\nI didn't actually have\na comma after FirstName.\n\n122\n00:07:07.210 --> 00:07:11.225\nI actually have a plus, and\nthen a single quote, a space, and\n\n123\n00:07:11.225 --> 00:07:13.397\na single quote and a plus, okay?\n\n124\n00:07:13.397 --> 00:07:17.749\nHere it is, another term you also\nneed to familiarize yourself with,\n\n125\n00:07:17.749 --> 00:07:20.347\nwhich is the term concatenation, okay?\n\n126\n00:07:20.347 --> 00:07:25.215\nThe term concatenation allows me to take\nmultiple fields that I would normally\n\n127\n00:07:25.215 --> 00:07:30.080\nselect from, multiple columns and\nbe able to report them as one, okay?\n\n128\n00:07:30.080 --> 00:07:33.330\nSo instead of me having\na comma after FirstName,\n\n129\n00:07:33.330 --> 00:07:37.942\nwhat I'm saying is go ahead and\ncombine together FirstName, okay?\n\n130\n00:07:37.942 --> 00:07:41.880\nWith a plus sign and\nthen the single quote and\n\n131\n00:07:41.880 --> 00:07:46.669\nthe space and\nthen the closing of that single quote and\n\n132\n00:07:46.669 --> 00:07:51.566\nthen another space means,\nI want to make sure that when\n\n133\n00:07:51.566 --> 00:07:56.478\nthis is reported as FirstName\nspace LastName, okay?\n\n134\n00:07:56.478 --> 00:08:00.937\nAnd I'm gonna tell it to report it\nunderneath the heading of SalesPerson Is\n\n135\n00:08:00.937 --> 00:08:03.006\nwhat I'm actually wanting to do.\n\n136\n00:08:03.006 --> 00:08:07.141\nNow, when I do something like that\nI'm also telling it that hey,\n\n137\n00:08:07.141 --> 00:08:09.930\nit's from the person table inner joined.\n\n138\n00:08:09.930 --> 00:08:13.490\nOr on the sales person\ntable on business ID and\n\n139\n00:08:13.490 --> 00:08:19.210\nthe only filter here that I really want it\nto return is if they have a bonus or not.\n\n140\n00:08:20.260 --> 00:08:23.230\nNow, how do I actually\ndetermine if they have a bonus?\n\n141\n00:08:23.230 --> 00:08:25.140\nWell, I need to go ahead and then,\n\n142\n00:08:25.140 --> 00:08:29.610\nrun another query from\nthe salesperson table then.\n\n143\n00:08:29.610 --> 00:08:33.040\nThe salesperson table has\na column called bonus, and\n\n144\n00:08:33.040 --> 00:08:36.280\nthey're actually able to pull\nit from this information.\n\n145\n00:08:36.280 --> 00:08:40.050\nSo, when we run this, it has to\nrun two different queries, right?\n\n146\n00:08:40.050 --> 00:08:43.320\nOne to be able to pull out\nthe information on the bonus,\n\n147\n00:08:43.320 --> 00:08:48.000\non the salesperson here, and\nthen report the name as well, okay,\n\n148\n00:08:48.000 --> 00:08:50.890\nof who's actually getting\na bonus at this point.\n\n149\n00:08:50.890 --> 00:08:54.390\nSo, let's see what happens\nwhen we run this query.\n\n150\n00:08:54.390 --> 00:08:57.030\nSo, when I select this, and\n\n151\n00:08:57.030 --> 00:09:00.790\nthen I execute, notice,\nI am now getting an error.\n\n152\n00:09:03.020 --> 00:09:06.070\nRemember, that one of the things that\nwe really want to make sure that we can\n\n153\n00:09:06.070 --> 00:09:11.690\ndetermine here, especially, during our\nseries, is when you see errors that it\n\n154\n00:09:11.690 --> 00:09:16.120\nactually points you in the right direction\nthat you know what we need to do.\n\n155\n00:09:16.120 --> 00:09:17.810\nSo, sometimes,\nwhen you run subqueries, and\n\n156\n00:09:17.810 --> 00:09:20.050\nthis is where I would used to get\nit all the time, is right here,\n\n157\n00:09:20.050 --> 00:09:26.130\nbecause I would not be thinking about the\nnature of what I just ran as a subquery.\n\n158\n00:09:26.130 --> 00:09:28.400\nSo, the Subquery, notice what it says.\n\n159\n00:09:28.400 --> 00:09:35.030\nSubquery returned more\nthan a single value, okay.\n\n160\n00:09:35.030 --> 00:09:39.330\nAnd look, this is not permitted\nwhen the subquery follows\n\n161\n00:09:39.330 --> 00:09:44.410\nan equal sign or a not equal,\ngreater than, or\n\n162\n00:09:44.410 --> 00:09:49.970\nless than, less than equal to, greater\nthan, greater than equal to or an or.\n\n163\n00:09:49.970 --> 00:09:55.640\nSo, you can actually imagine then that\nwhat it's saying is that the very fact is\n\n164\n00:09:55.640 --> 00:10:01.220\nit saw my operator up here,\nwhich is going to be the equals sign,\n\n165\n00:10:01.220 --> 00:10:05.660\nand then it actually ended\nup returning more values.\n\n166\n00:10:05.660 --> 00:10:09.060\nAnd we saw the entire column\nof values it returned and\n\n167\n00:10:09.060 --> 00:10:11.610\nit's saying, I do not like that.\n\n168\n00:10:11.610 --> 00:10:13.330\nOkay, so there it is.\n\n169\n00:10:13.330 --> 00:10:15.100\nIt returned 17 rows of values.\n\n170\n00:10:15.100 --> 00:10:16.850\nSubquery is only supposed to return one.\n\n171\n00:10:16.850 --> 00:10:19.520\nThat's part of the scalar subquery, right?\n\n172\n00:10:19.520 --> 00:10:22.880\nAnd then, we have to make sure that\nit can run on its own, which it can.\n\n173\n00:10:22.880 --> 00:10:25.870\nSo, that's what we have available to us.\n\n174\n00:10:25.870 --> 00:10:29.250\nSo, how in the world do I then take that?\n\n175\n00:10:29.250 --> 00:10:34.050\nAnd actually, make it do what\na scalar subquery is supposed to do.\n\n176\n00:10:34.050 --> 00:10:38.580\nWell, I need to be able to convert\nthat particular subquery then\n\n177\n00:10:38.580 --> 00:10:43.100\nto return a single value\nis what I need and then,\n\n178\n00:10:43.100 --> 00:10:46.780\nthat will actually get me\nthe result that I want, all right?\n\n179\n00:10:46.780 --> 00:10:49.430\nSo, let's go ahead and\nI'm gonna scroll down and\n\n180\n00:10:49.430 --> 00:10:55.190\nthis is where I correct it, at least\nthat's what I hope I've done, okay?\n\n181\n00:10:55.190 --> 00:11:00.740\nNow, if we take a look at this particular\nquery here, notice, it's the same\n\n182\n00:11:00.740 --> 00:11:04.570\nexact query, except we've actually\ncorrected it a little bit here, okay?\n\n183\n00:11:04.570 --> 00:11:07.970\nSo now, I've told it to actually\nreturn first name, last name, and\n\n184\n00:11:07.970 --> 00:11:11.416\nthen also bonus, right here.\n\n185\n00:11:11.416 --> 00:11:16.660\nSame inner joined query but\nthis time bonus is as you gonna be,\n\n186\n00:11:16.660 --> 00:11:22.050\nwell, what's the maximum bonus\nin that particular column, okay?\n\n187\n00:11:22.050 --> 00:11:23.280\nWe'll now, notice its different,\n\n188\n00:11:23.280 --> 00:11:28.230\nlet's say take from these 17 and show me\nwhat that maximum number is gonna be,\n\n189\n00:11:28.230 --> 00:11:31.160\nand then scroll down through I'm\njust trying to do it quickly.\n\n190\n00:11:31.160 --> 00:11:35.270\nI think the maximum number is 6,700\nif I'm actually correct there.\n\n191\n00:11:35.270 --> 00:11:39.750\nSo, if I just run that particular query,\nand\n\n192\n00:11:39.750 --> 00:11:42.890\nselect execute,\nnotice it returns to me what?\n\n193\n00:11:42.890 --> 00:11:45.400\nA single value.\n\n194\n00:11:45.400 --> 00:11:48.290\nAnd there it is,\nthere's that 6,700 that I want.\n\n195\n00:11:48.290 --> 00:11:50.235\nSo, if I need to run a subquery and\n\n196\n00:11:50.235 --> 00:11:54.140\nI actually see columns of information\nis not going to work, okay?\n\n197\n00:11:54.140 --> 00:11:57.306\nEspecially, they're asking me\nto create a scalar subquery, and\n\n198\n00:11:57.306 --> 00:11:59.180\nI need to make sure I do something here.\n\n199\n00:11:59.180 --> 00:12:01.940\nAnd here, we actually have some\ndifferent function to help us.\n\n200\n00:12:01.940 --> 00:12:06.420\nAll right, so there is a few things that\nwe can do, notice that I have the word MAX\n\n201\n00:12:06.420 --> 00:12:11.120\nhere, and then I have these parenthesis\naround this particular column okay?\n\n202\n00:12:11.120 --> 00:12:13.760\nWell, now, we're actually getting in\nto some of different what we'd call\n\n203\n00:12:13.760 --> 00:12:16.750\naggregate functions that\nwill help us to do this.\n\n204\n00:12:16.750 --> 00:12:19.240\nNow, we actually will have another\nshow that's gonna come up, and\n\n205\n00:12:19.240 --> 00:12:22.190\nwe're gonna be discussing all these\ndifferent aggregate functions here, but\n\n206\n00:12:22.190 --> 00:12:25.730\nthat's what we're trying to do, is we're\nactually trying to report a single value.\n\n207\n00:12:25.730 --> 00:12:30.040\nSo, I could have actually selected\nminimum instead if I wanted to,\n\n208\n00:12:30.040 --> 00:12:34.980\nby simply selecting min, and\nthis would actually return to me,\n\n209\n00:12:34.980 --> 00:12:36.119\nof course, the minimum number.\n\n210\n00:12:37.220 --> 00:12:40.280\nAnd you'll notice that this is\nactually not going to work either.\n\n211\n00:12:40.280 --> 00:12:43.930\nAnd the reason why, notice that all three\nof these ended up with a zero value.\n\n212\n00:12:45.050 --> 00:12:48.960\nSo, if I wanted to try and run the entire\nthing, actually it did end up working so\n\n213\n00:12:48.960 --> 00:12:50.010\nthat's actually fine.\n\n214\n00:12:50.010 --> 00:12:51.590\nSo, it actually does like even that.\n\n215\n00:12:51.590 --> 00:12:54.190\nI was surprised that it was\nable to return to me that.\n\n216\n00:12:54.190 --> 00:12:56.430\nBut because, it's actually\nreturning what the minimal is,\n\n217\n00:12:56.430 --> 00:12:59.240\nwhich is just a single value here.\n\n218\n00:12:59.240 --> 00:13:01.450\nIt was able to report that as well.\n\n219\n00:13:01.450 --> 00:13:03.510\nSo, it's kind of interesting\nthat what we can do.\n\n220\n00:13:03.510 --> 00:13:06.780\nLet's see, if we can actually do\nsome of the other ones like average.\n\n221\n00:13:06.780 --> 00:13:08.620\nSo, I don't know if this is\nactually gonna return anything.\n\n222\n00:13:08.620 --> 00:13:09.720\nI don't know if it makes sense.\n\n223\n00:13:09.720 --> 00:13:11.420\n>> You know what?\nI'm a little confused here.\n\n224\n00:13:11.420 --> 00:13:13.360\nYou said it was supposed to\nreturn a single value and\n\n225\n00:13:13.360 --> 00:13:16.920\nwhen we got the whole column of data back,\nthat was wrong.\n\n226\n00:13:16.920 --> 00:13:20.200\nIt complained about it through\nthe red text up on the screen.\n\n227\n00:13:20.200 --> 00:13:22.230\nBut when we did the other way,\n\n228\n00:13:22.230 --> 00:13:25.960\nwith the maximum,\ngave us actually one single value.\n\n229\n00:13:25.960 --> 00:13:28.910\nNow, with the minimum, it gave us,\nwhat looks like three values.\n\n230\n00:13:28.910 --> 00:13:29.470\n>> Three values.\n\n231\n00:13:29.470 --> 00:13:31.270\n>> But,\nyou're saying that it's a single value.\n\n232\n00:13:31.270 --> 00:13:32.270\nHow does that work out?\n\n233\n00:13:32.270 --> 00:13:35.110\n>> Yeah,\nthis may actually be something either,\n\n234\n00:13:35.110 --> 00:13:37.925\nI'm actually not saying it correctly,\nwhich is possible, okay.\n\n235\n00:13:37.925 --> 00:13:41.050\n[LAUGH] So, Let me check here and verify.\n\n236\n00:13:41.050 --> 00:13:45.460\nSo, if I just run this, okay,\nso let me show you again.\n\n237\n00:13:45.460 --> 00:13:48.450\nSo, notice that when I run\njust the subquery itself,\n\n238\n00:13:48.450 --> 00:13:50.720\nit's supposed to return a single value.\n\n239\n00:13:50.720 --> 00:13:52.770\nAnd notice, I put the MIN in here.\n\n240\n00:13:52.770 --> 00:13:55.600\nNow, notice it returns\nto me that single value.\n\n241\n00:13:55.600 --> 00:13:59.030\nSo, it's taking that one value,\nand then running it together.\n\n242\n00:13:59.030 --> 00:14:02.320\nLet me get out of this zoom because\nthat's probably what's confusing me here.\n\n243\n00:14:02.320 --> 00:14:07.310\nNow, I get out of that zoom a little bit,\nand then I select the whole thing.\n\n244\n00:14:07.310 --> 00:14:13.820\nWell, because it's actually basing that\nquery off of that one, it, crud, sorry.\n\n245\n00:14:13.820 --> 00:14:18.990\nHere we go, look at that, it's neat,\n[LAUGH] it's like driving.\n\n246\n00:14:18.990 --> 00:14:21.040\nSo now,\nit actually took that one value and\n\n247\n00:14:21.040 --> 00:14:24.110\nreturned it against that\nouter value there, okay.\n\n248\n00:14:24.110 --> 00:14:27.060\nIt is what we had the ability to do.\n\n249\n00:14:27.060 --> 00:14:30.330\nSo, by doing something like that, it still\ndid the same thing that the MAX did.\n\n250\n00:14:32.340 --> 00:14:36.749\nMAX still returns a single value So,\n\n251\n00:14:36.749 --> 00:14:40.531\nthere is one value again, and MIN did\nthe same thing which was zero, but then it\n\n252\n00:14:40.531 --> 00:14:44.160\nfound in the outer value that there\nwere three that actually matched that.\n\n253\n00:14:44.160 --> 00:14:46.650\nNow, on this one though,\nthis should only match one.\n\n254\n00:14:46.650 --> 00:14:51.380\nI think, this should only be one MAX\nunless there were multiple that were\n\n255\n00:14:51.380 --> 00:14:53.800\nat 6700, which\n>> So, in the entire query,\n\n256\n00:14:53.800 --> 00:14:55.220\nit was the only result.\n\n257\n00:14:55.220 --> 00:14:57.350\n>> Right.\n>> Where in our minimum,\n\n258\n00:14:57.350 --> 00:14:59.120\nthere wer multiple results\n>> There were three.\n\n259\n00:14:59.120 --> 00:15:00.685\n>> But inside of that subquery,\n\n260\n00:15:00.685 --> 00:15:02.993\nit only returned one so,therefore\n>> Yeah.\n\n261\n00:15:02.993 --> 00:15:03.890\n>> Makes sense.\n\n262\n00:15:03.890 --> 00:15:06.520\n>> And so now, there it is here.\n\n263\n00:15:06.520 --> 00:15:08.600\nI can't pronounce that guy's name.\n\n264\n00:15:08.600 --> 00:15:09.851\nHow do you pronounce T-S-V-I?\n\n265\n00:15:09.851 --> 00:15:15.620\n>> [LAUGH]\n>> We'll call it V rightner.\n\n266\n00:15:15.620 --> 00:15:18.050\n>> We'll call it George.\n\n267\n00:15:18.050 --> 00:15:22.120\n[LAUGH] So somebody may actually know,\nI don't know but I'm gonna say it's V or\n\n268\n00:15:22.120 --> 00:15:25.700\nCV or something like that.\n\n269\n00:15:25.700 --> 00:15:28.130\nSo, here it is\n>> We know that he actually had\n\n270\n00:15:28.130 --> 00:15:30.880\nthe maximum bonus for\nus in that particular year.\n\n271\n00:15:30.880 --> 00:15:31.435\n>> Good job, George.\n\n272\n00:15:31.435 --> 00:15:33.400\n[LAUGH]\n>> So yeah, that's a great job for\n\n273\n00:15:33.400 --> 00:15:35.860\nhim to actually be able\nto have that as well.\n\n274\n00:15:35.860 --> 00:15:38.960\nSo, being able to actually\nreturn that single value to\n\n275\n00:15:38.960 --> 00:15:41.710\nthe outer query is going to be key.\n\n276\n00:15:41.710 --> 00:15:43.110\nNow, for most of us,\n\n277\n00:15:43.110 --> 00:15:48.250\nwhen we start doing stuff like this, this\nis what you really are looking for, okay?\n\n278\n00:15:48.250 --> 00:15:51.649\nAt least a majority of the times as\nI've ever actually run subqueries,\n\n279\n00:15:51.649 --> 00:15:54.213\nI've always had to have\nsomething like this, okay?\n\n280\n00:15:54.213 --> 00:15:58.905\nThat particular type of aggregate function\nto help me to actually return that one\n\n281\n00:15:58.905 --> 00:16:01.606\nvalue that I was looking for\nTo bring that out.\n\n282\n00:16:01.606 --> 00:16:06.510\nSo, it's one of those unusual things but\nthis is what you're looking for\n\n283\n00:16:06.510 --> 00:16:12.280\ninside of a scalar subquery, the subquery\nitself can be run by itself first.\n\n284\n00:16:12.280 --> 00:16:16.960\nIf you actually run this and it doesn't\nreturn to you a value, not because you\n\n285\n00:16:16.960 --> 00:16:19.410\nactually said, know what, that should\nactually return to me something and\n\n286\n00:16:19.410 --> 00:16:23.890\nit's still not, more than likely you're\nnot writing that query correctly, okay.\n\n287\n00:16:23.890 --> 00:16:26.190\nSo you need to make sure\nit can return the values.\n\n288\n00:16:26.190 --> 00:16:29.920\nIt will return to you a ton of values\nperfectly fine, you're running the query,\n\n289\n00:16:29.920 --> 00:16:33.260\nthen you can use one of\nthose aggregate types of\n\n290\n00:16:33.260 --> 00:16:36.070\nfunctions that helps you\nreport a single value.\n\n291\n00:16:36.070 --> 00:16:41.090\nOnce you get a single value then, and\nyou can run that against the entire thing.\n\n292\n00:16:41.090 --> 00:16:44.920\nNow you have a basic scalar subquery,\nokay.\n\n293\n00:16:44.920 --> 00:16:49.238\nNow, what makes it scalar is this\nright here, is that equal sign, okay.\n\n294\n00:16:49.238 --> 00:16:53.590\nThat equal sign or unequal or what ever\nit might be not equal to, it is, it's\n\n295\n00:16:53.590 --> 00:16:58.540\nonly looking for a single deterministic\nvalue is what we're taking a look at.\n\n296\n00:16:58.540 --> 00:17:01.460\nSo, when you actually see that,\nthat's gonna be key.\n\n297\n00:17:01.460 --> 00:17:04.400\nNow, not every time are you gonna do this,\nright.\n\n298\n00:17:04.400 --> 00:17:08.427\nThere are some times where you will\nend up with what we call multi-valued\n\n299\n00:17:08.427 --> 00:17:10.010\nqueries, okay.\n\n300\n00:17:10.010 --> 00:17:14.304\nNow, in a multi-valued query, let me go\nahead and do something else real quick,\n\n301\n00:17:14.304 --> 00:17:16.419\nwhich is I'm gonna comment this out, so\n\n302\n00:17:16.419 --> 00:17:19.057\nI don't have to keep on\nhighlighting above here.\n\n303\n00:17:21.680 --> 00:17:24.397\nOop, well that's not gonna work [LAUGH].\n\n304\n00:17:29.799 --> 00:17:30.805\nWhat did I do wrong?\n\n305\n00:17:30.805 --> 00:17:32.524\nThat's supposed to turn green.\n\n306\n00:17:32.524 --> 00:17:34.057\nThere we go that's why.\n\n307\n00:17:39.408 --> 00:17:41.170\nThey're on the other side there.\n\n308\n00:17:41.170 --> 00:17:43.290\nAll right, so that way it won't run again.\n\n309\n00:17:43.290 --> 00:17:47.550\nAnd now, we're gonna take a look at what\nare called multi-valued subqueries, okay?\n\n310\n00:17:47.550 --> 00:17:51.432\nNow, in the multi-valued subquery,\nlet me take a look,\n\n311\n00:17:51.432 --> 00:17:53.910\nthis is a little bit more tricky.\n\n312\n00:17:53.910 --> 00:17:56.950\nAnd I wanted us to be able to\nsee this because sometimes\n\n313\n00:17:56.950 --> 00:17:59.180\nthis is what ends up happening, okay.\n\n314\n00:17:59.180 --> 00:18:02.645\nSo, when you're getting ready there's\ngonna be, I'm not gonna say that\n\n315\n00:18:02.645 --> 00:18:06.180\nthere's absolutely 100% chance,\ncuz I can't tell you that for sure.\n\n316\n00:18:06.180 --> 00:18:08.484\nBut there's always a chance on,\n\n317\n00:18:08.484 --> 00:18:13.753\nwhen you're actually taking a look\nat a 74-461 exam, where they're\n\n318\n00:18:13.753 --> 00:18:19.040\ngoing ask you to choose from different\nqueries and we know Microsoft exams.\n\n319\n00:18:20.300 --> 00:18:24.431\nDaniel, the chances that those\nqueries are gonna look almost\n\n320\n00:18:24.431 --> 00:18:27.298\n99.97% identical is gonna be what?\n\n321\n00:18:27.298 --> 00:18:28.935\n>> It's gonna be 99.97%.\n\n322\n00:18:28.935 --> 00:18:30.330\n>> [LAUGH]\n>> And\n\n323\n00:18:30.330 --> 00:18:34.520\nnot only that they'll look identical, but\nsome of them might actually even work.\n\n324\n00:18:34.520 --> 00:18:40.050\nAnd they love to throw that, what's\nthe best way that you should do this?\n\n325\n00:18:40.050 --> 00:18:41.070\nDon't forget that.\n\n326\n00:18:41.070 --> 00:18:43.560\nWe'll always throw in the best\npractice on top of it.\n\n327\n00:18:43.560 --> 00:18:47.260\nSo, not only looking at\na bunch of different queries,\n\n328\n00:18:47.260 --> 00:18:49.565\nsome of them which may work,\nif not all of them.\n\n329\n00:18:49.565 --> 00:18:51.975\nYou have to find the one that\nthey're actually looking for\n\n330\n00:18:51.975 --> 00:18:55.265\ngiven a set of variables that\nthey'll throw in on the question.\n\n331\n00:18:55.265 --> 00:18:57.735\nSo, very tricky test taker,\nthose Microsoft people.\n\n332\n00:18:57.735 --> 00:18:58.915\n>> It can be.\n\n333\n00:18:58.915 --> 00:19:04.065\nNow, I want us to take a look at this and\nsee if we can spot the differences or\n\n334\n00:19:04.065 --> 00:19:06.445\nactually the sameness to this.\n\n335\n00:19:06.445 --> 00:19:09.890\nBecause this is something that\ncan end up happening to you\n\n336\n00:19:09.890 --> 00:19:12.960\nwhere you don't actually\nnotice it a little bit, right.\n\n337\n00:19:12.960 --> 00:19:14.551\nSo, when we took that look\nat the first one, right.\n\n338\n00:19:14.551 --> 00:19:18.090\nSELECT FirstName,\nLastName looks good, bonus.\n\n339\n00:19:18.090 --> 00:19:21.510\nAnd as you're skimming through this and\nyou're taking a look, and\n\n340\n00:19:21.510 --> 00:19:25.295\nI look at that and then I take a look at,\nlet's say option B right down here.\n\n341\n00:19:25.295 --> 00:19:27.588\nAnd then, I take a look and\n\n342\n00:19:27.588 --> 00:19:33.445\nI'm like that looks exactly\nidentical to me, okay, just about.\n\n343\n00:19:33.445 --> 00:19:36.208\nNow the strange thing is this, okay?\n\n344\n00:19:36.208 --> 00:19:39.190\nI did actually give you a hint here,\ncuz of my comment, right?\n\n345\n00:19:39.190 --> 00:19:42.370\nThat this is what's called\na multi-valued subquery.\n\n346\n00:19:42.370 --> 00:19:46.520\nSometimes, you do want the entire column\nof information to be returned, okay?\n\n347\n00:19:46.520 --> 00:19:51.359\nBut if you did it in the first way,\nwith this equal sign, you're done.\n\n348\n00:19:51.359 --> 00:19:55.230\nCuz it just tells you, yeah can't do that,\nyou got an equals sign, I'm looking for\n\n349\n00:19:55.230 --> 00:19:57.730\na single value, it's not going to work.\n\n350\n00:19:57.730 --> 00:20:02.418\nBut notice that the only real\ndifference here, and a big difference,\n\n351\n00:20:02.418 --> 00:20:06.801\nis right here in the where statement\nagain, which is the word IN.\n\n352\n00:20:06.801 --> 00:20:11.080\n>> And that little IN changes it from\nbeing a scalar to a multi-value.\n\n353\n00:20:11.080 --> 00:20:11.790\n>> Yes, that's it.\n\n354\n00:20:11.790 --> 00:20:12.610\n>> That's it.\n\n355\n00:20:12.610 --> 00:20:14.660\n>> Yeah, when it comes down\nto something like that and\n\n356\n00:20:14.660 --> 00:20:17.440\nif they're telling you you\nneed to return a scalar,\n\n357\n00:20:17.440 --> 00:20:20.940\nwhich of the following would\nreturn something scalar, okay?\n\n358\n00:20:20.940 --> 00:20:23.240\nYou need to pay attention\nto the syntax here.\n\n359\n00:20:23.240 --> 00:20:24.600\nI know this is strange.\n\n360\n00:20:24.600 --> 00:20:28.817\nActually, in a previous episode,\nDaniel watched me get kind\n\n361\n00:20:28.817 --> 00:20:33.694\nof in trouble just by a comma or\na subcolon, not subcolon, semicolon!\n\n362\n00:20:33.694 --> 00:20:34.280\n>> A semicolon, yeah.\n\n363\n00:20:34.280 --> 00:20:34.875\n[LAUGH]\n>> Subcolon.\n\n364\n00:20:34.875 --> 00:20:37.848\n[LAUGH]\n>> Ronnie's got sub stuff on the brain.\n\n365\n00:20:37.848 --> 00:20:38.533\n>> I do!\n\n366\n00:20:38.533 --> 00:20:39.496\n>> He's gonna have a sub for dinner.\n\n367\n00:20:39.496 --> 00:20:40.507\nGet on the subway.\n\n368\n00:20:40.507 --> 00:20:41.214\n>> Yeah, that's true!\n\n369\n00:20:41.214 --> 00:20:42.550\n>> And then be part of a sub crew.\n\n370\n00:20:42.550 --> 00:20:44.210\n>> Sounds like a good idea.\n\n371\n00:20:44.210 --> 00:20:46.567\nSo by just a semicolon.\n\n372\n00:20:46.567 --> 00:20:50.805\nSo you do need to pay attention, cuz it\ncould be almost identical, like we said.\n\n373\n00:20:50.805 --> 00:20:52.709\nAnd when-\n>> You should subcontract your typing.\n\n374\n00:20:52.709 --> 00:20:54.568\n[LAUGH]\n>> I should, yeah, by far.\n\n375\n00:20:54.568 --> 00:20:57.230\nIf anything i need to sub\nanything it's gonna be that.\n\n376\n00:20:57.230 --> 00:20:58.670\nSo, here it is.\n\n377\n00:20:58.670 --> 00:21:01.450\nSo, when you do see two\nparticular queries,\n\n378\n00:21:01.450 --> 00:21:04.490\nyou need to be able to distinguish\nthem and it can be difficult.\n\n379\n00:21:04.490 --> 00:21:07.090\nIt really can if you're not\nactually taking a look at it,\n\n380\n00:21:07.090 --> 00:21:08.470\nespecially side by side.\n\n381\n00:21:08.470 --> 00:21:13.450\nSo for let's just kind of\ndo a basic primer, right.\n\n382\n00:21:13.450 --> 00:21:16.859\nSo think of the possibilities in terms\nof questions at this point when you take\n\n383\n00:21:16.859 --> 00:21:17.960\na look, right?\n\n384\n00:21:17.960 --> 00:21:22.070\nIt could be that they ask you to\nperform a scalar subquery, okay.\n\n385\n00:21:22.070 --> 00:21:26.090\nOr do they say which of the following\nwill help you do a multi-value subquery?\n\n386\n00:21:26.090 --> 00:21:29.320\nWell, notice that in both\nof those situations, right,\n\n387\n00:21:29.320 --> 00:21:33.030\nthat means you have to know the difference\nbetween them and be able to see that.\n\n388\n00:21:33.030 --> 00:21:36.156\nSo we already showed you the scalar,\nlet's show you the actual multi-valued and\n\n389\n00:21:36.156 --> 00:21:37.220\nsee what happens, okay.\n\n390\n00:21:37.220 --> 00:21:42.190\nSo remember that even in the multi-valued,\nthe subquery should be able to run,\n\n391\n00:21:42.190 --> 00:21:47.380\nstand alone by itself, and notice it's not\nany different than what we already had.\n\n392\n00:21:47.380 --> 00:21:51.800\nSo if I execute that, notice it tells me\nthat the query was executed successfully.\n\n393\n00:21:51.800 --> 00:21:52.546\nAnd then there it is,\n\n394\n00:21:52.546 --> 00:21:58.130\nthere's that same column of values that we\nwere looking at a little bit before, okay.\n\n395\n00:21:58.130 --> 00:21:59.640\nSo, I can actually have that.\n\n396\n00:21:59.640 --> 00:22:01.250\nAnd I can actually say, hey,\n\n397\n00:22:01.250 --> 00:22:05.450\nI want it to return everybody's\ninformation in that way, too.\n\n398\n00:22:05.450 --> 00:22:09.160\nAnd then,\nif I select the whole statement here,\n\n399\n00:22:09.160 --> 00:22:11.850\nunless I have typed it\nin wrong previously.\n\n400\n00:22:11.850 --> 00:22:19.185\nNow, you can actually see all 17\nrows including Sve [LAUGH] Sve here,\n\n401\n00:22:19.185 --> 00:22:23.301\nGeorge, whatever you wanna call him.\n\n402\n00:22:23.301 --> 00:22:26.945\n>> Which Curtis in our chat room says that\nhe, probably used Google Translate or\n\n403\n00:22:26.945 --> 00:22:30.323\nsomething, it said that's basically\nhow it pronounces it as well.\n\n404\n00:22:30.323 --> 00:22:31.374\n>> Really, wow, neat.\n\n405\n00:22:31.374 --> 00:22:33.789\n[LAUGH]\n>> So, kudos on us.\n\n406\n00:22:33.789 --> 00:22:34.428\nWe can read.\n\n407\n00:22:34.428 --> 00:22:38.364\n[LAUGH]\n>> So, in that same sense, right?\n\n408\n00:22:38.364 --> 00:22:42.359\nNotice that it just really was\nthe difference between an equal sign and\n\n409\n00:22:42.359 --> 00:22:44.738\nthe word n that gave us different values.\n\n410\n00:22:44.738 --> 00:22:45.841\nIt's strange, right?\n\n411\n00:22:45.841 --> 00:22:49.592\nIt means something that's really neat for\nus as people that are learning how to do\n\n412\n00:22:49.592 --> 00:22:52.514\nthe idea of querying,\nis that there's not a lot of change, but\n\n413\n00:22:52.514 --> 00:22:55.744\none change, one small change,\ncan make a very big difference here.\n\n414\n00:22:55.744 --> 00:23:00.719\nSo that's an example of the differences\nbetween just a scalar subquery versus,\n\n415\n00:23:00.719 --> 00:23:05.560\nof course, the idea here of\na multi-valued subquery as well, okay?\n\n416\n00:23:05.560 --> 00:23:07.840\nNow, the neat things is,\neach of those, right,\n\n417\n00:23:07.840 --> 00:23:12.606\nthey are essentially two\ndistinct select statements, okay.\n\n418\n00:23:12.606 --> 00:23:17.842\nTwo separate distinct ones, each one\nof them can actually run on their own\n\n419\n00:23:17.842 --> 00:23:22.850\nif they needed to, to actually be able\nto return to you a value as well.\n\n420\n00:23:22.850 --> 00:23:27.764\nSo, it is kind of a neat function that\nyou have the ability to be able to do.\n\n421\n00:23:27.764 --> 00:23:30.908\nAnd it can return to you that\ninformation just like we had here, and\n\n422\n00:23:30.908 --> 00:23:32.210\nthis is a very typical one.\n\n423\n00:23:32.210 --> 00:23:35.162\nTo be able to return somebody's\nbonus from one particular table,\n\n424\n00:23:35.162 --> 00:23:36.750\nnotice we did a join here.\n\n425\n00:23:36.750 --> 00:23:41.130\nAnd we also ended up calculating\nout that bonus from that one table,\n\n426\n00:23:41.130 --> 00:23:42.030\nmerging it together.\n\n427\n00:23:42.030 --> 00:23:43.867\nAnd the other thing that\nI didn't point out,\n\n428\n00:23:43.867 --> 00:23:47.164\neven though I stressed it a little bit\nearlier, is notice salesperson, right?\n\n429\n00:23:47.164 --> 00:23:49.998\nSo, instead of us having first name,\nlast name,\n\n430\n00:23:49.998 --> 00:23:53.915\nnotice that this is actually all\ntogether with a space in the middle.\n\n431\n00:23:53.915 --> 00:23:56.170\nAnd you might think,\ndoes that really matter?\n\n432\n00:23:56.170 --> 00:24:00.197\nWell it does matter in the end result\nwhen you actually write reports,\n\n433\n00:24:00.197 --> 00:24:03.850\nmore then anything else and\nthat's really what the goal.\n\n434\n00:24:03.850 --> 00:24:06.990\nThe goal is not just to return it here to\nthe query window don't get me wrong that's\n\n435\n00:24:06.990 --> 00:24:11.730\ngood for you to verify, that\nthe information exits but usually the idea\n\n436\n00:24:11.730 --> 00:24:16.740\nhere is that this is then going to go into\na report writer that if you go ahead and\n\n437\n00:24:16.740 --> 00:24:19.740\nhave this all together it means\nit's not gonna look disjointed.\n\n438\n00:24:19.740 --> 00:24:21.090\nIt's not gonna look weird.\n\n439\n00:24:21.090 --> 00:24:24.700\nIt's gonna look exactly hopefully\nthe way that you want it to look.\n\n440\n00:24:24.700 --> 00:24:26.890\nAnd that's kinda the goal here as well.\n\n441\n00:24:26.890 --> 00:24:30.370\nIs to be able to present that information\nin a fairly useful manner too.\n\n442\n00:24:31.510 --> 00:24:35.330\nNow we have one more Sub query to look at.\n\n443\n00:24:35.330 --> 00:24:39.387\nI know [CROSSTALK] more and\nthis is the one that, I hate to say it,\n\n444\n00:24:39.387 --> 00:24:41.850\nis a little bit harder to understand.\n\n445\n00:24:41.850 --> 00:24:42.930\nOkay?\n\n446\n00:24:42.930 --> 00:24:47.150\nBy this one,\nthis particular type of sub query\n\n447\n00:24:47.150 --> 00:24:50.310\nis one that we call a correlated\nsub query and let me see.\n\n448\n00:24:50.310 --> 00:24:54.700\nDid I miss my sub-querying here,\nso let me verify something but\n\n449\n00:24:54.700 --> 00:25:00.850\nI do have the correlate there\nit goes open that one up here\n\n450\n00:25:02.160 --> 00:25:06.100\nand so when we take a look at\nsomething like this one so I made\n\n451\n00:25:06.100 --> 00:25:11.020\nthis one a little bit more complicated\na little bit more realistic here.\n\n452\n00:25:11.020 --> 00:25:14.190\nWhenever we ask you to do something\nlike what we call a correlated subquery,\n\n453\n00:25:15.250 --> 00:25:20.970\nthe thing that makes this one strange is\nthat it's not just taking one value and\n\n454\n00:25:20.970 --> 00:25:22.980\nreporting it to the outer value.\n\n455\n00:25:22.980 --> 00:25:27.150\nSo it's not taking what's in the subquery\nand just reporting it to the outer value.\n\n456\n00:25:27.150 --> 00:25:30.340\nThis is one of those unusual queries,\nthough.\n\n457\n00:25:30.340 --> 00:25:34.218\nThat actually takes the value that\nyou generate inside of the sub query,\n\n458\n00:25:34.218 --> 00:25:39.180\nitself, right here.\n\n459\n00:25:39.180 --> 00:25:42.010\nReports it to the outer value,\n\n460\n00:25:42.010 --> 00:25:46.470\nto also generate something else from\nthe inside value as well, okay.\n\n461\n00:25:46.470 --> 00:25:50.280\nNow you're saying how did\nthat end up working here?\n\n462\n00:25:50.280 --> 00:25:52.720\nBut that's exactly what ends up happening.\n\n463\n00:25:52.720 --> 00:25:57.040\nNotice I have list priced out here so\nin the outer query.\n\n464\n00:25:58.200 --> 00:25:59.970\nProduct category is category ID.\n\n465\n00:25:59.970 --> 00:26:02.870\nProduct ID, name, list price.\n\n466\n00:26:02.870 --> 00:26:08.456\nNotice that inside of my sub\nquery I tell it to also do what.\n\n467\n00:26:08.456 --> 00:26:16.340\nMake a function here and do the sum of\nthat ListPrice as well right here and\n\n468\n00:26:16.340 --> 00:26:22.010\nthen report that back out as one\nof those let's see products here.\n\n469\n00:26:22.010 --> 00:26:25.050\nSo let's see yeah there\nit is in the where.\n\n470\n00:26:25.050 --> 00:26:28.690\nSo notice that we have to actually go and\nfind ListPrice and\n\n471\n00:26:28.690 --> 00:26:32.190\nthen ListPrice itself So\nhere it is in the where calls.\n\n472\n00:26:32.190 --> 00:26:36.550\nList price is actually gonna be\ngenerated and then reported out here but\n\n473\n00:26:36.550 --> 00:26:38.750\nthen it also has to be\ncalculated here inside.\n\n474\n00:26:40.630 --> 00:26:41.270\nHm.\n\n475\n00:26:41.270 --> 00:26:42.360\nPretty interesting.\n\n476\n00:26:42.360 --> 00:26:46.510\nNow you and I, mental gymnastics,\nthis is already kind of tricky.\n\n477\n00:26:46.510 --> 00:26:51.145\nHow the heck am I doing that I have to\nsum up something that doesn't actually\n\n478\n00:26:51.145 --> 00:26:51.890\nexist yet.\n\n479\n00:26:52.900 --> 00:26:54.290\nOkay?\n\n480\n00:26:54.290 --> 00:26:56.302\nAnd where am I getting it from?\n\n481\n00:26:56.302 --> 00:26:59.190\nWhere it doesn't actually exists\non our reporting at back out here.\n\n482\n00:26:59.190 --> 00:27:00.200\nSo, I can generate it first.\n\n483\n00:27:00.200 --> 00:27:02.645\nReport it out there to actually\ngenerate it back inside.\n\n484\n00:27:02.645 --> 00:27:07.370\n[LAUGH]\n>> That sounds fun.\n\n485\n00:27:07.370 --> 00:27:09.840\n>> Yeah.\nIt sounds incredibly fun and\n\n486\n00:27:09.840 --> 00:27:15.760\none of the way you actually recognize a,\nsubquery, correlated subquery is this.\n\n487\n00:27:15.760 --> 00:27:16.480\nOkay.\n\n488\n00:27:16.480 --> 00:27:19.960\nIf you go ahead and\nyou try to run that particular subquery,\n\n489\n00:27:21.200 --> 00:27:23.830\nit's not going to be\nable to be bound here.\n\n490\n00:27:23.830 --> 00:27:24.500\nOkay.\n\n491\n00:27:24.500 --> 00:27:26.540\nSo, you actually see something like this.\n\n492\n00:27:26.540 --> 00:27:29.440\nBecause it says, look, this doesn't exist.\n\n493\n00:27:29.440 --> 00:27:30.060\nOkay.\n\n494\n00:27:30.060 --> 00:27:34.380\nSo, by itself, it has nothing to call upon\nwhere the list price actually exists, and\n\n495\n00:27:34.380 --> 00:27:35.270\nwhat it's looking for.\n\n496\n00:27:36.940 --> 00:27:37.550\nOkay?\n\n497\n00:27:37.550 --> 00:27:40.240\nSo it's saying, I can't run by myself.\n\n498\n00:27:40.240 --> 00:27:44.550\nSo a subquery that's a correlated\nsubquery is not a standalone query.\n\n499\n00:27:44.550 --> 00:27:46.170\n>> It's dependent upon the outer query.\n\n500\n00:27:46.170 --> 00:27:48.020\n>> It's dependent on the outer query, and\n\n501\n00:27:48.020 --> 00:27:49.875\nthat outer query's actually\ndependent on the subquery.\n\n502\n00:27:49.875 --> 00:27:53.370\n>> [LAUGH]\n>> It's symbiotic, with synergy.\n\n503\n00:27:53.370 --> 00:27:54.100\n>> Yeah.\n\n504\n00:27:54.100 --> 00:27:55.780\nYeah.\nIt's what we call a conundrum,\n\n505\n00:27:55.780 --> 00:27:57.870\nwrapped inside an enigma,\nwrapped inside a burrito.\n\n506\n00:27:57.870 --> 00:27:58.540\n>> I like that.\n\n507\n00:27:58.540 --> 00:27:59.200\n>> I like that too.\n\n508\n00:27:59.200 --> 00:27:59.875\n>> It's a tasty treat.\n\n509\n00:27:59.875 --> 00:28:00.490\n[LAUGH]\n>> So, so\n\n510\n00:28:00.490 --> 00:28:03.240\nyes this one is a little\nbit harder to understand.\n\n511\n00:28:03.240 --> 00:28:05.860\nNow in this one I will\nabsolutely tell you,\n\n512\n00:28:05.860 --> 00:28:09.200\nI don't think I've ever\nbeen called upon or\n\n513\n00:28:09.200 --> 00:28:13.420\never even had a logic, gymnastics logic\ntask sheet actually come up with this.\n\n514\n00:28:13.420 --> 00:28:18.730\nI said to him, okay, let's see you, how\nthis actually ends up working out here.\n\n515\n00:28:18.730 --> 00:28:21.610\nI'm going to select that entire\nstatement and that one acts good.\n\n516\n00:28:21.610 --> 00:28:22.900\nLook at that.\n>> It's actually a really cool\n\n517\n00:28:22.900 --> 00:28:23.550\nlogic puzzle.\n\n518\n00:28:23.550 --> 00:28:24.850\n>> It really is.\n\n519\n00:28:24.850 --> 00:28:25.930\n>> I can enjoy that.\n\n520\n00:28:25.930 --> 00:28:27.520\nI can get down with that.\n\n521\n00:28:27.520 --> 00:28:29.610\n>> In something like this, you're like,\n\n522\n00:28:29.610 --> 00:28:32.850\nis there a time when I actually need to\ncall upon something that doesn't exist so\n\n523\n00:28:32.850 --> 00:28:36.215\nI can report it as existing and\nthen I can report it back.\n\n524\n00:28:36.215 --> 00:28:39.420\n[LAUGH] Well apparently you do.\n\n525\n00:28:39.420 --> 00:28:41.960\n>> Which came first on that Ryan,\nthe chicken or the egg?\n\n526\n00:28:41.960 --> 00:28:45.550\n>> That is the question that\nthe correlated query helps us to do, so\n\n527\n00:28:45.550 --> 00:28:49.880\nsomehow inside of that right, because\nwe're actually working inside a RAM and\n\n528\n00:28:49.880 --> 00:28:51.900\nnot actually working with real tables.\n\n529\n00:28:51.900 --> 00:28:55.250\nRight we're working between one select\nstatement and another select statement,\n\n530\n00:28:55.250 --> 00:28:59.360\nwhich are both generated in RAM, it knows\nhow to do that, it knows how to actually\n\n531\n00:28:59.360 --> 00:29:03.100\ngenerate that and report it to the other\none to report it back the way it needs to.\n\n532\n00:29:03.100 --> 00:29:08.980\nSo go figure that that's actually\nsomeone's whoever came up with T-SQL and\n\n533\n00:29:08.980 --> 00:29:11.442\nthe lot, yeah,\nthey are much smarter than you and me.\n\n534\n00:29:11.442 --> 00:29:15.650\n>> Yeah, they are up here,\nwe are down here so\n\n535\n00:29:15.650 --> 00:29:20.195\nwe just might as well use it and\ntake advantage of it, right?\n\n536\n00:29:20.195 --> 00:29:20.950\n>> Yeah.\n>> And\n\n537\n00:29:20.950 --> 00:29:24.030\nat times you may find that that\nlogic really does work for\n\n538\n00:29:24.030 --> 00:29:27.230\nyou where you're saying,\nhey is there a way we can do this?\n\n539\n00:29:27.230 --> 00:29:31.470\nBut that data doesn't really exist and\nthen get this value out of it?\n\n540\n00:29:32.900 --> 00:29:34.315\nAnd you can say, yes there is!\n\n541\n00:29:34.315 --> 00:29:38.300\n[LAUGH]\n>> [LAUGH] Yeah, you can say, absolutely,\n\n542\n00:29:38.300 --> 00:29:41.610\nthere's a way we can do it as\nlong as we know what we're doing-\n\n543\n00:29:41.610 --> 00:29:42.690\n>> Ask a simple question,\n\n544\n00:29:42.690 --> 00:29:44.025\nright, get a simple answer.\n\n545\n00:29:44.025 --> 00:29:45.970\n[LAUGH]\n>> It's amazing, it really is.\n\n546\n00:29:45.970 --> 00:29:48.690\nAs you read more, like on SQL and stuff,\n\n547\n00:29:48.690 --> 00:29:51.450\nand the people who have been working\non it for a long, long time.\n\n548\n00:29:51.450 --> 00:29:54.780\nThey can do mastery in work like this.\n\n549\n00:29:54.780 --> 00:29:58.780\nMost of us, and the way that you and I are\ngoing to identify, at least for preparing\n\n550\n00:29:58.780 --> 00:30:03.900\nfor the exam, is we need to take a look\nand see, are we seeing stuff like this?\n\n551\n00:30:03.900 --> 00:30:07.780\nLike, look, that inner query is\nnot going to be generated by\n\n552\n00:30:07.780 --> 00:30:09.830\nthis product table on itself.\n\n553\n00:30:09.830 --> 00:30:12.510\nAnd even this product table\nis doing something else.\n\n554\n00:30:12.510 --> 00:30:16.530\nNow, Daniel, I don't know if you'll\nactually notice this or not, but\n\n555\n00:30:16.530 --> 00:30:19.415\nnotice that it actually is doing\nsomething else a little bit unusual here.\n\n556\n00:30:19.415 --> 00:30:24.520\nProduct.product here is\nactually reported as P2 and\n\n557\n00:30:24.520 --> 00:30:27.045\nnotice the same thing up here,\nexcuse me production.\n\n558\n00:30:27.045 --> 00:30:33.960\nProduction.product is located as P1,\nproduction.product is P2.\n\n559\n00:30:33.960 --> 00:30:37.610\nIt's taking the same table okay and\n\n560\n00:30:37.610 --> 00:30:41.960\nactually saying,\nusing it as two different tables, okay.\n\n561\n00:30:41.960 --> 00:30:45.440\nTechnically that's what we call\na self-join, is what it's actually called.\n\n562\n00:30:45.440 --> 00:30:50.405\nWe actually take the same exact table and\nactually reporting one bit of information\n\n563\n00:30:50.405 --> 00:30:54.275\nbased off of the same, or\nbased off of another piece of information\n\n564\n00:30:54.275 --> 00:30:58.445\nin that exact same table, to generate a\nthird table, is what we're actually doing.\n\n565\n00:30:58.445 --> 00:31:01.155\nSo, it is quite amazing\n\n566\n00:31:01.155 --> 00:31:03.705\nat the way that people have\nactually come up with this logic.\n\n567\n00:31:03.705 --> 00:31:06.595\n>> This is one of the things that you're\njust kind of gonna have to sit back and\n\n568\n00:31:06.595 --> 00:31:07.235\ngo, okay.\n\n569\n00:31:07.235 --> 00:31:10.865\nI am going to walk through this,\nand don't rush it.\n\n570\n00:31:10.865 --> 00:31:14.670\nJust take your time and it will start to\nmake a little sense, especially when you\n\n571\n00:31:14.670 --> 00:31:18.760\nstart saying that, things like a self\njoint, right, that kind of makes sense.\n\n572\n00:31:18.760 --> 00:31:23.670\nI've got one table, I'm representing it\nhere with an alias, so that it's pristine,\n\n573\n00:31:23.670 --> 00:31:27.210\nand over here, I'm representing with\na different alias, and I'm wanting to grab\n\n574\n00:31:27.210 --> 00:31:30.030\ntwo different types of values out of\nit and then bring it back together.\n\n575\n00:31:30.030 --> 00:31:33.870\nAnd to another table hence the multiple\ndifferent queries that we're putting\n\n576\n00:31:33.870 --> 00:31:37.300\ntogether and why they are working\nagainst each other and\n\n577\n00:31:37.300 --> 00:31:39.280\nin correlation with each\nother at the same time.\n\n578\n00:31:39.280 --> 00:31:44.185\nI know you can go home and then spiral\ndown the rabbit hole [LAUGH] and\n\n579\n00:31:44.185 --> 00:31:46.085\nhave a great time with that logic bomb.\n\n580\n00:31:46.085 --> 00:31:50.461\nBut it will make sense to you eventually.\n\n581\n00:31:50.461 --> 00:31:51.991\n[LAUGH] Maybe.\n\n582\n00:31:51.991 --> 00:31:53.575\n[LAUGH]\n>> It really is.\n\n583\n00:31:53.575 --> 00:31:58.055\nIt's one of those amazing things that once\nyou actually see it working like in 10 to\n\n584\n00:31:58.055 --> 00:32:00.125\n15 queries in a row, it really does.\n\n585\n00:32:00.125 --> 00:32:03.395\nIt begins to make a little bit of sense\nwhen you realize you can take that\n\n586\n00:32:03.395 --> 00:32:07.890\nvalue that actually exists perform\na mathematical calculation on it and\n\n587\n00:32:07.890 --> 00:32:12.320\nthen report that to the other value that's\nactually calling upon the original data\n\n588\n00:32:12.320 --> 00:32:13.310\nand that calculation.\n\n589\n00:32:13.310 --> 00:32:16.490\n>> Ryan, I think this goes back,\nwe were having a conversation about\n\n590\n00:32:16.490 --> 00:32:18.890\nwhy some of these things\ntend to not make sense, and\n\n591\n00:32:18.890 --> 00:32:21.420\nit's the context will help\nyou out a lot with this.\n\n592\n00:32:21.420 --> 00:32:24.900\nWhen you know what you're looking\nto get as a return value,\n\n593\n00:32:24.900 --> 00:32:26.670\nyou know what the return should be,\n\n594\n00:32:26.670 --> 00:32:30.321\nthen the logic behind how you get that\nstarts to make a whole lot more sense.\n\n595\n00:32:30.321 --> 00:32:32.910\n>> [LAUGH]\n>> You actually need the answer to help\n\n596\n00:32:32.910 --> 00:32:36.285\nmake sense of the way you get the answer,\nso that will help.\n\n597\n00:32:36.285 --> 00:32:36.910\n>> [LAUGH]\n>> So\n\n598\n00:32:36.910 --> 00:32:41.090\nif you're creating your own databases,\nand you know the data that's in there,\n\n599\n00:32:41.090 --> 00:32:43.730\nyou're familiar with it, this will\nstart to make a whole lot more sense.\n\n600\n00:32:43.730 --> 00:32:45.410\n>> It really does, so there it is.\n\n601\n00:32:45.410 --> 00:32:49.700\nThere is the idea of correlated\nsubqueries, which I hate to say it.\n\n602\n00:32:49.700 --> 00:32:52.490\nThis is one of the ones that I\nwould have to take down on paper.\n\n603\n00:32:52.490 --> 00:32:53.500\n>> Yeah.\n>> And I mean it.\n\n604\n00:32:53.500 --> 00:32:54.870\n>> Gotta draw that diagram out.\n\n605\n00:32:54.870 --> 00:32:57.860\n>> And I would literally have to\nactually write this thing out on paper.\n\n606\n00:32:57.860 --> 00:33:01.550\nAnd then test it a little bit\nat a time until I get it right.\n\n607\n00:33:01.550 --> 00:33:02.336\n>> Well Ronnie,\n\n608\n00:33:02.336 --> 00:33:07.110\nnow that we've sufficiently twisted our\naudiences brain into a logic pretzel.\n\n609\n00:33:07.110 --> 00:33:08.415\nYou're welcome everyone.\n\n610\n00:33:08.415 --> 00:33:11.210\n[LAUGH] Looks like we've come to\nthe end of yet another great episode.\n\n611\n00:33:11.210 --> 00:33:15.640\nThanks so much for\nbending our minds as you have with SQL.\n\n612\n00:33:15.640 --> 00:33:17.030\nAnd we thank you guys for watching.\n\n613\n00:33:17.030 --> 00:33:19.110\nAnd hopefully you guys enjoyed it as well.\n\n614\n00:33:19.110 --> 00:33:22.010\nSigning off for ITPro TV I've\nbeen you hosting Daniel Lawry.\n\n615\n00:33:22.010 --> 00:33:22.800\n>> And I'm Ronnie Wong.\n\n616\n00:33:22.800 --> 00:33:26.284\n>> We'll see you next time.\n\n617\n00:33:26.284 --> 00:33:32.080\n[MUSIC]\n\n",
          "vimeoId": "164046631"
        },
        {
          "description": "In this episode, Daniel and Ronnie continue to examine the use of Subqueries in SQL. Here specifically they look at Pivoting and Un-Pivoting tables. Pivots will allow you to modify the returned data to turning row data into columns for easier viewing. Un-Pivot will be the reformatting of pivoted data back to normal.",
          "length": "1898",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-2-implement_subqueries_pt2-042016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-2-implement_subqueries_pt2-042016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-2-implement_subqueries_pt2-042016-1-sm.jpg",
          "title": "Implement Subqueries Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.026 --> 00:00:10.026\n[MUSIC]\n\n2\n00:00:12.102 --> 00:00:17.188\nAll right greetings everyone and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:17.188 --> 00:00:20.376\nI'm your host, Daniel Lowrie,\nand in today's episode,\n\n4\n00:00:20.376 --> 00:00:24.986\nwe're continuing on with our series of\nquerying the Microsoft SQL Server 2014.\n\n5\n00:00:24.986 --> 00:00:28.405\nJoining me in the studio again today\nto help us out, help move us along, and\n\n6\n00:00:28.405 --> 00:00:32.016\nimpart his wisdom and knowledge into us,\nis our good friend Mr. Ronnie Wong.\n\n7\n00:00:32.016 --> 00:00:33.412\nRonnie, welcome to the show,\nhow's it going?\n\n8\n00:00:33.412 --> 00:00:38.020\n>> It's going well, as we continue on\nto take a look at SQL Server 2014.\n\n9\n00:00:38.020 --> 00:00:40.320\nTalking about the idea\nhere of select queries and\n\n10\n00:00:40.320 --> 00:00:44.850\nwe're specifically moving into the realm\nof of course subqueries again.\n\n11\n00:00:44.850 --> 00:00:48.060\nNow that's because most of us have we\nactually dealt with any querying at all.\n\n12\n00:00:48.060 --> 00:00:51.880\nWe've done a bit of it in which we\nwe're able to return the results that\n\n13\n00:00:51.880 --> 00:00:52.420\nwe needed to.\n\n14\n00:00:52.420 --> 00:00:54.450\nAnd specifically in that part one,\n\n15\n00:00:54.450 --> 00:00:56.770\nwe did look at some of\nthe different subquerying types.\n\n16\n00:00:56.770 --> 00:01:00.350\nWe had scalar subqueries,\nwe had multi-valued subqueries,\n\n17\n00:01:00.350 --> 00:01:05.240\nwe even had co-related subqueries as well\nthat allow us to essentially make a query\n\n18\n00:01:05.240 --> 00:01:08.830\nand return that information to\nthe outer query that we have.\n\n19\n00:01:08.830 --> 00:01:13.230\nAnd so that allows us to run exactly two\nselect statements but the whole purpose of\n\n20\n00:01:13.230 --> 00:01:18.320\nthese select statements is just to provide\nmore information to the outer query.\n\n21\n00:01:18.320 --> 00:01:22.400\nNow, there's other thing that\nwe can do with the notion or\n\n22\n00:01:22.400 --> 00:01:25.820\nthe same functionality as what\nwe normally see in the sub query\n\n23\n00:01:25.820 --> 00:01:29.230\nthat help us to display information\na little bit differently and\n\n24\n00:01:29.230 --> 00:01:33.050\nthat's what we are taking to\nlook at this particular episode.\n\n25\n00:01:33.050 --> 00:01:35.950\nWhich is the idea of using some of\nthe different functions that really\n\n26\n00:01:35.950 --> 00:01:36.840\nhelp us out.\n\n27\n00:01:36.840 --> 00:01:40.360\nThings like what we'll call pivot and\nunpivot as well as taking a look at\n\n28\n00:01:40.360 --> 00:01:44.550\nsomething that we call of course the apply\noperator that will also help us out.\n\n29\n00:01:44.550 --> 00:01:48.360\nAnd then a little bit even further on in\nthis we'll actually take a look something\n\n30\n00:01:48.360 --> 00:01:52.580\ncalled CTE or\nCommon Table Expressions as well.\n\n31\n00:01:52.580 --> 00:01:56.900\nBut for right now, let's focus in\non the idea of pivoting our data.\n\n32\n00:01:56.900 --> 00:02:01.350\nNow if you've actually worked with\nExcel data at any point in time,\n\n33\n00:02:01.350 --> 00:02:03.690\npivot tables pretty much became the rage.\n\n34\n00:02:03.690 --> 00:02:08.550\nI remember back when I was\nteaching Excel 2003, actually,\n\n35\n00:02:08.550 --> 00:02:13.195\npivot tables I know,\nI say just a few years,\n\n36\n00:02:13.195 --> 00:02:16.740\na tad time ago and\nI was teaching Excel 2003.\n\n37\n00:02:16.740 --> 00:02:21.290\nThe only thing everybody wanna do was, I\nneed to learn how to create Pivot Tables.\n\n38\n00:02:21.290 --> 00:02:24.060\nNow you may be wondering what\nthe heck are Pivot Tables?\n\n39\n00:02:24.060 --> 00:02:28.220\nAnd why in the world do we really\ncare about the idea of Pivot Tables?\n\n40\n00:02:28.220 --> 00:02:33.200\nWell, spreadsheets and databases are\nreally kind of very similar and they're\n\n41\n00:02:33.200 --> 00:02:37.900\nactually almost cousins of one another\nin the way that they hold the data.\n\n42\n00:02:37.900 --> 00:02:42.180\nEssentially, a database is really\na bunch of spreadsheets right?\n\n43\n00:02:42.180 --> 00:02:43.530\nData that's kept in rows and\n\n44\n00:02:43.530 --> 00:02:47.440\ncolumns that are now interconnected or\nrelated in this sense\n\n45\n00:02:47.440 --> 00:02:50.990\nby the very fact that we can actually\ncreate the idea of links between them.\n\n46\n00:02:50.990 --> 00:02:55.000\nAnd then we can actually query\ndata from multiple spreadsheets.\n\n47\n00:02:55.000 --> 00:02:58.100\nWell, by the spreadsheets\nby themselves right,\n\n48\n00:02:58.100 --> 00:03:03.050\nwith the data, excuse me,\nbeing stored in rows and columns.\n\n49\n00:03:03.050 --> 00:03:07.540\nWell, in that sense inside of Excel, we\ncould actually take a product like Excel\n\n50\n00:03:07.540 --> 00:03:10.280\nand create what we call a pivot table.\n\n51\n00:03:10.280 --> 00:03:14.850\nA pivot table allows us to essentially\nswitch the columns that we would normally\n\n52\n00:03:14.850 --> 00:03:19.130\nhave going across the table and actually\ndisplaying information and columns, and\n\n53\n00:03:19.130 --> 00:03:21.660\nthe row data, and just flop them, okay?\n\n54\n00:03:21.660 --> 00:03:23.140\nOr, switch them up, right?\n\n55\n00:03:23.140 --> 00:03:26.220\nSo, now my row data becomes columnar data,\nand\n\n56\n00:03:26.220 --> 00:03:30.150\nthen the columns essentially\nbecome the row data going across.\n\n57\n00:03:30.150 --> 00:03:32.300\nNow you might be wondering, okay but\n\n58\n00:03:32.300 --> 00:03:34.935\nwhy in the world would we\never want to see that.\n\n59\n00:03:34.935 --> 00:03:36.310\n>> Ronnie, that raises a great question.\n\n60\n00:03:36.310 --> 00:03:37.740\nWhy in the world would\nwe want to see that?\n\n61\n00:03:37.740 --> 00:03:41.998\n>> Yeah, the reason that we would want\nto actually see something like that is\n\n62\n00:03:41.998 --> 00:03:47.160\nbecause there's a lot of times when\nwe're first beginning to work with data.\n\n63\n00:03:47.160 --> 00:03:50.510\nYou never know when you're actually\ngoing to be managing a SQL server,\n\n64\n00:03:50.510 --> 00:03:54.960\nyou're actually asked to query a SQL\nserver, whether all the data inside of\n\n65\n00:03:54.960 --> 00:04:00.960\nthat particular database that you have,\nis what we call completely normalized.\n\n66\n00:04:00.960 --> 00:04:05.430\nNow Dan, when you think about\nthe idea of normalized data\n\n67\n00:04:05.430 --> 00:04:08.450\nyou probably aren't thinking in\nthe same way that I'm talking about.\n\n68\n00:04:08.450 --> 00:04:11.390\nWhat do you think when you hear the term,\nnormal data?\n\n69\n00:04:11.390 --> 00:04:15.630\n>> I'm thinking, probably just\neither strings of words or numbers.\n\n70\n00:04:15.630 --> 00:04:16.884\n>> Yeah, yeah, simple data, right?\n\n71\n00:04:16.884 --> 00:04:19.550\nYou'd go,\nnormalized data is nothing strange, right?\n\n72\n00:04:19.550 --> 00:04:21.650\nNothing out of the boundaries.\n\n73\n00:04:21.650 --> 00:04:24.650\nIt's just normal stuff that you and\nI would come across.\n\n74\n00:04:24.650 --> 00:04:27.320\nBut of course in database language,\nguess what?\n\n75\n00:04:27.320 --> 00:04:28.910\nThat's not ever what it means.\n\n76\n00:04:28.910 --> 00:04:29.680\n>> Why would it?\n\n77\n00:04:29.680 --> 00:04:32.320\n>> Why would it ever\nmean anything like that?\n\n78\n00:04:32.320 --> 00:04:36.100\nSo the idea of normalized data,\none of the principles that EF Codd,\n\n79\n00:04:36.100 --> 00:04:40.040\nthe guy that really invented relational\ndatabases essentially said this.\n\n80\n00:04:40.040 --> 00:04:45.230\nThat the tables that we create,\nthe whole data inside of our relational\n\n81\n00:04:45.230 --> 00:04:50.730\ndatabases should actually be well very\ncolumnar, in other words actually\n\n82\n00:04:50.730 --> 00:04:55.660\ndo what we need to but there shouldn't\nbe as many columns as rows, okay?\n\n83\n00:04:55.660 --> 00:05:01.160\nSo in that sentence we want to have\nas few possible columns as we can but\n\n84\n00:05:01.160 --> 00:05:04.060\nas many rows as we can\ninside of that tabular data.\n\n85\n00:05:04.060 --> 00:05:07.685\nAnd that's because when we do select\nstatements and stuff like that we don't\n\n86\n00:05:07.685 --> 00:05:12.310\nwanna actually have to select like do\nan asterisks and there's 42 columns across\n\n87\n00:05:12.310 --> 00:05:16.610\nand then trying to figure out what that\ndata looks like, it's almost impossible.\n\n88\n00:05:16.610 --> 00:05:21.430\nSo instead, what we can actually do is\nthat we can take the information that we\n\n89\n00:05:21.430 --> 00:05:24.040\nmight be querying from multiple tables and\n\n90\n00:05:24.040 --> 00:05:27.670\nlet's say that actually does come out\nto be ten or 15 different columns.\n\n91\n00:05:27.670 --> 00:05:31.920\nAnd switch that around so that we can\nsee it in a different perspective.\n\n92\n00:05:31.920 --> 00:05:35.820\nSo it's all about the way that we need\ndata to be displayed sometimes that makes\n\n93\n00:05:35.820 --> 00:05:36.840\nit easier.\n\n94\n00:05:36.840 --> 00:05:39.600\nNow, it doesn't mean it's always gonna\nbe like that, because remember that\n\n95\n00:05:39.600 --> 00:05:43.830\ninside of the database itself,\nit exists in those forms of columns and\n\n96\n00:05:43.830 --> 00:05:48.450\nwe do tend to follow\nEF Codd's kind of design for\n\n97\n00:05:48.450 --> 00:05:52.380\ndatabases and the rules for\nthem and that's what happens.\n\n98\n00:05:52.380 --> 00:05:56.180\nSo let me show you a typical way in\nwhich data is normally stored inside of\n\n99\n00:05:56.180 --> 00:05:57.620\nthe database first.\n\n100\n00:05:57.620 --> 00:06:02.690\nSo here it is, I've got my query,\nactually for us, ready to go.\n\n101\n00:06:02.690 --> 00:06:04.850\nMake sure I actually do\nhave the right one, yep.\n\n102\n00:06:04.850 --> 00:06:08.210\nSo what I'm gonna do, I went ahead and\ntyped it in here as a comment, right?\n\n103\n00:06:08.210 --> 00:06:12.950\nWe're gonna create a show all category\nname, colors, and the quantity.\n\n104\n00:06:12.950 --> 00:06:18.370\nAnd you can see that, that with from the\nproduction table, that's actually joined\n\n105\n00:06:18.370 --> 00:06:24.260\nin, the product table excuse me,\njoined in to product subcategory table,\n\n106\n00:06:24.260 --> 00:06:28.590\njoined into the product\ninventory table as well.\n\n107\n00:06:28.590 --> 00:06:33.080\nSo I actually have a couple of joins going\non in here that I wanna pull in name,\n\n108\n00:06:33.080 --> 00:06:38.360\ncolor, and the actual quantity that\nI have, of all this information.\n\n109\n00:06:38.360 --> 00:06:45.900\nSo if I then select from here, all the way\ndown to my badge and then run my F5 key.\n\n110\n00:06:45.900 --> 00:06:47.310\nNow when we take a look at the,\n\n111\n00:06:47.310 --> 00:06:50.459\nlet me scroll out just a bit so\nwe can see everything.\n\n112\n00:06:52.500 --> 00:06:55.240\nWhen I take a look,\nyou now see that, here it is.\n\n113\n00:06:55.240 --> 00:06:57.450\nIt pulled in exactly what I asked for.\n\n114\n00:06:57.450 --> 00:07:01.130\nThree particular columns, one for\nthe name of the product, the other one for\n\n115\n00:07:01.130 --> 00:07:05.360\nthe color of the product, and then the\nlast one here generated was the quantity,\n\n116\n00:07:05.360 --> 00:07:06.678\nand you see no values.\n\n117\n00:07:06.678 --> 00:07:10.530\nAnd we're gonna talk about taking care\nof no values a little bit later on.\n\n118\n00:07:10.530 --> 00:07:13.760\nNow when I try to actually\ntake a look here,\n\n119\n00:07:13.760 --> 00:07:20.320\nthe actual number that I have is about 532\nactual rows of data that I have available.\n\n120\n00:07:20.320 --> 00:07:24.480\nBut seeing it this way allows me to\nactually see everything that I want to,\n\n121\n00:07:24.480 --> 00:07:29.400\nwhich is not bad, but it's not the most\nuseful way it can be displayed.\n\n122\n00:07:29.400 --> 00:07:34.590\nWhat might actually be better for\nme instead Is to actually see,\n\n123\n00:07:34.590 --> 00:07:39.790\nlet's say the idea here of some\nof these different colors and\n\n124\n00:07:39.790 --> 00:07:42.800\nthe quantity of each product instead.\n\n125\n00:07:42.800 --> 00:07:45.702\nSo in other words,\nI want black, red, white,\n\n126\n00:07:45.702 --> 00:07:49.997\nmulti, whatever it might be to be\ncolumns all the way across this way.\n\n127\n00:07:49.997 --> 00:07:53.429\nI want each of these quantities\nto show up as a Road Frames,\n\n128\n00:07:53.429 --> 00:07:57.772\nand everything to actually show me how\nmany of that particular color I've\n\n129\n00:07:57.772 --> 00:08:01.224\nsold As well and\nactually show the product name to do that.\n\n130\n00:08:01.224 --> 00:08:06.009\nSo if I were to try and query that in\na regular, standard query that I did,\n\n131\n00:08:06.009 --> 00:08:08.140\nwith a join, I couldn't do it.\n\n132\n00:08:08.140 --> 00:08:09.000\nI just showed you that,\n\n133\n00:08:09.000 --> 00:08:13.760\nI just showed you that join,\nit doesn't automatically do that for us.\n\n134\n00:08:13.760 --> 00:08:16.940\nIt essentially will\ndisplay it in this way and\n\n135\n00:08:16.940 --> 00:08:20.290\nin that sense,\na standard query's not going to help.\n\n136\n00:08:20.290 --> 00:08:24.060\nSo even if I create joins after\njoins after joins, it's still,\n\n137\n00:08:24.060 --> 00:08:25.800\nI have to do the selects by what?\n\n138\n00:08:25.800 --> 00:08:29.210\nBy the idea here,\nthat has the exist in columns.\n\n139\n00:08:29.210 --> 00:08:31.500\nWell, this stuff does\nnot exist in columns.\n\n140\n00:08:31.500 --> 00:08:35.449\nRoad frame, or black or red or white,\nit doesn't exist as a column somewhere.\n\n141\n00:08:35.449 --> 00:08:38.594\nI can't do a select statement in that way,\nbut\n\n142\n00:08:38.594 --> 00:08:41.672\nwhat I can do is I can\nactually pivot the data.\n\n143\n00:08:41.672 --> 00:08:46.828\nAnd so when I do this, I'm gonna\npivot the data colors as columns and\n\n144\n00:08:46.828 --> 00:08:49.915\nthe names and quantity as rows instead.\n\n145\n00:08:49.915 --> 00:08:54.646\nSo this time, notice that we'll start\noff with essentially the very same\n\n146\n00:08:54.646 --> 00:08:57.790\nselect statement, which is right there.\n\n147\n00:08:57.790 --> 00:09:02.680\nNow, I've added in a little bit more\nhere instead and what you'll see is that\n\n148\n00:09:02.680 --> 00:09:08.280\nthe original query is right here and\nnow, I have an outer query.\n\n149\n00:09:08.280 --> 00:09:11.960\nSo this makes it a sub-query\nin its function, right?\n\n150\n00:09:11.960 --> 00:09:15.810\nSo we saw then our sub-query episodes,\nwhere from the select column and\n\n151\n00:09:15.810 --> 00:09:19.370\nusually we have it in the where clause but\nthis one's in the from.\n\n152\n00:09:19.370 --> 00:09:22.610\nAnd if I do something like that,\nthis is that special type of sub query\n\n153\n00:09:22.610 --> 00:09:26.220\nthat we essentially call\na derived table as well.\n\n154\n00:09:26.220 --> 00:09:28.838\nSo this particular table data that I have,\n\n155\n00:09:28.838 --> 00:09:33.129\nis I'm gonna generate a brand new\ntable essentially sitting in RAM and\n\n156\n00:09:33.129 --> 00:09:37.653\nwe're gonna call it the DataTable,\nis what we're gonna call it, okay?\n\n157\n00:09:37.653 --> 00:09:39.569\nSo that's what we're generating.\n\n158\n00:09:39.569 --> 00:09:43.730\nSo I'm saying select every\nsingle row from a table that\n\n159\n00:09:43.730 --> 00:09:47.534\nI'm generating this called the DataRow,\nokay.\n\n160\n00:09:47.534 --> 00:09:54.500\nNow once we do that, gotta scroll out so I\ncan do a little bit more navigation here.\n\n161\n00:09:54.500 --> 00:09:59.840\nOnce we do that,\nI now can actually add in my keyword,\n\n162\n00:09:59.840 --> 00:10:03.060\nwhich is gonna be the term pivot, okay?\n\n163\n00:10:03.060 --> 00:10:06.442\nNow when I take a look at what's going\non and I say, I'm going to pivot this.\n\n164\n00:10:06.442 --> 00:10:09.021\nI'm gonna kind of cover up\nsomething in just a moment, so\n\n165\n00:10:09.021 --> 00:10:10.686\nthat we can see a little bit better and\n\n166\n00:10:10.686 --> 00:10:13.729\nthen we'll run another example to\nhelp us to lock in this concept.\n\n167\n00:10:13.729 --> 00:10:18.361\nNotice that what's happening here,\nis that the first thing I'm doing\n\n168\n00:10:18.361 --> 00:10:22.297\nbecause it's a function,\nwe have our set of parentheses and\n\n169\n00:10:22.297 --> 00:10:27.570\ninside that opening parentheses, I need\nto first say, what is gonna be my data?\n\n170\n00:10:28.690 --> 00:10:33.242\nSo the sum quantity right here,\n\n171\n00:10:33.242 --> 00:10:37.793\nis actually going to be my data,\n\n172\n00:10:37.793 --> 00:10:42.513\nit's now gonna turn into Data for\n\n173\n00:10:42.513 --> 00:10:49.200\nthe rows and then, notice the term Color.\n\n174\n00:10:49.200 --> 00:10:55.547\nThis is now gonna turn\ninto Different Headers,\n\n175\n00:10:55.547 --> 00:10:58.249\nor column headers.\n\n176\n00:11:03.090 --> 00:11:04.135\nI can't spell column, okay.\n\n177\n00:11:04.135 --> 00:11:07.950\nSo now, when I do that,\nI'm saying pivot this, right?\n\n178\n00:11:07.950 --> 00:11:10.521\nWe're actually instead of\ntaking the color here,\n\n179\n00:11:10.521 --> 00:11:13.819\nwe're actually saying make this\nparticular column right here.\n\n180\n00:11:15.000 --> 00:11:17.380\nThe row data,\nall the data values that we find and\n\n181\n00:11:17.380 --> 00:11:20.440\nthat is gonna fill in as\nfar as row data goes.\n\n182\n00:11:20.440 --> 00:11:22.060\nAnd we're now gonna take color and\n\n183\n00:11:22.060 --> 00:11:25.030\nwe're gonna stretch all those\ncolors across the page.\n\n184\n00:11:25.030 --> 00:11:29.650\nAnd the way that I define those\ncolors is I add an IN right here,\n\n185\n00:11:29.650 --> 00:11:33.400\nanother key word, and within that,\nthat is another function and\n\n186\n00:11:33.400 --> 00:11:36.870\nI'm saying just pick one of these\ncolors that actually exist.\n\n187\n00:11:36.870 --> 00:11:40.050\nNow, I've put these inside the square\nbrackets could I have done it without it?\n\n188\n00:11:40.050 --> 00:11:44.356\nYes, I wanted to show you that there is\nactually another particular method that\n\n189\n00:11:44.356 --> 00:11:45.740\nyou may also see.\n\n190\n00:11:45.740 --> 00:11:48.661\nSo remember that we said the language\nis fairly general and broad and\n\n191\n00:11:48.661 --> 00:11:49.592\nwhat you can do here.\n\n192\n00:11:49.592 --> 00:11:52.840\nSo, we could actually left all\nof these brackets out, but\n\n193\n00:11:52.840 --> 00:11:57.279\nI just left it in the same way instead cuz\nI just like the way that it looked instead\n\n194\n00:11:57.279 --> 00:11:58.891\nof just leaving it that way.\n\n195\n00:11:58.891 --> 00:12:04.841\nAnd then we close that inside right here,\nso we close it with these brackets,\n\n196\n00:12:04.841 --> 00:12:08.867\nand then we close the pivot\nfunction with this one and\n\n197\n00:12:08.867 --> 00:12:12.731\nwe now actually also give\nit an alias here, okay?\n\n198\n00:12:12.731 --> 00:12:17.433\nSo, once I do that now let's take\na look if I run the whole thing.\n\n199\n00:12:20.741 --> 00:12:24.968\nSee if I can select to verify that I'm\nselecting the whole thing there and I'll\n\n200\n00:12:24.968 --> 00:12:30.040\nclick Execute up here in the top and now,\nwhen you take a look at the information.\n\n201\n00:12:30.040 --> 00:12:33.240\nThis may actually be\nthe information that was requested\n\n202\n00:12:33.240 --> 00:12:35.410\nwhen somebody's actually\ntrying to figure out, hey,\n\n203\n00:12:35.410 --> 00:12:41.140\nwhat is the next product that we should\nactually take a look at in terms of color?\n\n204\n00:12:41.140 --> 00:12:41.880\nSo even though,\n\n205\n00:12:41.880 --> 00:12:46.080\nI don't think much about the idea of the\naesthetics of things a lot of times, if\n\n206\n00:12:46.080 --> 00:12:50.860\nI were trying to sell stuff, I might find\nout something like my bib shorts here.\n\n207\n00:12:50.860 --> 00:12:54.125\nApparently, we don't sell anything but\nmulti colored bib shorts.\n\n208\n00:12:54.125 --> 00:12:56.170\n>> [LAUGH]\n>> So don't know why,\n\n209\n00:12:56.170 --> 00:12:58.110\nbut-\n>> A very popular color.\n\n210\n00:12:58.110 --> 00:13:00.498\n>> Yeah, I don't know what\nbib shorts actually are, so\n\n211\n00:13:00.498 --> 00:13:01.834\nI'm kind of stuck there too.\n\n212\n00:13:01.834 --> 00:13:02.400\n>> I dare not ask.\n\n213\n00:13:02.400 --> 00:13:03.202\n>> That's right.\n\n214\n00:13:03.202 --> 00:13:07.760\n[LAUGH] So, you can actually take\na look at something like this.\n\n215\n00:13:07.760 --> 00:13:11.840\nAnd now, this makes it easier, right, for\nsomebody in marketing or whoever might be.\n\n216\n00:13:11.840 --> 00:13:16.187\nLook, I need to see this, but\nthe three columns that you returned to me,\n\n217\n00:13:16.187 --> 00:13:18.412\nI can't make heads or tails of this.\n\n218\n00:13:18.412 --> 00:13:22.381\nBut because we did a summary, right,\nof the actual quantity of these,\n\n219\n00:13:22.381 --> 00:13:26.237\nI can tell you Bib Shorts,\n324 of them were sold in multi-color.\n\n220\n00:13:26.237 --> 00:13:28.611\nAnd the rest of these there\nare actually null values,\n\n221\n00:13:28.611 --> 00:13:30.579\nmeans that we don't have any data for\nthem.\n\n222\n00:13:30.579 --> 00:13:34.306\nSame thing here with the idea\nof Caps that we might have.\n\n223\n00:13:34.306 --> 00:13:37.882\nI'm assuming that means ball caps or\nI don't know for sure.\n\n224\n00:13:37.882 --> 00:13:42.256\nBut here's another one that is\nmulti-colored, Crank sets here black, and\n\n225\n00:13:42.256 --> 00:13:43.950\nthen as we scroll on through.\n\n226\n00:13:45.840 --> 00:13:48.720\nBut now notice that we actually\nstart seeing something like helmets.\n\n227\n00:13:48.720 --> 00:13:50.096\nBlack and blue and red.\n\n228\n00:13:50.096 --> 00:13:52.546\nWell, this is actually easier to read,\nright?\n\n229\n00:13:52.546 --> 00:13:56.836\nSo Daniel if you were to actually pick in\nthat data set where I did show you exactly\n\n230\n00:13:56.836 --> 00:13:59.653\nwhat you needed,\nwhich was the name of the product,\n\n231\n00:13:59.653 --> 00:14:03.002\nthe actual numbers of what we\nactually sold, and the colors.\n\n232\n00:14:03.002 --> 00:14:05.345\nWould you rather see it in\nthat three column format or\n\n233\n00:14:05.345 --> 00:14:08.650\nwould something like this actually\nbe more helpful if you needed this?\n\n234\n00:14:08.650 --> 00:14:12.530\n>> Yeah, this is way easier to see,\nway easy to read and Ronnie I'm guessing\n\n235\n00:14:12.530 --> 00:14:16.380\nthat's the whole purpose of being\nable to employ the pivot function.\n\n236\n00:14:16.380 --> 00:14:20.617\nIs to say, you know what, I'm getting\nall the data as I asked it for, but\n\n237\n00:14:20.617 --> 00:14:24.733\nit's really difficult to parse through,\nfrom a human perspective.\n\n238\n00:14:24.733 --> 00:14:26.733\nThe computers,\nthey can parse through anything you want,\n\n239\n00:14:26.733 --> 00:14:28.693\nyou tell them how to do it and\nthey do it, they don't care.\n\n240\n00:14:28.693 --> 00:14:33.499\nBut for us, having an easier format\nmakes data consumption, again,\n\n241\n00:14:33.499 --> 00:14:35.949\nfor the human, a whole lot easier.\n\n242\n00:14:35.949 --> 00:14:38.979\nAnd that's what it's all about,\nmaking it a little bit easier for\n\n243\n00:14:38.979 --> 00:14:40.396\nus to consume the data itself.\n\n244\n00:14:40.396 --> 00:14:45.860\nAnd heck yeah, turning that, using a pivot\nhere, was definitely the best move.\n\n245\n00:14:45.860 --> 00:14:50.470\n>> It really is, because it does allow us\nto not have to create another structure.\n\n246\n00:14:50.470 --> 00:14:52.380\nThe other way that we could\nhave done that, right,\n\n247\n00:14:52.380 --> 00:14:54.600\nis we could have run\nthat exact same query,\n\n248\n00:14:54.600 --> 00:14:58.200\ngotten to that particular point\nwhere we actually did the pivot.\n\n249\n00:14:58.200 --> 00:15:02.910\nAnd then, we could save it as a table,\nas a temporary table if we needed to, or\n\n250\n00:15:02.910 --> 00:15:07.090\neven as a database object\ninside of our database.\n\n251\n00:15:07.090 --> 00:15:08.380\nSo I was trying to think,\nwhere do I put that?\n\n252\n00:15:08.380 --> 00:15:10.058\nInside of the database, that makes sense.\n\n253\n00:15:10.058 --> 00:15:13.340\nWe could save that and\nthen we could always continue to do that.\n\n254\n00:15:13.340 --> 00:15:15.821\nWe could actually continue to pull\nthat particular table back up.\n\n255\n00:15:15.821 --> 00:15:20.152\nBut then, every time we'd have to run the\nentire table, notice that within this and\n\n256\n00:15:20.152 --> 00:15:24.483\nbeing able to understand the basics of\nsub-querying, notice that we actually took\n\n257\n00:15:24.483 --> 00:15:27.849\nan inner query and we took that and\nwe report it to the outer query.\n\n258\n00:15:27.849 --> 00:15:31.646\nBut this time, we told it exactly how\nit was to actually be reported instead.\n\n259\n00:15:31.646 --> 00:15:35.555\nMakes it done in one step here, but\nnow we don't actually have to create\n\n260\n00:15:35.555 --> 00:15:39.482\nanother structure that continues to\nmake our database grow and swell.\n\n261\n00:15:39.482 --> 00:15:43.336\n>> Well, Ronnie,\njust thinking about subqueries.\n\n262\n00:15:43.336 --> 00:15:47.063\nIt's all about trying to get your\nmind wrapped around the fact\n\n263\n00:15:47.063 --> 00:15:50.156\nthat we're basically taking,\nthe data, right?\n\n264\n00:15:50.156 --> 00:15:54.865\nWe've called for data and now we want to\ndo some extra functionality to that data,\n\n265\n00:15:54.865 --> 00:15:59.519\nas we said maybe to make it more legible,\nmore readable, more easier consumed.\n\n266\n00:15:59.519 --> 00:16:04.193\nThat's what a sub-query is there for,\nit works on what we've already pulled.\n\n267\n00:16:04.193 --> 00:16:08.703\nChanges it, reformats it, or\nit supplies information for the overall,\n\n268\n00:16:08.703 --> 00:16:13.285\nthe outer query as we call it and\ngiving that type of functionality as well,\n\n269\n00:16:13.285 --> 00:16:14.470\na very cool stuff.\n\n270\n00:16:14.470 --> 00:16:17.980\n>> Yeah, it really is but\nof course like anything else,\n\n271\n00:16:17.980 --> 00:16:21.350\nthe one that I did is\na fairly simple example.\n\n272\n00:16:21.350 --> 00:16:25.520\nAnd in real life data based\nland there's never something as\n\n273\n00:16:25.520 --> 00:16:27.320\neasy as what I've just showed you.\n\n274\n00:16:27.320 --> 00:16:28.440\nYeah, that makes sense.\n\n275\n00:16:28.440 --> 00:16:30.570\nYou pulled everything directly from there.\n\n276\n00:16:30.570 --> 00:16:34.450\nWell let me show you a more realistic\nway that this actually does turn out and\n\n277\n00:16:34.450 --> 00:16:38.100\na little bit more step by step and\nhopefully if the first example,\n\n278\n00:16:38.100 --> 00:16:39.820\nif you go I kind of understand that.\n\n279\n00:16:39.820 --> 00:16:43.260\nHopefully, this example kind of\nleads you in the same steps here.\n\n280\n00:16:43.260 --> 00:16:45.624\nAnd then we'll see how this actually\nends up working out as well.\n\n281\n00:16:45.624 --> 00:16:48.480\nSo let's go ahead and take a look here.\n\n282\n00:16:48.480 --> 00:16:52.040\nNow this time I went ahead and\nI did the entire query here and\n\n283\n00:16:52.040 --> 00:16:54.830\nwe're actually gonna change\nthis up a little bit.\n\n284\n00:16:54.830 --> 00:16:56.970\nSo if I wanted to do the same thing, but\n\n285\n00:16:56.970 --> 00:17:00.630\nnow I'm gonna create that\nsame idea of a derived table.\n\n286\n00:17:00.630 --> 00:17:04.000\nBut let's make sure we understand what\nwe're actually going to see here.\n\n287\n00:17:04.000 --> 00:17:08.380\nSo I'm saying select every single column\nfrom this particular derived table that\n\n288\n00:17:08.380 --> 00:17:09.630\nwe're actually seeing.\n\n289\n00:17:09.630 --> 00:17:15.380\nWhich is year and month here,\nas well as a sub total in terms of sales,\n\n290\n00:17:15.380 --> 00:17:18.230\nis what we're actually gonna actually see,\nso that makes sense.\n\n291\n00:17:18.230 --> 00:17:21.840\nSo what I should actually end\nup seeing in terms of the data.\n\n292\n00:17:21.840 --> 00:17:25.080\nAnd the way that it's gonna display it\nto me, is over on the columnar side,\n\n293\n00:17:25.080 --> 00:17:27.590\nI should see my years that I need.\n\n294\n00:17:27.590 --> 00:17:32.720\nAnd then across the top,\nI want the individual names\n\n295\n00:17:32.720 --> 00:17:35.264\nof all of the months that I also see.\n\n296\n00:17:35.264 --> 00:17:39.580\nSo for every months, so I have 2011 over\nhere on this side, then I should see\n\n297\n00:17:39.580 --> 00:17:43.030\nJanuary, February, March, April,\nall the way through to December.\n\n298\n00:17:43.030 --> 00:17:46.310\nAnd then right there,\nat each one of those intersections,\n\n299\n00:17:46.310 --> 00:17:49.660\nI should be able to see how much money\nI actually end up generating here from\n\n300\n00:17:49.660 --> 00:17:53.610\nthe subtotals at this point to\nactually doing what we needed to.\n\n301\n00:17:53.610 --> 00:17:56.790\nSo that way we can actually use\nthat as a simple spreadsheet.\n\n302\n00:17:56.790 --> 00:18:00.144\nIn 2013, in February, I knew exactly\nhow much money that we made.\n\n303\n00:18:00.144 --> 00:18:03.293\nSo what we're actually seeing here\nis that we're able generate that\n\n304\n00:18:03.293 --> 00:18:04.390\nparticular sub query.\n\n305\n00:18:04.390 --> 00:18:09.395\nAnd then when we pivot it, I'm going to\ndo a sum of the sub total for right now.\n\n306\n00:18:09.395 --> 00:18:14.477\nAnd then I'm telling it, hey,\nmake sure that the months are now gonna\n\n307\n00:18:14.477 --> 00:18:19.680\nbe display here for the actual\nheaders here, as far as the columns.\n\n308\n00:18:19.680 --> 00:18:21.140\nNow earlier I said it was Data for\n\n309\n00:18:21.140 --> 00:18:24.010\nthe rows, so that I could have\nmade a misstatement there.\n\n310\n00:18:24.010 --> 00:18:27.347\nIt's usually Data for our columns,\nis what we're taking a look at, as well.\n\n311\n00:18:27.347 --> 00:18:32.030\nThen we're gonna run another\nquery to help us out.\n\n312\n00:18:32.030 --> 00:18:33.930\nNow, so let me go and run this first one.\n\n313\n00:18:33.930 --> 00:18:37.180\nSo usually this is where\nwe end up running it.\n\n314\n00:18:37.180 --> 00:18:40.660\nAnd it almost returns us to what\nwe thought we would actually have.\n\n315\n00:18:41.670 --> 00:18:45.265\nSo when I actually pull this up and\nyou take a look at the actual data here.\n\n316\n00:18:45.265 --> 00:18:50.840\nNotice over on the left hand side there\nare the years that I'm talking about.\n\n317\n00:18:50.840 --> 00:18:53.980\nNow, you might see that the order\nis a little bit strange here.\n\n318\n00:18:53.980 --> 00:18:57.918\nAnd that's because in terms of the way\nthat the query results come in,\n\n319\n00:18:57.918 --> 00:18:59.597\nthere is no specified order.\n\n320\n00:18:59.597 --> 00:19:02.285\nAnd if there is no specified\norder it means it returns it\n\n321\n00:19:02.285 --> 00:19:05.390\nin the natural order in which\nthe data was actually entered in.\n\n322\n00:19:05.390 --> 00:19:08.640\nSo this is how you actually\nwould see it as well.\n\n323\n00:19:08.640 --> 00:19:13.690\nSo 2013, 14, and then 11 and 12 here.\n\n324\n00:19:13.690 --> 00:19:16.910\nPerfectly fine, but\nnotice across the top here.\n\n325\n00:19:16.910 --> 00:19:20.276\nIt gave me the number that I set in there.\n\n326\n00:19:20.276 --> 00:19:24.467\nBecause let's say that for example in\nour database table, we actually ended\n\n327\n00:19:24.467 --> 00:19:28.932\nup finding those were actually the number\nthat were actually in the table itself.\n\n328\n00:19:28.932 --> 00:19:33.760\nSo I generated it yes,\nyou saw where I type.\n\n329\n00:19:33.760 --> 00:19:35.855\nBut let me see if I can\nscroll up here a little bit.\n\n330\n00:19:35.855 --> 00:19:41.870\nYou actually saw where I entered in all\nthose numbers in cells 1 through 12.\n\n331\n00:19:41.870 --> 00:19:44.470\nBut let's say,\nthat's where the data actually existed\n\n332\n00:19:44.470 --> 00:19:49.110\ninside of your database already and\nwe wanted it put out this way.\n\n333\n00:19:49.110 --> 00:19:51.027\nPerfectly fine.\nIt will actually allow us, but\n\n334\n00:19:51.027 --> 00:19:55.013\nthe problem is now somebody can actually\nsay, well what does that actually mean?\n\n335\n00:19:55.013 --> 00:19:58.796\nIt could mean different quarters,\nit could mean people's IDs that year,\n\n336\n00:19:58.796 --> 00:20:00.710\nwhatever it might be here.\n\n337\n00:20:00.710 --> 00:20:03.970\nSo we need to actually clean\nthat up a little bit more.\n\n338\n00:20:03.970 --> 00:20:07.520\nSo what might also end up happening then,\n\n339\n00:20:07.520 --> 00:20:13.510\nis that now we need to substitute each\none of those numbers for what we want.\n\n340\n00:20:13.510 --> 00:20:15.440\nNow this is where it\nactually comes back and\n\n341\n00:20:15.440 --> 00:20:19.440\nit shows you why the fundamentals that\nyou and I were actually going over\n\n342\n00:20:19.440 --> 00:20:24.030\nas far as the basics of querying goes,\nwhy they're actually important.\n\n343\n00:20:24.030 --> 00:20:28.000\nSo I'm not actually showing you a ton of\nthings that were different from what we\n\n344\n00:20:28.000 --> 00:20:34.520\nreally did at the beginning of our\nkind of primer here on SQL querying.\n\n345\n00:20:34.520 --> 00:20:36.210\nBut now when we start taking a look,\n\n346\n00:20:37.310 --> 00:20:39.530\nthere's something else\nthat we also will do.\n\n347\n00:20:39.530 --> 00:20:45.990\nSo first thing that also has to happen\nis that now I can do this select here.\n\n348\n00:20:45.990 --> 00:20:50.650\nNow, when I do that select statement,\nI'm saying select all and then here it is.\n\n349\n00:20:50.650 --> 00:20:56.170\nHere is that same derived table but\nthis time, I created a case statement\n\n350\n00:20:56.170 --> 00:21:01.158\nthat said, hey when you see these\nnumbers turn them into months.\n\n351\n00:21:01.158 --> 00:21:04.573\nSo if you see a 1,\nreport it as January instead.\n\n352\n00:21:04.573 --> 00:21:06.593\n2, February, makes sense.\n\n353\n00:21:06.593 --> 00:21:08.960\nSo you go all the way through.\n\n354\n00:21:08.960 --> 00:21:10.969\nAnd you essentially create\nthat same derive table.\n\n355\n00:21:10.969 --> 00:21:15.350\nAnd we're gonna call it TableDate this\ntime, I probably just mistyped that.\n\n356\n00:21:15.350 --> 00:21:17.270\nWe can call it TableData.\n\n357\n00:21:17.270 --> 00:21:19.530\nAnd then we'll do the same pivot here.\n\n358\n00:21:19.530 --> 00:21:23.923\nAnd now, this one's a little bit trickier\nbecause you actually do have to kind of\n\n359\n00:21:23.923 --> 00:21:26.140\nslow down a little bit for this.\n\n360\n00:21:26.140 --> 00:21:30.440\nSo now, what's gonna end up happening\nis that we're gonna do a sum total.\n\n361\n00:21:30.440 --> 00:21:34.710\nSo on this one, we're actually going\nto total that task to make the data for\n\n362\n00:21:34.710 --> 00:21:40.590\ncolumns and then for each month here,\nwe actually are telling it what to report.\n\n363\n00:21:40.590 --> 00:21:47.870\nSo at this point, if I take that\nentire query and now I execute that,\n\n364\n00:21:48.880 --> 00:21:53.940\nthis is how we replace what we might\nend up finding that actually exists in\n\n365\n00:21:53.940 --> 00:21:59.870\nour tables here as being\nnow the actual name.\n\n366\n00:21:59.870 --> 00:22:01.960\nSo how else could we have done this?\n\n367\n00:22:01.960 --> 00:22:05.960\nWell, I could go back in to\nthe database table itself.\n\n368\n00:22:05.960 --> 00:22:09.250\nAnd let's say, I can say, I just need\nto add another column into this and\n\n369\n00:22:09.250 --> 00:22:12.800\nI'm gonna replace these numbers\nhere with this instead.\n\n370\n00:22:12.800 --> 00:22:17.390\nSo instead of the month number,\n\n371\n00:22:17.390 --> 00:22:21.390\nI should say month name and\nI should just and type those things out.\n\n372\n00:22:21.390 --> 00:22:24.331\nBut instead,\nif the data actually exists there,\n\n373\n00:22:24.331 --> 00:22:27.772\nnotice that we can do this on the fly,\nand really help out.\n\n374\n00:22:27.772 --> 00:22:31.461\nSo being able to actually have the data\npivoted in the way that we want to,\n\n375\n00:22:31.461 --> 00:22:33.880\nbeing able to display it\nin the way that we want,\n\n376\n00:22:33.880 --> 00:22:36.374\nsometimes it does take\na little bit more effort.\n\n377\n00:22:36.374 --> 00:22:40.563\nAnd so in this one I showed you kind of\na two step method to getting what you want\n\n378\n00:22:40.563 --> 00:22:43.670\nbecause usually that's\nwhat's gonna happen.\n\n379\n00:22:43.670 --> 00:22:46.243\nThe idea of a single\npivot can help you yes.\n\n380\n00:22:46.243 --> 00:22:50.350\nSo we showed you an example\nof that as well.\n\n381\n00:22:50.350 --> 00:22:53.843\nSo just as we can actually pivot Daniel\nwhat do you think that that also means,\n\n382\n00:22:53.843 --> 00:22:55.690\nthat there as to be another side of this?\n\n383\n00:22:55.690 --> 00:22:59.429\n>> Yes, we can actually take\na table that has been pivoted and\n\n384\n00:22:59.429 --> 00:23:02.950\nbring it back from its pivotness, I guess-\n>> [LAUGH]\n\n385\n00:23:02.950 --> 00:23:03.507\n>> Is the saying.\n\n386\n00:23:03.507 --> 00:23:06.870\nWell, we're going to have the un-pivots,\nright Ronnie?\n\n387\n00:23:06.870 --> 00:23:10.170\n>> We are, we're actually gonna end\nup actually being able to do what we\n\n388\n00:23:10.170 --> 00:23:12.010\ncall an un-pivot as well.\n\n389\n00:23:12.010 --> 00:23:13.145\nNow, here's the thing.\n\n390\n00:23:13.145 --> 00:23:14.806\nIt sounds simple enough.\n\n391\n00:23:14.806 --> 00:23:19.394\nYou take your regular data that actually\ngets reported out whatever the columns,\n\n392\n00:23:19.394 --> 00:23:21.600\nthen you actually flip them into rows.\n\n393\n00:23:21.600 --> 00:23:25.105\nWhatever the rows,\nthose headers actually become columns.\n\n394\n00:23:25.105 --> 00:23:30.668\nSo that seems simple enough,\nbut you can't just do that.\n\n395\n00:23:30.668 --> 00:23:31.529\nYou can't just do that,\n\n396\n00:23:31.529 --> 00:23:33.579\nyou can't just take the regular\ndata that we reported out.\n\n397\n00:23:33.579 --> 00:23:38.444\nIf you remember the very first example,\nwhere I simply took that data and\n\n398\n00:23:38.444 --> 00:23:40.370\nI went ahead and pivoted it.\n\n399\n00:23:40.370 --> 00:23:43.420\nAnd that actually change it around,\nwhich is fine.\n\n400\n00:23:43.420 --> 00:23:46.240\nBut you can't just take that\noriginal data that I have and\n\n401\n00:23:46.240 --> 00:23:49.990\nthen say let's un-pivot this,\ncuz it doesn't make sense.\n\n402\n00:23:49.990 --> 00:23:53.890\nSo you actually have to start off with a\npivot table at the very beginning is what\n\n403\n00:23:53.890 --> 00:23:55.240\nyou have to do.\n\n404\n00:23:55.240 --> 00:23:58.536\nNow it doesn't always\nhave to be a pivot table.\n\n405\n00:23:58.536 --> 00:24:02.523\nSo when I say that,\nwhat else do you have to do then?\n\n406\n00:24:02.523 --> 00:24:06.666\nSometimes the reason why we actually\ncan start off with the pivot table.\n\n407\n00:24:06.666 --> 00:24:08.380\nIt's because it's an easy example, right?\n\n408\n00:24:08.380 --> 00:24:11.860\nI can take this exact same table,\nwhich is what I'm gonna do, okay?\n\n409\n00:24:11.860 --> 00:24:15.630\nAnd then I can un-pivot that information\nbut it's not gonna give me that original\n\n410\n00:24:15.630 --> 00:24:19.560\nthree column data, okay,\nthe way that you think it's gonna give me.\n\n411\n00:24:19.560 --> 00:24:22.770\nBecause what's happening here is that\nwe've summed up information now.\n\n412\n00:24:22.770 --> 00:24:26.101\nIt can't just take all the data and\nactually make it unsum, right?\n\n413\n00:24:26.101 --> 00:24:29.472\nSo like for March of 2013 here.\n\n414\n00:24:29.472 --> 00:24:34.206\nIt can't take that and break it down all\nthe way into every individual sale that\n\n415\n00:24:34.206 --> 00:24:37.132\nwas made or sub-total that was made.\n\n416\n00:24:37.132 --> 00:24:41.320\nSo it actually will report it\nin summary information again.\n\n417\n00:24:41.320 --> 00:24:43.410\nNow, in terms of the undiv it,\n\n418\n00:24:43.410 --> 00:24:49.000\nthe reason why we have something like this\nis because, we can actually have data that\n\n419\n00:24:49.000 --> 00:24:53.240\nexists in a poorly normalized state which\nis what we were talking about before.\n\n420\n00:24:54.320 --> 00:24:59.090\nAnd usually that's another reason why\nwe might also end up doing this too.\n\n421\n00:24:59.090 --> 00:25:02.540\nSo if i just simply show you,\nand here it is.\n\n422\n00:25:02.540 --> 00:25:07.311\nI wanna have and I took that last pivot\ntable that we made and I converted into\n\n423\n00:25:07.311 --> 00:25:11.507\na database table that actually\nexist as an object in my database.\n\n424\n00:25:11.507 --> 00:25:15.060\nAnd I can show that up here somewhere,\nthere we go, okay?\n\n425\n00:25:15.060 --> 00:25:19.190\nSo if i come up here,\nlet me see if I can show you.\n\n426\n00:25:19.190 --> 00:25:21.280\nThere's actually a table\nsomewhere up here.\n\n427\n00:25:22.460 --> 00:25:23.110\nThat's what happened.\n\n428\n00:25:23.110 --> 00:25:24.530\nI changed my database.\n\n429\n00:25:24.530 --> 00:25:27.850\nYou might not remember,\nso when we refer to this.\n\n430\n00:25:27.850 --> 00:25:29.600\nIn one of the very first shows that I did,\n\n431\n00:25:29.600 --> 00:25:32.870\nI said that I'm gonna do two\nreal types of querying here.\n\n432\n00:25:32.870 --> 00:25:36.426\nOne is just selecting the data, and\nwhen I do that, that's just gonna be for\n\n433\n00:25:36.426 --> 00:25:38.663\nthe 2014, the Adventureworks 2014.\n\n434\n00:25:38.663 --> 00:25:42.509\nBut if I am going to modify the table\nstructure, hey, I am going to modify\n\n435\n00:25:42.509 --> 00:25:46.433\nthe database, I am going do it based\noff of the Adventureworks 2012.\n\n436\n00:25:46.433 --> 00:25:48.400\nSo, I had to remember that.\n\n437\n00:25:48.400 --> 00:25:51.680\nAnd the good thing is, I actually left\nmyself keys like right here that says,\n\n438\n00:25:51.680 --> 00:25:55.350\nhey, you are going to use the\nAdventureworks2012 database instead, okay?\n\n439\n00:25:55.350 --> 00:25:59.160\nSo here, if I select Adventureworks and\nthen I scroll down,\n\n440\n00:25:59.160 --> 00:26:02.350\nI actually created a table\ncalled YearlyTotals.\n\n441\n00:26:02.350 --> 00:26:04.896\nAnd if you're not able to see that,\nhere it is.\n\n442\n00:26:04.896 --> 00:26:08.318\nSo that's the exact same thing that\nyou're seeing right here is that\n\n443\n00:26:08.318 --> 00:26:09.880\nparticular table.\n\n444\n00:26:09.880 --> 00:26:14.641\nSo, it can happen like this in which\npeople do run queries off of one database,\n\n445\n00:26:14.641 --> 00:26:18.827\nokay and they go, that's exactly what\nI need to see in my database and\n\n446\n00:26:18.827 --> 00:26:23.374\nthen we can say, and I just saved it\nin this particular database instead and\n\n447\n00:26:23.374 --> 00:26:27.090\nI ran that and we can actually\ndo something like that as well.\n\n448\n00:26:27.090 --> 00:26:31.858\nSo, this now allows us to build a database\nsomewhat quickly depending on what we\n\n449\n00:26:31.858 --> 00:26:32.577\nneed to do.\n\n450\n00:26:32.577 --> 00:26:35.920\nAnd here, it allow me to build\nthis table full of data, okay.\n\n451\n00:26:35.920 --> 00:26:40.351\nSo, if you happened to have imported,\nlet's say that this table,\n\n452\n00:26:40.351 --> 00:26:45.252\ninto that Adventureworks2012 database,\nfirst thing I'm gonna do is\n\n453\n00:26:45.252 --> 00:26:50.254\nmake sure that I do select and I change\nthat execution over to that database.\n\n454\n00:26:50.254 --> 00:26:53.464\nAnd now, I'm gonna run it again,\nnow, did it change?\n\n455\n00:26:53.464 --> 00:26:57.432\nIt already did but let me make sure I do\nit in two steps here and I can verify,\n\n456\n00:26:57.432 --> 00:27:01.150\nthat it is the Adventureworks2012,\nand there it is.\n\n457\n00:27:01.150 --> 00:27:05.790\nSo, here is my data,\nthat I've actually now run unpivoted.\n\n458\n00:27:05.790 --> 00:27:10.310\nLet me show you the original instead and\nthat way we'll talk through it again.\n\n459\n00:27:10.310 --> 00:27:15.440\nSo now I need to change this stuff around\nbut notice the unpivot statement, okay.\n\n460\n00:27:15.440 --> 00:27:20.338\nSo now this is another function, and\nso what I've done now is I've send,\n\n461\n00:27:20.338 --> 00:27:26.105\nI've said that's right, we're gonna take\nthat data, YearlyTotals and what we're\n\n462\n00:27:26.105 --> 00:27:31.490\ngonna actually say is for the columns\nthemselves, this is what we're gonna do.\n\n463\n00:27:31.490 --> 00:27:37.235\nSo now, month is gonna become the columns,\nand, or excuse me, the rows now.\n\n464\n00:27:37.235 --> 00:27:40.277\nI'm starting to say it backward cuz\nit's unpivot, not pivot, excuse me.\n\n465\n00:27:40.277 --> 00:27:45.271\nAnd then, it's gonna be January all\nthe way through December at this point and\n\n466\n00:27:45.271 --> 00:27:47.030\nit's gonna report it out.\n\n467\n00:27:47.030 --> 00:27:54.390\nWhen I run this and I execute it,\nwe can now see how the data has changed.\n\n468\n00:27:54.390 --> 00:27:56.213\nEvery single year is\nactually grouped here.\n\n469\n00:27:56.213 --> 00:28:01.632\nYou can see 2000 through 2005,\nall that data's actually grouped together.\n\n470\n00:28:01.632 --> 00:28:08.686\nAnd then every month that we made sales in\n2005 is also reported out right here too.\n\n471\n00:28:08.686 --> 00:28:11.887\nSame thing with each of those years, too.\n\n472\n00:28:11.887 --> 00:28:15.820\nNow, when we took a look at it at the very\nbeginning, right, there's a ton of data\n\n473\n00:28:15.820 --> 00:28:20.370\nthat's sitting there, and all of these\nshould be represented as individual sales.\n\n474\n00:28:20.370 --> 00:28:25.140\nBut by being able to do this, as long as\nthat data was already existing in a poorly\n\n475\n00:28:25.140 --> 00:28:28.550\nnormalized state, too many columns,\nnot enough data, and\n\n476\n00:28:28.550 --> 00:28:31.660\nthe way that we would have seen it,\nthen we can also use\n\n477\n00:28:31.660 --> 00:28:35.490\nunpivot to help us to actually\nungroup that the way that we want to.\n\n478\n00:28:35.490 --> 00:28:38.420\nAnd this something else that\nwe can also end up seeing.\n\n479\n00:28:38.420 --> 00:28:42.110\nCuz this is probably more normalized\nin the sense that we have\n\n480\n00:28:42.110 --> 00:28:46.050\nfewer number of columns but much more\ndata that we actually have in place.\n\n481\n00:28:46.050 --> 00:28:50.093\nSo being able to do both of those is\nactually big help as far as the display.\n\n482\n00:28:50.093 --> 00:28:54.590\nBut remember that they're essentially\njust sub queries is what they really are.\n\n483\n00:28:54.590 --> 00:28:55.990\nWhen it breaks down to everything.\n\n484\n00:28:55.990 --> 00:28:59.290\nIt's just using now a function\ncalled pivot and un-pivot instead.\n\n485\n00:28:59.290 --> 00:29:02.120\n>> Well that's a really cool function\nthough right it's something we\n\n486\n00:29:02.120 --> 00:29:03.340\nmight want to do again.\n\n487\n00:29:03.340 --> 00:29:07.420\nTrying to get that data formatted in\na way that's more easily consumed.\n\n488\n00:29:07.420 --> 00:29:10.045\nAnd pivot,\nI now see what all the rage is about.\n\n489\n00:29:10.045 --> 00:29:12.297\nEveryone's like I gotta know\nabout these pivot tables, yo.\n\n490\n00:29:12.297 --> 00:29:13.368\nI gotta have this skill under my belt.\n\n491\n00:29:13.368 --> 00:29:14.392\n>> It is a buzz word.\n\n492\n00:29:14.392 --> 00:29:16.726\n>> It is, well and for\ngood reason apparently.\n\n493\n00:29:16.726 --> 00:29:20.669\nCuz it makes it easier for us to actually\nconsume the data, use the data, and\n\n494\n00:29:20.669 --> 00:29:23.840\nthen if we need to revert it back,\nwe can do that as well.\n\n495\n00:29:23.840 --> 00:29:26.150\nThank you so much Ronnie for\nexplaining these topics for us.\n\n496\n00:29:26.150 --> 00:29:27.810\nIs there anything else we need to cover?\n\n497\n00:29:27.810 --> 00:29:30.351\nI know we have actually a lot\nmore to be honest with you.\n\n498\n00:29:30.351 --> 00:29:32.775\n>> There is still a lot more to\ngo in terms of sub querying,\n\n499\n00:29:32.775 --> 00:29:35.290\nat least a little more,\nI shouldn't say a lot.\n\n500\n00:29:35.290 --> 00:29:38.320\nBut there's a little but more for\nus to cover in terms of sub querying but\n\n501\n00:29:38.320 --> 00:29:39.786\nthat's gonna actually be kept for\n\n502\n00:29:39.786 --> 00:29:42.683\na different show since it actually\nmoves us away from this display.\n\n503\n00:29:42.683 --> 00:29:47.172\nBut do remember and if you have it right,\nyou gotta start practicing these.\n\n504\n00:29:47.172 --> 00:29:50.460\nIt's easy enough to do some\nof the basic sub queries, but\n\n505\n00:29:50.460 --> 00:29:54.501\nyou have to start practicing these\njoints and also the sub querying and\n\n506\n00:29:54.501 --> 00:29:57.053\nunderstanding the logic behind it as well.\n\n507\n00:29:57.053 --> 00:30:01.124\nThe good thing is, well hopefully, I\nbelieve we will, we'll have like all these\n\n508\n00:30:01.124 --> 00:30:04.487\nqueries will be available to you so\nyou can actually run these on your\n\n509\n00:30:04.487 --> 00:30:08.322\nown versus your own 2014 database which\nyou can pull offline as well, and\n\n510\n00:30:08.322 --> 00:30:11.810\nbe able to actually set them up and\nrun them if you choose to.\n\n511\n00:30:11.810 --> 00:30:16.290\nIdeally, hopefully what that actually does\nis, it doesn't just let you run them but\n\n512\n00:30:16.290 --> 00:30:19.680\nyou can actually kind of parallel that and\nrun them with your own and\n\n513\n00:30:19.680 --> 00:30:23.820\nmake your own and that way you'll see\nexamples that are good and decent.\n\n514\n00:30:23.820 --> 00:30:24.720\nI won't say good.\n\n515\n00:30:24.720 --> 00:30:29.857\nOkay examples versus your own and go,\nhere's where I didn't actually see it.\n\n516\n00:30:29.857 --> 00:30:33.091\nBut, as you keep doing it the more\nthe logic's gonna make sense.\n\n517\n00:30:33.091 --> 00:30:34.620\nAnd that's what has to happen.\n\n518\n00:30:34.620 --> 00:30:39.520\nThese things have to logically make sense\nas you read them or you being able to pick\n\n519\n00:30:39.520 --> 00:30:43.820\nout the right one, especially when you're\nfacing the exam, it's not gonna help you.\n\n520\n00:30:43.820 --> 00:30:47.330\nBeing able to understand when to\nuse them is just as important.\n\n521\n00:30:47.330 --> 00:30:48.920\nAnd also in everything\nelse that we've done,\n\n522\n00:30:48.920 --> 00:30:53.080\nwe've also tried to show you when we get\nerror messages to show you those messages.\n\n523\n00:30:53.080 --> 00:30:56.080\nCuz one of the keys of course then,\nis when you're working with SQL\n\n524\n00:30:56.080 --> 00:31:00.080\nis to not let those error messages throw\nyou to the point where you just quit.\n\n525\n00:31:00.080 --> 00:31:02.040\nI've done that a couple of times,\n\n526\n00:31:02.040 --> 00:31:04.290\nwhere I'm like,\nI'm just gonna do this tomorrow instead.\n\n527\n00:31:04.290 --> 00:31:06.020\nBut remember, time and\n\n528\n00:31:06.020 --> 00:31:10.830\nyour company is waiting on you to run\nthe proper queries that need to be done.\n\n529\n00:31:10.830 --> 00:31:13.150\nWell, this is how you actually\nstart to create them.\n\n530\n00:31:13.150 --> 00:31:14.600\nAnd the more complex your data is,\n\n531\n00:31:14.600 --> 00:31:17.450\nthe more you are going to need\nthese complex types of queries.\n\n532\n00:31:17.450 --> 00:31:20.610\nSub queries is one of the fundamental\nthings you have to get under your belt.\n\n533\n00:31:20.610 --> 00:31:22.260\n>> Wise words from Mr. Ronnie Wong.\n\n534\n00:31:22.260 --> 00:31:23.950\nTake heed and listen.\n\n535\n00:31:23.950 --> 00:31:26.120\nThat being said,\nit is time for us to sign off.\n\n536\n00:31:26.120 --> 00:31:28.410\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n537\n00:31:28.410 --> 00:31:29.249\n>> I'm Ronnie Wong.\n\n538\n00:31:29.249 --> 00:31:30.506\n>> We'll see you next time.\n\n539\n00:31:30.506 --> 00:31:38.420\n[MUSIC]\n\n",
          "vimeoId": "164049021"
        },
        {
          "description": "In this episode, Daniel and Ronnie finish their look into Subqueries in SQL. They start off by exploring the use of the APPLY operator, which is a replacement for correlated subqueries and derived tables. Finally they demonstrate using a Common Table Expression(CTE).",
          "length": "1836",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-3-implement_subqueries_pt3-042016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-3-implement_subqueries_pt3-042016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-3-3-implement_subqueries_pt3-042016-1-sm.jpg",
          "title": "Implement Subqueries Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.035 --> 00:00:17.177\nAll right, greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:17.177 --> 00:00:20.198\nI am your host Daniel Lowrie and\nin today's episode\n\n4\n00:00:20.198 --> 00:00:24.639\nwe are continuing on with our querying\nthe Microsoft SQL 2014 Server.\n\n5\n00:00:24.639 --> 00:00:26.921\nAnd joining us back in\nthe studio again today,\n\n6\n00:00:26.921 --> 00:00:29.738\njust when you thought it was\nsafe to come back to ITProTV.\n\n7\n00:00:29.738 --> 00:00:31.673\n>> [LAUGH]\n>> The SQL master himself, Mr.\n\n8\n00:00:31.673 --> 00:00:32.433\nRonnie Wong.\n\n9\n00:00:32.433 --> 00:00:34.310\nRonnie welcome back sir,\nhow's it going today?\n\n10\n00:00:34.310 --> 00:00:35.215\n>> It is going great.\n\n11\n00:00:35.215 --> 00:00:38.850\nAs we continue to take a look at\nmore in the realm of sub-querying.\n\n12\n00:00:38.850 --> 00:00:40.340\nI know you couldn't believe it,\n\n13\n00:00:40.340 --> 00:00:43.880\nthat we could actually do any more,\nbut there's a lot in sub-querying.\n\n14\n00:00:43.880 --> 00:00:44.775\n>> Can't get enough of it Ronnie.\n\n15\n00:00:44.775 --> 00:00:48.850\n>> Yeah, most of us really can't until we\nactually start seeing that I've done three\n\n16\n00:00:48.850 --> 00:00:49.980\nepisodes now on it.\n\n17\n00:00:49.980 --> 00:00:50.670\n>> Now there's enough.\n\n18\n00:00:50.670 --> 00:00:53.520\n>> Yeah, [LAUGH] now there's\nplenty where we start seeing this.\n\n19\n00:00:53.520 --> 00:00:57.775\nSo now as we continue on, there's just a\ncouple of more different elements that we\n\n20\n00:00:57.775 --> 00:01:01.846\nneed to take a look at for sub-querying\nthat will help round out your skills for\n\n21\n00:01:01.846 --> 00:01:05.490\nthe exam, as well as some of\nthe elements that you'll see now.\n\n22\n00:01:05.490 --> 00:01:07.032\nEvery subquery that we've presented,\n\n23\n00:01:07.032 --> 00:01:12.290\nI probably tend to emphasis\nthem as being equal things.\n\n24\n00:01:12.290 --> 00:01:16.510\nA pivot and unpivot and the correlated and\nthe multi-valued as well as the scalar\n\n25\n00:01:16.510 --> 00:01:19.924\nsubqueries, all these that you've\nseen in previous episodes,\n\n26\n00:01:19.924 --> 00:01:24.162\nthe emphasis has pretty much been where\nit's like, this is something great.\n\n27\n00:01:24.162 --> 00:01:26.206\nAnd the reality is a lot of times,\n\n28\n00:01:26.206 --> 00:01:30.586\nyou're probably gonna end up just\ndoing a few of them, but of course for\n\n29\n00:01:30.586 --> 00:01:35.990\nthe exam you don't know which one they're\nreally going to kind of poke your head on.\n\n30\n00:01:35.990 --> 00:01:39.621\nIt's hard to just go, guys,\ndon't worry about doing this one,\n\n31\n00:01:39.621 --> 00:01:43.270\nworry more about doing this one,\nI can't do that, right.\n\n32\n00:01:43.270 --> 00:01:46.090\nSo the best thing that I can do is\nactually just make sure I emphasize\n\n33\n00:01:46.090 --> 00:01:50.330\nall of them, so that when it comes down\nto it you at least have an understanding\n\n34\n00:01:50.330 --> 00:01:52.220\nof what each of these\nthings actually does and\n\n35\n00:01:52.220 --> 00:01:55.550\nyou've seen a real example\nof how they actually work.\n\n36\n00:01:55.550 --> 00:01:58.780\nEven if you've never ran one before,\nbut you'll also get the opportunity and\n\n37\n00:01:58.780 --> 00:02:00.720\nchance to actually be able\nto do them on your own.\n\n38\n00:02:00.720 --> 00:02:03.350\nSo that's what we wanna make sure\nthat you actually get prepared for,\n\n39\n00:02:03.350 --> 00:02:07.350\nbecause leaving you kinda high and dry on\nany one of these would not be fair for\n\n40\n00:02:07.350 --> 00:02:11.560\nyou, nor would it be good since you're\ngetting ready to take that exam and\n\n41\n00:02:11.560 --> 00:02:14.370\npass that SQL Server exam as well.\n\n42\n00:02:14.370 --> 00:02:17.730\nSo, today we are moving a little\nbit further in the realm\n\n43\n00:02:17.730 --> 00:02:20.500\nof some of the different\nsub-queries that we have available.\n\n44\n00:02:20.500 --> 00:02:26.630\nAnd this particular subquery\nis unusual in its purpose,\n\n45\n00:02:26.630 --> 00:02:30.260\nwhen we start doing the idea of\nsubqueries here on this one.\n\n46\n00:02:30.260 --> 00:02:34.300\nAnd that is because,\nwe are now moving into a one of these\n\n47\n00:02:34.300 --> 00:02:37.880\noperators that we call the APPLY operator.\n\n48\n00:02:37.880 --> 00:02:42.596\nNow when it comes down to what we're about\nto do, you're gonna see something strange,\n\n49\n00:02:42.596 --> 00:02:45.780\nwhich is not nothing I'd normally like to\nshow, but it's something that we have to\n\n50\n00:02:45.780 --> 00:02:48.480\nbe able to do to show you it\nactually works the same way.\n\n51\n00:02:48.480 --> 00:02:53.170\nSo in anything that you saw, let's say for\nexample in a correlated query.\n\n52\n00:02:54.310 --> 00:02:57.830\nI can actually go and\ncreate a derived table.\n\n53\n00:02:57.830 --> 00:03:00.400\nAnd if you're not sure what a derived\ntable is, make sure you go back to that\n\n54\n00:03:00.400 --> 00:03:04.610\nepisode and take a look at those\nthings in that derived table.\n\n55\n00:03:04.610 --> 00:03:08.890\nI can take a derived table and\nactually generate the same exact results.\n\n56\n00:03:08.890 --> 00:03:11.760\nAnd what we're actually starting to\nsee is that there's multiple and\n\n57\n00:03:11.760 --> 00:03:13.400\nvery many ways, right.\n\n58\n00:03:13.400 --> 00:03:18.240\nSo if I were to choose between\na correlated table versus a derived table,\n\n59\n00:03:18.240 --> 00:03:20.050\nwhy would I choose one over the other?\n\n60\n00:03:20.050 --> 00:03:23.320\nAnd we emphasize that in\nthat derived table episode.\n\n61\n00:03:23.320 --> 00:03:27.620\nThis time, we're actually going even\nfurther to show you a third way,\n\n62\n00:03:27.620 --> 00:03:31.340\nwhich is called using the APPLY operator,\nas well.\n\n63\n00:03:31.340 --> 00:03:33.790\nSo everything that we're\nabout to show you now,\n\n64\n00:03:33.790 --> 00:03:37.510\nalso would generate\nthe same exact same query.\n\n65\n00:03:37.510 --> 00:03:41.440\nBut this time, there's actually\na different purpose to it, okay?\n\n66\n00:03:41.440 --> 00:03:45.790\nCorrelated queries, when we're actually\ndoing it is because a lot of times we're\n\n67\n00:03:45.790 --> 00:03:48.860\ndoing a sub-query, and it's not working\nexactly the way that we need it to,\n\n68\n00:03:48.860 --> 00:03:52.200\nbecause it's not reporting the data,\nand getting some of that data back.\n\n69\n00:03:52.200 --> 00:03:54.930\nAnd we talked about that in\nthe idea of a correlated query.\n\n70\n00:03:54.930 --> 00:03:59.460\nThat it can actually generate some\ninformation on the outer query.\n\n71\n00:03:59.460 --> 00:04:00.780\nReport that to the inner query, so\n\n72\n00:04:00.780 --> 00:04:05.840\nthat the inner query can report that\nback out to the outer query again.\n\n73\n00:04:05.840 --> 00:04:09.200\nSo that way we can actually have something\nlike that, that actually does kinda bounce\n\n74\n00:04:09.200 --> 00:04:13.860\nback and forth in terms of what it\nactually generates for us to help us out.\n\n75\n00:04:13.860 --> 00:04:18.370\nIn the derived table, it's so that I don't\nreally need structures and functions\n\n76\n00:04:18.370 --> 00:04:22.470\nthat I continue to add to my database,\nand essentially bloat the database.\n\n77\n00:04:22.470 --> 00:04:27.100\nIn a derived table, the existence of that\nparticular table that we end up creating\n\n78\n00:04:27.100 --> 00:04:32.640\nin RAM is only really good for returning\nvalues to that single outer query and\n\n79\n00:04:32.640 --> 00:04:35.850\nactually returning it one time as well.\n\n80\n00:04:35.850 --> 00:04:41.240\nSo when we actually want to run\nthe idea here of derived tables,\n\n81\n00:04:41.240 --> 00:04:44.292\nit's great as long as it's actually\nwithin that select statement and\n\n82\n00:04:44.292 --> 00:04:46.240\nthat we're only return it one time.\n\n83\n00:04:46.240 --> 00:04:47.910\nAnd that's the only reason\nwhy we would need it.\n\n84\n00:04:48.970 --> 00:04:54.320\nNow what we are about to talk about here\ntoday is what we call APPLY operators too.\n\n85\n00:04:54.320 --> 00:04:58.830\nNow the good thing is we already have\nsome familiarity with the concept and\n\n86\n00:04:58.830 --> 00:05:00.816\nhow this is actually\ngoing to work as well.\n\n87\n00:05:00.816 --> 00:05:05.210\nAnd the reason that we do, we actually did\na whole episode, maybe even two episodes\n\n88\n00:05:05.210 --> 00:05:11.470\nhere, on creating select statements or\nqueries, my using join statements, too.\n\n89\n00:05:11.470 --> 00:05:14.700\nNow, if you remember the idea of joins,\nright,\n\n90\n00:05:14.700 --> 00:05:19.370\nwe take data from multiple tables\nthat exist in our database.\n\n91\n00:05:19.370 --> 00:05:22.100\nWe link them together, and\nthen we can query essentially,\n\n92\n00:05:22.100 --> 00:05:27.070\ninformation from both to those tables, or\neven multiple tables at the same time.\n\n93\n00:05:27.070 --> 00:05:30.020\nAnd this is something that's actually\nreally great because it gets us out\n\n94\n00:05:30.020 --> 00:05:33.970\nof that realm of only being able to create\na query and actually pull the information\n\n95\n00:05:33.970 --> 00:05:37.750\nfrom one table, which would be fairly\nlimited in what we need to do.\n\n96\n00:05:37.750 --> 00:05:42.680\nSo in this sense, then what APPLY\ndoes is something a little bit\n\n97\n00:05:42.680 --> 00:05:45.360\nkind of off the beaten\npath a little bit more.\n\n98\n00:05:45.360 --> 00:05:49.771\nIn which, we instead can actually\ndo something like a join, but\n\n99\n00:05:49.771 --> 00:05:52.314\nbetween select statements, okay.\n\n100\n00:05:52.314 --> 00:05:55.517\nSo, in other words,\nwhen I actually run a subquery,\n\n101\n00:05:55.517 --> 00:06:00.362\nI can actually create a join between those\ntwo, instead of actually having to put\n\n102\n00:06:00.362 --> 00:06:05.515\nthings like inside a derived table, where\nactually put it inside of the from clause.\n\n103\n00:06:05.515 --> 00:06:09.142\nOr when I actually do\na regular scalar subquery or\n\n104\n00:06:09.142 --> 00:06:14.500\nactually create the select statement\ninside of the where clause.\n\n105\n00:06:14.500 --> 00:06:17.590\nWhen we actually do an actual\nreal APPLY statement,\n\n106\n00:06:17.590 --> 00:06:20.940\nwe can actually create\ntwo separate queries.\n\n107\n00:06:20.940 --> 00:06:23.120\nOne does actually report\ninformation back to the other and\n\n108\n00:06:23.120 --> 00:06:26.810\nalso it reports information back\nto the original table as well.\n\n109\n00:06:26.810 --> 00:06:30.480\nBut they really do stand\nindependently by themselves, okay.\n\n110\n00:06:30.480 --> 00:06:34.623\nNow you're saying, all right Ronnie,\nthat sound great, why?\n\n111\n00:06:34.623 --> 00:06:38.160\n>> [LAUGH]\n>> Why in the world would I do that?\n\n112\n00:06:38.160 --> 00:06:42.400\nAnd it comes down to a matter of\nefficiency is what it comes down to for\n\n113\n00:06:42.400 --> 00:06:43.570\ndatabases.\n\n114\n00:06:43.570 --> 00:06:47.610\nAnd that's kind of a key thing, and\nDaniel, we had talked about this before.\n\n115\n00:06:47.610 --> 00:06:52.320\nRight now when I'm actually running this,\nokay, my database isn't being hit\n\n116\n00:06:52.320 --> 00:06:57.040\nby a web application o 10 or\n12 other things that are going on.\n\n117\n00:06:57.040 --> 00:07:01.110\nBut in real life land, a database is hit.\n\n118\n00:07:01.110 --> 00:07:02.372\nWhat do you think, lots?\n\n119\n00:07:02.372 --> 00:07:04.021\n>> Lots is not the term.\n\n120\n00:07:04.021 --> 00:07:07.660\n>> [LAUGH]\n>> Lots and lots and lots and lots.\n\n121\n00:07:07.660 --> 00:07:11.780\nOur database input output, the demand for\n\n122\n00:07:11.780 --> 00:07:15.446\nthe drive is extremely high, right.\n\n123\n00:07:15.446 --> 00:07:20.100\nThis is why we look for\nsuper fast disks, we separate it out so\n\n124\n00:07:20.100 --> 00:07:23.767\nthat only database traffic\nis going into this.\n\n125\n00:07:23.767 --> 00:07:28.087\nThere's a lot that we take into account\nto try to make sure that our databases\n\n126\n00:07:28.087 --> 00:07:30.463\nare running as efficiently as possible.\n\n127\n00:07:30.463 --> 00:07:34.923\nBecause of the amount of requests\nthat are going toward them.\n\n128\n00:07:34.923 --> 00:07:37.590\nSo Ronnie I think I see where\nyou're going with this.\n\n129\n00:07:37.590 --> 00:07:42.220\nWe're trying to create queries,\nthat run a little more efficiency.\n\n130\n00:07:42.220 --> 00:07:45.500\nWe always wanna make sure that everything\nwe do, when in regards to our database,\n\n131\n00:07:45.500 --> 00:07:46.810\nis as efficient as possible.\n\n132\n00:07:46.810 --> 00:07:50.980\nAnd you think, well it only runs a little\nbit more efficient if I do it this way.\n\n133\n00:07:50.980 --> 00:07:52.270\nAnd yeah, you're right.\n\n134\n00:07:52.270 --> 00:07:56.450\nBut if you aggregate that,\nif all of a sudden you take one query and\n\n135\n00:07:56.450 --> 00:08:00.250\nyou multiply it by 1000,\nnow all that little bit adds up\n\n136\n00:08:00.250 --> 00:08:05.203\nto a lot less traffic Cuz if it was there,\nyou would definitely see a bog down.\n\n137\n00:08:05.203 --> 00:08:09.228\n>> And that's where we really\nwanna focus in on the reason for\n\n138\n00:08:09.228 --> 00:08:14.380\ndoing something like what we call\nthe apply type of query, as well.\n\n139\n00:08:14.380 --> 00:08:16.530\nSo let's go in and\nshow you kind of the basics here, and\n\n140\n00:08:16.530 --> 00:08:18.850\nthen lead up to what's going to happen.\n\n141\n00:08:18.850 --> 00:08:22.950\nI hope, at least, in my mind,\nthat it actually did work out,\n\n142\n00:08:22.950 --> 00:08:24.950\nof course people will understand\nit the exact same way I will,\n\n143\n00:08:24.950 --> 00:08:28.190\nI can't really guarantee that but\nat least we'll show you.\n\n144\n00:08:28.190 --> 00:08:31.440\nSo let's take for\nexample a simple correlated query.\n\n145\n00:08:31.440 --> 00:08:33.730\nNow remember that in this\ncorrelated query here,\n\n146\n00:08:33.730 --> 00:08:37.030\nI have this outer select, oop, well,\nthat's gonna actually be great.\n\n147\n00:08:37.030 --> 00:08:41.160\nThis outer select statement right\nhere along with the from as well,\n\n148\n00:08:41.160 --> 00:08:44.260\nand so I have that ability to run that.\n\n149\n00:08:44.260 --> 00:08:45.930\nBut then we were doing subqueries right?\n\n150\n00:08:45.930 --> 00:08:49.260\nWe also have this,\ninner select statement too.\n\n151\n00:08:49.260 --> 00:08:50.110\nNow, if I try and\n\n152\n00:08:50.110 --> 00:08:53.930\nrun that, when we did a scalar sub query,\nit ran perfectly fine, right?\n\n153\n00:08:53.930 --> 00:08:57.810\nBut now notice it says look,\nI can't find the information for this and\n\n154\n00:08:57.810 --> 00:09:00.370\nthe reason why I can't is that\nit's referring to these tables and\n\n155\n00:09:00.370 --> 00:09:04.910\nit has no real reference for,\nlet's say this SOH here,\n\n156\n00:09:04.910 --> 00:09:09.090\nthe sales order header table,\nbecause I actually only ran that query.\n\n157\n00:09:09.090 --> 00:09:11.700\nI didn't define it in a join or any place.\n\n158\n00:09:11.700 --> 00:09:13.330\nSo where does it have to\nretrieve that information?\n\n159\n00:09:13.330 --> 00:09:16.210\nIt has to go to the outer table\nto retrieve that information.\n\n160\n00:09:16.210 --> 00:09:20.930\nSo before this particular query can run,\nwell, it actually has to say,\n\n161\n00:09:20.930 --> 00:09:24.270\nhey, I need information from\nthis outer query right here,\n\n162\n00:09:24.270 --> 00:09:27.050\nwhich is actually\nthe information right here.\n\n163\n00:09:27.050 --> 00:09:30.590\nSo that I can actually generate and\nrun this and\n\n164\n00:09:30.590 --> 00:09:35.440\nif I run this it means I can actually\nreturn to you the max unit price, okay?\n\n165\n00:09:35.440 --> 00:09:38.060\nSo notice that that's where we\n\n166\n00:09:38.060 --> 00:09:40.946\nkind of had taken a look at\nour correlated query right?\n\n167\n00:09:40.946 --> 00:09:45.380\nThe inside has to actually called upon the\nouter query to return a bit of information\n\n168\n00:09:45.380 --> 00:09:49.150\nbefore it can actually run the\ninformation, the entire select statement.\n\n169\n00:09:49.150 --> 00:09:52.750\nTo return the value that the outer\nquery is actually asking for.\n\n170\n00:09:52.750 --> 00:09:56.761\nSo it is like I described in the other\nepisode, it is enigma wrapped\n\n171\n00:09:56.761 --> 00:10:00.716\nin a conundrum wrapped in a subquery\nwrapped in a burrito, okay.\n\n172\n00:10:00.716 --> 00:10:01.932\n[LAUGH] So that's what we have.\n\n173\n00:10:01.932 --> 00:10:03.395\n>> A number five at Taco Bell.\n\n174\n00:10:03.395 --> 00:10:06.420\n[LAUGH]\n>> Yeah, and the results that might follow\n\n175\n00:10:06.420 --> 00:10:08.324\nafter that [CROSSTALK]\n>> That's right, so\n\n176\n00:10:08.324 --> 00:10:11.120\nsometimes you can have something\nlike that that comes on.\n\n177\n00:10:11.120 --> 00:10:12.600\nBut notice this, right?\n\n178\n00:10:12.600 --> 00:10:14.950\nWell just think about that one query,\nright?\n\n179\n00:10:14.950 --> 00:10:18.010\nJust in the dizzying\nlogic that I showed you.\n\n180\n00:10:18.010 --> 00:10:21.166\nAnd Daniel is like [SOUND]\njust in that logic.\n\n181\n00:10:21.166 --> 00:10:25.820\nWell imagine running that thing\nagainst a database server.\n\n182\n00:10:25.820 --> 00:10:29.250\nThat's what hit the way that\nDaniel was describing it, right?\n\n183\n00:10:29.250 --> 00:10:34.010\nThe very fact that it's 10,000 per hour\nof different queries that are going on or\n\n184\n00:10:34.010 --> 00:10:35.070\neven more.\n\n185\n00:10:35.070 --> 00:10:39.980\nWell, think about the generation that\nthis one thing could actually have and\n\n186\n00:10:39.980 --> 00:10:44.520\nthe amount of processing units\ncycles that has to go into just\n\n187\n00:10:44.520 --> 00:10:46.530\ndoing something like this, okay?\n\n188\n00:10:46.530 --> 00:10:50.731\nSo now you start to understand that\nif now 10 or 15 of us or 10 or\n\n189\n00:10:50.731 --> 00:10:55.159\n15 applicants or 100 applications\nare writing stuff like this,\n\n190\n00:10:55.159 --> 00:10:58.403\nwell it can become insanely\nhefty at the same time.\n\n191\n00:10:58.403 --> 00:11:00.895\nOkay, so doing something like this,\ncan it work?\n\n192\n00:11:00.895 --> 00:11:06.060\nYes, okay, and the results here\nif I run the entire thing, okay?\n\n193\n00:11:06.060 --> 00:11:09.020\nIt's gonna generate for me very quickly.\n\n194\n00:11:09.020 --> 00:11:10.280\nAnd the reason why, again,\n\n195\n00:11:10.280 --> 00:11:15.710\nis because there is nobody else\nhitting this particular SQL server.\n\n196\n00:11:15.710 --> 00:11:20.130\nSo I have more horsepower to kill for\nthis one query than I'll ever need.\n\n197\n00:11:20.130 --> 00:11:23.570\nBut most SQL servers that are really\nbusy in a production hour,\n\n198\n00:11:23.570 --> 00:11:24.710\nthey're not gonna have that.\n\n199\n00:11:24.710 --> 00:11:28.120\nThey're essentially going to\nbe right there on the edge and\n\n200\n00:11:28.120 --> 00:11:31.630\njust trying to deal with as much as\npossible, and it's up to us to actually\n\n201\n00:11:31.630 --> 00:11:35.300\nthink about the idea of efficiency\nsometimes, when we run these queries.\n\n202\n00:11:35.300 --> 00:11:40.270\nNow this query alone actually\ngenerated 31,465 rows.\n\n203\n00:11:40.270 --> 00:11:41.705\nI'm looking at the lower right hand.\n\n204\n00:11:41.705 --> 00:11:46.182\nLet's see if we can show that just briefly\nand that way we'll see that, okay.\n\n205\n00:11:46.182 --> 00:11:50.255\nSo 31,465 rows, so\nnot a bad return, and for\n\n206\n00:11:50.255 --> 00:11:56.220\nthis one it took less than a blink of\nan eye to return that, but you can see why\n\n207\n00:11:56.220 --> 00:12:03.150\na very heavily hit SQL server might take\na little bit of a longer time to do that.\n\n208\n00:12:03.150 --> 00:12:07.990\nNow when we also go ahead and I'm gonna\ntake a look at this derived table\n\n209\n00:12:07.990 --> 00:12:13.310\ninstance instead, notice that it does\nlook a little bit different here, okay.\n\n210\n00:12:13.310 --> 00:12:15.230\nSo let's verify, okay.\n\n211\n00:12:15.230 --> 00:12:20.538\nSo remember in this Correlated Query we\nessentially added that select statement\n\n212\n00:12:20.538 --> 00:12:25.700\nright here inside of the select statement\nof the outer query, as well, okay.\n\n213\n00:12:25.700 --> 00:12:29.483\nSo, a correlated query, we can identify\nin terms of something like that.\n\n214\n00:12:29.483 --> 00:12:35.870\nIn a derived table,\nit is a subquery, per say, okay.\n\n215\n00:12:35.870 --> 00:12:39.680\nBut this time, let's take a look at where\nthis particular select statement, or\n\n216\n00:12:39.680 --> 00:12:41.660\nthe interselect statement comes from.\n\n217\n00:12:41.660 --> 00:12:49.100\nNotice that it actually is inside of\nthe from statement at this point, okay.\n\n218\n00:12:49.100 --> 00:12:53.736\nSo when we take a look at that\nparticular query right there,\n\n219\n00:12:53.736 --> 00:12:58.465\nthis derive table is actually\ngenerating all of these fields\n\n220\n00:12:58.465 --> 00:13:02.544\nhere from the sales order header table,\nexcuse me,\n\n221\n00:13:02.544 --> 00:13:07.754\nalong with this query right here as well,\njoining them together.\n\n222\n00:13:07.754 --> 00:13:12.750\nAnd what it should give me is the exact\nsame results that what we had before.\n\n223\n00:13:12.750 --> 00:13:15.310\nNow, somebody might actually\nbe taking a look at this and\n\n224\n00:13:15.310 --> 00:13:20.512\ngo, Ronnie you've changed the way that you\nactually did this third line here, okay.\n\n225\n00:13:20.512 --> 00:13:23.380\nSo is there a reason why you did that?\n\n226\n00:13:23.380 --> 00:13:25.010\nCuz all the other ones, look at this,\n\n227\n00:13:25.010 --> 00:13:29.320\nwhere I have it all kind of smushed\ntogether, truncated together very nicely.\n\n228\n00:13:29.320 --> 00:13:32.885\nAnd you might be going, Ronnie,\nyou just copied this from someplace and\n\n229\n00:13:32.885 --> 00:13:34.990\nthat's why you didn't pay attention.\n\n230\n00:13:34.990 --> 00:13:38.700\nNo, it's actually the database\nfield name itself.\n\n231\n00:13:38.700 --> 00:13:39.947\nIn other words, just a column name.\n\n232\n00:13:39.947 --> 00:13:41.860\nIf it wasn't the column name, and\n\n233\n00:13:41.860 --> 00:13:45.130\nif I hover over it you can see where\nit actually tells you that, okay?\n\n234\n00:13:45.130 --> 00:13:49.661\nSo inside that little tool tip\nright there it tells you, hey,\n\n235\n00:13:49.661 --> 00:13:53.970\nthis is the column and\nit's actually max_unit_price.\n\n236\n00:13:53.970 --> 00:13:56.480\nSo it's not even a generated column.\n\n237\n00:13:56.480 --> 00:13:59.690\nIt's not something that I actually\nhad to do any type of aggregation on.\n\n238\n00:13:59.690 --> 00:14:01.260\nThis is the name of the column.\n\n239\n00:14:01.260 --> 00:14:04.580\nAnd if I were to change it to try and\nmatch up, it wouldn't work anymore.\n\n240\n00:14:04.580 --> 00:14:06.300\nSo, believe it or not,\n\n241\n00:14:06.300 --> 00:14:09.770\nthis is actually the name of that column,\nbecause I started thinking about that.\n\n242\n00:14:09.770 --> 00:14:13.090\nPeople are gonna think that I just\ncopied and pasted this, you didn't care.\n\n243\n00:14:13.090 --> 00:14:13.660\nI didn't.\n\n244\n00:14:13.660 --> 00:14:16.360\nI actually did write this\nstatement out myself.\n\n245\n00:14:16.360 --> 00:14:21.530\nBut I had to do the real thing, and\nit just didn't match up to the other ones.\n\n246\n00:14:21.530 --> 00:14:25.260\nLittle bit strange, but it actually even\nshows you a little bit about databases.\n\n247\n00:14:25.260 --> 00:14:28.580\nSometimes you'll get different people\nthat are actually adding in data, and\n\n248\n00:14:28.580 --> 00:14:30.470\nthey do name things differently, okay?\n\n249\n00:14:30.470 --> 00:14:32.960\nAnd so even though you might\nhave had a convention in place,\n\n250\n00:14:32.960 --> 00:14:35.800\nit may actually show up a little\nbit differently here, okay?\n\n251\n00:14:35.800 --> 00:14:40.120\nNow, in this derived table, right,\nwe actually have the same issue here.\n\n252\n00:14:40.120 --> 00:14:45.677\nBut the only thing that this particular\ninner statement is doing if you remember,\n\n253\n00:14:45.677 --> 00:14:49.060\nright, is gonna be returning\nthe information for\n\n254\n00:14:49.060 --> 00:14:52.459\nthe max unit price out\nhere on the outside, okay?\n\n255\n00:14:52.459 --> 00:14:55.780\nAnd it's only really done that one time,\nokay?\n\n256\n00:14:55.780 --> 00:15:01.340\nSo every time that we actually run this\none, okay, it is actually regenerating\n\n257\n00:15:01.340 --> 00:15:06.700\nthe entirety of everything that happens\nand goes on, and it's still the same.\n\n258\n00:15:06.700 --> 00:15:08.440\nAnd it's actually identical here.\n\n259\n00:15:08.440 --> 00:15:10.570\nI still have the same number of rows.\n\n260\n00:15:10.570 --> 00:15:12.440\nIt's the exact same information, but\n\n261\n00:15:12.440 --> 00:15:17.300\nit's actually derived from this derived\ntable instead, and only generating that.\n\n262\n00:15:17.300 --> 00:15:18.840\nEvery time that this runs,\n\n263\n00:15:18.840 --> 00:15:23.650\nthough, okay, remember that\nthe derived table is stored in RAM.\n\n264\n00:15:23.650 --> 00:15:25.110\nSo every time I run this,\n\n265\n00:15:25.110 --> 00:15:29.460\nI have to take up RAM to actually be\nable to do what we need to do here.\n\n266\n00:15:29.460 --> 00:15:32.180\nSo it does take up system resources.\n\n267\n00:15:32.180 --> 00:15:33.210\nThey can run.\n\n268\n00:15:33.210 --> 00:15:36.100\nBut normally, as soon as you're\nactually done with thing and\n\n269\n00:15:36.100 --> 00:15:39.580\nyou have the result that you want to,\nyou either save the result or you go and\n\n270\n00:15:39.580 --> 00:15:40.950\ncreate a report based off of it.\n\n271\n00:15:40.950 --> 00:15:45.800\nBut we don't tend to keep\nit inside of the database.\n\n272\n00:15:45.800 --> 00:15:48.060\nSo we don't need storage space for it.\n\n273\n00:15:48.060 --> 00:15:51.904\nBut remember that when you have a lot\nof different things that are actually\n\n274\n00:15:51.904 --> 00:15:53.888\ngoing on and you're adding in more and\n\n275\n00:15:53.888 --> 00:15:57.060\nmore impact to RAM,\nthat's what could also happen, okay.\n\n276\n00:15:57.060 --> 00:16:01.738\nNow let's take a look at this\nCROSS APPLY Example instead.\n\n277\n00:16:01.738 --> 00:16:07.070\nNotice that this one,\nokay We have our complete select and from.\n\n278\n00:16:08.950 --> 00:16:09.530\nOops.\n\n279\n00:16:09.530 --> 00:16:10.140\nRight here.\n\n280\n00:16:11.340 --> 00:16:13.870\nSo this one, if I execute it,\nthere's something,\n\n281\n00:16:13.870 --> 00:16:16.200\nit's cuz I'm actually calling\non something else in here.\n\n282\n00:16:16.200 --> 00:16:20.290\nBut on this one, there's actually\na full select statement right here.\n\n283\n00:16:20.290 --> 00:16:25.770\nAnd there's also of course\na select statement right here.\n\n284\n00:16:25.770 --> 00:16:30.270\nAnd what it actually looks like, and\nvery similar is the actual wording to it,\n\n285\n00:16:30.270 --> 00:16:33.300\nit's like the idea of\nrunning an inner joint, okay?\n\n286\n00:16:33.300 --> 00:16:39.590\nSo notice that what we have here is almost\nexactly that, and then, at the end here,\n\n287\n00:16:39.590 --> 00:16:44.850\nwe have where, we wanna make\nsure that SalesOrderHeader ID\n\n288\n00:16:44.850 --> 00:16:50.180\nis equal to\nthe SalesOrderDetail SalesOrderID as well.\n\n289\n00:16:50.180 --> 00:16:54.328\nSo that way we're essentially joining\nthese two select statements together.\n\n290\n00:16:54.328 --> 00:16:55.140\nIn the innerjoin,\n\n291\n00:16:55.140 --> 00:16:59.840\nwe don't join select statements together,\nwe join tables together to do the query.\n\n292\n00:16:59.840 --> 00:17:02.780\nWhat we're saying is create this.\n\n293\n00:17:02.780 --> 00:17:05.360\nCreate the results of this one query.\n\n294\n00:17:05.360 --> 00:17:05.950\nOkay?\n\n295\n00:17:05.950 --> 00:17:10.100\nCreate the results of these two queries,\nof this query as well.\n\n296\n00:17:10.100 --> 00:17:14.700\nMake sure that they match on\nright here on that one and\n\n297\n00:17:14.700 --> 00:17:17.260\nreport that information to me as well.\n\n298\n00:17:17.260 --> 00:17:18.028\nOkay.\n\n299\n00:17:18.028 --> 00:17:24.970\nSo when I run this And I execute it.\n\n300\n00:17:24.970 --> 00:17:26.570\nIt's the same exact information.\n\n301\n00:17:26.570 --> 00:17:31.620\nI still get the same number of data,\nsame rows of data, same thing that I have.\n\n302\n00:17:31.620 --> 00:17:35.040\nBut what is the big difference,\nokay, when we start doing.\n\n303\n00:17:35.040 --> 00:17:37.760\nIt is the efficiency in the way\nthat this thing can run.\n\n304\n00:17:38.920 --> 00:17:41.950\nRemember that now I'm running two\nselect statements, just like I did for\n\n305\n00:17:41.950 --> 00:17:45.030\neverything else, and that means it's\ngenerating compute cycles, right?\n\n306\n00:17:45.030 --> 00:17:47.680\nIt has to generate that,\nsame thing we did for that.\n\n307\n00:17:47.680 --> 00:17:50.380\nBut the neat thing about\nthis one that's actually\n\n308\n00:17:50.380 --> 00:17:55.250\nneat is right here is into this line\nthat I have commented out right here.\n\n309\n00:17:55.250 --> 00:17:58.990\nIf I want to change the query at all,\nokay and I'm in.\n\n310\n00:17:58.990 --> 00:18:04.510\nWhen I want to change it all,\nall I have to do here Is simply remove\n\n311\n00:18:04.510 --> 00:18:10.270\nthat comment and when I run this again,\nthis should change just a little bit here.\n\n312\n00:18:13.790 --> 00:18:15.870\nMake sure I hit F5.\n\n313\n00:18:15.870 --> 00:18:20.680\nWhen I run this one again,\nit changed it just a little bit.\n\n314\n00:18:20.680 --> 00:18:22.770\nNot enough that you or\nI are gonna be able to tell much.\n\n315\n00:18:22.770 --> 00:18:24.670\nIt's still the same number of rows.\n\n316\n00:18:24.670 --> 00:18:26.950\nBut here, it just said select it and\n\n317\n00:18:26.950 --> 00:18:31.390\nadd in a LineTotal here in\nthe background to actually run.\n\n318\n00:18:31.390 --> 00:18:35.500\nBut I didn't actually have it listed up\nhere at the top, so I could go ahead and\n\n319\n00:18:35.500 --> 00:18:39.350\nlist another example up\nhere to tell it to report.\n\n320\n00:18:39.350 --> 00:18:40.840\nNow, what's the difference?\n\n321\n00:18:40.840 --> 00:18:48.150\nWell, in everything else that we actually\nsaw, inside of the Correlated query here.\n\n322\n00:18:48.150 --> 00:18:52.210\nI can do the same thing where I\nadd in another line here, okay.\n\n323\n00:18:52.210 --> 00:18:53.920\nBut why does that matter?\n\n324\n00:18:53.920 --> 00:18:56.260\nWell remember what\nthe correlated query has to do.\n\n325\n00:18:56.260 --> 00:18:59.680\nIt essentially has to run both\nqueries again, and again, and again.\n\n326\n00:18:59.680 --> 00:19:02.430\nIf I change one, has to run both queries.\n\n327\n00:19:02.430 --> 00:19:07.040\nIf I do the same thing in the derive\ntable, it again actually tries to run both\n\n328\n00:19:07.040 --> 00:19:10.900\nqueries to do the same job you\nnow only edit in one line.\n\n329\n00:19:10.900 --> 00:19:18.015\nIn the CROSS APPLY though, this outer\nquery does not have to be run again okay.\n\n330\n00:19:18.015 --> 00:19:24.418\nThe inner query will run without having\nactually run it on the outer query again.\n\n331\n00:19:24.418 --> 00:19:28.781\nSo, I'm essentially cutting\nthe workload in half\n\n332\n00:19:28.781 --> 00:19:32.330\nif I modify one of these queries out.\n\n333\n00:19:32.330 --> 00:19:34.630\nCuz it doesn't have to\nrun both queries again.\n\n334\n00:19:34.630 --> 00:19:39.900\nIt just runs the one that is actually in\nand that's all due to that cross apply.\n\n335\n00:19:39.900 --> 00:19:42.210\nSo it's just says, hey,\nyou added a little bit more information,\n\n336\n00:19:42.210 --> 00:19:44.266\nfine, I just need to run\none of those queries.\n\n337\n00:19:44.266 --> 00:19:47.442\nThe other one's still actually active and\navailable and I'm just gonna say,\n\n338\n00:19:47.442 --> 00:19:51.770\nwherever that she makes an equal sign and\nwe'll actually report those out, so\n\n339\n00:19:51.770 --> 00:19:56.010\nyou can see why this generates\nless in terms of compute cycles.\n\n340\n00:19:56.010 --> 00:19:59.638\nNow, in real life timing, for me,\nit's a blink of an eye, for Daniel,\n\n341\n00:19:59.638 --> 00:20:00.828\nit's a blink of an eye,\n\n342\n00:20:00.828 --> 00:20:04.778\nI don't know if I could tell half a blink\nof an eye versus a whole blink of an eye.\n\n343\n00:20:04.778 --> 00:20:05.502\n>> [LAUGH]\n>> But,\n\n344\n00:20:05.502 --> 00:20:07.575\nthat's what we're talking\nabout in terms of timing.\n\n345\n00:20:07.575 --> 00:20:09.850\nAnd it might be even faster than that.\n\n346\n00:20:09.850 --> 00:20:12.710\nBut overall though, in reality,\nthe way that I'm doing it,\n\n347\n00:20:12.710 --> 00:20:16.720\nbeing a single query here, it probably\ndoesn't impact very much at all.\n\n348\n00:20:16.720 --> 00:20:18.160\nDoesn't change very much.\n\n349\n00:20:18.160 --> 00:20:19.770\nBut in a very busy environment,\n\n350\n00:20:19.770 --> 00:20:23.730\nit would change a lot because we can\nactually do something like this.\n\n351\n00:20:23.730 --> 00:20:27.020\nSo the idea of being able to\ndo the cross apply helps.\n\n352\n00:20:27.020 --> 00:20:29.800\nNow in the same manner though,\nwith this cross apply,\n\n353\n00:20:29.800 --> 00:20:33.130\nthere's a couple things we can change and\nI wanna make sure I\n\n354\n00:20:33.130 --> 00:20:38.057\nactually tell you the whole\nthing before I [LAUGH] move on.\n\n355\n00:20:38.057 --> 00:20:39.727\nWe can also change this up a little bit.\n\n356\n00:20:39.727 --> 00:20:42.327\nSo this is equivalent to an inner\njoin between two tables but\n\n357\n00:20:42.327 --> 00:20:45.770\nessentially an inner join\nbetween two select statements.\n\n358\n00:20:45.770 --> 00:20:50.980\nI can also do what is\ncalled an outer apply.\n\n359\n00:20:50.980 --> 00:20:55.380\nNow if I do the outer apply and\nI run this,\n\n360\n00:20:55.380 --> 00:21:00.100\nnow all of my data is gonna\nchange as well, okay.\n\n361\n00:21:00.100 --> 00:21:01.040\nSo in this one,\n\n362\n00:21:01.040 --> 00:21:06.110\nthis is equivalent to what they considered\nas a left join on a derived table.\n\n363\n00:21:06.110 --> 00:21:09.990\nSo this essentially changes it to\nwhere this becomes a derived table.\n\n364\n00:21:09.990 --> 00:21:13.230\nAnd now, we're actually just\ndoing a left join right here.\n\n365\n00:21:13.230 --> 00:21:18.040\nSo if you actually just change that\ncross until the word, apply or outer,\n\n366\n00:21:18.040 --> 00:21:22.160\nyou actually end up getting that as being\nthe experience that you actually want.\n\n367\n00:21:22.160 --> 00:21:24.091\nSo that way, you will actually\nbe able to run the entire query.\n\n368\n00:21:24.091 --> 00:21:25.896\nBut remember, once you do that,\n\n369\n00:21:25.896 --> 00:21:30.500\nyou're still only running the changes\nbased on the second query right here.\n\n370\n00:21:30.500 --> 00:21:36.080\nBut yes, you can change this to outer and\nto the idea here of the regular cross.\n\n371\n00:21:36.080 --> 00:21:38.790\nSo, even though you might\nhear the term just apply,\n\n372\n00:21:40.320 --> 00:21:43.610\nitself as far as the apply function or\nthe apply operator,\n\n373\n00:21:43.610 --> 00:21:46.080\njust remember that there's actually\ntwo different variations of it.\n\n374\n00:21:46.080 --> 00:21:49.820\nThe majority of the time, we're gonna be\ndoing the idea here of the cross apply\n\n375\n00:21:49.820 --> 00:21:52.380\nrather than the idea of the left apply and\n\n376\n00:21:52.380 --> 00:21:56.905\nthat's still the same thing that's true\ninside of joins the majority of the time,\n\n377\n00:21:56.905 --> 00:22:00.250\nwe're normally looking for\nthat intersecting match of data.\n\n378\n00:22:00.250 --> 00:22:04.290\nSo the apply statements really\nhelp us out in this sense.\n\n379\n00:22:04.290 --> 00:22:06.060\nSo it's all about the efficiency.\n\n380\n00:22:06.060 --> 00:22:08.510\n>> We like being efficient like we said,\n\n381\n00:22:08.510 --> 00:22:11.738\nour databases tend to be\nhammered with requests.\n\n382\n00:22:11.738 --> 00:22:13.691\nSo anytime that you can be more efficient,\n\n383\n00:22:13.691 --> 00:22:15.813\nthat is something that\nyou want to implement.\n\n384\n00:22:15.813 --> 00:22:17.580\nSo, learn both ways.\n\n385\n00:22:17.580 --> 00:22:21.040\nObviously you don't wanna be\nwithout one or the other.\n\n386\n00:22:21.040 --> 00:22:24.260\nBut when you can use one over the other,\nthat is going to be more efficient.\n\n387\n00:22:24.260 --> 00:22:25.860\nThat's the one you're gonna wanna pick.\n\n388\n00:22:25.860 --> 00:22:28.810\nRonnie, I know we got a little more\nto go when it comes to sub queries.\n\n389\n00:22:28.810 --> 00:22:30.320\nA neat little thing.\n\n390\n00:22:30.320 --> 00:22:31.790\nWhat's this, CTE?\n\n391\n00:22:31.790 --> 00:22:33.550\n>> It is CTE, very good.\n\n392\n00:22:33.550 --> 00:22:35.570\nYeah, it's called common table expression.\n\n393\n00:22:35.570 --> 00:22:37.790\nThat's what we're actually\ntaking a look at as well.\n\n394\n00:22:37.790 --> 00:22:39.550\nNow in terms of the common\ntable expression,\n\n395\n00:22:39.550 --> 00:22:42.520\nthis is a direct comparison\nto a derived table.\n\n396\n00:22:42.520 --> 00:22:44.920\nBut remember that a derived table for us.\n\n397\n00:22:44.920 --> 00:22:46.560\nGo back and check that episode out.\n\n398\n00:22:46.560 --> 00:22:51.780\nBut it really is only designed to deliver\ndata inside of that outer select query.\n\n399\n00:22:51.780 --> 00:22:55.530\nSo it's not designed for you to actually\nuse it for much of anything else but\n\n400\n00:22:55.530 --> 00:22:57.720\nit's designed so\nthat it actually takes that value and\n\n401\n00:22:57.720 --> 00:23:01.872\nthat information, returns it to the outer\nquery, and then you're done with that.\n\n402\n00:23:01.872 --> 00:23:05.568\nSo if you're only running\na single query at that point,\n\n403\n00:23:05.568 --> 00:23:07.781\nderived tables are the way to go.\n\n404\n00:23:07.781 --> 00:23:12.559\nBut what if you actually wanted to ensure\nthat you could actually run a query that\n\n405\n00:23:12.559 --> 00:23:16.010\nwould actually iterate through your data,\nokay?\n\n406\n00:23:16.010 --> 00:23:17.020\nNow what do I mean by that?\n\n407\n00:23:17.020 --> 00:23:21.560\nI mean, in other words, values that you\nthink are changing row by row here.\n\n408\n00:23:21.560 --> 00:23:25.184\nWell, what you wanna create instead\nis actually what we call a CTE,\n\n409\n00:23:25.184 --> 00:23:28.251\na common table expression to\nactually be able to do that.\n\n410\n00:23:28.251 --> 00:23:33.056\nNow, the problem that you are going to\nhave especially if you have no experience\n\n411\n00:23:33.056 --> 00:23:38.060\nin this is that, not understanding\nthe data is not really going to help you.\n\n412\n00:23:38.060 --> 00:23:40.892\nAnd this is one of those things\nthat really, like I said,\n\n413\n00:23:40.892 --> 00:23:42.194\nI want to show an example.\n\n414\n00:23:42.194 --> 00:23:44.876\nBut, the key here is actually\nbeing able to identify.\n\n415\n00:23:44.876 --> 00:23:48.231\nAnd that's what we are really focusing\nin on, is the identification and\n\n416\n00:23:48.231 --> 00:23:50.490\nof course of why you would\nactually choose that.\n\n417\n00:23:50.490 --> 00:23:54.449\nSo if you're actually iterating through\nyour data with a query, then that's what\n\n418\n00:23:54.449 --> 00:23:58.314\nyou're actually trying to do is try to\nshow those iterations is the other thing.\n\n419\n00:23:58.314 --> 00:24:00.450\nSo, that is a key difference.\n\n420\n00:24:00.450 --> 00:24:03.685\nCompared to derived query This one you\ncan actually run over and over again.\n\n421\n00:24:03.685 --> 00:24:07.611\nIt's designed for that idea of iteration,\nwhereas drive, designed for\n\n422\n00:24:07.611 --> 00:24:10.850\na one time run,\nis what we're normally doing here, okay?\n\n423\n00:24:10.850 --> 00:24:16.830\nSo, let's take a look at my screen as\nwe continue to move forward here, okay?\n\n424\n00:24:16.830 --> 00:24:21.630\nSo first thing, I'm gonna do is make sure\nI'm connected to the right database and\n\n425\n00:24:21.630 --> 00:24:23.740\nthen we'll take a look.\n\n426\n00:24:23.740 --> 00:24:27.310\nAll right, when it comes down to it, this\nis kinda one of the strange things, okay.\n\n427\n00:24:27.310 --> 00:24:34.530\nIs that even though its called CTE, you\nnormally define it at the very beginning,\n\n428\n00:24:34.530 --> 00:24:37.910\nand that's what you have to do, you have\nto define what we call the CTE expression.\n\n429\n00:24:37.910 --> 00:24:40.500\nAnd then you can also have a column list.\n\n430\n00:24:40.500 --> 00:24:44.360\nSo I have a column list, and\nthis particular column list,\n\n431\n00:24:44.360 --> 00:24:47.730\npeople have left it off, and\nit's worked perfectly fine.\n\n432\n00:24:47.730 --> 00:24:49.790\nI recommend that you\nactually create it yourself.\n\n433\n00:24:49.790 --> 00:24:54.240\nSo remember, you're trying to create,\nessentially, a drive table, but\n\n434\n00:24:54.240 --> 00:24:57.330\nwithout it actually being called\na drive table, so here it is.\n\n435\n00:24:57.330 --> 00:25:02.740\nI'm actually going to name my\ncommon table expression and\n\n436\n00:25:02.740 --> 00:25:06.110\nyou have to start off with the word with.\n\n437\n00:25:06.110 --> 00:25:10.817\nWith, you give it a name, and\nthen you also essential create a column\n\n438\n00:25:10.817 --> 00:25:15.380\nlist of the columns that you actually\nare gonna have in this table.\n\n439\n00:25:15.380 --> 00:25:16.100\nOkay?\n\n440\n00:25:16.100 --> 00:25:20.200\nNow, how do you actually get\nthose columns in that new table.\n\n441\n00:25:20.200 --> 00:25:24.700\nWell, you now define it by\nusing a select statement, okay?\n\n442\n00:25:24.700 --> 00:25:28.060\nSo we're actually going to\ndefine that CTE query, and\n\n443\n00:25:28.060 --> 00:25:33.450\nyou can take a look right here what\nit's actually being defined as, okay?\n\n444\n00:25:33.450 --> 00:25:35.720\nSo we're gonna take a look\nat the SalesPersonID,\n\n445\n00:25:35.720 --> 00:25:38.690\ntheir OrderID, and the YEAR, okay?\n\n446\n00:25:38.690 --> 00:25:40.190\nAnd we're gonna actually say, so\n\n447\n00:25:40.190 --> 00:25:43.760\nessentially we're taking a look\nat the sales by each year.\n\n448\n00:25:43.760 --> 00:25:48.740\nAs long as there's actually a sales ID.\n\n449\n00:25:48.740 --> 00:25:51.640\nSo, we don't want there to actually\nbe sales that don't have a sales\n\n450\n00:25:51.640 --> 00:25:53.210\nID attached to it.\n\n451\n00:25:53.210 --> 00:25:53.710\nOkay?\n\n452\n00:25:54.840 --> 00:25:57.600\nThen, we have to define the outer query.\n\n453\n00:25:57.600 --> 00:25:59.140\nNow, notice,\nbecause we're talking about inner and\n\n454\n00:25:59.140 --> 00:26:03.280\nouter query, It is a sub-form\nof a sub-query here, okay.\n\n455\n00:26:03.280 --> 00:26:06.970\nSo at this point we also\ndefine the outer query.\n\n456\n00:26:06.970 --> 00:26:09.720\nAnd notice that that one's listed third.\n\n457\n00:26:09.720 --> 00:26:12.550\nSo we're actually going\nto say SalesPersonID.\n\n458\n00:26:12.550 --> 00:26:17.650\nCount up all the sales order IDs\nas total sales and the sales year.\n\n459\n00:26:17.650 --> 00:26:21.960\nBut now this is where we call upon\nthat little table that we just created\n\n460\n00:26:21.960 --> 00:26:23.130\nright here.\n\n461\n00:26:23.130 --> 00:26:24.510\nSo now we defined it.\n\n462\n00:26:24.510 --> 00:26:27.040\nWe gave it a name and we defined it, and\n\n463\n00:26:27.040 --> 00:26:31.440\nthen in the outer query we use\nit in the from clause here.\n\n464\n00:26:31.440 --> 00:26:32.400\nSo we're actually telling it,\n\n465\n00:26:32.400 --> 00:26:35.490\ndon't going through the database\nto find the information.\n\n466\n00:26:35.490 --> 00:26:38.937\nGo into my common table\nexpression to find that.\n\n467\n00:26:38.937 --> 00:26:41.510\nNow the underscore CTE,\ndo you have to do that?\n\n468\n00:26:41.510 --> 00:26:42.030\nNo.\n\n469\n00:26:42.030 --> 00:26:43.770\nYou can name it whatever you want to.\n\n470\n00:26:43.770 --> 00:26:47.880\nIt just makes it easy to identify when\nyou do actually create something like\n\n471\n00:26:47.880 --> 00:26:49.530\na CTE for yourself.\n\n472\n00:26:49.530 --> 00:26:54.000\nThen you can do the standard regular\ngroups bys and order bys as well.\n\n473\n00:26:54.000 --> 00:26:58.590\nBecause I have an aggregate up\nhere in the select statement,\n\n474\n00:26:58.590 --> 00:27:02.690\nit means I also have to aggregate\ntogether the salesperson ID\n\n475\n00:27:02.690 --> 00:27:08.120\nas well as the SalesYear and that's why\nboth of those are also in the group by.\n\n476\n00:27:08.120 --> 00:27:11.880\nAnd if I'm actually to group\nby that I'm also going to say\n\n477\n00:27:11.880 --> 00:27:16.850\nhey also give me an order by as far\nthe sorting order do the SalesPersonID and\n\n478\n00:27:16.850 --> 00:27:19.060\nthen the SalesYear second.\n\n479\n00:27:19.060 --> 00:27:19.850\nNow if I try and\n\n480\n00:27:19.850 --> 00:27:23.180\nrun each one of those statements\nseparately it's not going to run.\n\n481\n00:27:23.180 --> 00:27:27.397\nSo here I can simply execute the whole,\nI'm lying to you.\n\n482\n00:27:27.397 --> 00:27:28.562\n>> Don't lie to us-\n>> I am,\n\n483\n00:27:28.562 --> 00:27:29.997\nI selected-\n>> Don't break the-\n\n484\n00:27:29.997 --> 00:27:30.612\n>> That's what happened.\n\n485\n00:27:30.612 --> 00:27:32.238\n>> Trust relationship we have-\n>> There we go.\n\n486\n00:27:32.238 --> 00:27:33.120\n>> With your falsehoods.\n\n487\n00:27:33.120 --> 00:27:34.326\n>> It wasn't, I mean that's-\n>> [LAUGH]\n\n488\n00:27:34.326 --> 00:27:35.244\n>> Exactly what happened.\n\n489\n00:27:35.244 --> 00:27:38.925\nI apparently selected something\nwhile I was doing that and so\n\n490\n00:27:38.925 --> 00:27:40.738\nI selected a little bit here.\n\n491\n00:27:40.738 --> 00:27:44.439\nSo now you can see the results and\nthere's about 58 rows here.\n\n492\n00:27:45.900 --> 00:27:50.680\nAnd so it returns to me,\nthis particular tabular value.\n\n493\n00:27:50.680 --> 00:27:53.740\nAnd this is exactly what was in the CTE.\n\n494\n00:27:53.740 --> 00:27:59.720\nSo now I can see the sales person\n274 in 2011, he had 4 total sales,\n\n495\n00:27:59.720 --> 00:28:03.180\nbut in 2012, he had 22 and 2013,\n\n496\n00:28:03.180 --> 00:28:08.710\nhe had 14 and then 2014,\nhe had eight sales here.\n\n497\n00:28:08.710 --> 00:28:09.260\nOkay.\n\n498\n00:28:09.260 --> 00:28:14.030\nWhich if you add up all of those,\nhe did nothing compared to 275,\n\n499\n00:28:14.030 --> 00:28:17.360\nwho did 65 sales in 2011.\n\n500\n00:28:17.360 --> 00:28:21.496\nSo you can see where this\ncan be useful for you but\n\n501\n00:28:21.496 --> 00:28:27.609\nmost of the time we're probably not\ngonna get that far in all reality.\n\n502\n00:28:27.609 --> 00:28:29.072\nOn the exam, yes.\n\n503\n00:28:29.072 --> 00:28:32.450\nOkay, it's a possibility that you\nwould choose from all these tools.\n\n504\n00:28:32.450 --> 00:28:35.190\nIt's sort of like being\na chef in a kitchen, right?\n\n505\n00:28:35.190 --> 00:28:38.620\nAnd you got 16 different\nknives that you can use and\n\n506\n00:28:38.620 --> 00:28:42.580\nall of them are razor sharp because you\nhanded them to Daniel to sharpen but\n\n507\n00:28:42.580 --> 00:28:43.830\nwhat happens when you're a chef?\n\n508\n00:28:43.830 --> 00:28:45.020\nYou tend to stick with what?\n\n509\n00:28:45.020 --> 00:28:46.270\nYou tend to go for your favorite.\n\n510\n00:28:46.270 --> 00:28:47.550\n>> The one you like, yeah.\n\n511\n00:28:47.550 --> 00:28:50.090\nAnd in reality for\nsubqueries, it's what we do.\n\n512\n00:28:50.090 --> 00:28:52.740\nWe tend to go here's the one\nthat I feel comfortable with,\n\n513\n00:28:52.740 --> 00:28:56.620\nhere's the one that I stick with but on\nthe exam you do need to know about CT's.\n\n514\n00:28:56.620 --> 00:28:58.460\nYou do need to know about derived tables.\n\n515\n00:28:58.460 --> 00:29:00.470\nYou do need to know about\nthose correlated subqueries,\n\n516\n00:29:00.470 --> 00:29:04.045\nmulti valued scalar subqueries,\nPIVOTs and UNPIVOTs.\n\n517\n00:29:04.045 --> 00:29:07.933\n[INAUDIBLE] I was trying to\nthink of which one I forgot.\n\n518\n00:29:07.933 --> 00:29:11.000\n[INAUDIBLE] We have all\nof that available to us.\n\n519\n00:29:11.000 --> 00:29:14.100\nBut more than likely,\nlike I said, in real life land,\n\n520\n00:29:14.100 --> 00:29:18.680\nyou're gonna stick with your particular\nchef's knife that you love the most,\n\n521\n00:29:18.680 --> 00:29:20.575\nand you're gonna slice and dice that data.\n\n522\n00:29:20.575 --> 00:29:22.750\n>> [LAUGH]\n>> Well what Ronnie's trying to tell\n\n523\n00:29:22.750 --> 00:29:24.230\nyou is, don't pigeonhole yourself.\n\n524\n00:29:24.230 --> 00:29:25.500\nLearn all these things.\n\n525\n00:29:25.500 --> 00:29:29.140\nAnd obviously, you're gonna have\nyour favorites, your go-tos.\n\n526\n00:29:29.140 --> 00:29:32.500\nBut you need to be familiar with all\nthe others as well cuz, well hey,\n\n527\n00:29:32.500 --> 00:29:36.030\nyou want to pass an exam and\nyou never know when it'll be handy for\n\n528\n00:29:36.030 --> 00:29:37.790\nyou in the real world as well.\n\n529\n00:29:37.790 --> 00:29:40.380\nRonnie, is there anything else we\nneed to cover for this episode?\n\n530\n00:29:40.380 --> 00:29:43.420\n>> No more on subquerying,\nwhich is actually kind of great here,\n\n531\n00:29:43.420 --> 00:29:48.430\nbut we do have a lot more to cover in our\nseries as we continue on through here.\n\n532\n00:29:48.430 --> 00:29:51.290\nAnd as you can see, some neat things\nthat maybe most of us haven't actually\n\n533\n00:29:51.290 --> 00:29:54.490\nencountered before and of course\nthat means also a little bit more in\n\n534\n00:29:54.490 --> 00:29:57.590\ndepth things as well, but\nthey should all be helpful.\n\n535\n00:29:57.590 --> 00:30:01.820\nBut remember that for us in practicing the\nexam, yeah, you gotta know these, right?\n\n536\n00:30:01.820 --> 00:30:03.940\nSo there's no other way for me to say it.\n\n537\n00:30:03.940 --> 00:30:07.350\nI can't tell you that this subquery's\ngonna be on it and this one's not, but\n\n538\n00:30:07.350 --> 00:30:10.815\noverall, though, you've just gotta\nknow that hey, if it's subquerying,\n\n539\n00:30:10.815 --> 00:30:11.880\nthey mean all of these.\n\n540\n00:30:11.880 --> 00:30:12.496\n>> That's right.\n\n541\n00:30:12.496 --> 00:30:14.547\n>> [LAUGH]\n>> Well, Ronnie, thanks for dropping by,\n\n542\n00:30:14.547 --> 00:30:17.300\nand thanks for explaining these\ndifferent subqueries to us.\n\n543\n00:30:17.300 --> 00:30:19.850\nBut we have run out of time for\nthis episode.\n\n544\n00:30:19.850 --> 00:30:22.990\nWe thank you guys for joining us as well,\nhopefully we'll see you in the future.\n\n545\n00:30:22.990 --> 00:30:25.870\nSigning off for ITProTV,\nI've been your host Daniel Lowrie.\n\n546\n00:30:25.870 --> 00:30:26.600\n>> And I'm Ronnie Wong.\n\n547\n00:30:26.600 --> 00:30:28.432\n>> And we'll see you next time.\n\n548\n00:30:28.432 --> 00:30:35.840\n[MUSIC]\n\n",
          "vimeoId": "164049617"
        },
        {
          "description": "In this episode, Daniel and Ronnie explain the concept and different implementations of aggregate queries. They start by taking a look at GROUPING SETS which will define the groups. Next they explore the CUBE statement which creates every possible group. Finally, they explain the ROLLUP statement which will create a group with a hierarchy.",
          "length": "1683",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_queries-042116-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_queries-042116-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_queries-042116-1-sm.jpg",
          "title": "Implement Aggregate Queries",
          "transcript": "WEBVTT\n\n1\n00:00:00.006 --> 00:00:10.006\n[MUSIC]\n\n2\n00:00:12.187 --> 00:00:16.380\nAll right, greetings everyone and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:16.380 --> 00:00:18.140\nI'm you're host, Daniel Lowry.\n\n4\n00:00:18.140 --> 00:00:19.615\nAnd in today's episode,\n\n5\n00:00:19.615 --> 00:00:24.260\nwe are moving on with our querying\nMicrosoft SQL Server 2014 series.\n\n6\n00:00:24.260 --> 00:00:26.920\nJoining us back in the studio\nagain today to help lend his\n\n7\n00:00:26.920 --> 00:00:31.080\nstrong kung fu in that varied endeavor,\nour good friend Mr. Ronnie Wong.\n\n8\n00:00:31.080 --> 00:00:31.900\nRonnie welcome back sir.\n\n9\n00:00:31.900 --> 00:00:32.480\nHow's it going?\n\n10\n00:00:32.480 --> 00:00:36.300\n>> It is going well as we continue\non taking a look at more information\n\n11\n00:00:36.300 --> 00:00:38.990\nin querying our SQL server.\n\n12\n00:00:38.990 --> 00:00:41.790\nAnd now we're actually moving beyond\nthe realm of some of the things that we've\n\n13\n00:00:41.790 --> 00:00:43.490\nbeen stuck in for a little bit of time.\n\n14\n00:00:43.490 --> 00:00:44.616\nIt feels like we've been stuck in it for\na little bit of time.\n\n15\n00:00:44.616 --> 00:00:46.730\n>> [LAUGH]\n>> But\n\n16\n00:00:46.730 --> 00:00:49.850\nthe idea of moving beyond subqueries,\nmoving beyond the idea of\n\n17\n00:00:49.850 --> 00:00:54.820\nbasic querying and joins, we're now\nmoving into the realm of aggregation.\n\n18\n00:00:54.820 --> 00:00:56.640\nNow when we start thinking about that,\n\n19\n00:00:56.640 --> 00:00:59.630\na lot of times people aren't\nsure exactly what we mean.\n\n20\n00:00:59.630 --> 00:01:03.170\nBut the idea of aggregation is\nreally the ability to group\n\n21\n00:01:03.170 --> 00:01:06.100\nthings together the way\nthat we actually need to.\n\n22\n00:01:06.100 --> 00:01:10.480\nA lot of times that also involves the idea\nof mathematical summaries is what it\n\n23\n00:01:10.480 --> 00:01:11.700\nalso does.\n\n24\n00:01:11.700 --> 00:01:14.500\nSo whenever you actually start to\nsee information that you need to\n\n25\n00:01:14.500 --> 00:01:15.340\ngroup together.\n\n26\n00:01:15.340 --> 00:01:19.080\nLet's take for an example just a simple\nsale that may happen on our data base,\n\n27\n00:01:19.080 --> 00:01:22.870\nwe have companies and\nthat actually are we're serving.\n\n28\n00:01:22.870 --> 00:01:27.150\nAnd there can then be a single customer\nthat orders multiple times from us.\n\n29\n00:01:27.150 --> 00:01:29.940\nAnd what I might want to do\nis actually be able to sum up\n\n30\n00:01:29.940 --> 00:01:33.751\nthe entirety of all their sales that\nthey've had with me this year, okay?\n\n31\n00:01:33.751 --> 00:01:38.230\nSo what I'm doing something like that\nI'm doing some sort of aggregation.\n\n32\n00:01:38.230 --> 00:01:41.430\nAnd I need to be able to take the\ninformation that's entered in separately\n\n33\n00:01:41.430 --> 00:01:44.650\non each one of those orders,\nthey may be separate invoices.\n\n34\n00:01:44.650 --> 00:01:49.040\nInside of my database, and then be able to\nreport them as a single summarized piece\n\n35\n00:01:49.040 --> 00:01:54.960\nof information that this customer here\nhas actually ordered this much from me.\n\n36\n00:01:54.960 --> 00:01:57.180\nEither a year to date, or all the way\nthrough to the end of the year,\n\n37\n00:01:57.180 --> 00:02:01.550\nwhatever it might be, I need to be\nable to present information like that.\n\n38\n00:02:01.550 --> 00:02:06.290\nNow when we start dealing with the idea of\ngrouping then, and starting to do that,\n\n39\n00:02:06.290 --> 00:02:09.600\nthere's a couple of different things\nthat will actually help us out\n\n40\n00:02:09.600 --> 00:02:10.470\nwhen we start to do that.\n\n41\n00:02:10.470 --> 00:02:15.020\nVery simply we can use what we call\naggregation functions to help us right at\n\n42\n00:02:15.020 --> 00:02:15.970\nthe beginning.\n\n43\n00:02:15.970 --> 00:02:19.560\nBut then we need to take a look at more\ninformation that helps us to deal with\n\n44\n00:02:19.560 --> 00:02:21.870\nlarge sets of data instead.\n\n45\n00:02:21.870 --> 00:02:23.090\nSo, let's go ahead and start that way.\n\n46\n00:02:23.090 --> 00:02:25.050\nWe're gonna start taking\na look at idea of grouping and\n\n47\n00:02:25.050 --> 00:02:28.770\nthen we're gonna move into\nsomething called grouping sets too.\n\n48\n00:02:28.770 --> 00:02:32.710\nSo here it is on my\nparticular screen here.\n\n49\n00:02:32.710 --> 00:02:36.835\nI have of course a SQL query\nthat we're going to run and\n\n50\n00:02:36.835 --> 00:02:40.330\nat the simplest and\nmost basic level, okay?\n\n51\n00:02:40.330 --> 00:02:44.463\nWhen we start talking about the idea of\nactually doing some type of aggregate.\n\n52\n00:02:44.463 --> 00:02:48.700\nWe can do it right here in\nthe select clause itself.\n\n53\n00:02:48.700 --> 00:02:53.400\nAnd notice that what I'm doing is I'm\ntaking the sales year-to-date from this\n\n54\n00:02:53.400 --> 00:02:56.510\nparticular table which\nis a sales territory and\n\n55\n00:02:56.510 --> 00:03:01.760\nI'm saying just do me an average here and\nreport it as total sales.\n\n56\n00:03:01.760 --> 00:03:04.760\nNow I should probably ask you to\nreport that as being average sales.\n\n57\n00:03:04.760 --> 00:03:08.450\nSo let me kind of zoom, oop look at that,\nthat's a mistake there.\n\n58\n00:03:08.450 --> 00:03:10.090\nSo now, let me go ahead and\n\n59\n00:03:10.090 --> 00:03:12.880\njust report this as average\nsales instead of total sales,\n\n60\n00:03:12.880 --> 00:03:16.160\nthis actually shows you how much I was\npaying attention when I type this here.\n\n61\n00:03:16.160 --> 00:03:18.630\nSo we'll say average sales.\n\n62\n00:03:18.630 --> 00:03:22.980\nAnd so if I wanna go ahead and\nrun that I can select it and\n\n63\n00:03:22.980 --> 00:03:24.590\nI can execute that query.\n\n64\n00:03:24.590 --> 00:03:29.690\nAnd now notice that it's taken everyone\nof my sales inside of that table here\n\n65\n00:03:31.840 --> 00:03:33.020\nand gave me what?\n\n66\n00:03:33.020 --> 00:03:36.550\nA single summary,\na single piece of information, right?\n\n67\n00:03:36.550 --> 00:03:39.160\nSo I have a single value here\nthat's called the average\n\n68\n00:03:39.160 --> 00:03:41.060\nsales inside of that table.\n\n69\n00:03:41.060 --> 00:03:42.020\nAnd so that's what we're doing.\n\n70\n00:03:42.020 --> 00:03:44.200\nWe're aggregating all of\nthat data together, and\n\n71\n00:03:44.200 --> 00:03:46.830\nwe're telling it report it as one, okay.\n\n72\n00:03:46.830 --> 00:03:51.715\nNow even though that might help me\nout as far as understanding that as\n\n73\n00:03:51.715 --> 00:03:53.609\na company overview here.\n\n74\n00:03:53.609 --> 00:03:56.729\nThat all my sales We'll\nactually add that up or\n\n75\n00:03:56.729 --> 00:04:00.089\nactually average it out\nover all of my customers,\n\n76\n00:04:00.089 --> 00:04:05.784\nit came out to be pretty darn hefty if\nI take a look at it, about 5,275,120.\n\n77\n00:04:05.784 --> 00:04:06.910\n>> Company's doing pretty well there.\n\n78\n00:04:06.910 --> 00:04:09.660\n>> That's pretty good as\nfar as average sales go.\n\n79\n00:04:09.660 --> 00:04:13.530\nBut normally that's a little bit\ntoo much of an aggregation, right?\n\n80\n00:04:13.530 --> 00:04:18.620\nSo if we think about it, that figure\ndoesn't really mean anything but\n\n81\n00:04:18.620 --> 00:04:22.400\nwhat if we were to actually do\nkind of different here, okay?\n\n82\n00:04:22.400 --> 00:04:24.160\nSo we're actually wanting to go ahead and\n\n83\n00:04:24.160 --> 00:04:27.900\ndo the total sales though but\nall the territories instead.\n\n84\n00:04:27.900 --> 00:04:31.250\nI wanna see what each territory\nbrought in for the whole year.\n\n85\n00:04:31.250 --> 00:04:34.820\nWell you can see that I also\nselected that and so here it is.\n\n86\n00:04:34.820 --> 00:04:37.690\nSum and then I've also included an alias.\n\n87\n00:04:37.690 --> 00:04:39.830\nNow hopefully you're starting to see this.\n\n88\n00:04:39.830 --> 00:04:42.440\nIf you've gone through the series\nfrom the beginning to the end and\n\n89\n00:04:42.440 --> 00:04:45.890\nthe way that these are kind of numbered,\nyou may have, you may not have.\n\n90\n00:04:45.890 --> 00:04:49.240\nBut if you actually done that you actually\nstarted noticing that I stated dropping\n\n91\n00:04:49.240 --> 00:04:55.860\noff the word as every once and awhile for\na alias here, and you can do that, okay.\n\n92\n00:04:55.860 --> 00:04:58.090\nSo like in the select statement up here.\n\n93\n00:04:58.090 --> 00:05:01.620\nNotice I didn't put the word as,\nit doesn't matter in one way or another.\n\n94\n00:05:01.620 --> 00:05:03.710\nNot really in TSQL, right?\n\n95\n00:05:03.710 --> 00:05:05.930\nBut in the regular SQL,\n\n96\n00:05:05.930 --> 00:05:08.940\naccording to the standard,\nyou should always have that in there.\n\n97\n00:05:08.940 --> 00:05:12.590\nAnd so if we're actually doing things\nproperly, we'll always go ahead and\n\n98\n00:05:12.590 --> 00:05:13.760\nadd that in as well.\n\n99\n00:05:13.760 --> 00:05:17.560\nSo here it is, I've got this particular\nstatement here where I've included it,\n\n100\n00:05:17.560 --> 00:05:21.510\na single aggregate value inside\nof the select statement.\n\n101\n00:05:21.510 --> 00:05:25.880\nNow, once I do that, okay, it\nautomatically means that if I'm actually\n\n102\n00:05:25.880 --> 00:05:31.580\ndoing simple grouping, I will have\nto have a group by clause, have to.\n\n103\n00:05:31.580 --> 00:05:34.650\nIt's not an option, it's not something\nthat I can actually get away with and\n\n104\n00:05:34.650 --> 00:05:35.410\nI can show you that.\n\n105\n00:05:35.410 --> 00:05:38.410\nIf I go ahead and\njust kind of comment that out and\n\n106\n00:05:38.410 --> 00:05:42.480\nthen I select this statement right\nhere and try and run it without it.\n\n107\n00:05:42.480 --> 00:05:45.710\nNotice it actually tells me something\nhere that says hey, you can't do this.\n\n108\n00:05:45.710 --> 00:05:50.490\nIt's invalid because the select list\ndoes not contain either an aggregate\n\n109\n00:05:50.490 --> 00:05:54.996\nfunction or the group by clause\nis what's actually showing.\n\n110\n00:05:54.996 --> 00:05:58.860\nSo if I actually do put something\nlike this up in the select statement,\n\n111\n00:05:59.890 --> 00:06:02.100\nwhere I am actually doing\nthe aggregation and normally for\n\n112\n00:06:02.100 --> 00:06:04.990\nus the basic four that we\nnormally end up doing.\n\n113\n00:06:04.990 --> 00:06:10.460\nSum, average, maximum, minimum,\nand even the word count\n\n114\n00:06:10.460 --> 00:06:13.840\nis actually one of those what we call\naggregate functions that we can use.\n\n115\n00:06:13.840 --> 00:06:17.890\nIt means we're also gonna need to\nhave a group by clause in here.\n\n116\n00:06:17.890 --> 00:06:22.770\nNow when we also do this, in the group by,\nyou have to also go ahead and\n\n117\n00:06:22.770 --> 00:06:24.370\ngroup all the other\n\n118\n00:06:26.570 --> 00:06:31.370\ncolumns that you select here that\nare not actually aggregated.\n\n119\n00:06:31.370 --> 00:06:35.300\nSo notice that here in mine,\nI have TerritoryID and\n\n120\n00:06:35.300 --> 00:06:40.040\nalso have the name and up here,\nthese are the two that are actually not\n\n121\n00:06:40.040 --> 00:06:44.030\naggregated which is the name and\nthe TerritoryID.\n\n122\n00:06:44.030 --> 00:06:49.130\nSo now, if I select that whole\nthing here I can then execute that.\n\n123\n00:06:49.130 --> 00:06:54.300\nAnd now you can actually see it can run\nand that's returned to me ten rows here\n\n124\n00:06:54.300 --> 00:06:58.780\nwhere I've actually identified each of the\nterritories, and their particular names.\n\n125\n00:06:58.780 --> 00:07:00.340\nLet me zoom in on that a little bit, so\n\n126\n00:07:00.340 --> 00:07:02.760\nwe can see it a little bit easier and\nbetter here.\n\n127\n00:07:02.760 --> 00:07:06.990\nAnd each one then is actually identified\nand territory four in the South West,\n\n128\n00:07:06.990 --> 00:07:10.450\nthey've actually bought,\nabout $10 million.\n\n129\n00:07:10.450 --> 00:07:12.880\nThat's pretty good,\nunless I'm not counting right?\n\n130\n00:07:12.880 --> 00:07:13.990\nLet me verify that.\n\n131\n00:07:13.990 --> 00:07:15.101\nNo, that is ten million.\n\n132\n00:07:15.101 --> 00:07:16.270\n>> [LAUGH]\n>> I just want to make sure I was\n\n133\n00:07:16.270 --> 00:07:17.620\nactually counting right here.\n\n134\n00:07:17.620 --> 00:07:20.530\nSo they've got about 10\nmillion dollars in sales, and\n\n135\n00:07:20.530 --> 00:07:23.870\nbecause I had it descending,\nI know that this is my top market,\n\n136\n00:07:23.870 --> 00:07:27.980\nwhich is the southwest here and\nthen we can do that.\n\n137\n00:07:27.980 --> 00:07:31.340\nAnd not bad, Canada up here,\nis actually doing okay in itself.\n\n138\n00:07:31.340 --> 00:07:36.400\nAnd then Australia, but Northeast down\nhere, not doing too shabbily, but\n\n139\n00:07:36.400 --> 00:07:38.620\nat the same time, it's not great.\n\n140\n00:07:38.620 --> 00:07:41.100\nIt's just a little bit over $2.4 million.\n\n141\n00:07:41.100 --> 00:07:41.810\n>> Times are tough.\n\n142\n00:07:41.810 --> 00:07:44.080\n>> I know, times are tough up there,\nbut good for\n\n143\n00:07:44.080 --> 00:07:46.160\nAdventure Works is what I'm saying here.\n\n144\n00:07:46.160 --> 00:07:50.481\nSo we can actually see that that's\nthe simplest form of grouping that you and\n\n145\n00:07:50.481 --> 00:07:51.031\nI can do.\n\n146\n00:07:51.031 --> 00:07:55.224\nNow, when it comes down to it,\nif I can stick to these, I'm good.\n\n147\n00:07:55.224 --> 00:07:59.283\nI would love to say that every single\nquery that I have where I need to group\n\n148\n00:07:59.283 --> 00:08:03.678\ndata together Is that simple and, Daniel,\nthat would be ideal for all of us but\n\n149\n00:08:03.678 --> 00:08:09.280\nwe know something about databases and the\ndata and the people that request the data.\n\n150\n00:08:09.280 --> 00:08:12.880\nThe idea of them actually coming up with\nsomething that simple, the chances Daniel,\n\n151\n00:08:12.880 --> 00:08:13.780\nwhat do you think?\n\n152\n00:08:13.780 --> 00:08:14.570\n>> Slim to none.\n\n153\n00:08:14.570 --> 00:08:15.647\n>> Slim to none.\n[LAUGH]\n\n154\n00:08:15.647 --> 00:08:16.148\n>> Yeah.\n\n155\n00:08:16.148 --> 00:08:17.718\nThey're gonna want a little more detail.\n\n156\n00:08:17.718 --> 00:08:21.364\nMaybe a little more filtration, right.\n\n157\n00:08:21.364 --> 00:08:24.882\nThey like it all aggregated together but\n\n158\n00:08:24.882 --> 00:08:28.638\nthey like a lot of spreading it out.\n>> Yes, they do.\n\n159\n00:08:28.638 --> 00:08:29.778\n>> Show me where that money is\n\n160\n00:08:29.778 --> 00:08:32.380\ncoming from, Ronnie,\ndon't just tell me where it's at.\n\n161\n00:08:32.380 --> 00:08:34.220\nI wanna know how it got there.\n\n162\n00:08:34.220 --> 00:08:35.650\n>> Yeah, that is exactly right.\n\n163\n00:08:35.650 --> 00:08:36.710\nThe very fact is,\n\n164\n00:08:36.710 --> 00:08:39.840\neven though simple aggregations are really\ngonna help us especially when we're\n\n165\n00:08:39.840 --> 00:08:44.190\nworking with simple data bases and\nnice neat whole chunks of data.\n\n166\n00:08:44.190 --> 00:08:48.090\nThere is a lot of times your database\ncontains more information than\n\n167\n00:08:48.090 --> 00:08:48.970\nyou realize.\n\n168\n00:08:48.970 --> 00:08:51.811\nAnd somebody is looking for\na specific piece of information and\n\n169\n00:08:51.811 --> 00:08:54.900\nwants to be on that sheet\ngroup it the way they want to.\n\n170\n00:08:54.900 --> 00:08:56.610\nSo when we start talking about that,\n\n171\n00:08:56.610 --> 00:09:01.340\nthe great thing about the language\nof TC core or SQL itself is that\n\n172\n00:09:01.340 --> 00:09:06.020\nit gives us plenty of ability to do that\nand using select statement to help us out.\n\n173\n00:09:06.020 --> 00:09:10.570\nNow what I'm actually referring to is\nsomething that we call grouping sets okay.\n\n174\n00:09:10.570 --> 00:09:14.450\nNow in terms of grouping sets\nwhat are we really talking about?\n\n175\n00:09:14.450 --> 00:09:18.260\nWe're talking about the ability\nto group our data together and\n\n176\n00:09:18.260 --> 00:09:22.110\nwhen it comes down to SQL\nhelping this to display that,\n\n177\n00:09:22.110 --> 00:09:25.430\nthere's really a few different\nways that we can do this, okay.\n\n178\n00:09:25.430 --> 00:09:30.330\nAnd so we can actually create what we\ncall a simple grouping set itself, okay.\n\n179\n00:09:30.330 --> 00:09:33.840\nAnd you actually see that there's\nactually a name called grouping set\n\n180\n00:09:33.840 --> 00:09:35.240\nis what we can do.\n\n181\n00:09:35.240 --> 00:09:39.300\nAnd then we can actually go ahead and\nalso create what's called a cube.\n\n182\n00:09:39.300 --> 00:09:41.500\nAnd, go figure,\ndon't know why it's called a cube but\n\n183\n00:09:41.500 --> 00:09:43.390\nwe'll actually talk\nabout that in a moment.\n\n184\n00:09:43.390 --> 00:09:46.630\nWe can create what we call a roll up,\nokay.\n\n185\n00:09:46.630 --> 00:09:48.910\nAnd we can create a roll up with grouping,\n\n186\n00:09:48.910 --> 00:09:50.140\nokay so-\n>> They're\n\n187\n00:09:50.140 --> 00:09:50.790\ndelicious\n>> Yeah,\n\n188\n00:09:50.790 --> 00:09:51.290\nthat's\n>> Yeah.\n\n189\n00:09:51.290 --> 00:09:51.916\n>> [LAUGH]\n\n190\n00:09:51.916 --> 00:09:53.746\n>> Roll ups or fruit roll ups is what\n\n191\n00:09:53.746 --> 00:09:54.890\nwe're talking about.\nSo but\n\n192\n00:09:54.890 --> 00:09:57.720\nwe'll call it data roll up instead is\nwhat we'll actually end up seeing.\n\n193\n00:09:57.720 --> 00:10:01.360\nSo let's go ahead and\nstart to take a look here at what\n\n194\n00:10:01.360 --> 00:10:03.990\ndifferent set this actually\nends up making for us.\n\n195\n00:10:03.990 --> 00:10:07.290\nAnd I've added in a few comments to\nhelp us out when we start doing this\n\n196\n00:10:07.290 --> 00:10:08.840\nidea of grouping.\n\n197\n00:10:08.840 --> 00:10:11.500\nNow when you have a set of\ndata like what we have here.\n\n198\n00:10:11.500 --> 00:10:15.243\nAnd we're actually just using, I'm just\ngonna do years, cuz it's easier than all\n\n199\n00:10:15.243 --> 00:10:19.002\nthose big numbers and me trying to figure\nout what number's what at this point here.\n\n200\n00:10:19.002 --> 00:10:23.565\nBut we're just gonna use the year to\nhelp us out in terms of the grouping and\n\n201\n00:10:23.565 --> 00:10:25.638\nwe're gonna use sales order ID.\n\n202\n00:10:25.638 --> 00:10:29.808\nSo at this particular point\nin this statement here,\n\n203\n00:10:29.808 --> 00:10:33.350\njust a very simple statement, right.\n\n204\n00:10:33.350 --> 00:10:36.810\nI wanna make sure that I see\nthe sales order ID by the year.\n\n205\n00:10:36.810 --> 00:10:38.708\nThat's pretty much what I'm saying here.\n\n206\n00:10:38.708 --> 00:10:41.370\nAnd I wanna make sure that I don't\nreally care about the entire order\n\n207\n00:10:41.370 --> 00:10:42.530\nthe day or the month.\n\n208\n00:10:42.530 --> 00:10:45.700\nI just wanna see it by the year itself.\n\n209\n00:10:45.700 --> 00:10:48.970\nNow I can do that and what it does\nis it gives me an entire list of\n\n210\n00:10:48.970 --> 00:10:52.640\nevery single order that I would have and\nbe able to actually see that and\n\n211\n00:10:52.640 --> 00:10:56.689\nwhen that happens that's exactly\nwhat I have pretty much down here.\n\n212\n00:10:57.920 --> 00:11:03.170\nIs the idea of about 62,935 rows, so\nplenty of data to actually have, okay.\n\n213\n00:11:03.170 --> 00:11:07.490\nNow the other thing though,\nis I can actually\n\n214\n00:11:07.490 --> 00:11:11.840\ntake that data instead and then group it.\n\n215\n00:11:11.840 --> 00:11:17.090\nAnd when I do that in the group by clause,\nI pull out what is called grouping sets.\n\n216\n00:11:17.090 --> 00:11:19.890\nNow, I'm using this\nparticular terminology, or\n\n217\n00:11:19.890 --> 00:11:24.360\nthis syntax, because if I choose\nto use the word grouping sets,\n\n218\n00:11:24.360 --> 00:11:30.280\nit means I get to define how many\ngroups it breaks up into, okay.\n\n219\n00:11:30.280 --> 00:11:33.520\nAnd the way that we\ndefine that is actually\n\n220\n00:11:33.520 --> 00:11:36.755\na couple of different things we\nhave to pay attention to, okay.\n\n221\n00:11:36.755 --> 00:11:39.200\nSo, remember that grouping\nsets is a function, so\n\n222\n00:11:39.200 --> 00:11:41.430\nit has its own set of parentheses.\n\n223\n00:11:41.430 --> 00:11:43.830\nWhich is these two on the outside.\n\n224\n00:11:43.830 --> 00:11:47.990\nAnd then from that point I can actually\ncreate as many groups as I want.\n\n225\n00:11:47.990 --> 00:11:51.100\nBut notice what's actually\nin these groups here, okay.\n\n226\n00:11:51.100 --> 00:11:55.700\nThese are the fields that we have\nfrom the select statement or\n\n227\n00:11:55.700 --> 00:11:58.450\nthe column names that we\nhave from select statement.\n\n228\n00:11:58.450 --> 00:12:03.042\nSo in this one, I can go ahead and define.\n\n229\n00:12:03.042 --> 00:12:07.200\nI wanna make sure I can group\ndata by sales order ID and\n\n230\n00:12:07.200 --> 00:12:09.410\nby the order date of the year.\n\n231\n00:12:09.410 --> 00:12:11.940\nAnd I just marked it as\nbeing the first group.\n\n232\n00:12:11.940 --> 00:12:17.430\nI can also group the data just by\nthe sale order ID if I choose to, or\n\n233\n00:12:17.430 --> 00:12:18.970\nby the year itself.\n\n234\n00:12:18.970 --> 00:12:23.210\nOkay, the last one I have here\nthat I call this fourth group.\n\n235\n00:12:23.210 --> 00:12:26.790\nThis is our default group\nwhich is everything.\n\n236\n00:12:26.790 --> 00:12:30.200\nNow notice we don't have\nthe keyword everything in here, but\n\n237\n00:12:30.200 --> 00:12:32.820\nthe idea of symbolizing\nit with nothing inside\n\n238\n00:12:32.820 --> 00:12:36.930\npretty much means this is kinda the major\nset, it's everything that we have, so\n\n239\n00:12:36.930 --> 00:12:39.780\nit's the combination of everything\nthat we can actually do.\n\n240\n00:12:39.780 --> 00:12:43.930\nSo at this point we have these four\ndistinct groups that we can actually\n\n241\n00:12:43.930 --> 00:12:45.960\ncreate if we wanted to.\n\n242\n00:12:45.960 --> 00:12:49.880\nNow, when I run this it's not gonna\nshow us really much different\n\n243\n00:12:49.880 --> 00:12:52.240\nthan what we have displayed.\n\n244\n00:12:52.240 --> 00:12:55.850\nBut let me see if I can run it\nwithout doing too much here.\n\n245\n00:12:57.060 --> 00:13:01.140\nSo when I execute that data again,\nI don't get a lot of differences.\n\n246\n00:13:01.140 --> 00:13:05.770\nBut what you actually start seeing here\nis that in 2005, it will go ahead, and\n\n247\n00:13:05.770 --> 00:13:09.580\nif we haven't been grouping by the sales\norder ID, it would go ahead and do it,\n\n248\n00:13:09.580 --> 00:13:14.230\nbut the first thing that it seems to\ngroup on is by the year at this point cuz\n\n249\n00:13:14.230 --> 00:13:16.820\nthat seems to be the only\nthing that actually matches.\n\n250\n00:13:16.820 --> 00:13:20.160\nAnd then later on as we continue\nto go on through, we might see,\n\n251\n00:13:20.160 --> 00:13:22.180\nwell it's just tons of data.\n\n252\n00:13:22.180 --> 00:13:25.820\nSo it's actually grouping by year because\nI've only chosen two particular columns.\n\n253\n00:13:25.820 --> 00:13:29.220\nBut we had more we would actually see that\nthere would be more that could be grouped\n\n254\n00:13:29.220 --> 00:13:31.500\ntogether where all those could come in.\n\n255\n00:13:31.500 --> 00:13:36.860\nAnd about half way through the list\nhere it actually has a null value and\n\n256\n00:13:36.860 --> 00:13:39.620\nalso some other information\nthat may appear.\n\n257\n00:13:39.620 --> 00:13:43.580\nAnd this is where you start seeing\nthe breakup of the grouping as well.\n\n258\n00:13:43.580 --> 00:13:47.820\nSo right here what you see is null no,\nit's saying hey, at this point,\n\n259\n00:13:47.820 --> 00:13:52.490\nthis is kind of a break of a group where\nit started in by year and sales order ID,\n\n260\n00:13:52.490 --> 00:13:54.630\nand now it's switching over just to what?\n\n261\n00:13:54.630 --> 00:13:59.820\nThe sales order ID itself, and that's\nwhat's actually left there is that we may\n\n262\n00:13:59.820 --> 00:14:04.760\nhave some sales order IDs that don't have\na year associated with it right there too.\n\n263\n00:14:04.760 --> 00:14:08.080\nSo it can actually take that\ninformation and run through, and\n\n264\n00:14:08.080 --> 00:14:11.500\nit groups that data in\nthat particular way, okay.\n\n265\n00:14:11.500 --> 00:14:14.760\nSo that's pretty much one of those things,\nif you actually want to choose that and\n\n266\n00:14:14.760 --> 00:14:18.370\nyou have multiple columns, and you say,\nno I want to see it by this particular\n\n267\n00:14:18.370 --> 00:14:22.110\ngrouping, it can do that and\ndisplay it for you very easily, okay.\n\n268\n00:14:22.110 --> 00:14:25.690\n>> Kind of interesting to be able\nto put those groups together and\n\n269\n00:14:25.690 --> 00:14:29.370\nI like the way that once the groups\nstarted to break down and said, well,\n\n270\n00:14:29.370 --> 00:14:32.160\nI know you want this but\nit doesn't really have anything, but\n\n271\n00:14:32.160 --> 00:14:35.660\nthere's still data there that might be\npertinent to what you're asking for, so\n\n272\n00:14:35.660 --> 00:14:37.830\nI'm gonna keep that in there as well and\njust put a null value.\n\n273\n00:14:37.830 --> 00:14:41.810\n>> And that's what we have to make sure\nthat we include in that last group no\n\n274\n00:14:41.810 --> 00:14:42.310\nmatter what.\n\n275\n00:14:42.310 --> 00:14:45.330\nSo even if you have 16, you got hey,\nI only have got 16 columns.\n\n276\n00:14:45.330 --> 00:14:49.070\nYou've gotta include that 17th one in\nthere just to catch all the remaining\n\n277\n00:14:49.070 --> 00:14:52.550\ndata, because if not, you can miss rows\nof data and that wouldn't be good for\n\n278\n00:14:52.550 --> 00:14:54.620\nyou as we do this.\n\n279\n00:14:54.620 --> 00:14:58.760\nNow the other one,\nis what we call a cube, okay.\n\n280\n00:14:58.760 --> 00:15:02.710\nNow when it comes down to\nthe idea of the cube of data,\n\n281\n00:15:02.710 --> 00:15:06.050\nthis is a little bit\ndifferent in this way, okay.\n\n282\n00:15:06.050 --> 00:15:12.530\nThis will come up with every possible\ncombination is what it will do.\n\n283\n00:15:12.530 --> 00:15:17.630\nSo when we talk about actually grouping by\ncube, so it's the same type of thing but\n\n284\n00:15:17.630 --> 00:15:20.890\nnow when we actually say, hey,\nwe're gonna group by cube, we tell it to\n\n285\n00:15:20.890 --> 00:15:25.180\ncome up with every possible combination\non its own and make sure you report that.\n\n286\n00:15:25.180 --> 00:15:28.390\nSo in theory this is like when we\ntalk about another episode that will\n\n287\n00:15:28.390 --> 00:15:31.410\ncall the cartesian product just about,\nokay?\n\n288\n00:15:31.410 --> 00:15:36.230\nWhere it takes everything in one column\nmultiplies it by everything in this column\n\n289\n00:15:36.230 --> 00:15:38.300\nand multiplies it by\neverything in that column.\n\n290\n00:15:38.300 --> 00:15:40.830\nAnd it return us at subset of data.\n\n291\n00:15:40.830 --> 00:15:45.710\nNow this actually insures that we get\nevery single possible combination.\n\n292\n00:15:45.710 --> 00:15:50.113\nAnd whenever I do something like that you\nactually see where it will come up with\n\n293\n00:15:50.113 --> 00:15:51.324\nthat exact idea too.\n\n294\n00:15:51.324 --> 00:15:55.434\nNow this count of years here, that was\nactually something else I was doing.\n\n295\n00:15:55.434 --> 00:15:56.839\nSo I don't really need that.\n\n296\n00:15:56.839 --> 00:16:00.653\nCuz it doesn't make sense to count up\nEverything that everybody only had\n\n297\n00:16:00.653 --> 00:16:02.975\na single order of\neverything that they did.\n\n298\n00:16:02.975 --> 00:16:06.689\nSo let me run that one again without\nthat extraneous value in there,\n\n299\n00:16:06.689 --> 00:16:09.400\ncuz that doesn't mean anything.\n\n300\n00:16:09.400 --> 00:16:11.600\nSo it's still the same number of rows.\n\n301\n00:16:11.600 --> 00:16:12.760\nBut it will go through and\n\n302\n00:16:12.760 --> 00:16:16.590\nit will try to come up with every\nsingle possible combination it can.\n\n303\n00:16:16.590 --> 00:16:20.071\nNow I'm using a very simple example\nright here in terms of queue.\n\n304\n00:16:20.071 --> 00:16:22.078\nBut once again if I had three columns,\n\n305\n00:16:22.078 --> 00:16:26.282\nif I had five columns you'd actually see\nevery possible combination order as it\n\n306\n00:16:26.282 --> 00:16:29.820\nstart to going all the way through\nto the end, you'll see that.\n\n307\n00:16:29.820 --> 00:16:31.330\nAnd that's the idea, so\n\n308\n00:16:31.330 --> 00:16:33.950\nthis is just to make sure that\nyou don't miss any data at all.\n\n309\n00:16:33.950 --> 00:16:36.646\n>> So yeah, on one hand you\nhave the snipers bullet and\n\n310\n00:16:36.646 --> 00:16:38.600\nthe other way is a shotgun approach.\n\n311\n00:16:38.600 --> 00:16:39.580\nI'm trying to hit everything.\n\n312\n00:16:39.580 --> 00:16:40.550\n>> It really is, yes.\n\n313\n00:16:40.550 --> 00:16:41.549\nSo this one, it is.\n\n314\n00:16:41.549 --> 00:16:43.952\nIt's the same thing like\nwe were talking about.\n\n315\n00:16:43.952 --> 00:16:46.441\nYou can try to find the exact\nvalue that you need,\n\n316\n00:16:46.441 --> 00:16:50.569\nyou find that you know that it did it's\nfunction, but it can be very difficult for\n\n317\n00:16:50.569 --> 00:16:52.800\nyou to find that one single value.\n\n318\n00:16:52.800 --> 00:16:56.450\nBut this should at least tell you if\nyou got every single record here, and\n\n319\n00:16:56.450 --> 00:16:57.360\nthe grouping that you wanted.\n\n320\n00:16:58.790 --> 00:17:01.508\nThe third one is what's called a ROLLUP.\n\n321\n00:17:01.508 --> 00:17:06.309\nNow you wanna use this only when you have\nsome type of hierarchical value that\n\n322\n00:17:06.309 --> 00:17:09.542\nyou're actually having to display and\ndo as well.\n\n323\n00:17:09.542 --> 00:17:12.975\nNow when we start taking a look here,\nwhen I talk about a hierarchy,\n\n324\n00:17:12.975 --> 00:17:15.950\nlet's take a look at what\nI mean by this one here.\n\n325\n00:17:15.950 --> 00:17:20.620\nSo notice that what I've selected\nis that I have a country, and\n\n326\n00:17:20.620 --> 00:17:23.490\nthen oops, I actually didn't put this one\nin the right order, so let's do that.\n\n327\n00:17:23.490 --> 00:17:24.360\nThere we go.\n\n328\n00:17:24.360 --> 00:17:28.090\nSo I have a country and\nI have a region, and I have a city.\n\n329\n00:17:28.090 --> 00:17:29.860\nThink about that in terms of hierarchy.\n\n330\n00:17:29.860 --> 00:17:34.459\nThere's a country which is a bigger one,\nand a subset of that country is region and\n\n331\n00:17:34.459 --> 00:17:35.740\nthen the idea of city.\n\n332\n00:17:36.960 --> 00:17:40.570\nSo if I wanted to actually do this,\nif I do a roll up, I'm saying,\n\n333\n00:17:40.570 --> 00:17:42.820\nI have hierarchical data.\n\n334\n00:17:42.820 --> 00:17:47.440\nSomething like country, something\nlike region, something like city, or\n\n335\n00:17:47.440 --> 00:17:50.660\nit might be where you do\nthe same thing by departments.\n\n336\n00:17:50.660 --> 00:17:53.825\nYou have the entire company,\nyou have the department, and\n\n337\n00:17:53.825 --> 00:17:57.192\nthen you have individual employees\nin the department as well.\n\n338\n00:17:57.192 --> 00:17:59.470\nAnd yes, you start doing stuff like that.\n\n339\n00:17:59.470 --> 00:18:02.080\nSo you can actually do it this way too.\n\n340\n00:18:02.080 --> 00:18:05.210\nNow, this one will actually display\ndata a little bit differently for\n\n341\n00:18:05.210 --> 00:18:08.020\nus in the two examples\nthat I've just used here.\n\n342\n00:18:08.020 --> 00:18:11.600\nBut notice that when I actually\ntake a look at this one,\n\n343\n00:18:11.600 --> 00:18:15.540\nI had to do an INNER JOIN on a couple of\ndifferent tables to give me the result\n\n344\n00:18:15.540 --> 00:18:16.630\nthat I needed.\n\n345\n00:18:16.630 --> 00:18:20.270\nSo the INNER JOIN, that way it\nconnects these tables together.\n\n346\n00:18:20.270 --> 00:18:21.890\nBecause I actually have values from what?\n\n347\n00:18:21.890 --> 00:18:26.197\nThree different tables here,\nst from the sales territory,\n\n348\n00:18:26.197 --> 00:18:29.669\nsp from sales person,\na from the address table.\n\n349\n00:18:29.669 --> 00:18:36.867\nAnd then I actually have a Count up\norder here for the Order by the City.\n\n350\n00:18:36.867 --> 00:18:38.352\nAnd then we did the INNER JOIN.\n\n351\n00:18:38.352 --> 00:18:41.330\nAnd notice now we actually\ncan group by the ROLLUP.\n\n352\n00:18:41.330 --> 00:18:46.016\nAnd this is where I'm telling it\nhere's the hierarchy to report\n\n353\n00:18:46.016 --> 00:18:47.588\nthe actual group by.\n\n354\n00:18:47.588 --> 00:18:51.933\nI wanna make sure that we actually\nget the name of the country,\n\n355\n00:18:51.933 --> 00:18:56.880\nthe name of the region, and the name\nof the city in that type of ROLLUP.\n\n356\n00:18:57.940 --> 00:19:01.060\nSo let me show you what the result\nlooks like when we do that one.\n\n357\n00:19:02.380 --> 00:19:06.310\nSo now when I show this,\nlet's see if I can scroll this up here so\n\n358\n00:19:06.310 --> 00:19:07.249\nwe can take a look.\n\n359\n00:19:08.360 --> 00:19:10.814\nHere, and then let me zoom in.\n\n360\n00:19:10.814 --> 00:19:14.730\nI thought I'd actually figured this out\ncuz of how small it actually looks.\n\n361\n00:19:14.730 --> 00:19:17.330\nI was clicking on the message\na little bit earlier and\n\n362\n00:19:17.330 --> 00:19:23.350\nI saw that there was this 100% thing, so\nI changed up to the 200 or 150, go Eureka!\n\n363\n00:19:23.350 --> 00:19:25.360\nThat's gonna actually help\nus out on the show, and\n\n364\n00:19:25.360 --> 00:19:27.389\nthen I clicked on the result tab,\nand look at that.\n\n365\n00:19:27.389 --> 00:19:28.086\n>> [LAUGH]\n>> it was still the same.\n\n366\n00:19:28.086 --> 00:19:29.409\nSo it was nothing.\n\n367\n00:19:29.409 --> 00:19:30.710\nI was like, are you joking?\n\n368\n00:19:30.710 --> 00:19:32.044\nBut that's exactly what happens.\n\n369\n00:19:32.044 --> 00:19:36.136\nBut let me scroll in here just\na little bit to help us out.\n\n370\n00:19:36.136 --> 00:19:42.230\nSo now when we take a look, look at\nhow the actual data is reported here.\n\n371\n00:19:42.230 --> 00:19:45.920\nAustralia which is country,\nregion and then city,\n\n372\n00:19:45.920 --> 00:19:50.730\nand it was able to actually even tell\nme what the orders were by the city.\n\n373\n00:19:50.730 --> 00:19:55.970\nAnd as I scroll down,\nyou can see here on line 20.\n\n374\n00:19:55.970 --> 00:19:59.700\nNotice that here is the next roll up.\n\n375\n00:19:59.700 --> 00:20:04.140\nSo notice the overall\ntotal orders by city here.\n\n376\n00:20:04.140 --> 00:20:08.150\nBut now what I'm getting on line 20,\nonce it actually summed all that up,\n\n377\n00:20:08.150 --> 00:20:11.200\nit essentially said,\ninside New South Wales,\n\n378\n00:20:11.200 --> 00:20:15.840\nAustralia, there have been 1,588 sales.\n\n379\n00:20:15.840 --> 00:20:21.160\nSo notice that that's my next one and\nthen if I continue to scroll down here,\n\n380\n00:20:21.160 --> 00:20:27.330\nI'm gonna see where Australia itself, and\nnotice that there is a null and null here.\n\n381\n00:20:27.330 --> 00:20:32.313\nSo even though it sounds a little\nbit strange, you're actually\n\n382\n00:20:32.313 --> 00:20:37.402\nstarting to see the entirety of Australia,\n3,632 orders.\n\n383\n00:20:37.402 --> 00:20:42.001\nAnd if I were to break it down again,\nand here it is, here's one for\n\n384\n00:20:42.001 --> 00:20:43.741\nTasmania and Victoria.\n\n385\n00:20:43.741 --> 00:20:47.288\nSo you can see that here it is for\nVictoria, Australia,\n\n386\n00:20:47.288 --> 00:20:50.010\nI don't wanna say that wrong.\n\n387\n00:20:50.010 --> 00:20:54.919\nSo here it is 901 in that region and\nthen each city here is divided up for\n\n388\n00:20:54.919 --> 00:20:57.337\nthe Tasmania region of Australia.\n\n389\n00:20:57.337 --> 00:21:02.532\n106, and that one city here 106 in\nSouth Australia that one region,\n\n390\n00:21:02.532 --> 00:21:06.540\nbut then every single city\nQueensland the same way.\n\n391\n00:21:06.540 --> 00:21:08.430\nAnd we go all the way\ndown through that and\n\n392\n00:21:08.430 --> 00:21:12.380\nyou can now see why roll up really helps,\nbecause you are actually breaking down.\n\n393\n00:21:12.380 --> 00:21:15.710\nIf Daniel says,\nI wanna see it by the country or\n\n394\n00:21:15.710 --> 00:21:17.740\nhow many totals do we have, I can tell.\n\n395\n00:21:17.740 --> 00:21:20.020\n>> It's got every possible scenarios.\n\n396\n00:21:20.020 --> 00:21:22.840\nAnd then putting it in some type of for\n\n397\n00:21:22.840 --> 00:21:24.280\nlack of a better term\nlike a hierarchy thing.\n\n398\n00:21:24.280 --> 00:21:25.981\n>> Yep, that's exactly [INAUDIBLE]\n>> Working from this and\n\n399\n00:21:25.981 --> 00:21:29.608\nthat's the largest view of what we\nwanna break that down a little further.\n\n400\n00:21:29.608 --> 00:21:32.337\nHere's the different cities and\nfor every time it does that,\n\n401\n00:21:32.337 --> 00:21:35.867\nwhatever value it doesn't have it seems\nlike it's putting that null in there.\n\n402\n00:21:35.867 --> 00:21:36.473\n>> It really is.\n\n403\n00:21:36.473 --> 00:21:38.385\n>> [LAUGH]\n>> It's putting that null in there, sorry.\n\n404\n00:21:38.385 --> 00:21:40.510\n[CROSSTALK]\n>> That's all right.\n\n405\n00:21:40.510 --> 00:21:44.770\n>> So when we start taking a look at that\nit really does depend on what somebody is\n\n406\n00:21:44.770 --> 00:21:47.030\nasking you to pull out.\n\n407\n00:21:47.030 --> 00:21:50.486\nSo sometimes you just need to\nverify that we have plenty,\n\n408\n00:21:50.486 --> 00:21:52.864\nthat all of the data actually shows up.\n\n409\n00:21:52.864 --> 00:21:55.743\nSo doing that idea, the cube can help.\n\n410\n00:21:55.743 --> 00:21:57.220\nNow if you're not sure, in other words,\n\n411\n00:21:57.220 --> 00:21:59.342\nif you're not sure what\ncombination you're looking for.\n\n412\n00:21:59.342 --> 00:22:02.648\nThe cube also helps because then\nyou can actually go back in and\n\n413\n00:22:02.648 --> 00:22:05.263\ngo, here's the combination\nI'm looking for.\n\n414\n00:22:05.263 --> 00:22:06.866\nAnd then we can take that and\n\n415\n00:22:06.866 --> 00:22:10.570\ndo the grouping sets like we\nsaw in the very beginning.\n\n416\n00:22:10.570 --> 00:22:13.680\nAnd zero in, just like what Daniel\nwas talking about, the sniper rifle,\n\n417\n00:22:13.680 --> 00:22:16.350\nand pull and go,\nthis is exactly what I'm looking for.\n\n418\n00:22:16.350 --> 00:22:20.400\nIf I can't tell right away, I can at least\ntake a look at all that data that it's\n\n419\n00:22:20.400 --> 00:22:23.680\npresenting to me in every possible\ncombination, figure that out,\n\n420\n00:22:23.680 --> 00:22:25.490\nbe able to zoom in and do that.\n\n421\n00:22:25.490 --> 00:22:29.230\nBut this one here, as far as the rollup\ngoes, you can see why the hierarchy is\n\n422\n00:22:29.230 --> 00:22:31.698\nvery helpful especially\nwhen you have that down.\n\n423\n00:22:31.698 --> 00:22:34.136\nNow what if you have unrelated data?\n\n424\n00:22:34.136 --> 00:22:35.842\nIt's not gonna help you out.\n\n425\n00:22:35.842 --> 00:22:40.661\nSo make sure you do have that data in that\nkind of hierarchical sense that we're\n\n426\n00:22:40.661 --> 00:22:44.178\ntalking about and\nthat depends on you knowing your data.\n\n427\n00:22:44.178 --> 00:22:46.924\nYou don't know your data your\ngoing to say I actually think this\n\n428\n00:22:46.924 --> 00:22:49.004\nwill ROLLUP into that,\nit doesn't work that way.\n\n429\n00:22:49.004 --> 00:22:52.602\n[LAUGH] You have to actually know that\ndata is actually going to make sense as\n\n430\n00:22:52.602 --> 00:22:54.740\nyou actually roll it out.\n\n431\n00:22:54.740 --> 00:22:58.170\nNow, we have one more that also\ndeals with this roll up here,\n\n432\n00:22:58.170 --> 00:23:04.150\nwhich is to do a ROLLUP and\nGROUPING at the same time.\n\n433\n00:23:04.150 --> 00:23:07.140\nSo what am I saying when\nI do something like that?\n\n434\n00:23:07.140 --> 00:23:10.878\nI'm saying that hey,\nyou can actually pick and choose.\n\n435\n00:23:10.878 --> 00:23:13.708\nWhat you actually want to be together,\n\n436\n00:23:13.708 --> 00:23:18.420\nas long as the actual data\nis in a hierarchy goal view.\n\n437\n00:23:18.420 --> 00:23:20.300\nThat you can see it rolled up here.\n\n438\n00:23:20.300 --> 00:23:21.956\nNotice we're doing the same\nthing that we did.\n\n439\n00:23:21.956 --> 00:23:25.160\nWe're combining those two\nelements together, the idea\n\n440\n00:23:25.160 --> 00:23:29.780\nof the grouping set as well as the ROLLUP\ntogether, and you'll see it right here.\n\n441\n00:23:29.780 --> 00:23:36.010\nHopefully, I hope you'll see it, is now\nI'm selecting not only the actual name,\n\n442\n00:23:36.010 --> 00:23:41.627\nbut I'm also grouping by that name and\nwe're gonna call that grpcountry.\n\n443\n00:23:41.627 --> 00:23:44.441\nIt's just something that I\ntried to make short cuz if not,\n\n444\n00:23:44.441 --> 00:23:47.322\nI'll spell out everything and\nit just makes it super long.\n\n445\n00:23:47.322 --> 00:23:51.166\nAnd same thing here by Name, or and\nI actually called it region instead and\n\n446\n00:23:51.166 --> 00:23:53.716\nthen by City, just by City,\nand the same count.\n\n447\n00:23:53.716 --> 00:23:57.560\nSo it's essentially the same select\nstatement that we're looking for.\n\n448\n00:23:57.560 --> 00:24:03.030\nNotice all of the same ideas of the\ninterjoins that we had to have in place.\n\n449\n00:24:03.030 --> 00:24:05.710\nAnd then at the end here,\nwe do a group by roll up.\n\n450\n00:24:05.710 --> 00:24:06.450\nI sent you the same.\n\n451\n00:24:06.450 --> 00:24:09.930\nNow the only thing I add in here\nwas the grouping set information.\n\n452\n00:24:09.930 --> 00:24:13.120\nI just didn't have us actually\ncalling on the grouping set itself.\n\n453\n00:24:13.120 --> 00:24:15.769\nI actually just added\nthe word grouping around us.\n\n454\n00:24:17.460 --> 00:24:20.660\nNow when we take a look at this one, this\none's going to look a little bit stranger\n\n455\n00:24:21.910 --> 00:24:26.200\nhere, I'm going to query that and\nthen we'll kind of pull this up so\n\n456\n00:24:26.200 --> 00:24:30.380\nthat we can see it a little bit better\nhere when we start taking a look.\n\n457\n00:24:30.380 --> 00:24:34.980\nSo now, what it's actually done is\ncreated this group column here, okay?\n\n458\n00:24:34.980 --> 00:24:39.330\nIt actually kind of sets it out as far\nas being saying look, here's actually\n\n459\n00:24:39.330 --> 00:24:43.420\nthe grouping order that we have but you're\nstill seeing kind of the same thing.\n\n460\n00:24:43.420 --> 00:24:48.280\nHere's the entire country and\neach one by the actual city, but\n\n461\n00:24:48.280 --> 00:24:51.980\nthen when it comes down to\nNew South Wales here and\n\n462\n00:24:51.980 --> 00:24:55.910\nnoticed that they said look,\nwe're creating that as one big group here,\n\n463\n00:24:55.910 --> 00:24:59.440\nokay, so here's the first\nreal grouping that we have.\n\n464\n00:24:59.440 --> 00:25:02.290\nWhich is the New South Wales and\nthat's why you see a one there.\n\n465\n00:25:02.290 --> 00:25:06.400\nAnd then as we scroll on through\nyou'll see the same thing here.\n\n466\n00:25:06.400 --> 00:25:08.720\nHere's another grouping\nthat is actually created.\n\n467\n00:25:08.720 --> 00:25:13.530\nAnd so it's actually marking out where\nthis stuff is hierarchically set.\n\n468\n00:25:13.530 --> 00:25:15.170\nAnd then it's right here.\n\n469\n00:25:15.170 --> 00:25:17.500\nYou'll see the same thing once again.\n\n470\n00:25:17.500 --> 00:25:19.985\nThere it is, Australia, and\nit's just trying to separate out.\n\n471\n00:25:19.985 --> 00:25:22.140\nAnd notice here there is a null,\n\n472\n00:25:22.140 --> 00:25:26.950\nso it's actually saying these two values\nare actually combined together into\n\n473\n00:25:26.950 --> 00:25:30.830\nAustralia as well and\nit will continue to do the same thing.\n\n474\n00:25:30.830 --> 00:25:35.060\nSo this allows you to say\nexactly what you want grouped,\n\n475\n00:25:35.060 --> 00:25:39.150\ninstead of just taking everything and\ndoing that hierarchy at the same time.\n\n476\n00:25:39.150 --> 00:25:41.490\nSo you can pinpoint that\na little bit better,\n\n477\n00:25:41.490 --> 00:25:43.860\nmake your data show up\nthe way that you want to.\n\n478\n00:25:43.860 --> 00:25:48.370\nSo, as far as basic grouping goes and\nbasic aggregation, right.\n\n479\n00:25:48.370 --> 00:25:53.280\nWhen we start taking a look at\ninformation in this way, okay, doing\n\n480\n00:25:53.280 --> 00:25:58.280\nthe simple grouping that we've talked\nabout right here at the beginning, right?\n\n481\n00:25:58.280 --> 00:26:01.730\nBeing able to use something like average,\ncount, minimum, maximum,\n\n482\n00:26:01.730 --> 00:26:05.480\nsum inside of our select\nstatements works very well but\n\n483\n00:26:05.480 --> 00:26:09.540\nwhen we do that we gotta make sure that\nwe also have the group by clause in here.\n\n484\n00:26:09.540 --> 00:26:13.750\nAnd anything else in that\nselect statement that is not\n\n485\n00:26:13.750 --> 00:26:18.850\nactually part of an aggregation then needs\nto also be down here in the group by.\n\n486\n00:26:18.850 --> 00:26:21.740\nThen, we also showed you\nsome of the different ways\n\n487\n00:26:21.740 --> 00:26:24.990\nthat we can group the data\ntogether by using grouping sets.\n\n488\n00:26:24.990 --> 00:26:27.300\nThe idea of the cube, the roll up and\n\n489\n00:26:27.300 --> 00:26:29.890\nof course the grouping\nwith the roll up as well.\n\n490\n00:26:29.890 --> 00:26:34.710\nThat shows you different combinations of\nhow you can aggregate the data together\n\n491\n00:26:34.710 --> 00:26:40.280\nas well being able to do all of those main\nfunctions that we have available to us.\n\n492\n00:26:40.280 --> 00:26:44.310\nIs really going to be helpful\nin terms of the aggregation.\n\n493\n00:26:44.310 --> 00:26:48.170\nSo there's a lot of information\njust right here, and\n\n494\n00:26:48.170 --> 00:26:51.440\nthat is just helping us right,\nbecause that's what's gonna happen\n\n495\n00:26:51.440 --> 00:26:54.800\nis your data is not really\neven an individual customer,\n\n496\n00:26:54.800 --> 00:26:58.964\nyou can group even individual customers\ntogether if you want to by month,\n\n497\n00:26:58.964 --> 00:27:05.060\nthen by year or by whatever product if you\nwant to, but just kind of realize grouping\n\n498\n00:27:05.060 --> 00:27:08.170\nis probably one of the main things that\nyou'll end up doing, especially if you're\n\n499\n00:27:08.170 --> 00:27:12.450\ngoing to be doing some type of\nreport writing from your database.\n\n500\n00:27:12.450 --> 00:27:15.410\nGrouping is one of the most essential\nelements you can do and here\n\n501\n00:27:15.410 --> 00:27:19.430\nwe've showed you some of the different\nways in which the aggregation works.\n\n502\n00:27:19.430 --> 00:27:20.120\n>> All right, Ronnie.\n\n503\n00:27:20.120 --> 00:27:22.880\nWell, obviously grouping is\nsomething that we want to know and\n\n504\n00:27:22.880 --> 00:27:26.790\nyou've done an admirable job of\nshowing us and explaining and\n\n505\n00:27:26.790 --> 00:27:30.410\neven demonstrating this key function for\nus inside of our sequel queries.\n\n506\n00:27:30.410 --> 00:27:33.480\nThat being said I know\nyou have much more right?\n\n507\n00:27:33.480 --> 00:27:35.080\nThis is an onion.\n\n508\n00:27:35.080 --> 00:27:39.510\nThere are many layers to it and we have\nonly really gotten through the first few.\n\n509\n00:27:39.510 --> 00:27:43.440\nBut our clock isn't really allowing for\nthat at this point in time.\n\n510\n00:27:43.440 --> 00:27:45.020\nLooks like we got a part\ntwo in our future.\n\n511\n00:27:45.020 --> 00:27:46.880\nWe do thank you for dropping by.\n\n512\n00:27:46.880 --> 00:27:48.013\nWe thank you guys for watching.\n\n513\n00:27:48.013 --> 00:27:49.569\nHopefully we'll see you in part two.\n\n514\n00:27:49.569 --> 00:27:52.030\nUntil then signing off for ITProTV.\n\n515\n00:27:52.030 --> 00:27:53.168\nI've been your host Daniel Lowrie.\n\n516\n00:27:53.168 --> 00:27:54.282\n>> And I'm Ronnie Wong.\n\n517\n00:27:54.282 --> 00:27:55.885\n>> We'll see you next time.\n\n518\n00:27:55.885 --> 00:28:01.922\n[MUSIC]\n\n",
          "vimeoId": "164050222"
        },
        {
          "description": "In this episode, Daniel and Ronnie continue their discussion on aggregate queries, picking up by looking at the use of the RANK() function, which assigns a value to data for sorting purposes. They also show you how to add row numbers and even grouping data by percentile using the NTILE() function.",
          "length": "1924",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_quaries_pt2-042216-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_quaries_pt2-042216-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_quaries_pt2-042216-1-sm.jpg",
          "title": "Implement Aggregate Queries Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.076 --> 00:00:16.520\nAll right, greetings everyone and welcome\nto another great episode of ITPRO.tv.\n\n3\n00:00:16.520 --> 00:00:20.360\nI'm your host Daniel Lowrie, and in\ntoday's episode we are continuing on with\n\n4\n00:00:20.360 --> 00:00:24.840\nour series On querying\nthe Microsoft SQL server, version 2014.\n\n5\n00:00:24.840 --> 00:00:28.000\nComing back in the studio to help\nus out with that endeavor, and\n\n6\n00:00:28.000 --> 00:00:31.030\nlend his expertise,\nis our good friend, Mr. Ronny Wong.\n\n7\n00:00:31.030 --> 00:00:32.100\nRonny, welcome back to the show, sir.\n\n8\n00:00:32.100 --> 00:00:32.860\nHow's it going today?\n\n9\n00:00:32.860 --> 00:00:37.470\n>> It's going well today as we continue\non with the course, SQL server 2014.\n\n10\n00:00:37.470 --> 00:00:41.690\nWe're actually in a part two of\nour idea here of being able to do\n\n11\n00:00:41.690 --> 00:00:43.830\naggregated types of queries.\n\n12\n00:00:43.830 --> 00:00:47.180\nWhat we took a look at before was\nthe idea of what an aggregate was,\n\n13\n00:00:47.180 --> 00:00:48.980\nwhich was such a grouping.\n\n14\n00:00:48.980 --> 00:00:53.625\nAnd we also took a look at grouping\nsets and cubes and rollups,\n\n15\n00:00:53.625 --> 00:00:55.960\nand grouping with rollups, you name it.\n\n16\n00:00:55.960 --> 00:00:58.550\nWe actually took a look at\nall those different functions\n\n17\n00:00:58.550 --> 00:01:01.310\nthat you may have actually run into,\nyou may not have.\n\n18\n00:01:01.310 --> 00:01:04.450\nAnd of course using\nthe group byclause itself.\n\n19\n00:01:04.450 --> 00:01:07.020\nWell, today we're taking\na look at this idea of\n\n20\n00:01:07.020 --> 00:01:10.620\naggregation from a little bit\nmore of an unusual standpoint.\n\n21\n00:01:10.620 --> 00:01:13.150\nThat does fall underneath\nthe idea of aggregation,\n\n22\n00:01:13.150 --> 00:01:16.660\nwhich is talking about\nranking of our data as well.\n\n23\n00:01:16.660 --> 00:01:20.170\nNow when you think about it, why in\nthe world does ranking actually help?\n\n24\n00:01:20.170 --> 00:01:23.860\nBecause sometimes you do have things in\nwhich you rank, and that essentially kind\n\n25\n00:01:23.860 --> 00:01:28.480\nof becomes a sequential type of grouping\nthat you may end up using as well.\n\n26\n00:01:28.480 --> 00:01:32.870\nNow the unusual thing, of course,\nin SQL Server 2014, and actually in all\n\n27\n00:01:32.870 --> 00:01:38.090\nthe SQL Servers, is the way that ranking\nactually ends up working sometimes.\n\n28\n00:01:38.090 --> 00:01:41.590\nAnd so, we need to take a look and\nsee which one of the different functions,\n\n29\n00:01:41.590 --> 00:01:44.800\ncuz there's several of them that\nwe actually need to talk about.\n\n30\n00:01:44.800 --> 00:01:48.590\nWhich one you may choose to use\ndepending on what your situation is.\n\n31\n00:01:48.590 --> 00:01:52.430\nAnd so that's what we wanna do, is we\nwanna take a look at the idea of ranking.\n\n32\n00:01:52.430 --> 00:01:55.960\nAnd then of course take the idea\nhere to kind of help us out and\n\n33\n00:01:55.960 --> 00:01:59.720\nsee which one of these functions\nis gonna do what we need it do.\n\n34\n00:01:59.720 --> 00:02:01.460\nNow the easiest way to start of course,\n\n35\n00:02:01.460 --> 00:02:06.440\nis just by doing a little bit of a review\nof some of the things that go on\n\n36\n00:02:06.440 --> 00:02:08.890\nas far as the way that things\nget entered into a database.\n\n37\n00:02:08.890 --> 00:02:10.310\nAnd what we're hoping to see.\n\n38\n00:02:10.310 --> 00:02:12.120\nSo let's take a look at my machine.\n\n39\n00:02:12.120 --> 00:02:17.170\nAnd I've got a little graphic up here and\neverybody here at IT Pro TV is gonna\n\n40\n00:02:17.170 --> 00:02:20.900\nhave to forgive me cuz I do not remember\nthe years that we were essentially hired.\n\n41\n00:02:20.900 --> 00:02:24.870\nNow Don is a founding member of the\ncompany and I just kind of made this up as\n\n42\n00:02:24.870 --> 00:02:27.995\nI go along so\nif I got them out of order well I'm sorry.\n\n43\n00:02:27.995 --> 00:02:29.510\n>> [LAUGH]\n>> Except everybody else that's watching\n\n44\n00:02:29.510 --> 00:02:34.580\nthis but let's take a look at this\nparticular order that you see right here.\n\n45\n00:02:34.580 --> 00:02:36.510\nNow Daniel,\nI'm gonna put you on the spot here.\n\n46\n00:02:36.510 --> 00:02:40.590\nDo you see any particular order in\nthe way that these things are listed\n\n47\n00:02:40.590 --> 00:02:41.380\nout right here?\n\n48\n00:02:41.380 --> 00:02:43.830\n>> There is no particular\norder in which I can discern.\n\n49\n00:02:43.830 --> 00:02:46.280\n>> Yeah, no.\nIf there's any discernible order, right,\n\n50\n00:02:46.280 --> 00:02:50.340\nit might be by the last name and\nthe alphabez, however you-\n\n51\n00:02:50.340 --> 00:02:51.150\n>> Alphabetization.\n\n52\n00:02:51.150 --> 00:02:52.700\n>> Yeah, you say that six times.\n\n53\n00:02:52.700 --> 00:02:54.310\nNo, don't do that, I'm joking.\n\n54\n00:02:54.310 --> 00:02:58.740\nBut, yeah, it's actually ascending,\nright, from lowest to highest here.\n\n55\n00:02:58.740 --> 00:03:02.020\nBryan, Lowrie, Pizet, Rodrick, and Wong.\n\n56\n00:03:02.020 --> 00:03:03.240\nBut the other orders,\n\n57\n00:03:03.240 --> 00:03:07.330\nas far as like this number over here,\nit doesn't seem to make any sense.\n\n58\n00:03:07.330 --> 00:03:11.510\nAnd a lot of times inside of our database,\nand the way that data is stored, right?\n\n59\n00:03:11.510 --> 00:03:14.250\nIs stored in what we call a natural order,\nokay.\n\n60\n00:03:14.250 --> 00:03:16.390\nNow that doesn't have to do\nanything with ranking, but\n\n61\n00:03:16.390 --> 00:03:19.440\nit's stored how ever usually\nthe data was entered in there.\n\n62\n00:03:19.440 --> 00:03:23.040\nYou know, beginning row one\nis usually the oldest one.\n\n63\n00:03:23.040 --> 00:03:27.140\nEven though the actual numbers or the\nascending or descending, the sorting and\n\n64\n00:03:27.140 --> 00:03:30.176\nall that stuff doesn't\nreally tend to matter.\n\n65\n00:03:30.176 --> 00:03:34.280\nBut there's some times you do want\nto change these things around and\n\n66\n00:03:34.280 --> 00:03:36.670\nprovide what we call a rank to them.\n\n67\n00:03:36.670 --> 00:03:40.470\nTo help you out, to figure out\nwhat's actually going on here, okay.\n\n68\n00:03:40.470 --> 00:03:42.050\nSo the way that we can do so\n\n69\n00:03:42.050 --> 00:03:46.580\nis that we can actually provide what we\ncall a ranking function to help us out.\n\n70\n00:03:46.580 --> 00:03:49.310\nNow, the first one that I want\nto actually talk about here\n\n71\n00:03:49.310 --> 00:03:53.190\nis I'm going to ask you to rank\nthis by higher year instead.\n\n72\n00:03:53.190 --> 00:03:57.230\nNow that's not exactly\na very substantial ranking.\n\n73\n00:03:57.230 --> 00:03:59.930\nBut it is something that\ncan end up happening.\n\n74\n00:03:59.930 --> 00:04:01.110\nAnd when I do that and\n\n75\n00:04:01.110 --> 00:04:05.000\nI rearrange these, now notice\nover here on the left-hand side.\n\n76\n00:04:05.000 --> 00:04:08.150\nI've taken the actual year,\nover on this column and\n\n77\n00:04:08.150 --> 00:04:11.690\nI've actually listed them in this order,\ntoo.\n\n78\n00:04:11.690 --> 00:04:14.590\nNow, when you come down to\nnumber three and number four,\n\n79\n00:04:14.590 --> 00:04:20.120\nbecause I didn't actually split it down\nto lets say the month, and even the date.\n\n80\n00:04:20.120 --> 00:04:23.550\nThey essentially are just here and\nI can't really even tell you which\n\n81\n00:04:23.550 --> 00:04:27.060\norder they are in and\nwe just check by higher year.\n\n82\n00:04:27.060 --> 00:04:29.850\nBut notice over here on\nthe right hand side,\n\n83\n00:04:29.850 --> 00:04:33.980\nthis is essentially what sequel\nserver will do for us if we do this.\n\n84\n00:04:33.980 --> 00:04:38.170\nIs it will automatically assign a rank and\nof course the first or\n\n85\n00:04:38.170 --> 00:04:41.340\nthe highest rank for us will actually be\na one if you want to call it lowest rank\n\n86\n00:04:41.340 --> 00:04:44.890\nthat's fine but the lowest number\nright here will actually be a one.\n\n87\n00:04:44.890 --> 00:04:49.700\nAnd then notice I count to a two and\nnow with both Mike and\n\n88\n00:04:49.700 --> 00:04:54.990\nDaniel actually being higher let's\nsay in 2014 there's a three and\n\n89\n00:04:54.990 --> 00:05:00.510\na three And then, Wes Bryan is a number 5.\n\n90\n00:05:00.510 --> 00:05:04.880\nNow, if we take a look at\nthis information right here,\n\n91\n00:05:04.880 --> 00:05:07.730\nhopefully what you're actually seeing\nis that there's a missing number.\n\n92\n00:05:07.730 --> 00:05:11.550\nNow Daniel, even you and I with our\nlimited math skills availability.\n\n93\n00:05:13.740 --> 00:05:14.595\nWhat number is missing?\n\n94\n00:05:14.595 --> 00:05:16.409\n[LAUGH]\n>> 3.2.\n\n95\n00:05:16.409 --> 00:05:20.860\n[LAUGH]\n>> 3.2, yeah, that is a missing number.\n\n96\n00:05:20.860 --> 00:05:21.710\nYou are correct.\n\n97\n00:05:21.710 --> 00:05:22.830\n>> Whole number, right?\n\n98\n00:05:22.830 --> 00:05:25.890\n>> Yeah.\nHopefully it's just four so\n\n99\n00:05:25.890 --> 00:05:28.250\nmaybe you guys should\nexclude Daniel from that set.\n\n100\n00:05:28.250 --> 00:05:31.290\nNow and overall, it is the number four.\n\n101\n00:05:31.290 --> 00:05:35.030\nThis is what the ranking function\ndown inside of sequel okay.\n\n102\n00:05:35.030 --> 00:05:37.460\nSo whenever we have\nsomething like this and\n\n103\n00:05:37.460 --> 00:05:42.740\nwe start seeing it, this is why the rank\nfunction can be a little bit confusing.\n\n104\n00:05:42.740 --> 00:05:47.690\nIs that it will count everything in the\nsame rank, but it will skip numbers that\n\n105\n00:05:47.690 --> 00:05:52.630\nit says, look, there is a number 4 here,\nbut it's not either one of these two.\n\n106\n00:05:52.630 --> 00:05:56.950\nThese two are 3 But then it actually\njust goes on and it skips numbers, and\n\n107\n00:05:56.950 --> 00:05:58.310\nit goes to five.\n\n108\n00:05:58.310 --> 00:05:59.220\nSo that's a little bit strange.\n\n109\n00:05:59.220 --> 00:06:01.980\nLet me show you in reality\nhow that ends up working.\n\n110\n00:06:01.980 --> 00:06:06.930\nSo here on the SQL server, I've got a,\nhopefully I have a rank function.\n\n111\n00:06:06.930 --> 00:06:09.460\nYep, this is the one that\nwe're actually gonna use here.\n\n112\n00:06:09.460 --> 00:06:13.250\nAnd let's take a look at it just\nbriefly so that we can see this.\n\n113\n00:06:13.250 --> 00:06:16.180\nSo what I've done here is\njust by using rank and\n\n114\n00:06:16.180 --> 00:06:19.180\nthe way that this is setup is\nwe do this in the select claw.\n\n115\n00:06:19.180 --> 00:06:22.160\nSo notice I've selected first name and\nlast name here.\n\n116\n00:06:22.160 --> 00:06:24.950\nOops I didn't put this in\nthe order that I normally do.\n\n117\n00:06:26.050 --> 00:06:27.780\nSo first name and last name,\n\n118\n00:06:27.780 --> 00:06:31.470\nand notice on the third row\nhere I used the rank function.\n\n119\n00:06:31.470 --> 00:06:36.460\nAnd rank always has to be accompanied\nby the word over as well okay.\n\n120\n00:06:36.460 --> 00:06:43.180\nSo I do a rank and a set of parentheses\nover and then over is also a function.\n\n121\n00:06:43.180 --> 00:06:46.380\nSo both of those always have to\nactually go together make sure you\n\n122\n00:06:46.380 --> 00:06:49.560\nnever actually just type in\nrank without over over here.\n\n123\n00:06:49.560 --> 00:06:52.400\nAnd then order by and\nhere is the Postal Code.\n\n124\n00:06:52.400 --> 00:06:54.840\nAnd I want that to be\nactually reported by rank.\n\n125\n00:06:54.840 --> 00:06:57.390\nSo what I'm saying is rank this\nthing by the postal code is what I'm\n\n126\n00:06:57.390 --> 00:06:58.480\nactually telling it.\n\n127\n00:06:58.480 --> 00:06:59.860\nAnd then report that out.\n\n128\n00:06:59.860 --> 00:07:04.160\nThe rest of this is just an inner\njoin is what we have available to us.\n\n129\n00:07:04.160 --> 00:07:10.030\nSo now if I select that, and I run\nthe results of it, let me press F5 And\n\n130\n00:07:10.030 --> 00:07:13.300\nthen I'll see if I can pull this up so\nwe can see it.\n\n131\n00:07:13.300 --> 00:07:15.810\nNow as we take a look at the results and\n\n132\n00:07:15.810 --> 00:07:19.280\nthe options we have available here,\nit doesn't make sense but\n\n133\n00:07:19.280 --> 00:07:22.650\nit actually just kind of did\nexactly what I wanted it to do.\n\n134\n00:07:22.650 --> 00:07:25.750\nWhich is, even though I have all\nof these employees ranked here,\n\n135\n00:07:25.750 --> 00:07:28.100\nI have them ranked by the postal code.\n\n136\n00:07:28.100 --> 00:07:30.290\nAnd the lowest number first.\n\n137\n00:07:30.290 --> 00:07:35.600\nWell notice that the first seven okay\nare actually ranked as being well one,\n\n138\n00:07:35.600 --> 00:07:36.820\nbecause they all come from what?\n\n139\n00:07:36.820 --> 00:07:39.070\nThe lowest postal code which is 98027.\n\n140\n00:07:39.070 --> 00:07:39.950\nOkay?\n\n141\n00:07:39.950 --> 00:07:45.510\nBut you would think the that\nsecond rank would be what?\n\n142\n00:07:45.510 --> 00:07:46.500\nA two.\n\n143\n00:07:46.500 --> 00:07:47.670\nThat's what I would think.\n\n144\n00:07:47.670 --> 00:07:48.660\n>> Seems logical.\n\n145\n00:07:48.660 --> 00:07:51.202\n>> It does seem logical,\nexcept in SQL server.\n\n146\n00:07:51.202 --> 00:07:53.794\n>> [LAUGH]\n>> [LAUGH] In SQL server when you use\n\n147\n00:07:53.794 --> 00:07:59.186\nthe rank function, it says I'm actually\nkeeping track of the rank here But\n\n148\n00:07:59.186 --> 00:08:03.810\nthe first seven places\nare actually all equal in rank.\n\n149\n00:08:03.810 --> 00:08:07.230\nAnd so, the next one that\nactually can be ranked then\n\n150\n00:08:07.230 --> 00:08:10.270\nis the eighth place that's there.\n\n151\n00:08:10.270 --> 00:08:11.272\nSo, it just skips.\n\n152\n00:08:11.272 --> 00:08:13.650\nIt doesn't actually do\na sequential ranking.\n\n153\n00:08:13.650 --> 00:08:15.920\nIt just says all of\nthe first seven are what?\n\n154\n00:08:15.920 --> 00:08:17.660\nAre actually equal to one.\n\n155\n00:08:18.720 --> 00:08:22.650\nAnd then the next available\nranking then would be eight, okay?\n\n156\n00:08:22.650 --> 00:08:25.950\nSo, it doesn't make sense to you and\nI, as far as the way that you and\n\n157\n00:08:25.950 --> 00:08:27.810\nI would think about ranking.\n\n158\n00:08:27.810 --> 00:08:30.310\nAnd that's why you have\nto pay attention here.\n\n159\n00:08:30.310 --> 00:08:33.050\nBecause if you think about it,\nright, let's just say,\n\n160\n00:08:33.050 --> 00:08:37.120\nin just real life, this would kind\nof throw us off just for a moment.\n\n161\n00:08:37.120 --> 00:08:42.770\nI told it to give me a ranking, but\nwhy am I actually getting a one and\n\n162\n00:08:42.770 --> 00:08:46.090\nan eight and not a one and a two,\nand then a three and a four?\n\n163\n00:08:46.090 --> 00:08:49.010\nAnd that's because you chose\nto use the rank function.\n\n164\n00:08:49.010 --> 00:08:52.480\nWell, now you can imagine then, Dan, and\nI'm hoping Daniel can imagine this, too.\n\n165\n00:08:53.780 --> 00:08:58.320\nDaniel, on an exam question, do you think\nthat this could possibly throw us off?\n\n166\n00:08:58.320 --> 00:08:59.210\n>> It very well may.\n\n167\n00:08:59.210 --> 00:09:00.410\nAnd it very well will.\n\n168\n00:09:00.410 --> 00:09:04.340\nAnd I'm sure that they will ask you\na question along these lines because it\n\n169\n00:09:04.340 --> 00:09:04.870\nis tricky.\n\n170\n00:09:04.870 --> 00:09:06.680\nAnd if you're able to answer it,\n\n171\n00:09:06.680 --> 00:09:09.491\nit betrays the fact that you\nactually understand the material.\n\n172\n00:09:09.491 --> 00:09:10.114\n[LAUGH]\n>> Yeah, and\n\n173\n00:09:10.114 --> 00:09:11.127\nthat's what we want to do, right?\n\n174\n00:09:11.127 --> 00:09:13.580\nWe want to make sure that we\nunderstand what's happening here.\n\n175\n00:09:13.580 --> 00:09:17.112\nSo when we use that particular\nfunction itself, and\n\n176\n00:09:17.112 --> 00:09:22.102\nwe're expecting one particular result,\nwhich is the 1, 2, 3, 4.\n\n177\n00:09:22.102 --> 00:09:26.202\nAnd instead, we're getting these numbers\nskipped in between, it might be,\n\n178\n00:09:26.202 --> 00:09:28.004\nI'm not gonna say might any more,\n\n179\n00:09:28.004 --> 00:09:32.060\nit absolutely is gonna be because\nyou chose to use that rank function.\n\n180\n00:09:32.060 --> 00:09:35.980\nNow, you and I would go, no,\nrank should make sense, it should do that.\n\n181\n00:09:35.980 --> 00:09:37.360\nYes, it should.\n\n182\n00:09:37.360 --> 00:09:41.400\nBut according to the way that SQL does it,\nthey're saying they're logically right.\n\n183\n00:09:41.400 --> 00:09:45.650\nThe first seven places are all ranked\nnumber one, and you don't actually replace\n\n184\n00:09:45.650 --> 00:09:49.200\nthose values, you just go ahead and say\nwhat the next available ranking would be,\n\n185\n00:09:49.200 --> 00:09:52.470\nwhich is number eight at that point, and\nthat's just the way that they do it.\n\n186\n00:09:52.470 --> 00:09:54.670\n>> Do they give no explanation for this?\n\n187\n00:09:54.670 --> 00:09:59.320\n>> Well, they do, because of the way that\nit actually ends up working out for them.\n\n188\n00:09:59.320 --> 00:10:02.230\nSo, they're logically counting those rows,\nright?\n\n189\n00:10:02.230 --> 00:10:05.810\nAnd they're saying, look,\nyou can't automatically assign\n\n190\n00:10:05.810 --> 00:10:08.280\nan arbitrary ranking number\nto the eighth place.\n\n191\n00:10:09.440 --> 00:10:10.870\nOr fourth place.\n\n192\n00:10:10.870 --> 00:10:13.230\nAt least according to the way\nthat SQL works, right?\n\n193\n00:10:13.230 --> 00:10:16.520\nThey have to have some value system,\nsomething that's actually saying, look,\n\n194\n00:10:16.520 --> 00:10:19.320\nalways has to work in this particular way.\n\n195\n00:10:19.320 --> 00:10:24.190\nBut let's hold on to that thought for\na moment because there's always people\n\n196\n00:10:24.190 --> 00:10:28.380\nlike you and me that say, no, it should\nwork the way that we want it to work.\n\n197\n00:10:28.380 --> 00:10:33.145\n>> The way human brains work that\nsays here is the logic to this.\n\n198\n00:10:33.145 --> 00:10:33.850\n[LAUGH]\n>> Yes.\n\n199\n00:10:33.850 --> 00:10:38.180\n>> Cuz without that missing or\nreasoning, it just looks arbitrary.\n\n200\n00:10:38.180 --> 00:10:40.660\nIt just looks like it's saying,\nwell, [INAUDIBLE], I like one,\n\n201\n00:10:40.660 --> 00:10:42.060\nand I'm gonna label these one.\n\n202\n00:10:42.060 --> 00:10:44.300\nAnd now I like eight, so here we go.\n\n203\n00:10:44.300 --> 00:10:46.470\nAnd that's what's,\nthat's the disconnect, I think.\n\n204\n00:10:46.470 --> 00:10:48.792\n>> Yeah, it is,\ncuz to computer logic it makes sense.\n\n205\n00:10:48.792 --> 00:10:51.140\nBut, yes, to human logic,\nwe're like no, that's arbitrary.\n\n206\n00:10:51.140 --> 00:10:52.750\nThat's the way that it looks.\n\n207\n00:10:52.750 --> 00:10:54.190\nSo, of course, there's what?\n\n208\n00:10:54.190 --> 00:10:57.010\nThere is a function that helps\nus to do what we want it to do.\n\n209\n00:10:57.010 --> 00:10:58.758\nAt least, I think it's what we wanna do.\n\n210\n00:10:58.758 --> 00:10:59.810\nWell see here.\n\n211\n00:10:59.810 --> 00:11:02.040\nSo let me go ahead and\nshow you a same thing.\n\n212\n00:11:02.040 --> 00:11:05.750\nSo, here's the ranking that we had,\nremember the missing number here is four.\n\n213\n00:11:05.750 --> 00:11:11.430\nIf I use another function,\nthough, called DENSE_RANK, okay?\n\n214\n00:11:11.430 --> 00:11:14.450\nNow, in this one,\nnotice again, I went ahead and\n\n215\n00:11:14.450 --> 00:11:18.290\nI sorted it lowest to\nhighest number again.\n\n216\n00:11:18.290 --> 00:11:21.319\nBut this time,\nif I run this as a DENSE_RANK function,\n\n217\n00:11:21.319 --> 00:11:24.200\ndense underscore rank, I should say.\n\n218\n00:11:24.200 --> 00:11:27.970\nNow notice the numbers here\non the right hand side.\n\n219\n00:11:27.970 --> 00:11:31.290\nOne, two, three And then four.\n\n220\n00:11:31.290 --> 00:11:33.460\nNow, I have five entries, okay?\n\n221\n00:11:33.460 --> 00:11:35.010\nI have five entries.\n\n222\n00:11:35.010 --> 00:11:38.880\nBut this is what I was actually\nexpecting to see when I ran rank, okay?\n\n223\n00:11:38.880 --> 00:11:40.010\nIs that, this one says, no.\n\n224\n00:11:40.010 --> 00:11:42.476\nThis is what you normally\nare expecting to see here.\n\n225\n00:11:42.476 --> 00:11:44.596\nThere is a one, there is a second, and\n\n226\n00:11:44.596 --> 00:11:47.640\nthese two are what equal\nin their third rank.\n\n227\n00:11:47.640 --> 00:11:52.170\nAnd then, we automatically go\nto the fourth one here instead,\n\n228\n00:11:52.170 --> 00:11:53.920\neven though this is the fifth value.\n\n229\n00:11:53.920 --> 00:11:58.746\nSo, according that's not the logic I like,\nbut if you need to see it that way,\n\n230\n00:11:58.746 --> 00:12:02.319\nwe can use what we call DENSE_RANK and\nactually combine that and\n\n231\n00:12:02.319 --> 00:12:05.690\nmake it work the way that\nyou're expecting to see it.\n\n232\n00:12:05.690 --> 00:12:07.510\nSo this one looks a little more logical,\nright?\n\n233\n00:12:07.510 --> 00:12:08.030\n>> Yes.\n\n234\n00:12:08.030 --> 00:12:08.610\n>> Yeah.\n\n235\n00:12:08.610 --> 00:12:13.240\nSo, in being able to do something\nlike this and providing that idea\n\n236\n00:12:13.240 --> 00:12:17.590\nof this dense rank, it may show us\nthe result that we're looking for,\n\n237\n00:12:17.590 --> 00:12:21.880\ninstead of what we're gonna see\nby the rank function itself.\n\n238\n00:12:21.880 --> 00:12:25.970\nSo, let me go ahead and\nscroll on over to my SQL sever.\n\n239\n00:12:27.150 --> 00:12:28.720\nAnd I had another one here by rank.\n\n240\n00:12:28.720 --> 00:12:31.040\nI will kinda skip over that one right now.\n\n241\n00:12:31.040 --> 00:12:34.436\nAnd now, we'll take a look at\nthe idea of dense rank instead.\n\n242\n00:12:34.436 --> 00:12:37.060\nNow, I'm gonna use the same example\nbecause we already started with\n\n243\n00:12:37.060 --> 00:12:40.310\nthe postal code here, so it actually\nmakes sense that we see this, right?\n\n244\n00:12:40.310 --> 00:12:44.860\nWe originally saw seven ones in a row,\nand then eight.\n\n245\n00:12:44.860 --> 00:12:46.670\nI was trying to remember\nwhat numbers were.\n\n246\n00:12:46.670 --> 00:12:49.530\nI should be able to, but\nsometimes it does get me here.\n\n247\n00:12:49.530 --> 00:12:55.410\nAnd so now, we're actually going to\nsee this one by using the Dense Rank.\n\n248\n00:12:55.410 --> 00:13:01.720\nNow, notice again, Dense_Rank, its set\nof parenthesis and the over function.\n\n249\n00:13:01.720 --> 00:13:03.960\nThose always have to go hand in hand.\n\n250\n00:13:03.960 --> 00:13:06.970\nYou do not just see DENSE_RANK() and\nthen as Dense Rank.\n\n251\n00:13:06.970 --> 00:13:09.490\nYou actually have to have\nthe over in that function, and\n\n252\n00:13:09.490 --> 00:13:13.270\nyou're actually saying this is what\nI want it to actually rank as.\n\n253\n00:13:13.270 --> 00:13:16.890\nAnd that will become your particular\nranking system when you do this.\n\n254\n00:13:16.890 --> 00:13:20.030\nSo here it is picking out\nthose particular columns,\n\n255\n00:13:20.030 --> 00:13:22.990\nmaking sure I have\nthe proper joins in between.\n\n256\n00:13:22.990 --> 00:13:27.003\nThe only filter that I had on both of\nthese, and I didn't actually scroll down\n\n257\n00:13:27.003 --> 00:13:30.950\nso that we could see on the last one, so\nI'll show you this one here, is that I\n\n258\n00:13:30.950 --> 00:13:35.332\nwanted to make sure that on this one, even\nthough I don't use the sales year to date,\n\n259\n00:13:35.332 --> 00:13:39.640\nI wanted to make sure I didn't count\nany of them that had what a zero, okay?\n\n260\n00:13:39.640 --> 00:13:43.130\nSo I wanted to make sure that is not null.\n\n261\n00:13:43.130 --> 00:13:48.040\nSo, it didn't count anyone that had\na sales here that had a null value, and it\n\n262\n00:13:48.040 --> 00:13:53.070\ndidn't count anything that had a year to\ndate that was actually not equal to zero.\n\n263\n00:13:56.830 --> 00:13:58.130\nYeah, not equal.\nNot exactly, or whatever.\n\n264\n00:13:58.130 --> 00:14:00.713\nSo, maybe that last one\nis a little unusual.\n\n265\n00:14:00.713 --> 00:14:01.978\n>> [LAUGH]\n>> I'm trying to\n\n266\n00:14:01.978 --> 00:14:04.012\nremember what that actually function is.\n\n267\n00:14:04.012 --> 00:14:06.620\nI think that is a not equal to zero.\n\n268\n00:14:06.620 --> 00:14:08.450\nSo, yeah,\nactually that has to meet both conditions.\n\n269\n00:14:08.450 --> 00:14:11.140\nI'm trying to make sure that I'm saying\nit right cuz in my head I'm like,\n\n270\n00:14:11.140 --> 00:14:12.160\nthat's not right.\n\n271\n00:14:12.160 --> 00:14:15.650\nBut, yeah, so it has to meet both\nconditions before it's actually counted in\n\n272\n00:14:15.650 --> 00:14:18.845\nthis system here to do this.\n\n273\n00:14:18.845 --> 00:14:22.765\nSo, let me select the entire query here.\n\n274\n00:14:22.765 --> 00:14:24.625\n>> So it ends up being a logical and,\nright?\n\n275\n00:14:24.625 --> 00:14:25.572\n>> It is, yep.\n>> It has to be this and\n\n276\n00:14:25.572 --> 00:14:28.365\nthis before it's correct [CROSSTALK]\n>> And we're gonna get into the logical\n\n277\n00:14:28.365 --> 00:14:31.155\nstatements a little bit later on\nwith the and and the or operator.\n\n278\n00:14:31.155 --> 00:14:33.665\nBut for now, let's go ahead and run this.\n\n279\n00:14:33.665 --> 00:14:36.445\nNow, this time,\nnow let me see if I can pull that up so\n\n280\n00:14:36.445 --> 00:14:37.875\nwe can see a little bit more here.\n\n281\n00:14:37.875 --> 00:14:40.400\nAnd now, zoom in.\n\n282\n00:14:40.400 --> 00:14:43.590\nTrying to zoom in a little bit better.\n\n283\n00:14:43.590 --> 00:14:44.340\nOkay.\n\n284\n00:14:44.340 --> 00:14:45.710\nNow, let's take a look.\n\n285\n00:14:45.710 --> 00:14:47.480\nAnd this is what we were expecting.\n\n286\n00:14:47.480 --> 00:14:48.790\nDaniel, this is what you were expecting.\n\n287\n00:14:48.790 --> 00:14:52.080\n>> Yeah, that's a little more\nto my liking, should I say.\n\n288\n00:14:52.080 --> 00:14:53.870\nIt makes more sense to me, it's easier.\n\n289\n00:14:53.870 --> 00:14:56.950\nAgain, this is what we have been talking\nabout this entire series, is making\n\n290\n00:14:56.950 --> 00:15:01.490\nthe data when it's presented something\nthat I can consume as easily as possible.\n\n291\n00:15:01.490 --> 00:15:07.230\nAnd for me, that's a much easier\nrendition of our function than the first.\n\n292\n00:15:07.230 --> 00:15:08.000\n>> It really is.\n\n293\n00:15:08.000 --> 00:15:11.800\nIt allows us to be able to\nsee what we are expecting.\n\n294\n00:15:11.800 --> 00:15:15.800\nEven though, remember, the rank\nfunction makes sense to the SQL server\n\n295\n00:15:15.800 --> 00:15:17.090\nin the way that this it's doing, right?\n\n296\n00:15:17.090 --> 00:15:18.980\nIt's actually seeing all those rows, and\n\n297\n00:15:18.980 --> 00:15:23.500\nit's saying I can rank them all as being\nthe very first rank if we want to.\n\n298\n00:15:23.500 --> 00:15:26.640\nBut you have to account for\nthose other ones in between or\n\n299\n00:15:26.640 --> 00:15:30.530\nit doesn't make sense in the way\nthat the SQL sever counts up.\n\n300\n00:15:30.530 --> 00:15:31.160\nThis time,\n\n301\n00:15:31.160 --> 00:15:36.000\nthough, this one essentially is doing the\nexact same thing that ranking is doing.\n\n302\n00:15:36.000 --> 00:15:40.720\nBut it's actually telling it just to\nreport one plus whatever that rank\n\n303\n00:15:40.720 --> 00:15:42.670\npreviously was instead.\n\n304\n00:15:42.670 --> 00:15:45.709\nAnd it allows it to actually\ncount every individual one,\n\n305\n00:15:45.709 --> 00:15:47.622\nand it doesn't skip the sequence.\n\n306\n00:15:47.622 --> 00:15:51.268\nWhereas the first one seems arbitrary,\nbut inside of the logic of SQL says no,\n\n307\n00:15:51.268 --> 00:15:54.637\nit's not arbitrary, we're doing\nthe logic that needs to be done Here,\n\n308\n00:15:54.637 --> 00:15:58.671\nwe're actually taking the logic that needs\nto be done and saying, even though that's\n\n309\n00:15:58.671 --> 00:16:02.620\nsupposed to be number eight, these\nare actually going to be number two now.\n\n310\n00:16:02.620 --> 00:16:05.700\nAnd continue on down and\nthat should do the same thing.\n\n311\n00:16:05.700 --> 00:16:08.630\nAnd I'm sure that there's a good\nreasonable explanation for\n\n312\n00:16:08.630 --> 00:16:12.310\nit that's beyond my skills of\nactually explaining very well.\n\n313\n00:16:12.310 --> 00:16:13.530\nBut that's the idea.\n\n314\n00:16:13.530 --> 00:16:15.990\nIs that we can actually do stuff like this\n\n315\n00:16:15.990 --> 00:16:19.340\nthat will also help us to\ngenerate this thing out.\n\n316\n00:16:19.340 --> 00:16:22.350\nTo allow us to display information\nby rank if we want to.\n\n317\n00:16:22.350 --> 00:16:26.870\nNow most of the time remember that we made\nnot do it according to postal code here.\n\n318\n00:16:26.870 --> 00:16:30.870\nWe may end up doing this, of course,\nby sales and actually ranking in that way.\n\n319\n00:16:30.870 --> 00:16:34.200\nYou're probably saying well, Ryan,\nwhy didn't you just use sales?\"Well,\n\n320\n00:16:34.200 --> 00:16:38.240\nthey've got this thing listed\nout to the fourth decimal place.\n\n321\n00:16:38.240 --> 00:16:43.680\nThe very fact is that I wouldn't have any\nreal ranking as far as grouping goes,\n\n322\n00:16:43.680 --> 00:16:46.970\nand since we're talking about aggregates,\nI wanted to show grouping instead.\n\n323\n00:16:46.970 --> 00:16:49.440\nSo I said, ZIP codes-\n>> This was the better example.\n\n324\n00:16:49.440 --> 00:16:51.770\n>> I thought it was a better example.\n\n325\n00:16:51.770 --> 00:16:55.130\nBecause I started looking, and\nI started to do an example this way.\n\n326\n00:16:55.130 --> 00:16:57.320\nWhy am I not getting any grouping?\n\n327\n00:16:57.320 --> 00:16:57.840\nThat's right.\n\n328\n00:16:57.840 --> 00:16:59.580\nThose sales are never gonna match.\n\n329\n00:16:59.580 --> 00:17:02.090\nIt was down to the fourth decimal place.\n\n330\n00:17:02.090 --> 00:17:03.610\nThat's pretty hefty actually.\n\n331\n00:17:03.610 --> 00:17:08.380\nYou'd have to literally order exactly that\nsame thing from two different customers.\n\n332\n00:17:08.380 --> 00:17:11.390\nExactly to make the fourth\ndecimal place grouping.\n\n333\n00:17:11.390 --> 00:17:14.420\nSo that's why I chose\nthe zip code instead.\n\n334\n00:17:14.420 --> 00:17:16.300\nSo here we have two different ones.\n\n335\n00:17:16.300 --> 00:17:18.420\nNow this is key, right.\n\n336\n00:17:18.420 --> 00:17:22.710\nIt's key that you can differentiate\nbetween the rank function and\n\n337\n00:17:22.710 --> 00:17:24.770\nthe dense rank function.\n\n338\n00:17:24.770 --> 00:17:28.880\nIf you can't do that I would not sit for\nthe exam right away.\n\n339\n00:17:28.880 --> 00:17:33.450\nSo if you want to make sure, one of\nthe key elements right, is that you can\n\n340\n00:17:33.450 --> 00:17:36.700\ndifferentiate these things if you are to\nsee statement like the one that I wrote or\n\n341\n00:17:36.700 --> 00:17:37.760\nthe queries.\n\n342\n00:17:37.760 --> 00:17:40.910\nCuz I keep calling it a statement, each\none of those are actually statements for\n\n343\n00:17:40.910 --> 00:17:41.560\nclauses.\n\n344\n00:17:42.800 --> 00:17:45.740\nSo if you are to see something like these,\nokay, and\n\n345\n00:17:45.740 --> 00:17:47.770\nyou are to see again the idea of the rank.\n\n346\n00:17:47.770 --> 00:17:51.018\nAnd they would ask you which of these is\nactually gonna produce to you where it\n\n347\n00:17:51.018 --> 00:17:54.218\ndoesn't skip numbers or where you're\nactually going to skip numbers, or\n\n348\n00:17:54.218 --> 00:17:56.016\nI can't tell you what the questions are.\n\n349\n00:17:56.016 --> 00:17:58.860\n[LAUGH] I shouldn't tell\nyou what the questions are.\n\n350\n00:17:58.860 --> 00:17:59.517\n>> Ronnie writes the exam.\n>> [LAUGH]\n\n351\n00:17:59.517 --> 00:18:00.295\n>> [LAUGH] He doesn't know.\n\n352\n00:18:00.295 --> 00:18:02.898\n>> But yes, could you actually\nbe able to pull that out and\n\n353\n00:18:02.898 --> 00:18:05.080\nunderstand what the difference is?\n\n354\n00:18:05.080 --> 00:18:06.240\nWhen you're actually asked about it.\n\n355\n00:18:06.240 --> 00:18:09.820\nAnd that's what we're hoping to do is\nto show you that element right there.\n\n356\n00:18:09.820 --> 00:18:11.480\n>> All right, very cool stuff Ronnie.\n\n357\n00:18:11.480 --> 00:18:14.760\nWhat else do we have as far\nas aggregate functions?\n\n358\n00:18:14.760 --> 00:18:17.120\n>> Yeah,\nnow this one's actually a little bit more,\n\n359\n00:18:17.120 --> 00:18:21.660\nI don't wanna say unusual, but it's not so\nmuch as an aggregate as much as it\n\n360\n00:18:21.660 --> 00:18:26.250\nhelps us to make sure that everything is\ndistinctive in the way that we want to.\n\n361\n00:18:26.250 --> 00:18:30.360\nSo now let's go back to my\nsimple diagram to help us out.\n\n362\n00:18:30.360 --> 00:18:32.950\nSo using the very same thing we\nare actually going to talk about something\n\n363\n00:18:32.950 --> 00:18:34.840\nelse that we call row number.\n\n364\n00:18:34.840 --> 00:18:35.570\nOkay?\n\n365\n00:18:35.570 --> 00:18:40.830\nSo this can really help us when we suspect\nduplicates more than anything else.\n\n366\n00:18:40.830 --> 00:18:41.460\nOkay?\n\n367\n00:18:41.460 --> 00:18:45.535\nSo you are suspecting that there\nis a duplicate row somewhere and\n\n368\n00:18:45.535 --> 00:18:49.535\nis there a possibility a duplicate\nhappens in a database?\n\n369\n00:18:49.535 --> 00:18:53.320\nShouldn't be but for\none reason or another,\n\n370\n00:18:53.320 --> 00:18:58.120\nyou know here it is you have what\nyou've queried and like five or six\n\n371\n00:18:58.120 --> 00:19:03.840\ncolumns they look exactly duplicated and\nyou go if think this is a duplicate here.\n\n372\n00:19:03.840 --> 00:19:06.610\nYou can actually use Row_Number\nthat will help you to enumerate\n\n373\n00:19:06.610 --> 00:19:08.690\neach of those row numbers\nto individualize.\n\n374\n00:19:08.690 --> 00:19:10.330\nNow notice this one.\n\n375\n00:19:10.330 --> 00:19:14.670\nThis one actually does present to us that\nsame information we've been looking at,\n\n376\n00:19:14.670 --> 00:19:18.060\nbut now notice each one is actually,\nwell 1 through 5, okay?\n\n377\n00:19:18.060 --> 00:19:19.000\nMakes sense.\n\n378\n00:19:19.000 --> 00:19:22.810\nI have five over here on the left-hand\nside Let me go ahead and\n\n379\n00:19:22.810 --> 00:19:25.350\nenumerate these into this order.\n\n380\n00:19:25.350 --> 00:19:30.740\nSo this is what is going to be able to\nhelp us to do with our database as well.\n\n381\n00:19:30.740 --> 00:19:32.460\nBy using that Row Number,\n\n382\n00:19:32.460 --> 00:19:36.530\nwe are going to be able to distinguish\nevery single row as being nice and unique.\n\n383\n00:19:36.530 --> 00:19:40.030\nLet's see it work inside\nof our SQL server.\n\n384\n00:19:40.030 --> 00:19:42.250\nWell, maybe,\nif I can actually scroll on over to it.\n\n385\n00:19:42.250 --> 00:19:42.750\nThere we go.\n\n386\n00:19:43.780 --> 00:19:50.900\nSo apparently my ability to actually\nuse the computer is now going down.\n\n387\n00:19:50.900 --> 00:19:53.700\nNow, notice once again,\nlet's take a look at the syntax.\n\n388\n00:19:53.700 --> 00:19:56.520\nI want to drive this home because if not,\nwe're going to mistake this.\n\n389\n00:19:57.600 --> 00:20:00.030\nSame thing- Another function, right?\n\n390\n00:20:00.030 --> 00:20:03.870\nWhen we saw rank, when we saw dense rank,\nwe saw a set of parenthesis,\n\n391\n00:20:03.870 --> 00:20:07.060\nnotice again over,\nI'm about to do something bad, aren't I?\n\n392\n00:20:07.060 --> 00:20:09.270\n>> Yeah.\n>> I was about to do something really bad\n\n393\n00:20:09.270 --> 00:20:14.840\nthere, we saw the word over and\nit also has a set of parenthesis.\n\n394\n00:20:14.840 --> 00:20:16.460\nSo I'm not changing anything except for\n\n395\n00:20:16.460 --> 00:20:21.060\nreally the alias over here\nas well as the function.\n\n396\n00:20:21.060 --> 00:20:23.660\nThat they always have to have over or\nwith it.\n\n397\n00:20:23.660 --> 00:20:25.410\nSo make sure you practice this.\n\n398\n00:20:25.410 --> 00:20:27.366\nMake sure you take a look at them and\n\n399\n00:20:27.366 --> 00:20:31.496\nbe able to actually distinguish them\nwhen you start seeing this as well.\n\n400\n00:20:31.496 --> 00:20:32.600\nSo now let's take a look.\n\n401\n00:20:32.600 --> 00:20:35.670\nAnd let's see if we actually get\nthe result that I tell you that we\n\n402\n00:20:35.670 --> 00:20:36.570\nare going to get here.\n\n403\n00:20:36.570 --> 00:20:39.860\nI'm gonna execute that.\n\n404\n00:20:43.270 --> 00:20:44.680\nI'm gonna pull it up.\n\n405\n00:20:44.680 --> 00:20:49.800\nAnd now, as we take a look here,\nyou can now see,\n\n406\n00:20:49.800 --> 00:20:54.770\nright there in the middle, where I set it,\nnotice that every single row\n\n407\n00:20:54.770 --> 00:20:59.200\nis now marked as individualized,\nand we can see those row numbers.\n\n408\n00:20:59.200 --> 00:21:01.660\nNow, normally when we\ndo something like this.\n\n409\n00:21:01.660 --> 00:21:03.450\nYou might go,\ndo we really need to do this?\n\n410\n00:21:03.450 --> 00:21:04.560\nNo, you really don't.\n\n411\n00:21:04.560 --> 00:21:07.550\nBut a lot of times if you actually need\nto make sure that you enumerate each and\n\n412\n00:21:07.550 --> 00:21:10.240\nevery row, and you're looking for\nduplicates it will help.\n\n413\n00:21:10.240 --> 00:21:13.900\nThe other thing that will also\nhelp then of course is if you have\n\n414\n00:21:13.900 --> 00:21:17.640\nhundreds of rows or thousands of rows.\n\n415\n00:21:17.640 --> 00:21:21.150\nAnd you wanna make sure that you can\ncome back to that very same place.\n\n416\n00:21:21.150 --> 00:21:23.980\nImplementing a row number,\nputting it right there at the front.\n\n417\n00:21:23.980 --> 00:21:27.420\nAnd then when somebody says\nwhich record are you looking at?\n\n418\n00:21:27.420 --> 00:21:32.233\nWell, you can say we're looking at,\nthere it is, there's again.\n\n419\n00:21:32.233 --> 00:21:34.060\n>> [LAUGH]\n>> I can just say hey,\n\n420\n00:21:34.060 --> 00:21:36.110\nwe're looking at row number five.\n\n421\n00:21:36.110 --> 00:21:39.000\nAnd that way when, that's exactly right.\n\n422\n00:21:39.000 --> 00:21:42.700\nSo it gives us a nice reference\nthat we can actually be able to do.\n\n423\n00:21:42.700 --> 00:21:44.600\nAnd we're doing this all\non the same function.\n\n424\n00:21:44.600 --> 00:21:48.450\nAnd notice, once again,\nthe grouping is still there, okay?\n\n425\n00:21:48.450 --> 00:21:52.480\nBecause we actually chose to\ndo the aggregation by what?\n\n426\n00:21:52.480 --> 00:21:55.280\nBy the actual postal code.\n\n427\n00:21:55.280 --> 00:22:00.010\nSo even though the row number itself is\nnot technically a function of aggregation,\n\n428\n00:22:00.010 --> 00:22:01.320\nwe did use it along with it.\n\n429\n00:22:01.320 --> 00:22:03.700\nAnd that's normally where\nyou also see this as well.\n\n430\n00:22:03.700 --> 00:22:07.540\nSo it's a great little value to help\nyou out in terms of referencing\n\n431\n00:22:07.540 --> 00:22:10.690\nthe things that we actually need to\nmake sure that we reference too.\n\n432\n00:22:10.690 --> 00:22:15.830\nSo this is a great,\nI hope it's actually a good representation\n\n433\n00:22:15.830 --> 00:22:20.150\nof at least those three basic ones\nthat we need to be able to see.\n\n434\n00:22:20.150 --> 00:22:23.760\nNow, sometimes it's very\ndifficult to actually see them\n\n435\n00:22:23.760 --> 00:22:27.550\nwhen they're like that when I\njust show you them sequentially.\n\n436\n00:22:27.550 --> 00:22:32.580\nSo what I did is I also came\nup with one more to help\n\n437\n00:22:32.580 --> 00:22:36.890\nus out as far as the ranking functions go,\nis I want you to take a look at this\n\n438\n00:22:36.890 --> 00:22:42.370\nparticular sequence right here, okay?\n\n439\n00:22:42.370 --> 00:22:45.820\nSo, what I'm about to show you\nis actually all of them, okay?\n\n440\n00:22:45.820 --> 00:22:47.370\nThe only one that I really\ndon't need right now,\n\n441\n00:22:47.370 --> 00:22:49.800\nsince we haven't talked about it yet,\nis this one.\n\n442\n00:22:49.800 --> 00:22:53.660\nSo I'm gonna mark that one out for\nright now, but I've actually created\n\n443\n00:22:53.660 --> 00:22:58.430\na select statement that actually does\nall three at the same time, okay?\n\n444\n00:22:58.430 --> 00:23:00.530\nNow, notice that I really\ndidn't have to change anything,\n\n445\n00:23:00.530 --> 00:23:03.890\nexcept I added each one\nof those in as a column.\n\n446\n00:23:03.890 --> 00:23:05.682\nSo that way you can compare, well maybe.\n\n447\n00:23:05.682 --> 00:23:10.020\n[LAUGH] That way you can compare them if\nI would stop actually closing it out.\n\n448\n00:23:12.720 --> 00:23:13.680\nAnd then I'm gonna run.\n\n449\n00:23:13.680 --> 00:23:16.040\nLet me get out of the zoom\nhere just briefly.\n\n450\n00:23:16.040 --> 00:23:20.760\nAnd this way you can see\nthe results side by side, okay.\n\n451\n00:23:20.760 --> 00:23:25.030\nSo now, if I take a look at this and\n\n452\n00:23:25.030 --> 00:23:27.690\nthat's what we actually\ndid in all three of them.\n\n453\n00:23:27.690 --> 00:23:32.400\nSo take a note here, the very\nfirst one that we did was rank and\n\n454\n00:23:32.400 --> 00:23:36.710\nremember that this one actually\nskips sequencing of the numbering\n\n455\n00:23:36.710 --> 00:23:39.550\nto give us whatever\nthe next available spot is.\n\n456\n00:23:39.550 --> 00:23:42.350\nAnd on this one, I don't know I must have-\n>> It shows seven this time.\n\n457\n00:23:42.350 --> 00:23:44.260\n>> Yeah now it shows seven,\nI must have reduced something,\n\n458\n00:23:44.260 --> 00:23:46.890\nor filtered it by something\nelse at some point.\n\n459\n00:23:46.890 --> 00:23:49.710\nYeah, I don't get that, but yeah,\nit does show actually one less-\n\n460\n00:23:49.710 --> 00:23:50.813\n>> I'm sticking with it's arbitrary.\n\n461\n00:23:50.813 --> 00:23:51.935\n[LAUGH]\n>> Yes, it could be.\n\n462\n00:23:51.935 --> 00:23:56.433\n[LAUGH] Yeah, I don't have a clue, I'll\nhave to go back and look at it, I'm not so\n\n463\n00:23:56.433 --> 00:23:58.037\nworried about it right now.\n\n464\n00:23:58.037 --> 00:24:00.270\nThen we actually showed you dense rank,\nremember?\n\n465\n00:24:00.270 --> 00:24:04.420\nThat this actually doesn't skip\nthe sequencing to help us out.\n\n466\n00:24:04.420 --> 00:24:07.620\nNow I was mentioning, I think right before\nKen and I had to take a little break here.\n\n467\n00:24:07.620 --> 00:24:09.175\nI was talking about deterministic and\n\n468\n00:24:09.175 --> 00:24:12.800\nnon-deterministic factors of doing this,\nright?\n\n469\n00:24:12.800 --> 00:24:16.960\nWhenever we start doing things like\nrank and dense rank and row numbers.\n\n470\n00:24:16.960 --> 00:24:20.190\nThese are what we call deterministic\ntypes of functions, right?\n\n471\n00:24:20.190 --> 00:24:23.970\nWe're saying, here's how it should\nactually appear, here's how we grouped it\n\n472\n00:24:23.970 --> 00:24:26.630\ntogether, here's what's going to\nactually be determined by this.\n\n473\n00:24:26.630 --> 00:24:29.480\nAnd then of course, if you do things\nnatural order in which they actually\n\n474\n00:24:29.480 --> 00:24:31.300\nflow in, that's really non-deterministic.\n\n475\n00:24:31.300 --> 00:24:34.490\nThat's just the database reporting\nto you everything that you need.\n\n476\n00:24:34.490 --> 00:24:37.110\nSo you may also find those terms\n\n477\n00:24:37.110 --> 00:24:40.880\nwhen you start actually going\nto the exam as well, okay?\n\n478\n00:24:40.880 --> 00:24:44.930\nSo rank function,\nas well as the rownumber, okay?\n\n479\n00:24:44.930 --> 00:24:46.550\nAs well as dense rank,\n\n480\n00:24:46.550 --> 00:24:50.010\nthose would be considered things like\ndeterministic types of functions.\n\n481\n00:24:50.010 --> 00:24:52.850\nSo I'm not telling you that they're\ngoing to be on the exam, but\n\n482\n00:24:52.850 --> 00:24:54.290\nI would make sure I know that.\n\n483\n00:24:54.290 --> 00:24:54.920\n>> [LAUGH]\n>> [LAUGH] I can't tell\n\n484\n00:24:54.920 --> 00:24:56.940\nyou that they're going to be on the exam.\n\n485\n00:24:56.940 --> 00:25:00.080\nBut just realize that you can see these.\n\n486\n00:25:00.080 --> 00:25:03.930\nSo the good thing is you'll have access\nto being able to run these things\n\n487\n00:25:03.930 --> 00:25:05.910\non your own SQL server as well.\n\n488\n00:25:05.910 --> 00:25:09.290\nThat way you can compare them and\nsee them side-by-side, modify them,\n\n489\n00:25:09.290 --> 00:25:10.920\ndo what you actually want to.\n\n490\n00:25:10.920 --> 00:25:13.270\nThat's actually a neat thing for\n\n491\n00:25:13.270 --> 00:25:17.500\nus to be able to offer here at\nIT Pro TV is so that you can do that.\n\n492\n00:25:17.500 --> 00:25:20.950\nAt least,\nwe'll make them available in some way.\n\n493\n00:25:20.950 --> 00:25:24.890\nThey're not secret,\nthere's no secret software.\n\n494\n00:25:24.890 --> 00:25:29.500\nYou can copy them, but hopefully we'll\nhave them in a file of some sort or\n\n495\n00:25:29.500 --> 00:25:31.970\nsome way to actually be able to use them.\n\n496\n00:25:31.970 --> 00:25:33.970\nHow to help us out too, okay.\n\n497\n00:25:33.970 --> 00:25:39.830\nSo there are these bigger functions that\nwe do have to actually think about when we\n\n498\n00:25:39.830 --> 00:25:46.280\nstart taking a look at this idea of using\nthese ranking functions to help us out.\n\n499\n00:25:46.280 --> 00:25:51.520\nSo there's rank, desk rank, and of course\nthe idea of the row number as well.\n\n500\n00:25:51.520 --> 00:25:54.900\n>> Robbie, what was that n-tile\nthing that you commented about,\n\n501\n00:25:54.900 --> 00:25:55.870\nthat looked interesting.\n\n502\n00:25:55.870 --> 00:25:57.210\n>> Yeah, it really is.\n\n503\n00:25:57.210 --> 00:25:59.110\nIt's one of the most interesting\nthings in the world, and\n\n504\n00:25:59.110 --> 00:26:02.990\nwhen we talk about n-tile, you've used it\nbefore whether or not you know it Okay.\n\n505\n00:26:02.990 --> 00:26:04.800\nAnd when I say that right.\n\n506\n00:26:04.800 --> 00:26:06.520\nIf you were to use a percent and\n\n507\n00:26:06.520 --> 00:26:08.990\nyou've heard people call it percentile,\n>> Uh-huh.\n\n508\n00:26:08.990 --> 00:26:11.000\n>> Okay and stuff like that.\n\n509\n00:26:11.000 --> 00:26:13.438\nWell what they're saying with and\n\n510\n00:26:13.438 --> 00:26:17.670\ninstead, is that you can divide\nthis up however you want to.\n\n511\n00:26:17.670 --> 00:26:18.930\nOkay.\nSo\n\n512\n00:26:18.930 --> 00:26:21.050\nlet me show you what we\nare talking about here.\n\n513\n00:26:21.050 --> 00:26:23.060\nLet me go back over here to this screen.\n\n514\n00:26:23.060 --> 00:26:24.950\nAnd with end tile, okay?\n\n515\n00:26:24.950 --> 00:26:29.600\nLet's say that what I wanted to\ndo instead, by the higher year,\n\n516\n00:26:29.600 --> 00:26:33.720\nis to divide up all of my\ndata equally as I can.\n\n517\n00:26:33.720 --> 00:26:39.620\nBut into a Quartile,\nwhich means four parts.\n\n518\n00:26:39.620 --> 00:26:42.820\nOkay, in theory and\nI wanted to use an in tile function.\n\n519\n00:26:42.820 --> 00:26:45.650\nI said,\nI want that to actually function around 4.\n\n520\n00:26:45.650 --> 00:26:48.260\nI'm actually creating\nsomething called a quartile.\n\n521\n00:26:48.260 --> 00:26:52.590\nSo what should happen with 100 rows is\nthere should be 25 in the first quartile,\n\n522\n00:26:52.590 --> 00:26:56.570\n25 in the second, 25 in third,\nand 25 in the fourth.\n\n523\n00:26:56.570 --> 00:26:57.220\nOkay?\n\n524\n00:26:57.220 --> 00:27:00.910\nIf I chose to do the idea of a tenth,\nright?\n\n525\n00:27:00.910 --> 00:27:04.910\n10% or what they call a debt tile,\n\n526\n00:27:04.910 --> 00:27:09.190\nor how do they call it,\nthat would be dividing into groups of ten.\n\n527\n00:27:09.190 --> 00:27:13.250\nSo it's taking your data and\nactually dividing it into equal groups.\n\n528\n00:27:13.250 --> 00:27:17.860\nSo the idea here, for\nus we normally use percentile, right?\n\n529\n00:27:17.860 --> 00:27:23.160\nPercentile is saying,divide it into\none hundred equal parts, okay.\n\n530\n00:27:23.160 --> 00:27:25.520\nSo every single one is actually\none hundred equal parts.\n\n531\n00:27:25.520 --> 00:27:28.260\nIf I have a table that a hundred rows\n\n532\n00:27:28.260 --> 00:27:32.610\neach row then would actually\nrepresent one percent, okay.\n\n533\n00:27:32.610 --> 00:27:36.960\nSo that's what really helps to be able\nto do, is to say this is what we want.\n\n534\n00:27:36.960 --> 00:27:41.540\nNow what happens Ronnie though\nIf I actually have this listed and\n\n535\n00:27:41.540 --> 00:27:45.790\nthere is five, well how the heck\ndo you divide that into four?\n\n536\n00:27:45.790 --> 00:27:49.380\nWell that's absolutely a good question and\nthe way that this works, right,\n\n537\n00:27:49.380 --> 00:27:53.400\nis there's overages it actually\ncounts into one of the percentiles.\n\n538\n00:27:53.400 --> 00:27:58.260\nSo here that's why she had the number\nfour and actually represents both there.\n\n539\n00:27:58.260 --> 00:28:02.650\nNow you may be thinking what I'm thinking,\nwell in math, it has to be five or\n\n540\n00:28:02.650 --> 00:28:04.290\nover before you do it with that one.\n\n541\n00:28:04.290 --> 00:28:07.828\nWell in SQL server they do\nit however they want to.\n\n542\n00:28:07.828 --> 00:28:08.900\nIf it's three-tenths,\n\n543\n00:28:08.900 --> 00:28:12.730\nif it's whatever they want, they can put\nit in that 4th percentile if they want to.\n\n544\n00:28:12.730 --> 00:28:14.140\n>> Arbitrariness again\n>> It is.\n\n545\n00:28:15.390 --> 00:28:18.010\n>> Like I said, there is\na mathematical explanation for it,\n\n546\n00:28:18.010 --> 00:28:18.980\nthey just don't tell us.\n\n547\n00:28:18.980 --> 00:28:19.480\n[LAUGH]\n>> And I can't explain it.\n\n548\n00:28:19.480 --> 00:28:22.230\n[LAUGH] I can't explain it but,\n\n549\n00:28:22.230 --> 00:28:24.210\nthat's how it also ends up working.\n\n550\n00:28:24.210 --> 00:28:26.350\nSo you will see stuff like this as well,\n\n551\n00:28:26.350 --> 00:28:29.590\nwhere they tried to divide into\nequal parts that they can, okay?\n\n552\n00:28:29.590 --> 00:28:33.740\nSo let's show you that as our\nexample as well, right here.\n\n553\n00:28:33.740 --> 00:28:34.870\nand I've got this and\n\n554\n00:28:34.870 --> 00:28:40.950\nnotice again I don't know if I'm banging\nthis drum too hard or not Daniel.\n\n555\n00:28:40.950 --> 00:28:45.534\nEnd tile but instead of parenthesis this\ntime I set a quartile just like we said.\n\n556\n00:28:45.534 --> 00:28:46.943\nAnd look at that, over.\n\n557\n00:28:46.943 --> 00:28:48.704\n>> Don't forget that.\n\n558\n00:28:48.704 --> 00:28:54.750\n>> Don't forget that, so I'm hoping that\niif you see this, it bangs into your head.\n\n559\n00:28:54.750 --> 00:28:56.760\nWhen you see NTILE, Dense Rank,\n\n560\n00:28:56.760 --> 00:29:02.460\nRank, Row Number, whatever it might be,\nright, that you actually remember.\n\n561\n00:29:02.460 --> 00:29:03.600\nI can't see that alone.\n\n562\n00:29:03.600 --> 00:29:06.430\nIt has to have the word over\nin it somewhere to do this.\n\n563\n00:29:06.430 --> 00:29:12.550\nSo, we essentially took the same thing\nhere and now, I just said NTILE.\n\n564\n00:29:12.550 --> 00:29:17.030\nAnd now if I run this, 5,\nlet me see if I scroll down here,\n\n565\n00:29:21.620 --> 00:29:25.370\nand I said, and notice it\nautomatically gave me quartile here.\n\n566\n00:29:25.370 --> 00:29:28.190\nThere it is, 1, 2, 3, 4 and\nnow notice there's another one.\n\n567\n00:29:28.190 --> 00:29:30.010\nThere's two, sorry, let me zoom in.\n\n568\n00:29:30.010 --> 00:29:33.310\nI've been doing that pretty good\nduring the whole episode until then.\n\n569\n00:29:33.310 --> 00:29:37.210\nSo there's one [LAUGH], there's the two's.\n\n570\n00:29:37.210 --> 00:29:43.750\nAnd now you see, right here, where only\nthree, and then of course those four's.\n\n571\n00:29:43.750 --> 00:29:48.520\nSo even though we had the first two\nquartiles had four in it each, I believe,\n\n572\n00:29:48.520 --> 00:29:51.220\nthe last two ended up with three each.\n\n573\n00:29:51.220 --> 00:29:55.280\nIt was just the way that they divided\nit up and the math worked out.\n\n574\n00:29:55.280 --> 00:29:58.200\nAgain that's me and explaining it.\n\n575\n00:29:58.200 --> 00:30:01.420\nI'm sure somebody can but not me but\nI'm just trying to tell you that\n\n576\n00:30:01.420 --> 00:30:05.340\nwhen you use this if you choose ten,\nit will do the same thing right.\n\n577\n00:30:05.340 --> 00:30:08.050\nSo instead you can do let me see\n\n578\n00:30:08.050 --> 00:30:10.600\ngotta make sure I actually\npress the right buttons here.\n\n579\n00:30:10.600 --> 00:30:14.990\nI don't know why it's not been\nconfusing during the whole episode and\n\n580\n00:30:14.990 --> 00:30:18.180\nnow here at the end I'm like,\nI dont know how to do that.\n\n581\n00:30:18.180 --> 00:30:21.191\nSo if I change this into a 10 and\n\n582\n00:30:21.191 --> 00:30:26.671\nthis would be I think if I'm\nright it's called a ductile.\n\n583\n00:30:32.061 --> 00:30:33.601\n>> You can make it say\nalligator if you want.\n\n584\n00:30:33.601 --> 00:30:35.130\n[CROSSTALK]\n>> Yeah I can make it say whatever.\n\n585\n00:30:35.130 --> 00:30:35.880\nYeah.\n\n586\n00:30:35.880 --> 00:30:40.040\n>> So now, notice it actually\ndivides it into ten places instead.\n\n587\n00:30:40.040 --> 00:30:42.640\nSo it can do it based off\nof whatever it wants to.\n\n588\n00:30:42.640 --> 00:30:44.610\nAnd again, we can define that.\n\n589\n00:30:44.610 --> 00:30:47.960\nBut just kind of realize that that's\nwhat it allows us to be able to do.\n\n590\n00:30:47.960 --> 00:30:50.400\nSo there's another grouping,\nright, that we're talking about.\n\n591\n00:30:50.400 --> 00:30:52.840\nEven though it's not a grouping that\nwe would certainly think about.\n\n592\n00:30:52.840 --> 00:30:56.670\nThe idea of actually being divided into\nfourths, tenths, hundredths if we want to.\n\n593\n00:30:56.670 --> 00:31:00.000\nIt's really the idea of grouping\nit into those numbers as well.\n\n594\n00:31:00.000 --> 00:31:03.730\nThat's why it comes back to aggregate and\nquerying.\n\n595\n00:31:03.730 --> 00:31:04.870\nSo with that,\n\n596\n00:31:04.870 --> 00:31:08.655\nhopefully those ideas of the aggregates\nare We're pretty much just about done.\n\n597\n00:31:08.655 --> 00:31:15.035\nWe had a little bit more, but it may\nactually take us longer than I think.\n\n598\n00:31:15.035 --> 00:31:17.089\nSo, we may actually have\nto do a part three.\n\n599\n00:31:17.089 --> 00:31:19.977\n>> [LAUGH] Ronnie.\n\n600\n00:31:19.977 --> 00:31:23.287\nThere's no made to it,\nwe will be doing a part three on that guy.\n\n601\n00:31:23.287 --> 00:31:24.437\nBut we do appreciate.\n\n602\n00:31:24.437 --> 00:31:25.807\nThis is actually a really cool episode.\n\n603\n00:31:25.807 --> 00:31:27.317\nI enjoyed this.\n\n604\n00:31:27.317 --> 00:31:30.797\nGroupings, putting things\ntogether into some sort of\n\n605\n00:31:30.797 --> 00:31:32.970\nhierarchical fashion\nthat is always helpful.\n\n606\n00:31:32.970 --> 00:31:35.010\nAnd now we have a few different\nways in which we can do that.\n\n607\n00:31:35.010 --> 00:31:39.480\nAnd it looks like as I stare at\nthe clock with no more time on\n\n608\n00:31:39.480 --> 00:31:40.150\nit-\n>> [LAUGH]\n\n609\n00:31:40.150 --> 00:31:41.500\n>> I guess we're gonna have to close\n\n610\n00:31:41.500 --> 00:31:45.110\nthe show down and go into that\npart three here in the next one.\n\n611\n00:31:45.110 --> 00:31:46.090\nSo we appreciate you, Ronnie.\n\n612\n00:31:46.090 --> 00:31:47.460\nThanks for playing these things for us.\n\n613\n00:31:47.460 --> 00:31:48.800\nWe look forward to that part three.\n\n614\n00:31:48.800 --> 00:31:50.240\nWe thank you guys for joining us.\n\n615\n00:31:50.240 --> 00:31:51.680\nWe're gonna go ahead and sign off.\n\n616\n00:31:51.680 --> 00:31:53.950\nFor IT ProTV I've been your host,\nDaniel Laurie.\n\n617\n00:31:53.950 --> 00:31:54.920\n>> And I'm Ronnie Wong.\n\n618\n00:31:54.920 --> 00:31:55.947\n>> We'll see you next time.\n\n619\n00:31:55.947 --> 00:32:04.490\n[MUSIC]\n\n",
          "vimeoId": "164419603"
        },
        {
          "description": "In this episode, Daniel and Ronnie finish their look at aggregate queries by discussing Spatial Aggregates. Spatial aggregates allow you to visualize data by using a map(Geographical) or a shape(Geometrical). They walk you through the 4 Spatial Aggregate types including: Union, Envelope, Collection, and Convex.",
          "length": "1416",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_quaries_pt3-042216-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_quaries_pt3-042216-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-4-implement_aggregate_quaries_pt3-042216-1-sm.jpg",
          "title": "Implement Aggregate Queries Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.019 --> 00:00:13.796\nAll right, greetings everyone.\n\n3\n00:00:13.796 --> 00:00:16.905\nAnd welcome to another\ngreat episode of ITPro.tv.\n\n4\n00:00:16.905 --> 00:00:19.995\nI'm your host Daniel Lowrie and in today's\nepisode we are continuing on with our\n\n5\n00:00:19.995 --> 00:00:25.585\nseries on the querying, I say series and\nquerying, it tends to mess me up.\n\n6\n00:00:25.585 --> 00:00:28.415\nQuerying the Microsoft SQL Server 2014.\n\n7\n00:00:28.415 --> 00:00:32.359\nAnd joining us back in the studio again\ntoday for a part three, believe it or not,\n\n8\n00:00:32.359 --> 00:00:35.435\non aggregate functions,\nis our good friend Mr. Ronnie Wong.\n\n9\n00:00:35.435 --> 00:00:37.050\nRonnie, welcome back, sir.\n\n10\n00:00:37.050 --> 00:00:37.670\nHow's it going?\n\n11\n00:00:37.670 --> 00:00:39.050\n>> It's going well, thank you.\n\n12\n00:00:39.050 --> 00:00:40.610\nYes, we do have a part three.\n\n13\n00:00:40.610 --> 00:00:41.670\nIt's not unheard of for me.\n\n14\n00:00:41.670 --> 00:00:42.620\n>> It happens.\n\n15\n00:00:42.620 --> 00:00:45.960\n>> It does happen usually more\n[LAUGH] often than not, but\n\n16\n00:00:45.960 --> 00:00:47.210\nyes it is our third part.\n\n17\n00:00:47.210 --> 00:00:51.220\nWe're really rounding out the idea of\nusing those aggregate types of querying\n\n18\n00:00:51.220 --> 00:00:53.610\nto help us to show\nexactly what we need to.\n\n19\n00:00:53.610 --> 00:00:55.900\nEspecially in the ideas of grouping here.\n\n20\n00:00:55.900 --> 00:00:58.120\nNow this one that we're\nreally focusing in on and\n\n21\n00:00:58.120 --> 00:01:04.280\nwhat we've just kind of are wrapping this\nup with what we call spacial aggregates.\n\n22\n00:01:04.280 --> 00:01:07.500\nSo what do you think would\nthe term spacial aggregates,\n\n23\n00:01:07.500 --> 00:01:10.961\nwhat do you think we'll be talking\nabout when you hear spacial aggregates?\n\n24\n00:01:10.961 --> 00:01:13.336\n>> [LAUGH] We're going to get\ninside of the space shuttle and\n\n25\n00:01:13.336 --> 00:01:14.870\nwe're gonna go\n>> above the Earth.\n\n26\n00:01:14.870 --> 00:01:18.200\nActually, that's probably not too far\nfrom a description, I think space.\n\n27\n00:01:18.200 --> 00:01:21.670\nSpace, right, so it's around us,\nit's what we live in, space.\n\n28\n00:01:21.670 --> 00:01:26.150\nAnd aggregates will be the grouping\nof different areas in space.\n\n29\n00:01:26.150 --> 00:01:29.440\n>> Very good, that's a great type\nof breakdown to think about.\n\n30\n00:01:29.440 --> 00:01:31.920\nYes, breaking down,\nanalyzing the component words and\n\n31\n00:01:31.920 --> 00:01:35.530\nthen pulling it back together, that's\nexactly what we're talking about here.\n\n32\n00:01:35.530 --> 00:01:39.609\nWhen it comes down to the idea of special\naggregates this is a little bit more\n\n33\n00:01:39.609 --> 00:01:43.266\nunusual for most of us if we've\nbeen dealing with querying.\n\n34\n00:01:43.266 --> 00:01:46.430\nIn the very fact that we're used to\nquerying pieces of data like you know,\n\n35\n00:01:46.430 --> 00:01:48.180\nsomeone's first name and last name.\n\n36\n00:01:48.180 --> 00:01:52.460\nTheir particular address as far as\nthe definition of the address, right.\n\n37\n00:01:52.460 --> 00:01:57.600\nSo like our address here right,\n6933 Northwest 4th Boulevard.\n\n38\n00:01:57.600 --> 00:02:01.430\nWe actually get data on\nthat particular address.\n\n39\n00:02:01.430 --> 00:02:06.320\nWell, in terms of the spatial\nrelationship though of that address,\n\n40\n00:02:06.320 --> 00:02:11.280\nwe're really talking about\nthe idea of geographic location.\n\n41\n00:02:11.280 --> 00:02:14.526\nSo what else can we store\ninside of our database?\n\n42\n00:02:14.526 --> 00:02:17.850\nIs not only the textual\ntype of information,\n\n43\n00:02:17.850 --> 00:02:22.760\nright, the address that we write out and\nthe state and zipcode that we write out.\n\n44\n00:02:22.760 --> 00:02:25.920\nBut inside of our database\nwe have the ability\n\n45\n00:02:25.920 --> 00:02:29.830\nto change what we call data\ntypes in our columns, right?\n\n46\n00:02:29.830 --> 00:02:33.530\nSo if I wanna store other types of\ninformation, I normally change it.\n\n47\n00:02:33.530 --> 00:02:39.840\nFor example the address more than likely\nis what call a string value type of\n\n48\n00:02:39.840 --> 00:02:42.510\ninformation I want to store, which means\nI can store anything I want to in it.\n\n49\n00:02:43.570 --> 00:02:47.560\nBut then there's some other types of\nvalues that we have and one of those types\n\n50\n00:02:47.560 --> 00:02:54.200\nis what we call geography, makes sense,\nand another one is what we call geometry.\n\n51\n00:02:54.200 --> 00:02:57.250\n>> Types of data that we\nhave available to us.\n\n52\n00:02:57.250 --> 00:03:01.840\nNow when we start talking about that,\nthat's essentially what the spatial\n\n53\n00:03:01.840 --> 00:03:07.340\ntypes or data types actually are is\nwhat we call geography and geometry.\n\n54\n00:03:07.340 --> 00:03:12.390\nGeography is exactly like it sounds that\nwe can pinpoint things like location\n\n55\n00:03:12.390 --> 00:03:18.180\nbased on some type of mapping,\nthat's actually a literal type of map.\n\n56\n00:03:18.180 --> 00:03:23.115\nSpatial as far as the geometry\ntype is normally doing something\n\n57\n00:03:23.115 --> 00:03:27.450\nlike a linear equation or a coordinate\ntype of equation that we can also do.\n\n58\n00:03:27.450 --> 00:03:30.140\nAnd actually locate it\nin that way as well.\n\n59\n00:03:30.140 --> 00:03:33.070\nSo the good thing is databases,\nespecially with SQL Server,\n\n60\n00:03:33.070 --> 00:03:35.290\nyou can do the same thing, okay.\n\n61\n00:03:35.290 --> 00:03:38.180\nNow most of us have actually seen\nsomething like this before and\n\n62\n00:03:38.180 --> 00:03:40.925\nwe may not have actually related\nit to something that we can do.\n\n63\n00:03:40.925 --> 00:03:43.295\nBut right before the show,\nDaniel and I were talking about it,\n\n64\n00:03:43.295 --> 00:03:45.745\nand I don't know why Daniel\nbrought up Taco Bell,\n\n65\n00:03:45.745 --> 00:03:48.690\nbut we'll use Taco Bell as an example,\nsince Daniel brought it up here.\n\n66\n00:03:48.690 --> 00:03:50.060\n[LAUGH]\n>> Paid for by Taco Bell.\n\n67\n00:03:50.060 --> 00:03:52.905\n[LAUGH]\n>> Well, so, the spatial thing is like\n\n68\n00:03:52.905 --> 00:03:57.135\ntaking a map of the United States and\nthen locating every single Taco Bell.\n\n69\n00:03:57.135 --> 00:03:58.025\nExactly.\n\n70\n00:03:58.025 --> 00:04:02.850\nThat's stuff that we can actually do by\nusing the database to help us to do that.\n\n71\n00:04:02.850 --> 00:04:05.000\nAnd the way that I would do it is simple.\n\n72\n00:04:05.000 --> 00:04:09.710\nI would actually do a printout of every\nlocation of every store that I would have,\n\n73\n00:04:09.710 --> 00:04:11.930\nand then I would physically go and\nfind a map and do what?\n\n74\n00:04:11.930 --> 00:04:16.810\nTake a little Sharpie and just pinpoint\nwhere they actually are on the map.\n\n75\n00:04:16.810 --> 00:04:20.540\nWell, yes you can do that, right,\nthat's that two step process, but\n\n76\n00:04:20.540 --> 00:04:21.690\nit would be nicer and\n\n77\n00:04:21.690 --> 00:04:26.150\neasier is if we could actually keep all\nof that data stored in our database.\n\n78\n00:04:26.150 --> 00:04:26.910\nRight?\n\n79\n00:04:26.910 --> 00:04:31.511\nHave even the mapping that we actually\nneed, a map in the way that we have it\n\n80\n00:04:31.511 --> 00:04:34.500\ndrawn and the way that we have it laid\nout, to actually be able to do that as\n\n81\n00:04:34.500 --> 00:04:37.740\nwell and to report it in the way\nthat we need to as well.\n\n82\n00:04:37.740 --> 00:04:40.660\nSo all at the same time, instead of us\nhaving to do this kind of manual step\n\n83\n00:04:40.660 --> 00:04:43.620\nprocess we're trying to\nfind out the information.\n\n84\n00:04:43.620 --> 00:04:47.190\nSo when we start doing stuff like that,\nthat means that there has to be of course\n\n85\n00:04:47.190 --> 00:04:50.480\ncategories in our database\nthat will help us out.\n\n86\n00:04:50.480 --> 00:04:53.320\nSo let me show you what\nI'm talking about here.\n\n87\n00:04:53.320 --> 00:04:58.630\nI've got a query that we're gonna run,\nbut over here on the left\n\n88\n00:04:58.630 --> 00:05:03.374\nhand side in my object query I'm gonna\nexpand out that adventure works 2014.\n\n89\n00:05:04.670 --> 00:05:07.020\nAnd then also the tables.\n\n90\n00:05:07.020 --> 00:05:11.060\nAnd then I'm going to look\nunder person dot address,\n\n91\n00:05:11.060 --> 00:05:13.090\nif I can actually find it here.\n\n92\n00:05:13.090 --> 00:05:18.230\nAnd then I'm going to expand out columns\nand here I'm going to zoom in so\n\n93\n00:05:18.230 --> 00:05:22.840\nthat we can see it a little bit more,\nand notice that there is a field here.\n\n94\n00:05:22.840 --> 00:05:27.950\nAnd I hope that you can see that,\nit actually says spatial location.\n\n95\n00:05:27.950 --> 00:05:29.360\nIs what it actually says.\n\n96\n00:05:29.360 --> 00:05:33.690\nNow this is attached to a table\nthat's called addresses.\n\n97\n00:05:33.690 --> 00:05:37.690\nSo not only are they giving us the actual\naddress line, city, providence,\n\n98\n00:05:37.690 --> 00:05:40.990\ncode, postal code, excuse me,\nand providence id.\n\n99\n00:05:40.990 --> 00:05:42.520\nAnd stuff like that, right?\n\n100\n00:05:42.520 --> 00:05:45.330\nThat really is, information wise,\n\n101\n00:05:45.330 --> 00:05:49.050\nvaluable information as we deliver\npackages as we do other things.\n\n102\n00:05:49.050 --> 00:05:51.280\nBut it's saying I can even store what?\n\n103\n00:05:51.280 --> 00:05:54.720\nIts location, it's spacial location.\n\n104\n00:05:54.720 --> 00:05:59.160\nAnd here is the data type right here,\nwhich is our geography data type.\n\n105\n00:05:59.160 --> 00:06:01.480\nSo it actually is saying hey\nI can store this information.\n\n106\n00:06:01.480 --> 00:06:04.770\nNow the reason why this is becoming\nmore and more important is because well,\n\n107\n00:06:04.770 --> 00:06:06.600\nthings like GPS, right.\n\n108\n00:06:06.600 --> 00:06:09.470\nThe very ability for\nus to use information like that,\n\n109\n00:06:09.470 --> 00:06:11.240\nto locate exactly what we want to.\n\n110\n00:06:11.240 --> 00:06:13.800\nAnd if you think about this for\na retail company or\n\n111\n00:06:13.800 --> 00:06:17.720\na even a company like Amazon to be able\nto deliver exactly where it needs to.\n\n112\n00:06:17.720 --> 00:06:19.970\nWell they can take that information and\nstore that for\n\n113\n00:06:19.970 --> 00:06:25.080\nevery one of those addresses and have\nthem also being able to be displayed and\n\n114\n00:06:25.080 --> 00:06:29.320\nshowing where these locations\nactually are to help us out.\n\n115\n00:06:29.320 --> 00:06:32.090\n>> Now the good thing is,\neven though we're going to do that,\n\n116\n00:06:32.090 --> 00:06:34.870\nwe're going to take a look at doing this,\nI wanna show you a little bit\n\n117\n00:06:34.870 --> 00:06:39.410\ndifferently because not every time do\nwe need the full details that we need.\n\n118\n00:06:39.410 --> 00:06:42.440\nSometimes we need that to actually be\nrepresented a little bit differently.\n\n119\n00:06:42.440 --> 00:06:47.440\nAnd that's what the idea of spacial\naggregates help us to do, okay?\n\n120\n00:06:47.440 --> 00:06:51.619\nSo I wanna go back to my simple diagram\nhere, and we'll start at the beginning.\n\n121\n00:06:52.920 --> 00:06:55.650\nNow I really do not have\nall of this information in.\n\n122\n00:06:55.650 --> 00:06:58.780\nIf we did we'd be running this\non our database and doing this.\n\n123\n00:06:58.780 --> 00:07:02.330\nBut here, let's just take a look at\nthe statement right at the beginning.\n\n124\n00:07:02.330 --> 00:07:02.960\nOkay?\n\n125\n00:07:02.960 --> 00:07:05.920\nSo when we start talking about it here,\n\n126\n00:07:05.920 --> 00:07:10.150\nnotice down here at the bottom of\nthe actual page I have a select statement.\n\n127\n00:07:10.150 --> 00:07:13.820\nNow this is kind of made up but\nI hope it helps you to make the example.\n\n128\n00:07:13.820 --> 00:07:18.350\nSo I do a select and then I tell it\nthe type of data that I'm looking for.\n\n129\n00:07:18.350 --> 00:07:21.570\nNow when we start actually doing this,\nright,\n\n130\n00:07:21.570 --> 00:07:25.810\nthis particular type of data can be\nstored and generated dynamically as well.\n\n131\n00:07:27.430 --> 00:07:30.170\nThe way that SQL server\n2014 actually works,\n\n132\n00:07:30.170 --> 00:07:36.190\nit prefers what they call the static\ntypes of data that we actually implement.\n\n133\n00:07:36.190 --> 00:07:40.020\nSo, in other words, it says look, don't\ntry and feed this from another system and\n\n134\n00:07:40.020 --> 00:07:41.030\npull it in here.\n\n135\n00:07:41.030 --> 00:07:43.708\nIf it continues to change and\nlocations continue to change,\n\n136\n00:07:43.708 --> 00:07:46.860\nso it's just not good for\ntracking like UPS trucks, okay.\n\n137\n00:07:46.860 --> 00:07:48.110\nNot good for stuff like that.\n\n138\n00:07:48.110 --> 00:07:52.198\nIt's good for tracking locations like\nDaniel's fixation with Taco Bell's.\n\n139\n00:07:52.198 --> 00:07:52.706\n>> [LAUGH]\n>> Addresses.\n\n140\n00:07:52.706 --> 00:07:55.220\n[LAUGH] >> Around the country.\n>> I gotta get a Cheesy Gordita Crunch in\n\n141\n00:07:55.220 --> 00:07:56.400\nme at least once a week or\n\n142\n00:07:56.400 --> 00:07:58.205\nI'm just no good anyway.\n[LAUGH]\n\n143\n00:07:58.205 --> 00:07:59.006\n>> Yeah, whatever it might be.\n\n144\n00:07:59.006 --> 00:08:01.534\nBut, that's what it's good at doing, so\n\n145\n00:08:01.534 --> 00:08:02.524\n>> If you're trying to\n\n146\n00:08:02.524 --> 00:08:06.500\ntrack the movement of like I said, package\ndelivery trucks and stuff like that.\n\n147\n00:08:06.500 --> 00:08:08.051\nIt might be able to work, but\n\n148\n00:08:08.051 --> 00:08:10.780\nit's not the best at doing it.\nIt really wants to say,\n\n149\n00:08:10.780 --> 00:08:14.070\nhere's the location.\nHere's the address, that's what we want.\n\n150\n00:08:14.070 --> 00:08:15.816\nSo, we tend to do that.\n\n151\n00:08:15.816 --> 00:08:20.210\nSo in the geography, we're usually\nlooking for static locations.\n\n152\n00:08:20.210 --> 00:08:23.294\nAnd then you do, this is where\nit becomes a little stranger.\n\n153\n00:08:23.294 --> 00:08:29.300\nNotice a double colon and then there's\na different types of spacial aggregates.\n\n154\n00:08:29.300 --> 00:08:34.633\nThis ones called a UnionAggregate here and\nthen notice we also added the data type.\n\n155\n00:08:34.633 --> 00:08:39.032\nSame thing, we actually tell it what\ntable its from then I have a filter where\n\n156\n00:08:39.032 --> 00:08:41.120\nthe names actually equal to USA.\n\n157\n00:08:41.120 --> 00:08:44.186\nNow I know I'm kind of USA-centric,\ncuz that's where we are and\n\n158\n00:08:44.186 --> 00:08:45.598\nwe can choose any countries.\n\n159\n00:08:45.598 --> 00:08:47.628\nThere's a couple of other ones we're\ngonna do a little bit later on,\n\n160\n00:08:47.628 --> 00:08:48.682\nthat's actually somewhere else.\n\n161\n00:08:48.682 --> 00:08:52.256\nBut right here,\nlet's say that inside of my SQL Server,\n\n162\n00:08:52.256 --> 00:08:55.978\nI have this as actually being\na map background in the back and\n\n163\n00:08:55.978 --> 00:09:00.900\nnotice how everything is actually divided\nup into our different states here.\n\n164\n00:09:02.230 --> 00:09:04.630\nSo, let's say that this\nis my particular map and\n\n165\n00:09:04.630 --> 00:09:07.630\nI've actually got it divided\nup into the different states.\n\n166\n00:09:07.630 --> 00:09:10.943\nWell, I can show that and\nwe'll actually see where we can do that.\n\n167\n00:09:10.943 --> 00:09:15.042\nBut there's some times what I really want\nis I want to actually take all of those,\n\n168\n00:09:15.042 --> 00:09:18.418\nlet's say, all the sales that I\nhad in the United States here, but\n\n169\n00:09:18.418 --> 00:09:22.640\nI didn't wanna actually show like\nwhere they actually individually were.\n\n170\n00:09:22.640 --> 00:09:23.909\nBut I just wanted to say,\n\n171\n00:09:23.909 --> 00:09:26.883\nhere is the way that I can\ndifferentiate in terms of sales.\n\n172\n00:09:26.883 --> 00:09:31.785\nSo, this is where you might see the global\nmap where they actually show the US\n\n173\n00:09:31.785 --> 00:09:34.320\nis actually going to be in red or green.\n\n174\n00:09:35.600 --> 00:09:39.304\nThe European union's gonna be over there,\nAustralia's gonna be a different color and\n\n175\n00:09:39.304 --> 00:09:40.062\nstuff like that.\n\n176\n00:09:40.062 --> 00:09:41.540\nWell, we can actually do that.\n\n177\n00:09:41.540 --> 00:09:45.302\nAnd that way, we can show here's\nall the countries we've targeted or\n\n178\n00:09:45.302 --> 00:09:47.723\nI can even use a ranking\nfunction to help us and\n\n179\n00:09:47.723 --> 00:09:50.752\ngo my biggest customer right\nhere in the United States.\n\n180\n00:09:50.752 --> 00:09:54.910\nAnd that way, I'm not actually showing\nwhat every single individual state here.\n\n181\n00:09:54.910 --> 00:09:59.266\nI can take that mapping then and\ninstead union it.\n\n182\n00:09:59.266 --> 00:10:03.528\nIn other words, get rid of all of\nthese different borders we see and\n\n183\n00:10:03.528 --> 00:10:07.410\npull it together as one kind\nof flap outline instead.\n\n184\n00:10:07.410 --> 00:10:09.253\nAnd that way,\nwe can actually label and go.\n\n185\n00:10:09.253 --> 00:10:11.030\nYeah, I have customers here.\n\n186\n00:10:11.030 --> 00:10:13.635\nI don't actually have to show\nyou that I have a customer in\n\n187\n00:10:13.635 --> 00:10:16.568\nRhode Island, [LAUGH] which would\nbe very difficult on this map to\n\n188\n00:10:16.568 --> 00:10:17.403\nactually\n>> [LAUGH]\n\n189\n00:10:17.403 --> 00:10:18.757\n>> Try and show, but\n\n190\n00:10:18.757 --> 00:10:23.916\nthat's the idea is that we can do\nsomething like this to help us out.\n\n191\n00:10:23.916 --> 00:10:27.341\nNow by taking a look at something\nlike this, you're probably saying,\n\n192\n00:10:27.341 --> 00:10:28.310\nI don't get it.\n\n193\n00:10:28.310 --> 00:10:29.533\nHow is that actually going to work?\n\n194\n00:10:29.533 --> 00:10:31.931\nWell, this is something\nI can almost show you.\n\n195\n00:10:31.931 --> 00:10:34.599\nI wish I could say, I would love to\nactually be able to take this map and\n\n196\n00:10:34.599 --> 00:10:36.395\ninsert it into\nthe AdventureWorks database.\n\n197\n00:10:36.395 --> 00:10:39.923\nI just don't know how to do it or\nI would do it right now, but\n\n198\n00:10:39.923 --> 00:10:44.310\nlet's take a look at this query\nthat I went ahead and wrote here.\n\n199\n00:10:44.310 --> 00:10:47.808\nSo here it is, we're using\nthe AdventureWorks2014 database.\n\n200\n00:10:47.808 --> 00:10:50.840\nI'm gonna make sure I'm\nconnected to it and execute it.\n\n201\n00:10:50.840 --> 00:10:52.697\nNow, I've taught it\nactually showing me city.\n\n202\n00:10:52.697 --> 00:10:57.465\nAnd course the name,\npostal code country region code here and\n\n203\n00:10:57.465 --> 00:10:59.490\nI have spatial location.\n\n204\n00:10:59.490 --> 00:11:02.587\nNow I've got that marked out for\nright now, cuz I just wanna execute it.\n\n205\n00:11:02.587 --> 00:11:08.450\nLet me execute the whole thing, so\nthat we can see the whole thing here.\n\n206\n00:11:08.450 --> 00:11:12.311\nSo, this is usually the typical data\nthat we're normally looking for.\n\n207\n00:11:12.311 --> 00:11:16.830\nSo, here is the city name and\nthe state name that we have.\n\n208\n00:11:16.830 --> 00:11:18.935\nAnd then of course, postal code, region.\n\n209\n00:11:18.935 --> 00:11:21.420\nI limit it right here to the US.\n\n210\n00:11:21.420 --> 00:11:23.119\nSo, that's good information.\n\n211\n00:11:23.119 --> 00:11:26.090\nThat really can help us\nout when we do this.\n\n212\n00:11:26.090 --> 00:11:30.384\nBut let's say that what I want\nthough is I want to actually\n\n213\n00:11:30.384 --> 00:11:35.316\ninclude something else,\nwhich is the idea of that mapping idea.\n\n214\n00:11:35.316 --> 00:11:39.276\nAnd so if I take out my\ncomment lines like this and\n\n215\n00:11:39.276 --> 00:11:42.930\nwe run it again, and I execute it.\n\n216\n00:11:42.930 --> 00:11:46.580\nNow here, you're gonna see something\na little bit more different.\n\n217\n00:11:46.580 --> 00:11:47.844\nLet me see if I can scroll.\n\n218\n00:11:47.844 --> 00:11:50.726\nOops, got a pit down here and\nthen I can scroll.\n\n219\n00:11:50.726 --> 00:11:54.460\nLet me zoom back out here and\nmake that a little bit bigger instead.\n\n220\n00:11:55.620 --> 00:12:00.500\nThat way, we can see it a little\nbit better and then let me zoom in.\n\n221\n00:12:00.500 --> 00:12:03.510\nSo now, notice that I have the same thing.\n\n222\n00:12:03.510 --> 00:12:10.181\nWe have city and then name, postal code,\nyou name it and then I have this.\n\n223\n00:12:10.181 --> 00:12:13.805\n[LAUGH] Yeah, Daniel,\nwhat do you make of that?\n\n224\n00:12:13.805 --> 00:12:16.354\n>> Yeah,\nthat's obviously something that nobody,\n\n225\n00:12:16.354 --> 00:12:18.438\nexcept the computer knows what it means.\n\n226\n00:12:18.438 --> 00:12:19.813\n[LAUGH]\n>> That's exactly right.\n\n227\n00:12:19.813 --> 00:12:25.120\nSo for some reason, our database\ncan store information like this.\n\n228\n00:12:25.120 --> 00:12:30.910\nAnd because actually that geography,\nI keep saying, geographic, but data type.\n\n229\n00:12:30.910 --> 00:12:34.082\nIt knows how to read this and\nwhat it's doing is, it's actually\n\n230\n00:12:34.082 --> 00:12:38.510\nturning it into longitude and latitude\ncoordinates is what it's really doing.\n\n231\n00:12:38.510 --> 00:12:40.821\nNow, did I really know that that's what?\n\n232\n00:12:40.821 --> 00:12:42.190\nYes, I know that's what it's doing.\n\n233\n00:12:42.190 --> 00:12:42.972\nDo I know how it does it?\n\n234\n00:12:42.972 --> 00:12:44.160\nNo.\n\n235\n00:12:44.160 --> 00:12:46.070\nSo if someone actually\ninserts that in there,\n\n236\n00:12:46.070 --> 00:12:48.390\nit stores it in this\nparticular type of coding and\n\n237\n00:12:48.390 --> 00:12:53.370\nthat's perfectly fine, because it\nactually does a little bit more okay.\n\n238\n00:12:53.370 --> 00:12:56.609\nNow we've ran I don't know how many,\neven tests since the beginning.\n\n239\n00:12:56.609 --> 00:13:02.060\nI'm gonna say, at least 20, 30 different\nstatements or queries that we've done.\n\n240\n00:13:02.060 --> 00:13:07.040\nI'm gonna say at least that,\nbut notice up here though.\n\n241\n00:13:07.040 --> 00:13:10.310\nYou actually see that there's\nactually a third tab here and\n\n242\n00:13:10.310 --> 00:13:13.510\nthis says, spatial results.\n\n243\n00:13:13.510 --> 00:13:17.900\nSo not only did I ask you to run it and\nit gave me the spatial data listed\n\n244\n00:13:17.900 --> 00:13:22.500\nin my regular results that I wanted,\nbut notice it also gives me this.\n\n245\n00:13:22.500 --> 00:13:26.756\nAnd if I click on this one here it says,\nhey, there's too many objects here.\n\n246\n00:13:26.756 --> 00:13:29.440\nThere's over 5,000.\n\n247\n00:13:29.440 --> 00:13:32.185\nSo, let me just display the first 5,000.\n\n248\n00:13:32.185 --> 00:13:35.950\nNow, if I zoom out just a little bit here.\n\n249\n00:13:35.950 --> 00:13:39.136\nNow, you're not actually gonna\nbe able to see it very well.\n\n250\n00:13:39.136 --> 00:13:43.420\nBut on my screen, I can see it\na little bit better in this way.\n\n251\n00:13:43.420 --> 00:13:48.890\nThat if I were to actually take that map\nof the United States, like right here.\n\n252\n00:13:48.890 --> 00:13:52.264\nAnd I were able to underlay\nthis you would actually be able\n\n253\n00:13:52.264 --> 00:13:56.973\nto see that all these little kind of tiny\nblack dots that look not like anything,\n\n254\n00:13:56.973 --> 00:13:59.856\nyou'd actually see that\nit really does actually\n\n255\n00:13:59.856 --> 00:14:04.610\nmatch the outline like over here's\nthe west coast and California coming down.\n\n256\n00:14:04.610 --> 00:14:08.496\nTexas over here and here's Florida\nshooting out and kinda comes up,\n\n257\n00:14:08.496 --> 00:14:10.610\nand makes that same shape.\n\n258\n00:14:10.610 --> 00:14:14.180\nSo it's difficult, I wish I could\nmake it easier for you to see,\n\n259\n00:14:14.180 --> 00:14:18.640\nbut I can see it almost fairly\nwell here on my screen.\n\n260\n00:14:18.640 --> 00:14:19.895\nBut it kinda gives you that,\n\n261\n00:14:19.895 --> 00:14:22.939\nmaybe actually zooming out a little\nbit may help it a little bit more.\n\n262\n00:14:22.939 --> 00:14:27.050\nBut yeah, this is where I was able\nto get that map in the background,\n\n263\n00:14:27.050 --> 00:14:30.560\nthen you could even see\nthe layout right here.\n\n264\n00:14:30.560 --> 00:14:32.608\nBe able to show that and\nto do what it wants to.\n\n265\n00:14:32.608 --> 00:14:35.333\nNow it's saying that hey,\nI've got a little bit of a problem,\n\n266\n00:14:35.333 --> 00:14:38.010\nbecause it's actually 5,000 shapes or\nmore.\n\n267\n00:14:38.010 --> 00:14:40.705\nSo in other words,\nthey're pinpointed all throughout here.\n\n268\n00:14:40.705 --> 00:14:44.492\nIf it actually could show me everything,\nit probably fill in a lot more and\n\n269\n00:14:44.492 --> 00:14:47.940\na lot more better detail and\nwhat we actually end up seeing.\n\n270\n00:14:47.940 --> 00:14:52.600\nNow there's a couple of things you can\ndo over here with the spacial idea,\n\n271\n00:14:52.600 --> 00:14:54.870\nwhich is to select the projection.\n\n272\n00:14:54.870 --> 00:14:57.720\nIf I select some of these, there's\nactually a couple of different ones.\n\n273\n00:14:57.720 --> 00:15:00.277\nOne's called Mercator,\nRobinson and Vaughn.\n\n274\n00:15:00.277 --> 00:15:01.764\nI'm not exactly sure what they are, but\n\n275\n00:15:01.764 --> 00:15:03.910\nthey do display it\na little bit differently.\n\n276\n00:15:03.910 --> 00:15:06.956\nSo now you can see where it's actually\nkinda zoomed out a little bit and\n\n277\n00:15:06.956 --> 00:15:09.330\nmaybe you can start to see the,\nI can't really tell for\n\n278\n00:15:09.330 --> 00:15:11.506\nsure if you're actually\nseeing that any better.\n\n279\n00:15:11.506 --> 00:15:15.523\nRobinson doesn't seem to change it\ntoo much there, but Vaughn here,\n\n280\n00:15:15.523 --> 00:15:19.830\nyou can maybe see a little bit more in\ndetail as it kind of condenses it down.\n\n281\n00:15:19.830 --> 00:15:21.108\n>> It's loose, but you can see it.\n\n282\n00:15:21.108 --> 00:15:21.650\n>> Yeah.\n\n283\n00:15:21.650 --> 00:15:27.028\nSo that way, that's what it can help us do\nis actually be able to help us find and\n\n284\n00:15:27.028 --> 00:15:28.339\nlocate just this.\n\n285\n00:15:28.339 --> 00:15:29.995\nSo then we can that and say,\n\n286\n00:15:29.995 --> 00:15:35.170\nI can report it on a map like this if I\nwant to, if I have that in my database.\n\n287\n00:15:35.170 --> 00:15:36.044\nOr I can say, look,\n\n288\n00:15:36.044 --> 00:15:39.557\nI really don't need the actual mapping\nof every individual one to be displayed.\n\n289\n00:15:39.557 --> 00:15:43.710\nI just need to prove that I\nhave customers in the US.\n\n290\n00:15:43.710 --> 00:15:47.009\nSo that way, I can show\nthe geometric shape in that way.\n\n291\n00:15:47.009 --> 00:15:50.429\nNow sometimes you want\nit to be more than this,\n\n292\n00:15:50.429 --> 00:15:53.761\na little more abstract\nin this way instead and\n\n293\n00:15:53.761 --> 00:15:59.392\nthat's what gives us what we would\ncall the spacial envelope aggregation.\n\n294\n00:15:59.392 --> 00:16:03.137\nI mean, who would have ever though that we\nwould have come up with terms like this?\n\n295\n00:16:03.137 --> 00:16:05.689\nBut this is also what can happen as well.\n\n296\n00:16:05.689 --> 00:16:08.010\nNotice that the same\nthing here on the query.\n\n297\n00:16:08.010 --> 00:16:09.310\nIt's just about the same.\n\n298\n00:16:09.310 --> 00:16:12.660\nI've just changed it instead\nof the country to region.\n\n299\n00:16:12.660 --> 00:16:15.140\nAnd I limited it to Florida, okay?\n\n300\n00:16:15.140 --> 00:16:18.660\nSo in this way,\nwhen I have a map of Florida,\n\n301\n00:16:18.660 --> 00:16:20.910\nlike what I have over here\non the left hand side.\n\n302\n00:16:20.910 --> 00:16:23.740\nBut I didn't want to\nactually divide it up.\n\n303\n00:16:23.740 --> 00:16:26.690\nI didn't even want the shape\nof Florida to show up.\n\n304\n00:16:26.690 --> 00:16:29.980\nI just wanted to be able\nto represent it as a whole.\n\n305\n00:16:29.980 --> 00:16:32.440\nAnd the idea of an envelope is this,\nright,\n\n306\n00:16:32.440 --> 00:16:34.350\nis that it actually does represent it.\n\n307\n00:16:34.350 --> 00:16:37.470\nEven though it's actually just a square,\nit represents, but\n\n308\n00:16:37.470 --> 00:16:39.910\nit envelopes the entire state here.\n\n309\n00:16:39.910 --> 00:16:45.050\nNow, we can of course do this and that\nis what they call a Polygonal Envelope.\n\n310\n00:16:46.090 --> 00:16:46.948\nGo figure, okay?\n\n311\n00:16:46.948 --> 00:16:49.690\nSo that's because I've\ngot multiple sides here.\n\n312\n00:16:49.690 --> 00:16:52.720\nPolygonal, I know, neat term, right?\n\n313\n00:16:52.720 --> 00:16:57.631\nOr we can actually use a circle to\nessentially do the same thing, okay?\n\n314\n00:16:57.631 --> 00:17:02.419\nNow, this one of course has a fancier\nname, it's called a Curved Polygonal.\n\n315\n00:17:02.419 --> 00:17:04.730\nEven though there's no sides to a circle.\n\n316\n00:17:04.730 --> 00:17:06.160\nBut there you go.\n\n317\n00:17:06.160 --> 00:17:10.530\nSo you do have where you can actually\nuse those types to help us out.\n\n318\n00:17:10.530 --> 00:17:14.300\nAnd you may do something like that\nif you want just to represent that.\n\n319\n00:17:14.300 --> 00:17:17.500\nHey, Florida has customers, okay?\n\n320\n00:17:17.500 --> 00:17:18.530\nIn whatever state you want.\n\n321\n00:17:18.530 --> 00:17:23.320\nBut you're not really trying to get so\ninterested in the geography of it itself.\n\n322\n00:17:23.320 --> 00:17:27.300\nBut we can use envelope types\nlike that to help us out.\n\n323\n00:17:27.300 --> 00:17:30.870\nIf that's what we wanna represent\nespecially among a group of\n\n324\n00:17:30.870 --> 00:17:34.718\ndifferent objects and we just didn't\nwanna do an entire map that we wanted to.\n\n325\n00:17:34.718 --> 00:17:40.409\nOf course, there's also what we\ncall Collection Aggregates instead.\n\n326\n00:17:40.409 --> 00:17:45.450\nSometimes, let's say that the original\nmap you had is fairly fancy.\n\n327\n00:17:45.450 --> 00:17:48.590\nOkay so, you actually had\nthat inside your database.\n\n328\n00:17:48.590 --> 00:17:52.310\nSo here I chose Australia as an example\nand the reason why I did is it's simpler\n\n329\n00:17:52.310 --> 00:17:54.370\nand I like the colors that\nI actually put out here.\n\n330\n00:17:54.370 --> 00:17:57.080\nSo, you can actually choose like here and\n\n331\n00:17:57.080 --> 00:18:02.420\nnotice a Collection Aggregation is not\nreally getting rid of the sections.\n\n332\n00:18:02.420 --> 00:18:06.960\nBut it's just simply saying look, we want\nthis to look, as a collective whole, so\n\n333\n00:18:06.960 --> 00:18:09.612\ninstead of dividing it up with\nthe individual colors here,\n\n334\n00:18:09.612 --> 00:18:14.040\nwe're gonna still report\nthe same boundaries, but\n\n335\n00:18:14.040 --> 00:18:19.570\nnow we're actually making what, a single\ncollection instead, as an aggregation.\n\n336\n00:18:19.570 --> 00:18:23.310\nAnd so here we just change the actual\naggregate name, chose country,\n\n337\n00:18:23.310 --> 00:18:27.010\nand this time I chose the abbreviation\nhere for Australia instead.\n\n338\n00:18:27.010 --> 00:18:31.230\nSo these collection aggregates can also\nhelp us to display it in that way, and\n\n339\n00:18:31.230 --> 00:18:35.990\nthen I can put that spacial information\nthat we had before, overlay it, and put it\n\n340\n00:18:35.990 --> 00:18:39.470\nright there on the map, and that way\nyou can see the little individual dots.\n\n341\n00:18:39.470 --> 00:18:43.390\nFind all those Taco Bells in Australia for\nour friend Daniel over here, and\n\n342\n00:18:43.390 --> 00:18:44.606\nhe'd be happy and ready to go.\n\n343\n00:18:44.606 --> 00:18:47.730\n[LAUGH]\n>> I get $5 every time I mention\n\n344\n00:18:47.730 --> 00:18:49.670\nTaco Bell, Taco Bell, Taco Bell.\n\n345\n00:18:49.670 --> 00:18:50.580\nJust kidding.\n\n346\n00:18:50.580 --> 00:18:51.680\n>> Do they know that?\n\n347\n00:18:51.680 --> 00:18:55.830\n>> I didn't say I got $5 bucks from them.\n\n348\n00:18:55.830 --> 00:18:56.770\n>> Well, that's true.\n\n349\n00:18:56.770 --> 00:19:00.863\nAll right, now our last one's\na little bit unusual, at least for\n\n350\n00:19:00.863 --> 00:19:03.550\nme it's a little bit more unusual, okay?\n\n351\n00:19:03.550 --> 00:19:07.271\nBut there was, I was trying to think\nabout how do I show this cuz you know,\n\n352\n00:19:07.271 --> 00:19:08.730\nthis is done statically.\n\n353\n00:19:08.730 --> 00:19:12.890\nDynamically it would be one thing, like\nyeah I just feed this in and it works, but\n\n354\n00:19:12.890 --> 00:19:16.170\nstatically trying to show it is\na little bit more unusual, okay?\n\n355\n00:19:16.170 --> 00:19:20.560\nLast one is what they call\na convex hull aggregate.\n\n356\n00:19:20.560 --> 00:19:22.940\nI'll probably never\nhave to say that again.\n\n357\n00:19:22.940 --> 00:19:24.130\nBut no, more than likely I will.\n\n358\n00:19:24.130 --> 00:19:28.030\nBut just kinda realize that this\nis something else here, okay?\n\n359\n00:19:28.030 --> 00:19:29.900\nSo what they're saying\nwith the ConvexHull,\n\n360\n00:19:29.900 --> 00:19:32.780\nnotice again the only thing I\nreally changed is right here.\n\n361\n00:19:32.780 --> 00:19:33.920\nConvexHullAggregate.\n\n362\n00:19:33.920 --> 00:19:36.330\nRemember you have to include\nthe data type in here.\n\n363\n00:19:36.330 --> 00:19:37.280\nChange the region.\n\n364\n00:19:37.280 --> 00:19:39.880\nAnd then in Australia as well.\n\n365\n00:19:39.880 --> 00:19:41.340\nLet's see, that should be country.\n\n366\n00:19:41.340 --> 00:19:41.930\nI'm sorry.\n\n367\n00:19:41.930 --> 00:19:43.810\nSee I forgot to change one thing here.\n\n368\n00:19:43.810 --> 00:19:44.590\nLet me verify.\n\n369\n00:19:44.590 --> 00:19:47.020\nChange that to country this time.\n\n370\n00:19:47.020 --> 00:19:49.410\nThere we go,\nthat'll make a little bit more sense.\n\n371\n00:19:49.410 --> 00:19:54.980\nTo take the entire country, and instead of\nactually showing you a map of the country,\n\n372\n00:19:54.980 --> 00:19:59.590\nI want it to be the same thing,\nthe idea of some type of polygon.\n\n373\n00:19:59.590 --> 00:20:04.770\nBut I want it as much as possible,\nto hug the shape, Okay?\n\n374\n00:20:04.770 --> 00:20:07.100\nSo wherever I can I'm trying\nto actually hug the shape.\n\n375\n00:20:07.100 --> 00:20:08.760\nI don't know if you can\nactually see that yellow.\n\n376\n00:20:08.760 --> 00:20:10.510\nCan you see that yellow?\n\n377\n00:20:10.510 --> 00:20:11.200\nI'm hoping you can.\n\n378\n00:20:11.200 --> 00:20:14.390\nI probably should have made that black or\nso, but yeah.\n\n379\n00:20:14.390 --> 00:20:16.920\nBut then, now that we have that shape,\n\n380\n00:20:16.920 --> 00:20:19.880\nI'm gonna move this out of the way\nto try to make my point, right?\n\n381\n00:20:19.880 --> 00:20:23.170\nWell, then we can represent\nthat by what we see over\n\n382\n00:20:23.170 --> 00:20:27.430\nhere on the right hand side instead\nwhich is just that particular shape.\n\n383\n00:20:27.430 --> 00:20:32.200\nSo if you did have countries that you\nwanted, or even counties that you want,\n\n384\n00:20:32.200 --> 00:20:35.300\nbut you didn't want to get so\ndetailed into, that's not the shape,\n\n385\n00:20:35.300 --> 00:20:37.290\nyou just wanted to represent it this way.\n\n386\n00:20:37.290 --> 00:20:41.570\nWell, you can instead actually have a\nshape instead of just a square or a circle\n\n387\n00:20:41.570 --> 00:20:47.650\nthat will allow you to kind of almost\nfeel like it's actually the real thing,\n\n388\n00:20:47.650 --> 00:20:51.880\nbut you wanted to be a little bit more\nabstract with your particular creation,\n\n389\n00:20:51.880 --> 00:20:55.330\nand represent that as being\nAustralia at the same time too.\n\n390\n00:20:55.330 --> 00:20:56.961\n>> Get all Salvador Dali on it.\n\n391\n00:20:56.961 --> 00:20:59.779\n[LAUGH]\n>> I guess you could if you wanted too.\n\n392\n00:20:59.779 --> 00:21:04.580\nSo this is where you might actually do\nsome type of very basic layout plan.\n\n393\n00:21:04.580 --> 00:21:05.650\nLet's say like a map, right?\n\n394\n00:21:05.650 --> 00:21:07.640\nIf you wanted to draw\na very simple map for\n\n395\n00:21:07.640 --> 00:21:12.290\nyour customers, you might put your store\nover here and just have a shape, and\n\n396\n00:21:12.290 --> 00:21:15.130\nthen say, here's how you get\nto it from the highway, and\n\n397\n00:21:15.130 --> 00:21:19.360\nhave a different shape that represents\nthat, or whatever it might be.\n\n398\n00:21:19.360 --> 00:21:24.900\nSo we can actually use this to kind of\nhelp if you wanted to do more abstraction\n\n399\n00:21:24.900 --> 00:21:29.680\nwise types of things, to help understand\nthat idea of that spatial relationship.\n\n400\n00:21:29.680 --> 00:21:32.200\nSo remember the requirements here though,\nokay?\n\n401\n00:21:32.200 --> 00:21:34.830\nFirst and foremost,\nyou have to have data, okay?\n\n402\n00:21:34.830 --> 00:21:41.287\nThat actually has, as its data type,\neither geometry, okay, or geography, okay?\n\n403\n00:21:41.287 --> 00:21:43.740\nSo that is pretty much the key.\n\n404\n00:21:43.740 --> 00:21:47.640\nSo in other words, if it can actually do\nlike the coordinate values and stuff, and\n\n405\n00:21:47.640 --> 00:21:51.400\nshow you a linear path from here to there,\nthen that can actually do that idea and\n\n406\n00:21:51.400 --> 00:21:54.060\nthat's what that geometry is about, okay?\n\n407\n00:21:54.060 --> 00:21:59.110\nOr you can do the geography itself, again\nit can take even things like the GPS data,\n\n408\n00:21:59.110 --> 00:22:02.560\ngo to map that stuff out for\nit, pull the map data in and\n\n409\n00:22:02.560 --> 00:22:05.470\nnow you can actually display it\nin one of those different ways.\n\n410\n00:22:05.470 --> 00:22:09.040\nWhether it's the Union Aggregate that you\nend up using, the Envelope Aggregate,\n\n411\n00:22:09.040 --> 00:22:12.860\nthe Collection, or\neven if the ConvexHullAggregate,\n\n412\n00:22:12.860 --> 00:22:17.340\nit normally can help you display data\nthat you're not used to displaying\n\n413\n00:22:17.340 --> 00:22:21.900\nin a way that will really be helpful for\nyou or your customers in a different way.\n\n414\n00:22:21.900 --> 00:22:25.780\nSo, hopefully that's a good overview for\nus, and it's another way to show more\n\n415\n00:22:25.780 --> 00:22:29.800\naggregation that can be done inside\nusing our select statements.\n\n416\n00:22:29.800 --> 00:22:33.590\n>> Yeah, it's very cool stuff,\nthis whole Spacial Aggregation business.\n\n417\n00:22:33.590 --> 00:22:37.837\nI think spatially anyway so it was really\ngood for me to see how this can work.\n\n418\n00:22:37.837 --> 00:22:39.301\nJust random data on a table,\n\n419\n00:22:39.301 --> 00:22:43.535\na lot of times it just ends up not really\ngiving the punch that you're looking for.\n\n420\n00:22:43.535 --> 00:22:48.220\nSometimes when you add the idea of,\nwell I understand that's a country,\n\n421\n00:22:48.220 --> 00:22:51.110\nI've seen that country\nbefore I get the idea of it.\n\n422\n00:22:51.110 --> 00:22:53.170\nEven though it can get abstract,\n\n423\n00:22:53.170 --> 00:22:57.150\nit really brings it into more of\na solidified idea in our mind's eye.\n\n424\n00:22:57.150 --> 00:23:02.000\nAnd again, going back to the idea of how\neasily is this going to be consumed by me\n\n425\n00:23:02.000 --> 00:23:04.680\nas an end-user to understand the data?\n\n426\n00:23:04.680 --> 00:23:09.065\nThis is a tremendous help for us, so\nRonnie we do definitely thank you on this\n\n427\n00:23:09.065 --> 00:23:11.615\none, for showing us how to implement this-\n>> Cool.\n\n428\n00:23:11.615 --> 00:23:13.295\n>> In our SQL environments.\n\n429\n00:23:13.295 --> 00:23:14.085\nThat being said,\n\n430\n00:23:14.085 --> 00:23:17.555\nlooks like we've come to the end of\nall these great aggregate functions.\n\n431\n00:23:17.555 --> 00:23:18.565\nI hope you guys have enjoyed it.\n\n432\n00:23:18.565 --> 00:23:20.075\nWe thank Ronnie for being here.\n\n433\n00:23:20.075 --> 00:23:23.165\nWe thank you guys for joining us as well,\nbut we're gonna go ahead and sign off for\n\n434\n00:23:23.165 --> 00:23:25.435\nITProTV, and I've been your host,\nDaniel Lowrie.\n\n435\n00:23:25.435 --> 00:23:26.125\n>> And I'm Ronnie Wong.\n\n436\n00:23:26.125 --> 00:23:27.382\n>> And we'll see you next time.\n\n437\n00:23:27.382 --> 00:23:34.069\n[SOUND]\n\n",
          "vimeoId": "164413691"
        },
        {
          "description": "In this episode, Daniel and Ronnie explain how to query SQL Server 2014 using Synonyms, Intersects, and Excepts. They start by looking at the Synonyms, which are similar to Aliases, but are more permanent. Next they describe the use of the Intersect which returns distinct rows that are common between sets. Finally, they explore the Except which returns distinct rows that are in the first query but not the second.",
          "length": "1855",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-5-query_using_synonyms_except_and_intersect-042516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-5-query_using_synonyms_except_and_intersect-042516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-5-query_using_synonyms_except_and_intersect-042516-1-sm.jpg",
          "title": "Query Using Synonyms, Except and Intersect",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.962 --> 00:00:16.935\nAll right, greetings everyone, and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:16.935 --> 00:00:20.887\nI'm your host Daniel Lowrie, and in\ntoday's episode we are continuing on with\n\n4\n00:00:20.887 --> 00:00:25.135\nour series of querying the Microsoft SQL\nServer version 2014, joining us back in\n\n5\n00:00:25.135 --> 00:00:29.147\nstudio again today to help us out with\nthat very endeavor is our good friend, Mr.\n\n6\n00:00:29.147 --> 00:00:29.870\nRonnie Wong.\n\n7\n00:00:29.870 --> 00:00:31.710\nRonnie, welcome back to the show,\nhow's it going today?\n\n8\n00:00:31.710 --> 00:00:33.564\n>> It is going great today,\n\n9\n00:00:33.564 --> 00:00:38.700\nglad to be back with us as we continue\non to take a look at SQL 2014.\n\n10\n00:00:38.700 --> 00:00:41.379\nAnd we're specifically gonna\nbe taking a look at some of\n\n11\n00:00:41.379 --> 00:00:44.970\nthe newer code that we may actually end\nup using to help us to write better and\n\n12\n00:00:44.970 --> 00:00:46.990\nmore efficient types of queries.\n\n13\n00:00:46.990 --> 00:00:48.920\nNow, you'll not use this\nin every situation, but\n\n14\n00:00:48.920 --> 00:00:53.170\nyou will see some situations in which\nthis will be beneficial for you.\n\n15\n00:00:53.170 --> 00:00:55.220\nAnd so,\nthat's what we're gonna take a look at.\n\n16\n00:00:55.220 --> 00:00:59.620\nWe're specifically gonna be focusing in on\nthe idea of creating what we call synonyms\n\n17\n00:00:59.620 --> 00:01:03.300\nto help us in our querying, as well as\nwe'll take a look at very specialized\n\n18\n00:01:03.300 --> 00:01:07.323\ntypes of joins that we call EXCEPT and\nINTERSECT as well.\n\n19\n00:01:07.323 --> 00:01:11.200\nAnd so, understanding these things are\ngonna help you to be able to query much\n\n20\n00:01:11.200 --> 00:01:14.490\nmore efficiently, be able to do\nsome of the things that, really,\n\n21\n00:01:14.490 --> 00:01:18.510\nthe typing is what normally gets in the\nway, and we'll talk about the reason why.\n\n22\n00:01:18.510 --> 00:01:21.210\nSo, when we talk about\nthe idea of synonyms,\n\n23\n00:01:21.210 --> 00:01:24.670\nespecially in the English language,\nwe have plenty of them.\n\n24\n00:01:24.670 --> 00:01:27.210\nThe idea is fairly simple for most of us.\n\n25\n00:01:27.210 --> 00:01:30.330\nWe find a word and\nwe find another word that has almost, or\n\n26\n00:01:30.330 --> 00:01:33.300\nif not exactly the same definition to it,\nand\n\n27\n00:01:33.300 --> 00:01:36.460\nwe end up using that word as\na replacement for the original.\n\n28\n00:01:36.460 --> 00:01:36.980\nSo, there it is.\n\n29\n00:01:36.980 --> 00:01:41.970\nThere's the grammar, as far as\nRonnie Wong knows, as far as synonyms go.\n\n30\n00:01:41.970 --> 00:01:44.520\nThat's the grammar lesson for today.\n\n31\n00:01:44.520 --> 00:01:45.640\nBut you might be wondering,\n\n32\n00:01:45.640 --> 00:01:49.800\nwhat do synonyms have to do\nwith things like SQL Server?\n\n33\n00:01:49.800 --> 00:01:53.220\nWell, remember that right now,\nas far as best practice goes,\n\n34\n00:01:53.220 --> 00:01:57.710\nwhen we start to actually do a type\nof query, we normally go ahead and\n\n35\n00:01:57.710 --> 00:02:00.270\nwe type out that keyword select.\n\n36\n00:02:00.270 --> 00:02:03.473\nAnd then, we're actually told that\nwe need to type out, of course,\n\n37\n00:02:03.473 --> 00:02:04.587\nthen that column name.\n\n38\n00:02:04.587 --> 00:02:08.875\nAnd the best practice in that column name\nthough is, or I shouldn't say the best\n\n39\n00:02:08.875 --> 00:02:13.227\npractice, the general accepted practice,\nand the way that they recommend that\n\n40\n00:02:13.227 --> 00:02:16.301\nyou do it is by using what they\ncall that full schema name.\n\n41\n00:02:16.301 --> 00:02:20.865\nAnd so, normally when you started\nseeing things inside of our querying,\n\n42\n00:02:20.865 --> 00:02:25.207\nif you remember in some other episodes\nwhere we had to do something like\n\n43\n00:02:25.207 --> 00:02:29.549\nperson dot person, address, and\nthen the name or the street name, or\n\n44\n00:02:29.549 --> 00:02:31.550\nemployee department history.\n\n45\n00:02:31.550 --> 00:02:35.340\nIt was actually person dot\nemployee department history\n\n46\n00:02:35.340 --> 00:02:39.630\ndot something else to actually be\nable to do all those things, right?\n\n47\n00:02:39.630 --> 00:02:43.430\nSo, it almost looked like a DNS name,\nand these names would get very long.\n\n48\n00:02:43.430 --> 00:02:48.290\nWell, we actually used aliases in\nprevious episodes to shorten up\n\n49\n00:02:48.290 --> 00:02:52.990\nthat kind of schema, that hierarchy\nto just use either a single letter in\n\n50\n00:02:52.990 --> 00:02:57.550\nplace of the actual table name, and\nthen dot whatever the field name is.\n\n51\n00:02:57.550 --> 00:03:00.900\nAnd that did shorten things\nup a little bit more.\n\n52\n00:03:00.900 --> 00:03:05.171\nNow, with the aliases, we can actually\nuse those for several different things.\n\n53\n00:03:05.171 --> 00:03:09.826\nBut synonyms give us a little bit more\nflexibility, because what synonyms allow\n\n54\n00:03:09.826 --> 00:03:14.483\nus to do, is to essentially take that\nentire name, regardless of how long it is,\n\n55\n00:03:14.483 --> 00:03:18.660\nand condense it up and do what we want\nit to do, okay, by actually calling\n\n56\n00:03:18.660 --> 00:03:23.599\non a fairly short name, depending on\nwhat you wanna make it, to help you out.\n\n57\n00:03:24.600 --> 00:03:28.610\nSo, when we start actually using synonyms,\nthe hard thing to remember, especially\n\n58\n00:03:28.610 --> 00:03:32.389\nthose of us that have actually been using\ndatabases for a long time, is that we're\n\n59\n00:03:32.389 --> 00:03:35.980\ngonna create them and it's gonna create\nan object inside of our database.\n\n60\n00:03:35.980 --> 00:03:40.080\nBut that object is not gonna\nhold any real data at all.\n\n61\n00:03:40.080 --> 00:03:43.460\nIt is really just a name that's\nessentially gonna be linked\n\n62\n00:03:43.460 --> 00:03:47.000\nto the actual object that's\nin our database instead.\n\n63\n00:03:47.000 --> 00:03:50.520\nWe're used to, at some point,\nmaybe creating what we call views, or\n\n64\n00:03:50.520 --> 00:03:53.530\nother tables, or\nanything else that we might have, but\n\n65\n00:03:53.530 --> 00:03:56.540\nsynonyms will instead\nactually just be a name.\n\n66\n00:03:56.540 --> 00:04:01.300\nNow, the neat thing is, we can actually\ncreate synonyms for tables like we said,\n\n67\n00:04:01.300 --> 00:04:06.330\nviews, stored procedures,\nfunctions that we actually come up with,\n\n68\n00:04:06.330 --> 00:04:07.860\nas well as aggregation.\n\n69\n00:04:07.860 --> 00:04:09.820\nSo, we actually do have a lot of these.\n\n70\n00:04:09.820 --> 00:04:14.000\nYou might actually come up and say,\nthe average of all my sales, quantities,\n\n71\n00:04:14.000 --> 00:04:17.750\nor the average of all my yearly sales,\nwhatever it might be, and\n\n72\n00:04:17.750 --> 00:04:22.150\ncreate that as being a synonym, and\ngo ahead and run that entire series there\n\n73\n00:04:22.150 --> 00:04:25.340\nof all the select statements and\neverything else as a view, store.\n\n74\n00:04:25.340 --> 00:04:28.190\nAnd then, actually create a shorter\nname for it, if you wanted to, and\n\n75\n00:04:28.190 --> 00:04:31.640\nhave that stored, so it can be used very\nquickly instead of having to type out\n\n76\n00:04:31.640 --> 00:04:34.760\na very long type of query or\nthe way that you have the store view.\n\n77\n00:04:34.760 --> 00:04:38.370\n>> Ronnie, it sounds a lot like when\nyou're describing a variable, right?\n\n78\n00:04:38.370 --> 00:04:40.970\nYou're saying I'm giving it a name and\n\n79\n00:04:40.970 --> 00:04:43.360\nnow I'm inserting the value\ncoming from somewhere else.\n\n80\n00:04:43.360 --> 00:04:44.750\n>> Right, yeah, it really is.\n\n81\n00:04:44.750 --> 00:04:47.430\nIt's fairly similar to that concept and\nidea.\n\n82\n00:04:47.430 --> 00:04:51.314\nThe hard thing is to remember is that\nwe're not gonna create synonyms for\n\n83\n00:04:51.314 --> 00:04:55.190\nsomething that we've created as far\nas just as an object onto itself.\n\n84\n00:04:55.190 --> 00:04:57.590\nEven though it creates an object,\nit holds no data value, and\n\n85\n00:04:57.590 --> 00:04:59.270\nthat's the kind of key here.\n\n86\n00:04:59.270 --> 00:05:02.440\nSo, let me show you an example right\naway of where we might choose to\n\n87\n00:05:02.440 --> 00:05:06.090\ncreate a synonym for things like tables,\nif we have it, okay.\n\n88\n00:05:06.090 --> 00:05:11.400\nSo, here on my computer, we're gonna\nbe using the AdventureWorks2012,\n\n89\n00:05:11.400 --> 00:05:16.510\nand I told you, at least in another\nepisode, my reasoning behind this, right?\n\n90\n00:05:16.510 --> 00:05:20.950\nThat if I'm querying the database,\nI'm gonna use the AdventureWorks2014, so\n\n91\n00:05:20.950 --> 00:05:24.100\nI can just do regular select queries,\nand query that database.\n\n92\n00:05:24.100 --> 00:05:26.750\nBut I'm gonna make any modification and\nchanges,\n\n93\n00:05:26.750 --> 00:05:30.980\nI'm gonna make it to this 2012 database\ninstead, and since I've told you,\n\n94\n00:05:30.980 --> 00:05:34.560\nwhat I'm doing is I'm gonna actually\nadd in some objects to my database.\n\n95\n00:05:34.560 --> 00:05:36.470\nI'm gonna go ahead and use that.\n\n96\n00:05:36.470 --> 00:05:39.449\nSo, I'm gonna select that and\ngo and highlight it, and verify.\n\n97\n00:05:39.449 --> 00:05:46.950\nI am now actually connected to\nthe AdventureWorks2012 database.\n\n98\n00:05:46.950 --> 00:05:49.690\nAnd I am,\nI just wanna make sure I verify that, and\n\n99\n00:05:49.690 --> 00:05:54.550\nthen we're gonna take a look at this\nparticular first example that I have.\n\n100\n00:05:54.550 --> 00:05:59.975\nNow, on this one and this is where\nDaniel actually agree with me.\n\n101\n00:05:59.975 --> 00:06:03.550\nDaniel, at any point, should Ronnie\nwon't ever type out anything like this\n\n102\n00:06:03.550 --> 00:06:05.470\non a screen as people are watching?\n\n103\n00:06:05.470 --> 00:06:06.860\n>> That's a negative ghost rider.\n\n104\n00:06:06.860 --> 00:06:08.180\nThat pattern is full.\n\n105\n00:06:08.180 --> 00:06:10.950\nI've seen Ronnie type and\nit's not the prettiest thing in the world.\n\n106\n00:06:10.950 --> 00:06:14.705\nIf you've watched any of our shows,\nyou're probably right there with me.\n\n107\n00:06:14.705 --> 00:06:16.454\n[LAUGH]\n>> That is why I actually have created\n\n108\n00:06:16.454 --> 00:06:17.691\nall this code beforehand, so\n\n109\n00:06:17.691 --> 00:06:20.730\nyou don't actually have to watch\nme try to muddle through this.\n\n110\n00:06:20.730 --> 00:06:23.630\nNow, the great thing is even though\nSQL Server helps to fill in a lot\n\n111\n00:06:23.630 --> 00:06:26.847\nof that typing,\nit's still a lot of extra steps.\n\n112\n00:06:26.847 --> 00:06:31.000\nI have to start typing, and then I can use\ntab and that automatically fills it in.\n\n113\n00:06:31.000 --> 00:06:33.645\nBut what if I could\ntake this entire thing,\n\n114\n00:06:33.645 --> 00:06:38.900\nHumanResurces.EmployeeDepartmentHistory\nand\n\n115\n00:06:38.900 --> 00:06:43.790\nchange it up and make it something\nshort and descriptive at the same time.\n\n116\n00:06:43.790 --> 00:06:47.980\nWell, that would be a key idea,\nespecially for someone like me,\n\n117\n00:06:47.980 --> 00:06:52.360\nin which the typing and the longer\nit goes, the worse it's gonna be.\n\n118\n00:06:52.360 --> 00:06:57.250\nAnd something just that simple, that's\nwhat we actually are doing here, kay,\n\n119\n00:06:57.250 --> 00:06:59.160\nis taking something that\nmay actually be long and\n\n120\n00:06:59.160 --> 00:07:01.580\ndifficult to remember,\nto be able to do that.\n\n121\n00:07:01.580 --> 00:07:05.135\nAnd so, some of the table names,\njust like I'm showing you right here,\n\n122\n00:07:05.135 --> 00:07:07.625\nare fairly long in this bigger database.\n\n123\n00:07:07.625 --> 00:07:11.940\nNow, you may be going, there's no tables\nlike this in my database, and no doubt,\n\n124\n00:07:11.940 --> 00:07:15.130\nthere may not be, but\nin this one, there definitely is.\n\n125\n00:07:15.130 --> 00:07:19.390\nNow, Daniel, I remember actually\ngoing down to another competitor\n\n126\n00:07:20.460 --> 00:07:25.700\ninsurance, and actually did some database\nteaching down there at Nationwide,\n\n127\n00:07:25.700 --> 00:07:27.665\nanother, oops, another center.\n\n128\n00:07:27.665 --> 00:07:29.400\n>> I don't work for them anymore.\n\n129\n00:07:29.400 --> 00:07:30.250\n>> No.\n\n130\n00:07:30.250 --> 00:07:34.025\nI remember going to one of your\nformer competitors down there, and\n\n131\n00:07:34.025 --> 00:07:36.850\nthen they were saying, no,\nour table names are really short and\n\n132\n00:07:36.850 --> 00:07:38.970\nwe don't have to worry\nabout anything like this.\n\n133\n00:07:38.970 --> 00:07:42.710\nAnd then, when I took a look at it,\nit's not that it was long, but\n\n134\n00:07:42.710 --> 00:07:44.342\nit was in somebody's code.\n\n135\n00:07:44.342 --> 00:07:48.408\nSomebody had actually created this weird\ncode that only they knew, and that\n\n136\n00:07:48.408 --> 00:07:52.933\nperson now left, and they're like, well,\nwe can't remember all of these names.\n\n137\n00:07:52.933 --> 00:07:55.462\nI was like,\nthis is a perfect example for this,\n\n138\n00:07:55.462 --> 00:07:57.690\nis to be able to use\nwhat we call a synonym.\n\n139\n00:07:57.690 --> 00:08:02.200\nAnd that way we don't ever have to refer\nto this long gigantic name again or\n\n140\n00:08:02.200 --> 00:08:05.798\nthat unusual coded, you know name for\neach of the tables.\n\n141\n00:08:05.798 --> 00:08:07.697\nYou might wonder like why\nwould anybody do that?\n\n142\n00:08:07.697 --> 00:08:10.460\nWell, for them it's job security\nmore than anything else.\n\n143\n00:08:10.460 --> 00:08:14.166\nThey were the only ones that understood\nthe structure of the database, so\n\n144\n00:08:14.166 --> 00:08:18.367\nthey named it only stuff that they could\nactually run queries against very easily.\n\n145\n00:08:18.367 --> 00:08:21.327\nSo it always made it actually that way for\nus.\n\n146\n00:08:21.327 --> 00:08:24.333\nSo what we want to do is one actually\nshow you how to create this and\n\n147\n00:08:24.333 --> 00:08:26.180\nshow you what's going to happen here.\n\n148\n00:08:26.180 --> 00:08:28.675\nSo let me show you at this point here,\n\n149\n00:08:28.675 --> 00:08:31.985\nwhat should happen when\nwe run this first query.\n\n150\n00:08:31.985 --> 00:08:35.433\nSo what should end up happening is\nover here on the left-hand side,\n\n151\n00:08:35.433 --> 00:08:39.741\nwhere you see AdventureWorks2012,\nI'm going to expand that out right there.\n\n152\n00:08:39.741 --> 00:08:43.727\nAnd notice we have our database\ndiagrams tables views and\n\n153\n00:08:43.727 --> 00:08:45.894\nnotice synonyms here, okay.\n\n154\n00:08:45.894 --> 00:08:48.170\nNow synonyms, if I click on it,\nI'm trying to.\n\n155\n00:08:48.170 --> 00:08:50.083\nNothing is actually happening, and\n\n156\n00:08:50.083 --> 00:08:53.798\nthat's because we don't have any\nsynonyms created right now, okay.\n\n157\n00:08:53.798 --> 00:08:57.467\nSo instead, we're gonna create one and\nwhat should happen is that this\n\n158\n00:08:57.467 --> 00:09:01.578\nparticular node right here should populate\nwith the new synonym that I create.\n\n159\n00:09:01.578 --> 00:09:04.889\nAnd that now means there's an object\nin my database that can be\n\n160\n00:09:04.889 --> 00:09:07.256\nreferred to at any other\ntime that I need to.\n\n161\n00:09:07.256 --> 00:09:12.015\nNow, not only can we use synonyms to\nhelp us to do things like that, but\n\n162\n00:09:12.015 --> 00:09:16.616\nif I do have multiple databases\nconnected over here and over there,\n\n163\n00:09:16.616 --> 00:09:21.135\nwell I can actually also create\nsynonyms for objects I made query on\n\n164\n00:09:21.135 --> 00:09:25.762\nanother database to help me to bring\nthat information over as well.\n\n165\n00:09:25.762 --> 00:09:31.100\nNow, I do have to be careful when we\nstart creating the idea of synonyms too.\n\n166\n00:09:31.100 --> 00:09:36.220\nOne, we have to at least have, let me\nmake sure I'm telling you this right,\n\n167\n00:09:36.220 --> 00:09:41.506\neither sysadmins or the DB_owner\npermissions to be able to create synonyms.\n\n168\n00:09:41.506 --> 00:09:45.796\nAnd if you're also gonna be creating\nsynonyms or you're going to be accessing\n\n169\n00:09:45.796 --> 00:09:50.086\nanother database by using these synonyms,\nyou also have to have the ability of\n\n170\n00:09:50.086 --> 00:09:54.330\ncourse to be able to query against that\ndatabase over in the other one as well.\n\n171\n00:09:54.330 --> 00:09:58.040\nSo just kind of be careful with this.\n\n172\n00:09:58.040 --> 00:10:02.083\nIf you can't create a particular query,\nmake sure you have at least those or\n\n173\n00:10:02.083 --> 00:10:06.190\nget those permissions assigned to you\nwere they will allow you to create those\n\n174\n00:10:06.190 --> 00:10:07.792\nsynonyms for that database.\n\n175\n00:10:07.792 --> 00:10:09.709\nAll right, so let's go ahead and do this.\n\n176\n00:10:09.709 --> 00:10:13.650\nI'm kind of talking a lot, but\nlet's go ahead and do this anyways here.\n\n177\n00:10:13.650 --> 00:10:19.347\nSo, notice the syntax that we have in\ncreating the actual synonym fairly easy,\n\n178\n00:10:19.347 --> 00:10:19.867\nokay.\n\n179\n00:10:19.867 --> 00:10:24.290\nCreate synonym now I went ahead and\nput a prefix here, okay.\n\n180\n00:10:24.290 --> 00:10:27.239\nAnd you don’t have to\ndo this by any means.\n\n181\n00:10:27.239 --> 00:10:30.150\nYou don't have to do it at all,\nbut I actually have dbo for\n\n182\n00:10:30.150 --> 00:10:32.591\ndatabase object that\nI'm actually creating.\n\n183\n00:10:32.591 --> 00:10:36.477\nYou can actually leave that off if you\nwant to, but I like to note that this is\n\n184\n00:10:36.477 --> 00:10:39.581\nsomething that I created so\nI actually put the dbo in there.\n\n185\n00:10:39.581 --> 00:10:44.329\nYou might even put something like syn\nif you want to instead for something.\n\n186\n00:10:44.329 --> 00:10:48.669\nAnd then of course when you're creating\nit you may actually want to do something\n\n187\n00:10:48.669 --> 00:10:53.073\nlike this in all capital letters, to help\ndistinguish that this is an object that\n\n188\n00:10:53.073 --> 00:10:56.808\nyou made and not an object that was\nmade by the system itself as well.\n\n189\n00:10:56.808 --> 00:11:01.372\nNow all that is up to you but\nhere's the way that I'm doing it.\n\n190\n00:11:01.372 --> 00:11:04.944\nSo I simply type in create the synonym and\nI give a name and\n\n191\n00:11:04.944 --> 00:11:09.048\nthen I have to use a keyword for\nand then I have to pick the object,\n\n192\n00:11:09.048 --> 00:11:13.167\nokay, or type in the object that\nI'm actually replacing here.\n\n193\n00:11:13.167 --> 00:11:18.044\nNow there's also one other thing that's\nneat about synonyms at this point okay?\n\n194\n00:11:18.044 --> 00:11:23.508\nYou can actually create a synonym for\nobjects that don't really yet exist.\n\n195\n00:11:23.508 --> 00:11:26.694\nNow I know that's strange but\nthe way that you actually do that right,\n\n196\n00:11:26.694 --> 00:11:29.988\nlet's say that you have a view that\nyou haven't yet actually created and\n\n197\n00:11:29.988 --> 00:11:32.108\nyou still wanna go ahead and\ncreate a synonym.\n\n198\n00:11:32.108 --> 00:11:35.847\nYou can go ahead and do that and\nthen name whatever that view is.\n\n199\n00:11:35.847 --> 00:11:37.447\nOkay, and it will let you create it and\n\n200\n00:11:37.447 --> 00:11:40.497\nthen you just have to make sure that\nwhen you go back and create that view,\n\n201\n00:11:40.497 --> 00:11:42.798\nname that exact same thing,\nyou're perfectly fine.\n\n202\n00:11:42.798 --> 00:11:45.794\nBut we're gonna show some,\na little bit easier to do that.\n\n203\n00:11:45.794 --> 00:11:47.652\nSo do in step.\n\n204\n00:11:47.652 --> 00:11:51.239\nSo I'm just going to slide that\nentire statement at this point.\n\n205\n00:11:51.239 --> 00:11:52.842\nOops, I think I am.\n\n206\n00:11:54.780 --> 00:11:59.579\nMaybe using a track pad is not my best\nbet either, and I'm going to execute it,\n\n207\n00:11:59.579 --> 00:12:03.743\nand now notice my commands have\nactually completed successfully.\n\n208\n00:12:03.743 --> 00:12:09.630\nAnd then if I go over here to the left\nhand side Daniel, look, I lied to you.\n\n209\n00:12:09.630 --> 00:12:11.672\nIt's not actually showing me anything.\n\n210\n00:12:11.672 --> 00:12:15.047\nNow, you might run into that too cuz I\nremember the first time I ever created\n\n211\n00:12:15.047 --> 00:12:17.362\nsomething I'm like, okay,\nI'm not doing this.\n\n212\n00:12:17.362 --> 00:12:18.198\nSo, what did I do?\n\n213\n00:12:18.198 --> 00:12:20.218\nI ran the query again.\n\n214\n00:12:20.218 --> 00:12:21.263\nI kept running the query.\n\n215\n00:12:21.263 --> 00:12:22.644\nI'm like, it's not showing up.\n\n216\n00:12:22.644 --> 00:12:25.966\nAnd finally,\nsomebody smarter than me said, Ronnie,\n\n217\n00:12:25.966 --> 00:12:29.726\nif you want objects to show up\nyou have to refresh the database.\n\n218\n00:12:29.726 --> 00:12:33.777\nYeah, very simple, but you can imagine why\nthe first time you do this you're like,\n\n219\n00:12:33.777 --> 00:12:36.936\nRonnie, you said that it would\nshow up as not showing showing up.\n\n220\n00:12:36.936 --> 00:12:39.548\nI don't see anything that's going on.\n\n221\n00:12:39.548 --> 00:12:43.836\nSo, if I right click on the word synonym,\nyou can do it on any level here, but\n\n222\n00:12:43.836 --> 00:12:48.476\nI'm just gonna right click on the word\n'synonym' and then I can select refresh.\n\n223\n00:12:48.476 --> 00:12:51.413\nAnd now I noticed a little\nplus sign showed up here.\n\n224\n00:12:51.413 --> 00:12:53.654\nSee if I can show everybody that.\n\n225\n00:12:53.654 --> 00:12:55.476\nAnd then if I expand that out.\n\n226\n00:12:55.476 --> 00:12:56.637\nThere it is.\n\n227\n00:12:56.637 --> 00:12:59.575\nIt is now a little object.\n\n228\n00:12:59.575 --> 00:13:02.055\nRemember it's only really a name,\n\n229\n00:13:02.055 --> 00:13:07.272\nrepresenting that human resources'\nemployee department history okay.\n\n230\n00:13:07.272 --> 00:13:10.354\nNow, that's actually very important,\n\n231\n00:13:10.354 --> 00:13:16.700\nbecause it now allows me to create a much\nmore efficient looking, query, okay.\n\n232\n00:13:16.700 --> 00:13:21.209\nSo notice that I can go from where I\nwould normally do something like select\n\n233\n00:13:21.209 --> 00:13:22.527\neverything, okay.\n\n234\n00:13:22.527 --> 00:13:28.308\nFull from, and then this would be\nhumanresources.employeedepartmenthistory\n\n235\n00:13:28.308 --> 00:13:33.400\nInstead look at how shortened up\nthis actually turned out to be.\n\n236\n00:13:33.400 --> 00:13:37.940\nSo, you can imagine for someone like me,\nin which typing is a fairly big challenge.\n\n237\n00:13:37.940 --> 00:13:41.513\nI don't know why, I've been typing for\nmost of my life now but\n\n238\n00:13:41.513 --> 00:13:42.759\nit still does get me.\n\n239\n00:13:42.759 --> 00:13:44.941\nHere especially when I'm\ntrying to do it quickly.\n\n240\n00:13:44.941 --> 00:13:48.703\nI can now simply run that,\nand I can execute.\n\n241\n00:13:48.703 --> 00:13:50.502\nAnd now you can see the results here.\n\n242\n00:13:50.502 --> 00:13:52.963\nLet me kind of pull that out a little bit.\n\n243\n00:13:52.963 --> 00:13:56.352\n>> Ronnie, is the real difference\nbetween a synonym and an alias,\n\n244\n00:13:56.352 --> 00:13:58.316\nyou told us that they are different.\n\n245\n00:13:58.316 --> 00:14:01.059\nIs it the fact that hopefully\nI'm following you correctly,\n\n246\n00:14:01.059 --> 00:14:03.064\nbecause I'm not the greatest SQL guy here.\n\n247\n00:14:03.064 --> 00:14:07.244\nBut the synonym seems like it\nhas some level of permanence.\n\n248\n00:14:07.244 --> 00:14:09.634\n>> Mm-hm.\n>> It's meant to be used throughout\n\n249\n00:14:09.634 --> 00:14:14.558\nthe database over and over again where\nan alias seems to be like an inline thing.\n\n250\n00:14:14.558 --> 00:14:19.086\nI need to declare an alias, use it for\nnow, and then when I'm done it's over.\n\n251\n00:14:19.086 --> 00:14:20.827\n>> Yeah, that's pretty much the idea here.\n\n252\n00:14:20.827 --> 00:14:25.072\nThe very fact that we might actually be\ndoing this because we noticed that like\n\n253\n00:14:25.072 --> 00:14:29.407\nevery single table in our database,\nis extremely long or is coded in some way.\n\n254\n00:14:29.407 --> 00:14:33.685\nAn easier way for us to go ahead and\ndo this is to create some type of synonym\n\n255\n00:14:33.685 --> 00:14:36.702\nthat I would say is a little\nbit more descriptive and\n\n256\n00:14:36.702 --> 00:14:40.938\nshorter than what it might end up\npossibly being and that helps you out.\n\n257\n00:14:40.938 --> 00:14:43.346\nAnd then if you go ahead and\ncreate those synonyms,\n\n258\n00:14:43.346 --> 00:14:47.154\nthey essentially stay with the database\nlike we're seeing hear and that means we\n\n259\n00:14:47.154 --> 00:14:50.516\ncan actually reuse it over and\nover again and not have to worry about it.\n\n260\n00:14:50.516 --> 00:14:53.917\nYou can even create joins and do all that\nstuff and actually be able to do that.\n\n261\n00:14:53.917 --> 00:14:58.004\nNow there is a limitation though\nto using the synonyms okay.\n\n262\n00:14:58.004 --> 00:15:02.004\nOne of those limitations is if you\nchoose to create things like database\n\n263\n00:15:02.004 --> 00:15:03.078\nobjects too okay.\n\n264\n00:15:03.078 --> 00:15:08.511\nYou cannot use this in that data\ndefinition language in stet.\n\n265\n00:15:08.511 --> 00:15:11.780\nSo if you're actually doing\nthose types of things,\n\n266\n00:15:11.780 --> 00:15:15.953\nit doesn't allow to actually call\nupon a synonym there to do that.\n\n267\n00:15:15.953 --> 00:15:18.180\nYou literally have to go back and\n\n268\n00:15:18.180 --> 00:15:23.150\nmake sure that you call upon\nthe actual table name in itself.\n\n269\n00:15:23.150 --> 00:15:27.133\nNow, there's also something else that\nyou cannot do with this synonym, and\n\n270\n00:15:27.133 --> 00:15:29.537\nwe can try it and\nsee if it actually works here.\n\n271\n00:15:29.537 --> 00:15:32.951\nBut this is also something else\nthat can happen as well, okay?\n\n272\n00:15:32.951 --> 00:15:37.827\nNow, what happens though, if you actually\ngo, that's not the one that I wanted,\n\n273\n00:15:37.827 --> 00:15:38.396\nRonnie.\n\n274\n00:15:38.396 --> 00:15:41.519\nI didn't mean for employe resources here.\n\n275\n00:15:41.519 --> 00:15:46.395\nI meant it to be just the department\nitself okay, instead.\n\n276\n00:15:46.395 --> 00:15:48.748\nSo let's just do that.\n\n277\n00:15:48.748 --> 00:15:53.326\nWell, if I go ahead and\nselect this now and I execute that,\n\n278\n00:15:53.326 --> 00:15:55.669\nnotice it says wait a minute.\n\n279\n00:15:55.669 --> 00:15:58.150\nThere's already an object in there.\n\n280\n00:15:58.150 --> 00:16:01.678\n>> So it does not allow me to modify,\nchange,\n\n281\n00:16:01.678 --> 00:16:05.017\nadd to that object right then and there.\n\n282\n00:16:05.017 --> 00:16:06.620\nSo, what do you have to do then?\n\n283\n00:16:06.620 --> 00:16:09.421\nIf you wanted to actually\nrecreate that object and\n\n284\n00:16:09.421 --> 00:16:12.163\nactually change it to\nthe way that you wanted to?\n\n285\n00:16:12.163 --> 00:16:17.027\nWell, since there is no way to\nalter a particular synonym,\n\n286\n00:16:17.027 --> 00:16:21.889\nwhat you have to do instead is\nyou have to drop that object out\n\n287\n00:16:21.889 --> 00:16:26.679\nof that view there and\nthen you can actually add it back in.\n\n288\n00:16:26.679 --> 00:16:30.626\nSo the good thing is the syntax\nis fairly easy for us,\n\n289\n00:16:30.626 --> 00:16:33.059\nlet me add this one back in here.\n\n290\n00:16:33.059 --> 00:16:34.250\nGive me a second.\n\n291\n00:16:37.250 --> 00:16:39.505\nApparently, there we go, whoa.\n\n292\n00:16:39.505 --> 00:16:40.489\n>> What have you done, sir?\n\n293\n00:16:40.489 --> 00:16:43.040\n[LAUGH]\n>> I don't know what I've done here,\n\n294\n00:16:43.040 --> 00:16:45.649\nI've kind of gone beyond what I wanted to.\n\n295\n00:16:45.649 --> 00:16:47.049\nThere we go.\n>> Super secret SQL commands.\n\n296\n00:16:47.049 --> 00:16:47.873\n[LAUGH]\n>> It really is.\n\n297\n00:16:47.873 --> 00:16:51.265\nYeah, we're about to go into that\nexample here in just a moment, but\n\n298\n00:16:51.265 --> 00:16:53.906\nI just wanted to make sure I\nadded the history back in.\n\n299\n00:16:53.906 --> 00:16:59.860\nNow if I choose to drop it, it's just\ndrop and then that database object.\n\n300\n00:16:59.860 --> 00:17:02.943\nSo, I simply select that and\nI execute it right out.\n\n301\n00:17:02.943 --> 00:17:04.988\nIt tells me the command was successful.\n\n302\n00:17:04.988 --> 00:17:08.070\nNotice over here on the left-hand side,\nit's still in there.\n\n303\n00:17:08.070 --> 00:17:11.114\nI right-click and I refresh,\nnotice it's gone.\n\n304\n00:17:11.114 --> 00:17:15.579\nNow you can rerun that and actually\nbe able to call upon that again or\n\n305\n00:17:15.579 --> 00:17:18.850\ncreate whatever the sequence\nis that you want for\n\n306\n00:17:18.850 --> 00:17:24.459\nwhether it's a table name like I said,\na view, a storage procedure, a function.\n\n307\n00:17:24.459 --> 00:17:27.244\nI wanna make sure I gave you all\nthe aggregations, you name it.\n\n308\n00:17:27.244 --> 00:17:28.989\nIf you go, no, I didn't want that.\n\n309\n00:17:28.989 --> 00:17:31.823\nAs you actually do that,\nthis is what it can help you do.\n\n310\n00:17:31.823 --> 00:17:34.942\nIt can actually save you a lot of time,\nespecially if you go ahead and\n\n311\n00:17:34.942 --> 00:17:36.470\ncreate these things.\n\n312\n00:17:36.470 --> 00:17:37.542\nNow of course then,\n\n313\n00:17:37.542 --> 00:17:41.776\nbecause of its ability to stay a bit\npermanent over here on the left-hand side.\n\n314\n00:17:41.776 --> 00:17:43.617\nLet me recreate this back.\n\n315\n00:17:43.617 --> 00:17:46.233\nThat way, we'll have a history\nof what we've done here.\n\n316\n00:17:46.233 --> 00:17:49.722\nSo now that we've got that back and\nlet me refresh it and that way,\n\n317\n00:17:49.722 --> 00:17:51.382\nit's actually back in there.\n\n318\n00:17:51.382 --> 00:17:53.358\nThere it goes.\n\n319\n00:17:53.358 --> 00:17:55.814\nWhat about some of the other\nthings that you are talking about?\n\n320\n00:17:55.814 --> 00:18:00.438\nOne of the most useful things,\nof course is not just the idea of using\n\n321\n00:18:00.438 --> 00:18:05.389\ntable names even though that's actually\na big one is when you go ahead and\n\n322\n00:18:05.389 --> 00:18:08.175\nyou run another query by itself as well.\n\n323\n00:18:08.175 --> 00:18:12.441\nSo here for example, I have this query\nhere where it actually is gonna show me\n\n324\n00:18:12.441 --> 00:18:14.120\nthe customer ID, the month.\n\n325\n00:18:14.120 --> 00:18:18.140\nAd of course, the quantity of sales and\nI can execute that.\n\n326\n00:18:18.140 --> 00:18:22.491\nAnd when I run that, I can see\nthe results down here at the bottom and\n\n327\n00:18:22.491 --> 00:18:27.781\nit's giving me about 31,406 rows where\nI can see what particular month and\n\n328\n00:18:27.781 --> 00:18:32.401\nhow many things were actually ordered\nby that customer in that month.\n\n329\n00:18:32.401 --> 00:18:36.059\nSo let's say that, that is one of the\nqueries that you know that you're gonna be\n\n330\n00:18:36.059 --> 00:18:37.436\nrunning over and over again.\n\n331\n00:18:37.436 --> 00:18:41.400\nAs information passes through\nyour database, you wanna do that.\n\n332\n00:18:41.400 --> 00:18:44.788\nWell, when you do that, you can\nactually create what's called a view.\n\n333\n00:18:44.788 --> 00:18:47.708\nNow we haven't gotten to\ncreating views yet, but\n\n334\n00:18:47.708 --> 00:18:51.530\nI wanted to kinda show you that we\ncan actually create that view and\n\n335\n00:18:51.530 --> 00:18:55.793\nhave it stored over in our database and\nwe are going to get to that as well.\n\n336\n00:18:55.793 --> 00:19:01.788\nSo, now if I just run the whole thing\nwith this CREATE VIEW and I execute that.\n\n337\n00:19:01.788 --> 00:19:05.064\nNow over on my left-hand side and\nlike I said,\n\n338\n00:19:05.064 --> 00:19:11.380\nwe're gonna have probably an episode\nunto itself on just creating views here.\n\n339\n00:19:11.380 --> 00:19:15.055\nIf I go down to Views,\nyou can see this one right here,\n\n340\n00:19:15.055 --> 00:19:17.929\nwhich is the TotalCustomerQtyByMonth.\n\n341\n00:19:17.929 --> 00:19:21.728\nNow, I made that name long on purpose.\n\n342\n00:19:21.728 --> 00:19:25.559\nBecause I wanted to show that hey,\neven now, I've just created this object.\n\n343\n00:19:25.559 --> 00:19:28.320\nBrand spanking new object\nin my database here.\n\n344\n00:19:28.320 --> 00:19:29.816\nIt's not necessarily a table name.\n\n345\n00:19:29.816 --> 00:19:31.562\nThis one is what we call a view.\n\n346\n00:19:31.562 --> 00:19:35.019\nAnytime I wanna run that, I can now\nrun that and actually query all of\n\n347\n00:19:35.019 --> 00:19:39.328\nthe columns that actually called up here\nwven though there's actually a couple of,\n\n348\n00:19:39.328 --> 00:19:41.350\nat least one INNER JOIN in here.\n\n349\n00:19:41.350 --> 00:19:44.145\nSo, it actually is pulling\ndata from more than one table.\n\n350\n00:19:44.145 --> 00:19:49.488\nSo once I have that,\nI can now create a synonym for that.\n\n351\n00:19:49.488 --> 00:19:53.325\nSo notice again, I went ahead and\ncreated a shorter name,\n\n352\n00:19:53.325 --> 00:19:58.043\nwhich is what we normally hope to do\nto help us out and I can execute that.\n\n353\n00:20:00.082 --> 00:20:04.555\nAnd now when I take a look\nat my synonyms here, oops,\n\n354\n00:20:04.555 --> 00:20:07.205\nI got a refresh and there it is.\n\n355\n00:20:07.205 --> 00:20:08.285\nThere's the other one.\n\n356\n00:20:08.285 --> 00:20:11.117\nAnd if we run kind of\nthe same type of query,\n\n357\n00:20:11.117 --> 00:20:13.731\nnotice how short this command looked.\n\n358\n00:20:13.731 --> 00:20:19.833\nAnd that's what I wanted to show is that\nyou can see now in this particular query,\n\n359\n00:20:19.833 --> 00:20:25.040\nI execute it now versus the database\nobject CustQty and execute it and\n\n360\n00:20:25.040 --> 00:20:29.299\nthen it's essentially running\nthat same thing for me.\n\n361\n00:20:29.299 --> 00:20:32.209\nI'm still getting that 31,406 rows.\n\n362\n00:20:32.209 --> 00:20:33.601\nIt works perfectly fine.\n\n363\n00:20:33.601 --> 00:20:35.696\nIt does everything that we need to.\n\n364\n00:20:35.696 --> 00:20:40.223\nSo, being able to take advantage of these\nsynonyms are really kind of some of\n\n365\n00:20:40.223 --> 00:20:42.501\nthe things that we wanna be able to do.\n\n366\n00:20:42.501 --> 00:20:43.639\nNow, can you go back in?\n\n367\n00:20:43.639 --> 00:20:45.756\nAnd if you have 100 tables create\nsynonyms for every single one?\n\n368\n00:20:45.756 --> 00:20:46.372\nYes.\n\n369\n00:20:46.372 --> 00:20:47.925\nIs that the goal?\n\n370\n00:20:47.925 --> 00:20:51.244\nNot necessarily unless you do\nsee some complications and yes,\n\n371\n00:20:51.244 --> 00:20:55.196\nyou do see whether it's an advantage\nto create a synonym with everything.\n\n372\n00:20:55.196 --> 00:20:59.050\nBut you've got to realize that you're\ngoing to want to create these,\n\n373\n00:20:59.050 --> 00:21:03.054\nbecause especially if you're on the fly\nhaving to do a lot of this stuff.\n\n374\n00:21:03.054 --> 00:21:07.075\nCreating that synonym really does help\nin terms of efficiency is what we see.\n\n375\n00:21:07.075 --> 00:21:08.115\n>> Very cool stuff, Ronnie.\n\n376\n00:21:08.115 --> 00:21:11.071\nNow, you've mentioned that there was a\ncouple other things that we were going to\n\n377\n00:21:11.071 --> 00:21:12.692\nlearn today and\nthey were similar to joins.\n\n378\n00:21:12.692 --> 00:21:15.564\nI think it was intercept and accept.\n\n379\n00:21:15.564 --> 00:21:16.900\n>> Accept, yep.\n\n380\n00:21:16.900 --> 00:21:20.695\nSo when we take a look at\nthe idea of intercept and accept.\n\n381\n00:21:20.695 --> 00:21:24.972\nWell, if you remember the idea of\njoins where we take two tables, so\n\n382\n00:21:24.972 --> 00:21:27.073\nthat we can query them together,\n\n383\n00:21:27.073 --> 00:21:32.274\nwe find the common column that will share\nthat information and allow us to do that.\n\n384\n00:21:32.274 --> 00:21:36.125\nWell, that absolutely is probably\nfoundational on anything that I've just\n\n385\n00:21:36.125 --> 00:21:40.093\nshowed you right here that if I have more\nthan one table that I need to query from,\n\n386\n00:21:40.093 --> 00:21:41.610\nthat's fine.\n\n387\n00:21:41.610 --> 00:21:44.020\nBut what if you actually\ndon't have the tables yet?\n\n388\n00:21:44.020 --> 00:21:46.320\nWhat if the only thing you\nhave are select statements,\n\n389\n00:21:46.320 --> 00:21:48.020\nyou don't even have the views created and\n\n390\n00:21:48.020 --> 00:21:51.500\nwhat you need is the information\nright there on the fly as well.\n\n391\n00:21:51.500 --> 00:21:56.847\nWell, you can end up creating what we call\nthe idea here of an intersection as well.\n\n392\n00:21:56.847 --> 00:21:57.655\nSo in this one,\n\n393\n00:21:57.655 --> 00:22:01.595\nthis was actually a little bit harder\nthan what I thought it was going to be.\n\n394\n00:22:01.595 --> 00:22:03.569\nSo, what we're actually looking for\n\n395\n00:22:03.569 --> 00:22:07.060\nare commonalities between\nthese two select statements.\n\n396\n00:22:07.060 --> 00:22:11.090\nSo what I'm doing here is I'm pulling up\nthe name, the country, the region and\n\n397\n00:22:11.090 --> 00:22:17.400\nthe city from just the people\nthat actually are working for me.\n\n398\n00:22:17.400 --> 00:22:20.911\nSo, that's what this\nparticular query is about.\n\n399\n00:22:20.911 --> 00:22:25.908\nSo if I run this one right here and\nI execute it,\n\n400\n00:22:25.908 --> 00:22:30.020\nthat will give me 33,550 rows.\n\n401\n00:22:30.020 --> 00:22:34.750\nNow if I run that against the country,\nregion,\n\n402\n00:22:34.750 --> 00:22:38.650\ncity of my customers in terms of sales,\n\n403\n00:22:38.650 --> 00:22:46.500\nall the information on my database and\nI select that and I click Execute.\n\n404\n00:22:46.500 --> 00:22:49.003\nWell, notice data is starting to show up.\n\n405\n00:22:49.003 --> 00:22:53.539\nBut if we take a look in my lower\nright-hand corner, this is something you\n\n406\n00:22:53.539 --> 00:22:58.825\nrarely see, especially in something that\nI'm running is that a counter is going on.\n\n407\n00:22:58.825 --> 00:23:01.697\nIn other words, it's timing this thing and\n\n408\n00:23:01.697 --> 00:23:06.138\nI can let this thing run to 10,\n15 minutes and it may not finish.\n\n409\n00:23:06.138 --> 00:23:08.493\nAnd you might say,\nwhat in the world is going on here?\n\n410\n00:23:08.493 --> 00:23:10.856\nIts just a simple select statement.\n\n411\n00:23:10.856 --> 00:23:14.973\nIt is having to do this,\nbecause of all the joins I had to do.\n\n412\n00:23:14.973 --> 00:23:18.365\nNotice that's a pretty deep\njoin that's actually going on.\n\n413\n00:23:18.365 --> 00:23:22.044\nIts trying to come up with the information\nthat I'm actually looking for, but\n\n414\n00:23:22.044 --> 00:23:24.008\nit doesn't know what I want to do with it.\n\n415\n00:23:24.008 --> 00:23:25.296\nAnd so, that's what it's having to do.\n\n416\n00:23:25.296 --> 00:23:29.768\nIt's having to come up with a bunch of\ndifferent ways of patching the values out.\n\n417\n00:23:29.768 --> 00:23:31.955\nSo, when it actually sees something else?\n\n418\n00:23:31.955 --> 00:23:34.989\nWhat is this data supposed\nto help me to do?\n\n419\n00:23:34.989 --> 00:23:37.096\nSo on this one,\nI'm not gonna run the whole thing,\n\n420\n00:23:37.096 --> 00:23:38.765\nbecause it's just gonna take too long.\n\n421\n00:23:38.765 --> 00:23:39.988\nI'm gonna stop it.\n\n422\n00:23:39.988 --> 00:23:43.503\nAnd then when I do, I'm gonna go back\ndown here to the lower right-hand corner,\n\n423\n00:23:43.503 --> 00:23:44.807\nso that we can see something.\n\n424\n00:23:44.807 --> 00:23:49.657\nAt the point where I stopped it,\nDaniel, there is actually\n\n425\n00:23:49.657 --> 00:23:55.575\n9,776,152 rows now that we're\njust created by that 1 query.\n\n426\n00:23:55.575 --> 00:23:58.389\nOkay, so when I take a look at that data.\n\n427\n00:23:58.389 --> 00:24:03.670\nLet's say what I wanna do is I wanna\nfind out the commonalities between\n\n428\n00:24:03.670 --> 00:24:08.930\nmy customers, in their country,\nregion and state, or city.\n\n429\n00:24:08.930 --> 00:24:12.720\nCountry, region, and city, as well\nas where my salespeople are, right?\n\n430\n00:24:12.720 --> 00:24:14.330\nCountry, region, and city.\n\n431\n00:24:14.330 --> 00:24:16.470\nAnd I needed to find out\nwhere they actually are,\n\n432\n00:24:16.470 --> 00:24:19.080\nwhat are the commonalities between them,\nokay?\n\n433\n00:24:19.080 --> 00:24:22.980\nSo what we're looking for is essentially\nidentical rows in both of those.\n\n434\n00:24:22.980 --> 00:24:26.970\nWell, one I had 33,560 rows or 550 rows,\n\n435\n00:24:26.970 --> 00:24:31.820\nthis one I've got at least\nover nine million rows, okay?\n\n436\n00:24:31.820 --> 00:24:34.550\nWell, to think about\nhaving go back through and\n\n437\n00:24:34.550 --> 00:24:39.330\nfind out all the duplication that may\nbe in there, very difficult to do.\n\n438\n00:24:39.330 --> 00:24:42.360\nBut we can do it by using\nwhat we call INTERSECT, okay?\n\n439\n00:24:42.360 --> 00:24:45.160\nNotice, it's simple,\nthere's not a lot of syntax to it.\n\n440\n00:24:45.160 --> 00:24:48.590\nYou simply put the word INTERSECT\nin-between those two queries, and\n\n441\n00:24:48.590 --> 00:24:50.280\nthen I execute.\n\n442\n00:24:50.280 --> 00:24:53.060\nOops, hold on, I did something wrong here.\n\n443\n00:24:53.060 --> 00:24:55.163\nINTERSECTS.\n\n444\n00:24:55.163 --> 00:24:55.871\nThen I.\n\n445\n00:24:55.871 --> 00:24:57.441\n>> So\nyou have to highlight the whole thing.\n\n446\n00:24:57.441 --> 00:24:58.335\n>> I do, don't I?\n\n447\n00:24:58.335 --> 00:24:59.188\n[LAUGH].\n\n448\n00:24:59.188 --> 00:24:59.742\nYeah that's right.\n\n449\n00:24:59.742 --> 00:25:00.957\n>> I use that highlight.\n\n450\n00:25:00.957 --> 00:25:02.960\n>> I forgot, yes you are right.\n\n451\n00:25:02.960 --> 00:25:05.440\n[LAUGH] It's like what do\nyou wanna intersect bro?\n\n452\n00:25:05.440 --> 00:25:07.010\nYou are correct, thank you.\n\n453\n00:25:07.010 --> 00:25:08.760\nI was like, no,\nI did something wrong here.\n\n454\n00:25:08.760 --> 00:25:12.077\nBut now that I've highlighted it, now\nif we take a look in my lower left-hand\n\n455\n00:25:12.077 --> 00:25:14.230\ncorner, or right-hand corner again.\n\n456\n00:25:14.230 --> 00:25:19.348\nI'm gonna get that right one day,\nleft and right-hand corners, 613 rows.\n\n457\n00:25:19.348 --> 00:25:20.107\n>> So a little less.\n\n458\n00:25:20.107 --> 00:25:23.829\n>> A little less, but think about that,\nthat query was continuing to go and\n\n459\n00:25:23.829 --> 00:25:25.600\nI ran that query earlier.\n\n460\n00:25:25.600 --> 00:25:29.920\nIt was about 15 minutes before it finished\nand I got well over 50 million rows.\n\n461\n00:25:29.920 --> 00:25:33.750\nSo it took a long time before\nit actually finished everything.\n\n462\n00:25:33.750 --> 00:25:36.630\nBut by using that INTERSECT,\nit was able to actually go through and go,\n\n463\n00:25:36.630 --> 00:25:41.730\nI can match this up with at least those 50\nmillion rows and pull out the in-between.\n\n464\n00:25:41.730 --> 00:25:44.930\nAnd there was, it was 613 rows, okay?\n\n465\n00:25:44.930 --> 00:25:46.140\nIs what it turned out.\n\n466\n00:25:46.140 --> 00:25:49.830\nSo, those are the matching values\nthat you'll see is right here.\n\n467\n00:25:49.830 --> 00:25:53.660\nSo here's where I have sales people and\nhere's where I also have of course that.\n\n468\n00:25:53.660 --> 00:25:57.010\nNow, you may wonder,\nwhat are all those other rows, 50 million?\n\n469\n00:25:57.010 --> 00:25:59.440\nWell, because it did not\nknow what to do with it,\n\n470\n00:25:59.440 --> 00:26:03.990\nit essentially created what we called\na Cartesian product in itself, okay?\n\n471\n00:26:03.990 --> 00:26:06.590\nTo actually give us every\npossible combination\n\n472\n00:26:06.590 --> 00:26:08.720\nbecause it didn't know what\nI wanted to do with it.\n\n473\n00:26:08.720 --> 00:26:11.440\nSo it actually said,\nlet me just do this in the background and\n\n474\n00:26:11.440 --> 00:26:12.330\ncreate all that stuff too.\n\n475\n00:26:12.330 --> 00:26:14.620\nAnd when you actually use\nthe word INTERSECT, just look for\n\n476\n00:26:14.620 --> 00:26:16.980\nthose matching values, and return that.\n\n477\n00:26:16.980 --> 00:26:18.550\nSo it works very well.\n\n478\n00:26:18.550 --> 00:26:22.460\nNow, what seems like almost\nthe exact opposite of that,\n\n479\n00:26:22.460 --> 00:26:25.190\nis when we talk about EXCEPT, okay?\n\n480\n00:26:25.190 --> 00:26:27.710\nSo this is like making an exception.\n\n481\n00:26:27.710 --> 00:26:30.362\nNow this one's a little bit weirder, okay?\n\n482\n00:26:30.362 --> 00:26:34.300\nAnd then I really mean this, this one\nis absolutely a little bit weirder.\n\n483\n00:26:34.300 --> 00:26:38.670\nAnd the very fact that it will run\na query against the very left one.\n\n484\n00:26:38.670 --> 00:26:44.720\nIn other words, the first one in\nthe INTERSECT here on this example.\n\n485\n00:26:44.720 --> 00:26:49.050\nIt will run this one, and\ngive me those values that we have.\n\n486\n00:26:49.050 --> 00:26:52.250\nAnd then the exception also says,\nlook, look for\n\n487\n00:26:52.250 --> 00:26:57.040\nall those matching values but only return\nwhat's actually in that left one, okay?\n\n488\n00:26:57.040 --> 00:27:01.350\nSo on this one I may get something,\nI may not, depending on the results.\n\n489\n00:27:01.350 --> 00:27:07.102\nSo if I do an EXCEPT here,\nwhat should happen is it should look for\n\n490\n00:27:07.102 --> 00:27:11.220\nall of the matching values in\nthe left row, in the left table.\n\n491\n00:27:11.220 --> 00:27:14.210\nLike we did in the JOIN or\nin this first query.\n\n492\n00:27:15.480 --> 00:27:19.370\nAnd if it actually doesn't have a match,\nthen it's not gonna actually show up.\n\n493\n00:27:19.370 --> 00:27:24.248\nSo if I select the Execute here,\nunder the EXCEPT,\n\n494\n00:27:24.248 --> 00:27:27.455\nyou actually end up seeing here.\n\n495\n00:27:27.455 --> 00:27:30.006\nOops, I did something\na little bit backward here.\n\n496\n00:27:32.971 --> 00:27:35.612\nHold on, let me show you again.\n\n497\n00:27:35.612 --> 00:27:41.526\n[LAUGH]\n>> Run that again on the EXCEPT here,\n\n498\n00:27:41.526 --> 00:27:42.586\njust that one.\n\n499\n00:27:47.301 --> 00:27:50.820\nAnd so\nthis one actually shows no rows at all.\n\n500\n00:27:50.820 --> 00:27:53.710\nAnd that's because it didn't\nactually end up saying\n\n501\n00:27:53.710 --> 00:27:56.220\nI have any rows that are exclusive to me.\n\n502\n00:27:56.220 --> 00:27:58.890\nThat aren't actually over\nin the right-hand column.\n\n503\n00:27:58.890 --> 00:28:01.730\nSo, in that way,\neven though it actually said,\n\n504\n00:28:01.730 --> 00:28:05.100\nshow me all the rows on the left-hand\nside or in that first one.\n\n505\n00:28:05.100 --> 00:28:07.520\nThat don't have a match over\non the right-hand side.\n\n506\n00:28:07.520 --> 00:28:10.970\nIt ran and said, no,\nI don't have any that don't match that.\n\n507\n00:28:10.970 --> 00:28:15.140\nSo it gives us that ability to\nbe able to find excluded rows.\n\n508\n00:28:15.140 --> 00:28:17.710\nThat do not have any\nvalues that are matching\n\n509\n00:28:17.710 --> 00:28:20.390\nover on the second query that we have.\n\n510\n00:28:20.390 --> 00:28:23.640\nI keep calling it left and right because\nit's actually like JOINS in my head,\n\n511\n00:28:23.640 --> 00:28:25.580\nas the way that I end up seeing them.\n\n512\n00:28:25.580 --> 00:28:28.400\nSo if you need that where you have\nthe ability to exclude and then you go,\n\n513\n00:28:28.400 --> 00:28:30.852\nI'm trying to see if there's\nanything that doesn't match?\n\n514\n00:28:30.852 --> 00:28:34.660\nThe EXCEPT is really gonna help you out,\nbut the order does matter, okay?\n\n515\n00:28:34.660 --> 00:28:36.900\nSo it really does matter, okay?\n\n516\n00:28:36.900 --> 00:28:42.880\nWhat if you actually use EXCEPT and\nINTERSECT in the same query?\n\n517\n00:28:42.880 --> 00:28:43.860\nCan you do something like that?\n\n518\n00:28:43.860 --> 00:28:47.780\nIn theory you can, but what has to\nhappen then if you end up doing that.\n\n519\n00:28:47.780 --> 00:28:51.620\nIt always runs through,\nif I remember correctly EXCEPT first and\n\n520\n00:28:51.620 --> 00:28:53.400\nthen it will do the INTERSECT.\n\n521\n00:28:53.400 --> 00:28:56.380\nIt doesn't just matter in that\norder it actually has to do it in\n\n522\n00:28:56.380 --> 00:28:57.556\na particular order.\n\n523\n00:28:57.556 --> 00:29:00.220\nIf you're actually gonna\ndo really complex queries,\n\n524\n00:29:00.220 --> 00:29:02.800\nwhere you have both of\nthem inside of them.\n\n525\n00:29:02.800 --> 00:29:05.530\nI'm sure you could do it, I couldn't come\nup with an example in which i would do\n\n526\n00:29:05.530 --> 00:29:07.750\nthat, but yes, it can be done.\n\n527\n00:29:07.750 --> 00:29:10.300\nSo just remember that there is\nan order of precedence here\n\n528\n00:29:10.300 --> 00:29:11.914\nto make sure that gets done as well.\n\n529\n00:29:11.914 --> 00:29:16.630\nSo there's plenty for us in terms of\nhelping us to get a little bit more\n\n530\n00:29:16.630 --> 00:29:18.850\nefficient at what we're doing, okay?\n\n531\n00:29:18.850 --> 00:29:21.490\nWith all of those big JOINS that we have,\n\n532\n00:29:21.490 --> 00:29:26.510\nimagine just having to come up with\nthe statements themselves to do that.\n\n533\n00:29:26.510 --> 00:29:29.540\nAnd then,\nnow imagine taking two separate JOINS and\n\n534\n00:29:29.540 --> 00:29:31.548\nwanting to actually do\nan inner JOIN in-between them?\n\n535\n00:29:31.548 --> 00:29:34.340\nWell INTERSECT's gonna help you do that.\n\n536\n00:29:34.340 --> 00:29:37.210\nHaving two separate JOINS where you\nhave multiple tables joined just like I\n\n537\n00:29:37.210 --> 00:29:38.080\nshowed you.\n\n538\n00:29:38.080 --> 00:29:40.930\nAnd now you actually wanna go,\nI wanna see if there's any rows that\n\n539\n00:29:40.930 --> 00:29:43.760\ndon't match over on the left-hand side,\nplease show me that.\n\n540\n00:29:43.760 --> 00:29:46.230\nWell, EXCEPT is gonna do that instead.\n\n541\n00:29:46.230 --> 00:29:49.810\nSo just remember that these\nare really designed to help you out\n\n542\n00:29:49.810 --> 00:29:51.880\nwhen you do have complex things like this.\n\n543\n00:29:51.880 --> 00:29:54.650\nAnd you do wanna actually do an EXCEPT or\nan JOIN on them.\n\n544\n00:29:54.650 --> 00:29:57.750\nAnd also of course,\nremember the idea here are synonyms.\n\n545\n00:29:57.750 --> 00:30:01.265\nSynonyms are very useful and can actually\nbe used in many different places.\n\n546\n00:30:01.265 --> 00:30:05.130\nSo make sure you examine them again\nas you actually go into the exam.\n\n547\n00:30:05.130 --> 00:30:08.450\nDo not put it past them to\nactually test you on these things,\n\n548\n00:30:08.450 --> 00:30:10.400\ncuz you're probably\ngonna be tested on them.\n\n549\n00:30:10.400 --> 00:30:12.360\nSo, just kind of be aware, all right?\n\n550\n00:30:12.360 --> 00:30:16.170\nAll right, Ronnie well you've given us\na lot of new great tools to throw into our\n\n551\n00:30:16.170 --> 00:30:17.410\nSQL tool bag.\n\n552\n00:30:17.410 --> 00:30:20.180\nWe appreciate that, a lot of\ninteresting things that we can do.\n\n553\n00:30:20.180 --> 00:30:22.895\nThose synonyms will\ndefinitely come in handy,\n\n554\n00:30:22.895 --> 00:30:26.035\nand you gave us a great example\nof when that would happen.\n\n555\n00:30:26.035 --> 00:30:30.615\nYou never know when you might need\na good old synonym in your SQL query.\n\n556\n00:30:30.615 --> 00:30:33.045\nThat being said, looking at the clock,\nlooks like we've run out of time for\n\n557\n00:30:33.045 --> 00:30:33.707\nthis episode.\n\n558\n00:30:33.707 --> 00:30:36.707\nWe appreciate you for stopping by and\nexplaining things, Ronnie, and\n\n559\n00:30:36.707 --> 00:30:38.767\nwe appreciate you,\na good viewer for watching.\n\n560\n00:30:38.767 --> 00:30:40.801\nHopefully you've enjoyed it and\nlearned a lot.\n\n561\n00:30:40.801 --> 00:30:43.496\nThat being said, we're gonna go ahead and\nsign off for ITProTV,\n\n562\n00:30:43.496 --> 00:30:44.972\nI've been your host Daniel Lowry.\n\n563\n00:30:44.972 --> 00:30:45.811\n>> And I'm Ronnie Wong.\n\n564\n00:30:45.811 --> 00:30:47.659\n>> And we'll see you next time.\n\n565\n00:30:47.659 --> 00:30:55.340\n[SOUND]\n\n",
          "vimeoId": "164411574"
        },
        {
          "description": "In this episode, Daniel and Ronnie take a look at the different Data Access technologies. They start by explaining what Data Access technologies are and how they're used. This includes DA's like SQL Server Native Client(SNAC), ADO.NET, JDBC drivers, and Microsoft drivers for PHP.",
          "length": "952",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-6-understand_data_access_technologies-042516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-6-understand_data_access_technologies-042516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-6-understand_data_access_technologies-042516-1-sm.jpg",
          "title": "Understand Data Access Technologies",
          "transcript": "WEBVTT\n\n1\n00:00:00.064 --> 00:00:10.064\n[MUSIC]\n\n2\n00:00:12.020 --> 00:00:16.170\nAll right, greetings everyone, and welcome\nto another great episode of ITPro TV.\n\n3\n00:00:16.170 --> 00:00:19.400\nI'm your host Daniel Lowrie and\nin today's episode, that's right,\n\n4\n00:00:19.400 --> 00:00:23.830\nwe're moving forward with our Querying\nMicrosoft's SQL Server 2014 series.\n\n5\n00:00:23.830 --> 00:00:27.480\nJoining us back in studio again today to\nlend his expertise on that very topic\n\n6\n00:00:27.480 --> 00:00:28.253\nour good friend Mr. Ronnie Wong.\n\n7\n00:00:28.253 --> 00:00:30.282\nRonnie, welcome back to\nthe show how's it going?\n\n8\n00:00:30.282 --> 00:00:34.830\n>> It is going well as we continue on\ntaking a look at of course Microsoft's SQ\n\n9\n00:00:34.830 --> 00:00:35.460\nserver 2014.\n\n10\n00:00:35.460 --> 00:00:41.490\nWhat we're actually taking away today is\nkind of a different path here just briefly\n\n11\n00:00:41.490 --> 00:00:46.210\nand for this one episode only, really is\nwe have to talk about what we cal data\n\n12\n00:00:46.210 --> 00:00:51.010\naccess technologies And the way that\nwe can actually connect to multiple and\n\n13\n00:00:51.010 --> 00:00:53.730\ndifferent types of databases\nthat are out there.\n\n14\n00:00:53.730 --> 00:00:57.820\nA lot of times for most of us we don't\never really worry about this, right?\n\n15\n00:00:57.820 --> 00:01:01.640\nThe very fact that we may have to\nconnect to different types of databases.\n\n16\n00:01:01.640 --> 00:01:06.010\nBut it is a reality that a lot of times\nwhen your business starts to grow,\n\n17\n00:01:06.010 --> 00:01:09.830\nthat yes, you will actually be connecting\nto different types of databases.\n\n18\n00:01:09.830 --> 00:01:13.310\nAnd understanding how to\nactually get that connection done\n\n19\n00:01:13.310 --> 00:01:17.700\nas far as some of the different types\nthat we can do is really kind of key.\n\n20\n00:01:17.700 --> 00:01:20.626\nSo we want to go over those\ntechnologies just a little bit.\n\n21\n00:01:20.626 --> 00:01:22.236\nNow, I wanna also show you, of course,\n\n22\n00:01:22.236 --> 00:01:27.020\nthen how do you actually get some of these\ntechnologies to actually work first and\n\n23\n00:01:27.020 --> 00:01:30.380\nfor you So we want to also\ntake a look at that, as well.\n\n24\n00:01:30.380 --> 00:01:34.070\nSo let's go ahead and take a look\nat my screen here for a moment.\n\n25\n00:01:34.070 --> 00:01:35.680\nAnd I'm just showing you, of course,\n\n26\n00:01:35.680 --> 00:01:41.580\nmy Microsoft SQL server management\nstudio here for a moment.\n\n27\n00:01:41.580 --> 00:01:45.030\nAnd over here on the left hand\nside is what we're really, oop.\n\n28\n00:01:45.030 --> 00:01:46.920\nLet me see if I can do\nthat a little bit more.\n\n29\n00:01:46.920 --> 00:01:47.630\nThere we go.\n\n30\n00:01:47.630 --> 00:01:50.820\nOver here on the left hand side,\nnotice that underneath databases,\n\n31\n00:01:50.820 --> 00:01:54.830\nusually your own databases,\nof course, will be stored right here.\n\n32\n00:01:54.830 --> 00:01:59.260\nRemember that SQL itself has its own\nsystem databases here, master and\n\n33\n00:01:59.260 --> 00:02:02.450\nmodel, MSDB as well as TempDB.\n\n34\n00:02:02.450 --> 00:02:05.950\nBut when we add in databases,\nthey essentially show up down here,\n\n35\n00:02:05.950 --> 00:02:08.640\nand I've add in these two sample databases\n\n36\n00:02:08.640 --> 00:02:12.570\nthat you of course can get connected\nto and actually go online.\n\n37\n00:02:12.570 --> 00:02:16.591\nJust do a search for the adventure works\ndatabase, and if you're using 2014,\n\n38\n00:02:16.591 --> 00:02:20.039\nmake sure you get 2014,\nif you're using sequel server 2012,\n\n39\n00:02:20.039 --> 00:02:22.061\nget the 2012 edition as well, okay?\n\n40\n00:02:22.061 --> 00:02:25.858\nAnd that way you actually should be\nable to access both of them for you,.\n\n41\n00:02:25.858 --> 00:02:28.625\nBut in terms of getting connected here and\n\n42\n00:02:28.625 --> 00:02:32.530\nwhat we actually need to do\nto get connected to these.\n\n43\n00:02:32.530 --> 00:02:34.560\nAnd of course,\ndepends on where they reside and\n\n44\n00:02:34.560 --> 00:02:36.830\nhow you're actually going\nto connect to them.\n\n45\n00:02:36.830 --> 00:02:41.640\nBut at the beginning here, okay,\nif you need to connect to a new database,\n\n46\n00:02:41.640 --> 00:02:44.150\nor an existing data,\nI shouldn't say a new database.\n\n47\n00:02:44.150 --> 00:02:45.730\nYou're gonna create a new database,\n\n48\n00:02:45.730 --> 00:02:48.430\nyou would of course select\nNew Database right up here.\n\n49\n00:02:48.430 --> 00:02:52.430\nBut if you are gonna be connecting to an\nexisting database what you want to do is\n\n50\n00:02:52.430 --> 00:02:57.340\nyou want to right click on Databases, and\nthen select where it says Attach as well.\n\n51\n00:02:57.340 --> 00:03:02.480\nNow once you actually select Attach,\nlet me see if I can bring this up.\n\n52\n00:03:02.480 --> 00:03:04.120\nI may have to zoom out.\n\n53\n00:03:04.120 --> 00:03:07.050\nAnd then we can zoom back in here for\na moment.\n\n54\n00:03:07.050 --> 00:03:12.800\nTo attach the database it's gonna get us\nof course this particular property window,\n\n55\n00:03:12.800 --> 00:03:16.790\nand notice right over here on the right\nhand side it says databases to attach.\n\n56\n00:03:16.790 --> 00:03:21.950\nIt doesn't see any Microsoft database file\nlocations but I can click add here and\n\n57\n00:03:21.950 --> 00:03:26.826\nthen it will begin to actually show me\na list of databases that I can connect to.\n\n58\n00:03:26.826 --> 00:03:29.040\nNow this is actually in\nthe default locations, and\n\n59\n00:03:29.040 --> 00:03:35.670\nI've also added in my particular database\nright here, this 2014 one here, as well.\n\n60\n00:03:35.670 --> 00:03:38.720\nI select that, I click OK,\nand I am ready to attach.\n\n61\n00:03:40.920 --> 00:03:44.000\nBut, and that, that's the simplest\nway to attach a database.\n\n62\n00:03:44.000 --> 00:03:47.620\nThere's a file that you actually have\nto get rid of before you can attach it,\n\n63\n00:03:47.620 --> 00:03:50.320\nbecause it generates a little\ntemporary file for you.\n\n64\n00:03:50.320 --> 00:03:52.570\nBut once you get rid of that,\nthen they will attach right in.\n\n65\n00:03:52.570 --> 00:03:56.410\nAnd they will show up over\nhere on the left-hand side.\n\n66\n00:03:56.410 --> 00:03:59.040\nNow, what are some of the other databases,\nthen?\n\n67\n00:03:59.040 --> 00:04:01.780\nAnd how do we actually get\nto be able to see those?\n\n68\n00:04:01.780 --> 00:04:04.710\nIf you remember that, just briefly\nhere for a moment, let me show you.\n\n69\n00:04:04.710 --> 00:04:05.920\nMaybe I didn't show you this.\n\n70\n00:04:05.920 --> 00:04:07.650\nIt's probably true.\n\n71\n00:04:07.650 --> 00:04:13.380\nThat if I click on this drop-down list,\nnotice that it just says either a .mdf,\n\n72\n00:04:13.380 --> 00:04:18.270\nwhich is of course the Microsoft Data\nFile, and then it has all files.\n\n73\n00:04:18.270 --> 00:04:21.230\nAnd hey, where's the rest of\nthese that we can actually do?\n\n74\n00:04:21.230 --> 00:04:24.670\nSo I can show you some other things that\nare actually listed here that are not\n\n75\n00:04:24.670 --> 00:04:28.740\ntechnically the Microsoft Databases\nthat can actually connect directly in.\n\n76\n00:04:28.740 --> 00:04:32.210\nWell what if you needed to connect to\nother types of databases that are in\n\n77\n00:04:32.210 --> 00:04:33.570\nexistence out there?\n\n78\n00:04:33.570 --> 00:04:36.330\nWell what would you also\nhave to do as well?\n\n79\n00:04:36.330 --> 00:04:41.000\nWell one of the key things that you'll\nhave to do of course is upgrade your\n\n80\n00:04:41.000 --> 00:04:45.930\nparticular SQL server by adding in\njust a little bit of information.\n\n81\n00:04:45.930 --> 00:04:48.700\nNow, I went ahead and\nbrought this up for us.\n\n82\n00:04:48.700 --> 00:04:51.200\nLet me get out of that zoom.\n\n83\n00:04:51.200 --> 00:04:53.980\nAnd what we wanna do is actually is\nwant you to know something that's\n\n84\n00:04:53.980 --> 00:04:58.730\ncalled the Microsoft SQL Server Feature\nPack, is what you're looking for.\n\n85\n00:04:58.730 --> 00:05:03.450\nAnd there is one for the 2012 edition and\nthere is also one for\n\n86\n00:05:03.450 --> 00:05:08.480\nthe Microsoft SQL Server\n2014 edition as well.\n\n87\n00:05:08.480 --> 00:05:13.250\nThis is actually what will expand out the\ncapabilities of your SQL server so that\n\n88\n00:05:13.250 --> 00:05:17.620\nyou can attach to multiple and different\ntypes of databases that are available.\n\n89\n00:05:17.620 --> 00:05:22.460\nNow in this one here, we're gonna\nfocus in on this but it's the same\n\n90\n00:05:22.460 --> 00:05:27.360\nkind of feature here that you do,\nare all the information.\n\n91\n00:05:27.360 --> 00:05:29.460\nYou don't want to click on\nthe download button yet and\n\n92\n00:05:29.460 --> 00:05:30.630\nyou're going to say well why not?\n\n93\n00:05:30.630 --> 00:05:32.940\nBecause it will download everything for\nyou, and\n\n94\n00:05:32.940 --> 00:05:36.150\nif you think about it most of the time\nyou're not going to be connecting to\n\n95\n00:05:36.150 --> 00:05:38.250\nevery single type of database out there.\n\n96\n00:05:38.250 --> 00:05:40.100\nBut you want to be very specific.\n\n97\n00:05:40.100 --> 00:05:41.480\nSo, what you want to do instead for\n\n98\n00:05:41.480 --> 00:05:45.820\nMicrosoft is make sure you come\ndown here to where it says details.\n\n99\n00:05:45.820 --> 00:05:49.620\nAnd you expand out details here, and\nthat way you actually start seeing this.\n\n100\n00:05:49.620 --> 00:05:54.930\nAnd then, scroll down here, and\nexpand out Install Instructions instead.\n\n101\n00:05:54.930 --> 00:05:56.570\nNow when you start to take a look,\n\n102\n00:05:56.570 --> 00:06:00.080\nthere's a few things here that\nyou'll actually show you.\n\n103\n00:06:00.080 --> 00:06:03.510\nSo in 2014, they show you some of\nthe new things that it also includes in\n\n104\n00:06:03.510 --> 00:06:08.260\nthe feature pack, such as the back-up for\nthe Windows, the cloud adapter okay?\n\n105\n00:06:08.260 --> 00:06:12.000\nAnd even a Kerberos configuration\nmanager for this SQL server.\n\n106\n00:06:12.000 --> 00:06:17.820\nBut as I scroll on down through this\ninformation, I'll actually start seeing\n\n107\n00:06:17.820 --> 00:06:24.700\nthings beginning with the Microsoft ODBC\ndriver 11 for Microsoft SQL server okay?\n\n108\n00:06:24.700 --> 00:06:29.820\nAnd it tells us that this Microsoft ODBC\ndriver for SQL Server provides\n\n109\n00:06:29.820 --> 00:06:34.830\nnative connectivity from a Windows\nto Microsoft SQL Server and\n\n110\n00:06:34.830 --> 00:06:38.120\nto Azure SQL databases as well.\n\n111\n00:06:38.120 --> 00:06:41.970\nSo it is right here that we will get the\ndriver that allows us to directly attach\n\n112\n00:06:41.970 --> 00:06:43.220\nthose databases.\n\n113\n00:06:43.220 --> 00:06:47.260\nSo if I have a database inside my Azure\nCloud, I can actually use this particular\n\n114\n00:06:47.260 --> 00:06:52.230\nmanagement studio,\nthis instance of my Microsoft SQL server,\n\n115\n00:06:52.230 --> 00:06:55.370\nto also be able to connect\ndirectly to those native files.\n\n116\n00:06:55.370 --> 00:06:58.490\nAnd when they talked about native it says\nhey that makes it look like it's actually\n\n117\n00:06:58.490 --> 00:07:02.140\nright here in local even though it's\nactually somewhere else as well.\n\n118\n00:07:02.140 --> 00:07:05.620\nSo usually the ODBC is\na Open Data Base Connectivity\n\n119\n00:07:05.620 --> 00:07:07.432\ntype of driver that's standard.\n\n120\n00:07:07.432 --> 00:07:08.580\nThat's actually been out there for\n\n121\n00:07:08.580 --> 00:07:12.220\na long time to help us to\nconnect into those things.\n\n122\n00:07:12.220 --> 00:07:14.610\nSo normally you wanna make sure\nof course that you get that.\n\n123\n00:07:14.610 --> 00:07:17.198\nIf you realize that you\nare gonna be attaching to\n\n124\n00:07:17.198 --> 00:07:19.916\ndatabases like an Adra cloud or\neven to another SQL\n\n125\n00:07:19.916 --> 00:07:24.270\nserver instance that you're actually\nbring this stuff over from as well.\n\n126\n00:07:24.270 --> 00:07:25.080\nOkay.\n\n127\n00:07:25.080 --> 00:07:28.010\nSo that's one of those things\nthat we have to think about.\n\n128\n00:07:28.010 --> 00:07:32.910\nNow two, now of course there's actually\nother ones here, like the JDBC as well.\n\n129\n00:07:32.910 --> 00:07:38.280\nAnd this is where we have\nthe Java database connectivity.\n\n130\n00:07:38.280 --> 00:07:42.180\nNow, there's not a lot of,\nI'm going to say this for me,\n\n131\n00:07:42.180 --> 00:07:46.750\nsome of this is actually querying\ndatabases for things like, you know,\n\n132\n00:07:46.750 --> 00:07:50.120\norders, and of course customer history and\nstuff like that.\n\n133\n00:07:50.120 --> 00:07:53.060\nBut if you're actually a developer,\nthe idea of using a Java\n\n134\n00:07:53.060 --> 00:07:56.760\ndatabase connectivity driver is one\nof the key features for us, too.\n\n135\n00:07:56.760 --> 00:08:00.140\nIt allows you to be able to connect\ninto those Java types of databases that\n\n136\n00:08:00.140 --> 00:08:00.690\nwill help you out.\n\n137\n00:08:00.690 --> 00:08:02.638\nAnd you'll also see one here for PHP.\n\n138\n00:08:02.638 --> 00:08:06.906\nAnd as we scroll on through, you'll\nactually see there's several of them.\n\n139\n00:08:06.906 --> 00:08:09.645\nIncluding even blob stores as well,\n\n140\n00:08:09.645 --> 00:08:14.530\nokay, that we have available to us for\nbig data that's also out there.\n\n141\n00:08:14.530 --> 00:08:18.870\nAnd even some for Excel, that you might\nsee out there, which is not in our list.\n\n142\n00:08:18.870 --> 00:08:20.110\nAnd as we scroll on through,\n\n143\n00:08:20.110 --> 00:08:23.020\nthere's actually several other\nones that are down here, okay?\n\n144\n00:08:23.020 --> 00:08:25.980\nSo, what we wanna do is make sure that you\nunderstand that this is where you'll get\n\n145\n00:08:25.980 --> 00:08:30.020\nthose features added into\nthe SQL Server to help you out.\n\n146\n00:08:30.020 --> 00:08:32.690\nBut there's actually a lot more\nthat's actually available.\n\n147\n00:08:32.690 --> 00:08:37.090\nAnd that's,\nlet me see if I can find my diagram here,\n\n148\n00:08:37.090 --> 00:08:41.330\nthat will help us out and\nunderstand what we have going on, okay.\n\n149\n00:08:41.330 --> 00:08:44.860\nSo I just went ahead and made a list and\nactually put down a few of the features\n\n150\n00:08:44.860 --> 00:08:48.480\nfor us as we start to take\na look at some of the things.\n\n151\n00:08:48.480 --> 00:08:51.890\nBy far and above everything else, okay?\n\n152\n00:08:51.890 --> 00:08:56.700\nIf you can connect in terms of\nSQL Server 2014, they would rather you,\n\n153\n00:08:56.700 --> 00:09:01.270\nof course, use a Microsoft native client,\na native database, right?\n\n154\n00:09:01.270 --> 00:09:04.980\nSo they've actually, of course, made\nthis into what they call a SNAC, right?\n\n155\n00:09:04.980 --> 00:09:09.580\nThe SQL Server Native Client here\nis probably the most generic and\n\n156\n00:09:09.580 --> 00:09:13.080\nactually probably connects to the most\ndatabases that you normally see inside of\n\n157\n00:09:13.080 --> 00:09:14.930\nthe SQL Server as well.\n\n158\n00:09:14.930 --> 00:09:19.540\nNow, there are some things that\nare starting to fall away from SQL Server.\n\n159\n00:09:19.540 --> 00:09:24.630\nIn 2012, there was still support for\nOLDB, okay, OLE, excuse me, OLEDB,\n\n160\n00:09:25.900 --> 00:09:30.810\nin the Object Linking Embedded\ntypes of Databases as well.\n\n161\n00:09:30.810 --> 00:09:32.300\nBut the very fact is in 2014,\n\n162\n00:09:32.300 --> 00:09:37.190\nthey're saying that hey this is\nno longer included in this one.\n\n163\n00:09:37.190 --> 00:09:38.540\nSo just kinda be aware of that.\n\n164\n00:09:38.540 --> 00:09:41.140\nIt's really kinda fallen by the wayside.\n\n165\n00:09:41.140 --> 00:09:46.079\nIf you're actually saying, hey my database\nis an OLEDB, the object linking and\n\n166\n00:09:46.079 --> 00:09:48.080\nembedding database.\n\n167\n00:09:48.080 --> 00:09:51.020\nMore than likely SQL 2012 is probably\ngoing to be the way that you're going to\n\n168\n00:09:51.020 --> 00:09:54.490\nhave to stay if you really want to still\nconnect to those types of databases.\n\n169\n00:09:55.505 --> 00:09:59.420\nMicrosoft's ODBC, which is still one of\nthe very popular standards that's out\n\n170\n00:09:59.420 --> 00:10:00.680\nthere, even though it's older.\n\n171\n00:10:00.680 --> 00:10:05.450\nThe open database connectivity driver for\nSQL server gives us the ability,\n\n172\n00:10:05.450 --> 00:10:08.550\nof course,\nto actually connect to a lot of databases\n\n173\n00:10:08.550 --> 00:10:12.360\nthat actually do run on Windows\nas well as RedHat and SUSE.\n\n174\n00:10:12.360 --> 00:10:16.500\nSo this particular one is actually seeing\nwhere maybe we might have a database\n\n175\n00:10:16.500 --> 00:10:20.130\nthat's actually still residing on\na RedHat server somewhere, but\n\n176\n00:10:20.130 --> 00:10:24.980\nI still need to connect to it through my\nSQL server, I can still do that as well.\n\n177\n00:10:24.980 --> 00:10:27.240\nAnd then of course,\nmore programming stuff, for\n\n178\n00:10:27.240 --> 00:10:32.151\nthose that are actually program\noriented here, the ADO.net.\n\n179\n00:10:32.151 --> 00:10:37.300\nIt allows, and there's new terminology\nthat we also have to get used to.\n\n180\n00:10:37.300 --> 00:10:42.810\nIf you're like me you tend to\nshy away from new terminology,\n\n181\n00:10:42.810 --> 00:10:45.930\nbut in getting ready for the exam you\ngot to know some of this stuff as well.\n\n182\n00:10:45.930 --> 00:10:49.785\nThis says it's targeted at loosely couple,\nn-tier\n\n183\n00:10:49.785 --> 00:10:54.940\nInternet-based applications that\nsupport disconnected access to data.\n\n184\n00:10:54.940 --> 00:10:56.410\nWhat the heck is that about?\n\n185\n00:10:56.410 --> 00:10:59.020\nIt's about the idea of synchronous access,\nright?\n\n186\n00:10:59.020 --> 00:11:01.760\nNow the very fact is we may not get\nthe most up-to-date things that we\n\n187\n00:11:01.760 --> 00:11:03.760\nactually do have to connect here.\n\n188\n00:11:03.760 --> 00:11:05.970\nAnd also the idea of n-tier,\n\n189\n00:11:05.970 --> 00:11:09.207\nmeans that the database access\nis stored in multiple layers.\n\n190\n00:11:09.207 --> 00:11:14.738\nThe adventure works 2014, I directly\nconnected to it, through my SQL server.\n\n191\n00:11:14.738 --> 00:11:16.626\nBut you may find out that you\nactually have to go through\n\n192\n00:11:16.626 --> 00:11:17.831\nan interface first, to connect.\n\n193\n00:11:17.831 --> 00:11:22.728\nAnd then there's a logical connection, and\nthen there's finally a database access\n\n194\n00:11:22.728 --> 00:11:26.630\nlayer, when you start talking\nabout n-tier types of data.\n\n195\n00:11:26.630 --> 00:11:28.970\nSo usually at least three tiers of access.\n\n196\n00:11:28.970 --> 00:11:31.390\nThere could be multiple tiers beyond that.\n\n197\n00:11:31.390 --> 00:11:34.140\nIf you know you're connecting\ninto a database like that\n\n198\n00:11:34.140 --> 00:11:39.320\nthen you need this ADO.NET as well, which\nyou're also going to find in that feature\n\n199\n00:11:39.320 --> 00:11:43.900\npack to help support those types of\ndrivers and those connectivities too.\n\n200\n00:11:43.900 --> 00:11:47.490\nSo it really is,\nit's about the type that you need.\n\n201\n00:11:47.490 --> 00:11:49.680\nYou can download the entire\nfeature pack if you want to,\n\n202\n00:11:49.680 --> 00:11:53.470\nbut all you're gonna do is you're\ngonna bloat your SQL server, okay?\n\n203\n00:11:53.470 --> 00:11:55.020\nAnd we really don't need\nthat thing bloated.\n\n204\n00:11:55.020 --> 00:11:59.710\nIt's gonna take enough cycles for\nyou as you actually connect to these big\n\n205\n00:11:59.710 --> 00:12:02.520\ndatabases, so you don't wanna\nrun any more than you have to.\n\n206\n00:12:02.520 --> 00:12:05.360\nBut just kind of realize that\nyou will actually have to run\n\n207\n00:12:05.360 --> 00:12:07.090\ninto a few of these, okay?\n\n208\n00:12:07.090 --> 00:12:09.640\nSo this ADO.NET is a very popular one,\n\n209\n00:12:09.640 --> 00:12:14.820\nas well as of course, the Java Database\nConnectivity one as well, okay?\n\n210\n00:12:14.820 --> 00:12:18.060\nThat allows you to be able,\nof course, to access Windows and\n\n211\n00:12:18.060 --> 00:12:22.210\neven UNIX based types of\ndatabases that may also exist.\n\n212\n00:12:22.210 --> 00:12:24.430\nSo the idea is fairly simple.\n\n213\n00:12:24.430 --> 00:12:28.240\nIt actually makes it easy for us to\nconnect to cuz it's still the same way\n\n214\n00:12:28.240 --> 00:12:30.545\nthat we would normally connect\nto it on the end user side.\n\n215\n00:12:30.545 --> 00:12:34.160\nRight-click on the word Database\ninside of our Object Explorer.\n\n216\n00:12:34.160 --> 00:12:37.750\nSelect Attach and\nthen you can click on that drop-down.\n\n217\n00:12:37.750 --> 00:12:41.270\nAnd when we add in all those drivers,\nthose things should appear for us.\n\n218\n00:12:41.270 --> 00:12:44.510\nAnd we just need to navigate,\nof course, to that location.\n\n219\n00:12:44.510 --> 00:12:47.900\nWe're gonna find the access\nto that database too.\n\n220\n00:12:47.900 --> 00:12:50.000\nAnd then, of course, for PHP.\n\n221\n00:12:50.000 --> 00:12:53.500\nSo it offers the PHP5 extensions for us.\n\n222\n00:12:53.500 --> 00:12:56.390\nAnd even for Node.js as well.\n\n223\n00:12:56.390 --> 00:13:01.320\nAnd these also exists in the Azure cloud\nand give us the access, of course,\n\n224\n00:13:01.320 --> 00:13:02.910\nto those databases.\n\n225\n00:13:02.910 --> 00:13:07.430\nAnd lastly, the only one that\nactually still for us is right\n\n226\n00:13:07.430 --> 00:13:12.370\nhere as far as the SQL server goes,\nit is the Windows Access Components.\n\n227\n00:13:12.370 --> 00:13:16.300\nThe data access components and\nit's for those developers so\n\n228\n00:13:16.300 --> 00:13:19.680\nthat they can actually connect\nto two types of databases.\n\n229\n00:13:19.680 --> 00:13:22.200\nMost of the time,\nit's gonna be relational databases.\n\n230\n00:13:22.200 --> 00:13:23.970\nBut there is a popularity today,\n\n231\n00:13:23.970 --> 00:13:28.580\nespecially on the internet side of things,\nright, to actually get access to even\n\n232\n00:13:28.580 --> 00:13:32.640\na non-relational database source as well,\nokay.\n\n233\n00:13:32.640 --> 00:13:34.480\nSo they're expanding their reach out.\n\n234\n00:13:34.480 --> 00:13:38.515\nFor me, SQL has always been a relational\ndatabase type of connection.\n\n235\n00:13:38.515 --> 00:13:42.730\nBut they're even saying look we can\neven connect to the non-relational\n\n236\n00:13:42.730 --> 00:13:46.990\ntypes of databases as well to give us\nthe management, to be able to run queries\n\n237\n00:13:46.990 --> 00:13:50.860\nagainst them the way that you and I\nare actually used to taking a look at it.\n\n238\n00:13:50.860 --> 00:13:57.710\nSo if you do need support beyond\nthe basic Microsoft type of database.\n\n239\n00:13:57.710 --> 00:14:01.540\nThat means you need to go out and\nget that feature pack.\n\n240\n00:14:01.540 --> 00:14:04.120\nMake sure you get the right version for\nwhatever version that you're running,\n\n241\n00:14:04.120 --> 00:14:05.680\neither the 2012 or the 2014.\n\n242\n00:14:05.680 --> 00:14:07.910\nThis show focuses in on the 2014.\n\n243\n00:14:07.910 --> 00:14:11.844\nBut everything that we've discussed\nin the show so far, and even this,\n\n244\n00:14:11.844 --> 00:14:13.210\nit's gonna be the same.\n\n245\n00:14:13.210 --> 00:14:16.720\nSo make sure you understand that, and\nget those packs that you need to,\n\n246\n00:14:16.720 --> 00:14:19.050\nso that you can connect\nin those databases.\n\n247\n00:14:19.050 --> 00:14:22.750\nKnow what types of database that\nyou can also connect to as well\n\n248\n00:14:22.750 --> 00:14:23.960\nby using that feature pack.\n\n249\n00:14:23.960 --> 00:14:27.610\nIt will help you, and it will actually\nallow you to unleash the power\n\n250\n00:14:27.610 --> 00:14:31.050\nof your SQL server instead of just saying,\nno, I can't connect to that type.\n\n251\n00:14:31.050 --> 00:14:35.030\nMore than likely you can actually connect\nto the majority of database types\n\n252\n00:14:35.030 --> 00:14:37.850\nthat are actually out there in\nexisting on the world today\n\n253\n00:14:37.850 --> 00:14:39.750\nusing your Microsoft SQL Server 2014.\n\n254\n00:14:39.750 --> 00:14:43.870\n>> Well Ronnie, they say dynamite\ncomes in small packages, and\n\n255\n00:14:43.870 --> 00:14:45.410\nthis was definitely a grenade.\n\n256\n00:14:45.410 --> 00:14:48.860\nIt wasn't a lot of content,\nbut it was very informational.\n\n257\n00:14:48.860 --> 00:14:51.530\nAnd that does go to speak to,\n\n258\n00:14:51.530 --> 00:14:55.730\nnot every day are you using that straight\nup Microsoft-to-Microsoft stuff.\n\n259\n00:14:55.730 --> 00:14:59.130\nSometimes, you're a Java developer,\nand I need access to that SQL Server.\n\n260\n00:14:59.130 --> 00:15:00.270\nI gotta make these two things talk.\n\n261\n00:15:00.270 --> 00:15:00.970\nI gotta make them work.\n\n262\n00:15:00.970 --> 00:15:05.700\nI need access to that database so that\ninformation comes in and is meaningful for\n\n263\n00:15:05.700 --> 00:15:06.760\nmy environment.\n\n264\n00:15:06.760 --> 00:15:10.130\nMaybe I'm a .NET, even though it's\na Microsoft programming language,\n\n265\n00:15:10.130 --> 00:15:12.770\nthey're still not,\nthey're not the same thing.\n\n266\n00:15:12.770 --> 00:15:16.830\nYou have to make them talk, you have to\nsay I want you to reach out to there and\n\n267\n00:15:16.830 --> 00:15:20.560\nbe able to use the information that comes\nfrom the database inside of our programs.\n\n268\n00:15:20.560 --> 00:15:23.400\nAnd this is exactly what\nRonnie is talking about today,\n\n269\n00:15:23.400 --> 00:15:26.740\ngetting the access in\nthe environment that you're using so\n\n270\n00:15:26.740 --> 00:15:29.950\nthat you can use the data\ninside the database itself.\n\n271\n00:15:29.950 --> 00:15:31.810\nVery, very helpful stuff, Ronnie.\n\n272\n00:15:31.810 --> 00:15:33.080\nI know it wasn't a lot but\n\n273\n00:15:33.080 --> 00:15:35.398\nit was definitely worthy of\nits own little mini episode.\n\n274\n00:15:35.398 --> 00:15:36.750\n>> [LAUGH]\n>> And we thank you for that.\n\n275\n00:15:36.750 --> 00:15:39.240\nThank you guys for watching and\nwe're gonna go ahead and sign off.\n\n276\n00:15:39.240 --> 00:15:41.480\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n277\n00:15:41.480 --> 00:15:42.140\n>> And I'm Ronnie Wong.\n\n278\n00:15:42.140 --> 00:15:44.235\n>> And we'll see you next time.\n\n279\n00:15:44.235 --> 00:15:48.914\n[SOUND]\n\n",
          "vimeoId": "164410290"
        },
        {
          "description": "In this episode, Daniel and Ronnie show you how to work with conditional statements and NULL values. They begin by explaining the CASE function to perform decisions based on matching conditions. They then turn to the IS NULL function to test for NULL values. Finally, they explain how to use the COALESCE function to replace a NULL value with another value.",
          "length": "1954",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-7-work_with_conditions_and_nulls-042516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-7-work_with_conditions_and_nulls-042516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-7-work_with_conditions_and_nulls-042516-1-sm.jpg",
          "title": "Work with Conditions and Nulls",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.886 --> 00:00:13.560\nAll right, greetings everyone.\n\n3\n00:00:13.560 --> 00:00:16.180\nAnd welcome to another\nexciting episode of ITProTV.\n\n4\n00:00:16.180 --> 00:00:18.060\nI'm your host, Daniel Lowrie.\n\n5\n00:00:18.060 --> 00:00:21.100\nAnd in today's episode,\nwe are continuing on with our series\n\n6\n00:00:21.100 --> 00:00:24.610\nof the querying the Microsoft SQL\nserver diversion 2014.\n\n7\n00:00:24.610 --> 00:00:28.650\nAnd joining us back in the studio again,\nto lend his ginormous expertise\n\n8\n00:00:28.650 --> 00:00:31.240\non this very topic is our good friend,\nMr. Ronnie Wong.\n\n9\n00:00:31.240 --> 00:00:32.700\nRonnie, welcome back, how's it going?\n\n10\n00:00:32.700 --> 00:00:33.800\n>> It is going well today,\n\n11\n00:00:33.800 --> 00:00:37.150\nas we continue on taking a look at\nmore Microsoft Sequel Server 2014.\n\n12\n00:00:37.150 --> 00:00:42.070\nToday we're taking a look at conditions\nthat we actually have to deal with\n\n13\n00:00:42.070 --> 00:00:45.480\na lot of times and\nof course nulls as well.\n\n14\n00:00:45.480 --> 00:00:49.270\nNow we start talking about\nthe idea of conditions in nulls.\n\n15\n00:00:49.270 --> 00:00:52.990\nA lot of times when we are doing\nthe query, we're really trying to pull\n\n16\n00:00:52.990 --> 00:00:56.880\ninformation out but sometimes what we need\nis we need to be able to actually have\n\n17\n00:00:56.880 --> 00:01:00.350\nthe information displayed and\nthen based on the condition,\n\n18\n00:01:00.350 --> 00:01:04.790\ntell us what we actually want to be\nable to have set before us as well.\n\n19\n00:01:04.790 --> 00:01:08.120\nSo we're gonna actually take a look at\nsome of those things that allow us to set\n\n20\n00:01:08.120 --> 00:01:12.090\nthings like those conditions, and then\nreport to us the values that we actually,\n\n21\n00:01:12.090 --> 00:01:12.860\nneed to see.\n\n22\n00:01:12.860 --> 00:01:16.650\nNow throughout our series, we've\nactually used some of this stuff before.\n\n23\n00:01:16.650 --> 00:01:19.380\nI just didn't actually take the time\nto explain it a little bit.\n\n24\n00:01:19.380 --> 00:01:22.440\nSo today we'll actually take the time\nto also walk through the syntax and\n\n25\n00:01:22.440 --> 00:01:23.870\nexplain it as well.\n\n26\n00:01:23.870 --> 00:01:27.360\nWe also, of course,\nneed to deal with the idea of nulls.\n\n27\n00:01:27.360 --> 00:01:30.990\nNow, a lot of times when you hear\nthe terms nulls you actually hear the term\n\n28\n00:01:30.990 --> 00:01:32.360\nnull value.\n\n29\n00:01:32.360 --> 00:01:35.730\nAnd as I kept actually\ntaking a look at this idea,\n\n30\n00:01:35.730 --> 00:01:40.970\nnull values is kind of an unusual\nterminology to that, and most of the time\n\n31\n00:01:40.970 --> 00:01:44.790\nif you actually start reading people that\nwrite technically, it's not a null value.\n\n32\n00:01:44.790 --> 00:01:48.160\nThere's no such thing as a null value,\nan unknown value.\n\n33\n00:01:48.160 --> 00:01:52.370\nWhat they would really want you to\ncall it is a null mark, itself.\n\n34\n00:01:52.370 --> 00:01:55.040\nIn other words, it's just an indication\nthat there is some value there and\n\n35\n00:01:55.040 --> 00:01:57.720\nyou just don't know what it is so\nyou are actually putting a mark,\n\n36\n00:01:57.720 --> 00:02:00.960\nsuch as the word null,\nin place of it instead.\n\n37\n00:02:00.960 --> 00:02:03.690\nAnd we'll take a look at that as well,\nas of course the way\n\n38\n00:02:03.690 --> 00:02:07.950\nthat they want you to actually deal\nwith no values instead as well.\n\n39\n00:02:07.950 --> 00:02:10.560\nSo, there's a couple of different\nthings that we'll be talking about, but\n\n40\n00:02:10.560 --> 00:02:15.480\nspecifically when it turns, when it comes\ndown to it, we need to deal with of course\n\n41\n00:02:15.480 --> 00:02:20.490\nusing the syntax and the functions or\nthe keywords here, what we\n\n42\n00:02:20.490 --> 00:02:25.830\ncall Case and then of course is null or\nis not null, it kinda go hand in hand.\n\n43\n00:02:25.830 --> 00:02:29.900\nAnd then coalesce value at the end there.\n\n44\n00:02:29.900 --> 00:02:32.670\nAs well that will help bring\nthings together for us.\n\n45\n00:02:32.670 --> 00:02:36.810\nAnd be able to help us set of conditions\nand deal with coarse as they appear.\n\n46\n00:02:36.810 --> 00:02:41.090\nSo that's what we're actually taking a\nlook at in this particular episode today.\n\n47\n00:02:41.090 --> 00:02:44.310\nIs trying to get to that point\nwhere we can actually deal\n\n48\n00:02:44.310 --> 00:02:46.490\nwith some of the things\nwe have to worry about.\n\n49\n00:02:46.490 --> 00:02:48.930\nSo Daniel when it comes down to it,\n\n50\n00:02:48.930 --> 00:02:53.890\nin terms of clearing from the database\nitself, getting the values out of it,\n\n51\n00:02:53.890 --> 00:02:57.070\nright, that we want,\nis pretty much the key.\n\n52\n00:02:57.070 --> 00:02:59.200\nBut the reason why we need those values,\n\n53\n00:02:59.200 --> 00:03:02.580\nis to actually determine something\nthat we're going to do, right?\n\n54\n00:03:02.580 --> 00:03:04.930\nSo I might query something just to see if,\n\n55\n00:03:04.930 --> 00:03:07.259\nhow well a sale is going\non in the NorthWest?\n\n56\n00:03:09.600 --> 00:03:12.740\nOr what's happening over here and\nwhat do we actually need to do.\n\n57\n00:03:12.740 --> 00:03:16.260\nGetting those values out,\nactually is being able to do a report.\n\n58\n00:03:16.260 --> 00:03:18.620\nAnd then someone's making\na decision off of.\n\n59\n00:03:18.620 --> 00:03:23.420\nAnd that's actually why it's key for\nus to be able to write correct queries and\n\n60\n00:03:23.420 --> 00:03:25.640\nto do those types of things.\n\n61\n00:03:25.640 --> 00:03:27.190\nSo that we can do that.\n\n62\n00:03:27.190 --> 00:03:29.760\nBut sometimes it's\nactually a more simple and\n\n63\n00:03:29.760 --> 00:03:35.460\na more basic function to it, in which the\nvalues that are entered into our database,\n\n64\n00:03:35.460 --> 00:03:38.590\neven though they were designed and\nsomebody thought about it,\n\n65\n00:03:38.590 --> 00:03:42.090\nlike here's how I'm going to connect\nall this data together, right?\n\n66\n00:03:42.090 --> 00:03:46.840\nFields that exist so that we can\nconnect the data together, well\n\n67\n00:03:46.840 --> 00:03:51.560\nsometimes those values are representative\nof well other values as well.\n\n68\n00:03:51.560 --> 00:03:54.390\nThey're just not actually\nwritten out the way that you and\n\n69\n00:03:54.390 --> 00:03:56.570\nI would think that they\nwould go into a report.\n\n70\n00:03:56.570 --> 00:04:01.290\nAnd what we need instead is someway\nthat we can the value that exists and\n\n71\n00:04:01.290 --> 00:04:03.820\nreport it in a different name, okay.\n\n72\n00:04:03.820 --> 00:04:08.420\nSo that's something we can actually do the\nother thing that we might also encounter\n\n73\n00:04:08.420 --> 00:04:13.830\ninside of a database is, let's take\nthe example of inventory of things, right?\n\n74\n00:04:13.830 --> 00:04:17.820\nSo, as you actually\nare a retailer of some sort, and\n\n75\n00:04:17.820 --> 00:04:22.120\nyou sell more and more products, well,\nwhat should happen at the same time,\n\n76\n00:04:22.120 --> 00:04:24.840\nright, is not only are you selling,\nwhich is a great thing, but\n\n77\n00:04:24.840 --> 00:04:28.590\nyour inventory is actually depleting\nto a certain point as well.\n\n78\n00:04:28.590 --> 00:04:29.250\nOkay?\n\n79\n00:04:29.250 --> 00:04:32.860\nNow, the problem that we have is,\nand I've dealt with this in retail.\n\n80\n00:04:32.860 --> 00:04:34.810\nAnd, Daniel, I don't know if\nyou ever worked retail, but\n\n81\n00:04:34.810 --> 00:04:36.930\nwe've probably dealt with it\nat some time in our life.\n\n82\n00:04:36.930 --> 00:04:41.280\nWhere all of a sudden you get down to the\nlast one, and now another order comes in.\n\n83\n00:04:41.280 --> 00:04:43.600\nAnd now you're like, well,\nthere's no more to be had.\n\n84\n00:04:44.620 --> 00:04:49.750\nYou don't have that ability to even try\nand sell anymore cuz it's all gone.\n\n85\n00:04:49.750 --> 00:04:52.330\nAnd what is happened is, you've now\nsold out of your entire inventory,\n\n86\n00:04:52.330 --> 00:04:54.780\nand there has actually\nbeen no reorder done.\n\n87\n00:04:54.780 --> 00:04:58.010\nAnd even if you reorder it now,\nit's still light, my guess.\n\n88\n00:04:58.010 --> 00:05:00.460\n>> Yeah, we see this problem in\ninvestment shows all the time, right?\n\n89\n00:05:00.460 --> 00:05:03.040\nThey say, I would love to.\n\n90\n00:05:03.040 --> 00:05:05.970\nI need $50,000 and\nI'll give you a stake in my company.\n\n91\n00:05:05.970 --> 00:05:07.120\nAnd what do you need the money for?\n\n92\n00:05:07.120 --> 00:05:08.560\nWell I need it to fill orders.\n\n93\n00:05:08.560 --> 00:05:12.910\nThat's my problem as I can't raise stock\nmy inventory this thing has been so\n\n94\n00:05:12.910 --> 00:05:17.210\nexciting and so well taken that\neverybody has ordered them and\n\n95\n00:05:17.210 --> 00:05:19.010\nI can't make enough of them quick enough.\n\n96\n00:05:19.010 --> 00:05:22.140\nSo I need to either retool my\nfacilities so that I can create more or\n\n97\n00:05:22.140 --> 00:05:25.300\nI can purchase more of whatever\nfrom another vendor, right?\n\n98\n00:05:25.300 --> 00:05:26.210\nAnd that's where we\n>> Yeah,\n\n99\n00:05:26.210 --> 00:05:30.020\nonce you actually start doing\nstuff like that, now you also need\n\n100\n00:05:30.020 --> 00:05:34.940\nsomething that tells you, hey at what\npoint do I need to reorder this stuff too?\n\n101\n00:05:34.940 --> 00:05:37.920\nWell, when you start to take a look\nat manually it's fairly simple.\n\n102\n00:05:37.920 --> 00:05:40.330\nAnd I kept all my\ninventory in front of me.\n\n103\n00:05:40.330 --> 00:05:44.560\nI could actually go ahead and\nput beside that inventory that says\n\n104\n00:05:44.560 --> 00:05:47.980\nwhen the numbers hit ten, okay?\n\n105\n00:05:47.980 --> 00:05:51.990\nSo, I only have ten here on the shelve\nthen I need to actually go ahead and\n\n106\n00:05:51.990 --> 00:05:54.580\nrestock or reorder this thing, okay?\n\n107\n00:05:54.580 --> 00:05:58.730\nThat would be something that would be very\nnice for us to have the ability to do, but\n\n108\n00:05:58.730 --> 00:06:02.420\nsince a lot of times all of that stuff\nis now kept electronically in terms of\n\n109\n00:06:02.420 --> 00:06:04.310\nstock and stuff like that.\n\n110\n00:06:04.310 --> 00:06:08.620\nWell, it'd be better if we actually had\nthe ability then to go into our database\n\n111\n00:06:08.620 --> 00:06:14.190\nto query that database that says hey, when\nwe actually hit the inventory quantity of\n\n112\n00:06:14.190 --> 00:06:18.860\ntap, okay, then go ahead and throw up a\nred flag that says it's time to re-order.\n\n113\n00:06:18.860 --> 00:06:19.420\nOkay?\n\n114\n00:06:19.420 --> 00:06:23.190\nAnd we actually want something like\nthat to be able to help us out So,\n\n115\n00:06:23.190 --> 00:06:27.290\nwe are going to actually take a look at\nthat particular function that will help us\n\n116\n00:06:27.290 --> 00:06:28.720\nout as well, okay?\n\n117\n00:06:28.720 --> 00:06:31.310\nNow, you might be wondering,\nwhy is this really helpful?\n\n118\n00:06:31.310 --> 00:06:35.860\nIt's helpful because it allows us to set\ndifferent conditions based on the answers\n\n119\n00:06:35.860 --> 00:06:39.470\nthat we get, so it doesn't have to be just\none condition, like when it just hits ten.\n\n120\n00:06:39.470 --> 00:06:42.050\nI could say when it hits 20.\n\n121\n00:06:42.050 --> 00:06:45.350\nGo ahead and just turn this\ncolumn yellow if I wanted to.\n\n122\n00:06:45.350 --> 00:06:50.990\nWhen it hits 15 start turning it orange,\nwhen it hits ten turn it red and\n\n123\n00:06:50.990 --> 00:06:54.840\nthen throw up a flag that\nsays reorder at this point.\n\n124\n00:06:54.840 --> 00:06:59.630\nSo based on different values I can\neven come up with different ways of,\n\n125\n00:06:59.630 --> 00:07:01.610\ndifferent ways to actually display that.\n\n126\n00:07:01.610 --> 00:07:04.860\nSo if you think about it,\nthat means multiple conditions can\n\n127\n00:07:04.860 --> 00:07:10.060\neven help us to help us to be able to\nsend multiple results out instead.\n\n128\n00:07:10.060 --> 00:07:13.060\nAnd the way we do that is by\nusing the case statement.\n\n129\n00:07:13.060 --> 00:07:15.310\nAnd that will help us out tremendously.\n\n130\n00:07:15.310 --> 00:07:19.000\nNow remember that, like I said, if you've\nactually been watching this series,\n\n131\n00:07:19.000 --> 00:07:20.540\nwe've actually used this a couple times.\n\n132\n00:07:20.540 --> 00:07:22.860\nAnd you've heard me say well we're\ngonna talk about it a little bit later,\n\n133\n00:07:22.860 --> 00:07:24.510\nwell now's the time or day, right?\n\n134\n00:07:24.510 --> 00:07:25.710\n>> It's finally the day.\n\n135\n00:07:25.710 --> 00:07:29.060\nThey were actually going to talk about\nthis idea, but that's the conditions that\n\n136\n00:07:29.060 --> 00:07:32.890\nyou would normally actually say,\nall right this is what I would need to do.\n\n137\n00:07:32.890 --> 00:07:37.440\nSo let's go on and take a look at an\nexample here that I have in front of us.\n\n138\n00:07:37.440 --> 00:07:39.435\nAnd let me zoom back out.\n\n139\n00:07:39.435 --> 00:07:40.735\nAnd then kinda focus in on it a little.\n\n140\n00:07:40.735 --> 00:07:42.865\nThere we go.\nA little bit better here.\n\n141\n00:07:42.865 --> 00:07:44.905\nAnd I've got a couple of\nthings we're gonna take look.\n\n142\n00:07:44.905 --> 00:07:47.525\nWe're gonna use this example\nin our next one as well.\n\n143\n00:07:47.525 --> 00:07:49.985\nBut, let me get a little bit further out.\n\n144\n00:07:49.985 --> 00:07:50.779\nThere we go.\nSo,\n\n145\n00:07:50.779 --> 00:07:55.189\nright now I'm connected to\nthe Adventure Works 2014 database.\n\n146\n00:07:55.189 --> 00:07:58.986\nAnd as you take a look at this\nparticular select statement here.\n\n147\n00:07:58.986 --> 00:08:02.039\nI'm selecting the ProductId.\n\n148\n00:08:02.039 --> 00:08:06.250\nOops, I did not actually, see I forgot\none because of the spacing that I had.\n\n149\n00:08:06.250 --> 00:08:07.160\nThere we go.\n\n150\n00:08:07.160 --> 00:08:14.340\nSo ProductId, as well as the product name\nitself and the category itself as well.\n\n151\n00:08:14.340 --> 00:08:20.060\nSo I'm actually selecting those three as\nbeing the columns of data that I have.\n\n152\n00:08:20.060 --> 00:08:23.450\nFrom a particular table\ncalled Production.Product.\n\n153\n00:08:23.450 --> 00:08:25.710\nI'm using an alias to help us out,\n\n154\n00:08:25.710 --> 00:08:28.110\nto shorten some of the things\na little bit later on.\n\n155\n00:08:28.110 --> 00:08:31.160\nBut right here is where they're\nactually shortening up here.\n\n156\n00:08:31.160 --> 00:08:33.280\nSo that actually helps me out.\n\n157\n00:08:33.280 --> 00:08:34.870\nBut what do I wanna do with that?\n\n158\n00:08:34.870 --> 00:08:38.060\nJust returning those values,\ndon't get me wrong, is fairly helpful.\n\n159\n00:08:38.060 --> 00:08:43.070\nBut what I want it to do, right, is that I\nknow something about ProductsubcategoryID\n\n160\n00:08:43.070 --> 00:08:48.610\nhere, is that even though they're actually\nsupposed to represent product categories,\n\n161\n00:08:48.610 --> 00:08:52.120\nwell I've actually only identified\nthem with numbers such as 1 2 3 and\n\n162\n00:08:52.120 --> 00:08:54.750\nthat actually goes up to,\nI think, to 14 or 15.\n\n163\n00:08:54.750 --> 00:08:58.100\nI just got too tired to write out anymore.\n\n164\n00:08:58.100 --> 00:09:00.920\nBut that's what it actually does for\nus here, okay.\n\n165\n00:09:00.920 --> 00:09:06.230\nSo what I actually want to do is that\nas we see these product categories,\n\n166\n00:09:06.230 --> 00:09:08.820\nI want to go ahead and give it a label.\n\n167\n00:09:08.820 --> 00:09:12.460\nOkay, so if you think on that,\nI have different categories, and\n\n168\n00:09:12.460 --> 00:09:15.160\neach of them also need a different label.\n\n169\n00:09:15.160 --> 00:09:19.780\nWell at that point, how could I have\nactually done this particular statement?\n\n170\n00:09:19.780 --> 00:09:22.640\nI could've actually went ahead and\ndid a select statement for\n\n171\n00:09:22.640 --> 00:09:27.420\neach of the different\nProductsubcategoryIDs, right?\n\n172\n00:09:27.420 --> 00:09:30.180\nInstead, doing the select and\nthe rest of this, and\n\n173\n00:09:30.180 --> 00:09:33.650\nthen coming down to here on\nthe ProductsubcategoryID.\n\n174\n00:09:33.650 --> 00:09:37.220\nAfter the from I could\nadd in a where clause,\n\n175\n00:09:37.220 --> 00:09:41.380\nwhere ProductcategorysubID\nis actually equal to 1.\n\n176\n00:09:41.380 --> 00:09:42.640\nRun that one, same thing.\n\n177\n00:09:42.640 --> 00:09:43.900\nDo a 2 there.\n\n178\n00:09:43.900 --> 00:09:47.120\ncontinue to run that all the way\nthrough all 14 of my categories and\n\n179\n00:09:47.120 --> 00:09:49.150\nthat would have given me\nall of those differences.\n\n180\n00:09:49.150 --> 00:09:51.460\nOkay?\nIt would have been perfectly fine.\n\n181\n00:09:51.460 --> 00:09:55.960\nBut then that would have actually just\nlisted them and it would still give me\n\n182\n00:09:55.960 --> 00:10:01.180\na one, a two, and a three for\neach of those ProductsubcategoryIDs.\n\n183\n00:10:01.180 --> 00:10:05.980\nBut what I can do, since this is\nactually one big query that I have\n\n184\n00:10:05.980 --> 00:10:09.810\nis I can now say,\nhere is the condition I want to meet.\n\n185\n00:10:09.810 --> 00:10:11.750\nNow Daniel and\nI were talking right before the show that,\n\n186\n00:10:11.750 --> 00:10:15.130\nhe says, this sounds a little bit like the\nprogramming where we're doing something\n\n187\n00:10:15.130 --> 00:10:18.370\nlike an if then statement and I said,\nthat's exactly what we're doing.\n\n188\n00:10:18.370 --> 00:10:21.560\nIn SQL land we call it a case\nstatement is what we actually call it.\n\n189\n00:10:21.560 --> 00:10:23.000\nSo instead, remember that one.\n\n190\n00:10:23.000 --> 00:10:24.830\nYes, you do end up with case.\n\n191\n00:10:24.830 --> 00:10:30.330\nNotice it just becomes another field\nin the select statement itself.\n\n192\n00:10:30.330 --> 00:10:34.900\nSo we now have our case that we\nare making and notice that we'll also\n\n193\n00:10:34.900 --> 00:10:38.700\nend the case and we'll give it\nanother category name instead.\n\n194\n00:10:38.700 --> 00:10:43.090\nSo this is essentially going to\nappear as a column of data for us.\n\n195\n00:10:43.090 --> 00:10:44.780\nRight here, as CASE.\n\n196\n00:10:44.780 --> 00:10:46.390\nSo just as ProductName and\n\n197\n00:10:46.390 --> 00:10:49.460\nProductId will appear,\nnow we'll also have something called\n\n198\n00:10:49.460 --> 00:10:54.460\nCategoryname at the bottom that will\nalso appear, based on these conditions.\n\n199\n00:10:54.460 --> 00:10:58.730\nSo the case that I'm making for\nthe ProductsubcategoryID,\n\n200\n00:10:59.930 --> 00:11:05.450\nin this particular sense here, Is gonna\nbe when you actually end up seeing\n\n201\n00:11:05.450 --> 00:11:10.430\nthis particular category number,\nwhatever it actually turns out to be,\n\n202\n00:11:10.430 --> 00:11:13.220\n1, 2, and 3, then one should\nbe mountain for mountain bike.\n\n203\n00:11:13.220 --> 00:11:15.400\nSo I can actually change\nthat if I wanted to.\n\n204\n00:11:15.400 --> 00:11:20.978\nLet's just go ahead and change that,\nMountain Bike here Mountain bike.\n\n205\n00:11:20.978 --> 00:11:23.190\n>> [LAUGH]\n>> And then of course,\n\n206\n00:11:23.190 --> 00:11:25.030\nlet's say there's road racers.\n\n207\n00:11:26.830 --> 00:11:29.510\nAnd then there's touring,\nI want to just call it a bike.\n\n208\n00:11:29.510 --> 00:11:34.780\nAnd that way we can change that up and\ndo that.\n\n209\n00:11:34.780 --> 00:11:36.860\nAnd then I know that there's other\nparts that are in there, but\n\n210\n00:11:36.860 --> 00:11:41.010\nmost of them are just component parts for\nbicycles, is what they actually are.\n\n211\n00:11:41.010 --> 00:11:45.850\nSo, if I run something like this and I'm\ntelling it to report that as category and\n\n212\n00:11:45.850 --> 00:11:48.430\nI'm telling it to do it\noff of one table here.\n\n213\n00:11:48.430 --> 00:11:52.990\nLet me go ahead and\nselect this, right here.\n\n214\n00:11:52.990 --> 00:11:56.230\n>> I think you're at the wrong section-\n>> Ooh,\n\n215\n00:11:56.230 --> 00:11:57.210\nI'm going all the way through, yep.\n\n216\n00:11:57.210 --> 00:11:58.100\nI did that.\n\n217\n00:11:58.100 --> 00:11:59.790\nThere we go.\n\n218\n00:11:59.790 --> 00:12:00.420\nThank you.\n\n219\n00:12:00.420 --> 00:12:03.820\nCuz I would've actually done that and\nnot even realized it.\n\n220\n00:12:03.820 --> 00:12:06.020\nSo that's what happens\nwhen I zoom in too much.\n\n221\n00:12:07.150 --> 00:12:07.970\nI don't take a look.\n\n222\n00:12:07.970 --> 00:12:08.470\nOkay.\n\n223\n00:12:08.470 --> 00:12:10.420\nSo we're just gonna run\nthis entire one and\n\n224\n00:12:10.420 --> 00:12:15.860\nlet's make sure we examine the results\nhere, and see what happens.\n\n225\n00:12:17.420 --> 00:12:21.400\nOkay, so\nfrom the result value that I can see here,\n\n226\n00:12:23.960 --> 00:12:27.710\nI can go ahead and\nactually deal with this fact as well.\n\n227\n00:12:27.710 --> 00:12:30.620\nLet's see, zoom in a little bit more and\n\n228\n00:12:30.620 --> 00:12:33.640\na little bit over here and let's take\na look at what it's show on this.\n\n229\n00:12:33.640 --> 00:12:34.210\nOkay?\n\n230\n00:12:34.210 --> 00:12:36.790\nSo, here' my product ID,\nwhich is what I told it.\n\n231\n00:12:36.790 --> 00:12:38.480\nI just wanted to make sure I saw it.\n\n232\n00:12:38.480 --> 00:12:42.170\nThe name, but now, here's what\nI'm basing the condition off of.\n\n233\n00:12:42.170 --> 00:12:42.900\nRight?\n\n234\n00:12:42.900 --> 00:12:48.040\nSo, whatever I named as product category,\nwhich was that sub product ID category.\n\n235\n00:12:48.040 --> 00:12:48.800\nOkay?\n\n236\n00:12:48.800 --> 00:12:52.550\nI told it that anything besides 1,\n2, and 3,\n\n237\n00:12:52.550 --> 00:12:56.430\ngo ahead and\ncall the Categoryname here parts.\n\n238\n00:12:56.430 --> 00:12:57.110\nOkay?\n\n239\n00:12:57.110 --> 00:13:01.770\nNow if I scroll on through,\nat some point here, there we go.\n\n240\n00:13:01.770 --> 00:13:03.970\nYou actually see that there are parts but\nhere it is.\n\n241\n00:13:05.190 --> 00:13:09.650\nSo remember one of those conditions that\nI had set up Well it's the very fact\n\n242\n00:13:09.650 --> 00:13:14.160\nthat it was actually a two, when\n\n243\n00:13:14.160 --> 00:13:19.450\nthe ProductsubcatergoryID\nturns into a two, then instead\n\n244\n00:13:19.450 --> 00:13:24.360\ngo ahead and write out Road Racer and\nput it underneath the category name.\n\n245\n00:13:24.360 --> 00:13:29.930\nAnd that's where you do see Road Racer,\nand it's right there, okay?\n\n246\n00:13:29.930 --> 00:13:32.650\nSo you are actually starting to see\nthat here is another condition.\n\n247\n00:13:32.650 --> 00:13:37.060\nSo each one of those gives us that\nability to do the same thing, and\n\n248\n00:13:37.060 --> 00:13:40.680\nthere's mountain bike,\nmore road racer, more parts.\n\n249\n00:13:40.680 --> 00:13:43.560\nActually I'm lying to you,\nI thought there was only 14.\n\n250\n00:13:43.560 --> 00:13:44.920\nThere's 37 different categories,\n\n251\n00:13:44.920 --> 00:13:49.510\nat least touring bikes, you name it\nthere's actually so many different ones.\n\n252\n00:13:49.510 --> 00:13:53.860\nAnd this is where you can\nactually see the usage of this\n\n253\n00:13:53.860 --> 00:13:57.030\nthat will help you in terms\nof business decisions right.\n\n254\n00:13:57.030 --> 00:14:01.000\nTo be able to use something like this\nyou can see where this would help.\n\n255\n00:14:01.000 --> 00:14:03.190\nIf you were clearing like I said for\nexample\n\n256\n00:14:04.800 --> 00:14:09.290\nan inventory type of database and\nthose numbers were selling.\n\n257\n00:14:09.290 --> 00:14:13.430\nEven if they were all across the country\nfrom two or three different stores and\n\n258\n00:14:13.430 --> 00:14:17.780\nthey continued to pull from that\ninventory number on your stock piles.\n\n259\n00:14:17.780 --> 00:14:22.680\nAs they actually started dissipating,\nyou could say, when that number hits ten.\n\n260\n00:14:22.680 --> 00:14:27.140\nYou want to go ahead and send off a flag\nthat says time to reorder now for\n\n261\n00:14:27.140 --> 00:14:29.260\nthe store, then you could could do that.\n\n262\n00:14:29.260 --> 00:14:32.010\nAnd that would actually help out so\nthat's what you would do here,\n\n263\n00:14:32.010 --> 00:14:35.970\nis you would take that inventory number\nand you can say, when it's 20, do this.\n\n264\n00:14:35.970 --> 00:14:39.680\nWhen it's 10, you know,\nsend a message for reorder or\n\n265\n00:14:39.680 --> 00:14:44.570\nmake sure you mark this and, you know put\nin that category that says reorder, and\n\n266\n00:14:44.570 --> 00:14:46.430\nmake sure that everything actual goes on.\n\n267\n00:14:46.430 --> 00:14:50.250\nSo this is one of the most useful\nthings that you can do in setting up\n\n268\n00:14:50.250 --> 00:14:54.450\na condition and how to deal\nwith those ideas of conditions.\n\n269\n00:14:54.450 --> 00:14:57.820\nYou're going to run across this\none more often than you realize\n\n270\n00:14:57.820 --> 00:15:00.770\nbecause there's always conditional\nresults that we need and\n\n271\n00:15:00.770 --> 00:15:04.090\nthat's because that's the way\nthat we do business, right?\n\n272\n00:15:04.090 --> 00:15:07.280\nIn business databases it's always about\nthe conditions that are made about\n\n273\n00:15:07.280 --> 00:15:09.900\nwhether or not we need to reorder or\nwe need to sell something or\n\n274\n00:15:09.900 --> 00:15:11.580\nwe need to do something else here.\n\n275\n00:15:11.580 --> 00:15:14.640\nWell, getting that information\nis normally a two step process.\n\n276\n00:15:14.640 --> 00:15:17.430\nWell now we can show you by\nusing something like case,\n\n277\n00:15:17.430 --> 00:15:21.250\nyou're doing that if then and\nthen being able to show those results,\n\n278\n00:15:21.250 --> 00:15:24.360\nmaking a better decision right away and\nmaybe even a quicker decision.\n\n279\n00:15:24.360 --> 00:15:28.200\n>> Yeah, and these things become really\nhandy as the complexity increases right?\n\n280\n00:15:28.200 --> 00:15:32.710\nWe're just talking about, if I've got,\nlet's say I sell bicycle seats for\n\n281\n00:15:32.710 --> 00:15:37.720\nRonnie's bike company here, and the black\nones they sell out, so quick, right?\n\n282\n00:15:37.720 --> 00:15:41.210\nLet's say I bought 100 black ones,\n100 blue ones and 100 red ones.\n\n283\n00:15:41.210 --> 00:15:43.044\nWell I tend to keep the red and\nblue one on the shelf and\n\n284\n00:15:43.044 --> 00:15:44.099\nthey last a whole lot longer.\n\n285\n00:15:44.099 --> 00:15:48.334\n>> So, when it gets down to\nten it's not as imperative for\n\n286\n00:15:48.334 --> 00:15:53.228\nme to reorder as it is if I've\ngot down to 25 of the black ones.\n\n287\n00:15:53.228 --> 00:15:57.674\nI know that the 25 black ones are going to\nsell out faster than the ten blue and red.\n\n288\n00:15:57.674 --> 00:16:02.016\nSo, it's all about finding that sweet\nspot of decision-making and saying well,\n\n289\n00:16:02.016 --> 00:16:03.390\nI need to be alert of this.\n\n290\n00:16:03.390 --> 00:16:06.130\nAt this point, I need to be able to\nlook at the chart, look at the data and\n\n291\n00:16:06.130 --> 00:16:10.510\nsee okay, well black sells fast and\nwe're down to x number.\n\n292\n00:16:10.510 --> 00:16:14.717\nTherefore, this is,\nmake it a high in a scale, like a high,\n\n293\n00:16:14.717 --> 00:16:17.934\nmedium and low scale,\nI know that high is there\n\n294\n00:16:17.934 --> 00:16:23.400\nnow because if you put that in using\nthat query I need to reorder ASAP.\n\n295\n00:16:23.400 --> 00:16:27.150\n>> There is no doubt that this is one\nof the neat things that we can do, and\n\n296\n00:16:27.150 --> 00:16:30.200\nit really is by far one of the most\nuseful things that we can do.\n\n297\n00:16:30.200 --> 00:16:33.160\nThe other thing that we also\nhave to deal with for us today,\n\n298\n00:16:33.160 --> 00:16:36.360\nof course, is dealing with\nthe idea of nulls as well, okay?\n\n299\n00:16:36.360 --> 00:16:38.600\n>> We saw the null,\nright there when you ran your query.\n\n300\n00:16:38.600 --> 00:16:39.100\n>> We sure did.\n\n301\n00:16:39.100 --> 00:16:40.360\nLet's take a look at that again.\n\n302\n00:16:40.360 --> 00:16:44.390\nAnd this is what we're talking\nabout right here, okay?\n\n303\n00:16:44.390 --> 00:16:48.900\nSo notice that I do have some\nparticular products here, okay?\n\n304\n00:16:48.900 --> 00:16:54.150\nAnd you can see there's one Adjustable\nRace, a Ball Bearing, and A blade.\n\n305\n00:16:54.150 --> 00:16:55.040\nAnd some type of Crankam.\n\n306\n00:16:55.040 --> 00:16:56.660\nI don't know what those are.\n\n307\n00:16:56.660 --> 00:16:58.730\nBut here are some categories right.\n\n308\n00:16:58.730 --> 00:17:01.360\nAnd the problem is that\nthese particular products\n\n309\n00:17:01.360 --> 00:17:04.070\ndid not get categorized at some point.\n\n310\n00:17:04.070 --> 00:17:07.285\nSo, you're wondering like I am,\nlike how the heck does that happen?\n\n311\n00:17:07.285 --> 00:17:10.070\nWell, usually it's somebody actually\nentering in the inventory and\n\n312\n00:17:10.070 --> 00:17:11.490\nafter a while, they just forget.\n\n313\n00:17:11.490 --> 00:17:15.250\nThey didn't enter it in, it wasn't\nrequired of them, so they just skipped it\n\n314\n00:17:15.250 --> 00:17:19.300\nso they could actually do more, get more\nof these things into the database here.\n\n315\n00:17:19.300 --> 00:17:22.620\nThey just forgot to enter\nin the category as well.\n\n316\n00:17:22.620 --> 00:17:27.300\nWell, there is a problem with\nthe idea of nulls here, okay.\n\n317\n00:17:27.300 --> 00:17:29.160\nAnd not only is it in the category, right.\n\n318\n00:17:29.160 --> 00:17:31.860\nWe might see this in other data fields and\n\n319\n00:17:31.860 --> 00:17:35.130\nwhen we start talking about the idea\nof nulls, it's not that there can't be\n\n320\n00:17:35.130 --> 00:17:38.080\na value there, it's just a value\nthat cannot be interpreted.\n\n321\n00:17:38.080 --> 00:17:39.840\nIt is considered unknown.\n\n322\n00:17:39.840 --> 00:17:43.540\nSo most people would actually say a null\nis the same as zero, that is not correct,\n\n323\n00:17:43.540 --> 00:17:44.570\nand we know that.\n\n324\n00:17:44.570 --> 00:17:48.700\nBut at the same time, we may need to\ndeal with these things too, okay.\n\n325\n00:17:48.700 --> 00:17:52.600\nSo when we start talking about\ndealing with the idea of nulls here.\n\n326\n00:17:52.600 --> 00:17:56.240\nWhat if we wanted to actually make sure\nthat we actually got every single one in\n\n327\n00:17:56.240 --> 00:17:59.750\nwhich the category was\nactually a null value.\n\n328\n00:17:59.750 --> 00:18:01.960\nSo that we could go back\ninto the database and\n\n329\n00:18:01.960 --> 00:18:04.830\nactually start correcting\nthat information as well.\n\n330\n00:18:04.830 --> 00:18:07.610\nWell one of the things we can do\nis we can set a condition then.\n\n331\n00:18:07.610 --> 00:18:11.850\nAnd I went in and\ncommented mine out right here and\n\n332\n00:18:11.850 --> 00:18:14.508\nthen I'm just gonna actually\nremove the word not.\n\n333\n00:18:14.508 --> 00:18:15.668\nIs.\n\n334\n00:18:15.668 --> 00:18:17.109\nOops.\n\n335\n00:18:17.109 --> 00:18:17.981\nID.\n\n336\n00:18:17.981 --> 00:18:21.440\n>> You can do it, Ronnie.\n\n337\n00:18:21.440 --> 00:18:23.795\n>> Barely, I don't think I can.\n\n338\n00:18:23.795 --> 00:18:25.180\n>> [LAUGH]\n>> There again,\n\n339\n00:18:25.180 --> 00:18:27.410\nmy typing abilities on display.\n\n340\n00:18:27.410 --> 00:18:29.290\n>> Par excellence.\n\n341\n00:18:29.290 --> 00:18:30.480\n>> Not awesome.\n\n342\n00:18:30.480 --> 00:18:33.490\nSo when we run through\nthe whole thing again, right.\n\n343\n00:18:33.490 --> 00:18:36.390\nBefore I ended up,\nlet me verify if I'm telling you.\n\n344\n00:18:36.390 --> 00:18:39.480\nYeah, I have 504 rows I'm\ntaking a look at that.\n\n345\n00:18:39.480 --> 00:18:41.290\nSo now when I run this and\n\n346\n00:18:41.290 --> 00:18:47.280\nI'm actually just choosing the null\nvalues at this point and execute.\n\n347\n00:18:47.280 --> 00:18:50.530\nNow if we take a look at the lower\nright hand corner of my screen.\n\n348\n00:18:52.020 --> 00:18:53.510\nThis will help us out here.\n\n349\n00:18:53.510 --> 00:18:57.260\nSo let's zoom in on that one here.\n\n350\n00:18:57.260 --> 00:19:00.190\nSo let's see if we can full screen this\nfor a moment and that will help us out.\n\n351\n00:19:00.190 --> 00:19:01.050\nThere we go.\n\n352\n00:19:01.050 --> 00:19:07.210\nSo I had 504 before, now you can see\n209 of them actually had null values.\n\n353\n00:19:07.210 --> 00:19:10.540\nNow this is something a little bit\nmore unusual because I'm not telling\n\n354\n00:19:10.540 --> 00:19:13.600\nit right that it needs to\nfind the value of zero, okay.\n\n355\n00:19:13.600 --> 00:19:18.460\nI'm actually telling it if you actually\ndo have something that is unknown, go\n\n356\n00:19:18.460 --> 00:19:22.710\nahead and report it right here and that's\nwhat we're actually ending up seeing here.\n\n357\n00:19:22.710 --> 00:19:26.960\nOkay, is that now we'll actually\nreturn just those null values.\n\n358\n00:19:26.960 --> 00:19:32.360\nNow I can create this list and then get\nsomebody who's doing our data entry, okay,\n\n359\n00:19:32.360 --> 00:19:36.530\nto be able to go back in there now and\nactually fix those things that we need to.\n\n360\n00:19:36.530 --> 00:19:40.810\nSo now my entire list as I scroll on\nthrough all the way down to the 209th one,\n\n361\n00:19:40.810 --> 00:19:43.020\nyou can see where that\nvalue is actually null.\n\n362\n00:19:43.020 --> 00:19:45.460\nAnd so at this point here\n\n363\n00:19:45.460 --> 00:19:50.080\nbeing able to identify nulls is\nactually a key figure for us, because\n\n364\n00:19:50.080 --> 00:19:53.620\nthose could be throwing off some of the\nthings that we're actually trying to do.\n\n365\n00:19:53.620 --> 00:19:57.430\nSo I can just easily eliminate\nthem if I want to as well.\n\n366\n00:19:57.430 --> 00:20:04.190\nThe way that I can do that is of course is\nactually by adding in, is not null, okay?\n\n367\n00:20:04.190 --> 00:20:09.080\nSo this is where I can take that\nproduct's subcategory ID instead and\n\n368\n00:20:09.080 --> 00:20:13.145\nessentially run all of them as long as\nthat it actually, oops I did it again.\n\n369\n00:20:13.145 --> 00:20:14.660\n>> [LAUGH].\n>> Wanna make sure I select\n\n370\n00:20:14.660 --> 00:20:16.670\nthe correct one here.\n\n371\n00:20:16.670 --> 00:20:18.930\nI got excited and\nran every single one that I had.\n\n372\n00:20:21.120 --> 00:20:22.350\n>> No more coffee for you Ryan.\n\n373\n00:20:22.350 --> 00:20:23.610\n>> I know, yep.\n\n374\n00:20:23.610 --> 00:20:27.720\nSo now I have 295 rows of data and\n\n375\n00:20:27.720 --> 00:20:32.490\nevery one in these categories now,\nI should not actually see null values.\n\n376\n00:20:33.790 --> 00:20:37.360\n>> You're taking away anything that is\nnot a Null, that's what I want to see,\n\n377\n00:20:37.360 --> 00:20:38.800\nif it is a Null don't show it to me.\n\n378\n00:20:38.800 --> 00:20:43.730\n>> Yeah and so this is fairly good\nbecause now you can focus in then and\n\n379\n00:20:43.730 --> 00:20:46.200\nsay here's all the stuff\nthat we have categorized.\n\n380\n00:20:46.200 --> 00:20:49.998\n>> Don't worry about weeding through the\nrest, we'll actually have somebody else,\n\n381\n00:20:49.998 --> 00:20:52.191\nyou know,\nbe able to fill in that information and\n\n382\n00:20:52.191 --> 00:20:54.402\nadd those things back in and\nwe are ready to go.\n\n383\n00:20:54.402 --> 00:20:57.850\n>> Sometimes just depending on the list\nit can be easier to search for\n\n384\n00:20:57.850 --> 00:21:02.900\nthings that are not or are depending\non the bulk of the of the list itself.\n\n385\n00:21:02.900 --> 00:21:07.470\nIf I had a bunch of things that were\nnull and I had three things that weren't\n\n386\n00:21:07.470 --> 00:21:11.070\nnull but are interspersed it'll take\nme forever to discern what's what.\n\n387\n00:21:11.070 --> 00:21:15.360\nSo if I just say, just show me what is\nnot null, I get the three returns and\n\n388\n00:21:15.360 --> 00:21:16.390\nI don't have to worry\nabout the rest of it.\n\n389\n00:21:16.390 --> 00:21:19.335\nIt makes it easier for\nme to parse the data as a human.\n\n390\n00:21:19.335 --> 00:21:20.690\n[LAUGH]\n>> It really does.\n\n391\n00:21:20.690 --> 00:21:24.060\nAnd there's a couple of other things\nwe have to pay attention to here.\n\n392\n00:21:24.060 --> 00:21:27.480\nCuz usually the reason why we're trying to\nfind out those null values like we were\n\n393\n00:21:27.480 --> 00:21:32.480\nbefore, like I said, is normally to\nsee if we can replace those values\n\n394\n00:21:32.480 --> 00:21:37.150\nwith something that is actually meaningful\nfor us instead of just the word null.\n\n395\n00:21:37.150 --> 00:21:40.110\nNow, there is a limitation,\nthough, to null or\n\n396\n00:21:40.110 --> 00:21:43.349\nis null, I should say, and is not null.\n\n397\n00:21:44.368 --> 00:21:48.640\nOne of those limitations is that it is\nnot considered an NC standard right.\n\n398\n00:21:48.640 --> 00:21:51.710\nThe American National Standards Institute\n\n399\n00:21:51.710 --> 00:21:55.830\nis not considered an actual\nNC standard at this point.\n\n400\n00:21:55.830 --> 00:21:58.710\nSo that means that it may not work across\n\n401\n00:21:58.710 --> 00:22:02.590\nall database models which is\na standard model as much as possible.\n\n402\n00:22:02.590 --> 00:22:03.790\nSo can you use it?\n\n403\n00:22:03.790 --> 00:22:05.670\nYes.\nDo people use it all the time?\n\n404\n00:22:05.670 --> 00:22:07.540\nYou better believe it, okay?\n\n405\n00:22:07.540 --> 00:22:09.540\nThey use it all the time, okay?\n\n406\n00:22:09.540 --> 00:22:13.040\nBut because it's not standardized,\nyou may find out that it won't work\n\n407\n00:22:13.040 --> 00:22:15.770\nthis way if you actually go\nto another database type.\n\n408\n00:22:15.770 --> 00:22:19.640\nSecondly, though,\nit's also limited by data type, as well.\n\n409\n00:22:19.640 --> 00:22:22.160\nLet me show you just a little bit here.\n\n410\n00:22:22.160 --> 00:22:26.000\nInside of that 2014 adventure works here.\n\n411\n00:22:27.120 --> 00:22:30.493\nSo I'm going to expand this out,\nand I'm looking for that products,\n\n412\n00:22:30.493 --> 00:22:31.960\nProduction.product here.\n\n413\n00:22:31.960 --> 00:22:37.720\nAnd then I'll zoom in on it,\nthis category.\n\n414\n00:22:38.840 --> 00:22:40.740\nAnd then I'll show you what\nI'm talking about too.\n\n415\n00:22:42.330 --> 00:22:44.680\nSo, let me zoom in.\n\n416\n00:22:45.900 --> 00:22:51.100\nAnd this is the Product Subcategory\nright here.\n\n417\n00:22:51.100 --> 00:22:54.900\nThat's ProductSubcategoryID\nthat we're talking about.\n\n418\n00:22:54.900 --> 00:22:57.650\nNow, the reason why this\nis actually important is,\n\n419\n00:22:57.650 --> 00:22:59.330\nnotice inside of these parentheses.\n\n420\n00:22:59.330 --> 00:23:02.240\nMaybe you, I'll make sure you can\nsee that a little bit better.\n\n421\n00:23:02.240 --> 00:23:03.110\nThere we go.\n\n422\n00:23:03.110 --> 00:23:08.080\nSo, notice this says FK here, for the\nforeign key, and then it tells you that,\n\n423\n00:23:08.080 --> 00:23:10.090\nhey, this can be a null value.\n\n424\n00:23:10.090 --> 00:23:11.520\nIn other words, it's actually acceptable.\n\n425\n00:23:11.520 --> 00:23:13.260\nWe can actually have nulls in here.\n\n426\n00:23:13.260 --> 00:23:15.820\nThat's because you may have it,\nand you may not, at that point.\n\n427\n00:23:15.820 --> 00:23:18.360\nBut it's right here in the middle\nthat I want to point out.\n\n428\n00:23:18.360 --> 00:23:22.600\nWe're actually gonna have an episode on\nthis, on what we call different data types\n\n429\n00:23:22.600 --> 00:23:24.540\nand talk about some of\nthose data types as well.\n\n430\n00:23:24.540 --> 00:23:27.300\nThis one says int for integer.\n\n431\n00:23:27.300 --> 00:23:30.580\nThis actually is something\nthat is very specific.\n\n432\n00:23:30.580 --> 00:23:33.602\nIf we are actually going to\nbe replacing those values,\n\n433\n00:23:33.602 --> 00:23:37.676\nwe need to understand that the null\nactually is going to have to be whatever\n\n434\n00:23:37.676 --> 00:23:41.430\nwe replace it with also has\nto be an integer as well.\n\n435\n00:23:41.430 --> 00:23:45.250\nSo that's also a key limitation,\nthat when you start seeing it\n\n436\n00:23:45.250 --> 00:23:49.290\nthat you can actually choose any value\nthat you can replace that null with.\n\n437\n00:23:49.290 --> 00:23:53.896\nAnd there are again other types of\nqueries that you can do that says\n\n438\n00:23:53.896 --> 00:23:57.017\ntake this null and\nreplace it with this too.\n\n439\n00:23:57.017 --> 00:23:59.222\n>> So no mixing and\nmatching between these data types.\n\n440\n00:23:59.222 --> 00:24:02.359\n>> Right, between data types you gotta\nmake sure that they are actually the same.\n\n441\n00:24:02.359 --> 00:24:07.094\nOr it is absolutely not going to\nwork when you end up doing that.\n\n442\n00:24:07.094 --> 00:24:11.872\nSo just remember that when you\nactually start to take a look at\n\n443\n00:24:11.872 --> 00:24:17.550\nthe the idea of using the is or\nis not null here value to help you out.\n\n444\n00:24:17.550 --> 00:24:21.130\nSo they really do help you to limit\nthe scope of what you are looking for\n\n445\n00:24:21.130 --> 00:24:22.100\na lot of the times.\n\n446\n00:24:22.100 --> 00:24:24.640\nAnd I just have it right\nhere in the WHERE clause.\n\n447\n00:24:24.640 --> 00:24:27.970\nBut just kind of realize that we're\nactually gonna be dealing with NULLs quite\n\n448\n00:24:27.970 --> 00:24:32.420\na bit, because of the way that databases\nactually grow over time as well.\n\n449\n00:24:32.420 --> 00:24:35.810\nOkay, so, what do we do, then?\n\n450\n00:24:35.810 --> 00:24:38.000\nIf you do have NULL values and\n\n451\n00:24:38.000 --> 00:24:42.920\nyou need to make sure that they can be\nidentified but you also need to make\n\n452\n00:24:42.920 --> 00:24:46.750\nsure that you can actually get in\nbetween some of the data as well.\n\n453\n00:24:46.750 --> 00:24:50.430\nSometimes you may have where one record\ndoesn't have the exact same know\n\n454\n00:24:50.430 --> 00:24:51.270\nvalues, right?\n\n455\n00:24:51.270 --> 00:24:55.310\nSo in the other words, one record maybe\nmissing like that in address, okay?\n\n456\n00:24:55.310 --> 00:24:57.680\nAnother record may be missing,\nlet's say like the zip code.\n\n457\n00:24:57.680 --> 00:24:59.370\nHopefully it's not gonna happen, but\n\n458\n00:24:59.370 --> 00:25:02.230\nyou kinda get the idea as you go\non through your different roads.\n\n459\n00:25:02.230 --> 00:25:05.030\nThat you may have some values that\nare missing and some that aren't,\n\n460\n00:25:05.030 --> 00:25:09.220\nwell if I only do it on that one category\nwhere we had in the where right, well that\n\n461\n00:25:09.220 --> 00:25:13.030\nseems to be easy enough but what if not\nevery single one of those are missing?\n\n462\n00:25:13.030 --> 00:25:16.916\nNow you have to actually go back and\nactually determine where in the world you\n\n463\n00:25:16.916 --> 00:25:20.878\nare actually are missing the information\nand where in the world you aren't.\n\n464\n00:25:20.878 --> 00:25:23.030\nIn other words,\nwe are dealing with null again.\n\n465\n00:25:23.030 --> 00:25:26.880\nWell, the ASCII standard\nway of doing that instead\n\n466\n00:25:26.880 --> 00:25:31.640\nis using a particular operator\nthat we call Coalesce, okay.\n\n467\n00:25:31.640 --> 00:25:35.890\nSo instead of actually using\nthe is null or is not null,\n\n468\n00:25:35.890 --> 00:25:40.580\ninstead I have an example here for\nwhat we call the Coalesce, okay.\n\n469\n00:25:40.580 --> 00:25:44.480\nNow in the Coalesce value,\nthis is something a little bit stranger\n\n470\n00:25:44.480 --> 00:25:47.710\neven though it actually does\nwork very similar to is null or\n\n471\n00:25:47.710 --> 00:25:52.550\nis not null here is that instead what I'm\ngonna do here is I'm gonna select a name,\n\n472\n00:25:52.550 --> 00:25:55.420\na class, a color and\na product number here.\n\n473\n00:25:55.420 --> 00:25:59.560\nAnd let's say that those are the four\nvalues I need to actually determine\n\n474\n00:25:59.560 --> 00:26:03.400\nif there's values in them cuz I know that\neach one of them I found nulls in them\n\n475\n00:26:03.400 --> 00:26:07.380\nsome of them I haven't found any nulls in,\nsome of them I've found nulls in.\n\n476\n00:26:07.380 --> 00:26:13.210\nIn multiple ones, well, what I can do is\nI can also add in another column then.\n\n477\n00:26:13.210 --> 00:26:17.190\nAnd I'm gonna actually call\nthis the first not null.\n\n478\n00:26:17.190 --> 00:26:19.410\nSo what does COALESCE do?\n\n479\n00:26:19.410 --> 00:26:22.950\nI can tell it what fields I\nwant it to actually look for.\n\n480\n00:26:22.950 --> 00:26:25.330\nI'm about to do something silly\nwhich I already did there.\n\n481\n00:26:25.330 --> 00:26:29.430\nOkay, so I can tell it I want\nit to go through the class.\n\n482\n00:26:29.430 --> 00:26:31.750\nI want it to go through the color and\n\n483\n00:26:31.750 --> 00:26:36.460\nI want it to go through the product\nnumber for each of you know the for\n\n484\n00:26:36.460 --> 00:26:42.080\neverything in this product table here and\nthen I want you to show me the first\n\n485\n00:26:42.080 --> 00:26:48.330\nvalue that as you run through all of\nthat together that is not null, okay.\n\n486\n00:26:48.330 --> 00:26:51.280\nSo what it will do is it will return\nto us those very first values that\n\n487\n00:26:51.280 --> 00:26:55.750\nare actually not null in those,\nin that entire category.\n\n488\n00:26:55.750 --> 00:26:57.930\nSo that way, I can actually\nsee am I missing all of them?\n\n489\n00:26:57.930 --> 00:27:00.030\nAm I not missing any of them?\n\n490\n00:27:00.030 --> 00:27:01.870\nAnd then I'm gonna run this.\n\n491\n00:27:01.870 --> 00:27:05.240\nAnd the F12 and\nthen let me zoom out a little bit.\n\n492\n00:27:05.240 --> 00:27:08.660\nAnd then we'll actually see\nhere in the results and\n\n493\n00:27:08.660 --> 00:27:13.400\nhopefully I think you'll see it,\nis when we take a look here, okay?\n\n494\n00:27:13.400 --> 00:27:15.800\nSo, the first thing that\nended up happening here,\n\n495\n00:27:15.800 --> 00:27:21.260\nnotice that even though class and\ncolor were actually null, it tells us\n\n496\n00:27:21.260 --> 00:27:26.240\nthat the very first row that it determined\nthat there was a value that was here.\n\n497\n00:27:26.240 --> 00:27:28.140\nIs right here with the adjustable race.\n\n498\n00:27:28.140 --> 00:27:30.950\nIt found a product category.\n\n499\n00:27:30.950 --> 00:27:32.330\nAnd so it says, hey look, here it is.\n\n500\n00:27:32.330 --> 00:27:34.160\nHere's the first product category.\n\n501\n00:27:34.160 --> 00:27:37.850\nSo as we go on through\nthese first five rows then.\n\n502\n00:27:37.850 --> 00:27:40.790\nThey all look equal and so we like that.\n\n503\n00:27:40.790 --> 00:27:46.080\nBut now,\nwhat would have thrown off my records.\n\n504\n00:27:46.080 --> 00:27:48.810\nIs that I would not have\nactually been able to see\n\n505\n00:27:48.810 --> 00:27:52.450\nif something like here\nactually had a null, right?\n\n506\n00:27:52.450 --> 00:27:54.710\nSo, because these two if I actually said,\n\n507\n00:27:54.710 --> 00:27:56.600\nis null, well,\nthey would have been excluded.\n\n508\n00:27:56.600 --> 00:28:01.470\nAnd so, here I can actually say just give\nme the first values that come into play on\n\n509\n00:28:01.470 --> 00:28:02.520\neach one of these.\n\n510\n00:28:02.520 --> 00:28:03.190\nAnd now notice,\n\n511\n00:28:03.190 --> 00:28:08.150\nit knows exactly what values\nare actually returned that are not null?\n\n512\n00:28:09.230 --> 00:28:11.170\nSo it can do that,\nregardless of where it is.\n\n513\n00:28:11.170 --> 00:28:13.270\nI picked these three fields for\nit to go through.\n\n514\n00:28:13.270 --> 00:28:15.300\nNow, you're saying that\nstill doesn't make sense.\n\n515\n00:28:15.300 --> 00:28:17.270\nWell, let me show you something else here.\n\n516\n00:28:17.270 --> 00:28:21.200\nHopefully this will help us out,\na little bit more simplified, too.\n\n517\n00:28:21.200 --> 00:28:24.090\nSo, let's say that we have\nessentially the same idea.\n\n518\n00:28:24.090 --> 00:28:26.890\nWe now have this result\nincentive table here.\n\n519\n00:28:26.890 --> 00:28:30.270\nWhat can coalesce help us do here.\n\n520\n00:28:30.270 --> 00:28:31.330\nNo not that.\n\n521\n00:28:31.330 --> 00:28:32.380\nThat should be silly.\n\n522\n00:28:32.380 --> 00:28:33.370\nOkay, so\n\n523\n00:28:33.370 --> 00:28:37.830\nwhen were actually on coalesce let's\nsay I have these five fields up here.\n\n524\n00:28:37.830 --> 00:28:40.170\nSix fields, excuse me, up on the top.\n\n525\n00:28:40.170 --> 00:28:46.180\nAnd what I've done is run through that\nentire what you see reported there.\n\n526\n00:28:46.180 --> 00:28:50.400\nAnd return to me the first non null value,\nokay.\n\n527\n00:28:50.400 --> 00:28:52.400\nWell this one would actually be 40.\n\n528\n00:28:52.400 --> 00:28:54.360\nSo that makes sense, right.\n\n529\n00:28:54.360 --> 00:28:58.260\nIt's the first value in all of those\nreturn fields that is not null.\n\n530\n00:28:58.260 --> 00:28:59.420\nSo that would be 40.\n\n531\n00:28:59.420 --> 00:29:02.330\nEven though this number is lower and\nthis number is much higher,\n\n532\n00:29:02.330 --> 00:29:06.010\nit just says look I'm looking for\nthe first one in the order listed and\n\n533\n00:29:06.010 --> 00:29:09.470\nI'll return to you that particular\nvalue so you can see it.\n\n534\n00:29:09.470 --> 00:29:11.600\nSame thing here in coalesce right here,\nwell,\n\n535\n00:29:11.600 --> 00:29:15.490\nthis one would actually be a one, okay?\n\n536\n00:29:15.490 --> 00:29:16.880\nAnd then on this one here,\n\n537\n00:29:16.880 --> 00:29:20.000\ndown at the bottom,\nit will again take a look at everything.\n\n538\n00:29:20.000 --> 00:29:25.280\nAnd if there is actually a non-null,\nit will find it here.\n\n539\n00:29:25.280 --> 00:29:25.970\nThis one.\n\n540\n00:29:25.970 --> 00:29:27.180\nThat should be a six.\n\n541\n00:29:27.180 --> 00:29:30.000\nNow, here's the tricky one\ndown here at the bottom.\n\n542\n00:29:30.000 --> 00:29:33.950\nWhat if every single value is\nactually null at this point?\n\n543\n00:29:33.950 --> 00:29:36.180\nWell, believe it or not,\nif every single value,\n\n544\n00:29:36.180 --> 00:29:41.220\nif they're all equal in this way,\nthen it will return to you a null, okay?\n\n545\n00:29:41.220 --> 00:29:46.460\nBut if there's any place in any of the\nvalues that you choose that's not null,\n\n546\n00:29:46.460 --> 00:29:49.800\nyou actually see that it will return\nto you that very first value.\n\n547\n00:29:49.800 --> 00:29:53.380\nThat way you can start to do\nyour searching right there and\n\n548\n00:29:53.380 --> 00:29:56.090\nsee where you can find those values.\n\n549\n00:29:56.090 --> 00:30:02.070\nSo only if they're all not null will you\never just get a 'not null' as a result,\n\n550\n00:30:02.070 --> 00:30:04.000\nin the way that we showed you.\n\n551\n00:30:04.000 --> 00:30:07.470\nThat way, you should be able to\ndetermine a complete record.\n\n552\n00:30:07.470 --> 00:30:09.050\nHas no values in it at all.\n\n553\n00:30:09.050 --> 00:30:10.780\nAnd you might need to do something there.\n\n554\n00:30:10.780 --> 00:30:14.560\nBut each one of these is actually very\nnice cuz it makes it nice, fast, and\n\n555\n00:30:14.560 --> 00:30:18.220\neasy for you to actually be able\nto determine that information.\n\n556\n00:30:18.220 --> 00:30:21.850\nAnd that way, you know exactly what\nneeds to be filled in much faster.\n\n557\n00:30:21.850 --> 00:30:24.330\nYou know the values that\nare actually reported first.\n\n558\n00:30:24.330 --> 00:30:25.910\nSo you have to actually return everything.\n\n559\n00:30:25.910 --> 00:30:28.160\nYou're just looking for\nthat first one that shows.\n\n560\n00:30:28.160 --> 00:30:31.230\nNow all that information is there and\nis available for you.\n\n561\n00:30:32.690 --> 00:30:36.000\nAnd then you have it ready to go, okay.\n\n562\n00:30:36.000 --> 00:30:38.580\nSo all of these are really again\n\n563\n00:30:38.580 --> 00:30:40.930\ndifferent things that you\nmay encounter at some point.\n\n564\n00:30:40.930 --> 00:30:44.590\nBut they are really designed to help you\nto become better at helping to make those\n\n565\n00:30:44.590 --> 00:30:46.240\ndecisions that we need to make.\n\n566\n00:30:46.240 --> 00:30:49.010\nThe majority of the time, we're going\nto ask you to bring the data together.\n\n567\n00:30:49.010 --> 00:30:52.890\nDon't get me wrong, being able to\nactually do select queries, great, okay?\n\n568\n00:30:52.890 --> 00:30:55.090\nIt gives you the basis of information.\n\n569\n00:30:55.090 --> 00:30:58.700\nBut sometimes though, is you actually need\na little bit more to help you to make it\n\n570\n00:30:58.700 --> 00:31:04.480\nwork better in terms of not displaying the\nnulls, or actually displaying the nulls,\n\n571\n00:31:04.480 --> 00:31:07.240\nor being able to actually return\nto a combination of both.\n\n572\n00:31:07.240 --> 00:31:09.420\nCoalesce is gonna help you out as well,\nand\n\n573\n00:31:09.420 --> 00:31:13.070\nthen being able to use the case function,\nas far as the conditions go, will help\n\n574\n00:31:13.070 --> 00:31:17.520\nyou to determine the values that you need,\nand maybe even help you in making, well,\n\n575\n00:31:17.520 --> 00:31:20.990\nimmediate decisions as far as\nthe functionality goes for your business.\n\n576\n00:31:20.990 --> 00:31:24.530\n>> Well, Ronnie, you've got us well on our\nway to becoming power users when it comes\n\n577\n00:31:24.530 --> 00:31:27.410\nto our SQL queries, and that's like\nyou said, that's what it's all about.\n\n578\n00:31:27.410 --> 00:31:31.930\nIt's trying to, yeah, I can pull back a\nton of data, but if I have to sift through\n\n579\n00:31:31.930 --> 00:31:37.220\na mountain, an Everest of data, then that\nis not going to be very, very helpful.\n\n580\n00:31:37.220 --> 00:31:40.640\nIt's things like these and\nother different types of filtering.\n\n581\n00:31:40.640 --> 00:31:41.920\nSystems that we've shown you,\n\n582\n00:31:41.920 --> 00:31:46.140\nthat is really gonna help you get to\nthe data that you're looking for.\n\n583\n00:31:46.140 --> 00:31:48.650\nMuch easier,\nbe able to consume it easier, and\n\n584\n00:31:48.650 --> 00:31:50.210\nthat's what we're looking\nforward to doing.\n\n585\n00:31:50.210 --> 00:31:53.240\nAnd this does a very good job of that,\nI really enjoyed the case statements,\n\n586\n00:31:53.240 --> 00:31:54.990\nbecause I'm kinda familiar\nwith that kind of thing.\n\n587\n00:31:54.990 --> 00:31:56.636\n>> [LAUGH]\n>> And also just the fact that some of\n\n588\n00:31:56.636 --> 00:31:59.728\nthis stuff comes back with a null value,\nand what do I do with it?\n\n589\n00:31:59.728 --> 00:32:03.399\nCuz, a lot of times you're just sitting\nthere going okay, well it doesn't really\n\n590\n00:32:03.399 --> 00:32:06.809\nhave any values, maybe we need to give it\nsome or maybe we need to start looking\n\n591\n00:32:06.809 --> 00:32:09.550\nbeyond that and changing things\nwhen it comes to that system.\n\n592\n00:32:09.550 --> 00:32:10.880\nSo very, very cool stuff.\n\n593\n00:32:10.880 --> 00:32:13.830\nWe thank you Ronnie for that and\nwe thank you guys for watching.\n\n594\n00:32:13.830 --> 00:32:17.646\nBut looks like our clock has expired for\nthis episode.\n\n595\n00:32:17.646 --> 00:32:21.546\nLike I said I hope you guys have enjoyed\nbut we are gonna go ahead and sign off for\n\n596\n00:32:21.546 --> 00:32:22.086\nITProTV.\n\n597\n00:32:22.086 --> 00:32:23.346\nI've been your host, Daniel Lowrie.\n\n598\n00:32:23.346 --> 00:32:24.426\n>> And I'm Ronnie Wong.\n\n599\n00:32:24.426 --> 00:32:26.506\n>> We'll see you next time.\n\n600\n00:32:26.506 --> 00:32:34.190\n[SOUND]\n\n",
          "vimeoId": "164413167"
        },
        {
          "description": "In this episode, Daniel and Ronnie explain how to work with table constraints. They start by using the INSERT INTO function to select data from one table and insert it into an existing table. Then they use INSERT to create a new table. Finally, they show you how to use the VALUES function.",
          "length": "1995",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-8-work_with_table_constraints-042616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-8-work_with_table_constraints-042616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-8-work_with_table_constraints-042616-1-sm.jpg",
          "title": "Work with Table Constraints",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.884 --> 00:00:16.237\nAll right, greetings everyone and welcome\nto another exciting episode of IT PRO TV.\n\n3\n00:00:16.237 --> 00:00:19.292\nI'm your host, Daniel Lowry and\nin today's episode,\n\n4\n00:00:19.292 --> 00:00:23.976\nwe're continuing on with our series of\na query in the Microsoft SQL Server 2014.\n\n5\n00:00:23.976 --> 00:00:28.329\nJoining us back in the studio again today\nto help lend his expertise on that topic,\n\n6\n00:00:28.329 --> 00:00:30.180\nour good friend Mr. Ronnie Wong.\n\n7\n00:00:30.180 --> 00:00:31.030\nRonnie how's it going?\n\n8\n00:00:31.030 --> 00:00:32.040\nWelcome back to the show.\n\n9\n00:00:32.040 --> 00:00:36.690\n>> It's going very well as we continue on\nto take a look at our SQL 2014 show here,\n\n10\n00:00:36.690 --> 00:00:38.450\ntaking a look at querying.\n\n11\n00:00:38.450 --> 00:00:42.850\nAnd what we're gonna be dealing with today\nthough, is working with table constraints.\n\n12\n00:00:42.850 --> 00:00:46.960\nNow, when we talk about the idea of table\nconstraints here, we're actually trying to\n\n13\n00:00:46.960 --> 00:00:49.370\ndo something and there's a condition\nthat we're actually having to do,\n\n14\n00:00:49.370 --> 00:00:53.860\nwhich is to get data into let's say,\nexisting tables or to actually create\n\n15\n00:00:53.860 --> 00:00:57.860\na new table, and we also need to\nload data up into those as well.\n\n16\n00:00:57.860 --> 00:01:00.780\nNow so far everything that\nwe've done in this series,\n\n17\n00:01:00.780 --> 00:01:05.770\nat least at this point here, we've really\nfocused in around the select statements.\n\n18\n00:01:05.770 --> 00:01:07.370\nWe're changing gears up a little bit.\n\n19\n00:01:07.370 --> 00:01:10.270\nWe've still got something\nthat we've gotta do here\n\n20\n00:01:10.270 --> 00:01:13.640\nwhich is gonna help us because there\nare select statements in this.\n\n21\n00:01:13.640 --> 00:01:17.230\nBut at the same we're actually adding in\nanother element, which is the idea here of\n\n22\n00:01:17.230 --> 00:01:22.460\nactually doing an insert into, as well as,\nan into statement that will help us\n\n23\n00:01:22.460 --> 00:01:26.800\nto actually create additional tables or to\nbe able to modify the data that we have.\n\n24\n00:01:26.800 --> 00:01:29.410\nAnd so a lot of times when\nwe start dealing with that\n\n25\n00:01:29.410 --> 00:01:33.580\nthings can happen to our existing data and\nthat's what we have to be careful about.\n\n26\n00:01:33.580 --> 00:01:37.340\nSo one of the biggest table constraints\nthat we tend to have to worry about of\n\n27\n00:01:37.340 --> 00:01:40.650\ncourse, is there anything\nthat we do to the database,\n\n28\n00:01:40.650 --> 00:01:44.980\nokay, we want to ensure that it's\nnothing that ends up affecting the data.\n\n29\n00:01:44.980 --> 00:01:48.710\nNow you may say well, Ronnie, people\nchange data all the time in databases.\n\n30\n00:01:48.710 --> 00:01:53.190\nSomebody types in their name wrong or\nthey forget some bit of information.\n\n31\n00:01:53.190 --> 00:01:54.540\nWell, that's fine, okay?\n\n32\n00:01:54.540 --> 00:01:58.000\nBut there's nothing that I should\ndo as far as select statements go\n\n33\n00:01:58.000 --> 00:02:00.040\nthat should help me, that should allow me,\n\n34\n00:02:00.040 --> 00:02:04.270\nexcuse me, that will actually allow\nme to change things in the database.\n\n35\n00:02:04.270 --> 00:02:07.570\nSo most of the time, the querying language\nis just doing that is asking questions,\n\n36\n00:02:07.570 --> 00:02:08.890\ngetting the results out.\n\n37\n00:02:08.890 --> 00:02:11.480\nBut what I don't want to do\nis be able to go in there and\n\n38\n00:02:11.480 --> 00:02:14.710\nadd in more data than it's\nactually suppose to be there.\n\n39\n00:02:14.710 --> 00:02:17.910\nAnd I wanna take away in it cuz a lot\nof times those types of changes may be\n\n40\n00:02:17.910 --> 00:02:22.920\nunauthorized and so what we wanna do, is\nwe wanna deal with the idea here instead,\n\n41\n00:02:22.920 --> 00:02:27.010\nthat changes need to be done to\nour database can be done but\n\n42\n00:02:27.010 --> 00:02:30.180\nwe actually have to do them within\nconstraints that we're working with.\n\n43\n00:02:30.180 --> 00:02:32.170\nSo, a lot of times it's fairly easy.\n\n44\n00:02:32.170 --> 00:02:36.750\nLet's say that what we have, is that we've\nended up taking another database on,\n\n45\n00:02:36.750 --> 00:02:40.560\na very old database, that we've kept for\nhistorical purposes but somebody says,\n\n46\n00:02:40.560 --> 00:02:45.150\nwe should just integrate that data into\nour current database right now, well,\n\n47\n00:02:45.150 --> 00:02:48.380\nwhat if the table names\nare exactly the same, okay?\n\n48\n00:02:48.380 --> 00:02:51.420\nAnd you actually go, okay,\nwell if I start to pull that data in,\n\n49\n00:02:51.420 --> 00:02:54.100\nis that gonna allow me to\nadd in additional data or\n\n50\n00:02:54.100 --> 00:02:58.270\nis that going to overwrite some of\nthe existing data that I have on hand?\n\n51\n00:02:58.270 --> 00:03:01.960\nSo we need to make sure we understand\nwhat are those constraints and\n\n52\n00:03:01.960 --> 00:03:05.510\nhow do we attempt to deal with them\nwhen actually start working with,\n\n53\n00:03:05.510 --> 00:03:07.260\nof course, the sequel server and\n\n54\n00:03:07.260 --> 00:03:10.380\nof course the querying statements\nthat we need to help us to do this.\n\n55\n00:03:10.380 --> 00:03:11.340\n>> Awesome stuff.\n\n56\n00:03:11.340 --> 00:03:15.500\n>> Yeah, so when we start taking\na look then as we turn around here,\n\n57\n00:03:15.500 --> 00:03:18.730\nwhat's gonna end up happening is that\nwe have to actually ask ourselves,\n\n58\n00:03:18.730 --> 00:03:21.970\nwhat are some of those conditions\nthat we're gonna end up facing?\n\n59\n00:03:21.970 --> 00:03:25.270\nSo one of the very first things\nthat we wanna take a look at,\n\n60\n00:03:25.270 --> 00:03:28.180\nof course, is just a basic\nstatement that actually helps us.\n\n61\n00:03:28.180 --> 00:03:28.860\nSo let's go ahead and\n\n62\n00:03:28.860 --> 00:03:32.800\ntake a look at my SQL Server, and\nthis will help us out right here, okay?\n\n63\n00:03:32.800 --> 00:03:34.170\nSo at the very beginning,\n\n64\n00:03:34.170 --> 00:03:39.080\nbecause we really haven't dived into the\narea of actually creating other tables, or\n\n65\n00:03:39.080 --> 00:03:42.028\nactually moving information\naround that much, well,\n\n66\n00:03:42.028 --> 00:03:47.200\nwe're gonna to start seeing things\nlike insert into, Okay, as well.\n\n67\n00:03:47.200 --> 00:03:51.520\nAnd then notice that we're still back to\nthe things that we actually can know about\n\n68\n00:03:51.520 --> 00:03:55.340\nor we all ready know about, excuse me,\nis of course the select statements and\n\n69\n00:03:55.340 --> 00:03:56.510\nthe from statement right here.\n\n70\n00:03:56.510 --> 00:04:00.730\nI did it on two lines because sometimes\nI always type it in one way and\n\n71\n00:04:00.730 --> 00:04:02.852\nyou might go,\nis that the way it's supposed to be.\n\n72\n00:04:02.852 --> 00:04:06.300\nBut just kind of remember that a lot of\ntimes here what you actually see is that,\n\n73\n00:04:06.300 --> 00:04:08.560\nyou can type it in\nanyway that you want to.\n\n74\n00:04:08.560 --> 00:04:12.230\nso, here, I actually wanna say\nsomething like this is my constraint.\n\n75\n00:04:12.230 --> 00:04:15.030\nAnd I wanna make sure that I can\nselect data from one table and\n\n76\n00:04:15.030 --> 00:04:16.790\ninsert it into an existing table.\n\n77\n00:04:16.790 --> 00:04:20.960\nSo, this is very much a very\nstandard way to be able to do this.\n\n78\n00:04:20.960 --> 00:04:23.230\nAnd right off the back\nis the most generic way.\n\n79\n00:04:23.230 --> 00:04:25.960\nWhat should happen,\nif I do this particular statement, notice,\n\n80\n00:04:25.960 --> 00:04:30.280\nthat the remaining data in the existing\ntable should be unaffected, then.\n\n81\n00:04:30.280 --> 00:04:30.920\nOkay?\n\n82\n00:04:30.920 --> 00:04:32.990\nSo, I just wanted to show you the syntax,\n\n83\n00:04:32.990 --> 00:04:35.480\ncuz it's not really that\ndifficult of a syntax.\n\n84\n00:04:35.480 --> 00:04:40.140\nWhat we first do, right, is that we\nfind out what is the destination table.\n\n85\n00:04:40.140 --> 00:04:42.230\nSo, I just need to go into my database,\nand\n\n86\n00:04:42.230 --> 00:04:47.440\nthen I select the destination table and\nthen I also find the source table.\n\n87\n00:04:47.440 --> 00:04:49.590\nIn other words,\nwhere is my information coming from,\n\n88\n00:04:49.590 --> 00:04:53.130\nand I simply tell it to select\neverything from my source table,\n\n89\n00:04:53.130 --> 00:04:58.200\nand that's going to end up inserting\nit into the destination table itself.\n\n90\n00:04:58.200 --> 00:05:02.410\nAnd everything that we have should not\nactually effect the remaining data.\n\n91\n00:05:02.410 --> 00:05:06.470\nSometimes though, there are things you\ncan do that end up affecting the data and\n\n92\n00:05:06.470 --> 00:05:10.740\nend up changing it if it actually finds\nduplicates or things but the way that SQL\n\n93\n00:05:10.740 --> 00:05:14.700\nserver works right now, the basic\nstatement should work for the majority\n\n94\n00:05:14.700 --> 00:05:19.090\nof everything that we need to do without\nreally affecting the existing data.\n\n95\n00:05:19.090 --> 00:05:21.960\nSo as long as the data's in\nthe same proper format and\n\n96\n00:05:21.960 --> 00:05:26.570\nyou have essentially the same data types,\neverything should work out fine.\n\n97\n00:05:26.570 --> 00:05:31.150\nBut of course that's not the only thing\nthat ends up happen sometimes here.\n\n98\n00:05:31.150 --> 00:05:34.870\nWhat if your company expands\na little bit more, okay?\n\n99\n00:05:34.870 --> 00:05:38.840\nAnd what you realize is that now you need\nto add in an additional table into your\n\n100\n00:05:38.840 --> 00:05:40.170\ndata base.\n\n101\n00:05:40.170 --> 00:05:43.420\nAnd then you realize that you\nwon't actually load it with data\n\n102\n00:05:43.420 --> 00:05:44.580\nfrom a select statement.\n\n103\n00:05:44.580 --> 00:05:46.710\nIn other words from another\narea of your database.\n\n104\n00:05:46.710 --> 00:05:48.020\nTo pull that information in.\n\n105\n00:05:48.020 --> 00:05:49.360\nOkay?\n\n106\n00:05:49.360 --> 00:05:53.280\nSo now we're saying, look, I'm gonna\ncreate a new table for something else here\n\n107\n00:05:53.280 --> 00:05:57.050\nand I wanna go ahead and preload it\nwith some existing data to verify this.\n\n108\n00:05:57.050 --> 00:06:00.460\nNow this is a little bit more\ntricky in this sense, right?\n\n109\n00:06:00.460 --> 00:06:04.120\nSo remember, everything that\nI'm going to do at this point,\n\n110\n00:06:04.120 --> 00:06:08.110\nsince it actually is gonna modify\nthe database structure itself,\n\n111\n00:06:08.110 --> 00:06:13.460\nthe scheme itself, I'm gonna be working\nwith the AdventureWorks2012 database here,\n\n112\n00:06:13.460 --> 00:06:16.600\nand what we're gonna do is we're gonna be\nadding in some objects at times when we do\n\n113\n00:06:16.600 --> 00:06:18.730\nthis, especially when\nwe're creating new tables.\n\n114\n00:06:18.730 --> 00:06:21.910\nSo what I should end up seeing is that\nat the beginning of the tables in\n\n115\n00:06:21.910 --> 00:06:28.080\nthe AdventureWorks2012 here Is that I\nshould see another new object appear.\n\n116\n00:06:28.080 --> 00:06:32.730\nNow normally I also follow the same\nconvection here I'll list it as a DBO for\n\n117\n00:06:32.730 --> 00:06:33.890\na data base object and\n\n118\n00:06:33.890 --> 00:06:37.650\nthen give it a name so it'll appear right\nup here at the beginning of the list and\n\n119\n00:06:37.650 --> 00:06:42.530\nthen of course all those other tables\nin here that we have in existence.\n\n120\n00:06:42.530 --> 00:06:46.090\nSo that way I'll go ahead and\ndo it right here for us to do this.\n\n121\n00:06:46.090 --> 00:06:48.997\nSo, the first that I'm\ngoing to do is this,\n\n122\n00:06:48.997 --> 00:06:51.970\nas we take a look at my query in here.\n\n123\n00:06:51.970 --> 00:06:54.420\nLet me see if I can scroll\ndown just a little bit so\n\n124\n00:06:54.420 --> 00:06:56.840\nwe can see the whole thing here, okay?\n\n125\n00:06:56.840 --> 00:06:59.850\nSo, remember that what we're gonna do\nis we're gonna end up going to have and\n\n126\n00:06:59.850 --> 00:07:02.690\ncreating a table on the fly.\n\n127\n00:07:02.690 --> 00:07:06.420\nOne called dbo employee addresses.\n\n128\n00:07:06.420 --> 00:07:09.110\nAnd then I'm going to\ntell it to go ahead and\n\n129\n00:07:09.110 --> 00:07:15.880\nselect all of these columns from all of\nthe joins that I have existing right here.\n\n130\n00:07:15.880 --> 00:07:18.740\nSo this allows me to be able\nto go ahead and do that,\n\n131\n00:07:18.740 --> 00:07:22.770\nand populate this table object that i'm\ngoing to create, and I just wanted to\n\n132\n00:07:22.770 --> 00:07:27.200\nverify that I didn't have any object\ncalled employee addresses over here.\n\n133\n00:07:27.200 --> 00:07:28.710\nSo let me take a look and verify.\n\n134\n00:07:28.710 --> 00:07:30.260\nI have something close.\n\n135\n00:07:30.260 --> 00:07:31.730\nI have one that's called employee.\n\n136\n00:07:31.730 --> 00:07:36.430\nI have an error log but nothing called\nemployee addresses at this point.\n\n137\n00:07:36.430 --> 00:07:39.902\nSo using this particular,\nthe entire query here,\n\n138\n00:07:39.902 --> 00:07:43.536\nnotice that the only thing\nthat's really changed for\n\n139\n00:07:43.536 --> 00:07:48.476\nanything that we've done is we've\nadded this in here which is the Into.\n\n140\n00:07:48.476 --> 00:07:51.601\nAt this point let me\nverify that this runs, so\n\n141\n00:07:51.601 --> 00:07:54.662\nI selected the whole thing and\nI execute it.\n\n142\n00:07:54.662 --> 00:07:59.003\nAnd it tells me at the bottom\nof the screen that is 290 rows.\n\n143\n00:07:59.003 --> 00:08:00.768\nHave been affected here.\n\n144\n00:08:00.768 --> 00:08:04.933\nAnd so now I went ahead and\nI've created that new object for\n\n145\n00:08:04.933 --> 00:08:09.019\nus inside of our database\nour AdventureWorks 2012.\n\n146\n00:08:09.019 --> 00:08:13.742\nSo over on the left hand side,\nif I right-click on AdventureWorks2012 and\n\n147\n00:08:13.742 --> 00:08:18.180\nI refreshed the whole thing, I should\nnow be able to expand out tables, and\n\n148\n00:08:18.180 --> 00:08:19.070\nthere it is.\n\n149\n00:08:19.070 --> 00:08:24.180\nThere is now a permanent addition to\nthe tables here that I can now also\n\n150\n00:08:24.180 --> 00:08:29.520\nlink up and connect my primary key,\nif I end up having one, into the database.\n\n151\n00:08:29.520 --> 00:08:33.410\nAnd now allow this to actually be a part\nof the queries that I do as well.\n\n152\n00:08:33.410 --> 00:08:37.830\nSo it gives us that ability to actually\neven add in an additional table with\n\n153\n00:08:37.830 --> 00:08:42.880\ndata already populated in it in this way\ninstead of just building a blank table and\n\n154\n00:08:42.880 --> 00:08:45.770\nthen saying all right, just start\ndoing the data entry at this point.\n\n155\n00:08:45.770 --> 00:08:49.730\nWe can go ahead and start filling it with\nsome data as well from even another table.\n\n156\n00:08:49.730 --> 00:08:53.760\nThis is a good one especially if you have\na database that, like I said existed,\n\n157\n00:08:53.760 --> 00:08:57.780\nlet's say from another database at some\npoint and you wanted it import it in\n\n158\n00:08:57.780 --> 00:09:02.240\nhere as well and just made it a part\nof the actual database itself.\n\n159\n00:09:02.240 --> 00:09:04.240\nHere's one way we can do this and\n\n160\n00:09:04.240 --> 00:09:09.030\nonce again not really affecting what any\nother table data that we have available.\n\n161\n00:09:09.030 --> 00:09:12.250\nMaybe adding it in as a separate\ntable is the way to go.\n\n162\n00:09:12.250 --> 00:09:14.810\n>> And Ronnie, you said that we have\nto have rights over these tables, or\n\n163\n00:09:14.810 --> 00:09:19.610\nat least these areas of the database,\nto add these tables and things, correct?\n\n164\n00:09:19.610 --> 00:09:20.780\n>> Yeah, that's the same thing.\n\n165\n00:09:20.780 --> 00:09:25.000\nSo even a previous episode, right, any\ntime you're modifying the entire database,\n\n166\n00:09:25.000 --> 00:09:28.550\nyou do need to make sure that you\nhave the proper rights to do so.\n\n167\n00:09:28.550 --> 00:09:30.660\nSo if you don't have those\nrights to be able to do so\n\n168\n00:09:30.660 --> 00:09:33.550\nyou won't be able to actually\nrun statements like this, but\n\n169\n00:09:33.550 --> 00:09:37.040\nbecause I'm signed in as a syst\nadmin here I do have the rights or\n\n170\n00:09:37.040 --> 00:09:40.400\nI'm actually the DB owner and\nI'd have the same rights as well.\n\n171\n00:09:40.400 --> 00:09:41.410\nAnd if you're one of those two and\n\n172\n00:09:41.410 --> 00:09:44.380\nyou wanted to sign in to\nDaniel's Active Directory account,\n\n173\n00:09:44.380 --> 00:09:47.580\nyou can actually select his account and\nactually assign those rights as well\n\n174\n00:09:47.580 --> 00:09:50.040\nif he's gonna be creating\nstatements like this.\n\n175\n00:09:50.040 --> 00:09:54.260\nSo those are some of the basic constraints\nthat we may also end up seeing here.\n\n176\n00:09:54.260 --> 00:09:59.130\nSo remember that idea of actually just\ncreating it on the fly and using that.\n\n177\n00:09:59.130 --> 00:10:00.800\nNow sometimes, of course,\n\n178\n00:10:00.800 --> 00:10:05.220\nit may not be where you actually have\nto create a whole new table Instead.\n\n179\n00:10:05.220 --> 00:10:10.400\nWhat if you actually just\nneeded one single row in here,\n\n180\n00:10:10.400 --> 00:10:12.260\nand that's what we can also do, as well.\n\n181\n00:10:12.260 --> 00:10:15.090\n>> So this is gonna add to an existing\ntable that we already have.\n\n182\n00:10:15.090 --> 00:10:18.599\nWe wanna add data to that without having\nto go through the normal means of\n\n183\n00:10:18.599 --> 00:10:19.330\ndata entry.\n\n184\n00:10:19.330 --> 00:10:20.462\n>> Right, if you take a look,\n\n185\n00:10:20.462 --> 00:10:25.140\nit's either I add in a ton of information\nat one time or I add in no information,\n\n186\n00:10:25.140 --> 00:10:28.820\nin terms of creating a new table, well\nwhat if I just needed to add a new row?\n\n187\n00:10:28.820 --> 00:10:32.272\nNow, before I do that,\nlet's go ahead and do a simple query.\n\n188\n00:10:32.272 --> 00:10:36.595\nLet's select, and then I'll just do\nan all, and then we'll do it from this\n\n189\n00:10:36.595 --> 00:10:41.810\ndbo.EmployeeAddresses here,\nat least I think we will.\n\n190\n00:10:44.110 --> 00:10:47.170\nLet me be good and actually put\nthat closing there on my batch.\n\n191\n00:10:47.170 --> 00:10:50.268\nAnd execute that so that we can see,\n\n192\n00:10:50.268 --> 00:10:54.709\nhere are the values that\nwe did add into this table,\n\n193\n00:10:54.709 --> 00:10:59.692\n290 rows is what I get, and\nthis is the existing data.\n\n194\n00:10:59.692 --> 00:11:03.444\nAnd if I had another database, it'd be\nfine but since I'm only working between\n\n195\n00:11:03.444 --> 00:11:06.189\nthose two and\nthey're essentially copies of each other,\n\n196\n00:11:06.189 --> 00:11:10.810\nessentially the same data here whether\nit's the 2012 or 2014 data that we have.\n\n197\n00:11:10.810 --> 00:11:12.680\nNow what I'm actually saying then is,\n\n198\n00:11:12.680 --> 00:11:18.750\nnow I need to actually need to add in\na 291st row of data, at some point.\n\n199\n00:11:18.750 --> 00:11:21.760\nWell, if we actually\nonly need a single row,\n\n200\n00:11:21.760 --> 00:11:25.850\nwe may chose to use what is\ncalled a values clause instead.\n\n201\n00:11:25.850 --> 00:11:28.600\nSo this is now a little\nbit different as well.\n\n202\n00:11:28.600 --> 00:11:31.660\nSo there's only a single row\nof data inserted in here.\n\n203\n00:11:31.660 --> 00:11:35.050\nWell, I might actually just go right,\nwhoever is doing my data entry,\n\n204\n00:11:35.050 --> 00:11:36.420\nI want you to add this data in there.\n\n205\n00:11:36.420 --> 00:11:39.140\nThat'd be perfectly fine,\nthat's the way to go.\n\n206\n00:11:39.140 --> 00:11:42.860\nBut if it's left up to you and\nyou need to do it by using, of course,\n\n207\n00:11:42.860 --> 00:11:47.265\nSQL server to help you do it, well, what\nwe're gonna do is actually list values.\n\n208\n00:11:47.265 --> 00:11:50.930\nNow the way that this is done,\nis I want you to run that query.\n\n209\n00:11:50.930 --> 00:11:54.570\nNotice that all of the information that\nI have listed down here as my result,\n\n210\n00:11:55.710 --> 00:11:57.730\nis essentially from left to right.\n\n211\n00:11:57.730 --> 00:12:00.880\nAnd so when I actually say I'm\ngonna insert into this table,\n\n212\n00:12:00.880 --> 00:12:05.910\nI take those same values and\nI insert in the data In that proper order.\n\n213\n00:12:05.910 --> 00:12:07.600\nNow it has to be in that order.\n\n214\n00:12:07.600 --> 00:12:10.760\nIf I end up putting\nGainesville as listed first,\n\n215\n00:12:10.760 --> 00:12:13.280\nwell that will be my first name instead.\n\n216\n00:12:13.280 --> 00:12:16.550\nSo you do have to pay attention to\nthe order of the data as you're actually\n\n217\n00:12:16.550 --> 00:12:19.670\nputting it in here, but this is\na great way to go ahead and do that.\n\n218\n00:12:19.670 --> 00:12:21.500\nIf you know this is something simple for\nyou.\n\n219\n00:12:21.500 --> 00:12:24.600\n>> The order is like their value\nof their placeholder, right?\n\n220\n00:12:24.600 --> 00:12:25.570\n>> Yeah.\n>> So, that's why we have to\n\n221\n00:12:25.570 --> 00:12:26.360\ndo it in order?\n\n222\n00:12:26.360 --> 00:12:29.140\n>> Yes, we have to do it in that\norder at this point because\n\n223\n00:12:29.140 --> 00:12:32.450\nthere's no other way for\nus to insert that value in.\n\n224\n00:12:32.450 --> 00:12:36.480\nWe could try and do like a select\nstatement, but since I'm actually manually\n\n225\n00:12:36.480 --> 00:12:40.480\ntyping this in, I could actually name the\nfull schema if I wanted to and everything,\n\n226\n00:12:40.480 --> 00:12:42.790\nand make sure it's actually in that order.\n\n227\n00:12:42.790 --> 00:12:44.850\nBut instead,\nI'm actually gonna do it this way,\n\n228\n00:12:44.850 --> 00:12:48.990\nit makes it a lot easier because I\ncan actually see the result here.\n\n229\n00:12:48.990 --> 00:12:51.400\nAnd what I should end up with,\nif I'm successful,\n\n230\n00:12:51.400 --> 00:12:54.740\nin other words if I can actually run\nthis command without messing it up,\n\n231\n00:12:54.740 --> 00:12:57.240\nit's a pretty big possibility\nthat I could mess it up.\n\n232\n00:12:57.240 --> 00:12:59.635\n>> [LAUGH] Looking forward\nto the red text, Ronnie.\n\n233\n00:12:59.635 --> 00:13:01.720\n>> Yeah, if I can do this,\nI shouldn't have any red text,\n\n234\n00:13:01.720 --> 00:13:03.840\nit should add in a 291st row.\n\n235\n00:13:03.840 --> 00:13:05.650\nLet me go and execute it and\n\n236\n00:13:05.650 --> 00:13:10.580\nnotice that it tells me that one row has\nnow been affected, so now if I go back and\n\n237\n00:13:10.580 --> 00:13:15.750\ntry and verify this, let me go and\nexecute this statement here.\n\n238\n00:13:15.750 --> 00:13:19.960\nSo now if I take a look down here\nat the bottom, let me verify,\n\n239\n00:13:19.960 --> 00:13:24.161\nI can see in the lower right hand corner,\nit tells me that there's 291 rows.\n\n240\n00:13:24.161 --> 00:13:28.116\nAnd if I scroll all the way down at\nthe bottom here, at least I think that's\n\n241\n00:13:28.116 --> 00:13:31.800\nwhat's gonna happen,\nthis is what you should end up seeing.\n\n242\n00:13:31.800 --> 00:13:36.870\nThere it is, the very last row,\nit actually did add in my name, and\n\n243\n00:13:36.870 --> 00:13:40.120\nthe IT department as well as my\naddress that I have listed there.\n\n244\n00:13:40.120 --> 00:13:41.570\nIt's all the way across.\n\n245\n00:13:41.570 --> 00:13:46.230\nSo it's fairly simple for us to be\nable to be even take one row of data.\n\n246\n00:13:46.230 --> 00:13:51.400\nNow you might actually do this a little\nbit more often than you think, especially\n\n247\n00:13:51.400 --> 00:13:54.620\nwhen it's actually just a single row\nof data that needs to be added in.\n\n248\n00:13:54.620 --> 00:13:57.439\nBut most of the time if you're\nactually gonna do this it's\n\n249\n00:13:57.439 --> 00:13:59.339\nprobably gonna go through data entry,\n\n250\n00:13:59.339 --> 00:14:03.208\nbut if you do need to do this, this is the\nway to actually go and be able to do that.\n\n251\n00:14:03.208 --> 00:14:07.199\nAnd hopefully, you don't have to go in and\ntry and figure out where do you place it,\n\n252\n00:14:07.199 --> 00:14:10.619\nit's just gonna put it right there at\nthe end just like it did for mine and\n\n253\n00:14:10.619 --> 00:14:12.300\nwe are off and ready to go.\n\n254\n00:14:12.300 --> 00:14:15.500\nSo it's just gonna put it in there in\nthe order in which it was inserted to.\n\n255\n00:14:15.500 --> 00:14:18.650\nSo a single value, very easy,\nuse that values clause.\n\n256\n00:14:18.650 --> 00:14:20.270\nIf you need to create a new table and\n\n257\n00:14:20.270 --> 00:14:24.400\nalso populate with data, remember you\nactually gonna add in that into, and\n\n258\n00:14:24.400 --> 00:14:28.790\nthen you'll be ready to go on\nsomething like that as well.\n\n259\n00:14:28.790 --> 00:14:32.970\nNow sometimes though,\nyou do have a combination of both, right?\n\n260\n00:14:32.970 --> 00:14:37.620\nSo, it could be instead that you\nwanna actually create a new table and\n\n261\n00:14:37.620 --> 00:14:42.950\nthen also insert in rows\nusing the values as well.\n\n262\n00:14:42.950 --> 00:14:44.410\nNow when we start doing this,\n\n263\n00:14:44.410 --> 00:14:47.680\nit could be that you just wanted\nto populate it with data.\n\n264\n00:14:47.680 --> 00:14:51.440\nAnd you might do this for just some\ntype of testing purposes sometimes.\n\n265\n00:14:51.440 --> 00:14:52.990\nOr you might be doing this because,\n\n266\n00:14:52.990 --> 00:14:57.510\nwell you just need to get it done\non the fly and very quickly so far.\n\n267\n00:14:57.510 --> 00:15:01.220\nSo what we can do is actually use\na combination of things to help us out.\n\n268\n00:15:01.220 --> 00:15:05.440\nSo we take a look at our next clause here,\nthat we're gonna do.\n\n269\n00:15:05.440 --> 00:15:11.460\nThis one's a little bit larger, but\nhopefully it will make sense for us too.\n\n270\n00:15:11.460 --> 00:15:14.542\nSo the very first part of this\nstatement that I have is simple,\n\n271\n00:15:14.542 --> 00:15:19.370\nI want it to go through my database,\nand what I wanna do is look for\n\n272\n00:15:19.370 --> 00:15:26.340\na particular table that is\ncalled dbo.Departments here.\n\n273\n00:15:26.340 --> 00:15:28.170\nAnd then I also have another column here,\n\n274\n00:15:28.170 --> 00:15:33.310\nnow if you're kinda looking at this, this\nis where it becomes a little more unusual.\n\n275\n00:15:33.310 --> 00:15:37.750\nSo notice the capital N and then\nthe beginning of these quote marks and\n\n276\n00:15:37.750 --> 00:15:41.940\nboth of these objects that I'm\nactually telling it to look for.\n\n277\n00:15:41.940 --> 00:15:47.636\nSo what this is telling me is that hey in\nthis table that I believe may be here,\n\n278\n00:15:47.636 --> 00:15:49.863\nwhich is dbo.Departments,\n\n279\n00:15:49.863 --> 00:15:55.846\nit believes that I've actually selected\nsome type of Unicode character type.\n\n280\n00:15:55.846 --> 00:15:59.684\nSo what's it's actually doing,\nin the Unicode character type,\n\n281\n00:15:59.684 --> 00:16:02.022\nthe way that we describe literals Okay?\n\n282\n00:16:02.022 --> 00:16:05.084\nIn other words,\nwhat we want literally printed\n\n283\n00:16:05.084 --> 00:16:09.674\nout here is gonna be actually using\na capitol N and then whatever follows\n\n284\n00:16:09.674 --> 00:16:14.230\nin these singe quotes here is literally\ntelling it to look for, okay?\n\n285\n00:16:14.230 --> 00:16:18.966\nSo in this one it's\nsaying that the OBJECT_ID\n\n286\n00:16:18.966 --> 00:16:23.510\nhere should actually have of\ncourse dbo Departments and\n\n287\n00:16:23.510 --> 00:16:27.290\nthen a capital U at some\npoint here in the second one.\n\n288\n00:16:27.290 --> 00:16:33.900\nAnd if that's actually not a nul,\nthen go ahead and drop this entire table.\n\n289\n00:16:33.900 --> 00:16:36.187\nSo it's saying look for\ninformation here, okay.\n\n290\n00:16:36.187 --> 00:16:39.237\nAnd if you see this table\nin existence right now, and\n\n291\n00:16:39.237 --> 00:16:43.344\nyou don't want that table to be in\nexistence, go ahead and drop that.\n\n292\n00:16:43.344 --> 00:16:46.380\nBecause what we're gonna do is,\nwe're gonna create a new table.\n\n293\n00:16:46.380 --> 00:16:50.590\nSo it's gonna go back over\nto the left hand side here.\n\n294\n00:16:50.590 --> 00:16:54.600\nAnd it should see this,\nwhich I created a little bit earlier,\n\n295\n00:16:54.600 --> 00:16:57.760\nwhich is the dbo.Departments,\nright over here.\n\n296\n00:16:57.760 --> 00:17:00.780\nAnd it should get rid of that object for\nus.\n\n297\n00:17:02.140 --> 00:17:05.170\nAnd then it's gonna\nrecreate it on the fly.\n\n298\n00:17:05.170 --> 00:17:08.492\nAnd notice this time, we're actually using\na little bit more formal structure and\n\n299\n00:17:08.492 --> 00:17:10.396\nwe haven't actually run\ninto this one before.\n\n300\n00:17:10.396 --> 00:17:14.680\nWe will get to this in another domain\nobjective that we'll be hitting.\n\n301\n00:17:14.680 --> 00:17:18.380\nBut here I'm just showing it to you,\nfairly simple in the language, right?\n\n302\n00:17:18.380 --> 00:17:23.130\nGo ahead and create a table\ncalled dbo Departments here.\n\n303\n00:17:23.130 --> 00:17:26.820\nAnd now I started to\ndefine the data types, and\n\n304\n00:17:26.820 --> 00:17:29.440\nalso of course the column names, okay?\n\n305\n00:17:29.440 --> 00:17:34.086\nSo in the data type here I have\na column called DeptID and\n\n306\n00:17:34.086 --> 00:17:38.035\nit's actually in what\nwe call a tiny integer.\n\n307\n00:17:38.035 --> 00:17:42.939\nAnd I wanna make sure that that's not null\nbecause this particular integer is gonna\n\n308\n00:17:42.939 --> 00:17:45.192\nbecome my primary key for that table.\n\n309\n00:17:45.192 --> 00:17:47.178\nOkay, that's what it's actually gonna do.\n\n310\n00:17:47.178 --> 00:17:53.155\nAnd then I'm gonna create a department\ncharacter In which the variable\n\n311\n00:17:53.155 --> 00:17:59.142\ncharacter here, okay, is gonna\nactually be 30 at the maximum size.\n\n312\n00:17:59.142 --> 00:18:02.404\nAnd again, a manager name or\na manager of some sort.\n\n313\n00:18:02.404 --> 00:18:05.340\nIt's also going to be 50\ncharacters in size as well.\n\n314\n00:18:05.340 --> 00:18:08.742\nSo it's gonna be a three column table\nthat we're gonna end up having here,\n\n315\n00:18:08.742 --> 00:18:10.960\nis what's going to actually be there.\n\n316\n00:18:10.960 --> 00:18:14.090\nNow notice, because of those three\ncolumns, and I wanna go ahead and\n\n317\n00:18:14.090 --> 00:18:15.940\npopulate it with data,\n\n318\n00:18:15.940 --> 00:18:20.700\nnow notice that what I've also done\nis I've actually did the INSERT INTO.\n\n319\n00:18:20.700 --> 00:18:22.610\nSo I'm now saying here's\nthe values that I want,\n\n320\n00:18:22.610 --> 00:18:25.760\nand I'm actually going to do it\nin the order that it's listed.\n\n321\n00:18:25.760 --> 00:18:29.981\nHere is that first tiny integer right\nhere, okay, which is the number 1.\n\n322\n00:18:29.981 --> 00:18:32.640\nAnd that's actually gonna\nfill that position, okay?\n\n323\n00:18:32.640 --> 00:18:34.904\nThe department name, Human Resources,\n\n324\n00:18:34.904 --> 00:18:37.628\nis actually gonna match up\nhere in the second one.\n\n325\n00:18:37.628 --> 00:18:41.097\nAnd then of course, finally,\nthe last name here under Manager,\n\n326\n00:18:41.097 --> 00:18:43.710\nwe're actually gonna do this as well.\n\n327\n00:18:43.710 --> 00:18:47.570\nSo I actually went ahead and\ncreated all this right here on the fly.\n\n328\n00:18:47.570 --> 00:18:49.613\nSo what should happen then,\n\n329\n00:18:49.613 --> 00:18:53.890\nright, is at the very beginning it should\ndrop the table if it finds it, and\n\n330\n00:18:53.890 --> 00:18:57.280\nthen recreates the table\nagain if everything goes on.\n\n331\n00:18:57.280 --> 00:18:57.980\nSo let me see.\n\n332\n00:18:57.980 --> 00:19:02.830\nIf I go and just run just part of\nthis right here, and I execute it.\n\n333\n00:19:02.830 --> 00:19:04.820\nAnd then I have to go over\nhere to the left hand side and\n\n334\n00:19:04.820 --> 00:19:06.820\nI'm gonna right-click and refresh.\n\n335\n00:19:06.820 --> 00:19:12.780\nI should now see that the Departments\ntable is now gone, okay?\n\n336\n00:19:12.780 --> 00:19:14.620\nSo notice that there's\nno Departments left.\n\n337\n00:19:15.750 --> 00:19:22.908\nThen I'm going to recreate it right here,\nIn this second step.\n\n338\n00:19:25.357 --> 00:19:27.029\nOops, I forgot my GO.\n\n339\n00:19:30.013 --> 00:19:33.137\nGO, and then if I refresh it again,\n\n340\n00:19:33.137 --> 00:19:38.137\nnow I should see that Departments\nhas now been created but\n\n341\n00:19:38.137 --> 00:19:42.427\nthere is no data actually\ninserted in there yet.\n\n342\n00:19:42.427 --> 00:19:46.026\nAnd now I can run that third part here,\nI believe I can,\n\n343\n00:19:46.026 --> 00:19:48.777\nlet me see if I can\nactually get that done.\n\n344\n00:19:55.267 --> 00:20:00.610\nAnd insert data into it and I'm told that\nfive rows have now actually been affected.\n\n345\n00:20:02.430 --> 00:20:06.160\nAnd so the easiest thing for\nus then is to go ahead and\n\n346\n00:20:06.160 --> 00:20:07.840\nrun just another simply query.\n\n347\n00:20:09.090 --> 00:20:12.384\nAnd I'm just gonna do a SELECT everything,\n\n348\n00:20:12.384 --> 00:20:17.559\nbecause we've actually added in there,\nfrom the dbo Departments.\n\n349\n00:20:20.323 --> 00:20:21.396\nDo my good deed,\n\n350\n00:20:21.396 --> 00:20:25.773\nmake sure I actually follow\nthe convention as much as I remember it.\n\n351\n00:20:25.773 --> 00:20:29.250\nAnd now, when I take a look, there it is.\n\n352\n00:20:29.250 --> 00:20:33.210\nSo you saw me actually bring it from\nthe very completion of getting rid of\n\n353\n00:20:33.210 --> 00:20:36.650\nan old table that I may not\nreally want to be there.\n\n354\n00:20:36.650 --> 00:20:40.200\nAnd now creating a brand new table,\nmaking sure the structure's there,\n\n355\n00:20:40.200 --> 00:20:42.780\nand also populating it with something new.\n\n356\n00:20:42.780 --> 00:20:45.960\nAnd here's the information that\nwe also were able to add in.\n\n357\n00:20:45.960 --> 00:20:50.100\nSo, very easily, there's plenty of\ndifferent constraints that we essentially\n\n358\n00:20:50.100 --> 00:20:51.449\nend up working through.\n\n359\n00:20:51.449 --> 00:20:54.770\nBut sometimes these are actually things\nthat you have to actually think about\n\n360\n00:20:54.770 --> 00:20:56.100\nwhen you take a look.\n\n361\n00:20:56.100 --> 00:20:59.010\nI'm hoping that you're also seeing\nas we're explaining each of these\n\n362\n00:20:59.010 --> 00:21:01.040\nstatements here, or these queries,\n\n363\n00:21:01.040 --> 00:21:05.720\nis you're actually understanding the logic\nbehind it of when you would use one.\n\n364\n00:21:05.720 --> 00:21:08.460\nSo remember if you're actually\ntyping in real values,\n\n365\n00:21:08.460 --> 00:21:10.340\nuse the value statement, okay.\n\n366\n00:21:10.340 --> 00:21:14.780\nIf you are actually just going to populate\na table, remember you have to create\n\n367\n00:21:14.780 --> 00:21:17.710\nthe table first and\nthen you can populate it as well.\n\n368\n00:21:17.710 --> 00:21:20.140\nAnd you might also get rid\nof an existing table too,\n\n369\n00:21:20.140 --> 00:21:24.180\nin which the data is either not\nwhat you wanted it to be or\n\n370\n00:21:24.180 --> 00:21:27.040\nthe very fact is it's not doing\nwhat you actually want as well.\n\n371\n00:21:27.040 --> 00:21:28.800\n>> So this is a really quick way to say,\nyou know what,\n\n372\n00:21:28.800 --> 00:21:33.110\nthat Departments table I made before,\nthat's not working out for me so well.\n\n373\n00:21:33.110 --> 00:21:34.750\nI need to recreate that.\n\n374\n00:21:34.750 --> 00:21:39.010\nI can use the drop that\ntable function there.\n\n375\n00:21:39.010 --> 00:21:40.820\nGet rid of that, recreate it, and\n\n376\n00:21:40.820 --> 00:21:44.290\nthen populate it with the data that\nI do need ind the way that I need it.\n\n377\n00:21:44.290 --> 00:21:47.150\nAnd I'm back outside without\nhaving to try to go through and\n\n378\n00:21:47.150 --> 00:21:48.862\ndelete everything one at a time.\n\n379\n00:21:48.862 --> 00:21:51.030\nJust say get rid of the table and\nstart from scratch.\n\n380\n00:21:51.030 --> 00:21:53.920\n>> Yeah, and hopefully that'd\nbe clearly explained, right?\n\n381\n00:21:53.920 --> 00:21:57.150\nThe hard thing right now,\nbecause we haven't really done any of\n\n382\n00:21:57.150 --> 00:22:00.300\nthe table creation,\nyou don't really have a context for\n\n383\n00:22:00.300 --> 00:22:03.520\nsetting up the data types and\nthose fields yet.\n\n384\n00:22:03.520 --> 00:22:06.390\nBut at least seeing it,\nI at least walked you through that.\n\n385\n00:22:06.390 --> 00:22:07.088\nAnd we will,\n\n386\n00:22:07.088 --> 00:22:11.280\nwe'll be getting into that in the rest of\nthe series here when we get ready for.\n\n387\n00:22:11.280 --> 00:22:14.648\nWe'll come back and we'll actually show\nyou how to create those tables and\n\n388\n00:22:14.648 --> 00:22:17.375\neven create it from a basic\nscratch database if we wanted to,\n\n389\n00:22:17.375 --> 00:22:19.110\nto just create the structure.\n\n390\n00:22:19.110 --> 00:22:22.350\nAnd then modify that and\nthen connect them together as well, okay?\n\n391\n00:22:22.350 --> 00:22:24.090\nNow, of course, are there more scenarios?\n\n392\n00:22:24.090 --> 00:22:28.660\nYes, of course there's more scenarios and\nthat's because in the world of databases,\n\n393\n00:22:28.660 --> 00:22:30.350\nyou never know what's\ngonna end up happening.\n\n394\n00:22:30.350 --> 00:22:35.385\nBut remember that not every query that\nwe do is just a simple select star or\n\n395\n00:22:35.385 --> 00:22:37.720\nasterisk from a single table.\n\n396\n00:22:37.720 --> 00:22:40.880\nA lot of times what we also end\nup doing here is, of course,\n\n397\n00:22:40.880 --> 00:22:42.910\nusing sub queries to help us out.\n\n398\n00:22:42.910 --> 00:22:45.200\nWhich means can we do this\nwith sub queries as well?\n\n399\n00:22:45.200 --> 00:22:46.740\nYou better believe it, okay?\n\n400\n00:22:46.740 --> 00:22:49.690\nSo I'm just trying to show you\nthat not everything is always\n\n401\n00:22:49.690 --> 00:22:51.890\nas simple as I'm demonstrating.\n\n402\n00:22:51.890 --> 00:22:55.350\nAnd at the same time,\nyou actually know how you query, so\n\n403\n00:22:55.350 --> 00:22:58.770\nremember that you can actually use sub\nqueries to help us out as well, okay?\n\n404\n00:22:58.770 --> 00:23:01.680\nNow here it is, here's one of\nthe other elements that we have,\n\n405\n00:23:01.680 --> 00:23:05.370\nand I've went ahead and typed this in\nin my comments up here at the top.\n\n406\n00:23:05.370 --> 00:23:08.500\nI wanna be able to add values\ninto a table from one or\n\n407\n00:23:08.500 --> 00:23:11.650\nmore other table or views, okay?\n\n408\n00:23:11.650 --> 00:23:16.100\nI wanna make sure that I actually end up\nusing subqueries in the INSERT statement.\n\n409\n00:23:16.100 --> 00:23:21.100\nAnd then I can actually, in the SELECT\nsubquery, also lets me know that one or\n\n410\n00:23:21.100 --> 00:23:24.530\nmore can actually be inserted\nexactly at the same time.\n\n411\n00:23:24.530 --> 00:23:28.160\nSo in this sense the actual\nconstraint is this, right?\n\n412\n00:23:28.160 --> 00:23:30.950\nThe data exists in multiple tables, okay?\n\n413\n00:23:30.950 --> 00:23:32.070\nAnd you still need to do what?\n\n414\n00:23:32.070 --> 00:23:36.370\nYou still need to go ahead and take\nthose values from multiple tables now.\n\n415\n00:23:36.370 --> 00:23:38.880\nEverything I've done is\nactually either typed in or\n\n416\n00:23:38.880 --> 00:23:40.740\nit's actually been from one table.\n\n417\n00:23:40.740 --> 00:23:43.075\nSo now you have multiple tables.\n\n418\n00:23:43.075 --> 00:23:45.769\nWell, that means you have to able to\ncombine this together with subqueries,\n\n419\n00:23:45.769 --> 00:23:48.100\nokay, and pretty much do the same thing.\n\n420\n00:23:48.100 --> 00:23:51.650\nSo let's take a look again at our\nsyntax here that will help us\n\n421\n00:23:51.650 --> 00:23:53.610\nout a little bit more.\n\n422\n00:23:53.610 --> 00:23:57.356\nSo now we're gonna create a new table here\nand notice it's called MySalesReason.\n\n423\n00:23:57.356 --> 00:24:01.281\nAnd here it is again,\nwe're actually seeing that on this one,\n\n424\n00:24:01.281 --> 00:24:03.885\nwe're actually doing a SalesReasonID.\n\n425\n00:24:03.885 --> 00:24:09.380\nAnd it's actually got an integer as its\ndata type, and this one cannot be null.\n\n426\n00:24:09.380 --> 00:24:12.280\nAnd then I have a Name and\na ModifiedDate, and\n\n427\n00:24:12.280 --> 00:24:15.040\nI actually do have the data\ntypes listed here.\n\n428\n00:24:15.040 --> 00:24:19.680\nAnd that's the first thing I am going\nto do, is make sure that I go ahead and\n\n429\n00:24:19.680 --> 00:24:22.790\ncreate the table that I'm\ngonna be inserting data into.\n\n430\n00:24:22.790 --> 00:24:25.650\nNow, when I do this,\nit should actually have\n\n431\n00:24:25.650 --> 00:24:29.970\ncreated a table over here on the left\nhand side called MySalesReason.\n\n432\n00:24:29.970 --> 00:24:35.880\nAnd let's see here, so far, when I take\na look over on the left hand side, I don't\n\n433\n00:24:35.880 --> 00:24:41.230\nsee anything that looks like that, and so\nthis means something has gone wrong right?\n\n434\n00:24:41.230 --> 00:24:44.320\nWell, no, remember that\nthe problem is fairly simple.\n\n435\n00:24:44.320 --> 00:24:46.660\nIt doesn't refresh automatically.\n\n436\n00:24:46.660 --> 00:24:50.550\nSo if I right click on the adventure\nworks database, I can refresh.\n\n437\n00:24:50.550 --> 00:24:54.060\nAnd now, if I expand out Tables again,\nI should see.\n\n438\n00:24:54.060 --> 00:24:56.680\nThere it is, MySalesReason.\n\n439\n00:24:56.680 --> 00:25:00.630\nSo there is my new blank table\nwith the columns already created.\n\n440\n00:25:00.630 --> 00:25:01.760\nNow I haven't showed you that yet.\n\n441\n00:25:01.760 --> 00:25:05.060\nLet me go ahead and expand that out and\nthen click on Keys.\n\n442\n00:25:05.060 --> 00:25:09.300\nAnd notice that it actually did follow\nmy exact reasoning here, integer,\n\n443\n00:25:09.300 --> 00:25:15.070\nnot null, the Nvar character here,\nwith 50 as being the max here.\n\n444\n00:25:15.070 --> 00:25:18.240\nAnd then a null can actually happen or\ndate and time and\n\n445\n00:25:18.240 --> 00:25:20.260\nnull can also happen there as well.\n\n446\n00:25:20.260 --> 00:25:21.380\nSo there it is.\n\n447\n00:25:21.380 --> 00:25:24.030\nSo my structure is actually\nin existence at this point.\n\n448\n00:25:25.030 --> 00:25:28.078\nAnd so now,\nwhat am I actually going to do?\n\n449\n00:25:28.078 --> 00:25:33.450\nWell, I'm gonna insert into that\nsales table here, into MySalesReason,\n\n450\n00:25:33.450 --> 00:25:37.890\nI'm gonna do this select statement,\nas well as another one.\n\n451\n00:25:37.890 --> 00:25:41.010\nOops, let me scroll down,\ntry and get everything here.\n\n452\n00:25:44.020 --> 00:25:46.720\nSo that we can also see this as well,\nokay?\n\n453\n00:25:46.720 --> 00:25:50.910\nNow this one, I have the insert into and\nI'm selecting it right here.\n\n454\n00:25:54.090 --> 00:25:55.598\nI'm just gonna to call it Marketing.\n\n455\n00:25:55.598 --> 00:25:57.350\nMake sure I get my last Go here.\n\n456\n00:26:00.750 --> 00:26:01.990\nAnd execute.\n\n457\n00:26:01.990 --> 00:26:06.860\nAnd so now, once I have that done,\nI should now\n\n458\n00:26:06.860 --> 00:26:10.808\nbe able to actually take a look here,\nas I actually run this as my verification.\n\n459\n00:26:10.808 --> 00:26:13.520\nOops, it executed successfully.\n\n460\n00:26:13.520 --> 00:26:14.680\nLet me bring this back up.\n\n461\n00:26:15.910 --> 00:26:17.110\nThere we go.\n\n462\n00:26:17.110 --> 00:26:21.650\nSo we have now seen where we can go ahead\nand run that and see information from\n\n463\n00:26:21.650 --> 00:26:26.960\nmultiple tables here coming in,\ninto this one reason for us, okay?\n\n464\n00:26:26.960 --> 00:26:30.850\nSo, you may also end up seeing\na constraint like that where you\n\n465\n00:26:30.850 --> 00:26:35.820\ndo have to pull in data from more than\none source sometimes to pull in and\n\n466\n00:26:35.820 --> 00:26:37.820\nto make the table you\nactually wanted to do.\n\n467\n00:26:37.820 --> 00:26:40.890\nNow of course that leads us to,\nwell, I think,\n\n468\n00:26:40.890 --> 00:26:44.130\nif I remember right,\nthis should be our last one as well.\n\n469\n00:26:44.130 --> 00:26:46.170\nWhat if you don't need every bit of data,\nokay?\n\n470\n00:26:46.170 --> 00:26:49.990\nYou want not just one,\nnot just you selecting that one, but\n\n471\n00:26:49.990 --> 00:26:54.100\nwhat if you wanted to do it a little\nbit more choosy in this way?\n\n472\n00:26:54.100 --> 00:26:57.329\nOkay, let's say that you wanna actually\nselect the top ten rows, okay, or\n\n473\n00:26:57.329 --> 00:26:58.856\nI think that's the one I'm doing.\n\n474\n00:26:58.856 --> 00:27:00.050\nYep, top ten, okay.\n\n475\n00:27:00.050 --> 00:27:02.390\nI couldn't remember what\nnumber I actually used here,\n\n476\n00:27:02.390 --> 00:27:04.480\ncuz I actually have it\nas being an n value.\n\n477\n00:27:04.480 --> 00:27:08.880\nSo I'm gonna create a new table and I'm\nnot gonna pull from everything, but I just\n\n478\n00:27:08.880 --> 00:27:14.360\nwant the top 10 from a particular table\nto be inserted in there, or the top 15.\n\n479\n00:27:14.360 --> 00:27:17.610\nRemember, you can actually\nuse NTL as well and\n\n480\n00:27:17.610 --> 00:27:21.350\nif you do that you can actually say what\npercentage of that number that you want\n\n481\n00:27:21.350 --> 00:27:24.740\ninserted in, if that's something\nthat you actually wanted as well.\n\n482\n00:27:24.740 --> 00:27:28.300\nSo, in this one,\nyou have a couple of ways you can do it.\n\n483\n00:27:28.300 --> 00:27:32.821\nDaniel, if it were between\ntyping let's say 10,\n\n484\n00:27:32.821 --> 00:27:37.540\n15, or let's say 20 rows, and we did\npercentage here, or you actually writing\n\n485\n00:27:37.540 --> 00:27:41.370\none statement to actually do this,\nwhat would be the better idea?\n\n486\n00:27:41.370 --> 00:27:42.880\n>> I'm gonna go with\nthe most difficult way.\n\n487\n00:27:42.880 --> 00:27:43.975\n>> No, of course obviously.\n\n488\n00:27:43.975 --> 00:27:47.570\n>> [LAUGH] The least typing the better,\nyou're less prone to make a mistake and\n\n489\n00:27:47.570 --> 00:27:50.330\nhave to go back and retype something and\ncreate more work for yourself.\n\n490\n00:27:50.330 --> 00:27:53.710\nPlus it's a lot less complex, it's easier\nto read, it's easier to understand.\n\n491\n00:27:53.710 --> 00:27:56.660\nWe always like that, so\nI'm gonna go with option B there, Ronald.\n\n492\n00:27:56.660 --> 00:27:58.840\n>> Yeah that's exactly what\nwe would think, right?\n\n493\n00:27:58.840 --> 00:28:01.808\nBut some of us though,\nwe're kind of old dogs, right?\n\n494\n00:28:01.808 --> 00:28:05.130\n>> [LAUGH]\n>> It's like, I know this one works.\n\n495\n00:28:05.130 --> 00:28:07.430\nThis one's brand new,\nI don't know if I wanna run that.\n\n496\n00:28:07.430 --> 00:28:08.860\nWell, that's the great thing, right?\n\n497\n00:28:08.860 --> 00:28:12.760\nYou can actually test this stuff out and\nactually verify that it works.\n\n498\n00:28:12.760 --> 00:28:15.670\nBut if it were me, I would do\nthe same thing, especially if all\n\n499\n00:28:15.670 --> 00:28:18.740\nof a sudden I looked at the table that I'm\ntrying to pull that information from and\n\n500\n00:28:18.740 --> 00:28:21.260\nthere's, let's say 1500 rows, and they're\n\n501\n00:28:21.260 --> 00:28:25.290\nsaying I actually only want the top 10%\nof those rows to be in this new table.\n\n502\n00:28:25.290 --> 00:28:29.300\nWell, at that point, I would say, no,\ndoing this is actually easier, cuz,\n\n503\n00:28:29.300 --> 00:28:31.640\ncan I print those things out and\nactually do value statements for\n\n504\n00:28:31.640 --> 00:28:32.520\nevery single one of them?\n\n505\n00:28:32.520 --> 00:28:35.560\nYes, okay,\nwe can absolutely do that if we wanted to.\n\n506\n00:28:35.560 --> 00:28:39.880\nWe could go back in and make the\nindividual insert in those rows here, and\n\n507\n00:28:39.880 --> 00:28:42.010\nactually run that every single time,\nright?\n\n508\n00:28:42.010 --> 00:28:46.502\nFor all 120 or 200 rows that might\nactually be in that top 10% to be able to\n\n509\n00:28:46.502 --> 00:28:49.620\nput that in there,\nif it was a 2,000 table column.\n\n510\n00:28:49.620 --> 00:28:53.290\nBut you can kinda see why we're\nactually taking a look at this,\n\n511\n00:28:53.290 --> 00:28:55.920\nso you do have some\ndifferent constraints there.\n\n512\n00:28:55.920 --> 00:28:59.580\nNow let's go ahead and take a look\nthen at the logic behind this and\n\n513\n00:28:59.580 --> 00:29:01.650\nthe statements that we're also using.\n\n514\n00:29:01.650 --> 00:29:05.230\nSo here it is,\nI'm actually gonna go ahead and say, look.\n\n515\n00:29:05.230 --> 00:29:07.060\nLet's say that I have\na new employees table and\n\n516\n00:29:07.060 --> 00:29:09.560\nI'm not sure it's actually\nsupposed to be there or not.\n\n517\n00:29:09.560 --> 00:29:10.885\nI'm gonna go ahead and get rid of it.\n\n518\n00:29:10.885 --> 00:29:13.240\nIf it's actually there, it's now gone.\n\n519\n00:29:13.240 --> 00:29:15.870\nAnd if I take a look,\nI didn't have one so I'm not so\n\n520\n00:29:15.870 --> 00:29:17.380\nworried about verifying it again.\n\n521\n00:29:18.560 --> 00:29:21.346\nBut now it's pretty much the same thing\nthat we actually saw a little bit\n\n522\n00:29:21.346 --> 00:29:22.094\nearlier, right?\n\n523\n00:29:22.094 --> 00:29:27.212\nWe're gonna create this table,\nand this one has a bit\n\n524\n00:29:27.212 --> 00:29:32.800\nmore as far as the number of\ncolumns that we actually have.\n\n525\n00:29:32.800 --> 00:29:38.610\nSo we have BusinessEntityID, LastName,\nFirstName, PhoneNumber as well,\n\n526\n00:29:38.610 --> 00:29:43.480\nAddressLine, City, State,\nPostalCode, CurrentFlag too.\n\n527\n00:29:43.480 --> 00:29:47.770\nSo all of this is actually something we're\ngoing to go ahead and create right here.\n\n528\n00:29:49.080 --> 00:29:54.420\nAnd I'm simply gonna execute that entire\ntable, and then I'm gonna refresh this and\n\n529\n00:29:54.420 --> 00:30:00.420\nverify now that I have one called\nHuman Resources New Employee.\n\n530\n00:30:00.420 --> 00:30:04.830\nNow this one I didn't\nactually create it as a DBO.\n\n531\n00:30:04.830 --> 00:30:09.620\nNotice that I added this one\ndirectly in line instead.\n\n532\n00:30:09.620 --> 00:30:13.020\nSo I wanted to show you, you could do\nthat, too, by being able to create this.\n\n533\n00:30:13.020 --> 00:30:14.510\nI don't always have to do a DBO.\n\n534\n00:30:14.510 --> 00:30:18.240\nIt's probably better at times because\nit keeps you logically knowing,\n\n535\n00:30:18.240 --> 00:30:21.270\nhey, this didn't exist in the beginning,\nthis is an addition or\n\n536\n00:30:21.270 --> 00:30:23.698\nan addendum to your table that you have.\n\n537\n00:30:23.698 --> 00:30:28.580\nAnd when I expand that out, I can see, all\nthose columns are also the same as well.\n\n538\n00:30:28.580 --> 00:30:29.900\nOkay, so there it is.\n\n539\n00:30:29.900 --> 00:30:32.200\nThere is my unique new table for\n\n540\n00:30:32.200 --> 00:30:35.290\nmy new employees that I\ndid not have in existence.\n\n541\n00:30:35.290 --> 00:30:38.620\nAnd now I want to go ahead and run this.\n\n542\n00:30:38.620 --> 00:30:44.130\nAnd actually add in the top\nten into this table.\n\n543\n00:30:44.130 --> 00:30:49.430\nSo, notice though, here again is where\nthese joins are telling me what?\n\n544\n00:30:49.430 --> 00:30:53.490\nAll of this information is\nnot from one table, okay?\n\n545\n00:30:53.490 --> 00:30:55.190\nSo the joins are actually telling me that,\nthat,\n\n546\n00:30:55.190 --> 00:30:58.330\nhey look, all this stuff is\nactually from multiple tables here.\n\n547\n00:30:58.330 --> 00:30:59.750\nAnd if I take a look at it,\none, two, three,\n\n548\n00:30:59.750 --> 00:31:03.440\nfour, four, five,\nfive different join statements.\n\n549\n00:31:03.440 --> 00:31:04.490\nThat's a pretty long join.\n\n550\n00:31:04.490 --> 00:31:06.990\nActually six,\nI didn't even see that last one.\n\n551\n00:31:06.990 --> 00:31:08.290\nOne, two, I'm lying to you.\n\n552\n00:31:08.290 --> 00:31:09.705\nOne, two, three, four, five.\n\n553\n00:31:09.705 --> 00:31:11.070\nSee, I can't count.\n\n554\n00:31:11.070 --> 00:31:12.930\nFive different statements here.\n\n555\n00:31:12.930 --> 00:31:15.760\nSo all the data that I'm actually\ninserting in here, of course,\n\n556\n00:31:15.760 --> 00:31:17.689\ncomes from five different tables.\n\n557\n00:31:18.830 --> 00:31:20.570\nAnd then I'm gonna execute it.\n\n558\n00:31:20.570 --> 00:31:22.510\nAnd it tells me that it ran successfully.\n\n559\n00:31:22.510 --> 00:31:25.130\nAnd let me see if I can verify.\n\n560\n00:31:25.130 --> 00:31:28.554\nTen rows were affected cuz I told it\nto actually give me what, the top ten?\n\n561\n00:31:28.554 --> 00:31:33.699\nAnd so now, if I go ahead and\nI pull a select\n\n562\n00:31:33.699 --> 00:31:38.403\nstatement from here and I execute it,\n\n563\n00:31:38.403 --> 00:31:45.400\nright here,\nit does show me a result of ten rows.\n\n564\n00:31:45.400 --> 00:31:49.740\nAnd there's all the data that was actually\npulled in from across the entire database,\n\n565\n00:31:49.740 --> 00:31:53.270\nnow into that one single\nbrand new table again.\n\n566\n00:31:53.270 --> 00:31:58.620\nSo if we see that we actually do have\nsome constraints as we add in more data\n\n567\n00:31:58.620 --> 00:32:02.230\ninto our database, remember that\nwe have the power to do it, right?\n\n568\n00:32:02.230 --> 00:32:05.440\nI can manually type the data\nin using the values clause.\n\n569\n00:32:05.440 --> 00:32:08.920\nI can also use select statements when\nthere's actually a single query, or\n\n570\n00:32:08.920 --> 00:32:12.760\nI can actually use select statements with\nsub-queries as well as select statements\n\n571\n00:32:12.760 --> 00:32:16.570\nlike we did with joins, everything to\nbe able to create a brand new table and\n\n572\n00:32:16.570 --> 00:32:20.560\ninsert in more and\nnew data into our database as well.\n\n573\n00:32:20.560 --> 00:32:25.070\nCreating the tables syntax that\nwe just showed you is not gonna\n\n574\n00:32:25.070 --> 00:32:28.340\nmake much sense since we haven't dealt\nwith that yet as far as our series goes.\n\n575\n00:32:28.340 --> 00:32:30.664\nBut we're actually gonna deal with\nthat a little bit later on, so\n\n576\n00:32:30.664 --> 00:32:32.645\nmake sure you check out that\nepisode when we get there.\n\n577\n00:32:32.645 --> 00:32:36.580\nBut at least, hopefully you actually\nsee that it gives you this power and\n\n578\n00:32:36.580 --> 00:32:40.730\nthis ability to work with some of the\nconstraints that you may have to work with\n\n579\n00:32:40.730 --> 00:32:42.360\nif you're dealing with existing data, and\n\n580\n00:32:42.360 --> 00:32:46.030\nalso brand new data that's gonna\nbe brought in to your database.\n\n581\n00:32:46.030 --> 00:32:49.298\n>> Well, Ronnie, great presentation\non how we can manipulate and\n\n582\n00:32:49.298 --> 00:32:53.520\nor create even, new datas and\ntables inside of our databases.\n\n583\n00:32:53.520 --> 00:32:56.090\nAnd, we do appreciate that,\nbut, looking at our clock,\n\n584\n00:32:56.090 --> 00:32:58.570\nlooks like we've come to the end of yet\nanother wonderful episode.\n\n585\n00:32:58.570 --> 00:32:59.810\nHopefully, you guys have enjoyed it.\n\n586\n00:32:59.810 --> 00:33:01.890\nRonnie, we thank you again for\ndropping by.\n\n587\n00:33:01.890 --> 00:33:02.950\nWe're gonna go ahead and sign off.\n\n588\n00:33:02.950 --> 00:33:03.660\nFor ITProTV.\n\n589\n00:33:03.660 --> 00:33:05.200\nI've been your host Daniel Lowry.\n\n590\n00:33:05.200 --> 00:33:05.870\n>> And I'm Ronnie Wong.\n\n591\n00:33:05.870 --> 00:33:07.939\n>> And we'll see you next time.\n\n592\n00:33:07.939 --> 00:33:15.500\n[SOUND]\n\n",
          "vimeoId": "164635511"
        },
        {
          "description": "In this episode, Daniel and Ronnie demonstrate how to query and manage XML data in a SQL 2014 database. They start by explaining the when and why you would be working with XML and then show you how to create XML data from relational data.",
          "length": "1729",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-9-1-query_and_manage_xml_data-042616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-9-1-query_and_manage_xml_data-042616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-9-1-query_and_manage_xml_data-042616-1-sm.jpg",
          "title": "Query and Manage XML Data",
          "transcript": "WEBVTT\n\n1\n00:00:00.101 --> 00:00:10.101\n[MUSIC]\n\n2\n00:00:11.967 --> 00:00:16.414\nAll right, greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:16.414 --> 00:00:20.314\nI'm your host Daniel Lowrie and\ntoday's episode we're continuing on\n\n4\n00:00:20.314 --> 00:00:25.260\nwith our series regarding the Microsoft\nSQL Server 2014 and the queries thereof.\n\n5\n00:00:25.260 --> 00:00:27.960\nJoining us back in the studio again\ntoday to help us out with that endeavor,\n\n6\n00:00:27.960 --> 00:00:29.610\nis our good friend Mr. Ronnie Wong.\n\n7\n00:00:29.610 --> 00:00:31.520\nRonnie, welcome back to the show,\nhow's it going today?\n\n8\n00:00:31.520 --> 00:00:33.880\n>> It is going well,\nthank you again for having me here,\n\n9\n00:00:33.880 --> 00:00:38.520\nas we continue on taking a look at\nmore of the Microsoft SQL Server 2014.\n\n10\n00:00:38.520 --> 00:00:43.310\nToday we're specifically jumping into\nan area that most of us, we have probably\n\n11\n00:00:43.310 --> 00:00:48.710\nsome hesitation about this idea and\nthat is working with XML data.\n\n12\n00:00:48.710 --> 00:00:49.870\n>> I'm scared Ronnie.\n\n13\n00:00:49.870 --> 00:00:50.930\n>> I don't blame you.\n\n14\n00:00:50.930 --> 00:00:54.870\nXML data is a little bit funky to look\nat the very first time that you see it.\n\n15\n00:00:54.870 --> 00:00:58.702\nAnd most of us, even in the IT industry,\nwe tend to specialize and\n\n16\n00:00:58.702 --> 00:01:00.738\nwe tend to group things together.\n\n17\n00:01:00.738 --> 00:01:04.938\nAnd, one of the things that I know that\nI've tried to avoid like the plague is XML\n\n18\n00:01:04.938 --> 00:01:05.960\nby anything.\n\n19\n00:01:05.960 --> 00:01:07.790\nCuz I look at it and\nthe only thing I look at, and\n\n20\n00:01:07.790 --> 00:01:10.720\nit looks like HTML,\nwhich I don't know anything about.\n\n21\n00:01:10.720 --> 00:01:12.560\nAnd so\nwhen I take a look at stuff like that,\n\n22\n00:01:12.560 --> 00:01:14.610\nI'm like,\nthat doesn't look like anything fun.\n\n23\n00:01:14.610 --> 00:01:18.350\nI don't wanna do anything with it,\nso I tend to avoid it as well.\n\n24\n00:01:18.350 --> 00:01:20.230\nBut the very fact is you can't.\n\n25\n00:01:20.230 --> 00:01:24.840\nThe very fact is the world does\nactually run a lot of stuff in\n\n26\n00:01:24.840 --> 00:01:29.670\nthe background is stored in XML data\ncontainers, is actually right there,\n\n27\n00:01:29.670 --> 00:01:34.550\nand the reason why is you can store\na tremendous amount of data using XML.\n\n28\n00:01:34.550 --> 00:01:36.890\nAnd it's also one of those languages and\n\n29\n00:01:37.930 --> 00:01:40.820\nformats that really is\neasy to actually learn.\n\n30\n00:01:40.820 --> 00:01:43.220\nAllows you to actually build and\ndo a lot with it.\n\n31\n00:01:43.220 --> 00:01:46.830\nBut right now when we start talking\nabout it, the problem is fairly simple.\n\n32\n00:01:46.830 --> 00:01:50.780\nHow do you actually get data out of\nXML and get it into a SQL server?\n\n33\n00:01:50.780 --> 00:01:55.990\nAnd then also, of course, how do you\nuse SQL server to get XML data as well?\n\n34\n00:01:55.990 --> 00:02:00.580\nSo sometimes you do need the data to\nactually be in XML format, but it exists\n\n35\n00:02:00.580 --> 00:02:04.620\nin the format inside of your SQL server as\nregular tables, which is what we have and\n\n36\n00:02:04.620 --> 00:02:09.650\nthen sometimes we have XML data in\nthe existence that it is in and that's\n\n37\n00:02:09.650 --> 00:02:13.960\nnormally in the form called documents and\nof course, fragments that are out there.\n\n38\n00:02:13.960 --> 00:02:17.380\nAnd we need to get that\ninto our SQL server.\n\n39\n00:02:17.380 --> 00:02:21.220\nAnd we actually have to know the ways and\nmeans on how to do that too.\n\n40\n00:02:21.220 --> 00:02:25.990\nAnd so, we're really gonna be focusing\nin on that in this particular episode.\n\n41\n00:02:25.990 --> 00:02:30.280\nAnd then also, we'll talk a little\nbit about indexing the data as well.\n\n42\n00:02:30.280 --> 00:02:35.110\nAnd that should help us to wrap everything\nup and see what we need to see.\n\n43\n00:02:35.110 --> 00:02:40.800\nSo let's start of with this idea of XML\ndata and what it can really help us to do.\n\n44\n00:02:40.800 --> 00:02:42.150\nAnd why we might see it used.\n\n45\n00:02:42.150 --> 00:02:44.810\nSo let's take a look\nmy machine right away.\n\n46\n00:02:44.810 --> 00:02:46.780\nAnd that way we'll we kinda\nget started in this way.\n\n47\n00:02:46.780 --> 00:02:50.360\nNow I'm simply gonna\nrun a SELECT query and\n\n48\n00:02:50.360 --> 00:02:54.510\nas a very simple SELECT query,\nremember I told you at some point,\n\n49\n00:02:54.510 --> 00:02:57.340\nprobably in the past if you have been\nwatching the entire series, at some point,\n\n50\n00:02:57.340 --> 00:03:00.960\nwe normally do not want to do this,\nwhich is select everything and\n\n51\n00:03:00.960 --> 00:03:03.750\ndisplay everything because\nthat's really meaningless.\n\n52\n00:03:03.750 --> 00:03:08.510\nIt's just too much information for us and\nremember that if our SQL server actually\n\n53\n00:03:08.510 --> 00:03:12.070\nbeing hit by a lot of queries running\nsomething like this is not really helpful.\n\n54\n00:03:12.070 --> 00:03:16.300\nIt really bogs the machine\ndown quite a bit here.\n\n55\n00:03:16.300 --> 00:03:20.160\nBut I'm simply going to run that, and the\nreason I wanted to run it, is to actually\n\n56\n00:03:20.160 --> 00:03:25.250\nlet you know that at times, you may\nfind yourself surprised by something,\n\n57\n00:03:25.250 --> 00:03:29.670\nwhich is, you look across all those\ndifferent columns, I'm gonna come to one,\n\n58\n00:03:29.670 --> 00:03:32.170\nand this one's actually\ncalled demographics here.\n\n59\n00:03:32.170 --> 00:03:35.250\nAnd let me zoom in, and\nyou can actually start seeing something.\n\n60\n00:03:35.250 --> 00:03:38.530\nAnd you'll actually start to\nnotice something like this.\n\n61\n00:03:38.530 --> 00:03:41.370\nInside of that single field of data for\n\n62\n00:03:41.370 --> 00:03:46.470\nme, I actually have XML data\nthat's also in here as well.\n\n63\n00:03:46.470 --> 00:03:47.180\nOkay?\n\n64\n00:03:47.180 --> 00:03:52.110\nNow, the way that we normally store\nour data inside XML databases,\n\n65\n00:03:52.110 --> 00:03:55.120\nright, Is that we do what we\ncall automatization of data.\n\n66\n00:03:55.120 --> 00:03:57.450\nWe automatize the data and that means,\n\n67\n00:03:57.450 --> 00:04:01.350\nwe try to ask you make sure that inside\nof those fields for columns, right?\n\n68\n00:04:01.350 --> 00:04:06.240\nThat we store the individual, the smallest\nmeaningful value that we can but\n\n69\n00:04:06.240 --> 00:04:10.900\nwith XML data depending on the way\nthat we have this information stored.\n\n70\n00:04:10.900 --> 00:04:15.790\nWell it can actually hold a lot more\ninformation than you and I can realize.\n\n71\n00:04:15.790 --> 00:04:18.760\nSo on this one though they've actually\ntried to follow that rule and\n\n72\n00:04:18.760 --> 00:04:20.130\nlet me show you what I'm talking about.\n\n73\n00:04:20.130 --> 00:04:22.100\nI'm going to zoom back out.\n\n74\n00:04:22.100 --> 00:04:24.660\nAnd I'm simply going to collect, collect?\n\n75\n00:04:24.660 --> 00:04:26.630\nClick on the first one here.\n\n76\n00:04:27.810 --> 00:04:28.440\nAnd here we go.\n\n77\n00:04:28.440 --> 00:04:32.680\nWe see the value that's\nactually stored here is really\n\n78\n00:04:32.680 --> 00:04:37.800\nthe TotalPurchaseYTD,\nand so far for this guy,\n\n79\n00:04:37.800 --> 00:04:41.930\nhe's actually purchased nothing so\nfar in the year to date according to this.\n\n80\n00:04:41.930 --> 00:04:44.820\nBut there's a lot of other\ninformation right here, and\n\n81\n00:04:44.820 --> 00:04:48.880\nthis turns into what we\ncall a single XML document.\n\n82\n00:04:48.880 --> 00:04:53.160\nIt has the header and\nthe schema information up here at the top.\n\n83\n00:04:53.160 --> 00:04:56.990\nAnd it also, of course, has its opening\nand closing header in that way and\n\n84\n00:04:56.990 --> 00:05:01.490\nalso wraps itself in this as well at\nthe end, closing everything off and\n\n85\n00:05:01.490 --> 00:05:03.800\nall of our data is actually\nin the middle here.\n\n86\n00:05:03.800 --> 00:05:06.720\nThat's what we call\nan attribute in that data.\n\n87\n00:05:06.720 --> 00:05:10.980\nNow, with the demographics\nthough specifically.\n\n88\n00:05:10.980 --> 00:05:16.005\nIf we were actually doing this in reality,\nas far as a real live database,\n\n89\n00:05:16.005 --> 00:05:20.626\nwe could have actually went ahead and\ncreated an actual survey, for\n\n90\n00:05:20.626 --> 00:05:23.725\nthe entirety of this\nparticular table here.\n\n91\n00:05:23.725 --> 00:05:27.296\nAnd we might have actually asked more and\nmore information.\n\n92\n00:05:27.296 --> 00:05:31.604\nAnd instead in this one field we could\nhave actually had an entire survey form\n\n93\n00:05:31.604 --> 00:05:35.740\nwhere we essentially loaded all\nthat data into this one field.\n\n94\n00:05:35.740 --> 00:05:39.650\nSo even though normally in relational\ndatabases we tend to have a single\n\n95\n00:05:39.650 --> 00:05:43.880\nvalue like it's shown here, it is possible\nthat somebody could have said look,\n\n96\n00:05:43.880 --> 00:05:46.700\nwe actually have 50 questions,\nhopefully not that many,\n\n97\n00:05:46.700 --> 00:05:49.070\nbut let's say it's 50 questions here.\n\n98\n00:05:49.070 --> 00:05:51.120\nAnd we wanted all of\nthat information stored.\n\n99\n00:05:51.120 --> 00:05:55.620\nBut we didn't want this particular\ntable to be 65 columns wide.\n\n100\n00:05:55.620 --> 00:05:58.710\nWe wanted it to actually be as\nwide as we have it right now.\n\n101\n00:05:58.710 --> 00:06:02.070\nWell, the thing we can do with the\ndemographics here is actually store all\n\n102\n00:06:02.070 --> 00:06:04.800\nthat data as a single column right here.\n\n103\n00:06:04.800 --> 00:06:07.850\nAnd then run through selects statements.\n\n104\n00:06:07.850 --> 00:06:09.332\nHelps us to retrieve that data as well.\n\n105\n00:06:09.332 --> 00:06:12.932\nSomething that we also call X query\nwill also help us to get that data out\n\n106\n00:06:12.932 --> 00:06:14.010\nof there.\n\n107\n00:06:14.010 --> 00:06:18.080\nSo there's no mistaking the very fact that\nyou'll primary end up seeing that certain\n\n108\n00:06:18.080 --> 00:06:21.990\nfields inside the database that\nyou're actually connecting to.\n\n109\n00:06:21.990 --> 00:06:26.260\nIs gonna have existing data\nalready that's in the XML format.\n\n110\n00:06:26.260 --> 00:06:29.680\nNow, this actually presupposes\nsomething for one of our shows here,\n\n111\n00:06:29.680 --> 00:06:31.880\nthat we're not actually\ntaking the time to do.\n\n112\n00:06:31.880 --> 00:06:35.380\nIt presupposes that you understand\nwhat XML data actually is.\n\n113\n00:06:35.380 --> 00:06:38.490\nSo if you don't, make sure you do\na little bit of a refresher on that.\n\n114\n00:06:38.490 --> 00:06:44.810\nTake a look online and just say, what are\nthe basics of XML or I need to learn XML.\n\n115\n00:06:44.810 --> 00:06:49.170\nAnd actually take a look at some of\nthose tutorials that are out there that\n\n116\n00:06:49.170 --> 00:06:50.930\nwill give you at least the basics.\n\n117\n00:06:50.930 --> 00:06:53.430\nWhat I'm just showing you\nhere is that it does exist.\n\n118\n00:06:53.430 --> 00:06:57.320\nNow, XML itself is its\nown data type as well.\n\n119\n00:06:57.320 --> 00:07:02.340\nIf I scroll over here to the left\nhand side in my object explorer,\n\n120\n00:07:02.340 --> 00:07:06.160\nand let me get into\nthe AdventureWorks2014 here.\n\n121\n00:07:07.570 --> 00:07:12.000\nAnd I take a look at the table that\nI selected, which is person.person.\n\n122\n00:07:12.000 --> 00:07:14.400\nI come down here and\nlet me see if I can find it.\n\n123\n00:07:14.400 --> 00:07:14.900\nThere it is.\n\n124\n00:07:16.777 --> 00:07:18.070\nSpan this one out.\n\n125\n00:07:20.130 --> 00:07:23.670\nI can scroll in here and\nI can actually see.\n\n126\n00:07:23.670 --> 00:07:28.870\nThat this one, the demographics as far\nas the data type says, XML, right here.\n\n127\n00:07:28.870 --> 00:07:33.210\nIt actually tells me that it is, it's\nan individual survey schema collective.\n\n128\n00:07:33.210 --> 00:07:35.990\nAnother words there is\nactually values that may\n\n129\n00:07:35.990 --> 00:07:39.940\nactually be in here that no\nbody else has put in so far.\n\n130\n00:07:39.940 --> 00:07:42.870\nSo we could actually have a form\nthat's on line that they could fill\n\n131\n00:07:42.870 --> 00:07:44.210\nin if they needed to.\n\n132\n00:07:44.210 --> 00:07:46.400\nSo there's actually a lot of\ninformation that we can put.\n\n133\n00:07:46.400 --> 00:07:48.459\nNow when I say a lot of information,\n\n134\n00:07:48.459 --> 00:07:51.286\nyou're probably not sure\nabout how much I mean.\n\n135\n00:07:51.286 --> 00:07:56.085\nWhat I mean is that this one field here\ncan actually store up to two gigabytes\n\n136\n00:07:56.085 --> 00:07:59.217\nof information for\nthat one individual record.\n\n137\n00:07:59.217 --> 00:08:02.871\nSo if you wanted to make this about\neverything and just store all of your data\n\n138\n00:08:02.871 --> 00:08:06.820\nin here, being out it actually use the XML\ndata type, it gives you that ability.\n\n139\n00:08:06.820 --> 00:08:08.180\nNow, does that mean you should do that?\n\n140\n00:08:08.180 --> 00:08:09.980\nNo, not necessarily.\n\n141\n00:08:09.980 --> 00:08:14.020\nBut it does give you that ability to\nstore a tremendous amount of data\n\n142\n00:08:14.020 --> 00:08:18.790\njust using x amount at this bigger point\nwhen you do have the ability to do so.\n\n143\n00:08:18.790 --> 00:08:22.780\nSo, notice that even though it's not\nin a table form, we can still use it as\n\n144\n00:08:22.780 --> 00:08:27.520\none of the values inside of our columns\nhere, and that's kind of a key aspect for\n\n145\n00:08:27.520 --> 00:08:31.610\nsomething that we may run into,\nwhich of course is doing XML.\n\n146\n00:08:31.610 --> 00:08:33.840\nNow, what does it also mean then?\n\n147\n00:08:33.840 --> 00:08:38.149\nWell, it also means that what I can\ndo is I can take tabular data, right?\n\n148\n00:08:39.220 --> 00:08:41.460\nData that exists in the form\nof table right now,\n\n149\n00:08:41.460 --> 00:08:44.270\nwhich is essentially your\nentire relational database.\n\n150\n00:08:44.270 --> 00:08:48.820\nAnd I can run a query against it and\nreturn XML data, okay?\n\n151\n00:08:48.820 --> 00:08:51.080\nSo this is something that we can do.\n\n152\n00:08:51.080 --> 00:08:55.580\nNow I want us to take a look at\nthe syntax of this, just briefly here.\n\n153\n00:08:55.580 --> 00:08:59.230\nSo that we can actually focus\nin on what's going to happen.\n\n154\n00:08:59.230 --> 00:09:04.170\nSo, from this point here, there is\nactually going to be for us, new keywords.\n\n155\n00:09:04.170 --> 00:09:04.840\nRight?\n\n156\n00:09:04.840 --> 00:09:08.610\nAnd the first one that we're gonna take\na look at is kind of the most basic one.\n\n157\n00:09:08.610 --> 00:09:12.730\nIf I just need the simple\nXML data to appear, and\n\n158\n00:09:12.730 --> 00:09:17.020\nI don't really need it in a form of\na document or even really a fragment.\n\n159\n00:09:17.020 --> 00:09:20.290\nBut I just need every single one\nto appear as a row of data like\n\n160\n00:09:20.290 --> 00:09:24.290\nI would normally return for\na regular table data, okay.\n\n161\n00:09:24.290 --> 00:09:28.460\nBut it actually is XML data instead,\nI can use this instead.\n\n162\n00:09:28.460 --> 00:09:33.332\nNotice that the Select and\nthe From Exactly like we actually normally\n\n163\n00:09:33.332 --> 00:09:38.540\nwould run it is not actually any\ndifferent here but the difference happens\n\n164\n00:09:38.540 --> 00:09:43.177\nto be right here at the end when I\nrun the XML or for XML raw instead.\n\n165\n00:09:43.177 --> 00:09:46.210\nWhen I do something like that I\nam telling hey give me the most\n\n166\n00:09:46.210 --> 00:09:48.829\nbasic raw format that is\nnot structured in any way.\n\n167\n00:09:48.829 --> 00:09:51.665\nThat looks like what regular\nXML data looks like, but\n\n168\n00:09:51.665 --> 00:09:56.098\nit essentially is just all of this stuff\nthat I have in a row, is what I have.\n\n169\n00:09:56.098 --> 00:09:59.180\nNow I'm gonna actually use this where\nclause here in a moment to limit that\n\n170\n00:09:59.180 --> 00:10:01.070\ndata down just a little bit more.\n\n171\n00:10:01.070 --> 00:10:04.770\nBut from this point here let\nme just go ahead from this and\n\n172\n00:10:04.770 --> 00:10:08.100\njust run this portion, and execute that.\n\n173\n00:10:08.100 --> 00:10:12.200\nAnd then let's take a look at our results\nhere and this should help us out.\n\n174\n00:10:12.200 --> 00:10:13.370\nIsn't that impressive, Daniel?\n\n175\n00:10:13.370 --> 00:10:15.300\nIt's a gigantic, look at that.\n\n176\n00:10:15.300 --> 00:10:16.545\n>> It's a big, fat hyperlink.\n\n177\n00:10:16.545 --> 00:10:19.440\n>> [LAUGHS] That's all it turns out to be.\n\n178\n00:10:19.440 --> 00:10:23.650\nWow, Ronnie, that was absolutely\njust kind of not impressive at all,\n\n179\n00:10:23.650 --> 00:10:28.550\nit really just crunched all the data\ninto one link, it really did.\n\n180\n00:10:28.550 --> 00:10:31.870\nIt took everything in that\ntable that I selected right.\n\n181\n00:10:31.870 --> 00:10:33.390\n>> But wait there's more right Ronny?\n\n182\n00:10:33.390 --> 00:10:34.680\n>> There is actually more and\n\n183\n00:10:34.680 --> 00:10:38.080\nif I click on this,\nthis is where all the data now appeared.\n\n184\n00:10:38.080 --> 00:10:39.790\nNow let me zoom out a little bit so\n\n185\n00:10:39.790 --> 00:10:43.390\nthat we can see all of the actual\nstuff and move this over so\n\n186\n00:10:43.390 --> 00:10:46.830\nwe can see it, now you actually\ntake a look and it's all the data.\n\n187\n00:10:46.830 --> 00:10:50.743\nNotice that they actually have what they\ncall row here at the very beginning but\n\n188\n00:10:50.743 --> 00:10:52.180\nit's nothing else.\n\n189\n00:10:52.180 --> 00:10:54.917\nIt took every single one\nof those fields right.\n\n190\n00:10:54.917 --> 00:10:57.830\nAnd essentially listed them out in a row.\n\n191\n00:10:57.830 --> 00:11:04.350\nSo it has of course the opening mark here,\nwhich is the greater than symbol.\n\n192\n00:11:04.350 --> 00:11:07.443\nAnd then every single\nline ends with a slash.\n\n193\n00:11:07.443 --> 00:11:10.060\nAnd of course, the closing line as well.\n\n194\n00:11:10.060 --> 00:11:13.840\nAnd notice that that's all the data in\nthe way that it appears, and it does,\n\n195\n00:11:13.840 --> 00:11:16.860\nit looks sort of like the way\nthat we would display rows and\n\n196\n00:11:16.860 --> 00:11:20.070\ncolumns when we actually do\nthe normal results, okay?\n\n197\n00:11:20.070 --> 00:11:22.931\nSo, even though it actually\ndisplayed it as a single link,\n\n198\n00:11:22.931 --> 00:11:26.492\nnotice that it really is, it's all\nthat data in this particular format.\n\n199\n00:11:26.492 --> 00:11:28.790\nAnd so, we can see that.\n\n200\n00:11:28.790 --> 00:11:32.320\nNow the problem that we have is that a lot\nof times this is not what we're looking\n\n201\n00:11:32.320 --> 00:11:37.720\nfor but at the most basic we at least know\nthat this is what can actually happen.\n\n202\n00:11:37.720 --> 00:11:42.020\nIs that we can take regular tabular data,\ntable data and\n\n203\n00:11:42.020 --> 00:11:47.620\nactually make sure that we can actually\nreport it as XML at the most basic.\n\n204\n00:11:47.620 --> 00:11:48.370\nOkay?\n\n205\n00:11:48.370 --> 00:11:51.720\nNow I wanna limit this down to one here.\n\n206\n00:11:51.720 --> 00:11:53.860\nSo I went ahead and made a condition.\n\n207\n00:11:53.860 --> 00:11:54.560\nOkay?\n\n208\n00:11:54.560 --> 00:11:59.420\nNow, you do need to pay attention\nto this as well right here, okay?\n\n209\n00:11:59.420 --> 00:12:01.180\nYou got to remember that this FOR\n\n210\n00:12:01.180 --> 00:12:05.570\nXML RAW has to actually go after\nany condition that you set.\n\n211\n00:12:05.570 --> 00:12:07.160\nIt must, okay.\n\n212\n00:12:07.160 --> 00:12:10.260\nSo if you don't have it, it'd actually\nwork perfectly fine at the end.\n\n213\n00:12:10.260 --> 00:12:13.010\nBut just make sure it actually\ncomes here at the very end here.\n\n214\n00:12:13.010 --> 00:12:17.950\nAnd so if I wanted to limit it down to\nthis particular business entity, 1999,\n\n215\n00:12:17.950 --> 00:12:19.640\nI can do that.\n\n216\n00:12:21.630 --> 00:12:23.610\nLet me, sorry, I selected too much there.\n\n217\n00:12:23.610 --> 00:12:25.710\nThat sounds like, what is that all about?\n\n218\n00:12:25.710 --> 00:12:26.430\nRun that again.\n\n219\n00:12:26.430 --> 00:12:26.930\nThere we go.\n\n220\n00:12:28.280 --> 00:12:32.540\nAnd once again,\nthe very impressive looking link there.\n\n221\n00:12:32.540 --> 00:12:33.570\nAnd now if I select it,\n\n222\n00:12:33.570 --> 00:12:36.770\nthere it is, it allows me to\nlimit it down to the same thing.\n\n223\n00:12:36.770 --> 00:12:39.670\nJust like I would if I was to\nuse a regular clause here.\n\n224\n00:12:39.670 --> 00:12:41.235\nInstead of actually having that for\n\n225\n00:12:41.235 --> 00:12:46.030\nXML.raw, it would normally just\nappear as a row of data for us.\n\n226\n00:12:46.030 --> 00:12:49.030\nSo it's as equivalent we get as to\nactually making it appear the way that we\n\n227\n00:12:49.030 --> 00:12:50.040\nwould think it would appear.\n\n228\n00:12:50.040 --> 00:12:53.665\n>> Now Ronnie, we've kinda\ncovered what we're doing, right?\n\n229\n00:12:53.665 --> 00:12:55.110\n>> Mm-hm.\n>> We're taking data either from\n\n230\n00:12:55.110 --> 00:13:00.010\nour tables and pushing it out as XML or\ntaking XML and we're bringing it in and\n\n231\n00:13:00.010 --> 00:13:04.060\ncreating data out of it for\nour SQL environment.\n\n232\n00:13:04.060 --> 00:13:06.780\nThe other question I guess that\ncomes right up to my mind is why?\n\n233\n00:13:06.780 --> 00:13:08.590\nWhat's the advantage of that?\n\n234\n00:13:08.590 --> 00:13:10.430\nYou kinda hinted to at least one of those,\n\n235\n00:13:10.430 --> 00:13:12.820\nwhich was that obviously\nit's a very large format.\n\n236\n00:13:12.820 --> 00:13:16.560\nIt can hold two gigs worth of data in XML.\n\n237\n00:13:16.560 --> 00:13:17.669\nThat's very nice.\n\n238\n00:13:17.669 --> 00:13:19.925\nBut is there any other reason that\nwe would wanna do it this way?\n\n239\n00:13:19.925 --> 00:13:22.521\n>> Well, the reason why we\nwould is because normally,\n\n240\n00:13:22.521 --> 00:13:25.530\nwhen we actually do connect to\ndifferent systems that you and\n\n241\n00:13:25.530 --> 00:13:28.830\nI may not be as familiar with\nrather than like a SQL database.\n\n242\n00:13:28.830 --> 00:13:33.380\nWe may find out something that the data\nactually exists in that particular\n\n243\n00:13:33.380 --> 00:13:35.140\ndatabase in the XML format and\n\n244\n00:13:35.140 --> 00:13:39.580\nthat's exactly what they need to make it\nrun whatever product that they're running.\n\n245\n00:13:39.580 --> 00:13:41.470\nSo if that ends up happening and\n\n246\n00:13:41.470 --> 00:13:44.810\nyou do need to convert this to\nthe XML data, well, first and\n\n247\n00:13:44.810 --> 00:13:48.980\nforemost you have to determine whether or\nnot this is the acceptable format, right?\n\n248\n00:13:48.980 --> 00:13:50.340\nSo if it's raw, in other words I say,\n\n249\n00:13:50.340 --> 00:13:53.950\nlook, I just need the raw XML\ndata this is how you do it.\n\n250\n00:13:53.950 --> 00:13:57.270\nBut there's a lot of times though what\nwill end up happening is that they'll say,\n\n251\n00:13:57.270 --> 00:13:59.600\nI need it structured in some way.\n\n252\n00:13:59.600 --> 00:14:05.229\nWell, the good thing is SQL actually has\nmade a tremendous amount of support for\n\n253\n00:14:05.229 --> 00:14:09.779\ngiving us XML data in the way that\nwe actually can do this as well.\n\n254\n00:14:09.779 --> 00:14:14.612\nAnd so the next one here Is to now make\nsure that every value is displayed as\n\n255\n00:14:14.612 --> 00:14:16.590\nan attribute instead.\n\n256\n00:14:16.590 --> 00:14:19.038\nSo I want you to remember\nthe result that we just saw.\n\n257\n00:14:19.038 --> 00:14:21.651\nEssentially all those rows individually.\n\n258\n00:14:21.651 --> 00:14:26.580\nAnd now this time, the only thing I've\nactually changed here at the end,\n\n259\n00:14:26.580 --> 00:14:29.770\nis now I have the 4XML AUTO instead.\n\n260\n00:14:29.770 --> 00:14:33.860\nAUTO says go ahead and put automatically\nwhat we normally would expect\n\n261\n00:14:33.860 --> 00:14:37.350\nwhich is actually in terms\nof attributes instead here.\n\n262\n00:14:37.350 --> 00:14:41.430\nNow you may not be familiar with\nthis idea of attributes but\n\n263\n00:14:41.430 --> 00:14:44.610\nlet's see what the difference\nis when you take a look, and\n\n264\n00:14:44.610 --> 00:14:47.540\nI'll bet you'll be able to\nspot it right away, okay?\n\n265\n00:14:47.540 --> 00:14:48.740\nSo now run that.\n\n266\n00:14:48.740 --> 00:14:53.920\nAnd the result again looks unimaginably\nthe same is what it actually\n\n267\n00:14:53.920 --> 00:14:59.020\nlooks like but if I now click on that\nnow notice that they've actually added\n\n268\n00:14:59.020 --> 00:15:04.810\nin something else here which is a normal\nlittle prefix that can also be there.\n\n269\n00:15:04.810 --> 00:15:08.680\nAnd then at the end they've also added\nin a little bit more information.\n\n270\n00:15:08.680 --> 00:15:10.320\nNow you\u007f're probably saying\nwell what is that about,\n\n271\n00:15:10.320 --> 00:15:15.980\nwell now, we can refer to each of these\nrows by using this attribute instead.\n\n272\n00:15:15.980 --> 00:15:19.360\nSo instead of the way that it had\nwhere we had the kind of look for\n\n273\n00:15:19.360 --> 00:15:22.600\nevery particular business entity,\nif I wanna pull up everything,\n\n274\n00:15:22.600 --> 00:15:25.770\nI can use this type of XML\nhere to now have an actual\n\n275\n00:15:25.770 --> 00:15:29.030\nattribute which they have assigned as\na P here, to make everything work.\n\n276\n00:15:29.030 --> 00:15:30.400\nNow, that's not a big deal,\n\n277\n00:15:30.400 --> 00:15:34.660\nit really isn't in the scheme of things,\nbut if this is what they need,\n\n278\n00:15:34.660 --> 00:15:39.550\nwhich is all of my data in the form\nof attributes, this is the way to go.\n\n279\n00:15:39.550 --> 00:15:42.180\nBut most of us are actually\nused to seeing it look\n\n280\n00:15:42.180 --> 00:15:44.160\na little bit different as well, okay?\n\n281\n00:15:44.160 --> 00:15:47.161\nNow, that's not as impressive\nbecause it's actually only one.\n\n282\n00:15:47.161 --> 00:15:51.666\nLet me show you here,\nlet me take out this one right here again.\n\n283\n00:15:51.666 --> 00:15:52.323\nAnd then,\n\n284\n00:15:54.460 --> 00:15:57.721\nIt always looks neat to me when the whole\nscreen fills up with data instead.\n\n285\n00:15:57.721 --> 00:16:01.217\nSo now notice that everything is\nactually assigned the exact same.\n\n286\n00:16:01.217 --> 00:16:03.591\nSo that little p doesn't\nmean much to you and\n\n287\n00:16:03.591 --> 00:16:06.790\nme cuz we're not actually\ndoing a lot of XML stuff.\n\n288\n00:16:06.790 --> 00:16:11.340\nBut it really is helpful in terms of being\nable to connect to the data the way that\n\n289\n00:16:11.340 --> 00:16:15.340\nit needs to which is adding in an\nattribute value instead of actually having\n\n290\n00:16:15.340 --> 00:16:17.480\nto refer to every individual row.\n\n291\n00:16:17.480 --> 00:16:18.880\nI can refer to your entire attribute and\n\n292\n00:16:18.880 --> 00:16:23.210\npull all of those attributes\nover as I need to, okay.\n\n293\n00:16:23.210 --> 00:16:27.630\nNow the other one though is probably\nwhat we're more used to seeing, which is\n\n294\n00:16:27.630 --> 00:16:32.760\nthe idea of actually displaying all of\nour values instead of it's attributes, or\n\n295\n00:16:32.760 --> 00:16:34.729\nas the individual row in that way\n\n296\n00:16:35.940 --> 00:16:40.730\nis to instead display it with what\nwe call a node element instead.\n\n297\n00:16:41.890 --> 00:16:44.780\nNow here you'll see the most\nvisible difference, and\n\n298\n00:16:44.780 --> 00:16:50.900\nthe only thing I added in here was a comma\nand also the word elements as well.\n\n299\n00:16:50.900 --> 00:16:54.570\nAnd so if they tell you that this\nneeds to be a fully formatted\n\n300\n00:16:54.570 --> 00:16:58.000\nxml document with elements and everything.\n\n301\n00:16:58.000 --> 00:17:03.300\nWell you simply do the same thing and\nthen I can run execute here.\n\n302\n00:17:03.300 --> 00:17:07.655\nAnd now when we take a look at the data\nthis actually looks more like it.\n\n303\n00:17:07.655 --> 00:17:10.980\nOkay, this is what we're normally\nused to seeing in the way that\n\n304\n00:17:10.980 --> 00:17:12.350\nthe data is looking.\n\n305\n00:17:12.350 --> 00:17:17.290\nNow notice instead of listing everything\non one row like we did before, right.\n\n306\n00:17:17.290 --> 00:17:22.450\nLook at every single value that I have,\nnow has its own set of tags, okay?\n\n307\n00:17:22.450 --> 00:17:29.340\nSo, every value that was actually in, that\none, now is also tagged as an element,\n\n308\n00:17:29.340 --> 00:17:33.990\nokay, as an attribute,\nan element, inside of XML.\n\n309\n00:17:33.990 --> 00:17:38.290\nNotice what's actually happening here\nis that the formatting of the data\n\n310\n00:17:38.290 --> 00:17:42.200\nAs far as xml goes, and\nits proper xml is now taking place.\n\n311\n00:17:42.200 --> 00:17:45.790\nIt took what was originally\nrelational database data,\n\n312\n00:17:45.790 --> 00:17:48.280\nwhich was stored in rows and columns, and\n\n313\n00:17:48.280 --> 00:17:54.210\nwas able to actually string it out\nin a series of data on a single row.\n\n314\n00:17:54.210 --> 00:17:57.900\nThen we added in an attribute\nto it at the end here.\n\n315\n00:17:57.900 --> 00:18:03.200\nAnd then along with that single attribute,\nwe started also adding in additional tags\n\n316\n00:18:03.200 --> 00:18:06.560\nfor every bit of\nthe information that goes in, so\n\n317\n00:18:06.560 --> 00:18:10.400\nthat means all these elements\nare also searchable by using what?\n\n318\n00:18:10.400 --> 00:18:12.900\nThese tags that are also\nright here as well.\n\n319\n00:18:12.900 --> 00:18:16.750\nSo it actually starts to do this and\nit can take all of our data and do that.\n\n320\n00:18:16.750 --> 00:18:21.040\nSo instead of what we saw here,\nwhere everything was actually just one,\n\n321\n00:18:21.040 --> 00:18:26.080\nnow when we start to take a look at\nall those values it looks a little bit\n\n322\n00:18:26.080 --> 00:18:31.780\nmore impressive when we now start\nseeing everything in that table.\n\n323\n00:18:31.780 --> 00:18:35.580\nAnd now notice I didn't have to actually\ntype all this stuff out for everybody.\n\n324\n00:18:35.580 --> 00:18:38.880\nNotice that it is in this\nparticular format and so\n\n325\n00:18:38.880 --> 00:18:43.850\nnow whatever application that says I\nneed the XML data in its proper format,\n\n326\n00:18:43.850 --> 00:18:47.950\nor its elements, or its notes here, this\nis actually what we are starting to see.\n\n327\n00:18:47.950 --> 00:18:52.440\nAs everything is gonna be displayed this\nway, every single element and every single\n\n328\n00:18:52.440 --> 00:18:57.900\nrecord now has its own full display, so\nwe can take regular relational data and\n\n329\n00:18:57.900 --> 00:19:04.170\nturning into a fully formatted\nXML document here too.\n\n330\n00:19:04.170 --> 00:19:07.840\nThis is actually one of the grand scheme\nof things, because you never know what\n\n331\n00:19:07.840 --> 00:19:11.670\nthe data is actually gonna be request to w\nand what format is gonna be requested in.\n\n332\n00:19:11.670 --> 00:19:14.660\nXML data’s still one of those that\nyou actually end up seeing and\n\n333\n00:19:14.660 --> 00:19:18.080\nis one of the heavily\ntested areas on the exam.\n\n334\n00:19:18.080 --> 00:19:20.630\nSo be ready to actually,\nat least take a look and\n\n335\n00:19:20.630 --> 00:19:23.450\nsay, here's what it looks\nlike in the raw format.\n\n336\n00:19:23.450 --> 00:19:26.630\nHere's the actual attribute way, and\n\n337\n00:19:26.630 --> 00:19:28.430\nhere's what it looks\nlike with the elements.\n\n338\n00:19:28.430 --> 00:19:31.370\nBe able to identify which one\nthat they're asking you for.\n\n339\n00:19:31.370 --> 00:19:34.020\nSo, notice this is not really difficult.\n\n340\n00:19:34.020 --> 00:19:37.190\nThe simple thing that we did\nhere was actually just add in\n\n341\n00:19:37.190 --> 00:19:39.630\none more line to everything\nthat we've been doing.\n\n342\n00:19:39.630 --> 00:19:42.080\nSo it stresses at least the fundamentals.\n\n343\n00:19:42.080 --> 00:19:45.230\nAnd then all we are really doing is\nbuilding upon the fundamentals that you\n\n344\n00:19:45.230 --> 00:19:48.980\nand I already know how to\ndo in each one of these.\n\n345\n00:19:48.980 --> 00:19:54.540\nSo raw, everything is just displayed as\na row and of course with the attribute,\n\n346\n00:19:54.540 --> 00:19:58.770\nwe added in that little p which to you and\nme, what's the big deal?\n\n347\n00:19:58.770 --> 00:20:00.380\nIt's a big deal.\n\n348\n00:20:00.380 --> 00:20:04.120\nBecause that prepares it to be able to\nactually add in all those elements that\n\n349\n00:20:04.120 --> 00:20:07.580\neverything that you do, there can now\nactually be added in, and each one of\n\n350\n00:20:07.580 --> 00:20:12.895\nthose formed it's own set of tacks without\nme having to type in a single one.\n\n351\n00:20:12.895 --> 00:20:17.255\nI'm essentially creating an XML\ndocument without me knowing XML.\n\n352\n00:20:17.255 --> 00:20:19.892\n>> You kinda let the computer do\nall the heavy lifting for you and\n\n353\n00:20:19.892 --> 00:20:21.555\nthat's what we like, right Ronnie?\n\n354\n00:20:21.555 --> 00:20:23.369\nI don't know about you but I enjoy,\n\n355\n00:20:23.369 --> 00:20:27.317\nespecially since like yourself I'm not\nthe greatest XML XML guru out there.\n\n356\n00:20:27.317 --> 00:20:32.447\nBut like you said we would like to have\ninteroperability with different systems.\n\n357\n00:20:32.447 --> 00:20:35.387\nMaybe somebody out there\nis a great XML formatter.\n\n358\n00:20:35.387 --> 00:20:38.367\nThey work with it daily and\nyou guys are starting to work together.\n\n359\n00:20:38.367 --> 00:20:41.647\nYou want your data to actually converge.\n\n360\n00:20:41.647 --> 00:20:44.927\nI would like you to work with my data and\nI'll work with yours.\n\n361\n00:20:44.927 --> 00:20:47.957\nWe'll get those things together and have\na great time, but if you don't know how to\n\n362\n00:20:47.957 --> 00:20:51.680\ndo this you won't be able to do that,and\nthis is actually not too difficult.\n\n363\n00:20:51.680 --> 00:20:54.590\nIt's just a couple commands, you throw\nit out there and it's easy peasy,\n\n364\n00:20:54.590 --> 00:20:55.630\nyou're ready to go.\n\n365\n00:20:55.630 --> 00:20:57.130\nRonnie, got any other\ntricks up your sleeve?\n\n366\n00:20:57.130 --> 00:21:00.520\n>> We do, we have to point out just\na couple of other things that we have\n\n367\n00:21:00.520 --> 00:21:04.630\nto get to, but you keep probably saying,\ncuz I just realized, I kept saying, well,\n\n368\n00:21:04.630 --> 00:21:05.180\nthere's a little p.\n\n369\n00:21:05.180 --> 00:21:06.300\nWhat does it matter?\n\n370\n00:21:06.300 --> 00:21:09.000\nWell, let me show you where\nthat p comes from cuz I\n\n371\n00:21:09.000 --> 00:21:11.470\njust kinda realized I talked over it,\nand I didn't say anything about it.\n\n372\n00:21:11.470 --> 00:21:13.200\nSo let me show you here, okay.\n\n373\n00:21:13.200 --> 00:21:16.510\nSo when we started adding in that\nparticular node element here,\n\n374\n00:21:18.980 --> 00:21:22.170\nthat was not the zoom in,\nthat was apparently the other way.\n\n375\n00:21:22.170 --> 00:21:23.330\nIt was like go away.\n\n376\n00:21:23.330 --> 00:21:27.890\nOkay, so let's take a look, notice that\neach one of these columns here that\n\n377\n00:21:27.890 --> 00:21:33.290\nI selected, let me see if I can pull that\nback over, okay, has a p at the beginning.\n\n378\n00:21:33.290 --> 00:21:37.080\nSo it's actually saying, look, Ronnie,\nyou chose to use an alias instead.\n\n379\n00:21:37.080 --> 00:21:40.880\nBut if I didn't, it would've\nactually showed up as person.person\n\n380\n00:21:40.880 --> 00:21:44.200\nright at the beginning of every\nsingle one of those lines.\n\n381\n00:21:44.200 --> 00:21:46.060\nSo that's where that p is coming from,\n\n382\n00:21:46.060 --> 00:21:49.380\nit's actually taking it from\nthe table name is what's happening.\n\n383\n00:21:49.380 --> 00:21:53.110\nSo that's what happens when I\nget a little bit more excited,\n\n384\n00:21:53.110 --> 00:21:54.740\nyou're like what the heck is the p about?\n\n385\n00:21:54.740 --> 00:21:55.520\nWhy couldn't it have been a q?\n\n386\n00:21:55.520 --> 00:21:57.350\nWhy couldn't it have been a z?\n\n387\n00:21:57.350 --> 00:22:01.750\nWell that's why is because it's actually\npulling it from the actual value right\n\n388\n00:22:01.750 --> 00:22:05.760\nhere, which is why you see the p\nin front of all these values, and\n\n389\n00:22:05.760 --> 00:22:08.910\nwas able to actually take that and\ndetermine it that way.\n\n390\n00:22:08.910 --> 00:22:12.730\nNow some of the other,\nlet me see if I can zoom out here,\n\n391\n00:22:12.730 --> 00:22:17.270\nsome of the other options is that there's\nalso, of course, what we call a schema and\n\n392\n00:22:17.270 --> 00:22:21.030\na table name that we actually\nhave to worry about as well.\n\n393\n00:22:21.030 --> 00:22:24.130\nNow, when we talk about the schema and\nthe table name,\n\n394\n00:22:24.130 --> 00:22:29.360\nwhat we're really referring\nto is pretty much right here.\n\n395\n00:22:29.360 --> 00:22:35.010\nSo remember that this first instance of\nthe word person, that is the schema, okay?\n\n396\n00:22:35.010 --> 00:22:38.020\nSo the full schema actually begins, and\nif you see where I hovered over that,\n\n397\n00:22:38.020 --> 00:22:39.250\nit says schema,\n\n398\n00:22:39.250 --> 00:22:44.040\nsays Adventure Works 2014 dot person, well\nthat's what it's actually saying there.\n\n399\n00:22:44.040 --> 00:22:45.940\nAnd now if I actually do\nlike the whole thing,\n\n400\n00:22:45.940 --> 00:22:50.570\nlet me see if it will let me highlight the\nwhole thing like this, it actually, okay,\n\n401\n00:22:50.570 --> 00:22:52.470\nyeah, it did show it, okay?\n\n402\n00:22:52.470 --> 00:22:57.700\nSo the entire schema, let's see come\non it was doing it just a moment ago.\n\n403\n00:22:57.700 --> 00:22:58.375\nNow it's not gonna do it.\n\n404\n00:22:58.375 --> 00:22:59.690\n>> [LAUGH]\n>> So, why would it.\n\n405\n00:22:59.690 --> 00:23:03.280\nIt actually said table, adventure\nworks 2014 dot person, dot person.\n\n406\n00:23:03.280 --> 00:23:07.590\n>> Go back and then like pause that\nlittle section, you'll see it was there.\n\n407\n00:23:07.590 --> 00:23:09.786\n[LAUGH]\n>> See now I was able to do it again, so\n\n408\n00:23:09.786 --> 00:23:12.287\nhad to hover over the actual table\n>> You didn't ask\n\n409\n00:23:12.287 --> 00:23:12.958\nnicely\n>> I know,\n\n410\n00:23:12.958 --> 00:23:15.920\njust go figure\n>> But you actually see the entire schema\n\n411\n00:23:15.920 --> 00:23:19.200\nname right there when you\ntake a look at everything.\n\n412\n00:23:19.200 --> 00:23:23.240\nWell, one of the things that we want to\ndo to make it easier for people, right,\n\n413\n00:23:23.240 --> 00:23:24.490\ninstead of having that you try and\n\n414\n00:23:24.490 --> 00:23:30.650\nread through that is we essentially can\nchange that entire schema name as well.\n\n415\n00:23:30.650 --> 00:23:35.130\nAnd this is where we add in a new element\nwhich is right here, which is FOR\n\n416\n00:23:35.130 --> 00:23:41.320\nXML PATH, and then I'm gonna actually\nshorten everything up into person, okay.\n\n417\n00:23:41.320 --> 00:23:44.909\nSo I'm actually saying,\ntake away the entire schema and\n\n418\n00:23:44.909 --> 00:23:49.033\nlet me get rid of the single Limited\nentry there for just a moment.\n\n419\n00:23:49.033 --> 00:23:51.315\nAnd now when I run this and I execute it.\n\n420\n00:23:53.261 --> 00:23:55.444\nI take a look at the values down here.\n\n421\n00:23:58.440 --> 00:24:03.085\nAnd now we'll see, so notice now,\nI actually have it showing up right\n\n422\n00:24:03.085 --> 00:24:07.440\nhere as a single root node\nthat is called Person instead.\n\n423\n00:24:07.440 --> 00:24:11.580\nIf I didn't have this, it would\nactually say the entire schema name for\n\n424\n00:24:11.580 --> 00:24:13.661\nevery single one of these instead.\n\n425\n00:24:13.661 --> 00:24:15.460\nNow, is it anything really big?\n\n426\n00:24:15.460 --> 00:24:16.098\nNo.\n\n427\n00:24:16.098 --> 00:24:18.640\nBut does it help out when people\nare actually trying to figure out where\n\n428\n00:24:18.640 --> 00:24:19.470\neverything is going?\n\n429\n00:24:19.470 --> 00:24:20.220\nYes.\n\n430\n00:24:20.220 --> 00:24:21.540\nBy just doing something like this,\n\n431\n00:24:21.540 --> 00:24:25.645\nI'm actually declaring that on each one of\nthese that this is actually part of that,\n\n432\n00:24:25.645 --> 00:24:28.120\nand so\nthe entire table has now been truncated.\n\n433\n00:24:28.120 --> 00:24:31.850\nNotice now that all the P's are missing,\nright here at the beginning and\n\n434\n00:24:31.850 --> 00:24:36.730\nhas now she's just flooded it out here,\nspelled it out a little bit better for us.\n\n435\n00:24:36.730 --> 00:24:39.430\nBy adding in that extra path entry, so\n\n436\n00:24:39.430 --> 00:24:43.010\nhere it was with just the attribute\nhere and the elements.\n\n437\n00:24:43.010 --> 00:24:45.550\nThere's that little lowercase p.\n\n438\n00:24:45.550 --> 00:24:49.320\nAnd now, when I actually created that\npath, I'm actually saying take the entire\n\n439\n00:24:49.320 --> 00:24:54.630\nschema and just truncate it as one word\ninstead, and that way we can also do that.\n\n440\n00:24:54.630 --> 00:24:58.410\nAnd now this is starting to look a little\nbit more formalized to the point where\n\n441\n00:24:58.410 --> 00:24:59.720\nsomebody could actually follow it,\n\n442\n00:24:59.720 --> 00:25:02.780\neven if they didn't know\nmuch about the data itself.\n\n443\n00:25:02.780 --> 00:25:07.080\nSo you can add in some extra elements\nthat essentially continue to format\n\n444\n00:25:07.080 --> 00:25:10.590\nall the data in the proper\nway that needs to.\n\n445\n00:25:10.590 --> 00:25:16.050\nSo this particular one works\nlike an alias for the actual\n\n446\n00:25:16.050 --> 00:25:21.090\npath here in which they're actually\nto follow when they start doing this.\n\n447\n00:25:21.090 --> 00:25:26.660\nNow of course, there are times though you\nwant a combination of this, okay, instead.\n\n448\n00:25:26.660 --> 00:25:28.270\nYou wanna be able to combine that idea,\n\n449\n00:25:28.270 --> 00:25:31.870\nthe attribute as well as\nthe node element together.\n\n450\n00:25:31.870 --> 00:25:35.790\nAnd this is where it gets a little\nbit tricky in terms of XML data.\n\n451\n00:25:35.790 --> 00:25:38.930\nNotice the way that we do it\nis by creating an alias, but\n\n452\n00:25:38.930 --> 00:25:41.970\nyou have to actually take\na look at the alias here, okay?\n\n453\n00:25:41.970 --> 00:25:45.940\nAnytime you use an ampersand\nat this point, you can now\n\n454\n00:25:45.940 --> 00:25:50.980\ncreate this as being an alias that says\nyou're combining the attribute and\n\n455\n00:25:50.980 --> 00:25:53.740\nthe node element together, okay?\n\n456\n00:25:53.740 --> 00:25:55.940\nSo that's what we're\nactually going to do here.\n\n457\n00:25:57.110 --> 00:26:01.711\nNow, you kind of again, have to remember\nthat you're comparing this against\n\n458\n00:26:01.711 --> 00:26:04.788\nall those other values that\nwe've also had before.\n\n459\n00:26:04.788 --> 00:26:07.797\nSo let's go and execute this and\n\n460\n00:26:07.797 --> 00:26:13.550\nthen I'm gonna run this and\nnow when I take a look at it.\n\n461\n00:26:13.550 --> 00:26:17.480\nNow notice that what we've also added up\nhere at the top instead of actually doing\n\n462\n00:26:17.480 --> 00:26:22.040\nit for every single one here is we\ncombine that one element now, right?\n\n463\n00:26:22.040 --> 00:26:23.190\nOr actually two elements, right?\n\n464\n00:26:23.190 --> 00:26:28.430\nSo this is my attribute which is the BID\nAdd also person up here at the root node.\n\n465\n00:26:28.430 --> 00:26:32.335\nAnd that's actually very important for\nus as we take a look here.\n\n466\n00:26:32.335 --> 00:26:35.100\nDoing that single value\nisn't really impressive.\n\n467\n00:26:35.100 --> 00:26:38.630\nIt's when you see where it can actually\ndo [INAUDIBLE] all these nodes as well.\n\n468\n00:26:41.250 --> 00:26:44.910\nAnd now we execute it and we run and\nwe take a look at it again.\n\n469\n00:26:44.910 --> 00:26:48.870\nAnd so now it actually adds in but\nnotice the different element now, okay.\n\n470\n00:26:48.870 --> 00:26:52.040\nWith that thicker business\nidentity that we had,\n\n471\n00:26:52.040 --> 00:26:54.330\nthat business entity identity number.\n\n472\n00:26:54.330 --> 00:26:58.540\nNotice it separates this out and so\nnow you're starting to see more and\n\n473\n00:26:58.540 --> 00:27:03.350\nmore where I've got a better and\nmore properly formatted type of\n\n474\n00:27:03.350 --> 00:27:08.190\nXML document that's coming along for\neverything that we actually need here\n\n475\n00:27:08.190 --> 00:27:12.880\nto give the data everything that somebody\nelse would normally request here.\n\n476\n00:27:12.880 --> 00:27:14.560\nWe've got attributes, we've got nodes,\n\n477\n00:27:14.560 --> 00:27:20.060\nwe've got the raw data now actually being\nable to be pulled out, you name it.\n\n478\n00:27:20.060 --> 00:27:23.700\nBeing able to take relational data and\nchanging it into XML, not so\n\n479\n00:27:23.700 --> 00:27:26.070\ndifficult when it's actually requested.\n\n480\n00:27:26.070 --> 00:27:27.920\nYou now know the secrets, right?\n\n481\n00:27:27.920 --> 00:27:30.810\nThe idea of the for XML raw, okay,\n\n482\n00:27:30.810 --> 00:27:35.580\nthe for XML auto and then of course auto\ncommon elements is the other other one.\n\n483\n00:27:35.580 --> 00:27:37.930\nAnd then lastly right here we also, and\n\n484\n00:27:37.930 --> 00:27:42.550\nthis is the tricky one cuz it's not\nactually done down here in the bottom.\n\n485\n00:27:42.550 --> 00:27:44.640\nIt's also right here as well.\n\n486\n00:27:44.640 --> 00:27:48.950\nAnd then we also ran the for XML path\nthat essentially gives us an alias for\n\n487\n00:27:48.950 --> 00:27:51.600\nour entire schema name instead, and\n\n488\n00:27:51.600 --> 00:27:55.150\nthat makes us actually being able\nto format everything properly.\n\n489\n00:27:55.150 --> 00:27:58.060\nSomebody working with XML\ncan take this data now and\n\n490\n00:27:58.060 --> 00:28:00.310\nbe able to actually work\nwith it as it's native.\n\n491\n00:28:00.310 --> 00:28:01.740\nVery easily done.\n\n492\n00:28:01.740 --> 00:28:02.620\n>> Awesome stuff, Ronnie.\n\n493\n00:28:02.620 --> 00:28:06.590\nSo, well, even if you're not\nan XML guru as such ourselves.\n\n494\n00:28:06.590 --> 00:28:10.860\nYou can at least work with XML data\ninside of your SQL environment.\n\n495\n00:28:10.860 --> 00:28:13.183\nNow, Ronnie, I know we actually\ngot a little bit more to go, and\n\n496\n00:28:13.183 --> 00:28:15.306\nI say a little bit,\nprobably a whole other show's worth.\n\n497\n00:28:15.306 --> 00:28:20.060\nSo we will have to do that very thing and\ncreate a part two for\n\n498\n00:28:20.060 --> 00:28:25.607\nour good viewers here to continue\nin their education of XML and SQL.\n\n499\n00:28:25.607 --> 00:28:29.560\nThat being said, we do thank you for\nshowing us what we've learned thus far.\n\n500\n00:28:29.560 --> 00:28:31.100\nAnd we look forward to\nseeing you in part 2.\n\n501\n00:28:31.100 --> 00:28:32.570\nWe look forward to seeing\nyou guys there as well.\n\n502\n00:28:32.570 --> 00:28:34.910\nHopefully you guys have\nenjoyed this episode so far.\n\n503\n00:28:34.910 --> 00:28:36.450\nBut it's time to sign off.\n\n504\n00:28:36.450 --> 00:28:38.820\nFor IT Pro TV I've been\nyour host Daniel Lowrie.\n\n505\n00:28:38.820 --> 00:28:39.570\n>> And I'm Ronnie Wong.\n\n506\n00:28:39.570 --> 00:28:40.858\n>> And we'll see you next time.\n\n507\n00:28:40.858 --> 00:28:46.097\n[MUSIC]\n\n",
          "vimeoId": "164635226"
        },
        {
          "description": "In this episode, Daniel and Ronnie continue their look at querying and managing XML data in SQL 2014. Here they introduce you to the practice of \"shredding\" XML into tables. Finally, they explain the process of XML indexing; creating and using both primary and secondary indexes.",
          "length": "1144",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-9-2-query_and_manage_xml_data_pt2-042616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-9-2-query_and_manage_xml_data_pt2-042616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-9-2-query_and_manage_xml_data_pt2-042616-1-sm.jpg",
          "title": "Query and Manage XML Data Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC].\n\n2\n00:00:11.706 --> 00:00:12.290\n>> All right.\n\n3\n00:00:12.290 --> 00:00:13.420\nGreetings everyone.\n\n4\n00:00:13.420 --> 00:00:16.010\nAnd welcome to another\ngreat episode of IT PROTV.\n\n5\n00:00:16.010 --> 00:00:17.680\nI'm your host Daniel Lowrie.\n\n6\n00:00:17.680 --> 00:00:20.600\nAnd in today's episode we\nare continuing forward with our\n\n7\n00:00:20.600 --> 00:00:23.670\nQuerying the Microsoft SQL Server 2014.\n\n8\n00:00:23.670 --> 00:00:27.660\nJoining back in the studio again today\nto help us out with that very endeavor\n\n9\n00:00:27.660 --> 00:00:29.080\nis our good friend Mr. Ronnie Wong.\n\n10\n00:00:29.080 --> 00:00:31.040\nRonnie, welcome back and how's it going?\n\n11\n00:00:31.040 --> 00:00:35.840\n>> It is going great today as we continue\non with more Microsoft SQL Server 2014.\n\n12\n00:00:35.840 --> 00:00:41.480\nWe're actually in a part two of\ntaking a look at XML data and what\n\n13\n00:00:41.480 --> 00:00:46.070\nwe want to do though in this particular\npart is kind of change direction.\n\n14\n00:00:46.070 --> 00:00:49.180\nEarly in our part one of the series, so\nmake sure you check that one out if you\n\n15\n00:00:49.180 --> 00:00:51.270\nhaven't actually watched it and\ndecided to skip on over.\n\n16\n00:00:51.270 --> 00:00:53.930\nI don't know why you would do that,\nbut you can do that if you want to.\n\n17\n00:00:53.930 --> 00:00:58.040\nIf you decided to skip on over that,\nin that very first part,\n\n18\n00:00:58.040 --> 00:01:01.770\nwe took our relational database data,\ntabular data.\n\n19\n00:01:01.770 --> 00:01:05.230\nStuff that exists in the tables and\nthe way they want to, and\n\n20\n00:01:05.230 --> 00:01:06.910\nshowed you how you can\nactually extract it.\n\n21\n00:01:06.910 --> 00:01:10.800\nAnd showed you how the output\ncould become XML data, and\n\n22\n00:01:10.800 --> 00:01:13.800\nthis gives us then incredible flexibility,\nright?\n\n23\n00:01:13.800 --> 00:01:17.910\nTo be able to take data that exists in one\nformat and report it into another one,\n\n24\n00:01:17.910 --> 00:01:20.540\nthat way we can also make\nsure that we get that data\n\n25\n00:01:20.540 --> 00:01:24.540\nto whatever application that needs\nthe XML data, be able to pull that out.\n\n26\n00:01:24.540 --> 00:01:28.970\nThe other thing though that we can also\ndo is, something a little bit fancier.\n\n27\n00:01:28.970 --> 00:01:31.960\nAnd I thought this was a made up term\nthe first time I heard about it, but\n\n28\n00:01:31.960 --> 00:01:32.880\nit really isn't.\n\n29\n00:01:32.880 --> 00:01:34.810\nIt's called XML shredding.\n\n30\n00:01:34.810 --> 00:01:35.570\n>> Like cheese.\n\n31\n00:01:35.570 --> 00:01:36.420\n>> Yeah, like cheese.\n\n32\n00:01:36.420 --> 00:01:36.982\n>> [LAUGH]\n>> Or\n\n33\n00:01:36.982 --> 00:01:39.074\nsome type of skateboard\nthing that you might do.\n\n34\n00:01:39.074 --> 00:01:39.686\n>> That's right.\n\n35\n00:01:39.686 --> 00:01:40.809\nWe use to call it shredding.\n\n36\n00:01:40.809 --> 00:01:42.033\n>> Yeah.\n>> Surfers, surfers as well.\n\n37\n00:01:42.033 --> 00:01:42.594\n>> Surfers.\nIs it?\n\n38\n00:01:42.594 --> 00:01:46.540\nI'm assuming snowboarders at some\nat some point do some shredding.\n\n39\n00:01:46.540 --> 00:01:47.960\n>> Yeah, shredding.\n[LAUGH] Guitar players they shred.\n\n40\n00:01:47.960 --> 00:01:49.230\n>> Yeah, guitar players shred.\n\n41\n00:01:49.230 --> 00:01:51.370\nSo, I thought it was a made up term.\n\n42\n00:01:51.370 --> 00:01:52.970\nI thought somebody was talking about this,\n\n43\n00:01:52.970 --> 00:01:56.960\nbut no you actually can take XML data and\nshred it.\n\n44\n00:01:56.960 --> 00:01:57.870\nXML, bro.\n\n45\n00:01:57.870 --> 00:01:58.680\n>> That's right, XML.\n\n46\n00:01:58.680 --> 00:01:59.560\n>> Tubular.\n[LAUGH]\n\n47\n00:01:59.560 --> 00:02:00.068\n>> Tubular.\n\n48\n00:02:00.068 --> 00:02:01.030\n[LAUGH] Man,\n\n49\n00:02:01.030 --> 00:02:02.210\nI haven't heard tubular in years.\n\n50\n00:02:02.210 --> 00:02:03.270\n>> Yeah, in a while, right.\n\n51\n00:02:03.270 --> 00:02:03.920\n>> Years, easily.\n\n52\n00:02:03.920 --> 00:02:05.240\n>> I'm dating myself at this point.\n\n53\n00:02:05.240 --> 00:02:06.320\n>> There was no doubt.\n\n54\n00:02:06.320 --> 00:02:08.180\nSo, I'm starting to think\nyou're older than I am.\n\n55\n00:02:08.180 --> 00:02:09.540\nAnd I know that's not true.\n\n56\n00:02:09.540 --> 00:02:14.110\nSo when we start taking a look then,\nthe idea of XML shredding, okay,\n\n57\n00:02:14.110 --> 00:02:18.810\nis to take the XML data and essentially\nstrip off all that XML stuff, so\n\n58\n00:02:18.810 --> 00:02:21.160\nit can be reported as\na table as a table instead.\n\n59\n00:02:21.160 --> 00:02:23.660\nNow you're probably saying\nwhy the heck would I do that?\n\n60\n00:02:23.660 --> 00:02:26.360\nWell, normally you probably\ndon't have to do that, but\n\n61\n00:02:26.360 --> 00:02:29.160\nit is an essential element to\nthe things that we're doing.\n\n62\n00:02:29.160 --> 00:02:34.320\nWhich is we can go ahead, and we can\nimport x amount of data into our database\n\n63\n00:02:34.320 --> 00:02:37.140\nas well as export x amount of data.\n\n64\n00:02:37.140 --> 00:02:40.750\nThe problem with this doing it that way,\nright, when you import it is that all of\n\n65\n00:02:40.750 --> 00:02:43.790\nthe stuff may not be formated\nproperly in the way that you think.\n\n66\n00:02:43.790 --> 00:02:48.530\nAnd so sometimes, x amount of data can\nappear a little bit strange, right, and\n\n67\n00:02:48.530 --> 00:02:51.580\nyou may not be able to query it\nthe way that you think that you can.\n\n68\n00:02:51.580 --> 00:02:54.090\nBut, if everything is\nactually going right, okay,\n\n69\n00:02:54.090 --> 00:02:59.060\nthe ability to actually be able to\nshred it out of its current XML format,\n\n70\n00:02:59.060 --> 00:03:01.790\nexisting structure,\nwhatever you wanna call it, and then\n\n71\n00:03:01.790 --> 00:03:05.020\nput it into tables is actually something\nthat we really want to be able to do.\n\n72\n00:03:05.020 --> 00:03:07.790\n>> This sounds like we're doing\nbasically the opposite of what we did in\n\n73\n00:03:07.790 --> 00:03:08.430\nthe last episode.\n\n74\n00:03:08.430 --> 00:03:12.190\nWe're going to take the XML and put it\ninto tables instead of taking tables and\n\n75\n00:03:12.190 --> 00:03:13.520\nthrowing it into XML.\n\n76\n00:03:13.520 --> 00:03:15.270\n>> Yep, that's pretty much it, but\n\n77\n00:03:15.270 --> 00:03:19.090\nit really is about that idea of saying\nlook there can be some structure,\n\n78\n00:03:19.090 --> 00:03:23.160\nsome unusual structures that you find\nbecause XML has evolved overtime.\n\n79\n00:03:23.160 --> 00:03:26.080\nAnd you might find out in SQL Server 2012,\n\n80\n00:03:26.080 --> 00:03:30.380\n2014 that it doesn't accept\nit the way that you want to.\n\n81\n00:03:30.380 --> 00:03:35.300\nSo instead, we actually can use a couple\nof things to help us out to do this.\n\n82\n00:03:35.300 --> 00:03:40.460\nSo there's an older function for XML data\nthat allows us to be able to do this.\n\n83\n00:03:40.460 --> 00:03:43.320\nBut of course the one that they want\nyou focusing in on because this is\n\n84\n00:03:43.320 --> 00:03:46.410\nthe one that sequel server 2014 and\n\n85\n00:03:46.410 --> 00:03:50.430\n2012 really want you to actually us,\nwhich is something called XQuery.\n\n86\n00:03:50.430 --> 00:03:53.170\nNow when we take a look at it you're\nlike man, is that new syntax.\n\n87\n00:03:53.170 --> 00:03:58.310\nAs far as the syntax goes only new syntax\nin the way that we handle XML data,\n\n88\n00:03:58.310 --> 00:04:00.100\nwhich we haven't seen before.\n\n89\n00:04:00.100 --> 00:04:03.750\nSo the good thing is select statements\nare just about the same and\n\n90\n00:04:03.750 --> 00:04:07.230\nwe actually are gonna see an example of\nthis, so it can help us out a little bit.\n\n91\n00:04:07.230 --> 00:04:10.860\nSo let's start with the example that\nwe need to right here at the beginning,\n\n92\n00:04:10.860 --> 00:04:14.280\nwhich is I'm gonna run the very\nsame thing that I did in part one.\n\n93\n00:04:14.280 --> 00:04:16.330\nWhich is to take a look\nat all the data and\n\n94\n00:04:16.330 --> 00:04:20.570\nthe way it is normally formatted\nhere when we take a look, right?\n\n95\n00:04:20.570 --> 00:04:22.860\nSo I just simply selected\nevery single column and\n\n96\n00:04:22.860 --> 00:04:25.830\nreported it from\nthe person.person table here.\n\n97\n00:04:25.830 --> 00:04:30.710\nAnd there it goes, so we see everything\nincluding a row of Gui ID over here and\n\n98\n00:04:30.710 --> 00:04:33.540\neven the modified date as\nwell as that demographics.\n\n99\n00:04:33.540 --> 00:04:38.410\nWhich we took some time to take a look at\nhere where it reports the XML data for\n\n100\n00:04:38.410 --> 00:04:42.840\nus in a single value that we\nactually saw right there, okay.\n\n101\n00:04:42.840 --> 00:04:48.790\nNow when we take that information then,\nand let's say that what I do have\n\n102\n00:04:48.790 --> 00:04:55.520\nis actually I have more information that\nexists in that same particular column.\n\n103\n00:04:55.520 --> 00:04:57.410\nIt's just not being displayed.\n\n104\n00:04:57.410 --> 00:05:01.270\nSo I can actually create what's\nknown as XQuerry Value, and\n\n105\n00:05:01.270 --> 00:05:08.390\nthe XQuerries are really affecting\nthe columns that have the XML data.\n\n106\n00:05:08.390 --> 00:05:12.180\nNotice that the other part of\nthe query remains the same here.\n\n107\n00:05:12.180 --> 00:05:17.450\nSo it's nothing new, nothing big,\nbut I want it to do is to say look,\n\n108\n00:05:17.450 --> 00:05:23.540\nthere is more XML data in here, but\nI need it displayed like this down here.\n\n109\n00:05:23.540 --> 00:05:26.580\nI don't need it to be\ndisplayed in the format.\n\n110\n00:05:26.580 --> 00:05:27.600\nNow when you do that,\n\n111\n00:05:27.600 --> 00:05:32.010\nthere's a couple of things that have to\nhappen in this particular format here.\n\n112\n00:05:32.010 --> 00:05:35.050\nNotice that first we called\nupon the graphics, and\n\n113\n00:05:35.050 --> 00:05:39.940\nthen we did this dot, I'm saying that and\nI just kind of erased the dot there.\n\n114\n00:05:39.940 --> 00:05:44.310\nAnd then value, and\nthat's actually an entire function.\n\n115\n00:05:44.310 --> 00:05:48.770\nThat's saying, what is the piece\nof data that I'm looking for here.\n\n116\n00:05:48.770 --> 00:05:53.040\nAnd then you have to actually\ndo a declare the name space.\n\n117\n00:05:53.040 --> 00:05:55.270\nSo we're now actually\nassigning a name space and\n\n118\n00:05:55.270 --> 00:06:00.020\nwe're gonna call this name space\nNS at this point to help us.\n\n119\n00:06:00.020 --> 00:06:04.230\nLet me see, see I keep doing that\nthink I'm highlighting stuff and\n\n120\n00:06:04.230 --> 00:06:06.050\nI'm actually just moving stuff around.\n\n121\n00:06:06.050 --> 00:06:07.470\nTo clear the name space and\n\n122\n00:06:07.470 --> 00:06:11.940\nthen we start seeing what we call\nthis schema for the x amount.\n\n123\n00:06:12.940 --> 00:06:17.020\nThe hyperlink that you see right here\nis such is a schema the XML's schema\n\n124\n00:06:17.020 --> 00:06:18.080\nthat we have.\n\n125\n00:06:18.080 --> 00:06:22.280\nSo we are actually saying ns is actually\ngonna be following that schema.\n\n126\n00:06:22.280 --> 00:06:26.910\nAnd then we are going to take\na look at the individual piece of\n\n127\n00:06:26.910 --> 00:06:29.830\ndata that we are all so\nlooking for and this one.\n\n128\n00:06:29.830 --> 00:06:33.570\nSo notice it's actually declaring two\npieces of information, the schema, and\n\n129\n00:06:33.570 --> 00:06:38.190\nthe declaration of that of course,\nand then this NS right here.\n\n130\n00:06:38.190 --> 00:06:39.610\nThe individual survey,\n\n131\n00:06:39.610 --> 00:06:44.150\nand we're telling it focus in on\nsomething that we called occupation.\n\n132\n00:06:44.150 --> 00:06:46.750\nNow when I ran it at\nthe very beginning here,\n\n133\n00:06:46.750 --> 00:06:50.079\nokay, remember that I showed you this and\nit actually looks like there's only what\n\n134\n00:06:51.110 --> 00:06:54.960\nTotalPurchase yield today\nat this point okay.\n\n135\n00:06:54.960 --> 00:06:57.440\nAnd now what I'm telling it to do is look,\n\n136\n00:06:57.440 --> 00:07:01.220\nthere is more information in here and\nas you're going to be underneath\n\n137\n00:07:01.220 --> 00:07:05.990\nan occupation field that you're actually\ngoing to have n is actually the variable\n\n138\n00:07:05.990 --> 00:07:08.440\nconnector length of that particular\ndata types gonna be there.\n\n139\n00:07:08.440 --> 00:07:11.880\nWe're gonna tell it to report\nas a filed call occupation, and\n\n140\n00:07:11.880 --> 00:07:15.200\nthen also one called\neducation at this point.\n\n141\n00:07:15.200 --> 00:07:19.180\nNow if I knew all the fields,\nI would simply keep listing all of them.\n\n142\n00:07:19.180 --> 00:07:22.360\nSo I'd take that data form that I had for\nmy demographics and\n\n143\n00:07:22.360 --> 00:07:24.230\nI would do the same things for each one.\n\n144\n00:07:24.230 --> 00:07:27.530\nSo I have to actually\ndeclare each one of those.\n\n145\n00:07:27.530 --> 00:07:31.350\nAnd actually be able to type all that\nout including the declaration and\n\n146\n00:07:31.350 --> 00:07:35.050\nthe name space and every time that\nI run that that doesn't sound fun.\n\n147\n00:07:35.050 --> 00:07:36.120\nSo I just chose two of them,\n\n148\n00:07:36.120 --> 00:07:39.390\nI know that there's like four or\nfive of them at least.\n\n149\n00:07:39.390 --> 00:07:44.500\nBut I chose two of them, I'm limiting\nthis to that one entity at this point so\n\n150\n00:07:44.500 --> 00:07:45.710\nwe can see it.\n\n151\n00:07:45.710 --> 00:07:50.870\nSo I'm going to run that and now notice\nthat at this point here Philomena Visser,\n\n152\n00:07:50.870 --> 00:07:55.610\nokay, [LAUGH] doesn't have\nan occupation or an education here.\n\n153\n00:07:55.610 --> 00:07:59.180\nSo let's see if I can actually\ntake out that limitation and\n\n154\n00:07:59.180 --> 00:08:01.440\nthat way we can see maybe\na little bit more here.\n\n155\n00:08:01.440 --> 00:08:04.280\nAnd let me execute that.\n\n156\n00:08:04.280 --> 00:08:07.090\nAnd so,\nI notice that there's a lot of them, but\n\n157\n00:08:07.090 --> 00:08:09.720\nnow if I scroll on down through here.\n\n158\n00:08:09.720 --> 00:08:12.850\nI can actually see a little bit more, let\nme see if I can actually pull up another\n\n159\n00:08:12.850 --> 00:08:19.390\nnumber here, let's do 2208 instead.\n\n160\n00:08:19.390 --> 00:08:22.410\n2208 here and\nlet me remove the comment line,\n\n161\n00:08:22.410 --> 00:08:24.620\nand now I should see a little bit more.\n\n162\n00:08:24.620 --> 00:08:27.880\nSo even though the XML data\n\n163\n00:08:27.880 --> 00:08:31.640\nIs actually stored as XML\ninside the demographics column.\n\n164\n00:08:32.910 --> 00:08:34.100\nWell, I'm lying to you.\n\n165\n00:08:34.100 --> 00:08:39.150\nMaybe you shouldn't pick a number at all,\nmaybe let's do 15,285 or\n\n166\n00:08:39.150 --> 00:08:43.090\n287 here, and it all turns out to be\nwhere I'm randomly picking these,\n\n167\n00:08:43.090 --> 00:08:45.308\nI'm getting nulls here, there we go.\n\n168\n00:08:45.308 --> 00:08:46.540\n[LAUGH]\n>> [LAUGH]\n\n169\n00:08:46.540 --> 00:08:48.150\n>> Finally found one\n\n170\n00:08:48.150 --> 00:08:50.600\n>> I thought I had picked one here.\n\n171\n00:08:50.600 --> 00:08:57.120\nSo for\nus this is Heidi Sanchez right here, okay?\n\n172\n00:08:57.120 --> 00:09:00.260\nShe has partial college information,\nshe's clerical.\n\n173\n00:09:00.260 --> 00:09:01.960\nAnd so, we can actually see.\n\n174\n00:09:01.960 --> 00:09:06.720\nSo remember that what we're doing is we're\ntaking the XML data, and now look at it.\n\n175\n00:09:06.720 --> 00:09:09.100\nIt doesn't show up as XML anymore,\n\n176\n00:09:09.100 --> 00:09:14.100\nit now is reported as just regular columns\nof data that we can have right there and\n\n177\n00:09:14.100 --> 00:09:18.340\navailable for\nus as we choose to run this, okay?\n\n178\n00:09:18.340 --> 00:09:21.190\nNow, the problem that we\nhave with doing it this way,\n\n179\n00:09:21.190 --> 00:09:25.410\neven though we can actually query it and\nstart running this is, like I said,\n\n180\n00:09:25.410 --> 00:09:30.580\nthis insane statement right here where you\nhave to declare it on every single piece\n\n181\n00:09:30.580 --> 00:09:32.560\nof data that you wanna pull out.\n\n182\n00:09:32.560 --> 00:09:36.420\nAnd I can't scroll over enough so\nthat we can see that.\n\n183\n00:09:36.420 --> 00:09:39.210\nLet me see if I can wind this up so\nwe can see a little bit better.\n\n184\n00:09:41.010 --> 00:09:42.540\nWell, we can't see the whole thing.\n\n185\n00:09:42.540 --> 00:09:46.370\nBut you can see where I've highlighted,\nwell I literally had to type that out like\n\n186\n00:09:46.370 --> 00:09:53.080\nI said for every value that I'm looking\nfor, so then I can query against it, okay?\n\n187\n00:09:53.080 --> 00:09:57.090\nSo you could imagine if I have a small\ndemographics form of five or ten,\n\n188\n00:09:57.090 --> 00:10:01.360\nthat's still pretty hefty even though I'm\ncopying and pasting and doing that again.\n\n189\n00:10:01.360 --> 00:10:04.340\nAnd then remembering here\nat the end to go ahead and\n\n190\n00:10:04.340 --> 00:10:08.580\ndifferentiate it by picking\nout the field that I want.\n\n191\n00:10:08.580 --> 00:10:12.460\nSo what else can we do to make\nthat a bit more efficient?\n\n192\n00:10:14.260 --> 00:10:19.470\nSo what we can do instead is to\nactually use something called\n\n193\n00:10:19.470 --> 00:10:22.560\nWITH XMLNAMESPACES here.\n\n194\n00:10:22.560 --> 00:10:23.370\nOkay.\n\n195\n00:10:23.370 --> 00:10:26.920\nNow with this one,\nthis is a little bit more unusual here.\n\n196\n00:10:26.920 --> 00:10:31.170\nLet me see if I can zoom in so that we can\nverify and see that a little bit more.\n\n197\n00:10:31.170 --> 00:10:36.860\nNotice that the beginning of\nthis begins with a semi-colon.\n\n198\n00:10:36.860 --> 00:10:38.140\nSo, a good mark,\n\n199\n00:10:38.140 --> 00:10:41.740\nsomething that can throw you off if\nyou're not paying attention here.\n\n200\n00:10:41.740 --> 00:10:48.290\nit is I can declare the namespace right up\nhere at the beginning, one time instead.\n\n201\n00:10:50.270 --> 00:10:55.950\nAnd now, once I've actually declared\nthe first part of that schema, I tell it,\n\n202\n00:10:55.950 --> 00:11:00.680\nhere's a namespace, and\nhere I'm going to report it as NS Then,\n\n203\n00:11:00.680 --> 00:11:03.430\nIS said that you don't\nhave to retype that in.\n\n204\n00:11:03.430 --> 00:11:06.300\nAnd I clicked on that for\nevery single line.\n\n205\n00:11:06.300 --> 00:11:09.090\nSo if we compare these two.\n\n206\n00:11:09.090 --> 00:11:11.050\nThat's what I'm hoping to do.\n\n207\n00:11:11.050 --> 00:11:12.640\nYou take a look at both of those,\n\n208\n00:11:12.640 --> 00:11:16.790\nat least at a demographics line here,\non both those values.\n\n209\n00:11:18.520 --> 00:11:23.650\nAnd now notice that down here\nNnotice that I'm pretty much missing\n\n210\n00:11:23.650 --> 00:11:28.210\nthat entire hyper link that I would have\nhad to copy over there and then verified.\n\n211\n00:11:28.210 --> 00:11:31.150\nAll I have to do is just\ntype in a part of it,\n\n212\n00:11:31.150 --> 00:11:33.330\nbecause I declared a name\nspace at the beginning,\n\n213\n00:11:33.330 --> 00:11:37.580\neverything else that follows\nidentifies itself with that name space.\n\n214\n00:11:37.580 --> 00:11:41.729\nSo then, I can run the entire thing and\nexecute.\n\n215\n00:11:45.270 --> 00:11:46.070\nAnd now, there we go.\n\n216\n00:11:46.070 --> 00:11:55.102\nLet me run it again\nwithout the [LAUGH] here.\n\n217\n00:11:55.102 --> 00:12:00.180\nI really did pick that one at random, but\napparently, is not a good example for us.\n\n218\n00:12:01.780 --> 00:12:02.860\nI did it again.\n\n219\n00:12:02.860 --> 00:12:04.080\nI was gonna comment that out.\n\n220\n00:12:05.480 --> 00:12:07.610\nHere we go.\n\n221\n00:12:07.610 --> 00:12:10.940\nComment that thing out and execute.\n\n222\n00:12:13.150 --> 00:12:15.580\nSo now notice it performs\nexactly the same, but\n\n223\n00:12:15.580 --> 00:12:17.670\nnow a little bit more efficiently.\n\n224\n00:12:17.670 --> 00:12:21.760\nSo the goal is not for us to actually\njust know that they're actually there\n\n225\n00:12:21.760 --> 00:12:23.580\nIt's the idea of actually\nbeing more efficient.\n\n226\n00:12:23.580 --> 00:12:26.780\nNow you might be saying like,\nwell what is all of that stuff about?\n\n227\n00:12:26.780 --> 00:12:30.370\nIt's about the way that XML\ndata is actually stored, and\n\n228\n00:12:30.370 --> 00:12:32.250\ncan we manually do it one at a time?\n\n229\n00:12:32.250 --> 00:12:32.830\nYes.\n\n230\n00:12:32.830 --> 00:12:33.460\nOkay.\n\n231\n00:12:33.460 --> 00:12:35.560\nSo we can declare that one line at a time.\n\n232\n00:12:35.560 --> 00:12:38.620\nIf there's a hundred different\nelements that I want to be reported,\n\n233\n00:12:38.620 --> 00:12:41.710\nwell that means I have to\ndeclare it every single time.\n\n234\n00:12:41.710 --> 00:12:42.390\nOr I can go ahead and\n\n235\n00:12:42.390 --> 00:12:46.450\ndeclare it with a namespace that\nmakes it much more efficient for me.\n\n236\n00:12:46.450 --> 00:12:50.460\nAnd once I do that, notice I only\ndeclare it once, and then each of those\n\n237\n00:12:50.460 --> 00:12:55.180\nelements then becomes much shorter in\nthis declaration of what we need to do.\n\n238\n00:12:55.180 --> 00:12:59.860\nSo it is more about the idea of efficiency\nhere that we need to focus in on.\n\n239\n00:12:59.860 --> 00:13:03.170\nWhen we start working with it because\nif not we're gonna start seeing that\n\n240\n00:13:03.170 --> 00:13:05.740\nthese things are getting\nvery long very join up.\n\n241\n00:13:05.740 --> 00:13:09.420\nAnd then you have to make sure that when\nthere's typos you have to go back and\n\n242\n00:13:09.420 --> 00:13:11.710\ncompare them, and I hate typo, but\n\n243\n00:13:11.710 --> 00:13:14.550\nI'll make more of them than\nany few people ever will.\n\n244\n00:13:14.550 --> 00:13:16.930\nSo this is something\nthat really helps me out.\n\n245\n00:13:16.930 --> 00:13:19.470\nSo remember that wit\nname spaces as well and\n\n246\n00:13:19.470 --> 00:13:24.910\nthen what you're doing here x query,\nand we actually did shred the XML data.\n\n247\n00:13:24.910 --> 00:13:28.690\nNotice it reports just as\na regular table data for us too.\n\n248\n00:13:28.690 --> 00:13:31.970\n>> So, now Ronnie,\nwe've taken a look at shredding data,\n\n249\n00:13:31.970 --> 00:13:35.030\nwhich is a lot of fun actually, and\nit's fun to say, fun to play around with.\n\n250\n00:13:35.030 --> 00:13:37.440\nBut you did mention\nsomething to me before, and\n\n251\n00:13:37.440 --> 00:13:41.060\nthen it goes along with this\nepisode in which is XML indexing.\n\n252\n00:13:41.060 --> 00:13:43.160\nAnd you said this not for\nthe faint of heart.\n\n253\n00:13:43.160 --> 00:13:47.620\nIt's a little more of an advanced feature\nset when working with XML inside of your\n\n254\n00:13:47.620 --> 00:13:48.430\nsequel environment.\n\n255\n00:13:48.430 --> 00:13:53.240\nSo help us out with this so\nwas it help dip our toes into this water.\n\n256\n00:13:53.240 --> 00:13:57.040\n>> Well when it comes down to what\nwould have been do is in indexing okay?\n\n257\n00:13:57.040 --> 00:14:00.000\nWe will have a whole other\nshow on indexing itself\n\n258\n00:14:00.000 --> 00:14:03.800\nIt's a fairly complicated process,\nespecially with XML data.\n\n259\n00:14:03.800 --> 00:14:07.770\nThe key here is to understand\nthe purpose of the indexing.\n\n260\n00:14:07.770 --> 00:14:11.210\nSo as XML data can be very large, right?\n\n261\n00:14:11.210 --> 00:14:15.290\nWe need to go ahead and create indexes\nto help us to be able to speed through\n\n262\n00:14:15.290 --> 00:14:18.650\nthe data a little bit better\nin terms of searching.\n\n263\n00:14:18.650 --> 00:14:22.260\nNow, XML data is actually\na little bit peculiar\n\n264\n00:14:22.260 --> 00:14:23.860\nIn the way that it does its indexing.\n\n265\n00:14:23.860 --> 00:14:26.010\nAnd this is key for the exam as well.\n\n266\n00:14:27.030 --> 00:14:29.220\nOn indexing of the data,\n\n267\n00:14:29.220 --> 00:14:33.130\nwe're just gonna really talk about the\nidea that there's two primary types here.\n\n268\n00:14:33.130 --> 00:14:36.460\nThere's of course what they call\na primary type of indexing, and\n\n269\n00:14:36.460 --> 00:14:39.520\nthen there is a secondary\ntype of indexing as well.\n\n270\n00:14:40.550 --> 00:14:43.880\nNow when you deal with\nthe idea of the primary okay,\n\n271\n00:14:43.880 --> 00:14:47.040\nwhat ends up happening is\none row of information for\n\n272\n00:14:47.040 --> 00:14:52.270\nevery single node in the XML column\nwill end up happening here okay.\n\n273\n00:14:52.270 --> 00:14:57.940\nSo we'll actually make that information\nfor us and create a basic XML index and\n\n274\n00:14:57.940 --> 00:15:02.190\nessentially it shreds all those values\ntogether, and puts them as a single file\n\n275\n00:15:02.190 --> 00:15:05.320\nto make it easier for\nus to be able to search through.\n\n276\n00:15:05.320 --> 00:15:10.080\nNow, whenever you actually create\nthe idea of the primary type of indexing,\n\n277\n00:15:10.080 --> 00:15:12.780\nyou have to actually\nworry about two things.\n\n278\n00:15:12.780 --> 00:15:18.460\nOne of course, is the table that you have,\nand then the actual primary key.\n\n279\n00:15:18.460 --> 00:15:21.990\nNow, in this,\nwhen you create the indexes, the XML data\n\n280\n00:15:21.990 --> 00:15:25.430\nalso of course has the existing table,\njust like the one that we showed you.\n\n281\n00:15:25.430 --> 00:15:30.390\nAnd then the key itself has to be what\nwe call a clustered primary key as well.\n\n282\n00:15:30.390 --> 00:15:32.600\nSo, if you're saying,\nI've never heard of that?\n\n283\n00:15:32.600 --> 00:15:37.250\nWell, when we get into that particular\nsection we're gonna perform some indexing.\n\n284\n00:15:37.250 --> 00:15:40.300\nSo, there's a whole section where we're\ngonna performance enhancement and\n\n285\n00:15:40.300 --> 00:15:42.020\nindexing a little bit.\n\n286\n00:15:42.020 --> 00:15:45.720\nWe're gonna actually show some examples\nof this and why it's actually important.\n\n287\n00:15:45.720 --> 00:15:49.880\nBut, it's all about speeding up the way\nthat these things are searched out okay?\n\n288\n00:15:49.880 --> 00:15:52.220\nNow that is absolutely a key for us.\n\n289\n00:15:52.220 --> 00:15:55.080\nSo there's a primary and\nthere's a secondary.\n\n290\n00:15:55.080 --> 00:15:58.900\nNow the key here is that the secondary\ndoesn't mean another type of index.\n\n291\n00:15:58.900 --> 00:16:00.190\nIt depends on the primary.\n\n292\n00:16:00.190 --> 00:16:05.400\nSo if you don't have a primary\nxml index here okay?\n\n293\n00:16:05.400 --> 00:16:08.020\nThen you cannot perform a secondary.\n\n294\n00:16:08.020 --> 00:16:13.980\nA secondary type of index is really about\noptimizing for certain types of XML query.\n\n295\n00:16:13.980 --> 00:16:14.660\nOkay?\n\n296\n00:16:14.660 --> 00:16:19.160\nSo if you know you're gonna be doing more\nwith the idea of searching for values.\n\n297\n00:16:19.160 --> 00:16:23.710\nYou can actually do a secondary type\nof indexing on individual values or\n\n298\n00:16:23.710 --> 00:16:26.530\non the actual data property types as well,\n\n299\n00:16:26.530 --> 00:16:31.300\nwhich is actually done on the primary\nkey fields inside of our data.\n\n300\n00:16:31.300 --> 00:16:34.970\nOr you can do one based on\nthe path of the information too.\n\n301\n00:16:34.970 --> 00:16:38.420\nSo you will actually see\na lot of that go on, but\n\n302\n00:16:38.420 --> 00:16:42.490\nif your particular XML queries are running\nslower than you think they should be.\n\n303\n00:16:42.490 --> 00:16:47.480\nYou need to check if there's a primary\ntype of index, and then if you're\n\n304\n00:16:47.480 --> 00:16:52.450\nactually always doing, let's say,\nthe ID of the XML path all the time.\n\n305\n00:16:52.450 --> 00:16:56.350\nTo find your information instead you may\nalso want to create a secondary index\n\n306\n00:16:56.350 --> 00:16:58.190\nbased on the idea of path.\n\n307\n00:16:58.190 --> 00:17:00.650\nNow, you're probably saying,\nwell why don't you show us that?\n\n308\n00:17:00.650 --> 00:17:04.630\nBecause it is a fairly\ncomplex to say the least, but\n\n309\n00:17:04.630 --> 00:17:08.570\nbecause we have a whole other show on\nindexing, we'll be doing a little bit of\n\n310\n00:17:08.570 --> 00:17:13.310\na demonstration there on the idea of\nindexing the data at that point in time.\n\n311\n00:17:13.310 --> 00:17:15.990\nBut it is part of something that we do\nhave to actually understand when we\n\n312\n00:17:15.990 --> 00:17:16.750\nrun this.\n\n313\n00:17:16.750 --> 00:17:17.850\nIt can take a long time.\n\n314\n00:17:17.850 --> 00:17:22.060\nAnd so yes, if we can we wanna make\nsure that we do actually implement\n\n315\n00:17:22.060 --> 00:17:26.720\nthese types of indexes on our XML data,\nespecially if we're gonna be searching for\n\n316\n00:17:26.720 --> 00:17:28.200\nit all the time.\n\n317\n00:17:28.200 --> 00:17:32.120\nIf we're only searching for it every once\nin a while, then maybe the index is not so\n\n318\n00:17:32.120 --> 00:17:34.540\nimportant, but if we know that\nwe're constantly gonna be in and\n\n319\n00:17:34.540 --> 00:17:38.510\nout of this data And creating indexes\nis probably a great thing for us to do.\n\n320\n00:17:38.510 --> 00:17:41.480\n>> Yeah, I've actually done\na different show on SQL with Don and\n\n321\n00:17:41.480 --> 00:17:44.210\nhe did some indexing, and\nwhen he says it speeds it up.\n\n322\n00:17:44.210 --> 00:17:47.600\nIt is amazing how much\nless time it takes for\n\n323\n00:17:47.600 --> 00:17:51.730\nyou to do a query than it would normally\nif you just have the data laying there.\n\n324\n00:17:51.730 --> 00:17:53.700\nThese indexes can really help you out.\n\n325\n00:17:53.700 --> 00:17:58.730\nI guess for this show, we just wanted you\nto be aware since we're talking about XML,\n\n326\n00:17:58.730 --> 00:18:02.000\nit makes sense to go ahead and at least\nmention the fact that we will be doing\n\n327\n00:18:02.000 --> 00:18:07.210\nsome indexing, and if you have XML\ndata you can do XML indexing and\n\n328\n00:18:07.210 --> 00:18:12.170\nsome of the basics about that so\nyou at least have a functional module,\n\n329\n00:18:12.170 --> 00:18:14.120\nworking knowledge of what's gonna happen.\n\n330\n00:18:14.120 --> 00:18:15.130\nRonnie, you did a great job.\n\n331\n00:18:15.130 --> 00:18:18.120\nWe appreciate the demonstrations\nthat you have done.\n\n332\n00:18:18.120 --> 00:18:20.750\nAnd all the information that\nyou've been parting to us.\n\n333\n00:18:20.750 --> 00:18:21.870\n>> Okay.\n>> Now, hopefully,\n\n334\n00:18:21.870 --> 00:18:25.263\nwe'll be able to take that and\nbe SQL masters like the Ronnie man here.\n\n335\n00:18:25.263 --> 00:18:27.250\n>> [LAUGH]\n>> Now, all we gotta do is type better\n\n336\n00:18:27.250 --> 00:18:27.960\nthan he does.\n\n337\n00:18:27.960 --> 00:18:31.160\n>> By far.\n>> He will claim that easily and say,\n\n338\n00:18:31.160 --> 00:18:33.710\nyou know what, not the greatest typist\nin the world, but you know what?\n\n339\n00:18:33.710 --> 00:18:35.510\nYou do have a lot of great\nknowledge that we need,\n\n340\n00:18:35.510 --> 00:18:38.360\nso with our powers combined\n>> We can definitely get\n\n341\n00:18:38.360 --> 00:18:39.200\nsomething accomplished.\n\n342\n00:18:39.200 --> 00:18:39.770\n>> Wonder Twins.\n\n343\n00:18:39.770 --> 00:18:41.280\n>> That's right.\nWonder Twin power activate!\n\n344\n00:18:41.280 --> 00:18:43.160\nNow we owe our royalty\nto somebody I'm sure.\n\n345\n00:18:43.160 --> 00:18:46.190\nThat being said, thanks guys for watching.\n\n346\n00:18:46.190 --> 00:18:48.430\nHopefully, you've enjoyed this episode and\nlearned something.\n\n347\n00:18:48.430 --> 00:18:50.060\nWe thank you, Ronnie,\nfor joining us as well.\n\n348\n00:18:50.060 --> 00:18:52.050\nWe're gonna go ahead and\nsign off for IT Pro TV.\n\n349\n00:18:52.050 --> 00:18:53.770\nI've been your host, Daniel Lowrie.\n\n350\n00:18:53.770 --> 00:18:54.630\n>> And I'm Ronnie Wong.\n\n351\n00:18:54.630 --> 00:18:56.493\n>> We'll see you next time.\n\n352\n00:18:56.493 --> 00:19:02.439\n[MUSIC]\n\n",
          "vimeoId": "164633653"
        },
        {
          "description": "In this episode Wes and Ronnie discuss the different data types that any administrator should know and understand when planning database structure. They explain numeric, exact and approximate data types. They show the data and time data types and their characteristics.",
          "length": "2014",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-10-1-implement_datatypes-042716-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-10-1-implement_datatypes-042716-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-10-1-implement_datatypes-042716-1-sm.jpg",
          "title": "Implement Data Types",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.030 --> 00:00:15.421\nHello and welcome back to another\nexciting episode here at ITProTV.\n\n3\n00:00:15.421 --> 00:00:19.847\nI'm your host Wes Bryan and in today's\nepisode we're moving along in our series\n\n4\n00:00:19.847 --> 00:00:23.817\non Query Microsoft SQL Server 2014,\nand we have none other than Mr.\n\n5\n00:00:23.817 --> 00:00:27.590\nRonnie Wong in the studios, Ronny,\nhow are you doing today sir?\n\n6\n00:00:27.590 --> 00:00:31.920\n>> I am doing fine as we continue to take\na look at more of our SQL Server, and\n\n7\n00:00:31.920 --> 00:00:35.650\nwhat we're focusing in on today of course\nis actually looking at what we call\n\n8\n00:00:35.650 --> 00:00:36.860\ndata types.\n\n9\n00:00:36.860 --> 00:00:40.200\nNow, data types for us is actually\nsomething that's very important.\n\n10\n00:00:40.200 --> 00:00:43.780\nSo when we actually want to actually do\nsomething such as creating a database,\n\n11\n00:00:43.780 --> 00:00:47.070\nwe're gonna see that is gonna\nrequire us at times to actually\n\n12\n00:00:47.070 --> 00:00:49.480\npick the proper idea of the data type.\n\n13\n00:00:49.480 --> 00:00:50.500\n>> You know, it's interesting Ronnie.\n\n14\n00:00:50.500 --> 00:00:53.180\nWhen I think about data types,\nI think about file extensions, right?\n\n15\n00:00:53.180 --> 00:00:54.750\nAnd if it doesn't have\na file extension on it,\n\n16\n00:00:54.750 --> 00:00:58.450\nI can't really tell what type of data it\nreally is but, It's not that same way.\n\n17\n00:00:58.450 --> 00:01:01.910\nSo what is it about data types that's\nimportant for us inside of SQL?\n\n18\n00:01:01.910 --> 00:01:06.050\n>> Well when it comes down to the idea of\ndata types, what we actually want to do\n\n19\n00:01:06.050 --> 00:01:10.660\nis be able to implement the way\nthat we can characterize our data.\n\n20\n00:01:10.660 --> 00:01:13.870\nNow when we start talking about that,\nthere's actually special things that can\n\n21\n00:01:13.870 --> 00:01:18.560\nbe done once we start characterizing\ndata that we enter into our database.\n\n22\n00:01:18.560 --> 00:01:21.580\nIt's all about the way that we\ncan actually take our data and\n\n23\n00:01:21.580 --> 00:01:23.180\nsay it's not exactly equal.\n\n24\n00:01:23.180 --> 00:01:28.150\nSuch as a name is not equal to\nsomebody's birth date, okay?\n\n25\n00:01:28.150 --> 00:01:32.950\nA name is not equal to let's say\na sales value of some sort here or\n\n26\n00:01:32.950 --> 00:01:35.390\nsome type of numeric value either.\n\n27\n00:01:35.390 --> 00:01:38.560\nAnd so we are actually properly\ncharacterizing the data that we\n\n28\n00:01:38.560 --> 00:01:41.080\nend up storing in our database\n\n29\n00:01:41.080 --> 00:01:44.320\nby actually choosing the proper\ndata type to go with it.\n\n30\n00:01:44.320 --> 00:01:49.700\nNow, you may ask yourself again,\nwhy is that really functionally important\n\n31\n00:01:49.700 --> 00:01:54.860\nwhen we start actually talking about\nentering in data for our SQL servers?\n\n32\n00:01:54.860 --> 00:01:58.310\nWell, when it comes down\nto the idea of SQL servers,\n\n33\n00:01:58.310 --> 00:02:02.140\none of the things that we have to worry\nabout is the size of our database.\n\n34\n00:02:02.140 --> 00:02:07.590\nNow, The one that am using is not exactly\na very large database unto itself.\n\n35\n00:02:07.590 --> 00:02:10.660\nBut you can imagine in\nwell production database,\n\n36\n00:02:10.660 --> 00:02:15.330\nthat the database size itself\ncan grow tremendously and can\n\n37\n00:02:15.330 --> 00:02:19.540\nalso of course cause performance issues\nif you are not actually monitoring it.\n\n38\n00:02:19.540 --> 00:02:22.760\nSo, one of the very first things\nthat we actually want to do\n\n39\n00:02:22.760 --> 00:02:27.170\nis understand one ways that we can\ncontrol the size of our database\n\n40\n00:02:27.170 --> 00:02:29.920\nis by implementing the idea\nof data types here.\n\n41\n00:02:29.920 --> 00:02:32.700\nAnd that's because every\ncharacter that you and\n\n42\n00:02:32.700 --> 00:02:37.580\nI end up typing in to our database,\nis actually equal to about eight\n\n43\n00:02:37.580 --> 00:02:42.090\nbits of data or of course the way that\nSQL likes to say it, one bite of data.\n\n44\n00:02:42.090 --> 00:02:46.660\nSo for example, a number one is actually,\nlike, seven zeros, right, and\n\n45\n00:02:46.660 --> 00:02:48.710\nthen a number one at the end.\n\n46\n00:02:48.710 --> 00:02:53.320\nBut the letter A is also whatever they\nchose to represent in those eight bits of\n\n47\n00:02:53.320 --> 00:02:54.340\ndata as well.\n\n48\n00:02:54.340 --> 00:02:56.430\nSo if you were to translate it,\nthey'd take the letter A and\n\n49\n00:02:56.430 --> 00:02:59.790\nthey would translate it into another\n\n50\n00:02:59.790 --> 00:03:04.140\ncombination of those eight bits to\nactually store it somehow, some way.\n\n51\n00:03:04.140 --> 00:03:07.180\nSo every single character that\nyou end up typing in there\n\n52\n00:03:07.180 --> 00:03:11.520\nreally does take up space on your\nhard drive somewhere and somehow.\n\n53\n00:03:11.520 --> 00:03:14.530\nSo when you think about just entering\nin a single word that has like\n\n54\n00:03:14.530 --> 00:03:16.420\nfour letters to it, right?\n\n55\n00:03:16.420 --> 00:03:20.320\nWell, that takes up about 32 bits\nof space on to your hard drive and\n\n56\n00:03:20.320 --> 00:03:23.650\nthat doesn't sound really big,\nbut you start multiplying that by\n\n57\n00:03:23.650 --> 00:03:27.860\nevery single piece of data that you\nhave It starts to add up very quickly.\n\n58\n00:03:27.860 --> 00:03:31.736\n>> So Ronnie, for the different data\ntypes, is this something that could\n\n59\n00:03:31.736 --> 00:03:35.356\ndramatically affect how the server\nitself is either retrieving or\n\n60\n00:03:35.356 --> 00:03:38.370\nsending that information\noverall performance?\n\n61\n00:03:38.370 --> 00:03:39.540\n>> It really can, right?\n\n62\n00:03:39.540 --> 00:03:42.390\nSo, a lot of times when we start\nactually thinking about it, right,\n\n63\n00:03:42.390 --> 00:03:46.560\nthe very fact is that if we actually\ndon't have the properly formatted data,\n\n64\n00:03:46.560 --> 00:03:50.510\nas far as the storage goes and the data\ntypes, then it can actually play a little\n\n65\n00:03:50.510 --> 00:03:54.440\nbit more havoc than we think when we\ntry to retrieve that information out.\n\n66\n00:03:54.440 --> 00:03:57.230\nBut there's actually a couple of things\nthat we have to worry about when we\n\n67\n00:03:57.230 --> 00:04:01.040\nstart talking about the idea of data\ntypes, so let me show you cuz it's\n\n68\n00:04:01.040 --> 00:04:05.260\nactually easier to show you this and\nto make sure that we understand okay.\n\n69\n00:04:05.260 --> 00:04:10.770\nSo with all SQL servers there's two\nparticular character data types\n\n70\n00:04:10.770 --> 00:04:13.850\nthat we have to worry about in general,\nokay?\n\n71\n00:04:13.850 --> 00:04:16.170\nOne, of course,\nis what we call regular data type and\n\n72\n00:04:16.170 --> 00:04:19.660\nthe other one is what we\ncall Unicode data type two.\n\n73\n00:04:19.660 --> 00:04:22.770\nAnd so, when you start taking\na look at both of those,\n\n74\n00:04:22.770 --> 00:04:26.610\nthere is a possibility that some\nfields may be stored in Unicode,\n\n75\n00:04:26.610 --> 00:04:29.400\nsome fields maybe stored\nin the regular data type.\n\n76\n00:04:29.400 --> 00:04:31.890\nMost of us today probably just\nuse regular data type and\n\n77\n00:04:31.890 --> 00:04:34.170\nwe don't think about Unicode to much.\n\n78\n00:04:34.170 --> 00:04:37.950\nBut you might be wondering well what is\nthe big difference here in what it is so\n\n79\n00:04:37.950 --> 00:04:40.540\nI actually tried to make sure\nthat we could compare these.\n\n80\n00:04:40.540 --> 00:04:44.490\nSo in a regular data type when we start\nstoring remember that there's only\n\n81\n00:04:44.490 --> 00:04:47.580\none byte for\neach particular character okay?\n\n82\n00:04:47.580 --> 00:04:50.070\nSo the letter A like l said,\nor the number one or\n\n83\n00:04:50.070 --> 00:04:55.080\nnumber nine it actually is represented as\nfar as size of eight bits of data, okay?\n\n84\n00:04:55.080 --> 00:05:00.820\nIf you go to Unicode though it is\nactually represented in two bytes each.\n\n85\n00:05:00.820 --> 00:05:04.250\nSo now in Unicode it's a little bit\nlarger and you may be wondering why.\n\n86\n00:05:04.250 --> 00:05:06.190\nWell if you'd come down here and\n\n87\n00:05:06.190 --> 00:05:10.510\nlook at the second line, okay, well data\ntype allows us to actually be able to\n\n88\n00:05:10.510 --> 00:05:14.460\nstore data in English plus\none additional language.\n\n89\n00:05:14.460 --> 00:05:17.360\nWhatever language that you\nactually are working in, or\n\n90\n00:05:17.360 --> 00:05:18.680\nyou actually choose to store it in.\n\n91\n00:05:18.680 --> 00:05:23.590\nIt will give you that ability to store\nit in one and then of course English.\n\n92\n00:05:23.590 --> 00:05:28.070\nSo besides English here, essentially\nthe combination of two possible languages\n\n93\n00:05:28.070 --> 00:05:31.930\nthat you can use when you're actually\nstoring data for that particular field\n\n94\n00:05:31.930 --> 00:05:35.410\nthat you might actually have, but\nover here in the Unicode side.\n\n95\n00:05:35.410 --> 00:05:38.050\nThis is why people prefer a lot of times\n\n96\n00:05:38.050 --> 00:05:41.800\nis because we can actually take that\ndata and store in multiple languages.\n\n97\n00:05:41.800 --> 00:05:45.370\nThere is no real limit in terms\nof languages that you can use\n\n98\n00:05:45.370 --> 00:05:48.430\nif you choose to choose Unicode instead.\n\n99\n00:05:48.430 --> 00:05:52.470\nAnd the other one that's really gonna\naffect what we're going to do here\n\n100\n00:05:52.470 --> 00:05:55.020\nis gonna be what we call\nliteral expressions.\n\n101\n00:05:55.020 --> 00:06:00.030\nThey are sometimes the characters that we\nend up using when querying our SQL server\n\n102\n00:06:00.030 --> 00:06:01.890\nthat are special characters right.\n\n103\n00:06:01.890 --> 00:06:05.660\nIn other words, they are characters\nthat TSQL language itself\n\n104\n00:06:05.660 --> 00:06:10.430\nrecognizes being special characters, well\nwhat if I need those characters show up\n\n105\n00:06:10.430 --> 00:06:13.360\ninstead of actually using\nthem as special characters.\n\n106\n00:06:13.360 --> 00:06:16.950\nLet's take for an example\nthe idea of a parentheses right.\n\n107\n00:06:16.950 --> 00:06:21.050\nWell, parentheses help us in the regular\ncode here to show up as being something\n\n108\n00:06:21.050 --> 00:06:25.400\nthat we might use for a function or\nbeing able to group the data together.\n\n109\n00:06:25.400 --> 00:06:28.800\nWell the way that we would actually\nmake that show up in a literal sense\n\n110\n00:06:28.800 --> 00:06:32.290\nis that we would actually have the single\nquote marks around whatever we actually\n\n111\n00:06:32.290 --> 00:06:33.300\nneeded to show up.\n\n112\n00:06:33.300 --> 00:06:34.940\nOn literal expressions, right,\n\n113\n00:06:34.940 --> 00:06:38.070\nsometimes we have special\ncharacters that we are using\n\n114\n00:06:38.070 --> 00:06:42.140\nsuch as in Transact-SQL in the language\nitself that aren't going to show up.\n\n115\n00:06:42.140 --> 00:06:44.820\nFor example,\nthings like a parentheses, right?\n\n116\n00:06:44.820 --> 00:06:47.740\nA lot of times those actually end\nup representing functions, and\n\n117\n00:06:47.740 --> 00:06:51.450\nso even though I might set a,\nput a set of parenthesis around something,\n\n118\n00:06:51.450 --> 00:06:55.020\nthe problem is if I run that query it's\nnot gonna show up as a parenthesis,\n\n119\n00:06:55.020 --> 00:06:58.130\nit's just gonna show up as\nbeing part of that function.\n\n120\n00:06:58.130 --> 00:07:00.820\nSo if I need the parenthesis\nto show up instead,\n\n121\n00:07:00.820 --> 00:07:02.330\nI don't think I can say that again.\n\n122\n00:07:02.330 --> 00:07:06.860\nIf I need that to show up, what I need to\ndo is I need to use a single quote mark.\n\n123\n00:07:06.860 --> 00:07:08.810\nAnd I don't know if you can\nactually see it right there.\n\n124\n00:07:08.810 --> 00:07:12.750\nThere's that single quote mark around\nwhatever I want to show up and\n\n125\n00:07:12.750 --> 00:07:16.840\nthat way you will report it and\nsee it as a literal character, okay.\n\n126\n00:07:16.840 --> 00:07:20.410\nAnd that will really help us do that\naround these special functions.\n\n127\n00:07:20.410 --> 00:07:25.149\nNow this is something that's actually very\nkey for us cuz sometimes we start typing\n\n128\n00:07:25.149 --> 00:07:29.007\nout queries and all the of the sudden,\nwe're wondering like wait,\n\n129\n00:07:29.007 --> 00:07:33.744\nwhy didn't that run that, I look at it and\njust give me a syntax error that something\n\n130\n00:07:33.744 --> 00:07:37.735\nis wrong here and more than likely we\nended up using one of those special\n\n131\n00:07:37.735 --> 00:07:41.931\ncharacters in a way that it actually said,\nlook as part of this function or\n\n132\n00:07:41.931 --> 00:07:46.332\npart of the TSQL that the Transact SQL\nlanguage here but has not really suppose\n\n133\n00:07:46.332 --> 00:07:50.235\nto be displayed in this way so\nwe need to be careful there as well too.\n\n134\n00:07:50.235 --> 00:07:53.815\nNow the other part is in the Unicode\nthough this is a little bit different\n\n135\n00:07:53.815 --> 00:07:57.873\ninstead, where what you'll see in front\nthis literal expressions is gonna look\n\n136\n00:07:57.873 --> 00:07:59.025\na little bit strange.\n\n137\n00:07:59.025 --> 00:08:03.344\nAs you'll see a capital letter N, okay,\nwhich stands for national and then,\n\n138\n00:08:03.344 --> 00:08:06.748\nyou actually see what ever they're\nactually wanting to put in\n\n139\n00:08:06.748 --> 00:08:09.432\nthe literal quotations\nwithin single quotes and\n\n140\n00:08:09.432 --> 00:08:13.260\nthen you'll actually be able to\nhave that typed out as well.\n\n141\n00:08:13.260 --> 00:08:16.870\nSo it's a little bit different, a little\nbit funky when you start seeing this, and\n\n142\n00:08:16.870 --> 00:08:19.360\nwhere you'll probably see it most\noften is if you're looking for\n\n143\n00:08:19.360 --> 00:08:22.600\nsample code, especially if\nyou're browsing the internet.\n\n144\n00:08:22.600 --> 00:08:26.150\nSo when you start taking a look at\nthe idea here of the size itself,\n\n145\n00:08:26.150 --> 00:08:29.320\nright, especially how big\nthese things can get,\n\n146\n00:08:29.320 --> 00:08:31.670\nthat's one of the reasons\nwhy we take a look here.\n\n147\n00:08:31.670 --> 00:08:34.960\n>> You know, Ronnie, I would think if, you\nknow, I'm a support, maybe I'm supporting\n\n148\n00:08:34.960 --> 00:08:38.830\nthe hardware aspect of this server and\nthat's a lot of difference.\n\n149\n00:08:38.830 --> 00:08:42.740\nI only see an English letter,\nbut eight bits versus 16 bits,\n\n150\n00:08:42.740 --> 00:08:46.340\nthat's twice the amount of information,\nand Mac to your thought on performance,\n\n151\n00:08:46.340 --> 00:08:49.370\nI can only think that that would chew up\nsome drive space very quickly if you're\n\n152\n00:08:49.370 --> 00:08:50.640\nnot paying attention to what you're doing.\n\n153\n00:08:50.640 --> 00:08:53.320\n>> It really can, and\nthat's why we want to be very careful.\n\n154\n00:08:53.320 --> 00:08:57.490\nIt doesn't always matter about\nthe The idea of the spacing so much.\n\n155\n00:08:57.490 --> 00:08:59.740\nDont get me wrong,\nthere is an impact performance.\n\n156\n00:08:59.740 --> 00:09:01.860\nBut there is also about\nthe need that you have.\n\n157\n00:09:01.860 --> 00:09:04.350\nIf you need everything\nto be in unicode because\n\n158\n00:09:04.350 --> 00:09:08.350\nall the rest of the data that you have\nstored everywhere else in unicode.\n\n159\n00:09:08.350 --> 00:09:10.580\nThen you follow that particular standard.\n\n160\n00:09:10.580 --> 00:09:13.540\nBut you will realize that it does\nimpact the way that your datas\n\n161\n00:09:13.540 --> 00:09:14.515\nare actually stored.\n\n162\n00:09:14.515 --> 00:09:17.320\nWhether it's eight bits\nversus the 16 bits here,\n\n163\n00:09:17.320 --> 00:09:21.430\nall that really does matter when it comes\ndown to some of the things that we have.\n\n164\n00:09:21.430 --> 00:09:23.480\nNow we talk about those\ntwo character types,\n\n165\n00:09:23.480 --> 00:09:26.230\nthat's not the end of data types,\nof course.\n\n166\n00:09:26.230 --> 00:09:29.940\nNow I'm just trying to show you at\nleast those two particular most generic\n\n167\n00:09:29.940 --> 00:09:32.470\ntypes that we actually\nhave to think about, okay.\n\n168\n00:09:32.470 --> 00:09:37.600\nNow, when we also take a look that means\nthat when we start entering in data,\n\n169\n00:09:37.600 --> 00:09:42.480\nwe have to worry about things like\nnumbers right, and we have to worry about\n\n170\n00:09:42.480 --> 00:09:46.840\nthings like characters or what\ntechnically we call string values too.\n\n171\n00:09:46.840 --> 00:09:49.710\nWe also think about things like dates,\nas well.\n\n172\n00:09:49.710 --> 00:09:54.230\nAnd then how can we actually use those to\nhelp us out when we start to take a look\n\n173\n00:09:54.230 --> 00:09:55.780\nat it a little bit more.\n\n174\n00:09:55.780 --> 00:09:58.890\nNow there's one other thing\nabout the generics of\n\n175\n00:09:58.890 --> 00:10:01.440\nthe use of data types that\nwe need to focus in on.\n\n176\n00:10:01.440 --> 00:10:04.670\nSo not only do we need to worry\nabout wether we're using regular or\n\n177\n00:10:04.670 --> 00:10:08.910\nunicode here and some of those specifics,\nbut we also need to decide on the idea\n\n178\n00:10:08.910 --> 00:10:14.250\nof what we call variable length and\nfixed length data as well.\n\n179\n00:10:14.250 --> 00:10:17.300\nNow when it comes down to\nidentifying these things, and\n\n180\n00:10:17.300 --> 00:10:20.490\nI'll show you exactly where we'll\ntake a look at this, right?\n\n181\n00:10:20.490 --> 00:10:25.330\nIs that you can always identify a fixed\nlink data type when you do not actually\n\n182\n00:10:25.330 --> 00:10:31.460\ninclude the word V-A-R, or VAR,\ninside of that data type name.\n\n183\n00:10:31.460 --> 00:10:37.320\nSo you might see things like N Character,\nor NCHAR,\n\n184\n00:10:37.320 --> 00:10:41.510\nor NBIN for binary, and\nsomething like that.\n\n185\n00:10:41.510 --> 00:10:44.690\nAnd what that means is that's\na fixed length data type.\n\n186\n00:10:44.690 --> 00:10:48.750\nUsually it's very easily distinguishable\nover here, and you actually see VAR.\n\n187\n00:10:48.750 --> 00:10:51.690\nNow let me show you what\nI'm talking about, maybe.\n\n188\n00:10:51.690 --> 00:10:54.350\nLet's see if I can swipe on over and\nget this done.\n\n189\n00:10:55.440 --> 00:10:58.830\nAnd then over here on the left hand side,\n\n190\n00:10:58.830 --> 00:11:03.440\nI'm going to kind of zoom in\non our field explorer and\n\n191\n00:11:03.440 --> 00:11:06.360\nI'm gonna use a table that's actually\nbeen fairly helpful because it actually\n\n192\n00:11:06.360 --> 00:11:11.300\nrepresents a lot of different data types\nhere which is this Person.Person table.\n\n193\n00:11:11.300 --> 00:11:15.810\nIf I expand that out and\nthen I expand out the columns\n\n194\n00:11:15.810 --> 00:11:19.770\ninside of the parenthasis that we see,\nright here,\n\n195\n00:11:19.770 --> 00:11:23.610\nyou can actually see the character and\nthe data type that we're talking about.\n\n196\n00:11:23.610 --> 00:11:28.360\nSo notice for a person type right here,\ninside of the parenthasis,\n\n197\n00:11:28.360 --> 00:11:31.870\nit tells me that this is an NCHAR and\n\n198\n00:11:31.870 --> 00:11:37.880\nthe length of that data is actually going\nto be two characters here for person type.\n\n199\n00:11:37.880 --> 00:11:40.870\nNow, I don't know what person\ntype is right away, but\n\n200\n00:11:40.870 --> 00:11:43.480\nI can tell you that this is\nactually telling me something\n\n201\n00:11:43.480 --> 00:11:47.670\nthat this is actually two\ncharacters long at max here, okay.\n\n202\n00:11:47.670 --> 00:11:51.960\nNow, when I think about that and I\ntranslate that into actual storage space,\n\n203\n00:11:51.960 --> 00:11:56.420\nI can tell you that that means whatever\nthose two characters are it's gonna take\n\n204\n00:11:56.420 --> 00:11:59.350\nup about 16 bits of data.\n\n205\n00:11:59.350 --> 00:12:04.840\nAnd then I have this\nother constraint right\n\n206\n00:12:04.840 --> 00:12:09.540\nhere on the side to the right\nof it that says not null.\n\n207\n00:12:09.540 --> 00:12:13.470\nNow what that tells me is\nthat even if I set up this,\n\n208\n00:12:13.470 --> 00:12:19.010\nif I were creating my own table and I\ndeclared the data type as being an NCHAR,\n\n209\n00:12:19.010 --> 00:12:24.200\nwhich means some type of string character,\ntwo characters long here.\n\n210\n00:12:24.200 --> 00:12:27.890\nWell, the not null means I\ncan not leave that blank.\n\n211\n00:12:27.890 --> 00:12:30.830\nSo as I create the database, that's fine.\n\n212\n00:12:30.830 --> 00:12:33.910\nAnd now somebody comes behind me and\ndoes data entry,\n\n213\n00:12:33.910 --> 00:12:38.560\nit's saying that they will have to fill\nthat in when you see the term not null.\n\n214\n00:12:38.560 --> 00:12:41.690\nNow you'll also notice that there's\nactually a couple of different ones here.\n\n215\n00:12:41.690 --> 00:12:43.450\nNotice this one for title.\n\n216\n00:12:43.450 --> 00:12:47.050\nTitle actually says,\nit's actually the same thing.\n\n217\n00:12:47.050 --> 00:12:50.090\nIt's actually the NCHAR type again,\nN characters,\n\n218\n00:12:50.090 --> 00:12:55.000\nnumber of characters, whatever it might\nbe, but notice that this one actually says\n\n219\n00:12:56.010 --> 00:12:59.910\nVAR in the middle which says that\nthis is of a variable length.\n\n220\n00:12:59.910 --> 00:13:01.970\nAnd notice the number eight here, okay?\n\n221\n00:13:01.970 --> 00:13:07.860\nEight is saying it can be a maximum\nof eight characters long in this one,\n\n222\n00:13:07.860 --> 00:13:10.400\nbut notice that this one can also be null.\n\n223\n00:13:10.400 --> 00:13:13.690\nNow if I come back to, whoa,\nit was a little bit zoomed in there.\n\n224\n00:13:13.690 --> 00:13:17.140\nIf I come back to this one,\nwell let's talk about that for\n\n225\n00:13:17.140 --> 00:13:21.650\na moment because this does actually\nmake a difference in terms of size and\n\n226\n00:13:21.650 --> 00:13:24.220\nthe storage that we have in our database.\n\n227\n00:13:24.220 --> 00:13:28.110\nIf we use a fixed-link data, and\nlet's say that I choose that one to be,\n\n228\n00:13:28.110 --> 00:13:30.860\nlet's say 25 characters long,\n\n229\n00:13:30.860 --> 00:13:36.360\nit doesn't matter if Wes actually types in\nthere, and it's only 10 characters long.\n\n230\n00:13:36.360 --> 00:13:42.050\nIt's going to store it in the database\nas being 25 characters regardless.\n\n231\n00:13:42.050 --> 00:13:48.980\nOr is actually 25 times 8, which is 200,\nkinda weird, but it's 200.\n\n232\n00:13:48.980 --> 00:13:54.190\nSo it would be 200 bytes long, okay,\nis what we would actually see.\n\n233\n00:13:54.190 --> 00:13:57.480\nEven though Wes might have actually typed\nin just a four character word there.\n\n234\n00:13:57.480 --> 00:14:00.625\n>> Ronnie, so let's say that I do\ntype in an eight characters there.\n\n235\n00:14:00.625 --> 00:14:03.235\nI'm gonna try my math and\nmaybe air ball here on camera.\n\n236\n00:14:03.235 --> 00:14:05.455\nI got 17 other characters of space.\n\n237\n00:14:05.455 --> 00:14:10.315\nWhat's going with that 17, you know,\ncharacters of space that's not being used?\n\n238\n00:14:10.315 --> 00:14:13.195\n>> Yeah, it's just fill in\nwith some type of filler or\n\n239\n00:14:13.195 --> 00:14:16.885\nsome type of information, but\nit's just gonna store in that way.\n\n240\n00:14:16.885 --> 00:14:18.055\nIt's kinda a weird thing,\n\n241\n00:14:18.055 --> 00:14:22.690\nbut realistically assign like what we\nactually probably do more often than not\n\n242\n00:14:22.690 --> 00:14:27.380\nright is that we go I know it's gonna take\nus ten boxes to store all of this stuff.\n\n243\n00:14:27.380 --> 00:14:29.060\nOkay, so let's just say books.\n\n244\n00:14:29.060 --> 00:14:30.090\nI love books.\n\n245\n00:14:30.090 --> 00:14:34.400\nAnd so I buy ten of those banker\nboxes to store books in and\n\n246\n00:14:34.400 --> 00:14:37.070\nI fill up and that attempt one\n\n247\n00:14:37.070 --> 00:14:41.040\nlet's say that what ends up happening is\nI only put three books in there okay.\n\n248\n00:14:41.040 --> 00:14:43.600\nSo all the other ones so\nlet's say I have ten to 20 books.\n\n249\n00:14:43.600 --> 00:14:45.910\nThat tenth one, I only have three books.\n\n250\n00:14:45.910 --> 00:14:48.210\nWell, do I still take up all ten boxes?\n\n251\n00:14:49.290 --> 00:14:49.830\nYeah.\n\n252\n00:14:49.830 --> 00:14:50.930\nIn reality I do.\n\n253\n00:14:50.930 --> 00:14:52.050\nBut if you're actually like me,\n\n254\n00:14:52.050 --> 00:14:54.800\nyou go, I'm not gonna actually\nhave a whole box for three books.\n\n255\n00:14:54.800 --> 00:14:56.220\nI just try to jam into another one.\n\n256\n00:14:56.220 --> 00:14:58.440\nYou know, spread it out between those.\n\n257\n00:14:58.440 --> 00:15:00.520\nBut overall though,\nyour database doesn't do that.\n\n258\n00:15:00.520 --> 00:15:03.400\nIt doesn't go, well, Ronnie,\nyou're out of space over here.\n\n259\n00:15:03.400 --> 00:15:04.380\nIt just says no.\n\n260\n00:15:04.380 --> 00:15:07.730\nWe're actually gonna say, hey that\nlast character, or whatever it is,\n\n261\n00:15:07.730 --> 00:15:11.120\nall those other remaining characters we're\nstill going to end up counting against\n\n262\n00:15:11.120 --> 00:15:15.910\nyou, because it's still taking up the same\nspace as what you actually said it should.\n\n263\n00:15:15.910 --> 00:15:19.050\nSame thing with that tenth box that I\nhave, that only has three books in it.\n\n264\n00:15:19.050 --> 00:15:23.530\nIt's going to take up the same\nrequisite amount of space in my storage\n\n265\n00:15:23.530 --> 00:15:26.760\nin the same way it does on my\nhard drive when I do that.\n\n266\n00:15:26.760 --> 00:15:30.940\nNow when you implement the idea\nof the VAR or the variable and\n\n267\n00:15:30.940 --> 00:15:35.920\nthe idea of the variable and characters,\nif I choose that max of 25 here,\n\n268\n00:15:35.920 --> 00:15:38.130\nokay, to actually be able to see that.\n\n269\n00:15:38.130 --> 00:15:41.630\nIf I choose that instead\nthat means it can grow.\n\n270\n00:15:41.630 --> 00:15:47.180\nSo, if now Wes actually chooses to\nenter only a what did I put there.\n\n271\n00:15:47.180 --> 00:15:51.050\nA two byte name as well,\nnot a two byte name.\n\n272\n00:15:51.050 --> 00:15:53.690\nA ten character name.\n\n273\n00:15:53.690 --> 00:15:58.009\nIt will actually shrink down to\nten bytes or to those ten bytes.\n\n274\n00:15:58.009 --> 00:16:01.910\nNow I say that, but there's a little\ncaveat to that as well because,\n\n275\n00:16:01.910 --> 00:16:06.920\nwhen we start doing this variable, it has\nto also store some extra information.\n\n276\n00:16:06.920 --> 00:16:08.440\nSo it's actually the 10 bytes,\n\n277\n00:16:08.440 --> 00:16:12.950\nplus the two more bytes,\nthat store some extra information.\n\n278\n00:16:12.950 --> 00:16:17.070\nBut it will actually shrink down, so\nif it was 10 bytes long altogether, or\n\n279\n00:16:17.070 --> 00:16:21.540\n10 characters long, It would actually\nbe essentially equal to 12, instead.\n\n280\n00:16:21.540 --> 00:16:23.240\nIf it's eight, it'd be equal to 10.\n\n281\n00:16:23.240 --> 00:16:24.560\nIf that make sense?\n\n282\n00:16:24.560 --> 00:16:26.490\nThis one actually can shrink, but\n\n283\n00:16:26.490 --> 00:16:29.730\nthe number that we use with it\ninside of the parenthesis here\n\n284\n00:16:29.730 --> 00:16:33.310\nis telling us the maximum size\nthat this thing should grow to.\n\n285\n00:16:33.310 --> 00:16:35.780\nBut it doesn't actually limit\nit on the minimum size.\n\n286\n00:16:35.780 --> 00:16:38.480\n>> I can see in your diagram there,\nRonnie,\n\n287\n00:16:38.480 --> 00:16:40.840\nthat there's always gotta be benefits and\npros, right?\n\n288\n00:16:40.840 --> 00:16:44.040\nThere's pros and cons to everything\nthat you've probably watched within this\n\n289\n00:16:44.040 --> 00:16:45.320\nepisode and many others.\n\n290\n00:16:45.320 --> 00:16:48.110\nThere's gotta be some pros and\ncons versus fixed and variable, right?\n\n291\n00:16:48.110 --> 00:16:50.560\n>> There really are, and\nI just listed them right here for us.\n\n292\n00:16:50.560 --> 00:16:54.280\nSo a lot of times when you\ndo have a database and\n\n293\n00:16:54.280 --> 00:16:57.710\nwhat you're interested in getting\nthe data into that database.\n\n294\n00:16:57.710 --> 00:16:59.400\nMaking sure it's actually ready.\n\n295\n00:16:59.400 --> 00:17:01.910\nWell, fixed link is actually more for\n\n296\n00:17:01.910 --> 00:17:05.140\nwhat we call write focused\ntypes of database systems.\n\n297\n00:17:05.140 --> 00:17:08.615\nIn other words, just writing\nthe data as quickly as we can.\n\n298\n00:17:08.615 --> 00:17:10.670\nWanna make sure that the ideas are here.\n\n299\n00:17:10.670 --> 00:17:15.490\nIf that's our goal, fix link data is\nthe way to go, but if we're retrieving\n\n300\n00:17:15.490 --> 00:17:19.730\ndata though, a lot of times what can\nalso end up happening is read operations\n\n301\n00:17:19.730 --> 00:17:24.950\nare faster, but there's actually times\nwhen it could also be slower as well.\n\n302\n00:17:24.950 --> 00:17:26.307\nWhich is weird, okay, and\n\n303\n00:17:26.307 --> 00:17:29.619\nthe reason why is it has to calculate\nthe way that this stuff works.\n\n304\n00:17:29.619 --> 00:17:33.915\nIn the fixed length hash as far as\nretrieving the data goes, okay?\n\n305\n00:17:33.915 --> 00:17:38.410\nUsually what happens is that they know\nwhat the maximum characters size is.\n\n306\n00:17:38.410 --> 00:17:42.060\nThey come with a hash value and then when\nthey go into a media search they actually\n\n307\n00:17:42.060 --> 00:17:45.120\nlook for all of the values\nthat have that same hash size.\n\n308\n00:17:45.120 --> 00:17:46.300\nWell, that makes sense.\n\n309\n00:17:46.300 --> 00:17:49.740\nThey actually go ahead and do search for\nthat and there it goes, but\n\n310\n00:17:49.740 --> 00:17:54.980\nin variable length data even though it\nis faster in terms of read operations.\n\n311\n00:17:54.980 --> 00:17:57.920\nIs slower when it actually starts\nto calculate those hashes,\n\n312\n00:17:57.920 --> 00:18:00.620\nbecause they can actually\nbe of variable sizes.\n\n313\n00:18:00.620 --> 00:18:04.710\nNow, not the hash itself, hashes are\nusually of fixed length, but the actual\n\n314\n00:18:04.710 --> 00:18:09.880\ncombination of the data as being\nvariable in size, means it actually will\n\n315\n00:18:09.880 --> 00:18:15.150\ncome up with again, a fixed-length hash as\ndisplayed to you, that's the same size.\n\n316\n00:18:15.150 --> 00:18:18.480\nBut it does mean that is has to actually\ncalculate a little bit differently\n\n317\n00:18:18.480 --> 00:18:22.120\nbased on all of that information which\ntakes a little bit longer as well.\n\n318\n00:18:22.120 --> 00:18:26.320\nSo it really depends on the size\nof the data that it ends up doing.\n\n319\n00:18:26.320 --> 00:18:28.670\nOf course,\nthe shorter the amount of data it is,\n\n320\n00:18:28.670 --> 00:18:32.130\nthe faster it's actually going to be\nretrieved for read operations too.\n\n321\n00:18:32.130 --> 00:18:34.499\nBut it's not always\ndependable in that sense.\n\n322\n00:18:35.660 --> 00:18:38.380\nFixed length as long as you have space.\n\n323\n00:18:38.380 --> 00:18:40.110\nIs probably a way an element to go,\n\n324\n00:18:40.110 --> 00:18:44.430\nbut most of us when we actually deal with\ncompeting input and output, your probably\n\n325\n00:18:44.430 --> 00:18:48.190\ngonna see variable length data is probably\ngonna wash out and be just about the same.\n\n326\n00:18:48.190 --> 00:18:51.440\nAnd a lot of times even better because\nthat's what we are normally retrieving\n\n327\n00:18:51.440 --> 00:18:55.010\nin our query,\nis actually the retrieval, okay?\n\n328\n00:18:55.010 --> 00:19:00.470\nSo, there's also a couple of other things\nthat we need to then talk about as well.\n\n329\n00:19:00.470 --> 00:19:04.810\nOkay, so let's go back over here to take\na look at some of our different data\n\n330\n00:19:04.810 --> 00:19:05.610\ntypes as well.\n\n331\n00:19:05.610 --> 00:19:08.960\nSo, let me go ahead and see if we can\n\n332\n00:19:08.960 --> 00:19:13.820\nget zoomed back in just a little bit more,\nokay?\n\n333\n00:19:14.850 --> 00:19:19.080\nNow, we've kind of focused in on these\ncharacter types a little bit, and now\n\n334\n00:19:19.080 --> 00:19:23.720\nwhen we take a look, notice that there's\nalso one called integer right here, okay?\n\n335\n00:19:23.720 --> 00:19:27.830\nNow, there's actually what we call\na numeric data types that we have, and\n\n336\n00:19:27.830 --> 00:19:31.460\nin the numeric data types there's\nactually a couple of different varieties\n\n337\n00:19:31.460 --> 00:19:34.960\nthere are some that actually report\nthings that are actually exact numbers,\n\n338\n00:19:34.960 --> 00:19:35.880\nas much as we can do.\n\n339\n00:19:35.880 --> 00:19:39.410\nAnd then there's also what\nwe call approximate values.\n\n340\n00:19:39.410 --> 00:19:41.640\nWhenever you use something\nlike the idea of integer,\n\n341\n00:19:41.640 --> 00:19:45.040\nnotice that this one does not\nhave a link associated with it.\n\n342\n00:19:45.040 --> 00:19:49.230\nSuch as the other ones that we see\nright here, which have a maximum size.\n\n343\n00:19:49.230 --> 00:19:52.370\nInteger is actually one of\nthe ones that actually says here's\n\n344\n00:19:52.370 --> 00:19:54.780\nhow big the numbers can be.\n\n345\n00:19:54.780 --> 00:19:58.290\nSo there are three different varieties\nof integer types here, okay?\n\n346\n00:19:58.290 --> 00:20:04.920\nThere is one that we call tiny integer and\nof course that means there is one we call\n\n347\n00:20:04.920 --> 00:20:11.030\nbig integer or big INT and then there\nis just the regular integer itself.\n\n348\n00:20:11.030 --> 00:20:16.510\nNow, if you're thinking in terms of size\nand storage well you are correct here,\n\n349\n00:20:16.510 --> 00:20:20.690\nit's not about how small you write\nthe characters in type them in.\n\n350\n00:20:20.690 --> 00:20:23.240\nSo, if you type in one that's\nan eight point font versus one\n\n351\n00:20:23.240 --> 00:20:25.890\nat 16 point font that's not what\nwe're talking about between big and\n\n352\n00:20:25.890 --> 00:20:28.930\nsmall, it's about the storage size itself.\n\n353\n00:20:28.930 --> 00:20:34.290\nSo for example, the regular integer type\nthat you see right here okay Is actually\n\n354\n00:20:34.290 --> 00:20:40.630\ngonna be storing a number that will will\nactually be a max of four bytes in itself.\n\n355\n00:20:40.630 --> 00:20:44.450\nNow, if you're not sure\nexactly how big that is.\n\n356\n00:20:44.450 --> 00:20:49.210\nIt's essentially 2 to the 32nd power,\nokay?\n\n357\n00:20:49.210 --> 00:20:52.270\nNow, for you and\nme that doesn't make a lot of sense.\n\n358\n00:20:52.270 --> 00:20:57.090\nBut essentially about a little bit under\n4.3 billion possibilities in terms of\n\n359\n00:20:57.090 --> 00:21:01.460\nnumbers, is what we can actually see,\nokay?\n\n360\n00:21:01.460 --> 00:21:02.404\nSo 4.3 billion,\n\n361\n00:21:02.404 --> 00:21:06.390\n4.295 billion, that's what we're really\ntalking most as far as the size.\n\n362\n00:21:06.390 --> 00:21:09.550\nSo this email promotion wherever\nthe campaign number is or\n\n363\n00:21:09.550 --> 00:21:14.870\nwhatever that number is, we can actually\ngo from campaign number one all the way\n\n364\n00:21:14.870 --> 00:21:19.760\nup to four billion 295 million\nsomething numbers if we needed to.\n\n365\n00:21:19.760 --> 00:21:23.740\nBut most of the time we're probably not\ngonna be doing something like that, okay?\n\n366\n00:21:23.740 --> 00:21:27.680\nSo, if we actually knew what the number\nwas gonna be as far as number promotions\n\n367\n00:21:27.680 --> 00:21:31.760\ngo, we could change this to\nthat tiny integer instead.\n\n368\n00:21:31.760 --> 00:21:35.430\nThe tiny integer though is one byte, okay?\n\n369\n00:21:35.430 --> 00:21:40.300\nOf actual data, and that would be\ntwo the eighth power instead, and\n\n370\n00:21:40.300 --> 00:21:44.770\nwhen we start thinking about that,\ntwo to the eighth power,\n\n371\n00:21:44.770 --> 00:21:48.810\nthat's 256 possible combinations,\nso you might see that.\n\n372\n00:21:48.810 --> 00:21:52.740\nAnd then of course, there's big\ninteger which is gonna be eight bytes.\n\n373\n00:21:52.740 --> 00:21:57.070\nNow, that's actually about\ntwo point something trillion\n\n374\n00:21:58.500 --> 00:22:00.530\nnumbers that you can also do.\n\n375\n00:22:00.530 --> 00:22:04.110\nSo in that idea of using\nan integer data type\n\n376\n00:22:04.110 --> 00:22:06.000\nthat's what you're actually\ntrying to determine.\n\n377\n00:22:06.000 --> 00:22:07.800\nDo I really need a big number?\n\n378\n00:22:07.800 --> 00:22:09.080\nDo I need a medium sized number?\n\n379\n00:22:09.080 --> 00:22:10.920\nDo I need a small number?\n\n380\n00:22:10.920 --> 00:22:12.740\nWell, that's what you can also do.\n\n381\n00:22:12.740 --> 00:22:17.300\nAnd once you actually set that up, now\nwhat that field will not allow somebody\n\n382\n00:22:17.300 --> 00:22:21.800\nthat's doing data input to do, is it will\nactually set a constraint in this way.\n\n383\n00:22:21.800 --> 00:22:25.690\nIf I try and type in a letter and then I\ntry and save it, it's gonna tell me I've\n\n384\n00:22:25.690 --> 00:22:29.470\ngot the wrong data type or\nI've got a mismatched data type here.\n\n385\n00:22:29.470 --> 00:22:33.130\nIt absolutely is gonna look for\nintegers or it's not gonna look for\n\n386\n00:22:33.130 --> 00:22:34.350\nit at all, okay?\n\n387\n00:22:34.350 --> 00:22:36.910\nSo we will see things like that too.\n\n388\n00:22:36.910 --> 00:22:39.980\nNow, the other ones are actually what\nyou might also see sometimes and\n\n389\n00:22:39.980 --> 00:22:43.230\nI don't have a value here at this table\nand I don't even know where I'd go and\n\n390\n00:22:43.230 --> 00:22:47.990\nfind this one but there's actually some\nthat we call approximate values as well.\n\n391\n00:22:47.990 --> 00:22:52.080\nApproximate's actually done in terms\nof what we call real or float, okay?\n\n392\n00:22:52.080 --> 00:22:55.550\nNow what in the world is that\nabout a lot of this stuff\n\n393\n00:22:55.550 --> 00:22:57.200\nis not only about the integer style, but\n\n394\n00:22:57.200 --> 00:23:02.430\nonce you actually start getting into\nthis idea of approximate values as well.\n\n395\n00:23:02.430 --> 00:23:06.950\nWe actually have numbers that\nwe can essentially round up.\n\n396\n00:23:06.950 --> 00:23:09.660\nNow, I need to go backward a little bit\nbecause I kind of skipped over this and\n\n397\n00:23:09.660 --> 00:23:10.580\nI didn't mean to.\n\n398\n00:23:10.580 --> 00:23:13.880\nIs not only are we dealing with\nintegers at times with the exact.\n\n399\n00:23:13.880 --> 00:23:17.300\nThere's also decimal places\nthat we have to deal with and\n\n400\n00:23:17.300 --> 00:23:19.710\nthere's also what we call a numeric value.\n\n401\n00:23:19.710 --> 00:23:24.100\nWhen I actually choose that instead, we're\nchoosing term decimal instead of integer\n\n402\n00:23:24.100 --> 00:23:27.420\nor anything like that, you're not\nsaying it's any less exact right,\n\n403\n00:23:27.420 --> 00:23:31.490\nas far as whole numbers go,\nyou're saying there may be decimal values.\n\n404\n00:23:31.490 --> 00:23:34.630\nAnd in the decimal places, if you actually\nsay, I know that there's gonna be\n\n405\n00:23:34.630 --> 00:23:37.770\ndecimal values associated with\nwhatever this numbers gonna be.\n\n406\n00:23:37.770 --> 00:23:41.550\nWell, if you know there has to be an exact\nnumber, and you can say I need a decimal\n\n407\n00:23:41.550 --> 00:23:44.900\ndata type, and then you can actually\nlimit the amount of decimal numbers.\n\n408\n00:23:44.900 --> 00:23:48.160\nSo you might say, I need it up\nto the tenth decimal place, and\n\n409\n00:23:48.160 --> 00:23:49.460\nit'll keep it, okay?\n\n410\n00:23:49.460 --> 00:23:51.849\nVery exact, all the way up\nto that tenth decimal place.\n\n411\n00:23:51.849 --> 00:23:54.123\nAnd then you can actually\nuse that instead,\n\n412\n00:23:54.123 --> 00:23:55.854\nif you need it it to be that exact.\n\n413\n00:23:55.854 --> 00:23:59.558\nBut then, you also of course have money\nthat will do the same thing, right?\n\n414\n00:23:59.558 --> 00:24:03.071\nSo like money things,\nlike $10.38, you and me,\n\n415\n00:24:03.071 --> 00:24:08.603\nit might actually matter that it actually\ncomes out to be the $0.38, so we would use\n\n416\n00:24:08.603 --> 00:24:14.100\nthe money integer that we have as well,\nor what we call or small money data type.\n\n417\n00:24:14.100 --> 00:24:17.490\nSo we might do that if we actually\nknow it's gonna be that exact.\n\n418\n00:24:17.490 --> 00:24:20.110\nBut if we're willing to round up though,\nwe can actually use what we call those\n\n419\n00:24:20.110 --> 00:24:22.380\napproximates, and\nthat's what I was really trying to get to.\n\n420\n00:24:22.380 --> 00:24:25.180\nI just kind skipped over to the decimal\nand money, I didn't mean to.\n\n421\n00:24:25.180 --> 00:24:27.970\nBut we actually would end\nup doing that instead.\n\n422\n00:24:27.970 --> 00:24:33.580\nThese approximate values allow us to\ndo exactly what I\"m talking about here,\n\n423\n00:24:33.580 --> 00:24:36.140\nwhich is, if it's $10.39 I might\nround up to what, $10.40, okay,\n\n424\n00:24:36.140 --> 00:24:38.870\nso I can actually use that.\n\n425\n00:24:38.870 --> 00:24:42.240\nNow remember that once we actually start\ndoing that, the numbers are no longer\n\n426\n00:24:42.240 --> 00:24:46.190\nexact, and so in that sense,\neverything will be rounded up or\n\n427\n00:24:46.190 --> 00:24:49.970\nrounded down, and that gives you\nan approximate value instead.\n\n428\n00:24:49.970 --> 00:24:53.520\nSo it really depends on what you're\nactually needing at that point.\n\n429\n00:24:53.520 --> 00:24:56.000\nIf you're actually doing stuff like this.\n\n430\n00:24:56.000 --> 00:24:58.400\nSo it gives you the ability to\nactually choose which one, and\n\n431\n00:24:58.400 --> 00:25:01.800\nwhen you actually do that, you're normally\nreferring to what we call float, or\n\n432\n00:25:01.800 --> 00:25:04.930\nwhat is called real,\nits actual number, okay?\n\n433\n00:25:04.930 --> 00:25:08.160\nSo when you start doing this\nthere's actually a value, and\n\n434\n00:25:08.160 --> 00:25:10.660\nI don't know why this word pops up.\n\n435\n00:25:10.660 --> 00:25:14.830\nBut, essentially the numbers to the\nright-hand side, I'm trying to make sure I\n\n436\n00:25:14.830 --> 00:25:17.680\nsay that right, to the right-hand\nside of the decimal place,\n\n437\n00:25:17.680 --> 00:25:20.580\nright, that's what they call a mantissa.\n\n438\n00:25:20.580 --> 00:25:24.260\nOkay.\nM-A-N-T-I-S-S-A.\n\n439\n00:25:24.260 --> 00:25:28.940\nSo, you can say when yes you use\na round-up type of data here,\n\n440\n00:25:28.940 --> 00:25:34.440\nof how you want to show up, what's the\nvalue, what's the size of the mantissa?\n\n441\n00:25:34.440 --> 00:25:37.940\nAnd that's what you're actually talking\nabout in terms of data places to the right\n\n442\n00:25:37.940 --> 00:25:38.640\nof the decimal,\n\n443\n00:25:38.640 --> 00:25:42.190\nand then when you are actually using that\nvariable one that I'm talking about here,\n\n444\n00:25:42.190 --> 00:25:45.500\nthe approximate one, it gives you\nthe ability to choose how big.\n\n445\n00:25:45.500 --> 00:25:48.840\nUsually the standard sizes\nare what we call four bites, or\n\n446\n00:25:48.840 --> 00:25:51.020\nthe idea of eight bites here.\n\n447\n00:25:51.020 --> 00:25:55.740\nSo either you're actually saying, hey,\nI want the decimal places to be between\n\n448\n00:25:55.740 --> 00:25:59.820\none and 24 decimal places, that's\nactually going to be the four bites, and\n\n449\n00:25:59.820 --> 00:26:05.030\nthen from 25 to 53 is going to be\neighth bites instead, in size.\n\n450\n00:26:05.030 --> 00:26:08.080\nMost of us are probably just gonna leave\nit at the default which is gonna default\n\n451\n00:26:08.080 --> 00:26:08.720\nto the smaller one.\n\n452\n00:26:08.720 --> 00:26:12.060\n>> You know, Ronnie,\nwhen I think of approximate versus exact,\n\n453\n00:26:12.060 --> 00:26:14.690\nI'll take the analogy of the number pi,\nright?\n\n454\n00:26:14.690 --> 00:26:21.810\nSo if we have number pi and\nwe're talking about 3.1415926535, right?\n\n455\n00:26:21.810 --> 00:26:26.880\nIf we need a number like that we might\nput that in an exact set up, right?\n\n456\n00:26:26.880 --> 00:26:30.220\nBut if we say, like a lot of people like,\nme, I'm never going to remember those\n\n457\n00:26:30.220 --> 00:26:33.670\nnumbers in fact I had to look it up to\nbegin with, but if I say 3.1 because\n\n458\n00:26:33.670 --> 00:26:37.207\nit's an approximate, we might do what\nyou said with the approximate side.\n\n459\n00:26:37.207 --> 00:26:40.180\n>> Right and so any time you do that\nthat's what's going to happen and\n\n460\n00:26:40.180 --> 00:26:43.090\nnormally the reason why we do\nthat is that all the sudden\n\n461\n00:26:43.090 --> 00:26:47.520\nthose decimal places like pi, they go\non forever in a non repeating pattern.\n\n462\n00:26:47.520 --> 00:26:50.890\nThey go on forever and ever and\never, as far as I know.\n\n463\n00:26:50.890 --> 00:26:53.420\nWell, when you actually\nuse the approximate value,\n\n464\n00:26:53.420 --> 00:26:56.330\nit will again either express\nit as a round up value or\n\n465\n00:26:56.330 --> 00:27:00.780\nit will express it in scientific notation,\nand that scientific notation is\n\n466\n00:27:00.780 --> 00:27:04.680\nactually what says, look, at this point,\nyou're not gonna actually go.\n\n467\n00:27:04.680 --> 00:27:09.480\nOnce it says, like,\n3.14 to the 29th place,\n\n468\n00:27:09.480 --> 00:27:12.210\nyou don't really care at that\npoint how small that really is.\n\n469\n00:27:12.210 --> 00:27:15.920\nSo just kind of realize that you will have\nthose values that are there too, okay.\n\n470\n00:27:15.920 --> 00:27:19.950\nSo we've already talked about some\nof our string value types as well.\n\n471\n00:27:19.950 --> 00:27:22.350\nAnd also of course, the date and time.\n\n472\n00:27:22.350 --> 00:27:24.320\nNow, on this one I don't have a date and\ntime.\n\n473\n00:27:24.320 --> 00:27:30.850\nBut let me scroll down here and\nfind the sales order history.\n\n474\n00:27:30.850 --> 00:27:34.250\nOr yeah, let's do that one,\nthat'll work, okay.\n\n475\n00:27:34.250 --> 00:27:36.660\nSo I just went to another table here.\n\n476\n00:27:38.690 --> 00:27:40.420\nAnd we'll try and\nsee that there's a couple,\n\n477\n00:27:40.420 --> 00:27:44.470\nlook, there's that tiny integer\nthat we saw and there's date time.\n\n478\n00:27:44.470 --> 00:27:47.250\nNow date time is another\ndata type field for us.\n\n479\n00:27:47.250 --> 00:27:48.350\nAnd this one's a little bit older.\n\n480\n00:27:48.350 --> 00:27:51.010\nThere's a data time too\nthat's designed for\n\n481\n00:27:51.010 --> 00:27:54.060\nthe newer standards that\nare also out there as well.\n\n482\n00:27:54.060 --> 00:27:58.400\nAnd so when you start seeing this this is\nwhere we're starting to see just a couple\n\n483\n00:27:58.400 --> 00:27:59.540\nof other ones too.\n\n484\n00:27:59.540 --> 00:28:00.808\nNow in terms of date time,\n\n485\n00:28:00.808 --> 00:28:04.450\ndate time of course can actually\ngive us exactly what it says here.\n\n486\n00:28:04.450 --> 00:28:08.170\nIt can actually give us the date\nusing the day, the month, and\n\n487\n00:28:08.170 --> 00:28:13.890\nthe year as well as the hours, minutes,\nand even seconds, okay, if we tell it to\n\n488\n00:28:13.890 --> 00:28:18.020\nreport those values, and we can even tell\nit to report microseconds if we need to.\n\n489\n00:28:18.020 --> 00:28:22.450\nSo some of these are really important in\nthat sense that you can actually do that.\n\n490\n00:28:22.450 --> 00:28:25.760\nSo this, again, takes up value,\nor, not value, but\n\n491\n00:28:25.760 --> 00:28:28.130\nspace on your hard drive as well.\n\n492\n00:28:28.130 --> 00:28:31.260\nAnd so, depending on what you're doing,\nwhether it's date time two,\n\n493\n00:28:31.260 --> 00:28:36.550\ndate time, small date time, these\nare taking up variable amounts of space.\n\n494\n00:28:36.550 --> 00:28:41.400\nSo if you don't need all that detail,\nsuch as the day timers actually the day,\n\n495\n00:28:41.400 --> 00:28:44.920\nmonth, year and the hour,\nminute and second.\n\n496\n00:28:44.920 --> 00:28:48.730\nYou gotta know, the only thing I\nreally need is this date itself.\n\n497\n00:28:48.730 --> 00:28:52.960\nYou might choose to use the date value,\nso the comparison is fairly simple.\n\n498\n00:28:52.960 --> 00:28:56.500\nDay time takes up eight bytes,\nif you are actually reporting it.\n\n499\n00:28:56.500 --> 00:28:59.950\nAnd then that means that the date\nitself only takes up three bytes.\n\n500\n00:28:59.950 --> 00:29:03.230\nAnd usually there's actually some\nin between there such as date,\n\n501\n00:29:03.230 --> 00:29:07.040\ntime too and that's the preferred one\nthat they recommend that you also\n\n502\n00:29:07.040 --> 00:29:08.480\nend up using as well.\n\n503\n00:29:08.480 --> 00:29:13.480\nSo, when we start to see this, where in\nthe world does this also impact us at?\n\n504\n00:29:13.480 --> 00:29:17.820\nWell, let's take a look here at just\none example cuz I noticed something.\n\n505\n00:29:17.820 --> 00:29:20.200\nWe're actually running out of\ntime just a little bit here.\n\n506\n00:29:20.200 --> 00:29:23.180\nTalk about of theorem we've\ngot lot to show you as well.\n\n507\n00:29:23.180 --> 00:29:27.320\nBut, one of the things we can do then\nis that what we can do, is we can\n\n508\n00:29:27.320 --> 00:29:31.900\ntake a look at why date time actually\nsetting this fairly important for us.\n\n509\n00:29:31.900 --> 00:29:36.430\nSo, let me go ahead and run a select\nstatement here and I have actually choose\n\n510\n00:29:36.430 --> 00:29:42.580\nenough fairly complex one and this\npoint And we're just gonna mess around,\n\n511\n00:29:42.580 --> 00:29:46.610\nat least at the beginning here,\nwith the idea of the hire date.\n\n512\n00:29:46.610 --> 00:29:49.250\nWhich is right smack\ndab here in the middle.\n\n513\n00:29:49.250 --> 00:29:53.320\nNow if zoom in on that hire date,\nyou can see\n\n514\n00:29:53.320 --> 00:29:58.360\nwhere I can actually report out any\nportion of this that I wanted to as well.\n\n515\n00:29:58.360 --> 00:30:03.470\nSo even though that actually that's\nshowing me the entire date here I can now,\n\n516\n00:30:03.470 --> 00:30:08.310\nsince I know the data type is of\nsome date time, if I remember right.\n\n517\n00:30:08.310 --> 00:30:12.630\nTake a look over here\non the left hand side.\n\n518\n00:30:12.630 --> 00:30:13.990\nAnd I go to sales person.\n\n519\n00:30:15.640 --> 00:30:18.310\nIt's not actually not there,\nit's actually under person table.\n\n520\n00:30:18.310 --> 00:30:19.270\nI'm sorry.\n\n521\n00:30:19.270 --> 00:30:24.470\nLet me verify something\nhere person.person,\n\n522\n00:30:24.470 --> 00:30:27.410\nand where is the hire date for this guy.\n\n523\n00:30:27.410 --> 00:30:29.830\nThat's what I'm looking for gracious.\n\n524\n00:30:29.830 --> 00:30:31.250\nLet's check out an employee\n\n525\n00:30:32.660 --> 00:30:35.860\nthat's probably up here somewhere under\nhuman resources employee on that.\n\n526\n00:30:37.760 --> 00:30:38.820\nHireDate, there we go.\n\n527\n00:30:38.820 --> 00:30:41.720\nThis is actually just\na date function in itself.\n\n528\n00:30:41.720 --> 00:30:44.470\nSo that's why we're not seeing\nthe actual date, and time, and\n\n529\n00:30:44.470 --> 00:30:46.380\nthe values along with that.\n\n530\n00:30:46.380 --> 00:30:48.590\nBut then, I can run this again.\n\n531\n00:30:48.590 --> 00:30:51.550\nAnd instead,\nthere are some functions that I can use.\n\n532\n00:30:51.550 --> 00:30:57.240\nLet's say I can actually use what's called\nthe year function to help me to strip out,\n\n533\n00:30:57.240 --> 00:30:58.730\nthe month and the day.\n\n534\n00:30:58.730 --> 00:31:01.390\nOkay?\nSo this is just an example of how we can\n\n535\n00:31:01.390 --> 00:31:05.590\nalso use that date,\nthe data type to help us out.\n\n536\n00:31:07.600 --> 00:31:10.930\nOops, I'm about to run like, two or\nthree queries at the same time.\n\n537\n00:31:10.930 --> 00:31:12.130\nThat's not gonna work.\n\n538\n00:31:12.130 --> 00:31:12.730\nLet me do it this way.\n\n539\n00:31:17.000 --> 00:31:20.990\nSo now take a look here,\nnow that I've actually went ahead and\n\n540\n00:31:20.990 --> 00:31:26.620\nthen started in the YEAR function,\nthat strips out the rest of the date and\n\n541\n00:31:26.620 --> 00:31:30.470\ntime, and right now, underneath\nthe (No column name), you'll see it\n\n542\n00:31:30.470 --> 00:31:34.620\nallowed me to actually go ahead and\nactually show you just the year itself.\n\n543\n00:31:34.620 --> 00:31:39.338\nSame thing, then,\nif I take this and I just do month.\n\n544\n00:31:42.848 --> 00:31:48.208\nSo I select that and also run this.\n\n545\n00:31:51.923 --> 00:31:53.172\nWow, all right.\n\n546\n00:31:53.172 --> 00:31:56.210\n>> [LAUGH]\n>> Maybe not.\n\n547\n00:31:56.210 --> 00:31:57.720\nI'm gonna get people dizzy, how's that?\n\n548\n00:31:59.790 --> 00:32:00.770\nRun that instead.\n\n549\n00:32:02.980 --> 00:32:08.600\nNow we can also see where\nstripped out the year and\n\n550\n00:32:08.600 --> 00:32:12.930\nthe day and it returned to me that\nparticular month value instead.\n\n551\n00:32:12.930 --> 00:32:16.250\nSo you might be wondering at times\nwhen you are actually pulling\n\n552\n00:32:16.250 --> 00:32:19.360\nin the information insides\nof your SQL query.\n\n553\n00:32:19.360 --> 00:32:22.090\nCan actually do a query and\n\n554\n00:32:22.090 --> 00:32:26.750\nuse the data type to really help me to\nfind the value that I'm looking for?\n\n555\n00:32:26.750 --> 00:32:28.360\nAbsolutely, right.\n\n556\n00:32:28.360 --> 00:32:31.340\nSo this really does help\nto characterize and\n\n557\n00:32:31.340 --> 00:32:34.930\nactually add in a few special\nthings to be able to do this.\n\n558\n00:32:34.930 --> 00:32:36.010\nNow, we're not completely done.\n\n559\n00:32:36.010 --> 00:32:39.530\nWe haven't even talked about some of the\nspecial things that we can do with string\n\n560\n00:32:39.530 --> 00:32:42.760\ncharacters too to see\nwhat can happen there.\n\n561\n00:32:42.760 --> 00:32:45.410\nBut Wes,\nit looks like you let me talk too long.\n\n562\n00:32:45.410 --> 00:32:45.910\n>> Yes, I did.\n\n563\n00:32:45.910 --> 00:32:48.230\n>> That means we have to\ngo to another episode.\n\n564\n00:32:48.230 --> 00:32:51.260\n>> That's right, and in this episode\nwe have been looking at the data types.\n\n565\n00:32:51.260 --> 00:32:53.880\nAnd keep in mind that the data types\nare important when you are designing your\n\n566\n00:32:53.880 --> 00:32:58.970\ndatabase and Ronnie has shown us how\nthey can potentially affect performance,\n\n567\n00:32:58.970 --> 00:33:01.090\nwhether it's a read operation or\nwrite operation.\n\n568\n00:33:01.090 --> 00:33:02.830\nRonnie, got anything else for\nus in this one?\n\n569\n00:33:02.830 --> 00:33:05.630\nWell, not so much for this one,\nbut we still have a lot to go.\n\n570\n00:33:05.630 --> 00:33:09.040\nLike I said, one of the neat things that\nwe can actually end up doing is taking\n\n571\n00:33:09.040 --> 00:33:12.960\nthat data type and showing you some of\nthe other things we can do especially with\n\n572\n00:33:12.960 --> 00:33:13.870\nthe string character.\n\n573\n00:33:13.870 --> 00:33:16.370\nSo, you do want stay tuned for\nthis part two.\n\n574\n00:33:16.370 --> 00:33:17.260\n>> Well, I thank you for that.\n\n575\n00:33:17.260 --> 00:33:19.310\nAnd I thank you,\nviewers out there for watching.\n\n576\n00:33:19.310 --> 00:33:21.660\nBut we're gonna go ahead and\nsign off her at ITProTV.\n\n577\n00:33:21.660 --> 00:33:23.150\nI've been your host, Wes Bryan.\n\n578\n00:33:23.150 --> 00:33:24.140\n>> And I'm Ronnie Wong.\n\n579\n00:33:24.140 --> 00:33:26.238\n>> And we'll see you next time.\n\n580\n00:33:26.238 --> 00:33:31.622\n[MUSIC]\n\n",
          "vimeoId": "164707839"
        },
        {
          "description": null,
          "length": "1908",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-10-2-implement_datatypes_pt2-042716-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-10-2-implement_datatypes_pt2-042716-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-2-10-2-implement_datatypes_pt2-042716-1-sm.jpg",
          "title": "Implement Data Types Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.682 --> 00:00:16.630\nWelcome back to another exciting episode\nof ITProTV and I'm your host Wes Bryan.\n\n3\n00:00:16.630 --> 00:00:17.780\nIn today's episode,\n\n4\n00:00:17.780 --> 00:00:22.950\nwe are continuing along in our\nquerying Microsoft SQL Server 2014.\n\n5\n00:00:22.950 --> 00:00:24.660\nWe're actually coming\nback with a part two.\n\n6\n00:00:24.660 --> 00:00:28.300\nThat's right, we talked a lot in part one,\ncouldn't get all the information in there\n\n7\n00:00:28.300 --> 00:00:31.600\nso joining me back in the studios is Mr.\nRonnie Wong.\n\n8\n00:00:31.600 --> 00:00:32.670\nHow you doing, Ronnie?\n\n9\n00:00:32.670 --> 00:00:33.380\n>> I'm doing fine.\n\n10\n00:00:33.380 --> 00:00:36.500\nAs we continue to take a look at\nmore about implementing the idea of\n\n11\n00:00:36.500 --> 00:00:37.770\ndata types here.\n\n12\n00:00:37.770 --> 00:00:41.170\nIn our part one, we went over some of\nthe basics of using the data types and\n\n13\n00:00:41.170 --> 00:00:42.770\nwhere we tend to find them.\n\n14\n00:00:42.770 --> 00:00:45.820\nBut now we're also showing\nyou a little bit more, right.\n\n15\n00:00:45.820 --> 00:00:49.850\nNot only did we actually do a little\nbit of a demo of how we can actually\n\n16\n00:00:49.850 --> 00:00:53.920\nuse the data types and build a query\nthe information inside of a single field.\n\n17\n00:00:53.920 --> 00:00:55.610\nWe'll also need to do a little bit more,\n\n18\n00:00:55.610 --> 00:00:59.970\nbecause data types can help affect the way\nthat the data's actually reported for us.\n\n19\n00:00:59.970 --> 00:01:03.550\nAnd so that's what we also want\nto show you as we continue on\n\n20\n00:01:03.550 --> 00:01:06.790\nto take a look at implementing and\nusing data types as well, okay.\n\n21\n00:01:06.790 --> 00:01:09.670\nSo let's go back to what we have here\n\n22\n00:01:09.670 --> 00:01:12.600\non my screen as we continue\nto take a look here.\n\n23\n00:01:12.600 --> 00:01:17.370\nSo when we were doing this in\nthe previous episode, we essentially took\n\n24\n00:01:17.370 --> 00:01:22.310\nthe idea of the hire date and showed where\nwe can use certain types of functions\n\n25\n00:01:22.310 --> 00:01:26.510\nthat will allow us to take the base\nunderlying data type of HireDate here.\n\n26\n00:01:26.510 --> 00:01:30.080\nHere they extract out just a year or\nthe month and so\n\n27\n00:01:30.080 --> 00:01:33.100\nwe can see why data types\nlike that would be important.\n\n28\n00:01:33.100 --> 00:01:36.880\nNow using that same\nfunction on another field,\n\n29\n00:01:36.880 --> 00:01:40.410\nsay LastName here,\nwould absolutely not work.\n\n30\n00:01:40.410 --> 00:01:44.080\nLet me see if I can actually\nrun that to prove that to us,\n\n31\n00:01:44.080 --> 00:01:46.790\nIf I can spell out the word\nyear that would help.\n\n32\n00:01:46.790 --> 00:01:53.850\nNow if I select last name and then I try\nand run that same query here, maybe.\n\n33\n00:01:53.850 --> 00:01:56.210\nLet me see if I can do\na little bit better than that.\n\n34\n00:01:57.450 --> 00:01:58.320\nPull that down a little bit.\n\n35\n00:01:58.320 --> 00:02:02.090\nAnd then come up here.\n\n36\n00:02:02.090 --> 00:02:04.260\nSee if I can run this.\n\n37\n00:02:04.260 --> 00:02:05.640\nAnd execute it.\n\n38\n00:02:05.640 --> 00:02:11.040\nWhat you should end up seeing\ninstead is where it says conversion\n\n39\n00:02:11.040 --> 00:02:16.850\nfailed when converting date or\ntime from character called string here.\n\n40\n00:02:16.850 --> 00:02:17.580\nOkay?\n\n41\n00:02:17.580 --> 00:02:20.500\nSo it actually saw the function\nthat was actually year or\n\n42\n00:02:20.500 --> 00:02:22.970\na date time type of function.\n\n43\n00:02:22.970 --> 00:02:26.010\nAnd it says Ronnie is essentially what\nyou did is you ran that particular\n\n44\n00:02:26.010 --> 00:02:30.230\nfunction there, that's highlighted right\nhere, which is only supposed to run on\n\n45\n00:02:30.230 --> 00:02:33.240\nwhat the date time field and\nsaying I can't do that.\n\n46\n00:02:33.240 --> 00:02:36.640\nIt's not gonna allow me to be\nable to do anything like that.\n\n47\n00:02:36.640 --> 00:02:40.880\nSo in this sense here, notice that we're\nactually limiting and we're actually\n\n48\n00:02:40.880 --> 00:02:45.500\ndefining the characteristics of whatever\nthat field is gonna be and that means that\n\n49\n00:02:45.500 --> 00:02:48.400\nthere are actually certain types of\nfunctions that will work with certain\n\n50\n00:02:48.400 --> 00:02:52.510\nfields, and certain types of functions\nthat won't work with that field as well.\n\n51\n00:02:52.510 --> 00:02:57.100\nSo, we can show you in terms of year and\nour date and time, where we can do that.\n\n52\n00:02:57.100 --> 00:03:02.010\nAnd even the integer values can also help\nus to limit those the way that we want to.\n\n53\n00:03:02.010 --> 00:03:06.140\nBut, there's other things that we also\nwanna focus in on that help us again,\n\n54\n00:03:06.140 --> 00:03:09.780\nwhich is gonna be the idea of actually\nusing what we call the string functions\n\n55\n00:03:09.780 --> 00:03:11.800\nhere and when we start doing this.\n\n56\n00:03:11.800 --> 00:03:16.590\nNow, here I'm focusing in on well,\nstring values and so, let's take the idea\n\n57\n00:03:16.590 --> 00:03:21.560\nof first and last name right here as\nwe actually run the same query again.\n\n58\n00:03:22.690 --> 00:03:26.480\nLet me pull this down so I can pretty\nmuch pull the whole thing here.\n\n59\n00:03:28.040 --> 00:03:30.770\nAnd I'm just gonna highlight cuz that's\nthe only section that I really want to\n\n60\n00:03:30.770 --> 00:03:31.940\nexecute.\n\n61\n00:03:31.940 --> 00:03:36.580\nAnd then I ran that, and\nnow when I take a look at the information,\n\n62\n00:03:36.580 --> 00:03:39.980\nokay, so notice I have first name and\nlast name.\n\n63\n00:03:39.980 --> 00:03:42.420\nAnd it's actually set right here and\n\n64\n00:03:42.420 --> 00:03:46.320\neverything that actually looks pretty\nwell and good and the way that I want.\n\n65\n00:03:46.320 --> 00:03:51.360\nBut remember that even though it\nactually looks okay, it's very atomized.\n\n66\n00:03:51.360 --> 00:03:53.540\nIn other words, everything is\nactually in this chunk right.\n\n67\n00:03:53.540 --> 00:03:55.830\nSo we know that everything here\nin this column, this first name,\n\n68\n00:03:55.830 --> 00:04:00.610\nlast name, job title,\nhire date, address line, etc.\n\n69\n00:04:00.610 --> 00:04:02.190\nAs we have everything here.\n\n70\n00:04:02.190 --> 00:04:05.210\nBut it doesn't look really\nlike it was formatted for\n\n71\n00:04:05.210 --> 00:04:08.030\nanything that I would want\nto push out as a report.\n\n72\n00:04:08.030 --> 00:04:10.370\nI can print out a table that's fine, but\n\n73\n00:04:10.370 --> 00:04:13.860\nif I wanted this to actually be\nsomething like report ready,\n\n74\n00:04:13.860 --> 00:04:19.370\nwhat I would need to do instead is use\nwhat we call the concatenation instead.\n\n75\n00:04:19.370 --> 00:04:22.170\nAnd that's what we are gonna do is\nwe're gonna show you a little bit\n\n76\n00:04:22.170 --> 00:04:24.070\nof using what we call the concatenation.\n\n77\n00:04:24.070 --> 00:04:26.645\nNow what in the world is\na concatenation about?\n\n78\n00:04:26.645 --> 00:04:30.090\nConcatenation allows me to take\na string value, such as what we\n\n79\n00:04:30.090 --> 00:04:34.770\nsee in first name and last name, there's\ncharacters and words and values like that,\n\n80\n00:04:34.770 --> 00:04:38.490\nand be able to essentially\ncondense them into a single field.\n\n81\n00:04:38.490 --> 00:04:42.000\nOkay, now this is why it's\nactually very important.\n\n82\n00:04:42.000 --> 00:04:49.310\nIf I have an integer value, or a numeric\ndata type of any sort, whether it's money,\n\n83\n00:04:49.310 --> 00:04:54.340\nor whether it's a variable with decimal,\nor whether it's actually again an integer.\n\n84\n00:04:54.340 --> 00:05:00.300\nWell, if I were to use regular mathematic\noperators such as the plus sign,\n\n85\n00:05:00.300 --> 00:05:03.420\nwell in those fields it would\njust add them up, right?\n\n86\n00:05:03.420 --> 00:05:08.360\nWell, inside of the actual string field\nfunctions, well, they turn into something\n\n87\n00:05:08.360 --> 00:05:12.160\nelse that we call a concatenation\noperator is what they turn into.\n\n88\n00:05:12.160 --> 00:05:16.400\nAnd what that allows me to do is actually\nbe able to combine fields together.\n\n89\n00:05:16.400 --> 00:05:20.320\nSo let's take a look at how we do that and\nsee what the overall effect is gonna be.\n\n90\n00:05:21.490 --> 00:05:25.990\nSo now, let me go ahead, I'm gonna\nput this on the line by itself, and\n\n91\n00:05:25.990 --> 00:05:28.750\nwe're gonna actually use\na concatenation value here.\n\n92\n00:05:28.750 --> 00:05:33.250\nI'm gonna zoom in and what I want to do is\nI want to make sure that first name and\n\n93\n00:05:33.250 --> 00:05:35.230\nlast name show up as a single field value.\n\n94\n00:05:36.400 --> 00:05:40.370\nSo the way that I do that is I'm gonna put\nthese both on the same line to hopefully\n\n95\n00:05:40.370 --> 00:05:45.730\nmake it a little bit easier for us and\nthen I'm gonna start of with a plus sign.\n\n96\n00:05:45.730 --> 00:05:49.000\nNow notice the plus sign there is\nactually grey, which is perfectly fine.\n\n97\n00:05:50.020 --> 00:05:54.160\nAnd I want it to also show up with, well,\nI actually can run it just like this.\n\n98\n00:05:54.160 --> 00:05:57.860\nLet me do that and\nshow you what the result is gonna be.\n\n99\n00:05:57.860 --> 00:06:01.470\nSo now I've concatenated\nthese two values together.\n\n100\n00:06:01.470 --> 00:06:05.650\nI'm gonna also give it an alias, and\nI'm gonna call this one the Name.\n\n101\n00:06:05.650 --> 00:06:08.590\nJust as a value for the header here.\n\n102\n00:06:08.590 --> 00:06:11.824\nSo now, if I scroll back,\nor I zoom back out here,\n\n103\n00:06:11.824 --> 00:06:14.377\nlet me see if I can run that whole thing.\n\n104\n00:06:22.515 --> 00:06:24.070\nAll the way through to the word go.\n\n105\n00:06:25.320 --> 00:06:27.260\nAnd now I execute this.\n\n106\n00:06:27.260 --> 00:06:29.650\nNow let's take a look at the result here.\n\n107\n00:06:30.660 --> 00:06:36.930\nNow notice that in one column it now\nshows up as well, a single value.\n\n108\n00:06:36.930 --> 00:06:39.160\nSo now instead of two separate values,\n\n109\n00:06:39.160 --> 00:06:43.080\nnotice we have a single\nvalue showing up right here.\n\n110\n00:06:43.080 --> 00:06:46.980\nSo being able to do something like\nthat makes it look almost okay.\n\n111\n00:06:46.980 --> 00:06:50.440\nBut Wes, when you take a look at that,\ndoes that look a little bit squished in?\n\n112\n00:06:50.440 --> 00:06:52.010\n>> It does, it does look like it.\n\n113\n00:06:52.010 --> 00:06:56.470\nAnd following the goal here is to\nmake this report ready, that would\n\n114\n00:06:56.470 --> 00:07:00.400\ndefinitely be my reporting, but I don't\nknow if it would be too presentable.\n\n115\n00:07:00.400 --> 00:07:02.430\nI don't see spaces there,\nit looks jumbled together.\n\n116\n00:07:02.430 --> 00:07:03.210\n>> Yeah.\nWell Wes,\n\n117\n00:07:03.210 --> 00:07:05.899\nI challenge you to actually\nsay number eight here.\n\n118\n00:07:05.899 --> 00:07:08.705\n>> [LAUGH] I'd like to buy a vowel.\n\n119\n00:07:08.705 --> 00:07:09.940\n>> [LAUGH]\n>> Yeah.\n\n120\n00:07:09.940 --> 00:07:11.960\nNo.\nI don't mean to make fun of someone.\n\n121\n00:07:11.960 --> 00:07:14.940\nThat's a long name there and\nI probably couldn't say it myself.\n\n122\n00:07:14.940 --> 00:07:20.050\nSo here at this particular point I need\nto add in just a little bit more then.\n\n123\n00:07:20.050 --> 00:07:20.590\nOkay?\n\n124\n00:07:20.590 --> 00:07:23.570\nTo help make this actually\na little bit more presentable.\n\n125\n00:07:23.570 --> 00:07:27.160\nSo let me scroll back out and\nget back up here to the top.\n\n126\n00:07:27.160 --> 00:07:31.520\nAnd so when we do the concatenation,\nit's gonna give us the literal\n\n127\n00:07:31.520 --> 00:07:34.540\nof what it believes that it's\nactually supposed to do.\n\n128\n00:07:34.540 --> 00:07:40.870\nSo by just combining first and last\nname together, I now want to put a space\n\n129\n00:07:40.870 --> 00:07:46.880\nright in between those and\nif I do that I have to make it show up.\n\n130\n00:07:46.880 --> 00:07:52.126\nSo anything that you and I would type in,\nwe have to actually put it inside\n\n131\n00:07:52.126 --> 00:07:56.955\nof a literal because I'm using\nthe regular type of language here.\n\n132\n00:07:56.955 --> 00:07:59.887\nFor me a literal begins\nwith a single quote, and\n\n133\n00:07:59.887 --> 00:08:02.319\nnotice how everything else turns red.\n\n134\n00:08:02.319 --> 00:08:07.182\nAnd then I hit my space bar one time,\nand then I do my close in\n\n135\n00:08:07.182 --> 00:08:12.940\nthe single quote here, and\nnow I have add in the second part.\n\n136\n00:08:12.940 --> 00:08:17.240\nSo now when you take a note here,\nnotice what I'm really saying is,\n\n137\n00:08:17.240 --> 00:08:21.130\nI wanna concatenate the first name, and\n\n138\n00:08:21.130 --> 00:08:27.650\na single space along with the last name\nthat I've actually got reported here,\n\n139\n00:08:27.650 --> 00:08:32.980\nand this time when I run this value,\ngot to zoom all the way out here.\n\n140\n00:08:32.980 --> 00:08:36.402\nEvery time I think I can do this\nwithout having to zoom all the way out,\n\n141\n00:08:36.402 --> 00:08:37.229\nI am incorrect.\n\n142\n00:08:40.762 --> 00:08:41.586\nVery close.\n\n143\n00:08:48.510 --> 00:08:51.740\nClose, all right, so\nthen when I execute that, and\n\n144\n00:08:51.740 --> 00:08:53.680\nnow I take a look at the results.\n\n145\n00:08:54.950 --> 00:09:00.060\nNow, we can see that that\nlooks a lot better, okay?\n\n146\n00:09:00.060 --> 00:09:04.380\nSo now notice that there is separation\nof first and last name together for\n\n147\n00:09:04.380 --> 00:09:07.190\nus to be able to pull\nall that information and\n\n148\n00:09:07.190 --> 00:09:10.980\nshow that the way we normally\nwant to be able to do so\n\n149\n00:09:10.980 --> 00:09:16.360\nwe know that doing something like\nconcatenation can help us to combine those\n\n150\n00:09:16.360 --> 00:09:21.430\nvalues together and as you display\nit as single value we need to so\n\n151\n00:09:21.430 --> 00:09:25.660\nthat mean that we don't really have to\ndepend on a lot of fantasy maneuvering or\n\n152\n00:09:25.660 --> 00:09:30.070\neven a fancy program to help us\ndisplay this they way that we want to.\n\n153\n00:09:30.070 --> 00:09:34.170\nWe can use sequel itself along with the\npower of the data type, which is a string\n\n154\n00:09:34.170 --> 00:09:40.020\ndata type and the concatenation function\nto help us out a little bit more as well.\n\n155\n00:09:40.020 --> 00:09:43.120\nSo, it's a very powerful way\nthat data types are used.\n\n156\n00:09:43.120 --> 00:09:45.690\n>> And Ronnie, you were saying in\nthe beginning of this episode,\n\n157\n00:09:45.690 --> 00:09:48.590\nin the first part if you go back and\nwatch part one, that you're\n\n158\n00:09:48.590 --> 00:09:51.662\ngoing to be doing it completely different\nif you're using Unicode, right?\n\n159\n00:09:51.662 --> 00:09:55.360\nYou're gonna have that n instead of those\nquotes to escape those characters, right?\n\n160\n00:09:55.360 --> 00:09:58.130\n>> Yeah, that's pretty much about the only\ndifference here, but since I know I'm\n\n161\n00:09:58.130 --> 00:10:01.220\nusing regular [INAUDIBLE],\n>> Now the neat thing is,\n\n162\n00:10:01.220 --> 00:10:04.940\nwe can actually take this and\ncreate a whole new field with it as well.\n\n163\n00:10:04.940 --> 00:10:05.610\nOkay?\n\n164\n00:10:05.610 --> 00:10:09.220\nNow, this one actually again is\ngonna use a little bit more,\n\n165\n00:10:09.220 --> 00:10:12.380\nas far as the actual concatenation goes.\n\n166\n00:10:12.380 --> 00:10:16.790\nI wanna create an email address,\nis what I wanna do instead, okay?\n\n167\n00:10:16.790 --> 00:10:21.080\nNow you might say, well,\nwhy is an email address so important?\n\n168\n00:10:21.080 --> 00:10:22.990\nBut it depends on the convention, right?\n\n169\n00:10:22.990 --> 00:10:26.420\nSo usually a convention that we\nmight use as an email address is,\n\n170\n00:10:26.420 --> 00:10:28.960\nlet's say first initial, last name.\n\n171\n00:10:28.960 --> 00:10:31.650\nAnd then what, an at symbol and\nthen whatever your company is, right?\n\n172\n00:10:31.650 --> 00:10:34.530\nSo that's a pretty standard\ntype of convention.\n\n173\n00:10:34.530 --> 00:10:36.080\nWell I don't have anything like that.\n\n174\n00:10:36.080 --> 00:10:38.950\nI have my first name here, okay?\n\n175\n00:10:38.950 --> 00:10:43.670\nand I have no email address, no at symbol,\n\n176\n00:10:43.670 --> 00:10:48.130\nnothing like this at all, but because\nI can actually use string values and\n\n177\n00:10:48.130 --> 00:10:52.880\nI can use typing and concatenation,\nI can actually create a combination of\n\n178\n00:10:52.880 --> 00:10:57.150\njust about everything that I want just\nabout right here if I wanted too.\n\n179\n00:10:57.150 --> 00:10:58.690\nSo let's go ahead and do this.\n\n180\n00:10:58.690 --> 00:11:01.910\nSo I'm actually gonna add this\ninto my second line here.\n\n181\n00:11:01.910 --> 00:11:04.250\nAt least I think I am if I can\nactually get over here and type.\n\n182\n00:11:04.250 --> 00:11:06.580\nI'm gonna make it my second field.\n\n183\n00:11:06.580 --> 00:11:10.067\nNow let me see if I zoom in\na little bit to help us out.\n\n184\n00:11:13.323 --> 00:11:17.040\nSo sometimes, it actually helps like this,\nI'm gonna cheat a little bit.\n\n185\n00:11:17.040 --> 00:11:23.800\nI'm gonna copy this so far And then,\nthat's actually the first part.\n\n186\n00:11:23.800 --> 00:11:27.450\nNow, I'm actually gonna show this in\na couple of different steps here, okay?\n\n187\n00:11:27.450 --> 00:11:32.660\nSo now, I know that I have first name\nspace last name, and guess what?\n\n188\n00:11:32.660 --> 00:11:35.340\nNow I know I don't need,\nthat particular space.\n\n189\n00:11:35.340 --> 00:11:41.250\nSo I can remove that space and\nput that just like it was before Okay?\n\n190\n00:11:41.250 --> 00:11:43.180\nNow I need to add in that @ symbol,\n\n191\n00:11:43.180 --> 00:11:47.540\nand then whatever my domain name\nis gonna be for my email address.\n\n192\n00:11:47.540 --> 00:11:49.310\nWell now I can go ahead and do this.\n\n193\n00:11:49.310 --> 00:11:51.090\nI can do a +.\n\n194\n00:11:51.090 --> 00:11:55.540\nAnd then because I'm typing it in,\nI have to do a literal.\n\n195\n00:11:55.540 --> 00:11:59.203\nSo that's gonna be an @,\nand I'll just use itpro.tv.\n\n196\n00:12:00.240 --> 00:12:06.240\nAnd then I can close that one as well and\nnow as email.\n\n197\n00:12:06.240 --> 00:12:06.900\nHow's that?\n\n198\n00:12:06.900 --> 00:12:07.400\nOkay.\n\n199\n00:12:08.790 --> 00:12:11.550\nSo, I haven't completed exactly\nthe way that I told you but\n\n200\n00:12:11.550 --> 00:12:13.610\nI wanted us to see it in\na couple of steps here.\n\n201\n00:12:15.150 --> 00:12:21.190\nSo at this point You get everything here.\n\n202\n00:12:21.190 --> 00:12:22.714\nLet me run that as an execution.\n\n203\n00:12:26.423 --> 00:12:28.930\nAnd now we can see something here.\n\n204\n00:12:28.930 --> 00:12:32.920\nThis is close to the way that I\ntold you that it needed to be done.\n\n205\n00:12:32.920 --> 00:12:33.690\nOkay.\n\n206\n00:12:33.690 --> 00:12:35.670\nBut now notice that I've got first, and\n\n207\n00:12:35.670 --> 00:12:39.760\nlast name pretty much\nsquished in at itpro.tv.\n\n208\n00:12:39.760 --> 00:12:40.690\nPerfectly fine.\n\n209\n00:12:40.690 --> 00:12:41.510\nOkay.\n\n210\n00:12:41.510 --> 00:12:42.580\nThis guy right here.\n\n211\n00:12:42.580 --> 00:12:44.480\nThat's still a little bit long for\nan e mail.\n\n212\n00:12:44.480 --> 00:12:46.380\nBut if that's what it is,\nthat's what it is.\n\n213\n00:12:46.380 --> 00:12:46.920\nOkay?\n\n214\n00:12:46.920 --> 00:12:50.530\nAnd I told you what I wanna do is\nkind of condense that already down to\n\n215\n00:12:50.530 --> 00:12:53.780\nfirst initial, last name, okay?\n\n216\n00:12:53.780 --> 00:12:55.880\nSo let's see what we can do with that.\n\n217\n00:12:55.880 --> 00:12:58.750\nAnd this is where the idea of working\n\n218\n00:12:58.750 --> 00:13:02.050\nwith the data type really\ndoes help us out, okay?\n\n219\n00:13:02.050 --> 00:13:05.670\nSo it's all based on\nthe field of that data type.\n\n220\n00:13:05.670 --> 00:13:09.820\nI'm just using the concatenation function\nand a couple of other things to help us.\n\n221\n00:13:09.820 --> 00:13:14.360\nSo now, I'm actually going to use\na function around the first name\n\n222\n00:13:14.360 --> 00:13:16.000\ncalled the left function.\n\n223\n00:13:19.400 --> 00:13:22.100\nNow if I select left here.\n\n224\n00:13:24.140 --> 00:13:28.670\nAnd then, you can barely see, let me see\nif I can zoom in, cuz now it's actually\n\n225\n00:13:28.670 --> 00:13:32.810\ngoing away here, let me zoom in a little\nbit more see if I can bring that.\n\n226\n00:13:32.810 --> 00:13:35.980\nOf course, it's gonna continue\nto kinda haunt me if I do that.\n\n227\n00:13:35.980 --> 00:13:38.610\nNotice the way it actually described\nit in the little tool tip right.\n\n228\n00:13:38.610 --> 00:13:42.710\nIt says LEFT the expression\nof non variable character,\n\n229\n00:13:42.710 --> 00:13:44.460\nthat's actually right here.\n\n230\n00:13:44.460 --> 00:13:45.190\nAnd now saying hey,\n\n231\n00:13:45.190 --> 00:13:49.930\nwhat is the number of characters that\nyou want me to also return, okay?\n\n232\n00:13:49.930 --> 00:13:51.760\nIs what it's asking me.\n\n233\n00:13:51.760 --> 00:13:53.850\nSo on this one though, okay?\n\n234\n00:13:53.850 --> 00:13:56.980\nWhat I need to do is actually\ndo like a comma one.\n\n235\n00:13:56.980 --> 00:13:59.440\nNow this is either gonna return to me a c,\nor\n\n236\n00:13:59.440 --> 00:14:03.370\nit's actually gonna return to me\nthe first letter of the first name.\n\n237\n00:14:03.370 --> 00:14:06.000\nI have to actually see what happens\nhere cuz I haven't actually run that\n\n238\n00:14:06.000 --> 00:14:06.910\none before.\n\n239\n00:14:06.910 --> 00:14:09.870\nSo we'll see that and\nsee what happens, okay?\n\n240\n00:14:09.870 --> 00:14:14.390\nSo now, well, let me do something else so\n\n241\n00:14:14.390 --> 00:14:18.500\nwe can see the whole thing again, I know\nit kind of works great until you actually\n\n242\n00:14:18.500 --> 00:14:24.490\nhave a smaller screen on which\neverything doesn't fit, and\n\n243\n00:14:24.490 --> 00:14:30.400\nexecute and now let's see, there we go,\nthat looks a little bit better.\n\n244\n00:14:34.260 --> 00:14:35.310\nAt least I hope it does.\n\n245\n00:14:38.090 --> 00:14:42.670\nAnd now notice there it is,\nBMiller@itpro.tv and\n\n246\n00:14:42.670 --> 00:14:48.460\nnow we essentially have Almost a properly\nformatted type of email address.\n\n247\n00:14:48.460 --> 00:14:52.300\nNow more than likely this would\nactually work perfectly fine for\n\n248\n00:14:52.300 --> 00:14:54.570\nmost of everything that\nwe would want done.\n\n249\n00:14:54.570 --> 00:14:58.380\nBut if we wanted it totally\nproperly formatted a lot of times,\n\n250\n00:14:58.380 --> 00:15:01.750\nthis all is gonna also be in lowercase,\nright?\n\n251\n00:15:01.750 --> 00:15:05.340\nSo in other words, the whole of\nthat will also be in lowercase, So\n\n252\n00:15:05.340 --> 00:15:09.710\nwhat I can also do is actually implement\nwhat is called the lower function.\n\n253\n00:15:13.780 --> 00:15:17.330\nLets do that all the way around there.\n\n254\n00:15:17.330 --> 00:15:24.827\nAnd now, if I run that entire\nselect statement, and execute it.\n\n255\n00:15:27.409 --> 00:15:30.832\nNow that looks like a properly\nformatted email address instead.\n\n256\n00:15:34.255 --> 00:15:35.390\nAnd so, there we go.\n\n257\n00:15:35.390 --> 00:15:38.367\nAll of that is because of\nthe proper data types, and\n\n258\n00:15:38.367 --> 00:15:42.938\nthe ability to use functions that also\nallow us to take that proper data type and\n\n259\n00:15:42.938 --> 00:15:46.073\nconvert it to what we actually\nhave the ability to do.\n\n260\n00:15:46.073 --> 00:15:50.501\nSo not only do we have an example here\nof using concatenation in terms of\n\n261\n00:15:50.501 --> 00:15:55.004\nthe string data type, we use concatenation\nalong with some of the other\n\n262\n00:15:55.004 --> 00:15:58.457\nstring functions to help us\nagain by taking a look, and\n\n263\n00:15:58.457 --> 00:16:02.309\nnotice that we're able to\nconvert that fairly easily okay?\n\n264\n00:16:02.309 --> 00:16:05.773\nAnd so when you take a look at the end\nresult, it's exactly the way that\n\n265\n00:16:05.773 --> 00:16:09.670\nwe thought it would come out, or at least\nI hoped, I thought it would come out.\n\n266\n00:16:11.620 --> 00:16:13.210\nSo let's just take\na look at this again and\n\n267\n00:16:13.210 --> 00:16:16.860\nmake sure that we can see\nwhat it is that I typed in.\n\n268\n00:16:18.720 --> 00:16:22.390\nSo notice that I first started out\nby just combining the first and\n\n269\n00:16:22.390 --> 00:16:24.170\nlast name together.\n\n270\n00:16:24.170 --> 00:16:27.152\nAnd then we also,\nusing that as a concatenation,\n\n271\n00:16:27.152 --> 00:16:30.989\nthen we also typed in something\nthat I want to concatenate with.\n\n272\n00:16:30.989 --> 00:16:33.271\nWhich is right here at the end.\n\n273\n00:16:33.271 --> 00:16:37.835\nThen I used functions first to\nextract the very first letter on\n\n274\n00:16:37.835 --> 00:16:41.680\nthe left-hand side of the first name.\n\n275\n00:16:41.680 --> 00:16:43.190\nAnd then, once I did that.\n\n276\n00:16:43.190 --> 00:16:48.540\nI actually went ahead and did\na lowercase on the entire concatenation\n\n277\n00:16:48.540 --> 00:16:53.230\nof the first and last name and\nthe first letter to display this as well.\n\n278\n00:16:53.230 --> 00:16:56.220\nSo there's a lot of\nfunctions that we can use\n\n279\n00:16:56.220 --> 00:16:58.240\nbased on the data type to help do what?\n\n280\n00:16:58.240 --> 00:17:04.050\nTo help show exactly what I need it to\nshow when I end up running a query.\n\n281\n00:17:04.050 --> 00:17:07.969\nSo there is a lot of information\nthat we can do and data types.\n\n282\n00:17:07.969 --> 00:17:12.068\nThat is the reason why I can actually so\nsomething like that as well as use those\n\n283\n00:17:12.068 --> 00:17:16.169\nnumeric and those dates and everything\nelse to extract only what I need when my\n\n284\n00:17:16.169 --> 00:17:20.296\ndatabase may have more information in\nit then I really want it reporting out.\n\n285\n00:17:20.296 --> 00:17:23.254\nBecause remember that there's a lot of\ntimes when everything is not set up\n\n286\n00:17:23.254 --> 00:17:25.414\nexactly perfectly,\nespecially with date and time.\n\n287\n00:17:25.414 --> 00:17:29.483\nIt tends to report the date,\nand then it reports 0.0.0.0,\n\n288\n00:17:29.483 --> 00:17:32.950\nthere's a midnight time,\nright, of everything.\n\n289\n00:17:32.950 --> 00:17:35.500\nIt doesn't really have\na true time stamp on it.\n\n290\n00:17:35.500 --> 00:17:40.210\nSo we can even do something like,\nlet me add in something here as well and\n\n291\n00:17:40.210 --> 00:17:41.930\nshow you what I'm talking about.\n\n292\n00:17:41.930 --> 00:17:45.352\nSo now I'm just adding in stuff, so\n\n293\n00:17:45.352 --> 00:17:50.268\nif I type in get date here,\nas a function in itself.\n\n294\n00:17:55.997 --> 00:18:00.064\nWhoa I'm gonna give somebody\nsome dizziness there [LAUGH].\n\n295\n00:18:01.120 --> 00:18:03.820\nActually, this one did do the right date.\n\n296\n00:18:03.820 --> 00:18:05.330\nLike this.\n\n297\n00:18:05.330 --> 00:18:06.860\nI was not expecting this.\n\n298\n00:18:06.860 --> 00:18:09.530\nBut this will actually work for us.\n\n299\n00:18:09.530 --> 00:18:14.560\nSo notice that it gave me not only\nthe date, but also the timing.\n\n300\n00:18:14.560 --> 00:18:16.710\nAnd that's actually the proper\ntime which is weird.\n\n301\n00:18:16.710 --> 00:18:20.602\nSometimes when you actually see stuff like\nthis, especially when you import data in,\n\n302\n00:18:20.602 --> 00:18:21.608\nit might say 0.0.\n\n303\n00:18:21.608 --> 00:18:25.240\n00 hours, 00 minutes, 00 seconds here,\n\n304\n00:18:25.240 --> 00:18:28.600\nand it's even to the third\ndecimal place in terms of time.\n\n305\n00:18:28.600 --> 00:18:32.910\nSo even out to the thousands\nof a second is what we have\n\n306\n00:18:32.910 --> 00:18:35.180\nthe ability of actually\nend up seeing here.\n\n307\n00:18:35.180 --> 00:18:37.030\nSo when you have something like that and\n\n308\n00:18:37.030 --> 00:18:40.780\nthat's the actual time to set,\nwell notice that you can extract any\n\n309\n00:18:40.780 --> 00:18:45.240\nportion of that column that you want to by\nactually using some of those functions.\n\n310\n00:18:45.240 --> 00:18:48.300\nSo you do want to get familiar\nwith those types of functions and\n\n311\n00:18:48.300 --> 00:18:51.650\nmake sure you run through those as well or\nat least be able to identify.\n\n312\n00:18:51.650 --> 00:18:57.100\nIf you actually take a look at the idea\nhere of some type of SQL statement right,\n\n313\n00:18:57.100 --> 00:18:59.440\nthat you're actually having\nto debug a little bit.\n\n314\n00:18:59.440 --> 00:18:59.990\nVerify and\n\n315\n00:18:59.990 --> 00:19:03.880\nknow what it's actually going to report\nto you in terms of concatenation.\n\n316\n00:19:03.880 --> 00:19:06.890\nSo those functions as\nfar as using them for\n\n317\n00:19:06.890 --> 00:19:09.230\nextracting out what we need\nbecause of the data type.\n\n318\n00:19:09.230 --> 00:19:11.800\nVery important and\nthat means of course then\n\n319\n00:19:11.800 --> 00:19:16.380\nthat we have to understand those data\ntypes which we did talk about in the very\n\n320\n00:19:16.380 --> 00:19:20.380\nfirst part of this particular kind\nof little mini segment that we have.\n\n321\n00:19:20.380 --> 00:19:23.910\nNow the last thing that we wanna\nactually also address here is something\n\n322\n00:19:23.910 --> 00:19:25.330\na little bit more unique.\n\n323\n00:19:25.330 --> 00:19:26.160\nOkay?\n\n324\n00:19:26.160 --> 00:19:30.770\nAnd that is remember that every single\ntable that we end up putting into\n\n325\n00:19:30.770 --> 00:19:31.760\nare database.\n\n326\n00:19:31.760 --> 00:19:35.210\nWe're actually having connect\nthat into our database.\n\n327\n00:19:35.210 --> 00:19:40.270\nUsually it means that that table also\nhas what we call a unique identifier.\n\n328\n00:19:40.270 --> 00:19:43.110\nAnd that unique identifier normally has\ngonna end up being what we call our\n\n329\n00:19:43.110 --> 00:19:44.580\nprimary key.\n\n330\n00:19:44.580 --> 00:19:47.210\nBut it doesn't always\nhave to be like that.\n\n331\n00:19:47.210 --> 00:19:50.719\nAnd the reason why we actually need\nsomething like this, is let's take for\n\n332\n00:19:50.719 --> 00:19:52.792\nan example that you\nhave an employee table.\n\n333\n00:19:52.792 --> 00:19:57.570\nBut then you hire like let's\nsay 26 John Smith's in a row.\n\n334\n00:19:57.570 --> 00:19:58.300\nOkay?\n\n335\n00:19:58.300 --> 00:20:02.350\nWell you hire 26 John Smith's in a row,\nwell how do you actually keep them\n\n336\n00:20:02.350 --> 00:20:06.470\nseparated out to a point so\nthat what happens is\n\n337\n00:20:06.470 --> 00:20:10.350\nthat when you pay them paychecks it\ndoesn't all go to one John Smith.\n\n338\n00:20:10.350 --> 00:20:12.860\nWell that unique identifier\nis how you tend to do that.\n\n339\n00:20:12.860 --> 00:20:15.760\nAnd you can designate just\nabout anything that you want\n\n340\n00:20:15.760 --> 00:20:20.350\nto actually be that unique identifier,\nas long as the number remains unique.\n\n341\n00:20:20.350 --> 00:20:22.090\nIn other words, you don't reuse it.\n\n342\n00:20:22.090 --> 00:20:26.230\nOkay, you also don't tend to actually see\nit duplicated anywhere else throughout\n\n343\n00:20:26.230 --> 00:20:28.840\nthe entire table, then of course,\nthat can be unique.\n\n344\n00:20:28.840 --> 00:20:33.150\nNow most of us might think, easy,\nespecially here in the United States.\n\n345\n00:20:33.150 --> 00:20:34.730\nYou might use their\nsocial security number.\n\n346\n00:20:34.730 --> 00:20:37.180\nIn theory,\nthose are actually supposed to be unique.\n\n347\n00:20:37.180 --> 00:20:40.650\nBut at the same time you might actually\ncome up with your own employee ID number\n\n348\n00:20:40.650 --> 00:20:44.340\nthat never actually repeats as well,\nso that can also be one too.\n\n349\n00:20:44.340 --> 00:20:46.620\nBut there are some kinds\nwhere you actually have,\n\n350\n00:20:46.620 --> 00:20:48.760\nlet's say,\ndifferent products that come out.\n\n351\n00:20:48.760 --> 00:20:53.140\nOr you actually have something like let's\nsay like a support system that comes out\n\n352\n00:20:53.140 --> 00:20:58.580\nand that every single one of those has to\nactually be serialized or unique as well.\n\n353\n00:20:58.580 --> 00:21:01.780\nBecause let's say that Wes actually is the\none that calls up as a customer of mind.\n\n354\n00:21:01.780 --> 00:21:04.070\nBut he calls up often okay?\n\n355\n00:21:04.070 --> 00:21:07.220\nWell how do I separate those\nout even though it's actually\n\n356\n00:21:07.220 --> 00:21:09.200\nWes as being one customer.\n\n357\n00:21:09.200 --> 00:21:11.890\nBut this is let's say his\n16th time calling me.\n\n358\n00:21:11.890 --> 00:21:15.300\nHow do I actually uniquely identify that\nI'm actually responding to that one and\n\n359\n00:21:15.300 --> 00:21:19.360\nnot the 14th time or the 12th time or\nwhatever it might be okay?\n\n360\n00:21:19.360 --> 00:21:24.120\nWell the way that we can do that is we can\nactually have SQL help us by generating\n\n361\n00:21:24.120 --> 00:21:26.840\nand absolutely unique identifier.\n\n362\n00:21:26.840 --> 00:21:31.530\nNow when I say an absolutely unique\nidentifier, this is a unique identifier\n\n363\n00:21:31.530 --> 00:21:35.440\nthat I absolutely is unique\nin terms of space and time.\n\n364\n00:21:35.440 --> 00:21:39.496\nOkay, so that means it's not\nonly a unique time element, but\n\n365\n00:21:39.496 --> 00:21:43.942\nit's also again a unique number\nbased on that particular space that\n\n366\n00:21:43.942 --> 00:21:48.086\nit's actually going to end up\nholding in our database as well.\n\n367\n00:21:48.086 --> 00:21:51.390\nAnd that's when it comes up with something\nthat we call it a GUID or a guide,\n\n368\n00:21:51.390 --> 00:21:53.968\nhowever you want to actually\npronounce it is fine with me.\n\n369\n00:21:53.968 --> 00:21:56.830\nG-U-I-D, right?\n\n370\n00:21:56.830 --> 00:21:59.700\nA Globally Unique Identifier.\n\n371\n00:21:59.700 --> 00:22:04.560\nAnd inside of SQL there's actually two\ndifferent types of identifiers we can\n\n372\n00:22:04.560 --> 00:22:06.060\ncome up with.\n\n373\n00:22:06.060 --> 00:22:09.337\nOne is what we call\na sequential identifier.\n\n374\n00:22:09.337 --> 00:22:11.141\nThat says here is a unique identifier,\n\n375\n00:22:11.141 --> 00:22:14.380\nand then the next one is going\nto follow next in the sequence.\n\n376\n00:22:14.380 --> 00:22:17.590\nWe can do something like that and the idea\nof actually being able to do this for\n\n377\n00:22:17.590 --> 00:22:20.920\nlike the support ticket\nsystem is actually very good.\n\n378\n00:22:20.920 --> 00:22:26.180\nSo we might do that, or we can actually\ntell it to come up with a randomly unique\n\n379\n00:22:26.180 --> 00:22:31.330\nidentifier instead, one that will never\nagain be used in time or space again.\n\n380\n00:22:32.400 --> 00:22:36.310\nSo that's how unique this number\nset is supposed to end up being.\n\n381\n00:22:36.310 --> 00:22:39.360\nSo we can actually have\nit do that instead.\n\n382\n00:22:39.360 --> 00:22:42.470\nNow normally when we generate something\nlike this we want it actually done\n\n383\n00:22:42.470 --> 00:22:44.270\nwhen the table is created.\n\n384\n00:22:44.270 --> 00:22:44.900\nOkay?\n\n385\n00:22:44.900 --> 00:22:48.380\nSo another words after it's actually done,\nit probably doesn't want to do it, so\n\n386\n00:22:48.380 --> 00:22:51.115\nusually we do it during\nit's table creation.\n\n387\n00:22:51.115 --> 00:22:54.980\nBut lets go ahead and\ntake a look at this instead.\n\n388\n00:22:54.980 --> 00:23:00.710\nSo now we're actually going to go into\njust a little bit of a table creation here\n\n389\n00:23:00.710 --> 00:23:01.940\nto help us out.\n\n390\n00:23:01.940 --> 00:23:04.250\nLet's take a look at the table\nthat we are creating.\n\n391\n00:23:06.270 --> 00:23:06.950\nJust briefly.\n\n392\n00:23:08.220 --> 00:23:11.700\nAll right, so\nI'm gonna create a new dbo database object\n\n393\n00:23:11.700 --> 00:23:14.000\nwhich is a set to your table for\nwhat you and I are gonna do.\n\n394\n00:23:14.000 --> 00:23:16.450\nAnd there's the term CREATE TABLE.\n\n395\n00:23:16.450 --> 00:23:18.860\nAnd we are going to be getting\ninto table creation very soon.\n\n396\n00:23:18.860 --> 00:23:22.655\nSo even though we haven't done this yet,\nand you go man we jumped ahead,\n\n397\n00:23:22.655 --> 00:23:25.620\nwell don't worry we are actually\njust doing this as a demonstration\n\n398\n00:23:25.620 --> 00:23:29.930\nof the function that we are talking about\nover here which is Unique Identifier.\n\n399\n00:23:29.930 --> 00:23:34.329\nWell if I want to generate\na unique customer identifier.\n\n400\n00:23:34.329 --> 00:23:38.866\nI have this option to do this one,\nwhich is unique identifier, and\n\n401\n00:23:38.866 --> 00:23:43.170\nif I do that that's a random\nGUID that's actually generated.\n\n402\n00:23:43.170 --> 00:23:50.550\nG-U-I-D that's generated, but\nif I change this up instead and\n\n403\n00:23:50.550 --> 00:23:55.840\nI type in newsequential Identifier,\nI think.\n\n404\n00:23:55.840 --> 00:23:59.207\nOops, there we go, newsequentialid.\n\n405\n00:23:59.207 --> 00:24:01.262\nJust wanna make sure I'd\nsay that one right there.\n\n406\n00:24:01.262 --> 00:24:02.063\nYep, ID.\n\n407\n00:24:02.063 --> 00:24:05.580\nThat's about typing the entire word\nidentifier that would have been wrong.\n\n408\n00:24:05.580 --> 00:24:08.950\nNew sequential ID and the great thing\nis it actually colorize it for me.\n\n409\n00:24:08.950 --> 00:24:10.360\nI'd probably wouldn't done it anyways.\n\n410\n00:24:10.360 --> 00:24:12.270\nSo, this one would say,\n\n411\n00:24:12.270 --> 00:24:15.780\nwhatever number I start of with this fine,\nthe next bit of information here in,\n\n412\n00:24:15.780 --> 00:24:19.130\nI'm gonna actually generate\nthe sequence this follows up, okay?\n\n413\n00:24:19.130 --> 00:24:23.660\nSo this particular value when I\nclick this table, it cannot be null.\n\n414\n00:24:23.660 --> 00:24:24.390\nOkay?\n\n415\n00:24:24.390 --> 00:24:27.791\nAnd I'm gonna tell it and\nstart off with whatever the default is and\n\n416\n00:24:27.791 --> 00:24:30.964\nit's gonna actually be called\nthe newid() field for this.\n\n417\n00:24:30.964 --> 00:24:33.910\nAnd then we're gonna generate of\ncourse with some other fields here.\n\n418\n00:24:33.910 --> 00:24:38.380\nCompany name is gonna be a variable and\ncharacter of 30 size and length and\n\n419\n00:24:38.380 --> 00:24:44.090\nthat can't be null ContactName 60\ncharacters, Address variable 30, City.\n\n420\n00:24:44.090 --> 00:24:47.960\nAs you come on through here, you actually\nstart to see all of these things here.\n\n421\n00:24:47.960 --> 00:24:50.860\nAnd notice that I've actually added\nin the word not null to just about\n\n422\n00:24:50.860 --> 00:24:52.180\neverything here.\n\n423\n00:24:52.180 --> 00:24:53.390\nBut the last one here,\n\n424\n00:24:53.390 --> 00:24:56.720\nI actually put in null which\nmeans I can leave this one blank.\n\n425\n00:24:56.720 --> 00:24:59.490\nGo in and actually fill in\nanother record if I need to.\n\n426\n00:24:59.490 --> 00:25:01.920\nBut all of these other ones here,\nI'm telling it no,\n\n427\n00:25:01.920 --> 00:25:06.030\nyou cannot actually make\nthat null value at all.\n\n428\n00:25:06.030 --> 00:25:08.120\nSo, before I create this let me verify and\n\n429\n00:25:08.120 --> 00:25:12.730\nshow you that I do not have this table\nexisting in my current database.\n\n430\n00:25:14.190 --> 00:25:18.680\nSo, I'm gonna use the Adventure Works 2012\nDatabase, make sure I'm actually there.\n\n431\n00:25:18.680 --> 00:25:21.420\nSo there's Adventure Works 2012, and\n\n432\n00:25:21.420 --> 00:25:26.457\nI should not seen an object in my\nobject identifier called dbo.Customer.\n\n433\n00:25:27.670 --> 00:25:31.430\nSo If I scroll down through here,\nthis should be alphabetized, and\n\n434\n00:25:31.430 --> 00:25:38.230\nnotice I do not see dbo.Identifier right\nhere, dbo.Customer at all right there.\n\n435\n00:25:38.230 --> 00:25:38.730\nOkay.\n\n436\n00:25:40.180 --> 00:25:47.160\nSo I'm gonna run this very first query\nto go ahead and create this table.\n\n437\n00:25:47.160 --> 00:25:49.360\nSo I'm gonna execute that query and\n\n438\n00:25:49.360 --> 00:25:54.610\nI actually did a sequential\nidentifier at this point instead.\n\n439\n00:25:54.610 --> 00:25:58.180\nI meant to actually do the other one we\nmight do the other one in a moment here.\n\n440\n00:25:58.180 --> 00:26:02.437\nWe'll see, this should be enough,\nI'm gonna refresh that, and\n\n441\n00:26:02.437 --> 00:26:05.110\nnow, maybe, let me refresh that again.\n\n442\n00:26:06.490 --> 00:26:06.990\nHere.\n\n443\n00:26:08.610 --> 00:26:16.300\nI should now see dbo.Customer,\nyou want to know something,\n\n444\n00:26:16.300 --> 00:26:21.270\nit is not, wait, hold on,\ndid I actually select the right database?\n\n445\n00:26:24.050 --> 00:26:27.180\nLet me verify that I\nselected the right database.\n\n446\n00:26:27.180 --> 00:26:30.728\nSo I'm now actually I've run that, cuz I\ndon't see it, that's why I'm worried now.\n\n447\n00:26:30.728 --> 00:26:38.690\n[LAUGH] Execute and it says something\nactually completed with errors.\n\n448\n00:26:38.690 --> 00:26:39.830\nAll right.\nSo there we go.\n\n449\n00:26:39.830 --> 00:26:42.450\nSo this is actually telling\nme something here, okay.\n\n450\n00:26:42.450 --> 00:26:44.230\nSo this is actually a good thing for us.\n\n451\n00:26:44.230 --> 00:26:46.510\nLet me see if I can pull\nthat up a little bit.\n\n452\n00:26:46.510 --> 00:26:50.095\nSays column, parameter, or\nvariable and number one,\n\n453\n00:26:50.095 --> 00:26:53.466\ncannot find the data type newsequentialid,\nokay?\n\n454\n00:26:53.466 --> 00:26:55.875\nSo it's saying look,\nI don't want to use this one, and\n\n455\n00:26:55.875 --> 00:26:58.580\nthat's probably why I chose\nthe other one instead.\n\n456\n00:26:58.580 --> 00:27:00.160\nSo let's see if I can run the other one.\n\n457\n00:27:00.160 --> 00:27:06.140\nSo, it did not like my\nunique identifier here.\n\n458\n00:27:06.140 --> 00:27:10.318\nSo, let's see here.\n\n459\n00:27:10.318 --> 00:27:10.818\nThere we go.\n\n460\n00:27:13.670 --> 00:27:16.318\nLet me just backspace over that,\ncuz I was trying to remember this,\n\n461\n00:27:16.318 --> 00:27:17.830\nthe unique identifier.\n\n462\n00:27:17.830 --> 00:27:20.638\nSo, now let's see if\nthat actually created,\n\n463\n00:27:20.638 --> 00:27:23.309\ncuz the other one did not create for\nus here.\n\n464\n00:27:23.309 --> 00:27:25.470\nSo, there's something else that\nI was missing for that one.\n\n465\n00:27:25.470 --> 00:27:31.050\nAnd that we're gonna insert in some\nvalues for that and execute that.\n\n466\n00:27:31.050 --> 00:27:36.630\nAnd this time, it does say the command\nwas actually done successfully.\n\n467\n00:27:36.630 --> 00:27:43.440\nAnd now we will see that dbo.Customer\nhere has now actually made an appearance.\n\n468\n00:27:43.440 --> 00:27:46.760\nSo after all that time, that's cuz I typed\nin the command that it really didn't want\n\n469\n00:27:46.760 --> 00:27:50.290\nme to actually use there,\nwhich was that sequential identifier.\n\n470\n00:27:50.290 --> 00:27:53.570\nAnd now here's all the characters\nalong with the data types that I\n\n471\n00:27:53.570 --> 00:27:55.010\ntold you it would have.\n\n472\n00:27:55.010 --> 00:27:57.710\nNow the problem that I have with this\ntable right now is fairly simple.\n\n473\n00:27:57.710 --> 00:28:00.010\nThere's no data in it, okay?\n\n474\n00:28:00.010 --> 00:28:06.090\nWithout any data inside of that table\nit doesn't really tend to matter, okay?\n\n475\n00:28:06.090 --> 00:28:08.150\nSo whether anything is actually unique or\nnot.\n\n476\n00:28:08.150 --> 00:28:11.114\nLet me do a select, all, from,\n\n477\n00:28:11.114 --> 00:28:17.460\ndbo.Customer and I'm just gonna\nrun this very simple query here.\n\n478\n00:28:18.700 --> 00:28:20.345\nAnd I do an execution and\n\n479\n00:28:20.345 --> 00:28:25.213\nnow notice there's no data at all\ninside of my table right now, okay?\n\n480\n00:28:25.213 --> 00:28:30.220\nSo it doesn't have to generate\nany real customer ID or\n\n481\n00:28:30.220 --> 00:28:33.781\nanything cuz there's no data in it but\n\n482\n00:28:33.781 --> 00:28:37.916\nas soon as I start inserting in data,\nhere.\n\n483\n00:28:37.916 --> 00:28:44.381\nSo now I have an insert that will allow\nme to insert values into my database and\n\n484\n00:28:44.381 --> 00:28:49.850\nI execute that, verify that\nthe message says I'm successful.\n\n485\n00:28:51.180 --> 00:28:55.250\nSo, there it is, five rows have\nnow been affected at this point.\n\n486\n00:28:55.250 --> 00:28:56.830\nAnd now if I run.\n\n487\n00:28:59.110 --> 00:28:59.820\nAnd I execute.\n\n488\n00:29:01.310 --> 00:29:04.915\nNow, take a look here and\nnotice, there it is,\n\n489\n00:29:04.915 --> 00:29:10.414\nthere is all of the unique customer\nIDs now that it generated randomly for\n\n490\n00:29:10.414 --> 00:29:14.676\nus and that will ensure\nuniqueness to all these values.\n\n491\n00:29:14.676 --> 00:29:19.413\nNow, over here I've added in a few contact\nnames, hopefully you will recognize and\n\n492\n00:29:19.413 --> 00:29:19.980\nsee too.\n\n493\n00:29:19.980 --> 00:29:23.190\nSo that where you know that there was\nsomething that I actually generate and\n\n494\n00:29:23.190 --> 00:29:25.360\nnot something that I pulled\nin from somewhere else.\n\n495\n00:29:25.360 --> 00:29:28.440\nSo you'll still see some of the different\nones that are actually available for\n\n496\n00:29:28.440 --> 00:29:32.860\nus and as when the data was actually\nentered that I generated this unique Id\n\n497\n00:29:32.860 --> 00:29:37.070\nand that now ensures that this table\nwill have this unique customer Id.\n\n498\n00:29:37.070 --> 00:29:38.450\nIf probably not a great customer Id.\n\n499\n00:29:38.450 --> 00:29:42.620\nAnd it's not very easily identifiable but\nI could add that in anywhere and any of my\n\n500\n00:29:42.620 --> 00:29:48.290\ntables to ensure that uniqueness of every\nsingle record that I have available to us.\n\n501\n00:29:48.290 --> 00:29:51.620\nAnd that's why we might ask you\nwhat to do starting like this.\n\n502\n00:29:51.620 --> 00:29:57.270\nAnd it's very important that we understand\nthose ideas and those concepts here.\n\n503\n00:29:57.270 --> 00:30:00.350\nI'm being able to use the data types,\nto do what we need to do.\n\n504\n00:30:00.350 --> 00:30:04.050\nBeing able to generate a unique ID is part\nof the idea of actually understanding\n\n505\n00:30:04.050 --> 00:30:05.700\nthose data types as well.\n\n506\n00:30:05.700 --> 00:30:11.090\nAnd when you do that, you actually end up\nseeing, there it is, the data type itself.\n\n507\n00:30:11.090 --> 00:30:14.350\nWhich is that unique identifier for us.\n\n508\n00:30:14.350 --> 00:30:19.370\nAnd that will allow us to, again, use that\nas part of something that we can use now\n\n509\n00:30:19.370 --> 00:30:23.070\ninside of our database that will help\nus to do a lot of different things.\n\n510\n00:30:23.070 --> 00:30:27.670\nEspecially when it comes down to making\nsure we don't have duplicate records.\n\n511\n00:30:27.670 --> 00:30:30.290\nSo, there's a lot to data types\nthat we have to worry about.\n\n512\n00:30:30.290 --> 00:30:32.900\nAnd you've actually now seen\nhow to work with a lot of it.\n\n513\n00:30:32.900 --> 00:30:34.150\n>> A lot of great information.\n\n514\n00:30:34.150 --> 00:30:37.180\nBe aware of those data types, especially\nif you're deigning your database.\n\n515\n00:30:37.180 --> 00:30:39.380\nOr maybe you're studying for\na certification.\n\n516\n00:30:39.380 --> 00:30:41.060\nRonnie, you got anything else for\nus on this one?\n\n517\n00:30:41.060 --> 00:30:43.370\n>> Well just remember that\nas far as data types go,\n\n518\n00:30:43.370 --> 00:30:46.670\nespecially when you start to\ncreate the actual database and\n\n519\n00:30:46.670 --> 00:30:51.420\nof course the tables, you wanna use\na more flexible data type that you can.\n\n520\n00:30:51.420 --> 00:30:55.740\nBut a lot of times you also have to\nthink about the space requirements too.\n\n521\n00:30:55.740 --> 00:30:59.620\nSo usually most of the time in today's\nworld we try to choose the variable data\n\n522\n00:30:59.620 --> 00:31:02.690\ntype because it allows us to\ncondense it when we need to.\n\n523\n00:31:02.690 --> 00:31:06.730\nWhereas the actual fixed data type\nis not going to allow us to do that.\n\n524\n00:31:06.730 --> 00:31:11.350\nAnd bloat our database just a little bit\nmore and actually cause some issues too.\n\n525\n00:31:11.350 --> 00:31:14.890\nSo just remember that\nthere's a lot of power there.\n\n526\n00:31:14.890 --> 00:31:16.200\nAnd that's why we won't do that.\n\n527\n00:31:16.200 --> 00:31:19.120\nWe don't wanna actually\nmake everything a generic\n\n528\n00:31:19.120 --> 00:31:21.630\ndata type as far as\nevery single field goes.\n\n529\n00:31:21.630 --> 00:31:24.950\nWe need to use a proper type and\nimplement it when we need to.\n\n530\n00:31:24.950 --> 00:31:26.480\nAnd you've now seen\nsome of the situations,\n\n531\n00:31:26.480 --> 00:31:28.260\nin which you might choose to use it in.\n\n532\n00:31:28.260 --> 00:31:31.190\n>> Ronnie, as always, we do appreciate\nyour knowledge on this subject.\n\n533\n00:31:31.190 --> 00:31:33.180\nAnd we appreciate you viewers,\nfor joining us.\n\n534\n00:31:33.180 --> 00:31:34.498\nBut we're gonna go ahead and sign off.\n\n535\n00:31:34.498 --> 00:31:36.810\nFor ITProTV,\nI've been your host Wes Bryan.\n\n536\n00:31:36.810 --> 00:31:37.770\n>> And I'm Ronnie Wong.\n\n537\n00:31:37.770 --> 00:31:39.102\n>> And we'll see you next time.\n\n538\n00:31:39.102 --> 00:31:47.590\n[MUSIC]\n\n",
          "vimeoId": "164709076"
        }
      ],
      "title": "Work with data"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Ronnie explain using Stored Procedures in SQL 2014. They begin by introducing you to stored procedures; what they are and why they are used. Then they show you how to create a simple stored procedure utilizing both input and output parameters. Finally they go over Branching Logic controls used as conditional elements.",
          "length": "2013",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-1-create_and_alter_stored_procedures-050916-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-1-create_and_alter_stored_procedures-050916-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-1-create_and_alter_stored_procedures-050916-1-sm.jpg",
          "title": "Create and Alter Stored Procedures",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.736 --> 00:00:16.437\nAll right greetings everyone, and welcome\nto another exciting episode of IT Pro TV,\n\n3\n00:00:16.437 --> 00:00:20.419\nI am your host Daniel Lowrie and\nin today's episode we are continuing our\n\n4\n00:00:20.419 --> 00:00:23.511\nseries on querying\nthe Microsoft SQL Server 2014.\n\n5\n00:00:23.511 --> 00:00:27.180\nJoining us back in the studio again\ntoday with us to help us out with very\n\n6\n00:00:27.180 --> 00:00:29.610\nendeavor is our good friend Mr.\nRonnie Wong.\n\n7\n00:00:29.610 --> 00:00:31.240\nRonnie, welcome back to the show,\nand how's it going today?\n\n8\n00:00:31.240 --> 00:00:31.920\n>> It's going great.\n\n9\n00:00:31.920 --> 00:00:34.830\nThank you for having me back as we\ncontinue on to taking a look at more\n\n10\n00:00:34.830 --> 00:00:38.660\nof the elements that we can actually run\ninside, of course, the SQL server 2014.\n\n11\n00:00:38.660 --> 00:00:45.090\nToday we're going to be starting in\non creating basic stored procedures.\n\n12\n00:00:45.090 --> 00:00:48.690\nNow, we've already done quite a few\ndifferent types of things that really do\n\n13\n00:00:48.690 --> 00:00:52.530\nhelp us to be able to become more\nefficient with the SQL server,\n\n14\n00:00:52.530 --> 00:00:56.420\nsuch as views, being able to\nactually do a little bit more\n\n15\n00:00:56.420 --> 00:00:59.280\nwith some of the ways that we\ncan do some programmatic stuff.\n\n16\n00:00:59.280 --> 00:01:03.320\nBut overall though stored procedures are\nprobably the way that it's used more often\n\n17\n00:01:03.320 --> 00:01:07.250\nthan anything else, and so we want to take\na little bit of time to actually focus in\n\n18\n00:01:07.250 --> 00:01:09.250\non those stored procedures as well.\n\n19\n00:01:09.250 --> 00:01:12.820\nNow with the idea of stored procedures\nwhen you start hearing this,\n\n20\n00:01:12.820 --> 00:01:14.350\nit's exactly like it sounds.\n\n21\n00:01:14.350 --> 00:01:18.400\nIt can take procedures that you and I\nmight write, such as a SQL statement, and\n\n22\n00:01:18.400 --> 00:01:22.400\nstore them up and then we can call\non them by just issuing the name,\n\n23\n00:01:22.400 --> 00:01:26.820\ninstead of having to type out\nan entire SQL query if we wanted to.\n\n24\n00:01:26.820 --> 00:01:31.480\nSo that's actually kinda the key and\nthe idea behind what it allows us to do.\n\n25\n00:01:31.480 --> 00:01:33.210\nIt allows us to take\na whole batch of code and\n\n26\n00:01:33.210 --> 00:01:35.460\nessentially being able\nto call it up by name.\n\n27\n00:01:35.460 --> 00:01:39.630\nGreat process for us, but the idea of\nstored procedures actually go beyond that.\n\n28\n00:01:39.630 --> 00:01:43.910\nEven though that's what we're focusing\nin on, we can, again, take this idea and\n\n29\n00:01:43.910 --> 00:01:47.050\nactually put it towards more\nprogramming code, as well.\n\n30\n00:01:47.050 --> 00:01:50.340\nAnd being able to actually say look even\nin some of the programmatic stuff that we\n\n31\n00:01:50.340 --> 00:01:55.310\ndo with .NET framework and with DDLs and\neverything else here, what we can actually\n\n32\n00:01:55.310 --> 00:01:59.330\nuse storage procedures to actually help\nus to interact with those as well.\n\n33\n00:01:59.330 --> 00:02:01.790\nBut we're just focusing\nin on the very simple and\n\n34\n00:02:01.790 --> 00:02:06.640\nbasic concepts instead today which is\njust to create a stored procedure and\n\n35\n00:02:06.640 --> 00:02:09.890\nactually understand what we need\nto do to make sure that they run.\n\n36\n00:02:09.890 --> 00:02:13.060\nNow this is where it becomes\na little bit more complex\n\n37\n00:02:13.060 --> 00:02:15.290\nin what we're actually used to do.\n\n38\n00:02:15.290 --> 00:02:19.880\nCreating the idea of sequel queries might\nhave been a little bit more complex but\n\n39\n00:02:19.880 --> 00:02:24.010\nafter this point in time, and\nall of the actual querying that we've done\n\n40\n00:02:24.010 --> 00:02:27.836\nhopefully you actually feel a little bit\nmore confident cause just about in every\n\n41\n00:02:27.836 --> 00:02:31.610\nepisode we've been spending time\nin the actual query window and\n\n42\n00:02:31.610 --> 00:02:34.520\nallowing us to actually examine\nthe code and see how that's run.\n\n43\n00:02:34.520 --> 00:02:37.310\nWell, now we're actually going\nto do that and actually also\n\n44\n00:02:37.310 --> 00:02:41.070\ndo it in the form of stored procedure\nwhich should also help us out too.\n\n45\n00:02:41.070 --> 00:02:45.580\nNow because we're actually changing\nsome programming in the background,\n\n46\n00:02:45.580 --> 00:02:48.510\nwhat we're going to end up finding\nout of course then is that it also\n\n47\n00:02:48.510 --> 00:02:52.060\nrequires special permissions\nin the database as well.\n\n48\n00:02:52.060 --> 00:02:54.250\nSo when we start talking\nabout creating and\n\n49\n00:02:54.250 --> 00:02:57.230\naltering the idea of stored procedures,\n\n50\n00:02:57.230 --> 00:03:03.220\nwe need to make sure we have those types\nof permissions on our database as well.\n\n51\n00:03:03.220 --> 00:03:06.340\nAnd if you don't, you'll need to go and\ntalk to the database administrator.\n\n52\n00:03:06.340 --> 00:03:10.140\nMake sure you just ask him what I do, you\ndon't have to actually mention specific\n\n53\n00:03:10.140 --> 00:03:15.370\npermissions, but you can say I'm gonna\nbe creating stored procedures and\n\n54\n00:03:15.370 --> 00:03:19.770\nI may be modifying stored procedures,\ncan I get those permissions to do so?\n\n55\n00:03:19.770 --> 00:03:22.860\nMost of the time it's fine,\nbecause there's nothing that you're really\n\n56\n00:03:22.860 --> 00:03:25.690\nhitting underneath in the background yet,\nbut you do,\n\n57\n00:03:25.690 --> 00:03:29.390\nyou can cause a lot of damage with\nstored procedures if you're not careful.\n\n58\n00:03:29.390 --> 00:03:31.740\nBut overall though,\nif you actually do go ahead and\n\n59\n00:03:31.740 --> 00:03:34.690\nyou need to begin to create them,\nyou have to have the permissions to do so,\n\n60\n00:03:34.690 --> 00:03:38.960\nand that's kind of one of the keys\nwhen we start to do this.\n\n61\n00:03:38.960 --> 00:03:43.498\nNow we can actually create a fairly\nsimple stored procedure to complex\n\n62\n00:03:43.498 --> 00:03:45.790\nstored procedures as well.\n\n63\n00:03:45.790 --> 00:03:50.950\nThe idea behind this is how much\ndata can we get out of things.\n\n64\n00:03:50.950 --> 00:03:56.410\nAnd how can we actually make the idea\nof even a SQL query a bit more dynamic,\n\n65\n00:03:56.410 --> 00:03:59.700\nstored procedures are the way\nto help us out too.\n\n66\n00:03:59.700 --> 00:04:01.880\nThe other thing with stored procedures and\n\n67\n00:04:01.880 --> 00:04:06.880\nwhy we also want to use them, is that it\nactually works like views a lot of times.\n\n68\n00:04:06.880 --> 00:04:12.420\nWhere I can create a particular\nbatch of SQL queries that I want to\n\n69\n00:04:12.420 --> 00:04:17.930\nactually be able to return for a customer,\nand then they only get access to that.\n\n70\n00:04:17.930 --> 00:04:19.170\nSo what it does is it helps,\n\n71\n00:04:19.170 --> 00:04:23.120\nsay, the idea here that if you\nhave an application that's pulling\n\n72\n00:04:23.120 --> 00:04:27.780\nsome data from your database, that\nyou're not exposing the database itself.\n\n73\n00:04:27.780 --> 00:04:31.380\nYou're essentially just exposing\nthis particular procedure, and\n\n74\n00:04:31.380 --> 00:04:35.170\nit's just calling up that limited amount\nof information that they can get to.\n\n75\n00:04:35.170 --> 00:04:37.940\nAnd that way, you're actually allowing\nthem to only get access to that\n\n76\n00:04:37.940 --> 00:04:41.230\ninformation and not to the entire\nunderlying database as well.\n\n77\n00:04:41.230 --> 00:04:45.230\n>> That sounds like a DMZ almost,\nwhere you have an intermediary between\n\n78\n00:04:45.230 --> 00:04:49.870\nyourself or the outside to the more\nsensitive data on the inside.\n\n79\n00:04:49.870 --> 00:04:52.200\n>> Right, and so when you do that,\nright, you're limiting.\n\n80\n00:04:52.200 --> 00:04:54.040\nYou're saying, look,\nI know you need access to this, but\n\n81\n00:04:54.040 --> 00:04:56.650\ndo you really need access to this table?\n\n82\n00:04:56.650 --> 00:05:00.720\nIf you go, well it's fine, you can access\nthe entire database, remember that\n\n83\n00:05:00.720 --> 00:05:05.000\nthey may not be the only ones on their end\ntrying to gain access into the database.\n\n84\n00:05:05.000 --> 00:05:07.890\nAnd if you can limit that on your side,\n\n85\n00:05:07.890 --> 00:05:10.510\nyou're actually exposing\nas little as you can.\n\n86\n00:05:10.510 --> 00:05:13.970\nThe idea of the principle of least\nprivilege here actually says all right,\n\n87\n00:05:13.970 --> 00:05:15.970\nif you only need access\nto these five tables,\n\n88\n00:05:15.970 --> 00:05:19.740\nwell let's just give access to those five\ntables and not to the entire database.\n\n89\n00:05:19.740 --> 00:05:23.980\nA stored procedure allows you to create\nthe query that you want and even not\n\n90\n00:05:23.980 --> 00:05:29.120\nexpose the underlying connections to what\nthat particular application may need,\n\n91\n00:05:29.120 --> 00:05:32.090\nyou just give them the result that\nthey're actually hopefully expecting and\n\n92\n00:05:32.090 --> 00:05:33.600\nthat's all you're doing.\n\n93\n00:05:33.600 --> 00:05:38.090\nSo it's very handy to at least\nunderstand the beginnings of\n\n94\n00:05:38.090 --> 00:05:39.890\nhow this ends up working out.\n\n95\n00:05:39.890 --> 00:05:43.790\nThen what we're also going to do in this\nepisode is we're gonna take a look at how\n\n96\n00:05:43.790 --> 00:05:46.790\nwe add in what we call,\nof course, different parameters.\n\n97\n00:05:46.790 --> 00:05:52.220\nIn other words, to make that SQL query\nparameterized, so that you can also call\n\n98\n00:05:52.220 --> 00:05:57.940\nupon that name and issue those parameters\nout, and then it can return to you\n\n99\n00:05:57.940 --> 00:06:01.480\nthe results that you're actually expecting\nfrom that parameter or query as well.\n\n100\n00:06:01.480 --> 00:06:04.710\nSo we're going to see that in a couple\nof different steps when we start\n\n101\n00:06:04.710 --> 00:06:06.050\ngoing through this.\n\n102\n00:06:06.050 --> 00:06:09.650\nBut remember that a lot of times\nwhen people do need access to stuff,\n\n103\n00:06:09.650 --> 00:06:12.870\nthey don't need access to everything, and\nthat's probably where stored procedures\n\n104\n00:06:12.870 --> 00:06:18.270\ndo come in more often and the best because\nit means you can understand the logic.\n\n105\n00:06:18.270 --> 00:06:21.020\nThey don't have to,\nall they need access to is the data, and\n\n106\n00:06:21.020 --> 00:06:23.140\nyou can do that type\nof limitation as well.\n\n107\n00:06:23.140 --> 00:06:27.760\nSo, let's go ahead and take a look then at\nwhat it really helps us to be able to do,\n\n108\n00:06:27.760 --> 00:06:30.140\nand I hope this helps\nto set it in context.\n\n109\n00:06:30.140 --> 00:06:32.870\nNow, Daniel,\nwhat I've done is I've created a,\n\n110\n00:06:32.870 --> 00:06:37.010\nI'm gonna say relatively complex query.\n\n111\n00:06:37.010 --> 00:06:39.940\nI'm not gonna say it's\nthe most complex query, but\n\n112\n00:06:39.940 --> 00:06:42.350\nas far as join statements go, right.\n\n113\n00:06:42.350 --> 00:06:46.220\nSo, you can maybe see right here at the\nbeginning in the way that I've abbreviated\n\n114\n00:06:46.220 --> 00:06:50.210\nthese tables, If you actually notice,\nI created one,\n\n115\n00:06:50.210 --> 00:06:53.350\nthere's an abbreviation,\nthere's another abbreviation,\n\n116\n00:06:53.350 --> 00:06:56.910\nthere's another abbreviation,\nhere's another abbreviation.\n\n117\n00:06:56.910 --> 00:07:03.310\nSo there's at least five or six tables,\nand as I scroll on down through here,\n\n118\n00:07:03.310 --> 00:07:07.100\nthat was actually quite an inter\njoined process overall, right?\n\n119\n00:07:07.100 --> 00:07:10.930\nSo as we take a look there that's\nquite a few joints to actually\n\n120\n00:07:10.930 --> 00:07:13.560\nbe able to get the result\nthat I am looking for.\n\n121\n00:07:13.560 --> 00:07:17.180\nNow in that particular instance,\nif I want to do that,\n\n122\n00:07:17.180 --> 00:07:21.800\nthat's perfectly fine because I know\nthis database and I can do that.\n\n123\n00:07:21.800 --> 00:07:25.230\nBut if I were to say look, here you are,\nyou're a customer of mine and\n\n124\n00:07:25.230 --> 00:07:28.650\nyou have an application that needs to\nget access to those fields right here\n\n125\n00:07:28.650 --> 00:07:32.840\nthat are across multiple\ntables inside of my database.\n\n126\n00:07:32.840 --> 00:07:38.160\nWell, I could open up the entire database\nand allow you to do the same thing, okay?\n\n127\n00:07:38.160 --> 00:07:42.250\nBut this means that for you to figure out\nthose connections cuz you're not familiar\n\n128\n00:07:42.250 --> 00:07:45.594\nwith my database, It gives you\nample opportunity to explore what?\n\n129\n00:07:45.594 --> 00:07:49.730\nThe entirety of my database to find\nwhere these connections are, and\n\n130\n00:07:49.730 --> 00:07:53.653\nmaybe even to find connections\nthat you shouldn't know about and\n\n131\n00:07:53.653 --> 00:07:57.026\nactually be able to see\nthe underlying structure here.\n\n132\n00:07:57.026 --> 00:07:58.294\nSo can we do that?\n\n133\n00:07:58.294 --> 00:08:00.849\nYes, okay, if you trust everybody and\nyou think that this is perfect,\n\n134\n00:08:00.849 --> 00:08:03.210\nthen you don't actually\nhave to do anymore work.\n\n135\n00:08:03.210 --> 00:08:04.990\nYes, they can actually do it for them.\n\n136\n00:08:04.990 --> 00:08:08.560\nBut if I wanted to create this query,\nand what this query is supposed to do\n\n137\n00:08:08.560 --> 00:08:11.780\nis return all the orders with\nproduct information and vendor name.\n\n138\n00:08:11.780 --> 00:08:15.291\nThat's all it's designed to do,\nand so if I go ahead and\n\n139\n00:08:15.291 --> 00:08:17.171\nI run this entire query here.\n\n140\n00:08:17.171 --> 00:08:19.230\nI'm not gonna run the where clause yet.\n\n141\n00:08:20.660 --> 00:08:24.340\nAnd I get the query was\nsuccessfully executed.\n\n142\n00:08:24.340 --> 00:08:28.170\nYou can now see where is\na tremendous amount of data.\n\n143\n00:08:28.170 --> 00:08:31.540\nThe order date, the sales order ID,\nthe quantity that they ordered,\n\n144\n00:08:31.540 --> 00:08:36.430\nthe category product ID, the name,\nand the vendor name, right.\n\n145\n00:08:36.430 --> 00:08:39.270\nIt's a lot of detail, and\na lot of information.\n\n146\n00:08:39.270 --> 00:08:44.150\nNot saying that our customer doesn't need\nthis, but for them, they really do not\n\n147\n00:08:44.150 --> 00:08:50.650\nneed to know how I got all of that\ninformation, from doing it right here.\n\n148\n00:08:50.650 --> 00:08:54.990\nEssentially, the only thing that\nthe customer really should need to do\n\n149\n00:08:54.990 --> 00:08:58.500\nis provide,\nwell like this where statement here, okay?\n\n150\n00:08:58.500 --> 00:09:02.760\nIn other words, just this,\nwhat are they particularly looking for?\n\n151\n00:09:02.760 --> 00:09:04.310\nOkay this one element.\n\n152\n00:09:04.310 --> 00:09:05.190\nNow for\n\n153\n00:09:05.190 --> 00:09:09.800\nthem to do that though, they would have\nto have the rest of this statement, okay?\n\n154\n00:09:09.800 --> 00:09:15.600\nSo if I execute that, and I limit it to\nclothing, well then, yes, here it is.\n\n155\n00:09:15.600 --> 00:09:19.390\nNow we're limited to clothing, it actually\ndid drop it about 50,000 rows, I believe,\n\n156\n00:09:19.390 --> 00:09:20.270\nis what it did.\n\n157\n00:09:20.270 --> 00:09:22.820\nBut all of this is actually\nitems that I've sold\n\n158\n00:09:22.820 --> 00:09:24.930\nunderneath the clothing category.\n\n159\n00:09:24.930 --> 00:09:27.780\nSo in essence,\nthat's essentially all that our\n\n160\n00:09:27.780 --> 00:09:32.270\ncustomer really needs to do is to provide\nwhatever that detail is for the category.\n\n161\n00:09:32.270 --> 00:09:34.800\nBut they shouldn't need to actually\ngo through my entire database and\n\n162\n00:09:34.800 --> 00:09:37.210\ncreate the rest of this okay?\n\n163\n00:09:37.210 --> 00:09:41.619\nSo there's methods that we can do\nto help us to kind of limit this\n\n164\n00:09:41.619 --> 00:09:43.794\ndown a little bit more, okay.\n\n165\n00:09:43.794 --> 00:09:47.602\nSo i'm taking this from the most general\napproach to see where stored procedures\n\n166\n00:09:47.602 --> 00:09:48.640\nreally help us out.\n\n167\n00:09:48.640 --> 00:09:51.120\nI hope its going to\nhelp us out in the end.\n\n168\n00:09:51.120 --> 00:09:52.410\nSo how do we do that?\n\n169\n00:09:52.410 --> 00:09:54.950\nWell, one of the things\nthat we can do instead\n\n170\n00:09:54.950 --> 00:09:57.040\nis that there's also a limitation here,\nokay?\n\n171\n00:09:57.040 --> 00:09:59.370\nThey have to know exactly what\nthey're looking for, okay.\n\n172\n00:09:59.370 --> 00:10:02.940\nSo in other words if they don't know\nwhat my particular categories are,\n\n173\n00:10:02.940 --> 00:10:03.690\nit's not gonna help.\n\n174\n00:10:03.690 --> 00:10:08.405\nSo let's say that I thought that there was\na close, a category called shoes, right.\n\n175\n00:10:08.405 --> 00:10:10.620\nWell is there a category called shoes?\n\n176\n00:10:10.620 --> 00:10:11.820\nWell they don't know that.\n\n177\n00:10:11.820 --> 00:10:15.920\nSo if I execute that, it runs a query,\nbut it doesn't return anything.\n\n178\n00:10:15.920 --> 00:10:18.640\nIs it not returning anything\ncuz it didn't recognize shoes?\n\n179\n00:10:18.640 --> 00:10:21.830\nOr does it not return anything cuz we\ndon't have any shoes that we've sold,\n\n180\n00:10:21.830 --> 00:10:23.250\nwho knows.\n\n181\n00:10:23.250 --> 00:10:27.400\nSo in this sense, they have to\nactually know more about our database\n\n182\n00:10:27.400 --> 00:10:30.320\nthen what they should need\nto actually know here.\n\n183\n00:10:30.320 --> 00:10:34.379\nSo, you name it, there's a couple of\ndifferent things that go on when we expose\n\n184\n00:10:34.379 --> 00:10:36.208\nour database in this sense, okay.\n\n185\n00:10:36.208 --> 00:10:40.609\nSo instead what somebody might\nactually end up trying to do is\n\n186\n00:10:40.609 --> 00:10:42.285\nsomething like this.\n\n187\n00:10:42.285 --> 00:10:45.320\nOkay, and so this is where we get a little\nbit more programmatic here, okay.\n\n188\n00:10:45.320 --> 00:10:51.288\nWe want to create a select query, though,\ninstead, we're gonna provide variables.\n\n189\n00:10:51.288 --> 00:10:52.550\nOkay, we're gonna actually go ahead and\n\n190\n00:10:52.550 --> 00:10:57.150\nprovide the variables during the selection\nprocess here, so it returns their output.\n\n191\n00:10:57.150 --> 00:11:00.070\nThe output that they actually specify\nis what we're talking about in terms\n\n192\n00:11:00.070 --> 00:11:02.310\nof scale area output here.\n\n193\n00:11:02.310 --> 00:11:05.990\nSo at the beginning, so we're not even\ntalking about stored procedures yet,\n\n194\n00:11:05.990 --> 00:11:10.100\nI am now creating well,\nthree variables right here, okay?\n\n195\n00:11:10.100 --> 00:11:14.720\nSo I'm doing a declared statement where\nI have this custid as an integer.\n\n196\n00:11:14.720 --> 00:11:20.300\nThe OrderDateFrom as a date and time, and\nthe OrderDateTo as a date and time, to try\n\n197\n00:11:20.300 --> 00:11:24.900\nand set a range of times that I want them\nto be able to query in, perfectly fine.\n\n198\n00:11:24.900 --> 00:11:29.750\nAnd now notice that I can go ahead and\njust declare what those are going to be.\n\n199\n00:11:29.750 --> 00:11:32.800\nOkay, so I can do that right here,\nI can set that up.\n\n200\n00:11:32.800 --> 00:11:35.040\nMy customer order ID is gonna be this and\n\n201\n00:11:35.040 --> 00:11:38.000\nhere's my range in which I'm\nactually gonna set up here.\n\n202\n00:11:38.000 --> 00:11:42.754\nThis is essentially\nthe second quarter of 2011.\n\n203\n00:11:42.754 --> 00:11:46.380\nThe rest of the statement is\nexactly like what I had before.\n\n204\n00:11:46.380 --> 00:11:48.869\nAnd so if I scroll on through,\nyou'll see the whole thing.\n\n205\n00:11:48.869 --> 00:11:54.734\nAnd this time though,\nI change this in the where statement so\n\n206\n00:11:54.734 --> 00:11:58.302\nthat I am now using those variables.\n\n207\n00:11:58.302 --> 00:11:59.123\nOkay so now,\n\n208\n00:11:59.123 --> 00:12:04.510\nremember that a where is the word that we\nuse to help us to filter our data out.\n\n209\n00:12:04.510 --> 00:12:08.000\nSo, now I'm saying what i\nwant is the order date here\n\n210\n00:12:08.000 --> 00:12:12.780\nto be greater than the number that I used\nor the date that I used in the order date\n\n211\n00:12:12.780 --> 00:12:16.870\nfrom which was 2011, January 1st,\nif I remember right.\n\n212\n00:12:16.870 --> 00:12:19.930\nNow let me verify that before\nI tell you that, I'm wrong.\n\n213\n00:12:19.930 --> 00:12:25.626\nYep, April 1, 2011, and\nthen the order to date,\n\n214\n00:12:25.626 --> 00:12:33.888\nwhich is gonna be the range here at\nthe other end is gonna be July 31, 2011.\n\n215\n00:12:33.888 --> 00:12:39.631\nSo I've now set up this particular\nquery to help us out overall.\n\n216\n00:12:39.631 --> 00:12:41.692\nAnd so if I go ahead and I run this,\n\n217\n00:12:41.692 --> 00:12:44.950\nI should also get a result\nbecause I've set that up.\n\n218\n00:12:47.010 --> 00:12:50.150\nAnd so\nhere I end up with about 93 rows of data.\n\n219\n00:12:50.150 --> 00:12:54.550\nAnd the order date is actually gonna be\nbetween those dates that I specified which\n\n220\n00:12:54.550 --> 00:13:03.300\nis April 1, 2011 all the way through\nJuly 31, 2011, as well, okay?\n\n221\n00:13:03.300 --> 00:13:06.400\nSo in that particular range there,\nactually, everything looks like it\n\n222\n00:13:06.400 --> 00:13:10.030\nhappened on May 31st,\nis what it looked like had happened here.\n\n223\n00:13:10.030 --> 00:13:13.530\nSo actually all of these are actually\non May 31st, from that it looks like.\n\n224\n00:13:13.530 --> 00:13:14.170\nSo apparently,\n\n225\n00:13:14.170 --> 00:13:19.420\nthat was our only order that one day\nwas our biggest day of order at all.\n\n226\n00:13:19.420 --> 00:13:21.480\nSo when we start seeing\nsomething like this,\n\n227\n00:13:21.480 --> 00:13:25.490\nright, you're now seeing a little bit\nof a variable in this sense, right?\n\n228\n00:13:25.490 --> 00:13:30.640\nNow it means I do not have to\nget the customer to supply\n\n229\n00:13:30.640 --> 00:13:35.020\nwhat the actual filtering condition\nis because I've now given a range.\n\n230\n00:13:35.020 --> 00:13:39.500\nBut now I can go back through and\napply it myself.\n\n231\n00:13:39.500 --> 00:13:44.290\nBut this time, I say what it's going\nto be as far as this one customer goes.\n\n232\n00:13:44.290 --> 00:13:46.313\nNow, I don't know every customer,\n\n233\n00:13:46.313 --> 00:13:50.568\nlet me see if I actually changed the\ncustomer name here, or customer ID here.\n\n234\n00:13:50.568 --> 00:13:53.823\nAnd so now I can actually go back in, and\n\n235\n00:13:53.823 --> 00:13:58.820\nchange the thing, execute it and\nlet's see it looks like.\n\n236\n00:13:58.820 --> 00:14:02.988\nOops, that apparently is not a right\ncustomer ID cuz that one did not give me\n\n237\n00:14:02.988 --> 00:14:04.523\none consistent customer.\n\n238\n00:14:04.523 --> 00:14:10.740\nSo 29580, that's actually somebody's\ncustomer order, or customer ID here.\n\n239\n00:14:10.740 --> 00:14:12.800\nI was just trying to make up\na number to see if I would hit one.\n\n240\n00:14:12.800 --> 00:14:17.290\n29580, now let's try it, I actually\n\n241\n00:14:18.610 --> 00:14:23.150\nhave a real order,\na real customer ID, here we go.\n\n242\n00:14:23.150 --> 00:14:25.025\nIt actually gave us one,\n\n243\n00:14:25.025 --> 00:14:28.430\nactually it returned to me everything,\neverybody on that date.\n\n244\n00:14:28.430 --> 00:14:31.970\nBut also it returned to me\nthat first one right there.\n\n245\n00:14:31.970 --> 00:14:34.010\nSo I didn't set up my\nfilters exactly right.\n\n246\n00:14:34.010 --> 00:14:37.650\nIt actually gave me both conditions\nis what it continued to do.\n\n247\n00:14:37.650 --> 00:14:42.540\nSo in this one, I could actually go ahead\nat that point and set that up as well.\n\n248\n00:14:42.540 --> 00:14:45.680\nIf I wanted a filter both of these,\n\n249\n00:14:45.680 --> 00:14:50.910\nI would come in here in the where clause,\nand I would add in an and statement.\n\n250\n00:14:50.910 --> 00:14:56.849\nSo I would do and CustomerID is gonna be\n\n251\n00:14:56.849 --> 00:15:02.417\nequal to 29875 at this point,\n\n252\n00:15:02.417 --> 00:15:10.360\nand run that selection,\nand let's see here.\n\n253\n00:15:10.360 --> 00:15:13.940\nActually, apparently we did not\nactually get any, I set this one wrong.\n\n254\n00:15:13.940 --> 00:15:16.990\nSee how's that set,\nboth of them exactly right here.\n\n255\n00:15:18.280 --> 00:15:19.700\nLet's see if that actually runs it.\n\n256\n00:15:19.700 --> 00:15:21.056\n>> Get nothing for free in SQL, do you?\n\n257\n00:15:21.056 --> 00:15:24.010\n>> No, nothing, yeah, you actually\nhave to set them both right there.\n\n258\n00:15:24.010 --> 00:15:25.620\nActually looks like they\ndidn't get anything.\n\n259\n00:15:25.620 --> 00:15:28.847\nSo, by setting this up right here\nduring that particular date,\n\n260\n00:15:28.847 --> 00:15:31.894\nnotice that it says look,\nto meet both of these conditions,\n\n261\n00:15:31.894 --> 00:15:35.214\nwhere you have the same customer ID,\nand within that date range.\n\n262\n00:15:35.214 --> 00:15:38.780\nApparently that was not one of the orders\nthat was there, and that's fine.\n\n263\n00:15:38.780 --> 00:15:42.430\nBut you just gotta realize that you\nstart to see where the logic here.\n\n264\n00:15:42.430 --> 00:15:45.825\nYou can continue to do this a little bit\nmore programmatically here to do that.\n\n265\n00:15:45.825 --> 00:15:49.860\nBut now we wanna get into this\ninitial stored procedure just a bit.\n\n266\n00:15:49.860 --> 00:15:53.382\nOkay, so I wanted to show you those\ntwo concepts at least at the beginning\n\n267\n00:15:53.382 --> 00:15:55.716\nhere when we started See\nthat because there is.\n\n268\n00:15:55.716 --> 00:15:58.510\nYou can actually work through it\nthe way that you know how to and\n\n269\n00:15:58.510 --> 00:16:02.550\ncontinue to do stuff like that, but\nnow we're getting into store procedure.\n\n270\n00:16:02.550 --> 00:16:05.830\nSo to create a store procedure,\nit's fairly simple here okay.\n\n271\n00:16:05.830 --> 00:16:08.550\nSo notice that at the beginning,\nright here,\n\n272\n00:16:08.550 --> 00:16:11.620\nwe are going create the store procedure\nthat we are going to call customer orders.\n\n273\n00:16:11.620 --> 00:16:12.490\nNow before I do that,\n\n274\n00:16:12.490 --> 00:16:15.500\nI'm gonna drop just in case I've\nactually done some practice here.\n\n275\n00:16:15.500 --> 00:16:17.290\nLet me make sure that that's gone,\n\n276\n00:16:17.290 --> 00:16:20.100\nthat way we can actually\nstart all over instead.\n\n277\n00:16:20.100 --> 00:16:24.564\nSo I can actually call it create\nprocedure or CREATE PROC,\n\n278\n00:16:24.564 --> 00:16:28.950\nP-R-O-C, that's just\nthe shortened version of it.\n\n279\n00:16:28.950 --> 00:16:32.660\nYou're likely to see both of them so\njust kind of be aware.\n\n280\n00:16:32.660 --> 00:16:35.080\nAnd then you can give it\nwhatever name that you want to.\n\n281\n00:16:35.080 --> 00:16:39.870\nNow because this is a stored procedure, I\nlike preceding it with a little prefix so\n\n282\n00:16:39.870 --> 00:16:41.370\nI just put sp.\n\n283\n00:16:41.370 --> 00:16:45.810\nMost of the time,\ntoday's way of actually doing it Is a USP,\n\n284\n00:16:45.810 --> 00:16:49.220\nwhich stands for User Stored Procedure\ncuz you're the one that created it.\n\n285\n00:16:49.220 --> 00:16:51.570\nBut I'm just gonna keep the way\nthat I learned it, which was SP for\n\n286\n00:16:51.570 --> 00:16:52.900\ncustomer orders.\n\n287\n00:16:52.900 --> 00:16:56.860\nAnd then within parentheses you have\na couple of options here, okay?\n\n288\n00:16:56.860 --> 00:17:01.510\nIf you want to go ahead and\ndefine variables that are gonna be used,\n\n289\n00:17:01.510 --> 00:17:04.560\nyou simply set a set of parentheses.\n\n290\n00:17:04.560 --> 00:17:08.370\nAnd then you create your variables,\nand you separate them by commas.\n\n291\n00:17:08.370 --> 00:17:09.710\nOkay, so that makes sense.\n\n292\n00:17:09.710 --> 00:17:12.190\nWe've seen this idea before here.\n\n293\n00:17:12.190 --> 00:17:14.370\nSo it's the same thing,\nnow I've got a customer ID.\n\n294\n00:17:14.370 --> 00:17:16.530\nAnd I've got my order range here.\n\n295\n00:17:16.530 --> 00:17:21.990\nJanuary 1st 2001, all the way through\nDecember 31st 2016 as of this year.\n\n296\n00:17:21.990 --> 00:17:26.980\nAnd then I've got one more other one here\nthat I'm also gonna generate too, okay?\n\n297\n00:17:26.980 --> 00:17:30.170\nI'm telling it to actually\ngive me a row count\n\n298\n00:17:30.170 --> 00:17:32.280\nis what I'm also telling it to do, okay?\n\n299\n00:17:32.280 --> 00:17:37.450\nSo when I do so, I've also added in\none more element which is an output.\n\n300\n00:17:37.450 --> 00:17:40.560\nAnd this is where we can begin\nto see some changes here.\n\n301\n00:17:40.560 --> 00:17:43.830\nThe parameters that we can set up\nare what we call input parameters and\n\n302\n00:17:43.830 --> 00:17:45.940\nalso output parameters.\n\n303\n00:17:45.940 --> 00:17:51.090\nOn this one I'm actually saying that\nthis is going to be an output parameter.\n\n304\n00:17:51.090 --> 00:17:53.820\nIn other words,\nwhen it runs the code that it does,\n\n305\n00:17:53.820 --> 00:17:58.180\nit's going to report it out to\nthis particular procedure here and\n\n306\n00:17:58.180 --> 00:18:02.750\nthen it will print it out where as this,\nthese up here at the beginning,\n\n307\n00:18:02.750 --> 00:18:06.240\nI'm actually telling it what\nthat parameters actually are.\n\n308\n00:18:06.240 --> 00:18:10.580\nNow, you also want to pay attention\nto the way that this is set up.\n\n309\n00:18:10.580 --> 00:18:16.340\nIf you just call a parameter itself\nlike here, customer ID as an integer,\n\n310\n00:18:16.340 --> 00:18:19.520\nand you do not specify a beginning.\n\n311\n00:18:19.520 --> 00:18:21.940\nIn other words, a default answer.\n\n312\n00:18:21.940 --> 00:18:24.770\nIt will require you to provide one.\n\n313\n00:18:24.770 --> 00:18:26.930\nRequire you to provide one.\n\n314\n00:18:26.930 --> 00:18:28.960\nSo if you get an error after running it,\nand\n\n315\n00:18:28.960 --> 00:18:34.160\nlike it's saying you're missing the\ndefault, or you're missing an item here,\n\n316\n00:18:34.160 --> 00:18:37.800\ncheck this out right here\nbecause if you see this.\n\n317\n00:18:37.800 --> 00:18:42.390\nAnd you didn't actually put in anything\nelse like this right here on the second or\n\n318\n00:18:42.390 --> 00:18:43.640\nthird line.\n\n319\n00:18:43.640 --> 00:18:44.870\nWell, it's saying look.\n\n320\n00:18:44.870 --> 00:18:46.640\nIt's not a default you're providing.\n\n321\n00:18:46.640 --> 00:18:47.940\nYou're saying that you have the answer.\n\n322\n00:18:47.940 --> 00:18:49.910\nYou better actually tell\nme what the answer is.\n\n323\n00:18:49.910 --> 00:18:51.370\nSo it's going to require it.\n\n324\n00:18:51.370 --> 00:18:55.990\nNow on these later on, because I've\nalso provided a default answer and\n\n325\n00:18:55.990 --> 00:18:58.580\nthose are the ones in red, it says Ronnie,\n\n326\n00:18:58.580 --> 00:19:01.290\nif you leave that out that's fine,\ncuz what will I use?\n\n327\n00:19:01.290 --> 00:19:03.200\nI'll use the defaults, okay?\n\n328\n00:19:03.200 --> 00:19:07.940\nSo this is what makes it optional, I know\nit's kind strange, since we provide it.\n\n329\n00:19:07.940 --> 00:19:13.510\nBut it's by providing a default answer\nthat makes this condition here optional.\n\n330\n00:19:13.510 --> 00:19:17.960\nIf you state it and don't provide\nanything that makes it mandatory.\n\n331\n00:19:17.960 --> 00:19:20.600\nSo you have to provide an answer for\nthis one.\n\n332\n00:19:20.600 --> 00:19:22.600\nOn these others if I\ndon't call on them again,\n\n333\n00:19:22.600 --> 00:19:24.200\nperfectly fine because it's saying what?\n\n334\n00:19:24.200 --> 00:19:26.880\nYou already did tell me what you\nwanted if I don't call on it.\n\n335\n00:19:26.880 --> 00:19:29.190\n>> Yeah it seems really\ncounter intuitive right.\n\n336\n00:19:29.190 --> 00:19:34.640\nProbably a good test question to ask you,\nbut you gotta make sure that\n\n337\n00:19:34.640 --> 00:19:39.020\nif you want it to be optional to actually\ngive it a very specific parameter.\n\n338\n00:19:39.020 --> 00:19:42.420\nAnd if you want it to be mandatory\ngiven no parameters whatsoever so\n\n339\n00:19:42.420 --> 00:19:43.310\nkeep that in mind.\n\n340\n00:19:43.310 --> 00:19:45.320\nVery interesting phenomenon there.\n\n341\n00:19:45.320 --> 00:19:49.100\n>> It is exactly an interesting phenomenon\ncuz that is what will get you every\n\n342\n00:19:49.100 --> 00:19:49.610\ntime, right?\n\n343\n00:19:49.610 --> 00:19:52.220\nYou run the whole thing and you're like\nit's telling me I'm missing something.\n\n344\n00:19:52.220 --> 00:19:53.430\nAnd you look and it looks like what?\n\n345\n00:19:53.430 --> 00:19:55.825\nA complete code, but it's not.\n\n346\n00:19:55.825 --> 00:19:58.495\nSo you do need to remember\nthat if you call on it and\n\n347\n00:19:58.495 --> 00:20:01.725\nyou don't provide anything,\nit's expecting you to provide it.\n\n348\n00:20:01.725 --> 00:20:05.065\nIf you at least provide some answer, it's\nsaying, if you don't provide me an answer,\n\n349\n00:20:05.065 --> 00:20:08.775\nI'll use what you gave me as a default,\nis what we're gonna see here.\n\n350\n00:20:08.775 --> 00:20:11.615\nNow on this last one here\non this number row, okay?\n\n351\n00:20:11.615 --> 00:20:14.940\nI'm telling it start at zero, okay,\nis what I'm telling it to do and\n\n352\n00:20:14.940 --> 00:20:16.620\nthis is going to become an output.\n\n353\n00:20:16.620 --> 00:20:19.300\nSo, the rest of these is what\nwe call an input primers.\n\n354\n00:20:19.300 --> 00:20:22.430\nI'm already saying what is\nactually supposed to go into what\n\n355\n00:20:22.430 --> 00:20:23.940\nwe're going to see here.\n\n356\n00:20:23.940 --> 00:20:27.540\nThis is actually saying, you count it up\nand you provide for me an output, okay?\n\n357\n00:20:27.540 --> 00:20:31.790\nSo, that's the difference between\nthese two when we start to see it.\n\n358\n00:20:31.790 --> 00:20:36.790\nNow, when we go ahead and we begin\nto define the rest of this, right?\n\n359\n00:20:36.790 --> 00:20:39.500\nWe actually put it in between begin.\n\n360\n00:20:39.500 --> 00:20:42.520\nAnd end statement, an end here, okay.\n\n361\n00:20:42.520 --> 00:20:47.110\nTo make sure that we actually can\nmark off where out code's gonna be.\n\n362\n00:20:47.110 --> 00:20:49.190\nNow, I'll let you in on a secret.\n\n363\n00:20:49.190 --> 00:20:50.800\nYou don't have to do that.\n\n364\n00:20:50.800 --> 00:20:52.650\nYou can leave it alone if want to.\n\n365\n00:20:52.650 --> 00:20:55.440\nBest practices put it in,\nthat way you can identify the coding.\n\n366\n00:20:55.440 --> 00:20:58.280\nAnd it actually says hey go ahead and\ndo that here, okay.\n\n367\n00:20:58.280 --> 00:21:01.040\nMake sure that you\nunderstand the set no count.\n\n368\n00:21:01.040 --> 00:21:02.399\nWe're saying don't display any message.\n\n369\n00:21:03.470 --> 00:21:06.400\nJust don't go through and count a certain\nnumber and say I'm ready to run\n\n370\n00:21:06.400 --> 00:21:09.600\nit on this particular portion,\ncounting up another, don't do that.\n\n371\n00:21:09.600 --> 00:21:10.950\nJust go ahead and run the whole thing.\n\n372\n00:21:12.020 --> 00:21:14.310\nAnd then it's a simple select statement.\n\n373\n00:21:14.310 --> 00:21:16.970\nNow I've kept the same one that\nwe had at the very beginning,\n\n374\n00:21:16.970 --> 00:21:19.490\nadded in just a couple\nof other elements here.\n\n375\n00:21:19.490 --> 00:21:22.120\nBut you'll see it's still kind of\nthe same thing that we've done,\n\n376\n00:21:22.120 --> 00:21:28.670\na query with an inter-joint statement and\nthen at the end here is my basic filter.\n\n377\n00:21:30.250 --> 00:21:30.920\nRight here,\n\n378\n00:21:30.920 --> 00:21:34.940\nagain calling upon those early ones that\nsays, order date is supposed to be what?\n\n379\n00:21:34.940 --> 00:21:38.230\nThat default that I gave it and\nthe order to.\n\n380\n00:21:38.230 --> 00:21:41.430\nThe order date to is suppose\nto be that other default.\n\n381\n00:21:41.430 --> 00:21:46.200\nAnd then this is what I'm telling it to\nrun to give me that number of rows, okay?\n\n382\n00:21:46.200 --> 00:21:50.320\nAnd this is a universal type, or\nwhat they call a global variable,\n\n383\n00:21:50.320 --> 00:21:51.620\nI always call it a universal variable.\n\n384\n00:21:51.620 --> 00:21:54.720\nBut it's a global variable that says,\nokay I can run this.\n\n385\n00:21:54.720 --> 00:21:55.490\nSo what it's just gonna do,\n\n386\n00:21:55.490 --> 00:21:59.250\nit's gonna run through the whole thing,\ngive me a count of the number of rows and\n\n387\n00:21:59.250 --> 00:22:03.010\nreturn that as an output to\nthe procedure is what it's going to do.\n\n388\n00:22:03.010 --> 00:22:07.550\nThe return says, do not evaluate any more,\nand then end, of course, is actually\n\n389\n00:22:07.550 --> 00:22:11.080\nsaying, all right, we are done with this\nparticular stored procedure here, okay.\n\n390\n00:22:11.080 --> 00:22:18.792\nSo now I'm going to run this\nentire procedure right here.\n\n391\n00:22:21.516 --> 00:22:24.500\nAnd now it says and,\nI thought I'd run the other one first.\n\n392\n00:22:24.500 --> 00:22:26.380\nWell, now it's actually\nsaying it's not there.\n\n393\n00:22:26.380 --> 00:22:28.993\nLet me see if I can get\nrid of that object.\n\n394\n00:22:32.337 --> 00:22:34.590\nAnd I have to check that out,\nif it actually doesn't run again.\n\n395\n00:22:34.590 --> 00:22:35.860\nLet's see why here.\n\n396\n00:22:39.696 --> 00:22:43.729\nAll right, well, let me check it\nout over here in the database,\n\n397\n00:22:43.729 --> 00:22:48.700\nverify that I did not just something\ncompletely wrong over here.\n\n398\n00:22:48.700 --> 00:22:53.435\nIn the Adventure Works down a base,\nlet me expand out my programmability.\n\n399\n00:22:53.435 --> 00:22:58.335\nSo store procedures are actually kept\nunder the programmability node in\n\n400\n00:22:58.335 --> 00:23:03.675\nthe Adventure Works database,\nand in here, let me update this,\n\n401\n00:23:05.976 --> 00:23:10.950\nThen stored procedures and let's see.\n\n402\n00:23:10.950 --> 00:23:14.760\nSo apparently my drop statement\ndid not work since it is\n\n403\n00:23:14.760 --> 00:23:16.660\nshowing up in here already.\n\n404\n00:23:16.660 --> 00:23:19.080\nLet me go ahead an just\ndelete it out manually again.\n\n405\n00:23:21.450 --> 00:23:26.622\nAnd now, I don't see it anymore,\nlet's see if we can run it a third time.\n\n406\n00:23:26.622 --> 00:23:29.204\n[CROSSTALK] Well, we'll see.\n\n407\n00:23:29.204 --> 00:23:32.820\nAnd sometimes what does end up happening,\nI don't know why it does.\n\n408\n00:23:34.630 --> 00:23:37.080\nIt's just the way that\ncomputers are at times.\n\n409\n00:23:38.510 --> 00:23:40.550\nLet me execute it this time,\nthere we go, see?\n\n410\n00:23:40.550 --> 00:23:42.250\nSuccessfully completed there.\n\n411\n00:23:42.250 --> 00:23:47.047\nSo apparently my dropped statement is not\nactually proper syntax at some point even\n\n412\n00:23:47.047 --> 00:23:49.385\nthough it says, of course I dropped it.\n\n413\n00:23:49.385 --> 00:23:51.696\nAll right so,\nnow that I've run that, well,\n\n414\n00:23:51.696 --> 00:23:53.545\nwhat the heck does that help me to do?\n\n415\n00:23:53.545 --> 00:23:55.462\nWell, it creates distort procedure.\n\n416\n00:23:55.462 --> 00:23:59.389\nBut you also now have to go back in and\nbe able to run it as well,\n\n417\n00:23:59.389 --> 00:24:01.390\nso let me refresh it.\n\n418\n00:24:01.390 --> 00:24:04.030\nVerify that it is here.\n\n419\n00:24:04.030 --> 00:24:06.040\nAnd there it is, okay?\n\n420\n00:24:07.440 --> 00:24:09.610\nSo now in the declaration of this,\n\n421\n00:24:09.610 --> 00:24:14.080\nthis is where I told you that we can\ntake that entire amount of code, right?\n\n422\n00:24:14.080 --> 00:24:16.070\nAnd actually call it up by name.\n\n423\n00:24:16.070 --> 00:24:20.470\nSo notice that here is\nthe name right here, okay?\n\n424\n00:24:20.470 --> 00:24:22.330\nBut because I called for\n\n425\n00:24:22.330 --> 00:24:25.880\nan output parameter, right,\nyou saw it at the very beginning.\n\n426\n00:24:26.910 --> 00:24:31.950\nThe output parameter somewhere up here,\nsorry, way up here, output parameter.\n\n427\n00:24:31.950 --> 00:24:35.890\nI have to tell it where it's\nsupposed to report the output and\n\n428\n00:24:35.890 --> 00:24:40.150\nthe way that you do that is by\ndeclaring another variable, okay?\n\n429\n00:24:40.150 --> 00:24:42.720\nSo when I told it that I wanted an output,\n\n430\n00:24:42.720 --> 00:24:46.406\nI'm telling it to return it to\nthis variable called rowsreturned.\n\n431\n00:24:46.406 --> 00:24:53.230\nAnd I tell it that's an integer and then\nwe run an EXEC which is short for execute.\n\n432\n00:24:53.230 --> 00:24:57.130\nCall upon the name of that particular\nstored procedure which is all that code\n\n433\n00:24:57.130 --> 00:24:58.590\nthat we just saw.\n\n434\n00:24:58.590 --> 00:25:03.320\nAnd then I can define those variables,\nokay?\n\n435\n00:25:03.320 --> 00:25:08.240\nSo it's here I can add in all of\nthe information that I'm looking for.\n\n436\n00:25:08.240 --> 00:25:11.540\nAnd that way, it can actually go ahead and\nrun through that.\n\n437\n00:25:11.540 --> 00:25:15.040\nAnd the other thing that I have to do is\nwhen I also execute it especially if I'm\n\n438\n00:25:15.040 --> 00:25:16.090\ngetting an output.\n\n439\n00:25:16.090 --> 00:25:21.420\nIs to make sure I also add in this\nword output as well, is the key.\n\n440\n00:25:21.420 --> 00:25:24.550\nAll right, see if I can get back here.\n\n441\n00:25:24.550 --> 00:25:25.910\nPut that space back.\n\n442\n00:25:25.910 --> 00:25:27.550\nIt's add in this keyword, output.\n\n443\n00:25:27.550 --> 00:25:30.720\nIf you don't have it in both places,\nit's not gonna return that output and\n\n444\n00:25:30.720 --> 00:25:33.110\nthat could cause you an error as well.\n\n445\n00:25:33.110 --> 00:25:37.545\nThe other thing that I'm telling it of\ncourse, is go ahead and select that, so\n\n446\n00:25:37.545 --> 00:25:38.975\nit can be reported.\n\n447\n00:25:38.975 --> 00:25:44.155\nAnd report it as Rows Returned here and\nI even put quotation marks around it, so\n\n448\n00:25:44.155 --> 00:25:46.375\nI can actually have a different\nheader name instead.\n\n449\n00:25:48.705 --> 00:25:54.025\nSo now if I select this,\nI can execute, there we go.\n\n450\n00:25:54.025 --> 00:25:55.225\nNow what is the difference?\n\n451\n00:25:55.225 --> 00:25:58.360\nThe difference is I created, I now expose.\n\n452\n00:25:58.360 --> 00:26:03.180\nWell essentially, this to Daniel,\nin what he would run in his application.\n\n453\n00:26:03.180 --> 00:26:07.220\nWhich is to tell him here's the name\nof that stored procedure and\n\n454\n00:26:07.220 --> 00:26:12.125\nhere's the variables that he needs\nto assign data for right here.\n\n455\n00:26:12.125 --> 00:26:17.395\nAnd then Daniel essentially runs\nthat on his application and\n\n456\n00:26:17.395 --> 00:26:20.905\nhis application then returns well,\ntwo factors here, okay?\n\n457\n00:26:20.905 --> 00:26:24.030\nThe first one of course,\nis the data that he's looking for.\n\n458\n00:26:24.030 --> 00:26:28.190\nBut then the second one is\nactually a single scalar value\n\n459\n00:26:28.190 --> 00:26:30.890\nthat actually shows me\nthe Rows Returned as well.\n\n460\n00:26:30.890 --> 00:26:34.180\nSo it gives him that ability and\nthat function to be able to do so\n\n461\n00:26:34.180 --> 00:26:35.770\nto return all that information.\n\n462\n00:26:35.770 --> 00:26:40.820\nWithout exposing the underlying\nstructure of the entire database for us.\n\n463\n00:26:40.820 --> 00:26:43.530\nAnd that actually provides\na little bit more security for\n\n464\n00:26:43.530 --> 00:26:45.800\nus in the end here, okay?\n\n465\n00:26:45.800 --> 00:26:52.110\nSo there is a lot of information that we\ncan actually end up doing and creating.\n\n466\n00:26:52.110 --> 00:26:56.520\nBut actually being able to also secure and\nclose up the database very easily.\n\n467\n00:26:56.520 --> 00:27:01.190\nSo a whole bunch of code running under one\nname, sounds like a great plan for us.\n\n468\n00:27:01.190 --> 00:27:03.050\n>> Yeah,\ndefinitely as far as the security goes.\n\n469\n00:27:03.050 --> 00:27:04.980\nRonnie made a great\npoint when it comes to,\n\n470\n00:27:04.980 --> 00:27:09.280\nyou don't wanna give away everything just\nbecause you think you trust somebody.\n\n471\n00:27:09.280 --> 00:27:12.890\nIt just makes sense to allow\naccess to certain areas or\n\n472\n00:27:12.890 --> 00:27:17.180\neven data just because someone works for\nyour company, right?\n\n473\n00:27:17.180 --> 00:27:18.520\nAccidents can happen.\n\n474\n00:27:18.520 --> 00:27:22.920\nSo if they can never get to that portion\nof your data, then an action can't happen.\n\n475\n00:27:22.920 --> 00:27:25.720\nSo we create these stored procedures and\nsay here.\n\n476\n00:27:25.720 --> 00:27:27.300\nUse this stored procedure and\n\n477\n00:27:27.300 --> 00:27:29.410\nnow you'll have access to only\nwhat you need to have access to.\n\n478\n00:27:29.410 --> 00:27:32.690\nAnd you'll have full functionality,\neverything that you need to do.\n\n479\n00:27:32.690 --> 00:27:36.680\nWithout having to worry about making any\nmistakes over here on the other side.\n\n480\n00:27:36.680 --> 00:27:41.560\nAnd if someone is malicious, well, you've\nbasically built a fence around them.\n\n481\n00:27:41.560 --> 00:27:44.920\nTo where they can only manipulate or\n\n482\n00:27:44.920 --> 00:27:49.980\naffect a smaller set of data than\nthe entirety of the data set.\n\n483\n00:27:49.980 --> 00:27:52.190\nRonnie, anything else we need to know\nwhen it comes to stored procedures?\n\n484\n00:27:52.190 --> 00:27:55.050\n>> There's just a little bit more that we\nhave to talk about which is what we call\n\n485\n00:27:55.050 --> 00:27:58.930\nthe branching logic that we can also\napply to these stored procedures.\n\n486\n00:27:58.930 --> 00:28:02.550\nAnd everything I've showed you, right, is\nreally so direct, it kind of makes sense.\n\n487\n00:28:02.550 --> 00:28:04.380\nYou make a SQL query.\n\n488\n00:28:04.380 --> 00:28:06.400\nYou just actually tell them\nhere is what you're looking for\n\n489\n00:28:06.400 --> 00:28:10.650\nas far as filters go and you provide that\nand you can actually add that in there.\n\n490\n00:28:10.650 --> 00:28:15.020\nNow in the end in that result, let me\nshow you one more time here cuz there's\n\n491\n00:28:15.020 --> 00:28:17.320\nsomething else I need to point out on.\n\n492\n00:28:17.320 --> 00:28:20.330\nLet me see if I can actually\nfind what I was doing here.\n\n493\n00:28:20.330 --> 00:28:22.270\nThere we go.\nLet me go back to the other one here.\n\n494\n00:28:22.270 --> 00:28:23.810\nSo here's that result.\n\n495\n00:28:23.810 --> 00:28:29.210\nYou can get the result out in\na couple of actually in another way.\n\n496\n00:28:29.210 --> 00:28:33.920\nNow, this particular result where\nyou name the actual variable and\n\n497\n00:28:33.920 --> 00:28:36.080\nyou declare it, okay?\n\n498\n00:28:36.080 --> 00:28:39.797\nThis actually gives you the best and\nmost possible way to do so, okay?\n\n499\n00:28:41.020 --> 00:28:43.560\nBecause these do not\nhave to be put in order.\n\n500\n00:28:43.560 --> 00:28:46.170\nSo in other words,\nyou can call them as you remember them and\n\n501\n00:28:46.170 --> 00:28:48.400\nthat’s actually very key.\n\n502\n00:28:48.400 --> 00:28:52.300\nYou can do this without actually\ncalling up these numbers or\n\n503\n00:28:52.300 --> 00:28:54.930\nwithout calling up this at symbol and\nthis variable.\n\n504\n00:28:54.930 --> 00:29:00.031\nBy simply listing them one after\nthe other after CustomerOrders here.\n\n505\n00:29:00.031 --> 00:29:04.858\nBut when you do that, you have to make\nsure you list them in the exact same\n\n506\n00:29:04.858 --> 00:29:07.740\norder that you put them up here.\n\n507\n00:29:07.740 --> 00:29:12.147\nSo instead, in theory, okay,\n\n508\n00:29:12.147 --> 00:29:17.048\nI could actually run 29875 and\n\n509\n00:29:17.048 --> 00:29:20.656\nthen 2,000, oops.\n\n510\n00:29:20.656 --> 00:29:26.508\n20110401 and then 20110701 like this and\n\n511\n00:29:26.508 --> 00:29:31.305\nI may have to actually put,\nI don't know if I do,\n\n512\n00:29:31.305 --> 00:29:34.710\nsingle quotes around them or not.\n\n513\n00:29:37.140 --> 00:29:39.239\nSo you may find yourself\nbeing able to do this.\n\n514\n00:29:40.600 --> 00:29:47.190\nNow remember that if you do this,\ninstead of everything else that's listed,\n\n515\n00:29:47.190 --> 00:29:51.060\nunder here, it has to be in that order.\n\n516\n00:29:51.060 --> 00:29:54.670\nIf not, it's not going to work,\nit's absolutely going to do that.\n\n517\n00:29:54.670 --> 00:29:57.930\nSo this is what they call being able to\nactually run this particular procedure\n\n518\n00:29:57.930 --> 00:29:58.980\nhere with variables.\n\n519\n00:29:58.980 --> 00:30:02.460\nBut it's positional,\nyou have to actually call in that order.\n\n520\n00:30:02.460 --> 00:30:05.670\nSo SQL Server says,\neven though you can do that and\n\n521\n00:30:05.670 --> 00:30:09.080\nit will allow you to do it,\nthis is what it recommends instead.\n\n522\n00:30:09.080 --> 00:30:12.351\nIs that you actually go ahead and\ndeclare them in your execution statement,\n\n523\n00:30:12.351 --> 00:30:14.100\nmake sure that that's done too, okay?\n\n524\n00:30:15.310 --> 00:30:18.680\nSo one of those features that can throw\nyou off especially when you look at\n\n525\n00:30:18.680 --> 00:30:21.285\nthe result and they're saying well,\nwhy isn't this working?\n\n526\n00:30:21.285 --> 00:30:25.215\nWell, if it's only those numbers listed\nafter, make sure you go back up and check\n\n527\n00:30:25.215 --> 00:30:28.445\nand verify it's actually the correct order\nor it's actually gonna throw you off.\n\n528\n00:30:29.455 --> 00:30:32.575\nThe last thing like I said I want to talk\nabout was just very briefly here the idea\n\n529\n00:30:32.575 --> 00:30:34.262\nof what we called branching logic.\n\n530\n00:30:34.262 --> 00:30:35.542\nEverything that I said, right?\n\n531\n00:30:35.542 --> 00:30:37.482\nWe do very straightforward.\n\n532\n00:30:37.482 --> 00:30:41.550\nBut the very fact is most of the time, we\nmay find ourselves in a position where it\n\n533\n00:30:41.550 --> 00:30:44.180\nsays, look,\nI don't want it to actually do that.\n\n534\n00:30:44.180 --> 00:30:47.712\nI wanted to actually do it\nif this happens, you know?\n\n535\n00:30:47.712 --> 00:30:49.842\nElse, do this.\n\n536\n00:30:49.842 --> 00:30:52.522\nSo if this happens,\nthen do this or else do this.\n\n537\n00:30:52.522 --> 00:30:56.152\nWell, you can actually to if/then/else\nstatements in between the begin and\n\n538\n00:30:56.152 --> 00:30:57.380\nthe end statements.\n\n539\n00:30:57.380 --> 00:31:00.650\nTo make sure that actually is happening\nthe way that you want to, okay?\n\n540\n00:31:00.650 --> 00:31:03.190\nYou can also declare what\nthey call a while statement.\n\n541\n00:31:03.190 --> 00:31:06.310\nIn other words,\nas long as that condition remains true.\n\n542\n00:31:06.310 --> 00:31:09.600\nSo let's say that you count\nup the first ten results.\n\n543\n00:31:09.600 --> 00:31:10.990\nAnd you go as long as this number,\n\n544\n00:31:10.990 --> 00:31:15.980\nas long as the results actually are under\nten, then go ahead and do this.\n\n545\n00:31:15.980 --> 00:31:17.920\nPerfectly fine, okay?\n\n546\n00:31:17.920 --> 00:31:20.910\nBut on the 11th one, don't do it anymore.\n\n547\n00:31:20.910 --> 00:31:22.816\nSo those are things that you can also do.\n\n548\n00:31:22.816 --> 00:31:27.385\nAnd there's even things especially because\nthis is usually stored procedures.\n\n549\n00:31:27.385 --> 00:31:30.250\nOr we have a lot of databases\nthat we need to backup,\n\n550\n00:31:30.250 --> 00:31:33.690\nwe can actually give it\nstatements like wait, okay?\n\n551\n00:31:33.690 --> 00:31:37.770\nSo you can actually say,\nI want it to wait for a delay.\n\n552\n00:31:37.770 --> 00:31:40.950\nSo you can say I want this particular\nbackup to actually run on the delay,\n\n553\n00:31:40.950 --> 00:31:42.150\n20 minutes.\n\n554\n00:31:42.150 --> 00:31:44.250\nYou can tell it to wait for a time.\n\n555\n00:31:44.250 --> 00:31:50.130\nI want it to run at 12 AM if you wanted to\nor I want to actually wait for a receive.\n\n556\n00:31:50.130 --> 00:31:51.635\nNow, normally on this one,\n\n557\n00:31:51.635 --> 00:31:55.370\nit's only works if you're actually using\nthe service broker to help you out.\n\n558\n00:31:55.370 --> 00:31:58.090\nIn other words, when everything is\nclustered to make sure that you get\n\n559\n00:31:58.090 --> 00:32:01.350\nall of the confirmations back\nto be able to run this as well.\n\n560\n00:32:01.350 --> 00:32:03.130\nSo in those things, can they be run?\n\n561\n00:32:03.130 --> 00:32:06.510\nYes, okay, and you're probably saying\nwell, Ronnie, why don't you show us that?\n\n562\n00:32:06.510 --> 00:32:09.920\nBecause it's actually beyond\nthe idea of what we call a simple\n\n563\n00:32:09.920 --> 00:32:12.500\na simple type of storage procedure.\n\n564\n00:32:12.500 --> 00:32:15.270\nStored procedure that will\nreally help us to understand,\n\n565\n00:32:15.270 --> 00:32:17.420\nespecially in getting ready for the exam.\n\n566\n00:32:17.420 --> 00:32:18.600\nBut if you wanna learn more about that,\n\n567\n00:32:18.600 --> 00:32:21.330\nthat's when you actually\ngo on towards the DDL\n\n568\n00:32:21.330 --> 00:32:25.396\ntypes of storage procedures as well where\nyou'll actually learn all that stuff too.\n\n569\n00:32:25.396 --> 00:32:30.090\nSo just kind of realize that there is a\nlot more to the idea of stored procedures.\n\n570\n00:32:30.090 --> 00:32:32.450\nHere are the basic ideas to\nget you familiar with them and\n\n571\n00:32:32.450 --> 00:32:34.370\nto get your understanding\nwhy you would do it.\n\n572\n00:32:34.370 --> 00:32:37.500\nAnd to point out some of the pitfalls\nthat Josh end up seeing in the results.\n\n573\n00:32:37.500 --> 00:32:39.060\nWe don't have everything setup correctly.\n\n574\n00:32:39.060 --> 00:32:42.830\n>> Yeah, really seams like we're\npushing SQL to be more like\n\n575\n00:32:42.830 --> 00:32:45.710\na programming language than\na querying language at this point.\n\n576\n00:32:45.710 --> 00:32:50.290\nGetting it to do certain things,\nlogic is coming to play quite heavily.\n\n577\n00:32:50.290 --> 00:32:53.300\nSo it's good for us to know,\nit's good for us to be aware of.\n\n578\n00:32:53.300 --> 00:32:57.600\nAgain, as we said in this exam, you don't\nhave to be a master of these things.\n\n579\n00:32:57.600 --> 00:33:00.550\nJust more familiar with the concepts and\nhow they work.\n\n580\n00:33:00.550 --> 00:33:03.500\nSo don't kill yourself trying\nto have it figured out for\n\n581\n00:33:03.500 --> 00:33:07.030\nyour exam there, unless you're\nmoving onto the higher level stuff.\n\n582\n00:33:07.030 --> 00:33:09.120\nRonnie, you've done a great\njob explaining these things,\n\n583\n00:33:09.120 --> 00:33:10.810\nwe do appreciate your knowledge.\n\n584\n00:33:10.810 --> 00:33:15.230\nIt helps us and increase in our ability\nto use our SQL environments, so\n\n585\n00:33:15.230 --> 00:33:16.210\nwe do thank you.\n\n586\n00:33:16.210 --> 00:33:19.190\nWe thank you all for watching,\nhopefully you've enjoyed this episode.\n\n587\n00:33:19.190 --> 00:33:21.110\nWe're gonna go ahead and\nsign off for ITProTV,\n\n588\n00:33:21.110 --> 00:33:22.840\nI've been your host Daniel Lowrie.\n\n589\n00:33:22.840 --> 00:33:23.640\n>> And I'm Ronnie Wong.\n\n590\n00:33:23.640 --> 00:33:25.411\n>> We'll see you next time.\n\n591\n00:33:25.411 --> 00:33:27.110\n[SOUND]\n\n",
          "vimeoId": "166551113"
        },
        {
          "description": "In this episode, Daniel and Ronnie explore using the INSERT, UPDATE, and DELETE statements in SQL Server 2014. Here they look at INSERT to insert one or more rows into a target table. They show how this can be done with single values as well as multiple values. They also demonstrate using the INSERT SELECT and EXEC statements.",
          "length": "1915",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-2-1-insert_update_and_delete-051016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-2-1-insert_update_and_delete-051016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-2-1-insert_update_and_delete-051016-1-sm.jpg",
          "title": "INSERT, UPDATE and DELETE",
          "transcript": "WEBVTT\n\n1\n00:00:00.716 --> 00:00:10.716\n[MUSIC]\n\n2\n00:00:11.896 --> 00:00:16.220\nAll right, greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:16.220 --> 00:00:20.139\nI'm your host Daniel Lowrie, and\ntoday's episode we're continuing\n\n4\n00:00:20.139 --> 00:00:23.490\non with our querying\nMicrosoft SQL Server 2014 series.\n\n5\n00:00:23.490 --> 00:00:27.124\nJoining us back in the studio again today\nto help give us a little more insight to\n\n6\n00:00:27.124 --> 00:00:29.560\nthat very topic is our good friend Mr.\nRonnie Wong.\n\n7\n00:00:29.560 --> 00:00:31.594\nRonnie, welcome back to the show,\nsir, how's it going today?\n\n8\n00:00:31.594 --> 00:00:33.177\n>> It's going great, thank you for\n\n9\n00:00:33.177 --> 00:00:36.182\nhaving me back as we continue\non with more SQL Server 2014.\n\n10\n00:00:36.182 --> 00:00:39.629\nToday we're gonna take a little bit of\na step back into the direction that we've\n\n11\n00:00:39.629 --> 00:00:40.200\nbeen going.\n\n12\n00:00:40.200 --> 00:00:41.530\nI know it seems a little bit strange.\n\n13\n00:00:41.530 --> 00:00:43.710\nWe kind of hit some very\ndifficult concepts,\n\n14\n00:00:43.710 --> 00:00:46.080\nat least to me were a little\nbit more challenging.\n\n15\n00:00:46.080 --> 00:00:48.900\nAnd now we're actually moving back\ninto things that seem a little bit\n\n16\n00:00:48.900 --> 00:00:50.150\nmore natural.\n\n17\n00:00:50.150 --> 00:00:50.930\nDon't get me wrong,\n\n18\n00:00:50.930 --> 00:00:54.320\nwe've already taken a look at some\nthings like creating tables already.\n\n19\n00:00:54.320 --> 00:00:59.020\nWe've also talked about, of course,\nstored procedures and triggers and stuff.\n\n20\n00:00:59.020 --> 00:01:03.510\nBut today we're actually taking a look\nat being able to insert data and\n\n21\n00:01:03.510 --> 00:01:08.680\nupdate data, as well as delete\ndata out of our tables as well.\n\n22\n00:01:08.680 --> 00:01:10.140\nNow this is different, and\n\n23\n00:01:10.140 --> 00:01:14.400\nwhat we've actually done before is\nactually create database objects.\n\n24\n00:01:14.400 --> 00:01:17.200\nTables, being able to remove\ncolumns out of the tables,\n\n25\n00:01:17.200 --> 00:01:21.660\nbeing able to add columns in, modifying or\naltering those table structures.\n\n26\n00:01:21.660 --> 00:01:25.200\nTaking things like stored procedures,\nessentially programs that we've actually\n\n27\n00:01:25.200 --> 00:01:28.580\ncreated and modifying them as well so\nthey can do what we want to.\n\n28\n00:01:28.580 --> 00:01:32.890\nBut today it's really kind of simple stuff\nthat we have to actually know about,\n\n29\n00:01:32.890 --> 00:01:36.480\nwhich, again, is actually the ability, of\ncourse, to be able to insert data into our\n\n30\n00:01:36.480 --> 00:01:41.180\ntables as well as update it, and\neven delete data out as well.\n\n31\n00:01:41.180 --> 00:01:42.830\nAnd so when we start talking about that,\n\n32\n00:01:42.830 --> 00:01:45.820\nit's simple enough to\nactually be able to do.\n\n33\n00:01:45.820 --> 00:01:48.470\nBut there are some things we\nneed to pay attention to, and\n\n34\n00:01:48.470 --> 00:01:50.500\nthey can get a little bit challenging.\n\n35\n00:01:50.500 --> 00:01:55.030\nAnd understanding how you can actually\nuse each one of these types of statements\n\n36\n00:01:55.030 --> 00:01:59.520\nespecially the insert as well,\nis actually going to be challenging too.\n\n37\n00:01:59.520 --> 00:02:02.220\nBecause not a lot of times\nis it always about simply,\n\n38\n00:02:02.220 --> 00:02:04.940\nI'll just change this word to this one,\nand we're okay.\n\n39\n00:02:04.940 --> 00:02:07.080\nDon't get me wrong,\nwe're gonna show you an example of that.\n\n40\n00:02:07.080 --> 00:02:10.750\nWe're also gonna show you that it can be\nused in terms of stored procedures and\n\n41\n00:02:10.750 --> 00:02:13.670\nalso in combination with\nother things as well.\n\n42\n00:02:13.670 --> 00:02:16.920\nSo that's what we're going\nto take a look at today.\n\n43\n00:02:16.920 --> 00:02:22.400\nNow where we're gonna begin is with\nthe idea of the insert statements instead.\n\n44\n00:02:22.400 --> 00:02:25.919\nNow when we start off here, even though I\ncould have picked any one of those three,\n\n45\n00:02:25.919 --> 00:02:26.841\nI just chose insert.\n\n46\n00:02:26.841 --> 00:02:30.904\nAnd the reason why is that,\nthat one actually has a lot more ability,\n\n47\n00:02:30.904 --> 00:02:35.386\nat least for me, has a lot more different\nways that we can actually use it to be\n\n48\n00:02:35.386 --> 00:02:40.009\nable to add data or to insert in rows of\ndata that we need into certain tables that\n\n49\n00:02:40.009 --> 00:02:43.020\nwe also have existing in our database.\n\n50\n00:02:43.020 --> 00:02:46.960\nSo when we start to this, you need to know\nsome of the challenges that you'll face,\n\n51\n00:02:46.960 --> 00:02:50.480\nand you need to know some of the syntax\nthat you might actually end seeing.\n\n52\n00:02:50.480 --> 00:02:54.450\nBecause this is actually gonna be probably\nfairly heavily tested on the exam as well.\n\n53\n00:02:54.450 --> 00:02:56.440\nSo that's where we wanna pay attention.\n\n54\n00:02:56.440 --> 00:03:00.250\nSo let's go ahead and jump right into\nit right here on our SQL Server.\n\n55\n00:03:00.250 --> 00:03:04.770\nAnd what I've done is I switched\nof the database that we're using.\n\n56\n00:03:04.770 --> 00:03:08.900\nNow, I've kind of said this from\nthe beginning of the episode, not episode,\n\n57\n00:03:08.900 --> 00:03:09.800\nfrom the series here.\n\n58\n00:03:09.800 --> 00:03:13.948\nThat what will happen is if I'm gonna be\nmodifying something in the database, so\n\n59\n00:03:13.948 --> 00:03:17.059\nI don't end up with weird\ndatabase results I don't want to,\n\n60\n00:03:17.059 --> 00:03:19.937\nI'm gonna instead use\nthis Adventureworks2012.\n\n61\n00:03:19.937 --> 00:03:22.543\nI've got Adventureworks 2014, 2012.\n\n62\n00:03:22.543 --> 00:03:26.741\nIf I'm doing straight querying,\nin other words, I'm not going to modify or\n\n63\n00:03:26.741 --> 00:03:30.022\nmanipulate any of the data\nin that 2014 database.\n\n64\n00:03:30.022 --> 00:03:34.142\nBut in the 2012, I might tear this thing\napart to the point where it might not be\n\n65\n00:03:34.142 --> 00:03:35.823\nuseable, and that's fine too.\n\n66\n00:03:35.823 --> 00:03:39.813\nBut that way during our series, we're not\ngonna actually try and do certain things.\n\n67\n00:03:39.813 --> 00:03:43.113\nWhere what will end up happening is you\ndo something in it such as a delete\n\n68\n00:03:43.113 --> 00:03:44.653\nstatement, and all of a sudden,\n\n69\n00:03:44.653 --> 00:03:47.848\nthe next lesson actually goes into\nsomething we're just querying.\n\n70\n00:03:47.848 --> 00:03:50.799\nAnd you're saying, I didn't get the same\nresults, I didn't get any of that, and\n\n71\n00:03:50.799 --> 00:03:51.724\nyou're wondering why.\n\n72\n00:03:51.724 --> 00:03:55.720\nWell, it's because you deleted out either\na table or records that weren't there.\n\n73\n00:03:55.720 --> 00:03:57.650\nSo hopefully, this will keep us straight.\n\n74\n00:03:57.650 --> 00:04:00.872\nSo I'm just going to use this\nAdventureworks2012 database.\n\n75\n00:04:00.872 --> 00:04:03.720\nI'm gonna go ahead and\nselect that and execute that.\n\n76\n00:04:03.720 --> 00:04:07.560\nAnd then I verify I am on\nthe Adventureworks database.\n\n77\n00:04:07.560 --> 00:04:08.950\nAnd the first thing I'm gonna do, so\n\n78\n00:04:08.950 --> 00:04:13.840\nI'm not gonna modify it too much,\nis I'm just gonna create a basic table for\n\n79\n00:04:13.840 --> 00:04:17.240\nus to work with in terms of\ninserting in additional data.\n\n80\n00:04:17.240 --> 00:04:20.210\nNow when I do this,\nwe've already seen this in other episodes,\n\n81\n00:04:20.210 --> 00:04:23.330\nwe're not gonna actually walk\nthrough the entire creation again.\n\n82\n00:04:23.330 --> 00:04:26.390\nBut I have added in a couple\nof more elements for us.\n\n83\n00:04:26.390 --> 00:04:30.080\nSo that it actually helps us to\nmake a little bit more sense here.\n\n84\n00:04:30.080 --> 00:04:34.380\nWhen we normally insert data into tables,\nwe're already inserting it into\n\n85\n00:04:34.380 --> 00:04:39.270\na structure, and that structure already\nhas some constraints on that table.\n\n86\n00:04:39.270 --> 00:04:41.101\nAnd so when you take a look here, so\n\n87\n00:04:41.101 --> 00:04:44.910\nI'm gonna create a database\ntable that is called SalesOrder.\n\n88\n00:04:44.910 --> 00:04:46.920\nAnd this is what you see right up here.\n\n89\n00:04:46.920 --> 00:04:52.623\nAnd in that particular table, I'm gonna\nhave these columns, SalesOrderID,\n\n90\n00:04:52.623 --> 00:04:58.073\nCustomerID, BusinessEntity,\nOrderDate here with another constraint,\n\n91\n00:04:58.073 --> 00:05:02.500\nand then also a ShipCountry,\nas well, and also Freight.\n\n92\n00:05:02.500 --> 00:05:07.360\nNow this does correspond to another table\ninside our Adventureworks database.\n\n93\n00:05:07.360 --> 00:05:10.160\nBut because of the way that I'm\ngonna be inserting in data,\n\n94\n00:05:10.160 --> 00:05:14.180\nI really don't wanna add in too much that\ncan mess us up on the original data.\n\n95\n00:05:14.180 --> 00:05:16.740\nSo I'm just gonna create\na table out of that.\n\n96\n00:05:16.740 --> 00:05:21.295\nNow the thing that I wanted to point it is\nremember that these constraints can cause\n\n97\n00:05:21.295 --> 00:05:26.115\nsome issues, especially when you insert\ndata in, for example, on this constraint,\n\n98\n00:05:26.115 --> 00:05:28.905\nwhere we have this primary key and\nthis identity.\n\n99\n00:05:28.905 --> 00:05:32.870\nBut remember that this is to ensure\na uniqueness in each of the rows of\n\n100\n00:05:32.870 --> 00:05:34.200\nour data that we have.\n\n101\n00:05:34.200 --> 00:05:38.750\nAnd when we do something like that, and\nwe're inserting in just regular data,\n\n102\n00:05:38.750 --> 00:05:41.750\nin other words, data that I'm\ngoing to be typing in myself.\n\n103\n00:05:41.750 --> 00:05:45.250\nI have to ask you to remember that,\nit could be where it says that look,\n\n104\n00:05:45.250 --> 00:05:49.355\nI think this is gonna be a duplicate, so\nit doesn't allow me to put that in there.\n\n105\n00:05:49.355 --> 00:05:53.270\nSo I actually have to be able to\ndeal with something like that.\n\n106\n00:05:53.270 --> 00:05:58.250\nThe same thing down here underneath\nthe OrderDate constraint as well,\n\n107\n00:05:58.250 --> 00:06:02.100\nis that what I might see that I've\nactually declared this one as being a,\n\n108\n00:06:02.100 --> 00:06:04.130\noops I'm gonna make sure I don't do that.\n\n109\n00:06:04.130 --> 00:06:07.800\nI declare this one as\nbeing a DATE data type,\n\n110\n00:06:07.800 --> 00:06:11.960\nnow that is different from\nDateTime data type, and\n\n111\n00:06:11.960 --> 00:06:15.780\nI need to point that out because\nthat can also cause some confusion.\n\n112\n00:06:15.780 --> 00:06:18.400\nLet's say I'm migrating an old\ndatabase over, in other words,\n\n113\n00:06:18.400 --> 00:06:22.000\nI'm taking data out of an old one and\nmoving it into this table here.\n\n114\n00:06:22.000 --> 00:06:25.440\nWell, if I don't realize that I\nwent ahead and made this table and\n\n115\n00:06:25.440 --> 00:06:29.610\nI forget that DATE and DateTime\naren't actually the same, well then,\n\n116\n00:06:29.610 --> 00:06:32.390\nI've got a little bit of issue\nthat I've gotta worry about.\n\n117\n00:06:32.390 --> 00:06:36.620\nSo here, what we've done is\nwe've taken that constraint here\n\n118\n00:06:36.620 --> 00:06:40.870\nwhere it says DATE and notice this\nsecond line where I have CONSTRAINT.\n\n119\n00:06:40.870 --> 00:06:45.335\nSo I've now created another\ndefault CONSTRAINT here called\n\n120\n00:06:45.335 --> 00:06:47.930\nSalesOrder_OrderDate.\n\n121\n00:06:47.930 --> 00:06:50.040\nAnd now I'm saying\nhere's what the DEFAULT,\n\n122\n00:06:50.040 --> 00:06:52.370\nI'm gonna mess up that\nthing no matter what.\n\n123\n00:06:52.370 --> 00:06:55.640\nI'm saying here's what\nthe DEFAULT should be, and\n\n124\n00:06:55.640 --> 00:06:58.350\nthen you're actually seeing\nsomething else here.\n\n125\n00:06:58.350 --> 00:07:01.493\nNow, this is a statement we haven't\nreally looked at before, so\n\n126\n00:07:01.493 --> 00:07:03.681\nI wanna point this out\nif this happens to you.\n\n127\n00:07:03.681 --> 00:07:07.020\nNow, it shouldn't too often, but it can.\n\n128\n00:07:07.020 --> 00:07:12.126\nSo when I say what I want this to be,\nand I'm declaring the datatype,\n\n129\n00:07:12.126 --> 00:07:17.054\nand I've said this is DATE, what I\ncan do is I can say when I pull this\n\n130\n00:07:17.054 --> 00:07:22.096\ninformation from the original table and\nit's of a different type.\n\n131\n00:07:22.096 --> 00:07:27.740\nSo SysDateTime here is\nof a DateTime data type.\n\n132\n00:07:27.740 --> 00:07:31.380\nWhat I can do instead is say look,\nhere's what I want you to do.\n\n133\n00:07:31.380 --> 00:07:36.815\nI want you to instead cast\nthat DateTime type as a DATE\n\n134\n00:07:36.815 --> 00:07:42.263\ndata type instead and\nimplement that on this table.\n\n135\n00:07:42.263 --> 00:07:46.393\nSo when you see the DateTime in the table\nthat you're actually gonna be creating and\n\n136\n00:07:46.393 --> 00:07:50.346\nyou're pulling this information from\nthat other table, if you see DateTime,\n\n137\n00:07:50.346 --> 00:07:51.770\nit's okay to put it in here.\n\n138\n00:07:51.770 --> 00:07:53.508\nSo if you don't know that,\n\n139\n00:07:53.508 --> 00:07:58.497\nthat CAST is essentially saying I'm going\nto actually go ahead and put a cast or\n\n140\n00:07:58.497 --> 00:08:04.000\na mask over that date time and report it\nas date and that way it can enter in here.\n\n141\n00:08:04.000 --> 00:08:05.470\nThen you're gonna be in trouble.\n\n142\n00:08:05.470 --> 00:08:08.060\nIt's really going to be one of those\nthings that can throw you off.\n\n143\n00:08:08.060 --> 00:08:10.520\nWhen you go and do that insert\nstatement it tells you that,\n\n144\n00:08:10.520 --> 00:08:12.840\nthere's a data type mismatch again.\n\n145\n00:08:12.840 --> 00:08:14.400\nOr improper data type or\n\n146\n00:08:14.400 --> 00:08:17.860\nthis particular data type does not match,\norder dates data type and\n\n147\n00:08:17.860 --> 00:08:22.300\nyou're looking like no SysDateTime,\nthat's the date that's in there.\n\n148\n00:08:22.300 --> 00:08:25.735\nBut you gotta remember, it's the dateTime,\nor maybe a DateTime two.\n\n149\n00:08:25.735 --> 00:08:29.095\nSo, you've got to be careful when you\ndo some of that stuff in the insert.\n\n150\n00:08:29.095 --> 00:08:31.065\n>> It made me think of actors, right?\n\n151\n00:08:31.065 --> 00:08:34.285\nYou say cast so and so as a doctor, right?\n\n152\n00:08:34.285 --> 00:08:40.450\nCast Ronnie as a philanthropist,\nI don't know whale or something.\n\n153\n00:08:40.450 --> 00:08:41.766\n>> [LAUGH]\n>> [LAUGH] You know,\n\n154\n00:08:41.766 --> 00:08:42.460\nit's playing the role.\n\n155\n00:08:42.460 --> 00:08:44.330\nSo, even though in both types,\n\n156\n00:08:44.330 --> 00:08:47.420\npeople are people,\nyou're casting them as a different role.\n\n157\n00:08:47.420 --> 00:08:50.560\nSo I guess that,\nwould that be analogous to this, Ronnie?\n\n158\n00:08:50.560 --> 00:08:51.480\n>> Yeah.\nIt pretty much is,\n\n159\n00:08:51.480 --> 00:08:52.300\nbecause it really it is.\n\n160\n00:08:52.300 --> 00:08:53.980\nIt's taking that DateTime,\nlike you said, and\n\n161\n00:08:53.980 --> 00:08:58.490\nwe're gonna cast it as a DateTime, in\nthis particular table that we're making.\n\n162\n00:08:58.490 --> 00:09:01.620\nSo, you don't always have to\nworry about it too much cuz\n\n163\n00:09:01.620 --> 00:09:04.360\nmost of us are fairly\nconsistent at doing this.\n\n164\n00:09:04.360 --> 00:09:07.940\nBut sometimes you're just making a table\nvery quickly on the fly like this one and\n\n165\n00:09:07.940 --> 00:09:10.770\nI wanted to point out some of those things\nthat you may have to actually slow down\n\n166\n00:09:10.770 --> 00:09:11.790\nand see and do.\n\n167\n00:09:11.790 --> 00:09:14.036\nSo, let me go ahead and\ncreate this table then.\n\n168\n00:09:14.036 --> 00:09:18.950\nI'm gonna execute it and I do get down\nat the bottom screen in my messages\n\n169\n00:09:18.950 --> 00:09:21.550\nthat the commands were done,\ncreated successfully.\n\n170\n00:09:21.550 --> 00:09:24.160\nAnd then I have to refresh my tables and\n\n171\n00:09:24.160 --> 00:09:28.720\nverify that I have\nthe sales orders as well.\n\n172\n00:09:28.720 --> 00:09:30.440\nNow, I went ahead and\ncreated another one for\n\n173\n00:09:30.440 --> 00:09:32.480\nsomething we're going to\ndo a little bit later on.\n\n174\n00:09:32.480 --> 00:09:35.630\nBut this one, I went ahead and\ndeleted the original one that I was using.\n\n175\n00:09:35.630 --> 00:09:39.750\nAnd we've not just recreated\nthis particular table too.\n\n176\n00:09:39.750 --> 00:09:43.340\nAll right, so\nnow that I've got this table,\n\n177\n00:09:43.340 --> 00:09:47.450\nI don't believe that there should\nbe any data in that table at all.\n\n178\n00:09:47.450 --> 00:09:51.230\nBut let's verify this before I go\nahead and do this inserts table.\n\n179\n00:09:51.230 --> 00:09:56.070\nSo I'm just gonna scroll down here\njust a little bit and do a SELECT, and\n\n180\n00:09:56.070 --> 00:10:00.740\nthen a * and then FROM dbo,\nfor data base object.\n\n181\n00:10:00.740 --> 00:10:03.350\nAnd I'm gonna call this one SalesOrders.\n\n182\n00:10:03.350 --> 00:10:07.700\nAnd I'm simply gonna select those\ntwo lines and execute that.\n\n183\n00:10:07.700 --> 00:10:08.370\nAnd there we go.\n\n184\n00:10:08.370 --> 00:10:11.100\nWe have a blank database table.\n\n185\n00:10:11.100 --> 00:10:16.730\nThat has these six columns in it and\nthat's exactly what I wanted to see here.\n\n186\n00:10:16.730 --> 00:10:18.258\nNow at this point, right?\n\n187\n00:10:18.258 --> 00:10:22.062\nWhen we start to actually see information\nlike this and here's a brand new table and\n\n188\n00:10:22.062 --> 00:10:25.690\nnow I need to get data into it,\nthat is what we're actually doing next.\n\n189\n00:10:25.690 --> 00:10:26.620\nSo, the good thing is,\n\n190\n00:10:26.620 --> 00:10:30.170\nnow that you've actually seen that\nparticular table with no data in it.\n\n191\n00:10:30.170 --> 00:10:34.260\nWe can now show you how to\ninsert data into it as well.\n\n192\n00:10:34.260 --> 00:10:37.670\nNow on this one, we do wanna take a look\nat the statement a little bit closer.\n\n193\n00:10:37.670 --> 00:10:41.560\nWell, let me see if I can do this without\ncausing this too much disruption.\n\n194\n00:10:41.560 --> 00:10:42.500\nThere we go, okay?\n\n195\n00:10:42.500 --> 00:10:45.880\nSo, when we take a look at\nthe line underneath here, okay?\n\n196\n00:10:45.880 --> 00:10:47.230\nNotice it's fairly simple.\n\n197\n00:10:47.230 --> 00:10:51.490\nWe do an INSERT INTO and\nthen we tell it the target table.\n\n198\n00:10:51.490 --> 00:10:54.902\nI am going to, no matter what I try to do,\nI am going to do that, okay?\n\n199\n00:10:54.902 --> 00:11:00.190\nSo, I'm telling you make insert into\nthat table which I just created\n\n200\n00:11:00.190 --> 00:11:06.210\nthat has no data into it, and now you have\nreally a couple of options here, okay?\n\n201\n00:11:06.210 --> 00:11:08.580\nBut the preferred option is this.\n\n202\n00:11:08.580 --> 00:11:13.650\nAs this first line here,\nwhat I have inside of parentheses is, and\n\n203\n00:11:13.650 --> 00:11:14.940\nI wanted us to see it this way.\n\n204\n00:11:14.940 --> 00:11:18.080\nNormally I kind of put them\nall down in a column so\n\n205\n00:11:18.080 --> 00:11:19.620\nthat we can see it a little bit easier.\n\n206\n00:11:19.620 --> 00:11:22.690\nBut I wanted to show you right here,\nwhere it actually matches up.\n\n207\n00:11:22.690 --> 00:11:29.290\nSo, SalesOrderID, CustomerID, BusinessID,\nOrderID, Ship, Freight, Country, etcetera.\n\n208\n00:11:29.290 --> 00:11:33.100\nWell, I wanted to put all that in there,\nbut notice that I'm missing a column,\n\n209\n00:11:33.100 --> 00:11:35.390\nsuch as the SalesOrderID.\n\n210\n00:11:35.390 --> 00:11:40.960\nAnd the reason I'm missing that is\nbecause up at the top, right here,\n\n211\n00:11:40.960 --> 00:11:44.830\nif you remember,\nI'm essentially telling it to go ahead and\n\n212\n00:11:44.830 --> 00:11:47.390\ncreate this as a unique identifier.\n\n213\n00:11:47.390 --> 00:11:49.070\nSo, in other words, the database, itself,\n\n214\n00:11:49.070 --> 00:11:52.270\nis gonna generate its own\nunique identifier for me.\n\n215\n00:11:52.270 --> 00:11:56.700\nSo, I do not need to add that in to\nwhat I'm inserting in down here.\n\n216\n00:11:56.700 --> 00:12:00.150\nLet me zoom out, so I can make sure I\nhave a little bit more control here.\n\n217\n00:12:02.390 --> 00:12:08.780\nSo, that's why we actually did not\nend up seeing the whole thing, okay?\n\n218\n00:12:08.780 --> 00:12:11.408\nSo, let me, just, oops, I'm sorry.\n\n219\n00:12:11.408 --> 00:12:14.725\nTrying to get that framed up\na little bit better, okay?\n\n220\n00:12:14.725 --> 00:12:19.290\nSo, when we now take a look\nat this whole thing, right?\n\n221\n00:12:19.290 --> 00:12:23.920\nSo, you see CustomerID\nmatching up BusinessEntity ID,\n\n222\n00:12:23.920 --> 00:12:26.640\nOrderDate, ShipCountry, and Freight.\n\n223\n00:12:26.640 --> 00:12:30.790\nWell, as long as you name them,\nyou're perfectly fine, okay?.\n\n224\n00:12:30.790 --> 00:12:34.300\nNow, I believe that you actually\nhad the option not to name them and\n\n225\n00:12:34.300 --> 00:12:36.510\njust declare these values, if you want to.\n\n226\n00:12:36.510 --> 00:12:38.210\nBut if you do that,\nyou're relying on the position.\n\n227\n00:12:38.210 --> 00:12:41.290\nIn other words,\nyou better know that this number two\n\n228\n00:12:41.290 --> 00:12:44.530\nabsolutely does represent\nyour customer order ID, okay?\n\n229\n00:12:44.530 --> 00:12:45.960\nIf you put that as a number 19 and\n\n230\n00:12:45.960 --> 00:12:50.570\nthat's actually not your customer order\nID, well now you're in trouble, okay?\n\n231\n00:12:50.570 --> 00:12:53.000\nBecause it can cause\nyou problems like that.\n\n232\n00:12:53.000 --> 00:12:55.160\nBut the safest way is to go ahead and\n\n233\n00:12:55.160 --> 00:12:58.770\nlist out what you believe\nthe order is going to be.\n\n234\n00:12:58.770 --> 00:13:00.150\nAnd then when you declared the values,\n\n235\n00:13:00.150 --> 00:13:03.380\nin other words the data that you\nwant to enter into that table.\n\n236\n00:13:03.380 --> 00:13:07.030\nThen you go ahead and\nlist them out this way, okay?\n\n237\n00:13:07.030 --> 00:13:08.020\nOne at a time.\n\n238\n00:13:08.020 --> 00:13:11.410\nAnd each one actually matches up to\nthe columns that you see above it.\n\n239\n00:13:11.410 --> 00:13:14.080\nSo at this point,\nI just simply go ahead and\n\n240\n00:13:14.080 --> 00:13:19.080\nI select that portion of my code and\nI execute that as well.\n\n241\n00:13:19.080 --> 00:13:24.141\nIt verifies to me that one\nrow has been affected here.\n\n242\n00:13:24.141 --> 00:13:26.750\nLet me execute it again and there we go.\n\n243\n00:13:26.750 --> 00:13:30.940\nWe have now added in the information\ninto that blank table.\n\n244\n00:13:30.940 --> 00:13:35.827\nSo, it's not difficult to insert data\ninto a database table, but there\n\n245\n00:13:35.827 --> 00:13:41.051\nare times though you actually have to do\nmore than one record at a time, okay?\n\n246\n00:13:41.051 --> 00:13:45.200\nAnd that's where some of the keys start\nto come in a little bit more, right?\n\n247\n00:13:45.200 --> 00:13:47.470\nIf I were to do this one record at a time,\nand\n\n248\n00:13:47.470 --> 00:13:50.230\nI had 1,000 records to go, could I do it?\n\n249\n00:13:50.230 --> 00:13:52.240\nSure, we can do it one at a time.\n\n250\n00:13:52.240 --> 00:13:55.660\nBut you can actually get\na little bit speedier at it, and\n\n251\n00:13:55.660 --> 00:13:59.440\nhere is the second statement that I have,\ntoo, okay?\n\n252\n00:13:59.440 --> 00:14:04.090\nNow, notice that this one follows\nthe same pattern just about, okay?\n\n253\n00:14:04.090 --> 00:14:07.690\nSo, we're doing the very same thing,\nbut now notice the values here.\n\n254\n00:14:07.690 --> 00:14:10.550\nAnd all I've done is,\ninside of their own set of parenthesis,\n\n255\n00:14:10.550 --> 00:14:14.710\neach one of these represents\na row of data, okay?\n\n256\n00:14:15.710 --> 00:14:18.460\nAnd the key here is to\nactually make sure that you\n\n257\n00:14:18.460 --> 00:14:20.650\nkeep it consistent when you\ngo all the way through.\n\n258\n00:14:20.650 --> 00:14:23.620\nThe other key is to make sure\nyou do not do duplicates.\n\n259\n00:14:23.620 --> 00:14:27.610\nSo notice that the first value that I've\nput up here for the customer ID was a 2.\n\n260\n00:14:27.610 --> 00:14:32.360\nKnows that this one is a 1 and\nthen this one is a 4 and this one is a 6.\n\n261\n00:14:32.360 --> 00:14:36.180\nWell, that's pretty much the key, it's\nthat you don't duplicate the rows again,\n\n262\n00:14:36.180 --> 00:14:37.620\nif you don't have to.\n\n263\n00:14:37.620 --> 00:14:42.200\nSo, then I can select\nthat particular portion.\n\n264\n00:14:42.200 --> 00:14:47.650\nPress the F5 key and now it says, hey,\nthree rows have actually been affected.\n\n265\n00:14:47.650 --> 00:14:51.910\nIf I've actually done this correctly,\nI should end up with four rows of data.\n\n266\n00:14:51.910 --> 00:14:57.350\nOne plus three, I'm hoping that my math\nis right, and I execute and there we go.\n\n267\n00:14:57.350 --> 00:15:01.660\nSo, now you can see that\nthe results are beginning to come\n\n268\n00:15:01.660 --> 00:15:06.410\ninto my particular table here and\nwe're continuing to add data in.\n\n269\n00:15:06.410 --> 00:15:08.060\nSo, I just want to show\nyou a single record but\n\n270\n00:15:08.060 --> 00:15:11.900\nalso want to show you a multiple\nvalue way to do the same thing.\n\n271\n00:15:11.900 --> 00:15:16.580\nNotice we didn't have to kind of get\nway far off to be able to do this.\n\n272\n00:15:16.580 --> 00:15:18.330\nSo, if there were 20 like this,\n\n273\n00:15:18.330 --> 00:15:21.910\nI could actually enter them all in\nthe same way that you saw me do it here.\n\n274\n00:15:21.910 --> 00:15:23.540\n>> Really straight forward,\nRonnie, to be honest with you,\n\n275\n00:15:23.540 --> 00:15:25.540\nit wasn't a whole lot of code and\n\n276\n00:15:25.540 --> 00:15:29.110\nit really makes a whole lot of logical\nsense in the way that it's put together.\n\n277\n00:15:29.110 --> 00:15:32.150\nI've got the values, here's the data\nthat's going to go in each one of those\n\n278\n00:15:32.150 --> 00:15:34.160\nvalues, and just add it as you need.\n\n279\n00:15:34.160 --> 00:15:37.970\nBut you said, be warned that you\nneed to be very specific and\n\n280\n00:15:37.970 --> 00:15:41.260\ncorrect with your values, cuz it's gonna\nshove that data into there, right?\n\n281\n00:15:41.260 --> 00:15:44.640\n>> It really is\n>> And the nice thing is when you are not\n\n282\n00:15:44.640 --> 00:15:49.519\nhaving to deal with things that have\nalready existed in other structure,\n\n283\n00:15:49.519 --> 00:15:50.710\nit's very easy.\n\n284\n00:15:50.710 --> 00:15:54.808\nYou just type the numbers in or whatever\nvalue it is, should be ready to go.\n\n285\n00:15:54.808 --> 00:15:56.909\nMake sure you separate them by\ncommas just like you saw here.\n\n286\n00:15:56.909 --> 00:15:57.768\nFine.\n\n287\n00:15:57.768 --> 00:16:02.090\nBut remember what I said as well, that\nsometimes the idea of the inserting in of\n\n288\n00:16:02.090 --> 00:16:04.540\nthe data isn't because I typed them in.\n\n289\n00:16:04.540 --> 00:16:07.023\nBut it's because the data\nexists somewhere else.\n\n290\n00:16:07.023 --> 00:16:10.914\nBut when it does that, remember that\nthe data that exists somewhere else,\n\n291\n00:16:10.914 --> 00:16:15.073\nit may have also existed in a table that\nalready has previous constraints on it.\n\n292\n00:16:15.073 --> 00:16:19.930\nIt may actually have a different date/time\nformat like what we're talking about here.\n\n293\n00:16:19.930 --> 00:16:22.360\nAnd this is where it becomes\na little bit more important for\n\n294\n00:16:22.360 --> 00:16:25.720\nus to actually think about some\nof the things that we have to do.\n\n295\n00:16:25.720 --> 00:16:29.310\nWhich is the inserting rows in\nthat existed from another table.\n\n296\n00:16:29.310 --> 00:16:30.620\nSo let’s also take a look at that.\n\n297\n00:16:30.620 --> 00:16:33.420\nSo the example that I gave a little bit\nearlier is something that may happen.\n\n298\n00:16:33.420 --> 00:16:37.190\nYou’re actually taking, let’s say,\nan older database and there’s a table of\n\n299\n00:16:37.190 --> 00:16:40.260\ninformation there that you really\nwant to move into this new table.\n\n300\n00:16:40.260 --> 00:16:42.370\nOr even append to another table here, but\n\n301\n00:16:42.370 --> 00:16:47.100\nlet’s just talk about just doing an insert\nat this point, and just putting it in.\n\n302\n00:16:47.100 --> 00:16:50.120\nWell that's where we have to pay\nattention to a couple of extra things.\n\n303\n00:16:50.120 --> 00:16:52.130\nLet's show you what we're\ntalking about here.\n\n304\n00:16:52.130 --> 00:16:56.910\nSo, if I need to insert in rows that exist\nin another table, well let's go ahead and\n\n305\n00:16:56.910 --> 00:16:58.910\ntake a look at this one.\n\n306\n00:16:58.910 --> 00:17:03.876\nSo, let's say that I\nactually do want to insert\n\n307\n00:17:03.876 --> 00:17:08.483\ninto that same sales\norder table more rows.\n\n308\n00:17:08.483 --> 00:17:14.943\nBut those rows already exist in, well in\nthis entire joint to tell you the truth.\n\n309\n00:17:14.943 --> 00:17:19.750\nSo it's all these rows that actually exist\nin this entire join across these tables.\n\n310\n00:17:19.750 --> 00:17:24.680\nBut where it's actually the country of\nGermany as well, so I already did it.\n\n311\n00:17:24.680 --> 00:17:29.850\nThe ones I manually typed in\nhave a ship country of USA.\n\n312\n00:17:29.850 --> 00:17:33.860\nAnd this time I just want Germany\nto be inserted in instead.\n\n313\n00:17:33.860 --> 00:17:38.493\nWell in the way that it exist in\nthe Adventureworks 2012 is not as\n\n314\n00:17:38.493 --> 00:17:41.070\nstraightforward as a lot\nthese examples that you see.\n\n315\n00:17:41.070 --> 00:17:44.570\nWhere it's like, yeah all that\ninformation exist in this one table.\n\n316\n00:17:44.570 --> 00:17:48.103\nYou have to do a lot of joins here,\nto actually be able to do this.\n\n317\n00:17:48.103 --> 00:17:52.240\nSo not the most complex join,\nbut enough to make you slow down.\n\n318\n00:17:52.240 --> 00:17:56.285\nAnd go, hold on let me make sure I know\nwhere this information is getting pulled\n\n319\n00:17:56.285 --> 00:17:56.913\nfrom here.\n\n320\n00:17:56.913 --> 00:18:00.950\nAnd this is actually working and\nthat's what you want to be able to do.\n\n321\n00:18:00.950 --> 00:18:06.350\nNow when you do this,\nremember that inside of all those tables,\n\n322\n00:18:06.350 --> 00:18:08.258\nmore than likely there are constraints.\n\n323\n00:18:08.258 --> 00:18:10.380\nThere's already primary keys,\n\n324\n00:18:10.380 --> 00:18:13.030\nthere's already other\nconstraints that are going on.\n\n325\n00:18:13.030 --> 00:18:15.810\nWell what do you have to do then?\n\n326\n00:18:15.810 --> 00:18:19.630\nWell here is what you have to\ndo right at the beginning.\n\n327\n00:18:19.630 --> 00:18:23.690\nAnd let me emphasize that and\nlet's zoom in on it just for a moment so\n\n328\n00:18:23.690 --> 00:18:24.760\nthat we can see it as well.\n\n329\n00:18:26.410 --> 00:18:30.220\nSo what I'm actually doing is\nsaying look when we pulled the data\n\n330\n00:18:30.220 --> 00:18:31.178\nfrom another table.\n\n331\n00:18:31.178 --> 00:18:35.550\nHere's what I'm saying is that\nthis table's identity row.\n\n332\n00:18:35.550 --> 00:18:39.740\nIt's going to take precedence over any of\nthe data that it actually reports that\n\n333\n00:18:39.740 --> 00:18:43.730\nalso has an identity row, so\nlet me turn that feature on.\n\n334\n00:18:44.870 --> 00:18:50.030\nNow that is important because after we'd\nrun the insert that we're going to do.\n\n335\n00:18:50.030 --> 00:18:52.910\nLet me see if I scroll down here.\n\n336\n00:18:52.910 --> 00:18:57.705\nNotice that you also need to\nturn it off afterwards as well.\n\n337\n00:18:57.705 --> 00:19:00.765\nSo this is actually gonna\nbe something important.\n\n338\n00:19:00.765 --> 00:19:02.835\nIf there's an on, there should be an off.\n\n339\n00:19:03.935 --> 00:19:07.015\nSo I'm not gonna tell you they you're\ngonna find that on the exam, but\n\n340\n00:19:07.015 --> 00:19:09.485\nI'm not gonna tell you you're not\ngonna find that on the exam either.\n\n341\n00:19:09.485 --> 00:19:11.915\nSo just make sure that if\nyou have it turned on,\n\n342\n00:19:11.915 --> 00:19:15.205\nyou also need to ensure that\nyou turn it off at the end.\n\n343\n00:19:15.205 --> 00:19:19.955\nSo one of the first things I like to do if\nI'm going to do this is I always create\n\n344\n00:19:19.955 --> 00:19:20.945\nthe select statement.\n\n345\n00:19:21.945 --> 00:19:24.420\nWhat data do I actually\nwant to be able to pull in?\n\n346\n00:19:24.420 --> 00:19:27.620\nWell here is all of the same row or\n\n347\n00:19:27.620 --> 00:19:31.130\ncolumn information that exist\nacross all these different table.\n\n348\n00:19:31.130 --> 00:19:34.770\nSo there's one, two, three so\n\n349\n00:19:34.770 --> 00:19:39.030\nthree different tables here is\nwhere all that data exist across.\n\n350\n00:19:39.030 --> 00:19:41.550\nWell I want to go ahead and\nrun this select statement.\n\n351\n00:19:43.100 --> 00:19:47.400\nAnd I'm going to actually come all\nthe way down to where I have Germany, and\n\n352\n00:19:47.400 --> 00:19:49.100\nthen I'm going to execute it.\n\n353\n00:19:49.100 --> 00:19:56.030\nAnd verify that what I get is the result\nof all of my Germany ship country orders.\n\n354\n00:19:56.030 --> 00:20:00.670\nSo here is my entire table here,\nor my entire result set,\n\n355\n00:20:00.670 --> 00:20:06.210\nwhere everything's actually German, or\nthe ship country's actually Germany here.\n\n356\n00:20:06.210 --> 00:20:08.570\nSo, that actually works for me.\n\n357\n00:20:08.570 --> 00:20:12.650\nThose are the records that I want\nto be able to go ahead and add in.\n\n358\n00:20:12.650 --> 00:20:18.670\nNow, this is about 2623 rows according to\nwhat I see as far as the row count goes,\n\n359\n00:20:18.670 --> 00:20:20.870\nand that’s perfectly fine.\n\n360\n00:20:20.870 --> 00:20:22.670\nSo we have that ability to do so.\n\n361\n00:20:22.670 --> 00:20:28.000\nI also marked over here on the side,\njust in case as you take a look here.\n\n362\n00:20:28.000 --> 00:20:30.100\nIf you want to add in different countries,\nperfectly fine.\n\n363\n00:20:30.100 --> 00:20:34.160\nYou just substitute the country, right\nin there for whichever one you wanted.\n\n364\n00:20:34.160 --> 00:20:36.590\nI wanted to put that in there\nbecause in this database,\n\n365\n00:20:36.590 --> 00:20:40.360\nin the Adventureworks database I really\nhad it timed to actually try and go.\n\n366\n00:20:40.360 --> 00:20:42.660\nWell what is the name of the country\nthat I know that has data in it?\n\n367\n00:20:42.660 --> 00:20:44.680\nAt least these three do.\n\n368\n00:20:44.680 --> 00:20:47.620\nI know that USA, or\nUnited States is actually in there.\n\n369\n00:20:47.620 --> 00:20:51.060\nSo, you do have multiple\ncountries inside that database,\n\n370\n00:20:51.060 --> 00:20:55.430\nbut these were the three I picked\njust at random to help us out.\n\n371\n00:20:55.430 --> 00:20:58.940\nSo, if you want to switch you can\nactually switch it up very easily.\n\n372\n00:20:58.940 --> 00:21:02.370\nSo here you could change that\nto Australia or Canada and\n\n373\n00:21:02.370 --> 00:21:05.730\nit should again show you those records for\nthat.\n\n374\n00:21:05.730 --> 00:21:07.390\nNow once we have that, and\n\n375\n00:21:07.390 --> 00:21:11.520\nI actually verify that those\nare the columns that I'm looking for.\n\n376\n00:21:11.520 --> 00:21:16.450\nNow let's scroll back up and\nsee the other part of the statement.\n\n377\n00:21:16.450 --> 00:21:20.740\nThis time we are doing an insert into, and\n\n378\n00:21:20.740 --> 00:21:25.000\nnotice again, the actual table\nthat we're inserting into.\n\n379\n00:21:25.000 --> 00:21:29.505\nAnd inside of the parenthesis now\nare all that columns that I'm telling\n\n380\n00:21:29.505 --> 00:21:32.850\nit from this entire select\nstatement where I have this join.\n\n381\n00:21:32.850 --> 00:21:37.210\nGo ahead and pull all that information\ntogether and put it into one table and\n\n382\n00:21:37.210 --> 00:21:39.680\nlet's do that as well.\n\n383\n00:21:39.680 --> 00:21:44.610\nHere, a bit more complex then me\njust typing in each of the pieces of\n\n384\n00:21:44.610 --> 00:21:46.000\ndata that I need.\n\n385\n00:21:46.000 --> 00:21:50.430\nBut actually may be faster, especially if\nI do know that the data already exists.\n\n386\n00:21:50.430 --> 00:21:55.980\nLet me see if I can highlight just what\nI need to here without going too far.\n\n387\n00:21:55.980 --> 00:22:00.240\nGermany and then all the way through\nthe all statement at that point.\n\n388\n00:22:00.240 --> 00:22:01.850\nAnd then execute.\n\n389\n00:22:01.850 --> 00:22:07.950\nAnd now you can see right here where it\ntells me that 2,623 rows were affected.\n\n390\n00:22:07.950 --> 00:22:12.710\nSo now let's go back up and\nrun that original little simple\n\n391\n00:22:12.710 --> 00:22:17.410\nstatement that I had before\ninside of sales orders.\n\n392\n00:22:18.620 --> 00:22:21.750\nI think I ended up with four rows or\nsomething earlier.\n\n393\n00:22:21.750 --> 00:22:24.763\nAnd then now if I run execute,\nthere we go.\n\n394\n00:22:24.763 --> 00:22:29.393\nNow I have 2,627 rows of data\nnow added in to help us out.\n\n395\n00:22:29.393 --> 00:22:35.350\nNow, did I have to actually\ndo all of Germany?\n\n396\n00:22:35.350 --> 00:22:38.010\nNo, I could have continued\nto add in another additional\n\n397\n00:22:38.010 --> 00:22:39.800\nfilter in the where statement.\n\n398\n00:22:39.800 --> 00:22:43.770\nTo even limit it if I wanted to to\nlet's say order date or order range or\n\n399\n00:22:43.770 --> 00:22:48.150\nwhatever it might be, and I can actually\nlimit it down that way if I chose to.\n\n400\n00:22:48.150 --> 00:22:53.000\nBut it's all up to you as long as you're\nactually using those filters inserting and\n\n401\n00:22:53.000 --> 00:22:54.760\nwe also do what we call the updates.\n\n402\n00:22:54.760 --> 00:22:58.090\nYou're gonna see that the where statement\nis gonna become very important.\n\n403\n00:22:58.090 --> 00:23:02.250\nbecause if you now go, I didn't need\nall of Germany, I just need it for\n\n404\n00:23:02.250 --> 00:23:05.560\nthe first quarter of 2012 Germany.\n\n405\n00:23:05.560 --> 00:23:08.710\nNow you have to go back in and\ngo all right, so\n\n406\n00:23:08.710 --> 00:23:10.480\nhow do I actually figure that one out?\n\n407\n00:23:10.480 --> 00:23:13.700\nSo it's just one of those things where\nthe more that you can work with that where\n\n408\n00:23:13.700 --> 00:23:16.080\nfilter and add an and in between.\n\n409\n00:23:16.080 --> 00:23:19.580\nIt is really going to help out when\nyou want to do something a little bit\n\n410\n00:23:19.580 --> 00:23:20.660\nmore specific.\n\n411\n00:23:20.660 --> 00:23:25.223\nBut here is at least a few examples\nof what we are talking about.\n\n412\n00:23:25.223 --> 00:23:27.515\nNow the last one that I\nwanna take a look at,\n\n413\n00:23:27.515 --> 00:23:29.760\nat least I think this\nis the last one here.\n\n414\n00:23:29.760 --> 00:23:34.065\nAbout actually using a stored\nprocedure to help us out,\n\n415\n00:23:34.065 --> 00:23:37.833\nto insert in records into\na target table as well.\n\n416\n00:23:37.833 --> 00:23:42.733\nNow, we haven't really done a lot of\nstored procedures in our particular\n\n417\n00:23:42.733 --> 00:23:43.371\nseries.\n\n418\n00:23:43.371 --> 00:23:47.419\nAnd that's because we do concentrate\non some of the store procedures, but\n\n419\n00:23:47.419 --> 00:23:49.937\nnot everything that\na store procedure can do.\n\n420\n00:23:49.937 --> 00:23:54.250\nAnd so the main focus of what we're doing\nespecially for this show Is really showing\n\n421\n00:23:54.250 --> 00:23:58.378\nwhere we can actually write those complex\ntypes of joins that I've been talking\n\n422\n00:23:58.378 --> 00:24:01.360\nabout and statements and\nbe able to call them up by a name.\n\n423\n00:24:01.360 --> 00:24:03.170\nAnd give them whatever\nparameter that we want to.\n\n424\n00:24:03.170 --> 00:24:05.190\nAnd that's pretty much about it, okay?\n\n425\n00:24:05.190 --> 00:24:08.950\nThis one goes just a little bit\nbeyond that, it's not much.\n\n426\n00:24:08.950 --> 00:24:11.770\nBut normally when we start seeing this,\nthis is where we move beyond that\n\n427\n00:24:11.770 --> 00:24:16.950\nDML type of thing, and going into\nthe data definition a little bit as well.\n\n428\n00:24:16.950 --> 00:24:19.560\nSo just kinda realize that\nthis is a little bit above but\n\n429\n00:24:19.560 --> 00:24:21.600\nyou can actually still do this.\n\n430\n00:24:21.600 --> 00:24:25.650\nSo here, the first thing I'm gonna do\nis just make sure that I do not have\n\n431\n00:24:25.650 --> 00:24:28.480\nthat particular stored procedure first.\n\n432\n00:24:28.480 --> 00:24:29.350\nAnd it tells me that the command.\n\n433\n00:24:29.350 --> 00:24:32.510\nMan was completed successfully for\n\n434\n00:24:32.510 --> 00:24:37.420\na stored procedure that's called\norders for country, okay?\n\n435\n00:24:37.420 --> 00:24:39.940\nSo I've actually got it\nseparated the way that I have\n\n436\n00:24:39.940 --> 00:24:42.510\nwhich is orders by each country there.\n\n437\n00:24:42.510 --> 00:24:46.600\nAnd then we can create\na store procedure and\n\n438\n00:24:46.600 --> 00:24:49.680\nwe'll give it a name the same name here,\nand\n\n439\n00:24:49.680 --> 00:24:54.550\nthen from this point we're declaring\na variable called country as well.\n\n440\n00:24:54.550 --> 00:24:55.610\nOkay?\n\n441\n00:24:55.610 --> 00:24:58.880\nNow, the rest of this variable comes from\n\n442\n00:24:58.880 --> 00:25:02.050\nkind of the very same select\nstatement that we just looked at.\n\n443\n00:25:02.050 --> 00:25:05.180\nNotice is a pretty big inner join, and\n\n444\n00:25:05.180 --> 00:25:09.450\nthis time though,\nthe difference happens to be my filter.\n\n445\n00:25:09.450 --> 00:25:14.380\nOkay My filter is saying wherever the\nname, in other words what's actually in\n\n446\n00:25:14.380 --> 00:25:20.920\nthat column, is going to actually equal\nthis particular variable right here Okay?\n\n447\n00:25:20.920 --> 00:25:24.360\nNow remember that when we actually\nmake this, this stored procedure,\n\n448\n00:25:24.360 --> 00:25:27.330\nwe haven't called on it and\nthat's why it's not going to do anything.\n\n449\n00:25:27.330 --> 00:25:32.810\nExcept for go ahead create it and set\nit aside inside of the object explorer.\n\n450\n00:25:32.810 --> 00:25:38.300\nSo I'm going to create\nthe actual stored procedure and\n\n451\n00:25:38.300 --> 00:25:42.630\nI know it's not really exciting to only\nsee a just commanded successful here.\n\n452\n00:25:42.630 --> 00:25:47.420\nBut once I do that,\nthen we can actually take\n\n453\n00:25:47.420 --> 00:25:52.140\na look at the other part of this as\nwell of what we want to be able to do.\n\n454\n00:25:52.140 --> 00:25:55.710\nSo in that particular stored procedure,\nI’ve pretty much told it to run the entire\n\n455\n00:25:55.710 --> 00:25:58.610\ngamut of everything that we just did for\nevery country on the planet.\n\n456\n00:25:59.740 --> 00:26:02.870\nNow When I call it up, okay,\n\n457\n00:26:02.870 --> 00:26:08.310\nnotice that this time I set the same\nthing on that table as well.\n\n458\n00:26:08.310 --> 00:26:13.210\nI'm saying, whose particular identity\nis actually going to be here\n\n459\n00:26:13.210 --> 00:26:16.410\nwhen you actually pull in all that data\nthat already has some constraints on it.\n\n460\n00:26:16.410 --> 00:26:18.720\nOne is saying that sales order\ntable is gonna to do it.\n\n461\n00:26:18.720 --> 00:26:20.970\nWe're still inserting it in the same way.\n\n462\n00:26:20.970 --> 00:26:25.200\nThe differences happens to be when\nwe call upon the execution, okay?\n\n463\n00:26:25.200 --> 00:26:30.870\nSo at this point instead I can now call\nupon that entire join statement that was\n\n464\n00:26:30.870 --> 00:26:35.970\nmonstrously big and say look, I don't\nwant to run it against Germany right now.\n\n465\n00:26:35.970 --> 00:26:39.430\nI've already typed in all the US,\nbut I want to actually do this for,\n\n466\n00:26:39.430 --> 00:26:40.570\nlet's say Canada.\n\n467\n00:26:40.570 --> 00:26:41.610\nInstead.\n\n468\n00:26:41.610 --> 00:26:46.240\nAnd that way I'm filtering it down to\njust the Canadian sales that we've had.\n\n469\n00:26:46.240 --> 00:26:48.900\nSo then I simply,\noops I don't have to run the whole thing,\n\n470\n00:26:48.900 --> 00:26:52.900\nI just need to run this part right here.\n\n471\n00:26:52.900 --> 00:26:57.090\nAnd I execute it, and\nnow it tells me something else.\n\n472\n00:26:57.090 --> 00:26:58.400\nLet me see here.\n\n473\n00:26:59.890 --> 00:27:04.210\nIt's a duplicate key value, and it says\nthat the statement has been terminated.\n\n474\n00:27:04.210 --> 00:27:06.780\nNow sometimes you will get this.\n\n475\n00:27:06.780 --> 00:27:10.040\nAnd it's because it's saying, look,\nI already have a key value here, and\n\n476\n00:27:10.040 --> 00:27:12.240\nI don't like the value\nthat you're showing me.\n\n477\n00:27:12.240 --> 00:27:14.600\nBut, it actually goes ahead and\nruns it anyway.\n\n478\n00:27:14.600 --> 00:27:17.190\nLet's see what has happened here.\n\n479\n00:27:17.190 --> 00:27:19.550\nSo, let me go back up to this statement.\n\n480\n00:27:19.550 --> 00:27:23.330\nSo, we see records for Canada,\nthen we know it didn't like it but\n\n481\n00:27:23.330 --> 00:27:25.920\nit actually still executed it here.\n\n482\n00:27:25.920 --> 00:27:28.810\nAnd it did not actually\ninsert it in this time.\n\n483\n00:27:28.810 --> 00:27:32.190\nSo there was a timer too that I did run\nthis,where even though it complained about\n\n484\n00:27:32.190 --> 00:27:36.260\nit, it said hey, I don't like it, but\nit still showed me Canadian orders.\n\n485\n00:27:36.260 --> 00:27:39.150\nSo that means I have to actually\nfigure out what we've done here.\n\n486\n00:27:39.150 --> 00:27:41.200\nAll right, so\nI did figure out what the issues was, and\n\n487\n00:27:41.200 --> 00:27:44.670\nthat actually goes all the way back to the\nway that I created the stored procedure,\n\n488\n00:27:44.670 --> 00:27:46.130\nas well as the way I called it up.\n\n489\n00:27:46.130 --> 00:27:48.370\nLet me show you what I'm talking about,\nokay?\n\n490\n00:27:48.370 --> 00:27:51.520\nSo the error that we got was essentially\nsaying Ronnie, you declared,\n\n491\n00:27:51.520 --> 00:27:55.070\nyou actually tried to run this and\ninserted a primary key.\n\n492\n00:27:55.070 --> 00:27:59.590\nBut yet, you've also stated that you\nhave a primary key at the same time.\n\n493\n00:27:59.590 --> 00:28:01.690\nSo, even though I set\nthe identity that says,\n\n494\n00:28:01.690 --> 00:28:05.900\nI'm going to actually have the table\ndo it, I also declared it.\n\n495\n00:28:05.900 --> 00:28:09.500\nSo, what I need to do is,\nI need to get rid of this.\n\n496\n00:28:09.500 --> 00:28:12.330\nNow, the other thing that\nI needed to get rid of.\n\n497\n00:28:12.330 --> 00:28:14.850\nI know this is going to sound\nstrange to Daniel here, but\n\n498\n00:28:14.850 --> 00:28:16.345\nI made a mistake in typing.\n\n499\n00:28:16.345 --> 00:28:18.660\n>> [LAUGH]\n>> All the things that I did here.\n\n500\n00:28:18.660 --> 00:28:19.640\n>> No.\n>> Not me.\n\n501\n00:28:19.640 --> 00:28:21.740\n>> Not Ronnie, that never happens.\n\n502\n00:28:21.740 --> 00:28:24.720\nThis guys the most amazing typist\nI've ever seen in my life.\n\n503\n00:28:24.720 --> 00:28:25.290\n>> Exactly.\n\n504\n00:28:25.290 --> 00:28:28.305\nMost amazingly bad typist ever.\n\n505\n00:28:28.305 --> 00:28:28.830\n>> [LAUGH]\n>> But\n\n506\n00:28:28.830 --> 00:28:31.420\nwhat I need to do\n>> As I needed to actually rerun this\n\n507\n00:28:31.420 --> 00:28:32.870\nentire store procedure.\n\n508\n00:28:32.870 --> 00:28:37.040\nNow before I did that, okay, I do have\nto delete the store procedure out there.\n\n509\n00:28:37.040 --> 00:28:39.910\nAnd I could've dropped the store\nprocedure, is what I did.\n\n510\n00:28:39.910 --> 00:28:43.340\nSo I ran this command up here and\nI dropped it.\n\n511\n00:28:43.340 --> 00:28:47.650\nAnd the reason why I had to drop it is\nthat when I created the stork procedure,\n\n512\n00:28:47.650 --> 00:28:50.680\nI also called it up right here, too.\n\n513\n00:28:50.680 --> 00:28:55.280\nSo, this time what I'm actually going to\ndo instead is create the stork procedure,\n\n514\n00:28:55.280 --> 00:28:58.140\nbut leave out that sales order ID.\n\n515\n00:28:58.140 --> 00:29:03.060\nOkay, so let's see if I can\nactually run that part to where it\n\n516\n00:29:03.060 --> 00:29:06.510\nactually does equal country and\nlet me zoom out so that we can do that.\n\n517\n00:29:06.510 --> 00:29:11.440\nAnd I execute it and I get a message that\nsays, the query was successfully executed.\n\n518\n00:29:11.440 --> 00:29:16.600\nAnd that's what I want to see, and\nnow that I've actually got that done.\n\n519\n00:29:16.600 --> 00:29:20.600\nAnd now that I've also removed\nout the possibility of a primary\n\n520\n00:29:20.600 --> 00:29:25.850\nkey appearing here,\ncrossing my fingers once again.\n\n521\n00:29:25.850 --> 00:29:28.320\nAnd if I did everything correctly,\nand a big if.\n\n522\n00:29:28.320 --> 00:29:30.470\nI'm gonna put that in capital letters.\n\n523\n00:29:30.470 --> 00:29:33.030\nI should be able to execute it,\nand there we go.\n\n524\n00:29:33.030 --> 00:29:38.440\nSo it did take me just a moment\nto actually figure that one out.\n\n525\n00:29:38.440 --> 00:29:42.565\n8,134 rows have now also been added in,\n\n526\n00:29:42.565 --> 00:29:46.105\nand what we wanna do is we want\nto actually verify that again.\n\n527\n00:29:46.105 --> 00:29:51.970\nAnd so if I simply run, oops, well, let\nme see if I can click on that plus sign.\n\n528\n00:29:51.970 --> 00:29:55.570\nIt just collapses it down so\nwe don't have to actually see everything.\n\n529\n00:29:55.570 --> 00:30:00.480\nNow when I add all that in\nthere you start to see where I\n\n530\n00:30:00.480 --> 00:30:05.710\nnot only have Germany but if I scroll\ndown now I get Canada, as well.\n\n531\n00:30:05.710 --> 00:30:08.900\nSo all those orders are now added in, and\n\n532\n00:30:08.900 --> 00:30:11.460\nthat is just from us doing\nthese insert statements.\n\n533\n00:30:11.460 --> 00:30:14.680\nSo you can actually run them like\nwe said in stored procedures.\n\n534\n00:30:14.680 --> 00:30:16.870\nYou can actually use views to do it.\n\n535\n00:30:16.870 --> 00:30:19.210\nYou name it,\nthere's a whole bunch of ways to do this.\n\n536\n00:30:19.210 --> 00:30:21.330\nIt really depends on what\nyou really want to do.\n\n537\n00:30:21.330 --> 00:30:23.720\nThey key here though as far as to control,\n\n538\n00:30:23.720 --> 00:30:26.990\nis to actually use those where\nstatements more than anything else.\n\n539\n00:30:26.990 --> 00:30:31.210\nAnd then the stored procedures, just like\nwhat I found out here, remember that you\n\n540\n00:30:31.210 --> 00:30:36.140\nmight have to pay attention to exactly\nwhat you're calling up to get entered in.\n\n541\n00:30:36.140 --> 00:30:40.880\nYou can't do a more generic call as\nfar as creating that stored procedure.\n\n542\n00:30:40.880 --> 00:30:44.040\nYou don't have to also watch out for\nthat primary key as well, so\n\n543\n00:30:44.040 --> 00:30:47.910\nthere's a lot of information that we can\nhelp transfer into our current database,\n\n544\n00:30:47.910 --> 00:30:49.460\neither from old databases.\n\n545\n00:30:49.460 --> 00:30:53.100\nWe're having to manually type it in,\nand we can show you how to do that too.\n\n546\n00:30:53.100 --> 00:30:56.300\nSo hopefully you've learned that lesson\nright here in terms of actually using\n\n547\n00:30:56.300 --> 00:30:57.290\nthe insert statement.\n\n548\n00:30:57.290 --> 00:30:58.730\n>> Wow.\nIt was really good stuff through Ronnie.\n\n549\n00:30:58.730 --> 00:31:00.450\nNow we know how we can take data,\n\n550\n00:31:00.450 --> 00:31:05.355\ninsert it into a that would not just the\nold fashioned list, just insert some rows.\n\n551\n00:31:05.355 --> 00:31:07.755\nJust specific data that\nwe are looking for.\n\n552\n00:31:07.755 --> 00:31:11.495\nGet that into a database,\nmaybe a pen from other databases.\n\n553\n00:31:11.495 --> 00:31:15.437\nVery cool stuff, but\nyou did mention that you had more for us.\n\n554\n00:31:15.437 --> 00:31:19.407\nAnd it looks like it took up\nthe entire amount of time that we have\n\n555\n00:31:19.407 --> 00:31:21.177\njust with insertion of data.\n\n556\n00:31:21.177 --> 00:31:24.577\nSo, it looks like we've got\nourselves a part two on the horizon.\n\n557\n00:31:24.577 --> 00:31:27.067\nBut we do thank you so much for\n\n558\n00:31:27.067 --> 00:31:30.267\nexplaining these things to us\ncuz this is well beyond me.\n\n559\n00:31:30.267 --> 00:31:31.160\n>> [LAUGH]\n>> SQL stuff,\n\n560\n00:31:31.160 --> 00:31:32.735\nit just makes my mind go into much, and\n\n561\n00:31:32.735 --> 00:31:35.360\nRonnie you've done a great job\nof helping me get beyond that.\n\n562\n00:31:35.360 --> 00:31:37.355\nHopefully he's done that for\nyou guys as well.\n\n563\n00:31:37.355 --> 00:31:38.980\nWe do thank you guys for watching.\n\n564\n00:31:38.980 --> 00:31:42.030\nHopefully, we'll see you in part two, but\nwe're gonna go ahead and sign off for\n\n565\n00:31:42.030 --> 00:31:44.280\nIT Pro Tv,\nI've been you host Daniel Lowry.\n\n566\n00:31:44.280 --> 00:31:44.910\n>> And I'm Ronnie Wong.\n\n567\n00:31:44.910 --> 00:31:48.510\n>> And we'll see you next time.\n\n",
          "vimeoId": "166550922"
        },
        {
          "description": "In this episode, Daniel and Ronnie continue their discussion of INSERT, UPDATE, and DELETE statements in SQL Server 2014. They pick back up with the SELECT INTO statement and then jump into the UPDATE statement, explaining both ideas of deterministic and nondeterministic. Finally, they demonstrate deleting data using the DELETE statement.",
          "length": "2096",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-2-2-insert_update_and_delete_pt2-051016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-2-2-insert_update_and_delete_pt2-051016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-2-2-insert_update_and_delete_pt2-051016-1-sm.jpg",
          "title": "INSERT, UPDATE and DELETE Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.994 --> 00:00:17.510\nAll right, greetings everyone and welcome\nto another exciting episode of IT Pro TV.\n\n3\n00:00:17.510 --> 00:00:21.080\nI'm your host Daniel Lowrie and in\ntoday's episode we are continuing on with\n\n4\n00:00:21.080 --> 00:00:25.090\nour series on querying\nthe Microsoft SQL Server 2014.\n\n5\n00:00:25.090 --> 00:00:29.135\nJoining me back in the studio again today,\nmaking a repeat appearance.\n\n6\n00:00:29.135 --> 00:00:31.210\n>> [LAUGH]\n>> Our good friend, Mr. Ronnie Wong.\n\n7\n00:00:31.210 --> 00:00:32.120\nRonnie welcome back sir.\n\n8\n00:00:32.120 --> 00:00:32.900\nHow's it going?\n\n9\n00:00:32.900 --> 00:00:37.070\n>> It's going great today as we\ncontinue on with some SQL server 2014.\n\n10\n00:00:37.070 --> 00:00:38.000\nWe're actually gonna part two.\n\n11\n00:00:38.000 --> 00:00:39.140\nSurprising, I know.\n\n12\n00:00:39.140 --> 00:00:41.130\nBut overall though, another way for\n\n13\n00:00:41.130 --> 00:00:45.538\nus to of course continue on to actually\ntake a look at more TSQL, right?\n\n14\n00:00:45.538 --> 00:00:48.430\nMore transac SQL knowledge for\nus to gain, and\n\n15\n00:00:48.430 --> 00:00:52.930\nwe are actually continuing on after we\nactually did a little bit of inserts.\n\n16\n00:00:52.930 --> 00:00:54.460\nWe, actually have one more.\n\n17\n00:00:54.460 --> 00:00:56.690\nAnd I'm grateful for Daniel,\nfor pointing that out,\n\n18\n00:00:56.690 --> 00:00:58.140\ncuz I think I would've missed it.\n\n19\n00:00:58.140 --> 00:01:01.140\nBut we're actually gonna take a look at\ninserts, and then we'll move on of course,\n\n20\n00:01:01.140 --> 00:01:04.460\nto update statements, and\nalso of course, delete statements too.\n\n21\n00:01:04.460 --> 00:01:06.750\nSo the last thing that we\nwanna actually address,\n\n22\n00:01:06.750 --> 00:01:11.020\nwhen we start taking a look at inserts, as\nwe're kind of finishing this up, is that,\n\n23\n00:01:11.020 --> 00:01:15.610\nremember that we now know, right, after\ntaking a look in our last episode here,\n\n24\n00:01:15.610 --> 00:01:20.430\nwe can manually type in things, and\nactually have those update tables.\n\n25\n00:01:20.430 --> 00:01:23.890\nWe also, of course, can create join\nstatements and also update those.\n\n26\n00:01:23.890 --> 00:01:27.250\nAnd then even create a stored procedure\nand there's many more options that you\n\n27\n00:01:27.250 --> 00:01:31.520\nhave that you can actually continue\non to actually be able to do.\n\n28\n00:01:31.520 --> 00:01:35.920\nBut the other one that's really more of an\nactual insert statement is something that\n\n29\n00:01:35.920 --> 00:01:39.910\nwe've already seen before in our\nseries when we've talked about this.\n\n30\n00:01:39.910 --> 00:01:42.850\nWhich is the idea of\nan insert into statement, or\n\n31\n00:01:42.850 --> 00:01:47.560\nselect into statement that we also\nwant to remind ourselves of, too.\n\n32\n00:01:47.560 --> 00:01:53.120\nSo when we actually were dealing with\ncreating tables earlier in our series,\n\n33\n00:01:53.120 --> 00:01:55.780\nor maybe later in our series,\ndepending on where you watch it.\n\n34\n00:01:55.780 --> 00:02:00.120\nWhen we were actually creating tables,\none of the easiest ways to create a table\n\n35\n00:02:00.120 --> 00:02:04.870\nis to go ahead and actually create\nthe table, but actually also then,\n\n36\n00:02:04.870 --> 00:02:06.190\nat that point, you have to go in and\n\n37\n00:02:06.190 --> 00:02:10.659\nnow do an insert and add in all the data,\nusually a two-step process.\n\n38\n00:02:11.680 --> 00:02:16.790\nBut the good thing is, using the insert\nstatement, we can actually do what both of\n\n39\n00:02:16.790 --> 00:02:20.200\nthem using one batch of coding\nis what we can end up doing.\n\n40\n00:02:20.200 --> 00:02:23.970\nSo, instead of us having to do a two step\nprocess, we essentially end up creating\n\n41\n00:02:23.970 --> 00:02:26.630\nour select statement and\nwe create this table at the same time.\n\n42\n00:02:26.630 --> 00:02:29.710\nAnd it populates the table\nat the same time as well.\n\n43\n00:02:29.710 --> 00:02:32.460\nSo let's go ahead and\nshow you what we're talking about too.\n\n44\n00:02:32.460 --> 00:02:33.870\nSo here it is,\n\n45\n00:02:33.870 --> 00:02:37.670\nI'm actually on my last little batch\nstatement that we have ready to go.\n\n46\n00:02:37.670 --> 00:02:40.310\nAnd we've been working with\nthe sales order table and\n\n47\n00:02:40.310 --> 00:02:45.730\nit's actually now populated like crazy and\nI'm simply going to run this.\n\n48\n00:02:45.730 --> 00:02:48.380\nAnd clear out that object for right now.\n\n49\n00:02:48.380 --> 00:02:52.590\nAnd the key here is that when we\nactually do this select into statement,\n\n50\n00:02:52.590 --> 00:02:54.330\nis it's going to create its own table.\n\n51\n00:02:54.330 --> 00:02:57.150\nNow could I have left that\noriginal table there?\n\n52\n00:02:57.150 --> 00:03:00.740\nYes, but when I do this I'd have\nto actually create a new table.\n\n53\n00:03:00.740 --> 00:03:05.130\nSo it doesn't really allow me to really\nupdate a previously existing table.\n\n54\n00:03:05.130 --> 00:03:07.570\nSo that's why I wanted to go ahead and\nclear that out.\n\n55\n00:03:07.570 --> 00:03:11.830\nFrom this point on, let me move this bar\ndown so we can see more of this code here,\n\n56\n00:03:11.830 --> 00:03:14.900\nokay, so when we now take a look\nat this select statement,\n\n57\n00:03:14.900 --> 00:03:18.640\nnotice it's again,\na join type of statement for us.\n\n58\n00:03:18.640 --> 00:03:21.910\nWe now have everything\nthat we can possibly do.\n\n59\n00:03:21.910 --> 00:03:24.720\nNow this time, I'm not so\nworried about the primary key\n\n60\n00:03:24.720 --> 00:03:29.410\ncuz I'm not creating the table, and then\nsetting a primary key and then doing it.\n\n61\n00:03:29.410 --> 00:03:31.310\nThis time, what I can do is actually say,\n\n62\n00:03:31.310 --> 00:03:34.040\nhey, here's what my\nprimary key's gonna be.\n\n63\n00:03:34.040 --> 00:03:37.900\nAnd all of that information\nis actually from, well,\n\n64\n00:03:37.900 --> 00:03:42.080\nthis join statement that I have, and\nI'm really focusing in on Australia.\n\n65\n00:03:42.080 --> 00:03:45.570\nNow, if I want to take a look at that,\nlet me just remove out the relevant\n\n66\n00:03:45.570 --> 00:03:49.290\nportion here, I know that sounds strange,\nand just run a select statement.\n\n67\n00:03:49.290 --> 00:03:51.300\nLet me go ahead and do this.\n\n68\n00:03:51.300 --> 00:03:55.870\nSo if I run this I get the results and\nthis is what I always do.\n\n69\n00:03:55.870 --> 00:03:59.150\nI like verifying that here's\nwhat I'm expecting to see first.\n\n70\n00:03:59.150 --> 00:04:00.240\nAnd so there it is.\n\n71\n00:04:00.240 --> 00:04:04.000\nI've now got all of\nthe actual orders here and\n\n72\n00:04:04.000 --> 00:04:06.770\nthey're actually destined for\nAustralia, okay.\n\n73\n00:04:06.770 --> 00:04:08.520\nSo that's actually fine.\n\n74\n00:04:08.520 --> 00:04:12.720\nNow, once I have that and\nI wanted to actually create that into\n\n75\n00:04:12.720 --> 00:04:17.450\na sales order table by itself,\nit is fairly easy to do so.\n\n76\n00:04:17.450 --> 00:04:21.220\nAnd so we have our select\nportion of our statement and\n\n77\n00:04:21.220 --> 00:04:24.610\nthen we have the into portion as well.\n\n78\n00:04:24.610 --> 00:04:27.880\nAnd so it's right here that this\nis actually a substitute for\n\n79\n00:04:27.880 --> 00:04:30.060\nwell the word insert, okay?\n\n80\n00:04:30.060 --> 00:04:33.270\nSo instead when I do this,\nremember what's gonna happen.\n\n81\n00:04:33.270 --> 00:04:34.930\nIt's gonna select that data.\n\n82\n00:04:34.930 --> 00:04:39.290\nIt's going to create a table\ncalled DBO.salesorder.\n\n83\n00:04:39.290 --> 00:04:42.630\nAnd it's going to populate\nit all at the same time.\n\n84\n00:04:42.630 --> 00:04:44.650\nSo now let me go and select this.\n\n85\n00:04:45.690 --> 00:04:49.940\nAnd execute it and I get a message\nnow that says it was successful.\n\n86\n00:04:50.980 --> 00:04:55.830\nAnd so\nif I scroll on up into my database and\n\n87\n00:04:55.830 --> 00:04:58.900\nmy object explorer over here.\n\n88\n00:04:58.900 --> 00:05:01.320\nLet me refresh these tables here.\n\n89\n00:05:01.320 --> 00:05:05.170\nAnd what I should see is\nthe sales order table, and\n\n90\n00:05:05.170 --> 00:05:07.980\nthat one was just created right here.\n\n91\n00:05:07.980 --> 00:05:12.570\nIn part one, we saw where,\nactually what I said is,\n\n92\n00:05:12.570 --> 00:05:15.400\nright, we should only see\norders from Australia.\n\n93\n00:05:15.400 --> 00:05:17.670\nBut in part one,\nwhen we actually did this,\n\n94\n00:05:17.670 --> 00:05:23.010\nI actually added in orders from USA\nFrom Canada, I think, and from Germany.\n\n95\n00:05:23.010 --> 00:05:24.800\nThis time it's Australia.\n\n96\n00:05:24.800 --> 00:05:29.070\nSo now because I've created a brand\nnew table with the same name,\n\n97\n00:05:29.070 --> 00:05:34.550\nI should now be able to do a select\nstatement and I should just select all.\n\n98\n00:05:34.550 --> 00:05:41.053\nAnd then from DBO Sales order,\nand this should verify for\n\n99\n00:05:41.053 --> 00:05:45.759\nus And now I can actually see that\n\n100\n00:05:45.759 --> 00:05:50.590\nthe only orders that I have listed\nhere if I scroll down is Australia.\n\n101\n00:05:50.590 --> 00:05:54.150\nIt's a little bit hard to see, but that's\nexactly what you're actually seeing.\n\n102\n00:05:54.150 --> 00:05:57.580\nSo there's no additional orders,\nand so that's what it did.\n\n103\n00:05:57.580 --> 00:06:00.010\nNow, if I wanted to keep that other table,\nI could've.\n\n104\n00:06:00.010 --> 00:06:03.630\nI just needed to actually change\nthe name in that INTO statement.\n\n105\n00:06:03.630 --> 00:06:06.270\nAnd if I would've done that,\nsuch as sales order to,\n\n106\n00:06:06.270 --> 00:06:08.560\nit would've worked out\nperfectly fine as well.\n\n107\n00:06:08.560 --> 00:06:12.800\nSo, we do have that ability to\nalso insert data that way and\n\n108\n00:06:12.800 --> 00:06:15.280\ncreate the table structure\nthat way as well.\n\n109\n00:06:15.280 --> 00:06:18.170\nAnd we don't actually have to\nworry about it, it's all done and\n\n110\n00:06:18.170 --> 00:06:23.290\nover with so both ways where you can\nsee the insert statement really helping\n\n111\n00:06:23.290 --> 00:06:28.260\nyou again to be able to move or manipulate\ndata in the way that you want it.\n\n112\n00:06:28.260 --> 00:06:32.300\n>> Now Ronnie we're inserting data it's\nawesome, we all get this is a concept, is\n\n113\n00:06:32.300 --> 00:06:36.780\nan idea and even in practicum you've shown\nus a great demonstration of that as well.\n\n114\n00:06:36.780 --> 00:06:41.320\nBut you also mentioned updating right,\nupdating data, or\n\n115\n00:06:41.320 --> 00:06:47.610\nupdating the data inside of our tables,\nhow is that any different from inserting?\n\n116\n00:06:47.610 --> 00:06:50.860\nAnd really, what does it mean to\nupdate and how is that different?\n\n117\n00:06:50.860 --> 00:06:52.330\nLet me put it that way.\n\n118\n00:06:52.330 --> 00:06:55.160\n>> A lot of times when we're talking about\nupdating we're taking existing rows of\n\n119\n00:06:55.160 --> 00:06:55.730\ndata and\n\n120\n00:06:55.730 --> 00:07:01.080\nwe're simply adding in or we're changing\nthe data that actually exists there.\n\n121\n00:07:01.080 --> 00:07:03.520\nSo instead of the way that we\nwere doing it in part one,\n\n122\n00:07:03.520 --> 00:07:07.640\nwhich is simply adding in additional\ndata into a brand new table, and\n\n123\n00:07:07.640 --> 00:07:11.830\nthen taking other data and actually adding\nthat into that very same table, now what\n\n124\n00:07:11.830 --> 00:07:17.050\nwe're saying is we can take existing data\nin our database here, and also update it.\n\n125\n00:07:17.050 --> 00:07:20.460\nSo let me show you a perfect example\nof what Daniel's talking about.\n\n126\n00:07:20.460 --> 00:07:24.790\nSo I'm connected to that\nAdventureWorks 2012 database and\n\n127\n00:07:24.790 --> 00:07:27.010\nwhat I want to do is I want\nto actually go ahead and\n\n128\n00:07:27.010 --> 00:07:31.360\nrun this SELECT statement that we're\nseeing right here at the top, okay?\n\n129\n00:07:31.360 --> 00:07:35.490\nSo I'm going to select SalesOrderID,\nProductID, OrderQty, UnitPrice, And\n\n130\n00:07:35.490 --> 00:07:38.670\nunit discount, right,\nUnitPriceDiscount, and\n\n131\n00:07:38.670 --> 00:07:42.330\nalso get a total for\nthis one sales order, okay?\n\n132\n00:07:42.330 --> 00:07:46.300\nSo let's go ahead and run that, and\nsee what the results are going to be.\n\n133\n00:07:46.300 --> 00:07:50.471\nSo if I select that one, and\nthen I execute the statement,\n\n134\n00:07:50.471 --> 00:07:54.556\nwhat I should end up seeing,\nlet's see if we can zoom in so\n\n135\n00:07:54.556 --> 00:07:58.406\nthat we can see this, and\nI want to make a smaller set.\n\n136\n00:07:58.406 --> 00:08:00.526\nSo that we could see a little bit better.\n\n137\n00:08:00.526 --> 00:08:01.970\nKind of zoom out, there we go.\n\n138\n00:08:03.580 --> 00:08:06.660\nSo let's take a look at the results\nthat we're seeing here\u007f and\n\n139\n00:08:06.660 --> 00:08:08.820\nknow what's going on, okay.\n\n140\n00:08:08.820 --> 00:08:12.980\nSo right across here on the first row,\nright, you see the product ID,\n\n141\n00:08:12.980 --> 00:08:16.520\nyou see everything else, but\nnotice that we have order quantity,\n\n142\n00:08:16.520 --> 00:08:18.910\nwe have unit price, and notice this.\n\n143\n00:08:18.910 --> 00:08:21.310\nThe unit price discount, okay.\n\n144\n00:08:21.310 --> 00:08:25.840\nAnd the overall total that we have\navailable for us right there.\n\n145\n00:08:25.840 --> 00:08:30.500\nNow, when you start to see this, let's say\nfor an example that what I realize for\n\n146\n00:08:30.500 --> 00:08:35.395\nthe orders that I have here,\nfor this particular customer,\n\n147\n00:08:35.395 --> 00:08:41.510\n43659 I want it to actually give\na per-unit price discount, okay?\n\n148\n00:08:41.510 --> 00:08:45.710\nBut already entered into the database\nis the default value of zero,\n\n149\n00:08:45.710 --> 00:08:48.750\nokay, so how do I actually go in and\nchange that?\n\n150\n00:08:48.750 --> 00:08:49.990\nHe's already got 12 orders,\n\n151\n00:08:49.990 --> 00:08:54.420\nit's gonna continue to actually grow\nif he's continuing to be my customer.\n\n152\n00:08:54.420 --> 00:08:58.460\nSo what can I actually go ahead and\ndo if I wanted to do something like this?\n\n153\n00:08:58.460 --> 00:09:02.900\nWell, instead,\nwe can add in an update, okay?\n\n154\n00:09:02.900 --> 00:09:07.640\nNow, when we start adding in an update,\nit's a fairly simple update process to do,\n\n155\n00:09:07.640 --> 00:09:13.340\nand let me show you right here in the next\nlittle portion of this statement as well.\n\n156\n00:09:13.340 --> 00:09:17.650\nSo, focusing in on this first\nupdate statement that I have.\n\n157\n00:09:19.926 --> 00:09:26.270\nSo, when we start to take a look here\nat the sales.sales order detail.\n\n158\n00:09:26.270 --> 00:09:31.510\nI can go ahead now, and actually set\nup what it is I'd want to update.\n\n159\n00:09:31.510 --> 00:09:36.729\nSo, I'm saying that I want\nthe current discount price,\n\n160\n00:09:36.729 --> 00:09:43.320\nand I want to add an additional 5%,\nokay, to that discount price.\n\n161\n00:09:43.320 --> 00:09:45.510\nNow, the problem that I\nhave is fairly simple.\n\n162\n00:09:45.510 --> 00:09:49.310\nMy discount price currently is well,\nzero, okay?\n\n163\n00:09:49.310 --> 00:09:53.210\nSo it makes sense what we should just see\nis a 0.05 in other words five cents but,\n\n164\n00:09:53.210 --> 00:09:57.110\nthat's just the way that this\nparticular order ended up working here.\n\n165\n00:09:57.110 --> 00:10:00.830\nBut that's actually as easy as it can be,\n\n166\n00:10:00.830 --> 00:10:02.800\nis if you want to actually\nsee that happening.\n\n167\n00:10:02.800 --> 00:10:06.140\nNow, you do need to be careful\nwhen you start to do this.\n\n168\n00:10:06.140 --> 00:10:07.850\nAnd this is WHERE.\n\n169\n00:10:07.850 --> 00:10:11.930\nOnce again, the WHERE condition,\nit is essential, okay,\n\n170\n00:10:11.930 --> 00:10:15.090\nthat you absolutely pay attention to this.\n\n171\n00:10:15.090 --> 00:10:20.680\nIf not, if you do not do this,\nit will update every single record and\n\n172\n00:10:20.680 --> 00:10:24.650\nevery single row,\neven if you don't mean for that to happen.\n\n173\n00:10:24.650 --> 00:10:28.530\nAnd you might say, well what's the big\ndeal if I add in five cents, or\n\n174\n00:10:28.530 --> 00:10:32.090\nfive percent to every single unit price.\n\n175\n00:10:32.090 --> 00:10:34.340\nNot the entire order right Daniel?\n\n176\n00:10:34.340 --> 00:10:39.810\nWe're saying every unit price that I end\nup selling, well if you think about that\n\n177\n00:10:39.810 --> 00:10:45.220\nfor a large company, this could actually\nadd up to millions of lost revenue.\n\n178\n00:10:45.220 --> 00:10:48.490\nOr hundreds of thousands at\nleast in lost revenues and\n\n179\n00:10:48.490 --> 00:10:53.280\nI guarantee you somebody's gonna take a\nnotice if you start doing stuff like that.\n\n180\n00:10:53.280 --> 00:10:55.580\nIt's okay to say look\nthis customer has been so\n\n181\n00:10:55.580 --> 00:10:59.900\nloyal that we believe yes we\nshould go ahead and do that.\n\n182\n00:10:59.900 --> 00:11:02.940\nAnd we can actually go ahead and\nwrite that up to do that, but if\n\n183\n00:11:02.940 --> 00:11:08.180\nyou forget to add in that where statement\nit will do it for every single record.\n\n184\n00:11:08.180 --> 00:11:11.380\nIn that table and that could become,\nagain like I said,\n\n185\n00:11:11.380 --> 00:11:15.830\ndevastating as far as the actual\noverall impact goes in real life.\n\n186\n00:11:15.830 --> 00:11:19.292\n>> What do they call that,\nthe resume generating event, the RGE.\n\n187\n00:11:19.292 --> 00:11:19.898\n[LAUGH] Yeah.\n\n188\n00:11:19.898 --> 00:11:21.462\nThat'll definitely do it for you, Ronny.\n\n189\n00:11:21.462 --> 00:11:23.320\n>> Yeah so that's why it's very important.\n\n190\n00:11:23.320 --> 00:11:26.833\nThat before you every run anything like\nthis on a real production database,\n\n191\n00:11:26.833 --> 00:11:27.918\nI kid you not.\n\n192\n00:11:27.918 --> 00:11:29.863\n[LAUGH]\n>> Be careful.\n\n193\n00:11:29.863 --> 00:11:32.110\n[LAUGH]\n>> I don't know how else to do this.\n\n194\n00:11:32.110 --> 00:11:32.940\nYeah, be careful.\n\n195\n00:11:32.940 --> 00:11:37.900\nMy recommendation is make a copy\nof this particular table, okay?\n\n196\n00:11:37.900 --> 00:11:43.560\nAnd make a copy of it in your database,\nmake sure it's not connected to anything.\n\n197\n00:11:43.560 --> 00:11:46.500\nRun it,\nverify it's actually what you want, okay?\n\n198\n00:11:46.500 --> 00:11:51.060\nI would not run this on a row production\ndatabase unless you absolutely know\n\n199\n00:11:51.060 --> 00:11:55.680\nthat this is the limitation that you\nshould end up seeing and it should work.\n\n200\n00:11:55.680 --> 00:11:56.710\nBut that's me.\n\n201\n00:11:56.710 --> 00:12:00.430\nIf you're bold and you go it doesn't\nmatter anyways it's my money, and\n\n202\n00:12:00.430 --> 00:12:03.630\nyou got it to spend, well that's fine,\nbut just kind of realize\n\n203\n00:12:03.630 --> 00:12:06.570\nthat when somebody starts adding all\nthis up and they're using the data like.\n\n204\n00:12:06.570 --> 00:12:11.080\nWhy is everybody getting an extra 5% on\nevery single one or 5 cents whatever it\n\n205\n00:12:11.080 --> 00:12:14.650\nmight be, so you just got to realize\nthat's what going to happen.\n\n206\n00:12:14.650 --> 00:12:18.385\nHere Rush is just saying add\nan additional five cents or\n\n207\n00:12:18.385 --> 00:12:21.150\n5% into whatever\nthe current unit price is.\n\n208\n00:12:21.150 --> 00:12:24.450\nFor this particular one, there is no\ncurrent unit price so what we should\n\n209\n00:12:24.450 --> 00:12:29.850\nis that this column here at the bottom\nshould end up giving us well five cents.\n\n210\n00:12:29.850 --> 00:12:30.879\nSo I'm gonna select that.\n\n211\n00:12:31.940 --> 00:12:37.740\nI scroll back out and then execute it and\nnow notice that I only affected 12 rows.\n\n212\n00:12:37.740 --> 00:12:40.760\nNow that's actually very important.\n\n213\n00:12:40.760 --> 00:12:43.570\nYou wanna confirm that when you run this,\n\n214\n00:12:43.570 --> 00:12:47.490\nright, that it is only the number\nof rows that you expect to see.\n\n215\n00:12:47.490 --> 00:12:49.350\nIf all of a sudden I ran this and\nI saw 2000 rows,\n\n216\n00:12:49.350 --> 00:12:53.979\nI'm like I only thought it was going to\naffect 12, I have done something wrong.\n\n217\n00:12:53.979 --> 00:12:54.590\n>> [LAUGH]\n>> And\n\n218\n00:12:54.590 --> 00:12:56.960\nthat is absolutely something\nwe don't want to do.\n\n219\n00:12:56.960 --> 00:12:58.640\n>> Might be a hint that\nsomething went awry, right?\n\n220\n00:12:58.640 --> 00:13:01.380\n>> Just a tad of a hint here you know but\n\n221\n00:13:01.380 --> 00:13:05.700\nI know that we're only doing\nthis out of as a sample.\n\n222\n00:13:05.700 --> 00:13:10.070\nBut it's always important that,\nas much damage as this can cause,\n\n223\n00:13:10.070 --> 00:13:14.140\nthat we're really careful here at this\nparticular point when we are running this.\n\n224\n00:13:14.140 --> 00:13:18.070\nSo let's take a look at\nthe select statement again and\n\n225\n00:13:18.070 --> 00:13:19.370\nwe will execute that one.\n\n226\n00:13:20.430 --> 00:13:26.240\nAnd now, let's verify that we did end\nup getting that unit price in there.\n\n227\n00:13:26.240 --> 00:13:26.950\nAnd there you go.\n\n228\n00:13:26.950 --> 00:13:30.980\nSo now you can actually see where\nthat's the idea of an update, right?\n\n229\n00:13:30.980 --> 00:13:33.430\nIs we have the existing\ncolumns that are there,\n\n230\n00:13:33.430 --> 00:13:37.330\nthen we can add in more additional\ninformation if we actually choose to.\n\n231\n00:13:37.330 --> 00:13:40.390\nSo, this is actually a good one because\nit actually did start with zero.\n\n232\n00:13:40.390 --> 00:13:41.330\nIt's easier to see.\n\n233\n00:13:41.330 --> 00:13:46.590\nIf I would've added in let's say\n$0.05 to the UnitPrice here,\n\n234\n00:13:46.590 --> 00:13:50.060\nfor me, I probably would not have actually\nbeen able to tell one way or the other.\n\n235\n00:13:50.060 --> 00:13:54.410\nBecause I'm not actually going into\nthe sense of the stuff like that.\n\n236\n00:13:54.410 --> 00:14:00.237\nBut here, adding in this particular unit\nprice is always a great thing for us to\n\n237\n00:14:00.237 --> 00:14:06.087\nbe able to take a look just a little bit\nmore per order as we continue to see that.\n\n238\n00:14:06.087 --> 00:14:08.556\nSo being able to do that really good.\n\n239\n00:14:08.556 --> 00:14:12.560\nNow the good thing is if you did\nkeep track of everything and\n\n240\n00:14:12.560 --> 00:14:16.806\nnow all of a sudden you go wait a minute,\nmaybe I need a dash, so\n\n241\n00:14:16.806 --> 00:14:21.240\nyou do that but not for\nthat particular right customer.\n\n242\n00:14:21.240 --> 00:14:25.010\nWell you can always go back in,\nespecially if you've limited yourself and\n\n243\n00:14:25.010 --> 00:14:26.690\nyou've paid attention here.\n\n244\n00:14:26.690 --> 00:14:28.960\nIs notice that you can\ntake that away as well.\n\n245\n00:14:28.960 --> 00:14:34.680\nSo if you said, look no more discounts,\nyou select that one,\n\n246\n00:14:34.680 --> 00:14:38.920\nand notice it's actually\nsubtract the 0.05 here.\n\n247\n00:14:38.920 --> 00:14:43.191\nAnd I go ahead and press, and\nnotice the 12 rows have been updated.\n\n248\n00:14:45.333 --> 00:14:48.630\nAnd then when I run this whole\nthing again for that one customer.\n\n249\n00:14:49.840 --> 00:14:50.764\nOops, well maybe.\n\n250\n00:14:54.238 --> 00:14:56.350\nIt's like skating on ice.\n\n251\n00:14:56.350 --> 00:14:57.805\n>> I'll have to get you a mouse for this.\n\n252\n00:14:57.805 --> 00:14:59.750\n[LAUGH]\n>> So there we go,\n\n253\n00:14:59.750 --> 00:15:03.260\nnow the unit price is all\nthe way back to zero again.\n\n254\n00:15:03.260 --> 00:15:07.620\nOkay, so\nyou can kind of correct your errors.\n\n255\n00:15:07.620 --> 00:15:11.540\nBut at the same time, it only helps\nif you know exactly what you did.\n\n256\n00:15:11.540 --> 00:15:14.993\nIf you just weren't paying attention, you\nupdated everything, can you go back and\n\n257\n00:15:14.993 --> 00:15:15.586\nchange that?\n\n258\n00:15:15.586 --> 00:15:20.833\nYes, but just be aware that especially\nif it's a calculated value.\n\n259\n00:15:20.833 --> 00:15:22.107\nYou may end of seeing,\n\n260\n00:15:22.107 --> 00:15:25.997\ndepending on the number of decimal\nplaces that are also to the right,\n\n261\n00:15:25.997 --> 00:15:31.090\nyou add in 5% and you subtract 5%, it may\ngive you a different value at the end.\n\n262\n00:15:31.090 --> 00:15:35.340\nSo be very careful about what\nyou're exactly doing when\n\n263\n00:15:35.340 --> 00:15:37.480\nyou start to see that, too.\n\n264\n00:15:37.480 --> 00:15:38.660\n>> Query with caution.\n\n265\n00:15:38.660 --> 00:15:42.030\n>> Yes, precaution is a great thing.\n\n266\n00:15:42.030 --> 00:15:47.269\nNow taking from one table\nis something you can do,\n\n267\n00:15:47.269 --> 00:15:50.153\nbut taking away updating.\n\n268\n00:15:50.153 --> 00:15:54.187\nExcuse me, one table is something\nthat you can do directly, but\n\n269\n00:15:54.187 --> 00:15:56.700\nit is not something that is.\n\n270\n00:15:56.700 --> 00:16:00.149\nThat you can actually do\nwith joins very easily.\n\n271\n00:16:00.149 --> 00:16:04.160\nSo the original SQL language itself,\nright?\n\n272\n00:16:04.160 --> 00:16:07.115\nThe SQL, the mother language, right?\n\n273\n00:16:07.115 --> 00:16:12.317\nTransact-SQL, the one that we're\nworking with is a dialect,\n\n274\n00:16:12.317 --> 00:16:15.896\nyou can update joins in the dialect, okay?\n\n275\n00:16:15.896 --> 00:16:19.715\nIn other words,\nthat specific to Transact-SQL, but\n\n276\n00:16:19.715 --> 00:16:25.080\nyou cannot actually do that if you're\nactually doing an update to a JOIN.\n\n277\n00:16:25.080 --> 00:16:29.380\nTrying to just use the regular SQL as\nwell, so you do need to be careful there.\n\n278\n00:16:29.380 --> 00:16:32.515\nNow, most of the time it doesn't\nreally affect us one way or the other.\n\n279\n00:16:32.515 --> 00:16:36.810\nCuz usually when we start doing this\ntype of updating, it's fairly simple,\n\n280\n00:16:36.810 --> 00:16:38.915\nthere's not really lot of differences.\n\n281\n00:16:38.915 --> 00:16:42.958\nBut they're just trying to let us know and\nsame thing would also be true with delete.\n\n282\n00:16:42.958 --> 00:16:48.805\nYou can't update from joins using\nthe original SQL language itself but\n\n283\n00:16:48.805 --> 00:16:51.733\nyou can inside of a Transact-SQL.\n\n284\n00:16:51.733 --> 00:16:55.482\nSo just be aware if they're showing you\nthat you're doing a joint statement, and\n\n285\n00:16:55.482 --> 00:16:57.570\nyou're doing an update.\n\n286\n00:16:57.570 --> 00:17:02.430\nIf they ask you is this actually something\nyou can do in the SQL or Transact-SQL?\n\n287\n00:17:02.430 --> 00:17:06.050\nMake sure you kind of know\nthe difference in what we're doing.\n\n288\n00:17:06.050 --> 00:17:09.161\nAll right, so let's also take\na look at this idea of a join and\n\n289\n00:17:09.161 --> 00:17:11.370\nalso updating from this point too, okay?\n\n290\n00:17:11.370 --> 00:17:16.870\nSo in our next set of coding\nhere that we're taking that,\n\n291\n00:17:16.870 --> 00:17:20.220\nnotice once again a little\nbit of different join.\n\n292\n00:17:20.220 --> 00:17:25.920\nAnd this time let's choose, let see what\ndid I have, Australia, think I did that.\n\n293\n00:17:27.400 --> 00:17:29.690\nLet's use Australia again here.\n\n294\n00:17:29.690 --> 00:17:37.370\nSo if we take a look at this entire select\nquery, right here, let's execute that.\n\n295\n00:17:37.370 --> 00:17:42.780\nAnd let's see what happens with Australia,\nas well and all the unit prices there.\n\n296\n00:17:42.780 --> 00:17:45.720\nI'm trying to see if there's actually a\nunit price that's a little bit different.\n\n297\n00:17:45.720 --> 00:17:46.899\nLet's try the US,\n\n298\n00:17:46.899 --> 00:17:51.849\nthat only gives us some stuff that we can\nplay around with just a little bit here.\n\n299\n00:17:55.564 --> 00:17:58.210\nI don't know if it's US or USA.\n\n300\n00:17:58.210 --> 00:17:59.562\nI'm just making an assumption here.\n\n301\n00:18:04.101 --> 00:18:05.280\nNope, there's no rows there.\n\n302\n00:18:05.280 --> 00:18:08.721\nI'll just try USA,\nit may not even be that,\n\n303\n00:18:08.721 --> 00:18:12.640\nnow that I think about it,\nI'm gonna try Canada.\n\n304\n00:18:12.640 --> 00:18:16.920\nNope, all right, so we're gonna go\nto the next one, Canada [LAUGH].\n\n305\n00:18:16.920 --> 00:18:17.890\n>> Our neighbors to the north.\n\n306\n00:18:17.890 --> 00:18:19.020\n>> Yes, our neighbors to the north.\n\n307\n00:18:19.020 --> 00:18:21.770\nApparently, I don't know either\nabbreviations that are standard for\n\n308\n00:18:21.770 --> 00:18:22.650\nUnited States here.\n\n309\n00:18:24.040 --> 00:18:27.640\nWe'll see that, yep, there we go,\nwe got about 20,000 rows, 19,000 rows.\n\n310\n00:18:27.640 --> 00:18:29.150\nThat will help us.\n\n311\n00:18:29.150 --> 00:18:31.470\nSo, I'm just gonna see\nif I can scroll down and\n\n312\n00:18:31.470 --> 00:18:37.070\nfind some that have, there's some,\nI just saw it kind of flip by, okay.\n\n313\n00:18:37.070 --> 00:18:42.270\nSo here we go, we now have some\nthat also are very, very tiny.\n\n314\n00:18:42.270 --> 00:18:46.130\nBut notice that there are some\nthat actually do have a unit price\n\n315\n00:18:46.130 --> 00:18:47.610\nthat's actually in there.\n\n316\n00:18:47.610 --> 00:18:50.040\nAnd of course,\nI'll never be able to find that one again.\n\n317\n00:18:50.040 --> 00:18:54.818\nBut [LAUGH] I do see some that\nwe can actually use to help us\n\n318\n00:18:54.818 --> 00:18:57.155\nto point out that this\nis actually working.\n\n319\n00:18:57.155 --> 00:19:00.895\nAnd also adding up at the same\ntime as well, all right?\n\n320\n00:19:00.895 --> 00:19:02.885\nSo notice this particular JOIN,\n\n321\n00:19:02.885 --> 00:19:05.855\nnow it doesn't mean that it actually\ndoes it on every single row.\n\n322\n00:19:05.855 --> 00:19:11.455\nBut what I'm actually going to do though\nis once we have that JOIN statement,\n\n323\n00:19:11.455 --> 00:19:17.370\nI can update that entire SalesOrderDetail,\nokay?\n\n324\n00:19:17.370 --> 00:19:21.240\nBased on the information that I see and\nalso limiting it to of course,\n\n325\n00:19:21.240 --> 00:19:22.970\nthe Canadians here.\n\n326\n00:19:22.970 --> 00:19:26.720\nWhen I do this and it's saying\nthat I have an incorrect syntax.\n\n327\n00:19:26.720 --> 00:19:31.230\nSo, let's see what that incorrect\nsyntax is going to be here\n\n328\n00:19:31.230 --> 00:19:32.090\nwhen we try and run this.\n\n329\n00:19:32.090 --> 00:19:34.750\nI have to actually run a SET statement.\n\n330\n00:19:34.750 --> 00:19:38.870\nAnd this should say SET and\nthen the UnitPrice and\n\n331\n00:19:38.870 --> 00:19:44.250\nI'm trying to actually determine why this\nis not gonna be what I want it to be.\n\n332\n00:19:45.720 --> 00:19:48.750\nDo I have to put in parenthesis, nope.\n\n333\n00:19:48.750 --> 00:19:50.890\nAll right, well, let's just see\nwhat happens when we run this.\n\n334\n00:19:50.890 --> 00:19:52.179\nIt may turn out to be an error.\n\n335\n00:19:53.710 --> 00:19:57.160\nYou get a little squiggly line,\nthat's normally not a good indication.\n\n336\n00:19:57.160 --> 00:20:02.910\nThere we go, it actually says that I\ndo have an error here in my syntax and\n\n337\n00:20:02.910 --> 00:20:04.260\ncode here.\n\n338\n00:20:04.260 --> 00:20:06.740\nAll right, so I did figure out what\nwas actually going on here and\n\n339\n00:20:06.740 --> 00:20:08.670\nlet me show you what's happening, okay?\n\n340\n00:20:08.670 --> 00:20:12.070\nSo a lot of this is actually\njust basic user error,\n\n341\n00:20:12.070 --> 00:20:15.830\nanother is running long mistake\nis what ended up happening, okay?\n\n342\n00:20:15.830 --> 00:20:19.190\nSo I did go ahead and I had this and\n\n343\n00:20:19.190 --> 00:20:24.340\nthis is where I actually uncomment\nis what I needed to do, right?\n\n344\n00:20:24.340 --> 00:20:26.730\nSo when I did this it actually\nturned out and it gave me an error.\n\n345\n00:20:26.730 --> 00:20:29.280\nNow this is where SQL can be\n\n346\n00:20:29.280 --> 00:20:32.280\na little bit more misleading\nin the error statement, right?\n\n347\n00:20:32.280 --> 00:20:34.130\nIt tells you what line it's at and\n\n348\n00:20:34.130 --> 00:20:36.560\njust tells you that there's\nan incorrect syntax.\n\n349\n00:20:36.560 --> 00:20:39.809\nAnd the problem that you have\nis this word near, okay?.\n\n350\n00:20:39.809 --> 00:20:41.682\nWhen you see it, right?\n\n351\n00:20:41.682 --> 00:20:43.670\nFor me, near means what?\n\n352\n00:20:43.670 --> 00:20:44.370\nAround, right?\n\n353\n00:20:44.370 --> 00:20:46.623\nSo maybe the UnitPriceDiscount or\n\n354\n00:20:46.623 --> 00:20:51.270\nmaybe the way that I actually have this,\nthat seems logical to me.\n\n355\n00:20:51.270 --> 00:20:53.355\nBut that's what near means here,\nof course.\n\n356\n00:20:53.355 --> 00:20:56.480\n>> [LAUGH] Near means within\nthe more general vicinity.\n\n357\n00:20:56.480 --> 00:20:58.020\n>> Maybe somewhere around the code.\n\n358\n00:20:58.020 --> 00:20:59.880\nIn other words, somewhere in the code,\nin the entirety.\n\n359\n00:20:59.880 --> 00:21:01.536\n>> In the entirety of\nthe [INAUDIBLE] statement.\n\n360\n00:21:01.536 --> 00:21:03.900\n[LAUGH]\n>> So as I was looking at this I was like,\n\n361\n00:21:03.900 --> 00:21:05.750\nI am missing something and\nI just couldn't see it.\n\n362\n00:21:05.750 --> 00:21:08.810\nAnd the reason why is that I\nlike using these comments cuz\n\n363\n00:21:08.810 --> 00:21:10.100\nit means I don't have to type.\n\n364\n00:21:10.100 --> 00:21:13.530\nI could go ahead and pre-type this and\nthat way all I have to do is uncomment.\n\n365\n00:21:13.530 --> 00:21:16.530\nAnd I had forgotten to\nuncomment this line itself,\n\n366\n00:21:16.530 --> 00:21:19.755\nwhich it's funny since\nwe're talking about update.\n\n367\n00:21:19.755 --> 00:21:20.439\n>> It is the update portion.\n\n368\n00:21:20.439 --> 00:21:23.160\n>> It is the update portion.\n\n369\n00:21:23.160 --> 00:21:24.840\nAnd so since we're talking\nabout UPDATE statements,\n\n370\n00:21:24.840 --> 00:21:26.590\nI actually didn't run an update.\n\n371\n00:21:26.590 --> 00:21:30.120\nAnd I just tried to set something and\nwell, you can set it if you want to.\n\n372\n00:21:30.120 --> 00:21:32.700\nBut it's not gonna do anything cuz\nyou're not telling me where it\n\n373\n00:21:32.700 --> 00:21:33.730\nactually supposed to go.\n\n374\n00:21:33.730 --> 00:21:39.690\nSo here it is, I actually just had to\ngo ahead and also uncomment the UPDATE.\n\n375\n00:21:39.690 --> 00:21:44.180\nSo this leads to actually say well, Ronnie\nmaybe you shouldn't do that, I understand.\n\n376\n00:21:44.180 --> 00:21:46.160\nBut at the same time there's a trade off,\nright?\n\n377\n00:21:46.160 --> 00:21:48.600\nIf I don't this,\nit means you have to watch me type and\n\n378\n00:21:48.600 --> 00:21:50.280\nDaniel's shaking his head like no way.\n\n379\n00:21:50.280 --> 00:21:52.050\n>> [LAUGH]\n>> So it's actually better that I do this,\n\n380\n00:21:52.050 --> 00:21:55.250\nbut it also means what,\nmake sure you pay attention to the coding.\n\n381\n00:21:55.250 --> 00:21:59.650\nIf not, you'll do like I do here and\njust try and figure it out, but\n\n382\n00:21:59.650 --> 00:22:01.310\nthat's exactly what happened.\n\n383\n00:22:01.310 --> 00:22:04.810\nI just simply didn't uncomment it and\nthat's what lead me this.\n\n384\n00:22:04.810 --> 00:22:07.234\nAnd so you see now where\nit actually says near, but\n\n385\n00:22:07.234 --> 00:22:09.330\nnow notice that little red squiggly line.\n\n386\n00:22:09.330 --> 00:22:14.690\nAnd I haven't actually focused in on this,\nany portion of our series so far.\n\n387\n00:22:14.690 --> 00:22:17.900\nBut the good thing is inside\nthe SQL Management Studio,\n\n388\n00:22:17.900 --> 00:22:20.330\nwhen you do have some tactical errors.\n\n389\n00:22:20.330 --> 00:22:23.450\nA lot of times you can look for\nthat little squiggly line that tells you\n\n390\n00:22:23.450 --> 00:22:25.560\nif you run this,\nI'm gonna throw an error at you.\n\n391\n00:22:25.560 --> 00:22:28.095\nWhen it has that little squiggly line.\n\n392\n00:22:28.095 --> 00:22:31.080\nAnd so that's actually a good thing cuz\nI kind of said I think it's gonna throw\n\n393\n00:22:31.080 --> 00:22:33.770\nan error but\nI couldn't see what the error was.\n\n394\n00:22:33.770 --> 00:22:35.560\nBut finally by looking that up, I go yeah,\n\n395\n00:22:35.560 --> 00:22:39.160\nI forgot the word UPDATE,\nwhich is what we're doing.\n\n396\n00:22:39.160 --> 00:22:41.350\nSo now I could select all this here.\n\n397\n00:22:41.350 --> 00:22:43.090\nOops, well maybe.\n\n398\n00:22:43.090 --> 00:22:46.190\nNow to the end and execute it.\n\n399\n00:22:46.190 --> 00:22:48.960\nAnd now it's actually executing the query,\nbut\n\n400\n00:22:48.960 --> 00:22:51.510\nnotice it's taking a bit of time, okay?\n\n401\n00:22:51.510 --> 00:22:55.360\nSo because it's actually executing a query\nand it's taking a little bit of time.\n\n402\n00:22:55.360 --> 00:22:58.230\nIt leads you to actually believe that\nit's running through the data multiple\n\n403\n00:22:58.230 --> 00:22:59.320\ntimes here.\n\n404\n00:22:59.320 --> 00:23:02.230\nAnd then it's gonna generate\nwhatever that update is gonna be.\n\n405\n00:23:02.230 --> 00:23:06.620\nSo it took about 16 seconds from what I\ncould see, that's a little bit longer.\n\n406\n00:23:06.620 --> 00:23:10.110\nBut now notice what has happened here too,\nokay?\n\n407\n00:23:10.110 --> 00:23:13.180\nAnd the reason that it's also\ncome about is because it's\n\n408\n00:23:13.180 --> 00:23:15.610\nalso changed these totals, okay?\n\n409\n00:23:15.610 --> 00:23:18.570\nSo not only did we actually\ngive a per unit discount,\n\n410\n00:23:18.570 --> 00:23:20.330\nthat means it had to go through and\ndo what?\n\n411\n00:23:20.330 --> 00:23:23.880\nThe order of quantity times the unit\nprice, subtract out the discount and\n\n412\n00:23:23.880 --> 00:23:25.970\nthen come up with a new line total.\n\n413\n00:23:25.970 --> 00:23:29.288\nSo it did take a little bit more\ntime to generate everything.\n\n414\n00:23:29.288 --> 00:23:34.928\nBut I'm gonna see if I can scroll\ndown to that area where actually\n\n415\n00:23:34.928 --> 00:23:39.957\ndid have a few that actually does change,\nthere we go.\n\n416\n00:23:39.957 --> 00:23:41.441\nSo this one right here,\n\n417\n00:23:41.441 --> 00:23:47.246\nhere's one that I actually end up changing\nbecause apparently, it was at 0.35 before.\n\n418\n00:23:47.246 --> 00:23:51.403\nAnd so you do see where it actually did\nupdate and remember all this other number,\n\n419\n00:23:51.403 --> 00:23:52.333\nnot this number.\n\n420\n00:23:52.333 --> 00:23:56.172\nBut this number here got updated\nonce we also did this as well.\n\n421\n00:23:56.172 --> 00:24:00.527\nSo it actually didn't add any few more\ncompute cycles into what we're actually\n\n422\n00:24:00.527 --> 00:24:03.090\ndoing there as far as the updating goes.\n\n423\n00:24:03.090 --> 00:24:05.120\nSo being able to actually use updates.\n\n424\n00:24:05.120 --> 00:24:08.850\nThese are actually something that\nyou can end up having to do.\n\n425\n00:24:08.850 --> 00:24:14.330\nNow I do need to talk about one more\nthing here as far as the updates go.\n\n426\n00:24:14.330 --> 00:24:19.468\nCuz you're gonna hear a term, or\nyou're gonna see a term that they call\n\n427\n00:24:19.468 --> 00:24:26.250\na nondeterministic update, and\na deterministic update here.\n\n428\n00:24:26.250 --> 00:24:29.330\nCan you actually tell\nthe difference between them?\n\n429\n00:24:29.330 --> 00:24:30.650\nNot really, okay.\n\n430\n00:24:30.650 --> 00:24:33.971\nBut you need to know what actually ends\nup happening here when you hear that.\n\n431\n00:24:33.971 --> 00:24:38.540\nOkay?\nA nondeterministic update happens\n\n432\n00:24:38.540 --> 00:24:40.980\nwhen you go ahead and you select.\n\n433\n00:24:40.980 --> 00:24:43.010\nAnd you do everything that you want to.\n\n434\n00:24:43.010 --> 00:24:44.160\nAnd all of a sudden.\n\n435\n00:24:44.160 --> 00:24:46.670\nWhatever update you want,\nlike the plus 10%.\n\n436\n00:24:46.670 --> 00:24:49.180\nIt actually not only updates one column.\n\n437\n00:24:49.180 --> 00:24:49.880\nBut it says, look.\n\n438\n00:24:49.880 --> 00:24:52.850\nThere's a possible other\ncolumn I can update here, too.\n\n439\n00:24:52.850 --> 00:24:53.560\nOkay.\n\n440\n00:24:53.560 --> 00:24:56.410\nSo in other words, it can't\nactually determine from the source\n\n441\n00:24:56.410 --> 00:24:58.190\nwhat should be updated.\n\n442\n00:24:58.190 --> 00:25:00.830\nNow when that happens,\nwhen that just says, look I'm pulling and\n\n443\n00:25:00.830 --> 00:25:04.981\nI'm seeing that I could actually\npossibly update in multiple places,\n\n444\n00:25:04.981 --> 00:25:09.770\nand you know or use these values to\nhelp me update in multiple places.\n\n445\n00:25:09.770 --> 00:25:13.850\nWell the weird thing about sequel server\nis that it doesn't actually rank it.\n\n446\n00:25:13.850 --> 00:25:17.560\nIt arbitrarily picks which one\nit wants to use to update.\n\n447\n00:25:17.560 --> 00:25:18.410\n>> Well that's special.\n\n448\n00:25:18.410 --> 00:25:19.850\n>> It is special, isn't it?\n\n449\n00:25:19.850 --> 00:25:22.970\nSo that's why it's very important that\nwe don't do things like that, but\n\n450\n00:25:22.970 --> 00:25:24.460\nit can happen, so.\n\n451\n00:25:24.460 --> 00:25:30.140\nWhen you run your original select query to\nupdate, you need to make sure that what\n\n452\n00:25:30.140 --> 00:25:34.450\nis updating, or from what field you're\nupdating or for whatever you're adding in,\n\n453\n00:25:34.450 --> 00:25:38.050\nthat you're only doing it for\nthat one field or for that one table.\n\n454\n00:25:38.050 --> 00:25:41.350\nRemember that in our database\nthis is actually very much\n\n455\n00:25:41.350 --> 00:25:45.780\napt in our database here,\nbecause instead of actually\n\n456\n00:25:46.810 --> 00:25:50.850\nhaving like an employees table where it\nhas all the employee information, and\n\n457\n00:25:50.850 --> 00:25:53.560\nthen customers where it has\nall the customer information.\n\n458\n00:25:53.560 --> 00:25:56.560\nYou know whatever it has and\nwe tend to separate that out.\n\n459\n00:25:56.560 --> 00:26:01.860\nWell this particular database, everybody's\nactually listed under people as one table.\n\n460\n00:26:01.860 --> 00:26:06.240\nAnd then what separates them from\nsalespeople or from employees versus\n\n461\n00:26:06.240 --> 00:26:12.370\ncustomers is the idea of some\ncustomer order ID or a individual ID.\n\n462\n00:26:12.370 --> 00:26:15.380\nSo, in other words,\nyour pulling from that same source.\n\n463\n00:26:15.380 --> 00:26:16.800\nWell, now if you think about it,\n\n464\n00:26:16.800 --> 00:26:21.200\nif I use that table then as a source,\nwell which one am I telling it to update?\n\n465\n00:26:21.200 --> 00:26:25.950\nAm I telling it to update as a customer or\nam I telling it to update as an employee?\n\n466\n00:26:25.950 --> 00:26:28.950\nWell now it because\nnondeterministic at that point.\n\n467\n00:26:28.950 --> 00:26:32.420\nAnd so it's saying you've got to be\nvery careful when you start doing this.\n\n468\n00:26:32.420 --> 00:26:38.810\nSo they actually do have a recommendation\ninstead, that if you can't determine this,\n\n469\n00:26:38.810 --> 00:26:41.790\nthere is another command that's\nout there that's called merge, and\n\n470\n00:26:41.790 --> 00:26:46.380\nthat's the one that is recommended that\nyou use instead if you want to do that.\n\n471\n00:26:46.380 --> 00:26:49.820\nAnd if you do that, it's gonna actually\nask you to fill in exactly what you mean,\n\n472\n00:26:49.820 --> 00:26:53.430\nso it turns it into what they call\na deterministic update instead.\n\n473\n00:26:53.430 --> 00:26:56.100\nMost everything that we do where\nwe assign it in that where clause\n\n474\n00:26:56.100 --> 00:26:57.000\nwe're deterministic.\n\n475\n00:26:57.000 --> 00:26:59.983\nWe're actually saying here's\nwhat's actually gonna happen here,\n\n476\n00:26:59.983 --> 00:27:02.509\nhere's what were pulling from,\nbut if it can't determine\n\n477\n00:27:02.509 --> 00:27:05.930\nthat it will again just decide whichever\none of those columns it wants.\n\n478\n00:27:05.930 --> 00:27:10.050\nIt's gonna base it off of that and that\nmeans you could get unexpected results, so\n\n479\n00:27:10.050 --> 00:27:12.865\nbe very careful with those\ntypes of updates that they call\n\n480\n00:27:12.865 --> 00:27:13.989\nnondeterministic updates.\n\n481\n00:27:15.000 --> 00:27:15.530\n>> Well, Ronnie,\n\n482\n00:27:15.530 --> 00:27:21.370\nI guess that leaves us with only\none more type of query for today.\n\n483\n00:27:21.370 --> 00:27:22.330\nNow is the delete, right?\n\n484\n00:27:22.330 --> 00:27:23.690\nWe've added.\n\n485\n00:27:23.690 --> 00:27:24.760\nWe've updated.\n\n486\n00:27:24.760 --> 00:27:26.890\nNow you know what I don't like that data.\n\n487\n00:27:26.890 --> 00:27:27.920\nI want it gone.\n\n488\n00:27:27.920 --> 00:27:29.590\nGet it out of my database.\n\n489\n00:27:29.590 --> 00:27:33.250\nWe wanna delete these things and\nit should be pretty simple right, Ronnie?\n\n490\n00:27:33.250 --> 00:27:36.240\nI just said delete, right-click and\nget out of here, right?\n\n491\n00:27:36.240 --> 00:27:39.870\n>> It is relatively simple in\nterms of deleting information.\n\n492\n00:27:39.870 --> 00:27:42.840\nOnce again, the key here is this,\n\n493\n00:27:42.840 --> 00:27:47.170\nright, do not delete information that\nyou're unsure that should be deleted.\n\n494\n00:27:47.170 --> 00:27:50.500\nIn other words, say, I think that\nDaniel wanted me to delete it,\n\n495\n00:27:50.500 --> 00:27:53.470\nthat's not a good notion\nto delete something.\n\n496\n00:27:53.470 --> 00:27:56.050\nThe idea here is fairly simple, right?\n\n497\n00:27:56.050 --> 00:27:58.680\nIt's that if you delete something, you\nknow exactly what it is you've deleted.\n\n498\n00:27:58.680 --> 00:28:01.320\nYou wanna make sure you know\nhow many rows you've deleted.\n\n499\n00:28:01.320 --> 00:28:04.672\nYou wanna make sure that you\nhave a backup before you delete.\n\n500\n00:28:04.672 --> 00:28:05.937\nI know that sounds strange.\n\n501\n00:28:05.937 --> 00:28:07.090\n>> Have a backup of the backup.\n\n502\n00:28:07.090 --> 00:28:08.640\n>> Have a backup of the backup.\n\n503\n00:28:08.640 --> 00:28:09.680\nExactly, right.\n\n504\n00:28:09.680 --> 00:28:11.355\nBecause it's one of those\nthings where somebody says,\n\n505\n00:28:11.355 --> 00:28:13.480\nwell I was using that as an example.\n\n506\n00:28:13.480 --> 00:28:17.040\nAnd you're like, well, I did it [LAUGH].\n\n507\n00:28:17.040 --> 00:28:18.070\nAnd that's a wrong fill in.\n\n508\n00:28:18.070 --> 00:28:20.170\nBut let's show you how we can do this,\nokay?\n\n509\n00:28:20.170 --> 00:28:24.780\nSo very quickly, what I'm gonna do is\ncreate a table for testing here, okay?\n\n510\n00:28:24.780 --> 00:28:28.950\nSo I've got one called discounted\nproducts that I'm just gonna create.\n\n511\n00:28:28.950 --> 00:28:32.190\nSo it's simple, there's no data,\nthat's actually gonna be it, and\n\n512\n00:28:32.190 --> 00:28:35.650\nI'm gonna go ahead and,\nI've already actually created that one so\n\n513\n00:28:35.650 --> 00:28:38.180\nthat will actually end up working for\nus as well.\n\n514\n00:28:38.180 --> 00:28:41.090\nYeah, I forgot I went ahead and created\nseveral of them because we were gonna\n\n515\n00:28:41.090 --> 00:28:42.720\ndo this particular lesson here, okay.\n\n516\n00:28:42.720 --> 00:28:46.120\nSo I've got data that I've added in there,\nand\n\n517\n00:28:46.120 --> 00:28:49.730\nlets take a look at the information\nthat's actually already in there.\n\n518\n00:28:49.730 --> 00:28:56.399\nAnd so we can see that from right here I'm\njust selecting on product order ID 712,\n\n519\n00:28:56.399 --> 00:29:01.350\nit's what I'm doing and\nthere's about 3,382 rows of data, okay.\n\n520\n00:29:01.350 --> 00:29:05.680\nSo that's actually a good thing\nfrom this particular database and\n\n521\n00:29:05.680 --> 00:29:08.100\nthere's actually more\nproduct IDs than 712.\n\n522\n00:29:08.100 --> 00:29:13.710\nBut if I just wanted to delete\nout all of the actual items\n\n523\n00:29:13.710 --> 00:29:18.270\nthat have the product ID of 712, notice\nit's not very difficult at all, okay.\n\n524\n00:29:18.270 --> 00:29:22.700\nSo DELETE FROM and\nyou just select the name of the table,\n\n525\n00:29:22.700 --> 00:29:25.510\nnotice the WHERE statement,\nvery important.\n\n526\n00:29:25.510 --> 00:29:27.550\nAnd exact number here, okay?\n\n527\n00:29:27.550 --> 00:29:32.276\nSo once you do that,\nnow I can go ahead and execute it, and\n\n528\n00:29:32.276 --> 00:29:39.583\nit executes successfully and you can see,\nas I've told you there are 3,382 rows.\n\n529\n00:29:39.583 --> 00:29:46.680\nWell, 3,382 rows were now just deleted.\n\n530\n00:29:46.680 --> 00:29:49.390\nNow, that particular one,\n\n531\n00:29:49.390 --> 00:29:53.130\nthat's still a lot of rows at least for\nthis particular database.\n\n532\n00:29:53.130 --> 00:29:57.740\nBut most of the time when you are working\nwith very large numbers out instead,\n\n533\n00:29:57.740 --> 00:30:00.750\nyou may find out something here.\n\n534\n00:30:00.750 --> 00:30:03.590\nAnd let me change this to a 1,\n\n535\n00:30:03.590 --> 00:30:06.340\ncuz I actually created another\none to help us out as well.\n\n536\n00:30:06.340 --> 00:30:08.960\nLet's say that you find out\nthat there's actually more or\n\n537\n00:30:08.960 --> 00:30:10.910\nthe same number here, okay.\n\n538\n00:30:10.910 --> 00:30:15.360\nIn very large databases, this delete\nprocess, it takes a lot of compute cycles.\n\n539\n00:30:15.360 --> 00:30:19.180\nIt absolutely hits the transaction\nlogs multiple times.\n\n540\n00:30:19.180 --> 00:30:21.760\nIt's pretty strenuous,\nokay, on your database.\n\n541\n00:30:21.760 --> 00:30:25.930\nSo if you find out that you're actually\nhaving to delete a ton, a lot of rows of\n\n542\n00:30:25.930 --> 00:30:31.355\ndata, the recommendation is to break\nup your delete into smaller chunks.\n\n543\n00:30:31.355 --> 00:30:35.040\nIn that way you can actually\nrun multiple cycles of it, but\n\n544\n00:30:35.040 --> 00:30:38.640\ninto kind of equal size\nchunks if you want to.\n\n545\n00:30:38.640 --> 00:30:41.430\nSo here's an example of how you'd do this,\nand\n\n546\n00:30:41.430 --> 00:30:43.590\nmake sure that it continues\nto go through an iteration.\n\n547\n00:30:44.710 --> 00:30:49.770\nNow, the WHILE statement here means that,\nwhile this is true, okay,\n\n548\n00:30:49.770 --> 00:30:55.540\nas long as this statement is true,\nthen run through this statement, okay?\n\n549\n00:30:55.540 --> 00:30:58.830\nSo for whatever you're looking for,\nthis is what you want to do.\n\n550\n00:30:58.830 --> 00:30:59.890\nSo 1 = 1.\n\n551\n00:30:59.890 --> 00:31:01.770\nThat should be for eternity, okay?\n\n552\n00:31:02.780 --> 00:31:03.940\nIn theory, that's what it should be.\n\n553\n00:31:03.940 --> 00:31:04.770\n>> Because 1 always equals 1.\n\n554\n00:31:04.770 --> 00:31:06.920\n>> Yeah, because 1 should always equal 1.\n\n555\n00:31:06.920 --> 00:31:09.340\nSomebody's gonna write and\ngo, 1 doesn't always equal 1.\n\n556\n00:31:09.340 --> 00:31:12.980\nWell, in my world and\nin SQL's world, 1 equals 1 forever.\n\n557\n00:31:12.980 --> 00:31:16.715\nSo I'm going to tell it I\nwant it to delete, let's say,\n\n558\n00:31:16.715 --> 00:31:19.103\nthe first 1,000 rows, okay.\n\n559\n00:31:19.103 --> 00:31:22.570\nFrom this where everything\nactually equals 712.\n\n560\n00:31:22.570 --> 00:31:25.694\nI know that there is 3,382 rows, okay.\n\n561\n00:31:25.694 --> 00:31:30.382\nThen, I'm gonna tell it to go ahead and\ndo a row count, so\n\n562\n00:31:30.382 --> 00:31:35.270\nwhen the row count,\nas long as it's actually 1,000 or\n\n563\n00:31:35.270 --> 00:31:38.630\nless, or yeah, less than 1,000.\n\n564\n00:31:38.630 --> 00:31:40.820\nI'm trying to make sure I say that right.\n\n565\n00:31:40.820 --> 00:31:45.840\nThen, go ahead and make sure it\nadds it up, break, start it again.\n\n566\n00:31:47.169 --> 00:31:50.211\nContinue to go all the way through\nuntil there's really nothing there.\n\n567\n00:31:50.211 --> 00:31:54.453\nSo at this point,\nwhat I can also do in this delete\n\n568\n00:31:54.453 --> 00:31:58.182\nstatement is now I'm gonna execute this.\n\n569\n00:31:59.740 --> 00:32:03.240\nAnd because I have 3,382 rows here,\n\n570\n00:32:03.240 --> 00:32:07.242\nlook at how it actually\nchose to run it instead.\n\n571\n00:32:07.242 --> 00:32:10.508\nSo you don't have to imagine in\nthe thousands, cuz don't get me wrong.\n\n572\n00:32:10.508 --> 00:32:13.571\nThat's small, but\nit's big for my example here.\n\n573\n00:32:13.571 --> 00:32:18.015\nBut if this was 10,000, 100,000 rows\nbreaking it up into rows of a thousand or\n\n574\n00:32:18.015 --> 00:32:18.860\n10,000.\n\n575\n00:32:18.860 --> 00:32:20.610\nAnd then notice how it actually said,\nokay,\n\n576\n00:32:20.610 --> 00:32:22.925\nonce it hit 1,000 let me start\nall over and do it again.\n\n577\n00:32:22.925 --> 00:32:24.108\nLet me start all over and do it again.\n\n578\n00:32:24.108 --> 00:32:26.187\nNotice the last one, 382, fine.\n\n579\n00:32:26.187 --> 00:32:29.479\nI'll still run it and I'll still be able\nto delete all those that you actually\n\n580\n00:32:29.479 --> 00:32:31.770\nmentioned in the filter, but\nthis way we break it up.\n\n581\n00:32:31.770 --> 00:32:33.570\nSo with larger blocks of data,\n\n582\n00:32:33.570 --> 00:32:37.850\nthat is actually the recommendation\nin terms of deleting.\n\n583\n00:32:37.850 --> 00:32:42.850\nNow if you don't care about setting\na filter like in the where statement at\n\n584\n00:32:42.850 --> 00:32:46.882\nall and you just need to delete\nout every row in every table,\n\n585\n00:32:46.882 --> 00:32:51.903\nthe recommendation instead is to\ntruncate the actual selection itself.\n\n586\n00:32:51.903 --> 00:32:53.867\nSo, a truncate is all or\n\n587\n00:32:53.867 --> 00:32:59.583\nnothing is the way that I actually\nput it here in the actual comments.\n\n588\n00:32:59.583 --> 00:33:03.895\nSo if I were to run this and\nI want to delete the entire table,\n\n589\n00:33:03.895 --> 00:33:06.758\nI just type in TRUNCATE TABLE and I did.\n\n590\n00:33:06.758 --> 00:33:07.843\nI created four different tables.\n\n591\n00:33:07.843 --> 00:33:10.246\nWe don't necessarily have to run that.\n\n592\n00:33:10.246 --> 00:33:11.835\nSo, we can actually do that and\n\n593\n00:33:11.835 --> 00:33:15.148\nthat will actually delete out\nevery single row at the same time.\n\n594\n00:33:15.148 --> 00:33:18.739\nOn a very large database, you may not be\nable to do that, but the theory here is\n\n595\n00:33:18.739 --> 00:33:22.413\ntruncate actually works a little bit\ndifferent than the way that delete does.\n\n596\n00:33:22.413 --> 00:33:25.918\nIf you have to do the whole\ntable exactly that way,\n\n597\n00:33:25.918 --> 00:33:31.100\nthen they do recommend truncate\nover delete is what they also do.\n\n598\n00:33:31.100 --> 00:33:33.959\nNow not trying to hammer\nthe point home again,\n\n599\n00:33:33.959 --> 00:33:37.126\nsometimes we do have to\nactually use joins as well.\n\n600\n00:33:37.126 --> 00:33:43.743\nBut if we do, the nice thing is all you do\nis you change the word select to delete.\n\n601\n00:33:43.743 --> 00:33:47.463\nOop, [LAUGH] delete, delet is what I had.\n\n602\n00:33:47.463 --> 00:33:48.832\n>> [LAUGH] That is not proper syntax, Ron.\n\n603\n00:33:48.832 --> 00:33:51.100\n>> Yeah,\nthat is not gonna be proper syntax.\n\n604\n00:33:51.100 --> 00:33:54.554\nAnd then once you do that and\nyou setup whatever your filter is, and\n\n605\n00:33:54.554 --> 00:33:55.919\nit will do the same thing.\n\n606\n00:33:55.919 --> 00:34:00.666\nSo notice that there's a lot of command\nand a lot of control that you do have\n\n607\n00:34:00.666 --> 00:34:05.491\nability to do by using whether we're\ntalking about the idea of inserting,\n\n608\n00:34:05.491 --> 00:34:07.346\nupdating or deleting here.\n\n609\n00:34:07.346 --> 00:34:12.063\nBut each of these requires a bit of\ncareful planning and requires you to try\n\n610\n00:34:12.063 --> 00:34:16.948\nexpertly use that where statement to\ncontrol what you're actually doing.\n\n611\n00:34:16.948 --> 00:34:19.760\nIf not,\nit tends to run on the entire table and\n\n612\n00:34:19.760 --> 00:34:22.284\ngives you unexpected results instead.\n\n613\n00:34:22.284 --> 00:34:24.212\n>> Well, Ronnie, excellent demonstration.\n\n614\n00:34:24.212 --> 00:34:26.087\nExcellent explanation, as well.\n\n615\n00:34:26.087 --> 00:34:29.340\nWe do appreciate you stopping by,\ngiving us this information.\n\n616\n00:34:29.340 --> 00:34:32.588\nSo that we might be better prepared for\nour SQL exams and\n\n617\n00:34:32.588 --> 00:34:35.212\nto be better SQL administrators, as well.\n\n618\n00:34:35.212 --> 00:34:37.427\nSo, we do thank you yet again for that.\n\n619\n00:34:37.427 --> 00:34:39.300\nAnd we also thank you guys for\nstopping by, but\n\n620\n00:34:39.300 --> 00:34:41.714\nit looks like we've come to\nthe end of this little shindig.\n\n621\n00:34:41.714 --> 00:34:42.900\nHopefully, you've enjoyed it.\n\n622\n00:34:42.900 --> 00:34:45.861\nSigning off for ITProTV,\nI've been your host Daniel Lowrie.\n\n623\n00:34:45.861 --> 00:34:46.685\n>> I'm Ronnie Wong.\n\n624\n00:34:46.685 --> 00:34:48.508\n>> We'll see you next time.\n\n625\n00:34:48.508 --> 00:34:55.929\n[MUSIC]\n\n",
          "vimeoId": "166550403"
        },
        {
          "description": "In this episode, Daniel and Ronnie demonstrate how to combine datasets. They go over the difference between UNION and UNION ALL and the rules that govern their use. They also look at modifying data with MERGE statements.",
          "length": "1957",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-3-combine_datasets-051016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-3-combine_datasets-051016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-3-combine_datasets-051016-1-sm.jpg",
          "title": "Combine Datasets",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.577 --> 00:00:17.419\nAll right, greetings everyone and welcome\nto another great episode of IT Pro TV.\n\n3\n00:00:17.419 --> 00:00:21.330\nI'm your host Daniel Lawrie and in today's\nepisode we're continuing on with our\n\n4\n00:00:21.330 --> 00:00:24.060\nquerying Microsoft SQL Server 2014 series.\n\n5\n00:00:24.060 --> 00:00:28.210\nAnd joining us back in the studio again\ntoday to help lend his expertise,\n\n6\n00:00:28.210 --> 00:00:32.340\nthe SQL master himself,\nour good mentor Mr. Ronnie Wong.\n\n7\n00:00:32.340 --> 00:00:34.490\n>> Ronnie welcome back sir,\nand how are you today?\n\n8\n00:00:34.490 --> 00:00:36.821\n>> I'm doing great, thank you for\nhaving me back on the show.\n\n9\n00:00:36.821 --> 00:00:40.932\nAs we continue on taking a look at more of\nthe information that we need to understand\n\n10\n00:00:40.932 --> 00:00:43.750\nwhen we are querying our\nMicrosoft SQL Server.\n\n11\n00:00:43.750 --> 00:00:47.490\nNow today, we're talking about\ncombining data sets together.\n\n12\n00:00:47.490 --> 00:00:50.810\nNow, you might actually,\nhopefully inferred from the name, or\n\n13\n00:00:50.810 --> 00:00:53.080\nactually been able to\nactually tell from the name.\n\n14\n00:00:53.080 --> 00:00:56.340\nThat what we're really talking about,\nof course, is that we may have data that's\n\n15\n00:00:56.340 --> 00:01:00.220\nalready in existence, but\nwe do need to combine them together.\n\n16\n00:01:00.220 --> 00:01:03.020\nAnd a lot of times this does end up\nhappening, especially when you're\n\n17\n00:01:03.020 --> 00:01:07.550\nworking with multiple databases or\neven more sources of data, right?\n\n18\n00:01:07.550 --> 00:01:08.900\nThat ends up happening and\n\n19\n00:01:08.900 --> 00:01:12.630\nyou need to actually merge that data\ntogether and bring them all together.\n\n20\n00:01:12.630 --> 00:01:16.380\nSo, what you may end up finding out, let's\nsay that you update to SQL Server 2014,\n\n21\n00:01:16.380 --> 00:01:20.530\nbut you found out that there's actually\nanother database table that has just\n\n22\n00:01:20.530 --> 00:01:22.170\nfloated around in the past.\n\n23\n00:01:22.170 --> 00:01:26.840\nAnd, for one reason or another, just\nhasn't been connected to that SQL Server\n\n24\n00:01:26.840 --> 00:01:30.130\nand you realize it's actually\nalmost identical data.\n\n25\n00:01:30.130 --> 00:01:35.050\nBut because there are tons of\nrows let's say, ten, 20,000 rows.\n\n26\n00:01:35.050 --> 00:01:37.950\nWell, you don't want to\nduplicate the data, but\n\n27\n00:01:37.950 --> 00:01:41.710\nat the same time you don't\nwant to miss any data either.\n\n28\n00:01:41.710 --> 00:01:46.189\nSo, you have the option to be\nable to combine data together.\n\n29\n00:01:46.189 --> 00:01:50.659\nAnd there's really three different ways we\ncan do that depending on what your need\n\n30\n00:01:50.659 --> 00:01:52.770\nis actually going to be.\n\n31\n00:01:52.770 --> 00:01:56.780\nThis is some of the methods that can help\nyou to take the existing data to ensure\n\n32\n00:01:56.780 --> 00:01:58.207\nthat you have everything.\n\n33\n00:01:58.207 --> 00:02:02.500\nOr to actually take all the data and\nactually just combine them together.\n\n34\n00:02:02.500 --> 00:02:04.840\nAnd you'll deal with the duplicates\nhowever you want to, and\n\n35\n00:02:04.840 --> 00:02:06.320\nthat's actually another way.\n\n36\n00:02:06.320 --> 00:02:09.750\nAnd then of course,\nthere is a newer method that's actually\n\n37\n00:02:09.750 --> 00:02:13.810\nout there that you can use\nthat's a bit more conditional.\n\n38\n00:02:13.810 --> 00:02:17.990\nSo, it all depends on what you\nreally need to be able to do.\n\n39\n00:02:17.990 --> 00:02:21.100\nNow, we actually run into this,\nof course, not only in databases.\n\n40\n00:02:21.100 --> 00:02:25.850\nBut a lot of times, when we actually think\nabout, let's just think about the idea\n\n41\n00:02:25.850 --> 00:02:30.322\nhere of duplication of work and sometimes\neven duplication of items that you have.\n\n42\n00:02:30.322 --> 00:02:33.760\nIT ProTV studios is about to move into a\nnew building and there's nothing in there.\n\n43\n00:02:33.760 --> 00:02:38.300\nBut let's say for example that if we were\nmoving into an existing structure in\n\n44\n00:02:38.300 --> 00:02:42.275\na set of studios, what we don't want\nto do is duplicate the work again.\n\n45\n00:02:42.275 --> 00:02:45.000\nSo there are some things that are actually\nin existence, that are structured,\n\n46\n00:02:45.000 --> 00:02:47.510\nthat are already there,\nwe don't want to do that again.\n\n47\n00:02:47.510 --> 00:02:50.510\nSo we might have to take the time\nto do what, to go through and\n\n48\n00:02:50.510 --> 00:02:53.880\nsay look we've got this,\nlet's go ahead and get rid of this.\n\n49\n00:02:53.880 --> 00:02:55.980\nWe've got that, let's go ahead and do it.\n\n50\n00:02:55.980 --> 00:02:58.600\nOr we can say let's just\nmove everything in and\n\n51\n00:02:58.600 --> 00:03:03.290\nthen later on we'll kind of weed it\nout as we actually come together.\n\n52\n00:03:03.290 --> 00:03:05.980\nAnd don't get me wrong,\nthat always is a possibility and\n\n53\n00:03:05.980 --> 00:03:07.900\nalways sounds like it works.\n\n54\n00:03:07.900 --> 00:03:10.601\nIt never does,\nit's like moving into a house.\n\n55\n00:03:10.601 --> 00:03:14.699\nYou just tend to continue to buy stuff and\nit just stacks on top of each other.\n\n56\n00:03:14.699 --> 00:03:18.750\nAnd after a while, yeah, I should go\nthrough that and you kinda leave it alone.\n\n57\n00:03:18.750 --> 00:03:22.850\nSo, inside of your databases though, when\nyou start doing stuff like that, where you\n\n58\n00:03:22.850 --> 00:03:26.610\ngo, I'll just merge it in and deal with\nthe fact that duplicates may come along.\n\n59\n00:03:26.610 --> 00:03:28.980\nYour database will begin to get bloated.\n\n60\n00:03:28.980 --> 00:03:33.999\nAnd also your execution of your queries\nwill become, well, a lot more inefficient.\n\n61\n00:03:33.999 --> 00:03:38.179\nBecause now you have to deal with the idea\nof this duplicate row of information, or\n\n62\n00:03:38.179 --> 00:03:39.340\nwhatever it might be.\n\n63\n00:03:39.340 --> 00:03:42.100\nAnd you're wondering why it\nactually ended up happening.\n\n64\n00:03:42.100 --> 00:03:45.220\n>> So it's better for us to deal with\nthese things in the beginning before they\n\n65\n00:03:45.220 --> 00:03:46.920\nbecome a real problem?\n\n66\n00:03:46.920 --> 00:03:49.430\n>> At least, that's what we hope, right?\n\n67\n00:03:49.430 --> 00:03:53.024\nAnd sometimes you might actually end up\ntaking a look at, let's just say a table\n\n68\n00:03:53.024 --> 00:03:57.100\nof information, and you're wondering\ndid somebody already duplicate it?\n\n69\n00:03:57.100 --> 00:04:00.329\nAnd so at that point you of course could\nactually run back through there and\n\n70\n00:04:00.329 --> 00:04:02.960\nuse some of the efficiency\nthings that we've learned about.\n\n71\n00:04:02.960 --> 00:04:06.370\nSuch as using the distinct clause\nalong with the select clause\n\n72\n00:04:06.370 --> 00:04:09.710\nto ensure that we only have\ndistinct row of data as well.\n\n73\n00:04:09.710 --> 00:04:13.160\nSo the good thing is most of\nthe stuff is fairly simple.\n\n74\n00:04:13.160 --> 00:04:16.060\nThere are of course rules to doing this,\nthough.\n\n75\n00:04:16.060 --> 00:04:16.564\nOkay, and\n\n76\n00:04:16.564 --> 00:04:20.760\nwhat we're actually talking about is\nthe union clauses that we can implement.\n\n77\n00:04:20.760 --> 00:04:26.840\nThere is a union, and then there is\na union all clause that we can deal with.\n\n78\n00:04:26.840 --> 00:04:30.510\nNow when it comes down to it there\nare a few basic rules to actually using\n\n79\n00:04:30.510 --> 00:04:32.090\nboth of these, okay?\n\n80\n00:04:32.090 --> 00:04:35.752\nRule number one, when you actually are\ndealing with this, every single query that\n\n81\n00:04:35.752 --> 00:04:39.539\nyou're actually gonna run against those\ntables that you're gonna union together.\n\n82\n00:04:39.539 --> 00:04:43.590\nThe key here is that they must\nhave the same number of columns.\n\n83\n00:04:43.590 --> 00:04:46.800\nAnd I'm trying to make sure I remind\nmyself so I don't tell you wrong.\n\n84\n00:04:46.800 --> 00:04:48.760\nSo in other words if you\nare going to do this,\n\n85\n00:04:48.760 --> 00:04:52.235\nyou go ahead and do a select\nstatement on both of those tables,\n\n86\n00:04:52.235 --> 00:04:56.020\nverify that they have the same\nnumber of columns, okay.\n\n87\n00:04:56.020 --> 00:04:57.930\nAnd that's pretty much key.\n\n88\n00:04:57.930 --> 00:05:02.210\nIdeally, it would be identical, it would\nactually help, and actually always helps,\n\n89\n00:05:02.210 --> 00:05:06.150\nif they're also of course, the same\ndata types in those columns as well.\n\n90\n00:05:06.150 --> 00:05:08.650\nSo if you don't have that,\nyou will end up with of course,\n\n91\n00:05:08.650 --> 00:05:11.460\nerrors that will tell you that\nthere's a data type mismatch.\n\n92\n00:05:11.460 --> 00:05:14.200\nSo you wanna make sure that those\ntwo are also gonna be there or\n\n93\n00:05:14.200 --> 00:05:18.940\nat least compatible data types\nbetween those columns as well.\n\n94\n00:05:18.940 --> 00:05:21.340\nNow, the other thing that\nends up happening is,\n\n95\n00:05:21.340 --> 00:05:25.910\nlet's say that you realize something\nthat is just an update of things, right.\n\n96\n00:05:25.910 --> 00:05:31.550\nSo let's say that in your new customers\ntable, just for an example here.\n\n97\n00:05:31.550 --> 00:05:36.750\nOr an employees table, that what you\nused to do is you used to call things\n\n98\n00:05:36.750 --> 00:05:41.960\nlike the employee ID, EMPID,\nokay for a very abbreviated name.\n\n99\n00:05:41.960 --> 00:05:46.290\nAnd we all used to do that,\nright, in the early days of SQL.\n\n100\n00:05:46.290 --> 00:05:49.820\nEverything was about keeping everything\nas small as possible, eight characters or\n\n101\n00:05:49.820 --> 00:05:52.760\nless as far as the table names go.\n\n102\n00:05:52.760 --> 00:05:55.330\nWell now, today of course,\nthat's kind of expanded out,\n\n103\n00:05:55.330 --> 00:05:56.880\nto you can make then as\nlong as you want to.\n\n104\n00:05:56.880 --> 00:05:58.890\nThey still recommend brevity, but\n\n105\n00:05:58.890 --> 00:06:02.840\nremember that you may actually name\nthings a little bit differently now.\n\n106\n00:06:02.840 --> 00:06:06.455\nWell, when you start to actually\ndo a union between those,\n\n107\n00:06:06.455 --> 00:06:10.963\nokay, what will end up happening is that,\nwhen you start to query,\n\n108\n00:06:10.963 --> 00:06:15.594\nyou need to actually query by the name\nyou want that union result to be.\n\n109\n00:06:15.594 --> 00:06:20.404\nSo, if you have one that says EMPID and\nthe actual new one says, employee ID,\n\n110\n00:06:20.404 --> 00:06:23.660\nand you run your query and\nyour union between them and\n\n111\n00:06:23.660 --> 00:06:27.142\nyou're trying to actually\nget specific information.\n\n112\n00:06:27.142 --> 00:06:31.501\nMake sure you realize that whatever the\nfirst table that's gonna be queried there\n\n113\n00:06:31.501 --> 00:06:33.030\nto do that.\n\n114\n00:06:33.030 --> 00:06:37.490\nThat's the kind of name that is gonna\nfollow in each one of those columns.\n\n115\n00:06:37.490 --> 00:06:39.017\nSo it doesn't mean you can't change it,\nright.\n\n116\n00:06:39.017 --> 00:06:42.929\nBecause a union doesn't actually exist\nuntil you end up then taking that union\n\n117\n00:06:42.929 --> 00:06:44.900\nand creating a table out of it.\n\n118\n00:06:44.900 --> 00:06:49.510\nBut overall though, just kinda\nremember that there are a few things.\n\n119\n00:06:49.510 --> 00:06:52.110\nThe number of columns is\nby far the most important,\n\n120\n00:06:52.110 --> 00:06:54.380\ncompatible data types is the big one.\n\n121\n00:06:54.380 --> 00:06:57.684\nYou can go on there and fix the other\nones later on if you just to, but\n\n122\n00:06:57.684 --> 00:07:01.020\njust kinda realize that those\ntwo are kind of the key.\n\n123\n00:07:01.020 --> 00:07:03.170\nNow, there is a problem\nthat I have though,\n\n124\n00:07:03.170 --> 00:07:05.770\nespecially with the database that\nwe're gonna be working with.\n\n125\n00:07:05.770 --> 00:07:07.655\nIt's very difficult to actually find,\n\n126\n00:07:07.655 --> 00:07:12.320\nwell two tables that have the same\nnumber of columns in it that we need and\n\n127\n00:07:12.320 --> 00:07:14.623\nof course compatible data types\nbetween each one of them.\n\n128\n00:07:14.623 --> 00:07:18.114\nCuz it's a super large database,\nsuper large to me.\n\n129\n00:07:18.114 --> 00:07:20.733\nYou might actually go, that's tiny, but\n\n130\n00:07:20.733 --> 00:07:24.390\nit really is a fairly complex\ndatabase at the same time.\n\n131\n00:07:24.390 --> 00:07:27.790\nSo we're gonna do something a little\nbit different to help to actually see\n\n132\n00:07:27.790 --> 00:07:29.370\na couple of differences here.\n\n133\n00:07:29.370 --> 00:07:33.000\nWe'll run union and\nthe union all statement as well.\n\n134\n00:07:33.000 --> 00:07:35.890\nSo I guess that actually brings me\nto something else that I need to\n\n135\n00:07:35.890 --> 00:07:36.770\npoint out here.\n\n136\n00:07:36.770 --> 00:07:40.071\nIf it's a union and union all,\nwell what is the difference,\n\n137\n00:07:40.071 --> 00:07:41.770\nthey both are unions, right?\n\n138\n00:07:41.770 --> 00:07:44.650\nSo why do we have one versus the other?\n\n139\n00:07:44.650 --> 00:07:48.824\nWell if we run a union statement, that's\none of the first things it's going to do\n\n140\n00:07:48.824 --> 00:07:51.348\nis actually going to merge\neverything together.\n\n141\n00:07:51.348 --> 00:07:57.504\nBut it's gonna run a distinct select\nstatement on every single row, right.\n\n142\n00:07:57.504 --> 00:08:00.902\nSo it's actually gonna run that and\nthat means if it sees duplicates,\n\n143\n00:08:00.902 --> 00:08:03.217\nit's gonna weed those duplicates out,\nokay.\n\n144\n00:08:03.217 --> 00:08:05.759\nSo that's what a UNION does for us.\n\n145\n00:08:05.759 --> 00:08:09.647\nIf you do a UNION ALL, you're telling it,\ndrop the distinct, just pull of\n\n146\n00:08:09.647 --> 00:08:14.300\nall of those elements together, and\nI'll deal with them later on as I need to.\n\n147\n00:08:14.300 --> 00:08:17.550\nSo that's really kinda the difference\nthat we're actually gonna see.\n\n148\n00:08:17.550 --> 00:08:19.470\nSo, how am I am actually\ngonna show you this?\n\n149\n00:08:19.470 --> 00:08:23.730\nWell, let me go ahead and take a look at\nour computer screen here, and that will\n\n150\n00:08:23.730 --> 00:08:26.890\nhelp us out to see what I'm actually\ngoing to do at the very beginning.\n\n151\n00:08:28.226 --> 00:08:31.560\nSo, for me to,\nthis is not a great example, but\n\n152\n00:08:31.560 --> 00:08:34.450\nit's an example that will work\nsince these actually do match.\n\n153\n00:08:34.450 --> 00:08:39.360\nI'm actually going to do, essentially,\na union of the same table multiple times.\n\n154\n00:08:39.360 --> 00:08:40.030\nOkay?\n\n155\n00:08:40.030 --> 00:08:45.210\nNow, I know that if I take a look at this\none, I'm gonna use the Adventure Works\n\n156\n00:08:45.210 --> 00:08:48.220\n2012 database here, and I'm actually\ngonna make sure that I'm on it.\n\n157\n00:08:48.220 --> 00:08:51.180\nAnd so, that's executed successfully.\n\n158\n00:08:51.180 --> 00:08:55.796\nAnd I go in and take a look at\njust running the Select statement.\n\n159\n00:08:58.327 --> 00:09:00.150\nAnd let me zoom out a little bit.\n\n160\n00:09:00.150 --> 00:09:03.640\nI should get 290 rows, okay?\n\n161\n00:09:03.640 --> 00:09:07.940\nSo if I actually get these 290 rows of\ndata, that's what I'm actually seeing, and\n\n162\n00:09:07.940 --> 00:09:09.730\nthat's everything that's in there.\n\n163\n00:09:09.730 --> 00:09:12.900\nThat's perfectly fine, and\nthat's what I want to see.\n\n164\n00:09:12.900 --> 00:09:15.300\nSo now, when I tell it to do a union,\n\n165\n00:09:15.300 --> 00:09:18.180\na couple of things are going to happen,\nokay?\n\n166\n00:09:18.180 --> 00:09:22.290\nWhen I take a look at the idea of the\nunion, well, notice I'm actually not doing\n\n167\n00:09:22.290 --> 00:09:26.420\nit just twice, but\nI'm doing it three times as well.\n\n168\n00:09:26.420 --> 00:09:32.010\nAnd in theory, if I do this union, it\nshould actually do 290 plus 290 plus 290,\n\n169\n00:09:32.010 --> 00:09:36.680\nand that's 870, if I've added right.\n\n170\n00:09:36.680 --> 00:09:37.950\nSo, I think I have.\n\n171\n00:09:37.950 --> 00:09:39.670\nI think I've actually\nadded that right here.\n\n172\n00:09:39.670 --> 00:09:44.030\nSo, if that actually added up right,\nthat's what should end up happening.\n\n173\n00:09:44.030 --> 00:09:44.860\nOkay?\n\n174\n00:09:44.860 --> 00:09:46.960\nBut there is a difference here.\n\n175\n00:09:46.960 --> 00:09:47.510\nOkay.\nAnd\n\n176\n00:09:47.510 --> 00:09:50.210\nthe difference is when I selected union,\n\n177\n00:09:50.210 --> 00:09:53.320\nI'm essentially saying make it distinct,\nokay?\n\n178\n00:09:53.320 --> 00:09:56.410\nSo in other words, make sure that when\nyou do this union between these three\n\n179\n00:09:56.410 --> 00:10:02.330\nidentical tables, I just need\ndistinct reports to come out instead.\n\n180\n00:10:02.330 --> 00:10:04.230\nSo distinct rows of data.\n\n181\n00:10:04.230 --> 00:10:08.460\nWell, in theory, then, this particular\nunion should only produce for\n\n182\n00:10:08.460 --> 00:10:12.550\nme 270 rows because the other two\ntables that I'm actually calling upon,\n\n183\n00:10:12.550 --> 00:10:16.200\nthe exact same table, is identical, okay?\n\n184\n00:10:16.200 --> 00:10:20.510\nSo if I'm actually saying that that's what\nI need to do to verify between the two\n\n185\n00:10:20.510 --> 00:10:25.888\ntables that I'm actually going\nto report together as a single\n\n186\n00:10:25.888 --> 00:10:31.100\nresult set, well,\nthen I should be able to only see that.\n\n187\n00:10:32.210 --> 00:10:37.310\nNow, I'm going to go ahead and execute\nthis now, and then when I pull this up,\n\n188\n00:10:37.310 --> 00:10:40.710\nand if I take a look in the lower\nright-hand corner of the screen,\n\n189\n00:10:40.710 --> 00:10:42.010\nlet me see if I can zoom in on that.\n\n190\n00:10:42.010 --> 00:10:46.400\nYou actually see it\nonly reported 290 rows.\n\n191\n00:10:46.400 --> 00:10:51.010\nSo that's why we actually want to\nsee this, because it has to do that.\n\n192\n00:10:51.010 --> 00:10:53.130\nIt has to actually be able to\nrun a distinct here and say,\n\n193\n00:10:53.130 --> 00:10:57.160\nhey, when I matched up all three, well,\nonly one of these three is actually\n\n194\n00:10:57.160 --> 00:11:01.870\nunique here, and let me go ahead and\nreport that one instead.\n\n195\n00:11:01.870 --> 00:11:03.580\nNow, along with this,\n\n196\n00:11:03.580 --> 00:11:09.140\nwe've gotta see how the union also\nends up working here with this idea.\n\n197\n00:11:09.140 --> 00:11:13.570\nAnd the way that we can do that is by\ntaking a look at it's execution plan.\n\n198\n00:11:13.570 --> 00:11:17.150\nIf I go ahead and zoom in just a little\nbit up here at the top where I have all my\n\n199\n00:11:17.150 --> 00:11:22.370\ntoolbars, what I'm looking for\nis this little icon right here that says\n\n200\n00:11:22.370 --> 00:11:27.610\nDisplay Estimated Execution Plan, okay?\n\n201\n00:11:27.610 --> 00:11:29.780\nSo in other words, this is actually\ngonna give me an estimate.\n\n202\n00:11:29.780 --> 00:11:34.490\nIt's gonna show me a diagram of how\nit actually came up with this answer.\n\n203\n00:11:34.490 --> 00:11:37.360\nAnd when I run that, I'm gonna take\na look at this execution plan.\n\n204\n00:11:37.360 --> 00:11:41.510\nAnd let me zoom back out just a little bit\nand collapse the Object Explorer a little\n\n205\n00:11:41.510 --> 00:11:45.940\nbit more so that we can take a look\nat what we're seeing here, okay?\n\n206\n00:11:45.940 --> 00:11:51.250\nNow, when we start to take a look at what\nwe're seeing, this is what you're seeing.\n\n207\n00:11:51.250 --> 00:11:52.640\nAnd the weird thing is this,\n\n208\n00:11:52.640 --> 00:11:56.570\nit's kinda small, I don't know how much\nI can zoom in here to help us out.\n\n209\n00:11:56.570 --> 00:11:58.460\nBut as I take a look at this plan,\n\n210\n00:11:58.460 --> 00:12:01.660\nit's weird because the execution plan\nworks from the right hand side of\n\n211\n00:12:01.660 --> 00:12:06.530\nour screen going to the left hand side\nto give me the result that I want, okay?\n\n212\n00:12:06.530 --> 00:12:09.990\nSo here, you see where it actually\nstarted off with this index scan\n\n213\n00:12:09.990 --> 00:12:11.940\non all three of those tables,\nwhich is fine.\n\n214\n00:12:11.940 --> 00:12:16.250\nAnd you'll actually see right here in the\nmiddle there's a little tiny arrow, okay?\n\n215\n00:12:16.250 --> 00:12:19.830\nAnd it's pointing to the left, it's\nsaying here's where we're beginning, and\n\n216\n00:12:19.830 --> 00:12:24.340\nnow it's gonna go ahead and it's saying,\nlook I'm actually now doing a single\n\n217\n00:12:24.340 --> 00:12:29.910\nresult scan here for\nthe scalar scan that it's talking about.\n\n218\n00:12:29.910 --> 00:12:33.490\nAnd it continues to do that\nup until a certain point.\n\n219\n00:12:33.490 --> 00:12:36.660\nAnd now, you start to see something\ndifferent right here, okay?\n\n220\n00:12:37.660 --> 00:12:41.710\nNotice that what it did is it took\nthose first two that I did a union, and\n\n221\n00:12:41.710 --> 00:12:43.820\ndid what they called a Merge Join.\n\n222\n00:12:43.820 --> 00:12:46.800\nAnd notice you see where\nit says Union right here.\n\n223\n00:12:46.800 --> 00:12:50.980\nSo it's actually at this point where it\nactually just took two of those tables and\n\n224\n00:12:50.980 --> 00:12:52.740\nmade a union first, okay?\n\n225\n00:12:53.890 --> 00:12:57.770\nThen after that, it did the same\nthing with the third table.\n\n226\n00:12:57.770 --> 00:12:59.990\nSo it took the third table down here, and\n\n227\n00:12:59.990 --> 00:13:02.870\nthen it finally actually\ndid a union with the union.\n\n228\n00:13:02.870 --> 00:13:03.552\nOkay?\n\n229\n00:13:03.552 --> 00:13:07.150\nSo, yeah, it's kinda weird, but\nthat's how it ends up working.\n\n230\n00:13:07.150 --> 00:13:08.640\nIt does a union with the union, and\n\n231\n00:13:08.640 --> 00:13:12.220\nin the end here I get the result\nthat I'm actually expecting to see.\n\n232\n00:13:12.220 --> 00:13:15.770\nAnd then the good thing is if you're\nnot sure if the union's working,\n\n233\n00:13:15.770 --> 00:13:19.710\nif you hover over that last object here,\n\n234\n00:13:19.710 --> 00:13:25.200\nit won't let me scroll down at\nthe same time let me try and do that.\n\n235\n00:13:25.200 --> 00:13:28.050\nNotice that at the bottom of\nthis little yellow tab, right,\n\n236\n00:13:28.050 --> 00:13:31.988\nthat gives us some details,\nit shows the select statement.\n\n237\n00:13:31.988 --> 00:13:36.580\nSo, if you're not sure, why it didn't\nwork out, you can at least see right here\n\n238\n00:13:36.580 --> 00:13:40.160\nwhether or not it actually executed\nwhat you expected it to execute.\n\n239\n00:13:40.160 --> 00:13:43.420\nAnd so, here you're actually starting\nto see how it joins it together and\n\n240\n00:13:43.420 --> 00:13:44.798\npulls it all in.\n\n241\n00:13:44.798 --> 00:13:45.960\nAnd remember that in the end here,\n\n242\n00:13:45.960 --> 00:13:49.760\nit's actually running a distinct\nover the entire result set\n\n243\n00:13:49.760 --> 00:13:52.718\nto ensure that we only have one distinct\nrow instead of actually all three.\n\n244\n00:13:52.718 --> 00:13:56.590\n>> Yeah, Ronnie, when we're looking at\nthis flow of the way that the server\n\n245\n00:13:56.590 --> 00:14:02.270\nactually merged these tables together,\nit looks like it took two tables and\n\n246\n00:14:02.270 --> 00:14:03.720\nmerged them together and\ntook the last table and\n\n247\n00:14:03.720 --> 00:14:07.960\nmerged those two merge tables into them\nand you have your one final product.\n\n248\n00:14:07.960 --> 00:14:12.140\nIs that because the server can\nonly merge two tables at a time?\n\n249\n00:14:12.140 --> 00:14:14.450\nOr is it because it's looking,\n\n250\n00:14:14.450 --> 00:14:16.850\nas it goes through the sequence\nkinda like processing in order?\n\n251\n00:14:16.850 --> 00:14:19.630\nSo I've got one table merge that.\n\n252\n00:14:19.630 --> 00:14:21.910\nAnd now I've got a new table, and it gets\nto the next thing and it says merge and\n\n253\n00:14:21.910 --> 00:14:22.640\nthat's what it's doing.\n\n254\n00:14:22.640 --> 00:14:24.720\n>> Well,\nthere's a couple of reasons behind that.\n\n255\n00:14:24.720 --> 00:14:26.410\nSo what ends up happening, of course,\n\n256\n00:14:26.410 --> 00:14:29.990\nis that in the background\nwe have that SQL optimizer,\n\n257\n00:14:29.990 --> 00:14:34.570\nthe engine that says here's how things\nshould work as optimally as possible.\n\n258\n00:14:34.570 --> 00:14:36.060\nAnd what it does is it takes those, and\n\n259\n00:14:36.060 --> 00:14:38.470\nthat's where we see the percentage\ncost and stuff here.\n\n260\n00:14:38.470 --> 00:14:39.540\nAnd it actually says,\n\n261\n00:14:39.540 --> 00:14:43.300\nlook, here's the first thing that's\ngonna cost the least for us to do.\n\n262\n00:14:43.300 --> 00:14:48.430\nIn other words, it also, probably because\nit's an estimated execution plan,\n\n263\n00:14:48.430 --> 00:14:51.000\nalso made one with three\nmerges in it at the same time.\n\n264\n00:14:51.000 --> 00:14:51.690\nAnd it says,\n\n265\n00:14:51.690 --> 00:14:56.390\nlook, between those, here is the one\nthat's actually most efficient instead.\n\n266\n00:14:56.390 --> 00:15:01.050\nSo it is very possible that you could find\none where the third one actually is gonna\n\n267\n00:15:01.050 --> 00:15:02.400\nbe all three together.\n\n268\n00:15:02.400 --> 00:15:03.240\nBut normally,\n\n269\n00:15:03.240 --> 00:15:06.792\nthey actually do know what they're doing\nin the background better than I do.\n\n270\n00:15:06.792 --> 00:15:09.840\nYeah, I've-\n>> So it all just comes down to\n\n271\n00:15:09.840 --> 00:15:13.530\nthe efficiency of the actual plan\nitself that we're looking at to\n\n272\n00:15:13.530 --> 00:15:16.740\ndetermine that a different plan was more\nefficient, that's what we'd be seeing.\n\n273\n00:15:16.740 --> 00:15:19.690\n>> At least that's what I'm gonna I'm\ngonna tell you at this point, yes.\n\n274\n00:15:19.690 --> 00:15:21.942\n>> That's the official\nstatement [CROSSTALK]\n\n275\n00:15:21.942 --> 00:15:22.556\n>> At this point,\n\n276\n00:15:22.556 --> 00:15:25.536\nright, there are things that you can\ndo to make things more efficient, but\n\n277\n00:15:25.536 --> 00:15:28.350\nit means you have to know\nthe rules of those SQL servers.\n\n278\n00:15:28.350 --> 00:15:31.470\nAnd you also have to\nunderstand in the end, right,\n\n279\n00:15:31.470 --> 00:15:36.240\nthe overall underlying way that\nSQL tends to do these statements.\n\n280\n00:15:36.240 --> 00:15:39.160\nNow we're gonna cover a little bit of that\n\n281\n00:15:39.160 --> 00:15:44.470\nwhen we actually get into the optimizing\nshows, or the episodes that we get into.\n\n282\n00:15:44.470 --> 00:15:46.540\nSo make sure you check that episode out.\n\n283\n00:15:46.540 --> 00:15:48.576\nBut you actually see that\nthere's a lot more to that.\n\n284\n00:15:48.576 --> 00:15:52.307\nAnd that's why there's an entire\nMCSA to SQL server is that,\n\n285\n00:15:52.307 --> 00:15:55.392\nwhat we're showing you here,\nreally, is about,\n\n286\n00:15:55.392 --> 00:16:00.198\nall right, how do I get information out\nWell in there you actually learn how to be\n\n287\n00:16:00.198 --> 00:16:04.760\nable to take the indexes and\nactually make them much more efficient.\n\n288\n00:16:04.760 --> 00:16:08.410\nAnd actually write better, and\nmore effective query statements.\n\n289\n00:16:08.410 --> 00:16:11.549\nAnd actually let you do more optimization\non the SQL server to make it much more\n\n290\n00:16:11.549 --> 00:16:12.092\nefficient.\n\n291\n00:16:12.092 --> 00:16:15.926\nWe'll do a little bit but we're not gonna\ndo anything where we're breaking it down\n\n292\n00:16:15.926 --> 00:16:18.884\nlike what you'll probably end\nup seeing in those other series,\n\n293\n00:16:18.884 --> 00:16:20.740\nas we continue to go on there.\n\n294\n00:16:20.740 --> 00:16:24.450\nBut at this point, yes,\nit's all about for us, at least,\n\n295\n00:16:24.450 --> 00:16:29.010\nin the querying part, we tend to trust\nwhat the SQL analyzer, or not analyzer,\n\n296\n00:16:29.010 --> 00:16:33.760\nthe query engine in the back,\nthe optimizer, will end up doing for us.\n\n297\n00:16:33.760 --> 00:16:36.640\nAnd that's because well,\nat this point, right?\n\n298\n00:16:36.640 --> 00:16:38.970\nThere are a lot of things you\ncould do to optimize it, but\n\n299\n00:16:38.970 --> 00:16:42.260\noverall though,\nthis is at least the way that SQL sees it.\n\n300\n00:16:42.260 --> 00:16:44.370\nAnd even if you think you're\nwriting an optimal statement,\n\n301\n00:16:45.590 --> 00:16:48.060\nthe optimizer itself can say,\nwell, Ronnie,\n\n302\n00:16:48.060 --> 00:16:52.312\nwhen I take a look at all the other\npossible execution plans, yours is third.\n\n303\n00:16:52.312 --> 00:16:52.824\n[LAUGH]\n>> [LAUGH]\n\n304\n00:16:52.824 --> 00:16:54.620\n>> Mine is better.\n\n305\n00:16:54.620 --> 00:16:56.880\nIt's gonna choose to run itself.\n\n306\n00:16:56.880 --> 00:16:58.790\nThere's probably ways\nyou can override that.\n\n307\n00:16:58.790 --> 00:17:01.960\nI just don't know how to\noverride that at this point.\n\n308\n00:17:01.960 --> 00:17:03.440\nSo there you see.\n\n309\n00:17:03.440 --> 00:17:05.370\nSo make sure you understand at least this.\n\n310\n00:17:05.370 --> 00:17:08.807\nThe union gives us distinct rows\nis what we're actually seeing.\n\n311\n00:17:08.807 --> 00:17:13.627\nNow the other part of this though\nis what we're also going to look at\n\n312\n00:17:13.627 --> 00:17:15.470\nis the union all.\n\n313\n00:17:15.470 --> 00:17:20.790\nNow, when I,\nlet me take off this execution plan,\n\n314\n00:17:20.790 --> 00:17:22.960\nwhen we take a look at the union all,\n\n315\n00:17:22.960 --> 00:17:26.650\nand then we'll come back in and\nadd in a few filters to help us out here.\n\n316\n00:17:26.650 --> 00:17:30.420\nThe union all, it really isn't all that\ndifferent instead of actually just\n\n317\n00:17:30.420 --> 00:17:35.570\ntying in the word union in between each\nof my select statements here, okay?\n\n318\n00:17:35.570 --> 00:17:40.090\nWhat I end up seeing, is that I\nactually end up adding the keyword all,\n\n319\n00:17:40.090 --> 00:17:43.370\nalong with it, so\nyou'll see that three times instead.\n\n320\n00:17:43.370 --> 00:17:46.480\nNow, on this one since it don't\ndeal with duplicates at all\n\n321\n00:17:46.480 --> 00:17:48.670\nI should end up getting those 870 rows.\n\n322\n00:17:48.670 --> 00:17:52.290\nAnd I'm going to leave off that filter for\nright now.\n\n323\n00:17:53.680 --> 00:17:59.920\nSo, now if I take a look at the lower\nresults of this in the right hand corner\n\n324\n00:17:59.920 --> 00:18:07.490\nI should see now that I do get 870 laws\nshowing up as well, right there instead.\n\n325\n00:18:07.490 --> 00:18:11.390\nSo it does not matter on this one if\nended with three or four duplicates or\n\n326\n00:18:11.390 --> 00:18:14.530\nhowever many i did as\nfar as the union goes.\n\n327\n00:18:14.530 --> 00:18:17.530\nIt just says, look is that what you\nwanted, you wanted everything, well,\n\n328\n00:18:17.530 --> 00:18:20.000\nthis will ensure you get\nevery single record.\n\n329\n00:18:20.000 --> 00:18:21.620\nBut it does require you,\n\n330\n00:18:21.620 --> 00:18:26.060\nthough, to actually know how many records\nyou're actually expecting to end up with.\n\n331\n00:18:26.060 --> 00:18:29.380\nIf you don't know that then it doesn't\nreally matter if you do a union or\n\n332\n00:18:29.380 --> 00:18:32.620\nnot because you're not sure if it\nactually did it correctly or not.\n\n333\n00:18:32.620 --> 00:18:36.960\nBut I knew that 290 rows if I did a union\nwith two other tables that were exactly\n\n334\n00:18:36.960 --> 00:18:39.490\nidentical, I should be\nable to count those up.\n\n335\n00:18:39.490 --> 00:18:42.310\nWhat you don't want is it actually\ngiving you a number that you're going,\n\n336\n00:18:42.310 --> 00:18:44.050\nI wasn't expecting that.\n\n337\n00:18:44.050 --> 00:18:45.630\nThat's what we don't want.\n\n338\n00:18:45.630 --> 00:18:47.510\nI know it's kinda strange but normally,\n\n339\n00:18:47.510 --> 00:18:52.240\nwhen we query databases, we know the\nanswer we're looking for and we're just\n\n340\n00:18:52.240 --> 00:18:55.780\nreally saying please confirm that this is\nthe right answer that I'm looking for.\n\n341\n00:18:55.780 --> 00:19:00.150\nIf it's not, it's either normally I wrote\nthe query wrong or I didn't know exactly\n\n342\n00:19:00.150 --> 00:19:03.765\nwhat I was looking for and\nI got an unexpected result instead.\n\n343\n00:19:03.765 --> 00:19:06.375\nSo that's normally we also see.\n\n344\n00:19:06.375 --> 00:19:10.135\nNow when we start to actually\ndo something like this,\n\n345\n00:19:10.135 --> 00:19:11.845\nright, there's a couple of things.\n\n346\n00:19:11.845 --> 00:19:14.965\nAnd this is why I held this one to last,\nwhen we start doing the UNION and\n\n347\n00:19:14.965 --> 00:19:16.035\nthe UNION ALL, okay?\n\n348\n00:19:17.285 --> 00:19:21.605\nIf you want to actually be able\nto do things like sorting,\n\n349\n00:19:21.605 --> 00:19:26.070\nokay, which is what\nthe ORDER BY is right here.\n\n350\n00:19:26.070 --> 00:19:31.270\nNotice that I didn't have to do\nit on each individual table.\n\n351\n00:19:31.270 --> 00:19:37.580\nSo, at the end of my union statements\nhere, then at the bottom of all that,\n\n352\n00:19:37.580 --> 00:19:40.300\nI didn't put parenthesis around that,\nI didn't do any of that.\n\n353\n00:19:40.300 --> 00:19:45.665\nAt the end of all this, I then added in\nthis order by, and I just chose job title,\n\n354\n00:19:45.665 --> 00:19:49.310\ncuz I knew that was on the columns\nthat was in there, okay?\n\n355\n00:19:49.310 --> 00:19:55.070\nWell, we can actually do the order\nby on the entire union, itself.\n\n356\n00:19:55.070 --> 00:19:59.270\nIs that because basically by\nthe end of that whole statement,\n\n357\n00:19:59.270 --> 00:20:02.300\nby the time it get's to\norder by it is one table?\n\n358\n00:20:02.300 --> 00:20:05.590\n>> Yeah, as we saw on the execution plan,\nright and\n\n359\n00:20:05.590 --> 00:20:08.880\nthis is where it goes back to\nunderstanding the processing order of\n\n360\n00:20:08.880 --> 00:20:13.550\nthe query itself,\nwhen we actually start to add in stuff.\n\n361\n00:20:13.550 --> 00:20:14.890\nRemember that the select statement,\n\n362\n00:20:14.890 --> 00:20:17.800\neven though we type it in first,\nit's not the first thing that's processed,\n\n363\n00:20:17.800 --> 00:20:20.540\nit's the sixth out of\nthe seven things that we have.\n\n364\n00:20:20.540 --> 00:20:24.260\nWell, when we start doing this, the first\nthing that's processed is really this FROM\n\n365\n00:20:24.260 --> 00:20:26.630\nclause, and so\nit goes ahead and does that.\n\n366\n00:20:26.630 --> 00:20:28.880\nAnd then it actually goes through, and\n\n367\n00:20:28.880 --> 00:20:32.710\nthis is actually in the order\nsomewhere in that statement.\n\n368\n00:20:32.710 --> 00:20:35.660\nAnd so what ends up happening\nhere is it says look\n\n369\n00:20:35.660 --> 00:20:38.490\nI've already gone through this union,\nwell what's next to process?\n\n370\n00:20:38.490 --> 00:20:43.260\nWell that's when it actually does this as\nwell and it takes that into account too.\n\n371\n00:20:43.260 --> 00:20:47.800\nSo Union probably actually appears\nbefore in that processing order\n\n372\n00:20:47.800 --> 00:20:49.420\nwhere things actually end up going.\n\n373\n00:20:49.420 --> 00:20:55.780\nAnd so that's what we can do here,\nnow, this is different, okay?\n\n374\n00:20:55.780 --> 00:20:59.690\nBecause we have to understand that,\nthat if we an ORDER BY, and\n\n375\n00:20:59.690 --> 00:21:03.780\nwe actually place it right here, it should\nactually give us the result that I'm\n\n376\n00:21:03.780 --> 00:21:07.390\nlooking for, which is actually\nall of the job titles here.\n\n377\n00:21:07.390 --> 00:21:12.830\nSo let me execute, oops, gotta select the\nwhole thing, not just part of a statement.\n\n378\n00:21:12.830 --> 00:21:14.558\nI do the whole thing here and execute it.\n\n379\n00:21:14.558 --> 00:21:21.981\nAnd now, When I do that I didn't tell it\n\n380\n00:21:21.981 --> 00:21:25.607\nto filter by the job title, but I told it\nto order the job title and it's actually\n\n381\n00:21:25.607 --> 00:21:30.060\nin this column right here that t's\nactually going to show up alphabetically.\n\n382\n00:21:30.060 --> 00:21:33.550\nSo this is more of a sorting than anything\nelse, and that's what it's doing.\n\n383\n00:21:33.550 --> 00:21:36.230\nIt's sorting this particular title here.\n\n384\n00:21:36.230 --> 00:21:38.220\nNow if you want to\nactually to go ahead and\n\n385\n00:21:38.220 --> 00:21:42.380\nalso end up doing things like\ngrouping and, or course, having.\n\n386\n00:21:42.380 --> 00:21:44.010\nWhich is when you group by or\n\n387\n00:21:44.010 --> 00:21:48.110\nwhen you actually do\nthe filtering by groups as well.\n\n388\n00:21:48.110 --> 00:21:52.470\nWell that has to be done on each and\nevery individual table itself, or\n\n389\n00:21:52.470 --> 00:21:55.300\neach result set which is the table.\n\n390\n00:21:55.300 --> 00:22:00.130\nSo, instead you would end up putting\nin having clauses in between\n\n391\n00:22:00.130 --> 00:22:02.570\neach of these statements instead.\n\n392\n00:22:02.570 --> 00:22:07.040\nSo we have to kind of think about\nthis things are going to go.\n\n393\n00:22:07.040 --> 00:22:10.475\nIs not uncommon especially when\nyou face exam questions right,\n\n394\n00:22:10.475 --> 00:22:14.210\nthat they gave you three,\nfour different examples and\n\n395\n00:22:14.210 --> 00:22:18.830\nthey say which of the examples is\ngonna produce this result for you.\n\n396\n00:22:18.830 --> 00:22:22.530\nWell, you gonna know that as\nfar as the order by clause,\n\n397\n00:22:22.530 --> 00:22:25.490\nthat's actually going to do\nthe union first and then this.\n\n398\n00:22:25.490 --> 00:22:27.070\nBut if you're using group buy or\n\n399\n00:22:27.070 --> 00:22:32.000\nyou're using the term having, okay, which\nis again, filtering with groups instead,\n\n400\n00:22:32.000 --> 00:22:35.460\nthat has to be done on each one\nof those result sets instead.\n\n401\n00:22:35.460 --> 00:22:39.290\nSo that's really going to be a big\ndifference when we start focusing in\n\n402\n00:22:39.290 --> 00:22:43.000\non this idea, cuz if not It's\nreally gonna throw you off,\n\n403\n00:22:43.000 --> 00:22:46.480\nespecially when you don't see\nthe result that you're expecting.\n\n404\n00:22:46.480 --> 00:22:50.240\nSo both union and union all though, okay?\n\n405\n00:22:50.240 --> 00:22:53.640\nThese are actually very important\nwhen we do need to make sure\n\n406\n00:22:53.640 --> 00:22:55.230\nthat we're getting all the data in there.\n\n407\n00:22:55.230 --> 00:22:57.595\nWe need to make sure that we're\ngetting distinct data and\n\n408\n00:22:57.595 --> 00:23:00.300\ncombining them into one result set,\nthen do the union.\n\n409\n00:23:00.300 --> 00:23:04.620\nWhen you actually say, just combine\neverything together, do a union all, okay?\n\n410\n00:23:04.620 --> 00:23:06.780\nAnd then make sure you\nunderstand those rules again,\n\n411\n00:23:08.190 --> 00:23:11.180\nsame number of columns is the one\nthat will always get you.\n\n412\n00:23:11.180 --> 00:23:13.480\nIf you wanna merge these together or\n\n413\n00:23:13.480 --> 00:23:16.750\nunion them together and\nthey're not working, verify.\n\n414\n00:23:16.750 --> 00:23:18.740\nDo a select statement on\nboth of those tables,\n\n415\n00:23:18.740 --> 00:23:21.080\nmake sure they have the same\nnumber of columns, okay?\n\n416\n00:23:21.080 --> 00:23:23.910\nMake sure the data types\nare actually compatible, and\n\n417\n00:23:23.910 --> 00:23:26.390\nthen you're just about ready to go, okay.\n\n418\n00:23:26.390 --> 00:23:30.462\nSo as far as union and union all goes,\nthat's pretty much it right there.\n\n419\n00:23:30.462 --> 00:23:34.066\n>> That's really cool, right, cuz now\nwe're able to take two different tables or\n\n420\n00:23:34.066 --> 00:23:37.458\nthree different tables or how many tables\nwe like, and put them together and\n\n421\n00:23:37.458 --> 00:23:40.479\nmap one big table But Ronnie,\nyou've mentioned that there was a few\n\n422\n00:23:40.479 --> 00:23:42.917\nother things that we could\ndo with modifying tables and\n\n423\n00:23:42.917 --> 00:23:46.150\nbasically putting them together in\nways that we can manipulate things.\n\n424\n00:23:46.150 --> 00:23:47.019\nRight?\n>> Yes.\n\n425\n00:23:47.019 --> 00:23:47.973\n>> [LAUGH]\n>> So,\n\n426\n00:23:47.973 --> 00:23:52.332\nthere is of course those two that if you\nnotice that is Fairly limiting right,\n\n427\n00:23:52.332 --> 00:23:56.305\nit gives you that ability and\nthat's great we can absolutely do that.\n\n428\n00:23:56.305 --> 00:24:00.760\nBut what if you don't need just that\nability just to pull them together.\n\n429\n00:24:00.760 --> 00:24:04.170\nWhat if you actually need\nthe ability all at one time.\n\n430\n00:24:04.170 --> 00:24:06.960\nAnd not only do I need to pull\nthis information together, but\n\n431\n00:24:06.960 --> 00:24:09.920\ndepending on the result that\nit finds from this merge or\n\n432\n00:24:09.920 --> 00:24:14.290\nfrom this union,\nto either insert in new information,\n\n433\n00:24:14.290 --> 00:24:19.900\nto update an existing piece of\ninformation, or to delete it out.\n\n434\n00:24:19.900 --> 00:24:24.070\nWell, essentially, that's like the union,\nwith conditional clauses in them.\n\n435\n00:24:24.070 --> 00:24:26.390\nTo actually help you to do this, okay?\n\n436\n00:24:26.390 --> 00:24:30.140\nSo, there is an example that we can\nactually point out that will help us to do\n\n437\n00:24:30.140 --> 00:24:31.300\nthis as well.\n\n438\n00:24:31.300 --> 00:24:35.300\nAnd this one is a little bit more\ncomplicated to be able to do.\n\n439\n00:24:35.300 --> 00:24:38.420\nNow, because I couldn't\nfind exactly what I wanted,\n\n440\n00:24:38.420 --> 00:24:41.120\nI just created two simple tables here,\nokay?\n\n441\n00:24:41.120 --> 00:24:45.300\nSo, what we're going to do is we're going\nto create this very simple table called\n\n442\n00:24:45.300 --> 00:24:45.990\nproducts here.\n\n443\n00:24:45.990 --> 00:24:51.750\nAnd so let's say this is going to\nbecome my target table right away.\n\n444\n00:24:51.750 --> 00:24:55.260\nSo, I'm going to go ahead execute\nthis creation of the table,\n\n445\n00:24:55.260 --> 00:24:58.990\nand it tells me it's successful, and\nI'm going to start in four rows.\n\n446\n00:24:58.990 --> 00:25:03.110\nTea, coffee, muffin, burger,\nwhatever it might be, and\n\n447\n00:25:03.110 --> 00:25:05.180\ninsert in some values along with it.\n\n448\n00:25:05.180 --> 00:25:06.677\n>> Were you hungry in the creation\nof this demonstration?\n\n449\n00:25:06.677 --> 00:25:10.293\n>> I really was, when you're creating\nit at night I tend to get a little bit\n\n450\n00:25:10.293 --> 00:25:14.800\nhungry, and last night I was craving\na burger for one reason or another, okay?\n\n451\n00:25:14.800 --> 00:25:18.480\nAnd we assigned some default\nvalues to it as well, okay?\n\n452\n00:25:18.480 --> 00:25:22.650\nNow, I want this table and\nanother table that is fairly similar.\n\n453\n00:25:22.650 --> 00:25:27.140\nLet's say that Later on, right, in our\nbusiness we said look we got product but\n\n454\n00:25:27.140 --> 00:25:30.630\nwe added in some new products as well or\nsome different products and\n\n455\n00:25:30.630 --> 00:25:34.180\nwe need that to be merged into\nthe product table itself too, okay?\n\n456\n00:25:34.180 --> 00:25:37.230\nSo, I create another table that we're\ngoing to call updated products to\n\n457\n00:25:37.230 --> 00:25:37.820\nhelp us out.\n\n458\n00:25:39.910 --> 00:25:42.152\nAnd then,\nlet's say that we do the same thing,\n\n459\n00:25:42.152 --> 00:25:44.238\nis that we insert in\nsome different things.\n\n460\n00:25:44.238 --> 00:25:48.627\nAnd this time, I have new values for\nlike coffee and muffin, but\n\n461\n00:25:48.627 --> 00:25:51.160\nthen I change this one over to pizza.\n\n462\n00:25:51.160 --> 00:25:54.860\nSo, again you can see where my mind\nwas going, that's perfectly fine.\n\n463\n00:25:57.060 --> 00:25:57.940\nSo, there we go.\n\n464\n00:25:57.940 --> 00:25:59.930\nOkay, so I've now inserted in all of that.\n\n465\n00:25:59.930 --> 00:26:03.070\nAnd so now,\nI wanna take a look at both of those.\n\n466\n00:26:04.370 --> 00:26:06.440\nAnd I can compare them side by side,\n\n467\n00:26:06.440 --> 00:26:08.960\nby just running two\nseparate select statements.\n\n468\n00:26:08.960 --> 00:26:11.580\nAnd you can see now, barely you can see.\n\n469\n00:26:11.580 --> 00:26:14.110\nIt's tiny on my screen,\nI'll guess it's tiny on yours.\n\n470\n00:26:14.110 --> 00:26:16.600\nYou can see where I now\ncreated those two tables.\n\n471\n00:26:16.600 --> 00:26:20.419\nAnd now I wanna merge that stuff together,\nbut I don't wanna just do the union or\n\n472\n00:26:20.419 --> 00:26:23.990\nthe union on and combined them\nall together and get duplicates.\n\n473\n00:26:23.990 --> 00:26:26.000\nThe distinct is perfectly fine but\n\n474\n00:26:26.000 --> 00:26:31.750\nI don't wanna override the data if I\ndon't have to in everything, right?\n\n475\n00:26:31.750 --> 00:26:36.850\nSo for example, here on the coffee\nnotice I go from the 20 to the 25 and\n\n476\n00:26:36.850 --> 00:26:38.650\nthen for the muffin 30 to 35.\n\n477\n00:26:38.650 --> 00:26:42.130\nAnd then pizza, you name it, okay.\n\n478\n00:26:42.130 --> 00:26:46.660\nWhatever it might be, we're just changing\nthose numbers, is what we're doing.\n\n479\n00:26:46.660 --> 00:26:51.850\nSo, we are actually gonna use something\nthat we call merge, to help us out, okay?\n\n480\n00:26:51.850 --> 00:26:55.330\nNow, when we start taking a look\nat this idea of merge though,\n\n481\n00:26:55.330 --> 00:26:59.360\nokay, what we might end up seeing here\nis actually a fairly simple statement.\n\n482\n00:26:59.360 --> 00:27:02.480\nWe're gonna merge the product table,\nand we're gonna call it Target.\n\n483\n00:27:02.480 --> 00:27:05.280\nIn other words,\nwe're just gonna use this term Target.\n\n484\n00:27:05.280 --> 00:27:07.930\nTarget's gonna be a key\nword inside of merge.\n\n485\n00:27:07.930 --> 00:27:11.830\nSo, that's the table that I'm actually\ngonna merge with, the updated product, and\n\n486\n00:27:11.830 --> 00:27:13.940\nthat's gonna actually be the source.\n\n487\n00:27:13.940 --> 00:27:19.820\nAnd we, of course, declared like\nan inner join here on these columns,\n\n488\n00:27:19.820 --> 00:27:22.310\nProductID and ProductID.\n\n489\n00:27:22.310 --> 00:27:24.860\nThat those are actually\nequal when we do this.\n\n490\n00:27:24.860 --> 00:27:28.220\nSo, I went and separated out the statement\nand actually added in some comments, so\n\n491\n00:27:28.220 --> 00:27:31.440\nthat you can look at it on your\nown a little bit later, okay?\n\n492\n00:27:31.440 --> 00:27:34.660\nSo, when we actually start and run this,\nI have to run this whole thing as one,\n\n493\n00:27:34.660 --> 00:27:35.740\nso we're just gonna walk through it and\n\n494\n00:27:35.740 --> 00:27:37.920\nthen we're gonna run it,\nis what we're gonna do here, okay?\n\n495\n00:27:37.920 --> 00:27:41.980\nIf you try and run it proportionally a\nlittle bit at a time, it's not gonna work.\n\n496\n00:27:41.980 --> 00:27:47.908\nSo, we're starting off with this idea of\na merge but notice now my condition, okay?\n\n497\n00:27:47.908 --> 00:27:50.930\nWhen matched, okay,\n\n498\n00:27:50.930 --> 00:27:55.570\nthat Target product name is not\nequal to source name, okay?\n\n499\n00:27:56.780 --> 00:27:59.550\nOr Target rate not equal to source rate.\n\n500\n00:28:00.640 --> 00:28:03.690\nThen, update, okay,\nis what I'm telling it to do.\n\n501\n00:28:03.690 --> 00:28:06.470\nIn other words, if this don't match,\nI want it to update.\n\n502\n00:28:06.470 --> 00:28:09.840\nBut in other words, if they exist\nthough and I look at them and\n\n503\n00:28:09.840 --> 00:28:13.370\nthey don't match,\nI want it to go ahead and update, okay?\n\n504\n00:28:13.370 --> 00:28:14.210\nI want to make sure then,\n\n505\n00:28:14.210 --> 00:28:16.860\nthat the Target product name\nequals the source product name.\n\n506\n00:28:16.860 --> 00:28:17.530\nMake sense?\n\n507\n00:28:17.530 --> 00:28:21.240\nAnd the target rate should equal that.\n\n508\n00:28:21.240 --> 00:28:22.910\nBut that is not all.\n\n509\n00:28:22.910 --> 00:28:24.070\nThat would work.\n\n510\n00:28:24.070 --> 00:28:28.880\nBut now, when they're not matched though,\nokay, so if they aren't actually matched\n\n511\n00:28:28.880 --> 00:28:31.980\nthe way that I want them to be,\nthen I can go ahead,\n\n512\n00:28:31.980 --> 00:28:36.490\nif there are no records that are matched\nat all, in that for the product ID.\n\n513\n00:28:36.490 --> 00:28:38.950\nThen go ahead and\ninsert in something else.\n\n514\n00:28:38.950 --> 00:28:43.040\nNow, I don't have anything like that but\nit's actually suppose to insert in another\n\n515\n00:28:43.040 --> 00:28:45.070\nrow if it doesn't actually\nend up matching up.\n\n516\n00:28:45.070 --> 00:28:45.620\nI may have one.\n\n517\n00:28:45.620 --> 00:28:49.130\nI don't know why I'm thinking\nI don't have one, okay?\n\n518\n00:28:49.130 --> 00:28:50.320\nSo, that's what it's doing.\n\n519\n00:28:50.320 --> 00:28:55.140\nNotice I'm telling it insert in this\nthree value or this three columns or\n\n520\n00:28:55.140 --> 00:28:58.910\ninside of these three columns, insert\nin these values from the source table.\n\n521\n00:28:58.910 --> 00:29:01.890\nNotice everything is actually\nfrom the source table itself.\n\n522\n00:29:01.890 --> 00:29:04.240\nWhen there's a row that\nexists in target table, but\n\n523\n00:29:04.240 --> 00:29:10.600\nthe same record doesn't exist in the\nsource table, excuse me, then delete it.\n\n524\n00:29:10.600 --> 00:29:15.080\nIn other words, if I'm saying,\nhey it actually is here in the Target.\n\n525\n00:29:15.080 --> 00:29:17.615\nBut it's not there in the source,\nI want to delete it.\n\n526\n00:29:17.615 --> 00:29:19.950\nCuz I actually said this\nwas an updated table.\n\n527\n00:29:19.950 --> 00:29:23.250\nCould be I got rid of a product, okay?\n\n528\n00:29:23.250 --> 00:29:28.071\nLastly, I'm telling it,\nthat I want in an action clause, okay?\n\n529\n00:29:28.071 --> 00:29:33.000\nSo, a column that I'm actually creating\nhere, that it should return to me a new\n\n530\n00:29:33.000 --> 00:29:37.290\nfield with a ten character limit here,\nokay, in and output.\n\n531\n00:29:37.290 --> 00:29:40.160\nAnd it should return to me\nwhether I inserted, updated or\n\n532\n00:29:40.160 --> 00:29:44.690\ndeleted something, okay,\nbased on what it found in every row.\n\n533\n00:29:44.690 --> 00:29:49.450\nSo it's underneath here,\nyou can see where I'm saying as an output,\n\n534\n00:29:49.450 --> 00:29:51.430\nReport deleted, okay?\n\n535\n00:29:51.430 --> 00:29:52.850\nAs these things end up happening.\n\n536\n00:29:52.850 --> 00:29:56.970\nNow, so, there's a lot of different\nvalues that are going on, and\n\n537\n00:29:56.970 --> 00:29:59.740\nin the end I'm also gonna tell\nit to have a row count for us.\n\n538\n00:30:01.030 --> 00:30:07.580\nSo, let's see if I can actually select\nthe whole thing here and run it.\n\n539\n00:30:07.580 --> 00:30:11.510\nAnd if we take a look at the results,\nwhat we should see is this table, and\n\n540\n00:30:11.510 --> 00:30:17.240\nthere's four rows each one having update,\ndelete, insert.\n\n541\n00:30:17.240 --> 00:30:20.950\nAs we take a look at this,\nthe results don't seem to make a lot of\n\n542\n00:30:20.950 --> 00:30:24.960\nactual sense to us so what we need to do\nthough, is we need to actually go and\n\n543\n00:30:24.960 --> 00:30:29.780\nverify right away if our original\nproducts table got updated.\n\n544\n00:30:29.780 --> 00:30:35.810\nRemember we actually created that updated\ntable and that project product table.\n\n545\n00:30:35.810 --> 00:30:41.640\nSo, if I go and scroll this down,\nlet me zoom back out and I select this and\n\n546\n00:30:41.640 --> 00:30:46.130\nI execute, what I should end up\nseeing is that updated table.\n\n547\n00:30:46.130 --> 00:30:49.530\nAnd right here,\nif I zoom back in just for a moment.\n\n548\n00:30:49.530 --> 00:30:53.370\nYou'll see that where coffee\nwas originally $20 which\n\n549\n00:30:53.370 --> 00:30:54.900\nis a little expensive here.\n\n550\n00:30:54.900 --> 00:30:55.740\nAnd my muffin's $35.\n\n551\n00:30:55.740 --> 00:30:58.750\nAgain when you're doing this late at\nnight a little bit hard to remember.\n\n552\n00:30:58.750 --> 00:31:00.810\n>> I don't know where you shop Ronnie,\nbut-\n\n553\n00:31:00.810 --> 00:31:01.730\n>> I know, kind of high end\n\n554\n00:31:01.730 --> 00:31:02.740\na little bit there.\n\n555\n00:31:02.740 --> 00:31:05.820\nBut when you see this one was 30 and\none was 25,\n\n556\n00:31:05.820 --> 00:31:08.830\nit actually did update and\nalso, of course,\n\n557\n00:31:08.830 --> 00:31:13.280\nright here where it changed this from\nthe idea of a burger over to pizza.\n\n558\n00:31:13.280 --> 00:31:16.520\nWe now see where it actually\nworked on the condition.\n\n559\n00:31:16.520 --> 00:31:19.180\nSo, remember that merge\nreally does help us\n\n560\n00:31:19.180 --> 00:31:21.480\nwhen we do have condition\nthat we need to meet.\n\n561\n00:31:21.480 --> 00:31:24.440\nNow, could have I done that with\nthe union and all that stuff?\n\n562\n00:31:24.440 --> 00:31:25.484\nPossibly, right?\n\n563\n00:31:25.484 --> 00:31:29.200\nBut I would have had to go in an manually,\nactually do my own update, or insert,\n\n564\n00:31:29.200 --> 00:31:31.030\nor delete, and you name it.\n\n565\n00:31:31.030 --> 00:31:35.230\nAnd this one particular statement allows\nus even though it's a little bit more\n\n566\n00:31:35.230 --> 00:31:38.850\ncomplicated to do,\njust about all that at one time.\n\n567\n00:31:38.850 --> 00:31:42.020\nAnd it is the recommended\nmethod in Server 2014 for\n\n568\n00:31:42.020 --> 00:31:45.370\nyou to actually be able to do this.\n\n569\n00:31:45.370 --> 00:31:48.100\nNow, would they actually take\naway union and union all?\n\n570\n00:31:48.100 --> 00:31:48.663\nNo.\n\n571\n00:31:48.663 --> 00:31:50.925\nAre there people that say, yeah,\nyou should never run that?\n\n572\n00:31:50.925 --> 00:31:54.770\nProbably, but all row though,\nremember that all three of those,\n\n573\n00:31:54.770 --> 00:31:57.950\nare really to help us to\ncombine our data sets together,\n\n574\n00:31:57.950 --> 00:32:01.090\nto give us the actual results\nthat we really need, Daniel.\n\n575\n00:32:01.090 --> 00:32:04.420\n>> Well Ronnie, you have walked us through\na lot of really cool explanations and\n\n576\n00:32:04.420 --> 00:32:08.410\ndemonstrations today and what we can do\nwith SQL as far as using the unions and\n\n577\n00:32:08.410 --> 00:32:12.840\nadding, deleting, updating data inside\nof the new tables that we're creating.\n\n578\n00:32:12.840 --> 00:32:15.760\nVery cool stuff, very handy stuff,\nespecially when it comes to that exam.\n\n579\n00:32:15.760 --> 00:32:19.530\nBut, looking at the clock we have\ndefinitely exhausted our time for today.\n\n580\n00:32:19.530 --> 00:32:22.610\nWe do thank you for stopping by and\nwe thank you guys for watching.\n\n581\n00:32:22.610 --> 00:32:25.960\nSigning off for ITPro TV I've\nbeen your host Daniel Lowery.\n\n582\n00:32:25.960 --> 00:32:26.600\n>> And I'm Ronnie Wong.\n\n583\n00:32:26.600 --> 00:32:28.297\n>> And we'll see you next time.\n\n584\n00:32:28.297 --> 00:32:33.725\n[MUSIC]\n\n",
          "vimeoId": "166549402"
        },
        {
          "description": "In this episode, Daniel and Ronnie show you how to create and work with functions. They explain what functions in SQL are and look at the two types of User Defined Functions(UDFs), Scalar and Table-Valued, giving examples of each.",
          "length": "1722",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-4-work_with_functions-051016-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-4-work_with_functions-051016-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-3-4-work_with_functions-051016-1-sm.jpg",
          "title": "Work with Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC].\n\n2\n00:00:12.206 --> 00:00:12.830\nAll right.\n\n3\n00:00:12.830 --> 00:00:16.531\nGreetings everyone, and welcome to\nanother great episode of ITProTV.\n\n4\n00:00:16.531 --> 00:00:20.910\nI'm your host Daniel Lowrie and in today's\nepisode we are continuing on with our\n\n5\n00:00:20.910 --> 00:00:23.790\nQuerying Microsoft SQL Server 2014 series.\n\n6\n00:00:23.790 --> 00:00:28.080\nJoining us back in the studio again today\nto lend his ginormous experience and\n\n7\n00:00:28.080 --> 00:00:31.060\nexpertise on that very topic my\ngood friend Mr. Ronnie Wong.\n\n8\n00:00:31.060 --> 00:00:32.990\nRonnie welcome back sir, glad to have you.\n\n9\n00:00:32.990 --> 00:00:34.320\nHow's it going today?\n\n10\n00:00:34.320 --> 00:00:36.988\n>> It's going great,\nas we continue on to take a look at more\n\n11\n00:00:36.988 --> 00:00:40.080\nSQL Server 201S\n>> We're actually going to be taking\n\n12\n00:00:40.080 --> 00:00:43.700\na look at working with functions today,\nand why we wanna go ahead and\n\n13\n00:00:43.700 --> 00:00:46.620\nconsider that as an option for\nus to work with.\n\n14\n00:00:46.620 --> 00:00:49.860\nNow, don't get me wrong, we can actually\ndo select statements all day long,\n\n15\n00:00:49.860 --> 00:00:52.545\nwe can query our SQL server as well.\n\n16\n00:00:52.545 --> 00:00:56.655\nBut the idea of functions is to be to\nof course, to actually encapsulate that\n\n17\n00:00:56.655 --> 00:01:01.165\na little bit more, to give us a little\nbit more functionality as well and\n\n18\n00:01:01.165 --> 00:01:04.435\nthen to be able to call on those\nfunctions whenever we need to.\n\n19\n00:01:04.435 --> 00:01:06.855\nNow right away when we start\ntalking about functions,\n\n20\n00:01:06.855 --> 00:01:10.375\nmost of the time where we end up seeing\nthem, of course, is with a keyword.\n\n21\n00:01:10.375 --> 00:01:13.630\nAnd then it has its own set\nof parentheses afterwards and\n\n22\n00:01:13.630 --> 00:01:15.670\nit depends of course on the function,\nwhether or\n\n23\n00:01:15.670 --> 00:01:19.320\nnot there is an argument that goes\ninside of those parentheses or not.\n\n24\n00:01:19.320 --> 00:01:22.980\nBut beyond that, there's actually\ntwo different types of functions\n\n25\n00:01:22.980 --> 00:01:25.600\nthat we have to actually deal with.\n\n26\n00:01:25.600 --> 00:01:28.830\nOne of course is what we'll call\na deterministic function and\n\n27\n00:01:28.830 --> 00:01:33.100\nthe other one is called, of course,\na non-deterministic function as well.\n\n28\n00:01:33.100 --> 00:01:36.860\nNow when it comes down to well, what\neach of these actually really means for\n\n29\n00:01:36.860 --> 00:01:41.140\nus, is that a deterministic function\nwill normally give us the exact\n\n30\n00:01:41.140 --> 00:01:46.250\nsame result if we're given the same\nconditions over and over again, okay?\n\n31\n00:01:46.250 --> 00:01:48.860\nSo it actually will return\nthose types of results.\n\n32\n00:01:48.860 --> 00:01:52.260\nNow, of course, if you actually\nchange the conditions and the values.\n\n33\n00:01:52.260 --> 00:01:56.040\nYou will get a different value but\nthat's because you went ahead and\n\n34\n00:01:56.040 --> 00:01:57.850\nyou manually changed it.\n\n35\n00:01:57.850 --> 00:02:01.930\nSo these are some of the built-in ones\nthat we have in place, for example,\n\n36\n00:02:01.930 --> 00:02:05.430\nif you use something like\nthe function called average, okay?\n\n37\n00:02:05.430 --> 00:02:07.190\nAnd if you put in average and\n\n38\n00:02:07.190 --> 00:02:11.990\nthen you select a particular column inside\nof your database, well that, of course,\n\n39\n00:02:11.990 --> 00:02:14.950\nwill actually give you the average\nof whatever that column is gonna be.\n\n40\n00:02:14.950 --> 00:02:18.620\nAnd it'll give you the average regardless\nof where you choose to actually\n\n41\n00:02:18.620 --> 00:02:22.070\nmove the average function to,\nor what you choose to call on.\n\n42\n00:02:22.070 --> 00:02:25.020\nSo that is what is called\na deterministic function,\n\n43\n00:02:25.020 --> 00:02:27.840\nis that you'll normally get\nthat same answer every time.\n\n44\n00:02:27.840 --> 00:02:30.020\nAnd so average is a good one there.\n\n45\n00:02:30.020 --> 00:02:33.510\nThe other one has\na non-deterministic function though,\n\n46\n00:02:33.510 --> 00:02:38.700\nwhich will normally give you a different\nvalue when you tend to run it.\n\n47\n00:02:38.700 --> 00:02:41.420\nAnd a lot of these may actually\ncome from values that you don't\n\n48\n00:02:41.420 --> 00:02:44.730\nreally have to call on and\nthey might actually exist on their own.\n\n49\n00:02:44.730 --> 00:02:49.700\nSo for example, if you were to run\na function called get time or get date.\n\n50\n00:02:49.700 --> 00:02:54.310\nWell, that actually depends on the system\ndate and time tha that you run it on.\n\n51\n00:02:54.310 --> 00:02:57.140\nAnd it didn't matter if you actually\nran it today or tomorrow or\n\n52\n00:02:57.140 --> 00:02:58.580\nthe next day right?\n\n53\n00:02:58.580 --> 00:03:03.760\nThat's actually looking for\na specific date-time information\n\n54\n00:03:03.760 --> 00:03:06.380\nthat the system itself is\ngoing to hand into it and\n\n55\n00:03:06.380 --> 00:03:10.790\nyou're going to get a different value for\nthat type of function instead.\n\n56\n00:03:10.790 --> 00:03:15.120\nSo just kind of realize that there\nare two different types that\n\n57\n00:03:15.120 --> 00:03:19.900\nthey normally do group functions into\ndeterministic and non-deterministic.\n\n58\n00:03:19.900 --> 00:03:23.190\nNow the two that I actually\njust mentioned to you,\n\n59\n00:03:23.190 --> 00:03:26.900\nthese are also what we call\nbuilt in functions too.\n\n60\n00:03:26.900 --> 00:03:28.830\nIn which the system already recognizes.\n\n61\n00:03:28.830 --> 00:03:30.980\nYou and I didn't have to creat them.\n\n62\n00:03:30.980 --> 00:03:34.410\nEssentially the system itself\ncreated these functions.\n\n63\n00:03:34.410 --> 00:03:38.980\nAnd so the good thing is that means you\nand I have the ability to take advantage\n\n64\n00:03:38.980 --> 00:03:42.430\nof these functions that are already\ndefined for us, programmed for us,\n\n65\n00:03:42.430 --> 00:03:46.810\nhowever you want to use the terminology,\nright?\n\n66\n00:03:46.810 --> 00:03:48.490\nThese are things that will exist and\n\n67\n00:03:48.490 --> 00:03:51.070\nwill work the way that\nthey are designed to work.\n\n68\n00:03:51.070 --> 00:03:55.800\nBut that actually means that they're\nalso limited to do those things as well.\n\n69\n00:03:55.800 --> 00:03:59.900\nIf you do need to actually develop your\nown functions the good thing is you can.\n\n70\n00:03:59.900 --> 00:04:02.980\nAnd when we start talking in that realm,\n\n71\n00:04:02.980 --> 00:04:05.690\nthat is when we start coming up\nwith of course new acronyms.\n\n72\n00:04:05.690 --> 00:04:07.080\nWho would guess that SQL,\n\n73\n00:04:07.080 --> 00:04:11.610\nwhich we call sequel, also of course has\nmore acronyms in it than you can use?\n\n74\n00:04:11.610 --> 00:04:14.280\nSo normally when you start talking\nabout functions that you and\n\n75\n00:04:14.280 --> 00:04:18.980\nI create they call them\nUser Defined Functions.\n\n76\n00:04:18.980 --> 00:04:22.170\nWhich, of course, abbreviates to UDF.\n\n77\n00:04:22.170 --> 00:04:25.800\nSo when you do see people mentioning that.\n\n78\n00:04:25.800 --> 00:04:29.060\nPeople, writers or whatever it is,\nif you go and do some research out on\n\n79\n00:04:29.060 --> 00:04:34.710\nthe internet and they go this UDF over\nhere and you're saying what is UDF?\n\n80\n00:04:34.710 --> 00:04:37.680\nWhat they really mean is\nUser Defined Function.\n\n81\n00:04:37.680 --> 00:04:41.340\nSo those are normally the one's that you\nand I might take the time to create and\n\n82\n00:04:41.340 --> 00:04:43.380\nwrite and develop on our own.\n\n83\n00:04:43.380 --> 00:04:47.230\nAnd we do need to understand that those\nthings are also going to be important,\n\n84\n00:04:47.230 --> 00:04:49.780\nthat we at least have\na basic understanding\n\n85\n00:04:49.780 --> 00:04:52.450\nthat we can actually create these as well.\n\n86\n00:04:52.450 --> 00:04:56.780\nNow, when it comes down to creating UDS,\nokay?\n\n87\n00:04:56.780 --> 00:04:59.120\nWell, there's really two types of those,\nright?\n\n88\n00:04:59.120 --> 00:05:03.460\nSo notice we're kind of diving into,\nlike, a tree and\n\n89\n00:05:03.460 --> 00:05:07.085\nthen a subtree, and\nthen subtrees as we start to continue.\n\n90\n00:05:07.085 --> 00:05:11.625\nTo see that so just realize that you're\nactually starting to see that as well.\n\n91\n00:05:11.625 --> 00:05:15.475\nSo just like we said there's actually\nfunctions that essentially get you know,\n\n92\n00:05:15.475 --> 00:05:18.895\ndivided off into you know the built\nin functions versus the user\n\n93\n00:05:18.895 --> 00:05:20.025\ndefined functions.\n\n94\n00:05:20.025 --> 00:05:23.945\nWithin user defined I already told you\nthere's at least two types of those, okay?\n\n95\n00:05:23.945 --> 00:05:27.745\nSo there is of course\nwhat we call scalar UDS.\n\n96\n00:05:27.745 --> 00:05:30.070\nScalar user defined functions.\n\n97\n00:05:30.070 --> 00:05:34.540\nAnd then there's also what we call,\nof course, TVF functions as well.\n\n98\n00:05:34.540 --> 00:05:37.440\nAnd that is table-valued functions too.\n\n99\n00:05:37.440 --> 00:05:39.860\nSo when we start to take a look at those,\n\n100\n00:05:39.860 --> 00:05:43.680\nthat's what we're really focusing in on\ntoday, is trying to make sure that we can\n\n101\n00:05:43.680 --> 00:05:46.530\ndistinguish between those\ntwo basic functions.\n\n102\n00:05:46.530 --> 00:05:49.420\nYeah, the user defined functions\nis what we want to do.\n\n103\n00:05:49.420 --> 00:05:53.020\nAnd while they're at, why, they're\nalso as powerful as they are, okay?\n\n104\n00:05:53.020 --> 00:05:57.690\nSo let's start off with the idea of a\nscalar function, that really helps us out,\n\n105\n00:05:57.690 --> 00:06:00.470\nthe majority of times when\nwe're actually doing something.\n\n106\n00:06:00.470 --> 00:06:05.210\nA scalar function is exactly like it\nsounds, where it returns one result.\n\n107\n00:06:05.210 --> 00:06:08.560\nSo we can actually build\nan incredible function here, but\n\n108\n00:06:08.560 --> 00:06:13.380\nthe goal of it is actually to return\na single value to us, or to a table, or\n\n109\n00:06:13.380 --> 00:06:17.810\nto the call, or whatever it might be that\nwe're actually trying to look for, okay?\n\n110\n00:06:17.810 --> 00:06:21.670\nNow, a lot of times these functions can\nalso of course accept parameters, so\n\n111\n00:06:21.670 --> 00:06:23.890\nyou can say,\nwell I want this to be this, or\n\n112\n00:06:23.890 --> 00:06:27.150\nthis to be this put it inside of\nthe arguments of the function, and\n\n113\n00:06:27.150 --> 00:06:30.310\nit normally gives us\nthe single value that we want.\n\n114\n00:06:30.310 --> 00:06:34.310\nMost of the time, as far as I know, and\nthe only time that we actually use this\n\n115\n00:06:34.310 --> 00:06:37.690\nis in data manipulation language,\nin other words DML.\n\n116\n00:06:37.690 --> 00:06:41.330\nWe do not tend to use user-defined\nfunctions when we're creating database\n\n117\n00:06:41.330 --> 00:06:43.150\nstructures like tables.\n\n118\n00:06:43.150 --> 00:06:44.980\nAnd doing views and stuff like that, but\n\n119\n00:06:44.980 --> 00:06:49.280\nwe do tend to use them of course in\nthe data manipulation language itself.\n\n120\n00:06:49.280 --> 00:06:53.090\nSo that's really some of the background\nthat we need to have and\n\n121\n00:06:53.090 --> 00:06:58.120\nunderstand, to be able to see what\nwe're going to do here, okay?\n\n122\n00:06:58.120 --> 00:07:01.420\nSo the great thing is, now that we\nunderstand that, or at least I hope we\n\n123\n00:07:01.420 --> 00:07:04.940\nunderstand that, it means that we\ncan at least start to go ahead and\n\n124\n00:07:04.940 --> 00:07:09.410\ncreate a function to help us out and\ndo what we want to do, okay?\n\n125\n00:07:09.410 --> 00:07:13.660\nSo let's go to my screen, and that way,\nwe'll go ahead and get started here.\n\n126\n00:07:14.890 --> 00:07:18.140\nAt the very top of my screen,\nI'm going to go ahead and\n\n127\n00:07:18.140 --> 00:07:22.070\ncreate a scalar function,\nwhat this example is going to do.\n\n128\n00:07:22.070 --> 00:07:25.580\nI need to make sure, of course that\nI've connected to my right database, and\n\n129\n00:07:25.580 --> 00:07:29.730\nI'm in the adventure works 2012 database,\nand that's perfectly fine.\n\n130\n00:07:29.730 --> 00:07:33.370\nAnd one of the first things, especially\nif you're beginning, is if you've\n\n131\n00:07:33.370 --> 00:07:37.440\nplayed around with them and you don't know\nwhat's actually there, recommendation of\n\n132\n00:07:37.440 --> 00:07:42.090\ncourse is to go ahead and clear out of\na possible function you may have created.\n\n133\n00:07:42.090 --> 00:07:46.960\nSo here I have a dropped\nfunction type of of statement.\n\n134\n00:07:46.960 --> 00:07:50.407\nThat says look if it's existing in\nthe database lets get rid of it because we\n\n135\n00:07:50.407 --> 00:07:53.927\ndon't want to see if it actually happens\nor if something gets mixed up here.\n\n136\n00:07:53.927 --> 00:07:56.338\nSo I'm simply going to execute that and\n\n137\n00:07:56.338 --> 00:08:00.222\nverify that it actually executes\nsuccessfully at that point.\n\n138\n00:08:00.222 --> 00:08:03.719\nSo that way I know I'm not having to\nworry about someone else's mess or\n\n139\n00:08:03.719 --> 00:08:06.410\nmy own mess that I may have\ncreated at some point here.\n\n140\n00:08:06.410 --> 00:08:12.740\nAnd so then once we do that we can\nnow begin to create our function.\n\n141\n00:08:12.740 --> 00:08:14.177\nNow when we take a look at this,\n\n142\n00:08:14.177 --> 00:08:17.880\nthis is the next portion of code that\nwe're going to be taking a look at.\n\n143\n00:08:17.880 --> 00:08:21.420\nAnd we've already done some of this\nvery simply in other episodes.\n\n144\n00:08:21.420 --> 00:08:24.490\nWe've called upon\nfunctions as well already.\n\n145\n00:08:24.490 --> 00:08:28.190\nBut here, we're actually creating our\nown by scratch at this point, and\n\n146\n00:08:28.190 --> 00:08:30.420\nadding in a few variables too.\n\n147\n00:08:30.420 --> 00:08:34.320\nWhen you do create the function, you want\nto make sure that you understand that it\n\n148\n00:08:34.320 --> 00:08:39.750\nhas to actually also include in\nthe schema name along with a name here.\n\n149\n00:08:39.750 --> 00:08:41.820\nI'm gonna mess that up like crazy.\n\n150\n00:08:41.820 --> 00:08:43.450\nAlong with the rest of the name.\n\n151\n00:08:43.450 --> 00:08:44.430\nNow here I have sales.\n\n152\n00:08:44.430 --> 00:08:49.810\nI'm telling it it can not only operate\ninside of the sales schema in my database\n\n153\n00:08:49.810 --> 00:08:52.100\nand I want it to actually\nbring me a total.\n\n154\n00:08:52.100 --> 00:08:56.410\nWell remember I said a scalar function\nactually determines one value okay?\n\n155\n00:08:56.410 --> 00:08:58.290\nSo that's what I want it to do.\n\n156\n00:08:58.290 --> 00:09:02.400\nSo in this sense, I want to create\na function that gives me a total.\n\n157\n00:09:02.400 --> 00:09:05.420\nNow, what do I want it to\nactually give me a total of?\n\n158\n00:09:05.420 --> 00:09:10.040\nWell, inside of that function,\nnotice I have my argument here,\n\n159\n00:09:10.040 --> 00:09:13.190\nmy set of parentheses that\nyou see right here, and\n\n160\n00:09:13.190 --> 00:09:17.520\nwhat I'm telling it is first of all I'm\ngoing to declare two variables here, okay?\n\n161\n00:09:17.520 --> 00:09:19.600\nOne is gonna be the unit price, and\n\n162\n00:09:19.600 --> 00:09:23.130\nthat's gonna be of course of this\ndata type that we call money.\n\n163\n00:09:23.130 --> 00:09:28.380\nAnd the other one is qty as an integer\nis what I'm going to declare that at.\n\n164\n00:09:28.380 --> 00:09:32.590\nSo that is of course an abbreviation for\nquantity as well.\n\n165\n00:09:32.590 --> 00:09:33.280\nOkay.\n\n166\n00:09:33.280 --> 00:09:36.710\nNow I can go ahead and select that and\n\n167\n00:09:36.710 --> 00:09:42.330\nthen what I'm actually telling that it\nneeds to return as the scalar value\n\n168\n00:09:42.330 --> 00:09:45.870\nis some type of data type\nwhich is gonna be money.\n\n169\n00:09:45.870 --> 00:09:49.820\nNow, if you're not sure, right, as you\nactually start to hover over these things\n\n170\n00:09:49.820 --> 00:09:54.120\nespecially when they're key words,\nyou should get a tool tip like this.\n\n171\n00:09:54.120 --> 00:09:57.680\nAnd notice this one says, hey look, it's\nsupposed to return to me a data type of\n\n172\n00:09:57.680 --> 00:10:00.620\nmoney, and that may be important later on.\n\n173\n00:10:00.620 --> 00:10:03.250\nIt depends on what you're actually doing,\nwhether or\n\n174\n00:10:03.250 --> 00:10:07.280\nnot you actually need to to report as an\ninteger or you need it to report as money.\n\n175\n00:10:07.280 --> 00:10:09.560\nYou can define it here right away.\n\n176\n00:10:09.560 --> 00:10:12.840\nAll right, so once we have that,\n\n177\n00:10:12.840 --> 00:10:17.060\nnow I can tell it what I want I\nwant that function to actually do.\n\n178\n00:10:17.060 --> 00:10:20.710\nNow I've just went ahead and\nsaid what we're also creating inside.\n\n179\n00:10:20.710 --> 00:10:25.555\nNow notice that in between\nthe words BEGIN and\n\n180\n00:10:25.555 --> 00:10:29.780\nEND, I'm saying here's what\nthe function should do.\n\n181\n00:10:29.780 --> 00:10:34.536\nIt should take that\nvariable called #unitprice,\n\n182\n00:10:34.536 --> 00:10:41.690\nmultiply it here with, of course,\nthe variable that we call @qty.\n\n183\n00:10:41.690 --> 00:10:46.700\nSo those are my two parameters and\nthat is the only function I really\n\n184\n00:10:46.700 --> 00:10:50.860\nwant it to do, and I'm gonna end that\nentire batch statement with the word GO.\n\n185\n00:10:52.580 --> 00:10:54.295\nSo at this particular point,\n\n186\n00:10:54.295 --> 00:10:58.870\nthat is what we are actually going to\nrun is that entire code right there.\n\n187\n00:10:58.870 --> 00:11:03.460\nThat essentially creates just a single\nfunction that gives me a total here\n\n188\n00:11:03.460 --> 00:11:06.210\nof unit price times quantity.\n\n189\n00:11:06.210 --> 00:11:08.610\nNow, can I do this another way?\n\n190\n00:11:08.610 --> 00:11:11.810\nWe've done this before by\nusing a select statement and\n\n191\n00:11:11.810 --> 00:11:14.280\nactually merging two together, okay?\n\n192\n00:11:14.280 --> 00:11:16.440\nSo if you remember,\nwe were actually able to do this,\n\n193\n00:11:16.440 --> 00:11:18.220\nwhere we could actually\ndo a select statement.\n\n194\n00:11:18.220 --> 00:11:22.510\nAnd then I could've actually\ncalled up the unit price field or\n\n195\n00:11:22.510 --> 00:11:26.160\ncolumn, times the actual order quantity,\n\n196\n00:11:26.160 --> 00:11:30.230\nin this case, and then tell it to\nreport as total if I want it to.\n\n197\n00:11:30.230 --> 00:11:34.070\nBut here we're actually using a function\nbecause functions can be reused somewhere\n\n198\n00:11:34.070 --> 00:11:38.010\nelse, whereas if I actually just do it\ninside of that one select statement,\n\n199\n00:11:38.010 --> 00:11:39.360\nit works, don't get me wrong.\n\n200\n00:11:39.360 --> 00:11:45.250\nBut if I said I'm gonna be running this\nfor six queries in the next hour or so,\n\n201\n00:11:45.250 --> 00:11:49.790\nwell now I'd have to actually go back in,\nactually retype that in every single time.\n\n202\n00:11:49.790 --> 00:11:53.536\nInstead, I can actually create this query\nand then call upon this entire function\n\n203\n00:11:53.536 --> 00:11:57.078\nhere underneath the sales schema, and\nbe able to actually use that instead.\n\n204\n00:11:57.078 --> 00:11:57.623\n>> Yeah, Ronnie.\n\n205\n00:11:57.623 --> 00:12:02.495\nIt looks a lot is working like\ntraditional programming language,\n\n206\n00:12:02.495 --> 00:12:06.220\nwhere you create, and\nthey call them functions as well.\n\n207\n00:12:06.220 --> 00:12:10.650\nYou create a function and it's basically\na block of code that does a certain\n\n208\n00:12:10.650 --> 00:12:15.230\nthing that I'm going to repeat multiple\ntimes throughout my line of codes.\n\n209\n00:12:15.230 --> 00:12:17.890\nAnd like Ronnie said instead of\ntyping it over, and over, and\n\n210\n00:12:17.890 --> 00:12:19.240\nover again which can be laborious.\n\n211\n00:12:19.240 --> 00:12:23.070\nAnd also it becomes error prone because\nI'm gonna make a mistake, I mean I'm gonna\n\n212\n00:12:23.070 --> 00:12:26.590\nforget a character, I'm gonna mistype\na word, something to that effect.\n\n213\n00:12:26.590 --> 00:12:28.340\nSo I'm more likely to have errors.\n\n214\n00:12:28.340 --> 00:12:34.180\nIn my code itself, I make one function,\nverify that it works, now\n\n215\n00:12:34.180 --> 00:12:38.530\nI can use it as many times as I need and\nit gets the results that I'm looking for.\n\n216\n00:12:38.530 --> 00:12:40.620\nAnd that looks like what\nyou're doing here, Ronnie.\n\n217\n00:12:40.620 --> 00:12:42.260\n>> That's exactly what we're trying to do,\nright.\n\n218\n00:12:42.260 --> 00:12:45.450\nTo actually make it much more efficient\nbecause we may be running a lot of\n\n219\n00:12:45.450 --> 00:12:46.450\ncoding here.\n\n220\n00:12:46.450 --> 00:12:50.172\nWe're just gonna do that right now, and\nI just went ahead and pressed the Execute,\n\n221\n00:12:50.172 --> 00:12:53.420\nand I get where the command is\nactually saved successfully.\n\n222\n00:12:53.420 --> 00:12:55.690\nNow when I start to take a look,\n\n223\n00:12:55.690 --> 00:12:59.970\nwhy does it actually matter that it's\nsaved somewhere and it's not just in RAM.\n\n224\n00:12:59.970 --> 00:13:03.140\nIt's because of that reusability\nthat we're talking about.\n\n225\n00:13:03.140 --> 00:13:04.560\nSo if I wanted to go ahead and\n\n226\n00:13:04.560 --> 00:13:09.060\ntry and find that inside of my\nAdventureWorks2012 database.\n\n227\n00:13:09.060 --> 00:13:12.150\nWell, notice that, remember,\nI don't wanna say notice,\n\n228\n00:13:12.150 --> 00:13:15.350\nbut what I should say is here\nit is in AdventureWorks2012.\n\n229\n00:13:15.350 --> 00:13:19.010\nWell, where is that\nfunction actually stored?\n\n230\n00:13:19.010 --> 00:13:22.695\nWell, remember that the actual function,\nbecause I've now actually created it,\n\n231\n00:13:22.695 --> 00:13:27.100\nis stored somewhere inside of this\nAdventureWorks2012 database here.\n\n232\n00:13:27.100 --> 00:13:29.980\nAnd this actually goes back to\nwhat Daniel was saying about\n\n233\n00:13:29.980 --> 00:13:33.010\nhow it works with the ideal program,\nright?\n\n234\n00:13:33.010 --> 00:13:37.210\nNotice I have this idea of programmability\nhere as one of the nodes, and\n\n235\n00:13:37.210 --> 00:13:42.500\nI expand that out here, and\nthen notice I have functions.\n\n236\n00:13:42.500 --> 00:13:45.410\nNow, whenever we actually\nhave created something,\n\n237\n00:13:45.410 --> 00:13:50.080\nwe find out that it doesn't appear right\naway unless you manually refresh it, so\n\n238\n00:13:50.080 --> 00:13:53.430\nI've just went ahead and\nright-clicked and selected Refresh.\n\n239\n00:13:53.430 --> 00:13:56.100\nAnd now notice that there's actually\nseveral different types here.\n\n240\n00:13:56.100 --> 00:13:58.918\nThere's the table value functions\nthat we were mentioning.\n\n241\n00:13:58.918 --> 00:14:01.260\nHere's the scalar function,\nthere's aggregate and\n\n242\n00:14:01.260 --> 00:14:04.400\nthere's system functions that\nare actually defined there too.\n\n243\n00:14:04.400 --> 00:14:09.550\nIf I expand out these scalar functions and\nI scroll down, there it is.\n\n244\n00:14:09.550 --> 00:14:14.930\nThere is the one that I just\ncreated called Sales.fn_total.\n\n245\n00:14:14.930 --> 00:14:18.060\nNow do you have to actually\nput the fn in there?\n\n246\n00:14:18.060 --> 00:14:20.340\nYou do not have to, okay?\n\n247\n00:14:20.340 --> 00:14:25.090\nBut to help along and\nto keep with the idea of best practices,\n\n248\n00:14:25.090 --> 00:14:27.920\nyou'll notice that this one here,\nthey actually,\n\n249\n00:14:27.920 --> 00:14:32.940\nlike this one up here at the top,\nthey show ufn, for user function, okay?\n\n250\n00:14:32.940 --> 00:14:38.090\nI just do the old school way instead,\nI don't do that newfangled abbreviation.\n\n251\n00:14:38.090 --> 00:14:39.225\nI should, okay.\n\n252\n00:14:39.225 --> 00:14:43.430\n>> But this is really the third\nperson that's coming behind you and\n\n253\n00:14:43.430 --> 00:14:46.435\nlooking at the functions and going, this\n\n254\n00:14:46.435 --> 00:14:52.290\nSales.fn_total is a user function that\nsomeone created, it's not a built-in.\n\n255\n00:14:52.290 --> 00:14:56.420\n>> Right, and so I should use ufn, but\nthat's just the way I learned this.\n\n256\n00:14:56.420 --> 00:14:57.330\n>> Smack your hand, Ronnie.\n\n257\n00:14:57.330 --> 00:14:58.240\n>> I know, it's just,\n\n258\n00:14:58.240 --> 00:15:02.480\nit's what you get for getting old in\nthe industry, is what ends up happening.\n\n259\n00:15:02.480 --> 00:15:06.510\nSo instead, it's right there, and\nthat means if it's actually there,\n\n260\n00:15:06.510 --> 00:15:10.270\nit's not stored with any one\nparticular table, right?\n\n261\n00:15:10.270 --> 00:15:15.110\nIt actually means it's available to\nanything in the adventure works table\n\n262\n00:15:15.110 --> 00:15:15.940\ntheory here.\n\n263\n00:15:15.940 --> 00:15:18.920\nIt's actually only available\nunderneath those tables that\n\n264\n00:15:18.920 --> 00:15:22.230\nactually work with the sales schema\nthat's actually under there as well,\n\n265\n00:15:22.230 --> 00:15:25.060\nbecause I actually did\npre-name it with that.\n\n266\n00:15:25.060 --> 00:15:29.080\nSo you just have to as you pay\nattention a little bit in that sense.\n\n267\n00:15:29.080 --> 00:15:32.620\nBut realize that it is going\nto be stored there for us.\n\n268\n00:15:32.620 --> 00:15:37.340\nAnd then, we can then take a look\nat what it helps us to do.\n\n269\n00:15:37.340 --> 00:15:41.840\nNow, I'm gonna run the SELECT statement\nhere to see how it's gonna be used.\n\n270\n00:15:41.840 --> 00:15:47.060\nNotice that what I did is simply\ninclude it into the SELECT statement.\n\n271\n00:15:47.060 --> 00:15:49.606\nI even went ahead and included an alias.\n\n272\n00:15:49.606 --> 00:15:53.495\nWhat I was saying earlier where you could\nactually include this into your SELECT\n\n273\n00:15:53.495 --> 00:15:55.655\nstatement by not doing a function, right?\n\n274\n00:15:55.655 --> 00:15:58.802\nWell I could have called up order\nquantity and unit price, and\n\n275\n00:15:58.802 --> 00:16:01.280\nI can still do it here, I'm not going to.\n\n276\n00:16:01.280 --> 00:16:05.110\nBut I can actually go ahead and\nmultiply unit price and order quantity,\n\n277\n00:16:05.110 --> 00:16:07.900\nthose two columns that I\nactually have listed above, and\n\n278\n00:16:07.900 --> 00:16:10.400\nreport it as totals again and\ngive me the same thing.\n\n279\n00:16:11.440 --> 00:16:15.520\nBut now that I have that function, I can\nthen go ahead and call upon that function,\n\n280\n00:16:15.520 --> 00:16:20.350\nand I just went ahead and said here's\nwhat it should work on, as well.\n\n281\n00:16:20.350 --> 00:16:24.690\nSo inside of its own argument of\nthe two columns I want it to work on,\n\n282\n00:16:24.690 --> 00:16:28.400\ngone ahead and did that,\nselected what table it's from, and\n\n283\n00:16:28.400 --> 00:16:33.605\nthen I also said what I want\nthis function to be limited by.\n\n284\n00:16:33.605 --> 00:16:36.495\nI selected a filter here that\nI really only want it to\n\n285\n00:16:36.495 --> 00:16:40.215\nactually report to me the totals\nthat are greater than 2,000, okay?\n\n286\n00:16:40.215 --> 00:16:41.335\nNow, do I have to do that?\n\n287\n00:16:41.335 --> 00:16:45.941\nNo, but the idea here, of course,\nis reporting exactly what you need.\n\n288\n00:16:45.941 --> 00:16:50.792\nSo if I select this whole thing,\nand then I press my F5 key to run,\n\n289\n00:16:50.792 --> 00:16:54.869\nI should now see,\nlet me verify how many results I get.\n\n290\n00:16:54.869 --> 00:17:00.250\nQuite a few,\n21,212 results is what I end up getting.\n\n291\n00:17:00.250 --> 00:17:05.440\nBut what I should be able to see though\nis in this entire totals column then,\n\n292\n00:17:05.440 --> 00:17:11.290\nwhich it generated from that function, is\nI should not get a value underneath 2,000.\n\n293\n00:17:11.290 --> 00:17:13.090\nSo I scroll on through everything.\n\n294\n00:17:13.090 --> 00:17:15.750\nThat's what it should be,\nis 2,000 or greater.\n\n295\n00:17:15.750 --> 00:17:18.760\nI'm not gonna scroll through\n21,000 rows to verify, but\n\n296\n00:17:18.760 --> 00:17:23.960\nI do trust that SQL server has returned\nto me exactly what I actually wanted.\n\n297\n00:17:23.960 --> 00:17:28.380\nSo user functions are really there\nto help you to realize that,\n\n298\n00:17:28.380 --> 00:17:31.840\njust like what Daniel said, if you do\nhave code that you're reusing over and\n\n299\n00:17:31.840 --> 00:17:35.930\nover again in multiple tables,\nwell, go ahead and use that.\n\n300\n00:17:35.930 --> 00:17:36.610\nAnd that way,\n\n301\n00:17:36.610 --> 00:17:40.130\nyou just simply call upon the function\nthe way that you would do in a query.\n\n302\n00:17:40.130 --> 00:17:42.300\nAnd you'll be off, and\nyou'll be ready to go.\n\n303\n00:17:42.300 --> 00:17:45.267\n>> That's pretty straightforward,\nRonnie, a very simple thing and\n\n304\n00:17:45.267 --> 00:17:48.768\na very effective thing for all the reasons\nin which we've just laid out for you.\n\n305\n00:17:48.768 --> 00:17:53.120\nYou don't wanna be mistyping your\nqueries and getting wrong results.\n\n306\n00:17:53.120 --> 00:17:54.150\nMake it easy on yourself.\n\n307\n00:17:54.150 --> 00:17:56.060\nLearn how to create a function\nthat's gonna work for you.\n\n308\n00:17:56.060 --> 00:17:58.330\nAnd then you get to reuse\nit all over the place.\n\n309\n00:17:58.330 --> 00:17:59.420\nIt's a very, very handy thing.\n\n310\n00:17:59.420 --> 00:18:01.106\nSo Ronnie, that being said,\nwhat else do you got for us today?\n\n311\n00:18:01.106 --> 00:18:05.750\n>> Well, we do need to talk about\nthe table valued functions again.\n\n312\n00:18:05.750 --> 00:18:10.970\nOkay, now, I say again because we did\ncover a little bit of this earlier,\n\n313\n00:18:10.970 --> 00:18:13.730\nwhen we started creating tables as well.\n\n314\n00:18:13.730 --> 00:18:21.400\nSo just kind of realize that you will see\nthis content, not the exact same example,\n\n315\n00:18:21.400 --> 00:18:25.700\nbut overall though, to actually understand\nthat we have covered some of this before.\n\n316\n00:18:25.700 --> 00:18:29.920\nBut an inline function is really the way\nthat we're going to tackle this at this\n\n317\n00:18:29.920 --> 00:18:30.580\npoint, okay.\n\n318\n00:18:30.580 --> 00:18:33.130\nNow, what is the difference\nbetween what we have in a scalar\n\n319\n00:18:33.130 --> 00:18:37.810\nfunction versus the idea of\nan inline table valued function?\n\n320\n00:18:37.810 --> 00:18:41.298\nWell, remember that a scalar function\nreturns to us one value, okay?\n\n321\n00:18:41.298 --> 00:18:46.320\nA table valued function, the results\nshould be a table of information instead.\n\n322\n00:18:46.320 --> 00:18:49.785\nSo that's actually beyond\nthe idea of one particular value.\n\n323\n00:18:49.785 --> 00:18:53.320\n>> So we're increasing our scope\nof data that we're gonna get back.\n\n324\n00:18:53.320 --> 00:18:54.240\n>> Yeah, absolutely.\n\n325\n00:18:54.240 --> 00:18:56.660\nJust increasing the sheer amount, right,\n\n326\n00:18:56.660 --> 00:18:58.540\ninstead of actually\nreturning a single value.\n\n327\n00:18:58.540 --> 00:19:01.060\nRemember that scalar function that\nwe just did, we're just telling it,\n\n328\n00:19:01.060 --> 00:19:04.170\nI just need the total for\neach row that's actually there.\n\n329\n00:19:04.170 --> 00:19:05.900\nAnd you can do that,\nyou can go ahead and do that.\n\n330\n00:19:05.900 --> 00:19:10.120\nBut this one though, is absolutely gonna\nsay, all right, the table of information,\n\n331\n00:19:10.120 --> 00:19:14.240\nthat's what you actually need to return,\nwell, we can do that as well.\n\n332\n00:19:14.240 --> 00:19:19.361\nSo, on this one, let's go ahead and also\nsay now, I'm actually going to use this\n\n333\n00:19:19.361 --> 00:19:24.201\nword filter now as well, because all\nof our functions, regardless, we do.\n\n334\n00:19:24.201 --> 00:19:28.230\nWe need to have some type of\nfilter that goes along with this.\n\n335\n00:19:28.230 --> 00:19:31.710\nAnd so that's what we're also going to do,\nas well, okay?\n\n336\n00:19:31.710 --> 00:19:33.750\nSo remember that the idea here is a table.\n\n337\n00:19:33.750 --> 00:19:34.430\nLet me go ahead and\n\n338\n00:19:34.430 --> 00:19:38.890\nverify that I do not have this as\nan object inside of my database.\n\n339\n00:19:38.890 --> 00:19:42.100\nAnd there it goes,\nif it was in there, it's now gone.\n\n340\n00:19:42.100 --> 00:19:46.040\nAnd then let's take a look\nat how this function differs\n\n341\n00:19:46.040 --> 00:19:47.500\nfrom what we saw in the scale.\n\n342\n00:19:47.500 --> 00:19:50.640\nAnd you're not gonna see a lot of\ndifference here right away, but\n\n343\n00:19:50.640 --> 00:19:53.600\nyou will see at least one difference,\nokay.\n\n344\n00:19:53.600 --> 00:19:56.760\nSo notice at the very beginning,\nwe are gonna create a function and those,\n\n345\n00:19:56.760 --> 00:19:58.410\nof course, are our key words.\n\n346\n00:19:58.410 --> 00:20:03.060\nAnd then the name, and this time,\nI actually just have filter, okay.\n\n347\n00:20:04.160 --> 00:20:05.933\nThe two variables we're gonna create,\n\n348\n00:20:05.933 --> 00:20:09.850\nI'm gonna actually have a low quantity\nas well as a high quantity and\n\n349\n00:20:09.850 --> 00:20:13.950\nthey're going to be represented\nby small integers at this point.\n\n350\n00:20:13.950 --> 00:20:17.370\nAnd this is where the difference\ncomes in is right here.\n\n351\n00:20:17.370 --> 00:20:18.090\nOkay?\n\n352\n00:20:18.090 --> 00:20:22.290\nSo now I'm not telling it that she\njust returned me a value, okay?\n\n353\n00:20:22.290 --> 00:20:25.790\nWhat I'm telling it is to return the table\n\n354\n00:20:25.790 --> 00:20:29.050\nas an actual return to this function,\nokay?\n\n355\n00:20:29.050 --> 00:20:32.000\nSo when it actually produces\nwhatever table of information,\n\n356\n00:20:32.000 --> 00:20:34.910\nthat's actually supposed to give me\nthe information that I need, and\n\n357\n00:20:34.910 --> 00:20:37.350\nit's actually going to end up\nbeing a table of information, but\n\n358\n00:20:37.350 --> 00:20:41.090\nthat return then can be used somewhere\nelse, so we need to as well.\n\n359\n00:20:42.540 --> 00:20:47.610\nThen we follow a regular SELECT\nstatement of the same thing that we\n\n360\n00:20:47.610 --> 00:20:53.510\njust did on the sales order ID,\nthe unit price, the quantity, here.\n\n361\n00:20:53.510 --> 00:20:59.060\nAnd this time though, I've actually\nchanged the formula just a little bit.\n\n362\n00:20:59.060 --> 00:21:02.970\nSo in this function, I'm essentially\nsaying when we create this,\n\n363\n00:21:02.970 --> 00:21:07.030\nI know that there's going to be a range of\ntable of values that's going to come out\n\n364\n00:21:07.030 --> 00:21:10.620\nbecause I'm asking for\nmore than one return okay.\n\n365\n00:21:10.620 --> 00:21:16.360\nI'm asking it to keep within\na low quantity number and\n\n366\n00:21:16.360 --> 00:21:17.930\na high quantity number.\n\n367\n00:21:17.930 --> 00:21:20.210\nIn other words, a range of values.\n\n368\n00:21:20.210 --> 00:21:24.020\nSo when I was only asking for an average,\nit was just, or a total right.\n\n369\n00:21:24.020 --> 00:21:27.190\nIt was just total up that row and\ngive me whatever this is.\n\n370\n00:21:27.190 --> 00:21:32.640\nNow I'm saying go in between whatever\n1,000 and 2,000 or 10 and 20.\n\n371\n00:21:32.640 --> 00:21:35.030\nWhatever it might be, I just want those.\n\n372\n00:21:35.030 --> 00:21:38.635\nAnd that's now asking for\nmultiple values at the same time.\n\n373\n00:21:38.635 --> 00:21:42.160\nOkay, so on this one it's fairly easy and\n\n374\n00:21:42.160 --> 00:21:46.490\nI'm telling it I need it reported\nit as a table, as a return.\n\n375\n00:21:46.490 --> 00:21:48.670\nFine, we can actually do that.\n\n376\n00:21:48.670 --> 00:21:53.180\nSo let me see if my selecting\nabilities right here.\n\n377\n00:21:53.180 --> 00:21:58.400\nI'm going to execute, verify that the\ncommand is completed successfully here.\n\n378\n00:21:58.400 --> 00:22:03.201\nAnd like always, I always like\nmaking sure, before I say of course\n\n379\n00:22:03.201 --> 00:22:07.930\nit's gonna work, I verify that\nthe function is actually there.\n\n380\n00:22:09.370 --> 00:22:12.310\nI cannot tell you how many times\nI've tried to run something and\n\n381\n00:22:12.310 --> 00:22:14.930\nthen had to finally go back and\nadmit something.\n\n382\n00:22:14.930 --> 00:22:18.140\nApparently I didn't create it right,\nand it's not where I think it is.\n\n383\n00:22:18.140 --> 00:22:21.950\nSo this time I'm gonna go into\nthe table value functions.\n\n384\n00:22:21.950 --> 00:22:23.970\nAnd I should see it right here.\n\n385\n00:22:23.970 --> 00:22:26.350\nSo remember that earlier when\nwe did the scalar functions,\n\n386\n00:22:26.350 --> 00:22:28.600\nwe saw underneath the scalar.\n\n387\n00:22:28.600 --> 00:22:29.920\nHere.\n\n388\n00:22:29.920 --> 00:22:32.760\nAnd now we're actually seeing\nit underneath this one,\n\n389\n00:22:32.760 --> 00:22:34.980\nwhich is the table valued\nfunctions as well.\n\n390\n00:22:36.350 --> 00:22:37.010\nOkay?\n\n391\n00:22:37.010 --> 00:22:39.990\nSo in this sense, it is separating it out,\n\n392\n00:22:39.990 --> 00:22:43.130\nit is keeping track of where\neverything is actually going.\n\n393\n00:22:43.130 --> 00:22:47.810\nSo I went ahead and ran this function for\nus and we should now be able to test it.\n\n394\n00:22:47.810 --> 00:22:49.225\nNow in the testing here.\n\n395\n00:22:54.982 --> 00:22:56.091\nIn the FROM clause,\n\n396\n00:22:56.091 --> 00:23:00.590\nnotice that I didn't actually have\nto go to another WHERE statement.\n\n397\n00:23:00.590 --> 00:23:06.030\nSo this is another advantage that you\nhave from the table valued function.\n\n398\n00:23:06.030 --> 00:23:10.290\nNormally, when we actually see results,\nright, and we wanna manipulate\n\n399\n00:23:10.290 --> 00:23:13.830\nthose results, we normally have to\ndo it inside of the WHERE clause.\n\n400\n00:23:13.830 --> 00:23:17.210\nNotice that I can actually take\nthis table valued function and\n\n401\n00:23:17.210 --> 00:23:20.090\ntreat it as a table,\nwhich is kind of the key.\n\n402\n00:23:20.090 --> 00:23:24.760\nAnd now I select my limitation,\nnow I said between 10 and 20 here, so\n\n403\n00:23:24.760 --> 00:23:28.800\nI have my low quantity value and\nI have my high quantity value.\n\n404\n00:23:28.800 --> 00:23:31.120\nThis is actually gonna be represented.\n\n405\n00:23:31.120 --> 00:23:32.300\nAnd then I execute it.\n\n406\n00:23:34.410 --> 00:23:39.920\nAnd now, if I scroll up,\nall of my entire order quantity\n\n407\n00:23:41.650 --> 00:23:45.280\nshould be represented in here,\ntoo, between 10 and 20.\n\n408\n00:23:45.280 --> 00:23:50.030\nSo I do not have to actually change that,\nbut I can very easily.\n\n409\n00:23:50.030 --> 00:23:51.730\nI can change those numbers\nto whatever I want to.\n\n410\n00:23:51.730 --> 00:23:57.000\nBut at this point, we can see where we can\nactually take the results of this given\n\n411\n00:23:57.000 --> 00:24:02.192\nhere, whatever the results are, And\nhave it return, and I can also use it from\n\n412\n00:24:02.192 --> 00:24:07.560\nthe From statement, oops, I'm actually\ngone too far up, sorry, there we go.\n\n413\n00:24:07.560 --> 00:24:10.540\nI was like, where is that from,\nright here.\n\n414\n00:24:10.540 --> 00:24:14.370\nSo instead it's actually\nfrom the function itself, so\n\n415\n00:24:14.370 --> 00:24:17.590\nthe function itself is calling\nup only what it needs.\n\n416\n00:24:17.590 --> 00:24:19.800\nAnd then I'm providing a filter for it.\n\n417\n00:24:19.800 --> 00:24:22.560\nSo we're getting parameters, and\nwe're actually calling it directly from\n\n418\n00:24:22.560 --> 00:24:27.410\na function and not directly from\nthe actual table data itself.\n\n419\n00:24:27.410 --> 00:24:30.580\nSo those are very good possibilities\nthat we can have, too.\n\n420\n00:24:31.660 --> 00:24:36.220\nNow, there is an ability to do what\nthey call a multi valued function,\n\n421\n00:24:36.220 --> 00:24:38.630\nwhich is another table function, as well.\n\n422\n00:24:38.630 --> 00:24:40.390\nBut it's really not different.\n\n423\n00:24:40.390 --> 00:24:45.420\nWhen you take a look at this, it's\nactually identical except for one thing.\n\n424\n00:24:45.420 --> 00:24:49.730\nAnd that is, when we actually get right,\nlet me scroll back down here.\n\n425\n00:24:52.320 --> 00:24:57.020\nWhere we're actually telling\nit to return a variable\n\n426\n00:24:57.020 --> 00:25:00.040\nas a table, is what we're doing.\n\n427\n00:25:00.040 --> 00:25:04.940\nAnd we're actually defining our\nSELECT statement as a variable.\n\n428\n00:25:06.100 --> 00:25:10.290\nSo instead we're actually declaring\nthis whole thing as a single variable\n\n429\n00:25:10.290 --> 00:25:12.230\nthat is called return table.\n\n430\n00:25:12.230 --> 00:25:17.540\nAnd it's actually gonna call this up and\nthat's what will happen instead.\n\n431\n00:25:17.540 --> 00:25:20.980\nSo it's not that it's that\nmuch of a difference here.\n\n432\n00:25:20.980 --> 00:25:25.400\nWe're still using the same low\nquantity and high quantity.\n\n433\n00:25:25.400 --> 00:25:28.850\nWe're just trying to make it\na little more compact instead,\n\n434\n00:25:28.850 --> 00:25:32.540\nby returning it as a symbol variable then.\n\n435\n00:25:32.540 --> 00:25:34.350\nAnd then that way when we verify it,\n\n436\n00:25:34.350 --> 00:25:37.180\nlemme show you it's not any\nreally very much difference here.\n\n437\n00:25:38.220 --> 00:25:42.660\nI'm absolutely gonna call it up from\nthe same idea of the variable I created,\n\n438\n00:25:42.660 --> 00:25:44.035\nI just put a 2 here on the end.\n\n439\n00:25:44.035 --> 00:25:45.810\nCuz as I looked at it,\n\n440\n00:25:45.810 --> 00:25:49.800\nI realized it's not really that different\nfrom what we were just seeing here.\n\n441\n00:25:49.800 --> 00:25:53.710\nIt really is just a matter of a couple\nof words more than anything else.\n\n442\n00:25:53.710 --> 00:25:55.400\nAnd that's what we're\nactually seeing here.\n\n443\n00:25:55.400 --> 00:25:59.040\nAs we run that, it should give\nus that same exact result here.\n\n444\n00:25:59.040 --> 00:26:02.530\nIt's just another way to do the same\nthing as the inline function.\n\n445\n00:26:02.530 --> 00:26:06.110\nYou instead, again, just say hey, look,\nall this stuff we're that actually gonna\n\n446\n00:26:06.110 --> 00:26:09.510\ndo, we're just return it as a variable,\nand then we'll call it up again.\n\n447\n00:26:09.510 --> 00:26:10.610\nBe able to do that.\n\n448\n00:26:10.610 --> 00:26:14.370\nSo very much just some things that\nare supposed to be designed to\n\n449\n00:26:14.370 --> 00:26:17.106\nhelp us to write queries\na little bit more efficiently.\n\n450\n00:26:17.106 --> 00:26:21.580\nTo be able to actually reuse code instead\nof having type up everything over and\n\n451\n00:26:21.580 --> 00:26:22.730\nover again.\n\n452\n00:26:22.730 --> 00:26:26.400\nFunctions are really neat and\ncan really save you a lot of time.\n\n453\n00:26:26.400 --> 00:26:29.490\nBut it does take a bit of time to\nunderstand the logic behind it and\n\n454\n00:26:29.490 --> 00:26:32.208\nactually run it so\njust take some time learn about it.\n\n455\n00:26:32.208 --> 00:26:35.760\nYou're probably gonna see it more\noften in a production database than\n\n456\n00:26:35.760 --> 00:26:37.250\njust about any of the other\nthings that we've seen.\n\n457\n00:26:37.250 --> 00:26:40.047\nEspecially the manual typing that\nwe tend to see a lot of times.\n\n458\n00:26:40.047 --> 00:26:43.875\nBut just realize that they are there for\nyou to take advantage of.\n\n459\n00:26:43.875 --> 00:26:47.015\nSo, you might as well use\nthe tools that SQL Server says,\n\n460\n00:26:47.015 --> 00:26:48.995\nwe can work with this\na lot more than you think.\n\n461\n00:26:48.995 --> 00:26:51.975\n>> That's right, functions are our\nfriends, ladies and gentlemen.\n\n462\n00:26:51.975 --> 00:26:54.165\nSo, like Ronnie said,\nlearn how to use them.\n\n463\n00:26:54.165 --> 00:26:57.405\nUtilize them in your production\nenvironments because they're gonna\n\n464\n00:26:57.405 --> 00:26:58.985\nsave you a lot of time and effort.\n\n465\n00:26:58.985 --> 00:27:04.210\nA little bit more on the front end, but\na whole less time on the back end when you\n\n466\n00:27:04.210 --> 00:27:07.070\nget to reuse those things over and\nover, it's very very nice.\n\n467\n00:27:07.070 --> 00:27:10.630\nThat being said, Ronnie, do we have\nanything else when it comes to functions?\n\n468\n00:27:10.630 --> 00:27:13.460\n>> Well remember that this is not\nthe first time we've covered it.\n\n469\n00:27:13.460 --> 00:27:14.720\nIt is pretty much the key, so\n\n470\n00:27:14.720 --> 00:27:19.020\nthroughout our entire series here you\nmight've seen a function or two mentioned.\n\n471\n00:27:19.020 --> 00:27:22.160\nThe table function is definitely\none you've seen mentioned, and\n\n472\n00:27:22.160 --> 00:27:25.810\nof course the built in functions,\nwe've also used those too.\n\n473\n00:27:25.810 --> 00:27:27.460\nSo examine the whole thing,\n\n474\n00:27:27.460 --> 00:27:30.310\njust realize where they're going\nto be most valuable to you.\n\n475\n00:27:30.310 --> 00:27:33.190\nTake a look at the syntax and the\nstructure, that's actually gonna be key,\n\n476\n00:27:33.190 --> 00:27:35.320\nespecially when getting ready for\nthe exam.\n\n477\n00:27:35.320 --> 00:27:38.280\nAnd understand the differences\nbetween what we're talking about,\n\n478\n00:27:38.280 --> 00:27:41.210\nthe idea of the non deterministic\nversus the deterministic.\n\n479\n00:27:41.210 --> 00:27:42.950\nMake sure you actually\ntake a look at that, and\n\n480\n00:27:42.950 --> 00:27:46.540\nof course the difference between\nan actual user defined function.\n\n481\n00:27:46.540 --> 00:27:50.910\nThat's part of the scalar function,\nand the table valued functions,\n\n482\n00:27:50.910 --> 00:27:53.630\nI couldn't remember how to say\nvaried function, variable function.\n\n483\n00:27:53.630 --> 00:27:55.860\nBut table valued functions as well.\n\n484\n00:27:55.860 --> 00:27:58.630\nThat's actually a lot of information for\nus to just try and\n\n485\n00:27:58.630 --> 00:28:00.760\ncram down this first time looking at it.\n\n486\n00:28:00.760 --> 00:28:03.990\nBut you'll see that we've mentioned\nsome of these throughout the entirety of\n\n487\n00:28:03.990 --> 00:28:05.120\nthe series here.\n\n488\n00:28:05.120 --> 00:28:07.680\nSo just go back, and now, hopefully,\n\n489\n00:28:07.680 --> 00:28:10.260\nyou have an anchor to hook,\nyeah, I remember that.\n\n490\n00:28:10.260 --> 00:28:12.650\nAnd go back and see those shows now.\n\n491\n00:28:12.650 --> 00:28:13.790\nEven if they didn't make sense then,\n\n492\n00:28:13.790 --> 00:28:15.690\nhopefully they make a little\nbit more sense now.\n\n493\n00:28:15.690 --> 00:28:17.080\n>> All right.\nWell, thanks a lot, Ronnie.\n\n494\n00:28:17.080 --> 00:28:21.480\nWe do appreciate your wisdom and\nexpertise and and imparting that into us.\n\n495\n00:28:21.480 --> 00:28:24.100\nHopefully you guys have gotten\na lot out of this episode, but\n\n496\n00:28:24.100 --> 00:28:26.690\nour clock has ticked its last tock for\nthis one.\n\n497\n00:28:26.690 --> 00:28:27.540\nSo we're gonna go ahead and\n\n498\n00:28:27.540 --> 00:28:31.040\nsign off for ITProTV,\nI've been your host Daniel Lowrie.\n\n499\n00:28:31.040 --> 00:28:31.800\n>> And I'm Ronnie Wong.\n\n500\n00:28:31.800 --> 00:28:33.910\n>> And we'll see you next time.\n\n501\n00:28:33.910 --> 00:28:39.109\n[NOISE]\n\n",
          "vimeoId": "166549545"
        }
      ],
      "title": "Modify data"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Ronnie introduce you to optimization queries. They begin by explaining the 5 query execution phases. Next, they go over the two types of statistics, TIME and IO, giving examples of both.",
          "length": "1767",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-1-optimize_queries-051216-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-1-optimize_queries-051216-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-1-optimize_queries-051216-1-sm.jpg",
          "title": "Optimize Queries",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC].\n\n2\n00:00:12.074 --> 00:00:17.784\nAll right, greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:17.784 --> 00:00:20.505\nI am your host Daniel Lowrie and\nin today's episode,\n\n4\n00:00:20.505 --> 00:00:25.350\nwe're continuing on with our Microsoft\nSQL Server 2014 and the querying thereof.\n\n5\n00:00:25.350 --> 00:00:29.100\nJoining me back in the studio again to\nlend his expertise on the very topic.\n\n6\n00:00:29.100 --> 00:00:32.960\nAnd our endeavor as our mentor is\nour good friend, Mr. Ronnie Wong.\n\n7\n00:00:32.960 --> 00:00:33.940\nRonnie, welcome back sir.\n\n8\n00:00:33.940 --> 00:00:34.640\nWe're glad to have you.\n\n9\n00:00:34.640 --> 00:00:35.740\nHow's it going today?\n\n10\n00:00:35.740 --> 00:00:36.610\n>> It's going great.\n\n11\n00:00:36.610 --> 00:00:41.510\nWe're continuing on to take a look at more\nof the elements inside of SQL Server 2014.\n\n12\n00:00:41.510 --> 00:00:46.330\nOur goal today though is actually\ndo better than just querying\n\n13\n00:00:46.330 --> 00:00:48.650\nthe SQL Server to get\ninformation out of it.\n\n14\n00:00:48.650 --> 00:00:54.150\nBut it is the idea here of optimizing our\nquerying, so it actually performs better.\n\n15\n00:00:54.150 --> 00:00:58.390\nNow, in the sense of everything that I've\nbeen doing during this entire series,\n\n16\n00:00:58.390 --> 00:01:00.950\nthe optimization doesn't really matter.\n\n17\n00:01:00.950 --> 00:01:02.920\nAnd when I say that,\n\n18\n00:01:02.920 --> 00:01:06.680\nthe reason why is that I'm actually\non a test SQL Server itself.\n\n19\n00:01:06.680 --> 00:01:10.200\nIt's not running a production\ndatabase in the background,\n\n20\n00:01:10.200 --> 00:01:14.420\npeople aren't hitting it at all\nhours of the day, 24 hours a day.\n\n21\n00:01:14.420 --> 00:01:18.120\nAnd it's not actually dependent,\nin other words,\n\n22\n00:01:18.120 --> 00:01:21.200\nnobody actually depends\non that SQL Server.\n\n23\n00:01:21.200 --> 00:01:24.490\nTo get their job done and\nto make sure orders go out.\n\n24\n00:01:24.490 --> 00:01:28.380\nSo the SQL server I'm running on again,\nis actually just in a testing environment.\n\n25\n00:01:28.380 --> 00:01:29.900\nAnd you're going, I knew that, Ronnie.\n\n26\n00:01:29.900 --> 00:01:31.110\nWell, that's fine.\n\n27\n00:01:31.110 --> 00:01:33.620\nSo that's why a lot of the things\nthat we've been doing,\n\n28\n00:01:33.620 --> 00:01:35.860\nwe haven't actually optimized at all.\n\n29\n00:01:35.860 --> 00:01:39.680\nBut once you get into\na production environment in which\n\n30\n00:01:39.680 --> 00:01:43.820\neverybody relies on that SQL Server\ndoing what it needs to do.\n\n31\n00:01:43.820 --> 00:01:47.060\nWell, that's when we\nhave to be more careful\n\n32\n00:01:47.060 --> 00:01:50.390\nabout the way that we query\nthe SQL Server itself.\n\n33\n00:01:50.390 --> 00:01:52.340\nSo that we can actually optimize it,\n\n34\n00:01:52.340 --> 00:01:56.640\nmake it much more efficient in terms that\nare querying and the actions that we do.\n\n35\n00:01:56.640 --> 00:02:00.520\nSo that everybody has a chance\nto actually hit that server and\n\n36\n00:02:00.520 --> 00:02:02.810\nbe able to get the information\nout that they need.\n\n37\n00:02:02.810 --> 00:02:06.530\nIn the time and\nperformance it takes to get that out too.\n\n38\n00:02:06.530 --> 00:02:10.190\n>> Ronnie, really quickly,\nwhen you say optimizing, do you mean that.\n\n39\n00:02:10.190 --> 00:02:15.940\nThe server itself is not running optimally\nwhen we query it in anyway, shape or form?\n\n40\n00:02:15.940 --> 00:02:19.230\nOr do you mean that we are going\nto structure our queries, so\n\n41\n00:02:19.230 --> 00:02:23.910\nthat they more optimally run\nto make better performance?\n\n42\n00:02:23.910 --> 00:02:27.220\n>> Yes and yes,\nit is what I'm saying here.\n\n43\n00:02:27.220 --> 00:02:29.500\nNow the very fact is\nat the very beginning,\n\n44\n00:02:29.500 --> 00:02:33.320\nit believes it knows how to do things\nthe way that it knows how to do.\n\n45\n00:02:33.320 --> 00:02:37.170\nAnd don't get me wrong, the guys over\nat Microsoft, they did a great job\n\n46\n00:02:37.170 --> 00:02:40.750\nat making sure that it tries to\nrun as efficiently as possible.\n\n47\n00:02:40.750 --> 00:02:43.940\nAnd brings us everything\nthat we actually need to do\n\n48\n00:02:43.940 --> 00:02:46.788\nto make it run optimally\nas much as possible.\n\n49\n00:02:46.788 --> 00:02:50.330\nBut even then,right, it doesn't\naccount for every possibility and\n\n50\n00:02:50.330 --> 00:02:52.480\nevery scenario that's\nout there in the world.\n\n51\n00:02:52.480 --> 00:02:54.340\nIt just says here's what\nwe believe is gonna fit.\n\n52\n00:02:54.340 --> 00:02:56.710\nWell, just by every scenario\nthat we can think of.\n\n53\n00:02:56.710 --> 00:02:59.520\nBut I'm pretty sure that there are people\nout there that can actually run it\n\n54\n00:02:59.520 --> 00:03:00.109\nin a scenario.\n\n55\n00:03:00.109 --> 00:03:02.434\nThat Microsoft hasn't thought about and\n\n56\n00:03:02.434 --> 00:03:05.460\nthat may actually make\nit work less optimally.\n\n57\n00:03:05.460 --> 00:03:09.640\nThe same thing also because we tend\nto learn querying from well however,\n\n58\n00:03:09.640 --> 00:03:11.460\nwe learned querying, right?\n\n59\n00:03:11.460 --> 00:03:14.419\nSo if you're actually learning\nquerying from the perspective of\n\n60\n00:03:15.540 --> 00:03:18.190\nsomebody that's an expert at SQL querying.\n\n61\n00:03:18.190 --> 00:03:20.070\nThat has known it for years and years and\n\n62\n00:03:20.070 --> 00:03:24.060\nyears, there are still some things that\nyou might do a little bit differently.\n\n63\n00:03:24.060 --> 00:03:28.230\nThat are not optimal for let's say\nSQL Server 2014, but do they still work?\n\n64\n00:03:28.230 --> 00:03:33.910\nYes, okay, so but learning about SQL\n2014 and knowing some of those things.\n\n65\n00:03:33.910 --> 00:03:37.160\nMay help you to modify the way\nthat you write queries,\n\n66\n00:03:37.160 --> 00:03:40.860\nthat will actually help you out to\noptimize that a little bit more as well.\n\n67\n00:03:41.860 --> 00:03:46.390\nIn developing queries, we can actually\nwrite our queries a little bit better.\n\n68\n00:03:46.390 --> 00:03:50.210\nAnd also,\nwith the way that SQL ends up working,\n\n69\n00:03:50.210 --> 00:03:53.190\nin the background there is what\nthey call the SQL Optimizer.\n\n70\n00:03:53.190 --> 00:03:54.261\nRight, in other words,\n\n71\n00:03:54.261 --> 00:03:57.579\nit's actually designed to take all those\nelements that you and I would take.\n\n72\n00:03:57.579 --> 00:04:00.140\nAnd try and\noptimize it as much as possible.\n\n73\n00:04:00.140 --> 00:04:04.020\nAnd to be able to do that, right,\nit actually works very well.\n\n74\n00:04:04.020 --> 00:04:05.310\nBut there are times though,\n\n75\n00:04:05.310 --> 00:04:08.680\nwhen you start working through all\nthe stuff that you're gonna work through.\n\n76\n00:04:08.680 --> 00:04:11.540\nYou may realize that you\nwanted to do it a certain way\n\n77\n00:04:11.540 --> 00:04:13.380\nbecause of the way that it performs.\n\n78\n00:04:13.380 --> 00:04:15.450\nOr you just wanted to do it that way,\n\n79\n00:04:15.450 --> 00:04:18.290\nbecause that's the way that\nyou have it actually in mind.\n\n80\n00:04:18.290 --> 00:04:20.880\nOr the way that you know\nit should be run and\n\n81\n00:04:20.880 --> 00:04:24.380\nthe SQL Optimizer essentially\nis like an advisor, right?\n\n82\n00:04:24.380 --> 00:04:28.010\nIt says, here's how you should do it,\nbut yet, you might go and look,\n\n83\n00:04:28.010 --> 00:04:29.720\nI really want it done this way.\n\n84\n00:04:29.720 --> 00:04:32.240\nRegardless of the way\nthe SQL Optimizer does,\n\n85\n00:04:32.240 --> 00:04:35.600\nyou have to actually know how to\nactually override that if you need to.\n\n86\n00:04:35.600 --> 00:04:39.640\nSo the idea has to do both in\nthe idea of tuning, not only for\n\n87\n00:04:39.640 --> 00:04:42.750\nthe individual SQL query or himself.\n\n88\n00:04:42.750 --> 00:04:46.870\nBut also some of the background\ndefault ways that we're talking about\n\n89\n00:04:46.870 --> 00:04:50.190\nin which the SQL Server\nactually ends up working.\n\n90\n00:04:50.190 --> 00:04:54.870\nSo where do we begin when we start\nto talk about the concept here\n\n91\n00:04:54.870 --> 00:04:57.780\nof optimizing the querying\nthat we need to do?\n\n92\n00:04:57.780 --> 00:05:00.690\nWell, it all begins with of course,\njust a foundation,\n\n93\n00:05:00.690 --> 00:05:06.000\nright, of understanding of how the SQL\nquerying phases actually do work.\n\n94\n00:05:06.000 --> 00:05:08.460\nSo what I've done is I've\ncreated a diagram and\n\n95\n00:05:08.460 --> 00:05:10.320\nI hope that actually helps us out.\n\n96\n00:05:10.320 --> 00:05:14.310\nTo understand the processing order that we\nhave to actually go through when you and\n\n97\n00:05:14.310 --> 00:05:15.690\nI actually generate a query.\n\n98\n00:05:15.690 --> 00:05:18.240\nSo let's go ahead and\ntake a look at my machine here.\n\n99\n00:05:18.240 --> 00:05:22.590\nAnd that will give us the diagram, so that\nwe can see it a little bit better, okay?\n\n100\n00:05:22.590 --> 00:05:27.190\nSo there's actually five, I'm about to\nsay six and I'm looking at it, it's five.\n\n101\n00:05:27.190 --> 00:05:31.060\nThere's actually five different\nphases when we start to actually\n\n102\n00:05:31.060 --> 00:05:34.190\nsay that a query has to be executed, okay?\n\n103\n00:05:34.190 --> 00:05:36.920\nSo when you and\nI end up coming up with a query and\n\n104\n00:05:36.920 --> 00:05:42.040\nwe type it inside of the querying window\nthat we have so that we can execute it.\n\n105\n00:05:42.040 --> 00:05:44.340\nWell, when we started to\ntake a look at it, right?\n\n106\n00:05:44.340 --> 00:05:47.905\nWell, the first thing that we're doing\nis we're actually providing that\n\n107\n00:05:47.905 --> 00:05:52.170\nTransact-SQL coding over here\non the left-hand side, okay?\n\n108\n00:05:52.170 --> 00:05:55.440\nSo when we do that, we're making\nthe statements that we're actually doing,\n\n109\n00:05:55.440 --> 00:05:58.110\neverything's actually fine, okay?\n\n110\n00:05:58.110 --> 00:06:00.130\nAs long as everything's good, we're okay.\n\n111\n00:06:00.130 --> 00:06:02.510\nNow, how do we know\nthat everything's good?\n\n112\n00:06:02.510 --> 00:06:06.400\nWell, that's when it comes into\nthe second stage of parsing.\n\n113\n00:06:06.400 --> 00:06:12.530\nBecause SQL Server absolutely knows all\nthe rules of SQL, as well as Transact-SQL.\n\n114\n00:06:12.530 --> 00:06:17.560\nIt knows whether or not you've actually\nchecked, in other words, your syntax.\n\n115\n00:06:17.560 --> 00:06:22.040\nYour grammar or whatever you wanna call\nit here is right in the order that it is.\n\n116\n00:06:22.040 --> 00:06:26.490\nIf it's not right, well, essentially\nSQL Server says, let me check that and\n\n117\n00:06:26.490 --> 00:06:28.860\nverify that you've got all\nthose elements in there.\n\n118\n00:06:28.860 --> 00:06:32.370\nThat will allow you to run\na successful query, okay?\n\n119\n00:06:32.370 --> 00:06:37.320\nNow, once the actual SQL Server\ntakes your particular statements and\n\n120\n00:06:37.320 --> 00:06:42.220\nit says this is good, clean and\ngreat syntax that we need.\n\n121\n00:06:42.220 --> 00:06:45.850\nWell, then it has to be able to do things,\nright?\n\n122\n00:06:45.850 --> 00:06:49.810\nThat can match that syntax\nup to actual objects.\n\n123\n00:06:49.810 --> 00:06:53.820\nNow, when we start to talk\nabout stuff like that, right?\n\n124\n00:06:53.820 --> 00:06:56.150\nEverything that we're actually\ngonna talk about here,\n\n125\n00:06:56.150 --> 00:07:00.190\nokay, is essentially planned out first,\nokay?\n\n126\n00:07:00.190 --> 00:07:03.197\nIt's not like I sit and go well,\nDaniel, I want to look,\n\n127\n00:07:03.197 --> 00:07:06.850\nwe talked about the idea here of\nmaking knives a lot of times, right?\n\n128\n00:07:06.850 --> 00:07:09.800\nIf I wanna make a knife, I don't just\ngo out and grab a piece of metal and\n\n129\n00:07:09.800 --> 00:07:11.510\njust start hammering at it.\n\n130\n00:07:11.510 --> 00:07:15.090\nWe need to come up with a plan and\nwhen you think about it, right?\n\n131\n00:07:15.090 --> 00:07:17.650\nWriting down that information first and\n\n132\n00:07:17.650 --> 00:07:20.850\ngoing, here's the steps,\nhere's what I need to make sure.\n\n133\n00:07:20.850 --> 00:07:23.460\nSo if I sit there and go look,\nthis is what I wanna do,\n\n134\n00:07:23.460 --> 00:07:25.380\nI make that statement that I wanna do it.\n\n135\n00:07:25.380 --> 00:07:27.210\nI go ahead and I put it into a plan.\n\n136\n00:07:27.210 --> 00:07:29.280\nHopefully it's a logical plan.\n\n137\n00:07:29.280 --> 00:07:32.280\nAnd I might go, Daniel, check this out,\nis there any step that I'm missing?\n\n138\n00:07:32.280 --> 00:07:34.070\nThat's like the parsing phase.\n\n139\n00:07:34.070 --> 00:07:38.630\nWell, once we do that, the binding at\nthis point is actually making sure\n\n140\n00:07:38.630 --> 00:07:42.570\nthat we understand what elements are\nactually gonna be needed from this plan.\n\n141\n00:07:42.570 --> 00:07:45.500\nSo it's like taking the plan and\nthen saying all right, so\n\n142\n00:07:45.500 --> 00:07:47.650\nif you actually need to do this.\n\n143\n00:07:47.650 --> 00:07:49.170\nRonnie, inside of the SQL Server,\n\n144\n00:07:49.170 --> 00:07:52.680\nyou'll need to also connect\nto this object over here.\n\n145\n00:07:52.680 --> 00:07:54.990\nAnd the way it does it is,\nit checks the name resolutions.\n\n146\n00:07:54.990 --> 00:07:57.640\nDid I call upon the proper schema?\n\n147\n00:07:57.640 --> 00:07:59.788\nDid I call upon the proper table?\n\n148\n00:07:59.788 --> 00:08:03.715\nAnd then once it does that, it then\ngoes ahead and marks it off and says,\n\n149\n00:08:03.715 --> 00:08:05.619\nhere it is and it checks the order.\n\n150\n00:08:05.619 --> 00:08:08.239\nIt checks everything\nelse there technically,\n\n151\n00:08:08.239 --> 00:08:11.194\nthey call it creating\nthe parsing tree at this point.\n\n152\n00:08:11.194 --> 00:08:13.970\nSo it actually knows exactly what to do.\n\n153\n00:08:13.970 --> 00:08:17.240\nAnd it's not actually hitting\nany of the database yet,\n\n154\n00:08:17.240 --> 00:08:19.740\nas far as retrieving information, right?\n\n155\n00:08:19.740 --> 00:08:23.580\nWhat we're actually doing at this point is\nsaying look, logically, your steps have to\n\n156\n00:08:23.580 --> 00:08:26.710\nbe able to match something that,\nwhat, the SQL server has to do.\n\n157\n00:08:26.710 --> 00:08:28.510\nAnd I need to bind that together and\n\n158\n00:08:28.510 --> 00:08:32.560\nhence the idea of binding at\nthat point as well, okay.\n\n159\n00:08:32.560 --> 00:08:37.170\nNow, after that though here's where it\nactually gets a little bit tricky, okay?\n\n160\n00:08:37.170 --> 00:08:43.290\nOnce the binding phase ends up happening,\nit says, Ronnie you're a query, I\n\n161\n00:08:43.290 --> 00:08:47.878\ncan match it up to these objects logically\nthat I'm seeing inside of the SQL server.\n\n162\n00:08:47.878 --> 00:08:50.900\nNow, the SQL server says all right,\n\n163\n00:08:50.900 --> 00:08:55.260\nquery analyzer, not analyze optimizer,\nanalyzer is something else.\n\n164\n00:08:56.520 --> 00:09:01.780\nOptimizer here, let's go ahead and see how\nwe can actually make this more optimal.\n\n165\n00:09:01.780 --> 00:09:06.030\nNow this is where it gets a little\nbit scary as far as the very\n\n166\n00:09:06.030 --> 00:09:10.100\npossibility of queries that you and\nI can end up doing, okay.\n\n167\n00:09:10.100 --> 00:09:15.128\nOne of the factors that we have to\nactually wonder is that even though I know\n\n168\n00:09:15.128 --> 00:09:20.100\nhow to actually query something out\nof one table, you might actually have\n\n169\n00:09:20.100 --> 00:09:23.271\nlooked at any of the queries that we've\ndone in the entire series here and\n\n170\n00:09:23.271 --> 00:09:25.440\nsaid, I wouldn't have done it that way.\n\n171\n00:09:25.440 --> 00:09:28.490\nYou might have absolutely done that,\nand that's perfectly fine.\n\n172\n00:09:28.490 --> 00:09:32.020\nWhat the optimizer does is the same\nthing that you're doing, okay?\n\n173\n00:09:32.020 --> 00:09:36.110\nLooking at my particular query and\nthe plan that I have to query it, and\n\n174\n00:09:36.110 --> 00:09:40.390\nthen going through and\nwhat it creates are different options.\n\n175\n00:09:40.390 --> 00:09:43.810\nSo just like you would have looked\nat my code and said, Ronnie,\n\n176\n00:09:43.810 --> 00:09:45.190\nthat's terrible coding.\n\n177\n00:09:45.190 --> 00:09:47.650\nAnd don't get me wrong,\nthat's very possible.\n\n178\n00:09:47.650 --> 00:09:49.850\nYou might have looked at it that way.\n\n179\n00:09:49.850 --> 00:09:54.190\nThe optimizer said the same thing,\nand what it is a little bit above and\n\n180\n00:09:54.190 --> 00:09:55.160\nbeyond, right?\n\n181\n00:09:55.160 --> 00:10:00.290\nJust between you and me, the optimizer\nsays, let me go ahead and do this.\n\n182\n00:10:00.290 --> 00:10:05.190\nLet me come up with multiple\npossibilities here, okay?\n\n183\n00:10:05.190 --> 00:10:09.500\nNow when we talk about multiple\npossibilities, what I really mean,\n\n184\n00:10:09.500 --> 00:10:14.550\nthough, Daniel, is every\npossibility it can to come up with\n\n185\n00:10:14.550 --> 00:10:17.840\nexactly what I'm looking for,\nbut every other option.\n\n186\n00:10:17.840 --> 00:10:21.890\n>> So it's running every scenario it\ncan think of to make this thing run and\n\n187\n00:10:21.890 --> 00:10:26.150\nto trying to determine whether or\nnot is the possible way to do it.\n\n188\n00:10:26.150 --> 00:10:29.130\n>> RIght, so\nit might look at it in different ways.\n\n189\n00:10:29.130 --> 00:10:32.790\nSo according to the way that\nSQL ends up working on this.\n\n190\n00:10:32.790 --> 00:10:36.765\nIs that it doesn't just take every\nsingle possibility combination, but\n\n191\n00:10:36.765 --> 00:10:41.010\nit takes everything that it can and it\nbases it on a couple of different things.\n\n192\n00:10:41.010 --> 00:10:46.100\nOne of course is, how your code is written\nand the efficiency level that it provides.\n\n193\n00:10:46.100 --> 00:10:48.610\nBut then the idea of execution time.\n\n194\n00:10:48.610 --> 00:10:51.790\nHow long would it actually take to run\nyour code versus how long it would take to\n\n195\n00:10:51.790 --> 00:10:53.570\nrun its code instead.\n\n196\n00:10:53.570 --> 00:10:55.500\nSo not just one timing element,\n\n197\n00:10:55.500 --> 00:10:58.800\nit's also the efficiency in\nthe way that things are called up.\n\n198\n00:10:58.800 --> 00:11:03.610\nAnd then what it does as far as\nthe optimizer goes, It says Ronnie,\n\n199\n00:11:03.610 --> 00:11:05.700\nI like your code, I'll run that one,\n\n200\n00:11:05.700 --> 00:11:08.120\ncuz that one seems to be\nthe most efficient way to do it.\n\n201\n00:11:08.120 --> 00:11:10.340\nOr it can say I found three or\n\n202\n00:11:10.340 --> 00:11:14.330\nfour other codes that are probably better\nthan yours and now I have to ask you to\n\n203\n00:11:14.330 --> 00:11:17.370\npick between those which one\nI'm going to choose to run.\n\n204\n00:11:17.370 --> 00:11:21.480\nSo this is where it becomes a little bit\nmore complex and beyond the scope of what\n\n205\n00:11:21.480 --> 00:11:25.210\nwe're going to be talking about, when we\ncan actually create different indexes.\n\n206\n00:11:25.210 --> 00:11:29.020\nBut even in that, it doesn't necessarily\nmean that the optimizer says,\n\n207\n00:11:29.020 --> 00:11:31.170\nRonnie you picked the best\nindex in the world.\n\n208\n00:11:31.170 --> 00:11:35.510\nIt can say, I created a couple of them and\nI think mine is better.\n\n209\n00:11:35.510 --> 00:11:37.230\nI'm gonna use that one instead.\n\n210\n00:11:37.230 --> 00:11:39.650\nAnd then when you look at the execution\nplan like we're gonna look at,\n\n211\n00:11:39.650 --> 00:11:41.530\nyou're gonna see that,\nyou're gonna say what,\n\n212\n00:11:41.530 --> 00:11:45.780\nthat wasn't what I wanted to run it on and\nit still chose to do it that way.\n\n213\n00:11:45.780 --> 00:11:49.830\nAnd that's because the optimizer\nis working in that fashion.\n\n214\n00:11:49.830 --> 00:11:52.760\nTrying to say I can do this if\nyou will just let me do it.\n\n215\n00:11:52.760 --> 00:11:55.640\nIf you will just leave it to me.\n\n216\n00:11:55.640 --> 00:11:59.540\nThe SQL sort of like Ronny,\ndon't mess around with this.\n\n217\n00:11:59.540 --> 00:12:04.220\nLeave it to me, and let me handle it and\nit will work, it will work just fine.\n\n218\n00:12:04.220 --> 00:12:06.390\nAnd of course finally\nit actually executes.\n\n219\n00:12:06.390 --> 00:12:09.090\nTakes that query and runs it now.\n\n220\n00:12:09.090 --> 00:12:13.610\nEverything that we're talking about\nhere operates in what is considered in\n\n221\n00:12:13.610 --> 00:12:18.540\nthe SQL database itself, the relational\nengine and my say is to logical\n\n222\n00:12:18.540 --> 00:12:23.430\noperation it is essentially\nthe entire plan that it plans out.\n\n223\n00:12:23.430 --> 00:12:27.820\nAnd it doesn't execute anything yet,\nuntil that final stage.\n\n224\n00:12:27.820 --> 00:12:30.470\nIt's at that final stage when\neverything is optimized.\n\n225\n00:12:30.470 --> 00:12:33.340\nAnd we now have an execution plan in hand.\n\n226\n00:12:33.340 --> 00:12:36.430\nDoes it then turn it over\nto the storage engine?\n\n227\n00:12:36.430 --> 00:12:38.390\nThe storage engine is where it now says,\n\n228\n00:12:38.390 --> 00:12:42.970\nall right, here is the table that\nyou go to retrieve this data.\n\n229\n00:12:44.870 --> 00:12:48.560\nBoy, networking and\nSQL querying is just coming together now.\n\n230\n00:12:48.560 --> 00:12:49.060\n[LAUGH]\n>> [LAUGH]\n\n231\n00:12:49.060 --> 00:12:51.580\n>> This is where you go to retrieve this\n\n232\n00:12:51.580 --> 00:12:55.200\ninformation from this table and\nthis is how you actually go and do it.\n\n233\n00:12:55.200 --> 00:12:59.240\nSo it actually, now,\nturns it over to that physical operation.\n\n234\n00:12:59.240 --> 00:13:03.500\nThat then says, what,\nretrieve a copy of those rows and\n\n235\n00:13:03.500 --> 00:13:08.030\nturn it into your result set\nis what we're gonna have.\n\n236\n00:13:08.030 --> 00:13:11.250\nSo everything in this\nparticular plan does happen.\n\n237\n00:13:11.250 --> 00:13:13.160\nNow, can we really separate out?\n\n238\n00:13:13.160 --> 00:13:14.440\nNo.\nThey go hand in hand.\n\n239\n00:13:14.440 --> 00:13:15.930\nIt is so seamless.\n\n240\n00:13:15.930 --> 00:13:20.400\nYou cannot separate out the relational\nengine versus the storage engine in terms\n\n241\n00:13:20.400 --> 00:13:25.320\nof this operation, but we can do it when\nwe're talking about how this is done.\n\n242\n00:13:25.320 --> 00:13:30.290\nNow it's very much something that we have\nto actually make sure that we understand\n\n243\n00:13:30.290 --> 00:13:34.880\nhere especially when getting ready for\nthat 461 exam.\n\n244\n00:13:34.880 --> 00:13:36.970\nI would make sure I know this.\n\n245\n00:13:38.210 --> 00:13:39.370\nKnow this order.\n\n246\n00:13:39.370 --> 00:13:43.350\nI do not know how to actually\nput it any more forcefully,\n\n247\n00:13:43.350 --> 00:13:44.800\nexcept by yelling it here.\n\n248\n00:13:44.800 --> 00:13:46.340\nAnd I don't need to yell at you.\n\n249\n00:13:46.340 --> 00:13:52.880\nBut make sure you understand this\nparticular order in its place here.\n\n250\n00:13:52.880 --> 00:13:56.870\nAnd know what actually comes after what\nand knows what might actually proceed\n\n251\n00:13:56.870 --> 00:14:00.980\nwhat, is kind of a good idea\nwhen getting ready for this.\n\n252\n00:14:00.980 --> 00:14:05.020\nSo just kind of realize that\nknowing that execution plan\n\n253\n00:14:05.020 --> 00:14:07.020\nis really where it becomes helpful.\n\n254\n00:14:07.020 --> 00:14:10.410\nIf you think about it,\na lot of times, you and\n\n255\n00:14:10.410 --> 00:14:15.720\nI can affect it right here,\nbeginning at the actual T-SQL.\n\n256\n00:14:15.720 --> 00:14:18.700\nOr some of the things that SQL builds in,\n\n257\n00:14:18.700 --> 00:14:22.900\nwe can affect it right here\nat the optimizing as well.\n\n258\n00:14:22.900 --> 00:14:25.670\nSo there are built in tools and\nwhen we're using the built in tools,\n\n259\n00:14:25.670 --> 00:14:30.390\nwe're probably affecting it either here at\noptimizing, or there at the actual T-SQL.\n\n260\n00:14:30.390 --> 00:14:34.360\nThe rest of the stuff, we're not really\ngonna affect too much, at least from what\n\n261\n00:14:34.360 --> 00:14:39.900\nwe're talking about in the terms of the\nquerying fundamentals level here, okay?\n\n262\n00:14:39.900 --> 00:14:44.540\nSo the reason why that's actually\nimportant is to know in this process\n\n263\n00:14:44.540 --> 00:14:45.990\nwhere things are actually happening and\n\n264\n00:14:45.990 --> 00:14:48.770\nthen figure out where can I\noptimize from this point?\n\n265\n00:14:48.770 --> 00:14:50.605\nWhat's actually slowing this down.\n\n266\n00:14:50.605 --> 00:14:56.475\nThis is kind of a key element for us and\nknowledge, especially for the exam.\n\n267\n00:14:56.475 --> 00:14:58.195\nSo when we start taking a look there,\n\n268\n00:14:58.195 --> 00:15:00.545\nthat's where we have to begin is\nthis fundamental of knowledge.\n\n269\n00:15:00.545 --> 00:15:02.487\n>> Wow, this is a really good thing for\nus to know.\n\n270\n00:15:02.487 --> 00:15:06.177\nIf we understand the process that the,\n\n271\n00:15:06.177 --> 00:15:09.377\nbasically from the beginning to the end,\nof how SQL is working,\n\n272\n00:15:09.377 --> 00:15:12.417\nhow we're interacting with it and\nthen the expected outcome.\n\n273\n00:15:12.417 --> 00:15:15.957\nAnd especially when it comes to\noptimization, we know that we've got at\n\n274\n00:15:15.957 --> 00:15:20.587\nleast two areas in which we can jump\non to to try to make them more optimal.\n\n275\n00:15:20.587 --> 00:15:22.240\nAnd that being said I guess the,\n\n276\n00:15:22.240 --> 00:15:26.810\none of the best places to start is with\nourselves, write really good queries.\n\n277\n00:15:26.810 --> 00:15:29.230\nAnd there is even some helps available for\n\n278\n00:15:29.230 --> 00:15:32.480\nus to make them run a little better\nthan we normally would, right Ronnie?\n\n279\n00:15:32.480 --> 00:15:34.250\n>> Right, yeah there's several of them.\n\n280\n00:15:34.250 --> 00:15:36.420\nBut let's go and\ntalk about just what Daniel said.\n\n281\n00:15:36.420 --> 00:15:39.080\nOne of the things that I mentioned, and I\nknow I've done this throughout the series,\n\n282\n00:15:39.080 --> 00:15:42.300\nand I still use it, right,\nis at the end of everything that I run\n\n283\n00:15:42.300 --> 00:15:46.300\nthe easiest way for me to verify\na SQL statement has run Is do what?\n\n284\n00:15:46.300 --> 00:15:49.800\nSelect, and then an asterisk,\nfrom whatever, okay.\n\n285\n00:15:49.800 --> 00:15:52.490\nAnd that just pulls up every single row,\nand\n\n286\n00:15:52.490 --> 00:15:54.880\nthen dumps it essentially onto the screen.\n\n287\n00:15:54.880 --> 00:15:59.780\nNow inside of a testing server here,\ngreat way to verify.\n\n288\n00:15:59.780 --> 00:16:04.336\nBut inside of a real production network,\nnever a great way to do that.\n\n289\n00:16:04.336 --> 00:16:07.622\nAnd so, any time you actually end\nup writing a select statement,\n\n290\n00:16:07.622 --> 00:16:09.972\na query that you're\nactually going to write.\n\n291\n00:16:09.972 --> 00:16:14.274\nThe recommendation's never to\nreally do that because that's one\n\n292\n00:16:14.274 --> 00:16:16.961\nof the most sub-optimal ways that you can\n\n293\n00:16:16.961 --> 00:16:21.590\nwrite a query is call up every\nsingle column inside of that table.\n\n294\n00:16:21.590 --> 00:16:23.970\nAnd then tell it to report everything for\n\n295\n00:16:23.970 --> 00:16:27.510\nyou, when what you really just\nneeded was just a small subset.\n\n296\n00:16:27.510 --> 00:16:31.820\nAnd what happens when you do that as\nfar as a sub-optimal idea to do, right?\n\n297\n00:16:31.820 --> 00:16:34.750\nIs that you're telling it, regardless\nof whether I need that information or\n\n298\n00:16:34.750 --> 00:16:35.860\nnot, return it.\n\n299\n00:16:35.860 --> 00:16:40.720\nAnd remember that eats up a bit of RAM,\nit eats up compute cycles, you name it.\n\n300\n00:16:40.720 --> 00:16:46.840\nIt actually does take some space onto,\ninside a SQL we call our pages,\n\n301\n00:16:46.840 --> 00:16:50.400\nthat we tend to run, and so\nyou do have a lot of things.\n\n302\n00:16:50.400 --> 00:16:52.320\nSo essentially,\nwe're talking about memory,\n\n303\n00:16:52.320 --> 00:16:54.420\nwe're talking about hard drive,\nwe're talking about CPU here.\n\n304\n00:16:54.420 --> 00:16:57.570\nAnd remember that as far as performance\nfactors go on a regular computer,\n\n305\n00:16:57.570 --> 00:16:59.920\nthe only thing that is missing\nis the networking side.\n\n306\n00:16:59.920 --> 00:17:02.900\nAnd if you're actually pulling that\nfrom a database that is not connected,\n\n307\n00:17:02.900 --> 00:17:03.850\nyou're hitting that.\n\n308\n00:17:03.850 --> 00:17:07.250\nSo if you actually run sub-optimal\nqueries in your database,\n\n309\n00:17:07.250 --> 00:17:10.740\nyou know the storage of it,\nexists somewhere else across a network.\n\n310\n00:17:10.740 --> 00:17:15.380\nYou're hitting it on CPU,\nRAM, hard drive as well as\n\n311\n00:17:15.380 --> 00:17:19.930\nthe idea of networking here,\nthe four main performance factors\n\n312\n00:17:19.930 --> 00:17:23.470\nthat can really influence the way\nthat SQL ends up working.\n\n313\n00:17:23.470 --> 00:17:27.210\nSo in this sense, one of the things\nthey say is look, don't do that, okay?\n\n314\n00:17:27.210 --> 00:17:31.550\nSo clearer step as far as something\nthat you and I can do right away.\n\n315\n00:17:31.550 --> 00:17:32.900\nSo what do we do instead?\n\n316\n00:17:32.900 --> 00:17:37.200\nWe limit, of course, the number of fields\nthat we're normally looking for, okay?\n\n317\n00:17:37.200 --> 00:17:40.190\nAnd we only actually look up the fields\nthat we need to look for, but\n\n318\n00:17:40.190 --> 00:17:43.850\nnot everything else, and\nthen try and filter it out.\n\n319\n00:17:43.850 --> 00:17:45.770\nNow, even from that point, right?\n\n320\n00:17:45.770 --> 00:17:48.270\nOnce you actually limit it to\nthe field you're looking for,\n\n321\n00:17:48.270 --> 00:17:52.180\nthey also recommend of course,\nalways using a wear clause or\n\n322\n00:17:52.180 --> 00:17:56.060\na having clause,\nif you're also grouping the information.\n\n323\n00:17:56.060 --> 00:17:59.130\nAnd that again is actually\nproviding more and more filtering.\n\n324\n00:17:59.130 --> 00:18:03.170\nSo that actually hits, once again,\nthe impact of it a little bit less.\n\n325\n00:18:03.170 --> 00:18:05.040\nNow, there's trade off, right.\n\n326\n00:18:05.040 --> 00:18:06.420\nThe more it has to filter,\n\n327\n00:18:06.420 --> 00:18:09.150\nthe more it has to actually do\nsome of the things to do it.\n\n328\n00:18:09.150 --> 00:18:13.130\nIt does hit, but the end result though\nis actually a better result for you and\n\n329\n00:18:13.130 --> 00:18:16.010\nwhat SQL considers a more optimized query.\n\n330\n00:18:16.010 --> 00:18:20.240\nSo, that's all I'm really gonna say as\nfar as you actually improving on that.\n\n331\n00:18:20.240 --> 00:18:23.980\nThe more experience that you have and\nthe more people you encounter\n\n332\n00:18:23.980 --> 00:18:27.580\nthat actually write SQL,\nthe better off you're gonna be.\n\n333\n00:18:27.580 --> 00:18:31.270\nCuz you're gonna learn more efficient\nways of doing things than just me saying,\n\n334\n00:18:31.270 --> 00:18:33.830\nmake sure you don't do this,\nmake sure you don't do this here.\n\n335\n00:18:33.830 --> 00:18:35.180\nYou learn it by observation.\n\n336\n00:18:35.180 --> 00:18:36.680\nYou learn it by actually experiencing and\n\n337\n00:18:36.680 --> 00:18:40.560\nseeing the code itself more\nthan me just telling you, okay.\n\n338\n00:18:40.560 --> 00:18:42.170\nNow, there's other things, of course,\n\n339\n00:18:42.170 --> 00:18:44.920\nthen that we have to actually\nhave to look out for, okay.\n\n340\n00:18:44.920 --> 00:18:49.090\nWhen we start trying to\nimpact our optimizing,\n\n341\n00:18:49.090 --> 00:18:52.680\nour queries here, one of the nest\nthat we can count on, of course,\n\n342\n00:18:52.680 --> 00:18:58.350\nis just plain old everyday statistics that\nyou and I can actually end up running.\n\n343\n00:18:58.350 --> 00:18:59.790\nAnd that's what we want to take a look at.\n\n344\n00:18:59.790 --> 00:19:03.260\nAll right, so, one of the things\nwe're gonna talk about, of course,\n\n345\n00:19:03.260 --> 00:19:04.670\nthen, is statistics, right?\n\n346\n00:19:04.670 --> 00:19:07.310\nThese plain old numbers that\nare really gonna help us.\n\n347\n00:19:07.310 --> 00:19:10.390\nNow, when we start taking a look at\nstatistics like we see here on the screen.\n\n348\n00:19:10.390 --> 00:19:12.110\nWe're gonna talk about two types.\n\n349\n00:19:12.110 --> 00:19:16.580\nOne is what we call statistics time,\nright here, and the other one, of course,\n\n350\n00:19:16.580 --> 00:19:18.640\nis gonna be statistics IO.\n\n351\n00:19:18.640 --> 00:19:23.970\nStatistics time is about actually\ntrying to tell us exactly how long and\n\n352\n00:19:23.970 --> 00:19:28.180\nhow much it's gonna take to make\nsure that the query is running.\n\n353\n00:19:28.180 --> 00:19:32.560\nAnd this is gonna display itself inside of\nthe messages when we run this result, and\n\n354\n00:19:32.560 --> 00:19:36.810\nthen let's take a look at the idea of\nthe statistics IO and see what happens.\n\n355\n00:19:36.810 --> 00:19:40.700\nNow, when you turn this thing on,\nas far statistics time goes,\n\n356\n00:19:40.700 --> 00:19:44.810\nthat will continue to run as\nlong as I have this window on,\n\n357\n00:19:44.810 --> 00:19:48.570\nunless you go ahead and\nalso tell it to turn off.\n\n358\n00:19:48.570 --> 00:19:52.120\nSo, what I'm also doing at this point\nis not only telling it to turn on and\n\n359\n00:19:52.120 --> 00:19:56.780\nhave a semicolon at the end, but also\nwhen the statistics should also go off.\n\n360\n00:19:56.780 --> 00:20:01.300\nIf not, every query that you'll run, it\nwill continue to run and that's fine, but\n\n361\n00:20:01.300 --> 00:20:04.800\nremember that the more information that\nyou generate, the less optimal your\n\n362\n00:20:04.800 --> 00:20:10.460\nqueries are going to be, so\nlet's go ahead and set that up as well.\n\n363\n00:20:10.460 --> 00:20:14.150\nSo I'm simply gonna highlight this and\nthen hit the Execute button.\n\n364\n00:20:14.150 --> 00:20:18.870\nAnd when I do that, let me see if we can\nzoom in just a little bit down here.\n\n365\n00:20:18.870 --> 00:20:21.840\nSo, we'll end up seeing\n\n366\n00:20:21.840 --> 00:20:25.690\ndown here towards the bottom where\nmy results actually are in place.\n\n367\n00:20:25.690 --> 00:20:30.010\nBut then, when I click on messages, notice\nthat what it gives us the ability to do.\n\n368\n00:20:30.010 --> 00:20:33.670\nIt says the SQL Server parse and\ncompile time.\n\n369\n00:20:33.670 --> 00:20:36.200\nHow long did it take to actually\nget through the parsing?\n\n370\n00:20:36.200 --> 00:20:40.475\nRemember we showed you the idea\nthat query phase of process, and\n\n371\n00:20:40.475 --> 00:20:44.050\nthen how long did it take to\ncompile the entire thing.\n\n372\n00:20:44.050 --> 00:20:46.270\nIn other words,\nthe rest of the process here.\n\n373\n00:20:46.270 --> 00:20:50.110\nAnd when we take a look there, CPU time,\nit didn't take any time at all, but\n\n374\n00:20:50.110 --> 00:20:56.040\nthe overall elapsed time to do everything\nwas about 34 milliseconds here.\n\n375\n00:20:56.040 --> 00:20:58.910\nAnd getting it all the way\nthrough the execution,\n\n376\n00:20:58.910 --> 00:21:03.560\nright about a 184 milliseconds overall.\n\n377\n00:21:03.560 --> 00:21:07.300\nCPU took about 15 milliseconds,\nor microseconds.\n\n378\n00:21:07.300 --> 00:21:10.670\nI'm gonna say that,\nthat's gonna be milliseconds.\n\n379\n00:21:10.670 --> 00:21:14.130\nI don't know for sure,\nbut let's assume that.\n\n380\n00:21:14.130 --> 00:21:18.060\nSo we can actually see that it\ncan show us that information.\n\n381\n00:21:18.060 --> 00:21:22.370\nAnd of course, the larger that these\nnumbers are, especially on a small query,\n\n382\n00:21:22.370 --> 00:21:25.630\nthe more likely you're actually\nstarting to maybe end up getting\n\n383\n00:21:25.630 --> 00:21:30.400\nto that point where you go, maybe I need\nto do something about optimizing here.\n\n384\n00:21:30.400 --> 00:21:32.170\nSo we can see that one.\n\n385\n00:21:32.170 --> 00:21:38.380\nNow, I wanna also run the idea\nof the I/O time as well.\n\n386\n00:21:38.380 --> 00:21:41.420\nAnd I thought I had another one, but\nI can actually just change this.\n\n387\n00:21:41.420 --> 00:21:43.320\nSo when we talk about I/O time,\n\n388\n00:21:43.320 --> 00:21:47.390\nwe're talking of course about\ndisk operations instead.\n\n389\n00:21:47.390 --> 00:21:50.270\nSo this time,\nI'm just gonna change these words to IO.\n\n390\n00:21:51.295 --> 00:21:54.160\nIn that way,\nwhen we start to take a look at this one,\n\n391\n00:21:54.160 --> 00:21:56.740\nit should show us the disk activity.\n\n392\n00:21:56.740 --> 00:21:59.400\nNow when it reports that information out,\n\n393\n00:21:59.400 --> 00:22:02.880\nthere's a couple of little things I\nwanna point out once I run this, too.\n\n394\n00:22:04.350 --> 00:22:09.200\nSo this time I'm gonna execute it, and\nthen when I take a look at this one,\n\n395\n00:22:11.920 --> 00:22:16.330\nyou'll end up seeing that this one's\na little bit more complex here.\n\n396\n00:22:16.330 --> 00:22:20.160\nLet me move this over to the side and\nwe can see a little bit more of it.\n\n397\n00:22:20.160 --> 00:22:23.170\nSo it actually tells us that\nit did a scan count of 1,\n\n398\n00:22:23.170 --> 00:22:29.100\n689 logical reads, physical reads,\nread-ahead, you name it.\n\n399\n00:22:29.100 --> 00:22:33.490\nWhen it talks about the idea here of\nlogical reads, right, this is actually\n\n400\n00:22:33.490 --> 00:22:37.560\nwhere it actually is telling us, hey look,\nI'm actually seeing this stuff, and\n\n401\n00:22:37.560 --> 00:22:40.330\nthe physical reads is when I have\nto pull it off the hard drive.\n\n402\n00:22:40.330 --> 00:22:44.620\nSo right now, it's actually in that cached\nstate is what we're also seeing here, too.\n\n403\n00:22:44.620 --> 00:22:47.650\nSo in this particular idea,\n\n404\n00:22:47.650 --> 00:22:52.100\nif you actually are hitting the disk\nmultiple times, which mine's not.\n\n405\n00:22:52.100 --> 00:22:54.430\nIt doesn't look like it's actually\nhitting the disk too often at all.\n\n406\n00:22:54.430 --> 00:22:57.940\nIt was able to pull the information out\nof the previous query that I ran, and\n\n407\n00:22:57.940 --> 00:23:00.660\nwas able to actually do that and\nread the information right then.\n\n408\n00:23:00.660 --> 00:23:04.660\nBut if you start pulling off more and more\nfrom the hard drive, and then the hard\n\n409\n00:23:04.660 --> 00:23:08.920\ndrive is what, the slowest possible\nunit that you have on most computers.\n\n410\n00:23:08.920 --> 00:23:10.355\nEven inside of a RAID array,\n\n411\n00:23:10.355 --> 00:23:14.160\nit's still nothing compared to the speed\nof the CPU or the RAM, a lot of times.\n\n412\n00:23:14.160 --> 00:23:17.190\nBut when you start doing stuff like this,\nright, logic or\n\n413\n00:23:17.190 --> 00:23:20.840\nphysical reads, that's where you're\nactually also paying attention to as well.\n\n414\n00:23:20.840 --> 00:23:23.770\nSo when you start having excessive\namounts of physical reads,\n\n415\n00:23:23.770 --> 00:23:27.350\nit means it has to hit your hard drive,\nand that's actually key.\n\n416\n00:23:27.350 --> 00:23:32.080\nNow, I said that I wanted to point out\njust a little bit of information as well,\n\n417\n00:23:32.080 --> 00:23:33.940\nand that's because this\nis also important too,\n\n418\n00:23:33.940 --> 00:23:36.510\nsome terminology that we\nhave to pay attention to.\n\n419\n00:23:36.510 --> 00:23:42.780\nWhen it pulls this information off, right,\nas far as the statistic IO, I don't know\n\n420\n00:23:42.780 --> 00:23:48.610\nwhy I can't say that, statistics IO, we're\nactually pulling off what we call pages.\n\n421\n00:23:48.610 --> 00:23:52.560\nOkay, now a page is essentially\nan area on your hard drive\n\n422\n00:23:52.560 --> 00:23:54.600\nthat's equal to eight kilobytes.\n\n423\n00:23:54.600 --> 00:23:56.070\nThat's what a pages is.\n\n424\n00:23:56.070 --> 00:23:57.540\nAnd I would make sure I know that number.\n\n425\n00:23:57.540 --> 00:24:00.306\nEight kilobytes is equal to a page okay.\n\n426\n00:24:00.306 --> 00:24:06.958\nNow, that particular eight kilobytes\nis essentially a contiguous space.\n\n427\n00:24:06.958 --> 00:24:10.371\nIn other words,\nit's eight kilobytes worth of data, okay.\n\n428\n00:24:10.371 --> 00:24:14.361\nIf you actually get to this point where\nyou're actually doing a SQL query and\n\n429\n00:24:14.361 --> 00:24:18.050\nit takes up and you start seeing\nthings like the term, extent, okay?\n\n430\n00:24:18.050 --> 00:24:21.604\nJust like an extension, but\nwithout the i-o-n at the end, extent.\n\n431\n00:24:21.604 --> 00:24:26.732\nYou're talking about 64 kilobytes\nof contiguous data space\n\n432\n00:24:26.732 --> 00:24:31.580\non your hard drive as well and\nwhat your SQL server queries.\n\n433\n00:24:31.580 --> 00:24:35.750\nSo when you hear people talk\nabout pulling pages off.\n\n434\n00:24:35.750 --> 00:24:38.204\nIt's actually eight kilobytes at a time.\n\n435\n00:24:38.204 --> 00:24:42.367\n64 kilobytes is an extent and this\nactually gives you something else to make\n\n436\n00:24:42.367 --> 00:24:44.920\nsure I tell you the right numbers here.\n\n437\n00:24:44.920 --> 00:24:51.070\nWhich is 128 pages per megabyte of\ndata that is on you SQL drive as well.\n\n438\n00:24:51.070 --> 00:24:53.760\nNow, it's all about terminology, right?\n\n439\n00:24:53.760 --> 00:24:56.320\nBut you think about but\nyou hate to say this.\n\n440\n00:24:56.320 --> 00:24:58.850\nBut it is something that can be\nvery easy for you on the exam.\n\n441\n00:24:58.850 --> 00:25:03.650\nIf they say which of the following\nis actually equal to a page, well,\n\n442\n00:25:03.650 --> 00:25:04.890\nyou should know the size of it.\n\n443\n00:25:04.890 --> 00:25:08.000\nWhich of the following is an extent or\nrepresents an extent?\n\n444\n00:25:08.000 --> 00:25:09.620\nYou should know stuff like that.\n\n445\n00:25:09.620 --> 00:25:11.940\nEasy points on the exam.\n\n446\n00:25:11.940 --> 00:25:18.880\nSo just don't let small things\nlike that as nit picky as it is.\n\n447\n00:25:18.880 --> 00:25:22.680\nIt can really help me at least on the exam\nto get a question like that right.\n\n448\n00:25:22.680 --> 00:25:23.970\nYeah, I remember that.\n\n449\n00:25:23.970 --> 00:25:25.460\nAnd just to get by with that.\n\n450\n00:25:25.460 --> 00:25:26.830\nBut you will hear that terminology.\n\n451\n00:25:26.830 --> 00:25:30.720\nYou'll see it in messages like\nthis as well on the screen.\n\n452\n00:25:30.720 --> 00:25:32.530\nSo that's what you're looking for.\n\n453\n00:25:32.530 --> 00:25:36.290\nThe idea behind seeing these\nstatistics is to see whether or\n\n454\n00:25:36.290 --> 00:25:41.150\nnot you really do need to\nmanipulate something to actually\n\n455\n00:25:41.150 --> 00:25:46.020\nget your queries a bit more optimal at\nthis point that you're actually doing.\n\n456\n00:25:46.020 --> 00:25:47.560\nBecause it is important.\n\n457\n00:25:47.560 --> 00:25:53.210\nSo, for everything that we've actually\ntalked about at this point, what do we do?\n\n458\n00:25:53.210 --> 00:25:57.490\nWell, again remember that your\nqueries are pretty much the key\n\n459\n00:25:57.490 --> 00:26:01.170\ntrying to actually not use\nthe asterisk as much as possible.\n\n460\n00:26:01.170 --> 00:26:03.450\nOn a test database, no big deal.\n\n461\n00:26:03.450 --> 00:26:07.740\nIn a production network, where you're\ngetting 10,000 hits per day or hour.\n\n462\n00:26:07.740 --> 00:26:10.260\nI don't know, let me go to hour,\nthat's pretty hefty.\n\n463\n00:26:10.260 --> 00:26:12.378\nAnd you're starting to go,\n\n464\n00:26:12.378 --> 00:26:17.598\nI think I'll just do a select asterisk\non this table and it's 32,000 rows or\n\n465\n00:26:17.598 --> 00:26:22.533\n600,000 rows, it becomes a little\nmore hefty on that server as well.\n\n466\n00:26:22.533 --> 00:26:26.020\nLearn how to use those filters,\nminimize the way that you're doing it,\n\n467\n00:26:26.020 --> 00:26:28.820\nlearn how to do things\na little bit more efficiently.\n\n468\n00:26:28.820 --> 00:26:31.380\nDoes the optimizer really help out?\n\n469\n00:26:31.380 --> 00:26:34.250\nIt can help out as much as possible but\nremember, it begins with what?\n\n470\n00:26:34.250 --> 00:26:36.840\nWith your query itself.\n\n471\n00:26:36.840 --> 00:26:43.060\nIt doesn't take your query and go, well\nRonnie, you don't need all those rows.\n\n472\n00:26:43.060 --> 00:26:46.010\nIt says Ronnie, you're requesting all\nthose rows, that's where I start off from.\n\n473\n00:26:46.010 --> 00:26:47.620\nThat's my starting point.\n\n474\n00:26:47.620 --> 00:26:52.520\nSo the more optimal or the more efficient\nyou can make that initial query,\n\n475\n00:26:52.520 --> 00:26:54.510\nthe rest of that process, right?\n\n476\n00:26:54.510 --> 00:26:58.290\nThe rest of those phases also\nbecomes more efficient as well and\n\n477\n00:26:58.290 --> 00:27:00.890\nthen when it gets to the optimizer it\ngoes this is already pretty efficient but\n\n478\n00:27:00.890 --> 00:27:02.026\nlet me see if I can find.\n\n479\n00:27:02.026 --> 00:27:06.348\nMaybe I can and then it lets it run\nthrough and then you're ready to go.\n\n480\n00:27:06.348 --> 00:27:10.238\nBut these statistics being able to\nactually understand the difference between\n\n481\n00:27:10.238 --> 00:27:14.184\nthe statistics time, when it actually\nshows the overall last time of that entire\n\n482\n00:27:14.184 --> 00:27:17.897\nprocess or the idea of the disk IO if\nyou're actually hitting the disk pretty\n\n483\n00:27:17.897 --> 00:27:21.900\nhard, you might find out that there has to\nbe ways that we can actually use the tools\n\n484\n00:27:21.900 --> 00:27:25.190\nthat are available in there to\nhelp us to optimize even better.\n\n485\n00:27:25.190 --> 00:27:30.299\n>> So Ronnie those statistical procedures\nthat we have those queries are basically\n\n486\n00:27:30.299 --> 00:27:35.042\njust giving me information either on\nthe IO that was run or the time it took.\n\n487\n00:27:35.042 --> 00:27:39.540\nIt's not actually doing any\noptimization at that point in time.\n\n488\n00:27:39.540 --> 00:27:42.800\nWe take that information to\nmake more optimized queries.\n\n489\n00:27:42.800 --> 00:27:44.660\n>> Yeah, that is at least the hope.\n\n490\n00:27:44.660 --> 00:27:48.040\nIs that we can start seeing this more and\nmore.\n\n491\n00:27:48.040 --> 00:27:52.970\nAnd usually the reason why we start to do\nthis is because somewhere along the line\n\n492\n00:27:52.970 --> 00:27:56.500\nwe have a customer that has an application\nand they've requested some data.\n\n493\n00:27:56.500 --> 00:28:02.600\nAnd they're saying look, this took ten\nseconds longer than it took yesterday.\n\n494\n00:28:02.600 --> 00:28:05.250\nWhat we want to run this type of query and\n\n495\n00:28:05.250 --> 00:28:07.760\nwe wanna actually be able to\nturn those statistics on so\n\n496\n00:28:07.760 --> 00:28:12.050\nthat we can see is there some actual\nproblem that we have to address?\n\n497\n00:28:12.050 --> 00:28:14.950\nOr, where we might be able to\noptimize a little bit better.\n\n498\n00:28:14.950 --> 00:28:18.240\nIf it is longer than what they said\nthe day before, we run it again and\n\n499\n00:28:18.240 --> 00:28:21.270\njust try and see, is it consistent or\nis it inconsistent?\n\n500\n00:28:21.270 --> 00:28:25.180\nIt may lead us to actually more\ninformation about troubleshooting as well\n\n501\n00:28:25.180 --> 00:28:26.550\nand then fixing things.\n\n502\n00:28:26.550 --> 00:28:28.065\nOr it may actually allow us to go in and\n\n503\n00:28:28.065 --> 00:28:30.640\nre-examine the code that we\nhave in the background and\n\n504\n00:28:30.640 --> 00:28:35.440\nsay, this is what we actually have to do\ninstead to make this much more efficient.\n\n505\n00:28:35.440 --> 00:28:39.520\nSo at this point, at least on our side,\nunderstanding the basics and\n\n506\n00:28:39.520 --> 00:28:41.030\nwhere that's actually gonna be.\n\n507\n00:28:41.030 --> 00:28:45.080\nAnd what we can do as far\nas the querying goes, and\n\n508\n00:28:45.080 --> 00:28:47.910\neven being able to see\nwhen we can have problems.\n\n509\n00:28:47.910 --> 00:28:50.200\nVery helpful at the very\nbeginning of optimization.\n\n510\n00:28:50.200 --> 00:28:50.720\n>> That's right.\n\n511\n00:28:50.720 --> 00:28:54.130\nNow, we've only just scratched\nthe surface on optimization.\n\n512\n00:28:54.130 --> 00:28:56.220\nAnd well done, as well.\n\n513\n00:28:56.220 --> 00:29:01.530\nWe do thank Ronnie for getting us started,\ngetting our toe wet there on optimization.\n\n514\n00:29:01.530 --> 00:29:04.250\nBut there's plenty more for us to cover.\n\n515\n00:29:04.250 --> 00:29:06.200\nSo it looks like we've\ngot a part two on this.\n\n516\n00:29:06.200 --> 00:29:07.570\nHopefully we'll see you guys there.\n\n517\n00:29:07.570 --> 00:29:11.960\nWe thank Ronnie yet again for dropping by\nand lending his giant expertise on this.\n\n518\n00:29:11.960 --> 00:29:13.060\nWe hope to see you in part two.\n\n519\n00:29:13.060 --> 00:29:16.610\nWe're gonna sign off for ITProTV,\nI've been your host Daniel Lowrie.\n\n520\n00:29:16.610 --> 00:29:17.530\n>> And I'm Ronnie Wong.\n\n521\n00:29:17.530 --> 00:29:19.480\n>> We'll see you next time.\n\n522\n00:29:19.480 --> 00:29:23.688\n[SOUND]\n\n",
          "vimeoId": "166548734"
        },
        {
          "description": "In this episode, Daniel and Ronnie continue exploring query optimization. They look into the Execution Plans (Actual and Estimated) and the 3 ways in which they are presented (Textual, Graphical, and XML). Also discussed are Plan Guides.",
          "length": "1742",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-2-optimize_queries_pt2-051216-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-2-optimize_queries_pt2-051216-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-2-optimize_queries_pt2-051216-1-sm.jpg",
          "title": "Optimize Queries Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.154 --> 00:00:10.154\n[MUSIC]\n\n2\n00:00:11.915 --> 00:00:13.770\nAll right.\nGreetings everyone and\n\n3\n00:00:13.770 --> 00:00:15.900\nwelcome to another great\nepisode of IT ProTV.\n\n4\n00:00:15.900 --> 00:00:20.010\nI'm your host Daniel Laury and in today's\nepisode we are continuing on with our\n\n5\n00:00:20.010 --> 00:00:23.030\nquery into\nthe Microsoft Sequel Sever Version 2014.\n\n6\n00:00:23.030 --> 00:00:25.470\nAnd joining us back in\nthe studio again today for\n\n7\n00:00:25.470 --> 00:00:29.000\na part two on optimization,\nour good friend Mr. Ronnie Wong.\n\n8\n00:00:29.000 --> 00:00:30.540\nRonnie, welcome back and how's it going?\n\n9\n00:00:30.540 --> 00:00:33.240\n>> It's going great as we continue\non with more SQL Server 2014.\n\n10\n00:00:33.240 --> 00:00:35.650\nWe are now in a part two,\n\n11\n00:00:35.650 --> 00:00:40.650\nwho would've guessed a part two on the\nquerying and optimizing our queries here.\n\n12\n00:00:40.650 --> 00:00:44.190\nSo when we start to take a look,\nwe already just talked about\n\n13\n00:00:44.190 --> 00:00:48.030\ntaking a look at some statistics which\nI'm not going to be able to say,\n\n14\n00:00:48.030 --> 00:00:49.600\nI can't say that word no matter what.\n\n15\n00:00:49.600 --> 00:00:53.540\nAnd we also talked about of course\nthe query execution phases that we also go\n\n16\n00:00:53.540 --> 00:00:59.290\nthrough, now we're moving into taking\na look at queries and what else we can do.\n\n17\n00:00:59.290 --> 00:01:03.610\nNow statistics can show us, right\nwhere there might be the beginning of\n\n18\n00:01:03.610 --> 00:01:08.390\nproblems as far as how long it actually\ntakes for the entire query to take place.\n\n19\n00:01:08.390 --> 00:01:11.020\nAnd of course,\nhow mush disk I/O that we're using.\n\n20\n00:01:11.020 --> 00:01:16.610\nBut another one can actually examine\nessentially the entire plan itself.\n\n21\n00:01:16.610 --> 00:01:19.470\nAnd what we want to do is we want to take\na moment to actually understand that\n\n22\n00:01:19.470 --> 00:01:21.000\nwhen we write a query.\n\n23\n00:01:21.000 --> 00:01:24.630\nIt is gonna come up with that\nidea of a execution plan\n\n24\n00:01:24.630 --> 00:01:27.100\non how the SQL server\nsees what has to be run.\n\n25\n00:01:27.100 --> 00:01:29.490\nAnd it's gonna break it down for us, and\n\n26\n00:01:29.490 --> 00:01:33.670\nmaybe even give us hints on what\nshould actually been done as well.\n\n27\n00:01:33.670 --> 00:01:37.370\nSo we've actually seen this a couple\nof times during our entire series, but\n\n28\n00:01:37.370 --> 00:01:40.450\nI kinda didn't dive into cuz I\nknew we were gonna talk about it\n\n29\n00:01:40.450 --> 00:01:43.340\na little bit more in\nthis particular episode.\n\n30\n00:01:43.340 --> 00:01:47.520\nSo the easiest thing to do, is actually to\nsay, hey let's go ahead and jump into it.\n\n31\n00:01:47.520 --> 00:01:49.460\nSo, let's go ahead and do that.\n\n32\n00:01:49.460 --> 00:01:53.590\nNow, when we take a look at the idea of\nrunning a query, we've gotta remember,\n\n33\n00:01:53.590 --> 00:01:58.160\nthat the query has a lot of possibilities,\nand a lot of possible combinations.\n\n34\n00:01:58.160 --> 00:02:01.830\nAnd the query optimizer is\nessentially gonna take your query.\n\n35\n00:02:01.830 --> 00:02:04.420\nAnd then it's actually gonna\ngo through and say, all right.\n\n36\n00:02:04.420 --> 00:02:07.340\nLet's compare this against what I\nconsider the most optimized plan, and\n\n37\n00:02:07.340 --> 00:02:10.150\nwe'll run it the way\nthat I choose to run it.\n\n38\n00:02:10.150 --> 00:02:11.547\nAnd so in that sense here,\n\n39\n00:02:11.547 --> 00:02:15.290\nae've gotta actually take a look at\nhow it actually ends up working.\n\n40\n00:02:15.290 --> 00:02:17.500\nSo let's show you how we end\nup running this a little but.\n\n41\n00:02:17.500 --> 00:02:20.220\nAll right, so on my screen\n\n42\n00:02:20.220 --> 00:02:24.240\nwhat we're gonna end up seeing here\nof course is a fairly complex join.\n\n43\n00:02:24.240 --> 00:02:27.580\nNow I'm not gonna say it's the most\ncomplex one in the world, but\n\n44\n00:02:27.580 --> 00:02:32.780\nwhat I should end up with is a clothing\ncategory that I've filtered by.\n\n45\n00:02:32.780 --> 00:02:35.760\nAnd of course all this\ninformation up here.\n\n46\n00:02:35.760 --> 00:02:41.570\nNow when I run this entire statement here.\n\n47\n00:02:41.570 --> 00:02:45.530\nSo if I run the whole thing,\nI execute it, I do end up getting, well,\n\n48\n00:02:45.530 --> 00:02:46.740\nsome returns back.\n\n49\n00:02:46.740 --> 00:02:51.330\nAnd if I take a look here at the messages,\nI'm actually told that,\n\n50\n00:02:51.330 --> 00:02:54.060\noops, well, there it goes.\n\n51\n00:02:54.060 --> 00:02:59.030\nI'm told that 21,394 rows existed But it\ndoesn't really tell me anything about what\n\n52\n00:02:59.030 --> 00:03:02.050\nactually happened in making that plan up.\n\n53\n00:03:02.050 --> 00:03:04.740\nAnd how it actually got to\nthat result as well, and\n\n54\n00:03:04.740 --> 00:03:07.060\nwhat's being displayed on the screen.\n\n55\n00:03:07.060 --> 00:03:10.070\nNow when we talk about\nactually seeing what happens,\n\n56\n00:03:10.070 --> 00:03:14.480\nthere's two different ways that we can\ntake a look at the execution plan itself.\n\n57\n00:03:14.480 --> 00:03:17.330\nThere is what's called\nan estimated execution plan.\n\n58\n00:03:18.520 --> 00:03:21.970\nAnd if I hover over this, and\nit's up here on our toolbar.\n\n59\n00:03:23.070 --> 00:03:24.910\nLet me see if I can hover over it again.\n\n60\n00:03:24.910 --> 00:03:25.890\nOkay, so there it is.\n\n61\n00:03:25.890 --> 00:03:26.910\nNotice the screen type.\n\n62\n00:03:26.910 --> 00:03:30.330\nIt says, display estimated execution plan.\n\n63\n00:03:30.330 --> 00:03:32.180\nWell, remember that when\nthey talk about an estimate,\n\n64\n00:03:32.180 --> 00:03:34.700\nit means that it went ahead and\ndetermined it.\n\n65\n00:03:34.700 --> 00:03:37.790\nBefore, everything was to\nhappen at Reddit, and it said,\n\n66\n00:03:37.790 --> 00:03:40.380\nhere's what I believe is going to happen.\n\n67\n00:03:40.380 --> 00:03:44.870\nAnd if I go ahead and select that,\nand then I zoom back out,\n\n68\n00:03:44.870 --> 00:03:48.230\nnotice now if I can pull\nthis whole thing up here,\n\n69\n00:03:48.230 --> 00:03:52.660\nwe can actually see that\nhere is the query costs.\n\n70\n00:03:52.660 --> 00:03:56.595\nI'm trying not to get that zappy thing\nthat looks like it's going on there.\n\n71\n00:03:56.595 --> 00:04:02.450\n100% and then actually tells me\nthe entire select statement and\n\n72\n00:04:02.450 --> 00:04:06.380\nthen in green, let me see if\nI can point that out as well.\n\n73\n00:04:06.380 --> 00:04:11.840\nNotice that it's missing an index,\nand it tells me the solution to this\n\n74\n00:04:11.840 --> 00:04:16.440\nIs to create what they call\na non-clustered index instead.\n\n75\n00:04:16.440 --> 00:04:19.070\nAnd it tells me the name\nof the index is missing and\n\n76\n00:04:19.070 --> 00:04:21.950\nhere's how it can actually make\nthis a bit more efficient.\n\n77\n00:04:21.950 --> 00:04:26.300\nNow as I scroll on through this entire\nthing here, we want to make sure that we\n\n78\n00:04:26.300 --> 00:04:32.480\nunderstand how we tend to look at\nthis diagram down here at the bottom.\n\n79\n00:04:32.480 --> 00:04:38.300\nSo this diagram is normally read\nright hand side to left hand side and\n\n80\n00:04:38.300 --> 00:04:40.640\nalso from the top to the bottom.\n\n81\n00:04:40.640 --> 00:04:45.240\nSo at the very beginning of\nthe stuff that it did is right here.\n\n82\n00:04:45.240 --> 00:04:50.200\nWhere it actually included in a clustered\nindex scan, and it actually found,\n\n83\n00:04:50.200 --> 00:04:53.840\nwell nothing that actually cost anything,\nwhich is fine.\n\n84\n00:04:53.840 --> 00:04:56.550\nAnd then from that point we\ncontinue to move down, and\n\n85\n00:04:56.550 --> 00:04:59.060\nthen do an index scan on non cluster.\n\n86\n00:04:59.060 --> 00:05:03.150\nAnd realize that nothing was actually\nthere, and then at some point in time\n\n87\n00:05:04.460 --> 00:05:08.470\nit also continued to do this too as\nit continues to go on down, now.\n\n88\n00:05:08.470 --> 00:05:13.060\nOnce we get down here to the very end,\nnotice that it actually is doing clustered\n\n89\n00:05:13.060 --> 00:05:16.190\nindex scan after clustered index\nscan after clustered index scan.\n\n90\n00:05:16.190 --> 00:05:18.330\nAnd when we start seeing this,\n\n91\n00:05:18.330 --> 00:05:21.350\nthen you start seeing other\nthings that begin to happen.\n\n92\n00:05:21.350 --> 00:05:23.720\nI'm trying not to block\neverything as I go through here.\n\n93\n00:05:23.720 --> 00:05:26.030\n>> It loves those pop overs, right.\n\n94\n00:05:26.030 --> 00:05:28.140\n>> I mean, I just got somewhere near it\n>> And\n\n95\n00:05:28.140 --> 00:05:31.510\nall of a sudden we now have\nbetween all of those joins, right?\n\n96\n00:05:31.510 --> 00:05:33.480\nIt started actually doing some stuff and\n\n97\n00:05:33.480 --> 00:05:37.600\nit actually created an inner join\nright here at the very beginning.\n\n98\n00:05:37.600 --> 00:05:42.180\nAnd then, it did an index seek and\nit continues now to do a nested loop.\n\n99\n00:05:42.180 --> 00:05:46.140\nYou name it, it's now starting to\nshow us the actual execution on\n\n100\n00:05:46.140 --> 00:05:48.740\nhow it actually brought all\nthose results together.\n\n101\n00:05:48.740 --> 00:05:52.670\nA nested loop into a hashing match,\nas well.\n\n102\n00:05:52.670 --> 00:05:57.320\n>> Another hashing match and then we\ncontinue on over and that way you can\n\n103\n00:05:57.320 --> 00:06:03.100\nactually see between those tables what\nwas actually going on when it did it.\n\n104\n00:06:03.100 --> 00:06:06.400\nAnd if I do hover over one of them\nyou can see the output list and\n\n105\n00:06:06.400 --> 00:06:10.290\nalso of course the probe, let me zoom out\nso we can see it a little bit better.\n\n106\n00:06:10.290 --> 00:06:13.510\n>> So down at the bottom here you\nnotice where it says output list.\n\n107\n00:06:13.510 --> 00:06:16.520\nI can't just do this\nwithout leaving it there.\n\n108\n00:06:16.520 --> 00:06:20.770\nOutput list and of course hash key probes\nwas actually able to create all this\n\n109\n00:06:20.770 --> 00:06:24.950\ncontent and\ngive us the overall result that we had.\n\n110\n00:06:24.950 --> 00:06:29.520\nNow, the key for us of course when we\nstart to see this is we're actually\n\n111\n00:06:29.520 --> 00:06:33.060\ntaking a look at the overall time\nit took to run the entire thing.\n\n112\n00:06:33.060 --> 00:06:36.890\nNow, I don't have any one element\nthat actually takes a, or\n\n113\n00:06:36.890 --> 00:06:40.890\nany one statement that takes\na tremendous amount of time to run.\n\n114\n00:06:40.890 --> 00:06:44.650\nBut at this particular point here,\nif I was actually experiencing this.\n\n115\n00:06:44.650 --> 00:06:47.510\nThat's what I would do,\nis I would go back in and\n\n116\n00:06:47.510 --> 00:06:50.270\ntake a look a look at\ncertain elements of this.\n\n117\n00:06:50.270 --> 00:06:53.640\nAnd then take a look at the sub-tree\ncost is what we're looking at.\n\n118\n00:06:53.640 --> 00:06:57.940\nAnd subtree cost on this\none is about halfway here.\n\n119\n00:06:57.940 --> 00:07:02.540\nAnd notice this is three point two four,\nand I go to the end here and I see that\n\n120\n00:07:02.540 --> 00:07:07.410\nthe subtree cost overall the estimation\nhere was three point three seven.\n\n121\n00:07:07.410 --> 00:07:10.200\nAnd so, somewhere along the line\nit's actually adding up and\n\n122\n00:07:10.200 --> 00:07:13.970\nit's showing me a lot of\nthe information as well.\n\n123\n00:07:13.970 --> 00:07:17.580\nRight.\nNow I wanna run this thing again, but this\n\n124\n00:07:17.580 --> 00:07:22.330\ntime I wanna take a look at what's called\nthe actually execution plan instead.\n\n125\n00:07:22.330 --> 00:07:24.390\nSo if I scroll back up here.\n\n126\n00:07:24.390 --> 00:07:28.210\nHere's where we saw the displayed\nestimated execution plan.\n\n127\n00:07:28.210 --> 00:07:31.930\nAnd notice the Control L,\nthat's actually a shortcut you can use.\n\n128\n00:07:31.930 --> 00:07:35.330\nI don't like using shortcuts too much,\nbecause I don't tend to remember them all.\n\n129\n00:07:35.330 --> 00:07:40.410\nAnd then, we can also include in what is\ncalled the actual execution plan as well.\n\n130\n00:07:40.410 --> 00:07:44.710\nThis is actually the execution plan\nthat's done after it runs the result.\n\n131\n00:07:44.710 --> 00:07:45.210\nOkay.\n\n132\n00:07:45.210 --> 00:07:48.100\nSo the other one is actually done when\nit actually calculates lays it out and\n\n133\n00:07:48.100 --> 00:07:49.600\ngives us the entire clearance.\n\n134\n00:07:49.600 --> 00:07:50.550\nHere's the execution plan.\n\n135\n00:07:50.550 --> 00:07:52.917\nHere's what I'm estimating\nit's gonna cost.\n\n136\n00:07:52.917 --> 00:07:56.124\nAnd then, I can actually say\ndid the actual running of it,\n\n137\n00:07:56.124 --> 00:08:00.448\nis it actually different from what was\nestimated Or is this actually something\n\n138\n00:08:00.448 --> 00:08:05.490\nthat's happening because of something\nthat's changed at this point as well?\n\n139\n00:08:05.490 --> 00:08:09.208\nSo if now I go ahead and select it again.\n\n140\n00:08:09.208 --> 00:08:12.767\nAnd this time I go ahead an include\nthe actual execution plan,\n\n141\n00:08:12.767 --> 00:08:16.860\nI gotta make sure that highlights\nbefore I click anything.\n\n142\n00:08:16.860 --> 00:08:18.421\nAnd then I click execute.\n\n143\n00:08:18.421 --> 00:08:22.890\nNow notice I get three options here okay.\n\n144\n00:08:22.890 --> 00:08:27.010\nNot only of course the results,\nbut the messages and\n\n145\n00:08:27.010 --> 00:08:29.590\nthen the execution plan itself once again.\n\n146\n00:08:29.590 --> 00:08:33.039\nAnd we'll see it really didn't\nactually cost too much more.\n\n147\n00:08:33.039 --> 00:08:34.762\nActually it's about the same.\n\n148\n00:08:34.762 --> 00:08:39.295\nSo, 3.37 again, is actually the estimated\nsubtree cost in all the stuff that I\n\n149\n00:08:39.295 --> 00:08:41.340\nactually brought together.\n\n150\n00:08:41.340 --> 00:08:45.029\nSo, it wasn't too different from what\nestimated versus what actually happened.\n\n151\n00:08:45.029 --> 00:08:47.430\nYou might wonder like\nwhat should it have been?\n\n152\n00:08:47.430 --> 00:08:49.430\nNot necessarily can you change that.\n\n153\n00:08:49.430 --> 00:08:53.227\nThere are things that you can do to modify\nthe way that everything ends up working\n\n154\n00:08:53.227 --> 00:08:56.132\nand you might see that it might\nbe better or it might be worse.\n\n155\n00:08:56.132 --> 00:08:59.187\nAnd actually all depends on\nexperience at this point and\n\n156\n00:08:59.187 --> 00:09:03.220\nmore optimization than what we're going\nto go into at this point in time.\n\n157\n00:09:03.220 --> 00:09:06.946\nWe will have a series on SQL Server 2014,\nso do stay tuned for\n\n158\n00:09:06.946 --> 00:09:08.542\nthat entire series there.\n\n159\n00:09:08.542 --> 00:09:11.180\nYou'll probably learn\nmore about that as well.\n\n160\n00:09:11.180 --> 00:09:13.030\nBut here though, that's what you're doing.\n\n161\n00:09:13.030 --> 00:09:15.120\nAnd you're probably saying,\nwell why didn't it really change?\n\n162\n00:09:15.120 --> 00:09:17.080\nWell remember who did it, right?\n\n163\n00:09:17.080 --> 00:09:20.185\nWho actually ending up doing\nthe execution plan was the optimizer.\n\n164\n00:09:20.185 --> 00:09:23.269\nWell it should make sense that\nthe optimizer's estimate and\n\n165\n00:09:23.269 --> 00:09:26.661\nwhat it actually ended up running\nis actually going to be the same.\n\n166\n00:09:26.661 --> 00:09:30.275\nBut if you and I go back in there and\nwe change, or we manipulate some way,\n\n167\n00:09:30.275 --> 00:09:33.358\nsuch as actually saying not only\nare we adding in this index but\n\n168\n00:09:33.358 --> 00:09:37.331\nwe can also add in something else that we\nmight choose to do somewhere the we could\n\n169\n00:09:37.331 --> 00:09:39.770\nhave optimized it a little bit better.\n\n170\n00:09:39.770 --> 00:09:42.720\nWe might actually be able to see the\ndifference between the estimated one that\n\n171\n00:09:42.720 --> 00:09:46.930\nthe optimizer came up with versus\nwhat was actually run at that point.\n\n172\n00:09:46.930 --> 00:09:50.970\nSo the whole goal here though is,\nnormally when we start saying hey,\n\n173\n00:09:50.970 --> 00:09:54.590\nqueries are starting to run slow,\nwe can actually see it in this way.\n\n174\n00:09:54.590 --> 00:09:56.753\nBut remember,\nit's always from right to left,\n\n175\n00:09:56.753 --> 00:09:59.305\nand always from the top down\nas you read this stuff, too.\n\n176\n00:09:59.305 --> 00:10:02.775\nAnd then you can actually start seeing\nwhere things actually do have a cost.\n\n177\n00:10:02.775 --> 00:10:07.497\nAnd the cost in this entire execution\nplan here really did happen when it\n\n178\n00:10:07.497 --> 00:10:09.080\nactually was on a join.\n\n179\n00:10:09.080 --> 00:10:12.230\nYou could see 4% here, 8% here.\n\n180\n00:10:12.230 --> 00:10:17.128\nSomewhere long line there’s\n21% of the entire time that it\n\n181\n00:10:17.128 --> 00:10:20.520\ntook on this particular match.\n\n182\n00:10:20.520 --> 00:10:24.299\nAnd then again,\nas you scroll on through here, 18%,\n\n183\n00:10:24.299 --> 00:10:29.523\n31% cost on a clustered index scan\ndown here at the bottom, 1% over here.\n\n184\n00:10:29.523 --> 00:10:32.110\nYou can add all that up and\nactually be able to say, all right.\n\n185\n00:10:32.110 --> 00:10:37.046\nWhere is it actually happening, and\nmaybe focus in your optimization a little\n\n186\n00:10:37.046 --> 00:10:40.356\nbit more on those areas in\ntrying to figure this out.\n\n187\n00:10:40.356 --> 00:10:44.420\nBut the neat thing is, even with these\ntypes of execution plan, there it is.\n\n188\n00:10:44.420 --> 00:10:49.972\nIt's saying it is missing the index and\nthe impact here, it says about 50% of it.\n\n189\n00:10:49.972 --> 00:10:53.935\nSo we're saying that at least by\ncreating this non-clustered index,\n\n190\n00:10:53.935 --> 00:10:56.709\nin theory it should actually\nincrease its speed,\n\n191\n00:10:56.709 --> 00:11:00.690\nits overall delivery time,\nby a lot more, maybe even buy 50% here.\n\n192\n00:11:00.690 --> 00:11:01.520\nIt's pretty good.\n\n193\n00:11:01.520 --> 00:11:05.360\n>> So these execution plans are really\ngreat for helping us find where potential\n\n194\n00:11:05.360 --> 00:11:10.550\nbottlenecks might be and help us focus our\nefforts on optimizing just that portion.\n\n195\n00:11:10.550 --> 00:11:15.015\nMaybe everything else is running just\nright but we've got this one thing.\n\n196\n00:11:15.015 --> 00:11:19.506\nIntroduced indexing into our system,\nmaybe that's something we wanna look into,\n\n197\n00:11:19.506 --> 00:11:22.810\nspeed up our performance,\nget better performance out of it.\n\n198\n00:11:22.810 --> 00:11:28.342\nAnd from what I understand about SQL,\nI've never had to, thank goodness,\n\n199\n00:11:28.342 --> 00:11:34.319\nI've never had a DBA of any kind or even\nDev Ops, but it's all about finding ways.\n\n200\n00:11:34.319 --> 00:11:37.950\nThink of it as someone that works\non top fuel drag racers, right?\n\n201\n00:11:37.950 --> 00:11:42.980\nAll these cars are fast, but\nthere's a guy in the pit figuring out,\n\n202\n00:11:42.980 --> 00:11:48.080\nif I add 1% more air to fuel ratio,\nit'll make the car go faster, right?\n\n203\n00:11:48.080 --> 00:11:51.080\nAnd it's all about finding\nout these little hints and\n\n204\n00:11:51.080 --> 00:11:54.070\nthings like that when it comes to\noptimization inside of our databases.\n\n205\n00:11:54.070 --> 00:11:55.087\nSame kind of idea.\n\n206\n00:11:55.087 --> 00:11:57.713\nYou're looking for\nevery piece of fat you can trim off and\n\n207\n00:11:57.713 --> 00:12:01.870\nmake this thing go faster and break the\nsound barrier a whole lot quicker, right.\n\n208\n00:12:01.870 --> 00:12:05.015\n>> Yeah, there's only one other thing I\nneed is also say about this plans and\n\n209\n00:12:05.015 --> 00:12:06.245\nbeing able to read them too.\n\n210\n00:12:06.245 --> 00:12:10.274\nEven though we're showing you this and\nthe graphical use of it,\n\n211\n00:12:10.274 --> 00:12:14.530\nyou can instead tell it that you\nneed to send it to an xml file.\n\n212\n00:12:14.530 --> 00:12:18.346\nOr it actually just send it to\na regular old text file if you want to,\n\n213\n00:12:18.346 --> 00:12:20.400\nto turn it into a text plan or an XML.\n\n214\n00:12:20.400 --> 00:12:24.127\nThe XML, of course, is great if you have\nanother application that's designed to\n\n215\n00:12:24.127 --> 00:12:27.840\nread that and then actually give you\nthe display that you want instead.\n\n216\n00:12:27.840 --> 00:12:29.695\nAnd that might actually be\nthe better way for you to go.\n\n217\n00:12:29.695 --> 00:12:32.795\nOr if you just want to keep it for\narchiving into a text file,\n\n218\n00:12:32.795 --> 00:12:35.900\nit can actually just give\nyou just the data itself.\n\n219\n00:12:35.900 --> 00:12:37.365\nBut I like seeing it here and\n\n220\n00:12:37.365 --> 00:12:40.434\nthat's actually been the way\nthat I've always used it.\n\n221\n00:12:40.434 --> 00:12:41.282\nI hate to say it,\n\n222\n00:12:41.282 --> 00:12:45.120\nI'm not very experimental in terms\nof I want to learn it this way too.\n\n223\n00:12:45.120 --> 00:12:46.696\nI should, but I don't.\n\n224\n00:12:46.696 --> 00:12:49.450\nI like the stuff I like and\nthat's what happens.\n\n225\n00:12:49.450 --> 00:12:54.297\n>> It's a comfy sweater that Ronnie\njust wraps around and with a cup of joe.\n\n226\n00:12:54.297 --> 00:12:55.450\nI can't blame him, right?\n\n227\n00:12:55.450 --> 00:13:00.238\nGraphical is definitely a nice form\nin which to try to consume data.\n\n228\n00:13:00.238 --> 00:13:04.580\nIt's usually very easy to do that and\nit gives you a nice overview.\n\n229\n00:13:04.580 --> 00:13:09.140\nBut don't forget there are other\nmethods of which you could export this\n\n230\n00:13:09.140 --> 00:13:12.788\ndata into some sort of a consumable\nformat, if it be XML or\n\n231\n00:13:12.788 --> 00:13:16.664\njust old plain text,\nif you're Maybe you're using that for\n\n232\n00:13:16.664 --> 00:13:20.484\nsome strange reason,\nas an output to a sheet or something.\n\n233\n00:13:20.484 --> 00:13:21.754\n>> There's no doubt.\n\n234\n00:13:21.754 --> 00:13:25.691\nNow there's a lot of different other\nthings that we also have to get into,\n\n235\n00:13:25.691 --> 00:13:27.820\nin terms of optimizing as well.\n\n236\n00:13:27.820 --> 00:13:32.412\nAnd this is where we're diverging from\nthe idea that the optimizer knows\n\n237\n00:13:32.412 --> 00:13:33.624\neverything okay.\n\n238\n00:13:33.624 --> 00:13:35.540\nNow-\n>> That's heresy, Ronnie.\n\n239\n00:13:35.540 --> 00:13:37.519\n[LAUGH]\n>> I know, to a point, you hate to say it,\n\n240\n00:13:37.519 --> 00:13:38.620\nit really is, right?\n\n241\n00:13:38.620 --> 00:13:42.638\nThe optimizer can calculate much faster\nthan Ronnie Wong will ever be able to\n\n242\n00:13:42.638 --> 00:13:43.337\ncalculate.\n\n243\n00:13:43.337 --> 00:13:46.085\nAnd that's even two plus four,\nI guarantee you.\n\n244\n00:13:46.085 --> 00:13:47.541\nIt’s much faster than that.\n\n245\n00:13:47.541 --> 00:13:48.806\nBut everything that does,\n\n246\n00:13:48.806 --> 00:13:52.410\nthe optimizer does a very good\njob at doing what it needs.\n\n247\n00:13:52.410 --> 00:13:56.442\nBut remember that there's times, though,\nespecially if you're in programming,\n\n248\n00:13:56.442 --> 00:14:00.250\nif you're good that and if you're actually\none of those database developers and\n\n249\n00:14:00.250 --> 00:14:03.725\nyou're really good at that that you\nmay say, here's how I need it to run.\n\n250\n00:14:03.725 --> 00:14:05.590\nHere is how I want it to run.\n\n251\n00:14:05.590 --> 00:14:09.110\nWell, that's when you can\ninstead turn that around and\n\n252\n00:14:09.110 --> 00:14:13.290\nchange up the way that the query\nends up running for you.\n\n253\n00:14:13.290 --> 00:14:17.150\nAnd the way that we do that where we can\nmodify it and actually say, look, I'm\n\n254\n00:14:17.150 --> 00:14:21.850\nchanging essentially the default behavior\nof how I want the optimizer to run this.\n\n255\n00:14:21.850 --> 00:14:24.760\nWell, we can do that as well as\nfar as our query statements go,\n\n256\n00:14:24.760 --> 00:14:27.350\nand that's where we create what\nwe call plan guides, okay?\n\n257\n00:14:27.350 --> 00:14:30.360\nSo when we start talking\nabout the plan guides here,\n\n258\n00:14:30.360 --> 00:14:34.790\nthis is where we're gonna actually\ninfluence the query optimization itself.\n\n259\n00:14:34.790 --> 00:14:37.860\nAnd the way that we do it is that we\nactually end up getting a nice little\n\n260\n00:14:37.860 --> 00:14:40.290\nwizard, which is pretty much the key for\nme.\n\n261\n00:14:40.290 --> 00:14:43.040\nIt really does help out in\nwhat we're going to do.\n\n262\n00:14:43.040 --> 00:14:45.536\nSo let me show you how\nthis is going to work and\n\n263\n00:14:45.536 --> 00:14:47.775\nwe'll see how this works here, okay?\n\n264\n00:14:47.775 --> 00:14:52.467\nSo the first thing that we're going to do\nis I'm going to use this statement here,\n\n265\n00:14:52.467 --> 00:14:53.290\nright up top.\n\n266\n00:14:53.290 --> 00:14:57.870\nIt's not a A hefty statement overall but\nit's just a simple\n\n267\n00:14:57.870 --> 00:15:03.160\njoined statement that we have and\nyou know just to be able to run that.\n\n268\n00:15:03.160 --> 00:15:06.358\nSo if I take a look at\nthat statement overall and\n\n269\n00:15:06.358 --> 00:15:09.972\nwe'll just do this one for\nright now and execute it.\n\n270\n00:15:09.972 --> 00:15:13.311\nIt's gonna give me essentially\nthe first name, the last name, and\n\n271\n00:15:13.311 --> 00:15:15.940\nthe job title of the people\nof this company.\n\n272\n00:15:15.940 --> 00:15:20.240\nPretty much a good description for us,\na nice little join that we have and\n\n273\n00:15:20.240 --> 00:15:26.100\nif i take a look at its execution\nplan now, I have to actually\n\n274\n00:15:26.100 --> 00:15:31.210\ndo the estimated one since I can't\nactually do it after the fact on that one.\n\n275\n00:15:31.210 --> 00:15:33.480\nI can see right here that\nit's pretty optimized.\n\n276\n00:15:33.480 --> 00:15:36.660\nI'm not actually getting a message\nthat it's not optimized at all.\n\n277\n00:15:36.660 --> 00:15:40.346\nI'm actually getting a message here that\neverything's actually run pretty decently.\n\n278\n00:15:40.346 --> 00:15:46.380\nAnd there's only a 5% cost over here at\nthe end, 80% cost on the overall query.\n\n279\n00:15:46.380 --> 00:15:50.979\nBut it didn't take a long time at all cuz\nit's a relatively small query overall.\n\n280\n00:15:50.979 --> 00:15:54.767\nNow remember that what\nwe're seeing here is what?\n\n281\n00:15:54.767 --> 00:15:59.331\nThe optimizer's best plan as\nfar as the estimate goes, okay?\n\n282\n00:15:59.331 --> 00:16:03.097\nWhen we start to see something\nlike that it's perfectly fine, but\n\n283\n00:16:03.097 --> 00:16:07.198\nwhat if you want to actually add in to\nmake it a little bit more efficient,\n\n284\n00:16:07.198 --> 00:16:10.820\nand we can do so\nby providing what we call a hint, okay?\n\n285\n00:16:10.820 --> 00:16:13.267\nA hint is essentially saying use this.\n\n286\n00:16:13.267 --> 00:16:15.330\n[LAUGH] When we talk about hint,\n\n287\n00:16:15.330 --> 00:16:17.008\nit's actually an enforcement\nmore than anything else.\n\n288\n00:16:17.008 --> 00:16:20.551\nNot a hint that's like yeah you're\ngonna use it this way okay?\n\n289\n00:16:20.551 --> 00:16:21.580\nSo we can do that.\n\n290\n00:16:21.580 --> 00:16:25.490\nWe can change the way that this query\ncan actually be run and when we do so,\n\n291\n00:16:25.490 --> 00:16:30.090\nwe're actually gonna go over here on\nthe left hand side to the object explorer.\n\n292\n00:16:31.530 --> 00:16:36.450\nAnd I'm gonna collapse down the tables\nhere and see what we can find.\n\n293\n00:16:36.450 --> 00:16:39.050\nAnd under the object\nexplorer at this point,\n\n294\n00:16:39.050 --> 00:16:43.070\nI need to actually look for\nPlan Guide is what I need to.\n\n295\n00:16:43.070 --> 00:16:47.980\nSo if I'm in the Adventure Works\n2014 database which is where I am,\n\n296\n00:16:47.980 --> 00:16:50.970\nonce I do that and\nI've collapsed down all the tables.\n\n297\n00:16:50.970 --> 00:16:54.640\nI'm going to go underneath\nthe program ability node.\n\n298\n00:16:54.640 --> 00:16:59.470\nAnd in the program ability node notice\nthat there is one called Plan Guide, okay?\n\n299\n00:16:59.470 --> 00:17:03.810\nSo this idea of the one that's\ncalled a Plan Guide at this point,\n\n300\n00:17:03.810 --> 00:17:06.780\nis actually something that\nwe can use here, okay?\n\n301\n00:17:06.780 --> 00:17:11.870\nSo if I right click,\nI can select a new Plan Guide, and\n\n302\n00:17:11.870 --> 00:17:15.910\nnow we'll take a look at what this\nnew Plan Guide is going to do.\n\n303\n00:17:15.910 --> 00:17:20.730\nSo let's say that I want to actually do\none that actually enforces us to do some\n\n304\n00:17:20.730 --> 00:17:24.830\ntype of index searching is what I want\nto do, a for seek, is what I want.\n\n305\n00:17:25.880 --> 00:17:33.880\nSo I will actually call this\none TestFORCESEEK, okay?\n\n306\n00:17:33.880 --> 00:17:35.510\nSo I'm not saying please use this.\n\n307\n00:17:35.510 --> 00:17:36.960\nI'm saying do it, okay?\n\n308\n00:17:36.960 --> 00:17:38.700\nIt's what I'm saying.\n\n309\n00:17:38.700 --> 00:17:43.380\nNow, once I do that in that particular\nplan guide and like I said,\n\n310\n00:17:43.380 --> 00:17:44.600\nthis is just a wizard.\n\n311\n00:17:44.600 --> 00:17:47.505\nI'll see if I can get\nmy mouse to work now.\n\n312\n00:17:47.505 --> 00:17:53.930\n[LAUGH]\nGreat!\n\n313\n00:17:53.930 --> 00:17:56.550\nMy mouse is frozen, here.\n\n314\n00:17:56.550 --> 00:17:57.540\nI'll just give it a moment.\n\n315\n00:17:58.950 --> 00:18:00.390\n>> There it goes.\n\n316\n00:18:00.390 --> 00:18:00.920\n>> Now I can do it.\n\n317\n00:18:00.920 --> 00:18:01.420\n>> All right.\n\n318\n00:18:03.070 --> 00:18:05.579\n>> So\nat times technology just kind of gets.\n\n319\n00:18:05.579 --> 00:18:07.440\n>> [LAUGH].\n>> I'm just going to copy this whole thing\n\n320\n00:18:08.580 --> 00:18:12.020\nand then I'm going to place it in\nthis plan guide statement here.\n\n321\n00:18:14.420 --> 00:18:18.870\nNow, this is actually the important part,\nhowever you have it typed in, if you're\n\n322\n00:18:18.870 --> 00:18:23.550\ngoing to run that query like i have it,\nit has to actually be exactly like that.\n\n323\n00:18:23.550 --> 00:18:29.120\nIf you add an extra space here or\nyou do an extra comma somewhere or\n\n324\n00:18:29.120 --> 00:18:32.560\nit doesn't like that you capitalize\none letter, it may not work.\n\n325\n00:18:32.560 --> 00:18:34.670\nNow I haven't tried every\npossible combination, but\n\n326\n00:18:34.670 --> 00:18:37.090\nthe warnings are very\nclear on Microsoft site.\n\n327\n00:18:37.090 --> 00:18:40.190\nIt's like look if this is not going\nto run the way that you would think\n\n328\n00:18:40.190 --> 00:18:43.340\nyou may need to actually go back in and\nmake sure that you copy it\n\n329\n00:18:43.340 --> 00:18:46.440\nas it actually looks in the query\nwindow and paste it in here.\n\n330\n00:18:46.440 --> 00:18:48.380\nAnd that's exactly what I did.\n\n331\n00:18:48.380 --> 00:18:53.670\nNow the other part is gonna be\nright here under Scope type, okay?\n\n332\n00:18:53.670 --> 00:18:57.670\nSo because I'm doing this with a SQL\nstatement, I'm gonna actually change\n\n333\n00:18:57.670 --> 00:19:03.810\nthe scope type to SQL here And\nthen, we are going to scroll down.\n\n334\n00:19:03.810 --> 00:19:09.540\nNow I can set up another scope batch if I\nwanted to, to add in a little bit more.\n\n335\n00:19:09.540 --> 00:19:13.040\nBut what I'm actually going to do is not\neven add in other parameters, where I can\n\n336\n00:19:13.040 --> 00:19:19.240\nadd in like if it equals four or you know\nlast name Jones, or anything like that.\n\n337\n00:19:19.240 --> 00:19:22.695\nI'm actually gonna add in down here where\nthe term hint, no longer means hint.\n\n338\n00:19:22.695 --> 00:19:23.989\nStrange, but it's true.\n\n339\n00:19:23.989 --> 00:19:26.885\n>> [LAUGH]\n>> In SQL the term hint means, do this.\n\n340\n00:19:26.885 --> 00:19:29.080\n>> [LAUGH]\n>> Is what it really means, and\n\n341\n00:19:29.080 --> 00:19:32.610\nso here, I add in an option.\n\n342\n00:19:32.610 --> 00:19:34.980\nAnd let me make sure I\ncopied this one right.\n\n343\n00:19:34.980 --> 00:19:37.770\nAnd this is gonna be called a Table Hint.\n\n344\n00:19:37.770 --> 00:19:40.680\n>> So like when the Mafia tells you,\n\n345\n00:19:40.680 --> 00:19:44.680\nthey hint that you that you should\nkeep your mouth shut, it's so\n\n346\n00:19:44.680 --> 00:19:48.290\nmuch like a subtle suggestion that\nit is a direct command, do not talk.\n\n347\n00:19:48.290 --> 00:19:51.080\n>> Yeah it's pretty close here right?\n\n348\n00:19:51.080 --> 00:19:54.580\nSo you would think that a hit means let\nme give me you just a little pointer.\n\n349\n00:19:54.580 --> 00:19:57.361\nIt's saying no,\nthis is the option you're going to choose.\n\n350\n00:19:57.361 --> 00:20:04.830\nYeah, it seems to override any idea of\na suggestion of a hint of anything.\n\n351\n00:20:04.830 --> 00:20:09.910\nAnd then it's gonna be a comma, and then\nwe're gonna add in an option here called\n\n352\n00:20:09.910 --> 00:20:15.390\nFORCESEEK, and this is going to be\nan index seek is what I'm telling it.\n\n353\n00:20:15.390 --> 00:20:19.340\nAnd I just need to make sure\nI have enough parenthesis.\n\n354\n00:20:19.340 --> 00:20:21.240\nTwo on one side, two on the other.\n\n355\n00:20:21.240 --> 00:20:23.640\nThat looks good as far as I can see.\n\n356\n00:20:23.640 --> 00:20:24.450\nOkay?\n\n357\n00:20:24.450 --> 00:20:29.180\nSo now that I've gone on, I click OK.\n\n358\n00:20:29.180 --> 00:20:31.240\nOops, I've got an error here.\n\n359\n00:20:31.240 --> 00:20:32.550\nLet me see what I did here.\n\n360\n00:20:37.050 --> 00:20:38.450\nFailed to create.\n\n361\n00:20:38.450 --> 00:20:42.370\nAll right, so\nwhy did it fail to create this thing?\n\n362\n00:20:42.370 --> 00:20:45.430\nRight, so I found the error\nthat actually happen here.\n\n363\n00:20:45.430 --> 00:20:47.790\nNotice when it tells me that\nit didn't actually create.\n\n364\n00:20:47.790 --> 00:20:50.550\nIf I go ahead and show this again,\nand it's telling me that,\n\n365\n00:20:50.550 --> 00:20:53.560\nhey this is not being used.\n\n366\n00:20:53.560 --> 00:20:56.180\nSo I actually did find out something,\n\n367\n00:20:56.180 --> 00:21:00.260\nwhich is my typing ability\nhas got the best of me again.\n\n368\n00:21:00.260 --> 00:21:03.520\nNow I zoomed in on purpose so\nthat we could see this.\n\n369\n00:21:03.520 --> 00:21:06.590\nAnd it comes down to, well,\nwhen I take a link at the table hints,\n\n370\n00:21:06.590 --> 00:21:10.610\nnotice I say HumanResource\ndown here at the bottom.\n\n371\n00:21:10.610 --> 00:21:14.270\nAnd up here, when we take a look at\nthe statement, notice it says what,\n\n372\n00:21:14.270 --> 00:21:17.560\nHumanResources is what it says.\n\n373\n00:21:17.560 --> 00:21:18.910\nSo just like I said, and\n\n374\n00:21:18.910 --> 00:21:22.080\none of the careful things especially when\nyou're actually doing this plan guide.\n\n375\n00:21:22.080 --> 00:21:26.840\nWhere it says, make sure it's identical,\nit's exact, well, that's what they mean.\n\n376\n00:21:26.840 --> 00:21:31.180\nSo I told you, any misspelling is\nreally gonna dump you out of here.\n\n377\n00:21:31.180 --> 00:21:33.160\nSo let's see what happens again.\n\n378\n00:21:33.160 --> 00:21:37.840\nAnd again, if,\nif I didn't type in that S incorrectly,\n\n379\n00:21:37.840 --> 00:21:40.330\nwhich Daniel's actually doing\na 50/50 bet at this point.\n\n380\n00:21:40.330 --> 00:21:40.840\n>> [LAUGH]\n>> [LAUGH] Whether or\n\n381\n00:21:40.840 --> 00:21:44.990\nnot this is actually gonna work,\nso I should be able to click OK.\n\n382\n00:21:44.990 --> 00:21:45.600\nLook at that.\n\n383\n00:21:45.600 --> 00:21:50.190\nIt actually worked all by just adding\nin an S or not actually adding in an S.\n\n384\n00:21:50.190 --> 00:21:53.670\nSo if you think that I did\nthat on purpose, I didn't.\n\n385\n00:21:53.670 --> 00:21:54.530\nI really didn't.\n\n386\n00:21:54.530 --> 00:21:57.130\nIt's just my typing is really that bad.\n\n387\n00:21:57.130 --> 00:22:00.020\nSo you do have to pay attention to that.\n\n388\n00:22:00.020 --> 00:22:02.050\nNow we're not done yet, okay?\n\n389\n00:22:02.050 --> 00:22:07.140\nSo now that I have this as one of my\nPlan Guides here, this TestFORCESEEK.\n\n390\n00:22:08.370 --> 00:22:13.990\nNow what I'm going to end up doing is\nI need to make sure that when this\n\n391\n00:22:13.990 --> 00:22:19.980\nstatement here runs, right,\nthat the Plan Guide is attached to it.\n\n392\n00:22:19.980 --> 00:22:22.700\nSo that way we actually see if\nit's actually going to work.\n\n393\n00:22:22.700 --> 00:22:26.770\nNow the way that we do this is we use\nsomething that we call the SQL profiler\n\n394\n00:22:26.770 --> 00:22:29.760\nand we create what we call\na trace to help us out.\n\n395\n00:22:29.760 --> 00:22:34.140\nSo if I click on tools up\nhere at the top of the screen\n\n396\n00:22:34.140 --> 00:22:36.900\nnotice that there is the SQL profiler.\n\n397\n00:22:36.900 --> 00:22:38.510\nSQL Server Profiler.\n\n398\n00:22:38.510 --> 00:22:42.100\nAnd then that will launch and\nthis is a totally separate program.\n\n399\n00:22:42.100 --> 00:22:45.640\nNotice that the Sequel server, the only\nthing that actually has to do with it,\n\n400\n00:22:45.640 --> 00:22:47.210\nis actually the profiler itself.\n\n401\n00:22:47.210 --> 00:22:51.740\nI'm going to connect to the database and\nthen we're going to call this the same\n\n402\n00:22:51.740 --> 00:22:57.330\nthing, TestFORCESEEK, okay?\n\n403\n00:22:57.330 --> 00:23:00.500\nNow I do have a lot of elements\nthat I can add in, but\n\n404\n00:23:00.500 --> 00:23:02.730\nessentially I'm just gonna\nadd in the trace name.\n\n405\n00:23:02.730 --> 00:23:06.500\nI'm not gonna save it as a file or\nto a table at this point.\n\n406\n00:23:06.500 --> 00:23:11.010\nI can even enforce how long I\nwant this to run if I choose to.\n\n407\n00:23:11.010 --> 00:23:14.670\nBut we're just going to run it for\none event so I'm not so worried about it.\n\n408\n00:23:14.670 --> 00:23:19.360\nBut the key at this point though is\nto click on the event selection, and\n\n409\n00:23:19.360 --> 00:23:22.000\nhere is the actual\ndefault ones that we see.\n\n410\n00:23:22.000 --> 00:23:24.900\nIt's going to do a security audit,\nlog-ins, log-outs.\n\n411\n00:23:24.900 --> 00:23:25.440\nMakes sense?\n\n412\n00:23:25.440 --> 00:23:26.800\nIt's a good one to do.\n\n413\n00:23:26.800 --> 00:23:30.400\nExisting conditions,\nfine as far as the session goes.\n\n414\n00:23:30.400 --> 00:23:33.080\nStored procedures again,\nit'll actually log that as well.\n\n415\n00:23:33.080 --> 00:23:35.830\nAnd then of course batch\nstatements starting and ending.\n\n416\n00:23:35.830 --> 00:23:39.970\nNow what I want to do though is I want to\nmake sure that I find out if my planned\n\n417\n00:23:39.970 --> 00:23:44.940\nguides have been run successfully or\nif they failed.\n\n418\n00:23:44.940 --> 00:23:48.720\nNow, that's actually underneath\nwhat we call a performance node.\n\n419\n00:23:48.720 --> 00:23:51.541\nBut the problem that we have,\nor at least that I have,\n\n420\n00:23:51.541 --> 00:23:53.192\nis that it's not easy to find.\n\n421\n00:23:53.192 --> 00:23:55.397\nSo here underneath trace properties, for\n\n422\n00:23:55.397 --> 00:23:59.314\nus to be able to find all the other nodes\nit has hidden This is where I think that\n\n423\n00:23:59.314 --> 00:24:03.051\nthey just carried this through from\nearlier versions of SQL Server, and\n\n424\n00:24:03.051 --> 00:24:06.840\nunless you know where to look\nyou're not going to find it, okay?\n\n425\n00:24:06.840 --> 00:24:12.200\nSo normally you might see a plus sign or\na button that says what, add?\n\n426\n00:24:12.200 --> 00:24:13.700\nThat's what I was expecting.\n\n427\n00:24:13.700 --> 00:24:17.210\nBut now notice that you're like, okay,\nI can't change anything up here,\n\n428\n00:24:17.210 --> 00:24:20.870\nI can change these check boxes but\nI really can't do much.\n\n429\n00:24:20.870 --> 00:24:26.240\nWhat we need to do is gonna be down\nhere where it says show all events,\n\n430\n00:24:26.240 --> 00:24:31.300\nand once I do that,\nthen over here on the left hand side.\n\n431\n00:24:31.300 --> 00:24:38.060\nI'm gonna scroll down to where it says\nperformance and I'm gonna expand that out,\n\n432\n00:24:38.060 --> 00:24:41.950\nand then notice that I have these two\nthat I'm gonna put a checkmark in\n\n433\n00:24:41.950 --> 00:24:46.920\nwhich is plan guide successful and\nplan guide unsuccessful, okay.\n\n434\n00:24:46.920 --> 00:24:50.010\nIf it's actually successful, I should\nend up getting result that tells me,\n\n435\n00:24:50.010 --> 00:24:52.650\nhey, the plan guide ran successfully.\n\n436\n00:24:52.650 --> 00:24:56.920\nSo when you ran the actual SQL query\nthat you actually put in the plan guide,\n\n437\n00:24:56.920 --> 00:24:59.929\nit also added in that option and\nit ran it that way.\n\n438\n00:25:01.420 --> 00:25:05.810\nIf it actually runs and it's unsuccessful,\nwell this is where you can\n\n439\n00:25:05.810 --> 00:25:09.360\npay attention to the error message\nthat it's giving you, okay?\n\n440\n00:25:09.360 --> 00:25:11.785\nIf it runs and it's unsuccessful,\nyou may end up seeing,\n\n441\n00:25:11.785 --> 00:25:14.024\nlet me verify that I'm\ntelling you the right number.\n\n442\n00:25:14.024 --> 00:25:18.133\nIt's 8-\n>> 622.\n\n443\n00:25:18.133 --> 00:25:19.247\n>> 8622.\n\n444\n00:25:19.247 --> 00:25:20.059\nSee?\nGood job.\n\n445\n00:25:20.059 --> 00:25:22.799\n8622, 8622.\n\n446\n00:25:22.799 --> 00:25:26.709\nAnd if you see that, more than likely\nit means that somewhere along the line,\n\n447\n00:25:26.709 --> 00:25:30.440\nyou didn't check for those typos,\nor there is a space or something.\n\n448\n00:25:30.440 --> 00:25:33.220\nIt let you get in there because it\nactually said everything's good,\n\n449\n00:25:33.220 --> 00:25:35.910\nbut it was a space.\n\n450\n00:25:35.910 --> 00:25:37.740\nSomething like that where\nyou had to go back and\n\n451\n00:25:37.740 --> 00:25:39.330\ncheck which yes you put in the plan guide.\n\n452\n00:25:39.330 --> 00:25:40.660\n>> And those are fun to look for.\n\n453\n00:25:40.660 --> 00:25:41.890\n>> They're hilariously fun.\n\n454\n00:25:41.890 --> 00:25:45.119\n>> [CROSSTALK] Fun characters are\nfantastic little buggers that will hose\n\n455\n00:25:45.119 --> 00:25:47.149\nyou every time, I've been down that road.\n\n456\n00:25:47.149 --> 00:25:48.185\n[LAUGH]\n>> No doubt.\n\n457\n00:25:48.185 --> 00:25:50.290\nSo, I'm gonna click on this run button.\n\n458\n00:25:50.290 --> 00:25:53.270\nAnd when I do,\nnotice it's beginning the connection,\n\n459\n00:25:53.270 --> 00:25:56.000\nnow I'm just gonna to minimize this.\n\n460\n00:25:56.000 --> 00:26:00.110\nAnd on this query right here,\nI'm just gonna run that same query again.\n\n461\n00:26:03.079 --> 00:26:05.390\nAnd execute it.\n\n462\n00:26:05.390 --> 00:26:10.710\nNow, when I do that, I should be able\nto go back over here to the profiler.\n\n463\n00:26:10.710 --> 00:26:14.480\nAnd I'm gonna pause this right now, and\n\n464\n00:26:14.480 --> 00:26:17.950\nthen, what we're looking for,\nyep, is right there.\n\n465\n00:26:17.950 --> 00:26:20.236\nNotice that the plan guide was successful,\n\n466\n00:26:20.236 --> 00:26:23.156\nand even gives me the name of\nthe one that I actually ran.\n\n467\n00:26:23.156 --> 00:26:24.330\nAnd that means what?\n\n468\n00:26:24.330 --> 00:26:28.970\nIt ran it according to the way that I had\nplanned that to run, and not according\n\n469\n00:26:28.970 --> 00:26:34.240\nto the way that the SQL optimizer said,\nabsolutely you should run it this way.\n\n470\n00:26:34.240 --> 00:26:38.310\nSo this is another way that we essentially\ncan over ride the way that that\n\n471\n00:26:38.310 --> 00:26:40.360\noptimization takes place.\n\n472\n00:26:40.360 --> 00:26:45.550\nSo if you remember back into part one when\nI said that when we talk about the idea of\n\n473\n00:26:45.550 --> 00:26:49.580\noptimization and optimizing,\nwe really do as far as users go.\n\n474\n00:26:49.580 --> 00:26:51.940\nWe have the ability to change\nessentially the T SQL,\n\n475\n00:26:51.940 --> 00:26:54.210\nin other words the way\nwe write our statements.\n\n476\n00:26:54.210 --> 00:26:58.640\nAnd optimize our statements at that point\nor we can actually even come over here to\n\n477\n00:26:58.640 --> 00:27:02.055\nthe optimization and\nsay I want to do the optimization.\n\n478\n00:27:02.055 --> 00:27:04.680\nSQL optimizer, you take a break,\n\n479\n00:27:04.680 --> 00:27:07.580\nI'm gonna override the way that you\nwould actually tend to do that instead.\n\n480\n00:27:09.310 --> 00:27:13.000\nOnce I do that, let me go ahead and\nturn that off completely.\n\n481\n00:27:13.000 --> 00:27:15.060\nI don't need it running in the background,\nso I'm gonna go ahead and\n\n482\n00:27:15.060 --> 00:27:16.330\nclose that one out.\n\n483\n00:27:16.330 --> 00:27:19.280\nBut that's just an example of some\nof the things that you can do.\n\n484\n00:27:19.280 --> 00:27:22.348\nNow if you are saying well where\ndid that command come from?\n\n485\n00:27:22.348 --> 00:27:26.128\nWell that's when you actually have more\nexperience and you understand the options\n\n486\n00:27:26.128 --> 00:27:30.190\nthat you add in that will help to change\nthe way that the optimization takes place.\n\n487\n00:27:30.190 --> 00:27:32.480\nBut that comes from more\nexperience again and\n\n488\n00:27:32.480 --> 00:27:38.060\nmore of taking a look at the series as\nwe actually go on in SQL server 2014.\n\n489\n00:27:38.060 --> 00:27:40.220\nSo just kind of realize that\nwe're just showing you,\n\n490\n00:27:40.220 --> 00:27:42.633\njust kind of the very basics and\nthe meat and potatoes of it.\n\n491\n00:27:42.633 --> 00:27:46.960\nBut overall though, using these\nplanning guides can be effective, okay?\n\n492\n00:27:46.960 --> 00:27:50.130\nBut remember it's not that\nthe optimizer does it badly.\n\n493\n00:27:50.130 --> 00:27:54.130\nThe optimizer has done a great job so\ndon't discount it.\n\n494\n00:27:54.130 --> 00:27:57.490\nBut at the same time, if you need it to\nrun in the way that you need it to because\n\n495\n00:27:57.490 --> 00:27:59.800\nyou're programming something\nin the way that you want it.\n\n496\n00:27:59.800 --> 00:28:03.409\nOr you're a developer and you go, this is\nthe way I need it to run, you have that\n\n497\n00:28:03.409 --> 00:28:06.395\nchance to do that to optimize it\nthe way that you need it instead.\n\n498\n00:28:06.395 --> 00:28:10.677\n>> Yeah, I guess as the person running\nthe thing, and you know you have\n\n499\n00:28:10.677 --> 00:28:14.762\nthat perception and conception\nof what you need toward the end.\n\n500\n00:28:14.762 --> 00:28:17.870\nThe computer doesn't know that,\nit just knows what you tell it, so\n\n501\n00:28:17.870 --> 00:28:22.040\nit can't perceive a more optimized outcome\ncuz it doesn't know that's the outcome\n\n502\n00:28:22.040 --> 00:28:22.950\nyou're looking for.\n\n503\n00:28:22.950 --> 00:28:26.100\nAll it can do is what you feed into, but\nRonnie, you've done a great job of showing\n\n504\n00:28:26.100 --> 00:28:28.460\nus how we can help the computer-\n>> [LAUGH]\n\n505\n00:28:28.460 --> 00:28:29.740\n>> Understand that hey,\n\n506\n00:28:29.740 --> 00:28:33.700\nI know you've got a great way doing it\nthere but let me show you a trick or two.\n\n507\n00:28:33.700 --> 00:28:36.500\nVery very cool stuff\nwith using optimization.\n\n508\n00:28:36.500 --> 00:28:40.520\nBut again, we have yet so\nplumb the depths of optimization.\n\n509\n00:28:40.520 --> 00:28:44.050\nWe do have a little bit more to go,\nlooks like a part three is on the horizon.\n\n510\n00:28:44.050 --> 00:28:45.850\nThat being said, I look forward\nto seeing you there, Ronnie.\n\n511\n00:28:45.850 --> 00:28:47.380\nWe look forward to seeing\nyou there as well.\n\n512\n00:28:47.380 --> 00:28:49.180\nWe're going to go ahead and\nsign off for IT ProTV.\n\n513\n00:28:49.180 --> 00:28:51.120\nI've been your host Daniel Lowry.\n\n514\n00:28:51.120 --> 00:28:51.994\n>> And I'm Ronnie Wong.\n\n515\n00:28:51.994 --> 00:28:53.855\n>> And we'll see you next time.\n\n516\n00:28:53.855 --> 00:28:55.520\n[SOUND]\n\n",
          "vimeoId": "166548596"
        },
        {
          "description": "In this episode, Daniel and Ronnie finish exploring query optimization by looking at Dynamic Management Views and the 3 Hint types (JOIN, QUERY, and Table). Also covered are JOIN types and Nested Loops.",
          "length": "1327",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-3-optimize_queries_pt3-051216-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-3-optimize_queries_pt3-051216-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-1-3-optimize_queries_pt3-051216-1-sm.jpg",
          "title": "Optimize Queries Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.134 --> 00:00:14.007\nAll right, greetings everyone and\n\n3\n00:00:14.007 --> 00:00:16.887\nwelcome to yet\nanother great episode here at ITProTV.\n\n4\n00:00:16.887 --> 00:00:18.958\nI am your host, Daniel Lowrie and\n\n5\n00:00:18.958 --> 00:00:24.320\ntoday's episode we are continuing our\nquerying Microsoft Sequel Server 2014.\n\n6\n00:00:24.320 --> 00:00:29.250\nAnd back to round out our experience\nwhen it comes to optimization\n\n7\n00:00:29.250 --> 00:00:31.040\nis our good friend, Mr. Ronnie Wong.\n\n8\n00:00:31.040 --> 00:00:33.490\nRonnie, welcome back,\nsir, and how you doing?\n\n9\n00:00:33.490 --> 00:00:36.080\n>> Doing great today,\nas we continue on taking a look\n\n10\n00:00:36.080 --> 00:00:40.680\nat the idea of optimizing our querying\ninside of the SQL server 2014.\n\n11\n00:00:40.680 --> 00:00:45.032\nAnd we do, we just have a few more\nitems we need to round up as well.\n\n12\n00:00:45.032 --> 00:00:48.630\nRemember that everything that we've shown\nyou here should help you to at least\n\n13\n00:00:48.630 --> 00:00:51.210\nunderstand that there\nare tools that are available.\n\n14\n00:00:51.210 --> 00:00:53.940\nBut as far as super\nin-depth knowledge goes,\n\n15\n00:00:53.940 --> 00:00:55.870\nwe're at least showing\nyou some of the examples.\n\n16\n00:00:55.870 --> 00:00:58.990\nBut remember that there's\na lot more complexity to\n\n17\n00:00:58.990 --> 00:01:02.190\nwhat we're actually talking about when\nyou get into the production environment.\n\n18\n00:01:02.190 --> 00:01:04.710\nAnd there are things that you do\nhave to make sure that you don't\n\n19\n00:01:04.710 --> 00:01:07.100\ndo in a production environment as well\n\n20\n00:01:07.100 --> 00:01:11.230\nthat may cause some of the headaches\nthat happen inside that.\n\n21\n00:01:11.230 --> 00:01:14.390\nNow when I mention that,\nwhat I mean is this.\n\n22\n00:01:14.390 --> 00:01:16.530\nDon't just run back into your\nproduction environment and\n\n23\n00:01:16.530 --> 00:01:19.020\ndecide, hey,\nI'm gonna start doing all this stuff,\n\n24\n00:01:19.020 --> 00:01:24.090\nbecause it can cause some havoc on\nyour machines if you're not careful.\n\n25\n00:01:24.090 --> 00:01:29.210\nSo always, before actually doing any type\nof optimization, make sure you check,\n\n26\n00:01:29.210 --> 00:01:33.010\nwhoever's actually in charge,\nthat it's okay that you do so.\n\n27\n00:01:33.010 --> 00:01:36.810\nOr it's actually underneath their watchful\neye when you do something like this.\n\n28\n00:01:36.810 --> 00:01:39.640\nDo not just go back and go, yeah,\nsure this is what I just learned,\n\n29\n00:01:39.640 --> 00:01:41.020\nlet me run it on this.\n\n30\n00:01:41.020 --> 00:01:44.390\nTest it out, verify that it\nactually works before you do that,\n\n31\n00:01:44.390 --> 00:01:46.576\nmake sure you of course\nhave a good backup.\n\n32\n00:01:46.576 --> 00:01:48.570\nI probably needed to throw that\nin on the first episode, but\n\n33\n00:01:48.570 --> 00:01:50.865\nI'm gonna throw it in now\nis what I want to do here.\n\n34\n00:01:50.865 --> 00:01:52.290\n>> [LAUGH] Better late than never,\nright Ronnie?\n\n35\n00:01:52.290 --> 00:01:54.900\n>> It is better late than never and\nhopefully you decide to\n\n36\n00:01:54.900 --> 00:01:58.955\nnot actually run all those things and\ngo hey, that actually broke my SQL server.\n\n37\n00:01:58.955 --> 00:02:02.300\n>> [LAUGH]\n>> Good thing is,\n\n38\n00:02:02.300 --> 00:02:03.500\njust kind of remember that.\n\n39\n00:02:03.500 --> 00:02:06.070\n>> Send all your hate mail\nto Ronnie@itprotv.com.\n\n40\n00:02:06.070 --> 00:02:08.204\n[LAUGH]\n>> Now today,\n\n41\n00:02:08.204 --> 00:02:11.897\nwe're gonna actually take a look at\nthree different options here as well.\n\n42\n00:02:11.897 --> 00:02:15.429\nAnd these don't take a lot of time, but\nthey do require us to mention them,\n\n43\n00:02:15.429 --> 00:02:18.624\nbecause they are a part of the idea\nof optimizing the way that we can do\n\n44\n00:02:18.624 --> 00:02:20.230\nthe querying as well.\n\n45\n00:02:20.230 --> 00:02:24.230\nOne of course, I know it's a strange\nacronym, DMV, that should bring us to\n\n46\n00:02:24.230 --> 00:02:27.678\nthe Department of Motor Vehicles but\nthat's not what's gonna happen in SQL.\n\n47\n00:02:27.678 --> 00:02:31.812\nWe're also gonna of course talk\nabout the idea of hints briefly or\n\n48\n00:02:31.812 --> 00:02:35.504\nactually joins,\nlet me make sure I'm telling you right.\n\n49\n00:02:35.504 --> 00:02:39.690\nJoins, I keep saying hints, but we'll\ntalk about hints a little bit there too.\n\n50\n00:02:39.690 --> 00:02:40.400\nAnd then, of course,\n\n51\n00:02:40.400 --> 00:02:44.245\nlastly, some of the actual specific\nthings that the SQL optimizer does.\n\n52\n00:02:44.245 --> 00:02:47.660\nTalk about what we call hash joins,\nmerge joins, and then, of course,\n\n53\n00:02:47.660 --> 00:02:49.950\nnested loop or loop joins as well.\n\n54\n00:02:49.950 --> 00:02:53.080\nAnd show you the differences\nthat go on there as well, okay?\n\n55\n00:02:53.080 --> 00:02:55.385\nSo these are some of the things that\nwe just want you to be aware of,\n\n56\n00:02:55.385 --> 00:02:59.160\ncuz they do actually take place,\nand understand what's gonna happen.\n\n57\n00:02:59.160 --> 00:03:03.930\nNow, remember that when we start to get\nmore of a handle on the very fact that we\n\n58\n00:03:03.930 --> 00:03:05.520\nneed optimization.\n\n59\n00:03:05.520 --> 00:03:09.594\nThe stuff that we've shown you shows you\nkind of piecemeal little bits of data here\n\n60\n00:03:09.594 --> 00:03:10.550\nand there, okay.\n\n61\n00:03:10.550 --> 00:03:15.267\nAnd they really do help because they're\nkind of the most helpful things that we\n\n62\n00:03:15.267 --> 00:03:17.940\ncan actually see and get displayed.\n\n63\n00:03:17.940 --> 00:03:21.720\nBut sometimes you actually need a more\ncomprehensive view of that, but\n\n64\n00:03:21.720 --> 00:03:25.430\nthe problem is what actually do you need,\nand what elements are there?\n\n65\n00:03:25.430 --> 00:03:27.300\nWell remember that there's\na physical engine and\n\n66\n00:03:27.300 --> 00:03:31.060\nthere's also that idea of the relational\nengine inside of things, which is logical.\n\n67\n00:03:31.060 --> 00:03:32.800\nAnd then there's physical,\n\n68\n00:03:32.800 --> 00:03:36.860\nwell sometimes we need a combination\nof both pieces of information.\n\n69\n00:03:36.860 --> 00:03:39.760\nThat really join us together and\nnothing that we've shown you so\n\n70\n00:03:39.760 --> 00:03:43.700\nfar really kind of combines\nall that stuff together.\n\n71\n00:03:43.700 --> 00:03:46.750\nWell, that's where the Department\nof Motor Vehicles comes in.\n\n72\n00:03:46.750 --> 00:03:50.860\nThe DMV, the dynamic management views.\n\n73\n00:03:50.860 --> 00:03:54.840\nSometimes you might also hear about\ndynamic management functions.\n\n74\n00:03:54.840 --> 00:04:00.100\nBut overall though, you might hear\nthe term dynamic management objects.\n\n75\n00:04:00.100 --> 00:04:04.770\nI was trying to say office, but\nit's actually dynamic management objects.\n\n76\n00:04:04.770 --> 00:04:08.040\nSo essentially, objects is the overall\nterm, and you might hear about views, and\n\n77\n00:04:08.040 --> 00:04:11.280\nof course you might hear about functions,\nas well.\n\n78\n00:04:11.280 --> 00:04:15.110\nA dynamic management view, of course,\nworks just like any other view does.\n\n79\n00:04:15.110 --> 00:04:17.270\nYou can create like a regular table and\n\n80\n00:04:17.270 --> 00:04:18.980\nthat will normally get\nyou the information.\n\n81\n00:04:18.980 --> 00:04:25.450\nNow the key behind this view is that it\nalready has established its hooks into\n\n82\n00:04:25.450 --> 00:04:31.450\nthe SQL server here and there are tons of\nthem that they've already created for you.\n\n83\n00:04:31.450 --> 00:04:33.690\nLet me show you what I'm talking about,\nokay?\n\n84\n00:04:33.690 --> 00:04:38.373\nSo when we actually go ahead and take\na look over here in our object explorer,\n\n85\n00:04:38.373 --> 00:04:41.607\nI'm gonna expand that out\na little bit more, okay.\n\n86\n00:04:41.607 --> 00:04:45.502\nAnd inside of\nthe AdventureWorks2014 database,\n\n87\n00:04:45.502 --> 00:04:50.830\nI'm going to click on the term View\non the node and expand that out.\n\n88\n00:04:50.830 --> 00:04:54.970\nAnd then within the nodes, notice I also\nhave another node called System Views and\n\n89\n00:04:54.970 --> 00:04:56.840\nthat one was already expanded out.\n\n90\n00:04:56.840 --> 00:05:02.840\nAnd so inside of system views, if I\nscroll down, I am actually looking for\n\n91\n00:05:02.840 --> 00:05:06.955\nwell right here where it begins, sys.dm,\n\n92\n00:05:06.955 --> 00:05:10.790\nokay, sys.dm.\n\n93\n00:05:10.790 --> 00:05:15.950\nNow when we start taking a look at this,\neven with beginning I think 2005 or\n\n94\n00:05:15.950 --> 00:05:17.690\n2008, one of those two.\n\n95\n00:05:17.690 --> 00:05:19.590\nThey added in a ton of these, so\n\n96\n00:05:19.590 --> 00:05:23.012\nall these that begin with sys.dm and\nthen underscore.\n\n97\n00:05:23.012 --> 00:05:27.320\nThese are all of the dynamic management\nviews that have already been created for\n\n98\n00:05:27.320 --> 00:05:29.010\nus, okay.\n\n99\n00:05:29.010 --> 00:05:32.900\nSo there are so many and they actually not\nonly go into the database itself which of\n\n100\n00:05:32.900 --> 00:05:35.840\ncourse is the physical\nunderlying structure of things.\n\n101\n00:05:35.840 --> 00:05:38.870\nNotice that they even get into\nthe execution side of it.\n\n102\n00:05:38.870 --> 00:05:43.720\nAnd of course the file streams and\neven other information, and\n\n103\n00:05:43.720 --> 00:05:46.800\nthe operating system itself as well, okay.\n\n104\n00:05:46.800 --> 00:05:50.180\nSo, there's a lot when you\nstart taking a look and\n\n105\n00:05:50.180 --> 00:05:52.200\nare we going over every\nsingle one of them?\n\n106\n00:05:52.200 --> 00:05:53.119\nNot even close.\n>> You betcha.\n\n107\n00:05:53.119 --> 00:05:55.038\n>> No, not even close.\n\n108\n00:05:55.038 --> 00:05:58.610\nBut just kinda realize that\nthey have all that information.\n\n109\n00:05:58.610 --> 00:06:03.760\nBecause they're actually treated as views,\nwhich essentially are tables for\n\n110\n00:06:03.760 --> 00:06:07.990\nus that have been created in\nthe background by the system itself,\n\n111\n00:06:07.990 --> 00:06:11.690\nthat means there's a lot of information\nthat you and I can call up.\n\n112\n00:06:11.690 --> 00:06:13.610\nNow, if we want to see it, but\n\n113\n00:06:13.610 --> 00:06:17.730\nlike me, I had a problem actually\nremembering exactly where that stuff was.\n\n114\n00:06:17.730 --> 00:06:20.690\nBut I can actually run a select statement.\n\n115\n00:06:20.690 --> 00:06:24.160\nAnd notice what I'm pulling from\nis one of those objects in there,\n\n116\n00:06:24.160 --> 00:06:26.320\nSYS System objects.\n\n117\n00:06:26.320 --> 00:06:30.300\nSo I just told it to go ahead and\npull up the name and then the type itself.\n\n118\n00:06:30.300 --> 00:06:34.880\nAnd of course it's type ordered\nby Descending, is what we can do.\n\n119\n00:06:34.880 --> 00:06:39.760\nAnd now if I scroll over here,\n\n120\n00:06:39.760 --> 00:06:43.040\nit will actually give us just\na little bit more detail.\n\n121\n00:06:43.040 --> 00:06:47.650\nNow not a lot of detail here, but just\nenough to give us the name and the type,\n\n122\n00:06:47.650 --> 00:06:51.630\nwhether it's a view or\nIF means inline function,\n\n123\n00:06:51.630 --> 00:06:57.290\nyou can see that, well,\nthere's a lot, there's 201 now.\n\n124\n00:06:57.290 --> 00:07:01.110\nI think with 2005 there was 170, 180.\n\n125\n00:07:01.110 --> 00:07:03.850\nNow they've added in a few more, okay.\n\n126\n00:07:03.850 --> 00:07:07.420\nSo those views are actually there for\nus, and what we want to do\n\n127\n00:07:07.420 --> 00:07:11.868\nis want to at least show you a couple\nof them, is what we want to do.\n\n128\n00:07:11.868 --> 00:07:16.310\nNow remember that what I've told you\nhere is the idea is fairly simple,\n\n129\n00:07:16.310 --> 00:07:20.336\nokay, is that we do have\nseveral categories of them.\n\n130\n00:07:20.336 --> 00:07:23.900\nSome of the most important ones of course\nactually are dealing with the idea of\n\n131\n00:07:23.900 --> 00:07:26.840\nmanaging some of the stuff\nin the operating system.\n\n132\n00:07:26.840 --> 00:07:30.560\nAnd so some of the views here actually\nmanage operating system resources\n\n133\n00:07:30.560 --> 00:07:33.660\nthat are specific just to\nthe SQL server itself and\n\n134\n00:07:33.660 --> 00:07:36.560\nthis is how complex it actually gets into.\n\n135\n00:07:36.560 --> 00:07:39.420\nAnd I'm just running these so\nthat we can at least see some of it,\n\n136\n00:07:39.420 --> 00:07:41.080\nwe're not actually gonna do a lot.\n\n137\n00:07:41.080 --> 00:07:44.910\nBut the key here is to, well the key\nhere is to not actually go that fast.\n\n138\n00:07:44.910 --> 00:07:50.006\nThe key here is to just focus\nin right here just briefly.\n\n139\n00:07:50.006 --> 00:07:54.840\nNotice that as complex as that select\nstatement part looks, it really isn't.\n\n140\n00:07:54.840 --> 00:07:56.810\nIt's just a regular select statement.\n\n141\n00:07:56.810 --> 00:07:59.531\nWe're saying hey look,\npull up the CPU count.\n\n142\n00:07:59.531 --> 00:08:05.337\nAnd then the hyper thread ratio and\nthen of course change of data type here,\n\n143\n00:08:05.337 --> 00:08:08.946\nSQL start time,\npull all that stuff up for me.\n\n144\n00:08:08.946 --> 00:08:10.598\nNow you're saying well where\nthe heck do I get that from?\n\n145\n00:08:10.598 --> 00:08:14.080\nWell again, this is where it goes\nbeyond what we're doing here and so\n\n146\n00:08:14.080 --> 00:08:17.982\nthese are things that you can find out but\nit takes you a little bit of time, but\n\n147\n00:08:17.982 --> 00:08:21.090\nnotice, I'm not having to\ngo to multiple places.\n\n148\n00:08:21.090 --> 00:08:22.170\nI'm just pulling up, what?\n\n149\n00:08:22.170 --> 00:08:28.260\nThe DMV, the Dynamic Management View,\nto actually be able to run this.\n\n150\n00:08:29.310 --> 00:08:31.630\nAnd when I select that,\nand then I press my F5.\n\n151\n00:08:31.630 --> 00:08:38.170\nNow, if I scroll out just a little bit,\nyou'll see it's not a ton of information.\n\n152\n00:08:38.170 --> 00:08:41.810\nIt tells me my logical_cpu_count,\nthe physical count.\n\n153\n00:08:41.810 --> 00:08:46.900\nI have 1 logical_cpu, 1 physical\nsays I have four gigs of memory and\n\n154\n00:08:46.900 --> 00:08:52.560\nthe time that I first started up\nthis SQL server instance, as well.\n\n155\n00:08:52.560 --> 00:08:57.440\nSo you can get information like that\nvery easily, without you having to\n\n156\n00:08:57.440 --> 00:09:01.160\nactually dig through, and go where in\nthe world can this information come from?\n\n157\n00:09:01.160 --> 00:09:03.990\nIt could come from anywhere but\nyou can do this.\n\n158\n00:09:03.990 --> 00:09:07.900\nYou can actually find information like\nthat out very quickly and easily.\n\n159\n00:09:07.900 --> 00:09:11.240\nSo not only do you have stuff like\nthat for the operating system,\n\n160\n00:09:11.240 --> 00:09:15.350\nand that is why it's different from just\nclearing data from our database here.\n\n161\n00:09:15.350 --> 00:09:19.240\nAnd at that point, you might also then\nof course then pull up things about\n\n162\n00:09:19.240 --> 00:09:23.180\nthe way that queries have\nbeen executed as well.\n\n163\n00:09:23.180 --> 00:09:26.240\nAnd this one's a little bit\nmore complicated because\n\n164\n00:09:26.240 --> 00:09:31.240\nit doesn't inner\\g join\nbetween two views here, so\n\n165\n00:09:31.240 --> 00:09:36.950\nnotice i'm doing the interjoin between one\nof the operating system types of views.\n\n166\n00:09:36.950 --> 00:09:41.080\nThe management views, and\none of the execution views as well.\n\n167\n00:09:43.430 --> 00:09:45.200\nSo, if I can actually run that.\n\n168\n00:09:45.200 --> 00:09:47.330\nLet's see if that actually\nreturns anything.\n\n169\n00:09:47.330 --> 00:09:50.240\nThere we go, that actually does\nreturn several things here.\n\n170\n00:09:50.240 --> 00:09:53.540\nWell, now I can actually\nsee other information and\n\n171\n00:09:53.540 --> 00:09:57.990\nthis one is all about the idea of\nwhat's executed on the SQL server.\n\n172\n00:09:57.990 --> 00:10:00.150\nAnd it can actually tell\nme who's logged in and\n\n173\n00:10:00.150 --> 00:10:05.070\nrun them as well as the session that\nit was run in, wait time, you name it.\n\n174\n00:10:05.070 --> 00:10:08.160\nThere's actually a lot of information\nthat's actually available for\n\n175\n00:10:08.160 --> 00:10:09.450\nus right there.\n\n176\n00:10:09.450 --> 00:10:13.370\nAnd then lastly, we have one\nabout index usage as well, okay,\n\n177\n00:10:13.370 --> 00:10:16.910\nmissing as well as other ones and so\nthese are actually very important,\n\n178\n00:10:16.910 --> 00:10:20.140\nespecially if you think that\nyou are missing an index.\n\n179\n00:10:20.140 --> 00:10:23.480\nWell, notice that this one gets\na bit more complicated here.\n\n180\n00:10:23.480 --> 00:10:24.990\nNow, I did not write these views.\n\n181\n00:10:24.990 --> 00:10:28.660\nThese were actually things that I was\nable to kind of take a look at and\n\n182\n00:10:28.660 --> 00:10:30.780\ngo hey, I know what's going on here,\n\n183\n00:10:30.780 --> 00:10:34.060\nbut just kind of realizing that\nyou can also do this as well.\n\n184\n00:10:34.060 --> 00:10:36.680\nBut this one is a little\nbit beyond complicated,\n\n185\n00:10:36.680 --> 00:10:39.500\nbut I wanted to point out,\nonce again, that it is.\n\n186\n00:10:39.500 --> 00:10:42.934\nWe're just using them essentially\nas tables is what we're doing.\n\n187\n00:10:42.934 --> 00:10:46.573\nSo it gives us all that information at\nonce place, but gets us beyond the idea of\n\n188\n00:10:46.573 --> 00:10:50.119\njust querying our database and\nunderstanding a little bit about database.\n\n189\n00:10:50.119 --> 00:10:54.139\nActually understanding the server and\neven in the background of how things\n\n190\n00:10:54.139 --> 00:10:58.478\nare actually executed, so a lot more\ncomprehensive amounts of information that\n\n191\n00:10:58.478 --> 00:11:02.320\nwe can get from using things like\nthe DMVs and the functions as well.\n\n192\n00:11:02.320 --> 00:11:06.370\n>> It's very interesting information\nactually and it can pull from this.\n\n193\n00:11:06.370 --> 00:11:10.520\nNow Ronnie, you did make mention of\nthe fact that we are gonna look at some\n\n194\n00:11:10.520 --> 00:11:14.100\ninteresting join types as well,\nif I wasn't mistaken.\n\n195\n00:11:14.100 --> 00:11:17.881\nAnd we all know how much we\nlove to run the joins, right?\n\n196\n00:11:17.881 --> 00:11:18.490\n[LAUGH]\n>> Right, and\n\n197\n00:11:18.490 --> 00:11:22.890\nwhen we start taking a look at the idea of\njoin types here, let me see if I can pull\n\n198\n00:11:22.890 --> 00:11:30.030\nup the example that I was using just a\nlittle bit earlier to help us out as well.\n\n199\n00:11:30.030 --> 00:11:33.620\nSo let me go back to this\noptimizing query one and\n\n200\n00:11:33.620 --> 00:11:36.900\nlet me take a look at\nthis particular join.\n\n201\n00:11:36.900 --> 00:11:40.680\nSo here I've got a large,\na larger join for\n\n202\n00:11:40.680 --> 00:11:46.510\nus to be able to do, and\nI'm simply going to execute that one,\n\n203\n00:11:46.510 --> 00:11:50.890\nand then a look at\nthe estimated plan here okay.\n\n204\n00:11:50.890 --> 00:11:55.530\n>> Now, what I wanted us to actually take\na look at, at this particular point as far\n\n205\n00:11:55.530 --> 00:11:59.380\nas the join types, is that when you start\ntaking a look, there's actually different\n\n206\n00:11:59.380 --> 00:12:04.390\ntypes of, actually hints I should say,\nmore than anything else,\n\n207\n00:12:04.390 --> 00:12:07.450\nwe're about to get into join types\nas well, so this is a good place.\n\n208\n00:12:07.450 --> 00:12:09.840\nWe've already taken a look\nat the plan guides,\n\n209\n00:12:09.840 --> 00:12:13.110\nwhere we were talking about\nthe idea of what hints do.\n\n210\n00:12:13.110 --> 00:12:16.260\nI need to make sure I point out that\nthere are three types of hints for us and\n\n211\n00:12:16.260 --> 00:12:19.130\nthen we'll jump into the JOINs\nhere is what we want.\n\n212\n00:12:19.130 --> 00:12:21.250\nThere's actually JOIN hints, okay.\n\n213\n00:12:21.250 --> 00:12:25.340\nAnd remember that the idea of a hint\nis not the idea of a suggesting,\n\n214\n00:12:25.340 --> 00:12:26.670\nit's enforced.\n\n215\n00:12:26.670 --> 00:12:30.293\nSo notice that in this scan that\nI'm showing you right here.\n\n216\n00:12:30.293 --> 00:12:33.939\nNot take a look at that\nstatistic one okay,\n\n217\n00:12:33.939 --> 00:12:39.070\nwell I didn't come up with this\nidea of the hash match scan.\n\n218\n00:12:39.070 --> 00:12:41.620\nThat wasn't me, which says an interjoin.\n\n219\n00:12:41.620 --> 00:12:43.170\nI told it to do an interjoin, but\n\n220\n00:12:43.170 --> 00:12:45.820\nas far as the way that it did it,\nI didn't tell it that.\n\n221\n00:12:45.820 --> 00:12:48.940\nThat's the SQL optimizer\ntelling it to do that.\n\n222\n00:12:48.940 --> 00:12:51.470\nWell if I say that I want\nto actually implement\n\n223\n00:12:51.470 --> 00:12:53.990\na join hint by using the options, and\n\n224\n00:12:53.990 --> 00:12:58.250\nthen saying this is gonna be a join hint\nnot a table hint, well, I can do that.\n\n225\n00:12:58.250 --> 00:13:01.820\nI can say,\nhere's the type of join I want you to use.\n\n226\n00:13:01.820 --> 00:13:05.560\nThere's a merge, there's a hash like this.\n\n227\n00:13:05.560 --> 00:13:08.420\nAnd then there's a loop on as well.\n\n228\n00:13:08.420 --> 00:13:12.480\nSo I can actually tell it exactly\nthe way that I want it to run.\n\n229\n00:13:12.480 --> 00:13:15.030\nSo if you wanna use hints like that,\nyou can do them on joins.\n\n230\n00:13:15.030 --> 00:13:18.640\nWe already took a look at a table\nhint inside of our plan guide before.\n\n231\n00:13:18.640 --> 00:13:21.000\nRemember that?\nIf you do that, the nice thing is,\n\n232\n00:13:21.000 --> 00:13:24.090\nyou can specify that in\nthe from clause as well.\n\n233\n00:13:24.090 --> 00:13:26.790\nIf you actually wanna type it out\ninstead of using the plan guide,\n\n234\n00:13:26.790 --> 00:13:30.970\nyou can actually say, here's where\nI'm gonna add in this hint, too.\n\n235\n00:13:30.970 --> 00:13:32.510\nAnd then of course, in the query hint.\n\n236\n00:13:32.510 --> 00:13:35.920\nAnd that's the example that we used\nin the plan guide inside of our,\n\n237\n00:13:35.920 --> 00:13:40.090\nI think it was actually part two of\nthis little miniseries that we had.\n\n238\n00:13:40.090 --> 00:13:42.746\nSo remember that the idea of hints is,\nnot a hint,\n\n239\n00:13:42.746 --> 00:13:46.345\nnot a suggestion, not a maybe, this\n\n240\n00:13:46.345 --> 00:13:51.095\nis how you're going to do it instead of\nwhat the query optimizer says to do that.\n\n241\n00:13:52.195 --> 00:13:56.005\nNow the reason why that actually goes\nwell with what we're talking about here\n\n242\n00:13:56.005 --> 00:14:00.655\nis because when you start taking up,\nremember that the query analyzer itself or\n\n243\n00:14:00.655 --> 00:14:05.270\nthe optimizer itself is what comes up\nwith these hints if we don't do anything.\n\n244\n00:14:06.310 --> 00:14:10.080\nSo what it tries to do as\nfar as the optimizer goes\n\n245\n00:14:10.080 --> 00:14:12.190\nis it tries to go in\nthe most optimal order.\n\n246\n00:14:12.190 --> 00:14:14.270\nThe most optimal order is\nwhat they call a loop.\n\n247\n00:14:14.270 --> 00:14:17.150\nAnd then after that is a merge.\n\n248\n00:14:17.150 --> 00:14:21.440\nAnd then finally after that is\nthe idea of hash type of join.\n\n249\n00:14:22.520 --> 00:14:26.820\nNow, when it comes down to each of these\nand when they're actually used and\n\n250\n00:14:26.820 --> 00:14:27.800\nwhy they're actually used.\n\n251\n00:14:27.800 --> 00:14:31.080\nI don't know if this one actually does,\nthere we go, we do have some.\n\n252\n00:14:31.080 --> 00:14:34.130\nI was trying to see if it\nactually did any other ones here.\n\n253\n00:14:34.130 --> 00:14:35.730\nBut, let me scroll in and\n\n254\n00:14:35.730 --> 00:14:38.560\nthat way we can see that there's\na couple of different types here.\n\n255\n00:14:39.590 --> 00:14:43.810\nThis first one that we see right here\nthat says clustered and it indexes and\n\n256\n00:14:43.810 --> 00:14:45.670\nthen it does a nested loop.\n\n257\n00:14:45.670 --> 00:14:52.170\nWhenever you see that more than likely\none of those tables has been indexed and\n\n258\n00:14:52.170 --> 00:14:55.940\nwe're also doing an inter join on field,\n\n259\n00:14:55.940 --> 00:14:58.848\nthat's the way it's also\nbeing indexed as well.\n\n260\n00:14:58.848 --> 00:15:02.840\nOkay so a nested loop says\nnot only do you have an index\n\n261\n00:15:02.840 --> 00:15:05.120\nwhich is our clustered\nindex category here.\n\n262\n00:15:05.120 --> 00:15:07.670\nNot only do you have that,\nbut you're also joining what\n\n263\n00:15:07.670 --> 00:15:11.670\nthat other table on this as well, and\nthat makes it much more efficient.\n\n264\n00:15:11.670 --> 00:15:15.030\nBecause I can find that\ninformation very quickly.\n\n265\n00:15:15.030 --> 00:15:20.260\nBut after that particular point, if I\njoined another table and it doesn't match,\n\n266\n00:15:20.260 --> 00:15:24.890\nwell now the query optimizer\nhas to decide what to do, okay?\n\n267\n00:15:24.890 --> 00:15:29.200\nWell, in a submerged, at this\nparticular point, if we do that, well,\n\n268\n00:15:29.200 --> 00:15:33.240\nthis actually works between two\nvery large tables fairly well.\n\n269\n00:15:33.240 --> 00:15:38.200\nBut if it can't find exactly what ends up\nhappening here, it will actually try and\n\n270\n00:15:38.200 --> 00:15:42.290\ninstead to do what they\ncall a hash match instead.\n\n271\n00:15:42.290 --> 00:15:44.850\nSo on a merge type of\njoin it says all right,\n\n272\n00:15:44.850 --> 00:15:48.740\nlet me take a look at what you joined\non as far as a key value goes.\n\n273\n00:15:48.740 --> 00:15:50.892\nWhen you do the inner\njoin on this table and\n\n274\n00:15:50.892 --> 00:15:54.287\nthen on what field well it's actually\ngoing to try and do a match.\n\n275\n00:15:54.287 --> 00:15:57.687\nOn just that field first,\nand then do that.\n\n276\n00:15:57.687 --> 00:16:00.601\nBut if it can't determine that,\nfor one reason or another,\n\n277\n00:16:00.601 --> 00:16:04.850\njust like between the nested loop and\nthis clustered index scan down here.\n\n278\n00:16:04.850 --> 00:16:09.590\nThe Hash Match says, all right, yeah,\nI don't see a particular index I like.\n\n279\n00:16:09.590 --> 00:16:11.810\nI actually don't see anything I like,\n\n280\n00:16:11.810 --> 00:16:16.380\nI'm just gonna run it row by row here and\ntry and do a match value.\n\n281\n00:16:17.540 --> 00:16:20.510\nNow don't get me wrong,\nhow does it do that?\n\n282\n00:16:20.510 --> 00:16:24.570\nWell, it really does, it does what we\nunderstand in the IT world as hashing and\n\n283\n00:16:24.570 --> 00:16:28.120\nactually takes one of those joins.\n\n284\n00:16:28.120 --> 00:16:30.460\nThe nested loop join, and\nit does a hash there.\n\n285\n00:16:30.460 --> 00:16:34.820\nAnd then it takes another one on the other\ntable here and it does a hash there and\n\n286\n00:16:34.820 --> 00:16:36.330\nit compares them.\n\n287\n00:16:36.330 --> 00:16:40.682\nAnd then it tries to join based on stuff\nlike that together to do everything\n\n288\n00:16:40.682 --> 00:16:41.745\nelse it needs to.\n\n289\n00:16:41.745 --> 00:16:45.382\nSo when you start seeing it,\nit's very difficult to see from one.\n\n290\n00:16:45.382 --> 00:16:50.391\nBut the easiest way to see the difference\nis that we take one single\n\n291\n00:16:50.391 --> 00:16:54.961\nquery instead and\nrun the different types of joins on them.\n\n292\n00:16:54.961 --> 00:16:58.124\nSo that we can see it\nin the execution plan.\n\n293\n00:16:58.124 --> 00:17:02.786\nSo the first one that I'm going to do,\nand I'm gonna control the join, and\n\n294\n00:17:02.786 --> 00:17:05.670\nthe way that I do that\nis I add in that option.\n\n295\n00:17:05.670 --> 00:17:07.680\nSo, I'm actually using a hint, why?\n\n296\n00:17:07.680 --> 00:17:09.470\nBecause a hint doesn't mean what?\n\n297\n00:17:09.470 --> 00:17:12.480\nMaybe, or let me make a mild suggestion.\n\n298\n00:17:12.480 --> 00:17:13.470\nIt means what?\n\n299\n00:17:13.470 --> 00:17:18.700\nWhen you do this join, do it the way\nthat I'm gonna tell you to do it.\n\n300\n00:17:18.700 --> 00:17:23.600\nSo let me run this without actually\nselecting that option first,\n\n301\n00:17:24.900 --> 00:17:27.100\nand I'm gonna execute.\n\n302\n00:17:27.100 --> 00:17:33.200\nThen I'm gonna go ahead and\ndisplay the estimated one.\n\n303\n00:17:33.200 --> 00:17:37.110\nAnd notice that right away it\ncame up with the nested loop,\n\n304\n00:17:37.110 --> 00:17:38.750\nthis is the most efficient.\n\n305\n00:17:38.750 --> 00:17:39.970\nAnd what has happened there?\n\n306\n00:17:39.970 --> 00:17:42.800\nEven though I typed out the query and\nI told it to do that,\n\n307\n00:17:42.800 --> 00:17:46.840\nthe optimizer says I can do a nested loop\non it so how am I going to user join?\n\n308\n00:17:46.840 --> 00:17:49.160\nI'm going to do nested loop,\nthe most efficient of them all.\n\n309\n00:17:50.250 --> 00:17:53.650\nSo that is possible if that\nis what you want to do.\n\n310\n00:17:53.650 --> 00:17:58.390\nBut if I now add this in with this option,\nor\n\n311\n00:17:58.390 --> 00:18:01.020\nthe hint, which is not a hint, go figure.\n\n312\n00:18:02.320 --> 00:18:07.510\nAnd now I run it and\nI do the estimated plan again.\n\n313\n00:18:07.510 --> 00:18:14.030\nNotice that it changes it, and\nnow the cost is a little bit greater here.\n\n314\n00:18:14.030 --> 00:18:19.790\nSo now notice that we've changed it, and\nthis is the least efficient of them all.\n\n315\n00:18:19.790 --> 00:18:23.970\nAnd so now we actually have a greater\ncost in what we're actually seeing now.\n\n316\n00:18:23.970 --> 00:18:28.510\nSo it actually took what the optimizer\nsaid was absolutely the best and\n\n317\n00:18:28.510 --> 00:18:31.640\nnow I can control it the way\nthat I want to control it.\n\n318\n00:18:31.640 --> 00:18:33.240\nAnd you may have reasons for doing that,\n\n319\n00:18:33.240 --> 00:18:37.020\nI cannot think of one right off the top\nof my head, of why I would choose to.\n\n320\n00:18:37.020 --> 00:18:39.490\nBut you can do that if you want to.\n\n321\n00:18:39.490 --> 00:18:42.062\nNow let's take a look at this merge here.\n\n322\n00:18:44.221 --> 00:18:48.622\nAnd this is not gonna work very greatly on\nmine because these are very small tables\n\n323\n00:18:48.622 --> 00:18:50.390\nthat I'm using.\n\n324\n00:18:50.390 --> 00:18:54.483\nBut this is the type that normally\nis used when we have this and\n\n325\n00:18:54.483 --> 00:18:56.905\nwe have very large tables instead.\n\n326\n00:18:59.830 --> 00:19:02.560\nAnd now, you can tell the difference.\n\n327\n00:19:02.560 --> 00:19:07.470\nIf you remember from that hash, I think it\nwas 51% is what I saw on that hash join.\n\n328\n00:19:07.470 --> 00:19:12.570\nBut now notice that this one\nnow costs about 25% here,\n\n329\n00:19:12.570 --> 00:19:17.540\nadd that merge, it knows how to actually\nmake this a little bit more efficient.\n\n330\n00:19:17.540 --> 00:19:23.150\nAnd then in the end I actually\nmanually went ahead and\n\n331\n00:19:23.150 --> 00:19:25.900\nalso set this one so\nthat we could see this too.\n\n332\n00:19:25.900 --> 00:19:31.060\nWhich is the loop join and execute that.\n\n333\n00:19:31.060 --> 00:19:33.420\nAnd also run the estimated plan here.\n\n334\n00:19:33.420 --> 00:19:37.420\nAnd you can see that this one\nis much more efficient as well.\n\n335\n00:19:37.420 --> 00:19:42.270\nSo notice that on this one it's 80% and\nwe saw the merge is about 25%.\n\n336\n00:19:42.270 --> 00:19:48.200\nAnd the regular hash is about 51% on those\njoins as far as the cost of it going.\n\n337\n00:19:48.200 --> 00:19:52.200\nSo you can see the overall difference\nas far as the optimization.\n\n338\n00:19:52.200 --> 00:19:55.590\nNow remember you might go well,\nwhy not just leave the query and\n\n339\n00:19:55.590 --> 00:19:56.950\nthe optimizer do its job.\n\n340\n00:19:57.970 --> 00:20:00.010\nThat's exactly what I would do.\n\n341\n00:20:00.010 --> 00:20:03.190\nBut remember if you're programming and\nif you're actually having to do it for\n\n342\n00:20:03.190 --> 00:20:04.630\nthe way that you need to do it.\n\n343\n00:20:04.630 --> 00:20:07.750\nOptimization doesn't necessarily\nmean the automatic way,\n\n344\n00:20:07.750 --> 00:20:09.970\nit means it's doing it\nthe way you want it to do.\n\n345\n00:20:09.970 --> 00:20:14.580\nAnd so all these techniques that we've\nshown you in these three episodes.\n\n346\n00:20:14.580 --> 00:20:18.060\nHopefully I've given you at least\na taste of some of the different\n\n347\n00:20:18.060 --> 00:20:21.350\noptions that you have in optimizing or\nquerying.\n\n348\n00:20:21.350 --> 00:20:24.722\nI was gonna say, there's no way I\nshould say that, but I did it anyways.\n\n349\n00:20:24.722 --> 00:20:29.400\nSo just realize that, yes, there are a lot\nof available tools that are out there.\n\n350\n00:20:29.400 --> 00:20:33.870\nHaving a solid understanding of\nthe foundations of those tools, and\n\n351\n00:20:33.870 --> 00:20:36.170\nwhat we can optimize is really a key.\n\n352\n00:20:36.170 --> 00:20:39.260\nBut then all the things that we showed\nwhere you can start seeing where things\n\n353\n00:20:39.260 --> 00:20:42.350\nare starting to slow\ndown really are helpful.\n\n354\n00:20:42.350 --> 00:20:45.680\nAnd then we just took a look\nat a few tools that we can use\n\n355\n00:20:45.680 --> 00:20:48.720\nthat will really help optimize\nour querying much better.\n\n356\n00:20:48.720 --> 00:20:52.590\nAnd in a very busy environment,\noptimization is absolutely key.\n\n357\n00:20:52.590 --> 00:20:55.150\n>> All right, well, Ronnie,\nwe do appreciate you\n\n358\n00:20:55.150 --> 00:21:00.120\nexplaining to us in the ways that we\ncan optimize our SQL environment,\n\n359\n00:21:00.120 --> 00:21:02.030\nmake it run as we need it to do.\n\n360\n00:21:02.030 --> 00:21:04.970\nAnd really this is for the intents and\n\n361\n00:21:04.970 --> 00:21:08.340\npurposes of getting you familiar\nwith the ways we can do.\n\n362\n00:21:08.340 --> 00:21:12.640\nLike Ronnie said it's usually just easy\nto just let the optimizer do its job.\n\n363\n00:21:12.640 --> 00:21:15.550\nIt's very good at it and why not?\n\n364\n00:21:15.550 --> 00:21:19.660\nAnd it will be context and\nexperience that brings out the reasons\n\n365\n00:21:19.660 --> 00:21:23.310\nin which you would need the other\noptimizational techniques.\n\n366\n00:21:23.310 --> 00:21:24.530\nSo just keep that in mind.\n\n367\n00:21:24.530 --> 00:21:27.250\nRight now, we just want you to be\nfamiliar with it, know how they work.\n\n368\n00:21:27.250 --> 00:21:30.420\nWhat they do so that they ask you\na question about this on the exam,\n\n369\n00:21:30.420 --> 00:21:31.610\nyou are ready to go.\n\n370\n00:21:31.610 --> 00:21:33.910\nAnd then as you build upon that knowledge,\n\n371\n00:21:33.910 --> 00:21:37.700\nthese really start to become\nmore practical for you.\n\n372\n00:21:37.700 --> 00:21:41.080\nSo just keep that in mind and\nRonnie again, thank you so much.\n\n373\n00:21:41.080 --> 00:21:42.950\nGreat demonstrations, great explanations.\n\n374\n00:21:42.950 --> 00:21:46.070\nWe appreciate you lending\nyour knowledge to us.\n\n375\n00:21:46.070 --> 00:21:47.640\nAppreciate you guys watching, but\n\n376\n00:21:47.640 --> 00:21:51.570\nit looks like we have come to the end\nof our optimization mini series.\n\n377\n00:21:51.570 --> 00:21:53.920\nHope you guys have enjoyed it, but\nwe're going to go ahead and sign off.\n\n378\n00:21:53.920 --> 00:21:56.220\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n379\n00:21:56.220 --> 00:21:57.012\n>> And I'm Ronnie Wong.\n\n380\n00:21:57.012 --> 00:21:58.159\n>> We'll see you next time.\n\n381\n00:21:58.159 --> 00:22:06.810\n[MUSIC]\n\n",
          "vimeoId": "166547784"
        },
        {
          "description": "In this episode, Daniel and Ronnie discuss how SQL Server 2014 manages Transactions to ensure the database integrity. They explain how SQL 2014 uses Commits and Rollbacks to this end as well as the difference between Implicit and Explicit transactions. Also covered are the isolation levels.",
          "length": "1792",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-2-manage_transactions-051316-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-2-manage_transactions-051316-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-2-manage_transactions-051316-1-sm.jpg",
          "title": "Manage Transactions",
          "transcript": "WEBVTT\n\n1\n00:00:00.063 --> 00:00:10.063\n[MUSIC]\n\n2\n00:00:12.231 --> 00:00:14.479\nAll right, greetings good people, and\n\n3\n00:00:14.479 --> 00:00:17.067\nwelcome to another great\nepisode of ITProTV.\n\n4\n00:00:17.067 --> 00:00:18.911\nI'm your host, Daniel Lowrie, and\n\n5\n00:00:18.911 --> 00:00:22.898\nin today's episode we are continuing on\nwith our querying Microsoft SQL Server\n\n6\n00:00:22.898 --> 00:00:26.330\n2014 and well,\nthe series that we're working on anyway.\n\n7\n00:00:26.330 --> 00:00:29.980\nAnd joining me back in the studio to help\nus out with a little more when it comes to\n\n8\n00:00:29.980 --> 00:00:33.680\ntroubleshooting and optimization is\nour good friend Mr. Ronnie Wong.\n\n9\n00:00:33.680 --> 00:00:34.600\nRonnie, welcome back, Sir.\n\n10\n00:00:34.600 --> 00:00:35.410\nHow's it going today?\n\n11\n00:00:35.410 --> 00:00:36.280\n>> It's going great.\n\n12\n00:00:36.280 --> 00:00:40.760\nAs we continue on to take a look at this\nidea of optimizing and understanding,\n\n13\n00:00:40.760 --> 00:00:44.360\nof course, then the background\nof how Sequel ends up working.\n\n14\n00:00:44.360 --> 00:00:48.350\nNow, the great thing is all the stuff that\nwe've already learned in the series so\n\n15\n00:00:48.350 --> 00:00:52.080\nfar is really going to help us\nbecause we can actually still use\n\n16\n00:00:52.080 --> 00:00:54.910\neven the little sequel query analyzer,\nright?\n\n17\n00:00:54.910 --> 00:00:57.500\nTo help us,\nto be able to manage our Sequel server.\n\n18\n00:00:57.500 --> 00:01:00.960\nSo at this point, that's what we're\ndoing is we're talking about the idea of\n\n19\n00:01:00.960 --> 00:01:03.330\nmore management items that\nneed to accomplish, and\n\n20\n00:01:03.330 --> 00:01:07.150\nnot necessarily just extracting\ndata out of the database.\n\n21\n00:01:07.150 --> 00:01:12.380\nNow today's episode, right as we have\nit titled as Managed Transactions,\n\n22\n00:01:12.380 --> 00:01:16.770\nwhat we have to actually understand then\nthat when we start talking about getting\n\n23\n00:01:16.770 --> 00:01:20.490\ndata out of the database, or even doing\ndata entry, or whatever we actually end up\n\n24\n00:01:20.490 --> 00:01:25.880\ndoing, we have to be able to keep that\ndatabase preserved as it is, in the way\n\n25\n00:01:25.880 --> 00:01:29.600\nthat it is here, ensuring that we don't\nend up with any kind of interruptions that\n\n26\n00:01:29.600 --> 00:01:34.130\nend up happening where the data that's\npulled out doesn't mean anything, right?\n\n27\n00:01:34.130 --> 00:01:39.750\nSo, Sequel itself has tools that are built\nin, tools that you and I can end up using.\n\n28\n00:01:39.750 --> 00:01:43.247\nAnd also a set of controls that you and\nI can end up using to help\n\n29\n00:01:43.247 --> 00:01:48.047\nus to make sure that when we write\nsomething, when we actually something,\n\n30\n00:01:48.047 --> 00:01:51.614\nwe actually do something in terms\nof modifying the data base,\n\n31\n00:01:51.614 --> 00:01:56.277\nthat it actually makes it work completely,\nwholly, or it doesn't work at all,\n\n32\n00:01:56.277 --> 00:02:00.400\nokay, and that's actually\nthe key behind the whole thing.\n\n33\n00:02:00.400 --> 00:02:01.220\nAnything that you and\n\n34\n00:02:01.220 --> 00:02:05.980\nI do against the sequel database\nessentially is called a transaction.\n\n35\n00:02:05.980 --> 00:02:08.640\nNow, a transaction is exactly\nlike it sounds, and Daniel and\n\n36\n00:02:08.640 --> 00:02:10.310\nI were talking about this right before.\n\n37\n00:02:10.310 --> 00:02:15.120\nIf Daniel chooses to sell me something,\nright now I'm not going to actually do it,\n\n38\n00:02:15.120 --> 00:02:17.570\nbut let's say Daniel chooses\nto sell me his pocket knife,\n\n39\n00:02:17.570 --> 00:02:18.930\nwhich he's not going to do.\n\n40\n00:02:18.930 --> 00:02:20.960\nIf he actually chooses to,\n\n41\n00:02:20.960 --> 00:02:23.940\nright during that whole time,\nI can have the money ready.\n\n42\n00:02:23.940 --> 00:02:27.420\nDaniel can have the knife ready\nto actually be able to sell me\n\n43\n00:02:27.420 --> 00:02:29.140\nperfectly fine.\n\n44\n00:02:29.140 --> 00:02:32.810\nAt any point during that, until the point\nwhere the money exchanges hands and\n\n45\n00:02:32.810 --> 00:02:35.590\nI get the actual knife in my hand here,\n\n46\n00:02:35.590 --> 00:02:40.500\nthat transaction is not complete until\nboth sides actually have agreed.\n\n47\n00:02:40.500 --> 00:02:43.310\nSo, the very fact is Daniel could be\nlooking at [INAUDIBLE] as he's actually\n\n48\n00:02:43.310 --> 00:02:46.270\nseeing the money I'm handing to him, and\nhe looks at his knife and goes, I really\n\n49\n00:02:46.270 --> 00:02:50.750\nlike that knife, and he can withdraw that\ntransaction, and from that point here\n\n50\n00:02:50.750 --> 00:02:55.130\nthat deal is done, and that means that\non my side I didn't get anything.\n\n51\n00:02:55.130 --> 00:02:58.640\nI essentially have what I have,\nDaniel what he has as well.\n\n52\n00:02:58.640 --> 00:03:00.780\nAnd then that actually remains at stake.\n\n53\n00:03:00.780 --> 00:03:04.180\nWell, the database is\nexactly the same way.\n\n54\n00:03:04.180 --> 00:03:07.800\nThe very fact is that when we actually\nstart to try and get data into\n\n55\n00:03:07.800 --> 00:03:12.150\nthe database, or when we try and actually\nextract data as well, we need to make sure\n\n56\n00:03:12.150 --> 00:03:16.410\nthat data we extract is meaningful and\nwhole, and also any data that we\n\n57\n00:03:16.410 --> 00:03:20.300\nput in is not going to leave things that\nare going to be a little bit unsettling.\n\n58\n00:03:20.300 --> 00:03:22.890\nIn terms of, I go in and I do a query.\n\n59\n00:03:22.890 --> 00:03:25.310\nAnd I'm wondering, like,\nwhat the heck does this data even mean?\n\n60\n00:03:25.310 --> 00:03:29.270\nIt looks almost like the whole name\nof something, but it really isn't.\n\n61\n00:03:29.270 --> 00:03:30.770\nAnd it looks like garbage, or\n\n62\n00:03:30.770 --> 00:03:33.550\nwhatever it might be,\nthat is stuff that we don't want to do.\n\n63\n00:03:33.550 --> 00:03:36.610\nNow, you might be wondering,\nlike, what types of things.\n\n64\n00:03:36.610 --> 00:03:40.990\nCould happen that would interrupt\nthings like, well, transactions at all.\n\n65\n00:03:40.990 --> 00:03:45.230\nWell let's take for an example, the idea\nof service interruption too, okay.\n\n66\n00:03:45.230 --> 00:03:49.480\nNow, a lot of times this can actually be\nsomething just as simple as disconnecting\n\n67\n00:03:49.480 --> 00:03:50.970\nfrom the internet.\n\n68\n00:03:50.970 --> 00:03:53.930\nWell, especially if your database\nis actually located somewhere else.\n\n69\n00:03:53.930 --> 00:03:57.200\nIf you can't connect to that\ndatabase server, and there it is.\n\n70\n00:03:57.200 --> 00:03:58.660\nLet's say that you were connected, and\n\n71\n00:03:58.660 --> 00:04:02.220\nyou are in the middle of typing in\nwhatever data entry that you're doing,\n\n72\n00:04:02.220 --> 00:04:06.740\nat that point if you can't actually\nenter in the whole thing, well, and\n\n73\n00:04:06.740 --> 00:04:10.310\nyou've entered in let's say half of what\nyou actually thought you were entering in.\n\n74\n00:04:10.310 --> 00:04:14.410\nWell, what happens to that transaction\nthat's in the middle of that state, right?\n\n75\n00:04:14.410 --> 00:04:16.280\nAnd all of a sudden the connection drops,\n\n76\n00:04:16.280 --> 00:04:19.290\nwhether you're actually inside of\nyour network or outside the network.\n\n77\n00:04:19.290 --> 00:04:21.030\nAnd what happens to that transaction?\n\n78\n00:04:21.030 --> 00:04:23.590\nOkay.\nLet's go even worse than that.\n\n79\n00:04:23.590 --> 00:04:26.570\nLet's say that you're actually in the\nmiddle of doing the same thing, doing some\n\n80\n00:04:26.570 --> 00:04:30.050\ntype of data entry, and now all of the\nsudden, you actually get a power outage,\n\n81\n00:04:30.050 --> 00:04:33.750\na shortage that ends up happening\nright then, and you're mid-sentence or\n\n82\n00:04:33.750 --> 00:04:38.010\nyou're in mid-word typing, and you know\nthat you were connected to the database.\n\n83\n00:04:38.010 --> 00:04:40.620\nWell, did that entry get saved or\nnot, as well?\n\n84\n00:04:41.900 --> 00:04:45.410\nSo, partial transactions,\nstuff like that can also end up happening.\n\n85\n00:04:45.410 --> 00:04:46.620\nYou get interrupted.\n\n86\n00:04:46.620 --> 00:04:50.370\nHere it is, I'm in the middle of typing,\nand Daniel asked me a question, I stop,\n\n87\n00:04:50.370 --> 00:04:55.430\nand of course that question I answer never\nlasts for just three or four seconds here.\n\n88\n00:04:55.430 --> 00:04:57.680\nYou know me, it's got to be a part 2,\npart 3, part 4.\n\n89\n00:04:57.680 --> 00:04:59.072\n>> [LAUGH]\n>> To that answer.\n\n90\n00:04:59.072 --> 00:05:02.119\nWell, when stuff like that happens,\nand I come back, and I go,\n\n91\n00:05:02.119 --> 00:05:04.630\nI wonder where I was when I left off here?\n\n92\n00:05:04.630 --> 00:05:06.240\nWell, it could be that there it is.\n\n93\n00:05:06.240 --> 00:05:09.370\nThere's another part that's actually\nkind of left hanging out there.\n\n94\n00:05:09.370 --> 00:05:12.940\nWell, that's something that the SQL\nserver will not actually allow.\n\n95\n00:05:12.940 --> 00:05:15.580\nSo there's actually those controls\nthat we talked about, and\n\n96\n00:05:15.580 --> 00:05:17.940\nthis is actually very important for us.\n\n97\n00:05:17.940 --> 00:05:24.220\nAny changes, essentially, that we make to\nthe SQL database itself, whether by using\n\n98\n00:05:24.220 --> 00:05:29.100\nDML, the data manipulation language,\nor the DDL statements here.\n\n99\n00:05:29.100 --> 00:05:32.920\nThey're actually always going to be\nseen in the form of a transaction.\n\n100\n00:05:32.920 --> 00:05:36.440\nAnd that means either they're\nactually going to be completed and\n\n101\n00:05:36.440 --> 00:05:42.030\nwhole fully, or they're not going\nto actually be there at all.\n\n102\n00:05:42.030 --> 00:05:44.100\nSo it's actually either all or nothing, or\n\n103\n00:05:44.100 --> 00:05:47.120\nit's actually going to be no partials,\nnothing at all.\n\n104\n00:05:47.120 --> 00:05:52.640\nSo there's no halfway, like Daniel,\nI drove over half way to meet you,\n\n105\n00:05:52.640 --> 00:05:56.420\nI should get this deal here, and Daniel\ncan say no, the transaction's not done,\n\n106\n00:05:56.420 --> 00:06:00.290\nit's not done, and that's the way that\nthe database is actually gonna be,\n\n107\n00:06:00.290 --> 00:06:02.630\nand this is very, very important.\n\n108\n00:06:02.630 --> 00:06:06.670\nThe reason why is, unless you're actually\njust in the testing environment,\n\n109\n00:06:06.670 --> 00:06:10.440\nright, you're not the only one\naccessing that database and\n\n110\n00:06:10.440 --> 00:06:12.300\nsometimes you're not\nthe only one looking for\n\n111\n00:06:12.300 --> 00:06:16.850\nthat specific piece of information either,\nor just for that one information.\n\n112\n00:06:16.850 --> 00:06:21.510\nSo it is very possible that at the same\ntime or very close to the same time,\n\n113\n00:06:21.510 --> 00:06:25.560\nright, that you may actually be\nlooking for a set of information,\n\n114\n00:06:25.560 --> 00:06:29.070\na result set that you have in your\ndatabase, that Daniel could be looking for\n\n115\n00:06:29.070 --> 00:06:32.320\nthat same information at\nthe same time as well.\n\n116\n00:06:32.320 --> 00:06:34.630\nWell we need to make sure\nit's consistent then, right?\n\n117\n00:06:34.630 --> 00:06:38.880\nThat somewhere a change didn't happen\nthat would give you a different result\n\n118\n00:06:38.880 --> 00:06:40.420\nthan it gave Daniel.\n\n119\n00:06:40.420 --> 00:06:43.800\nSo we have to actually pay attention\nto some of these things, and\n\n120\n00:06:43.800 --> 00:06:46.930\nthe way it begins is by understanding\nthat there are properties,\n\n121\n00:06:46.930 --> 00:06:51.660\nthen, to every transaction that we\nend up running inside a SQL server.\n\n122\n00:06:51.660 --> 00:06:54.300\nLet me show you the four main\nproperties here on my screen,\n\n123\n00:06:54.300 --> 00:06:55.840\nand that should help us out.\n\n124\n00:06:55.840 --> 00:06:59.460\nNow, there's nothing fancy, these\nare just the four main properties here.\n\n125\n00:06:59.460 --> 00:07:00.630\nBut a good thing to remember,\n\n126\n00:07:00.630 --> 00:07:03.980\nthat every transaction has to keep\nthese things consistent here.\n\n127\n00:07:03.980 --> 00:07:07.240\nThe first one is by far the hardest\nword for me to pronounce here.\n\n128\n00:07:07.240 --> 00:07:08.780\nAtomicity, okay?\n\n129\n00:07:08.780 --> 00:07:10.090\nAtomicity here.\n\n130\n00:07:10.090 --> 00:07:13.930\nEssentially says that,\nlook every transaction is whole or\n\n131\n00:07:13.930 --> 00:07:16.090\ncomplete, or is nothing.\n\n132\n00:07:16.090 --> 00:07:17.080\nThat's it.\n\n133\n00:07:17.080 --> 00:07:21.260\nSo every single transaction that we\nmake there is no partial nature to it.\n\n134\n00:07:21.260 --> 00:07:23.380\nThere's not incremental nature to it.\n\n135\n00:07:23.380 --> 00:07:26.910\nIt's all or\nnothing in every transaction that we make.\n\n136\n00:07:26.910 --> 00:07:30.830\nSo if I'm just doing a small,\nselect statement that's a complete,\n\n137\n00:07:30.830 --> 00:07:33.860\nautomisized type of transaction.\n\n138\n00:07:33.860 --> 00:07:37.520\nThat's technically what they call\na read only type of transaction.\n\n139\n00:07:37.520 --> 00:07:40.870\nBut that's a little bit beyond\nwhat we're talking about here.\n\n140\n00:07:40.870 --> 00:07:42.700\nBut overall, though,\nit has to be complete.\n\n141\n00:07:42.700 --> 00:07:47.460\nI could write the most gigantic one ever\nand include in variables left and right.\n\n142\n00:07:47.460 --> 00:07:49.204\nThat's all that one transaction.\n\n143\n00:07:49.204 --> 00:07:52.804\nIn other words,\neverything has to actually go perfectly or\n\n144\n00:07:52.804 --> 00:07:54.748\nthe entire transaction fails.\n\n145\n00:07:54.748 --> 00:07:57.512\nWe do not get messages\ninside of SQL server,\n\n146\n00:07:57.512 --> 00:08:01.099\ninside of that query window,\nthat says, hey, Ronnie,\n\n147\n00:08:01.099 --> 00:08:06.060\nthe first five lines of your transaction\nran but the other five didn't run.\n\n148\n00:08:06.060 --> 00:08:08.110\nIt's essentially saying, it failed.\n\n149\n00:08:08.110 --> 00:08:12.660\nIt could actually fail at line one or\nit can fail at line 52 if it wants to, but\n\n150\n00:08:12.660 --> 00:08:16.656\nwith the idea of Atomicity here it\njust says look, the very fact is.\n\n151\n00:08:20.021 --> 00:08:21.400\nWhat actually is going to happen is,\n\n152\n00:08:21.400 --> 00:08:24.050\neither the whole things going to run or\nit's not.\n\n153\n00:08:24.050 --> 00:08:26.210\nThat's that thing.\n\n154\n00:08:26.210 --> 00:08:29.080\nThe other thing is actually just\nas important which is the idea\n\n155\n00:08:29.080 --> 00:08:30.860\nhere of consistency.\n\n156\n00:08:30.860 --> 00:08:33.890\nOne of the chief aspects of the way\nthat sequel service is designed and\n\n157\n00:08:33.890 --> 00:08:36.770\nmost relation node databases are designed\n\n158\n00:08:36.770 --> 00:08:41.890\nis to ensure that there's a consistent\nstate inside of our database.\n\n159\n00:08:41.890 --> 00:08:45.640\nOkay now when we talk about\nthe idea of a consistent state here\n\n160\n00:08:45.640 --> 00:08:48.300\nthere's really two things\nthat end up happening right.\n\n161\n00:08:48.300 --> 00:08:53.140\nOur data is pretty much supposed to be\nstatic as much as possible here, but\n\n162\n00:08:53.140 --> 00:08:54.510\nthe idea is fairly simple.\n\n163\n00:08:54.510 --> 00:08:59.560\nIf we are in mid transaction and\nsomething happens to that transaction, so\n\n164\n00:08:59.560 --> 00:09:04.010\nwe're gonna mention power outage,\ndisconnection, whatever it might be, okay.\n\n165\n00:09:04.010 --> 00:09:07.840\nThere's only one or two options\nthat we actually have access to.\n\n166\n00:09:07.840 --> 00:09:11.510\nEither the transaction will be committed,\nokay.\n\n167\n00:09:11.510 --> 00:09:13.820\nIn other words, written to the database.\n\n168\n00:09:13.820 --> 00:09:18.550\nAnd that database now says,\nI have a complete record that's written or\n\n169\n00:09:18.550 --> 00:09:21.730\nIt actually says look,\nin the middle of this interruption\n\n170\n00:09:21.730 --> 00:09:24.980\nwe didn't get the whole thing,\nwe only got a partial thing or\n\n171\n00:09:24.980 --> 00:09:29.920\nwe didn't get anything, it actually rolls\nit back to the previous state instead.\n\n172\n00:09:29.920 --> 00:09:33.360\nSo in other words before anything\nwas actually even written.\n\n173\n00:09:33.360 --> 00:09:36.880\nAnd that way regardless of when\nsomething actually appears again\n\n174\n00:09:36.880 --> 00:09:38.870\nyour Internet connection pops back up or\n\n175\n00:09:38.870 --> 00:09:43.490\nyour network connection pops back up, your\npower comes back on you're not in that\n\n176\n00:09:43.490 --> 00:09:47.990\nhalfway through of was I doing it right,\nor was I halfway through here?\n\n177\n00:09:47.990 --> 00:09:50.140\nDid I actually have to make this change or\nnot?\n\n178\n00:09:50.140 --> 00:09:53.250\nIt absolutely just reverts it back to\nthat state just like you didn't do\n\n179\n00:09:53.250 --> 00:09:54.180\nanything at all.\n\n180\n00:09:54.180 --> 00:09:56.670\n>> So, Ronnie, if I run a statement or\n\n181\n00:09:56.670 --> 00:10:01.000\na query against my SQL server,\nand basically it's saying,\n\n182\n00:10:01.000 --> 00:10:05.970\nI'm gonna load that entire statement into\nthe server itself and then I'll run it.\n\n183\n00:10:05.970 --> 00:10:07.360\nAnd if in the middle of that running,\n\n184\n00:10:07.360 --> 00:10:10.410\nsomething happens,\nI'll just roll back to where I was before.\n\n185\n00:10:10.410 --> 00:10:14.110\n>> Right, yeah, and that again,\nis keeping the consistency, right?\n\n186\n00:10:14.110 --> 00:10:18.850\nWhat we don't want is Daniel doing\nthat and it partially updated.\n\n187\n00:10:18.850 --> 00:10:22.030\nI go and do a query, and\nI get this partial response back.\n\n188\n00:10:22.030 --> 00:10:25.030\nAnd I have to go an figure out what\nthat partial response really means.\n\n189\n00:10:25.030 --> 00:10:27.560\nDoes that mean that It\nmeant to be in there, or\n\n190\n00:10:27.560 --> 00:10:30.140\nis that something accidentally\nthat the SQL server did?\n\n191\n00:10:30.140 --> 00:10:34.030\nThe whole idea behind consistency is that\nwe know that the data that we're actually\n\n192\n00:10:34.030 --> 00:10:38.000\nquerying is absolutely supposed\nto be in the database itself.\n\n193\n00:10:38.000 --> 00:10:42.510\nThere is no idea of, oops, SQL server\naccidentally updated this record.\n\n194\n00:10:42.510 --> 00:10:43.730\nIt shouldn't happen that way.\n\n195\n00:10:43.730 --> 00:10:49.100\n>> Now does the server, say I'm sending\na query to the server itself and\n\n196\n00:10:49.100 --> 00:10:53.570\nit only receives a part\nof that actual query.\n\n197\n00:10:53.570 --> 00:10:57.230\nWill it then just not run the query\nbecause it says this is incomplete?\n\n198\n00:10:57.230 --> 00:11:01.000\n>> Right, that's exactly what ends up\nhappening because it's saying look\n\n199\n00:11:01.000 --> 00:11:03.890\nyou're trying to do something but\nI can't really read the whole thing and\n\n200\n00:11:03.890 --> 00:11:08.350\nI'd rather not try and give you an answer\nthat may or may not, the whole idea right\n\n201\n00:11:08.350 --> 00:11:13.660\nbehind the relational database is fairly\nsimple for us and for Daniel here.\n\n202\n00:11:13.660 --> 00:11:18.130\nIs that it wants to make sure that it can\nreturn to you the exact information you're\n\n203\n00:11:18.130 --> 00:11:22.420\nlooking for not the idea of\nguessing that there's an exact,\n\n204\n00:11:22.420 --> 00:11:24.840\nthere's a possibility of multiple things.\n\n205\n00:11:24.840 --> 00:11:26.750\nNow don't get me wrong,\nyou set a filter and\n\n206\n00:11:26.750 --> 00:11:31.240\nyou can give yourself a range, but\nif Daniel was really looking for something\n\n207\n00:11:31.240 --> 00:11:36.290\nsuper specific it should absolutely return\nto him the one record that matches every\n\n208\n00:11:36.290 --> 00:11:41.060\nrequirement that he pulls in there It\nshouldn't just go well it almost matches.\n\n209\n00:11:41.060 --> 00:11:44.750\nI've got eight of the nine and I know that\nthe tenth one's supposed to be there.\n\n210\n00:11:44.750 --> 00:11:47.880\nBut it's just not showing up\nthe way that it needs to.\n\n211\n00:11:47.880 --> 00:11:49.290\nIt's not gonna do that.\n\n212\n00:11:49.290 --> 00:11:52.040\nSo it is all about being\nable to provide that.\n\n213\n00:11:52.040 --> 00:11:53.760\nAnd now we actually\nhave these last two and\n\n214\n00:11:53.760 --> 00:11:56.810\nthe properties of every transaction\nthat we'll also see as well.\n\n215\n00:11:56.810 --> 00:12:01.240\nSo here on the screen we talked about\nthe idea here of Atomicity, and\n\n216\n00:12:01.240 --> 00:12:04.700\nthen consistency, and then also isolation.\n\n217\n00:12:04.700 --> 00:12:08.580\nEvery single transaction that we make,\nthere should not be any transactions that\n\n218\n00:12:08.580 --> 00:12:13.990\nend up going on on the actual sequel\nserver that will conflict with each other.\n\n219\n00:12:13.990 --> 00:12:16.790\nAnd the way that this ends up\nworking is fairly a simple idea, and\n\n220\n00:12:16.790 --> 00:12:18.410\nit really does work here.\n\n221\n00:12:18.410 --> 00:12:22.060\nIs that if we have two transactions\nthat are essentially heading for\n\n222\n00:12:22.060 --> 00:12:25.220\nthe same database,\none of them's gonna have to wait.\n\n223\n00:12:25.220 --> 00:12:27.780\nOkay, that's just the nature of it, right?\n\n224\n00:12:27.780 --> 00:12:31.240\nSo it's not two people trying to\nactually get the information exactly at\n\n225\n00:12:31.240 --> 00:12:32.270\nthe same time.\n\n226\n00:12:32.270 --> 00:12:33.790\nNow to you and I, it might seem like that,\n\n227\n00:12:33.790 --> 00:12:36.570\nbecause it happens within\nmilliseconds a lot of times.\n\n228\n00:12:36.570 --> 00:12:38.640\nBut overall though,\nwhen it comes down to that,\n\n229\n00:12:38.640 --> 00:12:41.950\nthere's a decision that's made who's\nactually gonna get accessed and\n\n230\n00:12:41.950 --> 00:12:46.690\nthen who's going to get blocked until that\nperson gets the information they need,\n\n231\n00:12:46.690 --> 00:12:50.220\nthen the other one can run and\ndo its querying as well.\n\n232\n00:12:50.220 --> 00:12:53.350\nSo Isolation is actually one\nof those things that we have.\n\n233\n00:12:53.350 --> 00:12:58.410\nI should not be able, then,\nto essentially write a query that blocks\n\n234\n00:12:58.410 --> 00:13:05.170\nDaniel's query from happening unless, not\nthat I'm trying to do it on purpose here.\n\n235\n00:13:05.170 --> 00:13:06.490\nUnless I get there first.\n\n236\n00:13:06.490 --> 00:13:08.410\nThat's what it comes down to.\n\n237\n00:13:08.410 --> 00:13:10.240\nSo that also happens too.\n\n238\n00:13:10.240 --> 00:13:13.580\nAnd of course, the last one\nhere is the idea of Durability.\n\n239\n00:13:13.580 --> 00:13:18.790\nEvery transaction that we have that\nwe actually can do, and write here.\n\n240\n00:13:18.790 --> 00:13:24.250\nEnds up being, or ends up enduring\neven through interruptions, okay?\n\n241\n00:13:24.250 --> 00:13:26.400\nSo, that means if we ride a transaction,\n\n242\n00:13:26.400 --> 00:13:28.570\nregardless of what happens after that,\nokay?\n\n243\n00:13:28.570 --> 00:13:32.480\nIf it's one second afterwards,\nthe information's already there.\n\n244\n00:13:32.480 --> 00:13:34.730\nSo, what that means is this, right?\n\n245\n00:13:34.730 --> 00:13:39.700\nIs that when we have a transaction that's\nactually committed, it's all completed and\n\n246\n00:13:39.700 --> 00:13:42.420\ndone before the interruption, okay?\n\n247\n00:13:42.420 --> 00:13:46.380\nOr if it's uncommitted, in otherwords\nit's not actually written anywhere.\n\n248\n00:13:46.380 --> 00:13:50.090\nIt's rolled back so,\nwe're never left with this possibility and\n\n249\n00:13:50.090 --> 00:13:53.980\nthis idea that there is partial data\nout there that shouldn't be out or\n\n250\n00:13:53.980 --> 00:13:56.710\nthere's partial data out there\nthat should be out there.\n\n251\n00:13:56.710 --> 00:13:59.810\nSo, every single transaction that we make;\n\n252\n00:13:59.810 --> 00:14:03.900\nall of these are actually part of\nthe properties of those transactions.\n\n253\n00:14:03.900 --> 00:14:06.860\nthat we actually have to be\nable to understand and do.\n\n254\n00:14:06.860 --> 00:14:07.570\nOkay.\n\n255\n00:14:07.570 --> 00:14:09.420\nNow how do we do that?\n\n256\n00:14:09.420 --> 00:14:12.400\nWell a lot of times it's already\nbeing done in the background, so\n\n257\n00:14:12.400 --> 00:14:16.050\nthat's the great thing that the sequel\nserver in most of the relation database\n\n258\n00:14:16.050 --> 00:14:20.840\nsystems out there already do all of\nthis and we really do not have to worry.\n\n259\n00:14:20.840 --> 00:14:25.400\nThe only time that we really start to\nworry about this and this gets a little\n\n260\n00:14:25.400 --> 00:14:30.790\nbit beyond what our course is doing,\nis if we absolutely wanna make sure\n\n261\n00:14:30.790 --> 00:14:36.480\nthat we are controlling when these\ntransactions are taking place here,\n\n262\n00:14:36.480 --> 00:14:40.190\nand we can actually use of course some\nterminology and some of the SQL querying\n\n263\n00:14:40.190 --> 00:14:44.360\nthat we've learned about here to\nhelp us to control that as well.\n\n264\n00:14:44.360 --> 00:14:45.050\nOkay?\n\n265\n00:14:45.050 --> 00:14:48.590\nSo that's what we're gonna take a look at,\nat this particular point, and\n\n266\n00:14:48.590 --> 00:14:53.060\nstart to see how some of this stuff ends\nup working in terms of controlling these\n\n267\n00:14:53.060 --> 00:14:56.030\ntransactions and working, okay?\n\n268\n00:14:56.030 --> 00:15:00.570\nNow, one of the first things we wanna\ntalk about before we go into that is that\n\n269\n00:15:00.570 --> 00:15:04.470\nthis actually not only works at\nthe idea of the table level.\n\n270\n00:15:04.470 --> 00:15:05.230\nOkay.\n\n271\n00:15:05.230 --> 00:15:11.340\nWe can actually use things that allow us\nto be able to write, well sort of like\n\n272\n00:15:11.340 --> 00:15:16.350\nquerying here our database, but actually\nhave some management function to it and\n\n273\n00:15:16.350 --> 00:15:20.820\nwhat we can actually do is actually\nembark a transaction as well.\n\n274\n00:15:20.820 --> 00:15:22.550\nAnd that way what we can do is say hey,\n\n275\n00:15:22.550 --> 00:15:27.450\nwhen we mark this transaction we give\nit a name and then we can go back in\n\n276\n00:15:27.450 --> 00:15:32.740\nlater on that will allow us to restore\nup into that point if we want to.\n\n277\n00:15:32.740 --> 00:15:36.578\nSo we might actually go ahead and do that\nto say look, I wanna make sure that I put\n\n278\n00:15:36.578 --> 00:15:40.141\nthese marks into my statements here\nas it's written into the database.\n\n279\n00:15:40.141 --> 00:15:44.573\nThen I have the point that I can actually\ncall back up sooner or later and so\n\n280\n00:15:44.573 --> 00:15:49.818\nwe'll actually end up seeing some of that\nin what we'll also be doing as well, okay?\n\n281\n00:15:49.818 --> 00:15:52.294\nAll right so let's go ahead and\ntake a look then.\n\n282\n00:15:52.294 --> 00:15:55.778\nMy SQL server,\nlet me scroll back out here.\n\n283\n00:15:55.778 --> 00:16:00.685\nAnd we will try and\nuse the querying here to help us out in\n\n284\n00:16:00.685 --> 00:16:04.320\nwhat we actually need to talk about.\n\n285\n00:16:04.320 --> 00:16:05.160\nOkay?\n\n286\n00:16:05.160 --> 00:16:08.610\nNow there's really two basic types\nof transactions that you and\n\n287\n00:16:08.610 --> 00:16:10.550\nI are going to be using.\n\n288\n00:16:10.550 --> 00:16:12.750\nThere's what we call\nimplicit transactions, and\n\n289\n00:16:12.750 --> 00:16:15.090\nthen there are explicit transactions.\n\n290\n00:16:15.090 --> 00:16:16.790\nNow hopefully I'll be\nable to point this out.\n\n291\n00:16:16.790 --> 00:16:20.370\nNow I put some comments in here\nto help us out a little bit so\n\n292\n00:16:20.370 --> 00:16:22.920\nthat we can see this a little bit better.\n\n293\n00:16:22.920 --> 00:16:25.850\nAnd we'll see how this\nends up going on here.\n\n294\n00:16:25.850 --> 00:16:28.500\nSo, of course,\nI'm going to connect to my data base,\n\n295\n00:16:28.500 --> 00:16:31.600\nwhich is the first couple of lines\nI had up here on the screen.\n\n296\n00:16:31.600 --> 00:16:36.209\nBut then, beginning here we're going to\nhave it marked as an implicit transaction.\n\n297\n00:16:36.209 --> 00:16:39.875\nNotice that what we do is,\nif we want to see everything,\n\n298\n00:16:39.875 --> 00:16:43.310\nI can go ahead and\nsay set implicit transactions on.\n\n299\n00:16:44.340 --> 00:16:48.280\nNow, this is actually going to stay on\nper session as long as I'm connected.\n\n300\n00:16:48.280 --> 00:16:50.540\nSo if I wanted to make sure this was\nactually off at the end of that,\n\n301\n00:16:50.540 --> 00:16:54.850\nI would normally put in set implicit\ntransactions off as well, okay.\n\n302\n00:16:54.850 --> 00:16:57.380\nNow at this point, take a look here.\n\n303\n00:16:57.380 --> 00:16:59.930\nI'm gonna go ahead and\nuse a system command, okay,\n\n304\n00:16:59.930 --> 00:17:05.650\nthe transaction count, to go ahead and\nset up this particular transaction.\n\n305\n00:17:05.650 --> 00:17:08.620\nAnd what I'm doing is I'm saying hey,\ni want it to start here at 0.\n\n306\n00:17:08.620 --> 00:17:11.610\nSo there's really two\nstates to our transaction.\n\n307\n00:17:11.610 --> 00:17:13.720\nThere's a 0 and there's a 1.\n\n308\n00:17:13.720 --> 00:17:18.944\nNow it can increment beyond that but\nwe normally don't want it to do that okay,\n\n309\n00:17:18.944 --> 00:17:22.269\nso when we begin we start\nwith this idea of a zero and\n\n310\n00:17:22.269 --> 00:17:26.329\nthen at this point we can actually\nset up whatever we want to.\n\n311\n00:17:26.329 --> 00:17:28.084\nSo here I'm just going ahead and\n\n312\n00:17:28.084 --> 00:17:32.440\nI'm inserting in one of the primary\nkey identifiers into this table.\n\n313\n00:17:32.440 --> 00:17:34.600\nNow, you can go ahead and\nwrite the rest of your SQL statement.\n\n314\n00:17:34.600 --> 00:17:37.790\nI chose not to do that cuz it just\nkinda gets in the way a little bit.\n\n315\n00:17:37.790 --> 00:17:40.680\nBut once I do that,\nI'm just gonna go ahead and\n\n316\n00:17:40.680 --> 00:17:43.090\ntell it, here's all the information\nI want to insert in.\n\n317\n00:17:43.090 --> 00:17:46.520\nIn other words,\nthe data that I want to insert.\n\n318\n00:17:46.520 --> 00:17:50.750\nSo, notice it's nothing that we\nhaven't done before so far, okay?\n\n319\n00:17:50.750 --> 00:17:54.300\nWe've gone ahead and we've created a table\nwhere we've set that identity before.\n\n320\n00:17:54.300 --> 00:17:57.530\nWe've also gone in and we've actually\ncreated rows of data for us and\n\n321\n00:17:57.530 --> 00:18:00.600\nthat's also what this is saying as well.\n\n322\n00:18:00.600 --> 00:18:05.380\nAnd then, from that point, notice I\ncan tell it I need to go ahead and\n\n323\n00:18:05.380 --> 00:18:09.790\nmanually set this transaction\ncount to a one, okay?\n\n324\n00:18:09.790 --> 00:18:11.630\nNow why am I doing that?\n\n325\n00:18:11.630 --> 00:18:16.120\nI'm doing it because I'm going\nto commit the transaction.\n\n326\n00:18:16.120 --> 00:18:20.770\nNow, you can actually type it out as\ncommit transaction or commit tran and\n\n327\n00:18:20.770 --> 00:18:21.530\na lot of times,\n\n328\n00:18:21.530 --> 00:18:25.190\nwhen you do that, notice that I don't\nhave anything that says begin, right?\n\n329\n00:18:25.190 --> 00:18:28.180\nBegin tran or begin transaction here.\n\n330\n00:18:28.180 --> 00:18:29.530\nThat's what makes it implicit.\n\n331\n00:18:29.530 --> 00:18:34.450\nIn other words, it's already understood\nthat you are beginning a transaction here\n\n332\n00:18:34.450 --> 00:18:37.220\nand what you're telling it is\nI want to manually do this.\n\n333\n00:18:37.220 --> 00:18:40.100\nNow what's the difference between this and\nme just writing out the statement?\n\n334\n00:18:40.100 --> 00:18:41.850\nWell if you just do that normally,\n\n335\n00:18:41.850 --> 00:18:45.370\nwhen you hit execute you're\nessentially doing the committing.\n\n336\n00:18:45.370 --> 00:18:49.650\nYou're absolutely saying,\nlet me go ahead and commit this.\n\n337\n00:18:49.650 --> 00:18:56.270\nBy doing it this way, it is not going to\ncommit until what this statement runs.\n\n338\n00:18:56.270 --> 00:18:57.570\nOkay, is what you're doing.\n\n339\n00:18:57.570 --> 00:19:01.020\nSo this is where you're actually able\nto control what you're seeing there.\n\n340\n00:19:01.020 --> 00:19:04.290\nFrom that point on,\nwe're actually telling it to go ahead and\n\n341\n00:19:04.290 --> 00:19:10.270\nwell set it to off and then of course\nset the transaction to off as well.\n\n342\n00:19:10.270 --> 00:19:12.940\nSo we can actually do that as well, okay?\n\n343\n00:19:12.940 --> 00:19:15.290\nSo in this first one, okay?\n\n344\n00:19:15.290 --> 00:19:18.210\nWhat's actually going on is\nthat we're starting to see that\n\n345\n00:19:18.210 --> 00:19:20.660\nthe transaction here\nhas a couple of things.\n\n346\n00:19:20.660 --> 00:19:25.160\nIf I commit it, it changes the count here\nthat says, yes, a commitment did happen.\n\n347\n00:19:25.160 --> 00:19:27.050\nAnd once that commitment happens,\n\n348\n00:19:27.050 --> 00:19:30.830\nthat count actually goes all\nthe way back down to zero again.\n\n349\n00:19:30.830 --> 00:19:33.360\nBecause it wants to start\noff a new transaction.\n\n350\n00:19:33.360 --> 00:19:37.180\nSo, any time we get to one, a lot of\ntimes, we're either actually saying commit\n\n351\n00:19:37.180 --> 00:19:40.450\nor roll back, which means don't\nmake this transaction happen.\n\n352\n00:19:40.450 --> 00:19:43.520\nAnd then,\nwe're starting all over again, as well.\n\n353\n00:19:43.520 --> 00:19:48.790\nSo, we can actually set something\nlike this here and execute it.\n\n354\n00:19:48.790 --> 00:19:51.980\nAnd let me see, it might actually\ncomplete it with some errors.\n\n355\n00:19:51.980 --> 00:19:54.860\nSo it actually tells me that\nsomething else is happening here,\n\n356\n00:19:54.860 --> 00:19:59.270\nwhich is fine, and it turned me cuz\nI actually did go ahead and do this.\n\n357\n00:19:59.270 --> 00:20:01.350\nI wanted to do a test value as well and\n\n358\n00:20:01.350 --> 00:20:04.820\nI told it not to allow the column\nthat had a null in it.\n\n359\n00:20:04.820 --> 00:20:07.210\nI did not set that primary account yet.\n\n360\n00:20:07.210 --> 00:20:09.630\nSo at this point that's perfectly fine.\n\n361\n00:20:09.630 --> 00:20:11.580\nBecause we don't want that\ntransaction to happen.\n\n362\n00:20:11.580 --> 00:20:12.120\nIf what?\n\n363\n00:20:12.120 --> 00:20:13.260\nIf something is bad.\n\n364\n00:20:13.260 --> 00:20:14.040\nOkay?\n\n365\n00:20:14.040 --> 00:20:16.130\nSo if I want to remove the row.\n\n366\n00:20:16.130 --> 00:20:18.560\nI can also remove a row as well.\n\n367\n00:20:18.560 --> 00:20:20.350\nSo being able to actually\ndo something like that.\n\n368\n00:20:20.350 --> 00:20:23.540\nAn implicit transaction\nis pretty much the key.\n\n369\n00:20:23.540 --> 00:20:27.910\nYou'll normally see it when you do\njust see the words commit tran and\n\n370\n00:20:27.910 --> 00:20:31.650\nnot actually the begin transaction.\n\n371\n00:20:31.650 --> 00:20:35.600\nIf you do an explicit transaction instead\n\n372\n00:20:35.600 --> 00:20:38.790\nright at the beginning this is\nhow you tell the difference.\n\n373\n00:20:38.790 --> 00:20:43.610\nThere is a begin transaction, and\nthen it's pretty much the same thing, but\n\n374\n00:20:43.610 --> 00:20:49.080\nnow notice, that I actually ended,\noops, I didn't undo my right one here.\n\n375\n00:20:49.080 --> 00:20:52.490\nNotice that I've actually committed\nthis entire transaction in between\n\n376\n00:20:52.490 --> 00:20:53.670\nhere as well.\n\n377\n00:20:53.670 --> 00:20:57.670\nAnd you can see that when we start doing\nthis, when we select the system count\n\n378\n00:20:57.670 --> 00:21:02.280\nhere for this transaction count,\nthere's a 0 and when I go ahead and\n\n379\n00:21:02.280 --> 00:21:07.880\nbegin the transaction I'm explicitly\ntelling it, go ahead and set this to a 1.\n\n380\n00:21:07.880 --> 00:21:10.480\nWrite the whole thing, okay.\n\n381\n00:21:10.480 --> 00:21:14.210\nAnd then when it actually ends up\ncommitting it at the end here,\n\n382\n00:21:14.210 --> 00:21:15.520\nwell that's perfectly fine.\n\n383\n00:21:15.520 --> 00:21:18.850\nBecause what will also happen\nat the end there is that\n\n384\n00:21:18.850 --> 00:21:22.840\nthe transaction count will go back\ndown to zero and you'll start again.\n\n385\n00:21:22.840 --> 00:21:26.310\nSo this is how other transactions or\nothers' querying code.\n\n386\n00:21:26.310 --> 00:21:27.510\nWhatever you want to do, updating,\n\n387\n00:21:27.510 --> 00:21:31.280\ninserting, whatever it might be,\nknows that it can start again.\n\n388\n00:21:32.640 --> 00:21:37.010\nEvery once in a while, though, you also\nget what's called a nested transaction.\n\n389\n00:21:37.010 --> 00:21:41.760\nNow I just started to just say, here's\nwhat we need to be able to see, too, okay?\n\n390\n00:21:41.760 --> 00:21:45.250\nIn a nested transaction, this is\nsomething we do not want to happen,\n\n391\n00:21:45.250 --> 00:21:49.630\nwhich is it can absolutely go to\nwhat they call a count of 2 here.\n\n392\n00:21:49.630 --> 00:21:50.360\nOkay?\n\n393\n00:21:50.360 --> 00:21:54.320\nSo the first one tells it that\nwe're beginning a transaction,\n\n394\n00:21:54.320 --> 00:21:58.630\nwe do something else here, and then we\nactually say begin a transaction again,\n\n395\n00:21:58.630 --> 00:22:02.500\nwell now it's actually at the state\nof one and it goes to a two.\n\n396\n00:22:02.500 --> 00:22:06.690\nWe run a commit and notice it actually\ncomes back down to a one again.\n\n397\n00:22:06.690 --> 00:22:12.620\nAnd that is because once it actually gets\nback to that nested transaction here,\n\n398\n00:22:12.620 --> 00:22:16.510\nokay, a couple of things are happening\nwhich the SQL server doesn't really like.\n\n399\n00:22:16.510 --> 00:22:22.290\nIt can get it back to a 1 but that\nmeans it could get stuck as well, okay?\n\n400\n00:22:22.290 --> 00:22:25.260\nAnd when it gets stuck that means you're\nnot gonna be able to access things inside\n\n401\n00:22:25.260 --> 00:22:26.880\nthe database sometimes.\n\n402\n00:22:26.880 --> 00:22:30.320\nSo the good thing is the SQL server\nknown how to deal with that.\n\n403\n00:22:30.320 --> 00:22:35.350\nWhen we do the commit, it sends it\nback to a zero is what it does, okay?\n\n404\n00:22:36.410 --> 00:22:39.660\nNow the last one here is actually more\ninteresting, regardless of whether you're\n\n405\n00:22:39.660 --> 00:22:43.320\nnested or not, this actually only\ndeals with only one rollback.\n\n406\n00:22:43.320 --> 00:22:47.920\nSo in any one transaction you can have\nmultiple commits just like we saw there.\n\n407\n00:22:47.920 --> 00:22:49.840\nThe nested commits that you saw.\n\n408\n00:22:49.840 --> 00:22:51.080\nBut the very fact is,\n\n409\n00:22:51.080 --> 00:22:54.990\nyou can only rollback one time which\nis to cancel the entire transaction.\n\n410\n00:22:54.990 --> 00:22:56.500\nAnd it doesn't matter.\n\n411\n00:22:56.500 --> 00:22:58.930\nAnytime you actually select a rollback,\nit's saying, look.\n\n412\n00:22:58.930 --> 00:23:03.420\nI'm not gonna complete more transactions\neven if you have more to go.\n\n413\n00:23:03.420 --> 00:23:05.790\nI'm just gonna roll it back\nfrom this point and that's it.\n\n414\n00:23:05.790 --> 00:23:09.830\nSo, whether you put it at the very\nfirst line of a 30 line type of\n\n415\n00:23:09.830 --> 00:23:13.410\ntransaction that you're doing or\nthe very last line.\n\n416\n00:23:13.410 --> 00:23:16.500\nIt doesn't really matter because it says,\nlook, you can go through that whole thing\n\n417\n00:23:16.500 --> 00:23:19.810\nand if I want to roll it back,\nI'm gonna roll it back no matter what.\n\n418\n00:23:19.810 --> 00:23:21.860\nSo, normally we only have this and\n\n419\n00:23:21.860 --> 00:23:24.440\nit actually rolls it back\nfrom that particular point.\n\n420\n00:23:24.440 --> 00:23:26.020\nAnd then you select it again.\n\n421\n00:23:26.020 --> 00:23:28.230\nNotice it starts all over at zero.\n\n422\n00:23:28.230 --> 00:23:31.770\nSo, a rollback only has to actually\nbe done one time, as well.\n\n423\n00:23:31.770 --> 00:23:35.370\nOkay, now you're saying well heck,\ndo I really have to know those numbers?\n\n424\n00:23:35.370 --> 00:23:37.270\nNot so much so, okay?\n\n425\n00:23:37.270 --> 00:23:41.726\nBut the key here is to understand that\neverything that we end up writing,\n\n426\n00:23:41.726 --> 00:23:43.781\nit actually changes that count.\n\n427\n00:23:43.781 --> 00:23:47.652\nThat actually allows to us to know when\nwe've actually started the transaction and\n\n428\n00:23:47.652 --> 00:23:49.698\nwhen we completed\nthe transaction again and\n\n429\n00:23:49.698 --> 00:23:52.478\nthat a big part of what we\nactually have to understand here.\n\n430\n00:23:52.478 --> 00:23:53.409\nMost of us though,\n\n431\n00:23:53.409 --> 00:23:56.455\nwe're probably not gonna get that\ndeep into it a lot of times.\n\n432\n00:23:56.455 --> 00:24:00.406\nBut it is something that we at least have\nto understand that the transaction itself\n\n433\n00:24:00.406 --> 00:24:04.430\nhas to be completely whole, okay, or\nit's not gonna actually be at all.\n\n434\n00:24:04.430 --> 00:24:05.970\nHere's how you control it.\n\n435\n00:24:05.970 --> 00:24:09.410\nYou either start off by doing it\nexplicitly saying, I'm gonna begin this\n\n436\n00:24:09.410 --> 00:24:13.460\ntransaction and I wanna make sure it's\ncommitted after this point here, okay.\n\n437\n00:24:13.460 --> 00:24:18.040\nOr you can say look, I want to begin this\ntransaction but because I really just want\n\n438\n00:24:18.040 --> 00:24:21.390\nto see it run and I don't want to\nactually write any data to the database,\n\n439\n00:24:21.390 --> 00:24:24.530\nyou might choose that rollback instead and\nthat will also help you out.\n\n440\n00:24:24.530 --> 00:24:28.290\nSo that you can write the whole thing and\nnot really commit anything, have it\n\n441\n00:24:28.290 --> 00:24:32.510\nactually change back to the original\nstate and you'll be fine again as well.\n\n442\n00:24:32.510 --> 00:24:37.190\n>> So, Ronnie, with the rollback when\nthe statement runs Does it run to\n\n443\n00:24:37.190 --> 00:24:40.200\ncompletion actually make the changes and\nthen when it hits the rollback,\n\n444\n00:24:40.200 --> 00:24:44.930\nit kinda undoes all those changes or does\nit just kinda like mock it up for you and\n\n445\n00:24:44.930 --> 00:24:49.170\nsay this is what would happen and then I\nmean what's the purpose of the rollback if\n\n446\n00:24:49.170 --> 00:24:51.020\nit's not actually making\nchanges like this?\n\n447\n00:24:51.020 --> 00:24:54.510\n>> Yeah, the rollback itself, what it's\ngoing to do it's going to take anything\n\n448\n00:24:54.510 --> 00:24:58.320\ncuz not everything's actually\nwritten to the database right away.\n\n449\n00:24:58.320 --> 00:25:02.220\nEverything's actually written to what\nthey call a transaction log instead, and\n\n450\n00:25:02.220 --> 00:25:05.620\nwhat ends up happening is it essentially\ngoes back to that transaction log and\n\n451\n00:25:05.620 --> 00:25:08.600\nsays okay, we're not gonna\nactually commit those changes.\n\n452\n00:25:08.600 --> 00:25:11.860\nIt could be in the transaction log when\nit sees that roll back, and it's time to\n\n453\n00:25:11.860 --> 00:25:16.820\nwrite it to the database, it goes no\nwe're gonna roll that thing back instead.\n\n454\n00:25:16.820 --> 00:25:20.260\nSo that's actually something else we're\ngonna get into just a little bit,\n\n455\n00:25:20.260 --> 00:25:22.300\nwe're not gonna get super deep into it.\n\n456\n00:25:22.300 --> 00:25:24.760\nBut the very fact is\nthe transactions that you and\n\n457\n00:25:24.760 --> 00:25:28.430\nI make they do not directly\naffect the database itself yet.\n\n458\n00:25:29.740 --> 00:25:30.950\nWhen you actually go ahead and\n\n459\n00:25:30.950 --> 00:25:33.790\nwrite this whole thing it gets\nwritten to a transaction log.\n\n460\n00:25:33.790 --> 00:25:38.760\nWhen you then hit the commit idea that's\nin theory supposed to be when it says\n\n461\n00:25:38.760 --> 00:25:43.400\nlook here we go let's go ahead and make\nsure that we get this thing ready to write\n\n462\n00:25:43.400 --> 00:25:47.130\nto the entire database and so\nit's at that point you do that.\n\n463\n00:25:47.130 --> 00:25:50.060\nWhen you issue the rollback, it actually\nknows that it can go back there and\n\n464\n00:25:50.060 --> 00:25:51.360\nchange those things.\n\n465\n00:25:51.360 --> 00:25:53.830\nSo there's a couple of\nways it can be done.\n\n466\n00:25:53.830 --> 00:25:57.070\nUsually it's at the power outage,\nwhen everything's in that transaction log\n\n467\n00:25:57.070 --> 00:26:00.160\nthere, that all of a sudden when it\nactually looks and says this is partial,\n\n468\n00:26:00.160 --> 00:26:01.972\nI'm going to roll this thing back anyways.\n\n469\n00:26:01.972 --> 00:26:05.669\nSo it just kind of erases it out of that\ntransaction log, we don't actually have it\n\n470\n00:26:05.669 --> 00:26:08.580\nin there anymore,\nwe just start all over from that point.\n\n471\n00:26:08.580 --> 00:26:12.720\nSo that's kind of a key here in\nunderstanding the control and\n\n472\n00:26:12.720 --> 00:26:14.900\nthe message of that as well, okay?\n\n473\n00:26:16.090 --> 00:26:20.650\nAll right, so\nthere's a lot of just little bits and\n\n474\n00:26:20.650 --> 00:26:24.140\npieces of information that we just have\nto know about the difference between\n\n475\n00:26:24.140 --> 00:26:27.000\nthe implicit and the explicit here.\n\n476\n00:26:27.000 --> 00:26:31.930\nRemember that it's really those key words\nhere, begin tran or begin transaction.\n\n477\n00:26:31.930 --> 00:26:33.220\nIf you see those in there,\n\n478\n00:26:33.220 --> 00:26:36.780\nthat means it's gonna mark the beginning\nof an explicit one, you don't see that and\n\n479\n00:26:36.780 --> 00:26:41.720\nyou only see the commit tran, then\nthat's gonna be an implicit one instead.\n\n480\n00:26:41.720 --> 00:26:46.530\nAnd that's actually part of the idea that\nwe have to be able to understand and\n\n481\n00:26:46.530 --> 00:26:48.200\ndo, okay?\n\n482\n00:26:48.200 --> 00:26:51.870\nNow there's only a couple of other\nthings that we need to point out so\n\n483\n00:26:51.870 --> 00:26:54.090\nfar as well, okay?\n\n484\n00:26:54.090 --> 00:26:59.170\nAnd that is that because every\nsingle transaction is isolated,\n\n485\n00:26:59.170 --> 00:27:01.770\nin other words,\nit's not gonna affect anybody else.\n\n486\n00:27:01.770 --> 00:27:04.920\nYou need to know the default\nisolation levels\n\n487\n00:27:04.920 --> 00:27:09.780\nin a standard SQL server residing\ninside of your network, okay.\n\n488\n00:27:09.780 --> 00:27:14.460\nThe actual standard isolation level\nis what they call read committed.\n\n489\n00:27:14.460 --> 00:27:15.340\nNow what the heck does that mean?\n\n490\n00:27:15.340 --> 00:27:17.890\nThat means when you run\nsome type of query,\n\n491\n00:27:17.890 --> 00:27:22.440\nyou're actually getting data that's only\ncommitted in the database itself, okay?\n\n492\n00:27:23.440 --> 00:27:30.210\nBut the funny thing is if you're actually\nusing the newer Azure SQL database itself.\n\n493\n00:27:30.210 --> 00:27:34.880\nThe default one is called, and\nI have to make sure I say this right.\n\n494\n00:27:34.880 --> 00:27:39.290\nRead committed snapshot is what\nthis one actually is called here,\n\n495\n00:27:39.290 --> 00:27:41.150\nread committed snapshot.\n\n496\n00:27:41.150 --> 00:27:42.730\nIt not only gives you that ability,\nof course,\n\n497\n00:27:42.730 --> 00:27:46.300\nto only read the data that's in there but\nany snapshots that were saved of\n\n498\n00:27:46.300 --> 00:27:49.880\nthe database as well is\nalso gonna be on there too.\n\n499\n00:27:49.880 --> 00:27:52.710\nThere's another one that you can also have\nwhich is called read uncommitted that\n\n500\n00:27:52.710 --> 00:27:56.960\ngives you the ability not only to get\nresults from the actual committed\n\n501\n00:27:56.960 --> 00:28:01.100\ndatabases in there but\neven uncommitted data that was changed and\n\n502\n00:28:01.100 --> 00:28:04.070\nthen rolled back a little\nbit later on as well.\n\n503\n00:28:04.070 --> 00:28:07.390\nSo there's a couple of different\nisolation levels that is in there but\n\n504\n00:28:07.390 --> 00:28:08.500\nremember those defaults.\n\n505\n00:28:08.500 --> 00:28:11.480\nMost of the time read committed is\nprobably the one that we'll deal with.\n\n506\n00:28:11.480 --> 00:28:16.034\nIf you're an Azure, read committed\nsnapshots instead those are the ones that\n\n507\n00:28:16.034 --> 00:28:18.650\nwon't end up seen as well, okay?\n\n508\n00:28:18.650 --> 00:28:21.900\nSo we should the difference now\nbetween commit and roll back,\n\n509\n00:28:21.900 --> 00:28:26.910\nwe should understand that we have implicit\nand explicit in that tran count 0 or\n\n510\n00:28:26.910 --> 00:28:30.770\n1, very important any time\nsomething larger than that,\n\n511\n00:28:30.770 --> 00:28:34.300\nmore than likely you're actually running\nsome kind of nested transaction.\n\n512\n00:28:34.300 --> 00:28:36.580\nNot exactly the greatest thing for\nthe SQL server,\n\n513\n00:28:36.580 --> 00:28:38.930\nbut it can actually deal with it as well.\n\n514\n00:28:38.930 --> 00:28:40.410\nBut those are kinda the basics.\n\n515\n00:28:40.410 --> 00:28:44.850\nNow if you are going, wow Ronnie that was\ninsanely confusing, well that's why this\n\n516\n00:28:44.850 --> 00:28:48.770\nstuff is really just an introduction\nrather than what we are actually gonna see\n\n517\n00:28:48.770 --> 00:28:52.740\nlater on when we get into actually\nbreaking down these transactions in\n\n518\n00:28:52.740 --> 00:28:57.590\nthe rest of the MCSA series for SQL 2014\n>> All right well, looks like there's\n\n519\n00:28:57.590 --> 00:29:03.450\na lot of information that we have\nconsumed today as the learnees.\n\n520\n00:29:03.450 --> 00:29:07.340\nAnd the teacher here giving us all that\nwe need to know so we can pass that exam.\n\n521\n00:29:07.340 --> 00:29:11.350\nAnd letting us know that SQL\nhas some nice safety nets\n\n522\n00:29:11.350 --> 00:29:15.630\ninvolved in case things do kind\nof go south and that's good for\n\n523\n00:29:15.630 --> 00:29:20.440\nus cuz the last thing we want is corrupted\ndatabases, incomplete transactions,\n\n524\n00:29:20.440 --> 00:29:26.080\nall that business can just lead to a mess\nespecially if you have a large database.\n\n525\n00:29:26.080 --> 00:29:27.480\nNow you're in the nightmare scenario,\n\n526\n00:29:27.480 --> 00:29:29.160\nand then we keep us out\nof the weeds with that.\n\n527\n00:29:29.160 --> 00:29:33.360\nSo we thank you Ronnie for that,\nwe It looks like time has expired.\n\n528\n00:29:33.360 --> 00:29:35.330\nWe do thank you guys for joining us today.\n\n529\n00:29:35.330 --> 00:29:38.450\nHopefully, you enjoyed this episode and\nlearned something.\n\n530\n00:29:38.450 --> 00:29:40.250\nWe're gonna go ahead and\nsign off for ITProTV.\n\n531\n00:29:40.250 --> 00:29:41.720\nI've been you're host Daniel Lowrie.\n\n532\n00:29:41.720 --> 00:29:42.660\n>> And I'm Ronnie Wong.\n\n533\n00:29:42.660 --> 00:29:44.625\n>> We'll See you next time.\n\n534\n00:29:44.625 --> 00:29:52.090\n[SOUND]\n\n",
          "vimeoId": "166816862"
        },
        {
          "description": "In this episode, Daniel and Ronnie evaluate the use of row-based operations vs. the set-based operations. They explain when to use Cursors as well as the impact of Scalar User Defined Functions(UDFs). Also, they demonstrate combining multiple DML operations and using set-based logic rather than row-based logic.",
          "length": "1217",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-3-evaluate_different_operations-051316-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-3-evaluate_different_operations-051316-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-3-evaluate_different_operations-051316-1-sm.jpg",
          "title": "Evaluate Different Operations",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.169 --> 00:00:16.618\nAll right, greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:16.618 --> 00:00:19.320\nI'm your host, Daniel Lowrie, and\nin today's episode we're continuing on our\n\n4\n00:00:19.320 --> 00:00:23.010\nseries of querying\nthe Microsoft SQL server 2014.\n\n5\n00:00:23.010 --> 00:00:26.200\nJoining me back in the studio again today\nto help us out with that very endeavor is\n\n6\n00:00:26.200 --> 00:00:28.280\nour good friend and\nmentor, Mr. Ronnie Wong.\n\n7\n00:00:28.280 --> 00:00:29.460\nRonnie, welcome back to the show, sir.\n\n8\n00:00:29.460 --> 00:00:30.260\nHow's it going today?\n\n9\n00:00:30.260 --> 00:00:35.810\n>> It's going great as we continue to\ntake a look of more of SQL server 2014.\n\n10\n00:00:35.810 --> 00:00:39.970\nToday we're talking about different types\nof operations that can be done inside of\n\n11\n00:00:39.970 --> 00:00:41.350\nour SQL server.\n\n12\n00:00:41.350 --> 00:00:44.650\nNow the majority of our show centers\naround what we call, of course,\n\n13\n00:00:44.650 --> 00:00:48.950\nset based operations, but there are a few\nthings that we have done throughout this\n\n14\n00:00:48.950 --> 00:00:54.760\nentire series which actually call for what\nwe call role based operations instead.\n\n15\n00:00:54.760 --> 00:00:58.850\nAnd when we start to take a look\nat the idea of both of them, it's\n\n16\n00:00:58.850 --> 00:01:03.130\nboth of them that give us the combination\nof what we might actually really need,\n\n17\n00:01:03.130 --> 00:01:06.150\nof course, in a very real world situation.\n\n18\n00:01:06.150 --> 00:01:08.000\nNow, when we start talking about that,\n\n19\n00:01:08.000 --> 00:01:10.890\nyou have to understand something\nabout the SQL server itself.\n\n20\n00:01:10.890 --> 00:01:12.677\nThe SQL server, remember,\n\n21\n00:01:12.677 --> 00:01:17.667\nis actually based around relational\ndatabase design itself and actually in its\n\n22\n00:01:17.667 --> 00:01:22.810\nbasis is the mathematical concept of set\ntheory right, when we start doing this.\n\n23\n00:01:22.810 --> 00:01:28.407\nAnd so when they actually want to\nretrieve records out of a SQL database,\n\n24\n00:01:28.407 --> 00:01:33.546\nthe whole goal and nature is to\nretrieve that set of information and\n\n25\n00:01:33.546 --> 00:01:39.787\nthen to essentially use filters to display\nto you the information that you need,\n\n26\n00:01:39.787 --> 00:01:45.516\nbut its native goal and its native\ndesign is what is based on sets, right?\n\n27\n00:01:45.516 --> 00:01:50.367\nSo its best and most efficient use in\noperation is when we do end up actually\n\n28\n00:01:50.367 --> 00:01:52.481\ngetting sets of information and\n\n29\n00:01:52.481 --> 00:01:57.690\nthen we use little things to help us\nto be able to tweak what we want.\n\n30\n00:01:57.690 --> 00:02:01.901\nThe other way of course to do\nthis instead is to actually do\n\n31\n00:02:01.901 --> 00:02:04.575\nwhat we call row based operations.\n\n32\n00:02:04.575 --> 00:02:09.030\nRow based operations, let's take for\nexample of a table, and\n\n33\n00:02:09.030 --> 00:02:14.300\nwhat I want to do is I want to run through\nthat table and then individually row\n\n34\n00:02:14.300 --> 00:02:19.840\nby row put some operation on\nevery single row in doing that.\n\n35\n00:02:19.840 --> 00:02:24.180\nNow compared to the set based operation,\nwhen I say I'm using a filter or I'm doing\n\n36\n00:02:24.180 --> 00:02:28.470\nsomething to define that, right, it\ndoesn't have to go row by row to do that.\n\n37\n00:02:28.470 --> 00:02:30.970\nIt takes a look at the whole set here and\nsays, hey,\n\n38\n00:02:30.970 --> 00:02:34.550\nin this column if it matches this,\njust show me that, right?\n\n39\n00:02:34.550 --> 00:02:38.210\nBut the entire set of data's\nactually way back there in the back.\n\n40\n00:02:38.210 --> 00:02:41.870\nBut when we talk about the idea of\nhere doing row based operations,\n\n41\n00:02:41.870 --> 00:02:45.830\nit is taking a look at every single\nrow that you pull up here and saying,\n\n42\n00:02:45.830 --> 00:02:49.990\nI want to run this, or\nI want to do this on every single row.\n\n43\n00:02:49.990 --> 00:02:51.430\nNow what is that a difference of?\n\n44\n00:02:51.430 --> 00:02:54.218\nWell, if you think about it,\nif we just pull up a table, well,\n\n45\n00:02:54.218 --> 00:02:56.231\nlet's just say that that's one procedure.\n\n46\n00:02:56.231 --> 00:03:01.177\nAnd then if I pull up a filter,\nlet's just say that that's two procedures,\n\n47\n00:03:01.177 --> 00:03:03.900\non however many rows that we have, okay?\n\n48\n00:03:03.900 --> 00:03:05.153\nSo, when we do that, right,\n\n49\n00:03:05.153 --> 00:03:08.269\nthat's really about two procedures\nwhen it goes down through there, and\n\n50\n00:03:08.269 --> 00:03:12.160\nif there's 10,000 rows, it really is\ntwo procedures on 10,000 rows of data.\n\n51\n00:03:13.240 --> 00:03:18.080\nBut if you do a row based operation,\nwell beginning at row one,\n\n52\n00:03:18.080 --> 00:03:20.980\nyou're actually running that\nprocedure to pull it up.\n\n53\n00:03:20.980 --> 00:03:24.420\nYou're then running that, whatever\noperation you're saying on that one row,\n\n54\n00:03:24.420 --> 00:03:28.450\nand then proceeding on number two,\nand then running that again, and\n\n55\n00:03:28.450 --> 00:03:31.280\nthen running it again and running\nit again, as it goes on through and\n\n56\n00:03:31.280 --> 00:03:32.795\niterating through the entire thing.\n\n57\n00:03:32.795 --> 00:03:37.490\nAnd so you might actually be running,\nlet's say, 10,001 procedures on\n\n58\n00:03:37.490 --> 00:03:42.230\nthat same one, and the weird thing is, it\ncan return to you the exact same result.\n\n59\n00:03:42.230 --> 00:03:47.090\nOr it can return to you different results\nand that's where the key comes in.\n\n60\n00:03:47.090 --> 00:03:50.450\nSo that's when we start talking\nabout which ones we should use and\n\n61\n00:03:50.450 --> 00:03:52.290\nwhich ones we shouldn't.\n\n62\n00:03:52.290 --> 00:03:53.980\nSo, in everything that we do,\n\n63\n00:03:53.980 --> 00:03:56.780\nwe have to actually consider\na couple of things, right?\n\n64\n00:03:56.780 --> 00:04:00.880\nOne, not only that, cuz that's actually\nwhat we call a costly type of procedure,\n\n65\n00:04:00.880 --> 00:04:04.190\nbut two, is it actually right for\nwhat we need it to do, okay?\n\n66\n00:04:04.190 --> 00:04:06.610\nSo that's really where it comes down to.\n\n67\n00:04:06.610 --> 00:04:08.370\nSo, we've already focused in,\n\n68\n00:04:08.370 --> 00:04:12.510\nlike we said the entire series pretty\nmuch on set based types of features.\n\n69\n00:04:12.510 --> 00:04:16.720\nToday, we're just gonna talk\nbriefly about, really about two\n\n70\n00:04:16.720 --> 00:04:20.890\ndifferent ways that we can actually\nencounter row based features instead.\n\n71\n00:04:20.890 --> 00:04:24.770\nAnd of course, when we start talking\nabout it, best practice is this.\n\n72\n00:04:24.770 --> 00:04:28.610\nIs to actually use only\nrow based features.\n\n73\n00:04:28.610 --> 00:04:32.150\nI kept saying I'm not\ngonna be able to say that.\n\n74\n00:04:32.150 --> 00:04:35.370\nOn what we call,\nwhy can't I remember the term here.\n\n75\n00:04:35.370 --> 00:04:36.740\nOn exceptions, right?\n\n76\n00:04:36.740 --> 00:04:40.570\nSo it's not the norm that we\nwould actually run these on, but\n\n77\n00:04:40.570 --> 00:04:41.350\nit's the exception.\n\n78\n00:04:41.350 --> 00:04:46.250\nSo when you can't actually get it to\ndetermine any other way, then, yes,\n\n79\n00:04:46.250 --> 00:04:48.490\ntry the row based way to go.\n\n80\n00:04:48.490 --> 00:04:52.410\nSo I wanna show you an example of what\nwe're talking about here in just a moment.\n\n81\n00:04:52.410 --> 00:04:56.180\nSo the first one here, right, when we\nstart seeing it, is we're gonna actually\n\n82\n00:04:56.180 --> 00:04:59.270\ntake a look at something that is\ngonna increment row by row here,\n\n83\n00:04:59.270 --> 00:05:01.860\nto help us out and\nsee what's going on, okay?\n\n84\n00:05:01.860 --> 00:05:03.180\nSo here on my screen,\n\n85\n00:05:03.180 --> 00:05:06.780\nI'm gonna be connected to\nthe AdventureWorks2014 database.\n\n86\n00:05:06.780 --> 00:05:09.910\nAnd the first one I'm gonna do\nis create the Stored Procedure.\n\n87\n00:05:09.910 --> 00:05:14.900\nAnd what's gonna happen here in this one,\nand this is without me actually using\n\n88\n00:05:14.900 --> 00:05:19.070\none of the features that we're\ntalking about here, is to go ahead and\n\n89\n00:05:19.070 --> 00:05:23.040\nrun through every single row\nin the customer table, okay?\n\n90\n00:05:23.040 --> 00:05:27.400\nSo, if I have this object I've created I'm\ngoing to go ahead and drop this object.\n\n91\n00:05:27.400 --> 00:05:30.570\nLet me verify that that's\nactually going to be true.\n\n92\n00:05:30.570 --> 00:05:34.690\nNow, notice the stored procedure\nI'm going to create here.\n\n93\n00:05:34.690 --> 00:05:38.500\nIt's called process the customer and\nI'm telling it to go ahead and\n\n94\n00:05:38.500 --> 00:05:45.020\ncreate a variable here, okay, for\nthe customer ID as an integer, okay?\n\n95\n00:05:45.020 --> 00:05:50.690\nThen I want it to go ahead and\nactually process the customer here and\n\n96\n00:05:50.690 --> 00:05:55.360\nalso, go ahead and cast the customer\nID as a variable character as well.\n\n97\n00:05:55.360 --> 00:05:56.430\nNow, what does that mean?\n\n98\n00:05:56.430 --> 00:06:00.130\nThat means on every single row,\nI want it to run through this and\n\n99\n00:06:00.130 --> 00:06:04.810\nmake sure that when it prints out, it\nprints in the word processing customer and\n\n100\n00:06:04.810 --> 00:06:07.500\nthen the customer ID number, okay?\n\n101\n00:06:07.500 --> 00:06:11.670\nSo that means every single row inside of\nthat customer's table, customer table,\n\n102\n00:06:11.670 --> 00:06:14.180\nexcuse me, that's what I needed to do.\n\n103\n00:06:14.180 --> 00:06:18.360\nSo that's the process I want to\nactually use in the idea here of\n\n104\n00:06:18.360 --> 00:06:21.700\nshowing you a row based type of action.\n\n105\n00:06:21.700 --> 00:06:25.310\nNow once I have that\nparticular stored procedure,\n\n106\n00:06:25.310 --> 00:06:30.510\nI'm going to create something that\nwe call a cursor, as well, okay?\n\n107\n00:06:30.510 --> 00:06:33.220\nNow when we talk about the idea of a\ncursor, I don't know why I put this here,\n\n108\n00:06:33.220 --> 00:06:35.020\nlet me remove that part here.\n\n109\n00:06:35.020 --> 00:06:38.090\nA cursor is exactly what it sounds like.\n\n110\n00:06:38.090 --> 00:06:43.600\nIt is actually gonna point row by row here\nand say, this is what needs to happen.\n\n111\n00:06:43.600 --> 00:06:46.480\nYes, you need to go and look up this row.\n\n112\n00:06:46.480 --> 00:06:49.160\nMake sure you process that and\nreport it the way that we need to.\n\n113\n00:06:49.160 --> 00:06:52.350\nGo to the next row and do the same thing,\nnext row and do the same thing,\n\n114\n00:06:52.350 --> 00:06:53.770\nas we go on through.\n\n115\n00:06:53.770 --> 00:06:56.920\nSo here we've started off by saying,\nlook, don't show me any\n\n116\n00:06:56.920 --> 00:07:01.400\nof the actual messages that come along\nwith just the idea of running this thing.\n\n117\n00:07:01.400 --> 00:07:04.756\nWe're gonna declare two variables here,\nand one is of course,\n\n118\n00:07:04.756 --> 00:07:07.840\ncalled the cursor customer ID,\nor cur for short.\n\n119\n00:07:07.840 --> 00:07:11.200\nAnd then of course, there's another\none that we're going to declare\n\n120\n00:07:11.200 --> 00:07:13.520\nas being part of the cursor itself.\n\n121\n00:07:13.520 --> 00:07:18.760\nWe're gonna give a name to this particular\ntype of operation which is cursor.\n\n122\n00:07:18.760 --> 00:07:23.340\nI'm gonna tell it to fast forward in order\nto make sure you actually do this for\n\n123\n00:07:23.340 --> 00:07:25.380\nevery single row.\n\n124\n00:07:25.380 --> 00:07:31.120\nAnd it's gonna select the customer\nID from that customer's table, okay.\n\n125\n00:07:31.120 --> 00:07:34.860\nNow once we do that, it's gonna open up\n\n126\n00:07:34.860 --> 00:07:39.320\nthat particular cursor and\nactually go row by row here.\n\n127\n00:07:39.320 --> 00:07:42.008\nFetch the next one from the same idea,\n\n128\n00:07:42.008 --> 00:07:46.729\ngo in and find that out but\nbegin as long as the fetch status is zero.\n\n129\n00:07:46.729 --> 00:07:51.515\nSo every time it runs through and it runs,\nwhat's going to happen is it's gonna say,\n\n130\n00:07:51.515 --> 00:07:54.837\nall right start all over from zero,\nand then run through and\n\n131\n00:07:54.837 --> 00:07:59.559\nmake sure that we actually end up putting\nin that processor, processing Customer,\n\n132\n00:07:59.559 --> 00:08:03.040\nlet me make sure, yeah,\nprocessing customer along with it.\n\n133\n00:08:03.040 --> 00:08:06.990\nAnd so that's what we're actually\nexecuting here in that stored procedure.\n\n134\n00:08:06.990 --> 00:08:14.320\nThen we're gonna close out of that\ncursor and then we're gonna turn it off.\n\n135\n00:08:14.320 --> 00:08:16.660\nWe do not want to leave\nthe cursor on because if we do,\n\n136\n00:08:16.660 --> 00:08:19.340\nit's gonna run through this for\nevery single one.\n\n137\n00:08:19.340 --> 00:08:20.130\nOkay.\n\n138\n00:08:20.130 --> 00:08:25.680\nSo, if I go ahead and\nrun through this cursor statement,\n\n139\n00:08:25.680 --> 00:08:30.240\nand I execute here, notice that it's\njust taking a moment of time here.\n\n140\n00:08:30.240 --> 00:08:31.730\nAnd now, let's see.\n\n141\n00:08:31.730 --> 00:08:34.670\n>> That's a lot of hatred\non that screen right now.\n\n142\n00:08:34.670 --> 00:08:37.660\n>> It is a lot of hatred that\nI'm actually seeing here.\n\n143\n00:08:37.660 --> 00:08:40.550\nSo it's says it could not find\nthat stored procedure, let me see,\n\n144\n00:08:40.550 --> 00:08:42.770\nmaybe I typed it wrong here.\n\n145\n00:08:42.770 --> 00:08:44.940\nSo, or it did not actually create it.\n\n146\n00:08:44.940 --> 00:08:48.670\nI've had that happen before even though\nit told me it successfully created here.\n\n147\n00:08:48.670 --> 00:08:51.500\nLet me verify that I actually\ncalled on the right thing.\n\n148\n00:08:51.500 --> 00:08:56.679\nSometimes I typed it in wrongly and\nit's sales process customer.\n\n149\n00:08:59.198 --> 00:09:01.770\nSales process sales.process customer.\n\n150\n00:09:01.770 --> 00:09:02.270\nLet me verify.\n\n151\n00:09:03.750 --> 00:09:05.020\nThat is correct here.\n\n152\n00:09:05.020 --> 00:09:10.230\nAll right so I did figure out what\nI've actually done here which is when\n\n153\n00:09:10.230 --> 00:09:13.750\nI wanted to create the stored procedure,\napparently I just showed dropping\n\n154\n00:09:13.750 --> 00:09:17.330\nthe stored procedure just in case,\nbut I didn't actually create it.\n\n155\n00:09:17.330 --> 00:09:21.010\nSo this time, I went back and I ran\nthat particular stored procedure, and\n\n156\n00:09:21.010 --> 00:09:26.230\nnow in the object query, the object\nexplorer, you can now see there it is.\n\n157\n00:09:26.230 --> 00:09:28.925\nThere's the sale.process customer.\n\n158\n00:09:28.925 --> 00:09:33.394\nSo now that, that's actually showing up,\nthen, hopefully,\n\n159\n00:09:33.394 --> 00:09:38.377\n[LAUGH] we can come back down here and\nrun this cursor statement instead.\n\n160\n00:09:46.146 --> 00:09:49.185\nSo now it should just take\na few moments and there we go.\n\n161\n00:09:49.185 --> 00:09:53.240\nAnd so now better than what I had before\nbecause it wasn't able to find it.\n\n162\n00:09:53.240 --> 00:09:58.100\nYou can now see what it did is it actually\ndid print out exactly what I had in\n\n163\n00:09:58.100 --> 00:10:01.740\nthat stored procedure, but\nthink about how I had to do this.\n\n164\n00:10:01.740 --> 00:10:05.400\nSo I found customer number 1\nusing that stored procedure.\n\n165\n00:10:05.400 --> 00:10:09.560\nBut it didn't' do that by me just going\nin and setting in a where statement.\n\n166\n00:10:09.560 --> 00:10:13.170\nNow we want to take a look at how\nto do this doing that, right?\n\n167\n00:10:13.170 --> 00:10:15.340\nIs I would have had to type\nout that select statement,\n\n168\n00:10:15.340 --> 00:10:19.950\nand what I wanted here, and then in\nthe where I would have put in customer ID,\n\n169\n00:10:19.950 --> 00:10:22.430\nyou know, whatever it is, ID equals 1.\n\n170\n00:10:22.430 --> 00:10:26.760\nWell that would return to me one row,\nand then I would have said,\n\n171\n00:10:26.760 --> 00:10:28.970\nokay I need to return customer ID 2.\n\n172\n00:10:28.970 --> 00:10:32.090\nWell notice that 2 shows up,\nbut look at three and four.\n\n173\n00:10:32.090 --> 00:10:35.100\nThree and four all the way\nthrough six is not even there.\n\n174\n00:10:35.100 --> 00:10:39.400\nOkay, so by being able to use\nsomething like a cursor, right.\n\n175\n00:10:39.400 --> 00:10:44.260\nIt allowed me to say take the entire\niteration as you go through here, and find\n\n176\n00:10:44.260 --> 00:10:48.770\nall of those customer numbers, and add\nin this processing customer in from of.\n\n177\n00:10:48.770 --> 00:10:51.700\nNow that's a very simple\noperation don't get me wrong.\n\n178\n00:10:51.700 --> 00:10:54.530\nAnd it can be done, but overall though,\n\n179\n00:10:54.530 --> 00:10:59.990\nit was that cursor statement that allowed\nme to do that fairly easily by comparison.\n\n180\n00:10:59.990 --> 00:11:03.440\nBut in the process here,\nwhen we start to take a look,\n\n181\n00:11:03.440 --> 00:11:07.260\nyou do want to make sure that you\nonly use them when it's an exception.\n\n182\n00:11:07.260 --> 00:11:11.450\nDon't use them as a matter of normal\nprocedure here, just because you go,\n\n183\n00:11:11.450 --> 00:11:12.980\nalright, I know what can be done.\n\n184\n00:11:12.980 --> 00:11:17.090\nBecause it does, it takes a lot more\nprocessing power to do this as well, so\n\n185\n00:11:17.090 --> 00:11:20.650\njust remember that when you do something\nlike that, you do end up hitting\n\n186\n00:11:20.650 --> 00:11:25.600\nthe server a lot harder than a regular\nstatement would actually go instead.\n\n187\n00:11:25.600 --> 00:11:28.400\nBut it does take a little bit less work.\n\n188\n00:11:28.400 --> 00:11:31.228\nNow if I wanted to do it\nwithout the cursor itself.\n\n189\n00:11:31.228 --> 00:11:34.220\nOkay I can but\n\n190\n00:11:34.220 --> 00:11:38.730\nnotice the amount of things that I have\nto type in to make it work here okay.\n\n191\n00:11:38.730 --> 00:11:42.470\nSo don't get me wrong, learning the cursor\nstatements that is beyond what we\n\n192\n00:11:42.470 --> 00:11:46.140\nnormally would do, we're just trying\nto emphasis that idea of a cursor here.\n\n193\n00:11:46.140 --> 00:11:51.630\nBut notice this, okay, I would declare it\nand then I will tell it to go through row\n\n194\n00:11:51.630 --> 00:11:56.970\nby row here, and select the top one\n]of everything that it does, and\n\n195\n00:11:56.970 --> 00:12:01.670\nto tell it to start all over again is on\nevery single row is what I would be doing.\n\n196\n00:12:01.670 --> 00:12:03.800\nAnd is that actually a lot easier?\n\n197\n00:12:03.800 --> 00:12:05.380\nWell it may be.\n\n198\n00:12:05.380 --> 00:12:08.690\nBut the very fact is we\ncan do it in this way.\n\n199\n00:12:08.690 --> 00:12:11.350\nIt just requires a little\nbit more to do that.\n\n200\n00:12:11.350 --> 00:12:13.980\nSo normally if you had\nthe ability to do it,\n\n201\n00:12:13.980 --> 00:12:17.640\nit doesn't mean that you always should do\nit that way, but cursors really do help\n\n202\n00:12:17.640 --> 00:12:23.370\nyou when you are trying to make\nsure that you do go row by row.\n\n203\n00:12:23.370 --> 00:12:27.530\nNow the other thing that it talks about\nof course are user defined functions, and\n\n204\n00:12:27.530 --> 00:12:32.670\nwe've hit user defined functions like\ncrazy throughout this series, and\n\n205\n00:12:32.670 --> 00:12:34.210\nthe idea there is simple.\n\n206\n00:12:34.210 --> 00:12:39.840\nRemember user defined functions again\nalso do a row-by-row processing.\n\n207\n00:12:39.840 --> 00:12:42.430\nAnd whenever you actually\nhave user defined functions\n\n208\n00:12:42.430 --> 00:12:45.230\nyou end up seeing that if you\nopen up the execution plan,\n\n209\n00:12:45.230 --> 00:12:49.880\nthey're fairly suboptimal by comparison\ncuz you manually wrote things out.\n\n210\n00:12:49.880 --> 00:12:53.480\nBut the nice thing about them is that\nusually the reason why we do so,\n\n211\n00:12:53.480 --> 00:12:57.460\nis that we wanna write that\ncomplex statement one time, right?\n\n212\n00:12:57.460 --> 00:12:59.840\nWe don't wanna do it every\ntime we have to do it.\n\n213\n00:12:59.840 --> 00:13:01.920\nWe essentially wanna write it one time.\n\n214\n00:13:01.920 --> 00:13:07.550\nAnd so there is a savings benefit on the\nuser end, but on the processing end of it.\n\n215\n00:13:07.550 --> 00:13:09.320\nReally, SQL Server would love for\n\n216\n00:13:09.320 --> 00:13:13.020\nyou instead to use the set theories\ninstead when we start to take a look.\n\n217\n00:13:13.020 --> 00:13:16.810\nNow the other thing that we\nalso have to do, of course,\n\n218\n00:13:16.810 --> 00:13:20.610\nis when we talk about efficiency and\nmore of these things as well,\n\n219\n00:13:20.610 --> 00:13:24.580\nis being able to combine\nmultiple DNL operations together.\n\n220\n00:13:24.580 --> 00:13:27.830\nNow, when we start talking about that,\nwe're normally talking about of course\n\n221\n00:13:27.830 --> 00:13:31.380\ndoing things like insert,\ndelete, and update, okay.\n\n222\n00:13:31.380 --> 00:13:36.500\nAnd the great thing is, if you take a look\nin our series, we actually did a an actual\n\n223\n00:13:36.500 --> 00:13:42.230\nwhole episode here on update merch,\ndelete and insert here.\n\n224\n00:13:42.230 --> 00:13:46.100\nAnd we included one more function\nwhich was called merch, okay.\n\n225\n00:13:46.100 --> 00:13:49.990\nAnd the merch function essentially\ntakes all those things and\n\n226\n00:13:49.990 --> 00:13:54.390\nallows us to actually issue\nthem conditionally instead.\n\n227\n00:13:54.390 --> 00:13:57.560\nSo let's go ahead and\ntake a look at that one again, and\n\n228\n00:13:57.560 --> 00:13:59.760\nthis should help us out as well, okay?\n\n229\n00:13:59.760 --> 00:14:03.850\nNow I'm gonna go ahead and create a new\ntable here, and I'll call it table 20 just\n\n230\n00:14:03.850 --> 00:14:06.830\nin case I've already made 19 of these\ntables, which is possible here.\n\n231\n00:14:07.900 --> 00:14:10.750\nSo verify I'm gonna create\nthis database here.\n\n232\n00:14:10.750 --> 00:14:14.660\nAnd what I want to do, and we'll see\nthis cuz I actually have it nice and\n\n233\n00:14:14.660 --> 00:14:17.360\ncommented out in our table here.\n\n234\n00:14:17.360 --> 00:14:20.580\nOkay, is I'm gonna create\nthis products table.\n\n235\n00:14:22.020 --> 00:14:27.450\nAnd it's actually gonna have a product ID,\nproduct name and also the rate.\n\n236\n00:14:28.780 --> 00:14:33.290\nAnd I'm gonna execute that and\nverify that the command ran successfully.\n\n237\n00:14:33.290 --> 00:14:39.620\nSo I now have my products table, and then\nI'm going to insert in that products table\n\n238\n00:14:41.480 --> 00:14:44.880\nthese values here, and I use food\nbecause that's the way that I am.\n\n239\n00:14:44.880 --> 00:14:47.800\nI'm going to insert them in 4 rows, and\n\n240\n00:14:47.800 --> 00:14:53.140\noops, let me verify,\nI've got a message down here.\n\n241\n00:14:53.140 --> 00:14:54.390\nIt says something did not write.\n\n242\n00:14:56.130 --> 00:14:57.980\nYou wanna know why?\n\n243\n00:14:57.980 --> 00:15:00.640\nCuz I actually didn't type\nin the right number there.\n\n244\n00:15:00.640 --> 00:15:01.581\nLet's do it this way.\n\n245\n00:15:04.644 --> 00:15:06.110\nThere we go, okay.\n\n246\n00:15:06.110 --> 00:15:09.610\nThen we're gonna create\na new updated product table,\n\n247\n00:15:09.610 --> 00:15:11.210\ncuz I wanna update a table here.\n\n248\n00:15:15.940 --> 00:15:16.950\nAnd we'll do that one.\n\n249\n00:15:16.950 --> 00:15:19.610\nSo I now have a products table,\na products 20 table, and\n\n250\n00:15:19.610 --> 00:15:22.950\nI have an updated products table here.\n\n251\n00:15:22.950 --> 00:15:26.460\nAnd let's make tea\noutrageously costly as well.\n\n252\n00:15:26.460 --> 00:15:28.250\nLet's just do it for 20 bucks.\n\n253\n00:15:28.250 --> 00:15:30.480\nWhy not.\nLet's see what happens here.\n\n254\n00:15:32.800 --> 00:15:35.400\nMake sure everything is good, okay.\n\n255\n00:15:35.400 --> 00:15:38.840\nSo, I now have the products table and\nnow I have an updated products table.\n\n256\n00:15:38.840 --> 00:15:42.320\nI have items in them, and\nremember that what I want here,\n\n257\n00:15:42.320 --> 00:15:46.730\nessentially is one statement that\nwill join those elements together,\n\n258\n00:15:46.730 --> 00:15:49.220\nthe products as well as\nthe updated products.\n\n259\n00:15:49.220 --> 00:15:52.879\nBut I wanted to do certain things\ndepending on what we see okay.\n\n260\n00:15:52.879 --> 00:15:55.976\nSo in other words I might want it to\ndelete something out of the table\n\n261\n00:15:55.976 --> 00:15:58.147\ndepending on what it\nfinds during this merge.\n\n262\n00:15:58.147 --> 00:16:01.581\nOr I wanted to update something, or\nI wanted to actually go ahead and\n\n263\n00:16:01.581 --> 00:16:04.100\ninsert something when I do this.\n\n264\n00:16:04.100 --> 00:16:10.316\nSo when I actually go ahead and\ntake a look at this whole thing here,\n\n265\n00:16:10.316 --> 00:16:14.203\nthis is what we're going to end up doing.\n\n266\n00:16:14.203 --> 00:16:17.107\nSo we're going to run\neverything that we see here and\n\n267\n00:16:17.107 --> 00:16:20.546\na little bit further down on the screen,\nas one, at one time.\n\n268\n00:16:20.546 --> 00:16:24.492\nBut notice we're going to conditionally\nmerge those tables together, and\n\n269\n00:16:24.492 --> 00:16:26.465\nnotice I'm using the term merge, and\n\n270\n00:16:26.465 --> 00:16:29.500\nI'm telling it what numbers\nI'm actually merging it on.\n\n271\n00:16:29.500 --> 00:16:32.300\nSo I actually need to update this\na little bit as we go through here.\n\n272\n00:16:34.100 --> 00:16:35.080\nIf not, it's gonna fail.\n\n273\n00:16:36.380 --> 00:16:37.689\nAnd then from this point,\n\n274\n00:16:38.750 --> 00:16:43.580\nwhen the records are matched I want it to\nupdate records if there's any changes.\n\n275\n00:16:43.580 --> 00:16:48.480\nSo here it's saying hey look,\nif it matches on the product name okay, or\n\n276\n00:16:48.480 --> 00:16:52.100\non the rate, update either one of them.\n\n277\n00:16:52.100 --> 00:16:55.020\nOkay, so in other words if they match\non this one, update the other one,\n\n278\n00:16:55.020 --> 00:16:58.820\nif those numbers don't match,\nif they actually match on this one update\n\n279\n00:16:58.820 --> 00:17:01.960\nthe other one it doesn't match here,\nmakes sense.\n\n280\n00:17:01.960 --> 00:17:04.110\nIf the records are not matched,\n\n281\n00:17:04.110 --> 00:17:07.720\ninsert incoming records from\nthe source to the target table.\n\n282\n00:17:07.720 --> 00:17:10.610\nSo what we did,\nat least I think I did here is here,\n\n283\n00:17:10.610 --> 00:17:13.030\nis I assigned the updated\ntable as being the source.\n\n284\n00:17:13.030 --> 00:17:17.260\nAnd of course the products table\nbeing the products table as well.\n\n285\n00:17:18.550 --> 00:17:22.320\nAnd then from that point, tell it what\nto do when it doesn't match at all.\n\n286\n00:17:22.320 --> 00:17:24.340\nOkay, so it will not match by the source.\n\n287\n00:17:24.340 --> 00:17:29.690\nMake sure in the target table there,\nwhich is a products 20 table,\n\n288\n00:17:29.690 --> 00:17:34.010\nthat it's going to be deleted and\nthen to report to me that action as well.\n\n289\n00:17:34.010 --> 00:17:35.390\nAnd to give me some type of input.\n\n290\n00:17:36.390 --> 00:17:39.765\nSo if I take that entire\nstatement then and run it.\n\n291\n00:17:43.223 --> 00:17:45.250\nAnd hope everything actually does run.\n\n292\n00:17:45.250 --> 00:17:49.690\nThis tells me that the query\nwas updated successfully.\n\n293\n00:17:49.690 --> 00:17:52.497\nI can see where it now gives\nme five different rows,\n\n294\n00:17:52.497 --> 00:17:54.466\ncuz I also changed something here.\n\n295\n00:17:54.466 --> 00:17:57.803\nThe original time that I ran\nit it gave me four rows, but\n\n296\n00:17:57.803 --> 00:18:01.869\nyou can see where everything actually\ndid get updated or deleted or\n\n297\n00:18:01.869 --> 00:18:05.296\ninserted based on the information\nit ended up finding.\n\n298\n00:18:05.296 --> 00:18:10.006\nSo we can see that, and\nnow to verify all that is true,\n\n299\n00:18:10.006 --> 00:18:14.301\nlet me scroll back down\nhere toward the bottom and\n\n300\n00:18:14.301 --> 00:18:17.360\nlet me make sure I do the right one.\n\n301\n00:18:17.360 --> 00:18:19.739\nSo here is the table that was updated,\nwhich is the Products20.\n\n302\n00:18:21.110 --> 00:18:22.096\nAnd I execute it.\n\n303\n00:18:22.096 --> 00:18:25.649\nAnd, now you can see,\nI told you I'd change the tea to 20.\n\n304\n00:18:25.649 --> 00:18:26.517\nWell, there you go.\n\n305\n00:18:26.517 --> 00:18:29.295\nAnd this one also went from 20 to 25.\n\n306\n00:18:29.295 --> 00:18:31.324\nAnd this one, as well, went from 30 to 35.\n\n307\n00:18:31.324 --> 00:18:31.980\nYou name it.\n\n308\n00:18:31.980 --> 00:18:33.820\nAnd this one actually\ngot changed to pizza.\n\n309\n00:18:33.820 --> 00:18:34.890\nSo go figure.\n\n310\n00:18:34.890 --> 00:18:37.030\nOne was burger and now it's pizza.\n\n311\n00:18:37.030 --> 00:18:41.265\nYou can see where something like this is\nfairly helpful when you start to do this\n\n312\n00:18:41.265 --> 00:18:42.173\nas well, okay?\n\n313\n00:18:42.173 --> 00:18:46.836\nSo you do have the ability to use\nthese types of functions, but normally\n\n314\n00:18:46.836 --> 00:18:51.810\nremember that for us if it's a roll based\ntype of function like a user defined\n\n315\n00:18:51.810 --> 00:18:56.889\nscalar function or the idea of a cursor,\nthe exception rather than the rule.\n\n316\n00:18:56.889 --> 00:19:00.000\nWhen you can't see any other way to do it,\nthat's when you use it.\n\n317\n00:19:00.000 --> 00:19:04.170\nDo not use them as a regular as\nfar as anything else that you do.\n\n318\n00:19:04.170 --> 00:19:07.490\nAnd of course, you do have the ability\nto combine multiple statements together\n\n319\n00:19:07.490 --> 00:19:09.690\nusing a function such as merge here.\n\n320\n00:19:09.690 --> 00:19:14.280\nTo really help you to be more in tune\nwith the operations that need to be done.\n\n321\n00:19:14.280 --> 00:19:17.510\nNow, on this one, would you take a little\nbit of time to learn more about it?\n\n322\n00:19:17.510 --> 00:19:18.170\nAbsolutely.\n\n323\n00:19:18.170 --> 00:19:21.060\nThe good thing is we've already went\nthrough the entirety of it in another\n\n324\n00:19:21.060 --> 00:19:24.230\nshow, so make sure you also\ncheck that show out as well.\n\n325\n00:19:24.230 --> 00:19:27.370\nBut overall, though, there are a lot of\ndifferent functions that we have to be\n\n326\n00:19:27.370 --> 00:19:29.280\naware of as we become more and\n\n327\n00:19:29.280 --> 00:19:33.040\nmore in tune with querying our SQL server,\nit also means that we actually\n\n328\n00:19:33.040 --> 00:19:36.516\nstart to learn a little bit more about the\nmanagement and what makes it work better.\n\n329\n00:19:36.516 --> 00:19:42.560\nSet-based functions, or set-based\noperations, much better than the use of,\n\n330\n00:19:42.560 --> 00:19:47.110\nof course, row-based operations\ninside of the SQL server, so\n\n331\n00:19:47.110 --> 00:19:50.420\nkeep that in mind as you continue to\nactually learn more about clearing.\n\n332\n00:19:50.420 --> 00:19:53.720\n>> Well all right, well Rye thank you so\nmuch for increasing our knowledge\n\n333\n00:19:53.720 --> 00:19:57.570\non SQL when it comes to these\nlovely operations that we have, but\n\n334\n00:19:57.570 --> 00:19:59.800\nit looks like we've come to the end for\nthis show.\n\n335\n00:19:59.800 --> 00:20:01.670\nWe do thank you again for dropping by.\n\n336\n00:20:01.670 --> 00:20:02.880\nWe thank you guys for watching.\n\n337\n00:20:02.880 --> 00:20:04.113\nWe're gonna go ahead and sign off.\n\n338\n00:20:04.113 --> 00:20:06.142\nFor ITProTV I've been\nyour host Daniel Lowery.\n\n339\n00:20:06.142 --> 00:20:07.140\n>> And I'm Ronnie Wong.\n\n340\n00:20:07.140 --> 00:20:09.215\n>> We'll see you next time.\n\n341\n00:20:09.215 --> 00:20:15.368\n[MUSIC]\n\n",
          "vimeoId": "166816810"
        },
        {
          "description": "In this episode, Daniel and Ronnie discuss implementing errors and error handling in SQL Server 2014. They define and discuss the types of locks and their scope of use. They also look at implementing the TRY/CATCH/THROW functions and custom error reporting.",
          "length": "1677",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-4-implement_error_handling-051316-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-4-implement_error_handling-051316-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-sql70461/microsoft-sql70461-4-4-implement_error_handling-051316-1-sm.jpg",
          "title": "Implement Error Handling",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.573 --> 00:00:16.068\n>> All right greetings everyone and\nwelcome to another exciting episode of\n\n3\n00:00:16.068 --> 00:00:20.191\nITProTV I'm your host, Daniel Lowrie, and\nin today's episode we are continuing on\n\n4\n00:00:20.191 --> 00:00:23.131\nwith our series on querying\nMicrosoft SQL server 2014.\n\n5\n00:00:23.131 --> 00:00:25.650\nJoining us back in\nthe studio again to help us\n\n6\n00:00:25.650 --> 00:00:28.410\nout with that very endeavor is\nour good friend Mr. Ronnie Wong.\n\n7\n00:00:28.410 --> 00:00:29.960\nRonnie, welcome back sir, how's it going?\n\n8\n00:00:29.960 --> 00:00:33.230\n>> It's going great, as we continue\nto take a look at more, of course,\n\n9\n00:00:33.230 --> 00:00:34.830\nof the SQL server 2014.\n\n10\n00:00:34.830 --> 00:00:38.930\nToday we're talking about\nimplementing error handling.\n\n11\n00:00:38.930 --> 00:00:40.650\nNow, when we start talking\nabout error handling.\n\n12\n00:00:40.650 --> 00:00:42.060\nWhat in the world is going on?\n\n13\n00:00:42.060 --> 00:00:44.200\nDoesn't SQL already handle errors?\n\n14\n00:00:44.200 --> 00:00:49.320\nWell it really does, it already gives us\nsome errors that's designed by the system\n\n15\n00:00:49.320 --> 00:00:51.390\nand when we see it it tends\nto show up in red and\n\n16\n00:00:51.390 --> 00:00:54.400\nthat's how I know a lot of times that\nI'm actually doing something wrong.\n\n17\n00:00:54.400 --> 00:00:57.500\nYou've seen plenty of that when I've\nactually been in this series as well.\n\n18\n00:00:57.500 --> 00:01:01.080\nNow, in terms of error handling though,\nthere are some times where\n\n19\n00:01:01.080 --> 00:01:05.280\nthe query that you run you want it to\nactually give you specific errors instead.\n\n20\n00:01:05.280 --> 00:01:09.880\nIn other words errors that you want it to\ngive instead of errors the system itself\n\n21\n00:01:09.880 --> 00:01:12.170\ngenerates from what it does.\n\n22\n00:01:12.170 --> 00:01:16.570\nAnd the reason why is that a lot of times\nthe errors that might actually come from\n\n23\n00:01:16.570 --> 00:01:19.920\nthe system, don't get me wrong they're\nhelpful to get you back on the right\n\n24\n00:01:19.920 --> 00:01:23.490\ntrack, but if it's something custom that\nyou might have done such as some type of\n\n25\n00:01:23.490 --> 00:01:27.680\napplication, something that's actually\ngenerating it besides what SQL knows.\n\n26\n00:01:27.680 --> 00:01:30.250\nWell the only thing it can do\nis give you a fairly generic\n\n27\n00:01:30.250 --> 00:01:33.890\nerror to the point where it's\ndifficult to even know where to begin.\n\n28\n00:01:33.890 --> 00:01:38.120\nSo today we're gonna actually take a look\nat the idea of actually how we can\n\n29\n00:01:38.120 --> 00:01:41.700\nuse some of the SQL that we've learned and\nthen a little bit more and\n\n30\n00:01:41.700 --> 00:01:44.090\nhow to handle errors in that way as well.\n\n31\n00:01:44.090 --> 00:01:46.770\nWe're also gonna talk\nbriefly about the idea of\n\n32\n00:01:46.770 --> 00:01:52.230\nwhere SQL tries to also prevent\nerrors during transactions, too.\n\n33\n00:01:52.230 --> 00:01:54.800\nNow, we've already mentioned\nthe idea of transactions and\n\n34\n00:01:54.800 --> 00:01:58.510\nbeing able to control those transactions\nand knowing where that comes from,\n\n35\n00:01:58.510 --> 00:02:03.000\nbut we're also gonna take a look at\njust one simple function here briefly,\n\n36\n00:02:03.000 --> 00:02:06.900\nabout the idea of course,\nwhat we call locks that end up happening.\n\n37\n00:02:06.900 --> 00:02:09.000\nSo let's start right there,\ncuz that's actually a great one.\n\n38\n00:02:09.000 --> 00:02:11.900\nAnd you're probably saying well,\nwhy does that come under handling errors?\n\n39\n00:02:11.900 --> 00:02:17.210\nWell, it really is preventing errors more\nthan anything else, to try and help us.\n\n40\n00:02:17.210 --> 00:02:20.490\nSo if you remember that transactions\nreally are designed to help us to keep\n\n41\n00:02:20.490 --> 00:02:25.310\na consistent database, but as well as to\nisolate to ensure that we are not gonna\n\n42\n00:02:25.310 --> 00:02:30.510\nget errors by actually having transactions\nthat can cause, well, a lot of problems.\n\n43\n00:02:30.510 --> 00:02:35.370\nSo the way that they do that inside of\nthe SQL server is to preserve isolation\n\n44\n00:02:35.370 --> 00:02:36.690\nby issuing, essentially,\n\n45\n00:02:36.690 --> 00:02:42.060\nlocks on resources as resources\nare accessing those resources.\n\n46\n00:02:42.060 --> 00:02:46.490\nI know that sounds strange but\nit's true in the very fact that we don't\n\n47\n00:02:46.490 --> 00:02:50.980\nreally want two different calls\non the same database information.\n\n48\n00:02:52.070 --> 00:02:55.550\nWhen that happens, well it doesn't\nknow where to return the data.\n\n49\n00:02:55.550 --> 00:02:58.840\nIt doesn't know what to actually give,\nwhat results here.\n\n50\n00:02:58.840 --> 00:03:02.860\nOr which particular one actually\nhas precedence over the other one.\n\n51\n00:03:02.860 --> 00:03:07.210\nSo instead what SQL ends up doing is it\nactually has different types of locks.\n\n52\n00:03:07.210 --> 00:03:10.980\nAnd there's really two basic distinct\nlocks that are out there that we have to\n\n53\n00:03:10.980 --> 00:03:12.390\nconcern ourselves with.\n\n54\n00:03:12.390 --> 00:03:16.380\nAnd one, of course, is what we call\nthe exclusive types of locks and\n\n55\n00:03:16.380 --> 00:03:19.880\nthe other one is what is\ncalled shared locks instead.\n\n56\n00:03:19.880 --> 00:03:24.650\nNow, as it sounds here, the idea of\nthe exclusive locks mean that when it's\n\n57\n00:03:24.650 --> 00:03:29.570\nlocked exclusively, you're the only one\nthat has access to it, so it makes sense.\n\n58\n00:03:29.570 --> 00:03:30.920\nBut in the shared locks,\n\n59\n00:03:30.920 --> 00:03:36.110\nit means not only do you have access to\nit, but it's also shared as a possibility.\n\n60\n00:03:36.110 --> 00:03:38.970\nNow the other thing about\nthis is that actually,\n\n61\n00:03:38.970 --> 00:03:41.380\nthey're not super\ncompatible with each other.\n\n62\n00:03:41.380 --> 00:03:44.830\nSo I made a little graph, I guess,\nor a chart to try and help us and\n\n63\n00:03:44.830 --> 00:03:48.860\nout to make sure that we understand what\nhappens when we start to see this, okay?\n\n64\n00:03:48.860 --> 00:03:53.060\nSo when it comes down to it as far as\nbasic locks go, let's just say that over\n\n65\n00:03:53.060 --> 00:03:58.050\nhere on the left-hand side, that's you and\nme issuing a request to either see data or\n\n66\n00:03:58.050 --> 00:04:01.050\nto update something inside\nof the database itself.\n\n67\n00:04:01.050 --> 00:04:04.950\nNow remember when we update something\nwe're actually gonna change the database\n\n68\n00:04:04.950 --> 00:04:09.890\nand that normally issues out\nan exclusive type of lock to say hey,\n\n69\n00:04:09.890 --> 00:04:11.960\nhere's the data that needs to be locked.\n\n70\n00:04:11.960 --> 00:04:16.400\nAnd when I do that most of the time people\ncan't even read that data while it's\n\n71\n00:04:16.400 --> 00:04:20.320\nactually exclusively locked because\nI'm the one that's actually locked it.\n\n72\n00:04:20.320 --> 00:04:23.760\nThere is of course, where I actually just\nissue out let's say a select statement,\n\n73\n00:04:23.760 --> 00:04:27.760\nwhere I'm reading the data, that I could\nactually say because I'm not manipulating\n\n74\n00:04:27.760 --> 00:04:31.690\nor changing the underlying database,\nI can also allow Daniel at the same time,\n\n75\n00:04:31.690 --> 00:04:35.060\nessentially, to be able to write a query,\nand also be able to see that, but\n\n76\n00:04:35.060 --> 00:04:38.360\nwe're both not changing\nthe data at the same time.\n\n77\n00:04:38.360 --> 00:04:40.580\nBut remember that it is\nalso what is allowed.\n\n78\n00:04:40.580 --> 00:04:42.560\nAgain, it's either exclusive or shared.\n\n79\n00:04:42.560 --> 00:04:45.350\nWhen it comes down to exclusive\nit doesn't allow anything.\n\n80\n00:04:45.350 --> 00:04:48.868\nSo essentially for\nus when it comes down to being exclusive,\n\n81\n00:04:48.868 --> 00:04:52.560\nexclusive is not gonna allow\nanything else to on except for\n\n82\n00:04:52.560 --> 00:04:56.750\nwhoever has that exclusive use of that\nresource at that particular point.\n\n83\n00:04:56.750 --> 00:05:00.018\nWhat if you actually have\nrequested something exclusive but\n\n84\n00:05:00.018 --> 00:05:01.630\nit says I wanna allow shared.\n\n85\n00:05:01.630 --> 00:05:02.285\nWell, guess what?\n\n86\n00:05:02.285 --> 00:05:05.310\nIt's still not gonna be\nallowed here either.\n\n87\n00:05:05.310 --> 00:05:07.610\nAnd the same thing with the other way.\n\n88\n00:05:07.610 --> 00:05:10.560\nIf you actually had requested a shared but\nyet, for one reason or another,\n\n89\n00:05:10.560 --> 00:05:12.600\nthe database is saying\nthis should be exclusive.\n\n90\n00:05:12.600 --> 00:05:14.970\nGuess what?\nYou're gonna get exclusive anyways.\n\n91\n00:05:14.970 --> 00:05:20.110\nSo the only one that allows you\nto be able to be compatible\n\n92\n00:05:20.110 --> 00:05:24.410\nis when both sides,\nas far as the compatibility goes,\n\n93\n00:05:24.410 --> 00:05:28.860\nIs you issue out a request shared and\nthen, of course, the database says,\n\n94\n00:05:28.860 --> 00:05:33.540\nof course, this is shared and\nthen you both can get access to that.\n\n95\n00:05:33.540 --> 00:05:37.850\nSo the exclusive versus the shared\nthat's usually the way ends up\n\n96\n00:05:37.850 --> 00:05:41.300\nworking as far as how you\nmight be able to get access.\n\n97\n00:05:41.300 --> 00:05:44.580\nNow, Most of the time inside\nof the SQL server itself,\n\n98\n00:05:44.580 --> 00:05:47.590\nwe do not tend to see how this works.\n\n99\n00:05:47.590 --> 00:05:51.810\nBut if you've worked in, let's say, like\nend user types of databases like Access,\n\n100\n00:05:51.810 --> 00:05:55.020\non your own computer, you've probably\nseen something like this and\n\n101\n00:05:55.020 --> 00:05:57.280\njust didn't realize it a lot of times.\n\n102\n00:05:57.280 --> 00:05:58.340\nSo let me give an example.\n\n103\n00:05:58.340 --> 00:06:01.238\nFor those of you that have actually\nworked with Access a little bit.\n\n104\n00:06:01.238 --> 00:06:05.728\nIf you happen to have stored the database\nas a file on your own computer, and\n\n105\n00:06:05.728 --> 00:06:10.364\nnow you're actually generating queries\nagainst it, and if you go and look at\n\n106\n00:06:10.364 --> 00:06:15.356\nthe file the actual MDF file itself, you\nmight that a lot of times there's actually\n\n107\n00:06:15.356 --> 00:06:19.420\na hidden icon, if you actually show\nall the hidden files and stuff,\n\n108\n00:06:19.420 --> 00:06:23.967\nwhere it actually is the name of that\nfile but has a little lock on it, okay?\n\n109\n00:06:23.967 --> 00:06:27.527\nAnd that's actually doing one of those\ntypes of locks that it's doing here.\n\n110\n00:06:27.527 --> 00:06:29.673\nBecause saying I know\nthat the file exists but\n\n111\n00:06:29.673 --> 00:06:33.175\nright now because of the way that you're\naccessing it I'm going to make it\n\n112\n00:06:33.175 --> 00:06:36.807\nexclusive to where nobody else is going\nto access this file at the same time.\n\n113\n00:06:36.807 --> 00:06:41.639\nSo you do see these kinda lock situations\ncome up and even at the end user side, and\n\n114\n00:06:41.639 --> 00:06:44.927\nthat's where I actually kind\nof relate to it the most.\n\n115\n00:06:44.927 --> 00:06:47.326\nWhen I first started off, I was like,\nwhat are these locks about and\n\n116\n00:06:47.326 --> 00:06:49.360\nthat's where I started\ndiscovering that it can do that.\n\n117\n00:06:49.360 --> 00:06:52.870\nWell inside the SQL server,\nyou can actually do it on a row,\n\n118\n00:06:52.870 --> 00:06:54.430\non a single row, okay?\n\n119\n00:06:54.430 --> 00:06:57.810\nYou can do it on a table, you can do\nit on the entire database as well.\n\n120\n00:06:57.810 --> 00:07:01.560\nBut just kinda realize that these locks\nare in place and the true idea here,\n\n121\n00:07:01.560 --> 00:07:06.790\nright, is to ensure that we are handling\npossible errors that could come up.\n\n122\n00:07:06.790 --> 00:07:10.860\nSo it's preventing errors more than\nus handling the idea of errors.\n\n123\n00:07:10.860 --> 00:07:11.690\nThat's a good place for\n\n124\n00:07:11.690 --> 00:07:16.150\nus to go ahead and make sure that we\nget that concept locked down as well.\n\n125\n00:07:16.150 --> 00:07:17.570\nNow the good thing is, you and I,\n\n126\n00:07:17.570 --> 00:07:20.340\nwe really don't manipulate these locks so\nmuch.\n\n127\n00:07:20.340 --> 00:07:23.610\nThe SQL server itself is pretty much\nsaying, here's how we're going to handle\n\n128\n00:07:23.610 --> 00:07:27.260\nthis and you just have to actually\nlearn how to deal with that.\n\n129\n00:07:27.260 --> 00:07:30.200\n>> So Ronnie, basically what's going\non here is that the server itself or\n\n130\n00:07:30.200 --> 00:07:34.817\nthe SQL itself is trying to\nprevent errors from happening\n\n131\n00:07:34.817 --> 00:07:39.230\ncuz you get two people trying to work on\nthe same kind of data at the same time,\n\n132\n00:07:39.230 --> 00:07:42.430\nyou could have a conflict of intrest\nYou don't want that to happen.\n\n133\n00:07:42.430 --> 00:07:48.460\nBut really want we wanna get to here is\nhandling errors when errors do occur.\n\n134\n00:07:48.460 --> 00:07:52.708\nYou know, the system's done all it can to\nprevent us from getting in the weeds, and\n\n135\n00:07:52.708 --> 00:07:55.639\nwe've finally found ourselves\nsurrounded by red text.\n\n136\n00:07:55.639 --> 00:07:57.171\nWhat is it that we can do?\n\n137\n00:07:57.171 --> 00:07:57.712\n>> Right, so\n\n138\n00:07:57.712 --> 00:08:01.629\nwhat we want to do is we want to talk\nabout that issue of error handling itself.\n\n139\n00:08:01.629 --> 00:08:05.558\nRemember that the system itself will throw\nout those red errors the way that we\n\n140\n00:08:05.558 --> 00:08:06.413\nneeded them to.\n\n141\n00:08:06.413 --> 00:08:10.428\nBut even then, a lot of those error\nmessages that we get are fairly,\n\n142\n00:08:10.428 --> 00:08:12.055\nI don't know how to say it.\n\n143\n00:08:12.055 --> 00:08:13.254\n>> Generic.\n\n144\n00:08:13.254 --> 00:08:15.053\n>> Ambiguous, yeah, generic, ambiguous.\n\n145\n00:08:15.053 --> 00:08:18.074\nAnd even they do show us a lot of\ninformation, they can also show us,\n\n146\n00:08:18.074 --> 00:08:19.150\nwell, nothing.\n\n147\n00:08:19.150 --> 00:08:20.575\nSo let me kind of give\nyou an example here.\n\n148\n00:08:20.575 --> 00:08:24.590\nI'm just gonna change something in this\nstatement that I've got, right away.\n\n149\n00:08:24.590 --> 00:08:30.040\nFor right here,\nlet me just put in BEGINs, instead.\n\n150\n00:08:30.040 --> 00:08:30.790\nThat will work.\n\n151\n00:08:32.200 --> 00:08:37.307\nAnd try and just run this just basic\nidea here, and we'll see a syntax error.\n\n152\n00:08:37.307 --> 00:08:38.733\nThere we go.\n\n153\n00:08:38.733 --> 00:08:40.644\nSo, I wanna just take\na look at this error, and\n\n154\n00:08:40.644 --> 00:08:42.785\nhopefully I'll remember\nto replace this as well.\n\n155\n00:08:42.785 --> 00:08:45.520\n>> [LAUGH]\n>> So, that way I won't run into it again.\n\n156\n00:08:45.520 --> 00:08:48.504\nWell, notice that this fairly\nsimple message that we get, right?\n\n157\n00:08:48.504 --> 00:08:52.680\nMsg 2812, well, what does that even mean?\n\n158\n00:08:52.680 --> 00:08:54.920\nI mean, yeah, I don't have a clue.\n\n159\n00:08:54.920 --> 00:08:57.890\nI can't even tell you what\na Level 16 error actually is.\n\n160\n00:08:57.890 --> 00:08:59.368\n>> It's the 2812 error, Ryan, hello?\n\n161\n00:08:59.368 --> 00:09:02.458\n[LAUGH]\n>> Yeah, and the State 62?\n\n162\n00:09:02.458 --> 00:09:03.864\n>> Yeah, everyone knows that one.\n\n163\n00:09:03.864 --> 00:09:06.690\nYeah, when it comes down to it,\nthe only thing I can tell you is Line 2,\n\n164\n00:09:06.690 --> 00:09:09.275\nbecause that actually occurred on Line 2,\nyeah.\n\n165\n00:09:09.275 --> 00:09:09.840\n>> [LAUGH]\n>> So,\n\n166\n00:09:09.840 --> 00:09:15.460\nthis error really doesn't tend to give us\na lot of information that we really need.\n\n167\n00:09:15.460 --> 00:09:17.060\nNow, does that mean you\nreally can't find out?\n\n168\n00:09:17.060 --> 00:09:18.460\nNo, you can actually go out there and\n\n169\n00:09:18.460 --> 00:09:21.650\ndo some research and\nyou'll find out what message 2812 means.\n\n170\n00:09:21.650 --> 00:09:24.261\nAnd the idea of the Level,\nthere's severity Levels,\n\n171\n00:09:24.261 --> 00:09:26.060\nthere are actually out there.\n\n172\n00:09:26.060 --> 00:09:28.599\nI think, all the way up to 31,\nor something like that.\n\n173\n00:09:28.599 --> 00:09:31.781\nYou name it, there's actually\ndifferent Levels and the State, again,\n\n174\n00:09:31.781 --> 00:09:33.510\nthere's many of those, too.\n\n175\n00:09:33.510 --> 00:09:35.870\nAnd of course, Line numbers,\nof course, can be numerous.\n\n176\n00:09:35.870 --> 00:09:39.930\nBut, when we want to create our own error\nmessage to make sure it's something fairly\n\n177\n00:09:39.930 --> 00:09:45.270\nspecific, instead, we may actually choose\nto generate our own errors as well.\n\n178\n00:09:45.270 --> 00:09:50.110\nNow, that actually is a little bit more\ndetailed, a little bit more toward\n\n179\n00:09:50.110 --> 00:09:54.690\nthat DBA side, where they specifically\nsay, here's what this error message means.\n\n180\n00:09:54.690 --> 00:09:57.675\nAnd that should mean something\nto you inside of your network,\n\n181\n00:09:57.675 --> 00:10:00.550\nright, inside of your own systems, right?\n\n182\n00:10:00.550 --> 00:10:04.940\nAnd so, you might do that because you\nare creating your own custom app.\n\n183\n00:10:04.940 --> 00:10:09.150\nThat way, you know if it is from your app,\nit generates this message.\n\n184\n00:10:09.150 --> 00:10:12.837\nMost of the time, on those personal types\nof errors that you are gonna generate,\n\n185\n00:10:12.837 --> 00:10:15.620\nit normally begins with 50,000 or higher.\n\n186\n00:10:15.620 --> 00:10:18.550\nSo, when you start seeing messages\nthat begin in the 50,000s,\n\n187\n00:10:18.550 --> 00:10:20.348\nit's probably because you generated it.\n\n188\n00:10:20.348 --> 00:10:22.880\nAnd that's probably something\nyou really want to realize.\n\n189\n00:10:22.880 --> 00:10:25.790\nAnd of course, you can set whatever\nlevel of severity that you want and\n\n190\n00:10:25.790 --> 00:10:27.310\nthe state of things.\n\n191\n00:10:27.310 --> 00:10:30.207\nBut overall though, most of the time,\nwhen we see some of these errors,\n\n192\n00:10:30.207 --> 00:10:33.248\nit can help when you're doing those very\nsimple SQL statements to help you to\n\n193\n00:10:33.248 --> 00:10:34.311\npinpoint where they are.\n\n194\n00:10:34.311 --> 00:10:37.960\nAnd even sometimes, it can give you\na little bit more syntactical things.\n\n195\n00:10:37.960 --> 00:10:41.950\nLike here,\nit could not find stored procedure BEGINs.\n\n196\n00:10:41.950 --> 00:10:44.690\nSo, that actually makes\na little bit more sense.\n\n197\n00:10:44.690 --> 00:10:49.360\nBut overall though, there are things that\nyou can do to generate better errors.\n\n198\n00:10:49.360 --> 00:10:53.585\nAnd the problem that you have though, is\nthey're not the easiest thing to do, okay?\n\n199\n00:10:53.585 --> 00:10:56.991\nWhen it comes down to actually\ngetting the errors to show up, and\n\n200\n00:10:56.991 --> 00:10:59.340\nwhat to do when the errors\nend up happening.\n\n201\n00:10:59.340 --> 00:11:02.817\nSo, I wanna show you some\nof the complexities here,\n\n202\n00:11:02.817 --> 00:11:06.697\nin a statement that I've\nactually created to help us out.\n\n203\n00:11:06.697 --> 00:11:11.864\nNow, one of the best ways, or\none of ways that actually recommended that\n\n204\n00:11:11.864 --> 00:11:17.454\nwe do this is by using, what we call, the\nTRY and CATCH type of errors along with\n\n205\n00:11:17.454 --> 00:11:21.915\nanother option called THROW, is what when-\n>> Sounds like a baseball game [LAUGH].\n\n206\n00:11:21.915 --> 00:11:26.605\n>> It does really sound like a baseball\ngame when it comes down to what we have.\n\n207\n00:11:26.605 --> 00:11:28.820\nNow, when it begins here, right?\n\n208\n00:11:28.820 --> 00:11:32.790\nWhat we're actually saying is,\nhow do I generate an error, okay?\n\n209\n00:11:32.790 --> 00:11:35.980\nWell, the first thing you have to do is\ncome up with some type of test, right?\n\n210\n00:11:35.980 --> 00:11:38.920\nSo, what is the code\nthat you want to test?\n\n211\n00:11:38.920 --> 00:11:40.560\nWell, if that happens,\n\n212\n00:11:40.560 --> 00:11:44.870\nyou actually put that inside of\nwhat we call the idea of TRYs.\n\n213\n00:11:44.870 --> 00:11:50.470\nSo, notice I have a BEGIN TRY here at\nthe top, and then I have an END TRY here.\n\n214\n00:11:50.470 --> 00:11:54.440\nEverything in between that is\nessentially my test, okay?\n\n215\n00:11:54.440 --> 00:11:58.665\nSo, I'm saying all this code in-between,\nthat's really what I want you to\n\n216\n00:11:58.665 --> 00:12:02.311\nactually test on to see if there's\nan error in the process, okay?\n\n217\n00:12:02.311 --> 00:12:06.865\nSo, when I actually have that,\nany code that's actually in-between that,\n\n218\n00:12:06.865 --> 00:12:09.770\nbegins that portion of the idea of TRY.\n\n219\n00:12:09.770 --> 00:12:11.640\nSo, at this point,\nI'm telling it, go ahead and\n\n220\n00:12:11.640 --> 00:12:14.860\ndo an identity insertion here\non this product table, and\n\n221\n00:12:14.860 --> 00:12:18.470\ninsert it into this product table,\nand here is the values as well.\n\n222\n00:12:18.470 --> 00:12:20.520\nAnd there is a couple of them that I want.\n\n223\n00:12:20.520 --> 00:12:22.440\nI wanna do an insert on whether or\n\n224\n00:12:22.440 --> 00:12:27.820\nnot the product category on Test1 is okay\nor whether it's a bad product category.\n\n225\n00:12:27.820 --> 00:12:31.660\nIt really doesn't matter what you actually\nput here, well at least on my database,\n\n226\n00:12:31.660 --> 00:12:33.810\nit doesn't really matter what I'm putting.\n\n227\n00:12:33.810 --> 00:12:38.080\nBut, what this is going to end up doing,\nas far as the way that I have,\n\n228\n00:12:38.080 --> 00:12:42.644\nis the first one is going to end up\nfailing, the second one is going to end up\n\n229\n00:12:42.644 --> 00:12:47.312\nsucceeding, okay, as far as these\nvalues and what's happening, okay?\n\n230\n00:12:47.312 --> 00:12:50.752\nSo, that's actually going to happen for\nwhat we're gonna get, but\n\n231\n00:12:50.752 --> 00:12:53.440\nthe message that we'll get\nis one from the system.\n\n232\n00:12:53.440 --> 00:12:56.244\nIt's generic, it's plain, it's simple, and\n\n233\n00:12:56.244 --> 00:12:59.851\neven though I actually put in\nsome different information here,\n\n234\n00:12:59.851 --> 00:13:03.149\nt hat's what we'll end up\nseeing as far as the TRY, okay?\n\n235\n00:13:03.149 --> 00:13:07.391\nNow, the reason why that's important is,\nthat once I have that tested on there,\n\n236\n00:13:07.391 --> 00:13:11.648\nokay, this is what we have to remember,\nis the way that this test ends up working.\n\n237\n00:13:11.648 --> 00:13:14.718\nAny place within the tri-statement, okay?\n\n238\n00:13:14.718 --> 00:13:16.140\nAny place, it doesn't matter where.\n\n239\n00:13:16.140 --> 00:13:20.840\nWhether on Line 3, or whether on Line 22,\nor whatever it might be, okay?\n\n240\n00:13:20.840 --> 00:13:23.260\nAnyplace in there, if there is some error,\n\n241\n00:13:23.260 --> 00:13:26.720\nsome SQL error that the SQL\nserver doesn't know about,\n\n242\n00:13:26.720 --> 00:13:31.650\nor not know about, doesn't know how to\ntranslate and actually says is an error.\n\n243\n00:13:31.650 --> 00:13:33.290\nIt immediately stops at that point,\n\n244\n00:13:33.290 --> 00:13:36.510\nit doesn't try to process\nanything else in that TRY.\n\n245\n00:13:36.510 --> 00:13:42.340\nAnd it immediately throws it to what\nwe call the CATCH side instead, okay?\n\n246\n00:13:42.340 --> 00:13:46.530\nSo, this is where you then can\ngenerate your own errors, okay?\n\n247\n00:13:46.530 --> 00:13:51.620\nSo now, you can say, look,\nif I do get some type of error, okay?\n\n248\n00:13:51.620 --> 00:13:53.860\nIf we actually want this here.\n\n249\n00:13:53.860 --> 00:13:55.790\nIn other words,\nif it's a duplicate key violation,\n\n250\n00:13:55.790 --> 00:13:57.500\nI want the error number to begin here.\n\n251\n00:13:57.500 --> 00:13:59.090\nAnd you can set that, okay.\n\n252\n00:13:59.090 --> 00:14:02.780\nBut if that actually happens, notice what\nI don't want is the actual print out,\n\n253\n00:14:02.780 --> 00:14:03.630\nthe error number.\n\n254\n00:14:03.630 --> 00:14:06.020\nI want it to print out this,\nPrimary Key violation.\n\n255\n00:14:06.020 --> 00:14:08.330\nOkay, so that's what happens, that's fine.\n\n256\n00:14:08.330 --> 00:14:12.980\nIf it's this type, some type of constraint\nviolation, it's supposed to be a 547, but\n\n257\n00:14:12.980 --> 00:14:16.360\nI want it to print out that it's\ncalled a Constraint violation instead.\n\n258\n00:14:16.360 --> 00:14:20.445\nELSE, if it's some other type of error,\njust give me what says Unhandled error,\n\n259\n00:14:20.445 --> 00:14:21.526\nmakes sense, okay?\n\n260\n00:14:21.526 --> 00:14:23.340\nSo, that's what we have too.\n\n261\n00:14:23.340 --> 00:14:25.582\nSo, once we do that, that's what happens.\n\n262\n00:14:25.582 --> 00:14:28.490\nSo, anyplace within that TRY,\nand that's the key,\n\n263\n00:14:28.490 --> 00:14:32.060\nanyplace there,\nno further processing goes on.\n\n264\n00:14:32.060 --> 00:14:35.470\nAnd then, it hits the CATCH\nstatement right here, okay.\n\n265\n00:14:35.470 --> 00:14:39.530\nSo, when it does that, that's what it will\ndo,and it will process everything else.\n\n266\n00:14:39.530 --> 00:14:42.830\nNow, what if there's no errors,\nand I'm still doing this?\n\n267\n00:14:42.830 --> 00:14:46.750\nWell those, if there is no errors,\nand I'm still doing this,\n\n268\n00:14:46.750 --> 00:14:51.780\nit will essentially send it after where\nI have this END CATCH right here.\n\n269\n00:14:51.780 --> 00:14:54.820\nSo, whatever statement happens after that,\nit will send to there.\n\n270\n00:14:54.820 --> 00:14:56.400\nNow, I don't have a statement.\n\n271\n00:14:56.400 --> 00:14:58.200\nThat's perfectly fine, okay?\n\n272\n00:14:58.200 --> 00:15:00.120\nBecause it doesn't matter, it's saying,\n\n273\n00:15:00.120 --> 00:15:02.580\njust run it as normal\nif there's no errors.\n\n274\n00:15:02.580 --> 00:15:03.610\nBut if there's an error,\n\n275\n00:15:03.610 --> 00:15:07.140\nsend it on to this CATCH portion,\nis what we want it to do.\n\n276\n00:15:07.140 --> 00:15:08.084\nAll right?\n\n277\n00:15:08.084 --> 00:15:10.516\nSo, let's go ahead and run this.\n\n278\n00:15:10.516 --> 00:15:14.871\nAnd I also have here, that if there's\nan error, remember, send that transaction\n\n279\n00:15:14.871 --> 00:15:19.520\ncount back to 0, roll back the entire\ntransaction, and we're fine.\n\n280\n00:15:19.520 --> 00:15:23.750\nLet me get out of the zoom,\nbecause sometimes that will get me.\n\n281\n00:15:23.750 --> 00:15:26.761\nSo, very large statement at\nthis point in comparison.\n\n282\n00:15:26.761 --> 00:15:30.328\nUgh, do this little yo-yo thing for\njust a moment.\n\n283\n00:15:30.328 --> 00:15:37.000\n>> [LAUGH]\n>> And we go and execute that.\n\n284\n00:15:37.000 --> 00:15:42.560\nAnd now, we'll see it absolutely generated\nthe error that I told it generate,\n\n285\n00:15:42.560 --> 00:15:43.850\nright, Unhandled error.\n\n286\n00:15:43.850 --> 00:15:47.379\nIt wasn't one of those two that it found,\nit was some other error that it found.\n\n287\n00:15:47.379 --> 00:15:51.759\nAnd instead of giving me a generic\nmessage like syntax unavailable or\n\n288\n00:15:51.759 --> 00:15:57.209\nsomething that was unusual here, and some\nother state message and everything else.\n\n289\n00:15:57.209 --> 00:15:59.438\nI told it,\nthis is what I wanted it to report, okay?\n\n290\n00:15:59.438 --> 00:16:04.928\nNow, you don't always have to do this,\nbut that's a simple idea that we\n\n291\n00:16:04.928 --> 00:16:10.240\ncan actually uses to help us out just\nbriefly and little bit to help us.\n\n292\n00:16:10.240 --> 00:16:14.510\nNow the problem is with this\nit's still generic okay.\n\n293\n00:16:14.510 --> 00:16:15.800\nWhen I say unhandled error what,\n\n294\n00:16:15.800 --> 00:16:21.390\nwhere in that catch statement does\ndo anything what level of the try?\n\n295\n00:16:21.390 --> 00:16:23.810\nWhat line did it happen?\n\n296\n00:16:23.810 --> 00:16:27.940\nNote I just have unhandled error, because\nthat's exactly what I told it to tell me.\n\n297\n00:16:27.940 --> 00:16:31.730\nSo I might have been a little\nbit too generic in my responses\n\n298\n00:16:31.730 --> 00:16:33.960\nwhen I told it to generate that.\n\n299\n00:16:33.960 --> 00:16:38.940\nSo when you do a try on everything else,\nright, a try and a cache,\n\n300\n00:16:38.940 --> 00:16:40.210\nyou've gotta remember that.\n\n301\n00:16:40.210 --> 00:16:43.570\nErrors that generate essentially\nautomatically send it into the cache.\n\n302\n00:16:43.570 --> 00:16:46.460\nThe cache will then\ndetermine what it is and\n\n303\n00:16:46.460 --> 00:16:49.320\ngive us some type of output at the end.\n\n304\n00:16:49.320 --> 00:16:52.940\nNow, like I said here, it does work, and\n\n305\n00:16:52.940 --> 00:16:55.380\nwe're seeing the output\nactually works here.\n\n306\n00:16:55.380 --> 00:16:58.280\nBut, the problem that we have is simple,\nis that internally,\n\n307\n00:16:58.280 --> 00:17:00.370\nthere's codes being generated, right.\n\n308\n00:17:00.370 --> 00:17:04.970\nSo, like that error message 2862,\nor 22 whatever it was,\n\n309\n00:17:04.970 --> 00:17:10.000\nwell all that stuff is actually being\ngenerated, but now if I try and\n\n310\n00:17:10.000 --> 00:17:13.760\ngo back into this and say hey I wanna\nfind out what that code number is,\n\n311\n00:17:13.760 --> 00:17:16.080\nit's not gonna tell me the real code.\n\n312\n00:17:16.080 --> 00:17:19.940\nIt's just saying it's back Peter,\nbut I'll tell you what error code\n\n313\n00:17:19.940 --> 00:17:24.120\nI want to generate but\nI'm not going to recall that code.\n\n314\n00:17:24.120 --> 00:17:26.020\nIt's just not going to do it for us, so\n\n315\n00:17:26.020 --> 00:17:31.245\nat this point what we can do is\nwe can add in an additional.\n\n316\n00:17:31.245 --> 00:17:33.845\nHelp with something\nthat's called raiserror.\n\n317\n00:17:33.845 --> 00:17:38.975\nNow I'm gonna zoom in on this word\nbecause this is very important.\n\n318\n00:17:38.975 --> 00:17:39.765\nOkay.\n\n319\n00:17:39.765 --> 00:17:41.825\nNotice we know how to spell\nthe word raise right?\n\n320\n00:17:41.825 --> 00:17:42.935\n>> I've been to school.\n\n321\n00:17:42.935 --> 00:17:46.075\n>> And you know how to spell the word\nerror, but notice that there's something\n\n322\n00:17:46.075 --> 00:17:49.625\nmissing when you actually see it all\ntogether here which is the additional E.\n\n323\n00:17:49.625 --> 00:17:51.080\nRight?\nRight in the middle.\n\n324\n00:17:51.080 --> 00:17:55.970\nNow, I'm not trying to tell you this\nbecause I'm saying that SQL misspelled it.\n\n325\n00:17:55.970 --> 00:17:57.960\nI'm trying to tell you this\nbecause it's important for\n\n326\n00:17:57.960 --> 00:18:02.350\nyou cuz you might see it later [LAUGH]\nis what I'm trying to tell you.\n\n327\n00:18:02.350 --> 00:18:06.140\nSo if you get a syntax error, or\nthey tell you that you're getting this\n\n328\n00:18:06.140 --> 00:18:11.018\nsyntax error that it doesn't recognize the\ncommand, and it spells out RAISEERROR and\n\n329\n00:18:11.018 --> 00:18:15.424\nyou go,\n\n330\n00:18:15.424 --> 00:18:21.370\nno that's spelled exactly correctly\nbecause that spells raise error.\n\n331\n00:18:21.370 --> 00:18:24.780\nYou're gonna be wrong so,\nthat's just a hint.\n\n332\n00:18:24.780 --> 00:18:28.130\n>> The incorrect spelling is\nthe correct way to do it apparently.\n\n333\n00:18:28.130 --> 00:18:29.950\n>> Yeah\n>> Funny little way the do it I think.\n\n334\n00:18:29.950 --> 00:18:33.810\n>> Yeah so now you actually see that this\nis actually a command that they use but\n\n335\n00:18:33.810 --> 00:18:36.290\nonly with one E ok.\n\n336\n00:18:36.290 --> 00:18:38.480\nVery important that we\nget that distinguished.\n\n337\n00:18:38.480 --> 00:18:41.240\nI don't know why i'm just\ntrying to give you a hint here.\n\n338\n00:18:41.240 --> 00:18:43.720\nSo just kinda realize it can happen right?\n\n339\n00:18:43.720 --> 00:18:47.720\n>> Now the second thing we're gonna do is\nwe're gonna use variables here to capture,\n\n340\n00:18:47.720 --> 00:18:50.470\nessentially, the error\nmessages that we want.\n\n341\n00:18:50.470 --> 00:18:55.520\nAgain, because now I wanna\ntake that information and\n\n342\n00:18:55.520 --> 00:18:58.630\nactually get it to generate\na little bit more, okay?\n\n343\n00:18:58.630 --> 00:19:01.920\nSo here, I'm declaring,\nhey, don't show me any\n\n344\n00:19:01.920 --> 00:19:06.730\nkid of other extranial message like it\nran on ten rows or three rows here.\n\n345\n00:19:06.730 --> 00:19:09.960\nGoing ahead and declare these variables,\nthere's actually a number of them.\n\n346\n00:19:09.960 --> 00:19:11.400\nError number makes sense,\n\n347\n00:19:11.400 --> 00:19:14.540\nthat's the number that we saw where\nit said error message number.\n\n348\n00:19:14.540 --> 00:19:17.190\nError message,\nwhat is the message that we have?\n\n349\n00:19:17.190 --> 00:19:20.920\nAnd here I'm actually creating\na fairly long one, okay?\n\n350\n00:19:20.920 --> 00:19:23.530\nSo notice NVARCHAR here with 500,\n\n351\n00:19:23.530 --> 00:19:27.630\na lot of times you might see it as 1000 or\nso, an that's because sometimes as\n\n352\n00:19:27.630 --> 00:19:32.070\nmessages can actually wrap\naround a couple of lines.\n\n353\n00:19:32.070 --> 00:19:34.830\nSo if we're actually trying to get\nthis error message that the system\n\n354\n00:19:34.830 --> 00:19:36.290\ngenerated, okay?\n\n355\n00:19:36.290 --> 00:19:39.650\nWell, I may wanna do that,\nI just left it at 500 at this point.\n\n356\n00:19:39.650 --> 00:19:42.660\nAnd the severity level is\nwhat we also have, and\n\n357\n00:19:42.660 --> 00:19:46.794\nthat's where we also see that ID of\nerror level 16 or whatever it might be.\n\n358\n00:19:46.794 --> 00:19:50.340\nOkay, so,\nremember that once we have that we're now\n\n359\n00:19:50.340 --> 00:19:53.460\ndeclaring those variables that we're\ngoing to use a little bit later on.\n\n360\n00:19:53.460 --> 00:19:55.045\nThere is my try statement.\n\n361\n00:19:55.045 --> 00:19:58.620\nOkay, so, remember that within that\ntry that's when I am saying test out\n\n362\n00:19:58.620 --> 00:20:03.130\nall this stuff here, essentially the same\ncode as what we are actually looking at.\n\n363\n00:20:03.130 --> 00:20:08.610\nThis is the same thing that I ran right\nabove it, and of course I actually\n\n364\n00:20:08.610 --> 00:20:12.890\nhave the beginning of the transaction and\nthe commit of the transaction as well.\n\n365\n00:20:12.890 --> 00:20:17.240\nBut I'm saying if everything tests out\nthere go ahead and start doing this.\n\n366\n00:20:17.240 --> 00:20:20.980\nNow notice that I start getting\nsome pink lettering in here, and\n\n367\n00:20:20.980 --> 00:20:24.199\nthat's where it begins to get a little\nbit more squirrely just for a moment.\n\n368\n00:20:25.940 --> 00:20:29.160\nXACT is short for transaction, so\n\n369\n00:20:29.160 --> 00:20:32.610\nwe're actually gonna see that\nthere's a couple of them for us.\n\n370\n00:20:32.610 --> 00:20:35.900\nThere's actually an XACT_STATE, and\nthere's a couple other of them,\n\n371\n00:20:35.900 --> 00:20:38.980\nbut they actually just are short for\nthe term transaction.\n\n372\n00:20:38.980 --> 00:20:41.380\nSo notice that this is a function, and\n\n373\n00:20:41.380 --> 00:20:44.860\nI'm telling it to actually report\nback its transaction state.\n\n374\n00:20:44.860 --> 00:20:48.050\nThere's only one of three states here,\nand I left this in the comment.\n\n375\n00:20:48.050 --> 00:20:53.270\nIf it reports back a 1, okay, that is\nwhat is called an open transaction.\n\n376\n00:20:53.270 --> 00:20:55.950\nIt is not committed or rolled back yet.\n\n377\n00:20:55.950 --> 00:20:59.100\nYou have the ability to do one\nof the two if you choose to.\n\n378\n00:20:59.100 --> 00:21:03.250\nIf when it pulls the information back and\nit reports back a 0,\n\n379\n00:21:03.250 --> 00:21:07.710\nokay, that means there's actually on\ntransaction that's opened at all.\n\n380\n00:21:07.710 --> 00:21:11.180\nSo, we probably haven't\nactually committed anything.\n\n381\n00:21:11.180 --> 00:21:16.240\nIf you get a minus one that returns,\n\n382\n00:21:16.240 --> 00:21:20.370\nthen the only action that you have is\nto rollback that transaction state.\n\n383\n00:21:21.480 --> 00:21:26.570\nSo those are usually the three that you\nend up seeing as far as that number goes.\n\n384\n00:21:26.570 --> 00:21:30.090\nThe system then will generate\na transaction count, the zeroes or\n\n385\n00:21:30.090 --> 00:21:31.240\nthe 1, right?\n\n386\n00:21:31.240 --> 00:21:35.280\nIt begins at a zero when we\nactually initiate begin tran,\n\n387\n00:21:35.280 --> 00:21:38.900\nwe switch it on to a 1 and\nthen when we do a commit or\n\n388\n00:21:38.900 --> 00:21:42.850\na rollback, it normally switches it\nback to a zero again telling it,\n\n389\n00:21:42.850 --> 00:21:46.620\nnow we can actually open this thing\nback up and start again, okay?\n\n390\n00:21:46.620 --> 00:21:49.020\nSo at this point notice that\nI'm telling it, go ahead and\n\n391\n00:21:49.020 --> 00:21:52.010\ntell me what the system number is.\n\n392\n00:21:52.010 --> 00:21:55.690\nSo what ever the system generates,\nreport that as error number.\n\n393\n00:21:55.690 --> 00:21:57.230\nOkay, same thing with the message.\n\n394\n00:21:57.230 --> 00:21:59.800\nNotice I'm not really changing\nit too much here, I'm saying,\n\n395\n00:21:59.800 --> 00:22:03.610\njust report out whatever the system is\nsaying that it needs to report out here.\n\n396\n00:22:03.610 --> 00:22:08.480\nAnd notice at the end here I have\nit where I say RAISERROR and\n\n397\n00:22:08.480 --> 00:22:11.340\nI'm telling it to report it\nin this format, the message,\n\n398\n00:22:11.340 --> 00:22:14.920\nthe severity level and\ngive me an error number of 1.\n\n399\n00:22:14.920 --> 00:22:15.790\nOkay?\n\n400\n00:22:15.790 --> 00:22:18.290\nNow the reason why this\nis important is remember\n\n401\n00:22:18.290 --> 00:22:21.780\nall this error is actually\ngenerated if I run this.\n\n402\n00:22:21.780 --> 00:22:23.450\nBut it's not actually\ngonna report that out,\n\n403\n00:22:23.450 --> 00:22:26.540\nit's gonna report out whatever I\nsay it needs to report out here.\n\n404\n00:22:26.540 --> 00:22:31.420\nBy actually running the term RAISERROR I'm\ntelling it to re-raise the error but\n\n405\n00:22:31.420 --> 00:22:34.850\nthis time with my own\ncustom numbering instead.\n\n406\n00:22:34.850 --> 00:22:39.080\nSo if I knew what the system error\nwas gonna be, I can do that.\n\n407\n00:22:39.080 --> 00:22:42.520\nAnd tell it instead I want it to report\nback that way and then go ahead and\n\n408\n00:22:42.520 --> 00:22:44.970\ndo the remainder or this as well.\n\n409\n00:22:44.970 --> 00:22:49.620\nRemember that if no other thing happens,\nif we catch that error,\n\n410\n00:22:49.620 --> 00:22:52.830\nthen at the end there,\nif everything else is actually done,\n\n411\n00:22:52.830 --> 00:22:57.250\nit will still send it on to whatever\nstatement happens after this as well.\n\n412\n00:22:57.250 --> 00:23:00.790\nSo if there's no error,\nit will send it after this immediately.\n\n413\n00:23:00.790 --> 00:23:03.930\nIf there is, and then there's\nstill stuff that needs to be run,\n\n414\n00:23:03.930 --> 00:23:06.990\nthen it will actually send\nit on after that as well.\n\n415\n00:23:06.990 --> 00:23:08.790\nBut for us, there's no other error.\n\n416\n00:23:09.890 --> 00:23:13.966\nAll right, so let's go ahead and run\nthis portion, and let me execute it and\n\n417\n00:23:13.966 --> 00:23:14.679\nthere we go.\n\n418\n00:23:18.529 --> 00:23:22.819\nSo now notice, because this was a system\ngenerated message, actually one that I\n\n419\n00:23:22.819 --> 00:23:27.764\ngenerated, right, at the bottom I told it\nto call it up, it begins at 50,000, okay.\n\n420\n00:23:27.764 --> 00:23:30.730\nAnd here is the level that\nit began with and the state.\n\n421\n00:23:30.730 --> 00:23:34.960\nAnd now, it actually is reporting\nto me the message right down here.\n\n422\n00:23:34.960 --> 00:23:37.660\nThe whole thing is saying, look, there's\na null column, it doesn't allow for\n\n423\n00:23:37.660 --> 00:23:40.670\nnulls, your insert ended up failing.\n\n424\n00:23:40.670 --> 00:23:42.340\nNow, it didn't have to report that.\n\n425\n00:23:42.340 --> 00:23:45.550\nRemember, I could have actually told\nit actually what to report out, but\n\n426\n00:23:45.550 --> 00:23:48.730\nI essentially said,\nlet it actually do the reporting.\n\n427\n00:23:48.730 --> 00:23:51.976\nSo we can actually be very brief like\nwe showed you with the unhandled error.\n\n428\n00:23:51.976 --> 00:23:56.666\nWe can be very specific here, using those\nvariables essentially helped us out.\n\n429\n00:23:56.666 --> 00:23:59.639\nBut there's one other thing\nthat's actually even better.\n\n430\n00:23:59.639 --> 00:24:01.496\nRays error, right?\n\n431\n00:24:01.496 --> 00:24:05.731\nIt can cause some different issues\ndepending on the version of SQL that\n\n432\n00:24:05.731 --> 00:24:08.100\nyou're working with.\n\n433\n00:24:08.100 --> 00:24:10.300\nSo we, of course\n\n434\n00:24:11.330 --> 00:24:16.030\nare going to just change it up a little\nbit with what is called the throw.\n\n435\n00:24:17.340 --> 00:24:21.710\nSo now just like what Daniel talked about,\nwe have a try, we have a catch, and\n\n436\n00:24:21.710 --> 00:24:23.410\nwe have a throw, okay.\n\n437\n00:24:23.410 --> 00:24:26.950\nWell now what we're gonna do is we're\nactually gonna say Let's do this instead.\n\n438\n00:24:26.950 --> 00:24:29.980\nLet's go ahead and\nuse the THROW command, and\n\n439\n00:24:29.980 --> 00:24:32.930\nthis is gonna allow me to\ntake whatever's caught, and\n\n440\n00:24:32.930 --> 00:24:37.040\nactually throw up the original\nmessage that I want to instead.\n\n441\n00:24:37.040 --> 00:24:40.540\nSo it's essentially is still the same\nthing, okay, that we're seeing.\n\n442\n00:24:40.540 --> 00:24:43.170\nSo the first part of this, not so big, but\n\n443\n00:24:43.170 --> 00:24:46.580\nwhere it actually changes again\nis gonna be the CATCH time.\n\n444\n00:24:46.580 --> 00:24:48.440\nNow notice there, here we go.\n\n445\n00:24:48.440 --> 00:24:50.990\nWe're actually saying pretty\nmuch the same thing here, and\n\n446\n00:24:50.990 --> 00:24:53.650\nthen we are adding in the word throw.\n\n447\n00:24:53.650 --> 00:24:58.210\nNow here is the key when you add in\nthe word throw without any options.\n\n448\n00:24:58.210 --> 00:25:01.210\nThere's some that there is a lot\nof options with the word throw.\n\n449\n00:25:01.210 --> 00:25:05.280\nWe're just going with the most basic one,\nwhich is throw with no options.\n\n450\n00:25:05.280 --> 00:25:08.280\nIf you do a throw with no options,\nokay none.\n\n451\n00:25:08.280 --> 00:25:10.660\nOkay.\nThen if there is anything else that\n\n452\n00:25:10.660 --> 00:25:13.880\nsupposed to happen in you catch statement,\nit's not going to work.\n\n453\n00:25:13.880 --> 00:25:18.290\nThis should be absolutely the last\nline inside of your cache\n\n454\n00:25:18.290 --> 00:25:20.630\nbefore you actually type in end cache.\n\n455\n00:25:20.630 --> 00:25:24.260\nSo make sure everything else occurs\nbefore this when you do this here, okay?\n\n456\n00:25:25.600 --> 00:25:29.750\nNow notice though, that at the end,\nright, I have it now going back and\n\n457\n00:25:29.750 --> 00:25:32.840\nsaying look,\nhere's what I really want you to report.\n\n458\n00:25:32.840 --> 00:25:33.530\nOkay?\n\n459\n00:25:33.530 --> 00:25:38.130\nSo in this whole thing, I'm just telling\nit now go ahead and do both of these for\n\n460\n00:25:38.130 --> 00:25:39.680\nme, instead.\n\n461\n00:25:39.680 --> 00:25:42.760\nAnd when I run this, and\n\n462\n00:25:42.760 --> 00:25:47.860\nI execute it, now notice\n\n463\n00:25:47.860 --> 00:25:51.530\nhere is kind of the original message and\nyou can see the difference, right?\n\n464\n00:25:51.530 --> 00:25:54.530\nThe one that I just generated was 50,000,\nokay.\n\n465\n00:25:54.530 --> 00:25:58.790\nNow notice 15, or 5 15,\nlevel 16 state line 68 and\n\n466\n00:25:58.790 --> 00:26:03.580\nnow it's actually telling\nme more details as well.\n\n467\n00:26:03.580 --> 00:26:06.220\nBut these are some of the things\nthat really do help when\n\n468\n00:26:06.220 --> 00:26:09.020\nyou actually are trying to figure\nout exactly what's going on.\n\n469\n00:26:09.020 --> 00:26:10.630\nBut if you do have a custom product and\n\n470\n00:26:10.630 --> 00:26:14.710\nyou do need to make sure that all those\nerrors that are handled and handled and\n\n471\n00:26:14.710 --> 00:26:19.450\nmessages that are meaning to you, then\nusing the combination of the the caption,\n\n472\n00:26:19.450 --> 00:26:23.300\nthe throw very much an important\npart of what's going to be going on.\n\n473\n00:26:23.300 --> 00:26:26.500\nFor most of us though, we're probably are\nnot going to get that deep into it, but\n\n474\n00:26:26.500 --> 00:26:29.150\nit is something they do want\nyou to at least understand for\n\n475\n00:26:29.150 --> 00:26:33.270\nthe exam that the is what\nall the code we want tested.\n\n476\n00:26:33.270 --> 00:26:37.390\nThe catch is where we end up reporting and\nit processes the rest of it through.\n\n477\n00:26:37.390 --> 00:26:40.720\nAnd if doesn't happen there, right,\nit just sends it after that and\n\n478\n00:26:40.720 --> 00:26:44.850\nit continues to run whatever coding\nwe might have after that as well.\n\n479\n00:26:44.850 --> 00:26:46.520\nJust on with the rest of the statement.\n\n480\n00:26:46.520 --> 00:26:50.774\nBut those are basics in error handling\nthat we have available to us inside of\n\n481\n00:26:50.774 --> 00:26:52.066\nSQL Server 2014.\n\n482\n00:26:52.066 --> 00:26:55.928\n>> This is really cool stuff actually that\nwe can either allow the system to handle\n\n483\n00:26:55.928 --> 00:26:59.610\nall the error messages and\njust keep the errors as it generates them.\n\n484\n00:26:59.610 --> 00:27:01.770\nWe could create our own\ncustom error messages.\n\n485\n00:27:01.770 --> 00:27:05.030\nOr we can work with the system error\nmessages in conjunction with our own\n\n486\n00:27:05.030 --> 00:27:09.905\ncustom error messages to get more detail\ninformation about what went wrong so\n\n487\n00:27:09.905 --> 00:27:12.905\nwe can start solving any kind of\nproblems that arose because of\n\n488\n00:27:12.905 --> 00:27:13.955\nthe errors themselves.\n\n489\n00:27:13.955 --> 00:27:17.585\nRonnie, any last nuggets of wisdom when it\ncomes to error handling before we close\n\n490\n00:27:17.585 --> 00:27:18.175\nthe show?\n\n491\n00:27:18.175 --> 00:27:21.445\n>> We've just scratched the surface,\nthat's pretty much where it comes down,\n\n492\n00:27:21.445 --> 00:27:24.205\nbut those basics are really\ngoing to be the key,\n\n493\n00:27:24.205 --> 00:27:28.170\nbecause remember that error\nmessages are either too generic or\n\n494\n00:27:28.170 --> 00:27:31.200\nthey're so specific that you\ndon't exactly know what they are.\n\n495\n00:27:31.200 --> 00:27:32.690\nThis gives you that ability to make sure.\n\n496\n00:27:32.690 --> 00:27:34.870\nSo that you have an understanding and\n\n497\n00:27:34.870 --> 00:27:38.280\nknow how those messages can be generated,\ncan be meaningful to you.\n\n498\n00:27:38.280 --> 00:27:39.520\n>> All right.\nWell thank you so much for\n\n499\n00:27:39.520 --> 00:27:40.860\nexplaining these things to us.\n\n500\n00:27:40.860 --> 00:27:43.430\nWe thank you guys for watching we're\ngoing to go ahead and sign off.\n\n501\n00:27:43.430 --> 00:27:45.630\nFor ITPro TV,\nI've been your host Daniel Lowry.\n\n502\n00:27:45.630 --> 00:27:46.460\n>> And I'm Ronny Wong.\n\n503\n00:27:46.460 --> 00:27:47.931\n>> We'll see you next time.\n\n504\n00:27:47.931 --> 00:27:56.640\n>> [MUSIC]\n\n",
          "vimeoId": "166959456"
        }
      ],
      "title": "Troubleshoot and optimize"
    }
  ],
  "url": "microsoft-sql-server-2014-70461",
  "vLab": false
}
