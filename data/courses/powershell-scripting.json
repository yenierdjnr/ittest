{
  "description": "In this series, you will learn how to write a PowerShell script. We will cover the different components that make up a PowerShell script. We look at variables, arrays and hash tables. We look at comparison operators, logical operators, assignment and arithmetic operators. We look at and constructs, including if, switch, for, foreach, do and while. We will also look at creating a script module.",
  "descriptionMD": "In this series, you will learn how to write a PowerShell script. We will cover the different components that make up a PowerShell script. We look at variables, arrays and hash tables. We look at comparison operators, logical operators, assignment and arithmetic operators. We look at and constructs, including if, switch, for, foreach, do and while. We will also look at creating a script module.",
  "length": "36719",
  "name": "PowerShell Scripting",
  "practiceExam": false,
  "subtitle": "Writing scripts using the PowerShell language",
  "tagUrl": "microsoft-technical",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this series, you will learn how to write a PowerShell script. We will cover the different components that make up a PowerShell script. We look at variables, arrays and hash tables. We look at comparison operators, logical operators, assignment and arithmetic operators. We look at and constructs, including if, switch, for, foreach, do and while. We will also look at creating a script module.",
          "length": "86",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-0-0-0-overview-121117-PGM.00_00_05_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-0-0-0-overview-121117-PGM.00_00_05_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-0-0-0-overview-121117-PGM.00_00_05_15.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "",
          "vimeoId": "247020985"
        },
        {
          "description": "In this episode, Mike and Cherokee start with a look at using PowerShell ISE. Then they begin their discussion on variables and data types.",
          "length": "1963",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-1-1-working_with_variables-110717-PGM.00_33_07_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-1-1-working_with_variables-110717-PGM.00_33_07_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-1-1-working_with_variables-110717-PGM.00_33_07_10.Still001-sm.jpg",
          "title": "Working with Variables",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:01.523\nWelcome to ITProTV.\n\n2\n00:00:01.523 --> 00:00:02.313\nI'm your host, Don Pezet.\n\n3\n00:00:02.313 --> 00:00:06.498\n&gt;&gt; [CROSSTALK]\n\n4\n00:00:06.498 --> 00:00:08.355\n[MUSIC]\n\n5\n00:00:08.355 --> 00:00:11.957\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:11.957 --> 00:00:15.155\n&gt;&gt; Welcome, ladies and gentlemen to\nyour PowerShell scripting series.\n\n7\n00:00:15.155 --> 00:00:17.005\nI'm your show host, Cherokee Boose.\n\n8\n00:00:17.005 --> 00:00:20.985\nIn this episode, we will specifically be\nlooking at how to work with variables.\n\n9\n00:00:20.985 --> 00:00:24.215\nAnd with us today back in\nstudio we have Mr Mike Rodrick.\n\n10\n00:00:24.215 --> 00:00:25.190\nHow's the going today, Mike?\n\n11\n00:00:25.190 --> 00:00:26.125\n&gt;&gt; It's going great here, Cherokee.\n\n12\n00:00:26.125 --> 00:00:28.651\nThanks for having me and\nexcited to be here as always.\n\n13\n00:00:28.651 --> 00:00:31.938\nAnd yeah, we're gonna take a look at\nas we get in into scripting here,\n\n14\n00:00:31.938 --> 00:00:34.300\nwe're gonna start out\ntalking about variables.\n\n15\n00:00:34.300 --> 00:00:38.480\nCuz variables are gonna be something that\nwe're gonna need as we go through and\n\n16\n00:00:38.480 --> 00:00:41.790\nwe start writing our scripts,\nwe're gonna need variables.\n\n17\n00:00:41.790 --> 00:00:44.410\nAnd many types of variables, and\nwe're kind of break them down and\n\n18\n00:00:44.410 --> 00:00:46.130\nlook at where we're gonna use those.\n\n19\n00:00:46.130 --> 00:00:49.810\nBut I thought that'd be a good place to\nstart for today is looking at how we work\n\n20\n00:00:49.810 --> 00:00:54.610\nwith variables, how we assign values to\nthem, things like that within PowerShell.\n\n21\n00:00:54.610 --> 00:00:56.540\n&gt;&gt; Okay, cool.\nAre there any variables that to\n\n22\n00:00:56.540 --> 00:00:59.880\nget used more often or would you\nsay are more important than others?\n\n23\n00:00:59.880 --> 00:01:02.933\n&gt;&gt; No, it depends on the situation,\nthey're very handy.\n\n24\n00:01:02.933 --> 00:01:04.559\nLet's define a variable first.\n\n25\n00:01:04.559 --> 00:01:08.236\nFor some of you that might be newer\nto scripting of any kind of language.\n\n26\n00:01:08.236 --> 00:01:09.837\nAnd when we talk about a variable,\n\n27\n00:01:09.837 --> 00:01:13.050\na variable is a, I like to think of\nit as a storage container, right?\n\n28\n00:01:13.050 --> 00:01:16.380\nIt's somewhere that I can store a value,\nand\n\n29\n00:01:16.380 --> 00:01:21.400\nthen recall that information later on,\nor I can manipulate that information.\n\n30\n00:01:21.400 --> 00:01:25.420\nLike if we wanna store the name\nof a computer, or a value,\n\n31\n00:01:25.420 --> 00:01:30.610\nan IP address, or\na numeric value of some kind, or a string,\n\n32\n00:01:30.610 --> 00:01:34.936\nwe can store these invariables and we can\ncall them back later when we need them.\n\n33\n00:01:34.936 --> 00:01:38.820\nRather than I had to go through\nthe process of getting that IP address or\n\n34\n00:01:38.820 --> 00:01:39.460\nsomething like that.\n\n35\n00:01:39.460 --> 00:01:43.362\nSo let's think of variables as just\ncontainers that we can store these\n\n36\n00:01:43.362 --> 00:01:44.710\nvalues in.\n\n37\n00:01:44.710 --> 00:01:48.905\nNow with PowerShell, if you're familiar\nwith other languages,whether it's\n\n38\n00:01:48.905 --> 00:01:53.330\nscripting language or not, you're gonna\nunderstand the concept of variable.\n\n39\n00:01:53.330 --> 00:01:57.131\nBut every language kind of does things\na little bit differently, right,\n\n40\n00:01:57.131 --> 00:02:00.515\nas far as how you declare variables,\nhow we make them available.\n\n41\n00:02:00.515 --> 00:02:04.440\nWe'll have to look at scope at some point,\nbut we might save that until we get more\n\n42\n00:02:04.440 --> 00:02:08.180\ninto functions, we'll probably keep\nit kind of straightforward for now.\n\n43\n00:02:08.180 --> 00:02:10.308\nSo let's talk about, but\nbefore we can get in to variables,\n\n44\n00:02:10.308 --> 00:02:11.953\nwe're gonna need somewhere to work, right.\n\n45\n00:02:11.953 --> 00:02:16.824\nAnd if you've watched our previous series,\nPowerShell basics, I think we ended\n\n46\n00:02:16.824 --> 00:02:20.942\nup calling it, this will be,\nhopefully a bit of a refresher for you.\n\n47\n00:02:20.942 --> 00:02:23.660\nWe're gonna be working primarily in\n\n48\n00:02:23.660 --> 00:02:26.030\nthe PowerShell Integrated\nScripting Environment, or\n\n49\n00:02:26.030 --> 00:02:29.470\nthe ISE because it's so\neasier to write scripts in there.\n\n50\n00:02:29.470 --> 00:02:34.049\nBecause we have that upper script pane\nwhere we can write commands without having\n\n51\n00:02:34.049 --> 00:02:36.759\nthem execute automatically\nwhen we hit enter.\n\n52\n00:02:36.759 --> 00:02:38.570\nSo that's where we'll be\nspending a lot of time.\n\n53\n00:02:38.570 --> 00:02:41.065\nSo let's start by looking at that and\n\n54\n00:02:41.065 --> 00:02:43.940\nre-familiarizing ourselves\nwith that environment.\n\n55\n00:02:43.940 --> 00:02:45.531\nSo let's take a look at my screen here.\n\n56\n00:02:45.531 --> 00:02:49.114\nI'm just on a client machine,\na Windows 10 machine, and\n\n57\n00:02:49.114 --> 00:02:54.470\nI'm gonna run the ISE as administrator cuz\nI right clicked on the PowerShell icon.\n\n58\n00:02:54.470 --> 00:02:58.540\nThe PowerShell ISE,\nif you go to your Start menu and\n\n59\n00:02:58.540 --> 00:03:03.060\nyou start typing in PowerShell, you'll\nsee that it does show up PowerShell ISE.\n\n60\n00:03:03.060 --> 00:03:07.890\nWe don't have the, jst trying to think,\nthey're starting to change it.\n\n61\n00:03:07.890 --> 00:03:11.030\nIt used to be a separate icon\nthat we would put down there.\n\n62\n00:03:11.030 --> 00:03:15.289\nNow they're really saying just\nright-click on the PowerShell icon and\n\n63\n00:03:15.289 --> 00:03:19.770\nchoose ISE with Windows 10 and\nsome of the later versions of Windows 10.\n\n64\n00:03:19.770 --> 00:03:22.833\nBut the ISE is definitely not going away,\ndon't get me wrong.\n\n65\n00:03:22.833 --> 00:03:26.373\nIt's just that getting to it, a lot of\ntimes on some of these newer versions\n\n66\n00:03:26.373 --> 00:03:29.691\nof Windows 10, some of these later builds,\nyou type Powershell and\n\n67\n00:03:29.691 --> 00:03:33.540\nyou don't even see ISE coming up on\nyour menu, all you see is Powershell.\n\n68\n00:03:33.540 --> 00:03:35.896\nIf that's the case,\njust right click on it, and\n\n69\n00:03:35.896 --> 00:03:39.645\nyou should see the option to launch ISE or\njust type it all the way out, right.\n\n70\n00:03:39.645 --> 00:03:43.750\nType Powershell, or Windows Powershell ISE\nin your start menu and\n\n71\n00:03:43.750 --> 00:03:45.600\nyou should be able to find it.\n\n72\n00:03:45.600 --> 00:03:47.854\nSo here we've got the integrated\nscripting environment.\n\n73\n00:03:47.854 --> 00:03:53.660\nIt might start out something more like\nthis where it's just the console pane.\n\n74\n00:03:53.660 --> 00:03:55.890\nRemember, this is a host for\nPowerShell, right?\n\n75\n00:03:55.890 --> 00:04:00.483\nWe don't interact directly with\nPowerShell, I know that's a weird concept.\n\n76\n00:04:00.483 --> 00:04:04.290\nBut PowerShell is an engine\nthat runs in the background.\n\n77\n00:04:04.290 --> 00:04:08.715\nWe use hosts to connect to that engine,\nwe don't connect directly to\n\n78\n00:04:08.715 --> 00:04:13.895\npowershell.exe right, we have these hosts,\nwe have our console host.\n\n79\n00:04:13.895 --> 00:04:17.637\nWe have this, the Integrated Scripting\nEnvironment, Active Directory,\n\n80\n00:04:17.637 --> 00:04:21.095\nAdministrative center,\nwould be another PowerShell host, right.\n\n81\n00:04:21.095 --> 00:04:24.068\nBecause it connects to that PowerShell\nengine in the background and\n\n82\n00:04:24.068 --> 00:04:25.605\nexecutes those commands.\n\n83\n00:04:25.605 --> 00:04:28.909\nSo this is one of our hosts, the ISE,\nand it starts out looking like this.\n\n84\n00:04:28.909 --> 00:04:30.720\nAnd this is just a normal console,\n\n85\n00:04:30.720 --> 00:04:33.660\njust like if I was to launch\nnormal PowerShell, right?\n\n86\n00:04:33.660 --> 00:04:38.530\nI can type in a command,\nmove that out of the way.\n\n87\n00:04:38.530 --> 00:04:44.720\nGet-NetIPAddress, and it's gonna work\njust like my normal PowerShell console.\n\n88\n00:04:44.720 --> 00:04:47.503\nType in your command,\nhit Enter, and it's good to go.\n\n89\n00:04:47.503 --> 00:04:52.432\nBut you did probably notice,\nas I was typing that, let's do get -p.\n\n90\n00:04:52.432 --> 00:04:54.768\nYou see that menu that starts dropping up.\n\n91\n00:04:54.768 --> 00:04:58.918\nThat's an IntelliSense that gives\nme access to all these commands, so\n\n92\n00:04:58.918 --> 00:05:01.693\nif I don't remember it I\ncan just start typing.\n\n93\n00:05:01.693 --> 00:05:06.471\nAnd you'll see that it starts to filter\nout, the more letters I type, and\n\n94\n00:05:06.471 --> 00:05:09.270\nthen I can simply tab to fill that in.\n\n95\n00:05:09.270 --> 00:05:13.776\nAlso notice that as I'm typing,\nand I go to one of those commands,\n\n96\n00:05:13.776 --> 00:05:18.442\nlet me get that to do it again,\nsometimes to get it rebuild that list,\n\n97\n00:05:18.442 --> 00:05:21.350\nI got to back up past the dash or\nthe hyphen.\n\n98\n00:05:21.350 --> 00:05:25.013\nWhen we Get-NetIPAddress,\nas we hover over these commands,\n\n99\n00:05:25.013 --> 00:05:28.870\nI'm using my arrow keys in\nthis case to move up and down.\n\n100\n00:05:28.870 --> 00:05:32.210\nYou'll see that I get syntax, or\njust really pretty handy, right?\n\n101\n00:05:32.210 --> 00:05:33.420\nAs you're learning PowerShell,\n\n102\n00:05:33.420 --> 00:05:37.680\nthis is a great place to start,\nbecause you get that syntax right there.\n\n103\n00:05:37.680 --> 00:05:40.190\nWe know we've learned\nin our previous series\n\n104\n00:05:40.190 --> 00:05:42.770\nthat we can use the GET help command,\nand we can always go and\n\n105\n00:05:42.770 --> 00:05:46.970\nget that syntax, we can go and\nget online help through PowerShell.\n\n106\n00:05:46.970 --> 00:05:51.160\nBut the fact that it pops up right here,\nas I'm going through my commands is very,\n\n107\n00:05:51.160 --> 00:05:51.848\nvery handy.\n\n108\n00:05:52.871 --> 00:05:54.532\nBut we want to write scripts, or\n\n109\n00:05:54.532 --> 00:05:57.050\neventually that's where\nwe're gonna get to.\n\n110\n00:05:57.050 --> 00:06:01.130\nSo what you would do is come over here to\nthe top right-hand corner, that little\n\n111\n00:06:01.130 --> 00:06:06.440\ndownward pointing chevron and I can\nclick that, and there's my script pane.\n\n112\n00:06:06.440 --> 00:06:10.160\nSo now if I type Get-NetIPAddress,\n\n113\n00:06:10.160 --> 00:06:14.670\nI still get the same auto sensor,\nthe auto fill, the IntelliSense,\n\n114\n00:06:14.670 --> 00:06:18.860\nI still get all the syntax, but\nif I hit Enter, nothing happens, right?\n\n115\n00:06:18.860 --> 00:06:21.425\nIt doesn't actually execute that command.\n\n116\n00:06:21.425 --> 00:06:24.598\nIf I wanna execute that command,\nI would hit F5, or\n\n117\n00:06:24.598 --> 00:06:29.180\nmy little green play button up here and\nthat'll run that command.\n\n118\n00:06:29.180 --> 00:06:34.391\nThe handy thing about, another\nhandy thing about this ISE is that,\n\n119\n00:06:34.391 --> 00:06:37.142\nI can run just my highlighted text.\n\n120\n00:06:37.142 --> 00:06:39.728\nIf I can do the F5 right now,\nor click my play button,\n\n121\n00:06:39.728 --> 00:06:42.200\nit's actually gonna run both commands.\n\n122\n00:06:42.200 --> 00:06:45.727\nIf you were quick enough,\nor if you were watching,\n\n123\n00:06:45.727 --> 00:06:49.181\nit went through all of\nthe processes in this case.\n\n124\n00:06:49.181 --> 00:06:56.239\nBut if I scroll back up, And get to the\ntop, I don't wanna scroll too far here,\n\n125\n00:06:56.239 --> 00:07:01.480\nthere you can see it actually\nran the Get-NetIPAddress, right?\n\n126\n00:07:01.480 --> 00:07:06.460\nAnd then it ran the second one,\nget dash process, all right?\n\n127\n00:07:06.460 --> 00:07:08.451\nLet's clear that screen here.\n\n128\n00:07:11.083 --> 00:07:15.383\nBut what I can do in the ISE\nis I can highlight a line or\n\n129\n00:07:15.383 --> 00:07:18.783\na group of lines, and I can do the F8, or\n\n130\n00:07:18.783 --> 00:07:24.000\nthe little play button here,\nand it'll run just that one.\n\n131\n00:07:24.000 --> 00:07:30.970\nIt did not run the Get-NetIPAddress,\noops, it just run to get processed.\n\n132\n00:07:30.970 --> 00:07:34.160\nVery handy when you're troubleshooting\na script and things like that.\n\n133\n00:07:34.160 --> 00:07:37.040\nYou can run just part of your script and\nyou can get those results.\n\n134\n00:07:37.040 --> 00:07:39.120\n&gt;&gt; Help figure out where\nthat problem may lie.\n\n135\n00:07:39.120 --> 00:07:43.726\n&gt;&gt; Exactly, all right,\nanother cool thing about the good old ISE,\n\n136\n00:07:43.726 --> 00:07:46.002\nlet me clean up my screen again.\n\n137\n00:07:46.002 --> 00:07:49.377\nYou can change your views if you prefer,\nyou can have this side by side,\n\n138\n00:07:49.377 --> 00:07:51.413\nsome people like this a little bit better.\n\n139\n00:07:51.413 --> 00:07:55.083\nI kinda like this one but\nit really depends on what I'm doing.\n\n140\n00:07:55.083 --> 00:07:58.718\nYou can also completely close\nthe The console pane and\n\n141\n00:07:58.718 --> 00:08:00.910\njust have the script pane open.\n\n142\n00:08:00.910 --> 00:08:04.143\nSo if you're writing a script and\nyou don't need to execute it.\n\n143\n00:08:04.143 --> 00:08:06.420\n&gt;&gt; You're not quite there yet,\nyou're not ready for that part.\n\n144\n00:08:06.420 --> 00:08:09.470\n&gt;&gt; Yeah, you gotta little more room to\nkind of work around and things like that.\n\n145\n00:08:09.470 --> 00:08:11.890\nSome people get a little\nclaustrophobic dealing with this.\n\n146\n00:08:11.890 --> 00:08:15.250\nRemember, you can always\ndrag that border up or down.\n\n147\n00:08:15.250 --> 00:08:20.280\nAnd of course, if I'm going side-by-side\nview, I can work with it this way as well.\n\n148\n00:08:21.290 --> 00:08:25.650\nAnd then, you have these two guys right\nhere, which are the Show-Command.\n\n149\n00:08:25.650 --> 00:08:30.920\nNow you can do Show-Command, right?\n\n150\n00:08:30.920 --> 00:08:34.590\nAnd you can do this in a normal\nPowerShell console, not the ISE, and\n\n151\n00:08:34.590 --> 00:08:36.690\nit'll pop out this little window.\n\n152\n00:08:36.690 --> 00:08:41.190\nAnd this is where I can see or\nfind a command that I'm looking for.\n\n153\n00:08:41.190 --> 00:08:43.320\nI can filter it down by module if I want.\n\n154\n00:08:44.930 --> 00:08:50.190\n&gt;&gt; So Mike, if I have a particular\nseries of commands that have not yet\n\n155\n00:08:50.190 --> 00:08:55.010\nbeen invoked would they still\ndisplay here if it was for\n\n156\n00:08:55.010 --> 00:08:58.660\na particular service or role that I\nhadn't installed on this machine?\n\n157\n00:08:58.660 --> 00:09:00.160\n&gt;&gt; Absolutely, you see everything here.\n\n158\n00:09:00.160 --> 00:09:04.587\nIn fact, let's see,\nI'm going to change this back to all and\n\n159\n00:09:04.587 --> 00:09:10.910\nlet's do a get-computer, you'll see\nI have like a get-computer info.\n\n160\n00:09:10.910 --> 00:09:14.786\nNow I don't have the Active Directory\nmodule installed, so it does look like its\n\n161\n00:09:14.786 --> 00:09:17.943\nbecause that module is not [CROSSTALK]\n&gt;&gt; Okay that's what I was wondering,\n\n162\n00:09:17.943 --> 00:09:21.093\nspecifically I was thinking of Active\nDirectory, but there are some other rules\n\n163\n00:09:21.093 --> 00:09:23.840\ntoo that are having other specific\ncommandments associated with it.\n\n164\n00:09:23.840 --> 00:09:28.372\n&gt;&gt; And because this is a client, I don't\nhave those kind of modules available until\n\n165\n00:09:28.372 --> 00:09:30.850\nI install those remote server admin tools.\n\n166\n00:09:30.850 --> 00:09:31.510\n&gt;&gt; Makes sense, okay.\n\n167\n00:09:31.510 --> 00:09:35.042\n&gt;&gt; Now if I was on a server,\neven if the role wasn't installed,\n\n168\n00:09:35.042 --> 00:09:37.273\nthe module would still be available.\n\n169\n00:09:37.273 --> 00:09:40.670\nIt wouldn't be imported, I wouldn't\nhave those commands at my fingertips.\n\n170\n00:09:40.670 --> 00:09:43.672\nBut if I typed a command that\nwas in one of those modules.\n\n171\n00:09:43.672 --> 00:09:47.233\nRemember with PowerShell 5, we don't\nactually have to import the module,\n\n172\n00:09:47.233 --> 00:09:49.664\nyou can type a command and\nit will go find the module.\n\n173\n00:09:49.664 --> 00:09:53.533\nAnd as long as it's in the, remember,\nthe get-module -list available, and\n\n174\n00:09:53.533 --> 00:09:57.461\nthat will show you what modules are on\nyour machine, not necessarily imported,\n\n175\n00:09:57.461 --> 00:09:59.450\nand then you can import them from there.\n\n176\n00:09:59.450 --> 00:10:01.630\nSo it does have to at\nleast be on the machine.\n\n177\n00:10:01.630 --> 00:10:04.350\nAnd if we installed\nRemote Server Administration Tools,\n\n178\n00:10:04.350 --> 00:10:08.176\nI would see the Active Directory module\nlisted here, and the DNS server module and\n\n179\n00:10:08.176 --> 00:10:09.411\nthings like that listed.\n\n180\n00:10:09.411 --> 00:10:14.236\nSo as we go through and another way you\ncan do show-command, I can also use these\n\n181\n00:10:14.236 --> 00:10:19.620\nbuttons here, this one is gonna launch\nit as a floater, just like we saw there.\n\n182\n00:10:19.620 --> 00:10:22.120\nIf I click that it's kinda\nfloating as a separate window.\n\n183\n00:10:22.120 --> 00:10:26.290\nVery handy when I'm working with multiple\nmonitors I can drag that off to the side.\n\n184\n00:10:26.290 --> 00:10:29.470\nThis one shows it as\na separate tab in my pane.\n\n185\n00:10:29.470 --> 00:10:32.910\nI lose a little bit of real\nestate in my working area, but\n\n186\n00:10:32.910 --> 00:10:34.630\nI have access to it over here.\n\n187\n00:10:34.630 --> 00:10:39.080\nAnd you can find the command\nyou're looking for git-net i and\n\n188\n00:10:39.080 --> 00:10:42.030\nthere's my good old Get-NetIPAddress.\n\n189\n00:10:42.030 --> 00:10:44.780\nNow what's cool about this\nlittle Show-Command window\n\n190\n00:10:44.780 --> 00:10:48.430\nis if I click on this command not only can\nI find a command that I'm looking for, and\n\n191\n00:10:48.430 --> 00:10:50.250\nI can use wild cards in there.\n\n192\n00:10:50.250 --> 00:10:52.870\nOr you see it really does\na wild card part on it's own.\n\n193\n00:10:52.870 --> 00:10:56.491\nAs I'm typing, there is an asterisk\nat the end that we don't see.\n\n194\n00:10:56.491 --> 00:11:00.282\n&gt;&gt; And just starts narrowing down\nthe results there by the more characters?\n\n195\n00:11:00.282 --> 00:11:03.620\n&gt;&gt; Exactly, so it's like it puts\nthe asterisk there for you and\n\n196\n00:11:03.620 --> 00:11:06.080\ndoes an auto search,\nit's very, very handy.\n\n197\n00:11:06.080 --> 00:11:09.994\nOnce I select one of these commands\nyou'll see I get this pane down here.\n\n198\n00:11:09.994 --> 00:11:12.060\nNow, let me find one I haven't used yet.\n\n199\n00:11:14.980 --> 00:11:16.280\nWell, it's not going to play along.\n\n200\n00:11:16.280 --> 00:11:18.650\nLet's refresh this, see if I can it.\n\n201\n00:11:18.650 --> 00:11:21.070\nNormally what will happen,\nI've already opened this up.\n\n202\n00:11:21.070 --> 00:11:24.920\nLet me see if I can go to\na different machine I can show you\n\n203\n00:11:24.920 --> 00:11:26.290\nsomething about that.\n\n204\n00:11:26.290 --> 00:11:29.020\nWhat I wanted to show you is\nsometimes when you first open that up\n\n205\n00:11:29.020 --> 00:11:31.290\nthere's no details down there.\n\n206\n00:11:31.290 --> 00:11:35.840\nSo let's see, if we go back over to the\ndomain controller and I launch that ISE.\n\n207\n00:11:35.840 --> 00:11:39.630\nLet that fire up, give\n\n208\n00:11:41.840 --> 00:11:46.270\nit just a second, and\nif not I can fire up another server.\n\n209\n00:11:46.270 --> 00:11:51.960\nIt's really not that big of a deal,\n\n210\n00:11:51.960 --> 00:11:57.648\nbut if I launch this, so here we go,\n\n211\n00:11:57.648 --> 00:12:01.456\nwe'll do Get-NetIP.\n\n212\n00:12:01.456 --> 00:12:05.532\nYou see where it says to import the Net\nTCP/IP module because this module is not\n\n213\n00:12:05.532 --> 00:12:06.190\nimported.\n\n214\n00:12:06.190 --> 00:12:07.920\nIt's available, but it's not imported.\n\n215\n00:12:07.920 --> 00:12:09.080\nI don't see anything there.\n\n216\n00:12:09.080 --> 00:12:12.420\nIt's just says, hey,\nif you want to click show details.\n\n217\n00:12:12.420 --> 00:12:15.410\nAnd what that's going to do is\nbasically import that module.\n\n218\n00:12:15.410 --> 00:12:16.940\nSo you just click show details,\n\n219\n00:12:16.940 --> 00:12:21.170\nit imports the module,\nthen you'll get this information here.\n\n220\n00:12:21.170 --> 00:12:25.039\nLet's flip back over to server client.\n\n221\n00:12:25.039 --> 00:12:27.489\nSo once you get this details area,\n\n222\n00:12:27.489 --> 00:12:31.810\nthese are the parameters that I\ncan use to with this command.\n\n223\n00:12:31.810 --> 00:12:36.736\nYou guys have seen,\nif I do Get-NetIPAddress\n\n224\n00:12:36.736 --> 00:12:40.700\n-AddressFamily, for example.\n\n225\n00:12:40.700 --> 00:12:46.830\nAnd I can type in IPv4, and\nI can return just my IPv4 information.\n\n226\n00:12:46.830 --> 00:12:52.165\nWell, these are those parameters that\nare available with that command in a form.\n\n227\n00:12:52.165 --> 00:12:55.585\nSo I can just come over here and\nI can type in I want IPv6 for\n\n228\n00:12:55.585 --> 00:12:58.565\nthe family, for example.\n\n229\n00:12:58.565 --> 00:13:02.495\nOr if I knew a particular interface or\nalias or index for it,\n\n230\n00:13:02.495 --> 00:13:04.725\nI could use that or skip a source.\n\n231\n00:13:04.725 --> 00:13:06.655\nSo here's all those different parameters.\n\n232\n00:13:06.655 --> 00:13:07.355\nDown at the bottom,\n\n233\n00:13:07.355 --> 00:13:11.365\ncommon parameters, these are parameters\nthat just about every cmdlet has,\n\n234\n00:13:11.365 --> 00:13:16.980\nhow to deal with errors, how to pipeline\nwarning actions, things like that.\n\n235\n00:13:16.980 --> 00:13:20.700\nThe ones at the top are specific\nto this particular cmdlet.\n\n236\n00:13:20.700 --> 00:13:24.273\nNow once you've filled in your\nform with the parameters.\n\n237\n00:13:24.273 --> 00:13:27.460\nYou don't even have to know your\nparameter, I can just see them right here.\n\n238\n00:13:27.460 --> 00:13:29.030\nYou fill them, and\nthe only thing it doesn't do is help\n\n239\n00:13:29.030 --> 00:13:32.035\nyou with the possible values.\n\n240\n00:13:32.035 --> 00:13:36.692\nWhereas when you are in the scripting\npane or in the console you get,\n\n241\n00:13:36.692 --> 00:13:45.230\nGet-NetIPAddress -AddressFamily.\n\n242\n00:13:45.230 --> 00:13:48.180\nI can just start typing or\nuse my auto sense and\n\n243\n00:13:48.180 --> 00:13:50.630\nI can tab through the possibilities there.\n\n244\n00:13:50.630 --> 00:13:52.850\nWhereas over here, that doesn't work.\n\n245\n00:13:52.850 --> 00:13:56.025\nSo, limited in that respect, it doesn't\ngive you any help as far as what\n\n246\n00:13:56.025 --> 00:13:58.440\nthe possible values are for\nsome of these parameters.\n\n247\n00:13:58.440 --> 00:14:01.113\n&gt;&gt; Luckily for that particular field\nwe only have a couple options.\n\n248\n00:14:01.113 --> 00:14:04.270\nI mean it's not like [LAUGH]\nIP version 8 or something.\n\n249\n00:14:04.270 --> 00:14:05.310\n&gt;&gt; Not yet anyway, right?\n\n250\n00:14:05.310 --> 00:14:08.390\n[LAUGH] Once you get all\nthis you find your command,\n\n251\n00:14:08.390 --> 00:14:12.280\nyou get all this filled in, you have three\ndifferent buttons down here at the bottom.\n\n252\n00:14:12.280 --> 00:14:15.380\nI have Run, Insert, and Copy.\n\n253\n00:14:15.380 --> 00:14:17.990\nNow Run, you can probably figure\nout what that's gonna do, right?\n\n254\n00:14:17.990 --> 00:14:21.248\nIf I click Run,\nit's gonna insert that command.\n\n255\n00:14:22.853 --> 00:14:23.564\nWell, you know what?\n\n256\n00:14:23.564 --> 00:14:26.240\nLet me back up over that there.\n\n257\n00:14:26.240 --> 00:14:26.930\nOr is it still?\n\n258\n00:14:28.130 --> 00:14:28.930\nThere we go.\n\n259\n00:14:28.930 --> 00:14:33.720\nAnd if I click Run, you'll see it drops\nthe command in and executes it, right?\n\n260\n00:14:33.720 --> 00:14:35.690\nSo it runs it right then and there.\n\n261\n00:14:35.690 --> 00:14:38.090\nMakes sense,\nthat's why they labeled it Run.\n\n262\n00:14:38.090 --> 00:14:39.931\nYou can do Insert.\n\n263\n00:14:39.931 --> 00:14:43.438\nAnd let's clear my screen so we can\npay attention to what's going on here.\n\n264\n00:14:45.463 --> 00:14:49.780\nIf I do Insert, you'll see it inserts\nthe command, but it doesn't run it.\n\n265\n00:14:49.780 --> 00:14:53.310\nYou might not know\nthe value that you want.\n\n266\n00:14:53.310 --> 00:14:55.750\nI don't know what the possible\nvalues are for AddressFamily.\n\n267\n00:14:55.750 --> 00:14:56.440\nWhat do they mean?\n\n268\n00:14:56.440 --> 00:15:00.050\nMy surname like Roderick is that\nthe family they're talking about?\n\n269\n00:15:00.050 --> 00:15:01.750\nProbably not, so\n\n270\n00:15:01.750 --> 00:15:05.700\nI'm going to need some help PowerShell\nif you can help me out and it will.\n\n271\n00:15:05.700 --> 00:15:11.450\nIf I leave that blank and click Insert\nnow I can do -AddressFamily and\n\n272\n00:15:11.450 --> 00:15:14.399\nwe can go back and\nwe can do our autofill on our syntax.\n\n273\n00:15:15.450 --> 00:15:20.025\nThe other option,\nwe'll change that back to v6, is the Copy.\n\n274\n00:15:20.025 --> 00:15:23.180\nSo Run, executes it right then and there.\n\n275\n00:15:23.180 --> 00:15:27.133\nInsert, inserts the command, so types\nit for you, but it doesn't execute it.\n\n276\n00:15:27.133 --> 00:15:29.125\n&gt;&gt; And it'll pull in what you've\nalready selected there in the field?\n\n277\n00:15:29.125 --> 00:15:32.898\n&gt;&gt; Yep, so if I have a IPv6,\nand let's see, you know what?\n\n278\n00:15:32.898 --> 00:15:38.940\nLet's do Get-, let me run it manually real\nquick, and we'll fill in some more fields.\n\n279\n00:15:38.940 --> 00:15:44.659\nFind a couple of my interface aliases,\n0, I've got an index of 5.\n\n280\n00:15:44.659 --> 00:15:51.354\nSo we could come up over here, say IPv6,\nindex of 5 and that's the one I want.\n\n281\n00:15:51.354 --> 00:15:53.819\nLet me clear my screen so\nwe can see what happens.\n\n282\n00:15:53.819 --> 00:15:57.939\nIf I chose Insert, You'll see\nit already has IPv6 in there and\n\n283\n00:15:57.939 --> 00:16:00.940\nthe parameter names, and their values.\n\n284\n00:16:00.940 --> 00:16:03.650\nAll you have to do is hit Enter and\nit's going to execute that command.\n\n285\n00:16:03.650 --> 00:16:09.590\nThe last one we have is the copy, and\nall this does is send it to the clipboard.\n\n286\n00:16:09.590 --> 00:16:14.729\nAnd I click Copy and nothing happens in\neither one of my panes, but if I right\n\n287\n00:16:14.729 --> 00:16:20.820\nclick and Paste, there it is with the\nparameters and the values that I selected.\n\n288\n00:16:20.820 --> 00:16:24.220\nSo as you're learning,\nthe commands is a great place to go or\n\n289\n00:16:24.220 --> 00:16:27.700\nthe show-commands is\na really good thing to use.\n\n290\n00:16:27.700 --> 00:16:32.120\nI think you'll find that as you get more\nfamiliar, if you're running commands that\n\n291\n00:16:32.120 --> 00:16:37.060\nyou run a lot, you'll find it's probably\na little quicker just to type them out or\n\n292\n00:16:37.060 --> 00:16:42.780\nrely on the IntelliSense and the tab\nauto fill that PowerShell gives us.\n\n293\n00:16:42.780 --> 00:16:46.644\nBut this is a great way to find\ncommands that I'm not sure about or\n\n294\n00:16:46.644 --> 00:16:50.958\nto figure out what parameters\nare possible with a particular command.\n\n295\n00:16:50.958 --> 00:16:53.490\nSo great thing to play with.\n\n296\n00:16:53.490 --> 00:16:54.730\nI'm gonna close that for now, though,\n\n297\n00:16:54.730 --> 00:16:58.660\nwe are going to stick over\nhere in our console for now.\n\n298\n00:16:58.660 --> 00:17:00.650\nSo hopefully,\nthat's a little bit of a refresher.\n\n299\n00:17:00.650 --> 00:17:03.776\nI think I showed you everything\nas far as the ISE goes,\n\n300\n00:17:03.776 --> 00:17:07.100\nthe Integrated Scripting Environment.\n\n301\n00:17:07.100 --> 00:17:08.420\nLet's do one more.\n\n302\n00:17:08.420 --> 00:17:12.590\nAnother thing that you might find\nhandy amongst the tools up here,\n\n303\n00:17:12.590 --> 00:17:17.220\nis this little guy which is the wiper,\nClear Console Pane.\n\n304\n00:17:17.220 --> 00:17:21.535\nYou see me typing cls, old school,\nfrom the old command prompt,\n\n305\n00:17:21.535 --> 00:17:24.213\nthat's an alias for clear the console.\n\n306\n00:17:24.213 --> 00:17:27.130\n&gt;&gt; Yeah,\nwhich I thought was pretty cool too.\n\n307\n00:17:27.130 --> 00:17:30.160\nI didn't know that that\nwas actually an alias.\n\n308\n00:17:30.160 --> 00:17:32.898\nYou're actually typing an alias\nwhen you're typing in cls.\n\n309\n00:17:32.898 --> 00:17:36.022\n&gt;&gt; It's very I know we talked a little\nbit about aliases in our first series and\n\n310\n00:17:36.022 --> 00:17:39.460\nwe'll talk a little bit more about them,\nbut there are several aliases, right?\n\n311\n00:17:39.460 --> 00:17:41.370\nI showed you guys how to list them.\n\n312\n00:17:41.370 --> 00:17:45.800\nI in particular like the fact\nthat there's the Linux aliases,\n\n313\n00:17:45.800 --> 00:17:50.270\nas well, because I like cls in Linux,\nit's I think clear.\n\n314\n00:17:50.270 --> 00:17:52.507\n&gt;&gt; Yes.\n&gt;&gt; You have to type it all the way whereas\n\n315\n00:17:52.507 --> 00:17:54.729\nin Windows it's cls, much shorter.\n\n316\n00:17:54.729 --> 00:18:00.230\nBut typing in dir for some reason for me,\nyou know, ls is a lot shorter than dir.\n\n317\n00:18:00.230 --> 00:18:01.500\n&gt;&gt; Makes sense.\n\n318\n00:18:01.500 --> 00:18:03.340\n&gt;&gt; It's one character shorter.\n\n319\n00:18:03.340 --> 00:18:03.935\nI know.\n\n320\n00:18:03.935 --> 00:18:06.198\n&gt;&gt; [LAUGH]\n&gt;&gt; But to me on the keyboard,\n\n321\n00:18:06.198 --> 00:18:07.600\nI can do it so easy.\n\n322\n00:18:07.600 --> 00:18:11.884\nIt's both of my ring fingers, it's ls,\nthat's where they sit on the home row,\n\n323\n00:18:11.884 --> 00:18:13.460\nit's easier than doing dir.\n\n324\n00:18:13.460 --> 00:18:16.973\nI don't know, for me personally anyway-\n&gt;&gt; No, it's all about efficiency, and\n\n325\n00:18:16.973 --> 00:18:18.520\neven those little bits count.\n\n326\n00:18:18.520 --> 00:18:21.540\n&gt;&gt; Yep, exactly, so\nls works just fine here and\n\n327\n00:18:21.540 --> 00:18:27.354\nthat's because there is an alias for that\ncommand, for the get-child item, right?\n\n328\n00:18:27.354 --> 00:18:32.180\nI think if we do get-alias,\nFor get-child item\n\n329\n00:18:33.405 --> 00:18:40.425\nI don't have the -name wouldn't I.\n\n330\n00:18:40.425 --> 00:18:44.636\nDo the -name, I'll get dash,\nthat's not gonna work,\n\n331\n00:18:44.636 --> 00:18:48.440\nyou know what,\nI've got that backwards there down.\n\n332\n00:18:48.440 --> 00:18:50.770\nAnyway, we'll worry about\nthat in another time.\n\n333\n00:18:50.770 --> 00:18:54.423\nThere is an alias in there for\nseveral of those Linux commands.\n\n334\n00:18:54.423 --> 00:19:01.980\nIf you're coming from that side,\nit definitely makes it easy to work.\n\n335\n00:19:01.980 --> 00:19:07.110\nSo that's good for\nour integrated scripting environment.\n\n336\n00:19:07.110 --> 00:19:09.810\nThe only other one I didn't show\nyou might be this one here,\n\n337\n00:19:09.810 --> 00:19:16.480\nwhich is right next to our F5 and our F8\nand that is the Control Break or the Stop.\n\n338\n00:19:16.480 --> 00:19:19.750\nIf you ever write a script or\nyou have a command that you've run and\n\n339\n00:19:19.750 --> 00:19:23.523\nit gets stuck or it's taking a long\ntime that's how you would stop it.\n\n340\n00:19:23.523 --> 00:19:27.202\nMuch like doing a Ctrl + C\nin our command prompt, so\n\n341\n00:19:27.202 --> 00:19:33.041\nthat's also a good one to know, and you\ncan launch the console from here as well.\n\n342\n00:19:33.041 --> 00:19:37.289\nSo now, we've got an idea about\nthe integrated scripting environment,\n\n343\n00:19:37.289 --> 00:19:39.490\nlet's talk about variables.\n\n344\n00:19:39.490 --> 00:19:43.996\nSo as I said with PowerShell,\nall variables are going to start with\n\n345\n00:19:43.996 --> 00:19:47.710\nthe dollar sign symbol in\nthe beginning of their name.\n\n346\n00:19:47.710 --> 00:19:51.140\nThere's going to be a $ and\nthen the name of your variable.\n\n347\n00:19:51.140 --> 00:19:54.874\nSo when you're creating them depending\non how you're going to about it,\n\n348\n00:19:54.874 --> 00:19:56.512\nthere's a little gotcha here.\n\n349\n00:19:56.512 --> 00:19:59.930\nYou're always going to\nhave that $ out in front.\n\n350\n00:19:59.930 --> 00:20:04.340\nAnytime you're referring to a variable\nyou're going to put the $ out there in\n\n351\n00:20:04.340 --> 00:20:06.770\nfront, even system variables.\n\n352\n00:20:06.770 --> 00:20:10.900\nThere are variables that we didn't create,\nthat come with the system, or\n\n353\n00:20:10.900 --> 00:20:14.448\nwith PowerShell,\nthose have $s in front of them.\n\n354\n00:20:14.448 --> 00:20:21.150\nFor example,\n$home shows me my home directory.\n\n355\n00:20:21.150 --> 00:20:24.784\nOr $profile, we took a look at this\none I know in our other show,.\n\n356\n00:20:24.784 --> 00:20:28.265\nI didn't create those,\nthose are part of my system variables or\n\n357\n00:20:28.265 --> 00:20:31.200\nmy environment variables,\nbut they start with $s.\n\n358\n00:20:31.200 --> 00:20:34.450\nAnd as we create variables we'll\nput $s in front of their name.\n\n359\n00:20:34.450 --> 00:20:38.395\nThat's how the system knows,\nhow PowerShell knows that, hey,\n\n360\n00:20:38.395 --> 00:20:43.000\nThis is going to be a variable, a\ncontainer that I can store information in.\n\n361\n00:20:43.000 --> 00:20:48.100\nAnd when we run commands, we're gonna\ntypically want to store those results and\n\n362\n00:20:48.100 --> 00:20:49.900\nwe store them in variables.\n\n363\n00:20:49.900 --> 00:20:53.845\nAnd then we can manipulate that data\nas we see fit or as we need to, but\n\n364\n00:20:53.845 --> 00:20:55.657\nit stores it in that variable.\n\n365\n00:20:55.657 --> 00:20:59.751\nSo start with $, if we do a git-variable,\n\n366\n00:20:59.751 --> 00:21:04.080\nI can actually see those\nincluded variables.\n\n367\n00:21:04.080 --> 00:21:06.907\nLet me drag this up a little bit.\n\n368\n00:21:06.907 --> 00:21:10.235\nSo these are all my built in variables,\nif you will.\n\n369\n00:21:10.235 --> 00:21:13.978\nAlthough, I don't know\nwhy $ is assigned to cls,\n\n370\n00:21:13.978 --> 00:21:18.340\nthat's something I just did and\nit was probably a mistake.\n\n371\n00:21:20.410 --> 00:21:21.152\nThat is kinda odd.\n\n372\n00:21:21.152 --> 00:21:25.261\nThe $ sign is not assigned, like if\nI just do $ sign, it's not assigned.\n\n373\n00:21:25.261 --> 00:21:29.550\n&gt;&gt; It's not married to that particular-\n&gt;&gt; It's not gonna clear my screen, so\n\n374\n00:21:29.550 --> 00:21:32.848\nI'm not sure why that is showing up there.\n\n375\n00:21:32.848 --> 00:21:34.890\nYou know what?\n\n376\n00:21:34.890 --> 00:21:37.980\nThat's that special variable\nthat's representing my last token,\n\n377\n00:21:37.980 --> 00:21:41.480\nif I'm not mistaken, and\nno, that's this one.\n\n378\n00:21:41.480 --> 00:21:44.330\nI have to take a look at what\nthat $ is actually representing.\n\n379\n00:21:44.330 --> 00:21:47.206\nBut this one is also representing a cls,\n\n380\n00:21:47.206 --> 00:21:51.019\nwhich is your last token or\nlast command that you ran.\n\n381\n00:21:51.019 --> 00:21:55.160\nSo I'm gonna clear that out.\n\n382\n00:21:55.160 --> 00:21:59.890\nLet's do this,\nI guess we should talk next about and\n\n383\n00:21:59.890 --> 00:22:01.480\nwhen we're gonna talk about PowerShell.\n\n384\n00:22:01.480 --> 00:22:05.600\nAnd we talk about scripting or programming\nlanguages, one of the things you'll often\n\n385\n00:22:05.600 --> 00:22:11.340\nhear is if it's a strict-type language.\n\n386\n00:22:11.340 --> 00:22:16.420\nI think it's strict that they're going\nto use, where everything has to defined.\n\n387\n00:22:16.420 --> 00:22:17.630\nWhen we talk about variables,\n\n388\n00:22:17.630 --> 00:22:22.260\nwe have to define what type of data\nis gonna go in those variables.\n\n389\n00:22:22.260 --> 00:22:26.010\nPowerShell is what they\ncall a strict type.\n\n390\n00:22:27.080 --> 00:22:31.983\nThis is going to be dynamically\ntight scripting language,\n\n391\n00:22:31.983 --> 00:22:37.177\nwhich means we can still cast or\nwe can still say what type of data\n\n392\n00:22:37.177 --> 00:22:42.494\nis going to be stored in those variables,\nbut we don't have to.\n\n393\n00:22:42.494 --> 00:22:45.734\nAnd what PowerShell does,\nis it really tries to determine,\n\n394\n00:22:45.734 --> 00:22:48.848\nit looks at the information\nyou're putting in there, and\n\n395\n00:22:48.848 --> 00:22:52.900\nit tries to determine what type,\nor what that data type is.\n\n396\n00:22:52.900 --> 00:22:56.100\n&gt;&gt; So I'm not sure I completely\nunderstand, so I just want to make sure.\n\n397\n00:22:56.100 --> 00:23:00.692\nIf I were to specify a specific size for\na drive, but I specify it in a unit of\n\n398\n00:23:00.692 --> 00:23:04.861\nmeasurement like gigabytes, and\nthen I came back to recall that.\n\n399\n00:23:04.861 --> 00:23:08.805\nAnd maybe I had it in a different\nformat like megabytes or something,\n\n400\n00:23:08.805 --> 00:23:13.300\nwould it automatically change that for\nme or am I just playing left field here?\n\n401\n00:23:13.300 --> 00:23:15.510\n&gt;&gt; You're close.\nI think I understand where you're coming\n\n402\n00:23:15.510 --> 00:23:19.113\nfrom, but it's not so much the value that\nwe're worried about, the actual value,\n\n403\n00:23:19.113 --> 00:23:20.600\nit's what type I can put in there.\n\n404\n00:23:20.600 --> 00:23:24.686\nLike if I declare this as this variable\nis going to be of a type integer,\n\n405\n00:23:24.686 --> 00:23:29.120\nthen I have to put numbers in there,\nI can't put somebody's name in there,\n\n406\n00:23:29.120 --> 00:23:32.334\nbecause this variable is\ndesigned to store integers.\n\n407\n00:23:32.334 --> 00:23:36.632\nOr if I declare a variable as a string\ndata type, then I can put strings in\n\n408\n00:23:36.632 --> 00:23:41.592\nthere, like a name or a computer name or a\nsentence or a paragraph or what have you.\n\n409\n00:23:41.592 --> 00:23:43.143\nBut I can't do math with her because\nit's a string, it's not an integer.\n\n410\n00:23:43.143 --> 00:23:48.541\nSo not so much where you were going\nwith the megabytes and gigabytes but\n\n411\n00:23:48.541 --> 00:23:53.408\nmore about just the type of data\nthat you're putting in there.\n\n412\n00:23:53.408 --> 00:23:55.897\nAlthough PowerShell has some\nreally cool things you can do.\n\n413\n00:23:55.897 --> 00:23:58.845\nWith megabytes and\nthings like that, it has a way of-\n\n414\n00:23:58.845 --> 00:23:59.441\n&gt;&gt; Of versions.\n\n415\n00:23:59.441 --> 00:24:00.258\n&gt;&gt; calculating those out.\n\n416\n00:24:00.258 --> 00:24:01.867\n&gt;&gt; Yeah, that's what I've seen it and\ndo that before, so\n\n417\n00:24:01.867 --> 00:24:03.924\nthat's what I was wondering if that's\nwhat you were referencing, but\n\n418\n00:24:03.924 --> 00:24:05.480\nwe'll see if that [CROSSTALK]\n&gt;&gt; Not yet, but we will, yeah.\n\n419\n00:24:05.480 --> 00:24:07.636\n&gt;&gt; Okay, right.\n&gt;&gt; We'll definitely come back to that\n\n420\n00:24:07.636 --> 00:24:10.758\nbecause that is pretty cool that\nthey have that built-in system.\n\n421\n00:24:10.758 --> 00:24:13.530\nAll right, so let's talk about one of\nthe data types, and I'm not gonna,\n\n422\n00:24:13.530 --> 00:24:15.380\nwe're not gonna sit here and\ngo through each one.\n\n423\n00:24:15.380 --> 00:24:19.220\nThere's great documentation out there\nwhen you go to Microsoft docs, and\n\n424\n00:24:19.220 --> 00:24:22.520\nyou look up PowerShell 5.1,\nyou're gonna see the different data types.\n\n425\n00:24:22.520 --> 00:24:25.500\nBut let's quickly run through\nwhat we have available.\n\n426\n00:24:25.500 --> 00:24:31.750\nYou've got int INT, I-N-T, which is\ngoing to be a 32 bit signed integer.\n\n427\n00:24:31.750 --> 00:24:34.100\nYou've got long, which is a 64 bit.\n\n428\n00:24:34.100 --> 00:24:38.000\nAnd again, I'm not gonna read each one of\nthese to you, you should go out there and\n\n429\n00:24:38.000 --> 00:24:40.150\nlook these up when you're\ngetting ready to work with them.\n\n430\n00:24:40.150 --> 00:24:42.378\nBut I wanna explain what\nthey mean by that, right?\n\n431\n00:24:42.378 --> 00:24:47.310\nWhen they say it's a 32-bit signed\ninteger, right, that means it's gonna take\n\n432\n00:24:47.310 --> 00:24:51.133\nup 32 bits of storage, in memory,\nas we create this variable,\n\n433\n00:24:51.133 --> 00:24:56.060\nwe're really creating a container in\nmemory that I can store information.\n\n434\n00:24:56.060 --> 00:25:00.493\nIf it's a 32-bit integer,\nthen that's my limit, right,\n\n435\n00:25:00.493 --> 00:25:03.840\nthat's the biggest I can go and\nwith 32 bits,\n\n436\n00:25:03.840 --> 00:25:08.879\nlet's see if I remember,\n32 bits that's an IPV4 address, right?\n\n437\n00:25:08.879 --> 00:25:10.310\n&gt;&gt; Yes.\n&gt;&gt; So that's gonna be,\n\n438\n00:25:10.310 --> 00:25:13.190\nhow many possible IP\naddresses have we got?\n\n439\n00:25:13.190 --> 00:25:14.490\nFour billion.\n\n440\n00:25:14.490 --> 00:25:14.990\n&gt;&gt; Yeah.\n\n441\n00:25:14.990 --> 00:25:16.190\n&gt;&gt; Somewhat, right?\n\n442\n00:25:16.190 --> 00:25:18.050\n&gt;&gt; Yup.\n&gt;&gt; But if it's signed,\n\n443\n00:25:18.050 --> 00:25:21.510\nthat means I can do positives and\nnegatives.\n\n444\n00:25:21.510 --> 00:25:22.140\nAll right.\n\n445\n00:25:22.140 --> 00:25:25.310\nSo I can't go up to four billion,\ncuz half of them are gonna be negative,\n\n446\n00:25:25.310 --> 00:25:27.240\nhalf of them are gonna be positive,\nthat makes sense?\n\n447\n00:25:27.240 --> 00:25:28.550\nYou have to split it in half.\n\n448\n00:25:28.550 --> 00:25:31.860\nIf you think about the overall range,\nthe zero's in the middle, right?\n\n449\n00:25:31.860 --> 00:25:35.760\nAnd I can go up to, well, and let's\ntake a look, I'll show you how you can.\n\n450\n00:25:35.760 --> 00:25:40.659\nIf we do something like this,\nif I do open bracket INT,\n\n451\n00:25:40.659 --> 00:25:45.470\nclose bracket, colon,\ncolon, max value, right?\n\n452\n00:25:45.470 --> 00:25:53.000\nI can see, there is my maximum value, two\nmillion, one hundred, is that millions?\n\n453\n00:25:53.000 --> 00:25:57.851\nYeah, 2,147,460,647, right?\n\n454\n00:25:57.851 --> 00:25:58.500\n&gt;&gt; There you go.\n&gt;&gt; Right?\n\n455\n00:25:58.500 --> 00:25:59.600\nYeah.\nI can count that high?\n\n456\n00:25:59.600 --> 00:26:00.690\n&gt;&gt; Yeah, I know.\n\n457\n00:26:00.690 --> 00:26:02.450\nIt's so crazy without the little commas.\n\n458\n00:26:02.450 --> 00:26:03.420\nI'm like looking for the commas.\n\n459\n00:26:03.420 --> 00:26:04.660\n&gt;&gt; I know, where is that?\n\n460\n00:26:04.660 --> 00:26:06.741\n&gt;&gt; Okay, where did they go?\nYou have to count it out and put them in.\n\n461\n00:26:06.741 --> 00:26:08.073\n[LAUGH]\n&gt;&gt; Okay, you do min value.\n\n462\n00:26:08.073 --> 00:26:09.544\nYou know this is just the opposite,\n\n463\n00:26:09.544 --> 00:26:11.196\nright on the other side of zero-\n&gt;&gt; Okay.\n\n464\n00:26:11.196 --> 00:26:12.007\n&gt;&gt; going the other way.\n\n465\n00:26:12.007 --> 00:26:14.401\n&gt;&gt; Yup.\n&gt;&gt; If this was unsigned, right, well,\n\n466\n00:26:14.401 --> 00:26:17.522\nthen we're gonna start at zero,\nand we can only go one way.\n\n467\n00:26:17.522 --> 00:26:19.740\nBecause I'm saying there is no sign.\n\n468\n00:26:19.740 --> 00:26:23.570\nThere is no positive or\nnegative stored with this value.\n\n469\n00:26:23.570 --> 00:26:27.710\nSo everything has to be positive,\nso now I can go from\n\n470\n00:26:27.710 --> 00:26:32.150\nzero up to four million two hundred and\nwhatever that would be, right?\n\n471\n00:26:32.150 --> 00:26:35.520\nWe would add those two\ntogether to get that.\n\n472\n00:26:35.520 --> 00:26:39.914\nAnd then long, for example, is a 64-bit.\n\n473\n00:26:39.914 --> 00:26:43.182\nWe take a look at long.\n\n474\n00:26:43.182 --> 00:26:47.633\nAnd what I'm doing here is, I'm actually\npulling out, when you type that open,\n\n475\n00:26:47.633 --> 00:26:50.553\nclose bracket,\nI'm looking at the class that type.\n\n476\n00:26:50.553 --> 00:26:55.789\nAnd then the colon, colon, and then it has\nproperties, it has methods associated with\n\n477\n00:26:55.789 --> 00:27:00.410\nit, if we do max value, there I can see\nand I'm not even gonna try to say that.\n\n478\n00:27:00.410 --> 00:27:06.585\n&gt;&gt; Okay, Mike, so I looked it up and\nit is, we've got 4,294,96,296,\n\n479\n00:27:06.585 --> 00:27:11.516\nso that's probably why we couldn't\nremember the exact number.\n\n480\n00:27:11.516 --> 00:27:12.404\n&gt;&gt; Yeah, that's a big number, yup.\n\n481\n00:27:12.404 --> 00:27:15.231\n&gt;&gt; [LAUGH]\n&gt;&gt; And again, and I'm not trying to say,\n\n482\n00:27:15.231 --> 00:27:19.765\nhey, you should memorize these values and\nI don't want you to think that that\n\n483\n00:27:19.765 --> 00:27:25.320\n32-bit, or that int 32-bit sign integer\nhas anything to do with IPv4 addresses.\n\n484\n00:27:25.320 --> 00:27:27.420\nIn my mind though-\n&gt;&gt; Associations.\n\n485\n00:27:27.420 --> 00:27:31.350\n&gt;&gt; I know how many possible IPv4 addresses\nthere are if we could use every possible\n\n486\n00:27:31.350 --> 00:27:31.850\naddress, right?\n\n487\n00:27:31.850 --> 00:27:35.160\nAnd that's 32 bits, so that's how I\nwas trying to remember that number,\n\n488\n00:27:35.160 --> 00:27:37.990\nI was like, wait, there's possibly\nfour billion blah, blah, blah,\n\n489\n00:27:37.990 --> 00:27:39.770\nso that's why I using that.\n\n490\n00:27:39.770 --> 00:27:47.660\nThe rule of thumb is you really want to\nuse the smallest possible one you can.\n\n491\n00:27:47.660 --> 00:27:51.030\nBecause this is taking up memory.\n\n492\n00:27:51.030 --> 00:27:55.439\nIf I declare a long, and that's a 64-bit\n\n493\n00:27:55.439 --> 00:28:00.960\nsigned integer, that means it's taking\nup every long variable that I create.\n\n494\n00:28:00.960 --> 00:28:03.420\nIs taking up 64 bits of memory, all right.\n\n495\n00:28:03.420 --> 00:28:06.570\nAnd if I'm only storing the number five,\nwell,\n\n496\n00:28:06.570 --> 00:28:10.770\nI don't need quite that many bits\nto store the number five, right.\n\n497\n00:28:10.770 --> 00:28:15.200\nFive is 101,\nI really only need a few bits there,\n\n498\n00:28:15.200 --> 00:28:17.310\nI mean four bits would be plenty,\nthree bits we could do with that.\n\n499\n00:28:17.310 --> 00:28:20.790\nSo that would not be\nthe best data type to use.\n\n500\n00:28:20.790 --> 00:28:25.650\nAnd that's just what I wanted to show you,\nis that there are different\n\n501\n00:28:25.650 --> 00:28:29.936\ndata types we can use,\nthey have different possible values.\n\n502\n00:28:29.936 --> 00:28:33.240\nI know that like in some\nof the stuff I'm doing,\n\n503\n00:28:33.240 --> 00:28:36.180\nwe get in the habit of using int for\neverything.\n\n504\n00:28:36.180 --> 00:28:38.490\nBut int can store a pretty big number.\n\n505\n00:28:38.490 --> 00:28:42.850\nAnd for example, I'm doing this one\nproject that we're working with LEDs, and\n\n506\n00:28:42.850 --> 00:28:44.640\nwe're changing the PWM.\n\n507\n00:28:45.710 --> 00:28:48.630\nAnd the only possible\nvalue is zero to 255.\n\n508\n00:28:48.630 --> 00:28:51.330\nI really don't need to use an int,\n\n509\n00:28:51.330 --> 00:28:54.290\nbecause an int can store\na value up to two billion.\n\n510\n00:28:54.290 --> 00:29:00.030\nMy only possible values are zero to 255,\nso we end up using a byte data type.\n\n511\n00:29:00.030 --> 00:29:05.340\nBecause a byte is a bits and\nI'm using the space much more efficiently.\n\n512\n00:29:05.340 --> 00:29:08.020\nHopefully that makes sense\nto everybody out there.\n\n513\n00:29:08.020 --> 00:29:09.290\nAll right, the other data types we got,\n\n514\n00:29:09.290 --> 00:29:14.620\nyou've got strings for\ntext characters, unicode characters.\n\n515\n00:29:14.620 --> 00:29:18.900\nYou've got a string is typically\nwhat they say is a fixed length\n\n516\n00:29:18.900 --> 00:29:20.910\nset of unicode characters.\n\n517\n00:29:20.910 --> 00:29:25.618\nYou got chair, car, or char, depending\non who you're talking to C-H-A-R.\n\n518\n00:29:25.618 --> 00:29:29.485\nFor our Unicode16-bit character,\nbool, all right.\n\n519\n00:29:29.485 --> 00:29:34.580\nB-O-O-L, short for bullion,\npossible values true or false.\n\n520\n00:29:34.580 --> 00:29:40.420\nByte again is an 8-bit unsigned, you got\ndouble, you got decimal, you got single.\n\n521\n00:29:40.420 --> 00:29:45.290\nYou've got a raise, where I can actually\nstore multiple values in a variable.\n\n522\n00:29:45.290 --> 00:29:48.510\nSo we'll take a look at\nworking with those as we go.\n\n523\n00:29:48.510 --> 00:29:52.880\nWe've got xml to store xml documents,\nthat's another data type.\n\n524\n00:29:52.880 --> 00:29:54.390\nAnd we have hash tables.\n\n525\n00:29:54.390 --> 00:29:55.290\nHash tables are pretty cool.\n\n526\n00:29:55.290 --> 00:29:58.882\nWe'll take a look at those\nas we go through the series.\n\n527\n00:29:58.882 --> 00:30:02.964\nCache tables, very similar to dictionary\nobjects if you come from any other\n\n528\n00:30:02.964 --> 00:30:05.852\nprogramming languages,\neither use dictionaries.\n\n529\n00:30:05.852 --> 00:30:10.441\nThere are ways to store key value pair,\nwhere I can say, let's say,\n\n530\n00:30:10.441 --> 00:30:13.940\nI wanna store,\nput you to the test here, Cherokee.\n\n531\n00:30:13.940 --> 00:30:16.360\n&gt;&gt; Okay.\n&gt;&gt; I wanna store states and\n\n532\n00:30:16.360 --> 00:30:19.060\ntheir capitals, right?\n\n533\n00:30:19.060 --> 00:30:19.560\n&gt;&gt; Geez my-\n&gt;&gt; [LAUGH]\n\n534\n00:30:19.560 --> 00:30:20.280\n&gt;&gt; She's like, wait,\n\n535\n00:30:20.280 --> 00:30:24.032\nyou know how long it's been\nsince I've taken geography?\n\n536\n00:30:24.032 --> 00:30:25.060\n&gt;&gt; Gosh.\n&gt;&gt; [LAUGH]\n\n537\n00:30:25.060 --> 00:30:27.140\n&gt;&gt; We'll do some relatively easy ones,\n\n538\n00:30:27.140 --> 00:30:28.255\nones that I hope I know.\n\n539\n00:30:28.255 --> 00:30:30.120\n&gt;&gt; [LAUGH]\n&gt;&gt; As well.\n\n540\n00:30:30.120 --> 00:30:33.910\nBut I might wanna store, like do you know,\nwhat's the capital of Florida?\n\n541\n00:30:33.910 --> 00:30:34.510\n&gt;&gt; Tallahassee.\n\n542\n00:30:34.510 --> 00:30:35.020\n&gt;&gt; Okay.\n&gt;&gt; [LAUGH]\n\n543\n00:30:35.020 --> 00:30:39.090\n&gt;&gt; So I could store in my variable,\n\n544\n00:30:39.090 --> 00:30:44.178\nthat Florida equals Tallahassee,\nand what's another one you know?\n\n545\n00:30:44.178 --> 00:30:45.833\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm terrible with my [INAUDIBLE]\n\n546\n00:30:45.833 --> 00:30:47.460\n&gt;&gt; That was it right?\n\n547\n00:30:47.460 --> 00:30:48.200\nThat was all we got.\n\n548\n00:30:48.200 --> 00:30:49.370\n&gt;&gt; That's it.\n\n549\n00:30:49.370 --> 00:30:56.030\n&gt;&gt; Or we could do something like,\ncolor equals blue, size equals five,\n\n550\n00:30:56.030 --> 00:31:00.350\nsize equals four, and\nall those are key value pairs.\n\n551\n00:31:00.350 --> 00:31:04.260\nSo if I want to return,\nwhat color is that box gonna be.\n\n552\n00:31:04.260 --> 00:31:05.260\nIt's gonna be blue, right.\n\n553\n00:31:05.260 --> 00:31:07.680\nWhat size is it gonna be, five inches.\n\n554\n00:31:07.680 --> 00:31:10.710\nOr how many sides does it have,\nfour, right.\n\n555\n00:31:10.710 --> 00:31:12.612\nSo each one of those is a key value pair.\n\n556\n00:31:12.612 --> 00:31:15.620\nThere are great ways of\nstoring key value pairs.\n\n557\n00:31:15.620 --> 00:31:19.090\nThey're very efficient, great way to go in\nand find the information when you need it.\n\n558\n00:31:19.090 --> 00:31:21.000\nAnd we'll take a look\nat how we create those,\n\n559\n00:31:21.000 --> 00:31:25.180\ncuz those are created a little bit\ndifferently than our standard variables.\n\n560\n00:31:25.180 --> 00:31:30.580\nWe have to go through some special\nsyntax to create those hash tables.\n\n561\n00:31:30.580 --> 00:31:33.320\nSo that's a look at the different\ndata types that are available.\n\n562\n00:31:33.320 --> 00:31:35.370\nAgain, great documentation\nout there on Microsoft,\n\n563\n00:31:35.370 --> 00:31:38.200\ngo take a look at the Microsoft docs.\n\n564\n00:31:38.200 --> 00:31:40.150\nYou know Google, PowerShell or Bing.\n\n565\n00:31:40.150 --> 00:31:43.930\nPowerShell data types, look for\na link that heads back to\n\n566\n00:31:45.880 --> 00:31:48.350\nMicrosoft docs, or use your Help.\n\n567\n00:31:48.350 --> 00:31:49.700\nRight, we have the About.\n\n568\n00:31:49.700 --> 00:31:54.430\nHey, we might be able to do, let's see,\nabout under score data types,\n\n569\n00:31:55.890 --> 00:31:57.090\nI'd have to do my Get Help, but\n\n570\n00:31:57.090 --> 00:32:00.220\nwe won't worry about it,\nI know we're getting short on time here.\n\n571\n00:32:00.220 --> 00:32:03.310\nThey have great documentation built in to\nPowerShell as well, but just go on and\n\n572\n00:32:03.310 --> 00:32:04.420\ntake a look at Microsoft's site,\n\n573\n00:32:04.420 --> 00:32:06.800\nget some information about\nthe different data types.\n\n574\n00:32:06.800 --> 00:32:10.100\nAnd I know you're giving me the signal,\nso we're about out of time here.\n\n575\n00:32:10.100 --> 00:32:11.530\nWhen we come back maybe, Cherokee,\n\n576\n00:32:11.530 --> 00:32:14.140\nwe can take a look at actually\ncreating some variables.\n\n577\n00:32:14.140 --> 00:32:18.075\n&gt;&gt; Good, maybe you'll give some extra time\nto study before the next show as well.\n\n578\n00:32:18.075 --> 00:32:19.570\n&gt;&gt; [LAUGH]\n&gt;&gt; But thank you so much, Mike.\n\n579\n00:32:19.570 --> 00:32:20.670\nAnd thank you for joining us.\n\n580\n00:32:20.670 --> 00:32:22.770\nYou don't want to miss what\nwe have headed your way.\n\n581\n00:32:22.770 --> 00:32:24.380\nBut for this show, we are out of time.\n\n582\n00:32:24.380 --> 00:32:25.811\nSo we'll go ahead and sign out.\n\n583\n00:32:25.811 --> 00:32:27.111\nI've been your host, Cherokee Boose.\n\n584\n00:32:27.111 --> 00:32:27.881\n&gt;&gt; And I'm Mike Roderick.\n\n585\n00:32:27.881 --> 00:32:31.283\n&gt;&gt; See you next time here, ITProTV.\n\n586\n00:32:31.283 --> 00:32:37.199\n[MUSIC]\n\n587\n00:32:37.199 --> 00:32:39.240\n&gt;&gt; Thank you for watching IT Pro TV.\n\n",
          "vimeoId": "241898153"
        },
        {
          "description": "In this episode, Mike and Cherokee continue their look at variables in PowerShell. They explain how to create variables in PowerShell and assign values",
          "length": "1987",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-1-2-working_with_variables_pt_2-110717-PGM.00_32_53_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-1-2-working_with_variables_pt_2-110717-PGM.00_32_53_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-1-2-working_with_variables_pt_2-110717-PGM.00_32_53_10.Still001-sm.jpg",
          "title": "Working with Variables Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.230 --> 00:00:03.443\nWelcome to ITProTV,\nI'm your host Don Pezet.\n\n2\n00:00:03.443 --> 00:00:05.149\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:05.149 --> 00:00:07.182\n[MUSIC]\n\n4\n00:00:07.182 --> 00:00:11.843\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.843 --> 00:00:15.117\n&gt;&gt; Welcome to your PowerShell Scripting\nseries, I'm your show host Cherokee Boose.\n\n6\n00:00:15.117 --> 00:00:17.943\nThis is actually a part two,\na continuation,\n\n7\n00:00:17.943 --> 00:00:22.000\nwhere we will be examining\ndifferent types of variables.\n\n8\n00:00:22.000 --> 00:00:25.060\nAnd back with us today in studios\nwe have Mr. Mike Rodrick.\n\n9\n00:00:25.060 --> 00:00:25.865\nHow's going today, Mike?\n\n10\n00:00:25.865 --> 00:00:28.160\n&gt;&gt; Well, it's going great, Cherokee,\nthanks for having me back.\n\n11\n00:00:28.160 --> 00:00:32.353\nAnd excited as always, especially today we\nget to continue talking about variables.\n\n12\n00:00:32.353 --> 00:00:36.916\nCuz we kinda left off, we got everybody, I\nthink, excited like, let's see variables,\n\n13\n00:00:36.916 --> 00:00:38.690\nwe talked about them.\n\n14\n00:00:38.690 --> 00:00:40.535\nWe never really did anything with them,\ndid we?\n\n15\n00:00:40.535 --> 00:00:41.420\n&gt;&gt; [LAUGH]\n&gt;&gt; Kind of boring.\n\n16\n00:00:41.420 --> 00:00:45.619\nSo now we're gonna go in and\nactually work with some variables.\n\n17\n00:00:45.619 --> 00:00:48.209\nAnd again,\nwe're just creating some examples here,\n\n18\n00:00:48.209 --> 00:00:50.872\nwe're not really ready to\nwrite a full-on script yet.\n\n19\n00:00:50.872 --> 00:00:54.527\nWe've gotta get all these pieces together,\nwe've got to learn about how we put these\n\n20\n00:00:54.527 --> 00:00:56.930\nscripts together, and\nthen we'll take a look at that.\n\n21\n00:00:56.930 --> 00:01:00.320\nSo for now we're still getting\nour feet wet, getting ready.\n\n22\n00:01:00.320 --> 00:01:04.135\nGetting all that foundation laid\nto write our really cool scripts.\n\n23\n00:01:04.135 --> 00:01:08.940\n[COUGH] So we learned about variables,\nwe learned about data types.\n\n24\n00:01:08.940 --> 00:01:10.310\nLet's see how we can go ahead and\ndeclare variables.\n\n25\n00:01:10.310 --> 00:01:13.510\nSo Cherokee, do you remember what\na variable always starts with when we're\n\n26\n00:01:13.510 --> 00:01:15.190\ntalking about a variable name?\n\n27\n00:01:15.190 --> 00:01:16.090\n&gt;&gt; Dollar sign.\n\n28\n00:01:16.090 --> 00:01:18.549\n&gt;&gt; The dollar sign, you are correct-\n&gt;&gt; Money [LAUGH].\n\n29\n00:01:18.549 --> 00:01:19.473\n&gt;&gt; Ding, ding, ding.\n\n30\n00:01:19.473 --> 00:01:20.950\n[LAUGH] Money, money, right?\n\n31\n00:01:20.950 --> 00:01:22.405\nShow me the variable.\n\n32\n00:01:22.405 --> 00:01:23.817\n&gt;&gt; [LAUGH]\n&gt;&gt; All right,\n\n33\n00:01:23.817 --> 00:01:28.070\nso if I wanna create a variable,\nI can say $a, right?\n\n34\n00:01:28.070 --> 00:01:30.930\nAnd I can actually just, whoops,\nlet's see if we can do this.\n\n35\n00:01:30.930 --> 00:01:33.554\nI can go ahead and assign a value,\nlet's say $a = 5, right?\n\n36\n00:01:33.554 --> 00:01:35.800\nAnd I'll hit Enter.\n\n37\n00:01:35.800 --> 00:01:40.610\nNow notice I didn't do anything with\ndata types, anything like that.\n\n38\n00:01:40.610 --> 00:01:43.804\nI just said hey, I wanna create a variable\ncalled dollar sign, or called a.\n\n39\n00:01:43.804 --> 00:01:49.390\nThe dollar sign is what PowerShell\nuses to denote that it is a variable.\n\n40\n00:01:49.390 --> 00:01:50.186\nAnd I assigned a value to it.\n\n41\n00:01:50.186 --> 00:01:56.770\nSo I took the number 5 and I put it\ninto this container called a, right?\n\n42\n00:01:56.770 --> 00:02:01.474\nSo now if I wanna recall that variable,\n$a, and hit Enter, and\n\n43\n00:02:01.474 --> 00:02:04.018\nnotice it prints out a 5, right?\n\n44\n00:02:04.018 --> 00:02:07.900\nBecause that is the value\nstored in that variable.\n\n45\n00:02:07.900 --> 00:02:13.736\nNow I could reassign that value,\nI could say $a = 7, right?\n\n46\n00:02:13.736 --> 00:02:21.080\nAnd if I do $a again,\nnow notice we get a 7 over there, right?\n\n47\n00:02:21.080 --> 00:02:24.540\nBecause the equals sign, and this is\nthe one you're gonna be careful with,\n\n48\n00:02:24.540 --> 00:02:27.200\nwe'll talk more about this\nwhen we get into operators.\n\n49\n00:02:27.200 --> 00:02:31.133\nIn PowerShell, the equals sign\nis the assignment operator.\n\n50\n00:02:31.133 --> 00:02:36.260\nWe've gotta be really, really careful,\nthat is not a comparison operator, right?\n\n51\n00:02:36.260 --> 00:02:39.044\nI'm not saying,\nare these two values the same, right,\n\n52\n00:02:39.044 --> 00:02:40.554\nI would not use the equal sign.\n\n53\n00:02:40.554 --> 00:02:43.469\nWe'd actually use something different for\nthat, and again,\n\n54\n00:02:43.469 --> 00:02:46.670\nwe'll come to that when we get\ninto the comparison operators.\n\n55\n00:02:46.670 --> 00:02:50.530\nBut in this case, in PowerShell,\nthe equal sign is an assignment operator.\n\n56\n00:02:50.530 --> 00:02:53.300\nSo it's assigning the value on the right\n\n57\n00:02:53.300 --> 00:02:58.410\nto that variable that we've declared\nover there on the left, right?\n\n58\n00:02:58.410 --> 00:03:00.443\nWell let's do another one, let's do $b.\n\n59\n00:03:00.443 --> 00:03:05.430\nWe're gonna keep it,\nit keeps trying to auto-fill for me there.\n\n60\n00:03:05.430 --> 00:03:08.590\nI should use different names or\nsomething a little more complex than that.\n\n61\n00:03:08.590 --> 00:03:12.173\nWe'll say $b = 8, right?\n\n62\n00:03:12.173 --> 00:03:15.731\nAnd now if I do $b,\n\n63\n00:03:15.731 --> 00:03:21.930\nI can see the value 8, right?\n\n64\n00:03:21.930 --> 00:03:24.264\nSo there we're declaring variables and\n\n65\n00:03:24.264 --> 00:03:28.180\nwe're storing values in those\nvariables to recall later, right?\n\n66\n00:03:29.295 --> 00:03:34.720\nNow we can do expressions,\nright, with these variables.\n\n67\n00:03:34.720 --> 00:03:38.246\nAnd for example,\n\n68\n00:03:38.246 --> 00:03:43.181\nif I do a $c = $a + $b,\n\n69\n00:03:43.181 --> 00:03:48.350\nokay, and I hit Enter.\n\n70\n00:03:48.350 --> 00:03:51.020\nWell nothing happens,\nI'm not telling it to show me the results.\n\n71\n00:03:51.020 --> 00:03:56.080\nI'm saying,\nstore the results in that variable $c.\n\n72\n00:03:56.080 --> 00:04:01.550\nNow if I recall $c,\nI get the number 15, right?\n\n73\n00:04:01.550 --> 00:04:04.860\nBecause it added these two and\nit stored it in c.\n\n74\n00:04:04.860 --> 00:04:08.530\na hasn't changed, b hasn't changed.\n\n75\n00:04:08.530 --> 00:04:14.980\nI say $a, right, it's still 7, b is\nstill 8, c is now the addition of those.\n\n76\n00:04:14.980 --> 00:04:19.526\nIf I change the numbers at this point,\n\n77\n00:04:19.526 --> 00:04:22.800\nif I stay $a = 8, right?\n\n78\n00:04:22.800 --> 00:04:26.395\nAnd then I try, so now you're thinking,\n\n79\n00:04:26.395 --> 00:04:31.036\nwell now a is 8, b is 8,\nso c should be 16, right?\n\n80\n00:04:31.036 --> 00:04:34.382\nLet's see, $c is only 15,\n\n81\n00:04:34.382 --> 00:04:39.570\nbecause we never reassigned a value to c.\n\n82\n00:04:39.570 --> 00:04:44.470\nc was assigned here, right, so\neven though the value of a has changed,\n\n83\n00:04:44.470 --> 00:04:48.160\nc is not storing this expression, right?\n\n84\n00:04:48.160 --> 00:04:53.000\nc is storing the value that\nresulted from this expression.\n\n85\n00:04:53.000 --> 00:04:57.884\nSo if I want to update the value\nof c with the new value of what\n\n86\n00:04:57.884 --> 00:05:01.820\na + b would be, I need to run that again.\n\n87\n00:05:01.820 --> 00:05:05.903\nI need to come down here and\nsay all right,\n\n88\n00:05:05.903 --> 00:05:09.528\nnow do that again, $c = $a + $b.\n\n89\n00:05:09.528 --> 00:05:12.580\nAnd $c is now 16, right?\n\n90\n00:05:14.370 --> 00:05:17.905\nSo that's how we're gonna,\nagain, that's a very basic\n\n91\n00:05:17.905 --> 00:05:22.173\nstart to how we're going to create\nvariables and assign, all right?\n\n92\n00:05:22.173 --> 00:05:26.110\nNow, I said that PowerShell\nis a dynamic typed language.\n\n93\n00:05:26.110 --> 00:05:28.910\nIn other words,\nI didn't declare types in here, yet\n\n94\n00:05:28.910 --> 00:05:31.640\nit seems to be doing just fine without it.\n\n95\n00:05:31.640 --> 00:05:35.510\nIt's adding those numbers in as\nif they were integers, right?\n\n96\n00:05:35.510 --> 00:05:37.297\nLets see if we can figure out\nwhat data types they are.\n\n97\n00:05:37.297 --> 00:05:43.500\nIf I do a $a dot, there's actually\na couple of different ways I can do this.\n\n98\n00:05:43.500 --> 00:05:45.340\nI'll show you the long way first.\n\n99\n00:05:45.340 --> 00:05:51.620\nLet me take $a, and I'm gonna\npipe that into Get-Member, right?\n\n100\n00:05:51.620 --> 00:05:55.730\nWe talked about this is our first series,\nGet-Member is a way that I can show,\n\n101\n00:05:55.730 --> 00:05:57.861\nany time we're dealing with an object.\n\n102\n00:05:57.861 --> 00:06:02.120\nAnd remember,\neverything in PowerShell is an object.\n\n103\n00:06:02.120 --> 00:06:04.720\nIt's one of the best\nthings about PowerShell,\n\n104\n00:06:04.720 --> 00:06:07.220\nis that even a string is an object.\n\n105\n00:06:07.220 --> 00:06:11.101\nAnd it has properties and\nmethods that we can use with that string.\n\n106\n00:06:11.101 --> 00:06:15.978\nRemember, everything's an object,\nand a Get-Member shows me\n\n107\n00:06:15.978 --> 00:06:20.955\nall of the things that make up that\nobject, what I have available.\n\n108\n00:06:20.955 --> 00:06:25.468\nSo $a, pipe that into a Get-Member,\nI hit Enter, and\n\n109\n00:06:25.468 --> 00:06:30.748\nhere I can see that what I'm really\nlooking at is this right here,\n\n110\n00:06:30.748 --> 00:06:33.357\nthat it is actually an integer.\n\n111\n00:06:33.357 --> 00:06:34.930\nRight, so it's a type int32 there.\n\n112\n00:06:36.160 --> 00:06:38.784\nA shortcut to that method\nwould be to Get-Type.\n\n113\n00:06:38.784 --> 00:06:41.790\nInstead of piping it into a Get-Member,\n\n114\n00:06:41.790 --> 00:06:44.910\ncuz maybe I don't really need to\nknow all the different methods.\n\n115\n00:06:44.910 --> 00:06:49.210\nI'm just trying to figure out what the\ndata type is for that particular variable.\n\n116\n00:06:49.210 --> 00:06:55.184\nThen I can also do this,\nI can do $a.GetType(), okay?\n\n117\n00:06:55.184 --> 00:07:02.160\nAnd there I can see it's an integer,\nit's a 32 bit integer data type.\n\n118\n00:07:02.160 --> 00:07:05.050\nRight, so\njust another way to do the same thing.\n\n119\n00:07:05.050 --> 00:07:06.470\nThere's really a third way, why not?\n\n120\n00:07:06.470 --> 00:07:09.230\nThere's three ways to do\neverything in Windows.\n\n121\n00:07:09.230 --> 00:07:13.057\nSo we could do Get-Type().Fullname.\n\n122\n00:07:13.057 --> 00:07:17.260\nI wonder if that'll tab auto fill for\nme, probably not.\n\n123\n00:07:17.260 --> 00:07:21.101\nRight, and\nthere I can see it's a System.Int32 or\n\n124\n00:07:21.101 --> 00:07:23.500\nan integer of 32 bits, right?\n\n125\n00:07:24.850 --> 00:07:27.890\nAll right, so now let's play around,\nin fact, you know what?\n\n126\n00:07:27.890 --> 00:07:30.360\nWhile we're not using it,\nI'm gonna close up that script pane and\n\n127\n00:07:30.360 --> 00:07:31.516\ngive us a little bit more room.\n\n128\n00:07:31.516 --> 00:07:34.700\nCuz what I wanna show you are some\nexamples of how working with\n\n129\n00:07:34.700 --> 00:07:39.009\na dynamically typed language this, that\ncan be good, but it can also throw you for\n\n130\n00:07:39.009 --> 00:07:40.650\na loop if you're not careful.\n\n131\n00:07:40.650 --> 00:07:46.160\nYou really have to watch out, or\nyou can always declare things, right?\n\n132\n00:07:46.160 --> 00:07:51.901\nYou can be very strict with it, and\na lot of people will tell you, you should.\n\n133\n00:07:51.901 --> 00:07:54.448\nYeah, because otherwise they\nsay it's like the Wild, Wild,\n\n134\n00:07:54.448 --> 00:07:55.758\nWest out there with data types.\n\n135\n00:07:55.758 --> 00:08:00.116\nAnd you can definitely cause\nsome problems in your scripts.\n\n136\n00:08:00.116 --> 00:08:01.895\nSo Let's do this.\n\n137\n00:08:01.895 --> 00:08:07.635\nLet's do $,\nlet's start with some new letters.\n\n138\n00:08:07.635 --> 00:08:12.769\nLet's say $f = something like 12,\nall right.\n\n139\n00:08:12.769 --> 00:08:13.491\nAnd I'll hit Enter.\n\n140\n00:08:13.491 --> 00:08:16.224\nNow, we know that now,\n\n141\n00:08:16.224 --> 00:08:21.850\nour $f should equal 12, which it does.\n\n142\n00:08:21.850 --> 00:08:27.873\nAnd if I do a $f.gettype().\n\n143\n00:08:27.873 --> 00:08:30.383\nI'll see that it is now,\nit is an integer, right.\n\n144\n00:08:30.383 --> 00:08:34.875\nSo, it's for numbers, numeric values\nthat I can store in there, right?\n\n145\n00:08:34.875 --> 00:08:38.296\nLet's do $g = \", and\n\n146\n00:08:38.296 --> 00:08:43.545\nlet's do a simple quote here.\n\n147\n00:08:43.545 --> 00:08:46.684\nAnd we're gonna talk about quotes and\nstrings here in just a minute.\n\n148\n00:08:46.684 --> 00:08:52.460\n$g = '12', but it's inside a single quote.\n\n149\n00:08:52.460 --> 00:08:57.565\nI'll hit Enter, and now,\nlet's do $g.gettype.\n\n150\n00:08:59.730 --> 00:09:05.390\nAnd notice, we have a string because\nthe single quotes are telling the system,\n\n151\n00:09:05.390 --> 00:09:07.090\nhey, this is a string.\n\n152\n00:09:07.090 --> 00:09:09.846\nStrings are going to be\nwrapped inside quotes.\n\n153\n00:09:09.846 --> 00:09:14.645\nAnd so, PowerShell is saying, you've got a\nstring there then you didn't tell me what\n\n154\n00:09:14.645 --> 00:09:17.357\ntype of variable this is but\nI'm gonna make it a string, right.\n\n155\n00:09:18.490 --> 00:09:22.929\nSo now g is a string and\nI can return that,\n\n156\n00:09:22.929 --> 00:09:26.593\n$g and I still get 12, right?\n\n157\n00:09:26.593 --> 00:09:27.645\nBut let's do another one.\n\n158\n00:09:27.645 --> 00:09:33.620\n$hostname, actually that's\nprobably an actual word.\n\n159\n00:09:33.620 --> 00:09:39.951\nLet's do, your name equal to your key,\n\n160\n00:09:39.951 --> 00:09:44.429\noops, your quote, right?\n\n161\n00:09:44.429 --> 00:09:47.470\nWrite that dollar sign and\nyour name, right?\n\n162\n00:09:47.470 --> 00:09:50.485\nI can return that string value, mm-hm.\n\n163\n00:09:50.485 --> 00:09:53.615\n&gt;&gt; So we're not just assuming, just\nbecause it's a number, it's an integer.\n\n164\n00:09:53.615 --> 00:09:59.490\nSo for instance,\nif I have four octets in that format,\n\n165\n00:09:59.490 --> 00:10:04.400\nthen it would be seeing it as\nan IP address not an integer for\n\n166\n00:10:04.400 --> 00:10:05.610\nthose components\n&gt;&gt; Yeah, so\n\n167\n00:10:05.610 --> 00:10:08.780\nyou definitely,\ndepending on what you're doing with it.\n\n168\n00:10:08.780 --> 00:10:14.406\nWell, it's hard to say, because again,\nyou can get in trouble, but there's also\n\n169\n00:10:14.406 --> 00:10:19.734\ngood because PowerShell is dynamically\ntyped, it does the best that it can do.\n\n170\n00:10:19.734 --> 00:10:21.710\nHere's probably the best way to say this.\n\n171\n00:10:21.710 --> 00:10:26.000\nPowerShell will do\neverything it possibly can\n\n172\n00:10:26.000 --> 00:10:29.980\nto take what you've given it and\nmake it do what you want it to do.\n\n173\n00:10:29.980 --> 00:10:33.220\nIn other words, even if, and\nthen that's my next example.\n\n174\n00:10:33.220 --> 00:10:38.486\nEven though this g is a string, so\nyou think I can do math with that?\n\n175\n00:10:38.486 --> 00:10:39.530\nIf it's a string?\n\n176\n00:10:39.530 --> 00:10:41.260\n&gt;&gt; If it's a string?\n\n177\n00:10:41.260 --> 00:10:42.202\n&gt;&gt; And just best guess.\n\n178\n00:10:42.202 --> 00:10:43.609\n&gt;&gt; No.\n&gt;&gt; Like I said, it's a trick question.\n\n179\n00:10:43.609 --> 00:10:44.828\nSo, you know you're gonna be wrong anyway.\n\n180\n00:10:44.828 --> 00:10:45.547\n&gt;&gt; Okay,\n&gt;&gt; [LAUGH]\n\n181\n00:10:45.547 --> 00:10:46.716\n&gt;&gt; I would say no, yeah, [LAUGH]\n\n182\n00:10:46.716 --> 00:10:48.071\n&gt;&gt; Yeah, you shouldn't be able to,\n\n183\n00:10:48.071 --> 00:10:49.907\nthat would make sense,\nhow can I add strings?\n\n184\n00:10:49.907 --> 00:10:51.830\nI can't add Bob-\n&gt;&gt; Yeah [LAUGH]\n\n185\n00:10:51.830 --> 00:10:53.110\n&gt;&gt; And Sue,\n\n186\n00:10:53.110 --> 00:10:54.860\nthat's not a mathematical problem, right?\n\n187\n00:10:54.860 --> 00:10:55.947\nI can't cat this,\nI can't put them together.\n\n188\n00:10:55.947 --> 00:10:58.346\n&gt;&gt; I'm still confused about\nthe math from above but\n\n189\n00:10:58.346 --> 00:11:00.811\nI was gonna ask you that anyways,\nbut we'll see.\n\n190\n00:11:00.811 --> 00:11:03.181\n&gt;&gt; Which wait, wait, okay,\nwe'll go back to that then.\n\n191\n00:11:03.181 --> 00:11:05.880\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's clear off my screen here.\n\n192\n00:11:05.880 --> 00:11:10.522\nSo, we have $f which we saw was a integer,\nright.\n\n193\n00:11:10.522 --> 00:11:12.250\nIt's storing the value 12.\n\n194\n00:11:12.250 --> 00:11:13.880\nWe have $g.\n\n195\n00:11:13.880 --> 00:11:16.660\n&gt;&gt; Okay.\n&gt;&gt; Which is also storing a value of 12,\n\n196\n00:11:16.660 --> 00:11:17.612\nbut it's a string, all right.\n\n197\n00:11:19.030 --> 00:11:20.951\nAs we said,\nthat we put it in a single quotes.\n\n198\n00:11:20.951 --> 00:11:21.720\n&gt;&gt; Okay.\n\n199\n00:11:21.720 --> 00:11:24.760\n&gt;&gt; Okay, so now, we're gonna say, $h.\n\n200\n00:11:24.760 --> 00:11:26.030\nAnd, I'm just making up letters, right.\n\n201\n00:11:26.030 --> 00:11:27.900\nI can call the variable anything I want.\n\n202\n00:11:27.900 --> 00:11:28.820\nI'm just using these letters here.\n\n203\n00:11:28.820 --> 00:11:31.504\nEquals-\n&gt;&gt; I can literally write out the word\n\n204\n00:11:31.504 --> 00:11:32.160\ntwelve.\n\n205\n00:11:32.160 --> 00:11:36.230\n&gt;&gt; Absolutely, yep, so\n\n206\n00:11:36.230 --> 00:11:40.742\nI say, $h = $f + $g.\n\n207\n00:11:40.742 --> 00:11:46.200\nRight, and it doesn't balk at me.\n\n208\n00:11:46.200 --> 00:11:48.340\nAnd let's see what h is now.\n\n209\n00:11:48.340 --> 00:11:50.305\n&gt;&gt; Right, I get no output either.\n\n210\n00:11:50.305 --> 00:11:53.410\n&gt;&gt; No, now look at there, it's 24.\n\n211\n00:11:53.410 --> 00:11:55.752\nRight, so this, but let's take a look.\n\n212\n00:11:55.752 --> 00:12:02.480\nRemember, $g.gettype(), it is a string.\n\n213\n00:12:02.480 --> 00:12:08.480\nSo, I'm taking an integer and a string,\nand I'm still able to do math with them.\n\n214\n00:12:08.480 --> 00:12:11.430\nThat's what we mean by\na dynamically typed.\n\n215\n00:12:11.430 --> 00:12:15.520\nAnd the fact, that PowerShell\nwill manipulate those data types,\n\n216\n00:12:15.520 --> 00:12:17.830\nis you're telling it I wanna add this,\nthis, and this.\n\n217\n00:12:17.830 --> 00:12:20.820\nWell, PowerShell is saying wait,\ng is not a string.\n\n218\n00:12:20.820 --> 00:12:25.628\nBut a string, let's do this, $g,\n\n219\n00:12:25.628 --> 00:12:31.780\ntype that out into a get-numbers, right.\n\n220\n00:12:31.780 --> 00:12:38.750\nA string has a method,\nif I can find it here.\n\n221\n00:12:38.750 --> 00:12:40.460\nThere is a convert.\n\n222\n00:12:41.750 --> 00:12:44.160\nThere's to string.\n\n223\n00:12:44.160 --> 00:12:49.182\nSomewhere in here, there is a convert to.\n\n224\n00:12:49.182 --> 00:12:52.169\n[SOUND] Am I missing it?\n\n225\n00:12:52.169 --> 00:12:53.240\n&gt;&gt; I'm looking.\n\n226\n00:12:53.240 --> 00:12:54.472\n&gt;&gt; I don't see it.\n\n227\n00:12:54.472 --> 00:12:56.690\nIt is not sorted in the best format here.\n\n228\n00:12:57.870 --> 00:12:59.690\nInt, IConvertible.\n\n229\n00:12:59.690 --> 00:13:01.545\nI think it's, yeah ToInt32.\n\n230\n00:13:01.545 --> 00:13:02.320\nI believe that.\n\n231\n00:13:02.320 --> 00:13:05.350\nYeah, ToInt32, that's the one or\nI could do to double, or to.\n\n232\n00:13:05.350 --> 00:13:10.110\nI'm looking over there, look and\nthere's the answers right there.\n\n233\n00:13:10.110 --> 00:13:15.440\nToInt16, ToInt32, ToInt64, ToLower,\nToDecimal, ToChar,ToByte, ToBool.\n\n234\n00:13:15.440 --> 00:13:19.050\nSo these are methods of strings,\nin other words a string has a built-in\n\n235\n00:13:19.050 --> 00:13:23.560\nmethod to convert it from\na string to an integer, right.\n\n236\n00:13:23.560 --> 00:13:26.270\nSo, that's what PowerShell is doing in\nthe background, is it's saying hey,\n\n237\n00:13:26.270 --> 00:13:29.480\nyou're trying to do math with this but\nthis is a string.\n\n238\n00:13:29.480 --> 00:13:33.700\nBut, if you really want to do math,\nI'm gonna try to help you out and\n\n239\n00:13:33.700 --> 00:13:37.870\nsee if I can convert this to an integer\nand allow you to do that math.\n\n240\n00:13:37.870 --> 00:13:39.710\nAnd that's exactly what PowerShell did.\n\n241\n00:13:39.710 --> 00:13:44.160\nIt said okay, we'll just convert that for\nyou in the background, add them up, and\n\n242\n00:13:44.160 --> 00:13:45.870\nlet you do it anyway, all right.\n\n243\n00:13:45.870 --> 00:13:48.495\nBut notice it didn't change the type of g.\n\n244\n00:13:48.495 --> 00:13:51.930\nG is still a string, okay?\n\n245\n00:13:51.930 --> 00:13:57.040\nSo, the variable g still\nholds a string value, but for\n\n246\n00:13:57.040 --> 00:14:02.130\nthe expression it temporarily,\nwhen it returned that value of g,\n\n247\n00:14:02.130 --> 00:14:04.190\nso when it resolved, right?\n\n248\n00:14:04.190 --> 00:14:06.030\nWe can use a DNS term here.\n\n249\n00:14:06.030 --> 00:14:11.800\nWhen it resolved the variable name into a\nvalue, it returned a string 12, one, two.\n\n250\n00:14:11.800 --> 00:14:18.620\nThose characters, one, two, and\nthen it ran that in through the ToInt,\n\n251\n00:14:18.620 --> 00:14:23.980\nand converted the characters one,\ntwo to the integer, 12, did the math and\n\n252\n00:14:23.980 --> 00:14:28.970\nstored the value in h, but that did not\nchange the variable itself, all right?\n\n253\n00:14:28.970 --> 00:14:31.140\nSo that didn't change\nthe data type up here.\n\n254\n00:14:32.470 --> 00:14:33.478\n&gt;&gt; Well,\n&gt;&gt; All right, yeah.\n\n255\n00:14:33.478 --> 00:14:36.849\n&gt;&gt; Yeah, and just with today's processing\npower we don't have to wait for\n\n256\n00:14:36.849 --> 00:14:38.810\nall these conversions to take place.\n\n257\n00:14:38.810 --> 00:14:39.780\n&gt;&gt; Very quick, right?\n\n258\n00:14:39.780 --> 00:14:41.840\n&gt;&gt; Yeah, do you wanna look at the other\none from before to see if I'm\n\n259\n00:14:41.840 --> 00:14:42.440\njust losing my mind.\n\n260\n00:14:42.440 --> 00:14:43.052\n&gt;&gt; Which one was that?\n\n261\n00:14:43.052 --> 00:14:44.410\nI don't know if I remember.\n&gt;&gt; Oliver, the first one.\n\n262\n00:14:44.410 --> 00:14:45.833\n&gt;&gt; I cleared my screen.\n\n263\n00:14:45.833 --> 00:14:48.159\n&gt;&gt; But it was seven.\n\n264\n00:14:48.159 --> 00:14:50.420\n&gt;&gt; Uh-huh.\n&gt;&gt; You used, I think A?\n\n265\n00:14:50.420 --> 00:14:51.834\n&gt;&gt; A and B?\n&gt;&gt; I was thinking B.\n\n266\n00:14:51.834 --> 00:14:52.532\n&gt;&gt; $A is still in there.\n\n267\n00:14:52.532 --> 00:14:54.812\nSo we changed it to\nan eight at some point.\n\n268\n00:14:54.812 --> 00:14:55.505\n&gt;&gt; That's where it is.\n\n269\n00:14:55.505 --> 00:14:59.545\nI must have missed that because\nseven plus eight, isn't 16.\n\n270\n00:14:59.545 --> 00:15:03.547\n[CROSSTALK]\n&gt;&gt; Cuz I reassigned the value.\n\n271\n00:15:03.547 --> 00:15:04.248\n&gt;&gt; That's right, okay.\n\n272\n00:15:04.248 --> 00:15:05.731\n&gt;&gt; Okay, all right.\n\n273\n00:15:05.731 --> 00:15:06.682\n&gt;&gt; [LAUGH]\n&gt;&gt; So,\n\n274\n00:15:06.682 --> 00:15:11.240\nwe see how that works now we\nwanna be really careful here.\n\n275\n00:15:11.240 --> 00:15:16.303\nLet's do this one because we\njust saw if I take f and g,\n\n276\n00:15:16.303 --> 00:15:22.120\nright, f was the integer,\ng was the string.\n\n277\n00:15:22.120 --> 00:15:25.930\nIf I try to add them together, it converts\nit for me and if I look at $h I get 24, so\n\n278\n00:15:25.930 --> 00:15:29.050\neverything works fine.\n\n279\n00:15:30.860 --> 00:15:35.130\nWhat if I do this, $j, I'm just working\nmy way down the keyboard with these\n\n280\n00:15:35.130 --> 00:15:38.355\nvariable names here,\n[LAUGH] right across that home row.\n\n281\n00:15:38.355 --> 00:15:38.872\n&gt;&gt; Yay.\n\n282\n00:15:38.872 --> 00:15:43.755\n$j = $g\n\n283\n00:15:43.755 --> 00:15:48.820\n+ $f.\n\n284\n00:15:48.820 --> 00:15:49.740\nWe're adding numbers, right?\n\n285\n00:15:49.740 --> 00:15:51.870\nIt shouldn't matter which one comes first.\n\n286\n00:15:51.870 --> 00:15:53.402\nf is 12, g is 12.\n\n287\n00:15:53.402 --> 00:15:56.757\nIt's gonna convert to an integer,\nso I should get 24.\n\n288\n00:15:56.757 --> 00:16:00.931\nWell, g and f, still adding 12 and\n12 should still be, 24 right?\n\n289\n00:16:00.931 --> 00:16:07.484\n$j, Is 1212.\n\n290\n00:16:07.484 --> 00:16:10.070\nWhat is going on here?\n\n291\n00:16:10.070 --> 00:16:16.076\nAll right it's because of the rules\nthe way PowerShell does the dynamic types.\n\n292\n00:16:16.076 --> 00:16:17.685\nIt has rules.\n\n293\n00:16:17.685 --> 00:16:22.090\nAnd it's not just going, willy nilly\nlet's convert this into an integer and\n\n294\n00:16:22.090 --> 00:16:23.820\nsee if it works.\n\n295\n00:16:23.820 --> 00:16:25.480\nOr anything like that.\n\n296\n00:16:25.480 --> 00:16:27.450\nThere's a set of rules that it follows.\n\n297\n00:16:27.450 --> 00:16:30.260\nIn this case the integer was first.\n\n298\n00:16:30.260 --> 00:16:32.660\nAnd then I did a plus sign right?\n\n299\n00:16:32.660 --> 00:16:36.810\nAnd then I did the g which\nwas storing a string and\n\n300\n00:16:36.810 --> 00:16:37.850\nsaid all right you have an integer.\n\n301\n00:16:37.850 --> 00:16:40.570\nNow you're trying to add a string to it.\n\n302\n00:16:40.570 --> 00:16:42.980\nMost likely you're trying to do addition.\n\n303\n00:16:42.980 --> 00:16:47.340\nSo I'm gonna convert that string into an\ninteger, and allow you to do the addition.\n\n304\n00:16:47.340 --> 00:16:49.130\nAnd everything worked fine.\n\n305\n00:16:49.130 --> 00:16:51.890\nHere, we've got the string first.\n\n306\n00:16:51.890 --> 00:16:53.610\nAnd then I've got a plus sign.\n\n307\n00:16:53.610 --> 00:16:57.670\nAnd in PowerShell we can use\nthe plus sign as a concatenation,\n\n308\n00:16:57.670 --> 00:17:00.400\na way to plug two strings together.\n\n309\n00:17:00.400 --> 00:17:02.830\n&gt;&gt; I was just going to ask you about that.\n\n310\n00:17:02.830 --> 00:17:05.030\nFor rudimentary it seems to work,\n\n311\n00:17:05.030 --> 00:17:10.160\nbut then if you start including\ncharacters such as parentheses that\n\n312\n00:17:10.160 --> 00:17:13.930\nwe see with our order of operations,\nhow does the system handle that?\n\n313\n00:17:13.930 --> 00:17:14.980\n&gt;&gt; That's exactly what it's doing.\n\n314\n00:17:14.980 --> 00:17:17.940\nIt's saying alright,\nwell since the string comes first.\n\n315\n00:17:17.940 --> 00:17:20.480\nWell, what properties or\nmethods does a string have?\n\n316\n00:17:20.480 --> 00:17:22.710\nA string doesn't have addition, right?\n\n317\n00:17:22.710 --> 00:17:25.240\nA string has things like incatenation.\n\n318\n00:17:25.240 --> 00:17:29.030\nSo you must be trying to concatenate\nbecause you started with a string.\n\n319\n00:17:29.030 --> 00:17:30.380\nThis is an integer.\n\n320\n00:17:30.380 --> 00:17:35.190\nI can't concatenate an integer, so let's\nconvert it to string, cuz if we did a get\n\n321\n00:17:35.190 --> 00:17:40.080\nmethod on the integers You would see there\nis a convert to string method, right?\n\n322\n00:17:40.080 --> 00:17:41.350\nAnd so that's what it's supposed to do,\n\n323\n00:17:41.350 --> 00:17:43.420\nit's like all right\nhere's your first string.\n\n324\n00:17:43.420 --> 00:17:48.045\nAnd I'm just gonna convert f to a string,\nand we'll concatenate them.\n\n325\n00:17:48.045 --> 00:17:49.890\n&gt;&gt; [INAUDIBLE], yep.\n&gt;&gt; And I didn't put a space in there.\n\n326\n00:17:49.890 --> 00:17:52.880\nWe could do something like this, oops, no.\n\n327\n00:17:52.880 --> 00:17:54.770\nBut then that would be a little obvious,\nright?\n\n328\n00:17:54.770 --> 00:17:58.030\nIt would give away my secret of\nwhat I was trying to show you.\n\n329\n00:17:58.030 --> 00:17:58.790\n&gt;&gt; Right.\n&gt;&gt; So,\n\n330\n00:17:58.790 --> 00:18:01.630\nagain it's one of those gotchas though\nthat you have to be careful with.\n\n331\n00:18:01.630 --> 00:18:06.310\nNow the order that I'm recalling those\nvariables in could change the output\n\n332\n00:18:06.310 --> 00:18:10.180\nbecause it's changing how\nPowerShell is dynamically\n\n333\n00:18:10.180 --> 00:18:13.910\nhandling those data\ntypes in the background.\n\n334\n00:18:13.910 --> 00:18:16.050\nIt's really something that\nyou're going to have to look,\n\n335\n00:18:16.050 --> 00:18:21.750\nif we did $j.gettype open close.\n\n336\n00:18:24.070 --> 00:18:28.580\nWe see that it is a string, again because\nthat string came first, so it assumes\n\n337\n00:18:28.580 --> 00:18:32.310\nthat's what we really wanna work with,\nanything else I will try to convert.\n\n338\n00:18:32.310 --> 00:18:36.250\nNow if we were doing a subtraction\nhere instead, if we were doing, and\n\n339\n00:18:36.250 --> 00:18:37.170\nlet's just try it.\n\n340\n00:18:37.170 --> 00:18:42.373\nLet's say, let me get back down there,\nrunning out of\n\n341\n00:18:42.373 --> 00:18:47.365\nletters across my $k = $g- $f, right?\n\n342\n00:18:47.365 --> 00:18:51.859\nWell if we follow my logic\nthe string comes first so\n\n343\n00:18:51.859 --> 00:18:57.973\nit should treat everything as a string and\nlet's see what happens.\n\n344\n00:18:57.973 --> 00:19:04.870\nLet's say $k, And I get a zero.\n\n345\n00:19:04.870 --> 00:19:11.500\nWait, 12- 12 is 0, so this time it changed\nthe first one, not the second one.\n\n346\n00:19:11.500 --> 00:19:12.730\nHow come?\n\n347\n00:19:12.730 --> 00:19:14.047\nWe just said,\nif it did it to this one [CROSSTALK]\n\n348\n00:19:14.047 --> 00:19:15.479\n&gt;&gt; Right, if it works one way,\n\n349\n00:19:15.479 --> 00:19:18.190\nwhy would that rule not\napply in this situation?\n\n350\n00:19:18.190 --> 00:19:19.110\n&gt;&gt; And here's what we gotta think.\n\n351\n00:19:19.110 --> 00:19:24.130\nIt did, but it didn't work so\nit moved on to another method.\n\n352\n00:19:24.130 --> 00:19:27.580\nIf we look at the methods for string,\nlike I said up here, it says hey,\n\n353\n00:19:27.580 --> 00:19:28.900\nthis is a string.\n\n354\n00:19:28.900 --> 00:19:33.740\nThere is a method that the plus is\nthe alias for that's incadnation.\n\n355\n00:19:33.740 --> 00:19:37.430\nSo we must be wanting to convert this to\na string and we can harken them together.\n\n356\n00:19:37.430 --> 00:19:40.915\nWell, the minus is an alias for\nanything that has to do with strings.\n\n357\n00:19:40.915 --> 00:19:43.800\nThere's no method minus or string.\n\n358\n00:19:43.800 --> 00:19:48.420\nSo it says this is a string,\nthen you're giving me this minus symbol.\n\n359\n00:19:48.420 --> 00:19:51.380\nWell there is no minus method for string.\n\n360\n00:19:51.380 --> 00:19:55.400\nThen you're giving me an integer,\nI bet you're trying to do subtraction so\n\n361\n00:19:55.400 --> 00:19:58.630\nI'm gonna convert this one to an integer\nand just go ahead and subtract.\n\n362\n00:19:58.630 --> 00:20:00.120\nKnow what I'm saying?\n\n363\n00:20:00.120 --> 00:20:03.690\nIn that case so the first rule didn't\nwork but it was able to handle it.\n\n364\n00:20:03.690 --> 00:20:05.550\nIt says okay well that's not gonna work.\n\n365\n00:20:05.550 --> 00:20:06.550\nAnd let me do it this way and\n\n366\n00:20:06.550 --> 00:20:09.800\nsee if this is what the person wants,\nwhoever is writing the code.\n\n367\n00:20:09.800 --> 00:20:11.930\nAnd that's what we mean\nby dynamically typed and\n\n368\n00:20:11.930 --> 00:20:15.060\nalso why some people will say\nit's like the wild wild west.\n\n369\n00:20:15.060 --> 00:20:19.640\nYou really do have to watch and pay\nattention, you can run into some issues if\n\n370\n00:20:19.640 --> 00:20:24.680\nyou're not careful with paying attention\nto what data type you're storing.\n\n371\n00:20:24.680 --> 00:20:27.910\nYou can declare a data type.\n\n372\n00:20:27.910 --> 00:20:30.740\nLike if I do this to declare a data type\n\n373\n00:20:30.740 --> 00:20:35.640\nyou simply put your data type in\nbrackets in front of your variable name.\n\n374\n00:20:35.640 --> 00:20:39.660\nSo if I want to create a variable\nthat can only store integers right?\n\n375\n00:20:39.660 --> 00:20:41.975\nI can do open bracket int.\n\n376\n00:20:41.975 --> 00:20:45.996\n]$myInt.\n\n377\n00:20:45.996 --> 00:20:48.840\nWe'll start using something\na little better than just letters.\n\n378\n00:20:48.840 --> 00:20:54.260\nAnd we'll assign the variable or\nthe integer 6 in there, right.\n\n379\n00:20:54.260 --> 00:20:58.240\nNow if I do $myInt, I get back the 6.\n\n380\n00:20:58.240 --> 00:21:00.240\nAnd if we look at the data type for that.\n\n381\n00:21:00.240 --> 00:21:07.560\nSo we'll do $ MyINT dot get dash,\nearly format get type, get type.\n\n382\n00:21:07.560 --> 00:21:08.320\nOpen close.\n\n383\n00:21:08.320 --> 00:21:10.892\nYou'll see that it is an integer.\n\n384\n00:21:10.892 --> 00:21:12.710\nAll right?\n\n385\n00:21:12.710 --> 00:21:16.660\nAnd if I wanna do a string,\nwe'll say dollar sign string.\n\n386\n00:21:18.560 --> 00:21:21.150\nOpen bracket string closed bracket\n\n387\n00:21:23.140 --> 00:21:27.470\nmy string equal to oops!\n\n388\n00:21:27.470 --> 00:21:30.330\nAnd I forgot my dollar sign,\nstill got to have that in there.\n\n389\n00:21:39.540 --> 00:21:41.650\nDollar sign my string equal to six,\nhit enter.\n\n390\n00:21:41.650 --> 00:21:43.451\nIf I do dollar sign my string I get 6.\n\n391\n00:21:43.451 --> 00:21:46.890\nSo it almost looks like\nthere's no difference so far.\n\n392\n00:21:46.890 --> 00:21:53.169\nLet's see what happens when we try to\nadd the integer 6 with the string 6.\n\n393\n00:21:53.169 --> 00:21:58.810\nSo we'll say $total is going\n\n394\n00:21:58.810 --> 00:22:04.224\nto be equal to $ my int plus $\n\n395\n00:22:04.224 --> 00:22:09.866\nmy string and then we'll call\n\n396\n00:22:09.866 --> 00:22:15.070\nback total, and get 12.\n\n397\n00:22:15.070 --> 00:22:18.756\nIt's like well wait a second,\nyou said my string,\n\n398\n00:22:18.756 --> 00:22:22.210\nyou specifically said, it is a string.\n\n399\n00:22:22.210 --> 00:22:22.840\nRight.\n\n400\n00:22:22.840 --> 00:22:25.680\nSo that, and\nyour first thought might be it won't\n\n401\n00:22:25.680 --> 00:22:26.540\n&gt;&gt; So it can fail.\n\n402\n00:22:26.540 --> 00:22:29.790\n&gt;&gt; Yeah, it won't be able to change\nit because I told it it's a string.\n\n403\n00:22:31.060 --> 00:22:32.982\nRight?\nWell here's what you're doing when you\n\n404\n00:22:32.982 --> 00:22:34.327\ndeclare this string out here.\n\n405\n00:22:34.327 --> 00:22:39.222\nYou're saying that this variable\nitself can only store strings.\n\n406\n00:22:39.222 --> 00:22:43.779\nThat doesn't mean that once it\nresolves that variable that it can't\n\n407\n00:22:43.779 --> 00:22:49.080\nconvert the results of that resolution\ninto an integer and do math, right?\n\n408\n00:22:49.080 --> 00:22:51.940\nSo it's a little confusing at\nfirst when you think about it.\n\n409\n00:22:51.940 --> 00:22:54.790\nBut declaring a data type on a variable\n\n410\n00:22:54.790 --> 00:22:59.840\nonly controls what type of data\nI can put into that container.\n\n411\n00:22:59.840 --> 00:23:02.370\nBut once I've pulled that data\nback out of the container,\n\n412\n00:23:02.370 --> 00:23:06.020\nlike in my expression here,\nI can do whatever I want with that value.\n\n413\n00:23:06.020 --> 00:23:08.030\nThat doesn't change the container itself.\n\n414\n00:23:08.030 --> 00:23:10.440\nIt can still only store strings.\n\n415\n00:23:10.440 --> 00:23:15.196\nIf I try to do $mystring\n\n416\n00:23:15.196 --> 00:23:19.470\n= 8 Alright well, it's actually\ngoing to convert that, didn't it?\n\n417\n00:23:19.470 --> 00:23:20.080\nGosh darn it.\n\n418\n00:23:20.080 --> 00:23:21.410\nWhat's a better way to do it?\n\n419\n00:23:21.410 --> 00:23:23.285\nLet's do it by int,\nthat'll be an easy one to show you.\n\n420\n00:23:23.285 --> 00:23:29.140\n$MyInt, it's\n\n421\n00:23:29.140 --> 00:23:32.450\nsaying it only stores a string, so\neven though I didn't put that in quotes\n\n422\n00:23:32.450 --> 00:23:35.555\nit's assuming I wanted quotes\naround it and it's converting it.\n\n423\n00:23:35.555 --> 00:23:40.560\nMyInt, we declared that\ncan only store Integers.\n\n424\n00:23:42.080 --> 00:23:47.449\nAnd if I try to put the word\nMike into that container,\n\n425\n00:23:47.449 --> 00:23:51.853\nI get cannot convert Mike into an integer.\n\n426\n00:23:51.853 --> 00:23:55.500\nThis variable can only store integers, so\n\n427\n00:23:55.500 --> 00:23:59.870\nyou can't put value into that container,\nright.\n\n428\n00:23:59.870 --> 00:24:02.742\nBut again, it doesn't have anything\nto do with what I can do when I pull\n\n429\n00:24:02.742 --> 00:24:03.387\nthe value out.\n\n430\n00:24:03.387 --> 00:24:07.230\nThat's the confusing part, I think, when\nyou're first getting started with this is,\n\n431\n00:24:07.230 --> 00:24:09.537\nyou'll go through the trouble\ndeclaring these, and\n\n432\n00:24:09.537 --> 00:24:11.918\nthen all of a sudden you can\nstill do math with a string.\n\n433\n00:24:11.918 --> 00:24:12.730\n&gt;&gt; Why did I just waste my time?\n\n434\n00:24:12.730 --> 00:24:14.510\n&gt;&gt; Mary's like but why?\n\n435\n00:24:14.510 --> 00:24:19.710\nAnd the reason that is, though,\nthe reason I would still take the time\n\n436\n00:24:19.710 --> 00:24:25.370\nto declare string or int, is to prevent\nthings from breaking down the road.\n\n437\n00:24:26.440 --> 00:24:30.640\nWhat if I had a variable,\nI was accepting user input, and\n\n438\n00:24:30.640 --> 00:24:34.290\none of my variables was,\nI needed them to put their.\n\n439\n00:24:34.290 --> 00:24:39.770\nI don't know, I needed to put their\nage in there, something like that,\n\n440\n00:24:39.770 --> 00:24:44.330\nand I was gonna do some math with it\nlater on, or something like that?\n\n441\n00:24:44.330 --> 00:24:48.700\nAnd if I didn't declare a data type,\ninstead of putting their age,\n\n442\n00:24:48.700 --> 00:24:49.570\nthey could put their name.\n\n443\n00:24:49.570 --> 00:24:50.960\nThey could be off by one box and\n\n444\n00:24:50.960 --> 00:24:54.760\nmistakenly put their name in there,\nand PowerShell would accept it.\n\n445\n00:24:54.760 --> 00:24:58.270\nIf I declare that as an integer variable,\nand\n\n446\n00:24:58.270 --> 00:25:01.590\nthey try to put name in there,\nit's gonna break right then and there.\n\n447\n00:25:01.590 --> 00:25:04.140\nI can find that error,\nand I can prompt them.\n\n448\n00:25:04.140 --> 00:25:07.600\nI can say hey,\nplease input a numeric value for\n\n449\n00:25:07.600 --> 00:25:10.020\nyour age instead of putting\nyour name in there.\n\n450\n00:25:10.020 --> 00:25:13.340\nRather than waiting for taking the data,\n\n451\n00:25:13.340 --> 00:25:17.030\nand somewhere later on in the code,\nsomething breaking,\n\n452\n00:25:17.030 --> 00:25:19.850\nbecause when it tries to do math,\nthey put their name in there instead.\n\n453\n00:25:20.900 --> 00:25:23.715\nSo that's why we would still want\nto declare those data types.\n\n454\n00:25:23.715 --> 00:25:28.620\nIt's to prevent other things from\nbreaking down the road in our script.\n\n455\n00:25:28.620 --> 00:25:34.890\nAnd so we will see that as we get further\non into our scripting experience.\n\n456\n00:25:36.280 --> 00:25:40.930\nAlright, so hopefully that's a good\nlook at data types there as far as\n\n457\n00:25:40.930 --> 00:25:43.200\nhow the dynamic part is working.\n\n458\n00:25:43.200 --> 00:25:45.100\nThe last think I want to\ntalk about is strings.\n\n459\n00:25:45.100 --> 00:25:48.580\nIt is important that we understand\nhow to work with strings.\n\n460\n00:25:48.580 --> 00:25:49.926\nAnd the confusing thing, Cherokee,\n\n461\n00:25:49.926 --> 00:25:51.279\none of the things I think we-\n&gt;&gt; I know,\n\n462\n00:25:51.279 --> 00:25:53.500\nI was hoping you could shed\nsome light on this problem.\n\n463\n00:25:53.500 --> 00:25:56.730\nI've always wondered, what's\nthe difference between a double quote and\n\n464\n00:25:56.730 --> 00:25:57.630\na single quote?\n\n465\n00:25:57.630 --> 00:25:59.530\nSo Mike, what's the difference?\n\n466\n00:25:59.530 --> 00:26:00.885\n&gt;&gt; It's an extra quotemark.\n\n467\n00:26:00.885 --> 00:26:02.970\n&gt;&gt; [LAUGH]\n&gt;&gt; There's either one, or there's two.\n\n468\n00:26:02.970 --> 00:26:04.540\n&gt;&gt; Okay, that's all, then.\n\n469\n00:26:04.540 --> 00:26:05.260\nGood.\n\n470\n00:26:05.260 --> 00:26:06.230\n&gt;&gt; Yeah, that's it.\n\n471\n00:26:06.230 --> 00:26:07.380\nNo, that's a great question.\n\n472\n00:26:07.380 --> 00:26:09.910\nAnd it's one that we all have\nwhen we're working with this.\n\n473\n00:26:09.910 --> 00:26:15.080\nAnd in PowerShell the rule of thumb from\nall the ones you read in the forums,\n\n474\n00:26:15.080 --> 00:26:17.650\nin the blogs, The Scripting Guy and\nthings like that.\n\n475\n00:26:17.650 --> 00:26:19.290\nThey're gonna tell you\nthat the rule of thumb is,\n\n476\n00:26:19.290 --> 00:26:21.990\nalways use single quotes in PowerShell.\n\n477\n00:26:21.990 --> 00:26:26.050\nI will tell you that really both of\nthem work, but there's a subtle, but yet\n\n478\n00:26:26.050 --> 00:26:30.780\na very, very important difference\nbetween when I use single quotes,\n\n479\n00:26:30.780 --> 00:26:32.760\nversus double quotes.\n\n480\n00:26:32.760 --> 00:26:35.130\nSingle quotes versus double quotes.\n\n481\n00:26:35.130 --> 00:26:35.870\nWe can do that there.\n\n482\n00:26:35.870 --> 00:26:37.290\n&gt;&gt; Did you practice that before the show?\n\n483\n00:26:37.290 --> 00:26:38.590\n&gt;&gt; Yes, I did.\nI had to get that right.\n\n484\n00:26:38.590 --> 00:26:42.083\nI didn't want to go like two on side and\none on the other.\n\n485\n00:26:42.083 --> 00:26:43.387\n&gt;&gt; [LAUGH]\n&gt;&gt; They'd be like wait,\n\n486\n00:26:43.387 --> 00:26:44.400\nwhat the heck is he doing?\n\n487\n00:26:44.400 --> 00:26:46.860\nSo when we talk about double quotes,\n\n488\n00:26:46.860 --> 00:26:50.560\nthis is what we refer to\nas an expandable string.\n\n489\n00:26:50.560 --> 00:26:55.280\nWhen we do single quotes we're talking\nabout what's known as a literal string.\n\n490\n00:26:56.380 --> 00:26:58.600\nAnd let's see the difference.\n\n491\n00:26:58.600 --> 00:27:01.756\nWe should have a couple of\nvariables I can still use.\n\n492\n00:27:01.756 --> 00:27:06.230\nLet's see, $A is 8.\n\n493\n00:27:06.230 --> 00:27:09.360\nActually, let's just start over.\n\n494\n00:27:09.360 --> 00:27:10.433\n&gt;&gt; Yeah, let's create new ones.\n\n495\n00:27:10.433 --> 00:27:12.180\n&gt;&gt; Okay all right.\n\n496\n00:27:12.180 --> 00:27:14.598\n&gt;&gt; I certainly won't be able\nto recall all the ones.\n\n497\n00:27:14.598 --> 00:27:15.455\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH]\n\n498\n00:27:15.455 --> 00:27:16.812\n&gt;&gt; I can't, either.\n\n499\n00:27:16.812 --> 00:27:19.054\nI was just going to type\nthem all out again.\n\n500\n00:27:19.054 --> 00:27:19.931\nSo let's do this.\n\n501\n00:27:19.931 --> 00:27:25.510\nIf we're gonna do an experiment with,\nlet's say, a dollar sign.\n\n502\n00:27:26.850 --> 00:27:31.250\nI want to do something\nshorter than that though.\n\n503\n00:27:31.250 --> 00:27:32.036\nI'll just say my name.\n\n504\n00:27:32.036 --> 00:27:41.469\nRight, $myname = Mike.\n\n505\n00:27:41.469 --> 00:27:45.820\nSo now, $myname = Mike.\n\n506\n00:27:45.820 --> 00:27:47.080\nSo far, so good.\n\n507\n00:27:47.080 --> 00:27:50.760\nNow what I want to do is,\n\n508\n00:27:50.760 --> 00:27:56.280\nI'm gonna say, in single quotes,\n\n509\n00:27:56.280 --> 00:28:01.064\nthe value of $myname is, $,\n\n510\n00:28:01.064 --> 00:28:05.296\noops, I can't spell, and\n\n511\n00:28:05.296 --> 00:28:09.935\nthat's the number lock key.\n\n512\n00:28:09.935 --> 00:28:12.456\n$myname and my quote.\n\n513\n00:28:12.456 --> 00:28:14.409\nAnd I hit Enter.\n\n514\n00:28:14.409 --> 00:28:18.360\nAnd what you'll see is,\nwhen we say it's a literal string,\n\n515\n00:28:18.360 --> 00:28:23.680\nthat means whatever is inside those single\nquotes is exactly what you're gonna get.\n\n516\n00:28:23.680 --> 00:28:29.380\nSo it didn't convert this $myName\ninto the actual value, right?\n\n517\n00:28:29.380 --> 00:28:34.292\nIt just reprinted $myName as $myName.\n\n518\n00:28:34.292 --> 00:28:35.290\n&gt;&gt; Got it.\n\n519\n00:28:35.290 --> 00:28:35.930\n&gt;&gt; Okay?\n\n520\n00:28:35.930 --> 00:28:37.940\nSo that's a literal string.\n\n521\n00:28:37.940 --> 00:28:39.720\nNow let's look at expandable strings.\n\n522\n00:28:39.720 --> 00:28:45.890\nWe're gonna take that same one, we're\ngonna change that to double quotes, oops.\n\n523\n00:28:45.890 --> 00:28:48.020\nNot triple quotes, double quotes.\n\n524\n00:28:48.020 --> 00:28:49.780\nAnd you can already see\na subtle difference here.\n\n525\n00:28:49.780 --> 00:28:52.120\nThe coloring looks a little bit different.\n\n526\n00:28:53.130 --> 00:28:57.110\nAnd if we hit Enter, look at that.\n\n527\n00:28:57.110 --> 00:29:00.860\nSo anytime PowerShell sees double quotes,\n\n528\n00:29:00.860 --> 00:29:05.740\ninside those double quotes,\nit will attempt to resolve variables.\n\n529\n00:29:05.740 --> 00:29:06.880\nOr expressions, for that matter.\n\n530\n00:29:06.880 --> 00:29:11.730\nIf I had math going on here, like,\nlet's do, let's see, let's see.\n\n531\n00:29:11.730 --> 00:29:13.240\nDot dot dot.\n\n532\n00:29:13.240 --> 00:29:17.890\n&gt;&gt; I feel like the single quotes\nare little force fields and\n\n533\n00:29:17.890 --> 00:29:19.750\nthey're protecting what's inside there.\n\n534\n00:29:19.750 --> 00:29:21.215\n&gt;&gt; Hey that's a good way to look at it.\n\n535\n00:29:21.215 --> 00:29:22.380\n&gt;&gt; [LAUGH]\n&gt;&gt; The answer\n\n536\n00:29:22.380 --> 00:29:26.118\nis dollar sign open parenthesis $A+$B.\n\n537\n00:29:26.118 --> 00:29:30.710\nI can't remember what we\nhave in those variables.\n\n538\n00:29:30.710 --> 00:29:32.580\nHopefully it's something that'll work.\n\n539\n00:29:32.580 --> 00:29:34.930\nAll right, and got to worry about syntax.\n\n540\n00:29:34.930 --> 00:29:39.290\nAll right, so here I've got double quotes,\nand I've got an expression inside there.\n\n541\n00:29:39.290 --> 00:29:45.247\nI hit Enter, and you'll see that it\ntook that $ sign and resolved this.\n\n542\n00:29:45.247 --> 00:29:49.354\nIt said, okay, $A is actually 8,\n$B is actually 8.\n\n543\n00:29:49.354 --> 00:29:53.050\nThis expression then is 8 plus 8,\nwhich is 16.\n\n544\n00:29:53.050 --> 00:29:54.732\nAnd it printed out 16.\n\n545\n00:29:54.732 --> 00:29:57.588\nNot $A plus $B or anything like that.\n\n546\n00:29:57.588 --> 00:29:59.440\nThat's the double quote.\n\n547\n00:29:59.440 --> 00:30:03.870\nThe double quotes are those\nexpandable string.\n\n548\n00:30:03.870 --> 00:30:06.640\nBut in the end we really didn't\nget what I wanted, did we?\n\n549\n00:30:06.640 --> 00:30:09.400\nNowhere does it say that the value of.\n\n550\n00:30:09.400 --> 00:30:12.960\nI was really trying to say\nthe value of $myName is Mike.\n\n551\n00:30:12.960 --> 00:30:14.200\n&gt;&gt; You wanted Mike.\n\n552\n00:30:14.200 --> 00:30:16.790\n&gt;&gt; One time, the first one with\nthe literal strings, well,\n\n553\n00:30:16.790 --> 00:30:18.860\nit just showed me\nthe variable name both times.\n\n554\n00:30:18.860 --> 00:30:20.590\nIt said, I don't see variables.\n\n555\n00:30:20.590 --> 00:30:24.700\nI see no variables, I got those force\nfields around it, as Cherokee says.\n\n556\n00:30:24.700 --> 00:30:29.240\nNow the second one, it resolved both of\nthem and said, hey there's a variable.\n\n557\n00:30:29.240 --> 00:30:31.400\nI'm gonna put the variable\nvalue instead of the name.\n\n558\n00:30:31.400 --> 00:30:32.570\nThere's another variable.\n\n559\n00:30:32.570 --> 00:30:35.440\nI'm gonna put the value\ninstead of the name.\n\n560\n00:30:35.440 --> 00:30:38.090\nIt did it, but\nI get the value of Mike is Mike.\n\n561\n00:30:38.090 --> 00:30:39.000\nThat doesn't help me out either.\n\n562\n00:30:40.020 --> 00:30:43.790\nSo what we have to understand is,\nthere is an escape character.\n\n563\n00:30:43.790 --> 00:30:48.960\nAnd the escape character used with inside\nthe expandable strings will prevent\n\n564\n00:30:48.960 --> 00:30:54.712\nPowerShell from actually resolving\nthe variable into the value.\n\n565\n00:30:54.712 --> 00:30:59.296\n[COUGH] And\nthe escape character is the back tick, or\n\n566\n00:30:59.296 --> 00:31:04.540\nthe accent, or the grave, or the-\n&gt;&gt; We're gonna have this discussion again?\n\n567\n00:31:04.540 --> 00:31:05.050\n&gt;&gt; Nah, no.\n&gt;&gt; [LAUGH]\n\n568\n00:31:05.050 --> 00:31:05.960\n&gt;&gt; No we're just gonna go\n\n569\n00:31:05.960 --> 00:31:06.800\nwith it, all right?\n\n570\n00:31:06.800 --> 00:31:08.725\nIt's the tilde without the shift.\n\n571\n00:31:08.725 --> 00:31:10.610\n&gt;&gt; [LAUGH]\n&gt;&gt; No we know it's the grave,\n\n572\n00:31:10.610 --> 00:31:12.880\nour chatroom filled us in last night,\nright?\n\n573\n00:31:12.880 --> 00:31:15.240\n&gt;&gt; Yes. [LAUGH] &gt;&gt; They corrected us so\nwe know what that is now.\n\n574\n00:31:15.240 --> 00:31:16.270\nAll right, so we can do that.\n\n575\n00:31:16.270 --> 00:31:17.790\nAnd I know it's really hard to see.\n\n576\n00:31:17.790 --> 00:31:19.540\nThat's not a single quote.\n\n577\n00:31:19.540 --> 00:31:22.490\nThat's not my right pinky.\n\n578\n00:31:22.490 --> 00:31:25.760\nThat's my left pinky up there on\nthe number row underneath the tilde there,\n\n579\n00:31:25.760 --> 00:31:28.150\nright above your Tab key.\n\n580\n00:31:28.150 --> 00:31:29.100\nLet's see what that does.\n\n581\n00:31:32.087 --> 00:31:36.810\nLook, now I've got the value\nof $myName is Mike.\n\n582\n00:31:36.810 --> 00:31:40.740\nSo that little back tick\nescaped the dollar sign.\n\n583\n00:31:40.740 --> 00:31:41.960\n&gt;&gt; Tiny, yet powerful.\n\n584\n00:31:41.960 --> 00:31:44.035\n&gt;&gt; I know, it really, really is.\n\n585\n00:31:44.035 --> 00:31:47.250\n&gt;&gt; [LAUGH]\n&gt;&gt; It took away the special meaning\n\n586\n00:31:47.250 --> 00:31:48.650\nof the dollar sign.\n\n587\n00:31:48.650 --> 00:31:52.050\nSo now the dollar sign is no\nlonger a variable indicator.\n\n588\n00:31:52.050 --> 00:31:53.780\nIt's just a dollar sign, alright?\n\n589\n00:31:53.780 --> 00:31:54.960\nAnd you need this a lot.\n\n590\n00:31:54.960 --> 00:31:58.190\nAny time you need to use a character\nthat's a reserved character within\n\n591\n00:31:58.190 --> 00:32:01.670\nPowerShell, and you want to\nprint the literal character, and\n\n592\n00:32:01.670 --> 00:32:06.720\nnot let it take on its special meaning,\nyou're gonna have to use that back tick.\n\n593\n00:32:06.720 --> 00:32:08.790\nThat is the escape character.\n\n594\n00:32:08.790 --> 00:32:10.780\nSo that is how we work with those strings,\nand\n\n595\n00:32:10.780 --> 00:32:15.310\nwe see that there is expandable strings,\nor the double quotes.\n\n596\n00:32:15.310 --> 00:32:19.000\nThat way, it's gonna resolve variables and\nexpressions and give you the results.\n\n597\n00:32:19.000 --> 00:32:22.670\nYou've got the literal strings,\nwhich are these single quote marks, and\n\n598\n00:32:22.670 --> 00:32:26.970\nthen you have the back tick or\nthe grave, which is going to be a way to\n\n599\n00:32:26.970 --> 00:32:31.010\nescape special characters\nwithin our expandable strings.\n\n600\n00:32:31.010 --> 00:32:35.084\nAnd hopefully that will get us a good\nstart to understanding variables,\n\n601\n00:32:35.084 --> 00:32:40.350\nhow we're gonna be able to use those as we\nprogress to learning how to write scripts.\n\n602\n00:32:40.350 --> 00:32:42.120\n&gt;&gt; Well I feel enlightened here, Mike.\n\n603\n00:32:42.120 --> 00:32:43.110\nYou definitely rock.\n\n604\n00:32:43.110 --> 00:32:44.340\nThank you for sharing that with us.\n\n605\n00:32:44.340 --> 00:32:45.920\nAnd thank you for joining us, but\n\n606\n00:32:45.920 --> 00:32:48.270\nyou don't want to miss what\nwe have coming up next.\n\n607\n00:32:48.270 --> 00:32:50.540\nI've been your host, Cherokee Boose,\n&gt;&gt; And I'm Mike Rodrick.\n\n608\n00:32:50.540 --> 00:32:53.336\n&gt;&gt; See you next time here on ITPRO.TV\n\n609\n00:32:53.336 --> 00:32:59.514\n[MUSIC]\n\n610\n00:32:59.514 --> 00:33:03.017\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "241898768"
        },
        {
          "description": "This episode covers the use of arrays in PowerShell. You will learn how to create arrays and store objects in arrays. You will also see how to retrieve objects stored in an array.",
          "length": "2391",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-2-1-arrays-110817.00_39_38_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-2-1-arrays-110817.00_39_38_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-2-1-arrays-110817.00_39_38_11.Still001-sm.jpg",
          "title": "Arrays",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:06.669\nWelcome to ITProTV,\nI'm your host Don Pezet [CROSSTALK]\n\n2\n00:00:06.669 --> 00:00:08.416\n[MUSIC]\n\n3\n00:00:08.416 --> 00:00:11.506\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.506 --> 00:00:14.347\n&gt;&gt; Thanks for joining us here at\nyour PowerShell Scripting Series.\n\n5\n00:00:14.347 --> 00:00:15.930\nI'm your show host Cherokee Boose.\n\n6\n00:00:15.930 --> 00:00:18.785\nAnd today we'll be\ntaking a look at arrays.\n\n7\n00:00:18.785 --> 00:00:22.109\nBack in studios with us today,\nwe have Mr. Mike Rodrick.\n\n8\n00:00:22.109 --> 00:00:24.569\nAnd I'm hoping he can\nexplain what an array is and\n\n9\n00:00:24.569 --> 00:00:26.675\nhow we can use it here within PowerShell.\n\n10\n00:00:26.675 --> 00:00:27.289\n&gt;&gt; Me too.\n\n11\n00:00:27.289 --> 00:00:28.845\n[LAUGH]\n&gt;&gt; [LAUGH] Right?\n\n12\n00:00:28.845 --> 00:00:31.020\n&gt;&gt; That's what I'm here for\nright, so I'd better be able to.\n\n13\n00:00:31.020 --> 00:00:33.789\nBut all kidding aside,\nhello everybody, I'm glad to be here.\n\n14\n00:00:33.789 --> 00:00:35.136\nThanks for having me back, Cherokee.\n\n15\n00:00:35.136 --> 00:00:37.386\nAnd yeah, we're gonna be\ntalking about arrays, right?\n\n16\n00:00:37.386 --> 00:00:41.390\nWe've done in a couple of episodes,\nwe've looked at working with variables,\n\n17\n00:00:41.390 --> 00:00:43.673\nwe talked about what they are, containers.\n\n18\n00:00:43.673 --> 00:00:49.307\nWe also talked about how PowerShell\nis a dynamic type scripting language.\n\n19\n00:00:49.307 --> 00:00:55.983\nIn other words, we don't have to strongly\ndeclare our variable type, right?\n\n20\n00:00:55.983 --> 00:00:59.755\nI can create a variable, put an integer\nin there, I can put a string in there,\n\n21\n00:00:59.755 --> 00:01:02.322\nPowerShell will do everything\nit can to figure out,\n\n22\n00:01:02.322 --> 00:01:02.957\n&gt;&gt; A little flexible there.\n\n23\n00:01:02.957 --> 00:01:05.849\n&gt;&gt; Yeah, it's very nice,\nit makes much less work on me.\n\n24\n00:01:05.849 --> 00:01:08.269\nIt can cause problems down the road.\n\n25\n00:01:08.269 --> 00:01:11.197\nIt is something that we do\nhave to be conscious of.\n\n26\n00:01:11.197 --> 00:01:14.067\nAnd typically the way I,\nand this is just me, but\n\n27\n00:01:14.067 --> 00:01:18.477\nthe way I usually do things is as I'm\nwriting scripts and creating things,\n\n28\n00:01:18.477 --> 00:01:22.203\na lot of times I won't strongly type it,\nI won't go and put it.\n\n29\n00:01:22.203 --> 00:01:24.962\nBecause I'm changing things very fast and\nI just wanna whip it out and\n\n30\n00:01:24.962 --> 00:01:26.209\nkinda work out the framework.\n\n31\n00:01:26.209 --> 00:01:30.548\nBut if it's gonna go into production,\nif it's something that I'm gonna use,\n\n32\n00:01:30.548 --> 00:01:33.593\nif it's something I'm gonna\nshare with other people or\n\n33\n00:01:33.593 --> 00:01:36.703\nsomething that end users\nare gonna be interacting with,\n\n34\n00:01:36.703 --> 00:01:39.857\nI definitely wanna go back at\nsome point and change that.\n\n35\n00:01:39.857 --> 00:01:43.862\nSo that they can't mistakenly put a string\nwhere I'm expecting an integer and\n\n36\n00:01:43.862 --> 00:01:44.842\nthings like that.\n\n37\n00:01:44.842 --> 00:01:47.489\nSo even though we might not\ndo that all the time in here.\n\n38\n00:01:47.489 --> 00:01:51.330\nIt's a good idea, if it's gonna be in\nproduction use to strongly type it.\n\n39\n00:01:51.330 --> 00:01:52.453\nIt just prevents a lot of issues.\n\n40\n00:01:52.453 --> 00:01:55.750\n&gt;&gt; And you're just saying by specifically\ndeclaring that as the string, or\n\n41\n00:01:55.750 --> 00:01:58.586\nin certain situations where\nyou're using the single quotes.\n\n42\n00:01:58.586 --> 00:01:59.982\n&gt;&gt; [LAUGH] Yes, exactly.\n\n43\n00:01:59.982 --> 00:02:03.308\nSo that's something we can always\ngo back and fix and change and\n\n44\n00:02:03.308 --> 00:02:04.763\nmake production quality.\n\n45\n00:02:04.763 --> 00:02:07.672\nBecause we're not doing a lot of error\nchecking and things like that either.\n\n46\n00:02:07.672 --> 00:02:11.062\nAnd those are other things that we would\nwant to eventually include any type of\n\n47\n00:02:11.062 --> 00:02:13.317\nscripts that we're gonna\nbe using in production.\n\n48\n00:02:13.317 --> 00:02:17.508\nAll right, but anyway, so back to array,\nso we talked about the different variable\n\n49\n00:02:17.508 --> 00:02:20.649\ntypes in strings, boule,\ndouble floats, things like that.\n\n50\n00:02:20.649 --> 00:02:24.561\nAnd we mentioned arrays and\nhash tables as types of variables and\n\n51\n00:02:24.561 --> 00:02:28.410\nwhile instance strings are pretty\nstraight forward, right?\n\n52\n00:02:28.410 --> 00:02:29.604\nI'm gonna store it in to draw a number.\n\n53\n00:02:29.604 --> 00:02:34.350\nWe're all familiar with working with that\nor doing strings, putting text in there.\n\n54\n00:02:34.350 --> 00:02:37.690\nArrays and hash tables kinda\nwarrant a little deeper dive and\n\n55\n00:02:37.690 --> 00:02:39.536\nthat's what I wanted to do here.\n\n56\n00:02:39.536 --> 00:02:44.022\nBecause they're a little more\ncomplex than a standard variable and\n\n57\n00:02:44.022 --> 00:02:45.679\nwe use them all the time.\n\n58\n00:02:45.679 --> 00:02:48.539\nIt's something that you're going\nto see if you're writing scripts.\n\n59\n00:02:48.539 --> 00:02:51.327\nI might have a list of computer names and\n\n60\n00:02:51.327 --> 00:02:55.054\nI wanna do something to each\none of those computers.\n\n61\n00:02:55.054 --> 00:02:59.563\nWell, rather than have separate\ncommands for each computer,\n\n62\n00:02:59.563 --> 00:03:03.232\nI can use an array to store\na list of computer names.\n\n63\n00:03:03.232 --> 00:03:06.124\nAnd then cycle through that array and\nsay, hey, for\n\n64\n00:03:06.124 --> 00:03:09.961\neach one of these names of computers\nin this array, do this process.\n\n65\n00:03:09.961 --> 00:03:13.279\nHey, do web server 1, then do web\nserver 2, then do web server 3,\n\n66\n00:03:13.279 --> 00:03:17.138\nor do client 1, then client 2,\nthen client 3, up to client 200, right?\n\n67\n00:03:17.138 --> 00:03:17.791\nIt'll be a lot easier.\n\n68\n00:03:17.791 --> 00:03:20.956\nSo we work with arrays a lot.\n\n69\n00:03:20.956 --> 00:03:23.322\n&gt;&gt; Well, you mentioned client 200 and\n\n70\n00:03:23.322 --> 00:03:28.134\nif I'm working in an environment that\nhas 10 servers I can remember them all.\n\n71\n00:03:28.134 --> 00:03:28.806\n&gt;&gt; Yes.\n\n72\n00:03:28.806 --> 00:03:33.443\n&gt;&gt; And make sure that task executes for\neach one, but when I have 200 or more and\n\n73\n00:03:33.443 --> 00:03:38.372\nI'm even using like typing them all out or\neven using like comma separated values.\n\n74\n00:03:38.372 --> 00:03:41.109\nI might lose one along the way,\nif I have to type that in or\n\n75\n00:03:41.109 --> 00:03:42.639\nput that in every single time.\n\n76\n00:03:42.639 --> 00:03:45.820\nSo this is kind of like removing\nsome of that human error.\n\n77\n00:03:45.820 --> 00:03:46.762\n&gt;&gt; Exactly.\n\n78\n00:03:46.762 --> 00:03:51.972\nExactly right, or if we wanna store like\nsome things return arrays of objects,\n\n79\n00:03:51.972 --> 00:03:53.856\nlike when I do a get process.\n\n80\n00:03:53.856 --> 00:03:56.271\nWe don't return just one process, right?\n\n81\n00:03:56.271 --> 00:03:59.570\nWe return all the processes that\nare running on that system,\n\n82\n00:03:59.570 --> 00:04:03.711\neach one being it's own object and now I\ncan have an array of those objects and\n\n83\n00:04:03.711 --> 00:04:06.900\nI can work with them individually or\nwhatever I need to do.\n\n84\n00:04:06.900 --> 00:04:10.166\nSo yeah, we'll definitely see arrays\na lot and hash tables a lot and\n\n85\n00:04:10.166 --> 00:04:12.188\nI'm gonna throw in order dictionaries.\n\n86\n00:04:12.188 --> 00:04:15.464\nWe did mention, well, we'll talk about\nthat when we get to hash tables.\n\n87\n00:04:15.464 --> 00:04:15.975\n&gt;&gt; Okay.\n\n88\n00:04:15.975 --> 00:04:17.267\n&gt;&gt; Let's focus on arrays for now.\n\n89\n00:04:17.267 --> 00:04:19.379\nAll right, so\nlet's start by talking about,\n\n90\n00:04:19.379 --> 00:04:21.666\nlet's refresh from our\nworking with variables.\n\n91\n00:04:21.666 --> 00:04:25.709\nRemember, an array Is, or a variable\nitself is just a container, right?\n\n92\n00:04:25.709 --> 00:04:29.090\nIt's a memory location where I\ncan store a value, I give it\n\n93\n00:04:29.090 --> 00:04:33.312\nan easy to recall name and then I can\nrecall that value whenever I need it.\n\n94\n00:04:35.793 --> 00:04:39.743\nArrays are just containers,\njust like a normal variable would be,\n\n95\n00:04:39.743 --> 00:04:43.086\nexcept they have multiple\nslots within that container.\n\n96\n00:04:43.086 --> 00:04:46.437\nI know years ago when I was-\n&gt;&gt; So we're talking of, I'm sorry.\n\n97\n00:04:46.437 --> 00:04:49.120\n&gt;&gt; Yeah.\n&gt;&gt; TSA box verses Bento box.\n\n98\n00:04:49.120 --> 00:04:50.130\n&gt;&gt; Yes, right?\n\n99\n00:04:50.130 --> 00:04:50.653\n&gt;&gt; Okay.\n\n100\n00:04:50.653 --> 00:04:52.270\n&gt;&gt; Where the Bento box has\nthe individual compartments in it.\n\n101\n00:04:52.270 --> 00:04:52.944\n&gt;&gt; [LAUGH] Okay.\n\n102\n00:04:52.944 --> 00:04:54.283\n&gt;&gt; Yeah, exactly, I like that analogy.\n\n103\n00:04:54.283 --> 00:04:57.091\nI was just gonna say years ago\nwhen I was getting into this,\n\n104\n00:04:57.091 --> 00:04:59.399\nthe analogy was always the egg carton,\nright?\n\n105\n00:04:59.399 --> 00:04:59.946\n&gt;&gt; Okay.\n\n106\n00:04:59.946 --> 00:05:02.816\n&gt;&gt; Where the carton typically\nhas a dozen little slots in\n\n107\n00:05:02.816 --> 00:05:04.292\nthere to hold a dozen eggs.\n\n108\n00:05:04.292 --> 00:05:07.988\nAnd, so, that would be my array,\nit's the carton itself, and\n\n109\n00:05:07.988 --> 00:05:12.317\nthen each one of those slots would be\nknown as an element within that array.\n\n110\n00:05:12.317 --> 00:05:12.832\n&gt;&gt; Okay.\n\n111\n00:05:12.832 --> 00:05:15.340\n&gt;&gt; And, I can have an array of one,\nreally,\n\n112\n00:05:15.340 --> 00:05:19.141\nyou can have an array with just\none element in it, or multiple,\n\n113\n00:05:19.141 --> 00:05:23.472\nyou can have 2, 5, 20, 100,\nit just depends on what you need.\n\n114\n00:05:23.472 --> 00:05:27.291\nIt's not a fixed size thing, we can-\n&gt;&gt; Not limited to a dozen.\n\n115\n00:05:27.291 --> 00:05:28.161\n&gt;&gt; Yeah, exactly.\n\n116\n00:05:28.161 --> 00:05:29.313\n&gt;&gt; [LAUGH]\n&gt;&gt; We're not stuck with a dozen.\n\n117\n00:05:29.313 --> 00:05:31.103\nWe can do more than a dozen.\n\n118\n00:05:31.103 --> 00:05:32.767\nWe could do a baker's dozen if we want.\n\n119\n00:05:32.767 --> 00:05:37.209\nAll right, so let's see, I'll tell you\ndeclaring an array is the easiest thing,\n\n120\n00:05:37.209 --> 00:05:39.749\nbecause it's just like\ndeclaring a variable,\n\n121\n00:05:39.749 --> 00:05:42.561\nexcept you assign more than\none value to it, right?\n\n122\n00:05:42.561 --> 00:05:45.858\nNormally when we assign a variable,\nwe'll just say,\n\n123\n00:05:45.858 --> 00:05:48.953\nlike we did in the early episodes $a=5,\nright?\n\n124\n00:05:48.953 --> 00:05:50.745\nThat created a standard variable.\n\n125\n00:05:50.745 --> 00:05:54.932\nIf I would have said $a=5,10,\nwell now I'm saying hey,\n\n126\n00:05:54.932 --> 00:06:00.067\nstore two variable, two values in\nthat variable and the PowerShell says\n\n127\n00:06:00.067 --> 00:06:04.895\nyou've got more than one value to store,\nwe're gonna create an array.\n\n128\n00:06:04.895 --> 00:06:05.747\n&gt;&gt; Okay.\n\n129\n00:06:05.747 --> 00:06:09.657\n&gt;&gt; All right, so that's really the easiest\nway or one way we can declare variables.\n\n130\n00:06:09.657 --> 00:06:11.963\nSo let's take a look at my screen here and\nsee what we got.\n\n131\n00:06:11.963 --> 00:06:15.845\nNow, in order to save a little typing plus\nto give you guys something to work with as\n\n132\n00:06:15.845 --> 00:06:18.625\nyou're studying,\nyou can get a copy of these show notes.\n\n133\n00:06:18.625 --> 00:06:22.755\nI've kind of started writing things out in\nmy script pane so that we can just go and\n\n134\n00:06:22.755 --> 00:06:23.556\nexecute them.\n\n135\n00:06:23.556 --> 00:06:26.828\nSpend a little more time looking at\nthe results than watching Mike type all\n\n136\n00:06:26.828 --> 00:06:27.371\nof this in.\n\n137\n00:06:27.371 --> 00:06:28.625\n&gt;&gt; [LAUGH] Yehey.\n\n138\n00:06:28.625 --> 00:06:31.483\n&gt;&gt; And as we get further on into our\nepisodes throughout this series,\n\n139\n00:06:31.483 --> 00:06:33.124\nthe typing is gonna get more and more.\n\n140\n00:06:33.124 --> 00:06:37.097\nSo I figured hey, let's go ahead and\nstart now, working with our script thing.\n\n141\n00:06:37.097 --> 00:06:39.656\nAll right, so this first line here,\n\n142\n00:06:39.656 --> 00:06:45.275\nremember one of the great things about the\nISE is I can execute the entire script or\n\n143\n00:06:45.275 --> 00:06:50.005\njust part of the script using F8 or\nmy little tiny play button here.\n\n144\n00:06:50.005 --> 00:06:52.791\nAnd you don't actually have\nto select the entire line.\n\n145\n00:06:52.791 --> 00:06:56.614\nI mean you can, you can click out there\non your line numbers to select the line.\n\n146\n00:06:56.614 --> 00:07:01.329\nYou can try to highlight and sometimes I\ndo still highlight because if you have a,\n\n147\n00:07:01.329 --> 00:07:06.064\nyou can actually highlight part of a line\nand just execute that if it makes sense.\n\n148\n00:07:06.064 --> 00:07:07.295\nI'll show you an example later on.\n\n149\n00:07:07.295 --> 00:07:10.904\nBut just to understand that really,\nyour cursor just has to be on that line.\n\n150\n00:07:10.904 --> 00:07:15.230\nThat makes that line active, and\nif I hit F8, it will run just that line.\n\n151\n00:07:15.230 --> 00:07:19.270\nYou can also select multiple lines and\nhit F8 or click my little play button.\n\n152\n00:07:19.270 --> 00:07:22.014\n&gt;&gt; Okay, I know you said you'll\ncover that but looking at that 20,\n\n153\n00:07:22.014 --> 00:07:24.563\nlike so if I wanted to omit 21\nfrom that particular command,\n\n154\n00:07:24.563 --> 00:07:26.245\nyou could just not highlight that part?\n\n155\n00:07:26.245 --> 00:07:27.115\n&gt;&gt; Yeah, I could just do this.\n\n156\n00:07:27.115 --> 00:07:27.766\n&gt;&gt; Got it.\n\n157\n00:07:27.766 --> 00:07:29.511\n&gt;&gt; And leave out that comment 21.\n\n158\n00:07:29.511 --> 00:07:32.387\nAnd it would execute\njust that exactly right.\n\n159\n00:07:32.387 --> 00:07:35.905\nAll right, so this is an array\ndeclaration, I've got $a= and\n\n160\n00:07:35.905 --> 00:07:40.355\nthen I've got several values and notice\nthey're separated by a comma, right?\n\n161\n00:07:40.355 --> 00:07:42.644\nSo that's all we have to\ndo to create an array.\n\n162\n00:07:42.644 --> 00:07:46.937\nLet's see how that works, we're gonna\ngo ahead and hit F8 and run that, so\n\n163\n00:07:46.937 --> 00:07:48.427\nthere's my assignment.\n\n164\n00:07:48.427 --> 00:07:53.025\nRemember that single = is that\nassignment operator not a comparison.\n\n165\n00:07:53.025 --> 00:07:55.694\nI'm not saying is A equal to this?\n\n166\n00:07:55.694 --> 00:07:58.119\nI'm saying I wanna make A equal to this.\n\n167\n00:07:58.119 --> 00:07:59.921\nThat's the assignment operator.\n\n168\n00:07:59.921 --> 00:08:04.386\nAnd now if I want to call that array\nback I simply do it like any other,\n\n169\n00:08:04.386 --> 00:08:07.826\nI thought I had that out there,\nI do it like any other-\n\n170\n00:08:07.826 --> 00:08:08.972\n&gt;&gt; Variable?\n\n171\n00:08:08.972 --> 00:08:12.244\n&gt;&gt; Variable like I say,\ndollar sign A, and there you go,\n\n172\n00:08:12.244 --> 00:08:16.000\nyou'll see that it prints out\neach one of those values.\n\n173\n00:08:16.000 --> 00:08:16.760\nIn that array, right?\n\n174\n00:08:16.760 --> 00:08:18.190\n&gt;&gt; Cool.\n&gt;&gt; And it's that simple.\n\n175\n00:08:18.190 --> 00:08:23.190\nNow we'll take a look at different ways\nI can work with those values as we go,\n\n176\n00:08:23.190 --> 00:08:23.847\nbut let's start-\n&gt;&gt; Yeah,\n\n177\n00:08:23.847 --> 00:08:25.330\nthe next line doesn't look the same.\n\n178\n00:08:25.330 --> 00:08:26.652\n&gt;&gt; Yeah, the next one doesn't, right?\n\n179\n00:08:26.652 --> 00:08:30.090\nThis is another way that I\ncan declare an array, and\n\n180\n00:08:30.090 --> 00:08:32.830\nI can simplify it a little\nbit by using right there.\n\n181\n00:08:32.830 --> 00:08:36.270\nYou know what,\nlet's change this up a little bit.\n\n182\n00:08:36.270 --> 00:08:40.475\nLet's see if I go to my tools and\noptions and\n\n183\n00:08:40.475 --> 00:08:46.330\nI'm gonna look at my script paying tokens\nand let's take a look at operators and\n\n184\n00:08:46.330 --> 00:08:50.390\nlet's change that to where's black?\n\n185\n00:08:50.390 --> 00:08:55.440\nLet's see if that change, I can't remember\nif the periods are considered operators.\n\n186\n00:08:56.470 --> 00:08:57.030\n&gt;&gt; Yeah, there we go.\n\n187\n00:08:57.030 --> 00:08:59.250\nSo you see all my equals and my dots and\n\n188\n00:08:59.250 --> 00:09:03.740\nmy commas turn black, instead of gray\nas the default color for those guys.\n\n189\n00:09:03.740 --> 00:09:05.116\nHopefully that will make\nit a little easier for\n\n190\n00:09:05.116 --> 00:09:06.052\nyou to see out there in TV land.\n\n191\n00:09:06.052 --> 00:09:11.130\nAll right, but those two dots right there,\nthat's the range operator and\n\n192\n00:09:11.130 --> 00:09:13.940\nbasically what I'm saying is that hey,\nI want to create an array.\n\n193\n00:09:13.940 --> 00:09:17.240\nOne, two, three, four, five, six,\nseven, eight, nine, and ten or\n\n194\n00:09:17.240 --> 00:09:22.550\nrather than typing that out,\nI can simply do 1..10, all right?\n\n195\n00:09:22.550 --> 00:09:26.635\nIf we execute that and\nthen we call back $A,\n\n196\n00:09:26.635 --> 00:09:31.625\nyou'll see that I do indeed get\nan array of one through ten.\n\n197\n00:09:31.625 --> 00:09:32.553\n&gt;&gt; Cool.\n&gt;&gt; So very easy-\n\n198\n00:09:32.553 --> 00:09:33.092\n&gt;&gt; Yes.\n\n199\n00:09:33.092 --> 00:09:37.250\n&gt;&gt; If you need to do IP address ranges\nI'm thinking, and things like that, or\n\n200\n00:09:37.250 --> 00:09:38.245\ncomputer names.\n\n201\n00:09:38.245 --> 00:09:43.065\nMaybe I'm concatenating at some point and\nour computer's saying server, 01, 02, 03,\n\n202\n00:09:43.065 --> 00:09:47.055\n04 or things like that, or,\nlike I said IP address,\n\n203\n00:09:47.055 --> 00:09:52.201\na particular octed 0 through 255 So\nI can see you're\n\n204\n00:09:52.201 --> 00:09:57.980\nusing 10.0.0.1..250 or something\nlike that to represent that last.\n\n205\n00:09:57.980 --> 00:09:59.460\nSo very handy to see.\n\n206\n00:09:59.460 --> 00:10:04.330\nSo two different ways I can assign and\nyou can the letters as well, I can,\n\n207\n00:10:04.330 --> 00:10:08.620\nI don't really have an, actually I do\nhave one here but I can do strings.\n\n208\n00:10:08.620 --> 00:10:12.608\nLet's dump another line,\nwe'll watch Mike type here,\n\n209\n00:10:12.608 --> 00:10:17.450\nwe'll say $a= strings will always\ngo inside single quotes right,\n\n210\n00:10:17.450 --> 00:10:25.000\nremember creating these arrays,\nso we could say 'clo1',\n\n211\n00:10:25.000 --> 00:10:27.960\nthe individual strings in quotes,\nthe comma, notice,\n\n212\n00:10:27.960 --> 00:10:34.010\nis outside my single quote cl02,\nend my quote, comma, cl03.\n\n213\n00:10:34.010 --> 00:10:37.480\nSomething like that.\n\n214\n00:10:37.480 --> 00:10:40.500\nWe'll keep it short for the show and\n\n215\n00:10:40.500 --> 00:10:43.720\nI'll execute that, and\nthen we'll call that back.\n\n216\n00:10:45.140 --> 00:10:49.140\nAnd we'll see that I did have\nthose values stored in that array.\n\n217\n00:10:49.140 --> 00:10:51.000\nSo arrays,\nremember we've talked about this,\n\n218\n00:10:51.000 --> 00:10:54.700\nwe said that everything in\nPowerShell is an object, right?\n\n219\n00:10:54.700 --> 00:10:57.100\nAnd the array itself is an object.\n\n220\n00:10:57.100 --> 00:11:02.940\nIn fact, if we did $a gettype, okay?\n\n221\n00:11:02.940 --> 00:11:05.050\nI can see that it comes back as an object.\n\n222\n00:11:05.050 --> 00:11:08.930\nSo the array itself is an object,\nit has its own properties, methods,\n\n223\n00:11:08.930 --> 00:11:09.490\nthings like that.\n\n224\n00:11:09.490 --> 00:11:13.500\n&gt;&gt; And those elements inside\nof the array are objects also?\n\n225\n00:11:13.500 --> 00:11:14.897\n&gt;&gt; Exactly, right\n&gt;&gt; Okay [LAUGH]\n\n226\n00:11:14.897 --> 00:11:15.847\n&gt;&gt; So they are objects and\n\n227\n00:11:15.847 --> 00:11:17.702\nthat's exactly where I was going, right?\n\n228\n00:11:17.702 --> 00:11:21.058\nThey are objects as well and\nwe can, within an array,\n\n229\n00:11:21.058 --> 00:11:24.117\nwe can actually mix object types or\ndata types and\n\n230\n00:11:24.117 --> 00:11:27.713\nI don't have to stick with just letters or\njust numbers.\n\n231\n00:11:27.713 --> 00:11:28.284\n&gt;&gt; Okay.\n\n232\n00:11:28.284 --> 00:11:30.650\n&gt;&gt; Now you can strongly type an array.\n\n233\n00:11:30.650 --> 00:11:35.350\nI can declare an array with INT\nout in front of it's name and\n\n234\n00:11:35.350 --> 00:11:38.190\nthat way it would store integers only.\n\n235\n00:11:38.190 --> 00:11:41.170\nSo if I needed to strongly type but\nby default, right?\n\n236\n00:11:41.170 --> 00:11:47.380\nI can use a mix like this one here\nas an integer and a string in there.\n\n237\n00:11:47.380 --> 00:11:51.760\nSo if we mix that or\nif we run that one and I go and\n\n238\n00:11:51.760 --> 00:11:56.820\nI return $a you'll see there's\nno difference there, right?\n\n239\n00:11:56.820 --> 00:12:03.780\nSo I get both an integer and a string\nstored on the same array, all right?\n\n240\n00:12:03.780 --> 00:12:08.330\n&gt;&gt; If we specify that as an integer and\n\n241\n00:12:08.330 --> 00:12:11.730\nthen we kept client 01 in there,\nwhat would happen?\n\n242\n00:12:11.730 --> 00:12:14.340\nWould we be aware that\nwe made a mistake or?\n\n243\n00:12:14.340 --> 00:12:16.080\n&gt;&gt; Yeah, let's test it out.\n\n244\n00:12:16.080 --> 00:12:18.480\nWe should see that it\nwon't accept that value.\n\n245\n00:12:18.480 --> 00:12:21.216\nIf I say $b, and\nlet's actually do it this way.\n\n246\n00:12:21.216 --> 00:12:28.360\nLet's do, int $b is equal to,\n\n247\n00:12:28.360 --> 00:12:32.300\nand we'll just try to use\nthis same expression here.\n\n248\n00:12:35.640 --> 00:12:40.529\nI'll execute that and\nthere you'll see that it was unable\n\n249\n00:12:40.529 --> 00:12:43.736\nto convert that value to a type on int.\n\n250\n00:12:43.736 --> 00:12:45.353\n[CROSSTALK]\n&gt;&gt; Looks like a warning and\n\n251\n00:12:45.353 --> 00:12:49.010\nI'm not just like blindly thinking and\nI'm doing everything right.\n\n252\n00:12:49.010 --> 00:12:53.130\n&gt;&gt; And the whole process fails like\nif we call back $b at this point,\n\n253\n00:12:53.130 --> 00:12:54.480\nnotice there's nothing stored in there.\n\n254\n00:12:54.480 --> 00:12:56.900\nThere's no three in there either.\n\n255\n00:12:56.900 --> 00:13:00.450\nSo it didn't like, I'll put this\none in but I can't put that one in.\n\n256\n00:13:00.450 --> 00:13:01.680\nIt says all or nothing.\n\n257\n00:13:01.680 --> 00:13:04.850\nI either complete my command or\nI'm not going to complete that command.\n\n258\n00:13:06.220 --> 00:13:10.880\nAll right, so we can store multiple\ndata types within that array.\n\n259\n00:13:10.880 --> 00:13:15.000\nNow, once we get values into the array-\n&gt;&gt; We need to be able to work with them.\n\n260\n00:13:15.000 --> 00:13:19.170\nWe want to manipulate those objects, maybe\nwe want to recall them, change a value\n\n261\n00:13:19.170 --> 00:13:24.380\nthat's stored in that array, add a new\nvalue to the array, things like that.\n\n262\n00:13:24.380 --> 00:13:26.420\nSo when we work with arrays,\n\n263\n00:13:26.420 --> 00:13:30.220\nwe call the different elements based\non what's known as their index.\n\n264\n00:13:30.220 --> 00:13:35.360\nAnd the index is going to be\ntheir position within that array.\n\n265\n00:13:35.360 --> 00:13:42.640\nThe key here to remember is that indexes,\nor array indices, are zero-based.\n\n266\n00:13:42.640 --> 00:13:46.450\nIn other words, it's kind of like when we\ndeal with hard drives in computers, right?\n\n267\n00:13:46.450 --> 00:13:50.400\nWhere the first hard drive is not\nhard drive one, it's hard drive zero.\n\n268\n00:13:50.400 --> 00:13:50.950\n&gt;&gt; Okay.\n\n269\n00:13:50.950 --> 00:13:53.260\n&gt;&gt; Okay, so the first position,\n\n270\n00:13:53.260 --> 00:13:58.060\nthe first element, in my array\n&gt;&gt; Is not position one,\n\n271\n00:13:58.060 --> 00:14:00.670\nit's gonna be position zero, all right?\n\n272\n00:14:00.670 --> 00:14:04.880\nLet's take a look at that,\nlet's see what we have in $a again,\n\n273\n00:14:04.880 --> 00:14:07.250\nwe'll get two values there in $a.\n\n274\n00:14:07.250 --> 00:14:12.120\nSo if I wanna manipulate or\ncall back a particular value,\n\n275\n00:14:12.120 --> 00:14:17.100\nwhat we're gonna do Is use the brackets,\nall right.\n\n276\n00:14:17.100 --> 00:14:20.360\nSo we have dollar sign,\na, open bracket, and\n\n277\n00:14:20.360 --> 00:14:23.990\nthen I can put a index\nnumber in there like zero.\n\n278\n00:14:23.990 --> 00:14:25.060\nOkay, add a zero.\n\n279\n00:14:25.060 --> 00:14:27.030\nMake sure I didn't hit an o.\n\n280\n00:14:27.030 --> 00:14:31.000\nA zero close bracket, and\nlets see what that gives us.\n\n281\n00:14:32.470 --> 00:14:34.520\nNotice a returns the value three.\n\n282\n00:14:35.760 --> 00:14:40.930\nIf I change that to a 1,\nand we execute that,\n\n283\n00:14:40.930 --> 00:14:43.640\nI get that second position in there,\nclient01.\n\n284\n00:14:43.640 --> 00:14:47.780\n&gt;&gt; So that seems pretty easy\nwith just those two options, but\n\n285\n00:14:47.780 --> 00:14:52.880\nwhat if I had a ridiculously\n&gt;&gt; Long array or a lot of elements there,\n\n286\n00:14:52.880 --> 00:14:56.390\nis there a way I can see what that\nindex number would be or a list?\n\n287\n00:14:56.390 --> 00:14:58.570\n&gt;&gt; Well you can call back\nthe entire array, I guess.\n\n288\n00:14:58.570 --> 00:15:01.640\nLike if we took a look at this one and\nwe execute that.\n\n289\n00:15:01.640 --> 00:15:03.830\nI've got what,\nsix different values in there.\n\n290\n00:15:05.320 --> 00:15:07.860\nWe will, you could do dollar sign A.\n\n291\n00:15:09.530 --> 00:15:10.380\n&gt;&gt; If I can type.\n\n292\n00:15:10.380 --> 00:15:12.160\nAnd you can return all of them.\n\n293\n00:15:12.160 --> 00:15:15.920\nAnd then if you wanted a particular one,\n$A[4].\n\n294\n00:15:15.920 --> 00:15:17.560\nYou know what?\n\n295\n00:15:17.560 --> 00:15:22.340\nI'm gonna turn off the IntelliSense\non my console down here.\n\n296\n00:15:22.340 --> 00:15:24.850\nBecause-\n&gt;&gt; You're going off the beaten path?\n\n297\n00:15:24.850 --> 00:15:27.520\n&gt;&gt; Yeah, well, in this case I'm not\nlooking for any particular commands.\n\n298\n00:15:27.520 --> 00:15:30.720\nI don't need help typing any commands,\nso I'm just gonna turn that off.\n\n299\n00:15:30.720 --> 00:15:32.380\nI'll leave it on in the script pane.\n\n300\n00:15:32.380 --> 00:15:33.430\nBut not down in the console.\n\n301\n00:15:33.430 --> 00:15:36.040\nAnd this is something you guys\nmight wanna do sometimes as well\n\n302\n00:15:36.040 --> 00:15:38.440\nas you get a little more\nproficient with this.\n\n303\n00:15:38.440 --> 00:15:41.440\nSo I'm gonna say,\nDon't show in the console pane.\n\n304\n00:15:41.440 --> 00:15:45.990\nI'll leave it on in the script\npane up all the time, right?\n\n305\n00:15:45.990 --> 00:15:46.605\nBecause yeah.\n\n306\n00:15:46.605 --> 00:15:49.446\nWhen I'm doing things like this,\nit almost blocks what I'm typing, so\n\n307\n00:15:49.446 --> 00:15:50.805\nit gets a little bit frustrating.\n\n308\n00:15:50.805 --> 00:15:56.780\nBut as I hit Enter there, now you can\nsee I've pulled back with index 4 Right?\n\n309\n00:15:56.780 --> 00:15:58.348\nThat's actually position five.\n\n310\n00:15:58.348 --> 00:15:59.648\n&gt;&gt; Okay, so you can check it, right?\n\n311\n00:15:59.648 --> 00:16:00.553\nSo, yeah.\n\n312\n00:16:00.553 --> 00:16:02.830\n&gt;&gt; Yes, all right?\nBecause that is gonna be one, two,\n\n313\n00:16:02.830 --> 00:16:05.610\nthree, four, five, right there.\n\n314\n00:16:05.610 --> 00:16:12.030\nCuz, zero, one, two, three, four,\ngives me that fifth element in that array.\n\n315\n00:16:12.030 --> 00:16:15.210\nNow, and I think where you might have\nbeen heading to with that question was,\n\n316\n00:16:15.210 --> 00:16:18.690\ncan I start going through\neach one of those elements,\n\n317\n00:16:18.690 --> 00:16:21.900\nwe've gotta wait until we\nget into control constructs,\n\n318\n00:16:21.900 --> 00:16:24.310\nwhere we start learning about for\nloops and things like that.\n\n319\n00:16:24.310 --> 00:16:26.470\nWhere we can definitely cycle\nthrough those elements,\n\n320\n00:16:26.470 --> 00:16:29.310\nlooking a particular element,\ntrying to find it.\n\n321\n00:16:29.310 --> 00:16:32.760\nOr applying an action to\neach individual element,\n\n322\n00:16:32.760 --> 00:16:35.880\nor comparing elements,\nand things like that.\n\n323\n00:16:35.880 --> 00:16:37.850\nWe'll get into that when we\nget a little more advanced,\n\n324\n00:16:37.850 --> 00:16:39.910\nas we work through this series.\n\n325\n00:16:39.910 --> 00:16:41.530\nAll right, so\n\n326\n00:16:41.530 --> 00:16:47.210\nwe can also call back individual\nelements by using their index number.\n\n327\n00:16:47.210 --> 00:16:53.560\nAnd we simply put that inside\nthe brackets after the array name.\n\n328\n00:16:54.680 --> 00:16:56.430\nI'm sorry, there is the example,\nright there.\n\n329\n00:16:56.430 --> 00:16:59.830\nSo we put that bracket in there, and\nput our index value in there and\n\n330\n00:16:59.830 --> 00:17:01.080\nwe can retrieve that.\n\n331\n00:17:01.080 --> 00:17:03.570\nWe can also retrieve ranges of values.\n\n332\n00:17:03.570 --> 00:17:08.730\nWe can use our range operator\nwithin my array element or\n\n333\n00:17:08.730 --> 00:17:13.340\nmy index id that we're typing\nin there in that array.\n\n334\n00:17:13.340 --> 00:17:18.400\nSo let's do a bigger one here,\nI'm going to go back and change A to that.\n\n335\n00:17:18.400 --> 00:17:24.658\nSo right now $A contains 1 through 10,\nright?\n\n336\n00:17:24.658 --> 00:17:28.394\nIf I want to pull back a range,\n\n337\n00:17:28.394 --> 00:17:33.184\nI could say something like 4..7.\n\n338\n00:17:33.184 --> 00:17:37.238\nSo there, I'm using that range indicator,\nI'm saying, hey,\n\n339\n00:17:37.238 --> 00:17:39.630\nI want element 4 through element 7.\n\n340\n00:17:39.630 --> 00:17:43.230\nNow be careful with this, and\nI know this might be a little confusing.\n\n341\n00:17:43.230 --> 00:17:46.300\nI'm not saying I want the number\nfour through the number seven.\n\n342\n00:17:46.300 --> 00:17:48.510\n&gt;&gt; You're actually starting with three.\n\n343\n00:17:48.510 --> 00:17:50.600\n&gt;&gt; Yes, this is not the value.\n\n344\n00:17:50.600 --> 00:17:54.630\nThese are the index positions, or\nthe index number for those elements.\n\n345\n00:17:55.920 --> 00:17:59.053\nSo, let's execute that and see what I get.\n\n346\n00:17:59.053 --> 00:17:59.753\nOtherwise I get five, six, seven, eight.\n\n347\n00:17:59.753 --> 00:18:01.770\n&gt;&gt; It was five, I was wrong,\nwent the wrong way, Jeez Louise.\n\n348\n00:18:01.770 --> 00:18:02.815\n&gt;&gt; Yeah, that's all right.\n\n349\n00:18:02.815 --> 00:18:04.472\n&gt;&gt; My God, okay.\n\n350\n00:18:04.472 --> 00:18:09.300\n&gt;&gt; [LAUGH] All right, so yeah if we look\nthat's element zero, one, two, three.\n\n351\n00:18:09.300 --> 00:18:16.070\nThere's element four, right there,\nelement five, element six, element seven,\n\n352\n00:18:16.070 --> 00:18:17.930\nso it should be five through eight-\n&gt;&gt; Cool.\n\n353\n00:18:17.930 --> 00:18:19.340\n&gt;&gt; Which is what I get.\n\n354\n00:18:19.340 --> 00:18:21.910\nRight, so\nif you need to return a range of values,\n\n355\n00:18:21.910 --> 00:18:26.220\nwe can start using that range\noperator within that comment.\n\n356\n00:18:26.220 --> 00:18:29.290\nNow, another cool thing\nyou can do with this, so\n\n357\n00:18:29.290 --> 00:18:32.040\nfar we've seen positive indexed numbers,\nright?\n\n358\n00:18:32.040 --> 00:18:35.880\n0 through, and then however many\npositions there are in your array.\n\n359\n00:18:35.880 --> 00:18:38.910\nWe can also use negative index numbers.\n\n360\n00:18:38.910 --> 00:18:42.740\nNegative numbers allow me to start\nfrom the end of the array instead of\n\n361\n00:18:42.740 --> 00:18:44.350\nthe beginning and go back.\n\n362\n00:18:45.530 --> 00:18:48.320\nUnlike the positive,\nis where this gets a little confusing-\n\n363\n00:18:48.320 --> 00:18:49.071\n&gt;&gt; I was gonna say,\n\n364\n00:18:49.071 --> 00:18:51.850\ncuz if you have an element,\nhow can you have a non-element?\n\n365\n00:18:51.850 --> 00:18:54.120\n&gt;&gt; Yeah,\nyou can't have a negative zero, right?\n\n366\n00:18:54.120 --> 00:18:55.760\nThere's no such thing.\n\n367\n00:18:55.760 --> 00:19:00.100\nSo, whereas going with positive\nindex numbers, it's zero, one,\n\n368\n00:19:00.100 --> 00:19:02.060\ntwo, three, so on and so on.\n\n369\n00:19:02.060 --> 00:19:06.970\nWith the negative numbers, the last\nposition in the array is a negative one,\n\n370\n00:19:06.970 --> 00:19:08.210\nall right?\n\n371\n00:19:08.210 --> 00:19:12.940\nSo really, the negative is not saying, I\nwanna go backwards or anything like that.\n\n372\n00:19:12.940 --> 00:19:16.100\nThe negative is just indicating, hey,\ninstead of starting at the beginning of\n\n373\n00:19:16.100 --> 00:19:20.260\nthe array and\ncounting positions from front to back,\n\n374\n00:19:20.260 --> 00:19:24.390\nI wanna start at the end of\nthe re-array and count positions back.\n\n375\n00:19:24.390 --> 00:19:25.520\n&gt;&gt; So\nwhen would we use something like that?\n\n376\n00:19:25.520 --> 00:19:28.510\n&gt;&gt; Well, you might know,\nyou want the last element in an array.\n\n377\n00:19:28.510 --> 00:19:30.150\nYou just wanna see what\nthat last element is.\n\n378\n00:19:30.150 --> 00:19:33.828\nThat's typically the most common thing is,\nwhat's the last element?\n\n379\n00:19:33.828 --> 00:19:37.264\nAnd rather than me having to try to,\ncuz if I'm looking for\n\n380\n00:19:37.264 --> 00:19:39.080\nthe last element in an array.\n\n381\n00:19:39.080 --> 00:19:44.660\nSo right now, I have $A, which is equal\nto the numbers one to ten, all right?\n\n382\n00:19:44.660 --> 00:19:49.670\nBut if I don't know what the last time\nwhat is, imagine this is, IP addresses or,\n\n383\n00:19:49.670 --> 00:19:54.670\nyeah, digits like that, or\ncomputer names, maybe I ran something and\n\n384\n00:19:54.670 --> 00:19:59.040\nI pull back values and I wanna see\nwhat the last value I retrieved was.\n\n385\n00:19:59.040 --> 00:20:04.460\nTo get to this,\nI have to know how many, right?\n\n386\n00:20:04.460 --> 00:20:08.920\nI'd have to know how many positions\nthere were, and then in this case,\n\n387\n00:20:08.920 --> 00:20:12.180\nthis is a what, one,\ntwo, three, four, five.\n\n388\n00:20:12.180 --> 00:20:16.330\nSorry, I should start with zero, zero,\none, two, three, four, five, six, seven,\n\n389\n00:20:16.330 --> 00:20:17.700\neight, nine.\n\n390\n00:20:17.700 --> 00:20:20.070\nThe last element is nine.\n\n391\n00:20:20.070 --> 00:20:24.780\nSo if I want that last element,\nthen we're going to dump it,\n\n392\n00:20:26.020 --> 00:20:29.320\nwe'll dump a nine in there, right?\n\n393\n00:20:29.320 --> 00:20:30.260\nI can execute that.\n\n394\n00:20:31.270 --> 00:20:33.040\nAnd we get that last element.\n\n395\n00:20:33.040 --> 00:20:36.170\nBut again if I don't know how\nmany elements are in there,\n\n396\n00:20:36.170 --> 00:20:38.770\nhow can I type that last element number.\n\n397\n00:20:39.825 --> 00:20:41.170\nWhereas with a negative one,\n\n398\n00:20:41.170 --> 00:20:44.050\nI don't have to know how many\nelements are in the array.\n\n399\n00:20:44.050 --> 00:20:45.370\nThere could be ten.\n\n400\n00:20:45.370 --> 00:20:46.150\nThere could be 10,000.\n\n401\n00:20:46.150 --> 00:20:50.200\nI'm just saying, hey, go to the end and\ngive me that last value.\n\n402\n00:20:50.200 --> 00:20:54.140\nSo let's change this up to\na negative one and see what happens.\n\n403\n00:20:54.140 --> 00:20:56.730\nI'll hit F8 on my keyboard and\n\n404\n00:20:56.730 --> 00:21:02.317\nnotice that a negative one gives\nme that same value, there is ten.\n\n405\n00:21:02.317 --> 00:21:07.795\nChange that to a negative three and\nwe execute that.\n\n406\n00:21:07.795 --> 00:21:11.150\nYou'll see we get element eight or\nthe value of eight.\n\n407\n00:21:11.150 --> 00:21:15.880\nIf we look at our array, there's negative\none, there's negative two, there's\n\n408\n00:21:15.880 --> 00:21:20.810\nnegative three, which gives me that number\neight, or that position within that array.\n\n409\n00:21:20.810 --> 00:21:25.675\n&gt;&gt; I feel like I'm back in grade school\nhaving to retrain my brain here.\n\n410\n00:21:25.675 --> 00:21:28.090\n&gt;&gt; [LAUGH] I know,\nit can get a little bit confusing.\n\n411\n00:21:28.090 --> 00:21:30.070\nAnd this is really important.\n\n412\n00:21:30.070 --> 00:21:33.910\nAnd you really should spend\nsome time playing with arrays.\n\n413\n00:21:33.910 --> 00:21:37.770\nBecause I can't tell you how much\nwe're gonna end up using arrays.\n\n414\n00:21:37.770 --> 00:21:42.690\nWe will see it all through out this and as\nwe get into more advanced stuff like DSC,\n\n415\n00:21:42.690 --> 00:21:47.290\ndesired state configuration, and things\nlike that, arrays are going to become\n\n416\n00:21:47.290 --> 00:21:51.720\nextremely important because we're\nvery rarely storing a single value.\n\n417\n00:21:51.720 --> 00:21:53.360\nWe're not working with one computer.\n\n418\n00:21:53.360 --> 00:21:56.130\nWe're working with dozens or\nhundreds of computers.\n\n419\n00:21:56.130 --> 00:21:58.022\nWe're not working with one IP address.\n\n420\n00:21:58.022 --> 00:22:03.460\nWorking with many, many IP addresses,\nor many services, or many processes.\n\n421\n00:22:03.460 --> 00:22:07.830\nSo arrays become an extremely\nimportant part of administration\n\n422\n00:22:07.830 --> 00:22:10.630\nin script writing with PowerShell.\n\n423\n00:22:10.630 --> 00:22:13.680\nNow, you can also do a range\nof negative numbers, right?\n\n424\n00:22:13.680 --> 00:22:16.253\nJust like I can say, hey,\nI want element 4..7.\n\n425\n00:22:16.253 --> 00:22:20.760\nSo that's to say is give me the fourth\nelement, the fifth, the sixth and\n\n426\n00:22:20.760 --> 00:22:21.820\nthe seventh element.\n\n427\n00:22:21.820 --> 00:22:23.850\nGive me all of those elements.\n\n428\n00:22:23.850 --> 00:22:25.980\nI can do the same thing\nwith negative numbers.\n\n429\n00:22:25.980 --> 00:22:28.860\nBut you have to be careful when\nyou're using negative numbers and\n\n430\n00:22:28.860 --> 00:22:30.370\nyou're doing a range.\n\n431\n00:22:30.370 --> 00:22:36.260\nYou wanna set it up so\nthat the index is in ascending order.\n\n432\n00:22:36.260 --> 00:22:39.480\nAll right, and it might seem strange\ncuz what you would think initially is,\n\n433\n00:22:39.480 --> 00:22:43.240\nall right, I want the last element and\nI want the two elements in front of that.\n\n434\n00:22:43.240 --> 00:22:47.297\nSo that'd be negative one,\nnegative two, and negative three.\n\n435\n00:22:47.297 --> 00:22:52.224\nSo you might try to come in here and\nsay, look, I want -1,\n\n436\n00:22:52.224 --> 00:22:55.291\nthat last element -3.\n\n437\n00:22:55.291 --> 00:22:57.090\nSo those last three elements.\n\n438\n00:22:57.090 --> 00:22:59.790\nIf we execute that,\nthis could very well should work.\n\n439\n00:22:59.790 --> 00:23:03.450\nThere's 10, 9, 8, seems to have\ndone its job just fine, right?\n\n440\n00:23:03.450 --> 00:23:07.410\nBut I will tell you there\nare certain circumstances when\n\n441\n00:23:07.410 --> 00:23:12.220\nthis will really goof you up,\nespecially if you're trying to say I want\n\n442\n00:23:12.220 --> 00:23:15.500\nto like element two through negative two,\nright?\n\n443\n00:23:15.500 --> 00:23:17.690\nYou're thinking,\nI wanna skip the first two elements.\n\n444\n00:23:17.690 --> 00:23:18.560\n&gt;&gt; Yeah, what does that do with this?\n\n445\n00:23:18.560 --> 00:23:23.160\n&gt;&gt; Right, so skip zero and one and\nthen get two, three, four, five, and\n\n446\n00:23:23.160 --> 00:23:26.750\nthen go all the way to negative two, which\nis saying skip the last element, right?\n\n447\n00:23:26.750 --> 00:23:28.050\nI want all the way to negative two.\n\n448\n00:23:28.050 --> 00:23:32.265\nThe problem is it doesn't\nknow where to switch over\n\n449\n00:23:32.265 --> 00:23:33.339\n&gt;&gt; From positive to negative?\n\n450\n00:23:33.339 --> 00:23:36.465\n&gt;&gt; Yes, and\nyou'll get really strange results.\n\n451\n00:23:36.465 --> 00:23:40.038\nSometimes they won't make any sense or\nthey'll be in a strange order because it\n\n452\n00:23:40.038 --> 00:23:43.395\nwill say, all right, I'm gonna get,\nit tries to do it ascending and it's\n\n453\n00:23:43.395 --> 00:23:47.018\ngoing to say I'm going to get negative\ntwo, negative one, two, three, four,\n\n454\n00:23:47.018 --> 00:23:48.861\nit tries to put them out of order there\n&gt;&gt; So\n\n455\n00:23:48.861 --> 00:23:53.810\nyou might just be better off running\ntwo separate executions or whatever.\n\n456\n00:23:53.810 --> 00:23:55.052\n&gt;&gt; Or just make sure its in ascending.\n\n457\n00:23:55.052 --> 00:23:56.567\nLike what I would do here is a three.\n\n458\n00:23:56.567 --> 00:23:59.873\nWhoops, as my computer\nscrolls around here.\n\n459\n00:23:59.873 --> 00:24:01.569\nThe one, all right?\n\n460\n00:24:01.569 --> 00:24:06.172\nSo just think about it as the position's\nmoving from left to right,\n\n461\n00:24:06.172 --> 00:24:11.015\neven though I wanna start at the end and\nget the last three, with my range\n\n462\n00:24:11.015 --> 00:24:15.898\nnotation I'm gonna think about where\nI wanna stop going out to the end.\n\n463\n00:24:15.898 --> 00:24:18.634\nSo I'm gonna get negative\n3 do do negative 1.\n\n464\n00:24:18.634 --> 00:24:21.230\nIn this case it gives me\nthe exact same results.\n\n465\n00:24:21.230 --> 00:24:24.360\nAlthough, notice they're sorted\ncorrectly this time, right?\n\n466\n00:24:24.360 --> 00:24:27.690\nOr they're in the order that I would\nexpect coming out of that array.\n\n467\n00:24:27.690 --> 00:24:32.500\nAnd again, if you start doing complex\ntype commands with this, and you're\n\n468\n00:24:32.500 --> 00:24:36.510\nincluding positive and negative numbers\nin there, this will keep you straight.\n\n469\n00:24:36.510 --> 00:24:41.550\nSo if you wanted to do,\nlet's see what would happen if\n\n470\n00:24:41.550 --> 00:24:47.950\nI did position 2 all the way\nthrough position negative 2, right?\n\n471\n00:24:47.950 --> 00:24:49.102\nWe'll run that.\n\n472\n00:24:49.102 --> 00:24:53.490\nAnd there you see a good example of\nhow it's really kind of goofed up.\n\n473\n00:24:53.490 --> 00:24:56.950\nAll right, I get 3, 2, 1.\n\n474\n00:24:56.950 --> 00:24:58.435\nAnd then I've got 10, 9.\n\n475\n00:24:58.435 --> 00:25:00.440\nWhich doesn't make any sense.\n\n476\n00:25:01.780 --> 00:25:03.129\nSo, what I would have to do.\n\n477\n00:25:03.129 --> 00:25:05.966\nLet's try to switch that around and\nsee what happens.\n\n478\n00:25:05.966 --> 00:25:12.520\nIf I do negative 2 to 2,\nand we execute that.\n\n479\n00:25:12.520 --> 00:25:15.337\nI still get kind of goofy results, right?\n\n480\n00:25:15.337 --> 00:25:20.470\nI get that that the last elements,\nand then the first three elements,\n\n481\n00:25:20.470 --> 00:25:23.350\nwhich really doesn't make any sense.\n\n482\n00:25:23.350 --> 00:25:28.067\nI shouldn't get the last element, although\nnegative 1 is within this range, right?\n\n483\n00:25:28.067 --> 00:25:33.598\nNegative 2, negative 1, zero, 1, 2 would\nbe what I'm actually specifying here.\n\n484\n00:25:33.598 --> 00:25:35.980\nSo it's something you gotta play with,\ntry.\n\n485\n00:25:35.980 --> 00:25:40.191\nIt, like you said,\nit might be easier to retrieve either\n\n486\n00:25:40.191 --> 00:25:43.810\nusing the negative index or\nthe positive index.\n\n487\n00:25:43.810 --> 00:25:46.781\nCombining them can sometimes\ngive you weird results\n\n488\n00:25:46.781 --> 00:25:48.681\nthat you might not be expecting.\n\n489\n00:25:48.681 --> 00:25:52.180\nSo definitely test it out before\nyou try to put it into a script.\n\n490\n00:25:52.180 --> 00:25:56.201\nBut pretty cool, though, that we can\nuse negative numbers in our indices.\n\n491\n00:25:56.201 --> 00:25:57.980\nOr index indicators.\n\n492\n00:25:57.980 --> 00:26:01.360\nLike I said, there's a lot of times I want\nto get that last element, but I don't\n\n493\n00:26:01.360 --> 00:26:04.870\nwanna go through the trouble of figuring\nout what position that last element is.\n\n494\n00:26:04.870 --> 00:26:07.260\nI just want to see the last log entry.\n\n495\n00:26:07.260 --> 00:26:11.770\nI wanna see the last packet that came\nthrough that firewall log, right?\n\n496\n00:26:11.770 --> 00:26:14.486\nIf I return all of the events\ninto an array, and so\n\n497\n00:26:14.486 --> 00:26:17.800\nI've got all my events,\neach an object within that array,\n\n498\n00:26:17.800 --> 00:26:21.210\nI can grab the last event by\njust doing a negative 1, right?\n\n499\n00:26:21.210 --> 00:26:23.050\nI know I've got that last entry.\n\n500\n00:26:23.050 --> 00:26:25.440\nSo very, very important, very cool stuff.\n\n501\n00:26:25.440 --> 00:26:27.550\nAll right, now, so we've got these arrays.\n\n502\n00:26:27.550 --> 00:26:29.000\nWe see how to create them.\n\n503\n00:26:29.000 --> 00:26:32.250\nWe see that we can store different\nobject types within an array.\n\n504\n00:26:32.250 --> 00:26:37.020\nThey don't have to be just integers, or\njust doubles, or just floats, or whatever.\n\n505\n00:26:37.020 --> 00:26:39.000\nWe can kinda mix and match in there.\n\n506\n00:26:39.000 --> 00:26:43.520\nWe see how to retrieve individual\nelements within that array\n\n507\n00:26:43.520 --> 00:26:46.770\nusing an index indicator,\neither positive or negative.\n\n508\n00:26:46.770 --> 00:26:50.280\nAnd we can use our range\noperator in there as well.\n\n509\n00:26:50.280 --> 00:26:55.470\nNext thing I want to show you is how do we\nmodify, right, a position within an array?\n\n510\n00:26:55.470 --> 00:26:58.610\nAnd there's actually a couple of\ndifferent ways that you can do that.\n\n511\n00:26:58.610 --> 00:27:02.040\nLet's set this to a little\nbit longer array.\n\n512\n00:27:02.040 --> 00:27:04.853\nSo I'm gonna go back to,\nwhoops, which one?\n\n513\n00:27:05.928 --> 00:27:07.372\nWell, let's do this first one.\n\n514\n00:27:08.627 --> 00:27:13.069\nAll right, so we're gonna go there,\nand so now $A.\n\n515\n00:27:13.069 --> 00:27:14.325\nLet's clear up this screen.\n\n516\n00:27:14.325 --> 00:27:20.360\n$A should equal that list of values,\nwhich it does, all right?\n\n517\n00:27:20.360 --> 00:27:25.200\nNow let's say we wanna change a position,\nor one of those elements.\n\n518\n00:27:25.200 --> 00:27:27.410\nWhat we need to know is the position\nthat we want to change.\n\n519\n00:27:27.410 --> 00:27:30.394\nWell, let's say we need to change,\nI don't know.\n\n520\n00:27:30.394 --> 00:27:34.130\nWell, I said position three\nhere in my little example.\n\n521\n00:27:34.130 --> 00:27:37.418\nJust remember,\nthat would be zero, 1, 2, 3.\n\n522\n00:27:37.418 --> 00:27:39.920\nIt's the fourth element in the array.\n\n523\n00:27:39.920 --> 00:27:43.056\nSo if I want to change\nthat 10 to something else,\n\n524\n00:27:43.056 --> 00:27:47.851\nI simply call the position just like\nwe normally would to return it, right?\n\n525\n00:27:47.851 --> 00:27:53.740\n$A[3] returns that particular value.\n\n526\n00:27:53.740 --> 00:27:57.403\nWell, if I use my assignment operator,\n\n527\n00:27:57.403 --> 00:28:01.942\nmy equals sign, and\nset it to a new value, right?\n\n528\n00:28:01.942 --> 00:28:04.034\nAnd now, I recall that position.\n\n529\n00:28:04.034 --> 00:28:07.385\nI'm going to highlight just that first\npart without the assignment operator.\n\n530\n00:28:07.385 --> 00:28:08.960\nAnd I'm going to execute it.\n\n531\n00:28:08.960 --> 00:28:13.090\nWe see that position three now includes,\nor is the value of 99.\n\n532\n00:28:13.090 --> 00:28:15.340\nIf we look at the entire array,\n\n533\n00:28:15.340 --> 00:28:19.440\nnow there you can see that that\nfourth position is indeed a 99.\n\n534\n00:28:19.440 --> 00:28:23.800\nSo it's simply a matter of calling\nthe position that you want to modify\n\n535\n00:28:23.800 --> 00:28:27.250\nusing your assignment operator and\nsetting a new value to it.\n\n536\n00:28:27.250 --> 00:28:29.810\nSo if you wanted to update an IP\naddress or a computer name,\n\n537\n00:28:29.810 --> 00:28:34.400\nwhatever it was you were storing in that\narray, simply call that position and\n\n538\n00:28:34.400 --> 00:28:35.870\nuse your assignment operator.\n\n539\n00:28:35.870 --> 00:28:40.640\nYou can also use a property, or I should\nsay a method, of the array itself, right?\n\n540\n00:28:40.640 --> 00:28:42.370\nRemember, an array is an object.\n\n541\n00:28:42.370 --> 00:28:46.366\nAnd if we take a look at, let's say, $A,\n\n542\n00:28:46.366 --> 00:28:51.920\nwe're gonna pipe that out\ninto a git-member, all right?\n\n543\n00:28:51.920 --> 00:28:55.082\nAnd let's see if we can find here.\n\n544\n00:29:01.815 --> 00:29:05.840\nIt's somewhere in here, but of course\nreading this sometimes can be crazy.\n\n545\n00:29:05.840 --> 00:29:06.680\n&gt;&gt; What are you looking for?\n\n546\n00:29:06.680 --> 00:29:07.390\nMaybe I can help.\n\n547\n00:29:07.390 --> 00:29:12.896\n&gt;&gt; I was trying to see where I can\nfind the method for dot set value.\n\n548\n00:29:20.396 --> 00:29:23.290\nAnd it might be off on one of these guys,\non my equals here.\n\n549\n00:29:25.170 --> 00:29:29.830\nAnyway, we do have that set\nvalue method available.\n\n550\n00:29:29.830 --> 00:29:32.985\nSo if I do dollar sign, in fact let me\ndo it up here because I turned off my\n\n551\n00:29:32.985 --> 00:29:36.075\nIntelliSense, so\nlet's go up here for a second.\n\n552\n00:29:36.075 --> 00:29:38.930\n$a.\n\n553\n00:29:38.930 --> 00:29:43.600\nAll right, you'll see as I start typing,\nthere's the option for set value,\n\n554\n00:29:43.600 --> 00:29:44.830\nall right?\n\n555\n00:29:44.830 --> 00:29:46.630\nAnd there's my syntax for it.\n\n556\n00:29:46.630 --> 00:29:50.060\nSo it's just another way\nto change an element or\n\n557\n00:29:50.060 --> 00:29:54.520\nmodify an element is the set value,\nall right?\n\n558\n00:29:54.520 --> 00:29:56.370\nIf I go back up here,\nI've already got it typed out.\n\n559\n00:29:56.370 --> 00:29:59.672\nSo here I'm saying $a.setValue.\n\n560\n00:29:59.672 --> 00:30:01.541\nOpen parentheses.\n\n561\n00:30:01.541 --> 00:30:06.509\nThe value I wanna set comes first, comma.\n\n562\n00:30:06.509 --> 00:30:11.300\nThe index position that I'm\ntrying to set comes second.\n\n563\n00:30:11.300 --> 00:30:13.600\nSo I'm saying in the array $a, I\n\n564\n00:30:14.700 --> 00:30:19.590\nwanna change the third element, or\nactually it's the fourth element, right?\n\n565\n00:30:19.590 --> 00:30:24.115\nIndex position three,\nI wanna change to a value of ten.\n\n566\n00:30:24.115 --> 00:30:25.376\nSo, let's execute that.\n\n567\n00:30:27.273 --> 00:30:31.076\nAnd then we'll call back $a.\n\n568\n00:30:31.076 --> 00:30:35.030\nAnd we see that fourth element is\nindeed changed from 99 back to 10.\n\n569\n00:30:35.030 --> 00:30:40.930\nSo, just two different ways I can go about\nsetting values or element values, right?\n\n570\n00:30:40.930 --> 00:30:44.090\nI can either use the index position, or\n\n571\n00:30:44.090 --> 00:30:49.140\nI can use the dot set value, and\nthen in parentheses put my parameters,\n\n572\n00:30:49.140 --> 00:30:53.720\nwhich is gonna include the value\nyou want to set it to, comma, and\n\n573\n00:30:53.720 --> 00:30:56.032\nthen the position or\nthe element that you're trying to change.\n\n574\n00:30:56.032 --> 00:31:02.046\nAll right, so that's changing\nexisting elements within an array.\n\n575\n00:31:02.046 --> 00:31:05.096\nWhat if I want to add\nan element to an array?\n\n576\n00:31:05.096 --> 00:31:07.312\nI can do a plus equals.\n\n577\n00:31:07.312 --> 00:31:11.600\nAnd that's just gonna dump another\nposition into my array I might have had.\n\n578\n00:31:11.600 --> 00:31:18.170\nOr in this case, I have a an array with\nsix positions in it, or six elements.\n\n579\n00:31:18.170 --> 00:31:25.300\nIf I run this Dollar sign a,\nplus equals 127.\n\n580\n00:31:25.300 --> 00:31:30.143\nNow let's call back dollar sign a, you\nsee I have a new element down there, 127,\n\n581\n00:31:30.143 --> 00:31:31.060\nall right?\n\n582\n00:31:31.060 --> 00:31:32.600\nAnd it is now the last element.\n\n583\n00:31:32.600 --> 00:31:39.344\nIf I go $a, open bracket,\nnegative 1, close bracket, right?\n\n584\n00:31:39.344 --> 00:31:42.640\nI can see that 21 is no\nlonger the last element.\n\n585\n00:31:42.640 --> 00:31:45.633\n127 is now the last element.\n\n586\n00:31:45.633 --> 00:31:50.135\nWe can positions just\nby doing a plus equals.\n\n587\n00:31:50.135 --> 00:31:51.871\nNow, there are some caveats, or\n\n588\n00:31:51.871 --> 00:31:55.470\nsome things we wanna keep in mind\nhere when we're dealing with this.\n\n589\n00:31:55.470 --> 00:32:00.177\nWhen PowerShell, when I add an element\nlike this What PowerShell is really\n\n590\n00:32:00.177 --> 00:32:02.269\ndoing is removing my old array and\n\n591\n00:32:02.269 --> 00:32:05.880\ncreating a brand new array\nwith this new element in it.\n\n592\n00:32:05.880 --> 00:32:10.220\nTaking all of the data that was in the old\narray, including this new element and\n\n593\n00:32:10.220 --> 00:32:12.580\ncreating a new array out of it same name,\nright.\n\n594\n00:32:12.580 --> 00:32:16.450\nIt's all happening beside the scenes but\nit is, what that's something we need to be\n\n595\n00:32:16.450 --> 00:32:20.640\naware of is in the background it is\ndeleting and recreating that array.\n\n596\n00:32:20.640 --> 00:32:22.990\n&gt;&gt; So why would that be like a cause for\nconcern?\n\n597\n00:32:22.990 --> 00:32:26.820\n&gt;&gt; Because performance, if we get arrays\nthat are very, very large, hundreds,\n\n598\n00:32:26.820 --> 00:32:28.260\nthousands of elements in it.\n\n599\n00:32:28.260 --> 00:32:31.424\nAnd we're doing this kind of\noperation over and over and over,\n\n600\n00:32:31.424 --> 00:32:35.303\nall of a sudden you're gonna see a\nperformance degradation depending on your\n\n601\n00:32:35.303 --> 00:32:38.605\nserver [CROSSTALK] what else is doing and\nthings like that, yeah.\n\n602\n00:32:38.605 --> 00:32:43.358\nSo it is something to be aware of, you\ncan add elements like this but if you're\n\n603\n00:32:43.358 --> 00:32:48.113\ndoing it a lot and the array is large you\nmight wanna watch your performance and\n\n604\n00:32:48.113 --> 00:32:53.460\nmaybe see if there's other ways you might\ngo about manipulating those arrays.\n\n605\n00:32:53.460 --> 00:32:56.754\nAnd it depends again on the system,\nhow big the array is,\n\n606\n00:32:56.754 --> 00:32:58.880\nhow often you're doing that.\n\n607\n00:32:58.880 --> 00:33:02.583\nSo if you're just doing it now and\nagain, even though it's a huge array,\n\n608\n00:33:02.583 --> 00:33:03.977\nit's no big deal, right.\n\n609\n00:33:03.977 --> 00:33:08.536\nOr if the array's not that big, but\nyou're doing it dozens, and dozens, and\n\n610\n00:33:08.536 --> 00:33:12.490\ndozens of times within a script,\nmaybe it makes an impact, right.\n\n611\n00:33:12.490 --> 00:33:15.700\nOr if it's a huge array and you're\ndoing it hundreds of times in a script,\n\n612\n00:33:15.700 --> 00:33:17.750\nit's most likely gonna cause an impact or\n\n613\n00:33:17.750 --> 00:33:20.075\nmaybe your server's beefy enough\nwhere you don't even notice it,\n\n614\n00:33:20.075 --> 00:33:23.030\nit's not doing anything else,\nit doesn't have any other roles on it.\n\n615\n00:33:23.030 --> 00:33:25.420\nIt's just something that\nyou've gotta pay attention to,\n\n616\n00:33:25.420 --> 00:33:27.900\nsomething to keep in mind if\nyou start writing scripts and\n\n617\n00:33:27.900 --> 00:33:31.130\nyou start doing things like this and\nyou see a performance degradation\n\n618\n00:33:31.130 --> 00:33:33.670\nthat's probably one of the first\nthings you want to look for, right.\n\n619\n00:33:33.670 --> 00:33:38.450\nRemoving elements from array\nis really not easy at all.\n\n620\n00:33:38.450 --> 00:33:39.828\n&gt;&gt; Really not easy.\n\n621\n00:33:39.828 --> 00:33:40.828\n&gt;&gt; It's not.\n\n622\n00:33:40.828 --> 00:33:41.330\n&gt;&gt; Okay.\n\n623\n00:33:41.330 --> 00:33:46.502\n&gt;&gt; It's a complex kind of convoluted\nprocess, I didn't even bother setting\n\n624\n00:33:46.502 --> 00:33:51.687\nit up because I will tell you it's much\neasier to just recreate your array.\n\n625\n00:33:51.687 --> 00:33:56.108\nHonestly, I mean it can be done and\nwe can do get dash help,\n\n626\n00:33:56.108 --> 00:34:01.730\nlet's see if I can show you here,\nget-helpabout_arrays I think it is.\n\n627\n00:34:03.830 --> 00:34:08.787\nI don't know if I updated\nmy help on this guy.\n\n628\n00:34:08.787 --> 00:34:11.464\nYeah, I didn't,\nI'd have to use my physical machine.\n\n629\n00:34:11.464 --> 00:34:15.148\nAnyway, [COUGH] do that,\ndo a get-helpabout_array and\n\n630\n00:34:15.148 --> 00:34:18.472\nyou'll see all the help\nthat you can get on arrays.\n\n631\n00:34:18.472 --> 00:34:20.410\nAnd it'll show you how\nto remove an item but\n\n632\n00:34:20.410 --> 00:34:23.860\nit'll even tell you that a lot of times\nthat it's easier just to create a new\n\n633\n00:34:23.860 --> 00:34:28.580\narray rather than trying to remove\na specific element from the array.\n\n634\n00:34:29.920 --> 00:34:32.730\nAnd the last thing I want to\nshow you with the array [COUGH],\n\n635\n00:34:32.730 --> 00:34:37.060\nexcuse me, is this value right here,\nwhich is .length.\n\n636\n00:34:37.060 --> 00:34:41.010\nThis is a property of an array,\nremember an array is an object so\n\n637\n00:34:41.010 --> 00:34:43.990\nit has properties and\nmethods that we can access.\n\n638\n00:34:43.990 --> 00:34:45.700\nWe do that with a dot, all right.\n\n639\n00:34:45.700 --> 00:34:48.740\nWe got an object dot and\nthen we have all of their properties and\n\n640\n00:34:48.740 --> 00:34:50.580\nmethods available to us.\n\n641\n00:34:50.580 --> 00:34:55.100\nLength is one of the properties of\nthe array and it's a fantastic thing.\n\n642\n00:34:55.100 --> 00:35:00.735\nWe will use this over and over again,\nbecause if we're looping through an array,\n\n643\n00:35:00.735 --> 00:35:03.512\nas we get into our more complex scripts,\n\n644\n00:35:03.512 --> 00:35:06.633\nI need to know how many\ntimes to run that loop.\n\n645\n00:35:06.633 --> 00:35:12.660\nIf there's five elements in there,\nI want to run it five times, right.\n\n646\n00:35:12.660 --> 00:35:15.200\nIf there are 25 elements in there,\nI want to loop through 25 times.\n\n647\n00:35:15.200 --> 00:35:20.350\nNow there are ways to loop through without\nknowing the exact number of elements, but\n\n648\n00:35:20.350 --> 00:35:25.240\nsometimes I need to, there's the way I'm\nwriting my script, I need that length and\n\n649\n00:35:25.240 --> 00:35:26.030\nI'm gonna use an indent.\n\n650\n00:35:26.030 --> 00:35:29.790\nWe'll will show you how to do counters and\ncount through the elements in the array\n\n651\n00:35:29.790 --> 00:35:32.940\nbut I typically need the length to\nhelp me stop the loop at some point.\n\n652\n00:35:32.940 --> 00:35:38.150\nI don't want it to run forever and ever\nand lock up my machine, what have you.\n\n653\n00:35:38.150 --> 00:35:38.953\n[COUGH] Excuse me, so\n\n654\n00:35:38.953 --> 00:35:42.450\nthat length is a property that will\nshow me how many elements are in there.\n\n655\n00:35:42.450 --> 00:35:45.596\nWe run this and say $a.length=7,\n\n656\n00:35:45.596 --> 00:35:50.805\nthat means there are seven\nelements if I do a $a, I'll see 1,\n\n657\n00:35:50.805 --> 00:35:55.640\n2, 3, 4, 5, 6, 7, so,\nindeed there are seven.\n\n658\n00:35:56.870 --> 00:36:00.770\nYou can also do a dot count,\nif I back up here and I do a dot and\n\n659\n00:36:00.770 --> 00:36:05.629\nI use my intelliSEND, you'll see that\ncount is actually the first one on\n\n660\n00:36:05.629 --> 00:36:10.750\nthe list but notice it's actually\nan alias, count equals length.\n\n661\n00:36:10.750 --> 00:36:14.570\nBecause from other languages, we're used\nto using count, so they went ahead and\n\n662\n00:36:14.570 --> 00:36:18.200\ncreated an alias to make it\na little bit easier to transition.\n\n663\n00:36:18.200 --> 00:36:20.900\nLength is the actual\nproperty that we want.\n\n664\n00:36:20.900 --> 00:36:25.150\nYou can see int length.right, and\nit's got that get method to it, so\n\n665\n00:36:25.150 --> 00:36:27.020\ngo get the length of this array.\n\n666\n00:36:27.020 --> 00:36:30.910\nCount shows you that, hey,\nthis is really just an alias for length.\n\n667\n00:36:30.910 --> 00:36:33.759\nSo either one will work,\nit doesn't matter which one you use.\n\n668\n00:36:34.930 --> 00:36:38.550\nSometimes I like to stick with the,\nit really doesn't matter,\n\n669\n00:36:38.550 --> 00:36:40.479\nit really depends on what\nkind of mood I'm in [LAUGH].\n\n670\n00:36:40.479 --> 00:36:42.528\n&gt;&gt; [LAUGH]\n&gt;&gt; If I'm freshly from another language\n\n671\n00:36:42.528 --> 00:36:45.540\nI've been working on another project and\nI come back here,\n\n672\n00:36:45.540 --> 00:36:46.998\nI might very well use count.\n\n673\n00:36:46.998 --> 00:36:49.316\nIf I have been working in PowerShell for\n\n674\n00:36:49.316 --> 00:36:54.247\na couple of days I would probably go with\nlength, it is just a personal preference.\n\n675\n00:36:54.247 --> 00:36:57.595\n&gt;&gt; Plus it nice you have that option,\nalso, so that's pretty cool.\n\n676\n00:36:57.595 --> 00:37:00.759\n&gt;&gt; Exactly, and heck you might end up\nusing it so much you make your own alias,\n\n677\n00:37:00.759 --> 00:37:04.880\nthat's even shorter, like ln or something\nlike that, so you can always do that.\n\n678\n00:37:04.880 --> 00:37:05.740\n&gt;&gt; Looking at the list here,\n\n679\n00:37:05.740 --> 00:37:09.830\nMike, is there anything else you want to\ncover before we sign off for today's show?\n\n680\n00:37:09.830 --> 00:37:11.770\n&gt;&gt; No, I think that about does it.\n\n681\n00:37:11.770 --> 00:37:14.880\nI'll go ahead and do that count just\nbecause I said you could do it and\n\n682\n00:37:14.880 --> 00:37:17.330\nyou'll see that it comes\nup with seven as well.\n\n683\n00:37:17.330 --> 00:37:21.393\nBut I think it gives us a pretty\ngood beginning look at a arrays,\n\n684\n00:37:21.393 --> 00:37:23.350\nhow we create them, right.\n\n685\n00:37:23.350 --> 00:37:27.075\nA couple of different\nways we can create them.\n\n686\n00:37:27.075 --> 00:37:31.636\nOne thing I didn't mention with the range\noperator you can't do a range of strings,\n\n687\n00:37:31.636 --> 00:37:34.670\nthat's one little gotcha that\na lot of people run into.\n\n688\n00:37:34.670 --> 00:37:38.978\nThey'll say I could do zero dot dot 25 and\n\n689\n00:37:38.978 --> 00:37:44.258\nI'll get an array of 26 positions,\nzero through 25,\n\n690\n00:37:44.258 --> 00:37:49.428\nthat's cool, but I could also do a,\ndollar sign a equals\n\n691\n00:37:49.428 --> 00:37:54.840\nopen bracket a dot dot z,\nright, and then close bracket.\n\n692\n00:37:54.840 --> 00:37:59.210\nAnd think they're gonna get an array that\nincludes a, b, c, d and all the letters,\n\n693\n00:37:59.210 --> 00:38:00.840\nright, that range of letters.\n\n694\n00:38:00.840 --> 00:38:01.340\nit doesn't work that way.\n&gt;&gt; Okay.\n\n695\n00:38:01.340 --> 00:38:01.876\n&gt;&gt; Strings,\n\n696\n00:38:01.876 --> 00:38:05.863\nit can't do an incrementing and take\neach one, it doesn't know what exactly,\n\n697\n00:38:05.863 --> 00:38:07.420\nwhat one is coming next.\n\n698\n00:38:07.420 --> 00:38:09.660\nBut you can do ASCII value, right.\n\n699\n00:38:09.660 --> 00:38:14.145\nWe could do the ASCII values for\nthe characters, so I could do a range of,\n\n700\n00:38:14.145 --> 00:38:18.354\nwhat's a good example again,\nif you knew the keys you were looking for,\n\n701\n00:38:18.354 --> 00:38:21.614\nthe letters you were looking for,\nyou could do a range.\n\n702\n00:38:21.614 --> 00:38:26.405\nI can't remember a capital A is 66,\nI can't remember, it's been awhile since I\n\n703\n00:38:26.405 --> 00:38:30.247\nwork with ASCII but you could do\na range 66 dot dot 76 all right.\n\n704\n00:38:30.247 --> 00:38:35.552\nAnd then as you call those values\nback there's a convert to ASCII\n\n705\n00:38:35.552 --> 00:38:41.890\nwhere I could take that number and\nconvert it to ASCII and get the letter.\n\n706\n00:38:41.890 --> 00:38:47.510\nSo, there's a way to store or\nto use range operators with letters but\n\n707\n00:38:47.510 --> 00:38:49.680\nit's not directly like you\nthink you might be able to do.\n\n708\n00:38:49.680 --> 00:38:54.980\nSo, don't do a open bracket d dot\ndot f and think you're gonna have D,\n\n709\n00:38:54.980 --> 00:38:59.170\nE, F within that array it's not\ngonna work for you, all right.\n\n710\n00:38:59.170 --> 00:39:03.510\nWe saw how to retrieve values,\neither using the position.\n\n711\n00:39:03.510 --> 00:39:07.270\nRemember that the arrays\nare a zero index system, so\n\n712\n00:39:07.270 --> 00:39:09.910\nit's position one is index number zero.\n\n713\n00:39:09.910 --> 00:39:13.590\nYou can also use negative numbers\nto work from the end of the array,\n\n714\n00:39:13.590 --> 00:39:16.090\nthat starts with negative one\nthere is no negative zero.\n\n715\n00:39:17.330 --> 00:39:19.050\nWhat else did we do?\n\n716\n00:39:19.050 --> 00:39:22.830\nWe saw how to modify existing elements,\nadd new elements, and\n\n717\n00:39:22.830 --> 00:39:24.150\nget the length of those arrays.\n\n718\n00:39:24.150 --> 00:39:25.730\nSo I think that gives us\na pretty good basis for\n\n719\n00:39:25.730 --> 00:39:28.850\nusing arrays as we move\nforward through these lessons.\n\n720\n00:39:28.850 --> 00:39:29.470\n&gt;&gt; Awesome, Mike.\n\n721\n00:39:29.470 --> 00:39:32.240\nWell, thank you so much for that, and\nthank you for joining us as well, but for\n\n722\n00:39:32.240 --> 00:39:34.340\nthis show,\nwe're going to go ahead and sign out.\n\n723\n00:39:34.340 --> 00:39:35.840\nI've been your host, Cherokee Boose.\n\n724\n00:39:35.840 --> 00:39:36.640\n&gt;&gt; And I'm Mike Rodrick.\n\n725\n00:39:36.640 --> 00:39:38.360\n&gt;&gt; See you next time here at ITPRO.TV.\n\n726\n00:39:38.360 --> 00:39:44.757\n[MUSIC]\n\n727\n00:39:44.757 --> 00:39:47.475\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "242248428"
        },
        {
          "description": "This episode is about using hash tables in PowerShell. You will see how to create hash tables. You will learn how to use hash tables to store key / value pairs, as well as create an ordered dictionary.",
          "length": "1755",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-3-1-hash_tables-110817-PGM.00_01_35_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-3-1-hash_tables-110817-PGM.00_01_35_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-1-3-1-hash_tables-110817-PGM.00_01_35_13.Still001-sm.jpg",
          "title": "Hash Tables",
          "transcript": "WEBVTT\n\n1\n00:00:00.240 --> 00:00:01.210\nWelcome to ITPro TV.\n\n2\n00:00:01.210 --> 00:00:07.568\nI'm your host, [CROSSTALK]\n&gt;&gt; You're watching ITPro TV.\n\n3\n00:00:07.568 --> 00:00:15.210\n&gt;&gt; Welcome ladies and gentlemen to\nyour PowerShell Scripting series.\n\n4\n00:00:15.210 --> 00:00:17.200\nI'm your show host, Cherokee Boose.\n\n5\n00:00:17.200 --> 00:00:20.850\nIn this episode we'll be taking\na look at hashing tables and\n\n6\n00:00:20.850 --> 00:00:23.880\nback with us today in studios we have Mr.\nMike Rodrick.\n\n7\n00:00:23.880 --> 00:00:24.850\nThank you for joining us Mike.\n\n8\n00:00:24.850 --> 00:00:25.520\nHow are you?\n\n9\n00:00:25.520 --> 00:00:26.100\n&gt;&gt; I'm doing great.\n\n10\n00:00:26.100 --> 00:00:27.140\nThanks for having me Cherokee.\n\n11\n00:00:27.140 --> 00:00:27.850\nGlad to me here, and\n\n12\n00:00:27.850 --> 00:00:32.410\nyeah excited, cuz we're gonna take a look\nat hash tables in this particular episode.\n\n13\n00:00:32.410 --> 00:00:36.310\nWhich is a pretty cool way, we mentioned\nthis when did our episodes on working with\n\n14\n00:00:36.310 --> 00:00:40.850\nvariables, we talked about what a hash\ntable is, but let's just refresh.\n\n15\n00:00:40.850 --> 00:00:47.360\nRemember, a hash table Is a way\nto store key value pairs, right?\n\n16\n00:00:47.360 --> 00:00:52.840\nSo we have a key, a name,\nwhatever, really it's an object.\n\n17\n00:00:52.840 --> 00:00:54.510\nIt could be anything,\nbut typically a string,\n\n18\n00:00:54.510 --> 00:00:57.660\nbut I'll show you some cool things you\ncan do with it when they're not strings.\n\n19\n00:00:57.660 --> 00:01:02.688\nBut you got a key equals value and\nyou can have a one value pair or\n\n20\n00:01:02.688 --> 00:01:06.960\nkey value pair, hash table,\nor it can be multiple.\n\n21\n00:01:06.960 --> 00:01:11.970\nAnd we'll separate each one of those\nkey value pairs with a semicolon.\n\n22\n00:01:11.970 --> 00:01:14.390\nSo and I know it's like wait,\nwhat the heck is he saying?\n\n23\n00:01:14.390 --> 00:01:15.630\nWe need to see this as we do it.\n\n24\n00:01:15.630 --> 00:01:16.830\nBut wait one second.\n\n25\n00:01:16.830 --> 00:01:19.060\nLet's make sure we've got\na couple of definitions down.\n\n26\n00:01:19.060 --> 00:01:21.710\nSo, hash tables store key value pairs.\n\n27\n00:01:21.710 --> 00:01:24.700\nYou got key equals value.\n\n28\n00:01:24.700 --> 00:01:29.082\nI'm gonna say they're non deterministic,\nI don't know if that's the correct way to\n\n29\n00:01:29.082 --> 00:01:31.675\nsay it, but\nthey're in non deterministic order.\n\n30\n00:01:31.675 --> 00:01:36.940\nWhich means, when we enter in our hash\ntable, when we create our hash table,\n\n31\n00:01:36.940 --> 00:01:42.690\nand we enter in our key value pairs, and\nthen we return the entire hash table.\n\n32\n00:01:42.690 --> 00:01:47.370\nWe might see that the key value pairs\ndon't show up in the same order\n\n33\n00:01:47.370 --> 00:01:49.830\nthat we entered them in,\nwhich is kind of odd sometimes.\n\n34\n00:01:49.830 --> 00:01:51.990\nWhen you're first working with it,\nyou're like, wait.\n\n35\n00:01:51.990 --> 00:01:53.760\nI didn't enter them in that way.\n\n36\n00:01:53.760 --> 00:01:55.920\nHow are they being returned in that way?\n\n37\n00:01:55.920 --> 00:01:58.150\nSo with hash tables,\n\n38\n00:01:58.150 --> 00:02:04.590\nthere is no guarantee on the order that\nthe key value pairs are gonna be returned.\n\n39\n00:02:04.590 --> 00:02:08.390\nAnd most of the time it doesn't matter,\nbecause we're gonna go look for\n\n40\n00:02:08.390 --> 00:02:10.560\na particular key, and return that value.\n\n41\n00:02:10.560 --> 00:02:12.770\nAnd it doesn't matter that it's sorted.\n\n42\n00:02:12.770 --> 00:02:16.870\nIt's a very efficient way to\nrun through a bunch of keys,\n\n43\n00:02:16.870 --> 00:02:19.940\nfind a particular value and\nreturn that value.\n\n44\n00:02:19.940 --> 00:02:25.760\nThere are ways to make a hash table\nwhere it is deterministic on order,\n\n45\n00:02:25.760 --> 00:02:28.320\nbut it's really not a hash table anymore.\n\n46\n00:02:28.320 --> 00:02:30.850\nIt's actually called a dictionary,\nor an ordered dictionary,\n\n47\n00:02:30.850 --> 00:02:33.680\nwhere you can use the ordered keyword, and\n\n48\n00:02:33.680 --> 00:02:38.260\nI'll show you how to do that,\nto create an ordered dictionary.\n\n49\n00:02:38.260 --> 00:02:43.280\nYou can CAST,\nCAST means to change a data type.\n\n50\n00:02:43.280 --> 00:02:46.300\nConvert a INT to a string,\n\n51\n00:02:46.300 --> 00:02:49.420\nif I want to do concatenation with it or\nsomething like that.\n\n52\n00:02:49.420 --> 00:02:54.140\nYou can CAST a hash table\nas a ordered dictionary.\n\n53\n00:02:54.140 --> 00:02:56.490\nIn other words,\nchange it over to an ordered dictionary.\n\n54\n00:02:57.750 --> 00:03:00.380\nAnd now the order that\nthey're in currently,\n\n55\n00:03:00.380 --> 00:03:03.620\nwill now be the order I\nalways return them in.\n\n56\n00:03:03.620 --> 00:03:06.150\nIf you go the other way, wait, what is it?\n\n57\n00:03:06.150 --> 00:03:10.250\nIf you have an ordered,\nyou CAST it into a hash table,\n\n58\n00:03:10.250 --> 00:03:13.010\nright, you lose the ordered attribute.\n\n59\n00:03:13.010 --> 00:03:16.380\nAnd if you try to CAST it back\ninto an older dictionary,\n\n60\n00:03:16.380 --> 00:03:18.730\nyou're not gonna get that\norder of attribute back.\n\n61\n00:03:18.730 --> 00:03:22.340\nIt's not gonna go back to being\nsorted as how you entered it.\n\n62\n00:03:22.340 --> 00:03:24.920\nTypically, I don't think we really\nhave to worry about that too much,\n\n63\n00:03:24.920 --> 00:03:27.920\nwhich is something I\nwanted to throw in there.\n\n64\n00:03:27.920 --> 00:03:31.640\nSo when we create these hash tables\nwe're gonna use the @ symbol.\n\n65\n00:03:31.640 --> 00:03:35.124\nThat's gonna be our indicator to\nPowerShell that we wanna create\n\n66\n00:03:35.124 --> 00:03:35.893\na hash table.\n\n67\n00:03:35.893 --> 00:03:40.939\nWe're gonna start with an open curly\nbrace to begin our hash table and\n\n68\n00:03:40.939 --> 00:03:46.330\nthen we're gonna put our key equals\nvalue inside that curly brace.\n\n69\n00:03:46.330 --> 00:03:49.517\nAnd if we have more than one,\nthen we're gonna put a semicolon or\n\n70\n00:03:49.517 --> 00:03:51.950\na line break,\nI'll show you what I mean by that.\n\n71\n00:03:51.950 --> 00:03:56.606\nYou can just separate out your key\nequals value pairs with a semicolon or\n\n72\n00:03:56.606 --> 00:04:00.034\na line break and\nthen however many you have, right?\n\n73\n00:04:00.034 --> 00:04:04.514\nSemicolon or line break, after line break,\nafter each one of those key value pairs\n\n74\n00:04:04.514 --> 00:04:07.907\nand then you wrap the whole thing\nup in that ending curly brace.\n\n75\n00:04:07.907 --> 00:04:11.855\nAnd you hit Enter, and\nyou have yourself a hash table, right?\n\n76\n00:04:11.855 --> 00:04:16.100\nWell there was one other thing\nI wanted to say with that and\n\n77\n00:04:16.100 --> 00:04:18.913\nI thought of it, and\nit slipped out of my mind.\n\n78\n00:04:18.913 --> 00:04:21.670\nStrings, If we are gonna\nput strings in here,\n\n79\n00:04:21.670 --> 00:04:24.690\nwe're always gonna put quotes\naround our strings, right.\n\n80\n00:04:24.690 --> 00:04:27.230\nWe use our single quotes,\nour literal strings.\n\n81\n00:04:27.230 --> 00:04:30.240\nI mean, you could use expendables if\nyou had variable names going in there.\n\n82\n00:04:31.628 --> 00:04:35.640\nIf value is a string, well, strings\nare always gonna have quotes on it.\n\n83\n00:04:35.640 --> 00:04:37.590\nIf the key of the value, but\n\n84\n00:04:37.590 --> 00:04:42.620\nif the key has a space in the name,\nwe also wanna put quotes around that.\n\n85\n00:04:42.620 --> 00:04:45.890\nI'm not a big fan of putting\nspaces in the name of my keys.\n\n86\n00:04:45.890 --> 00:04:48.970\nIt makes it a lot easier to\nwork with if I skip that part.\n\n87\n00:04:48.970 --> 00:04:50.270\nBut just understand that you can.\n\n88\n00:04:50.270 --> 00:04:53.450\nYou would just need quotes,\nbecause it will see that break.\n\n89\n00:04:53.450 --> 00:04:57.640\nAnd it's wait key,\nthere's no equals, there's no value.\n\n90\n00:04:57.640 --> 00:05:00.960\nAnd then I get this next value and\nI don't want to do with it, right?\n\n91\n00:05:00.960 --> 00:05:03.030\nSo if you're gonna do\nspaces in your key names,\n\n92\n00:05:03.030 --> 00:05:05.680\nyou have to have quotes around them.\n\n93\n00:05:05.680 --> 00:05:08.070\n&gt;&gt; All right, Mike,\nwhere would we be using hash tables?\n\n94\n00:05:08.070 --> 00:05:12.490\nYou're talking about keys and I'm\nthinking, my mind Gges to authentication,\n\n95\n00:05:12.490 --> 00:05:15.710\nwe're talking about security here,\nso what kind of use case.\n\n96\n00:05:15.710 --> 00:05:17.470\n&gt;&gt; It's actually nothing to do with that.\n\n97\n00:05:17.470 --> 00:05:18.345\nIt's funny-\n&gt;&gt; Perfect.\n\n98\n00:05:18.345 --> 00:05:19.530\n[LAUGH]\n&gt;&gt; Yes, I know.\n\n99\n00:05:19.530 --> 00:05:20.590\nIt's a great question, right?\n\n100\n00:05:20.590 --> 00:05:23.410\n&gt;&gt; Yeah.\n&gt;&gt; I hear hashing, or you hear hash, and\n\n101\n00:05:23.410 --> 00:05:30.200\nyou think hashing, hashing algorithms,\nencoding this into a message digest.\n\n102\n00:05:30.200 --> 00:05:32.480\nThat's really not what we're doing here.\n\n103\n00:05:32.480 --> 00:05:34.714\nIt has nothing to do\nwith hashing algorithms.\n\n104\n00:05:34.714 --> 00:05:38.130\n&gt;&gt; Good. [LAUGH] &gt;&gt; It just happens to be\nthe name that they decided to use for it.\n\n105\n00:05:38.130 --> 00:05:38.780\n&gt;&gt; Yay.\n&gt;&gt; Yeah, right [LAUGH]?\n\n106\n00:05:38.780 --> 00:05:43.860\n&gt;&gt; Like we don't have enough\nto think about, right?\n\n107\n00:05:43.860 --> 00:05:46.550\n&gt;&gt; It's also called, I wanna say\nthere's a term they use, splatting.\n\n108\n00:05:46.550 --> 00:05:50.920\nIf you guys out there in the chatroom\nhave heard that before, let me know.\n\n109\n00:05:50.920 --> 00:05:54.170\nI think it's a way to,\nwhat they call splatting values as well.\n\n110\n00:05:54.170 --> 00:05:57.970\nBut yeah, it's actually just a name for\nthis thing.\n\n111\n00:05:57.970 --> 00:05:59.910\nSo it has nothing to do\nwith hashing algorithms.\n\n112\n00:05:59.910 --> 00:06:03.840\n&gt;&gt; My gosh, yeah, and the word key being\nused with it just really insinuates that,\n\n113\n00:06:03.840 --> 00:06:04.780\nso I'm glad I asked.\n\n114\n00:06:04.780 --> 00:06:06.050\n&gt;&gt; Yeah,\nthink more like registry key, right?\n\n115\n00:06:06.050 --> 00:06:06.750\n&gt;&gt; Okay.\n\n116\n00:06:06.750 --> 00:06:09.990\n&gt;&gt; A registry entry is a key and\nyou've got a value stored there,\n\n117\n00:06:09.990 --> 00:06:14.270\nlike your default browser is this,\nyour home page is this.\n\n118\n00:06:14.270 --> 00:06:16.660\nYour background color is this.\n\n119\n00:06:16.660 --> 00:06:18.665\nEach one of those is a key value pair,\nright?\n\n120\n00:06:18.665 --> 00:06:21.268\n&gt;&gt; Okay.\n&gt;&gt; There's the key, the item, equals, and\n\n121\n00:06:21.268 --> 00:06:24.342\nthen the value you wanna store for\nthat particular table.\n\n122\n00:06:24.342 --> 00:06:28.765\nAll right, so let's take a look at\ncreating a hash table, shall we?\n\n123\n00:06:28.765 --> 00:06:30.035\n&gt;&gt; Yeah, I want to see this [LAUGH].\n\n124\n00:06:30.035 --> 00:06:31.565\n&gt;&gt; All right,\nlet's take a look at my screen here.\n\n125\n00:06:31.565 --> 00:06:34.064\nAgain, I've saved us the trouble\nof watching Mike type.\n\n126\n00:06:34.064 --> 00:06:37.113\nI've got some preloaded\ncommands that I'm gonna and\n\n127\n00:06:37.113 --> 00:06:39.898\nhere's a good example of\ncreating a hash table.\n\n128\n00:06:39.898 --> 00:06:42.590\nYou see my @ at the beginning.\n\n129\n00:06:42.590 --> 00:06:46.540\nI've got my open brace to indicate\nthe beginning of my hash table.\n\n130\n00:06:46.540 --> 00:06:50.090\nI have a key value pair, right?\n\n131\n00:06:50.090 --> 00:06:54.830\nAnd I am treating that IP address as\na string, cuz it's not an integer.\n\n132\n00:06:54.830 --> 00:06:57.330\nSo I've got that inside my quotes.\n\n133\n00:06:57.330 --> 00:06:59.644\nAnd then I have a semicolon.\n\n134\n00:06:59.644 --> 00:07:02.220\nAs I try to move things around there,\n\n135\n00:07:02.220 --> 00:07:07.090\nI've got my semi colon separating\nmy next key value pair.\n\n136\n00:07:07.090 --> 00:07:11.540\nAnd then if that's my last key value pair,\nI've got my ending curly brace or\n\n137\n00:07:11.540 --> 00:07:15.350\nmy ending brace to indicate\nthe end of my hash table.\n\n138\n00:07:15.350 --> 00:07:20.240\nSo if I run that line, I'll see that I\nget a pretty cool looking little table.\n\n139\n00:07:20.240 --> 00:07:20.740\n&gt;&gt; Table, yeah.\n&gt;&gt; Right?\n\n140\n00:07:20.740 --> 00:07:22.560\nI've got my name and my value.\n\n141\n00:07:22.560 --> 00:07:24.900\nMy key and my value.\n\n142\n00:07:24.900 --> 00:07:28.370\nAnd like I said,\nthese are extremely handy.\n\n143\n00:07:28.370 --> 00:07:31.580\nWe'll see as we start\ngetting into scripting,\n\n144\n00:07:32.920 --> 00:07:34.790\nlike with the example I have here,\nIP addresses.\n\n145\n00:07:34.790 --> 00:07:37.360\nTrying to remember IP\naddresses can be challenging.\n\n146\n00:07:38.360 --> 00:07:43.000\nIf I have a hash table with all\nthe names of my servers and\n\n147\n00:07:43.000 --> 00:07:44.900\ntheir IP addresses in there.\n\n148\n00:07:44.900 --> 00:07:48.933\nNow within my script, if I need the IP\naddress of a server, I can simply call\n\n149\n00:07:48.933 --> 00:07:53.304\nthat key, the name of that server from my\nhash table, and return its IP address.\n\n150\n00:07:53.304 --> 00:07:53.807\n&gt;&gt; Nice.\n\n151\n00:07:53.807 --> 00:07:56.248\n&gt;&gt; So it's extremely useful.\n\n152\n00:07:56.248 --> 00:07:58.065\nYou'll see these used a lot.\n\n153\n00:07:58.065 --> 00:08:01.972\nNow this second one Well\nactually before I go on here.\n\n154\n00:08:01.972 --> 00:08:05.752\nWhen we create hash tables, we really\nwant to store them in a variable,\n\n155\n00:08:05.752 --> 00:08:08.335\nright, because I want to\nbe able to manipulate or\n\n156\n00:08:08.335 --> 00:08:10.800\nwork with the data that's\nin that hash table.\n\n157\n00:08:10.800 --> 00:08:14.730\nI created this hash table, and it displays\nit, and that's all I've got right.\n\n158\n00:08:14.730 --> 00:08:16.610\nHow do I go back and access that?\n\n159\n00:08:16.610 --> 00:08:21.030\nWe'll I didn't create a stored in a\nvariables I have no way of going back into\n\n160\n00:08:21.030 --> 00:08:25.810\nthat particular hash tables not very\nuseful in this case although it is pretty\n\n161\n00:08:25.810 --> 00:08:30.900\non screen, but\nhere I'm gonna use a variable, all right?\n\n162\n00:08:30.900 --> 00:08:35.970\nI'm gonna create a variable $IP= so just\nlike creating any other variable assigning\n\n163\n00:08:35.970 --> 00:08:42.360\na value to it, but instead of a scale or\na single value, a urinary value.\n\n164\n00:08:42.360 --> 00:08:47.940\nIf you have an @,\nindicating I am creating a hash table.\n\n165\n00:08:47.940 --> 00:08:55.180\nI got my open curly or an open brace, and\ninstead of putting it all on one line,\n\n166\n00:08:55.180 --> 00:09:00.150\nif I've got 20 servers, 100 servers,\n1,000 servers that I manipulate or\n\n167\n00:09:00.150 --> 00:09:05.380\nwork with, I am not going to have\none line code running off my screen\n\n168\n00:09:05.380 --> 00:09:09.760\ntrying to use the line continuation\ncharacter, which we can do, right?\n\n169\n00:09:09.760 --> 00:09:13.660\nWe've got the back tick, or\nthe graph that I can use for\n\n170\n00:09:13.660 --> 00:09:15.840\nline continuation, will work.\n\n171\n00:09:15.840 --> 00:09:20.180\nAnd in display purposes, it makes it\npretty readable using that back tick, but\n\n172\n00:09:20.180 --> 00:09:24.500\nI'll tell you, I'm not a big\nfan of it because I don't think\n\n173\n00:09:25.630 --> 00:09:27.332\nWhat's a good way to say it?\n\n174\n00:09:27.332 --> 00:09:31.360\nThat only works if it's\nthe last character on the line.\n\n175\n00:09:31.360 --> 00:09:34.930\nSo you'd have for example,\nI could try to do a.\n\n176\n00:09:34.930 --> 00:09:39.420\nNow Powershell, especially the ISC\nis very good about letting\n\n177\n00:09:39.420 --> 00:09:42.510\nyou do line continuation\nwithout actually typing it in.\n\n178\n00:09:42.510 --> 00:09:46.140\nSo if I have typically a break on\na pipe or the end of a value or\n\n179\n00:09:46.140 --> 00:09:47.700\nsomething like it,\nit'll actually accept it.\n\n180\n00:09:47.700 --> 00:09:51.500\nBut what you normally do\nto do a line continuation\n\n181\n00:09:51.500 --> 00:09:53.530\nwould be something like that, right?\n\n182\n00:09:53.530 --> 00:09:57.070\nYou see how when it was here,\nall of a sudden I get this crazy stuff?\n\n183\n00:09:57.070 --> 00:10:00.910\nBut if I do this,\nit's like everything's fine.\n\n184\n00:10:00.910 --> 00:10:01.526\n&gt;&gt; And\nyou just [CROSSTALK] Enter for that?\n\n185\n00:10:01.526 --> 00:10:04.580\n&gt;&gt; It's this little back tick right there,\nright?\n\n186\n00:10:04.580 --> 00:10:07.210\nSo I'm saying hey,\nI can't go any further, I'm out of space.\n\n187\n00:10:07.210 --> 00:10:10.740\nMaybe I don't want, for some reason,\nI don't wanna run on anymore.\n\n188\n00:10:10.740 --> 00:10:13.890\nLet's say the window's like this, right?\n\n189\n00:10:13.890 --> 00:10:15.860\nAnd I know I've got a lot of IP addresses.\n\n190\n00:10:15.860 --> 00:10:18.730\nI can do that back tic line continuation.\n\n191\n00:10:18.730 --> 00:10:22.220\nNow PowerShell sees this as one line,\nright?\n\n192\n00:10:22.220 --> 00:10:25.480\nIt's saying hey,\nignore my carriage return.\n\n193\n00:10:25.480 --> 00:10:28.420\nThat's what that line continuation does.\n\n194\n00:10:28.420 --> 00:10:33.090\nThe problem is, if I get a space after\nthat and it looks like the ISC is actually\n\n195\n00:10:33.090 --> 00:10:37.170\nfixing it for me, but if you get any\ncharacter returns or spaces after.\n\n196\n00:10:37.170 --> 00:10:39.720\nThat was my character return,\nbut any spaces after this,\n\n197\n00:10:39.720 --> 00:10:42.440\nit will typically break\nyour line continuation.\n\n198\n00:10:42.440 --> 00:10:46.620\nAnd trouble shooting was you're\nlooking at the script from afar.\n\n199\n00:10:46.620 --> 00:10:48.020\n&gt;&gt; And you don't see anything.\n\n200\n00:10:48.020 --> 00:10:48.800\n&gt;&gt; Everything looks good.\n\n201\n00:10:48.800 --> 00:10:49.850\n&gt;&gt; Right.\n&gt;&gt; Exactly and\n\n202\n00:10:49.850 --> 00:10:54.670\nthen you realize if I put my cursor, there\nis a space after that line continuation.\n\n203\n00:10:54.670 --> 00:10:56.450\nSo let me back up there and\nget rid of that.\n\n204\n00:10:56.450 --> 00:10:57.940\n&gt;&gt; That could be a headache.\n\n205\n00:10:57.940 --> 00:10:59.650\n&gt;&gt; A nightmare [LAUGH].\n\n206\n00:10:59.650 --> 00:11:04.800\nAt least for me in the way I type,\nI can end up messing up a bunch of stuff.\n\n207\n00:11:04.800 --> 00:11:07.320\nSo that's just my personal opinion.\n\n208\n00:11:07.320 --> 00:11:09.530\nUnderstand that you can\nuse line continuations.\n\n209\n00:11:09.530 --> 00:11:10.480\nI like this.\n\n210\n00:11:10.480 --> 00:11:11.940\nI think this looks good.\n\n211\n00:11:11.940 --> 00:11:15.760\nI think it's very readable for\nsomebody else that's looking at my code or\n\n212\n00:11:15.760 --> 00:11:16.900\nmy script.\n\n213\n00:11:16.900 --> 00:11:21.210\nYou can see that I have my\nequals at open brace and\n\n214\n00:11:21.210 --> 00:11:27.092\nthen each value, or each value pair\nI should say, on it's own line.\n\n215\n00:11:27.092 --> 00:11:32.930\nAll right, now, I could put a semicolon\nat the end of every one of these\n\n216\n00:11:32.930 --> 00:11:34.690\nand Parish would be like that's fine,\n\n217\n00:11:34.690 --> 00:11:37.760\nbecause you are supposed to separate\nkey value pairs with a semicolon, but\n\n218\n00:11:37.760 --> 00:11:41.720\nline break works just as well, so\nI don't have to put that on there.\n\n219\n00:11:42.820 --> 00:11:47.380\nAll right, and again the key here\nis I'm storing it into a variable,\n\n220\n00:11:47.380 --> 00:11:49.680\nwhich means I'll be able to\nwork with this hash table.\n\n221\n00:11:49.680 --> 00:11:54.220\nSo let's try this one; we'll run that, and\n\n222\n00:11:54.220 --> 00:11:59.950\nagain I get my nice, pretty hashtable down\nhere in my output as it runs that command.\n\n223\n00:11:59.950 --> 00:12:04.700\nBut now if I call that variable\nback notice I get my hash table.\n\n224\n00:12:04.700 --> 00:12:08.030\nNow there's a couple things I want\nyou to pay attention to here.\n\n225\n00:12:08.030 --> 00:12:09.970\nSo all I did just like any other variable.\n\n226\n00:12:09.970 --> 00:12:14.340\nIf you type that dollar sign variable\nyou're gonna return that value.\n\n227\n00:12:14.340 --> 00:12:15.950\nIn this case it's many values, right?\n\n228\n00:12:15.950 --> 00:12:18.580\nKey values pairs in my hash table.\n\n229\n00:12:18.580 --> 00:12:21.670\nLook at the order Cherokee that\nI've returned them in here.\n\n230\n00:12:21.670 --> 00:12:23.290\nThree one four two\n&gt;&gt; Yeah,\n\n231\n00:12:23.290 --> 00:12:26.490\nhere's the order that I entered them in,\nright?\n\n232\n00:12:26.490 --> 00:12:28.740\n&gt;&gt; One two three four\n&gt;&gt; Here's the order that it returns them\n\n233\n00:12:28.740 --> 00:12:29.876\n&gt;&gt; All right, let's look at the IP\n\n234\n00:12:29.876 --> 00:12:32.080\naddresses, any correlation there?\n\n235\n00:12:32.080 --> 00:12:35.290\n&gt;&gt; No it still maintains the key value\npair, it's not gonna lose anything like\n\n236\n00:12:35.290 --> 00:12:41.340\nthat, but\nthe order is not sorted by the order\n\n237\n00:12:41.340 --> 00:12:46.180\nthat I entered them in which is what a lot\nof us are going to expect when we do that.\n\n238\n00:12:46.180 --> 00:12:50.850\nInterestingly enough, every time I've done\nthis it's always come back with 3142.\n\n239\n00:12:50.850 --> 00:12:54.060\nIt's like it's working inside-out.\n\n240\n00:12:54.060 --> 00:12:59.280\nI don't know if that's the case,\nwe'd have to ask Mike on that one but\n\n241\n00:12:59.280 --> 00:13:03.360\nPowerShell will tell you, if you read\nthe help Even this is not guaranteed.\n\n242\n00:13:03.360 --> 00:13:06.290\nJust because it came up 3142 this time,\n\n243\n00:13:06.290 --> 00:13:09.710\nthe next time I view these results\nit very well could be different.\n\n244\n00:13:09.710 --> 00:13:13.128\nLet's try doing it again a couple\ntimes and just see what happens here.\n\n245\n00:13:13.128 --> 00:13:14.080\n3142.\n\n246\n00:13:14.080 --> 00:13:15.040\n3142.\n\n247\n00:13:15.040 --> 00:13:18.940\n&gt;&gt; So basically you just got to\npay attention and not assume,\n\n248\n00:13:18.940 --> 00:13:21.060\nhey it's going to come out in this format.\n\n249\n00:13:21.060 --> 00:13:23.840\n&gt;&gt; Yeah, typically we're storing things\nin here that we're not to worried about.\n\n250\n00:13:23.840 --> 00:13:28.250\nAnd we can sort output right, we've\nlooking at formatting and sort object I\n\n251\n00:13:28.250 --> 00:13:30.980\nthink in some of our previous in\nthe Powershell's basics and stuff,\n\n252\n00:13:30.980 --> 00:13:35.200\nif not we'll kind of go over that again at\nsome odd point in this series I'm sure.\n\n253\n00:13:36.380 --> 00:13:37.830\nWe could sort it.\n\n254\n00:13:37.830 --> 00:13:41.970\nBut like I was saying towards the\nbeginning of this episode, usually, and\n\n255\n00:13:41.970 --> 00:13:43.880\nagain, it depends on what\nyou're doing with it.\n\n256\n00:13:43.880 --> 00:13:46.790\nBut the times that I find myself\nworking with hash tables,\n\n257\n00:13:46.790 --> 00:13:48.440\nthe order's not that important.\n\n258\n00:13:48.440 --> 00:13:52.790\nBecause I'm just using this as a, almost\nlike a database or a spreadsheet, right?\n\n259\n00:13:52.790 --> 00:13:57.100\nA way to store these values, so that I\ncan quickly retrieve the IP address for\n\n260\n00:13:57.100 --> 00:13:58.270\nserver three.\n\n261\n00:13:58.270 --> 00:14:02.520\nTo me it doesn't matter if server three\nis the first one in the hash table,\n\n262\n00:14:02.520 --> 00:14:04.910\nthe second one, the third one,\nthe fourth one.\n\n263\n00:14:04.910 --> 00:14:07.090\nAll I'm saying is that I need the IP for\nserver three,\n\n264\n00:14:07.090 --> 00:14:09.120\nhere's the key, what's the value?\n\n265\n00:14:09.120 --> 00:14:12.980\nThe fact that they're not ordered\nreally makes no difference to me.\n\n266\n00:14:12.980 --> 00:14:17.130\nIf the scenario changes, and\nyou do need that order [COUGH], excuse me,\n\n267\n00:14:17.130 --> 00:14:21.650\nthat's when we're going to use that\norder dictionary and not a hash table.\n\n268\n00:14:21.650 --> 00:14:25.950\nSo the fact that has tables\nare not sorted or not ordered or\n\n269\n00:14:25.950 --> 00:14:28.170\nanything like is really fun.\n\n270\n00:14:28.170 --> 00:14:29.718\nI'm not too worried about it.\n\n271\n00:14:29.718 --> 00:14:32.340\n[COUGH] Excuse me.\n\n272\n00:14:32.340 --> 00:14:36.820\nSo we've got values in our hash\ntable where you can return that\n\n273\n00:14:36.820 --> 00:14:39.970\nCouple other things we should be\nable to do with our hash tables.\n\n274\n00:14:39.970 --> 00:14:42.170\nWe can return a list of just the keys.\n\n275\n00:14:42.170 --> 00:14:42.780\nRight?\n\n276\n00:14:42.780 --> 00:14:49.090\nHere you can see again we're using\nthe methods here of my object.\n\n277\n00:14:49.090 --> 00:14:52.840\nIn this case my object\nis a hash [INAUDIBLE].\n\n278\n00:14:52.840 --> 00:14:54.090\nLet's take a look at the gettype.\n\n279\n00:14:54.090 --> 00:14:55.560\nWe haven't done that yet either.\n\n280\n00:14:55.560 --> 00:15:00.160\nGettype on that guy And\nyou can see my type of the object\n\n281\n00:15:00.160 --> 00:15:04.930\nis indy hash table Take that back.\n\n282\n00:15:06.380 --> 00:15:09.580\nNow, all right, so\none of my properties there of my IP.\n\n283\n00:15:09.580 --> 00:15:15.070\nb is keys we run this, over to the list\nof all the keys letter in there.\n\n284\n00:15:15.070 --> 00:15:18.270\nSo I want to see you, what computers\nI have the right IP address for and\n\n285\n00:15:18.270 --> 00:15:20.420\nwhat servers I don't have them yet.\n\n286\n00:15:20.420 --> 00:15:22.050\nMaybe I just want to\nreturn all of the keys.\n\n287\n00:15:22.050 --> 00:15:25.820\nAnd this is where I maybe I want to\nsort it to make it easier to spot that,\n\n288\n00:15:25.820 --> 00:15:27.090\nhey, I don't have five.\n\n289\n00:15:27.090 --> 00:15:29.390\nOr if I had one, two, four and\n\n290\n00:15:29.390 --> 00:15:32.830\nfive Somewhere I'm missing\nserver 3's IP address.\n\n291\n00:15:32.830 --> 00:15:35.880\nSo I might want to look at\nmaybe sorting that output.\n\n292\n00:15:35.880 --> 00:15:41.790\nValues, same thing,\njust return all the values.\n\n293\n00:15:41.790 --> 00:15:46.740\nUsually the values aren't much good\nwithout the key, I don't know,\n\n294\n00:15:46.740 --> 00:15:49.030\nokay here's a list of IP addresses.\n\n295\n00:15:49.030 --> 00:15:49.765\nBut whose idea [CROSSTALK].\n\n296\n00:15:49.765 --> 00:15:50.510\n&gt;&gt; Right.\n\n297\n00:15:50.510 --> 00:15:51.210\n&gt;&gt; Right.\n\n298\n00:15:51.210 --> 00:15:54.712\nOr maybe this is a hash table\nof all my front end web severs.\n\n299\n00:15:54.712 --> 00:15:59.642\nAnd I just want to ping each one every\nmorning, or do some maintenance task,\n\n300\n00:15:59.642 --> 00:16:00.191\nright.\n\n301\n00:16:00.191 --> 00:16:03.371\nAnd it doesn't matter which server\nit is and what order I do it in.\n\n302\n00:16:03.371 --> 00:16:04.944\nI just need to make\nsure I hit all of them.\n\n303\n00:16:04.944 --> 00:16:08.562\nSo just having a list of all the IP\naddresses that I can cycle through might\n\n304\n00:16:08.562 --> 00:16:10.320\nbe perfectly fine, right?\n\n305\n00:16:10.320 --> 00:16:13.970\nAnd I don't really care about the key\nthat's associated with that value.\n\n306\n00:16:13.970 --> 00:16:18.830\nWell, definitely some value, if that's\nnot redundant, in being able to retrieve\n\n307\n00:16:18.830 --> 00:16:22.558\njust a list of the values, or\njust a list of the keys, all right?\n\n308\n00:16:24.040 --> 00:16:29.110\nLet's see, we can also pull back\nindividual keys and values, right?\n\n309\n00:16:29.110 --> 00:16:32.749\nAnd here,\nI've done the hash table name, dot, and\n\n310\n00:16:32.749 --> 00:16:36.450\nthen my key that I wanna\nreturn the value for.\n\n311\n00:16:36.450 --> 00:16:38.830\nAnd so I can run that particular command.\n\n312\n00:16:38.830 --> 00:16:42.860\nAnd you'll see that I\nreturned the IP address or\n\n313\n00:16:42.860 --> 00:16:48.221\njust that one particular item or\nkey in that hash table, okay?\n\n314\n00:16:49.990 --> 00:16:54.250\nNow, cool thing about the hash table,\nif that wasn't cool enough, right?\n\n315\n00:16:54.250 --> 00:16:56.500\nI'm sorry, I geek out on hash tables.\n\n316\n00:16:56.500 --> 00:17:00.170\n&gt;&gt; I had no clue what a hash table\nwas before, before just now.\n\n317\n00:17:00.170 --> 00:17:00.850\nAnd I really like it.\n\n318\n00:17:00.850 --> 00:17:02.080\nI see the value in.\n\n319\n00:17:02.080 --> 00:17:02.970\nNo pun intended.\n\n320\n00:17:02.970 --> 00:17:03.868\nI think it's really cool.\n\n321\n00:17:03.868 --> 00:17:06.320\n&gt;&gt; Yeah, I mean,\nthey're fast and they're great.\n\n322\n00:17:06.320 --> 00:17:07.786\nLike I said, a quick,\n\n323\n00:17:07.786 --> 00:17:12.736\neasy retrieval of information when\nwe're creating objects a lot of times.\n\n324\n00:17:12.736 --> 00:17:15.870\nNow, we haven't got into creating objects,\nthat'll come down the road.\n\n325\n00:17:15.870 --> 00:17:20.490\nBut when you're creating an object, you\ntypically need to provide several values.\n\n326\n00:17:20.490 --> 00:17:22.920\nIf I'm going to make an object\nthat represents you,\n\n327\n00:17:22.920 --> 00:17:26.400\nI might put in your first name,\nyour last name,\n\n328\n00:17:26.400 --> 00:17:30.950\nyour position, and other values,\nright, as I go to create that object.\n\n329\n00:17:30.950 --> 00:17:35.846\nAnd when I create that new object,\nI've got to do new dash object.\n\n330\n00:17:35.846 --> 00:17:40.130\nAnd then dash name is Cherokee, and\n\n331\n00:17:40.130 --> 00:17:45.920\ndash last name is Boose,\nand dash role is edutainer.\n\n332\n00:17:45.920 --> 00:17:48.080\nWhat I can do is I can do a new object,\nand\n\n333\n00:17:48.080 --> 00:17:51.730\nthen point it to the hash table\nthat already has all that stored.\n\n334\n00:17:51.730 --> 00:17:55.718\nFirst name is Cherokee, last name\nequals Boose, role equals edutainer.\n\n335\n00:17:55.718 --> 00:17:58.270\nAnd I don't have to type\nthat all out in the command.\n\n336\n00:17:58.270 --> 00:18:02.161\nAnd that gives me reusability\nof that parameter set.\n\n337\n00:18:02.161 --> 00:18:07.063\nSo, yeah, there's a lot of uses for\nhash tables.\n\n338\n00:18:07.063 --> 00:18:11.017\nAll right, let's take a look at this\none that I have here on my screen.\n\n339\n00:18:11.017 --> 00:18:13.817\nRemember what I said that\nwhen we look at hash tables,\n\n340\n00:18:13.817 --> 00:18:16.440\nthe hash table itself is an object, right?\n\n341\n00:18:16.440 --> 00:18:18.580\nIt has properties and\nmethods that we can use.\n\n342\n00:18:18.580 --> 00:18:23.630\nWe saw the dot keys,\nthe dot values, and then a keyname.\n\n343\n00:18:23.630 --> 00:18:28.470\nBut within the hash table,\nthe key is an object, right?\n\n344\n00:18:28.470 --> 00:18:30.930\nThe value is an object.\n\n345\n00:18:30.930 --> 00:18:34.147\nWe can store objects within\nthe hash table as well.\n\n346\n00:18:34.147 --> 00:18:36.940\nRemember, everything in PowerShell\nends up being an object,\n\n347\n00:18:36.940 --> 00:18:39.550\nit's what makes PowerShell so powerful.\n\n348\n00:18:40.740 --> 00:18:44.330\nSo in this case,\nI'm going to do a new hash table,\n\n349\n00:18:44.330 --> 00:18:46.512\nand I'm going to call it svc info.\n\n350\n00:18:46.512 --> 00:18:49.897\nAll right,\nthat's the name I'm going to assign it.\n\n351\n00:18:49.897 --> 00:18:51.437\nAt open brace.\n\n352\n00:18:51.437 --> 00:18:58.480\nAnd then I'm going to do a string for\nmy key name, okay, or my key.\n\n353\n00:18:58.480 --> 00:19:01.510\nRemember, strings are always\ngoing to be enclosed in quotes.\n\n354\n00:19:01.510 --> 00:19:04.698\nEquals, and then for my value,\n\n355\n00:19:04.698 --> 00:19:09.666\nI'm actually going to do\na get dash service dhcp.\n\n356\n00:19:09.666 --> 00:19:13.561\nSo I'm going to go get that service dhcp.\n\n357\n00:19:13.561 --> 00:19:16.252\nIf I run get-servicedhcp, all right?\n\n358\n00:19:16.252 --> 00:19:21.690\nI return information about\nthat particular service.\n\n359\n00:19:22.810 --> 00:19:29.400\nSo I'm gonna store this\ninformation basically in this key.\n\n360\n00:19:29.400 --> 00:19:31.823\n&gt;&gt; But dynamically, not that information\njust whatever that result would be if you\n\n361\n00:19:31.823 --> 00:19:33.170\nwere running that command line.\n\n362\n00:19:33.170 --> 00:19:34.003\n&gt;&gt; Exactly right.\n\n363\n00:19:34.003 --> 00:19:38.300\nWhen I go create that hash tables,\nit'll go grab this information.\n\n364\n00:19:38.300 --> 00:19:39.619\nWhen I grab that hash table.\n\n365\n00:19:39.619 --> 00:19:43.814\nNow, it doesn't automatically like\nupdate periodically, it's not going to,\n\n366\n00:19:43.814 --> 00:19:46.571\nsay every five minutes I\nwould have to recreate this.\n\n367\n00:19:46.571 --> 00:19:47.242\nActually, you know what?\n\n368\n00:19:47.242 --> 00:19:48.330\nI take that back.\n\n369\n00:19:48.330 --> 00:19:49.880\nBecause I am not storing, you are right.\n\n370\n00:19:49.880 --> 00:19:53.250\nIt would update that every time\nI call that particular value.\n\n371\n00:19:53.250 --> 00:19:54.590\nWe can test it out.\n\n372\n00:19:54.590 --> 00:20:01.200\nWe'll double-check, we'll make\nsure Mike is not lying to us here.\n\n373\n00:20:01.200 --> 00:20:04.287\nAll right, so let's run this and\nsee what we get.\n\n374\n00:20:04.287 --> 00:20:06.618\nSo now I've created my hash table.\n\n375\n00:20:06.618 --> 00:20:09.657\nSo now we're gonna use our commands.\n\n376\n00:20:09.657 --> 00:20:16.811\nWe'll say,\ndollar sign service info dot dhcp.\n\n377\n00:20:16.811 --> 00:20:19.320\nLook, dhcp client is running just fine.\n\n378\n00:20:19.320 --> 00:20:20.238\nStatus is good.\n\n379\n00:20:20.238 --> 00:20:22.501\nDollar sign svc.dns cache.\n\n380\n00:20:22.501 --> 00:20:25.818\nWell, that service is running.\n\n381\n00:20:25.818 --> 00:20:30.881\nSo, I mean, something like this, I can\nshorten up service info to maybe one or\n\n382\n00:20:30.881 --> 00:20:35.750\ntwo characters, and you can see where\nit can quickly run through a whole set\n\n383\n00:20:35.750 --> 00:20:36.386\n&gt;&gt; And just check for\n\n384\n00:20:36.386 --> 00:20:37.420\nmaintenance purposes.\n\n385\n00:20:37.420 --> 00:20:39.020\n&gt;&gt; Yes, exactly.\n\n386\n00:20:39.020 --> 00:20:40.990\nThis list could be much, much longer.\n\n387\n00:20:42.330 --> 00:20:47.544\nThere's actually another thing I might\ndo is, because this is an object, right?\n\n388\n00:20:47.544 --> 00:20:51.111\nI could do dot status, right?\n\n389\n00:20:51.111 --> 00:20:52.498\nSo we could even do this differently.\n\n390\n00:20:52.498 --> 00:20:53.503\nLet's try something.\n\n391\n00:20:53.503 --> 00:20:55.185\nYou wanna change it up on the fly?\n\n392\n00:20:55.185 --> 00:20:57.053\n&gt;&gt; It always works great when we do that.\n\n393\n00:20:57.053 --> 00:20:58.470\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] Let's do it.\n\n394\n00:20:58.470 --> 00:21:01.445\n&gt;&gt; It never blows up when\nthe red light is on, right?\n\n395\n00:21:01.445 --> 00:21:04.140\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's do another one, and\n\n396\n00:21:04.140 --> 00:21:08.254\nwe'll see if we can do it\nright here on the camera live.\n\n397\n00:21:08.254 --> 00:21:15.670\nSay dollar sign, svc, excuse me,\nstatus, equals, at symbol, open brace.\n\n398\n00:21:15.670 --> 00:21:22.466\nAnd then for my first value,\nI'm actually going to grab this,\n\n399\n00:21:22.466 --> 00:21:27.481\nbecause it's a lot easier\nthan typing it out.\n\n400\n00:21:27.481 --> 00:21:31.144\nIs gonna be equal to that again.\n\n401\n00:21:37.291 --> 00:21:43.782\nLet's just copy that again because\nI'm such a lazy [INAUDIBLE].\n\n402\n00:21:43.782 --> 00:21:45.360\nAll right, that, status.\n\n403\n00:21:45.360 --> 00:21:50.308\nAnd we might as well do both of them.\n\n404\n00:21:50.308 --> 00:21:52.451\nSo let's take this one.\n\n405\n00:21:53.665 --> 00:21:56.038\nAnd let's do dot status.\n\n406\n00:21:56.038 --> 00:22:00.798\nAnd then let's close that brace,\nand let's see what we get.\n\n407\n00:22:00.798 --> 00:22:05.436\nAll right, so we'll execute.\n\n408\n00:22:05.436 --> 00:22:06.310\nNo red text?\n\n409\n00:22:06.310 --> 00:22:07.720\nAlways a good thing.\n\n410\n00:22:07.720 --> 00:22:12.624\nAnd now if I do dollar sign sv status dot\n\n411\n00:22:22.488 --> 00:22:24.450\nThat's a good question,\nI did not give that a name.\n\n412\n00:22:24.450 --> 00:22:26.630\nI wonder how I'm gonna access that now.\n\n413\n00:22:27.990 --> 00:22:29.410\nLet's just get the whole thing.\n\n414\n00:22:29.410 --> 00:22:31.060\nThere you go.\n\n415\n00:22:31.060 --> 00:22:34.790\nI'm trying to recall how we would now,\nbecause it's not really a name or\n\n416\n00:22:34.790 --> 00:22:36.700\na string.\n\n417\n00:22:36.700 --> 00:22:39.530\nI think I have to type that out,\nI have to double-check on that.\n\n418\n00:22:39.530 --> 00:22:43.380\nBut here you can see by just\nreturning the hash table, right,\n\n419\n00:22:43.380 --> 00:22:46.840\nI can see both of those services and\ntheir current status.\n\n420\n00:22:46.840 --> 00:22:49.170\nSo a quick easy way to automate.\n\n421\n00:22:49.170 --> 00:22:51.852\nYeah, I understand,\nI could do a get process, right?\n\n422\n00:22:51.852 --> 00:22:52.700\nOr a get service.\n\n423\n00:22:52.700 --> 00:22:55.466\nBut if there's three-\n&gt;&gt; Or use slightly more system center,\n\n424\n00:22:55.466 --> 00:22:57.234\nsome kind of advanced solution.\n\n425\n00:22:57.234 --> 00:23:00.167\nBut this is being innovative or thinking,\n\n426\n00:23:00.167 --> 00:23:05.050\nworking with what you have, I guess is-\n&gt;&gt; Yeah, a quick easy way maybe.\n\n427\n00:23:05.050 --> 00:23:08.182\nThere's only three particular services I\nneed to check on on those Web Servers to\n\n428\n00:23:08.182 --> 00:23:11.471\nmake sure they're running, and I have to\ndo it every morning or every hour, right?\n\n429\n00:23:11.471 --> 00:23:15.127\nSo we can start using that hash table\nthat has a list of my servers and\n\n430\n00:23:15.127 --> 00:23:18.410\ntheir IP addresses, and\nI can start pumping that in again.\n\n431\n00:23:18.410 --> 00:23:20.760\nWe'll get into our loops and\nour constructs, but\n\n432\n00:23:20.760 --> 00:23:23.400\nmaybe I combine that with this.\n\n433\n00:23:23.400 --> 00:23:27.650\nOr each one of the computers in that hash\ntable go get these three services and\n\n434\n00:23:27.650 --> 00:23:29.570\ngive me their status, right?\n\n435\n00:23:29.570 --> 00:23:34.490\nAnd again, start automating some of this\ndaily routine that we have to do, or\n\n436\n00:23:34.490 --> 00:23:36.635\nanything that we have to do repetitively.\n\n437\n00:23:36.635 --> 00:23:40.137\nI hope that kinda opens your\nmind a little bit, and go wow,\n\n438\n00:23:40.137 --> 00:23:44.787\nit's not just key-value pairs,\nlike storing states and their capital, or\n\n439\n00:23:44.787 --> 00:23:47.021\ncomputer name and their IP address.\n\n440\n00:23:47.021 --> 00:23:50.963\nWe can, because everything\nin PowerShell is an object,\n\n441\n00:23:50.963 --> 00:23:54.502\nwe can store objects even as the key or\nas the value.\n\n442\n00:23:54.502 --> 00:23:59.002\n&gt;&gt; I think that's one of the reasons why,\nI know I'm like, I love PowerShell so\n\n443\n00:23:59.002 --> 00:24:03.919\nmuch is for the fact, I'm sure it's like\nthis with many scripting languages We look\n\n444\n00:24:03.919 --> 00:24:07.589\nat something and see how it performs,\nand then I think, okay,\n\n445\n00:24:07.589 --> 00:24:09.145\nwell, how can I use this?\n\n446\n00:24:09.145 --> 00:24:13.140\nBut Mike, you may have a totally different\nperspective on how you would use that.\n\n447\n00:24:13.140 --> 00:24:16.055\nAnd just talking about it and\nsharing this information,\n\n448\n00:24:16.055 --> 00:24:18.220\nwe don't know what we'll come up with.\n\n449\n00:24:18.220 --> 00:24:19.140\n&gt;&gt; I know.\n&gt;&gt; [LAUGH]\n\n450\n00:24:19.140 --> 00:24:22.000\n&gt;&gt; We talked about this back when we\n\n451\n00:24:22.000 --> 00:24:23.910\nwere all sitting back off camera.\n\n452\n00:24:23.910 --> 00:24:25.710\nWe talk about this kind of thing a lot,\nand\n\n453\n00:24:25.710 --> 00:24:30.750\nit's really cool that with programming,\nthere's always more than one way to go.\n\n454\n00:24:30.750 --> 00:24:31.390\n&gt;&gt; Right.\n\n455\n00:24:31.390 --> 00:24:35.140\n&gt;&gt; And not to say that one way might be\nbetter than the other, or more efficient\n\n456\n00:24:35.140 --> 00:24:39.370\nthan the other, for sure, but one of\nthe things I love about PowerShell and\n\n457\n00:24:39.370 --> 00:24:42.200\nprogramming in general is it's logical,\nright?\n\n458\n00:24:43.220 --> 00:24:46.100\nIt's doing what you tell\nit to do even though\n\n459\n00:24:46.100 --> 00:24:47.770\nit's not giving you the results you want.\n\n460\n00:24:47.770 --> 00:24:49.622\nThat just means you're not\ntelling it the right way, right?\n\n461\n00:24:49.622 --> 00:24:52.506\n&gt;&gt; [LAUGH]\n&gt;&gt; And that can be frustrating sometimes,\n\n462\n00:24:52.506 --> 00:24:55.880\nbut it's very logical,\nand it's like a puzzle.\n\n463\n00:24:55.880 --> 00:24:57.800\nThis is the result I want.\n\n464\n00:24:57.800 --> 00:24:58.820\nHow can I obtain this?\n\n465\n00:24:58.820 --> 00:25:03.060\nWhat's the most efficient,\neffective way to get that information, and\n\n466\n00:25:03.060 --> 00:25:04.330\nthat's what programming's all about.\n\n467\n00:25:04.330 --> 00:25:07.100\nSo it's really, really fun stuff, I think.\n\n468\n00:25:07.100 --> 00:25:08.446\nHopefully, you guys do as well.\n\n469\n00:25:08.446 --> 00:25:11.051\nAll right, I know we got\na few minutes left, Cherokee.\n\n470\n00:25:11.051 --> 00:25:15.683\nI wanna show us that ordered\ndictionary as well, yeah.\n\n471\n00:25:15.683 --> 00:25:16.228\n&gt;&gt; Okay.\n\n472\n00:25:16.228 --> 00:25:17.780\n&gt;&gt; So let's take a look at that.\n\n473\n00:25:17.780 --> 00:25:22.080\nLet me, I'm gonna save my changes to\nthat script real quick just in case\n\n474\n00:25:22.080 --> 00:25:26.320\nI goof anything up, so you guys have the\ninformation to play with after the fact.\n\n475\n00:25:26.320 --> 00:25:31.170\nSo I'm gonna go up back here to our\noriginal hash tables that we created.\n\n476\n00:25:31.170 --> 00:25:35.838\nRemember, if I do $ip we're\ngonna see that they are returned\n\n477\n00:25:35.838 --> 00:25:39.501\nnot in the order that I\nentered those values in.\n\n478\n00:25:39.501 --> 00:25:42.115\nAll right, and\nthat's just the way hash tables are.\n\n479\n00:25:42.115 --> 00:25:49.568\nBut if I change this up, all right,\nif I go in front of this ip.\n\n480\n00:25:49.568 --> 00:25:51.101\nAnd let's change this.\n\n481\n00:25:51.101 --> 00:25:54.263\nI'm gonna actually create a different\nvariable to store this in, so\n\n482\n00:25:54.263 --> 00:25:57.600\nI don't override our originals,\nso we can kinda compare.\n\n483\n00:25:57.600 --> 00:26:01.174\nSo I'll say ipS, or how about ip2?\n\n484\n00:26:01.174 --> 00:26:02.467\nJust to make that clear.\n\n485\n00:26:02.467 --> 00:26:07.270\nAnd right in front of my at symbol,\nwhat really starts the declaration of\n\n486\n00:26:07.270 --> 00:26:12.320\nthe hash table, that's where\nwe're gonna add in my open brace.\n\n487\n00:26:12.320 --> 00:26:18.760\nI'm sorry, not open brace,\nopen bracket, ordered, close bracket.\n\n488\n00:26:18.760 --> 00:26:21.700\nAnd that's it,\nthat's all you have to do, all right?\n\n489\n00:26:21.700 --> 00:26:22.812\nSo we'll go ahead and create this one.\n\n490\n00:26:25.970 --> 00:26:32.321\nAnd now, we will return $ip2,\nand take a look at the order.\n\n491\n00:26:32.321 --> 00:26:37.086\n01, 02, 03, 04,\nexactly as I entered them in.\n\n492\n00:26:37.086 --> 00:26:39.776\nAnd it will always return in that order,\nall right,\n\n493\n00:26:39.776 --> 00:26:43.334\nno matter how many times I retrieve it,\nalways gonna be in the order.\n\n494\n00:26:43.334 --> 00:26:46.370\nSo at this point now,\nI don't have a hash table.\n\n495\n00:26:46.370 --> 00:26:50.670\nI have an ordered dictionary, or\ndictionary object, depending on if you're\n\n496\n00:26:50.670 --> 00:26:53.540\ncoming from other languages,\ndictionary object or ordered dictionary.\n\n497\n00:26:55.340 --> 00:26:56.450\nThat's all you had to do.\n\n498\n00:26:56.450 --> 00:26:57.273\nYou do want to be careful.\n\n499\n00:26:57.273 --> 00:27:01.238\nOne of the gotchas that Microsoft calls\nout in some of their help docs is,\n\n500\n00:27:01.238 --> 00:27:03.389\nthey'll see people trying to do this.\n\n501\n00:27:05.363 --> 00:27:09.724\nWhere I put that ordered out\nin front of the variable name,\n\n502\n00:27:09.724 --> 00:27:15.610\nwhich when we declare it as an int, or\na bool, or a string, that's what we do.\n\n503\n00:27:15.610 --> 00:27:17.760\nSo it's a very common mistake.\n\n504\n00:27:17.760 --> 00:27:19.671\nIt will fail if I do that.\n\n505\n00:27:19.671 --> 00:27:22.469\nLet's execute that.\n\n506\n00:27:22.469 --> 00:27:27.401\nAn ordered attribute can be specified\nonly on a hash literal node,\n\n507\n00:27:27.401 --> 00:27:29.610\nnot on my variable out there.\n\n508\n00:27:29.610 --> 00:27:31.740\nSo you will get a failure\nif you try to do that way.\n\n509\n00:27:31.740 --> 00:27:33.885\nLet me undo that, put that back.\n\n510\n00:27:33.885 --> 00:27:37.575\nWe'll put it over there,\nrun it, and we'll run just fine.\n\n511\n00:27:37.575 --> 00:27:41.418\nSo just make sure there that that\nkeyword there, that attribute ordered,\n\n512\n00:27:41.418 --> 00:27:43.675\ncomes in front of the at symbol,\nall right,\n\n513\n00:27:43.675 --> 00:27:46.555\nin front of the actual declaration for\nthat hash value.\n\n514\n00:27:46.555 --> 00:27:48.573\nNow, once I've created that,\n\n515\n00:27:48.573 --> 00:27:52.626\nworking with it is no different\nthan working with my hash table.\n\n516\n00:27:52.626 --> 00:27:58.540\nAll right, $ip2.SVR03, all right.\n\n517\n00:27:58.540 --> 00:28:00.246\nAnd I return that IP address.\n\n518\n00:28:00.246 --> 00:28:04.032\nSo no different there as far\nas the way I work with that.\n\n519\n00:28:04.032 --> 00:28:10.190\nI can still do $ip2.keys, right?\n\n520\n00:28:10.190 --> 00:28:11.590\nI can return the keys.\n\n521\n00:28:11.590 --> 00:28:14.670\nThe difference is not in\nhow I work with it, but\n\n522\n00:28:14.670 --> 00:28:16.420\nhow the results are send back to me?\n\n523\n00:28:16.420 --> 00:28:19.940\nNotice again, the keys are sorted,\n01, 02, 03, 04.\n\n524\n00:28:19.940 --> 00:28:23.410\nAlways gonna be that way because\nit is an ordered dictionary.\n\n525\n00:28:23.410 --> 00:28:28.210\nSo hopefully, that gives you an idea\nof what we can do with hash tables,\n\n526\n00:28:28.210 --> 00:28:33.388\nhow we create them, how we can work with\nthem, manipulate them after the fact.\n\n527\n00:28:33.388 --> 00:28:35.750\nWhat else?\n\n528\n00:28:35.750 --> 00:28:39.710\nWe also look that the order of\ndictionaries and alternative,\n\n529\n00:28:39.710 --> 00:28:44.700\nif you need to make sure that those\nkey value pairs are always returned in\n\n530\n00:28:44.700 --> 00:28:46.880\nthe order that you entered them.\n\n531\n00:28:46.880 --> 00:28:47.510\n&gt;&gt; Okay, so\n\n532\n00:28:47.510 --> 00:28:50.770\nI'm kind of excited to see what's coming\nup next, because we're on a role here.\n\n533\n00:28:50.770 --> 00:28:53.360\nSo thank you for that, Mike,\nand thank you for joining us.\n\n534\n00:28:53.360 --> 00:28:56.018\nYou don't wanna miss whatever it\nis we have coming up next, but for\n\n535\n00:28:56.018 --> 00:28:57.660\nthis show we'll go ahead and sign out.\n\n536\n00:28:57.660 --> 00:28:58.940\nI've been your host, Cherokee Boose.\n\n537\n00:28:58.940 --> 00:28:59.545\n&gt;&gt; And I'm Mike Rodrick.\n\n538\n00:28:59.545 --> 00:29:02.158\n&gt;&gt; See you next time here at ITProTV.\n\n539\n00:29:02.158 --> 00:29:08.578\n[MUSIC]\n\n540\n00:29:08.578 --> 00:29:11.481\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "242247751"
        },
        {
          "description": "In this episode, we cover arithmetic operators. You will learn about the various arithmetic operators in PowerShell, as well as operator precedence.",
          "length": "2315",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-1-1-arithmetic_operators-110917-PGM.00_38_22_15.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-1-1-arithmetic_operators-110917-PGM.00_38_22_15.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-1-1-arithmetic_operators-110917-PGM.00_38_22_15.Still001-sm.jpg",
          "title": "Arithmetic Operators",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:06.708\nWelcome to ITPROTV,\nI'm your host [CROSSTALK]\n\n2\n00:00:06.708 --> 00:00:08.393\n[MUSIC]\n\n3\n00:00:08.393 --> 00:00:12.049\n&gt;&gt; You're watching ITPRO.TV.\n\n4\n00:00:12.049 --> 00:00:15.019\n&gt;&gt; Welcome ladies and gentleman to\nyour PowerShell scripting theories.\n\n5\n00:00:15.019 --> 00:00:16.989\nI'm your show host Cherokee Boose,\n\n6\n00:00:16.989 --> 00:00:21.030\nin this episode we'll be taking\na look at arithmetic operators.\n\n7\n00:00:21.030 --> 00:00:24.295\nAnd with us today in the studio we\nhave Mister Mike Roderick how are you\n\n8\n00:00:24.295 --> 00:00:24.926\ntoday Mike?\n\n9\n00:00:24.926 --> 00:00:25.943\n&gt;&gt; I'm doing great Cherokee thanks for\nhaving me back-\n\n10\n00:00:25.943 --> 00:00:27.267\n&gt;&gt; I know you must be doing wonderful\n\n11\n00:00:27.267 --> 00:00:28.030\nwe're twinning.\n\n12\n00:00:28.030 --> 00:00:30.650\n&gt;&gt; I know I like that,\nit's a very gray day here,\n\n13\n00:00:30.650 --> 00:00:35.153\nit was a little foggy this morning so\nmaybe that was influencing subconsciously\n\n14\n00:00:35.153 --> 00:00:37.500\nor\n&gt;&gt; [LAUGH]\n\n15\n00:00:37.500 --> 00:00:38.850\n&gt;&gt; But anyway, this isn't a fashion show,\n\n16\n00:00:38.850 --> 00:00:40.070\nthis is a PowerShell show.\n\n17\n00:00:40.070 --> 00:00:41.900\n&gt;&gt; That's right.\n&gt;&gt; So let's talk about PowerShell.\n\n18\n00:00:41.900 --> 00:00:45.110\nI'm definitely not one\nto talk fashion with.\n\n19\n00:00:45.110 --> 00:00:48.410\nToday we're going to be looking\nat arithmetic operators or\n\n20\n00:00:48.410 --> 00:00:49.580\narithmetic operators-\n&gt;&gt; [LAUGH]\n\n21\n00:00:49.580 --> 00:00:50.720\n&gt;&gt; Depending on how we want to say it.\n\n22\n00:00:50.720 --> 00:00:52.608\nAgain, we're not linguists here either.\n\n23\n00:00:52.608 --> 00:00:53.440\n&gt;&gt; [LAUGH].\n&gt;&gt; But\n\n24\n00:00:53.440 --> 00:00:58.110\nwe're gonna say arithmetic operators,\nbecause we've got several operators that\n\n25\n00:00:58.110 --> 00:01:03.540\nwe need to deal with, and operators are\ngonna allow me to manipulate information.\n\n26\n00:01:03.540 --> 00:01:08.720\nWe're gonna need this later on when we\nstart getting into our control structures,\n\n27\n00:01:08.720 --> 00:01:12.920\nour for loops, our ifs,\nour do whiles, things like that.\n\n28\n00:01:12.920 --> 00:01:17.090\nAnd as we get into writing scripts we\nare gonna need these ability as well.\n\n29\n00:01:18.640 --> 00:01:20.190\nWe are gonna need these operators,\n\n30\n00:01:20.190 --> 00:01:22.960\nI know it seem like isn't\nthe show about scripting?\n\n31\n00:01:22.960 --> 00:01:26.470\nWe haven't wrote the first script and\nwe are three days into it or\n\n32\n00:01:26.470 --> 00:01:28.190\nseveral episode into this.\n\n33\n00:01:28.190 --> 00:01:30.960\nBut there's a lot of ground\nwork that we've got to lay\n\n34\n00:01:30.960 --> 00:01:34.260\nbefore we can just jump in there and\nstart writing those scripts.\n\n35\n00:01:34.260 --> 00:01:35.640\n&gt;&gt; Right, like building a city.\n\n36\n00:01:35.640 --> 00:01:39.101\nWe've got to get all of our little bricks,\nand foundation, and everything in place.\n\n37\n00:01:39.101 --> 00:01:43.389\n&gt;&gt; Yeah, absolutely, there's several times\nwhere using a quick little function would\n\n38\n00:01:43.389 --> 00:01:45.091\nbe a much better demonstration for\n\n39\n00:01:45.091 --> 00:01:49.250\nwhat I'm trying to show you than what\nI've shown you, but I can't jump the gun.\n\n40\n00:01:49.250 --> 00:01:52.710\nWe don't know about functions yet so\nwe can't really go there just yet.\n\n41\n00:01:52.710 --> 00:01:57.310\nSo I promise as we get along things will\nbecome more network, and computer related\n\n42\n00:01:57.310 --> 00:02:02.200\ninstead of using abc, and 123, we'll start\nusing things like computers and services.\n\n43\n00:02:02.200 --> 00:02:05.670\nAnd we'll really get into what we wanna\nuse this for, but again, right now,\n\n44\n00:02:05.670 --> 00:02:09.550\nwe're really trying to lay that conceptual\nknowledge, that foundational knowledge.\n\n45\n00:02:09.550 --> 00:02:13.621\nSo with that being said, let's get started\nhere with our arithmetic operators.\n\n46\n00:02:13.621 --> 00:02:17.590\nThere are several that\nPowerShell supports.\n\n47\n00:02:17.590 --> 00:02:19.230\nAnd well take a look at them.\n\n48\n00:02:19.230 --> 00:02:22.439\nAnd its not that easy to saying,\nhey a plus sign is plus.\n\n49\n00:02:22.439 --> 00:02:25.760\nEverybody knows it at least\nin the English language.\n\n50\n00:02:25.760 --> 00:02:28.310\nBut wait is it a world wide thing?\n\n51\n00:02:28.310 --> 00:02:31.830\nA plus sign,\nthat's when we add two numbers together.\n\n52\n00:02:31.830 --> 00:02:34.480\nWe learn that when we were\na little kid at school.\n\n53\n00:02:34.480 --> 00:02:37.930\nBut when it comes to PowerShell,\nmaybe it does a little bit more than that.\n\n54\n00:02:37.930 --> 00:02:41.040\nAnd we can work with other things,\nnot integers.\n\n55\n00:02:41.040 --> 00:02:42.730\nWhat happens if I do this with a string?\n\n56\n00:02:42.730 --> 00:02:44.860\nWhat happens when I do this with an array?\n\n57\n00:02:44.860 --> 00:02:47.800\nSo those are the kind of things we\nare gotta consider as we are looking at\n\n58\n00:02:47.800 --> 00:02:50.270\nall of these different operators.\n\n59\n00:02:50.270 --> 00:02:51.320\nSo let's just go through my list.\n\n60\n00:02:51.320 --> 00:02:53.840\nI will make this list\navailable to you guys and\n\n61\n00:02:53.840 --> 00:02:58.380\ngirls in the show notes so that you can\ntake a look at it or study from it.\n\n62\n00:02:58.380 --> 00:03:00.000\nWe've got our plus sign.\n\n63\n00:03:00.000 --> 00:03:02.580\nAnd the plus sign adds integers.\n\n64\n00:03:02.580 --> 00:03:03.630\nNo surprise there.\n\n65\n00:03:03.630 --> 00:03:05.750\nWe can do 2 plus 3.\n\n66\n00:03:05.750 --> 00:03:10.760\nAnd we'll go take a look at some\nexamples here in just a second.\n\n67\n00:03:10.760 --> 00:03:12.240\nIt'll add integers.\n\n68\n00:03:12.240 --> 00:03:14.450\nBut it can also concatenate strings.\n\n69\n00:03:14.450 --> 00:03:15.590\nWe can plug them together.\n\n70\n00:03:15.590 --> 00:03:18.540\nThe plus sign is\nthe concatenation character or\n\n71\n00:03:18.540 --> 00:03:22.800\noperator, it can concatenate arrays and\nhash tables.\n\n72\n00:03:23.840 --> 00:03:26.550\nWe can add we never thought of\ndoing hash table together but\n\n73\n00:03:26.550 --> 00:03:29.320\nyou can I will show you\nhow in just a minute.\n\n74\n00:03:29.320 --> 00:03:34.630\nThe subtraction or the minus sign is\nthe subtract one value from another value.\n\n75\n00:03:34.630 --> 00:03:38.070\nOr it can make a number a negative number.\n\n76\n00:03:38.070 --> 00:03:42.120\nWe can do 5 minus 3, or\nwe can make a negative 4 if we want.\n\n77\n00:03:43.500 --> 00:03:47.440\nThe asterisks, there's the multiplier,\nthat will multiply numbers, or\n\n78\n00:03:47.440 --> 00:03:51.760\nwe can also use the asterisks\nwith string and arrays.\n\n79\n00:03:51.760 --> 00:03:54.280\nNow you can't multiply strings.\n\n80\n00:03:54.280 --> 00:03:59.930\nI can't say Bob times Sue equals 2 Bob.\n\n81\n00:03:59.930 --> 00:04:01.915\nI don't know what that would equal.\n\n82\n00:04:01.915 --> 00:04:04.510\nSo it's actually a copy operand.\n\n83\n00:04:04.510 --> 00:04:10.350\nSo when you use the multiplication symbol,\nthat operator with a string, it will copy.\n\n84\n00:04:10.350 --> 00:04:12.540\nAnd the same thing with array.\n\n85\n00:04:12.540 --> 00:04:16.120\nWe've got a forward slash for\ndividing two values.\n\n86\n00:04:16.120 --> 00:04:18.970\nWe've got our percent symbol\n\n87\n00:04:18.970 --> 00:04:23.300\nwhich is our modulo which gives me\nthe remainder of a division operation.\n\n88\n00:04:23.300 --> 00:04:28.328\nAnd then we've got a lot of our bitwise\noperators, our ANDs and our NOTs,\n\n89\n00:04:28.328 --> 00:04:32.470\nour ORs, our exclusive ORs or XORs.\n\n90\n00:04:32.470 --> 00:04:36.620\nOur shift left and\nour shift right to work with bits.\n\n91\n00:04:36.620 --> 00:04:40.860\nA lot of times, I'll use these\nwhen were working IP addresses or\n\n92\n00:04:40.860 --> 00:04:44.590\nIP addresses and were working\nwith masks or trying to define or\n\n93\n00:04:44.590 --> 00:04:49.370\ndetermine a network address, or what\nsubnet a node is on, things like that.\n\n94\n00:04:49.370 --> 00:04:51.599\nWe can use our bit-wise operators.\n\n95\n00:04:53.420 --> 00:04:56.510\nSo those are different operators\nthat we have available.\n\n96\n00:04:56.510 --> 00:04:58.850\nWe also have to worry about the precedent.\n\n97\n00:04:59.990 --> 00:05:02.720\nNow, I know in the chat before\nwe started here, this episode,\n\n98\n00:05:02.720 --> 00:05:04.750\nwe were talking about little PEMDAS.\n\n99\n00:05:04.750 --> 00:05:07.400\nSomething that we learned\nway back in school,\n\n100\n00:05:07.400 --> 00:05:11.780\nto memorize our order of\noperations when it comes to math.\n\n101\n00:05:11.780 --> 00:05:13.630\nP-E-M-D-A-S.\n\n102\n00:05:13.630 --> 00:05:16.200\nPlease Excuse My Dear Aunt Sally.\n\n103\n00:05:16.200 --> 00:05:19.607\nParentheses, exponents-\n&gt;&gt; Multiplication.\n\n104\n00:05:19.607 --> 00:05:21.560\n&gt;&gt; Multiplication.\n\n105\n00:05:21.560 --> 00:05:22.650\nDivision,\n&gt;&gt; Division,\n\n106\n00:05:22.650 --> 00:05:23.290\n&gt;&gt; Addition,\n\n107\n00:05:23.290 --> 00:05:23.910\n&gt;&gt; Subtraction-\n\n108\n00:05:23.910 --> 00:05:25.350\n&gt;&gt; And Subtraction.\n\n109\n00:05:25.350 --> 00:05:30.790\nAlthough its not really, one thing I\nknow some people get confused on it.\n\n110\n00:05:30.790 --> 00:05:34.600\nIt's not that each one of those is\nindividual like multiplication and\n\n111\n00:05:34.600 --> 00:05:36.460\ndivision are actually considered equal.\n\n112\n00:05:36.460 --> 00:05:38.340\nThey're almost the same line.\n\n113\n00:05:38.340 --> 00:05:40.620\nSo from right to left multiplication and\n\n114\n00:05:40.620 --> 00:05:44.870\ndivision is done all the multiplication\nand then all the division.\n\n115\n00:05:44.870 --> 00:05:48.860\nAddition and subtraction or at the same\nprecedent levels, so it's again left to\n\n116\n00:05:48.860 --> 00:05:54.090\nright, each one of those done as\nit comes to it from left to right.\n\n117\n00:05:54.090 --> 00:05:56.650\nAnd it's very similar with PowerShell,\n\n118\n00:05:56.650 --> 00:05:59.600\nthere's a couple of little\ntweaks that we got to throw in.\n\n119\n00:06:00.720 --> 00:06:04.600\nThe first order of precedent is\ngoing to be the parenthesis.\n\n120\n00:06:04.600 --> 00:06:05.730\nParenthesis always rules.\n\n121\n00:06:07.080 --> 00:06:11.880\nSo, we can always use those to change\nprecedent because they have the highest.\n\n122\n00:06:11.880 --> 00:06:17.010\nWe use those to control the way PowerShell\nis performing mathematical operations or\n\n123\n00:06:17.010 --> 00:06:17.900\nother operations.\n\n124\n00:06:17.900 --> 00:06:24.970\nWell, then comes the minus sign for\na negative number not for subtraction.\n\n125\n00:06:24.970 --> 00:06:27.890\nBut if you've got a negative 4,\nI'm just gonna go ahead and\n\n126\n00:06:27.890 --> 00:06:32.420\ndenote that as a negative number\nhigh up in the precedence.\n\n127\n00:06:32.420 --> 00:06:36.170\nThen comes multiplication and\ndivision and modulo.\n\n128\n00:06:36.170 --> 00:06:39.180\nThis is something that\nPEMDAS doesn't include, but\n\n129\n00:06:39.180 --> 00:06:43.280\nmodulo would be considered the same\nprecedent as multiplication and division.\n\n130\n00:06:43.280 --> 00:06:45.240\nSo again going left to right,\n\n131\n00:06:45.240 --> 00:06:50.250\nreading an expression will execute\nany multiplication or division or\n\n132\n00:06:50.250 --> 00:06:55.410\nmodulo that we come to as we move\nleft to right across that expression.\n\n133\n00:06:55.410 --> 00:06:58.865\nAnd then the fourth level is gonna\nbe your addition and subtraction.\n\n134\n00:06:58.865 --> 00:07:02.398\nFor your minus sign but\nthis time for subtraction not for\n\n135\n00:07:02.398 --> 00:07:05.717\nnegative numbers has\nthe lowest precedence there.\n\n136\n00:07:05.717 --> 00:07:08.752\nSo really like I said if you're\nfamiliar with PEMDAS and\n\n137\n00:07:08.752 --> 00:07:12.638\nyou understand the order of operations\nin normal math, you know this.\n\n138\n00:07:12.638 --> 00:07:16.823\nYou just have to add in the fact that\nnegative numbers have a higher precedence,\n\n139\n00:07:16.823 --> 00:07:19.890\nand modulo goes along with\nmultiplication and division.\n\n140\n00:07:19.890 --> 00:07:24.310\nWhich makes sense, cuz it's the remainder\nof a division operation, so\n\n141\n00:07:24.310 --> 00:07:28.890\nit makes sense that it would be on\nthe same precedent level as the division.\n\n142\n00:07:30.490 --> 00:07:31.830\nAll right-\n&gt;&gt; Can we take a look at some of this?\n\n143\n00:07:31.830 --> 00:07:36.114\n&gt;&gt; Let's do that because it's sure is\nboring [INAUDIBLE] me talk about it.\n\n144\n00:07:36.114 --> 00:07:40.400\nSo let's take a look at some\nof these operators in action.\n\n145\n00:07:40.400 --> 00:07:42.130\nWe'll start with the good\nold plus sign and\n\n146\n00:07:42.130 --> 00:07:46.610\nsome of this is gonna be like well,\nyeah, I know what 5 plus 4 is.\n\n147\n00:07:46.610 --> 00:07:49.420\nKeep in mind that we, well,\nwe'll just leave it there.\n\n148\n00:07:49.420 --> 00:07:52.180\nWe'll start with the basics and\nkind of work our way up.\n\n149\n00:07:52.180 --> 00:07:57.320\nSo 5 plus f4 if I'm going to\nexecute that we're gonna get a 9,.\n\n150\n00:07:57.320 --> 00:07:58.710\nNo surprise there.\n\n151\n00:07:58.710 --> 00:08:04.558\nMy plus sign acts as a mathematical\noperation when I'm dealing with integers.\n\n152\n00:08:04.558 --> 00:08:08.627\nBut what happens when we use\nthe plus sign with string?\n\n153\n00:08:08.627 --> 00:08:13.865\nSee, I get F8 to execute that line\nof code, I'll see I have this\n\n154\n00:08:13.865 --> 00:08:19.110\nstring power plus the string shell and\nI end up with PowerShell.\n\n155\n00:08:19.110 --> 00:08:22.120\nSo, that's what we call concatenation.\n\n156\n00:08:22.120 --> 00:08:24.570\nPlugging those two strings together.\n\n157\n00:08:25.990 --> 00:08:27.050\nWithin an array.\n\n158\n00:08:27.050 --> 00:08:28.420\nSo, here I have two arrays.\n\n159\n00:08:28.420 --> 00:08:34.930\nI've used the slightly different\nnotation to create these arrays.\n\n160\n00:08:34.930 --> 00:08:37.930\nI've done an add symbol,\nmuch like we with the hash table.\n\n161\n00:08:37.930 --> 00:08:42.760\nBut then, open parenthesis,\nrather than open brace, indicate an array.\n\n162\n00:08:42.760 --> 00:08:46.120\nSo, I've got one array that\nhas two members, A and B.\n\n163\n00:08:46.120 --> 00:08:51.190\nI've got another array that has\ntwo members the integer 65 and 66.\n\n164\n00:08:51.190 --> 00:08:57.318\nIf we add those two together it\nactually combines those arrays.\n\n165\n00:08:57.318 --> 00:09:01.818\nSo, if it ends up with an array,\nthis is AB 65, 66.\n\n166\n00:09:01.818 --> 00:09:06.527\nNow, let's go ahead and stop here for\njust a second, and I want to make sure we\n\n167\n00:09:06.527 --> 00:09:10.970\nunderstand this is not modifying\neither one of those arrays, right?\n\n168\n00:09:10.970 --> 00:09:13.910\nThis array is still A and B.\n\n169\n00:09:13.910 --> 00:09:16.379\nThis array is still 65 and 66.\n\n170\n00:09:16.379 --> 00:09:21.210\nThis is a new array containing all\nfour of those elements, right?\n\n171\n00:09:21.210 --> 00:09:25.760\nAnd if I want to keep that array,\nI would need to save it into a variable.\n\n172\n00:09:25.760 --> 00:09:31.153\nI would need to say $new array equals,\n\n173\n00:09:31.153 --> 00:09:35.083\nand now, if I execute that.\n\n174\n00:09:35.083 --> 00:09:37.902\nAnd then, I call back new array,\n\n175\n00:09:37.902 --> 00:09:43.360\nI'll say that it does include\nall four of those values, right?\n\n176\n00:09:44.650 --> 00:09:47.230\nI guess,\nto prove to us I could say dollar sign.\n\n177\n00:09:49.717 --> 00:09:50.438\nFirst array.\n\n178\n00:09:53.106 --> 00:09:56.578\nEquals, I don't know if it'll let\nme tag that right inside here,\n\n179\n00:09:56.578 --> 00:09:58.260\nI might need to do this outside.\n\n180\n00:10:04.904 --> 00:10:07.385\nYeah, it's not gonna let me\njust sign those in the middle.\n\n181\n00:10:07.385 --> 00:10:10.825\nOr I could do some parentheses in there,\nbut let's not go through that.\n\n182\n00:10:10.825 --> 00:10:11.553\nAgain, you could [CROSSTALK].\n\n183\n00:10:11.553 --> 00:10:12.844\n&gt;&gt; I think we'll believe you.\n\n184\n00:10:12.844 --> 00:10:15.764\n&gt;&gt; Yeah,\nwe could create those arrays first, and\n\n185\n00:10:15.764 --> 00:10:19.634\nthen we could verify the fact\nthat those arrays don't change.\n\n186\n00:10:19.634 --> 00:10:23.233\nThey're still going to be,\nlet's let you value yours.\n\n187\n00:10:23.233 --> 00:10:24.429\nAll right.\n\n188\n00:10:24.429 --> 00:10:27.821\nHash table, if we add hash tables, so\n\n189\n00:10:27.821 --> 00:10:33.580\nhere again I have a hash table\nof a single key value pair A=65.\n\n190\n00:10:33.580 --> 00:10:37.550\nAnd I've got another hash table\nwith a single key value pair, and\n\n191\n00:10:37.550 --> 00:10:41.660\nI'm gonna add them together\nwith my plus operator.\n\n192\n00:10:41.660 --> 00:10:47.440\nAnd when we do that, we get a single\nhash table with both values in there.\n\n193\n00:10:47.440 --> 00:10:48.890\n&gt;&gt; Okay.\n&gt;&gt; Again, same thing.\n\n194\n00:10:48.890 --> 00:10:53.000\nIf I wanted to keep this, or\nmanipulate it in the future,\n\n195\n00:10:53.000 --> 00:10:55.930\nI would need to store it in a variable.\n\n196\n00:10:55.930 --> 00:10:59.410\nIt's not modifying my\noriginal hash tables.\n\n197\n00:10:59.410 --> 00:11:03.220\nSo, you might in your work environment\nhave a hash table that includes\n\n198\n00:11:03.220 --> 00:11:07.580\nthe server addresses, the server names and\nIP addresses from a single subnet.\n\n199\n00:11:07.580 --> 00:11:11.270\nYou might have a separate hash\ntable that has the server names and\n\n200\n00:11:11.270 --> 00:11:14.150\nIP addresses from a second subnet.\n\n201\n00:11:14.150 --> 00:11:18.020\nAnd you wanna work with both\nof those lists together.\n\n202\n00:11:18.020 --> 00:11:21.620\nWell, I can simply add those\ntwo hash tables together and\n\n203\n00:11:21.620 --> 00:11:25.180\nhave one hash table that\nincludes all those values.\n\n204\n00:11:25.180 --> 00:11:29.246\nSo, it can be very, very convenient\nbeing able to add hash tables.\n\n205\n00:11:29.246 --> 00:11:33.542\nSo, the + sign with\nintegers does our addition.\n\n206\n00:11:33.542 --> 00:11:40.640\nThe + sign with strings, arrays,\nor hash tables concatenates.\n\n207\n00:11:40.640 --> 00:11:41.920\nRight.\n&gt;&gt; All right, Mike, so\n\n208\n00:11:41.920 --> 00:11:45.840\njust to make sure I'm understanding\ncompletely, if we were to add like a times\n\n209\n00:11:45.840 --> 00:11:49.960\nc equals 100, or\nwhatever to the end of that string there.\n\n210\n00:11:49.960 --> 00:11:53.370\nThen I go ahead and run it and the b,\n\n211\n00:11:53.370 --> 00:11:57.760\nI think 66 times 100 that would\nbe executed first, then plus a.\n\n212\n00:11:57.760 --> 00:12:00.570\n&gt;&gt; Wait say that again,\nare you talking about this line here?\n\n213\n00:12:00.570 --> 00:12:01.380\n&gt;&gt; Yes.\n\n214\n00:12:01.380 --> 00:12:03.830\n&gt;&gt; Okay.\nSo, we gotta single hash table here.\n\n215\n00:12:03.830 --> 00:12:04.330\n&gt;&gt; Yep.\n&gt;&gt; And that,\n\n216\n00:12:04.330 --> 00:12:07.350\nI'm adding that to\nanother hash table here.\n\n217\n00:12:07.350 --> 00:12:12.470\n&gt;&gt; Can I add them multiplication symbol,\nand then a C hash table?\n\n218\n00:12:12.470 --> 00:12:17.450\nWith 100, and\nthen C multiplied by B plus A.\n\n219\n00:12:17.450 --> 00:12:18.210\nIs that the order?\n\n220\n00:12:20.040 --> 00:12:22.960\nI don't know that I'm following exactly\nwhat you're saying, I apologize.\n\n221\n00:12:22.960 --> 00:12:23.990\n&gt;&gt; [LAUGH] No, it's okay.\n\n222\n00:12:23.990 --> 00:12:26.776\n&gt;&gt; But, yeah,\nyou can't multiple a hash table.\n\n223\n00:12:26.776 --> 00:12:28.010\n&gt;&gt; Okay, that's where I was going.\n\n224\n00:12:28.010 --> 00:12:31.740\nI was gonna see if we can use that order\nof operations in a string like this.\n\n225\n00:12:31.740 --> 00:12:33.710\n&gt;&gt; Yeah, you can, but\nnot with hash tables.\n\n226\n00:12:33.710 --> 00:12:36.297\nHash tables are a little bit [CROSSTALK].\n\n227\n00:12:36.297 --> 00:12:39.104\n&gt;&gt; [CROSSTALK] how would they do that so,\nokay.\n\n228\n00:12:39.104 --> 00:12:39.976\n&gt;&gt; It's not going to work out too well.\n\n229\n00:12:39.976 --> 00:12:41.800\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, so\n\n230\n00:12:41.800 --> 00:12:46.010\nnow we'll go down to our minus operator,\nour subtraction operator.\n\n231\n00:12:46.010 --> 00:12:46.650\nAnd of course, for\n\n232\n00:12:46.650 --> 00:12:50.670\nintegers we're simply going to\nsubtract our normal math operation.\n\n233\n00:12:50.670 --> 00:12:53.380\nSo, five minus four equals one.\n\n234\n00:12:53.380 --> 00:12:54.690\nIndeed it does.\n\n235\n00:12:54.690 --> 00:12:59.040\nMost of the time, but\nwe can also use the minus operator, or\n\n236\n00:12:59.040 --> 00:13:02.800\nthe subtraction operator to\nindicate a negative number.\n\n237\n00:13:02.800 --> 00:13:06.590\nSo, here I'm getting to the date\ndot add days that's a method\n\n238\n00:13:06.590 --> 00:13:09.100\nof the git date commandlet.\n\n239\n00:13:09.100 --> 00:13:14.090\nAnd negative seven should subtract seven\ndays rather than add seven days, so\n\n240\n00:13:14.090 --> 00:13:14.810\nif we run that?\n\n241\n00:13:16.090 --> 00:13:20.187\nWe should see that seven days\nago it was November 2nd, right?\n\n242\n00:13:20.187 --> 00:13:24.178\nSo, the minus sign can be used to\ndo mathematical subtraction, or\n\n243\n00:13:24.178 --> 00:13:27.335\nwe can use it to indicate\na negative number.\n\n244\n00:13:27.335 --> 00:13:30.420\n[INAUDIBLE] I cannot subtract strings.\n\n245\n00:13:30.420 --> 00:13:32.340\nI cannot subtract arrays.\n\n246\n00:13:32.340 --> 00:13:36.880\nI cannot subtract, or\nuse the minus operator with strings,\n\n247\n00:13:36.880 --> 00:13:38.600\narrays, or hash tables.\n\n248\n00:13:38.600 --> 00:13:39.555\nOnly integers.\n\n249\n00:13:39.555 --> 00:13:42.956\nI can't use this to remove\na value from an array, or\n\n250\n00:13:42.956 --> 00:13:46.840\nanything like that,\nit doesn't work, right?\n\n251\n00:13:46.840 --> 00:13:50.520\nThen, we will get down into\nmultiplication, which is our asterisk, and\n\n252\n00:13:50.520 --> 00:13:51.900\nagain with integers.\n\n253\n00:13:51.900 --> 00:13:57.460\nWe are gonna have our normal\nmathematical operation 5 times 4 = 20.\n\n254\n00:13:57.460 --> 00:13:59.860\nBut if we do a string.\n\n255\n00:13:59.860 --> 00:14:01.900\nIf I multiple string.\n\n256\n00:14:01.900 --> 00:14:04.080\nNow, I'm multiplying\na string by an integer,\n\n257\n00:14:04.080 --> 00:14:07.380\nbecause you can't multiple\na string by a string.\n\n258\n00:14:07.380 --> 00:14:10.420\nBob times Sue is not an operation.\n\n259\n00:14:10.420 --> 00:14:12.420\nIt just does not work that way.\n\n260\n00:14:12.420 --> 00:14:13.920\nBut here I'm taking a string.\n\n261\n00:14:13.920 --> 00:14:18.180\nIn this case, the question mark character,\nand I'm multiplying it by three.\n\n262\n00:14:18.180 --> 00:14:20.150\nAnd let's see what we get.\n\n263\n00:14:20.150 --> 00:14:21.069\n&gt;&gt; Three questions marks?\n\n264\n00:14:21.069 --> 00:14:22.222\n&gt;&gt; We get three questions marks, right?\n\n265\n00:14:22.222 --> 00:14:23.458\n&gt;&gt; Wow [LAUGH].\n\n266\n00:14:23.458 --> 00:14:28.348\n&gt;&gt; Because remember of the asterisk\nis multiplication for our integers,\n\n267\n00:14:28.348 --> 00:14:31.340\nbut it's a copy or string, okay?\n\n268\n00:14:31.340 --> 00:14:36.130\nLet's see what happens with arrays, I've\ngot an array that has two elements in it,\n\n269\n00:14:36.130 --> 00:14:39.300\nboth of them being strings\nin this case times two.\n\n270\n00:14:39.300 --> 00:14:44.080\nAnd if we hit that one notice\nthat I double up my array.\n\n271\n00:14:44.080 --> 00:14:48.070\nI've got question mark, exclamation,\nquestion mark, exclamation, so same thing.\n\n272\n00:14:48.070 --> 00:14:51.180\nIt's a copy when it comes to arrays.\n\n273\n00:14:51.180 --> 00:14:52.390\nNo hash table.\n\n274\n00:14:52.390 --> 00:14:54.500\nCannot multiply hash table.\n\n275\n00:14:54.500 --> 00:14:55.620\n&gt;&gt; Got it.\n&gt;&gt; So,\n\n276\n00:14:55.620 --> 00:14:59.810\nmultiplication the asterisk is\nmultiplication for integers.\n\n277\n00:14:59.810 --> 00:15:04.220\nFor strings and\narrays it's going to be a copy process.\n\n278\n00:15:05.970 --> 00:15:09.460\nThen we've got our good old division,\nwhich is the forward slash and\n\n279\n00:15:09.460 --> 00:15:11.100\nyou can see there is\nnot a lot to that one.\n\n280\n00:15:11.100 --> 00:15:12.150\nI've got one example here,\n\n281\n00:15:12.150 --> 00:15:15.400\nbecause it's pretty standard division,\ninteger division.\n\n282\n00:15:15.400 --> 00:15:17.820\nI hit F AA divided by two is.\n\n283\n00:15:17.820 --> 00:15:19.787\nDrum roll please four, right?\n\n284\n00:15:19.787 --> 00:15:24.327\nNow, there's actually something,\nit's a got you, that I'm gonna talk about\n\n285\n00:15:24.327 --> 00:15:28.090\nin just a minute, when it comes\nto division, but I'll save that.\n\n286\n00:15:28.090 --> 00:15:31.480\nI'll leave you on the edge of your seat\nfor just a few minutes on that one.\n\n287\n00:15:31.480 --> 00:15:35.666\nModulo, again, modulo,\nif you're not familiar with that one,\n\n288\n00:15:35.666 --> 00:15:38.369\nit's the remainder of integer division.\n\n289\n00:15:38.369 --> 00:15:42.306\nWell, I should say\nthe remainder of division, so\n\n290\n00:15:42.306 --> 00:15:47.009\nif I divide 9 divided by 2,\n2 goes into 9 how many times?\n\n291\n00:15:47.009 --> 00:15:49.409\n&gt;&gt; At least-\n&gt;&gt; 4.5\n\n292\n00:15:49.409 --> 00:15:51.328\n&gt;&gt; With a little bit of a, yeah [LAUGH].\n\n293\n00:15:51.328 --> 00:15:53.289\n&gt;&gt; Let's test it out,\nlet's make sure our math is right.\n\n294\n00:15:53.289 --> 00:15:54.901\n&gt;&gt; I'm so\nglad I'm not a math teacher [LAUGH].\n\n295\n00:15:54.901 --> 00:15:56.741\n&gt;&gt; [LAUGH] 9 / 2 [CROSSTALK].\n\n296\n00:15:56.741 --> 00:16:00.823\nHe would die.\n\n297\n00:16:00.823 --> 00:16:04.473\n[LAUGH]\n&gt;&gt; [LAUGH] 9 divided by 2 is gonna be 4.5.\n\n298\n00:16:04.473 --> 00:16:08.977\nIf we do the modulo, or\n0.5 is what's known as the modulo,\n\n299\n00:16:08.977 --> 00:16:12.371\nthe remainder after\nI've done the division.\n\n300\n00:16:12.371 --> 00:16:15.190\nDoesn't really matter what's on\nthe left side of the decimal.\n\n301\n00:16:15.190 --> 00:16:20.161\nModulo is just saying, hey,\nI want whatever is left on the right side\n\n302\n00:16:20.161 --> 00:16:24.040\nof the decimal point after\nthe division is over.\n\n303\n00:16:24.040 --> 00:16:29.300\nSo if we change this back to\na percent symbol and we execute that.\n\n304\n00:16:30.400 --> 00:16:32.160\n&gt;&gt; So it's the remainder, but\n\n305\n00:16:32.160 --> 00:16:35.570\nexcluding everything if there's\nsomething to the left of the decimal?\n\n306\n00:16:35.570 --> 00:16:36.745\n&gt;&gt; Yep.\n&gt;&gt; Okay.\n\n307\n00:16:36.745 --> 00:16:38.267\n&gt;&gt; Exactly right, all right?\n\n308\n00:16:38.267 --> 00:16:41.030\n&gt;&gt; [LAUGH]\n&gt;&gt; So we get 1, cuz there is 1 left over\n\n309\n00:16:41.030 --> 00:16:46.134\nafter we, yeah, I know it says 4.5,\nbut it's rounded up there to 1.\n\n310\n00:16:46.134 --> 00:16:50.814\nAnd the rounding, we gotta talk about that\nrounding here in just a second, all right?\n\n311\n00:16:50.814 --> 00:16:52.817\nHonestly-\n&gt;&gt; Yeah, cuz a little bit left over,\n\n312\n00:16:52.817 --> 00:16:55.805\nI don't think the operating system\nwill really take that as an answer.\n\n313\n00:16:55.805 --> 00:16:58.668\n[LAUGH]\n&gt;&gt; Yeah, yeah, I will tell you,\n\n314\n00:16:58.668 --> 00:17:01.580\nI have never found a use for modulo.\n\n315\n00:17:01.580 --> 00:17:06.790\nI know there is, and\nI don't know if it's in statistic world or\n\n316\n00:17:06.790 --> 00:17:09.150\nwhere that becomes relevant.\n\n317\n00:17:09.150 --> 00:17:11.760\nI'm sure in some\nprogramming there might be.\n\n318\n00:17:11.760 --> 00:17:17.080\nMe personally, I'm saying I've never ran\ninto a use for it, an interesting one.\n\n319\n00:17:17.080 --> 00:17:17.925\n&gt;&gt; But now you know what it is.\n\n320\n00:17:17.925 --> 00:17:19.621\n[LAUGH]\n&gt;&gt; Yeah, absolutely.\n\n321\n00:17:19.621 --> 00:17:21.757\nAll right, so\nlet's talk about the precedence.\n\n322\n00:17:21.757 --> 00:17:23.600\nAgain, this is gonna be\npretty straightforward.\n\n323\n00:17:23.600 --> 00:17:28.330\nI think most of us are familiar\nwith this from our days of math and\n\n324\n00:17:28.330 --> 00:17:30.170\nyears of math in school.\n\n325\n00:17:30.170 --> 00:17:34.430\nBut if we look at this, Cherokee,\ndo we know what that number is gonna be,\n\n326\n00:17:34.430 --> 00:17:35.430\ncan you see that?\n\n327\n00:17:35.430 --> 00:17:36.713\n&gt;&gt; I can't even see the numbers, hold on.\n\n328\n00:17:36.713 --> 00:17:37.486\n[LAUGH] Zoom in.\n\n329\n00:17:37.486 --> 00:17:42.089\n&gt;&gt; So I've got 3 + 6 divided by 3.\n\n330\n00:17:42.089 --> 00:17:42.594\n&gt;&gt; Okay, there we go.\n\n331\n00:17:42.594 --> 00:17:44.302\n&gt;&gt; Times 4, all right?\n\n332\n00:17:44.302 --> 00:17:45.737\n&gt;&gt; All right, okay.\n\n333\n00:17:45.737 --> 00:17:48.465\n&gt;&gt; So-\n&gt;&gt; So we're gonna follow our order of\n\n334\n00:17:48.465 --> 00:17:50.381\noperations here, right?\n\n335\n00:17:50.381 --> 00:17:53.890\n&gt;&gt; Mm-hm.\n&gt;&gt; All right, so 3 times 4, we've got 12.\n\n336\n00:17:53.890 --> 00:18:00.930\nAnd then we have the division, but\nwe should probably do this 3 = 6 first.\n\n337\n00:18:00.930 --> 00:18:02.263\n&gt;&gt; The 3 + 6?\n\n338\n00:18:02.263 --> 00:18:03.532\nThis right here?\n\n339\n00:18:03.532 --> 00:18:04.534\n&gt;&gt; Yeah.\n&gt;&gt; Uh-huh.\n\n340\n00:18:04.534 --> 00:18:06.756\n&gt;&gt; Yeah, all right, so we've got our 8.\n\n341\n00:18:06.756 --> 00:18:08.815\n&gt;&gt; All right, so what are you\ngonna end up with as an answer?\n\n342\n00:18:08.815 --> 00:18:09.445\n&gt;&gt; 9, sorry.\n\n343\n00:18:09.445 --> 00:18:10.905\n&gt;&gt; 9, okay?\n\n344\n00:18:10.905 --> 00:18:13.185\n&gt;&gt; No, no, no, 9 divided by 12.\n\n345\n00:18:13.185 --> 00:18:14.229\nIs that what you're looking at here?\n\n346\n00:18:14.229 --> 00:18:14.806\n&gt;&gt; What's that?\n\n347\n00:18:14.806 --> 00:18:17.693\n&gt;&gt; 9 divided by 12?\n\n348\n00:18:17.693 --> 00:18:20.817\n[INAUDIBLE]\n&gt;&gt; I'm asking you, I don't know.\n\n349\n00:18:20.817 --> 00:18:22.637\nWell, let's find out,\nlet's see what PowerShell says.\n\n350\n00:18:22.637 --> 00:18:23.804\n&gt;&gt; Okay.\n\n351\n00:18:23.804 --> 00:18:26.218\n&gt;&gt; And it says 11, right?\n\n352\n00:18:26.218 --> 00:18:28.603\nAll right, and let's talk about why, okay?\n\n353\n00:18:28.603 --> 00:18:31.625\nWhen we look at the order of operation,\nremember it's left to right, and\n\n354\n00:18:31.625 --> 00:18:34.285\nmultiplication and\ndivision are on the same precedence level.\n\n355\n00:18:34.285 --> 00:18:38.293\nSo as we go across here,\nthis is gonna occur first.\n\n356\n00:18:38.293 --> 00:18:39.658\n&gt;&gt; Got it.\n&gt;&gt; So 6 divided by 3-\n\n357\n00:18:39.658 --> 00:18:40.306\n&gt;&gt; That makes sense.\n\n358\n00:18:40.306 --> 00:18:41.493\n&gt;&gt; Is 2.\n\n359\n00:18:41.493 --> 00:18:42.516\n&gt;&gt; Multiplied by 4.\n\n360\n00:18:42.516 --> 00:18:44.322\n&gt;&gt; And then 2 times 4 is 8.\n\n361\n00:18:44.322 --> 00:18:45.493\n&gt;&gt; 8 + 3.\n\n362\n00:18:45.493 --> 00:18:46.674\n&gt;&gt; Plus 3 is 11.\n\n363\n00:18:46.674 --> 00:18:48.046\n&gt;&gt; 11.\n&gt;&gt; Exactly.\n\n364\n00:18:48.046 --> 00:18:49.845\n&gt;&gt; Okay.\n&gt;&gt; All right?\n\n365\n00:18:49.845 --> 00:18:55.285\nYeah, and I know Doug, I think I saw Doug\nsay that wasn't rounding with that modulo.\n\n366\n00:18:55.285 --> 00:18:56.789\nAnd yeah,\nI wasn't thinking that was rounding.\n\n367\n00:18:56.789 --> 00:18:59.631\nI know I said that, but\nit's not rounding there, right?\n\n368\n00:18:59.631 --> 00:19:03.118\nIf you got a better explanation,\nlet me know, and\n\n369\n00:19:03.118 --> 00:19:06.862\nI'll share it with everybody out there,\nall right?\n\n370\n00:19:06.862 --> 00:19:09.525\nCuz I know I'm not real good with\nthe modulo, that's what I was saying.\n\n371\n00:19:09.525 --> 00:19:11.698\nI don't use that very often.\n\n372\n00:19:11.698 --> 00:19:15.394\n&gt;&gt; It is interesting because if you're\nrunning through it, and I was trying here\n\n373\n00:19:15.394 --> 00:19:18.706\nto guess, like okay, well,\nwhat is this operating system gonna do?\n\n374\n00:19:18.706 --> 00:19:21.063\nShould I believe in\nthe order of operations?\n\n375\n00:19:21.063 --> 00:19:24.786\nSo it's kind of strange to see that\ndivision happening first there,\n\n376\n00:19:24.786 --> 00:19:26.915\njust the way that it runs through that.\n\n377\n00:19:26.915 --> 00:19:30.170\n&gt;&gt; Well, and that goes back to\nwhat we learned in school, PEMDAS.\n\n378\n00:19:30.170 --> 00:19:32.130\nAnd we learned it in that order.\n\n379\n00:19:32.130 --> 00:19:35.530\nParentheses, exclamation point,\nmultiplication, division, addition,\n\n380\n00:19:35.530 --> 00:19:36.400\nsubtraction.\n\n381\n00:19:36.400 --> 00:19:38.450\nAnd so\nwe think of it as first parentheses,\n\n382\n00:19:38.450 --> 00:19:42.980\nthen exponents, then multiplication, then\ndivision, then addition, then subtraction.\n\n383\n00:19:42.980 --> 00:19:44.315\nAnd that's really not the way it is.\n\n384\n00:19:44.315 --> 00:19:49.895\nIt should be parentheses on one level,\nthen exponents.\n\n385\n00:19:49.895 --> 00:19:54.495\nBut then multiplication and division\nshould be together, so it should be P,\n\n386\n00:19:54.495 --> 00:19:56.710\nthen E, then MD on one line, right?\n\n387\n00:19:56.710 --> 00:20:00.655\nBecause multiplication and division\nare considered the same precedent.\n\n388\n00:20:00.655 --> 00:20:05.832\nSo as we move left to right, if there's\na division first, it'll do that.\n\n389\n00:20:05.832 --> 00:20:07.967\nIf there's a multiplication after that,\nit'll do that.\n\n390\n00:20:07.967 --> 00:20:12.506\nIf there's another division,\nthen it'll do that.\n\n391\n00:20:12.506 --> 00:20:14.107\nAnd if there's another multiplication,\n\n392\n00:20:14.107 --> 00:20:16.760\nso it doesn't do all the multiplications\nand then all the divisions.\n\n393\n00:20:16.760 --> 00:20:20.565\nIt does whatever comes first as\nit's moving across left to right.\n\n394\n00:20:20.565 --> 00:20:21.876\nAnd yeah, it's the remainder, Doug.\n\n395\n00:20:21.876 --> 00:20:23.629\nAnd I'd have to go back and\ndoublecheck on that.\n\n396\n00:20:23.629 --> 00:20:26.982\nBut I think what's happening there\nis PowerShell's casting that as\n\n397\n00:20:26.982 --> 00:20:29.021\nan integer and then it's rounding that.\n\n398\n00:20:29.021 --> 00:20:35.220\nBut I'm not positive why I got a 1,\ncuz the remainder should be 0.5, right?\n\n399\n00:20:35.220 --> 00:20:38.614\nIf I divide, 9 divided by 2,\nit should be 0.5?\n\n400\n00:20:40.894 --> 00:20:43.600\nThat's what I was expecting for my modulo.\n\n401\n00:20:43.600 --> 00:20:47.424\nAnd that's why I say I'm obviously\nnot familiar enough with modulo to be\n\n402\n00:20:47.424 --> 00:20:48.938\nexplaining that very well.\n\n403\n00:20:48.938 --> 00:20:51.854\n&gt;&gt; The remainder is the numerator\nof the fraction that is left over.\n\n404\n00:20:51.854 --> 00:20:53.106\n&gt;&gt; What's that?\n\n405\n00:20:53.106 --> 00:20:58.356\n&gt;&gt; The remainder is the numerator of the\nfraction left over, that's what Doug says.\n\n406\n00:20:58.356 --> 00:20:59.501\n&gt;&gt; Yeah, that does not help me.\n\n407\n00:20:59.501 --> 00:21:02.789\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] All right.\n\n408\n00:21:02.789 --> 00:21:03.671\n&gt;&gt; Thanks, Doug, we appreciate it.\n\n409\n00:21:03.671 --> 00:21:07.600\n&gt;&gt; [LAUGH] All right, so now remember\nwhat I said towards the beginning.\n\n410\n00:21:07.600 --> 00:21:11.019\nWe can use the parentheses to\ncontrol that order of operations,\n\n411\n00:21:11.019 --> 00:21:12.930\nif it's not giving us what we want.\n\n412\n00:21:12.930 --> 00:21:16.643\nSo here I've got 10 + 4 divided by 2.\n\n413\n00:21:16.643 --> 00:21:18.927\nAnd we know the way PowerShell's\ngonna execute that.\n\n414\n00:21:18.927 --> 00:21:20.456\nIt's gonna do the division first.\n\n415\n00:21:20.456 --> 00:21:24.531\nSo 4 divided by 2 is 2,\n\n416\n00:21:24.531 --> 00:21:29.194\n+ 10 should give me 12.\n\n417\n00:21:29.194 --> 00:21:34.640\nBut let's say I actually\nwanted 7 as the answer, right?\n\n418\n00:21:34.640 --> 00:21:36.314\nI wanted to do the addition first.\n\n419\n00:21:36.314 --> 00:21:41.764\n10 + 4 is 14,\ndivided by 2 is 7, all right?\n\n420\n00:21:41.764 --> 00:21:46.260\nSo you could see the same numbers\ngetting two completely different\n\n421\n00:21:46.260 --> 00:21:50.201\nresults because we've changed\nthe order of operations.\n\n422\n00:21:50.201 --> 00:21:53.194\nSo just keep in mind\nthe parentheses allow us to say,\n\n423\n00:21:53.194 --> 00:21:55.519\nI know addition comes later on, right?\n\n424\n00:21:55.519 --> 00:21:58.443\nI know my modulo comes later on,\nbut I want you to do it first.\n\n425\n00:21:58.443 --> 00:21:59.609\n&gt;&gt; But I want those to happen first.\n\n426\n00:21:59.609 --> 00:22:00.436\n&gt;&gt; Yes.\n&gt;&gt; Okay.\n\n427\n00:22:00.436 --> 00:22:01.375\n&gt;&gt; You can those parentheses.\n\n428\n00:22:01.375 --> 00:22:02.089\n&gt;&gt; That part's [INAUDIBLE].\n\n429\n00:22:02.089 --> 00:22:05.369\n&gt;&gt; And then also keep in mind parentheses\nwill be read across left to right.\n\n430\n00:22:05.369 --> 00:22:08.960\nSo if you have multiple\nparentheses in a long expression,\n\n431\n00:22:08.960 --> 00:22:12.490\nit will go through and\nevaluate inside the parentheses.\n\n432\n00:22:12.490 --> 00:22:16.468\nMove on to the next group of parentheses\nand evaluate that, reducing that down to\n\n433\n00:22:16.468 --> 00:22:20.462\nonce, it's finished that mathematical\noperation within those parentheses.\n\n434\n00:22:20.462 --> 00:22:24.799\nThen go back to the left and start over\ndoing, in our case, negative numbers and\n\n435\n00:22:24.799 --> 00:22:26.765\nthen multiplication, division.\n\n436\n00:22:26.765 --> 00:22:32.593\nAnd modulo, on the next pass, and then\naddition and subtraction on the next pass.\n\n437\n00:22:32.593 --> 00:22:33.341\nSo maybe that helps, too.\n\n438\n00:22:33.341 --> 00:22:35.836\nMaybe thinking about it as passes, and\n\n439\n00:22:35.836 --> 00:22:39.547\nnot doing a pass of just multiplication or\njust division.\n\n440\n00:22:39.547 --> 00:22:43.611\nIt's doing a pass of multiplication,\ndivision, and modulo as it goes across,\n\n441\n00:22:43.611 --> 00:22:45.123\nit's all in one path or pass.\n\n442\n00:22:45.123 --> 00:22:47.022\n&gt;&gt; What about nested parentheses or\n\n443\n00:22:47.022 --> 00:22:50.330\nis that-\n&gt;&gt; They would do the parentheses inside\n\n444\n00:22:50.330 --> 00:22:52.020\nthe parentheses first.\n\n445\n00:22:52.020 --> 00:22:55.416\nThat would then remove,\nonce I did the parentheses inside,\n\n446\n00:22:55.416 --> 00:22:58.092\nthe nested parentheses,\nI do that operation.\n\n447\n00:22:58.092 --> 00:23:00.679\nWell, now those parentheses\nare removed cuz I'm left with a value.\n\n448\n00:23:00.679 --> 00:23:02.318\n&gt;&gt; Yes.\n&gt;&gt; What's done or\n\n449\n00:23:02.318 --> 00:23:04.442\nthe end of that expression.\n\n450\n00:23:04.442 --> 00:23:08.070\nAnd now the outer parentheses\nbecome the next order of operation,\n\n451\n00:23:08.070 --> 00:23:09.315\nthen we would do this.\n\n452\n00:23:09.315 --> 00:23:10.725\n&gt;&gt; Okay.\n\n453\n00:23:10.725 --> 00:23:15.410\n&gt;&gt; All right, so\nnow another thing we've gotta worry about\n\n454\n00:23:15.410 --> 00:23:19.607\nthese arithmetic operators\nis what happens when we\n\n455\n00:23:19.607 --> 00:23:24.111\nstart doing operations on\nobjects of different type?\n\n456\n00:23:24.111 --> 00:23:29.766\nWe kinda saw this a little bit when I\ndid the string times a number, right?\n\n457\n00:23:29.766 --> 00:23:33.944\nWe did the question mark times 3 and\nwe got 3 question marks.\n\n458\n00:23:33.944 --> 00:23:38.016\nAnd in that case, we were really doing\nan operation with different data types.\n\n459\n00:23:38.016 --> 00:23:40.038\nHad a string on one side of the operator,\n\n460\n00:23:40.038 --> 00:23:42.489\nhad an integer on the other\nside of the operator.\n\n461\n00:23:42.489 --> 00:23:44.228\nSo the operator shows you,\n\n462\n00:23:44.228 --> 00:23:48.544\nwe can use this arithmetic operators\nwith different object types.\n\n463\n00:23:48.544 --> 00:23:49.606\nThey don't have to be the same.\n\n464\n00:23:49.606 --> 00:23:55.696\nThey don't have to add string plus string\nor a multiply integer times integer.\n\n465\n00:23:55.696 --> 00:24:00.037\nWe can actually do string times integer,\nand that's what I'm showing you here, so\n\n466\n00:24:00.037 --> 00:24:01.088\nI've got a string.\n\n467\n00:24:01.088 --> 00:24:05.884\nThat and an integer, 32, and\nwhen I execute that, I get top 32.\n\n468\n00:24:05.884 --> 00:24:07.056\n&gt;&gt; Are you talking about me?\n\n469\n00:24:07.056 --> 00:24:08.800\n&gt;&gt; Yeah.\n\n470\n00:24:08.800 --> 00:24:13.160\n[LAUGH] No, that's me [INAUDIBLE], I need\na bigger number from a weight size up.\n\n471\n00:24:13.160 --> 00:24:17.420\nAll right, so again that with FAT32 and\nthis is a good time to stop and\n\n472\n00:24:17.420 --> 00:24:23.050\ntalk about, again, that dynamic type of\nPowerShell and how it's doing this, right?\n\n473\n00:24:23.050 --> 00:24:26.680\nBecause I shouldn't be able to,\nI mean, it's an integer on one side,\n\n474\n00:24:26.680 --> 00:24:30.700\nyet it concatenated my results like\nit would normally do with a string.\n\n475\n00:24:30.700 --> 00:24:32.875\n&gt;&gt; Right,\nwhy don't we see 32 words of fat?\n\n476\n00:24:32.875 --> 00:24:34.100\n[LAUGH]\n&gt;&gt; Yes, all right.\n\n477\n00:24:34.100 --> 00:24:36.850\nSo with the way PowerShell is doing it,\n\n478\n00:24:36.850 --> 00:24:39.870\nwhen it's determining\nwhat that operator means.\n\n479\n00:24:39.870 --> 00:24:43.960\nBecause remember,\na plus sign with integers is addition, but\n\n480\n00:24:43.960 --> 00:24:50.030\na plus sign with strings, arrays, or hash\ntables is actually a concatenation symbol.\n\n481\n00:24:50.030 --> 00:24:50.600\nSo how does it know?\n\n482\n00:24:50.600 --> 00:24:53.670\nAm I supposed to be doing addition or\nconcatenation?\n\n483\n00:24:53.670 --> 00:24:58.100\nIt looks at the left most\nvalue that we're working with.\n\n484\n00:24:58.100 --> 00:25:01.190\nSo in this case FAT is the leftmost value.\n\n485\n00:25:01.190 --> 00:25:02.830\nI could be adding several things, right?\n\n486\n00:25:02.830 --> 00:25:08.440\nFAT plus 32 plus thin plus\n44 plus PowerShell plus 165.\n\n487\n00:25:08.440 --> 00:25:15.010\nIt's the very first one,\nthe leftmost value, whatever that type is,\n\n488\n00:25:15.010 --> 00:25:21.020\nPowerShell then attempts to convert all\nother values to that type, all right?\n\n489\n00:25:21.020 --> 00:25:23.770\nSo in this case, a string comes first.\n\n490\n00:25:23.770 --> 00:25:28.360\nSo then every other value in this\noperation is gonna attempt to convert\n\n491\n00:25:28.360 --> 00:25:31.820\nto a string and\nthen perform the appropriate operation.\n\n492\n00:25:31.820 --> 00:25:34.459\nWhich, in the case of a string,\nit's concatenation,\n\n493\n00:25:34.459 --> 00:25:36.095\nthe plus symbols concatenation.\n\n494\n00:25:36.095 --> 00:25:40.085\nSo what it actually did was\nconvert 32 to a string and\n\n495\n00:25:40.085 --> 00:25:45.331\nthen concatenate those two strings\ntogether to give me that FAT32.\n\n496\n00:25:45.331 --> 00:25:47.922\n&gt;&gt; All right, going to do it the other\nway around too just for fun?\n\n497\n00:25:47.922 --> 00:25:50.184\n&gt;&gt; That's a great question but\nhold on to that thought.\n\n498\n00:25:50.184 --> 00:25:51.905\nIt's actually a surprise,\nI was going to do it later.\n\n499\n00:25:51.905 --> 00:25:52.863\n&gt;&gt; I love surprises.\n\n500\n00:25:52.863 --> 00:25:55.272\n&gt;&gt; I know, all right?\n\n501\n00:25:55.272 --> 00:25:58.547\nHere, I've got an array and\njust let me create an array real quick, so\n\n502\n00:25:58.547 --> 00:26:02.080\njust an array of numbers,\none, two, three, or integers.\n\n503\n00:26:02.080 --> 00:26:08.420\nAnd I'm going to add an array, a variable,\nan array variable type to an integer.\n\n504\n00:26:10.150 --> 00:26:11.610\nAnd in the case of an integer,\n\n505\n00:26:11.610 --> 00:26:16.510\nwe're going to add that to\nthe end of the array, right?\n\n506\n00:26:16.510 --> 00:26:21.180\nSo you can see it actually added\nfour a new element in that array.\n\n507\n00:26:22.200 --> 00:26:23.100\nAnd that does stink.\n\n508\n00:26:23.100 --> 00:26:26.670\nIf I go back and pull that array up,\nI'm sorry I didn't share that in.\n\n509\n00:26:26.670 --> 00:26:27.780\nI forgot I didn't share it.\n\n510\n00:26:27.780 --> 00:26:30.200\nI can't talk today.\n\n511\n00:26:30.200 --> 00:26:31.620\nI did store that in a variable.\n\n512\n00:26:31.620 --> 00:26:33.840\n&gt;&gt; Stored.\n&gt;&gt; I forgot to put that in there so.\n\n513\n00:26:33.840 --> 00:26:36.780\nBut again, I'm not manipulating this.\n\n514\n00:26:36.780 --> 00:26:40.290\nThere's no assignment operator\nin this expression, right?\n\n515\n00:26:40.290 --> 00:26:43.630\nI know we really haven't talked about\nassignment operators yet, we mentioned it\n\n516\n00:26:43.630 --> 00:26:46.320\nthe other day though when we were\nfirst getting started with variables.\n\n517\n00:26:46.320 --> 00:26:48.980\nI said an equal sign is\nthe assignment operator.\n\n518\n00:26:48.980 --> 00:26:53.430\nSo you might think, well now,\nthis variable array or\n\n519\n00:26:53.430 --> 00:26:55.960\narr is gonna contain the value four.\n\n520\n00:26:55.960 --> 00:27:00.030\nAnd it does temporally for right here, but\nnotice when I called it the second time\n\n521\n00:27:00.030 --> 00:27:02.710\nwith just that name,\nthe four is not there.\n\n522\n00:27:02.710 --> 00:27:04.390\nBecause it never assigned it, right?\n\n523\n00:27:04.390 --> 00:27:05.730\nSo just temporarily,\n\n524\n00:27:05.730 --> 00:27:08.980\nin memory, it's tacking that on\nas a new element in that array.\n\n525\n00:27:10.810 --> 00:27:12.950\nWhat if I do an array plus a string?\n\n526\n00:27:12.950 --> 00:27:14.330\nHow is that going to work out?\n\n527\n00:27:14.330 --> 00:27:14.970\n&gt;&gt; I don't know.\n\n528\n00:27:14.970 --> 00:27:18.541\n&gt;&gt; Same thing, it just adds it as\nanother element into that array.\n\n529\n00:27:18.541 --> 00:27:21.825\nAgain, if I wanted to keep that\nI would need just to have a new\n\n530\n00:27:21.825 --> 00:27:27.130\nvariable name out there equals, I would\nhave to use that assignment operator.\n\n531\n00:27:27.130 --> 00:27:32.090\nAn array with the multiplication and\nan integer, what are we gonna get here?\n\n532\n00:27:32.090 --> 00:27:37.018\nAll right, remember the multiplication,\nif it's not both integers,\n\n533\n00:27:37.018 --> 00:27:39.865\nit's going to be a copy process, right?\n\n534\n00:27:39.865 --> 00:27:43.219\nThe multiplication symbol\nis a multiplication for\n\n535\n00:27:43.219 --> 00:27:47.980\nintegers but in this case an array is\nthe first element in my expression.\n\n536\n00:27:47.980 --> 00:27:52.910\nSo it's going to attempt to convert but\nI guess it's gonna take that,\n\n537\n00:27:52.910 --> 00:27:58.173\nconvert it into a, when it sees the array,\nsorry, when it sees the array,\n\n538\n00:27:58.173 --> 00:28:03.550\nthe multiplication now becomes Copy and\nI just get two copies of that array.\n\n539\n00:28:04.710 --> 00:28:08.140\nSame thing with the strings, if I take\na string and I use my asterisk and\n\n540\n00:28:08.140 --> 00:28:11.750\nI do an integer,\nwe're gonna copy that string,\n\n541\n00:28:11.750 --> 00:28:16.583\nin this case three times, so\nI get that string three times.\n\n542\n00:28:16.583 --> 00:28:18.469\nAll right,\n\n543\n00:28:18.469 --> 00:28:23.240\nnow, here's where Cherokee's question\ncomes in and it's a great question.\n\n544\n00:28:23.240 --> 00:28:28.420\nBecause we've learned since we were\nyoung in school that addition and\n\n545\n00:28:28.420 --> 00:28:30.850\nmultiplication are commutative.\n\n546\n00:28:31.850 --> 00:28:37.350\nMeaning, I can flip around a +\nb always equals b + a, right?\n\n547\n00:28:37.350 --> 00:28:41.028\nFour times five equals five times four.\n\n548\n00:28:41.028 --> 00:28:45.475\nThere is no difference, it doesn't matter\nwhat order I put the numbers I'm adding or\n\n549\n00:28:45.475 --> 00:28:49.272\nthe numbers I'm multiplying is always\ngonna come out with same result.\n\n550\n00:28:49.272 --> 00:28:54.254\nIn PowerShell, however,\nthat's not the case, not always.\n\n551\n00:28:54.254 --> 00:28:58.103\nSo you really gotta watch it because\nof the way PowerShell, again,\n\n552\n00:28:58.103 --> 00:29:02.762\nuses the first value in the expression to\ndetermine the type that it's gonna try to\n\n553\n00:29:02.762 --> 00:29:06.980\nconvert all the other values to,\nthat's going to make a difference.\n\n554\n00:29:06.980 --> 00:29:09.560\nBecause up here,\nwe did a string and an integer.\n\n555\n00:29:09.560 --> 00:29:12.850\nThe strong came first, so\n\n556\n00:29:12.850 --> 00:29:16.270\nit converted the integer into a string and\nit concatenated it.\n\n557\n00:29:16.270 --> 00:29:19.299\nWe ended up with FAT32.\n\n558\n00:29:19.299 --> 00:29:22.840\nThis time, if I flip those around,\nI've got the integer first and\n\n559\n00:29:22.840 --> 00:29:26.836\nthen we're going to put the string,\nand what do you think is gonna happen?\n\n560\n00:29:26.836 --> 00:29:28.423\n&gt;&gt; 32 FAT.\n\n561\n00:29:28.423 --> 00:29:30.245\n&gt;&gt; Good guess, but negative.\n\n562\n00:29:30.245 --> 00:29:33.216\n&gt;&gt; [LAUGH] I am wrong of\neverything with this show today.\n\n563\n00:29:33.216 --> 00:29:34.914\n[LAUGH]\n&gt;&gt; I said [INAUDIBLE].\n\n564\n00:29:34.914 --> 00:29:36.905\n&gt;&gt; I know you did.\n\n565\n00:29:36.905 --> 00:29:38.294\n&gt;&gt; [LAUGH] No, but\nthat's a very common thing.\n\n566\n00:29:38.294 --> 00:29:41.154\nThat's what you would assume,\nis that It's commutative so\n\n567\n00:29:41.154 --> 00:29:43.800\nit should be the exact same\nthing if I flip those around.\n\n568\n00:29:43.800 --> 00:29:44.455\n&gt;&gt; Right.\n\n569\n00:29:44.455 --> 00:29:46.030\n[LAUGH]\n&gt;&gt; But the problem is\n\n570\n00:29:46.030 --> 00:29:50.180\nthe integer comes first so it attempts\nto convert this string to an integer.\n\n571\n00:29:50.180 --> 00:29:51.210\n&gt;&gt; It fails saying you can't do that.\n\n572\n00:29:51.210 --> 00:29:55.730\n&gt;&gt; Which fails, and so you can't perform\nthe operation, so it actually fails.\n\n573\n00:29:55.730 --> 00:30:00.780\nSo here's an example where, even though\nthey're on either side of a plus sign,\n\n574\n00:30:00.780 --> 00:30:03.330\nyou can't just flip them around and\nget the exact same results.\n\n575\n00:30:03.330 --> 00:30:05.830\nSame thing with the multiplication.\n\n576\n00:30:05.830 --> 00:30:08.910\nIf I multiply a string times an integer,\n\n577\n00:30:08.910 --> 00:30:11.990\nit becomes that copy process,\nand we're good to go.\n\n578\n00:30:11.990 --> 00:30:13.910\nWe just get it to read those strings.\n\n579\n00:30:13.910 --> 00:30:17.120\nBut if I go integer times string,\n\n580\n00:30:17.120 --> 00:30:20.990\nit attempts to convert the string\nto an integer, and I get a failure.\n\n581\n00:30:20.990 --> 00:30:24.150\nIt's not gonna allow me, or\nit's not gonna be able to do that, right?\n\n582\n00:30:25.380 --> 00:30:26.700\n&gt;&gt; So a huge take-away here,\n\n583\n00:30:26.700 --> 00:30:30.430\nalways check your work whenever you are\ndealing with arithmetic within PowerShell.\n\n584\n00:30:30.430 --> 00:30:33.025\n&gt;&gt; Yes, or\nstrongly type your variables, right?\n\n585\n00:30:33.025 --> 00:30:34.370\n&gt;&gt; [LAUGH]\n&gt;&gt; Actually,\n\n586\n00:30:34.370 --> 00:30:36.368\ndeclare I want this to be an integer.\n\n587\n00:30:36.368 --> 00:30:40.590\nBut yes, absolutely, you have to really\npay attention cuz it makes a big\n\n588\n00:30:40.590 --> 00:30:43.940\ndifference in the results\nthat you're gonna get.\n\n589\n00:30:43.940 --> 00:30:46.800\nAll right, last thing I want to\ntalk about here is going to be\n\n590\n00:30:48.160 --> 00:30:49.130\nthe whole division thing.\n\n591\n00:30:49.130 --> 00:30:52.169\nI wanted to show you, remember I said\nthere is a little bit of a gotcha when it\n\n592\n00:30:52.169 --> 00:30:53.581\ncomes to division in PowerShell?\n\n593\n00:30:53.581 --> 00:30:58.065\nIt handles things a little bit differently\nthan some of our other languages do.\n\n594\n00:30:58.065 --> 00:30:59.624\nSo I wanna make sure\nthat we point this out.\n\n595\n00:30:59.624 --> 00:31:01.950\nAll right,\nlet me clear my screen down here.\n\n596\n00:31:01.950 --> 00:31:03.580\nWe can get a good peek at this.\n\n597\n00:31:04.750 --> 00:31:07.190\nSo what I'm gonna do is\nscroll over the place so\n\n598\n00:31:07.190 --> 00:31:09.079\nthat you get to see what I'm doing.\n\n599\n00:31:09.079 --> 00:31:12.615\nThen, I'm gonna just\ndivide 5 divided by 4.\n\n600\n00:31:12.615 --> 00:31:17.506\nAnd if we run that, we get 1.25.\n\n601\n00:31:17.506 --> 00:31:23.435\nNow, when we do this,\n5 divided by 4, we get 1.25.\n\n602\n00:31:23.435 --> 00:31:28.090\n1.25 is not an integer,\nan integer is a whole number.\n\n603\n00:31:28.090 --> 00:31:33.070\nSo PowerShell's saying, hey,\nI'm going to change that data type on you.\n\n604\n00:31:33.070 --> 00:31:34.390\nAnd let's look at the results of that.\n\n605\n00:31:34.390 --> 00:31:38.120\nIf I take that expression and\nI put it inside parenthesis,\n\n606\n00:31:38.120 --> 00:31:41.680\nand then I could use my .notation\nto call the method get type, we'll\n\n607\n00:31:42.940 --> 00:31:48.910\nsee that the results of this is actually\na double, which gives me that precision,\n\n608\n00:31:48.910 --> 00:31:52.150\nthe decimal point, the ability to\ngo out past that decimal point.\n\n609\n00:31:53.870 --> 00:31:59.255\nWell, what if we cast that as an integer?\n\n610\n00:31:59.255 --> 00:32:01.683\nLet's see what we get.\n\n611\n00:32:01.683 --> 00:32:05.520\nI do my division there, int 5 divide by 4.\n\n612\n00:32:05.520 --> 00:32:06.350\nSo I'm saying do this,\n\n613\n00:32:06.350 --> 00:32:09.190\nremember parenthesis control\nthe order of operations.\n\n614\n00:32:09.190 --> 00:32:13.470\nSo I'm saying first do this\n5 divide 4 which would then\n\n615\n00:32:14.470 --> 00:32:20.970\nin parenthesis be 1.25 and\nI'm gonna say make that an integer.\n\n616\n00:32:20.970 --> 00:32:22.170\nI wanna makes it an integer.\n\n617\n00:32:22.170 --> 00:32:28.390\nIt's going to lose the ability to have\nthose values passed the decimal points.\n\n618\n00:32:28.390 --> 00:32:30.890\nIt's gonna be a whole number, right.\n\n619\n00:32:30.890 --> 00:32:33.680\nSo, what is gonna do is\nprobably what you expected.\n\n620\n00:32:33.680 --> 00:32:39.630\nIt's going to round that number and\nin this case, it rounds it to a 1.\n\n621\n00:32:39.630 --> 00:32:42.410\nWhich hopefully makes\nsense to most of us right?\n\n622\n00:32:42.410 --> 00:32:46.000\nOr 1.25, I remember in school Cherokee,\nwhat was our dividing line?\n\n623\n00:32:46.000 --> 00:32:46.740\n&gt;&gt; Five.\n\n624\n00:32:46.740 --> 00:32:47.810\n&gt;&gt; The 0.5\n&gt;&gt; Mm-hm.\n\n625\n00:32:47.810 --> 00:32:52.640\n&gt;&gt; Right, so if it was below 0.5,\nwe'd round down and\n\n626\n00:32:52.640 --> 00:32:56.110\nif it was above point five we'd round up.\n\n627\n00:32:56.110 --> 00:32:58.590\nMake sense, and\nthat's exactly what power shell does.\n\n628\n00:32:58.590 --> 00:33:04.400\nIf it's below 0.5 it's always gonna round\nto the closest whole number, right?\n\n629\n00:33:04.400 --> 00:33:05.660\nOr the whole integer.\n\n630\n00:33:05.660 --> 00:33:08.930\nSo in this case it rounded down.\n\n631\n00:33:08.930 --> 00:33:09.767\nMake sense.\n\n632\n00:33:09.767 --> 00:33:15.977\nIf we do 5/3 we get 1.66, yadda,\nyadda all the way out, right?\n\n633\n00:33:15.977 --> 00:33:18.960\nSo if we [INAUDIBLE] as an int,\nwhat do you think it's gonna be?\n\n634\n00:33:18.960 --> 00:33:19.810\nWhich way is it going to round?\n\n635\n00:33:19.810 --> 00:33:21.340\n&gt;&gt; 2.\n&gt;&gt; Going to round up?\n\n636\n00:33:21.340 --> 00:33:23.645\n&gt;&gt; That would be my guess but\nI'm probably wrong.\n\n637\n00:33:23.645 --> 00:33:26.260\n[LAUGH]\n&gt;&gt; Well let's find out.\n\n638\n00:33:26.260 --> 00:33:31.580\nDrumroll for Cherokee here,\nand let's see what we got.\n\n639\n00:33:31.580 --> 00:33:32.610\nWe get a 2.\n\n640\n00:33:32.610 --> 00:33:33.690\nSo round up.\n\n641\n00:33:33.690 --> 00:33:35.970\nYour drum roll actually\nclicked my mouse for me.\n\n642\n00:33:35.970 --> 00:33:37.640\nThat was pretty impressive.\n\n643\n00:33:37.640 --> 00:33:38.437\n&gt;&gt; Really?\n[LAUGH]\n\n644\n00:33:38.437 --> 00:33:39.120\n&gt;&gt; Yeah, [LAUGH] that\n\n645\n00:33:39.120 --> 00:33:40.280\nwas a good drum roll, right?\n\n646\n00:33:40.280 --> 00:33:42.940\n&gt;&gt; Really cuz Adam always says\nI have the worst drum roll.\n\n647\n00:33:42.940 --> 00:33:44.610\n&gt;&gt; Aw, well, that's too bad.\n\n648\n00:33:44.610 --> 00:33:47.430\n&gt;&gt; I know.\n[LAUGH] He doesn't recognize.\n\n649\n00:33:47.430 --> 00:33:47.970\n&gt;&gt; He does not.\n\n650\n00:33:47.970 --> 00:33:49.870\nAll right, you're like, well,\nMike, that's no surprise.\n\n651\n00:33:49.870 --> 00:33:51.220\nThat's pretty much what we expected.\n\n652\n00:33:51.220 --> 00:33:53.440\nRound down for less than 0.5.\n\n653\n00:33:53.440 --> 00:33:55.210\nRound up for greater than 0.5.\n\n654\n00:33:55.210 --> 00:33:57.240\nGet to the closest integer.\n\n655\n00:33:58.810 --> 00:34:02.700\nAll well and good and\nuntil what about the actual 0.5?\n\n656\n00:34:02.700 --> 00:34:04.590\nThat's the one we gotta\nwonder about right?\n\n657\n00:34:04.590 --> 00:34:05.350\n&gt;&gt; Which way does it go?\n\n658\n00:34:05.350 --> 00:34:06.500\n&gt;&gt; Yeah which way does it go?\n\n659\n00:34:06.500 --> 00:34:08.170\nWhat did you learn in school?\n\n660\n00:34:08.170 --> 00:34:09.170\n&gt;&gt; It goes up.\n\n661\n00:34:09.170 --> 00:34:11.603\n&gt;&gt; Yeah I've always\nlearned it rounds up too,\n\n662\n00:34:11.603 --> 00:34:14.247\nthat was the thing that\nyou did was you round up.\n\n663\n00:34:14.247 --> 00:34:18.846\nLet's see what PowerShell is gonna do\nhere we are gonna do 5 divided by 2,\n\n664\n00:34:18.846 --> 00:34:20.014\nand we get 2.5.\n\n665\n00:34:20.014 --> 00:34:23.187\nWe're gonna cast that as an int,\nso take that same problem but\n\n666\n00:34:23.187 --> 00:34:27.032\nforce it as an integer instead of\na double so that it can't have the 0.5,\n\n667\n00:34:27.032 --> 00:34:28.760\nwhat's Powershell going to do?\n\n668\n00:34:30.740 --> 00:34:31.400\nIt rounded down.\n\n669\n00:34:32.750 --> 00:34:38.430\nAll right, so now we know Powershell\nwill round to the closest integer but\n\n670\n00:34:38.430 --> 00:34:40.280\nif it's a 0.5 it's gonna round down.\n\n671\n00:34:40.280 --> 00:34:41.340\n&gt;&gt; Okay.\n\n672\n00:34:41.340 --> 00:34:42.010\n&gt;&gt; Or is it?\n\n673\n00:34:42.010 --> 00:34:42.560\n&gt;&gt; I don't know [LAUGH].\n\n674\n00:34:42.560 --> 00:34:43.850\n&gt;&gt; Let's try another one.\n\n675\n00:34:43.850 --> 00:34:45.510\nYou knew I had more things\non my script there.\n\n676\n00:34:45.510 --> 00:34:46.511\n&gt;&gt; I know I'm like hm [LAUGH].\n\n677\n00:34:46.511 --> 00:34:48.257\n&gt;&gt; There's got to be something else to it.\n\n678\n00:34:48.257 --> 00:34:49.080\n&gt;&gt; Hm Mike [LAUGH].\n\n679\n00:34:49.080 --> 00:34:53.607\n&gt;&gt; Let's do 7 divided by 2 and I get 3.5.\n\n680\n00:34:53.607 --> 00:34:59.180\nOkay, another 0.5 so\nin our first try, it rounded down.\n\n681\n00:34:59.180 --> 00:35:04.070\nSo I'm expecting this one to\nround down and I get four.\n\n682\n00:35:05.150 --> 00:35:06.410\n&gt;&gt; What's going on?\n\n683\n00:35:06.410 --> 00:35:09.080\n&gt;&gt; It's just a crapshoot,\nyou roll the dice and\n\n684\n00:35:09.080 --> 00:35:12.380\nyou just have to figure out did\nit round up or did it round down?\n\n685\n00:35:12.380 --> 00:35:13.260\nNo, I'm kidding.\n\n686\n00:35:13.260 --> 00:35:15.550\nIt's not but it is a little quirky.\n\n687\n00:35:15.550 --> 00:35:18.577\nIt's something that we don't see\nin other programming languages,\n\n688\n00:35:18.577 --> 00:35:21.928\nat least I haven't and it's not\nsomething we typically deal with, right?\n\n689\n00:35:21.928 --> 00:35:25.638\nIsn't there a rule where at 0.5 it\neither always goes up or always go down.\n\n690\n00:35:25.638 --> 00:35:26.800\n&gt;&gt; There has to be a rule.\n\n691\n00:35:26.800 --> 00:35:28.090\nThat's what I think.\n\n692\n00:35:28.090 --> 00:35:28.880\n&gt;&gt; There is a rule.\n\n693\n00:35:28.880 --> 00:35:30.650\n&gt;&gt; Who cares what I think right?\n\n694\n00:35:31.770 --> 00:35:34.025\n&gt;&gt; There is a rule but it's an odd one.\n\n695\n00:35:34.025 --> 00:35:36.780\n&gt;&gt; Okay.\n&gt;&gt; The rule is if it's 0.5 like\n\n696\n00:35:36.780 --> 00:35:39.700\nright in the middle and\nwe gotta decide are we rounding up or\n\n697\n00:35:39.700 --> 00:35:46.020\nrounding down it's always gonna round\nto the closest even integer, okay.\n\n698\n00:35:46.020 --> 00:35:48.780\nSo now let's go back and look at it, and\nyou'll see that it makes sense here,\n\n699\n00:35:48.780 --> 00:35:50.130\n5 divided by 2, is 2.5.\n\n700\n00:35:50.130 --> 00:35:55.260\nSo I'm either gonna round down to 2,\nor up to 3.\n\n701\n00:35:55.260 --> 00:35:57.140\nWhich one is even?\n\n702\n00:35:57.140 --> 00:35:58.930\n&gt;&gt; The 2.\n&gt;&gt; So we are gonna round down to 2 because\n\n703\n00:35:58.930 --> 00:36:01.300\nthat's the closest even integer.\n\n704\n00:36:01.300 --> 00:36:03.390\nFor seven divided by two the answer's 3.5.\n\n705\n00:36:03.390 --> 00:36:06.390\nSo I'm either going to round\ndown to three or up to four.\n\n706\n00:36:06.390 --> 00:36:07.510\nWhat are we going to do?\n\n707\n00:36:07.510 --> 00:36:08.700\n&gt;&gt; Four, the even.\n\n708\n00:36:08.700 --> 00:36:13.280\n&gt;&gt; Exactly right we're going to round\nup to the nearest even integer.\n\n709\n00:36:13.280 --> 00:36:16.940\nSo it's not a matter of always\nrounding down or always rounding up\n\n710\n00:36:16.940 --> 00:36:22.140\nwhen you're at a 0.5, it's I'm gonna\nround to the nearest even integer.\n\n711\n00:36:22.140 --> 00:36:26.460\nSo do you think that's because\nMicrosoft doesn't like odd ones?\n\n712\n00:36:26.460 --> 00:36:28.012\n&gt;&gt; That's a good point I don't know.\n\n713\n00:36:28.012 --> 00:36:29.050\n&gt;&gt; Do they like me?\n\n714\n00:36:29.050 --> 00:36:31.740\nI'm a little odd Mike, so I don't know.\n\n715\n00:36:31.740 --> 00:36:35.680\n&gt;&gt; It's funny cuz I was showing Justin\nthis most of you know Justin he is our dev\n\n716\n00:36:35.680 --> 00:36:39.430\nguy, great guy, brilliant guy,\nworks with many many languages.\n\n717\n00:36:39.430 --> 00:36:40.070\n&gt;&gt; Super smart.\n\n718\n00:36:40.070 --> 00:36:44.470\n&gt;&gt; And I showed him this cuz I was\ncurious as I'm prepping up for this and\n\n719\n00:36:44.470 --> 00:36:49.580\ngetting ready, I thought, wow, that's odd\nthat it's not a set thing every time.\n\n720\n00:36:49.580 --> 00:36:51.830\n&gt;&gt; Right.\n&gt;&gt; I mean, I understand there's a rule and\n\n721\n00:36:51.830 --> 00:36:56.620\nI can figure that rule out, but isn't that\ngonna cause me problems, cuz sometimes,\n\n722\n00:36:56.620 --> 00:37:00.315\ndepending on my results, it's gonna round\ndown, sometimes depending on my results\n\n723\n00:37:00.315 --> 00:37:03.025\nit's gonna round up and\nI've gotta account for that.\n\n724\n00:37:03.025 --> 00:37:04.045\n&gt;&gt; What did he say?\n\n725\n00:37:04.045 --> 00:37:04.940\n&gt;&gt; Absolutely.\n\n726\n00:37:04.940 --> 00:37:06.475\n&gt;&gt; [LAUGH]\n&gt;&gt; He said, that would make me\n\n727\n00:37:06.475 --> 00:37:09.475\nreally crazy [LAUGH] He's like\nI've never seen that before.\n\n728\n00:37:09.475 --> 00:37:14.105\nSo it is a little bit strange and that's\nwhy I wanted to make sure I pointed it out\n\n729\n00:37:14.105 --> 00:37:18.480\nto you, cuz it's different\nthan what we're used to and\n\n730\n00:37:18.480 --> 00:37:20.990\nit's something that you're gonna\nhave to take into account.\n\n731\n00:37:20.990 --> 00:37:24.640\nKeep in mind this is only\nif I cast as an int, right?\n\n732\n00:37:24.640 --> 00:37:30.830\nIf I let PowerShell do it's thing, then it\nwould dynamically type that as a double\n\n733\n00:37:30.830 --> 00:37:35.598\nand I'll have those decimal points anyway\nbut there's definitely cases where.\n\n734\n00:37:35.598 --> 00:37:40.660\nLet's say we've got a variable\nthat we created earlier and\n\n735\n00:37:40.660 --> 00:37:43.950\nit was strictly typed as an int, and\nnow I'm doing a mathematical problem and\n\n736\n00:37:43.950 --> 00:37:47.150\nI'm dumping the results into that\nvariable, not thinking about the fact\n\n737\n00:37:47.150 --> 00:37:50.940\nthat my result is a double, and I'm\nputting it into a variable that's an int.\n\n738\n00:37:50.940 --> 00:37:55.540\nI'm going to get a failure or\nit's going to round it in this case and\n\n739\n00:37:55.540 --> 00:37:58.000\nI'm gonna get a result\nthat I might not expect.\n\n740\n00:37:58.000 --> 00:38:01.100\nSo it's something we definitely\nhave to be aware of.\n\n741\n00:38:01.100 --> 00:38:04.110\n&gt;&gt; Well, that was quite a doozy there for\nthat episode.\n\n742\n00:38:04.110 --> 00:38:07.545\nI'm glad you were here to help\nme understand everything.\n\n743\n00:38:07.545 --> 00:38:10.980\n[LAUGH] We'll see if I can retain it but\nthank you for that, Mike.\n\n744\n00:38:10.980 --> 00:38:14.828\nAnd thank you guys for joining us as well,\nbut we have additional operators to cover,\n\n745\n00:38:14.828 --> 00:38:18.423\nso you don't wanna miss that, but for\nthis show, we'll go ahead and sign out.\n\n746\n00:38:18.423 --> 00:38:19.796\nI've been your host Cherokee Boose.\n\n747\n00:38:19.796 --> 00:38:20.436\n&gt;&gt; And I'm Mike Rodrick.\n\n748\n00:38:20.436 --> 00:38:23.621\n&gt;&gt; See you next time here at ITProTV.\n\n749\n00:38:23.621 --> 00:38:29.548\n[MUSIC]\n\n750\n00:38:29.548 --> 00:38:32.336\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "242599719"
        },
        {
          "description": "In this episode, we cover assignment operators. You will learn how to use assignment operators to assign values to variables. You will also see how assignment operators are used to perform numeric operations on values during assignment.",
          "length": "1913",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-2-1-assignment_operators-110917-PGM.00_31_39_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-2-1-assignment_operators-110917-PGM.00_31_39_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-2-1-assignment_operators-110917-PGM.00_31_39_12.Still001-sm.jpg",
          "title": "Assignment Operators",
          "transcript": "WEBVTT\n\n1\n00:00:00.210 --> 00:00:07.293\nWelcome to ITPROTV I'm\nyour host Don [CROSSTALK]\n\n2\n00:00:07.293 --> 00:00:11.871\n&gt;&gt; [SOUND] You're watching ITPROTV.\n\n3\n00:00:11.871 --> 00:00:16.280\n&gt;&gt; Welcome to your PowerShell Scripting\nSeries, I'm your show host Cherokee Boose.\n\n4\n00:00:16.280 --> 00:00:20.100\nIn this episode we'll be taking\na look at our assignment operators.\n\n5\n00:00:20.100 --> 00:00:23.538\nAnd with us today back in studios we\nhave Mister Mike Roderick thanks for\n\n6\n00:00:23.538 --> 00:00:25.330\njoining us today Mike, how are you?\n\n7\n00:00:25.330 --> 00:00:26.100\n&gt;&gt; I'm doing great Cherokee.\n\n8\n00:00:26.100 --> 00:00:28.150\nThanks for having me back and\nexcited as always.\n\n9\n00:00:28.150 --> 00:00:31.190\nWe are continuing our conversation\non operators as you said and\n\n10\n00:00:31.190 --> 00:00:35.810\nthis one focusing in on those\ngood old assignment operators.\n\n11\n00:00:35.810 --> 00:00:37.350\nAnd we've already hinted at this right?\n\n12\n00:00:37.350 --> 00:00:41.190\nWhen we first started working with\nvariables we really had to at that point\n\n13\n00:00:41.190 --> 00:00:44.210\ntalk a little bit about\nan assignment operator.\n\n14\n00:00:44.210 --> 00:00:48.030\nWe said it was the equal\nsign in PowerShell.\n\n15\n00:00:48.030 --> 00:00:52.380\nA single equals is our\nassignment operators.\n\n16\n00:00:52.380 --> 00:00:54.670\nAnd you know what,\nI got the wrong one pulled up there.\n\n17\n00:00:54.670 --> 00:00:56.910\nThere we go, we didn't go to\nmy screen yet, so it's okay.\n\n18\n00:00:58.090 --> 00:00:59.150\nSo the equal sign.\n\n19\n00:00:59.150 --> 00:01:00.030\nWe've talked about that.\n\n20\n00:01:00.030 --> 00:01:03.430\nThat is our basic assignment\noperator In PowerShell,\n\n21\n00:01:03.430 --> 00:01:07.420\nallows me to say,\ndollar sign A equals four.\n\n22\n00:01:07.420 --> 00:01:12.100\nWe are assigning the value\nfour into that variable, or\n\n23\n00:01:12.100 --> 00:01:17.690\ndollar sign B equals server 0/1,\nas a string, right, or an array.\n\n24\n00:01:17.690 --> 00:01:23.860\nWe use that equal sign to assign a value\nto our variable and so that one I\n\n25\n00:01:23.860 --> 00:01:26.620\nthink we're already familiar with, that's\nthat first one that I have listed here.\n\n26\n00:01:26.620 --> 00:01:29.821\nSets the value of a variable\nto the specified value.\n\n27\n00:01:29.821 --> 00:01:35.430\nI also have plus equals, so\nwe have combined two symbols here.\n\n28\n00:01:35.430 --> 00:01:38.450\nAnd the plus equals depending\non what we're doing\n\n29\n00:01:38.450 --> 00:01:42.690\nincrease the value of a variable\nby the specified value.\n\n30\n00:01:42.690 --> 00:01:46.710\nSo I'd have a variable on one side,\non the left side of my operant and\n\n31\n00:01:46.710 --> 00:01:52.180\nthen I'd have plus equals, and then on the\nright by how much I wanted to increase it.\n\n32\n00:01:52.180 --> 00:01:55.980\nAnd again I'll show you examples, so\nright now I'm just kinda defining these.\n\n33\n00:01:55.980 --> 00:01:59.060\nSo I increased the value of\na variable by the specified value,\n\n34\n00:01:59.060 --> 00:02:04.260\nor append the specified\nvalue to the existing value.\n\n35\n00:02:04.260 --> 00:02:09.200\nIt's gonna depend on what we're dealing\nwith as far as the data type goes.\n\n36\n00:02:09.200 --> 00:02:13.300\nThat is supposed to be a minus equal and\nthat's a typo on my part there, it looks\n\n37\n00:02:13.300 --> 00:02:19.030\nlike an underscore equal, but that should\nbe a minus equal just like the plus equal.\n\n38\n00:02:19.030 --> 00:02:23.701\nMinus equal will decrease the value\nof a variable by the specified value.\n\n39\n00:02:23.701 --> 00:02:28.910\nBut notice I don't have or\na remove the specified value.\n\n40\n00:02:28.910 --> 00:02:32.230\nRight, so the minus symbol just\nlike in our arithmetic operators,\n\n41\n00:02:32.230 --> 00:02:36.670\nthe plus can do more than just add,\nit can do, concatenation, with strings,\n\n42\n00:02:36.670 --> 00:02:38.070\narrays and hashes.\n\n43\n00:02:38.070 --> 00:02:41.780\nAnd in the assignment the plus\ncan also work with strings and\n\n44\n00:02:41.780 --> 00:02:44.190\narrays and hashes the minus does not.\n\n45\n00:02:44.190 --> 00:02:46.490\nThe minus only does subtraction.\n\n46\n00:02:46.490 --> 00:02:50.078\nSo we it can decrease the value of\nthe variable by the specified value.\n\n47\n00:02:50.078 --> 00:02:55.780\nMultiplication then would do the same\nmultiply by the specified value or\n\n48\n00:02:55.780 --> 00:03:00.260\nif it's not an integer append\nthe specified value to the existing value.\n\n49\n00:03:00.260 --> 00:03:04.100\nDivision just divides like subtraction\nthere's not a lot of other\n\n50\n00:03:04.100 --> 00:03:04.770\nthings that it can do.\n\n51\n00:03:05.770 --> 00:03:09.854\nModular divide the value of\na variable by the specified value and\n\n52\n00:03:09.854 --> 00:03:13.190\nthen assign the remainder to the variable.\n\n53\n00:03:13.190 --> 00:03:17.931\nGo ahead and do the module and\nthen assign the remainder to the variable.\n\n54\n00:03:19.410 --> 00:03:20.890\nAnd then increase the value.\n\n55\n00:03:20.890 --> 00:03:23.940\nOr the plus plus,\nincrease the value of a variable,\n\n56\n00:03:23.940 --> 00:03:28.310\nassignable property or\narray element by one.\n\n57\n00:03:28.310 --> 00:03:32.779\nOr the minus minus,\ndecrease the value of a variable,\n\n58\n00:03:32.779 --> 00:03:36.577\nassignable property or\narray element by one.\n\n59\n00:03:36.577 --> 00:03:41.828\nSo those are the operators that we\nare gonna cover here in this episode so\n\n60\n00:03:41.828 --> 00:03:44.650\nlet's go take a look at that, right?\n\n61\n00:03:44.650 --> 00:03:47.550\nAnd here we go we'll start with our equals\nand again I know we've already seen\n\n62\n00:03:47.550 --> 00:03:50.660\nthis a little bit but nothing wrong\nwith doing a little refresh right?\n\n63\n00:03:50.660 --> 00:03:51.330\n&gt;&gt; That's right.\n\n64\n00:03:51.330 --> 00:03:55.940\n&gt;&gt; So dollar sign A equals\nten I'll execute that.\n\n65\n00:03:55.940 --> 00:03:59.990\nAnd if we call back, A of course we\nprobably know what we are gonna get,\n\n66\n00:03:59.990 --> 00:04:02.590\nall right, the value of ten.\n\n67\n00:04:02.590 --> 00:04:06.428\nAlso works for strings though,\n\n68\n00:04:06.428 --> 00:04:10.842\nI do $b = Power, and we call back b.\n\n69\n00:04:10.842 --> 00:04:13.940\nWe are gonna see the b now\nstores the string Power, so\n\n70\n00:04:13.940 --> 00:04:16.700\nwe are assigning that\nvalue to that variable.\n\n71\n00:04:17.860 --> 00:04:24.290\nIf we assign more than one value\nto a variable in a single step,\n\n72\n00:04:24.290 --> 00:04:26.660\nwe're going to be creating an array.\n\n73\n00:04:26.660 --> 00:04:30.478\nAnd so here I've got three integers,\nI execute that.\n\n74\n00:04:30.478 --> 00:04:35.490\nI've got dollar sign C,\ndollar sign C, now equals that array.\n\n75\n00:04:37.290 --> 00:04:40.720\nAnd if we were to do like\na dollar sign A.git type and\n\n76\n00:04:40.720 --> 00:04:45.710\nyou do have to spell that right.\n\n77\n00:04:45.710 --> 00:04:49.230\nThat's why tab auto complete\nis the best way to go.\n\n78\n00:04:49.230 --> 00:04:50.440\nNotice that A is an integer.\n\n79\n00:04:50.440 --> 00:04:53.860\nBecause I took an integer and\nput it in there dollar sign A or\n\n80\n00:04:53.860 --> 00:04:56.630\nthat variable now has\nan integer data type.\n\n81\n00:04:56.630 --> 00:05:01.332\nIf we do $b.gettype,\n\n82\n00:05:01.332 --> 00:05:05.097\nand another typo.\n\n83\n00:05:05.097 --> 00:05:10.790\nLike I say, that's a string and you\nprobably guessed what $c is going to be.\n\n84\n00:05:12.090 --> 00:05:17.010\nBut, just to prove it ourselves,\nwe can see that is an array, right?\n\n85\n00:05:18.490 --> 00:05:23.300\nWhat about, in this case,\nI've got a hash table.\n\n86\n00:05:23.300 --> 00:05:26.362\nSo I can store a hash table,\nand we've seen this already,\n\n87\n00:05:26.362 --> 00:05:28.740\nI can store a hash table in an array.\n\n88\n00:05:28.740 --> 00:05:31.371\nWe call that dollar sign D.\n\n89\n00:05:31.371 --> 00:05:33.077\nWe get my hash table back.\n\n90\n00:05:33.077 --> 00:05:36.560\nAnd then Cherokee, you were talking\nabout this one the other day.\n\n91\n00:05:36.560 --> 00:05:41.500\nThis one is a I'm taking advantage of\nsomething that's built in to PowerShell.\n\n92\n00:05:41.500 --> 00:05:45.621\nIt can actually convert kilobytes,\nmegabytes, gigabytes, not terabytes or\n\n93\n00:05:45.621 --> 00:05:46.610\npetabytes, yet.\n\n94\n00:05:46.610 --> 00:05:51.230\nI'm sure that will come, but\nit can actually do the math for me and\n\n95\n00:05:51.230 --> 00:05:53.419\nconvert that into kilobytes.\n\n96\n00:05:53.419 --> 00:05:55.018\nSo I thought I'd show you\nthat one really quick,\n\n97\n00:05:55.018 --> 00:05:56.270\nI promised you we'd take a look at it.\n\n98\n00:05:56.270 --> 00:05:58.950\nSo dollar sign E equals 10 kilobytes.\n\n99\n00:05:58.950 --> 00:06:02.450\nI run that and then we call back E,\n\n100\n00:06:02.450 --> 00:06:07.951\nwe'll see it actually equals 10240, right?\n\n101\n00:06:07.951 --> 00:06:12.599\nSo when I had multiplied it out,\nby 10240, and\n\n102\n00:06:12.599 --> 00:06:16.940\ngave you my value in bytes\ninstead of kilobytes.\n\n103\n00:06:16.940 --> 00:06:20.110\nIt will work with megabytes and\ngigabytes as well.\n\n104\n00:06:20.110 --> 00:06:24.166\nSo I do MB for\nmegabytes I execute that and\n\n105\n00:06:24.166 --> 00:06:30.371\nwe call back e it also gives\nme 10,485,760 bytes and\n\n106\n00:06:30.371 --> 00:06:35.145\nten megabytes so\nit's not storing the 10MB or\n\n107\n00:06:35.145 --> 00:06:43.800\nthe 10 KB it's actually performing\na mathematical operation when we do this.\n\n108\n00:06:43.800 --> 00:06:49.040\nIt's basically making it easier for\nus to enter that value.\n\n109\n00:06:49.040 --> 00:06:53.371\nInstead of having to type out 10485760,\n\n110\n00:06:53.371 --> 00:06:58.950\nI can simply put 10 mb and\nit will store the appropriate value.\n\n111\n00:06:58.950 --> 00:07:02.115\nI will tell you honestly\nmore often than not,\n\n112\n00:07:02.115 --> 00:07:05.290\nI end up trying to convert\nback the other way.\n\n113\n00:07:05.290 --> 00:07:08.976\nAnd when we get into our functions I'll\nshow you how to build a real quick\n\n114\n00:07:08.976 --> 00:07:12.910\neasy function that can go the opposite\ndirection using those little tools,\n\n115\n00:07:12.910 --> 00:07:14.430\nusing the kb and the mb.\n\n116\n00:07:14.430 --> 00:07:16.910\nCuz a lot of times when I'm reading\ninformation from something,\n\n117\n00:07:16.910 --> 00:07:19.100\nI'm getting it back as this.\n\n118\n00:07:19.100 --> 00:07:23.270\nBut in my report or whatever I'm\ntrying to do, this doesn't help me.\n\n119\n00:07:23.270 --> 00:07:26.770\nWhen I see how much free disk\nspace is on a particular server,\n\n120\n00:07:26.770 --> 00:07:30.790\na shared volume, I'd like to see\nthat in megabytes or in gigabytes.\n\n121\n00:07:30.790 --> 00:07:33.670\nMake it a little bit easier to recognize.\n\n122\n00:07:33.670 --> 00:07:37.000\nSo you can write a little\nfunction that'll divide it by and\n\n123\n00:07:37.000 --> 00:07:38.220\njust use that kb divided by [INAUDIBLE].\n\n124\n00:07:40.340 --> 00:07:41.010\nPretty cool there.\n\n125\n00:07:41.010 --> 00:07:43.780\nBut basically the equals that's it right?\n\n126\n00:07:43.780 --> 00:07:47.316\nWhatever the value is on\nthe right we're going to\n\n127\n00:07:47.316 --> 00:07:51.987\nassign that to the variable on\nthe left of that equals operator.\n\n128\n00:07:51.987 --> 00:07:55.940\nNow when we get down to the plus equals\nyou really have to think of this.\n\n129\n00:07:55.940 --> 00:07:57.199\nAnd it's pretty straight forward.\n\n130\n00:07:57.199 --> 00:08:00.167\nIt's plus equals.\n\n131\n00:08:00.167 --> 00:08:02.053\nThey're both operands on their own.\n\n132\n00:08:02.053 --> 00:08:04.061\nThe = we've seen just now,\n\n133\n00:08:04.061 --> 00:08:09.092\nthe + we saw in our arithmetic\noperators episode, it was an addition.\n\n134\n00:08:09.092 --> 00:08:11.876\nSo we're taking two operands and\nputting them together.\n\n135\n00:08:11.876 --> 00:08:16.815\nAnd that's exactly what it's going to do,\nit is going to add and\n\n136\n00:08:16.815 --> 00:08:18.471\nthen assign a value.\n\n137\n00:08:18.471 --> 00:08:21.952\nSo, in this case, a += 5.\n\n138\n00:08:21.952 --> 00:08:25.275\nLet's clear my screen down here,\nand what is a currently?\n\n139\n00:08:25.275 --> 00:08:28.947\nOops, get a little focus\nin the right location.\n\n140\n00:08:28.947 --> 00:08:33.316\n$a is 10 right now, so\n\n141\n00:08:33.316 --> 00:08:37.068\nif we run $a += 5.\n\n142\n00:08:37.068 --> 00:08:39.661\nCherokee, I'll give you\na chance to review yourself,\n\n143\n00:08:39.661 --> 00:08:41.601\nwhat do you think that $a is gonna be now?\n\n144\n00:08:41.601 --> 00:08:44.563\n&gt;&gt; Okay, so, the $a is going to be 11?\n\n145\n00:08:44.563 --> 00:08:45.623\n&gt;&gt; It was 10.\n\n146\n00:08:45.623 --> 00:08:46.323\n&gt;&gt; Right.\n\n147\n00:08:46.323 --> 00:08:47.764\n&gt;&gt; And now we're adding 5.\n\n148\n00:08:47.764 --> 00:08:52.729\n&gt;&gt; Plus the five, okay, I thought I was\ngonna be adding 1 and then the 5, so, 15.\n\n149\n00:08:52.729 --> 00:08:56.332\nWe'll see, [LAUGH].\n\n150\n00:08:56.332 --> 00:08:59.583\n&gt;&gt; 15, you are correct, you get the prize.\n\n151\n00:08:59.583 --> 00:09:02.501\n&gt;&gt; Okay.\n&gt;&gt; So it is doing really two operations,\n\n152\n00:09:02.501 --> 00:09:07.430\nand I wrote this one out here, because\nthis is the exact same thing, right?\n\n153\n00:09:07.430 --> 00:09:10.589\nIf we take and\ndo what's inside our parentheses first.\n\n154\n00:09:10.589 --> 00:09:15.024\nTake the current value of a,\nwhich was 10, add 5,\n\n155\n00:09:15.024 --> 00:09:18.879\nwhich means this whole\nthing now equals 15.\n\n156\n00:09:18.879 --> 00:09:21.570\n$a = 15, sure enough,\n\n157\n00:09:21.570 --> 00:09:27.549\nthat's what happened when we did the += 5,\na now = 15.\n\n158\n00:09:27.549 --> 00:09:30.024\nSo this is really what it's\ndoing in the background,\n\n159\n00:09:30.024 --> 00:09:31.952\nis it's doing two separate operations.\n\n160\n00:09:31.952 --> 00:09:37.043\nIt's first doing the addition,\nright, then it's doing, oops,\n\n161\n00:09:37.043 --> 00:09:41.608\nand I just reversed that,\nthen it's doing the assignment.\n\n162\n00:09:41.608 --> 00:09:43.416\nSo, two separate operations going on.\n\n163\n00:09:43.416 --> 00:09:47.907\n&gt;&gt; But unlike what we saw with our\narithmetic operators, it saves that value,\n\n164\n00:09:47.907 --> 00:09:49.673\nbecause you use that = sign.\n\n165\n00:09:49.673 --> 00:09:51.792\nSo it's not something like a one and done.\n\n166\n00:09:51.792 --> 00:09:52.687\n&gt;&gt; Exactly right.\n\n167\n00:09:52.687 --> 00:09:57.577\nSo we are definitely saving that result,\nand this is a very common thing\n\n168\n00:09:57.577 --> 00:10:01.587\nto need to add to an existing\nvariable a particular value.\n\n169\n00:10:01.587 --> 00:10:06.110\nAnd so I've read this, like I said,\nit works just fine, but\n\n170\n00:10:06.110 --> 00:10:07.988\nit's a lot more typing.\n\n171\n00:10:07.988 --> 00:10:15.412\nThis is a lot less typing, and it's pretty\neasy to read, += 5, it kinda makes sense.\n\n172\n00:10:15.412 --> 00:10:18.704\nWhereas this one, I'm gonna say,\nokay, first, it's gonna do this, and\n\n173\n00:10:18.704 --> 00:10:20.974\nin a complex expression,\nthese are pretty simple.\n\n174\n00:10:20.974 --> 00:10:25.034\nIn a complex expression, that can make\na big difference, make it really easy for\n\n175\n00:10:25.034 --> 00:10:27.737\nsomeone else to read and\nfigure out what's going on.\n\n176\n00:10:27.737 --> 00:10:33.324\nAll right, well, that's fine with\nintegers, what about with string?\n\n177\n00:10:33.324 --> 00:10:39.217\nLet's see what b equals currently, so\nwe don't get any unexpected results,\n\n178\n00:10:39.217 --> 00:10:42.264\nso b currently equals the string power.\n\n179\n00:10:42.264 --> 00:10:48.841\nAnd I'm gonna do $b +=,\nthe string, Shell, all right?\n\n180\n00:10:48.841 --> 00:10:51.449\nSo any guesses on this one?\n\n181\n00:10:51.449 --> 00:10:52.382\n&gt;&gt; PowerShell, [LAUGH].\n\n182\n00:10:52.382 --> 00:10:53.581\n&gt;&gt; I'm gonna say PowerShell.\n\n183\n00:10:53.581 --> 00:10:57.937\nI like your guess, and let's think about\nthat thought process, first, let's verify.\n\n184\n00:10:57.937 --> 00:11:03.653\nWe'll run it, and we'll call back $b,\nand sure enough, we get PowerShell.\n\n185\n00:11:03.653 --> 00:11:06.476\nAll right, again,\ntwo separate operations going on.\n\n186\n00:11:06.476 --> 00:11:11.830\nFirst, the + operator is being\nexecuted on and then the = operator,\n\n187\n00:11:11.830 --> 00:11:15.666\nwith strings,\nthe + is concatenation, right?\n\n188\n00:11:15.666 --> 00:11:20.278\nSo it's gonna take that existing value,\nand concatenate it with Shell.\n\n189\n00:11:20.278 --> 00:11:22.519\nThen the = operator says, now,\n\n190\n00:11:22.519 --> 00:11:26.855\ntake that new value that you've created,\nand assign it to $v.\n\n191\n00:11:26.855 --> 00:11:34.408\nSo $v now includes the concatenated\nresult of our operation.\n\n192\n00:11:34.408 --> 00:11:40.929\nHere, let's see what $c equals,\n$c is an array.\n\n193\n00:11:40.929 --> 00:11:45.357\nI've got the value of 10, 17, and 20, so\n\n194\n00:11:45.357 --> 00:11:50.443\na three element array, and\nI'm going to do a += 25.\n\n195\n00:11:50.443 --> 00:11:53.766\nWe execute that, and we call that $c,\n\n196\n00:11:53.766 --> 00:11:57.809\nwe'll see that it is what we expected,\nright?\n\n197\n00:11:57.809 --> 00:11:59.864\nIt added, because it's an array.\n\n198\n00:11:59.864 --> 00:12:03.171\nI know that arithmetic operator,\nthat + operator,\n\n199\n00:12:03.171 --> 00:12:07.591\nis going to add an element to my array,\nand that's exactly what it did.\n\n200\n00:12:07.591 --> 00:12:14.138\nSo I now have four element array in $c,\nright?\n\n201\n00:12:14.138 --> 00:12:20.793\nAll right, let's find out what is in d,\nwhat is behind door number d?\n\n202\n00:12:20.793 --> 00:12:22.935\nOr letter d, I should say.\n\n203\n00:12:22.935 --> 00:12:27.605\nI've got a hash table in there, it's got\na couple of values, server 01, server 02,\n\n204\n00:12:27.605 --> 00:12:28.903\nand their IP addresses.\n\n205\n00:12:28.903 --> 00:12:31.436\nAnd here I've got another hash table,\n\n206\n00:12:31.436 --> 00:12:35.447\na single key pair hash table\nserver 03 = and its IP address.\n\n207\n00:12:35.447 --> 00:12:38.872\nAnd I'm gonna do + add,\nI mean, I'm sorry, a +=.\n\n208\n00:12:41.392 --> 00:12:46.208\nAnd when we call back d now,\nwe'll see that it indeed combined those\n\n209\n00:12:46.208 --> 00:12:49.943\ntwo hash tables, again,\nvery, very convenient.\n\n210\n00:12:49.943 --> 00:12:54.542\nI mentioned that in our other episode\nbeing able to take two hash tables and\n\n211\n00:12:54.542 --> 00:12:57.149\nmerge them together, fantastic stuff.\n\n212\n00:12:57.149 --> 00:12:59.647\nWe do have to watch out for\ncollisions here.\n\n213\n00:12:59.647 --> 00:13:02.199\nIf we have keys duplicate keys,\n\n214\n00:13:02.199 --> 00:13:07.030\nwe can run into some issues when\nwe start adding hash tables.\n\n215\n00:13:08.454 --> 00:13:13.426\nAll right, then, I don't know what\nI'm doing with d, I'm adding a,\n\n216\n00:13:13.426 --> 00:13:16.096\nI'm not sure what I'm doing here, hm.\n\n217\n00:13:16.096 --> 00:13:19.875\nThat might've been,\nthat's what I wanted to show you,\n\n218\n00:13:19.875 --> 00:13:22.577\nyou can only add hash\ntables to hash tables.\n\n219\n00:13:22.577 --> 00:13:25.981\nI can't add strings,\nor anything like that,\n\n220\n00:13:25.981 --> 00:13:29.401\nyou can only add hash\ntables with hash tables.\n\n221\n00:13:29.401 --> 00:13:31.610\nI've got to make sure we pointed that out.\n\n222\n00:13:31.610 --> 00:13:35.182\nAll right, then I've got my- operator,\nand again, the- operator's pretty simple.\n\n223\n00:13:35.182 --> 00:13:38.964\nBecause it doesn't do anything with\nstrings, arrays, or hash tables,\n\n224\n00:13:38.964 --> 00:13:39.818\nonly integers.\n\n225\n00:13:39.818 --> 00:13:44.509\nThere's not a lot of things it does,\nbut it works the same way as the +=.\n\n226\n00:13:44.509 --> 00:13:51.367\nIf I do, a, which is now- 15,\nif I do a -= 5,\n\n227\n00:13:51.367 --> 00:13:58.019\nwe should be back to our\noriginal value of 10, right?\n\n228\n00:13:58.019 --> 00:14:02.549\nBecause it's doing two separate\noperations, and that's wrong,\n\n229\n00:14:02.549 --> 00:14:07.410\ncuz I copied and pasted and\nforgot to fix that, so $a -5 occurs first.\n\n230\n00:14:07.410 --> 00:14:10.731\nSo, 15- 5, now this whole thing equals 10,\n\n231\n00:14:10.731 --> 00:14:15.235\nwe're gonna assign it to the variable a,\na now equals 10, right?\n\n232\n00:14:15.235 --> 00:14:16.420\nBut you can use,\n\n233\n00:14:16.420 --> 00:14:22.269\nwhereas you can't use a- with an array\nitself to remove an element from an array.\n\n234\n00:14:22.269 --> 00:14:28.179\nYou can use a- with an array element,\ndid I say that right?\n\n235\n00:14:28.179 --> 00:14:31.435\nIt's a little confusing,\nmake sure you hear what I'm saying there.\n\n236\n00:14:31.435 --> 00:14:37.251\nI cannot use the- operator to\nremove an element from an array,\n\n237\n00:14:37.251 --> 00:14:42.316\nbut I can use the- operator\non an element in the array.\n\n238\n00:14:42.316 --> 00:14:47.700\nSo my element in the array has a value,\nand I can subtract from that value.\n\n239\n00:14:47.700 --> 00:14:51.041\nThat element itself is not being\nremoved from the array, but\n\n240\n00:14:51.041 --> 00:14:54.064\nI'm modifying the value of\nthat element in the array.\n\n241\n00:14:54.064 --> 00:14:58.593\n&gt;&gt; So if your element was 100- 199,\nthe element still exists,\n\n242\n00:14:58.593 --> 00:15:02.650\nyou didn't remove the 100,\nyou just changed it to 99?\n\n243\n00:15:02.650 --> 00:15:03.636\n&gt;&gt; Exactly right.\n\n244\n00:15:03.636 --> 00:15:06.922\nThat'd still be, so like,\nif we take a look at,\n\n245\n00:15:06.922 --> 00:15:09.738\nlet's see what $c equals at this point.\n\n246\n00:15:09.738 --> 00:15:13.799\nSo $c has four elements in there,\n10, 17, 20, 25, boy,\n\n247\n00:15:13.799 --> 00:15:19.066\nI really don't like that 17, it'd be\nmuch better if it was 10, 15, 20, 25.\n\n248\n00:15:19.066 --> 00:15:23.024\nSo we're gonna say c,\nthe array c element 1 or index of 1, and\n\n249\n00:15:23.024 --> 00:15:25.735\nremember, that's the second position.\n\n250\n00:15:25.735 --> 00:15:27.038\n&gt;&gt; 0.\n\n251\n00:15:27.038 --> 00:15:32.291\n&gt;&gt; Yeah, -= 2, right?\n\n252\n00:15:32.291 --> 00:15:36.563\nSo now when we call back $c,\nsure enough, the second position-\n\n253\n00:15:36.563 --> 00:15:37.961\n&gt;&gt; So snazzy, Mike.\n\n254\n00:15:37.961 --> 00:15:39.076\n&gt;&gt; I know, right?\n\n255\n00:15:39.076 --> 00:15:42.052\n&gt;&gt; [LAUGH]\n&gt;&gt; Has now been subtracted 2,\n\n256\n00:15:42.052 --> 00:15:45.481\nor has had 2 subtracted from it, right?\n\n257\n00:15:45.481 --> 00:15:48.633\nMultiplication, I know you guys are like,\nall right, we've seen it Mike.\n\n258\n00:15:48.633 --> 00:15:53.625\nIt's the same thing for\nevery one of them, and yeah, it is, so\n\n259\n00:15:53.625 --> 00:15:58.822\nI think we can go through this\npretty quick, a currently = 10.\n\n260\n00:15:58.822 --> 00:16:03.531\nSo if I do a multiply or times equals 5.\n\n261\n00:16:06.003 --> 00:16:08.164\nAnd we call back dollar sign A.\n\n262\n00:16:10.040 --> 00:16:13.930\nWe'll see that sure enough,\nten times five is 50.\n\n263\n00:16:13.930 --> 00:16:15.770\nAgain doing two separate processes.\n\n264\n00:16:15.770 --> 00:16:19.678\nFirst the multiplication,\nand then the assignment.\n\n265\n00:16:19.678 --> 00:16:21.416\nHere B was a string,\n\n266\n00:16:21.416 --> 00:16:27.160\nwhich is now PowerShell because\nwe concatenated it earlier.\n\n267\n00:16:27.160 --> 00:16:33.630\nSo I've got a string times equals three,\nremember you can't multiply by strings,\n\n268\n00:16:33.630 --> 00:16:38.420\nbut I can copy though if I hit F8.\n\n269\n00:16:38.420 --> 00:16:40.430\nCan we now do dollar sign B.\n\n270\n00:16:40.430 --> 00:16:45.780\nNot there Mike, I think I just\n\n271\n00:16:45.780 --> 00:16:51.137\nremoved my whole [INAUDIBLE].\n\n272\n00:16:51.137 --> 00:16:53.330\nThere we go, get that back there.\n\n273\n00:16:53.330 --> 00:16:54.790\nNow if we call dollar sign B.\n\n274\n00:16:56.950 --> 00:17:01.230\nI see I have three Powershells instead of\none, now remember multiplication symbol\n\n275\n00:17:01.230 --> 00:17:06.070\nis the copy process with strings and\narrays okay?\n\n276\n00:17:06.070 --> 00:17:09.370\nAnd here's an example of\nan array where I can't multiply\n\n277\n00:17:10.780 --> 00:17:14.731\nthe array directly but\nI can manipulate a value within the array.\n\n278\n00:17:14.731 --> 00:17:17.730\nSo actually I shouldn't say that\nbecause you can multiply arrays,\n\n279\n00:17:17.730 --> 00:17:19.120\nremember it just duplicates the array.\n\n280\n00:17:19.120 --> 00:17:20.580\nIt's a copy process but\n\n281\n00:17:20.580 --> 00:17:25.970\nI can also manipulate elements within\nthe array using multiplication.\n\n282\n00:17:25.970 --> 00:17:31.008\nSo in this case dollar sign C\nhas an array of four values, 10,\n\n283\n00:17:31.008 --> 00:17:36.729\n15, 20, 25, we're going to take element 0,\n[COUGH] index 0.\n\n284\n00:17:36.729 --> 00:17:40.051\nSo first position multiply it by three.\n\n285\n00:17:40.051 --> 00:17:41.813\n&gt;&gt; 30, 15, 20, 25.\n\n286\n00:17:41.813 --> 00:17:48.389\n&gt;&gt; Let's see and sure enough 30,\n15, 20, 25, right?\n\n287\n00:17:48.389 --> 00:17:54.016\n[COUGH] Division same thing\nwe're gonna take A which is\n\n288\n00:17:54.016 --> 00:17:59.404\ncurrently 50 and\nwe're gonna divide A by three.\n\n289\n00:18:02.629 --> 00:18:05.836\nKeep losing my focus there.\n\n290\n00:18:05.836 --> 00:18:09.451\nAnd we'll call back A and I get 16.6.\n\n291\n00:18:09.451 --> 00:18:10.650\nCould have done a better\nexample on that one.\n\n292\n00:18:10.650 --> 00:18:12.162\n&gt;&gt; I wonder if there's a shortcut,\n\n293\n00:18:12.162 --> 00:18:15.520\na keyboard shortcut to click down to\nthe actual PowerShell window there?\n\n294\n00:18:15.520 --> 00:18:16.432\n&gt;&gt; To flip down.\n\n295\n00:18:16.432 --> 00:18:17.726\n&gt;&gt; Yeah.\n\n296\n00:18:17.726 --> 00:18:20.385\n&gt;&gt; I don't know that's\nsomething I never looked at.\n\n297\n00:18:20.385 --> 00:18:21.947\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, so\n\n298\n00:18:21.947 --> 00:18:23.840\nagain two separate operations going on.\n\n299\n00:18:23.840 --> 00:18:28.176\nFirst the division and\nthen the assignment.\n\n300\n00:18:28.176 --> 00:18:32.897\nIf we do module and\nA is a really odd number now.\n\n301\n00:18:32.897 --> 00:18:34.162\nNot sure how I got there.\n\n302\n00:18:34.162 --> 00:18:36.922\n&gt;&gt; [LAUGH]\n&gt;&gt; Funny how one of the things that I try\n\n303\n00:18:36.922 --> 00:18:40.859\nto do as I'm setting up to for\nthis episode was [CROSSTALK]\n\n304\n00:18:40.859 --> 00:18:41.658\n&gt;&gt; Well good one Mike,\n\n305\n00:18:41.658 --> 00:18:44.344\ngood job [LAUGH]\n&gt;&gt; Tried to use numbers that are gonna\n\n306\n00:18:44.344 --> 00:18:47.279\nlook good on the screen at least,\nmy goodness.\n\n307\n00:18:47.279 --> 00:18:53.700\nBut if we take that 16.667 modular\nequals two we'll execute that.\n\n308\n00:18:53.700 --> 00:18:59.530\nCall back A and\nDoug probably already knows the answer,\n\n309\n00:18:59.530 --> 00:19:01.770\nbut it is going to be .666 in this case.\n\n310\n00:19:01.770 --> 00:19:04.460\nAgain just trying to point out\nit's two separate operations.\n\n311\n00:19:04.460 --> 00:19:08.350\nIt's going to do the modulus first,\nthe modulo first, and\n\n312\n00:19:08.350 --> 00:19:10.760\nthen it's going to do\nthe assignment after.\n\n313\n00:19:12.730 --> 00:19:16.040\nPretty straight forward\nI think with that stuff.\n\n314\n00:19:16.040 --> 00:19:21.570\nPlus equals, minus equals, times equals,\ndivide equals, modular equals.\n\n315\n00:19:21.570 --> 00:19:23.367\nJust two separate operations.\n\n316\n00:19:23.367 --> 00:19:25.780\nJust have to know hey,\ndoes the and it makes sense.\n\n317\n00:19:25.780 --> 00:19:28.201\nAs you read it, modular equals.\n\n318\n00:19:28.201 --> 00:19:29.250\nGo from left to right.\n\n319\n00:19:29.250 --> 00:19:31.606\nDo your modular and\nthen do your assignment.\n\n320\n00:19:31.606 --> 00:19:35.390\nIt's interesting all right, next thing.\n\n321\n00:19:35.390 --> 00:19:39.810\nThe last two here that we gotta talk\nabout are these incrementers or\n\n322\n00:19:39.810 --> 00:19:43.680\nthese plus plus and these minus minus.\n\n323\n00:19:43.680 --> 00:19:45.811\nAnd we use these a lot.\n\n324\n00:19:45.811 --> 00:19:50.699\nI mean we really will see that\nin our scripts in our functions,\n\n325\n00:19:50.699 --> 00:19:55.587\nin our loops, we will be using\nthese quite often because we use\n\n326\n00:19:55.587 --> 00:20:00.766\nthem to increment and\ndecrement counters as we go through loops.\n\n327\n00:20:00.766 --> 00:20:01.480\nSo we'll see them a lot.\n\n328\n00:20:02.500 --> 00:20:06.770\nSo it's important to understand what\nthey do and there is a subtle difference\n\n329\n00:20:06.770 --> 00:20:13.590\nbecause we can put this counter Is\nwhat's called a prefix or a postfix.\n\n330\n00:20:13.590 --> 00:20:14.706\nI used to always call it suffix.\n\n331\n00:20:14.706 --> 00:20:19.220\nAnd I don't know all these blogs I was\nlooking at they call it a postfix but.\n\n332\n00:20:19.220 --> 00:20:23.095\n&gt;&gt; I wonder if that's from across\nthe pond because I've always known it as\n\n333\n00:20:23.095 --> 00:20:23.878\nsuffix also.\n\n334\n00:20:23.878 --> 00:20:25.494\n&gt;&gt; Yeah.\n\n335\n00:20:25.494 --> 00:20:27.558\nI have to ask her [CROSSTALK].\n\n336\n00:20:27.558 --> 00:20:28.729\n&gt;&gt; You guys let us know.\n\n337\n00:20:28.729 --> 00:20:30.155\n&gt;&gt; Yeah!\n&gt;&gt; [LAUGH]\n\n338\n00:20:30.155 --> 00:20:31.211\n&gt;&gt; All right, so\n\n339\n00:20:31.211 --> 00:20:35.620\nbasically I can do a pre-increment or\na post-increment.\n\n340\n00:20:35.620 --> 00:20:38.520\nAnd the question is,\npre or post what right.\n\n341\n00:20:38.520 --> 00:20:39.590\nThat's what we are gotta figure out,\n\n342\n00:20:39.590 --> 00:20:43.060\nthat's really what we've got to be\naware of because this can mess you up\n\n343\n00:20:43.060 --> 00:20:44.770\nwhen you are working with a loop.\n\n344\n00:20:44.770 --> 00:20:48.030\nIt can give you results that you are not\nexpecting, you will never make it to\n\n345\n00:20:48.030 --> 00:20:52.890\nthe last round of the loop like, why\nis it stopping one short of the loop or\n\n346\n00:20:52.890 --> 00:20:55.720\nwhy is it skipping one\nbefore it starts the loop?\n\n347\n00:20:55.720 --> 00:20:58.760\nIt can make you wonder.\n\n348\n00:20:58.760 --> 00:21:02.669\nSo let's take a look, let me just reassign\na real quick to something friendly.\n\n349\n00:21:02.669 --> 00:21:06.070\nWe're gonna say a equals ten, right?\n\n350\n00:21:06.070 --> 00:21:09.610\nAnd then I'm gonna do a ++a,\n\n351\n00:21:09.610 --> 00:21:14.570\nwhich remember from our definitions plus\nplus should increment my value by one.\n\n352\n00:21:16.110 --> 00:21:20.770\nSo I do a plus plus A and\nthen we call A back and\n\n353\n00:21:20.770 --> 00:21:24.320\nsure enough we get a letter, makes sense.\n\n354\n00:21:24.320 --> 00:21:26.685\nAll right what if I do\ndollar sign A plus plus?\n\n355\n00:21:29.394 --> 00:21:33.800\nAnd now we call back a and we get 12.\n\n356\n00:21:33.800 --> 00:21:38.273\nSo the plus is in front of the variable,\nthe plus is behind the variable, or\n\n357\n00:21:38.273 --> 00:21:40.696\nafter the variable, or post variable.\n\n358\n00:21:40.696 --> 00:21:47.080\nIt didn't make a difference right both of\nthose incremented my value by one right?\n\n359\n00:21:47.080 --> 00:21:47.860\nAnd that is true.\n\n360\n00:21:47.860 --> 00:21:49.207\nThat's exactly right.\n\n361\n00:21:49.207 --> 00:21:54.240\nBoth of those will increment the count or\nthe variable in this case by one.\n\n362\n00:21:55.630 --> 00:21:57.438\nSo why have plus plus something?\n\n363\n00:21:57.438 --> 00:21:58.745\n&gt;&gt; My thoughts exactly.\n\n364\n00:21:58.745 --> 00:22:00.630\n&gt;&gt; Or something plus plus.\n\n365\n00:22:00.630 --> 00:22:04.657\nBecause we want to make sure there's at\nleast two or three ways to do everything.\n\n366\n00:22:04.657 --> 00:22:07.315\nAnd that no I'm not kidding that\nis not why although that is\n\n367\n00:22:07.315 --> 00:22:08.780\nMicrosoft logic sometimes.\n\n368\n00:22:08.780 --> 00:22:11.830\n&gt;&gt; Yeah [LAUGH]\n&gt;&gt; But there actually is a difference\n\n369\n00:22:11.830 --> 00:22:16.030\nbetween the two, but it doesn't come\ninto play when we just do it this way.\n\n370\n00:22:16.030 --> 00:22:19.370\nIt makes no difference because all you're\ndoing is incrementing the variable and\n\n371\n00:22:19.370 --> 00:22:20.490\nthen calling the variable back.\n\n372\n00:22:20.490 --> 00:22:22.730\nAnd you're like yep sure\nenough it did increment.\n\n373\n00:22:22.730 --> 00:22:24.868\n&gt;&gt; And I'm hoping you're gonna\nshow is where it does make sense.\n\n374\n00:22:24.868 --> 00:22:27.087\n[LAUGH]\n&gt;&gt; I am going to try that is for\n\n375\n00:22:27.087 --> 00:22:28.310\nsure all right?\n\n376\n00:22:28.310 --> 00:22:29.740\nWe are gonna reset,\n\n377\n00:22:29.740 --> 00:22:34.190\nactually let me clear the screen here and\nwe'll reset eight back to ten.\n\n378\n00:22:34.190 --> 00:22:38.050\nWe can start with a nice easy to remember\nnumber and then what I'm gonna do,\n\n379\n00:22:38.050 --> 00:22:42.010\nis I'm gonna create another variable and\nI called it pre-ink just so\n\n380\n00:22:42.010 --> 00:22:45.380\nwe'd know what we were\nshowing with this example.\n\n381\n00:22:45.380 --> 00:22:52.017\nAnd I'm gonna set that new variable, oops,\ndidn't mean to move that, equal to ++A.\n\n382\n00:22:52.017 --> 00:22:55.669\nOkay, so we'll go there, and\n\n383\n00:22:55.669 --> 00:23:01.715\nwe saw that ++A a minute\nago turned ten into 11.\n\n384\n00:23:01.715 --> 00:23:07.930\nSo let's find out what pre-ink equals now,\nequals 11.\n\n385\n00:23:07.930 --> 00:23:08.908\n&gt;&gt; Okay.\n\n386\n00:23:08.908 --> 00:23:12.600\n&gt;&gt; So you're Mike you still haven't proved\nto me that there is any difference right?\n\n387\n00:23:12.600 --> 00:23:13.422\n&gt;&gt; Right.\n[LAUGH]\n\n388\n00:23:13.422 --> 00:23:15.420\n&gt;&gt; [LAUGH] Well let's try another one.\n\n389\n00:23:15.420 --> 00:23:17.690\nLet's reset A to ten.\n\n390\n00:23:17.690 --> 00:23:20.354\n&gt;&gt; I would do a drum roll but\nI'm afraid I'll make you\n\n391\n00:23:20.354 --> 00:23:23.080\nmouse click and everything-\n&gt;&gt; I think it was just that you startled\n\n392\n00:23:23.080 --> 00:23:24.729\nme and I jump and\nheld my mouse, I don't know.\n\n393\n00:23:27.140 --> 00:23:29.910\nSo now I've reset A to ten let's prove it,\n\n394\n00:23:29.910 --> 00:23:34.020\nlet's call A back real quick to make\nsure Mike actually did reset it.\n\n395\n00:23:34.020 --> 00:23:37.110\nThere we go, A equals ten and\nnow I'm going to do the same thing.\n\n396\n00:23:37.110 --> 00:23:41.770\nDifferent variable post inc\nequals dollar sign A plus plus.\n\n397\n00:23:41.770 --> 00:23:44.220\nSo now the increment is on\nthe other side of the variable.\n\n398\n00:23:44.220 --> 00:23:45.721\nWill that make a difference?\n\n399\n00:23:45.721 --> 00:23:49.033\nDrum roll please [SOUND]\n&gt;&gt; [LAUGH]\n\n400\n00:23:49.033 --> 00:23:53.609\n&gt;&gt; And now we'll call that variable back\n\n401\n00:23:53.609 --> 00:23:59.474\nwe'll say $post inc, and it's 10 not 11.\n\n402\n00:23:59.474 --> 00:24:00.916\nNothing.\n\n403\n00:24:00.916 --> 00:24:01.638\n&gt;&gt; Right.\n\n404\n00:24:01.638 --> 00:24:03.912\n&gt;&gt; [LAUGH]\n&gt;&gt; So it's not the same,\n\n405\n00:24:03.912 --> 00:24:09.050\nit was the same when we did it this way,\nbut not the same when we did this.\n\n406\n00:24:10.370 --> 00:24:13.800\nAnd that's the subtle difference\nthat we've got to pay attention to.\n\n407\n00:24:13.800 --> 00:24:16.396\nAnd it really comes down,\na lot of people telling me,\n\n408\n00:24:16.396 --> 00:24:19.670\nthis is kind of confusing I\ndon't like using it this way.\n\n409\n00:24:19.670 --> 00:24:23.663\nCuz I could do a plus 1, right, which\nwould also increment or plus equals 1.\n\n410\n00:24:23.663 --> 00:24:24.765\n&gt;&gt; It's the same outcome.\n\n411\n00:24:24.765 --> 00:24:28.880\n&gt;&gt; It would also increment it by 1,\nbut this is a little bit shorter.\n\n412\n00:24:28.880 --> 00:24:33.150\nA little bit more compact, makes your\ncode may be a little bit easier.\n\n413\n00:24:33.150 --> 00:24:34.152\n&gt;&gt; Prettier.\n[LAUGH]\n\n414\n00:24:34.152 --> 00:24:34.708\n&gt;&gt; To look at.\n\n415\n00:24:34.708 --> 00:24:36.880\nBut some people don't like this,\nthey won't do this.\n\n416\n00:24:36.880 --> 00:24:41.360\nThey would rather do the $a plus equals 1.\n\n417\n00:24:41.360 --> 00:24:46.179\nOr a equals $a equals $a plus 1.\n\n418\n00:24:46.179 --> 00:24:50.007\nI could really do it three\ndifferent ways in this case.\n\n419\n00:24:50.007 --> 00:24:54.400\nHere's what's going on and why these\nnumbers are coming out different.\n\n420\n00:24:54.400 --> 00:24:59.500\nOne time it stays as 10,\nthe other time I see the 11, right?\n\n421\n00:24:59.500 --> 00:25:02.330\nThe ++ is what's actually\ndoing the incrementation.\n\n422\n00:25:02.330 --> 00:25:05.780\nThis is saying, hey,\nadd one to this variable.\n\n423\n00:25:05.780 --> 00:25:09.080\nWhen it comes before the variable,\n\n424\n00:25:09.080 --> 00:25:12.930\nit's gonna do the incrementation and\nthen use the variable.\n\n425\n00:25:12.930 --> 00:25:16.220\nSo it increments and\nthen uses the variable.\n\n426\n00:25:16.220 --> 00:25:20.600\nSo as we go through this expression,\nit says I'm gonna turn a,\n\n427\n00:25:20.600 --> 00:25:27.740\nI'm gonna go ahead and increment a,\nthen I'm going to assign a decrying.\n\n428\n00:25:27.740 --> 00:25:31.450\nSo do your incrementation\nof this variable.\n\n429\n00:25:31.450 --> 00:25:33.990\nSo now this whole process is done.\n\n430\n00:25:33.990 --> 00:25:38.580\nIt equals 11,\npre-inc equals 11, right here.\n\n431\n00:25:39.850 --> 00:25:46.010\nHosting says use the variable and\nthen increment, right?\n\n432\n00:25:46.010 --> 00:25:51.060\nSo here hosting, I'm assigning dollar\nsign, the current value of dollar\n\n433\n00:25:51.060 --> 00:25:56.060\nsign to posting then I increment, right?\n\n434\n00:25:56.060 --> 00:26:02.500\nSo after posting is set,\nI'm actually turning $a from 10 to 11.\n\n435\n00:26:02.500 --> 00:26:07.588\nAnd that's why posting equals 10,\neven though we did in fact\n\n436\n00:26:07.588 --> 00:26:12.303\nincrement a, if I look at $a,\nit does indeed equal 11.\n\n437\n00:26:12.303 --> 00:26:16.720\nThe posting saw a before\nthe increment happened.\n\n438\n00:26:16.720 --> 00:26:17.300\nDoes that make sense?\n\n439\n00:26:17.300 --> 00:26:21.140\n&gt;&gt; No.\n&gt;&gt; Right, so read it from left to right.\n\n440\n00:26:21.140 --> 00:26:23.270\n&gt;&gt; Okay.\n&gt;&gt; Do your incrementation and\n\n441\n00:26:23.270 --> 00:26:26.590\nthen use your variable to assign it.\n\n442\n00:26:26.590 --> 00:26:29.110\n&gt;&gt; Okay.\n&gt;&gt; So it was 10 before we started.\n\n443\n00:26:29.110 --> 00:26:29.610\n&gt;&gt; Correct.\n\n444\n00:26:29.610 --> 00:26:35.740\n&gt;&gt; And then going left to right,\n10 becomes 11, so $a now equals 11.\n\n445\n00:26:35.740 --> 00:26:38.210\nPre-inc now equals a, which is 11.\n\n446\n00:26:38.210 --> 00:26:39.570\n&gt;&gt; 11.\n\n447\n00:26:39.570 --> 00:26:44.082\n&gt;&gt; This one going in a equals 10,\nthe $a comes first, so\n\n448\n00:26:44.082 --> 00:26:49.090\nbefore you increment it,\nset $ equal to post-inc.\n\n449\n00:26:49.090 --> 00:26:52.724\nWhen we went in $a equals 10,\nso post inc equals 10,\n\n450\n00:26:52.724 --> 00:26:57.750\nthen do your incrementation after you've\nalready set the value for posting.\n\n451\n00:26:58.780 --> 00:27:02.120\nSo posting this variable never saw the 11.\n\n452\n00:27:02.120 --> 00:27:06.490\nYou're doing the 11 after\nyou use the variable.\n\n453\n00:27:06.490 --> 00:27:09.460\nAnd that's really way you'll read\nit in most books and tutorials and\n\n454\n00:27:09.460 --> 00:27:12.350\nthings like that is pre,\n\n455\n00:27:12.350 --> 00:27:18.270\nthe plus plus variable says increment\nthe variable before you use the variable.\n\n456\n00:27:18.270 --> 00:27:24.640\nThe $a++ says, use the variable and\nthen increment it.\n\n457\n00:27:24.640 --> 00:27:29.608\nAnd again this can make a big difference\nwhen we're working with our loops and\n\n458\n00:27:29.608 --> 00:27:31.990\nusing these variables as counters.\n\n459\n00:27:31.990 --> 00:27:35.981\nWhether or not I equals\nthe old value pre-increment or\n\n460\n00:27:35.981 --> 00:27:39.626\nwhether I equals the new\nvalue post-increment,\n\n461\n00:27:39.626 --> 00:27:44.780\nas I go through that loop, for\nexample, can make a big difference.\n\n462\n00:27:44.780 --> 00:27:47.678\n&gt;&gt; And I can definitely see why people\nchoose to write it out the other way.\n\n463\n00:27:47.678 --> 00:27:48.795\n&gt;&gt; Yeah, absolutely.\n\n464\n00:27:48.795 --> 00:27:51.270\n&gt;&gt; [LAUGH]\n&gt;&gt; If you talk to a lot off people,\n\n465\n00:27:51.270 --> 00:27:55.950\nthey'll say, that's really good shorthand\nand it does make it kinda nice and\n\n466\n00:27:55.950 --> 00:27:57.200\nneat and tidy.\n\n467\n00:27:57.200 --> 00:28:02.731\nBut when you go back to look\nat it 6 months later and\n\n468\n00:28:02.731 --> 00:28:06.946\nyou got this really complex formula,\n\n469\n00:28:06.946 --> 00:28:10.781\n(++i / 4) * x++ / ++z.\n\n470\n00:28:10.781 --> 00:28:15.051\n&gt;&gt; It might take you longer to logically\nwork it all out to understand it then.\n\n471\n00:28:15.051 --> 00:28:20.560\n&gt;&gt; Yeah, absolutely, so\nit might not be for everybody.\n\n472\n00:28:20.560 --> 00:28:24.385\nBut if I'm just doing a simple\ncounter within a function, it's very,\n\n473\n00:28:24.385 --> 00:28:25.970\nvery convenient.\n\n474\n00:28:25.970 --> 00:28:28.370\nIt's nice and short and\nsweet and to the point.\n\n475\n00:28:28.370 --> 00:28:30.300\nSo I wanted to make sure\nI pointed that out.\n\n476\n00:28:30.300 --> 00:28:31.890\nI know we're running out of time,\nCherokee.\n\n477\n00:28:31.890 --> 00:28:34.350\nJust got a couple more to do here.\n\n478\n00:28:34.350 --> 00:28:38.669\nWith the arrays, plus plus you\ncan't use that on an array but\n\n479\n00:28:38.669 --> 00:28:42.493\nI can use it on an individual\nelement within an array.\n\n480\n00:28:42.493 --> 00:28:46.630\nAll right, so I can say $c,\nremember $c was an array.\n\n481\n00:28:48.330 --> 00:28:53.254\nRight, 30, 15, 20, 25, and\nif I take that first element,\n\n482\n00:28:53.254 --> 00:28:58.024\nor I'm sorry, index one so\nsecond element and I do a plus plus to it.\n\n483\n00:29:00.687 --> 00:29:02.563\nAnd then we call back $c.\n\n484\n00:29:02.563 --> 00:29:06.573\nSo the second element has\nbeen increased by one, and\n\n485\n00:29:06.573 --> 00:29:11.222\nthen I won't take a lot of time\nto spend with the minus minus,\n\n486\n00:29:11.222 --> 00:29:14.706\nthis is just decrement, just the opposite.\n\n487\n00:29:14.706 --> 00:29:19.507\nWe're gonna decrement the value by one,\nso if the string was initial, or\n\n488\n00:29:19.507 --> 00:29:23.997\nI'm sorry, the integer was initially\n10 and I do a decrement, and\n\n489\n00:29:23.997 --> 00:29:27.580\nthen I call that variable back,\nI'll see it is now 9.\n\n490\n00:29:27.580 --> 00:29:33.110\nDoesn't matter if I'm doing this,\nwhich way I go, right?\n\n491\n00:29:33.110 --> 00:29:37.450\nIf I do it before or after,\na is still gonna equal 9.\n\n492\n00:29:37.450 --> 00:29:39.670\nIt's gonna decrement it by 1,\n\n493\n00:29:39.670 --> 00:29:44.700\nbut if I'm using it in an expression\nlike this, it's the same thing.\n\n494\n00:29:44.700 --> 00:29:48.462\nDecrement at first, then use the variable,\n\n495\n00:29:48.462 --> 00:29:52.323\nor use the variable first and\nthen decrement.\n\n496\n00:29:52.323 --> 00:29:56.860\nRight, you use the original value or the\nnew value, that's really the thing there.\n\n497\n00:29:56.860 --> 00:30:02.070\nAnd so it's the same thing, if you\ndo the $a --, let's say go ahead and\n\n498\n00:30:02.070 --> 00:30:07.578\nuse the variable, in this case assign it\nto post inc then decrement the value.\n\n499\n00:30:07.578 --> 00:30:11.938\nSo post inc would include the old value\nof a, not the current value of a.\n\n500\n00:30:11.938 --> 00:30:15.480\nWhereas pre inc says do\nyour decrementation first,\n\n501\n00:30:15.480 --> 00:30:19.220\nthat's an actual word,\nand then use the variable.\n\n502\n00:30:19.220 --> 00:30:23.353\nSo pre inc would be the current\nversion of a, $a and\n\n503\n00:30:23.353 --> 00:30:27.420\npre inc should equal\neach other in this case.\n\n504\n00:30:27.420 --> 00:30:31.030\nSame thing with an array,\nI can take individual element and\n\n505\n00:30:31.030 --> 00:30:34.780\nI can decrement it by one so\nwe'll do the same position there.\n\n506\n00:30:34.780 --> 00:30:39.845\nAnd if we now look at c$, ops that is not,\n\n507\n00:30:39.845 --> 00:30:45.240\n$c is what I meant,\n16 has now been dropped back down to 15.\n\n508\n00:30:45.240 --> 00:30:46.350\n&gt;&gt; That's my nickname.\n\n509\n00:30:46.350 --> 00:30:48.680\n&gt;&gt; What's that?\n&gt;&gt; That's my nickname.\n\n510\n00:30:48.680 --> 00:30:49.460\n&gt;&gt; $c?\n\n511\n00:30:49.460 --> 00:30:50.265\n&gt;&gt; C$.\n\n512\n00:30:50.265 --> 00:30:51.403\n[LAUGH]\n&gt;&gt; C$, nice.\n\n513\n00:30:51.403 --> 00:30:53.344\n[LAUGH] So there is a good,\n\n514\n00:30:53.344 --> 00:30:58.809\nhopefully a good look at assignment\noperators and how we can use them.\n\n515\n00:30:58.809 --> 00:31:03.726\nOur plus equals, minus equals, multiply\ndivide equals, modular equals, and\n\n516\n00:31:03.726 --> 00:31:07.920\nwe also looked at our plus plus and\nour minus minus, our increment and\n\n517\n00:31:07.920 --> 00:31:11.940\nour decrement that we can\nuse with our variables.\n\n518\n00:31:11.940 --> 00:31:14.115\n&gt;&gt; Okay, Mike, well, thank you for\ntaking the time to explain that.\n\n519\n00:31:14.115 --> 00:31:17.731\nDo you have any thoughts before we\ncontinue or are we just going to go ahead\n\n520\n00:31:17.731 --> 00:31:22.010\nand end it here, and then start a new\nshow to look at some more operators?\n\n521\n00:31:22.010 --> 00:31:23.080\nWhat do you think?\n\n522\n00:31:23.080 --> 00:31:25.258\n&gt;&gt; You know what, I'm sorry,\nI was reading the chatroom.\n\n523\n00:31:25.258 --> 00:31:26.880\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] I did not\n\n524\n00:31:26.880 --> 00:31:28.120\neven hear what you asked me.\n\n525\n00:31:28.120 --> 00:31:31.870\n&gt;&gt; So ladies and gentlemen, we are going\nto go ahead and create a new show for you,\n\n526\n00:31:31.870 --> 00:31:33.770\nso just stay tuned,\nyou don't wanna miss it.\n\n527\n00:31:33.770 --> 00:31:35.315\nFor this one, we'll sign out.\n\n528\n00:31:35.315 --> 00:31:37.120\nI've been your host Cherokee Boose.\n\n529\n00:31:37.120 --> 00:31:37.850\n&gt;&gt; And I'm Mike Rodrick.\n\n530\n00:31:37.850 --> 00:31:40.684\n&gt;&gt; And next time here ITPRO.TV.\n\n531\n00:31:40.684 --> 00:31:46.612\n[MUSIC]\n\n532\n00:31:46.612 --> 00:31:50.246\n&gt;&gt; Thank you for watching ITPRO.TV\n\n",
          "vimeoId": "242602189"
        },
        {
          "description": "In this episode, we cover comparison operators. You will learn what comparison operators are in PowerShell and how they are used to compare values, as well as find values that match a specified pattern.",
          "length": "1749",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-3-1-comparison_operators-110917-PGM.00_28_54_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-3-1-comparison_operators-110917-PGM.00_28_54_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-3-1-comparison_operators-110917-PGM.00_28_54_23.Still001-sm.jpg",
          "title": "Comparison Operators",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.698\nWelcome to ITProTV.\n\n2\n00:00:01.698 --> 00:00:02.867\nI'm your host, Don Pezet.\n\n3\n00:00:02.867 --> 00:00:06.192\n[CROSSTALK]\n\n4\n00:00:06.192 --> 00:00:08.487\n[MUSIC]\n\n5\n00:00:08.487 --> 00:00:12.040\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:12.040 --> 00:00:14.110\n&gt;&gt; Welcome to your\nPowerShell scripting series.\n\n7\n00:00:14.110 --> 00:00:15.940\nI'm your show host, Cherokee Boose.\n\n8\n00:00:15.940 --> 00:00:20.390\nIn this episode, we'll be taking a look\nat our comparison operators, my favorite.\n\n9\n00:00:20.390 --> 00:00:23.230\nAnd back in the studios with us\ntoday we have Mr. Mike Roderick.\n\n10\n00:00:23.230 --> 00:00:24.480\nThank you for joining us today, Mike.\n\n11\n00:00:24.480 --> 00:00:25.950\nHow are you?\n&gt;&gt; I'm doing great, Cherokee.\n\n12\n00:00:25.950 --> 00:00:26.810\nThanks for having me back.\n\n13\n00:00:26.810 --> 00:00:27.450\nAnd yeah, it's your favorite?\n\n14\n00:00:27.450 --> 00:00:28.170\nComparison operators.\n\n15\n00:00:28.170 --> 00:00:28.710\n&gt;&gt; It is my favorite.\n\n16\n00:00:28.710 --> 00:00:29.510\nI'll tell you why.\n\n17\n00:00:29.510 --> 00:00:30.940\nAnd it's because I've\nworked with them before.\n\n18\n00:00:30.940 --> 00:00:32.790\nI've never really used\nthe other ones before.\n\n19\n00:00:32.790 --> 00:00:33.936\nBut I like them too,\n\n20\n00:00:33.936 --> 00:00:37.253\nthere might be a shift now in\nmy preference now that I know.\n\n21\n00:00:37.253 --> 00:00:38.489\n&gt;&gt; Or you can just add to your favorites,\nright,\n\n22\n00:00:38.489 --> 00:00:39.516\nwe don't have to get rid of anything.\n\n23\n00:00:39.516 --> 00:00:42.861\nWe can just add these, now you've\ngot your arithmetic operators and\n\n24\n00:00:42.861 --> 00:00:46.960\nyour assignment operators to go with your\ncomparison operators cuz they're all-\n\n25\n00:00:46.960 --> 00:00:48.680\n&gt;&gt; And they might be your favorites too.\n\n26\n00:00:48.680 --> 00:00:50.780\n&gt;&gt; Yeah, they're all very useful and\nthey're all very important.\n\n27\n00:00:50.780 --> 00:00:53.470\nWe're gonna use them all as\nwe start writing our scripts,\n\n28\n00:00:53.470 --> 00:00:55.250\nas we progress through this series.\n\n29\n00:00:55.250 --> 00:00:57.790\nSo, yes, I'm sorry,\nwe're doing a comparison operators, so\n\n30\n00:00:57.790 --> 00:00:58.670\nlet's take a look at my screen.\n\n31\n00:00:58.670 --> 00:01:00.570\nIt started out like we did\nwith the other operators.\n\n32\n00:01:00.570 --> 00:01:03.510\nAnd just got a little cheat sheet here\nthat I'll make available to you in\n\n33\n00:01:03.510 --> 00:01:06.480\nthe show notes so\nyou can remember what operators,\n\n34\n00:01:06.480 --> 00:01:10.920\nin this case, what comparison\noperators PowerShell supports.\n\n35\n00:01:10.920 --> 00:01:15.702\nNow difference from some other scripting\nlanguages or programming languages\n\n36\n00:01:15.702 --> 00:01:20.638\nthat you might be familiar with, a lot of\nthem will do the double equals, right.\n\n37\n00:01:20.638 --> 00:01:24.933\nWhere equals is an assignment\noperator in most languages, $a=4,\n\n38\n00:01:24.933 --> 00:01:29.517\nwe're assigning the value on the one\nside of the operator to the variable on\n\n39\n00:01:29.517 --> 00:01:31.822\nthe left side of the operator.\n\n40\n00:01:31.822 --> 00:01:36.600\nBut in a lot of languages will do\nan equals equals to do a comparison.\n\n41\n00:01:36.600 --> 00:01:42.785\nSo $A==4 is not assigning but\nit's saying is $A=4 and\n\n42\n00:01:42.785 --> 00:01:47.565\nwe get a bouillon response true or false.\n\n43\n00:01:47.565 --> 00:01:48.815\nPowerShell does not do it that way.\n\n44\n00:01:48.815 --> 00:01:54.220\nPowerShell went with a,\nas you can see here,\n\n45\n00:01:54.220 --> 00:01:57.999\nwe've got some letters that\nrepresent our comparison operators.\n\n46\n00:01:59.280 --> 00:02:02.270\nI remember reading something\nabout the theory was that they\n\n47\n00:02:02.270 --> 00:02:04.840\nthink this is a little\nless confusing maybe.\n\n48\n00:02:04.840 --> 00:02:08.820\nBecause a lot of people do mistake\nthe equals, the assignment, and\n\n49\n00:02:08.820 --> 00:02:12.940\nthe comparison operators, equals\nan equals equals, when do I use which?\n\n50\n00:02:12.940 --> 00:02:14.354\nThis is pretty clear, right.\n\n51\n00:02:14.354 --> 00:02:17.134\nEquals is an assignment operator.\n\n52\n00:02:17.134 --> 00:02:19.520\n-EQ is my comparison operator.\n\n53\n00:02:19.520 --> 00:02:24.086\nSo there is no confusing the two\nas we're looking at our code.\n\n54\n00:02:24.086 --> 00:02:27.583\nSo, and they're pretty straight\nforward because we're using letters,\n\n55\n00:02:27.583 --> 00:02:29.810\nthey're almost like abbreviations, right.\n\n56\n00:02:29.810 --> 00:02:32.252\n-EQ is equals to.\n\n57\n00:02:32.252 --> 00:02:33.950\nDoes A = B?\n\n58\n00:02:33.950 --> 00:02:36.702\nAre they the same, same values?\n\n59\n00:02:36.702 --> 00:02:43.710\n-NE for not equals,\n-GT greater than, right.\n\n60\n00:02:43.710 --> 00:02:45.165\nIs one bigger than the other?\n\n61\n00:02:45.165 --> 00:02:50.715\n-greater than or equal to, is it larger or\nat least equal to the test value?\n\n62\n00:02:50.715 --> 00:02:55.705\n-LT for less than, -LE for\nless than or equal to.\n\n63\n00:02:55.705 --> 00:03:00.240\nAnd those are pretty standard, I think\nwe're probably familiar with those.\n\n64\n00:03:00.240 --> 00:03:02.858\nWhen we get down here into the likes,\n\n65\n00:03:02.858 --> 00:03:06.750\nlikes allow me to match using\nthe wild card character.\n\n66\n00:03:08.020 --> 00:03:09.450\nVery very important.\n\n67\n00:03:09.450 --> 00:03:13.756\nWe'll use this quite often when\nwe're returning processes.\n\n68\n00:03:13.756 --> 00:03:16.590\nAnd we want to find a process that has a,\nwe don't know,\n\n69\n00:03:16.590 --> 00:03:20.730\nwe have a certain few characters that\nwe can assign or a computer name.\n\n70\n00:03:20.730 --> 00:03:23.060\nWe can use the first few characters and\nput an asterisk.\n\n71\n00:03:23.060 --> 00:03:25.000\nThat wild card name like.\n\n72\n00:03:26.260 --> 00:03:28.450\nWe wanna find all the computers\nthat start with SV, right.\n\n73\n00:03:28.450 --> 00:03:32.900\nWe do a dash like SV*.\n\n74\n00:03:32.900 --> 00:03:37.198\nSo it'll be SV and\nthen anything after that.\n\n75\n00:03:37.198 --> 00:03:41.330\n[COUGH] Or the opposite, not like.\n\n76\n00:03:41.330 --> 00:03:44.120\nWe can use again our wild\ncard character there.\n\n77\n00:03:44.120 --> 00:03:45.160\nThen we get into match.\n\n78\n00:03:45.160 --> 00:03:47.590\nMatch is similar to like.\n\n79\n00:03:47.590 --> 00:03:50.350\nLike, though, is a little limited\nas far as the wild cards go.\n\n80\n00:03:50.350 --> 00:03:51.440\nWe have the asterisk.\n\n81\n00:03:51.440 --> 00:03:55.700\nBelieve we can use, the asterisk\nrepresents any number of characters,\n\n82\n00:03:55.700 --> 00:03:59.880\na question mark for\na single character replacement.\n\n83\n00:03:59.880 --> 00:04:03.842\nWe get down into match and now all of\na sudden we're using regular expressions.\n\n84\n00:04:03.842 --> 00:04:08.150\n&gt;&gt; Just maybe in my mind I'm thinking is\nit a little more specific instead of like\n\n85\n00:04:08.150 --> 00:04:12.050\nasterisk dot file extension type\nwhere as matches would have to, well,\n\n86\n00:04:12.050 --> 00:04:13.270\nmatch the file type?\n\n87\n00:04:13.270 --> 00:04:15.060\n&gt;&gt; It's not so\nmuch that it's more specific,\n\n88\n00:04:15.060 --> 00:04:19.670\nit's more that it's,\nwhat's a good way to put it?\n\n89\n00:04:19.670 --> 00:04:21.597\nIt gives me much more control.\n\n90\n00:04:21.597 --> 00:04:24.522\nWe can really build,\nI mean regular expressions,\n\n91\n00:04:24.522 --> 00:04:27.729\nyou can take classes on\nbuilding regular expressions.\n\n92\n00:04:27.729 --> 00:04:32.671\nSo there's much more then being able to\nsay, this letter and then I don't know so\n\n93\n00:04:32.671 --> 00:04:34.425\nmany number of characters.\n\n94\n00:04:34.425 --> 00:04:40.325\nWe can really get specific and look for\nspaces between the letters B and\n\n95\n00:04:40.325 --> 00:04:45.990\nC, or a capital C followed by\na lowercase a followed by a period.\n\n96\n00:04:45.990 --> 00:04:49.600\nI mean you can get very,\nvery specific using regular expressions.\n\n97\n00:04:49.600 --> 00:04:54.250\nSo they're much more powerful\nas far as a matching goes,\n\n98\n00:04:54.250 --> 00:04:56.850\nthen just the likes or not likes.\n\n99\n00:04:56.850 --> 00:04:59.620\nBut it also means you need to\nlearn regular expressions.\n\n100\n00:04:59.620 --> 00:05:02.890\nAnd we're not gonna teach regular\nexpressions in this series or\n\n101\n00:05:02.890 --> 00:05:04.120\nanything like that.\n\n102\n00:05:04.120 --> 00:05:07.500\nSo if you're going, no,\nnot regular expressions, don't worry.\n\n103\n00:05:07.500 --> 00:05:12.660\nWe might use a couple as we go through\nour series in some of our scripts that\n\n104\n00:05:12.660 --> 00:05:16.470\nwe write, but we're not gonna break down\nthe nitty gritty of regular expressions.\n\n105\n00:05:16.470 --> 00:05:20.420\nIf you need that we've got other classes\nin our live courses in our library\n\n106\n00:05:20.420 --> 00:05:22.844\nthat you can check out\nthat cover that in depth.\n\n107\n00:05:22.844 --> 00:05:26.748\nI know Daniel has, I think,\ndone a few shows on regular expressions,\n\n108\n00:05:26.748 --> 00:05:31.069\nbecause like I said, there really is\nan art to writing regular expressions.\n\n109\n00:05:31.069 --> 00:05:35.434\nBut when you're looking for log entries\nthat a have a certain key word,\n\n110\n00:05:35.434 --> 00:05:40.309\nplus a certain time range, plus a certain\nnode address, something like that,\n\n111\n00:05:40.309 --> 00:05:44.080\nthat's where I can't do that\nwith a simple wildcard.\n\n112\n00:05:44.080 --> 00:05:49.270\nBut I can do that with regular\nexpressions, so very, very powerful.\n\n113\n00:05:49.270 --> 00:05:53.950\nAnd here I just wanna explain that\nthe match, which works like the like,\n\n114\n00:05:53.950 --> 00:05:57.525\nwhich works similar to the likes,\nso I don't be redundant there.\n\n115\n00:05:57.525 --> 00:06:00.685\nIt's just more powerful cuz now\nI can use regular expressions\n\n116\n00:06:00.685 --> 00:06:03.225\nin my clause that I have with my match.\n\n117\n00:06:03.225 --> 00:06:04.065\nSame thing with not match.\n\n118\n00:06:04.065 --> 00:06:06.735\nHey, does this match with\nthis character pattern?\n\n119\n00:06:06.735 --> 00:06:10.345\nOr does this not match this\nparticular character pattern?\n\n120\n00:06:10.345 --> 00:06:15.022\nThen we've get contains,\nnot contains, in and not in.\n\n121\n00:06:15.022 --> 00:06:17.699\nAnd these are another one that\nthat's kind of very similar.\n\n122\n00:06:17.699 --> 00:06:18.899\nWhen we look at contains,\n\n123\n00:06:18.899 --> 00:06:22.590\ndetermine whether a collection of\nvalues includes a single value.\n\n124\n00:06:22.590 --> 00:06:25.400\nSo let's say I've got a list of all\nthe processes that are running on this\n\n125\n00:06:25.400 --> 00:06:28.030\ncomputer and\nI want to see if Notepad is in there.\n\n126\n00:06:28.030 --> 00:06:31.460\nOr I wanna see if PowerShell is one\nof those processes that is running.\n\n127\n00:06:31.460 --> 00:06:36.360\nSo my collection might be a get-service,\nright, or a get-process, I should say.\n\n128\n00:06:36.360 --> 00:06:39.685\nAnd then my value I'm looking for,\npowershell.exe, or\n\n129\n00:06:39.685 --> 00:06:43.530\npowershell_ise, to see if that\nparticular process is running.\n\n130\n00:06:43.530 --> 00:06:46.450\nSo contains,\nhere I've got this collection,\n\n131\n00:06:46.450 --> 00:06:50.000\nhowever I build that collection,\nmanually by typing in entries or\n\n132\n00:06:50.000 --> 00:06:53.460\na commandlette that retrieves\na collection of objects.\n\n133\n00:06:53.460 --> 00:06:57.690\nAnd then the word -contains and\nthen my test.\n\n134\n00:06:57.690 --> 00:07:03.102\nIs this in the list of objects,\nright, or the collection?\n\n135\n00:07:03.102 --> 00:07:05.300\nNot contains would say,\nhey, is this not in?\n\n136\n00:07:05.300 --> 00:07:08.957\nHey, I want to see if,\nI'll need to know if IIS or\n\n137\n00:07:08.957 --> 00:07:15.320\nmy web server process is not in the list\nof running processes on my web servers.\n\n138\n00:07:15.320 --> 00:07:18.820\nBecause if it's not, then it's not a web\nserver and I need to restart that service,\n\n139\n00:07:18.820 --> 00:07:19.678\nor something like that.\n\n140\n00:07:19.678 --> 00:07:21.786\nSo collection,\n\n141\n00:07:21.786 --> 00:07:26.350\n-contains, test value, that you wanna\nlook to see if it's in the collection.\n\n142\n00:07:26.350 --> 00:07:29.290\nAnd then I'm slowing this down and saying\nthat because this is what's gonna make\n\n143\n00:07:29.290 --> 00:07:31.050\nthe difference between contains and ins.\n\n144\n00:07:31.050 --> 00:07:35.739\nContains, my collection comes first,\nright.\n\n145\n00:07:35.739 --> 00:07:38.835\nIf I say,\ndoes this collection contain this item or\n\n146\n00:07:38.835 --> 00:07:41.990\nthis object that I'm trying to look for?\n\n147\n00:07:41.990 --> 00:07:44.700\nIn is the opposite of that.\n\n148\n00:07:44.700 --> 00:07:50.630\nIs this object, or whatever it is\nI'm looking for, in this collection?\n\n149\n00:07:50.630 --> 00:07:53.942\nSo now all of a sudden the single object,\nthe test value,\n\n150\n00:07:53.942 --> 00:07:56.158\nis on the left side of the expression.\n\n151\n00:07:56.158 --> 00:08:02.898\nAnd the collection itself is on the right\nside of the operator, in this case -in.\n\n152\n00:08:02.898 --> 00:08:05.487\nSo they really give you\nalmost the same results,\n\n153\n00:08:05.487 --> 00:08:08.155\nthey're just written\na little bit differently.\n\n154\n00:08:08.155 --> 00:08:11.248\nAnd I've a got a good example,\nI'll show where in is relatively new,\n\n155\n00:08:11.248 --> 00:08:12.985\nit came out PowerShell version three.\n\n156\n00:08:12.985 --> 00:08:16.920\nThey added it and why have two\nthings that do the same thing?\n\n157\n00:08:16.920 --> 00:08:19.140\nIn makes things a little\nbit easier to read,\n\n158\n00:08:19.140 --> 00:08:22.650\nand a little bit easier\nto process actually.\n\n159\n00:08:22.650 --> 00:08:25.050\nAnd I'll show you what I\nmean in just a minute.\n\n160\n00:08:25.050 --> 00:08:26.943\nAnd of course I've got not in as well.\n\n161\n00:08:28.727 --> 00:08:29.965\n[COUGH] Excuse me,\n\n162\n00:08:29.965 --> 00:08:35.170\nwhich would say hey is this value not\nin this particular collection again?\n\n163\n00:08:35.170 --> 00:08:40.930\nThe test value on the left -notin and\nthen my collection on the right.\n\n164\n00:08:40.930 --> 00:08:45.400\n-replace changed the specified\nelements of a value.\n\n165\n00:08:46.590 --> 00:08:50.050\nSo pretty self explanatory, right.\n\n166\n00:08:50.050 --> 00:08:54.100\nVery handy though like if\nyou were reading files.\n\n167\n00:08:54.100 --> 00:08:55.726\nI can cycle through,\n\n168\n00:08:55.726 --> 00:09:01.234\nI can use my get-child item to cycle\nthrough a list of files in a folder and\n\n169\n00:09:01.234 --> 00:09:05.618\nchange their extensions-\n&gt;&gt; Even like this, I don't know exactly\n\n170\n00:09:05.618 --> 00:09:10.140\nthe terminology, but in Notepad you\nhave this option to find and replace.\n\n171\n00:09:10.140 --> 00:09:12.060\nI've used that for quite awhile.\n\n172\n00:09:12.060 --> 00:09:14.940\nI remember when I first learned about\nthat, I thought this is so cool.\n\n173\n00:09:14.940 --> 00:09:18.340\nIt saves so much time searching for\na particular string.\n\n174\n00:09:18.340 --> 00:09:21.340\nAnd you can just type it in at one time,\nand it'll replace it for you.\n\n175\n00:09:21.340 --> 00:09:22.585\nSo I could imagine the value there.\n\n176\n00:09:22.585 --> 00:09:23.960\n&gt;&gt; Yeah, absolutely.\n\n177\n00:09:23.960 --> 00:09:27.280\nIf I need to go through and\nswap values in a list of some kind or\n\n178\n00:09:27.280 --> 00:09:29.320\nsomething like that,\nthis can make it very easy.\n\n179\n00:09:29.320 --> 00:09:30.910\nAnd it works similar to what Notepad does.\n\n180\n00:09:30.910 --> 00:09:33.190\nYou've got your original value or\n\n181\n00:09:33.190 --> 00:09:35.935\nyou've got your items that you're\ntrying to do the replace on.\n\n182\n00:09:35.935 --> 00:09:38.970\n-replace, then your original value.\n\n183\n00:09:38.970 --> 00:09:40.490\nWhat you're looking for.\n\n184\n00:09:40.490 --> 00:09:41.550\nAnd then your new value.\n\n185\n00:09:41.550 --> 00:09:43.454\nWhat you wanna change that to.\n\n186\n00:09:43.454 --> 00:09:48.365\nIf I wanna change all .bmps to .jpegs or\nsomething like that,\n\n187\n00:09:48.365 --> 00:09:51.930\nwe can go and make those changes.\n\n188\n00:09:51.930 --> 00:09:53.800\nAll right, and\nthen you've got is or is not.\n\n189\n00:09:53.800 --> 00:09:56.290\nThis deals with object types.\n\n190\n00:09:56.290 --> 00:09:57.840\nIs this an integer?\n\n191\n00:09:57.840 --> 00:10:00.410\nOr is this not an integer?\n\n192\n00:10:00.410 --> 00:10:03.500\nDoes the type of A match the type of B or\ndoes it not match?\n\n193\n00:10:03.500 --> 00:10:04.220\nAre they the same type?\n\n194\n00:10:04.220 --> 00:10:06.120\nAre they not the same type?\n\n195\n00:10:06.120 --> 00:10:10.110\nWe can use is and\nis not to accomplish that comparison.\n\n196\n00:10:10.110 --> 00:10:12.590\nSo lots of good comparisons\nthat we can use.\n\n197\n00:10:12.590 --> 00:10:18.340\nAnd then we're not even done\nthere because every one of these.\n\n198\n00:10:18.340 --> 00:10:22.110\nBy default my comparison operators\nare case insensitive in PowerShell.\n\n199\n00:10:22.110 --> 00:10:26.290\nIn other words, they're gonna ignore\ncase when they're doing a comparison.\n\n200\n00:10:26.290 --> 00:10:31.206\nPowerShell with an uppercase P would\nbe equal to PowerShell spelled\n\n201\n00:10:31.206 --> 00:10:33.719\nwith a lowercase P if I use my -eq.\n\n202\n00:10:33.719 --> 00:10:37.495\nBut I can throw a C in there and\nmake it case sensitive.\n\n203\n00:10:37.495 --> 00:10:42.270\n-CEQ would then, capital PowerShell,\nversus lowercase\n\n204\n00:10:42.270 --> 00:10:45.850\npowershell would not match because\nI'm saying pay attention to the case.\n\n205\n00:10:45.850 --> 00:10:48.450\nAnd to be equal we have\nto be an exact match and\n\n206\n00:10:48.450 --> 00:10:52.170\nnow I'm saying case is\nincluded in that evaluation.\n\n207\n00:10:52.170 --> 00:10:54.570\nSo upper and\nlowercase are not an exact match, right?\n\n208\n00:10:54.570 --> 00:10:59.410\nThey're different ASCI values,\nit's gonna come back as false.\n\n209\n00:10:59.410 --> 00:11:00.970\nAnd all of these I can do a C with.\n\n210\n00:11:00.970 --> 00:11:05.870\nSo I can do a -cgt, although I know I\nguess that one wouldn't make much sense.\n\n211\n00:11:05.870 --> 00:11:10.719\nBut -c like, all right if I wanna make\nsure that's a case sensitive operation\n\n212\n00:11:10.719 --> 00:11:13.318\nwhich is the default-\n&gt;&gt; Probably the match too.\n\n213\n00:11:13.318 --> 00:11:15.751\nYeah absolutely, all right,\nwe can change that.\n\n214\n00:11:15.751 --> 00:11:20.980\nWe can also throw an i in there for\ninsensitive, which is the default.\n\n215\n00:11:20.980 --> 00:11:23.840\nYou don't really need the i but\nif you wanna ensure.\n\n216\n00:11:23.840 --> 00:11:25.990\n&gt;&gt; Like maybe you've been working\nyeah with that for a while and\n\n217\n00:11:25.990 --> 00:11:28.500\nyou just wanna like, hey,\nI know what I'm doing here [LAUGH].\n\n218\n00:11:28.500 --> 00:11:30.560\n&gt;&gt; I wanna make sure\nit's case insensitive.\n\n219\n00:11:30.560 --> 00:11:33.240\nMaybe PowerShell changes one day and\nsays you know what?\n\n220\n00:11:33.240 --> 00:11:35.590\nAll our searches are now\ngonna be case sensitive.\n\n221\n00:11:35.590 --> 00:11:40.920\nI could have a -i in there to ensure that\nmy comparisons were case insensitive.\n\n222\n00:11:40.920 --> 00:11:43.236\n&gt;&gt; Why you gotta be so\ninsensitive about that?\n\n223\n00:11:43.236 --> 00:11:44.263\n&gt;&gt; I try.\n&gt;&gt; Bad joke.\n\n224\n00:11:44.263 --> 00:11:45.398\n[LAUGH]\n&gt;&gt; I'll work on that.\n\n225\n00:11:45.398 --> 00:11:46.897\n[LAUGH] All right, so\n\n226\n00:11:46.897 --> 00:11:52.200\nlet's take a look at some examples\nof using our comparison operators.\n\n227\n00:11:52.200 --> 00:11:56.370\nWe'll start, of course,\nat the top of our list with our equals.\n\n228\n00:11:56.370 --> 00:12:03.324\nAnd the first example I have\nhere is integers is 5 = 5.\n\n229\n00:12:03.324 --> 00:12:07.900\nI know that's a tricky one and\nit is true, right?\n\n230\n00:12:07.900 --> 00:12:09.780\nNotice I get a boolean back from that.\n\n231\n00:12:09.780 --> 00:12:13.040\nI get either a true or a false.\n\n232\n00:12:13.040 --> 00:12:18.639\nIf I do 4 = 5, I get false.\n\n233\n00:12:18.639 --> 00:12:22.300\nWe can work with strings,\nis PowerShell equal to PowerShell?\n\n234\n00:12:24.070 --> 00:12:24.582\n&gt;&gt; Seems like it is.\n\n235\n00:12:24.582 --> 00:12:26.060\n&gt;&gt; It says it's true.\n\n236\n00:12:26.060 --> 00:12:27.420\nAll right.\n\n237\n00:12:27.420 --> 00:12:29.235\nWhat about is Windows equal to PowerShell?\n\n238\n00:12:30.730 --> 00:12:34.900\nThat is not an exact match,\nso it is not proved, right.\n\n239\n00:12:34.900 --> 00:12:39.776\nNow let's try some of those case\ninsensitive and case sensitive options.\n\n240\n00:12:39.776 --> 00:12:44.601\nWhat if I change this to a lower case p?\n\n241\n00:12:44.601 --> 00:12:49.700\nAnd last time it was true,\nthis time it is still true, right.\n\n242\n00:12:49.700 --> 00:12:50.970\n&gt;&gt; Hey, you gotta specify it, right?\n\n243\n00:12:50.970 --> 00:12:55.245\n&gt;&gt; Yeah, so by default, PowerShell\ncomparisons are case insensitive.\n\n244\n00:12:55.245 --> 00:12:59.136\nBut if I add a c in there, dash -ceq\n\n245\n00:13:01.857 --> 00:13:05.725\nNow I get false right cuz now it's saying,\nall right, case is part of the equation,\n\n246\n00:13:05.725 --> 00:13:09.720\nsomething I gotta consider when I'm\nlooking to see if these values are equal.\n\n247\n00:13:09.720 --> 00:13:13.120\nIn this case they are not,\nif I change this back to a capital P and\n\n248\n00:13:13.120 --> 00:13:17.418\nwe run that,\nall of a sudden I get true again.\n\n249\n00:13:17.418 --> 00:13:21.060\nSo I won't do that with each one but\njust so you know, most of these comparison\n\n250\n00:13:21.060 --> 00:13:25.590\noperators have the ability to force\ncase insensitivity or case sensitivity.\n\n251\n00:13:26.950 --> 00:13:29.740\nAll right, not equals,\nvery straight forward.\n\n252\n00:13:29.740 --> 00:13:35.041\nDoes 5 not equal 5, well, and\nthat's false because they are a match and\n\n253\n00:13:35.041 --> 00:13:38.218\nwe are looking for\nnot matches in this case.\n\n254\n00:13:38.218 --> 00:13:43.520\nOr not equal to 5, and\nI get true, all right?\n\n255\n00:13:43.520 --> 00:13:47.170\nFor strings, same thing PowerShell\nnot equal to PowerShell.\n\n256\n00:13:47.170 --> 00:13:49.760\nWell that's false because they are equal.\n\n257\n00:13:49.760 --> 00:13:51.370\nSo that's gonna give me a false.\n\n258\n00:13:51.370 --> 00:13:53.821\nAgain I can do the whole\nthing with the cases there,\n\n259\n00:13:53.821 --> 00:13:55.876\nwe won't go through that exercise again.\n\n260\n00:13:55.876 --> 00:13:59.268\nWindows and Powershell,\nthey do not equal each other, so\n\n261\n00:13:59.268 --> 00:14:01.980\nI get a true for\nthe result of that expression.\n\n262\n00:14:03.380 --> 00:14:05.255\nGreater than.\n\n263\n00:14:05.255 --> 00:14:10.060\nI don't know where that A came from, must\nbe in a fat finger at some point there.\n\n264\n00:14:10.060 --> 00:14:13.664\nBut is 5 greater than 4?\n\n265\n00:14:15.600 --> 00:14:18.690\nAnd again that answer would be true.\n\n266\n00:14:18.690 --> 00:14:21.707\nIs 5 greater than 5?\n\n267\n00:14:21.707 --> 00:14:23.050\nFalse, right.\n\n268\n00:14:23.050 --> 00:14:25.864\nStill getting boolean results on these.\n\n269\n00:14:25.864 --> 00:14:30.555\nNow we're gonna move down here to here,\nwhere I have several values on the left\n\n270\n00:14:30.555 --> 00:14:33.771\nhand side of this expression,\nsorry this operator.\n\n271\n00:14:33.771 --> 00:14:36.076\nSo you've got 4, 5, 6-\n&gt;&gt; So it reads it like the sum?\n\n272\n00:14:36.076 --> 00:14:36.630\nWhat's that?\n\n273\n00:14:36.630 --> 00:14:37.860\n&gt;&gt; So it'll read it like the sum?\n\n274\n00:14:37.860 --> 00:14:40.480\n&gt;&gt; No, it'll actually do\nthe comparison against each one.\n\n275\n00:14:40.480 --> 00:14:41.210\n&gt;&gt; Okay.\n\n276\n00:14:41.210 --> 00:14:42.490\n&gt;&gt; It'll riffle through each one.\n\n277\n00:14:42.490 --> 00:14:50.148\n4, 5, and 6, is any of these\nindividual objects greater than 5?\n\n278\n00:14:50.148 --> 00:14:55.860\nAnd you'll see I get not a true,\nbut I get a value back this time.\n\n279\n00:14:55.860 --> 00:14:58.430\n6 is greater than 5.\n\n280\n00:14:58.430 --> 00:15:02.890\nAs soon as we change from passing\na single value, a single scalar value,\n\n281\n00:15:02.890 --> 00:15:03.960\ninto these expressions.\n\n282\n00:15:05.270 --> 00:15:09.820\nWith a single value, we're always\ngonna get a boolean, true or false.\n\n283\n00:15:09.820 --> 00:15:11.710\nBecause we know the value,\nit doesn't have to give to us.\n\n284\n00:15:11.710 --> 00:15:15.890\nIt's just gonna say yes or no, true or\nfalse to the question we're asking.\n\n285\n00:15:15.890 --> 00:15:17.450\nIs it greater then, right?\n\n286\n00:15:17.450 --> 00:15:20.880\nWhen I have multiple values, now all\nof a sudden it can't just say true or\n\n287\n00:15:20.880 --> 00:15:26.330\nfalse because it's false for 4,\nfalse for 5, but true for 6.\n\n288\n00:15:26.330 --> 00:15:27.940\nSo instead of giving me a true or\n\n289\n00:15:27.940 --> 00:15:32.585\nfalse, it's going to return\nthe values that are true.\n\n290\n00:15:32.585 --> 00:15:33.415\nThat's the key.\n\n291\n00:15:33.415 --> 00:15:37.375\nNot the values that are false,\nit's gonna return only the true values.\n\n292\n00:15:37.375 --> 00:15:41.662\n&gt;&gt; So like, if you had 3,4,5,\nwould it just return nothing?\n\n293\n00:15:41.662 --> 00:15:43.195\n&gt;&gt; Well let's see what we get.\n\n294\n00:15:43.195 --> 00:15:45.953\n3,4,5.\n\n295\n00:15:45.953 --> 00:15:47.070\nI get a whole lot of nothing.\n\n296\n00:15:47.070 --> 00:15:47.608\n&gt;&gt; Okay.\n\n297\n00:15:47.608 --> 00:15:48.935\n&gt;&gt; All right, make sense?\n\n298\n00:15:48.935 --> 00:15:50.955\n&gt;&gt; Yeah.\n&gt;&gt; Okay, great.\n\n299\n00:15:50.955 --> 00:15:51.745\nSo that's my greater than.\n\n300\n00:15:51.745 --> 00:15:55.357\nAnd then greater than equal to,\nvery similar.\n\n301\n00:15:55.357 --> 00:15:59.076\nNow I skipped the whole 5 greater than or\nequal to 4.\n\n302\n00:15:59.076 --> 00:16:03.803\nI think you guys know that but well now\nall of a sudden 5 equal to 5 which before.\n\n303\n00:16:03.803 --> 00:16:08.178\nWas false because the five\nis not greater than five.\n\n304\n00:16:08.178 --> 00:16:12.190\nBut five is greater than or\nequal to five, so I get a true.\n\n305\n00:16:13.680 --> 00:16:18.841\nAnd with multiple values again\nit will test each value and\n\n306\n00:16:18.841 --> 00:16:23.368\nit will return all of\nthe values that answer true.\n\n307\n00:16:23.368 --> 00:16:25.334\nAll right, the we've got less than,\n\n308\n00:16:25.334 --> 00:16:28.450\nyou guys are probably getting\nthe idea at this point.\n\n309\n00:16:28.450 --> 00:16:29.720\nIs 4 less than 5?\n\n310\n00:16:29.720 --> 00:16:31.050\nYes, it is.\n\n311\n00:16:31.050 --> 00:16:31.960\nSo, I get a true.\n\n312\n00:16:31.960 --> 00:16:33.977\nIs 5 less than 5?\n\n313\n00:16:33.977 --> 00:16:34.700\nNo, it is not.\n\n314\n00:16:34.700 --> 00:16:36.220\nSo, I get a false.\n\n315\n00:16:36.220 --> 00:16:38.850\nAre any of these values less than 5?\n\n316\n00:16:38.850 --> 00:16:41.894\nThe 4 is less than 5,\nnot the 5, not the 6.\n\n317\n00:16:42.900 --> 00:16:48.650\nIf I include equals, now all of\na sudden 5 is less than or equal to 5.\n\n318\n00:16:48.650 --> 00:16:54.379\nAnd I get more than one result on\nmy multiples when I'm testing that.\n\n319\n00:16:54.379 --> 00:16:59.182\nSo yes, to answer your question then\nCherokee If there's no matches we just\n\n320\n00:16:59.182 --> 00:17:00.540\nget nothing back.\n\n321\n00:17:00.540 --> 00:17:01.840\nIt doesn't say false.\n\n322\n00:17:01.840 --> 00:17:04.350\nSo as soon as you put\nmultiple values over there,\n\n323\n00:17:04.350 --> 00:17:08.470\nit's not like if there's\none true it will say true.\n\n324\n00:17:08.470 --> 00:17:10.570\nBut if there's more than one\nit will spit the values out.\n\n325\n00:17:10.570 --> 00:17:13.860\n&gt;&gt; Which is nice because I could see\nthat could become confusing yeah.\n\n326\n00:17:13.860 --> 00:17:16.773\n&gt;&gt; Exactly exactly right.\n\n327\n00:17:16.773 --> 00:17:20.770\nAnd it's something to be aware of,\nbecause we might be expecting a boolean.\n\n328\n00:17:20.770 --> 00:17:24.110\nRight when we do things like less than,\nless than or equal to, greater than,\n\n329\n00:17:24.110 --> 00:17:28.490\nwe're typically expecting a true or false\nto come back and that might be my test.\n\n330\n00:17:28.490 --> 00:17:29.690\nDo until this is true.\n\n331\n00:17:29.690 --> 00:17:34.590\nWell this is never gonna evaluate as true.\n\n332\n00:17:34.590 --> 00:17:35.120\nRight?\n\n333\n00:17:35.120 --> 00:17:39.770\nIt's returning values,\nthat equal true so we'd have to\n\n334\n00:17:39.770 --> 00:17:42.920\nchange our logic a little bit there if\nwe wanted to use something like that.\n\n335\n00:17:44.300 --> 00:17:45.943\nAll right, then we've got our likes.\n\n336\n00:17:45.943 --> 00:17:49.510\nSo here's an example of using that\nwildcard character, all right?\n\n337\n00:17:49.510 --> 00:17:52.160\nHere's the value,\nthis is what I'm testing.\n\n338\n00:17:52.160 --> 00:17:57.700\nAnd I say, is this like this, right?\n\n339\n00:17:57.700 --> 00:17:59.890\nAnd inside quotes because I'm strings.\n\n340\n00:17:59.890 --> 00:18:03.560\nAnd I should time out for\none second here and explain to you guys,\n\n341\n00:18:03.560 --> 00:18:06.260\nyou might have noticed,\nI don't know if anybody's out there going,\n\n342\n00:18:06.260 --> 00:18:09.720\nhe's using double quotes, and\nhe told us not to do that.\n\n343\n00:18:09.720 --> 00:18:10.240\n&gt;&gt; That's right.\n\n344\n00:18:10.240 --> 00:18:10.740\nBut he did.\n\n345\n00:18:10.740 --> 00:18:13.350\n&gt;&gt; I know.\nI said that the recommendation or\n\n346\n00:18:13.350 --> 00:18:16.500\nthe prevailing winds out\nthere say use single quotes\n\n347\n00:18:16.500 --> 00:18:19.480\nunless you absolutely need\nan expanding string, right,\n\n348\n00:18:19.480 --> 00:18:22.570\nwhere it will turn the variable\nback into the actual value.\n\n349\n00:18:22.570 --> 00:18:29.080\nI will tell you that even if you\nlook in Microsoft's own help right?\n\n350\n00:18:29.080 --> 00:18:30.070\nFrom PowerShell?\n\n351\n00:18:30.070 --> 00:18:33.520\nThey use double quotes for strings.\n\n352\n00:18:33.520 --> 00:18:37.370\nAs I've been prepping for this show,\nfor the show prior to this,\n\n353\n00:18:37.370 --> 00:18:42.090\nour basics, it has been\na struggle to use a single quote.\n\n354\n00:18:42.090 --> 00:18:44.820\nBecause it's just always\nthe way I've done it.\n\n355\n00:18:44.820 --> 00:18:47.750\nStrings go in quotes, and\nit's always been a double quote.\n\n356\n00:18:47.750 --> 00:18:49.770\nAnd I've really been trying\nto do the right thing and\n\n357\n00:18:49.770 --> 00:18:51.700\nuse a single quote around my strings.\n\n358\n00:18:51.700 --> 00:18:54.460\nUnless I need the double quote\nfunctionality for some reason.\n\n359\n00:18:54.460 --> 00:18:57.010\nI'm about ready to switch back though.\n\n360\n00:18:57.010 --> 00:19:02.730\nBecause I can't find any kind of\nreason to not use the double quotes.\n\n361\n00:19:02.730 --> 00:19:05.820\nI understand that they say, you know.\n\n362\n00:19:05.820 --> 00:19:07.830\nIt works fine, with double quotes.\n\n363\n00:19:07.830 --> 00:19:09.300\nAnd if I've got a variable name and\n\n364\n00:19:09.300 --> 00:19:13.280\nI'm putting it in a string,\nmost likely I want that to resolve.\n\n365\n00:19:13.280 --> 00:19:15.670\nThere's not very many times when I don't.\n\n366\n00:19:15.670 --> 00:19:19.720\nAnd I can escape it with that back take\nif I really don't want the dollar sign,\n\n367\n00:19:19.720 --> 00:19:21.096\nto have a special meaning.\n\n368\n00:19:21.096 --> 00:19:23.830\nSo I apologize [LAUGH]\n\n369\n00:19:23.830 --> 00:19:25.730\nyou'll see me flip back and forth-\n&gt;&gt; And\n\n370\n00:19:25.730 --> 00:19:30.710\nif we're having confession hour here so\nI've always used the double quotes also.\n\n371\n00:19:30.710 --> 00:19:31.670\n&gt;&gt; Have you?\n&gt;&gt; Yeah.\n\n372\n00:19:31.670 --> 00:19:34.804\n&gt;&gt; Yeah it's just-\n&gt;&gt; [LAUGH] I'm glad that I got that off\n\n373\n00:19:34.804 --> 00:19:35.367\nmy chest.\n\n374\n00:19:35.367 --> 00:19:35.932\n&gt;&gt; You feel better?\n\n375\n00:19:35.932 --> 00:19:37.490\n&gt;&gt; Yeah.\n[LAUGH]\n\n376\n00:19:37.490 --> 00:19:39.227\n&gt;&gt; To me it's easier not because it's so\n\n377\n00:19:39.227 --> 00:19:41.940\nmuch easier to type because I do\nhave to do the shift right and\n\n378\n00:19:41.940 --> 00:19:44.510\npinky thing to get the double quote,\nit's just habit.\n\n379\n00:19:44.510 --> 00:19:50.187\nIt's just the way I've always done it,\nand until they can show me a problem that\n\n380\n00:19:50.187 --> 00:19:55.970\nit causes, I think I'm gonna switch back\nto using double quotes on everything.\n\n381\n00:19:57.035 --> 00:19:59.460\nBecauseI can't find any\nreason not to do it.\n\n382\n00:20:00.510 --> 00:20:04.780\nThey just say not to and I'm like a little\nkid telling my parent, well, why not?\n\n383\n00:20:04.780 --> 00:20:05.290\nRight?\n\n384\n00:20:05.290 --> 00:20:07.260\n&gt;&gt; Right.\n&gt;&gt; And if you don't give me a good reason,\n\n385\n00:20:07.260 --> 00:20:08.637\nthen I don't understand.\n\n386\n00:20:08.637 --> 00:20:10.280\n&gt;&gt; [LAUGH]\n&gt;&gt; Anyway, sorry.\n\n387\n00:20:10.280 --> 00:20:12.630\nBack to the topic at hand.\n\n388\n00:20:12.630 --> 00:20:16.380\nSo Windows PowerShell -like \"*shell\".\n\n389\n00:20:16.380 --> 00:20:23.000\nIf we execute that, I get true, right,\nbecause this is saying any character,\n\n390\n00:20:23.000 --> 00:20:28.500\nand it's probably easier to highlight\nup here, anything, then the word shell.\n\n391\n00:20:28.500 --> 00:20:31.680\nWell, here's the word shell.\n\n392\n00:20:31.680 --> 00:20:37.615\nAnd it doesn't matter, what's in front\nof it, I mean it could be [SOUND] right?\n\n393\n00:20:37.615 --> 00:20:42.577\nThis should still evaluate to true because\nthe asterisk represents any number\n\n394\n00:20:42.577 --> 00:20:44.690\nof characters in front of shell.\n\n395\n00:20:44.690 --> 00:20:46.650\n&gt;&gt; Okay.\n&gt;&gt; All right and\n\n396\n00:20:46.650 --> 00:20:49.580\nlet me see if I can undo that easily,\nthere we go good right?\n\n397\n00:20:49.580 --> 00:20:51.599\nWhat if I switch this around though,\nwhat if I did this?\n\n398\n00:20:52.780 --> 00:20:55.765\nPut the asterisk after it,\ndo you think it'll match anymore?\n\n399\n00:20:55.765 --> 00:21:02.810\n&gt;&gt; If asterisk after, yeah, because you\ndon't have anything after your shell.\n\n400\n00:21:02.810 --> 00:21:03.790\nIt really shouldn't matter.\n\n401\n00:21:03.790 --> 00:21:05.420\n&gt;&gt; It shouldn't matter, right?\n\n402\n00:21:05.420 --> 00:21:06.480\n&gt;&gt; That's what I would think.\n\n403\n00:21:06.480 --> 00:21:08.250\n&gt;&gt; Yeah, unfortunately Cherokee,\nI'm sorry.\n\n404\n00:21:08.250 --> 00:21:09.685\nWe're gonna have to ding you on that one.\n\n405\n00:21:09.685 --> 00:21:11.200\n&gt;&gt; [LAUGH]\n&gt;&gt; It's gonna be false.\n\n406\n00:21:11.200 --> 00:21:15.590\n&gt;&gt; Because while you are correct\nin the way you read this syntax,\n\n407\n00:21:15.590 --> 00:21:18.490\nwhat you forgot was I removed\nthe asterisk from the front.\n\n408\n00:21:18.490 --> 00:21:21.720\nSo this is saying nothing can\nbe in front of shell right?\n\n409\n00:21:21.720 --> 00:21:22.690\n&gt;&gt; It makes sense.\n\n410\n00:21:22.690 --> 00:21:25.510\n&gt;&gt; So now if I did this right?\n\n411\n00:21:25.510 --> 00:21:26.540\n&gt;&gt; You'd be good to go.\n\n412\n00:21:26.540 --> 00:21:29.560\n&gt;&gt; Now we'd be good to go because\neven though this could be\n\n413\n00:21:29.560 --> 00:21:30.360\n&gt;&gt; Zero or\n\n414\n00:21:30.360 --> 00:21:32.340\nmore characters behind the word shell.\n\n415\n00:21:32.340 --> 00:21:36.620\nSo Cherokee is absolutely right, the\nasterisk after it really doesn't make any\n\n416\n00:21:36.620 --> 00:21:40.390\ndifference because nothing is\nstill a match to that wild card.\n\n417\n00:21:40.390 --> 00:21:43.550\nBut by not having this one here,\nwhen I move the asterisk,\n\n418\n00:21:43.550 --> 00:21:47.440\nnow you're saying nothing can come\nin front of that S, so it's false.\n\n419\n00:21:47.440 --> 00:21:48.870\nIf I put this asterisk back.\n\n420\n00:21:49.920 --> 00:21:51.390\nAnd we execute that.\n\n421\n00:21:51.390 --> 00:21:53.590\nNow we're true because we're good to go.\n\n422\n00:21:53.590 --> 00:21:57.015\nSo play around with that\nlittle wildcard there.\n\n423\n00:21:57.015 --> 00:21:59.520\nI did another example here\nwhere I've got multiple values.\n\n424\n00:21:59.520 --> 00:22:05.510\nI got \"Windows PowerShell\", \"ITProTV\",\n\"Bash Shell\" -like \"*shell\".\n\n425\n00:22:05.510 --> 00:22:06.940\nIs it gonna match?\n\n426\n00:22:06.940 --> 00:22:07.690\nWhat's it gonna match?\n\n427\n00:22:07.690 --> 00:22:08.694\nOops, I ran that twice.\n\n428\n00:22:13.539 --> 00:22:15.760\nI had the other line selected still.\n\n429\n00:22:15.760 --> 00:22:17.070\nSo let's run this one and see.\n\n430\n00:22:17.070 --> 00:22:19.460\nNow again, anything shell.\n\n431\n00:22:20.530 --> 00:22:26.130\nSo if we look, most likely this\none because anything shell.\n\n432\n00:22:26.130 --> 00:22:27.270\nThis one maybe not.\n\n433\n00:22:28.310 --> 00:22:31.906\nThis one I gotta space,\ndoes that count as anything?\n\n434\n00:22:31.906 --> 00:22:34.850\nLet's see what we got here.\n\n435\n00:22:34.850 --> 00:22:40.240\nAnd sure enough,\nI get both of those values back.\n\n436\n00:22:40.240 --> 00:22:46.860\nSo we can send in multiple values, and\nlook for that particular string pattern or\n\n437\n00:22:46.860 --> 00:22:50.880\ncharacter pattern I should say and then\nnot like would be just the opposite right?\n\n438\n00:22:50.880 --> 00:22:54.580\nWe're saying I don't want\nanything that has anything and\n\n439\n00:22:54.580 --> 00:22:58.532\nthen followed by the word shell or\nthe characters S-H-E-L-L.\n\n440\n00:22:58.532 --> 00:22:59.572\nSo we hit that.\n\n441\n00:22:59.572 --> 00:23:04.280\nThat's gonna be false because it\ndefinitely does have S-H-E-L-L as\n\n442\n00:23:04.280 --> 00:23:06.990\na pattern of characters there.\n\n443\n00:23:06.990 --> 00:23:11.990\nSame thing here, if we have multiple\nvalues going in, it will test each\n\n444\n00:23:11.990 --> 00:23:16.686\none of those values, but it is gonna\nreturn the ones that are not like shell.\n\n445\n00:23:16.686 --> 00:23:22.140\nAnd so, ITPRO.TV comes back,\nnot Windows PowerShell and not barshell.\n\n446\n00:23:24.610 --> 00:23:26.060\nThen we've got match.\n\n447\n00:23:26.060 --> 00:23:27.000\nAnd the match is the one,\n\n448\n00:23:27.000 --> 00:23:31.520\nI didn't actually do very complex\nregular expressions, not all that good.\n\n449\n00:23:31.520 --> 00:23:34.900\nRegular expressions,\nI guess they can be challenging.\n\n450\n00:23:34.900 --> 00:23:37.060\nAnd I wanted to keep this\nrelatively simple and\n\n451\n00:23:37.060 --> 00:23:40.050\ndidn't wanna spend a whole lot of time\nwriting out some crazy expressions.\n\n452\n00:23:40.050 --> 00:23:44.460\nSo I did just a simple match but\nit shows what we can do with it.\n\n453\n00:23:44.460 --> 00:23:47.240\nSo here I've got several values, and\n\n454\n00:23:47.240 --> 00:23:52.100\nI'm gonna do a /match, and\nthen look for \"sun\", all right?\n\n455\n00:23:52.100 --> 00:23:53.880\nAnd we'll execute that,\n\n456\n00:23:53.880 --> 00:23:57.160\nI think Tim would be disappointed\nin your choice of weekdays there.\n\n457\n00:23:57.160 --> 00:23:58.530\n&gt;&gt; What's that?\n\n458\n00:23:58.530 --> 00:24:01.710\nI know I did leave out my Mike,\nMike, Mike, what day is it?\n\n459\n00:24:01.710 --> 00:24:04.052\nFavorite day there.\n\n460\n00:24:04.052 --> 00:24:07.761\n&gt;&gt; And that's Wednesday if you\nguys don't know, Wednesday.\n\n461\n00:24:07.761 --> 00:24:11.896\nEvery Wednesday he tells\nus what day it is, no joke.\n\n462\n00:24:11.896 --> 00:24:17.402\nAll right, I do, I have to do that\nat stand up every Wednesday morning.\n\n463\n00:24:17.402 --> 00:24:20.911\nSo match sun, sure enough, I get Sunday.\n\n464\n00:24:20.911 --> 00:24:24.858\nNot Monday, not Tuesday,\nbecause they don't have sun in them.\n\n465\n00:24:24.858 --> 00:24:27.944\nBut notice I didn't have\nto use a wild card.\n\n466\n00:24:27.944 --> 00:24:30.724\nBut with this regular,\nthis is a type of regular expression,\n\n467\n00:24:30.724 --> 00:24:33.562\nit's just a very simple one,\nit's just characters, [LAUGH].\n\n468\n00:24:33.562 --> 00:24:35.450\nBut it is looking for that pattern.\n\n469\n00:24:35.450 --> 00:24:38.077\n&gt;&gt; Well, yeah, they're all contiguous and\nthey're all together right there.\n\n470\n00:24:38.077 --> 00:24:41.410\n&gt;&gt; I found that pattern and\nthe word Sunday, all right?\n\n471\n00:24:41.410 --> 00:24:44.705\nBut here is what's\ninteresting about match.\n\n472\n00:24:44.705 --> 00:24:48.899\nWith multiple values that I'm testing,\nI get,\n\n473\n00:24:48.899 --> 00:24:53.160\nit returns the value that did match,\nright?\n\n474\n00:24:53.160 --> 00:24:57.431\nAnd let's see when I had a single value,\nright?\n\n475\n00:24:57.431 --> 00:25:01.070\nNotice I get true instead of the match,\nokay?\n\n476\n00:25:01.070 --> 00:25:03.990\nSo something to keep in mind,\nif you pass a single\n\n477\n00:25:03.990 --> 00:25:05.688\nvalue as a test value-\n&gt;&gt; Yeah,\n\n478\n00:25:05.688 --> 00:25:07.650\nthat could be a little deceiving almost.\n\n479\n00:25:07.650 --> 00:25:11.736\n&gt;&gt; Yeah, you've got to pay attention and\nknow what you should expect for results.\n\n480\n00:25:11.736 --> 00:25:15.443\nIf I've got a single value in front\nof my expression, dash match,\n\n481\n00:25:15.443 --> 00:25:19.280\nthen I'm going to get a Boolean\nas a result, true or false?\n\n482\n00:25:19.280 --> 00:25:21.786\nEither this is in there,\nor it's not in there.\n\n483\n00:25:21.786 --> 00:25:25.847\nIf I have multiple values to test,\nit can't just say true or false,\n\n484\n00:25:25.847 --> 00:25:29.550\nbecause which one was true,\nwhich one was false?\n\n485\n00:25:29.550 --> 00:25:32.771\nSo it actually returns anything\nthat matched, in this case, Sunday.\n\n486\n00:25:32.771 --> 00:25:39.200\nIf I change this to day, and we execute\nthat, I'll see all three come back.\n\n487\n00:25:39.200 --> 00:25:45.565\nBecause all three have the characters\nD-A-Y in them somewhere, okay?\n\n488\n00:25:45.565 --> 00:25:50.180\nThe matches variable, this is something\nthat I've actually struggled with\n\n489\n00:25:50.180 --> 00:25:52.246\ngetting to finding a good use for.\n\n490\n00:25:52.246 --> 00:25:55.190\nLet me see if I have anything in there,\ncould we reset that?\n\n491\n00:25:58.740 --> 00:26:04.569\nWith the, I'm gonna say, matches =\n\n492\n00:26:06.652 --> 00:26:11.049\nAnd then I'm going to execute\nthis first command again.\n\n493\n00:26:11.049 --> 00:26:13.330\nSo we're going to look for\nour match within multiple values.\n\n494\n00:26:13.330 --> 00:26:20.532\nAnd then I'm going to check the value of\nmatches, this variable called matches.\n\n495\n00:26:20.532 --> 00:26:23.658\nAnd I'll see it actually equals 0, cuz\nthat's what I just set it to a minute ago.\n\n496\n00:26:23.658 --> 00:26:28.450\nMatches is an automatically\ncreated variable when you use\n\n497\n00:26:28.450 --> 00:26:30.804\nthe dash match expression.\n\n498\n00:26:30.804 --> 00:26:36.121\nIt's not populated when I have\nmultiple values going in, all right?\n\n499\n00:26:36.121 --> 00:26:39.708\nBecause it's gonna list the values\nout as a result of the command.\n\n500\n00:26:39.708 --> 00:26:44.301\nBut when I have a single value going in,\nwe end up with a Boolean response,\n\n501\n00:26:44.301 --> 00:26:48.030\ntrue or false, so\nwhen I execute that, I get true.\n\n502\n00:26:48.030 --> 00:26:50.804\nAnd if we now look at\nthe value of matches,\n\n503\n00:26:50.804 --> 00:26:53.750\nwe'll see it actually equals sun, right?\n\n504\n00:26:53.750 --> 00:26:58.625\nWhich is the match that\nit found in that value.\n\n505\n00:27:01.488 --> 00:27:05.720\nNow, again, this is something, I couldn't\nthink of a really good example for\n\n506\n00:27:05.720 --> 00:27:06.300\nthis one.\n\n507\n00:27:06.300 --> 00:27:10.215\nBecause I'm not sure where\nI would end up using this.\n\n508\n00:27:10.215 --> 00:27:14.598\nIt seems like it would be more\nhelpful if I actually got the value,\n\n509\n00:27:14.598 --> 00:27:17.239\nnot just what matched out of the value.\n\n510\n00:27:17.239 --> 00:27:22.040\nBut I know there's a use for it,\nbecause it's in here, right?\n\n511\n00:27:22.040 --> 00:27:25.270\nThey call that out, they're like,\nthis is an automatically created variable.\n\n512\n00:27:25.270 --> 00:27:28.412\nWhen you use the match\ncomparison operator,\n\n513\n00:27:28.412 --> 00:27:32.225\nthat will store the value of\nwhat it found in the match.\n\n514\n00:27:32.225 --> 00:27:35.892\nSo you're trying to figure out what\nwas it that made this successful,\n\n515\n00:27:35.892 --> 00:27:37.020\nhow did it match sun?\n\n516\n00:27:37.020 --> 00:27:41.625\nWell now I know, it found an uppercase S,\nlowercase u, lowercase n,\n\n517\n00:27:41.625 --> 00:27:45.000\nin my value,\nthat's why it came back as true.\n\n518\n00:27:45.000 --> 00:27:48.677\nSo if you're trying to figure out why it\ncame back as true, this will tell you,\n\n519\n00:27:48.677 --> 00:27:50.980\nthis will show you what\nmatched from that value.\n\n520\n00:27:50.980 --> 00:27:55.868\nIt almost seems like it would be more\nhelpful when you had multiple values,\n\n521\n00:27:55.868 --> 00:28:00.290\nbut I guess in that case it's\nalways gonna be the same.\n\n522\n00:28:00.290 --> 00:28:03.566\nLike I said, I struggled trying\nto find a good purpose for\n\n523\n00:28:03.566 --> 00:28:06.652\nthat, but just I wanted you\nguys to know what it does.\n\n524\n00:28:06.652 --> 00:28:10.104\nIt's created automatically,\nI didn't have to create matches, right,\n\n525\n00:28:10.104 --> 00:28:12.300\nI never declared it,\nalthough I did reset it.\n\n526\n00:28:12.300 --> 00:28:15.918\nBut the point is,\nPowerShell creates it automatically and\n\n527\n00:28:15.918 --> 00:28:17.590\nit stores the match found.\n\n528\n00:28:17.590 --> 00:28:23.649\nBut only when you're passing a single\nvalue into the matched expression.\n\n529\n00:28:23.649 --> 00:28:24.942\n&gt;&gt; All right, sorry.\n\n530\n00:28:24.942 --> 00:28:25.449\n&gt;&gt; That's okay.\n\n531\n00:28:25.449 --> 00:28:27.624\n&gt;&gt; I'm looking at the clock, Mike,\n\n532\n00:28:27.624 --> 00:28:32.165\nand I see we have some more comparison\noperators on our list here.\n\n533\n00:28:32.165 --> 00:28:34.605\nI don't know if we should come\nback with a part two, though.\n\n534\n00:28:34.605 --> 00:28:37.040\n&gt;&gt; If we're about out of time,\nI've got a few more to do, so, yeah.\n\n535\n00:28:37.040 --> 00:28:39.207\n&gt;&gt; [LAUGH]\n&gt;&gt; You guys know the way I talk, so.\n\n536\n00:28:39.207 --> 00:28:39.885\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH]\n\n537\n00:28:39.885 --> 00:28:40.463\n&gt;&gt; It's okay,\n\n538\n00:28:40.463 --> 00:28:43.200\nit means you're passionate about it,\nthat's all, right?\n\n539\n00:28:43.200 --> 00:28:45.201\nOkay, then make sure you come back for\n\n540\n00:28:45.201 --> 00:28:48.465\nthis part two here taking a look\nat our comparison operators.\n\n541\n00:28:48.465 --> 00:28:51.844\nBut for now, we'll sign out,\nI've been your host, Cherokee Boose.\n\n542\n00:28:51.844 --> 00:28:53.173\n&gt;&gt; And I'm Mike Rodrick.\n\n543\n00:28:53.173 --> 00:28:54.274\n&gt;&gt; See you next time here at ITPRO.TV.\n\n544\n00:28:55.925 --> 00:29:01.849\n[MUSIC]\n\n545\n00:29:01.849 --> 00:29:04.240\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "242600265"
        },
        {
          "description": "In this episode, we cover comparison operators. You will learn what comparison operators are in PowerShell and how they are used to compare values, as well as find values that match a specified pattern.",
          "length": "882",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-3-2-comparison_operators_pt2-110917-PGM.00_14_29_03.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-3-2-comparison_operators_pt2-110917-PGM.00_14_29_03.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-2-3-2-comparison_operators_pt2-110917-PGM.00_14_29_03.Still001-sm.jpg",
          "title": "Comparison Operators Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.008 --> 00:00:02.790\nWelcome to ITPRO.TV,\nI'm your host, Don Pezet.\n\n2\n00:00:02.790 --> 00:00:06.228\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:06.228 --> 00:00:08.356\n[MUSIC]\n\n4\n00:00:08.356 --> 00:00:12.063\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.063 --> 00:00:15.179\n&gt;&gt; Welcome back to your PowerShell\nScripting series, I'm your show host,\n\n6\n00:00:15.179 --> 00:00:16.290\nCherokee Boose.\n\n7\n00:00:16.290 --> 00:00:19.710\nAnd I say welcome back, because if you're\nnot aware, this is actually a part two.\n\n8\n00:00:19.710 --> 00:00:23.234\nIf you want to catch the previous episode\nwith our other comparison operators,\n\n9\n00:00:23.234 --> 00:00:26.170\nyou need to make sure you look\nat the course library there.\n\n10\n00:00:26.170 --> 00:00:29.958\nBut we're gonna pick right back up\nwhere we left off with the wonderful,\n\n11\n00:00:29.958 --> 00:00:31.647\nthe fantastic, Mike Rodrick.\n\n12\n00:00:31.647 --> 00:00:34.280\n&gt;&gt; I don't know about all that,\nbut thank you very much, Cherokee.\n\n13\n00:00:34.280 --> 00:00:35.570\n&gt;&gt; [LAUGH]\n&gt;&gt; Glad to be back.\n\n14\n00:00:35.570 --> 00:00:39.134\nAnd yeah, I had to come back, cuz we left\noff, and we were like, we did match,\n\n15\n00:00:39.134 --> 00:00:40.377\nwe know there is a no match.\n\n16\n00:00:40.377 --> 00:00:40.932\nWhere the heck is it, right?\n\n17\n00:00:40.932 --> 00:00:43.556\n&gt;&gt; I know, I kind of cut you off right\nthere, but yeah, we were out of time.\n\n18\n00:00:43.556 --> 00:00:44.695\n&gt;&gt; That clock, always just tick,\ntick, tick, ticks.\n\n19\n00:00:44.695 --> 00:00:48.028\n&gt;&gt; [LAUGH]\n&gt;&gt; So, all right, back to it,\n\n20\n00:00:48.028 --> 00:00:50.433\nwe talked about match,\nlet's take a look at no match.\n\n21\n00:00:50.433 --> 00:00:53.910\nPretty straightforward concept right now,\nit's just gonna say, is this not, right?\n\n22\n00:00:53.910 --> 00:00:55.782\nIs there not a match?\n\n23\n00:00:55.782 --> 00:00:58.440\nHence the word notmatch [LAUGH].\n\n24\n00:00:58.440 --> 00:01:02.155\nAll right, so here's Sunday,\nMonday, Tuesday, same one,\n\n25\n00:01:02.155 --> 00:01:05.109\nnow we're saying notmatch sun,\nand we run that.\n\n26\n00:01:05.109 --> 00:01:09.230\nAnd I give Monday and Tuesday,\nagain, multiple values going in.\n\n27\n00:01:09.230 --> 00:01:15.254\nIt's going to show me all of the values\nthat evaluated to true in this case.\n\n28\n00:01:15.254 --> 00:01:20.220\nSo, Monday, notmatch sun,\ntrue, do be careful with that.\n\n29\n00:01:20.220 --> 00:01:26.069\nSometimes logically we can think, wait\na second, why would you return Monday?\n\n30\n00:01:26.069 --> 00:01:30.108\nMonday doesn't match sun, so\nwhy is it showing up as true?\n\n31\n00:01:30.108 --> 00:01:35.910\nWe're saying notmatch, so that's\na double negative there, is that right?\n\n32\n00:01:35.910 --> 00:01:36.658\nI think, in a way.\n\n33\n00:01:36.658 --> 00:01:38.651\n&gt;&gt; [LAUGH] If you have two negatives,\nthen it's a double negative.\n\n34\n00:01:38.651 --> 00:01:41.207\n&gt;&gt; All right, yes, right?\n\n35\n00:01:41.207 --> 00:01:44.210\nSo it's not a double negative,\nbut it is in my mind.\n\n36\n00:01:44.210 --> 00:01:44.886\nAll right,\n\n37\n00:01:44.886 --> 00:01:49.020\nthen we get adding a single value is\ngonna behave just like the match did.\n\n38\n00:01:49.020 --> 00:01:52.622\nNow we're gonna get a Boolean result,\neither true or false.\n\n39\n00:01:52.622 --> 00:01:56.773\nSunday notmatch sun, well, that's false,\nbecause it does match sun, right?\n\n40\n00:01:56.773 --> 00:02:04.108\nSun is in Sunday, but it will\npopulate my matches table, all right?\n\n41\n00:02:04.108 --> 00:02:08.008\nActually that's left\nfrom the previous one,\n\n42\n00:02:08.008 --> 00:02:12.208\nbecause that,\nit should be only if they are true.\n\n43\n00:02:12.208 --> 00:02:18.044\nHow can I show you another example,\nlet's do this, let's say Monday.\n\n44\n00:02:20.232 --> 00:02:25.091\nNotmatch sun,\nthat's gonna evaluate to true,\n\n45\n00:02:25.091 --> 00:02:28.061\nand now if we look at matches.\n\n46\n00:02:28.061 --> 00:02:31.634\nWe should have, yeah, see,\nit's not populating that one,\n\n47\n00:02:31.634 --> 00:02:35.290\ninteresting, I'll have to do\na little more research on that.\n\n48\n00:02:35.290 --> 00:02:40.267\nBut I think we get the idea, wait, yeah,\nnotmatch sun, that should show up.\n\n49\n00:02:40.267 --> 00:02:43.316\nThat should evaluate to true,\nwhich it does,\n\n50\n00:02:43.316 --> 00:02:48.720\nwhich should then automatically populate\nmy matches variable, which it is not.\n\n51\n00:02:52.060 --> 00:02:54.904\nInteresting, or actually I guess sun is\nthe reason that it's not matching, so\n\n52\n00:02:54.904 --> 00:02:56.480\nmaybe that's what it's trying to tell me.\n\n53\n00:02:56.480 --> 00:02:58.616\n&gt;&gt; The value that's in\nquestion under that column?\n\n54\n00:02:58.616 --> 00:03:03.504\n&gt;&gt; Like I said, I'm still\nstruggling with a good purpose for\n\n55\n00:03:03.504 --> 00:03:09.110\nthis variable, I've never used\nit after a comparison like this.\n\n56\n00:03:09.110 --> 00:03:13.694\nI wanted to go back and see that, so\njust to understand it is there, and\n\n57\n00:03:13.694 --> 00:03:16.360\nif you can find a use for it, let me know.\n\n58\n00:03:16.360 --> 00:03:18.790\nAll right, so contains is our next one.\n\n59\n00:03:18.790 --> 00:03:20.521\nAnd remember, we've got contains and in.\n\n60\n00:03:20.521 --> 00:03:23.474\nAnd the big difference\nbetween contains and\n\n61\n00:03:23.474 --> 00:03:28.340\nin is my collection is on the left\nside of my operator with contains.\n\n62\n00:03:28.340 --> 00:03:33.639\nSo first, my collection,\nand then I want to know,\n\n63\n00:03:33.639 --> 00:03:38.958\nis this value in there, or\ndoes this contain this?\n\n64\n00:03:38.958 --> 00:03:41.270\nIs really the way I should read that.\n\n65\n00:03:41.270 --> 00:03:46.135\nSo if we execute that,\nwe should get a true, because svr01, or\n\n66\n00:03:46.135 --> 00:03:49.415\nsvr01, is definitely in my collection.\n\n67\n00:03:49.415 --> 00:03:52.220\nNot contains will be just the opposite.\n\n68\n00:03:52.220 --> 00:03:55.410\nSo here's my collection\nthat I want you to look at.\n\n69\n00:03:55.410 --> 00:03:59.094\nHere's the test value that I want to\nsee if it's in that collection or\n\n70\n00:03:59.094 --> 00:04:01.350\ncontained, is contained by that.\n\n71\n00:04:01.350 --> 00:04:04.833\nI'm trying to avoid using the word,\nin, it goes out of an operator, in.\n\n72\n00:04:04.833 --> 00:04:11.130\nSo, does my collection contain, or\nnot contain in this case, svr01?\n\n73\n00:04:12.230 --> 00:04:16.548\nWell, they should evaluate to false,\nbecause it does contain svr01, so\n\n74\n00:04:16.548 --> 00:04:17.766\nthat would be false.\n\n75\n00:04:17.766 --> 00:04:21.749\nIf this was 4, right, I should get a true,\n\n76\n00:04:21.749 --> 00:04:28.670\nbecause this collection does not\ncontain svr04, and the same with this.\n\n77\n00:04:28.670 --> 00:04:32.905\nIf I say,\ndoes this collection contain a svr04,\n\n78\n00:04:32.905 --> 00:04:39.415\nI should get a false this time, because\nit does not contain a svr04, right?\n\n79\n00:04:39.415 --> 00:04:42.790\nIn is almost like the inverse of that,\n\n80\n00:04:42.790 --> 00:04:49.200\nnow we've got the value I want to\ncheck for on the left of my operator.\n\n81\n00:04:49.200 --> 00:04:53.829\nAnd my collection over here on my right,\nso\n\n82\n00:04:53.829 --> 00:04:57.311\nis svr01 in this collection?\n\n83\n00:04:57.311 --> 00:05:01.640\nThe answer would yes, yes, it is, okay?\n\n84\n00:05:01.640 --> 00:05:05.086\nIs svr01 not in this collection?\n\n85\n00:05:05.086 --> 00:05:09.395\nIt should be false,\nbecause it's definitely in there,\n\n86\n00:05:09.395 --> 00:05:14.450\nbut if we change this to a 4,\nis svr04 in my collection?\n\n87\n00:05:14.450 --> 00:05:17.054\nFalse, no, it's not.\n\n88\n00:05:17.054 --> 00:05:20.613\nIs svr04 not in my collection?\n\n89\n00:05:20.613 --> 00:05:22.140\nTrue, it is not in there, all right.\n\n90\n00:05:24.130 --> 00:05:30.234\nAnd, like I said, the PowerShell Version\n3 is where they added the in operator.\n\n91\n00:05:30.234 --> 00:05:35.512\nAnd an example I've got here is just\nkind of showing me the same idea,\n\n92\n00:05:35.512 --> 00:05:38.640\nbut written with in and contained.\n\n93\n00:05:38.640 --> 00:05:45.164\nAnd we can see the difference,\nlet me put a little space in there for us.\n\n94\n00:05:45.164 --> 00:05:52.650\nSo here are these two commands, this one\nis using in, this one is using contains.\n\n95\n00:05:53.720 --> 00:05:58.529\nI've got an array right here with\njust three names in there, so\n\n96\n00:05:58.529 --> 00:06:01.354\nlet me go ahead and build that array.\n\n97\n00:06:01.354 --> 00:06:03.830\nAll right, and\nthen I'm going to do a get process.\n\n98\n00:06:03.830 --> 00:06:08.112\nI'm going to go and\nget all of the processes that\n\n99\n00:06:08.112 --> 00:06:13.372\nare running on this machine,\nwhere name in name, right?\n\n100\n00:06:13.372 --> 00:06:16.991\nSo for each process,\nI'm piping that into a where clause, and\n\n101\n00:06:16.991 --> 00:06:20.450\nI know this is a little beyond\nwhat we've done so far.\n\n102\n00:06:20.450 --> 00:06:23.706\nBut I think it's a good example,\nand we'll come back and look at,\n\n103\n00:06:23.706 --> 00:06:25.579\nwe've talked about piping already.\n\n104\n00:06:25.579 --> 00:06:28.925\nWe'll come back and\ntake a much closer look at that for sure.\n\n105\n00:06:28.925 --> 00:06:30.232\nBut get a list of processes, so\n\n106\n00:06:30.232 --> 00:06:33.112\nnow I've got this big list of all\nof the processes that are running.\n\n107\n00:06:33.112 --> 00:06:37.738\nNow type that in and\nsay, where name in name.\n\n108\n00:06:37.738 --> 00:06:44.290\nOut of that list, only return\nthe ones whose name is in this array.\n\n109\n00:06:44.290 --> 00:06:47.940\nAnd that would include powershell,\npowershell_ise, and notepad.\n\n110\n00:06:49.560 --> 00:06:51.021\nSame thing is going on down here,\n\n111\n00:06:51.021 --> 00:06:53.799\ngo get a list of the processes\nthat are running on this machine.\n\n112\n00:06:53.799 --> 00:06:56.798\nType that list into my where clause,\n\n113\n00:06:56.798 --> 00:07:00.870\nbut now I'm gonna do dollar\nsign names contains.\n\n114\n00:07:00.870 --> 00:07:06.264\nAgain, the collection is now on\nthe left side of my operator,\n\n115\n00:07:06.264 --> 00:07:11.474\nand then the value I'm testing for\nis on the right, right?\n\n116\n00:07:11.474 --> 00:07:17.230\nSo we have to, so the syntax becomes a\nlittle more complex when I do it this way.\n\n117\n00:07:17.230 --> 00:07:22.127\nAs you can see, I have to take advantage\nof the built in variable that represents\n\n118\n00:07:22.127 --> 00:07:25.138\neach object as I go through\nthat list of objects.\n\n119\n00:07:25.138 --> 00:07:29.080\nBut in the end, they'll both\ngive me the same results, right?\n\n120\n00:07:29.080 --> 00:07:31.899\nHere, if I use the one that\ncontains the in clause, or\n\n121\n00:07:31.899 --> 00:07:33.849\nthe one that's using the in clause.\n\n122\n00:07:33.849 --> 00:07:38.870\nI can see powershell_ise is running on\nthe system, what we're using right now.\n\n123\n00:07:38.870 --> 00:07:42.982\nIf I run this command,\nI get the exact same result.\n\n124\n00:07:42.982 --> 00:07:45.393\nBecause it's accomplishing\nthe exact same thing,\n\n125\n00:07:45.393 --> 00:07:48.050\nit's just doing it in\na slightly different way.\n\n126\n00:07:48.050 --> 00:07:54.223\nAnd, to me, this is much easier to read,\nget process where name in name.\n\n127\n00:07:54.223 --> 00:08:00.057\nThis one where dollar sign name contains\ndollar sign underscore dot name,\n\n128\n00:08:00.057 --> 00:08:04.884\na little more complex to read,\na little more complex to type.\n\n129\n00:08:04.884 --> 00:08:07.620\nBut like I said, the results are the same.\n\n130\n00:08:07.620 --> 00:08:11.539\nSo whatever you're familiar with, or\nused to working with is going to be fine.\n\n131\n00:08:11.539 --> 00:08:15.866\nIt's not going to give you a big\ndifference in which one you use,\n\n132\n00:08:15.866 --> 00:08:18.286\nyou'll get the exact same result.\n\n133\n00:08:18.286 --> 00:08:19.079\n&gt;&gt; Eeny, meeny, miney.\n\n134\n00:08:19.079 --> 00:08:19.855\n&gt;&gt; Yep, pretty much.\n\n135\n00:08:19.855 --> 00:08:22.250\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, now,\n\n136\n00:08:22.250 --> 00:08:27.023\nreplace is the next thing on our\nlist of comparison operators.\n\n137\n00:08:27.023 --> 00:08:31.987\nSo I've got a string here that is book,\nand then my operator,\n\n138\n00:08:31.987 --> 00:08:37.540\ndash replace, and\nthen what I want to look for in the value.\n\n139\n00:08:37.540 --> 00:08:42.636\nAnd comma what I want to\nreplace it with if you find it.\n\n140\n00:08:42.636 --> 00:08:45.491\nSo let's see what happens, we'll run that.\n\n141\n00:08:45.491 --> 00:08:47.059\n&gt;&gt; When you were setting up for the show,\n\n142\n00:08:47.059 --> 00:08:50.394\ndid you have to think about words you\ndidn't want to use for this demonstration?\n\n143\n00:08:50.394 --> 00:08:50.938\n&gt;&gt; Yes.\n&gt;&gt; Yeah.\n\n144\n00:08:50.938 --> 00:08:52.222\n[LAUGH]\n&gt;&gt; I have to be careful\n\n145\n00:08:52.222 --> 00:08:53.601\nwhen I'm doing things like this.\n\n146\n00:08:53.601 --> 00:08:57.430\nI don't want anything crazy showing up,\nso there, it worked, right?\n\n147\n00:08:57.430 --> 00:09:02.457\nIf I look down here,\nbook has become Cook, how about that?\n\n148\n00:09:02.457 --> 00:09:03.740\nIt replaced b with C.\n\n149\n00:09:03.740 --> 00:09:07.061\nAnd, of course,\nthis is a very simple example, like I say,\n\n150\n00:09:07.061 --> 00:09:09.221\nwe can use this to rifle through files.\n\n151\n00:09:09.221 --> 00:09:14.210\nIt's a very powerful, powerful expression,\nit's a good one to have in the belt.\n\n152\n00:09:14.210 --> 00:09:19.458\nAlso, like my other ones, notice\nthis is case insensitive by default,\n\n153\n00:09:19.458 --> 00:09:23.600\nI said to look for B, and\nmy B was capital, or uppercase.\n\n154\n00:09:23.600 --> 00:09:24.290\n&gt;&gt; Yeah, lowercase b.\n\n155\n00:09:24.290 --> 00:09:29.398\n&gt;&gt; This b is not uppercase,\nit's lowercase, yet\n\n156\n00:09:29.398 --> 00:09:34.389\nit still replaced it,\nwhat if I do a c out here?\n\n157\n00:09:34.389 --> 00:09:38.750\nWhich is gonna say, include case in there.\n\n158\n00:09:38.750 --> 00:09:43.161\nIf I run that, book does not change,\nbook becomes or\n\n159\n00:09:43.161 --> 00:09:48.191\nstays book, because it did not\nfind a capital B to replace.\n\n160\n00:09:48.191 --> 00:09:52.704\nIt saw a lowercase b, it says,\nno, no, that's not the same,\n\n161\n00:09:52.704 --> 00:09:54.856\nI'm only replacing capital B.\n\n162\n00:09:54.856 --> 00:09:59.527\nIf I go and change this to a capital B,\nand if I execute that command now, and\n\n163\n00:09:59.527 --> 00:10:03.030\nit goes back to doing what it\ndid the first time, right?\n\n164\n00:10:03.030 --> 00:10:05.952\nBecause it says, there is a capital\nB in there, I'll go ahead and\n\n165\n00:10:05.952 --> 00:10:06.952\nswap it out with this C.\n\n166\n00:10:06.952 --> 00:10:13.165\nSo that's C for case sensitive, I could\nthrow a dash i in front of replace there.\n\n167\n00:10:13.165 --> 00:10:17.799\nSo dash i replace, which means it forces\nit to be case insensitive, like I said,\n\n168\n00:10:17.799 --> 00:10:20.790\nPowerShell is case insensitive by default.\n\n169\n00:10:20.790 --> 00:10:27.370\nSo that's being a little redundant, but\nit can also be considered being strict and\n\n170\n00:10:27.370 --> 00:10:31.508\nsaying, I don't care what\nPowerShell wants to do.\n\n171\n00:10:31.508 --> 00:10:34.700\nI'm telling you to be case insensitive,\nright?\n\n172\n00:10:34.700 --> 00:10:38.164\nSo that's just a way to ensure that\nthat process is case insensitive,\n\n173\n00:10:38.164 --> 00:10:40.055\nand you might have a reason to do that.\n\n174\n00:10:40.055 --> 00:10:43.333\n&gt;&gt; Like if you lost a file and\nyou really want to find it, or, I guess,\n\n175\n00:10:43.333 --> 00:10:45.223\nyou would be replacing it, but yeah.\n\n176\n00:10:45.223 --> 00:10:45.893\n&gt;&gt; Yeah.\n\n177\n00:10:45.893 --> 00:10:47.110\n&gt;&gt; Okay, bad example, [LAUGH].\n\n178\n00:10:47.110 --> 00:10:49.793\n&gt;&gt; Okay, [LAUGH], all right.\n\n179\n00:10:49.793 --> 00:10:53.800\nThen I've got my is and is not and\nthese are for type comparisons.\n\n180\n00:10:53.800 --> 00:10:56.945\nNow we are not comparing\nthe values themselves,\n\n181\n00:10:56.945 --> 00:11:01.406\nwhat we're doing is we're comparing\nthe data type of those values.\n\n182\n00:11:01.406 --> 00:11:04.220\nSo dollar sign a = 5.\n\n183\n00:11:04.220 --> 00:11:07.591\nWell, we know from our past\nexperience that's an integer, so\n\n184\n00:11:07.591 --> 00:11:10.465\ndollar sign a should be now an integer,\nfor example.\n\n185\n00:11:10.465 --> 00:11:14.919\nAnd that's what we're looking at,\nnot the value, not 5, but\n\n186\n00:11:14.919 --> 00:11:19.470\nthe fact that dollar sign a has been\ncast as a int system data type.\n\n187\n00:11:20.630 --> 00:11:26.354\nFor example, dollar sign a = 1,\nI'll go ahead and execute that.\n\n188\n00:11:26.354 --> 00:11:30.330\nAnd then I'm going to run,\ndollar sign a is int.\n\n189\n00:11:31.910 --> 00:11:35.019\nAnd I get my Boolean response,\ntrue, right,\n\n190\n00:11:35.019 --> 00:11:38.305\nbecause I did store an integer in there,\nright?\n\n191\n00:11:38.305 --> 00:11:43.624\nLet's do dollar sign b = 1, but\nnotice how I've got it in strings,\n\n192\n00:11:43.624 --> 00:11:46.484\nand I did use my double quotes there.\n\n193\n00:11:46.484 --> 00:11:50.053\nAlthough I used single quotes here, like\nI said, I flipped them back and forth and\n\n194\n00:11:50.053 --> 00:11:52.830\nI'm ready to go back to\nmy full on double quotes.\n\n195\n00:11:52.830 --> 00:11:56.000\nBut now b equals the string one,\n\n196\n00:11:56.000 --> 00:12:00.815\nnot the integer one, so\nb, dollar sign b is int,\n\n197\n00:12:00.815 --> 00:12:05.651\nand I get false,\ncuz it's not, it's a string.\n\n198\n00:12:05.651 --> 00:12:11.995\nSo, is, is looking for,\nyou read it like you would in English,\n\n199\n00:12:11.995 --> 00:12:17.410\nor as you would speak,\nis b an integer, true or false?\n\n200\n00:12:17.410 --> 00:12:20.663\nYou can also compare variables, like here,\n\n201\n00:12:20.663 --> 00:12:24.356\nI've got dollar sign a is\ndollar sign b.GetType.\n\n202\n00:12:24.356 --> 00:12:28.369\nSo what's gonna happen is\nit's first gonna return,\n\n203\n00:12:28.369 --> 00:12:32.661\nlet me see what type b is, well,\nwe know b now is a string.\n\n204\n00:12:32.661 --> 00:12:39.883\nAnd so it's gonna say, is dollar sign\na the same type as dollar sign b?\n\n205\n00:12:39.883 --> 00:12:40.787\nWe'll see what happens.\n\n206\n00:12:43.384 --> 00:12:46.179\nI just executed this one part\nthat I had highlighted, sorry.\n\n207\n00:12:46.179 --> 00:12:50.830\nSo b GetType, there,\nwe're just proving that b is a string,\n\n208\n00:12:50.830 --> 00:12:55.313\nwe already know that a is an int,\ncuz this resulted as true.\n\n209\n00:12:55.313 --> 00:12:59.933\nIf I want to run the comparison here,\nI get false,\n\n210\n00:12:59.933 --> 00:13:05.543\nbecause a is not the same type as b,\nis not is just the option.\n\n211\n00:13:05.543 --> 00:13:09.509\nThe a is 1, we'll go ahead and\nset that, a is not int,\n\n212\n00:13:09.509 --> 00:13:12.125\nwould be false, because it is int.\n\n213\n00:13:12.125 --> 00:13:16.129\nWe'll set b equal to the string 1,\nb is not int,\n\n214\n00:13:16.129 --> 00:13:20.450\nthat's true, b is not an integer,\nit's a string.\n\n215\n00:13:20.450 --> 00:13:26.460\nIf I try to compare the two, I should\nget true, because they are not the same.\n\n216\n00:13:26.460 --> 00:13:30.111\nI'm saying, is a not the same type as b?\n\n217\n00:13:30.111 --> 00:13:34.020\nIndeed they are not,\none is an integer and one is a string.\n\n218\n00:13:34.020 --> 00:13:36.413\nSo just comparisons that we can use for\ndata types, and\n\n219\n00:13:36.413 --> 00:13:39.646\nthis could prove extremely important\ntoo when we're pulling back data.\n\n220\n00:13:39.646 --> 00:13:43.110\nEspecially as we've seen with\nPowerShell being dynamically typed.\n\n221\n00:13:43.110 --> 00:13:47.924\nAnd sometimes doing some things that maybe\nwe didn't quite expect that can cause\n\n222\n00:13:47.924 --> 00:13:49.141\nproblems later on.\n\n223\n00:13:49.141 --> 00:13:53.533\nIf I'm trying to do division and\none of my variables is storing a string,\n\n224\n00:13:53.533 --> 00:13:55.190\nmy division is gonna fail.\n\n225\n00:13:55.190 --> 00:13:56.998\nI'm gonna get an error,\nthings are gonna break.\n\n226\n00:13:56.998 --> 00:14:01.424\nSo maybe I want to check type before I go\nthrough a process like that to keep things\n\n227\n00:14:01.424 --> 00:14:02.360\nfrom breaking.\n\n228\n00:14:02.360 --> 00:14:05.811\nOr giving me a chance to\nstop it before it breaks.\n\n229\n00:14:05.811 --> 00:14:09.172\nAnd throw up a message, hey, please enter\nan integer for this calculation, or\n\n230\n00:14:09.172 --> 00:14:10.370\nwhatever the case may be.\n\n231\n00:14:10.370 --> 00:14:14.253\nSo just some really good expressions,\nand that, I think,\n\n232\n00:14:14.253 --> 00:14:17.291\nrounds out our look at\ncomparison operators.\n\n233\n00:14:17.291 --> 00:14:20.327\n&gt;&gt; Awesome, Mike, thank you for taking the\ntime to show that to us, and thank you for\n\n234\n00:14:20.327 --> 00:14:21.170\nbeing with us as well.\n\n235\n00:14:21.170 --> 00:14:24.643\nBut we are going to go ahead and sign\noff for this show, I've been your host,\n\n236\n00:14:24.643 --> 00:14:25.474\nCherokee Boose.\n\n237\n00:14:25.474 --> 00:14:26.256\n&gt;&gt; And I'm Mike Rodrick.\n\n238\n00:14:26.256 --> 00:14:27.843\n&gt;&gt; See you next time here at ITPRO.TV.\n\n239\n00:14:29.309 --> 00:14:35.318\n[MUSIC]\n\n240\n00:14:35.318 --> 00:14:38.419\nThank you for watching ITPRO.TV.\n\n",
          "vimeoId": "242601990"
        },
        {
          "description": "In this episode, we discuss If statements. You will learn how to use If statements to run code blocks based on the results of one or more conditional tests. You will also learn how to specify additional conditional tests and a code block to run if none of the conditions evaluate to true.",
          "length": "1708",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-1-1-if_statements-111017-PGM.00_28_14_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-1-1-if_statements-111017-PGM.00_28_14_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-1-1-if_statements-111017-PGM.00_28_14_25.Still001-sm.jpg",
          "title": "If Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.172 --> 00:00:01.729\nWelcome to ITPRO.TV.\n\n2\n00:00:01.729 --> 00:00:02.881\nI'm your host Don Pezet.\n\n3\n00:00:02.881 --> 00:00:06.028\n[CROSSTALK]\n\n4\n00:00:06.028 --> 00:00:08.364\n[MUSIC]\n\n5\n00:00:08.364 --> 00:00:11.841\n&gt;&gt; You're watching ITPRO.TV.\n\n6\n00:00:11.841 --> 00:00:13.206\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] Welcome to\n\n7\n00:00:13.206 --> 00:00:15.210\nyour PowerShell Scripting series.\n\n8\n00:00:15.210 --> 00:00:17.340\nI'm your show host, Cherokee Boose.\n\n9\n00:00:17.340 --> 00:00:21.370\nIn this episode we'll be taking\na look at If statements and\n\n10\n00:00:21.370 --> 00:00:25.910\nto help explain what an IF statement is,\nwe have Mr. Mike Rodrick in studios.\n\n11\n00:00:25.910 --> 00:00:27.589\nThank you for\njoining us Mike, how are you?\n\n12\n00:00:27.589 --> 00:00:29.955\n&gt;&gt; I'm good, I'm good,\nthanks for having me back.\n\n13\n00:00:29.955 --> 00:00:31.782\nAnd yeah,\nI think I'm gonna try to explain them,\n\n14\n00:00:31.782 --> 00:00:32.352\nif-\n&gt;&gt; [LAUGH]\n\n15\n00:00:32.352 --> 00:00:33.141\n&gt;&gt; You're lucky.\n\n16\n00:00:33.141 --> 00:00:34.870\nNo, [LAUGH] I don't know.\n\n17\n00:00:34.870 --> 00:00:35.554\nI had to throw some kind\nof cruddy joke in there.\n\n18\n00:00:35.554 --> 00:00:38.231\n&gt;&gt; We've got all sorts of, yeah,\npotential silliness here with this one.\n\n19\n00:00:38.231 --> 00:00:39.223\n&gt;&gt; Absolutely.\n\n20\n00:00:39.223 --> 00:00:41.265\n&gt;&gt; [LAUGH]\n&gt;&gt; Yeah, and\n\n21\n00:00:41.265 --> 00:00:43.380\nwe're recording this on a Friday,\nso that helps too.\n\n22\n00:00:43.380 --> 00:00:45.890\nAll right, so yeah, we're going to\nbe taking a look at IF statements.\n\n23\n00:00:45.890 --> 00:00:48.440\nAnd this is probably one\nof the more powerful\n\n24\n00:00:48.440 --> 00:00:51.060\nconstructs that we have in PowerShell.\n\n25\n00:00:51.060 --> 00:00:53.060\nYou're gonna end up using this a lot.\n\n26\n00:00:53.060 --> 00:00:56.530\nAgain, as we start getting into\nwriting actual scripts and\n\n27\n00:00:56.530 --> 00:00:58.640\ndoing productive things with this.\n\n28\n00:00:58.640 --> 00:01:01.040\nThis is going to be a big part of that,\n\n29\n00:01:01.040 --> 00:01:05.640\njust like we said about arrays,\nIF statements are used quite a bit.\n\n30\n00:01:05.640 --> 00:01:09.490\nAnd an IF statement is really,\nthe idea is,\n\n31\n00:01:09.490 --> 00:01:12.862\nI need to do something\nbased on a condition.\n\n32\n00:01:12.862 --> 00:01:15.327\nI wanna check a condition,\na value of something,\n\n33\n00:01:15.327 --> 00:01:17.277\nthat we're gonna call it a condition.\n\n34\n00:01:17.277 --> 00:01:22.337\nAnd if that condition rings true,\nthen I wanna perform this action, right.\n\n35\n00:01:22.337 --> 00:01:24.910\nThat's really what an IF\nstatement breaks down to.\n\n36\n00:01:24.910 --> 00:01:29.855\nAnd that's a very powerful concept\nwhen it comes to writing scripts.\n\n37\n00:01:29.855 --> 00:01:34.000\nBecause instead of just writing a script\nthat everything is gonna execute,\n\n38\n00:01:34.000 --> 00:01:36.260\nnow all of a sudden I can\nhave conditions in there.\n\n39\n00:01:36.260 --> 00:01:41.210\nI can say, if this service isn't running,\nlet's start it or let's print a log,\n\n40\n00:01:41.210 --> 00:01:43.720\nor let's do something about it, right.\n\n41\n00:01:43.720 --> 00:01:45.880\nThat's the kind of power that\nwe get with IF statements.\n\n42\n00:01:45.880 --> 00:01:48.970\nWe can check a statement,\ncheck a value, check a condition and\n\n43\n00:01:48.970 --> 00:01:50.500\nthen perform an action.\n\n44\n00:01:50.500 --> 00:01:54.060\nSo let's take a look at my screen here and\nlet's get started with an IF statement.\n\n45\n00:01:54.060 --> 00:01:57.190\nI've got the syntax laid out for\nus at the very beginning.\n\n46\n00:01:57.190 --> 00:01:59.860\nIt's gonna start with the keyword, IF.\n\n47\n00:01:59.860 --> 00:02:04.568\nAnd then you're gonna have your condition,\nright, this is what you wanna test for.\n\n48\n00:02:04.568 --> 00:02:07.350\nAnd that's gonna go inside parenthesis.\n\n49\n00:02:08.520 --> 00:02:12.250\nAnd then after the condition we're gonna\nhave an open curly brace or an open brace,\n\n50\n00:02:12.250 --> 00:02:17.448\nthen we're gonna have our statements\nthat we wanna execute if true.\n\n51\n00:02:17.448 --> 00:02:20.334\nAnd notice I said statements or\nstatements and\n\n52\n00:02:20.334 --> 00:02:22.927\nthen s and, I try to be fancy with that.\n\n53\n00:02:22.927 --> 00:02:25.610\n&gt;&gt; [LAUGH]\n&gt;&gt; Possibly an s, possibly not an s.\n\n54\n00:02:25.610 --> 00:02:29.180\nThe point is you could have\na single statement in there,\n\n55\n00:02:29.180 --> 00:02:31.710\nyou need at least one\nstatement to have an IF.\n\n56\n00:02:31.710 --> 00:02:36.760\nI need my IF, I need my condition inside\nparentheses, I have to have an open and\n\n57\n00:02:36.760 --> 00:02:40.570\nclosing brace, and I've gotta have\nat least one statement in there or\n\n58\n00:02:40.570 --> 00:02:42.070\nmy IF is going to fail.\n\n59\n00:02:42.070 --> 00:02:45.210\nBut I can, I wanted to point out,\nI can have multiple statements in there,\n\n60\n00:02:45.210 --> 00:02:47.610\nI'm not limited to just doing one thing.\n\n61\n00:02:47.610 --> 00:02:50.880\nI can have a series of commands\nthat I want to go through,\n\n62\n00:02:50.880 --> 00:02:52.270\nif my condition rings true.\n\n63\n00:02:53.270 --> 00:02:56.943\nIn fact, we can even start nesting IF.\n\n64\n00:02:56.943 --> 00:03:01.529\nIf this condition is true,\nthen it's gonna execute this.\n\n65\n00:03:01.529 --> 00:03:06.100\nBut these statements could be another IF\nstatement that checks another condition.\n\n66\n00:03:06.100 --> 00:03:12.150\nI mean, we can have a lot of fun and get\nreally crazy complex with our ifs, right?\n\n67\n00:03:12.150 --> 00:03:16.010\nBut there's also other ways we\ncan write things like that,\n\n68\n00:03:16.010 --> 00:03:18.690\nthat I'm gonna show you\nin a future episode.\n\n69\n00:03:18.690 --> 00:03:20.160\nRight, so that's my basic syntax.\n\n70\n00:03:20.160 --> 00:03:26.210\nIF condition, open brace, statements,\nclose brace, there we go that's our IF.\n\n71\n00:03:27.440 --> 00:03:29.280\nSo what I'm gonna do,\nlet's try it out here.\n\n72\n00:03:29.280 --> 00:03:32.140\nI've got a variable $A and\nI'm gonna go ahead and\n\n73\n00:03:32.140 --> 00:03:36.010\nassign that the value of 5,\njust to kind of get us started here.\n\n74\n00:03:36.010 --> 00:03:41.624\nAnd in my very first IF statement\nthat we have, IF, open parenthesis,\n\n75\n00:03:41.624 --> 00:03:47.532\n$A-eq dash, remember what we learned\nabout in our operators episodes.\n\n76\n00:03:47.532 --> 00:03:50.113\nIf you didn't see those make sure\nyou go back and check them out.\n\n77\n00:03:50.113 --> 00:03:54.219\nEquals 5, close parentheses,\nopen brace, and\n\n78\n00:03:54.219 --> 00:04:00.399\nthen I've got a string in here I just\nwant to print this out, $A equals 5.\n\n79\n00:04:00.399 --> 00:04:07.820\nAnd also I've used my single quote marks,\nbecause I do not want $A resolving.\n\n80\n00:04:07.820 --> 00:04:10.180\nI don't want it to say 5 equals 5,\n\n81\n00:04:10.180 --> 00:04:16.230\nI want it to say the name of the variable\nitself equals 5, if this is true, right?\n\n82\n00:04:16.230 --> 00:04:20.106\nSo, lets see what happen,\nright now we know I just set $A to 5, so\n\n83\n00:04:20.106 --> 00:04:22.064\nif we execute this IF statement.\n\n84\n00:04:24.219 --> 00:04:29.045\nWe'll see that it echoes out the command\nfirst that you're running and\n\n85\n00:04:29.045 --> 00:04:32.080\nthat actually $A equals 5, beautiful.\n\n86\n00:04:32.080 --> 00:04:32.860\n&gt;&gt; Just what you wanted.\n\n87\n00:04:32.860 --> 00:04:34.952\n&gt;&gt; Exactly what we wanted, all right?\n\n88\n00:04:34.952 --> 00:04:39.379\nNow let's see what happens if\nit doesn't equal 5, all right?\n\n89\n00:04:39.379 --> 00:04:43.528\nSo I'm gonna change A to 6, we're gonna\nexecute that same statement again.\n\n90\n00:04:45.939 --> 00:04:47.730\nAnd notice I get nothing back.\n\n91\n00:04:47.730 --> 00:04:52.580\nIt does still echo out the command I'm\nexecuting, but I get no results back,\n\n92\n00:04:52.580 --> 00:04:58.360\nbecause this IF statement is saying,\nif this is true, then do this.\n\n93\n00:04:58.360 --> 00:05:00.560\nBut this is not true?\n\n94\n00:05:00.560 --> 00:05:02.490\nThen that's the end of the IF\nstatement in this case.\n\n95\n00:05:02.490 --> 00:05:05.154\nThe way we've got it laid out now,\nthere's nothing to do.\n\n96\n00:05:05.154 --> 00:05:07.027\nIt says, nope, that's not true.\n\n97\n00:05:07.027 --> 00:05:09.341\nAnd it moves on outside of the IF,\n\n98\n00:05:09.341 --> 00:05:14.730\nto whatever the next line in your script\nmight be, that IF statement is done.\n\n99\n00:05:14.730 --> 00:05:17.970\nIf it's false,\nit doesn't do anything in this case.\n\n100\n00:05:19.808 --> 00:05:24.310\nNow I wanna make sure we point out here,\nwhile I'm at this spot.\n\n101\n00:05:24.310 --> 00:05:26.520\nThis is a very common mistake.\n\n102\n00:05:26.520 --> 00:05:27.670\nI see it all the time.\n\n103\n00:05:27.670 --> 00:05:31.400\nHeck, I do this now and again,\nespecially if you switch back and\n\n104\n00:05:31.400 --> 00:05:35.845\nforth between different languages,\nyou might find yourself doing this.\n\n105\n00:05:35.845 --> 00:05:38.365\nCherokee, I'm gonna put\nyou on the spot here.\n\n106\n00:05:38.365 --> 00:05:38.965\n&gt;&gt; Okay.\n\n107\n00:05:38.965 --> 00:05:42.026\n&gt;&gt; Can you remember, and no problem if\nyou don't, we just did this, right?\n\n108\n00:05:42.026 --> 00:05:44.326\nBut,\n&gt;&gt; Goodness [CROSSTALK].\n\n109\n00:05:44.326 --> 00:05:45.820\nDo you know what the mistake is?\n\n110\n00:05:45.820 --> 00:05:49.821\n&gt;&gt; All right, so\nI'm looking at this, A equals 10.\n\n111\n00:05:49.821 --> 00:05:54.365\nSo that, you're now saying that $A is 10.\n\n112\n00:05:54.365 --> 00:05:57.470\nIf you wanted to say equals,\nyou would put -eq.\n\n113\n00:05:57.470 --> 00:05:58.810\n&gt;&gt; Perfect, right?\n\n114\n00:05:58.810 --> 00:06:03.205\nA single equal sign is\nan assignment operator.\n\n115\n00:06:03.205 --> 00:06:05.701\n&gt;&gt; Is that hashtag common mistake?\n\n116\n00:06:05.701 --> 00:06:09.381\n&gt;&gt; Yes, exactly that is a very\ncommon mistake [LAUGH].\n\n117\n00:06:09.381 --> 00:06:10.160\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n118\n00:06:10.160 --> 00:06:14.430\nshe's exactly right, what I'm doing here,\nis I'm not testing anything.\n\n119\n00:06:14.430 --> 00:06:19.520\nI'm actually assigning the value\n10 to the variable A, right?\n\n120\n00:06:19.520 --> 00:06:23.890\nWhich is not what I wanna do,\nA should still equal 6 in our case, so\n\n121\n00:06:23.890 --> 00:06:26.348\nthat's fine,\nwe'll see what happens when I run this.\n\n122\n00:06:26.348 --> 00:06:32.520\nIf $A equals 10 or that's what we think\nwe're doing, then do this, right?\n\n123\n00:06:32.520 --> 00:06:34.520\nWell I'll go ahead and execute it.\n\n124\n00:06:34.520 --> 00:06:38.310\nNotice it does perform the inner\nstatement, $A equals 10,\n\n125\n00:06:38.310 --> 00:06:39.678\nwell of course it did.\n\n126\n00:06:39.678 --> 00:06:42.270\nA equals 10 because I just said it,\nequal to 10.\n\n127\n00:06:42.270 --> 00:06:46.428\nSo the end result of this expression\nis actually a true, right,\n\n128\n00:06:46.428 --> 00:06:49.830\nit does come back true if\nyou are setting this value.\n\n129\n00:06:49.830 --> 00:06:52.881\nBut there's no test involved, so\n\n130\n00:06:52.881 --> 00:06:58.154\njust the fact that this\nassignment succeeded, I get true.\n\n131\n00:06:58.154 --> 00:07:00.913\nNot the fact that it actually equals 10,\nin fact here,\n\n132\n00:07:00.913 --> 00:07:03.512\nlet's do something like this,\nwhat if I put in 15?\n\n133\n00:07:03.512 --> 00:07:04.696\nOops that is not.\n\n134\n00:07:04.696 --> 00:07:07.220\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's check your Num Lock there.\n\n135\n00:07:07.220 --> 00:07:12.700\nI'll say, IF A equals 15 we'll execute it,\nnotice I still get my result.\n\n136\n00:07:12.700 --> 00:07:15.280\nIt still does execute that inner block.\n\n137\n00:07:15.280 --> 00:07:17.690\nAgain, because this is\nnot checking anything.\n\n138\n00:07:17.690 --> 00:07:18.950\nIt's just doing an assignment.\n\n139\n00:07:18.950 --> 00:07:23.680\nThe assignment succeeded, so\nI'm getting a true result, right?\n\n140\n00:07:23.680 --> 00:07:26.180\nAnd then it executes what's inside there.\n\n141\n00:07:26.180 --> 00:07:27.790\nSo very easy to do.\n\n142\n00:07:27.790 --> 00:07:30.105\nAnother one I see, is this one, right.\n\n143\n00:07:30.105 --> 00:07:34.804\nI do this very often,\nespecially lately because\n\n144\n00:07:34.804 --> 00:07:39.857\nI've been playing around\nin some C++ in Arduino.\n\n145\n00:07:39.857 --> 00:07:44.358\nAnd this is what they would use\nin there to do equality check.\n\n146\n00:07:44.358 --> 00:07:44.902\n&gt;&gt; Okay.\n\n147\n00:07:44.902 --> 00:07:48.380\n&gt;&gt; But this does not work in\nour code either, all right?\n\n148\n00:07:48.380 --> 00:07:51.943\nNotice how it's actually saying,\nthe errors, the second equal sign.\n\n149\n00:07:51.943 --> 00:07:55.500\nIf you look, I don't think you\nguys can tell onscreen, but\n\n150\n00:07:55.500 --> 00:07:57.364\nthe first equal sign is black.\n\n151\n00:07:57.364 --> 00:07:58.644\n&gt;&gt; And then blue.\n&gt;&gt; Yes, good, so\n\n152\n00:07:58.644 --> 00:08:01.453\nyou can see that,\nthat second equal is actually blue.\n\n153\n00:08:01.453 --> 00:08:05.414\nWhich is a really good indicator\nthat something is not right,\n\n154\n00:08:05.414 --> 00:08:09.157\nbecause we know our operator\nshould be black, all right.\n\n155\n00:08:09.157 --> 00:08:12.563\nSo those,\na very kind of a mistake, easy to,\n\n156\n00:08:12.563 --> 00:08:17.980\ndo but in something like this it\nmight not be easy to spot at first.\n\n157\n00:08:17.980 --> 00:08:22.330\nBecause it succeeded and I get the results\nthat I think I should be getting.\n\n158\n00:08:22.330 --> 00:08:25.980\n&gt;&gt; And you're just chugging along,\nmoving onto the next task, yeah.\n\n159\n00:08:25.980 --> 00:08:27.700\n[LAUGH]\n&gt;&gt; And you're thinking, okay,\n\n160\n00:08:27.700 --> 00:08:30.113\na must equal ten, it printed it out, so\nI'm going along assuming a is ten and\n\n161\n00:08:30.113 --> 00:08:30.970\nI'm doing other things.\n\n162\n00:08:30.970 --> 00:08:34.940\nAnd a is indeed not ten, so it can\ndefinitely cause some problems later on.\n\n163\n00:08:34.940 --> 00:08:37.630\nSo do be careful with that one,\nthat is a no no.\n\n164\n00:08:38.650 --> 00:08:42.240\nAll right, so pretty straight forward,\nright, not too bad.\n\n165\n00:08:42.240 --> 00:08:46.150\nAn if statement is just the key word if,\nopen parentheses, condition,\n\n166\n00:08:46.150 --> 00:08:51.520\nclose parentheses, open brace, statements,\nclose brace, and you're good to go.\n\n167\n00:08:51.520 --> 00:08:53.690\nLet's real quick talk about\nthe syntax again though,\n\n168\n00:08:53.690 --> 00:08:55.110\nI do wanna show you guys this.\n\n169\n00:08:55.110 --> 00:08:57.645\nI have my way of doing things.\n\n170\n00:08:57.645 --> 00:09:02.330\nEverybody kind of has their\nown way of styling their code.\n\n171\n00:09:02.330 --> 00:09:05.210\nThe end goal is to make sure\nthat it's readable, and\n\n172\n00:09:05.210 --> 00:09:08.080\nnot just by you, but\nthat's also very important.\n\n173\n00:09:08.080 --> 00:09:09.770\nI need to be able to look at\nthis six months from now.\n\n174\n00:09:09.770 --> 00:09:10.840\nWhen I haven't seen it for\n\n175\n00:09:10.840 --> 00:09:15.320\n180 days, I want to be able to understand\nwhat the heck I did and why I did it.\n\n176\n00:09:15.320 --> 00:09:17.568\nBut also because you're probably\ngonna be sharing this or\n\n177\n00:09:17.568 --> 00:09:20.010\nother people could be working\nwith your code as well.\n\n178\n00:09:20.010 --> 00:09:25.170\nSo you want to make sure it's readable,\npresentable, that it's understandable.\n\n179\n00:09:25.170 --> 00:09:26.040\nI break this out.\n\n180\n00:09:26.040 --> 00:09:31.250\nAs you can see I've got my if and\nthen my condition.\n\n181\n00:09:31.250 --> 00:09:34.490\nOops and I've just moved\neverything there as I drag that.\n\n182\n00:09:34.490 --> 00:09:36.160\nAnd then I've got my condition.\n\n183\n00:09:36.160 --> 00:09:40.950\nAnd then my open brace, I put it on that\nsame line, right, and then I return,\n\n184\n00:09:40.950 --> 00:09:42.980\nI have a line break there, and\n\n185\n00:09:42.980 --> 00:09:48.050\nthen I tab in and all of my statements\nwill be tabbed into the same point.\n\n186\n00:09:48.050 --> 00:09:52.700\nAnd then my close brace goes on the\nfollowing line after all of my statements.\n\n187\n00:09:52.700 --> 00:09:55.640\nAnd it's aligned with my if, right.\n\n188\n00:09:55.640 --> 00:09:57.580\nSo even if this was nested inside,\n\n189\n00:09:57.580 --> 00:10:01.260\ngosh darn it,\nkeeps dragging instead of selecting.\n\n190\n00:10:01.260 --> 00:10:05.060\nEven if this was nested inside\nanother loop, right, my if and\n\n191\n00:10:05.060 --> 00:10:09.380\nmy closing brace are lined up,\nall right, vertically here.\n\n192\n00:10:09.380 --> 00:10:14.100\nSo that I can tell that this closing\nbrace matches this if statement.\n\n193\n00:10:14.100 --> 00:10:19.000\nAnd it's just a way to keep track of\nwhat belongs inside that if statement.\n\n194\n00:10:19.000 --> 00:10:22.990\nOther people will do it differently,\nand there's nothing wrong with that.\n\n195\n00:10:22.990 --> 00:10:26.590\nFind your own style that works for you.\n\n196\n00:10:26.590 --> 00:10:32.600\nIf we want to, we can actually\nwrite this all on one line.\n\n197\n00:10:32.600 --> 00:10:33.700\nThere is nothing wrong with this.\n\n198\n00:10:33.700 --> 00:10:38.910\nIn fact, if you're working from your\nconsole and not the ISE you need to\n\n199\n00:10:38.910 --> 00:10:43.690\nwrite it all on one line, right, cuz every\ntime we hit Enter it tries to execute.\n\n200\n00:10:43.690 --> 00:10:46.910\nSo you can definitely write\nthis all on one line.\n\n201\n00:10:46.910 --> 00:10:52.010\nIn which case, because I wouldn't have a\nline break between each set of statements,\n\n202\n00:10:52.010 --> 00:10:57.140\nI would use a semicolon, and\nthen I could put additional\n\n203\n00:10:57.140 --> 00:11:01.520\nstatements in here like such, right.\n\n204\n00:11:01.520 --> 00:11:05.530\nAnd so like I said, if you wanna keep\nit all in one line this is fine.\n\n205\n00:11:05.530 --> 00:11:11.171\nIf it starts getting too long though,\nit kinda stretches over,\n\n206\n00:11:11.171 --> 00:11:16.925\nto me it's much much easier to read\nif I have something like this.\n\n207\n00:11:16.925 --> 00:11:22.270\nSo I prefer kinda setting\nthese up like such, all right.\n\n208\n00:11:22.270 --> 00:11:23.810\n&gt;&gt; This is not really something\nyou think about, though.\n\n209\n00:11:23.810 --> 00:11:25.690\nWhen you said each person\nhas their own style,\n\n210\n00:11:25.690 --> 00:11:30.840\nI was reading an article about\ntrying to find the identity\n\n211\n00:11:30.840 --> 00:11:36.100\nof an individual associated with\na digital currency management system.\n\n212\n00:11:36.100 --> 00:11:40.990\nAnd they were performing code analysis to\nhelp locate and identify that individual.\n\n213\n00:11:40.990 --> 00:11:41.740\nSo it's kinda neat.\n\n214\n00:11:41.740 --> 00:11:43.340\n&gt;&gt; They call it a signature, right.\n\n215\n00:11:43.340 --> 00:11:47.340\nIt's almost like the,\nI think of the FBI and examining bombs and\n\n216\n00:11:47.340 --> 00:11:48.960\nthey're like okay, there's a signature-\n&gt;&gt; Exactly.\n\n217\n00:11:48.960 --> 00:11:49.830\n&gt;&gt; To this trigger.\n\n218\n00:11:49.830 --> 00:11:51.420\nThe way this trigger was assembled.\n\n219\n00:11:51.420 --> 00:11:52.190\nSame thing with code.\n\n220\n00:11:52.190 --> 00:11:53.560\nYeah, they can find things in there.\n\n221\n00:11:53.560 --> 00:11:55.770\nThey're like, I've seen this code before.\n\n222\n00:11:55.770 --> 00:11:56.327\n&gt;&gt; This is Mike again.\n\n223\n00:11:56.327 --> 00:11:58.237\n[LAUGH]\n&gt;&gt; Yeah, this is that Mike guy.\n\n224\n00:11:58.237 --> 00:12:02.565\nNow if I am using carriage returns or line\nbreaks there, I don't need my semicolons.\n\n225\n00:12:02.565 --> 00:12:06.232\nThe semicolons wouldn't hurt anything if I\nleft them in here between each statement.\n\n226\n00:12:06.232 --> 00:12:10.132\nAnd they can help with your readability as\nwell as far as telling where one statement\n\n227\n00:12:10.132 --> 00:12:11.869\nends and the other one begins maybe.\n\n228\n00:12:11.869 --> 00:12:18.509\nI just like, to me this looks good,\nit's very, very easy to work through it.\n\n229\n00:12:18.509 --> 00:12:22.416\nAnd if I wanna add another statement I\ncan definitely do that by just adding\n\n230\n00:12:22.416 --> 00:12:23.242\nanother line.\n\n231\n00:12:23.242 --> 00:12:28.021\nAnd I can easily tell that I didn't\nforget my closing brace because it's\n\n232\n00:12:28.021 --> 00:12:30.200\nlined up with my if itself.\n\n233\n00:12:30.200 --> 00:12:36.020\nAnd that's one of the things that, I know\nsometimes it can be tedious a little\n\n234\n00:12:36.020 --> 00:12:40.070\nbit when you have lots of code blocks\ninside here and start nesting things.\n\n235\n00:12:40.070 --> 00:12:43.610\nYou end up with five closing\ncurly braces in a row.\n\n236\n00:12:43.610 --> 00:12:45.454\nAnd when it looks like this,\n\n237\n00:12:47.612 --> 00:12:51.874\nIt's really hard to tell which one you\nmissed or which one goes with which or\n\n238\n00:12:51.874 --> 00:12:56.580\nwhere I would insert something if I\nwanted to be on that third nested level.\n\n239\n00:12:56.580 --> 00:12:59.446\nBut if I did, and\nI shouldn't do all of these here, and\n\n240\n00:12:59.446 --> 00:13:01.605\nit's going to obviously throw\nan error cuz there's no opening.\n\n241\n00:13:01.605 --> 00:13:08.892\nBut normally mine would look\nsomething like that, right.\n\n242\n00:13:08.892 --> 00:13:12.520\nWhere, okay, I can see this one goes here,\nthis one closes here.\n\n243\n00:13:12.520 --> 00:13:14.530\n&gt;&gt; Okay.\n&gt;&gt; I would also probably change my editor.\n\n244\n00:13:14.530 --> 00:13:15.530\nI'm not a big fan.\n\n245\n00:13:15.530 --> 00:13:17.980\nI think this is four spaces or\nmaybe five in there.\n\n246\n00:13:17.980 --> 00:13:19.370\nIt looks like four spaces.\n\n247\n00:13:19.370 --> 00:13:20.780\nI'm a two space kind of tabber.\n\n248\n00:13:20.780 --> 00:13:24.611\nI like, two spaces is plenty to\ngive me the offset I need to,\n\n249\n00:13:24.611 --> 00:13:27.155\nyeah, make mine look the way I like it.\n\n250\n00:13:27.155 --> 00:13:29.236\n&gt;&gt; I was shooting a show\nwith Vonne the other day and\n\n251\n00:13:29.236 --> 00:13:32.787\nshe's like, you're showing your age\nwith the five space tab, Cherokee.\n\n252\n00:13:32.787 --> 00:13:33.304\nI'm like, oops.\n[LAUGH]\n\n253\n00:13:33.304 --> 00:13:34.557\n&gt;&gt; Yeah?\n\n254\n00:13:34.557 --> 00:13:39.122\n[LAUGH] Yeah, it's a lot of extra\nwhite space, and honestly PowerShell,\n\n255\n00:13:39.122 --> 00:13:43.260\nespecially ISE and scripts,\nit's really okay with white space.\n\n256\n00:13:43.260 --> 00:13:47.530\nIt does not matter to\nPowerShell all the white space.\n\n257\n00:13:47.530 --> 00:13:50.860\nIt's just for us for\nreadability, all right.\n\n258\n00:13:50.860 --> 00:13:53.420\nBecause I could definitely\ntake both of these and\n\n259\n00:13:53.420 --> 00:13:56.735\nslam them back over here against\nthe side and it would work just fine.\n\n260\n00:13:56.735 --> 00:13:59.680\nThere's no problems with that.\n\n261\n00:13:59.680 --> 00:14:02.910\nSo however you choose to do it, but\ntry to pick something and stick with it.\n\n262\n00:14:02.910 --> 00:14:07.510\nConsistency and readability is what\nwe are going to look for, all right.\n\n263\n00:14:09.120 --> 00:14:13.170\nAll right, next,\nlet's see what else we got.\n\n264\n00:14:13.170 --> 00:14:16.730\nNow let's talk about, so\nwith an if statement we were able to check\n\n265\n00:14:16.730 --> 00:14:20.260\na condition and\nthen execute something if it was true.\n\n266\n00:14:20.260 --> 00:14:23.290\nBut if it was false,\nit just left the if statement, right,\n\n267\n00:14:23.290 --> 00:14:25.195\nand moved on to the rest of our code.\n\n268\n00:14:25.195 --> 00:14:29.243\nWell what if I wanna do\nsomething if it's false?\n\n269\n00:14:29.243 --> 00:14:33.050\nThat's where else statement comes in,\nright.\n\n270\n00:14:33.050 --> 00:14:38.230\nWe have our if condition,\nopen close parenthesis, open curly brace,\n\n271\n00:14:38.230 --> 00:14:44.222\nstatements to execute if true, closing\ncurly brace, else, open curly brace.\n\n272\n00:14:44.222 --> 00:14:46.725\nAnd so basically another code block,\nright.\n\n273\n00:14:46.725 --> 00:14:50.240\nThere's my open and\nclose curly brace right there for\n\n274\n00:14:50.240 --> 00:14:53.080\nmy else clause in my if statement.\n\n275\n00:14:54.150 --> 00:14:57.825\nSo just like it says here,\nit will check this condition and\n\n276\n00:14:57.825 --> 00:15:01.504\nthen it will execute this\nportion of my code if it's true.\n\n277\n00:15:01.504 --> 00:15:08.330\nIf the condition is false it will execute\nthis portion of my statement, right.\n\n278\n00:15:08.330 --> 00:15:10.600\nAnd again, very, very handy.\n\n279\n00:15:10.600 --> 00:15:13.620\nI wanna be able to do something,\nmaybe fix something or\n\n280\n00:15:13.620 --> 00:15:17.210\nperform some other action,\nbecause it did not ring true.\n\n281\n00:15:18.480 --> 00:15:21.460\nSo here's another one.\n\n282\n00:15:21.460 --> 00:15:26.314\nI have if $a = 5, then print out $a = 5,\n\n283\n00:15:26.314 --> 00:15:30.170\nelse $a does not equal 5.\n\n284\n00:15:30.170 --> 00:15:32.885\nI don't even know what a equals right now,\nI think it's six but\n\n285\n00:15:32.885 --> 00:15:35.310\nlet's run our statement and\nsee what happens.\n\n286\n00:15:35.310 --> 00:15:40.018\nI'm gonna highlight that and\nI'll click execute,\n\n287\n00:15:40.018 --> 00:15:43.450\nand notice I get $a does not equal 5.\n\n288\n00:15:44.570 --> 00:15:45.825\nNow what is $a?\n\n289\n00:15:45.825 --> 00:15:49.420\nLet's see what we got right now,\nit's 15, I was way off.\n\n290\n00:15:49.420 --> 00:15:52.007\nThat's right,\nwe set it to 15 right up here, all right.\n\n291\n00:15:52.007 --> 00:15:56.273\nSo because it does not equal\n5 this part does not execute,\n\n292\n00:15:56.273 --> 00:16:00.118\nit moves on to the else and\nit does execute this part.\n\n293\n00:16:00.118 --> 00:16:04.494\nAnd it doesn't matter what it is, right,\nit doesn't matter if it's 6, 7, 25.\n\n294\n00:16:04.494 --> 00:16:06.519\nA string, anything.\n\n295\n00:16:06.519 --> 00:16:12.819\nIt doesn't equal 5, this portion of\nthe statement is going to execute.\n\n296\n00:16:12.819 --> 00:16:15.610\nSame kind of thing,\nyou can kinda see my syntax there.\n\n297\n00:16:15.610 --> 00:16:19.348\nSome people don't like putting\nthe extra space around the world L,\n\n298\n00:16:19.348 --> 00:16:22.400\nso I kinda like that but again, just me.\n\n299\n00:16:22.400 --> 00:16:25.580\nBut again, I can definitely\nsee my open closing braces.\n\n300\n00:16:25.580 --> 00:16:28.930\nYou might notice that it highlights,\nwhen I select the closing brace or\n\n301\n00:16:28.930 --> 00:16:29.675\nclick next to it.\n\n302\n00:16:29.675 --> 00:16:32.460\nYeah, this one kinda\nhighlighted a little bit,\n\n303\n00:16:32.460 --> 00:16:34.150\none other way that I\ncan start to check and\n\n304\n00:16:34.150 --> 00:16:39.250\nmake sure I have the appropriate number\nof closing braces and something like.\n\n305\n00:16:39.250 --> 00:16:43.080\nI'll tell you PowerShell is incredibly\ngood about helping you with your syntax.\n\n306\n00:16:43.080 --> 00:16:45.750\nIf I take that closing brace out,\nlook what I get.\n\n307\n00:16:45.750 --> 00:16:46.810\nHopefully, you can see that,\n\n308\n00:16:46.810 --> 00:16:51.850\nthere's a little squiggly under this\ncurly brace right here, all right?\n\n309\n00:16:51.850 --> 00:16:56.880\nAnd if I hover over it, it says missing\nclosing brace in statement block or\n\n310\n00:16:56.880 --> 00:16:58.680\ntype definition, right?\n\n311\n00:16:58.680 --> 00:17:01.730\nSo it's telling me exactly what\nI'm missing, I throw that back and\n\n312\n00:17:01.730 --> 00:17:04.140\nit goes away, I like that part.\n\n313\n00:17:04.140 --> 00:17:07.600\nIt can also be a little bit annoying\nbecause as you're typing the statement\n\n314\n00:17:07.600 --> 00:17:10.670\nyou don't have the closing brace yet\nand you've got this little squiggly\n\n315\n00:17:10.670 --> 00:17:13.710\nfollowing you around telling\nyou you need to close this.\n\n316\n00:17:13.710 --> 00:17:16.288\nWell I'm not done writing statements yet,\nlet me do that.\n\n317\n00:17:16.288 --> 00:17:20.180\nSo there is many times that I will\nwrite the skeleton of the statement and\n\n318\n00:17:20.180 --> 00:17:23.600\nthen go back and fill it in just to\navoid those little squigglys there.\n\n319\n00:17:24.740 --> 00:17:28.390\nAnd something else I really haven't talked\nabout that I wanna show you real quick.\n\n320\n00:17:28.390 --> 00:17:30.070\nThis'll probably be a good\nchance to jump in and\n\n321\n00:17:30.070 --> 00:17:32.190\ndo it, is something known as snippets.\n\n322\n00:17:33.680 --> 00:17:37.640\nEspecially when you're first\ngetting started, there are, and\n\n323\n00:17:37.640 --> 00:17:40.695\nI've gotta remember where those guys are,\nCtrl+J or\n\n324\n00:17:40.695 --> 00:17:45.082\nStart &gt; Snippet,\nactually has a bunch of little snippets.\n\n325\n00:17:45.082 --> 00:17:50.920\nLike if I wanted to do an if, well here's\nan if and when I hover over it, I can\n\n326\n00:17:50.920 --> 00:17:56.578\nsee the skeleton of an if statement and\nif I tab or enter, it fills it in for me.\n\n327\n00:17:56.578 --> 00:17:59.520\nSo there is my open and\nclosing parenthesis, my condition,\n\n328\n00:17:59.520 --> 00:18:03.630\nmy open brace, my closing brace, and\nyou can see they do it a little different.\n\n329\n00:18:03.630 --> 00:18:07.700\nThey've got their opening brace underneath\nthe if rather than at the end of the line\n\n330\n00:18:07.700 --> 00:18:11.060\nover here, and now I simply have\nto go back in and fill it in.\n\n331\n00:18:11.060 --> 00:18:14.580\nSo if you're having trouble remembering\nthe syntax of a particular statement\n\n332\n00:18:14.580 --> 00:18:16.360\ntake a look at the snippets.\n\n333\n00:18:16.360 --> 00:18:21.460\nI will tell you that sometimes to me the\nsnippets get to be a little too much work.\n\n334\n00:18:21.460 --> 00:18:25.290\nIf I do a start snippet, well we haven't\ndone some of these I don't want to give\n\n335\n00:18:25.290 --> 00:18:28.400\nthem away yet but let's do a switch here.\n\n336\n00:18:28.400 --> 00:18:32.570\nThere's a lot of me selecting and\nreplacing now or trying to figure out what\n\n337\n00:18:32.570 --> 00:18:37.490\nit is that needs to stay and what it is\nthat need to be replaced with my values.\n\n338\n00:18:37.490 --> 00:18:41.192\nSo sometimes it can be\na little bit frustrating, but\n\n339\n00:18:41.192 --> 00:18:43.730\ndefinitely just getting started,\nif you're having trouble remembering,\n\n340\n00:18:43.730 --> 00:18:46.610\na great place to look is to take\na look at those code snippets.\n\n341\n00:18:46.610 --> 00:18:48.350\nYou can even create\nyour own code snippets.\n\n342\n00:18:48.350 --> 00:18:51.220\nThere are ways to do that, maybe we'll\nhave an episode on that as well.\n\n343\n00:18:51.220 --> 00:18:55.920\nSo you could pre-compile or\npre-create some base statements that you\n\n344\n00:18:55.920 --> 00:18:58.902\nuse a lot of and they'll show\nup in that menu, so pretty cool.\n\n345\n00:19:00.060 --> 00:19:01.770\n&gt;&gt; Did you make that word up, the snippet?\n\n346\n00:19:01.770 --> 00:19:04.033\n&gt;&gt; No, no, no,\nI think that's what its called, right?\n\n347\n00:19:04.033 --> 00:19:06.710\n&gt;&gt; I know, I'm just like, it's kinda\nfunny, like snippets, commandlets.\n\n348\n00:19:06.710 --> 00:19:08.570\nHere in PowerShell, we see like-\n&gt;&gt; [LAUGH]\n\n349\n00:19:08.570 --> 00:19:09.670\n&gt;&gt; It's kind of interesting,\n\n350\n00:19:09.670 --> 00:19:13.020\nI don't know, Gene Gleason,\nshe came up with the wug test,\n\n351\n00:19:13.020 --> 00:19:14.510\nI don't know if you've ever heard of that.\n\n352\n00:19:14.510 --> 00:19:15.490\n&gt;&gt; No.\n&gt;&gt; It's interesting,\n\n353\n00:19:15.490 --> 00:19:16.440\nyou guys should check it out.\n\n354\n00:19:16.440 --> 00:19:19.092\nShe's like a psycho, not psycho, but-\n&gt;&gt; She's psycho.\n\n355\n00:19:19.092 --> 00:19:21.400\n[LAUGH]\n&gt;&gt; She's not psycho.\n\n356\n00:19:21.400 --> 00:19:25.830\n&gt;&gt; Sorry, Gene, but-\n&gt;&gt; [LAUGH] No, psychological linguist.\n\n357\n00:19:25.830 --> 00:19:26.590\n&gt;&gt; Okay.\n\n358\n00:19:26.590 --> 00:19:28.750\n&gt;&gt; Yeah, I wonder what she would\nsay about all these little words.\n\n359\n00:19:28.750 --> 00:19:31.440\n&gt;&gt; All these words that would\nmake everything easier.\n\n360\n00:19:31.440 --> 00:19:34.390\nIt would be interesting, right?\n\n361\n00:19:34.390 --> 00:19:36.620\nThe study of language\nis pretty fascinating.\n\n362\n00:19:36.620 --> 00:19:37.240\n&gt;&gt; I know, it's crazy.\n\n363\n00:19:37.240 --> 00:19:40.736\n&gt;&gt; You know, that languages are basically\nliving and they evolve, very cool.\n\n364\n00:19:40.736 --> 00:19:44.420\nAll right, but there's a random aside for\nthe day on used on the Adam's lines.\n\n365\n00:19:44.420 --> 00:19:46.760\nThere was a random aside for this episode.\n\n366\n00:19:46.760 --> 00:19:48.000\nStay tuned for the next one.\n\n367\n00:19:48.000 --> 00:19:50.360\nYeah, always good for one of those.\n\n368\n00:19:50.360 --> 00:19:52.080\nUsually it's a movie thing though.\n\n369\n00:19:52.080 --> 00:19:53.590\n&gt;&gt; Yeah I don't watch\nmovies that often so.\n\n370\n00:19:53.590 --> 00:19:54.630\n&gt;&gt; Me either.\n&gt;&gt; Okay.\n\n371\n00:19:54.630 --> 00:19:57.270\n&gt;&gt; Actually I do watch a lot of I\njust don't remember like actors\n\n372\n00:19:57.270 --> 00:19:57.900\nnames in movies.\n\n373\n00:19:57.900 --> 00:20:00.230\n&gt;&gt; Me either,\nall right we might be doing good here.\n\n374\n00:20:00.230 --> 00:20:01.290\n&gt;&gt; Yeah.\n&gt;&gt; [LAUGH]\n\n375\n00:20:01.290 --> 00:20:03.520\n&gt;&gt; All right so let's get back to our ifs.\n\n376\n00:20:03.520 --> 00:20:07.100\nWe've got the if with the else clause,\npretty cool there.\n\n377\n00:20:07.100 --> 00:20:11.250\nAnother thing we might need to do with\nan if statement or want to try and\n\n378\n00:20:11.250 --> 00:20:14.540\ndo is to test multiple conditions, right?\n\n379\n00:20:14.540 --> 00:20:20.850\nWhat if I need to check, I don't know\nlet's see, is that service running?\n\n380\n00:20:20.850 --> 00:20:23.210\nOr if it's not, is it starting?\n\n381\n00:20:23.210 --> 00:20:25.300\nIs it delaying starting or\nwhat is this the status?\n\n382\n00:20:25.300 --> 00:20:28.010\nMaybe I wanna check multiple condition.\n\n383\n00:20:28.010 --> 00:20:32.962\nThe variable will work as long as\nit's either five or ten or fifteen.\n\n384\n00:20:32.962 --> 00:20:35.780\nThere is things I need\nto do when that number,\n\n385\n00:20:35.780 --> 00:20:38.600\nmaybe it's a number that's\nincrementing slowly by one.\n\n386\n00:20:38.600 --> 00:20:41.720\nWhen it gets to five, I wanna do\nsomething, nothing six, seven, eight.\n\n387\n00:20:41.720 --> 00:20:43.600\nBut when it gets to ten,\nI wanna do something.\n\n388\n00:20:43.600 --> 00:20:47.610\n&gt;&gt; Maybe like truncate a file once it get\nto a certain size or something like that.\n\n389\n00:20:47.610 --> 00:20:51.800\n&gt;&gt; Yeah, right, so we can do multiple\nconditions within our if statement and\n\n390\n00:20:51.800 --> 00:20:53.610\nit's pretty easy to do.\n\n391\n00:20:53.610 --> 00:20:58.710\nIt's just an else if, we're gonna\nadd an else if into our syntax.\n\n392\n00:20:58.710 --> 00:21:03.100\nSo here I can see my opening keyword\nif and then my condition, my open and\n\n393\n00:21:03.100 --> 00:21:07.580\nclose parentheses, my open brace,\nso the opening of my code block.\n\n394\n00:21:07.580 --> 00:21:12.210\nStatements to if the condition is true,\nso just like before, nothing changed yet.\n\n395\n00:21:12.210 --> 00:21:16.250\nThen I get my closing brace and\nthen I had the keyword elseif, and\n\n396\n00:21:16.250 --> 00:21:20.770\nthat is all one word, do be careful,\nif you try to do else if it will not work.\n\n397\n00:21:22.750 --> 00:21:27.230\nSo, elseif and then my second condition,\ncompletely separate condition,\n\n398\n00:21:27.230 --> 00:21:31.010\ndoesn't have to have anything\nto do with the first condition.\n\n399\n00:21:31.010 --> 00:21:33.540\nThe first one might check to\nsee if it's raining outside.\n\n400\n00:21:33.540 --> 00:21:36.510\nThe second one might check\nto see if the dog is hungry.\n\n401\n00:21:36.510 --> 00:21:38.530\nAnd then they can be completely unrelated.\n\n402\n00:21:38.530 --> 00:21:44.660\nIt's just that if this one did not ring\ntrue, then I want to test this one.\n\n403\n00:21:44.660 --> 00:21:47.400\nBecause if it's raining outside the dog\nhas been inside all day long and\n\n404\n00:21:47.400 --> 00:21:49.586\nhe's probably ate all of his food,\nI don't know.\n\n405\n00:21:49.586 --> 00:21:50.970\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n406\n00:21:50.970 --> 00:21:54.780\nyou know the point is thought that\nthey could be completely unrelated.\n\n407\n00:21:54.780 --> 00:22:02.210\nAnd then statements if condition two,\nnotice I've got condition two is true.\n\n408\n00:22:02.210 --> 00:22:06.860\nBecause if this one rings false,\nright, we're done with that part,\n\n409\n00:22:06.860 --> 00:22:09.090\nwe're not eve going back to it.\n\n410\n00:22:09.090 --> 00:22:10.850\nNow we're gonna check this condition and\n\n411\n00:22:10.850 --> 00:22:15.230\nif it's true, then we will execute\nthis not the previous statements.\n\n412\n00:22:16.245 --> 00:22:18.580\nDoesn't stack them up and\nsay okay well let's try,\n\n413\n00:22:18.580 --> 00:22:22.460\nnow we could put the same statements in\neach block but you would have to do that.\n\n414\n00:22:22.460 --> 00:22:25.550\nYou have to manually, you got to make\nsure you put the what you wanted to do\n\n415\n00:22:25.550 --> 00:22:29.850\nin this block cuz this is the one\nwe're working with right now, right.\n\n416\n00:22:29.850 --> 00:22:35.050\nI can drop, I can leave it right there,\nwe could end with just that.\n\n417\n00:22:35.050 --> 00:22:40.250\nI could say, if this condition is true\ndo this, else if this condition is true,\n\n418\n00:22:40.250 --> 00:22:43.670\ndo this, if none of them are true\ndon't do anything, right.\n\n419\n00:22:43.670 --> 00:22:45.200\nJust like our initial if statement,\n\n420\n00:22:45.200 --> 00:22:49.670\nthere was no else, it's just if it's true\ndo this, otherwise don't do anything.\n\n421\n00:22:49.670 --> 00:22:54.290\nBut we can also include an else statement,\nright?\n\n422\n00:22:54.290 --> 00:22:59.810\nSo if this condition is true do this, else\nif this condition is true do this, else\n\n423\n00:22:59.810 --> 00:23:05.650\nif nothing else is true, all of them are\nfalse then go ahead and do this, right?\n\n424\n00:23:05.650 --> 00:23:10.053\nSo if we come down here we've\ngot multiple conditions,\n\n425\n00:23:10.053 --> 00:23:13.330\nif dollar sign a equals 5 print that out,\n\n426\n00:23:13.330 --> 00:23:18.300\nelse if a equals 10,\nprint that out, else do this.\n\n427\n00:23:18.300 --> 00:23:26.230\nSo let's set a back to 5 and\nsee what happens as we run through here.\n\n428\n00:23:26.230 --> 00:23:31.029\nAll right, so we'll try this,\nand I get a equals 5.\n\n429\n00:23:32.380 --> 00:23:33.540\nWell what if a equals,\n\n430\n00:23:33.540 --> 00:23:36.110\nyou know it'd be easier if I just\ndid this down here somewhere.\n\n431\n00:23:36.110 --> 00:23:41.670\nDollar sign a equals 10, execute that.\n\n432\n00:23:41.670 --> 00:23:46.170\nSo now let's run this and\na is equal to 10 and sure\n\n433\n00:23:46.170 --> 00:23:51.350\nenough it went through the first test and\nsay, a does not equal 5, so it skips that.\n\n434\n00:23:51.350 --> 00:23:54.857\nA does equal 10, so it executes that and\nthen that ends the statement, right.\n\n435\n00:23:54.857 --> 00:23:59.075\nAs soon as the first condition,\nI don't wanna say the first condition,\n\n436\n00:23:59.075 --> 00:24:03.500\nonce one of the conditions rings true,\nit doesn't matter which one it is And\n\n437\n00:24:03.500 --> 00:24:04.626\nit performs that.\n\n438\n00:24:04.626 --> 00:24:05.599\nThat's the entity if.\n\n439\n00:24:05.599 --> 00:24:09.247\nIt's not going to go and\ndo any other checks, or\n\n440\n00:24:09.247 --> 00:24:13.000\nperform the Ls, or\nanything like that, right?\n\n441\n00:24:13.000 --> 00:24:17.906\nWhat if a equals 11?\n\n442\n00:24:17.906 --> 00:24:21.026\nI'll run my code again, and\n\n443\n00:24:21.026 --> 00:24:26.226\nI can see I get A equals 10,\ndid I not set that?\n\n444\n00:24:26.226 --> 00:24:31.796\nMaybe I didn't set that,\nduh, look at there.\n\n445\n00:24:31.796 --> 00:24:33.569\n&gt;&gt; That was our hashtag common mistake.\n\n446\n00:24:33.569 --> 00:24:35.548\n[LAUGH]\n&gt;&gt; [LAUGH] Yeah, it was,\n\n447\n00:24:35.548 --> 00:24:39.730\nI told you I do this myself sometimes,\nit's a hard little habit to break.\n\n448\n00:24:39.730 --> 00:24:42.822\nI put equals instead of eq, and so\n\n449\n00:24:42.822 --> 00:24:47.357\nit did equal 10,\nbecause I just set it to 10.\n\n450\n00:24:47.357 --> 00:24:50.768\nSo it did exactly what it was\nsupposed to do, that was my fault.\n\n451\n00:24:50.768 --> 00:24:55.973\nSo let's set that to 11 again,\nand now try to execute,\n\n452\n00:24:55.973 --> 00:24:59.448\nand I see a does not equal 5, or 10.\n\n453\n00:24:59.448 --> 00:25:05.050\nSo we got the last, or\nthe else down there.\n\n454\n00:25:05.050 --> 00:25:07.572\nAll right,\nI know we're getting short on time,\n\n455\n00:25:07.572 --> 00:25:09.610\njust a couple of more things to do here.\n\n456\n00:25:09.610 --> 00:25:15.963\nWe can definitely, we can add as\nmany of these else ifs as I need to.\n\n457\n00:25:15.963 --> 00:25:17.790\n&gt;&gt; I'm surprised that you're not getting\ntongue twisted over there [LAUGH].\n\n458\n00:25:17.790 --> 00:25:19.620\n&gt;&gt; I know, right?\n\n459\n00:25:19.620 --> 00:25:26.310\nI could have dozens of else ifs\nin here try to tidy that up.\n\n460\n00:25:26.310 --> 00:25:30.520\nNow each one just being another condition,\nanother check to perform, and\n\n461\n00:25:30.520 --> 00:25:34.110\nsome code to do whatever it\nis if that one rings true.\n\n462\n00:25:34.110 --> 00:25:39.292\nAnd then I can always add one else\nstatement where if none of these are true,\n\n463\n00:25:39.292 --> 00:25:42.100\nthis is what's gonna execute, right?\n\n464\n00:25:42.100 --> 00:25:43.800\nBut when we start doing this,\n\n465\n00:25:43.800 --> 00:25:48.496\nwe need to check multiple conditions is\nactually something much better that we can\n\n466\n00:25:48.496 --> 00:25:51.774\nuse that takes a lot less\ntyping a little more efficient.\n\n467\n00:25:51.774 --> 00:25:57.460\nIt's known as a switch, and that's what\nwe're gonna cover next, all right?\n\n468\n00:25:57.460 --> 00:25:58.805\nForgot what I was doing down here.\n\n469\n00:25:58.805 --> 00:25:59.495\nJust some examples here.\n\n470\n00:25:59.495 --> 00:26:01.805\nHere's another if statement.\n\n471\n00:26:01.805 --> 00:26:07.102\nIn this case, I was kind of showing you,\nstarting to show you some real world,\n\n472\n00:26:07.102 --> 00:26:11.200\nsome actual administration\nisn’t all that effective, but\n\n473\n00:26:11.200 --> 00:26:15.723\nI just start to show you another\nthan dollar sign a, dollar sign b.\n\n474\n00:26:15.723 --> 00:26:18.180\nSo here I’m saying get service, right?\n\n475\n00:26:18.180 --> 00:26:18.870\nWe know what that does.\n\n476\n00:26:18.870 --> 00:26:22.220\nThat goes and gets a list of all\nthe running services on this system.\n\n477\n00:26:22.220 --> 00:26:24.410\nOr the system I'm running the script on.\n\n478\n00:26:24.410 --> 00:26:26.319\nSo it's get service-name.\n\n479\n00:26:26.319 --> 00:26:27.174\n&gt;&gt; You're gonna filter\nit a little bit here.\n\n480\n00:26:27.174 --> 00:26:28.599\n&gt;&gt; What's that?\n&gt;&gt; You're gonna filter a little bit here.\n\n481\n00:26:28.599 --> 00:26:29.409\n&gt;&gt; Exactly.\n\n482\n00:26:29.409 --> 00:26:30.381\n&gt;&gt; Your DNS cache.\n\n483\n00:26:30.381 --> 00:26:31.600\n&gt;&gt; I'm gonna say DNS cache.\n\n484\n00:26:31.600 --> 00:26:34.237\nSo that's the service that I want to get.\n\n485\n00:26:34.237 --> 00:26:36.410\nAnd not just all of them just that one.\n\n486\n00:26:36.410 --> 00:26:40.620\nRemember, everything in\nPowerShell is an object, so\n\n487\n00:26:40.620 --> 00:26:44.710\nwith this it's going to return\nthat service DNS cache.\n\n488\n00:26:44.710 --> 00:26:48.944\nI wrap that in parenthesis, and\nnow I can use a dot, and oops,\n\n489\n00:26:48.944 --> 00:26:53.666\nI just tried to move the dot, and\nI can now access all the properties,\n\n490\n00:26:53.666 --> 00:26:56.949\nand there I just moved status,\nI tell you what.\n\n491\n00:26:56.949 --> 00:27:01.206\nI can access the properties\nof that object.\n\n492\n00:27:01.206 --> 00:27:04.092\nSo here I'm saying I want\nto get this service, but\n\n493\n00:27:04.092 --> 00:27:06.790\nI really just want\nthe status of that service.\n\n494\n00:27:07.800 --> 00:27:13.082\nAnd then, all of these goes\ninto my condition, my open.\n\n495\n00:27:13.082 --> 00:27:16.050\nSee the open and closing parenthesis\non the outside of that, so\n\n496\n00:27:16.050 --> 00:27:17.453\nall of that's my condition.\n\n497\n00:27:17.453 --> 00:27:19.895\nIf the services status\nis equal to running-\n\n498\n00:27:19.895 --> 00:27:21.726\n&gt;&gt; Okay, then what?\n\n499\n00:27:21.726 --> 00:27:24.412\n&gt;&gt; Then perform this action, right?\n\n500\n00:27:24.412 --> 00:27:30.537\nSo we'll execute that, and\nI get the DNS client is running.\n\n501\n00:27:30.537 --> 00:27:33.496\nI could do an else with that,\nI was just goofing around here.\n\n502\n00:27:33.496 --> 00:27:36.957\nElse, the DNS client is not running,\nso if it wasn't,\n\n503\n00:27:36.957 --> 00:27:40.361\nthen it would print that last line,\nbut it is running.\n\n504\n00:27:40.361 --> 00:27:43.625\nAnd I don't want to stop it right now,\ncuz I would lose my name resolution, so\n\n505\n00:27:43.625 --> 00:27:44.891\nwe're not going to see that.\n\n506\n00:27:44.891 --> 00:27:48.911\nBut that's a good look,\nI think at what we can do with an if.\n\n507\n00:27:48.911 --> 00:27:52.970\nAnd we've got an if,\nyou got your else if, you got your else.\n\n508\n00:27:52.970 --> 00:27:53.905\nVery powerful stuff.\n\n509\n00:27:53.905 --> 00:27:57.721\nMake sure you get this syntax down and\nunderstand how to use it,\n\n510\n00:27:57.721 --> 00:27:59.741\nbecause we will be using it a lot.\n\n511\n00:27:59.741 --> 00:28:03.443\n&gt;&gt; I feel like we are just opening\nthe Pandora box of statements here, and\n\n512\n00:28:03.443 --> 00:28:04.586\npacking into those.\n\n513\n00:28:04.586 --> 00:28:08.103\nSo you don't wanna miss the other types of\nstatements that we have headed your way,\n\n514\n00:28:08.103 --> 00:28:09.775\nbut for this show we are gonna sign out.\n\n515\n00:28:09.775 --> 00:28:11.280\nI've been your host Cherokee Boose.\n\n516\n00:28:11.280 --> 00:28:12.133\n&gt;&gt; And I'm Mike Rodrick.\n\n517\n00:28:12.133 --> 00:28:13.556\n&gt;&gt; See you next time here ITProTV.\n\n518\n00:28:13.556 --> 00:28:21.216\n[MUSIC]\n\n519\n00:28:21.216 --> 00:28:23.812\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "242601099"
        },
        {
          "description": "In this episode you will learn about switch statements. You will see how switch statements are equivalent to a series of If statements, but are simpler to write as well as read.",
          "length": "1686",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-2-1-switch_statements-111017-PGM.00_27_53_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-2-1-switch_statements-111017-PGM.00_27_53_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-2-1-switch_statements-111017-PGM.00_27_53_13.Still001-sm.jpg",
          "title": "Switch Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.270 --> 00:00:01.200\nWelcome to ITProTV.\n\n2\n00:00:01.200 --> 00:00:07.519\nI'm your host Don Pezet- [CROSSTALK]\n\n3\n00:00:07.519 --> 00:00:08.325\n[MUSIC]\n\n4\n00:00:08.325 --> 00:00:10.300\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:10.300 --> 00:00:14.140\n&gt;&gt; Welcome to your\nPowerShell Scripting series.\n\n6\n00:00:14.140 --> 00:00:16.070\nI'm your show host, Cherokee Boose.\n\n7\n00:00:16.070 --> 00:00:19.130\nIn the last episode we were taking\na look at some if statements and\n\n8\n00:00:19.130 --> 00:00:22.670\nin this show we're gonna move\non to some switch statements.\n\n9\n00:00:22.670 --> 00:00:25.265\nWe'll switch on to the switch statements.\n\n10\n00:00:25.265 --> 00:00:29.280\n&gt;&gt; [LAUGH] I was waiting for that, I was\nwondering if that was gonna come out.\n\n11\n00:00:29.280 --> 00:00:31.240\n&gt;&gt; I just thought of it\nright as I said it too.\n\n12\n00:00:31.240 --> 00:00:32.330\n&gt;&gt; That's all right.\n&gt;&gt; It's okay,\n\n13\n00:00:32.330 --> 00:00:34.740\nI'm sure we'll have other\nopportunities to mess things up here.\n\n14\n00:00:34.740 --> 00:00:37.508\n&gt;&gt; We will, well, we'll switch it\nup many times throughout the show.\n\n15\n00:00:37.508 --> 00:00:39.360\n&gt;&gt; I didn't even get a chance\nto introduce you, Mike.\n\n16\n00:00:39.360 --> 00:00:41.209\nHow will anyone know who you are?\n\n17\n00:00:41.209 --> 00:00:42.175\n[LAUGH]\n&gt;&gt; Watch,\n\n18\n00:00:42.175 --> 00:00:44.713\nit's magic,\nit's gonna appear right below me.\n\n19\n00:00:48.040 --> 00:00:49.495\nIt was a little slow but there it is.\n\n20\n00:00:49.495 --> 00:00:52.695\nThere it is right down there, all right?\n\n21\n00:00:52.695 --> 00:00:53.715\nHow's everybody doing?\n\n22\n00:00:53.715 --> 00:00:55.275\nGlad to be back, thank you, Cherokee.\n\n23\n00:00:55.275 --> 00:00:57.149\nExcited as always, and yeah,\n\n24\n00:00:57.149 --> 00:01:00.832\nwe are gonna switch it up with\nsome switch statements today.\n\n25\n00:01:00.832 --> 00:01:04.635\nSo as Cherokee was saying, in a previous\nepisode we took a look at if statements.\n\n26\n00:01:04.635 --> 00:01:07.160\nAnd that was a way that I\ncould check a condition.\n\n27\n00:01:07.160 --> 00:01:11.010\nAnd then execute statements based\non the results of that check.\n\n28\n00:01:11.010 --> 00:01:16.233\nNot the value of the statement, but\nwhether the statement was true or\n\n29\n00:01:16.233 --> 00:01:19.484\nfalse, I could execute code, all right?\n\n30\n00:01:19.484 --> 00:01:21.860\nAnd we also saw that we\ncould do several checks.\n\n31\n00:01:21.860 --> 00:01:25.680\nWe could do a single check,\nwe could start doing else ifs, and\n\n32\n00:01:25.680 --> 00:01:27.360\nwe could do multiple checks.\n\n33\n00:01:27.360 --> 00:01:31.050\nAnd I said, once you start getting\ntoo many if statements, or\n\n34\n00:01:31.050 --> 00:01:34.620\ntoo many condition checks,\nthere's a better way to go about it.\n\n35\n00:01:34.620 --> 00:01:39.568\nA little bit more efficient, and not so\nmuch efficient as performance goes, but\n\n36\n00:01:39.568 --> 00:01:44.467\nmore about efficient as far as code goes,\nwriting the code, reading the code.\n\n37\n00:01:44.467 --> 00:01:46.752\nAnd again,\nI know I've stressed this before.\n\n38\n00:01:46.752 --> 00:01:51.070\nIt's a very important part of writing code\nis writing good readable code that other\n\n39\n00:01:51.070 --> 00:01:56.820\npeople can use and understand, or\nthat you can understand later on, right?\n\n40\n00:01:56.820 --> 00:01:59.420\nSo let's take a look at my screen here and\nwe'll talk about the switch.\n\n41\n00:01:59.420 --> 00:02:03.184\nThe switch is basically going\nto do what an if statement does.\n\n42\n00:02:03.184 --> 00:02:06.300\nIt's gonna allow me to\nhave a test value or\n\n43\n00:02:06.300 --> 00:02:09.860\nsomething that I wanna check\nagainst multiple conditions.\n\n44\n00:02:11.200 --> 00:02:13.249\nWe wouldn't use a switch if\nI only had one condition.\n\n45\n00:02:13.249 --> 00:02:15.750\nI'd use an if statement, easy enough.\n\n46\n00:02:15.750 --> 00:02:21.050\nI can say, if this is true do this,\nN brace, done, right?\n\n47\n00:02:21.050 --> 00:02:21.975\nNothing left to do.\n\n48\n00:02:21.975 --> 00:02:25.528\nBut as soon as I start having to\ndo else if this, else if that,\n\n49\n00:02:25.528 --> 00:02:30.330\nelse if that, that's when I might\nwanna consider moving into our switch.\n\n50\n00:02:30.330 --> 00:02:35.682\n&gt;&gt; Maybe like we're graduating as it's\nprogressively becoming more complex here.\n\n51\n00:02:35.682 --> 00:02:38.312\n&gt;&gt; Absolutely,\nit'll be a good way to look at it.\n\n52\n00:02:38.312 --> 00:02:43.110\nSo our syntax is very similar,\nwell, okay, maybe not so much.\n\n53\n00:02:43.110 --> 00:02:45.390\nSimilar a little bit to our ifs.\n\n54\n00:02:45.390 --> 00:02:49.350\nI've got my switch keyword\nthat's gonna start it all off.\n\n55\n00:02:49.350 --> 00:02:51.880\nAnd I've got my open parentheses, and\n\n56\n00:02:51.880 --> 00:02:57.370\nin there I'm gonna have the value that\nI wanna test against the conditions.\n\n57\n00:02:57.370 --> 00:02:58.450\nIt's a little bit different here.\n\n58\n00:02:58.450 --> 00:03:01.840\nWith the if statement my\nparentheses contain the condition\n\n59\n00:03:01.840 --> 00:03:04.830\nthat I wanted to test to see\nif it was true or false.\n\n60\n00:03:04.830 --> 00:03:05.800\nWith the switch,\n\n61\n00:03:05.800 --> 00:03:09.490\nwithin my parentheses it's the value\nthat I'm going to be checking, right?\n\n62\n00:03:09.490 --> 00:03:11.570\nI haven't told it what\nthe condition is yet,\n\n63\n00:03:11.570 --> 00:03:17.320\nsaying this is what I wanna check, and\nthen open brace, and then condition.\n\n64\n00:03:17.320 --> 00:03:21.896\nAnd then, the actions I wanna perform or\nthe statements that I want to fire,\n\n65\n00:03:21.896 --> 00:03:24.430\nif this condition is true.\n\n66\n00:03:24.430 --> 00:03:27.340\nWell, if that condition isn't true,\nit'll move to the next one,\n\n67\n00:03:27.340 --> 00:03:30.430\nto see if this condition is true.\n\n68\n00:03:30.430 --> 00:03:34.040\nAnd if it is,\nit will perform those actions, right?\n\n69\n00:03:34.040 --> 00:03:40.341\nSo as like I said,\nsimilar in skeletal syntax maybe.\n\n70\n00:03:40.341 --> 00:03:43.330\nKeyword, open close parentheses,\nopen brace, close brace for\n\n71\n00:03:43.330 --> 00:03:47.840\nmy code blocks, but where things\nare is a little bit different.\n\n72\n00:03:47.840 --> 00:03:50.740\nSo switch, the value I wanna check,\n\n73\n00:03:50.740 --> 00:03:54.110\nthe condition,\nwhat to do if that condition is true.\n\n74\n00:03:54.110 --> 00:03:57.600\nThe next condition I wanna test,\nand what to do if that's true.\n\n75\n00:03:57.600 --> 00:04:03.285\nAnd I can have as many of these as I want\nbut it's gonna be a lot more readable\n\n76\n00:04:03.285 --> 00:04:08.913\nthan a long complex if else, if else,\nif else, if else type statement.\n\n77\n00:04:08.913 --> 00:04:12.760\nBecause with the else if's, and\nI'll show you an example here in second.\n\n78\n00:04:12.760 --> 00:04:14.387\nI'll come back to that thought.\n\n79\n00:04:14.387 --> 00:04:16.420\nAll right, so\nlet's do a very simple one here.\n\n80\n00:04:16.420 --> 00:04:19.160\nAs I scroll down,\nhere's our first switch statement.\n\n81\n00:04:19.160 --> 00:04:21.390\nAnd you can see my keyword switch.\n\n82\n00:04:21.390 --> 00:04:24.840\nThe value I wanna test is the variable A.\n\n83\n00:04:24.840 --> 00:04:30.920\nI've got my open brace, and\nthen I have my first condition.\n\n84\n00:04:30.920 --> 00:04:33.770\nIf a is a 1, and\nyou can really read it like that.\n\n85\n00:04:33.770 --> 00:04:36.009\nI mean, you kind of are.\n\n86\n00:04:36.009 --> 00:04:40.050\nYou're doing an if inside this switch,\njust not using that if syntax.\n\n87\n00:04:40.050 --> 00:04:43.810\nSo if a is 1, do this.\n\n88\n00:04:43.810 --> 00:04:47.481\nWell if a is 2, do this.\n\n89\n00:04:47.481 --> 00:04:49.165\nIf a is 3, do this.\n\n90\n00:04:49.165 --> 00:04:51.248\nIf a is 4, do this.\n\n91\n00:04:51.248 --> 00:04:54.657\nLet's see what happens if we set a to,\nI don't know, what do you want to say,\n\n92\n00:04:54.657 --> 00:04:55.410\nCherokee, 3?\n\n93\n00:04:55.410 --> 00:04:56.988\n&gt;&gt; 3 is great.\n\n94\n00:04:56.988 --> 00:04:59.490\n&gt;&gt; Great, I typed it before\nI even gave you a chance.\n\n95\n00:04:59.490 --> 00:05:01.774\nWhy did I even ask you?\n\n96\n00:05:01.774 --> 00:05:04.960\n[LAUGH] What would you like to set it to?\n\n97\n00:05:04.960 --> 00:05:06.982\n&gt;&gt; I was thinking in my mind 1.\n\n98\n00:05:06.982 --> 00:05:08.252\n&gt;&gt; Were you?\nOkay, let's do 1.\n\n99\n00:05:08.252 --> 00:05:10.190\n&gt;&gt; Now that you're asking.\n\n100\n00:05:10.190 --> 00:05:12.170\n&gt;&gt; Okay, we're gonna do 1.\n\n101\n00:05:12.170 --> 00:05:13.956\nI guess I did ask.\nIt's only fair.\n\n102\n00:05:13.956 --> 00:05:16.345\nAnd now let's execute our switch.\n\n103\n00:05:16.345 --> 00:05:17.180\nWait, did I execute that?\n\n104\n00:05:17.180 --> 00:05:20.030\nLet's make sure a equals 1, there we go.\n\n105\n00:05:20.030 --> 00:05:22.870\nAnd now let's run through our switch and\nsee what happens.\n\n106\n00:05:24.020 --> 00:05:26.690\n&gt;&gt; 1.\n&gt;&gt; All right, I get back 1, so\n\n107\n00:05:26.690 --> 00:05:28.600\nit worked perfectly.\n\n108\n00:05:28.600 --> 00:05:31.580\nWhat if 1 was to equal 3?\n\n109\n00:05:31.580 --> 00:05:35.310\nLet's execute that, and\nthen execute our switch again.\n\n110\n00:05:36.780 --> 00:05:37.580\nI get 3.\n\n111\n00:05:37.580 --> 00:05:38.140\n&gt;&gt; Okay.\n\n112\n00:05:38.140 --> 00:05:40.609\n&gt;&gt; Beautiful, easy breezy, right?\n\n113\n00:05:40.609 --> 00:05:42.080\nThat's what we like to say.\n\n114\n00:05:42.080 --> 00:05:45.490\nSo that is a very basic switch statement.\n\n115\n00:05:45.490 --> 00:05:49.290\nCheck a value against these conditions,\nand\n\n116\n00:05:49.290 --> 00:05:53.890\nhere are the actions to\nperform if it's true, right?\n\n117\n00:05:53.890 --> 00:05:58.820\nNow these are very short little\ncode blocks for each one of these.\n\n118\n00:05:58.820 --> 00:06:03.804\nIf I was doing this and it was multiple\nstatements that I wanted to perform\n\n119\n00:06:03.804 --> 00:06:08.804\non if it was 1, I would probably have\nthis lined up slightly different.\n\n120\n00:06:08.804 --> 00:06:13.837\nI would do something like this,\nright, where I can see\n\n121\n00:06:13.837 --> 00:06:18.981\nthat is definitely the code block for\ncondition 1, and\n\n122\n00:06:18.981 --> 00:06:26.220\nthese are all of the statements that I\nwanna execute, right, if that is true.\n\n123\n00:06:26.220 --> 00:06:31.130\nSo if we set that back to 1,\nwe should see that\n\n124\n00:06:31.130 --> 00:06:35.600\nall of those execute, oops.\n\n125\n00:06:35.600 --> 00:06:37.082\nWhat did I miss there?\n\n126\n00:06:40.184 --> 00:06:44.484\n[INAUDIBLE] No, I don't think it\nlikes my line breaks in there.\n\n127\n00:06:44.484 --> 00:06:47.171\nI may have to [INAUDIBLE].\n\n128\n00:06:47.171 --> 00:06:50.040\nBut I would line it up,\nI have to check my syntax on that.\n\n129\n00:06:50.040 --> 00:06:55.223\nI'm getting unexpected token,\nin expression on statement at line seven.\n\n130\n00:06:55.223 --> 00:06:59.377\nOne, two, three, four, five, six,\nseven, it doesn't like this one.\n\n131\n00:07:07.278 --> 00:07:08.200\nThere we go.\n\n132\n00:07:08.200 --> 00:07:10.092\nIt didn't like the line break after that.\n\n133\n00:07:10.092 --> 00:07:13.450\nProbably have to get some semicolons in\nthere to make sure I ended each of my\n\n134\n00:07:13.450 --> 00:07:13.970\nstatements.\n\n135\n00:07:13.970 --> 00:07:17.050\nBut I might line it up something\na little more like that\n\n136\n00:07:17.050 --> 00:07:19.380\nrather than stretch it across the page.\n\n137\n00:07:19.380 --> 00:07:23.050\nBut again,\nthat is definitely a personal type thing.\n\n138\n00:07:23.050 --> 00:07:27.790\n&gt;&gt; So I'm just trying to rationalize\nwhere I would use a command like this.\n\n139\n00:07:27.790 --> 00:07:33.400\nAnd I'm thinking,\ngoing back to the if terminology here,\n\n140\n00:07:33.400 --> 00:07:38.380\nbut I maybe I could run a command that\nsays hey, if this particular service is\n\n141\n00:07:38.380 --> 00:07:42.760\nrunning, and then I call out a service,\nthen do a restart.\n\n142\n00:07:42.760 --> 00:07:45.770\nBut I could add multiple\nparameters in there for\n\n143\n00:07:45.770 --> 00:07:47.430\ncertain virtual machines or whatever.\n\n144\n00:07:47.430 --> 00:07:50.782\nSo if I had an issue with a service and\nI wanted to just say, hey,\n\n145\n00:07:50.782 --> 00:07:54.160\nI need to restart all those machines,\nthen that would that be?\n\n146\n00:07:54.160 --> 00:07:57.117\n&gt;&gt; Yeah,\nyou could possibly do that with this.\n\n147\n00:07:57.117 --> 00:08:00.428\nThe thing to remember is\nyou have one condition or\n\n148\n00:08:00.428 --> 00:08:02.700\none value that you're testing.\n\n149\n00:08:02.700 --> 00:08:07.636\nIn this case, well, I shouldn't say that,\nbecause we can definitely roll multiple\n\n150\n00:08:07.636 --> 00:08:12.390\nvalues in there, I'm gonna show you\nan example of that in just a little bit.\n\n151\n00:08:12.390 --> 00:08:17.120\nSo, yeah, you might do something like that\nwhere the condition would change, right?\n\n152\n00:08:17.120 --> 00:08:22.290\nOver here rather than be a one, cuz this\nwould be maybe the status of the service.\n\n153\n00:08:22.290 --> 00:08:27.140\nSo, get service dot status type thing,\nthis would be all the possible values.\n\n154\n00:08:27.140 --> 00:08:29.720\nEach one of these would be\na possible value for the service.\n\n155\n00:08:29.720 --> 00:08:32.510\nStop, started, or something like that.\n\n156\n00:08:32.510 --> 00:08:35.440\nAnd what to do if it were started,\nand what to do if it were stopped.\n\n157\n00:08:36.740 --> 00:08:39.890\nSo, I can see where maybe you have\na list of virtual machines, and\n\n158\n00:08:39.890 --> 00:08:41.410\nyou want to make sure they're running.\n\n159\n00:08:41.410 --> 00:08:45.500\nAnd so, you could have a thing that ran\nthrough a list of virtual machine names,\n\n160\n00:08:45.500 --> 00:08:47.010\nif it's running, don't do anything.\n\n161\n00:08:47.010 --> 00:08:49.075\nIf it's not, do something.\n\n162\n00:08:49.075 --> 00:08:52.472\nSo, yeah, I could probably work\nsomething out like that, for sure.\n\n163\n00:08:52.472 --> 00:08:54.071\nAll right,\nnow let's take a look, you know,\n\n164\n00:08:54.071 --> 00:08:55.590\nwhat I'm gonna switch\nmy view a little bit.\n\n165\n00:08:55.590 --> 00:08:56.180\nIn this case,\n\n166\n00:08:56.180 --> 00:08:59.470\nI think it might make a little more\nsense to have a longer pane here.\n\n167\n00:08:59.470 --> 00:09:01.690\nSo, I'll move my script\npane over to the side.\n\n168\n00:09:02.800 --> 00:09:06.270\nSo, here's what we just ran,\nthis is the switch statement.\n\n169\n00:09:06.270 --> 00:09:08.900\nHere's the exact same code.\n\n170\n00:09:08.900 --> 00:09:10.360\nIn an if statement.\n\n171\n00:09:10.360 --> 00:09:11.640\nWhich one is easier to read?\n\n172\n00:09:11.640 --> 00:09:12.900\n&gt;&gt; Yeah, for sure.\n\n173\n00:09:12.900 --> 00:09:13.490\nThe top one, yeah.\n\n174\n00:09:13.490 --> 00:09:16.670\n&gt;&gt; It's really easy to see, hey,\nif it's a two it's gonna do this oops and\n\n175\n00:09:16.670 --> 00:09:18.270\nI just rearranged things again.\n\n176\n00:09:18.270 --> 00:09:20.360\nAnd if it's a three this\nis what it's gonna do.\n\n177\n00:09:20.360 --> 00:09:25.210\nHere I've really gotta stop, and\nlook, and find my conditions.\n\n178\n00:09:25.210 --> 00:09:29.860\nAnd notice,\nI have to run the test over and over for\n\n179\n00:09:29.860 --> 00:09:31.930\neach one of those values, right?\n\n180\n00:09:31.930 --> 00:09:36.340\nSo, I've got dollar sign a in here four\ntimes, I've got equals in here four time,\n\n181\n00:09:36.340 --> 00:09:37.160\nhere, right?\n\n182\n00:09:37.160 --> 00:09:38.250\nI don't have any of that.\n\n183\n00:09:38.250 --> 00:09:41.920\nI've just got the dollar sign a ones and\nall four possibilities, and\n\n184\n00:09:41.920 --> 00:09:42.440\nwe're good to go.\n\n185\n00:09:42.440 --> 00:09:46.960\nSo, hopefully that kinda shows you,\nor starts to demonstrate how switches\n\n186\n00:09:46.960 --> 00:09:51.860\ncan take the place of long complex\nif else if type statements.\n\n187\n00:09:53.860 --> 00:09:57.630\nAll right, now, so just like it's though\nwe got some other things we wanna\n\n188\n00:09:57.630 --> 00:10:02.600\nthink about, cuz so far all we've seen is\nwhat it's going to do if it has returned,\n\n189\n00:10:02.600 --> 00:10:06.070\nor if one of these values is true.\n\n190\n00:10:06.070 --> 00:10:08.060\nWhat if none of them are true?\n\n191\n00:10:08.060 --> 00:10:09.540\nCan I do anything?\n\n192\n00:10:09.540 --> 00:10:12.470\nLike with the if statement,\nI've got the else block, right,\n\n193\n00:10:12.470 --> 00:10:14.320\nthat very last block else.\n\n194\n00:10:14.320 --> 00:10:17.790\nNone of these other conditions have\nrang true, so I want to do this.\n\n195\n00:10:17.790 --> 00:10:19.370\nWe can do that in a switch.\n\n196\n00:10:19.370 --> 00:10:21.524\nIt's called default, right?\n\n197\n00:10:21.524 --> 00:10:25.084\nSo, I can have as many conditions\nas I want to check for, but\n\n198\n00:10:25.084 --> 00:10:27.290\nI can include a default.\n\n199\n00:10:27.290 --> 00:10:31.700\nAnd default is if non of these other\nconditions match, we'll go ahead and\n\n200\n00:10:31.700 --> 00:10:33.590\nexecute the default.\n\n201\n00:10:33.590 --> 00:10:34.130\nRight?\n\n202\n00:10:34.130 --> 00:10:38.330\nSo, let's set a to something\nother than what's on my list.\n\n203\n00:10:38.330 --> 00:10:40.923\nLet me say eight equals five.\n\n204\n00:10:40.923 --> 00:10:43.220\nAnd then, I've got four conditions here.\n\n205\n00:10:43.220 --> 00:10:46.760\nOne, two, three, four which it\nshouldn't match any of those.\n\n206\n00:10:46.760 --> 00:10:54.410\nSo, we'll execute, and I get dollar sign\na does not match any conditions, right?\n\n207\n00:10:54.410 --> 00:10:58.100\nSo, none of these worked and\nit went ahead and used the default.\n\n208\n00:10:58.100 --> 00:11:02.140\nVery cool, so just like the else\nplus in our if statement.\n\n209\n00:11:04.073 --> 00:11:06.288\nHere's where we start to differ, and\n\n210\n00:11:06.288 --> 00:11:11.134\nwe start to see a little bit of the power\nof switch, and how it's more flexible, and\n\n211\n00:11:11.134 --> 00:11:14.400\nmore powerful even than an if,\nin some regards.\n\n212\n00:11:14.400 --> 00:11:17.310\nAnd that is multiple matches.\n\n213\n00:11:17.310 --> 00:11:19.490\nRemember what happens\nwith the if statement.\n\n214\n00:11:19.490 --> 00:11:24.010\nWe can have several conditions that\nmight ring true, but the very first\n\n215\n00:11:24.010 --> 00:11:28.220\ncondition that rings true it executes that\nblock, and it ends your if statement.\n\n216\n00:11:28.220 --> 00:11:30.060\nIt jumps out of the if loop and\n\n217\n00:11:30.060 --> 00:11:34.586\nin to the next line of code in your\nscript, or whatever you're doing,\n\n218\n00:11:34.586 --> 00:11:38.905\nwhich is why when we're writing\nthose ifs we have to be conscious.\n\n219\n00:11:38.905 --> 00:11:43.415\nAnd put the most important conditions\nat the top and work our way down,\n\n220\n00:11:43.415 --> 00:11:46.626\nbecause we know that once\none of those comes true,\n\n221\n00:11:46.626 --> 00:11:49.810\nI'm gonna lose the rest\nof my if statement.\n\n222\n00:11:49.810 --> 00:11:54.280\nI'm gonna exit that loop and none of those\nother conditions will ever be checked.\n\n223\n00:11:54.280 --> 00:11:57.450\nSo, that's one of the issues\nI run into with an if.\n\n224\n00:11:57.450 --> 00:12:00.050\nWith a switch, that's not the case.\n\n225\n00:12:00.050 --> 00:12:04.240\nAll conditions will be\ntried with a switch, right?\n\n226\n00:12:04.240 --> 00:12:05.810\nSo, even one, by default,\n\n227\n00:12:05.810 --> 00:12:09.460\nthe way we got it written here,\nall conditions will be tried.\n\n228\n00:12:09.460 --> 00:12:13.920\nSo, we can actually get more\nthan one code block to execute.\n\n229\n00:12:15.050 --> 00:12:19.080\nSo, notice here I've got the condition\none, two, three, four, and\n\n230\n00:12:19.080 --> 00:12:21.220\nthen I added another three.\n\n231\n00:12:21.220 --> 00:12:24.180\nSo, I got another one that says,\nhey, if it's three, do this.\n\n232\n00:12:25.200 --> 00:12:29.970\nLet's set A to three and see what happens.\n\n233\n00:12:33.100 --> 00:12:36.523\nDrum roll, there we go.\n\n234\n00:12:36.523 --> 00:12:37.675\n&gt;&gt; That's my cue [LAUGH].\n\n235\n00:12:37.675 --> 00:12:40.040\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm waiting to see what happens.\n\n236\n00:12:40.040 --> 00:12:40.650\n&gt;&gt; You're tight?\n\n237\n00:12:40.650 --> 00:12:44.190\nOn the edge of your sit,\nall right let's do it here we go.\n\n238\n00:12:44.190 --> 00:12:49.820\nAnd look, I get both results\nI get three and three again.\n\n239\n00:12:49.820 --> 00:12:53.300\nSo, these rang too, so\nit executed that block, but once it did,\n\n240\n00:12:53.300 --> 00:12:55.980\nit moved on to this one, and\nsaid, I hope it's not four.\n\n241\n00:12:55.980 --> 00:12:58.560\nWait it is three,\nlet me execute this block.\n\n242\n00:12:58.560 --> 00:12:59.450\n&gt;&gt; Okay.\n\n243\n00:12:59.450 --> 00:13:03.360\n&gt;&gt; So,\na little switch from our if statements,\n\n244\n00:13:03.360 --> 00:13:06.820\nunintended, now we are gonna\ntry every condition.\n\n245\n00:13:06.820 --> 00:13:11.910\nEven if one has already rang true, we'll\ncontinue to try all the conditions and\n\n246\n00:13:11.910 --> 00:13:15.180\nwe will execute all of them,\nthat ring true.\n\n247\n00:13:15.180 --> 00:13:20.070\nOkay, so very, very powerful\nwhen it comes to these switches.\n\n248\n00:13:20.070 --> 00:13:24.740\nThere are going to be times however that\nare don't want that to happen, right?\n\n249\n00:13:24.740 --> 00:13:29.740\nOnce one of them comes through,\nI want to stop analyzing I do not want to\n\n250\n00:13:29.740 --> 00:13:34.650\nimagine anymore conditions,\nI want to exit those switch at this point.\n\n251\n00:13:36.970 --> 00:13:42.040\nIn that case, we have to use\nthe key word break, all right.\n\n252\n00:13:42.040 --> 00:13:47.090\nSo, break says leave this loop,\nthat current loop that you're in,\n\n253\n00:13:47.090 --> 00:13:51.450\nin our case its gonna be the switch, or\nI can say contract really its kind of\n\n254\n00:13:51.450 --> 00:13:54.830\na loop, we're gonna leave this code and\nmove on.\n\n255\n00:13:54.830 --> 00:13:57.350\nSo, if there's anything\nafter it this would execute.\n\n256\n00:13:58.460 --> 00:14:02.900\nAfter the closing brace for\nmy switch statement.\n\n257\n00:14:02.900 --> 00:14:07.415\n&gt;&gt; So, what made you determine that\nthis was kind of a loop compared to with\n\n258\n00:14:07.415 --> 00:14:08.629\nthe terminology?\n\n259\n00:14:08.629 --> 00:14:09.790\nI just want to make sure because I'm not.\n\n260\n00:14:09.790 --> 00:14:11.410\n&gt;&gt; Yeah, it's probably not.\n\n261\n00:14:11.410 --> 00:14:13.170\nIt's not really a loop.\n\n262\n00:14:13.170 --> 00:14:14.070\n&gt;&gt; Like what would you do?\n\n263\n00:14:14.070 --> 00:14:14.990\nWhat's a loop?\n\n264\n00:14:14.990 --> 00:14:15.940\n&gt;&gt; A loop usually means,\n\n265\n00:14:15.940 --> 00:14:19.093\nI'm going to go through that code block\nmore than once over and over again.\n\n266\n00:14:19.093 --> 00:14:20.480\n&gt;&gt; Okay.\n\n267\n00:14:20.480 --> 00:14:23.780\n&gt;&gt; Until a condition is true, or\nfalse and we're gonna look at that.\n\n268\n00:14:23.780 --> 00:14:27.230\nI call it a loop simply,\nbecause we're kinda going through.\n\n269\n00:14:27.230 --> 00:14:28.925\n&gt;&gt; Cycling?\n&gt;&gt; Yeah, it's not really a loop,\n\n270\n00:14:28.925 --> 00:14:31.204\nit really isn't,\nI probably shouldn't use that term.\n\n271\n00:14:31.204 --> 00:14:32.710\n&gt;&gt; Enumerating.\n\n272\n00:14:32.710 --> 00:14:35.740\n&gt;&gt; Yes, we are enumerating\nthrough several options here.\n\n273\n00:14:35.740 --> 00:14:37.770\nBut we're not really looping.\n\n274\n00:14:37.770 --> 00:14:43.130\nCuz we're not going back and\nstarting it again, and again, so yeah.\n\n275\n00:14:43.130 --> 00:14:46.460\nAlthough, my next one we might\nget away and call it a loop.\n\n276\n00:14:46.460 --> 00:14:48.410\n&gt;&gt; Okay.\n&gt;&gt; We'll let you guys see what you think.\n\n277\n00:14:48.410 --> 00:14:50.914\nWe'll ask Cherokee here and\nshe was she thinks if it's a loop.\n\n278\n00:14:50.914 --> 00:14:54.000\n&gt;&gt; Yeah. [LAUGH] &gt;&gt; All right, so\nmultiple matches with a break.\n\n279\n00:14:54.000 --> 00:14:57.600\nSo, now same code that we just ran,\nI've got three and\n\n280\n00:14:57.600 --> 00:14:59.960\nit's supposed to print out three.\n\n281\n00:14:59.960 --> 00:15:03.040\nAnd then, I get three, and\nit should do three again.\n\n282\n00:15:03.040 --> 00:15:04.830\nThis time we're gonna dump a break.\n\n283\n00:15:04.830 --> 00:15:07.008\nNotice, I've got a semicolon there,\n\n284\n00:15:07.008 --> 00:15:10.113\ncuz I'm not using line breaks\nto separate my commands.\n\n285\n00:15:10.113 --> 00:15:13.620\nSo, I dumped in a semicolon, and\nthen just the key word break.\n\n286\n00:15:13.620 --> 00:15:17.090\nAt this point A should still equal three,\nright?\n\n287\n00:15:17.090 --> 00:15:22.993\nThe A still equals three, so\nwe're gonna run this code.\n\n288\n00:15:22.993 --> 00:15:26.405\nAnd as I get three, but\nI do not get the three again.\n\n289\n00:15:26.405 --> 00:15:28.190\n&gt;&gt; Three again.\n\n290\n00:15:28.190 --> 00:15:30.310\n&gt;&gt; Exactly, all right?\n\n291\n00:15:30.310 --> 00:15:34.080\nLet me see if I did the, yeah, I did that,\nI'll show you that in a minute.\n\n292\n00:15:34.080 --> 00:15:34.840\nSo, that's your break.\n\n293\n00:15:34.840 --> 00:15:37.710\nIf you need to exit out after\none of the conditions is true.\n\n294\n00:15:37.710 --> 00:15:39.540\nWith ifs we don't have\nto worry about that,\n\n295\n00:15:39.540 --> 00:15:43.210\nbecause as soon as one of the conditions\nis true, it executes that code block, and\n\n296\n00:15:43.210 --> 00:15:44.970\nthen that exits my if statement.\n\n297\n00:15:44.970 --> 00:15:48.380\nWith switches though,\nbecause of the way it runs by default,\n\n298\n00:15:48.380 --> 00:15:52.040\nit goes through every condition,\nwhich can definitely by a good thing.\n\n299\n00:15:52.040 --> 00:15:57.008\nWe also need the ability to stop\nthat behavior and exit out the,\n\n300\n00:15:57.008 --> 00:16:01.908\nI keep wanting to say loop,\nexit that construct if we want to.\n\n301\n00:16:01.908 --> 00:16:03.739\n[CROSSTALK]\n&gt;&gt; And that's pretty important,\n\n302\n00:16:03.739 --> 00:16:07.086\nunderstanding, or\nanticipating the outcome, the results, and\n\n303\n00:16:07.086 --> 00:16:09.870\nknowing the difference\nbetween those two as well.\n\n304\n00:16:09.870 --> 00:16:11.120\nAbsolutely, absolutely.\n\n305\n00:16:11.120 --> 00:16:17.013\nIt's a little interesting,\nthe fact that could I have done this?\n\n306\n00:16:17.013 --> 00:16:21.632\nCould I have taken this,\nand put this here?\n\n307\n00:16:23.433 --> 00:16:26.030\nRight, and, actually,\nI probably don't even need that.\n\n308\n00:16:26.030 --> 00:16:30.150\nTake that out, take that out, and\nthen take this out altogether, and\n\n309\n00:16:30.150 --> 00:16:33.305\njust both of those\nthings right here,right?\n\n310\n00:16:33.305 --> 00:16:39.330\nWhy am I testing for three a second time,\nand but there are going be\n\n311\n00:16:39.330 --> 00:16:43.070\nan I'll try to come up with some, I don't\nhave any of the top of my head, cuz you\n\n312\n00:16:43.070 --> 00:16:48.440\ncan definitely do multiple statements per\nblock, just like I can with if's, right?\n\n313\n00:16:48.440 --> 00:16:50.670\nBut there might be times when for\none reason or\n\n314\n00:16:50.670 --> 00:16:54.020\nanother, you wanted to go through,\nand see if it's a 4,\n\n315\n00:16:54.020 --> 00:16:58.840\nand then go back to see if it's 3 again,\nI mean I probably can think of somethings,\n\n316\n00:16:58.840 --> 00:17:03.070\nand I'll work on that for\nour next viewer's episode.\n\n317\n00:17:03.070 --> 00:17:03.690\n&gt;&gt; You do that.\n\n318\n00:17:03.690 --> 00:17:05.580\nI'll hold you to it.\n\n319\n00:17:05.580 --> 00:17:06.080\n&gt;&gt; I do a redo.\n\n320\n00:17:06.080 --> 00:17:10.333\nWhere did it go?\n\n321\n00:17:10.333 --> 00:17:12.310\n&gt;&gt; [LAUGH]\n&gt;&gt; Either.\n\n322\n00:17:12.310 --> 00:17:13.210\n&gt;&gt; No now what do I do?\n\n323\n00:17:13.210 --> 00:17:14.230\n&gt;&gt; Are you a magician now?\n\n324\n00:17:14.230 --> 00:17:17.010\n&gt;&gt; I've lost it let's put\nthat back to a thre,e and\n\n325\n00:17:17.010 --> 00:17:19.570\nwhere was my multiple\nmatches with a break?\n\n326\n00:17:19.570 --> 00:17:20.810\nThere we go.\n\n327\n00:17:20.810 --> 00:17:24.780\nAll right, so\nthat was multiple matches with a break.\n\n328\n00:17:24.780 --> 00:17:27.800\nNow I said,\nI started to say it's not really a loop,\n\n329\n00:17:27.800 --> 00:17:31.360\nbecause I'm only passing one through here,\nbut I stopped myself,\n\n330\n00:17:31.360 --> 00:17:36.720\nbecause I remembered wait, we can pass\nmore than one item through the switch,\n\n331\n00:17:36.720 --> 00:17:40.070\nin which case it is kind of\nsort of behaving like a loop.\n\n332\n00:17:40.070 --> 00:17:42.678\nAnd here's how it's gonna, work and\nyou tell me if it calls a loop.\n\n333\n00:17:42.678 --> 00:17:45.380\n&gt;&gt; Okay.\n\n334\n00:17:45.380 --> 00:17:49.140\n&gt;&gt; But-\n&gt;&gt; I mean, like the, I guess this Webster,\n\n335\n00:17:49.140 --> 00:17:50.640\ndo you technical definitions?\n\n336\n00:17:50.640 --> 00:17:51.150\n&gt;&gt; Yeah.\n\n337\n00:17:51.150 --> 00:17:53.777\n&gt;&gt; By [INAUDIBLE] Webster\nthe portion of it Really see.\n\n338\n00:17:53.777 --> 00:17:55.220\n&gt;&gt; [LAUGH]\n&gt;&gt; Right?\n\n339\n00:17:55.220 --> 00:17:58.830\nA very, very common thing that we're\ngonna need to do, is pass arrays and\n\n340\n00:17:58.830 --> 00:18:01.560\nwe want to be able to,\nour datas are in the rack,\n\n341\n00:18:01.560 --> 00:18:05.150\nbecause very seldom are we working\nwith a single object, right?\n\n342\n00:18:05.150 --> 00:18:09.630\nI've got a list of computer names, or\nI've got a whole list of services, or\n\n343\n00:18:09.630 --> 00:18:13.350\nprocesses, or IP addresses, or\nwhatever it is that I'm working with.\n\n344\n00:18:13.350 --> 00:18:14.530\nI've got multiples.\n\n345\n00:18:14.530 --> 00:18:16.990\nAnd how do we store multiple items?\n\n346\n00:18:16.990 --> 00:18:19.180\nIn an array or a hash table.\n\n347\n00:18:19.180 --> 00:18:22.510\nVery commonly to put them,\nif they're just values, in an array.\n\n348\n00:18:22.510 --> 00:18:24.820\nIf it's a key value pair,\nwe'd use a hash table.\n\n349\n00:18:24.820 --> 00:18:27.245\nSo I can pass arrays through.\n\n350\n00:18:27.245 --> 00:18:29.570\nNow, I didn't create an array and\nstore it in a variable.\n\n351\n00:18:29.570 --> 00:18:32.370\nWhat I did, was actually create\ntwo different variables, but\n\n352\n00:18:32.370 --> 00:18:35.479\nat the same thing, right, this is\nbasically a little mini array here.\n\n353\n00:18:36.600 --> 00:18:42.670\nAnd what its gonna do, is it is going to\ncheck both of these against the condition,\n\n354\n00:18:42.670 --> 00:18:44.940\nbut the way it's gonna do it,\nwhat we will have to remember,\n\n355\n00:18:44.940 --> 00:18:49.210\nis a first takes this one, and\nchecks it against all condition.\n\n356\n00:18:49.210 --> 00:18:54.370\nThen it goes back and grabs this one,\nand check it against all condition.\n\n357\n00:18:54.370 --> 00:18:56.510\nRight, which is why I say\nit's kind of looping,\n\n358\n00:18:56.510 --> 00:19:00.390\ncuz we are going back up and\nthrough the whole structure, all right?\n\n359\n00:19:00.390 --> 00:19:01.620\nBut let's see how this works.\n\n360\n00:19:01.620 --> 00:19:03.870\nLet's go back up, and\nfind my variable assignment.\n\n361\n00:19:03.870 --> 00:19:09.340\nSo I got a=3, let's just verify that,\nand b=2, we'll verify that,\n\n362\n00:19:09.340 --> 00:19:14.160\nand then we'll come down\nhere to my statement.\n\n363\n00:19:14.160 --> 00:19:18.060\nAnd we'll see what happens,\nis it gonna blow up or\n\n364\n00:19:18.060 --> 00:19:19.370\nwe're gonna get some really cool results?\n\n365\n00:19:21.050 --> 00:19:21.600\nRight?\n\n366\n00:19:21.600 --> 00:19:22.150\nAnd there we go.\n\n367\n00:19:22.150 --> 00:19:26.360\nSo remember, a was 30, so\nas the value of a is three,\n\n368\n00:19:26.360 --> 00:19:29.490\nit comes down here it says not one,\nnot two, it's three.\n\n369\n00:19:29.490 --> 00:19:32.150\nSo I'm gonna print three,\nwhich I did right there.\n\n370\n00:19:32.150 --> 00:19:33.890\nThen it continues on.\n\n371\n00:19:33.890 --> 00:19:35.340\nThree is not four.\n\n372\n00:19:35.340 --> 00:19:36.740\nWait three is three.\n\n373\n00:19:36.740 --> 00:19:37.960\nThree again.\n\n374\n00:19:37.960 --> 00:19:41.610\nOut of conditions, back up,\nlet me grab the second variable.\n\n375\n00:19:41.610 --> 00:19:42.310\n&gt;&gt; B is equal to two.\n\n376\n00:19:42.310 --> 00:19:43.080\n&gt;&gt; B was equal to two.\n\n377\n00:19:43.080 --> 00:19:44.390\nIt's not one, it is two.\n\n378\n00:19:44.390 --> 00:19:44.965\nLet me Print two.\n\n379\n00:19:44.965 --> 00:19:46.055\n&gt;&gt; Yeah two.\n&gt;&gt; It's not three,\n\n380\n00:19:46.055 --> 00:19:47.425\nit's not four, it's not five.\n\n381\n00:19:47.425 --> 00:19:48.125\nOr three again.\n\n382\n00:19:48.125 --> 00:19:50.375\n&gt;&gt; So yeah,\nit's not like an infinite loop.\n\n383\n00:19:50.375 --> 00:19:53.885\nIt's just checking those two variables,\nand then providing the result.\n\n384\n00:19:53.885 --> 00:19:55.065\n&gt;&gt; Yeah, exactly right.\n\n385\n00:19:55.065 --> 00:19:56.865\nAnd don't forget, when it doesn't stop,\n\n386\n00:19:56.865 --> 00:20:00.615\nlike when we went through the second time,\nb is 2, it's not 1.\n\n387\n00:20:00.615 --> 00:20:03.555\nIt is 2 I'll execute that,\n[INAUDIBLE] it's not three, it's not four,\n\n388\n00:20:03.555 --> 00:20:05.300\nit's not three.\n\n389\n00:20:05.300 --> 00:20:06.830\nJust don't forget that, without the break,\n\n390\n00:20:06.830 --> 00:20:10.980\nit will continue to check all conditions,\nall right?\n\n391\n00:20:10.980 --> 00:20:15.310\nSo very cool,\nI can pass multiple parameters or values,\n\n392\n00:20:15.310 --> 00:20:19.530\ntest values, I should say,\nthrough my switch statement,\n\n393\n00:20:19.530 --> 00:20:23.640\nI almost said select case, I'm starting\nto get the languages confused here.\n\n394\n00:20:23.640 --> 00:20:25.970\nBut, select case is\nbasically the same thing,\n\n395\n00:20:25.970 --> 00:20:30.830\nwhen we get into I think\nDB Script uses select case.\n\n396\n00:20:30.830 --> 00:20:32.665\n&gt;&gt; Okay.\n&gt;&gt; If I'm not mistaken.\n\n397\n00:20:32.665 --> 00:20:33.985\nAnyway, we don't wanna learn that.\n\n398\n00:20:33.985 --> 00:20:35.505\n&gt;&gt; That's right, this PowerShell, right?\n\n399\n00:20:35.505 --> 00:20:36.120\n&gt;&gt; This is PowerShell.\n\n400\n00:20:36.120 --> 00:20:37.925\n&gt;&gt; [LAUGH]\n&gt;&gt; Although it is a great place to start,\n\n401\n00:20:37.925 --> 00:20:38.815\nif you're learning scripting.\n\n402\n00:20:38.815 --> 00:20:39.765\nNot anymore, though.\n\n403\n00:20:39.765 --> 00:20:41.855\nPowerShell is where you wanna be.\n\n404\n00:20:41.855 --> 00:20:44.235\nSo yes, it will check multiple values.\n\n405\n00:20:44.235 --> 00:20:46.785\nWhich is a really cool concept.\n\n406\n00:20:46.785 --> 00:20:48.605\nAll right, now, next thing I wanna do.\n\n407\n00:20:48.605 --> 00:20:54.630\nMultiple test values would break, I bet\nyou Mike it works about the same way.\n\n408\n00:20:54.630 --> 00:20:59.270\nWhen I run into the word break,\nI'm gonna stop, and I'm gonna exit.\n\n409\n00:20:59.270 --> 00:21:01.467\nAnd that's exactly right, but\n\n410\n00:21:01.467 --> 00:21:05.890\nI wanna make sure we understand-\n&gt;&gt; Where or how it breaks?\n\n411\n00:21:05.890 --> 00:21:09.870\n&gt;&gt; Yes.\nThe break is not on a per\n\n412\n00:21:09.870 --> 00:21:11.770\ntest value basis.\n\n413\n00:21:11.770 --> 00:21:16.650\nThe break is on an entire command,\nor the entire switch.\n\n414\n00:21:16.650 --> 00:21:17.850\nSo in other words.\n\n415\n00:21:17.850 --> 00:21:20.260\nWell, let's run it, and\nlet's see what happens.\n\n416\n00:21:20.260 --> 00:21:23.410\nYou guys think for a second,\nwhat am I gonna get over here?\n\n417\n00:21:23.410 --> 00:21:25.550\nThree, three again two,\nis what we got the first time.\n\n418\n00:21:25.550 --> 00:21:29.358\nNow I've gotta break right\nafter the three, right?\n\n419\n00:21:29.358 --> 00:21:32.680\nAnd we know a is equal to three,\nand b is equal to two.\n\n420\n00:21:32.680 --> 00:21:35.560\nAs it goes down, a is equal to three,\nis gonna hit this statement,\n\n421\n00:21:35.560 --> 00:21:38.850\nit gonna hit break, then what?\n\n422\n00:21:38.850 --> 00:21:41.350\n&gt;&gt; I think it's gonna be broken.\n\n423\n00:21:41.350 --> 00:21:42.450\n&gt;&gt; Do you think?\n\n424\n00:21:42.450 --> 00:21:43.350\n&gt;&gt; That's my guess.\n\n425\n00:21:43.350 --> 00:21:46.237\n&gt;&gt; I like it, it sounded good,\nlet's check it.\n\n426\n00:21:46.237 --> 00:21:49.500\nAnd sure enough, I get three.\n\n427\n00:21:49.500 --> 00:21:51.696\nAnd here's what I want to point out,\nright?\n\n428\n00:21:51.696 --> 00:21:56.076\nSo a was three, so it says, it's not one,\nit's not two, it is three, so\n\n429\n00:21:56.076 --> 00:21:57.590\nI'm gonna print three.\n\n430\n00:21:57.590 --> 00:21:58.990\nAnd then I'm going to break.\n\n431\n00:22:00.360 --> 00:22:01.700\nAnd then that's it.\n\n432\n00:22:01.700 --> 00:22:05.610\nIt does not continue to check\na against four or three,\n\n433\n00:22:05.610 --> 00:22:10.980\nit also does not go back, and take\nthe next variable, and test it, right?\n\n434\n00:22:10.980 --> 00:22:15.600\nI might have 15 values that I'm getting\nready to check, but as soon as the first\n\n435\n00:22:15.600 --> 00:22:21.320\none rings true, and runs into a break\nstatement, the rest don't get checked.\n\n436\n00:22:21.320 --> 00:22:22.820\nIt stops right there, so\n\n437\n00:22:22.820 --> 00:22:25.790\nit's a very important thing to keep in the\nback your mind, cuz a lot of people think,\n\n438\n00:22:25.790 --> 00:22:29.510\nokay, well I'm done testing a,\nbecause I found one that matches.\n\n439\n00:22:29.510 --> 00:22:32.620\nBut I still wanna test b,\nor b, or d, or e, or f, or\n\n440\n00:22:32.620 --> 00:22:34.720\nwhatever else I might have in my array.\n\n441\n00:22:34.720 --> 00:22:37.552\n&gt;&gt; So It might be mire beneficial to just\ncreate a separate switch statement for\n\n442\n00:22:37.552 --> 00:22:39.423\nthat, if you wanted to go ahead and\nperform that?\n\n443\n00:22:39.423 --> 00:22:40.830\n&gt;&gt; Might be.\n\n444\n00:22:40.830 --> 00:22:47.710\nProbably what I would end up doing, is\nwrapping this switch inside a four loop or\n\n445\n00:22:47.710 --> 00:22:53.400\na four each, so that each value would\nbe sent into the switch on its own.\n\n446\n00:22:53.400 --> 00:22:55.845\nAnd I've had breaks on every\nline inside that switch,\n\n447\n00:22:55.845 --> 00:22:58.129\nso as soon as it match one it would exit,\nbut\n\n448\n00:22:58.129 --> 00:23:01.796\nthen it would jump out of the switch and\nback into the nested, the outer wrapping,\n\n449\n00:23:01.796 --> 00:23:04.370\nbut we haven't got [CROSSTALK]\n&gt;&gt; That's say.\n\n450\n00:23:04.370 --> 00:23:08.060\nI'm not quite sure about that, because\nwe've only done if and switch statements.\n\n451\n00:23:08.060 --> 00:23:09.820\n&gt;&gt; Yeah.\n&gt;&gt; So we'll have to stay tuned though.\n\n452\n00:23:09.820 --> 00:23:10.655\n&gt;&gt; Yeah, exactly.\n&gt;&gt; [LAUGH]\n\n453\n00:23:10.655 --> 00:23:11.294\n&gt;&gt; So, we'll have\n\n454\n00:23:11.294 --> 00:23:12.710\nto come back for that part.\n\n455\n00:23:12.710 --> 00:23:15.070\nAll right, I am just about done though.\n\n456\n00:23:15.070 --> 00:23:17.460\nSo again,\nimportant thing is once it hits a break,\n\n457\n00:23:17.460 --> 00:23:22.510\nit's not breaking the test itself,\nits breaking the entire switch statement.\n\n458\n00:23:22.510 --> 00:23:23.472\nWe're done with the switch.\n\n459\n00:23:23.472 --> 00:23:26.500\nAll right, last thing I wanna\nshow you here with a switch,\n\n460\n00:23:26.500 --> 00:23:30.530\nis we can also use rejects, right?\n\n461\n00:23:30.530 --> 00:23:32.370\nOur regular expressions in here.\n\n462\n00:23:32.370 --> 00:23:36.420\nNow I wrote a very simple one, but\nnotice I've got my conditions one, two,\n\n463\n00:23:36.420 --> 00:23:38.570\nthree, four, three again, and\n\n464\n00:23:38.570 --> 00:23:41.920\nthis condition looks a little different\nthan what we've been doing before.\n\n465\n00:23:41.920 --> 00:23:46.500\nI've been keeping these switches very\nsimple, so that we can get the syntax and\n\n466\n00:23:46.500 --> 00:23:47.610\nthe concept down.\n\n467\n00:23:47.610 --> 00:23:48.760\n&gt;&gt; Well thank you for that.\n\n468\n00:23:48.760 --> 00:23:50.455\n&gt;&gt; You're welcome, hopefully it's helped.\n\n469\n00:23:50.455 --> 00:23:53.470\n&gt;&gt; But I do wanna point out,\n\n470\n00:23:53.470 --> 00:23:58.340\nthat these don't have to be integers,\nright?\n\n471\n00:23:58.340 --> 00:23:58.970\nLike I have here.\n\n472\n00:23:58.970 --> 00:24:02.365\nThis could be strings, and\nI'm passing in a string, and\n\n473\n00:24:02.365 --> 00:24:07.549\nI'm matching it against other strings, or\nas I've got here, a regular expression.\n\n474\n00:24:07.549 --> 00:24:09.620\nI can have objects over here.\n\n475\n00:24:09.620 --> 00:24:12.214\nI mean, it can get really\ncrazy inside these switches.\n\n476\n00:24:12.214 --> 00:24:17.835\nThey're extremely Powerful stuff, so-\n&gt;&gt; I thought funny earlier, when you were\n\n477\n00:24:17.835 --> 00:24:23.430\ntalking about different components within\npower shell, using the word powerful.\n\n478\n00:24:23.430 --> 00:24:27.527\nAnd it's like, I always try to\nreplace the word powerful with robust,\n\n479\n00:24:27.527 --> 00:24:29.246\nbecause I feel so redundant.\n\n480\n00:24:29.246 --> 00:24:30.384\n&gt;&gt; Right?\n[LAUGH] I think\n\n481\n00:24:30.384 --> 00:24:32.150\nMicrosoft did that on purpose.\n\n482\n00:24:32.150 --> 00:24:32.710\n&gt;&gt; I know right.\n\n483\n00:24:32.710 --> 00:24:35.260\n&gt;&gt; You need a power shell, it's powerful.\n\n484\n00:24:35.260 --> 00:24:36.430\nWe can do powerful things.\n\n485\n00:24:36.430 --> 00:24:38.120\n&gt;&gt; But it's just so robust.\n\n486\n00:24:38.120 --> 00:24:38.764\n&gt;&gt; It is robust.\n\n487\n00:24:38.764 --> 00:24:42.654\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] All right, so here,\n\n488\n00:24:42.654 --> 00:24:47.982\nthe value that I want to test\nis actually a string, right?\n\n489\n00:24:47.982 --> 00:24:52.490\nSo once the switch starts,\nit says is that string match this?\n\n490\n00:24:52.490 --> 00:24:56.424\nWe'll know well one an integer\ndoesn't match by string,\n\n491\n00:24:56.424 --> 00:25:01.979\nnone of these are gonna match, but down\nhere, I have this POW ash script, right?\n\n492\n00:25:01.979 --> 00:25:06.975\nInside close meaning it's a string,\nand we know that\n\n493\n00:25:06.975 --> 00:25:13.330\nrepresents zero to any number of\ncharacters, so how would match PowerShell?\n\n494\n00:25:13.330 --> 00:25:17.170\nBecause I've got POW, and\nthen any number of characters after that.\n\n495\n00:25:17.170 --> 00:25:19.380\nIt's case end sensitive by default.\n\n496\n00:25:19.380 --> 00:25:20.540\nSo we should be good to go.\n\n497\n00:25:20.540 --> 00:25:24.030\nBut then just like normal, here's\nthe code block that I want to execute,\n\n498\n00:25:24.030 --> 00:25:27.290\nif this is true, and\nI really did a bad job here.\n\n499\n00:25:27.290 --> 00:25:32.340\nI should go back in, and\nwhy is my keyboard not responding?\n\n500\n00:25:32.340 --> 00:25:33.663\nNow it responds, good.\n\n501\n00:25:37.905 --> 00:25:38.670\nInteresting.\n\n502\n00:25:38.670 --> 00:25:42.470\nConsidering hit the caps lock key,\nthinking it's tab anyway.\n\n503\n00:25:42.470 --> 00:25:46.400\nAny who, so let's see what happens here,\n\n504\n00:25:46.400 --> 00:25:50.840\nI'm going to select that, execute it, and\n\n505\n00:25:50.840 --> 00:25:57.370\nI get a whole lot of nothing at that\npoint, why not, what did I break?\n\n506\n00:25:57.370 --> 00:26:00.150\nI think I told you my\nkeyboard wasn't responding,\n\n507\n00:26:00.150 --> 00:26:02.820\nsomething is hung up somewhere.\n\n508\n00:26:02.820 --> 00:26:08.256\nDid I miss a\n&gt;&gt; If all else fails, try it again.\n\n509\n00:26:08.256 --> 00:26:10.197\n[LAUGH]\n&gt;&gt; Yeah absolutely, and\n\n510\n00:26:10.197 --> 00:26:11.860\nit's actually not working.\n\n511\n00:26:13.010 --> 00:26:13.620\nIt's interesting.\n\n512\n00:26:13.620 --> 00:26:14.640\nIt's not case sensitive.\n\n513\n00:26:14.640 --> 00:26:17.743\nSo, let's make that of capital P,\njust in case.\n\n514\n00:26:20.983 --> 00:26:22.110\nThat, I forgot.\n\n515\n00:26:22.110 --> 00:26:25.245\nI set this up on purpose, so that you\nwould see a common mistake and then-\n\n516\n00:26:25.245 --> 00:26:25.790\n&gt;&gt; [LAUGH]\n\n517\n00:26:25.790 --> 00:26:26.420\n&gt;&gt; Guess what I did?\n\n518\n00:26:26.420 --> 00:26:29.060\nI made the common mistake.\n\n519\n00:26:29.060 --> 00:26:30.035\n&gt;&gt; I'm crazy.\n\n520\n00:26:30.035 --> 00:26:30.940\n&gt;&gt; All right, so what's the mistake?\n\n521\n00:26:30.940 --> 00:26:31.560\nI don't see it.\n&gt;&gt; Well, here?\n\n522\n00:26:31.560 --> 00:26:33.730\nYeah, you wouldn't see it,\nbecause we haven't talk about this yet.\n\n523\n00:26:34.820 --> 00:26:37.260\nAnd this looks like it should work.\n\n524\n00:26:37.260 --> 00:26:42.030\nThere is a regx switch, or\noption that I have to pass along with this\n\n525\n00:26:42.030 --> 00:26:45.640\nto tell it to do regx, and\nthat's what I left out.\n\n526\n00:26:45.640 --> 00:26:49.360\nSo if I come in here and do a dash regx.\n\n527\n00:26:50.910 --> 00:26:54.336\nNow,we should get this to function.\n\n528\n00:26:55.789 --> 00:26:56.720\nAnd there we go.\n\n529\n00:26:56.720 --> 00:26:58.580\nIs powerful.\n\n530\n00:26:58.580 --> 00:26:59.420\nLet's print it out.\n\n531\n00:26:59.420 --> 00:27:04.140\nBecause this condition rang true, and\nso it executed this block of code.\n\n532\n00:27:05.180 --> 00:27:06.056\nSo that is the regx.\n\n533\n00:27:06.056 --> 00:27:10.775\nThere's more two switches,\nthis I think gets us started for\n\n534\n00:27:10.775 --> 00:27:14.035\nwhat we need to do,\nas far as learning how to write scripts.\n\n535\n00:27:14.035 --> 00:27:19.845\nBut we can start playing with case,\nthere's another switch called,\n\n536\n00:27:19.845 --> 00:27:23.635\nexact that will make\nsure it's an exact match.\n\n537\n00:27:25.680 --> 00:27:29.040\nSo there's a little more to switches,\nbut I think we're good for now, and\n\n538\n00:27:29.040 --> 00:27:33.020\nwhat we needed to go through as we go\nthrough the rest of these episodes.\n\n539\n00:27:33.020 --> 00:27:34.880\n&gt;&gt; I think it's about time for\nus to go ahead, and\n\n540\n00:27:34.880 --> 00:27:37.495\nswitch our statement\nstyle to something new.\n\n541\n00:27:37.495 --> 00:27:41.580\n&gt;&gt; [LAUGH] I knew you'd get right\nin here before the end of the show.\n\n542\n00:27:41.580 --> 00:27:45.040\n&gt;&gt; But thank you Mike, as always and\nthank you guys for joining us as well.\n\n543\n00:27:45.040 --> 00:27:46.460\nStay tuned.\nYou don't wanna miss what we have\n\n544\n00:27:46.460 --> 00:27:47.090\nheaded your way.\n\n545\n00:27:47.090 --> 00:27:48.740\nFor this show, we'll sign out.\n\n546\n00:27:48.740 --> 00:27:50.240\nI've been your host, Cherokee Boose.\n\n547\n00:27:50.240 --> 00:27:50.898\n&gt;&gt; And I'm Mike Rodrick.\n\n548\n00:27:50.898 --> 00:27:52.827\n&gt;&gt; See you next time here at ITProTV.\n\n549\n00:27:54.786 --> 00:28:00.267\n[MUSIC]\n\n550\n00:28:00.267 --> 00:28:03.252\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "242601528"
        },
        {
          "description": "In this episode, you will learn about For statements. You will learn how to use For statements to create a loop that runs commands in a command block while a specified condition evaluates to true.",
          "length": "1034",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-3-1-for_statements-111317-PGM.00_17_01_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-3-1-for_statements-111317-PGM.00_17_01_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-3-1-for_statements-111317-PGM.00_17_01_19.Still001-sm.jpg",
          "title": "For Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.340 --> 00:00:01.633\nWelcome to ITProTV.\n\n2\n00:00:01.633 --> 00:00:06.140\nI'm your host, Don [CROSSTALK]\n\n3\n00:00:06.140 --> 00:00:08.218\n[MUSIC]\n\n4\n00:00:08.218 --> 00:00:12.150\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:12.150 --> 00:00:14.120\n&gt;&gt; Welcome to your\nPowerShell Scripting series.\n\n6\n00:00:14.120 --> 00:00:16.140\nI'm your show host, Cherokee Boose.\n\n7\n00:00:16.140 --> 00:00:19.090\nIn this episode we'll be taking\na look at for statements, and\n\n8\n00:00:19.090 --> 00:00:23.230\nto help explain what that is, we have Mr.\nMike Rodrick in studio.\n\n9\n00:00:23.230 --> 00:00:24.180\nHow's it going today, Mike.\n\n10\n00:00:24.180 --> 00:00:25.080\n&gt;&gt; It's going great Cherokee.\n\n11\n00:00:25.080 --> 00:00:27.520\nThanks for having me back and\nexcited to be here as always, and yeah,\n\n12\n00:00:27.520 --> 00:00:31.840\nwe've got more, say constructs or\n\n13\n00:00:31.840 --> 00:00:36.000\ncontrol structures, or for statements in\nthis case, is what we're gonna do, right?\n\n14\n00:00:36.000 --> 00:00:39.660\nWe've already taken a look at a few,\nwe looked at, what did we look at?\n\n15\n00:00:39.660 --> 00:00:43.519\nWe looked at four and was that it?\n\n16\n00:00:43.519 --> 00:00:44.311\nIs that all we've done so far?\n\n17\n00:00:44.311 --> 00:00:46.491\n&gt;&gt; If, ands [LAUGH]\n&gt;&gt; Yeah, we did ifs.\n\n18\n00:00:46.491 --> 00:00:47.774\n&gt;&gt; And Switch.\n\n19\n00:00:47.774 --> 00:00:48.690\n&gt;&gt; Switch.\n\n20\n00:00:48.690 --> 00:00:49.361\n&gt;&gt; Yeah that's right.\n\n21\n00:00:49.361 --> 00:00:50.248\n[LAUGH]\n&gt;&gt; Yeah, so\n\n22\n00:00:50.248 --> 00:00:52.020\nwe've got a few of them under our belt.\n\n23\n00:00:52.020 --> 00:00:54.870\nWe still got a couple more to go\nbefore we really get into starting\n\n24\n00:00:54.870 --> 00:00:57.530\nwriting some scripts, so\nthat's what we're gonna do.\n\n25\n00:00:57.530 --> 00:01:00.340\nAgain, I think in our previous\nepisode we looked at for-each.\n\n26\n00:01:00.340 --> 00:01:06.150\nAnd we said that a for-each is really\ngreat for iterating through every object.\n\n27\n00:01:06.150 --> 00:01:08.180\nWhen you have an array or\nsomething like that.\n\n28\n00:01:08.180 --> 00:01:14.170\nYou're just simply saying,\nfor-each items in this collection do this.\n\n29\n00:01:14.170 --> 00:01:17.730\nRight, and so\nit's very good at cycling through.\n\n30\n00:01:17.730 --> 00:01:21.020\nWe don't have to worry about keeping\ntrack of what item we're on.\n\n31\n00:01:21.020 --> 00:01:25.190\nIf it's a 15 element array or\na 25 element array, doesn't matter.\n\n32\n00:01:25.190 --> 00:01:27.740\nIt's gonna go through each one of them and\nperform those actions or\n\n33\n00:01:27.740 --> 00:01:30.400\ndo whatever it is that we're trying to do.\n\n34\n00:01:30.400 --> 00:01:36.360\nA for loop or a for statement allows\nme to be a little more specific or\n\n35\n00:01:36.360 --> 00:01:40.990\nto go through a subset\nof items in an array or\n\n36\n00:01:40.990 --> 00:01:44.410\nperform an action just on certain items.\n\n37\n00:01:44.410 --> 00:01:46.590\nSo that is what we wanna\ntake a look at today, so\n\n38\n00:01:46.590 --> 00:01:48.150\nlet's take a look at my screen here.\n\n39\n00:01:48.150 --> 00:01:51.324\nAnd we'll start with our basic\nsyntax as we usually do.\n\n40\n00:01:51.324 --> 00:01:53.210\nI've got my screen kind of flip-flopped.\n\n41\n00:01:53.210 --> 00:01:56.310\nMakes a little more sense I\nthink while we're doing this.\n\n42\n00:01:56.310 --> 00:01:58.250\nI've got our syntax up at the top.\n\n43\n00:01:58.250 --> 00:02:01.310\nAnd it starts with a keyword for, right?\n\n44\n00:02:01.310 --> 00:02:05.140\nAnd then you have open parenthesis, and\nthen this is just the syntax, right,\n\n45\n00:02:05.140 --> 00:02:09.112\nso don't look at the greater than,\nless than symbols or things like that.\n\n46\n00:02:09.112 --> 00:02:11.990\nWe're gonna have a init initializer,\n\n47\n00:02:11.990 --> 00:02:16.162\na counter basically that we're gonna\nuse as we go through our for loop.\n\n48\n00:02:16.162 --> 00:02:19.370\nWe're gonna have a condition, right,\n\n49\n00:02:19.370 --> 00:02:22.840\nthat helps me control how many\ntimes I go through my loop.\n\n50\n00:02:22.840 --> 00:02:27.339\nAnd then my repeat is what\nwe're gonna use to increment or\n\n51\n00:02:27.339 --> 00:02:31.853\nto decide how we are stepping\nthrough our for statement.\n\n52\n00:02:31.853 --> 00:02:36.610\nAnd then we've got our close parenthesis,\nopen brace, our statement list and\n\n53\n00:02:36.610 --> 00:02:37.960\nthen our close brace.\n\n54\n00:02:37.960 --> 00:02:42.982\nSo that's the basic syntax array\nof what we're gonna call a for\n\n55\n00:02:42.982 --> 00:02:44.891\nloop or for statement.\n\n56\n00:02:44.891 --> 00:02:47.110\nSo I have an example here.\n\n57\n00:02:47.110 --> 00:02:52.880\nLet's take a look at this one,\nI've got for ($i=0.\n\n58\n00:02:52.880 --> 00:02:55.490\nSo, I'm initializing this\nlittle variable here.\n\n59\n00:02:55.490 --> 00:02:59.150\nWell, I didn't declare it outside,\nalthough you can, with for loops.\n\n60\n00:02:59.150 --> 00:03:00.670\nSo, I'll talk about that in a second.\n\n61\n00:03:00.670 --> 00:03:04.440\nI'm declaring it right here in the for\nstatement.\n\n62\n00:03:04.440 --> 00:03:07.880\nIt's only gonna be used internally\nin this for statement in this case.\n\n63\n00:03:07.880 --> 00:03:10.522\nAnd I've set its initial value to 0.\n\n64\n00:03:10.522 --> 00:03:12.190\nThen I have a semicolon, right.\n\n65\n00:03:12.190 --> 00:03:15.600\nWe have semicolons\nseparating the three parts\n\n66\n00:03:15.600 --> 00:03:18.610\nto our syntax up here\nin our parentheses set.\n\n67\n00:03:19.760 --> 00:03:23.024\nThe second one is the condition, right.\n\n68\n00:03:23.024 --> 00:03:28.013\nAnd I'm saying $i less than,\nremember our operators that\n\n69\n00:03:28.013 --> 00:03:32.510\nwe talked about, -lt less than 10, right?\n\n70\n00:03:32.510 --> 00:03:35.166\nAnd then the repeat is gonna be i++,\n\n71\n00:03:35.166 --> 00:03:40.241\nremember we talked about that operator\nthat's gonna increment by one.\n\n72\n00:03:40.241 --> 00:03:43.880\nSo I'm basically saying hey,\nwhen we start, i is gonna equal zero.\n\n73\n00:03:43.880 --> 00:03:50.110\nAnd as long as i is less than 10, I want\nyou to do whatever is inside this block.\n\n74\n00:03:50.110 --> 00:03:54.540\nAnd every time you go through the block,\nI want you to increment i by one.\n\n75\n00:03:55.820 --> 00:04:01.400\nThen within the block, within my braces,\nthis is my statement or my code block.\n\n76\n00:04:01.400 --> 00:04:04.360\nI'm simply calling $i, I'm saying hey,\n\n77\n00:04:04.360 --> 00:04:07.810\nprint i, just as an example for\nour show here.\n\n78\n00:04:07.810 --> 00:04:10.690\n&gt;&gt; So\ndoes that mean it'll repeat nine times?\n\n79\n00:04:10.690 --> 00:04:12.190\n&gt;&gt; It should, exactly.\n\n80\n00:04:12.190 --> 00:04:13.730\nWell, let's find out,\nright, let's test it.\n\n81\n00:04:13.730 --> 00:04:16.460\n&gt;&gt; Okay.\n&gt;&gt; Let's see what happens, okay?\n\n82\n00:04:16.460 --> 00:04:20.030\nSo, we're gonna select that statement\nthere and I'm going to execute it or F8.\n\n83\n00:04:21.030 --> 00:04:24.208\nAnd we'll see it actually\nwent through 10 times.\n\n84\n00:04:24.208 --> 00:04:25.310\n&gt;&gt; It started at zero.\n\n85\n00:04:25.310 --> 00:04:29.520\n&gt;&gt; Yeah because we set that initial\nvalue to 0, it did start with 0.\n\n86\n00:04:29.520 --> 00:04:31.544\nBut the first time through the loop,\nright, so\n\n87\n00:04:31.544 --> 00:04:33.275\nlet's think about what happened here?\n\n88\n00:04:33.275 --> 00:04:38.380\nFirs, I could see the output,\n0 through 9 got printed on my screen.\n\n89\n00:04:38.380 --> 00:04:43.590\nSo, each one of these is a pass\nthrough that loop, okay?\n\n90\n00:04:43.590 --> 00:04:44.960\nSo when we first start out,\n\n91\n00:04:44.960 --> 00:04:48.448\nwhen it first gets to executing this code,\nall of this is set.\n\n92\n00:04:48.448 --> 00:04:51.500\ni = 0, i is less than 10, or\n\n93\n00:04:51.500 --> 00:04:54.600\nas long as i is less than 10,\nthat's my condition in increment i.\n\n94\n00:04:54.600 --> 00:04:59.270\nSo the first time through the loop,\ni = 0, because we just set it to zero.\n\n95\n00:04:59.270 --> 00:05:01.170\nSo it printed out i.\n\n96\n00:05:01.170 --> 00:05:03.960\nWhich is my zero, right here.\n\n97\n00:05:03.960 --> 00:05:06.629\nAnd then, it incremented i by one.\n\n98\n00:05:06.629 --> 00:05:09.700\nSo as we exit this loop,\nnow equals one, right?\n\n99\n00:05:09.700 --> 00:05:11.390\nZero plus one is one.\n\n100\n00:05:11.390 --> 00:05:14.430\nSo, now I'm saying, i equals one.\n\n101\n00:05:14.430 --> 00:05:17.711\nIt's still less than 10,\nI'm gonna go ahead and\n\n102\n00:05:17.711 --> 00:05:21.201\ndo this statement block again,\nand I'll print i.\n\n103\n00:05:21.201 --> 00:05:23.310\nAnd by the way,\nI'm gonna increment i as I leave.\n\n104\n00:05:23.310 --> 00:05:25.980\nAnd so, now i equals two.\n\n105\n00:05:25.980 --> 00:05:28.240\nNext time through,\ni is still less than 10.\n\n106\n00:05:28.240 --> 00:05:29.630\nTwo is less than 10.\n\n107\n00:05:29.630 --> 00:05:31.012\nSo go ahead and print i.\n\n108\n00:05:31.012 --> 00:05:32.440\nAnd then I will go through everyone,\nright?\n\n109\n00:05:32.440 --> 00:05:33.860\nI think you get the point.\n\n110\n00:05:33.860 --> 00:05:36.440\nEventually though,\nit is gonna get up to nine, right?\n\n111\n00:05:36.440 --> 00:05:38.930\nSo let's say,\nwe'll skip kinda towards the end.\n\n112\n00:05:38.930 --> 00:05:43.110\nSo, we go through here,\ni equals eight, it printed eight.\n\n113\n00:05:43.110 --> 00:05:46.165\nAnd then an incremented eight to nine.\n\n114\n00:05:46.165 --> 00:05:50.020\nNine is the highest, now equal to nine,\nso i is still less than 10,\n\n115\n00:05:50.020 --> 00:05:51.130\nso let's go ahead and print i.\n\n116\n00:05:51.130 --> 00:05:57.106\nSo it does, I get my nine out here and\nthen it increments i to 10.\n\n117\n00:05:57.106 --> 00:06:00.787\nAnd then as it goes through\nthe loop again, i is less than 10,\n\n118\n00:06:00.787 --> 00:06:02.740\nall of a sudden is false, right?\n\n119\n00:06:02.740 --> 00:06:08.370\nIt's no longer true, so we end the for\nloop, the condition is now false.\n\n120\n00:06:08.370 --> 00:06:12.050\nWe're not gonna execute the code\nanymore and we exit the loop, and\n\n121\n00:06:12.050 --> 00:06:14.390\nthat's why we don't see\nthe number 10 over here, right?\n\n122\n00:06:14.390 --> 00:06:17.968\nBecause I did say less than 10.\n\n123\n00:06:17.968 --> 00:06:20.526\nIf I was to change that to less than or\nequal to 10,\n\n124\n00:06:20.526 --> 00:06:22.920\nlet's see what happens\nwhen we execute it now.\n\n125\n00:06:26.160 --> 00:06:30.200\nNow, you see it counts 0 all\nthe way through 10, right.\n\n126\n00:06:30.200 --> 00:06:35.570\nSo that's the basic,\nreally that is a very simple for loop.\n\n127\n00:06:35.570 --> 00:06:37.979\nAnd what's cool about these for\nloops Cherokee,\n\n128\n00:06:37.979 --> 00:06:44.100\nis that they're very flexible as far as\nbeing able to increment different ways.\n\n129\n00:06:44.100 --> 00:06:49.410\nWhereas a for-each,\nI'm going through every single item.\n\n130\n00:06:49.410 --> 00:06:50.570\nHere, I could do some crazy things.\n\n131\n00:06:50.570 --> 00:06:52.703\nOne, we don't have to start on zero.\n\n132\n00:06:52.703 --> 00:06:54.020\nI could start with four, right?\n\n133\n00:06:54.020 --> 00:06:59.260\ni = 4, and\nif I execute that I just get 4 through 10,\n\n134\n00:06:59.260 --> 00:07:01.760\nbecause I still have less than or\nequal to.\n\n135\n00:07:01.760 --> 00:07:03.960\nWe don't have to start with zero.\n\n136\n00:07:03.960 --> 00:07:08.678\nWe also don't have to increment\nwith just that single, the ++,\n\n137\n00:07:08.678 --> 00:07:10.628\nright, increment by one.\n\n138\n00:07:10.628 --> 00:07:11.950\nDown here it says, you know what?\n\n139\n00:07:11.950 --> 00:07:14.080\nI want you to increment by two.\n\n140\n00:07:14.080 --> 00:07:17.710\nSo, I can't do the plus plus plus plus,\nthat wouldn't be very good syntax.\n\n141\n00:07:17.710 --> 00:07:20.945\n&gt;&gt; Yeah, you showed us a couple\ndifferent ways to actually perform that\n\n142\n00:07:20.945 --> 00:07:21.791\nfunction there.\n\n143\n00:07:21.791 --> 00:07:27.039\n&gt;&gt; Yeah, gonna use that operator there,\nso, i += 2, right.\n\n144\n00:07:27.039 --> 00:07:27.881\nSo now, we're gonna add 2\nevery time through the loop.\n\n145\n00:07:27.881 --> 00:07:28.409\nLet's see what happens.\n\n146\n00:07:28.409 --> 00:07:31.380\nWe're starting at 0.\n\n147\n00:07:31.380 --> 00:07:38.730\nGonna say as long as, i is less than 10,\ni += 2, execute that.\n\n148\n00:07:38.730 --> 00:07:40.173\nNow, we get 0, 2, 4, 6, 8, and 10.\n\n149\n00:07:40.173 --> 00:07:45.116\nFirst time through it's 0, prints it out,\nand then increments i by 2,\n\n150\n00:07:45.116 --> 00:07:47.610\nso 0 + 2 is 2, and we get the idea.\n\n151\n00:07:47.610 --> 00:07:50.320\nWe go progressively through there, right?\n\n152\n00:07:50.320 --> 00:07:52.050\nBut again, I could do,\n\n153\n00:07:52.050 --> 00:07:57.470\nreally I'm wide open as to what I do\nwith the i as far as that repeat goes.\n\n154\n00:07:57.470 --> 00:08:00.960\nWe can be very creative with that.\n\n155\n00:08:00.960 --> 00:08:04.350\nAll right, now I'll tell you though,\nobviously these are just very simple\n\n156\n00:08:04.350 --> 00:08:09.710\nexercises to show you the concept\nof what a for loop is doing for me.\n\n157\n00:08:09.710 --> 00:08:15.090\nYou will use these a lot in\nyour career with PowerShell or\n\n158\n00:08:15.090 --> 00:08:17.940\nin your scripting journey.\n\n159\n00:08:17.940 --> 00:08:20.616\nBut most of the time, at least for me,\n\n160\n00:08:20.616 --> 00:08:24.893\nwhat I find myself doing is\nlooping through arrays, right.\n\n161\n00:08:24.893 --> 00:08:29.129\nBecause we have collections of objects,\nwe've gathered up a bunch of services, or\n\n162\n00:08:29.129 --> 00:08:32.030\na bunch of computers, or\nwhatever the case may be.\n\n163\n00:08:32.030 --> 00:08:34.620\nAnd I need to go through and\ndo something to each one of those, or\n\n164\n00:08:34.620 --> 00:08:36.890\ncheck something on each one of those.\n\n165\n00:08:36.890 --> 00:08:40.170\nSo typically that's what I see\nme using for loops for, is for\n\n166\n00:08:40.170 --> 00:08:41.570\ncycling through arrays.\n\n167\n00:08:41.570 --> 00:08:45.350\nSo I did wanna show you how we can\ngo about doing something like that.\n\n168\n00:08:45.350 --> 00:08:47.240\nSo let's give it a try, shall we?\n\n169\n00:08:47.240 --> 00:08:49.034\n&gt;&gt; Yeah.\n&gt;&gt; I'm gonna type on screen.\n\n170\n00:08:49.034 --> 00:08:50.704\nWhich I don't know if I have done it yet\nin this class.\n\n171\n00:08:50.704 --> 00:08:53.027\n&gt;&gt; [LAUGH]\n&gt;&gt; So you get to see my great typing\n\n172\n00:08:53.027 --> 00:08:54.200\nskills.\n\n173\n00:08:54.200 --> 00:08:55.206\nSo, we're gonna start off the same.\n\n174\n00:08:55.206 --> 00:08:59.003\nWe're gonna say, for,\nall right, open parentheses.\n\n175\n00:08:59.003 --> 00:09:05.599\nAnd then my counter and I don't know if\nit's convention, I always just use the $i.\n\n176\n00:09:05.599 --> 00:09:07.566\nYou could use whatever you want there for\nyour calendar.\n\n177\n00:09:07.566 --> 00:09:12.280\nAnything that's, again,\nwe talk about variable scope, it's\n\n178\n00:09:12.280 --> 00:09:15.360\nwithin the function so it really shouldn't\nconflict with anything else anyway.\n\n179\n00:09:16.370 --> 00:09:21.018\nBut $i and let's set that equal to,\nas I back up over,\n\n180\n00:09:21.018 --> 00:09:26.494\nlet's set that equal to, yeah,\nwe'll start at zero, right.\n\n181\n00:09:26.494 --> 00:09:27.632\nAnd then, I'll do my semicolon.\n\n182\n00:09:27.632 --> 00:09:32.290\nI'm gonna say, as long as i, and\nthis is where it gets interesting.\n\n183\n00:09:32.290 --> 00:09:34.955\nAnd I wish I could turn off, there we go.\n\n184\n00:09:34.955 --> 00:09:37.440\nAll right, so my condition, right.\n\n185\n00:09:37.440 --> 00:09:40.033\nHere, I was picking an arbitrary\nnumber less than 10.\n\n186\n00:09:40.033 --> 00:09:42.740\nI could have said less than five,\nless than 2000.\n\n187\n00:09:42.740 --> 00:09:44.470\nAnd we could set whatever we want.\n\n188\n00:09:44.470 --> 00:09:50.420\nAs I go through this array, I really\nneed to know, I mean, to think about how\n\n189\n00:09:50.420 --> 00:09:55.180\nmany elements are in this array, because\nI wanna do something for each item.\n\n190\n00:09:55.180 --> 00:09:57.550\nBut how do I know how many's in there,\nright?\n\n191\n00:09:57.550 --> 00:09:58.460\nDo I have to count them?\n\n192\n00:09:58.460 --> 00:09:59.790\nWhat if it changes?\n\n193\n00:09:59.790 --> 00:10:05.990\nWe wanna try to build in a little\nbit of flexibility into our code so\n\n194\n00:10:05.990 --> 00:10:10.990\nwe can actually use a little property\nof an array called length, right.\n\n195\n00:10:10.990 --> 00:10:15.200\nLength, we saw that has an alias count,\n\n196\n00:10:15.200 --> 00:10:18.120\ngives me the number of\nelements in that array.\n\n197\n00:10:18.120 --> 00:10:24.642\nI can use that in my condition,\nas long as i is less than,\n\n198\n00:10:24.642 --> 00:10:31.530\n$array.Lemgth, okay, and then semicolon.\n\n199\n00:10:31.530 --> 00:10:33.000\nSo take me, there is my condition.\n\n200\n00:10:33.000 --> 00:10:36.200\nInstead of specifying, oops,\nyeah, I did that right.\n\n201\n00:10:36.200 --> 00:10:40.200\nInstead of specifying a specific\nnumber,I'm saying h,ey take the length of\n\n202\n00:10:40.200 --> 00:10:44.310\nthe array and as long as I'm less\nthan that we should be good to go.\n\n203\n00:10:45.400 --> 00:10:49.250\nAll right, and I'll come back to that\nconcept in just a second,and I'm gonna add\n\n204\n00:10:49.250 --> 00:10:55.580\nin my $i++ to increment that.\n\n205\n00:10:55.580 --> 00:10:58.580\nAnd I really should turn\non that help there.\n\n206\n00:10:58.580 --> 00:11:00.350\nIt's kinda hiding half my screen.\n\n207\n00:11:00.350 --> 00:11:02.260\nAnd I don't know,\nwe'll do something simple.\n\n208\n00:11:02.260 --> 00:11:07.490\nWe'll just,\nwe'll print out the element of that array.\n\n209\n00:11:07.490 --> 00:11:12.876\nSo, I'm gonna do, is $array, right,\nwe remember how to reference objects\n\n210\n00:11:12.876 --> 00:11:18.600\nin an array, use that index number,\nI'm gonna use i as my index number.\n\n211\n00:11:18.600 --> 00:11:25.460\nSo, [$i], right?\n\n212\n00:11:25.460 --> 00:11:30.547\nThat should end up printing\nout whatever element that is.\n\n213\n00:11:30.547 --> 00:11:33.560\nAnd we'll close our brace.\n\n214\n00:11:33.560 --> 00:11:35.224\nLet's again take a look at this.\n\n215\n00:11:35.224 --> 00:11:36.810\n[COUGH] Excuse me.\n\n216\n00:11:36.810 --> 00:11:37.810\nSo we've got our for statement.\n\n217\n00:11:37.810 --> 00:11:39.290\nWe've got an i as a counter.\n\n218\n00:11:39.290 --> 00:11:40.765\nWe're gonna start it off at zero.\n\n219\n00:11:40.765 --> 00:11:43.962\nWe'll say, as long as i is less\nthan the length of the array,\n\n220\n00:11:43.962 --> 00:11:47.561\nso it's gonna calculate out how\nmany positions there are, right.\n\n221\n00:11:47.561 --> 00:11:51.996\nAnd it's going to give me that number\nback, and then increment i by one every\n\n222\n00:11:51.996 --> 00:11:56.030\ntime you go through, and\nI just want you to print out i.\n\n223\n00:11:56.030 --> 00:11:56.994\nLet's see what happens.\n\n224\n00:11:59.586 --> 00:12:00.156\n&gt;&gt; Zero.\n\n225\n00:12:00.156 --> 00:12:00.854\n&gt;&gt; And there we go.\n\n226\n00:12:00.854 --> 00:12:03.347\n&gt;&gt; Look at that.\n&gt;&gt; Right, I get 1, 2, 3, 4, 5, 6, 7, 8,\n\n227\n00:12:03.347 --> 00:12:03.969\n9, and 10.\n\n228\n00:12:03.969 --> 00:12:07.220\nI get every one of my\nelements in that array.\n\n229\n00:12:07.220 --> 00:12:09.400\n&gt;&gt; And it just kept repeating\nitself in that loop.\n\n230\n00:12:09.400 --> 00:12:13.340\nYou didn't have to initiate that\nany other way, cuz it's more than,\n\n231\n00:12:13.340 --> 00:12:16.890\nI don't know why I was thinking it was\nonly gonna return one value there, but\n\n232\n00:12:16.890 --> 00:12:17.890\nno it did all of them.\n\n233\n00:12:17.890 --> 00:12:18.720\n&gt;&gt; It did each one.\n\n234\n00:12:18.720 --> 00:12:21.410\nAnd let's look at the logic so we make\nsure we understand what's going on here.\n\n235\n00:12:21.410 --> 00:12:23.450\nLet me move that up just\na hair on the screen.\n\n236\n00:12:23.450 --> 00:12:29.546\nSo, for i = 0, as long is i is less\nthan the length of the array, i++.\n\n237\n00:12:29.546 --> 00:12:34.440\nSo, we're passing an array in there\nthat has Got 10 elements there, right?\n\n238\n00:12:34.440 --> 00:12:36.690\nYeah, 10 elements, 1 through 10 [LAUGH].\n\n239\n00:12:36.690 --> 00:12:38.340\nI can count usually.\n\n240\n00:12:38.340 --> 00:12:40.188\n&gt;&gt; Yeah, I know nice that's zero but\n\n241\n00:12:40.188 --> 00:12:43.330\nI was thinking what was it gonna\nshow that first one or not.\n\n242\n00:12:43.330 --> 00:12:44.750\nI wasn't 100% sure with that.\n\n243\n00:12:44.750 --> 00:12:48.440\n&gt;&gt; And that's where we go to remember\nour lessons from arrays, right.\n\n244\n00:12:48.440 --> 00:12:51.380\nIf I want position one,\nwhat element is that?\n\n245\n00:12:53.330 --> 00:12:54.295\n&gt;&gt; Zero.\n&gt;&gt; Zero, right?\n\n246\n00:12:54.295 --> 00:12:54.800\n&gt;&gt; Okay, yep.\n\n247\n00:12:54.800 --> 00:12:57.060\n&gt;&gt; Exactly, so\nthat's why we're starting with zero.\n\n248\n00:12:57.060 --> 00:12:59.936\nIf I would have started with a one here.\n\n249\n00:12:59.936 --> 00:13:01.200\n&gt;&gt; It would have started\nwith a number two.\n\n250\n00:13:01.200 --> 00:13:04.790\n&gt;&gt; Exactly, if we try to execute that now,\nI get 2 through 10.\n\n251\n00:13:04.790 --> 00:13:06.445\nAnd I'm like wait,\nwhat happened to my first element?\n\n252\n00:13:06.445 --> 00:13:09.850\nAnd I started with one,\nwhere is my first element?\n\n253\n00:13:09.850 --> 00:13:13.770\nWe've got to remember that elements\nare arrays or zero indexed.\n\n254\n00:13:13.770 --> 00:13:18.130\nAnd we're gonna start with a zero,\nif we wanna get that, right.\n\n255\n00:13:18.130 --> 00:13:22.083\nAnd then you might think, well wait,\nshouldn't it go too far because\n\n256\n00:13:22.083 --> 00:13:27.268\narray.Length is ten, there's really only,\nthere's 10 places, zero through nine.\n\n257\n00:13:27.268 --> 00:13:27.798\n&gt;&gt; Yeah.\n&gt;&gt; Right, so\n\n258\n00:13:27.798 --> 00:13:29.885\nwhy doesn't the tenth one cause a failure?\n\n259\n00:13:29.885 --> 00:13:33.062\n[CROSSTALK]\n&gt;&gt; Because we said, the length,\n\n260\n00:13:33.062 --> 00:13:35.640\nwe wanna be less than the length.\n\n261\n00:13:35.640 --> 00:13:36.850\nNot equal to the length.\n\n262\n00:13:36.850 --> 00:13:41.600\nSo if the length is 10,\nwe end up going to nine, right?\n\n263\n00:13:41.600 --> 00:13:45.680\nSo we end up making it work,\ndoes that make sense?\n\n264\n00:13:45.680 --> 00:13:46.865\nA little tricky, right?\n\n265\n00:13:46.865 --> 00:13:50.970\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, so the array length is 10.\n\n266\n00:13:50.970 --> 00:13:51.830\n&gt;&gt; Okay.\n\n267\n00:13:51.830 --> 00:13:55.270\n&gt;&gt; But my formula says you\nhave to be less than 10.\n\n268\n00:13:55.270 --> 00:13:59.840\nSo when it comes through in\nincrements that to the value 10,\n\n269\n00:13:59.840 --> 00:14:01.680\nif it was to go through the loop,\n10 wouldn't work.\n\n270\n00:14:01.680 --> 00:14:04.480\nThere isn't a position 10 in my array,\nright?\n\n271\n00:14:04.480 --> 00:14:06.848\nThere's zero through nine,\nthere is no position 10.\n\n272\n00:14:06.848 --> 00:14:12.010\nBut because 10, it's not less than or\nequal to, it's less than so\n\n273\n00:14:12.010 --> 00:14:15.620\nit stopped on position nine\ninstead of position 10.\n\n274\n00:14:15.620 --> 00:14:19.490\nI know you probably have to try that\na couple times for yourself, to go through\n\n275\n00:14:19.490 --> 00:14:23.420\nthat like if we say less than or equal to,\nwell, now we're gonna have a problem.\n\n276\n00:14:23.420 --> 00:14:25.260\nLet's see what it does.\n\n277\n00:14:25.260 --> 00:14:30.500\nAll right, it just doesn't print anything\nout because there isn't a 10th position\n\n278\n00:14:30.500 --> 00:14:36.040\nin my array, but if I added one,\nit should include it now.\n\n279\n00:14:39.020 --> 00:14:40.120\nAnd so there we will see 11.\n\n280\n00:14:40.120 --> 00:14:43.590\nBut if we set this back to,\nwell no, I can't do that,\n\n281\n00:14:43.590 --> 00:14:46.590\nbecause it's still going\nto pick up the length.\n\n282\n00:14:46.590 --> 00:14:49.140\nLike I said, less than works\nreally well because typically,\n\n283\n00:14:49.140 --> 00:14:54.170\nyou have to remember if your array is\na length of 10, what is the last element?\n\n284\n00:14:55.220 --> 00:14:56.535\nOne less than that, right?\n\n285\n00:14:56.535 --> 00:14:58.140\n&gt;&gt; Right.\n&gt;&gt; Is zero through nine.\n\n286\n00:14:58.140 --> 00:15:01.990\nIf your array had 20 elements in there,\nwhat is the last element?\n\n287\n00:15:01.990 --> 00:15:02.525\n&gt;&gt; 19.\n\n288\n00:15:02.525 --> 00:15:08.650\n&gt;&gt; 19, so, by stopping at one\nless than the array length,\n\n289\n00:15:08.650 --> 00:15:10.480\ngets me to that last element.\n\n290\n00:15:10.480 --> 00:15:11.760\nAll right, so hopefully that makes sense.\n\n291\n00:15:11.760 --> 00:15:13.350\nAgain, play around with that a little bit.\n\n292\n00:15:13.350 --> 00:15:15.260\nI know it can be a little\nconfusing at first.\n\n293\n00:15:15.260 --> 00:15:20.270\nI'm just trying to think of what\nelse we could really do with this.\n\n294\n00:15:20.270 --> 00:15:25.760\nAnd if we were to change this up to a +=2,\nwhat's gonna happen?\n\n295\n00:15:28.010 --> 00:15:30.860\nWe should skip over every other element,\nright?\n\n296\n00:15:30.860 --> 00:15:34.919\nWe started at zero, so\nthe first time through equals zero,\n\n297\n00:15:34.919 --> 00:15:36.877\nposition 0 is the digit 1.\n\n298\n00:15:36.877 --> 00:15:41.174\nThe next time through it's 0 + 2 is 2, so\n\n299\n00:15:41.174 --> 00:15:45.250\nposition 2 is the number 3, all right.\n\n300\n00:15:45.250 --> 00:15:49.790\nAgain, play with these, I know sometimes\nme verbalizing is like, wait, what?\n\n301\n00:15:49.790 --> 00:15:54.704\nIf I wanted to get all the even numbers,\nI could simply start at position 1.\n\n302\n00:15:55.800 --> 00:15:57.620\nRight, wouldn't have to\nchange by increment,\n\n303\n00:15:57.620 --> 00:16:01.170\nI'm still gonna go every other number or\nevery other position in the element.\n\n304\n00:16:02.510 --> 00:16:07.049\nBut now I can get those even digits,\ncuz I'm controlling where I'm starting and\n\n305\n00:16:07.049 --> 00:16:08.663\nthen how I am incrementing.\n\n306\n00:16:08.663 --> 00:16:12.941\nAnd again, this is just an example\nreally to show us more about\n\n307\n00:16:12.941 --> 00:16:16.790\nthe structure of a for\nloop and how it works.\n\n308\n00:16:16.790 --> 00:16:18.790\nMight not be the most\npractical example but\n\n309\n00:16:18.790 --> 00:16:23.316\nwe will get to some of that,\nas we get further into our scripting.\n\n310\n00:16:23.316 --> 00:16:27.210\nSo that's our loop, I'm trying to think\nif there's anything else, Cherokee,\n\n311\n00:16:27.210 --> 00:16:29.170\nthat I can do with a for loop?\n\n312\n00:16:29.170 --> 00:16:32.660\nWe can get as complex as we\nwant inside the code block, but\n\n313\n00:16:32.660 --> 00:16:35.480\nwe'll save that for\nI think when we get to our script.\n\n314\n00:16:35.480 --> 00:16:36.060\n&gt;&gt; Yeah.\nI mean,\n\n315\n00:16:36.060 --> 00:16:37.880\nI hear different people using this term.\n\n316\n00:16:37.880 --> 00:16:40.840\nI particularly haven't used it yet, but\n\n317\n00:16:40.840 --> 00:16:45.210\nI know it's a very common in development\nand in numerous coding languages.\n\n318\n00:16:45.210 --> 00:16:48.280\nSo it's something just to get familiar\nwith especially here since we're in\n\n319\n00:16:48.280 --> 00:16:49.785\nPowerShell, so thank you for that, Mike.\n\n320\n00:16:49.785 --> 00:16:51.630\n&gt;&gt; Mm-hm.\n&gt;&gt; We do have a couple of other statements\n\n321\n00:16:51.630 --> 00:16:52.990\nthat we'll need to cover.\n\n322\n00:16:52.990 --> 00:16:54.210\nSo you don't wanna miss that.\n\n323\n00:16:54.210 --> 00:16:56.400\nBut for this show we'll go ahead and\nsign out.\n\n324\n00:16:56.400 --> 00:16:58.095\nI've been your host Cherokee Boose.\n\n325\n00:16:58.095 --> 00:16:58.800\n&gt;&gt; And I'm Mike Rodrick.\n\n326\n00:16:58.800 --> 00:17:02.279\n&gt;&gt; See you next time here at ITPro.TV.\n\n327\n00:17:02.279 --> 00:17:07.951\n[MUSIC]\n\n328\n00:17:07.951 --> 00:17:10.870\n&gt;&gt; Thank you for watching ITPRO,TV.\n\n",
          "vimeoId": "242971354"
        },
        {
          "description": "In this episode, we will cover Foreach statements. You will learn how Foreach statements are used to iterate through a series of values in a collection of items. Foreach statements are typically used to run one or more commands against each item in an array.",
          "length": "1441",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-4-1-foreach_statements-111017-PGM.00_23_47_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-4-1-foreach_statements-111017-PGM.00_23_47_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-4-1-foreach_statements-111017-PGM.00_23_47_27.Still001-sm.jpg",
          "title": "Foreach Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:03.056\nWelcome to ITProTV I'm\nyour host Don [CROSSTALK]\n\n2\n00:00:03.056 --> 00:00:08.129\n[MUSIC]\n\n3\n00:00:08.129 --> 00:00:11.338\n&gt;&gt; You're watching ITProTV.\n\n4\n00:00:11.338 --> 00:00:14.603\n&gt;&gt; Welcome ladies and gentlemen to\nyour PowerShell scripting series,\n\n5\n00:00:14.603 --> 00:00:16.357\nI'm your show host Cherokee Boose.\n\n6\n00:00:16.357 --> 00:00:20.740\nIn this episode we'll be taking a look at,\nOr Each statements.\n\n7\n00:00:20.740 --> 00:00:23.528\nAnd with us today back in\nstudios we have Mr. Mike Rogers.\n\n8\n00:00:23.528 --> 00:00:25.227\nThank you for\njoining us today Mike, how are you.\n\n9\n00:00:25.227 --> 00:00:26.940\n&gt;&gt; I am doing great Cherokee,\nthank's for having me back.\n\n10\n00:00:26.940 --> 00:00:29.770\nExcited as always,\nyeah we are getting into for Each.\n\n11\n00:00:29.770 --> 00:00:31.498\nThese are truly loops.\n\n12\n00:00:31.498 --> 00:00:32.620\nWe are going to start looking at.\n\n13\n00:00:32.620 --> 00:00:35.671\nI know we had a I kept calling it I\nthink our select statements on another\n\n14\n00:00:35.671 --> 00:00:37.500\nepisode, loops.\n\n15\n00:00:37.500 --> 00:00:42.660\nThese are, all right so let's take a look\nhere or let's start out talking about it.\n\n16\n00:00:42.660 --> 00:00:46.185\nSorry, I just threw our directory\noff there to use that keyword\n\n17\n00:00:46.185 --> 00:00:47.323\nlet's take a look.\n\n18\n00:00:47.323 --> 00:00:50.320\nAnd my screen magically pops up on screen.\n\n19\n00:00:50.320 --> 00:00:55.475\nGood stuff but for each,\nnow we're starting to get into.\n\n20\n00:00:55.475 --> 00:00:57.713\nA good way to start this off.\n\n21\n00:00:57.713 --> 00:01:02.861\nA lot of times, as I think I've said\nbefore, we end up with multiple items,\n\n22\n00:01:02.861 --> 00:01:06.860\nlike a list of services that\nare running on a machine.\n\n23\n00:01:06.860 --> 00:01:12.050\nOr a list of processes, or\na certain number of log file\n\n24\n00:01:12.050 --> 00:01:17.370\nentries that we returned, or whatever the\ncase may be, values that I need to test.\n\n25\n00:01:17.370 --> 00:01:23.290\nAnyway we have these Arrays, typically,\nis how we're going to be storing those.\n\n26\n00:01:23.290 --> 00:01:28.110\nAnd there are many times that I\nwant to run a command, right,\n\n27\n00:01:28.110 --> 00:01:32.990\nagainst not the array, but\neach item in the array, right?\n\n28\n00:01:32.990 --> 00:01:35.740\nI wanna do something against\nthat first item in the array.\n\n29\n00:01:35.740 --> 00:01:38.590\nThen I wanna do the same thing\nagainst the next item in the array.\n\n30\n00:01:38.590 --> 00:01:41.857\nAnd the same thing in\nthe next item in the array.\n\n31\n00:01:41.857 --> 00:01:44.633\nSo we want to loop through each\n\n32\n00:01:44.633 --> 00:01:49.530\nitem in that array performing\na series of commands.\n\n33\n00:01:50.560 --> 00:01:53.067\nAnd that's where our for\neach comes in play.\n\n34\n00:01:53.067 --> 00:01:57.897\nIt's actually a very very\neasy statement to write,\n\n35\n00:01:57.897 --> 00:02:01.750\nto read and to use, and it's very handy.\n\n36\n00:02:01.750 --> 00:02:06.085\nThis is typically used when I want to\ndo something for all of the items in\n\n37\n00:02:06.085 --> 00:02:10.287\nan array, and that is something that\nwe do want to pay attention to.\n\n38\n00:02:10.287 --> 00:02:13.576\nBecause there is other\nstatements we would use,\n\n39\n00:02:13.576 --> 00:02:17.761\nwhen we want to do commands against\na subset of items in array.\n\n40\n00:02:17.761 --> 00:02:22.909\nLike if I only want to run these commands\non five of the ten items in the array,\n\n41\n00:02:22.909 --> 00:02:23.660\nright?\n\n42\n00:02:23.660 --> 00:02:25.272\n&gt;&gt; Like an element,\nthat we talked about before?\n\n43\n00:02:25.272 --> 00:02:26.820\n&gt;&gt; Yes we're talking about elements yes.\n\n44\n00:02:26.820 --> 00:02:34.345\nMaybe just the computer name that starts\nwith s or ending a certain IP Octet.\n\n45\n00:02:35.475 --> 00:02:39.175\nSo not all of the elements in the array\nare going to meet my condition.\n\n46\n00:02:39.175 --> 00:02:42.765\nAnd I want to fire the commands\nonly on those ones that do.\n\n47\n00:02:42.765 --> 00:02:46.567\nThat's actually a for loop that we'll\ntake a look at here in just a minute.\n\n48\n00:02:46.567 --> 00:02:51.227\nFor each many times I wanna do something\nagainst every element in that array.\n\n49\n00:02:51.227 --> 00:02:53.297\nAnd that's where my for\neach coming to play.\n\n50\n00:02:53.297 --> 00:02:57.590\nIt makes it extremely easy\nto work with arrays and\n\n51\n00:02:57.590 --> 00:03:01.264\nto do commands on each item in that array.\n\n52\n00:03:01.264 --> 00:03:06.170\nWell, in fact I was playing with\nanother language not too long ago.\n\n53\n00:03:06.170 --> 00:03:11.120\nWorking on a little project with\nan Adreno which uses their own\n\n54\n00:03:11.120 --> 00:03:15.795\nkind of modified, or limited,\nI wanna say it's a C++.\n\n55\n00:03:15.795 --> 00:03:20.315\nIf I remember that correctly, but anyways\nthey don't have this capability in my\n\n56\n00:03:20.315 --> 00:03:24.701\nAdreno code so rifling through an array,\nI have to know how many elements are in\n\n57\n00:03:24.701 --> 00:03:28.772\nthere, I have to use counters to keep\ntrack of where I'm at in the array.\n\n58\n00:03:28.772 --> 00:03:32.690\nWith a foreach like we can do here in\nPowerShell, I can just throw it at\n\n59\n00:03:32.690 --> 00:03:37.285\nthe array and it's just going to say hey,\nfor each item in this array, do this and\n\n60\n00:03:37.285 --> 00:03:42.080\nit doesn't matter if there's two items or\n20 items or 2000 items.\n\n61\n00:03:42.080 --> 00:03:46.150\nIt's gonna go through each one of those\none at a time and perform that action.\n\n62\n00:03:46.150 --> 00:03:47.620\nSo extremely handy.\n\n63\n00:03:47.620 --> 00:03:50.170\n&gt;&gt; Yeah but earlier you had\nmentioned in a different show that\n\n64\n00:03:50.170 --> 00:03:53.520\nthere are sometimes like special\ncases we should pay attention to.\n\n65\n00:03:53.520 --> 00:03:56.718\nAnd when we're talking about our\nprocessing power, and is that something\n\n66\n00:03:56.718 --> 00:04:00.439\nthat would be applicable here, if you're\nrunning something that's pretty taxing?\n\n67\n00:04:00.439 --> 00:04:04.196\n&gt;&gt; Yeah, yeah, it definitely could be,\nit'll be something that you would\n\n68\n00:04:04.196 --> 00:04:07.104\nhave to look at, and monitor,\nthe fore each itself, for\n\n69\n00:04:07.104 --> 00:04:11.188\neach loop itself is not really process,\nor intensive, or anything like that.\n\n70\n00:04:11.188 --> 00:04:12.907\nBut the fact that you're,\n\n71\n00:04:12.907 --> 00:04:17.033\nit's the array of 200 that would\nbe sucking up a lot of memory.\n\n72\n00:04:17.033 --> 00:04:19.870\nBut it is only working\nwith one object a time.\n\n73\n00:04:19.870 --> 00:04:21.877\nSo if you were doing something against it,\n\n74\n00:04:21.877 --> 00:04:25.576\nit's not like it's gonna do all 200 at\nthe same time or anything like that.\n\n75\n00:04:25.576 --> 00:04:29.560\nSo probably not too bad, but definitely\nsomething you'd wanna pay attention to.\n\n76\n00:04:29.560 --> 00:04:30.398\n&gt;&gt; Okay.\n&gt;&gt; Cuz remember,\n\n77\n00:04:30.398 --> 00:04:34.522\nwe did talk about where if I'm resizing\nthose arrays and there's a lot of elements\n\n78\n00:04:34.522 --> 00:04:37.817\nin there, It's removing it and\nthen recreating it [CROSSTALK].\n\n79\n00:04:37.817 --> 00:04:41.516\n&gt;&gt; Yeah it doesn't like change the deltas\nor whatever or add to it or deleting it\n\n80\n00:04:41.516 --> 00:04:42.969\n&gt;&gt; Exactly it would remove it and\n\n81\n00:04:42.969 --> 00:04:45.651\nthen create a new one with\nthat element in it all right.\n\n82\n00:04:45.651 --> 00:04:50.565\nAll right so\nnow let's take a look at my screen here.\n\n83\n00:04:50.565 --> 00:04:51.920\nThere we go look at that.\n\n84\n00:04:51.920 --> 00:04:55.887\nShe's like wait does he mean it this time,\nor is that hesitation there,\n\n85\n00:04:55.887 --> 00:04:57.134\nI know I threw her off.\n\n86\n00:04:57.134 --> 00:05:00.395\nThank you for that, Megan.\n\n87\n00:05:00.395 --> 00:05:05.203\nFour each, right, is my key word,\nand then open parenthesis,\n\n88\n00:05:05.203 --> 00:05:09.080\ndollar sign item in\ndollar sign collection.\n\n89\n00:05:09.080 --> 00:05:12.472\nAgain, this is just syntax,\nthis is not an actual statement,\n\n90\n00:05:12.472 --> 00:05:15.289\nclose parenthesis,\nopen brace, statement list,\n\n91\n00:05:15.289 --> 00:05:18.760\nI was like gonna have multiple\nstatements in here, one or more.\n\n92\n00:05:18.760 --> 00:05:25.580\nAnd then close brace, that's my basic\nsyntax, for my foreach statement right.\n\n93\n00:05:25.580 --> 00:05:28.390\nThe collection is my array.\n\n94\n00:05:28.390 --> 00:05:32.380\nThis is what I want to go through,\nthough it could be as I have here,\n\n95\n00:05:32.380 --> 00:05:36.920\nan array of just letters It\ncould be an array of process, or\n\n96\n00:05:36.920 --> 00:05:42.050\nservices, or computer names,\nor whatever user accounts.\n\n97\n00:05:42.050 --> 00:05:44.640\nYou know, whatever the case maybe.\n\n98\n00:05:44.640 --> 00:05:46.790\nSo, that's the collection.\n\n99\n00:05:46.790 --> 00:05:51.445\nAnd then, the dollar sign item is\nactually a variable that we're gonna\n\n100\n00:05:51.445 --> 00:05:53.320\ncreate In the for each loop.\n\n101\n00:05:54.380 --> 00:05:57.140\nAnd I can really call it anything I want.\n\n102\n00:05:57.140 --> 00:06:01.571\nIt's what's kind of cool\nabout it is it gets created\n\n103\n00:06:01.571 --> 00:06:04.210\nduring the run of the for each.\n\n104\n00:06:04.210 --> 00:06:09.731\nAnd it doesn't really have to,\nlet me think of a good way to say this.\n\n105\n00:06:09.731 --> 00:06:12.700\nWell I will show you in my next example\nand I will explain that a little more.\n\n106\n00:06:12.700 --> 00:06:16.513\nWe can put wherever we want there\nthis is the actual collection or\n\n107\n00:06:16.513 --> 00:06:18.740\narray that I want to go through.\n\n108\n00:06:18.740 --> 00:06:24.080\nAnd then this is what I wanna do to\neach one of the items in that array.\n\n109\n00:06:24.080 --> 00:06:27.680\nSo for example,\nI have an array here called letters,\n\n110\n00:06:27.680 --> 00:06:30.740\nI have created it I've got\nmy assignment operator and\n\n111\n00:06:30.740 --> 00:06:35.690\nI have assigned multiple values six\ndifferent values to this array.\n\n112\n00:06:35.690 --> 00:06:41.825\nAnd then in my for each statement I\nhave for each $ letter in $ letters,\n\n113\n00:06:41.825 --> 00:06:46.490\nagain $ letters is the actual\narray that I want to go through.\n\n114\n00:06:46.490 --> 00:06:50.800\nAnd this is just saying for each one\nof these, for each individual element.\n\n115\n00:06:50.800 --> 00:06:54.183\nAnd I call it a letter because\nmentally that makes sense to me right?\n\n116\n00:06:54.183 --> 00:06:58.200\nThe array I made plural intentionally.\n\n117\n00:06:58.200 --> 00:07:04.652\nSo there's going to be a collection of\nletters or events or processes right?\n\n118\n00:07:04.652 --> 00:07:08.300\nOr users so\nit's probably going to be plural.\n\n119\n00:07:08.300 --> 00:07:12.538\nAnd in here I use the singular\nto represent one of those items.\n\n120\n00:07:12.538 --> 00:07:15.969\nSo this might be, users, and\n\n121\n00:07:15.969 --> 00:07:21.020\nI might say for each user in users, right?\n\n122\n00:07:21.020 --> 00:07:22.080\nI might do something like that.\n\n123\n00:07:22.080 --> 00:07:25.495\nAnd let me change those back so\nthe rest of my lab works, right?\n\n124\n00:07:25.495 --> 00:07:29.980\nBut again, I can call anything I want,\nI could say $ sign for every $Bob or Bobo,\n\n125\n00:07:29.980 --> 00:07:32.000\nor whatever I ended up typing there.\n\n126\n00:07:32.000 --> 00:07:36.320\nFor every dollar sign Bobo in letters,\ndo this.\n\n127\n00:07:36.320 --> 00:07:38.020\nAnd it's going to work just fine.\n\n128\n00:07:38.020 --> 00:07:43.590\nI would need to change this\nto Bobo to make that work.\n\n129\n00:07:43.590 --> 00:07:48.434\nSo what I'm saying is this is just\ninternal to the loop and it's representing\n\n130\n00:07:48.434 --> 00:07:53.055\nan individual item from the collection\nthat I can call it anything right,\n\n131\n00:07:53.055 --> 00:07:57.993\nbut it is a variable, it does start with\nthe dollar side so I can't call it Bob.\n\n132\n00:07:57.993 --> 00:08:00.401\nI do need to call it $bottom, right?\n\n133\n00:08:00.401 --> 00:08:02.750\nI need to make it an actual variable.\n\n134\n00:08:03.910 --> 00:08:09.250\nIt's really stuck on bobo there so\nlet's change that back to a letter, right?\n\n135\n00:08:09.250 --> 00:08:12.790\nSo for each letter in letters,\nI just want to print the letter out.\n\n136\n00:08:12.790 --> 00:08:18.820\nThat's all I'm doing, I'm just calling\nthe value of this variable, right?\n\n137\n00:08:18.820 --> 00:08:22.700\nSo if I execute this code,\nactually let me assign the array here.\n\n138\n00:08:23.820 --> 00:08:28.210\nThen we will execute that code and\nthere we go.\n\n139\n00:08:28.210 --> 00:08:33.680\nI get a printout of each one of those\nelements one line at a time, right?\n\n140\n00:08:33.680 --> 00:08:37.490\nWell, that's a very simple look at a for\neach but there's a lot of\n\n141\n00:08:37.490 --> 00:08:41.780\nsubtle things that are going on in\nhere that make this really powerful.\n\n142\n00:08:41.780 --> 00:08:45.680\nOne, I don't have to know how many\nelements are in the array, right?\n\n143\n00:08:45.680 --> 00:08:49.054\nWe could come up here and do this.\n\n144\n00:08:51.232 --> 00:08:53.700\nAll right, oops, ooh, ow.\n\n145\n00:08:53.700 --> 00:08:57.394\nI'm having trouble with my\nselection phase here, gee.\n\n146\n00:08:58.620 --> 00:09:03.640\nLet's call that H and maybe I or\nsomething like that, right?\n\n147\n00:09:03.640 --> 00:09:05.803\nSo I just changed the length of the array.\n\n148\n00:09:05.803 --> 00:09:08.296\nI'm not changing anything in my for each.\n\n149\n00:09:08.296 --> 00:09:11.001\nI am gonna reassigned this though,\nthat would help.\n\n150\n00:09:11.001 --> 00:09:13.681\nI'm not changing like for\neach statement at all.\n\n151\n00:09:13.681 --> 00:09:17.340\nAnd execute it and\nnotice it goes to each element nice and\n\n152\n00:09:17.340 --> 00:09:21.100\ntidy and\nit didn't require any effort on my part.\n\n153\n00:09:21.100 --> 00:09:25.160\nSo the arrays can be of any size,\nthey can change, and the for\n\n154\n00:09:25.160 --> 00:09:28.770\neach loop doesn't have to know\nhow many elements to expect.\n\n155\n00:09:28.770 --> 00:09:31.660\nIt's automatically gonna start\nwith that first element and\n\n156\n00:09:31.660 --> 00:09:34.970\nit's gonna go until it runs out of\nelements which is really handy.\n\n157\n00:09:34.970 --> 00:09:38.890\nWhen we see for statements and\nother kinds of loops, I might have to keep\n\n158\n00:09:38.890 --> 00:09:43.680\ntrack of that myself or in my code and\nuse like a counter variable and\n\n159\n00:09:43.680 --> 00:09:46.300\nincremented it to go through each and\none of those items.\n\n160\n00:09:46.300 --> 00:09:48.380\nAnd have to know how many there are so\n\n161\n00:09:48.380 --> 00:09:50.720\nI know when to stop as\nI'm going through that.\n\n162\n00:09:50.720 --> 00:09:53.130\nWith the for each,\nI don't need that, right?\n\n163\n00:09:53.130 --> 00:09:55.930\nAlso notice I didn't have to increment.\n\n164\n00:09:55.930 --> 00:09:58.679\nSpeaking of increment,\nI didn't have to say, next letter.\n\n165\n00:09:58.679 --> 00:10:02.240\nOr letter plus one to move\nto the next position.\n\n166\n00:10:02.240 --> 00:10:03.348\nIt did that all on its own.\n\n167\n00:10:03.348 --> 00:10:06.180\nIt said, all right,\nI'm gonna take the first element,\n\n168\n00:10:06.180 --> 00:10:08.309\nthe first letter in letters, and do this.\n\n169\n00:10:08.309 --> 00:10:12.710\nThen I'm gonna automatically move\non to the next letter and do this.\n\n170\n00:10:12.710 --> 00:10:16.570\nAnd then to the next one until I\nrun out of elements in that array.\n\n171\n00:10:16.570 --> 00:10:21.490\nSo all that stuff is built in to that for\neach statement.\n\n172\n00:10:21.490 --> 00:10:24.690\nMakes it extremely easy to work with,\nright?\n\n173\n00:10:24.690 --> 00:10:29.630\nLet's try another example here, I got one,\nlet's see, $services = getService.\n\n174\n00:10:29.630 --> 00:10:32.107\nSo, if we execute that, right,\n\n175\n00:10:32.107 --> 00:10:38.060\nnow $services should\ninclude all of my services.\n\n176\n00:10:39.350 --> 00:10:41.220\nAnd there they are, right?\n\n177\n00:10:41.220 --> 00:10:45.480\nIf we switch this around real quick,\nwe'll see that I get the status.\n\n178\n00:10:45.480 --> 00:10:47.360\nI get back their name, and\n\n179\n00:10:47.360 --> 00:10:52.990\ntheir display name by default\nwhen I run that command, right?\n\n180\n00:10:54.150 --> 00:10:58.200\nThen I've got a loop here that says for\neach service in services.\n\n181\n00:10:59.270 --> 00:11:01.950\nThen again, I could have called\nthis anything I want but to me,\n\n182\n00:11:01.950 --> 00:11:05.440\nit mentally it make sense for\neach service, in services and\n\n183\n00:11:05.440 --> 00:11:11.330\nI could spelled it out service,\nI just put SVC there, I want to do this.\n\n184\n00:11:11.330 --> 00:11:14.970\nWhat's really cool what I'm showing\nyou here is that in this case,\n\n185\n00:11:14.970 --> 00:11:19.690\nI'm not passing through a single\ncharacter, I'm passing through objects.\n\n186\n00:11:20.880 --> 00:11:24.480\nWhen I do a Get Service,\nthis is an object and\n\n187\n00:11:24.480 --> 00:11:28.920\nthat object has several\nproperties associated with it,\n\n188\n00:11:28.920 --> 00:11:33.260\npossibly methods as well that it can\nperform and I have access to those.\n\n189\n00:11:33.260 --> 00:11:37.690\nBecause as I pass that first element\nthrough, that element is an object and\n\n190\n00:11:37.690 --> 00:11:40.170\nall of its capabilities\ncome with that object.\n\n191\n00:11:40.170 --> 00:11:41.550\nAll of its properties,\n\n192\n00:11:41.550 --> 00:11:45.130\nany methods associated with it\nare gonna be available to me.\n\n193\n00:11:45.130 --> 00:11:50.270\nSo here, I'm using my .notation to\naccess the service.displayname.\n\n194\n00:11:50.270 --> 00:11:54.780\nI don't want all of the properties, I\njust want that one property, displayname.\n\n195\n00:11:54.780 --> 00:11:59.090\nBut for each one, start with the first\nservice in that big old list and\n\n196\n00:11:59.090 --> 00:12:00.330\nshow me the display name.\n\n197\n00:12:00.330 --> 00:12:04.670\nThen go to the second object, that next\nservice and show me the display name.\n\n198\n00:12:04.670 --> 00:12:12.215\nSo if I run this, Notice I get a nice\ntidy list of just the display names for\n\n199\n00:12:12.215 --> 00:12:16.760\neach one of those services that's\napparently running on that system.\n\n200\n00:12:18.860 --> 00:12:21.810\nAnd that .notation will come in handy.\n\n201\n00:12:21.810 --> 00:12:26.110\nAgain, remembering that everything\nin PowerShell is an object is key,\n\n202\n00:12:26.110 --> 00:12:29.300\ncuz you can access a lot of stuff and\nthings you can you might not know.\n\n203\n00:12:29.300 --> 00:12:32.140\nAs you're learning PowerShell and\nas you're playing with PowerShell and\n\n204\n00:12:32.140 --> 00:12:33.830\ntrying to figure out what's going on,\n\n205\n00:12:33.830 --> 00:12:37.280\none of the best things you can\ndo is use that tab autofill.\n\n206\n00:12:37.280 --> 00:12:38.414\nAnd unlike for Mike,\n\n207\n00:12:38.414 --> 00:12:42.579\nyou don't have to know the first couple\nof letters that used to have autofill.\n\n208\n00:12:42.579 --> 00:12:43.683\nIt's the great thing about it.\n\n209\n00:12:43.683 --> 00:12:46.355\nYou do not, watch.\n\n210\n00:12:46.355 --> 00:12:48.440\nand look at my list that comes up,\nall right?\n\n211\n00:12:48.440 --> 00:12:52.841\nBecause I'm here in the ISE,\nI get my IntelliSense and\n\n212\n00:12:52.841 --> 00:12:55.623\nit's looking at what I am typing.\n\n213\n00:12:55.623 --> 00:12:56.560\nAnd I can just sit here.\n\n214\n00:12:56.560 --> 00:12:59.200\nWhoops, that's probably not the best one.\n\n215\n00:13:00.360 --> 00:13:02.685\nThere, I could just here in tab, right?\n\n216\n00:13:02.685 --> 00:13:05.000\nThese are all the things\nthat I could choose.\n\n217\n00:13:05.000 --> 00:13:06.270\nYou know what?\n\n218\n00:13:06.270 --> 00:13:06.840\nMachine name.\n\n219\n00:13:06.840 --> 00:13:09.360\nWell, machine name would be the same for\nevery service I suppose.\n\n220\n00:13:09.360 --> 00:13:11.985\nCuz that wouldn't be too exciting.\n\n221\n00:13:11.985 --> 00:13:14.379\nDepends on service type, start type.\n\n222\n00:13:14.379 --> 00:13:15.210\n&gt;&gt; Start type would be good.\n\n223\n00:13:15.210 --> 00:13:18.445\n&gt;&gt; All right, let's get the start type for\nall of my services, right?\n\n224\n00:13:18.445 --> 00:13:22.616\nAnd unfortunately, this not gonna list\nthe name, shows us a list of start types.\n\n225\n00:13:22.616 --> 00:13:23.932\n&gt;&gt; [LAUGH] That would not be good.\n\n226\n00:13:23.932 --> 00:13:27.426\n&gt;&gt; So we have to do a little bit\nmore work, we'd wanna return both,\n\n227\n00:13:27.426 --> 00:13:31.116\nprobably the display name and\nthe start type, format it as a table or\n\n228\n00:13:31.116 --> 00:13:32.381\nsomething like that.\n\n229\n00:13:32.381 --> 00:13:36.176\nBut, just wanna give you an idea\nof where we can go with this.\n\n230\n00:13:36.176 --> 00:13:39.368\nSo, again, did you see we\nare starting to get a little complex,\n\n231\n00:13:39.368 --> 00:13:43.352\nworking on our way to the point where we\ncan actually write some useful scripts.\n\n232\n00:13:43.352 --> 00:13:47.642\nGetting all this\nfoundation knowledge late.\n\n233\n00:13:47.642 --> 00:13:48.667\nWhat else do I have here?\n\n234\n00:13:48.667 --> 00:13:50.922\nThis is another one, this one.\n\n235\n00:13:50.922 --> 00:13:54.692\nSo, so far,\nwe've been passing in a variable, or\n\n236\n00:13:54.692 --> 00:13:57.600\nan array, I should say, collection.\n\n237\n00:13:57.600 --> 00:13:59.050\nWe've got my array.\n\n238\n00:13:59.050 --> 00:13:59.757\nI did that first.\n\n239\n00:13:59.757 --> 00:14:01.032\nI went and got all the services.\n\n240\n00:14:01.032 --> 00:14:04.203\nPut them in this variable, this array, and\n\n241\n00:14:04.203 --> 00:14:09.789\nthen pass the array in as the collection\nin my statement, you don't have to.\n\n242\n00:14:09.789 --> 00:14:11.510\nLook what it did in this one.\n\n243\n00:14:11.510 --> 00:14:17.718\nUnless I actually changed, well,\nwe'll change this to something else.\n\n244\n00:14:17.718 --> 00:14:19.561\nWe'll call this svc2 or\n\n245\n00:14:19.561 --> 00:14:25.350\nsomething just prove to you that we\nare not reusing anything, right?\n\n246\n00:14:25.350 --> 00:14:28.640\nSo here, nothing declared ahead of time.\n\n247\n00:14:28.640 --> 00:14:34.410\nFor each #SVC2 in and\nthen there's my cmdlet, right?\n\n248\n00:14:34.410 --> 00:14:39.280\nSo instead of passing in the array, I'm\nskipping this step and I'm just saying,\n\n249\n00:14:39.280 --> 00:14:40.540\nhey, go get the services.\n\n250\n00:14:40.540 --> 00:14:44.220\nThat is the collection that I want to\npass in and show me their display name.\n\n251\n00:14:44.220 --> 00:14:44.900\nLet's see if it will work.\n\n252\n00:14:47.280 --> 00:14:48.230\nAnd there we go.\n\n253\n00:14:48.230 --> 00:14:49.680\nI get the same results.\n\n254\n00:14:49.680 --> 00:14:52.750\nSo I can pass a cmdlet right into there.\n\n255\n00:14:52.750 --> 00:14:56.495\nBut technically, I could come in here and\nsay, I don't know,\n\n256\n00:14:56.495 --> 00:15:02.820\nget service, Dot displayname, right?\n\n257\n00:15:02.820 --> 00:15:05.490\nAnd just grab that one\nproperty right there and\n\n258\n00:15:05.490 --> 00:15:09.910\nthen maybe inside here, I want to upper\ncase the entire name for some reason.\n\n259\n00:15:09.910 --> 00:15:12.720\nI'm trying to think of something\noff the top of my head or\n\n260\n00:15:12.720 --> 00:15:15.160\nconcatenate it with something or\nsomething like that.\n\n261\n00:15:15.160 --> 00:15:20.057\nBut in this case, all I'm passing\ninto the loop is the display name for\n\n262\n00:15:20.057 --> 00:15:24.547\neach service and then what do I\nwant to do with that display name.\n\n263\n00:15:24.547 --> 00:15:26.825\nI could do that here inside my code.\n\n264\n00:15:26.825 --> 00:15:29.620\nSo, love these for each loops.\n\n265\n00:15:29.620 --> 00:15:33.270\nExtremely easy to work with arrays,\n\n266\n00:15:33.270 --> 00:15:36.850\ncollections of objects, and\nrifle through everyone of them.\n\n267\n00:15:36.850 --> 00:15:41.619\nAgain, handy when you want to\ndo a particular action to all of\n\n268\n00:15:41.619 --> 00:15:44.623\nthe items in the collection, right?\n\n269\n00:15:44.623 --> 00:15:50.075\nNow recently,\nI want say it was PowerShell 3.0 but\n\n270\n00:15:50.075 --> 00:15:52.993\nI don't remember for sure.\n\n271\n00:15:52.993 --> 00:15:58.254\nBut relatively recently,\nthey have updated the syntax For a 4 each.\n\n272\n00:15:58.254 --> 00:16:03.590\nThey've actually given us the ability\nto pipeline a 4 each clause.\n\n273\n00:16:03.590 --> 00:16:06.200\nLet me scroll up to get it, there we go.\n\n274\n00:16:06.200 --> 00:16:09.977\nSo instead of writing a loop like this,\n\n275\n00:16:09.977 --> 00:16:15.820\nI can actually pipe the collection\ninto the 4 each command.\n\n276\n00:16:15.820 --> 00:16:17.840\nAnd then just throw the name, right?\n\n277\n00:16:17.840 --> 00:16:24.690\nSo here let's change this back to what I\nhad originally, let me undo that, right?\n\n278\n00:16:24.690 --> 00:16:28.860\nSo here I was pulling back the display\nname for each service with this loop.\n\n279\n00:16:28.860 --> 00:16:32.490\nAnd I'll run it one more time just to make\nsure I fixed it, sure enough, there we go.\n\n280\n00:16:32.490 --> 00:16:36.050\nWe're getting all of those display names,\nnot bad, pretty easy.\n\n281\n00:16:36.050 --> 00:16:39.880\nHere I'm saying go get the service or\nservices, right,\n\n282\n00:16:39.880 --> 00:16:41.420\nusing the get service command.\n\n283\n00:16:41.420 --> 00:16:44.380\nBut rather than displaying\nthat information pipe that,\n\n284\n00:16:44.380 --> 00:16:47.120\nremember we learned about\npipes in our other shows.\n\n285\n00:16:47.120 --> 00:16:51.150\nWe're gonna pipe the results of\nthat command into a four each and\n\n286\n00:16:51.150 --> 00:16:54.250\nall I want is the display name,\nnot the entire object.\n\n287\n00:16:54.250 --> 00:16:55.230\nLet's see if that one works.\n\n288\n00:16:57.280 --> 00:16:59.980\nI get the exact same results,\nbut look at the difference.\n\n289\n00:16:59.980 --> 00:17:02.610\nLook at the code, the readability.\n\n290\n00:17:02.610 --> 00:17:03.980\n&gt;&gt; Well,\nthat's what I was going to ask you, Mike.\n\n291\n00:17:03.980 --> 00:17:06.070\nI feel like I've done\nthat exact same thing but\n\n292\n00:17:06.070 --> 00:17:10.470\njust a different way before\nusing the pipe command and\n\n293\n00:17:10.470 --> 00:17:15.330\nit would just be Hht dash service pipe and\nthen dash display name.\n\n294\n00:17:15.330 --> 00:17:16.230\nI don't know if that will,\n\n295\n00:17:16.230 --> 00:17:18.720\nI'm thinking in my mind that\nthat's how I've done it before.\n\n296\n00:17:18.720 --> 00:17:23.820\n&gt;&gt; Well, if you just tried to do dash\ndisplay name, it's probably gonna happen\n\n297\n00:17:23.820 --> 00:17:30.080\nhere is you're working with an object and\nit's not gonna loop through each one.\n\n298\n00:17:30.080 --> 00:17:33.420\nIf we're trying to do display name.\n\n299\n00:17:33.420 --> 00:17:35.630\nI don't think it's\nenumerating through each one,\n\n300\n00:17:35.630 --> 00:17:38.130\nyeah, that recognizes\nthe command the functions,\n\n301\n00:17:38.130 --> 00:17:41.670\nI'm gonna have to do something over here,\nto get that done.\n\n302\n00:17:41.670 --> 00:17:44.403\nBut if you're passing in a single service,\nor something,\n\n303\n00:17:44.403 --> 00:17:47.204\nyou might be able to get away\nwith doing something like that.\n\n304\n00:17:47.204 --> 00:17:50.724\n&gt;&gt; Okay, call a specific service name and\nthen do that.\n\n305\n00:17:50.724 --> 00:17:51.315\nAdd that print number.\n\n306\n00:17:51.315 --> 00:17:53.420\n&gt;&gt; But then I don't know if you\nwould need to pipe it at that point.\n\n307\n00:17:53.420 --> 00:17:55.330\nSo I'd have to see what\nyou were trying to do,\n\n308\n00:17:55.330 --> 00:17:55.860\nbut-\n&gt;&gt; Okay, yeah,\n\n309\n00:17:55.860 --> 00:17:58.190\nit was just like bringing back\nsome memories and I was like,\n\n310\n00:17:58.190 --> 00:17:58.950\nI feel like I've done this.\n\n311\n00:17:58.950 --> 00:18:01.800\nBut then you showed exactly\nwhat I was thinking there so.\n\n312\n00:18:01.800 --> 00:18:02.315\n&gt;&gt; Right [LAUGH].\n\n313\n00:18:02.315 --> 00:18:07.260\n[INAUDIBLE]\nThis is\n\n314\n00:18:07.260 --> 00:18:12.110\nextremely easy when I'm starting to write\nmy script, this is a lot easier for\n\n315\n00:18:12.110 --> 00:18:16.510\nsomebody to read and to type out.\n\n316\n00:18:16.510 --> 00:18:23.610\nAnd a lot of things are being done\nthat we probably should recognize.\n\n317\n00:18:23.610 --> 00:18:26.360\nAnd notice there's no brace, right?\n\n318\n00:18:26.360 --> 00:18:26.940\nThere is no open and\n\n319\n00:18:26.940 --> 00:18:31.370\nclosed brace to represent my code block,\nthat would normally go around this.\n\n320\n00:18:31.370 --> 00:18:37.183\nI'm not happening to say, for\neach x in collection of xs, all right?\n\n321\n00:18:37.183 --> 00:18:41.727\nI don't wanna say for each service,\nand services, it already knows that,\n\n322\n00:18:41.727 --> 00:18:44.648\nbecause this is piping in\na collection of items.\n\n323\n00:18:44.648 --> 00:18:49.809\nAnd it's just saying, hey, for each one of\nthese items, this what I want you to do,\n\n324\n00:18:49.809 --> 00:18:53.735\nso a lot of the complexity of the for\neach, has now been moved into\n\n325\n00:18:53.735 --> 00:18:58.800\nthe background, it's built into it,\nwhere I can simply type out like this.\n\n326\n00:18:58.800 --> 00:19:00.660\nAnd make it a lot easier.\n\n327\n00:19:00.660 --> 00:19:04.670\nAnd, again, use that tab autofill right,\nthis is what's cool.\n\n328\n00:19:04.670 --> 00:19:08.170\nIt knows what I'm doing it says,\nlook, he is taking a Git service, so\n\n329\n00:19:08.170 --> 00:19:10.520\nit knows what object is coming over, and\n\n330\n00:19:10.520 --> 00:19:17.240\nas I tab it'll show me all of\nthe possible parameters for\n\n331\n00:19:17.240 --> 00:19:21.500\na service, right,\nwhich is different from if I was doing.\n\n332\n00:19:22.570 --> 00:19:23.620\n&gt;&gt; Get dash computer.\n\n333\n00:19:23.620 --> 00:19:27.860\n&gt;&gt; Yeah, if I was doing say get process\nbecause I don't have the AD loaded up yet,\n\n334\n00:19:27.860 --> 00:19:30.550\nbut let's say process, right?\n\n335\n00:19:30.550 --> 00:19:31.960\nAnd let's see if I lose changes.\n\n336\n00:19:33.490 --> 00:19:38.130\nNotice I have completely different\nproperties or process and\n\n337\n00:19:38.130 --> 00:19:43.810\nI can start saying, how much processor\ntime they're using and things like that.\n\n338\n00:19:43.810 --> 00:19:48.810\nSo, take advantage of the tab auto\nfill it does this in your console\n\n339\n00:19:48.810 --> 00:19:53.850\nas well as in the ISC the great way to\nstart learning what's available and\n\n340\n00:19:53.850 --> 00:19:55.560\nwhat I can do with some of these.\n\n341\n00:19:55.560 --> 00:19:59.950\nAnd sometimes if that doesn't work, if\nyou find that you can't tab through here,\n\n342\n00:19:59.950 --> 00:20:06.010\nsometimes with objects and\nyou try to start doing a space tab,\n\n343\n00:20:06.010 --> 00:20:10.690\nit might not give you what you're looking\nfor, so wrap the object in parenthesis, so\n\n344\n00:20:10.690 --> 00:20:14.450\nthat you're saying, hey, this object,\ndot, and then start tabbing.\n\n345\n00:20:14.450 --> 00:20:17.020\nAnd you'll get a lot of\noptions there as well.\n\n346\n00:20:17.020 --> 00:20:22.720\nOr if it's a property or parameter that\na command is expecting like get process,\n\n347\n00:20:22.720 --> 00:20:25.980\nI wonder how I can filter that down?\n\n348\n00:20:25.980 --> 00:20:26.500\nCan I?\n\n349\n00:20:26.500 --> 00:20:33.390\nI can just do a dash and then start\ntabbing, right, if I turn that off.\n\n350\n00:20:33.390 --> 00:20:36.550\nWell, it's not letting me\nbecause of that silly tab.\n\n351\n00:20:36.550 --> 00:20:41.568\nI keep hitting my caps lock key for\nmy tab today.\n\n352\n00:20:41.568 --> 00:20:46.552\nBut I can start tabbing through all\nthe parameters that are allowed with\n\n353\n00:20:46.552 --> 00:20:47.804\nthe get process.\n\n354\n00:20:47.804 --> 00:20:48.787\nSo, again, a little off topic.\n\n355\n00:20:48.787 --> 00:20:52.256\nI know we left the for each for\na second there, but, hopefully,\n\n356\n00:20:52.256 --> 00:20:53.550\nit gives you an idea of.\n\n357\n00:20:55.310 --> 00:20:57.543\nAnd now I gotta undo each one of those.\n\n358\n00:20:57.543 --> 00:20:59.670\nBe easier just to retype it.\n\n359\n00:20:59.670 --> 00:21:06.268\nPipe that into a for each and\nwe do display name, right?\n\n360\n00:21:06.268 --> 00:21:09.860\nAnd see sometimes it doesn't like\nto tab autofill right there.\n\n361\n00:21:11.579 --> 00:21:17.245\nDo you ever find that it doesn't tab\nauto fill, sometimes I'll hit enter and\n\n362\n00:21:17.245 --> 00:21:20.744\ngo back to it, and\nnow search tab autofilling.\n\n363\n00:21:20.744 --> 00:21:24.952\nI don't know what that is,\nit just gets hang up a little bit.\n\n364\n00:21:24.952 --> 00:21:28.550\nThat's [INAUDIBLE] process,\nI'm looking for display name,\n\n365\n00:21:28.550 --> 00:21:31.130\nthere is no display name for process.\n\n366\n00:21:31.130 --> 00:21:38.740\nSo I get service and\nthen I should have a display.\n\n367\n00:21:40.210 --> 00:21:44.860\nAnd as you just saw you can do a Shift+Tab\nto cycle back through those options.\n\n368\n00:21:44.860 --> 00:21:47.357\nSo there we go,\nit should be back to my original command,\n\n369\n00:21:47.357 --> 00:21:49.187\neverything should be working just fine.\n\n370\n00:21:49.187 --> 00:21:54.636\nSo that is a look at for each, again,\nwhat I want you to remember about the for\n\n371\n00:21:54.636 --> 00:22:00.590\neach is that the syntax for that is, for\neach item in my collection, do this.\n\n372\n00:22:00.590 --> 00:22:04.760\nOpen and closing curly braces is\ngonna be required from my code block.\n\n373\n00:22:04.760 --> 00:22:10.560\nOpen and close parenthesis is gonna\ngo around my item in items, right?\n\n374\n00:22:10.560 --> 00:22:14.250\nRemember the collection goes\non the right of the N and\n\n375\n00:22:14.250 --> 00:22:19.790\nthe variable on the left can be anything\nyou want that's gonna represent\n\n376\n00:22:19.790 --> 00:22:23.940\nthe single item as I'm wripling through\nthat collection or whatever it is.\n\n377\n00:22:23.940 --> 00:22:27.960\nIn this case the element in my ray or\na single service, and\n\n378\n00:22:27.960 --> 00:22:31.290\nso this is what you're also\ngonna use inside, right?\n\n379\n00:22:31.290 --> 00:22:33.260\nWhatever I use here,\n\n380\n00:22:33.260 --> 00:22:38.230\nis how I'm gonna access that particular\nitem this time through the loop.\n\n381\n00:22:38.230 --> 00:22:44.249\nSo, if this was Bob then this\nwould be Bob as well, right?\n\n382\n00:22:44.249 --> 00:22:48.961\nAnd this is gonna work just fine,\nit doesn't matter what that is called,\n\n383\n00:22:48.961 --> 00:22:51.620\nyou can call it whatever you want.\n\n384\n00:22:51.620 --> 00:22:53.870\nPreferably something that makes\na little sense, though, right?\n\n385\n00:22:53.870 --> 00:22:58.610\nWe have talked about writing good code,\ncode that other people can read.\n\n386\n00:22:58.610 --> 00:23:02.950\nThat you can understand later\nwhen you go back to look at it.\n\n387\n00:23:02.950 --> 00:23:05.530\nAnd Bob is not going to be something\nthat's going to make sense six\n\n388\n00:23:05.530 --> 00:23:06.560\nmonths from now.\n\n389\n00:23:06.560 --> 00:23:09.800\nAnother admin is going to go,\nwhat is Bob in services?\n\n390\n00:23:09.800 --> 00:23:11.320\nDid we hire somebody?\n\n391\n00:23:11.320 --> 00:23:12.600\nWhat's going on down there?\n\n392\n00:23:12.600 --> 00:23:16.419\nSo please try to use\nmeaningful variable names.\n\n393\n00:23:17.700 --> 00:23:21.464\nIt will you will find help\nyou out in the long run.\n\n394\n00:23:21.464 --> 00:23:25.494\n&gt;&gt; All right, Mike, I think that we\nare finished with our for each statements,\n\n395\n00:23:25.494 --> 00:23:27.460\nany closing final remarks?\n\n396\n00:23:27.460 --> 00:23:31.087\n&gt;&gt; Just stay tuned for fours, right?\n\n397\n00:23:31.087 --> 00:23:35.194\nWe're gonna drop the each, make it more\ncomplex, but give us a little more options\n\n398\n00:23:35.194 --> 00:23:37.890\nwhen it comes to rifling\nthrough items in an array.\n\n399\n00:23:37.890 --> 00:23:39.100\n&gt;&gt; All right, sounds like a plan.\n\n400\n00:23:39.100 --> 00:23:41.420\nThank you, ladies and\ngentlemen, for joining us, but\n\n401\n00:23:41.420 --> 00:23:43.180\nfor show we'll go ahead and sign out.\n\n402\n00:23:43.180 --> 00:23:44.560\nI've been your host Cherokee Boose.\n\n403\n00:23:44.560 --> 00:23:45.340\n&gt;&gt; And I'm Mike Rodrick.\n\n404\n00:23:45.340 --> 00:23:48.550\n&gt;&gt; See you next time here at ITPRO.TV.\n\n405\n00:23:48.550 --> 00:23:54.448\n[MUSIC]\n\n406\n00:23:54.448 --> 00:23:57.992\n&gt;&gt; Thank you for watching ITPRO.TV.\n\n",
          "vimeoId": "242600725"
        },
        {
          "description": "In this episode, we discuss Do statements. You will see how to use Do statements to run code blocks one or more times. You will also learn to control Do statement execution with either a While or Until condition.",
          "length": "1300",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-5-1-do_statements-111317-PGM.00_21_27_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-5-1-do_statements-111317-PGM.00_21_27_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-5-1-do_statements-111317-PGM.00_21_27_02.Still001-sm.jpg",
          "title": "Do Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.340 --> 00:00:02.665\nWelcome to ITProTV,\nI'm your host, Don Pezet.\n\n2\n00:00:02.665 --> 00:00:07.002\n[CROSSTALK]\n\n3\n00:00:07.002 --> 00:00:08.322\n[MUSIC]\n\n4\n00:00:08.322 --> 00:00:11.522\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.522 --> 00:00:15.010\n&gt;&gt; Welcome, ladies and gentlemen,\nto your PowerShell Scripting series.\n\n6\n00:00:15.010 --> 00:00:17.060\nI'm your show host, Cherokee Boose.\n\n7\n00:00:17.060 --> 00:00:20.762\nIn this episode, we'll be taking\na look at do statements and hopefully,\n\n8\n00:00:20.762 --> 00:00:23.584\nthe Taylor Swift song will\nget stuck in your head, too.\n\n9\n00:00:23.584 --> 00:00:26.097\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] But, of course, we have Mr.\n\n10\n00:00:26.097 --> 00:00:28.073\nMike Rodrick with us today in studios.\n\n11\n00:00:28.073 --> 00:00:29.900\nThank you, Mike, for joining us today.\n\n12\n00:00:29.900 --> 00:00:32.340\n&gt;&gt; Thank you, Cherokee, and\nexcited to be here as always.\n\n13\n00:00:32.340 --> 00:00:36.000\nAnd I have to admit,\nI don't know the song you're referring to.\n\n14\n00:00:36.000 --> 00:00:38.080\nDo I want to,\nis it gonna get stuck in my head?\n\n15\n00:00:38.080 --> 00:00:40.530\n&gt;&gt; It'll get stuck in your head probably,\nso you probably don't wanna know.\n\n16\n00:00:40.530 --> 00:00:42.280\n&gt;&gt; What is it, what is it?\n\n17\n00:00:42.280 --> 00:00:43.425\n&gt;&gt; [LAUGH]\n&gt;&gt; See, when I say [CROSSTALK]\n\n18\n00:00:43.425 --> 00:00:45.898\n&gt;&gt; Do you want me to sing it now?\n\n19\n00:00:45.898 --> 00:00:47.260\n&gt;&gt; Yes, yes,\nat least the first bar, right?\n\n20\n00:00:47.260 --> 00:00:48.498\nDon't you guys wanna know?\n\n21\n00:00:48.498 --> 00:00:51.199\nWhat song are you thinking of, Cherokee?\n\n22\n00:00:51.199 --> 00:00:53.130\n&gt;&gt; Look What You Made Me Do.\n\n23\n00:00:53.130 --> 00:00:54.767\n&gt;&gt; Okay.\n&gt;&gt; You'll have to look it up now.\n\n24\n00:00:54.767 --> 00:00:56.030\n[LAUGH]\n&gt;&gt; See now,\n\n25\n00:00:56.030 --> 00:01:01.021\nI guess I'm dating myself because when\nyou said do statements, I'm thinking of,\n\n26\n00:01:01.021 --> 00:01:05.182\nI don't know who sings it, Do You Have\nthe Time to Listen to Me Whine?\n\n27\n00:01:05.182 --> 00:01:06.206\n[CROSSTALK] at all.\n\n28\n00:01:06.206 --> 00:01:07.893\nThat's Blink-182?\n\n29\n00:01:07.893 --> 00:01:11.779\n&gt;&gt; Yeah, I think so, Blink-182.\n\n30\n00:01:11.779 --> 00:01:14.008\n&gt;&gt; All right, anyway.\n\n31\n00:01:14.008 --> 00:01:16.716\nAnywho, let's talk about do statements and\nnot songs that\n\n32\n00:01:16.716 --> 00:01:19.984\nhave do in their title because we could\ngo all the way back to I Do Run Run?\n\n33\n00:01:19.984 --> 00:01:22.560\n&gt;&gt; [LAUGH]\n&gt;&gt; No, we're not gonna do that.\n\n34\n00:01:22.560 --> 00:01:25.597\nAll right, so do statements, right?\n\n35\n00:01:25.597 --> 00:01:28.030\nDo means to do something.\n\n36\n00:01:28.030 --> 00:01:30.629\n[LAUGH] It's kind of funny trying to think\n\n37\n00:01:30.629 --> 00:01:33.850\nof ways to say this\nwithout using the word do.\n\n38\n00:01:33.850 --> 00:01:37.700\nA do statement is gonna perform\nsome action, all right?\n\n39\n00:01:37.700 --> 00:01:40.000\nSo no big deal there, right?\n\n40\n00:01:40.000 --> 00:01:41.300\nIn fact, you might think, well,\n\n41\n00:01:41.300 --> 00:01:43.670\nwait a second,\nwhy do I need a statement for that?\n\n42\n00:01:43.670 --> 00:01:46.820\nI know that if I just type Notepad,\nNotepad will open up.\n\n43\n00:01:46.820 --> 00:01:50.540\nI don't have to say do Notepad\nto have Notepad open up, right?\n\n44\n00:01:50.540 --> 00:01:53.770\nAnd you'd be right,\nyou don't need it for that.\n\n45\n00:01:53.770 --> 00:01:58.603\nDo is used in combination with\ntwo other keywords, either while,\n\n46\n00:01:58.603 --> 00:02:01.207\nthe word while, or until, right?\n\n47\n00:02:01.207 --> 00:02:04.640\nSo we're gonna have do while statements.\n\n48\n00:02:04.640 --> 00:02:07.185\nAnd we're gonna have do until statements.\n\n49\n00:02:07.185 --> 00:02:12.050\nSo that's how we're gonna end\nup using this do keyword.\n\n50\n00:02:12.050 --> 00:02:14.830\nNow the two different ones,\ndo while, and do.\n\n51\n00:02:14.830 --> 00:02:15.890\nLet's take a look at my screen here and\n\n52\n00:02:15.890 --> 00:02:17.950\nwe'll take a look at\nthe syntax as I explain it.\n\n53\n00:02:17.950 --> 00:02:20.850\nAnd hopefully, it'll make it\na little bit easier to understand.\n\n54\n00:02:20.850 --> 00:02:22.140\nSo I've got a couple of them over here.\n\n55\n00:02:22.140 --> 00:02:24.440\nThe first one we're gonna look at\nis these first three lines here.\n\n56\n00:02:25.740 --> 00:02:31.500\nI've got my opening keyword do,\nand then I have an open brace.\n\n57\n00:02:31.500 --> 00:02:36.360\nAnd then I have a statement block, right,\nwhatever I wanna execute, closing brace\n\n58\n00:02:36.360 --> 00:02:41.920\nfor the do, and then the keyword while,\nopen parentheses,\n\n59\n00:02:41.920 --> 00:02:46.990\nand then my condition, and\nthen close parentheses, all right?\n\n60\n00:02:46.990 --> 00:02:50.250\nAnd then you'll see the until\nlooks exactly the same.\n\n61\n00:02:50.250 --> 00:02:54.366\nSo all I did was replace the word\nwhile with the word until.\n\n62\n00:02:54.366 --> 00:02:56.593\nIsn't that easy?\n\n63\n00:02:56.593 --> 00:02:57.341\n&gt;&gt; Yes.\n&gt;&gt; Yes, make sense?\n\n64\n00:02:57.341 --> 00:02:58.446\n&gt;&gt; Yeah,\nwhat are we gonna be using this for?\n\n65\n00:02:58.446 --> 00:03:00.210\n&gt;&gt; [LAUGH]\n&gt;&gt; Where can I use this?\n\n66\n00:03:00.210 --> 00:03:02.909\n&gt;&gt; [LAUGH]\n&gt;&gt; Exactly, okay, great.\n\n67\n00:03:02.909 --> 00:03:03.651\nNow, what do we do?\n\n68\n00:03:03.651 --> 00:03:05.390\nThat doesn't help me at all.\n\n69\n00:03:05.390 --> 00:03:07.540\nSo let's talk about that.\n\n70\n00:03:07.540 --> 00:03:10.930\nDo, and we're gonna put in here\nthe action that we want to perform.\n\n71\n00:03:10.930 --> 00:03:12.860\nI think we've got that part down pat.\n\n72\n00:03:12.860 --> 00:03:15.480\nIt's the difference between\nthese two key words.\n\n73\n00:03:15.480 --> 00:03:22.340\nDo while, all right, the condition is\ngoing to be true when we start this.\n\n74\n00:03:22.340 --> 00:03:26.420\nAnd as long as the condition remains true,\nI'm gonna loop.\n\n75\n00:03:26.420 --> 00:03:33.150\nI'm gonna continue to do this do statement\nuntil the condition turns false, right?\n\n76\n00:03:33.150 --> 00:03:39.274\nWhereas the until, the statement's gonna\nstart out false in order to execute,\n\n77\n00:03:39.274 --> 00:03:43.327\nand then we're gonna continue\nto do my statement list\n\n78\n00:03:43.327 --> 00:03:46.406\nuntil the condition runs true, right?\n\n79\n00:03:46.406 --> 00:03:49.790\nSo do while is when we've got\nsomething that's true and\n\n80\n00:03:49.790 --> 00:03:55.020\nwe wanna perform some action until that\nstatement is no longer true, right?\n\n81\n00:03:55.020 --> 00:04:00.763\nWhereas do until is something is false and\nI wanna do it until it is true.\n\n82\n00:04:00.763 --> 00:04:03.535\n&gt;&gt; Okay, could you come up with one for\nthe first example?\n\n83\n00:04:03.535 --> 00:04:04.181\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n84\n00:04:04.181 --> 00:04:05.842\n&gt;&gt; But maybe the until, and\n\n85\n00:04:05.842 --> 00:04:07.899\nI could be totally wrong here,\n\n86\n00:04:07.899 --> 00:04:11.629\nbut maybe something like do\nping until reply received.\n\n87\n00:04:11.629 --> 00:04:12.619\n&gt;&gt; Yes, exactly, right,\n\n88\n00:04:12.619 --> 00:04:17.010\nyou might wanna test a connection\nbefore you enter a PSSession.\n\n89\n00:04:17.010 --> 00:04:18.820\nMaybe you're rebooting a machine and\n\n90\n00:04:18.820 --> 00:04:21.980\nyou need to know when that\nmachine comes back up.\n\n91\n00:04:21.980 --> 00:04:27.260\nAnd so you could do test-connection\nuntil test-connection,\n\n92\n00:04:27.260 --> 00:04:30.050\nbecause it would actually\nreturn true at some point.\n\n93\n00:04:30.050 --> 00:04:33.820\nAnd so it would continue to\nping until it rang true, and\n\n94\n00:04:33.820 --> 00:04:35.860\nthen it would stop that test connection.\n\n95\n00:04:35.860 --> 00:04:40.359\nSo it could outputting these ping results,\nand maybe we can do an example\n\n96\n00:04:40.359 --> 00:04:44.581\nwhen we get down into that part where\nwe can try something like that.\n\n97\n00:04:44.581 --> 00:04:48.141\n&gt;&gt; Okay.\n&gt;&gt; All right, and then the while, again,\n\n98\n00:04:48.141 --> 00:04:49.920\nis just the opposite.\n\n99\n00:04:49.920 --> 00:04:52.230\nAs long as the condition is true,\n\n100\n00:04:52.230 --> 00:04:58.040\nyou can really just take the same scenario\nand reverse what you're testing for, okay?\n\n101\n00:04:58.040 --> 00:05:02.510\nSo same situation, you're rebooting\nthe machine and you wanna ping it, and\n\n102\n00:05:02.510 --> 00:05:06.170\nfind out when it finishes rebooting and\nit starts responding to pings.\n\n103\n00:05:06.170 --> 00:05:09.390\nSo you could, again, your statement list\ncould just be the test connection, right?\n\n104\n00:05:09.390 --> 00:05:12.750\nWe're pinging it and I'm gonna say, wow,\n\n105\n00:05:12.750 --> 00:05:17.930\nnot-\n&gt;&gt; So false, basically?\n\n106\n00:05:17.930 --> 00:05:19.368\n&gt;&gt; Right, exactly.\n\n107\n00:05:19.368 --> 00:05:24.072\nSo then we can sit there and\nwatch it and wait for it to come up and\n\n108\n00:05:24.072 --> 00:05:26.347\nactually start responding.\n\n109\n00:05:26.347 --> 00:05:28.865\nSo while not test connection, right,\n\n110\n00:05:28.865 --> 00:05:33.180\ncuz test connection,\nif it succeeds, would return true.\n\n111\n00:05:33.180 --> 00:05:37.560\nAnd we're going to say while\nit's not true, then do this.\n\n112\n00:05:37.560 --> 00:05:43.730\nBut as soon as it becomes true,\nstop doing this.\n\n113\n00:05:43.730 --> 00:05:44.999\nAnd I'll show you an example down here.\n\n114\n00:05:44.999 --> 00:05:49.331\nWe can use either one of them and\naccomplish really the same results,\n\n115\n00:05:49.331 --> 00:05:52.779\njust depending on how we\nchoose to word our condition.\n\n116\n00:05:52.779 --> 00:05:59.228\nBut certain scenarios lend themselves\ntowards using while versus until.\n\n117\n00:05:59.228 --> 00:06:01.866\n&gt;&gt; And, of course,\nyou wouldn't want to use double negatives.\n\n118\n00:06:01.866 --> 00:06:06.940\nCuz that would be just grammatically or\nPowerShell phonetically incorrect.\n\n119\n00:06:06.940 --> 00:06:07.476\n&gt;&gt; Yes.\n\n120\n00:06:07.476 --> 00:06:09.089\n&gt;&gt; [LAUGH]\n&gt;&gt; And not to mention,\n\n121\n00:06:09.089 --> 00:06:10.810\nmake your code harder to read for\nsomebody else.\n\n122\n00:06:10.810 --> 00:06:12.103\nLike wait, what is he checking for?\n\n123\n00:06:12.103 --> 00:06:12.642\n&gt;&gt; So I'm just kidding.\n\n124\n00:06:12.642 --> 00:06:13.349\nI totally made that up.\n\n125\n00:06:13.349 --> 00:06:15.158\nBut you would suggest not to do that?\n\n126\n00:06:15.158 --> 00:06:15.933\n&gt;&gt; Absolutely,\n\n127\n00:06:15.933 --> 00:06:19.939\nI don't need one more complexity in\nmy script when I'm going through it.\n\n128\n00:06:19.939 --> 00:06:25.100\nWhy use the while and a double negative\nwhen I can just use the until?\n\n129\n00:06:25.100 --> 00:06:27.680\n&gt;&gt; Okay.\n&gt;&gt; It would make more sense to do it that\n\n130\n00:06:27.680 --> 00:06:28.560\nway, all right.\n\n131\n00:06:28.560 --> 00:06:31.620\nSo a couple examples\nof using our do while.\n\n132\n00:06:31.620 --> 00:06:34.400\nAgain, one of the things I've\nbeen kinda struggling with, and\n\n133\n00:06:34.400 --> 00:06:35.660\nI know you guys have noticed.\n\n134\n00:06:35.660 --> 00:06:38.860\nThese little statements\nare hard to use on their own.\n\n135\n00:06:38.860 --> 00:06:41.860\nThey're great inside scripts\nwhen I'm working with things,\n\n136\n00:06:41.860 --> 00:06:45.930\ntrying to come up with something for just\nthis, there's not a lot I can do with it.\n\n137\n00:06:45.930 --> 00:06:49.560\nI need more stuff, which we will\nhave when we get to our scripts.\n\n138\n00:06:49.560 --> 00:06:50.670\nBut let's go ahead and try this.\n\n139\n00:06:50.670 --> 00:06:54.110\nSo I'm gonna go ahead and\nset a = zero, just to start us off.\n\n140\n00:06:54.110 --> 00:06:59.532\nAnd then for my do while, look at my\nsyntax here, I've got the keyword do,\n\n141\n00:06:59.532 --> 00:07:04.610\nopen brace, and I wanna print out a,\nand then, I want to increment a,\n\n142\n00:07:04.610 --> 00:07:08.937\nand I'm gonna do this as long\nas a is less then 10, right?\n\n143\n00:07:08.937 --> 00:07:13.548\nSo a is 0, as it goes through here,\neach time it's gonna increment.\n\n144\n00:07:13.548 --> 00:07:18.820\nBut it's gonna keep doing this little\nloop while a is less than or equal to 10.\n\n145\n00:07:18.820 --> 00:07:24.602\nAs soon as a gets to 11,\nthis statement is then false and\n\n146\n00:07:24.602 --> 00:07:27.740\nmy do statement ends, right?\n\n147\n00:07:27.740 --> 00:07:28.490\nLet's try it out.\n\n148\n00:07:29.870 --> 00:07:30.840\nAll right, we'll select it.\n\n149\n00:07:30.840 --> 00:07:33.630\nWe'll hit F8 or\nexecute it and there we go.\n\n150\n00:07:33.630 --> 00:07:39.870\nIt starts out as 0 and it prints out a,\nas long a is less than or equal to 10.\n\n151\n00:07:39.870 --> 00:07:41.510\nAnd then it stops.\n\n152\n00:07:41.510 --> 00:07:48.257\nAs soon as a gets to 11, like right now\nif I called back a, notice a = 11, right?\n\n153\n00:07:48.257 --> 00:07:52.747\nBecause it did increment A, and\nthen it ran through the condition and\n\n154\n00:07:52.747 --> 00:07:58.015\nsaid a is no longer less than 10 or\nequal to 10, we're gonna stop and move\n\n155\n00:07:58.015 --> 00:08:03.142\non to the next line of code in our script,\nif we were actually writing a script.\n\n156\n00:08:03.142 --> 00:08:04.390\nRight?\n\n157\n00:08:04.390 --> 00:08:08.320\nSo important to understand\nhow that's working there.\n\n158\n00:08:08.320 --> 00:08:11.463\nIt's important to also understand\nwith these do statements,\n\n159\n00:08:11.463 --> 00:08:12.295\nsomething I haven't said yet.\n\n160\n00:08:12.295 --> 00:08:18.167\nIs that the condition is checked, notice\nwhere the condition is in our code, right?\n\n161\n00:08:18.167 --> 00:08:20.880\nThe condition is at the end\nof the do statement.\n\n162\n00:08:20.880 --> 00:08:26.640\nWhich means the statement is run once,\nand then the condition is checked.\n\n163\n00:08:26.640 --> 00:08:27.940\nFor example, let's try this.\n\n164\n00:08:27.940 --> 00:08:32.378\nWhat if A was to start out at 11?\n\n165\n00:08:32.378 --> 00:08:36.660\nWell it's not less than ten, so\nthis shouldn't do anything, right?\n\n166\n00:08:36.660 --> 00:08:38.240\nThat's what we're thinking.\n\n167\n00:08:38.240 --> 00:08:43.330\nLet's make sure we set A equal to 11,\nand then let's execute our statement.\n\n168\n00:08:45.780 --> 00:08:47.950\nAnd notice I get the number\neleven printed back.\n\n169\n00:08:49.060 --> 00:08:49.680\nWell, how come?\n\n170\n00:08:49.680 --> 00:08:52.280\nIt's not less than or equal to ten.\n\n171\n00:08:52.280 --> 00:08:54.970\nSo why did it even bother printing eleven?\n\n172\n00:08:54.970 --> 00:08:58.520\nBecause with do statements,\nthis is the thing you've got to remember.\n\n173\n00:08:58.520 --> 00:09:03.420\nThe code will always execute at least\nonce, no matter what your condition is.\n\n174\n00:09:03.420 --> 00:09:05.722\nBecause I'm running through the code,\nthink about it,\n\n175\n00:09:05.722 --> 00:09:09.490\ngoing down top to bottom, I'm doing\nall of these just like you told me.\n\n176\n00:09:09.490 --> 00:09:15.750\nYou said do this, then you said,\nonly do that while this condition is true.\n\n177\n00:09:15.750 --> 00:09:18.400\nWell, I've already done it once,\nso my bad.\n\n178\n00:09:18.400 --> 00:09:19.880\nBut now let me check the condition and\n\n179\n00:09:19.880 --> 00:09:23.520\nsee if I should do it again is\nbasically what's going on, right?\n\n180\n00:09:23.520 --> 00:09:26.680\nJust keep that in mind when you're\nwriting your code, it's very important.\n\n181\n00:09:26.680 --> 00:09:30.590\nDo statements will always\nexecute the code at least once.\n\n182\n00:09:30.590 --> 00:09:32.650\nAnd there's many times\nthat's what we want to do.\n\n183\n00:09:32.650 --> 00:09:34.270\nWe like that behavior.\n\n184\n00:09:34.270 --> 00:09:36.496\nBut it is something that\nyou have to keep in mind.\n\n185\n00:09:36.496 --> 00:09:38.460\nAll right, now let's try an until.\n\n186\n00:09:38.460 --> 00:09:44.170\nSo do until, A is greater than ten.\n\n187\n00:09:44.170 --> 00:09:45.290\nWe'll set this back to zero.\n\n188\n00:09:47.280 --> 00:09:49.890\nJust to kind of give us\nour frame of reference,\n\n189\n00:09:49.890 --> 00:09:52.400\nthen we'll execute our do until statement.\n\n190\n00:09:54.450 --> 00:09:55.880\nAnd look at there, I get zero through ten.\n\n191\n00:09:55.880 --> 00:10:00.810\nAnd if we look at the output,\nfrom my do while, zero through ten.\n\n192\n00:10:00.810 --> 00:10:03.080\nAnd if we look at\nthe output of my do until,\n\n193\n00:10:03.080 --> 00:10:06.640\nzero to ten,\nI'm getting the exact same result, right?\n\n194\n00:10:06.640 --> 00:10:09.080\nJust different ways of going about it.\n\n195\n00:10:09.080 --> 00:10:10.790\nIn this case, in the do until,\n\n196\n00:10:10.790 --> 00:10:14.710\nif we look at my screen again,\nI've got do, same exact code.\n\n197\n00:10:14.710 --> 00:10:19.210\nAll I did was switch out\nthe while with until, so print A,\n\n198\n00:10:19.210 --> 00:10:23.890\nincrement A until, but\nmy condition is different, right?\n\n199\n00:10:23.890 --> 00:10:29.870\nA is greater than ten, so\nnow in order to get it to, and that's\n\n200\n00:10:29.870 --> 00:10:34.810\nwhat I had to do to get it to stop at ten,\nI have to say until A is greater than 10.\n\n201\n00:10:34.810 --> 00:10:39.260\nAs we think about how it's going through\nhere, A starts at zero, so print zero,\n\n202\n00:10:39.260 --> 00:10:44.450\nincrements it, now equals one, next time\ntwo, all the way, eventually A equals,\n\n203\n00:10:44.450 --> 00:10:47.940\nI'm gonna increment it,\nand A equals ten, right?\n\n204\n00:10:47.940 --> 00:10:52.695\nIt'll print that out, it'll increment it,\nand then A equals 11.\n\n205\n00:10:52.695 --> 00:10:55.780\nA is now greater than ten and\nit stops the loop.\n\n206\n00:10:55.780 --> 00:11:00.950\n&gt;&gt; So what if you have a little\nerror in your syntax there and\n\n207\n00:11:00.950 --> 00:11:05.500\nyou go ahead and write something that\njust keeps going and going and going,\n\n208\n00:11:05.500 --> 00:11:08.190\nwould you be able to like\ndo control-C to stop that?\n\n209\n00:11:08.190 --> 00:11:12.150\n&gt;&gt; Yes, well, control-break is\nour command to get rid of that.\n\n210\n00:11:12.150 --> 00:11:14.190\nWhich is really funny,\nnow that you mentioned it.\n\n211\n00:11:14.190 --> 00:11:17.380\nI do not have a break key on my keyboard.\n\n212\n00:11:17.380 --> 00:11:20.330\nI can't find a function\nkey that replaces it.\n\n213\n00:11:20.330 --> 00:11:21.675\nIt's just disappeared.\n\n214\n00:11:21.675 --> 00:11:24.520\n&gt;&gt; [LAUGH] So don't mess up Mike.\n\n215\n00:11:24.520 --> 00:11:28.962\n&gt;&gt; So yeah luckily in the ISE, this button\nright here which is gray right now,\n\n216\n00:11:28.962 --> 00:11:30.330\nright up here.\n\n217\n00:11:30.330 --> 00:11:32.895\nIt actually turns red if I'm\nin the middle of a script.\n\n218\n00:11:32.895 --> 00:11:33.460\n&gt;&gt; Okay.\n\n219\n00:11:33.460 --> 00:11:36.860\n&gt;&gt; And it will end my function.\n\n220\n00:11:36.860 --> 00:11:40.310\nI can kill PowerShell to\nend that function, but\n\n221\n00:11:40.310 --> 00:11:42.410\nyou do bring up a really good point,\nright?\n\n222\n00:11:43.960 --> 00:11:49.370\nIs what happens if,\ncan I get a runaway loop?\n\n223\n00:11:49.370 --> 00:11:52.240\nAnd the answer is absolutely, all right?\n\n224\n00:11:52.240 --> 00:11:55.500\nBecause if our condition\nis not set up correctly\n\n225\n00:11:55.500 --> 00:11:58.340\nthis is gonna run while A is true.\n\n226\n00:11:58.340 --> 00:12:00.140\nWhat if A never becomes false?\n\n227\n00:12:00.140 --> 00:12:00.930\nRight?\n\n228\n00:12:00.930 --> 00:12:06.310\nWhat if I said the condition\nis $B Is less than ten,\n\n229\n00:12:07.730 --> 00:12:09.970\nthere is no $B.\n\n230\n00:12:09.970 --> 00:12:10.915\nLet's see what it does.\n\n231\n00:12:14.177 --> 00:12:16.890\nNow we are counting to infinity, right?\n\n232\n00:12:16.890 --> 00:12:19.790\nBecause b is never gonna be less than or\n\n233\n00:12:19.790 --> 00:12:23.450\nequal to ten, so\nit's gonna continue to do this loop.\n\n234\n00:12:23.450 --> 00:12:27.480\nThis is why I was saying earlier,\ndo statements on their own like this.\n\n235\n00:12:27.480 --> 00:12:31.455\nReally are not all that helpful, but\nwe've got to really think about things\n\n236\n00:12:31.455 --> 00:12:35.182\nlike this, we've got to think about\nwhat condition we're using, and\n\n237\n00:12:35.182 --> 00:12:37.419\nwhat's gonna change that condition, and\n\n238\n00:12:37.419 --> 00:12:41.048\nputting some kind of safety in there\nto prevent something like this.\n\n239\n00:12:41.048 --> 00:12:42.950\n&gt;&gt; Almost 30,000, there you go Mike.\n\n240\n00:12:42.950 --> 00:12:45.540\n&gt;&gt; And I'll control c, four, five times.\n\n241\n00:12:45.540 --> 00:12:48.290\nAnd you can see down here\ncontrol-C copied selected text.\n\n242\n00:12:48.290 --> 00:12:48.890\n&gt;&gt; Good.\n[LAUGH]\n\n243\n00:12:48.890 --> 00:12:50.350\n&gt;&gt; So I just copied my selected\n\n244\n00:12:50.350 --> 00:12:51.668\ntext over here.\n\n245\n00:12:51.668 --> 00:12:56.670\nBut there control-C, if I click in the\nPowerShell Window in the console, give it\n\n246\n00:12:56.670 --> 00:13:01.310\nfocus, and hit control-C, it's kinda like\nmy control break and it should end it.\n\n247\n00:13:01.310 --> 00:13:05.290\nI've seen it though where you get your\ndepending on what your loop is doing,\n\n248\n00:13:05.290 --> 00:13:08.380\nit actually bogs your machine down.\n\n249\n00:13:08.380 --> 00:13:12.840\nThe keyboard has a pretty high\ninterrupt request number, so\n\n250\n00:13:12.840 --> 00:13:17.369\nusually I can get it to stop, but it\nmight take more than one control-C to get\n\n251\n00:13:17.369 --> 00:13:20.010\nthe script to stop depending on\nhow busy it's making your machine.\n\n252\n00:13:20.010 --> 00:13:22.730\nSo, great point that's a really\ngood question to ask there.\n\n253\n00:13:23.892 --> 00:13:25.910\nAll right, so, let's see what else we got.\n\n254\n00:13:25.910 --> 00:13:30.190\nLet me clear my screen,\nwe made it up to 40,000, not bad.\n\n255\n00:13:30.190 --> 00:13:32.020\nSee how fast your machine is going, right?\n\n256\n00:13:32.020 --> 00:13:35.460\nHow many digits can I print\nout in 30 seconds, go.\n\n257\n00:13:35.460 --> 00:13:37.200\nSo let's take another look here,\n\n258\n00:13:37.200 --> 00:13:41.200\nI've got this one again it's\nnot really very useful, okay?\n\n259\n00:13:41.200 --> 00:13:43.680\nI'll go ahead and admit that some of you\nare gonna be like what the heck would you\n\n260\n00:13:43.680 --> 00:13:44.750\never wanna do that for?\n\n261\n00:13:44.750 --> 00:13:48.940\nYou wouldn't, this is just\nan example of using a do loop for\n\n262\n00:13:48.940 --> 00:13:52.070\nsomething more than spitting out numbers,\nall right?\n\n263\n00:13:52.070 --> 00:13:57.056\nSo what I've got, is I've got do then\nI'm printing out notepad is not running.\n\n264\n00:13:57.056 --> 00:14:02.030\nUntil, and I wanted to show you,\nyou're not stuck with just\n\n265\n00:14:02.030 --> 00:14:07.040\na condition like A is less than four or\nB is greater than 25, right?\n\n266\n00:14:07.040 --> 00:14:10.395\nIn my condition,\nI'm getting a process, right?\n\n267\n00:14:10.395 --> 00:14:13.970\nI'm gonna say get process name notepad.\n\n268\n00:14:13.970 --> 00:14:15.410\nYou can break this down, right.\n\n269\n00:14:15.410 --> 00:14:19.150\nIf I do this and\nhighlight just that section, and\n\n270\n00:14:19.150 --> 00:14:22.330\nexecute it all right I\ncan't find the process.\n\n271\n00:14:22.330 --> 00:14:29.090\nIf I start notepad and I run that again\nand it returns the process info, right?\n\n272\n00:14:29.090 --> 00:14:36.450\nBut this get process actually has\na property responding, right?\n\n273\n00:14:36.450 --> 00:14:42.370\nSo if I add that to it, it returns true.\n\n274\n00:14:43.610 --> 00:14:46.520\nSomething I can use in my condition,\nright?\n\n275\n00:14:46.520 --> 00:14:51.110\nSomething that is true and\nI wanna do until it is false.\n\n276\n00:14:52.690 --> 00:14:54.990\nSo that's what I've done here.\n\n277\n00:14:54.990 --> 00:14:58.529\nSo let's try it out I'm\ngonna close Notepad,\n\n278\n00:14:58.529 --> 00:15:02.449\nagain I know this isn't\nthe greatest little idea.\n\n279\n00:15:02.449 --> 00:15:05.710\nBut it proves a point, and\nthen outside of my do loop, right?\n\n280\n00:15:05.710 --> 00:15:06.870\nThis is my do loop here.\n\n281\n00:15:06.870 --> 00:15:12.350\nUntil Notepad is responding, we're gonna\ncontinue to print Notepad is not running.\n\n282\n00:15:12.350 --> 00:15:13.970\nSo as long as Notepad is not running,\n\n283\n00:15:13.970 --> 00:15:17.870\nif my condition is false it should sit\nthere and print Notepad is not running.\n\n284\n00:15:17.870 --> 00:15:20.980\nAs soon as it turns true, all right?\n\n285\n00:15:20.980 --> 00:15:24.040\nThen it's gonna stop printing,\nNotepad is not running.\n\n286\n00:15:24.040 --> 00:15:27.930\nThis line down here would just\nbe the next line in my script,\n\n287\n00:15:27.930 --> 00:15:31.160\nthis has nothing to do with\nthe actual do statement.\n\n288\n00:15:31.160 --> 00:15:34.950\nBut once the condition returns true,\nwe exit the do statement, and\n\n289\n00:15:34.950 --> 00:15:37.210\nthen we continue on with our code.\n\n290\n00:15:37.210 --> 00:15:41.617\nI'm actually gonna select\nall of these lines, right?\n\n291\n00:15:41.617 --> 00:15:43.050\nAnd we'll go ahead and execute.\n\n292\n00:15:44.600 --> 00:15:48.260\nSo you'll see in amongst the red text\nthat I'll talk about that in a second,\n\n293\n00:15:48.260 --> 00:15:50.800\nyou can see Notepad is not running.\n\n294\n00:15:50.800 --> 00:15:55.536\nAs soon as I launch Notepad,\nwe should make this smaller so\n\n295\n00:15:55.536 --> 00:15:59.314\nit doesn't cover up\nthe window when I do that.\n\n296\n00:15:59.314 --> 00:16:02.842\nAll right, you can see it stopped\nprinting, Notepad is not running.\n\n297\n00:16:02.842 --> 00:16:07.677\nAnd it printed Notepad has been started,\nright?\n\n298\n00:16:07.677 --> 00:16:12.761\nWe do that one more time, if I close\nNotepad and I execute my do statement,\n\n299\n00:16:12.761 --> 00:16:16.704\nagain it's continuing on and\non until I launch Notepad.\n\n300\n00:16:16.704 --> 00:16:20.221\nAnd immediately it stops and\nends my do statement, and\n\n301\n00:16:20.221 --> 00:16:24.100\nthen does whatever else comes\nnext In my code, right?\n\n302\n00:16:24.100 --> 00:16:28.963\nSo I wanna show you that cuz we kinda\nnow starting to see the complexity I\n\n303\n00:16:28.963 --> 00:16:30.541\ncan do with my untils.\n\n304\n00:16:30.541 --> 00:16:34.052\nI don't know, I'm not stuck with just\na simple greater than or less than or\n\n305\n00:16:34.052 --> 00:16:34.990\nequal to.\n\n306\n00:16:34.990 --> 00:16:39.311\nI can do anything that's\ngonna return a Boolean value.\n\n307\n00:16:39.311 --> 00:16:43.143\nIf it's gonna return a true or\nfalse, that's all my intel needs or\n\n308\n00:16:43.143 --> 00:16:46.120\nmy wild statement right, true or false.\n\n309\n00:16:46.120 --> 00:16:49.870\nSo let's try to flip that around\njust to see if we can, right.?\n\n310\n00:16:49.870 --> 00:16:54.280\nBecause I said you could really kind of\nflip this around using negatives, right?\n\n311\n00:16:54.280 --> 00:16:59.044\nSo you do the same thing,\nwe could say Notepad in fact\n\n312\n00:16:59.044 --> 00:17:03.716\nyou know Mike copy and\npaste, let's just do this.\n\n313\n00:17:06.950 --> 00:17:11.441\nAll right, so\nwe're gonna take that same one,\n\n314\n00:17:11.441 --> 00:17:15.718\nwe're gonna change this\nto while all right?\n\n315\n00:17:15.718 --> 00:17:23.080\nSo now, we're going to say do Notepad is\nnot running while Notepad is responding.\n\n316\n00:17:23.080 --> 00:17:25.020\nThat doesn't really make sense does it?\n\n317\n00:17:25.020 --> 00:17:26.504\n&gt;&gt; Because if it's responding,\nit's running.\n\n318\n00:17:26.504 --> 00:17:27.216\n&gt;&gt; It is running isn't it?\n\n319\n00:17:27.216 --> 00:17:30.145\n[LAUGH]\n&gt;&gt; So we're going to have to negate this\n\n320\n00:17:30.145 --> 00:17:33.590\nlittle statement here or\nI could just change this.\n\n321\n00:17:33.590 --> 00:17:34.190\n&gt;&gt; Yea.\n\n322\n00:17:34.190 --> 00:17:35.390\n&gt;&gt; Right, I can take this out.\n\n323\n00:17:36.410 --> 00:17:37.538\nYeah, Notepad is running.\n\n324\n00:17:37.538 --> 00:17:41.527\nDo it while Notepad is running,\n\n325\n00:17:41.527 --> 00:17:46.987\nlet's see what happens, execute that.\n\n326\n00:17:46.987 --> 00:17:47.874\n&gt;&gt; It still [LAUGH].\n&gt;&gt; How did I get my numbers\n\n327\n00:17:47.874 --> 00:17:49.320\nback over there.\n\n328\n00:17:49.320 --> 00:17:51.762\nLet's see, Notepad [INAUDIBLE].\n\n329\n00:17:51.762 --> 00:17:54.385\nDid I not highlight the right\n[INAUDIBLE] that again.\n\n330\n00:17:54.385 --> 00:17:59.020\nI think it hit F5 which\nexecuted my entire scrip lock.\n\n331\n00:17:59.020 --> 00:17:59.851\n&gt;&gt; Good.\n\n332\n00:17:59.851 --> 00:18:00.871\n[LAUGH]\n&gt;&gt; Instead of just [INAUDIBLE].\n\n333\n00:18:00.871 --> 00:18:01.772\n&gt;&gt; [LAUGH]\n&gt;&gt; So there you go,\n\n334\n00:18:01.772 --> 00:18:03.654\nit's rifling through notepad,\nit's running,\n\n335\n00:18:03.654 --> 00:18:06.632\nyou might be able to see some blinky\nblink here and there cuz it's continuing.\n\n336\n00:18:06.632 --> 00:18:07.226\n[LAUGH]\n&gt;&gt; Wow.\n\n337\n00:18:07.226 --> 00:18:08.421\n&gt;&gt; So it's just constantly checking.\n\n338\n00:18:08.421 --> 00:18:09.126\n&gt;&gt; Yes.\n\n339\n00:18:09.126 --> 00:18:14.170\nAnd so as soon as I close notepad,\nmissed the steps.\n\n340\n00:18:14.170 --> 00:18:17.987\nAnd I get an error that says can't find\nthe process name of a notepad, alright?\n\n341\n00:18:17.987 --> 00:18:21.624\nThis is a good time, we have a few\nminutes, so this doesn't really,\n\n342\n00:18:21.624 --> 00:18:24.240\nI'm going to hide in a do episode here.\n\n343\n00:18:24.240 --> 00:18:28.218\nWe'll bring it back later, but\nI thought I would mention it.\n\n344\n00:18:28.218 --> 00:18:32.383\nThe get process,\nyou know using this method here, right,\n\n345\n00:18:32.383 --> 00:18:34.477\nwe're getting the process.\n\n346\n00:18:34.477 --> 00:18:38.020\nNotepad is not running\nuntil it turns true.\n\n347\n00:18:38.020 --> 00:18:42.252\nWell, every time it goes through and it\ncan't find Notepad,my condition is false\n\n348\n00:18:42.252 --> 00:18:44.979\nand so my do statement does\nwhat it's supposed to do.\n\n349\n00:18:44.979 --> 00:18:47.180\nBut PowerShell also spits out an error,\nright?\n\n350\n00:18:47.180 --> 00:18:51.302\nWe saw that if I highlight that and\nrun it again.\n\n351\n00:18:51.302 --> 00:18:53.829\nAll right, I'm getting these errors,\nI'm gonna break my script here and\n\n352\n00:18:53.829 --> 00:18:54.640\nget a little control C.\n\n353\n00:18:54.640 --> 00:18:58.275\nAnd so in saying, get process,\ncannot find process with the name notepad.\n\n354\n00:18:58.275 --> 00:19:03.060\nAll right, which is expected,\nits not running so its not finding it.\n\n355\n00:19:03.060 --> 00:19:06.237\nAnd I want to monitor the fact\nthat its not running until it run.\n\n356\n00:19:06.237 --> 00:19:12.840\nMaybe I'm looking at the DNS servers Or\nDHTP Client or DNS Client on a machine.\n\n357\n00:19:12.840 --> 00:19:14.507\nAnd I realize that it's not running,\n\n358\n00:19:14.507 --> 00:19:17.645\nI don't need the error message\ntelling me that, I'm expecting that.\n\n359\n00:19:17.645 --> 00:19:21.380\nBut I need to know when it changes\nstate from not running to running.\n\n360\n00:19:21.380 --> 00:19:24.360\nSo one of the things we can\ndo most commandlets have,\n\n361\n00:19:24.360 --> 00:19:26.409\nyou probably seen it in the Syntax.\n\n362\n00:19:26.409 --> 00:19:29.619\nIf you gone out the tech or\nanything like that or Microsoft Docs.\n\n363\n00:19:31.010 --> 00:19:34.425\nThe common parameters,\none of them is error action.\n\n364\n00:19:34.425 --> 00:19:37.130\nSo we could actually add\nhere an error action.\n\n365\n00:19:37.130 --> 00:19:43.566\nAnd notice where I'm at,\nI'm inside the get process cmdlet.\n\n366\n00:19:43.566 --> 00:19:47.320\nI'm saying hey get the name, here's the\nname of the process I want you to return.\n\n367\n00:19:47.320 --> 00:19:53.731\nThis is just another parameter for\nthe get process cmdlet.\n\n368\n00:19:53.731 --> 00:19:57.840\nAnd I'm gonna choose you can see\nthe options here, as I do error action.\n\n369\n00:19:57.840 --> 00:20:02.257\nContinue, ignore, inquire,\nsilently continue, stop, or suspend.\n\n370\n00:20:02.257 --> 00:20:04.530\nIn this case I wanna silently continue.\n\n371\n00:20:04.530 --> 00:20:08.606\n&gt;&gt; So you'll be alerted but\nyou'll still be iterating that.\n\n372\n00:20:08.606 --> 00:20:10.566\n&gt;&gt; Exactly, so\nnow it's cannot gonna bothered,\n\n373\n00:20:10.566 --> 00:20:13.160\nit's gonna continue on even\nthough it had an error.\n\n374\n00:20:13.160 --> 00:20:15.804\nAnd it's not gonna bother\nprinting it out hopefully.\n\n375\n00:20:15.804 --> 00:20:16.870\nLet's see what happens.\n\n376\n00:20:16.870 --> 00:20:21.447\nSo we'll select that,\nwe'll highlight it, enter or run it.\n\n377\n00:20:21.447 --> 00:20:22.950\n[INAUDIBLE] Then back over here.\n\n378\n00:20:24.460 --> 00:20:29.393\nSo now I notice I don't\nhave the errors going.\n\n379\n00:20:29.393 --> 00:20:37.130\nAnd if I launch notepad I get Notepad has\nbeen started and It stops the script.\n\n380\n00:20:37.130 --> 00:20:42.057\nJust something that I know I kind of threw\nthat in middle of this episode with that\n\n381\n00:20:42.057 --> 00:20:43.024\nerror action.\n\n382\n00:20:43.024 --> 00:20:46.580\nKinda appropriate to use in this scenario.\n\n383\n00:20:46.580 --> 00:20:48.696\nThere we gonna take a look\nat the do statement.\n\n384\n00:20:48.696 --> 00:20:52.304\nRemember the do is gonna work\nin conjunction with while or\n\n385\n00:20:52.304 --> 00:20:55.093\nuntil depends on what you're trying to do.\n\n386\n00:20:55.093 --> 00:21:00.048\nWhile a condition is true, until it turns\nfalse or until a condition is false\n\n387\n00:21:00.048 --> 00:21:04.630\nuntil it turns proved depending on\nwhat you are trying to accomplish.\n\n388\n00:21:05.760 --> 00:21:11.119\n&gt;&gt; Alright, pretty cool Mike, thank you\nfor showing us our new statements today.\n\n389\n00:21:11.119 --> 00:21:12.769\n[LAUGH].\n\n390\n00:21:12.769 --> 00:21:14.770\n&gt;&gt; And I'll just leave it at that,\nbut anyway.\n\n391\n00:21:14.770 --> 00:21:18.560\nThank you for joining us as well, but we\nstill have one more statement that we want\n\n392\n00:21:18.560 --> 00:21:20.639\nto cover, so I hope you don't go anywhere.\n\n393\n00:21:20.639 --> 00:21:23.610\nBut for this show we'll sign out,\nI've been your host Cherokee Boose.\n\n394\n00:21:23.610 --> 00:21:24.487\n&gt;&gt; And I'm Mike Rodrick.\n\n395\n00:21:24.487 --> 00:21:25.840\n&gt;&gt; See you next time here at ITProTV.\n\n396\n00:21:33.170 --> 00:21:36.441\n[MUSIC]\n&gt;&gt; Thank you for watching ITProTV..\n\n",
          "vimeoId": "242970855"
        },
        {
          "description": "In this episode, you will learn how to construct a while statement. While statements run commands in a command block as long as a conditional test evaluates to true.",
          "length": "753",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-6-1-while_statements-111317-PGM.00_12_19_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-6-1-while_statements-111317-PGM.00_12_19_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-3-6-1-while_statements-111317-PGM.00_12_19_07.Still001-sm.jpg",
          "title": "While Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:03.376\nWelcome to ITPro.TV,\nI'm your host Don Pezet.\n\n2\n00:00:03.376 --> 00:00:03.882\n[CROSSTALK]\n\n3\n00:00:03.882 --> 00:00:05.681\n[MUSIC]\n\n4\n00:00:05.681 --> 00:00:10.150\n&gt;&gt; You're watching ITPro.TV.\n\n5\n00:00:10.150 --> 00:00:14.755\n&gt;&gt; Welcome ladies and gentlemen to\nyour PowerShell Scripting series.\n\n6\n00:00:14.755 --> 00:00:16.670\nI'm your show host Cherokee Boose.\n\n7\n00:00:16.670 --> 00:00:18.688\nWe've been waiting quite awhile for\n\n8\n00:00:18.688 --> 00:00:22.732\nthis specific episode where we will\nbe taking a look at while statements.\n\n9\n00:00:22.732 --> 00:00:26.050\nAnd with us today, back in studios,\nwe have Mr. Mike Roderick.\n\n10\n00:00:26.050 --> 00:00:26.812\nHow's it going today, Mike?\n\n11\n00:00:26.812 --> 00:00:27.974\n&gt;&gt; Doing good, Cherokee.\n\n12\n00:00:27.974 --> 00:00:29.680\n&gt;&gt; [LAUGH]\n&gt;&gt; Very clever, I like that one.\n\n13\n00:00:29.680 --> 00:00:30.332\n&gt;&gt; You sick of my jokes yet?\n\n14\n00:00:30.332 --> 00:00:33.400\n[LAUGH]\n&gt;&gt; No, no, keep them coming.\n\n15\n00:00:33.400 --> 00:00:37.785\nAnd you are right, we are going\nto do our while statements today.\n\n16\n00:00:37.785 --> 00:00:40.760\nThis one is probably gonna be\na little of a short episode.\n\n17\n00:00:40.760 --> 00:00:44.438\nIt could have easily gone with\nthe do untils and the do whiles,\n\n18\n00:00:44.438 --> 00:00:46.508\nif you've watched that episode.\n\n19\n00:00:46.508 --> 00:00:48.641\nIf you haven't make sure\nyou go check it out, but\n\n20\n00:00:48.641 --> 00:00:51.570\nI kind of wanted to keep everything\nseparate in your episode list.\n\n21\n00:00:51.570 --> 00:00:55.362\nSo if you're looking for just while\nstatements, you're in the right spot, but\n\n22\n00:00:55.362 --> 00:00:57.275\nthere's not a lot to a while statement.\n\n23\n00:00:57.275 --> 00:01:01.210\nLet's take a look at my screen, and\nI will show you exactly what I mean.\n\n24\n00:01:01.210 --> 00:01:07.204\nSo here is our syntax while (condition)\n\n25\n00:01:07.204 --> 00:01:13.032\n{ &lt;statement list&gt; }, that's it.\n\n26\n00:01:13.032 --> 00:01:15.090\nIt's pretty darn simple, right?\n\n27\n00:01:15.090 --> 00:01:18.192\nVery similar to what we saw\nwith our do statements, right?\n\n28\n00:01:18.192 --> 00:01:21.610\nHave you noticed the difference yet,\nCherookee?\n\n29\n00:01:21.610 --> 00:01:23.308\n&gt;&gt; No, and\nI'm trying to like break it on down-\n\n30\n00:01:23.308 --> 00:01:23.993\n&gt;&gt; Right.\n\n31\n00:01:23.993 --> 00:01:25.457\n&gt;&gt; Sometimes you have\nto talk slowly to me.\n\n32\n00:01:25.457 --> 00:01:28.169\n[LAUGH]\n&gt;&gt; Let me dump some space in here, so\n\n33\n00:01:28.169 --> 00:01:30.595\nthat we can really focus on just that.\n\n34\n00:01:30.595 --> 00:01:34.058\n&gt;&gt; Okay.\n&gt;&gt; And we'll do the same thing over here,\n\n35\n00:01:34.058 --> 00:01:36.478\nso we can really focus on that.\n\n36\n00:01:36.478 --> 00:01:40.789\nHere's my do statement,\nI've got do keyword\n\n37\n00:01:40.789 --> 00:01:45.328\nopening brace statement\nlist while condition.\n\n38\n00:01:45.328 --> 00:01:48.600\nHere, I have while\ncondition statement list.\n\n39\n00:01:50.920 --> 00:01:52.202\n&gt;&gt; They seems similar.\n\n40\n00:01:52.202 --> 00:01:53.970\n&gt;&gt; They are very, very similar.\n\n41\n00:01:53.970 --> 00:01:55.265\n&gt;&gt; [LAUGH] I can't point\nout the difference.\n\n42\n00:01:55.265 --> 00:01:58.412\n&gt;&gt; Here's what I want you all to notice,\nall right?\n\n43\n00:01:58.412 --> 00:02:01.080\nIs where this is.\n\n44\n00:02:01.080 --> 00:02:04.804\nNotice the condition in a do\nstatement comes at the end.\n\n45\n00:02:04.804 --> 00:02:06.591\n&gt;&gt; Yes.\n&gt;&gt; After the key word while or\n\n46\n00:02:06.591 --> 00:02:08.830\nafter the key word until, right?\n\n47\n00:02:08.830 --> 00:02:12.246\nDepending on if we're looking for\ntrue to false or false to true.\n\n48\n00:02:12.246 --> 00:02:15.515\nWell the while statement,\nlook where the condition is.\n\n49\n00:02:15.515 --> 00:02:19.110\nAt the beginning,\nbefore my statement list, right?\n\n50\n00:02:19.110 --> 00:02:24.540\nAnd that's gonna make a difference\nin what we do with this, right?\n\n51\n00:02:24.540 --> 00:02:27.950\nOr so what we do with this, but-\n&gt;&gt; How it reads it exactly.\n\n52\n00:02:27.950 --> 00:02:31.017\n&gt;&gt; Yes, exactly, so\nlet me bring my notes back up here.\n\n53\n00:02:31.017 --> 00:02:35.939\nAll right, because remember one\nof the things that we said about\n\n54\n00:02:35.939 --> 00:02:40.690\na do statement is that this will\nalways execute at least once.\n\n55\n00:02:40.690 --> 00:02:43.241\nBecause we do, and\nthen we check the condition,\n\n56\n00:02:43.241 --> 00:02:45.960\ncuz the condition comes at the end.\n\n57\n00:02:45.960 --> 00:02:48.150\nSo what do you think about this,\nwith the condition at the beginning?\n\n58\n00:02:48.150 --> 00:02:52.880\n&gt;&gt; Well, if your object or\nwhat is the word I should use?\n\n59\n00:02:52.880 --> 00:02:54.486\n&gt;&gt; Condition?\n&gt;&gt; If your condition is not met,\n\n60\n00:02:54.486 --> 00:02:56.830\nthen I don't think it would continue.\n\n61\n00:02:56.830 --> 00:02:57.772\n&gt;&gt; You're exactly right.\n\n62\n00:02:57.772 --> 00:02:59.607\n&gt;&gt; Okay.\n&gt;&gt; So with a while loop,\n\n63\n00:02:59.607 --> 00:03:03.040\nthese statements won't always execute.\n\n64\n00:03:03.040 --> 00:03:07.170\nWith the do loop, the statements\nalways execute at least once, and\n\n65\n00:03:07.170 --> 00:03:09.830\nthen more potentially\nbased on your condition.\n\n66\n00:03:09.830 --> 00:03:15.290\nWith while statements, this is only\nexecuted while the condition is true.\n\n67\n00:03:15.290 --> 00:03:17.637\nBut the condition is checked\nat the very beginning,\n\n68\n00:03:17.637 --> 00:03:19.727\nbefore the statements are executed, right?\n\n69\n00:03:19.727 --> 00:03:23.482\nSo if it comes to this line of code and\nthe condition is false,\n\n70\n00:03:23.482 --> 00:03:28.770\nit does not execute your statement list,\nand it just moves on through, right?\n\n71\n00:03:28.770 --> 00:03:32.560\nThat's the big difference with the while\nstatements versus the do statements.\n\n72\n00:03:32.560 --> 00:03:38.520\nDo always execute once, while's only\nexecute if my condition is true.\n\n73\n00:03:38.520 --> 00:03:41.660\nAnd then again,\ndepending on what we're trying to do,\n\n74\n00:03:41.660 --> 00:03:47.260\nthis could be a, let's say we're trying\nto write a new log file, all right?\n\n75\n00:03:47.260 --> 00:03:49.912\nOr something, I don't know, I'm trying\nto think of an example really quick.\n\n76\n00:03:49.912 --> 00:03:52.979\nWith a do statement, I know I'm gonna\nwrite it and then the next time through if\n\n77\n00:03:52.979 --> 00:03:56.780\nit already exists, I don't wanna write it\nagain, maybe that could be my condition.\n\n78\n00:03:56.780 --> 00:03:58.132\nWith the while statement,\n\n79\n00:03:58.132 --> 00:04:02.030\nit's gonna check to see if it's there\nfirst then create it if it's not there.\n\n80\n00:04:02.030 --> 00:04:06.000\nBut only if it's not there depending\non how we set up our condition.\n\n81\n00:04:06.000 --> 00:04:10.642\nSo I guess that the moral of the story\nis do loops, if you want the code to\n\n82\n00:04:10.642 --> 00:04:15.985\nalways execute ones, and\nthen execute again based on the condition.\n\n83\n00:04:15.985 --> 00:04:16.858\nWhile loops,\n\n84\n00:04:16.858 --> 00:04:21.528\nif you only need the code to execute\nwhen a certain condition is met, right?\n\n85\n00:04:21.528 --> 00:04:26.517\nSo let's test it out here we got a =\n0 we will run that to initialize our\n\n86\n00:04:26.517 --> 00:04:27.794\nvariable there.\n\n87\n00:04:27.794 --> 00:04:32.940\nAnd then I got while a is less than\n10 print out a and then increment a.\n\n88\n00:04:33.990 --> 00:04:36.825\nSo we will highlight it,\nexecute it with our F8 or\n\n89\n00:04:36.825 --> 00:04:40.345\nour little play button there and\nwe get 0 through 9, right?\n\n90\n00:04:40.345 --> 00:04:45.610\nIt does the same thing with our\nother loops, a started out at 0,\n\n91\n00:04:45.610 --> 00:04:52.846\nso a is less than 10, 0 is less than 10,\nso print it, increment it, all the way up.\n\n92\n00:04:52.846 --> 00:04:58.420\nLast time through, we incremented\nit was 8 we incremented a is now 9.\n\n93\n00:04:58.420 --> 00:05:02.370\nWhile 9 is less than 10, that's true, so\n\n94\n00:05:02.370 --> 00:05:06.691\nprint it, increment it, a is now 10.\n\n95\n00:05:06.691 --> 00:05:11.261\nNext time through, while 10 is less\nthan 10, 10 is not less than 10.\n\n96\n00:05:11.261 --> 00:05:16.640\nSo we do not print the 10, we don't\nincrement anymore and we are done.\n\n97\n00:05:16.640 --> 00:05:19.753\nWe call back $a now, it should equal 10.\n\n98\n00:05:19.753 --> 00:05:24.790\nBut 10 didn't get printed,\nbecause that doesn't meet my condition.\n\n99\n00:05:24.790 --> 00:05:29.147\nSo it did increment it, but it didn't\nprint it, and it ended my loop, right?\n\n100\n00:05:29.147 --> 00:05:32.934\nIf we woulda said a is less than or\nequal to 10,\n\n101\n00:05:32.934 --> 00:05:37.210\nthen we would get the 10\nincluded in there, right?\n\n102\n00:05:37.210 --> 00:05:40.990\nOops, I'm gonna reset that back to 0.\n\n103\n00:05:40.990 --> 00:05:42.984\nIt was already at 10.\n\n104\n00:05:42.984 --> 00:05:45.070\n&gt;&gt; 10.\n&gt;&gt; We weren't gonna get too far, yeah,\n\n105\n00:05:45.070 --> 00:05:47.387\nthere we go,\n0 through 10 this time, right?\n\n106\n00:05:47.387 --> 00:05:54.270\nChanging my operator,\nit changes my outcome there.\n\n107\n00:05:54.270 --> 00:05:57.971\nAll right, so very similar to what we\ndid earlier I've got the same statement.\n\n108\n00:05:57.971 --> 00:06:02.240\nNow we're just saying while, but\nthis time I am using the not, right?\n\n109\n00:06:02.240 --> 00:06:06.977\nI could add the keyword not the bang,\nthe exclamation point,\n\n110\n00:06:06.977 --> 00:06:09.995\nall these new terms you guys are using.\n\n111\n00:06:09.995 --> 00:06:12.186\n&gt;&gt; [LAUGH]\n&gt;&gt; For the exclamation point there,\n\n112\n00:06:12.186 --> 00:06:12.951\nevery heard that?\n\n113\n00:06:12.951 --> 00:06:13.970\nThat's the bang.\n\n114\n00:06:13.970 --> 00:06:14.470\n&gt;&gt; No.\n&gt;&gt; Yeah, I don't know-\n\n115\n00:06:14.470 --> 00:06:14.970\n&gt;&gt; No.\n\n116\n00:06:14.970 --> 00:06:16.810\n&gt;&gt; If that's a coder thing, but\n\n117\n00:06:16.810 --> 00:06:20.440\nthat is my bang statement or\nmy bang character.\n\n118\n00:06:20.440 --> 00:06:23.413\nSo here I'm saying get process,\nname Notepad,\n\n119\n00:06:23.413 --> 00:06:27.552\nI'm including our error action\nsilently continue.responding.\n\n120\n00:06:27.552 --> 00:06:31.830\nSo that would normally return true,\nif Notepad is running.\n\n121\n00:06:31.830 --> 00:06:37.930\nIt would return false if notepad is not\nrunning, but I'm saying not, right?\n\n122\n00:06:37.930 --> 00:06:42.440\nSo I'm going to reverse that,\nnormally again,\n\n123\n00:06:42.440 --> 00:06:46.740\nthis would equal true\nif notepad was running.\n\n124\n00:06:46.740 --> 00:06:48.805\nBut if I change that to a not,\n\n125\n00:06:48.805 --> 00:06:53.982\nnow it's gonna be true when Notepad\nis not running, twisted, right?\n\n126\n00:06:53.982 --> 00:06:54.990\n&gt;&gt; Yes.\n\n127\n00:06:54.990 --> 00:06:56.936\n&gt;&gt; All right, let's execute it,\nand see what happens.\n\n128\n00:06:56.936 --> 00:07:00.565\nClick that, and\nwe will run it with a little F8 action.\n\n129\n00:07:00.565 --> 00:07:04.465\nSo Notepad is not running, but\nas soon as I launch Notepad,\n\n130\n00:07:04.465 --> 00:07:09.700\nI get Notepad has been started, and\nthe process ends, and Notepad is running.\n\n131\n00:07:09.700 --> 00:07:11.935\nAs I close Notepad it doesn't\nstart up again, right?\n\n132\n00:07:11.935 --> 00:07:13.040\nCuz I'm not looping through the while.\n\n133\n00:07:13.040 --> 00:07:14.630\n&gt;&gt; It's completed.\n\n134\n00:07:14.630 --> 00:07:16.821\n&gt;&gt; Exactly, we put a loop outside of that.\n\n135\n00:07:16.821 --> 00:07:18.831\nSo again, a little bit confusing,\nlet's take a look.\n\n136\n00:07:18.831 --> 00:07:22.364\nI'm gonna switch up here,\ncuz that line of code is a little long,\n\n137\n00:07:22.364 --> 00:07:24.440\nI'm not using my line continuation.\n\n138\n00:07:24.440 --> 00:07:29.900\nSo if you look at this, if you think\nabout how this is happening, right?\n\n139\n00:07:29.900 --> 00:07:37.194\nSo let's do a get-, in fact,\nlet's just do a copy and paste right here.\n\n140\n00:07:37.194 --> 00:07:41.851\nWe'll just copy and paste this, right.\n\n141\n00:07:41.851 --> 00:07:47.841\nAnd we'll execute that line, [COUGH]\nwhoops and I'm missing a parenthesis\n\n142\n00:07:47.841 --> 00:07:52.700\nout of the beginning there,\nlet's try that again, right?\n\n143\n00:07:55.050 --> 00:07:59.652\nAs soon as I get nothing back, get-Process\n-Name notepad SilentlyContinue Responding,\n\n144\n00:07:59.652 --> 00:08:00.660\nI get nothing back.\n\n145\n00:08:00.660 --> 00:08:07.360\nBut if I change this, if I put not symbol\nout in front of it, and execute that.\n\n146\n00:08:07.360 --> 00:08:08.799\nNotice I get a true back, right?\n\n147\n00:08:08.799 --> 00:08:15.980\nSo I'm using the not to reverse\nwhat is true, if that makes sense.\n\n148\n00:08:15.980 --> 00:08:18.439\nAgain, I know that that's\nprobably a little confusing,\n\n149\n00:08:18.439 --> 00:08:20.955\nyou got to have to kinda play\naround with this, test it out.\n\n150\n00:08:20.955 --> 00:08:24.700\nAnd do what I'm doing, as I'm writing\nthese kind of scripts, I do exactly this.\n\n151\n00:08:24.700 --> 00:08:29.290\nI wouldn't call these scripts yet,\nbut I take it piece by piece.\n\n152\n00:08:29.290 --> 00:08:32.960\nWhen I'm setting up a demo for this,\nI'm like what do I wanna show?\n\n153\n00:08:32.960 --> 00:08:36.280\nLet's do a little get process, right?\n\n154\n00:08:36.280 --> 00:08:39.945\nAnd I'll say, okay, well I would\nprobably be doing it down here.\n\n155\n00:08:39.945 --> 00:08:43.601\nGet-Process,iIt returns\nall those processes, but\n\n156\n00:08:43.601 --> 00:08:46.787\nI don't want all of them,\nI just want Notepad.\n\n157\n00:08:46.787 --> 00:08:50.375\nSo I know there's a parameter name,\nhow do I know there's a parameter name?\n\n158\n00:08:50.375 --> 00:08:55.890\nGet-Process, pipe that into get-member,\nright?\n\n159\n00:08:55.890 --> 00:08:57.804\nWe've seen this before, so\n\n160\n00:08:57.804 --> 00:09:03.396\nthere's all of my properties that are\nassociated with a process, get-members.\n\n161\n00:09:03.396 --> 00:09:05.702\nSo I know that I can go in there and\n\n162\n00:09:05.702 --> 00:09:09.810\nI can say, there is a,\nfirst now, I can't find it.\n\n163\n00:09:13.224 --> 00:09:14.898\nThere's a property called name somewhere.\n\n164\n00:09:14.898 --> 00:09:19.120\n[INAUDIBLE]\n&gt;&gt; Display name?\n\n165\n00:09:19.120 --> 00:09:20.834\n&gt;&gt; Yeah, there's display name and\nthere should be name-\n\n166\n00:09:20.834 --> 00:09:21.660\n&gt;&gt; Just a name?\n\n167\n00:09:22.798 --> 00:09:23.899\n&gt;&gt; Wait, no, I'm sorry,\nI'm not looking for name.\n\n168\n00:09:23.899 --> 00:09:27.300\nI'm looking for responder, there we go.\n\n169\n00:09:27.300 --> 00:09:29.894\nHelps if you're looking for\nthe right thing Mike.\n\n170\n00:09:29.894 --> 00:09:34.343\nRight there, I can see that there's\na property called responding,\n\n171\n00:09:34.343 --> 00:09:35.436\nit is a Boolean.\n\n172\n00:09:35.436 --> 00:09:37.732\nAnd so it returns true or false, right?\n\n173\n00:09:37.732 --> 00:09:41.030\nSo I'm like that's a good one,\nI like that one.\n\n174\n00:09:41.030 --> 00:09:44.262\nSo now I know that I can say get,\nI was doing name when I was doing that\n\n175\n00:09:44.262 --> 00:09:45.115\n&gt;&gt; Member.\n\n176\n00:09:45.115 --> 00:09:46.800\n&gt;&gt; The member, but yeah, you get the idea.\n\n177\n00:09:46.800 --> 00:09:48.040\nSo -name notepad, right?\n\n178\n00:09:48.040 --> 00:09:49.248\nAnd you know what?\n\n179\n00:09:49.248 --> 00:09:54.150\nIt's actually not name,\nwhat did I do with that?\n\n180\n00:09:54.150 --> 00:10:00.930\nIt should be,\nNotepad is not running, sorry.\n\n181\n00:10:00.930 --> 00:10:05.150\nIn this case, fire up Notepad\nbefore you start testing this out.\n\n182\n00:10:05.150 --> 00:10:06.865\nNow, I should be able to return Notepad.\n\n183\n00:10:06.865 --> 00:10:07.520\n&gt;&gt; Okay.\n\n184\n00:10:07.520 --> 00:10:10.170\n&gt;&gt; There was no process Notepad\nwithout Notepad running.\n\n185\n00:10:10.170 --> 00:10:13.580\nSo as I'm testing again,\nI'm just kinda walking through this.\n\n186\n00:10:13.580 --> 00:10:17.699\nAnd then I just keep adding to it to try\nto get the results that I'm looking for.\n\n187\n00:10:17.699 --> 00:10:22.856\nSo maybe that'll help you guys as\nyou're playing around with PowerShell,\n\n188\n00:10:22.856 --> 00:10:25.710\nbut back to the topic at hand.\n\n189\n00:10:25.710 --> 00:10:28.764\nThe while statement, again,\nit's very, very similar to the do,\n\n190\n00:10:28.764 --> 00:10:30.004\nthe do statement, right?\n\n191\n00:10:30.004 --> 00:10:33.818\nI am gonna have my keyword and\nthen the block that I want to execute.\n\n192\n00:10:33.818 --> 00:10:37.622\nThe big difference and the one that you\nhave got to remember is that dos always\n\n193\n00:10:37.622 --> 00:10:39.290\nexecute the code at least once.\n\n194\n00:10:39.290 --> 00:10:43.254\nWhile's only execute the code,\nif the condition is true.\n\n195\n00:10:43.254 --> 00:10:48.020\nAnd as you see with my whole get Notepad,\nwhether it's running or not.\n\n196\n00:10:48.020 --> 00:10:53.470\nI can use the do while, I can use the do\nuntil, I can use the while statement.\n\n197\n00:10:53.470 --> 00:10:57.260\nAll three of those,\nI was able to get the exact same results.\n\n198\n00:10:57.260 --> 00:11:01.030\nNotepad is not running continuously\nuntil Notepad was running,\n\n199\n00:11:01.030 --> 00:11:05.380\nand then it said Notepad has started and\nit stopped my loop.\n\n200\n00:11:05.380 --> 00:11:06.149\nWhich one was easier?\n\n201\n00:11:06.149 --> 00:11:10.395\nReally depends on what condition\nyou're testing a lot of times or\n\n202\n00:11:10.395 --> 00:11:12.180\nwhat you're trying to do.\n\n203\n00:11:12.180 --> 00:11:16.110\nSo any one of those could\nbe used in this scenario.\n\n204\n00:11:16.110 --> 00:11:19.280\nSo you get a little bit of flexibility\nwith those three different statements\n\n205\n00:11:19.280 --> 00:11:21.320\nto accomplish what it is\nyou're trying to accomplish.\n\n206\n00:11:21.320 --> 00:11:23.360\nWhich we're going to tie in again,\n\n207\n00:11:23.360 --> 00:11:28.000\nI know some of these statements\nare a little meek on their own.\n\n208\n00:11:28.000 --> 00:11:30.331\nbut once you start putting\nthem into scripts,\n\n209\n00:11:30.331 --> 00:11:32.190\nwhich we're going to do real soonn.\n\n210\n00:11:32.190 --> 00:11:36.480\nYou'll say,\nI'm glad I learned that four statement.\n\n211\n00:11:36.480 --> 00:11:39.872\nI really need this wild statement\nin this loop or in this script.\n\n212\n00:11:39.872 --> 00:11:42.010\n&gt;&gt; I know,\nI'm over here itching ready to go.\n\n213\n00:11:42.010 --> 00:11:42.673\nHave I graduated yet?\n\n214\n00:11:42.673 --> 00:11:44.890\n&gt;&gt; [LAUGH]\n&gt;&gt; To our actual scripting here, or\n\n215\n00:11:44.890 --> 00:11:46.553\nwhat are we looking at for the timeline?\n\n216\n00:11:46.553 --> 00:11:47.123\nI need to know.\n\n217\n00:11:47.123 --> 00:11:47.994\n&gt;&gt; Soon, soon.\n\n218\n00:11:47.994 --> 00:11:49.342\n&gt;&gt; [LAUGH]\n&gt;&gt; Probably,\n\n219\n00:11:49.342 --> 00:11:54.050\nI think it ends all of the different\nstatements that we need.\n\n220\n00:11:54.050 --> 00:11:55.617\n&gt;&gt; Okay.\n&gt;&gt; So we've gone through all of our\n\n221\n00:11:55.617 --> 00:11:59.380\noperators, we've gone through all\nof our constructs at this point.\n\n222\n00:11:59.380 --> 00:12:01.476\nI think we're ready to\nstart writing a script.\n\n223\n00:12:01.476 --> 00:12:01.982\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH]\n\n224\n00:12:01.982 --> 00:12:04.090\n&gt;&gt; All right, we're growing up, guys.\n\n225\n00:12:04.090 --> 00:12:05.355\nAren't you so proud?\n\n226\n00:12:05.355 --> 00:12:06.972\n&gt;&gt; [LAUGH]\n&gt;&gt; But thank you, Mike, for\n\n227\n00:12:06.972 --> 00:12:08.320\nyour time as always.\n\n228\n00:12:08.320 --> 00:12:10.342\nAnd thank you for joining us as well,\nbut you can't miss this part,\n\n229\n00:12:10.342 --> 00:12:11.597\nwe're actually gonna get working here.\n\n230\n00:12:11.597 --> 00:12:14.170\nSo stay tuned for what we have next.\n\n231\n00:12:14.170 --> 00:12:16.048\nWell sign up for this show,\nI've been your host, Cherokee Boose\n\n232\n00:12:16.048 --> 00:12:16.962\n&gt;&gt; And I'm Mike Roderick.\n\n233\n00:12:16.962 --> 00:12:21.080\n&gt;&gt; See you next time\n\n234\n00:12:21.080 --> 00:12:26.110\nhere at ITPro.TV.\n\n235\n00:12:26.110 --> 00:12:28.466\n[MUSIC]\n&gt;&gt; Thank you for watching ITPro.TV.\n\n",
          "vimeoId": "242970239"
        },
        {
          "description": "In this episode, we will use the knowledge from the previous episodes to write a PowerShell script. We will go through the process of taking a repetitive task and creating a script that will help automate the process.",
          "length": "1944",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-1-1-writing_a_script-111417-PGM.00_32_08_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-1-1-writing_a_script-111417-PGM.00_32_08_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-1-1-writing_a_script-111417-PGM.00_32_08_20.Still001-sm.jpg",
          "title": "Writing a Script",
          "transcript": "WEBVTT\n\n1\n00:00:00.006 --> 00:00:01.195\nWelcome to ITProTV.\n\n2\n00:00:01.195 --> 00:00:03.709\n&gt;&gt; [CROSSTALK]\n&gt;&gt; Coming at you\n\n3\n00:00:03.709 --> 00:00:05.396\nlive from San Francisco California.\n\n4\n00:00:05.396 --> 00:00:10.952\n&gt;&gt; [CROSSTALK]\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.210 --> 00:00:15.340\n&gt;&gt; Welcome to your PowerShell\nscripting theories, I'm your show host\n\n6\n00:00:15.340 --> 00:00:18.700\nCherokee Boose, and this is the episode\nthat we've all been waiting for,\n\n7\n00:00:18.700 --> 00:00:21.590\nwe actually get to write\na script in this episode, and\n\n8\n00:00:21.590 --> 00:00:24.240\nof course, with us today we have Mr.\nMike Roderick.\n\n9\n00:00:24.240 --> 00:00:25.830\nThank you for joining us Mike,\nhow's it going?\n\n10\n00:00:25.830 --> 00:00:28.770\n&gt;&gt; It's going great,\nhas the anticipation been killing you?\n\n11\n00:00:28.770 --> 00:00:29.740\n&gt;&gt; I know, this is, like I said,\n\n12\n00:00:29.740 --> 00:00:32.410\nthere's the little culmination of\neverything we've been looking at so\n\n13\n00:00:32.410 --> 00:00:35.580\nfar and we actually get to use all\nthat information that we've gathered.\n\n14\n00:00:35.580 --> 00:00:38.380\n&gt;&gt; Yeah.\nIt was all for a good purpose, right?\n\n15\n00:00:38.380 --> 00:00:42.160\nWe've gone through a lot of\nepisodes laying that groundwork and\n\n16\n00:00:42.160 --> 00:00:46.410\nlearning about variables and\ncomparison operators and\n\n17\n00:00:46.410 --> 00:00:50.400\nlogical operators, all the different\noperators, constructs, statements.\n\n18\n00:00:50.400 --> 00:00:54.270\nYeah, our ifs, and our do's and\nour whys and all that fun stuff.\n\n19\n00:00:54.270 --> 00:00:58.490\nAnd the reason we were learning all that\nwas so we could eventually write a script,\n\n20\n00:00:58.490 --> 00:01:00.580\nright, so that we could start\nautomating some things.\n\n21\n00:01:00.580 --> 00:01:03.030\nSo that is what we're going to\ndo in this particular episode.\n\n22\n00:01:03.030 --> 00:01:07.040\nI'm just gonna kinda, I picked a topic and\nagain, one of the things I want to\n\n23\n00:01:07.040 --> 00:01:11.870\nsay when we talk about writing scripts\nis a couple of things I guess, not one,\n\n24\n00:01:11.870 --> 00:01:14.600\njust a couple of things I wanna\nsay about writing scripts.\n\n25\n00:01:14.600 --> 00:01:18.860\nOne is that there is different\nways to do things, right?\n\n26\n00:01:18.860 --> 00:01:25.910\nWe've seen like do whiles and do untils\nand while loops and ifs and switches.\n\n27\n00:01:25.910 --> 00:01:29.780\nThere's always more than one way\nto accomplish something, and\n\n28\n00:01:29.780 --> 00:01:31.920\nI don't know that there's a right way.\n\n29\n00:01:31.920 --> 00:01:35.450\nThere might be more efficient ways and\nless efficient ways, but\n\n30\n00:01:35.450 --> 00:01:38.770\nI don't know that there's necessarily\na right way to do things,\n\n31\n00:01:38.770 --> 00:01:41.620\nespecially when it comes to scripting,\nright?\n\n32\n00:01:41.620 --> 00:01:45.360\nTalking to Justin,\nmost of you guys have seen Justin,\n\n33\n00:01:45.360 --> 00:01:48.160\nif you haven't,\nyou really should check out dev pro tv.\n\n34\n00:01:48.160 --> 00:01:50.330\nWas talking to him about it and\nhe was, you know script,\n\n35\n00:01:50.330 --> 00:01:53.930\none of the things that he said that stuck\nwith me was that scripting was typically\n\n36\n00:01:53.930 --> 00:01:56.460\nconsidered the down and\ndirty thing, right?\n\n37\n00:01:56.460 --> 00:01:59.900\nYou're trying to accomplish something,\nyou're trying to get something done, and\n\n38\n00:01:59.900 --> 00:02:01.030\nyou're writing a script.\n\n39\n00:02:01.030 --> 00:02:03.590\nYou're using a scripting language\nlike in our case PowerShell\n\n40\n00:02:03.590 --> 00:02:06.930\njust to get a task done something\nyou have to do all the time.\n\n41\n00:02:06.930 --> 00:02:10.790\nIt's repetitive and you'd like to automate\nit or you'd like to give the ability to\n\n42\n00:02:10.790 --> 00:02:15.270\nother people, To be able to do this task\nwithout teaching them inner workings of\n\n43\n00:02:15.270 --> 00:02:18.870\nwhat you actually have to do you can\nwrite a script, have them provide\n\n44\n00:02:18.870 --> 00:02:23.140\na couple parameters and it does all the\nheavy lifting in the background right, so\n\n45\n00:02:23.140 --> 00:02:26.420\na lot of times scripts are,\nlike Justin says kind of down and\n\n46\n00:02:26.420 --> 00:02:29.280\ndirty just trying to get the job done, so\n\n47\n00:02:29.280 --> 00:02:33.910\ndon't think about it like, you know,\nI should use this instead of this.\n\n48\n00:02:33.910 --> 00:02:38.870\nIt's what gets the job done and\nis readable and understandable.\n\n49\n00:02:38.870 --> 00:02:42.370\nIf you can look at it and go that makes\nsense to me, and if somebody else can pick\n\n50\n00:02:42.370 --> 00:02:46.850\nup your script and go, I understand what\nyou're doing here, then you're fine.\n\n51\n00:02:46.850 --> 00:02:50.350\nUsed an if instead of a switch Okay,\n\n52\n00:02:50.350 --> 00:02:56.520\nmay be that was the way you wanted to go,\nit's really not an exact size.\n\n53\n00:02:56.520 --> 00:02:59.790\nThere's an art to writing scripts I\nguess is another good way to look\n\n54\n00:02:59.790 --> 00:03:01.000\nat it, all right?\n\n55\n00:03:01.000 --> 00:03:04.570\nAnd I say that because you might\nlook at my script and say, wow,\n\n56\n00:03:04.570 --> 00:03:06.600\nwhy in the heck would you do it that way?\n\n57\n00:03:06.600 --> 00:03:08.760\nWell you might have a different way,\nmight be better,\n\n58\n00:03:08.760 --> 00:03:12.730\nmight, it's just your thing, and feel free\nto throw out things, you know suggestions,\n\n59\n00:03:12.730 --> 00:03:15.370\nbecause if you guys think, wow,\nMike you should really try this,\n\n60\n00:03:15.370 --> 00:03:17.430\nI'd love to pick up on\nwhat you guys have to say.\n\n61\n00:03:19.260 --> 00:03:24.240\nSo, and two,\nwe can't possibly accomplish everything,\n\n62\n00:03:24.240 --> 00:03:28.060\nall right, so what I've done, is I\nkind of picked a topic that I knew was\n\n63\n00:03:28.060 --> 00:03:31.160\nrelatively easy to work with,\nand more than anything,\n\n64\n00:03:31.160 --> 00:03:35.380\nI was looking at how can I fit in\nthe stuff that we've learned already?\n\n65\n00:03:35.380 --> 00:03:38.110\nHow can I get an if statement in here,\na do statement in here?\n\n66\n00:03:38.110 --> 00:03:41.330\nHow can I include some of\nthat stuff into our script?\n\n67\n00:03:41.330 --> 00:03:45.830\nSo I tried to pick something that was\nmeaningful and could be useful, but\n\n68\n00:03:45.830 --> 00:03:49.090\njust understand that we're not doing\neverything you're possibly gonna need to\n\n69\n00:03:49.090 --> 00:03:50.390\ndo with PowerShell.\n\n70\n00:03:50.390 --> 00:03:54.950\nBut this, when you are taking this and\nunderstanding what the script is doing but\n\n71\n00:03:54.950 --> 00:03:58.780\nthen stepping back and look at the bigger\npicture of you're taking something,\n\n72\n00:03:58.780 --> 00:04:02.300\nmanipulating it, doing this right cuz\nthen you can take that skill set and\n\n73\n00:04:02.300 --> 00:04:03.830\napply it to another set of [INAUDIBLE].\n\n74\n00:04:03.830 --> 00:04:07.880\nMaybe if we're working with processes,\nyou need to work with servers or\n\n75\n00:04:07.880 --> 00:04:10.310\nservices or user accounts.\n\n76\n00:04:10.310 --> 00:04:13.580\nAnd the concept should transfer over and\nit's a different object so it\n\n77\n00:04:13.580 --> 00:04:17.110\nmight be slightly different in there but\nthe general idea is going to be the same.\n\n78\n00:04:17.110 --> 00:04:19.830\nSo hopefully we'll have some fun,\nwe'll write some scripts,\n\n79\n00:04:19.830 --> 00:04:21.880\nwe'll have some cool\nstuff to look at here.\n\n80\n00:04:21.880 --> 00:04:22.990\n&gt;&gt; All right so where do we begin?\n\n81\n00:04:22.990 --> 00:04:24.290\nAre we gonna start scripts now?\n\n82\n00:04:24.290 --> 00:04:25.270\n&gt;&gt; We are.\n\n83\n00:04:25.270 --> 00:04:26.570\n&gt;&gt; Okay.\n&gt;&gt; You're like come on,\n\n84\n00:04:26.570 --> 00:04:29.609\nand now you're just talking and\ntalking, I wanna write a script.\n\n85\n00:04:29.609 --> 00:04:31.010\n&gt;&gt; [LAUGH]\n&gt;&gt; And Cherokee,\n\n86\n00:04:31.010 --> 00:04:34.490\nI know you said that every\nbody should always start with,\n\n87\n00:04:36.120 --> 00:04:38.770\nwhat's your, hello world right?\n\n88\n00:04:38.770 --> 00:04:40.695\n&gt;&gt; That's right I did say that.\n\n89\n00:04:40.695 --> 00:04:41.665\n[LAUGH]\n&gt;&gt; You did say that yeah.\n\n90\n00:04:41.665 --> 00:04:43.119\n[LAUGH]\n&gt;&gt; I'm like, I don't know what I said.\n\n91\n00:04:43.119 --> 00:04:43.940\n[LAUGH] But I did say that.\n\n92\n00:04:43.940 --> 00:04:48.030\n&gt;&gt; That was days ago, but we all, you know\nas you go through tutorials on this, that,\n\n93\n00:04:48.030 --> 00:04:51.860\nor the other where there's HTML or\nscripting or whatever the case may be.\n\n94\n00:04:51.860 --> 00:04:54.870\nIt seems like hello world is\nalways that first thing you do to\n\n95\n00:04:54.870 --> 00:04:57.520\nprove that it works and\nyou're doing it and you can move on.\n\n96\n00:04:57.520 --> 00:05:00.220\n&gt;&gt; Yeah, like your initiation or\nright of passage there.\n\n97\n00:05:00.220 --> 00:05:01.520\n&gt;&gt; Yeah, so that's what we're going to do.\n\n98\n00:05:01.520 --> 00:05:04.820\nWe're going to write a script right now,\nand we're gonna do a hello world script.\n\n99\n00:05:04.820 --> 00:05:07.430\nNow, you're gonna have tons of\nstuff we haven't gone over yet, so\n\n100\n00:05:07.430 --> 00:05:08.910\nmake sure you pay attention.\n\n101\n00:05:08.910 --> 00:05:12.451\nI'm gonna go quote, Hello world.\n\n102\n00:05:12.451 --> 00:05:16.500\n&gt;&gt; [LAUGH]\n&gt;&gt; End quote, and\n\n103\n00:05:16.500 --> 00:05:17.640\nI'm gonna execute my script.\n\n104\n00:05:18.970 --> 00:05:20.290\nLook at this.\n\n105\n00:05:20.290 --> 00:05:21.070\n&gt;&gt; Yay!\n\n106\n00:05:21.070 --> 00:05:22.522\n&gt;&gt; I got hello world.\n\n107\n00:05:22.522 --> 00:05:26.490\n[LAUGH] All right so, technically that\nis a script and let's start there.\n\n108\n00:05:26.490 --> 00:05:28.200\nLet's back up for just a second.\n\n109\n00:05:28.200 --> 00:05:31.630\n&gt;&gt; All right, so a script is nothing\nmore than a collection of PowerShell\n\n110\n00:05:31.630 --> 00:05:32.670\ncommands, right?\n\n111\n00:05:32.670 --> 00:05:35.440\nThings that you would normally do\nthrough the console potentially.\n\n112\n00:05:35.440 --> 00:05:39.390\nYou're gonna put them in a file, and\nthen you're gonna save that file, and\n\n113\n00:05:39.390 --> 00:05:41.190\nthen you're gonna execute that file.\n\n114\n00:05:41.190 --> 00:05:45.850\nSo I can write a script in Notepad,\nI mean I can open up Notepad and\n\n115\n00:05:45.850 --> 00:05:48.900\nI can write the same thing, right?\n\n116\n00:05:50.400 --> 00:05:53.920\nAnd, oops, if I could type,\nhello world, and\n\n117\n00:05:53.920 --> 00:05:56.450\nwe'll use proper punctuation this time.\n\n118\n00:05:56.450 --> 00:05:59.440\nAnd I'm going to save this.\n\n119\n00:06:00.950 --> 00:06:02.470\nAnd I'll dump it into my documents here.\n\n120\n00:06:02.470 --> 00:06:05.880\nAnd I'm gonna call it,\nI'm gonna switch this.\n\n121\n00:06:05.880 --> 00:06:10.180\nSo you can use any text editor\nto write a PowerShell script.\n\n122\n00:06:10.180 --> 00:06:12.970\nThe key is to save it\nwith a .ps1 extension,\n\n123\n00:06:12.970 --> 00:06:18.360\nthat's what's going to make it an actual\npowershell script, and not a text file.\n\n124\n00:06:18.360 --> 00:06:27.070\nSo we'll call this helloworld.ps1 and\n\n125\n00:06:27.070 --> 00:06:29.160\nI'll go ahead save that in my document.\n\n126\n00:06:30.470 --> 00:06:33.515\nSo writing a script use\nyour favorite text editor.\n\n127\n00:06:33.515 --> 00:06:38.603\nNow,I don't like using iPad because it\ndoesn't do the intelligence,the tab\n\n128\n00:06:38.603 --> 00:06:43.920\nauto-complete, the colors all right I get\nall that in my Powershell ise editor,\n\n129\n00:06:43.920 --> 00:06:44.783\nthat is what I like.\n\n130\n00:06:44.783 --> 00:06:48.550\nThere are third party\nutilities you could probably\n\n131\n00:06:48.550 --> 00:06:52.600\nunderstand the Powershell language or\nyou can get a plug in may be for\n\n132\n00:06:52.600 --> 00:06:56.440\none of you favorite editors to work\nwith powershell is very sea like so\n\n133\n00:06:56.440 --> 00:07:00.830\nif you got one that does sea, you probably\nget a lot of the appropriate color coding\n\n134\n00:07:00.830 --> 00:07:03.600\nfor tha, if your using\nsomething like that all right?\n\n135\n00:07:03.600 --> 00:07:05.360\nSo that is basically a script.\n\n136\n00:07:05.360 --> 00:07:09.830\nNow the next question is\nhow do we run a script?\n\n137\n00:07:09.830 --> 00:07:10.480\nRight?\n\n138\n00:07:10.480 --> 00:07:13.500\nWell here's that one we just wrote,\nHello World.\n\n139\n00:07:13.500 --> 00:07:14.360\nAnd I'll double click on it.\n\n140\n00:07:15.770 --> 00:07:18.880\nAnd it didn't run,\nit actually opened up a notepad.\n\n141\n00:07:19.950 --> 00:07:23.660\nThat's not what I expected and\nthat is safety feature.\n\n142\n00:07:23.660 --> 00:07:28.250\nFor all Microsoft it's designed that\nway PS one files do not automatically\n\n143\n00:07:28.250 --> 00:07:32.570\nexecute to keep us safe from ourselves\nKeep our end users a little bit safer from\n\n144\n00:07:32.570 --> 00:07:37.570\nthings they don't understand, so they\nwill not run when you double-click on it.\n\n145\n00:07:37.570 --> 00:07:42.080\nYes, there are registry tweaks you can do,\nbut you're basically bypassing built-in\n\n146\n00:07:42.080 --> 00:07:45.790\nsecurity measures, so\ndefinitely not going to be recommended.\n\n147\n00:07:45.790 --> 00:07:47.790\nThey have add it to the context menu.\n\n148\n00:07:47.790 --> 00:07:49.985\nIf you right-click on a PS1 file,\n\n149\n00:07:49.985 --> 00:07:53.286\nyou should have the option\n\"Run with Powershell\".\n\n150\n00:07:53.286 --> 00:07:56.246\nSo rather than double-click on it,\njust right-click on it.\n\n151\n00:07:56.246 --> 00:07:57.623\nRun with PowerShell, right?\n\n152\n00:07:57.623 --> 00:08:00.216\nNow you notice I didn't\ndo a lot in that script.\n\n153\n00:08:00.216 --> 00:08:02.660\nIt opened, it ran it and\nit closed really fast.\n\n154\n00:08:02.660 --> 00:08:06.993\nYou might have seen hello world in there,\nbut when you run a script like this, but\n\n155\n00:08:06.993 --> 00:08:09.812\nyou typically,\nthat's what you're trying to do.\n\n156\n00:08:09.812 --> 00:08:12.409\nYou just want the code to execute,\na lot of them don't have output or\n\n157\n00:08:12.409 --> 00:08:13.620\nanything I need to see.\n\n158\n00:08:13.620 --> 00:08:17.270\nThere are ways we can make that console\nstay open, but In our little script.\n\n159\n00:08:17.270 --> 00:08:21.320\nI mean all we had was the quote,\nthe string, Hello World, right?\n\n160\n00:08:21.320 --> 00:08:25.380\nSo we can right click on and\nwe can run them that way.\n\n161\n00:08:26.690 --> 00:08:29.100\nWe can also run them from our console.\n\n162\n00:08:29.100 --> 00:08:31.280\nNow if we run them from the console,\n\n163\n00:08:31.280 --> 00:08:34.125\nwe need to provide\nthe entire path to the item.\n\n164\n00:08:34.125 --> 00:08:36.442\nOr we need to be in that directory and\n\n165\n00:08:36.442 --> 00:08:39.159\nthen we can use a little\nbit of a short cut.\n\n166\n00:08:39.159 --> 00:08:43.660\nIf I just tried to call,\nlet's save this guy here.\n\n167\n00:08:43.660 --> 00:08:48.908\nLet's go save, Save it.\n\n168\n00:08:48.908 --> 00:08:52.830\nAnd I'll call this our test one.\n\n169\n00:08:54.262 --> 00:08:59.209\nAll right, it'll automatically add\nthe .ps1 file for me, so I'll click save.\n\n170\n00:08:59.209 --> 00:09:00.708\nSo now I've got my file.\n\n171\n00:09:00.708 --> 00:09:05.732\nNow if I try to type test, let's make\nsure I'm in the right directory here.\n\n172\n00:09:05.732 --> 00:09:10.062\nI did a little directory listing and\nthere is test1.ps1.\n\n173\n00:09:10.062 --> 00:09:15.366\nSo I'm in that directory, so\nif I type test.ps1 and hit Enter.\n\n174\n00:09:17.262 --> 00:09:17.762\nI get nothing, right?\n\n175\n00:09:18.930 --> 00:09:21.500\nWell, its right in that directory,\nit should be able to find it,\n\n176\n00:09:21.500 --> 00:09:23.200\nPowerShell is pretty good at that.\n\n177\n00:09:23.200 --> 00:09:24.790\nAgain, its another one of those things,\n\n178\n00:09:24.790 --> 00:09:27.380\nit's a safety feature,\nit's designed that way.\n\n179\n00:09:27.380 --> 00:09:28.990\nBy just calling the name of the file,\n\n180\n00:09:28.990 --> 00:09:32.410\nyou're not gonna be able\nto run that script.\n\n181\n00:09:32.410 --> 00:09:35.909\nIf you wanna run it,\nyou're gonna do a (.\\), right?\n\n182\n00:09:35.909 --> 00:09:40.623\nThe dot representing the local directory,\nslash being the first part of the path,\n\n183\n00:09:40.623 --> 00:09:43.330\nand then the name of your script.\n\n184\n00:09:43.330 --> 00:09:46.400\nAnd there I get my, hello world, right?\n\n185\n00:09:46.400 --> 00:09:48.938\nSo we can run it by using\na dot backslash method.\n\n186\n00:09:48.938 --> 00:09:53.843\nIf I was in a different directory,\nlet's do, I don't know, let's go over to,\n\n187\n00:09:53.843 --> 00:09:55.960\nI'm gonna do a set location.\n\n188\n00:09:55.960 --> 00:09:58.315\nThere's an alias for set location.\n\n189\n00:09:58.315 --> 00:10:00.006\nSL, makes it a little easier.\n\n190\n00:10:00.006 --> 00:10:02.980\nI'm gonna set location\nto dollar sign ps home.\n\n191\n00:10:02.980 --> 00:10:07.990\nIt's that variable that stores\nthe install for PowerShell.\n\n192\n00:10:07.990 --> 00:10:11.910\nBut now I'm in some other directory right,\nI'm not in my scripts directory anymore.\n\n193\n00:10:14.060 --> 00:10:20.510\nAnd if I wanna run that file c:\\ gosh now\nI gotta think of my path, well let's see,\n\n194\n00:10:20.510 --> 00:10:27.200\nthat's gonna be users\\Michel\\DOCUMENTS\\\nis it in there or in scripts?\n\n195\n00:10:28.660 --> 00:10:34.799\nThat's not,\nTest I think it's in scripts, it is,\n\n196\n00:10:34.799 --> 00:10:39.830\nscripts/test/1.ps1, there we go.\n\n197\n00:10:39.830 --> 00:10:45.510\nSo now I've given it the entire path\nto the object, and can I run it?\n\n198\n00:10:45.510 --> 00:10:47.480\nIndeed I can right?\n\n199\n00:10:47.480 --> 00:10:49.040\nSo I can run it.\n\n200\n00:10:49.040 --> 00:10:52.719\nAlmost switch back to my scripts folder.\n\n201\n00:10:52.719 --> 00:10:56.769\nI'm going to do a set\nlocation dollar sign,\n\n202\n00:10:56.769 --> 00:11:01.591\nwhat is that,\nhome slash documents slash scripts.\n\n203\n00:11:01.591 --> 00:11:02.734\nAll right, so I can give it,\n\n204\n00:11:02.734 --> 00:11:05.630\nif I'm not in the directory I\ncan give you the entire path.\n\n205\n00:11:05.630 --> 00:11:08.821\nIf I'm in the directory,\nI've got to use that dot backslash.\n\n206\n00:11:08.821 --> 00:11:12.909\nBut the cool thing about PowerShell\nis if I do the tab autocomplete,\n\n207\n00:11:12.909 --> 00:11:14.580\nit will add the .\\ for me.\n\n208\n00:11:14.580 --> 00:11:15.810\nWe always like that, right?\n\n209\n00:11:15.810 --> 00:11:21.494\nSo if I do tes tab, notice it found\nthe file and it included the .\\.\n\n210\n00:11:21.494 --> 00:11:24.740\n&gt;&gt; But it will only add that if\nyou're in the proper directory.\n\n211\n00:11:24.740 --> 00:11:28.170\n&gt;&gt; Exactly right,\notherwise you gotta use the entire path.\n\n212\n00:11:28.170 --> 00:11:31.358\nRight, so just a little quick\naside on how we run scripts, so\n\n213\n00:11:31.358 --> 00:11:35.607\nwe see how to create them in the first\nplace, save it as a .ps1 file, don't care\n\n214\n00:11:35.607 --> 00:11:39.692\nwhat you use to create it it's just a text\nfile as long as you save it as .ps1.\n\n215\n00:11:39.692 --> 00:11:43.709\nAnd then to execute it you can't double\nclick on it in file explorer but\n\n216\n00:11:43.709 --> 00:11:47.453\nyou can right click and execute it or\nyou can call the entire path or\n\n217\n00:11:47.453 --> 00:11:50.471\nuse the dot backslash if\nyou're in that directory.\n\n218\n00:11:50.471 --> 00:11:54.420\nAll right,\nnow that we've got our first script done.\n\n219\n00:11:54.420 --> 00:11:57.500\nCherokee we're gonna change\nthis up just a little bit,\n\n220\n00:11:57.500 --> 00:12:01.890\nour initial script actually let's\nsee if I have one called tests.\n\n221\n00:12:01.890 --> 00:12:05.970\nLet's make a new one here or\ntest one would work.\n\n222\n00:12:05.970 --> 00:12:09.143\nI want something really short and sweet\nthat I don't have to do a lot of typing\n\n223\n00:12:09.143 --> 00:12:12.432\nand I could tap autofill because we're\ngoing to be executing this quite a bit.\n\n224\n00:12:12.432 --> 00:12:13.460\n&gt;&gt; Okay.\n\n225\n00:12:13.460 --> 00:12:17.765\n&gt;&gt; All right, so let's start with\nsomething simple other than hello world,\n\n226\n00:12:17.765 --> 00:12:20.033\nlet's do a get-process, all right?\n\n227\n00:12:20.033 --> 00:12:23.070\nAnd it helps if you have focus\nin there as you are typing.\n\n228\n00:12:23.070 --> 00:12:27.569\nWell do say get-process, right,\nand I'm gonna go ahead and\n\n229\n00:12:27.569 --> 00:12:31.289\nsave this, I'm gonna save it as test,\nright, and\n\n230\n00:12:31.289 --> 00:12:35.021\nnow we can run that because\nI'm in that directory.\n\n231\n00:12:35.021 --> 00:12:41.840\nI can do test and sure enough it goes\nout and gets a list of all my processes.\n\n232\n00:12:41.840 --> 00:12:44.450\nRight, now I can flip this screen around,.\n\n233\n00:12:44.450 --> 00:12:45.980\nDoes make it easier to view the output,\n\n234\n00:12:45.980 --> 00:12:49.460\nbut not as easy to view\nthe script that we're writing.\n\n235\n00:12:49.460 --> 00:12:51.670\nI guess we can kinda go back and\nforth with that one.\n\n236\n00:12:51.670 --> 00:12:54.240\nBut there is the output to my script,\nright?\n\n237\n00:12:55.700 --> 00:12:58.570\nSo whoo hoo, technically,\nwe have a script now.\n\n238\n00:12:58.570 --> 00:13:02.650\nSo anytime I wanna see what process\nare running on this machine,\n\n239\n00:13:02.650 --> 00:13:07.050\nI can simply execute my script and\nwe're good to go, all right?\n\n240\n00:13:07.050 --> 00:13:09.103\nBut, that's not all that is-\n&gt;&gt; That's not why we're here.\n\n241\n00:13:09.103 --> 00:13:10.020\n[LAUGH]\n&gt;&gt; Yeah, that's not all that\n\n242\n00:13:10.020 --> 00:13:10.790\nexciting is it?\n\n243\n00:13:10.790 --> 00:13:13.990\nWe could have done that\non the first day and\n\n244\n00:13:13.990 --> 00:13:17.400\ncalled it episode or\na show and been done with it.\n\n245\n00:13:17.400 --> 00:13:19.310\nYeah, just type your commands in there.\n\n246\n00:13:19.310 --> 00:13:21.950\nSo, let's see what else\nwe can do with this.\n\n247\n00:13:21.950 --> 00:13:25.340\nYeah, and one of the things that\nwhen I look at the output here is,\n\n248\n00:13:25.340 --> 00:13:30.540\nI think about what property I\nmight be looking at, as well as\n\n249\n00:13:30.540 --> 00:13:35.510\nsorting it, right,\nbecause it's not sorted, and\n\n250\n00:13:35.510 --> 00:13:39.240\nin a GUI, we can click on the header\nof the column and we can sort that.\n\n251\n00:13:39.240 --> 00:13:43.920\nLet's see if we can sort this information,\nand normally, if I'm getting processes,\n\n252\n00:13:43.920 --> 00:13:47.705\nI'm trying to see what process is\nsucking up all of my CPU's right?\n\n253\n00:13:47.705 --> 00:13:50.640\nCuz something is chugging,\nchoking my machine, and\n\n254\n00:13:50.640 --> 00:13:54.700\nI need to figure out what it is, so I want\nto look closer to that CPU column, and\n\n255\n00:13:54.700 --> 00:13:59.960\nI want to sort it with my biggest numbers\nup on the top, which would be descending.\n\n256\n00:13:59.960 --> 00:14:03.904\nSo, if we want to do that, we're just\ngoing to add to our git process right.\n\n257\n00:14:03.904 --> 00:14:07.542\nWe're gonna take advantage\nof that pipeline and\n\n258\n00:14:07.542 --> 00:14:13.216\nwe'll take the output of git process and\npipe it in to a sort object command,\n\n259\n00:14:13.216 --> 00:14:16.321\nand sort object has several parameters,\n\n260\n00:14:16.321 --> 00:14:21.843\nyou can see them listed here as I hit\nmy hyphen we're gonna do descending.\n\n261\n00:14:21.843 --> 00:14:27.624\nSo I like descending because it will\nput the biggest numbers on top and\n\n262\n00:14:27.624 --> 00:14:33.813\nI want to sort it by a particular\nproperty, and I want the property of cpu.\n\n263\n00:14:33.813 --> 00:14:38.447\nWell, let's see what we got, we'll save\nthat, we'll come down here to our screen,\n\n264\n00:14:38.447 --> 00:14:40.170\nand we'll execute that again.\n\n265\n00:14:41.280 --> 00:14:42.930\nAnd see if our results look any different.\n\n266\n00:14:45.600 --> 00:14:49.231\nAnd what we should see is\nsure enough it looks like\n\n267\n00:14:49.231 --> 00:14:50.865\n&gt;&gt; Our shell big fender.\n\n268\n00:14:50.865 --> 00:14:52.591\n&gt;&gt; PowerShell sucking up some CPU.\n\n269\n00:14:52.591 --> 00:14:54.616\n&gt;&gt; [LAUGH]\n&gt;&gt; Of course as it grabs that snap\n\n270\n00:14:54.616 --> 00:14:57.000\nshot out of my cuz that\nis a historical view.\n\n271\n00:14:57.000 --> 00:15:00.500\nKeep that in mind this is not going\nto be updating automatically.\n\n272\n00:15:00.500 --> 00:15:03.560\nIt's a snapshot in time when\nthis script was run, yes.\n\n273\n00:15:03.560 --> 00:15:07.780\nAnd as it was executing that script,\nthe CPU wasn't doing much so it said,\n\n274\n00:15:07.780 --> 00:15:09.890\nI'll give you all you need and\nit ran that.\n\n275\n00:15:09.890 --> 00:15:12.010\nSo, all right so cool.\n\n276\n00:15:12.010 --> 00:15:13.180\nNow we're getting somewhere.\n\n277\n00:15:13.180 --> 00:15:16.950\nWe've done a script that's starting\nto do a little bit better.\n\n278\n00:15:16.950 --> 00:15:21.371\nWe're manipulating that output\na little bit, all right.\n\n279\n00:15:21.371 --> 00:15:24.813\n&gt;&gt; Now what if we have something\nlike with a ton of results for\n\n280\n00:15:24.813 --> 00:15:28.111\noutput I mean with our process\nit is a little its a lot but\n\n281\n00:15:28.111 --> 00:15:32.440\nit is limited to some capacity but\nis there a way we can actually filter?\n\n282\n00:15:32.440 --> 00:15:37.120\n&gt;&gt; Yeah you know when I'm looking at this\nlist I have a lot of processes that are if\n\n283\n00:15:37.120 --> 00:15:42.088\nyou look down here towards the bottom\nare 0.19, 0.09, 0.05 I mean,\n\n284\n00:15:42.088 --> 00:15:44.100\ndo I really need all that?\n\n285\n00:15:44.100 --> 00:15:46.830\nI'm really worried about\nthe top offenders right?\n\n286\n00:15:46.830 --> 00:15:48.410\nThese are the ones I'm looking at.\n\n287\n00:15:48.410 --> 00:15:55.002\nI'm not gonna kill one of these SBC hosts\nto see if that's gonna speed up my system.\n\n288\n00:15:55.002 --> 00:15:56.187\nOr if that's what's choking it.\n\n289\n00:15:56.187 --> 00:15:57.205\nSo using zero right?\n\n290\n00:15:57.205 --> 00:16:01.670\nSo I definitely think we could\nmay be just look at the right?\n\n291\n00:16:01.670 --> 00:16:05.980\nSo let's see how we could\ngo about doing that.\n\n292\n00:16:05.980 --> 00:16:08.550\nWe're simply gonna add to our command.\n\n293\n00:16:08.550 --> 00:16:12.840\nWe'll just continue down the pipeline\nthat's really what you gotta think about\n\n294\n00:16:12.840 --> 00:16:16.910\nwhen you're writing your scripts with\npowershell is, think about the pipeline.\n\n295\n00:16:16.910 --> 00:16:21.780\nYou're feeding this data in and\neach section of that pipe is\n\n296\n00:16:21.780 --> 00:16:26.700\ngoing to do a little bit of transformation\non your data as it goes through and\n\n297\n00:16:26.700 --> 00:16:29.320\nthe output is what we see in our screen.\n\n298\n00:16:29.320 --> 00:16:33.980\nSo now that I've got it sorted\nthe way I want, I can tell it hey\n\n299\n00:16:33.980 --> 00:16:36.950\njust give me the top results, right,\nbut you do have to sort it first.\n\n300\n00:16:36.950 --> 00:16:37.620\nKeep that in mind.\n\n301\n00:16:37.620 --> 00:16:40.840\nIf I say, go get the first ten and\nthen sort it.\n\n302\n00:16:40.840 --> 00:16:42.500\n&gt;&gt; You'll have like an arbitrary list?\n\n303\n00:16:42.500 --> 00:16:46.720\n&gt;&gt; Yeah, it's a random sampling of ten,\nbut then that sampling would be sorted,\n\n304\n00:16:46.720 --> 00:16:49.030\nbut there could be processes\nthat aren't in my list,\n\n305\n00:16:49.030 --> 00:16:51.440\nthat are using much more CPU\nthan what is in my list.\n\n306\n00:16:51.440 --> 00:16:57.650\nSo, sort it first, then we're gonna\npipe that out into a select statement.\n\n307\n00:16:57.650 --> 00:17:02.560\nAnd here we're just gonna select,\nthere is a property called first, right?\n\n308\n00:17:02.560 --> 00:17:05.090\nAnd then we're gonna tell it how many,\nlet's say, what do you think?\n\n309\n00:17:05.090 --> 00:17:05.960\nTen?\n&gt;&gt; Sure.\n\n310\n00:17:05.960 --> 00:17:08.710\n&gt;&gt; All right.\n&gt;&gt; Be like Carson Daly with our top ten.\n\n311\n00:17:08.710 --> 00:17:10.960\n&gt;&gt; Yeah, with our top ten, all right.\n\n312\n00:17:10.960 --> 00:17:12.120\nHey, was that Carson Daly?\n\n313\n00:17:12.120 --> 00:17:12.990\n&gt;&gt; Yeah.\n&gt;&gt; That\n\n314\n00:17:12.990 --> 00:17:14.820\nwas David Letterman before that one,\nright?\n\n315\n00:17:14.820 --> 00:17:18.809\n&gt;&gt; No, no, like the songs from MTV,\nthe top ten songs.\n\n316\n00:17:18.809 --> 00:17:21.230\n&gt;&gt; Yeah, so that shows you my pop culture.\n\n317\n00:17:21.230 --> 00:17:23.938\nCarson Daly,\nI thought he was a talk show host.\n\n318\n00:17:23.938 --> 00:17:26.970\n&gt;&gt; [LAUGH] no MTV for you?\n\n319\n00:17:26.970 --> 00:17:27.580\n&gt;&gt; Nah.\n\n320\n00:17:27.580 --> 00:17:28.260\n&gt;&gt; Okay.\n\n321\n00:17:28.260 --> 00:17:34.040\n&gt;&gt; Not since MTV was actually MTV and\nyou had the music all the time.\n\n322\n00:17:34.040 --> 00:17:35.690\nYeah, anyway we'll talk\nabout that some other day.\n\n323\n00:17:35.690 --> 00:17:36.750\n&gt;&gt; Okay.\n&gt;&gt; All right so\n\n324\n00:17:36.750 --> 00:17:38.750\nwe're gonna select the first ten.\n\n325\n00:17:38.750 --> 00:17:44.110\nAnd then while I'm here, I thought\nsince I'm really focusing in on CPU.\n\n326\n00:17:44.110 --> 00:17:46.180\nWhy don't we stick with that category?\n\n327\n00:17:46.180 --> 00:17:50.070\nLet's limit some of the fields\nthat are coming back and\n\n328\n00:17:50.070 --> 00:17:52.450\nwe simply do that with\nour select statement and\n\n329\n00:17:52.450 --> 00:17:56.500\nyou specify the names of the fields or\nthe properties from that item.\n\n330\n00:17:56.500 --> 00:17:57.850\nI guess it'd be a better way to say it,\n\n331\n00:17:57.850 --> 00:18:00.850\nthe properties of the object\nthat I want to see.\n\n332\n00:18:00.850 --> 00:18:03.210\nSo in addition to selecting the top ten,\n\n333\n00:18:03.210 --> 00:18:08.330\nlet's do Process name,\nthat's always a good one.\n\n334\n00:18:08.330 --> 00:18:10.180\nI want the ID in case I wanna kill it.\n\n335\n00:18:10.180 --> 00:18:12.800\nI could definitely come\nin to in Andy later.\n\n336\n00:18:12.800 --> 00:18:14.440\nAnd I also want that CPU fill.\n\n337\n00:18:14.440 --> 00:18:20.670\nAnd so as I select first ten\nprocess name ID and CPU.\n\n338\n00:18:20.670 --> 00:18:23.180\nWe'll save it then we'll execute.\n\n339\n00:18:25.070 --> 00:18:27.040\nOooo, I'm liking that.\n\n340\n00:18:27.040 --> 00:18:28.150\nNow you've got a nice,\n\n341\n00:18:28.150 --> 00:18:33.900\ntidy output of just the information\nthat I'm looking for, right?\n\n342\n00:18:33.900 --> 00:18:40.050\n\"Process name\", \"ID\",\n\"CPU\" sorted by \"CPU\".\n\n343\n00:18:41.920 --> 00:18:44.380\nAnd if I wanted, if I said,you\nknow that's not really enough,\n\n344\n00:18:44.380 --> 00:18:49.130\nI could change that to a 15,\nwe could save it, we could execute that.\n\n345\n00:18:50.470 --> 00:18:54.950\nAnd I'm gonna get the top 15, right?\n\n346\n00:18:56.430 --> 00:18:57.600\nI like it.\n\n347\n00:18:57.600 --> 00:19:03.930\nCPU is not the only thing\nwe might be curious about.\n\n348\n00:19:03.930 --> 00:19:05.940\nRight?\nCoz another thing that I wanna look\n\n349\n00:19:05.940 --> 00:19:08.175\nat when I'm dealing with\nprocesses is typically-\n\n350\n00:19:08.175 --> 00:19:09.770\n&gt;&gt; Memory?\n\n351\n00:19:09.770 --> 00:19:10.310\n&gt;&gt; Yeah.\n\n352\n00:19:10.310 --> 00:19:12.710\nYou got something that\nmaybe got a memory leak or\n\n353\n00:19:12.710 --> 00:19:15.260\nsomething is just letting\nyour machines run slow.\n\n354\n00:19:15.260 --> 00:19:16.990\nYou're trying to figure\nout what's going on.\n\n355\n00:19:16.990 --> 00:19:18.270\nThe server is running slow,\n\n356\n00:19:18.270 --> 00:19:21.840\nyou're trying to figure out what it\nis that's taking up your resources.\n\n357\n00:19:21.840 --> 00:19:23.480\nIf memory is the resource.\n\n358\n00:19:23.480 --> 00:19:28.560\nThis get process has that information\nas well, we can simply change cpu.\n\n359\n00:19:28.560 --> 00:19:32.860\nNow I need to know what the other\nproperties are, and I know what they are,\n\n360\n00:19:32.860 --> 00:19:35.320\nbut I want to show you guys,\nI've shown you before, but\n\n361\n00:19:35.320 --> 00:19:39.390\nlet's refresh on how you figure that out,\nbecause when you're writing, you don't\n\n362\n00:19:39.390 --> 00:19:43.660\nmemorize this kind of stuff, and you're\nlike what properties did services have?\n\n363\n00:19:43.660 --> 00:19:48.660\nWhat properties does an ID user have\nwhat l can call back like anything,\n\n364\n00:19:48.660 --> 00:19:53.560\nmay be we just gonna get the command\nitself, so in these case get process\n\n365\n00:19:56.020 --> 00:20:01.060\nlike And we pipe that into a get\ndutch number, and that shows\n\n366\n00:20:01.060 --> 00:20:05.710\nme all of the different properties and the\nmethods of that command loop In our case,\n\n367\n00:20:05.710 --> 00:20:09.600\nI'm looking at some of these properties\nand I especially like the aliases up here.\n\n368\n00:20:09.600 --> 00:20:11.120\nBut there we go.\n\n369\n00:20:11.120 --> 00:20:13.700\nSo now I can see working set, right?\n\n370\n00:20:13.700 --> 00:20:17.660\nHow much memory that\nprocess is actually using.\n\n371\n00:20:17.660 --> 00:20:21.360\nOr I can go with a page memory,\nhow much it has swapped off.\n\n372\n00:20:21.360 --> 00:20:26.660\nSo there's a couple of different\ncategories or properties we look at.\n\n373\n00:20:26.660 --> 00:20:30.400\nCPU, actually there's no alias for\nit cuz it's already pretty short, so\n\n374\n00:20:30.400 --> 00:20:31.230\nit's way down here.\n\n375\n00:20:31.230 --> 00:20:34.940\nBut heck,\nI can pull that file version if I wanted.\n\n376\n00:20:34.940 --> 00:20:37.850\nAnd we would simply change\nin our SELECT statement.\n\n377\n00:20:37.850 --> 00:20:41.630\nYou know what, I'd rather get\nthe working set instead of the CPU.\n\n378\n00:20:41.630 --> 00:20:42.560\nWe execute that.\n\n379\n00:20:43.780 --> 00:20:46.640\nAnd now I get-\n&gt;&gt; Pretty similar in this situation.\n\n380\n00:20:46.640 --> 00:20:48.790\n&gt;&gt; The exact same format, right?\n\n381\n00:20:48.790 --> 00:20:53.740\nBut now I'm getting process name ID and\nthe amount of memory that's being used by\n\n382\n00:20:53.740 --> 00:20:59.600\nthat process, instead of the amount of\nCPU that's being used by that process.\n\n383\n00:20:59.600 --> 00:21:05.320\nSo, already we have a pretty\ncool script that we can use.\n\n384\n00:21:05.320 --> 00:21:09.330\nNow it is cool except for\n\n385\n00:21:09.330 --> 00:21:13.830\nthe fact that if I want to change back to\nCPU I've got to edit the script right?.\n\n386\n00:21:13.830 --> 00:21:17.520\nNow if I was in file explorer I could\ndouble click on it, open it up with\n\n387\n00:21:17.520 --> 00:21:24.250\nnotepad, simply change cpu to ws Save it,\nright click, Run as PowerShell.\n\n388\n00:21:24.250 --> 00:21:28.360\nAnd it's not that big of a deal but-\n&gt;&gt; Save it as multiple scripts?\n\n389\n00:21:28.360 --> 00:21:30.620\n&gt;&gt; Yeah, you could definitely save\nit out as multiple scripts, right?\n\n390\n00:21:30.620 --> 00:21:33.300\nDifferent names for each one or\nsomething like that.\n\n391\n00:21:33.300 --> 00:21:36.160\nOne that returns processes or memory set.\n\n392\n00:21:36.160 --> 00:21:40.020\nOne that returns CPU, we could\ndefinitely use something like that.\n\n393\n00:21:40.020 --> 00:21:41.524\nBut-\n&gt;&gt; I feel a big but, I knew it.\n\n394\n00:21:41.524 --> 00:21:43.097\n[LAUGH]\n&gt;&gt; Yeah, yeah.\n\n395\n00:21:43.097 --> 00:21:44.270\nYou know it.\n\n396\n00:21:44.270 --> 00:21:50.300\nWouldn't it be cool if, that 15,\nfor example, let's start there.\n\n397\n00:21:50.300 --> 00:21:53.720\nLet's say this number, the number of\nprocesses or whatever it is I'm returning.\n\n398\n00:21:53.720 --> 00:21:57.390\nWouldn't it be cool if we could\nchange that dynamically, right?\n\n399\n00:21:57.390 --> 00:22:02.090\nSo instead of being hard coded in my\nscript, what if I got to tell it,\n\n400\n00:22:02.090 --> 00:22:04.970\nwhen I ran the script, how many I wanted.\n\n401\n00:22:04.970 --> 00:22:07.880\nOne day I feel like ten and\nI say you know what?\n\n402\n00:22:07.880 --> 00:22:11.720\nThe tenth one is still using quite a bit I\nneed to see what comes after that I want\n\n403\n00:22:11.720 --> 00:22:12.480\nthe top 15.\n\n404\n00:22:12.480 --> 00:22:16.460\nI can simply tell it as I'm running\nthe script how many to get.\n\n405\n00:22:16.460 --> 00:22:21.800\nAnd with that or to accomplish that\nwe are going to be using parameters.\n\n406\n00:22:21.800 --> 00:22:26.680\nWe're simply going to define the\nparameters up in the top of our script And\n\n407\n00:22:26.680 --> 00:22:31.030\nthen we can pass those parameters\nalong when we call the script.\n\n408\n00:22:31.030 --> 00:22:35.820\nIt'll use those parameters to fill in\nwherever we've told it to in our code.\n\n409\n00:22:35.820 --> 00:22:40.250\nAnd we should be able to get some\ndynamic capabilities out of our script.\n\n410\n00:22:40.250 --> 00:22:41.300\nSo let's try it out, shall we?\n\n411\n00:22:41.300 --> 00:22:45.060\nAll right,\nI'm gonna drop that down one line and\n\n412\n00:22:45.060 --> 00:22:47.190\nthat'll give us a little more room here.\n\n413\n00:22:47.190 --> 00:22:48.690\nSo that we can start typing.\n\n414\n00:22:48.690 --> 00:22:52.740\nTo use parameters,\nthere's a keyword param, all right?\n\n415\n00:22:52.740 --> 00:22:57.730\nThat's gonna be our statement that's going\nto allow us to create our parameter set,\n\n416\n00:22:57.730 --> 00:22:59.198\nfollowed by an open parenthesis.\n\n417\n00:22:59.198 --> 00:23:01.900\nNow you can you could do\nthis all on one line.\n\n418\n00:23:01.900 --> 00:23:04.760\nYou guys know me and\nmy philosophy on that, so\n\n419\n00:23:04.760 --> 00:23:06.670\nI'm gonna make it nice and pretty.\n\n420\n00:23:06.670 --> 00:23:12.230\nAnd I will show you something that I've\nstarted doing just recently that I'm like,\n\n421\n00:23:12.230 --> 00:23:14.420\ngosh, I don't know why\nI didn't do this prior.\n\n422\n00:23:14.420 --> 00:23:16.540\nAs you're typing these,\n\n423\n00:23:16.540 --> 00:23:20.290\nnotice I have that squiggly right\nthere behind my parentheses.\n\n424\n00:23:20.290 --> 00:23:23.590\nAnd that's PowerShell telling me\nyou've got an open parenthesis but\n\n425\n00:23:23.590 --> 00:23:25.740\nyou don't have a closing parenthesis.\n\n426\n00:23:25.740 --> 00:23:26.820\nWell, I know PowerShell.\n\n427\n00:23:26.820 --> 00:23:28.730\nI'm not done typing it, I'll get to that.\n\n428\n00:23:28.730 --> 00:23:33.130\nBut it'll remind you about that every step\nof the way, and sometimes as I type it\n\n429\n00:23:33.130 --> 00:23:36.290\ngoes under my mouse, and\nthis pops up, and it drives me crazy.\n\n430\n00:23:36.290 --> 00:23:39.200\n&gt;&gt; So do you just satisfy it and\ngive it the close?\n\n431\n00:23:39.200 --> 00:23:42.980\n&gt;&gt; Yes, exactly right,\nall I'm gonna do is hit Enter twice.\n\n432\n00:23:42.980 --> 00:23:47.240\nPut in my closing parenthesis and\nthen move back up in between them and\n\n433\n00:23:47.240 --> 00:23:51.332\nI'll start typing that way\npowershell's happy, I'm happy.\n\n434\n00:23:51.332 --> 00:23:53.163\n&gt;&gt; [LAUGH]\n&gt;&gt; Our viewers are happy cuz you can see\n\n435\n00:23:53.163 --> 00:23:56.137\nwhat I'm typing now and\neverything's good and somethings\n\n436\n00:23:56.137 --> 00:24:00.120\nthat I have actually incorporated\nnow into my daily script writing.\n\n437\n00:24:00.120 --> 00:24:01.496\nThat's why I like that technique.\n\n438\n00:24:01.496 --> 00:24:05.230\nSo we're gonna open and\nclose parentheses behind param.\n\n439\n00:24:05.230 --> 00:24:07.400\nThat's gonna give me my parameter block.\n\n440\n00:24:07.400 --> 00:24:12.910\nIt has to be the first line of\ncode in your script, right?\n\n441\n00:24:12.910 --> 00:24:17.370\nLet's repeat that, this has to be\nthe first line of code in your script or\n\n442\n00:24:17.370 --> 00:24:18.370\nit will not recognize it.\n\n443\n00:24:18.370 --> 00:24:20.134\nSo don't put anything above it.\n\n444\n00:24:20.134 --> 00:24:22.790\nI don't even think you can\nput a comment up there.\n\n445\n00:24:22.790 --> 00:24:26.930\nYou might be able to get a row with\nthe comment, but just I typically don't.\n\n446\n00:24:26.930 --> 00:24:32.404\nI'm just making sure parameters is up\nthere at the top of my script, right?\n\n447\n00:24:32.404 --> 00:24:33.738\nI don't know how you could, but\n\n448\n00:24:33.738 --> 00:24:36.830\nnothing in between it,\nthat wouldn't work out too well.\n\n449\n00:24:36.830 --> 00:24:38.617\nAll right, and\nthen we're just gonna name our parameter.\n\n450\n00:24:38.617 --> 00:24:42.650\nFor example, let's call it top, right,\ncuz I'm basically saying the top what?\n\n451\n00:24:42.650 --> 00:24:45.350\nI tried to name my parameter\nsomething meaningful,\n\n452\n00:24:45.350 --> 00:24:47.480\nat least to me internally in the script.\n\n453\n00:24:47.480 --> 00:24:51.628\nSo I'm asking them, I'm gonna get the top\nsomething, you tell me what that is.\n\n454\n00:24:51.628 --> 00:24:54.090\nSo I'm gonna call it top.\n\n455\n00:24:54.090 --> 00:24:55.659\nAnd then I'm gonna use that in the script.\n\n456\n00:24:55.659 --> 00:25:03.080\nSo instead of doing 15, I'm simply\ngonna put my variable, top, right?\n\n457\n00:25:03.080 --> 00:25:03.930\nPretty cool, right?\n\n458\n00:25:03.930 --> 00:25:06.450\nLet's see what happens,\nwe're gonna save it.\n\n459\n00:25:06.450 --> 00:25:09.172\nNow to pass a parameter into my script,\n\n460\n00:25:09.172 --> 00:25:12.812\nI'm simply going to call the script -top,\nright?\n\n461\n00:25:12.812 --> 00:25:15.392\nAnd it'll tab autofill, it knows.\n\n462\n00:25:15.392 --> 00:25:17.490\nDid you see how I did that?\n\n463\n00:25:17.490 --> 00:25:20.095\nIt knows what parameters are in that\nscript, so -top, and I'll put 10.\n\n464\n00:25:20.095 --> 00:25:22.378\nOr let's do something different,\n\n465\n00:25:22.378 --> 00:25:26.181\nlet's do 8 to make sure we're\nnot using cache results, or\n\n466\n00:25:26.181 --> 00:25:31.520\nMike's not doing some fancy, put the raw\nturkey in and pull the cooked turkey out.\n\n467\n00:25:31.520 --> 00:25:32.180\nWe're not doing any of that.\n\n468\n00:25:32.180 --> 00:25:36.630\nWe're typing real scripts here.\n\n469\n00:25:36.630 --> 00:25:37.396\nSo let's do top 8, Enter.\n\n470\n00:25:37.396 --> 00:25:39.660\nAnd look at there, 1, 2,\n3, 4, 5, 6, 7, and 8.\n\n471\n00:25:39.660 --> 00:25:46.810\nWe have 8 of the top offenders\nwhen it comes to member usage.\n\n472\n00:25:46.810 --> 00:25:48.216\nPretty easy, though, right?\n\n473\n00:25:48.216 --> 00:25:48.720\n&gt;&gt; I like it.\n\n474\n00:25:48.720 --> 00:25:50.700\n&gt;&gt; To put a parameter in there.\n\n475\n00:25:50.700 --> 00:25:51.480\n&gt;&gt; Yeah.\n\n476\n00:25:51.480 --> 00:25:52.110\n&gt;&gt; I think it's really darn good.\n\n477\n00:25:52.110 --> 00:25:55.292\n&gt;&gt; I think the hardest part\nabout this will be remembering\n\n478\n00:25:55.292 --> 00:25:58.204\nwhat your values are actually set for,\nlike top.\n\n479\n00:25:58.204 --> 00:25:59.855\nWhat was I talking about, yeah.\n\n480\n00:25:59.855 --> 00:26:03.050\n&gt;&gt; Yep, and you can definitely use longer,\nmore meaningful names, right?\n\n481\n00:26:03.050 --> 00:26:06.468\nIt makes your script-\n&gt;&gt; Top offenders or whatever.\n\n482\n00:26:06.468 --> 00:26:09.109\n&gt;&gt; Yes, yeah, that or top-\n&gt;&gt; CPU offenders or WS offenders, yeah.\n\n483\n00:26:09.109 --> 00:26:11.175\n&gt;&gt; Processes maybe, or\nsomething like that.\n\n484\n00:26:11.175 --> 00:26:13.335\nBecause remember,\nusing long variable names,\n\n485\n00:26:13.335 --> 00:26:15.840\nyou're like, I hate typing that out.\n\n486\n00:26:15.840 --> 00:26:19.798\nWe have tab autofill, topProcesses, right?\n\n487\n00:26:19.798 --> 00:26:24.744\nSo use names that make sense to you, the\npeople that are gonna be using your script\n\n488\n00:26:24.744 --> 00:26:28.430\nbecause tab autofill\nwill save you the typing.\n\n489\n00:26:28.430 --> 00:26:29.847\nSo definitely good point, Cherokee.\n\n490\n00:26:29.847 --> 00:26:33.262\nYou really should use meaningful\nnames with those variables.\n\n491\n00:26:33.262 --> 00:26:40.360\nAll right, so\nnow we've made the top dynamic.\n\n492\n00:26:40.360 --> 00:26:43.310\nAnother cool thing we might wanna do is,\nCherokee,\n\n493\n00:26:43.310 --> 00:26:46.850\nwe talked about maybe saving\nmultiple copies of the script.\n\n494\n00:26:46.850 --> 00:26:48.600\n&gt;&gt; Right.\n&gt;&gt; One that pull back CPU,\n\n495\n00:26:48.600 --> 00:26:50.360\none that pull back working set.\n\n496\n00:26:51.460 --> 00:26:54.330\nWell now, what if I wanna do one\nthat pulls back page memory?\n\n497\n00:26:54.330 --> 00:26:57.885\nI gotta make another copy of that\nscript and edit it to do page memory.\n\n498\n00:26:57.885 --> 00:26:59.975\n&gt;&gt; [SOUND]\n&gt;&gt; I know, yeah.\n\n499\n00:26:59.975 --> 00:27:03.250\n&gt;&gt; [LAUGH]\n&gt;&gt; Well, not that difficult, I know.\n\n500\n00:27:03.250 --> 00:27:04.596\nThe idea is we're trying\nto automate things, right?\n\n501\n00:27:04.596 --> 00:27:08.019\nAnd we wanna make things reusable.\n\n502\n00:27:08.019 --> 00:27:13.100\nSo let's see if we can continue on with\nour thought process with parameters.\n\n503\n00:27:13.100 --> 00:27:14.740\nLet's add another one, right?\n\n504\n00:27:14.740 --> 00:27:19.524\nSo instead of hard coding what\nparam property I wanna return,\n\n505\n00:27:19.524 --> 00:27:21.739\nI always want processname.\n\n506\n00:27:21.739 --> 00:27:24.900\nI'm gonna need that to\nknow which process it is.\n\n507\n00:27:24.900 --> 00:27:26.530\nI need the id-\n&gt;&gt; That would be a fun game if\n\n508\n00:27:26.530 --> 00:27:27.538\nwe didn't have that, right, yeah.\n\n509\n00:27:27.538 --> 00:27:30.799\n[LAUGH]\n&gt;&gt; Which some processes using 5 GB of\n\n510\n00:27:30.799 --> 00:27:32.100\nmemory.\n\n511\n00:27:32.100 --> 00:27:33.890\nYou go find out which one, haha.\n\n512\n00:27:33.890 --> 00:27:34.887\nThat wouldn't be too fun.\n\n513\n00:27:34.887 --> 00:27:36.540\n&gt;&gt; No.\n&gt;&gt; But I'm gonna need processname.\n\n514\n00:27:36.540 --> 00:27:40.405\nI'm gonna need id because, again, that's\ntypically how I'm gonna stop, or kill, or\n\n515\n00:27:40.405 --> 00:27:41.910\nsuspend, or anything like that.\n\n516\n00:27:41.910 --> 00:27:44.570\nSo we use that id, always good to have.\n\n517\n00:27:44.570 --> 00:27:48.462\nAnd then working set,\nthis is what I want to change to dynamic.\n\n518\n00:27:48.462 --> 00:27:50.780\nAnd again, this is the thought process\nI want you to go through as you're\n\n519\n00:27:50.780 --> 00:27:51.850\nwriting scripts.\n\n520\n00:27:51.850 --> 00:27:55.530\nThis is exactly what I did last night,\ngetting the script ready for\n\n521\n00:27:55.530 --> 00:27:56.770\nyou guys today.\n\n522\n00:27:56.770 --> 00:27:59.700\nAs I just started by typing\nGet-Process and ran it.\n\n523\n00:27:59.700 --> 00:28:02.216\nSo, okay, I get the results I want, but\n\n524\n00:28:02.216 --> 00:28:05.300\nI want to filter it down\nto just the top ten.\n\n525\n00:28:05.300 --> 00:28:06.070\nHow do I do that?\n\n526\n00:28:06.070 --> 00:28:07.450\nI need to sort it first.\n\n527\n00:28:07.450 --> 00:28:08.910\nSo let me add that line.\n\n528\n00:28:08.910 --> 00:28:10.170\nThis is the way you go through.\n\n529\n00:28:10.170 --> 00:28:13.960\nThen I said, well,\nwhat would make this script more useful?\n\n530\n00:28:13.960 --> 00:28:17.230\nThe ability to change how\nmany I was returning.\n\n531\n00:28:17.230 --> 00:28:21.460\nThat's something I might change depending\non what day it is or what's going on.\n\n532\n00:28:21.460 --> 00:28:24.110\nWhat's something else I might\nwanna do with this script?\n\n533\n00:28:24.110 --> 00:28:26.053\nI don't always wanna get working set.\n\n534\n00:28:26.053 --> 00:28:29.510\nWouldn't it be cool if\nI could change that?\n\n535\n00:28:29.510 --> 00:28:30.807\nSo that's the kind of\nthe process I go through.\n\n536\n00:28:30.807 --> 00:28:33.599\nAnd I think it's a good one,\nnot the only one, obviously, but\n\n537\n00:28:33.599 --> 00:28:36.990\na good one to work through as\nyou're writing your scripts.\n\n538\n00:28:36.990 --> 00:28:38.129\nSo let's do that, we're gonna go ahead.\n\n539\n00:28:38.129 --> 00:28:42.578\nAnd because this is the way I practiced it\nand it makes more sense to me in my brain,\n\n540\n00:28:42.578 --> 00:28:47.040\nI'm actually gonna put this on top or\nthe first parameter, which is important.\n\n541\n00:28:47.040 --> 00:28:48.603\nI'll show you what I mean\nhere in just a second.\n\n542\n00:28:48.603 --> 00:28:52.780\nAnd let's call it category.\n\n543\n00:28:52.780 --> 00:28:56.250\nI don't know why, I don't know,\nthat's what I chose last night.\n\n544\n00:28:56.250 --> 00:29:00.300\nAnd notice I get a squiggly,\nbut ISE will tell you, hey,\n\n545\n00:29:00.300 --> 00:29:03.980\nyou're missing a close parenthesis\nin the function parameter list.\n\n546\n00:29:03.980 --> 00:29:05.278\n&gt;&gt; I thought we already added it?\n\n547\n00:29:05.278 --> 00:29:09.019\n&gt;&gt; And what it's expecting is this\nclose parenthesis right here.\n\n548\n00:29:09.019 --> 00:29:14.280\nAnd then it says, hey, you got\nan unexpected close parenthesis down here.\n\n549\n00:29:14.280 --> 00:29:15.165\nWhat is going on in PowerShell?\n\n550\n00:29:15.165 --> 00:29:19.150\nYou say I need it, I've got it,\nyou just say I don't need it.\n\n551\n00:29:19.150 --> 00:29:23.510\nAnd that's because my parameter's line\nbreak is not good enough to separate\n\n552\n00:29:23.510 --> 00:29:24.280\nmy parameters.\n\n553\n00:29:24.280 --> 00:29:24.808\n&gt;&gt; So we need a semicolon?\n\n554\n00:29:24.808 --> 00:29:28.106\n&gt;&gt; We're gonna put a comma, actually,\nin this particular case, yeah.\n\n555\n00:29:28.106 --> 00:29:28.937\nI've gotta change it up, I do.\n\n556\n00:29:28.937 --> 00:29:29.728\n&gt;&gt; Okay.\n\n557\n00:29:29.728 --> 00:29:30.600\n&gt;&gt; All right, so we'll put a comma.\n\n558\n00:29:30.600 --> 00:29:34.263\nAnd notice as soon as I put the comma\nin there, everything goes away and\n\n559\n00:29:34.263 --> 00:29:35.960\nwe're all hunky-dory again.\n\n560\n00:29:35.960 --> 00:29:38.550\nSo I can list as many\nparameters as I want.\n\n561\n00:29:38.550 --> 00:29:39.910\nI am gonna separate them out with commas.\n\n562\n00:29:39.910 --> 00:29:43.900\nIt would be the same thing if I was\ndoing this all on one line, right?\n\n563\n00:29:43.900 --> 00:29:47.810\nI'd have a comma between each one\nof my parameters I was defining.\n\n564\n00:29:47.810 --> 00:29:52.690\nSo now I've got category defined,\nand I'm gonna replace my hard code.\n\n565\n00:29:54.968 --> 00:29:57.941\nWow, I used to have autofill for that one.\n\n566\n00:29:57.941 --> 00:29:58.595\n&gt;&gt; Cat.\n\n567\n00:29:58.595 --> 00:30:01.150\n[LAUGH]\n&gt;&gt; Yeah, I'm going to change that to\n\n568\n00:30:01.150 --> 00:30:01.960\ncategory.\n\n569\n00:30:07.020 --> 00:30:07.978\nWe're going to save this guy.\n\n570\n00:30:07.978 --> 00:30:09.270\nAnd we're gonna execute this guy.\n\n571\n00:30:09.270 --> 00:30:11.000\nI like executing it from down here.\n\n572\n00:30:11.000 --> 00:30:13.520\nYou might have noticed this and\nthere's really nothing you can do.\n\n573\n00:30:13.520 --> 00:30:14.990\nI actually did a lot of research on this.\n\n574\n00:30:14.990 --> 00:30:16.300\nI can't find anything.\n\n575\n00:30:16.300 --> 00:30:19.708\nWhen you execute it from ISE,\nfrom the script pane, I'm gonna just.\n\n576\n00:30:23.360 --> 00:30:27.380\nDuh, we haven't got that far yet.\n\n577\n00:30:27.380 --> 00:30:32.160\nWhen you execute it from the script pane,\nit does regurgitate the script itself,\n\n578\n00:30:32.160 --> 00:30:35.347\nthen give you the output,\nwhich I don't care for, but\n\n579\n00:30:35.347 --> 00:30:37.999\nthere's really not much\nyou can do about it.\n\n580\n00:30:37.999 --> 00:30:40.560\nAnd in this case,\nI've gotta provide parameters anyway.\n\n581\n00:30:40.560 --> 00:30:44.040\nSo I'm gonna have to run it from down\nhere, which is the error that I'm getting,\n\n582\n00:30:44.040 --> 00:30:46.202\nright, saying, hey,\nyou've got a null value.\n\n583\n00:30:46.202 --> 00:30:51.482\nIt's trying to return the top something,\nbut I didn't give it a value, all right?\n\n584\n00:30:51.482 --> 00:30:53.230\n&gt;&gt; Okay.\n&gt;&gt; So that's why I got that error.\n\n585\n00:30:53.230 --> 00:30:55.460\nSo let's call that again, we'll call test.\n\n586\n00:30:55.460 --> 00:30:57.307\nNow category comes first.\n\n587\n00:30:57.307 --> 00:30:59.800\nLet's do it the long way first.\n\n588\n00:30:59.800 --> 00:31:04.869\nThe proper way is to specify\nyour parameter name or\n\n589\n00:31:04.869 --> 00:31:09.455\nproperty name, category cpu, and for top,\n\n590\n00:31:09.455 --> 00:31:15.500\nI want the top 15, and\nI should be able to run that.\n\n591\n00:31:15.500 --> 00:31:18.690\nAnd let's see, it does look like\nI'm getting my CPU statistics.\n\n592\n00:31:20.410 --> 00:31:24.060\nAnd I have about 15 there,\neverything is working.\n\n593\n00:31:24.060 --> 00:31:27.210\nIf we try that again,\nlet's see if our parameter worked.\n\n594\n00:31:27.210 --> 00:31:31.670\nLet's change this from cpu to working set.\n\n595\n00:31:31.670 --> 00:31:38.050\nAnd, tada, I now have working set.\n\n596\n00:31:38.050 --> 00:31:43.604\nSo now we have a script that I can\nchoose the category I want to return and\n\n597\n00:31:43.604 --> 00:31:47.760\nI can choose how many I return\nwhen I call the script.\n\n598\n00:31:47.760 --> 00:31:48.870\nAnd we're not done.\n\n599\n00:31:48.870 --> 00:31:49.373\nWe got a long way.\n\n600\n00:31:49.373 --> 00:31:53.606\nThere's a lot more that we can do\nto really make this script useful,\n\n601\n00:31:53.606 --> 00:31:55.410\nbut you give me that, yeah.\n\n602\n00:31:55.410 --> 00:31:56.673\n&gt;&gt; But, I have a but, too.\n\n603\n00:31:56.673 --> 00:31:59.190\nAnd I guess it doesn't even sound right.\n\n604\n00:31:59.190 --> 00:32:02.830\nAnyhow, any who,\nwe have a part two headed your way.\n\n605\n00:32:02.830 --> 00:32:04.650\nBut for this show,\nwe'll go ahead and sign out.\n\n606\n00:32:04.650 --> 00:32:06.289\nI've been your host, Cherokee Boose.\n\n607\n00:32:06.289 --> 00:32:07.650\n&gt;&gt; And I'm Mike Rodrick.\n\n608\n00:32:07.650 --> 00:32:11.698\n&gt;&gt; See you next time here at ITProTV.\n\n609\n00:32:11.698 --> 00:32:15.870\n[MUSIC]\n\n610\n00:32:15.870 --> 00:32:18.263\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "243181170"
        },
        {
          "description": "In this episode, we will use the knowledge from the previous episodes to write a PowerShell script. We will go through the process of taking a repetitive task and creating a script that will help automate the process.",
          "length": "1880",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-1-2-writing_a_script_pt_2-111417-PGM.00_31_08_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-1-2-writing_a_script_pt_2-111417-PGM.00_31_08_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-1-2-writing_a_script_pt_2-111417-PGM.00_31_08_06.Still001-sm.jpg",
          "title": "Writing a Script Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.189 --> 00:00:02.638\nWelcome to ITProTV I'm\nyour host Don Pezet.\n\n2\n00:00:02.638 --> 00:00:07.136\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:07.136 --> 00:00:08.405\n[MUSIC]\n\n4\n00:00:08.405 --> 00:00:11.862\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.862 --> 00:00:13.951\n&gt;&gt; Welcome to your\nPowerShell scripting series.\n\n6\n00:00:13.951 --> 00:00:15.540\nI'm your show host Cherokee Boose.\n\n7\n00:00:15.540 --> 00:00:18.470\nThis is actually a part\ntwo of continuation\n\n8\n00:00:18.470 --> 00:00:21.880\nfrom a previous show where we were,\nwell, writing a script.\n\n9\n00:00:21.880 --> 00:00:25.519\nAnd back with us today in studios to\nhelp complete the script, we have Mr.\n\n10\n00:00:25.519 --> 00:00:26.290\nMike Rodrick.\n\n11\n00:00:26.290 --> 00:00:26.874\nThank you for joining us today.\n\n12\n00:00:26.874 --> 00:00:27.954\nMike, how are you?\n\n13\n00:00:27.954 --> 00:00:30.544\n&gt;&gt; Doing great Cherokee,\nexcited to be back, and\n\n14\n00:00:30.544 --> 00:00:35.960\nyeah keep working on our script that we're\ngonna add some more fun stuff too, right.\n\n15\n00:00:35.960 --> 00:00:39.880\nI know in the first episode, I did spend a\nlittle time talking about writing scripts\n\n16\n00:00:39.880 --> 00:00:44.450\nin general and something else I thought\nof that I wanted to mention then, and\n\n17\n00:00:44.450 --> 00:00:48.350\nI'll go ahead and\nmention it now is scripts are never done.\n\n18\n00:00:48.350 --> 00:00:49.250\nIt's one of those things.\n\n19\n00:00:49.250 --> 00:00:50.560\nIt's like for any of you guys or\n\n20\n00:00:50.560 --> 00:00:55.720\ngals out there that maybe write HTML,\nweb pages and things like that.\n\n21\n00:00:55.720 --> 00:00:56.910\nI think it's similar to that.\n\n22\n00:00:58.350 --> 00:01:01.190\nOr I hear artists saying\nthe same thing sometimes.\n\n23\n00:01:01.190 --> 00:01:02.780\nIt's like the work is never complete.\n\n24\n00:01:02.780 --> 00:01:06.870\nThere's always something else I can add or\ndo or refine or tweak or make better.\n\n25\n00:01:06.870 --> 00:01:12.340\nIf you just understand that your scripture\nwill evolve with you or not with you but\n\n26\n00:01:12.340 --> 00:01:17.230\nthey will evolve over time,\nyou'll continue to refine and add to them.\n\n27\n00:01:17.230 --> 00:01:21.360\n&gt;&gt; I think anyone who's been in\nthe capacity of a network admin or\n\n28\n00:01:21.360 --> 00:01:23.440\nsomething similar to that function or\n\n29\n00:01:23.440 --> 00:01:27.280\nrole especially if you have to monitor,\nthat's always in flux and changing too.\n\n30\n00:01:27.280 --> 00:01:30.670\nIt's never a static environment that\nwe're working with these days so\n\n31\n00:01:30.670 --> 00:01:35.440\nit's pretty awesome that we have a tool\nto help flow with the tides here.\n\n32\n00:01:35.440 --> 00:01:36.310\n&gt;&gt; Absolutely.\n\n33\n00:01:36.310 --> 00:01:37.360\nI like it.\n\n34\n00:01:37.360 --> 00:01:39.120\nAll right, so let's jump right back in.\n\n35\n00:01:39.120 --> 00:01:43.930\nWe left off we had added a second\nparameter to our script so now we can\n\n36\n00:01:43.930 --> 00:01:50.448\nreturn a list of processes, but we are\ngoing to sort that, descending, based on.\n\n37\n00:01:50.448 --> 00:01:52.011\nYou know what I did in that last one?\n\n38\n00:01:52.011 --> 00:01:53.071\n&gt;&gt; What'd you do?\n\n39\n00:01:55.573 --> 00:01:58.526\n&gt;&gt; I left,\nI made a mistake in my last one, wow.\n\n40\n00:01:58.526 --> 00:02:01.026\nI don't know if anybody out there\ncaught that in part one, but\n\n41\n00:02:01.026 --> 00:02:02.289\nwe'll fix it here in part two.\n\n42\n00:02:02.289 --> 00:02:05.780\nBut let me finish what I was saying, and\nthen I'll show you my mistake there.\n\n43\n00:02:05.780 --> 00:02:08.180\nWe added two parameters,\ncategory and top, so\n\n44\n00:02:08.180 --> 00:02:12.040\nthat I could then select how many\nservices I was returning, right?\n\n45\n00:02:12.040 --> 00:02:15.960\nOnce I sorted it, I wanted the top 10 or\nthe top 15 or the top eight.\n\n46\n00:02:15.960 --> 00:02:20.651\nAnd then,\nwe can also choose what category we're\n\n47\n00:02:20.651 --> 00:02:25.250\nreturning CPU or\nworking set or page memory.\n\n48\n00:02:25.250 --> 00:02:28.620\nBut what I left,\nnotice I left CPU over here.\n\n49\n00:02:28.620 --> 00:02:32.769\nSo even though we had our select\nwas returning the CPU column-\n\n50\n00:02:32.769 --> 00:02:35.067\n&gt;&gt; It wasn't sorting by, if we had done,\n\n51\n00:02:35.067 --> 00:02:37.730\nso here's-\n&gt;&gt; So what overrules in this situation?\n\n52\n00:02:37.730 --> 00:02:38.360\n&gt;&gt; Well, in this case,\n\n53\n00:02:38.360 --> 00:02:41.640\nit was returning CPU because\nthat's what we told it to select.\n\n54\n00:02:41.640 --> 00:02:44.340\nOr, it was returning whatever we wanted.\n\n55\n00:02:44.340 --> 00:02:49.300\nSo if I did, let's get back\ndown to the script pane here.\n\n56\n00:02:49.300 --> 00:02:54.000\nIf I did WS like this one here,\nit's returning working set, all right, but\n\n57\n00:02:54.000 --> 00:02:57.290\nnotice it's not sorted properly\ncuz it's being sorted by CPU.\n\n58\n00:02:57.290 --> 00:03:01.840\nI forgot to put my\nparameter in both places.\n\n59\n00:03:01.840 --> 00:03:06.970\nNot only do I want to change what\ncolumn are returning CPU, working set,\n\n60\n00:03:06.970 --> 00:03:10.670\nhandles, whatever, I also need to sort\nit by the column that I want to return.\n\n61\n00:03:10.670 --> 00:03:11.310\n&gt;&gt; Right there.\n\n62\n00:03:11.310 --> 00:03:12.550\n&gt;&gt; Yeah, so let's add that.\n\n63\n00:03:12.550 --> 00:03:17.040\nLet's do a dollar sign category\nto the sort property or\n\n64\n00:03:17.040 --> 00:03:18.970\nthe sort object command as well.\n\n65\n00:03:18.970 --> 00:03:23.420\nLet's save that and\nlet's try that one more time, and\n\n66\n00:03:23.420 --> 00:03:27.773\nmake sure now,\nwe are indeed sorted by working set and\n\n67\n00:03:27.773 --> 00:03:31.957\nnot some unseen column that\nwe were not returning.\n\n68\n00:03:31.957 --> 00:03:33.741\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, yeah, sorry about that,\n\n69\n00:03:33.741 --> 00:03:34.574\nladies and gentle men.\n\n70\n00:03:34.574 --> 00:03:38.162\nSo if you're watching part one, I'll have\nto put an addendum there, cuz we're gonna\n\n71\n00:03:38.162 --> 00:03:41.570\nget a bunch of messages of people saying,\nbut you're not really sorting by that.\n\n72\n00:03:41.570 --> 00:03:44.800\nSo I appreciate that, and we fixed it.\n\n73\n00:03:44.800 --> 00:03:47.850\nAll right,\nlet's see what else we want to do.\n\n74\n00:03:47.850 --> 00:03:50.410\nSo, next thing I wanna to talk\nabout we're going to back and\n\n75\n00:03:50.410 --> 00:03:53.040\ntalk a little bit more\nabout these parameters.\n\n76\n00:03:53.040 --> 00:03:54.740\nBecause as it stands now,\nit's pretty cool,\n\n77\n00:03:54.740 --> 00:03:58.750\nwe can provide the parameter information,\nwhen we call the Script.\n\n78\n00:03:58.750 --> 00:04:00.010\nYou've seen me do it.\n\n79\n00:04:00.010 --> 00:04:04.690\nCategory, in this case,\nis going to be Working Set.\n\n80\n00:04:04.690 --> 00:04:08.660\nI can change that to CPU or\nwhatever other property I wanted.\n\n81\n00:04:08.660 --> 00:04:14.500\nAnd I can return the top 15, the top 5,\nwhatever it is I wanna do, right.\n\n82\n00:04:14.500 --> 00:04:19.600\nBut I can also leave these guys out,\nbecause one of the things\n\n83\n00:04:19.600 --> 00:04:23.515\nwith these scripts that you wanna keep in\nmind is you wanna make them easy to use.\n\n84\n00:04:23.515 --> 00:04:26.715\nIf I have to go through too\nmuch typing to call the script,\n\n85\n00:04:26.715 --> 00:04:29.855\nI might just right click on my\ntask bar and open up processes or\n\n86\n00:04:29.855 --> 00:04:33.905\ndo something like that, there might be\nsomething else that's a little bit easier.\n\n87\n00:04:33.905 --> 00:04:39.710\nIn this case, I could leave out those\nparameter names and it would still work.\n\n88\n00:04:39.710 --> 00:04:41.550\nIt still works just fine.\n\n89\n00:04:41.550 --> 00:04:44.440\nBut you do have to be really\ncareful here because now,\n\n90\n00:04:44.440 --> 00:04:46.800\nit's going to be based on position.\n\n91\n00:04:46.800 --> 00:04:50.390\nIn other words, this working set\ngoes into whatever I put here,\n\n92\n00:04:50.390 --> 00:04:53.840\nin the first parameter,\ngoes into the first parameter,\n\n93\n00:04:53.840 --> 00:04:58.330\nwhatever I put as that second one,\ngoes into the second one.\n\n94\n00:04:58.330 --> 00:05:02.514\nSo if I try to switch those around,\nif I did 15 CPU,\n\n95\n00:05:02.514 --> 00:05:07.481\nI want the top 15 sorted by CPU and\nI get, no I can't do that.\n\n96\n00:05:07.481 --> 00:05:10.233\nBecause it's trying to dump this 15-\n&gt;&gt; Number.\n\n97\n00:05:10.233 --> 00:05:14.600\n&gt;&gt; Into-\n&gt;&gt; We're expecting a category.\n\n98\n00:05:14.600 --> 00:05:18.430\n&gt;&gt; Yes, the 15 worked for\ncategory because it hasn't got there yet.\n\n99\n00:05:18.430 --> 00:05:20.880\nBut it looks like CPU\nis causing he problem.\n\n100\n00:05:20.880 --> 00:05:23.480\ntrying to convert this To an int.\n\n101\n00:05:23.480 --> 00:05:25.180\n&gt;&gt; To a numerical or int yeah.\n\n102\n00:05:25.180 --> 00:05:27.520\n&gt;&gt; Yeah, exactly so that's going to fail.\n\n103\n00:05:27.520 --> 00:05:31.694\nSo it's something you've got to keep in\nmind when you're running those commands,\n\n104\n00:05:31.694 --> 00:05:33.986\nif you're not gonna use\nthe parameter names,\n\n105\n00:05:33.986 --> 00:05:36.589\nyou do have to put them in\nthe proper order all right?\n\n106\n00:05:36.589 --> 00:05:38.796\nAnd then, everything will work just fine.\n\n107\n00:05:38.796 --> 00:05:43.590\nNow, if I'm working with a script okay,\nthat's not a problem.\n\n108\n00:05:43.590 --> 00:05:44.580\nI can remember that.\n\n109\n00:05:44.580 --> 00:05:46.860\nI can do that every time no big deal.\n\n110\n00:05:46.860 --> 00:05:48.550\nIf other people are going\nto be working with it,\n\n111\n00:05:48.550 --> 00:05:53.130\nit might be a little more of\nan issue that I want to deal with.\n\n112\n00:05:53.130 --> 00:05:55.179\nThere are a couple of things\nthat we can do to help.\n\n113\n00:05:56.450 --> 00:06:00.800\nThe first thing we can do\nis we can require value\n\n114\n00:06:00.800 --> 00:06:04.580\nbecause at this point if his script\ngets run without any parameters,\n\n115\n00:06:06.350 --> 00:06:10.300\nit's gonna fail because they've got\nnothing to plug in to these values.\n\n116\n00:06:11.350 --> 00:06:15.780\nRight so what we could do is we\ncould require the parameter.\n\n117\n00:06:15.780 --> 00:06:17.090\nBefore you try to run the script,\n\n118\n00:06:17.090 --> 00:06:19.800\nmake sure they're passing\nthe appropriate parameters into it.\n\n119\n00:06:19.800 --> 00:06:21.590\nAnd it's really easy to do.\n\n120\n00:06:21.590 --> 00:06:26.570\nAll we're gonna do is add some\nproperties to the parameters themselves.\n\n121\n00:06:26.570 --> 00:06:30.545\nAnd it's done on a per parameter basis so\nI'll have to do it for\n\n122\n00:06:30.545 --> 00:06:33.003\neach one if I choose to do so all right?\n\n123\n00:06:33.003 --> 00:06:34.426\nSo let's make it mandatory.\n\n124\n00:06:34.426 --> 00:06:38.078\nI'm gonna do an open bracket,\nand then parameter,\n\n125\n00:06:40.966 --> 00:06:44.230\nOpen parentheses mandatory.\n\n126\n00:06:45.880 --> 00:06:50.005\nIt is going to equal true and\nthat's a $true, that built in variable,\n\n127\n00:06:50.005 --> 00:06:57.070\nin PowerShell, close my parentheses, close\nmy brace, right, all before category.\n\n128\n00:06:58.640 --> 00:06:59.560\nAnd let's see what happens.\n\n129\n00:06:59.560 --> 00:07:04.810\nLet's save that and let's execute\nthat now without any parameters.\n\n130\n00:07:04.810 --> 00:07:06.200\nI'm just going to call it the script name.\n\n131\n00:07:07.870 --> 00:07:12.990\nAnd look what it does, without any\nadditional code from me, I'm able to,\n\n132\n00:07:12.990 --> 00:07:15.960\nit's telling me, hey,\nyou must supply values for\n\n133\n00:07:15.960 --> 00:07:19.440\nthe following parameters, category\nis the parameter, what do you want?\n\n134\n00:07:19.440 --> 00:07:20.232\nI want working set.\n\n135\n00:07:20.232 --> 00:07:25.105\nNow it fails once it gets to top\ncuz we haven't pick that one, but\n\n136\n00:07:25.105 --> 00:07:30.716\nI want you to see what that parameter\nmandatory equals true is going to do.\n\n137\n00:07:30.716 --> 00:07:35.482\n&gt;&gt; Okay, and just to reiterate may\nbe cuz I've told you before I'm\n\n138\n00:07:35.482 --> 00:07:39.379\na little slow sometimes\nhere with the parenthesis.\n\n139\n00:07:39.379 --> 00:07:45.363\nWe can't use any kinds of quotations\nmarks or anything for the mandatory true.\n\n140\n00:07:45.363 --> 00:07:46.544\nIt has to be those parenthesis there?\n\n141\n00:07:46.544 --> 00:07:47.723\n&gt;&gt; Has to be the parenthesis, yes.\n\n142\n00:07:47.723 --> 00:07:51.443\nSo you got open close brackets around\nthe whole thing, cuz there are other\n\n143\n00:07:51.443 --> 00:07:54.743\nparameters I can set, and\nI would end up putting commas in here but\n\n144\n00:07:54.743 --> 00:07:57.389\neach parameter is going to\nbe in those parenthesis.\n\n145\n00:07:57.389 --> 00:08:00.306\nAnd really what you should think\nabout with the parenthesis.\n\n146\n00:08:00.306 --> 00:08:02.098\nThink about your order of operations.\n\n147\n00:08:02.098 --> 00:08:04.071\nRight is basically what I'm doing.\n\n148\n00:08:04.071 --> 00:08:08.530\nI'm encapsulating this particular\nin this case mandatory equals true.\n\n149\n00:08:08.530 --> 00:08:10.910\nWe're just encapsulating\nthat with parentheses.\n\n150\n00:08:10.910 --> 00:08:11.460\n&gt;&gt; Got it.\n\n151\n00:08:11.460 --> 00:08:15.200\n&gt;&gt; All right so\nit still failed because of top.\n\n152\n00:08:15.200 --> 00:08:17.920\nBut you saw how it prompted me for\nthe parameter.\n\n153\n00:08:17.920 --> 00:08:19.370\nThat's pretty darn cool I think.\n\n154\n00:08:20.690 --> 00:08:25.440\nAnother way we could potentially help\nif we don't necessarily want to make it\n\n155\n00:08:25.440 --> 00:08:28.810\nmandatory right and prompt them for\n\n156\n00:08:28.810 --> 00:08:32.190\ninformation is we could\nsupply a default value.\n\n157\n00:08:32.190 --> 00:08:35.420\nWe can say look I'll let you put\nwhatever you want into this parameter,\n\n158\n00:08:35.420 --> 00:08:38.270\nbut if you don't provide\nanything I'm gonna go ahead and\n\n159\n00:08:38.270 --> 00:08:41.240\nuse this because I've gotta\nhave something, right?\n\n160\n00:08:41.240 --> 00:08:45.490\nSo two different ways I can go about\nmaking sure my script is gonna function\n\n161\n00:08:45.490 --> 00:08:46.630\nwith parameters.\n\n162\n00:08:46.630 --> 00:08:49.650\nEither make the parameters mandatory, so\n\n163\n00:08:49.650 --> 00:08:53.660\nthat the script won't run if you\ndon't pass one, it'll prompt you and\n\n164\n00:08:53.660 --> 00:08:58.660\nmake you pass one, or provide a default\nvalue so that if they don't provide one\n\n165\n00:08:58.660 --> 00:09:01.630\nIt has something that it can use\nin place or in lieu of right?\n\n166\n00:09:01.630 --> 00:09:05.170\nAnd you can mix and match right, on the\nfirst one I went ahead and said mandatory.\n\n167\n00:09:05.170 --> 00:09:09.440\nOn the second one let's provide a default\nvalue, all you do is assign a value.\n\n168\n00:09:09.440 --> 00:09:10.930\nIt's that easy right?\n\n169\n00:09:10.930 --> 00:09:15.430\nSo top now equals 10 so let's try it out,\n\n170\n00:09:15.430 --> 00:09:20.230\nI'm gonna save that I'm not gonna provide\nany parameters when I call the script\n\n171\n00:09:22.200 --> 00:09:24.840\nand because category is\nmandatory its prompting me, and\n\n172\n00:09:24.840 --> 00:09:28.080\nI'll say that I want my page memory or pm.\n\n173\n00:09:30.120 --> 00:09:33.710\nAnd then rather than prompt me for\ntop, it just goes in and uses 10.\n\n174\n00:09:33.710 --> 00:09:37.120\nI should have a total of\n10 processes listed there.\n\n175\n00:09:38.450 --> 00:09:40.860\nNow, just because you've provided\na default value doesn't mean you\n\n176\n00:09:40.860 --> 00:09:41.550\ncan't change it.\n\n177\n00:09:41.550 --> 00:09:45.650\nThe default value's only used\nif you don't provide one.\n\n178\n00:09:45.650 --> 00:09:48.280\nSo I could do something like this.\n\n179\n00:09:48.280 --> 00:09:55.060\nI could say, working set 15 and\nI still get 15, right?\n\n180\n00:09:55.060 --> 00:10:00.430\nIt's only gonna use this 10 If I don't\nprovide one when I call the script.\n\n181\n00:10:00.430 --> 00:10:01.290\nPretty neat.\n\n182\n00:10:01.290 --> 00:10:01.910\n&gt;&gt; Yeah.\n\n183\n00:10:01.910 --> 00:10:02.500\n&gt;&gt; Right.\n\n184\n00:10:02.500 --> 00:10:06.760\nSo think about the power that you\nhave in your hands right now.\n\n185\n00:10:06.760 --> 00:10:11.360\nYou can write scripts and you can accept\ninput from when you call the script and\n\n186\n00:10:11.360 --> 00:10:14.090\nuse that to execute In your script.\n\n187\n00:10:14.090 --> 00:10:15.430\nI think it's pretty darn good.\n\n188\n00:10:15.430 --> 00:10:18.860\n&gt;&gt; So Mike, earlier,\nyou said we'd be utilizing some of those\n\n189\n00:10:18.860 --> 00:10:22.630\npiggybacking off of some of the techniques\nthat we saw earlier like in if statements.\n\n190\n00:10:22.630 --> 00:10:24.260\nAre we gonna incorporate that here also?\n\n191\n00:10:24.260 --> 00:10:25.730\n&gt;&gt; We definitely are.\n\n192\n00:10:25.730 --> 00:10:29.310\nOne thing I do want to go ahead and\nyes, let's do that.\n\n193\n00:10:29.310 --> 00:10:31.430\nLet's set up an if Statement, all right?\n\n194\n00:10:31.430 --> 00:10:36.330\nOne of the things that I noticed about\nwhen I'm working with this one in\n\n195\n00:10:36.330 --> 00:10:39.510\nparticular, this is the working set.\n\n196\n00:10:39.510 --> 00:10:42.420\nAlso when I work with PM, or page memory.\n\n197\n00:10:42.420 --> 00:10:44.580\nLet's take a look at that one.\n\n198\n00:10:46.580 --> 00:10:47.870\nLittle pm for page memory.\n\n199\n00:10:47.870 --> 00:10:50.810\nYou know it's in bytes, which is\n\n200\n00:10:50.810 --> 00:10:55.170\nnot too terribly difficult to convert\nin my head or to ball park it, right?\n\n201\n00:10:55.170 --> 00:10:59.840\nI can start looking at my separators and\ngo okay, 153 megabytes\n\n202\n00:11:01.830 --> 00:11:06.530\nWouldn't it be cool if we could just have\nthis formatted for us a little bit better?\n\n203\n00:11:06.530 --> 00:11:07.260\nSo let's do that.\n\n204\n00:11:07.260 --> 00:11:12.970\nWe're gonna line that up next, which is\ngoing to lead up into an if statement.\n\n205\n00:11:12.970 --> 00:11:15.270\nI'll show you here in just a second.\n\n206\n00:11:15.270 --> 00:11:16.950\nSo, let's do this.\n\n207\n00:11:16.950 --> 00:11:21.970\nLet's say we want to,\nwe could do this in line.\n\n208\n00:11:21.970 --> 00:11:28.170\nI could come over here to category and\nI could try to do my formatting here.\n\n209\n00:11:28.170 --> 00:11:30.170\nI will tell you it's not\ngonna be nearly as easy and\n\n210\n00:11:30.170 --> 00:11:33.850\nit's not gonna look all that pretty\neither as far as your code goes and\n\n211\n00:11:33.850 --> 00:11:38.530\nyes I did say it, code can be pretty and\nwe want pretty codes.\n\n212\n00:11:38.530 --> 00:11:44.510\nWhat we're gonna do is we're going to\nmore this out into a variable, all right.\n\n213\n00:11:44.510 --> 00:11:49.000\nWhat I'm gonna do is,\nI'm gonna say $format= and\n\n214\n00:11:49.000 --> 00:11:53.450\nthen we're gonna use a hash table.\n\n215\n00:11:53.450 --> 00:11:55.320\nWe've talked about those before.\n\n216\n00:11:55.320 --> 00:12:00.726\nI'm gonna do @{label\n\n217\n00:12:00.726 --> 00:12:04.510\nis going to equal\n\n218\n00:12:04.510 --> 00:12:09.660\nmemory in megabytes.\n\n219\n00:12:09.660 --> 00:12:11.800\nOkay.\nAnd I will end my, that is a string,\n\n220\n00:12:11.800 --> 00:12:13.390\nso I have got that in quotes.\n\n221\n00:12:13.390 --> 00:12:16.620\nAnd I am going to do\na semi colon expression\n\n222\n00:12:18.210 --> 00:12:22.430\nequals and I am going to open my brace and\n\n223\n00:12:22.430 --> 00:12:27.540\nI want to do Int inside brackets, and\n\n224\n00:12:27.540 --> 00:12:31.040\nI'll go back and explain my code in more\ndetail as soon as we finish typing it out.\n\n225\n00:12:31.040 --> 00:12:36.761\nOut braces, dollar sign,\nunderscore, .WS working set,\n\n226\n00:12:36.761 --> 00:12:40.369\ndivided by 1 megabyte.\n\n227\n00:12:40.369 --> 00:12:42.960\nRemember Cherokee you liked that one,\n\n228\n00:12:42.960 --> 00:12:45.540\nwhere we can use that\ninstead of the numbers.\n\n229\n00:12:45.540 --> 00:12:47.250\n&gt;&gt; It knows what a megabyte is and\n&gt;&gt; Yeah.\n\n230\n00:12:47.250 --> 00:12:49.910\n&gt;&gt; 24\n&gt;&gt; Sorry, I was just looking\n\n231\n00:12:49.910 --> 00:12:50.550\nat that thing.\n\n232\n00:12:50.550 --> 00:12:56.600\nIt's kind of strange how Powershell is\nhere, I'm assuming not case-sensitive,\n\n233\n00:12:56.600 --> 00:13:01.390\notherwise we'd have capital M capital B,\nfor that megabyte, versus the lower case.\n\n234\n00:13:01.390 --> 00:13:02.600\nCorrect.\n&gt;&gt; Yes, yes.\n\n235\n00:13:02.600 --> 00:13:05.300\nAnd Microsoft,\nthey'll tell you when you go out and\n\n236\n00:13:05.300 --> 00:13:09.160\nlook up some information on that,\nwe understand that we don't follow\n\n237\n00:13:09.160 --> 00:13:12.960\nconvention when it comes to megabyte\nversus megabit like a capital M, little B.\n\n238\n00:13:12.960 --> 00:13:14.910\n&gt;&gt; Right.\n&gt;&gt; Or capital M, big B.\n\n239\n00:13:14.910 --> 00:13:20.770\nAnd they're like, in this case, they\nwent with convenience over conformance.\n\n240\n00:13:20.770 --> 00:13:21.340\n&gt;&gt; Okay.\n\n241\n00:13:21.340 --> 00:13:24.721\n&gt;&gt; They just figured\nit's easier than most.\n\n242\n00:13:24.721 --> 00:13:26.149\nAnd that was just their call.\n\n243\n00:13:26.149 --> 00:13:31.290\nAll right, so now we've got this\nexpression here that's going to convert my\n\n244\n00:13:31.290 --> 00:13:36.870\nworking set, that value It's gonna\ndivide it by what, 1024 basically.\n\n245\n00:13:36.870 --> 00:13:40.360\nMake sure that's an integer,\nI don't need any remainders or doubles or\n\n246\n00:13:40.360 --> 00:13:41.750\nanything like that.\n\n247\n00:13:41.750 --> 00:13:44.480\nIt's gonna give me a label of megabytes.\n\n248\n00:13:44.480 --> 00:13:51.695\nAnd what we're gonna do\nis dump that over here.\n\n249\n00:13:54.605 --> 00:13:55.841\nFormats.\n\n250\n00:13:57.556 --> 00:13:59.890\nAll right and let's see what we get now.\n\n251\n00:13:59.890 --> 00:14:03.816\nSo I'm gonna save that, and\nI'm gonna execute that.\n\n252\n00:14:03.816 --> 00:14:06.275\nWe get workingset.15.\n\n253\n00:14:06.275 --> 00:14:11.010\nAnd look at there,\nnow instead of that big,\n\n254\n00:14:11.010 --> 00:14:15.270\nlong number, I'm getting memory\nin megabytes instead of bytes.\n\n255\n00:14:17.090 --> 00:14:21.750\nThat's pretty neat, but here's the thing.\n\n256\n00:14:21.750 --> 00:14:27.930\nWe've now just kinda hard coated into our\nexpression here or into our statement.\n\n257\n00:14:27.930 --> 00:14:30.470\nIn fact, you know what,\nlet's do a couple of things here.\n\n258\n00:14:30.470 --> 00:14:34.230\nBefore I explain why that is not the best\nway of going about doing what we just did,\n\n259\n00:14:34.230 --> 00:14:36.680\nI wanna show you the line break.\n\n260\n00:14:36.680 --> 00:14:42.020\nCuz I'm starting to wrap across the screen\nand I hate horizontal scrolling.\n\n261\n00:14:42.020 --> 00:14:45.180\nAnd I know most of you probably do\nas well, plus you can't see it.\n\n262\n00:14:45.180 --> 00:14:46.950\nSo I'm gonna use our line break character,\n\n263\n00:14:46.950 --> 00:14:52.720\nremember the line break in PowerShell is\nthe back tick, or the grav accent mark.\n\n264\n00:14:52.720 --> 00:14:55.660\nSo I'm going to put that,\nand then hit return.\n\n265\n00:14:55.660 --> 00:14:57.580\nNothing can come after that.\n\n266\n00:14:57.580 --> 00:15:03.300\nIf there is a space there, ISE might fix\nit for you because it is pretty smart,\n\n267\n00:15:03.300 --> 00:15:06.090\nbut it will break most things if\nyou try to run that as a script.\n\n268\n00:15:06.090 --> 00:15:08.110\nSo nothing after your graf.\n\n269\n00:15:08.110 --> 00:15:10.300\nThat indicates the line break and\n\n270\n00:15:10.300 --> 00:15:14.170\nconvention is going be break\nit on places like the pipe.\n\n271\n00:15:14.170 --> 00:15:16.080\nAnd in fact, in PowerShell ISE,\n\n272\n00:15:17.090 --> 00:15:20.695\nnotice my command didn't break when I\ntook out the grav, grav, gravay, grav.\n\n273\n00:15:20.695 --> 00:15:24.450\n&gt;&gt; [LAUGH]\n&gt;&gt; Because I did a carriage return on\n\n274\n00:15:24.450 --> 00:15:28.000\nthe pipe character,\nthe pipe character is actually-\n\n275\n00:15:28.000 --> 00:15:28.810\n&gt;&gt; A logical break.\n\n276\n00:15:28.810 --> 00:15:32.550\n&gt;&gt; Will double as a logical break,\nexactly, as a carriage return.\n\n277\n00:15:32.550 --> 00:15:37.590\nSo ISE is perfectly fine with me\ndoing that and not putting the grav.\n\n278\n00:15:37.590 --> 00:15:41.720\nIf I ever wanted to break like here,\nI want to take advantage of\n\n279\n00:15:41.720 --> 00:15:44.270\nall my real estate, but\nI wanna break it maybe right there.\n\n280\n00:15:44.270 --> 00:15:47.500\nThat's when you're gonna do grav and\nreturn.\n\n281\n00:15:47.500 --> 00:15:50.930\nIf I take that out,\nthis is going to break.\n\n282\n00:15:50.930 --> 00:15:53.110\nIt's going to see it as two\nseparate lines of code.\n\n283\n00:15:53.110 --> 00:15:56.744\nWith that or\nIT is going to be one line of code.\n\n284\n00:15:56.744 --> 00:16:02.488\nI am going to back to doing it on\nthe pipe instead of the accent mark.\n\n285\n00:16:02.488 --> 00:16:05.733\nCuz honestly,\nI do not like the accent marks.\n\n286\n00:16:05.733 --> 00:16:11.565\nMy problem is, if I'm looking at code and\nwe got a bunch of this running around,\n\n287\n00:16:11.565 --> 00:16:16.915\nI'm like wait, is that something on\nmy screen or is that an actual mark?\n\n288\n00:16:16.915 --> 00:16:18.000\n&gt;&gt; [LAUGH]\n&gt;&gt; And it's so\n\n289\n00:16:18.000 --> 00:16:22.330\neasy to get white space on the other\nside of it and not know it's there, and\n\n290\n00:16:22.330 --> 00:16:25.450\nend up breaking things that way,\nthat I'm not a big fan.\n\n291\n00:16:25.450 --> 00:16:27.613\nIf you have to, you have to,\nit's great that it's there.\n\n292\n00:16:27.613 --> 00:16:32.300\nBut there's usually some natural places\nyou can find to break your script.\n\n293\n00:16:32.300 --> 00:16:33.570\nLike this, to me, makes sense.\n\n294\n00:16:33.570 --> 00:16:35.070\nHey, we're gonna get the process.\n\n295\n00:16:35.070 --> 00:16:36.740\n&gt;&gt; It does, and\nit all kinda goes together.\n\n296\n00:16:36.740 --> 00:16:40.560\nBecause then you're taking that output,\nso you can logically separate that also.\n\n297\n00:16:40.560 --> 00:16:42.430\nWell, hence logical separator.\n\n298\n00:16:42.430 --> 00:16:44.520\n&gt;&gt; Right, yeah, that's exactly right.\n\n299\n00:16:44.520 --> 00:16:46.850\nI can read this, it makes sense to me.\n\n300\n00:16:46.850 --> 00:16:49.873\nI see that this is\ngetting dumped into this,\n\n301\n00:16:49.873 --> 00:16:52.906\nwhich is getting dumped into this, right?\n\n302\n00:16:52.906 --> 00:16:54.301\nSo it does flow nicely.\n\n303\n00:16:54.301 --> 00:16:58.650\nAll right, so\nthis worked with putting the format here.\n\n304\n00:16:58.650 --> 00:17:02.260\nIt worked, but\nI hard coded ws into here, right?\n\n305\n00:17:04.180 --> 00:17:08.520\nAnd so when I call back working set,\neverything looks fine.\n\n306\n00:17:08.520 --> 00:17:13.735\nWhat if I do CPU, All right?\n\n307\n00:17:13.735 --> 00:17:16.110\nI still get megabytes up here.\n\n308\n00:17:16.110 --> 00:17:20.150\nAnd this is actually not my CPU\npercentage, but it is my working set.\n\n309\n00:17:20.150 --> 00:17:22.370\nIt's doing this right here.\n\n310\n00:17:22.370 --> 00:17:24.750\nSo even though I'm sorting it by CPU,\n\n311\n00:17:24.750 --> 00:17:30.170\nin this case, because CPU is\nstill getting plugged into here,\n\n312\n00:17:30.170 --> 00:17:35.390\nthis is not taking into account\nwhat category I've chosen at all.\n\n313\n00:17:35.390 --> 00:17:42.097\nAnd I can't really just change this to\n$category, because memory, working set,\n\n314\n00:17:42.097 --> 00:17:47.230\npage memory, things like that,\nI wanna divide by 1,024.\n\n315\n00:17:47.230 --> 00:17:50.470\nBut CPU,\nI don't need to divide by anything.\n\n316\n00:17:50.470 --> 00:17:52.960\nHandles I wouldn't need\nto divide by anything.\n\n317\n00:17:52.960 --> 00:17:56.467\nSo there isn't one solution for\neach option there.\n\n318\n00:17:56.467 --> 00:18:01.784\nIf I only had a way to make\na decision based on a condition.\n\n319\n00:18:01.784 --> 00:18:03.200\n&gt;&gt; [LAUGH]\n&gt;&gt; Anything pop into mind, Cherokee?\n\n320\n00:18:03.200 --> 00:18:09.340\n&gt;&gt; A decision based on a condition, If.\n\n321\n00:18:09.340 --> 00:18:10.064\n&gt;&gt; I like it.\n\n322\n00:18:10.064 --> 00:18:11.340\n&gt;&gt; [LAUGH]\n&gt;&gt; If, right?\n\n323\n00:18:11.340 --> 00:18:15.460\nIf you chose working set, do this.\n\n324\n00:18:15.460 --> 00:18:20.830\nElse if you chose page memory,\ndo this, right?\n\n325\n00:18:20.830 --> 00:18:21.940\nElse this.\n\n326\n00:18:21.940 --> 00:18:25.310\nWe can take advantage of that, and\nthat's what we're going to do here.\n\n327\n00:18:25.310 --> 00:18:27.520\nSo let's change this up.\n\n328\n00:18:27.520 --> 00:18:30.175\nWhat we're gonna do, is go right\nabove my little Format statement,\n\n329\n00:18:30.175 --> 00:18:33.280\nbecause I wanna save as\nmuch typing as I can.\n\n330\n00:18:33.280 --> 00:18:35.950\nWe'll open up our if, and\nwe remember our syntax?\n\n331\n00:18:35.950 --> 00:18:38.190\nIf always starts with an open parentheses,\n\n332\n00:18:38.190 --> 00:18:41.030\nthat's gonna be where our condition\nis that we're gonna check.\n\n333\n00:18:41.030 --> 00:18:44.126\nSo we're gonna say,\n\n334\n00:18:44.126 --> 00:18:49.637\nif ($category = ws), all right?\n\n335\n00:18:49.637 --> 00:18:51.746\nClose my parenthesis, open my brace.\n\n336\n00:18:51.746 --> 00:18:55.374\nGo ahead and put in my closing\nbrace down below there, so\n\n337\n00:18:55.374 --> 00:18:58.180\nPowerShell doesn't yell at me.\n\n338\n00:18:58.180 --> 00:19:01.270\nTab that in,\nbecause we want pretty code, right?\n\n339\n00:19:01.270 --> 00:19:07.510\nSo if category equals working set,\ndo this, right?\n\n340\n00:19:07.510 --> 00:19:09.890\nFormat is going to equal this.\n\n341\n00:19:09.890 --> 00:19:13.040\nBut what if they didn't choose ws?\n\n342\n00:19:14.400 --> 00:19:18.960\nThat's where our else can come into play,\nright?\n\n343\n00:19:18.960 --> 00:19:25.123\nRemember, else is going to be what to do\nif the if statement doesn't ring true.\n\n344\n00:19:25.123 --> 00:19:30.483\nSo else, we'll just say\n\n345\n00:19:30.483 --> 00:19:36.110\n$format = $category.\n\n346\n00:19:36.110 --> 00:19:41.870\nSo basically what I'm saying is hey,\nif they didn't choose ws,\n\n347\n00:19:41.870 --> 00:19:46.066\nif it's anything else besides ws, just use\nyour normal category like you always do.\n\n348\n00:19:46.066 --> 00:19:52.170\nIf it is ws then do this, right?\n\n349\n00:19:52.170 --> 00:19:57.840\nSo now format will change based on, and\nwhy does my syntax looks crazy there?\n\n350\n00:19:57.840 --> 00:19:59.982\n&gt;&gt; I don't know, but\nyou know what we're missing right now?\n\n351\n00:19:59.982 --> 00:20:03.222\n&gt;&gt; What?\n&gt;&gt; In sitcoms when they have the music,\n\n352\n00:20:03.222 --> 00:20:05.160\nthe themey music.\n\n353\n00:20:05.160 --> 00:20:06.843\nSo they won't give me a sound board.\n\n354\n00:20:06.843 --> 00:20:08.178\n&gt;&gt; Aw.\n&gt;&gt; I know, but I mean,\n\n355\n00:20:08.178 --> 00:20:10.450\nwe could play the Celine Dion song,\n\n356\n00:20:10.450 --> 00:20:14.030\nIt's All Coming Back to Me Now\nfrom the previous shows.\n\n357\n00:20:14.030 --> 00:20:15.310\nI mean, why not?\n\n358\n00:20:15.310 --> 00:20:17.610\n&gt;&gt; Ever watch that show Mad Money?\n\n359\n00:20:17.610 --> 00:20:18.990\n&gt;&gt; No [LAUGH].\n\n360\n00:20:18.990 --> 00:20:21.496\n&gt;&gt; He's got a sound board\nof all these sound effects.\n\n361\n00:20:21.496 --> 00:20:24.282\nAnd so as he's talking,\nif he's talking about a bad stock,\n\n362\n00:20:24.282 --> 00:20:27.770\nhe could hit the one buzzer that's like,\nwomp, womp, womp.\n\n363\n00:20:27.770 --> 00:20:30.021\n&gt;&gt; Yeah, I have to make my own,\nand they're just not that great.\n\n364\n00:20:30.021 --> 00:20:32.090\n&gt;&gt; Yeah, all right, we'll work on that.\n\n365\n00:20:32.090 --> 00:20:35.160\nWell we could probably write\na script to do that very thing.\n\n366\n00:20:35.160 --> 00:20:38.700\nIf you push F2, play this wave file.\n\n367\n00:20:38.700 --> 00:20:39.630\nYeah, we could work on that.\n\n368\n00:20:39.630 --> 00:20:40.428\n&gt;&gt; Okay.\n&gt;&gt; All right,\n\n369\n00:20:40.428 --> 00:20:41.910\nwe'll do a select case statement.\n\n370\n00:20:41.910 --> 00:20:44.430\nAll right, so\nlet's see if we've fixed our problem now.\n\n371\n00:20:44.430 --> 00:20:49.360\nWe should get the special formatting\nif they choose ws as the category.\n\n372\n00:20:49.360 --> 00:20:50.920\nIf they do anything else, like CPU or\n\n373\n00:20:50.920 --> 00:20:55.420\nHandles, it should leave the formatting\nalone, basically just use the categories.\n\n374\n00:20:55.420 --> 00:21:00.520\nSo we'd be right back to putting category\nhere, cuz format equals category.\n\n375\n00:21:00.520 --> 00:21:01.580\nWhat do you think?\n\n376\n00:21:01.580 --> 00:21:03.390\nLet's try it, see what we got.\n\n377\n00:21:03.390 --> 00:21:08.520\nSo with ws 15 I get my pretty formatting,\nand\n\n378\n00:21:08.520 --> 00:21:12.500\nI convert it back into megabytes.\n\n379\n00:21:12.500 --> 00:21:19.798\nBut if I call that with CPU,\nIt doesn't bother formatting it and\n\n380\n00:21:19.798 --> 00:21:23.430\ndividing it by 1,024,\nit just gives me the CPU percentage.\n\n381\n00:21:23.430 --> 00:21:27.040\nNow we could again go back and add some,\ncuz this really isn't the best formatting.\n\n382\n00:21:27.040 --> 00:21:30.510\nI might not need all those-\n&gt;&gt; All the to the right of the decimal?\n\n383\n00:21:30.510 --> 00:21:34.038\n&gt;&gt; Yeah, I probably just want the,\n127 is close enough.\n\n384\n00:21:34.038 --> 00:21:40.590\nOr even round it up to 128\nif you wanted to, all right?\n\n385\n00:21:40.590 --> 00:21:42.050\nSo let's fix that up a little bit.\n\n386\n00:21:42.050 --> 00:21:43.810\nI think we've got a little\nbit of time left, right?\n\n387\n00:21:44.880 --> 00:21:46.230\nLet's add some more to it.\n\n388\n00:21:47.280 --> 00:21:48.221\nSo how could we fix this?\n\n389\n00:21:48.221 --> 00:21:53.950\nWell what if we just added\nto our if statement, right?\n\n390\n00:21:53.950 --> 00:21:58.715\nWe could say if equals ws, else if,\nand we could something else.\n\n391\n00:21:58.715 --> 00:22:00.810\nCuz here's what you wanna\ntry to think about.\n\n392\n00:22:00.810 --> 00:22:04.240\nYou wanna think about the different\nthings that could come up, and\n\n393\n00:22:04.240 --> 00:22:07.080\nthen answer those questions, right?\n\n394\n00:22:07.080 --> 00:22:11.800\nSo if they choose ws,\nthen we're gonna do this.\n\n395\n00:22:11.800 --> 00:22:14.822\nNow here's an interesting one,\nwhat if they choose pm?\n\n396\n00:22:14.822 --> 00:22:19.463\nPm is my page memory,\nwhich also needs to be divided by 1,024.\n\n397\n00:22:19.463 --> 00:22:25.237\nSo there's really a couple\nof ways I could solve this,\n\n398\n00:22:25.237 --> 00:22:30.200\ncuz I could do an or right here, right?\n\n399\n00:22:30.200 --> 00:22:31.679\nSo two conditions-\n&gt;&gt; I see.\n\n400\n00:22:31.679 --> 00:22:36.040\nThat would both result\nin this being executed.\n\n401\n00:22:36.040 --> 00:22:37.460\nSo we could say-\n&gt;&gt; Comma?\n\n402\n00:22:37.460 --> 00:22:41.150\nIf category equals ws or, right?\n\n403\n00:22:41.150 --> 00:22:45.941\nSo -or $category =\n\n404\n00:22:45.941 --> 00:22:49.937\n\"pm\", right?\n\n405\n00:22:49.937 --> 00:22:51.594\nSo that way either one of these is true.\n\n406\n00:22:51.594 --> 00:22:55.570\nRemember ors, either side has\nto be true to return a true.\n\n407\n00:22:55.570 --> 00:22:59.140\nSo this would return true if\neither one of those is true, and\n\n408\n00:22:59.140 --> 00:23:00.240\nthen this would be executed.\n\n409\n00:23:00.240 --> 00:23:02.950\n&gt;&gt; And if not,\nwe're gonna proceed to our next if.\n\n410\n00:23:02.950 --> 00:23:06.570\n&gt;&gt; Exactly, we're gonna go back to\nthe else and just do $format = $category.\n\n411\n00:23:06.570 --> 00:23:09.722\nThe downside,\nthe problem with doing it this way here,\n\n412\n00:23:09.722 --> 00:23:13.250\nat least in this particular script,\nis this, right?\n\n413\n00:23:13.250 --> 00:23:17.466\nI need to now change, if they choose\npm I'd have to change this to pm,\n\n414\n00:23:17.466 --> 00:23:20.400\nwhich means I now need to\nput a variable in here.\n\n415\n00:23:20.400 --> 00:23:20.916\n&gt;&gt; Okay.\n&gt;&gt; And\n\n416\n00:23:20.916 --> 00:23:24.860\nit's gonna take a little bit of extra work\nto get this to function the way I want.\n\n417\n00:23:24.860 --> 00:23:28.822\nAnd it's an easy one to miss, like I did\nearlier with the category or the top-\n\n418\n00:23:28.822 --> 00:23:29.570\n&gt;&gt; Yeah, I could see that.\n\n419\n00:23:29.570 --> 00:23:30.430\n&gt;&gt; Right?\nI completely missed\n\n420\n00:23:30.430 --> 00:23:32.240\nchanging out one of my variables.\n\n421\n00:23:32.240 --> 00:23:37.050\nSo what I'm gonna do, in this case,\nis not go this route, all right?\n\n422\n00:23:37.050 --> 00:23:39.980\nLike I said, there's always\nmore than one way to do things.\n\n423\n00:23:39.980 --> 00:23:43.400\nWe just wanna get it done, we want it to\nlook good, we want it to be readable, and\n\n424\n00:23:43.400 --> 00:23:46.440\nnot cause any performance hits or\nbreak anything else.\n\n425\n00:23:46.440 --> 00:23:52.109\nSo what I'm gonna do is simply\nbump my else down a little bit,\n\n426\n00:23:52.109 --> 00:23:54.788\nand we're gonna do an else.\n\n427\n00:23:54.788 --> 00:23:59.716\nOops, wow, all right,\nan l comes next, Mike.\n\n428\n00:23:59.716 --> 00:24:03.205\nElseif And another condition, right?\n\n429\n00:24:03.205 --> 00:24:10.040\nWe'll do open parentheses, we'll paste\nthis in here, category = pm, all right.\n\n430\n00:24:10.040 --> 00:24:12.350\nAnd open brace, and\n\n431\n00:24:12.350 --> 00:24:16.640\nthen the code to execute is\nbasically gonna be the same thing.\n\n432\n00:24:19.560 --> 00:24:23.905\nExcept that this is gonna be PM, right.\n\n433\n00:24:23.905 --> 00:24:29.090\nAnd I'll make sure I include my\nclosing curly brace for that else if.\n\n434\n00:24:29.090 --> 00:24:35.970\nAnd so you see that while it might not\nbe the best way to go about doing this.\n\n435\n00:24:35.970 --> 00:24:38.340\nIt was definitely the quickest,\nI was able to just copy and\n\n436\n00:24:38.340 --> 00:24:40.750\npaste my condition, my statement.\n\n437\n00:24:40.750 --> 00:24:43.490\nChange this one little thing to PM and\nI'm off to the races and\n\n438\n00:24:43.490 --> 00:24:45.040\neverything is working, right?\n\n439\n00:24:45.040 --> 00:24:47.092\nI'm not spending an hour trying\nto figure out all right,\n\n440\n00:24:47.092 --> 00:24:48.260\nnow I wanna put a variable here.\n\n441\n00:24:48.260 --> 00:24:52.270\n&gt;&gt; What kind of dependencies do I need to\nmake this thing actually run properly?\n\n442\n00:24:52.270 --> 00:24:55.510\n&gt;&gt; Yeah, where else do I need to\nchange and all that fun stuff.\n\n443\n00:24:55.510 --> 00:24:58.170\nSo well I guess there's always\nmore than one to do things, and\n\n444\n00:24:58.170 --> 00:25:00.970\nI'm really looking for\nthe easiest way to get the job done.\n\n445\n00:25:00.970 --> 00:25:04.111\nSo in this case, that in my opinion\nthis is the way we're gonna go.\n\n446\n00:25:04.111 --> 00:25:06.795\nSo now if I do working set,\n\n447\n00:25:06.795 --> 00:25:12.050\nI get divided by 1024,\nsorted by working set.\n\n448\n00:25:13.760 --> 00:25:16.120\nIt has the right information there.\n\n449\n00:25:16.120 --> 00:25:23.470\nBut if I do pm, I get the page memory.\n\n450\n00:25:23.470 --> 00:25:27.140\nAnd notice, you can see by,\nthis one is 232 for ISE.\n\n451\n00:25:27.140 --> 00:25:29.390\nPage memory is 150, so\nthey are different results, right?\n\n452\n00:25:29.390 --> 00:25:32.880\nI'm pulling back the proper\ninformation because\n\n453\n00:25:32.880 --> 00:25:34.970\nI've fixed that here and if I do CPU.\n\n454\n00:25:38.462 --> 00:25:45.300\nI wanna do 15 to keep consistent,\nI get my CPU, right?\n\n455\n00:25:45.300 --> 00:25:50.700\nNow to fix the CPU, because we\nare just dumping that out as category.\n\n456\n00:25:52.190 --> 00:25:57.790\nLet's get rid of the remainders there and\nreally we understand our data types.\n\n457\n00:25:57.790 --> 00:25:58.860\nWell think about that, right?\n\n458\n00:25:58.860 --> 00:26:03.922\nIf it's got a decimal in it, most likely\na double, integers don't have decimals.\n\n459\n00:26:03.922 --> 00:26:07.465\nSo if I can convert that to an integer,\nwe know PowerShell around,\n\n460\n00:26:07.465 --> 00:26:11.160\nwe've talked about the different\nrounding properties there.\n\n461\n00:26:11.160 --> 00:26:12.810\nBut I can get rid of those decimals and\n\n462\n00:26:12.810 --> 00:26:17.790\nmake this a lot tidier because I'm really\nnot worried about 0.05% of my processor.\n\n463\n00:26:17.790 --> 00:26:20.306\nI'm worried about the one\nthat's using 132, versus 16.\n\n464\n00:26:20.306 --> 00:26:22.195\nSo the whole numbers\nare gonna be just fine.\n\n465\n00:26:22.195 --> 00:26:27.030\n&gt;&gt; So we can allow for a little bit of,\nI don't know what's the word, forgiveness.\n\n466\n00:26:27.030 --> 00:26:28.000\n&gt;&gt; Approximation?\n\n467\n00:26:28.000 --> 00:26:29.340\n&gt;&gt; Approximation, yeah, there you go.\n\n468\n00:26:29.340 --> 00:26:30.900\n&gt;&gt; Yeah,\nwe don't have to be quite that exact.\n\n469\n00:26:30.900 --> 00:26:34.540\nSo we're gonna change this up but\nit is gonna take a little bit of work\n\n470\n00:26:34.540 --> 00:26:39.620\ncuz I can't simply call int here.\n\n471\n00:26:39.620 --> 00:26:44.770\nI can't cast that because really\ncategory equals whatever you typed in.\n\n472\n00:26:44.770 --> 00:26:45.680\n&gt;&gt; A word.\n&gt;&gt; It's a string.\n\n473\n00:26:45.680 --> 00:26:47.303\n&gt;&gt; Yeah like a, okay, a string.\n\n474\n00:26:47.303 --> 00:26:48.835\n&gt;&gt; Yeah, it's representing\na property of an object, so CPU-\n\n475\n00:26:48.835 --> 00:26:49.432\n&gt;&gt; [LAUGH] I'm so\n\n476\n00:26:49.432 --> 00:26:52.293\nglad that you're here to keep\nme on track of these terms Mike.\n\n477\n00:26:52.293 --> 00:26:54.946\n&gt;&gt; [LAUGH] Well you used the terms\nthat everybody else uses and\n\n478\n00:26:54.946 --> 00:26:58.276\nI'll tell you the ones you need to\nknow for exams or talking technical.\n\n479\n00:26:58.276 --> 00:26:59.620\nYeah, there you go.\n\n480\n00:26:59.620 --> 00:27:03.100\nBut in the end everybody is gonna\nuse your terms, I know that.\n\n481\n00:27:03.100 --> 00:27:07.430\nSo format int, I can't do that,\nit's not gonna work.\n\n482\n00:27:07.430 --> 00:27:09.680\nSo we're gonna have to get\na little bit creative, and\n\n483\n00:27:09.680 --> 00:27:13.760\nall I'm gonna do is simply use\nthis expression capability.\n\n484\n00:27:13.760 --> 00:27:18.451\nWe'll just take that down and\nagain reuseability keep things simple.\n\n485\n00:27:18.451 --> 00:27:20.923\nI'm gonna dump that in here.\n\n486\n00:27:20.923 --> 00:27:24.700\nAnd now I'm just gonna change my label,\nCPU int.\n\n487\n00:27:24.700 --> 00:27:29.860\nI don't need to divide\nanything by anything.\n\n488\n00:27:29.860 --> 00:27:32.060\n&gt;&gt; So you get rid of that one.\n\n489\n00:27:32.060 --> 00:27:35.600\n&gt;&gt; Right, so\nwe can get rid of all of these.\n\n490\n00:27:35.600 --> 00:27:38.170\nAnd we are gonna do, but\nI do need my parenthesis.\n\n491\n00:27:38.170 --> 00:27:42.178\nSo really what I wanna get rid of is this.\n\n492\n00:27:42.178 --> 00:27:45.492\nRemember the $_ is that\nautomatically created special\n\n493\n00:27:45.492 --> 00:27:50.335\nvariable that represents each object in\na collection as you're looping through.\n\n494\n00:27:50.335 --> 00:27:54.820\nSo I'm gonna say this time through, right,\nthis time through, I want the CPU for\n\n495\n00:27:54.820 --> 00:27:55.810\nPowerShell ISE.\n\n496\n00:27:55.810 --> 00:28:01.000\nThe next time through I want the CPU for\nMSNP engine or whatever the case may be.\n\n497\n00:28:01.000 --> 00:28:03.288\nSo that $_.$category.\n\n498\n00:28:03.288 --> 00:28:06.994\nI know that kind of looks a little weird,\n\n499\n00:28:06.994 --> 00:28:11.470\nbut that's what's going to make this work.\n\n500\n00:28:11.470 --> 00:28:13.840\nAnd I'm keeping it general, right?\n\n501\n00:28:13.840 --> 00:28:16.161\nI didn't say else if CPU, right.\n\n502\n00:28:16.161 --> 00:28:21.370\nAnd then else if because handles\nis another one that's in there.\n\n503\n00:28:21.370 --> 00:28:24.930\nA lot of times I need to know how many\nhandles a particular process has launched.\n\n504\n00:28:24.930 --> 00:28:28.973\nWell a handle is another one that\nan integer would work just fine,\n\n505\n00:28:28.973 --> 00:28:33.324\nso I can use this generic, although\nits goinna have CPU as an integer.\n\n506\n00:28:33.324 --> 00:28:38.880\nI wonder if I could cheat,\n&gt;&gt; And I just realized Mike,\n\n507\n00:28:38.880 --> 00:28:43.470\nwhy don't you change this to $category.\n\n508\n00:28:43.470 --> 00:28:48.082\nThen it will definitely work for\nanything else other than ws or pm.\n\n509\n00:28:48.082 --> 00:28:50.230\nShall we?\n\n510\n00:28:50.230 --> 00:28:51.190\n&gt;&gt; Let's try it, yeah.\n\n511\n00:28:51.190 --> 00:28:52.800\n&gt;&gt; Yeah, let's see what happens.\n\n512\n00:28:52.800 --> 00:28:54.050\nAll right, so we'll start with the ones.\n\n513\n00:28:54.050 --> 00:28:55.254\nWe'll start up at the top.\n\n514\n00:28:55.254 --> 00:28:58.040\nWe'll say WS and let's just do 5.\n\n515\n00:28:58.040 --> 00:29:00.344\nKeep the output short, all right.\n\n516\n00:29:00.344 --> 00:29:02.110\nOops, WS and 5.\n\n517\n00:29:03.560 --> 00:29:04.700\nAnd woo-hoo, it's divided.\n\n518\n00:29:04.700 --> 00:29:05.490\nI've got memory.\n\n519\n00:29:05.490 --> 00:29:06.580\nI see megabytes.\n\n520\n00:29:06.580 --> 00:29:08.080\nThat looks good.\n\n521\n00:29:08.080 --> 00:29:09.110\nLet's try PM.\n\n522\n00:29:11.840 --> 00:29:14.600\nAll right, same thing,\nlooking good, divided up.\n\n523\n00:29:14.600 --> 00:29:15.220\nLet's do.\n\n524\n00:29:15.220 --> 00:29:16.686\n&gt;&gt; Dollar sign category.\n\n525\n00:29:16.686 --> 00:29:17.540\n&gt;&gt; CPU.\n\n526\n00:29:17.540 --> 00:29:18.225\n&gt;&gt; CPU.\n\n527\n00:29:18.225 --> 00:29:20.080\n&gt;&gt; Yeah,\nwhich should go into dollar sign category.\n\n528\n00:29:20.080 --> 00:29:22.710\nSo CPU, sure enough.\n\n529\n00:29:22.710 --> 00:29:24.680\nLet's try one we haven't tried yet\nat all, handles.\n\n530\n00:29:28.250 --> 00:29:31.380\nLook at that,\nit works fine because this generic one\n\n531\n00:29:31.380 --> 00:29:33.550\nis basically saying just\nconvert it to an int.\n\n532\n00:29:33.550 --> 00:29:39.220\nBoth of which handles CPU and int is just\nfine for the results I'm looking for.\n\n533\n00:29:39.220 --> 00:29:43.840\nSo in the end, we started off\nwith a simple get process, or\n\n534\n00:29:43.840 --> 00:29:46.280\nI should say, in the beginning [LAUGH].\n\n535\n00:29:46.280 --> 00:29:47.800\n&gt;&gt; We started with Hello World.\n\n536\n00:29:47.800 --> 00:29:49.430\n&gt;&gt; We did,\nwe started with Hello World, right?\n\n537\n00:29:49.430 --> 00:29:50.420\n&gt;&gt; We just need a Goodbye World.\n\n538\n00:29:50.420 --> 00:29:52.300\n&gt;&gt; Yeah, we do need a Goodbye World.\n\n539\n00:29:52.300 --> 00:29:55.174\nBut really we started the script\nwith simply get process.\n\n540\n00:29:55.174 --> 00:29:55.790\n&gt;&gt; Yes.\n\n541\n00:29:55.790 --> 00:29:58.670\n&gt;&gt; And then we just kept adding and\nadding and\n\n542\n00:29:58.670 --> 00:30:02.590\nthinking about the functionality\nthat I wanna get out of this script.\n\n543\n00:30:02.590 --> 00:30:05.570\nWhat is it that would make\nthis script reusable?\n\n544\n00:30:05.570 --> 00:30:11.140\nBecause if it's simply a script hardcoded\nto go get one property like CPU,\n\n545\n00:30:11.140 --> 00:30:16.090\nI can simply right-click on my taskbar,\npull up Task Manager and\n\n546\n00:30:16.090 --> 00:30:18.950\nget that information, right?\n\n547\n00:30:18.950 --> 00:30:22.112\nThe power of PowerShell\nscripting is really\n\n548\n00:30:22.112 --> 00:30:26.897\nwhen we start doing what we just did,\nand adding the flexibility,\n\n549\n00:30:26.897 --> 00:30:31.781\nthe ability to add parameters and\ncall those parameters as needed.\n\n550\n00:30:31.781 --> 00:30:34.810\nGive me that reusable code that I want.\n\n551\n00:30:34.810 --> 00:30:37.730\nAnd this code is only 16 lines.\n\n552\n00:30:37.730 --> 00:30:40.556\nThis is a very, very short script.\n\n553\n00:30:40.556 --> 00:30:43.664\nBut as we get more and\nmore complex scripts,\n\n554\n00:30:43.664 --> 00:30:47.110\nthe ability to use them\nin different scenarios.\n\n555\n00:30:47.110 --> 00:30:47.950\nI think it is huge.\n\n556\n00:30:47.950 --> 00:30:49.240\nSo hopefully you enjoy that.\n\n557\n00:30:49.240 --> 00:30:52.750\nWe got another one that we'll do but I'm\ngetting the signal that we might be out of\n\n558\n00:30:52.750 --> 00:30:54.740\ntime for this particular script and\nepisode.\n\n559\n00:30:54.740 --> 00:30:57.570\n&gt;&gt; That's right Mike,\nwe can come back with another show,\n\n560\n00:30:57.570 --> 00:30:59.570\nso we can create another script.\n\n561\n00:30:59.570 --> 00:31:02.660\nYou don't wanna miss that, but\nfor this show we are out of time.\n\n562\n00:31:02.660 --> 00:31:04.990\nSo we'll sign out,\nI've been your host, Cherokee Boose.\n\n563\n00:31:04.990 --> 00:31:05.730\n&gt;&gt; And I'm MIke Rodrick.\n\n564\n00:31:05.730 --> 00:31:07.795\n&gt;&gt; See you next time here at ITProTV\n\n565\n00:31:07.795 --> 00:31:14.867\n[MUSIC]\n\n566\n00:31:14.867 --> 00:31:17.157\nThank you for watching ITPro.TV.\n\n",
          "vimeoId": "242970412"
        },
        {
          "description": "In this episode, we will continue to look at writing PowerShell scripts. We will again use the process of taking an everyday task, and writing a script that will help automate the task.",
          "length": "1575",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-1-writing_another_script-111417-PGM.00_26_00_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-1-writing_another_script-111417-PGM.00_26_00_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-1-writing_another_script-111417-PGM.00_26_00_28.Still001-sm.jpg",
          "title": "Writing Another Script",
          "transcript": "WEBVTT\n\n1\n00:00:00.330 --> 00:00:01.260\nWelcome to ITProTV.\n\n2\n00:00:01.260 --> 00:00:05.747\nI'm your host Don Pezet coming at you\nlive from San Francisco, California.\n\n3\n00:00:05.747 --> 00:00:06.480\n[CROSSTALK]\n\n4\n00:00:06.480 --> 00:00:08.750\n[MUSIC]\n\n5\n00:00:08.750 --> 00:00:10.783\n&gt;&gt; You're watching ITProTV.\n\n6\n00:00:10.783 --> 00:00:14.310\n&gt;&gt; Welcome to your\nPowerShell Scripting Series.\n\n7\n00:00:14.310 --> 00:00:16.310\nI'm your show host Cherokee Boose.\n\n8\n00:00:16.310 --> 00:00:19.890\nIn this episode we will be\nwriting another script.\n\n9\n00:00:19.890 --> 00:00:22.390\nAnd to help guide us through\nthis process we have Mr.\n\n10\n00:00:22.390 --> 00:00:24.770\nMike Rodrick back in\nstudios with us today.\n\n11\n00:00:24.770 --> 00:00:25.860\nHow's it going today, Mike?\n\n12\n00:00:25.860 --> 00:00:28.270\n&gt;&gt; It's going great, Cherokee,\nthanks for having me back.\n\n13\n00:00:28.270 --> 00:00:30.610\nYeah, excited because we are gonna\nbe writing another script.\n\n14\n00:00:30.610 --> 00:00:32.020\nWe had so much fun writing the first one,\n\n15\n00:00:32.020 --> 00:00:36.410\nhopefully everybody is back to join us and\nwe're gonna write another one.\n\n16\n00:00:36.410 --> 00:00:39.990\nAnd we're just gonna try to\npull in some newer concepts.\n\n17\n00:00:39.990 --> 00:00:41.850\nSome of it we're gonna repeat.\n\n18\n00:00:41.850 --> 00:00:44.470\nWhich is always good,\nrepetition is good for learning.\n\n19\n00:00:44.470 --> 00:00:47.770\nAnd we'll try to throw in some\nnew concepts as well, as we go.\n\n20\n00:00:47.770 --> 00:00:51.140\nBut again,\nlooking at the process of taking a concept\n\n21\n00:00:51.140 --> 00:00:55.680\nof what it is I wanna try to do, and\nhow I can turn that into a script.\n\n22\n00:00:55.680 --> 00:00:59.320\nAnd try to automate it and\nadd some reusability to it, right?\n\n23\n00:00:59.320 --> 00:01:02.530\nNot just script exactly what\nI want to do this time.\n\n24\n00:01:02.530 --> 00:01:06.430\nBut make it to where it's something\nthat I can use other times,\n\n25\n00:01:06.430 --> 00:01:10.060\nwhen maybe the conditions are similar but\nnot exactly the same, right?\n\n26\n00:01:10.060 --> 00:01:11.400\nThat is the idea.\n\n27\n00:01:11.400 --> 00:01:15.610\nSo in this one, Cherokee, I thought\nwe would do work with files, right?\n\n28\n00:01:15.610 --> 00:01:18.190\nWe haven't really worked with files yet.\n\n29\n00:01:18.190 --> 00:01:21.300\nSo PowerShell has provider\nto work with a file system.\n\n30\n00:01:21.300 --> 00:01:22.370\nAnd it is something.\n\n31\n00:01:22.370 --> 00:01:25.600\nIt is a task that we might be-\n&gt;&gt; It's pretty common.\n\n32\n00:01:25.600 --> 00:01:26.430\n&gt;&gt; Yeah.\n&gt;&gt; We do,\n\n33\n00:01:26.430 --> 00:01:29.150\nwe have to manage everything\nthat people are creating.\n\n34\n00:01:29.150 --> 00:01:31.840\nSo let's make that a little easier for us.\n\n35\n00:01:31.840 --> 00:01:35.830\n&gt;&gt; Absolutely, if you're maintaining\nservers there might be log files you need\n\n36\n00:01:35.830 --> 00:01:39.470\nto archive, or\ncontent users upload content and\n\n37\n00:01:39.470 --> 00:01:43.160\nthen never use it and so\nwe need to move some of that off,\n\n38\n00:01:43.160 --> 00:01:46.920\nlike on our different file servers or\nsomething like that.\n\n39\n00:01:46.920 --> 00:01:52.260\nWe move that to an archive folder\nthat doesn't get backed up as often,\n\n40\n00:01:52.260 --> 00:01:55.030\ndoesn't get modified very often,\nthat kind of thing.\n\n41\n00:01:55.030 --> 00:01:57.330\nSo I thought that would be\na good concept for us to,\n\n42\n00:01:57.330 --> 00:01:58.720\nkinda learn some new techniques.\n\n43\n00:01:58.720 --> 00:02:00.700\nSo that's what we're gonna do.\n\n44\n00:02:00.700 --> 00:02:06.920\nAll right so, we're gonna start\nwith the commandlet Get-ChildItem.\n\n45\n00:02:06.920 --> 00:02:10.520\nThis is one of our commands that'll\nlet us return a directory or\n\n46\n00:02:10.520 --> 00:02:14.050\na listing of items in\na particular directory.\n\n47\n00:02:14.050 --> 00:02:18.230\nSo if I just do a Get-ChildItem, right.\n\n48\n00:02:18.230 --> 00:02:23.310\nAnd we try to execute that, what you'll\nsee and let's switch views here for\n\n49\n00:02:23.310 --> 00:02:28.290\na minute, is that I get our\nlisting of all the files, for\n\n50\n00:02:28.290 --> 00:02:29.668\nthe current directory, right?\n\n51\n00:02:29.668 --> 00:02:31.810\nI type Get-ChildItem and\n\n52\n00:02:31.810 --> 00:02:36.260\nyou'll see we'd ended up dumping in\nwhen it ran the script, was this path.\n\n53\n00:02:36.260 --> 00:02:38.100\nOops, that's not the right path.\n\n54\n00:02:38.100 --> 00:02:40.140\n&gt;&gt; Your script folder under documents.\n\n55\n00:02:40.140 --> 00:02:40.892\n&gt;&gt; Yes, there it is.\n\n56\n00:02:40.892 --> 00:02:44.270\n&gt;&gt; [LAUGH]\n&gt;&gt; Sorry, right below, thank you Cherokee.\n\n57\n00:02:44.270 --> 00:02:48.620\nThere's the directory listing for,\nthe current directory, right.\n\n58\n00:02:48.620 --> 00:02:52.480\nI guess the point is,\nwhen I ran that script,\n\n59\n00:02:52.480 --> 00:02:55.080\nit's based on where I'm currently located.\n\n60\n00:02:56.900 --> 00:02:59.130\nI can do my present working directory, and\n\n61\n00:02:59.130 --> 00:03:03.130\nsee that I am indeed in\nC:users/mike/document/scripts.\n\n62\n00:03:03.130 --> 00:03:07.120\nAnd if I did that differently, if we set\nlocation to maybe the C drive, right, and\n\n63\n00:03:07.120 --> 00:03:11.424\nI ran that script again,\nwhich I called test, again, all right.\n\n64\n00:03:12.940 --> 00:03:15.337\nAnd it's actually giving me scripts again.\n\n65\n00:03:15.337 --> 00:03:19.066\nInteresting.\n\n66\n00:03:23.767 --> 00:03:28.810\nYou know what,\nit's based on where my script is located.\n\n67\n00:03:28.810 --> 00:03:31.620\nAnyway, the point is,\n\n68\n00:03:31.620 --> 00:03:35.580\nis that whether it's beta I think it's\nactually being based on where my script\n\n69\n00:03:35.580 --> 00:03:40.440\nis located rather than based on where\nI'm currently located in the console.\n\n70\n00:03:40.440 --> 00:03:43.820\nWhich makes sense, but and\nthat must be what it's doing.\n\n71\n00:03:43.820 --> 00:03:47.660\nFor us and for our script, that's\nnot gonna do us a whole lot of good,\n\n72\n00:03:47.660 --> 00:03:51.280\nbecause if I am managing a server,\nor my remote machine\n\n73\n00:03:52.450 --> 00:03:57.470\nI wanna look at files in a particular\nfolder, not where I'm at.\n\n74\n00:03:57.470 --> 00:04:00.390\nI don't wanna have to change or\nmove the script.\n\n75\n00:04:00.390 --> 00:04:04.490\nIn order to change directories\nthat I'm working with, and\n\n76\n00:04:04.490 --> 00:04:10.558\nthat's cool because ChildItem has a -Path\nperimeter, which is gonna allow me to say,\n\n77\n00:04:10.558 --> 00:04:15.576\nhey, get ChildItem not from where\nyou're currently at but where I say.\n\n78\n00:04:15.576 --> 00:04:21.800\nSo let's say c:\\Scripts and\nnow let's save that.\n\n79\n00:04:21.800 --> 00:04:23.820\nAnd of course you know what\nthe results are going to be.\n\n80\n00:04:25.220 --> 00:04:28.165\nIt's going to give me a list of all\nthe files that are in that directory,\n\n81\n00:04:28.165 --> 00:04:29.910\nC:\\scripts.\n\n82\n00:04:29.910 --> 00:04:34.810\nNo longer in that SQL and\nusers might document scripts, right.\n\n83\n00:04:34.810 --> 00:04:40.350\nIt's now in the directory that I\nspecified in my script, all right.\n\n84\n00:04:40.350 --> 00:04:44.660\nWell that's good, except for\nthe fact that it's hard to code, right?\n\n85\n00:04:44.660 --> 00:04:46.610\nAnd we don't want to do that.\n\n86\n00:04:46.610 --> 00:04:50.430\nBut we also know from our watching\nout previous episodes how easy it is,\n\n87\n00:04:50.430 --> 00:04:52.540\nto make this a parameter based script.\n\n88\n00:04:52.540 --> 00:04:55.010\nWe can just add our parameter block.\n\n89\n00:04:55.010 --> 00:04:55.750\nSo let's do that.\n\n90\n00:04:55.750 --> 00:05:01.330\nLet's go up here and let's type in param(.\n\n91\n00:05:01.330 --> 00:05:05.400\nWe'll make sure we close our parentheses,\nso ISE doesn't get too mad at us.\n\n92\n00:05:05.400 --> 00:05:07.450\nAnd then let's specify a parameter.\n\n93\n00:05:07.450 --> 00:05:09.310\nLet's call it a, path.\n\n94\n00:05:09.310 --> 00:05:15.090\nBecause that's really what it is\nthat we want to try to do, is path.\n\n95\n00:05:15.090 --> 00:05:17.470\nNow something I didn't do in the previous\nepisode, I'm gonna go ahead and\n\n96\n00:05:17.470 --> 00:05:19.420\ndo it here, so I can show you.\n\n97\n00:05:19.420 --> 00:05:22.890\nI can type my variables as well.\n\n98\n00:05:22.890 --> 00:05:28.980\nIf you use an actual type and not make up\nyour own, it will work better, all right?\n\n99\n00:05:28.980 --> 00:05:30.310\nSo there it gets string path and\n\n100\n00:05:30.310 --> 00:05:34.700\nall that's gonna do, it's not gonna affect\nthe users as far as what they type, but\n\n101\n00:05:34.700 --> 00:05:38.570\nit will cause an error if\nthey try to throw an integer.\n\n102\n00:05:38.570 --> 00:05:41.020\nIt would actually convert\nit into a string.\n\n103\n00:05:41.020 --> 00:05:43.610\nIf they throw a string, everything's fine.\n\n104\n00:05:43.610 --> 00:05:46.730\nSo it just prevents my script\nfrom breaking later on.\n\n105\n00:05:46.730 --> 00:05:49.890\nGive me the error early on if\nthey try to pass something\n\n106\n00:05:49.890 --> 00:05:53.580\nthat can't be converted into a string,\nmy script will fail at that point\n\n107\n00:05:53.580 --> 00:05:57.860\nbefore it gets down into the lines of code\nand tries to use that variable somewhere.\n\n108\n00:05:57.860 --> 00:06:02.190\nSo you can definitely typecast your\nvariables or your parameters I should say,\n\n109\n00:06:02.190 --> 00:06:06.330\njust by the same way we do it when we're\ndeclaring variables within our script.\n\n110\n00:06:06.330 --> 00:06:11.770\nSo we'll do that and then we'll\nchange this to dollar sign path.\n\n111\n00:06:11.770 --> 00:06:15.150\nSo path equals dollar sign path.\n\n112\n00:06:15.150 --> 00:06:20.150\nWe'll save it, and now when we\ncall that script, I should be able\n\n113\n00:06:20.150 --> 00:06:25.340\nto say dash path equals and\nmaybe I want to c colon backslash windows.\n\n114\n00:06:27.350 --> 00:06:31.820\nAnd I get a directory of the SQL and\nWindows forward.\n\n115\n00:06:33.670 --> 00:06:35.465\nSo sweet we're already getting somewhere.\n\n116\n00:06:35.465 --> 00:06:40.233\nAnd our script is already becoming\na little more useful because I can get\n\n117\n00:06:40.233 --> 00:06:44.300\nthe directory listing of any\nfolder that I can get access to.\n\n118\n00:06:45.760 --> 00:06:48.590\nAll right, so next,\nwhat is it that we wanna do?\n\n119\n00:06:48.590 --> 00:06:52.430\nLet's change or\nlet's add a little more to this.\n\n120\n00:06:52.430 --> 00:06:54.742\nSo if I'm gonna be archiving files,\n\n121\n00:06:54.742 --> 00:06:59.901\nwhat do we typically look at to determine\nwhether a file should be archived or not?\n\n122\n00:06:59.901 --> 00:07:05.470\n&gt;&gt; I don't know, maybe something like date\nof creation or date of last modified.\n\n123\n00:07:05.470 --> 00:07:07.440\n&gt;&gt; Yeah, I like something like that.\n\n124\n00:07:07.440 --> 00:07:12.690\nLet's go with last modified, so we'll say\nif we have a file that hasn't been changed\n\n125\n00:07:12.690 --> 00:07:18.130\nor written to in a certain amount of time,\nwe're going to archive it off, all right?\n\n126\n00:07:18.130 --> 00:07:22.750\nAnd this might or might not be a realistic\nscenario, you guys can again, tweak this,\n\n127\n00:07:22.750 --> 00:07:27.090\nfiles have all kinds of properties, if\nyou want to look at when it was created,\n\n128\n00:07:27.090 --> 00:07:31.420\nwhen it was last accessed might even be\nbetter than last modified, if you've got\n\n129\n00:07:31.420 --> 00:07:35.740\ndocuments that nobody's accessing, let's\nmove them off the file server that has all\n\n130\n00:07:35.740 --> 00:07:38.380\nthe workload and put them on a different\nfile server maybe or something like that.\n\n131\n00:07:38.380 --> 00:07:39.210\n&gt;&gt; I think it's pretty realistic.\n\n132\n00:07:39.210 --> 00:07:40.720\nWell I mean it just makes sense, Mike.\n\n133\n00:07:40.720 --> 00:07:42.180\nIt's pretty practical.\n\n134\n00:07:42.180 --> 00:07:43.130\nI mean, like you said,\n\n135\n00:07:43.130 --> 00:07:46.050\nmaybe this isn't the best way to do it,\nbut for now it works.\n\n136\n00:07:46.050 --> 00:07:47.520\nIt gets the job done like you said.\n\n137\n00:07:47.520 --> 00:07:48.600\n&gt;&gt; Gets the job done, down and dirty.\n\n138\n00:07:48.600 --> 00:07:49.880\nThat's what we're talking about.\n\n139\n00:07:49.880 --> 00:07:54.000\nAll right, so we're returning a list of\nfiles in a directory that we choose when\n\n140\n00:07:54.000 --> 00:07:56.900\nwe call the script, that's a good start.\n\n141\n00:07:56.900 --> 00:07:57.839\nBut I want to filter that.\n\n142\n00:07:57.839 --> 00:07:59.912\nI don't want every file right?\n\n143\n00:07:59.912 --> 00:08:03.872\nI want to give, as we said,\nmaybe look at the last modified date or\n\n144\n00:08:03.872 --> 00:08:05.248\nsomething like that.\n\n145\n00:08:05.248 --> 00:08:12.762\nSo we're going to pipe that Get-ChildItem\ninto a where-object command.\n\n146\n00:08:12.762 --> 00:08:17.160\nThe where-object command lets me do\na little bit of filtering on our results.\n\n147\n00:08:17.160 --> 00:08:22.370\nI wanna get all these child items\nwhere name starts with W, right?\n\n148\n00:08:22.370 --> 00:08:26.910\nOr in our case, last write time is\na particular date, something like that.\n\n149\n00:08:27.950 --> 00:08:31.890\nThe where-object command itself has\nsome pretty cool updates to it.\n\n150\n00:08:31.890 --> 00:08:34.758\nI think this came out in PowerShell 3.\n\n151\n00:08:34.758 --> 00:08:40.479\nIf we look at get-alias\n-Definition where-object,\n\n152\n00:08:40.479 --> 00:08:47.695\nall right, we'll see there's\nactually a couple of aliases formed.\n\n153\n00:08:47.695 --> 00:08:51.310\nThere's just the word where,\nwhich is cool.\n\n154\n00:08:51.310 --> 00:08:55.210\nAnd there's also a question mark,\ninteresting.\n\n155\n00:08:55.210 --> 00:08:57.600\nSo let's try it out, all right?\n\n156\n00:08:57.600 --> 00:08:58.940\nI like the where.\n\n157\n00:08:58.940 --> 00:09:00.922\nI know the question mark is even shorter.\n\n158\n00:09:00.922 --> 00:09:03.870\nI'll show you both and\nyou guys can pick which one you like.\n\n159\n00:09:03.870 --> 00:09:09.508\nI like where and we're gonna look for\nthe property lastwriteTime.\n\n160\n00:09:09.508 --> 00:09:12.840\nNow remember how to determine\nwhat properties I have?\n\n161\n00:09:12.840 --> 00:09:16.160\nI can go and\njust pipe things out into a Get-Member.\n\n162\n00:09:16.160 --> 00:09:18.300\nI can see what properties are available.\n\n163\n00:09:18.300 --> 00:09:20.820\nI've done that.\nI know there's a last write time.\n\n164\n00:09:20.820 --> 00:09:25.280\nThat's the particular parameter I'm\ngonna be looking for in my files.\n\n165\n00:09:25.280 --> 00:09:27.281\nSo where lastWriteTime.\n\n166\n00:09:27.281 --> 00:09:29.251\n&gt;&gt; Gosh,\nI know I have to think about the format.\n\n167\n00:09:29.251 --> 00:09:30.094\n&gt;&gt; Less than.\n\n168\n00:09:30.094 --> 00:09:30.673\nWhat's that?\n\n169\n00:09:30.673 --> 00:09:33.233\n&gt;&gt; Like the format,\nyou know how that's a kind of a big deal,\n\n170\n00:09:33.233 --> 00:09:35.754\nespecially with scripting,\nlike month, date, year.\n\n171\n00:09:35.754 --> 00:09:36.576\n[CROSSTALK] Or is it date, month, year.\n\n172\n00:09:36.576 --> 00:09:38.808\n&gt;&gt; Yeah, date times challenging, I know.\n\n173\n00:09:38.808 --> 00:09:41.316\n&gt;&gt; [LAUGH]\n&gt;&gt; It really is, that's not a joke.\n\n174\n00:09:41.316 --> 00:09:43.036\nBut let's start with that, and\n\n175\n00:09:43.036 --> 00:09:47.790\nthen we're gonna actually fix that as well\nbecause I'm not a big fan of that either.\n\n176\n00:09:47.790 --> 00:09:52.170\nSo let's say, again,\nthis isn't gonna be a real realistic\n\n177\n00:09:52.170 --> 00:09:56.390\nnumber because I don't have a lot of\nfiles that are months old in these VMs.\n\n178\n00:09:56.390 --> 00:09:57.550\nBut in my script directory,\n\n179\n00:09:57.550 --> 00:10:01.730\nI know I've got some some files we've\ncreated over the last few days.\n\n180\n00:10:01.730 --> 00:10:04.150\nSo we'll be using days for\nour differences.\n\n181\n00:10:04.150 --> 00:10:08.980\nBut you might be using months, years,\nright, depending on your scenario.\n\n182\n00:10:08.980 --> 00:10:13.313\nSo let's say 11/10/17, right?\n\n183\n00:10:13.313 --> 00:10:14.480\nLet's see what that does.\n\n184\n00:10:14.480 --> 00:10:19.003\nSo earlier if we ran without this.\n\n185\n00:10:19.003 --> 00:10:20.220\nI'm gonna comment that out.\n\n186\n00:10:20.220 --> 00:10:24.402\nIn case I haven't shown you,\n# symbol is the comment for PowerShell.\n\n187\n00:10:24.402 --> 00:10:26.060\nSo I'm saying ignore everything else.\n\n188\n00:10:26.060 --> 00:10:28.273\nSo we've got the original script here.\n\n189\n00:10:28.273 --> 00:10:34.680\nI'm gonna save that, and\nI'm gonna run that using, where'd we go?\n\n190\n00:10:34.680 --> 00:10:37.108\nI'm gonna have to type that again.\n\n191\n00:10:37.108 --> 00:10:42.835\nNot Windows, let's do C:/scripts.\n\n192\n00:10:42.835 --> 00:10:45.359\nSo right now, returns all scripts\nthat are in that directory.\n\n193\n00:10:45.359 --> 00:10:48.030\nAll files, I should say, not just scripts.\n\n194\n00:10:48.030 --> 00:10:51.740\nAll files that are in that directory,\nokay?\n\n195\n00:10:51.740 --> 00:10:55.890\nIf we add this where to it, we'll save it.\n\n196\n00:10:56.890 --> 00:10:59.190\nAnd now we'll execute our script.\n\n197\n00:11:01.600 --> 00:11:03.350\nAnd you'll see that I lost.\n\n198\n00:11:03.350 --> 00:11:06.590\nIf you look at the results up here\nthere's some that are on the 13th,\n\n199\n00:11:06.590 --> 00:11:08.020\nthe 10th, right?\n\n200\n00:11:08.020 --> 00:11:11.870\nAnd in these results all I have are nines,\neights and sevens.\n\n201\n00:11:11.870 --> 00:11:18.456\nSo it's definitely showing me anything\nthat's less than November 10th 2017.\n\n202\n00:11:18.456 --> 00:11:19.980\nNot less than or equal to, right?\n\n203\n00:11:19.980 --> 00:11:24.990\nIf I change that to an equal\nto then we would get the tenth\n\n204\n00:11:24.990 --> 00:11:27.390\nas well as a possibility in there.\n\n205\n00:11:27.390 --> 00:11:28.540\n&gt;&gt; Maybe you don't have any ten files.\n\n206\n00:11:28.540 --> 00:11:29.660\n&gt;&gt; It doesn't look like I have any, yep.\n\n207\n00:11:29.660 --> 00:11:31.690\nAnd I am gonna change\nthat back to less than.\n\n208\n00:11:31.690 --> 00:11:33.297\nI like less than.\n\n209\n00:11:33.297 --> 00:11:34.930\nAll right, so that's where.\n\n210\n00:11:34.930 --> 00:11:37.561\nAnd to me,\nreadability is always key, right?\n\n211\n00:11:37.561 --> 00:11:40.971\nWe talk about that with scripts and\ntrying to make sure that other people that\n\n212\n00:11:40.971 --> 00:11:43.810\nare working with you can understand\nwhat you're trying to do.\n\n213\n00:11:43.810 --> 00:11:46.290\nYou can understand what\nyou did six months ago,\n\n214\n00:11:46.290 --> 00:11:49.090\nor a year from now when you have\nto troubleshoot this script.\n\n215\n00:11:49.090 --> 00:11:53.869\nAnd so\nGet-ChildItem -P $path where last write\n\n216\n00:11:53.869 --> 00:11:57.971\ntime less than November 10, 2017.\n\n217\n00:11:57.971 --> 00:12:00.981\nI mean, that's almost English, right?\n\n218\n00:12:00.981 --> 00:12:02.738\nVery, very cool.\n\n219\n00:12:02.738 --> 00:12:05.376\nIt's a lot easier to do\non where object open\n\n220\n00:12:05.376 --> 00:12:10.470\nbrace property equals this comma property\nequals that and things like that.\n\n221\n00:12:10.470 --> 00:12:12.150\nThis is really pretty slick.\n\n222\n00:12:12.150 --> 00:12:15.420\nI can even replace this with\na question mark, all right?\n\n223\n00:12:15.420 --> 00:12:19.740\nBecause the question mark is an alias for\nwhere object.\n\n224\n00:12:19.740 --> 00:12:22.250\nSo this will still function just fine.\n\n225\n00:12:23.500 --> 00:12:24.870\nShorter, yes.\n\n226\n00:12:24.870 --> 00:12:26.220\nMore readable?\n\n227\n00:12:26.220 --> 00:12:27.890\nWell, I've gotta know what this means.\n\n228\n00:12:27.890 --> 00:12:31.500\nIs that a where object or\nis that a, what is this?\n\n229\n00:12:31.500 --> 00:12:32.890\nI mean, I don't know that question mark.\n\n230\n00:12:32.890 --> 00:12:37.003\nSo do what you like,\nwhatever you think is best.\n\n231\n00:12:37.003 --> 00:12:39.700\nI like the where just because I think\nother people can read it a little\n\n232\n00:12:39.700 --> 00:12:40.230\nbit easier.\n\n233\n00:12:41.520 --> 00:12:44.200\nAll right, so now we're getting somewhere.\n\n234\n00:12:44.200 --> 00:12:46.285\nNow we can run our script.\n\n235\n00:12:46.285 --> 00:12:49.643\nAnd we know that it's gonna be\nlimited based on a particular date.\n\n236\n00:12:49.643 --> 00:12:52.377\nBecause if I'm trying\nto archive something,\n\n237\n00:12:52.377 --> 00:12:56.430\nI wanna see what the last right\ntime was prior to a certain date.\n\n238\n00:12:56.430 --> 00:12:59.800\nAnything before that I\nfeel safe archiving off.\n\n239\n00:12:59.800 --> 00:13:01.582\nNobody's making any changes to it.\n\n240\n00:13:01.582 --> 00:13:05.050\nNobody's updating it, so\nwe must not need these anymore.\n\n241\n00:13:05.050 --> 00:13:08.522\n&gt;&gt; So at this point we can\nsee what we need to archive.\n\n242\n00:13:08.522 --> 00:13:10.731\nBut then we need to archive it somewhere,\nright?\n\n243\n00:13:10.731 --> 00:13:12.141\nWe do.\nBut before we get there,\n\n244\n00:13:12.141 --> 00:13:13.980\nlet's tweak this up just a hair.\n\n245\n00:13:13.980 --> 00:13:16.160\nBecause this is hard-coded, right?\n\n246\n00:13:16.160 --> 00:13:20.602\nAnd while this works great now,\nlet's say my job is to\n\n247\n00:13:20.602 --> 00:13:25.220\narchive things that are older than-\n&gt;&gt; X amount of time.\n\n248\n00:13:25.220 --> 00:13:26.350\n&gt;&gt; Ten days, right?\n\n249\n00:13:26.350 --> 00:13:28.830\n&gt;&gt; Okay.\n&gt;&gt; So if I write this script now,\n\n250\n00:13:28.830 --> 00:13:31.610\nten days ago would have been the 4th.\n\n251\n00:13:31.610 --> 00:13:35.430\nSo I could put here the 4th, right?\n\n252\n00:13:35.430 --> 00:13:41.702\nBut then next week will be the 21st,\nten days ago would be the 11th.\n\n253\n00:13:41.702 --> 00:13:44.789\nBut I have to come in here and\nchange my code.\n\n254\n00:13:44.789 --> 00:13:47.086\nRight, so what I would rather\ndo is make this standard.\n\n255\n00:13:47.086 --> 00:13:50.725\nI wanna make a parameter for that date.\n\n256\n00:13:50.725 --> 00:13:51.525\n&gt;&gt; Smart thinking.\n\n257\n00:13:51.525 --> 00:13:52.294\n&gt;&gt; And that's what we're gonna do.\n\n258\n00:13:52.294 --> 00:13:52.838\nWhat's that?\n\n259\n00:13:52.838 --> 00:13:53.886\n&gt;&gt; Smart thinking.\n\n260\n00:13:53.886 --> 00:13:54.760\n&gt;&gt; Thank you.\n[LAUGH] So\n\n261\n00:13:54.760 --> 00:13:59.390\nwe're gonna come in here to our ISE, and\nI've got some white space out there.\n\n262\n00:13:59.390 --> 00:14:01.680\nI'm gonna put my comma, hit Enter.\n\n263\n00:14:01.680 --> 00:14:08.815\nAnd we're gonna do a date/time data type.\n\n264\n00:14:08.815 --> 00:14:12.405\nAnd let's call it\nsomething crazy like date.\n\n265\n00:14:12.405 --> 00:14:14.157\n&gt;&gt; Wait, may be a typo there.\n\n266\n00:14:14.157 --> 00:14:15.104\n&gt;&gt; Thank you.\n&gt;&gt; Okay.\n\n267\n00:14:15.104 --> 00:14:17.180\n&gt;&gt; That will make it\nwork a little bit better.\n\n268\n00:14:17.180 --> 00:14:20.680\nAll right, so now I've got a parameter\ncalled date that's gonna accept date/time.\n\n269\n00:14:20.680 --> 00:14:24.720\nAnd rather than hard code the date in\nhere, we're just gonna change that up and\n\n270\n00:14:24.720 --> 00:14:27.030\nput $date.\n\n271\n00:14:27.030 --> 00:14:28.980\nLet's see what happens now.\n\n272\n00:14:28.980 --> 00:14:30.807\nWe'll go run our script.\n\n273\n00:14:30.807 --> 00:14:35.390\nWe're gonna provide the path,\nand we're gonna provide the date.\n\n274\n00:14:35.390 --> 00:14:37.901\nWe'll use that same date,\nwhat did I use, the 10th?\n\n275\n00:14:37.901 --> 00:14:42.180\nAll right, 17, and we'll run our script.\n\n276\n00:14:42.180 --> 00:14:44.276\nAnd look at that.\nWe get the exact same results.\n\n277\n00:14:44.276 --> 00:14:47.316\nIt looks like well, whoop de doo,\nyou get the exact same results.\n\n278\n00:14:47.316 --> 00:14:51.825\nBut now if I want to look at\nanything older than the 12th,\n\n279\n00:14:51.825 --> 00:14:56.820\nI can simply follow my script\na little bit differently, right?\n\n280\n00:14:56.820 --> 00:15:00.050\nModify that parameter that is going in.\n\n281\n00:15:00.050 --> 00:15:04.171\nIs there anything older than the, oops,\ntried to change my history there.\n\n282\n00:15:04.171 --> 00:15:06.697\n[LAUGH] Not the current command.\n\n283\n00:15:06.697 --> 00:15:08.530\nLet's get back down here.\n\n284\n00:15:08.530 --> 00:15:10.924\nWhat about the 8th?\n\n285\n00:15:10.924 --> 00:15:14.784\nI think it's still on point where I've\nonly got one file older than that\n\n286\n00:15:14.784 --> 00:15:16.270\nparticular date.\n\n287\n00:15:16.270 --> 00:15:18.737\nSo cool, now we're getting somewhere.\n\n288\n00:15:18.737 --> 00:15:21.298\nWe've got a script that's reusable.\n\n289\n00:15:21.298 --> 00:15:24.220\nBecause I can change\nthe directory I'm looking in, and\n\n290\n00:15:24.220 --> 00:15:27.490\nI can change the date\nthat I'm looking for.\n\n291\n00:15:27.490 --> 00:15:29.401\nSo re-usability in my code.\n\n292\n00:15:29.401 --> 00:15:31.058\nThat's why we write scripts, or\n\n293\n00:15:31.058 --> 00:15:35.090\nan important thing to think about\nwhen you're writing the scripts.\n\n294\n00:15:35.090 --> 00:15:39.997\nBut as Cherokee was saying there, and\nI'm a big believer in this as well,\n\n295\n00:15:39.997 --> 00:15:42.544\nthe date option is tricky sometimes.\n\n296\n00:15:42.544 --> 00:15:45.693\nBecause let's say I've got users\nthat are gonna maybe use this, or\n\n297\n00:15:45.693 --> 00:15:47.810\nother admins that are gonna use this.\n\n298\n00:15:47.810 --> 00:15:51.673\nI know it's my script, I'm going to\nput in the date like that, right?\n\n299\n00:15:51.673 --> 00:15:55.700\nWhat if they just put the 15th,\nall right, or something like that,\n\n300\n00:15:55.700 --> 00:15:57.010\nand they try to run it.\n\n301\n00:15:58.630 --> 00:15:59.830\nYeah, that's not gonna work.\n\n302\n00:15:59.830 --> 00:16:01.379\nThat's not a date/time format.\n\n303\n00:16:01.379 --> 00:16:02.978\nIt's really not gonna like that.\n\n304\n00:16:02.978 --> 00:16:04.538\nOr if they leave off the T-H and\n\n305\n00:16:04.538 --> 00:16:07.912\nthey just say the 15th of this month,\nmaybe they're thinking.\n\n306\n00:16:07.912 --> 00:16:10.464\nOkay.\nWell, it sort of doesn't error out,\n\n307\n00:16:10.464 --> 00:16:12.590\nbut it doesn't give me any results.\n\n308\n00:16:12.590 --> 00:16:18.462\nWho knows what 15 converted to when\nit converted it to a date/time.\n\n309\n00:16:18.462 --> 00:16:21.626\nIt's definitely not something\nthat we're going to see.\n\n310\n00:16:21.626 --> 00:16:23.620\n&gt;&gt; On the 15th day, the world was created.\n\n311\n00:16:23.620 --> 00:16:27.210\n&gt;&gt; Well, I was trying to think\nwhat does it go back to January 1,\n\n312\n00:16:27.210 --> 00:16:28.550\n1970 or something like that?\n\n313\n00:16:28.550 --> 00:16:29.300\n&gt;&gt; I don't know.\n\n314\n00:16:29.300 --> 00:16:31.050\n&gt;&gt; And\nthen maybe that would be 15 seconds in.\n\n315\n00:16:31.050 --> 00:16:31.785\nI don't know.\n\n316\n00:16:31.785 --> 00:16:32.460\n&gt;&gt; [LAUGH]\n&gt;&gt; Who knows?\n\n317\n00:16:32.460 --> 00:16:33.530\nThe point is.\n\n318\n00:16:33.530 --> 00:16:34.860\n&gt;&gt; We don't know.\n\n319\n00:16:34.860 --> 00:16:36.550\n&gt;&gt; Yes, and without teaching,\n\n320\n00:16:36.550 --> 00:16:40.239\nif I use this in other regions\nwhere my company is maybe overseas.\n\n321\n00:16:41.320 --> 00:16:44.204\nOther countries might put the date in.\n\n322\n00:16:44.204 --> 00:16:49.826\nIf I want the tenth of November,\nit might be 10/11/17, right?\n\n323\n00:16:49.826 --> 00:16:54.456\nBut that's not going to give me the same\nresults because, in my system, it's,\n\n324\n00:16:54.456 --> 00:16:59.017\nI guess it would depend on how you've got\nyour system set up for date, time but,\n\n325\n00:16:59.017 --> 00:17:02.000\nthe problem is, I've got unknowns, right?\n\n326\n00:17:02.000 --> 00:17:08.890\nAnd I can either deal with that through\ncode, I can try to accept the input and\n\n327\n00:17:08.890 --> 00:17:15.690\nthen massage it until it's in a date time\nformat or here's what I was thinking,\n\n328\n00:17:15.690 --> 00:17:18.829\nreally what we're trying to do,\nif I was thinking about archiving files.\n\n329\n00:17:20.480 --> 00:17:22.910\nOkay, how do I normally think about that?\n\n330\n00:17:22.910 --> 00:17:24.370\nDo I, go ahead.\n\n331\n00:17:24.370 --> 00:17:25.688\n&gt;&gt; Okay.\n&gt;&gt; Yeah, [CROSSTALK]\n\n332\n00:17:25.688 --> 00:17:26.795\n&gt;&gt; I'm thinking,\n\n333\n00:17:26.795 --> 00:17:31.623\nwell, if you're looking at that\nwindow for, what did you say, a week?\n\n334\n00:17:31.623 --> 00:17:33.490\n&gt;&gt; Mm-hm, a particular day, yeah.\n\n335\n00:17:33.490 --> 00:17:34.880\nWe could say days in our case.\n\n336\n00:17:34.880 --> 00:17:36.530\nBut just in general, what would you think?\n\n337\n00:17:36.530 --> 00:17:40.180\n&gt;&gt; Okay, so\nthen maybe I would get the sum of hours or\n\n338\n00:17:40.180 --> 00:17:41.940\nsome kind of unit of measurement of time.\n\n339\n00:17:41.940 --> 00:17:46.370\nAnd then,\nsay anything within this unit of time.\n\n340\n00:17:46.370 --> 00:17:49.720\n&gt;&gt; Yeah, and\nthat's exactly what I was thinking right?\n\n341\n00:17:49.720 --> 00:17:52.770\nCuz normally if I'm thinking I need\nto archive anything that's over,\n\n342\n00:17:52.770 --> 00:17:55.370\nI don't save anything that's\nolder than November 8th.\n\n343\n00:17:55.370 --> 00:17:57.820\nBecause that's a fixed point in time, and\n\n344\n00:17:57.820 --> 00:18:02.090\nI need a sliding window that determines\nwhat files are being archived.\n\n345\n00:18:02.090 --> 00:18:06.560\nSo I might say something more like\nanything that's over 30 days old, right?\n\n346\n00:18:06.560 --> 00:18:08.050\nOr anything that's over six months old.\n\n347\n00:18:08.050 --> 00:18:13.410\nLike you were saying, a period of time\nis really a better way of thinking about\n\n348\n00:18:13.410 --> 00:18:17.420\nlooking at files to be archived\nrather than a specific date.\n\n349\n00:18:17.420 --> 00:18:21.714\nAnd that's gonna be a lot easier to do\nbecause I can ask the user in my script,\n\n350\n00:18:21.714 --> 00:18:24.281\nhey, just enter in a number of days,\nright?\n\n351\n00:18:24.281 --> 00:18:25.648\nSo I can say, hey,\nanything over 15 days old?\n\n352\n00:18:25.648 --> 00:18:28.530\nIs there anything over 30 days old?\n\n353\n00:18:28.530 --> 00:18:32.160\nIt's really hard to misinterpret that,\nand hard to input the wrong data.\n\n354\n00:18:32.160 --> 00:18:35.150\nThey're not going to put Bob when\nI ask them for how many days.\n\n355\n00:18:35.150 --> 00:18:37.340\nHopefully, most of my users don't do that.\n\n356\n00:18:37.340 --> 00:18:37.880\nRight?\n\n357\n00:18:37.880 --> 00:18:41.460\nSo I think switching to days\nrather than working with a date\n\n358\n00:18:41.460 --> 00:18:45.000\nis going to be a better solution for\nour situation here.\n\n359\n00:18:45.000 --> 00:18:45.900\nSo let's do that.\n\n360\n00:18:45.900 --> 00:18:51.060\nLet's change this up just a little bit and\nchange of the days.\n\n361\n00:18:51.060 --> 00:18:53.100\nI'm gonna come up here to my parameters,\nand\n\n362\n00:18:53.100 --> 00:18:56.150\nI don't need the date parameter anymore,\nwe're not gonna use that.\n\n363\n00:18:56.150 --> 00:19:01.180\nWe're gonna use an integer that\nrepresents the number of days the user,\n\n364\n00:19:01.180 --> 00:19:04.960\nwhoever's calling the script\nhas intended or entered.\n\n365\n00:19:05.970 --> 00:19:10.490\nSo then, we're gonna come down here but\nwhen I'm comparing dates like this,\n\n366\n00:19:10.490 --> 00:19:14.160\nI really need to know the date, right?\n\n367\n00:19:14.160 --> 00:19:16.020\nNot the number of days.\n\n368\n00:19:16.020 --> 00:19:20.640\nSo we're going to use the get\ndate formula, or function.\n\n369\n00:19:20.640 --> 00:19:22.180\nCommand what I should say.\n\n370\n00:19:22.180 --> 00:19:24.870\nAnd we're going to,\nI'll show you this little trick.\n\n371\n00:19:24.870 --> 00:19:27.260\nSo, get dash date,\nlet's go down here and play for\n\n372\n00:19:27.260 --> 00:19:32.770\na second, get dash date, gives me\nthe current date and time, beautiful.\n\n373\n00:19:32.770 --> 00:19:36.730\nBut I need, the user is going to tell me,\nor what I tell the script,\n\n374\n00:19:36.730 --> 00:19:40.230\nI'm gonna tell it I want\nsomething older than 30 days.\n\n375\n00:19:40.230 --> 00:19:45.550\nI really need to know what the date\nwas 30 days ago or 15 days ago.\n\n376\n00:19:45.550 --> 00:19:50.110\nSo we can do that with the add dash day or\nadd days property or\n\n377\n00:19:50.110 --> 00:19:55.480\nI should say,\nit's a method of the get date grammar.\n\n378\n00:19:55.480 --> 00:20:01.380\nIf we do get dash date, and\nwe pipe that into a get dash number,\n\n379\n00:20:01.380 --> 00:20:06.040\nI will see that in here, and again,\n\n380\n00:20:06.040 --> 00:20:11.850\nI always do this when I'm experimenting,\nlearning about a new cmdlet.\n\n381\n00:20:11.850 --> 00:20:14.243\nGo take a look at the properties\nthat are available and\n\n382\n00:20:14.243 --> 00:20:17.982\nthe methods that are available and you'll\nbe like I didn't know I could do that.\n\n383\n00:20:17.982 --> 00:20:18.776\nWell, that could come in handy.\n\n384\n00:20:18.776 --> 00:20:22.930\nAnd right here is one\nthat strikes my fancy.\n\n385\n00:20:22.930 --> 00:20:23.730\nAdd days.\n\n386\n00:20:24.760 --> 00:20:25.940\nThat's what I need to do.\n\n387\n00:20:25.940 --> 00:20:27.530\n&gt;&gt; And what did you just type in?\n\n388\n00:20:27.530 --> 00:20:32.130\n&gt;&gt; I did get dash date type\nthat into a get dash member.\n\n389\n00:20:32.130 --> 00:20:33.740\n&gt;&gt; Okay.\n&gt;&gt; So list all the members of a get\n\n390\n00:20:33.740 --> 00:20:35.190\ndate commandlet.\n\n391\n00:20:35.190 --> 00:20:37.450\nYou might think, Mike wait.\n\n392\n00:20:37.450 --> 00:20:41.462\nYou're not going to be adding you're\ngoing to be subtracting days.\n\n393\n00:20:41.462 --> 00:20:44.260\nAll right, you're going to be taken to the\ndate and you're trying to figure out what\n\n394\n00:20:44.260 --> 00:20:49.280\nthe date was 30 days ago, not 30 days\nfrom now, so you really need to subtract.\n\n395\n00:20:49.280 --> 00:20:51.240\nDo I have a subtract?\n\n396\n00:20:51.240 --> 00:20:56.190\nThere is a subtract but this is using\nsomething known as a time span.\n\n397\n00:20:56.190 --> 00:21:00.560\nAnd a time span is a relatively new item\nin PowerShell, you can do a new-timespan.\n\n398\n00:21:00.560 --> 00:21:03.720\nAnd a time span might be like an hour and\na half.\n\n399\n00:21:03.720 --> 00:21:06.230\nSo if you want to take the current\ndate and time and subtract an hour and\n\n400\n00:21:06.230 --> 00:21:09.410\na half from it, you can get that time,\nthat hour and a half ago.\n\n401\n00:21:09.410 --> 00:21:10.670\nThat's what time span is for.\n\n402\n00:21:10.670 --> 00:21:15.320\nSo it's not gonna work for what we want,\nbut the add will work just fine.\n\n403\n00:21:15.320 --> 00:21:19.840\nBecause I can add negative numbers right,\nif I add four,\n\n404\n00:21:19.840 --> 00:21:21.610\nthat's gonna get four days from now.\n\n405\n00:21:21.610 --> 00:21:24.790\nBut if I add days negative four\nthat would be four days ago,\n\n406\n00:21:24.790 --> 00:21:28.100\nwe'll just subtract four\ndays using the add method.\n\n407\n00:21:28.100 --> 00:21:32.170\nI know that's kinda counterintuitive but\nthat's what we're going to do all right?\n\n408\n00:21:32.170 --> 00:21:33.330\nNow, let's test it out and\n\n409\n00:21:33.330 --> 00:21:37.170\nmake sure Mike isn't pulling your leg,\nif we do a get date.\n\n410\n00:21:38.440 --> 00:21:43.330\nAnd what I need to do is wrap\nthis up in some parentheses so\n\n411\n00:21:43.330 --> 00:21:45.820\nthat I can access some of its methods.\n\n412\n00:21:45.820 --> 00:21:50.080\nAnd that is going to be AddDates, or\nAddDays, sorry, and we're gonna do,\n\n413\n00:21:50.080 --> 00:21:52.990\nlet's say today,\nas we record this, it is the 14th.\n\n414\n00:21:52.990 --> 00:21:56.580\nI'm gonna subtract four from that.\n\n415\n00:21:56.580 --> 00:22:01.183\nAnd who's gonna get Friday November 10th,\nthe date doesn't change,\n\n416\n00:22:01.183 --> 00:22:06.008\nI'm sorry, time doesn't change cuz I'm\nsaying four days ago November 10th.\n\n417\n00:22:06.008 --> 00:22:10.370\nAll right, so now, we know what\nit is we can use in our script.\n\n418\n00:22:12.264 --> 00:22:16.200\nAgain, this is the process at least\nthat I use as I'm writing scripts.\n\n419\n00:22:16.200 --> 00:22:20.830\nTest things out down here, make sure it's\ngiving you the results that I anticipate,\n\n420\n00:22:20.830 --> 00:22:22.960\ngo back and put it in my script.\n\n421\n00:22:22.960 --> 00:22:23.520\nSo let's do that.\n\n422\n00:22:23.520 --> 00:22:27.560\nWe're gonna say open parentheses and\nGet-date.\n\n423\n00:22:27.560 --> 00:22:32.170\nOops, not that one, and we want to-\n&gt;&gt; I think you can also\n\n424\n00:22:32.170 --> 00:22:35.750\nsee how a lot of development\nteams work in pairs.\n\n425\n00:22:35.750 --> 00:22:39.310\nBecause yeah,\nI could say to you hey, Mike.\n\n426\n00:22:39.310 --> 00:22:40.740\nWhy do we do it this way?\n\n427\n00:22:40.740 --> 00:22:41.530\nAnd you're like yeah.\n\n428\n00:22:41.530 --> 00:22:43.400\nThat's a great idea or no, Cherokee.\n\n429\n00:22:43.400 --> 00:22:44.842\nThat's crazy.\n\n430\n00:22:44.842 --> 00:22:49.540\n&gt;&gt; Exactly, it's great to have more\nthan one set of eyes on a script.\n\n431\n00:22:49.540 --> 00:22:53.852\nI can't tell you how many times I've made\ntypos in scripts and stood there and\n\n432\n00:22:53.852 --> 00:22:57.829\nstared at it for hours it seems like\ntrying to figure out what was wrong,\n\n433\n00:22:57.829 --> 00:22:59.221\nsomebody will walk by and\n\n434\n00:22:59.221 --> 00:23:03.123\ngo, hey you're missing a semicolon\nat the end of that third line.\n\n435\n00:23:03.123 --> 00:23:04.626\nGosh.\n&gt;&gt; [LAUGH]\n\n436\n00:23:04.626 --> 00:23:05.597\n&gt;&gt; Cuz your brain is so\n\n437\n00:23:05.597 --> 00:23:09.000\ngood at fixing things for you so\nthat you can interpret it.\n\n438\n00:23:09.000 --> 00:23:14.560\nYou've seen the whole what is\nwrong with this paragraph,\n\n439\n00:23:14.560 --> 00:23:16.390\nand they repeat a word\non two different lines.\n\n440\n00:23:16.390 --> 00:23:19.140\nAnd most people don't even see it\ncuz their brain just eliminates\n\n441\n00:23:19.140 --> 00:23:20.030\none copy of the word.\n\n442\n00:23:20.030 --> 00:23:20.975\nIt's pretty interesting.\n\n443\n00:23:20.975 --> 00:23:23.525\n&gt;&gt; See, too smart for your own good, Mike.\n\n444\n00:23:23.525 --> 00:23:24.920\n&gt;&gt; I know right?\n&gt;&gt; [LAUGH]\n\n445\n00:23:24.920 --> 00:23:26.516\n&gt;&gt; So we're gonna do this,\n\n446\n00:23:26.516 --> 00:23:29.108\n(Get-date).AddDays($days).\n\n447\n00:23:29.108 --> 00:23:29.882\nThat's what they're inputting.\n\n448\n00:23:29.882 --> 00:23:35.130\nAnd I want to surround this whole thing in\nparentheses so it's treated like a unit.\n\n449\n00:23:35.130 --> 00:23:38.020\nI can probably get away without\ndoing that in this case.\n\n450\n00:23:38.020 --> 00:23:41.170\nBut if I go to add\nthings to this later on,\n\n451\n00:23:41.170 --> 00:23:44.130\nit'll be nice that this\nis all encapsulated.\n\n452\n00:23:44.130 --> 00:23:46.860\nRemember, parenthesis work outside\nof mathematical functions.\n\n453\n00:23:46.860 --> 00:23:50.130\nParenthesis allow me to control\nthe order of operations and\n\n454\n00:23:50.130 --> 00:23:53.980\ngroup operations together,\nwhich is what I'm doing here.\n\n455\n00:23:53.980 --> 00:23:57.080\nNow, they're gonna input days,\nand I'm gonna ask them or\n\n456\n00:23:57.080 --> 00:23:58.220\nwe're gonna call the script.\n\n457\n00:23:58.220 --> 00:24:02.250\nAnd we're going to say,\nolder than four days, older than 10 days.\n\n458\n00:24:02.250 --> 00:24:04.250\nI'm not putting in a negative number.\n\n459\n00:24:04.250 --> 00:24:07.030\nWe've got to account for\nthat in our script, right?\n\n460\n00:24:07.030 --> 00:24:10.540\nWe could tell them,\nenter a negative number but, why?\n\n461\n00:24:10.540 --> 00:24:13.930\nIf you think about it, the human nature is\n\n462\n00:24:13.930 --> 00:24:18.200\nI need something to find out if\nany files are older than 15 days.\n\n463\n00:24:18.200 --> 00:24:19.480\nSo, I'm going to put 15.\n\n464\n00:24:19.480 --> 00:24:22.900\nIn my code, I can negate that, right?\n\n465\n00:24:22.900 --> 00:24:27.370\nI'm going to take whatever they type,\ndays, and just negate it here.\n\n466\n00:24:27.370 --> 00:24:29.026\nThat way I don't have to say,\n\n467\n00:24:29.026 --> 00:24:31.669\nyou're supposed to put in\na negative number, right?\n\n468\n00:24:31.669 --> 00:24:32.169\n&gt;&gt; Right.\n\n469\n00:24:32.169 --> 00:24:33.106\n&gt;&gt; It never returns files.\n\n470\n00:24:33.106 --> 00:24:36.840\nI go ahead and put it in there.\n\n471\n00:24:36.840 --> 00:24:41.360\nLet's go ahead and see what we've got so\nfar, now we should be able to call this\n\n472\n00:24:41.360 --> 00:24:45.850\nscript, and it's going to be easier\nto just type that over again.\n\n473\n00:24:45.850 --> 00:24:47.030\nLet's do test ps1.\n\n474\n00:24:47.030 --> 00:24:54.940\nI need my path, is C:/scripts, and\nlet's so older than four days.\n\n475\n00:24:56.140 --> 00:25:01.870\nAnd we'll make this, actually we'll\njust switch around for a minute, and\n\n476\n00:25:01.870 --> 00:25:05.540\nsure enough all of those dates\nare older than four days.\n\n477\n00:25:05.540 --> 00:25:07.770\nLet's try doing that for five days.\n\n478\n00:25:09.140 --> 00:25:10.780\nNotice the list is getting shorter.\n\n479\n00:25:10.780 --> 00:25:12.757\nNow, just the 8th, 9th,\nand the 7th show up.\n\n480\n00:25:12.757 --> 00:25:16.500\nIf I do six days,\njust the 8th and the 7th.\n\n481\n00:25:16.500 --> 00:25:17.750\nSo it is definitely working.\n\n482\n00:25:17.750 --> 00:25:19.920\nIt is going to that directory.\n\n483\n00:25:19.920 --> 00:25:21.137\nIt is retrieving a list of files.\n\n484\n00:25:21.137 --> 00:25:26.190\nIt is filtering it down based on\nthe last write time property of\n\n485\n00:25:26.190 --> 00:25:32.760\nthat file object using our subtraction\nof the days from the current date.\n\n486\n00:25:32.760 --> 00:25:35.750\nSo right now,\nwe have a pretty decent script.\n\n487\n00:25:35.750 --> 00:25:38.200\nThis will go in any directory and look and\n\n488\n00:25:38.200 --> 00:25:43.150\nshow me any objects that are older\nthan a particular number of days.\n\n489\n00:25:43.150 --> 00:25:44.590\nPretty cool.\nAnd we got more to add.\n\n490\n00:25:44.590 --> 00:25:47.380\n&gt;&gt; Yeah, I was gonna say I think\nyou're not quite finished here.\n\n491\n00:25:47.380 --> 00:25:50.705\nThere's more you wanna show us, which is\namazing, so thank you for that, Mike.\n\n492\n00:25:50.705 --> 00:25:51.700\n&gt;&gt; Mm-hm.\n&gt;&gt; And thank you for\n\n493\n00:25:51.700 --> 00:25:54.850\njoining us as well but you don't wanna\nmiss what we have headed your way.\n\n494\n00:25:54.850 --> 00:25:56.450\nFor this show, we'll sign out.\n\n495\n00:25:56.450 --> 00:25:57.670\nI've been your host, Cherokee Boose.\n\n496\n00:25:57.670 --> 00:25:58.556\n&gt;&gt; And I'm Mike Rodrick.\n\n497\n00:25:58.556 --> 00:26:00.620\n&gt;&gt; See you next time here at ITProTV.\n\n498\n00:26:00.620 --> 00:26:07.530\n[MUSIC]\n\n499\n00:26:07.530 --> 00:26:10.380\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "242969822"
        },
        {
          "description": "In this episode, we will continue to look at writing PowerShell scripts. We will again use the process of taking an everyday task, and writing a script that will help automate the task.",
          "length": "1951",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-2-writing_another_script_pt_2-111417-PGM.00_32_17_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-2-writing_another_script_pt_2-111417-PGM.00_32_17_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-2-writing_another_script_pt_2-111417-PGM.00_32_17_13.Still001-sm.jpg",
          "title": "Writing Another Script Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.092 --> 00:00:01.225\nWelcome to ITPRO.TV.\n\n2\n00:00:01.225 --> 00:00:06.312\nI'm your host Don Pezet [CROSSTALK]\n\n3\n00:00:06.312 --> 00:00:07.989\n[MUSIC]\n\n4\n00:00:07.989 --> 00:00:11.896\n&gt;&gt; You're watching ITPRO.TV.\n\n5\n00:00:11.896 --> 00:00:13.600\n&gt;&gt; Welcome to your\nPowerShell Scripting series.\n\n6\n00:00:13.600 --> 00:00:15.859\nI'm your show host Cherokee Boose.\n\n7\n00:00:17.050 --> 00:00:20.890\nAnd in this show we'll be,\nwell continuing to write another script.\n\n8\n00:00:20.890 --> 00:00:24.650\nOf course we have Mr. Mike Rodrick to\nguide us to this process, so thank you so\n\n9\n00:00:24.650 --> 00:00:26.020\nmuch for joining us today Mike.\n\n10\n00:00:26.020 --> 00:00:28.020\n&gt;&gt; Absolutely Cherokee,\nthanks for having me back and\n\n11\n00:00:28.020 --> 00:00:30.740\nI'm glad because we didn't get to\nfinish our script in the other show.\n\n12\n00:00:30.740 --> 00:00:32.640\n&gt;&gt; I know,\nthat was has been such a bummer,\n\n13\n00:00:32.640 --> 00:00:34.990\nif like you didn't show up, then what?\n\n14\n00:00:34.990 --> 00:00:37.510\n&gt;&gt; Just left hanging in you know,\nokay, we got this script and\n\n15\n00:00:37.510 --> 00:00:39.120\nthen we wanted do more.\n\n16\n00:00:39.120 --> 00:00:41.680\nAnd that's exactly what we're gonna do,\nwe're gonna continue to add.\n\n17\n00:00:41.680 --> 00:00:45.110\nAs I said, scripts are never really done,\nyou can always think of something else.\n\n18\n00:00:45.110 --> 00:00:48.490\nYou can add to it a functionally, we can\nadd to it, tweak it up a little bit and\n\n19\n00:00:48.490 --> 00:00:50.370\nmake it better and better.\n\n20\n00:00:50.370 --> 00:00:54.742\nSo right now if you've watched\nthe previous part to this episode,\n\n21\n00:00:54.742 --> 00:00:59.738\nwe've got a script that is going to return\nchild items from a directory that I\n\n22\n00:00:59.738 --> 00:01:01.864\nspecify when I call the script.\n\n23\n00:01:01.864 --> 00:01:05.795\nAs well as filter the results\nbased on the last write time, or\n\n24\n00:01:05.795 --> 00:01:10.651\nbasically the last modify date or\nthe last write time property of the file,\n\n25\n00:01:10.651 --> 00:01:12.830\nand it's gonna be based on days.\n\n26\n00:01:12.830 --> 00:01:16.220\nSo when I call the script I can\nsay look in this directory and\n\n27\n00:01:16.220 --> 00:01:21.192\nshow me all of the files that have not\nbeen modified in the last 15 days, right?\n\n28\n00:01:21.192 --> 00:01:25.650\nAnd it'll return the list and if we look\nat my screen here, here's my script,\n\n29\n00:01:25.650 --> 00:01:29.090\nto refresh this we got two parameters\nthe path you wanna look at,\n\n30\n00:01:29.090 --> 00:01:31.860\nthe number of days old\nyou are looking for.\n\n31\n00:01:31.860 --> 00:01:35.000\nAnd then we're gonna Get-ChildItem\nbased on that path parameter,\n\n32\n00:01:35.000 --> 00:01:38.090\nwe passed in where\nLastWriteTime is less than.\n\n33\n00:01:38.090 --> 00:01:41.630\nAnd then we get the current date, whatever\ndate and time you're actually running\n\n34\n00:01:41.630 --> 00:01:46.590\nthe script and we subtract the number\nof days by using AddDays and\n\n35\n00:01:46.590 --> 00:01:51.160\nthen negating the variable that we\naccepted when we ran the script.\n\n36\n00:01:51.160 --> 00:01:56.120\nSo if I put in 15 This formula\nwould read AddDays, negative 15,\n\n37\n00:01:56.120 --> 00:02:00.820\nwhich would subtract 15 days from\nthe date and we get our results we want.\n\n38\n00:02:00.820 --> 00:02:06.110\nDown here I'm showing the results of\nthe command that we ran for six days old.\n\n39\n00:02:06.110 --> 00:02:09.670\nSo anything older than six days,\nsorry it's jumping around on me.\n\n40\n00:02:09.670 --> 00:02:12.580\nLet me just flip this around again.\n\n41\n00:02:12.580 --> 00:02:14.160\nAnd I'm gonna make that\na little bit wider.\n\n42\n00:02:14.160 --> 00:02:16.000\nSo there we got the last 6, or\n\n43\n00:02:16.000 --> 00:02:20.330\nanything older than 6 days from the\nscripts folder, and there are my results.\n\n44\n00:02:20.330 --> 00:02:23.420\nSo, all is good so far, right?\n\n45\n00:02:23.420 --> 00:02:26.130\nWe'll flip this back around,\nmake it a little bit easier to read.\n\n46\n00:02:26.130 --> 00:02:27.480\nActually, you know what I'm gonna do?\n\n47\n00:02:27.480 --> 00:02:30.080\nI'm gonna flip that back around,\nand go ahead and break this.\n\n48\n00:02:30.080 --> 00:02:33.354\nRemember, we can break that on our Pipes.\n\n49\n00:02:33.354 --> 00:02:38.066\nThat might help a little bit, squeezing\nall of it into the screen, all right.\n\n50\n00:02:38.066 --> 00:02:44.035\nAll right, so next what I would like\nto do is add a little message to this.\n\n51\n00:02:44.035 --> 00:02:46.217\nActually you know what now that\nI look at it I don't like that.\n\n52\n00:02:46.217 --> 00:02:47.597\nI'm gonna switch back the other way.\n\n53\n00:02:47.597 --> 00:02:48.818\n&gt;&gt; [LAUGH] Okay.\n\n54\n00:02:48.818 --> 00:02:49.620\n&gt;&gt; Just because.\n\n55\n00:02:49.620 --> 00:02:50.250\nYeah, I know.\n\n56\n00:02:50.250 --> 00:02:51.420\nIt's like stop.\n\n57\n00:02:51.420 --> 00:02:53.318\nJust pick one and stick with it.\n\n58\n00:02:53.318 --> 00:02:57.130\nI don't know, for some reason I like\nreading it a little bit better like this.\n\n59\n00:02:57.130 --> 00:02:59.280\nThat's just my personal thing.\n\n60\n00:02:59.280 --> 00:03:03.490\nSo anyway, what I would like to add next\nis something a little more informative\n\n61\n00:03:03.490 --> 00:03:07.820\nbecause if somebody runs this script,\nI know exactly what It's going to do.\n\n62\n00:03:07.820 --> 00:03:15.406\nBut if somebody else runs it, the output\nitself is, What's a good way to say it?\n\n63\n00:03:15.406 --> 00:03:17.180\nI mean it's showing you-\n&gt;&gt; Nondescript?\n\n64\n00:03:17.180 --> 00:03:19.340\n&gt;&gt; It's nondescript, there you go,\ngood word, like that.\n\n65\n00:03:19.340 --> 00:03:21.680\nAnd we'll use that, it is nondescript.\n\n66\n00:03:21.680 --> 00:03:23.610\nSo we're gonna add a little script so\n\n67\n00:03:23.610 --> 00:03:26.750\nit's no longer nondescript\nit's gonna be descript.\n\n68\n00:03:26.750 --> 00:03:30.635\nAnd we're gonna add some description\ninformation to this guy.\n\n69\n00:03:30.635 --> 00:03:32.250\n&gt;&gt; All right, so what kind of\nmessage are you gonna give us?\n\n70\n00:03:32.250 --> 00:03:34.390\n&gt;&gt; Well, I'm thinking I would like,\n\n71\n00:03:34.390 --> 00:03:37.950\nif this was me, what I would like\nto see in my results is, hey.\n\n72\n00:03:37.950 --> 00:03:42.761\nThere were maybe seven files\nthat haven't been modified since\n\n73\n00:03:42.761 --> 00:03:46.851\nNovember 10th, or\nwhatever day I picked, right?\n\n74\n00:03:46.851 --> 00:03:47.406\n&gt;&gt; Okay.\n\n75\n00:03:47.406 --> 00:03:50.158\n&gt;&gt; So now I'd like it to not\nonly return the files, but\n\n76\n00:03:50.158 --> 00:03:52.240\ntell me what it's returning.\n\n77\n00:03:52.240 --> 00:03:57.450\nSay we found 14 files that haven't\nbeen modified since November 8th,\n\n78\n00:03:57.450 --> 00:03:59.840\nor whatever the case may be.\n\n79\n00:03:59.840 --> 00:04:01.210\nSo that's our goal here.\n\n80\n00:04:01.210 --> 00:04:04.620\nNow to accomplish it you might think\nthat you could just kinda go and\n\n81\n00:04:04.620 --> 00:04:10.090\nadd maybe a message out here, like we\nmight do something like just a quote for\n\n82\n00:04:10.090 --> 00:04:14.165\na string, the following.\n\n83\n00:04:14.165 --> 00:04:14.765\nLet's do this.\n\n84\n00:04:14.765 --> 00:04:18.217\nThe follow, good golly Michael.\n\n85\n00:04:18.217 --> 00:04:22.617\nThe following, Files.\n\n86\n00:04:22.617 --> 00:04:26.171\nAnd let's put that in\nparenthesis cause we might have-\n\n87\n00:04:26.171 --> 00:04:27.326\n&gt;&gt; And I'm reading this in my,\n\n88\n00:04:27.326 --> 00:04:28.439\nyou've got mail, voice.\n\n89\n00:04:28.439 --> 00:04:29.751\n&gt;&gt; Right, okay, good good.\n\n90\n00:04:29.751 --> 00:04:32.175\n[LAUGH]\n&gt;&gt; Just in case you wanted to know.\n\n91\n00:04:32.175 --> 00:04:34.728\n&gt;&gt; Has not been modified.\n\n92\n00:04:37.040 --> 00:04:41.000\nSince and\nthen we'll put the date in there.\n\n93\n00:04:41.000 --> 00:04:42.241\nSo I'm just gonna stop here for\n\n94\n00:04:42.241 --> 00:04:44.783\na second because there's a couple\nof things that are missing.\n\n95\n00:04:44.783 --> 00:04:51.764\nRight here, I'm gonna wanna put a number\nall right, of how many files I returned,\n\n96\n00:04:51.764 --> 00:04:57.893\nso all ready I'm thinking in my mind,\nI need some kind of count for that.\n\n97\n00:04:57.893 --> 00:05:03.077\nAnd then I could use days, but\nI'd have to change my message up.\n\n98\n00:05:03.077 --> 00:05:05.525\nI'd have to say, have not been modified-\n&gt;&gt; In the last?\n\n99\n00:05:05.525 --> 00:05:09.030\n&gt;&gt; In 15 days or something like that.\n\n100\n00:05:09.030 --> 00:05:12.930\nAnd then just to show you, I kinda want\nto goof around with some of the options.\n\n101\n00:05:12.930 --> 00:05:15.248\nSo I'm gonna say let's convert that back.\n\n102\n00:05:15.248 --> 00:05:19.500\nI wanted to say have not been\nmodified since and a particular date.\n\n103\n00:05:19.500 --> 00:05:20.510\nBecause we can get it, right?\n\n104\n00:05:20.510 --> 00:05:25.950\nThis thing right here actually\nreturns the date that was 15 days ago,\n\n105\n00:05:25.950 --> 00:05:27.922\nso I would put it in our formula here.\n\n106\n00:05:27.922 --> 00:05:32.225\nSo weo already know how to get it,\nwe just have to do it again down here or\n\n107\n00:05:32.225 --> 00:05:36.670\nnow all of a sudden I'm thinking wait,\nI've got to do this more than once?\n\n108\n00:05:37.900 --> 00:05:39.110\nDing, ding, ding.\n\n109\n00:05:39.110 --> 00:05:41.150\nVariable comes into mind, right?\n\n110\n00:05:41.150 --> 00:05:46.480\nAny time I have to start writing the same\ncode more than once in my script,\n\n111\n00:05:46.480 --> 00:05:50.860\nthere's a really compelling\nreason to put it into a variable.\n\n112\n00:05:50.860 --> 00:05:53.780\nAnd say, hey, I don't wanna\nhave to write this every time,\n\n113\n00:05:53.780 --> 00:05:56.340\nif it's something I'm gonna\nhave to use more than once.\n\n114\n00:05:56.340 --> 00:05:59.200\nSo let's see how we can kind\nof get all of this done.\n\n115\n00:05:59.200 --> 00:06:03.320\nI'm gonna add some space up here,\njust for readability.\n\n116\n00:06:03.320 --> 00:06:08.580\nAnd I'm gonna make a new variable called\ndate, and I'm gonna set that equal to,\n\n117\n00:06:08.580 --> 00:06:11.260\nand then I'm gonna take my\nmessage from over here, right?\n\n118\n00:06:11.260 --> 00:06:19.430\nWe're gonna say, get date at days, copy,\nand we'll paste that right up there.\n\n119\n00:06:19.430 --> 00:06:22.230\nAll right, so we'll do that.\n\n120\n00:06:22.230 --> 00:06:27.750\nBut this is gonna return,\nif you remember the get\n\n121\n00:06:27.750 --> 00:06:33.470\ndate returns like November 3,\n2017 at 3:42:37, hours, minutes, seconds.\n\n122\n00:06:33.470 --> 00:06:36.648\nA little too much for\nwhat I'm trying to put in my message.\n\n123\n00:06:36.648 --> 00:06:40.761\nSo, this has a method to it.\n\n124\n00:06:40.761 --> 00:06:45.634\nIt's called ToShortDateString,\nso what I'm going to do is I'm\n\n125\n00:06:45.634 --> 00:06:49.976\ngoing to encapsulate this\nentire thing in parentheses and\n\n126\n00:06:49.976 --> 00:06:55.310\nI'm gonna say ToShortDateString,\nopen close parenthesis.\n\n127\n00:06:55.310 --> 00:06:58.930\nSo now I'm gonna take that,\nconvert it back to date.\n\n128\n00:06:58.930 --> 00:07:03.270\nAnd then convert that into basically\njust the month, day, year.\n\n129\n00:07:03.270 --> 00:07:06.080\nIt's based on your regional\nsettings on your computer.\n\n130\n00:07:06.080 --> 00:07:07.460\n&gt;&gt; Okay, that's what I was going to ask,\n\n131\n00:07:07.460 --> 00:07:11.490\nwas, look earlier you showed us\nthe way to look with the get-Member.\n\n132\n00:07:11.490 --> 00:07:13.730\nSo I was gonna say how did\nyou know that existed?\n\n133\n00:07:13.730 --> 00:07:15.120\n&gt;&gt; And that's exactly how I did it.\n\n134\n00:07:15.120 --> 00:07:16.570\nLet's go down here and take a look.\n\n135\n00:07:16.570 --> 00:07:20.790\nThat's a great question,\nCherokee, so if I do get-date and\n\n136\n00:07:20.790 --> 00:07:24.810\npipe that into a get-member right?\n\n137\n00:07:24.810 --> 00:07:30.030\nI should see ToShortDateString\nright there.\n\n138\n00:07:30.030 --> 00:07:32.950\nAnd as I was writing this and\nI'm thinking about what I want to do.\n\n139\n00:07:32.950 --> 00:07:34.650\nThis is exactly what I did last night.\n\n140\n00:07:34.650 --> 00:07:35.730\nI pulled this up.\n\n141\n00:07:35.730 --> 00:07:39.090\nAnd I was like, perfect, a short date\nstring, I bet you that's what I need.\n\n142\n00:07:39.090 --> 00:07:42.680\nI was trying to figure out how to\neliminate the time portion because I don't\n\n143\n00:07:42.680 --> 00:07:44.810\nneed the time portion, right?\n\n144\n00:07:44.810 --> 00:07:47.610\nSo that's what we're gonna do, all right?\n\n145\n00:07:47.610 --> 00:07:51.481\nNow, I've got the date here, so\n\n146\n00:07:51.481 --> 00:07:57.437\nI can come down to here and\nI can say $date, right.\n\n147\n00:07:57.437 --> 00:08:01.462\nNow, this is the way we were doing it,\nI think, in some of our little,\n\n148\n00:08:01.462 --> 00:08:03.540\nwhen we were practicing.\n\n149\n00:08:03.540 --> 00:08:06.540\nLearning about variables,\nand things like that.\n\n150\n00:08:06.540 --> 00:08:09.643\nWe've talked about double quotes and\nsingle quotes, and\n\n151\n00:08:09.643 --> 00:08:12.493\nhow double quotes are actual\nexpandable strings, so\n\n152\n00:08:12.493 --> 00:08:16.070\nvariables should be resolved\ninto their actual value.\n\n153\n00:08:16.070 --> 00:08:18.270\n&gt;&gt; Single quotes are, it is what it is.\n\n154\n00:08:18.270 --> 00:08:20.070\n&gt;&gt; Yup, exactly right.\n\n155\n00:08:20.070 --> 00:08:22.830\nBut in scripts it doesn't quite work,\nall right?\n\n156\n00:08:22.830 --> 00:08:24.580\nWe lose that.\n\n157\n00:08:24.580 --> 00:08:25.940\nIn fact, let's run this right now.\n\n158\n00:08:25.940 --> 00:08:30.560\nIf we just run this,\nas is, we'll say oops.\n\n159\n00:08:30.560 --> 00:08:31.160\nWe'll put a t there.\n\n160\n00:08:31.160 --> 00:08:34.280\nLet's get focused on our scripting.\n\n161\n00:08:34.280 --> 00:08:39.566\nLet's do test one, and we'll say -path is\n\n162\n00:08:39.566 --> 00:08:44.852\ngoing to be c:\\Scripts.\n\n163\n00:08:44.852 --> 00:08:53.270\nAnd then -days, I wanting anything\nthat's over we'll say 5 days old.\n\n164\n00:08:53.270 --> 00:08:55.490\nAnd I'll run it.\n\n165\n00:08:55.490 --> 00:08:58.630\nAnd, and that actually worked.\n\n166\n00:08:58.630 --> 00:08:59.130\nHow about that?\n\n167\n00:09:00.380 --> 00:09:01.890\nI take it back, I lied.\n\n168\n00:09:01.890 --> 00:09:04.090\nIt worked just fine.\n\n169\n00:09:04.090 --> 00:09:07.680\nI swear to you the other night,\nit was not working for me.\n\n170\n00:09:07.680 --> 00:09:10.620\nSo I went old school, and\ndid the concatenation.\n\n171\n00:09:10.620 --> 00:09:12.750\nAnd now it's expanding out just fine.\n\n172\n00:09:12.750 --> 00:09:14.560\nSo we'll stick with it.\n\n173\n00:09:14.560 --> 00:09:18.800\nI'll show you what I did though, because\nit wasn't working for me the other day.\n\n174\n00:09:18.800 --> 00:09:22.250\nIf you remember, if you guys have\ndone this before, the plus sign.\n\n175\n00:09:22.250 --> 00:09:25.070\nRemember, we talked about addition\nif we're talking about integers.\n\n176\n00:09:25.070 --> 00:09:30.990\nBut the plus operator is also\nthe concatenation for strings.\n\n177\n00:09:30.990 --> 00:09:36.350\nSo I could have done something like\nthis and then taken out this last quote.\n\n178\n00:09:36.350 --> 00:09:37.280\nAnd +.\n\n179\n00:09:37.280 --> 00:09:39.110\nThis is the old way of doing it.\n\n180\n00:09:39.110 --> 00:09:43.580\nThe strings in the quotes and\nthen the variables outside the quotes.\n\n181\n00:09:43.580 --> 00:09:44.370\nAnd so for this,\n\n182\n00:09:44.370 --> 00:09:48.690\nI would have to put let's say the variable\nended up being number of files.\n\n183\n00:09:48.690 --> 00:09:53.880\nIt would have to look something like this,\nnumberoffiles.\n\n184\n00:09:53.880 --> 00:09:59.340\nAnd I would have to have a plus sign\non either side of that and a quote and\n\n185\n00:09:59.340 --> 00:10:04.540\nend the first end quote plus like that.\n\n186\n00:10:04.540 --> 00:10:07.675\nBut, if it's going to allow\nme to put it in the string,\n\n187\n00:10:07.675 --> 00:10:11.480\nthen we are going to do just that.\n\n188\n00:10:12.650 --> 00:10:17.360\nLet me back that up until we get back\ninside my quotes, and I'll fix anything.\n\n189\n00:10:17.360 --> 00:10:18.440\nThere we go.\n\n190\n00:10:18.440 --> 00:10:19.900\nAll right, so we'll do it this way,\n\n191\n00:10:19.900 --> 00:10:24.760\nhere we'll save the whole concatenation\ncuz it definitely makes for more readable\n\n192\n00:10:24.760 --> 00:10:28.650\nscripts if I don't have to do the whole\nplus sign for the concatenation.\n\n193\n00:10:28.650 --> 00:10:32.240\nSo I like our message so far, the\nfollowing blah, blah, blah files have not\n\n194\n00:10:32.240 --> 00:10:35.700\nbeen modified since and it definitely\nconverted that back into a date.\n\n195\n00:10:37.620 --> 00:10:41.800\nNow, to get the number of files,\nwhat is something we could do with that?\n\n196\n00:10:41.800 --> 00:10:47.630\nSo, we've got this Get-ChildItem,\nthis is returning the whole list of files.\n\n197\n00:10:47.630 --> 00:10:53.940\nBut now I want to be able to work with\nsome properties of that result in set.\n\n198\n00:10:53.940 --> 00:10:55.270\nAnd so what I really need to do,\n\n199\n00:10:55.270 --> 00:10:58.820\nthe easiest way is gonna be to\nuse another variable, right?\n\n200\n00:10:58.820 --> 00:11:03.220\nBecause if I wanted to use the count for\nthis thing right now, or the length is\n\n201\n00:11:03.220 --> 00:11:08.980\nwhat we'll end up using, I'd have to\nsurround this whole phrase in parentheses,\n\n202\n00:11:08.980 --> 00:11:13.470\nright, and then put .length behind that,\nand I could pull the length of that.\n\n203\n00:11:13.470 --> 00:11:15.780\nI'm not typing this over and\nover and over again in my script.\n\n204\n00:11:15.780 --> 00:11:17.190\nThere's really no need to.\n\n205\n00:11:17.190 --> 00:11:19.720\nIt's longer than the message itself,\nright.\n\n206\n00:11:19.720 --> 00:11:24.330\nSo what we're gonna do is just simply\nput this into a variable, all right.\n\n207\n00:11:24.330 --> 00:11:28.180\nAnd we'll call it something like,\nI forgot what I called it before.\n\n208\n00:11:28.180 --> 00:11:31.700\nI think I just called it a $a= right.\n\n209\n00:11:31.700 --> 00:11:33.990\nDoesn't matter what I call it.\n\n210\n00:11:33.990 --> 00:11:34.770\nSo now all of sudden,\n\n211\n00:11:34.770 --> 00:11:39.600\nmy whole process of getting the results\nis gonna be stored in a variable.\n\n212\n00:11:40.810 --> 00:11:42.430\nAnd if I was to run this right now.\n\n213\n00:11:46.256 --> 00:11:47.930\nAll I get is my message.\n\n214\n00:11:47.930 --> 00:11:50.050\nI don't get my results anymore.\n\n215\n00:11:50.050 --> 00:11:51.610\nIt seems to be working.\n\n216\n00:11:51.610 --> 00:11:54.810\nI see the date in here, but\nI don't get any results,\n\n217\n00:11:54.810 --> 00:11:57.180\nand that's because,\nWe didn't ask for the results.\n\n218\n00:11:58.180 --> 00:12:01.120\n&gt;&gt; So it's great to have the option\nto create these variables but\n\n219\n00:12:01.120 --> 00:12:05.690\nhow do you feel about like\nexcessive use of variables?\n\n220\n00:12:05.690 --> 00:12:07.660\nWould that ever be an issue I mean?\n\n221\n00:12:07.660 --> 00:12:10.930\n&gt;&gt; Potentially, I think anything\nyou might run out of names for\n\n222\n00:12:10.930 --> 00:12:12.310\nyour variables, meaningful names.\n\n223\n00:12:12.310 --> 00:12:14.440\nA is not the most meaningful thing.\n\n224\n00:12:15.780 --> 00:12:20.140\nBut no, I don't think there's a problem\nwith that, using too many variables.\n\n225\n00:12:20.140 --> 00:12:20.990\nLet's change this up.\n\n226\n00:12:20.990 --> 00:12:22.150\nI will follow good practice.\n\n227\n00:12:22.150 --> 00:12:26.640\nWe'll say $results, or\nhow about we do $files?\n\n228\n00:12:26.640 --> 00:12:28.740\nThat would probably make more sense.\n\n229\n00:12:28.740 --> 00:12:32.040\nCuz that's what I'm returning, a list of\nfiles that's older than a certain date.\n\n230\n00:12:32.040 --> 00:12:35.060\nSo we'll say $files.\n\n231\n00:12:35.060 --> 00:12:37.830\nSo now that I have that in a variable\n\n232\n00:12:37.830 --> 00:12:41.590\nit's gonna make it a lot easier\nto work with, all right.\n\n233\n00:12:41.590 --> 00:12:45.520\nI can go ahead and have this message\nprint out and then after that,\n\n234\n00:12:46.600 --> 00:12:51.214\nI can put $files, right?\n\n235\n00:12:51.214 --> 00:12:53.960\nSo now when we run it.\n\n236\n00:12:57.475 --> 00:13:01.846\nI see, the following number of files\nhas not been modified since, and\n\n237\n00:13:01.846 --> 00:13:05.930\nthere's my date, and\nthen there's my results.\n\n238\n00:13:05.930 --> 00:13:07.870\nI'm liking the output\nalready a little bit more.\n\n239\n00:13:07.870 --> 00:13:10.170\nSeems a little more polished, right?\n\n240\n00:13:10.170 --> 00:13:11.680\nYou'll run the script and\nit's telling you, hey,\n\n241\n00:13:11.680 --> 00:13:15.390\nthe following is a list of\nthe files we found, Here they are.\n\n242\n00:13:15.390 --> 00:13:16.980\nHere's all their information.\n\n243\n00:13:16.980 --> 00:13:18.870\nDo with it what you will all right?\n\n244\n00:13:18.870 --> 00:13:21.610\nI'm already liking this\na whole lot better.\n\n245\n00:13:21.610 --> 00:13:26.230\nAll right, but this obviously\nyeah that's not too helpful XXX.\n\n246\n00:13:26.230 --> 00:13:27.090\nWe need to fix that.\n\n247\n00:13:27.090 --> 00:13:30.960\nSo now that I have my\nresult set in a variable.\n\n248\n00:13:32.020 --> 00:13:35.990\nLet's see if we can do this, $files.\n\n249\n00:13:35.990 --> 00:13:37.720\nI think this is the part that might break.\n\n250\n00:13:37.720 --> 00:13:38.700\nMaybe this is what this was.\n\n251\n00:13:38.700 --> 00:13:41.230\nYeah.\nSee how .count is not changing colors?\n\n252\n00:13:41.230 --> 00:13:43.540\n&gt;&gt; Mm-hmm.\n&gt;&gt; It's seeing it as a string.\n\n253\n00:13:44.610 --> 00:13:50.590\nThat's my first indicator that this\nis probably not gonna work as is.\n\n254\n00:13:50.590 --> 00:13:53.649\nI try to put this in parentheses.\n\n255\n00:13:55.670 --> 00:13:58.360\nIt doesn't seem to be helping\nbecause in parenthesis\n\n256\n00:13:58.360 --> 00:14:00.570\nare used to being seen as a string.\n\n257\n00:14:00.570 --> 00:14:01.380\nI'd have to start.\n\n258\n00:14:03.550 --> 00:14:07.440\nWe can escape characters\nto get that done I suppose.\n\n259\n00:14:07.440 --> 00:14:09.510\nFor me again,\nI go back to what I said earlier,\n\n260\n00:14:09.510 --> 00:14:11.830\nthere's five different\nways to do everything.\n\n261\n00:14:11.830 --> 00:14:15.330\nYou pick the one that works best for\nyou and makes the most sense for you.\n\n262\n00:14:15.330 --> 00:14:18.280\nAnd still works and\nis relatively efficient.\n\n263\n00:14:18.280 --> 00:14:22.560\nSo what I'm gonna do is I'm gonna\nconcatinate because it's just,\n\n264\n00:14:22.560 --> 00:14:23.200\nI'm old school.\n\n265\n00:14:23.200 --> 00:14:31.630\nIt's the way I like to work so I'm gonna\nswish this up to something like this.\n\n266\n00:14:31.630 --> 00:14:37.470\nAll right so now I've broken it up, I've\ngot a string here right inside my quotes,\n\n267\n00:14:37.470 --> 00:14:42.050\nand then I'm concatenating,\noops as I just moved it there.\n\n268\n00:14:42.050 --> 00:14:47.410\nA property of my variable here\nwhich is a list of items,\n\n269\n00:14:47.410 --> 00:14:51.390\nand then I'll concatenate\nthat with another string.\n\n270\n00:14:51.390 --> 00:14:54.840\nHere, right, which is actually\nan expandable string where\n\n271\n00:14:54.840 --> 00:14:58.450\nthe variable is being expanded out,\nso we're leaving that.\n\n272\n00:14:58.450 --> 00:15:00.170\nAlso notice the space I have in here,\nright?\n\n273\n00:15:00.170 --> 00:15:04.640\nThere's a space after the word\nfollowing and before the word files.\n\n274\n00:15:04.640 --> 00:15:07.000\nThis concatenation will\nplug them together.\n\n275\n00:15:07.000 --> 00:15:10.670\nYou have to include any white spaces you\nwould want to make it human readable,\n\n276\n00:15:10.670 --> 00:15:13.290\nright, to have space between Words.\n\n277\n00:15:13.290 --> 00:15:17.420\nSo let's see what happens now,\nlet's save that and\n\n278\n00:15:17.420 --> 00:15:21.760\nexecute that, and see what we get.\n\n279\n00:15:21.760 --> 00:15:29.740\nLook at there, the following ten files\nhave not been modified since 11/9/2017.\n\n280\n00:15:29.740 --> 00:15:32.120\nAnd there are my ten files.\n\n281\n00:15:32.120 --> 00:15:33.560\n&gt;&gt; Looks so professional.\n\n282\n00:15:33.560 --> 00:15:35.560\n&gt;&gt; Right it's looking a lot better.\n\n283\n00:15:35.560 --> 00:15:38.890\nI'll tell you this might be getting\nnit picky but I don't like this.\n\n284\n00:15:38.890 --> 00:15:41.670\nThe fact that there's no\nspace between my command.\n\n285\n00:15:41.670 --> 00:15:44.760\nThis kind of blurs into\nmy command up here and\n\n286\n00:15:44.760 --> 00:15:46.600\nit doesn't look like\nit's part of my results.\n\n287\n00:15:46.600 --> 00:15:47.190\n&gt;&gt; Okay.\n\n288\n00:15:47.190 --> 00:15:50.770\n&gt;&gt; So I'm simply gonna do a back tick n.\n\n289\n00:15:50.770 --> 00:15:53.446\nThat's the new line character.\n\n290\n00:15:53.446 --> 00:15:57.870\nI'm gonna dump that into my string up\nhere, save it, and try that one more time.\n\n291\n00:15:59.790 --> 00:16:03.550\nAnd now Doesn't it look better?\n\n292\n00:16:03.550 --> 00:16:05.237\n&gt;&gt; It even looks better, Mike.\n\n293\n00:16:05.237 --> 00:16:06.390\n&gt;&gt; I think so.\n\n294\n00:16:06.390 --> 00:16:10.620\nIt looks like it's more like the results\nand not the part of that command.\n\n295\n00:16:10.620 --> 00:16:12.730\nWe don't wanna get lost up there.\n\n296\n00:16:12.730 --> 00:16:16.870\nAll right, then again,\nthat's just me being a little nit picky.\n\n297\n00:16:16.870 --> 00:16:19.820\nAll right, so, everything looks great.\n\n298\n00:16:19.820 --> 00:16:22.045\nBut I'm gonna tell you that\nwe actually have a problem.\n\n299\n00:16:22.045 --> 00:16:22.636\n&gt;&gt; [SOUND]\n\n300\n00:16:22.636 --> 00:16:23.517\n&gt;&gt; Houston-\n&gt;&gt; Man!\n\n301\n00:16:23.517 --> 00:16:24.238\n&gt;&gt; Yeah, I know.\n\n302\n00:16:24.238 --> 00:16:25.236\n&gt;&gt; I thought we were doing so good.\n\n303\n00:16:25.236 --> 00:16:26.927\n&gt;&gt; I know everything is working great.\n\n304\n00:16:26.927 --> 00:16:30.605\nLet's try a few different examples here.\n\n305\n00:16:30.605 --> 00:16:33.042\nLet's get rid of script pane for\njust a second.\n\n306\n00:16:33.042 --> 00:16:35.650\nAnd let's say, so this one's working.\n\n307\n00:16:35.650 --> 00:16:37.300\nDays five, yeah great.\n\n308\n00:16:37.300 --> 00:16:42.212\nI got ten files, one, two, three,\nfour, five, six, seven, eight, nine,\n\n309\n00:16:42.212 --> 00:16:43.310\nten looks great.\n\n310\n00:16:43.310 --> 00:16:46.310\nLet's go back to seven days.\n\n311\n00:16:46.310 --> 00:16:50.370\nAnd I get zero files\nhave not been modified.\n\n312\n00:16:50.370 --> 00:16:53.290\nLet's try six days.\n\n313\n00:16:54.740 --> 00:16:59.380\nAnd I got seven files\nhave not been modified.\n\n314\n00:16:59.380 --> 00:17:00.600\nAnd you know what?\n\n315\n00:17:00.600 --> 00:17:04.124\nI was gonna try to show you guys.\n\n316\n00:17:04.124 --> 00:17:10.120\n&gt;&gt; So how could zero files have been\nmodified in seven, but then x in six?\n\n317\n00:17:10.120 --> 00:17:13.330\n&gt;&gt; Well, you see this one right here.\n\n318\n00:17:13.330 --> 00:17:18.060\nI was wanting to get that one to show up\non it's own but the hours are off now.\n\n319\n00:17:18.060 --> 00:17:20.240\nLet's take a look at my script again.\n\n320\n00:17:20.240 --> 00:17:21.260\n&gt;&gt; Okay.\n\n321\n00:17:21.260 --> 00:17:23.530\nAnd let's try something.\n\n322\n00:17:23.530 --> 00:17:26.220\nI'll show you what is broke because\nwe haven't seen what is broken yet.\n\n323\n00:17:26.220 --> 00:17:31.690\nEverything is working, right, if it\nsays zero files are older than this and\n\n324\n00:17:31.690 --> 00:17:34.150\nI get no results, that makes sense.\n\n325\n00:17:34.150 --> 00:17:37.420\nThis one says seven files and\nit definitely lists seven files.\n\n326\n00:17:37.420 --> 00:17:39.450\nSo everything is okay.\n\n327\n00:17:39.450 --> 00:17:40.110\n&gt;&gt; Okay.\n&gt;&gt; Let's\n\n328\n00:17:40.110 --> 00:17:43.060\nchange something up in my script and\nsee if I can break it.\n\n329\n00:17:43.060 --> 00:17:44.660\nJust show you how to fix it.\n\n330\n00:17:44.660 --> 00:17:49.680\nUp here,\nwe did leave this cuz it was working fine.\n\n331\n00:17:49.680 --> 00:17:52.420\nBut now, we have date.\n\n332\n00:17:52.420 --> 00:17:57.240\nSo rather than doing all this math,\nagain, we've already done it once here.\n\n333\n00:17:57.240 --> 00:18:02.530\nI can simply swap this\nback out with $date.\n\n334\n00:18:02.530 --> 00:18:07.960\nRight, and I don't need that\nparentheses anymore right?\n\n335\n00:18:07.960 --> 00:18:10.770\nSo you see how that simplified my code.\n\n336\n00:18:10.770 --> 00:18:15.260\nIf I go back to this versus.\n\n337\n00:18:18.236 --> 00:18:20.356\nI had to think about that for\na second, too.\n\n338\n00:18:20.356 --> 00:18:22.380\n&gt;&gt; $date.\n&gt;&gt; Because it does make sense.\n\n339\n00:18:22.380 --> 00:18:26.330\nSo that there would be something for that\nsix days versus the seven because that\n\n340\n00:18:26.330 --> 00:18:29.880\nlittle bit of that extra day is when\nthose files could have been generated.\n\n341\n00:18:29.880 --> 00:18:30.400\n&gt;&gt; Yep.\n\n342\n00:18:30.400 --> 00:18:34.960\nYeah, and what you'll find is that\nthe full date and time accounts for\n\n343\n00:18:34.960 --> 00:18:37.310\nhours as well, right,\nhours, minutes, seconds.\n\n344\n00:18:37.310 --> 00:18:42.310\nSo if it was modified 7 days and\n12 hours ago\n\n345\n00:18:42.310 --> 00:18:46.760\nthat's going to show up if I say older\nthan 7 days but not older than 8 days.\n\n346\n00:18:46.760 --> 00:18:47.450\n&gt;&gt; Okay.\n&gt;&gt; Right so\n\n347\n00:18:47.450 --> 00:18:48.920\nit gets a little weird in there.\n\n348\n00:18:48.920 --> 00:18:52.150\nLet's make sure my\nscript is still working.\n\n349\n00:18:52.150 --> 00:18:53.100\nLet's say we go 6 days.\n\n350\n00:18:53.100 --> 00:18:54.380\nThere we go.\nThat's what I want.\n\n351\n00:18:54.380 --> 00:18:58.680\nSo I eliminated the hours so\nthat I could get that one file that was\n\n352\n00:18:58.680 --> 00:19:01.400\nmodified on the 7 cuz I\nwanted to show you a problem.\n\n353\n00:19:01.400 --> 00:19:05.562\nAll right, so so far let's kinda rewind,\nmake sure we're all on the same page.\n\n354\n00:19:05.562 --> 00:19:07.360\nI have, everything's working.\n\n355\n00:19:07.360 --> 00:19:12.330\nWe got a cool message popping up saying\nthis is how many files were modified\n\n356\n00:19:12.330 --> 00:19:14.210\nbefore this date.\n\n357\n00:19:14.210 --> 00:19:17.120\nWe change this back to date\njust to simplify our code.\n\n358\n00:19:17.120 --> 00:19:19.980\nSo everything seems to be working fine.\n\n359\n00:19:19.980 --> 00:19:23.287\nIf I say what's older than 5 days,\n\n360\n00:19:23.287 --> 00:19:28.247\nI get in my results it says 7 files,\nand I've got 1,\n\n361\n00:19:28.247 --> 00:19:33.118\n2, 3, 4, 5, 6, 7 that seems to be working.\n\n362\n00:19:33.118 --> 00:19:38.570\nIf I say older than 4 days,\nand I've got 11 files.\n\n363\n00:19:38.570 --> 00:19:41.210\nWell, let's double-check, 1, 2,\n3, 4, 5, 6, 7, 8, 9, 10, 11.\n\n364\n00:19:41.210 --> 00:19:45.280\nWhat about older then six days and\n\n365\n00:19:45.280 --> 00:19:49.540\nsays one file has not been modified and\nit's working just fine.\n\n366\n00:19:49.540 --> 00:19:50.410\nThat is crazy.\n\n367\n00:19:51.550 --> 00:19:52.410\nI'm sorry.\n\n368\n00:19:52.410 --> 00:19:55.630\nYou know what I did?\n\n369\n00:19:56.910 --> 00:19:59.840\nDid I fix that?\n\n370\n00:19:59.840 --> 00:20:01.700\nI used count instead of link.\n\n371\n00:20:02.790 --> 00:20:03.820\nI use the alias there.\n\n372\n00:20:03.820 --> 00:20:07.480\nSo I solved my own problem\nwithout realizing it.\n\n373\n00:20:07.480 --> 00:20:09.760\nLet me force the problem one more time.\n\n374\n00:20:11.600 --> 00:20:16.690\nLet's try this, all right now you guys are\ngonna be like, what the heck is he doing.\n\n375\n00:20:16.690 --> 00:20:20.430\nThere we go, that is the issue\nthat I wanted to show you.\n\n376\n00:20:20.430 --> 00:20:20.980\nAll right?\n\n377\n00:20:20.980 --> 00:20:23.450\nCuz technically I should have\nused length in the first place.\n\n378\n00:20:23.450 --> 00:20:25.990\nThat goes back to me\nhaving done this a while.\n\n379\n00:20:25.990 --> 00:20:29.070\nRemember count for our array's length?\n\n380\n00:20:29.070 --> 00:20:33.150\nCount is actually an alias for\nlength, all right?\n\n381\n00:20:34.560 --> 00:20:36.220\nSo let's try this one more time.\n\n382\n00:20:36.220 --> 00:20:39.857\nAgain, I want to show you a problem that\ncould very well arise when you're writing\n\n383\n00:20:39.857 --> 00:20:41.343\nscripts if you're not careful.\n\n384\n00:20:41.343 --> 00:20:46.350\nI've answered this very question\nin our forums here at ITProTV.\n\n385\n00:20:46.350 --> 00:20:47.420\nSo I definitely want to show you this.\n\n386\n00:20:47.420 --> 00:20:51.660\nSo, sorry it took me a couple of\ntries to get the problem to arise.\n\n387\n00:20:51.660 --> 00:20:52.467\nBut we're working it out.\n\n388\n00:20:52.467 --> 00:20:54.734\nBut now, we're going to be able to fix it.\n\n389\n00:20:54.734 --> 00:20:56.550\nSo now, we've got a problem.\n\n390\n00:20:56.550 --> 00:20:58.220\nAnd you're like Mike, what is the problem?\n\n391\n00:20:58.220 --> 00:20:58.840\n&gt;&gt; Yeah.\n\n392\n00:20:58.840 --> 00:21:04.260\n&gt;&gt; Well, when I do 5 days,\nI get a whole 7 files.\n\n393\n00:21:04.260 --> 00:21:06.250\nAnd seven files on my list that's fine.\n\n394\n00:21:06.250 --> 00:21:12.200\nWhen I do four days,\nall right I get eleven files and\n\n395\n00:21:12.200 --> 00:21:14.980\nthere's eleven files in my list and\nthat's fine.\n\n396\n00:21:14.980 --> 00:21:19.788\nWhen I do six days,\nI get twenty eight files but\n\n397\n00:21:19.788 --> 00:21:23.374\nthere's only one file in my list.\n\n398\n00:21:23.374 --> 00:21:27.443\nWhy?\nWhy is this coming out as 28 when\n\n399\n00:21:27.443 --> 00:21:32.710\nthere's only one file in the list, right?\n\n400\n00:21:32.710 --> 00:21:36.810\nAnd I'll tell you, this is something that\nI struggled with when I, and the first\n\n401\n00:21:36.810 --> 00:21:40.970\ntime I run into this I'm trying to figure\nout what is going wrong with the map.\n\n402\n00:21:40.970 --> 00:21:44.710\nAnd it's not anything that's\ngoing wrong with the math.\n\n403\n00:21:44.710 --> 00:21:46.340\nHere's what it's actually doing.\n\n404\n00:21:46.340 --> 00:21:49.785\nIn fact, we looked at this,\nI think, live between shows.\n\n405\n00:21:49.785 --> 00:21:53.140\nMr. Hertz had a question about this.\n\n406\n00:21:53.140 --> 00:21:55.140\nWe were talking about arrays.\n\n407\n00:21:55.140 --> 00:21:57.590\nAnd that's what it comes back to.\n\n408\n00:21:57.590 --> 00:22:03.550\nIf we stop and break down our code,\nwe're doing this Get-ChildItem,\n\n409\n00:22:03.550 --> 00:22:08.510\nand we're storing these guys\nin this variable, $files.\n\n410\n00:22:08.510 --> 00:22:11.570\nAnd then I'm calling\n$files.length which for\n\n411\n00:22:11.570 --> 00:22:15.850\nan array, tells you how many\nelements are in that array.\n\n412\n00:22:15.850 --> 00:22:19.000\nSo if there's six elements,\nif we put six files in there,\n\n413\n00:22:19.000 --> 00:22:22.240\nthere's six elements,\nlength gives us exactly what we want.\n\n414\n00:22:22.240 --> 00:22:24.270\nBut remember how you declare an array.\n\n415\n00:22:24.270 --> 00:22:29.420\nYou declare an array by assigning\nmore than one value to the variable.\n\n416\n00:22:30.650 --> 00:22:32.987\nWell, if there's five child items,\n\n417\n00:22:32.987 --> 00:22:36.139\nthen it's assigning five\nitems to that variable.\n\n418\n00:22:36.139 --> 00:22:38.230\nWe've got an array, and\nthe length works just fine.\n\n419\n00:22:38.230 --> 00:22:42.094\nBut if there's only one file\nthat meets our criteria,\n\n420\n00:22:42.094 --> 00:22:47.386\nthen it's storing one item in that\nvariable and that's not an array, that\n\n421\n00:22:47.386 --> 00:22:52.950\nis now a variable that is going to tied\nbased on whatever it is that we store.\n\n422\n00:22:52.950 --> 00:22:56.460\nA string most likely, right,\nif it's a file path or a file object, so\n\n423\n00:22:56.460 --> 00:22:58.010\nit will be system type object.\n\n424\n00:22:58.010 --> 00:23:02.140\nIt's no longer an array though because\nthere's only one object in that variable,\n\n425\n00:23:02.140 --> 00:23:07.110\nso the length of a string array or\nan object array doesn't.\n\n426\n00:23:07.110 --> 00:23:10.380\nGive me the count of elements\nanymore cuz it's not an array.\n\n427\n00:23:10.380 --> 00:23:12.070\nWhat it does is it gives me the size,\n\n428\n00:23:12.070 --> 00:23:16.080\nso if we look closely at\nthe results down here.\n\n429\n00:23:16.080 --> 00:23:20.120\nIt said, there's 28 files\nthat have not been modified.\n\n430\n00:23:20.120 --> 00:23:23.230\nIt only listed one but\nlook at the size of the file.\n\n431\n00:23:24.400 --> 00:23:25.380\nIt's 28 bytes.\n\n432\n00:23:26.400 --> 00:23:28.810\nSo that's what it's returning up here.\n\n433\n00:23:28.810 --> 00:23:33.340\nBecause it's not an array,\nit's saying, length returns the size,\n\n434\n00:23:33.340 --> 00:23:34.910\nnot the count of elements.\n\n435\n00:23:34.910 --> 00:23:39.129\nAnd so it's saying, hey,\nyou've got a file of 28 bytes in size.\n\n436\n00:23:39.129 --> 00:23:39.889\n&gt;&gt; Strange.\n\n437\n00:23:39.889 --> 00:23:40.550\n&gt;&gt; Right?\nAnd, and\n\n438\n00:23:40.550 --> 00:23:43.050\nit will drive you crazy\nbecause it works for\n\n439\n00:23:43.050 --> 00:23:47.703\neverything unless there is one file in\nthere, and then, you are like [SOUND], so\n\n440\n00:23:47.703 --> 00:23:52.079\nyeah, it, it's just something I kind\nof wanted to point out to show you and\n\n441\n00:23:52.079 --> 00:23:56.072\nit reiterates the fact that PowerShell\nis a dynamic type language.\n\n442\n00:23:56.072 --> 00:23:58.758\nAnd if we're building\nan array with a loop.\n\n443\n00:23:58.758 --> 00:24:02.706\nWell the problem is, the first time\nthrough the loop you are adding one item,\n\n444\n00:24:02.706 --> 00:24:03.810\nits not an array yet.\n\n445\n00:24:03.810 --> 00:24:07.780\nSo you can't use any of those array\nmethods with it or those array properties.\n\n446\n00:24:07.780 --> 00:24:12.320\nThe next time through the loop, it might\nadd another element and all of a sudden we\n\n447\n00:24:12.320 --> 00:24:16.330\nhave an array but most likely it's gonna\ncatenate and still not get an array.\n\n448\n00:24:16.330 --> 00:24:19.670\nSo you've gotta be real careful with that.\n\n449\n00:24:19.670 --> 00:24:20.435\n&gt;&gt; So, how do we fix it?\n\n450\n00:24:20.435 --> 00:24:21.000\n[LAUGH]\n&gt;&gt; We'll,\n\n451\n00:24:21.000 --> 00:24:26.120\nwe're gonna have to take a look at\na couple of different properties and\n\n452\n00:24:26.120 --> 00:24:29.790\nwe'll use an if statement, is I think,\nthe best way to go with this.\n\n453\n00:24:29.790 --> 00:24:31.960\nSo let's try that out,\nwhat I really need to do then,\n\n454\n00:24:31.960 --> 00:24:36.510\nso the problem lies when there's\na difference in the number of files.\n\n455\n00:24:36.510 --> 00:24:39.850\nIf there's more then one\nfile everything works fine.\n\n456\n00:24:39.850 --> 00:24:45.340\nIf there's only one file,\nit doesn't work so well all right.\n\n457\n00:24:45.340 --> 00:24:50.730\nIf it's a zero,\nit does seem to be working, right?\n\n458\n00:24:50.730 --> 00:24:52.220\nI don't think we have a problem with zero.\n\n459\n00:24:52.220 --> 00:24:56.568\nBut let's go back to 44 days,\nI don't have anything that old.\n\n460\n00:24:56.568 --> 00:25:03.062\nI get zero files have not been modified\nsince, November, or October 1st.\n\n461\n00:25:03.062 --> 00:25:04.340\nAll right, so zeroes working,\n\n462\n00:25:04.340 --> 00:25:07.920\nit's really just that one\nthat we'll have to deal with.\n\n463\n00:25:07.920 --> 00:25:11.520\nSo what we're gonna do is\nwe're gonna simply add\n\n464\n00:25:11.520 --> 00:25:15.400\na little bit of code in\nhere to deal with that.\n\n465\n00:25:15.400 --> 00:25:17.210\nSo let's create a new variable.\n\n466\n00:25:17.210 --> 00:25:25.790\nLet's say $filecount equals 0 just\nto kind of initialize that variable.\n\n467\n00:25:27.360 --> 00:25:29.340\nAnd then what I wanna do,\nI'm gonna say, if.\n\n468\n00:25:31.120 --> 00:25:34.560\nLet's say I change that,\nwe're gonna do $files.\n\n469\n00:25:34.560 --> 00:25:43.813\nMike, silly, you need your open\nparenthesis, ($files.length\n\n470\n00:25:43.813 --> 00:25:50.420\nis less than 1, close my parenthesis,\n\n471\n00:25:50.420 --> 00:25:55.750\nopen my bracket, close my bracket,\nand inside goes the code I wanna do.\n\n472\n00:25:55.750 --> 00:26:00.520\nSo less than one, this was again, zero for\nsome reason was not working for me\n\n473\n00:26:00.520 --> 00:26:05.190\nthe first time I went through this script\nZero seems to be working now, but I added\n\n474\n00:26:05.190 --> 00:26:11.800\na condition to my if statement to ensure\nthat zero never did return any problems.\n\n475\n00:26:11.800 --> 00:26:15.550\nIf it's less than one,\nwell that means it's zero, right, but\n\n476\n00:26:15.550 --> 00:26:17.310\nit could also be negative one,\nnegative two, so\n\n477\n00:26:17.310 --> 00:26:21.610\nI just said let me cover all the bases,\nanything that's not a positive number.\n\n478\n00:26:21.610 --> 00:26:30.118\nThen I'm just going to go ahead and\ntell it, filecount equals zero, right?\n\n479\n00:26:30.118 --> 00:26:36.130\nThen elseif, new condition,\n\n480\n00:26:36.130 --> 00:26:40.340\ndollar sign files, dot length, alright?\n\n481\n00:26:43.250 --> 00:26:47.290\nAnd here's where I started going hm,\nwhere is there a better was to do this.\n\n482\n00:26:47.290 --> 00:26:51.230\nBecause I don't know what\nthe length is going to be.\n\n483\n00:26:51.230 --> 00:26:53.980\nIt could be 2, it could 4, it could be 10.\n\n484\n00:26:53.980 --> 00:26:57.960\nSo, do I want to say greater than 1,\nwhich probably worked.\n\n485\n00:26:57.960 --> 00:27:01.490\nBut I thought this was a good opportunity\nto use one of those other comparison\n\n486\n00:27:01.490 --> 00:27:06.370\noperators that we learned about and\nthe is, or is not.\n\n487\n00:27:06.370 --> 00:27:07.470\nYou remember that one?\n\n488\n00:27:07.470 --> 00:27:08.020\n&gt;&gt; No.\n[LAUGH]\n\n489\n00:27:08.020 --> 00:27:10.870\n&gt;&gt; That one allows me to test file or\n\n490\n00:27:10.870 --> 00:27:11.860\ndata types.\n\n491\n00:27:11.860 --> 00:27:13.880\n&gt;&gt; Okay.\n&gt;&gt; So what I'm gonna do is say, if,\n\n492\n00:27:13.880 --> 00:27:19.730\nelseif files isnot\n&gt;&gt; An array.\n\n493\n00:27:19.730 --> 00:27:23.870\nAll right?\n\n494\n00:27:23.870 --> 00:27:24.390\n&gt;&gt; Okay.\n\n495\n00:27:24.390 --> 00:27:29.582\n&gt;&gt; I close by parenthesis, open by brace\nand I'll explain here what I'm doing as we\n\n496\n00:27:29.582 --> 00:27:32.648\ntype, it's hard for\nme to type and talk sometimes.\n\n497\n00:27:32.648 --> 00:27:39.749\n[CROSSTALK] $file account equals 1.\n\n498\n00:27:39.749 --> 00:27:45.446\nAll right, so what I'm saying here\nis if it's 0 then just go ahead and\n\n499\n00:27:45.446 --> 00:27:46.710\nleave it at 0.\n\n500\n00:27:46.710 --> 00:27:48.820\nIf it's less than 1 leave it at 0.\n\n501\n00:27:48.820 --> 00:27:54.560\nIf it's not an array,\nset it to 1 because I know\n\n502\n00:27:54.560 --> 00:27:57.860\nthat if I add multiple items\nits gonna be an array.\n\n503\n00:27:57.860 --> 00:28:01.810\nThe problem I'm having is when there's\nonly one file to add to the variable,\n\n504\n00:28:01.810 --> 00:28:03.240\nit doesn't see it as an array.\n\n505\n00:28:03.240 --> 00:28:06.230\nIt sees it as a string or\nan object, an array of objects.\n\n506\n00:28:06.230 --> 00:28:10.200\nAnd I get the size of the object,\nnot the count of the objects.\n\n507\n00:28:10.200 --> 00:28:15.760\nSo, by doing this, I say if files is\nnot an array, let's assume one, right?\n\n508\n00:28:15.760 --> 00:28:18.380\nBecause if there was more than one object,\nit would definitely be an array.\n\n509\n00:28:18.380 --> 00:28:19.610\nSee what I'm saying?\n\n510\n00:28:19.610 --> 00:28:20.110\n&gt;&gt; Yeah.\n\n511\n00:28:20.110 --> 00:28:23.490\n&gt;&gt; Someone's using Powershell's\nown logic against it, if you will.\n\n512\n00:28:23.490 --> 00:28:28.220\nI'm saying alright, if it's not an array,\nthen it probably just, or it is gonna be,\n\n513\n00:28:28.220 --> 00:28:29.600\njust one object.\n\n514\n00:28:29.600 --> 00:28:32.990\nAgain, many different ways you can\ngo about getting the same results.\n\n515\n00:28:34.580 --> 00:28:37.350\nAnd then what I'm gonna do\njust to cover all my basis,\n\n516\n00:28:37.350 --> 00:28:41.330\nI'll put an else,\nbecause I did the actual file count,\n\n517\n00:28:41.330 --> 00:28:45.110\nwhat if it is an array, what if\nthere are seven files get returned?\n\n518\n00:28:45.110 --> 00:28:46.300\nI wanna know what that number is.\n\n519\n00:28:46.300 --> 00:28:53.580\nSo an else, open brace, close brace,\ncode to execute, dollar sign file count\n\n520\n00:28:55.630 --> 00:29:01.630\nIs going to equal $a.length cuz now we\nknow if it's an array, and not length.\n\n521\n00:29:01.630 --> 00:29:02.660\nWhat did we call it?\n\n522\n00:29:02.660 --> 00:29:05.550\nYeah, length, that's right.\n\n523\n00:29:05.550 --> 00:29:07.710\nIt's not $a, it's $files.\n\n524\n00:29:07.710 --> 00:29:08.340\nlength.\n\n525\n00:29:08.340 --> 00:29:12.400\nAll right So\nnow I've covered all my bases.\n\n526\n00:29:12.400 --> 00:29:15.290\nAnd that's really what you want to\nthink about as you're developing\n\n527\n00:29:15.290 --> 00:29:16.770\nan if statement like this.\n\n528\n00:29:16.770 --> 00:29:19.880\nThink about your possible outcomes.\n\n529\n00:29:19.880 --> 00:29:23.180\nCould I have used a switch here?\n\n530\n00:29:25.040 --> 00:29:28.380\nPossibly, listed each\none of these conditions.\n\n531\n00:29:28.380 --> 00:29:32.730\nTo me, in this case I like\nthe way this if lays out.\n\n532\n00:29:32.730 --> 00:29:34.390\nI think it's very readable.\n\n533\n00:29:34.390 --> 00:29:35.610\nAnd that's just my opinion.\n\n534\n00:29:35.610 --> 00:29:39.010\nYou might find that you'd\nrather use a switch instead.\n\n535\n00:29:40.090 --> 00:29:44.800\nMe personally, if I had one else if and\nan else, I'm okay.\n\n536\n00:29:44.800 --> 00:29:47.470\nIf I start adding three or four else ifs,\n\n537\n00:29:47.470 --> 00:29:52.270\nif A equals this, else if A equals this,\nelse if A equals this, else if,\n\n538\n00:29:52.270 --> 00:29:55.310\nyou know, if I start doing that,\nthen I would move to a switch.\n\n539\n00:29:55.310 --> 00:29:58.870\nIn this case, I'm fine with the if loop.\n\n540\n00:29:58.870 --> 00:29:59.840\nAll right.\n\n541\n00:29:59.840 --> 00:30:03.010\nSo now, everything should work just fine.\n\n542\n00:30:03.010 --> 00:30:04.350\nDoesn't matter what it is.\n\n543\n00:30:04.350 --> 00:30:05.750\nWe're going to change this.\n\n544\n00:30:08.550 --> 00:30:09.390\nOops.\n\n545\n00:30:09.390 --> 00:30:11.340\nTo file count, right?\n\n546\n00:30:11.340 --> 00:30:16.560\nSo now, if it's zero, it's less than one,\nit'll print out a zero just fine.\n\n547\n00:30:16.560 --> 00:30:19.830\nIf it's only a single item, it's gonna\nrecognize that it's not an array,\n\n548\n00:30:19.830 --> 00:30:22.620\nand it's gonna set the count to one.\n\n549\n00:30:22.620 --> 00:30:26.560\nIt's not gonna go and get the size\nof that item and put 28 anymore for\n\n550\n00:30:26.560 --> 00:30:28.380\nthat single file, right?\n\n551\n00:30:28.380 --> 00:30:32.220\nAnd then if it's more than one, it can\nget the length just like it always did.\n\n552\n00:30:32.220 --> 00:30:33.260\nEverything works just fine.\n\n553\n00:30:33.260 --> 00:30:38.100\nSo we'll try that out now, and\nif we say older than four days.\n\n554\n00:30:38.100 --> 00:30:39.170\nEverything should work.\n\n555\n00:30:40.310 --> 00:30:42.670\nWhen I have multiple files\neverything still works.\n\n556\n00:30:42.670 --> 00:30:49.940\nBut if I just have a single file, it works\njust fine as well, I get the one, right.\n\n557\n00:30:49.940 --> 00:30:53.200\nAlright, that might have been a little\nconfusing because I had to break it\n\n558\n00:30:53.200 --> 00:30:54.470\nintentionally.\n\n559\n00:30:54.470 --> 00:30:58.480\nIt broke on its own when I was\nsetting this lesson up for you guys.\n\n560\n00:31:00.050 --> 00:31:04.020\nI did something slightly different\nthis time and it didn't break.\n\n561\n00:31:04.020 --> 00:31:07.530\nThat's just the way scripting goes.\n\n562\n00:31:07.530 --> 00:31:08.790\nIt's not an exact science.\n\n563\n00:31:08.790 --> 00:31:09.900\nThere's definitely an art to it.\n\n564\n00:31:09.900 --> 00:31:12.370\n&gt;&gt; And that's the thing,\nlike my take away from this particular\n\n565\n00:31:12.370 --> 00:31:13.810\n&gt;&gt; Killer show is,\n\n566\n00:31:13.810 --> 00:31:16.330\nyou can have book knowledge all day but\n\n567\n00:31:16.330 --> 00:31:20.480\nhaving that working knowledge,\nI wouldn't have know that going into this.\n\n568\n00:31:20.480 --> 00:31:23.970\nAnd you might not have either but\nhaving it break on you and\n\n569\n00:31:23.970 --> 00:31:26.370\ngetting familiar with just the syntax.\n\n570\n00:31:26.370 --> 00:31:28.320\nWhat works, what doesn't work.\n\n571\n00:31:28.320 --> 00:31:30.850\nI mean that's really the only\nway you're going to be able\n\n572\n00:31:30.850 --> 00:31:32.110\nto learn with this, in my opinion.\n\n573\n00:31:32.110 --> 00:31:32.640\n&gt;&gt; Absolutely.\n\n574\n00:31:32.640 --> 00:31:35.600\nI'm a firm believer if you\nwanna Learn PowerShell.\n\n575\n00:31:35.600 --> 00:31:38.960\nObviously, watch our episodes, enjoy\nthese, rewind them, watch them again.\n\n576\n00:31:38.960 --> 00:31:41.790\nRead our notes, but\nthen get in there and play, right?\n\n577\n00:31:41.790 --> 00:31:44.570\nPick a topic, say, you know what,\nI'm gonna work with files today.\n\n578\n00:31:44.570 --> 00:31:47.280\nAnd just play with commands, and\nsee what you can do with files.\n\n579\n00:31:47.280 --> 00:31:50.200\nTry to move one, try to copy one,\ntry to delete one.\n\n580\n00:31:50.200 --> 00:31:52.390\nPlay around, its a great way to learn.\n\n581\n00:31:52.390 --> 00:31:53.930\n&gt;&gt; Awesome, Mike well, thank you.\n\n582\n00:31:53.930 --> 00:31:55.370\n&gt;&gt; We do have a little more.\n\n583\n00:31:55.370 --> 00:31:57.800\n&gt;&gt; Well, okay I was like, try to like,\npush you out the door, but\n\n584\n00:31:57.800 --> 00:31:58.790\nyou're like hold on, hold on.\n\n585\n00:31:58.790 --> 00:32:00.820\n&gt;&gt; But I don't think I can do\nit in like a minute or two.\n\n586\n00:32:00.820 --> 00:32:02.606\n&gt;&gt; Okay.\n&gt;&gt; So we might have to come back for\n\n587\n00:32:02.606 --> 00:32:03.141\n&gt;&gt; Part three?\n\n588\n00:32:03.141 --> 00:32:03.996\n&gt;&gt; Yeah.\n&gt;&gt; All right,\n\n589\n00:32:03.996 --> 00:32:06.300\nwell you don't want to miss part three.\n\n590\n00:32:06.300 --> 00:32:08.800\nMike has more that he\nwants to share with us.\n\n591\n00:32:08.800 --> 00:32:11.190\nSo thank you for that Mike and\nthank you for joining us for\n\n592\n00:32:11.190 --> 00:32:14.300\nthis show lets sign out I've\nbeen your host, Cherokee Boose.\n\n593\n00:32:14.300 --> 00:32:15.070\n&gt;&gt; And I'm Mike Rodrick.\n\n594\n00:32:15.070 --> 00:32:21.824\n&gt;&gt; See you next time here, ITProTV.\n\n595\n00:32:21.824 --> 00:32:24.047\n[MUSIC]\n\n596\n00:32:24.047 --> 00:32:26.608\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "242971931"
        },
        {
          "description": "In this episode, we will continue to look at writing PowerShell scripts. We will again use the process of taking an everyday task, and writing a script that will help automate the task.",
          "length": "1831",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-3-writing_another_script_pt_3-111417-PGM.00_30_17_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-3-writing_another_script_pt_3-111417-PGM.00_30_17_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-4-2-3-writing_another_script_pt_3-111417-PGM.00_30_17_07.Still001-sm.jpg",
          "title": "Writing Another Script Part 3",
          "transcript": "WEBVTT\n\n1\n00:00:00.290 --> 00:00:01.263\nWelcome to ITProTV.\n\n2\n00:00:01.263 --> 00:00:06.546\n[CROSSTALK]\n\n3\n00:00:06.546 --> 00:00:08.156\n[MUSIC]\n\n4\n00:00:08.156 --> 00:00:12.063\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.063 --> 00:00:14.360\n&gt;&gt; Welcome back to your\nPowerShell scripting series.\n\n6\n00:00:14.360 --> 00:00:16.070\nI'm your show host Cherokee Boose.\n\n7\n00:00:16.070 --> 00:00:20.450\nSo we've actually made it to a part 3,\nwriting another script.\n\n8\n00:00:20.450 --> 00:00:23.670\nSo, we have mister Mike Roderick\nback in studios to,\n\n9\n00:00:23.670 --> 00:00:26.940\nwell finish up this script in this show?\n\n10\n00:00:26.940 --> 00:00:27.520\nWhat do you say?\n\n11\n00:00:27.520 --> 00:00:29.030\n&gt;&gt; [LAUGH] Is that a question or\na statement?\n\n12\n00:00:29.030 --> 00:00:29.870\n&gt;&gt; That's a question.\n\n13\n00:00:29.870 --> 00:00:32.980\n&gt;&gt; Okay, I'm hoping we can finish\nthis one up in this episode.\n\n14\n00:00:32.980 --> 00:00:35.670\nI know I love to talk about\nscripting in PowerShell so\n\n15\n00:00:35.670 --> 00:00:36.710\nI stretch them out a little bit.\n\n16\n00:00:36.710 --> 00:00:37.870\n&gt;&gt; It's okay, we're learning a lot here.\n\n17\n00:00:37.870 --> 00:00:38.740\n&gt;&gt; Hopefully, right?\n\n18\n00:00:38.740 --> 00:00:39.885\nThat's the idea.\n\n19\n00:00:39.885 --> 00:00:42.910\n[LAUGH] I'm not just gonna type it and\nrun it and say there you go.\n\n20\n00:00:42.910 --> 00:00:45.640\nWe're going to break it down and\nsee what's going on.\n\n21\n00:00:45.640 --> 00:00:48.970\nBut to get back to our script here\nthat we did in part one and part two,\n\n22\n00:00:48.970 --> 00:00:52.700\nwe said we were going to archive files and\nwe've got a pretty cool script so far.\n\n23\n00:00:52.700 --> 00:00:53.260\nIt's going and\n\n24\n00:00:53.260 --> 00:00:57.200\nchecking a directory, whatever directory\nwe specify when we call the script.\n\n25\n00:00:57.200 --> 00:01:01.750\nAnd it's returning files that have\nnot been modified in so many days.\n\n26\n00:01:01.750 --> 00:01:06.090\nAnd we get to choose how many days\nwhen we call the script as well.\n\n27\n00:01:06.090 --> 00:01:10.210\nSo we've got that all straightened out, we\nalso have a nice little message that kind\n\n28\n00:01:10.210 --> 00:01:13.760\nof tells you how many files it found\nthat are older than a particular date.\n\n29\n00:01:13.760 --> 00:01:15.930\nBecause sometimes when\nyou call a script and\n\n30\n00:01:15.930 --> 00:01:19.800\nyou get a long output, it's nice if\nI want to print those results or\n\n31\n00:01:19.800 --> 00:01:23.570\nsend those results out to a file or\nsomething like that.\n\n32\n00:01:23.570 --> 00:01:27.200\nSo rather than just have a list of files,\nand go, I wonder what these files are.\n\n33\n00:01:27.200 --> 00:01:28.910\n&gt;&gt; Right.\n&gt;&gt; Now, I've got some context for\n\n34\n00:01:28.910 --> 00:01:30.100\nthat list of files.\n\n35\n00:01:30.100 --> 00:01:33.260\nIt says the following one file has\nnot been changed since such and such.\n\n36\n00:01:33.260 --> 00:01:35.010\nSo we've got that going.\n\n37\n00:01:35.010 --> 00:01:39.360\nWe worked out our length, versus count,\nversus strings, versus array thing.\n\n38\n00:01:39.360 --> 00:01:41.040\nAnd we got that straightened out.\n\n39\n00:01:41.040 --> 00:01:42.880\nSo our message is working beautifully.\n\n40\n00:01:42.880 --> 00:01:45.253\n&gt;&gt; It might be easier to ask\nwhat don't we have to do.\n\n41\n00:01:45.253 --> 00:01:46.174\n[LAUGH]\n&gt;&gt; Okay, so\n\n42\n00:01:46.174 --> 00:01:49.227\nwhat we don't have is the actual\narchiving of the files, right?\n\n43\n00:01:49.227 --> 00:01:50.440\nWe haven't moved anything.\n\n44\n00:01:50.440 --> 00:01:51.440\nWe've found the list.\n\n45\n00:01:51.440 --> 00:01:55.780\nWe've got everything there, but\nwe haven't actually done the archiving.\n\n46\n00:01:55.780 --> 00:01:58.120\nSo that's what we're going to do next.\n\n47\n00:01:58.120 --> 00:02:01.280\nAnd it's a lot easier\nthan you might think or\n\n48\n00:02:01.280 --> 00:02:02.415\nyou might be going,\n\n49\n00:02:02.415 --> 00:02:03.630\n&gt;&gt; [LAUGH]\n&gt;&gt; This is easy.\n\n50\n00:02:03.630 --> 00:02:04.920\nI don't know.\n\n51\n00:02:04.920 --> 00:02:07.760\nLet's switch views, and then I'll probably\nswitch back because I don't like it.\n\n52\n00:02:08.810 --> 00:02:11.300\nSo here's our script so far,\nthat we can't see the whole thing,\n\n53\n00:02:11.300 --> 00:02:14.510\nI'll slam this over to the side for\nnow, because we're not using it.\n\n54\n00:02:14.510 --> 00:02:17.680\nSo we've got our parameters, and remember,\none of the things we accomplished in\n\n55\n00:02:17.680 --> 00:02:22.570\nthat last issue or\nthat last episode there, was this.\n\n56\n00:02:22.570 --> 00:02:26.700\nWe took what does the bulk of\nthe work in returning the files and\n\n57\n00:02:26.700 --> 00:02:28.370\nwe saved it in a variable.\n\n58\n00:02:28.370 --> 00:02:32.970\nAnd that made it a lot easier for us to\nwork with that and certain properties and\n\n59\n00:02:32.970 --> 00:02:38.700\nmethods, as I go and drag that, associated\nwith those items that come back,\n\n60\n00:02:38.700 --> 00:02:40.936\nrather than have to type\nthis out multiple times.\n\n61\n00:02:40.936 --> 00:02:44.640\nJust store it in a variable and\nnow I can use that in different places.\n\n62\n00:02:44.640 --> 00:02:49.300\nAnd then I called it right there\nto get the actual list of files.\n\n63\n00:02:49.300 --> 00:02:55.280\nAnd because we've done that,\nmoving them is going to be just as easy.\n\n64\n00:02:55.280 --> 00:02:55.940\nRight?\n\n65\n00:02:55.940 --> 00:02:59.690\nSo if I want to move something,\nthe PowerShell command is move dash IL.\n\n66\n00:02:59.690 --> 00:03:01.390\n&gt;&gt; And that variable already exists.\n\n67\n00:03:01.390 --> 00:03:04.050\n&gt;&gt; The variable already exists,\nhow about that?\n\n68\n00:03:04.050 --> 00:03:04.950\n&gt;&gt; I'm picking up, Mike.\n\n69\n00:03:04.950 --> 00:03:06.240\n&gt;&gt; I know.\nSee, these are good shows.\n\n70\n00:03:06.240 --> 00:03:11.260\nAlright, so what we're going to do is,\nwe are going to add a move.\n\n71\n00:03:11.260 --> 00:03:14.820\nSo I'll just go down below where we\noutput the list of files, right,\n\n72\n00:03:14.820 --> 00:03:18.290\nwe said the following number of\nfiles has not been modified.\n\n73\n00:03:18.290 --> 00:03:21.881\nHere's the list, and now let's move them.\n\n74\n00:03:21.881 --> 00:03:29.407\n$files, which represents all\nof the files we've returned,\n\n75\n00:03:29.407 --> 00:03:33.951\npipe this into a move-item command.\n\n76\n00:03:33.951 --> 00:03:37.882\nNormally a move item has a source and\ndestination parameter,\n\n77\n00:03:37.882 --> 00:03:40.610\nI can do dash source and dash destination.\n\n78\n00:03:40.610 --> 00:03:43.670\nAlthough it's not even showing\nup because it's very smart.\n\n79\n00:03:43.670 --> 00:03:47.930\nIt's not giving me the source option\nbecause I'm using the pipeline.\n\n80\n00:03:47.930 --> 00:03:51.010\nSo the source, the file is already\ncoming in that I wanna move,\n\n81\n00:03:51.010 --> 00:03:55.090\nI don't have to tell it where to go and\nget the item.\n\n82\n00:03:55.090 --> 00:04:00.330\nIf I was doing this command as\nthe first part of a pipeline,\n\n83\n00:04:00.330 --> 00:04:05.320\nthen I would need the -source and\ndash this.\n\n84\n00:04:05.320 --> 00:04:06.890\nAlthough, the source is not coming up.\n\n85\n00:04:06.890 --> 00:04:08.120\nThat's interesting.\n\n86\n00:04:08.120 --> 00:04:09.010\nI would need path.\n\n87\n00:04:09.010 --> 00:04:12.900\nIt's not source, it's path to\ntell it where to get the item.\n\n88\n00:04:12.900 --> 00:04:16.160\nAnd then I would need destination,\nto tell it where to send the item.\n\n89\n00:04:16.160 --> 00:04:20.140\nBut because we are doing it in\nthe pipeline, I don't need that.\n\n90\n00:04:20.140 --> 00:04:24.900\nSo we're going to go Files,\npipe that into a move-item,\n\n91\n00:04:24.900 --> 00:04:30.930\nand then we'll say\n-destination is going to be,\n\n92\n00:04:30.930 --> 00:04:35.620\nI think I made a folder\ncalled scripts right yeah?\n\n93\n00:04:35.620 --> 00:04:38.359\nSo we'll say -destination,\nI'm sorry, archives.\n\n94\n00:04:38.359 --> 00:04:41.570\nAnd then C:\\archives.\n\n95\n00:04:41.570 --> 00:04:43.340\nSo I made a folder over there, and\n\n96\n00:04:43.340 --> 00:04:46.700\nthat's where we're going to end up\ndumping everything, and that's it.\n\n97\n00:04:46.700 --> 00:04:48.580\nI mean, it's that easy.\n\n98\n00:04:48.580 --> 00:04:50.550\nBecause we've got all that in a variable,\n\n99\n00:04:50.550 --> 00:04:53.200\nwe're already set up to\ndo what we want it to do.\n\n100\n00:04:53.200 --> 00:04:54.780\nI will save it.\n\n101\n00:04:54.780 --> 00:05:00.370\nWill flip flop views to make this a little\nbit easier to see, and let's try it out.\n\n102\n00:05:00.370 --> 00:05:06.250\nSo we know if I do six, right, I ran that\nearlier before we added the move item,\n\n103\n00:05:06.250 --> 00:05:12.010\nand I got one file, is older than or\nhas been modified since that day.\n\n104\n00:05:12.010 --> 00:05:15.250\nSo we'll run it again now, all right?\n\n105\n00:05:15.250 --> 00:05:16.980\nAnd I get the same information.\n\n106\n00:05:16.980 --> 00:05:19.540\nOne file has not been\nmodified since 11/8/2017.\n\n107\n00:05:19.540 --> 00:05:20.580\nI see the file.\n\n108\n00:05:22.000 --> 00:05:22.820\nI don't know.\nDid I move it?\n\n109\n00:05:22.820 --> 00:05:24.090\n&gt;&gt; I don't know.\n\n110\n00:05:24.090 --> 00:05:25.200\nHow can we check?\n\n111\n00:05:25.200 --> 00:05:27.150\n&gt;&gt; Well, we're going to have to go\nopen up File Explorer, I guess.\n\n112\n00:05:27.150 --> 00:05:31.260\nLet's go dive in here and\nwe'll go over to our C drive.\n\n113\n00:05:31.260 --> 00:05:34.630\nAnd we'll take a look at archive, and\nsure enough, there is the vision,\n\n114\n00:05:34.630 --> 00:05:36.310\nthe one that was modified on the 7th.\n\n115\n00:05:36.310 --> 00:05:42.440\nAnd if I look in the source, the vision\nis gone, it's no longer in here.\n\n116\n00:05:42.440 --> 00:05:44.230\nSo it was definitely moved.\n\n117\n00:05:44.230 --> 00:05:46.572\nThere's a copy, and\nI point that out, right?\n\n118\n00:05:46.572 --> 00:05:49.697\nThere's a copy item as well\nwhich would leave the source and\n\n119\n00:05:49.697 --> 00:05:51.393\nmake a copy in the destination.\n\n120\n00:05:51.393 --> 00:05:53.280\nIn our case we're trying to move it.\n\n121\n00:05:53.280 --> 00:05:55.172\nI don't want it there anymore,\nI'm archiving it.\n\n122\n00:05:55.172 --> 00:05:55.847\n&gt;&gt; We're hanging up our server.\n\n123\n00:05:55.847 --> 00:05:57.214\n&gt;&gt; Exactly.\n\n124\n00:05:57.214 --> 00:05:58.484\nI'm gonna put it back,\n\n125\n00:05:58.484 --> 00:06:01.470\nactually, I'll just use a different date,\nwe'll just leave that there.\n\n126\n00:06:01.470 --> 00:06:04.380\nAnd we'll leave that open so\nwe can come back and check out, right?\n\n127\n00:06:04.380 --> 00:06:06.020\nSo everything is good.\n\n128\n00:06:06.020 --> 00:06:09.850\nWe're done, we can put a,\nwhat do they say?\n\n129\n00:06:09.850 --> 00:06:11.011\nPut a feather in our hat, right?\n\n130\n00:06:11.011 --> 00:06:12.915\n&gt;&gt; [LAUGH] I don't know.\n\n131\n00:06:12.915 --> 00:06:15.584\n&gt;&gt; Call it a day, we're good to go, okay?\n\n132\n00:06:15.584 --> 00:06:19.930\nBut I'll tell you, I'm not happy, and\nI told you, scripts never finish.\n\n133\n00:06:19.930 --> 00:06:21.590\nWe're never done writing them.\n\n134\n00:06:21.590 --> 00:06:27.150\nWe're always tweaking them and modifying\nthem, and here's my problem is really,\n\n135\n00:06:27.150 --> 00:06:30.220\nthe human conversation that we had\nas soon as I ran that was what?\n\n136\n00:06:31.530 --> 00:06:32.830\nWell, did it happen?\n\n137\n00:06:32.830 --> 00:06:33.450\n&gt;&gt; Did it move?\n\n138\n00:06:33.450 --> 00:06:34.690\nYeah, did it move?\n\n139\n00:06:34.690 --> 00:06:35.760\nI don't know.\n\n140\n00:06:35.760 --> 00:06:38.713\nNow I have to go check, and\nif I'm going to go check,\n\n141\n00:06:38.713 --> 00:06:41.640\nI might as well have just cut and\npasted the files.\n\n142\n00:06:41.640 --> 00:06:42.380\n&gt;&gt; In the GUI.\n\n143\n00:06:42.380 --> 00:06:44.420\n&gt;&gt; Yeah I definitely could have done that.\n\n144\n00:06:44.420 --> 00:06:47.530\nSo I would like to get\nsome kind of confirmation.\n\n145\n00:06:47.530 --> 00:06:52.164\nNow, before you guys start sending me lots\nof messages and nitpicking me, we are not\n\n146\n00:06:52.164 --> 00:06:57.920\ngoing to actually do check sums and\nverify that the files are there, right?\n\n147\n00:06:57.920 --> 00:07:00.790\nIf that's going into production or\nif I was doing this for\n\n148\n00:07:00.790 --> 00:07:03.310\nsomething other than the show,I\nwould probably do that.\n\n149\n00:07:03.310 --> 00:07:07.320\nWe're gonna rely on the fact\nthat if the command completed,\n\n150\n00:07:07.320 --> 00:07:09.380\nthen it was most likely successful.\n\n151\n00:07:09.380 --> 00:07:13.260\nI understand that's not technically\na good way to check it,\n\n152\n00:07:13.260 --> 00:07:14.400\nwe really should go and check.\n\n153\n00:07:14.400 --> 00:07:16.230\nAnd we can do test path, right?\n\n154\n00:07:16.230 --> 00:07:17.760\nIt's not that hard to do.\n\n155\n00:07:17.760 --> 00:07:19.790\nBut I'm already into part three and\n\n156\n00:07:19.790 --> 00:07:22.840\nCherokee's like we gotta\nget onto the next topic.\n\n157\n00:07:22.840 --> 00:07:26.590\nWe're going to simply base our results\non the fact that the command completed,\n\n158\n00:07:26.590 --> 00:07:28.880\nbut understand that we\ncan then go back and\n\n159\n00:07:28.880 --> 00:07:32.240\neven further modify this with test path,\nright?\n\n160\n00:07:32.240 --> 00:07:35.990\nAnd I can say, okay, I've already\ngot the name of the file, I've got\n\n161\n00:07:35.990 --> 00:07:40.220\nthe destination, do a test path to see\nif that file exists in that location.\n\n162\n00:07:40.220 --> 00:07:44.088\nCheck sizes, compare them, see if they're\nequal before you, or something or\n\n163\n00:07:44.088 --> 00:07:45.892\ndo a check sum on it before and after.\n\n164\n00:07:45.892 --> 00:07:47.938\nThere's many different\nways we can go about that.\n\n165\n00:07:47.938 --> 00:07:50.234\nFor us I just want to keep it simple here.\n\n166\n00:07:50.234 --> 00:07:57.765\nI want to show you another concept and\nthat is going to be The dialog box, right.\n\n167\n00:07:57.765 --> 00:08:00.416\nCuz I like old school dialog boxes,\nbut we could actually,\n\n168\n00:08:00.416 --> 00:08:01.590\nwait did I do a dialog box.\n\n169\n00:08:01.590 --> 00:08:03.860\n&gt;&gt; I was going to say,\ncould we create a dialog box?\n\n170\n00:08:03.860 --> 00:08:04.620\nThat sounds so fun.\n\n171\n00:08:04.620 --> 00:08:06.610\n&gt;&gt; Yeah we can, but I don't think I did.\n\n172\n00:08:06.610 --> 00:08:08.770\n&gt;&gt; Okay.\n&gt;&gt; Now that I remember this,\n\n173\n00:08:08.770 --> 00:08:11.240\nI started a dialog box and\nthen I decided not to.\n\n174\n00:08:11.240 --> 00:08:12.480\n&gt;&gt; Okay.\n\n175\n00:08:12.480 --> 00:08:13.390\n&gt;&gt; That's so sad.\n\n176\n00:08:13.390 --> 00:08:14.460\n&gt;&gt; That is really sad.\n\n177\n00:08:14.460 --> 00:08:16.040\n&gt;&gt; But\nyou want me to show you a dialog box?\n\n178\n00:08:16.040 --> 00:08:16.570\n&gt;&gt; I do.\n\n179\n00:08:16.570 --> 00:08:19.520\n&gt;&gt; Okay, I'll show you a dialog box,\nwe won't use it in our script but\n\n180\n00:08:19.520 --> 00:08:21.090\nI'll still show you how create one.\n\n181\n00:08:21.090 --> 00:08:22.333\n&gt;&gt; Okay.\n&gt;&gt; Alright,\n\n182\n00:08:22.333 --> 00:08:27.008\nwe're going to do old school command\npromp yes or no type things.\n\n183\n00:08:27.008 --> 00:08:32.980\n&gt;&gt; Okay.\n&gt;&gt; Alright, so, let's do this.\n\n184\n00:08:32.980 --> 00:08:40.610\nWhat I want to do is go back up and let\nme bump this, let's switch this around.\n\n185\n00:08:40.610 --> 00:08:42.540\nI think it's easier to\nwrite when it's like this.\n\n186\n00:08:42.540 --> 00:08:45.350\nSo right now we're checking our\nparameters, we're getting the files,\n\n187\n00:08:45.350 --> 00:08:46.970\nwe're checking our file count.\n\n188\n00:08:46.970 --> 00:08:49.320\nWe're correcting the length issue.\n\n189\n00:08:49.320 --> 00:08:50.650\nBecause if it's not an array.\n\n190\n00:08:50.650 --> 00:08:53.470\nI get the size of the file,\nnot the number of files.\n\n191\n00:08:53.470 --> 00:08:54.540\nSo we fixed that problem.\n\n192\n00:08:54.540 --> 00:08:56.340\nWe've got our little popup message.\n\n193\n00:08:56.340 --> 00:08:58.140\nThen we're returning the list of files.\n\n194\n00:08:58.140 --> 00:09:00.510\nAnd then we're actually moving the files.\n\n195\n00:09:00.510 --> 00:09:03.590\nWhat I'm trying to do is decide\nwhere do I want to put this code.\n\n196\n00:09:03.590 --> 00:09:05.810\nSo I'm looking logically at this.\n\n197\n00:09:05.810 --> 00:09:09.100\nAnd if I want to get\nconfirmation from somebody,\n\n198\n00:09:09.100 --> 00:09:12.020\nyou ran my script,\nit's getting ready to move files.\n\n199\n00:09:12.020 --> 00:09:14.500\nRight before the move-\n&gt;&gt; Prior to the execution.\n\n200\n00:09:14.500 --> 00:09:16.510\n&gt;&gt; That's when I need that confirmation,\nright?\n\n201\n00:09:16.510 --> 00:09:18.660\nBut after I've got the files,\n\n202\n00:09:18.660 --> 00:09:23.040\nI'm showing you what I'm gonna move,\ncuz what am I confirming, right?\n\n203\n00:09:23.040 --> 00:09:24.250\nI'm gonna show you the list of files.\n\n204\n00:09:24.250 --> 00:09:27.060\nI'm gonna say these\nare the ones I'm gonna move.\n\n205\n00:09:27.060 --> 00:09:28.750\nAre you sure?\n\n206\n00:09:28.750 --> 00:09:30.130\nAnd then you can say yes or no, right.\n\n207\n00:09:30.130 --> 00:09:33.170\nAnd decide to cancel at that point or\ncontinue.\n\n208\n00:09:33.170 --> 00:09:38.590\nSo that means, this right here is\nthe location that we wanna work with.\n\n209\n00:09:38.590 --> 00:09:42.270\nAfter we return the list of what\nwe're thinking about moving but\n\n210\n00:09:42.270 --> 00:09:43.870\nbefore we do the moves, right.\n\n211\n00:09:43.870 --> 00:09:50.865\nIn between here is our sweet spot for\nputting in our confirmation.\n\n212\n00:09:50.865 --> 00:09:52.339\n&gt;&gt; Dialogue box.\n\n213\n00:09:52.339 --> 00:09:55.020\n&gt;&gt; Well, confirmation now,\nwe'll do the dialog box in a second.\n\n214\n00:09:55.020 --> 00:09:57.810\nI know, I got your hopes up and\nthen shot you down.\n\n215\n00:09:57.810 --> 00:09:58.752\n&gt;&gt; I know, you have crushed my dream.\n\n216\n00:09:58.752 --> 00:09:59.530\n[LAUGH]\n&gt;&gt; [LAUGH] I'm so sorry.\n\n217\n00:09:59.530 --> 00:10:00.440\nBut we'll fix that.\n\n218\n00:10:00.440 --> 00:10:04.370\nAll right so,\nthe first thing I want to do.\n\n219\n00:10:04.370 --> 00:10:06.640\nWell, we do have time since\nwe started a third part.\n\n220\n00:10:06.640 --> 00:10:08.610\n&gt;&gt; Yeah, this is a part three.\n\n221\n00:10:08.610 --> 00:10:12.823\n&gt;&gt; Okay, [CROSSTALK] I'm going\nto do the long route then.\n\n222\n00:10:12.823 --> 00:10:16.810\nAnd show you the logic that I was\ngoing through as I created this.\n\n223\n00:10:16.810 --> 00:10:19.100\n&gt;&gt; Okay.\n&gt;&gt; All right, so\n\n224\n00:10:19.100 --> 00:10:25.420\nwhat I wanna do is I want to ask\nthem a question, okay, and i want\n\n225\n00:10:25.420 --> 00:10:30.260\nto ask whoever's running the script a\nquestion, are you sure you wanna do this?\n\n226\n00:10:30.260 --> 00:10:31.930\nAnd they're gonna give me a response.\n\n227\n00:10:31.930 --> 00:10:39.290\nAnd I need to take that response, store it\nand then base my actions on that response.\n\n228\n00:10:39.290 --> 00:10:40.580\n&gt;&gt; Sounds like an if.\n\n229\n00:10:40.580 --> 00:10:41.890\n&gt;&gt; It does sound like an if.\n\n230\n00:10:41.890 --> 00:10:43.005\nAnd it sounds like a variable.\n\n231\n00:10:43.005 --> 00:10:44.690\n&gt;&gt; Okay.\n&gt;&gt; Because I'm gonna need somewhere to\n\n232\n00:10:44.690 --> 00:10:46.150\nstore the response.\n\n233\n00:10:46.150 --> 00:10:49.090\nAnd then I'm gonna want to work\nwith that and make a decision.\n\n234\n00:10:49.090 --> 00:10:51.280\nAnd that's where you got the if from.\n\n235\n00:10:51.280 --> 00:10:56.830\nBut for a change of pace, right,\nI'm gonna do a switch instead of an if.\n\n236\n00:10:56.830 --> 00:10:58.170\n&gt;&gt; Okay.\n&gt;&gt; But we know that those do\n\n237\n00:10:58.170 --> 00:10:58.900\nthe same thing.\n\n238\n00:10:58.900 --> 00:10:59.430\n&gt;&gt; That's right.\n\n239\n00:10:59.430 --> 00:11:02.340\n&gt;&gt; One is just maybe a little\nmore readable than the other.\n\n240\n00:11:02.340 --> 00:11:03.180\nIt's personal.\n\n241\n00:11:03.180 --> 00:11:05.080\nI love my if statements.\n\n242\n00:11:05.080 --> 00:11:06.290\nBut if I get too many else if's.\n\n243\n00:11:06.290 --> 00:11:08.350\n&gt;&gt; You're right,\nwe have done some of those so.\n\n244\n00:11:08.350 --> 00:11:08.854\n&gt;&gt; Yeah.\n&gt;&gt; Okay.\n\n245\n00:11:08.854 --> 00:11:10.330\n[LAUGH] &gt;&gt; So\nlet's do something different.\n\n246\n00:11:10.330 --> 00:11:14.000\nAll right so let's start by thinking\nabout I wanna get an answer\n\n247\n00:11:15.460 --> 00:11:16.860\nfrom whoever's running the script.\n\n248\n00:11:16.860 --> 00:11:17.520\nLet me move my mouse.\n\n249\n00:11:17.520 --> 00:11:20.770\nSo we'll say answer equals,\nnow I need to get input.\n\n250\n00:11:20.770 --> 00:11:24.490\nThis is something we haven't seen yet,\nin any of these shows.\n\n251\n00:11:24.490 --> 00:11:27.060\nWe'll go into this in a little more\ndetail when we start getting into more\n\n252\n00:11:27.060 --> 00:11:28.820\nadministration side of things.\n\n253\n00:11:28.820 --> 00:11:32.820\nBut I'm going to do what's\ncalled a Read-Host, all right?\n\n254\n00:11:32.820 --> 00:11:34.965\nNow, let's just take a step back for\na second.\n\n255\n00:11:34.965 --> 00:11:37.490\nRead-Host is gonna do just that.\n\n256\n00:11:37.490 --> 00:11:39.720\nIt is going to accept input.\n\n257\n00:11:39.720 --> 00:11:41.510\nIt's gonna read from the host.\n\n258\n00:11:41.510 --> 00:11:47.220\nRemember, the host is the program that\nyou're using to interact with PowerShell.\n\n259\n00:11:47.220 --> 00:11:50.260\nWhether that's the ISE,\nwhether that's the console,\n\n260\n00:11:50.260 --> 00:11:52.770\nwhether that's the Active\nDirectory Administrative Center.\n\n261\n00:11:52.770 --> 00:11:53.760\nThat's your host.\n\n262\n00:11:53.760 --> 00:11:56.340\nAnd so\nread host says hey now we're taking input.\n\n263\n00:11:56.340 --> 00:11:58.810\nNormally we are writing to the host.\n\n264\n00:11:58.810 --> 00:12:03.430\nLike when we printed this,\nthis is actually a write host.\n\n265\n00:12:03.430 --> 00:12:07.670\nWe would in the old days have to\nput write-host in front of this and\n\n266\n00:12:07.670 --> 00:12:09.950\nthen put our braces around there and\nset it up like that.\n\n267\n00:12:09.950 --> 00:12:11.030\nWe don't have to do that anymore.\n\n268\n00:12:11.030 --> 00:12:13.070\nPowerShell's very good about just.\n\n269\n00:12:13.070 --> 00:12:17.670\nPrinting that out to screen but this is a\nwrite host so we're gonna do the opposite.\n\n270\n00:12:17.670 --> 00:12:19.860\nWe're gonna instead of\nspit out to the screen,\n\n271\n00:12:19.860 --> 00:12:22.640\nwe're gonna take a put from the screen,\nthat's read host.\n\n272\n00:12:23.900 --> 00:12:25.155\nAnd there's really no more than that.\n\n273\n00:12:25.155 --> 00:12:29.070\nRead-host just opens up the terminal\nthere an you start typing and\n\n274\n00:12:29.070 --> 00:12:33.340\nwhatever you type and\nthen you hit enter, it sends it back.\n\n275\n00:12:33.340 --> 00:12:35.250\nWe can also put a little message in here.\n\n276\n00:12:35.250 --> 00:12:37.615\nSo I'm gonna do archive\n\n277\n00:12:39.902 --> 00:12:44.650\nFiles, Right, could be more than file.\n\n278\n00:12:44.650 --> 00:12:45.890\nI don't know.\n\n279\n00:12:45.890 --> 00:12:49.940\nAnd let's put a question mark\nin there to make it pretty.\n\n280\n00:12:49.940 --> 00:12:54.740\nAnd then I'm telling them I want a yes or\nno for the answer.\n\n281\n00:12:54.740 --> 00:12:57.820\nSo that's just a string right\nthat's gonna be printed out.\n\n282\n00:12:57.820 --> 00:12:59.370\nAnd then it's gonna be prompting that or\n\n283\n00:12:59.370 --> 00:13:02.710\nit's gonna be sitting there\nblinking at them waiting for input.\n\n284\n00:13:02.710 --> 00:13:05.740\nNow I'll go ahead and\ntell you I'm gonna want a blank line\n\n285\n00:13:05.740 --> 00:13:09.240\nbetween the resulting files list,\nand this question.\n\n286\n00:13:09.240 --> 00:13:10.590\nSo that it sticks out a little bit.\n\n287\n00:13:10.590 --> 00:13:14.910\nWe learned about that,\nthat's the Back tick N for\n\n288\n00:13:14.910 --> 00:13:17.600\nthe newline character all right?\n\n289\n00:13:17.600 --> 00:13:21.760\nSo now I've got somewhere\nto store the response, and\n\n290\n00:13:22.790 --> 00:13:26.890\na way to get the response, all right?\n\n291\n00:13:26.890 --> 00:13:32.346\nSo now, let's see what we're\ngoing to do with [SOUND]\n\n292\n00:13:32.346 --> 00:13:37.802\nI'm trying to think of a good\nway to lead this one in.\n\n293\n00:13:37.802 --> 00:13:41.340\nSo the next thing I've gotta\nthink about is what's going on.\n\n294\n00:13:41.340 --> 00:13:43.200\nSo my computer's sitting here,\nor the prompt,\n\n295\n00:13:43.200 --> 00:13:47.390\nit's sitting there blinking waiting for\nthem to type something in.\n\n296\n00:13:47.390 --> 00:13:50.790\nAnd if they type is yes, okay,\nI'll store that and accept that answer.\n\n297\n00:13:50.790 --> 00:13:53.830\nIf they type in no,\nI'll store that and accept the answer.\n\n298\n00:13:53.830 --> 00:13:56.000\nWhat if they type in Bob, right?\n\n299\n00:13:56.000 --> 00:13:57.760\nOr what if they type in 24?\n\n300\n00:13:57.760 --> 00:13:59.798\nThat's really not gonna help me, so\n\n301\n00:13:59.798 --> 00:14:05.490\nI've gotta think about a way that I can,\nForce them to say yes or no, right?\n\n302\n00:14:05.490 --> 00:14:11.360\n&gt;&gt; Specify, we do that a lot with our\nintegers, so we're calling it out.\n\n303\n00:14:11.360 --> 00:14:12.000\n&gt;&gt; Yep.\n\n304\n00:14:12.000 --> 00:14:13.720\n&gt;&gt; I don't know, you probably know.\n\n305\n00:14:13.720 --> 00:14:17.990\n&gt;&gt; Yeah, there's a couple different\nway I could do this as well.\n\n306\n00:14:17.990 --> 00:14:22.050\nWe could get into regular expressions and\nthat would probably be the best way to go.\n\n307\n00:14:22.050 --> 00:14:24.645\nMost of the prompts you've\nworked with you've seen.\n\n308\n00:14:24.645 --> 00:14:29.000\nLike when you do updates in power shell or\nanything like if you ever\n\n309\n00:14:29.000 --> 00:14:33.527\ninstalled the help in PowerShell,\nyou get the y for yes, a for all.\n\n310\n00:14:33.527 --> 00:14:34.680\n&gt;&gt; Yes to all, yeah.\n\n311\n00:14:34.680 --> 00:14:38.975\nBut you can type yes or\nyou can type y, either one will work.\n\n312\n00:14:38.975 --> 00:14:42.055\nWell they're using regular\nexpressions in the background to\n\n313\n00:14:42.055 --> 00:14:45.215\ntake a look at what you're typing and\nmake sure it matches the patterns.\n\n314\n00:14:45.215 --> 00:14:46.945\nAnd I'm not going to do that here,\n\n315\n00:14:46.945 --> 00:14:50.980\nit's going to a little too much more,\ntoo much to go into right now.\n\n316\n00:14:50.980 --> 00:14:53.212\nSo I'm going to simplify it a little bit.\n\n317\n00:14:53.212 --> 00:14:58.060\nI'm gonna use another technique that's not\nas robust, but it'll get the job done.\n\n318\n00:14:58.060 --> 00:15:01.280\nAnd remember I said sometimes\nwriting scripts is down and\n\n319\n00:15:01.280 --> 00:15:03.260\ndirty, get the job done.\n\n320\n00:15:03.260 --> 00:15:05.820\nSo I'll explain it as soon\nas I type it out here.\n\n321\n00:15:05.820 --> 00:15:10.410\nAnd I've got while, yes, no, all right?\n\n322\n00:15:10.410 --> 00:15:15.010\nAnd then dash not contains.\n\n323\n00:15:16.390 --> 00:15:19.340\nAnd I don't want the case\nsensitive version, move.\n\n324\n00:15:19.340 --> 00:15:24.731\nNot contains dollar sign\nanswer open parentheses and\n\n325\n00:15:24.731 --> 00:15:31.200\nthen I'm going to put in my open brace and\nmy closed brace.\n\n326\n00:15:31.200 --> 00:15:37.379\nAnd in the code inside there,\ndollar sign answer is going to equal,\n\n327\n00:15:40.552 --> 00:15:42.997\nOops, if I can type.\n\n328\n00:15:42.997 --> 00:15:50.197\nRead host, Tell you what, my brain is on,\nI don't know what it's doing right now.\n\n329\n00:15:50.197 --> 00:15:56.775\nAnd then Yes or No, end my quote.\n\n330\n00:15:56.775 --> 00:16:01.560\nAll right, so\nnow let's decipher what I just did.\n\n331\n00:16:01.560 --> 00:16:04.910\nSo we already have a place to store their\nanswer and we're gonna prompt them for\n\n332\n00:16:04.910 --> 00:16:07.093\nan answer, or\nwhoever's running the script, and\n\n333\n00:16:07.093 --> 00:16:09.260\nwe're gonna store it in this variable.\n\n334\n00:16:09.260 --> 00:16:10.610\nAnd then I'm saying while.\n\n335\n00:16:10.610 --> 00:16:12.700\nRemember our while statements, right?\n\n336\n00:16:12.700 --> 00:16:13.848\nWe go back to our construct.\n\n337\n00:16:13.848 --> 00:16:15.355\n&gt;&gt; I don't know it's been awhile, Mark.\n\n338\n00:16:15.355 --> 00:16:17.582\n&gt;&gt; [LAUGH] Good one.\n\n339\n00:16:17.582 --> 00:16:18.700\nI like that.\n\n340\n00:16:18.700 --> 00:16:23.490\nAll right, while statements\noperate while a condition is true.\n\n341\n00:16:23.490 --> 00:16:28.270\nSo while something is true, do this.\n\n342\n00:16:28.270 --> 00:16:31.340\nAs soon as that becomes false\nit's the end of the while.\n\n343\n00:16:31.340 --> 00:16:36.550\nSo what I'm saying is while yes or\nno not contains answer.\n\n344\n00:16:36.550 --> 00:16:41.090\nSo here is a list of possible\nvalues that I wanna look for.\n\n345\n00:16:41.090 --> 00:16:44.960\nAnd I'm saying go get what they put,\nwhatever's in that variable, and\n\n346\n00:16:44.960 --> 00:16:50.250\nif that is not in this list,\nthen it's true, right?\n\n347\n00:16:50.250 --> 00:16:55.350\nIf they put Bob, yes or no,\nnot contains Bob, is that true?\n\n348\n00:16:55.350 --> 00:16:57.290\nYes or no doesn't contain Bob, right?\n\n349\n00:16:57.290 --> 00:16:58.550\nSo that would be true.\n\n350\n00:16:58.550 --> 00:17:01.570\nSo my while loop would still continue.\n\n351\n00:17:01.570 --> 00:17:05.575\nAnd if the while loop continues,\nit's gonna prompt them again through this.\n\n352\n00:17:05.575 --> 00:17:10.580\nAnd we should really make this, let's\nmake it pretty and make it look the same.\n\n353\n00:17:10.580 --> 00:17:12.424\nI don't need a new line for that.\n\n354\n00:17:12.424 --> 00:17:13.000\nLet's do this.\n\n355\n00:17:13.000 --> 00:17:15.620\nAnd it'll make more sense,\n\n356\n00:17:15.620 --> 00:17:19.290\nprobably, once I execute it and\nthen we can come back and look at it.\n\n357\n00:17:19.290 --> 00:17:22.760\nBut just understand, what I'm saying\nis I'm looking for yes or no.\n\n358\n00:17:22.760 --> 00:17:26.048\nIf you put anything else in that box\nI'm going to make you do it again.\n\n359\n00:17:26.048 --> 00:17:27.960\nI'm just gonna say no, yes or no?\n\n360\n00:17:27.960 --> 00:17:29.491\nYou put Bob uh-uh, yes or no?\n\n361\n00:17:29.491 --> 00:17:30.670\nYou put three uh-uh, yes or no?\n\n362\n00:17:30.670 --> 00:17:35.520\nYou put yes, bing bing bing, all of\n\n363\n00:17:35.520 --> 00:17:40.590\na sudden my condition is false because yes\nis contained in there and it moves on.\n\n364\n00:17:40.590 --> 00:17:41.556\nDo you see what I'm saying?\n\n365\n00:17:41.556 --> 00:17:43.833\nYou can put whatever you want,\nbut if it isn't yes or no,\n\n366\n00:17:43.833 --> 00:17:45.075\nI'm just gonna ask you again.\n\n367\n00:17:45.075 --> 00:17:46.195\n[CROSSTALK]\n&gt;&gt; Yeah.\n\n368\n00:17:46.195 --> 00:17:47.560\n&gt;&gt; Yep.\nExactly.\n\n369\n00:17:47.560 --> 00:17:48.500\nThat's my while loop.\n\n370\n00:17:48.500 --> 00:17:51.335\nDo this while this condition is true,\nall right?\n\n371\n00:17:51.335 --> 00:17:58.521\nSo it's a simple, easy, dirty little way\nto only accept certain values, right?\n\n372\n00:17:58.521 --> 00:18:01.238\nI can make this list as\nbig as I wanted to and\n\n373\n00:18:01.238 --> 00:18:05.915\nI could say that only these values\nare going to be accepted as an answer.\n\n374\n00:18:05.915 --> 00:18:10.833\nAll right, so we've got our storage spot\nfor the response, we've got a while loop\n\n375\n00:18:10.833 --> 00:18:14.640\nto get the right response then we\nhave to deal with the response.\n\n376\n00:18:14.640 --> 00:18:16.230\nWhat are we gonna do?\n\n377\n00:18:16.230 --> 00:18:18.446\nWell, in this case we're\ngonna use a switch.\n\n378\n00:18:18.446 --> 00:18:22.549\nRemember, I could have used a for loop for\nthis, or I'm sorry, an if statement to\n\n379\n00:18:22.549 --> 00:18:27.260\naccomplish this, but we haven't done\na switch yet, so that's what I wanna do.\n\n380\n00:18:27.260 --> 00:18:29.650\nSo, switch answer, right?\n\n381\n00:18:29.650 --> 00:18:34.200\nAnd then open your brace and\nthen close your brace for\n\n382\n00:18:34.200 --> 00:18:37.620\nthe entire switch statement,\nif you guys remember the syntax for this.\n\n383\n00:18:37.620 --> 00:18:40.660\nSo we're gonna be\ncomparing whatever this is.\n\n384\n00:18:40.660 --> 00:18:45.130\nI'm gonna list conditions and actions,\nas many as I want below that.\n\n385\n00:18:45.130 --> 00:18:49.910\nCondition and then open brace response,\n\n386\n00:18:49.910 --> 00:18:52.830\nclose brace or action, if you wanna\nsay it or something like that.\n\n387\n00:18:52.830 --> 00:18:57.060\nSo let's make sure I get my syntax right.\n\n388\n00:18:57.060 --> 00:19:00.840\nWe are gonna say, if they said yes and\n\n389\n00:19:00.840 --> 00:19:04.520\nremember PowerShell is case\ninsensitive by default.\n\n390\n00:19:04.520 --> 00:19:07.920\nSo they could put capital Y,\nthat would be fine for yes.\n\n391\n00:19:07.920 --> 00:19:09.900\nI didn't use the C, right?\n\n392\n00:19:09.900 --> 00:19:14.075\nOr the IC for case sensitive,\nI for case insensitive.\n\n393\n00:19:14.075 --> 00:19:18.886\n&gt;&gt; Wouldn't we need to also add an option,\nor I guess what I'm\n\n394\n00:19:18.886 --> 00:19:23.281\nsaying is if they just typed in a Y, like-\n&gt;&gt; We definitely could.\n\n395\n00:19:23.281 --> 00:19:24.015\n&gt;&gt; Okay.\n\n396\n00:19:24.015 --> 00:19:26.653\n&gt;&gt; Or not going to cuz that's when I'd\nhave to start getting into regular\n\n397\n00:19:26.653 --> 00:19:27.244\nexpressions.\n\n398\n00:19:27.244 --> 00:19:28.600\n&gt;&gt; Okay.\n&gt;&gt; Or we could just make.\n\n399\n00:19:28.600 --> 00:19:29.204\nI could add.\n\n400\n00:19:29.204 --> 00:19:30.790\nActually we could do that.\n\n401\n00:19:30.790 --> 00:19:31.410\nYeah, let's do that.\n\n402\n00:19:31.410 --> 00:19:32.180\nWe'll try it.\n\n403\n00:19:32.180 --> 00:19:34.180\nWe'll try it.\nI think we can get it done.\n\n404\n00:19:34.180 --> 00:19:37.778\nAll right, so yes if they say yes,\nbasically, okay now we gotta go back and\n\n405\n00:19:37.778 --> 00:19:38.708\nthink about wait.\n\n406\n00:19:38.708 --> 00:19:41.183\nWhere are we in the overall\nscheme of things,\n\n407\n00:19:41.183 --> 00:19:44.389\nbecause we've gone down this\nrabbit hole of while loops.\n\n408\n00:19:44.389 --> 00:19:45.734\n&gt;&gt; I know, I should just stop talking.\n\n409\n00:19:45.734 --> 00:19:49.960\n&gt;&gt; Yeah, so let's back up for a second and\nno no no, you've got great questions.\n\n410\n00:19:49.960 --> 00:19:52.610\nI'm saying,\nI've led us like all kinds of astray.\n\n411\n00:19:52.610 --> 00:19:57.600\nSo we've presented them with a list of\nfiles that are older than a certain date\n\n412\n00:19:57.600 --> 00:20:01.645\nfrom a a specific directory, and we're\nasking them, do you want to archive this.\n\n413\n00:20:01.645 --> 00:20:06.470\nThat's basically the whole are you sure,\nthat Microsoft loves to do.\n\n414\n00:20:06.470 --> 00:20:10.040\nIf they say yes,\nthen we're gonna actually move the files.\n\n415\n00:20:10.040 --> 00:20:14.570\nWe've already got a command down here that\nmoves the files, without prompting them.\n\n416\n00:20:14.570 --> 00:20:20.590\nBut we're gonna just take that and\nput that right up here, right?\n\n417\n00:20:20.590 --> 00:20:24.090\nSo now instead of just running,\nif they say yes,\n\n418\n00:20:24.090 --> 00:20:28.080\nwe will take the files and\nmove them to archive, right?\n\n419\n00:20:28.080 --> 00:20:32.130\nBut what if they say, no, right?\n\n420\n00:20:33.480 --> 00:20:38.631\nThen we could do something like,\nI don't know, why waste my time then?\n\n421\n00:20:38.631 --> 00:20:40.538\nNo, that wouldn't be\nvery nice of us to say.\n\n422\n00:20:40.538 --> 00:20:46.085\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's do something like operation.\n\n423\n00:20:46.085 --> 00:20:48.512\n&gt;&gt; And this is why they don't give\nyou the sharp scissors, right?\n\n424\n00:20:48.512 --> 00:20:51.175\n[LAUGH]\n&gt;&gt; Yeah, completed, right?\n\n425\n00:20:51.175 --> 00:20:54.530\nAnd we'll end our string and we'll end\nour thing and we'll probably wanna,\n\n426\n00:20:54.530 --> 00:20:57.470\nwell we'll check it and see,\nI might need a new line for that as well.\n\n427\n00:20:57.470 --> 00:21:01.340\nAnd now that I've done that,\nit makes me think Wait a second,\n\n428\n00:21:01.340 --> 00:21:03.350\nif it did succeed I didn't\ngive them any pretty message.\n\n429\n00:21:03.350 --> 00:21:05.249\nI moved the files, right?\n\n430\n00:21:05.249 --> 00:21:06.990\nBut it didn't tell them I was done.\n\n431\n00:21:06.990 --> 00:21:08.940\nThey could be,\nthey might be sitting there going.\n\n432\n00:21:08.940 --> 00:21:11.220\n&gt;&gt; Right like we were talking\nabout just wasting our time.\n\n433\n00:21:11.220 --> 00:21:14.640\n&gt;&gt; Is it ever gonna be done copying\nwhat or moving, what is it doing?\n\n434\n00:21:14.640 --> 00:21:18.257\nSo let's add a second statement to my yes.\n\n435\n00:21:18.257 --> 00:21:23.258\nAnd let's do something like well,\nsince we say the operation.\n\n436\n00:21:23.258 --> 00:21:26.630\nYou know what,\nI'm kind of silly down here.\n\n437\n00:21:26.630 --> 00:21:29.913\nThis should have been operation cancelled,\nright, if they say no.\n\n438\n00:21:29.913 --> 00:21:30.729\n&gt;&gt; No, okay, all right.\n\n439\n00:21:30.729 --> 00:21:31.870\n&gt;&gt; Yeah, here.\n\n440\n00:21:31.870 --> 00:21:32.990\n&gt;&gt; Geez.\n\n441\n00:21:32.990 --> 00:21:34.190\n&gt;&gt; Operation.\n\n442\n00:21:34.190 --> 00:21:35.190\n&gt;&gt; Complete.\n\n443\n00:21:35.190 --> 00:21:39.706\n&gt;&gt; Completed and we'll put our\nending quote there, all right.\n\n444\n00:21:39.706 --> 00:21:42.670\nSo now we're getting somewhere.\n\n445\n00:21:42.670 --> 00:21:44.650\nI'm liking this.\n\n446\n00:21:44.650 --> 00:21:49.350\nI think I have all of my\nclosing statements there.\n\n447\n00:21:49.350 --> 00:21:51.373\nI'm liking it, it's looking good.\n\n448\n00:21:51.373 --> 00:21:52.310\nShall we test it?\n\n449\n00:21:52.310 --> 00:21:53.050\n&gt;&gt; Yeah.\n\n450\n00:21:53.050 --> 00:21:56.278\n&gt;&gt; And see what it's going to do,\nlet's save it,\n\n451\n00:21:56.278 --> 00:22:01.706\nlet's switch our view back around and\ntake a look at our script now, all right?\n\n452\n00:22:01.706 --> 00:22:05.437\nNow we've already moved this file\nwith a previous run of the script.\n\n453\n00:22:05.437 --> 00:22:10.351\nSo this time we'll say,\nwell what if they're older than five days?\n\n454\n00:22:10.351 --> 00:22:14.347\nAnd I get the following six files\nhave not been modified since and\n\n455\n00:22:14.347 --> 00:22:16.380\nthat's five days ago.\n\n456\n00:22:16.380 --> 00:22:22.990\nThere are my six files listed there and\nthen I get this, archive files yes or no?\n\n457\n00:22:22.990 --> 00:22:23.770\n&gt;&gt; Ooo.\n\n458\n00:22:23.770 --> 00:22:24.830\n&gt;&gt; Fancy, right?\n\n459\n00:22:24.830 --> 00:22:25.955\nThis is your last chance.\n\n460\n00:22:25.955 --> 00:22:28.448\nAre you sure you wanna move\nthose files kinda thing?\n\n461\n00:22:28.448 --> 00:22:32.100\nIf I put Bob it says,\nwell it's not what I asked you,\n\n462\n00:22:32.100 --> 00:22:37.344\nI didn't ask you your name, I said do\nyou wanna archive the files yes or no.\n\n463\n00:22:37.344 --> 00:22:38.774\nSo I put 34.\n\n464\n00:22:38.774 --> 00:22:40.460\n&gt;&gt; [LAUGH]\n&gt;&gt; And it says, no,\n\n465\n00:22:40.460 --> 00:22:43.170\nno, that's not a yes or no.\n\n466\n00:22:43.170 --> 00:22:47.899\nSo I put no and the operation canceled,\nno files are moving.\n\n467\n00:22:47.899 --> 00:22:50.294\nAnd if we were to go to look\nat the destination archive,\n\n468\n00:22:50.294 --> 00:22:51.867\nno files have actually been moved.\n\n469\n00:22:51.867 --> 00:22:52.910\n&gt;&gt; Operation canceled.\n\n470\n00:22:52.910 --> 00:22:55.432\n&gt;&gt; Yep, so\nthe operation was indeed canceled.\n\n471\n00:22:55.432 --> 00:22:57.264\nIt didn't lie to you and\nmove them anyway, right?\n\n472\n00:22:57.264 --> 00:22:59.803\nCuz we definitely, if we would have\nleft that last line in our code,\n\n473\n00:22:59.803 --> 00:23:01.376\nit would have moved them anyway, right?\n\n474\n00:23:01.376 --> 00:23:03.876\n&gt;&gt; Until April fools and\nthen yeah then there you go.\n\n475\n00:23:03.876 --> 00:23:08.180\n[LAUGH]\n&gt;&gt; All right, now let's try it again and\n\n476\n00:23:08.180 --> 00:23:10.870\nthis time, we'll say yes.\n\n477\n00:23:12.890 --> 00:23:15.280\nNow we get operation completed.\n\n478\n00:23:15.280 --> 00:23:21.910\nAnd if we go and look, there's those\nsix files that should be archived.\n\n479\n00:23:21.910 --> 00:23:23.059\nHow about that?\n\n480\n00:23:23.059 --> 00:23:24.850\nI mean, that's a pretty cool\nlittle script, I think.\n\n481\n00:23:24.850 --> 00:23:28.434\n&gt;&gt; I know, now if I can just take you\neverywhere whenever I need this to\n\n482\n00:23:28.434 --> 00:23:29.460\nactually happen.\n\n483\n00:23:29.460 --> 00:23:32.270\n&gt;&gt; Well, you just have to watch\nthese shows a couple more times and\n\n484\n00:23:32.270 --> 00:23:34.660\nyou will have it down Pat, I guarantee.\n\n485\n00:23:34.660 --> 00:23:36.886\nNow, Cherokee was asking\ncould we do a Y or\n\n486\n00:23:36.886 --> 00:23:40.079\nan N and we could definitely\njust add more options, right?\n\n487\n00:23:40.079 --> 00:23:46.828\nWe could come up here to our list and\nsay sure, I'll accept a Y, right?\n\n488\n00:23:46.828 --> 00:23:52.027\nAnd I'll also accept an N.\n\n489\n00:23:52.027 --> 00:23:55.752\nSo now, it won't keep saying,\nno, no, Archive files, yes or no?\n\n490\n00:23:55.752 --> 00:24:01.196\nAny one of these Would make this\ncondition false and skip out of our loop.\n\n491\n00:24:01.196 --> 00:24:02.760\nOkay so that's good.\n\n492\n00:24:02.760 --> 00:24:06.840\nBut, now there could be a y\nas one of my answers and\n\n493\n00:24:06.840 --> 00:24:09.320\nI don't have any way to deal with it.\n\n494\n00:24:09.320 --> 00:24:14.291\nSo then we're just gonna do this,\ntake that condition,\n\n495\n00:24:14.291 --> 00:24:17.100\nwe're gonna paste it in there.\n\n496\n00:24:18.620 --> 00:24:19.155\n&gt;&gt; Put a y?\n\n497\n00:24:19.155 --> 00:24:20.147\n&gt;&gt; Then put a y in there.\n\n498\n00:24:20.147 --> 00:24:21.381\n&gt;&gt; Nice.\n&gt;&gt; Sure why not?\n\n499\n00:24:21.381 --> 00:24:26.073\nAnd then we'll take this one,\nand we'll put it in here, and\n\n500\n00:24:26.073 --> 00:24:32.500\nwe'll change that to a n, and we'll save\nthat, and now let's see if that works.\n\n501\n00:24:32.500 --> 00:24:33.205\nIt might or might not.\n\n502\n00:24:33.205 --> 00:24:33.814\nWe just tried it.\n\n503\n00:24:33.814 --> 00:24:34.376\nWhat the heck?\n\n504\n00:24:34.376 --> 00:24:35.247\n&gt;&gt; Okay.\n&gt;&gt; All right, so\n\n505\n00:24:35.247 --> 00:24:36.892\nnow we're gonna have to\njump up to like four days,\n\n506\n00:24:36.892 --> 00:24:38.470\ncuz I've already moved\nall the five day files.\n\n507\n00:24:38.470 --> 00:24:39.223\n&gt;&gt; I know we're running\nout of files [LAUGH].\n\n508\n00:24:39.223 --> 00:24:42.869\n&gt;&gt; Yeah, [LAUGH] they're all\ngoing to be gone in a minute,\n\n509\n00:24:42.869 --> 00:24:47.172\nand what did I say we could now say n for\nno, operation canceled.\n\n510\n00:24:47.172 --> 00:24:48.808\n&gt;&gt; Sweet.\n&gt;&gt; If I say y for yes,\n\n511\n00:24:48.808 --> 00:24:54.217\noperation completed, and\nsure enough our list of files has grown.\n\n512\n00:24:54.217 --> 00:24:59.162\nSo you see how easy it was to add\nalternates options to our script there\n\n513\n00:24:59.162 --> 00:25:03.439\njust simply adding more\npossibilities within our switch.\n\n514\n00:25:03.439 --> 00:25:06.457\n&gt;&gt; I did have one more\nitem on my wish list.\n\n515\n00:25:06.457 --> 00:25:07.173\n&gt;&gt; Yeah?\n&gt;&gt; Remember?\n\n516\n00:25:07.173 --> 00:25:08.386\nThe dialogue box.\n\n517\n00:25:08.386 --> 00:25:09.023\n&gt;&gt; The dialogue box.\n\n518\n00:25:09.023 --> 00:25:10.183\n&gt;&gt; Do we have time for that?\n&gt;&gt; Let's do the dialogue box.\n\n519\n00:25:10.183 --> 00:25:11.022\nAbsolutely.\n&gt;&gt; Okay.\n\n520\n00:25:11.022 --> 00:25:15.856\n&gt;&gt; So what we saw here was a, not really\na dialogue box, but it is a confirmation,\n\n521\n00:25:15.856 --> 00:25:16.380\nright?\n\n522\n00:25:16.380 --> 00:25:17.883\n&gt;&gt; It works.\n\n523\n00:25:17.883 --> 00:25:21.281\n&gt;&gt; And it definitely works,\nit accepts input.\n\n524\n00:25:21.281 --> 00:25:23.500\nI was actually thinking about\na way that we could do,\n\n525\n00:25:23.500 --> 00:25:26.135\nI don't know why I've always\nbeen fascinated with this.\n\n526\n00:25:26.135 --> 00:25:26.798\n&gt;&gt; No.\n[LAUGH]\n\n527\n00:25:26.798 --> 00:25:28.357\n&gt;&gt; But like progress bars in the command\n\n528\n00:25:28.357 --> 00:25:29.433\nline are really cool.\n\n529\n00:25:29.433 --> 00:25:30.129\n&gt;&gt; Yeah, yeah.\n\n530\n00:25:30.129 --> 00:25:33.410\n&gt;&gt; And you remember the spinning,\nit looks like a pinwheel?\n\n531\n00:25:33.410 --> 00:25:34.321\n&gt;&gt; Yes.\n&gt;&gt; It's basically a backslash,\n\n532\n00:25:34.321 --> 00:25:34.995\na forward slash, a pipe,\nand a double dash.\n\n533\n00:25:34.995 --> 00:25:38.770\n&gt;&gt; You gotta be like an ASCI art whiz.\n\n534\n00:25:38.770 --> 00:25:42.900\n&gt;&gt; Yes, well I was thinking,\nif you just printed a backslash, and\n\n535\n00:25:42.900 --> 00:25:45.515\nthen didn't do a new line, no new line.\n\n536\n00:25:45.515 --> 00:25:47.958\nPrinted a pipe, no new line,\nprinted a forward slash,-\n\n537\n00:25:47.958 --> 00:25:48.571\n&gt;&gt; Ooh, look at you.\n\n538\n00:25:48.571 --> 00:25:49.967\n&gt;&gt; And think that's how they do that.\n\n539\n00:25:49.967 --> 00:25:54.683\nWe could make a little loop that said,\nwhile file is not copied, or\n\n540\n00:25:54.683 --> 00:26:00.010\ndo until files has completed copy, and\nin that do we could have that going.\n\n541\n00:26:00.010 --> 00:26:01.958\n&gt;&gt; That sounds like a part four thing.\n\n542\n00:26:01.958 --> 00:26:03.691\n[LAUGH]\n&gt;&gt; But that was like midnight last night,\n\n543\n00:26:03.691 --> 00:26:05.181\nand I was like-\n&gt;&gt; I know, I'm like, [LAUGH]-\n\n544\n00:26:05.181 --> 00:26:06.168\n&gt;&gt; That's not gonna make it to the show.\n\n545\n00:26:06.168 --> 00:26:06.690\n&gt;&gt; Okay.\n&gt;&gt; But\n\n546\n00:26:06.690 --> 00:26:09.230\nlet's do the dialogue,\nI wanna say I saved this somewhere.\n\n547\n00:26:09.230 --> 00:26:13.560\nThis I actually borrowed, and\nit was almost what I used for the show.\n\n548\n00:26:13.560 --> 00:26:14.680\nGreat sites out there,\n\n549\n00:26:14.680 --> 00:26:18.630\nMicrosoft of course,\nplethora of information on PowerShell.\n\n550\n00:26:18.630 --> 00:26:21.330\nThe Scripting Guy, I have his books.\n\n551\n00:26:21.330 --> 00:26:22.824\nHe actually lives here in Gainesville now.\n\n552\n00:26:22.824 --> 00:26:23.410\nI believe he moved here.\n\n553\n00:26:23.410 --> 00:26:24.320\n&gt;&gt; Yeah, I think I told you about that.\n\n554\n00:26:24.320 --> 00:26:25.360\n&gt;&gt; Yes, it was you who told me.\n\n555\n00:26:25.360 --> 00:26:28.830\nHe used to live up in North Carolina,\nI think he lives here now.\n\n556\n00:26:28.830 --> 00:26:30.705\nFantastic, brilliant guy.\n\n557\n00:26:30.705 --> 00:26:33.139\nLove it, read his stuff since\nthe beginning of the script guys.\n\n558\n00:26:33.139 --> 00:26:33.853\n&gt;&gt; Edward Wilson?\n\n559\n00:26:33.853 --> 00:26:35.416\n&gt;&gt; Yes, Ed Wilson.\n\n560\n00:26:35.416 --> 00:26:36.510\n&gt;&gt; Yep.\n\n561\n00:26:36.510 --> 00:26:40.030\n&gt;&gt; And his wife, the scripting wife,\nI can't remember her name, I apologize.\n\n562\n00:26:40.030 --> 00:26:44.420\nBut anyway, their site has\nalways been a great resource for\n\n563\n00:26:44.420 --> 00:26:46.410\nme for working with PowerShell.\n\n564\n00:26:46.410 --> 00:26:52.060\nIf you guys haven't checked it out,\nyou really should go check it out.\n\n565\n00:26:52.060 --> 00:26:55.370\nAnyway, back in the day, I don't know if\nthey still do this anymore, they would\n\n566\n00:26:55.370 --> 00:26:59.750\nhave tip of the week, and they just came\nup with these cool little snippets of code\n\n567\n00:26:59.750 --> 00:27:05.390\nand stuff that they would publish, and\nthis one was from PowerShell one, I think.\n\n568\n00:27:05.390 --> 00:27:07.131\nWhere did I put it here?\n\n569\n00:27:07.131 --> 00:27:07.890\nI think it's this temp.\n\n570\n00:27:09.340 --> 00:27:14.302\nYeah, let's see here, all right.\n\n571\n00:27:14.302 --> 00:27:16.360\nNope that is the one that we just used.\n\n572\n00:27:16.360 --> 00:27:17.200\nWhere did I put?\n\n573\n00:27:23.396 --> 00:27:26.280\nI might have moved it by now into,\nI'm looking in the wrong one.\n\n574\n00:27:26.280 --> 00:27:28.367\n&gt;&gt; Nobody would know, but you [LAUGH].\n\n575\n00:27:28.367 --> 00:27:30.900\n&gt;&gt; There it is, comp one dialog box.\n\n576\n00:27:30.900 --> 00:27:33.330\nThis guy right here, so\nlet's open that one up.\n\n577\n00:27:34.990 --> 00:27:41.784\nThe temp was when I was playing around\nwith making one of the command line.\n\n578\n00:27:41.784 --> 00:27:45.251\n[SOUND] Confirm dialogue box,\nthat's what I tried to write there.\n\n579\n00:27:45.251 --> 00:27:49.230\nThis guy right here is\nactually based on .NET.\n\n580\n00:27:49.230 --> 00:27:50.290\nIt's going and getting,\n\n581\n00:27:50.290 --> 00:27:53.810\ncuz it's one of the cool things about\nPowerShell, because it's based in .NET.\n\n582\n00:27:53.810 --> 00:27:56.239\nYou can access those classes as well.\n\n583\n00:27:56.239 --> 00:27:59.513\nWe were talking about this the other day,\noutside of our episodes,\n\n584\n00:27:59.513 --> 00:28:02.450\nthe fact that arrays in PowerShell\nare a little bit limited.\n\n585\n00:28:02.450 --> 00:28:07.119\nIn fact, they don't have like a push and\npop methods to add, remove members, but\n\n586\n00:28:07.119 --> 00:28:08.752\nthe .NET class array does.\n\n587\n00:28:08.752 --> 00:28:10.041\nSo when you create an array,\n\n588\n00:28:10.041 --> 00:28:13.770\nyou can technically create one based\non that class, not PowerShell's class.\n\n589\n00:28:13.770 --> 00:28:15.570\nAnyway, that's another episode.\n\n590\n00:28:15.570 --> 00:28:19.398\nThis let's just run it,\nyou're like hush Mike just show me.\n\n591\n00:28:19.398 --> 00:28:21.310\n&gt;&gt; [LAUGH]\n&gt;&gt; There you go.\n\n592\n00:28:21.310 --> 00:28:22.403\n&gt;&gt; Look at it.\n\n593\n00:28:22.403 --> 00:28:24.499\n&gt;&gt; So\nthere's a little dialog box that pops up,\n\n594\n00:28:24.499 --> 00:28:27.100\ndo you want to delete\nthe remaining files in the folder?\n\n595\n00:28:27.100 --> 00:28:28.560\nNow this is not my script,\n\n596\n00:28:28.560 --> 00:28:34.450\nagain I borrowed this from the Scripting\nGuy in their PowerShell tips of the week.\n\n597\n00:28:34.450 --> 00:28:36.310\nSo I give them full credit for\nthis, I'll go,\n\n598\n00:28:36.310 --> 00:28:38.250\nwe should go check out\ntheir webpage maybe.\n\n599\n00:28:38.250 --> 00:28:41.890\nBut there is your little dialog box,\nso you can see the title,\n\n600\n00:28:41.890 --> 00:28:46.874\ndelete files, the message, do you wanna\ndelete the remaining files in the folder?\n\n601\n00:28:46.874 --> 00:28:51.212\nThat's what shows up here, and\nthen she's got a variable for yes, and\n\n602\n00:28:51.212 --> 00:28:55.600\nthen making a button, and\nthis will delete all files in the folder.\n\n603\n00:28:55.600 --> 00:28:59.063\nNo, retain all files in the folder.\n\n604\n00:28:59.063 --> 00:29:02.649\nHere they're actually calling\nthe dialog box, with a yes,\n\n605\n00:29:02.649 --> 00:29:04.770\nno, or maybe it's here, result.\n\n606\n00:29:04.770 --> 00:29:07.300\nThis is where you're storing\nthe result of the click, and\n\n607\n00:29:07.300 --> 00:29:10.210\nthen they're using a switch\nto see what you selected.\n\n608\n00:29:11.520 --> 00:29:14.750\nSo, if I say no, I get you selected no.\n\n609\n00:29:14.750 --> 00:29:16.580\nI run that script again, I say yes.\n\n610\n00:29:16.580 --> 00:29:17.252\n&gt;&gt; So pretty.\n\n611\n00:29:17.252 --> 00:29:18.267\n&gt;&gt; You selected yes.\n\n612\n00:29:18.267 --> 00:29:21.460\nYeah, right.\nBut it's an actual pop up dialog box, that\n\n613\n00:29:21.460 --> 00:29:24.370\nyou're more than welcome again, if you\nwanna take a look at the Scripting Guys,\n\n614\n00:29:24.370 --> 00:29:27.850\ndo a Google search for\nPowerShell dialog box tip of the week or\n\n615\n00:29:27.850 --> 00:29:30.030\nPowerShell tip of the week,\nI'm sure you'll find it, and\n\n616\n00:29:30.030 --> 00:29:33.670\nI'll put a link for it in the show notes,\nand I'll put the script up there as well.\n\n617\n00:29:33.670 --> 00:29:35.760\nBut yeah, I thought that was pretty cool.\n\n618\n00:29:35.760 --> 00:29:38.567\nI almost put it in the show,\n&gt;&gt; And I also-\n\n619\n00:29:38.567 --> 00:29:39.286\n&gt;&gt; And now I did!\n\n620\n00:29:39.286 --> 00:29:41.920\n[LAUGH]\n&gt;&gt; Yeah, and I also like how it came right\n\n621\n00:29:41.920 --> 00:29:45.840\nthere in the forefront, and it's not like,\nI don't know if you've ever seen\n\n622\n00:29:45.840 --> 00:29:51.490\nthe dialogue boxes that pop-up way in\nthe background, and you're like [NOISE].\n\n623\n00:29:51.490 --> 00:29:51.990\n&gt;&gt; Yeah, you're just waiting,\nand waiting, and\n\n624\n00:29:51.990 --> 00:29:52.578\nwaiting,-\n&gt;&gt; [LAUGH]\n\n625\n00:29:52.578 --> 00:29:54.150\n&gt;&gt; And there it was.\n\n626\n00:29:54.150 --> 00:29:58.541\nSo, you can definitely do a little\ngraphical stuff with PowerShell.\n\n627\n00:29:58.541 --> 00:29:59.822\nWe can make forms.\n\n628\n00:29:59.822 --> 00:30:03.479\nAll of that is available in PowerShell but\nthat's another show.\n\n629\n00:30:03.479 --> 00:30:06.430\n&gt;&gt; All right, this has been a really\ngreat set of three shows here, Mike.\n\n630\n00:30:06.430 --> 00:30:08.920\nSo, thank you for that, and\nthank you for joining us as well, but\n\n631\n00:30:08.920 --> 00:30:10.675\nit looks like we're out of time for\nthis show.\n\n632\n00:30:10.675 --> 00:30:12.515\nI've been your host, Cherokee Boose.\n\n633\n00:30:12.515 --> 00:30:13.220\n&gt;&gt; And I'm Mike Rodrick.\n\n634\n00:30:13.220 --> 00:30:15.098\n&gt;&gt; See you next time here at ITProTV.\n\n635\n00:30:18.631 --> 00:30:24.336\n[MUSIC]\n\n636\n00:30:24.336 --> 00:30:27.259\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "242971596"
        },
        {
          "description": "In this episode, we take a look at how to create a function in PowerShell. We demonstrate creating the function, and saving the function in a way that lends itself to reusability.",
          "length": "1547",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-1-function_basics-111517-PGM.00_25_36_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-1-function_basics-111517-PGM.00_25_36_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-1-function_basics-111517-PGM.00_25_36_01.Still001-sm.jpg",
          "title": "Function Basics",
          "transcript": "WEBVTT\n\n1\n00:00:00.280 --> 00:00:01.240\nWelcome to ITProTV.\n\n2\n00:00:01.240 --> 00:00:07.382\nI'm your host [CROSSTALK]\n\n3\n00:00:07.382 --> 00:00:08.542\n[MUSIC]\n\n4\n00:00:08.542 --> 00:00:11.863\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:11.863 --> 00:00:14.823\n&gt;&gt; Welcome ladies and gentlemen to\nyour PowerShell Scripting series.\n\n6\n00:00:14.823 --> 00:00:15.790\nI'm your show host Cherokee Boose.\n\n7\n00:00:17.170 --> 00:00:20.600\nIn this episode,\nwe'll be taking a look at function basics.\n\n8\n00:00:20.600 --> 00:00:23.530\nAnd with us today, back in studio\nis we have Mr. Mike Rodrick.\n\n9\n00:00:23.530 --> 00:00:24.850\nThank you for joining us today, Mike.\n\n10\n00:00:24.850 --> 00:00:25.460\nHow are you?\n\n11\n00:00:25.460 --> 00:00:26.250\n&gt;&gt; I'm doing great, Cherokee.\n\n12\n00:00:26.250 --> 00:00:27.040\nThanks for having me back.\n\n13\n00:00:27.040 --> 00:00:28.150\nExcited as always.\n\n14\n00:00:28.150 --> 00:00:31.430\nAnd yeah, we're diving into\nthe world of functions today.\n\n15\n00:00:31.430 --> 00:00:33.340\n&gt;&gt; Yeah, what's a function Mike?\n\n16\n00:00:33.340 --> 00:00:34.270\n&gt;&gt; Gonna be a lot of fun hopefully.\n\n17\n00:00:34.270 --> 00:00:36.000\nIt's a good starting question, right?\n\n18\n00:00:36.000 --> 00:00:37.720\nWhat the heck is a function?\n\n19\n00:00:37.720 --> 00:00:41.240\nAnd really if we wanted to find a function\nwe could put a definition on it.\n\n20\n00:00:41.240 --> 00:00:44.510\nWe could say it's a collection of\nPowerShell statements that we assign\n\n21\n00:00:44.510 --> 00:00:45.550\nand name to.\n\n22\n00:00:45.550 --> 00:00:49.134\nIt's very similar to what we might\nthink of as a script, right?\n\n23\n00:00:49.134 --> 00:00:52.200\nOur script was a collection\nof PowerShell statements.\n\n24\n00:00:52.200 --> 00:00:53.230\nIt had a name that we could use.\n\n25\n00:00:53.230 --> 00:00:57.350\nBut a function's a little bit of\na smaller unit, then a script.\n\n26\n00:00:57.350 --> 00:01:02.360\nA function is a way to take a single\n\n27\n00:01:02.360 --> 00:01:07.040\ntask and kind of encapsulate it,\ngive it a name.\n\n28\n00:01:07.040 --> 00:01:10.470\nAnd then I can call that name and\nrun that function.\n\n29\n00:01:10.470 --> 00:01:13.420\nIt'll make more sense I\nthink as we go through here\n\n30\n00:01:13.420 --> 00:01:17.410\nI like to look at it if we start a little\nbit bigger and we look at script, right?\n\n31\n00:01:17.410 --> 00:01:18.860\nWe talked about writing scripts.\n\n32\n00:01:18.860 --> 00:01:21.770\nWe did a couple demos on that and we said\n\n33\n00:01:21.770 --> 00:01:26.780\nscripts are great ways to encapsulate our\nPowerShell code, give us a re-usability.\n\n34\n00:01:26.780 --> 00:01:31.200\nIf there are task that I have\nto do on a repeated basis or\n\n35\n00:01:31.200 --> 00:01:35.290\nsome kinda scheduled task or they're\njust monotonous, tedious kinda things.\n\n36\n00:01:35.290 --> 00:01:38.880\nWe could try to automate some of that\nusing scripts like we did with our hey,\n\n37\n00:01:38.880 --> 00:01:40.150\nlet's go check these files,\n\n38\n00:01:40.150 --> 00:01:43.650\nsee if there's any older than 30 days and\nmove them to the archive folder, right?\n\n39\n00:01:43.650 --> 00:01:47.840\nReally nice, I didn't have to do it\nmanually I had a script that we could run\n\n40\n00:01:47.840 --> 00:01:49.320\nand it did it automatically.\n\n41\n00:01:49.320 --> 00:01:51.480\nSo that was the idea behind a script.\n\n42\n00:01:51.480 --> 00:01:55.280\nSo scripts give us the ability\nto take an entire job and\n\n43\n00:01:55.280 --> 00:01:59.770\nkind of wrap it up, give it a name and\nthen have the re-usability.\n\n44\n00:01:59.770 --> 00:02:05.880\nBut some of the stuff within the script\ncould be reused in other places, right?\n\n45\n00:02:05.880 --> 00:02:09.700\nThere might be things that I put in my\nscript that I find myself putting in\n\n46\n00:02:09.700 --> 00:02:11.230\nmany scripts, right?\n\n47\n00:02:11.230 --> 00:02:15.100\nEvery script that I write seems to\nneed this particular capability like\n\n48\n00:02:15.100 --> 00:02:17.600\nconverting bytes to terabytes, or\n\n49\n00:02:17.600 --> 00:02:22.510\ndoing a conversion rate from Euros\nto Dollars or something like that.\n\n50\n00:02:22.510 --> 00:02:26.180\nI seem to write a lot of scripts and\nthey all need that capability.\n\n51\n00:02:26.180 --> 00:02:29.880\nWouldn't it be nice if I could bottle that\nup, right, capture that little one little\n\n52\n00:02:29.880 --> 00:02:34.710\ntask, converting Euros to Dollars and\nset it aside and then with each\n\n53\n00:02:34.710 --> 00:02:38.950\nscript that I write, I don't have to\nre-write that code on how to convert,\n\n54\n00:02:38.950 --> 00:02:44.970\nI can just call that little function\nfrom my script and have that capability.\n\n55\n00:02:44.970 --> 00:02:48.970\nSo now I can add that conversion\ncapability to any script I write\n\n56\n00:02:48.970 --> 00:02:50.460\njust by calling that name.\n\n57\n00:02:50.460 --> 00:02:53.370\nAnd that's really the idea\nbehind a function, right?\n\n58\n00:02:53.370 --> 00:02:57.910\nBut they do work a lot like scripts and\nthe fact that they are given a name,\n\n59\n00:02:57.910 --> 00:02:59.610\nwe're going to call them by name.\n\n60\n00:02:59.610 --> 00:03:04.010\nWe can pass parameters, the functions,\nthey can return values,\n\n61\n00:03:04.010 --> 00:03:08.520\nthey can be written to accept\ndata from pipelines, so\n\n62\n00:03:08.520 --> 00:03:11.380\nthey do have a lot of similarities,\nI guess, with scripts.\n\n63\n00:03:11.380 --> 00:03:15.550\n&gt;&gt; Okay, so then at what point would you\nnot use the term function, but then,\n\n64\n00:03:15.550 --> 00:03:17.070\nlike transition into a script.\n\n65\n00:03:17.070 --> 00:03:18.740\nIs there a link, or?\n\n66\n00:03:18.740 --> 00:03:21.830\n&gt;&gt; Yeah, I like to look at,\nI usually write scripts.\n\n67\n00:03:21.830 --> 00:03:26.550\nAnd as I'm writing script, if I find\nsomething that, again, have to write a lot\n\n68\n00:03:26.550 --> 00:03:31.050\nevery script I use or a lot of the scripts\nI use, I find myself writing this code.\n\n69\n00:03:31.050 --> 00:03:33.820\nAnd in the beginning, what you'll\nfind yourself doing is copying and\n\n70\n00:03:33.820 --> 00:03:35.030\npasting, right?\n\n71\n00:03:35.030 --> 00:03:37.410\nYou'll go,\nI did that in the other script I wrote.\n\n72\n00:03:37.410 --> 00:03:42.050\nLet me just go copy that code out of\nthat script and paste it in this one and\n\n73\n00:03:42.050 --> 00:03:42.960\nI'm good to go, right?\n\n74\n00:03:42.960 --> 00:03:47.100\nSo we can definitely do that but at\nsome point, you might wanna advance your\n\n75\n00:03:47.100 --> 00:03:51.180\nPowerShell skills and say let me take\nthat and turn it into a function\n\n76\n00:03:51.180 --> 00:03:55.070\nbecause I'm gonna show you how one,\nwe can use functions in multiple scripts.\n\n77\n00:03:55.070 --> 00:03:58.510\nI can also make those available to other\npeople so if you were writing a script and\n\n78\n00:03:58.510 --> 00:04:01.682\nyou needed to convert Euros to dollars,\nI could say, hey,\n\n79\n00:04:01.682 --> 00:04:05.250\nCherokee there's a function right here you\ncan use, just use that in your script.\n\n80\n00:04:05.250 --> 00:04:08.410\n&gt;&gt; Okay.\n&gt;&gt; So functions are smaller than scripts,\n\n81\n00:04:08.410 --> 00:04:13.150\nright, we use them within scripts, they're\nlittle, usually have a single topic, or\n\n82\n00:04:13.150 --> 00:04:15.160\na single task that they perform.\n\n83\n00:04:15.160 --> 00:04:21.250\nAnd I might have dozens of functions\nwithin a single script, right?.\n\n84\n00:04:21.250 --> 00:04:23.230\nOr use multiple functions in this script.\n\n85\n00:04:23.230 --> 00:04:26.790\n&gt;&gt; Sure like a modular design,\nlike a subset of that actuals.\n\n86\n00:04:26.790 --> 00:04:27.800\n&gt;&gt; And I like that term,\n\n87\n00:04:27.800 --> 00:04:31.100\nthat term modular is really what we're\ngetting out of these functions, right,\n\n88\n00:04:31.100 --> 00:04:36.960\nthe ability to have these little blocks of\ncode that I can use to build scripts from.\n\n89\n00:04:36.960 --> 00:04:39.170\nThat's really what we wanna think of.\n\n90\n00:04:39.170 --> 00:04:41.260\nSo that's the idea behind a function.\n\n91\n00:04:41.260 --> 00:04:42.490\nLet's take a look at my screen here and\n\n92\n00:04:42.490 --> 00:04:47.740\nI'll show you the basic syntax of\na function is simply the keyword function.\n\n93\n00:04:47.740 --> 00:04:49.930\nAnd then whatever you\nwanna call the function,\n\n94\n00:04:49.930 --> 00:04:54.250\nthe name of the function,\nopen curly brace, or open brace,\n\n95\n00:04:54.250 --> 00:04:59.420\nmy statements that the function is going\nto execute and then my close curly brace.\n\n96\n00:04:59.420 --> 00:05:03.550\nSo very similar to a lot of the other\nthings that we've done in here,\n\n97\n00:05:03.550 --> 00:05:08.360\nsame naming I don't know if we've really\ntalked about a lot of naming conventions.\n\n98\n00:05:08.360 --> 00:05:11.670\nWhen we write these functions\nMicrosoft will recommend\n\n99\n00:05:11.670 --> 00:05:14.830\nthat you stick with\nPowerShell's naming convention.\n\n100\n00:05:14.830 --> 00:05:17.990\nWhich means there's a certain\nset of verbs that I should use.\n\n101\n00:05:17.990 --> 00:05:23.700\nI think there's not that many verbs,\n20 something, I can't remember exactly but\n\n102\n00:05:23.700 --> 00:05:28.290\nwhat they would recommend is you stick\nwith the verbs that already exist.\n\n103\n00:05:28.290 --> 00:05:31.690\nAnd if you're creating something new for\nexample use the word new.\n\n104\n00:05:31.690 --> 00:05:36.950\nIf you're modifying an existing object\nwith your function use the word set,\n\n105\n00:05:36.950 --> 00:05:37.680\nthat kind of thing.\n\n106\n00:05:37.680 --> 00:05:41.330\nSo kind of follow those don't use\nverbs that don't already exist in\n\n107\n00:05:41.330 --> 00:05:46.070\nPowerShell's language and then the noun\nafter the dash should represent\n\n108\n00:05:46.070 --> 00:05:50.400\nthe item that it's\nperforming the action on.\n\n109\n00:05:50.400 --> 00:05:55.000\nSo like if you think of New-ADUser and\nI know just from that term I'm\n\n110\n00:05:55.000 --> 00:05:58.440\ncreating new an active\ndirector user account, right?\n\n111\n00:05:58.440 --> 00:06:00.045\nAnd that's what they recommend.\n\n112\n00:06:00.045 --> 00:06:04.040\nNow do whatever you want and\nif you're doing them internally just for\n\n113\n00:06:04.040 --> 00:06:07.870\nyourself doesn't really matter but as you\nstart to share them, you might get to\n\n114\n00:06:07.870 --> 00:06:11.440\nthe point where you want to publish\nthis stuff up to the PowerShell gallery.\n\n115\n00:06:11.440 --> 00:06:16.490\nShare with other PowerShell users in\nthe community, in which case it is\n\n116\n00:06:16.490 --> 00:06:21.040\nreally important that we do follow those\nnaming conventions and name them properly.\n\n117\n00:06:21.040 --> 00:06:22.840\nSo I'll try to that in my show here.\n\n118\n00:06:22.840 --> 00:06:26.882\nI have a bad habit of just\ncalling them A,B,C,D or\n\n119\n00:06:26.882 --> 00:06:29.780\nsomething very none,\n&gt;&gt; Arbitrary there, but.\n\n120\n00:06:29.780 --> 00:06:35.310\n&gt;&gt; Yeah or not following their\nformat at least with my name.\n\n121\n00:06:35.310 --> 00:06:38.910\nSo, that's just a little bit of\nbackground there on functions.\n\n122\n00:06:38.910 --> 00:06:41.210\nSo let's talk about writing a function.\n\n123\n00:06:41.210 --> 00:06:45.680\nAnd really what I wanna do is try to do\nlike we did with the scripts, where we\n\n124\n00:06:45.680 --> 00:06:49.060\nkind of work and think through the entire\nprocess of writing the function.\n\n125\n00:06:49.060 --> 00:06:51.230\nSo we'll kind of look at what we've got,\n\n126\n00:06:51.230 --> 00:06:55.360\ndecide that we wanna make a function\nout of it and then work our way through\n\n127\n00:06:55.360 --> 00:06:59.090\ncreating that function and\nthen trying to use that function.\n\n128\n00:06:59.090 --> 00:07:00.710\nSo what I'm gonna do is\nI’m gonna jump back over,\n\n129\n00:07:00.710 --> 00:07:04.920\nif you remember if you've watched\nour writing in script episodes.\n\n130\n00:07:04.920 --> 00:07:08.350\nWe came up with this one to archive files,\n\n131\n00:07:08.350 --> 00:07:12.540\nwhere we were able to pass the path,\nthe directory we wanted to look in and\n\n132\n00:07:12.540 --> 00:07:15.900\nthe number of days we considered to\nbe old, and at the point of archive.\n\n133\n00:07:15.900 --> 00:07:18.640\nAnd it would scan that directory,\n\n134\n00:07:18.640 --> 00:07:22.870\nreturn a list of files that was\nolder than, or hadn't been modified.\n\n135\n00:07:22.870 --> 00:07:25.060\nSince that particular\ndate that we picked and\n\n136\n00:07:25.060 --> 00:07:30.330\nthen give us the option to archive\nthose into our archive folder.\n\n137\n00:07:30.330 --> 00:07:32.600\nAnd will verify that it's still reading,\n\n138\n00:07:32.600 --> 00:07:37.020\nI do think when we wrote this script\nI forgot to do one more thing\n\n139\n00:07:37.020 --> 00:07:39.800\nbecause we were already pushing\nour time limits I think.\n\n140\n00:07:39.800 --> 00:07:45.430\nBut this might not have been the one\nyou saw in the scripting episode.\n\n141\n00:07:45.430 --> 00:07:48.597\nSo just to explain if anybody's\ngoing wait I didn't see that one and\n\n142\n00:07:48.597 --> 00:07:49.661\nwhat the heck is that?\n\n143\n00:07:49.661 --> 00:07:53.466\nRemember, we could point it to a directory\nand then it would look for files.\n\n144\n00:07:53.466 --> 00:07:57.527\nIf it comes back with 0 files, 0 files\nwere older than the particular date\n\n145\n00:07:57.527 --> 00:08:01.405\nThere's really no point in popping\nup the yes, no dialog box, right?\n\n146\n00:08:01.405 --> 00:08:04.523\nBecause there's zero files to archive,\nso if you choose yes or no, I mean,\n\n147\n00:08:04.523 --> 00:08:05.806\nyou don't even wanna bother.\n\n148\n00:08:05.806 --> 00:08:06.699\n&gt;&gt; It's not doing anything.\n\n149\n00:08:06.699 --> 00:08:09.899\n&gt;&gt; Yeah, you don't even wanna bother\nasking the person because there aren't\n\n150\n00:08:09.899 --> 00:08:11.190\nany files to archive.\n\n151\n00:08:11.190 --> 00:08:16.890\nSo that's all this was was I just put this\nif statement around the entire prompt and\n\n152\n00:08:16.890 --> 00:08:20.840\nthat way if there were no files in\nthe list, it didn't even bother saying\n\n153\n00:08:20.840 --> 00:08:23.660\nhey do you want to archive\nbecause that's kind of silly.\n\n154\n00:08:23.660 --> 00:08:26.440\nOther than that the script\nis exactly as we ended with\n\n155\n00:08:26.440 --> 00:08:28.540\nat the end of our other episode.\n\n156\n00:08:28.540 --> 00:08:29.656\nSo, as I look at this script.\n\n157\n00:08:29.656 --> 00:08:30.754\nAnd this is usually the way, and\n\n158\n00:08:30.754 --> 00:08:32.550\neverybody's gonna work\na little bit differently.\n\n159\n00:08:32.550 --> 00:08:36.340\nBut this is usually the way I work and\nI'll come back and\n\n160\n00:08:36.340 --> 00:08:40.980\nI'll look at this script and I'll think\nto myself, I might be able to use this,\n\n161\n00:08:40.980 --> 00:08:44.560\nI'm looking at this part here\nas I go down through the script.\n\n162\n00:08:44.560 --> 00:08:49.910\nThis is pretty specific to my script\nthis is pretty specific to what we're\n\n163\n00:08:49.910 --> 00:08:54.680\ndoing here in the script but as we get\ndown here the whole idea of prompting for\n\n164\n00:08:54.680 --> 00:08:59.070\nyes or no that's something I think I\nmight be able to use in other places.\n\n165\n00:08:59.070 --> 00:09:00.630\nMaybe not just archiving files.\n\n166\n00:09:00.630 --> 00:09:06.540\nMaybe I've got another script that delete\nsomething and I wanna prompt them yes or\n\n167\n00:09:06.540 --> 00:09:11.959\nno before I delete it or-\n&gt;&gt; Maybe that's dialog box that we use.\n\n168\n00:09:11.959 --> 00:09:14.088\nWould that be considered a function?\n\n169\n00:09:14.088 --> 00:09:15.910\n&gt;&gt; We could definitely\nput it into function.\n\n170\n00:09:15.910 --> 00:09:17.820\nAbsolutely, we could do that.\n\n171\n00:09:17.820 --> 00:09:20.920\nSo and that's the kind of thing I'm\nthinking about when I'm looking into my\n\n172\n00:09:20.920 --> 00:09:25.400\nscript is, man, I would like to be\nable to use the same functionality\n\n173\n00:09:25.400 --> 00:09:27.150\nsomewhere else in another script.\n\n174\n00:09:27.150 --> 00:09:29.160\nI can see where that would be beneficiary.\n\n175\n00:09:29.160 --> 00:09:31.570\nSo as I look at this,\nthat's exactly what I'm thinking.\n\n176\n00:09:31.570 --> 00:09:33.810\nI'm thinking the whole idea\nof prompting for yes or\n\n177\n00:09:33.810 --> 00:09:36.350\nno is not really specific to the script.\n\n178\n00:09:36.350 --> 00:09:40.530\nThat's something that I could see myself\ndoing in other scripts and other places.\n\n179\n00:09:40.530 --> 00:09:44.380\nSo that's gonna lend itself\ntowards becoming a function.\n\n180\n00:09:44.380 --> 00:09:45.580\nSo that's what I wanna do.\n\n181\n00:09:45.580 --> 00:09:49.360\nI wanna take this whole yes\nno idea prompting them and\n\n182\n00:09:49.360 --> 00:09:52.750\nasking them to confirm and\nI want to turn it into a function.\n\n183\n00:09:53.780 --> 00:09:56.780\nSo now that I know what I wanna create\nthat there is a function that I want to\n\n184\n00:09:56.780 --> 00:10:01.810\ncreate then the next thing I do is we're\ngonna start looking at this code and\n\n185\n00:10:01.810 --> 00:10:06.590\ndecide what is it that's generic what is\nit that I can take that would apply to\n\n186\n00:10:06.590 --> 00:10:10.170\nany script that I write, and\nwhat is it that's specific to this script?\n\n187\n00:10:10.170 --> 00:10:14.550\nAnd that's gonna help me start separating\nout the parts of the code that I wanna put\n\n188\n00:10:14.550 --> 00:10:16.340\ninto my function.\n\n189\n00:10:16.340 --> 00:10:20.034\nAnd when look at this, this really has\nto do with this particular script,\n\n190\n00:10:20.034 --> 00:10:21.657\nit's going and getting files.\n\n191\n00:10:21.657 --> 00:10:25.320\nAnd if they are zero,\nI don't wanna pop the dialog box up.\n\n192\n00:10:25.320 --> 00:10:27.175\nIn another script that\nmight not be the case.\n\n193\n00:10:27.175 --> 00:10:28.428\nI might want different behavior.\n&gt;&gt; You might not be looking at\n\n194\n00:10:28.428 --> 00:10:29.012\nthose files.\n\n195\n00:10:29.012 --> 00:10:34.450\n&gt;&gt; Yeah, so that really doesn't seem\nto want to go into my function.\n\n196\n00:10:34.450 --> 00:10:37.570\nBut, the fact that I'm getting\na response from them and\n\n197\n00:10:37.570 --> 00:10:39.490\nstoring it in the variable, right?\n\n198\n00:10:39.490 --> 00:10:42.329\nWell, that's the whole\nidea of what this is, so\n\n199\n00:10:42.329 --> 00:10:45.392\nthat's definitely specific\nto this yes no dialog.\n\n200\n00:10:45.392 --> 00:10:50.099\nI say dialog, it's really a prompt not\na dialog box in our case, and read host,\n\n201\n00:10:50.099 --> 00:10:50.940\nright?\n\n202\n00:10:50.940 --> 00:10:55.470\nWell, I need to get their input so\nthat definitely could go into my function,\n\n203\n00:10:55.470 --> 00:10:57.730\nthat's why I'm gonna\nneed to reuse that part.\n\n204\n00:10:57.730 --> 00:11:01.800\nThe message,\nwell the concept of the message,\n\n205\n00:11:01.800 --> 00:11:04.010\nI need to tell them something, right?\n\n206\n00:11:04.010 --> 00:11:06.240\nSo I'm definitely gonna need\na message in there, and say,\n\n207\n00:11:06.240 --> 00:11:08.440\nhey you're gonna have to click yes or no.\n\n208\n00:11:08.440 --> 00:11:12.760\nOr do I wanna make it even more generic,\nmaybe my prompt isn't yes or\n\n209\n00:11:12.760 --> 00:11:14.930\nno next time,\nmaybe it's two other choices.\n\n210\n00:11:14.930 --> 00:11:19.390\nI think for now though I'll stick with\njust making a function that does yes, no.\n\n211\n00:11:19.390 --> 00:11:22.400\n&gt;&gt; Common one I see a lot is\nwould you like to continue.\n\n212\n00:11:22.400 --> 00:11:23.790\n&gt;&gt; Yeah, yeah, something like that.\n\n213\n00:11:23.790 --> 00:11:25.810\nSo right along the same lines there.\n\n214\n00:11:25.810 --> 00:11:27.370\nThis part though, archive files,\n\n215\n00:11:27.370 --> 00:11:30.460\nwell if I used this in a different\nscript I might not be archiving files.\n\n216\n00:11:30.460 --> 00:11:34.633\nI might be deleting files or\nmoving something or resetting passwords or\n\n217\n00:11:34.633 --> 00:11:36.170\nwhatever the case may be.\n\n218\n00:11:36.170 --> 00:11:39.460\nSo this part of the message is\nkind of specific to the script.\n\n219\n00:11:39.460 --> 00:11:43.580\nThis part of the message probably\nwould go along with the function.\n\n220\n00:11:43.580 --> 00:11:47.530\nSo it's kind of a halfy-halfy there so\nwe'll look at how we can deal with that.\n\n221\n00:11:47.530 --> 00:11:50.080\nAnd then the wild portion and\n\n222\n00:11:50.080 --> 00:11:54.160\nthat's really to the prompt\nitself not the script.\n\n223\n00:11:54.160 --> 00:11:57.576\nAnd I've got a pop-up prompt,\nwhat they want, what I want them to do and\n\n224\n00:11:57.576 --> 00:12:01.116\nthen I got a weight and if they put\nsomething in there that's not a yes or no.\n\n225\n00:12:01.116 --> 00:12:03.880\nI wanna prompt them again\nuntil I get an answer.\n\n226\n00:12:03.880 --> 00:12:08.310\nSo this really does have to do with\nthe function of the prompt not the script\n\n227\n00:12:08.310 --> 00:12:12.700\nitself And then we get down to the switch\npart where we're taking whatever they've\n\n228\n00:12:12.700 --> 00:12:17.670\nanswered and performing an action\nbased on what they've chosen.\n\n229\n00:12:17.670 --> 00:12:22.900\nIt's another one of those that's\nkind of both sides all right?\n\n230\n00:12:22.900 --> 00:12:26.470\nThe actions, themselves,\ndefinitely specific to the script.\n\n231\n00:12:26.470 --> 00:12:30.700\nBut the fact that I'm gonna need\nto analyze what they've responded.\n\n232\n00:12:30.700 --> 00:12:33.250\nI need to send back their response,\nif they typed yes, or\n\n233\n00:12:33.250 --> 00:12:35.250\nno, or whatever we choose.\n\n234\n00:12:35.250 --> 00:12:39.290\nThen that is really part of the function,\nright?\n\n235\n00:12:39.290 --> 00:12:43.400\nSo hopefully that kinda shows you\nthe thought process at least that I\n\n236\n00:12:43.400 --> 00:12:47.490\ngo through when I'm thinking\nabout creating functions is I\n\n237\n00:12:47.490 --> 00:12:49.950\nfind a little section\nthat I think I can reuse.\n\n238\n00:12:49.950 --> 00:12:53.490\nAnd I start thinking about what's\nspecific do the script, what is generic,\n\n239\n00:12:53.490 --> 00:12:58.670\nwhat can I make in a neutral if you\nwill and apply to all scripts all right.\n\n240\n00:12:58.670 --> 00:13:00.800\nNow that we've kind of gone\nthrough that thought process,\n\n241\n00:13:00.800 --> 00:13:03.300\nthat gives us an idea of\nwhere we're gonna go.\n\n242\n00:13:03.300 --> 00:13:08.330\nSo I'm gonna wipe out our little\ntest definition, there, our syntax.\n\n243\n00:13:08.330 --> 00:13:10.020\nAnd I'm just going to come over here and\n\n244\n00:13:10.020 --> 00:13:12.140\nyou know what I actually\nI'm going to do this.\n\n245\n00:13:12.140 --> 00:13:16.040\nLet's take this entire thing and\n\n246\n00:13:16.040 --> 00:13:21.910\npaste it over here and\nlet's save this as test.\n\n247\n00:13:23.780 --> 00:13:27.144\nAnd hopefully that existing test doesn't\nhave anything important in there\n\n248\n00:13:27.144 --> 00:13:28.887\nbecause we're going to overwrite it.\n\n249\n00:13:28.887 --> 00:13:32.231\nI do that because I wanna save this\nfinished archives file for our viewers and\n\n250\n00:13:32.231 --> 00:13:33.754\neverybody's that's watching.\n\n251\n00:13:33.754 --> 00:13:37.000\nI wanna make sure that I have that\nintact so I can upload to our site.\n\n252\n00:13:37.000 --> 00:13:40.310\nSo we'll close that one and now we've\ngot a copy of it that we can play with.\n\n253\n00:13:40.310 --> 00:13:42.900\nNo harm, no foul if we get this up.\n\n254\n00:13:42.900 --> 00:13:47.990\nAll right, so we wanna make a function out\nof this little prompt, this yes/no prompt.\n\n255\n00:13:47.990 --> 00:13:51.840\nSo I am going to rather than trying\nto do it in the script, right?\n\n256\n00:13:51.840 --> 00:13:54.290\nI wanna write this\nseparate from the script.\n\n257\n00:13:54.290 --> 00:13:57.290\nAs the idea is the function is going\nto be separate from the script so\n\n258\n00:13:57.290 --> 00:13:58.740\nthat I can reuse it.\n\n259\n00:13:58.740 --> 00:14:00.896\nSo I'm gonna grab all this information.\n\n260\n00:14:00.896 --> 00:14:05.660\nI think I might want in my function.\n\n261\n00:14:05.660 --> 00:14:06.884\nAnd I'm gonna copy it out.\n\n262\n00:14:06.884 --> 00:14:08.660\nLet me back, let's just get all of that.\n\n263\n00:14:10.100 --> 00:14:14.510\nAnd I'm gonna make a new file and\nI'm gonna paste it in there, right?\n\n264\n00:14:14.510 --> 00:14:17.640\nAnd I left the if out,\ncuz that's not specific to my function.\n\n265\n00:14:17.640 --> 00:14:23.148\nThat was specific to the script,\nall right?\n\n266\n00:14:23.148 --> 00:14:25.329\nAnd one more thing I wanna do, I think,\n\n267\n00:14:25.329 --> 00:14:28.940\nbefore we get too far is we're\ngonna wanna test with this.\n\n268\n00:14:28.940 --> 00:14:31.880\nAnd I don't wanna have to move these\nfiles, and then move them back.\n\n269\n00:14:31.880 --> 00:14:33.310\n&gt;&gt; Okay.\n&gt;&gt; So I'm gonna cheat a little bit,\n\n270\n00:14:33.310 --> 00:14:35.920\nI'm gonna modify our script.\n\n271\n00:14:35.920 --> 00:14:37.740\n&gt;&gt; The destination and put it.\n\n272\n00:14:37.740 --> 00:14:42.980\n&gt;&gt; I'm actually just gonna throw that out\nfront, and comment out the rest of it.\n\n273\n00:14:42.980 --> 00:14:44.656\nSo we'll get operation completed or\n\n274\n00:14:44.656 --> 00:14:47.980\noperation cancelled,\nthat it won't actually move any files.\n\n275\n00:14:47.980 --> 00:14:49.580\n&gt;&gt; Okay.\n&gt;&gt; That way I don't have to worry about,\n\n276\n00:14:49.580 --> 00:14:52.910\nokay let's put the files back so\nwe can test again or anything like that.\n\n277\n00:14:52.910 --> 00:14:58.496\nSo I'm just doing that to set\nup this little lab here right.\n\n278\n00:14:58.496 --> 00:15:03.381\nAnd you know what else we could do\nis I'm gonna put in a default value.\n\n279\n00:15:03.381 --> 00:15:07.574\nIf you pull in backslash scripts for our.\n\n280\n00:15:07.574 --> 00:15:11.860\nAnd that should be a string shouldn't it.\n\n281\n00:15:11.860 --> 00:15:17.477\nLet's do that and days I'll set = 5.\n\n282\n00:15:17.477 --> 00:15:18.710\nWe can always change that, right?\n\n283\n00:15:18.710 --> 00:15:22.158\nWhen we call the script, but that way I\nwon't have to provide those values every\n\n284\n00:15:22.158 --> 00:15:25.812\ntime just make it saves a little time as\nwe're testing things out maybe, maybe not,\n\n285\n00:15:25.812 --> 00:15:26.964\nI don't know we'll see.\n\n286\n00:15:26.964 --> 00:15:28.677\n&gt;&gt; [LAUGH] Okay.\n\n287\n00:15:28.677 --> 00:15:31.940\n&gt;&gt; All right, so, now back to\nactually creating our function.\n\n288\n00:15:31.940 --> 00:15:35.980\nSo as we go down through here, you\n\n289\n00:15:35.980 --> 00:15:40.700\nknow the first thing I'm thinking about\nis the, well, start at the top, right.\n\n290\n00:15:40.700 --> 00:15:47.021\nI said in our, or we,\nactually let me take one more step and\n\n291\n00:15:47.021 --> 00:15:51.669\nlet's do this, let's give us some room.\n\n292\n00:15:51.669 --> 00:15:54.641\nTab over here just because I\nlike to tidy things up and\n\n293\n00:15:54.641 --> 00:15:57.760\nlet's start our function\nwith the keyword function.\n\n294\n00:15:57.760 --> 00:16:00.958\nAnd then I've got to give\nthis function a name.\n\n295\n00:16:00.958 --> 00:16:05.810\nSo I'm gonna call this one new,\n\n296\n00:16:05.810 --> 00:16:10.677\nyes, no, prompt, all right.\n\n297\n00:16:10.677 --> 00:16:11.915\nCuz that's, what we're doing it, right?\n\n298\n00:16:11.915 --> 00:16:15.020\nWe're gonna be creating something new and\nit's a yes, no prompt.\n\n299\n00:16:15.020 --> 00:16:16.427\nSo that follows Microsoft's [CROSSTALK].\n\n300\n00:16:16.427 --> 00:16:17.608\n&gt;&gt; And your verb, verb noun.\n\n301\n00:16:17.608 --> 00:16:20.610\n&gt;&gt; Maybe I should go around there, right?\n\n302\n00:16:20.610 --> 00:16:24.130\nSo that's the name of my function and then\nof course we're gonna have an open curly\n\n303\n00:16:24.130 --> 00:16:28.900\nbrace and\nthen a closed curly brace should go\n\n304\n00:16:30.290 --> 00:16:35.050\nat the very end of our function, right?\n\n305\n00:16:35.050 --> 00:16:37.880\nAnd now this makes me wanna\ntab that in just a little bit.\n\n306\n00:16:37.880 --> 00:16:38.390\nThere we go.\nSo\n\n307\n00:16:38.390 --> 00:16:40.520\nnow we've got the skeleton of my function,\nright?\n\n308\n00:16:40.520 --> 00:16:44.660\nI've got my title, my function keyword,\nmy name, my open curly brace and\n\n309\n00:16:44.660 --> 00:16:46.030\nmy closed curly brace.\n\n310\n00:16:46.030 --> 00:16:49.940\nAnd I've got my code block inside\nthere that we're now going to modify.\n\n311\n00:16:50.950 --> 00:16:53.250\nAll right, so let's see.\n\n312\n00:16:53.250 --> 00:16:57.070\nSo our answer, we said that this\nis where I'm going to be, right?\n\n313\n00:16:57.070 --> 00:17:00.690\nRead host is what prompts\nthem to fill something in.\n\n314\n00:17:00.690 --> 00:17:05.732\nAnd then this is what it's\ngoing to say on the screen.\n\n315\n00:17:05.732 --> 00:17:07.210\nAnd-\n&gt;&gt; Do you wanna change that or\n\n316\n00:17:07.210 --> 00:17:07.910\nkeep it the same way?\n\n317\n00:17:07.910 --> 00:17:09.420\n&gt;&gt; I definitely think\nwe wanna change that.\n\n318\n00:17:09.420 --> 00:17:13.410\nSo I'm gonna take out\nthe whole archive files and\n\n319\n00:17:13.410 --> 00:17:16.770\njust leave this as a yes or no, right?\n\n320\n00:17:16.770 --> 00:17:17.820\nSo that's part of generic.\n\n321\n00:17:17.820 --> 00:17:19.340\nI could use this in any script.\n\n322\n00:17:19.340 --> 00:17:21.070\nIt's just saying yes or no.\n\n323\n00:17:21.070 --> 00:17:26.068\nI could even say type yes or\nno if I wanted to, or choose yes or no or\n\n324\n00:17:26.068 --> 00:17:28.488\nsomething like that, right.\n\n325\n00:17:28.488 --> 00:17:34.085\nSo I like that,\nthat takes care of the message part,\n\n326\n00:17:34.085 --> 00:17:39.465\nbut I do think that this\nis not super explanatory.\n\n327\n00:17:39.465 --> 00:17:40.300\n&gt;&gt; Mm-hm.\n\n328\n00:17:40.300 --> 00:17:44.690\n&gt;&gt; I like the idea of saying, archive\nfiles, yes or no because it tells them,\n\n329\n00:17:44.690 --> 00:17:46.550\nhey this is why I'm asking you yes or no.\n\n330\n00:17:46.550 --> 00:17:49.940\nIf I just pop up yes or no,\nyes or no what, all right?\n\n331\n00:17:49.940 --> 00:17:53.510\nThey might figure it out, they might\nnot and they go on how good they are.\n\n332\n00:17:53.510 --> 00:17:58.670\nSo, I do like the idea of having a little\nmessage but the message can vary.\n\n333\n00:17:58.670 --> 00:18:01.710\nSo I could choose to leave\nit out of the function or\n\n334\n00:18:01.710 --> 00:18:04.140\nwe could do it in the function, right?\n\n335\n00:18:04.140 --> 00:18:05.660\nAnd I thinks that's what I wanna do.\n\n336\n00:18:05.660 --> 00:18:13.463\nSo let's do $message, right?\n\n337\n00:18:13.463 --> 00:18:15.220\nWe're gonna do this.\n\n338\n00:18:15.220 --> 00:18:19.550\nI think what I would like to do is this\nis gonna be the same every time, but\n\n339\n00:18:19.550 --> 00:18:22.850\nthe message might change every\ntime I call this function.\n\n340\n00:18:22.850 --> 00:18:25.930\nSo what that means is I need a variable,\nright.\n\n341\n00:18:25.930 --> 00:18:29.020\nAnd we're gonna have them when\nthey call the new yes no prompt,\n\n342\n00:18:29.020 --> 00:18:33.080\nwhy don't we just have them tell\nus what they wanted to say?\n\n343\n00:18:33.080 --> 00:18:35.340\nSo for that, all we need is a parameter.\n\n344\n00:18:35.340 --> 00:18:40.430\nNow, parameters can be defined inside the\nfunction just like we did with our script.\n\n345\n00:18:40.430 --> 00:18:41.430\nRemember on our script,\n\n346\n00:18:41.430 --> 00:18:44.780\nwe've got our little parameter block\nright up there at the beginning?\n\n347\n00:18:44.780 --> 00:18:48.280\nI can do the exact same\nthing in my function.\n\n348\n00:18:48.280 --> 00:18:52.509\nI can dump that here and I can define\nall the parameters that I want.\n\n349\n00:18:52.509 --> 00:18:57.070\nOr I can do it in this\nfirst line of the function.\n\n350\n00:18:57.070 --> 00:19:01.688\nI can actually do an open parenthesis and\nI can do something like this.\n\n351\n00:19:01.688 --> 00:19:09.890\nString $message and\nthen close my parenthesis.\n\n352\n00:19:11.860 --> 00:19:16.440\nSo what this is saying is when you\ncall this function, you can pass\n\n353\n00:19:16.440 --> 00:19:21.820\na string into it and that will be\nstored in this message variable.\n\n354\n00:19:21.820 --> 00:19:24.023\nAnd now when the function runs,\n\n355\n00:19:24.023 --> 00:19:29.826\nthe first thing it'll do is print out that\nmessage and then do the read host, right.\n\n356\n00:19:29.826 --> 00:19:30.985\nThis is the way I got this here.\n\n357\n00:19:30.985 --> 00:19:36.228\nNow something we need to learn about\nfunctions is, in fact you know we could\n\n358\n00:19:36.228 --> 00:19:41.254\nprobably let's One of the things\n\n359\n00:19:41.254 --> 00:19:44.590\nabout functions that we have to pay\nattention to, functions can return data.\n\n360\n00:19:44.590 --> 00:19:48.883\nAnd if you're used to working in other\nlanguages, you might use a return keyword,\n\n361\n00:19:48.883 --> 00:19:52.642\nwhere you decide what information\nthe function is actually returning.\n\n362\n00:19:52.642 --> 00:19:56.646\nUsually our function would do some kind\nof calculation, or do some action, and\n\n363\n00:19:56.646 --> 00:20:01.180\nthen we'd store the results in a variable,\nand then we would return the variable.\n\n364\n00:20:01.180 --> 00:20:04.633\nSo when you called the function, this\nvariable gets created and populated, and\n\n365\n00:20:04.633 --> 00:20:07.627\nthen you would have that variable to use,\nonce the function was over,\n\n366\n00:20:07.627 --> 00:20:09.887\nyou could use that variable\nin the rest of your code.\n\n367\n00:20:09.887 --> 00:20:13.110\nIt had the answer or\nthe results of the function.\n\n368\n00:20:13.110 --> 00:20:14.580\nPowerShell works a little bit differently.\n\n369\n00:20:14.580 --> 00:20:16.400\nThere's no return keyword.\n\n370\n00:20:16.400 --> 00:20:19.800\nAnd the function actually\nreturns all output, right?\n\n371\n00:20:19.800 --> 00:20:24.110\nSo everything that the function does,\nget sent back,\n\n372\n00:20:25.820 --> 00:20:29.120\nwhich is good in a way but\nit can also be bad.\n\n373\n00:20:29.120 --> 00:20:33.680\nLike if I leave this message the way\nit is, what'll happen is we'll\n\n374\n00:20:33.680 --> 00:20:38.563\nnever see the message, because it gets\nreturned in a way with an object.\n\n375\n00:20:38.563 --> 00:20:42.735\nAnd now I would have to dig into the\nobject that the function returns to find\n\n376\n00:20:42.735 --> 00:20:44.200\nthat message.\n\n377\n00:20:44.200 --> 00:20:45.460\nThere's a way around that there.\n\n378\n00:20:45.460 --> 00:20:47.830\nWhat I can do is in my function,\n\n379\n00:20:47.830 --> 00:20:50.860\nremember I said write-host as\na way to write out to the screen?\n\n380\n00:20:50.860 --> 00:20:54.190\nWe don't need it in the ISE\nbecause it does it for us?\n\n381\n00:20:55.620 --> 00:20:58.960\nHere, I'm gonna specify write-host.\n\n382\n00:20:58.960 --> 00:21:01.310\nAnd I'm going to put that in the,\nactually, I don't need to for now,\n\n383\n00:21:01.310 --> 00:21:02.470\nwe'll leave that out.\n\n384\n00:21:02.470 --> 00:21:06.797\nSo that write-host, will instead of\nreturning along with all of the other data\n\n385\n00:21:06.797 --> 00:21:11.270\nin the function, it will actually write\nout to the console write-host, right?\n\n386\n00:21:11.270 --> 00:21:14.717\nWe want it to show up in here, right.\n\n387\n00:21:14.717 --> 00:21:21.430\nNow, if we try to run this right now,\nlet's see what's happening at this point.\n\n388\n00:21:21.430 --> 00:21:24.150\nAbsolutely nothing, right?\n\n389\n00:21:24.150 --> 00:21:25.350\nYes, it's just gonna read that.\n\n390\n00:21:26.630 --> 00:21:30.987\nAll right, so and I clear that screen and\nwe'll keep on tracking.\n\n391\n00:21:30.987 --> 00:21:34.310\nSo again, try to follow the logic here.\n\n392\n00:21:34.310 --> 00:21:38.290\nI'm just kinda working my way down,\ntrying to remove things that are specific\n\n393\n00:21:38.290 --> 00:21:42.970\nto the script, and make this a little\nmore generic so that I can reuse it.\n\n394\n00:21:42.970 --> 00:21:46.870\nSo now, I'm like, okay,\nI definitely wanted to say, yes or\n\n395\n00:21:46.870 --> 00:21:50.090\nno to collect that input\nto store in a variable.\n\n396\n00:21:50.090 --> 00:21:53.030\nI also want them to have the ability,\nwhoever's using my function,\n\n397\n00:21:53.030 --> 00:21:56.250\nto have the ability to\ndecide what the message is.\n\n398\n00:21:56.250 --> 00:21:57.657\nMaybe they're collecting information.\n\n399\n00:21:57.657 --> 00:21:59.966\nHey, do you wanna attend\nthe company picnic?\n\n400\n00:21:59.966 --> 00:22:00.860\nYes or no, right?\n\n401\n00:22:00.860 --> 00:22:02.750\nYou can put whatever you want in here.\n\n402\n00:22:02.750 --> 00:22:04.558\nDo you like cheesecake?\n\n403\n00:22:04.558 --> 00:22:05.381\nYes or no?\n\n404\n00:22:05.381 --> 00:22:07.828\nIt can change the message\nto whatever they want,\n\n405\n00:22:07.828 --> 00:22:10.641\nit doesn't affect\nthe functionality of the function.\n\n406\n00:22:10.641 --> 00:22:15.450\nThe function will still do put up a prompt\ncollect yes or no and return their answer.\n\n407\n00:22:17.560 --> 00:22:22.520\nAll right, so then while yes or\nno, not contains answer, repeat.\n\n408\n00:22:22.520 --> 00:22:23.500\nRinse and repeat, right?\n\n409\n00:22:23.500 --> 00:22:26.530\nThat's fine,\nthat's exactly what we wanted to do.\n\n410\n00:22:26.530 --> 00:22:28.050\nWe are good to go there.\n\n411\n00:22:28.050 --> 00:22:29.690\nThat's stays in.\n\n412\n00:22:29.690 --> 00:22:37.233\nAnd then my switch answer, remember this\nstuff was specific to my script, right.\n\n413\n00:22:37.233 --> 00:22:37.926\n&gt;&gt; Moving that.\n\n414\n00:22:37.926 --> 00:22:40.898\n&gt;&gt; Yeah, I don't know what they're\ngonna do if they choose yes, and\n\n415\n00:22:40.898 --> 00:22:43.370\nI don't know what's gonna\nbe done if they choose no.\n\n416\n00:22:43.370 --> 00:22:45.210\nThat's not the job of the function,\n\n417\n00:22:45.210 --> 00:22:47.806\nthat's the job of the script\nthat's calling the function.\n\n418\n00:22:47.806 --> 00:22:51.820\nYou gonna call a function, gather up a yes\nor no, and send it back to the script.\n\n419\n00:22:51.820 --> 00:22:53.794\nAnd then the script can do\nwhatever it wants to do,\n\n420\n00:22:53.794 --> 00:22:55.347\nbased on the results of that function.\n\n421\n00:22:55.347 --> 00:22:58.100\nSo that stays outside of my script.\n\n422\n00:22:58.100 --> 00:23:02.210\nBut I do need to send\nback some information.\n\n423\n00:23:02.210 --> 00:23:05.370\nSo, what are we going to put here?\n\n424\n00:23:05.370 --> 00:23:08.370\nYou could do this a few different ways, I\ntell you the way I kind of like to do it,\n\n425\n00:23:08.370 --> 00:23:11.990\nis spell true correctly,\nis just do a true and false.\n\n426\n00:23:11.990 --> 00:23:13.680\nI could do a yes or no.\n\n427\n00:23:15.620 --> 00:23:20.710\nBut you know true and\nfalse it's pretty straightforward.\n\n428\n00:23:20.710 --> 00:23:23.560\nIt’s built into PowerShell that\nvariable there, that dollar sign true,\n\n429\n00:23:23.560 --> 00:23:24.340\ndollar sign false.\n\n430\n00:23:24.340 --> 00:23:25.470\nIt's nice Boolean.\n\n431\n00:23:25.470 --> 00:23:26.808\nIt's easy, breezy.\n\n432\n00:23:26.808 --> 00:23:29.910\nI don't have to deal with strings,\nquotes, anything like that.\n\n433\n00:23:29.910 --> 00:23:33.740\nSo, I kinda like doing\nsomething like this, all right.\n\n434\n00:23:34.840 --> 00:23:35.452\nAnd so now,\n\n435\n00:23:35.452 --> 00:23:39.808\nwe were really getting close to the point\nwhere I've got a good functioning script.\n\n436\n00:23:39.808 --> 00:23:41.827\nIf somebody calls this script,\n\n437\n00:23:41.827 --> 00:23:45.500\nthey'll be able to pass this\nmessage in if they choose to.\n\n438\n00:23:45.500 --> 00:23:50.160\nIt will print out the message, it will\nprint out, yes or no, it will wait for\n\n439\n00:23:50.160 --> 00:23:52.090\nthem to type something.\n\n440\n00:23:52.090 --> 00:23:55.880\nIf they type anything other than yes no,\nit's gonna repeat the prompt.\n\n441\n00:23:55.880 --> 00:23:59.920\nOnce they type yes no,\nit's gonna detect what they chose and\n\n442\n00:23:59.920 --> 00:24:02.740\nreturn either true or false.\n\n443\n00:24:03.930 --> 00:24:05.830\nLast thing I wanna do,\nI know we're running out of time here so\n\n444\n00:24:05.830 --> 00:24:09.580\nbefore we get to actually test this out,\nthere is one thing I wanna do.\n\n445\n00:24:09.580 --> 00:24:12.480\nI was playing around this the other night,\njust goofing around\n\n446\n00:24:12.480 --> 00:24:17.460\ncuz I know Cherokee you were talking about\nwanting the ability to do the y or n.\n\n447\n00:24:17.460 --> 00:24:19.700\nSo let's add that in here real quick.\n\n448\n00:24:19.700 --> 00:24:23.770\nI'm gonna kinda cheat and do this,\n\n449\n00:24:25.870 --> 00:24:29.410\nand let's copy that one, oops.\n\n450\n00:24:29.410 --> 00:24:31.300\n&gt;&gt; Okay, so just-\n&gt;&gt; We just undid that.\n\n451\n00:24:31.300 --> 00:24:33.160\nAll right, let's copy that in there.\n\n452\n00:24:33.160 --> 00:24:35.030\n&gt;&gt; Keeping your options open.\n\n453\n00:24:35.030 --> 00:24:37.640\n&gt;&gt; Yeah, exactly, it's kinda nice, right?\n\n454\n00:24:37.640 --> 00:24:41.170\nAll without doing any, and the regular\nexpressions really aren't bad, but,\n\n455\n00:24:41.170 --> 00:24:46.680\nI just don't feel like dealing with\nthem right now, so we'll tidy that up.\n\n456\n00:24:46.680 --> 00:24:52.635\nAnd then I also need to add\nup here as a possible choice,\n\n457\n00:24:52.635 --> 00:24:57.178\na Y, and an N, and\nwe should be good to go.\n\n458\n00:24:57.178 --> 00:25:02.760\nAnd then let's change that, with that.\n\n459\n00:25:02.760 --> 00:25:03.533\nAll right, so now,\n\n460\n00:25:03.533 --> 00:25:06.276\ncuz that's kind of like the syntax\nyou normally see with the brackets.\n\n461\n00:25:06.276 --> 00:25:07.980\n&gt;&gt; Yeah, it's familiar.\n\n462\n00:25:07.980 --> 00:25:09.031\n&gt;&gt; Yeah, though it looks good.\n\n463\n00:25:09.031 --> 00:25:12.760\nAnd now you can chose either y or\nyes and I'll get a true.\n\n464\n00:25:12.760 --> 00:25:15.620\nI could either type it no or n.\n\n465\n00:25:15.620 --> 00:25:17.840\nAnd I should return a false.\n\n466\n00:25:17.840 --> 00:25:19.397\nSo, we will leave it right there.\n\n467\n00:25:19.397 --> 00:25:23.015\nAnd then when we come back, we will\ntake a look at testing this out and\n\n468\n00:25:23.015 --> 00:25:25.490\nthen ways we can implement our function.\n\n469\n00:25:25.490 --> 00:25:26.990\n&gt;&gt; All right, well,\nthank you for your time Mike.\n\n470\n00:25:26.990 --> 00:25:28.870\nBut we are gonna have to come back for\na part two.\n\n471\n00:25:28.870 --> 00:25:31.670\nYou don't wanna miss that, but\nfor this show we'll sign out.\n\n472\n00:25:31.670 --> 00:25:32.990\nI've been your host, Cherokee Boose.\n\n473\n00:25:32.990 --> 00:25:33.583\n&gt;&gt; And I'm Mike Rodrick.\n\n474\n00:25:33.583 --> 00:25:35.923\n&gt;&gt; See you next time here at ITProTV.\n\n475\n00:25:35.923 --> 00:25:42.567\n[MUSIC]\n\n476\n00:25:42.567 --> 00:25:44.620\nThank you for watching, ITProTV.\n\n",
          "vimeoId": "243368466"
        },
        {
          "description": "In this episode, we take a look at how to create a function in PowerShell. We demonstrate creating the function, and saving the function in a way that lends itself to reusability.",
          "length": "1719",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-2-function_basics_pt_2-111517-PGM.00_28_27_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-2-function_basics_pt_2-111517-PGM.00_28_27_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-2-function_basics_pt_2-111517-PGM.00_28_27_25.Still001-sm.jpg",
          "title": "Function Basics Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.330 --> 00:00:02.674\nWelcome to IT Pro.TV, I'm your host Don.\n\n2\n00:00:02.674 --> 00:00:04.112\n&gt;&gt; [CROSSTALK]\n\n3\n00:00:04.112 --> 00:00:07.562\n&gt;&gt; [MUSIC]\n\n4\n00:00:07.562 --> 00:00:11.927\nYou're watching IT Pro.TV.\n\n5\n00:00:11.927 --> 00:00:15.000\n&gt;&gt; Welcome, ladies and gentlemen,\nto your PowerShell Scripting series.\n\n6\n00:00:15.000 --> 00:00:17.010\nI'm your show host, Cherokee Boose.\n\n7\n00:00:17.010 --> 00:00:20.428\nThis is actually a part two where\nwe continue taking a look at, well,\n\n8\n00:00:20.428 --> 00:00:21.680\nat function basics.\n\n9\n00:00:21.680 --> 00:00:25.440\nIn the last show we had Mr.\nMike Rodrick come in.\n\n10\n00:00:25.440 --> 00:00:29.700\nWe extracted a piece of a script and\nthen created a function.\n\n11\n00:00:29.700 --> 00:00:31.770\n&gt;&gt; Okay.\n&gt;&gt; So now we're going to be\n\n12\n00:00:31.770 --> 00:00:32.810\nusing this function?\n\n13\n00:00:32.810 --> 00:00:33.600\n&gt;&gt; Hopefully right.\n\n14\n00:00:33.600 --> 00:00:35.031\n&gt;&gt; Okay.\n&gt;&gt; Cuz we didn't get a chance to test it.\n\n15\n00:00:35.031 --> 00:00:37.318\n&gt;&gt; [LAUGH]\n&gt;&gt; We kind of left you sitting on the edge\n\n16\n00:00:37.318 --> 00:00:40.135\nof your seat going,\nis it gonna work, is it gonna work?\n\n17\n00:00:40.135 --> 00:00:41.600\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's find out, right?\n\n18\n00:00:41.600 --> 00:00:42.590\n&gt;&gt; The suspense.\n\n19\n00:00:42.590 --> 00:00:43.540\n&gt;&gt; I know, I know.\n\n20\n00:00:43.540 --> 00:00:46.780\nSo let's go ahead and\ntest out our function here.\n\n21\n00:00:46.780 --> 00:00:51.480\nWhat I'm gonna do now, we're gonna have to\ntalk about how we use functions because\n\n22\n00:00:51.480 --> 00:00:54.090\nthere's a little lengthy discussion\nwe're gonna have to have on that,\n\n23\n00:00:54.090 --> 00:00:56.580\nbut right now just to keep\nthings really simple.\n\n24\n00:00:56.580 --> 00:00:59.970\nSo I've got our function that we wrote,\nright, we added a couple of things,\n\n25\n00:00:59.970 --> 00:01:02.020\nwe took out a couple of things.\n\n26\n00:01:02.020 --> 00:01:06.670\nWe started with this over here,\nthis basically this if statement or\n\n27\n00:01:06.670 --> 00:01:08.950\nwhatever is inside this if statement.\n\n28\n00:01:08.950 --> 00:01:12.900\nWe took that, we tweaked it a little bit,\nmassaged it, until it was more generic,\n\n29\n00:01:12.900 --> 00:01:17.200\nit wasn't specific to that script,\nsomething that I could potentially us\n\n30\n00:01:17.200 --> 00:01:20.840\nin multiple scripts,\nthat's the idea behind our function here.\n\n31\n00:01:20.840 --> 00:01:23.860\nSo at this point,\nI have the script down yes, no prompt.\n\n32\n00:01:23.860 --> 00:01:27.740\nDoesn't matter what you're asking,\nwhether you're wanting to know if you like\n\n33\n00:01:27.740 --> 00:01:32.340\nPowerShell, or if you wanna delete the\nfiles, or if you wanna reset the password,\n\n34\n00:01:32.340 --> 00:01:36.560\nthis is just simply yes, no, has nothing\nto do with whatever we're asking.\n\n35\n00:01:36.560 --> 00:01:39.010\nBut it does give them the ability\nto pass in a message.\n\n36\n00:01:39.010 --> 00:01:41.850\nSo what I'm gonna do is I'm\ngonna execute this code.\n\n37\n00:01:41.850 --> 00:01:45.030\nBecause in order to run this function,\nto test it out,\n\n38\n00:01:45.030 --> 00:01:49.520\nI need to load the definition of\nthe function up into memory, right?\n\n39\n00:01:49.520 --> 00:01:52.610\nRight now,\nI've just typed it into this screen and\n\n40\n00:01:52.610 --> 00:01:55.220\nPowerShell really doesn't\nknow anything about it.\n\n41\n00:01:55.220 --> 00:01:59.740\nSo by running this script file\nthat includes this function,\n\n42\n00:01:59.740 --> 00:02:04.500\nthe definition of the function is\nnow available to me, all right?\n\n43\n00:02:04.500 --> 00:02:06.800\nSo if I come down here\nto my script pane or\n\n44\n00:02:06.800 --> 00:02:11.130\nmy console window I should\nbe able to type in new dash,\n\n45\n00:02:11.130 --> 00:02:16.260\nwell give it focus, new dash, I wanna\ncall it yes or no prompt and it's always\n\n46\n00:02:16.260 --> 00:02:19.816\na good sign once you can tab autofill to\nthe name of your function there, right?\n\n47\n00:02:19.816 --> 00:02:22.220\n&gt;&gt; That's cool.\n&gt;&gt; I get right to the y e tab autofill and\n\n48\n00:02:22.220 --> 00:02:23.280\nwe're good to go.\n\n49\n00:02:23.280 --> 00:02:27.410\nIt says the passing of message so\nlet's do -message and look at that,\n\n50\n00:02:27.410 --> 00:02:29.400\nit knows about my parameters.\n\n51\n00:02:29.400 --> 00:02:34.242\nAnd I'll put Cherokee's favorite,\nhello world, and\n\n52\n00:02:34.242 --> 00:02:38.840\nwe'll execute that function,\nand look at there.\n\n53\n00:02:38.840 --> 00:02:41.210\nI get my message across the top.\n\n54\n00:02:41.210 --> 00:02:43.370\nI've got my yes or no.\n\n55\n00:02:43.370 --> 00:02:48.780\nIf I try to type in mob, it repeats\nthe prompt and doesn't do anything.\n\n56\n00:02:48.780 --> 00:02:54.110\nIf I hit y for yes,\nI get true and it ends the cycle,\n\n57\n00:02:54.110 --> 00:02:57.070\nergo ends my function,\nwhich is what should have happened.\n\n58\n00:02:57.070 --> 00:03:01.232\nIf I type y, the function\nshould return true, all right.\n\n59\n00:03:01.232 --> 00:03:03.810\nSo woohoo, three cheers for a function.\n\n60\n00:03:03.810 --> 00:03:04.780\n&gt;&gt; It's very cool, yeah.\n\n61\n00:03:04.780 --> 00:03:06.100\n&gt;&gt; Yeah, it is working.\n\n62\n00:03:06.100 --> 00:03:11.820\nAll right, so now, I wanna be able\nto use it in my script, all right?\n\n63\n00:03:11.820 --> 00:03:17.330\nSo what I'm gonna do at first is save\nthis script file with my function in it.\n\n64\n00:03:17.330 --> 00:03:19.300\nSo I'm going to save it.\n\n65\n00:03:19.300 --> 00:03:24.990\nAnd I'll call this one, I don't know, my-\n&gt;&gt; Yes no prompt?\n\n66\n00:03:24.990 --> 00:03:28.270\n&gt;&gt; Let's call this one,\nactually because we're gonna use it for\n\n67\n00:03:28.270 --> 00:03:30.360\nother things,\nI'm gonna call it myFunctions.\n\n68\n00:03:30.360 --> 00:03:31.050\n&gt;&gt; Okay.\n\n69\n00:03:31.050 --> 00:03:32.790\n&gt;&gt; All right,\nwe'll call it myFunctions and\n\n70\n00:03:32.790 --> 00:03:36.160\nit's just a .ps1,\njust like any script file.\n\n71\n00:03:36.160 --> 00:03:40.330\nBecause the idea is, and I'll get\nto this here in a minute as we go,\n\n72\n00:03:40.330 --> 00:03:44.340\nbut we're gonna slowly build up more and\nmore functions.\n\n73\n00:03:44.340 --> 00:03:45.821\n&gt;&gt; A collection?\n&gt;&gt; Exactly, right, and\n\n74\n00:03:45.821 --> 00:03:48.305\nnow that I've got this\nfunction thing down pat,\n\n75\n00:03:48.305 --> 00:03:49.058\nwell,\n&gt;&gt; [LAUGH]\n\n76\n00:03:49.058 --> 00:03:51.065\n&gt;&gt; I got one function written, all right.\n\n77\n00:03:51.065 --> 00:03:53.892\nI can see myself looking\nat my other scripts going,\n\n78\n00:03:53.892 --> 00:03:57.523\nwhat else can I create a function\nout of and I can see simply add it.\n\n79\n00:03:57.523 --> 00:04:01.331\nI don't have to have a separate ps1\nfile for every single function.\n\n80\n00:04:01.331 --> 00:04:05.157\nIt's just store them all in the same\nfile here right and you have this nice,\n\n81\n00:04:05.157 --> 00:04:07.184\nlittle as you say collection, right?\n\n82\n00:04:07.184 --> 00:04:08.957\nI use one spot to store these.\n\n83\n00:04:08.957 --> 00:04:12.696\nSo I just called it myFunctions.\n\n84\n00:04:12.696 --> 00:04:16.510\nAnd now, let's see what we wanna do next.\n\n85\n00:04:16.510 --> 00:04:17.710\nHere's the thing, all right?\n\n86\n00:04:17.710 --> 00:04:19.000\nIf I go over to the test, right?.\n\n87\n00:04:19.000 --> 00:04:22.620\nAnd this is where we want to\ntry to use that function.\n\n88\n00:04:22.620 --> 00:04:25.600\nSo I don't need this stuff anymore,\n\n89\n00:04:25.600 --> 00:04:29.160\nbecause that's now all in the function,\nall right?.\n\n90\n00:04:29.160 --> 00:04:31.320\nWe can just get rid of the while loop.\n\n91\n00:04:31.320 --> 00:04:35.320\nAnd the answer, the read host prompt,\ndon't need that anymore.\n\n92\n00:04:35.320 --> 00:04:38.020\nOkay, so we'll clean up some\nof our white space there.\n\n93\n00:04:38.020 --> 00:04:40.200\nI still need this,\nthis was specific to the script.\n\n94\n00:04:40.200 --> 00:04:45.070\nIf there aren't any files, I do not\nwant to prompt them for a yes or no, or\n\n95\n00:04:45.070 --> 00:04:46.630\nto continue or not.\n\n96\n00:04:46.630 --> 00:04:53.540\nSo I want to use that function,\nwe simply call that function by name.\n\n97\n00:04:53.540 --> 00:04:56.610\nI type in new-yesnoprompt.\n\n98\n00:04:56.610 --> 00:05:00.330\nLook at that,\nit shows up in my drop down list there.\n\n99\n00:05:00.330 --> 00:05:04.230\nI'm gonna go ahead and\nhit that tab autofill.\n\n100\n00:05:04.230 --> 00:05:07.430\nAnd then I know that I need\na message to go with that.\n\n101\n00:05:07.430 --> 00:05:13.390\nAnd we'll put in here archive files,\n\n102\n00:05:13.390 --> 00:05:17.410\nand that's a question, and\nwe'll put a little envelope there.\n\n103\n00:05:17.410 --> 00:05:22.140\nAnd then,\nour switch based on the answer that comes\n\n104\n00:05:22.140 --> 00:05:26.650\nback, so let's store this, right?\n\n105\n00:05:26.650 --> 00:05:28.160\nI have to put that somewhere.\n\n106\n00:05:29.640 --> 00:05:32.200\nActually, let's change it up, cuz I\nthink I used answer in the other one.\n\n107\n00:05:33.575 --> 00:05:38.390\nLet's use something different just so\nwe can kinda keep ourselves straight.\n\n108\n00:05:40.363 --> 00:05:44.320\nWe'll call a response something like that,\nall right?\n\n109\n00:05:44.320 --> 00:05:45.860\nAnd I do need an equal sign there.\n\n110\n00:05:45.860 --> 00:05:50.360\nIt is going to scream at me if I don't,\nand not a plus sign.\n\n111\n00:05:50.360 --> 00:05:53.040\nSo we'll say,\nwe'll create a variable call response and\n\n112\n00:05:53.040 --> 00:05:55.640\nwe'll pop up a new prompt\nusing our function.\n\n113\n00:05:55.640 --> 00:05:57.990\nWe'll call the function that I'm on,\nwe'll pass a message to it.\n\n114\n00:05:57.990 --> 00:06:00.990\nWhat should happen is\nthe function executes.\n\n115\n00:06:00.990 --> 00:06:03.660\nIt returns true or\nfalse based on what they typed and\n\n116\n00:06:03.660 --> 00:06:05.510\nthen it stores that in response.\n\n117\n00:06:05.510 --> 00:06:09.000\nAnd then my response variable is the one\nthat I'm gonna do the switch on to\n\n118\n00:06:09.000 --> 00:06:11.720\nsee if it's yes or, wait.\n\n119\n00:06:11.720 --> 00:06:12.990\nYes or no.\n\n120\n00:06:12.990 --> 00:06:14.650\n&gt;&gt; True or false is what we had before.\n\n121\n00:06:14.650 --> 00:06:18.290\n&gt;&gt; It's gonna be true or false, the\nfunction, right, we just ran the function\n\n122\n00:06:18.290 --> 00:06:22.830\nand remember it's returning either true or\nfalse, not yes or no.\n\n123\n00:06:22.830 --> 00:06:27.590\nSo I need to tweak my switch a little bit.\n\n124\n00:06:27.590 --> 00:06:29.020\n&gt;&gt; So this might be a silly question, but\n\n125\n00:06:29.020 --> 00:06:33.370\nwhy wouldn't you just copy and\npaste it from that function tab?\n\n126\n00:06:33.370 --> 00:06:34.200\n&gt;&gt; I could.\n\n127\n00:06:34.200 --> 00:06:37.510\nI feel like sometimes\nit's quicker to type.\n\n128\n00:06:37.510 --> 00:06:38.430\n&gt;&gt; Okay.\n&gt;&gt; You know?\n\n129\n00:06:38.430 --> 00:06:40.072\n&gt;&gt; That's fine I just\ndidn't know if I was.\n\n130\n00:06:40.072 --> 00:06:41.247\n[CROSSTALK]\n&gt;&gt; You definitely could,\n\n131\n00:06:41.247 --> 00:06:41.908\nand that's why I like using true or\nfalse cuz I don't have to think\n\n132\n00:06:41.908 --> 00:06:42.465\nwait what was the possible\noutcomes of the function?\n\n133\n00:06:42.465 --> 00:06:48.190\nWas it yes or no?\n\n134\n00:06:48.190 --> 00:06:50.560\nOr was it maybe or true or false.\n\n135\n00:06:50.560 --> 00:06:52.040\nI can just go ahead and\nput those in there.\n\n136\n00:06:53.660 --> 00:06:57.370\nSo now we should be able to base\nour switch on the response.\n\n137\n00:06:57.370 --> 00:06:59.250\nIt's either gonna be true or false.\n\n138\n00:06:59.250 --> 00:07:01.820\nAnd if it's true,\nwe should get operation completed.\n\n139\n00:07:01.820 --> 00:07:05.430\nIf it's false,\nwe should get operation cancelled.\n\n140\n00:07:05.430 --> 00:07:09.000\nSo let's say our test script, so again,\n\n141\n00:07:09.000 --> 00:07:13.090\nthis is our script that we have been\nusing for the last couple of episodes.\n\n142\n00:07:13.090 --> 00:07:19.230\nIt now, instead of popping up a dialogue\nor popping up a prompt calls my function.\n\n143\n00:07:19.230 --> 00:07:24.225\nThey should give me the same functionality\nif that's the way to say it.\n\n144\n00:07:24.225 --> 00:07:25.440\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, so\n\n145\n00:07:25.440 --> 00:07:28.710\nlet's try it out,\nwe're gonna say test .ps1.\n\n146\n00:07:28.710 --> 00:07:33.950\nRemember, I've got the default\nvalues set to the path script,\n\n147\n00:07:33.950 --> 00:07:37.150\nas well as the number of days, so\nI don't have to put any of that.\n\n148\n00:07:37.150 --> 00:07:37.810\nWe can just call it.\n\n149\n00:07:39.150 --> 00:07:41.030\nAnd it can use the default values.\n\n150\n00:07:41.030 --> 00:07:45.350\nAnd look, 11 files have not been\nmodified from the script's directory.\n\n151\n00:07:45.350 --> 00:07:47.660\nThere's the 11 files.\n\n152\n00:07:47.660 --> 00:07:52.408\nAnd I give my archive files yes or\nno, and if I type Bob,\n\n153\n00:07:52.408 --> 00:07:55.416\nit says that is not a valid answer.\n\n154\n00:07:55.416 --> 00:07:59.190\nIf I type y for yes,\nI get operation completed.\n\n155\n00:07:59.190 --> 00:08:03.019\nSo I now know That this part is working,\nright?\n\n156\n00:08:03.019 --> 00:08:05.338\nAnd this is a great way\nto test things out,\n\n157\n00:08:05.338 --> 00:08:09.540\nif you pay attention to what I did here,\nthis is a very common technique.\n\n158\n00:08:09.540 --> 00:08:13.743\nI want to test this out, but\nI don't want to actually move the file.\n\n159\n00:08:13.743 --> 00:08:17.323\nMaybe you're creating a script\nto reset passwords or\n\n160\n00:08:17.323 --> 00:08:23.420\ndelete user accounts that haven't been\nlogged on for the last 180 days, right?\n\n161\n00:08:23.420 --> 00:08:25.540\nWell, before you run your script,\n\n162\n00:08:25.540 --> 00:08:29.225\nyou want to make sure it's doing\nwhat you're supposed to do.\n\n163\n00:08:29.225 --> 00:08:32.975\nSo this is something I do all the time,\nis just pop out a little string, right?\n\n164\n00:08:32.975 --> 00:08:37.230\nEven though I know when it's true,\nit should delete those files, right?\n\n165\n00:08:37.230 --> 00:08:39.147\nOr delete those user accounts,\n\n166\n00:08:39.147 --> 00:08:42.771\nwait until you know the script\nis doing what you want it to do.\n\n167\n00:08:42.771 --> 00:08:44.331\n&gt;&gt; Go back and fix it.\n&gt;&gt; And then just go back and\n\n168\n00:08:44.331 --> 00:08:45.635\ntake this part out, right?\n\n169\n00:08:45.635 --> 00:08:50.310\nNow that I know it's working,\nI take this out, and I save my script, and\n\n170\n00:08:50.310 --> 00:08:51.393\nI'm good to go.\n\n171\n00:08:51.393 --> 00:08:56.337\nAnd I didn't risk deleting all user\naccounts because my script was incorrect,\n\n172\n00:08:56.337 --> 00:08:59.010\nso just a little tip for\nyou guys out there.\n\n173\n00:09:00.710 --> 00:09:05.269\nComment out your action part ,and\njust let it return a string or\n\n174\n00:09:05.269 --> 00:09:07.688\nsomething, a flag of some kind.\n\n175\n00:09:07.688 --> 00:09:09.343\nSo that you know what it's doing, but\n\n176\n00:09:09.343 --> 00:09:12.190\nyou're not actually performing the action,\nright?\n\n177\n00:09:12.190 --> 00:09:13.365\nOr do it in a test environment,\n\n178\n00:09:13.365 --> 00:09:15.598\nwhere you don't care if you\ndelete all the user accounts.\n\n179\n00:09:15.598 --> 00:09:16.380\n&gt;&gt; There you go, [LAUGH].\n\n180\n00:09:16.380 --> 00:09:19.585\nBut even then, I mean,\nif you had to recreate that situation,\n\n181\n00:09:19.585 --> 00:09:22.258\nyou'd have to replicate the users,\nand yeah, so.\n\n182\n00:09:22.258 --> 00:09:23.240\n&gt;&gt; Yeah, it would be a pain.\n\n183\n00:09:23.240 --> 00:09:25.718\nJust like here, I would have to move the\nfiles back before I could test it again.\n\n184\n00:09:25.718 --> 00:09:28.731\nAnd if I'm running this five,\nsix, seven times in a row,\n\n185\n00:09:28.731 --> 00:09:33.359\ntesting little things, then yeah, that's\ngoing to get real frustrating really fast.\n\n186\n00:09:34.550 --> 00:09:36.549\nAll right, but now, at this point,\n\n187\n00:09:36.549 --> 00:09:39.785\nwe've got a pretty cool little\nfunction that does the job.\n\n188\n00:09:39.785 --> 00:09:40.360\n&gt;&gt; Yeah, we know it works, so.\n\n189\n00:09:40.360 --> 00:09:45.556\n&gt;&gt; Right, and let's take a look,\nlet's open up my original archive files,\n\n190\n00:09:45.556 --> 00:09:50.354\nso the one we started with here,\nand let's take a look at something.\n\n191\n00:09:50.354 --> 00:09:54.838\nWhat I wanna do is kind of\ncompare apples and apples, so\n\n192\n00:09:54.838 --> 00:10:00.222\nwe will start there, and then this one,\nwe will line this guy up.\n\n193\n00:10:00.222 --> 00:10:05.380\nAll right, so, here's our original code,\n\n194\n00:10:05.380 --> 00:10:11.501\nand here's our new code,\noriginal code, new code.\n\n195\n00:10:11.501 --> 00:10:15.460\nAnd I've got some extra white space in\nthere that I could definitely tidy up.\n\n196\n00:10:15.460 --> 00:10:21.005\nBut you could see that just from a\nreadability standpoint this starts to get,\n\n197\n00:10:21.005 --> 00:10:22.122\nit's not bad.\n\n198\n00:10:22.122 --> 00:10:26.690\nBut this is even neater and\ntidier, encapsulated, right?\n\n199\n00:10:26.690 --> 00:10:31.402\nBecause somebody can look at this and\ngo $Response = New Yes/NoPrompt, so\n\n200\n00:10:31.402 --> 00:10:33.329\nthey're gonna prompt, right?\n\n201\n00:10:33.329 --> 00:10:34.921\nI can see from that name there,\n\n202\n00:10:34.921 --> 00:10:37.929\nthey're gonna prompt something\nabout archiving files.\n\n203\n00:10:37.929 --> 00:10:41.945\nAnd it's gonna store that in Response and\nthen compare that response, so\n\n204\n00:10:41.945 --> 00:10:44.939\nit's still very readable,\nbut it's a lot less code.\n\n205\n00:10:44.939 --> 00:10:49.507\nWhere again I could tidy some of this up,\none, two, three, four, five, six,\n\n206\n00:10:49.507 --> 00:10:51.810\nseven, eight, nine, ten lines or so.\n\n207\n00:10:51.810 --> 00:10:56.377\nVersus one, two, three, four,\nfive, six, so almost half, right?\n\n208\n00:10:56.377 --> 00:10:58.243\nAnd if I did this in a long strip,\n\n209\n00:10:58.243 --> 00:11:02.270\nthen I've got several places where\nI can go into functions instead.\n\n210\n00:11:02.270 --> 00:11:06.974\nI can make my scripts a little bit nicer\nand neater and easier to read, but\n\n211\n00:11:06.974 --> 00:11:08.993\nthat's really not why I do it.\n\n212\n00:11:08.993 --> 00:11:13.112\nYou don't create functions solely\nto make your scripts look good.\n\n213\n00:11:13.112 --> 00:11:17.121\nBut to encapsulate that functionality,\n\n214\n00:11:17.121 --> 00:11:21.586\nbecause now anywhere I\nneed a yes/no prompt,\n\n215\n00:11:21.586 --> 00:11:27.096\nI know it will call it up, so\nall's good and we're done.\n\n216\n00:11:27.096 --> 00:11:27.910\n&gt;&gt; I don't think so.\n\n217\n00:11:27.910 --> 00:11:31.478\n&gt;&gt; Yeah, we're not, there is a little\nbit more that we need to talk about.\n\n218\n00:11:31.478 --> 00:11:33.448\nI mentioned it earlier, and\n\n219\n00:11:33.448 --> 00:11:37.148\nthat is talking about\nactually using this function.\n\n220\n00:11:37.148 --> 00:11:40.349\nWell, Mike, you've already used it,\nit was great, it worked good.\n\n221\n00:11:40.349 --> 00:11:43.004\n&gt;&gt; Well, we saw a generic capability here.\n\n222\n00:11:43.004 --> 00:11:45.479\nBut are we gonna look at something,\nlike pull it into something more specific?\n\n223\n00:11:45.479 --> 00:11:46.935\n&gt;&gt; No, probably not,\nwe'll stick with this.\n\n224\n00:11:46.935 --> 00:11:48.361\n&gt;&gt; Okay.\n&gt;&gt; But look at this,\n\n225\n00:11:48.361 --> 00:11:50.917\nI'm gonna open up PowerShell.\n\n226\n00:11:50.917 --> 00:11:58.060\nAnd I'm gonna say, new-yes,\nI'm tabbing, and nothing's happening.\n\n227\n00:11:58.060 --> 00:11:58.934\n&gt;&gt; Your tab bar is broken.\n\n228\n00:11:58.934 --> 00:12:00.087\n&gt;&gt; My tab bar is broken, right?\n\n229\n00:12:00.087 --> 00:12:02.590\n&gt;&gt; [LAUGH]\n&gt;&gt; It's not there.\n\n230\n00:12:02.590 --> 00:12:06.574\nWhen we loaded this function\nup by running this script,\n\n231\n00:12:06.574 --> 00:12:11.259\nit loads up in the memory, and\nit's available for this session.\n\n232\n00:12:11.259 --> 00:12:17.810\nIf I open up a new script,\nNew-Yes/NoPrompt, well, it's right there.\n\n233\n00:12:17.810 --> 00:12:21.498\nBut notice when I opened up PowerShell,\nthe console, a separate session,\n\n234\n00:12:21.498 --> 00:12:23.931\na different host,\nthat function wasn't there.\n\n235\n00:12:23.931 --> 00:12:26.668\nAll right, well, that's not ideal,\nthat's kind of bad.\n\n236\n00:12:26.668 --> 00:12:30.250\n&gt;&gt; Not cool, [LAUGH], so how do we fix it?\n\n237\n00:12:30.250 --> 00:12:32.070\n&gt;&gt; Shoot, well, what happens if I do this?\n\n238\n00:12:32.070 --> 00:12:36.420\nIf I close the ISE,\nnow we're gonna open ISE back up.\n\n239\n00:12:36.420 --> 00:12:39.971\nSo it's tomorrow, I'm so happy,\nI went home last night, and\n\n240\n00:12:39.971 --> 00:12:43.121\nhad an extra slice of pizza\nbecause my function worked.\n\n241\n00:12:43.121 --> 00:12:47.160\nSo I come in today thinking about all\nthe places I could use that function.\n\n242\n00:12:47.160 --> 00:12:50.574\nSo I start up a new script,\nNew-Yes/NoPrompt,\n\n243\n00:12:50.574 --> 00:12:52.940\nto show my buddy that I got it done.\n\n244\n00:12:52.940 --> 00:12:55.178\nNew-Yes.\n\n245\n00:12:55.178 --> 00:12:56.141\n&gt;&gt; A Y.\n\n246\n00:12:56.141 --> 00:12:56.641\n&gt;&gt; No.\n\n247\n00:12:58.998 --> 00:13:03.713\nYeah, down here I've mistyped it,\nsorry, but even down here, New-Yes.\n\n248\n00:13:03.713 --> 00:13:05.011\n&gt;&gt; Nothing.\n\n249\n00:13:05.011 --> 00:13:09.254\n&gt;&gt; There's nothing, there's no tab,\nit's gone, it is gone,\n\n250\n00:13:09.254 --> 00:13:12.225\nwe loaded it up in a memory for\nthat session.\n\n251\n00:13:12.225 --> 00:13:15.399\nI killed that session by closing the ISE,\n\n252\n00:13:15.399 --> 00:13:20.400\nI've opened up the ISE again,\nbrand new session, no function.\n\n253\n00:13:20.400 --> 00:13:22.895\nI'm glad we saved it in that\nlittle script file, right?\n\n254\n00:13:22.895 --> 00:13:23.406\n&gt;&gt; Right.\n\n255\n00:13:23.406 --> 00:13:26.425\n&gt;&gt; And that's exactly why we did that,\nbecause technically,\n\n256\n00:13:26.425 --> 00:13:28.864\nI could type a function\ndown here in the console.\n\n257\n00:13:28.864 --> 00:13:33.037\nAnd I could do a one liner and\nwe could make a new function, oops,\n\n258\n00:13:33.037 --> 00:13:35.992\nwe could make a new\nfunction right down here.\n\n259\n00:13:35.992 --> 00:13:38.650\nVery simple, and add a couple of numbers,\nand it would be available for\n\n260\n00:13:38.650 --> 00:13:40.230\nthat session, maybe that's all I need.\n\n261\n00:13:40.230 --> 00:13:43.226\nBut normally, once I take\nthe trouble to write that function,\n\n262\n00:13:43.226 --> 00:13:44.760\nI want to use it in other places.\n\n263\n00:13:44.760 --> 00:13:48.066\nSo that's the next thing we need to\ndiscuss is now that I've got this really\n\n264\n00:13:48.066 --> 00:13:49.493\ncool function, how do I use it?\n\n265\n00:13:49.493 --> 00:13:53.123\nHow do I make it available to me,\nto other scripts that I'm writing, or\n\n266\n00:13:53.123 --> 00:13:54.763\neven to other users, if I want?\n\n267\n00:13:54.763 --> 00:13:57.961\nOther admins on the network that may\nbe wanting to use this function, or\n\n268\n00:13:57.961 --> 00:14:00.290\nother functions that I've written.\n\n269\n00:14:00.290 --> 00:14:02.595\nSo that is our next challenge.\n\n270\n00:14:02.595 --> 00:14:09.785\nAll right, so, choice number one is going\nto be loaded up into memory, right?\n\n271\n00:14:09.785 --> 00:14:14.772\nI can open up that script,\nOpen, my, what'd we call it?\n\n272\n00:14:14.772 --> 00:14:18.442\nMyFunctions, yeah, myFunctions, right?\n\n273\n00:14:18.442 --> 00:14:23.880\nAnd I can execute it and\nnow it's in memory again.\n\n274\n00:14:23.880 --> 00:14:28.711\nSo if I come over here and\nI do New-Yes/NoPrompt, there it is.\n\n275\n00:14:28.711 --> 00:14:33.219\nI could go down here and\ndo New-Yes/NoPrompt, and there it is.\n\n276\n00:14:33.219 --> 00:14:38.330\nSo if I open up PowerShell,\nNew-Yes/NoPrompt, I get nothing, again,\n\n277\n00:14:38.330 --> 00:14:43.710\nbecause it's strictly stored in memory for\nthis particular session.\n\n278\n00:14:43.710 --> 00:14:47.851\nSo, if you wanted to,\nevery time you open up PowerShell,\n\n279\n00:14:47.851 --> 00:14:53.271\nyou could call this script, even from\nmy console I could call, I could run.\n\n280\n00:14:53.271 --> 00:14:57.275\nLet's see where I am at now,\nlet's see, c:\\.\n\n281\n00:14:59.658 --> 00:15:00.310\nWhere is that guy?\n\n282\n00:15:00.310 --> 00:15:03.499\nActually, I'm already in scripts,\naren't I?\n\n283\n00:15:03.499 --> 00:15:07.906\nYeah, so I could run, let me get this so\n\n284\n00:15:07.906 --> 00:15:13.258\nthese guys can see it, \\MyFunctions.ps1.\n\n285\n00:15:13.258 --> 00:15:19.218\nAll right, and there it is, and\nnow it, oops, I ran the wrong one.\n\n286\n00:15:19.218 --> 00:15:21.855\nThat's what happens when you have\na couple things named very similar.\n\n287\n00:15:21.855 --> 00:15:25.543\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's see, MyFunctions, there we go,\n\n288\n00:15:25.543 --> 00:15:32.600\nand now New-Yes/NoPrompt is actually not\navailable, it didn't even run it there.\n\n289\n00:15:32.600 --> 00:15:37.670\nSo this is the problem you run into,\nit's challenging to be able to use that,\n\n290\n00:15:37.670 --> 00:15:41.263\nand l'm not gonna run this\nevery time l open up the ISE.\n\n291\n00:15:41.263 --> 00:15:45.265\n&gt;&gt; Well, Mike, in an earlier show,\nwe had looked at partial profiles.\n\n292\n00:15:45.265 --> 00:15:46.788\nWould this be a candidate,\n\n293\n00:15:46.788 --> 00:15:50.841\nlike if you were using these functions\noften to attach them to a profile?\n\n294\n00:15:50.841 --> 00:15:53.464\n&gt;&gt; Absolutely, and\nwe'll definitely get to that.\n\n295\n00:15:53.464 --> 00:15:58.433\nLet's take one step back, before we go\nthere, another way that you could use\n\n296\n00:15:58.433 --> 00:16:03.560\nthese, and let's open up It really\ndoesn't even matter what script.\n\n297\n00:16:03.560 --> 00:16:04.953\nI'm just gonna grab the first one here.\n\n298\n00:16:04.953 --> 00:16:06.803\nRemember this one from a long time ago.\n\n299\n00:16:06.803 --> 00:16:08.620\nThat was back when we were first-\n&gt;&gt; My gosh.\n\n300\n00:16:08.620 --> 00:16:09.602\n&gt;&gt; Learning PowerShell.\n\n301\n00:16:09.602 --> 00:16:10.269\n&gt;&gt; You were so young then.\n\n302\n00:16:10.269 --> 00:16:11.626\n&gt;&gt; I know, right.\n\n303\n00:16:11.626 --> 00:16:14.742\nWell, if I open up this script and\nI try to do,\n\n304\n00:16:14.742 --> 00:16:18.192\nactually I think I didn't\nkill my session that I.\n\n305\n00:16:18.192 --> 00:16:19.620\nYeah, so let me close my session.\n\n306\n00:16:21.490 --> 00:16:24.580\nSo, we can see how this will\nactually work in the real world.\n\n307\n00:16:24.580 --> 00:16:25.710\nIf I open up a new session.\n\n308\n00:16:28.450 --> 00:16:33.030\nAnd I open up any old script that I\nwant to try and use that function in.\n\n309\n00:16:34.330 --> 00:16:37.459\nLike this one maybe I want to add\na yes no prompt to my addition.\n\n310\n00:16:37.459 --> 00:16:40.018\nAre you sure you want\nto add those numbers?\n\n311\n00:16:40.018 --> 00:16:41.300\nIf we want to.\n\n312\n00:16:41.300 --> 00:16:45.120\nIf I tried new-yes no\nprompt it's not there\n\n313\n00:16:45.120 --> 00:16:47.860\nbecause we know we haven't run\nthe script or anything like that.\n\n314\n00:16:47.860 --> 00:16:52.294\nSo another way to do it rather than\nrunning that script every single time,\n\n315\n00:16:52.294 --> 00:16:54.797\nactually let me take a step further back,\n\n316\n00:16:54.797 --> 00:16:58.466\none way I could do it is to include\nthe function in the script.\n\n317\n00:16:58.466 --> 00:17:05.754\nI could come over here and [INAUDIBLE]\n&gt;&gt; [LAUGH]\n\n318\n00:17:05.754 --> 00:17:06.770\n&gt;&gt; Find functions.\n\n319\n00:17:06.770 --> 00:17:09.781\nI could take this function and\n\n320\n00:17:09.781 --> 00:17:16.390\nI could add it, To the script itself.\n\n321\n00:17:16.390 --> 00:17:20.270\nAnd now I would be able to use\nthat function in this script.\n\n322\n00:17:20.270 --> 00:17:23.320\nI would actually have to save this.\n\n323\n00:17:23.320 --> 00:17:24.370\nWhich I really don't wanna do.\n\n324\n00:17:24.370 --> 00:17:26.367\nI don't wanna change this file.\n\n325\n00:17:26.367 --> 00:17:28.550\nI would need to save that script.\n\n326\n00:17:28.550 --> 00:17:31.802\nAnd then I would need to execute\nthe script at least once to load up\n\n327\n00:17:31.802 --> 00:17:32.717\nthe definition.\n\n328\n00:17:32.717 --> 00:17:36.880\nEvery time the script runs,\nthis would get executed first.\n\n329\n00:17:36.880 --> 00:17:39.435\nAnd so for the rest of the script.\n\n330\n00:17:39.435 --> 00:17:42.184\nThis function would be available,\nbut at this point,\n\n331\n00:17:42.184 --> 00:17:45.709\nif I'm gonna copy and paste the function\ninto every one of my scripts,\n\n332\n00:17:45.709 --> 00:17:48.907\nwhat was the point of creating\nthe function in the first place?\n\n333\n00:17:48.907 --> 00:17:50.830\n&gt;&gt; Right, extra-\n&gt;&gt; Save me a little typing maybe.\n\n334\n00:17:50.830 --> 00:17:54.080\n&gt;&gt; Yeah, you're just like creating extra\nwork by bringing it in every time.\n\n335\n00:17:54.080 --> 00:17:57.746\n&gt;&gt; Yeah, you know you really not saving\nanything, or not a lot, by doing that.\n\n336\n00:17:57.746 --> 00:17:59.730\nYou're getting a little of reusability.\n\n337\n00:17:59.730 --> 00:18:03.040\nThe code is already typed,\nI know it worked, and I can just copy and\n\n338\n00:18:03.040 --> 00:18:05.300\npaste it in there and\nmaybe that's the way you wanna do it.\n\n339\n00:18:05.300 --> 00:18:09.773\nIf you don't use functions a lot, I've got\none file called my functions, and I'll\n\n340\n00:18:09.773 --> 00:18:13.936\njust copy and paste the function I need\ninto my script, and you're good to go.\n\n341\n00:18:13.936 --> 00:18:16.889\nAgain, you won't have the tab auto fill,\n\n342\n00:18:16.889 --> 00:18:20.838\nuntil you execute it at least once but\nyou don't need it.\n\n343\n00:18:20.838 --> 00:18:24.003\nI mean if you don't rely on tab auto\nfill then you can type it all out and\n\n344\n00:18:24.003 --> 00:18:26.841\nwhen you execute the script,\nit will load it up into memory and\n\n345\n00:18:26.841 --> 00:18:29.380\nit will available for\nthe rest of the script.\n\n346\n00:18:29.380 --> 00:18:30.920\nThat's not what we wanna do, right?\n\n347\n00:18:30.920 --> 00:18:33.870\nWe wanna get a little\nbit fancier than that.\n\n348\n00:18:33.870 --> 00:18:38.825\nSo another way, I could make that function\navailable to the script Is do what we call\n\n349\n00:18:38.825 --> 00:18:40.130\nDot-sourcing.\n\n350\n00:18:40.130 --> 00:18:44.320\nThe file,\nthe script that includes the function.\n\n351\n00:18:44.320 --> 00:18:45.160\nI know the terms.\n\n352\n00:18:45.160 --> 00:18:47.960\nSo you guys have to watch\nthis a couple of times.\n\n353\n00:18:47.960 --> 00:18:50.608\nTo make that function\navailable to this script,\n\n354\n00:18:50.608 --> 00:18:53.620\nI would Dot-source the other script.\n\n355\n00:18:53.620 --> 00:18:58.570\nThe one that includes the function In\nhere, I'll show you what I mean, right?\n\n356\n00:18:58.570 --> 00:19:02.198\nSo I come in here and basically\njust put a dot and then the path.\n\n357\n00:19:02.198 --> 00:19:10.739\nC:\\users\\Mike\\Documents\\Scripts\\MyFunctio-\n\n358\n00:19:10.739 --> 00:19:14.130\nns.ps1, and\n\n359\n00:19:14.130 --> 00:19:19.490\nso now, when this script executes,\nit will go grab this file.\n\n360\n00:19:19.490 --> 00:19:23.305\nBasically it's like an include statement\nfrom other languages if you have any\n\n361\n00:19:23.305 --> 00:19:24.585\nfamiliarity with those.\n\n362\n00:19:24.585 --> 00:19:29.307\nYou're just saying hey when you run this\nscript include everything that's in this\n\n363\n00:19:29.307 --> 00:19:30.580\nscript right?\n\n364\n00:19:30.580 --> 00:19:35.970\nAnd so now any functions available in\nthere are gonna be available to my script.\n\n365\n00:19:35.970 --> 00:19:37.840\nBut here's the problem, and\nI'll go ahead and save this.\n\n366\n00:19:37.840 --> 00:19:41.534\nThat's an easy enough change to undo.\n\n367\n00:19:41.534 --> 00:19:46.977\nAll right, let's try new-yes no prompt.\n\n368\n00:19:46.977 --> 00:19:48.284\nAnd you'll see it not there.\n\n369\n00:19:48.284 --> 00:19:50.220\nAll right, my tab autofill's not working.\n\n370\n00:19:51.890 --> 00:19:54.149\nIf I execute this script.\n\n371\n00:19:56.720 --> 00:20:02.417\nNow I try to modify the script new-yes\nno prompt to see that it's available,\n\n372\n00:20:02.417 --> 00:20:07.240\nbecause when I ran the script\ncalled addition it .source this and\n\n373\n00:20:07.240 --> 00:20:09.590\nit's available, right?\n\n374\n00:20:09.590 --> 00:20:13.826\nSo that's why I was saying when you\n.source the tab auto fills not there,\n\n375\n00:20:13.826 --> 00:20:16.500\nthe function itself is not defined yet.\n\n376\n00:20:16.500 --> 00:20:18.363\nUntil you actually execute the script.\n\n377\n00:20:18.363 --> 00:20:18.971\n&gt;&gt; Okay.\n\n378\n00:20:18.971 --> 00:20:23.000\n&gt;&gt; So if you don't need it\nlike I can open up a file.\n\n379\n00:20:23.000 --> 00:20:27.693\nThis one erase and\nI can do my dot sourcing up at the top,\n\n380\n00:20:27.693 --> 00:20:30.820\nI can type my function down here.\n\n381\n00:20:30.820 --> 00:20:36.280\nMaybe I don't have my new I do know\nbecause it's already loaded into memory so\n\n382\n00:20:36.280 --> 00:20:38.297\nthat's not a good example.\n\n383\n00:20:38.297 --> 00:20:43.209\nLet's do this let's close it up I think\nyou get the idea I'll do it one more\n\n384\n00:20:43.209 --> 00:20:48.203\ntime just to show you but if you do\nthe dot sourcing the problem is it doesn't\n\n385\n00:20:48.203 --> 00:20:51.532\nactually load it up until\nthe script is executed so\n\n386\n00:20:51.532 --> 00:20:54.970\nwhat I was trying to show\nyou was if I took this file.\n\n387\n00:20:56.150 --> 00:20:59.230\nAnd that one already has\nthe dot sourcing in it so.\n\n388\n00:20:59.230 --> 00:21:00.420\nBut we haven't run it yet, right.\n\n389\n00:21:00.420 --> 00:21:03.870\nSo this one has dot sourcing but\nwe haven't run it yet.\n\n390\n00:21:03.870 --> 00:21:05.890\nSo new yes no doesn't come up.\n\n391\n00:21:05.890 --> 00:21:14.629\nThat's not gonna prevent me from using\nit all right I can do yesnoprompt.\n\n392\n00:21:14.629 --> 00:21:18.565\nI can do -message I don't have\nany tab autofill help but\n\n393\n00:21:18.565 --> 00:21:21.012\nI can still technically use this.\n\n394\n00:21:23.244 --> 00:21:27.623\nAll right cuz when I execute this script,\nit's gonna run this,\n\n395\n00:21:27.623 --> 00:21:32.250\nwhich will make new-yesnoprompt\navailable to the script.\n\n396\n00:21:32.250 --> 00:21:34.240\nSo even though I can't use it yet.\n\n397\n00:21:34.240 --> 00:21:39.450\nIf I try new-yesnoprompt,\nI get a whole lot of nothing.\n\n398\n00:21:39.450 --> 00:21:44.653\nBut if I execute the script,\nall right, it .sourced.\n\n399\n00:21:44.653 --> 00:21:47.363\nAnd look the new-yesnoprompt\nis working just fine.\n\n400\n00:21:47.363 --> 00:21:50.380\nThere is my hello world MIS or no.\n\n401\n00:21:51.480 --> 00:21:53.299\nSo that's another way you can do it.\n\n402\n00:21:53.299 --> 00:21:55.380\nYou can dot source in the script.\n\n403\n00:21:55.380 --> 00:21:58.902\nIt's not my favorite way to do\nthings because I rely on my tab.\n\n404\n00:21:58.902 --> 00:21:59.981\n&gt;&gt; You like that tab.\n\n405\n00:21:59.981 --> 00:22:01.190\n&gt;&gt; I really do.\n\n406\n00:22:01.190 --> 00:22:02.961\nIt helps me know that\nI've spelled it right.\n\n407\n00:22:02.961 --> 00:22:05.110\nThat it exists, that it can find it.\n\n408\n00:22:05.110 --> 00:22:08.230\nIt helps me find the properties\nthat go with an object or\n\n409\n00:22:08.230 --> 00:22:10.860\nthe parameters that go with the function.\n\n410\n00:22:10.860 --> 00:22:14.170\nI mean I really do rely\non that tab autofll.\n\n411\n00:22:14.170 --> 00:22:17.297\nSo this is definitely not the method for\nme.\n\n412\n00:22:17.297 --> 00:22:19.860\nBut it might work just fine for\nyou, right?\n\n413\n00:22:19.860 --> 00:22:20.962\nIf that's what you wanna do.\n\n414\n00:22:20.962 --> 00:22:23.547\nIt's very simple,\nyou just include this one line and\n\n415\n00:22:23.547 --> 00:22:25.510\nnow all those functions are available.\n\n416\n00:22:26.650 --> 00:22:27.830\nSo let's think about this Cherokee.\n\n417\n00:22:27.830 --> 00:22:32.800\nNow to your point, you mentioned\nsomething about the profile, right?\n\n418\n00:22:32.800 --> 00:22:36.780\nAnd if we think about it,\na profile is just a script, okay?\n\n419\n00:22:36.780 --> 00:22:38.834\nA profile is just a .ps1 file.\n\n420\n00:22:38.834 --> 00:22:43.672\nAnd that gets executed every\ntime I load up PowerShell.\n\n421\n00:22:43.672 --> 00:22:48.080\nSo If I put my .sourcing in there now,\n\n422\n00:22:48.080 --> 00:22:51.430\nany new scripts that I create\nshould have access to the function.\n\n423\n00:22:51.430 --> 00:22:53.300\nI don't have to add it here,\n\n424\n00:22:53.300 --> 00:22:57.500\nbecause it's already been done when\nmy profile loads up, how about that?\n\n425\n00:22:57.500 --> 00:22:58.288\n&gt;&gt; Getting fancy like you wanted.\n\n426\n00:22:58.288 --> 00:22:59.150\n&gt;&gt; Yeah.\n\n427\n00:22:59.150 --> 00:22:59.675\n&gt;&gt; Yeah.\n\n428\n00:22:59.675 --> 00:23:00.337\n&gt;&gt; Let's do that.\n\n429\n00:23:00.337 --> 00:23:01.490\nAll right, let's close addition here.\n\n430\n00:23:01.490 --> 00:23:04.250\nWe don't save any changes to that guy.\n\n431\n00:23:04.250 --> 00:23:06.360\nAnd let's tweak our profile a little bit.\n\n432\n00:23:06.360 --> 00:23:08.650\nSo I'm gonna do a set, dash, profile.\n\n433\n00:23:10.960 --> 00:23:13.002\nAnd I'll execute that,\nactually I'm just gonna do it down here.\n\n434\n00:23:13.002 --> 00:23:14.440\nThat's set, dash, profile.\n\n435\n00:23:15.960 --> 00:23:19.620\nAnd that's a, set,\ndash profile is not a standard function.\n\n436\n00:23:19.620 --> 00:23:22.800\nThat's a function that I've created and\nstored on my profile.\n\n437\n00:23:22.800 --> 00:23:24.720\nWhich actually brings me to another point\n\n438\n00:23:26.050 --> 00:23:30.260\nI could dump the entire definition of\nthe function in my profile, right?\n\n439\n00:23:31.570 --> 00:23:32.580\nI could just cut and\n\n440\n00:23:32.580 --> 00:23:36.394\npaste from here, I could find our-\n&gt;&gt; Instead of pointing to\n\n441\n00:23:36.394 --> 00:23:38.056\nthe location of that individual file?\n\n442\n00:23:38.056 --> 00:23:42.404\n&gt;&gt; Absolutely, I could just\ntake this function right here,\n\n443\n00:23:42.404 --> 00:23:45.685\ncopy that thing, go into my profile, and,\n\n444\n00:23:45.685 --> 00:23:51.202\nlet's go down to the end of my profile,\nand paste that function in there.\n\n445\n00:23:51.202 --> 00:23:55.688\nNow every time my profile loads,\nthe definition of this function loads, and\n\n446\n00:23:55.688 --> 00:23:57.560\nit would be available, right?\n\n447\n00:23:57.560 --> 00:23:59.285\nIf you're gonna do with your profiles,\n\n448\n00:23:59.285 --> 00:24:01.883\none thing you'll have to pay\nattention to is Which profile?\n\n449\n00:24:01.883 --> 00:24:05.730\nRemember, we've got four to six\ndifferent profiles that we deal with.\n\n450\n00:24:05.730 --> 00:24:11.250\nI happen to be using the profile\nCurrentUserAllHosts.\n\n451\n00:24:11.250 --> 00:24:13.640\nSo doesn't matter if I open ISE, or\n\n452\n00:24:13.640 --> 00:24:17.670\nif I open it up in standard console,\nthis profile will affect it.\n\n453\n00:24:17.670 --> 00:24:19.870\nThat way, I don´t have to make\ntwo different profiles, and\n\n454\n00:24:19.870 --> 00:24:22.715\nupdate each one,\nthat's just the way I like to do things.\n\n455\n00:24:22.715 --> 00:24:27.720\nCurrentUserAllHosts is the profile that\nI'm working with when I call setProfile,\n\n456\n00:24:27.720 --> 00:24:30.600\nwhich is a little function I wrote for\nthat.\n\n457\n00:24:30.600 --> 00:24:34.040\n&gt;&gt; Plus if you put tons of\ndifferent scripts here,\n\n458\n00:24:34.040 --> 00:24:37.222\nit could delay your PowerShell launching.\n\n459\n00:24:37.222 --> 00:24:41.406\n&gt;&gt; It definitely starts slowing down\nPowerShell, you'll get the whole message.\n\n460\n00:24:41.406 --> 00:24:46.983\nCustom settings to, seconds to load or\nwhatever, I definitely don't like this.\n\n461\n00:24:46.983 --> 00:24:50.685\nAnd again, that's just my opinion,\nif you just want to do it this way,\n\n462\n00:24:50.685 --> 00:24:51.935\nit's perfectly fine.\n\n463\n00:24:51.935 --> 00:24:53.916\nBut I feel like at some point,\n\n464\n00:24:53.916 --> 00:24:58.133\nI'm gonna have a few too many\nfunctions to store in my profile.\n\n465\n00:24:58.133 --> 00:25:01.839\nBut again, if you try it, and\nyou can fit all the functions\n\n466\n00:25:01.839 --> 00:25:06.230\nyou want in your profile and\nit doesn't slow you down, by all means.\n\n467\n00:25:06.230 --> 00:25:08.704\nIt's a very easy way to do it,\nand they're always available,\n\n468\n00:25:08.704 --> 00:25:10.302\nassuming you choose the right profile.\n\n469\n00:25:10.302 --> 00:25:13.890\n&gt;&gt; And coming from that perspective\nof sharing, sharing is caring, right?\n\n470\n00:25:13.890 --> 00:25:18.697\nI think it's easy, searchability wise,\nfor sharing, to have individual files.\n\n471\n00:25:18.697 --> 00:25:20.385\nBecause then, someone can pick and\n\n472\n00:25:20.385 --> 00:25:22.810\nchoose what they wanna put\ninto their own profile?\n\n473\n00:25:22.810 --> 00:25:24.377\n&gt;&gt; Exactly, if it's in my profile,\n\n474\n00:25:24.377 --> 00:25:27.920\nit makes it a little more difficult\nto share with other people, right?\n\n475\n00:25:27.920 --> 00:25:29.965\nBut let me show you how\nto the dot sourcing.\n\n476\n00:25:29.965 --> 00:25:33.011\nI'm just gonna go down at the end of my\nprofile and see the exact same thing.\n\n477\n00:25:33.011 --> 00:25:39.615\nIt's just ., space, and then the path,\n\n478\n00:25:39.615 --> 00:25:46.596\nC:\\users\\mike\\doucments\\scripts.\n\n479\n00:25:46.596 --> 00:25:48.980\n&gt;&gt; [LAUGH]\n&gt;&gt; \\myFunctions-\n\n480\n00:25:48.980 --> 00:25:50.344\n&gt;&gt; You're gonna put it on the C drive\n\n481\n00:25:50.344 --> 00:25:51.427\nnext time, right [LAUGH]?\n\n482\n00:25:51.427 --> 00:25:56.754\n&gt;&gt; I know, I know, I usually cheat and\ndo the $home, because that represents\n\n483\n00:25:56.754 --> 00:26:02.310\nthis whole part of the script right here,\nor that whole part of the path.\n\n484\n00:26:02.310 --> 00:26:03.820\nAnd then I can just do the last part, but\n\n485\n00:26:03.820 --> 00:26:06.750\nI don't know why,\nI'm just not feeling it today.\n\n486\n00:26:06.750 --> 00:26:09.670\nAll right, so there we've added, and\nremember, don't forget that little dot and\n\n487\n00:26:09.670 --> 00:26:13.080\nthat space out in front of there, right?\n\n488\n00:26:13.080 --> 00:26:18.160\nAnd now I'm going to save my profile,\nand I'm gonna close our session.\n\n489\n00:26:19.330 --> 00:26:22.019\nAnd I don't think there was\nanything on title one, was there?\n\n490\n00:26:22.019 --> 00:26:26.608\nNo, we're good there, and\nI'm gonna re-launch ISE.\n\n491\n00:26:32.182 --> 00:26:37.403\nAnd let's just try,\nNew-yes, look at there,\n\n492\n00:26:37.403 --> 00:26:40.500\nit's available in my ISE.\n\n493\n00:26:40.500 --> 00:26:44.478\nWhat if I launch my terminal, my console,\n\n494\n00:26:44.478 --> 00:26:48.800\nNew-yes, how about that?\n\n495\n00:26:48.800 --> 00:26:54.220\nNow it's available wherever I go,\nanytime I want to write a script,\n\n496\n00:26:54.220 --> 00:27:02.290\nor simply test it out in my console here.\n\n497\n00:27:04.950 --> 00:27:10.121\nEverything is working, so for me,\nthat's a really good way to do it,\n\n498\n00:27:10.121 --> 00:27:13.819\nis just to add the dot\nsourcing into your profile.\n\n499\n00:27:13.819 --> 00:27:17.099\nCuz now I can go add multiple functions,\n\n500\n00:27:17.099 --> 00:27:21.646\nI can continue to add\nfunctions to my functions.ps1.\n\n501\n00:27:21.646 --> 00:27:24.540\nAnd every time I launch PowerShell,\nit'll go out and\n\n502\n00:27:24.540 --> 00:27:29.420\ndot source that particular file, and\nall of those functions would be available.\n\n503\n00:27:29.420 --> 00:27:35.260\nAnd because my functions.ps1\nis simply a script file,\n\n504\n00:27:35.260 --> 00:27:37.930\nI can take it with me if I\nneed it in other machines,\n\n505\n00:27:37.930 --> 00:27:42.148\nif I wanna share with other hosts or\nother users in my organization.\n\n506\n00:27:42.148 --> 00:27:45.592\nIt's a .ps1 file, but\nwhen I do share it with them,\n\n507\n00:27:45.592 --> 00:27:50.495\nthey're gonna have to either run it or\ndot source it themselves, right, so\n\n508\n00:27:50.495 --> 00:27:53.504\nthat they can have access\nto those functions.\n\n509\n00:27:53.504 --> 00:27:58.459\nThere's another way we can store\nthese that makes it a little bit\n\n510\n00:27:58.459 --> 00:28:03.799\neasier to share, but I'm getting\nthe signal from my host over here.\n\n511\n00:28:03.799 --> 00:28:08.530\n&gt;&gt; [LAUGH] You make it sound like I'm\ngonna strangle you if you just don't stop\n\n512\n00:28:08.530 --> 00:28:09.607\ntalking [LAUGH].\n\n513\n00:28:09.607 --> 00:28:13.122\n&gt;&gt; You guys don't see it on camera, but\nshe's just over there going, stop, no,\n\n514\n00:28:13.122 --> 00:28:14.075\nI'm kidding [LAUGH].\n\n515\n00:28:14.075 --> 00:28:17.342\n&gt;&gt; No, but we've covered quite a bit,\nso I do wanna say thank you for that and\n\n516\n00:28:17.342 --> 00:28:19.735\nthank you for joining us as well,\nbut Mike's right.\n\n517\n00:28:19.735 --> 00:28:23.811\nWe are out of time, so we'll sign out for\nthis show, I've been your host,\n\n518\n00:28:23.811 --> 00:28:24.799\nCherokee Boose.\n\n519\n00:28:24.799 --> 00:28:25.520\n&gt;&gt; And I'm Mike Rodrick.\n\n520\n00:28:25.520 --> 00:28:28.534\n&gt;&gt; See you next time here at ITProTV.\n\n521\n00:28:28.534 --> 00:28:34.468\n[MUSIC]\n\n522\n00:28:34.468 --> 00:28:37.575\n&gt;&gt; Thank you for watching ITProTV.\n\n",
          "vimeoId": "243368717"
        },
        {
          "description": "In this episode, we take a look at how to create a function in PowerShell. We demonstrate creating the function, and saving the function in a way that lends itself to reusability.",
          "length": "1309",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-3-function_basics_pt_3-111517-PGM.00_21_34_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-3-function_basics_pt_3-111517-PGM.00_21_34_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-powershellscripting/techskills-powershell-scripting-5-1-3-function_basics_pt_3-111517-PGM.00_21_34_23.Still001-sm.jpg",
          "title": "Function Basics Part 3",
          "transcript": "",
          "vimeoId": "243682470"
        }
      ],
      "title": "Variables"
    }
  ],
  "url": "powershell-scripting",
  "vLab": false
}
