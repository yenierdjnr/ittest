{
  "description": "Have you wanted to see what this programming thing is all about? Do you have issues figuring out where to start? Well, this course will show you how to get things set up and start with the basics of programming using the Python programming language. If you want to set up your machine, understand the basics of Python, and start understanding the basic tenets of programming, then please join us!",
  "descriptionMD": "Have you wanted to see what this programming thing is all about? Do you have issues figuring out where to start? Well, this course will show you how to get things set up and start with the basics of programming using the Python programming language. If you want to set up your machine, understand the basics of Python, and start understanding the basic tenets of programming, then please join us!",
  "length": "41810",
  "name": "Programming Fundamentals",
  "practiceExam": false,
  "subtitle": "Starting your programming adventure...",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "Have you wanted to see what this programming thing is all about? Do you have issues figuring out where to start? Well, this course will show you how to get things set up and start with the basics of programming using the Python programming language. If you want to set up your machine, understand the basics of Python, and start understanding the basic tenets of programming, then please join us!",
          "length": "118",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-0-0-0-overview-051018-PGM.00_00_05_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-0-0-0-overview-051018-PGM.00_00_05_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-0-0-0-overview-051018-PGM.00_00_05_24.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.047 --> 00:00:04.300\n[MUSIC]\n\n2\n00:00:06.227 --> 00:00:07.850\nHello, everyone and welcome to DEVPRO.TV.\n\n3\n00:00:07.850 --> 00:00:11.890\nThis is a course overview for\nour Programming Fundamentals Series.\n\n4\n00:00:11.890 --> 00:00:14.230\nAnd here to help us is Mr.\nJustin Dennison.\n\n5\n00:00:14.230 --> 00:00:17.140\nSo, Justin, what is this course all about.\n\n6\n00:00:17.140 --> 00:00:21.220\n&gt;&gt; So this course is to really get us\ningrained in some of the syntax that we're\n\n7\n00:00:21.220 --> 00:00:25.930\ngoing to encounter when embarking in\nprogramming in the python programming\n\n8\n00:00:25.930 --> 00:00:30.190\nlanguage but also to look at programming\nconstructs that we may encounter.\n\n9\n00:00:30.190 --> 00:00:32.710\nSuch as iteration,\nthe four loop the while loop,\n\n10\n00:00:32.710 --> 00:00:37.440\nspecific data structures possibly\nsome simple data types as well.\n\n11\n00:00:37.440 --> 00:00:43.490\nLike number, boolean, string, but\nalso lists and dictionaries and those.\n\n12\n00:00:43.490 --> 00:00:49.370\nSo this is meant to be kind of\nthis starting place, if you will.\n\n13\n00:00:49.370 --> 00:00:52.580\n&gt;&gt; Okay, so\nas a starting place a foundational series\n\n14\n00:00:52.580 --> 00:00:54.460\n&gt;&gt; Would the target audience be\n\n15\n00:00:54.460 --> 00:00:55.900\nsomebody just starting out?\n\n16\n00:00:55.900 --> 00:00:59.030\n&gt;&gt; Yeah this is definitely geared\ntoward individuals that have maybe\n\n17\n00:00:59.030 --> 00:01:00.530\nnever programmed before.\n\n18\n00:01:00.530 --> 00:01:02.500\nMaybe even never seen code before.\n\n19\n00:01:02.500 --> 00:01:06.180\nIt's to get you started as\na necessary stepping stone for\n\n20\n00:01:06.180 --> 00:01:08.980\nfuture understanding and education.\n\n21\n00:01:08.980 --> 00:01:10.410\nWould respect to programming.\n\n22\n00:01:10.410 --> 00:01:15.880\n&gt;&gt; Right, so this course specifically\nhad any in certification or\n\n23\n00:01:15.880 --> 00:01:18.300\nany type of test that you could take.\n\n24\n00:01:18.300 --> 00:01:23.150\n&gt;&gt; It does not it, its main purpose is to\nget you comfortable with maybe the ins and\n\n25\n00:01:23.150 --> 00:01:28.240\nouts of just basic programming\nseeing some of these core concepts.\n\n26\n00:01:28.240 --> 00:01:34.960\nIn preparation to further engage in\nlearning future more complex topics.\n\n27\n00:01:34.960 --> 00:01:36.680\n&gt;&gt; Wow,\nit sounds like a great starting place for\n\n28\n00:01:36.680 --> 00:01:39.270\nanybody just beginning in coding.\n\n29\n00:01:39.270 --> 00:01:42.710\nAnd I will tell you that we're filming\nthis, after we've already done it,\n\n30\n00:01:42.710 --> 00:01:44.880\nI learned a lot in this series.\n\n31\n00:01:44.880 --> 00:01:47.990\nI feel like I've got a pretty\ngood handle on Python so.\n\n32\n00:01:47.990 --> 00:01:50.160\nI hope you guys are looking\nforward to this.\n\n33\n00:01:50.160 --> 00:01:52.521\nAnd we will see you in\nsome episodes very soon.\n\n34\n00:01:52.521 --> 00:01:58.304\n[MUSIC]\n\n",
          "vimeoId": "269213900"
        },
        {
          "description": "In this episode, Justin and Vonne explore what is needed to get up and running with writing Python code. Additionally, Justin explores some of the alternatives for writing code.",
          "length": "1843",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals.00_31_56_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals.00_31_56_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals.00_31_56_10.Still001-sm.jpg",
          "title": "Setting Up the Environment",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.425 --> 00:00:17.510\nHello everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.510 --> 00:00:18.720\nI'm your host, Vonne Smith, and\n\n4\n00:00:18.720 --> 00:00:21.810\nwe are moving through our\nProgramming Fundamentals series.\n\n5\n00:00:21.810 --> 00:00:24.970\nAnd in this episode, we're gonna be\ntalking about setting up the environment.\n\n6\n00:00:24.970 --> 00:00:27.680\nAnd here to set it all up for\nus is Mr. Justin Dennison.\n\n7\n00:00:27.680 --> 00:00:28.580\nHow are you doing today?\n\n8\n00:00:28.580 --> 00:00:29.570\n&gt;&gt; I'm doing fantastic, Vonne.\n\n9\n00:00:29.570 --> 00:00:30.210\nHow are you?\n\n10\n00:00:30.210 --> 00:00:31.340\n&gt;&gt; I'm doing pretty good.\n\n11\n00:00:31.340 --> 00:00:33.340\nI know that we talked about Python.\n\n12\n00:00:33.340 --> 00:00:38.010\nAnd I am thinking it's gonna be pretty\ncool language to learn all of these\n\n13\n00:00:38.010 --> 00:00:38.940\nfundamentals.\n\n14\n00:00:40.150 --> 00:00:42.720\nThat's great, but where do we go next?\n\n15\n00:00:42.720 --> 00:00:47.270\n&gt;&gt; Well, with all good development, you\ngotta spend an exorbitant amount of time,\n\n16\n00:00:47.270 --> 00:00:49.660\nsetting up your computer just right.\n\n17\n00:00:49.660 --> 00:00:52.550\nI'm kidding,\nwe're gonna spend a little bit of time\n\n18\n00:00:52.550 --> 00:00:56.120\nto make sure that we can actually\nprogress using the Python language.\n\n19\n00:00:56.120 --> 00:01:00.560\nNow, I'm on a Mac and these install steps\n\n20\n00:01:00.560 --> 00:01:04.640\nare going to be very similar if you're on\nLinux and to some extent even Windows,\n\n21\n00:01:04.640 --> 00:01:06.920\nyou keep in mind there may be\nsome edge case differences.\n\n22\n00:01:06.920 --> 00:01:09.690\nAll right, now, what are we gonna do?\n\n23\n00:01:09.690 --> 00:01:13.360\nWell number one, we're gonna make sure\nthat we all have the same version of\n\n24\n00:01:13.360 --> 00:01:17.428\nPython installed, it's installed\nready to go and we're gonna test it.\n\n25\n00:01:17.428 --> 00:01:23.830\nOkay, number two, well,\nwe need something to modify Python code.\n\n26\n00:01:23.830 --> 00:01:27.450\nYou're like, what,\nI thought you could just type it.\n\n27\n00:01:27.450 --> 00:01:30.170\nYou can, but there's gonna some\nthings that are little more helpful.\n\n28\n00:01:30.170 --> 00:01:35.830\n&gt;&gt; Are we talking a specific editor or\nsomewhere where like a text editor?\n\n29\n00:01:35.830 --> 00:01:37.472\n&gt;&gt; Yep, we're gonna go with a text editor.\n\n30\n00:01:37.472 --> 00:01:41.670\nWe're gonna keep it very slim,\nwe could go with a more complete solution,\n\n31\n00:01:41.670 --> 00:01:44.650\nwhat's known as an integrated\ndevelopment environment.\n\n32\n00:01:44.650 --> 00:01:47.420\nBut that has a lot of bells and\nwhistles that for me,\n\n33\n00:01:47.420 --> 00:01:50.040\nwhen you're just getting started\nare sometimes a little overwhelming and\n\n34\n00:01:50.040 --> 00:01:52.950\nyou're like, wait a minute, where do\nI click to do the stuff and things?\n\n35\n00:01:52.950 --> 00:01:57.720\n&gt;&gt; So like if we were in Windows,\nNotepad is something you could\n\n36\n00:01:57.720 --> 00:02:02.170\nwrite Python, or any programming or\ncoding language.\n\n37\n00:02:02.170 --> 00:02:05.090\nBut you're talking about\nmaking maybe a little bit,\n\n38\n00:02:05.090 --> 00:02:07.690\njust a little more bells and whistles.\n\n39\n00:02:07.690 --> 00:02:09.140\nNot the full Monty,\n\n40\n00:02:09.140 --> 00:02:11.740\nbut a couple more things that\nmake it a little easier for us.\n\n41\n00:02:11.740 --> 00:02:13.250\n&gt;&gt; It's gonna be a little bit easier, and\n\n42\n00:02:13.250 --> 00:02:18.210\nyou're more than welcome to try to use\nNotepad as long as it will not do weird\n\n43\n00:02:18.210 --> 00:02:24.510\nformatting of text which actually\nembeds some data that messes things up.\n\n44\n00:02:24.510 --> 00:02:26.770\nJust because you can,\ndoesn't mean you should.\n\n45\n00:02:26.770 --> 00:02:28.630\nThere's some purists out\nthere that are like yeah,\n\n46\n00:02:28.630 --> 00:02:31.860\nif you know how to use Notepad\nthen you can always figure it out.\n\n47\n00:02:31.860 --> 00:02:33.160\nI'm like, that's true.\n\n48\n00:02:33.160 --> 00:02:36.000\nThen I'm not one of those people, I guess.\n\n49\n00:02:36.000 --> 00:02:38.999\nI want as much help as possible\nto be successful, right.\n\n50\n00:02:38.999 --> 00:02:42.806\nSo those are our two things and we are\ngoing to do a little bit of testing and\n\n51\n00:02:42.806 --> 00:02:46.062\nlooking around to see what\nwe have actually installed.\n\n52\n00:02:46.062 --> 00:02:48.630\nSo I guess, we should go ahead and\nget started there.\n\n53\n00:02:48.630 --> 00:02:51.090\nSo let's go ahead and\ntake a look at the screen here.\n\n54\n00:02:51.090 --> 00:02:53.499\nI'm on a website called python.org.\n\n55\n00:02:53.499 --> 00:02:55.300\nIt's the Python Software Foundation.\n\n56\n00:02:56.470 --> 00:02:59.488\nOkay, and I like how it does that.\n\n57\n00:02:59.488 --> 00:03:04.590\nSo it's www.python.org, and\nat the time of this recording,\n\n58\n00:03:04.590 --> 00:03:08.290\nwe are on a couple of different versions,\nokay?\n\n59\n00:03:08.290 --> 00:03:11.040\nLet me see if I can get this to stay open.\n\n60\n00:03:11.040 --> 00:03:14.660\nThere's actually two versions,\nthis website will detect\n\n61\n00:03:14.660 --> 00:03:18.740\nwhat your operating system is and\ngive you links for both.\n\n62\n00:03:18.740 --> 00:03:23.350\nOne of the confusing things about\nPython is, well we talked about it.\n\n63\n00:03:23.350 --> 00:03:25.110\nThere's been multiple versions.\n\n64\n00:03:25.110 --> 00:03:30.545\nBut currently, three and two, which\nare major versions, are both available.\n\n65\n00:03:30.545 --> 00:03:33.557\nAll right, so at this time,\n\n66\n00:03:33.557 --> 00:03:39.087\nwe have Python 3.6.5 or Python 2.7.14.\n\n67\n00:03:39.087 --> 00:03:44.561\nThey are the same but\nthey are different, all right.\n\n68\n00:03:44.561 --> 00:03:49.509\nFrom here on now, moving forward,\nthis is 2018, right?\n\n69\n00:03:49.509 --> 00:03:51.250\nIs that right?\nYeah, 2018.\n\n70\n00:03:51.250 --> 00:03:52.870\nYears are hard.\n\n71\n00:03:52.870 --> 00:03:58.190\nIn 2020, it has been said January 1st,\n2020, Python 2 is dead.\n\n72\n00:03:58.190 --> 00:04:03.060\nThere's no further updates, no further\nsecurity updates, it should be gone.\n\n73\n00:04:03.060 --> 00:04:06.240\nSo we're gonna pretend like\nthat other link is not there.\n\n74\n00:04:06.240 --> 00:04:10.060\nNow if you're watching this later,\nthat link might not actually be there.\n\n75\n00:04:10.060 --> 00:04:12.260\nSo do keep that in mind.\n\n76\n00:04:12.260 --> 00:04:16.510\nNow before we click anything, if you\never wanted to go to other platforms.\n\n77\n00:04:16.510 --> 00:04:18.750\nLet's say you need to download it and\nuse it somewhere else.\n\n78\n00:04:18.750 --> 00:04:20.970\nSo let's come over here and\nclick on other platforms.\n\n79\n00:04:22.180 --> 00:04:27.190\nAnd actually Python is available for\na bunch of platforms.\n\n80\n00:04:27.190 --> 00:04:31.128\nI'm gonna be honest with you,\nI'm not even sure what that is for iOS.\n\n81\n00:04:31.128 --> 00:04:33.380\nInteresting, right?\n\n82\n00:04:33.380 --> 00:04:39.544\nYou can actually use it on your phone,\nif you have an Apple device or an iPad.\n\n83\n00:04:39.544 --> 00:04:41.700\nAnd then, I don't know what these are.\n\n84\n00:04:41.700 --> 00:04:44.160\nSolaris, that's some old school stuff.\n\n85\n00:04:44.160 --> 00:04:47.110\nAnd then, Alternative Python packages for\nLinux, okay.\n\n86\n00:04:49.160 --> 00:04:54.006\nDownload for other platforms,\nwell if go back to downloads, right?\n\n87\n00:04:54.006 --> 00:04:57.520\nAlternative implementations.\n\n88\n00:04:57.520 --> 00:05:00.710\nThis will also tell you\nabout some other release\n\n89\n00:05:00.710 --> 00:05:05.440\npackages which a lot of what we're gonna\nlearn would be usable in these packages.\n\n90\n00:05:05.440 --> 00:05:07.840\nNow, what do I mean by packages?\n\n91\n00:05:07.840 --> 00:05:12.550\nThis is an implementation that works\nwith the Microsoft ecosystem very well.\n\n92\n00:05:12.550 --> 00:05:15.855\nYou can use regular Python\nlike we're going to, but\n\n93\n00:05:15.855 --> 00:05:19.099\nthis one runs on a Microsoft\nspecific technology.\n\n94\n00:05:19.099 --> 00:05:21.051\n&gt;&gt; I like they have PyPy, [LAUGH]\n&gt;&gt; Yeah.\n\n95\n00:05:21.051 --> 00:05:24.910\n&gt;&gt; That's cute, but these are just\nlike dialects of any type of language.\n\n96\n00:05:24.910 --> 00:05:29.254\nIt's kind of like we say,\ny'all down here in the south but maybe,\n\n97\n00:05:29.254 --> 00:05:32.915\nthey say you up somewhere\nelse that's not in the south.\n\n98\n00:05:32.915 --> 00:05:34.190\n[LAUGH] But\nI mean is that what you're talking about?\n\n99\n00:05:34.190 --> 00:05:36.083\nIt's just different flavors or?\n\n100\n00:05:36.083 --> 00:05:38.247\n&gt;&gt; So it's kind of odd.\n\n101\n00:05:39.790 --> 00:05:44.264\nThere is a reference implementation,\nwell it's kind of like the guideline,\n\n102\n00:05:44.264 --> 00:05:46.636\nthe blueprint, it's called C Python and\n\n103\n00:05:46.636 --> 00:05:49.513\nthat's actually what\nwe're downloading here.\n\n104\n00:05:49.513 --> 00:05:53.193\nOkay, and\nthen these are re-implementations,\n\n105\n00:05:53.193 --> 00:05:58.990\nthey have been rebuilt from the ground\nup with very specific use cases.\n\n106\n00:05:58.990 --> 00:06:03.950\nWhat that means is the language is\nthe same for the most part, right,\n\n107\n00:06:03.950 --> 00:06:08.800\nwhat do you know in one works in the\nother, they just have different run times.\n\n108\n00:06:08.800 --> 00:06:12.980\nThink of, if there's people in the moon,\nwe're both people but\n\n109\n00:06:12.980 --> 00:06:16.410\nwe're kind of in different environments so\nthat's effectively what we're doing here.\n\n110\n00:06:16.410 --> 00:06:21.200\n&gt;&gt; So is it gonna do things like in\none language you use a comma and\n\n111\n00:06:21.200 --> 00:06:23.790\nthe other you'd use a semicolon,\nit's not that different.\n\n112\n00:06:23.790 --> 00:06:28.870\nI guess the run time is what\nkind of solidified it with me,\n\n113\n00:06:28.870 --> 00:06:35.720\nthis would run better on this\nspecific like Java virtual machine.\n\n114\n00:06:35.720 --> 00:06:39.330\nIt's gonna have some specifications\nthat is specifically for\n\n115\n00:06:39.330 --> 00:06:44.500\nthat, but the coding that you're going\nto learn how to do, that's the same.\n\n116\n00:06:44.500 --> 00:06:46.160\n&gt;&gt; That is, for the most part, the same.\n\n117\n00:06:46.160 --> 00:06:48.740\nThere are some edge cases\nthat aren't supported.\n\n118\n00:06:48.740 --> 00:06:51.950\nBut I wanted to show you these\nbecause if you happen into these,\n\n119\n00:06:51.950 --> 00:06:55.440\na lot of what you're gonna learn\nwith C Python still applies.\n\n120\n00:06:55.440 --> 00:06:58.710\nAnd as you dig further in, right,\nwhat is a microcontroller?\n\n121\n00:06:58.710 --> 00:07:02.150\nTiny little embedded devices,\nmaybe if you have a smart home or\n\n122\n00:07:02.150 --> 00:07:04.530\na voice activated light or something.\n\n123\n00:07:04.530 --> 00:07:06.210\nThose have what are called\nmicrocontrollers.\n\n124\n00:07:06.210 --> 00:07:08.950\nWell, this is a particular\nversion of Python.\n\n125\n00:07:08.950 --> 00:07:12.130\nSyntax and\nthe language rules do not change, but\n\n126\n00:07:12.130 --> 00:07:15.150\nit runs on those particular platforms.\n\n127\n00:07:15.150 --> 00:07:17.160\nSo they're nuanced.\n\n128\n00:07:17.160 --> 00:07:20.390\nAnd we're gonna move on\nhere in just a moment,\n\n129\n00:07:20.390 --> 00:07:25.242\nbut I just wanna emphasize these\nare alternate implementations.\n\n130\n00:07:25.242 --> 00:07:27.128\nWhat we're gonna go is more or\nless the same.\n\n131\n00:07:27.128 --> 00:07:30.873\n&gt;&gt; It's more like at this point\nin the game, know they exist, but\n\n132\n00:07:30.873 --> 00:07:34.840\njust not really concern yourself with it,\ndon't worry about it.\n\n133\n00:07:34.840 --> 00:07:37.830\nJust go ahead and download it for\nyour particular operating system, and\n\n134\n00:07:37.830 --> 00:07:39.430\njust call it a day.\n\n135\n00:07:39.430 --> 00:07:42.763\nJust keep it back in your brain that\nif somebody throws it out there,\n\n136\n00:07:42.763 --> 00:07:45.228\nit's not like a completely\ndifferent language.\n\n137\n00:07:45.228 --> 00:07:46.695\n&gt;&gt; Yep, absolutely correct.\n\n138\n00:07:46.695 --> 00:07:50.904\nNow, if we come back one more time before\ndownloads, before we do any thing else,\n\n139\n00:07:50.904 --> 00:07:54.390\nI'm gonna click view full\nlist of downloads, right.\n\n140\n00:07:54.390 --> 00:07:58.517\nIf you're looking for Python for a\ndifferent OS, it will give you the ability\n\n141\n00:07:58.517 --> 00:08:02.600\nto select your OS instead of auto kind\nof like going, this is what it is.\n\n142\n00:08:02.600 --> 00:08:04.724\nIf you come and look through here,\n\n143\n00:08:04.724 --> 00:08:09.490\nyou can actually download a whole\nbunch of different versions.\n\n144\n00:08:09.490 --> 00:08:13.790\nThis is something that I've dealt with,\nwhere you had to have a very specific\n\n145\n00:08:13.790 --> 00:08:19.570\nversion because somebody did some crazy\nkind of hacky thing and they were like,\n\n146\n00:08:19.570 --> 00:08:24.770\nwell you need version 2.7.2, and you go,\nokay, well I'm gonna go download 2.7.2.\n\n147\n00:08:24.770 --> 00:08:29.944\nThat's nice, and well, it's interesting,\nthe reason I come here is,\n\n148\n00:08:29.944 --> 00:08:34.950\nyou see how Windows and Mac OS X, or\nMac OS, well they're listed here,\n\n149\n00:08:34.950 --> 00:08:40.134\nand then we went to other platforms,\nand those were kinda more esoteric.\n\n150\n00:08:40.134 --> 00:08:45.996\nIf you come here though and\nyou click on Linux and Unix,\n\n151\n00:08:45.996 --> 00:08:51.780\nthen you can get the install for\nLinux and Unix.\n\n152\n00:08:51.780 --> 00:08:52.900\nIt's called a tarball.\n\n153\n00:08:52.900 --> 00:08:54.560\nIt's like a zip file.\n\n154\n00:08:54.560 --> 00:08:57.790\nYou have to do a lot\nmore using this method.\n\n155\n00:08:57.790 --> 00:08:59.870\nIf you're using Linux, then well,\n\n156\n00:08:59.870 --> 00:09:02.720\nI'm gonna say something the rest of you\nare like, what are you talking about?\n\n157\n00:09:02.720 --> 00:09:04.510\nUse your package manager, right?\n\n158\n00:09:04.510 --> 00:09:06.180\nThat's all you need to know, right?\n\n159\n00:09:06.180 --> 00:09:10.600\nIf you're on Linux you're probably like\n99% sure you know what I'm talking about.\n\n160\n00:09:10.600 --> 00:09:13.790\nSo I would probably not go\nthis route with Linux or for\n\n161\n00:09:13.790 --> 00:09:16.930\nany of the other ones,\nI would stick with the default download.\n\n162\n00:09:16.930 --> 00:09:21.080\nSo for\nMac OS X I'm just gonna click 3.6.5.\n\n163\n00:09:21.080 --> 00:09:26.258\nNow at the time of this\nrecording 3.7 is on the horizon,\n\n164\n00:09:26.258 --> 00:09:31.120\nand then 3.8 will be shortly\nthereafter probably,\n\n165\n00:09:31.120 --> 00:09:35.680\nsometimes there's a little\nlonger of a lead time.\n\n166\n00:09:35.680 --> 00:09:40.455\nAs long as it's 3.5 and above we're good.\n\n167\n00:09:40.455 --> 00:09:42.940\nThere's some newer things, right?\n\n168\n00:09:42.940 --> 00:09:46.934\nWe're not breaking the basics that we\nhave, but there's some newer things in\n\n169\n00:09:46.934 --> 00:09:50.400\nthese that In the long term you may,\nif you're searching on the internet,\n\n170\n00:09:50.400 --> 00:09:53.070\nyou may find code that doesn't\nwork unless it's 3.5 or above, but\n\n171\n00:09:53.070 --> 00:09:55.050\nmost of those will tell you about it.\n\n172\n00:09:55.050 --> 00:09:59.766\nAll right, so I click that download,\nand if I look at my downloads, for me,\n\n173\n00:09:59.766 --> 00:10:04.595\nif you're on Windows it's gonna give\nyou probably either a .msi or a .exe.\n\n174\n00:10:04.595 --> 00:10:09.054\nThis is a .pkg, so this is a package,\nand I'm gonna zoom out, and\n\n175\n00:10:09.054 --> 00:10:15.150\nit gives me this little dialogue box,\nand I'm gonna zoom in just a little bit.\n\n176\n00:10:15.150 --> 00:10:20.520\nSo this is just our install, so\nwe always read all of these things, right?\n\n177\n00:10:20.520 --> 00:10:22.728\nYou should, but we're not going to.\n\n178\n00:10:22.728 --> 00:10:24.040\nWe agree to them.\n\n179\n00:10:24.040 --> 00:10:25.280\n&gt;&gt; Next, next, next, next, go.\n\n180\n00:10:25.280 --> 00:10:28.119\n&gt;&gt; Yeah, lean on the keyboard and the\nmouse, and you just click, click, click.\n\n181\n00:10:28.119 --> 00:10:30.300\nI like to see how fast\nI can get through them.\n\n182\n00:10:30.300 --> 00:10:34.030\nAnd then,\nthis is gonna take 107 megabytes of space.\n\n183\n00:10:34.030 --> 00:10:34.660\nIt's not too bad.\n\n184\n00:10:34.660 --> 00:10:36.390\nAnd then I'm gonna click Install.\n\n185\n00:10:36.390 --> 00:10:39.490\nAnd then, because,\nif you're going along with me,\n\n186\n00:10:39.490 --> 00:10:43.680\nWindows is probably gonna give\nyou a pop up box and say Accept.\n\n187\n00:10:43.680 --> 00:10:48.040\nMAC and Linux are going to ask you for,\nwell, a password, so\n\n188\n00:10:48.040 --> 00:10:50.050\nI'm gonna type in my password here.\n\n189\n00:10:51.270 --> 00:10:56.750\nAnd now we're installing,\nit's going to write to everything, and\n\n190\n00:10:56.750 --> 00:10:58.090\nit's actually a pretty quick install.\n\n191\n00:10:58.090 --> 00:11:00.380\nI have had times on some systems,\n\n192\n00:11:00.380 --> 00:11:03.690\nif it's an older system,\nthis takes a little bit longer.\n\n193\n00:11:03.690 --> 00:11:07.530\nI have newer hardware,\nit's going to be faster.\n\n194\n00:11:07.530 --> 00:11:10.610\nThere are other times though,\nif you have an older hard drive or\n\n195\n00:11:10.610 --> 00:11:13.190\nsomething like that, where this\nis going to take a little while.\n\n196\n00:11:13.190 --> 00:11:18.050\nNow, as I say that, this is now starting\nto go, let me slow down a little bit.\n\n197\n00:11:18.050 --> 00:11:21.665\nIt's like it's listening to me, Vonne, and\ngoing, no, I'm gonna make a liar out of\n\n198\n00:11:21.665 --> 00:11:24.754\nyou, but it's all right, we can\nactually leave this in the background.\n\n199\n00:11:24.754 --> 00:11:28.580\nWe'll come back to this in\njust a moment all right?\n\n200\n00:11:28.580 --> 00:11:32.730\nI'm gonna switch back over\nhere to my browser and\n\n201\n00:11:32.730 --> 00:11:37.060\nwe're gonna talk a little bit about\nI guess I'm gonna come back now.\n\n202\n00:11:37.060 --> 00:11:39.910\nWe'll come back to that in just a moment,\nso I can finish my thought here,\n\n203\n00:11:39.910 --> 00:11:41.130\nwe're gonna talk about the editors.\n\n204\n00:11:42.140 --> 00:11:46.570\nI'm gonna show you a few that I recommend,\nand we're gonna pick one.\n\n205\n00:11:46.570 --> 00:11:49.880\nThese are not exhaustive in nature,\nall right.\n\n206\n00:11:49.880 --> 00:11:51.940\nYou may find something that\nyou like a little bit better.\n\n207\n00:11:53.130 --> 00:11:57.010\nI will ask that if you're following along\nwith me that you pick the same editor that\n\n208\n00:11:57.010 --> 00:12:02.010\nI do for right now, and the reason\nbeing is you don't have to do all this\n\n209\n00:12:02.010 --> 00:12:05.290\ncontext mapping of going, all right, so he\nclicked over here, but in my editor that's\n\n210\n00:12:05.290 --> 00:12:09.410\nover here, and you're trying to hold too\nmany things in your head, all right?\n\n211\n00:12:09.410 --> 00:12:13.820\nSo we have, from right to left,\nwe have Sublime Text.\n\n212\n00:12:13.820 --> 00:12:18.350\nThis was kind of the first\none on the block for\n\n213\n00:12:18.350 --> 00:12:20.720\nwhat is called a rich text editor.\n\n214\n00:12:20.720 --> 00:12:23.780\nIt had a whole lot of little niceties.\n\n215\n00:12:23.780 --> 00:12:29.130\nIf you notice, in this little There we go,\n\n216\n00:12:29.130 --> 00:12:32.250\nsee how it has what's\ncalled Syntax highlighting?\n\n217\n00:12:32.250 --> 00:12:35.951\nThat's specific to each language,\nall right?\n\n218\n00:12:35.951 --> 00:12:40.108\nWhat that did is it said, okay, if you're\ntyping things and it doesn't highlight,\n\n219\n00:12:40.108 --> 00:12:43.515\nthen your eyes will eventually become\ntrained and go, wait a minute,\n\n220\n00:12:43.515 --> 00:12:45.269\nI've done something wrong there.\n\n221\n00:12:46.610 --> 00:12:49.960\nMoreover, it would help\nenforce certain grammar and\n\n222\n00:12:49.960 --> 00:12:53.430\nsyntax rules, like hey,\nit'll give you a little underline, and\n\n223\n00:12:53.430 --> 00:12:56.990\nthere were other things like when we first\nloaded on this page, it showed multiple\n\n224\n00:12:56.990 --> 00:13:01.550\ncursors so you could like modify\na bunch of rows at one time like lines.\n\n225\n00:13:01.550 --> 00:13:04.630\nYeah, it's crazy, but these are very\nspecific to the development world.\n\n226\n00:13:05.840 --> 00:13:09.650\nThey don't really make a whole lot of\nsense when it comes to Office products or\n\n227\n00:13:09.650 --> 00:13:12.760\nsomething, but, well, maybe they do.\n\n228\n00:13:12.760 --> 00:13:14.530\nI just never use them there.\n\n229\n00:13:14.530 --> 00:13:17.900\n&gt;&gt; That multiple cursor thing,\nyou just I'm over here going, wait, what?\n\n230\n00:13:17.900 --> 00:13:18.915\nIt does that?\n\n231\n00:13:18.915 --> 00:13:22.850\nCuz I've used other editors, I mean,\nI've known of this product for\n\n232\n00:13:22.850 --> 00:13:25.670\na while with the HTML and\nCSS coding that I do.\n\n233\n00:13:26.740 --> 00:13:30.915\nI didn't know it had multiple cursers,\nI'm gonna need to go get that.\n\n234\n00:13:30.915 --> 00:13:33.740\n[LAUGH]\n&gt;&gt; And as a matter of fact that was such\n\n235\n00:13:33.740 --> 00:13:36.560\na wanted feature, and\nnotice there's this little popup.\n\n236\n00:13:36.560 --> 00:13:41.600\nIt has like a command palate where\nyou can run editor specific commands.\n\n237\n00:13:41.600 --> 00:13:46.698\nThis kinda set the scene, this is the one\nI was kind of burgeoned on at the scene.\n\n238\n00:13:46.698 --> 00:13:51.407\nThere was one before that, I think called\nTextMate, it was a Mac only product and\n\n239\n00:13:51.407 --> 00:13:53.287\nit had similar things going on.\n\n240\n00:13:53.287 --> 00:13:57.794\nSo I'm not saying this was the very first\none, but this was one that really kind of\n\n241\n00:13:57.794 --> 00:14:02.720\nsurged to the forefront, well, when I was\ngoing through my metamorphosis, I guess.\n\n242\n00:14:02.720 --> 00:14:05.150\n&gt;&gt; I don't know if this is\ncoming down to Python, but\n\n243\n00:14:05.150 --> 00:14:08.252\nI use something called TextWrangler,\n&gt;&gt; I used to use that product.\n\n244\n00:14:08.252 --> 00:14:13.506\n&gt;&gt; Yeah, TextWrangler and BBEdit those are\nalso alternatives, they're along the lines\n\n245\n00:14:13.506 --> 00:14:18.405\nwith Textmate, they have a lot of these\nfeatures Notepad++, not Notepad, but\n\n246\n00:14:18.405 --> 00:14:22.900\nNotepad++, is a Windows only and\nit has a lot of these features as well.\n\n247\n00:14:22.900 --> 00:14:27.190\n&gt;&gt; That's a little blast from the past for\nme because I've taught HTML and\n\n248\n00:14:27.190 --> 00:14:30.920\nCSS for a long time, that was the one\nI used, and as soon as you said, yeah,\n\n249\n00:14:30.920 --> 00:14:35.495\nI would have everybody use that\nparticular editor in our HTML and\n\n250\n00:14:35.495 --> 00:14:38.490\nCSS class,\nbecause that was the cool way to do it.\n\n251\n00:14:38.490 --> 00:14:41.100\n&gt;&gt; And it still works very well.\n\n252\n00:14:41.100 --> 00:14:42.500\nThere's nothing wrong with those.\n\n253\n00:14:42.500 --> 00:14:46.644\nAnother alternative that you may see\nis an editor called Atom, right?\n\n254\n00:14:46.644 --> 00:14:50.030\nLike the atom of matter.\n\n255\n00:14:50.030 --> 00:14:53.660\nAnd it's actually made by\na company called GitHub, and\n\n256\n00:14:53.660 --> 00:14:56.360\nfurther way down the line\nwe'll talk more about GitHub,\n\n257\n00:14:56.360 --> 00:15:00.360\nnot necessarily in this course but\nyou got to keep going.\n\n258\n00:15:00.360 --> 00:15:04.990\nThis is an editor that, well it has\na lot of those Sublime Text features but\n\n259\n00:15:04.990 --> 00:15:07.820\nit is, what they say, hackable.\n\n260\n00:15:07.820 --> 00:15:09.780\nSo you can do a lot of modifications.\n\n261\n00:15:09.780 --> 00:15:14.570\nAnd one of the newer things, and I\nhaven't played with is, Vonne, if you and\n\n262\n00:15:14.570 --> 00:15:18.476\nI had it, then we can do what's\ncalled a live collaboration and\n\n263\n00:15:18.476 --> 00:15:21.499\nlink our two computers computers together,\nand\n\n264\n00:15:21.499 --> 00:15:25.584\nthen we could both code at the same time,\nor type at the same time.\n\n265\n00:15:25.584 --> 00:15:28.180\n&gt;&gt; Is it actually pretty straight forward?\n\n266\n00:15:28.180 --> 00:15:31.310\nThis whole week, at this time of\nrecording, I have been fighting with\n\n267\n00:15:31.310 --> 00:15:36.620\ncollaborating in real time in Excel for\nMAC and PC, and it's just been like,\n\n268\n00:15:36.620 --> 00:15:40.360\nmy gosh, so many different little\n[INAUDIBLE] Is this a little easier?\n\n269\n00:15:40.360 --> 00:15:41.133\n&gt;&gt; I can't comment on that.\n\n270\n00:15:41.133 --> 00:15:42.850\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n271\n00:15:42.850 --> 00:15:45.330\nthis is not something\nthat I use a great deal.\n\n272\n00:15:47.360 --> 00:15:48.880\nMy experience in previous products,\n\n273\n00:15:48.880 --> 00:15:52.860\nnot necessarily this one, it's kinda been,\nthat works well, that's kinda weird.\n\n274\n00:15:52.860 --> 00:15:57.388\nSo I don't think you'll need it, but\nthis has what's called this plugin,\n\n275\n00:15:57.388 --> 00:16:00.429\nit works very similar to Sublime,\nbut it just has,\n\n276\n00:16:00.429 --> 00:16:03.560\nI think Sublime is maintained\nI think by one person.\n\n277\n00:16:03.560 --> 00:16:08.258\nThis is a whole company, so\nthis gets updated more frequently,\n\n278\n00:16:08.258 --> 00:16:11.657\nit gets fixed, it's more actively created.\n\n279\n00:16:11.657 --> 00:16:16.250\nSo you can go and read about that,\nvery similar feature set.\n\n280\n00:16:16.250 --> 00:16:21.470\nAnd then one of the newer ones on\nthe block is Visual Studio Code.\n\n281\n00:16:21.470 --> 00:16:23.140\nThis is actually a Microsoft product.\n\n282\n00:16:24.280 --> 00:16:31.660\nHowever, it's available for all platforms,\nLinux, OSX, major platforms and Windows.\n\n283\n00:16:31.660 --> 00:16:36.490\nIf you're running Solaris,\ncould be a little iffy there.\n\n284\n00:16:37.730 --> 00:16:39.780\nBut it is very similar to the other ones.\n\n285\n00:16:39.780 --> 00:16:42.303\nHowever, there is some fringe features.\n\n286\n00:16:42.303 --> 00:16:46.494\nSee this IntelliSense, Microsoft actually\ntook out some of their code highlighting\n\n287\n00:16:46.494 --> 00:16:49.868\nthat they've developed over the years\nat the enterprise level, and\n\n288\n00:16:49.868 --> 00:16:51.630\nthey plopped it inside of this one.\n\n289\n00:16:51.630 --> 00:16:55.020\nSo I enjoy this environment,\nthis is definitely a personal opinion,\n\n290\n00:16:55.020 --> 00:16:57.900\nyou may find that yours is\na little bit different.\n\n291\n00:16:57.900 --> 00:16:59.550\nThis is what we're gonna use, all right?\n\n292\n00:17:00.730 --> 00:17:03.130\nSo well, how do I do?\n\n293\n00:17:03.130 --> 00:17:05.310\nWell, this says, hey, you need it for Mac.\n\n294\n00:17:05.310 --> 00:17:07.520\nI'm like, yeah,\nit's like cool, just click it.\n\n295\n00:17:07.520 --> 00:17:13.030\nAnd wait for it, wait for it, and\nboom, it is now downloading for Mac.\n\n296\n00:17:13.030 --> 00:17:16.710\nAnd for the most part,\nthe install's gonna go the same.\n\n297\n00:17:16.710 --> 00:17:20.670\nThis one gives us a little more\nfeatures when we want them but\n\n298\n00:17:20.670 --> 00:17:24.270\nthey're not in your face initially,\nall right?\n\n299\n00:17:24.270 --> 00:17:28.370\nSo it gives you kind of\nthat IDE experience but\n\n300\n00:17:28.370 --> 00:17:31.608\nonly if you go looking for\nit instead of overwhelming you.\n\n301\n00:17:31.608 --> 00:17:37.570\nSo this is, in my personal opinion,\nit's got a few more things that\n\n302\n00:17:37.570 --> 00:17:42.580\nI find interesting and very helpful, and I\njust like the feel of it, how fast it is.\n\n303\n00:17:42.580 --> 00:17:46.590\nAnd so I recommend you download this and\ncontinue on with us.\n\n304\n00:17:46.590 --> 00:17:50.902\nNow as that's downloading,\nI think we're gonna switch back over and\n\n305\n00:17:50.902 --> 00:17:55.170\ntake a dive and see what actually\ngot kinda lined up, all right?\n\n306\n00:17:55.170 --> 00:17:59.444\nSo let's take a look at the screen\nhere and so if we come back over, and\n\n307\n00:17:59.444 --> 00:18:04.640\nlet me actually just close this out, I'm\ngonna show you where that is, all right?\n\n308\n00:18:04.640 --> 00:18:07.010\nSo I'm gonna open my finder,\nWindows Explore.\n\n309\n00:18:07.010 --> 00:18:08.830\nI'm gonna go to Applications.\n\n310\n00:18:08.830 --> 00:18:12.000\nAnd where am I gonna find that?\n\n311\n00:18:12.000 --> 00:18:14.090\nWell, let's see here, where did you go?\n\n312\n00:18:14.090 --> 00:18:15.770\nThere you are.\n\n313\n00:18:15.770 --> 00:18:17.650\nSo you get this little folder in Mac,\n\n314\n00:18:17.650 --> 00:18:20.900\nyou'll get something similar in\nyour program files for Windows.\n\n315\n00:18:20.900 --> 00:18:23.690\nAnd you're gonna open it up and\nyou're gonna see several things.\n\n316\n00:18:23.690 --> 00:18:25.000\nThese may vary a little bit differently.\n\n317\n00:18:25.000 --> 00:18:28.990\nYou're gonna see two applications,\nthe rest of these are help me files and\n\n318\n00:18:28.990 --> 00:18:30.200\nsome other things.\n\n319\n00:18:30.200 --> 00:18:31.952\nYou're gonna get idle.\nI'm gonna click on that and\n\n320\n00:18:31.952 --> 00:18:32.970\nshow you what it is.\n\n321\n00:18:35.130 --> 00:18:39.542\nIt is kind of like this environment\nthat is like a text editor and\n\n322\n00:18:39.542 --> 00:18:42.807\nlike Python together, and it works, right?\n\n323\n00:18:42.807 --> 00:18:46.122\nI just hit enter and\nit actually allows path and\n\n324\n00:18:46.122 --> 00:18:49.354\nthis is running what's\nknown as the ripple.\n\n325\n00:18:49.354 --> 00:18:53.599\nWe're actually gonna look\nat that in another episode.\n\n326\n00:18:53.599 --> 00:18:57.633\nSo I can just type Python right here and\nit will run it.\n\n327\n00:18:57.633 --> 00:19:02.835\nBut I can also go to File, New file and\nit will open a super basic\n\n328\n00:19:02.835 --> 00:19:09.164\ntext editor that gives us a little bit\nof some text highlighting like that.\n\n329\n00:19:09.164 --> 00:19:11.930\nBut it will let you do some bad things.\n\n330\n00:19:11.930 --> 00:19:16.680\nSo this is built in and it's very simple\nand it kinda comes with the install.\n\n331\n00:19:16.680 --> 00:19:18.068\nBut I typically do not use it.\n\n332\n00:19:18.068 --> 00:19:20.450\n&gt;&gt; So it's their internal text editor,\n\n333\n00:19:20.450 --> 00:19:25.150\nwhat they would use if we were\nnot using the Visual Studio.\n\n334\n00:19:25.150 --> 00:19:25.927\n&gt;&gt; Yep, yeah, it is.\n\n335\n00:19:25.927 --> 00:19:28.450\nYou can use this, it works fine.\n\n336\n00:19:28.450 --> 00:19:30.650\nI've had some trouble with\ntrying to find errors and\n\n337\n00:19:30.650 --> 00:19:33.950\nthings just because it is very slim,\nand it's meant to be because it's like,\n\n338\n00:19:33.950 --> 00:19:36.060\nhere's the bare minimum\nyou need to get running.\n\n339\n00:19:36.060 --> 00:19:39.590\nYou need some way to run this and\nthen kind of the text editor.\n\n340\n00:19:39.590 --> 00:19:43.070\n&gt;&gt; But it's just the text editor,\nit's not the compiler or\n\n341\n00:19:43.070 --> 00:19:46.080\nthe thing that you run the code through,\ndoes that make sense?\n\n342\n00:19:46.080 --> 00:19:49.090\nI don't know if I'm using the correct\nterminology, Justin, but [LAUGH]\n\n343\n00:19:49.090 --> 00:19:50.490\n&gt;&gt; It's a little bit of both,\n\n344\n00:19:50.490 --> 00:19:52.110\nit'll let you type in this code.\n\n345\n00:19:52.110 --> 00:19:56.520\nIf we go to File, New file,\nand if you type in the code,\n\n346\n00:19:56.520 --> 00:19:59.660\nyou can actually go to Run and\nit gives us a very simple run.\n\n347\n00:19:59.660 --> 00:20:03.190\nSo it's very slimmed down,\nand it works, I've used it.\n\n348\n00:20:03.190 --> 00:20:08.810\nI don't find that it's as helpful when\nI need it to be in certain situations.\n\n349\n00:20:08.810 --> 00:20:13.740\nSo also, this only works for Python.\n\n350\n00:20:15.070 --> 00:20:19.015\nWith the other editor that you will get\nused to, you will have options if you so\n\n351\n00:20:19.015 --> 00:20:21.150\nchoose to take a different path later on.\n\n352\n00:20:21.150 --> 00:20:24.267\n&gt;&gt; Yeah,\nbecause we're just installing Python,\n\n353\n00:20:24.267 --> 00:20:28.829\nthe big dictionary if you want to say,\non to our computer to say, okay,\n\n354\n00:20:28.829 --> 00:20:32.300\nthis is how I'm going to understand and\nuse Python.\n\n355\n00:20:32.300 --> 00:20:34.360\nSo this is not the text editor.\n\n356\n00:20:34.360 --> 00:20:36.710\n&gt;&gt; No, no,\nit has an editing capability, but\n\n357\n00:20:36.710 --> 00:20:40.140\nit's not necessarily a general\npurpose text editor, no.\n\n358\n00:20:40.140 --> 00:20:44.977\nAnd then, there's this other thing called\nPython Launcher, and if you click it,\n\n359\n00:20:44.977 --> 00:20:48.375\nit actually is just kind of\nyour configuration settings.\n\n360\n00:20:48.375 --> 00:20:55.650\nSo this is how do you launch,\nclick click Python based things?\n\n361\n00:20:55.650 --> 00:20:58.234\nNow if I double click something\nthat is found to be Python,\n\n362\n00:20:58.234 --> 00:20:59.989\nthis is what would actually launch it.\n\n363\n00:20:59.989 --> 00:21:04.637\nAnd for the most part,\nI'm not gonna mess with this because we're\n\n364\n00:21:04.637 --> 00:21:08.800\ngonna start at a little bit\nlower of a level, okay?\n\n365\n00:21:08.800 --> 00:21:12.900\nSo those are both there in the Mac\ninstallation, and if I'm not mistaken,\n\n366\n00:21:12.900 --> 00:21:14.130\nthe Windows as well.\n\n367\n00:21:14.130 --> 00:21:18.690\nLinux individuals, you're probably\nnot gonna get quite as much.\n\n368\n00:21:18.690 --> 00:21:23.330\nYou'll still get idle if I'm not mistaken,\nbut I don't think you get the launcher\n\n369\n00:21:23.330 --> 00:21:25.760\nbecause the environment works\na little bit differently.\n\n370\n00:21:25.760 --> 00:21:29.000\nSo that's what we get with Python, okay?\n\n371\n00:21:29.000 --> 00:21:32.430\nNow if we come over here,\nmy download's finished.\n\n372\n00:21:32.430 --> 00:21:34.400\nLet's actually install this.\n\n373\n00:21:36.280 --> 00:21:37.558\nMaybe, wait for it.\n\n374\n00:21:40.135 --> 00:21:46.160\nAnd this is where things get a little\nInteresting for, there's no install.\n\n375\n00:21:46.160 --> 00:21:48.780\nYou actually just,\nit downloads the raw application.\n\n376\n00:21:48.780 --> 00:21:51.310\nWhen you click it, it's open.\n\n377\n00:21:51.310 --> 00:21:53.760\nThat's just how it works, all right?\n\n378\n00:21:53.760 --> 00:21:55.540\nSo how do I keep this on my Mac?\n\n379\n00:21:55.540 --> 00:22:01.225\nI'm gonna open up my Applications folder\nand if I want to be able to show it,\n\n380\n00:22:01.225 --> 00:22:05.218\nright, a little easier,\nI come over to Downloads.\n\n381\n00:22:05.218 --> 00:22:09.360\nSee the Visual Studio Code,\nI'm gonna grab that, grab it.\n\n382\n00:22:10.830 --> 00:22:13.696\nMaybe if I, I'm trying though.\n\n383\n00:22:15.964 --> 00:22:17.140\nThere we go.\n\n384\n00:22:17.140 --> 00:22:18.680\n&gt;&gt; It's harder with the track pad,\n\n385\n00:22:18.680 --> 00:22:21.047\nyou gotta do the drag and\nmove your fingers around.\n\n386\n00:22:21.047 --> 00:22:23.239\nYeah, I know what you're talking about.\n\n387\n00:22:23.239 --> 00:22:24.745\nI always have this.\n\n388\n00:22:24.745 --> 00:22:25.980\n[LAUGH]\n&gt;&gt; Usually, I don't,\n\n389\n00:22:25.980 --> 00:22:28.410\nI think zooming also doesn't help that but\nthat's all right.\n\n390\n00:22:28.410 --> 00:22:32.860\nNow you'll notice that mine says hey,\nyou already had this.\n\n391\n00:22:32.860 --> 00:22:35.550\nWell, I downloaded it to show you\nhow to download it and things.\n\n392\n00:22:35.550 --> 00:22:38.850\nI'm actually gonna replace cuz I probably\njust downloaded a newer version.\n\n393\n00:22:38.850 --> 00:22:42.510\nYou will more than likely not\nget that prompt, all right?\n\n394\n00:22:42.510 --> 00:22:48.310\nSo I'm gonna replace and then it says\napplication is kind of a protected place.\n\n395\n00:22:48.310 --> 00:22:50.820\nI need permission and\nyou go, all right, cool.\n\n396\n00:22:50.820 --> 00:22:56.210\nSo this is running, and\none final thing before\n\n397\n00:22:56.210 --> 00:23:01.055\nwe take a dive, if you accidentally open\nthat, I would go ahead and close that.\n\n398\n00:23:03.015 --> 00:23:05.055\nClose that one,\nif you've clicked it in downloads.\n\n399\n00:23:05.055 --> 00:23:09.055\nCuz you may get weirdness because it\nopened in downloads and then you moved it.\n\n400\n00:23:09.055 --> 00:23:12.265\n&gt;&gt; That's usually like when you download\nanything that has the package or\n\n401\n00:23:12.265 --> 00:23:13.234\nyou have to unzip it.\n\n402\n00:23:13.234 --> 00:23:17.835\nIt goes through those little steps of do\nyou want to move to your applications?\n\n403\n00:23:17.835 --> 00:23:21.708\nOr even the visual where it has the little\nthing you drag across and then blink, and\n\n404\n00:23:21.708 --> 00:23:22.900\nthen it drops it in here.\n\n405\n00:23:22.900 --> 00:23:25.565\nI would probably miss that step.\n\n406\n00:23:25.565 --> 00:23:28.990\n[LAUGH] And\nnot think to put it in to my applications.\n\n407\n00:23:28.990 --> 00:23:29.770\nThere it is.\n\n408\n00:23:29.770 --> 00:23:30.300\nIt's fine.\n\n409\n00:23:30.300 --> 00:23:31.440\n&gt;&gt; And it's perfectly okay.\n\n410\n00:23:31.440 --> 00:23:33.460\nIf you want to throw it in your desktop,\nthat works.\n\n411\n00:23:34.470 --> 00:23:38.210\nThe only thing is, you might\nforget that it's in your desktop.\n\n412\n00:23:38.210 --> 00:23:38.730\nYou might move it.\n\n413\n00:23:38.730 --> 00:23:41.910\nI always try to put my applications\nin a centralized depot.\n\n414\n00:23:41.910 --> 00:23:46.930\nAlso, it makes it easier to identify that\nit's meant to be there when I search\n\n415\n00:23:46.930 --> 00:23:52.060\nwith Spotlight or a corresponding tool for\nthe other platforms.\n\n416\n00:23:52.060 --> 00:23:54.000\nSo let's take a look at\nthe Atom text editor.\n\n417\n00:23:54.000 --> 00:23:57.857\nWe'll make sure that our Python works,\nand then well,\n\n418\n00:23:57.857 --> 00:24:00.250\nI think that'll wrap this one up.\n\n419\n00:24:00.250 --> 00:24:03.910\nSo I'm gonna hit Cmd+Space bar, and\nI'm gonna type Visual Studio Code.\n\n420\n00:24:03.910 --> 00:24:06.788\nAnd it's gonna open up, and\nit's that same exact screen.\n\n421\n00:24:06.788 --> 00:24:11.552\nOkay, I'm gonna make this giant,\nand for the most part,\n\n422\n00:24:11.552 --> 00:24:19.020\nthese are the only two icons that we're\ngoing to need to worry about initially.\n\n423\n00:24:19.020 --> 00:24:22.660\nThese are those other things that\nare gonna be helpful later on,\n\n424\n00:24:22.660 --> 00:24:24.000\nthese last three.\n\n425\n00:24:24.000 --> 00:24:25.160\nDefinitely explore, but\n\n426\n00:24:25.160 --> 00:24:29.520\nif I hit this, all it's gonna do\nis open up this little explorer.\n\n427\n00:24:29.520 --> 00:24:31.510\nAnd it says, okay, well,\nthere's no folder open.\n\n428\n00:24:31.510 --> 00:24:36.460\nBy default, it's going to expect that\nyou're working within a top level folder,\n\n429\n00:24:36.460 --> 00:24:38.340\nand all of these things\nare gonna be in there.\n\n430\n00:24:39.370 --> 00:24:42.870\nAnd then from there,\nlet's say I open a folder, and\n\n431\n00:24:42.870 --> 00:24:45.530\nI'm going to open my desktop like so.\n\n432\n00:24:45.530 --> 00:24:50.055\nSo Open, and\nit's going to refresh, and now,\n\n433\n00:24:50.055 --> 00:24:54.935\nit's funny,\nsee how there's that .localized?\n\n434\n00:24:54.935 --> 00:24:57.760\nWell, if we come back to my desktop,\n\n435\n00:24:57.760 --> 00:25:02.740\nthat's actually nowhere on my desktop,\nbut it is.\n\n436\n00:25:02.740 --> 00:25:06.345\nWhen you open a folder in\nVisual Studio code, by default,\n\n437\n00:25:06.345 --> 00:25:10.477\nit's gonna show you all folders and\nfiles, even the hidden ones.\n\n438\n00:25:10.477 --> 00:25:13.615\nBy convention, on computers,\nif it has a dot at the beginning,\n\n439\n00:25:13.615 --> 00:25:17.100\nit's hidden by default,\nunless you change those settings.\n\n440\n00:25:17.100 --> 00:25:19.150\nSo localized is actually on my desktop,\n\n441\n00:25:20.470 --> 00:25:23.360\nI just can't see it through\nthe normal user interface.\n\n442\n00:25:23.360 --> 00:25:27.051\nBut Visual Studio Code's gonna show you\nthose, so be aware of that and be careful.\n\n443\n00:25:27.051 --> 00:25:30.750\nI wouldn't necessarily\nwilly-nilly delete these things.\n\n444\n00:25:30.750 --> 00:25:35.250\nBut I wanted to show that it gives\nyou some very basic interactions.\n\n445\n00:25:35.250 --> 00:25:40.075\nSo if I wanted to create a new file,\nlike hello.txt,\n\n446\n00:25:40.075 --> 00:25:46.417\nthen it will create it in that folder and\nit will open it up to the right.\n\n447\n00:25:46.417 --> 00:25:52.610\nSo you can start typing,\nbe like, Hello Vonne, like that.\n\n448\n00:25:52.610 --> 00:25:56.784\nThat's good, and then correspondingly,\nif I wanted to create a folder,\n\n449\n00:25:56.784 --> 00:26:01.535\nthen I could say some_important,\nand you've gotta be careful here,\n\n450\n00:26:01.535 --> 00:26:04.905\nimportant_project.\n\n451\n00:26:06.100 --> 00:26:10.970\nAnd now I have a drop down, and I can take\nthis and move it inside of that folder.\n\n452\n00:26:10.970 --> 00:26:13.430\nAnd it says, do you wanna move it, yep.\n\n453\n00:26:13.430 --> 00:26:19.540\nAnd I have the ability to kind of just\nwork inside of Visual Studio Code itself.\n\n454\n00:26:19.540 --> 00:26:22.261\n&gt;&gt; You don't have to close\nit right there in that.\n\n455\n00:26:22.261 --> 00:26:25.801\nYeah, cuz sometimes when you're doing\nthings with Office or whatever,\n\n456\n00:26:25.801 --> 00:26:29.968\nif you don't close a document first, it\ndoes like, I can't move it right now into\n\n457\n00:26:29.968 --> 00:26:33.190\nanother folder, cuz it's actively\nopen in that other location.\n\n458\n00:26:33.190 --> 00:26:34.420\nDo you know what I'm talking about?\n\n459\n00:26:34.420 --> 00:26:38.230\n&gt;&gt; Yeah, so I have it actively open,\nI've modified it, but\n\n460\n00:26:38.230 --> 00:26:41.820\nthen I moved it, and\nit was still open in the editor.\n\n461\n00:26:41.820 --> 00:26:43.400\nWell, I'm gonna close this,\n\n462\n00:26:43.400 --> 00:26:48.230\nand it didn't error because my editor's\nlooking at the desktop as a whole.\n\n463\n00:26:48.230 --> 00:26:52.257\nSo it sees that it just moved\ninside of that desktop folder.\n\n464\n00:26:52.257 --> 00:26:56.790\nif you move it otherwise,\nyou will get a, let me show you.\n\n465\n00:26:56.790 --> 00:27:00.807\n&gt;&gt; Like if you move this out to your\ndocuments or something, or did,\n\n466\n00:27:00.807 --> 00:27:02.128\ncan you even do that?\n\n467\n00:27:02.128 --> 00:27:06.890\nBecause, I mean, cuz this is like\nan editor that's kind of allowing you.\n\n468\n00:27:06.890 --> 00:27:11.487\nYou said, be in the desktop, and this\nis my root directory, if you wanna say.\n\n469\n00:27:11.487 --> 00:27:13.468\nAnd then anything inside of it's like,\n\n470\n00:27:13.468 --> 00:27:16.130\nthis is all contained\nwithin the home folder.\n\n471\n00:27:16.130 --> 00:27:19.963\nAnd does it even give you\nthe opportunity to save outside of that?\n\n472\n00:27:19.963 --> 00:27:22.521\n&gt;&gt; So you could do a save as.\n\n473\n00:27:22.521 --> 00:27:24.435\n&gt;&gt; Okay, then you have that.\n&gt;&gt; And you can save to another place, but\n\n474\n00:27:24.435 --> 00:27:28.044\nif you wanna move it, you would have\nto do that like through the finder, or\n\n475\n00:27:28.044 --> 00:27:30.159\nWindows Explorer, something like that.\n\n476\n00:27:30.159 --> 00:27:35.380\nAnd if you do do that, then you'll get\nsomething very similar when you move it.\n\n477\n00:27:35.380 --> 00:27:38.810\nIt'll disappear from this folder, and\ndo you see that little round dot there?\n\n478\n00:27:38.810 --> 00:27:40.340\nThat means this has not been saved.\n\n479\n00:27:40.340 --> 00:27:44.980\nEffectively, it will keep open a version,\neven though it moves.\n\n480\n00:27:44.980 --> 00:27:48.563\nAnd then if you go to close it,\nit'll say, do you want to save changes?\n\n481\n00:27:48.563 --> 00:27:51.643\nIF you hit Yes,\nafter you've moved it, hit Save,\n\n482\n00:27:51.643 --> 00:27:55.740\nit'll re-save a new version in\nwhatever folder you moved it from.\n\n483\n00:27:55.740 --> 00:27:58.726\nSo keep that in mind,\nthat is kind of a weird edge case.\n\n484\n00:27:58.726 --> 00:28:02.980\nI'm actually gonna close this and\nsay Don't Save because I don't care.\n\n485\n00:28:02.980 --> 00:28:05.191\n&gt;&gt; Yeah and I think I'm just,\nit's so ingrained in me.\n\n486\n00:28:05.191 --> 00:28:09.883\nI don't move locations of files\nanywhere anytime unless I've\n\n487\n00:28:09.883 --> 00:28:14.937\nclosed the files and I'm in something\nlike finder or what have you.\n\n488\n00:28:14.937 --> 00:28:18.158\nOr doing a file save as specifically and\nknowing what I'm doing,\n\n489\n00:28:18.158 --> 00:28:20.430\ncuz it just gets a little confusing to me.\n\n490\n00:28:20.430 --> 00:28:24.040\n&gt;&gt; It can get confusing, I will tell you,\nsometimes I get a little cavalier.\n\n491\n00:28:24.040 --> 00:28:27.420\nBut I know about these edge cases,\nso definitely do be careful.\n\n492\n00:28:27.420 --> 00:28:30.890\nMake sure files are closed\nbefore moving them around.\n\n493\n00:28:30.890 --> 00:28:35.360\nThat also includes the folder that\nVisual Studio Code is actually looking at.\n\n494\n00:28:35.360 --> 00:28:38.750\nNow, one last thing before\nwe jet out of here.\n\n495\n00:28:38.750 --> 00:28:41.360\nIf we come in and\nlook at the screen, again,\n\n496\n00:28:41.360 --> 00:28:45.740\nI'm gonna hop over here I'm\ngonna hit Cmd+Spacebar.\n\n497\n00:28:45.740 --> 00:28:48.638\nNotice that folder's over there, and\nI'm gonna just look at terminal.\n\n498\n00:28:48.638 --> 00:28:51.510\nAll right, so we know a little\nbit about the terminal by now.\n\n499\n00:28:51.510 --> 00:28:57.964\nAnd, well, if we open this up, and\nmake this bigger, right, make this giant.\n\n500\n00:28:57.964 --> 00:29:02.730\nAll I need you to do to double\ncheck is python --version.\n\n501\n00:29:02.730 --> 00:29:09.032\nAnd notice it is, wait a minute,\nwe installed 3.6.5.\n\n502\n00:29:09.032 --> 00:29:11.432\nMac and Linux system, by default,\n\n503\n00:29:11.432 --> 00:29:16.405\nPython is the old version which is\nactually used by the operating system.\n\n504\n00:29:16.405 --> 00:29:21.349\nPython3 --version,\nyou gotta spell version right,\n\n505\n00:29:21.349 --> 00:29:24.790\nversion, Python 3.6.5.\n\n506\n00:29:24.790 --> 00:29:29.873\nWindows users, you're probably going\nto also go through the same thing.\n\n507\n00:29:29.873 --> 00:29:34.385\nIf you type this exactly,\nwe should see 3.6.5, and\n\n508\n00:29:34.385 --> 00:29:37.430\nif you see that, then you're good.\n\n509\n00:29:37.430 --> 00:29:43.125\nIf you do not see that,\ntry a reboot, try a reinstall.\n\n510\n00:29:43.125 --> 00:29:48.680\nAnd then, if worst comes to worst,\nhop back over to python.org.\n\n511\n00:29:48.680 --> 00:29:52.309\nAnd there are some documentations\nlike frequently asked questions and\n\n512\n00:29:52.309 --> 00:29:53.527\nthings of that nature.\n\n513\n00:29:53.527 --> 00:29:58.831\nAlso, a beginner's guide that will\nhelp you with getting Python,\n\n514\n00:29:58.831 --> 00:30:03.400\ntaking you to places,\nwhere to solve common errors.\n\n515\n00:30:03.400 --> 00:30:07.621\nSo check those out, but for the most part,\nit's pretty easy to install,\n\n516\n00:30:07.621 --> 00:30:11.178\nit's good to go, and, well,\nwe're ready to move forward.\n\n517\n00:30:11.178 --> 00:30:14.299\nWe have our editor,\nwe have Python 3.6.5, and, well,\n\n518\n00:30:14.299 --> 00:30:16.530\nI guess we actually get\nto start digging in.\n\n519\n00:30:16.530 --> 00:30:19.052\nBut we're out of time for this episode,\nVonne, so it's gonna have to wait.\n\n520\n00:30:19.052 --> 00:30:21.483\n&gt;&gt; All right, well, Justin,\nthank you so much for that information.\n\n521\n00:30:21.483 --> 00:30:24.180\nSome really good foundational\nknowledge to get us started.\n\n522\n00:30:24.180 --> 00:30:27.378\nBecause if we don't have it installed\nright, well, then we can't get past this\n\n523\n00:30:27.378 --> 00:30:29.602\npoint and actually code, so\nthank you so much for that.\n\n524\n00:30:29.602 --> 00:30:34.037\nAnd thank you for joining us, but we are\ngonna go ahead and sign off for DevProTV.\n\n525\n00:30:34.037 --> 00:30:35.320\nI've been your host, Vonne Smith.\n\n526\n00:30:35.320 --> 00:30:35.964\n&gt;&gt; And I'm Justin Dennison.\n\n527\n00:30:35.964 --> 00:30:37.204\n&gt;&gt; And we'll see you soon.\n\n528\n00:30:37.204 --> 00:30:43.223\n[MUSIC]\n\n",
          "vimeoId": "266338643"
        },
        {
          "description": "In this episode, Justin and Vonne explore the Read, Evaluate, Print, Loop (REPL) tool that is available with Python. Justin demonstrates and talks through some of the more common errors that people will encounter when first getting started.",
          "length": "1482",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-3-1-exploring_the_repl-042018-PGM.00_29_30_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-3-1-exploring_the_repl-042018-PGM.00_29_30_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-3-1-exploring_the_repl-042018-PGM.00_29_30_17.Still001-sm.jpg",
          "title": "Exploring the REPL",
          "transcript": "WEBVTT\n\n1\n00:00:00.780 --> 00:00:02.978\n[MUSIC]\n\n2\n00:00:13.188 --> 00:00:17.308\nHello, everyone and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.308 --> 00:00:18.665\nI'm your host, Vonne Smith, and\n\n4\n00:00:18.665 --> 00:00:21.725\nwe are moving through our\napplied fundamental series.\n\n5\n00:00:21.725 --> 00:00:24.215\nIn this episode,\nwe're going to be exploring the REPL.\n\n6\n00:00:24.215 --> 00:00:25.795\nAnd here to help us is Mr.\n\n7\n00:00:25.795 --> 00:00:28.755\nJustin Dennison, how are you?\n&gt;&gt; I'm doing fantastic Vonne,\n\n8\n00:00:28.755 --> 00:00:30.585\nhow are you?\n&gt;&gt; I'm doing pretty good.\n\n9\n00:00:30.585 --> 00:00:34.035\nI'm feeling pretty confident about\nthat we've installed Python.\n\n10\n00:00:34.035 --> 00:00:38.340\nAnd we're gonna use our text editor and\nnow you've thrown in this REPL.\n\n11\n00:00:38.340 --> 00:00:39.540\nYou said something about it,\n\n12\n00:00:39.540 --> 00:00:43.760\nbut what exactly is the REPL?\n&gt;&gt; Well,\n\n13\n00:00:43.760 --> 00:00:48.930\nthis is one of those things that as we're\ncoming back to these fundamental concepts,\n\n14\n00:00:48.930 --> 00:00:54.250\nI've kind of been deep in it for a while,\nI'll throw around terminology and luckily\n\n15\n00:00:54.250 --> 00:00:58.988\nI've got Vonne over here to keep me honest\n&gt;&gt; The REPL R-E-P-L right,\n\n16\n00:00:58.988 --> 00:01:04.738\nyou saw that on the lower third\nas we came into this episode,\n\n17\n00:01:04.738 --> 00:01:09.460\nand that means Read Evaluate Print Loop,\nokay?\n\n18\n00:01:09.460 --> 00:01:13.230\nSo those are actually just four words,\nyou're like Justin you just said words,\n\n19\n00:01:13.230 --> 00:01:15.820\nI don't know what that actually means.\n\n20\n00:01:15.820 --> 00:01:19.910\nEssentially what a REPL does is\nit takes user input, you right?\n\n21\n00:01:19.910 --> 00:01:22.000\nIt reads it from you.\n\n22\n00:01:22.000 --> 00:01:23.985\nIt takes whatever you put in there and\nevaluates it.\n\n23\n00:01:23.985 --> 00:01:26.130\nWhat does that mean by evaluate?\n\n24\n00:01:26.130 --> 00:01:28.910\nWell if I say, hey what's three plus two,\nyou go it's five.\n\n25\n00:01:28.910 --> 00:01:31.970\nWell, you evaluated that thing and\n\n26\n00:01:31.970 --> 00:01:35.430\nthen it prints it when you set it\nback to me, that's like printing it.\n\n27\n00:01:35.430 --> 00:01:39.250\nAnd then it comes back around and\nlooks for the next input,\n\n28\n00:01:39.250 --> 00:01:41.110\nso that's where the loop comes, right.\n\n29\n00:01:41.110 --> 00:01:45.600\nSo it'll say, what do you got, I type\nit in, it reads it in, it evaluates it,\n\n30\n00:01:45.600 --> 00:01:49.740\nit spits out the result, and\nthen it asks for the next thing, okay?\n\n31\n00:01:49.740 --> 00:01:53.590\nWhat's next, what's next, what's next.\n&gt;&gt; And I almost, I feel like I used some\n\n32\n00:01:53.590 --> 00:01:56.595\nterminology that I wasn't really\nsure I was using in the right place.\n\n33\n00:01:56.595 --> 00:01:58.860\n[INAUDIBLE] meant a compiler?\n\n34\n00:02:00.150 --> 00:02:02.010\nIs that the same or\nis that completely different?\n\n35\n00:02:02.010 --> 00:02:03.380\n&gt;&gt; No, so during this time,\n\n36\n00:02:03.380 --> 00:02:06.015\nPython was being interpreted on the fly.\n\n37\n00:02:06.015 --> 00:02:09.410\nSo it gets a little hazy\nsometimes with new languages,\n\n38\n00:02:09.410 --> 00:02:14.090\nbecause really Python sometimes compiled,\n\n39\n00:02:14.090 --> 00:02:17.490\ndepending on the implementation or\nit's compiled while it's running.\n\n40\n00:02:17.490 --> 00:02:20.420\nBut during the REPL, you can think\nof it as it being interpreted.\n\n41\n00:02:20.420 --> 00:02:24.358\nI give it something and at that moment,\nit doesn't change into anything.\n\n42\n00:02:24.358 --> 00:02:26.510\nIt just says, cool,\nI know how to evaluate that, so\n\n43\n00:02:26.510 --> 00:02:29.630\nit interprets the respective meaning,\nright?\n\n44\n00:02:29.630 --> 00:02:34.040\nSo as I said, three plus two, that's five.\n\n45\n00:02:34.040 --> 00:02:37.640\nWe are interpreting three\nplus two as you want me to\n\n46\n00:02:37.640 --> 00:02:39.550\nput those two things together and\nspit that back out.\n\n47\n00:02:39.550 --> 00:02:44.210\nSo it does get a little shaky there\nbefore our intents and purposes.\n\n48\n00:02:44.210 --> 00:02:47.750\nWe're gonna say that Python isn't\nan interpreted language and\n\n49\n00:02:47.750 --> 00:02:50.780\nwe'll always kind of interpret\nwhat is written out and\n\n50\n00:02:50.780 --> 00:02:54.034\nkinda bring it back to us.\n&gt;&gt; And those other languages, I'm\n\n51\n00:02:54.034 --> 00:02:58.224\nkinda now I'm stuck on I'm like I don't\neven know what a compiler is anymore.\n\n52\n00:02:58.224 --> 00:03:00.850\n[LAUGH]\n&gt;&gt; So there are other languages and one\n\n53\n00:03:00.850 --> 00:03:06.430\ncould say that compilation is sometimes\nused in kind of an ambiguous way.\n\n54\n00:03:06.430 --> 00:03:07.680\nBut for the most part,\n\n55\n00:03:07.680 --> 00:03:10.640\ncompiler languages would be languages\nwhere I have something, right?\n\n56\n00:03:10.640 --> 00:03:15.330\nTypically text based code, and\nit is compiled to machine level code for\n\n57\n00:03:15.330 --> 00:03:18.440\na particular platform,\neffectively it turns into ones and\n\n58\n00:03:18.440 --> 00:03:20.250\nzeroes types of instructions.\n\n59\n00:03:20.250 --> 00:03:24.522\nI'm over simplifying that a great deal,\nbut then that thing is what's run.\n\n60\n00:03:24.522 --> 00:03:28.842\nSo your machine knows how to run\nthat thing, whereas in Python,\n\n61\n00:03:28.842 --> 00:03:31.562\nI can just feed it\na little bit at a time and\n\n62\n00:03:31.562 --> 00:03:36.060\nit goes cool I know how to run any\nof these as long as they're valid.\n\n63\n00:03:36.060 --> 00:03:38.700\nSo it interprets it as it goes, and\n\n64\n00:03:38.700 --> 00:03:41.720\nthen usually there's something underneath\nthat knows how to interpret that.\n\n65\n00:03:41.720 --> 00:03:44.990\nThat it abstracts away from your\nrespective computer, that's why you\n\n66\n00:03:44.990 --> 00:03:48.974\ncan install it on Linux and Mac and-\n&gt;&gt; PCs.\n\n67\n00:03:48.974 --> 00:03:53.290\n[LAUGH]\n&gt;&gt; Windows, wow, I almost forgot there.\n\n68\n00:03:53.290 --> 00:03:56.310\nAnd you have a very similar experience,\nand you have a REPL.\n\n69\n00:03:57.340 --> 00:04:01.220\nA REPL is a little more difficult\nwhen it is a compiled language.\n\n70\n00:04:01.220 --> 00:04:06.210\nNot impossible, but\na read-evaluate-print-loop capability\n\n71\n00:04:06.210 --> 00:04:09.380\ngets a little shaky when it's\na purely compiled language.\n\n72\n00:04:09.380 --> 00:04:11.980\n&gt;&gt; Okay well, that helps me know what I\n\n73\n00:04:11.980 --> 00:04:16.980\nwas trying to say that really didn't\nknow what I was trying to say.\n\n74\n00:04:16.980 --> 00:04:18.568\n[LAUGH]\n&gt;&gt; [LAUGH] And that's to be expected,\n\n75\n00:04:18.568 --> 00:04:21.010\nyou will encounter terminology,\nand jargon, and things, right.\n\n76\n00:04:22.200 --> 00:04:24.950\nVonne, you need to keep me honest,\nif there's something you don't know and\n\n77\n00:04:24.950 --> 00:04:28.230\nmaybe it's because you haven't\nbeen in a respective episode or\n\n78\n00:04:28.230 --> 00:04:31.170\nwhatever it is, you just say Justin,\nwhat are you talking about.\n\n79\n00:04:31.170 --> 00:04:32.670\nAnd I will try my best to answer it.\n\n80\n00:04:32.670 --> 00:04:38.170\nAll right, so we know what a REPL is\nat a high level, but why do we care?\n\n81\n00:04:38.170 --> 00:04:39.550\nWell, it's really easy.\n\n82\n00:04:39.550 --> 00:04:43.520\nIt's kind of like you're almost\na 20 questions kind of thing.\n\n83\n00:04:43.520 --> 00:04:45.320\nYou go, hey REPL, what's this?\n\n84\n00:04:45.320 --> 00:04:48.200\nAnd it goes, all right, read that in,\nI evaluate, there it is.\n\n85\n00:04:48.200 --> 00:04:49.142\nAll right, what's next?\n\n86\n00:04:49.142 --> 00:04:52.680\nRight, so if you've ever played\n20 questions, is it an animal?\n\n87\n00:04:52.680 --> 00:04:54.400\nIs it a truck?\n\n88\n00:04:54.400 --> 00:04:57.237\nDon't, that should not\nbe your second question.\n\n89\n00:04:57.237 --> 00:04:57.980\n[LAUGH] Is it living?\n\n90\n00:04:57.980 --> 00:04:59.960\nIs it dead?\nThose type of things.\n\n91\n00:04:59.960 --> 00:05:04.600\nEffectively, you're giving it things to\nevaluate to see if they're valid, and\n\n92\n00:05:04.600 --> 00:05:08.500\nwhat the result is all right, and\nthen it's gonna spit it back out to you.\n\n93\n00:05:09.590 --> 00:05:12.580\nSo that is perfectly okay, now\n\n94\n00:05:14.470 --> 00:05:18.840\nhow does this actually\nwork when we're using it?\n\n95\n00:05:18.840 --> 00:05:22.380\nSo if you take a look at the screen here,\nwe're actually gonna hop in to the REPL.\n\n96\n00:05:22.380 --> 00:05:25.560\nAnd in the previous episode, we saw this\nwhen we were poking around in Python.\n\n97\n00:05:25.560 --> 00:05:27.800\nWhen we clicked on an IDE tool,\n\n98\n00:05:27.800 --> 00:05:31.110\nthat's actually what you get by\ndefault until you open a new file.\n\n99\n00:05:31.110 --> 00:05:36.980\nThe little, the three carrots and,\ngreater than signs, carrots are, yeah.\n\n100\n00:05:36.980 --> 00:05:41.849\nSo I'm gonna hold command, hit space bar\nand hop into the terminal, all right?\n\n101\n00:05:41.849 --> 00:05:46.645\nAnd then I'm going to open this and\nmake this giant,\n\n102\n00:05:46.645 --> 00:05:51.125\nand then at this point,\nwe can hop into the REPL.\n\n103\n00:05:52.701 --> 00:05:57.357\nAs such Python 3 is probably what you're\ngonna need based on your installation\n\n104\n00:05:57.357 --> 00:05:58.990\nsteps.\n&gt;&gt; So I was gonna ask cuz,\n\n105\n00:05:58.990 --> 00:06:03.950\nI mean this REPL, it sounds like so\nwhat's the piece of software or\n\n106\n00:06:03.950 --> 00:06:07.350\nthe thing that we're\ngoing to run the REPL?\n\n107\n00:06:07.350 --> 00:06:09.400\nCuz I mean, you just said it's\njust a bunch of commands.\n\n108\n00:06:09.400 --> 00:06:12.250\nI mean we're using terminal.\n\n109\n00:06:12.250 --> 00:06:15.690\nYou can use other things,\n\n110\n00:06:15.690 --> 00:06:20.350\nthat is going to do the REPL.\n&gt;&gt; So the REPL is an interface,\n\n111\n00:06:20.350 --> 00:06:24.780\nit is a way of interacting\nwith the Python runtime.\n\n112\n00:06:24.780 --> 00:06:26.430\nWhat do I mean by runtime?\n\n113\n00:06:26.430 --> 00:06:30.800\nEssentially, how Python is interpreted and\nevaluated.\n\n114\n00:06:30.800 --> 00:06:33.910\nSo when I type Python 3,\nI get what's called the REPL.\n\n115\n00:06:33.910 --> 00:06:37.620\nIt's a special piece of software that\nallows me to effectively type in input.\n\n116\n00:06:38.950 --> 00:06:42.910\nIt'll read in that input, it will\nevaluate it and spit it back out to me.\n\n117\n00:06:42.910 --> 00:06:46.180\nIt does not mean that it has\nto occur in the terminal.\n\n118\n00:06:46.180 --> 00:06:51.620\nIt is just a separate piece of software\nthat happens to run in this command line\n\n119\n00:06:51.620 --> 00:06:54.250\nenvironment, and\nhopefully that clears that up.\n\n120\n00:06:54.250 --> 00:06:55.880\n&gt;&gt; You had to have Python first, though.\n\n121\n00:06:55.880 --> 00:06:59.720\nLike if the first step that we did,\nwe installed Python.\n\n122\n00:06:59.720 --> 00:07:03.650\nWe're using terminal to go ahead and\ndo the read, evaluate, print and\n\n123\n00:07:03.650 --> 00:07:06.060\nloop, and it's gonna spit it out.\n\n124\n00:07:06.060 --> 00:07:09.610\nThat IDE, you just said,\nthat IDE could do this?\n\n125\n00:07:09.610 --> 00:07:10.234\n&gt;&gt; Yep, so\n\n126\n00:07:10.234 --> 00:07:12.830\nIDE is a way to get at the REPL.\n\n127\n00:07:12.830 --> 00:07:13.900\nSo when you double-click IDE and\n\n128\n00:07:13.900 --> 00:07:19.040\nit opens up, you'll see this\nexact same kind of character set.\n\n129\n00:07:19.040 --> 00:07:20.620\nThat means, for Python,\n\n130\n00:07:20.620 --> 00:07:25.800\nif that's what you're expecting, you're\nnow in a REPL environment for Python.\n\n131\n00:07:25.800 --> 00:07:30.200\nSo as you type, it is going to be\ntrying to take whatever you type and\n\n132\n00:07:30.200 --> 00:07:33.630\nevaluate it as valid Python code.\n\n133\n00:07:33.630 --> 00:07:37.387\nAnd then spit out the respective result.\n&gt;&gt; And terminal,\n\n134\n00:07:37.387 --> 00:07:41.218\nthat's a Mac thing,\nI mean so if I was in PC,\n\n135\n00:07:41.218 --> 00:07:45.972\nI have a terminal, right, or?\n&gt;&gt; You have a terminal emulator\n\n136\n00:07:45.972 --> 00:07:50.950\nenvironment that you would also have,\nthis would be CMD or PowerShell.\n\n137\n00:07:50.950 --> 00:07:56.796\nIn Linux, it is typically called terminal,\nor terminal emulator, or console.\n\n138\n00:07:56.796 --> 00:08:00.568\nAnd definitely check out the getting\ntechnical with the terminal,\n\n139\n00:08:00.568 --> 00:08:03.040\nwe kinda went through some of those.\n\n140\n00:08:03.040 --> 00:08:06.730\nAnd if you're like,\nwell wait a minute does that mean that\n\n141\n00:08:06.730 --> 00:08:10.320\nany time you're in the terminal I need\nto be in my respective environment?\n\n142\n00:08:10.320 --> 00:08:13.190\nAbsolutely all right,\nso if you're on your PC\n\n143\n00:08:13.190 --> 00:08:17.670\nyou're probably gonna do this through\nthe command prompt or through PowerShell.\n\n144\n00:08:17.670 --> 00:08:21.320\nSo pick your poison on that,\nor pick your, I don't know,\n\n145\n00:08:21.320 --> 00:08:23.050\npoison has a negative connotation.\n\n146\n00:08:23.050 --> 00:08:26.420\nBut, pick whatever you want to, right?\n\n147\n00:08:26.420 --> 00:08:28.610\nSo we're nowt technically in the REPL.\n\n148\n00:08:30.200 --> 00:08:31.590\nSo Vonne, I'm gonna ask you,\n\n149\n00:08:31.590 --> 00:08:33.940\nwhat's your favorite number?\n&gt;&gt; Seven.\n\n150\n00:08:33.940 --> 00:08:35.480\n&gt;&gt; Seven, and I'm gonna hit enter.\n\n151\n00:08:36.590 --> 00:08:37.610\nGuess what?\nYou technically,\n\n152\n00:08:37.610 --> 00:08:40.020\njust if you type this along,\nthis is Python code.\n\n153\n00:08:41.460 --> 00:08:44.730\nThe number seven, Python goes cool,\nI know what the number seven is,\n\n154\n00:08:44.730 --> 00:08:45.778\nit's seven.\n&gt;&gt; So\n\n155\n00:08:45.778 --> 00:08:49.354\nit read it, it evaluated it,\nit printed it out as seven.\n\n156\n00:08:49.354 --> 00:08:51.658\nAnd then looped and said,\nwell we don't have anything else to do and\n\n157\n00:08:51.658 --> 00:08:54.160\nthen it just stopped.\n&gt;&gt; Yep, now it's waiting for\n\n158\n00:08:54.160 --> 00:08:56.150\nthe next input, all right, Vonne?\n\n159\n00:08:56.150 --> 00:08:58.840\nSo 7 is your favorite number,\nwhat's your second favorite number?\n\n160\n00:08:58.840 --> 00:08:59.942\n&gt;&gt; 10?\n\n161\n00:08:59.942 --> 00:09:02.675\n[LAUGH]\n&gt;&gt; All right, so\n\n162\n00:09:02.675 --> 00:09:05.986\nI'm gonna say + 10, Enter.\n\n163\n00:09:05.986 --> 00:09:08.880\nIt goes, cool, I know what 7 and\n+ and 10 mean.\n\n164\n00:09:08.880 --> 00:09:11.390\nSo I'm gonna read, I'm gonna evaluate.\n\n165\n00:09:11.390 --> 00:09:12.635\nHey, what's 7 + 10?\n\n166\n00:09:12.635 --> 00:09:13.730\nIt's 17.\n\n167\n00:09:13.730 --> 00:09:17.660\nWhen I print that back out and\nI'm going ask for the next input, okay?\n\n168\n00:09:17.660 --> 00:09:20.968\nSo we could do all math\noperations like this, so\n\n169\n00:09:20.968 --> 00:09:25.800\nminus 10 is negative 3, technically\nyou could use this as a calculator.\n\n170\n00:09:26.880 --> 00:09:31.639\nSo as you use this, if you hadn't,\n\n171\n00:09:31.639 --> 00:09:38.635\nyou say I'll need to go 3 times,\nor, 3 plus 4.\n\n172\n00:09:38.635 --> 00:09:44.920\nAnd then times which is shift\n8 it's the asterisk not an x.\n\n173\n00:09:44.920 --> 00:09:50.290\nAnd 10 right just like that, it will\nfollow the same order of operations.\n\n174\n00:09:50.290 --> 00:09:56.140\nIt'll do what you were taught a good\nchunk of your life during school,\n\n175\n00:09:56.140 --> 00:09:58.118\nit knows math, it knows numbers.\n\n176\n00:09:58.118 --> 00:10:02.350\nIt knows 7.7, I don't know if\nthat's doubly good Vonne but\n\n177\n00:10:02.350 --> 00:10:03.840\nI'm gonna assume that it is.\n\n178\n00:10:03.840 --> 00:10:07.880\nSo it knows how to do those as well,\nbut if I type 7.7.\n\n179\n00:10:07.880 --> 00:10:17.080\nHmm there's been several times\nthat we've talked about it.\n\n180\n00:10:17.080 --> 00:10:20.690\nThe best way to try to figure things\nout sometimes is poke at it and\n\n181\n00:10:20.690 --> 00:10:21.440\ntry to break it.\n\n182\n00:10:22.480 --> 00:10:23.840\nAll right, so we're in the REPL.\n\n183\n00:10:23.840 --> 00:10:30.398\nI'm gonna hit Enter, and\nwe have encountered our first break.\n\n184\n00:10:32.329 --> 00:10:34.600\nAnd I showed you this for\na couple of reasons.\n\n185\n00:10:34.600 --> 00:10:39.430\nIf you ever wonder whether something is\nvalid Python code, hop into the REPL,\n\n186\n00:10:39.430 --> 00:10:40.420\ntype it in.\n\n187\n00:10:40.420 --> 00:10:42.490\nIf you do not get an error,\nthen it's valid.\n\n188\n00:10:42.490 --> 00:10:44.160\nThat doesn't mean that it's right,\n\n189\n00:10:44.160 --> 00:10:48.210\nthat just means that Python\nknows how to evaluate it, okay?\n\n190\n00:10:48.210 --> 00:10:53.080\nNumber two, if you do get an error, you're\ngonna get a very specific set of errors.\n\n191\n00:10:54.580 --> 00:10:58.670\nOur first one, syntax error,\ninvalid syntax.\n\n192\n00:10:58.670 --> 00:10:59.620\nWhat does that mean?\n\n193\n00:11:00.650 --> 00:11:03.280\nWell, it has this little caret here,\nand it says it points to this point.\n\n194\n00:11:03.280 --> 00:11:08.670\nIt says, hey so I was good up until\nthis point, literally this point.\n\n195\n00:11:09.910 --> 00:11:11.130\nAnd then I didn't know what to do with it,\n\n196\n00:11:11.130 --> 00:11:14.790\nbecause it doesn't make any sense,\nall right?\n\n197\n00:11:14.790 --> 00:11:16.960\nSo 7.7 point whoa, what?\n\n198\n00:11:16.960 --> 00:11:20.320\nThat's not how numbers work, so\nit breaks, and it says hey, syntax error,\n\n199\n00:11:20.320 --> 00:11:21.509\nit's right there, you broke something.\n\n200\n00:11:23.090 --> 00:11:26.574\nIf you're in the REPL and you're just\ntyping things, you're trying things out,\n\n201\n00:11:26.574 --> 00:11:28.230\nright, you're new and things break.\n\n202\n00:11:28.230 --> 00:11:29.524\nYou go that's where it's broke.\n\n203\n00:11:29.524 --> 00:11:34.000\nIt's not the most friendly environment\nbecause there are spacing and\n\n204\n00:11:34.000 --> 00:11:37.020\nmultiple lines and things, but\nit is a quick way to test.\n\n205\n00:11:37.020 --> 00:11:41.183\nThat's one of the draws of Python and\nlanguages that have a REPL is.\n\n206\n00:11:41.183 --> 00:11:45.305\nI can test something out real\nquick without having to like setup\n\n207\n00:11:45.305 --> 00:11:48.683\na whole project or\nanything like that, all right?\n\n208\n00:11:48.683 --> 00:11:53.073\nNow, that's our SyntaxError it knows\nnumbers I could do 7.7 plus and\n\n209\n00:11:53.073 --> 00:11:58.840\n7.3 times and I could do all\nof those numerical operations.\n\n210\n00:11:59.970 --> 00:12:02.910\nWe'll actually come back\nto those a little more.\n\n211\n00:12:02.910 --> 00:12:07.460\nBut you know what,\nif I hit x, right, actually,\n\n212\n00:12:07.460 --> 00:12:11.260\nlet's just type Vonne's name,\nvonne, all lowercase.\n\n213\n00:12:12.880 --> 00:12:15.370\nWell, you're gonna like,\nis that valid in Python?\n\n214\n00:12:15.370 --> 00:12:16.240\nCan I do that?\n\n215\n00:12:16.240 --> 00:12:19.370\nHit Enter, it's broke.\n\n216\n00:12:19.370 --> 00:12:20.710\nWhy is it broke?\n\n217\n00:12:20.710 --> 00:12:24.330\nWell, this is something that we're\nalso going to see a little bit later,\n\n218\n00:12:24.330 --> 00:12:25.250\nNameError.\n\n219\n00:12:26.720 --> 00:12:30.570\nThis is something that's called\na variable, which we'll dive further into.\n\n220\n00:12:30.570 --> 00:12:39.270\nBut what this means is, it was expecting\nv-o-n-n-e to just kind of work.\n\n221\n00:12:40.710 --> 00:12:42.410\nAnd it says hey I don't\nknow anything about that.\n\n222\n00:12:43.630 --> 00:12:46.280\nNow we fix this later.\n\n223\n00:12:46.280 --> 00:12:48.550\nAll right and\nif you want to see how you could fix it.\n\n224\n00:12:48.550 --> 00:12:51.560\nIt could say something like this.\n\n225\n00:12:53.830 --> 00:12:55.840\nAnd actually now works.\n\n226\n00:12:55.840 --> 00:12:57.440\nAnd you're like, that's weird.\n\n227\n00:12:57.440 --> 00:13:01.900\nYou ever see name error,\nthat means you have not done this line.\n\n228\n00:13:02.980 --> 00:13:06.740\nI'm speaking in large generalities because\nthe goal here is to talk about the REPL\n\n229\n00:13:06.740 --> 00:13:11.110\nnot necessarily about the nuances and\nidiosyncrasies of the respective language.\n\n230\n00:13:11.110 --> 00:13:12.500\n&gt;&gt; But it was evaluating.\n\n231\n00:13:12.500 --> 00:13:16.940\nIt says this does not compute,\nI don't understand what this is.\n\n232\n00:13:16.940 --> 00:13:21.710\nBut when you're saying like it's almost\nlike x equals 2 and y equals 3 so\n\n233\n00:13:21.710 --> 00:13:25.092\nx plus y equals 5, is that what it is?\n&gt;&gt; Yes.\n\n234\n00:13:25.092 --> 00:13:26.750\n&gt;&gt; Okay [LAUGH] I forgot what numbers I\n\n235\n00:13:26.750 --> 00:13:29.410\njust said, but\nit's the whole idea of giving it,\n\n236\n00:13:29.410 --> 00:13:34.100\nlike x means something, and\nsomething that it can evaluate.\n\n237\n00:13:34.100 --> 00:13:37.440\nAnd that's why when you\nsaid vonne = vonne, okay,\n\n238\n00:13:37.440 --> 00:13:42.460\nyou're saying this variable,\nthis thing is now equal to this.\n\n239\n00:13:42.460 --> 00:13:44.484\nI get it now.\n&gt;&gt; Yeah, and\n\n240\n00:13:44.484 --> 00:13:48.200\nit's perfectly okay if you're like wait\na minute that doesn't quite compute.\n\n241\n00:13:48.200 --> 00:13:50.310\nWe're gonna explore that\na little bit farther.\n\n242\n00:13:50.310 --> 00:13:51.170\nBut you're absolutely correct,\n\n243\n00:13:51.170 --> 00:13:56.290\nyou're essentially defining\nwhat this means, okay.\n\n244\n00:13:56.290 --> 00:14:00.461\nThat's a good way to think of it\nas far as the REPL is concerned.\n\n245\n00:14:00.461 --> 00:14:04.100\nOriginally give me a name here,\nthen the other time it just kinda works.\n\n246\n00:14:04.100 --> 00:14:07.730\nIf you ever see a name here\nyou've not told the REPL or\n\n247\n00:14:07.730 --> 00:14:11.450\nyour Python environment, if you're\nnot in the REPL, what that means.\n\n248\n00:14:11.450 --> 00:14:15.020\nIt goes, you're saying words and\nI don't know what you're talking about.\n\n249\n00:14:15.020 --> 00:14:17.397\nThat's effectively what that means,\nall right?\n\n250\n00:14:17.397 --> 00:14:22.274\nBut I intentionally did this because,\nwell, you're like but I just want to see,\n\n251\n00:14:22.274 --> 00:14:23.770\nI want to play with text.\n\n252\n00:14:23.770 --> 00:14:29.110\nI want to, again,\nthere's a lot more to this.\n\n253\n00:14:29.110 --> 00:14:31.640\nBut if you wanted to say, quotes,\n\n254\n00:14:31.640 --> 00:14:37.620\nsingle quotes, vonne,\nthat's perfectly acceptable.\n\n255\n00:14:37.620 --> 00:14:43.312\nSo quotes, if you wanna play around\nin the REPL are just text, okay?\n\n256\n00:14:43.312 --> 00:14:48.504\nQuotes vonne, quote, quote.\n\n257\n00:14:51.238 --> 00:14:53.270\nQuotes actually have\na very specific meaning.\n\n258\n00:14:53.270 --> 00:14:55.200\n&gt;&gt; Because it's saying that I am,\n\n259\n00:14:55.200 --> 00:15:00.640\nwhat's ever in between these\nquotes is treated as one thing.\n\n260\n00:15:00.640 --> 00:15:01.950\nIt's a string,\n\n261\n00:15:01.950 --> 00:15:05.500\nI know we're not getting, that's a little\nbit further down but this is a thing.\n\n262\n00:15:05.500 --> 00:15:08.505\nSo it's not a number, right?\n\n263\n00:15:08.505 --> 00:15:10.870\n[LAUGH]\n&gt;&gt; Yeah, you're absolutely correct.\n\n264\n00:15:10.870 --> 00:15:12.630\nThis means a very particular thing.\n\n265\n00:15:12.630 --> 00:15:15.910\nIf you picked up the newspaper or you read\nan article online, whatever it may be.\n\n266\n00:15:15.910 --> 00:15:19.030\nThe stuff that you're reading is text.\n\n267\n00:15:19.030 --> 00:15:26.270\nWell, the computer needs to know that you\nmean text and not some name thing right?\n\n268\n00:15:26.270 --> 00:15:29.220\nSo it's just one of those weird nuances.\n\n269\n00:15:29.220 --> 00:15:33.450\nBut I showed you that to show\nyou an additional syntax error.\n\n270\n00:15:33.450 --> 00:15:36.390\nIt's behind my head here, there we go.\n\n271\n00:15:37.680 --> 00:15:44.160\nYou'll see this syntax error, EOL,\nwhich stands for end of line.\n\n272\n00:15:44.160 --> 00:15:47.520\nWhile scanning string literal okay,\nwait a minute.\n\n273\n00:15:47.520 --> 00:15:52.728\nNow that I say that end of line.\n\n274\n00:15:52.728 --> 00:15:57.685\nEOL, so we'll actually We'll\nplay the old oogly-googly.\n\n275\n00:15:57.685 --> 00:16:02.028\nI wanna double check that cuz, you know,\nin my head, I was like yeah, end of line.\n\n276\n00:16:02.028 --> 00:16:04.980\nSoon as I said it out loud,\nstarted second guessing myself.\n\n277\n00:16:04.980 --> 00:16:09.146\nBut effectively what it means is\nit's scanning through this line, and\n\n278\n00:16:09.146 --> 00:16:12.520\nwhat Python is doing is\ngoing does this match this?\n\n279\n00:16:12.520 --> 00:16:15.825\nAnd you're exactly correct,\nit's essentially like a grouping of saying\n\n280\n00:16:15.825 --> 00:16:18.828\nbetween this quote and this quote,\nthis means something special.\n\n281\n00:16:18.828 --> 00:16:21.260\nAnd then there's this other one,\nbut they always come in pairs.\n\n282\n00:16:21.260 --> 00:16:22.260\nIt's kind of like your shoes.\n\n283\n00:16:22.260 --> 00:16:26.680\nIf you only have your left shoe, it feels\nweird just to wear your left shoe and\n\n284\n00:16:26.680 --> 00:16:27.420\nwalk around.\n\n285\n00:16:27.420 --> 00:16:30.500\nIf you don't believe me, put on your left\nshoe, go walk around the neighborhood.\n\n286\n00:16:30.500 --> 00:16:33.680\nPeople will be like, what are you doing?\n&gt;&gt; Well it's almost like an incomplete\n\n287\n00:16:33.680 --> 00:16:35.910\nthought, it's like you've\nstarted something but\n\n288\n00:16:35.910 --> 00:16:39.750\nI don't know where\nthe end of this thing is.\n\n289\n00:16:39.750 --> 00:16:44.300\nIt's funny I've noticed how you're trying\nnot to use specific terminology with this,\n\n290\n00:16:44.300 --> 00:16:49.110\nI'm like it's string wait but\nugh it's a variable.\n\n291\n00:16:49.110 --> 00:16:51.691\nBut that's what I was\ntrying to do like the math.\n\n292\n00:16:51.691 --> 00:16:55.959\nIn math, x equals 2, y equals 2, those are\nvariables that we learned in algebra and\n\n293\n00:16:55.959 --> 00:16:57.730\neverything like that.\n\n294\n00:16:57.730 --> 00:17:01.600\nBut it's kind of fun, having to watch you\ntry to kind of dance around it, it's hard!\n\n295\n00:17:01.600 --> 00:17:04.030\n&gt;&gt; It is very much hard, and\n\n296\n00:17:04.030 --> 00:17:09.150\nthe reason I'm doing that in particular\nis, I want to have a conceptual view,\n\n297\n00:17:09.150 --> 00:17:12.130\nto not get too deep at the current moment.\n\n298\n00:17:12.130 --> 00:17:14.150\nWe're gonna talk about all the things.\n\n299\n00:17:14.150 --> 00:17:17.660\nAnd I will tell you something\ncalled the poison of knowledge,\n\n300\n00:17:17.660 --> 00:17:20.510\nit's really hard to un-know\nthe things that you know.\n\n301\n00:17:20.510 --> 00:17:23.730\nAnd so you just use like terminology\nyou're like yeah it's obviously this,\n\n302\n00:17:23.730 --> 00:17:24.940\nand people go what are you talking about?\n\n303\n00:17:24.940 --> 00:17:28.300\nSo I'm trying to very\nspecifically not to do that.\n\n304\n00:17:28.300 --> 00:17:31.695\nThe REPL allows us to play around,\nwe can see these errors, and\n\n305\n00:17:31.695 --> 00:17:33.628\neffectively we have an ungrouped.\n\n306\n00:17:33.628 --> 00:17:36.250\nWe have an,\nit's an incomplete thought right?\n\n307\n00:17:36.250 --> 00:17:38.290\nSo you're like, well wait a minute.\n\n308\n00:17:38.290 --> 00:17:44.491\nNow if I put double quotes, I actually\nheld shift and I hit the same quote key.\n\n309\n00:17:44.491 --> 00:17:47.735\nAnd I say Vonne, and\nI hit double quotes again,\n\n310\n00:17:47.735 --> 00:17:53.350\nyou'll notice double-quotes actually\nspits back out with single quotes.\n\n311\n00:17:53.350 --> 00:17:57.060\nAnd the reason being is, Python as\na language says, cool, those are the same.\n\n312\n00:17:58.240 --> 00:18:00.473\nIt does not differentiate between the two.\n\n313\n00:18:03.538 --> 00:18:08.080\nIf I say, quote, Vonne,\nwhoa, that's a lot of Ns.\n\n314\n00:18:08.080 --> 00:18:10.610\nAnd I do the same thing,\nyou actually get the exact same error.\n\n315\n00:18:10.610 --> 00:18:12.240\nBecause they go cool,\n\n316\n00:18:12.240 --> 00:18:14.235\nif it's a double quote I'm just\ngonna treat it like a single quote.\n\n317\n00:18:14.235 --> 00:18:17.916\n[SOUND] And\nwe have that same string literal.\n\n318\n00:18:17.916 --> 00:18:23.262\nWhat that means is if you ever see this\nerror you have a quote that is misplaced,\n\n319\n00:18:23.262 --> 00:18:25.510\nyou're missing a pair.\n\n320\n00:18:25.510 --> 00:18:26.990\nYou only have a single.\n\n321\n00:18:26.990 --> 00:18:31.100\nOkay so those are three common areas\nthat you should be very aware of.\n\n322\n00:18:31.100 --> 00:18:33.990\n&gt;&gt; And I'm assuming that the single versus\n\n323\n00:18:33.990 --> 00:18:36.160\ndouble quotes is almost like\na stylistic preference.\n\n324\n00:18:37.850 --> 00:18:41.230\nWell is it also one of those like\nyou have to stay consistent?\n\n325\n00:18:41.230 --> 00:18:44.310\nLike if you are gonna use single quotes,\nuse single quotes all the way through.\n\n326\n00:18:44.310 --> 00:18:46.250\nIf you're using double,\nuse double all the way through.\n\n327\n00:18:46.250 --> 00:18:49.460\nCan you mix and match them or\nis it more you don't really do that?\n\n328\n00:18:49.460 --> 00:18:51.630\n&gt;&gt; So you're definitely right,\n\n329\n00:18:51.630 --> 00:18:52.600\npick one and stick with it.\n\n330\n00:18:52.600 --> 00:18:56.040\nThere are some conventions that as you\nget further along in your career that\n\n331\n00:18:56.040 --> 00:18:59.850\nare enforced by other bodies like\nthe Python Software Foundation.\n\n332\n00:18:59.850 --> 00:19:02.874\nThey have some recommendations\nas your code gets more complex,\n\n333\n00:19:02.874 --> 00:19:05.002\nuse single quote here, double quotes here.\n\n334\n00:19:05.002 --> 00:19:06.910\nBut all it is, is a convention.\n\n335\n00:19:06.910 --> 00:19:10.750\nYou can mix and match other than you can't\n\n336\n00:19:10.750 --> 00:19:16.260\nYou can't have a left high heel shoe and\na right flip flop.\n\n337\n00:19:16.260 --> 00:19:19.100\nSo you gotta have the same\nshoe on each foot.\n\n338\n00:19:19.100 --> 00:19:23.180\nOtherwise you're kinda walking around,\nall hobbled like.\n\n339\n00:19:23.180 --> 00:19:25.880\nOther than that,\nyou can do whatever you want to.\n\n340\n00:19:25.880 --> 00:19:31.170\nMy recommendation,\nis to keep it very, very consistent.\n\n341\n00:19:31.170 --> 00:19:33.000\nI try my best just to use single quotes,\n\n342\n00:19:33.000 --> 00:19:35.055\ncuz I don't have to hold the shift key,\nand I'm lazy.\n\n343\n00:19:35.055 --> 00:19:38.690\n[LAUGH] So I only need one\nfinger to type single quote,\n\n344\n00:19:38.690 --> 00:19:40.580\nI need two fingers to type double quote.\n\n345\n00:19:40.580 --> 00:19:44.490\nSo there are times where I will deviate\nbecause you have to do some more complex\n\n346\n00:19:44.490 --> 00:19:45.730\noperations.\n\n347\n00:19:45.730 --> 00:19:49.220\nBut we've seen that we\ncan hop into the REPL,\n\n348\n00:19:49.220 --> 00:19:51.520\nwe can actually try a few things out.\n\n349\n00:19:51.520 --> 00:19:54.180\nI wanted to show you\nthese more common errors,\n\n350\n00:19:54.180 --> 00:19:59.760\nif you do other things like\nsemicolon it'll give you syntax.\n\n351\n00:19:59.760 --> 00:20:03.120\nMostly what you're gonna encounter\nin the REPL are syntax errors.\n\n352\n00:20:04.190 --> 00:20:07.760\nBut if you do them in a REPL it actually\npoints to where that happened and\n\n353\n00:20:07.760 --> 00:20:09.570\nyou get an immediate feedback.\n\n354\n00:20:09.570 --> 00:20:13.585\nIt also gives you a little help, right?\n\n355\n00:20:13.585 --> 00:20:16.858\nSometimes It gives you not as much help,\n\n356\n00:20:16.858 --> 00:20:21.800\nthe error messages are very general.\n&gt;&gt; And maybe this is, again,\n\n357\n00:20:21.800 --> 00:20:26.760\nassumed knowledge, but\nwe don't code Python here.\n\n358\n00:20:26.760 --> 00:20:29.440\nWe're just kind of\ntesting things out here.\n\n359\n00:20:29.440 --> 00:20:33.820\nWe use a text editor to go ahead and\ncodey code code and\n\n360\n00:20:33.820 --> 00:20:36.420\nthen say run that file in here.\n\n361\n00:20:36.420 --> 00:20:38.850\nI mean we don't do all\nof our coding in here.\n\n362\n00:20:38.850 --> 00:20:40.350\n&gt;&gt; We are not gonna do all of our coding,\n\n363\n00:20:40.350 --> 00:20:44.350\nthis is for quick test,\nplaying around, kind of exploration.\n\n364\n00:20:44.350 --> 00:20:47.412\nIf you're like I don't know what this does\nand you wanna to see just that little bit,\n\n365\n00:20:47.412 --> 00:20:51.180\nevaluate it and\nkind of work you use the REPL right?\n\n366\n00:20:51.180 --> 00:20:53.140\nWhen you're getting\nstarted you use the REPL,\n\n367\n00:20:53.140 --> 00:20:55.090\nI still use the REPL on a daily basis.\n\n368\n00:20:55.090 --> 00:20:58.060\nI'm like what now wait a minute\nthis is doing something weird.\n\n369\n00:20:58.060 --> 00:21:01.960\nSo I hope into REPL, I might even copy and\npaste from somewhere else and\n\n370\n00:21:01.960 --> 00:21:04.840\ngo okay that's there, and\nthen I start playing around with it.\n\n371\n00:21:04.840 --> 00:21:07.930\nSo it kinda allows me to take\nthese avenues where I go\n\n372\n00:21:07.930 --> 00:21:11.290\nwell that plus sign's been behaving oddly,\nlet me figure that out.\n\n373\n00:21:12.390 --> 00:21:15.900\nGrand scheme for larger projects,\nno, it's not gonna be here.\n\n374\n00:21:15.900 --> 00:21:18.780\nWe're actually gonna write that in a file,\nand there's some other things.\n\n375\n00:21:18.780 --> 00:21:22.940\nBut we'll probably do that\nin the next few episodes.\n\n376\n00:21:22.940 --> 00:21:26.440\nBut I wanted to show you the REPL, because\nI will periodically hop into the REPL.\n\n377\n00:21:26.440 --> 00:21:30.570\nTo see how things work and\nalso you should use the repple\n\n378\n00:21:30.570 --> 00:21:33.680\nespecially if you're having\ntrouble with respective pieces.\n\n379\n00:21:33.680 --> 00:21:36.410\nThe REPL is gonna give\nyou immediate feedback.\n\n380\n00:21:36.410 --> 00:21:39.690\nIt's gonna read, evaluate, print right?\n\n381\n00:21:39.690 --> 00:21:40.530\nHey what is this?\n\n382\n00:21:40.530 --> 00:21:42.870\nHold on, here's what it is.\n\n383\n00:21:42.870 --> 00:21:47.420\nAnd then you go, all right I'm doing\nsomething wrong, let me fix it.\n\n384\n00:21:47.420 --> 00:21:50.420\nOnce you fix it,\nthen you switch back to the other play.\n\n385\n00:21:50.420 --> 00:21:54.744\nSo, this is why I use the REPL, most\nother Python programmers use the REPL.\n\n386\n00:21:54.744 --> 00:21:56.512\nAnd well you're probably\ngoing to use the REPL.\n\n387\n00:21:56.512 --> 00:22:00.481\nAnd you should get very comfortable\nwith it as long as you know how to use\n\n388\n00:22:00.481 --> 00:22:03.660\nit properly and\nlet it help you instead of hindering it.\n\n389\n00:22:03.660 --> 00:22:06.290\nNow, Vonne,\nI think that's a good place to stop.\n\n390\n00:22:06.290 --> 00:22:10.240\nAnd before we get out of here,\nthere is one thing that I need to look up.\n\n391\n00:22:10.240 --> 00:22:14.030\nIf we could come back to the machine,\nsorry, sorry, sorry, sorry.\n\n392\n00:22:14.030 --> 00:22:17.580\nWait, sometimes I give you\nsome weird verbal cues,\n\n393\n00:22:17.580 --> 00:22:21.470\nand it seems like I'm already done.\n&gt;&gt; Is it that EOL thing that was bothering\n\n394\n00:22:21.470 --> 00:22:23.230\nyou right now, that you're going and\nchecking right now?\n\n395\n00:22:23.230 --> 00:22:27.680\nIt's just weighing on my brain,\nlet me see what this is gonna do, so\n\n396\n00:22:27.680 --> 00:22:30.810\nyou can double check yourself.\n&gt;&gt; And I also want to show you that\n\n397\n00:22:30.810 --> 00:22:35.090\nif you're like EOL don't make\nan assumption if you ever think that.\n\n398\n00:22:36.540 --> 00:22:38.914\n&gt;&gt; Are you being your own REPL right now?\n\n399\n00:22:38.914 --> 00:22:44.830\n[LAUGH]\n&gt;&gt; I am I am so here here we go.\n\n400\n00:22:44.830 --> 00:22:46.810\nThis is an EDU right?\n\n401\n00:22:47.850 --> 00:22:50.110\nPython debugging end of the line.\n\n402\n00:22:50.110 --> 00:22:52.299\nAll right there you have it,\n\n403\n00:22:52.299 --> 00:22:57.093\nit's a reputable source .edu.\n&gt;&gt; Are you just making sure of the actual\n\n404\n00:22:57.093 --> 00:23:01.044\nacronym, the abbreviation?\n&gt;&gt; Yeah, yeah cuz sometimes acronyms or\n\n405\n00:23:01.044 --> 00:23:05.651\nabbreviations may give you a little bit\nmore information depending on the context.\n\n406\n00:23:05.651 --> 00:23:09.970\nAnd I was like it's the end of line,\nwait a minute is it end of line?\n\n407\n00:23:09.970 --> 00:23:11.730\nThere's all these little acronyms and\nthings.\n\n408\n00:23:11.730 --> 00:23:16.090\nWhen in doubt, well check it out.\n&gt;&gt; Did you think it was something other?\n\n409\n00:23:16.090 --> 00:23:18.930\nI mean it was just one of those.\n\n410\n00:23:18.930 --> 00:23:23.170\nCuz we do this all the time\nas educators and instructors.\n\n411\n00:23:23.170 --> 00:23:28.440\nIt's like I'm 99.9% sure that I just\nsaid that right but I'm like I'm kind\n\n412\n00:23:28.440 --> 00:23:33.810\nof scared in case I'm not right [LAUGH].\n&gt;&gt; There's nothing wrong with verifying\n\n413\n00:23:33.810 --> 00:23:38.000\nbecause every once in a while I'll happen\nupon one where I'm like that means this.\n\n414\n00:23:38.000 --> 00:23:40.580\nThen I go wait a minute hold on.\n\n415\n00:23:40.580 --> 00:23:43.350\nAnd I'll look it up and\nit actually meant something else.\n\n416\n00:23:43.350 --> 00:23:46.930\nAnd it helped me solve or figure out\na problem that I was having because I was\n\n417\n00:23:46.930 --> 00:23:49.480\nlike that provides additional context.\n\n418\n00:23:49.480 --> 00:23:52.090\nSo when in doubt Look it up,\ncheck it out, right?\n\n419\n00:23:52.090 --> 00:23:52.980\nThere's nothing wrong with that.\n\n420\n00:23:52.980 --> 00:23:56.570\nYou're actually probably gonna do\na great deal with that and that's okay.\n\n421\n00:23:56.570 --> 00:23:58.660\nBut, Vonne, we've seen how to\nplay around with the REPL,\n\n422\n00:23:58.660 --> 00:24:01.060\nhow it can be used to help us out.\n\n423\n00:24:01.060 --> 00:24:03.720\nAnd, well, we technically wrote\na little bit of Python code.\n\n424\n00:24:03.720 --> 00:24:08.072\nWe got ahead of ourselves a little bit,\nbut we're gonna loop back around and\n\n425\n00:24:08.072 --> 00:24:10.185\nA probably in the REPL a little more.\n\n426\n00:24:10.185 --> 00:24:14.250\nBut also see other ways of doing\nthis while learning the language.\n\n427\n00:24:14.250 --> 00:24:18.171\nSo we're out of time, but you're\ndefinitely gonna wanna come on back.\n\n428\n00:24:18.171 --> 00:24:19.440\n&gt;&gt; Okay, well, thank you, Justin.\n\n429\n00:24:19.440 --> 00:24:22.370\nNow I know what the REPL is and\nwhat it can do for us.\n\n430\n00:24:22.370 --> 00:24:26.070\nBut we are going to repel\non out of this episode.\n\n431\n00:24:26.070 --> 00:24:28.410\nAnd we're gonna go ahead and\nsign off for DevPro.TV,\n\n432\n00:24:28.410 --> 00:24:30.840\nI've been your host Vonne Smith.\n&gt;&gt; And I'm Justin Dennison.\n\n433\n00:24:30.840 --> 00:24:32.272\n&gt;&gt; And we'll see you soon.\n\n434\n00:24:32.272 --> 00:24:37.968\n[MUSIC]\n\n",
          "vimeoId": "266338313"
        },
        {
          "description": "In this episode, Justin and Vonne take a look at developing a way to thing about variables. Justin provides a mental model of variables as well as some details about how data is stored as well as naming conventions and requirements when creating a variable name.",
          "length": "1730",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-4-1-variables_and_values-042318-PGM.00_43_17_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-4-1-variables_and_values-042318-PGM.00_43_17_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-4-1-variables_and_values-042318-PGM.00_43_17_06.Still001-sm.jpg",
          "title": "Variables and Values",
          "transcript": "WEBVTT\n\n1\n00:00:00.227 --> 00:00:10.227\n[MUSIC]\n\n2\n00:00:12.253 --> 00:00:16.600\nHello everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:16.600 --> 00:00:18.810\nI'm your host, Vonne Smith, and\n\n4\n00:00:18.810 --> 00:00:21.930\nwe're continuing through our\nProgramming Fundamentals series.\n\n5\n00:00:21.930 --> 00:00:25.710\nAnd in this episode we're gonna be\ntalking about variables and values.\n\n6\n00:00:25.710 --> 00:00:30.520\nAnd here to expound all of this knowledge\non to us is Mr. Justin Dennison.\n\n7\n00:00:30.520 --> 00:00:33.050\nHow are you today?\n&gt;&gt; I'm doing fanstic, Vonne.\n\n8\n00:00:33.050 --> 00:00:34.080\nHow are you?\n&gt;&gt; I'm doing good.\n\n9\n00:00:34.080 --> 00:00:35.450\nDid I use that properly?\n\n10\n00:00:35.450 --> 00:00:36.432\nExpound our knowledge?\n\n11\n00:00:36.432 --> 00:00:37.746\n[LAUGH]\n&gt;&gt; I'm not sure.\n\n12\n00:00:37.746 --> 00:00:40.170\nFor some reason my mind\nwent into Sponge cake.\n\n13\n00:00:41.540 --> 00:00:43.427\nExpound, I don't know.\n&gt;&gt; I know,\n\n14\n00:00:43.427 --> 00:00:46.540\nI realized when I said that I'm\nlike does that make any sense?\n\n15\n00:00:46.540 --> 00:00:50.540\nI'm not really sure, but, no.\n&gt;&gt; But that's totally okay, Vonne.\n\n16\n00:00:50.540 --> 00:00:53.820\nWe are not necessarily,\nwe are not perfection.\n\n17\n00:00:53.820 --> 00:00:56.440\nWe do not ascribe to be.\n\n18\n00:00:56.440 --> 00:00:57.570\nIt just happens, right?\n\n19\n00:00:57.570 --> 00:00:58.190\nWe say things?\n\n20\n00:00:58.190 --> 00:01:02.010\nSo I will tell you I\nsuspect that both Vonne and\n\n21\n00:01:02.010 --> 00:01:05.930\nI will look that up later and\nfigure it out, but it's all right.\n\n22\n00:01:05.930 --> 00:01:09.240\nNow, we are gonna be talking about\nvariables and values in this episode,\n\n23\n00:01:09.240 --> 00:01:14.130\nand it's really about a little bit\nof the syntactic dynamics, right?\n\n24\n00:01:14.130 --> 00:01:16.550\nHow I type these in,\nhow these kind of work out.\n\n25\n00:01:17.660 --> 00:01:22.170\nBut also building a mental model,\na very simplified mental model so\n\n26\n00:01:22.170 --> 00:01:25.730\nyou can think about, okay,\nwell, what does a variable mean\n\n27\n00:01:25.730 --> 00:01:30.190\nwhen I use it programmatically?\n&gt;&gt; And I had actually used this term, and\n\n28\n00:01:30.190 --> 00:01:32.680\nI was using it in the last episode.\n\n29\n00:01:32.680 --> 00:01:38.110\nAnd I was using it more in like\nthe algebraic term of like x equals 2 and\n\n30\n00:01:38.110 --> 00:01:39.770\ny equals 5, I think it was 3.\n\n31\n00:01:39.770 --> 00:01:43.390\nAnd we've kind of got in\nthis whole variable but\n\n32\n00:01:43.390 --> 00:01:46.570\nit can mean so many different things.\n\n33\n00:01:46.570 --> 00:01:49.440\nAnd now, we're talking about\nactually defining it within\n\n34\n00:01:49.440 --> 00:01:52.360\na programming language and what it is.\n\n35\n00:01:52.360 --> 00:01:55.640\nSo I'm allowed to use this term now?\n&gt;&gt; We're gonna allow it, and\n\n36\n00:01:55.640 --> 00:02:01.482\nto some extent, they're probably steeped\nin very similar common spaces right?\n\n37\n00:02:01.482 --> 00:02:06.820\nSo a variable in a programming language\nis very similar to a variable in math.\n\n38\n00:02:06.820 --> 00:02:11.615\nAnd we'll actually see how that plays\nout in a couple of other episodes.\n\n39\n00:02:11.615 --> 00:02:14.862\nBut this is one of those things where\nwe're gonna have to use them a little bit\n\n40\n00:02:14.862 --> 00:02:17.565\nto provide some context before\nwe ever build our mental model.\n\n41\n00:02:17.565 --> 00:02:20.695\nBecause I've found when I tell people\nwell, here's the mental model for\n\n42\n00:02:20.695 --> 00:02:25.127\na variable, people go what is a variable,\nwhy would I care about that, right?\n\n43\n00:02:25.127 --> 00:02:28.807\nin addition to,\nthere's some other information,\n\n44\n00:02:28.807 --> 00:02:32.567\nthere's other things other than numbers,\nother things other than numbers.\n\n45\n00:02:32.567 --> 00:02:37.357\nOther things rather than just numbers\nthat could be stored in a variable.\n\n46\n00:02:37.357 --> 00:02:41.597\nProgramming languages can provide\nvery complex interactions.\n\n47\n00:02:41.597 --> 00:02:43.637\nSo where are we going to start?\n\n48\n00:02:43.637 --> 00:02:47.150\nWell, we're gonna start by\nexploring in the REPL, right?\n\n49\n00:02:47.150 --> 00:02:51.520\nSo these first little bit is exploring in\nthe REPL trying to figure some things out.\n\n50\n00:02:51.520 --> 00:02:54.800\nAnd eventually,\nwe'll use the REPL less and less.\n\n51\n00:02:54.800 --> 00:02:56.980\nBut let's go ahead and\ntake a look at the computer screen here.\n\n52\n00:02:56.980 --> 00:02:59.590\nAnd, well, where do I find the REPL?\n\n53\n00:02:59.590 --> 00:03:04.430\nWell, I'm gonna open my terminal here,\nand I'm gonna make it full screen, and\n\n54\n00:03:04.430 --> 00:03:09.030\nI'm going to make this giant like so,\nokay?\n\n55\n00:03:09.030 --> 00:03:12.720\nNow, make sure that you're going into\nthe appropriate version of Python,\n\n56\n00:03:12.720 --> 00:03:16.660\ncuz some of this can be\na little bit different.\n\n57\n00:03:16.660 --> 00:03:21.870\nSo I'm gonna hop here, and\nnotice mine says Python 3.6.5.\n\n58\n00:03:21.870 --> 00:03:23.660\nAs yours should as well.\n\n59\n00:03:23.660 --> 00:03:27.370\nNow, if you've watching this later on and\nyou have a newer version, that's fine,\n\n60\n00:03:27.370 --> 00:03:29.090\nas long as we're not in Python 2.\n\n61\n00:03:29.090 --> 00:03:33.470\nAll right, so what are we gonna do here?\n\n62\n00:03:33.470 --> 00:03:35.930\nWell we're just gonna define a variable.\n\n63\n00:03:35.930 --> 00:03:40.150\nSo x equals 1, and that's it.\n\n64\n00:03:40.150 --> 00:03:43.510\nWe've technically created\na variable in the space.\n\n65\n00:03:44.920 --> 00:03:46.170\nWell, how do I know what that is?\n\n66\n00:03:46.170 --> 00:03:49.110\nWell, in the REPL, you just type it.\n\n67\n00:03:49.110 --> 00:03:53.440\nSo notice if I type x 1,\nright x, I get 1 back.\n\n68\n00:03:54.670 --> 00:03:55.560\nBut what if I type y?\n\n69\n00:03:55.560 --> 00:03:57.520\nIt says name error.\n\n70\n00:03:57.520 --> 00:04:00.340\nAnd we actually talked about\nthat in the last episode.\n\n71\n00:04:00.340 --> 00:04:03.010\nNameError, name y is not defined.\n\n72\n00:04:03.010 --> 00:04:06.610\nThat's because it's looking for\na variable, but\n\n73\n00:04:06.610 --> 00:04:08.930\nit doesn't have it yet, right?\n\n74\n00:04:08.930 --> 00:04:14.747\nSo okay, well, what if I say x equals 2?\n\n75\n00:04:14.747 --> 00:04:21.042\nWell, if I hit x, notice now,\nx responds with 2.\n\n76\n00:04:21.042 --> 00:04:26.982\nSo I still have the same variable, but\nit has a different associated value.\n\n77\n00:04:26.982 --> 00:04:31.290\nAll right, originally it was x equals 1,\nnow it was x equals 2.\n\n78\n00:04:31.290 --> 00:04:35.700\nNow, this is something that Python allows\nyou to do, this is not a necessarily\n\n79\n00:04:35.700 --> 00:04:38.330\nubiquitous behavior through\nall programming languages.\n\n80\n00:04:38.330 --> 00:04:42.340\nSo that's something to keep in mind.\n&gt;&gt; Because in the simplest terms,\n\n81\n00:04:42.340 --> 00:04:45.130\na variable is a container of information.\n\n82\n00:04:45.130 --> 00:04:49.290\nIt's like a egg carton or\na jug or something, and\n\n83\n00:04:49.290 --> 00:04:51.930\nif I put 1 in there,\nthat's what's in that container.\n\n84\n00:04:51.930 --> 00:04:55.330\nIf I take 1 out and put 2 in, now 2 is x.\n\n85\n00:04:55.330 --> 00:04:58.060\nI mean, that, to me,\nthat's always defined to me.\n\n86\n00:04:58.060 --> 00:05:01.410\nIt's a container of information.\n&gt;&gt; You're absolutely correct, Vonne.\n\n87\n00:05:01.410 --> 00:05:06.220\nWe can use that kind of metaphor,\nthat analogy to think about variables.\n\n88\n00:05:06.220 --> 00:05:07.950\nWe're going to explore that a little bit.\n\n89\n00:05:07.950 --> 00:05:10.920\nWell, potentially, later in this episode.\n\n90\n00:05:10.920 --> 00:05:15.190\nBut there are some edge cases that\nwe need to consider that'll crop up.\n\n91\n00:05:15.190 --> 00:05:18.600\nNow, I don't know if we'll necessarily\ndive too much into them now, but\n\n92\n00:05:18.600 --> 00:05:21.660\nwe'll definitely try to bring\nthose up as they come up.\n\n93\n00:05:21.660 --> 00:05:26.570\nNow, as it stands here, we have created\nthese variables, they have numbers, right?\n\n94\n00:05:26.570 --> 00:05:30.280\nThat actually means they\nbehave like numbers.\n\n95\n00:05:30.280 --> 00:05:34.680\nAll right, that's a weird nuance\nbehavior that we have to keep in mind.\n\n96\n00:05:34.680 --> 00:05:36.920\nIf a variable contains a number,\n\n97\n00:05:36.920 --> 00:05:41.940\ncontains I'm using that term loosely,\nthen it behaves like a number, right?\n\n98\n00:05:41.940 --> 00:05:45.260\nSo anything that a number I can do,\na numeric variable can do.\n\n99\n00:05:45.260 --> 00:05:48.560\nAnd you are like, well, wait a minute,\nhow would I ever know that, right?\n\n100\n00:05:48.560 --> 00:05:50.400\n&gt;&gt; I'm thinking like, okay,\n\n101\n00:05:50.400 --> 00:05:52.960\nwhy are we emphasizing this so much?\n\n102\n00:05:52.960 --> 00:05:57.790\nAnd that's where I'm like, okay, there\nmust be a little twist somewhere in there.\n\n103\n00:05:57.790 --> 00:06:00.970\nEdge case maybe or something?\n&gt;&gt; Well, it could be an edge case.\n\n104\n00:06:00.970 --> 00:06:06.720\nIt could also be you get unforeseen\nkind of patterns that crop up, okay?\n\n105\n00:06:06.720 --> 00:06:10.370\nSo if I have, let's say, some text,\n\n106\n00:06:10.370 --> 00:06:14.385\nI don't know it's a text, then I am like,\nI'm gonna treat it like a number.\n\n107\n00:06:14.385 --> 00:06:15.020\nCuz it's a variable.\n\n108\n00:06:15.020 --> 00:06:17.100\nAll you are gonna see\nis the variable name.\n\n109\n00:06:17.100 --> 00:06:19.370\nBehind the scenes, it could be text,\nit could be a number,\n\n110\n00:06:19.370 --> 00:06:21.433\nit could be a plethora of other things.\n&gt;&gt; So\n\n111\n00:06:21.433 --> 00:06:24.146\nit's more of like we see it's a number,\nit's a number.\n\n112\n00:06:24.146 --> 00:06:27.127\nIt's more of we're\ntelling the computer and\n\n113\n00:06:27.127 --> 00:06:30.822\nhow to treat it,\nthat's what's more important here.\n\n114\n00:06:30.822 --> 00:06:34.170\nThat's why we are emphasizing it so\nmuch is like it's a number.\n\n115\n00:06:34.170 --> 00:06:35.930\nA number is a number.\n\n116\n00:06:35.930 --> 00:06:36.760\nOkay.\n\n117\n00:06:36.760 --> 00:06:41.130\nBecause of how, is it because of\nhow you're writing it right now?\n\n118\n00:06:41.130 --> 00:06:44.670\nHow you're defining it?\n&gt;&gt; So yes.\n\n119\n00:06:44.670 --> 00:06:47.550\nBecause I'm assigning this\nvariable to a number,\n\n120\n00:06:47.550 --> 00:06:51.130\nthen that variable behaves as a number,\nall right?\n\n121\n00:06:51.130 --> 00:06:53.280\nSo let's sort of clarify that.\n\n122\n00:06:53.280 --> 00:06:56.840\nNow, there's something that I don't know\nif I mentioned in the previous episode.\n\n123\n00:06:56.840 --> 00:06:58.620\nHow to get out of the REPL.\n\n124\n00:06:58.620 --> 00:07:02.690\nWe're gonna do that just to kinda clear\nthings out and make sure everybody's good.\n\n125\n00:07:02.690 --> 00:07:03.975\nHow do I get out of this REPL?\n\n126\n00:07:03.975 --> 00:07:07.230\nCtrl+C is a keyboard interrupt, right?\n\n127\n00:07:07.230 --> 00:07:11.030\nSo Ctrl+C, we've seen that\nbefore in our terminals series.\n\n128\n00:07:11.030 --> 00:07:15.235\nWell, in the Python REPL,\nthat actually means something else.\n\n129\n00:07:15.235 --> 00:07:20.265\nCtrl+D actually kills the process,\nit actually stops the REPL and\n\n130\n00:07:20.265 --> 00:07:23.100\ngets you back to the normal terminal.\n\n131\n00:07:23.100 --> 00:07:26.344\nSo we're gonna clear, and\nwe're gonna go to Python 3, and\n\n132\n00:07:26.344 --> 00:07:28.220\ncome directly back in to the REPL.\n\n133\n00:07:28.220 --> 00:07:31.500\nNow, if I type x, guess what?\n\n134\n00:07:31.500 --> 00:07:34.662\nIt doesn't exist anymore because\nthe old one's, it's dead and gone and\n\n135\n00:07:34.662 --> 00:07:35.633\nI brought up a new one.\n\n136\n00:07:35.633 --> 00:07:36.829\nIt's a totally new thing.\n\n137\n00:07:36.829 --> 00:07:38.722\nSo I'm gonna say x equals 1.\n\n138\n00:07:38.722 --> 00:07:41.868\nAnd then y equals 2.\n\n139\n00:07:41.868 --> 00:07:45.490\nWell, if I do x plus y, right?\n\n140\n00:07:45.490 --> 00:07:47.651\nThat's really just 1 plus 2.\n\n141\n00:07:47.651 --> 00:07:49.370\nSo they behave like a number.\n\n142\n00:07:49.370 --> 00:07:55.012\nBut what if I have z and\nI have an a, okay?\n\n143\n00:07:55.012 --> 00:08:03.408\nWell x plus z Unsupported operand\ntypes for int and string.\n\n144\n00:08:03.408 --> 00:08:06.439\nThis is where these\nvariables have different\n\n145\n00:08:06.439 --> 00:08:11.300\nbehaviors because of the data that is\nstored behind the scenes for them,\n\n146\n00:08:11.300 --> 00:08:12.585\nall right?\n&gt;&gt; Okay,\n\n147\n00:08:12.585 --> 00:08:17.687\nI think what I was kind of asking before\nis like because of how you wrote it like\n\n148\n00:08:17.687 --> 00:08:22.660\nyou didn't put the quotes around it\nbecause the quote indicates string.\n\n149\n00:08:22.660 --> 00:08:26.370\nYou don't add text and a number together\nso it's like I don't understand.\n\n150\n00:08:26.370 --> 00:08:30.706\nThis does not compute.\n&gt;&gt; Yeah, you'll either get an actual error\n\n151\n00:08:30.706 --> 00:08:35.090\nlike this or you'll get like\nunanticipated like that's odd.\n\n152\n00:08:35.090 --> 00:08:38.080\nIt will just kind of do stuff and\nit gets weird.\n\n153\n00:08:38.080 --> 00:08:41.780\nSo the question is if I\nhave just these variables,\n\n154\n00:08:41.780 --> 00:08:46.980\nmaybe this s a program that I'm looking\nat for somebody else, or I've done so\n\n155\n00:08:46.980 --> 00:08:50.600\nmuch it's hard for\nme to know what's what, right?\n\n156\n00:08:51.900 --> 00:08:55.586\nWell, if I hold Ctrl and hit L,\nthat will actually clear the screen,\n\n157\n00:08:55.586 --> 00:08:58.010\nto keep you in the rubble, Ctrl + L.\n\n158\n00:08:58.010 --> 00:09:00.640\nThat actually is on MAC and Linux.\n\n159\n00:09:00.640 --> 00:09:03.580\nIt's kind of ubiquitous\nacross all the platforms.\n\n160\n00:09:03.580 --> 00:09:04.560\n&gt;&gt; Not command.\n\n161\n00:09:04.560 --> 00:09:06.570\nIt's not like we're doing control command.\n\n162\n00:09:06.570 --> 00:09:08.200\nIt's always control.\n&gt;&gt; It's always\n\n163\n00:09:08.200 --> 00:09:08.820\ncontrol.\n&gt;&gt; Okay.\n\n164\n00:09:08.820 --> 00:09:09.470\n&gt;&gt; Always control.\n\n165\n00:09:09.470 --> 00:09:10.490\nSo, that will clear the doubt.\n\n166\n00:09:10.490 --> 00:09:11.820\nThat will bring it back to the top.\n\n167\n00:09:11.820 --> 00:09:14.140\nThat way we're not always\nstaring at the bottom here.\n\n168\n00:09:14.140 --> 00:09:16.620\nSo, I still have x, y, and z.\n\n169\n00:09:16.620 --> 00:09:20.760\nAnd I'm actually going to make y 1.2.\n\n170\n00:09:20.760 --> 00:09:25.421\nAnd just to further emphasize on this so\n\n171\n00:09:25.421 --> 00:09:31.068\nwe'll say x + y 2.2, x + z, broke, okay,\n\n172\n00:09:31.068 --> 00:09:36.292\nwhat about, y + z, also broke but notice,\n\n173\n00:09:36.292 --> 00:09:42.980\nI get a little bit different\nlike what is this, okay?\n\n174\n00:09:42.980 --> 00:09:46.500\nWell, this is an integer, and\nthis is a floating point number.\n\n175\n00:09:46.500 --> 00:09:51.634\nAll I need to know is whole numbers,\ndecimal numbers for now.\n\n176\n00:09:51.634 --> 00:09:57.209\nNow how would I ever know what to do with\nthese, or what I could do with these?\n\n177\n00:09:58.330 --> 00:10:02.600\nWell, if you use the word type with\nparentheses and this is one of those\n\n178\n00:10:02.600 --> 00:10:06.450\nthings where you and I were talking before\nthe episode, programming is this odd\n\n179\n00:10:06.450 --> 00:10:09.810\nthings where I need to teach you\nsome things before you go further.\n\n180\n00:10:09.810 --> 00:10:13.110\nBut in order to teach those I've\ngotta reach out to the future and\n\n181\n00:10:13.110 --> 00:10:14.430\nbring some stuff back in.\n\n182\n00:10:14.430 --> 00:10:19.610\nSo you'll have to bear with me, there's\nobviously some things that we're just or\n\n183\n00:10:19.610 --> 00:10:23.590\nusing without understanding what's going\non, and that's to provide some context.\n\n184\n00:10:23.590 --> 00:10:28.720\nSo if I say type with a left\nhand parenthesis, and then x and\n\n185\n00:10:28.720 --> 00:10:34.120\nthen a right hand parenthesis, that\nwill actually give me the type of data.\n\n186\n00:10:34.120 --> 00:10:38.252\nThe type of information that is stored\nwithin the variable, all right?\n\n187\n00:10:38.252 --> 00:10:42.470\nSo type(y) is a float, and then\n\n188\n00:10:42.470 --> 00:10:48.810\na type(z) is what's known as a string, and\nyou can think of that as text, all right?\n\n189\n00:10:48.810 --> 00:10:52.890\nSo if you're ever in doubt about\nwhat information, what the type is,\n\n190\n00:10:52.890 --> 00:10:56.960\nwhat the data type is,\nyou can always use type to get and\n\n191\n00:10:56.960 --> 00:10:59.810\nreally what you're looking for\nis this string.\n\n192\n00:10:59.810 --> 00:11:02.410\nDisregard this class thing for now.\n\n193\n00:11:02.410 --> 00:11:05.020\nThere's a lot of\nsuspension of disbelief or\n\n194\n00:11:05.020 --> 00:11:07.480\nsuspension of questioning,\nat least up front.\n\n195\n00:11:07.480 --> 00:11:11.710\nSo this is an integer, this is a float,\nand this is a string, and we'll talk more\n\n196\n00:11:11.710 --> 00:11:15.370\nabout those, well, in the future.\n&gt;&gt; And type,\n\n197\n00:11:15.370 --> 00:11:20.180\nis that a function like what is\nwhen you're typing the word type,\n\n198\n00:11:20.180 --> 00:11:24.080\nwhat is that?\n&gt;&gt; Type is a function in Python so\n\n199\n00:11:24.080 --> 00:11:25.580\nit actually does a few different things.\n\n200\n00:11:25.580 --> 00:11:30.530\nIn this case, it is going to give\nus the type of the data behind\n\n201\n00:11:30.530 --> 00:11:32.400\nthe scenes that is assigned to a variable.\n&gt;&gt; Okay,\n\n202\n00:11:32.400 --> 00:11:34.380\ncuz I was just kind of\ngetting the terminology.\n\n203\n00:11:34.380 --> 00:11:36.890\nOkay, this is what we\nwould consider a function.\n\n204\n00:11:36.890 --> 00:11:41.830\nWe're talking about variables now,\nand this is the base glossary,\n\n205\n00:11:41.830 --> 00:11:44.960\nif you wanna say, of terms of a language.\n\n206\n00:11:44.960 --> 00:11:48.130\nSo we're using a function for\na variable, and\n\n207\n00:11:48.130 --> 00:11:51.890\nthat class is just,\nIthink of it as classification.\n\n208\n00:11:51.890 --> 00:11:56.111\nThis is the thing of the type of data.\n&gt;&gt; You can definitely say this\n\n209\n00:11:56.111 --> 00:11:58.721\nthing and-\n&gt;&gt; But a classification is not natural\n\n210\n00:11:58.721 --> 00:12:00.044\nterm and all.\n&gt;&gt; [LAUGH] Yeah.\n\n211\n00:12:00.044 --> 00:12:01.540\n&gt;&gt; See now we're going in circles like,\n\n212\n00:12:01.540 --> 00:12:02.817\nI don't know what words to say.\n\n213\n00:12:02.817 --> 00:12:04.120\n[LAUGH]\n&gt;&gt; It gets iffy.\n\n214\n00:12:04.120 --> 00:12:05.820\nSo class is just a thing.\n\n215\n00:12:05.820 --> 00:12:07.590\nIt's a very particular type of thing.\n\n216\n00:12:07.590 --> 00:12:10.360\nAn integer, a float, and a string,\nthose are probably the most common\n\n217\n00:12:10.360 --> 00:12:14.370\nthings that you're going to encounter,\nat least initially.\n\n218\n00:12:14.370 --> 00:12:18.774\nAnd then, well,\nvariables you're just saying equals to.\n\n219\n00:12:18.774 --> 00:12:23.499\nNow one thing I wanna say is that equals,\nso if I say equals and\n\n220\n00:12:23.499 --> 00:12:28.057\nI'm gonna kinda write something\na little bit different.\n\n221\n00:12:28.057 --> 00:12:32.939\nThat's a left hand square bracket, 2,\n3 and this is just to get you kinda\n\n222\n00:12:32.939 --> 00:12:37.990\npatterns of things that you are\nuncomfortable with or, it's totally okay.\n\n223\n00:12:39.050 --> 00:12:42.320\nThis means assign, right?\n\n224\n00:12:42.320 --> 00:12:48.610\nSo take the right hand and\nput in in that container, right?\n\n225\n00:12:48.610 --> 00:12:50.310\nSo boom, it works.\n\n226\n00:12:50.310 --> 00:12:52.630\nIf I say a, hey that works!\n\n227\n00:12:52.630 --> 00:12:58.220\nNow if I say type(a), that actually\ngives me this other thing called a list.\n\n228\n00:12:58.220 --> 00:13:01.720\nNow it's gonna be a while before we use\nlist cuz there's a whole lot of other\n\n229\n00:13:01.720 --> 00:13:03.570\nstuff that needs to happen.\n\n230\n00:13:03.570 --> 00:13:09.260\nBut type will always give us kind\nof at least a starting point.\n\n231\n00:13:09.260 --> 00:13:14.490\nBut I did wanna show you\nthat this means assign.\n\n232\n00:13:14.490 --> 00:13:18.850\nIt is not what we're normally used\nto of saying, this is equal to this.\n\n233\n00:13:18.850 --> 00:13:20.960\nNo, you put it in there.\n&gt;&gt; And\n\n234\n00:13:20.960 --> 00:13:22.820\nI don't know if I'm allowed\nto say this either.\n\n235\n00:13:22.820 --> 00:13:24.410\nIs that also an array?\n\n236\n00:13:24.410 --> 00:13:27.117\nOr again, I'm not trying to go\n&gt;&gt; [LAUGH]\n\n237\n00:13:27.117 --> 00:13:28.038\n&gt;&gt; It's almost like,\n\n238\n00:13:28.038 --> 00:13:30.920\nI know we talked about this before\nwe started filming this too.\n\n239\n00:13:30.920 --> 00:13:34.440\nI have to tell you all this other\ninformation that you really don't know\n\n240\n00:13:34.440 --> 00:13:36.070\nabout yet.\n\n241\n00:13:36.070 --> 00:13:40.380\nAnd it's like I have to read Chapter One\nlike five times because I'm like\n\n242\n00:13:40.380 --> 00:13:41.440\nI don't understand this.\n\n243\n00:13:41.440 --> 00:13:43.270\nBut the more you hear it,\n\n244\n00:13:43.270 --> 00:13:47.000\nthe more you hear the terminology then\nlater you're like that's what that is.\n\n245\n00:13:47.000 --> 00:13:48.900\nIt kind of all comes into play so\n\n246\n00:13:48.900 --> 00:13:53.150\nwhile you don't need to know what it\nactually means that the terminology.\n\n247\n00:13:53.150 --> 00:13:56.300\nAm I using the terminology right\nnow is that would be considered\n\n248\n00:13:56.300 --> 00:13:59.500\nan array?\n&gt;&gt; So interesting thing in Python in\n\n249\n00:13:59.500 --> 00:14:03.880\nparticular, the list in Python behaves\nlike an array in some other languages.\n\n250\n00:14:05.170 --> 00:14:09.070\nHowever, Python has\na different array type, and\n\n251\n00:14:09.070 --> 00:14:12.070\nactually behaves the pythonic way.\n\n252\n00:14:12.070 --> 00:14:16.110\nSo, for all intents and\npurposes they are array-like, but\n\n253\n00:14:16.110 --> 00:14:20.440\nthere may be some nuanced differences,\nbecause this is called a list.\n\n254\n00:14:20.440 --> 00:14:23.490\nPython also has an array that\ndoesn't behave the same way.\n\n255\n00:14:23.490 --> 00:14:25.290\n&gt;&gt; Okay, so in Python,\n\n256\n00:14:25.290 --> 00:14:28.220\nthey are considered separate.\n\n257\n00:14:28.220 --> 00:14:32.050\nYou should treat them as separate and\nnot cloud,\n\n258\n00:14:32.050 --> 00:14:36.340\nmy other language knowledge\nkind of coming into Python.\n\n259\n00:14:36.340 --> 00:14:38.420\nIt's kind of like that, but\n\n260\n00:14:38.420 --> 00:14:41.340\nno there's two different things.\n&gt;&gt; And what's interesting is I do the same\n\n261\n00:14:41.340 --> 00:14:44.980\nthing, and most people will eventually\nif they have different experiences.\n\n262\n00:14:44.980 --> 00:14:49.410\nYou're like that's an array and\nit's perfectly okay to say that but\n\n263\n00:14:49.410 --> 00:14:54.220\nin python actually there is two separate\nentities, one is an array, one is a list,\n\n264\n00:14:54.220 --> 00:14:57.870\nand they behave a little bit differently.\n&gt;&gt; Okay, I just want to get that out there\n\n265\n00:14:57.870 --> 00:15:02.670\nbecause I'm like, I don't know if I should\nsay this yet, but it's just trying to,\n\n266\n00:15:02.670 --> 00:15:07.560\nagain since I have a little bit\nof knowledge from somewhere else.\n\n267\n00:15:07.560 --> 00:15:10.070\nI didn't know if it\napplies in the same way.\n\n268\n00:15:10.070 --> 00:15:11.046\n&gt;&gt; Yeah and that's,\n\n269\n00:15:11.046 --> 00:15:14.645\nthat's gonna be the running thing for\nthe course, [LAUGH] dear Vonne,\n\n270\n00:15:14.645 --> 00:15:15.870\nit definitely have us.\n\n271\n00:15:15.870 --> 00:15:18.900\nNow we can hop over to the iPad actually.\n\n272\n00:15:18.900 --> 00:15:22.240\nLet's just kind of build our\nmental model here a little bit and\n\n273\n00:15:22.240 --> 00:15:24.920\nthere's a few things that I\nwant to really emphasize.\n\n274\n00:15:24.920 --> 00:15:27.269\nI use single letter variable names.\n\n275\n00:15:28.520 --> 00:15:32.800\nYou don't necessarily always use\nsingle letter variable names.\n\n276\n00:15:32.800 --> 00:15:36.980\nYou should have a legitimate\nvariable names.\n\n277\n00:15:36.980 --> 00:15:40.489\nBut before we do that,\nbefore we talk about that last little,\n\n278\n00:15:40.489 --> 00:15:44.739\nit's actually a convention, anmd it\nhelps other people read your code and\n\n279\n00:15:44.739 --> 00:15:46.845\nkind of keep everything uniformed.\n\n280\n00:15:46.845 --> 00:15:54.406\nSo let's say that I have this\ntyped down in the all right?\n\n281\n00:15:54.406 --> 00:15:56.913\nSo food is.\n\n282\n00:15:56.913 --> 00:15:58.614\n47, okay?\n\n283\n00:15:58.614 --> 00:16:05.250\nSo I write this and this is under REPL,\nand I hit Enter, all right?\n\n284\n00:16:05.250 --> 00:16:06.760\nNow what is actually happening?\n\n285\n00:16:07.800 --> 00:16:12.320\nWell, during the evaluate for the REPL,\nthe evaluate portion, it goes, all right,\n\n286\n00:16:12.320 --> 00:16:16.130\nis this whole thing\na legitimate Python thing?\n\n287\n00:16:17.240 --> 00:16:23.730\nAll right, if it is, then it goes,\nokay, well, I see these parts.\n\n288\n00:16:23.730 --> 00:16:27.420\nAnd I'm intentionally simplifying\nthis to build a mental model.\n\n289\n00:16:27.420 --> 00:16:33.231\nIf it sees these parts,\nright, in particular,\n\n290\n00:16:33.231 --> 00:16:37.764\nif it sees this, then it goes, okay,\n\n291\n00:16:37.764 --> 00:16:44.315\nthe left-hand side is the variable name,\nall right?\n\n292\n00:16:44.315 --> 00:16:49.902\nThis means assigns to and\n\n293\n00:16:49.902 --> 00:16:55.222\nthen this is the value,\n\n294\n00:16:55.222 --> 00:16:57.890\nall right?\n\n295\n00:16:58.930 --> 00:17:04.360\nNow what happens is,\nIf this doesn't exist,\n\n296\n00:17:10.042 --> 00:17:11.614\nThen create it.\n\n297\n00:17:14.176 --> 00:17:17.560\nIf it does exist,\nwe'll change it, all right?\n\n298\n00:17:17.560 --> 00:17:24.581\nSo if exists, Then change.\n\n299\n00:17:27.768 --> 00:17:34.110\nAll right, this is always assigns to,\nassigns to.\n\n300\n00:17:34.110 --> 00:17:38.430\nAnd then the right-hand side is always\ngonna be some value, all right?\n\n301\n00:17:38.430 --> 00:17:42.310\nNow I have to be really\ncareful here because value\n\n302\n00:17:42.310 --> 00:17:45.200\ninsinuates there's always\none thing that goes there.\n\n303\n00:17:45.200 --> 00:17:48.900\nWell, we actually just saw in the REPL\nthat it can actually be a little more\n\n304\n00:17:48.900 --> 00:17:49.880\ncomplicated than that.\n\n305\n00:17:49.880 --> 00:17:56.066\nSo we'll say value is an approximation.\n\n306\n00:17:56.066 --> 00:17:59.400\nIt gets a little more complicated than\nthat, but for now it's valueless.\n\n307\n00:17:59.400 --> 00:18:01.860\nSo what does that mean happens?\n\n308\n00:18:01.860 --> 00:18:03.240\nSo it reads that, right?\n\n309\n00:18:03.240 --> 00:18:06.310\nIf we come back over here and\nwe look at the same thing.\n\n310\n00:18:06.310 --> 00:18:12.228\nFood, we're on the REPL, equals 47.\n\n311\n00:18:12.228 --> 00:18:15.390\nThen when we hit Enter,\nit goes all right, food.\n\n312\n00:18:15.390 --> 00:18:21.530\nWell, there's nowhere on this page where\nI see food, or disregard this up here.\n\n313\n00:18:22.670 --> 00:18:27.640\nFood exists, so what it does is it\ncreates this little container, okay?\n\n314\n00:18:28.680 --> 00:18:32.750\nIt's kind of like you're at a gathering\nand you need to go get a drink.\n\n315\n00:18:32.750 --> 00:18:40.212\nIt grabs a cup, a cup, and it goes aah,\nwe're gonna label this food.\n\n316\n00:18:40.212 --> 00:18:42.670\nPut the little name on the outside of it,\nall right?\n\n317\n00:18:44.310 --> 00:18:49.606\nThen it looks at this, and it goes okay,\nI need to put something in that.\n\n318\n00:18:49.606 --> 00:18:53.040\nAnd it grabs this value and\nit puts it in the cup.\n\n319\n00:18:53.040 --> 00:18:57.111\nSo really, what I have is this little cup.\n\n320\n00:19:00.489 --> 00:19:01.860\nWith the label food.\n\n321\n00:19:04.380 --> 00:19:10.870\nWell, with the value 47 in the cup,\nall right?\n\n322\n00:19:10.870 --> 00:19:14.970\nThat's kind of hard to draw three\ndimensions, but 47th inside the cup.\n\n323\n00:19:14.970 --> 00:19:21.990\nSo if I take the cup, and I turn it upside\ndown, right, then 47 pops back out.\n\n324\n00:19:23.650 --> 00:19:26.020\nNow, what if later on we do this?\n\n325\n00:19:26.020 --> 00:19:30.785\nWe go, we're on the REPL,\n\n326\n00:19:30.785 --> 00:19:34.674\nand we say, food = 23.\n\n327\n00:19:34.674 --> 00:19:38.690\nWell, this cup already exists now.\n\n328\n00:19:38.690 --> 00:19:41.566\nWe're assuming we're staying\nin the same REPL session.\n\n329\n00:19:41.566 --> 00:19:45.102\nHe goes okay, well,\nI'm gonna grab that cup and\n\n330\n00:19:45.102 --> 00:19:51.800\npress food is there.\n\n331\n00:19:51.800 --> 00:19:56.558\nAnd 47 is already there but\nwhat it does is it turns the cup over,\n\n332\n00:19:56.558 --> 00:20:03.220\nright, like so, and 47 falls out.\n\n333\n00:20:04.800 --> 00:20:06.060\nAnd I can't write food upside down.\n\n334\n00:20:07.910 --> 00:20:11.270\nAnd then we come here and\nwe go okay, it's the same cup.\n\n335\n00:20:12.480 --> 00:20:15.700\nIt's got food, but what does this mean?\n\n336\n00:20:15.700 --> 00:20:20.890\nThis means take 23, and put it in the cup.\n\n337\n00:20:22.120 --> 00:20:23.460\nSo now 23's in the cup.\n\n338\n00:20:23.460 --> 00:20:25.510\nSo we're kind of getting this reuse.\n\n339\n00:20:25.510 --> 00:20:27.530\nNow, why do we need this cup?\n\n340\n00:20:27.530 --> 00:20:30.960\nCuz even though this is a number,\nyou're like, it's 23, it's 23, it's 23,\n\n341\n00:20:30.960 --> 00:20:32.310\nthat's fine.\n\n342\n00:20:32.310 --> 00:20:38.290\nBut what if it was a list of\nyour entire family tree, right?\n\n343\n00:20:38.290 --> 00:20:43.910\nYou go, well, I would rather just have a\ncup that I can go, there they are, right?\n\n344\n00:20:43.910 --> 00:20:47.330\nSo you can think of it as what if I\nhad a whole bunch of marbles, and\n\n345\n00:20:47.330 --> 00:20:49.230\nI wanna hold them in my hand.\n\n346\n00:20:49.230 --> 00:20:51.530\nI go, well, there's that one marble,\nthere's that other marble.\n\n347\n00:20:51.530 --> 00:20:54.660\nOr do you wanna cup that contains\nall the marbles together?\n\n348\n00:20:54.660 --> 00:20:56.380\nAnd you go there's all the marbles.\n\n349\n00:20:56.380 --> 00:21:00.060\nAnd I can rifle through the cup,\nand look for individual marbles.\n\n350\n00:21:00.060 --> 00:21:02.240\nSo it can get a little more complicated.\n\n351\n00:21:02.240 --> 00:21:06.520\nBut by and large, anytime you're thinking\nabout creating a variable, right,\n\n352\n00:21:06.520 --> 00:21:11.490\nthrough assignment, through this operator,\nand effectively you're creating this\n\n353\n00:21:11.490 --> 00:21:15.635\ncontainer, as Vonne said,\nthat can also dump out, right?\n\n354\n00:21:15.635 --> 00:21:21.050\nOoh, that root beer's bad, and\nyou get a different drink, right?\n\n355\n00:21:21.050 --> 00:21:22.523\nIt could be milk,\norange juice, I don't know.\n\n356\n00:21:22.523 --> 00:21:25.470\nAll of those in the same\ncup might be weird.\n\n357\n00:21:25.470 --> 00:21:27.180\nBut the computer doesn't care.\n\n358\n00:21:27.180 --> 00:21:35.560\nNow, there's one thing about about\nlabeling these cups that is very specific.\n\n359\n00:21:35.560 --> 00:21:37.000\nRegardless of whether you're in Python or\n\n360\n00:21:37.000 --> 00:21:40.100\nany other language,\nyou should follow a set of rules.\n\n361\n00:21:40.100 --> 00:21:42.330\nIf it's a single word for\n\n362\n00:21:42.330 --> 00:21:47.600\na variable name, then you just write that\nword in lowercase letters, all right?\n\n363\n00:21:47.600 --> 00:21:53.710\nHowever, there are some exceptions.\n\n364\n00:21:55.863 --> 00:22:01.267\nCan't start with, There's a start there.\n\n365\n00:22:03.229 --> 00:22:10.110\nCan't start with like exclamation point,\nperiod.\n\n366\n00:22:10.110 --> 00:22:12.370\nIt's not gonna have a quote in it.\n\n367\n00:22:12.370 --> 00:22:17.360\nLike these kind of special characters, for\nthe most part, stay away away from those.\n\n368\n00:22:17.360 --> 00:22:22.800\nThe one that I do use and\nis allowed is underscore, all right?\n\n369\n00:22:22.800 --> 00:22:24.580\nAnd you'll see why.\n\n370\n00:22:24.580 --> 00:22:27.080\nNow, can't start with those.\n\n371\n00:22:27.080 --> 00:22:31.560\nFor the most part it can't\ncontain these at all.\n\n372\n00:22:31.560 --> 00:22:36.694\nIt can't start with or contain,\n\n373\n00:22:38.748 --> 00:22:43.510\nThe period sometimes hops in there.\n&gt;&gt; Because these are all\n\n374\n00:22:43.510 --> 00:22:48.010\ncharacters that mean something,\nlike a slash is like a directory and\n\n375\n00:22:48.010 --> 00:22:49.690\nthe dot is just like a file extension.\n\n376\n00:22:49.690 --> 00:22:50.950\nI'm just thinking in general terms.\n\n377\n00:22:50.950 --> 00:22:54.240\nSo you don't want to ever, that's\nwhat we talked about like file names,\n\n378\n00:22:54.240 --> 00:22:55.470\nany of these things.\n\n379\n00:22:55.470 --> 00:22:57.657\nWorksheet names can't\neven do that in Excel.\n\n380\n00:22:57.657 --> 00:23:02.130\nIt's just kind of an overall\ngenerality of computers really.\n\n381\n00:23:02.130 --> 00:23:02.750\n&gt;&gt; Yeah, and\n\n382\n00:23:02.750 --> 00:23:06.883\nthey all have their kind of requirements\nand Python says, you know what?\n\n383\n00:23:06.883 --> 00:23:11.655\nNo exclamation points, no slashes in\nthe variable names, no dashes actually,\n\n384\n00:23:11.655 --> 00:23:12.860\nno hyphens rather.\n\n385\n00:23:12.860 --> 00:23:14.600\nYou can't use those.\n\n386\n00:23:14.600 --> 00:23:17.860\nThe dot sometimes hops in there,\nthe period.\n\n387\n00:23:17.860 --> 00:23:20.230\nIt's not gonna be specific\nto the variable name but\n\n388\n00:23:20.230 --> 00:23:23.490\nyou may see it with a variable name and\nsome other stuff later on.\n\n389\n00:23:23.490 --> 00:23:25.736\nSo that's why I'm like\n[SOUND] it gets there.\n\n390\n00:23:25.736 --> 00:23:31.100\nBut in the actual variable name, I can't\nuse those to label my cup, all right?\n\n391\n00:23:31.100 --> 00:23:35.938\nI can use an underscore, and\n\n392\n00:23:35.938 --> 00:23:43.359\nI can use numbers, But\nnot at the beginning.\n\n393\n00:23:47.569 --> 00:23:50.484\nNow the reason I can't use numbers\nat the beginning is, well,\n\n394\n00:23:50.484 --> 00:23:53.670\nit goes that's a number,\nlike the number seven.\n\n395\n00:23:53.670 --> 00:23:55.042\nHas to be later on, so it goes, okay.\n\n396\n00:23:55.042 --> 00:23:56.943\nAnd that's just how it reads.\n\n397\n00:23:56.943 --> 00:23:57.760\nYou can use numbers.\n\n398\n00:23:57.760 --> 00:23:59.526\nYou can use the underscore.\n\n399\n00:23:59.526 --> 00:24:01.271\nSo what are some examples?\n\n400\n00:24:03.528 --> 00:24:06.487\nSo let's go with the food example.\n\n401\n00:24:06.487 --> 00:24:08.078\nSo favorite food.\n\n402\n00:24:08.078 --> 00:24:14.450\nSo if I wanted to write favorite\nfood as a variable name, underscore,\n\n403\n00:24:14.450 --> 00:24:20.606\nso each additional word,\nthe space is replaced by an underscore and\n\n404\n00:24:20.606 --> 00:24:25.176\nyou keep everything lower case.\n&gt;&gt; I was just gonna ask that,\n\n405\n00:24:25.176 --> 00:24:29.717\nI assumed but just making sure you can't\nhave spaces within a variable name.\n\n406\n00:24:29.717 --> 00:24:34.651\nIt's just not allowed, so the underscore\nwould be one way that you can replace\n\n407\n00:24:34.651 --> 00:24:37.372\nit.\n&gt;&gt; So, yes Vonne you replace spaces with\n\n408\n00:24:37.372 --> 00:24:40.998\nunderscores, and\nthat should be good for those spaces.\n\n409\n00:24:40.998 --> 00:24:46.165\nBut something to keep in mind is\nnotice I have lowercase letters here,\n\n410\n00:24:46.165 --> 00:24:49.635\nright?\n&gt;&gt; You could do lowercase favorite,\n\n411\n00:24:49.635 --> 00:24:54.953\nuppercase food but\nit's not that it's like it's not allowed.\n\n412\n00:24:54.953 --> 00:24:58.830\nIt's just not accepted by the community.\n\n413\n00:24:58.830 --> 00:25:01.601\n[LAUGH]\n&gt;&gt; Yeah, you're absolutely correct.\n\n414\n00:25:01.601 --> 00:25:06.853\nIt is preferred in Python code that\nyou do when, this is, I think.\n\n415\n00:25:06.853 --> 00:25:09.377\nIf I'm not mistaken it's\ncalled snake casing.\n\n416\n00:25:09.377 --> 00:25:12.206\nSo, lower case letters with hyphens\nbetween them, or excuse me,\n\n417\n00:25:12.206 --> 00:25:14.890\nwith underscores between them,\nnot hyphens that'll break.\n\n418\n00:25:16.530 --> 00:25:20.392\nThere's another one called camel\ncasing which is exactly what you said.\n\n419\n00:25:20.392 --> 00:25:23.357\nYou will see some code written like\nthat especially in other languages,\n\n420\n00:25:23.357 --> 00:25:25.800\nit would technically work,\nit's just not conventional.\n\n421\n00:25:25.800 --> 00:25:28.510\nSo if you hand it off to other\npeople in the community,\n\n422\n00:25:28.510 --> 00:25:32.740\nif I was looking at your code I would say,\nyou should probably follow conventions.\n\n423\n00:25:32.740 --> 00:25:37.380\nIf you don't follow conventions, then it\nmakes it harder for people to help you,\n\n424\n00:25:37.380 --> 00:25:39.341\nwhen they're trying to help you.\n\n425\n00:25:39.341 --> 00:25:40.213\nSo, do that.\n\n426\n00:25:40.213 --> 00:25:43.580\nNow, something to keep it mind.\n\n427\n00:25:43.580 --> 00:25:44.660\nI said you can't use numbers.\n\n428\n00:25:44.660 --> 00:25:46.450\nSo this is my second favorite food.\n\n429\n00:25:46.450 --> 00:25:50.470\nI can say, favorite_food2, perfectly okay.\n\n430\n00:25:50.470 --> 00:25:55.710\nIf I'm trying to do my\nsecond favorite food, right?\n\n431\n00:25:55.710 --> 00:25:58.730\nYou wanted to, you can't do that\ncuz that starts with a number and\n\n432\n00:25:58.730 --> 00:26:00.870\nhave a number at the beginning of it.\n\n433\n00:26:00.870 --> 00:26:05.215\nSo you get to add on, you could add on\nanother underscore here and a, b, c.\n\n434\n00:26:05.215 --> 00:26:09.310\nYou could go on and on and\non and on forever, right?\n\n435\n00:26:09.310 --> 00:26:12.460\nYou have some disallowed characters\nthat they can't contain at all.\n\n436\n00:26:12.460 --> 00:26:15.317\nYou can use the underscore,\nyou can use numbers but\n\n437\n00:26:15.317 --> 00:26:17.989\nyou can't start a variable\nname with a number.\n\n438\n00:26:17.989 --> 00:26:21.880\nYour variables should be descriptive,\nall right?\n\n439\n00:26:21.880 --> 00:26:26.790\nNotice that favorite food, well\ndisregard the two and the other stuff,\n\n440\n00:26:26.790 --> 00:26:30.275\nbut favorite food, and you're like, I bet\nthat variable connects the favorite food.\n\n441\n00:26:30.275 --> 00:26:32.021\nYou should use that to your advantage.\n\n442\n00:26:32.021 --> 00:26:35.300\nIf you said ff, I'll be like.\n\n443\n00:26:36.350 --> 00:26:38.403\nI don't know what that really means.\n\n444\n00:26:38.403 --> 00:26:40.820\nFrench fries,\nmaybe that is your favorite food.\n\n445\n00:26:40.820 --> 00:26:42.941\nMaybe it means fast foray.\n\n446\n00:26:42.941 --> 00:26:44.800\nIt could mean a whole bunch of stuff.\n\n447\n00:26:44.800 --> 00:26:47.421\nSo use descriptive names.\n\n448\n00:26:47.421 --> 00:26:49.440\nDon't go crazy, right?\n\n449\n00:26:49.440 --> 00:26:55.244\nDon't write sentences upon sentences but\na few kind of spaced out.\n\n450\n00:26:55.244 --> 00:26:59.277\nUnderscore lowercase words that\ndescribe what the variable\n\n451\n00:26:59.277 --> 00:27:02.379\nactually contains.\n&gt;&gt; Well like you said you wanna try to\n\n452\n00:27:02.379 --> 00:27:06.462\nmake it as easy as possible for yourself,\nand for other people to understand it.\n\n453\n00:27:06.462 --> 00:27:11.155\nCuz basically it's almost like you're\nwriting sentences within your code.\n\n454\n00:27:11.155 --> 00:27:14.535\nAnd so if you're using verbs and\nnouns for lack of a better term,\n\n455\n00:27:14.535 --> 00:27:17.554\nit's gonna make more sense\nonce you write it out in code.\n\n456\n00:27:17.554 --> 00:27:21.525\nOtherwise just like the Fafo and\nall that kind of things.\n\n457\n00:27:21.525 --> 00:27:24.330\nThat's not gonna make any sense.\n&gt;&gt; Yeah, definitely don't do.\n\n458\n00:27:24.330 --> 00:27:27.576\nIt seems like an easy way to\nget past things right now.\n\n459\n00:27:27.576 --> 00:27:31.035\nCome a month later and you go xffd.\n\n460\n00:27:31.035 --> 00:27:32.874\nI don't know what any of these mean.\n\n461\n00:27:32.874 --> 00:27:36.980\nThere are times where you can use single\nvariables, single letter variables.\n\n462\n00:27:36.980 --> 00:27:40.213\nBut if you're trying to write a readable,\nacceptable program,\n\n463\n00:27:40.213 --> 00:27:43.818\nyour variable names work like this,\nyou're always gonna assign them.\n\n464\n00:27:43.818 --> 00:27:48.750\nAnd as I said, there are some edge cases\nthat could crop up as we continue to\n\n465\n00:27:48.750 --> 00:27:52.981\nuse variables, but\nI will illustrate those when they come up.\n\n466\n00:27:52.981 --> 00:27:56.433\nBecause right now without context\nyou'll just go, that sounds bad and\n\n467\n00:27:56.433 --> 00:27:58.000\nthen totally forget about them.\n\n468\n00:27:58.000 --> 00:27:59.297\nSo we'll go with that.\n\n469\n00:27:59.297 --> 00:28:03.885\nBut Vonne, I think we have a pretty\ngood grasp on variables contain data,\n\n470\n00:28:03.885 --> 00:28:08.621\ndata has a type of data that's associated\nwith it, how to inspect that, and\n\n471\n00:28:08.621 --> 00:28:12.258\nas well as some conventions\nwhen we're using variables.\n\n472\n00:28:12.258 --> 00:28:16.841\nSo, we have a lot more coming at you but\nfor now I think I'm done.\n\n473\n00:28:16.841 --> 00:28:17.375\n&gt;&gt; All right,\n\n474\n00:28:17.375 --> 00:28:20.910\nwell I'm feeling variably comfortable\nwith this on these variables, yeah.\n\n475\n00:28:20.910 --> 00:28:21.518\nI know, I try.\n\n476\n00:28:21.518 --> 00:28:24.724\nBut actually, no that was a great\nexplanation about the foundations of\n\n477\n00:28:24.724 --> 00:28:28.584\nvariables, but like you said, edge-case\nscenarios, we'll come around to that.\n\n478\n00:28:28.584 --> 00:28:34.109\nBut at least now, I feel pretty confident\nin what this is, and gonna move forward.\n\n479\n00:28:34.109 --> 00:28:37.582\nBut for now, we're gonna go ahead and\nwrap this one up.\n\n480\n00:28:37.582 --> 00:28:40.074\nSinging off for DevProTV,\nI've been your host, Vonne Smith.\n\n481\n00:28:40.074 --> 00:28:40.859\n&gt;&gt; And I'm Justin Dennison.\n\n482\n00:28:40.859 --> 00:28:42.237\n&gt;&gt; And we'll see you soon.\n\n483\n00:28:42.237 --> 00:28:47.020\n[MUSIC]\n\n",
          "vimeoId": "266337849"
        },
        {
          "description": "In this episode, Justin and Vonne look at the difference between expressions and statements. Justin highlights some of the nuance details for considering if the Python code is a statement or an expression.",
          "length": "1160",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-5-1-expressions_and_statements-042318-PGM.00_19_11_26.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-5-1-expressions_and_statements-042318-PGM.00_19_11_26.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-1-5-1-expressions_and_statements-042318-PGM.00_19_11_26.Still001-sm.jpg",
          "title": "Expressions and Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.074 --> 00:00:17.153\nHello, everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.153 --> 00:00:18.569\nI'm your host, Vonne Smith,\n\n4\n00:00:18.569 --> 00:00:21.573\nand we are moving through our\nprogramming fundamentals series.\n\n5\n00:00:21.573 --> 00:00:25.589\nIn this episode, we're gonna be talking\nabout expressions and statements.\n\n6\n00:00:25.589 --> 00:00:29.929\nAnd here to express and state all of\nthis knowledge is Mr Justin Dennison,\n\n7\n00:00:29.929 --> 00:00:32.227\nhow are you?\n&gt;&gt; I'm doing fantastic, Vonne,\n\n8\n00:00:32.227 --> 00:00:35.540\nhow are you?\n&gt;&gt; I'm stating that I'm doing well, so.\n\n9\n00:00:35.540 --> 00:00:36.755\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n10\n00:00:36.755 --> 00:00:38.567\n&gt;&gt; I know the title of this episode,\n\n11\n00:00:38.567 --> 00:00:41.481\nand I, again,\nhaving a little previous knowledge,\n\n12\n00:00:41.481 --> 00:00:44.224\nI am curious as to how\nyou're going to explain it.\n\n13\n00:00:44.224 --> 00:00:45.992\nSo I'm not even gonna try.\n\n14\n00:00:45.992 --> 00:00:46.824\nI'm just gonna let you do it.\n\n15\n00:00:46.824 --> 00:00:48.688\n[LAUGH]\n&gt;&gt; [LAUGH] Well I will try my best.\n\n16\n00:00:48.688 --> 00:00:52.901\nAnd this is, again, one of those things\nwhere as you're leaning something new,\n\n17\n00:00:52.901 --> 00:00:56.274\nif you've never been here,\nI'm just gonna be up front with you.\n\n18\n00:00:56.274 --> 00:00:59.749\nThere are a few things at the beginning\nof this series that I'm gonna vastly\n\n19\n00:00:59.749 --> 00:01:00.531\noversimplify.\n\n20\n00:01:00.531 --> 00:01:03.222\nAnd it's meant to provide a mental model,\n\n21\n00:01:03.222 --> 00:01:06.749\na way of thinking about these\nprogramming constructs.\n\n22\n00:01:06.749 --> 00:01:09.468\nNot necessarily to be 100% correct.\n\n23\n00:01:09.468 --> 00:01:12.620\nYou refine how correct and\nhow technically correct.\n\n24\n00:01:12.620 --> 00:01:17.080\nBecause as technical individuals\nwe love to be technically correct.\n\n25\n00:01:17.080 --> 00:01:22.985\nBut sometimes we get in our own way by\nbogging ourselves down with minutia.\n\n26\n00:01:22.985 --> 00:01:24.113\nThat's not what I wanna do.\n\n27\n00:01:24.113 --> 00:01:28.382\nSo actually, Vonne,\nI have a confession to make.\n\n28\n00:01:28.382 --> 00:01:32.870\nWe've already used expressions and\nstatements in the last episode.\n\n29\n00:01:32.870 --> 00:01:34.731\nI know, I know.\n&gt;&gt; Okay, so\n\n30\n00:01:34.731 --> 00:01:40.127\nwe weren't defining them as such for\na reason.\n\n31\n00:01:40.127 --> 00:01:41.686\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n32\n00:01:41.686 --> 00:01:44.200\n&gt;&gt; It's almost like not abstract, but\n\n33\n00:01:44.200 --> 00:01:48.833\nit's really just, again,\nthose glossary of terms that you read.\n\n34\n00:01:48.833 --> 00:01:52.531\nLike what does it mean to be\ndoing a programming language?\n\n35\n00:01:52.531 --> 00:01:57.551\nHere's the glossary, variable means blah,\nand statement means blah.\n\n36\n00:01:57.551 --> 00:02:02.521\nSo that's kind of what we're doing, we're\ndefining a term to how we're actually\n\n37\n00:02:02.521 --> 00:02:04.853\ngoing to code all this stuff.\n&gt;&gt; Exactly,\n\n38\n00:02:04.853 --> 00:02:08.053\nand that's one of those things\nwhere I was kinda on the fence.\n\n39\n00:02:08.053 --> 00:02:11.137\nI was like, do I spend time to talk\nabout statements and expressions?\n\n40\n00:02:11.137 --> 00:02:12.720\nBut to some extent,\n\n41\n00:02:12.720 --> 00:02:17.949\nit does help with some small nuance\nbehaviors when you get to them.\n\n42\n00:02:17.949 --> 00:02:23.203\nFull disclosure, there are things in\nPython that as you kinda keep moving on,\n\n43\n00:02:23.203 --> 00:02:26.548\nthat the line between statement and\nexpression,\n\n44\n00:02:26.548 --> 00:02:29.751\nlike being able to categorize one or\nthe other.\n\n45\n00:02:29.751 --> 00:02:31.184\nIt gets a little iffy.\n\n46\n00:02:31.184 --> 00:02:36.107\nBecause depending on the context,\nit can actually switch between being\n\n47\n00:02:36.107 --> 00:02:40.883\nan expression, solely an expression,\nand/or a statement rather.\n\n48\n00:02:40.883 --> 00:02:45.575\nSo we're gonna keep those out of mind for\nnow and talk about,\n\n49\n00:02:45.575 --> 00:02:49.073\nwhat is an expression,\nwhat is a statement?\n\n50\n00:02:49.073 --> 00:02:50.248\nI'm gonna give you some definitions.\n\n51\n00:02:50.248 --> 00:02:53.280\nYou ready, Vonne?\n&gt;&gt; I am, I believe so.\n\n52\n00:02:53.280 --> 00:02:56.393\nI'm just sitting back and going, hm.\n\n53\n00:02:56.393 --> 00:03:00.836\nOkay, I feel like it's one of those things\nthat when you start learning something as\n\n54\n00:03:00.836 --> 00:03:01.838\nyou progress, and\n\n55\n00:03:01.838 --> 00:03:05.735\nmaybe you're years into it,\nit becomes almost such assumed knowledge.\n\n56\n00:03:05.735 --> 00:03:09.777\nAnd it just becomes part of\neverything you think about,\n\n57\n00:03:09.777 --> 00:03:13.647\nthat you lose the sight of\nwhat it actually is almost.\n\n58\n00:03:13.647 --> 00:03:14.959\nIt just it is.\n\n59\n00:03:14.959 --> 00:03:16.170\nThat's what it is.\n\n60\n00:03:16.170 --> 00:03:19.126\nBut when you're starting out,\nit's kind of hard and\n\n61\n00:03:19.126 --> 00:03:23.669\nyou almost get tripped up on it too much\nwhere you're like, don't over think it.\n\n62\n00:03:23.669 --> 00:03:25.676\nJust say, this is what it is and move on.\n\n63\n00:03:25.676 --> 00:03:28.265\nBecause it will get better as you go,\nI promise.\n\n64\n00:03:28.265 --> 00:03:31.057\nAnd it's really hard,\nas a beginner, to be like okay.\n\n65\n00:03:31.057 --> 00:03:33.888\n[LAUGH]\n&gt;&gt; You gotta suspend that, but\n\n66\n00:03:33.888 --> 00:03:35.809\nI wanna know why everything.\n\n67\n00:03:35.809 --> 00:03:37.809\nTrust me, you'll get there.\n\n68\n00:03:37.809 --> 00:03:39.714\nBut there's a few things you\njust have to go, all right,\n\n69\n00:03:39.714 --> 00:03:40.758\nI'll worry about that later.\n\n70\n00:03:40.758 --> 00:03:45.722\nNow, a statement,\nthis is a grand oversimplification.\n\n71\n00:03:45.722 --> 00:03:51.416\nThis is some portion of\nthe program that does something.\n\n72\n00:03:51.416 --> 00:03:54.888\nWhat does that mean,\nwhat do I mean by, does something?\n\n73\n00:03:54.888 --> 00:03:58.007\nWell, it either creates a variable, or\n\n74\n00:03:58.007 --> 00:04:02.240\nit reassigns a variable, or\nit prints out something.\n\n75\n00:04:02.240 --> 00:04:04.713\nOr it reads in something.\n\n76\n00:04:04.713 --> 00:04:08.620\nSo it's the actual kind of verb\nkind of things inside of our\n\n77\n00:04:08.620 --> 00:04:09.819\nprogramming.\n&gt;&gt; So\n\n78\n00:04:09.819 --> 00:04:13.546\nthe thing that you just wrote\nin the last episode of x = 2,\n\n79\n00:04:13.546 --> 00:04:16.604\nthat's a statement?\n&gt;&gt; That is a statement.\n\n80\n00:04:16.604 --> 00:04:18.025\nSo x = 2.\n\n81\n00:04:18.025 --> 00:04:24.051\nAnd then it gets a little iffy because\nwell, what is an expression then?\n\n82\n00:04:24.051 --> 00:04:28.905\nAn expression is a piece\nof code that evaluates\n\n83\n00:04:28.905 --> 00:04:32.517\nto a single thing, to some value.\n\n84\n00:04:32.517 --> 00:04:35.111\nNow you're like,\nI see Vonne kinda giving me the stink-eye.\n\n85\n00:04:35.111 --> 00:04:36.712\nShe's like,\nwho are you talking about, Justin?\n\n86\n00:04:36.712 --> 00:04:38.447\nYou're saying crazy things.\n\n87\n00:04:38.447 --> 00:04:43.689\nWell, if I write the number 1,\nthat evaluates in Python to the number 1.\n\n88\n00:04:43.689 --> 00:04:45.953\nIt doesn't evaluate to other things.\n\n89\n00:04:45.953 --> 00:04:49.748\nIf I write x+1 and x is 1,\n\n90\n00:04:49.748 --> 00:04:53.712\nwell x+1 evaluates to 2.\n\n91\n00:04:53.712 --> 00:04:55.375\nIt comes to a single value.\n\n92\n00:04:55.375 --> 00:04:59.421\nIt can be essentially replaced\nwith that respective value.\n\n93\n00:04:59.421 --> 00:05:02.131\n&gt;&gt; Okay, so I don't know if I'm jumping\n\n94\n00:05:02.131 --> 00:05:06.464\ntoo far ahead, x = 1 is a statement,\ny = 2 is a statement.\n\n95\n00:05:06.464 --> 00:05:10.097\nx + y is an expression?\n&gt;&gt; That is correct.\n\n96\n00:05:10.097 --> 00:05:14.809\nIf I said z = x + y,\nx + y is an expression.\n\n97\n00:05:14.809 --> 00:05:20.311\nZ = x + y is the statement\nthat contains an expression.\n\n98\n00:05:20.311 --> 00:05:22.592\nWe're gonna diagram it.\n&gt;&gt; I slightly lost that one.\n\n99\n00:05:22.592 --> 00:05:23.377\n&gt;&gt; [LAUGH]\n\n100\n00:05:23.377 --> 00:05:24.680\n&gt;&gt; I'm gonna do the, okay.\n\n101\n00:05:24.680 --> 00:05:25.410\n&gt;&gt; Okay.\n\n102\n00:05:25.410 --> 00:05:25.944\n&gt;&gt; [LAUGH]\n\n103\n00:05:25.944 --> 00:05:28.040\n&gt;&gt; But actually, that reminds me.\n\n104\n00:05:28.040 --> 00:05:31.623\nLet's actually explore the code a little\nbit, and then we're gonna hop over and\n\n105\n00:05:31.623 --> 00:05:32.634\njust kind of diagram.\n\n106\n00:05:32.634 --> 00:05:36.381\nThis is not necessarily a crazy in depth\nthat's gonna take a huge amount of time.\n\n107\n00:05:36.381 --> 00:05:39.980\nBut it is something that is\nimportant to think about.\n\n108\n00:05:39.980 --> 00:05:42.687\nAll right, so let's go ahead and\ntake a look at the computer screen here.\n\n109\n00:05:42.687 --> 00:05:44.792\nAnd I'm gonna hop inside the repl.\n\n110\n00:05:44.792 --> 00:05:49.773\nOkay, well let's actually x = 1,\n\n111\n00:05:49.773 --> 00:05:52.673\nthat is a statement.\n\n112\n00:05:52.673 --> 00:05:57.797\ny = 5, that is a statement.\n\n113\n00:05:57.797 --> 00:05:59.121\nAll together it's a statement.\n\n114\n00:05:59.121 --> 00:06:02.854\nI'm gonna blow your\nmind here just shortly.\n\n115\n00:06:02.854 --> 00:06:10.347\nz = 2 times x +\n\n116\n00:06:10.347 --> 00:06:16.114\n4 times y.\n\n117\n00:06:16.114 --> 00:06:17.066\nWell what is it?\n\n118\n00:06:17.066 --> 00:06:22.094\nThat entire thing is a statement.\n&gt;&gt; But there's an expression in\n\n119\n00:06:22.094 --> 00:06:26.454\nthere because you're evaluating 2 times x.\n&gt;&gt; Yep, and 4 times y, and\n\n120\n00:06:26.454 --> 00:06:31.251\nwhatever that result is, plus together.\n&gt;&gt; It's almost like,\n\n121\n00:06:31.251 --> 00:06:34.586\nI'm always thinking, like in an Excel,\nnested if statements.\n\n122\n00:06:34.586 --> 00:06:36.852\nIt's nested in here, so\nthat's an expression.\n\n123\n00:06:36.852 --> 00:06:38.308\nThis is another expression.\n\n124\n00:06:38.308 --> 00:06:39.518\nSo there's two expressions.\n\n125\n00:06:39.518 --> 00:06:42.304\nBut altogether it's a statement.\n\n126\n00:06:42.304 --> 00:06:47.699\nThe whole getting bogged down too much and\ntotally getting every single piece.\n\n127\n00:06:47.699 --> 00:06:52.026\nBut in the generality,\njust, okay, I got it.\n\n128\n00:06:52.026 --> 00:06:53.907\n&gt;&gt; Yeah, and you're exactly correct.\n\n129\n00:06:53.907 --> 00:06:59.219\nI have a lot of expressions\nin this z= portion.\n\n130\n00:06:59.219 --> 00:07:00.819\nSo this is a statement.\n\n131\n00:07:00.819 --> 00:07:04.753\nTechnically, this 1 is an expression,\nbecause when I type 1,\n\n132\n00:07:04.753 --> 00:07:07.478\nit evaluates to the number, 1, in Python.\n\n133\n00:07:07.478 --> 00:07:11.082\ny=5, well 5 is technically an expression.\n\n134\n00:07:11.082 --> 00:07:14.010\nBecause it evaluates to 5.\n\n135\n00:07:14.010 --> 00:07:17.617\nAnd then, well, 2 times x,\nwell it's 2 times 1.\n\n136\n00:07:17.617 --> 00:07:19.257\nSo this evaluates to 2.\n\n137\n00:07:19.257 --> 00:07:26.739\n4 times 5 evaluates to 20, 2 + 20 is 22.\n\n138\n00:07:26.739 --> 00:07:30.057\nThat all evaluates down to,\nwell, what is z?\n\n139\n00:07:30.057 --> 00:07:30.850\nIt is 22.\n\n140\n00:07:30.850 --> 00:07:34.557\nNotice how it reduces to a single value.\n\n141\n00:07:34.557 --> 00:07:36.587\nNow not all expressions are just numbers.\n\n142\n00:07:36.587 --> 00:07:38.098\nThere are other things that go on.\n\n143\n00:07:38.098 --> 00:07:41.745\nBut I think that's kind of the easiest\nway, the lowest hanging fruit of going\n\n144\n00:07:41.745 --> 00:07:44.034\n[SOUND] I see what you've got there.\n&gt;&gt; Yeah and\n\n145\n00:07:44.034 --> 00:07:48.519\nthis is where you could spin yourself\nin so many circles just trying to, but\n\n146\n00:07:48.519 --> 00:07:51.564\nthe one you just said, but\nthe one is an expression.\n\n147\n00:07:51.564 --> 00:07:53.988\nI'm like, yeah, it is.\n\n148\n00:07:53.988 --> 00:08:01.420\nAnd this is where it becomes this just is,\nand it is a statement or expression.\n\n149\n00:08:01.420 --> 00:08:05.603\nI see how you're saying how\nthey kinda blend the line of,\n\n150\n00:08:05.603 --> 00:08:09.978\nthey're the same thing but\nkinda not, but weirdly, yes.\n\n151\n00:08:09.978 --> 00:08:10.599\n[LAUGH]\n&gt;&gt; So\n\n152\n00:08:10.599 --> 00:08:15.795\na statement typically is\ncomposed of expressions.\n\n153\n00:08:15.795 --> 00:08:19.385\nI'm leaving out the left-hand\nside a little bit,\n\n154\n00:08:19.385 --> 00:08:21.735\ncuz it can get a little meta on us.\n\n155\n00:08:21.735 --> 00:08:25.943\nBut this entire statement is\ntechnically composed of expressions and\n\n156\n00:08:25.943 --> 00:08:27.446\nrespective operators.\n\n157\n00:08:27.446 --> 00:08:28.630\nWhat is the operator?\n\n158\n00:08:28.630 --> 00:08:32.579\nWell, for it to be a statement,\nthe equal sign, the assign to.\n\n159\n00:08:32.579 --> 00:08:39.065\nBut these other operators actually operate\nwithin the expression and reduce down.\n\n160\n00:08:39.065 --> 00:08:44.214\nYou can think of an expression at having\nthe property of being substitutable.\n\n161\n00:08:44.214 --> 00:08:46.126\nSubstitutable?\n\n162\n00:08:46.126 --> 00:08:47.662\nAble to be substituted.\n\n163\n00:08:47.662 --> 00:08:51.853\n[LAUGH] So I can pull the old switcheroo,\nand then nothing really changes.\n\n164\n00:08:51.853 --> 00:08:55.418\nNow I'm gonna go a little\nbit further here.\n\n165\n00:08:55.418 --> 00:08:57.228\nWhoa, easy there, Justin.\n\n166\n00:08:57.228 --> 00:09:00.303\nAnd I'm gonna say Vonne.\n\n167\n00:09:00.303 --> 00:09:05.220\na = 'vonne', b = 'justin'.\n\n168\n00:09:05.220 --> 00:09:12.170\nAnd then, well, c = hm,,\n\n169\n00:09:12.170 --> 00:09:18.555\na + ' ' + b, like that.\n\n170\n00:09:18.555 --> 00:09:23.417\nNow in the previous episode, we actually\nsaw all this fail, if it was quote.\n\n171\n00:09:23.417 --> 00:09:26.202\nText on a number, things went bad.\n\n172\n00:09:26.202 --> 00:09:29.620\nBut this actually illustrates where,\nif you're not aware of the data type,\n\n173\n00:09:29.620 --> 00:09:31.153\nthen you may get weird behaviors.\n\n174\n00:09:31.153 --> 00:09:34.582\nCuz I'm gonna hit Enter,\nand it doesn't break.\n\n175\n00:09:34.582 --> 00:09:36.015\nWait a minute, Justin.\n\n176\n00:09:36.015 --> 00:09:40.282\nWell this evaluates, this actual,\nthis is called a literal.\n\n177\n00:09:40.282 --> 00:09:44.888\nThis is literally the word Vonne as text.\n\n178\n00:09:44.888 --> 00:09:47.287\nThis is the literal Justin.\n\n179\n00:09:47.287 --> 00:09:52.789\nAnd then a + this is the space literal and\nthen b.\n\n180\n00:09:52.789 --> 00:09:58.602\nWell, this is an expression\nbetween strings, or text.\n\n181\n00:09:58.602 --> 00:10:01.213\nThat actually means something\nin the programming language.\n\n182\n00:10:01.213 --> 00:10:08.206\nIf I hit c, it's vonne justin.\n\n183\n00:10:08.206 --> 00:10:11.711\nAll it does is go, okay, well,\nyou just squish them together.\n\n184\n00:10:11.711 --> 00:10:13.127\n&gt;&gt; Can I use a defining term?\n\n185\n00:10:13.127 --> 00:10:13.991\n&gt;&gt; You can.\n\n186\n00:10:13.991 --> 00:10:14.728\n&gt;&gt; [LAUGH] That it's\n\n187\n00:10:14.728 --> 00:10:15.719\nconcatenating.\n&gt;&gt; It is\n\n188\n00:10:15.719 --> 00:10:16.895\nconcatenating.\n&gt;&gt; Okay.\n\n189\n00:10:16.895 --> 00:10:17.756\n[LAUGH]\n&gt;&gt; And so\n\n190\n00:10:17.756 --> 00:10:20.823\nwith strings, plus means concatenation.\n\n191\n00:10:20.823 --> 00:10:23.559\nNow we're gonna dive further\ninto the respective data types.\n\n192\n00:10:23.559 --> 00:10:28.319\nBut I wanted to show you that expressions\nare not necessarily limited to numbers.\n\n193\n00:10:28.319 --> 00:10:32.930\nThere are other things that have\ndefined operations on them,\n\n194\n00:10:32.930 --> 00:10:36.777\nthat also have expressions for them.\n&gt;&gt; And it's all text.\n\n195\n00:10:36.777 --> 00:10:38.211\nThat's why we didn't have any problems.\n\n196\n00:10:38.211 --> 00:10:41.631\nIf one was a number and\none was a text then it would get weird,\n\n197\n00:10:41.631 --> 00:10:43.287\nor have some weird outputs.\n\n198\n00:10:43.287 --> 00:10:47.169\nBut text is text, numbers and\nnumbers, we're doing okay.\n\n199\n00:10:47.169 --> 00:10:49.904\nSo all right, I'm on board so far.\n&gt;&gt; All right, so\n\n200\n00:10:49.904 --> 00:10:51.344\nwe've looked at a little bit of code.\n\n201\n00:10:51.344 --> 00:10:56.453\nBut I'm a big proponent of always drawing,\nkind of doodling, trying to\n\n202\n00:10:56.453 --> 00:11:01.836\nreally draw to build a model that I can\nuse flip around or at least draw again.\n\n203\n00:11:01.836 --> 00:11:07.717\nSo we're gonna actually hop over to the\niPad and kinda diagram a few things here.\n\n204\n00:11:07.717 --> 00:11:12.759\nAnd first off I just wanna show you\n\n205\n00:11:12.759 --> 00:11:17.982\nthis is one of those things where,\n\n206\n00:11:17.982 --> 00:11:24.298\nlet's go back to that z = 2.x + 4.y.\n\n207\n00:11:24.298 --> 00:11:27.636\nSo it doesn't matter\nwhat these things are.\n\n208\n00:11:27.636 --> 00:11:33.858\nWhat I wanted to show you\nis this is an expression.\n\n209\n00:11:33.858 --> 00:11:36.925\nThis is an expression.\n\n210\n00:11:36.925 --> 00:11:39.009\nBecause well why are those an expression?\n\n211\n00:11:39.009 --> 00:11:44.035\nBecause x and y have values and\ncan be substituted in.\n\n212\n00:11:44.035 --> 00:11:46.344\nAll right, now how would I know then?\n\n213\n00:11:46.344 --> 00:11:51.894\nWell, right above this we're gonna say,\nx=1 y=5.\n\n214\n00:11:51.894 --> 00:11:53.136\nJust like we had.\n\n215\n00:11:53.136 --> 00:11:58.077\nThis is an expression because\nI can do the following.\n\n216\n00:11:58.077 --> 00:12:00.981\nI can take this and go whoop.\n\n217\n00:12:00.981 --> 00:12:02.581\nWhat if I just put that in its place?\n\n218\n00:12:02.581 --> 00:12:05.138\nPulled the old switcheroo, so to speak.\n\n219\n00:12:05.138 --> 00:12:08.205\nWhat if I go whoop, just like that.\n\n220\n00:12:08.205 --> 00:12:10.679\nGotta make that noise, it's important.\n\n221\n00:12:10.679 --> 00:12:13.929\nAnd then I could say okay,\nwell are those expressions?\n\n222\n00:12:13.929 --> 00:12:22.180\nYeah, because I can say 2 times\n1 + 4 times 5, does that hold?\n\n223\n00:12:22.180 --> 00:12:24.546\nDoes that make sense, can I do that?\n\n224\n00:12:24.546 --> 00:12:27.200\nWell yeah, I can.\n\n225\n00:12:27.200 --> 00:12:28.136\nI just did.\n\n226\n00:12:28.136 --> 00:12:29.844\nBut does it make sense?\n\n227\n00:12:29.844 --> 00:12:33.688\nIt does because I can now do well,\nwhat's 2 times 1?\n\n228\n00:12:33.688 --> 00:12:35.704\nWell that's 2.\n\n229\n00:12:35.704 --> 00:12:36.808\nWhat's 4 times 5?\n\n230\n00:12:36.808 --> 00:12:38.368\nThat's 20.\n\n231\n00:12:38.368 --> 00:12:44.469\nSo I can rewrite this as z=2+20.\n\n232\n00:12:44.469 --> 00:12:51.246\nBut then what's interesting is this\nentire thing here is also an expression.\n\n233\n00:12:51.246 --> 00:12:56.067\nBecause I have two values with\nan operator that I can kind\n\n234\n00:12:56.067 --> 00:12:58.950\nof evaluate into another value.\n\n235\n00:12:58.950 --> 00:12:59.886\nWhat's 2+20?\n\n236\n00:12:59.886 --> 00:13:01.054\nWell, that's 22.\n\n237\n00:13:01.054 --> 00:13:05.108\nSo I'd end up with z= 22.\n\n238\n00:13:05.108 --> 00:13:09.774\nNow notice that expressions,\nI could have subexpressions.\n\n239\n00:13:09.774 --> 00:13:13.029\nI haven't really messed\nthe left-hand side.\n\n240\n00:13:13.029 --> 00:13:17.119\nAnd the reason being is just\nto keep things simple for now.\n\n241\n00:13:17.119 --> 00:13:23.357\nBut really, this made this\nthe ability to be an expression.\n\n242\n00:13:23.357 --> 00:13:27.286\nBut this, in and\nof itself, is a statement.\n\n243\n00:13:31.421 --> 00:13:36.405\nSo if I come down here I'd\nlike to think of this as,\n\n244\n00:13:36.405 --> 00:13:39.389\nwhoa, easy there, Justin.\n\n245\n00:13:39.389 --> 00:13:40.755\nThis column.\n\n246\n00:13:40.755 --> 00:13:45.419\nSo if I wrote x = 1, what happened?\n\n247\n00:13:45.419 --> 00:13:47.808\nWell, created this container.\n\n248\n00:13:47.808 --> 00:13:51.380\nNotice creating a container\nis actually doing something.\n\n249\n00:13:51.380 --> 00:13:56.695\nAnd it put an x label on it,\nand it put the number 1 in it.\n\n250\n00:13:56.695 --> 00:13:58.556\nSo it did a bunch of stuff.\n\n251\n00:13:58.556 --> 00:14:02.406\nWell what about y = 5?\n\n252\n00:14:02.406 --> 00:14:07.848\nWell, that also created\nthis container that\n\n253\n00:14:07.848 --> 00:14:13.295\nhas the label y on it and\nput the value 5 in it.\n\n254\n00:14:13.295 --> 00:14:14.611\nSo it did something, right?\n\n255\n00:14:14.611 --> 00:14:20.653\nSo this statement,\nthis as a whole actually did those things.\n\n256\n00:14:20.653 --> 00:14:24.478\nNow because these two things\nhave occurred prior to,\n\n257\n00:14:24.478 --> 00:14:27.287\nand let's actually reduce this down.\n\n258\n00:14:27.287 --> 00:14:31.086\nLet's just say z = 2 times x + y,\n\n259\n00:14:31.086 --> 00:14:35.151\njust to shorten it down a little bit.\n\n260\n00:14:35.151 --> 00:14:37.819\nWell, why can I do these?\n\n261\n00:14:37.819 --> 00:14:44.666\nBecause when I write this expression\nas a whole, the programming language,\n\n262\n00:14:44.666 --> 00:14:49.318\nPython, goes, okay, well x,\nlet me go find that.\n\n263\n00:14:49.318 --> 00:14:50.087\nDoes that exist?\n\n264\n00:14:50.087 --> 00:14:50.758\nIt does.\n\n265\n00:14:50.758 --> 00:14:55.641\nAnd because it exists, it goes,\nwell this is really just the value 1.\n\n266\n00:14:55.641 --> 00:14:59.925\nIt does the old switcheroo,\nit knocks the x out of the way and\n\n267\n00:14:59.925 --> 00:15:01.650\nit puts the 1 in place.\n\n268\n00:15:01.650 --> 00:15:08.053\nSo as you type this it's just doing\na giant find and replace the entire time.\n\n269\n00:15:08.053 --> 00:15:10.812\nThat is an expression\nbecause I can do that.\n\n270\n00:15:10.812 --> 00:15:13.062\nBut I also have these sub expressions.\n\n271\n00:15:13.062 --> 00:15:16.689\nAnd notice that this expression\nis actually just a value.\n\n272\n00:15:16.689 --> 00:15:19.061\nIt is just the variable y.\n\n273\n00:15:19.061 --> 00:15:22.610\nSo Python goes, know that out of the way,\nput the 5 in it's place.\n\n274\n00:15:22.610 --> 00:15:28.066\nSo I end up with 2 times 1 + 5.\n\n275\n00:15:28.066 --> 00:15:31.904\nAnd then all together this goes, well,\n\n276\n00:15:31.904 --> 00:15:36.759\nlet's create another container,\nput the label z on it.\n\n277\n00:15:36.759 --> 00:15:41.758\nAnd 2 times 1, well that's 2,\n+ 5, that's 7.\n\n278\n00:15:41.758 --> 00:15:43.383\nSo it does the same thing.\n\n279\n00:15:43.383 --> 00:15:45.232\nIt does something, but\n\n280\n00:15:45.232 --> 00:15:50.968\nit only does that through the evaluation\nof the respective expressions.\n\n281\n00:15:50.968 --> 00:15:56.201\nNow, I think that's\na good kind of overview.\n\n282\n00:15:56.201 --> 00:16:01.116\nThis will continue to come up\nbecause these assignments is not\n\n283\n00:16:01.116 --> 00:16:03.769\nthe only statement that we have.\n\n284\n00:16:03.769 --> 00:16:07.598\nMath is not the only\nexpressions that we can have.\n\n285\n00:16:07.598 --> 00:16:11.674\nBut always think about,\nokay, is it doing something,\n\n286\n00:16:11.674 --> 00:16:15.242\nis it creating something\nnew behind the scenes?\n\n287\n00:16:15.242 --> 00:16:20.255\nOr is it just doing more or less a find\nand replace, and then evaluating?\n\n288\n00:16:20.255 --> 00:16:23.290\nAnd notice here,\nthis is just a find and replace.\n\n289\n00:16:23.290 --> 00:16:24.347\nIt said well what is this?\n\n290\n00:16:24.347 --> 00:16:28.114\nI'm going to find and replace everywhere\nthere's an x, and put a 1 in its place.\n\n291\n00:16:28.114 --> 00:16:30.934\nI'm going to find and replace everywhere\nthere's a y and put a 5 in its place.\n\n292\n00:16:30.934 --> 00:16:33.848\nAnd then, okay,\nI'm gonna put these two together.\n\n293\n00:16:33.848 --> 00:16:36.848\nAnd that ends up with the equivalent of 7.\n\n294\n00:16:36.848 --> 00:16:40.123\nAnd it does that,\nbecause that's what computers do.\n\n295\n00:16:40.123 --> 00:16:42.435\nFind and replace, evaluate, reduce.\n\n296\n00:16:42.435 --> 00:16:47.822\nIf it's creating a variable or\ncreating something new,\n\n297\n00:16:47.822 --> 00:16:51.648\nthen it's most of the time a statement.\n\n298\n00:16:51.648 --> 00:16:54.739\nBut as I said,\nin Python there are some edge cases.\n\n299\n00:16:54.739 --> 00:16:57.629\nSo statements are made up of expressions,\n\n300\n00:16:57.629 --> 00:17:02.542\nexpressions are meant to be evaluated,\nessentially find and replace.\n\n301\n00:17:02.542 --> 00:17:07.573\nJust a reminder full gross over\nsimplification of those two dynamics.\n\n302\n00:17:07.573 --> 00:17:09.866\nAnd we'll continue to see these and\n\n303\n00:17:09.866 --> 00:17:13.312\ntry to delineate these as\nwe learn more programming.\n\n304\n00:17:13.312 --> 00:17:18.227\nBut this is a good way to think about, how\ndoes this behave versus this other thing?\n\n305\n00:17:18.227 --> 00:17:22.591\nAnd well, Vonne, I think that's a good\nplace to leave it be as we continue on our\n\n306\n00:17:22.591 --> 00:17:26.836\nadventures.\n&gt;&gt; Yeah, just accept it and move on.\n\n307\n00:17:26.836 --> 00:17:32.516\nThis is something that it's good to\nunderstand as a foundational piece.\n\n308\n00:17:32.516 --> 00:17:36.775\nBut like you said,\nit's not going to completely trip you\n\n309\n00:17:36.775 --> 00:17:40.870\nup later down the road if,\nis it an expression, is it?\n\n310\n00:17:40.870 --> 00:17:45.240\nYes, understand it, and\njust put it there, and move on, right?\n\n311\n00:17:45.240 --> 00:17:48.580\nWe're not gonna get in trouble\nif we completely forget how this\n\n312\n00:17:48.580 --> 00:17:51.111\nworks.\n&gt;&gt; No, and for the most part programming\n\n313\n00:17:51.111 --> 00:17:54.513\nlanguages will let you know if\nyou use them inappropriately.\n\n314\n00:17:54.513 --> 00:17:58.392\nOne of the biggest things that I see is,\nso assignment in particular,\n\n315\n00:17:58.392 --> 00:18:01.375\npeople will try to use\nvariables before assignment.\n\n316\n00:18:01.375 --> 00:18:04.670\nWell the only way you can use a variable\nis if there's an assignment statement that\n\n317\n00:18:04.670 --> 00:18:05.685\ncreates that variable.\n\n318\n00:18:05.685 --> 00:18:07.630\nSo it has to do something.\n\n319\n00:18:07.630 --> 00:18:12.999\nOr they'll write an expression and say,\nwell that's meant to go in a variable.\n\n320\n00:18:12.999 --> 00:18:17.913\nBut they don't actually make an assignment\nstatement, they just say, 2x + 5.\n\n321\n00:18:17.913 --> 00:18:20.183\nAnd then x was already a variable.\n\n322\n00:18:20.183 --> 00:18:22.316\nBut they're like,\nit shouldn't make another variable.\n\n323\n00:18:22.316 --> 00:18:26.211\nWell, no, it only does that if\nyou write it as a statement.\n\n324\n00:18:26.211 --> 00:18:29.550\nA statement is more like,\ndo this, and it does something.\n\n325\n00:18:29.550 --> 00:18:33.415\nAn expression is,\nthis is what it means kind of things.\n\n326\n00:18:33.415 --> 00:18:35.768\nSo we're not gonna get in trouble,\n\n327\n00:18:35.768 --> 00:18:39.306\njust it will help us debug\nissues later down the line.\n\n328\n00:18:39.306 --> 00:18:44.674\nBut it's perfectly okay if we have\njust a very fundamental or elementary\n\n329\n00:18:44.674 --> 00:18:49.189\nunderstanding of these two concepts.\n&gt;&gt; Well, I like that example.\n\n330\n00:18:49.189 --> 00:18:52.444\nYou just forgot to define it or\nit doesn't understand x.\n\n331\n00:18:52.444 --> 00:18:55.854\nAnd it is nice that it will,\nfor the most part, alert us.\n\n332\n00:18:55.854 --> 00:18:59.102\nBut again, understanding these\nintroduction chapters for\n\n333\n00:18:59.102 --> 00:19:02.103\nlater down the road is gonna\nmake our lives a lot easier.\n\n334\n00:19:02.103 --> 00:19:04.747\nSo well, thank you for that,\nI feel pretty good about that.\n\n335\n00:19:04.747 --> 00:19:06.732\nAnd now we're gonna go ahead and\nwrap this one up.\n\n336\n00:19:06.732 --> 00:19:10.058\nSigning off for DevPro.TV,\nI've been your host, Vonne Smith.\n\n337\n00:19:10.058 --> 00:19:10.826\n&gt;&gt; And I'm Justin Dennison.\n\n338\n00:19:10.826 --> 00:19:12.218\n&gt;&gt; We'll see you soon.\n\n339\n00:19:12.218 --> 00:19:16.887\n[MUSIC]\n\n",
          "vimeoId": "266337585"
        }
      ],
      "title": "Fundamentals"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Vonne return to the definition of a basic data types. Justin further explores how the \"type\" of information can affect the behavior of Python code.",
          "length": "1752",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-1-1-basic_data_types-042418-PGM.00_29_05_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-1-1-basic_data_types-042418-PGM.00_29_05_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-1-1-basic_data_types-042418-PGM.00_29_05_09.Still001-sm.jpg",
          "title": "Basic Data Types",
          "transcript": "WEBVTT\n\n1\n00:00:00.248 --> 00:00:10.248\n[MUSIC]\n\n2\n00:00:13.409 --> 00:00:17.195\nHello, everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.195 --> 00:00:18.545\nI'm your host Vonne Smith, and\n\n4\n00:00:18.545 --> 00:00:21.755\nwe are continuing on in our\nprogramming fundamentals series.\n\n5\n00:00:21.755 --> 00:00:24.205\nAnd today we're going to be\ntalking about basic data types,\n\n6\n00:00:24.205 --> 00:00:27.325\nand here to help us figure all\nthis out is Mr. Justin Dennison.\n\n7\n00:00:27.325 --> 00:00:29.055\nHow are you?\n&gt;&gt; I'm doing fantastic, Vonne.\n\n8\n00:00:29.055 --> 00:00:30.715\nHow are you?\n&gt;&gt; I'm doing pretty good.\n\n9\n00:00:30.715 --> 00:00:36.239\nSo we're gonna talk about data types and\nall the different types of data there are.\n\n10\n00:00:36.239 --> 00:00:36.996\n[LAUGH]\n&gt;&gt; [LAUGH] Well,\n\n11\n00:00:36.996 --> 00:00:40.960\nwe're gonna start with kinda the core\nones that are available in Python.\n\n12\n00:00:40.960 --> 00:00:44.720\nThe ones you're most likely to\nencounter and this is fairly ubiquitous\n\n13\n00:00:44.720 --> 00:00:48.180\nin other programming languages, but we're\ngonna talk about Python in particular.\n\n14\n00:00:48.180 --> 00:00:50.930\nNow the goal of this episode is\njust to give you a basic overview,\n\n15\n00:00:50.930 --> 00:00:56.800\nkind of think about hey, there may be\ntimes that I have something that I thought\n\n16\n00:00:56.800 --> 00:01:01.130\nwas the same, but because of their type,\nthey're actually treated differently.\n\n17\n00:01:01.130 --> 00:01:05.060\nNow we've talked about this in\na previous episode a little bit, right?\n\n18\n00:01:05.060 --> 00:01:06.510\nBut I wanna give you more or\n\n19\n00:01:06.510 --> 00:01:09.580\nless an overview of the ones that\nyou're most likely to encounter.\n\n20\n00:01:09.580 --> 00:01:10.770\nI'm just gonna go ahead and list them,\n\n21\n00:01:10.770 --> 00:01:14.740\nbut we're actually gonna see them\njust very briefly, each one.\n\n22\n00:01:14.740 --> 00:01:16.680\nAll right?\nSo we're gonna talk about numbers.\n\n23\n00:01:16.680 --> 00:01:20.660\nThose numbers actually have two different\ntypes that we're most concerned about,\n\n24\n00:01:20.660 --> 00:01:21.810\nfloats and ints.\n\n25\n00:01:21.810 --> 00:01:26.700\nAnd we're actually gonna dive deeper\ninto each one in subsequent episodes.\n\n26\n00:01:26.700 --> 00:01:30.750\nAnd we did a little bit of this in the\nREPL episode, correct, where we were like,\n\n27\n00:01:30.750 --> 00:01:34.660\nthis is where it's gonna show you what,\nyou're basically asking it what is this.\n\n28\n00:01:34.660 --> 00:01:37.250\nIdentify this particular data type.\n\n29\n00:01:37.250 --> 00:01:39.790\nSo we've seen a little bit of\nit if we're watching this in\n\n30\n00:01:39.790 --> 00:01:40.640\nsuccession.\n&gt;&gt; Yeah, but\n\n31\n00:01:40.640 --> 00:01:42.300\nwe've seen a little bit of this,\n\n32\n00:01:42.300 --> 00:01:46.660\nbut I'm about to throw some\nthings in the mix for you.\n\n33\n00:01:46.660 --> 00:01:47.690\nThat's weird.\n\n34\n00:01:47.690 --> 00:01:49.266\nSo this is an overview and\n\n35\n00:01:49.266 --> 00:01:54.004\nsome of them will actually take a little\nbit to get kind of over to all right.\n\n36\n00:01:54.004 --> 00:01:57.510\nSo they have numbers that actually have\ntwo kind of types that are associated.\n\n37\n00:01:57.510 --> 00:02:03.130\nI've collected those together because they\nmore or less behave the same floats and\n\n38\n00:02:03.130 --> 00:02:07.210\nints, they behave as numbers, but\nthere are some differences, all right?\n\n39\n00:02:07.210 --> 00:02:08.970\nAnd then we have booleans.\n\n40\n00:02:08.970 --> 00:02:10.320\nWell, what are booleans?\n\n41\n00:02:10.320 --> 00:02:15.190\nThose are more or less yes or no,\ntrue or false, one of those, and\n\n42\n00:02:15.190 --> 00:02:17.650\nwe'll talk more about those as well.\n\n43\n00:02:17.650 --> 00:02:19.940\nBut we're mostly about the syntax for now.\n\n44\n00:02:19.940 --> 00:02:24.110\nWe're gonna be talking about tuples,\nor tuples, depending on how you want.\n\n45\n00:02:24.110 --> 00:02:27.600\nYou can think of those as\na collection of things,\n\n46\n00:02:27.600 --> 00:02:32.060\nkind of grouped together in a particular\norder, where that order means something.\n\n47\n00:02:32.060 --> 00:02:34.610\nDictionaries, dictionaries?\n\n48\n00:02:34.610 --> 00:02:38.120\nJust think of a dictionary that you've\nlooked up a word, it is exactly like that.\n\n49\n00:02:38.120 --> 00:02:40.280\nIt's a look-up ability.\n\n50\n00:02:40.280 --> 00:02:46.740\nYou open it up, you find the word and\nyou look up the corresponding definition.\n\n51\n00:02:46.740 --> 00:02:49.490\nThat's an easy way to think about it,\nit ends up being a little more\n\n52\n00:02:49.490 --> 00:02:52.240\ncomplicated than that.\n&gt;&gt; I don't know if I'm jumping too far\n\n53\n00:02:52.240 --> 00:02:55.030\nahead but then dictionary, is this like,\nthis is built into Python?\n\n54\n00:02:55.030 --> 00:02:58.010\nThis is the Python\ndictionary where you could.\n\n55\n00:02:58.010 --> 00:03:02.640\nAsk it, in whatever syntax,\nwhat is a tuple?\n\n56\n00:03:02.640 --> 00:03:04.095\nI mean you could ask that\n[CROSSTALK] define it or?\n\n57\n00:03:04.095 --> 00:03:05.763\n&gt;&gt; So that would make sense except that's\n\n58\n00:03:05.763 --> 00:03:07.840\nnot particularly what I'm talking about.\n&gt;&gt; Okay.\n\n59\n00:03:07.840 --> 00:03:09.770\n&gt;&gt; It behaves like a dictionary but\n\n60\n00:03:09.770 --> 00:03:13.620\nit actually contains data\nthat are of other types.\n\n61\n00:03:13.620 --> 00:03:18.140\nSo it might have numbers in it,\nit might have tuples in it.\n\n62\n00:03:18.140 --> 00:03:22.980\nBut it's not necessarily what they are,\nit's a way of binding things together\n\n63\n00:03:22.980 --> 00:03:25.410\nin a very particular way.\n&gt;&gt; Like a book.\n\n64\n00:03:25.410 --> 00:03:30.010\nSo it could be chapters and sentences and\nparagraphs all bundled as a dictionary.\n\n65\n00:03:30.010 --> 00:03:32.430\nSo because we're talking about data types?\n\n66\n00:03:32.430 --> 00:03:36.180\nOkay, full circle, okay,\nwe're saying that I'm classifying this\n\n67\n00:03:36.180 --> 00:03:40.570\nas a dictionary data type, so\ntreat it all as one entity,\n\n68\n00:03:40.570 --> 00:03:42.820\nand do whatever you will with it.\n&gt;&gt; Yeah, and\n\n69\n00:03:42.820 --> 00:03:46.640\nwe'll see more about, why do we want\nto use dictionary, what does it do,\n\n70\n00:03:46.640 --> 00:03:48.270\nhow does it work\n&gt;&gt; But\n\n71\n00:03:48.270 --> 00:03:52.790\nI'm gonna show you more or less the syntax\nfor each of these ones before we dive in.\n\n72\n00:03:52.790 --> 00:03:54.530\nAnd then lists.\n\n73\n00:03:54.530 --> 00:03:55.230\nSo let me make sure.\n\n74\n00:03:55.230 --> 00:04:00.710\nWe talked about numbers, Booleans,\ndictionaries, tuples, lists.\n\n75\n00:04:00.710 --> 00:04:05.570\nI almost forgot, strings,\nstrings are just text.\n\n76\n00:04:05.570 --> 00:04:07.610\nBut there can be some whoopsie daisies.\n\n77\n00:04:07.610 --> 00:04:10.780\nSo those are kind of our\ncores ones our basic ones\n\n78\n00:04:10.780 --> 00:04:13.600\nthat we will use when we're\nprogramming in Python.\n\n79\n00:04:13.600 --> 00:04:15.690\nThis is not exhaustive.\n\n80\n00:04:15.690 --> 00:04:19.910\nIt gets crazy when you learn\nmore about programming.\n\n81\n00:04:19.910 --> 00:04:25.020\nThere's a lot more ways to, well kind of\nencode data to have a respective type.\n\n82\n00:04:25.020 --> 00:04:29.470\nSo a set of behaviors or\na predefined way they.\n\n83\n00:04:29.470 --> 00:04:31.150\nAct and feel and look like.\n\n84\n00:04:31.150 --> 00:04:34.190\nSo don't necessarily think\nthis is all you get.\n\n85\n00:04:34.190 --> 00:04:36.870\nThese are the ones that you're probably\nmost commonly going to interact\n\n86\n00:04:36.870 --> 00:04:37.460\nwith.\n&gt;&gt; These\n\n87\n00:04:37.460 --> 00:04:38.650\nare the fundamentals.\n&gt;&gt; Yeah.\n\n88\n00:04:38.650 --> 00:04:39.150\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n89\n00:04:39.150 --> 00:04:40.500\n&gt;&gt; They are,\n\n90\n00:04:40.500 --> 00:04:43.220\nin fact, the fundamentals.\nAnd, well, they'll help get us\n\n91\n00:04:43.220 --> 00:04:47.670\nstart to build our foundation, but\nwe gotta build the rest of the house and\n\n92\n00:04:47.670 --> 00:04:51.780\nwithout our foundation the house is\njust a pile of wood and some shingles.\n\n93\n00:04:51.780 --> 00:04:54.660\nSo let's go ahead and\nactually let's take a look at the screen.\n\n94\n00:04:54.660 --> 00:04:59.480\nWe're still not in our text editor yet,\nwe'll get there, but for\n\n95\n00:04:59.480 --> 00:05:01.530\nnow we're still gonna play\nin the REPL a little bit.\n\n96\n00:05:01.530 --> 00:05:04.980\nAnd we're gonna look at\nthe respective data types all right?\n\n97\n00:05:04.980 --> 00:05:08.590\nSo we're gonna hop into Python 3,\nand boom, and\n\n98\n00:05:08.590 --> 00:05:10.920\nI'm gonna go ahead and\nhold control and hit l.\n\n99\n00:05:10.920 --> 00:05:13.000\nAnd that's gonna clear out my screen but\n\n100\n00:05:13.000 --> 00:05:15.440\nit's still gonna keep me in the REPL,\nall right?\n\n101\n00:05:15.440 --> 00:05:18.220\nNow let's just define some variables,\nI said,\n\n102\n00:05:18.220 --> 00:05:23.150\nfine, like we're gonna say,\nyou owe me a dollar.\n\n103\n00:05:23.150 --> 00:05:29.450\nSo I'm gonna say, let's say name and\nthat's quote Justin, all right?\n\n104\n00:05:29.450 --> 00:05:33.035\nAnd now, let's calm down on my narcissism\na little bit, let's say, Vonne.\n\n105\n00:05:33.035 --> 00:05:37.637\n[LAUGH] Okay, so and\nthen favorite_number = and\n\n106\n00:05:37.637 --> 00:05:41.799\nVonne's is seven and well let's see here.\n\n107\n00:05:41.799 --> 00:05:44.213\nWhat else do we need?\n\n108\n00:05:44.213 --> 00:05:49.550\nlikes_cheese.\n\n109\n00:05:49.550 --> 00:05:51.660\nVonne do you like cheese?\n&gt;&gt; Yes I do [LAUGH]\n\n110\n00:05:51.660 --> 00:05:52.560\n&gt;&gt; Alright, so\n\n111\n00:05:52.560 --> 00:05:56.960\nwe gonna say True\n&gt;&gt; Notice the capital t.\n\n112\n00:05:56.960 --> 00:06:02.070\nNow we're gonna explore these a little\nmore and whoa, whoa, whoa, there we go.\n\n113\n00:06:02.070 --> 00:06:07.220\nSo I'm gonna hit enter and our REPL's kind\nof, I had to zoom in a little bit more, it\n\n114\n00:06:07.220 --> 00:06:12.240\nwas a little tiny and if I scroll up just\na little bit, everything's still there.\n\n115\n00:06:12.240 --> 00:06:15.840\nSo I have a name, a favorite number and\nlikes cheese, all right?\n\n116\n00:06:17.060 --> 00:06:21.160\nSo this is a whole bunch of stuff\nthat you may not necessarily,\n\n117\n00:06:21.160 --> 00:06:22.440\nyou're like what does this do?\n\n118\n00:06:22.440 --> 00:06:25.170\nAll we've done is define some variables,\nand\n\n119\n00:06:25.170 --> 00:06:29.450\nwe've put in those,\nwell, some data, right?\n\n120\n00:06:29.450 --> 00:06:31.780\nA name.\nAnd we've seen this before,\n\n121\n00:06:31.780 --> 00:06:36.200\nwhat is the type of the name?\n\n122\n00:06:36.200 --> 00:06:36.700\nWhat's a string?\n\n123\n00:06:36.700 --> 00:06:41.160\nAnd what a string is,\nis it's a collection of characters, right?\n\n124\n00:06:41.160 --> 00:06:43.450\nA, B, C, D, E, F, G, H, I, J, K, L.\n\n125\n00:06:43.450 --> 00:06:49.170\nAll those things upper and lower case,\npunctuation, with quotes around, right?\n\n126\n00:06:49.170 --> 00:06:52.380\nDouble or single,\nas long as you have matching pair, right?\n\n127\n00:06:52.380 --> 00:06:55.270\nDon't wear a high-heel shoe and\nthen a running sneaker on the other.\n\n128\n00:06:55.270 --> 00:06:56.740\nSo just think of it that way.\n\n129\n00:06:56.740 --> 00:07:00.390\nSo strings are this collection, but for\n\n130\n00:07:00.390 --> 00:07:03.520\nthe most part when you're starting out\nyou just think of them as is text.\n\n131\n00:07:04.720 --> 00:07:07.860\nNow, as I've said we'll jump\ninto those a little more.\n\n132\n00:07:08.985 --> 00:07:13.405\nNow what about favorite, whoa that is not,\n\n133\n00:07:15.025 --> 00:07:18.055\nI gotta just type type,\nit's cause we're all watching you.\n\n134\n00:07:18.055 --> 00:07:19.845\nYeah, don't look at me!\n\n135\n00:07:19.845 --> 00:07:21.825\nFavorite number, and\n\n136\n00:07:21.825 --> 00:07:26.275\nthat is an integer we've again seen\nthis before, that is a number, right?\n\n137\n00:07:26.275 --> 00:07:28.135\nAn integer is a type of number.\n\n138\n00:07:29.140 --> 00:07:30.250\nWe can do a number of things.\n\n139\n00:07:30.250 --> 00:07:38.340\nLike if I said favorite_number + 1, well\nthat's eight, because it replace that.\n\n140\n00:07:38.340 --> 00:07:38.980\nAll right?\n\n141\n00:07:38.980 --> 00:07:45.280\nAnd then what if I say type(likes_cheese)?\n\n142\n00:07:45.280 --> 00:07:47.990\nA bool, or a boolean.\n\n143\n00:07:47.990 --> 00:07:48.590\nAll right?\n\n144\n00:07:48.590 --> 00:07:51.419\nNow I'm gonna deviate from the numbers and\nthings,\n\n145\n00:07:51.419 --> 00:07:53.871\ncuz we've seen those in previous episodes.\n\n146\n00:07:53.871 --> 00:07:58.398\nBut I have these for\nanother example here shortly.\n\n147\n00:07:58.398 --> 00:08:03.979\nSo likes_cheese is true, that's a Boolean.\n\n148\n00:08:03.979 --> 00:08:05.080\nWell, what is that?\n\n149\n00:08:05.080 --> 00:08:06.800\nThat's kinda like yes.\n\n150\n00:08:06.800 --> 00:08:10.340\nEssentially I'm asking the question,\ndo you like cheese?\n\n151\n00:08:10.340 --> 00:08:12.250\nYes, Vonne said yes.\n\n152\n00:08:12.250 --> 00:08:13.830\nSo I put true.\n\n153\n00:08:13.830 --> 00:08:17.172\nNotice the capital T, right.\n\n154\n00:08:17.172 --> 00:08:20.620\nThe capital T is important,\nthis is a reserve value.\n\n155\n00:08:20.620 --> 00:08:27.030\nPython knows capital True is this\nparticular Boolean thing, all right.\n\n156\n00:08:28.380 --> 00:08:34.760\nCorrespondingly, likes,\nwhat is something you don't like Vonne?\n\n157\n00:08:34.760 --> 00:08:38.598\nOlives?\n&gt;&gt; I love olives [LAUGH] I don't like-\n\n158\n00:08:38.598 --> 00:08:39.148\n&gt;&gt; Pickled pigs\n\n159\n00:08:39.148 --> 00:08:40.874\nfeet.\n&gt;&gt; We'll go with that, yes.\n\n160\n00:08:40.874 --> 00:08:41.956\n&gt;&gt; [LAUGH]\n\n161\n00:08:41.956 --> 00:08:43.966\n&gt;&gt; [LAUGH]\n\n162\n00:08:43.966 --> 00:08:45.460\n&gt;&gt; Let's keep it pickles.\n\n163\n00:08:45.460 --> 00:08:46.600\nMaybe it's not necessarily true.\n\n164\n00:08:46.600 --> 00:08:49.500\nMaybe you like pickles and\npickled cucumbers.\n\n165\n00:08:49.500 --> 00:08:52.310\nBut likes_pickles, False,\nnotice the capital F, all right.\n\n166\n00:08:54.470 --> 00:08:58.717\nBoolean can only have these two types,\nit is a yes or a no, right.\n\n167\n00:09:00.260 --> 00:09:01.660\nSo likes_pickles.\n\n168\n00:09:01.660 --> 00:09:02.628\nWell, what does that type?\n\n169\n00:09:02.628 --> 00:09:08.222\nLikes pickles, Boolean.\n\n170\n00:09:08.222 --> 00:09:12.350\nThink of this as I'm asking a question,\nand it's a yes or no answer.\n\n171\n00:09:12.350 --> 00:09:13.900\nDo you like pickles?\n\n172\n00:09:13.900 --> 00:09:15.560\nNo, false, right?\n\n173\n00:09:15.560 --> 00:09:16.854\nSo likes_pickles is false.\n\n174\n00:09:16.854 --> 00:09:20.510\nlikes_cheese, do you like cheese?\n\n175\n00:09:20.510 --> 00:09:22.680\nYes, well that's true.\n\n176\n00:09:22.680 --> 00:09:28.266\nSo this data type actually comes in to\nproviding the ability to have logic,\n\n177\n00:09:28.266 --> 00:09:28.894\nright.\n\n178\n00:09:28.894 --> 00:09:33.020\nSo if you ask a question and you respond,\nit's just like having a conversation.\n\n179\n00:09:33.020 --> 00:09:37.940\nBut all we need to know at this point,\nat this high level overview is, well False\n\n180\n00:09:37.940 --> 00:09:42.220\nand True are Boolean types and those are\nthe only two values that they can have.\n\n181\n00:09:42.220 --> 00:09:48.316\nIt's an on or an off, it's a yes or a no,\nit's a here or not here, I don't, [LAUGH].\n\n182\n00:09:48.316 --> 00:09:51.040\nI just wanna drive home\nthose are the two distinct\n\n183\n00:09:51.040 --> 00:09:51.760\nvalues.\n&gt;&gt; And\n\n184\n00:09:51.760 --> 00:09:55.630\nyou also keep emphasizing the\ncapitalization of it so you can't do lower\n\n185\n00:09:55.630 --> 00:09:58.940\ncase true or lower case false.\n&gt;&gt; And as a matter of fact,\n\n186\n00:09:58.940 --> 00:10:00.330\nthat's why I love the REPL.\n\n187\n00:10:00.330 --> 00:10:01.680\nThat's a great question.\n\n188\n00:10:01.680 --> 00:10:04.040\nLet's just say, if I say false?\n\n189\n00:10:04.040 --> 00:10:06.370\nIt goes yeah, that's false, right?\n\n190\n00:10:06.370 --> 00:10:09.750\nAll it does is say, when you tell me\nfalse, I'm just evaluating what false is,\n\n191\n00:10:09.750 --> 00:10:11.400\nfalse is false.\n\n192\n00:10:11.400 --> 00:10:12.890\nAnd it hands it back to you.\n\n193\n00:10:12.890 --> 00:10:18.110\nIf I say, false, it goes,\nwhat are you talking about, all right?\n\n194\n00:10:19.440 --> 00:10:23.570\nWith that said,\nthat means I can do something like this.\n\n195\n00:10:25.300 --> 00:10:30.800\nI can do that, and\nnow it'll say false is false.\n\n196\n00:10:30.800 --> 00:10:33.420\nMy recommendation is do not do that.\n&gt;&gt; [LAUGH] Well,\n\n197\n00:10:33.420 --> 00:10:36.090\ncuz that's just declaring a variable.\n\n198\n00:10:36.090 --> 00:10:37.668\nYou're giving it a name.\n\n199\n00:10:37.668 --> 00:10:42.178\nI mean, I could have said,\nfalsy = False cuz that's the other\n\n200\n00:10:42.178 --> 00:10:46.772\nside of the assigned, the equal sign,\nthis is a Boolean value,\n\n201\n00:10:46.772 --> 00:10:50.060\ncuz you're doing the uppercase.\n&gt;&gt; And\n\n202\n00:10:50.060 --> 00:10:52.710\nwhat's really crazy,\nyou're exactly correct.\n\n203\n00:10:52.710 --> 00:10:55.606\nI can even say false = True,\n\n204\n00:10:55.606 --> 00:10:59.180\ndefinitely do not do that.\n&gt;&gt; [LAUGH]\n\n205\n00:10:59.180 --> 00:10:59.947\n&gt;&gt; You're like,\n\n206\n00:10:59.947 --> 00:11:01.660\nit's like opposite day, right.\n\n207\n00:11:01.660 --> 00:11:04.879\nSo don't do this,\nI would stay away from false and\n\n208\n00:11:04.879 --> 00:11:09.479\ntrue as respective variable names,\neven if you lower case all of them,\n\n209\n00:11:09.479 --> 00:11:13.946\nbecause false and true with uppercase\nactually have to find values.\n\n210\n00:11:13.946 --> 00:11:16.110\nThey are built into the Python language.\n\n211\n00:11:16.110 --> 00:11:19.030\nNow this is the recommendation, you\ndon't have to follow my recommendation.\n\n212\n00:11:19.030 --> 00:11:22.999\nFor me, I will stay away from\nthose respectively, right.\n\n213\n00:11:22.999 --> 00:11:26.634\nSo mainly because sometimes\nwhat you'll have is,\n\n214\n00:11:26.634 --> 00:11:33.040\nyou'll have true equals some expression or\nthat true may evaluate to true or false.\n\n215\n00:11:33.040 --> 00:11:35.965\nAnd then you have true, which is\nsometimes true and it's sometimes.\n\n216\n00:11:35.965 --> 00:11:38.180\nIt just makes it really hard to\nthink about, so I wouldn't do that.\n\n217\n00:11:38.180 --> 00:11:40.430\n&gt;&gt; This is the one where just accept it,\n\n218\n00:11:40.430 --> 00:11:41.220\nmove on.\n\n219\n00:11:41.220 --> 00:11:41.950\nDon't mess with it.\n\n220\n00:11:41.950 --> 00:11:46.350\nDon't gussy it up and\njust let it be, and that's it.\n\n221\n00:11:46.350 --> 00:11:47.817\n&gt;&gt; You're exactly correct.\n\n222\n00:11:47.817 --> 00:11:50.650\nNow these are kind of our simpler ones,\nright?\n\n223\n00:11:50.650 --> 00:11:52.780\nWe have a Boolean, we have string.\n\n224\n00:11:52.780 --> 00:11:54.420\nString is actually\na little more complicated,\n\n225\n00:11:54.420 --> 00:11:56.600\nbut we're pretty good with\ninteracting with text.\n\n226\n00:11:56.600 --> 00:11:59.870\nWe're like, I can read, it works well.\n\n227\n00:11:59.870 --> 00:12:01.120\nAnd then we have numbers, right?\n\n228\n00:12:01.120 --> 00:12:04.810\nIntegers and floats,\nlike how to have their subdivision.\n\n229\n00:12:04.810 --> 00:12:08.660\nThat gives us our fairly simple ones.\n\n230\n00:12:08.660 --> 00:12:11.840\nBut now,\nwhat if we want something more complex?\n\n231\n00:12:11.840 --> 00:12:16.270\nWhat if I wanna represent\nsomething a little more complex?\n\n232\n00:12:16.270 --> 00:12:20.240\nOr I have a bunch of numbers that I\nneed to kinda bundle up together,\n\n233\n00:12:20.240 --> 00:12:22.980\na bunch of Booleans that I\nneed to bundle together,\n\n234\n00:12:22.980 --> 00:12:28.470\na bunch of strings that I would need to\nbundle together in very particular ways.\n\n235\n00:12:28.470 --> 00:12:34.070\nSo tuples, lists, and dictionaries\nare kind of like collection types.\n\n236\n00:12:34.070 --> 00:12:37.530\nWays to collect other\ninformation into a logical,\n\n237\n00:12:37.530 --> 00:12:43.240\nkind of reasoned about structure that\nhas very defined patterns, all right?\n\n238\n00:12:43.240 --> 00:12:46.190\nAnd we're just gonna quickly\nlook at the syntax and\n\n239\n00:12:46.190 --> 00:12:48.660\nmaybe some of the reasons\nyou would use these.\n\n240\n00:12:48.660 --> 00:12:50.790\nAnd then that'll kind of get us started,\nright?\n\n241\n00:12:50.790 --> 00:12:53.800\nSo, yep, I think I've covered all of them.\n\n242\n00:12:53.800 --> 00:12:57.080\nSo I'm actually gonna hold Control and\nhit L, right?\n\n243\n00:12:57.080 --> 00:12:59.340\nAnd I'm gonna do something like this.\n\n244\n00:12:59.340 --> 00:13:01.020\nSo I need to represent a person.\n\n245\n00:13:02.560 --> 00:13:05.220\nA left hand parenthesis,\nI'm just saying person.\n\n246\n00:13:05.220 --> 00:13:06.500\nNotice that's a capital letter.\n\n247\n00:13:08.290 --> 00:13:13.400\nThat was a Whoops-a-daisy on my part,\n[LAUGH] I should not do that.\n\n248\n00:13:13.400 --> 00:13:18.979\nBut let's say that a person has a name,\n\n249\n00:13:18.979 --> 00:13:24.730\na favorite_number, likes_cheese,\n\n250\n00:13:24.730 --> 00:13:27.960\nand likes_pickles.\n\n251\n00:13:27.960 --> 00:13:31.425\nSo notice,\nit's a left-hand parentheses, name,\n\n252\n00:13:31.425 --> 00:13:35.750\nfavorite_number, likes_cheese,\ncomma, likes_pickles.\n\n253\n00:13:35.750 --> 00:13:37.810\nNow we all know these are variables.\n\n254\n00:13:37.810 --> 00:13:41.300\nAll right, so if I hit Enter,\nwhat have I created?\n\n255\n00:13:41.300 --> 00:13:43.850\nIf you've ever done anything like this and\nyou go, well, it worked.\n\n256\n00:13:43.850 --> 00:13:50.007\nI don't even know really what I did,\nalways check the type, person.\n\n257\n00:13:50.007 --> 00:13:52.770\nIt's a tuple, or a tuple, all right?\n\n258\n00:13:52.770 --> 00:13:54.050\nWhere does that originate from?\n\n259\n00:13:54.050 --> 00:13:58.490\nWell, it's a double, triple,\nquadruple, quintuple.\n\n260\n00:13:58.490 --> 00:14:04.050\nQuintuple, septuple, sextuple,\nthere's a whole bunch of them.\n\n261\n00:14:04.050 --> 00:14:07.841\nAnd all it means is that I get a three,\nright.\n\n262\n00:14:07.841 --> 00:14:12.750\nA double is two, a triple is three,\nquadruple is four and I have a collection.\n\n263\n00:14:14.410 --> 00:14:17.685\nBut if I look,\nif I type person, what is it?\n\n264\n00:14:17.685 --> 00:14:21.950\nIt's ('Vonne', 7, True, False).\n\n265\n00:14:21.950 --> 00:14:26.410\nAnd now it's a logical\ngrouping with this order.\n\n266\n00:14:26.410 --> 00:14:27.300\nWhat was the order?\n\n267\n00:14:27.300 --> 00:14:30.943\nWell, first was the name,\nthen was the favorite_number,\n\n268\n00:14:30.943 --> 00:14:35.350\nthen was likes_cheese,\nthen was likes_pickles.\n\n269\n00:14:35.350 --> 00:14:39.500\nAnd if you have this tuple,\nthose are bound together now and\n\n270\n00:14:39.500 --> 00:14:44.780\njust ride along with each other.\n&gt;&gt; But I had her to find likes_cheese,\n\n271\n00:14:44.780 --> 00:14:49.300\nname, all of those before,\ncuz if you just started right from this,\n\n272\n00:14:49.300 --> 00:14:53.600\nit'd be like, okay, or it'd give you\nan error, like I don't know what name is,\n\n273\n00:14:53.600 --> 00:14:55.100\nI don't know what number is.\n\n274\n00:14:55.100 --> 00:14:58.330\nIf I typed in cat, yeah,\n\n275\n00:14:58.330 --> 00:15:02.170\nequals meow, whatever.\n&gt;&gt; All right,\n\n276\n00:15:02.170 --> 00:15:05.375\nso actually let's go with-\n&gt;&gt; I meant cat was the variable, yeah.\n\n277\n00:15:05.375 --> 00:15:08.828\n[LAUGH]\n&gt;&gt; Yeah, and if we did-\n\n278\n00:15:08.828 --> 00:15:10.308\n&gt;&gt; Name, paw.\n\n279\n00:15:10.308 --> 00:15:11.422\n&gt;&gt; Cat name\n\n280\n00:15:11.422 --> 00:15:12.508\n&gt;&gt; Because left-handed or\n\n281\n00:15:12.508 --> 00:15:13.443\nright-handed paw.\n\n282\n00:15:13.443 --> 00:15:17.417\n[LAUGH]\n&gt;&gt; likes_tuna, I don't know.\n\n283\n00:15:17.417 --> 00:15:18.800\nAnd maybe those are the only three.\n\n284\n00:15:18.800 --> 00:15:19.760\nThis is perfectly okay.\n\n285\n00:15:19.760 --> 00:15:23.370\nIf I hit Enter, boom,\nyou're exactly correct, those are broken.\n\n286\n00:15:23.370 --> 00:15:24.940\nHowever, I don't have to use variables.\n\n287\n00:15:24.940 --> 00:15:28.620\nThe only reason I did these variables\nis to show you that these are a logical\n\n288\n00:15:28.620 --> 00:15:30.080\nconstruction.\n\n289\n00:15:30.080 --> 00:15:32.510\nI want the name to be first,\nI want the favorite number to be second,\n\n290\n00:15:32.510 --> 00:15:37.100\nI want likes_cheese to be third,\nI want likes_pickles to be fourth.\n\n291\n00:15:37.100 --> 00:15:40.050\nThis construction is\nhow I'm thinking about.\n\n292\n00:15:40.050 --> 00:15:44.465\nThis grouping says the name is first, the\nfavorite_number is second, likes_cheese is\n\n293\n00:15:44.465 --> 00:15:50.170\nthird, likes_pickles is fourth, and so\nevery other person is gonna be a tuple.\n\n294\n00:15:50.170 --> 00:15:53.720\nIt's a group of four elements that have\na particular meaning, and those meanings\n\n295\n00:15:53.720 --> 00:15:58.372\nwere the variable names in this case.\n&gt;&gt; And does it matter that the way you\n\n296\n00:15:58.372 --> 00:16:02.879\ndefined in those individual\nvariables was name?\n\n297\n00:16:02.879 --> 00:16:06.626\nNumber, does that order matter,\ndo you know what I'm trying to ask?\n\n298\n00:16:06.626 --> 00:16:08.330\n&gt;&gt; So, as long as those variables existed,\n\n299\n00:16:08.330 --> 00:16:09.507\nthen all of this would work.\n\n300\n00:16:09.507 --> 00:16:15.321\nNow, to further clarify then, let's go\nwith, I don't know, a cat name Fuego,\n\n301\n00:16:15.321 --> 00:16:18.259\nright, and paws, like I guess he-\n&gt;&gt; Left?\n\n302\n00:16:18.259 --> 00:16:19.718\n&gt;&gt; Left, all right, so\n\n303\n00:16:19.718 --> 00:16:22.718\nthat's gonna be a string, and let me just,\n\n304\n00:16:22.718 --> 00:16:25.489\nI accidentally hit enter there.\n&gt;&gt; We can do four is\n\n305\n00:16:25.489 --> 00:16:26.183\nwhat you're going for?\n\n306\n00:16:26.183 --> 00:16:29.016\nA number, yeah he has four paws.\n&gt;&gt; He has 4 paws.\n\n307\n00:16:29.016 --> 00:16:29.722\n&gt;&gt; Yes.\n\n308\n00:16:29.722 --> 00:16:30.442\n&gt;&gt; All right, so\n\n309\n00:16:30.442 --> 00:16:33.660\nhe has 4 paws, and then does he like tuna?\n&gt;&gt; Yes.\n\n310\n00:16:33.660 --> 00:16:34.684\n&gt;&gt; All right so that would be True.\n\n311\n00:16:34.684 --> 00:16:38.940\nAll right so cat, is Fuego,\n4 paws, and likes tuna.\n\n312\n00:16:38.940 --> 00:16:43.742\nNow I have to remember that there's\nnothing special about this other\n\n313\n00:16:43.742 --> 00:16:45.986\nthan the respective ordering.\n\n314\n00:16:45.986 --> 00:16:49.334\nAll right, so the name is always first,\nthe number of paws is always second and\n\n315\n00:16:49.334 --> 00:16:51.580\nlikes tuna is always third\nin this particular case.\n\n316\n00:16:51.580 --> 00:16:55.870\nThese are decisions that we\nhave to make for ourselves.\n\n317\n00:16:55.870 --> 00:17:00.306\nAll right, there are pluses and\nminuses to a tuple.\n\n318\n00:17:00.306 --> 00:17:03.021\nTuples, once they're made,\nthey can't be changed,\n\n319\n00:17:03.021 --> 00:17:05.000\nyou can't change anything about them.\n\n320\n00:17:06.900 --> 00:17:10.840\nDown side, as they stand right now,\nyou have to remember the order.\n\n321\n00:17:10.840 --> 00:17:14.300\nName is always first, paws is always\nsecond, likes tuna is always third,\n\n322\n00:17:14.300 --> 00:17:15.390\nyou have to remember that.\n\n323\n00:17:17.800 --> 00:17:20.250\nThe down side,\ndepending on your situation,\n\n324\n00:17:20.250 --> 00:17:22.610\nthey can't be changed,\nthey are always that.\n\n325\n00:17:22.610 --> 00:17:26.210\nNow, I'm not saying you can't\nsay something like this.\n\n326\n00:17:28.330 --> 00:17:30.090\nI'm guessing Bishop has 4, as well.\n\n327\n00:17:30.090 --> 00:17:31.330\nDoes he like tuna, as well?\n&gt;&gt; Yes,\n\n328\n00:17:31.330 --> 00:17:34.390\nhe does.\n&gt;&gt; All right, so I can do this.\n\n329\n00:17:34.390 --> 00:17:37.660\nI didn't change the other one,\nI created a new one, okay?\n\n330\n00:17:37.660 --> 00:17:40.820\nSo this are actually two different cats,\nthose are two different tuples.\n\n331\n00:17:40.820 --> 00:17:45.982\nThe other one is lost forever,\nbecause I let it go from the variable,\n\n332\n00:17:45.982 --> 00:17:48.079\nit's gone.\n&gt;&gt; In this example,\n\n333\n00:17:48.079 --> 00:17:51.126\nsince we kind of like\ndefined cat within itself.\n\n334\n00:17:51.126 --> 00:17:56.124\nIn the example above in the person,\nif we went back to the original name\n\n335\n00:17:56.124 --> 00:17:59.358\nvariable and\nchange it from Vonne to Justin.\n\n336\n00:17:59.358 --> 00:18:04.475\nBut that's a different space of where\nthe information is being defined,\n\n337\n00:18:04.475 --> 00:18:07.870\nis that correct?\n&gt;&gt; So I think you're on to something here.\n\n338\n00:18:07.870 --> 00:18:11.000\nSo if I look at person,\nI just Ctr+L there.\n\n339\n00:18:11.000 --> 00:18:13.140\nThat's Vonne, name is Vonne.\n\n340\n00:18:13.140 --> 00:18:21.396\nIf I say name is Justin, person is still\nVonne, because they are no longer linked.\n\n341\n00:18:21.396 --> 00:18:23.840\nIt just evaluated,\nit did a find and replace and\n\n342\n00:18:23.840 --> 00:18:26.010\nthen that's what it is, always.\n\n343\n00:18:26.010 --> 00:18:29.090\nRight so that's always the case.\n&gt;&gt; See I didn't\n\n344\n00:18:29.090 --> 00:18:30.430\nthink that that would happen.\n\n345\n00:18:30.430 --> 00:18:33.850\nI would be like it's gonna say Justin,\nand it didn't.\n\n346\n00:18:33.850 --> 00:18:35.060\n&gt;&gt; It did not and\n\n347\n00:18:35.060 --> 00:18:39.580\nthat's how tuples work to some extent,\nor tuples.\n\n348\n00:18:39.580 --> 00:18:43.580\nThere's a lot more to them but\nwe'll have to save that for a deep dive.\n\n349\n00:18:43.580 --> 00:18:44.600\nReally where are we going to?\n\n350\n00:18:44.600 --> 00:18:48.318\nIt's a logical construction that is not\nchanging that we don't have to worry\n\n351\n00:18:48.318 --> 00:18:49.298\nabout, all right?\n\n352\n00:18:49.298 --> 00:18:54.220\nNow, along those same lines,\nwe've kind of already seen this.\n\n353\n00:18:54.220 --> 00:18:59.886\nLet's say we have favorite_numbers,\nnot number.\n\n354\n00:18:59.886 --> 00:19:04.546\nLeft-hand square bracket,\nwell, I like 2, 3, 5,\n\n355\n00:19:04.546 --> 00:19:08.830\n7 11, and yeah those are all\nprime numbers, so those are fun.\n\n356\n00:19:08.830 --> 00:19:12.550\nAnd then well that worked\nwell what's its type?\n\n357\n00:19:12.550 --> 00:19:18.890\nWe actually saw this in a previous\nepisode, favorite_numbers.\n\n358\n00:19:18.890 --> 00:19:22.691\nYou've gotta spell numbers rights,\nnumbers, it's a list all right?\n\n359\n00:19:22.691 --> 00:19:25.579\nNow in Python a list can be\na collection of anything.\n\n360\n00:19:26.640 --> 00:19:30.600\nMy recommendation, and\nwe'll try to keep this uniform,\n\n361\n00:19:30.600 --> 00:19:35.680\nnotice how the tuple has a string and\na number and two booleans.\n\n362\n00:19:35.680 --> 00:19:37.610\nNotice how I only put numbers in the list?\n\n363\n00:19:38.610 --> 00:19:44.440\nWell a tuple is a way of grouping these\ndata types to mean something else.\n\n364\n00:19:44.440 --> 00:19:48.971\nA list is a collection of anything, right,\n\n365\n00:19:48.971 --> 00:19:52.407\nI could say favorite_numbers.\n\n366\n00:19:52.407 --> 00:19:57.609\nI'm gonna redefine this,\nI can say 2, 3, True,\n\n367\n00:19:57.609 --> 00:20:02.458\nFalse, tuna, chi I don't know, gorgonzola,\n\n368\n00:20:02.458 --> 00:20:06.450\nI'm not gonna, cheddar, like that.\n\n369\n00:20:06.450 --> 00:20:12.590\nAnd then, well, I could actually\nput another list of 2, 3 like that.\n\n370\n00:20:12.590 --> 00:20:14.550\nNow I don't expect you to know this,\n\n371\n00:20:14.550 --> 00:20:18.500\nthat I'm showing you this as\na counter example of don't do this.\n\n372\n00:20:18.500 --> 00:20:21.430\nIf we can actually look behind\nmy head here real quick.\n\n373\n00:20:21.430 --> 00:20:25.070\nI can do this, Python will let me do this,\nI now have numbers, boolean strings,\n\n374\n00:20:25.070 --> 00:20:26.919\nand lists inside of this outer list.\n\n375\n00:20:28.770 --> 00:20:31.524\nI will try my best to\nnever do this ever again.\n\n376\n00:20:31.524 --> 00:20:36.670\nThe reason being is if I\ntype type(favorite_numbers).\n\n377\n00:20:38.180 --> 00:20:43.747\nLike so, it still just says list, it\ndoesn't tell you the type hasn't changed,\n\n378\n00:20:43.747 --> 00:20:46.990\nthe outside type, it is still a list.\n\n379\n00:20:46.990 --> 00:20:52.291\nBut the problem is, is numbers\nbehave differently than booleans,\n\n380\n00:20:52.291 --> 00:20:55.546\nwhich behave differently than strings,\n\n381\n00:20:55.546 --> 00:20:59.360\nwhich behave differently than,\nwell, lists.\n\n382\n00:20:59.360 --> 00:21:03.485\nAnd now your program's become\nvery hard to reason about,\n\n383\n00:21:03.485 --> 00:21:06.780\nbecause you have kind of\nthis mixing of stuff.\n\n384\n00:21:07.800 --> 00:21:13.934\nReally what we should have is fairly\nuniform information inside of a list.\n\n385\n00:21:13.934 --> 00:21:18.397\nBecause unlike a tuple a list is\nchangeable, it will be changed but\n\n386\n00:21:18.397 --> 00:21:21.040\nit is still a grouping of information.\n\n387\n00:21:21.040 --> 00:21:26.220\nIt is all the favorite numbers, they\nshould only be of one particular thing,\n\n388\n00:21:26.220 --> 00:21:28.420\nfull disclosure, that's my opinion.\n\n389\n00:21:28.420 --> 00:21:31.700\nBut I've found so many people\nhave difficulties if they mix and\n\n390\n00:21:31.700 --> 00:21:34.960\nmatch inside of a list.\n&gt;&gt; So keep your numbers as numbers.\n\n391\n00:21:35.990 --> 00:21:42.980\nYou can do text, but all of the entries\nwithin the list should be text.\n\n392\n00:21:42.980 --> 00:21:47.678\nAnd if you wanna keep, so yeah, right?\n&gt;&gt; Yep, so if we had cheddar,\n\n393\n00:21:47.678 --> 00:21:55.600\namerican and, that's not how you spell\nbleu, bleu, right, these are all cheeses.\n\n394\n00:21:55.600 --> 00:22:01.650\nThey're all strings inside of the list, so\nI know how to predictably use the list.\n\n395\n00:22:01.650 --> 00:22:03.290\nBecause everything in\nthe list is a string.\n\n396\n00:22:03.290 --> 00:22:07.820\nIf I'd look at type though of cheeses,\nit's still just a list.\n\n397\n00:22:07.820 --> 00:22:10.780\nIt's a list of something,\nwhich is just arbitrarily\n\n398\n00:22:10.780 --> 00:22:12.556\na collection of a bunch of stuff.\n&gt;&gt; And\n\n399\n00:22:12.556 --> 00:22:15.940\nthen you would have your\nnumbers as a separate list, and\n\n400\n00:22:15.940 --> 00:22:20.476\nyour cheeses as a separate list, and\nyour booleans is a group of booleans,\n\n401\n00:22:20.476 --> 00:22:22.885\nbut they're all booleans.\n&gt;&gt; Yep, so\n\n402\n00:22:22.885 --> 00:22:25.930\nthat's a strong opinion that I have.\n\n403\n00:22:25.930 --> 00:22:30.480\nIt will make your life a little bit easier\nif you kinda follow these guidelines.\n\n404\n00:22:30.480 --> 00:22:33.780\nThere are times where this will\nnot necessarily be obeyed, but\n\n405\n00:22:33.780 --> 00:22:34.760\nthat's all right.\n\n406\n00:22:34.760 --> 00:22:38.360\nNow, finally is the dictionary, all right?\n\n407\n00:22:38.360 --> 00:22:43.270\nSo if we come back and\nwe look at person, there's Vonne, right?\n\n408\n00:22:43.270 --> 00:22:48.420\nSo that makes sense, but,\nOkay, that's the name.\n\n409\n00:22:48.420 --> 00:22:49.380\nWhat is that 7 again?\n\n410\n00:22:49.380 --> 00:22:51.440\nI totally forgot what that 7 is.\n\n411\n00:22:52.450 --> 00:22:54.400\nI can't remember, save my life.\n\n412\n00:22:54.400 --> 00:22:55.630\nWhat does that 7 mean?\n\n413\n00:22:55.630 --> 00:22:57.790\nTrue, False,\nI don't remember those either.\n\n414\n00:22:57.790 --> 00:23:02.770\nSo tuples are nice because they maintain\norder, they're immutable, right?\n\n415\n00:23:02.770 --> 00:23:04.839\nThey're non-changeable,\nthat's what immutable means.\n\n416\n00:23:06.760 --> 00:23:09.100\nBut I have to remember\nwhat the order means, so\n\n417\n00:23:09.100 --> 00:23:12.290\nthere's kind of a trade off there.\n&gt;&gt; It's kinda like when you've gone\n\n418\n00:23:12.290 --> 00:23:16.110\ndown an Excel worksheet and you don't\nknow what the headers are anymore.\n\n419\n00:23:16.110 --> 00:23:20.940\nAnd it says something like Taylor Austin,\nwait, which is the first name?\n\n420\n00:23:20.940 --> 00:23:23.370\nBecause they both could be the first name,\n\n421\n00:23:23.370 --> 00:23:26.520\nso yeah.\n&gt;&gt; So let's look at another way to do\n\n422\n00:23:26.520 --> 00:23:31.675\na person, and I'll say person2, which is\ntotally okay as far as variable naming.\n\n423\n00:23:31.675 --> 00:23:36.850\nI'd probably not use this in anything\nmeaningful, but it works for our example.\n\n424\n00:23:36.850 --> 00:23:40.570\nAnd then a curly brace,\nleft-hand curly brace.\n\n425\n00:23:40.570 --> 00:23:46.526\nAnd we're gonna say \"name\": \"Vonne\",\n\n426\n00:23:46.526 --> 00:23:53.100\nand then we're gonna,\nsee notice that comma?\n\n427\n00:23:53.100 --> 00:23:56.694\nI'm gonna zoom in here real quick.\n\n428\n00:23:56.694 --> 00:24:02.820\nThen \"favorite_number\":\n\n429\n00:24:02.820 --> 00:24:07.643\n: 7, \"likes_cheese\" : and\n\n430\n00:24:07.643 --> 00:24:11.920\nthen now I have to zoom out or\nI guess I could just move over.\n\n431\n00:24:11.920 --> 00:24:15.742\n\"like_cheese\": True,\n\n432\n00:24:15.742 --> 00:24:20.042\n\"likes_pickles\": False,\n\n433\n00:24:20.042 --> 00:24:24.658\nno trailing comma, curly brace,\n\n434\n00:24:24.658 --> 00:24:29.740\nand I'm gonna hit Enter, right?\n\n435\n00:24:29.740 --> 00:24:32.330\nNow there's a lot to that,\nthere's other ways to create dictionaries.\n\n436\n00:24:32.330 --> 00:24:34.640\nBut I've technically created a dictionary.\n\n437\n00:24:34.640 --> 00:24:35.410\nWhat is the dictionary?\n\n438\n00:24:35.410 --> 00:24:42.300\nWell let's look at person2, and\nthere we go, let's see here.\n\n439\n00:24:42.300 --> 00:24:45.920\nPerson2, nope that's wrong.\n\n440\n00:24:45.920 --> 00:24:47.730\nLet me clear this out.\n\n441\n00:24:47.730 --> 00:24:50.070\nThere we go, all right,\nso what does it say?\n\n442\n00:24:50.070 --> 00:24:53.930\nIt says, well the name is Vonne,\n\n443\n00:24:53.930 --> 00:25:00.270\nthe favorite number is 7,\nlikes cheese is true.\n\n444\n00:25:00.270 --> 00:25:02.598\nSo if you were to think of this\nkind of like a book dictionary,\n\n445\n00:25:02.598 --> 00:25:08.240\nyou go favorite number 7, name\n\n446\n00:25:08.240 --> 00:25:12.360\nVonne, so\nyou look up what's called the key.\n\n447\n00:25:13.810 --> 00:25:18.940\nAnd that's the respective value or\nin a traditional dictionary sense,\n\n448\n00:25:18.940 --> 00:25:21.480\nthe word and the definition.\n\n449\n00:25:21.480 --> 00:25:22.710\nSo what is the name?\n\n450\n00:25:22.710 --> 00:25:26.230\nIt's Vonne, does that person like cheese?\n\n451\n00:25:26.230 --> 00:25:27.600\nYes, all right?\n\n452\n00:25:28.810 --> 00:25:32.770\nThis and this actually encapsulate\nthe exact same information.\n\n453\n00:25:34.550 --> 00:25:39.390\nHowever, these have labels for\ntheir respective entries and\n\n454\n00:25:39.390 --> 00:25:40.794\nthese are just ordered.\n\n455\n00:25:42.580 --> 00:25:45.890\nNow the whole goal was to give you an\noverview to give you a C, but I can tell\n\n456\n00:25:45.890 --> 00:25:49.330\nyou by the look of Vonne's face that\nyou're like, I don't know why I would ever\n\n457\n00:25:49.330 --> 00:25:53.440\nuse dictionaries, that's kind of weird.\n&gt;&gt; It's a little, it's kind of,\n\n458\n00:25:53.440 --> 00:25:54.810\nI don't know.\n\n459\n00:25:54.810 --> 00:26:00.730\nThere's a lot going on in there and\nI wasn't expecting it to where you have to\n\n460\n00:26:00.730 --> 00:26:04.890\nlist the term or type in the term and\nthen give it its value.\n\n461\n00:26:04.890 --> 00:26:07.910\nYou're putting in,\nI thought it had a little bit more\n\n462\n00:26:09.490 --> 00:26:14.850\ninternal magic but I think I'm again,\nI have to remember this is a data type.\n\n463\n00:26:14.850 --> 00:26:20.040\nIt's not just like a functionality of\nthe language so that's where I'm stuck in.\n\n464\n00:26:20.040 --> 00:26:22.162\nBut yeah,\nI'm still like why would you do this?\n\n465\n00:26:22.162 --> 00:26:23.650\n&gt;&gt; And dictionary is you're like, man,\n\n466\n00:26:23.650 --> 00:26:25.770\nI would never use this, those are bad.\n\n467\n00:26:25.770 --> 00:26:29.585\nAnd then once you learn kinda\nwhere they're applied and\n\n468\n00:26:29.585 --> 00:26:33.408\nwhere they're used you go,\nI see how those are used.\n\n469\n00:26:33.408 --> 00:26:36.830\nSo if you're feeling the same\nway as Vonne don't worry, right?\n\n470\n00:26:36.830 --> 00:26:39.200\nDictionaries, you're like\nthere's a lot going on.\n\n471\n00:26:40.250 --> 00:26:43.100\nWe'll see the dictionaries\ncontinue to crop up as we learn\n\n472\n00:26:43.100 --> 00:26:45.240\na little more about Python.\n\n473\n00:26:45.240 --> 00:26:48.740\nIf you so\nwant to indulge in learning a little more,\n\n474\n00:26:48.740 --> 00:26:51.900\nsometimes these are like hash maps.\n\n475\n00:26:51.900 --> 00:26:55.280\nThis is technically like a hash map.\n\n476\n00:26:55.280 --> 00:26:57.750\nIt's a little extra, right?\n\n477\n00:26:57.750 --> 00:27:00.060\nIf you're like, I don't wanna look\nthat up, that's totally okay.\n\n478\n00:27:00.060 --> 00:27:01.340\nWe're gonna stick with dictionaries and\n\n479\n00:27:01.340 --> 00:27:03.818\nfrom here on out that's\nall I will ever call them.\n\n480\n00:27:03.818 --> 00:27:06.600\nBut it'll just take little\nbit before those make sense\n\n481\n00:27:06.600 --> 00:27:08.020\nas we learn a little more.\n&gt;&gt; And\n\n482\n00:27:08.020 --> 00:27:10.150\njust one last question on\nthis particular example.\n\n483\n00:27:10.150 --> 00:27:12.280\nYou did person2,\nthat's a different variable, but\n\n484\n00:27:12.280 --> 00:27:14.670\nyou used the same information just as\n\n485\n00:27:14.670 --> 00:27:19.670\nan example of two different ways you\ncan basically do the same thing.\n\n486\n00:27:19.670 --> 00:27:24.240\nThat's the reason why you said person2.\n&gt;&gt; That is exactly why and\n\n487\n00:27:24.240 --> 00:27:28.480\nthis was to illustrate\nkind of this core idea.\n\n488\n00:27:28.480 --> 00:27:31.960\nThis is the exact same\nrepresentation of Vonne,\n\n489\n00:27:34.180 --> 00:27:38.210\npresented using different types or ways.\n\n490\n00:27:38.210 --> 00:27:42.840\nOne is a dictionary,\none is a tuple, by doing that,\n\n491\n00:27:42.840 --> 00:27:45.260\nwe kind of get this trade off, right?\n\n492\n00:27:45.260 --> 00:27:48.400\nWhen would I use a dictionary,\nwell if you need to do x, y, and\n\n493\n00:27:48.400 --> 00:27:51.260\nz, dictionary is a good\nway to represent Vonne.\n\n494\n00:27:51.260 --> 00:27:55.560\nWell, what about if I just need a name,\na number and likes cheese,\n\n495\n00:27:55.560 --> 00:27:59.700\nlikes pickles and I know that it's always\ngonna be and I don't, use a tuple.\n\n496\n00:27:59.700 --> 00:28:02.750\nAnd then we'll talk about those\ntrade-offs and when you would pick one\n\n497\n00:28:02.750 --> 00:28:05.370\nversus the other kinda as we move forward.\n&gt;&gt; And\n\n498\n00:28:05.370 --> 00:28:08.610\nthe dictionary is more of like\nyou're adding the labels in there.\n\n499\n00:28:08.610 --> 00:28:10.650\nThe other one you're not adding\nthe labels and that's where,\n\n500\n00:28:10.650 --> 00:28:16.080\nyou're getting more information,\nthe expanded version of the information\n\n501\n00:28:16.080 --> 00:28:19.730\nrather than just the condensed version.\n&gt;&gt; You're exactly correct,\n\n502\n00:28:19.730 --> 00:28:24.280\nand, ultimately, interestingly enough, as\nwe learn more we'll find out that we can\n\n503\n00:28:24.280 --> 00:28:27.680\nactually take one and\nkind of go back and forth to the other.\n\n504\n00:28:27.680 --> 00:28:30.580\nSo you're not stuck if\nyou pick the wrong one.\n\n505\n00:28:30.580 --> 00:28:34.232\nBut Vonne, I'm looking at the clock,\nwe're definitely out of time.\n\n506\n00:28:34.232 --> 00:28:36.739\nWe're gonna continue looking\na little more in depth for\n\n507\n00:28:36.739 --> 00:28:39.726\neach of these data types as we move\nforward through our fundamental\n\n508\n00:28:39.726 --> 00:28:40.611\nseries.\n&gt;&gt; Yeah,\n\n509\n00:28:40.611 --> 00:28:45.270\nI'm gonna take a bite of my own medicine,\nor a scoop of my own medicine.\n\n510\n00:28:45.270 --> 00:28:49.850\nA spoonful of my own medicine, and\nsay you know what, you got it.\n\n511\n00:28:49.850 --> 00:28:51.290\nStop, move on, and\n\n512\n00:28:51.290 --> 00:28:54.750\nlet's just keep on going down,\nall of the things in our series.\n\n513\n00:28:54.750 --> 00:28:56.680\nSo thank you for that information.\n\n514\n00:28:56.680 --> 00:28:59.582\nThank you all for sticking around, and\nwe're gonna come back at you with more.\n\n515\n00:28:59.582 --> 00:29:01.110\nFor now, we're gonna wrap this one up.\n\n516\n00:29:01.110 --> 00:29:03.860\nSigning off for DevProTV,\nI've been your host Vonne Smith.\n\n517\n00:29:03.860 --> 00:29:04.580\n&gt;&gt; And I'm Justin Dennison.\n\n518\n00:29:04.580 --> 00:29:05.909\n&gt;&gt; And we'll see you soon.\n\n519\n00:29:05.909 --> 00:29:12.015\n[MUSIC]\n\n",
          "vimeoId": "266750382"
        },
        {
          "description": "In this episode, Justin and Vonne dive further into using number types for data. Justin discusses the similarities and differences between integers and floats.",
          "length": "1286",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-2-1-basic_data_types_numbers-042418-PGM.00_26_54_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-2-1-basic_data_types_numbers-042418-PGM.00_26_54_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-2-1-basic_data_types_numbers-042418-PGM.00_26_54_29.Still001-sm.jpg",
          "title": "Basic Data Types: Numbers",
          "transcript": "WEBVTT\n\n1\n00:00:00.118 --> 00:00:10.118\n[MUSIC].\n\n2\n00:00:13.197 --> 00:00:17.190\nHello everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.190 --> 00:00:18.360\nI'm your host, Vonne Smith, and\n\n4\n00:00:18.360 --> 00:00:21.100\nwe're moving through our\nprogramming fundamentals series.\n\n5\n00:00:21.100 --> 00:00:24.900\nAnd we are gonna look at data types\na little more, and specifically numbers.\n\n6\n00:00:24.900 --> 00:00:27.413\nAnd here to help us is Mr.\nJustin Dennison, how are you?\n\n7\n00:00:27.413 --> 00:00:28.937\n&gt;&gt; I'm doing fantastic,\nVonne, how are you today?\n\n8\n00:00:28.937 --> 00:00:32.453\n&gt;&gt; I'm doing pretty good,\ndata types, numbers,\n\n9\n00:00:32.453 --> 00:00:35.294\nthey're just numbers, right [LAUGH]?\n\n10\n00:00:35.294 --> 00:00:36.266\n&gt;&gt; One would think, but\n\n11\n00:00:36.266 --> 00:00:39.520\nI would like to make sure that we all\nknow like the behaviors of numbers.\n\n12\n00:00:39.520 --> 00:00:41.830\nBut there are some nuanced differences,\nall right.\n\n13\n00:00:41.830 --> 00:00:46.570\nSo numbers in particular in Python and\nsome other programming languages\n\n14\n00:00:46.570 --> 00:00:48.550\nare typically subdivided\nby the types of numbers.\n\n15\n00:00:48.550 --> 00:00:52.385\nThis has to do with how they're\nrepresented on the respective hardware.\n\n16\n00:00:52.385 --> 00:00:55.031\nIntegers, whole numbers,\nright, positive and\n\n17\n00:00:55.031 --> 00:00:58.230\nnegative whole numbers\nare represented one way.\n\n18\n00:00:58.230 --> 00:01:02.550\nWhereas floating point or decimal numbers,\nhave to be careful there,\n\n19\n00:01:02.550 --> 00:01:04.050\nthey have a decimal place.\n\n20\n00:01:04.050 --> 00:01:07.950\nFloating point numbers\nare represented a different way.\n\n21\n00:01:07.950 --> 00:01:11.700\nThe respective behaviors are the same,\nthough, right?\n\n22\n00:01:11.700 --> 00:01:15.980\nThey have all these operations\nthat you can use with numbers.\n\n23\n00:01:15.980 --> 00:01:19.364\nAnd, well,\nyou kinda get numbers back, right,\n\n24\n00:01:19.364 --> 00:01:23.808\nwhen I say kinda, you get numbers back,\nthere's no kinda to it.\n\n25\n00:01:23.808 --> 00:01:28.296\nSo with that said, we have to be careful\nbecause, well, this is an integer and\n\n26\n00:01:28.296 --> 00:01:31.504\nthen it actually ends up being\na floating point number.\n\n27\n00:01:31.504 --> 00:01:33.645\nOr it's a floating point number and\nends up being an integer.\n\n28\n00:01:33.645 --> 00:01:39.681\nThere's some, weirdness we need to be\naware of when we're using actual numbers.\n\n29\n00:01:39.681 --> 00:01:44.661\nAll right, so integers, whole numbers,\nfloats, floating point numbers,\n\n30\n00:01:44.661 --> 00:01:50.420\nthey have a decimal place, they have\na fractional value, which could be zero.\n\n31\n00:01:50.420 --> 00:01:52.698\nBut let's go ahead and\ntake a look at the screen.\n\n32\n00:01:52.698 --> 00:01:55.080\nWe're still gonna be playing\naround in the REPL a little bit.\n\n33\n00:01:55.080 --> 00:01:59.663\nThis is just a quick overview of all\nof the operations that we can use.\n\n34\n00:01:59.663 --> 00:02:04.560\nWell, a large amount of the operations\nthat we can use with respective numbers.\n\n35\n00:02:04.560 --> 00:02:07.616\nAll right, so\nI'm gonna hop inside of the Python 3 REPL.\n\n36\n00:02:07.616 --> 00:02:11.498\nI'm gonna clear this screen out, and\n\n37\n00:02:11.498 --> 00:02:16.954\nI'm gonna say,\nhow about first = 1, second = 3,\n\n38\n00:02:16.954 --> 00:02:20.985\nyeah, not 2, just go with me on that.\n\n39\n00:02:20.985 --> 00:02:26.595\nAnd then third = 4.7, all right, so\nwe have two integers and a float.\n\n40\n00:02:26.595 --> 00:02:31.291\nAnd we've seen this in previous episodes,\nif we wanted to check that,\n\n41\n00:02:31.291 --> 00:02:34.990\nwe could do the following,\nand there we go, all right?\n\n42\n00:02:34.990 --> 00:02:38.570\nNow, let's take a look, and\nwe've seen this a little bit,\n\n43\n00:02:38.570 --> 00:02:43.580\nand we can already do kind of\nnumeric operations, and we get a 4.\n\n44\n00:02:43.580 --> 00:02:47.322\nWell, what is the type of first + second?\n\n45\n00:02:47.322 --> 00:02:51.080\nIt is an integer, okay, all right?\n\n46\n00:02:51.080 --> 00:02:53.360\nWell, can we do first + third?\n\n47\n00:02:54.890 --> 00:02:59.501\nNot if you put a random parenthesis\nthere that doesn't belong, 5.7.\n\n48\n00:02:59.501 --> 00:03:04.930\nOkay, so\nwhat is the type of first + third?\n\n49\n00:03:05.970 --> 00:03:10.359\nWell, it's actually a float, and\nthis is where things get a little iffy.\n\n50\n00:03:10.359 --> 00:03:15.237\nIf I have an integer and a float,\nI'm going to get a float through addition,\n\n51\n00:03:15.237 --> 00:03:17.170\nthat's what I'm gonna get.\n\n52\n00:03:17.170 --> 00:03:22.427\nInteger plus an integer is an integer,\na float plus a float is a float,\n\n53\n00:03:22.427 --> 00:03:25.468\nfloat plus an integer is a float as well.\n\n54\n00:03:25.468 --> 00:03:30.037\nUltimately, it usually doesn't\nmatter whatsoever, right?\n\n55\n00:03:30.037 --> 00:03:33.740\nYou're just like, I want a result, I'm\ndoing some kind of mathematical operation.\n\n56\n00:03:33.740 --> 00:03:40.158\nSometimes, though, that last little\ndecimal place can cause some hiccups.\n\n57\n00:03:40.158 --> 00:03:44.135\nAll right, so you have to remember,\nif you have integers and floats and\n\n58\n00:03:44.135 --> 00:03:48.808\nyou're operation with addition, you're\ngonna get a floating point as a result.\n\n59\n00:03:48.808 --> 00:03:53.508\nI'm gonna Ctrl+L and get back up here,\nI still have first, second, and third.\n\n60\n00:03:53.508 --> 00:03:57.190\nWell can I do first- third, yep.\n\n61\n00:03:57.190 --> 00:04:00.698\nCan I do first- second, I sure can.\n\n62\n00:04:00.698 --> 00:04:04.401\nSame rules apply as they do in addition.\n\n63\n00:04:04.401 --> 00:04:08.250\nSo what else can I do?\n\n64\n00:04:08.250 --> 00:04:13.120\nWell, I can do times second,\nbut what is the type of that?\n\n65\n00:04:13.120 --> 00:04:17.099\nBecause it kinda makes sense\nthat minus works like addition.\n\n66\n00:04:17.099 --> 00:04:21.740\nSo first * second, well, it's an integer.\n\n67\n00:04:21.740 --> 00:04:27.143\nWhat about first * third?\n\n68\n00:04:27.143 --> 00:04:30.710\nWell, if you add that random\nparenthesis there, then it breaks.\n\n69\n00:04:30.710 --> 00:04:33.582\nBut that's first * third,\nand what was first?\n\n70\n00:04:33.582 --> 00:04:37.390\nWell first was 1, so 1 times 4.7 is that.\n\n71\n00:04:37.390 --> 00:04:42.420\nAnd well what's the type(first * third),\nwell, it's a float again.\n\n72\n00:04:42.420 --> 00:04:47.644\nSo if we have a float in there,\nsomewhere we're gonna get a float result.\n\n73\n00:04:47.644 --> 00:04:49.604\nWhat about divide, and\n\n74\n00:04:49.604 --> 00:04:55.200\nthis is where the first whoopsy\ndaisy kind of starts coming in here.\n\n75\n00:04:55.200 --> 00:04:59.038\nAll right, so let's look at first,\nlet's look at second.\n\n76\n00:04:59.038 --> 00:05:02.939\nIf we do first / second, hm,\n\n77\n00:05:02.939 --> 00:05:07.160\nI wonder what we're gonna get.\n\n78\n00:05:09.226 --> 00:05:11.446\nWell, that actually makes sense.\n\n79\n00:05:11.446 --> 00:05:15.334\nI'm gonna take a moment and kind of\ntake a quick detour here, in Python 2,\n\n80\n00:05:15.334 --> 00:05:16.960\nthis is a different behavior.\n\n81\n00:05:16.960 --> 00:05:22.875\nYou will actually get 0 because it will\ndo what's called integer division.\n\n82\n00:05:22.875 --> 00:05:29.200\n1 divided by 3, it's gonna say,\ndoes 3 go into 1 a whole number of times?\n\n83\n00:05:29.200 --> 00:05:32.910\nAnd it says, no there are 0 3s in 1.\n\n84\n00:05:32.910 --> 00:05:35.687\nSo you'll get a 0 instead of,\nwell, what was that type?\n\n85\n00:05:39.100 --> 00:05:42.524\nThat's odd because division,\nI have an integer and an integer.\n\n86\n00:05:42.524 --> 00:05:44.780\nBut I get a float as a respective result.\n\n87\n00:05:44.780 --> 00:05:48.656\n&gt;&gt; So in Python 2,\nit's like they are holding tried and true,\n\n88\n00:05:48.656 --> 00:05:53.530\nintegers are integers, and we are never\ngonna get anything but an integer.\n\n89\n00:05:53.530 --> 00:05:58.210\nAnd so help us cod,\n[LAUGH] that's what we're going to do.\n\n90\n00:05:58.210 --> 00:06:00.031\n&gt;&gt; Yep, so it was integer division.\n\n91\n00:06:00.031 --> 00:06:02.740\nThat's actually something they\npicked up from previous languages.\n\n92\n00:06:02.740 --> 00:06:04.382\nThis happens in some other\nprogramming languages.\n\n93\n00:06:04.382 --> 00:06:09.470\nIf I have two integers and I operate\nwith them, then I get an integer back.\n\n94\n00:06:09.470 --> 00:06:11.352\n&gt;&gt; But that's not right.\n\n95\n00:06:11.352 --> 00:06:12.092\n&gt;&gt; [LAUGH]\n&gt;&gt; I mean,\n\n96\n00:06:12.092 --> 00:06:14.190\nthat kinda breaks the rules of math,\nright?\n\n97\n00:06:14.190 --> 00:06:17.098\n&gt;&gt; Well it breaks the rules of math for\nme and you.\n\n98\n00:06:17.098 --> 00:06:22.248\nBut if you say I have integers and\nintegers, technically,\n\n99\n00:06:22.248 --> 00:06:26.820\nwhy would I get a float if I\ntake these two data types?\n\n100\n00:06:26.820 --> 00:06:33.320\nI have this implied change of data types\nthat just kind of appears out of nowhere.\n\n101\n00:06:33.320 --> 00:06:35.137\nI can kind of understand an integer and\na float.\n\n102\n00:06:35.137 --> 00:06:39.070\nYou're like, I gotta get a float, because\nI may have floating point numbers now.\n\n103\n00:06:39.070 --> 00:06:42.724\nBut if I have an integer and an integer\nand it goes, well I'm just gonna go over\n\n104\n00:06:42.724 --> 00:06:46.200\nhere and pick a random number to\nrepresent that, then it gets weird.\n\n105\n00:06:46.200 --> 00:06:51.165\nBut by and large, when we learned math\nin school, this is how we'd learn it.\n\n106\n00:06:51.165 --> 00:06:57.150\nEven if we write 1 with no decimal point,\ndivided by 3, we'll go, that's 0.3333.\n\n107\n00:06:57.150 --> 00:07:02.062\nIn computers, though, those are actually\ntwo different types of numbers.\n\n108\n00:07:02.062 --> 00:07:05.650\nTypically, some programming languages\nkind of muddy that water even more, so\n\n109\n00:07:05.650 --> 00:07:07.016\njust be careful there.\n\n110\n00:07:07.016 --> 00:07:11.608\n&gt;&gt; I keep forgetting that computers\ndon't think like us, and so\n\n111\n00:07:11.608 --> 00:07:14.715\nwe have to conform to\nthem in how we write.\n\n112\n00:07:14.715 --> 00:07:17.847\nBut you said two to three, so obviously,\n\n113\n00:07:17.847 --> 00:07:21.170\nthis was causing problems\nin how it worked.\n\n114\n00:07:21.170 --> 00:07:25.613\nSo Python 3, within its language,\ndecided to say,\n\n115\n00:07:25.613 --> 00:07:30.473\nyou can go ahead and\nchange yourself in these situations.\n\n116\n00:07:30.473 --> 00:07:36.720\nFrom an integer to a float because\nwe're going to obey the rules of math.\n\n117\n00:07:36.720 --> 00:07:38.980\n&gt;&gt; Yeah,\nwe're gonna obey how people think,\n\n118\n00:07:38.980 --> 00:07:41.550\nwe want this to be easy to reason about.\n\n119\n00:07:41.550 --> 00:07:43.980\nTwo numbers divided,\nI could get a floating point number.\n\n120\n00:07:43.980 --> 00:07:47.044\nNow something that I do wanna show,\nthough.\n\n121\n00:07:47.044 --> 00:07:50.680\nIs if I go second / second, so\na number divided by itself,\n\n122\n00:07:50.680 --> 00:07:53.140\nnotice it's still int divided by int.\n\n123\n00:07:53.140 --> 00:07:57.414\nBut I get 1.0,\nwhich is a floating point number,\n\n124\n00:07:57.414 --> 00:08:00.436\neven though it is an exact division.\n\n125\n00:08:00.436 --> 00:08:03.208\nThat's the tricky part.\n\n126\n00:08:03.208 --> 00:08:05.405\nHowever, because this behavior changed and\n\n127\n00:08:05.405 --> 00:08:08.354\nthey needed the ability for\nsome backwards compatibility,\n\n128\n00:08:08.354 --> 00:08:12.249\nthere's a secondary operator that allows\nyou to use the old style in Python 3.\n\n129\n00:08:12.249 --> 00:08:14.170\nAll right?\n\n130\n00:08:14.170 --> 00:08:20.500\nIf I want just the whole\nnumber amount of times, right?\n\n131\n00:08:20.500 --> 00:08:24.162\nThat it goes in, so if I say,\n\n132\n00:08:24.162 --> 00:08:28.610\nfirst // second, two slashes.\n\n133\n00:08:28.610 --> 00:08:30.550\nAnd actually get 0, which is an integer.\n\n134\n00:08:30.550 --> 00:08:31.431\nI get integer division.\n\n135\n00:08:31.431 --> 00:08:38.500\nWith the now slash, not the old one, is\njust more or less floating point division.\n\n136\n00:08:38.500 --> 00:08:42.190\nI have two different division operators\nbased on the respective data type.\n\n137\n00:08:43.330 --> 00:08:48.460\n&gt;&gt; I can see why you might want\nthis to be like the old way.\n\n138\n00:08:48.460 --> 00:08:53.410\nAnd this is obviously a big change in the\nsyntax from two to three is that you now\n\n139\n00:08:53.410 --> 00:08:56.340\nhave this slash slash vs single slash.\n\n140\n00:08:56.340 --> 00:09:02.110\nAnd there are going to be cases where I\ndon't want you to change to a float or\n\n141\n00:09:02.110 --> 00:09:02.700\ndecimal.\n\n142\n00:09:02.700 --> 00:09:06.240\nIt's almost like round up to the nearest\nwhole number or something to that effect.\n\n143\n00:09:06.240 --> 00:09:08.370\nExactly, give me the whole\nnumber representation.\n\n144\n00:09:08.370 --> 00:09:12.420\nAnd this actually causes you to\nhave to think about this moreྲ.\n\n145\n00:09:12.420 --> 00:09:15.770\nBut what it also means is,\nyou have to think about it more so\n\n146\n00:09:15.770 --> 00:09:19.800\nyou have to reason about it, so you\nhave to make a decision, don't / or //.\n\n147\n00:09:19.800 --> 00:09:21.340\nSo you just have to be careful there.\n\n148\n00:09:21.340 --> 00:09:22.425\n&gt;&gt; We have to be humans again.\n\n149\n00:09:22.425 --> 00:09:23.290\n[LAUGH]\n&gt;&gt; We have to be.\n\n150\n00:09:23.290 --> 00:09:25.340\nI know, it's hard, it's hard.\n\n151\n00:09:25.340 --> 00:09:29.880\nBut that's one of the weird nuances\nthat kinda break as we first get there.\n\n152\n00:09:29.880 --> 00:09:32.300\nNow these are not the only things\nthat we can do with numbers.\n\n153\n00:09:32.300 --> 00:09:35.160\nThere's a few other things\nthat are gonna crop up.\n\n154\n00:09:35.160 --> 00:09:37.170\nBecause I'm already with division.\n\n155\n00:09:37.170 --> 00:09:41.280\nI'm actually gonna do something\nelse called the modulus operator or\n\n156\n00:09:41.280 --> 00:09:42.690\nthe modular operator.\n\n157\n00:09:42.690 --> 00:09:49.610\nYou've heard it both ways, or sometimes\nit's called mod, people shorten it.\n\n158\n00:09:49.610 --> 00:09:56.928\nAnd what that means is, well let's say\nI have, I'm gonna do this, second is 3.\n\n159\n00:09:56.928 --> 00:10:00.835\nI wanna abandon these variables just for\na moment, just to show some numbers.\n\n160\n00:10:00.835 --> 00:10:05.826\nSo, I'm gonna say 3 % 3.\n\n161\n00:10:05.826 --> 00:10:08.850\nThis percent sign is the modulo operator.\n\n162\n00:10:09.890 --> 00:10:12.150\nIf I hit Enter, I get Zebra.\n\n163\n00:10:12.150 --> 00:10:15.285\nWhat is the type?\n\n164\n00:10:15.285 --> 00:10:17.660\n3 mod 3.\nWhat's an integer?\n\n165\n00:10:17.660 --> 00:10:18.364\nOkay, keep that in mind.\n\n166\n00:10:18.364 --> 00:10:22.630\nI'm gonna show you a few examples before\nwe talk about what it actually does.\n\n167\n00:10:22.630 --> 00:10:25.170\nAll right, so 3 or excuse me.\n\n168\n00:10:25.170 --> 00:10:29.740\n4 mod 3 is 1.\n\n169\n00:10:29.740 --> 00:10:30.850\nWhat is the type?\n\n170\n00:10:30.850 --> 00:10:31.720\n4 mod 3.\n\n171\n00:10:32.930 --> 00:10:33.520\nStill an integer.\n\n172\n00:10:34.750 --> 00:10:37.960\n5 mod 3 is 2.\n\n173\n00:10:37.960 --> 00:10:41.700\nNotice there's no .0, so I'm pretty\ncertain that's an integer as well.\n\n174\n00:10:41.700 --> 00:10:43.989\nWhat about 6 mod 3?\n\n175\n00:10:43.989 --> 00:10:46.000\nWe're back to 0.\n\n176\n00:10:47.650 --> 00:10:49.150\nIt's kinda odd, right?\n\n177\n00:10:49.150 --> 00:10:52.477\nHowever, whoa, whoa, whoa, whoa, Justin.\n\n178\n00:10:52.477 --> 00:10:55.900\n3 divided by 3 divides evenly.\n\n179\n00:10:55.900 --> 00:10:58.296\nThere is 0 remainder.\n\n180\n00:10:58.296 --> 00:11:02.261\n4 divided by 3, 3 goes into 4 one time but\nthere's one left over.\n\n181\n00:11:02.261 --> 00:11:04.280\nWe have 1 remainder.\n\n182\n00:11:04.280 --> 00:11:07.660\n5 divided by 3, goes in one time.\n\n183\n00:11:07.660 --> 00:11:09.400\nBut there's actually two things left over.\n\n184\n00:11:09.400 --> 00:11:14.590\nBut 3 goes into 6,\ntwo times evenly with zero remainder.\n\n185\n00:11:14.590 --> 00:11:19.060\nSo, division will give you how\nmany times you can divide.\n\n186\n00:11:19.060 --> 00:11:23.960\nModulus gives you what is the amount\nof things left over that did not divide\n\n187\n00:11:23.960 --> 00:11:25.090\nevenly.\n\n188\n00:11:25.090 --> 00:11:26.090\nAnd if you're like wait a minute,\n\n189\n00:11:26.090 --> 00:11:29.280\nthis sounds familiar, you probably\nlearned this in elementary school.\n\n190\n00:11:29.280 --> 00:11:32.060\nAnd then we said forget about it,\nit's not useful.\n\n191\n00:11:32.060 --> 00:11:32.890\nI'm telling you here,\n\n192\n00:11:32.890 --> 00:11:37.990\nthis ends up being very useful in\nprogramming a variety of things.\n\n193\n00:11:37.990 --> 00:11:41.663\n&gt;&gt; I was waiting because I know we\ntalked about this in another episode and\n\n194\n00:11:41.663 --> 00:11:43.666\nI was like, I forgot what this means.\n\n195\n00:11:43.666 --> 00:11:44.812\n&gt;&gt; [LAUGH]\n&gt;&gt; What, and\n\n196\n00:11:44.812 --> 00:11:47.900\nthen as soon as you started going\nthrough it, it's the remainder.\n\n197\n00:11:47.900 --> 00:11:53.680\nIt was that whole, you do your division\nand you do R 2, and that's the leftovers.\n\n198\n00:11:54.750 --> 00:11:56.450\nI got it back.\n\n199\n00:11:56.450 --> 00:11:59.252\nI've come back around full circle and\nI'm back at 0.\n\n200\n00:11:59.252 --> 00:12:00.050\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH]\n\n201\n00:12:00.050 --> 00:12:01.249\n&gt;&gt; So Modulo and\n\n202\n00:12:01.249 --> 00:12:04.195\ndivision kinda go hand in hand.\n\n203\n00:12:04.195 --> 00:12:08.060\nRight, they give you the two\nsides of the respective coin.\n\n204\n00:12:08.060 --> 00:12:12.600\nNow, okay, we can do division,\nadd, subtract, multiply, divide.\n\n205\n00:12:12.600 --> 00:12:13.940\nAnd Modulus.\n\n206\n00:12:13.940 --> 00:12:18.620\nBut we have a few other numeric\noperations that we can have.\n\n207\n00:12:20.180 --> 00:12:22.890\nNumber one, exponents, right?\n\n208\n00:12:22.890 --> 00:12:27.588\nSo let's clear this out,\nand I can say, well, first,\n\n209\n00:12:27.588 --> 00:12:30.940\nsecond and okay.\n\n210\n00:12:30.940 --> 00:12:36.730\nSo if I say second * second,\nthat's 3 times 3, which is 9.\n\n211\n00:12:36.730 --> 00:12:41.169\nThat's really just 3 to the second power,\nall right?\n\n212\n00:12:41.169 --> 00:12:47.430\nSo second ** 2.\n\n213\n00:12:47.430 --> 00:12:50.640\nIt's actually 9.\n\n214\n00:12:50.640 --> 00:12:52.629\nIf I do 3, that's 27.\n\n215\n00:12:52.629 --> 00:12:55.000\nSo that's raising it to a power.\n\n216\n00:12:55.000 --> 00:12:58.472\nPython actually provides you an operator\nthat does that already for you, so\n\n217\n00:12:58.472 --> 00:13:01.020\nyou don't have to go multiply,\nmultiply, multiply or\n\n218\n00:13:01.020 --> 00:13:02.933\nfigure out how to do all this other stuff.\n\n219\n00:13:02.933 --> 00:13:05.793\nIf I wanted 5 squared,\n\n220\n00:13:05.793 --> 00:13:10.660\nI would say 5 ** 2, then we get 25.\n\n221\n00:13:10.660 --> 00:13:13.560\nThat's handy, all right?\n\n222\n00:13:13.560 --> 00:13:17.933\nAnd then, well, there's a few other\nthings that we can do with numbers, and\n\n223\n00:13:17.933 --> 00:13:19.161\nbefore we do though.\n\n224\n00:13:19.161 --> 00:13:23.739\nAll right, I almost got ahead of myself,\nI'm showing you integers.\n\n225\n00:13:23.739 --> 00:13:25.961\nWhat's the type of 5 ** 2?\n\n226\n00:13:25.961 --> 00:13:27.418\nIt's an integer.\n\n227\n00:13:27.418 --> 00:13:33.395\nWhat is the type of\nthird which is 4.7 ** 2?\n\n228\n00:13:33.395 --> 00:13:34.776\nIt's a float.\n\n229\n00:13:34.776 --> 00:13:41.242\nSo third ** 2, is 22,09 but\na lot lot of decimal places there.\n\n230\n00:13:41.242 --> 00:13:43.679\nAnd that makes sense, right,\n\n231\n00:13:43.679 --> 00:13:49.040\nthe type is kind of determined by\nthe base right, what's in front.\n\n232\n00:13:50.140 --> 00:13:55.273\nBut along with that you can\neven do crazy things like,\n\n233\n00:13:55.273 --> 00:13:58.021\nwhat is second ** 1.2.\n\n234\n00:13:58.021 --> 00:14:01.270\nOoh, this is probably something\nyou don't do a whole lot of.\n\n235\n00:14:02.440 --> 00:14:05.350\nBut, you can do fractional powers.\n\n236\n00:14:06.450 --> 00:14:08.710\nAnd as you can see this is a float.\n\n237\n00:14:08.710 --> 00:14:12.120\nSo if I have a float in\neither one of those operands,\n\n238\n00:14:12.120 --> 00:14:16.650\nit's still, still good to go, okay?\n\n239\n00:14:16.650 --> 00:14:18.520\nSo it's still a float.\n\n240\n00:14:18.520 --> 00:14:22.717\nIf we have third ** 1.2.\n\n241\n00:14:22.717 --> 00:14:25.314\nIt's still a float, okay?\n\n242\n00:14:25.314 --> 00:14:27.995\nSo those are very particular use cases but\n\n243\n00:14:27.995 --> 00:14:32.430\nI just wanna get you to thinking\nabout the respective times.\n\n244\n00:14:32.430 --> 00:14:37.463\n&gt;&gt; Was that the same in Python 2,\nor is this a Python 3 upgrade?\n\n245\n00:14:37.463 --> 00:14:39.593\n&gt;&gt; This is still the same in Python 2.\n\n246\n00:14:39.593 --> 00:14:42.097\nI strongly recommend everybody\nstaying in Python 3, but\n\n247\n00:14:42.097 --> 00:14:45.364\nthere may be some times where you're\ngonna encounter some Python 2 code and\n\n248\n00:14:45.364 --> 00:14:47.660\nit's good to know about\nthese nuance differences.\n\n249\n00:14:47.660 --> 00:14:50.950\nPowers, so this is the power operator.\n\n250\n00:14:50.950 --> 00:14:54.540\nExactly the same thing, so all good to go.\n\n251\n00:14:54.540 --> 00:14:58.500\nSo remember, numbers have an int and\na float, int and a float.\n\n252\n00:14:58.500 --> 00:15:01.920\nDivision is the one where it\ngets a little iffy, right?\n\n253\n00:15:01.920 --> 00:15:06.090\nWe can do powers and\nthere's a few other things.\n\n254\n00:15:06.090 --> 00:15:09.680\nIf I'm not mistaken,\nthis should be available in your ABS.\n\n255\n00:15:09.680 --> 00:15:11.450\nNot anti lock brake systems.\n\n256\n00:15:11.450 --> 00:15:13.560\nTotally a different thing.\n\n257\n00:15:13.560 --> 00:15:17.406\nI can say ABS, the absolute value.\n\n258\n00:15:17.406 --> 00:15:22.634\nSo if I say abs(-3), it's 3.\n\n259\n00:15:22.634 --> 00:15:27.921\nabs(3), essentially just give\nme how far away from 0 it is.\n\n260\n00:15:27.921 --> 00:15:35.048\nAnd you'll notice that if I say abs(3) and\nfinish that, it's an int.\n\n261\n00:15:35.048 --> 00:15:39.750\nLet say abs(3.2), it's a float.\n\n262\n00:15:39.750 --> 00:15:45.480\nSo it's kinda dependent on\nthe respective input operator.\n\n263\n00:15:45.480 --> 00:15:52.090\nSo I have absolute value, power, division,\nmultiplication, modulus, add subtract.\n\n264\n00:15:52.090 --> 00:15:54.746\nAnd I do wanna show you this.\n\n265\n00:15:54.746 --> 00:15:55.998\nWe're kinda jumping ahead a little bit.\n\n266\n00:15:55.998 --> 00:16:01.073\nThere are some other things that you can\ndo in Python, but they're not available.\n\n267\n00:16:01.073 --> 00:16:07.135\nRight out of the box,\nlike square root, or sqrt.\n\n268\n00:16:07.135 --> 00:16:10.070\nHowever, we'll eventually get to these.\n\n269\n00:16:11.370 --> 00:16:14.540\nPython comes built in with other things\nthat you can say hey, you know what?\n\n270\n00:16:14.540 --> 00:16:17.550\nI need this toolbox just for\na quick second.\n\n271\n00:16:17.550 --> 00:16:23.610\nSo import math, and you're like,\nhold on, that's kinda weird.\n\n272\n00:16:23.610 --> 00:16:28.890\nBut what math provides us is another\nset of things that we can operate on.\n\n273\n00:16:28.890 --> 00:16:33.250\nNotice all of the other ones have just\nbeen these kind of operators, except for\n\n274\n00:16:33.250 --> 00:16:37.860\nabs and sqrt.\n\n275\n00:16:37.860 --> 00:16:41.040\nI'm only showing you this,\nmath has a whole bunch of these.\n\n276\n00:16:41.040 --> 00:16:45.354\nThose are functions, it'll be a little bit\nbefore we write out own functions, but\n\n277\n00:16:45.354 --> 00:16:46.781\nyou need to know function.\n\n278\n00:16:46.781 --> 00:16:50.130\nYou give it some information and\nit spits out some information.\n\n279\n00:16:50.130 --> 00:16:54.098\nSo if I say, what is the square\nroot of second or three?\n\n280\n00:16:54.098 --> 00:16:57.792\nWell, math.sqrt(second),\n\n281\n00:16:57.792 --> 00:17:02.140\nsquare root of second or three is 1.73.\n\n282\n00:17:02.140 --> 00:17:03.620\nIt's a float.\n\n283\n00:17:03.620 --> 00:17:07.636\nWell, what about math.sqrt(4)?\n\n284\n00:17:07.636 --> 00:17:11.740\nSquare root of 4 is 2, except it's float.\n\n285\n00:17:11.740 --> 00:17:15.030\nSquare root always returns\nfloat regardless of the input.\n\n286\n00:17:15.030 --> 00:17:17.040\nSo I intentionally did that to show you,\n\n287\n00:17:17.040 --> 00:17:20.010\nyou gotta be careful\nabout what's returned.\n\n288\n00:17:20.010 --> 00:17:22.750\nSquare root's always gonna give\nyou a float, absolute value or\n\n289\n00:17:22.750 --> 00:17:27.950\nabs is gonna be dependent\non what is passed in, okay?\n\n290\n00:17:29.260 --> 00:17:31.480\nSo those are a lot of\nthe operations that you can do.\n\n291\n00:17:31.480 --> 00:17:34.020\nBut you're like,\nwell wait a minute, Justin.\n\n292\n00:17:34.020 --> 00:17:35.940\nYou say these are number,\nthey all have the same behavior,\n\n293\n00:17:35.940 --> 00:17:39.790\nbut what if I want, I get a float back,\nbut I want it to be an integer?\n\n294\n00:17:41.420 --> 00:17:44.830\nWhat if I'm an integer, but\nI wanted to be a float, all right?\n\n295\n00:17:45.960 --> 00:17:49.130\nWell, let's say this, let's say first.\n\n296\n00:17:49.130 --> 00:17:51.110\nThis is some result, right?\n\n297\n00:17:51.110 --> 00:17:53.460\nYou did 3 divided by 3.\n\n298\n00:17:53.460 --> 00:17:55.690\nYeah, but I really want the float version.\n\n299\n00:17:57.500 --> 00:18:00.450\nWell, if you did the regular slash,\nyou would get the float version.\n\n300\n00:18:00.450 --> 00:18:07.060\nBut if I wanted this to be a float,\nI could say float(first),\n\n301\n00:18:07.060 --> 00:18:11.330\nand then I will get the floating\npoint representation of that integer.\n\n302\n00:18:11.330 --> 00:18:13.900\nIt actually changes it and hands back.\n\n303\n00:18:13.900 --> 00:18:17.250\nBut it doesn't change the variable,\nso be careful there.\n\n304\n00:18:17.250 --> 00:18:22.040\n&gt;&gt; So that's a function, you're telling\nit to do something to this variable.\n\n305\n00:18:22.040 --> 00:18:24.820\n&gt;&gt; Yeah, and do something to\nthe value contained in the variable.\n\n306\n00:18:24.820 --> 00:18:27.320\nYou have to be careful,\nwe're not reassigning the variable.\n\n307\n00:18:27.320 --> 00:18:32.850\nIf we wanted to,\nthen we would say like that,\n\n308\n00:18:32.850 --> 00:18:38.080\nand now first is the floating point,\nversion of the original value.\n\n309\n00:18:38.080 --> 00:18:43.380\n&gt;&gt; Good clarification on the words\nthat I'm using to describe this.\n\n310\n00:18:43.380 --> 00:18:46.900\nBecause that's the, no, that actually\nmeans a little bit different if you took\n\n311\n00:18:46.900 --> 00:18:48.820\nit at face value of exactly what I said.\n\n312\n00:18:48.820 --> 00:18:51.400\nSo what you said was\nwhat I was trying to say.\n\n313\n00:18:51.400 --> 00:18:54.360\nAnd then, of course, the float.\n\n314\n00:18:54.360 --> 00:18:57.660\nIs int the other function?\n\n315\n00:18:57.660 --> 00:19:01.170\n&gt;&gt; See, this is what I love about\nPython is I was like, here's float, and\n\n316\n00:19:01.170 --> 00:19:03.790\nVonne's like, well there must be an int.\n\n317\n00:19:03.790 --> 00:19:04.670\nLet's find out.\n\n318\n00:19:04.670 --> 00:19:09.560\nWe know that third is a float, like that?\n\n319\n00:19:09.560 --> 00:19:10.060\n&gt;&gt; Yeah.\n\n320\n00:19:10.060 --> 00:19:12.360\n&gt;&gt; Boom, it is, it works.\n\n321\n00:19:12.360 --> 00:19:17.010\nNotice though,\nI don't necessarily lose information,\n\n322\n00:19:17.010 --> 00:19:20.300\nI may lose some precision,\nright, how close to the number.\n\n323\n00:19:20.300 --> 00:19:24.070\nNotice 1 and 1.0, you're like,\nthose are the same.\n\n324\n00:19:24.070 --> 00:19:26.840\nIf I take a floating point number and\nmake it an integer, though,\n\n325\n00:19:26.840 --> 00:19:28.805\nI actually lose all\nthe decimal information.\n\n326\n00:19:28.805 --> 00:19:32.780\n4.7 and 4, I would argue,\nare drastically different things.\n\n327\n00:19:32.780 --> 00:19:37.071\nAnd if you don't believe me Which one\nwould you rather get paid per hour, 4 or\n\n328\n00:19:37.071 --> 00:19:37.610\n4,7?\n\n329\n00:19:37.610 --> 00:19:40.334\nWell neither one because they're\nboth below minimum wage, but\n\n330\n00:19:40.334 --> 00:19:41.620\nbesides that, right?\n\n331\n00:19:41.620 --> 00:19:43.390\nSo you have to be careful there.\n\n332\n00:19:43.390 --> 00:19:47.710\n&gt;&gt; I was doing the human thing again of,\nthat's five, because we're doing our rules\n\n333\n00:19:47.710 --> 00:19:52.810\nof rounding, and\nit does not round, it drops.\n\n334\n00:19:52.810 --> 00:19:53.880\n&gt;&gt; Yep, it truncates.\n\n335\n00:19:53.880 --> 00:19:57.290\nSo it says, cool give me all the things\nto the left of the decimal place,\n\n336\n00:19:57.290 --> 00:19:58.940\nwho cares about to the right.\n\n337\n00:19:58.940 --> 00:20:02.400\nAnd it slices it off and hands you\nback the whole number, and more or\n\n338\n00:20:02.400 --> 00:20:04.410\nless does what's called a floor.\n\n339\n00:20:06.170 --> 00:20:08.800\nInteger, more or less,\ndoes that to floats.\n\n340\n00:20:08.800 --> 00:20:11.970\nIf I type int(1), I just, more or\n\n341\n00:20:11.970 --> 00:20:14.990\nless, get 1 back, so\nthere's nothing changing there.\n\n342\n00:20:14.990 --> 00:20:18.670\nBut if it is a floating point number,\nyou will lose information, so to speak.\n\n343\n00:20:18.670 --> 00:20:21.800\n&gt;&gt; And we're just talking about data types\nright now, so we're going to stop there.\n\n344\n00:20:21.800 --> 00:20:24.310\nBut you can round up.\n\n345\n00:20:24.310 --> 00:20:27.020\nThere's something in\nthe language that says,\n\n346\n00:20:27.020 --> 00:20:31.960\nI want you to take this value, and\nround up to the nearest whole number.\n\n347\n00:20:31.960 --> 00:20:32.700\n&gt;&gt; And it's funny, Vonne,\n\n348\n00:20:32.700 --> 00:20:34.780\ncuz you're talking about a lot\nof math functions there.\n\n349\n00:20:34.780 --> 00:20:38.410\nIt might even be in that\nimport math thing that we did.\n\n350\n00:20:38.410 --> 00:20:42.810\nBut now I'm thinking, since we're really\nworried about the delineation between\n\n351\n00:20:42.810 --> 00:20:46.560\nfloats and integers,\nwe may have to save that to a later time.\n\n352\n00:20:46.560 --> 00:20:49.910\n&gt;&gt; I want to do it, but I had to get it\nout cuz it's just in my thought process.\n\n353\n00:20:49.910 --> 00:20:51.290\nI'm like, I know you can.\n\n354\n00:20:51.290 --> 00:20:55.550\nYou don't have to show me, but\njust let me know that it's available and\n\n355\n00:20:55.550 --> 00:20:59.540\nI'll say, all right, I'll patiently wait\nfor you to tell me about how to do that.\n\n356\n00:20:59.540 --> 00:21:02.240\nWell, thank you so much for\nclarifying those data types.\n\n357\n00:21:02.240 --> 00:21:04.820\nNice little stroll down math memory lane.\n\n358\n00:21:04.820 --> 00:21:07.870\nI was a little scared there for\nawhile, being a humanities major.\n\n359\n00:21:07.870 --> 00:21:11.730\nBut thank you for that, and thank you for\njoining us, but we're gonna go ahead and\n\n360\n00:21:11.730 --> 00:21:13.130\nwrap up this one.\n\n361\n00:21:13.130 --> 00:21:15.880\nFor DevProTV,\nI've been your host, Vonne Smith.\n\n362\n00:21:15.880 --> 00:21:16.620\n&gt;&gt; And I'm Justin Dennison.\n\n363\n00:21:16.620 --> 00:21:17.681\n&gt;&gt; And we'll see you soon.\n\n364\n00:21:17.681 --> 00:21:22.524\n[MUSIC]\n\n",
          "vimeoId": "266750899"
        },
        {
          "description": "In this episode, Justin and Vonne explore the string data type. Justin explores some fo the common operations that strings are capable of as well as common uses of strings.",
          "length": "1788",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-3-1-basic_data_types_strings-042518-PGM.00_35_52_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-3-1-basic_data_types_strings-042518-PGM.00_35_52_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-3-1-basic_data_types_strings-042518-PGM.00_35_52_21.Still001-sm.jpg",
          "title": "Basic Data Types: Strings",
          "transcript": "WEBVTT\n\n1\n00:00:12.873 --> 00:00:14.139\nHello, everyone, and welcome back to\nanother exciting edition of DevPro TV.\n\n2\n00:00:14.139 --> 00:00:16.574\nI'm your host, Vonne Smith, and\n\n3\n00:00:16.574 --> 00:00:22.040\nwe're coming back at you with more on\nour programming fundamentals series.\n\n4\n00:00:22.040 --> 00:00:25.380\nAnd we're taking a deeper\ndive into some data types.\n\n5\n00:00:25.380 --> 00:00:27.441\nAnd in this episode,\nwe're gonna be talking about strings.\n\n6\n00:00:27.441 --> 00:00:29.310\nAnd here to help us is Mr.\nJustin Dennison.\n\n7\n00:00:29.310 --> 00:00:30.360\nHello, how are you doing today?\n\n8\n00:00:30.360 --> 00:00:31.330\n&gt;&gt; I'm doing fantastic, Vonne.\n\n9\n00:00:31.330 --> 00:00:31.990\nHow are you?\n\n10\n00:00:31.990 --> 00:00:32.940\n&gt;&gt; I'm doing pretty good.\n\n11\n00:00:32.940 --> 00:00:36.660\nAnd I know we've talked a little\nbit about strings here and there.\n\n12\n00:00:36.660 --> 00:00:41.840\nSo I'm a little curious as to how much\ndeeper we're going to go with strings?\n\n13\n00:00:41.840 --> 00:00:45.710\n&gt;&gt; Well, strings are one of those things\nwhere you're like, it's pretty easy.\n\n14\n00:00:45.710 --> 00:00:48.918\nIt's just a strung together set\nof characters and you're like,\n\n15\n00:00:48.918 --> 00:00:50.096\nthat's what it means.\n\n16\n00:00:50.096 --> 00:00:51.300\nIt's done.\n\n17\n00:00:51.300 --> 00:00:55.220\nHowever, strings have another\nset of behaviors because\n\n18\n00:00:55.220 --> 00:00:58.420\nI'm gonna reveal kind of\nsome future stuff here.\n\n19\n00:00:58.420 --> 00:01:03.217\nStrings are actually a little more complex\nthan these other basic data types.\n\n20\n00:01:03.217 --> 00:01:09.090\nBut the reason I want them in with Basic\nis because, well, we have numbers.\n\n21\n00:01:09.090 --> 00:01:10.470\nWell, you're like, I don't need numbers.\n\n22\n00:01:10.470 --> 00:01:12.800\nI need the ability to text.\n\n23\n00:01:12.800 --> 00:01:14.709\nI want to type stuff and\nhave it do things.\n\n24\n00:01:15.760 --> 00:01:22.380\nSo strings are used early on but then\nwhere, how do we know what they do, right?\n\n25\n00:01:22.380 --> 00:01:26.350\nSo there's some other\nthings that you're like,\n\n26\n00:01:26.350 --> 00:01:29.110\nthat's not how I thought\nthat was gonna work.\n\n27\n00:01:29.110 --> 00:01:34.030\nSo we wanna make sure that everybody's\ngood to go on some of the limitations but\n\n28\n00:01:34.030 --> 00:01:38.760\nalso additional behaviors or\nactions that you can take with strings.\n\n29\n00:01:38.760 --> 00:01:41.660\n&gt;&gt; It's kind of like in our numbers\nepisode where I'm just like numbers\n\n30\n00:01:41.660 --> 00:01:43.510\nare numbers,\nhow much more can we get into?\n\n31\n00:01:43.510 --> 00:01:47.415\nBut when we got into how you can\nperform different calculations and\n\n32\n00:01:47.415 --> 00:01:52.170\ndifferent with operators, that's when\nI was like, I wasn't expecting that.\n\n33\n00:01:52.170 --> 00:01:54.806\nThat was one of those gotchas,\nwas like okay,\n\n34\n00:01:54.806 --> 00:01:58.321\nI understand now why we had to go\ndeeper into numbers just like I\n\n35\n00:01:58.321 --> 00:02:02.805\nfeel like that's what's gonna happen\nwith me again and like, I see now.\n\n36\n00:02:02.805 --> 00:02:03.564\n[LAUGH]\n&gt;&gt; Well,\n\n37\n00:02:03.564 --> 00:02:08.080\nI will try my best to make it a little\neasier but you never know what we'll see.\n\n38\n00:02:08.080 --> 00:02:10.970\nAlso, here in this episode we're\ngonna see some additional things that\n\n39\n00:02:10.970 --> 00:02:13.440\nwe can do in the REPL that can help\n\n40\n00:02:13.440 --> 00:02:17.175\nkind of explore when we're\nunsure about a respective thing.\n\n41\n00:02:17.175 --> 00:02:18.980\nBut I think there's enough talk.\n\n42\n00:02:18.980 --> 00:02:21.840\nLet's go ahead and\ntake a look at the screen and get going.\n\n43\n00:02:21.840 --> 00:02:26.510\nSo I'm gonna hop into the Python\n3 REPL and Ctrl+L and\n\n44\n00:02:26.510 --> 00:02:27.700\nnow we have this cleared out.\n\n45\n00:02:27.700 --> 00:02:29.240\nNow let's create a string.\n\n46\n00:02:30.880 --> 00:02:35.700\nLet's just use a name,\nwe'll go with Vonne, all right?\n\n47\n00:02:35.700 --> 00:02:39.250\nSo let's make sure that is a string type.\n\n48\n00:02:39.250 --> 00:02:41.002\nAnd it is, right?\n\n49\n00:02:41.002 --> 00:02:46.220\nAnd well, they haven't really done\ntoo much with strings other than just\n\n50\n00:02:46.220 --> 00:02:48.220\nhave them be there, right?\n\n51\n00:02:48.220 --> 00:02:54.160\nNow, remember that I can use either\ndouble quotes, and just randomly slide up\n\n52\n00:02:54.160 --> 00:02:57.850\nin the screen, or I can use single quotes\nin Python, it doesn't really matter.\n\n53\n00:02:59.030 --> 00:03:04.120\nOkay, so what can I do with strings?\n\n54\n00:03:04.120 --> 00:03:06.291\nWell, it's kind of interesting.\n\n55\n00:03:06.291 --> 00:03:10.631\nI can say name and then say + space\n\n56\n00:03:10.631 --> 00:03:15.940\n\"Smith\" and now I get a new string.\n\n57\n00:03:15.940 --> 00:03:17.440\nI hope I spelled your last name right.\n\n58\n00:03:17.440 --> 00:03:19.170\nDid I spell your last name right, Vonne?\n\n59\n00:03:19.170 --> 00:03:21.580\n&gt;&gt; Yeah, Smith is usually\nthe one that everybody gets.\n\n60\n00:03:21.580 --> 00:03:23.929\nIt's the first one that\neveryone's like what?\n\n61\n00:03:23.929 --> 00:03:25.227\n[LAUGH]\n&gt;&gt; [LAUGH] Okay, so\n\n62\n00:03:25.227 --> 00:03:26.612\nwe took these two strings?\n\n63\n00:03:26.612 --> 00:03:28.910\nAnd you're like, wait a minute,\nthat's a plus sign.\n\n64\n00:03:30.180 --> 00:03:33.200\nThat's a plus sign, you actually\nalluded to this in a previous episode.\n\n65\n00:03:33.200 --> 00:03:35.100\nThis is concatenation.\n\n66\n00:03:35.100 --> 00:03:39.420\nThe plus sign means, take two strings,\nif they're both strings, and\n\n67\n00:03:39.420 --> 00:03:41.010\nsquish them together.\n\n68\n00:03:41.010 --> 00:03:45.447\nNotice though that I put a space there,\nright?\n\n69\n00:03:45.447 --> 00:03:47.640\nCuz that space actually\ncounts as a character.\n\n70\n00:03:47.640 --> 00:03:50.710\n&gt;&gt; And that's what got me\nbecause in Excel you have to,\n\n71\n00:03:50.710 --> 00:03:52.490\nI've been doing a lot of Excel stuff,\nit's like,\n\n72\n00:03:52.490 --> 00:03:57.120\nyou have to say this plus the space\nthen plus the other cell or whatever.\n\n73\n00:03:57.120 --> 00:03:59.200\nSo I was like, that's wrong, Justin.\n\n74\n00:03:59.200 --> 00:04:02.000\nWait, no, you just put the space\n\n75\n00:04:02.000 --> 00:04:07.110\nin with the text of the last name\nSmith and so that's where it was so.\n\n76\n00:04:07.110 --> 00:04:08.788\n&gt;&gt; Now you bring up a good point, right?\n\n77\n00:04:08.788 --> 00:04:13.910\nYou said three things, right,\nname plus a space plus last name.\n\n78\n00:04:13.910 --> 00:04:18.380\nSo if I say name +, +,\n\n79\n00:04:18.380 --> 00:04:22.690\naccidently hit the Enter key,\nso let's clear this out.\n\n80\n00:04:22.690 --> 00:04:32.170\nLet's go up here and\nsay name + space + 'Smith', all right?\n\n81\n00:04:32.170 --> 00:04:35.267\nIt is exactly the same thing.\n\n82\n00:04:35.267 --> 00:04:40.529\nAnd the reason I can do that is well,\nthis ends up being a string,\n\n83\n00:04:40.529 --> 00:04:43.950\nand then that plus this is still a string.\n\n84\n00:04:43.950 --> 00:04:45.990\nString plus a string, all right?\n\n85\n00:04:45.990 --> 00:04:50.260\nNow something I've noticed that people\ndo when they first see this is they go,\n\n86\n00:04:50.260 --> 00:04:51.200\nyou can use a plus sign.\n\n87\n00:04:51.200 --> 00:04:55.620\nI wonder if you can do things like minus,\nthese other operations.\n\n88\n00:04:55.620 --> 00:04:58.667\nSo minus, all right, name,\nwhich would be Vonne and\n\n89\n00:04:58.667 --> 00:05:01.527\nlet's just take the e of the end of it,\nall right?\n\n90\n00:05:01.527 --> 00:05:05.350\nI think this is something that\npeople tend to think you can do?\n\n91\n00:05:05.350 --> 00:05:06.703\nAnd then it goes no.\n\n92\n00:05:06.703 --> 00:05:11.680\nIt says unsupported operand types for\nminus.\n\n93\n00:05:11.680 --> 00:05:15.530\nPlus sign is defined for two strings.\n\n94\n00:05:15.530 --> 00:05:18.290\nWe have to think about\nthe type of data that we have.\n\n95\n00:05:18.290 --> 00:05:20.790\nSo a string plus a string\nactually means something.\n\n96\n00:05:22.180 --> 00:05:24.960\nWell, then you see the minus doesn't work,\nand\n\n97\n00:05:24.960 --> 00:05:26.680\nyou go well, none of the other ones work.\n\n98\n00:05:26.680 --> 00:05:31.230\nRight, so if I say name divide by e.\n\n99\n00:05:31.230 --> 00:05:33.760\nI don't think that's meaningful, right?\n\n100\n00:05:33.760 --> 00:05:40.910\nName times e, that's not meaningful.\n\n101\n00:05:40.910 --> 00:05:42.580\nThat gets weird, right?\n\n102\n00:05:42.580 --> 00:05:46.490\nHowever, there is one that\nis sometimes helpful.\n\n103\n00:05:46.490 --> 00:05:50.950\nSo if I say name times 3,\nthat's a string and a number actually.\n\n104\n00:05:50.950 --> 00:05:54.933\nAnd I get VonneVonneVonne, right?\n\n105\n00:05:54.933 --> 00:05:58.900\nSo there is one operation that\nuses some of these math operators.\n\n106\n00:05:58.900 --> 00:06:01.980\nIf I have a string times a number,\n\n107\n00:06:01.980 --> 00:06:05.680\nthat string just gets repeated\nthat number of times, okay?\n\n108\n00:06:05.680 --> 00:06:08.250\nSo name times 3 is VonneVonneVonne.\n\n109\n00:06:08.250 --> 00:06:10.031\nName times 10 is\nVonneVonneVonneVonneVonneVonneVonneVonneV-\n\n110\n00:06:10.031 --> 00:06:13.910\nonneVonne.\n&gt;&gt; Can I assume that we could say name\n\n111\n00:06:13.910 --> 00:06:19.130\nplus a space then times\n10 just to space it out?\n\n112\n00:06:19.130 --> 00:06:21.900\nOr is that getting beyond the scope\nof what we're talking about?\n\n113\n00:06:21.900 --> 00:06:24.360\n&gt;&gt; I don't know.\nI think that's a reasonable question.\n\n114\n00:06:24.360 --> 00:06:26.720\nI mean, we can ask that,\nnot that I don't know if we can ask that,\n\n115\n00:06:26.720 --> 00:06:27.715\nbecause we just asked it.\n\n116\n00:06:27.715 --> 00:06:30.894\n&gt;&gt; [LAUGH]\n&gt;&gt; But I think that's a reasonable thing\n\n117\n00:06:30.894 --> 00:06:31.940\nto see.\n\n118\n00:06:31.940 --> 00:06:35.410\nWhen you're in the REPL and you have\nideas like that, just type them in.\n\n119\n00:06:35.410 --> 00:06:36.710\nLet's see what happens, right?\n\n120\n00:06:36.710 --> 00:06:43.182\nSo if I say name plus a space times 3,\nhmm.\n\n121\n00:06:43.182 --> 00:06:43.950\n&gt;&gt; Wait, I'm already thinking.\n\n122\n00:06:43.950 --> 00:06:49.520\nI'm like, wait, math, orders of operation,\nplease excuse my dear aunt Sally.\n\n123\n00:06:49.520 --> 00:06:51.820\nI'm not sure this is gonna work, is it?\n\n124\n00:06:51.820 --> 00:06:53.770\n&gt;&gt; It doesn't work as you intend.\n\n125\n00:06:53.770 --> 00:06:57.770\nIt actually works, right, see we have\nVonne and then three spaces at the end.\n\n126\n00:06:57.770 --> 00:07:01.180\nBut I don't think that's\nwhat you intended.\n\n127\n00:07:01.180 --> 00:07:07.060\nInstead, what Vonne probably intended was,\ncan I put a parentheses around here?\n\n128\n00:07:07.060 --> 00:07:10.270\nAnd you can always use parentheses for\ngrouping and that includes with numbers.\n\n129\n00:07:10.270 --> 00:07:12.590\nYou can always say do these things first.\n\n130\n00:07:12.590 --> 00:07:15.550\nSo now,\nI say name plus a space times three.\n\n131\n00:07:15.550 --> 00:07:18.730\nAnd I get Vonne, space,\nVonne, space, okay?\n\n132\n00:07:18.730 --> 00:07:22.660\nHowever, do notice I get\nan extra space at the end.\n\n133\n00:07:22.660 --> 00:07:27.280\nSo it's not like I get just a separation,\nI also get that space at the end as well.\n\n134\n00:07:27.280 --> 00:07:28.760\nSo do keep those in mind.\n\n135\n00:07:28.760 --> 00:07:30.680\n&gt;&gt; Well,\nthat's cuz that's what you told us to do.\n\n136\n00:07:30.680 --> 00:07:32.760\nSo it's doing exactly what you want.\n\n137\n00:07:32.760 --> 00:07:35.520\nAnd I'm going past it.\n\n138\n00:07:35.520 --> 00:07:39.410\nYou probably could, but that gets way more\nof next this, then do something else that\n\n139\n00:07:39.410 --> 00:07:42.960\nsays take that last thing off, but\nway beyond what we need to talk about now.\n\n140\n00:07:42.960 --> 00:07:48.860\nBut the basic calculations with strings,\nI wasn't expecting the multiplication one.\n\n141\n00:07:48.860 --> 00:07:50.809\nOkay, yeah, I know about the add.\n\n142\n00:07:50.809 --> 00:07:56.234\nThe minus doesn't make any sense,\nso that's kind of interesting.\n\n143\n00:07:56.234 --> 00:08:00.944\n&gt;&gt; Yeah, it is an interesting thing,\nand this is very Very Python specific.\n\n144\n00:08:00.944 --> 00:08:04.498\nI haven't seen a lot of other\nprogramming languages that do this.\n\n145\n00:08:04.498 --> 00:08:08.719\nBut it could be handy like if you\nwant to build text base headers or\n\n146\n00:08:08.719 --> 00:08:12.327\nlots of spaces or indentation or\nsomething like that.\n\n147\n00:08:12.327 --> 00:08:16.022\n&gt;&gt; And you just said something that\nwas kind of, this is only Python?\n\n148\n00:08:16.022 --> 00:08:19.640\nCan you do this in other languages or\nwould you have to type it differently?\n\n149\n00:08:19.640 --> 00:08:20.828\nIs the syntax different?\n\n150\n00:08:20.828 --> 00:08:22.902\n&gt;&gt; The syntax would be different.\n\n151\n00:08:22.902 --> 00:08:27.602\nThe string times a number, a lot of times\neither breaks or gives you weird results,\n\n152\n00:08:27.602 --> 00:08:29.902\nlike it will say, that's not a number.\n\n153\n00:08:29.902 --> 00:08:32.292\nAnd you're like,\nI'm glad you told me that.\n\n154\n00:08:32.292 --> 00:08:34.732\nSo, this is very Python specific.\n\n155\n00:08:34.732 --> 00:08:37.592\n&gt;&gt; Okay, so\nprogramming fundamentals for Python,\n\n156\n00:08:37.592 --> 00:08:41.686\ndoes not go across the board to other\nprogramming or coding languages?\n\n157\n00:08:41.686 --> 00:08:45.135\n&gt;&gt; Right, but the idea of exploring\nthe data types do and it just so\n\n158\n00:08:45.135 --> 00:08:47.296\nhappens that this is Python specific.\n\n159\n00:08:47.296 --> 00:08:49.225\nNow, speaking of exploring the data types,\n\n160\n00:08:49.225 --> 00:08:52.344\nwe've just kinda been messing around\nwith the operators here, right?\n\n161\n00:08:52.344 --> 00:08:58.108\nThese infix, infix means they lie\nbetween the two respective arguments.\n\n162\n00:08:58.108 --> 00:09:02.018\nSo string plus string,\nthat operator is infix.\n\n163\n00:09:02.018 --> 00:09:05.168\nIt's in between the two things, all right.\n\n164\n00:09:05.168 --> 00:09:06.911\nLet's go ahead and clear this out.\n\n165\n00:09:06.911 --> 00:09:08.716\nLet's look at this name again.\n\n166\n00:09:08.716 --> 00:09:12.610\nSo Vonne, let's assume that I want\nto grab the first character, right.\n\n167\n00:09:12.610 --> 00:09:18.124\nThere are times where maybe I wanna slice\nand dice these strings individual things.\n\n168\n00:09:18.124 --> 00:09:21.896\nWell I can access individual characters or\nin slices,\n\n169\n00:09:21.896 --> 00:09:25.266\nwe'll get there,\nby using a different syntax.\n\n170\n00:09:25.266 --> 00:09:31.450\nSo if I say name[ and here's where\nthings get a little interesting.\n\n171\n00:09:31.450 --> 00:09:34.191\nWell you're like,\nI want the first letter, right?\n\n172\n00:09:34.191 --> 00:09:36.047\nSo I want the first one.\n\n173\n00:09:36.047 --> 00:09:38.994\nAnd if we zoom in that seems reasonable.\n\n174\n00:09:38.994 --> 00:09:44.470\nAnd you hit Enter, but\nthat's not what most people expected.\n\n175\n00:09:44.470 --> 00:09:47.573\nAnd the reason being is strings and\nfor the most part and\n\n176\n00:09:47.573 --> 00:09:52.031\nmost collection type things, right,\nif it's a collection of other things,\n\n177\n00:09:52.031 --> 00:09:55.766\nwell they follow this pattern in\na lot of programming languages.\n\n178\n00:09:55.766 --> 00:09:57.266\nNot all.\n\n179\n00:09:57.266 --> 00:09:59.352\nThat they are a zero indexed.\n\n180\n00:09:59.352 --> 00:10:01.210\nThey start counting from zero.\n\n181\n00:10:01.210 --> 00:10:05.411\nSo this would be zero, one,\n\n182\n00:10:05.411 --> 00:10:10.322\ntwo, three, four, all right.\n\n183\n00:10:10.322 --> 00:10:12.107\nIf you start counting from zero,\n\n184\n00:10:12.107 --> 00:10:14.986\nthen the first letter is\nactually the zeroth letter.\n\n185\n00:10:14.986 --> 00:10:19.161\nAnd it's really odd when you first start\nprogramming because that's not typically\n\n186\n00:10:19.161 --> 00:10:20.876\nhow you count, for the most part.\n\n187\n00:10:20.876 --> 00:10:27.832\n&gt;&gt; Yeah, I remember learning this early on\nin any type of language, I'm like okay.\n\n188\n00:10:27.832 --> 00:10:30.139\nAnd so, funny story.\n\n189\n00:10:30.139 --> 00:10:33.242\nI was in a band, and\nwe were four, four time, right?\n\n190\n00:10:33.242 --> 00:10:34.356\nYou just one, two, three four.\n\n191\n00:10:34.356 --> 00:10:37.870\nWe had this weird by change, and\nit was like in this five four time, and\n\n192\n00:10:37.870 --> 00:10:41.981\nthe drummer couldn't get it, so I had to\nsit there, no, you had to go zero, one,\n\n193\n00:10:41.981 --> 00:10:43.074\ntwo, three, four.\n\n194\n00:10:43.074 --> 00:10:44.604\n&gt;&gt; [LAUGH]\n&gt;&gt; Zip,\n\n195\n00:10:44.604 --> 00:10:47.247\nthe name of the song\nwas Counting From Zero.\n\n196\n00:10:47.247 --> 00:10:48.948\n&gt;&gt; Well, there you go.\n\n197\n00:10:48.948 --> 00:10:50.627\nSomething to remember it by, right.\n\n198\n00:10:50.627 --> 00:10:51.938\nNice little story there.\n\n199\n00:10:51.938 --> 00:10:55.895\nAnd counting from zero, always remember\nit'll bite you, it'll get you.\n\n200\n00:10:55.895 --> 00:10:57.914\nDon't worry about it if it does.\n\n201\n00:10:57.914 --> 00:11:01.132\nBut just remember that\nyou can count from zero.\n\n202\n00:11:01.132 --> 00:11:06.092\n0, 1, 2, 3, 4 and you can say,\n\n203\n00:11:06.092 --> 00:11:11.519\nname[0] so there's V, name[1],\n\n204\n00:11:11.519 --> 00:11:18.195\nname[2], name[3], and [4] all right.\n\n205\n00:11:18.195 --> 00:11:22.080\nNow I'm gonna get down here\njust a little bit, right.\n\n206\n00:11:22.080 --> 00:11:25.761\nThat is five letters zero,\none, two, three, four.\n\n207\n00:11:25.761 --> 00:11:28.648\nWhat if I say, name [5]?\n\n208\n00:11:28.648 --> 00:11:29.696\nI actually get an error.\n\n209\n00:11:29.696 --> 00:11:32.740\nIt says IndexError string out of range.\n\n210\n00:11:32.740 --> 00:11:36.870\nIf we try to go beyond where the string\nexists, where the end of it is,\n\n211\n00:11:36.870 --> 00:11:38.236\nyou will get an error.\n\n212\n00:11:38.236 --> 00:11:43.486\nIf you ever see IndexError, string index\nout of range, that means that you have put\n\n213\n00:11:43.486 --> 00:11:48.595\na bigger number in those square brackets\nthan the string can handle, all right.\n\n214\n00:11:48.595 --> 00:11:53.036\nNow this leads me to another\nproperty of strings, right.\n\n215\n00:11:53.036 --> 00:11:54.953\nAnd that we haven't seen\na lot of this with numbers.\n\n216\n00:11:54.953 --> 00:11:57.680\nBut strings have kind of\nthis interesting property.\n\n217\n00:11:57.680 --> 00:11:58.672\nI've said it a couple of times.\n\n218\n00:11:58.672 --> 00:12:02.100\nWe start counting zero, zero,\none, two, three, four, but\n\n219\n00:12:02.100 --> 00:12:04.376\nthere's five letters in Vonnes' name.\n\n220\n00:12:04.376 --> 00:12:06.823\nWell, you know what?\n\n221\n00:12:06.823 --> 00:12:08.684\nIt's easy to count those letters.\n\n222\n00:12:08.684 --> 00:12:11.314\nBut what if I had a paragraph of text?\n\n223\n00:12:11.314 --> 00:12:15.834\nI'm like, I don't really know\nhow to get access to this.\n\n224\n00:12:15.834 --> 00:12:20.774\nThere's this kind of broad function\ncalled len which is short for length.\n\n225\n00:12:20.774 --> 00:12:24.730\nAnd it says,\nwhat is the length of the name?\n\n226\n00:12:24.730 --> 00:12:26.894\nWell it's five letters long.\n\n227\n00:12:26.894 --> 00:12:30.858\nSo name is a string so\nit's five letters long.\n\n228\n00:12:30.858 --> 00:12:33.068\nAnd then you go, okay, all right.\n\n229\n00:12:33.068 --> 00:12:38.898\nSo if you type 5 and above,\nnot that, if you type 5 or\n\n230\n00:12:38.898 --> 00:12:43.057\nanything above 5, then guess what?\n\n231\n00:12:43.057 --> 00:12:46.797\nYou're gonna get an index error and\nthings are kinda gonna go awry.\n\n232\n00:12:46.797 --> 00:12:51.779\nNow, zoom back out,\nlet's actually clear this out, and\n\n233\n00:12:51.779 --> 00:12:57.064\nthink about, okay,\nwhat if the first letter starts at zero,\n\n234\n00:12:57.064 --> 00:13:00.944\nthe last letter,\nhow do get the last letter?\n\n235\n00:13:00.944 --> 00:13:06.836\nWell, okay, you go len(name),\nand that's 5 and with the name,\n\n236\n00:13:06.836 --> 00:13:13.558\nI can't use 5, it's actually starting\nfrom 0, so that would be 4, okay.\n\n237\n00:13:13.558 --> 00:13:18.530\nInteresting thing in Python,\nthough, is you can go backwards.\n\n238\n00:13:18.530 --> 00:13:21.226\nI can say name[-1], and\n\n239\n00:13:21.226 --> 00:13:26.176\nyou would think this is\ngonna be an index error.\n\n240\n00:13:26.176 --> 00:13:30.700\nActually, negatives work, and\nthey start from the back.\n\n241\n00:13:30.700 --> 00:13:34.854\nI get a -1 this way,\ninstead of zero one two three four.\n\n242\n00:13:34.854 --> 00:13:39.063\nWhich is really handy if you're like\nwait a minute it makes sense to start\n\n243\n00:13:39.063 --> 00:13:43.699\nat the other end of the string and come\nbackwards, Python allows you to do that.\n\n244\n00:13:43.699 --> 00:13:46.183\n&gt;&gt; That was like I was not\nexpecting that to work.\n\n245\n00:13:46.183 --> 00:13:49.981\n&gt;&gt; [LAUGH]\n&gt;&gt; I was thinking the same thing then I'm\n\n246\n00:13:49.981 --> 00:13:54.885\nlike that's way easier than saying,\nokay then, go ahead and\n\n247\n00:13:54.885 --> 00:14:00.681\nlook at the length and then take length\nand minus one but well wait, minus one.\n\n248\n00:14:00.681 --> 00:14:06.180\nSo it's almost understood of like\nI'm going to look at the length,\n\n249\n00:14:06.180 --> 00:14:08.211\nthe name, and minus 1.\n\n250\n00:14:08.211 --> 00:14:11.910\n&gt;&gt; You can think of it that way and\nthat works perfectly.\n\n251\n00:14:11.910 --> 00:14:14.380\nJust so we're clear though,\nthere is no minus zero.\n\n252\n00:14:14.380 --> 00:14:16.890\nZero is zero whether there\nis a minus sign or not.\n\n253\n00:14:16.890 --> 00:14:20.123\nWe always start at the beginning at zero\nbut if we go to negative one that means\n\n254\n00:14:20.123 --> 00:14:22.612\ncome back around to the other end and\nstart going this way.\n\n255\n00:14:22.612 --> 00:14:27.621\nSo if I go -2,\nwell then I'm two from the end, right?\n\n256\n00:14:27.621 --> 00:14:30.375\nBut that doesn't count\nat zero from that part.\n\n257\n00:14:30.375 --> 00:14:32.092\nSo something to remember.\n\n258\n00:14:32.092 --> 00:14:36.218\nNow these are individual letters, we're\ngrabbing individual pieces of the string.\n\n259\n00:14:36.218 --> 00:14:40.370\nBut strings are,\nwhat if I wanna slice and dice,\n\n260\n00:14:40.370 --> 00:14:46.157\nwhat if I wanna say, well I want von,\njust the first three letters.\n\n261\n00:14:46.157 --> 00:14:47.594\nI don't know how to do that.\n\n262\n00:14:47.594 --> 00:14:53.795\nWell Python introduces a way to create\nsubstrings, right, a slice of a string.\n\n263\n00:14:53.795 --> 00:15:00.870\nThey're actually called slices and\nthey have their own syntax.\n\n264\n00:15:00.870 --> 00:15:04.728\nThere we go,\nit was not zooming there for a second.\n\n265\n00:15:04.728 --> 00:15:10.558\nI want to start at zero and\nI want to slice\n\n266\n00:15:10.558 --> 00:15:15.520\nout to zero, one, two, three.\n\n267\n00:15:15.520 --> 00:15:18.853\nSo, I want the first three letters, 0 1 2.\n\n268\n00:15:18.853 --> 00:15:20.525\nA lot of people would do this.\n\n269\n00:15:20.525 --> 00:15:22.879\nAnd if you hit it, you'll only get Vo.\n\n270\n00:15:22.879 --> 00:15:29.030\nAnd the reason being is,\nthis 0 is included, it's inclusive.\n\n271\n00:15:29.030 --> 00:15:34.418\nThis 2 is exclusive, that means\nit is not included in the slice.\n\n272\n00:15:34.418 --> 00:15:36.614\nIt is the upper range.\n\n273\n00:15:36.614 --> 00:15:38.740\nThis is one of those weird nuances.\n\n274\n00:15:38.740 --> 00:15:44.360\nTo show you what I mean, if we look\nat Vonne, that's zero, one, two.\n\n275\n00:15:44.360 --> 00:15:51.590\nBy convention this last number, it'll go,\nzero, one, not including two, okay.\n\n276\n00:15:51.590 --> 00:15:55.250\nSo give me everything up to\nthat thing not including it.\n\n277\n00:15:55.250 --> 00:15:56.525\n&gt;&gt; Cuz two is a stopping point.\n\n278\n00:15:56.525 --> 00:16:00.145\nSo this is stop here That way.\n\n279\n00:16:00.145 --> 00:16:03.500\n&gt;&gt; Yep, that is exactly correct, but\nthat'll get you, because if you want\n\n280\n00:16:03.500 --> 00:16:06.648\nthe first three letters,\nyou have to do something like this.\n\n281\n00:16:06.648 --> 00:16:12.687\nI want 0 to 3,\nbecause I want to include 0, 1, 2 then.\n\n282\n00:16:12.687 --> 00:16:16.680\nAnd then, at that point,\nyou get Von, all right?\n\n283\n00:16:16.680 --> 00:16:20.790\nNow, this slicing syntax\nhas a couple of shortcuts.\n\n284\n00:16:20.790 --> 00:16:23.170\nAnd also let you do some other things.\n\n285\n00:16:24.610 --> 00:16:29.200\nSo if we come here and\nwe go, well, I want up to 3,\n\n286\n00:16:29.200 --> 00:16:34.250\nif you leave out the 0,\nit's implied, all right?\n\n287\n00:16:34.250 --> 00:16:39.850\nMy recommendation, though, when you're\nfirst getting started is to be explicit.\n\n288\n00:16:39.850 --> 00:16:43.850\nEven though it's not needed,\nput it there anyway.\n\n289\n00:16:43.850 --> 00:16:49.090\n&gt;&gt; Because strings always count from 0,\nit's never gonna change that way.\n\n290\n00:16:49.090 --> 00:16:55.174\nSo that's why in this particular\nexample it slices, we just know it.\n\n291\n00:16:55.174 --> 00:16:55.900\n&gt;&gt; Exactly.\n\n292\n00:16:55.900 --> 00:16:56.633\n&gt;&gt; Or they just know it.\n\n293\n00:16:56.633 --> 00:16:58.070\nI guess Python just knows it.\n\n294\n00:16:58.070 --> 00:16:59.310\n&gt;&gt; They just know it.\n\n295\n00:16:59.310 --> 00:17:01.830\nAnd another reason that I\nrecommend that is well,\n\n296\n00:17:01.830 --> 00:17:07.070\nif you leave the 0 out there but\nreally you wanted to start at 1, right?\n\n297\n00:17:07.070 --> 00:17:11.700\nThis still works, but if you leave the 0\nout and sometimes there's a number there,\n\n298\n00:17:11.700 --> 00:17:15.550\nit can be inconsistent for you and\nit can cause some confusion.\n\n299\n00:17:15.550 --> 00:17:20.083\nBut along those same lines,\nif you leave out the right-hand side,\n\n300\n00:17:20.083 --> 00:17:24.472\nyou've actually started with that one and\nall the way to the end.\n\n301\n00:17:24.472 --> 00:17:30.200\nAll right, so 0, 0 flag or\nall the way to the end is always implied.\n\n302\n00:17:30.200 --> 00:17:35.130\nSo starting at index one,\ngive me everything else, all right?\n\n303\n00:17:35.130 --> 00:17:42.010\nSo that's one of those weird, kind of\nI enjoy it, like, it works very well.\n\n304\n00:17:42.010 --> 00:17:46.820\nBut there are times where leaving out\nnumbers can change how it behaves.\n\n305\n00:17:46.820 --> 00:17:50.670\nSo if I go here and I put a 5,\nokay, that's the same thing,\n\n306\n00:17:50.670 --> 00:17:54.830\nbecause 5's not included, just so\nwe get all the way up to 4.\n\n307\n00:17:54.830 --> 00:17:58.200\nBut if leave this off,\nI get that as well, all right?\n\n308\n00:17:59.220 --> 00:18:03.550\nNow along with that slice syntax,\nif you leave out\n\n309\n00:18:04.790 --> 00:18:09.480\neither number you actually just get\nthe same thing back, all right?\n\n310\n00:18:09.480 --> 00:18:11.420\nThis does something very\nspecial behind the scenes.\n\n311\n00:18:11.420 --> 00:18:18.574\nIt'll kinda give you a semi copy,\nso you have to be careful there.\n\n312\n00:18:18.574 --> 00:18:20.685\nIt's returning the exact same text, but\n\n313\n00:18:20.685 --> 00:18:23.710\nyou may end up with two strings\nif you're not careful here.\n\n314\n00:18:23.710 --> 00:18:27.965\nAnd then finally with this slicing syntax,\n\n315\n00:18:27.965 --> 00:18:33.147\nif I put another colon, and\nlet's say I put a 2 here.\n\n316\n00:18:33.147 --> 00:18:38.254\nSo ::2, and\nreally what we have here is 0 to 5, so\n\n317\n00:18:38.254 --> 00:18:44.390\ngive me the whole thing, :2,\nthen I get every second letter.\n\n318\n00:18:45.750 --> 00:18:51.540\nThis is a step, so\nhow do I go through this range?\n\n319\n00:18:51.540 --> 00:18:58.390\nIf I go 1 to 5, then I get O-N because\nI changed where I start, right?\n\n320\n00:18:58.390 --> 00:19:02.120\nStart at 1 and\nthen give me every other letter.\n\n321\n00:19:03.390 --> 00:19:05.410\nSo not this end, but this end.\n\n322\n00:19:05.410 --> 00:19:08.330\n&gt;&gt; I was about to say, with my name\nhaving two letters in the same place is\n\n323\n00:19:08.330 --> 00:19:11.620\nmaybe not the best example,\nbut if you did abcdefg,\n\n324\n00:19:11.620 --> 00:19:17.140\nyou would really see the iteration\nof every second letter.\n\n325\n00:19:17.140 --> 00:19:19.720\n&gt;&gt; Yep, and\nactually let's do that just for clarity.\n\n326\n00:19:19.720 --> 00:19:25.922\nSo letters, and let's say 0 to whatever.\n\n327\n00:19:25.922 --> 00:19:29.020\nI'm gonna leave that one out because\nI'm not going to take time to count it.\n\n328\n00:19:29.020 --> 00:19:32.070\nAnd then I say,\ngive me every other letter.\n\n329\n00:19:32.070 --> 00:19:39.110\nIt's a not b, c not e, f not g,\nand then h all the way through.\n\n330\n00:19:39.110 --> 00:19:42.250\n&gt;&gt; And the way you wrote it with the 0\nsaying that you should always do that but\n\n331\n00:19:42.250 --> 00:19:46.480\nif you just did ::2,\nthen it would do the exact same thing.\n\n332\n00:19:46.480 --> 00:19:48.610\nOr if you did ::3,\nthen every third letter.\n\n333\n00:19:48.610 --> 00:19:51.813\nSo it's the iteration of where\nit's going to pull the letter out.\n\n334\n00:19:51.813 --> 00:19:55.760\n&gt;&gt; Yep, so count by twos, count by threes,\ncount by fours, and you're exactly right.\n\n335\n00:19:55.760 --> 00:20:00.500\nAnd if we do threes, then I get aeh,\nall those work well.\n\n336\n00:20:00.500 --> 00:20:02.720\nNow this is a lot to take in with strings.\n\n337\n00:20:02.720 --> 00:20:05.150\nStrings end up being very complicated.\n\n338\n00:20:05.150 --> 00:20:09.653\nInterestingly enough, this is not\nall the things that they can do.\n\n339\n00:20:09.653 --> 00:20:12.653\nThis is, I've said it at\nthe beginning of the episode, I said,\n\n340\n00:20:12.653 --> 00:20:16.154\nwe're gonna see something that we can do\nin the REPL that will help us kind of\n\n341\n00:20:16.154 --> 00:20:18.110\nexplore other possibilities.\n\n342\n00:20:18.110 --> 00:20:20.910\nThese are intrinsic behaviors that\nyou kind of just have to know, right,\n\n343\n00:20:20.910 --> 00:20:22.530\nthe slicing syntax.\n\n344\n00:20:22.530 --> 00:20:28.550\nBut if I come here and I look at name,\nand just as a reminder, name is a string.\n\n345\n00:20:28.550 --> 00:20:34.510\nIf I type dir(name), this gives me\n\n346\n00:20:34.510 --> 00:20:40.520\nall of the possible things that are kind\nof hidden behind the scenes on a string.\n\n347\n00:20:41.620 --> 00:20:43.376\nSo for instance-\n&gt;&gt; These are things you\n\n348\n00:20:43.376 --> 00:20:43.960\ncan do on a string?\n\n349\n00:20:43.960 --> 00:20:48.399\nBecause I'm seeing, like,\nlower, upper, capitalize, so\n\n350\n00:20:48.399 --> 00:20:53.120\nthat's, yeah, it's like almost\nlike a functionality in Word.\n\n351\n00:20:53.120 --> 00:20:56.841\nI click the B button, or I click the,\nI wanna say the L button,\n\n352\n00:20:56.841 --> 00:20:59.003\nthey don't have an L button [LAUGH].\n\n353\n00:20:59.003 --> 00:21:01.598\n&gt;&gt; The I-\n&gt;&gt; Yeah, there you go [LAUGH].\n\n354\n00:21:01.598 --> 00:21:04.020\n&gt;&gt; I was like, bold, bold.\n\n355\n00:21:04.020 --> 00:21:08.200\nAnd yeah, I wanted to show you this\nbecause there's some conventions here that\n\n356\n00:21:08.200 --> 00:21:09.790\nyou need to be aware of.\n\n357\n00:21:09.790 --> 00:21:12.659\nFor now, if there are underscores,\n\n358\n00:21:12.659 --> 00:21:17.700\nlike this, see these double underscores,\njust pretend like those do not exist.\n\n359\n00:21:17.700 --> 00:21:18.965\nRight, those are behind the scenes.\n\n360\n00:21:18.965 --> 00:21:22.730\nPython's using those to do some things.\n\n361\n00:21:22.730 --> 00:21:27.100\nYou don't have to worry about about it,\nbut the DRI function gives you everything.\n\n362\n00:21:27.100 --> 00:21:29.760\n&gt;&gt; These are like the hidden files that\nyou see in your operating system that's\n\n363\n00:21:29.760 --> 00:21:30.560\nlike don't touch them.\n\n364\n00:21:30.560 --> 00:21:32.070\n&gt;&gt; Yep.\n&gt;&gt; Don't, yeah.\n\n365\n00:21:32.070 --> 00:21:33.140\n&gt;&gt; Don't touch them.\n\n366\n00:21:33.140 --> 00:21:37.320\nAnd then the rest of these\nare actually additional functionality.\n\n367\n00:21:37.320 --> 00:21:39.130\nNow I'm not gonna go through all of these,\n\n368\n00:21:39.130 --> 00:21:43.440\nmainly because I'm gonna show\nyou how to figure out these.\n\n369\n00:21:43.440 --> 00:21:50.900\nBut let's come down here and let's look\nat, actually let's look at lower, okay?\n\n370\n00:21:50.900 --> 00:21:57.770\nSo if we say name.lower,\nshowing you a syntax real quick (),\n\n371\n00:21:57.770 --> 00:22:03.800\nthat's a little different than all the\nthings we've just seen in this episode.\n\n372\n00:22:03.800 --> 00:22:10.930\nWhat this says is take this name,\nsend it a message called lower.\n\n373\n00:22:12.430 --> 00:22:17.290\nAnd because it is a behavior, right,\nit is a behavior, we have to put\n\n374\n00:22:17.290 --> 00:22:21.270\nparentheses because it's like a function\nthat a string knows how to do, right?\n\n375\n00:22:21.270 --> 00:22:25.670\nThat's like me telling Vonne, hey,\nVonne jump, don't actually jump.\n\n376\n00:22:25.670 --> 00:22:29.760\nBut if I told her that, I'm sending her\na message, but it's an action she can do.\n\n377\n00:22:29.760 --> 00:22:33.060\nAnd then she's going to jump,\nor I'm going to jump.\n\n378\n00:22:33.060 --> 00:22:36.190\nSo that's how this works.\n\n379\n00:22:36.190 --> 00:22:38.782\nThese are special.\n\n380\n00:22:38.782 --> 00:22:42.825\nWe'll learn more about why this\nis constructed this way later on.\n\n381\n00:22:42.825 --> 00:22:44.500\nBut I have a name.\n\n382\n00:22:44.500 --> 00:22:46.930\nThe period is sending it a message.\n\n383\n00:22:46.930 --> 00:22:48.290\nIt's an operator.\n\n384\n00:22:48.290 --> 00:22:49.810\nAnd then what message?\n\n385\n00:22:49.810 --> 00:22:50.860\nWell, I want you to lower.\n\n386\n00:22:52.050 --> 00:22:56.650\nThis is empty, and it will actually\nlowercase all of the letters.\n\n387\n00:22:56.650 --> 00:23:03.080\nIf I say name.upper, I said hey,\nmake an uppercase version.\n\n388\n00:23:03.080 --> 00:23:07.190\nAnd it will uppercase all of the letters.\n\n389\n00:23:07.190 --> 00:23:12.170\nI can do that for\nany of these that we so wanted to.\n\n390\n00:23:12.170 --> 00:23:17.070\n&gt;&gt; And you're calling these behaviors,\nso that after the dot is a behavior.\n\n391\n00:23:17.070 --> 00:23:19.330\nIs that how we could, or is it?\n\n392\n00:23:19.330 --> 00:23:21.230\nI don't want to complicate with methods.\n\n393\n00:23:21.230 --> 00:23:22.702\nI don't even want to say it.\n\n394\n00:23:22.702 --> 00:23:25.120\nI'm like but wait, I-\n&gt;&gt; It is a behavior,\n\n395\n00:23:25.120 --> 00:23:30.570\nbut a more strict syntax or\na more strict terminology is this\n\n396\n00:23:30.570 --> 00:23:35.020\nis a function that is attached to\nan entity also known as an object.\n\n397\n00:23:37.030 --> 00:23:42.585\nIf it is attached to an object,\nthen it is called a method, all right?\n\n398\n00:23:42.585 --> 00:23:46.605\nSo it is how an object does something,\nwhich is said behaviors.\n\n399\n00:23:46.605 --> 00:23:51.601\n&gt;&gt; Okay, that's only because of\nthe way I've learned certain languages\n\n400\n00:23:51.601 --> 00:23:53.276\nthey referred to it as.\n\n401\n00:23:53.276 --> 00:23:56.097\nAnd I try very hard to be like, okay,\n\n402\n00:23:56.097 --> 00:24:00.117\nI understand the base\nglossary terms of a language.\n\n403\n00:24:00.117 --> 00:24:02.466\nAnd then when you say a behavior,\nI'm like wait.\n\n404\n00:24:02.466 --> 00:24:03.936\nWhat, is that the same?\n\n405\n00:24:03.936 --> 00:24:06.647\nBut you just explained it to me,\nthat makes sense.\n\n406\n00:24:06.647 --> 00:24:11.720\n&gt;&gt; Yeah, so\nbehaviors on objects are called methods.\n\n407\n00:24:11.720 --> 00:24:16.910\nThey are technically functions that\nonly mean something in the context\n\n408\n00:24:16.910 --> 00:24:20.080\nof the entity or the object,\nin this case, the string.\n\n409\n00:24:20.080 --> 00:24:22.800\nAll right, so it's kind of\na weird circular argument there.\n\n410\n00:24:22.800 --> 00:24:27.230\nThat's one of those things where\nif I just type upper() like so,\n\n411\n00:24:27.230 --> 00:24:30.110\nthat doesn't mean anything.\n\n412\n00:24:30.110 --> 00:24:34.852\nIf I type .upper(), that doesn't\nmean anything, right, I get errors.\n\n413\n00:24:34.852 --> 00:24:39.773\nBut if I say name.upper(),\nthen, I'm saying, hey, name,\n\n414\n00:24:39.773 --> 00:24:43.278\nI know you have the ability\nto do an uppercase.\n\n415\n00:24:43.278 --> 00:24:48.080\nIt's called .upper, it is a method or\na function that you know how to do.\n\n416\n00:24:48.080 --> 00:24:52.643\nAnd this dot is actually saying hey,\nname, I need you to do this thing,\n\n417\n00:24:52.643 --> 00:24:54.637\nand then it will do that thing.\n\n418\n00:24:54.637 --> 00:25:00.205\n&gt;&gt; You just clarified this whole concept\nof learning a programming language so\n\n419\n00:25:00.205 --> 00:25:00.727\nwell.\n\n420\n00:25:00.727 --> 00:25:04.642\nI'm like, I wish you could take what you\njust said in these last two minutes,\n\n421\n00:25:04.642 --> 00:25:05.255\nverbatim.\n\n422\n00:25:05.255 --> 00:25:08.899\nPut it into every book or\nevery website that I just ever read,\n\n423\n00:25:08.899 --> 00:25:11.480\nI'm like, well then, there you go.\n\n424\n00:25:11.480 --> 00:25:13.055\n&gt;&gt; [LAUGH]\n&gt;&gt; That totally make sense.\n\n425\n00:25:13.055 --> 00:25:17.820\nI'm having a light bulb moment right now\nthat has just been years in the making.\n\n426\n00:25:17.820 --> 00:25:21.333\nOf like, I felt like I understood it, but\nnow I'm feeling good right now, [LAUGH].\n\n427\n00:25:21.333 --> 00:25:24.702\n&gt;&gt; [LAUGH] Well, I'll tell you what,\nit makes me feel good as well.\n\n428\n00:25:24.702 --> 00:25:28.134\nBut something that still kinda\nlulls at us a little bit.\n\n429\n00:25:28.134 --> 00:25:32.838\nIf we go up here,\nthat is a lot of stuff, right?\n\n430\n00:25:32.838 --> 00:25:37.328\nI mean, startswith, you can probably\nguess what startswith is, right?\n\n431\n00:25:37.328 --> 00:25:40.941\nisnumeric, you can probably\nguess what isnumeric is.\n\n432\n00:25:40.941 --> 00:25:46.062\nBut what if you didn't know,\nright, how do you figure this out?\n\n433\n00:25:46.062 --> 00:25:52.589\nIf I say name, and I'm not gonna put\nthe parenthesis for a particular reason.\n\n434\n00:25:52.589 --> 00:25:56.517\nI'm gonna say, actually,\nlet's go startswith.\n\n435\n00:25:58.406 --> 00:26:02.144\nNotice it says, built-in methods\nstartswith of string object.\n\n436\n00:26:02.144 --> 00:26:04.472\nIt'll tell you what that thing is.\n\n437\n00:26:04.472 --> 00:26:07.173\nIf I use parentheses, you're like, well,\n\n438\n00:26:07.173 --> 00:26:10.453\nwait a minute, starts with,\ntakes at least one.\n\n439\n00:26:10.453 --> 00:26:13.420\nI'm confused about how to use this, right?\n\n440\n00:26:13.420 --> 00:26:19.195\nI know startswith is there, but\nI don't know how to use it effectively.\n\n441\n00:26:19.195 --> 00:26:26.732\nIf I say help(name.startswith),\nnotice it's help(name.startswith),\n\n442\n00:26:26.732 --> 00:26:30.564\nand I hit Enter, and let me zoom out here.\n\n443\n00:26:30.564 --> 00:26:35.199\nThis actually gives you\na little quick documentation.\n\n444\n00:26:35.199 --> 00:26:41.190\nstartswith, it takes a prefix, and\nlet me show you how to read these.\n\n445\n00:26:41.190 --> 00:26:44.510\nSo it says, this is a string and\nif you call .startswith,\n\n446\n00:26:44.510 --> 00:26:48.010\nyou're gonna give it a prefix,\nsome other string that it may start with.\n\n447\n00:26:49.380 --> 00:26:53.920\nAnd then if you see brackets like this,\nthat means these are optional.\n\n448\n00:26:53.920 --> 00:26:59.328\nI can put a comma and\nsay, start at index five,\n\n449\n00:26:59.328 --> 00:27:03.630\nand then an end, end at index nine.\n\n450\n00:27:03.630 --> 00:27:07.439\nIf they're in brackets,\nthough, they're not required.\n\n451\n00:27:07.439 --> 00:27:11.612\nNotice how I have a left bracket, I start\nanother left bracket, and then an end and\n\n452\n00:27:11.612 --> 00:27:12.730\nthen two right.\n\n453\n00:27:12.730 --> 00:27:15.290\nThat means that I have to put a prefix.\n\n454\n00:27:16.850 --> 00:27:20.130\nBut I can put start and\na prefix and that's it.\n\n455\n00:27:20.130 --> 00:27:23.130\nOr I can put a prefix,\na start, and an end.\n\n456\n00:27:23.130 --> 00:27:25.450\nSo I can do any of those things.\n\n457\n00:27:25.450 --> 00:27:30.098\nReturn True if S starts with\nthe specified prefix, False otherwise.\n\n458\n00:27:30.098 --> 00:27:33.757\nWith optional start,\ntest S beginning at that position.\n\n459\n00:27:33.757 --> 00:27:37.219\nWith optional end,\nstop comparing S at that position.\n\n460\n00:27:37.219 --> 00:27:39.491\nPrefix can also be a tuple\nof strings to try, so\n\n461\n00:27:39.491 --> 00:27:43.140\nyou can actually give it\na collection of things to try.\n\n462\n00:27:43.140 --> 00:27:45.184\nThese are really handy because now\nI don't have to go to the Internet,\n\n463\n00:27:45.184 --> 00:27:46.237\nI don't have to figure things out.\n\n464\n00:27:46.237 --> 00:27:48.730\nI'm like, well I was trying to play\naround on the repo a little bit.\n\n465\n00:27:48.730 --> 00:27:52.950\nIf you type help and then the thing,\n\n466\n00:27:52.950 --> 00:27:56.170\nit will give you kind of\nthe documentation right up front.\n\n467\n00:27:56.170 --> 00:27:59.610\nAnd then when you're done, you just hit q,\nand then you're back out of it.\n\n468\n00:27:59.610 --> 00:28:02.920\nSo all of these things a string can do,\nand you'll probably use these at some\n\n469\n00:28:02.920 --> 00:28:07.880\npoint, capitalize,\nsometimes it's fun to build your own.\n\n470\n00:28:07.880 --> 00:28:11.180\nBut you can capitalize,\nyou can title case, you can translate,\n\n471\n00:28:11.180 --> 00:28:15.260\nyou can partition, you can see if it's\nprintable, is it lower, is it numeric.\n\n472\n00:28:15.260 --> 00:28:21.072\nVery useful, but if you ever wonder,\nhow do I do, what is zfill,\n\n473\n00:28:21.072 --> 00:28:27.140\nwell, check out with help parentheses and\nthen a string dot zfill.\n\n474\n00:28:27.140 --> 00:28:30.215\nRead the docs, figure it out,\nand poke at it a little bit.\n\n475\n00:28:30.215 --> 00:28:33.670\nAnd to some extent, you have to get used\nto doing that in programming anyway.\n\n476\n00:28:33.670 --> 00:28:36.010\nBut we've seen a few\nnew things in the repo,\n\n477\n00:28:36.010 --> 00:28:39.880\nwe've seen some of the non-obvious\nthings with strings.\n\n478\n00:28:39.880 --> 00:28:43.650\nBut we also learned that strings\nhave a lot more capabilities than we\n\n479\n00:28:43.650 --> 00:28:44.340\noriginally thought.\n\n480\n00:28:44.340 --> 00:28:46.440\nThey're zero indexed, we can slice and\n\n481\n00:28:46.440 --> 00:28:48.750\ndice them,\nwe can get individual characters.\n\n482\n00:28:48.750 --> 00:28:51.380\nWe can add them together,\nwhich is concatenation.\n\n483\n00:28:51.380 --> 00:28:55.302\nBut we can also multiply them\nwith numbers and get repeats,\n\n484\n00:28:55.302 --> 00:29:00.097\nas well as all of those other methods\nthat we've seen kind of listed out.\n\n485\n00:29:00.097 --> 00:29:03.387\nA lot going on with strings, and they just\nkeep on coming back, but for I think now,\n\n486\n00:29:03.387 --> 00:29:05.290\nthat's a pretty good stopping point.\n\n487\n00:29:05.290 --> 00:29:07.846\n&gt;&gt; Yeah, I like that help at the end,\nit's kinda like in Excel,\n\n488\n00:29:07.846 --> 00:29:09.235\nthe insert function dialog box.\n\n489\n00:29:09.235 --> 00:29:12.418\nWhere it actually tells you\neach part of the function and\n\n490\n00:29:12.418 --> 00:29:16.426\nthings that you don't really need\nto know about if you don't need it.\n\n491\n00:29:16.426 --> 00:29:20.570\nBut at least it tells you what's going on,\nso thank you for that.\n\n492\n00:29:20.570 --> 00:29:24.090\nLot of things that I was not expecting,\nbut pleasantly surprised\n\n493\n00:29:24.090 --> 00:29:27.290\nat what we could do with strings,\nso thank you so much for that.\n\n494\n00:29:27.290 --> 00:29:30.835\nI really enjoyed this episode, good one,\nso I hope you liked it as well.\n\n495\n00:29:30.835 --> 00:29:32.610\nBut we're gonna go ahead and\nwrap this one up.\n\n496\n00:29:32.610 --> 00:29:35.316\nSigning off for DevProTV,\nI've been your host, Vonne Smith.\n\n497\n00:29:35.316 --> 00:29:36.053\n&gt;&gt; And I'm Justin Dennison.\n\n498\n00:29:36.053 --> 00:29:38.405\n&gt;&gt; And we'll see you soon.\n\n499\n00:29:38.405 --> 00:29:43.452\n[MUSIC]\n\n",
          "vimeoId": "266748998"
        },
        {
          "description": "In this episode, Justin and Vonne explore the boolean data type. Justin further explores the use of booleans and operations involving booleans as well as highlights the common uses of booleans.",
          "length": "1515",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-4-1-basic_data_types_booleans-042518-PGM.00_27_47_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-4-1-basic_data_types_booleans-042518-PGM.00_27_47_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-2-4-1-basic_data_types_booleans-042518-PGM.00_27_47_09.Still001-sm.jpg",
          "title": "Basic Data Types: Booleans",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.096 --> 00:00:17.120\nHello everyone and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.120 --> 00:00:18.450\nI'm your host, Vonne Smith, and\n\n4\n00:00:18.450 --> 00:00:21.085\nwe are moving through our\nProgramming Fundamentals series.\n\n5\n00:00:21.085 --> 00:00:25.361\nIn this episode, we're gonna be taking\na closer look at the Boolean data type.\n\n6\n00:00:25.361 --> 00:00:27.390\nAnd here to help us is Mr.\nJustin Dennison.\n\n7\n00:00:27.390 --> 00:00:29.122\nHow are you?\n&gt;&gt; I'm doing fantastic, Vonne.\n\n8\n00:00:29.122 --> 00:00:31.080\nHow are you?\n&gt;&gt; I'm doing pretty good.\n\n9\n00:00:31.080 --> 00:00:33.950\nNow I know with some of our other\nepisodes with the numbers and\n\n10\n00:00:33.950 --> 00:00:38.340\nthe strings, lots of cool information\nthat I was pretty excited about.\n\n11\n00:00:39.520 --> 00:00:42.056\nI'm not sure how excited I'm\ngonna get about Booleans.\n\n12\n00:00:42.056 --> 00:00:44.090\nI thought Booleans are just on and off.\n\n13\n00:00:44.090 --> 00:00:46.230\nHow much more do we have with on and off?\n\n14\n00:00:46.230 --> 00:00:49.850\n[LAUGH]\n&gt;&gt; That can be tricky.\n\n15\n00:00:49.850 --> 00:00:53.510\nThere's not as much involved as those\ntwo respective previous episodes with\n\n16\n00:00:53.510 --> 00:00:54.570\nnumbers and strings.\n\n17\n00:00:54.570 --> 00:00:56.650\nBut Booleans can, well,\n\n18\n00:00:56.650 --> 00:01:01.380\nnot can, they are very important to\ndeveloping a larger scale program.\n\n19\n00:01:01.380 --> 00:01:04.840\nThey are the cornerstone of logic, right?\n\n20\n00:01:04.840 --> 00:01:07.750\nSo you can think of, do I like cheese?\n\n21\n00:01:07.750 --> 00:01:12.460\nYes, right, that is true,\nJustin likes cheese, true.\n\n22\n00:01:12.460 --> 00:01:16.720\nBy combining these,\nyou can branch things off and\n\n23\n00:01:16.720 --> 00:01:21.521\nhave your program be more reactive,\nmore flowcharty,\n\n24\n00:01:21.521 --> 00:01:26.050\nor you come to a path in the woods and\nyou gotta take the left or the right.\n\n25\n00:01:26.050 --> 00:01:28.930\nThat's essentially what\nBooleans provide to you.\n\n26\n00:01:28.930 --> 00:01:31.044\n&gt;&gt; Yeah, I just realized, I'm like, wow.\n\n27\n00:01:31.044 --> 00:01:34.251\nI was just,\nthis is just some fleeting thing.\n\n28\n00:01:34.251 --> 00:01:36.776\nAnd I'm like, this is everything.\n\n29\n00:01:36.776 --> 00:01:41.193\nIf you do this, then you do that.\n\n30\n00:01:41.193 --> 00:01:43.465\nAs soon as you went with the flowchart,\nI was like, yeah,\n\n31\n00:01:43.465 --> 00:01:44.590\nthese are really important.\n\n32\n00:01:44.590 --> 00:01:45.140\n[LAUGH]\n&gt;&gt; Yeah,\n\n33\n00:01:45.140 --> 00:01:48.110\nand it's weird because they seem so\nsimple.\n\n34\n00:01:48.110 --> 00:01:50.460\nYou're like, there's two values,\ntrue and false.\n\n35\n00:01:50.460 --> 00:01:53.160\nThose are the only two\nvalues that you have.\n\n36\n00:01:53.160 --> 00:01:54.200\nThat's correct, right?\n\n37\n00:01:54.200 --> 00:01:56.170\nThat's actually a true statement.\n\n38\n00:01:56.170 --> 00:02:01.680\nHowever, Booleans can be combined with so\nmany complex operators and\n\n39\n00:02:01.680 --> 00:02:06.100\ncan actually have a conversion\nbetween some of the other types,\n\n40\n00:02:06.100 --> 00:02:09.830\nbecause Python gets a little\nshaky on some of the other types.\n\n41\n00:02:09.830 --> 00:02:14.520\nThen it doesn't end up being as simple\nas one would initially think, all right?\n\n42\n00:02:14.520 --> 00:02:16.620\nBut we've talked about it.\n\n43\n00:02:16.620 --> 00:02:20.780\nLet's go ahead and poke around in\nthe REPL with Boolean data types.\n\n44\n00:02:20.780 --> 00:02:25.381\nSo let's go and take a look at the screen\nhere, and I'm gonna hop inside of REPL.\n\n45\n00:02:25.381 --> 00:02:30.224\nI know some of you are like, you know,\nwe installed that text editor way back.\n\n46\n00:02:30.224 --> 00:02:31.530\nWhen are we gonna use that?\n\n47\n00:02:31.530 --> 00:02:35.730\nWe're gonna get there, but these initial\nones, there's not a lot of impetus for\n\n48\n00:02:35.730 --> 00:02:38.430\nswitching between screens and\nthings like that.\n\n49\n00:02:38.430 --> 00:02:42.100\nSo I'm trying to keep it simple so we can\nfocus on their respective concepts, right?\n\n50\n00:02:42.100 --> 00:02:47.640\nThe goal with a REPL is to poke around,\nto see things, to reason about them,\n\n51\n00:02:47.640 --> 00:02:51.809\nbut try to build deeper understanding,\nnot just [NOISE].\n\n52\n00:02:51.809 --> 00:02:55.196\nOnce we get to more complicated things,\nthen we'll use our text editor and\n\n53\n00:02:55.196 --> 00:02:57.286\nit'll make a little more sense, all right?\n\n54\n00:02:57.286 --> 00:03:00.038\nSo that's all right.\n\n55\n00:03:00.038 --> 00:03:01.270\nLet's go ahead and clear this out.\n\n56\n00:03:01.270 --> 00:03:04.865\nAnd let's say, I don't know, likes_cheese.\n\n57\n00:03:04.865 --> 00:03:09.753\nAnd if you're just now joining us,\nlikes_cheese and cheese,\n\n58\n00:03:09.753 --> 00:03:12.970\nthey're pretty common theme with me.\n\n59\n00:03:12.970 --> 00:03:16.466\nSo it's all right, likes_cheese and\nthen, I don't know,\n\n60\n00:03:16.466 --> 00:03:21.440\nlikes_heights, = False, all right?\n\n61\n00:03:21.440 --> 00:03:22.213\nThese are the two.\n\n62\n00:03:22.213 --> 00:03:25.844\nWe've seen these in previous episodes,\ncapital T, True, capital F, False.\n\n63\n00:03:25.844 --> 00:03:26.987\nThese are special values.\n\n64\n00:03:26.987 --> 00:03:27.920\nThese are reserved words.\n\n65\n00:03:27.920 --> 00:03:30.715\nYou don't see them on the REPL,\nbut you will see them later on.\n\n66\n00:03:30.715 --> 00:03:33.350\nThey'll get color-coded\nbecause they're special.\n\n67\n00:03:33.350 --> 00:03:38.339\nAnd then if I look at the types of these,\nSo\n\n68\n00:03:38.339 --> 00:03:43.850\nTrue, not types, type, the type of that.\n\n69\n00:03:43.850 --> 00:03:47.829\nAnd then I just type type(True), type.\n\n70\n00:03:47.829 --> 00:03:50.582\n[LAUGH] There you go, Vonne.\n\n71\n00:03:50.582 --> 00:03:53.311\nSometimes things get a little,\nI got excited about cheese and\n\n72\n00:03:53.311 --> 00:03:54.685\nthen it got all twisted there.\n\n73\n00:03:54.685 --> 00:03:56.394\n[LAUGH]\n&gt;&gt; I was curious, I'm like,\n\n74\n00:03:56.394 --> 00:03:58.188\nis this a new way of testing something?\n\n75\n00:03:58.188 --> 00:03:59.743\nIs this specific to Booleans?\n\n76\n00:03:59.743 --> 00:04:01.516\nI'm like, I don't think that's right.\n\n77\n00:04:01.516 --> 00:04:04.320\n[LAUGH]\n&gt;&gt; Yeah, it wasn't, but we fixed it,\n\n78\n00:04:04.320 --> 00:04:05.730\nit's all right now.\n\n79\n00:04:05.730 --> 00:04:10.860\nAnd then,\nwhat is the type of likes_heights?\n\n80\n00:04:10.860 --> 00:04:12.640\nLike so, bool.\n\n81\n00:04:12.640 --> 00:04:17.515\nNow, in the previous episode with strings,\nright at the end, I showed you a couple of\n\n82\n00:04:17.515 --> 00:04:22.055\nthings that can be incredibly helpful\nwhen exploring these data types, like,\n\n83\n00:04:22.055 --> 00:04:23.092\nwhat can happen?\n\n84\n00:04:23.092 --> 00:04:26.751\nSo we're gonna start there because\nany time look at new things,\n\n85\n00:04:26.751 --> 00:04:28.460\nI recommend starting there.\n\n86\n00:04:29.480 --> 00:04:36.943\nThese two functions, dir,\nright, the dir of likes_cheese.\n\n87\n00:04:36.943 --> 00:04:40.483\nAnd because this is a Boolean data type,\nthat's what I'm gonna get,\n\n88\n00:04:40.483 --> 00:04:42.770\nall the thing that this can do.\n\n89\n00:04:42.770 --> 00:04:47.495\nAnd, well, I also told you everything that\n\n90\n00:04:47.495 --> 00:04:52.103\nhas an underscore around it, disregard.\n\n91\n00:04:52.103 --> 00:04:56.359\nBut, okay, bit_length, conjugate,\n\n92\n00:04:56.359 --> 00:05:00.859\ndenominator, from_bytes, imaginary or\n\n93\n00:05:00.859 --> 00:05:05.030\nimag, numerator, real, to_bytes.\n\n94\n00:05:05.030 --> 00:05:06.680\nIt's very interesting.\n\n95\n00:05:06.680 --> 00:05:08.730\nThose do not sound like Boolean things.\n\n96\n00:05:10.180 --> 00:05:15.763\nThey sound like number things.\n&gt;&gt; I'm over here going, I have what?\n\n97\n00:05:15.763 --> 00:05:18.800\n[LAUGH]\n&gt;&gt; And it's funny because\n\n98\n00:05:20.460 --> 00:05:23.300\nthe reason I showed you this is this\nis one of the times where you go,\n\n99\n00:05:23.300 --> 00:05:28.480\nI don't know if this actually,\nis this gonna be too helpful for me?\n\n100\n00:05:28.480 --> 00:05:30.190\nLet's actually take a look here.\n\n101\n00:05:30.190 --> 00:05:31.590\nLet's just pick one of these.\n\n102\n00:05:32.600 --> 00:05:36.610\nLet's go to, I don't know,\nconjugate, all right?\n\n103\n00:05:36.610 --> 00:05:46.320\nSo I'm gonna say,\nhelp(likes_cheese.conjugate).\n\n104\n00:05:46.320 --> 00:05:51.940\nAnd it says, method of builtins.bool\ninstance returns self,\n\n105\n00:05:51.940 --> 00:05:55.030\nthe complex conjugate of any integer.\n\n106\n00:05:55.030 --> 00:05:56.690\nIt's talking about numbers again.\n\n107\n00:05:56.690 --> 00:05:59.478\nThis is not really helpful, all right?\n\n108\n00:05:59.478 --> 00:06:05.469\nNow I showed you that to tell you it's not\nreally helpful, but also to tell you those\n\n109\n00:06:05.469 --> 00:06:10.777\nreserved words, True and False,\nin all actuality, behind the scenes,\n\n110\n00:06:10.777 --> 00:06:16.274\nthey're probably being used as numbers,\nlike False is zero, True is one.\n\n111\n00:06:18.100 --> 00:06:22.843\nSo kind of behaves like a number, but\nthey do have reserved words because\n\n112\n00:06:22.843 --> 00:06:26.595\nit's easier to read,\nTrue versus likes_cheese = 1.\n\n113\n00:06:26.595 --> 00:06:29.923\nThat's ambiguous, but\nif I say likes_cheese = True,\n\n114\n00:06:29.923 --> 00:06:33.165\nthen you go, okay.\n&gt;&gt; This is where we're trying\n\n115\n00:06:33.165 --> 00:06:37.866\nto use our human words and then translate\nagain to the computer words, which really\n\n116\n00:06:37.866 --> 00:06:43.110\ncomputers are all about numbers, and\nthat's what they're computing in the back.\n\n117\n00:06:43.110 --> 00:06:44.220\nSo you gotta do that.\n\n118\n00:06:44.220 --> 00:06:48.860\nBut we don't wanna use ones and zeros as\na yes or no because then it doesn't really\n\n119\n00:06:48.860 --> 00:06:51.583\nmake any sense to us.\n&gt;&gt; Exactly, and\n\n120\n00:06:51.583 --> 00:06:55.645\nit's one of those things where\nthat's probably the case.\n\n121\n00:06:55.645 --> 00:06:58.080\nI'm not making a strong assertion.\n\n122\n00:06:58.080 --> 00:07:01.080\nIt doesn't really matter\nother than the fact\n\n123\n00:07:01.080 --> 00:07:04.140\nthat when you try to use some\nof the things you just learned,\n\n124\n00:07:04.140 --> 00:07:08.680\nit's not quite as helpful as it should\nhave been or as you anticipate it to be.\n\n125\n00:07:08.680 --> 00:07:11.772\nYou're like, conjugate, numerator,\ndenominator, wait a minute,\n\n126\n00:07:11.772 --> 00:07:12.897\nthese are number things.\n\n127\n00:07:12.897 --> 00:07:19.780\nThey are, but it's more than likely that\nbool is like a number behind the scenes.\n\n128\n00:07:19.780 --> 00:07:23.050\nBut for us,\nwe're just worried about true and false.\n\n129\n00:07:24.270 --> 00:07:29.255\nBut before we move on to all\nthe things that bools can do,\n\n130\n00:07:29.255 --> 00:07:34.150\nright, or can derive from is,\nwell, let's do this.\n\n131\n00:07:35.290 --> 00:07:37.271\nLet's clear this out.\n\n132\n00:07:37.271 --> 00:07:44.775\nAnd let's say Vonne's\nfavorite number is 7, right?\n\n133\n00:07:44.775 --> 00:07:50.251\nAnd well, okay,\nwhat can I do if I say bool,\n\n134\n00:07:50.251 --> 00:07:56.467\nor what does it mean,\nrather, favorite number.\n\n135\n00:07:56.467 --> 00:07:57.985\nWhat's the bool of favorite number?\n\n136\n00:07:57.985 --> 00:08:00.603\nThis is a new function.\n\n137\n00:08:00.603 --> 00:08:06.046\nAnd this is saying give me the boolean\nrepresentation of the favorite number.\n\n138\n00:08:06.046 --> 00:08:11.418\nThis is where Python gets a little [SOUND]\ncuz if I hit Enter it actually says true.\n\n139\n00:08:11.418 --> 00:08:17.790\nAnd the reason being if I\nsay bool(0) I get false but\n\n140\n00:08:17.790 --> 00:08:22.038\nthe bool (-1) I get 0 is false,\n\n141\n00:08:22.038 --> 00:08:26.299\nanything else is true, all right?\n\n142\n00:08:26.299 --> 00:08:30.338\nThat actually plays in because as\nwe start learning more about logic,\n\n143\n00:08:30.338 --> 00:08:34.865\nthis fact can actually cause things to\ngo a little awry if you're not careful.\n\n144\n00:08:34.865 --> 00:08:39.774\nBecause behind the scenes, even if you\ndon't call this bool, Python will go,\n\n145\n00:08:39.774 --> 00:08:42.797\nI'm gonna make that make\nsense in this context.\n\n146\n00:08:42.797 --> 00:08:47.606\nIt will force your hand, and do some\nweird things if you're not aware of this.\n\n147\n00:08:47.606 --> 00:08:49.633\n&gt;&gt; And this is not just a Python thing,\n\n148\n00:08:49.633 --> 00:08:50.855\nthis is everything.\n\n149\n00:08:50.855 --> 00:08:56.640\nBecause I do this in Excel and\nhave to talk about what true and\n\n150\n00:08:56.640 --> 00:08:59.664\nfalse or words, or anything.\n\n151\n00:08:59.664 --> 00:09:04.805\nIf you put any word in this particular\nfunction, it's gonna count it as 1.\n\n152\n00:09:04.805 --> 00:09:09.061\nOnly if you type false, it's 0.\n\n153\n00:09:09.061 --> 00:09:11.535\nSo this is ubiquitous, right?\n\n154\n00:09:11.535 --> 00:09:12.495\nAm I using that correctly?\n\n155\n00:09:12.495 --> 00:09:14.479\nAcross the board.\n&gt;&gt; It's fairly ubiquitous.\n\n156\n00:09:14.479 --> 00:09:18.911\nThere are a few languages that have\na little bit different edge case rules.\n\n157\n00:09:18.911 --> 00:09:23.789\nLike well unless it's this particular\nthing and then it'll coerce to false, or\n\n158\n00:09:23.789 --> 00:09:25.370\nit'll change it to false.\n\n159\n00:09:25.370 --> 00:09:29.987\nBut for the most part 0 is false,\neverything else is true.\n\n160\n00:09:29.987 --> 00:09:34.920\nAnd I say that, to show you a couple\nof these edge cases, all right.\n\n161\n00:09:34.920 --> 00:09:39.220\nSo if I say bool of,\nthere's two quotes no spaces nothing,\n\n162\n00:09:39.220 --> 00:09:45.154\nthis is what's called an empty string,\nis false, that means there's nothing,\n\n163\n00:09:45.154 --> 00:09:49.639\nand the reason being is what's\nthe length of an empty string?\n\n164\n00:09:49.639 --> 00:09:52.231\nIt's 0 so it makes it false.\n\n165\n00:09:52.231 --> 00:09:56.243\nLikewise, if I say the bool(1,2,3).\n\n166\n00:09:56.243 --> 00:09:57.863\nThat's a list, we've seen that,\n\n167\n00:09:57.863 --> 00:10:00.520\nwe haven't quite covered what\nall of those things can do.\n\n168\n00:10:00.520 --> 00:10:01.632\nWell that's true.\n\n169\n00:10:01.632 --> 00:10:07.409\nBut what if I say the bool\nof an empty list?\n\n170\n00:10:07.409 --> 00:10:08.417\nWell that's false.\n\n171\n00:10:08.417 --> 00:10:09.392\nAnd why is that?\n\n172\n00:10:09.392 --> 00:10:14.397\nWell that's because the length, and I'm\nintentionally jumping ahead just a little\n\n173\n00:10:14.397 --> 00:10:18.984\nbit here to show you if you think about\nthese in terms of patterns, then you go\n\n174\n00:10:18.984 --> 00:10:23.595\nthat makes sense if the empty string\nhas a length, okay, collection type.\n\n175\n00:10:23.595 --> 00:10:27.164\nIf it's an empty collection\nit's probably gonna be false.\n\n176\n00:10:27.164 --> 00:10:29.940\nIf it's a full collection,\nit's gonna be true.\n\n177\n00:10:29.940 --> 00:10:33.982\nIf it's 0 it's false, if it's\nanything else it's true, all right.\n\n178\n00:10:33.982 --> 00:10:39.399\nAnd just to show you that if I say abc,\nthen that is true.\n\n179\n00:10:39.399 --> 00:10:44.283\nNow, I show you that because as we\ncontinue on you need to keep this in\n\n180\n00:10:44.283 --> 00:10:49.087\nmind because just to reiterate,\nif you don't call this sometimes\n\n181\n00:10:49.087 --> 00:10:53.926\nPython will actually call this on\nyour behalf in certain context.\n\n182\n00:10:53.926 --> 00:10:58.907\nAnd will say well abc that's kinda like\ntrue so we're gonna assume that it is,\n\n183\n00:10:58.907 --> 00:11:03.909\nso you have to be careful cuz it will make\nyour program run a little bit differently.\n\n184\n00:11:03.909 --> 00:11:05.410\nI'll say that upfront, but\n\n185\n00:11:05.410 --> 00:11:08.798\nI'll also repeat that when we\nactually come those situations.\n\n186\n00:11:08.798 --> 00:11:14.853\nSo, you can use bool to now get\na boolean representation of more or\n\n187\n00:11:14.853 --> 00:11:17.400\nless any entity in Python.\n\n188\n00:11:17.400 --> 00:11:22.845\nNow, we've seen some helps and\nwhat a bool can do.\n\n189\n00:11:22.845 --> 00:11:25.581\nIt doesn't really make sense but\nthere are a few other things.\n\n190\n00:11:25.581 --> 00:11:28.501\nLikes.cheese, let's just remind ourselves.\n\n191\n00:11:28.501 --> 00:11:33.221\nLikes.heights true and false, okay.\n\n192\n00:11:33.221 --> 00:11:38.163\nWell what if I likes.cheese and\n\n193\n00:11:38.163 --> 00:11:41.099\nlikes.heights.\n\n194\n00:11:41.099 --> 00:11:44.499\nIn a lot of other programming language\nif you have any experience and\n\n195\n00:11:44.499 --> 00:11:46.299\nmaybe you don't and that's fine.\n\n196\n00:11:46.299 --> 00:11:49.616\nYou're like wait a minute\nlikes cheese is a variable,\n\n197\n00:11:49.616 --> 00:11:53.233\nlikes heights that's a variable,\nand's not a variable.\n\n198\n00:11:53.233 --> 00:11:56.186\nLikes heights, that was anticlimactic.\n\n199\n00:11:56.186 --> 00:11:57.770\nLikes heights, false.\n\n200\n00:11:57.770 --> 00:12:01.328\nWell wait a minute, why does that work?\n\n201\n00:12:01.328 --> 00:12:08.653\nThat's because and,\nnotice it says invalid syntax.\n\n202\n00:12:08.653 --> 00:12:12.181\nIt doesn't say reference error,\nor name error,\n\n203\n00:12:12.181 --> 00:12:16.972\nexcuse me,cuz it's not a variable,\nit's actually an operator.\n\n204\n00:12:16.972 --> 00:12:20.585\nThis is asking you the question,\nlikes.cheese,\n\n205\n00:12:20.585 --> 00:12:23.195\ndo you like cheese and like heights?\n\n206\n00:12:24.797 --> 00:12:29.357\nNo, and the reason being is and\nsays all of those\n\n207\n00:12:29.357 --> 00:12:34.380\nthings have to be true in order for\nme to answer true.\n\n208\n00:12:34.380 --> 00:12:37.341\nI do like cheese but\nI do not like heights.\n\n209\n00:12:37.341 --> 00:12:39.717\nSo what is true and false?\n\n210\n00:12:39.717 --> 00:12:43.203\nSo it is the same as true and false.\n\n211\n00:12:43.203 --> 00:12:44.523\nWell what is true and false?\n\n212\n00:12:44.523 --> 00:12:45.795\nWell it's false.\n\n213\n00:12:45.795 --> 00:12:49.696\nYou actually use the word and,\n\n214\n00:12:49.696 --> 00:12:54.656\nI want this and this and this to be true.\n\n215\n00:12:54.656 --> 00:12:58.429\nIf any of them are not true,\nthen the whole thing is not true or\n\n216\n00:12:58.429 --> 00:13:03.195\nfalse correspondingly.\n&gt;&gt; And we're not using the plus sign,\n\n217\n00:13:03.195 --> 00:13:07.363\nbecause in regular,\neveryday human talk, and\n\n218\n00:13:07.363 --> 00:13:12.785\ncan also mean plus,\ncuz you're taking the word and a space and\n\n219\n00:13:12.785 --> 00:13:18.227\nanother word, and\nconcatenating it talking in normal talk.\n\n220\n00:13:18.227 --> 00:13:23.791\nSo don't use a plus sign cuz and\nis a logical operator like an and\n\n221\n00:13:23.791 --> 00:13:28.201\nor an or, or\nwords that are reserved in the logical\n\n222\n00:13:28.201 --> 00:13:31.223\noperator language.\n&gt;&gt; Exactly, and\n\n223\n00:13:31.223 --> 00:13:35.563\nit's funny that you bring up or,\nbecause guess what?\n\n224\n00:13:35.563 --> 00:13:41.080\nDo you like cheese or like heights?\n\n225\n00:13:41.080 --> 00:13:41.976\nWell, yeah, I do.\n\n226\n00:13:41.976 --> 00:13:43.320\nI like cheese.\n\n227\n00:13:43.320 --> 00:13:45.192\nThere's an implied follow up.\n\n228\n00:13:45.192 --> 00:13:49.984\nOr means if I have true or\nfalse, then it's true.\n\n229\n00:13:49.984 --> 00:13:51.820\n&gt;&gt; Because one of them,\n\n230\n00:13:51.820 --> 00:13:54.374\nit's not both have to match.\n\n231\n00:13:54.374 --> 00:13:57.444\nOnly one or the other, and\n\n232\n00:13:57.444 --> 00:14:03.387\nthat will always say yep, or no.\n&gt;&gt; Yep, exactly and this is one of those\n\n233\n00:14:03.387 --> 00:14:07.723\nthings where this really comes into play\nonce you figure out when to use these.\n\n234\n00:14:07.723 --> 00:14:10.771\nSo, I wanted to show you these key words,\n\n235\n00:14:10.771 --> 00:14:14.788\nbecause if I wanted to do\nsomething like true and true.\n\n236\n00:14:14.788 --> 00:14:16.856\nWell, that's true because\nboth of them are.\n\n237\n00:14:16.856 --> 00:14:19.079\nTrue and false.\n\n238\n00:14:19.079 --> 00:14:21.829\nWell you have to spell false right.\n\n239\n00:14:21.829 --> 00:14:22.613\nWell that's false.\n\n240\n00:14:22.613 --> 00:14:25.606\nWhat about false and true?\n\n241\n00:14:25.606 --> 00:14:26.254\nThat's false.\n\n242\n00:14:26.254 --> 00:14:29.238\nWhat about false and false?\n\n243\n00:14:29.238 --> 00:14:30.286\nThat's false.\n\n244\n00:14:30.286 --> 00:14:32.172\nThat's more or less all we need to know.\n\n245\n00:14:32.172 --> 00:14:34.696\nThe only time and is true, right,\n\n246\n00:14:34.696 --> 00:14:39.410\nthat the answer is yes is when\nboth of the sub-questions is yes.\n\n247\n00:14:39.410 --> 00:14:40.546\nDo you like cheese?\n\n248\n00:14:40.546 --> 00:14:44.267\nYes and heights, no.\n\n249\n00:14:44.267 --> 00:14:47.975\nWell that means that you can't\nsay yes to the and statement and\n\n250\n00:14:47.975 --> 00:14:49.700\nthat's just part of logic.\n\n251\n00:14:49.700 --> 00:14:52.478\nThese are actually built\nupon logic that we use but\n\n252\n00:14:52.478 --> 00:14:56.927\nI'm just showing you these respective\noperators because this is using a word.\n\n253\n00:14:56.927 --> 00:15:01.433\nPython uses standard English words for\nthose meanings.\n\n254\n00:15:01.433 --> 00:15:05.003\nIt makes it a lot more readable because\nyou end up with likes cheese or\n\n255\n00:15:05.003 --> 00:15:05.889\nlikes heights?\n\n256\n00:15:07.549 --> 00:15:09.022\nNo, yes.\n\n257\n00:15:09.022 --> 00:15:13.031\nYeah, I like heights, but\nI don't like cheese, right?\n\n258\n00:15:13.031 --> 00:15:15.231\nIt makes it a little more readable.\n\n259\n00:15:15.231 --> 00:15:22.069\nLikewise, if we come here and\nwe say true or true, true.\n\n260\n00:15:22.069 --> 00:15:27.285\nTrue or false, true.\n\n261\n00:15:27.285 --> 00:15:29.732\nFalse or false.\n\n262\n00:15:29.732 --> 00:15:34.407\nFalse, false or true.\n\n263\n00:15:34.407 --> 00:15:37.322\nThe only time or\nis false is when both answer,\n\n264\n00:15:37.322 --> 00:15:41.553\nessentially when you're answering no,\nit's no or no, right?\n\n265\n00:15:41.553 --> 00:15:45.113\nSo, that's a little\nabstract at this point.\n\n266\n00:15:45.113 --> 00:15:50.370\nBut we'll actually come back to this as we\ncontinue to build up logic using these.\n\n267\n00:15:50.370 --> 00:15:53.736\n&gt;&gt; Any time we start talking about logic,\n\n268\n00:15:53.736 --> 00:15:56.084\nI have to really slow down.\n\n269\n00:15:56.084 --> 00:15:59.960\nYou have to slow down,\nand you have to think.\n\n270\n00:15:59.960 --> 00:16:03.860\nCuz we think so fast, and we think so\nfast In our normal brains and\n\n271\n00:16:03.860 --> 00:16:06.329\nhow it can kind of, it's kind of fluid.\n\n272\n00:16:06.329 --> 00:16:11.130\nIt's like, we need to stop being fluid,\nyou need to really look at it and\n\n273\n00:16:11.130 --> 00:16:15.500\nunderstand what those words mean and\nthen to be able to evaluate.\n\n274\n00:16:15.500 --> 00:16:20.762\nSo I always have to tell myself, stop,\ntake a breath, remember the rules.\n\n275\n00:16:20.762 --> 00:16:22.987\nAnd then move down and\nthink like a computer,\n\n276\n00:16:22.987 --> 00:16:26.710\ndon't think like yourself.\n&gt;&gt; You're right, I mean, sometimes we have\n\n277\n00:16:26.710 --> 00:16:30.120\nthese things called logical fallacies,\nwhere we're like, that's obviously true.\n\n278\n00:16:30.120 --> 00:16:33.100\nWell, no, that's not obviously true,\n\n279\n00:16:33.100 --> 00:16:35.760\nbecause logically,\nthat doesn't quite make sense.\n\n280\n00:16:35.760 --> 00:16:38.680\nYou could have this ambiguous statement.\n\n281\n00:16:38.680 --> 00:16:42.480\nBut I think Python helps us because\nit's and, it's the word and, or\n\n282\n00:16:42.480 --> 00:16:44.360\nit's the word or.\n\n283\n00:16:44.360 --> 00:16:48.010\nAnd interestingly enough,\nyou can use, guess what?\n\n284\n00:16:48.010 --> 00:16:53.550\nNot like_cheese and likes_heights.\n\n285\n00:16:53.550 --> 00:16:58.290\nWell, the not key word\nactually is used by Python.\n\n286\n00:16:58.290 --> 00:16:59.920\nSo what does not do?\n\n287\n00:16:59.920 --> 00:17:01.520\nWhat's not False?\n\n288\n00:17:01.520 --> 00:17:02.580\nThat's True.\n\n289\n00:17:02.580 --> 00:17:03.770\nWhat's not True?\n\n290\n00:17:03.770 --> 00:17:04.868\nWell, that's False.\n\n291\n00:17:04.868 --> 00:17:07.381\nWhat's not likes_cheese?\n\n292\n00:17:07.381 --> 00:17:09.450\nWell, that's False.\n\n293\n00:17:09.450 --> 00:17:13.570\nThat's because likes_cheese is True.\n\n294\n00:17:13.570 --> 00:17:18.320\nIt's kind of an interesting thing because\nyou end up with these statements.\n\n295\n00:17:18.320 --> 00:17:22.060\nWhoa whoa whoa whoa,\nyou end up with a giant scrolly do dad.\n\n296\n00:17:22.060 --> 00:17:24.582\nThis not likes_cheese and likes_heights?\n\n297\n00:17:24.582 --> 00:17:29.520\nYour asking the question, do you not\nlike cheese, and you like heights?\n\n298\n00:17:29.520 --> 00:17:30.850\nRight, we took out a few words, but\n\n299\n00:17:30.850 --> 00:17:36.570\nthis is just a sentence instead of a bunch\nof archaic, cryptic characters that we can\n\n300\n00:17:36.570 --> 00:17:39.190\nuse to continue to expand on this logic.\n&gt;&gt; And\n\n301\n00:17:39.190 --> 00:17:40.870\nyou feel like you're talking in circles.\n\n302\n00:17:40.870 --> 00:17:44.080\nYou're just like, wait,\nhow many loops did we just do?\n\n303\n00:17:44.080 --> 00:17:46.470\nAnd we weren't talking\nin normal human talk.\n\n304\n00:17:46.470 --> 00:17:48.946\nIt's like, I don't not like cheese.\n\n305\n00:17:48.946 --> 00:17:50.262\nWait, what?\n\n306\n00:17:50.262 --> 00:17:56.900\n[LAUGH] How did you just put,\nokay I not, not like cheese, so I do?\n\n307\n00:17:56.900 --> 00:17:58.507\nAll right.\n\n308\n00:17:58.507 --> 00:18:02.490\n[LAUGH]\n&gt;&gt; So let's stay with that, right?\n\n309\n00:18:02.490 --> 00:18:05.870\nYou actually brought up something that\nin normal language we shouldn't do.\n\n310\n00:18:05.870 --> 00:18:07.450\nNot no, right?\n\n311\n00:18:07.450 --> 00:18:09.160\nWhat is not not False?\n\n312\n00:18:09.160 --> 00:18:10.770\nWell, it's False, why?\n\n313\n00:18:10.770 --> 00:18:14.520\nBecause not false is true,\nand what's not true is false.\n\n314\n00:18:14.520 --> 00:18:19.101\nSo what does not not likes_cheese?\n\n315\n00:18:19.101 --> 00:18:21.930\nIt's True, well, why?\n\n316\n00:18:21.930 --> 00:18:25.360\nThat's because likes_cheese is true.\n\n317\n00:18:25.360 --> 00:18:27.160\nLet me caution you on this.\n\n318\n00:18:27.160 --> 00:18:30.600\nYou know why we don't use double negatives\nand things like that in normal language?\n\n319\n00:18:30.600 --> 00:18:35.210\nBecause sometimes the meaning is,\nyou're like wait a minute, hold on.\n\n320\n00:18:35.210 --> 00:18:37.640\nI don't not like,\nwait a minute, don't like?\n\n321\n00:18:38.710 --> 00:18:40.870\nIt can be really confusing,\nit's hard to reason about.\n\n322\n00:18:42.000 --> 00:18:43.190\nI don't not like cheese?\n\n323\n00:18:43.190 --> 00:18:47.370\nWell does that mean you like cheese or you\nmean you just really don't like cheese?\n\n324\n00:18:47.370 --> 00:18:50.480\nI don't know what you're saying.\n&gt;&gt; Well, yeah, and we do that on purpose.\n\n325\n00:18:50.480 --> 00:18:53.118\nIt's like, I don't not like that person.\n\n326\n00:18:53.118 --> 00:18:53.890\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n327\n00:18:53.890 --> 00:18:56.900\n&gt;&gt; It's like, yeah, I don't hate them,\n\n328\n00:18:56.900 --> 00:18:59.582\nbut I don't know if I really like them.\n\n329\n00:18:59.582 --> 00:19:05.983\n[LAUGH] Or a person, an object, we're\nkind of giving that meaning behind it,\n\n330\n00:19:05.983 --> 00:19:11.110\nthat more meaning than what I'm\nactually saying type thing.\n\n331\n00:19:11.110 --> 00:19:13.320\nBut you can't do that in logic.\n\n332\n00:19:13.320 --> 00:19:16.838\nYou gotta be very careful about it,\nso don't do the double negatives.\n\n333\n00:19:16.838 --> 00:19:18.020\n&gt;&gt; Yeah, don't and\n\n334\n00:19:18.020 --> 00:19:21.410\nas a matter of fact,\nlet's kind of, to sum this up,\n\n335\n00:19:21.410 --> 00:19:25.220\nbecause these are the core operators,\nnot, and, and or.\n\n336\n00:19:25.220 --> 00:19:26.310\nThere are some other things,\n\n337\n00:19:26.310 --> 00:19:29.660\nbut they don't really help you\nwhen you're first starting out.\n\n338\n00:19:29.660 --> 00:19:31.340\nSo we're just gonna,\nthese are fundamentals,\n\n339\n00:19:31.340 --> 00:19:35.800\nthese are the fundamental Boolean\noperations that you can use.\n\n340\n00:19:35.800 --> 00:19:41.241\nThese continue to be, they'll crop\nup when we start doing other things,\n\n341\n00:19:41.241 --> 00:19:48.660\nso Booleans will be the answer, right, the\nyes or the no, answers to other questions.\n\n342\n00:19:48.660 --> 00:19:51.860\nBut, to kinda sum this up, right?\n\n343\n00:19:51.860 --> 00:19:57.570\nLikes_cheese, that's True,\nlikes_heights, that's False.\n\n344\n00:19:58.710 --> 00:20:02.679\nThese are answers to the questions\nthat let's say I am asking Vonne,\n\n345\n00:20:02.679 --> 00:20:04.400\nthese are Vonne's answers.\n\n346\n00:20:05.400 --> 00:20:08.500\nI don't know that, so\nI'm going to ask her a question.\n\n347\n00:20:08.500 --> 00:20:13.550\nI'm gonna say, hey Vonne,\ndo you like cheese or like heights?\n\n348\n00:20:13.550 --> 00:20:17.360\nI said or, so\nshe's going to give me either one, right?\n\n349\n00:20:17.360 --> 00:20:19.780\nShe can say yes to either one,\nand that's fine.\n\n350\n00:20:21.000 --> 00:20:25.150\nAnd I can say well,\nlikes_cheese or likes_heights.\n\n351\n00:20:25.150 --> 00:20:26.160\nWe've seen this before.\n\n352\n00:20:27.640 --> 00:20:29.090\nWell, that's easy to reason about.\n\n353\n00:20:29.090 --> 00:20:31.160\nDo you like cheese or do you like heights?\n\n354\n00:20:32.420 --> 00:20:32.920\nOkay.\n\n355\n00:20:35.000 --> 00:20:39.360\nHere's the comparison of doing\nthat weird double negative thing.\n\n356\n00:20:39.360 --> 00:20:46.965\nDo you not not likes_cheese or\nnot not likes_heights?\n\n357\n00:20:50.650 --> 00:20:53.260\nThey actually mean the same thing,\nlogically.\n\n358\n00:20:54.860 --> 00:20:58.200\nThis is really hard to reason about,\ndo you not not like cheese?\n\n359\n00:20:59.830 --> 00:21:01.250\nWait a minute.\n\n360\n00:21:01.250 --> 00:21:02.590\nDo I not not like?\n\n361\n00:21:02.590 --> 00:21:05.470\nI do like cheese, so yes.\n\n362\n00:21:05.470 --> 00:21:06.910\nDo you not not like heights?\n\n363\n00:21:08.230 --> 00:21:09.150\nMaybe, I don't.\n\n364\n00:21:10.390 --> 00:21:14.080\nWhen you can,\nif you ever see yourself doing this, stop.\n\n365\n00:21:15.110 --> 00:21:19.069\nDon't do this, keep it simple.\n&gt;&gt; Sorry to jump in here, but even if you\n\n366\n00:21:19.069 --> 00:21:24.284\nsaid not not like cheese or not heights,\nthen you have double here, a single there.\n\n367\n00:21:24.284 --> 00:21:29.574\nAnd then I do like cheese and\nI don't like heights,\n\n368\n00:21:29.574 --> 00:21:32.658\nso that would be true, yeah?\n\n369\n00:21:32.658 --> 00:21:35.910\n[LAUGH] I'm already confusing myself.\n&gt;&gt; And it's weird, right?\n\n370\n00:21:35.910 --> 00:21:39.060\nSo not not likes_cheese or\nnot likes_heights.\n\n371\n00:21:39.060 --> 00:21:40.240\nThat's also True.\n\n372\n00:21:40.240 --> 00:21:44.310\nSo they all evaluate to the same answer,\nbut why?\n\n373\n00:21:44.310 --> 00:21:47.290\nWell, not not likes_cheese,\nwe already saw that not not, actually,\n\n374\n00:21:47.290 --> 00:21:49.795\nthis gives you whatever you\nstarted with back, so not not.\n\n375\n00:21:49.795 --> 00:21:53.210\n[LAUGH] That's really weird to say,\nnot not.\n\n376\n00:21:53.210 --> 00:21:55.830\nSo if it's not false, that's true,\nand not true is false.\n\n377\n00:21:55.830 --> 00:21:58.590\nSo you just get back what you started\nwith, as far as the Boolean is concerned.\n\n378\n00:22:00.250 --> 00:22:04.520\nSo not not likes_cheese, that's True.\n\n379\n00:22:04.520 --> 00:22:06.740\nWhat about not likes_heights?\n\n380\n00:22:08.640 --> 00:22:11.880\nThat's True now,\nbecause likes heights was false.\n\n381\n00:22:11.880 --> 00:22:16.750\nBut since this is an or,\nthat didn't change anything, okay?\n\n382\n00:22:16.750 --> 00:22:21.770\nBut let's, for instance,\nsay that instead we have an and, so\n\n383\n00:22:21.770 --> 00:22:26.969\nnot not likes_cheese and\n\n384\n00:22:26.969 --> 00:22:30.980\nnot likes_heights.\n\n385\n00:22:30.980 --> 00:22:33.770\nAll right, that's still true,\nthat makes sense.\n\n386\n00:22:33.770 --> 00:22:35.890\nBut I'm just gonna hit up,\nin the ripple you can hit up,\n\n387\n00:22:35.890 --> 00:22:38.640\nin order to give you the last line,\nyou could continue to hit up.\n\n388\n00:22:38.640 --> 00:22:42.610\nAnd I'm going to go back, and I'm gonna\ngo back to this one but just changing or.\n\n389\n00:22:43.650 --> 00:22:47.388\nSo not not likes_cheese and\nnot not likes_heights.\n\n390\n00:22:47.388 --> 00:22:48.880\nFalse.\n\n391\n00:22:48.880 --> 00:22:49.890\nWell, wait a minute.\n\n392\n00:22:49.890 --> 00:22:52.825\nDoes that mean that they\ndon't not like cheese?\n\n393\n00:22:52.825 --> 00:22:55.085\n[LAUGH] Or is that because\nthey don't not like heights?\n\n394\n00:22:56.210 --> 00:22:57.508\nI'm confused, it's really confusing.\n\n395\n00:22:57.508 --> 00:23:00.988\nAnd if you ever see code like\nthis you can go, wait a minute,\n\n396\n00:23:00.988 --> 00:23:04.083\nthere's probably an easier\nway to simplify what I mean,\n\n397\n00:23:04.083 --> 00:23:08.286\nnot not likes_cheese or not not\nlikes_heights is really probably better.\n\n398\n00:23:08.286 --> 00:23:11.335\nBut do you like cheese or\ndo you like heights?\n\n399\n00:23:11.335 --> 00:23:15.085\nAnd if you want both of them to be\nanswered yes before doing anything, then,\n\n400\n00:23:15.085 --> 00:23:18.640\nhey, do you like cheese and like heights?\n\n401\n00:23:18.640 --> 00:23:23.560\nI know that's an oddly specific kind\nof mutually exclusive set of things.\n\n402\n00:23:23.560 --> 00:23:26.340\nIt's probably not gonna\ncome up in conversation,\n\n403\n00:23:26.340 --> 00:23:29.500\nbut keep it as simple as possible.\n\n404\n00:23:29.500 --> 00:23:32.190\nAnd the only time you should use not is\n\n405\n00:23:32.190 --> 00:23:35.660\nwhen it operates one time\non only one argument.\n\n406\n00:23:36.700 --> 00:23:42.020\nCase in point,\nkind of this final little, I want to ask\n\n407\n00:23:42.020 --> 00:23:47.260\ndo you like cheese and\ndo you not like heights, right?\n\n408\n00:23:48.310 --> 00:23:52.090\nYes, that's fine, but\n\n409\n00:23:52.090 --> 00:23:56.000\neven with that inclusion of not,\nyou still can get a little weird.\n\n410\n00:23:56.000 --> 00:23:58.540\nDo you like cheese and\nyou don't like heights?\n\n411\n00:23:58.540 --> 00:24:02.030\nWell do you like cheese and heights,\nor do you like cheese or heights?\n\n412\n00:24:02.030 --> 00:24:06.020\nThis, we'll further explore that, but\nthese are the three operations, and\n\n413\n00:24:06.020 --> 00:24:09.700\nthey're actually just words,\nand, or and not.\n\n414\n00:24:09.700 --> 00:24:12.070\nThat we can get started with Booleans,\n\n415\n00:24:12.070 --> 00:24:16.560\nas long as we remember Booleans\nhave some odd patterns.\n\n416\n00:24:16.560 --> 00:24:22.020\nOther things can be represented as\na Boolean, like number strings and lists.\n\n417\n00:24:22.020 --> 00:24:26.858\nBut once we have these kind of core things\nwe can start building up our logical\n\n418\n00:24:26.858 --> 00:24:30.881\npatterns that we'll use in\nactually programming solutions.\n\n419\n00:24:30.881 --> 00:24:35.850\nSo doesn't seem too bad, but they end up\nplaying a paramount role as we continue\n\n420\n00:24:35.850 --> 00:24:40.523\nto learn, well, programming.\n&gt;&gt; Yeah, something so simple, but yet\n\n421\n00:24:40.523 --> 00:24:43.409\nyou can get yourself so\nconfused really quickly.\n\n422\n00:24:43.409 --> 00:24:50.100\nAnd like you said, it is everything that\nwe do in programming, ifs and thens.\n\n423\n00:24:50.100 --> 00:24:52.370\nAnd it's just all about yes or no.\n\n424\n00:24:52.370 --> 00:24:57.750\nSo I think yes, we are done, and ye,s we\nare going to go ahead and wrap it up.\n\n425\n00:24:57.750 --> 00:25:01.140\nSo that is true, and\nwe're gonna sign off for DevProTV.\n\n426\n00:25:01.140 --> 00:25:03.720\nI've been your host, Vonne Smith.\n&gt;&gt; And I'm Justin Dennison.\n\n427\n00:25:03.720 --> 00:25:05.582\n&gt;&gt; And we'll see you soon.\n\n428\n00:25:05.582 --> 00:25:09.834\n[SOUND]\n\n",
          "vimeoId": "266751154"
        }
      ],
      "title": "Basic Data Types"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Vonne explore comparing data using basic data types such as number, string, and booleans. Justin explores which types of data are comparable and why you would want to compare data.",
          "length": "1895",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-1-1-compare_data-042618-PGM.00_36_26_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-1-1-compare_data-042618-PGM.00_36_26_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-1-1-compare_data-042618-PGM.00_36_26_09.Still001-sm.jpg",
          "title": "Compare Data",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.246 --> 00:00:17.224\nHello, everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.224 --> 00:00:17.903\nI'm your host,\n\n4\n00:00:17.903 --> 00:00:21.320\nVonne Smith, and we're continuing on\nwith our programming fundamentals.\n\n5\n00:00:21.320 --> 00:00:25.437\nAnd we're gonna be talking about comparing\ndata, and here to help us is Mr.\n\n6\n00:00:25.437 --> 00:00:27.712\nJustin Dennison, how are you?\n&gt;&gt; I'm doing fantastic, Vonne,\n\n7\n00:00:27.712 --> 00:00:29.325\nhow are you?\n&gt;&gt; I'm doing pretty good,\n\n8\n00:00:29.325 --> 00:00:32.470\nwe're gonna compare apples and\noranges or something like that?\n\n9\n00:00:32.470 --> 00:00:33.680\n&gt;&gt; It's gotta be close.\n\n10\n00:00:33.680 --> 00:00:36.850\nAll I know is apples, if there\nare red apples, I don't like them.\n\n11\n00:00:36.850 --> 00:00:38.110\nBut that's just me, right?\n\n12\n00:00:38.110 --> 00:00:40.948\nI'm not talking about the ones with\na little bit of green on them like Fuji's\n\n13\n00:00:40.948 --> 00:00:42.160\nor Gala's.\n\n14\n00:00:42.160 --> 00:00:45.268\nIt's like red Macintosh,\nI just don't like the texture.\n\n15\n00:00:45.268 --> 00:00:48.552\nBut maybe I'm getting\na little sidetracked there.\n\n16\n00:00:48.552 --> 00:00:49.088\n&gt;&gt; So we say,\n\n17\n00:00:49.088 --> 00:00:50.834\nlikes apple equals false?\n&gt;&gt; [LAUGH]\n\n18\n00:00:50.834 --> 00:00:51.942\n&gt;&gt; Likes red apple.\n\n19\n00:00:51.942 --> 00:00:53.545\n&gt;&gt; Red apples, yes.\n\n20\n00:00:53.545 --> 00:00:55.227\n&gt;&gt; And I'm like going delicious,\n\n21\n00:00:55.227 --> 00:00:56.093\nmm-mm.\n&gt;&gt; Mm-hm.\n\n22\n00:00:56.093 --> 00:00:56.785\n&gt;&gt; Yeah, that feel good.\n\n23\n00:00:56.785 --> 00:00:57.484\n&gt;&gt; [LAUGH]\n\n24\n00:00:57.484 --> 00:00:59.228\n&gt;&gt; But now we're gonna be comparing data,\n\n25\n00:00:59.228 --> 00:01:02.059\nand you could think of it as I'm\ncomparing two entities, right?\n\n26\n00:01:02.059 --> 00:01:05.640\nSo when you're talking about computers,\nyou have to and more or\n\n27\n00:01:05.640 --> 00:01:08.040\nless have that data encoded in something.\n\n28\n00:01:08.040 --> 00:01:11.625\nIn the last few episodes, we've been\ntalking about how to encode those types.\n\n29\n00:01:11.625 --> 00:01:15.167\nNow there's a few of those\nthat we haven't gotten to,\n\n30\n00:01:15.167 --> 00:01:17.900\nlike list and dictionary and toppled.\n\n31\n00:01:17.900 --> 00:01:20.173\nAs far as in depth, we've seen them.\n\n32\n00:01:20.173 --> 00:01:23.950\nBut the reason being is I wanna make sure\nwe understand all the things we can do\n\n33\n00:01:23.950 --> 00:01:25.675\nwith these more basic data types.\n\n34\n00:01:25.675 --> 00:01:29.130\nLike Boolean, string, even though\nstring is not technically basic.\n\n35\n00:01:29.130 --> 00:01:33.330\nIt's basic when you look at it from\nkind of an outside perspective.\n\n36\n00:01:33.330 --> 00:01:35.060\nNumbers, right?\n\n37\n00:01:35.060 --> 00:01:38.990\nThose three eh,\nthose are pretty straightforward.\n\n38\n00:01:38.990 --> 00:01:42.594\nAnd well, what can we do,\nhow do we compare those respective pieces?\n\n39\n00:01:42.594 --> 00:01:46.130\nAnd what can we expect as\nfar as Python is concerned?\n\n40\n00:01:46.130 --> 00:01:49.247\nSo comparison operators, right?\n\n41\n00:01:49.247 --> 00:01:53.360\nLess than, less than or equal to,\nequal to, not equal to.\n\n42\n00:01:54.420 --> 00:01:56.824\nAnd then greater than,\ngreater than or equal to.\n\n43\n00:01:56.824 --> 00:01:59.860\nWe're comparing something.\n\n44\n00:01:59.860 --> 00:02:02.917\nWhat they mean though, actually,\nhas to do with what you're comparing,\n\n45\n00:02:02.917 --> 00:02:04.674\nthe types of data that you're comparing.\n\n46\n00:02:04.674 --> 00:02:08.825\nSo technically we're still talking\nabout this context specific,\n\n47\n00:02:08.825 --> 00:02:10.960\nlike data type behaviors.\n\n48\n00:02:10.960 --> 00:02:13.100\nBut these are respective operators.\n\n49\n00:02:14.230 --> 00:02:17.202\nNow, I'm also gonna show you some things\nthat are gonna crop up just to let you\n\n50\n00:02:17.202 --> 00:02:19.050\nknow here are the errors we're gonna see.\n\n51\n00:02:19.050 --> 00:02:20.830\nI'm, intentionally, gonna break things.\n\n52\n00:02:22.050 --> 00:02:23.220\nSo just stay with us.\n\n53\n00:02:23.220 --> 00:02:25.708\nBut we've done a lot of talking.\n\n54\n00:02:25.708 --> 00:02:28.500\nIt's probably good if we get\nstarted here this momentarily.\n\n55\n00:02:28.500 --> 00:02:29.921\n&gt;&gt; As soon as you said that,\n\n56\n00:02:29.921 --> 00:02:31.451\nI have a question.\n&gt;&gt; [LAUGH]\n\n57\n00:02:31.451 --> 00:02:32.813\n&gt;&gt; We're just talking\n\n58\n00:02:32.813 --> 00:02:34.420\nabout the syntax of it.\n\n59\n00:02:34.420 --> 00:02:37.845\nWe're not doing like we need\nto look at our total sales.\n\n60\n00:02:37.845 --> 00:02:41.475\nAnd see if it's greater than or\nequal to our quota,\n\n61\n00:02:41.475 --> 00:02:45.580\nbecause then we've met our sales numbers.\n\n62\n00:02:45.580 --> 00:02:48.360\nWe're just talking what they look like.\n&gt;&gt; We're\n\n63\n00:02:48.360 --> 00:02:52.320\ntalking very basic kind of how you\ncan think of comparisons as more or\n\n64\n00:02:52.320 --> 00:02:54.740\nless questions that\nare gonna have answers.\n\n65\n00:02:54.740 --> 00:02:57.053\nAnd if it's a yes or no question,\nwhich it typically is,\n\n66\n00:02:57.053 --> 00:02:58.705\nit's gonna be answered with a Boolean.\n\n67\n00:02:58.705 --> 00:03:00.450\nSo we can kinda pull in some of that.\n\n68\n00:03:00.450 --> 00:03:02.380\nBut we're not gonna get\nvery complicated in it and\n\n69\n00:03:02.380 --> 00:03:03.860\nstart doing manipulations or anything.\n\n70\n00:03:03.860 --> 00:03:05.950\nIt's more about here's a syntax.\n\n71\n00:03:05.950 --> 00:03:07.581\nLet's see how we can\nkinda put these together.\n\n72\n00:03:07.581 --> 00:03:09.338\nLet's make some sense about it and\n\n73\n00:03:09.338 --> 00:03:12.055\nhow it reads.\n&gt;&gt; And then we could do more complex\n\n74\n00:03:12.055 --> 00:03:16.106\ncoding of looking at this and\ncomparing and all that kinda stuff.\n\n75\n00:03:16.106 --> 00:03:19.400\nBut we need to learn how to\ncrawl before we can walk.\n\n76\n00:03:19.400 --> 00:03:22.510\nSo I believe that's what we're gonna do.\n&gt;&gt; We're gonna try our best and\n\n77\n00:03:22.510 --> 00:03:24.790\nhopefully there's no gravel\nthat'll get stuck in our knees.\n\n78\n00:03:24.790 --> 00:03:26.640\nBut let's go ahead and\ntake a look at the screen here.\n\n79\n00:03:26.640 --> 00:03:28.730\nAnd I just have a Terminal window open.\n\n80\n00:03:28.730 --> 00:03:33.670\nJust a real quick review, Right Cmd+Space.\n\n81\n00:03:33.670 --> 00:03:37.466\nI'm gonna look for the Terminal Command,\nor CMD, on Windows or\n\n82\n00:03:37.466 --> 00:03:39.379\nactually Terminal or Console.\n\n83\n00:03:39.379 --> 00:03:43.021\nAny of those in any of the platforms,\njust as a quick reminder.\n\n84\n00:03:43.021 --> 00:03:44.703\nSometimes I get ahead of myself, and\n\n85\n00:03:44.703 --> 00:03:47.207\nI just wanna make sure that\neverybody knows where I am.\n\n86\n00:03:47.207 --> 00:03:48.780\nI'm still in a Terminal,\nwe're still in a REPL.\n\n87\n00:03:48.780 --> 00:03:51.478\nWe haven't quite got to actually\nneeding to save text yet.\n\n88\n00:03:51.478 --> 00:03:54.160\nBut that's all right,\nwe're gonna get there, right?\n\n89\n00:03:54.160 --> 00:03:58.747\nBut let's go ahead and start a Python3\nREPL and I'm gonna hold Ctrl and hit L.\n\n90\n00:03:58.747 --> 00:04:03.350\nAnd that's just to clear things out,\nso we don't have weird stuff, right?\n\n91\n00:04:03.350 --> 00:04:06.150\nSo let's think about it.\n\n92\n00:04:06.150 --> 00:04:13.730\nLet's go, I don't know, num_one = 7,\ncuz that's Vonne's favorite number.\n\n93\n00:04:13.730 --> 00:04:19.750\nAnd num_two = 2, cuz that's my favorite\nnumber, cuz this is the only even prime.\n\n94\n00:04:19.750 --> 00:04:21.200\nYeah, think about that.\n\n95\n00:04:21.200 --> 00:04:24.200\nNo, I'm joking, it's perfectly okay.\n\n96\n00:04:24.200 --> 00:04:25.900\nI'm a little bit of a number nerd.\n\n97\n00:04:25.900 --> 00:04:29.146\nAnd then num_three = 21.\n\n98\n00:04:29.146 --> 00:04:32.619\nSure, let's go with that.\n\n99\n00:04:32.619 --> 00:04:34.982\nI just picked 21, why not?\n\n100\n00:04:34.982 --> 00:04:39.063\nAll right, now there's a few questions\nthat you can ask, because even though you\n\n101\n00:04:39.063 --> 00:04:42.754\nsee on a screen that I've assigned\nthese two a respective value, right?\n\n102\n00:04:42.754 --> 00:04:47.642\nI know that num_one behind the scenes\nis a container that has the number\n\n103\n00:04:47.642 --> 00:04:49.770\n7 kind of stored inside of it.\n\n104\n00:04:51.160 --> 00:04:55.576\nBut when I'm programming, there may be\ntimes that this information is somewhere\n\n105\n00:04:55.576 --> 00:04:59.160\nelse, or someone else's program\nthat's in,or its user input.\n\n106\n00:05:00.310 --> 00:05:02.130\nI need to be able to ask a question.\n\n107\n00:05:02.130 --> 00:05:06.700\nI need to be able to ask my\ncomputer a question using Python\n\n108\n00:05:06.700 --> 00:05:09.510\nto determine hey, num_one.\n\n109\n00:05:09.510 --> 00:05:13.830\nIs that less than or\ngreater than or equal to?\n\n110\n00:05:13.830 --> 00:05:14.870\nAnd we're starting with numbers,\n\n111\n00:05:14.870 --> 00:05:17.210\nbecause I think that's where\ncomparisons make most sense, right?\n\n112\n00:05:17.210 --> 00:05:21.540\nWould you rather make $5 an hour or\n$50 an hour?\n\n113\n00:05:21.540 --> 00:05:23.896\nAnd now you go to a 50, I go why?\n\n114\n00:05:23.896 --> 00:05:25.880\nBecause 5 is less than 50.\n\n115\n00:05:25.880 --> 00:05:28.944\nWe all have kind of this\nsemi-intuitive feel for\n\n116\n00:05:28.944 --> 00:05:32.239\nnumber comparisons at least\nwhole numbers anyway.\n\n117\n00:05:32.239 --> 00:05:33.994\nNow, also one final thought.\n\n118\n00:05:33.994 --> 00:05:38.190\nEverything I show you with whole numbers\nis still going to hold for floats.\n\n119\n00:05:38.190 --> 00:05:42.010\nExcept for a couple of things where I'm\ngonna try to reproduce an edge case.\n\n120\n00:05:42.010 --> 00:05:44.450\nSometimes it's a little odd.\n\n121\n00:05:44.450 --> 00:05:46.410\nSo let's do this.\n\n122\n00:05:46.410 --> 00:05:50.646\nLet's say num_one and\nif I wanna know if it's less than,\n\n123\n00:05:50.646 --> 00:05:54.550\nI'm asking the question,\nis num_one &lt; num_two?\n\n124\n00:05:55.770 --> 00:05:58.210\nIt is not, what is that actually saying?\n\n125\n00:05:58.210 --> 00:06:00.892\n7 &lt; 2.\n\n126\n00:06:00.892 --> 00:06:02.205\nSo I'm asking a question.\n\n127\n00:06:02.205 --> 00:06:08.360\nWhenever you see this, you should be\nasking the question, is num_one &lt; num_two?\n\n128\n00:06:08.360 --> 00:06:10.740\nNo, then that's false.\n\n129\n00:06:10.740 --> 00:06:17.516\nAnd if it is true, right, so\nif I say is num_two &lt; num_one.\n\n130\n00:06:17.516 --> 00:06:22.270\nWell, notice I've switched the order,\nright?\n\n131\n00:06:22.270 --> 00:06:23.200\nSo I've switched the order.\n\n132\n00:06:23.200 --> 00:06:27.515\nThat is true, because 2 is less than 7.\n\n133\n00:06:27.515 --> 00:06:30.940\nSo these are very simple\nkind of comparisons.\n\n134\n00:06:30.940 --> 00:06:34.177\nNow, we've seen this, I don't know,\nmaybe in grade school.\n\n135\n00:06:34.177 --> 00:06:36.347\nOr depending on what your experience is,\n\n136\n00:06:36.347 --> 00:06:39.060\nyou might have seen it\nmore recently than this.\n\n137\n00:06:39.060 --> 00:06:43.370\nThis less than symbol, that is usually\nin the lower part of your right-hand\n\n138\n00:06:43.370 --> 00:06:46.980\nside of your keyboard if you're\non an American standard keyboard.\n\n139\n00:06:46.980 --> 00:06:50.510\nSadly, I can't give you a lot of\ndirection if you're using an alternative\n\n140\n00:06:50.510 --> 00:06:51.410\nkeyboard layout.\n\n141\n00:06:51.410 --> 00:06:55.485\nSo look for this particular symbol,\nand that's all you're gonna type.\n\n142\n00:06:55.485 --> 00:06:59.798\nNow, what's interesting is if I\ndid something like this, is 7 &lt; 7?\n\n143\n00:06:59.798 --> 00:07:02.556\nI'm not using the variables for now.\n\n144\n00:07:02.556 --> 00:07:04.930\nIs 7 &lt; 7?\n\n145\n00:07:04.930 --> 00:07:07.880\nFalse, no, 7 is not less than 7.\n\n146\n00:07:07.880 --> 00:07:10.230\nIt is actually equal to 7.\n\n147\n00:07:10.230 --> 00:07:12.746\n7 and 7 are the same number.\n\n148\n00:07:12.746 --> 00:07:18.119\nBut what if I wanted to,\nwhat if I was like well,\n\n149\n00:07:18.119 --> 00:07:21.920\nexcuse me, num_one &lt; 7, right?\n\n150\n00:07:21.920 --> 00:07:23.260\nThat is false.\n\n151\n00:07:23.260 --> 00:07:24.950\nWhat if I wanted to include 7?\n\n152\n00:07:24.950 --> 00:07:30.130\nSo this is still false, because num_one\nactually has 7 stored behind it.\n\n153\n00:07:30.130 --> 00:07:33.529\nWhat if I wanted to say,\nI wanna see if it's less and including 7.\n\n154\n00:07:33.529 --> 00:07:36.090\nAnd there's two different\nways I could do this.\n\n155\n00:07:36.090 --> 00:07:40.360\nNow I'm setting up to show\nyou a different operator.\n\n156\n00:07:40.360 --> 00:07:45.320\nBut some people may go yeah,\njust make that 8 and 7 is included now.\n\n157\n00:07:45.320 --> 00:07:48.022\nAnd now that becomes true and you go okay.\n\n158\n00:07:48.022 --> 00:07:48.606\nThat is one way.\n\n159\n00:07:48.606 --> 00:07:54.821\nBut what if I wanted to know all the way\nup to 7 but nothing beyond, right?\n\n160\n00:07:54.821 --> 00:08:01.448\nIs num_one &lt;= notice there's an or there?\n\n161\n00:08:01.448 --> 00:08:07.776\nSo if it's Less than 7 this will be true,\nif it's equal to it will be true as well.\n\n162\n00:08:07.776 --> 00:08:11.245\nIs num_one &lt;=, and notice,\n\n163\n00:08:11.245 --> 00:08:16.896\nall I did was actually type\nthe less than operator and\n\n164\n00:08:16.896 --> 00:08:19.989\nthen = a single equal sign.\n\n165\n00:08:19.989 --> 00:08:23.806\nSometimes we over think it,\nthat's not how we write it,\n\n166\n00:08:23.806 --> 00:08:27.397\nif we're writing it out in math or\nwhatever it may be.\n\n167\n00:08:27.397 --> 00:08:30.050\nIt's actually a less than and\nthen there's a line under it.\n\n168\n00:08:30.050 --> 00:08:32.025\nAnd you're like,\nhow do I put that line under it?\n\n169\n00:08:32.025 --> 00:08:36.179\nYou can actually do that\n[LAUGH] in some instances, but\n\n170\n00:08:36.179 --> 00:08:41.652\nit requires you to hold an alt key and\ntype numbers and stuff.\n\n171\n00:08:41.652 --> 00:08:43.470\nIt's crazy, it's like a custom symbol.\n\n172\n00:08:43.470 --> 00:08:45.663\nThat doesn't actually\nwork in this capacity.\n\n173\n00:08:45.663 --> 00:08:47.804\n&gt;&gt; At first I'm like no you can't,\n\n174\n00:08:47.804 --> 00:08:52.544\nI'm like, wait you're talking about\nlike a unit code character set or\n\n175\n00:08:52.544 --> 00:08:54.616\ncharacter code of 2-8-5.\n\n176\n00:08:54.616 --> 00:08:57.754\nI don't even think that even exists,\nbut you know what I'm trying to say.\n\n177\n00:08:57.754 --> 00:08:59.026\n&gt;&gt; Yeah, it's very special,\n\n178\n00:08:59.026 --> 00:09:00.980\nit's like all those special symbols.\n\n179\n00:09:00.980 --> 00:09:03.975\nYou can technically type it in some\nprograms but Python will go I don't\n\n180\n00:09:03.975 --> 00:09:07.150\nknow what you're talking about.\n&gt;&gt; I was gonna say it wouldn't\n\n181\n00:09:07.150 --> 00:09:10.310\ndo the comparison, it's just gonna\nsee it as a special character and\n\n182\n00:09:10.310 --> 00:09:13.780\nbe I don't know what that means,\nI am not going to do\n\n183\n00:09:13.780 --> 00:09:16.940\nthe comparison that you're asking.\n&gt;&gt; It will not,\n\n184\n00:09:16.940 --> 00:09:19.080\nif I'm not mistaken it will syntax error.\n\n185\n00:09:19.080 --> 00:09:21.960\nAnd I'm not gonna do that because I think\nthat's a little beyond the scope of\n\n186\n00:09:21.960 --> 00:09:22.690\nwhat we need to.\n\n187\n00:09:22.690 --> 00:09:27.464\nBut I'm just letting you know, if you did\nsomething like find it in another program,\n\n188\n00:09:27.464 --> 00:09:29.055\nhighlight, copy, paste,\n\n189\n00:09:29.055 --> 00:09:33.260\nyou're probably gonna get an error\nunless some crazy stuff just happens.\n\n190\n00:09:33.260 --> 00:09:36.998\nBut that's, so is num_one &lt;= 7?\n\n191\n00:09:36.998 --> 00:09:40.175\nIt is, and that's because num_one is 7, so\n\n192\n00:09:40.175 --> 00:09:44.900\nthis equal part, remember in\na previous episode we talked about or,\n\n193\n00:09:44.900 --> 00:09:49.640\nif either or of them is true\nthen the whole thing is true.\n\n194\n00:09:49.640 --> 00:09:52.090\nSo that's the less than, all right.\n\n195\n00:09:52.090 --> 00:09:56.515\nWell, we're kinda gonna go through\nthe gradient or the, it's not,\n\n196\n00:09:56.515 --> 00:09:59.890\nI guess it is a gradient\nit's not really a continuum.\n\n197\n00:09:59.890 --> 00:10:04.213\nIf I can do less than, less than or equal\nto, well what if I wanted to know, hey,\n\n198\n00:10:04.213 --> 00:10:05.326\nis this exactly 7?\n\n199\n00:10:05.326 --> 00:10:09.783\nI wanna know is num_one exactly 7, right,\n\n200\n00:10:09.783 --> 00:10:13.770\nI'm asking myself a question.\n\n201\n00:10:13.770 --> 00:10:18.850\nSo you have to suspend your kind\nof understanding in a context.\n\n202\n00:10:18.850 --> 00:10:22.060\nWe'll eventually get to see\nhow these are used in context.\n\n203\n00:10:22.060 --> 00:10:25.582\nBut we're just making sure we know\nthe respective syntax for now.\n\n204\n00:10:25.582 --> 00:10:28.359\nSo is it equal to 7, right?\n\n205\n00:10:28.359 --> 00:10:30.300\nBecause this is coming\nfrom somewhere else.\n\n206\n00:10:30.300 --> 00:10:32.340\nI don't know, but\nyou can ask the computer, is it?\n\n207\n00:10:32.340 --> 00:10:33.680\nAnd it goes, yeah, it is.\n\n208\n00:10:33.680 --> 00:10:37.508\nOf course, Vonne, there may be\ntimes where you wanna go, well,\n\n209\n00:10:37.508 --> 00:10:43.170\nis num_two = 7, and we know that\nthe number two is actually in there.\n\n210\n00:10:43.170 --> 00:10:44.750\nIs num_two, no, it's not.\n\n211\n00:10:44.750 --> 00:10:49.044\nSo you can ask distinct equality,\n\n212\n00:10:49.044 --> 00:10:52.744\nwe can also say, is it not =,\n\n213\n00:10:52.744 --> 00:10:57.860\nnotice there's a exclamation point.\n\n214\n00:10:57.860 --> 00:10:59.760\nWhen you see an exclamation point,\n\n215\n00:10:59.760 --> 00:11:04.430\nif I'm not mistaken this is the only time\nthat you're gonna see this in Python.\n\n216\n00:11:04.430 --> 00:11:06.650\nThere are some other\nprogramming languages.\n\n217\n00:11:06.650 --> 00:11:11.680\nIf you have any other previous experience,\nthis will look fairly, you'll go,\n\n218\n00:11:11.680 --> 00:11:15.930\nyeah I've seen that before,\nbut not equal to.\n\n219\n00:11:15.930 --> 00:11:19.142\nThis is less than or\nequal to, this is not equal,\n\n220\n00:11:19.142 --> 00:11:22.260\nnotice there's no or in what I'm saying.\n\n221\n00:11:22.260 --> 00:11:27.133\nThis is combined operator, these two\ncharacters actually mean not equal to.\n\n222\n00:11:27.133 --> 00:11:32.053\nSo, is num_two which has\nthe number two not equal to 7?\n\n223\n00:11:32.053 --> 00:11:37.335\nIt is, yeah it's not equal, remember what\nI said in the previous episode though,\n\n224\n00:11:37.335 --> 00:11:40.380\nusing not can make things confusing.\n\n225\n00:11:40.380 --> 00:11:44.440\nSo, I'm not saying there's not\na use case for this, I use this.\n\n226\n00:11:44.440 --> 00:11:48.280\nJust so we're clear, just for\nclarity, you will use this.\n\n227\n00:11:48.280 --> 00:11:54.138\nJust don't do crazy stuff like,\n\n228\n00:11:54.138 --> 00:11:59.167\nis num_two != num_two?\n\n229\n00:11:59.167 --> 00:12:02.885\nWell, no, right, false.\n\n230\n00:12:02.885 --> 00:12:07.289\nAnd then you can start going, okay,\nwell if num_two != num_two, then I,\n\n231\n00:12:07.289 --> 00:12:09.842\nwait a minute, hold on,\nhow does that work?\n\n232\n00:12:09.842 --> 00:12:12.610\nYou can get, you can kinda\nget spun around a little bit.\n\n233\n00:12:12.610 --> 00:12:13.730\n&gt;&gt; And you're saying there's not,\n\n234\n00:12:13.730 --> 00:12:15.920\nnot reasons for using [LAUGH] this.\n\n235\n00:12:15.920 --> 00:12:18.180\nYeah, it can get a little wonky,\n\n236\n00:12:18.180 --> 00:12:22.220\nbut, I'm just thinking of an example of\nif you're doing like a scoring in a game.\n\n237\n00:12:22.220 --> 00:12:27.310\nI know this is going beyond, but okay,\nif it's not zero then keep playing,\n\n238\n00:12:27.310 --> 00:12:30.940\nbut if it goes to zero then keep going.\n&gt;&gt; Yep,\n\n239\n00:12:30.940 --> 00:12:35.570\nthat is a perfectly valid use case,\nlike if you have a countdown timer, right.\n\n240\n00:12:35.570 --> 00:12:40.270\nYou start at 60 seconds,\n59 seconds, whatever it may be,\n\n241\n00:12:40.270 --> 00:12:42.940\n58 seconds,\nI forgot how to count there for a minute.\n\n242\n00:12:42.940 --> 00:12:47.430\nAs long as it's not zero,\nright, then keep on going.\n\n243\n00:12:47.430 --> 00:12:50.300\nWhen it is zero though,\nI wanna do something else.\n\n244\n00:12:50.300 --> 00:12:53.840\nAnd it's funny, because these comparison\noperators provide us with the capability\n\n245\n00:12:53.840 --> 00:12:55.315\nof doing those things.\n\n246\n00:12:55.315 --> 00:13:00.595\nBut we just have to make sure we're not\ngetting bogged down with syntax before we\n\n247\n00:13:00.595 --> 00:13:03.307\ncan actually think about the logic part.\n&gt;&gt; Yeah, and it has to make sense,\n\n248\n00:13:03.307 --> 00:13:09.685\nthat right there, it totally used this and\nyou see it, I'd say decently frequently.\n\n249\n00:13:09.685 --> 00:13:13.935\nBut it's written just like\nwe're giving examples.\n\n250\n00:13:13.935 --> 00:13:18.680\nSo it's totally valid.\n&gt;&gt; So, along those lines, we have less\n\n251\n00:13:18.680 --> 00:13:23.500\nthan, less than or equal to, equal to,\nnon-equal to, and then, well, if we have\n\n252\n00:13:23.500 --> 00:13:28.950\nless than, we could always flip the order\nlike I did just a little while ago, right?\n\n253\n00:13:28.950 --> 00:13:31.390\nBut really sometimes that's\nnot how our brain's working.\n\n254\n00:13:31.390 --> 00:13:36.164\nWe want to ask the computer our question\nbased on the thoughts that we have.\n\n255\n00:13:36.164 --> 00:13:42.737\nSo, I wanna know is num_three &gt; num_two?\n\n256\n00:13:42.737 --> 00:13:44.310\nWell, num_three has 21 in it.\n\n257\n00:13:44.310 --> 00:13:46.614\nYeah, is 21 greater than 2?\n\n258\n00:13:46.614 --> 00:13:54.381\nYes, is num_three &gt;= num_two?\n\n259\n00:13:54.381 --> 00:14:02.263\nAnd sped up a little bit there because\nall this is a rehash of the less than.\n\n260\n00:14:02.263 --> 00:14:04.120\nHere's something I notice\nthat people will do.\n\n261\n00:14:04.120 --> 00:14:09.281\nThis looks looks like a backwards arrow,\nthis, a lot of people will put\n\n262\n00:14:09.281 --> 00:14:14.454\nthe equal sign first, and then\nthe greater than to have some symmetry.\n\n263\n00:14:14.454 --> 00:14:19.570\nWe'll actually see what happens\njust momentarily when that happens.\n\n264\n00:14:19.570 --> 00:14:23.400\nSo it's always the less than or\ngreater than sign and\n\n265\n00:14:23.400 --> 00:14:25.430\nthen the equal to part if\nyou wanna append that.\n\n266\n00:14:25.430 --> 00:14:27.170\nSo is num_three &gt; = num_two?\n\n267\n00:14:27.170 --> 00:14:29.850\nWell, if it's greater than,\nthen yes it is, all right?\n\n268\n00:14:29.850 --> 00:14:32.540\nIs num_three &gt;= to 21?\n\n269\n00:14:32.540 --> 00:14:35.420\nYes, it is because it is 21.\n\n270\n00:14:35.420 --> 00:14:42.300\nBut what I was talking about\nis nun_three =&gt;, yeah,\n\n271\n00:14:42.300 --> 00:14:49.910\nsay it as you read it from left to right,\n21, SyntaxError, why did that happen?\n\n272\n00:14:49.910 --> 00:14:52.970\nWell, what Python did was\nit started parsing, right?\n\n273\n00:14:52.970 --> 00:14:57.290\nIt start chunking things up and it said,\nnum_three, well that's a variable.\n\n274\n00:14:57.290 --> 00:15:01.490\nThere's an equals sign, so\nthere's gonna be an assignment, right?\n\n275\n00:15:01.490 --> 00:15:06.050\nAnd then, what happened, is, it goes,\n\n276\n00:15:06.050 --> 00:15:09.120\nyou can't assign this to it,\nthat doesn't make any sense.\n\n277\n00:15:09.120 --> 00:15:13.620\nSo this breaks because you're\ntrying to say num_three equals\n\n278\n00:15:13.620 --> 00:15:18.270\na reserved thing in Python,\nit doesn't know how to parse that.\n\n279\n00:15:18.270 --> 00:15:21.440\nIt doesn't know how to chunk that up\nin order to make sense out of it, so\n\n280\n00:15:21.440 --> 00:15:23.160\nyou get a SyntaxError.\n\n281\n00:15:23.160 --> 00:15:26.360\nSo for numbers those\nare effectively our comparisons.\n\n282\n00:15:26.360 --> 00:15:27.440\nAre they equal are they not equal?\n\n283\n00:15:27.440 --> 00:15:28.820\nAre they less thanor\nare they greater than?\n\n284\n00:15:28.820 --> 00:15:31.350\nAre they less than or equal to,\nare they greater than or equal to?\n\n285\n00:15:31.350 --> 00:15:34.030\nAnd all of this makes relative sense.\n\n286\n00:15:34.030 --> 00:15:38.105\nNow there is one thing that\nyou should always be aware of.\n\n287\n00:15:38.105 --> 00:15:42.680\nWhen I used integers here,\nthese are all whole numbers.\n\n288\n00:15:42.680 --> 00:15:45.990\nWhen you start getting into\nfloating point numbers\n\n289\n00:15:45.990 --> 00:15:48.230\nyou may get weird results, all right.\n\n290\n00:15:48.230 --> 00:15:54.020\nSo is 1.99999999999999999, a lot of 9s.\n\n291\n00:15:54.020 --> 00:15:55.651\nActually let's just keep on going.\n\n292\n00:15:55.651 --> 00:15:58.311\nI'm gonna try and reproduce this.\n\n293\n00:15:58.311 --> 00:16:04.262\nIs 1.99 less than 2.0.\n\n294\n00:16:04.262 --> 00:16:09.078\nWell if you ask anybody probably in\na math class or had a math class,\n\n295\n00:16:09.078 --> 00:16:12.347\nyou go, yeah, that's a 1 and that's a 2.\n\n296\n00:16:12.347 --> 00:16:13.546\nLet's see what happens.\n\n297\n00:16:15.852 --> 00:16:20.410\nInteresting, we got some weirdness\nthat was probably not expected.\n\n298\n00:16:20.410 --> 00:16:23.944\nI'm gonna double say that because I just\nsaw Vonne's face out of the corner of my\n\n299\n00:16:23.944 --> 00:16:24.615\neye.\n&gt;&gt; Well,\n\n300\n00:16:24.615 --> 00:16:28.403\nI was like, it's because one's a float and\none's an integer.\n\n301\n00:16:28.403 --> 00:16:31.168\nAnd then I'm like, wait, no,\nyou did decimals on both of them.\n\n302\n00:16:31.168 --> 00:16:36.592\nSo they both have a 2.0,\n1.99999999999, so they're both floats.\n\n303\n00:16:36.592 --> 00:16:39.826\nAnd we're comparing a float to a float,\nbut\n\n304\n00:16:39.826 --> 00:16:41.685\nis that part of the-\n&gt;&gt; [LAUGH]\n\n305\n00:16:41.685 --> 00:16:43.550\n&gt;&gt; Now, you're smiling, so I'm like,\n\n306\n00:16:43.550 --> 00:16:46.542\nam I on to something [LAUGH]?\n&gt;&gt; That would make sense, you're like,\n\n307\n00:16:46.542 --> 00:16:47.212\nwait a minute.\n\n308\n00:16:47.212 --> 00:16:51.140\nIt is because they're floating point\nnumbers that we get this weird behavior.\n\n309\n00:16:51.140 --> 00:16:54.100\nBack when I talked about numbers, I said\nthere are integers and there are floats.\n\n310\n00:16:54.100 --> 00:16:59.850\nThey're actually represented a different\nway behind the scenes, on the computer.\n\n311\n00:16:59.850 --> 00:17:03.730\nAnd the way they're represented,\neffectively what happens is,\n\n312\n00:17:03.730 --> 00:17:07.272\nbehind the scenes,\nlet me get this scrolled back down here.\n\n313\n00:17:07.272 --> 00:17:11.370\n1.99999999999999, all these 9s out there?\n\n314\n00:17:12.450 --> 00:17:13.800\nThe computer goes, yeah,\n\n315\n00:17:13.800 --> 00:17:17.340\nbehind the scenes,\nthat's how 2's represented as well.\n\n316\n00:17:17.340 --> 00:17:21.907\nThey actually have, possibly,\nthe same value, all right.\n\n317\n00:17:21.907 --> 00:17:26.492\nSo what happens is,\nnow you go, okay, well,\n\n318\n00:17:26.492 --> 00:17:32.370\nis 1.999999 all of those equal to 2,\nand it goes, yes.\n\n319\n00:17:33.810 --> 00:17:36.600\nSo this is one of those things where,\nif you're not careful with floating point\n\n320\n00:17:36.600 --> 00:17:40.468\nnumbers, these are effectively\nrounding errors.\n\n321\n00:17:40.468 --> 00:17:45.129\nAll right, they're a portion that you\ndo not see because this is 1.999,\n\n322\n00:17:45.129 --> 00:17:49.153\nwhich to the computer, goes,\nI can't hold all that information so\n\n323\n00:17:49.153 --> 00:17:51.434\nI'm gonna say it's effectively 2.\n\n324\n00:17:51.434 --> 00:17:54.342\nNow, I'm over simplifying that,\nbut that's what we need to know.\n\n325\n00:17:54.342 --> 00:17:58.957\nFloating points with a lot of\ndecimals could actually be equal,\n\n326\n00:17:58.957 --> 00:18:03.487\nas far as the computer is concerned,\nto things that don't have\n\n327\n00:18:03.487 --> 00:18:07.490\na lot of decimals necessarily.\n&gt;&gt; Okay and that's where I was going in\n\n328\n00:18:07.490 --> 00:18:10.644\nmy brain, just, it rounded up,\nso that's why it's false.\n\n329\n00:18:10.644 --> 00:18:17.752\nQuestion, if you had just\ndone 1.9 is less than 2.0,\n\n330\n00:18:17.752 --> 00:18:22.660\nnow it's the same number of decimals.\n&gt;&gt; So\n\n331\n00:18:22.660 --> 00:18:27.268\nnow we have a 1.9, and\nif we do that, that is true.\n\n332\n00:18:27.268 --> 00:18:31.785\nAnd that's because we're not pushing\nthis far enough out to actually have\n\n333\n00:18:31.785 --> 00:18:36.516\nthe rounding errors be so minuscule\nthat the computer goes, I can't keep\n\n334\n00:18:36.516 --> 00:18:39.710\ntrack of those tiny, tiny differences.\n&gt;&gt; All right,\n\n335\n00:18:39.710 --> 00:18:41.510\nthat answers my questions now.\n\n336\n00:18:41.510 --> 00:18:47.603\nBut if you did four decimal places, five,\nis there a, do you know the limitation?\n\n337\n00:18:47.603 --> 00:18:52.025\nAfter ten, it will not do it,\nI didn't know if there was a documented,\n\n338\n00:18:52.025 --> 00:18:56.565\nit will always be this way, or is it just-\n&gt;&gt; Sometimes it depends on,\n\n339\n00:18:56.565 --> 00:19:00.060\nis this the result of an operation?\n\n340\n00:19:00.060 --> 00:19:05.654\nSo if I divide or multiply or\nsomething and I get these really close,\n\n341\n00:19:05.654 --> 00:19:11.662\nI'm just randomly adding a couple\nof these, true, true, there we go.\n\n342\n00:19:11.662 --> 00:19:16.163\nSo do I get this one, that's true,\nso that many decimal places.\n\n343\n00:19:16.163 --> 00:19:19.169\nBut that has to do with,\nI'm doing all nines, so that's,\n\n344\n00:19:19.169 --> 00:19:24.541\nwhat's the difference between 2 and\nall those 9s, 0.0000000000000000001.\n\n345\n00:19:24.541 --> 00:19:31.479\nRight, so it essentially says, there's\nnot a difference, and that's 3, 6, 9, 12,\n\n346\n00:19:31.479 --> 00:19:36.520\n15, looks like about 18 decimal places.\n&gt;&gt; But it's only because you're doing 9s.\n\n347\n00:19:36.520 --> 00:19:40.571\nIf you had mixed 2s and 4s and\n5s and everything in there,\n\n348\n00:19:40.571 --> 00:19:42.990\nresults may vary.\n&gt;&gt; Your results may vary, but\n\n349\n00:19:42.990 --> 00:19:45.839\nyou need to be aware of those,\nbecause they can cause you some strife,\n\n350\n00:19:45.839 --> 00:19:47.744\nespecially when you're doing comparisons.\n\n351\n00:19:47.744 --> 00:19:52.270\nNow, that was kinda the edge case,\nfloating points can have weirdness.\n\n352\n00:19:52.270 --> 00:19:57.504\nSo the best thing to do is\nactually compare their difference,\n\n353\n00:19:57.504 --> 00:20:01.642\nand actually never use\nequal if at all possible.\n\n354\n00:20:01.642 --> 00:20:07.650\nDon't say 1.99999, equal, there\nare times where you may have to do that.\n\n355\n00:20:07.650 --> 00:20:11.330\nJust keep in mind,\nyou may get some weirdness there.\n\n356\n00:20:11.330 --> 00:20:14.170\nIf you take the difference\nbetween the two and you say,\n\n357\n00:20:14.170 --> 00:20:19.670\nis it above some threshold,\nthen you can say, they're close enough.\n\n358\n00:20:19.670 --> 00:20:22.542\nYou have to think about decimals,\nwe'll always have rounding.\n\n359\n00:20:22.542 --> 00:20:25.798\nAnd if you've ever done that,\nanything in a calculator, a lot of times,\n\n360\n00:20:25.798 --> 00:20:27.963\nyou just kind of leave\noff those decimal places.\n\n361\n00:20:27.963 --> 00:20:30.976\nThat can actually end up\nmaking a very huge difference.\n\n362\n00:20:30.976 --> 00:20:32.512\n&gt;&gt; All right, great, do you have more,\n\n363\n00:20:32.512 --> 00:20:35.422\nbecause I have another question.\n&gt;&gt; I thought you had a question,\n\n364\n00:20:35.422 --> 00:20:39.431\nthat's why I stopped.\n&gt;&gt; I didn't know if there was more,\n\n365\n00:20:39.431 --> 00:20:43.525\nso I was gonna ask without\nstealing any thunder.\n\n366\n00:20:43.525 --> 00:20:47.188\nI feel like I've seen in other places,\n\n367\n00:20:47.188 --> 00:20:51.970\nequal equal equal,\nthree equals instead of one.\n\n368\n00:20:51.970 --> 00:20:54.476\nOne is assign, or\nyou're assigning a variable.\n\n369\n00:20:54.476 --> 00:20:57.957\nI've seen two, I can't remember where or\nwhen I saw it, but I'm like,\n\n370\n00:20:57.957 --> 00:21:01.676\nI feel like I remember this.\n&gt;&gt; So that's not a Python specific thing,\n\n371\n00:21:01.676 --> 00:21:06.620\nthat's actually typically,\nwhere I've seen that is other languages.\n\n372\n00:21:06.620 --> 00:21:10.100\nJavaScript, PHP, you don't\nnecessarily have to know about this.\n\n373\n00:21:10.100 --> 00:21:14.694\nBut that actually forces equality\nwith some other guarantees,\n\n374\n00:21:14.694 --> 00:21:19.214\nlike their types have to match,\nit has to be a float and a float.\n\n375\n00:21:19.214 --> 00:21:23.944\nNotice I've compared ints to ints,\nfloats to floats only.\n\n376\n00:21:23.944 --> 00:21:27.151\nYou can actually,\nas long as they're numbers,\n\n377\n00:21:27.151 --> 00:21:31.230\nyou can compare numbers to numbers,\nso it will be okay there.\n\n378\n00:21:31.230 --> 00:21:36.170\nWe don't have that operator in Python, so\nwe always use double equals, and actually,\n\n379\n00:21:36.170 --> 00:21:38.708\nPython enforces some of\nthe type comparisons\n\n380\n00:21:38.708 --> 00:21:39.685\nanyway.\n&gt;&gt; Okay,\n\n381\n00:21:39.685 --> 00:21:44.596\nI feel like I remember it being like the\nsuper equal, it's total equality, and so\n\n382\n00:21:44.596 --> 00:21:47.670\nyou just explained it, and\nnow it makes sense now.\n\n383\n00:21:47.670 --> 00:21:50.035\nYou're saying the data\ntypes have to match,\n\n384\n00:21:50.035 --> 00:21:52.596\nthe actual information\nthat we're comparing.\n\n385\n00:21:52.596 --> 00:21:56.120\nSo not part of Python, but\ncould be part of other languages,\n\n386\n00:21:56.120 --> 00:22:00.351\nif you were using this as a fundamental,\nmoving on to another language.\n\n387\n00:22:00.351 --> 00:22:01.179\n&gt;&gt; Absolutely,\n\n388\n00:22:01.179 --> 00:22:04.976\nand speaking of different types,\nwe've talked about numbers.\n\n389\n00:22:04.976 --> 00:22:07.530\nWe can actually use these with strings.\n\n390\n00:22:07.530 --> 00:22:10.709\nI have to show you that\nthe context will actually change.\n\n391\n00:22:10.709 --> 00:22:12.946\nAll right, so we can do these\nwith a few other things, and\n\n392\n00:22:12.946 --> 00:22:14.420\nthey'll continue to crop up.\n\n393\n00:22:14.420 --> 00:22:18.928\nLet's go ahead and come back to the screen\nhere, and I'm gonna clear this out.\n\n394\n00:22:18.928 --> 00:22:24.083\nClear this out, and I'm just gonna say,\n\n395\n00:22:24.083 --> 00:22:27.035\n'a' &lt; 'b', okay.\n\n396\n00:22:27.035 --> 00:22:30.752\nSo if I think about this,\nwhat would this possibly mean?\n\n397\n00:22:30.752 --> 00:22:35.676\nThat means that a, would I be asking,\nwhat would I be asking,\n\n398\n00:22:35.676 --> 00:22:38.627\neffectively, does a come before b?\n\n399\n00:22:38.627 --> 00:22:41.484\nYes it does, now how this happens,\n\n400\n00:22:41.484 --> 00:22:46.733\nwe're just gonna pretend like\nthere's nothing going on there.\n\n401\n00:22:46.733 --> 00:22:53.785\nBut what happens if I say,\n'aa', yes, what about 'bb',\n\n402\n00:22:53.785 --> 00:22:58.988\nwhat about, 'ba' &lt; bb',\nwhy would that happen?\n\n403\n00:22:58.988 --> 00:23:03.035\nWell, here's where it gets weird\nwith context specific ones.\n\n404\n00:23:03.035 --> 00:23:06.808\nThis actually does character\nby character comparisons.\n\n405\n00:23:06.808 --> 00:23:11.860\nIf you've ever been asked to put something\nin alphabetical order with names,\n\n406\n00:23:11.860 --> 00:23:13.780\nyou've done this.\n\n407\n00:23:13.780 --> 00:23:16.914\nYou take everything that has an A,\nand you put them together.\n\n408\n00:23:16.914 --> 00:23:18.747\nAnd take everything that has a B and\nyou put them together.\n\n409\n00:23:18.747 --> 00:23:22.456\nAnd then how do sort\njust the A last names?\n\n410\n00:23:22.456 --> 00:23:29.030\nYou go, well, I need AAs, ABs, ACs, ADs,\nand then what about if you have two ACs?\n\n411\n00:23:29.030 --> 00:23:32.661\nWe go ACE, ACF, well, E goes before F.\n\n412\n00:23:32.661 --> 00:23:35.284\nI think this is called\nlexographical comparisons.\n\n413\n00:23:35.284 --> 00:23:37.512\nSo it does character by\ncharacter comparisons.\n\n414\n00:23:37.512 --> 00:23:42.766\nLess than is, does this come before\nthis other thing in the alphabet, and\n\n415\n00:23:42.766 --> 00:23:46.402\nit will tell you kind of letter by letter.\n&gt;&gt; I was thinking\n\n416\n00:23:46.402 --> 00:23:49.342\nExcel columns [LAUGH] cuz I've\njust been so much in Excel lately.\n\n417\n00:23:49.342 --> 00:23:53.311\nBut that's exactly how BA comes\nbefore BB in the columns,\n\n418\n00:23:53.311 --> 00:23:56.350\nwhich is exactly what you're saying.\n\n419\n00:23:56.350 --> 00:23:57.842\nCon.\n&gt;&gt; Lexographic comparison,\n\n420\n00:23:57.842 --> 00:23:58.749\nif I'm not mistaken.\n\n421\n00:23:58.749 --> 00:24:02.150\nThat's another one of those things\nwhere I said, I just said that word.\n\n422\n00:24:02.150 --> 00:24:04.630\nI was pretty sure till I said it and\nit came out of my mouth and-\n\n423\n00:24:04.630 --> 00:24:05.300\n&gt;&gt; Say it one more time.\n\n424\n00:24:05.300 --> 00:24:06.820\nI'll check you.\n&gt;&gt; Lexographic.\n\n425\n00:24:06.820 --> 00:24:07.380\n&gt;&gt; Lex?\n\n426\n00:24:07.380 --> 00:24:08.674\n&gt;&gt; Okay [LAUGH].\n\n427\n00:24:08.674 --> 00:24:10.489\n&gt;&gt; Lexographic, L-E-X-I,\n\n428\n00:24:10.489 --> 00:24:13.090\nif I'm not mistaken.\nNow while Vonne's looking that up,\n\n429\n00:24:13.090 --> 00:24:14.790\nwe have a few other operators.\n\n430\n00:24:14.790 --> 00:24:15.750\nDoes it still work?\n\n431\n00:24:15.750 --> 00:24:20.310\nWell, if less than works,\nthen less than or equal to.\n\n432\n00:24:20.310 --> 00:24:21.870\nWell, when would that happen?\n\n433\n00:24:21.870 --> 00:24:25.660\nWell, that would be like,\nis a less than a?\n\n434\n00:24:25.660 --> 00:24:28.240\nOops, you actually have\nto type that correctly.\n\n435\n00:24:28.240 --> 00:24:30.240\nAnd let's zoom out here.\n\n436\n00:24:30.240 --> 00:24:31.210\nNo, it's not.\n\n437\n00:24:31.210 --> 00:24:33.351\nBut is a less than or equal to a?\n\n438\n00:24:33.351 --> 00:24:35.235\nYes.\n\n439\n00:24:35.235 --> 00:24:38.870\nIs a equal to a?\n\n440\n00:24:38.870 --> 00:24:40.060\nYes.\n\n441\n00:24:40.060 --> 00:24:46.651\nIs Justin = Justine?\n\n442\n00:24:46.651 --> 00:24:48.360\nNo, right, why?\n\n443\n00:24:48.360 --> 00:24:52.990\nBecause there's an extra e there,\nit does letter by letter comparisons.\n\n444\n00:24:52.990 --> 00:24:54.670\nWhat about not equals?\n\n445\n00:24:55.970 --> 00:24:57.820\nWell, those are true as well.\n\n446\n00:24:57.820 --> 00:25:01.550\nOr excuse me, that is true,\nrather, cuz they are not equal.\n\n447\n00:25:01.550 --> 00:25:02.100\nAre they equal?\n\n448\n00:25:02.100 --> 00:25:06.640\nNo, and likewise rinse and repeat.\n\n449\n00:25:06.640 --> 00:25:09.550\nGreater than or greater than or\nequal to would also work with strings.\n\n450\n00:25:11.340 --> 00:25:13.630\nBut notice the context is\na little bit different.\n\n451\n00:25:13.630 --> 00:25:15.389\nDoes it come before that in the alphabet?\n\n452\n00:25:15.389 --> 00:25:21.100\nThere are some things that we have to,\nis a less than capital a?\n\n453\n00:25:22.130 --> 00:25:23.980\nExcuse me, let's do equals.\n\n454\n00:25:23.980 --> 00:25:27.100\nIs a equal to capital A?\n\n455\n00:25:27.100 --> 00:25:31.640\nNo, capitalization does matter in strings.\n\n456\n00:25:31.640 --> 00:25:40.373\nWhich means, is apple less than apple?\n\n457\n00:25:40.373 --> 00:25:41.860\nNo.\n\n458\n00:25:41.860 --> 00:25:46.470\nIs lowercase apple greater\nthan uppercase Apple?\n\n459\n00:25:46.470 --> 00:25:47.610\nYes, and\n\n460\n00:25:47.610 --> 00:25:52.270\nthat has to do with how these respective\nletters are assumed to be in order.\n\n461\n00:25:53.570 --> 00:25:55.600\nIt does not go lower case a, upper case A.\n\n462\n00:25:56.870 --> 00:25:59.680\nIt actually, if I'm not mistaken,\nit starts with all the upper cases and\n\n463\n00:25:59.680 --> 00:26:01.630\nthen it goes through the lower cases.\n\n464\n00:26:01.630 --> 00:26:03.490\nSo just be aware of that.\n\n465\n00:26:04.510 --> 00:26:05.990\nSo I show you that, right?\n\n466\n00:26:05.990 --> 00:26:08.200\nWe've compared the same\ndata types all the time.\n\n467\n00:26:08.200 --> 00:26:09.130\nNumber to number.\n\n468\n00:26:09.130 --> 00:26:11.787\nAnd just to show you,\nI can say is 3 equal to 3.2?\n\n469\n00:26:11.787 --> 00:26:14.430\nThat will work because\nthey're both numbers.\n\n470\n00:26:14.430 --> 00:26:16.030\nBut what if I do something like this?\n\n471\n00:26:16.030 --> 00:26:19.814\nWhat if I say is apple equal to 4?\n\n472\n00:26:22.548 --> 00:26:26.510\nAnd you could use this with\nany other comparison operator.\n\n473\n00:26:26.510 --> 00:26:28.510\nAnd no, it will not.\n\n474\n00:26:30.440 --> 00:26:33.010\nThat's not a meaningful comparison,\nthough, right?\n\n475\n00:26:33.010 --> 00:26:38.516\nIs num_two == 'apple'?\n\n476\n00:26:38.516 --> 00:26:40.640\nNo, well, why not?\n\n477\n00:26:40.640 --> 00:26:42.450\nBecause that's the number two,\nand that's apple.\n\n478\n00:26:44.710 --> 00:26:49.420\nThese can end up kind of being\nreal tough to chase down,\n\n479\n00:26:49.420 --> 00:26:54.370\nreal hard to reason about because maybe\nsomething went wrong in your program and\n\n480\n00:26:54.370 --> 00:26:55.720\nthis ended up being the word apple.\n\n481\n00:26:56.990 --> 00:27:00.228\nAnd you thought it was 6, the number 6.\n\n482\n00:27:00.228 --> 00:27:03.130\nAnd you're like, well, yeah,\nthe number 2 doesn't equal the number 6.\n\n483\n00:27:03.130 --> 00:27:05.440\nSo that is false, that makes sense.\n\n484\n00:27:05.440 --> 00:27:09.170\nBut then other things start\nbreaking down the line.\n\n485\n00:27:09.170 --> 00:27:11.730\nNow we're not seeing\nthat necessarily here.\n\n486\n00:27:11.730 --> 00:27:15.510\nBut you can compare a number to a string.\n\n487\n00:27:15.510 --> 00:27:18.480\nYou just may not get sensible results.\n\n488\n00:27:18.480 --> 00:27:20.150\nYou go, yeah, they're not equal.\n\n489\n00:27:20.150 --> 00:27:21.530\nI guess that makes sense.\n\n490\n00:27:21.530 --> 00:27:24.040\nYeah, the word apple\nis not the number two.\n\n491\n00:27:24.040 --> 00:27:25.430\nSo just be aware of that.\n\n492\n00:27:25.430 --> 00:27:30.652\nNow, there is something that you may\nencounter in some of these other\n\n493\n00:27:30.652 --> 00:27:36.613\nlanguages, num_two, which is actually\na numeric type, it's an integer.\n\n494\n00:27:36.613 --> 00:27:40.460\nThis is a string containing a number.\n\n495\n00:27:41.570 --> 00:27:43.280\nAre these two things equal?\n\n496\n00:27:44.550 --> 00:27:45.673\nThey are not.\n\n497\n00:27:45.673 --> 00:27:50.820\nYou have to be careful\nbecause the type does matter.\n\n498\n00:27:50.820 --> 00:27:53.980\nAnd a lot of times that\nthe types do not match,\n\n499\n00:27:53.980 --> 00:27:56.520\nthen they are automatically not equal.\n\n500\n00:27:56.520 --> 00:28:01.960\nSo you have to be careful on that sense.\n&gt;&gt; Because I'm just saying two is two.\n\n501\n00:28:01.960 --> 00:28:06.430\nI'm not paying attention to the little\nquotes to indicate a string.\n\n502\n00:28:06.430 --> 00:28:09.664\nAnd just as you said like,\ncomparing a number [INAUDIBLE],\n\n503\n00:28:09.664 --> 00:28:11.326\nit's always gonna be false.\n\n504\n00:28:11.326 --> 00:28:13.334\nSo that's why you're saying it's okay,\n\n505\n00:28:13.334 --> 00:28:15.916\nit might make sense in\nwhatever you're programming.\n\n506\n00:28:15.916 --> 00:28:18.920\nBut then once you get to that\nwhere it needs to be true,\n\n507\n00:28:18.920 --> 00:28:20.310\nit's never gonna be true.\n\n508\n00:28:20.310 --> 00:28:24.390\nSo that's where your results are gonna\nget a little weird sometimes.\n\n509\n00:28:24.390 --> 00:28:26.310\n&gt;&gt; You're absolutely right, and\n\n510\n00:28:26.310 --> 00:28:29.820\njust be aware of these because notice,\nthis isn't throwing an error message.\n\n511\n00:28:29.820 --> 00:28:33.110\nI try to show you the error\nmessages that you may encounter.\n\n512\n00:28:33.110 --> 00:28:38.960\nThese are known as runtime errors or\nlogic errors because they'll crop up and\n\n513\n00:28:38.960 --> 00:28:41.870\nnot exactly break where this breaks down.\n\n514\n00:28:41.870 --> 00:28:43.930\nSo you have to be careful there.\n\n515\n00:28:43.930 --> 00:28:46.662\nAnd it's just part of\nlearning the program.\n\n516\n00:28:46.662 --> 00:28:51.072\nNow, Vonne, these work for\nstrings and numbers.\n\n517\n00:28:51.072 --> 00:28:54.032\nEqual will work for\n\n518\n00:28:54.032 --> 00:28:59.750\nbooleans as false equal to false.\n\n519\n00:28:59.750 --> 00:29:00.880\nYes, it is.\n\n520\n00:29:00.880 --> 00:29:01.980\nThese will also work there.\n\n521\n00:29:03.480 --> 00:29:04.790\nYou have to be careful, and\n\n522\n00:29:04.790 --> 00:29:08.990\nI'll highlight this, as you get\nkind of to more complex data types.\n\n523\n00:29:08.990 --> 00:29:11.510\nSometimes this will break down.\n\n524\n00:29:11.510 --> 00:29:15.690\nIt will not necessarily work\nhow you anticipate it to.\n\n525\n00:29:15.690 --> 00:29:18.610\nJust like these will not work\nhow you anticipate it to.\n\n526\n00:29:18.610 --> 00:29:20.640\nBut these same operators are used.\n\n527\n00:29:20.640 --> 00:29:23.810\nYou just have to remember,\nthey're context specific.\n\n528\n00:29:23.810 --> 00:29:26.410\nSo always keep in mind,\nwhat is the type of data?\n\n529\n00:29:26.410 --> 00:29:27.860\nWhat is the value of the data?\n\n530\n00:29:27.860 --> 00:29:31.770\nAnd does it make sense to have\nthese respective comparisons?\n\n531\n00:29:31.770 --> 00:29:34.490\nIf you keep that in the forefront of your\nmind, it will save you a lot of time.\n\n532\n00:29:34.490 --> 00:29:36.280\nBut don't worry,\nyou're just getting started.\n\n533\n00:29:36.280 --> 00:29:39.306\nSo we've seen in this episode how\nwe can do less than, greater than,\n\n534\n00:29:39.306 --> 00:29:42.435\ngreater than or equal to, less than or\nequal to, not equal and equal for\n\n535\n00:29:42.435 --> 00:29:45.222\nboth numbers and strings, and\ntechnically booleans as well.\n\n536\n00:29:45.222 --> 00:29:49.230\nWe'll continue to see these\ncrop up as we need more.\n\n537\n00:29:49.230 --> 00:29:51.480\nYou're asking a yes or no question.\n\n538\n00:29:51.480 --> 00:29:53.040\nIs this less than this?\n\n539\n00:29:53.040 --> 00:29:54.940\nYou're always gonna get a boolean answer.\n\n540\n00:29:54.940 --> 00:29:59.300\nAnd now we can use that to start\nactually building more complex logic.\n\n541\n00:30:00.450 --> 00:30:04.010\nBut there's a few more things that we need\nto understand, and I don't think we have\n\n542\n00:30:04.010 --> 00:30:06.625\ntime in this episode.\n&gt;&gt; All right, well,\n\n543\n00:30:06.625 --> 00:30:11.848\na little bit of comparison and also\nsome fact checking less infographical,\n\n544\n00:30:11.848 --> 00:30:14.230\nlexicon, but lexicographical.\n\n545\n00:30:14.230 --> 00:30:16.060\nI think we left out a C-O.\n\n546\n00:30:16.060 --> 00:30:18.080\nLexicographical.\n\n547\n00:30:18.080 --> 00:30:20.424\nSo that was one thing that I found.\n\n548\n00:30:20.424 --> 00:30:24.800\nAnd that greater than or\nequal to in Unicode, it is U2265.\n\n549\n00:30:24.800 --> 00:30:26.210\nThat's the character code.\n\n550\n00:30:26.210 --> 00:30:28.720\nAnd remember I threw out that,\nI think it was 257.\n\n551\n00:30:28.720 --> 00:30:30.460\nThat is a character code.\n\n552\n00:30:30.460 --> 00:30:34.270\nI was thinking ASCII because it\nonly goes up to a certain number.\n\n553\n00:30:34.270 --> 00:30:41.340\nNo, the 257 is the letter\na with a little line over it.\n\n554\n00:30:41.340 --> 00:30:45.905\nThat whole area of ASCII and Unicode\ntotally, it's a geek moment for me.\n\n555\n00:30:45.905 --> 00:30:46.472\n&gt;&gt; [LAUGH]\n\n556\n00:30:46.472 --> 00:30:49.893\n&gt;&gt; I love character sets and typography,\n\n557\n00:30:49.893 --> 00:30:52.906\nand I just wanted to tell you that.\n\n558\n00:30:52.906 --> 00:30:55.005\n[LAUGH]\n&gt;&gt; So other than my mispronunciation,\n\n559\n00:30:55.005 --> 00:31:01.045\nlexicographical is ordered by\nthe respect of alphabetical,\n\n560\n00:31:01.045 --> 00:31:03.477\nright?\n&gt;&gt; Also known as dictionary order,\n\n561\n00:31:03.477 --> 00:31:06.992\nalphabetical order,\na lexicographical product, yes.\n\n562\n00:31:06.992 --> 00:31:08.240\n&gt;&gt; Yeah, well, I'm from the south, so\n\n563\n00:31:08.240 --> 00:31:09.660\nsometimes we leave out letters.\n\n564\n00:31:09.660 --> 00:31:12.210\nSo I'm gonna chalk that one up to there.\n\n565\n00:31:12.210 --> 00:31:14.760\nBut Vonne,\nwe are definitely running low on time so\n\n566\n00:31:14.760 --> 00:31:18.900\nI'm gonna let you take it over from here.\n&gt;&gt; Yeah, I'm the host of this episode.\n\n567\n00:31:18.900 --> 00:31:20.400\nSo yes, we're out of time.\n\n568\n00:31:20.400 --> 00:31:22.250\nSo come on back and learn some more.\n\n569\n00:31:22.250 --> 00:31:25.185\nAnd signing off for\nDEVProTV, I'm your host,\n\n570\n00:31:25.185 --> 00:31:26.495\nVonne Smith.\n&gt;&gt; And I'm Justin Dennison.\n\n571\n00:31:26.495 --> 00:31:27.048\n&gt;&gt; We'll see you soon.\n\n572\n00:31:27.048 --> 00:31:35.375\n[MUSIC]\n\n",
          "vimeoId": "267305581"
        },
        {
          "description": "In this episode, Justin and Vonne discuss how you can use logic control to create \"smart\" programs. Justin helps build a model of thinking for applying logical controls to programming.",
          "length": "1406",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-2-1-logic_control-051118-PGM.00_23_18_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-2-1-logic_control-051118-PGM.00_23_18_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-2-1-logic_control-051118-PGM.00_23_18_07.Still001-sm.jpg",
          "title": "Logic Control",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.117 --> 00:00:17.365\nHello everyone and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:17.365 --> 00:00:18.425\nI'm your host Vonne Smith,\n\n4\n00:00:18.425 --> 00:00:21.635\nand we are back with more on our\nprogramming fundamentals series.\n\n5\n00:00:21.635 --> 00:00:24.285\nAnd in this episode we're gonna\nbe talking about logic control.\n\n6\n00:00:24.285 --> 00:00:28.435\nAnd here to control our learning is Mr.\nJustin Dennison, how are you?\n\n7\n00:00:28.435 --> 00:00:30.250\n&gt;&gt; I'm doing fantastic Vonne,\nhow are you today?\n\n8\n00:00:30.250 --> 00:00:35.910\n&gt;&gt; Doing pretty good, so this is just\nintroducing the whole idea of logic and\n\n9\n00:00:35.910 --> 00:00:42.540\nhow we have to control our brains\nbefore we go too far out of the ether.\n\n10\n00:00:42.540 --> 00:00:43.310\n&gt;&gt; Absolutely correct.\n\n11\n00:00:43.310 --> 00:00:46.410\nAnd really,\nit's about kind of formalizing or\n\n12\n00:00:46.410 --> 00:00:49.960\nbuilding a mental model of well,\nhow did our programs run?\n\n13\n00:00:49.960 --> 00:00:53.010\nUp until this point, we've just kinda\nbeen line, by line, by line, by line.\n\n14\n00:00:53.010 --> 00:00:55.450\nAnd there's not a lot going on, right?\n\n15\n00:00:55.450 --> 00:00:57.610\nIt's just, do this,\ndo this, do this, do this,\n\n16\n00:00:57.610 --> 00:01:00.760\ndo this, there's no way to alter that.\n\n17\n00:01:00.760 --> 00:01:06.125\nAnd then what we're talking about is using\nlogic to control the flow of our programs.\n\n18\n00:01:07.960 --> 00:01:09.770\nThere is some programmatic\naspects to that but\n\n19\n00:01:09.770 --> 00:01:12.350\nreally we have to think,\nwell what does this mean?\n\n20\n00:01:12.350 --> 00:01:13.640\nDo I need this decision?\n\n21\n00:01:13.640 --> 00:01:15.180\nOr where does this decision go?\n\n22\n00:01:15.180 --> 00:01:16.560\nWe're gonna keep it simple, but\n\n23\n00:01:16.560 --> 00:01:20.310\nit's just to bring to light that you\nneed be thinking about these things.\n\n24\n00:01:20.310 --> 00:01:24.827\n&gt;&gt; Okay, your keyword right there was\nsimple because I know when I do Excel and\n\n25\n00:01:24.827 --> 00:01:28.570\nwe do all of these functions,\nit gets, the logic is not easy.\n\n26\n00:01:28.570 --> 00:01:31.677\nYou think just be logical,\ndon't be so emotional.\n\n27\n00:01:31.677 --> 00:01:33.650\nWhen we're talking in the human world or\nanything like that.\n\n28\n00:01:33.650 --> 00:01:38.990\nBut when you start talking with\nlogic logic, you can get down\n\n29\n00:01:38.990 --> 00:01:43.053\na rabbit hole, twist it around, and just\nreally just end up crying in a corner.\n\n30\n00:01:43.053 --> 00:01:46.683\nIt goes like I don't understand,\nit's supposed to just be logic.\n\n31\n00:01:46.683 --> 00:01:49.495\n&gt;&gt; [LAUGH] So, well,\nit's funny that you say that.\n\n32\n00:01:49.495 --> 00:01:52.676\nWe're not gonna talk about formal logic,\n[NOISE] all right listen everybody.\n\n33\n00:01:52.676 --> 00:01:56.685\nWe're gonna talk about sets and operations\non sets, no, that's not what we're doing.\n\n34\n00:01:56.685 --> 00:02:02.440\nBut instead,\nthinking about visualizing how a program\n\n35\n00:02:02.440 --> 00:02:07.640\nflows and how that affects\nwhat's going on, all right?\n\n36\n00:02:07.640 --> 00:02:10.790\nSo, that's our ultimate, we're not\ngonna talk about programming now.\n\n37\n00:02:10.790 --> 00:02:15.390\nWe're gonna be talking about just kind\nof everyday, essentially decisions\n\n38\n00:02:15.390 --> 00:02:19.630\nthat you make, but you need to make\nsure you're formalizing those,\n\n39\n00:02:19.630 --> 00:02:22.380\nbuilding those into very\ndiscrete kind of blocks.\n\n40\n00:02:22.380 --> 00:02:25.020\n&gt;&gt; Okay, so\nthe thought process behind all this.\n\n41\n00:02:25.020 --> 00:02:29.645\nOkay, that's made me feel a little bit\nbetter because I was like we start getting\n\n42\n00:02:29.645 --> 00:02:33.450\ninto nots and they're opposites and\nI'm like wait, which way is up?\n\n43\n00:02:33.450 --> 00:02:37.500\nSo I think I'm on board with this,\nso we're good.\n\n44\n00:02:37.500 --> 00:02:39.663\n&gt;&gt; All right, so we're gonna try our best.\n\n45\n00:02:39.663 --> 00:02:43.459\nLet's think about,\nwe're just gonna draw some diagrams and\n\n46\n00:02:43.459 --> 00:02:48.278\nwe're gonna keep them kind of very high\nlevel about how our programs currently\n\n47\n00:02:48.278 --> 00:02:50.485\nrun, right, up until this point.\n\n48\n00:02:50.485 --> 00:02:54.696\nBut then let's take a process and\nformalize it, more or less,\n\n49\n00:02:54.696 --> 00:02:59.230\nyou could call this a mind map or\na flow chart or something like that.\n\n50\n00:02:59.230 --> 00:03:00.900\nPeople are like, I don't like drawing.\n\n51\n00:03:00.900 --> 00:03:03.670\nIt's very, very important to\nhelp you kind of build and\n\n52\n00:03:03.670 --> 00:03:08.850\nunderstand, and it helps put down on\npaper how your mind is thinking about it.\n\n53\n00:03:08.850 --> 00:03:14.130\nAnd a good test is if you do this,\nand you hand it to someone else and\n\n54\n00:03:14.130 --> 00:03:16.990\nthey go, what does this do?\n\n55\n00:03:16.990 --> 00:03:22.010\nIf you have to do a great\ndeal of explanation, okay,\n\n56\n00:03:22.010 --> 00:03:25.518\nthere is one possibility, that you didn't\npreface what you were handing to him.\n\n57\n00:03:25.518 --> 00:03:27.500\nYou just kinda handed it to him like,\nwhat do think of that?\n\n58\n00:03:27.500 --> 00:03:29.249\nAnd they go, I don't know what that is.\n\n59\n00:03:30.320 --> 00:03:33.532\nOr there's some things that\nmake sense to you, but\n\n60\n00:03:33.532 --> 00:03:37.717\nyou maybe you either haven't\nprovided explicit explanation, or\n\n61\n00:03:37.717 --> 00:03:40.720\nsometimes we're just\na little bit different.\n\n62\n00:03:40.720 --> 00:03:45.575\nI know that Vonne and I, we have different\nperspectives on the exact same topic.\n\n63\n00:03:45.575 --> 00:03:50.149\nSo I think that adds to our team work,\nbut sometimes you just go,\n\n64\n00:03:50.149 --> 00:03:54.321\nthat's not how I thought about it but\nthat is a good point.\n\n65\n00:03:54.321 --> 00:03:59.123\nSo, those are very useful if you\njust kinda draw on that map.\n\n66\n00:03:59.123 --> 00:04:00.884\nNow, let's thing about\na program in general.\n\n67\n00:04:00.884 --> 00:04:02.813\nAnd if we come down here and\n\n68\n00:04:02.813 --> 00:04:07.730\nlook at the iPad here,\nlet's look at where we are now, all right?\n\n69\n00:04:07.730 --> 00:04:10.510\nSo what do our program look like now?\n\n70\n00:04:10.510 --> 00:04:15.960\nSo I'm gonna ink to shape just so\nwe can get somewhat decent shapes here.\n\n71\n00:04:15.960 --> 00:04:20.527\nAnd, so it's like, let's create a box and\nwhat are we doing here?\n\n72\n00:04:20.527 --> 00:04:23.354\nWell we're defining a variable, right?\n\n73\n00:04:23.354 --> 00:04:26.829\nSo that's line number one, so\nyou can think about it as line number one.\n\n74\n00:04:26.829 --> 00:04:32.631\nSo create a variable and\nthen what else are we doing?\n\n75\n00:04:32.631 --> 00:04:37.775\nWell, we're adding 3 to that variable.\n\n76\n00:04:37.775 --> 00:04:41.880\nI'm keeping this very simple so\nwe can fill in the blanks.\n\n77\n00:04:41.880 --> 00:04:43.389\nAnd what are we doing next?\n\n78\n00:04:43.389 --> 00:04:50.096\nWell, you're printing the variable out,\nright?\n\n79\n00:04:50.096 --> 00:04:55.086\nAnd to some extent,\nthat's all we've done thus far, right?\n\n80\n00:04:55.086 --> 00:05:01.070\nWell, a lot of times you're like well,\nI only wanna add 3 even if it is a number.\n\n81\n00:05:02.440 --> 00:05:07.070\nIf it's a string, I don't wanna add 3,\nto it cuz then that's different.\n\n82\n00:05:07.070 --> 00:05:10.640\nOr what if it's a boolean?\n\n83\n00:05:10.640 --> 00:05:13.360\nIf I add 3,\nthen I'm gonna get weird results,\n\n84\n00:05:13.360 --> 00:05:15.260\nI should probably be able to look at that.\n\n85\n00:05:15.260 --> 00:05:23.960\nI need to be able to inspect, think about,\nreact is kind of not the best word there.\n\n86\n00:05:23.960 --> 00:05:25.870\nBut currently our programs look like this.\n\n87\n00:05:25.870 --> 00:05:30.614\nReally, and we're just gonna go at very,\nvery high level here,\n\n88\n00:05:30.614 --> 00:05:35.035\nI'm thinking our programs could\nlook something like this.\n\n89\n00:05:39.443 --> 00:05:41.815\nRight?\nSo you kinda get down here.\n\n90\n00:05:43.891 --> 00:05:49.380\nAnd whenever I put an X,\nthat's a termination point, okay?\n\n91\n00:05:49.380 --> 00:05:53.120\nSo, our programs aren't necessarily\ntop to bottom always linked.\n\n92\n00:05:53.120 --> 00:06:00.030\nThere needs to be branches or some ways\nto kind of move off to the side, okay?\n\n93\n00:06:00.030 --> 00:06:03.930\nSo, let's talk about this\nin a more discrete, or\n\n94\n00:06:03.930 --> 00:06:07.580\na more concrete manner,\ndiscrete, not discrete.\n\n95\n00:06:07.580 --> 00:06:09.560\nDiscrete may be an appropriate\nterminology, but\n\n96\n00:06:09.560 --> 00:06:14.020\nlet's think about the process\nof ordering a pizza.\n\n97\n00:06:14.020 --> 00:06:16.924\nGotta turn that ink to shape off just for\na moment [LAUGH].\n\n98\n00:06:16.924 --> 00:06:20.240\n&gt;&gt; My god, a bird over there,\n[LAUGH] I thought we're talking about.\n\n99\n00:06:21.460 --> 00:06:25.920\n&gt;&gt; So let's order a pizza, and\nyou can't write with the eraser.\n\n100\n00:06:25.920 --> 00:06:30.025\nSo, order a pizza, all right?\n\n101\n00:06:30.025 --> 00:06:34.290\nAnd, right now,\nlet's just kind of list the steps, so\n\n102\n00:06:34.290 --> 00:06:35.870\nVonne I'm going to need your\nhelp here a little bit.\n\n103\n00:06:35.870 --> 00:06:40.090\nSo, when I go to order a pizza,\nwhat are the first steps that I take?\n\n104\n00:06:40.090 --> 00:06:42.330\nWell, not necessarily I take,\nbut what do you take?\n\n105\n00:06:42.330 --> 00:06:44.310\n&gt;&gt; Maybe what's the size of the pizza?\n\n106\n00:06:44.310 --> 00:06:49.340\n&gt;&gt; So what's the size, and I'm just\ngoing to put size question mark, right.\n\n107\n00:06:49.340 --> 00:06:51.181\n&gt;&gt; What about toppings?\n\n108\n00:06:51.181 --> 00:06:55.909\n&gt;&gt; Toppings question mark.\n\n109\n00:06:55.909 --> 00:07:00.196\nOkay, so when you say toppings like that\nare you saying, let's say it's you and\n\n110\n00:07:00.196 --> 00:07:01.721\nI ordering a pizza, right?\n\n111\n00:07:01.721 --> 00:07:03.253\nWe're gonna share a pizza.\n\n112\n00:07:03.253 --> 00:07:06.637\nSo when you say toppings,\nare we agreeing on toppings or\n\n113\n00:07:06.637 --> 00:07:08.443\nare you asking me questions?\n\n114\n00:07:08.443 --> 00:07:10.565\nAre you saying hey, do you like anchovies?\n\n115\n00:07:10.565 --> 00:07:12.186\n&gt;&gt; I'll be like hey Justin,\ndo you like cheese?\n\n116\n00:07:12.186 --> 00:07:15.805\n&gt;&gt; [LAUGH] And I'll go absolutely,\ncan we get a bunch of that on there?\n\n117\n00:07:15.805 --> 00:07:17.045\n&gt;&gt; What, do you like onions?\n\n118\n00:07:17.045 --> 00:07:18.176\n&gt;&gt; No, no.\n\n119\n00:07:18.176 --> 00:07:23.470\n&gt;&gt; [LAUGH] So we would have to\ndetermine what ones that we both like.\n\n120\n00:07:23.470 --> 00:07:28.067\nWe both like pepperoni, we both like\ncheese, we don't like onions, okay,\n\n121\n00:07:28.067 --> 00:07:29.141\nmaybe we do half.\n\n122\n00:07:29.141 --> 00:07:32.768\nI mean, all those types of just asking and\n\n123\n00:07:32.768 --> 00:07:37.962\nthen determining what is going\nto be the best for both of us.\n\n124\n00:07:37.962 --> 00:07:39.260\nAnd then we say all right,\n\n125\n00:07:39.260 --> 00:07:42.393\nthese are the toppings that we're\ngoing to have on said pizza.\n\n126\n00:07:42.393 --> 00:07:45.254\n&gt;&gt; All right, so it's kind of\na conversation, right, where hey,\n\n127\n00:07:45.254 --> 00:07:46.040\ndo you like this?\n\n128\n00:07:46.040 --> 00:07:46.790\nDo you like this?\n\n129\n00:07:46.790 --> 00:07:47.410\nDo you like this?\n\n130\n00:07:47.410 --> 00:07:52.360\nOkay, so we have size,\nwe have toppings, and then I guess, for\n\n131\n00:07:52.360 --> 00:07:56.960\nme, I'm thinking,\nwhere are we getting it from, right?\n\n132\n00:07:56.960 --> 00:08:01.318\nSo that's also part of the conversation,\ncuz you may like pizza from one place and\n\n133\n00:08:01.318 --> 00:08:03.922\nI don't like it from there,\nso we have to agree.\n\n134\n00:08:03.922 --> 00:08:09.830\nNow, I'm drawing a metaphor here\nthat is not actually perfect.\n\n135\n00:08:09.830 --> 00:08:12.710\nBut I think those are three\nkey things that if two people\n\n136\n00:08:12.710 --> 00:08:15.440\nwere gonna order a pizza,\nthen you go about it.\n\n137\n00:08:15.440 --> 00:08:20.750\nBut you know,\nlet's absolutely formalize this.\n\n138\n00:08:20.750 --> 00:08:24.950\nOf these things, which question\nis answered first do you think?\n\n139\n00:08:24.950 --> 00:08:28.090\nWhat do you talk about first?\n\n140\n00:08:28.090 --> 00:08:30.980\nNot always, but more than likely.\n\n141\n00:08:30.980 --> 00:08:33.410\n&gt;&gt; I tend to go with the where.\n\n142\n00:08:33.410 --> 00:08:37.032\nWhere are we gonna order this from,\nbecause then that determines,\n\n143\n00:08:37.032 --> 00:08:41.840\nokay cuz then you can maybe make\ndecisions from if it's Pizza Place A,\n\n144\n00:08:41.840 --> 00:08:47.420\nI like this particular topping\nbetter than from Pizza Place B.\n\n145\n00:08:47.420 --> 00:08:51.816\nAnd so that, to me, kinda determines\neverything else from there.\n\n146\n00:08:51.816 --> 00:08:54.670\n&gt;&gt; [LAUGH] And I would tend to agree.\n\n147\n00:08:54.670 --> 00:08:57.170\nSo where?\n\n148\n00:08:57.170 --> 00:08:59.440\nAnd then after where,\nwhat's next on the list?\n\n149\n00:08:59.440 --> 00:09:01.510\nDo we talk about toppings or size first?\n\n150\n00:09:01.510 --> 00:09:04.630\n&gt;&gt; I would go with size\nbecause how hungry are we?\n\n151\n00:09:04.630 --> 00:09:05.550\nIs it just me?\n\n152\n00:09:05.550 --> 00:09:08.220\nAre we gonna have to give\nsome to Wes afterwards?\n\n153\n00:09:08.220 --> 00:09:12.670\nThat kinda stuff, or\nwe should probably include Taylor too.\n\n154\n00:09:12.670 --> 00:09:13.180\n&gt;&gt; Yeah, yeah.\n\n155\n00:09:13.180 --> 00:09:14.120\n&gt;&gt; Cuz he likes to eat pizza.\n\n156\n00:09:14.120 --> 00:09:15.670\nSo those types of things.\n\n157\n00:09:15.670 --> 00:09:17.850\n&gt;&gt; He does.\nAll right and so, if I go with this,\n\n158\n00:09:17.850 --> 00:09:19.900\nI go where, the size and\nthen what toppings?\n\n159\n00:09:19.900 --> 00:09:24.280\nNow, toppings, we should put toppings\nright here in this larger but\n\n160\n00:09:24.280 --> 00:09:26.060\nreally Vonne, or I are gonna go.\n\n161\n00:09:26.060 --> 00:09:27.320\nIt's gonna be a back and forth.\n\n162\n00:09:27.320 --> 00:09:28.690\nI'm gonna go, hey,\ndo you like cheese Vonne?\n\n163\n00:09:28.690 --> 00:09:30.120\nYeah, all right we'll get cheese.\n\n164\n00:09:30.120 --> 00:09:32.020\nHey Vonne, do you anchovies?\n\n165\n00:09:32.020 --> 00:09:34.400\nNo, no, neither one of us liked anchovies.\n\n166\n00:09:34.400 --> 00:09:36.320\nI don't even know how to\nanswer that question.\n\n167\n00:09:36.320 --> 00:09:39.630\nBut there's a yes or no to that.\n\n168\n00:09:39.630 --> 00:09:42.740\nNotice though I'm asking in an order.\n\n169\n00:09:42.740 --> 00:09:44.260\nDo you like cheese?\n\n170\n00:09:44.260 --> 00:09:46.270\nYes, now we're getting cheese.\n\n171\n00:09:46.270 --> 00:09:47.860\nDo you like anchovies?\n\n172\n00:09:47.860 --> 00:09:49.610\nYes, I like anchovies.\n\n173\n00:09:51.600 --> 00:09:53.910\nYou have to think about\nthat respective order.\n\n174\n00:09:53.910 --> 00:09:56.870\n&gt;&gt; Well,\nyou're kinda going down the list, right?\n\n175\n00:09:56.870 --> 00:09:59.270\nAnd then even on the website or\nwherever you're ordering from,\n\n176\n00:09:59.270 --> 00:10:03.800\nthey'll have a list of toppings and\nyou're no, yeah, yeah,, no, no, no.\n\n177\n00:10:03.800 --> 00:10:07.000\nSo going on down and then answering and\n\n178\n00:10:07.000 --> 00:10:10.360\nthen once you to get to okay,\nwell that's all the end of the toppings.\n\n179\n00:10:10.360 --> 00:10:14.230\nOkay, well, then we've decided that\nthese are the ones that we like.\n\n180\n00:10:14.230 --> 00:10:16.120\n&gt;&gt; And you're absolutely correct.\n\n181\n00:10:16.120 --> 00:10:22.988\nSo let's kind of put this in a,\nI guess a flowchart or a mind map.\n\n182\n00:10:22.988 --> 00:10:27.910\nAll right, so let's,\nI'm gonna draw this into shape here and\n\n183\n00:10:27.910 --> 00:10:33.850\nsay all right, so and I wanna phrase\nthis a little bit differently.\n\n184\n00:10:33.850 --> 00:10:34.940\nThere's a reason why.\n\n185\n00:10:37.500 --> 00:10:38.196\nCan you decide?\n\n186\n00:10:38.196 --> 00:10:39.850\n[LAUGH] Forgot to turn that off.\n\n187\n00:10:39.850 --> 00:10:41.290\nI am silly.\n\n188\n00:10:41.290 --> 00:10:44.958\nAll right so can you decide where and so\n\n189\n00:10:44.958 --> 00:10:49.190\nI'm changing the question a little bit.\n\n190\n00:10:49.190 --> 00:10:51.240\nWhere to order this pizza and here's why.\n\n191\n00:10:51.240 --> 00:10:55.690\nIf Vonne and I do not like pizza from\nthe same places, what are we gonna do?\n\n192\n00:10:55.690 --> 00:10:56.866\nDo you like this?\n\n193\n00:10:56.866 --> 00:10:57.940\nNo.\nDo you like this?\n\n194\n00:10:57.940 --> 00:10:58.440\nNo.\n\n195\n00:11:00.010 --> 00:11:02.590\nIf we never come to a yes answer,\nwhat we do?\n\n196\n00:11:02.590 --> 00:11:05.290\n&gt;&gt; We don't order pizza I guess.\n\n197\n00:11:05.290 --> 00:11:09.700\n&gt;&gt; We don't order pizza, we go all right\nwe maybe wanna Chinese food, right?\n\n198\n00:11:09.700 --> 00:11:11.870\nThere's a backup plan effect.\n\n199\n00:11:11.870 --> 00:11:13.210\nSo, decide where.\n\n200\n00:11:13.210 --> 00:11:14.970\nSo can we decide where?\n\n201\n00:11:15.970 --> 00:11:17.970\nWell, there's two possible outcomes.\n\n202\n00:11:19.570 --> 00:11:23.420\nThere's a no and there's a yes.\n\n203\n00:11:25.560 --> 00:11:29.240\nSo if we do a no,\nI'm actually gonna draw and\n\n204\n00:11:29.240 --> 00:11:33.170\njust put an X here because that no,\nwe can think of it as termination but\n\n205\n00:11:33.170 --> 00:11:36.170\nreally, we could say, all right,\ndo you want Chinese food?\n\n206\n00:11:36.170 --> 00:11:38.420\nAnd then we go through\nthis whole process again.\n\n207\n00:11:39.930 --> 00:11:43.000\nWe don't really like the same Chinese\nfood, do you want Mexican food?\n\n208\n00:11:43.000 --> 00:11:44.770\nWe can probably agree on that.\n\n209\n00:11:44.770 --> 00:11:48.220\nSo don't think of it as that stops.\n\n210\n00:11:49.326 --> 00:11:53.220\nThink of it as, an alternative or\nsome other things are going on,\n\n211\n00:11:53.220 --> 00:11:55.710\nbut it stops on this diagram.\n\n212\n00:11:55.710 --> 00:11:57.830\nSo once we decide where, what do we say?\n\n213\n00:11:58.960 --> 00:12:01.816\nNo, that's not what I wanted.\n\n214\n00:12:01.816 --> 00:12:04.190\nI'm trying Vonne.\n\n215\n00:12:04.190 --> 00:12:07.170\nHere, can we decide size?\n\n216\n00:12:09.250 --> 00:12:15.160\nAll right, and really I'm gonna\nchange that instead of decide because\n\n217\n00:12:15.160 --> 00:12:19.818\nthat was a yes or no question,\nzoom down just a little bit and\n\n218\n00:12:19.818 --> 00:12:23.480\nsay, size.\n\n219\n00:12:23.480 --> 00:12:29.290\nAnd for the sake of keeping things\nsimple small, medium and large, right?\n\n220\n00:12:29.290 --> 00:12:31.310\nAnd people have a ridiculous.\n\n221\n00:12:31.310 --> 00:12:34.290\nSo I can either decide on a small,\n\n222\n00:12:35.960 --> 00:12:41.192\na medium, or a large, right?\n\n223\n00:12:41.192 --> 00:12:48.520\nSo okay, once we decide on size,\ndoes it end?\n\n224\n00:12:48.520 --> 00:12:51.090\nDo we ever end up with a part?\n\n225\n00:12:51.090 --> 00:12:54.530\nNow the way I phrased this,\ndo I ever terminate?\n\n226\n00:12:54.530 --> 00:12:57.818\nLike if I said we decide on\na small I don't want this.\n\n227\n00:12:57.818 --> 00:13:00.290\nNo, regardless of what we decided,\n\n228\n00:13:00.290 --> 00:13:05.840\nwe're still going to pick topics if\nthat's the question that we're answering.\n\n229\n00:13:05.840 --> 00:13:08.600\n&gt;&gt; And that was actually what I was\nthinking because before on the other\n\n230\n00:13:08.600 --> 00:13:13.360\nlevels, we're not stopping,\nit's one of these.\n\n231\n00:13:13.360 --> 00:13:18.750\nSo it's not like a no, no, yes, or\na yes, well, yeah, yes, no, no [LAUGH].\n\n232\n00:13:18.750 --> 00:13:21.540\n&gt;&gt; So\n&gt;&gt; And that's a tricky thing.\n\n233\n00:13:21.540 --> 00:13:24.240\nHow you phrase the question\nactually determines, and so\n\n234\n00:13:24.240 --> 00:13:25.740\nI'm doing this intentionally.\n\n235\n00:13:25.740 --> 00:13:28.640\nSo we're not stopping here, right?\n\n236\n00:13:28.640 --> 00:13:34.320\nWe're always picking, but\nwe pick one of these.\n\n237\n00:13:34.320 --> 00:13:35.950\nAnd then what happens?\n\n238\n00:13:35.950 --> 00:13:39.700\nWell, we can think of this\nas a quick little stop off.\n\n239\n00:13:41.190 --> 00:13:42.740\nWe go, okay, that's good.\n\n240\n00:13:42.740 --> 00:13:44.430\nAnd now what do we do?\n\n241\n00:13:45.690 --> 00:13:48.870\nWell, we come here and\nwe go, you know what?\n\n242\n00:13:48.870 --> 00:13:53.500\nWe need turn that off, number one.\n\n243\n00:13:53.500 --> 00:13:55.110\nWe need to come back.\n\n244\n00:13:55.110 --> 00:14:00.000\nAnd now, it's toppings time.\n\n245\n00:14:06.010 --> 00:14:07.790\nToppings, okay.\n\n246\n00:14:07.790 --> 00:14:10.930\nSo notice there was a branching of but\n\n247\n00:14:10.930 --> 00:14:14.580\nwe still ended up at the same,\nand now we're here.\n\n248\n00:14:14.580 --> 00:14:21.400\nSo if I zoom out a little bit, really I've\njust made a very formal But if we zoom way\n\n249\n00:14:21.400 --> 00:14:25.650\nout you can kind of think of that as kind\nof collapsing into a single place, right?\n\n250\n00:14:25.650 --> 00:14:28.430\nBut there are decisions to be made there.\n\n251\n00:14:28.430 --> 00:14:35.180\nAnd maybe, you know, it is possible\nthat if we pick a small, you know what,\n\n252\n00:14:35.180 --> 00:14:41.250\nsmall with onions, seems like\na horrible reason to not get onions.\n\n253\n00:14:41.250 --> 00:14:44.740\nBut maybe the onion flavor is just\ntoo much on a small pizza, right?\n\n254\n00:14:44.740 --> 00:14:47.460\nMaybe the onion density\nis not to your taste.\n\n255\n00:14:47.460 --> 00:14:49.460\n&gt;&gt; Or we don't need as many toppings.\n\n256\n00:14:49.460 --> 00:14:51.670\nYeah, we just maybe just\ngo straight pepperoni.\n\n257\n00:14:51.670 --> 00:14:54.690\nBut when we have a larger surface\nthen we can have a little bit more.\n\n258\n00:14:54.690 --> 00:14:58.630\n&gt;&gt; So, those are things to think about but\nlet's just keep it simple here, but\n\n259\n00:14:58.630 --> 00:15:00.370\nnow we're like toppings.\n\n260\n00:15:00.370 --> 00:15:01.780\nNow here comes the tricky part.\n\n261\n00:15:01.780 --> 00:15:04.260\nI'm going to make an assumption here\n\n262\n00:15:04.260 --> 00:15:07.290\nVonne just to drive a point home\nto help us think about this.\n\n263\n00:15:08.980 --> 00:15:13.040\nOnce we get to a topping\nthat we do not like,\n\n264\n00:15:15.040 --> 00:15:17.690\nwe are not going to\npick any more toppings.\n\n265\n00:15:17.690 --> 00:15:18.990\nOkay?\n\n266\n00:15:18.990 --> 00:15:21.850\nThis is not realistic and\nyou can actually don't have to do this,\n\n267\n00:15:21.850 --> 00:15:25.870\nbut this is to demonstrate kind\nof this thought process, okay?\n\n268\n00:15:25.870 --> 00:15:30.914\nSo let's start with this toppings,\nand let's say cheese.\n\n269\n00:15:33.333 --> 00:15:34.200\nYou like cheese?\n\n270\n00:15:34.200 --> 00:15:41.410\nWell yeah, so there's two possible\nanswers to that, no and yes.\n\n271\n00:15:41.410 --> 00:15:47.700\nWell if we go no, what I just said\nyou know what we can't agree on it.\n\n272\n00:15:47.700 --> 00:15:51.090\nIf you can't agree that cheese on a pizza\n\n273\n00:15:51.090 --> 00:15:55.000\nyou probably need to go back to the top\nand figure out somewhere else to eat.\n\n274\n00:15:55.000 --> 00:15:56.390\nAll right, so we picked yes.\n\n275\n00:15:56.390 --> 00:16:01.343\nAnd then only if we've\ndecided to get cheese, right?\n\n276\n00:16:01.343 --> 00:16:02.890\nAnd I'm phrasing these as yes or no.\n\n277\n00:16:02.890 --> 00:16:06.644\nMaybe Vonne and I are saying,\nI like mozzarella, well I like cheddar,\n\n278\n00:16:06.644 --> 00:16:09.851\nwell I like We're saying,\ndo you want cheese on your pizza?\n\n279\n00:16:09.851 --> 00:16:11.850\nYes, cool!\n\n280\n00:16:11.850 --> 00:16:13.290\nAnd I'm going to ask another question.\n\n281\n00:16:15.020 --> 00:16:22.680\nDo you want mushrooms on your pizza,\nall right?\n\n282\n00:16:22.680 --> 00:16:24.011\nSo Vonne do you like mushrooms?\n\n283\n00:16:24.011 --> 00:16:25.958\n&gt;&gt; I do.\n&gt;&gt; All right, so we can continue to go.\n\n284\n00:16:25.958 --> 00:16:28.666\nBut it is possible that Vonne said no.\n\n285\n00:16:30.960 --> 00:16:32.690\nSo we stop, right?\n\n286\n00:16:32.690 --> 00:16:35.930\nBut she didn't say no, so\nwe're gonna hop over here.\n\n287\n00:16:35.930 --> 00:16:39.250\nAnd Vonne, do you like pepperoni?\n\n288\n00:16:39.250 --> 00:16:43.410\n&gt;&gt; I do, I pretty much like every\ntopping on a pizza, so [LAUGH].\n\n289\n00:16:43.410 --> 00:16:46.360\n&gt;&gt; But she could have said no, right?\n\n290\n00:16:46.360 --> 00:16:47.960\nSo she said yes.\n\n291\n00:16:49.320 --> 00:16:52.830\nTurn that off,\nget rid of that, there we go.\n\n292\n00:16:54.330 --> 00:16:56.910\nShe could've said no, but she said yes.\n\n293\n00:16:56.910 --> 00:16:58.840\nSo there we go, all right?\n\n294\n00:16:58.840 --> 00:17:03.400\nAnd then pepperoni, we got cheese,\nmushroom, pepperoni.\n\n295\n00:17:03.400 --> 00:17:07.500\nAnd you know what, well and\ndo you like anchovies?\n\n296\n00:17:09.090 --> 00:17:09.680\n&gt;&gt; No.\n\n297\n00:17:09.680 --> 00:17:13.310\n&gt;&gt; [LAUGH]\n&gt;&gt; I haven't had in a really long time\n\n298\n00:17:13.310 --> 00:17:16.940\nsince I was a kid but\nI do like salty things.\n\n299\n00:17:16.940 --> 00:17:18.063\nI don't know, I'm gonna say no.\n\n300\n00:17:18.063 --> 00:17:20.221\n[LAUGH]\n&gt;&gt; All right, so no.\n\n301\n00:17:20.221 --> 00:17:22.690\nSo there is our stop off, right?\n\n302\n00:17:22.690 --> 00:17:25.730\nAnd now we can't ask because\nthis is to prove a point.\n\n303\n00:17:27.010 --> 00:17:31.370\nBecause we ask that question and\nI'm just going to put ellipsis here.\n\n304\n00:17:31.370 --> 00:17:34.738\nBecause this is kind of on and\non and on forever, or\n\n305\n00:17:34.738 --> 00:17:40.750\nuntil you've reached some kind of\nstopping which is the end of our program.\n\n306\n00:17:40.750 --> 00:17:43.030\nSo this is our yes condition.\n\n307\n00:17:43.030 --> 00:17:47.760\nBut based on our presupposition at the\nbeginning, once we hit a no we are done.\n\n308\n00:17:47.760 --> 00:17:52.148\nBut if I now zoom out just a little bit,\nand I look at this,\n\n309\n00:17:52.148 --> 00:17:55.020\nlet's look at what happens.\n\n310\n00:17:55.020 --> 00:17:57.810\nWe had all of these branches.\n\n311\n00:17:57.810 --> 00:18:02.270\nThat looks so much different than what\nwe're currently doing now, right?\n\n312\n00:18:02.270 --> 00:18:05.020\nWe just go this, this, this, this.\n\n313\n00:18:05.020 --> 00:18:09.590\nReally what we want to be able\nto do is to ask questions.\n\n314\n00:18:09.590 --> 00:18:13.470\nEffectively you want to have\na conversation with the computer.\n\n315\n00:18:13.470 --> 00:18:16.340\nNow how are these going to be answered?\n\n316\n00:18:16.340 --> 00:18:17.650\nNotice I've put yes and no.\n\n317\n00:18:17.650 --> 00:18:19.600\nWell those are boolean questions.\n\n318\n00:18:19.600 --> 00:18:22.590\nWe have some of those\ncomparison operators, right?\n\n319\n00:18:22.590 --> 00:18:27.210\nHey is this pepperoni, yeah, then do this.\n\n320\n00:18:28.710 --> 00:18:35.170\nAlso notice,\nto draw kind of a finer point to it,\n\n321\n00:18:35.170 --> 00:18:37.980\nnotice all of these arrows?\n\n322\n00:18:39.280 --> 00:18:43.400\nHere's the path that we took,\nwhat size pizza are we eating, medium?\n\n323\n00:18:43.400 --> 00:18:45.970\n&gt;&gt; Large.\n&gt;&gt; Large, go big or go home, right?\n\n324\n00:18:45.970 --> 00:18:48.070\nSo we essentially took,\n\n325\n00:18:51.259 --> 00:18:55.411\nEasy there Justin, not there,\nwe took this path.\n\n326\n00:18:55.411 --> 00:18:59.305\nSee that green line, well,\n\n327\n00:18:59.305 --> 00:19:04.185\ncould we have also taken that path?\n\n328\n00:19:04.185 --> 00:19:05.340\n&gt;&gt; Yeah.\n\n329\n00:19:05.340 --> 00:19:10.231\n&gt;&gt; And could we also have taken that path?\n\n330\n00:19:10.231 --> 00:19:12.240\n&gt;&gt; It's hard to see but\nyes, you went small.\n\n331\n00:19:12.240 --> 00:19:13.787\n&gt;&gt; [SOUND]\n&gt;&gt; Yes, there was the blue.\n\n332\n00:19:13.787 --> 00:19:16.371\n[LAUGH]\n&gt;&gt; There we go, all right, so.\n\n333\n00:19:18.655 --> 00:19:23.040\nNotice all of this branching,\nbut we're asking questions.\n\n334\n00:19:23.040 --> 00:19:27.160\nWe need to be able to respond to those\nquestions based on what's set in front of\n\n335\n00:19:27.160 --> 00:19:28.880\nus for a problem.\n\n336\n00:19:28.880 --> 00:19:32.770\nThat's the entire purpose of all\nof these logic control systems.\n\n337\n00:19:32.770 --> 00:19:35.730\n&gt;&gt; It's just if, if this, then do that.\n\n338\n00:19:35.730 --> 00:19:41.510\nAnd then if, but else, I know I'm\nusing some kind of key words later,\n\n339\n00:19:41.510 --> 00:19:44.400\nbut we're still in regular talk.\n\n340\n00:19:44.400 --> 00:19:46.220\n&gt;&gt; Yep.\n&gt;&gt; So it's just us saying,\n\n341\n00:19:46.220 --> 00:19:49.950\nwell these are the determining factors and\nthen we just keep on going until we have\n\n342\n00:19:49.950 --> 00:19:55.127\na termination or an\n&gt;&gt; We kind of keep doing some things too,\n\n343\n00:19:55.127 --> 00:19:58.886\nlike topping, topping, topping, to okay.\n\n344\n00:19:58.886 --> 00:20:03.849\nSo only because I know what comes next,\nlater in the show about these different\n\n345\n00:20:03.849 --> 00:20:08.300\nlogical things that we're going\nto be exploring programmatically.\n\n346\n00:20:08.300 --> 00:20:12.113\nBut it's still this whole asking,\nfiguring it out,\n\n347\n00:20:12.113 --> 00:20:17.380\ncontinue to ask until you make your\ndecision and then something happens.\n\n348\n00:20:17.380 --> 00:20:19.710\n&gt;&gt; And it's funny because we do this,\nright?\n\n349\n00:20:19.710 --> 00:20:23.010\nIf you and I are determining\nwhere to eat or what to buy or\n\n350\n00:20:23.010 --> 00:20:25.850\nsomething like that, it's a conversation,\nhey do you like this?\n\n351\n00:20:25.850 --> 00:20:30.770\nNo, I'm gonna continue to ask till\nsomething stops me from asking,\n\n352\n00:20:30.770 --> 00:20:32.600\nmaybe it's Vonne yelling at me.\n\n353\n00:20:32.600 --> 00:20:36.190\nOr maybe we come to a finite decision,\nright?\n\n354\n00:20:36.190 --> 00:20:41.540\nBut it is this branching process, and\nsometimes we don't have to have branches.\n\n355\n00:20:41.540 --> 00:20:44.510\nMaybe it's a single branch that\njust gets asked a bunch of times.\n\n356\n00:20:44.510 --> 00:20:49.830\nSomething I haven't shown is it is\npossible that you just ask a question,\n\n357\n00:20:49.830 --> 00:20:51.800\nand here we go.\n\n358\n00:20:51.800 --> 00:20:54.860\nSo instead of it being\nspecifically cheese, you just go,\n\n359\n00:20:54.860 --> 00:20:57.900\nwell let me just ask about\na bunch of toppings.\n\n360\n00:20:57.900 --> 00:21:01.902\nAnd I'm going to add a pin\nhere real quick, that's red.\n\n361\n00:21:04.047 --> 00:21:08.470\nAnd then there's a branch that\nkinda feeds back into itself, okay?\n\n362\n00:21:08.470 --> 00:21:12.270\nSo that is part of a logic, so\nit doesn't have to be this.\n\n363\n00:21:12.270 --> 00:21:15.820\nBut I wanted to show you this,\nbecause decisions you make\n\n364\n00:21:15.820 --> 00:21:20.420\ncan make this very complicated, or\nit can make it not so complicated.\n\n365\n00:21:20.420 --> 00:21:23.980\nBut you're right, Vonne,\nwe're using everyday words, and\n\n366\n00:21:23.980 --> 00:21:26.410\nwhat we're gonna find out in Python.\n\n367\n00:21:26.410 --> 00:21:29.071\nAnd then programming in general,\na lot of times they adopt those words.\n\n368\n00:21:29.071 --> 00:21:36.420\nH ey if this is a yes then do this,\notherwise do this other thing.\n\n369\n00:21:36.420 --> 00:21:41.900\nOkay but you know what,\nthat doesn't fit this model right here.\n\n370\n00:21:43.770 --> 00:21:46.120\nI don't, wait a minute, what?\n\n371\n00:21:46.120 --> 00:21:48.920\nI need to do something different\nif it's a small, medium, or large.\n\n372\n00:21:48.920 --> 00:21:52.000\nMaybe I'm calculating a price, right?\n\n373\n00:21:52.000 --> 00:21:55.898\nIf it's a small, then the price is 10.99.\n\n374\n00:21:55.898 --> 00:21:59.692\nIf it's a medium, it's 12.99.\n\n375\n00:21:59.692 --> 00:22:02.720\nBut really, I don't want to\naccidentally do all of those.\n\n376\n00:22:02.720 --> 00:22:08.000\nNotice these paths,\nit's not like I have, That,\n\n377\n00:22:08.000 --> 00:22:12.140\nI can't do that, there's no road that\nleads between those two, so to speak.\n\n378\n00:22:12.140 --> 00:22:17.380\nI gotta do one or\none of the other two, right?\n\n379\n00:22:17.380 --> 00:22:19.750\nSo that's when you have\nadditional constructs,\n\n380\n00:22:19.750 --> 00:22:23.350\nto help make sure you have those\nseparate thought processes.\n\n381\n00:22:23.350 --> 00:22:26.290\nBut Vonne, I just wanted to make sure\nthat we had kind of a high level\n\n382\n00:22:26.290 --> 00:22:28.660\noverview of what the impetus for\nthese constructs were.\n\n383\n00:22:28.660 --> 00:22:32.620\nBut in the following episodes, we're\ngonna be looking at if, else, else if.\n\n384\n00:22:32.620 --> 00:22:38.500\nAnd see how those can help us actually\nimplement these thought processes.\n\n385\n00:22:38.500 --> 00:22:40.860\nThere's no right or\nwrong answer a lot of times.\n\n386\n00:22:40.860 --> 00:22:45.100\nIt's actually very dependent on\nwhat you're trying to accomplish.\n\n387\n00:22:45.100 --> 00:22:48.918\nBut I would definitely stay tuned and\nsee how this plays out programatically.\n\n388\n00:22:48.918 --> 00:22:50.580\n&gt;&gt; All right, well,\nit's always good to break it down and\n\n389\n00:22:50.580 --> 00:22:53.140\njust kinda, let's just talk.\n\n390\n00:22:53.140 --> 00:22:57.150\nLet's just like walk through everything,\nmap this out.\n\n391\n00:22:57.150 --> 00:23:02.250\nSo that way we can kinda center\nourselves and get ready for\n\n392\n00:23:02.250 --> 00:23:06.310\nthe programming which sometimes can\nthrow you for a little bit of a loop.\n\n393\n00:23:06.310 --> 00:23:08.640\nSo that way we are all prepared for\neverything.\n\n394\n00:23:08.640 --> 00:23:11.681\nOkay, well thank you so much for that,\nand thank you for tuning in, but for\n\n395\n00:23:11.681 --> 00:23:13.335\nnow we are going to go ahead and sign off.\n\n396\n00:23:13.335 --> 00:23:16.449\nWell signing off for DevPro.TV,\nI've been your host Vonne Smith.\n\n397\n00:23:16.449 --> 00:23:17.222\n&gt;&gt; And I'm Justin Dennison.\n\n398\n00:23:17.222 --> 00:23:18.745\n&gt;&gt; And we'll see you soon.\n\n399\n00:23:18.745 --> 00:23:26.246\n[MUSIC]\n\n",
          "vimeoId": "269873674"
        },
        {
          "description": "In this episode, Justin and Vonne take a look at the first construct that can be used to alter the flow of a program, the if statement.",
          "length": "2014",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-3-1-if_statements-042718-PGM.00_34_49_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-3-1-if_statements-042718-PGM.00_34_49_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-3-1-if_statements-042718-PGM.00_34_49_06.Still001-sm.jpg",
          "title": "If Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.282 --> 00:00:10.282\n[MUSIC]\n\n2\n00:00:13.319 --> 00:00:17.295\nHello, everyone, and welcome back to\nanother exciting edition of DevPro.TV.\n\n3\n00:00:17.295 --> 00:00:18.701\nI'm your host Vonne Smith, and\n\n4\n00:00:18.701 --> 00:00:22.410\nwe're coming back at you with more in\nour programming fundamentals series.\n\n5\n00:00:22.410 --> 00:00:25.360\nIn this episode we're gonna be\ntalking about the if statement.\n\n6\n00:00:25.360 --> 00:00:27.300\nAnd here to help us is Mr.\nJustin Dennison.\n\n7\n00:00:27.300 --> 00:00:29.350\nHello, how are you?\n&gt;&gt; I'm doing fantastic, Vonne.\n\n8\n00:00:29.350 --> 00:00:31.990\nHow are you?\n&gt;&gt; Well I will be better if, you could\n\n9\n00:00:31.990 --> 00:00:36.840\ntell me what we're gonna be talking about.\n&gt;&gt; Well, if statements and\n\n10\n00:00:36.840 --> 00:00:41.960\nthis is kind of our first introduction to,\nmore or less these logical operators.\n\n11\n00:00:41.960 --> 00:00:44.600\nWe kind of gave an overview\nin the previous episode of,\n\n12\n00:00:44.600 --> 00:00:48.550\nwhat kind of logic control\nwould we expect from a program?\n\n13\n00:00:48.550 --> 00:00:50.400\nDidn't really touch on programming so\n\n14\n00:00:50.400 --> 00:00:53.330\nmuch in that episode,\nit was more about the idea.\n\n15\n00:00:53.330 --> 00:00:55.990\nBut now we're actually gonna see\nthe programmatic constructs,\n\n16\n00:00:55.990 --> 00:00:58.450\nthat we can use in order to achieve those.\n\n17\n00:00:58.450 --> 00:01:02.790\nAnd I've decided to kind of chop this\nup in to the next couple of episodes,\n\n18\n00:01:02.790 --> 00:01:04.040\nto keep them a little bit shorter.\n\n19\n00:01:04.040 --> 00:01:05.870\nInstead of trying to\nbundle them all together.\n\n20\n00:01:05.870 --> 00:01:09.280\nAnd we're going to look at\nonly the if statement part.\n\n21\n00:01:09.280 --> 00:01:11.980\nIn addition to,\nthis will be our first one where,\n\n22\n00:01:11.980 --> 00:01:15.050\nyou know maybe the repo is not\nthe best place to explore this.\n\n23\n00:01:15.050 --> 00:01:19.310\nWe're going to set up a project folder and\nthen, some additional files within that.\n\n24\n00:01:19.310 --> 00:01:24.800\nSo, that's our goal and hopefully that\ncalms your nerves a little bit Vonne.\n\n25\n00:01:24.800 --> 00:01:26.750\n&gt;&gt; Yeah it does, well and\n\n26\n00:01:26.750 --> 00:01:31.310\nthe nice thing is like you said,\nwe're only gonna talk about this one part.\n\n27\n00:01:31.310 --> 00:01:35.630\nBecause, I know with any program language,\nor even Excel for\n\n28\n00:01:35.630 --> 00:01:38.780\nthat matter that I spend\na lot of time teaching.\n\n29\n00:01:38.780 --> 00:01:44.620\nIf by itself, great, but it's usually\na lot more pieces like inside event, there\n\n30\n00:01:44.620 --> 00:01:48.990\nis like all these kinda like nesetives and\nother things associated with it.\n\n31\n00:01:48.990 --> 00:01:51.990\nThey can get really complicated,\nreally fast.\n\n32\n00:01:51.990 --> 00:01:56.410\nSo, starting at the very beginning and\nlike, just this by itself and then move\n\n33\n00:01:56.410 --> 00:01:59.690\non, that makes me feel a little better.\n&gt;&gt; And also the if statement's gonna\n\n34\n00:01:59.690 --> 00:02:04.270\nbe our first block construct that we\nwere gonna see in Python, that well,\n\n35\n00:02:04.270 --> 00:02:08.480\nit's gonna start showing some other\naspects of the Python syntax.\n\n36\n00:02:08.480 --> 00:02:13.520\nSo we're really gonna drill down there,\nand It will feel weird\n\n37\n00:02:13.520 --> 00:02:18.020\ninitially but after that I promise you,\nyou're gonna, I see how this works.\n\n38\n00:02:18.020 --> 00:02:19.420\nSo, let's go ahead and let's get started.\n\n39\n00:02:19.420 --> 00:02:20.900\nLet's take a look at the screen here, and\n\n40\n00:02:20.900 --> 00:02:25.720\nall I have is this random folder here,\nwe're not going to use that.\n\n41\n00:02:25.720 --> 00:02:29.240\nBut, I'm on my desktop and\nI have a terminal window open,\n\n42\n00:02:29.240 --> 00:02:31.399\nmaybe that's just a little bit big.\n\n43\n00:02:32.910 --> 00:02:38.130\nSo, from here, I'm going to L S,\nand that's going to give me a list.\n\n44\n00:02:38.130 --> 00:02:40.380\nYou can actually put these\nanywhere that you want to.\n\n45\n00:02:40.380 --> 00:02:42.380\nBut let's go ahead and\ncreate that project folder.\n\n46\n00:02:42.380 --> 00:02:44.900\nLet's do our little bit of\nsetup that we need to do,\n\n47\n00:02:44.900 --> 00:02:48.538\nbefore diving into more Python code.\n\n48\n00:02:48.538 --> 00:02:51.390\nSo, and then from here,\nI'm going to make a directory, and\n\n49\n00:02:51.390 --> 00:02:57.200\nlet's call this programming fundamentals.\n\n50\n00:02:57.200 --> 00:02:59.680\nSo, it's just a folder that's\ngoing to hold all of our projects.\n\n51\n00:02:59.680 --> 00:03:02.940\nAnd then, I'm going to hop over\nin to programming fundamentals.\n\n52\n00:03:02.940 --> 00:03:06.540\nAnd remember, I'm hitting tab there for\nthose auto-complete, so\n\n53\n00:03:06.540 --> 00:03:08.270\nI'm not that fast a typer.\n\n54\n00:03:08.270 --> 00:03:11.160\nAnd then ls and\nwe're good to go, all right.\n\n55\n00:03:11.160 --> 00:03:14.080\nNow, I'm going to zoom out just a little\nbit more because that's still giant.\n\n56\n00:03:14.080 --> 00:03:17.720\nAnd then, we're going to clear the screen,\nls, and there's nothing in there.\n\n57\n00:03:17.720 --> 00:03:20.730\nNow, we're going ahead and make a file.\n\n58\n00:03:20.730 --> 00:03:23.530\nWe're gonna call it ifs.py,\n\n59\n00:03:23.530 --> 00:03:28.990\nnow .py is a designation\nof a file as a Python file.\n\n60\n00:03:28.990 --> 00:03:34.120\nIt's telling essentially your system\nif Python is installed, there\n\n61\n00:03:34.120 --> 00:03:38.810\nis going to be an association between the\nPython programming language And this file.\n\n62\n00:03:38.810 --> 00:03:41.690\nSo, all the things we've been doing\nin the repo up until this point,\n\n63\n00:03:41.690 --> 00:03:44.500\ncan actually go in\na file that ends in .py.\n\n64\n00:03:44.500 --> 00:03:48.030\nNow, there's other ways\nto go about doing this.\n\n65\n00:03:48.030 --> 00:03:52.560\nBut we can just create a file and then,\nwell, we just start writing Python in it.\n\n66\n00:03:52.560 --> 00:03:55.460\nAnd then, I'll show you how to\nrun that file respectively.\n\n67\n00:03:55.460 --> 00:03:58.710\nSo, I'm going to touch that file,\nmake sure it's there.\n\n68\n00:03:58.710 --> 00:04:02.960\nNow we're gonna move away from\nthe terminal just for a moment.\n\n69\n00:04:02.960 --> 00:04:06.800\nNow I'm going to hop over here, and I'm\ngoing to hold command and hit space, or\n\n70\n00:04:06.800 --> 00:04:11.730\nyou can hit the window key and\nsearch for visual studio code.\n\n71\n00:04:11.730 --> 00:04:14.680\nYeah, we're actually going to finally\nuse that thing that we installed so\n\n72\n00:04:14.680 --> 00:04:16.230\nmany episodes ago.\n\n73\n00:04:16.230 --> 00:04:20.700\nAnd well, you'll notice that,\nif I'm not mistaken in\n\n74\n00:04:20.700 --> 00:04:25.400\nthe previous episodes where we were\nexploring, we had the desktop folder open.\n\n75\n00:04:25.400 --> 00:04:28.570\nSo see how programming fundamentals\nis kind of already, there and\n\n76\n00:04:28.570 --> 00:04:29.726\nsome important project?\n\n77\n00:04:29.726 --> 00:04:34.930\nBut you know what, I don't want all\nof this so what I'm going to do is\n\n78\n00:04:35.940 --> 00:04:40.710\nclose the folder and there we go and\nnow there's nothing.\n\n79\n00:04:40.710 --> 00:04:45.350\nAnd I'm gonna File, Open,\nyou can either open or open workspace.\n\n80\n00:04:45.350 --> 00:04:50.470\nI'm actually gonna open,\nworkspace actually has some more wait for\n\n81\n00:04:50.470 --> 00:04:53.700\nit, has some more minification.\n\n82\n00:04:53.700 --> 00:04:55.380\nI'm gonna try to open, and it looks like,\n\n83\n00:04:55.380 --> 00:04:58.950\nthere you go, apparently I clicked\nwrong or something at the last time.\n\n84\n00:04:58.950 --> 00:05:02.400\nI'm gonna hop over to desktop,\nand I'm gonna select the folder,\n\n85\n00:05:02.400 --> 00:05:05.970\nand I'm not gonna select the file,\ncuz I don't want just the file open.\n\n86\n00:05:05.970 --> 00:05:08.260\nNow, if you're at a different platform,\nIf I'm not,\n\n87\n00:05:08.260 --> 00:05:14.040\nthere might actually be an open folder,\nso there might be some differences there.\n\n88\n00:05:14.040 --> 00:05:17.580\nNow, it could have created\nthe folder here, as you see, and\n\n89\n00:05:17.580 --> 00:05:19.820\nactually, done most of\nthis from the editor.\n\n90\n00:05:19.820 --> 00:05:23.250\nBut I like being in terminal,\ndone, then, there we go.\n\n91\n00:05:23.250 --> 00:05:26.820\nSo were going to go ahead and open.\n\n92\n00:05:26.820 --> 00:05:29.920\nAnd because I didn't select the file,\nI have that folder open.\n\n93\n00:05:29.920 --> 00:05:33.620\nEverything is good to go, however,\nI'm going to zoom out just a little bit.\n\n94\n00:05:33.620 --> 00:05:38.610\nHeld command hit minus sign,\nyou're probably not as zoomed in as I was,\n\n95\n00:05:38.610 --> 00:05:42.302\njust because of previous episodes,\nso, you may not have to do that.\n\n96\n00:05:42.302 --> 00:05:46.530\nAnd then for me, I'm gonna go ahead and do\nfull screen, and what that's gonna do is,\n\n97\n00:05:46.530 --> 00:05:50.720\nit's gonna give me the full real\nestate of the actual scree,n and\n\n98\n00:05:50.720 --> 00:05:54.100\nthen likewise,\nyou're gonna see me flip back and forth.\n\n99\n00:05:54.100 --> 00:05:57.670\nYou may not have that available, that's\nsomething I use as part of my work flow.\n\n100\n00:05:57.670 --> 00:06:00.360\nThat's to help you see,\nwe have a full screen here.\n\n101\n00:06:00.360 --> 00:06:03.550\nAnd then I'm gonna flip over here and\nwe're gonna have a whole screen here.\n\n102\n00:06:03.550 --> 00:06:04.800\nSo we can have,\n\n103\n00:06:04.800 --> 00:06:08.190\nsadly there is some context-switching\nhere that we'll have to do.\n\n104\n00:06:08.190 --> 00:06:11.030\nBut at this point we should\nbe kind of set up and\n\n105\n00:06:11.030 --> 00:06:12.060\nready to go.\n&gt;&gt; Yeah,\n\n106\n00:06:12.060 --> 00:06:14.570\nbecause you're using multiple\ndesktops on your Mac.\n\n107\n00:06:14.570 --> 00:06:16.360\nCuz that's why you're doing the flipping,\nand\n\n108\n00:06:16.360 --> 00:06:19.050\nback over to the editor\nthat you were using.\n\n109\n00:06:19.050 --> 00:06:20.740\nSo on this one right here,\n\n110\n00:06:20.740 --> 00:06:26.420\nwe want to be very specific into\nthe folder that we are already working in.\n\n111\n00:06:26.420 --> 00:06:30.460\nCould you have technically\nhave stayed on the desktop?\n\n112\n00:06:30.460 --> 00:06:31.920\nIt wouldn't mess up any program,\n\n113\n00:06:31.920 --> 00:06:34.760\nbecause you're doing it right in the file,\ncorrect?\n\n114\n00:06:34.760 --> 00:06:37.250\nYou're just trying to be i\nonly want to be in here.\n\n115\n00:06:37.250 --> 00:06:39.080\n&gt;&gt; I'm essentially zooming in my focus,\n\n116\n00:06:39.080 --> 00:06:42.160\nI'm narrowing my focus so\nI don't have other folders and files,\n\n117\n00:06:42.160 --> 00:06:46.410\nthat are kind of not\nimportant at the time.\n\n118\n00:06:46.410 --> 00:06:49.090\nWe will only want to work in\nthe program in fundamentals,\n\n119\n00:06:49.090 --> 00:06:52.020\nthis is purely an organizational\nmindset of mine.\n\n120\n00:06:52.020 --> 00:06:54.130\nI tend to not have a whole\nbunch of folders open or\n\n121\n00:06:54.130 --> 00:06:56.990\nlike a top level folder like your desktop,\nand then see everything.\n\n122\n00:06:56.990 --> 00:07:00.150\nAnd then I'll open one folder at a time,\n\n123\n00:07:00.150 --> 00:07:04.570\nbecause it allows me to stay focused\non that particular set of tasks, or\n\n124\n00:07:04.570 --> 00:07:07.320\nwhatever it may be.\n&gt;&gt; Yeah, and especially from older days,\n\n125\n00:07:07.320 --> 00:07:09.490\nlike using Dreamweaver and\nstuff like that.\n\n126\n00:07:09.490 --> 00:07:13.066\nYou need to specify that folder,\ncuz all the links that it's doing,\n\n127\n00:07:13.066 --> 00:07:15.050\nit's going to write relative links.\n\n128\n00:07:15.050 --> 00:07:19.210\nAnd if you're in the wrong folder,\nit kind of writes it wrong for you, but in\n\n129\n00:07:19.210 --> 00:07:21.880\nthis sense we don't really have to worry\nabout that cuz everything [INAUDIBLE].\n\n130\n00:07:21.880 --> 00:07:24.350\nSo it doesn't do any weird\nthings in that sense.\n\n131\n00:07:24.350 --> 00:07:25.050\n&gt;&gt; No, it not going to do\n\n132\n00:07:25.050 --> 00:07:25.720\nany weird things.\n\n133\n00:07:25.720 --> 00:07:28.270\nActually, the relative pathing and\nfile paths and\n\n134\n00:07:28.270 --> 00:07:29.760\nstuff, that's completely up to you.\n\n135\n00:07:29.760 --> 00:07:34.620\nWe'll always have to be thinking about\nthat, so that's not going to mess up\n\n136\n00:07:34.620 --> 00:07:38.030\nanything, it's just purely\nan organizational kinda thought process.\n\n137\n00:07:38.030 --> 00:07:42.350\nSo, we have this folder and we have this\nfile and we're going to go ahead and\n\n138\n00:07:42.350 --> 00:07:43.460\nopen that file.\n\n139\n00:07:43.460 --> 00:07:46.210\nAnd you'll notice down\nhere behind my head,\n\n140\n00:07:46.210 --> 00:07:49.110\nVisual Studio code is\ntrying to be helpful.\n\n141\n00:07:49.110 --> 00:07:52.810\nSays there is a python extension\nrecommended for this code type.\n\n142\n00:07:52.810 --> 00:07:54.970\nNow, you could go ahead and install this.\n\n143\n00:07:54.970 --> 00:07:59.285\nAnd what that would do is install, kind\nof like a power up, a boost, if you will,\n\n144\n00:07:59.285 --> 00:08:00.820\nthat will help with Python.\n\n145\n00:08:00.820 --> 00:08:05.740\nFor now though, I'm gonna leave and\nclose out on that.\n\n146\n00:08:05.740 --> 00:08:08.760\nFor now, I think we're just\ngonna leave that alone and\n\n147\n00:08:08.760 --> 00:08:14.170\nuse whatever is built on the actual\nVisual Studio Code editor.\n\n148\n00:08:14.170 --> 00:08:18.580\nAnd what are those things,\n\n149\n00:08:18.580 --> 00:08:23.580\nwell if we say, X = 43,\nnotice how there's a little bit of,\n\n150\n00:08:23.580 --> 00:08:27.110\nlike highlighting, see how that\nhas like a green highlighting.\n\n151\n00:08:27.110 --> 00:08:30.578\nIt's kinda hard to see way forward,\n[LAUGH] [CROSSTALK] and actually Vonne,\n\n152\n00:08:30.578 --> 00:08:34.103\nyou may have a harder time seeing this\non studio because of our lighting, but\n\n153\n00:08:34.103 --> 00:08:35.555\nthere is a slight coloration.\n\n154\n00:08:35.555 --> 00:08:38.800\nI'm gonna see there, there are gonna\nbe some changes in coloration.\n\n155\n00:08:38.800 --> 00:08:42.850\nIn addition to make sure that\nyou have all of this setup.\n\n156\n00:08:42.850 --> 00:08:47.840\nIf you come back behind my head one\nmore time, then you're going to see\n\n157\n00:08:47.840 --> 00:08:53.260\nright down here,\nthere's a Python designation.\n\n158\n00:08:53.260 --> 00:08:57.730\nThat's going to say, hey, Visual Studio\ncode recognizes this as a Python file.\n\n159\n00:08:57.730 --> 00:09:01.970\nAnd is going to use Python as\na way of looking at the file.\n\n160\n00:09:01.970 --> 00:09:04.100\nIt will be helpful in that sense.\n\n161\n00:09:04.100 --> 00:09:09.640\nIn addition to Spaces: 4,\nthis is actually important.\n\n162\n00:09:09.640 --> 00:09:11.050\nWe'll actually come back to this.\n\n163\n00:09:12.450 --> 00:09:17.620\nWhat's gonna happen is Python is\nwhitespace important kind of selective.\n\n164\n00:09:17.620 --> 00:09:19.690\nIt's whitespace important.\n\n165\n00:09:19.690 --> 00:09:22.580\nSo there's no brackets and\nbraces and all that stuff.\n\n166\n00:09:22.580 --> 00:09:28.790\nYou essentially organize your code using\nindentation, so code will be indented.\n\n167\n00:09:30.030 --> 00:09:36.730\nI'm really bad about hitting the tab key,\nexcept you shouldn't use tabs.\n\n168\n00:09:36.730 --> 00:09:39.795\nBecause sometimes you end\nup with a tab character.\n\n169\n00:09:39.795 --> 00:09:41.600\n[LAUGH] And other programs.\n\n170\n00:09:41.600 --> 00:09:45.430\nAnd it really should be four spaces for\neach level of indentation.\n\n171\n00:09:45.430 --> 00:09:47.420\nAnd just to show you what I mean.\n\n172\n00:09:47.420 --> 00:09:49.030\nSo if I came here.\n\n173\n00:09:49.030 --> 00:09:50.450\nLet's say I was writing an outline.\n\n174\n00:09:50.450 --> 00:09:51.460\nThis is not python code.\n\n175\n00:09:51.460 --> 00:09:54.410\nI would go one, two, three, four.\n\n176\n00:09:54.410 --> 00:09:56.500\nAnd then I would write something else.\n\n177\n00:09:56.500 --> 00:10:00.880\nAnd then if I wanted an additional level,\nI would go one, two, three, four.\n\n178\n00:10:00.880 --> 00:10:02.390\nBut you're always counting.\n\n179\n00:10:02.390 --> 00:10:06.180\nThat's really annoying,\nso x equals 43 tab,\n\n180\n00:10:06.180 --> 00:10:10.150\nbut guess what your tab does?\n\n181\n00:10:10.150 --> 00:10:12.590\nThis is called a soft tab.\n\n182\n00:10:12.590 --> 00:10:14.180\nIt's a programmatic tab work.\n\n183\n00:10:14.180 --> 00:10:17.300\nWhen you hit the tab character in a python\nfunnel, this setting down here and\n\n184\n00:10:17.300 --> 00:10:20.670\nbehind my head for spaces of 4.\n\n185\n00:10:20.670 --> 00:10:22.690\nThat actually says,\nevery time you hit the tab key,\n\n186\n00:10:22.690 --> 00:10:27.080\nI'm gonna put four actual space characters\nin there instead of a tab character.\n\n187\n00:10:28.450 --> 00:10:32.760\nThese rich text editors that's one of\nthose minutia that are super helpful, that\n\n188\n00:10:32.760 --> 00:10:37.210\nkeep you from having pulling your hair\nout and going, why are you not working?\n\n189\n00:10:37.210 --> 00:10:42.620\nCuz if you mix tabs and\nspaces in Python it will break, yeah.\n\n190\n00:10:42.620 --> 00:10:46.290\nAnd it's starts breaking in weird ways\nlike it will point to an empty space and\n\n191\n00:10:46.290 --> 00:10:50.812\ngo somethings is wrong here and\nyou go, what?\n\n192\n00:10:50.812 --> 00:10:53.680\nSo usually an editor\nlike this helps eleviate\n\n193\n00:10:53.680 --> 00:10:54.600\nthose problems.\n&gt;&gt; So\n\n194\n00:10:54.600 --> 00:10:58.430\nyou're essentially setting a tabs to me\nthat's what you're doing with the for\n\n195\n00:10:58.430 --> 00:11:01.210\ncuz you could change that obviously\nyou can make it six or five or\n\n196\n00:11:01.210 --> 00:11:03.610\nwhatever the default is four?\n&gt;&gt; Yeah, so\n\n197\n00:11:03.610 --> 00:11:09.240\nthis is I the recommendation for\npython is four, so that's a setting\n\n198\n00:11:09.240 --> 00:11:11.960\nthat's used within visual studio code.\n&gt;&gt; And\n\n199\n00:11:11.960 --> 00:11:16.410\nI'm also over here tackling because there\nis a specific show that I watched and\n\n200\n00:11:16.410 --> 00:11:19.630\nthere is a whole episode about a guy\nbreaking up with a girl cuz she\n\n201\n00:11:19.630 --> 00:11:22.570\nwas coding with spaces instead of tabs and\nthey got on this big thing.\n\n202\n00:11:22.570 --> 00:11:24.009\nSo it's like this so I'm over here like.\n\n203\n00:11:24.009 --> 00:11:28.130\n[LAUGH] This is actually like a dorky\nstuff that you're like tab and spaces.\n\n204\n00:11:28.130 --> 00:11:32.910\nBut it is kind of of go programmer\npreference, I guess in this sense you're\n\n205\n00:11:32.910 --> 00:11:35.830\nsaying it'll break, so\nthat's when you're like, it'll break.\n\n206\n00:11:35.830 --> 00:11:38.780\nNow this isn't just a stylistic\n\n207\n00:11:38.780 --> 00:11:43.650\npreference of I use spaces vs tabs and\nthat whole episode.\n\n208\n00:11:43.650 --> 00:11:45.879\nThis is like for real in this language.\n&gt;&gt; Yes,\n\n209\n00:11:45.879 --> 00:11:50.710\nthis causes syntax errors.\n&gt;&gt; If you mix them.\n\n210\n00:11:50.710 --> 00:11:52.170\n&gt;&gt; If you mix them or\n\n211\n00:11:52.170 --> 00:11:57.990\nif you get things mixed up and\nyou'll see momentarily how that plays out.\n\n212\n00:11:57.990 --> 00:12:01.360\nNow the reason I bring that up is because\nif you ever kind of venture out into other\n\n213\n00:12:01.360 --> 00:12:05.570\nlanguages people will have preferences\nbecause it does increase readability.\n\n214\n00:12:05.570 --> 00:12:10.070\nWhat Python has done is taken that\nreadability increase from indentation\n\n215\n00:12:10.070 --> 00:12:12.790\nconventions and\nmade it part of the language.\n\n216\n00:12:12.790 --> 00:12:16.040\nAll right, so\nyou have to indent in a certain way\n\n217\n00:12:16.040 --> 00:12:17.580\nwhich actually makes it more readable.\n\n218\n00:12:17.580 --> 00:12:21.030\nIt gives you a very defined structure,\nbut a lot of times,\n\n219\n00:12:21.030 --> 00:12:24.490\nyou'll see this in other programming\nlanguages because it does help and\n\n220\n00:12:24.490 --> 00:12:28.630\nthere are conventions to follow,\nbut we have this file.\n\n221\n00:12:28.630 --> 00:12:31.180\nIt has nothing in it now.\n\n222\n00:12:31.180 --> 00:12:32.790\nSomething I always recommend doing and\n\n223\n00:12:32.790 --> 00:12:35.270\nwe haven't done this because\nwe've been in the REPL.\n\n224\n00:12:35.270 --> 00:12:37.900\nThe p end REPL stands for print.\n\n225\n00:12:37.900 --> 00:12:40.430\nWe haven't had to print anything.\n\n226\n00:12:40.430 --> 00:12:46.810\nBut now, if I want to print\nsomething out to the terminal,\n\n227\n00:12:46.810 --> 00:12:50.940\nI have to tell the Python programming\nlanguage, yo, I want this printed.\n\n228\n00:12:50.940 --> 00:12:54.490\nAnd just to make sure we don't have any\nhidden characters, any kinds of craziness.\n\n229\n00:12:54.490 --> 00:12:59.950\nIf we hop back over here,\nwe can type Python 3.\n\n230\n00:12:59.950 --> 00:13:03.800\nAnd then the name of the file and\nlet me zoom out a little bit.\n\n231\n00:13:03.800 --> 00:13:06.110\nNotice python 3 ifs.py.\n\n232\n00:13:06.110 --> 00:13:12.060\nAnd I'm wanna run it and\nit actually slope in that file,\n\n233\n00:13:13.210 --> 00:13:18.090\nit's magic and it tries execute any valid\npython code contained in that file.\n\n234\n00:13:19.220 --> 00:13:23.412\nThat's kinda like magic\ncuz nothing happened but\n\n235\n00:13:23.412 --> 00:13:28.131\nit did try to do that.\n&gt;&gt; But you does said like Python code\n\n236\n00:13:28.131 --> 00:13:33.019\nlike we went back over to and\ntype in 7 + 3 would\n\n237\n00:13:33.019 --> 00:13:37.250\nit in the REPL do that?\n&gt;&gt; So if we try to run this\n\n238\n00:13:37.250 --> 00:13:40.630\nbecause this evaluates in the REPL\nthis is valid Python code, this will\n\n239\n00:13:40.630 --> 00:13:45.180\nnot cause some error actually make sure\nyou save if you ever make an edit.\n\n240\n00:13:45.180 --> 00:13:49.860\nAnd you see this little white dot you\ndid not save so if you try to run it,\n\n241\n00:13:49.860 --> 00:13:54.290\nit will actually run the previous save\nversion so be carefully there, so\n\n242\n00:13:54.290 --> 00:13:59.590\nwe are gonna go Python3 ifs And\n7 plus 3 is valid Python code.\n\n243\n00:13:59.590 --> 00:14:00.671\nSo it went [SOUND].\n\n244\n00:14:00.671 --> 00:14:05.130\nNow there's nothing there,\nbecause there's no actual print.\n\n245\n00:14:05.130 --> 00:14:06.710\nBut it did run behind the scenes.\n&gt;&gt; But\n\n246\n00:14:06.710 --> 00:14:10.340\nit didn't equal ten.\n&gt;&gt; It did equal ten.\n\n247\n00:14:10.340 --> 00:14:11.230\nIt evaluated the ping.\n\n248\n00:14:11.230 --> 00:14:13.410\nYou just don't see it.\n&gt;&gt; Okay.\n\n249\n00:14:13.410 --> 00:14:14.743\n&gt;&gt; [LAUGH]\n\n250\n00:14:14.743 --> 00:14:17.311\n&gt;&gt; Because we would need something in\n\n251\n00:14:17.311 --> 00:14:21.830\nthe file to say, like,\nwrite the evaluation of this.\n\n252\n00:14:21.830 --> 00:14:26.873\nOkay. Got you. &gt;&gt; So what Vonne is asking\nabout is what about this print thing,\n\n253\n00:14:26.873 --> 00:14:27.940\nright?\n\n254\n00:14:27.940 --> 00:14:29.980\nThere's a P in the acronym REPL.\n\n255\n00:14:29.980 --> 00:14:32.570\nRead, evaluate, print, loop.\n\n256\n00:14:32.570 --> 00:14:35.590\nPrint is kind of implicit in the REPL.\n\n257\n00:14:35.590 --> 00:14:40.790\nIn a regular Python file, you have to be\nexplicit about what you want to print.\n\n258\n00:14:40.790 --> 00:14:45.190\nThere's a function called print,\nparentheses and\n\n259\n00:14:45.190 --> 00:14:52.080\nthen whatever you want to print to\nthe terminal is in parentheses, okay?\n\n260\n00:14:52.080 --> 00:14:54.960\nSo I can pretty much put\nanything I want to here and\n\n261\n00:14:54.960 --> 00:14:56.980\nthen it'll print it back out to me.\n&gt;&gt; And\n\n262\n00:14:56.980 --> 00:14:59.680\nthat's where in the REPL we\njust did seven plus random.\n\n263\n00:14:59.680 --> 00:15:02.030\nIt showed us because it was doing it here.\n\n264\n00:15:02.030 --> 00:15:08.080\nThat's where the whole, you have to type\nit in the python code way to make it work.\n\n265\n00:15:08.080 --> 00:15:12.240\nIt's just a little bit of a mind thing\ngoing on with me with the, wait.\n\n266\n00:15:12.240 --> 00:15:14.580\nWe have to make sure it does that.\n&gt;&gt; Yeah.\n\n267\n00:15:14.580 --> 00:15:16.050\nWe have to make sure.\n\n268\n00:15:16.050 --> 00:15:17.810\nOtherwise, it will be\nevaluating on this code.\n\n269\n00:15:17.810 --> 00:15:21.630\nBut it won't actually put anything\nto the screen unless you tell it to.\n\n270\n00:15:21.630 --> 00:15:24.380\nAnd if I do that,\nnow you can actually see that 7\n\n271\n00:15:24.380 --> 00:15:25.400\nplus 3 is 10.\n&gt;&gt; Okay.\n\n272\n00:15:25.400 --> 00:15:26.960\n&gt;&gt; So this is a little bit of set up.\n\n273\n00:15:26.960 --> 00:15:31.990\nAnd this ends up being\na chunk of the episode.\n\n274\n00:15:31.990 --> 00:15:35.780\nBut this is important because, from here\non out, this is kind of our workflow.\n\n275\n00:15:35.780 --> 00:15:40.070\nWe're gonna be typing into files and\nwe're gonna be printing out.\n\n276\n00:15:40.070 --> 00:15:42.208\nBut we haven't even touched ifs yet.\n\n277\n00:15:42.208 --> 00:15:44.729\nI can see Vonne going wait a minute,\nare you done?\n\n278\n00:15:44.729 --> 00:15:45.780\n&gt;&gt; [LAUGH] I was gonna say good,\n\n279\n00:15:45.780 --> 00:15:48.315\nnow that we've got this set up,\nnow we're gonna talk about ifs.\n\n280\n00:15:48.315 --> 00:15:50.950\nI feel like I'm slightly derailing, but\n\n281\n00:15:50.950 --> 00:15:55.766\nthat is kind of important in the sense of\nlike we are starting to type in Python\n\n282\n00:15:55.766 --> 00:16:00.888\ncoding language in the editor Because\nbefore we kinda haven't been doing that,\n\n283\n00:16:00.888 --> 00:16:06.470\nwe've kinda just been halving it almost.\n&gt;&gt; Yeah, we've been exploring, right?\n\n284\n00:16:06.470 --> 00:16:09.710\nBut now we need more explicit,\n\n285\n00:16:09.710 --> 00:16:13.760\nwe need a lot more working space\nin the REPL for ifs and things.\n\n286\n00:16:13.760 --> 00:16:18.790\nSometimes, it's not as friendly, it's\neasier to actually type it in an editor.\n\n287\n00:16:18.790 --> 00:16:21.824\nSo, let's think about this,\n\n288\n00:16:21.824 --> 00:16:27.191\nlet's create a couple of\nvariables we are gonna go back\n\n289\n00:16:27.191 --> 00:16:32.326\nto likes_chesse = True,\nand how about num_one,\n\n290\n00:16:32.326 --> 00:16:37.249\nactually let's do this\nfavorite_number = 7.\n\n291\n00:16:38.320 --> 00:16:41.810\nNow notice, again,\nwe do this little bit of highlighting.\n\n292\n00:16:41.810 --> 00:16:45.490\nThis blue means this is a reserved thing,\nthis is Python special.\n\n293\n00:16:46.600 --> 00:16:49.650\nSo that means if you ever see that,\nyou can't do,\n\n294\n00:16:49.650 --> 00:16:55.130\nwell, technically,\npretty sure technically you can\n\n295\n00:16:55.130 --> 00:17:00.090\nin some aspects [LAUGH],\nlet's see if it breaks.\n\n296\n00:17:00.090 --> 00:17:03.100\nI wanna say that you might actually\nbe able to get away with this one.\n\n297\n00:17:04.740 --> 00:17:07.545\nJust because you can\ndoesn't mean you should.\n\n298\n00:17:07.545 --> 00:17:11.602\n[LAUGH] So we're gonna hop over,\nI'm gonna zoom out and boom.\n\n299\n00:17:11.602 --> 00:17:13.751\n[SOUND] Can't assign to a keyword.\n\n300\n00:17:13.751 --> 00:17:18.060\nSo there are sometimes where I\nwanna say there's like a weirdness,\n\n301\n00:17:18.060 --> 00:17:20.800\nyou can do some kind of crazy stuff.\n\n302\n00:17:20.800 --> 00:17:23.580\nDon't ever do that, now for the most part,\nyou're gonna get this error.\n\n303\n00:17:23.580 --> 00:17:25.250\nSyntax error, can't assign to a keyword.\n\n304\n00:17:25.250 --> 00:17:29.610\nThat means that you've tried to use\na keyword, a reserved word, as a variable.\n\n305\n00:17:29.610 --> 00:17:31.330\nDon't do that, all right?\n\n306\n00:17:31.330 --> 00:17:35.220\nNow at this point, how about we do this?\n\n307\n00:17:35.220 --> 00:17:40.550\nHow about we say, if, so\n\n308\n00:17:40.550 --> 00:17:45.670\nlet's say this, if I like cheese,\nI want to print out my favorite number.\n\n309\n00:17:47.130 --> 00:17:50.730\nThere's two variables we've got\nthis information from somewhere.\n\n310\n00:17:50.730 --> 00:17:56.100\nSo I can do, if likes_cheese.\n\n311\n00:17:56.100 --> 00:18:01.030\nAnd a lot of people will say,\nif likes_cheese is true, right?\n\n312\n00:18:01.030 --> 00:18:04.640\nNow that's perfectly okay, we're going to\nleave it that way, then what I want to do,\n\n313\n00:18:04.640 --> 00:18:10.190\nnotice I have if space, and\nthen this has an expression.\n\n314\n00:18:11.570 --> 00:18:17.400\nWhat this really means is Likes\ncheese is true, or is equal to true.\n\n315\n00:18:17.400 --> 00:18:20.490\nWell, is like cheese equal to true?\n\n316\n00:18:20.490 --> 00:18:24.790\nWell, yes, what happens is Python\ngets cool, that evades with True,\n\n317\n00:18:24.790 --> 00:18:30.750\nlet me replace that as if true\nthen we are good to go, okay?\n\n318\n00:18:30.750 --> 00:18:33.310\nBut really here, asking questions,\n\n319\n00:18:33.310 --> 00:18:38.380\nif likes cheese Well,\nnotice at the end of this I have a colon.\n\n320\n00:18:39.740 --> 00:18:40.540\nSemicolon?\n\n321\n00:18:40.540 --> 00:18:43.290\nNotice how this shows up as red.\n\n322\n00:18:43.290 --> 00:18:44.710\nThat's a problem, right?\n\n323\n00:18:44.710 --> 00:18:48.570\nRed, danger, danger, bad, colon.\n\n324\n00:18:48.570 --> 00:18:49.610\nAnd that's helpful,\n\n325\n00:18:49.610 --> 00:18:53.115\ncuz if you're in regular Notepad,\nit'll let you do all these things.\n\n326\n00:18:53.115 --> 00:18:54.010\n[LAUGH] And it goes, yeah,\n\n327\n00:18:54.010 --> 00:18:56.720\nlooks good to me.\n&gt;&gt; Is that red gonna come up\n\n328\n00:18:56.720 --> 00:18:59.600\nany time you do like a syntax error, or\n\n329\n00:18:59.600 --> 00:19:02.930\nis it just specifically here?\n&gt;&gt; It will\n\n330\n00:19:02.930 --> 00:19:06.070\ncrop up when there is\nblinking syntax errors.\n\n331\n00:19:06.070 --> 00:19:11.020\nSometimes some syntax error [INAUDIBLE],\nas we've seen technically assigned\n\n332\n00:19:11.020 --> 00:19:15.681\nto a keyword is a syntax error, so\nit won't come up there but if there is a.\n\n333\n00:19:15.681 --> 00:19:18.989\nIf I'm like woah,\nthen this red is like hey, and\n\n334\n00:19:18.989 --> 00:19:24.333\nactually in python I can only think of one\nplace you would ever use a semi colon.\n\n335\n00:19:24.333 --> 00:19:29.590\nAnd that's an actual valid python code and\nit's kind of an advanced use case.\n\n336\n00:19:29.590 --> 00:19:32.220\nUsually it's going to go, hey are you\nsure there's a semi colon here.\n\n337\n00:19:32.220 --> 00:19:34.060\nSo that will always pop up.\n\n338\n00:19:34.060 --> 00:19:39.480\nNow if you like cheese and if like_ cheese\nis true, then I want to do something.\n\n339\n00:19:39.480 --> 00:19:41.040\nI want to print out my favorite number.\n\n340\n00:19:42.180 --> 00:19:44.900\nNotice how when I hit enter it\nautomatically indents in for me,\n\n341\n00:19:44.900 --> 00:19:47.390\nmy cursor is not at the left hand side.\n\n342\n00:19:50.390 --> 00:19:51.730\nWell, what does that mean?\n\n343\n00:19:51.730 --> 00:19:57.360\nThat means, that if I indent\nonly the code that I write at\n\n344\n00:19:57.360 --> 00:20:03.630\nthis indented level,\nwill run if likes_cheese is equal to true.\n\n345\n00:20:03.630 --> 00:20:08.770\nSo if I say, print my favorite\n\n346\n00:20:11.270 --> 00:20:15.870\nnumber is, and\nwe're just going to put a comma here,\n\n347\n00:20:15.870 --> 00:20:21.340\nbecause we're going to print another\npiece I'm gonna print favorite_number.\n\n348\n00:20:21.340 --> 00:20:25.410\nA favorite number is, I'm just gonna\nprint this string and a number.\n\n349\n00:20:25.410 --> 00:20:26.880\nI will come back to this a little more,\n\n350\n00:20:26.880 --> 00:20:31.480\nbut if I like cheese then\nmy favorite number is, all.\n\n351\n00:20:31.480 --> 00:20:36.960\nSo only this will run if\nlikes_cheese is equal to True.\n\n352\n00:20:36.960 --> 00:20:37.860\n&gt;&gt; And the syntax or\n\n353\n00:20:37.860 --> 00:20:41.290\nthe comma after that string\nthat's just saying print this And\n\n354\n00:20:41.290 --> 00:20:44.427\nthis if there is another thing I\nwanted to print out, do another comma.\n\n355\n00:20:44.427 --> 00:20:45.720\nSo, that's just saying\n\n356\n00:20:45.720 --> 00:20:46.790\nthese are the things.\n&gt;&gt; Yep.\n\n357\n00:20:46.790 --> 00:20:51.293\nThese are the thing,s and this will end up\nsometimes giving you some kinda of weird\n\n358\n00:20:51.293 --> 00:20:54.836\noutputs, but we just kinda wanna get it to\nthe screen without getting too bogged down\n\n359\n00:20:54.836 --> 00:20:55.931\ntown.\n&gt;&gt; [LAUGH]\n\n360\n00:20:55.931 --> 00:20:57.323\n&gt;&gt; We can get bombed downtown.\n\n361\n00:20:57.323 --> 00:20:59.870\nBut getting bogged downtown with detail.\n\n362\n00:20:59.870 --> 00:21:03.470\nSo I'm gonna include this out, so\nI'm gonna type Python 3 Ifs and\n\n363\n00:21:03.470 --> 00:21:05.400\nmy favorite number is 7.\n\n364\n00:21:05.400 --> 00:21:11.010\nWell, yeah, that worked,\nlet's actually go here and look.\n\n365\n00:21:11.010 --> 00:21:15.960\nSo I held shift and hit tab,\nand I undid that indentation.\n\n366\n00:21:15.960 --> 00:21:17.460\nNotice my editor's like all right,\n\n367\n00:21:17.460 --> 00:21:18.860\nwhatever, I guess you\nknow what you're doing.\n\n368\n00:21:18.860 --> 00:21:22.370\nIt's not gonna underline,\nit's not gonna do anything like that.\n\n369\n00:21:22.370 --> 00:21:25.750\nThere are things that you can power up\nyour editor with, that will give you that,\n\n370\n00:21:25.750 --> 00:21:27.900\nbut, by default, it's not like that.\n\n371\n00:21:27.900 --> 00:21:31.240\nLet's go see what happens,\nwe're breaking it intentionally.\n\n372\n00:21:32.270 --> 00:21:35.560\nIndentation error,\nexpected an indented block.\n\n373\n00:21:37.360 --> 00:21:41.080\nNotice at print, it actually\nshows you it starts with this t.\n\n374\n00:21:41.080 --> 00:21:42.400\nWell, you have to be careful.\n\n375\n00:21:42.400 --> 00:21:47.428\nIndentation errors, mixing tabs and\nspaces Actually calls all kinds of theses.\n\n376\n00:21:47.428 --> 00:21:49.300\nSo now you're just, you fix one and\n\n377\n00:21:49.300 --> 00:21:53.820\nit goes to the next one, like it's\nindentation errors like extravaganza.\n\n378\n00:21:53.820 --> 00:21:55.800\nSo, that's why you shouldn't mix those.\n\n379\n00:21:55.800 --> 00:22:01.430\nIf you write an if statement,\nthere has to be corresponding code to run.\n\n380\n00:22:04.120 --> 00:22:07.310\nAnd the only way that Python\nknows what code to run,\n\n381\n00:22:07.310 --> 00:22:09.970\nis if we have a one level of indentation.\n\n382\n00:22:11.240 --> 00:22:14.850\nLikewise, if I do two\nlevels of indentation,\n\n383\n00:22:16.050 --> 00:22:20.230\nthat says actually this code\nshould be nested somewhere else.\n\n384\n00:22:22.070 --> 00:22:24.450\nSo if I like cheese,\nlet's see how that breaks out.\n\n385\n00:22:25.650 --> 00:22:29.260\nThat's actually shouldn't work,\nthat is, I know what I did.\n\n386\n00:22:29.260 --> 00:22:32.500\nI have no other indents\nin this entire file.\n\n387\n00:22:32.500 --> 00:22:35.705\nSo it's just assuming that my\nstandard indentation is eight spaces,\n\n388\n00:22:35.705 --> 00:22:38.965\nit's like going and changing that.\n&gt;&gt; This is the new default that you're\n\n389\n00:22:38.965 --> 00:22:40.915\ndoing two spaces.\n\n390\n00:22:40.915 --> 00:22:45.674\nI'll just say that in my experience from\nlike HTML and CSS, all this was stylistic.\n\n391\n00:22:45.674 --> 00:22:50.310\nIt's like it just reads it straight\nas one line so I'm kind of,\n\n392\n00:22:50.310 --> 00:22:56.087\nlike whoa I'm surprised at the breakage\nthat's happening with the spacing.\n\n393\n00:22:56.087 --> 00:23:00.589\nCause all of my experience, it's been like\nspacing doesn't matter but be nice and\n\n394\n00:23:00.589 --> 00:23:04.150\nwrite clean code.\n&gt;&gt; Yeah, so being nice and write clean\n\n395\n00:23:04.150 --> 00:23:08.940\ncode is more about human interaction, with\npython it's actually part of the language.\n\n396\n00:23:08.940 --> 00:23:11.420\nCause it's enforcing some\nof these conventions,\n\n397\n00:23:11.420 --> 00:23:15.190\nbecause effectively what\nhappens is this comes down too.\n\n398\n00:23:15.190 --> 00:23:16.870\nThis block runs inside this if.\n\n399\n00:23:16.870 --> 00:23:20.640\nNow, what I mean by this indentation.\n\n400\n00:23:20.640 --> 00:23:24.720\nLet's say I mess this up, I'm typing\nI'm not in a rich text editor, and\n\n401\n00:23:24.720 --> 00:23:28.400\nI come here and I say, hello, right?\n\n402\n00:23:28.400 --> 00:23:30.210\nAnd I have two different\nlevels of indentation.\n\n403\n00:23:31.590 --> 00:23:35.100\nLet's see what happens,\nand, if this works,\n\n404\n00:23:35.100 --> 00:23:39.390\nthen that's a new language feature,\nbecause I've had this break on me a bunch.\n\n405\n00:23:39.390 --> 00:23:44.040\nWe'll see what happens and\nboom, indentation error.\n\n406\n00:23:44.040 --> 00:23:46.980\nUnindent, and actually, there we go.\n\n407\n00:23:46.980 --> 00:23:51.430\nDoes not match any other,\nany outer indentation level, so\n\n408\n00:23:51.430 --> 00:23:54.550\nthe reason this first double tab worked.\n\n409\n00:23:54.550 --> 00:23:57.870\nYou could do that and\nset that as the default.\n\n410\n00:23:57.870 --> 00:24:00.990\nThe reason that worked is\nbecause there was nothing else.\n\n411\n00:24:00.990 --> 00:24:05.090\nIf I come here and I do double tab,\nright, that's like changing the setting\n\n412\n00:24:05.090 --> 00:24:08.990\ndown at the bottom for\nspaces to eight instead of four.\n\n413\n00:24:08.990 --> 00:24:11.809\nThen I actually get\na running piece of code.\n\n414\n00:24:11.809 --> 00:24:14.060\nNow you're like, well,\nwhy don't we just use eight?\n\n415\n00:24:15.110 --> 00:24:15.860\nWell, here's the deal.\n\n416\n00:24:17.110 --> 00:24:20.475\nThat ends up being a really\nlong file to the right.\n\n417\n00:24:20.475 --> 00:24:24.011\n[LAUGH] So\nI think four is a pretty good thing.\n\n418\n00:24:24.011 --> 00:24:28.244\nTechnically, you could do two.\n\n419\n00:24:28.244 --> 00:24:29.790\nBut you have to stay consistent.\n\n420\n00:24:31.550 --> 00:24:36.730\nFour is a pretty good compromise,\nbecause sometimes two,\n\n421\n00:24:36.730 --> 00:24:38.860\nthat's going to be harder\nto see just visually.\n\n422\n00:24:38.860 --> 00:24:41.590\nSo I would not do that.\n\n423\n00:24:41.590 --> 00:24:42.380\nSo there we go.\n\n424\n00:24:42.380 --> 00:24:44.340\nAnd let's put this here.\n\n425\n00:24:44.340 --> 00:24:46.260\nAnd I'm actually gonna remove this.\n\n426\n00:24:46.260 --> 00:24:51.550\nSo if likes_cheese is equal to true,\nthen run this.\n\n427\n00:24:51.550 --> 00:24:53.220\nWell, let's just go make\nsure that it still works.\n\n428\n00:24:53.220 --> 00:24:57.472\nSo python3 ifs, and it does, all right.\n\n429\n00:24:57.472 --> 00:25:01.751\nNow, what happens is if I say,\n\n430\n00:25:01.751 --> 00:25:08.370\nprint('Hello to everyone out there!').\n\n431\n00:25:08.370 --> 00:25:10.420\nAll right, notice this is not indented.\n\n432\n00:25:10.420 --> 00:25:16.337\nAnd you're like that's\ngonna cause an error.\n\n433\n00:25:16.337 --> 00:25:20.456\nMaybe, maybe, but if we come here and\nwe just test it out, right,\n\n434\n00:25:20.456 --> 00:25:22.140\nwe're kind of unsure.\n\n435\n00:25:22.140 --> 00:25:27.950\nIt actually works, and the reason it works\nis because If I have this establishing\n\n436\n00:25:27.950 --> 00:25:33.560\nthe indentation level and\nI unindent back to where the if is,\n\n437\n00:25:33.560 --> 00:25:39.040\nthen I'm saying the if block is done and\nthe rest of this is just normal code.\n\n438\n00:25:39.040 --> 00:25:45.442\nSo I can come here and kinds do this and\nsay if likes_cheese then do this,\n\n439\n00:25:45.442 --> 00:25:48.810\nand then this is just the rest\nof your program, all right?\n\n440\n00:25:48.810 --> 00:25:51.700\nSo we're kind of running\nthrough this all together.\n\n441\n00:25:51.700 --> 00:25:53.560\n&gt;&gt; It becomes like a new command,\n\n442\n00:25:53.560 --> 00:25:57.980\nwhich again, I was like,\nbut I'm assuming that\n\n443\n00:25:57.980 --> 00:26:01.200\nyou need a period at the end of that\nsentence for the if statements.\n\n444\n00:26:01.200 --> 00:26:03.240\nSomething that says I'm done here, but\n\n445\n00:26:03.240 --> 00:26:08.240\nthe indentation level's like, I'm on the\nsame level as the if, I'm a new command.\n\n446\n00:26:08.240 --> 00:26:12.440\nSo read this separately from the if.\n&gt;&gt; Yeah, and\n\n447\n00:26:12.440 --> 00:26:13.950\nthat's what indentation does in Python.\n\n448\n00:26:13.950 --> 00:26:18.400\nSo once I indent back out\nto the original if level,\n\n449\n00:26:18.400 --> 00:26:23.120\nI'm saying everything indented under the\nif is contained as part of the if block.\n\n450\n00:26:23.120 --> 00:26:27.590\nSo this will only execute\nif I like cheese, right?\n\n451\n00:26:27.590 --> 00:26:28.570\nOr likes_cheese is true.\n\n452\n00:26:29.620 --> 00:26:31.630\nWe're gonna come back to\nthat in just a moment.\n\n453\n00:26:31.630 --> 00:26:36.450\nWhen I come back out, it says well,\nthis is the rest of your program, right?\n\n454\n00:26:36.450 --> 00:26:38.530\nTechnically, this is kind\nof our first program.\n\n455\n00:26:38.530 --> 00:26:40.520\nSo there's a lot going on here.\n\n456\n00:26:40.520 --> 00:26:42.940\nSo don't worry, this takes a little bit.\n\n457\n00:26:42.940 --> 00:26:44.140\nI've talked to people, they're like,\n\n458\n00:26:44.140 --> 00:26:46.810\nit's really weird when\nyou first start doing it.\n\n459\n00:26:46.810 --> 00:26:50.240\nAfter about a week,\nyou're like okay I see.\n\n460\n00:26:50.240 --> 00:26:53.050\nIt's very simple conventions,\nbut it's just not normal for\n\n461\n00:26:53.050 --> 00:26:54.460\nhow we usually think about things.\n\n462\n00:26:55.610 --> 00:27:00.368\nAll right, now what's interesting is,\nwhat if I change this to false?\n\n463\n00:27:00.368 --> 00:27:05.778\nIf likes_cheese == true,\nwell, does it equal true?\n\n464\n00:27:05.778 --> 00:27:08.594\nNo, so do I like cheese?\n\n465\n00:27:08.594 --> 00:27:10.570\nWell, if I look up here, no I don't.\n\n466\n00:27:10.570 --> 00:27:14.730\nSo if I come back and I re-run this,\nhello to everyone out there.\n\n467\n00:27:16.150 --> 00:27:23.460\nThis still runs because it's not\npart of the if indented block.\n\n468\n00:27:23.460 --> 00:27:26.897\nOnly this runs conditionally, so\n\n469\n00:27:26.897 --> 00:27:32.720\nthis is if I like cheese,\nrun conditionally, all right.\n\n470\n00:27:32.720 --> 00:27:35.100\nSo if statements are fairly\nstraightforward,\n\n471\n00:27:35.100 --> 00:27:38.210\nbut I'll tell you a secret, Vonne.\n\n472\n00:27:38.210 --> 00:27:41.290\nWhenever I see this,\nunless you have a very particular reason,\n\n473\n00:27:42.780 --> 00:27:47.250\nthis makes you start asking weird\nquestions like I've been asking you.\n\n474\n00:27:47.250 --> 00:27:49.020\nIf likes_cheese is equal to true.\n\n475\n00:27:51.800 --> 00:27:52.890\nThat's an odd way to think.\n\n476\n00:27:54.090 --> 00:27:59.910\nIf I remove that and I know that\nlikes_cheese is a Boolean type, right?\n\n477\n00:27:59.910 --> 00:28:03.190\nAnd this is only for\nlikes_cheese equals true, right?\n\n478\n00:28:03.190 --> 00:28:06.840\nI'm comparing a Boolean to a Boolean,\nwhich actually is answered with a Boolean.\n\n479\n00:28:08.570 --> 00:28:14.500\nIf I do this, I'm gonna say,\nif you like cheese, then do this.\n\n480\n00:28:15.640 --> 00:28:17.320\nIf you like cheese, do you like cheese?\n\n481\n00:28:17.320 --> 00:28:18.980\nNo, then don't do that.\n\n482\n00:28:18.980 --> 00:28:22.110\nEffectively, this becomes\nmore of a standard language\n\n483\n00:28:22.110 --> 00:28:23.950\nif you train yourself to ask.\n\n484\n00:28:23.950 --> 00:28:26.542\nIf likes_cheese then do this.\n\n485\n00:28:26.542 --> 00:28:32.370\nAll right, so you don't have to do that\nexplicit comparison, and I find that\n\n486\n00:28:32.370 --> 00:28:36.370\nit makes people ask, I think, the wrong\nquestion as far as the thought process.\n\n487\n00:28:38.070 --> 00:28:41.922\nNow if you like cheese then do this.\n\n488\n00:28:41.922 --> 00:28:45.186\nWhat if we go,\n\n489\n00:28:45.186 --> 00:28:51.718\nif favorite_number &gt; 3.\n\n490\n00:28:51.718 --> 00:28:54.279\nIs that a yes or no question?\n\n491\n00:28:54.279 --> 00:28:55.540\nYeah, is favorite_number\ngreater than three?\n\n492\n00:28:55.540 --> 00:28:57.920\nWell it's seven, so yes,\nso that would be true.\n\n493\n00:28:57.920 --> 00:29:03.785\nAnd if I hit enter, That is a big number!\n\n494\n00:29:03.785 --> 00:29:07.380\nWe know that's not actually true,\nbut I'm just writing things there.\n\n495\n00:29:07.380 --> 00:29:11.184\nSo now we have two if statements\nthat are helping us with.\n\n496\n00:29:11.184 --> 00:29:12.480\nWell, if you like cheese, do this.\n\n497\n00:29:12.480 --> 00:29:14.530\nIf the number's greater than.\n\n498\n00:29:14.530 --> 00:29:17.796\nEssentially, this is how\nyou would talk to somebody.\n\n499\n00:29:17.796 --> 00:29:21.964\nIf I'm explaining to you how to solve\na problem or my thought process,\n\n500\n00:29:21.964 --> 00:29:26.270\nI can kinda just write this down and\nkinda stub this out.\n\n501\n00:29:26.270 --> 00:29:29.150\nAnd I come back and I run,\nthen that is big number!\n\n502\n00:29:29.150 --> 00:29:30.910\nHello to everyone out there!\n\n503\n00:29:30.910 --> 00:29:32.720\nBut, whoa, easy there, Justin.\n\n504\n00:29:32.720 --> 00:29:34.390\nBut likes_cheese was still false.\n\n505\n00:29:34.390 --> 00:29:37.670\nSo that's not printed out as true.\n\n506\n00:29:38.910 --> 00:29:42.740\nSo if I go here, and\nmy favorite number is 7.\n\n507\n00:29:42.740 --> 00:29:43.640\nThat is a big number!\n\n508\n00:29:43.640 --> 00:29:45.490\nHello to everyone out there!\n\n509\n00:29:45.490 --> 00:29:47.713\nThat's because if you like cheese,\ndo this.\n\n510\n00:29:47.713 --> 00:29:49.920\nIf that number's bigger than three,\nthen do this.\n\n511\n00:29:49.920 --> 00:29:52.770\nAnd you can use all of those comparisons,\nall right?\n\n512\n00:29:54.270 --> 00:29:56.765\nNow there's one final thing\nbefore we get out of here and\n\n513\n00:29:56.765 --> 00:29:58.527\nI know I'm running over time, Vonne.\n\n514\n00:29:58.527 --> 00:30:02.689\nBut let's say that, you know what,\n\n515\n00:30:02.689 --> 00:30:10.655\nI really only want to print That is\na big number if you like cheese also.\n\n516\n00:30:10.655 --> 00:30:15.231\nRight, I have this weird obsession\nwith whether you like cheese or not.\n\n517\n00:30:15.231 --> 00:30:17.768\nAnd I only want to say,\nwell, if you like cheese and\n\n518\n00:30:17.768 --> 00:30:21.780\nyour favorite number is greater than\nthree, then I'll go ahead and print that.\n\n519\n00:30:23.160 --> 00:30:27.194\nSo I only want this to print\nwhen this prints also.\n\n520\n00:30:27.194 --> 00:30:28.490\nThere's a couple of ways to do that.\n\n521\n00:30:29.820 --> 00:30:35.840\nI can go, I can highlight this and\nhit tab and tab in.\n\n522\n00:30:35.840 --> 00:30:40.100\nSo what'll happen is okay,\nmy favorite number is blah and\n\n523\n00:30:40.100 --> 00:30:42.090\nthen it'll come here and\nit'll further evaluate.\n\n524\n00:30:42.090 --> 00:30:45.593\nIt'll say if favorite_number &gt; 3,\n\n525\n00:30:45.593 --> 00:30:50.488\nthen print this, but\nonly if we already liked cheese.\n\n526\n00:30:50.488 --> 00:30:53.650\nSo indentation kinda\ndetermines the flow of things.\n\n527\n00:30:53.650 --> 00:30:55.250\n&gt;&gt; I just was gonna say because you just\n\n528\n00:30:55.250 --> 00:30:55.980\nindented that.\n\n529\n00:30:55.980 --> 00:30:59.130\nAnd now it becomes part of\nthe top level if so it's,\n\n530\n00:30:59.130 --> 00:31:02.300\nwe're doing two ifs.\n&gt;&gt; Yep, so\n\n531\n00:31:02.300 --> 00:31:06.710\nwe have two ifs and one only\nevaluates after the first one does.\n\n532\n00:31:06.710 --> 00:31:11.871\nSo if we come and run this, the output\ndoesn't change too much, but if I\n\n533\n00:31:11.871 --> 00:31:15.916\ncome back here and I change this to false.\n&gt;&gt; Then both of them are gonna\n\n534\n00:31:15.916 --> 00:31:16.651\nbe gone.\n&gt;&gt; Yep,\n\n535\n00:31:16.651 --> 00:31:21.970\nthen both of them are gone because, well,\nthe first if doesn't evaluate to true.\n\n536\n00:31:21.970 --> 00:31:24.673\nSo that's one way to do that, all right?\n\n537\n00:31:24.673 --> 00:31:27.948\nYou have to be careful, though,\ncuz if you continue to do this,\n\n538\n00:31:27.948 --> 00:31:32.770\nlike ifs and ifs and ifs and ifs,\nsometimes it gets a little hard to follow.\n\n539\n00:31:32.770 --> 00:31:37.607\nReally what I want,\nif I wanted to print both of these,\n\n540\n00:31:37.607 --> 00:31:44.548\nthis will actually see, if I only wanted\nto print this if you like cheese also,\n\n541\n00:31:44.548 --> 00:31:50.146\nthen I can say, if likes_cheese and\nfavorite_number &gt; 3.\n\n542\n00:31:50.146 --> 00:31:53.160\nIf you like cheese and favorite number\nis greater than three, then go ahead and\n\n543\n00:31:53.160 --> 00:31:53.678\nprint that.\n\n544\n00:31:53.678 --> 00:31:57.219\nOtherwise, nothing there.\n\n545\n00:31:57.219 --> 00:32:00.400\nSo, let's go see, well,\nthat's still nothing.\n\n546\n00:32:00.400 --> 00:32:03.680\nRight, it's still, it was indented\nbecause likes_cheese is false.\n\n547\n00:32:03.680 --> 00:32:06.240\nWe go back to true.\n\n548\n00:32:06.240 --> 00:32:08.248\nWell, there it is,\nmy favorite number is 7.\n\n549\n00:32:08.248 --> 00:32:09.330\nThat is a big number!\n\n550\n00:32:09.330 --> 00:32:10.260\nHello to everyone out there!\n\n551\n00:32:10.260 --> 00:32:14.110\nI get the same results by\ncombining these two things.\n\n552\n00:32:15.290 --> 00:32:18.540\nThis is one of those\noperators between Booleans.\n\n553\n00:32:18.540 --> 00:32:20.436\nHow do I know that's what it evaluates?\n\n554\n00:32:20.436 --> 00:32:21.690\nIs this a Boolean?\n\n555\n00:32:21.690 --> 00:32:22.590\nThat's a yes or no question.\n\n556\n00:32:22.590 --> 00:32:23.810\nDo you like cheese?\n\n557\n00:32:23.810 --> 00:32:24.400\nYes.\n\n558\n00:32:25.640 --> 00:32:27.248\nIs your favorite number\ngreater than three?\n\n559\n00:32:27.248 --> 00:32:31.245\nYes, true and true.\n\n560\n00:32:31.245 --> 00:32:33.370\nI really wanna focus on how you read that.\n\n561\n00:32:33.370 --> 00:32:36.620\nIf you like cheese and favorite number\nis greater than three, then print that.\n\n562\n00:32:37.650 --> 00:32:41.590\nDon't get too bogged down\nwith the super programmatic,\n\n563\n00:32:41.590 --> 00:32:45.480\nlet me make a truth table or\nevaluate, read it to yourself.\n\n564\n00:32:45.480 --> 00:32:50.370\nIf you like cheese and\nfavorite number is greater than three,\n\n565\n00:32:50.370 --> 00:32:52.640\nright, then do those following things.\n\n566\n00:32:52.640 --> 00:32:54.987\nSo if statements, pretty handy.\n\n567\n00:32:54.987 --> 00:32:58.360\nBut notice, once I unindent,\nI'm always gonna get that.\n\n568\n00:32:58.360 --> 00:33:02.250\nBut that doesn't necessarily provide\nus with, what if I want an either or?\n\n569\n00:33:02.250 --> 00:33:03.980\nWell, we need to learn another thing for\nthat.\n\n570\n00:33:03.980 --> 00:33:08.067\nSo I'm definitely gonna have to come back\nfor another episode to talk about else\n\n571\n00:33:08.067 --> 00:33:10.725\nstatements.\n&gt;&gt; All right, well there's that logic in\n\n572\n00:33:10.725 --> 00:33:14.174\nthe programming language, and so\nnow we know that this is happening.\n\n573\n00:33:14.174 --> 00:33:18.725\nSo, if we're done, I think we're gonna\ngo ahead and get on out of there.\n\n574\n00:33:18.725 --> 00:33:21.598\nSo signing off for DEVPRO.TV,\nI've been your host Vonne Smith.\n\n575\n00:33:21.598 --> 00:33:22.365\n&gt;&gt; And I'm Justin Dennison.\n\n576\n00:33:22.365 --> 00:33:23.127\n&gt;&gt; We'll see you soon.\n\n577\n00:33:23.127 --> 00:33:29.347\n[SOUND]\n\n",
          "vimeoId": "267305953"
        },
        {
          "description": "In this episode, Justin and Vonne add to the if statement using the else statement to provide an alteration to how a program can flow.",
          "length": "1325",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-4-1-if_else_statements-043018-PGM.00_23_10_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-4-1-if_else_statements-043018-PGM.00_23_10_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-4-1-if_else_statements-043018-PGM.00_23_10_07.Still001-sm.jpg",
          "title": "if-Else Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.525 --> 00:00:16.819\nHello everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:16.819 --> 00:00:18.220\nI'm your host, Vonne Smith.\n\n4\n00:00:18.220 --> 00:00:21.877\nAnd we are back at you with more in\nour programming fundamentals series.\n\n5\n00:00:21.877 --> 00:00:24.984\nIn this episode we're gonna be talking\nabout the if/else statement, and\n\n6\n00:00:24.984 --> 00:00:26.672\nhere to help us is Mr. Justin Dennison.\n\n7\n00:00:26.672 --> 00:00:29.229\nHello, how are you?\n&gt;&gt; I'm doing fantastic Vonne, how are you?\n\n8\n00:00:29.229 --> 00:00:30.871\n&gt;&gt; I'm doing pretty good!\n\n9\n00:00:30.871 --> 00:00:33.131\nIf it's Friday!\n\n10\n00:00:33.131 --> 00:00:34.168\nBut it's not.\n\n11\n00:00:34.168 --> 00:00:37.180\nSo Else maybe not.\n&gt;&gt; Ahh,\n\n12\n00:00:37.180 --> 00:00:41.410\nyeah and that's one of those things\nwhere the way this title works is that\n\n13\n00:00:41.410 --> 00:00:43.800\nit makes it seem like you have\nto have both of them, but\n\n14\n00:00:43.800 --> 00:00:48.250\nactually Else is always going to be\nin conjunction with an If, right.\n\n15\n00:00:48.250 --> 00:00:50.330\nBut you don't necessarily need them.\n\n16\n00:00:50.330 --> 00:00:51.980\nAnd we actually saw that\nin the previous episode,\n\n17\n00:00:51.980 --> 00:00:53.570\nwhere we looked at just If statements.\n\n18\n00:00:53.570 --> 00:00:59.120\nAnd also it's just like an add on\nto help us deal with Fridays or\n\n19\n00:00:59.120 --> 00:01:01.910\nthe lack thereof Fridays, right?\n&gt;&gt; Yeah and\n\n20\n00:01:01.910 --> 00:01:04.670\nit was interesting in the last episode,\nwe just did the If.\n\n21\n00:01:04.670 --> 00:01:10.000\nBut like you said,\nthere was implied Else if it wasn't true.\n\n22\n00:01:10.000 --> 00:01:11.476\nIt's a weird kind of thing.\n&gt;&gt; [LAUGH]\n\n23\n00:01:11.476 --> 00:01:13.582\n&gt;&gt; And then I remember that okay,\n\n24\n00:01:13.582 --> 00:01:17.640\nwe're only going over If, but\nnow we are throwing in Else.\n\n25\n00:01:17.640 --> 00:01:21.030\nSo I guess we're gonna explain how\nis that actually different than just\n\n26\n00:01:21.030 --> 00:01:21.950\nIf.\n&gt;&gt; Yeah,\n\n27\n00:01:21.950 --> 00:01:24.690\nwe're gonna try our best\nto make that clear.\n\n28\n00:01:24.690 --> 00:01:29.450\nAnd well, I think the best thing to do is\nactually look at where we left off to see,\n\n29\n00:01:29.450 --> 00:01:30.950\nokay, well, how does this play out?\n\n30\n00:01:30.950 --> 00:01:33.350\nSo let's go ahead and\ntake a look at the screen here.\n\n31\n00:01:33.350 --> 00:01:35.930\nWell, I have my editor open, right?\n\n32\n00:01:35.930 --> 00:01:38.630\nWe spent a little bit of time in\nthe previous episode kind of getting\n\n33\n00:01:38.630 --> 00:01:39.880\nthis set up.\n\n34\n00:01:39.880 --> 00:01:44.920\nJust as a quick review before we get\ntoo far along, we're gonna open,\n\n35\n00:01:44.920 --> 00:01:47.510\nI'm not gonna open this.\n\n36\n00:01:47.510 --> 00:01:48.350\nBut you're gonna go and\n\n37\n00:01:48.350 --> 00:01:51.880\nfind the Programming Fundamentals\nfolder that you've made.\n\n38\n00:01:51.880 --> 00:01:57.400\nAnd you're just gonna open that folder and\nthat's where all of our stuffs gonna live.\n\n39\n00:01:57.400 --> 00:02:01.923\nAll right, and then I also have a terminal\nhere, and I guess I should clear that out,\n\n40\n00:02:01.923 --> 00:02:04.400\nthat is in that same folder.\n\n41\n00:02:04.400 --> 00:02:07.822\nAnd within that folder, we have ifs.py.\n\n42\n00:02:07.822 --> 00:02:11.284\nNow we saw in the last episode, that\nthing that just popped up behind my head,\n\n43\n00:02:11.284 --> 00:02:14.130\nit's a Visual Studio coach\ntrying to be really helpful.\n\n44\n00:02:14.130 --> 00:02:17.690\nWe're gonna ignore that for now but it\nwill pop up, that would kinda be annoying.\n\n45\n00:02:17.690 --> 00:02:21.920\nI'm gonna let it pop up because eventually\nyou may want to install those suggestions.\n\n46\n00:02:21.920 --> 00:02:25.620\nBut you can snooze that permanently.\n&gt;&gt; Okay, I just realized.\n\n47\n00:02:25.620 --> 00:02:29.320\nI'm like, I saw a flash but\nI didn't really catch what that was doing.\n\n48\n00:02:29.320 --> 00:02:31.072\nWhat was that [CROSSTALK]?\n&gt;&gt; Yeah, it's just saying,\n\n49\n00:02:31.072 --> 00:02:34.786\nhey, here's some tools in the extension\nmarketplace that can help power up your\n\n50\n00:02:34.786 --> 00:02:37.370\neditor, that would make your\nlife a little bit easier.\n\n51\n00:02:37.370 --> 00:02:42.110\nWe're gonna leave those alone for now and\njust focus on what editing text and\n\n52\n00:02:42.110 --> 00:02:45.790\nusing syntax highlighting to help us out.\n\n53\n00:02:45.790 --> 00:02:49.120\nAnd then where we left off last\ntime is actually just this.\n\n54\n00:02:49.120 --> 00:02:51.371\nWe had likes cheese and favorite number,\n\n55\n00:02:51.371 --> 00:02:55.111\nand then If likes cheese,\nmy favorite number is, favorite number.\n\n56\n00:02:55.111 --> 00:02:58.888\nIf likes cheese and\nfavorite number is greater than three,\n\n57\n00:02:58.888 --> 00:03:02.220\nwell that will only happen\nif both of these are true.\n\n58\n00:03:02.220 --> 00:03:08.147\nAnd we could also have done an or, but\nreally the If statement doesn't change,\n\n59\n00:03:08.147 --> 00:03:12.835\nonly if the If condition,\nall of the things before this colon,\n\n60\n00:03:12.835 --> 00:03:18.700\nonly if all of that evaluates to true,\ndo you actually get a print, all right?\n\n61\n00:03:18.700 --> 00:03:24.290\nSo, we have these and if we go back and\nrun it one more time.\n\n62\n00:03:24.290 --> 00:03:28.600\nIfs.py, my favorite number is 7,\nthat is a big number.\n\n63\n00:03:28.600 --> 00:03:30.300\nHello to everyone out there!\n\n64\n00:03:30.300 --> 00:03:34.550\nNow all of that runs is because If,\nand then we unindent.\n\n65\n00:03:34.550 --> 00:03:40.827\nNow what Vonne is talking about is\nthere's kind of this implied one,\n\n66\n00:03:40.827 --> 00:03:46.144\nthat if we go indent here that\nonly occurs inside, right.\n\n67\n00:03:46.144 --> 00:03:49.730\nSo only If like cheese,\nwill ever get to this.\n\n68\n00:03:49.730 --> 00:03:52.620\nAnd then, well,\nwe kind of have this always.\n\n69\n00:03:52.620 --> 00:03:56.250\nIt's not really an either-or,\nit's an always kind of thing.\n\n70\n00:03:56.250 --> 00:03:56.830\nAll right?\n\n71\n00:03:56.830 --> 00:04:00.180\nSo, Hello to everyone\nwill always print out.\n\n72\n00:04:00.180 --> 00:04:05.500\nEven if I make this false, so\nthat if likes cheese, and no, it doesn't,\n\n73\n00:04:05.500 --> 00:04:09.720\nif likes cheese, no, that doesn't either,\nif I print that out one more time,\n\n74\n00:04:09.720 --> 00:04:13.630\nhello to everyone,\nThat's kind of always working.\n\n75\n00:04:13.630 --> 00:04:19.220\nBut, now, we kinda just wannna do one or\nthe other.\n\n76\n00:04:19.220 --> 00:04:24.856\nWe want to print, that is a big number,\nor we want to print,\n\n77\n00:04:24.856 --> 00:04:30.330\nhello to everyone else, but\nnot both all of the time.\n\n78\n00:04:30.330 --> 00:04:37.075\nNow the way that plays out, is well,\nright here notice I'm indented with an if.\n\n79\n00:04:37.075 --> 00:04:38.340\nI'm at the exact same level.\n\n80\n00:04:38.340 --> 00:04:42.110\nNow indentation is very important as\nwe discussed previously in python.\n\n81\n00:04:42.110 --> 00:04:45.210\nThat's how it determines the chucking.\n\n82\n00:04:45.210 --> 00:04:49.992\nIf I just type else, like so,\nI'm going to leave this just like this and\n\n83\n00:04:49.992 --> 00:04:54.070\nI'm gonna run it just to show you,\nhey, things can go awry.\n\n84\n00:04:54.070 --> 00:04:58.165\nAll right, so if likes_cheese and\nfavorite_number is greater than 3,\n\n85\n00:04:58.165 --> 00:04:59.120\nprint this.\n\n86\n00:04:59.120 --> 00:05:03.670\nElse, which means otherwise, when you see\na single else you should think otherwise.\n\n87\n00:05:03.670 --> 00:05:07.010\nSo if this doesn't happen,\nthis other stuff will,\n\n88\n00:05:07.010 --> 00:05:09.360\nbut right now it is a syntax error.\n\n89\n00:05:09.360 --> 00:05:11.440\nLet's go see what it\nactually prints off for.\n\n90\n00:05:11.440 --> 00:05:16.140\nSo run a clear round,\nwe're going to say python 3 ifs, and\n\n91\n00:05:16.140 --> 00:05:18.450\nthen notice, indentation error.\n\n92\n00:05:18.450 --> 00:05:21.240\nExpected an indented block,\nbut I wanted to show you\n\n93\n00:05:21.240 --> 00:05:25.110\nthis because this is one of those where\nit points you to the wrong place.\n\n94\n00:05:25.110 --> 00:05:29.970\nAll right, so notice print, and\nprint it says, hey, print at this t.\n\n95\n00:05:31.080 --> 00:05:33.610\nWell, wait a minute,\nif I come back and look at my code.\n\n96\n00:05:33.610 --> 00:05:38.060\nNow we're just modifying a previously\nestablished file, because ifs, and elses,\n\n97\n00:05:38.060 --> 00:05:40.950\nand other things kind of all go together,\nso we're just gonna stay in this file.\n\n98\n00:05:42.110 --> 00:05:43.480\nWell, why did it do that?\n\n99\n00:05:43.480 --> 00:05:46.940\nWell, because this line,\nthis next line after an else\n\n100\n00:05:46.940 --> 00:05:50.210\nThere was an assumption that\nthere's going to be an indentation.\n\n101\n00:05:50.210 --> 00:05:56.110\nThat there's going to be something there\nand then we don't have that, so it breaks\n\n102\n00:05:56.110 --> 00:06:00.550\nbut it puts points you in an odd place.\n&gt;&gt; Well I think you would make your tabs\n\n103\n00:06:00.550 --> 00:06:04.990\nfour spaces and there's P-R-I-N,\n\n104\n00:06:04.990 --> 00:06:09.070\nthat's four, so\nit's saying t That's where it's saying,\n\n105\n00:06:09.070 --> 00:06:11.120\nI don't understand.\n&gt;&gt; Yeah,\n\n106\n00:06:11.120 --> 00:06:13.330\nyou know what I've never\neven thought of that Vonne.\n\n107\n00:06:13.330 --> 00:06:15.671\nYou're absoloutely correct.\n&gt;&gt; Really?\n\n108\n00:06:15.671 --> 00:06:17.274\nGood!\n&gt;&gt; It skips the first four.\n\n109\n00:06:17.274 --> 00:06:21.659\nAll I ever know is I don't pay attention\nto the whole tab spaces thing, and\n\n110\n00:06:21.659 --> 00:06:23.940\nthen it points me in weird places.\n\n111\n00:06:23.940 --> 00:06:28.410\nIt prints to the T which is the first\nfour charcters, that are skipped.\n\n112\n00:06:28.410 --> 00:06:30.580\nSo it's assuming all these\nare space characters.\n\n113\n00:06:30.580 --> 00:06:35.850\nAnd that's just a parsing kind\nof an oddness for Python.\n\n114\n00:06:35.850 --> 00:06:40.150\nBut then it's still pointing\nme in the wrong place because,\n\n115\n00:06:40.150 --> 00:06:42.820\nreally it's because I\nhave nothing indented.\n\n116\n00:06:42.820 --> 00:06:46.980\nAnd these aren't space characters,\nthese are in fact, character, characters,\n\n117\n00:06:46.980 --> 00:06:48.875\nif that makes sense.\n&gt;&gt; I just got so excited.\n\n118\n00:06:48.875 --> 00:06:49.875\nI never thought of it that way.\n\n119\n00:06:49.875 --> 00:06:50.775\nReally?\n\n120\n00:06:50.775 --> 00:06:54.900\nDid I just like, give you something\nyou've never thought of in python?\n\n121\n00:06:54.900 --> 00:06:57.210\n&gt;&gt; Yeah, Just blow your mind.\n\n122\n00:06:57.210 --> 00:06:58.540\n&gt;&gt; Yeah.\n\n123\n00:06:58.540 --> 00:06:59.750\nHey.\n&gt;&gt; And\n\n124\n00:06:59.750 --> 00:07:03.320\nthat's part of different experiences,\nright.\n\n125\n00:07:03.320 --> 00:07:04.660\nI would have never thought of it that way.\n\n126\n00:07:04.660 --> 00:07:06.150\nI would have just known.\n\n127\n00:07:06.150 --> 00:07:07.700\nHey, it points me here.\n\n128\n00:07:09.200 --> 00:07:11.880\nHere's something I would\nalways recommend for Python.\n\n129\n00:07:11.880 --> 00:07:17.680\nIf you come here, notice how it print and\nI'm pretty sure you're right, Vonne.\n\n130\n00:07:18.770 --> 00:07:21.944\nBut it points here and\nyou're like, well that's right.\n\n131\n00:07:21.944 --> 00:07:24.088\nHere's an issue that\npeople will happen upon.\n\n132\n00:07:24.088 --> 00:07:29.055\nThey'll look at this and\nthey'll zoom in on this line and\n\n133\n00:07:29.055 --> 00:07:34.952\nthey'll get super narrow focused and\ngo, I spelled print right and\n\n134\n00:07:34.952 --> 00:07:41.180\nthere is a parenthesis there and\nthey spend all their time on that line.\n\n135\n00:07:42.330 --> 00:07:46.270\nLook one to two lines above, all right.\n\n136\n00:07:46.270 --> 00:07:50.395\nSo print, that looks fine, if I come up,\nthere, okay, that's blank,\n\n137\n00:07:50.395 --> 00:07:54.733\nif i hit, there's an else,\nwell else needs to be indented, all right.\n\n138\n00:07:54.733 --> 00:08:00.050\nBecause it's if this, otherwise this,\nall right, so if i come here and\n\n139\n00:08:00.050 --> 00:08:05.209\ni hit tab, which is four spaces Because\nwe set our editor up to do that.\n\n140\n00:08:05.209 --> 00:08:10.480\nThen if I come back and\nI run this python3 ifs.\n\n141\n00:08:11.570 --> 00:08:12.512\nHello to everyone out there, right?\n\n142\n00:08:12.512 --> 00:08:16.250\nYou're like,\nwell that's what it did before.\n\n143\n00:08:16.250 --> 00:08:19.800\nYeah but if we come back and\nchange this to true.\n\n144\n00:08:19.800 --> 00:08:23.450\nAnd we run our favorite number,\n7, that is a big number.\n\n145\n00:08:23.450 --> 00:08:27.520\nBut hello everyone out there,\ndoes not actually print in this case.\n\n146\n00:08:27.520 --> 00:08:31.230\n&gt;&gt; Because the hello is now nested,\n\n147\n00:08:31.230 --> 00:08:32.580\nif you wanna say, in that if.\n\n148\n00:08:32.580 --> 00:08:36.210\nIt's like, this happened so\nthat we don't have to go to the else.\n\n149\n00:08:36.210 --> 00:08:38.760\nIt has been satisfied.\n\n150\n00:08:38.760 --> 00:08:42.660\nSo this gets, off wow, so it's all about\nthe line indentation and where you're\n\n151\n00:08:42.660 --> 00:08:47.250\ngoing to nest these statements to, where\nthe else actually makes a big difference.\n\n152\n00:08:47.250 --> 00:08:48.525\n&gt;&gt; Exactly correct, and\n\n153\n00:08:48.525 --> 00:08:53.170\nwhat Vonne's saying is this has satisfied\nso it breaks into this indented block.\n\n154\n00:08:53.170 --> 00:08:56.930\nAnd then it goes well I don't need to\nworry about the else because the if\n\n155\n00:08:56.930 --> 00:08:58.420\nactually ran.\n\n156\n00:08:58.420 --> 00:09:00.620\nSo if you have things here and\n\n157\n00:09:00.620 --> 00:09:05.020\nthen you have a chained else,\nthen the else will not run.\n\n158\n00:09:05.020 --> 00:09:07.050\nIf the if statement and\n\n159\n00:09:07.050 --> 00:09:10.960\nthe associated block does not run, then\nthe else will because it is an either-or.\n\n160\n00:09:10.960 --> 00:09:13.010\nIt is kind of mutually exclusive.\n\n161\n00:09:13.010 --> 00:09:17.280\nYou get one or the other, not both, okay?\n\n162\n00:09:17.280 --> 00:09:18.670\nSo you have to remember that.\n\n163\n00:09:18.670 --> 00:09:22.200\nBut you're like, well gosh Justin,\nthere's not a lot to else, you're right.\n\n164\n00:09:22.200 --> 00:09:27.230\nBut there's a few other things that\nI kind of wanted to drive home here.\n\n165\n00:09:27.230 --> 00:09:34.400\nJust like we had with the if, you can\ncome inside the else and go if, right?\n\n166\n00:09:34.400 --> 00:09:40.660\nLet's go favorite_number is &gt; 3.\n\n167\n00:09:40.660 --> 00:09:46.404\nLet's now put that same condition,\nwe're just using the same conditions.\n\n168\n00:09:46.404 --> 00:09:51.389\nThen ('Hello Vonne!'), all right?\n\n169\n00:09:51.389 --> 00:09:56.690\nOtherwise now I have if this is true,\n\n170\n00:09:56.690 --> 00:10:03.020\nright, then print, that's a big number.\n\n171\n00:10:03.020 --> 00:10:04.930\nOtherwise, come to this.\n\n172\n00:10:04.930 --> 00:10:08.390\nBut then that has a nested\nif statement with an else.\n\n173\n00:10:08.390 --> 00:10:12.700\nWe can continue to do this\nkind of ad nauseam, all right?\n\n174\n00:10:12.700 --> 00:10:14.670\nSo what does this mean.\n\n175\n00:10:14.670 --> 00:10:18.800\nI'll show you this because I see Vonne\nout of the corner of my eye going,\n\n176\n00:10:18.800 --> 00:10:23.240\nsome weirdness there,\nI don't know what's going on.\n\n177\n00:10:23.240 --> 00:10:26.300\n&gt;&gt; Before I get too far, I wanted to ask.\n\n178\n00:10:26.300 --> 00:10:31.020\nIt's still the same concept as if\nthis top F, the Like_cheese and\n\n179\n00:10:31.020 --> 00:10:34.210\nfavorite_number if that is satisfy we're\nstill not doing anything passed it.\n\n180\n00:10:34.210 --> 00:10:35.760\nIt's going to jump out and\n\n181\n00:10:35.760 --> 00:10:40.300\nbe like, we're done but\nif it's false then we come into another.\n\n182\n00:10:40.300 --> 00:10:43.910\nAnd then that whole other,\nit just revolves around itself again.\n\n183\n00:10:43.910 --> 00:10:46.480\nOkay, here's another condition,\nwhether it's true or\n\n184\n00:10:46.480 --> 00:10:51.390\nfalse, and move on or jump back out.\n&gt;&gt; Exactly correct.\n\n185\n00:10:51.390 --> 00:10:57.880\nThis is one of those things where\nIt seems like it should be simple,\n\n186\n00:10:57.880 --> 00:11:01.740\nbut you have to be careful\nbecause now you have two levels.\n\n187\n00:11:01.740 --> 00:11:03.560\nAgain you have another level.\n\n188\n00:11:03.560 --> 00:11:08.520\nIf this runs none of these does,\nbut if this else actually cuts in,\n\n189\n00:11:08.520 --> 00:11:13.970\nyou starting running this then there is\nsome additional execution logic again.\n\n190\n00:11:13.970 --> 00:11:17.240\nSo effectively what this means is,\nif likes cheese and\n\n191\n00:11:17.240 --> 00:11:19.990\nfavorite number is greater than 3,\ndo this.\n\n192\n00:11:19.990 --> 00:11:22.150\nOtherwise if the favorite\nnumber is greater than 3.\n\n193\n00:11:22.150 --> 00:11:25.501\nSo what that means is this can\nactually still be true here but\n\n194\n00:11:25.501 --> 00:11:28.730\nlikes cheese could be false\nwhich causes this to happen.\n\n195\n00:11:28.730 --> 00:11:33.162\nAnd then you have all these possible\npathways that you can trace through and\n\n196\n00:11:33.162 --> 00:11:36.620\nit makes it a little more\ndifficult to kinda reason about.\n\n197\n00:11:36.620 --> 00:11:38.540\nSo I'll show you that you can do this and\n\n198\n00:11:38.540 --> 00:11:43.050\nthere are very particular times to\ndo this but maybe you shouldn't do\n\n199\n00:11:43.050 --> 00:11:45.378\nthis if you can avoid it.\n&gt;&gt; Yeah,\n\n200\n00:11:45.378 --> 00:11:47.410\nyou are alluding the fact like yeah but.\n\n201\n00:11:47.410 --> 00:11:52.524\nAnd this is where I feel like\nyou could probably write\n\n202\n00:11:52.524 --> 00:11:58.060\nthese if's all over the place in so\nmany combinations.\n\n203\n00:11:58.060 --> 00:12:02.923\nAnd so maybe you can do this, but\nit seems like you're alluding to there is\n\n204\n00:12:02.923 --> 00:12:08.025\na better way or maybe more effective or\nefficient way of handling multiples,\n\n205\n00:12:08.025 --> 00:12:10.909\nis that what you're alluding to?\n&gt;&gt; There is or\n\n206\n00:12:10.909 --> 00:12:13.155\nmaybe you need to readdress your logic.\n\n207\n00:12:13.155 --> 00:12:16.415\nLet's actually run this and\nsee what we get.\n\n208\n00:12:16.415 --> 00:12:18.825\nSo a favorite number of seven,\nthat is a big number.\n\n209\n00:12:18.825 --> 00:12:21.485\nWell that ran because both of these ran,\nright?\n\n210\n00:12:21.485 --> 00:12:24.700\nThis one ran cuz I like cheese and\nthis one ran, the else did not.\n\n211\n00:12:24.700 --> 00:12:27.572\nLet's get rid of Likes_cheese, and\n\n212\n00:12:27.572 --> 00:12:31.540\nwe run it again Hello Vonne or\nwhy did that happen.\n\n213\n00:12:31.540 --> 00:12:35.470\nBecause favorite number is seven\nwhich is bigger than three.\n\n214\n00:12:35.470 --> 00:12:42.280\nLet's change this to two, and\nnow hello to everyone out there.\n\n215\n00:12:42.280 --> 00:12:47.464\nNow, I had to change two variables to\nget all possible like pathways and,\n\n216\n00:12:47.464 --> 00:12:49.480\nwell, that's kind of odd.\n\n217\n00:12:49.480 --> 00:12:54.751\nBecause seeing how this is duplicated here\nif it's greater than 3, if it's greater\n\n218\n00:12:54.751 --> 00:12:59.890\nthan 3, well what if likes cheese is true,\nwhat is it actually going to print out?\n\n219\n00:13:02.230 --> 00:13:07.380\nWell, we went back and changed that one\nback, but when in doubt, just run it.\n\n220\n00:13:07.380 --> 00:13:09.030\nSo we run it, my favourite number is two.\n\n221\n00:13:09.030 --> 00:13:10.230\nHello everyone out there.\n\n222\n00:13:10.230 --> 00:13:11.960\nHow did that get there?\n\n223\n00:13:11.960 --> 00:13:15.070\nWell, like cheese, you ain't running that.\n\n224\n00:13:15.070 --> 00:13:17.870\nLikes cheese and\nfavorite number is greater than three no,\n\n225\n00:13:17.870 --> 00:13:21.960\nthat's false, this one doesn't run,\nit actually kicks into here.\n\n226\n00:13:21.960 --> 00:13:23.540\nThis is false, right?\n\n227\n00:13:23.540 --> 00:13:30.690\nBecause it was false here and now it\nprints, respectively, at this nested else.\n\n228\n00:13:30.690 --> 00:13:36.520\nWe had to do a whole bunch of testing to\nactually see where everything was going,\n\n229\n00:13:36.520 --> 00:13:38.820\nkinda how our program executed.\n\n230\n00:13:38.820 --> 00:13:43.690\nThat can lead to unforeseen\ncircumstances when you're\n\n231\n00:13:43.690 --> 00:13:45.470\ntrying to actually develop something.\n&gt;&gt; And\n\n232\n00:13:45.470 --> 00:13:48.680\nI'm starting to get slightly confused,\nI'm over here going, wait, okay,\n\n233\n00:13:48.680 --> 00:13:52.500\nwait, all right, that one, that one,\nwait what was the number again?\n\n234\n00:13:52.500 --> 00:13:53.270\nWhere are we?\n\n235\n00:13:53.270 --> 00:13:59.290\nSo I started to slightly\nget off track want?\n\n236\n00:13:59.290 --> 00:14:01.550\nYeah, I had his, and I was almost\nlike,wait, go back, what was the result?\n\n237\n00:14:01.550 --> 00:14:04.500\nBecause I couldn't remember\nwhich way we were going.\n\n238\n00:14:04.500 --> 00:14:05.410\n&gt;&gt; And actually, that's what you're\n\n239\n00:14:05.410 --> 00:14:06.100\ngoing to end up doing.\n\n240\n00:14:06.100 --> 00:14:08.420\nYou know like, well wait a minute,\nI've got to go back here,\n\n241\n00:14:08.420 --> 00:14:09.810\nlet me test this, okay.\n\n242\n00:14:09.810 --> 00:14:12.540\nHere's the result, let me store that in\nmy brain, let me come back, let me look,\n\n243\n00:14:12.540 --> 00:14:14.580\ndoes that make sense?\n\n244\n00:14:14.580 --> 00:14:18.730\nIt is a great deal of cognitive\nload to kind of keep in your brain.\n\n245\n00:14:19.900 --> 00:14:23.280\nAnd if you do that, you're more than\nlikely to have issue going, okay,\n\n246\n00:14:23.280 --> 00:14:24.970\nwell how did that print out?\n\n247\n00:14:24.970 --> 00:14:27.060\nHow did I get to this point?\n\n248\n00:14:27.060 --> 00:14:29.470\nEspecially if you do something,\nwell hold on Vonne,\n\n249\n00:14:29.470 --> 00:14:32.960\nI'm gonna do something super crazy here,\nall right?\n\n250\n00:14:32.960 --> 00:14:39.740\nSo this is kind of a, this intentionally\ngoing to possibly be scary.\n\n251\n00:14:39.740 --> 00:14:44.800\nSo, if favorite number is greater than 0,\n\n252\n00:14:44.800 --> 00:14:50.140\nif favorite number is greater than 3 and,\n\n253\n00:14:50.140 --> 00:14:53.270\nactually, print 0.\n\n254\n00:14:53.270 --> 00:14:58.718\nIf it's greater than 3, print 3.\n\n255\n00:14:58.718 --> 00:15:05.070\nIf favorite number is greater than 5,\n\n256\n00:15:05.070 --> 00:15:09.304\nprint 5, else, print,\n\n257\n00:15:10.459 --> 00:15:16.233\neasy there Justin,, not 5 five,\n\n258\n00:15:16.233 --> 00:15:21.238\nelse, if favorite_number &gt;\n\n259\n00:15:21.238 --> 00:15:25.864\n7; print('seven').\n\n260\n00:15:25.864 --> 00:15:29.960\nAll right, so see all that nesting?\n\n261\n00:15:29.960 --> 00:15:32.760\nNumber one,\nit's very hard to read now, right?\n\n262\n00:15:32.760 --> 00:15:36.220\nReadability should be kind\nof an importance to you.\n\n263\n00:15:36.220 --> 00:15:38.270\nBut then if I ask you well,\n\n264\n00:15:38.270 --> 00:15:41.040\nfavorite network would be a whole\nrange of different things, right?\n\n265\n00:15:41.040 --> 00:15:44.149\nIf I ask ten different people\nwhat their favourite number was,\n\n266\n00:15:44.149 --> 00:15:46.630\nfavorite number could be different things.\n\n267\n00:15:46.630 --> 00:15:47.840\nSo, right now it's two.\n\n268\n00:15:47.840 --> 00:15:50.400\nLet's see actually what prints out.\n\n269\n00:15:50.400 --> 00:15:57.566\nAnd then I'm gonna kind of give you\nan explanation of like, how to fix this.\n\n270\n00:15:57.566 --> 00:16:02.350\nThe python3 ifs, our favorite number is\ntwo, hello zero, it only prints zero.\n\n271\n00:16:03.450 --> 00:16:05.607\nWell that makes sense, right?\n\n272\n00:16:05.607 --> 00:16:08.300\nSo if any number is greater\nthan a zero print this.\n\n273\n00:16:08.300 --> 00:16:11.340\nAnd then it hits this if and\ntheres nothing else.\n\n274\n00:16:11.340 --> 00:16:12.880\nIt just kinda goes all right, whatever.\n\n275\n00:16:12.880 --> 00:16:16.660\nIf this if never executes theres\nnothing in line with it, it's done.\n\n276\n00:16:17.800 --> 00:16:19.450\nNotice I only have one else and\n\n277\n00:16:19.450 --> 00:16:21.820\nthen everything else is\njust this kind of naked if.\n\n278\n00:16:21.820 --> 00:16:23.890\nBut if I come back-\n&gt;&gt; The else is only on the five,\n\n279\n00:16:23.890 --> 00:16:25.490\nI'm sorry I didn't mean to jump in.\n&gt;&gt; No, it's not a problem.\n\n280\n00:16:25.490 --> 00:16:27.582\n&gt;&gt; Else is only on the five.\n\n281\n00:16:27.582 --> 00:16:31.680\nAfter the one, two,\nthree, the third level.\n\n282\n00:16:31.680 --> 00:16:36.350\nSo, that's the only time the else\nis going to execute once it gets\n\n283\n00:16:36.350 --> 00:16:37.993\ndown to that point.\n&gt;&gt; Exactly.\n\n284\n00:16:37.993 --> 00:16:39.800\n&gt;&gt; Because of the indentation.\n\n285\n00:16:39.800 --> 00:16:40.970\n&gt;&gt; Yep, and if we now,\n\n286\n00:16:40.970 --> 00:16:42.720\nI've changed it back to seven.\n\n287\n00:16:42.720 --> 00:16:46.430\nIf we now run it, it says 035.\n\n288\n00:16:46.430 --> 00:16:51.580\nAnd well okay, else not five,\n\n289\n00:16:54.000 --> 00:17:00.520\nthis is kind of what I was driving home\nat, 035, so it hit all three of these ifs.\n\n290\n00:17:00.520 --> 00:17:05.430\nIf it hits this else That\nmeans it's greater than 3, but\n\n291\n00:17:05.430 --> 00:17:07.600\nit's not greater than 5.\n\n292\n00:17:07.600 --> 00:17:12.580\nSo, the only time it would get\nhere is if it was 4, or something\n\n293\n00:17:15.130 --> 00:17:18.130\nbetween 3 and 5.\n\n294\n00:17:18.130 --> 00:17:21.970\nSo, if I come here and\nI run, so 0, 3, not 5.\n\n295\n00:17:21.970 --> 00:17:23.950\nI just showed you.\n\n296\n00:17:23.950 --> 00:17:24.600\nGo back.\n\n297\n00:17:24.600 --> 00:17:26.260\nZero three not five.\n\n298\n00:17:26.260 --> 00:17:27.810\nIs actually what ran.\n\n299\n00:17:27.810 --> 00:17:29.570\nSo that means it hit this one.\n\n300\n00:17:29.570 --> 00:17:31.450\nIt hit this one.\n\n301\n00:17:31.450 --> 00:17:34.960\nIt tried this one, but\nit needs to go to the L so it's not five.\n\n302\n00:17:34.960 --> 00:17:35.490\nNow look.\n\n303\n00:17:36.720 --> 00:17:39.150\nIt's favorite number\nis greater than seven.\n\n304\n00:17:39.150 --> 00:17:41.930\nThere's no way that if\nstatement will ever execute.\n\n305\n00:17:41.930 --> 00:17:45.700\nThe only way it gets to here Is\nif it's greater than three but\n\n306\n00:17:45.700 --> 00:17:48.430\nit's not greater than five, so\nit can't be greater than seven.\n\n307\n00:17:50.110 --> 00:17:55.390\nAnd this is why I did a bunch of this,\nthis is a little mind bending,\n\n308\n00:17:55.390 --> 00:17:59.490\nto show you if you continue to do\nthis without being very careful.\n\n309\n00:17:59.490 --> 00:18:02.860\nYou can actually have code that\nnever runs, can never run.\n\n310\n00:18:04.010 --> 00:18:07.170\nAnd now you have to reason\nabout it because now\n\n311\n00:18:07.170 --> 00:18:08.810\nyou might spend the next 15 minutes going.\n\n312\n00:18:08.810 --> 00:18:11.720\nWell how do I get this to run\nto see if it actually works?\n\n313\n00:18:11.720 --> 00:18:14.460\nWell, you can't because the only\nway it ever gets to this ELSE\n\n314\n00:18:14.460 --> 00:18:15.600\nis if it's not bigger than five.\n\n315\n00:18:15.600 --> 00:18:19.870\nIf it's not bigger than five,\nit can't be bigger than seven either.\n\n316\n00:18:19.870 --> 00:18:25.540\nUnless you discover some new numbers\nthat disobey all of these rules which\n\n317\n00:18:25.540 --> 00:18:26.490\nIs doubtful.\n\n318\n00:18:26.490 --> 00:18:30.450\nSo be careful about this indentation,\na lot of ifs and ifs and ifs and\n\n319\n00:18:30.450 --> 00:18:33.300\nifs, as such.\n\n320\n00:18:33.300 --> 00:18:34.630\nAnd brought up another good point.\n\n321\n00:18:35.700 --> 00:18:38.440\nThis else,\nsee how this else is with this if?\n\n322\n00:18:41.028 --> 00:18:42.785\nWait for it, that's not what I wanted.\n\n323\n00:18:42.785 --> 00:18:45.710\nI'm gonna [LAUGH] go back.\n\n324\n00:18:45.710 --> 00:18:46.780\nLet's try one more time.\n\n325\n00:18:46.780 --> 00:18:47.350\nThere we go.\n\n326\n00:18:49.330 --> 00:18:53.410\nNow, if I do that, that actually\nchanges how the program runs.\n\n327\n00:18:54.410 --> 00:18:56.600\nIf it's greater than zero, print zero.\n\n328\n00:18:56.600 --> 00:18:58.370\nIf it's greater than three, print three.\n\n329\n00:18:58.370 --> 00:19:02.340\nOtherwise, let's go change it back to two.\n\n330\n00:19:05.325 --> 00:19:09.400\nAnd when it was two before,\nit was just this zero, all right?\n\n331\n00:19:10.460 --> 00:19:17.010\nI clear this out and I run ifs,\nit says zero, not five, why?\n\n332\n00:19:17.010 --> 00:19:22.990\nBecause indentation actually determines\nthis else, is paired with this if.\n\n333\n00:19:22.990 --> 00:19:29.830\nAnd not with this if, it still ran, but\nit didn't run like you anticipated it to.\n\n334\n00:19:29.830 --> 00:19:34.390\nThis can be because if you're just typing\nalong and you're hitting enter and\n\n335\n00:19:34.390 --> 00:19:35.680\nyou're hitting tab.\n\n336\n00:19:35.680 --> 00:19:40.231\nWell if your editor has a hiccup or you've\nhit shift tab or something like that.\n\n337\n00:19:40.231 --> 00:19:44.049\nThen you now have program execution that\nis hard to reason about because it was not\n\n338\n00:19:44.049 --> 00:19:45.430\nyour intention.\n\n339\n00:19:45.430 --> 00:19:48.740\nAlright, number one let's take this\nout because, that is extraneous.\n\n340\n00:19:48.740 --> 00:19:51.535\nIt will never run so let's delete it.\n\n341\n00:19:51.535 --> 00:19:54.330\nBut now if you're,\nif you notice how it's printing out five.\n\n342\n00:19:54.330 --> 00:19:57.760\nYou probably meant for that if and\nthis else to be paired together.\n\n343\n00:20:00.120 --> 00:20:03.410\nWell that actually needs to be\nindented one level in order for\n\n344\n00:20:03.410 --> 00:20:05.180\nthat to occur correctly.\n\n345\n00:20:05.180 --> 00:20:09.460\nBut if you're typing and\nyou mess up, you got a bunch of ifs.\n\n346\n00:20:09.460 --> 00:20:10.600\nI don't get a syntax error.\n\n347\n00:20:10.600 --> 00:20:15.830\nIt still runs, it just says, well run this\nelse if it's not bigger than 3, right?\n\n348\n00:20:17.350 --> 00:20:24.750\nWhich is where we get zero note five, so\nyou get nondeterministic runtime behavior.\n\n349\n00:20:24.750 --> 00:20:30.050\nAnd I could tell I think my job\nwhat I hoped to show, is probably\n\n350\n00:20:30.050 --> 00:20:35.090\na little too by Vonnes phase but I wanted\nto show ifs are incredibly powerful and\n\n351\n00:20:35.090 --> 00:20:38.130\nelses are as well but there is a couple\nof hiccups that you're gonna land into,\n\n352\n00:20:38.130 --> 00:20:42.930\nif you start nesting with\nmultiple levels of nesting is\n\n353\n00:20:42.930 --> 00:20:48.390\nit can lead to Bugs, errors,\nthat are very hard to track down.\n\n354\n00:20:48.390 --> 00:20:50.270\nEspecially if you're just getting started.\n\n355\n00:20:50.270 --> 00:20:58.060\nSo by and large, don't do this, and\ninstead, well, when do I want this?\n\n356\n00:20:58.060 --> 00:21:03.007\nI only want this if\nfavorite_number &gt; 0 and\n\n357\n00:21:03.007 --> 00:21:06.900\nfavorite_number &gt; 3.\n\n358\n00:21:06.900 --> 00:21:08.130\nRight?\n\n359\n00:21:08.130 --> 00:21:10.170\nNow, how do you fix this?\n\n360\n00:21:10.170 --> 00:21:11.690\nWell Vonne,\n\n361\n00:21:11.690 --> 00:21:14.240\nwe actually have another construct\nthat would help us out with that.\n\n362\n00:21:14.240 --> 00:21:20.110\nBut maybe I should let everyone kind\nof let this veg, kind of congeal.\n\n363\n00:21:20.110 --> 00:21:20.920\nAnd then come back and\n\n364\n00:21:20.920 --> 00:21:24.560\nactually fix this using another construct.\n&gt;&gt; Yeah, I need to simmer on this one for\n\n365\n00:21:24.560 --> 00:21:28.000\na little bit, because it's just like\n&gt;&gt; Whoa, I mean it's all logic but\n\n366\n00:21:28.000 --> 00:21:31.140\nI feel like I just logicked myself\nright in the corner of like,\n\n367\n00:21:31.140 --> 00:21:32.581\nI don't know how to get out of this.\n\n368\n00:21:32.581 --> 00:21:37.745\n[LAUGH] And it's really important on\nthose levels we're talking about,\n\n369\n00:21:37.745 --> 00:21:40.532\nlike that makes a huge huge difference,\nso.\n\n370\n00:21:40.532 --> 00:21:41.193\nFeel good?\n\n371\n00:21:41.193 --> 00:21:44.060\nGlad I've kind of gotten that,\nfor the most part.\n\n372\n00:21:44.060 --> 00:21:47.580\nAnd you're gonna show us a little bit\nBetter ways to do it in the next episode.\n\n373\n00:21:47.580 --> 00:21:50.680\nSo thank you all for joining, but\nwe're gonna go ahead and wrap this one up.\n\n374\n00:21:50.680 --> 00:21:53.440\nSigning off for DevProTV,\nI've been your host, Vonne Smith.\n\n375\n00:21:53.440 --> 00:21:54.200\n&gt;&gt; And I'm Justin Dennison.\n\n376\n00:21:54.200 --> 00:21:57.410\n&gt;&gt; We'll see you soon.\n\n",
          "vimeoId": "267461404"
        },
        {
          "description": "In this episode, Justin and Vonne look at another addition of if statements that will allow for more than \"either-or\" logic.",
          "length": "1893",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-5-1-if_elif_else_statements-043018-PGM.00_32_55_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-5-1-if_elif_else_statements-043018-PGM.00_32_55_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-3-5-1-if_elif_else_statements-043018-PGM.00_32_55_13.Still001-sm.jpg",
          "title": "If-Elif-Else Statements",
          "transcript": "WEBVTT\n\n1\n00:00:00.561 --> 00:00:10.561\n[MUSIC]\n\n2\n00:00:13.054 --> 00:00:16.746\nHello everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:16.746 --> 00:00:18.236\nI'm your host Vonne Smith, and\n\n4\n00:00:18.236 --> 00:00:21.930\nwe're coming back with more on our\nprogramming fundamentals series.\n\n5\n00:00:21.930 --> 00:00:27.070\nIn this episode, we're going to be\ndoing if, ELIF, and ELSE statements.\n\n6\n00:00:27.070 --> 00:00:30.940\nAnd I feel like I'm talking in some\nweird-like elvish language right now.\n\n7\n00:00:30.940 --> 00:00:34.730\nSo here to help us decipher all of this\nis Mr. Justin Dennison, how are you?\n\n8\n00:00:34.730 --> 00:00:36.790\n&gt;&gt; I'm doing fantastic, how are you Vonne?\n\n9\n00:00:36.790 --> 00:00:37.940\n&gt;&gt; I'm doing okay.\n\n10\n00:00:37.940 --> 00:00:41.920\nI will tell you, to be completely honest,\nthat last episode,\n\n11\n00:00:41.920 --> 00:00:46.500\nmy mind was churning,\nlike okay, wait, where are we?\n\n12\n00:00:46.500 --> 00:00:50.625\nI got a little off path every once and\nwhile.\n\n13\n00:00:50.625 --> 00:00:54.153\nAnd I feel like I just did a super brain\nworkout, I'm a little tired actually, so.\n\n14\n00:00:54.153 --> 00:00:55.216\n[LAUGH]\n&gt;&gt; That's all right,\n\n15\n00:00:55.216 --> 00:00:58.575\nbecause I'm tired as well, but\npart of that was intentional, right?\n\n16\n00:00:58.575 --> 00:01:00.503\nElse is actually not that hard.\n\n17\n00:01:00.503 --> 00:01:03.523\nReferring to previous episode,\nif it's this do this,\n\n18\n00:01:03.523 --> 00:01:05.970\notherwise do this other thing.\n\n19\n00:01:05.970 --> 00:01:09.400\nThat way you can kind of limit\nwhen that last part runs.\n\n20\n00:01:09.400 --> 00:01:11.210\nIt's this or that, not both.\n\n21\n00:01:12.300 --> 00:01:15.670\nNow, I showed you some things in the\nprevious episode that Vonne was referring\n\n22\n00:01:15.670 --> 00:01:20.288\nto of like deeply nesting and\nlike having like additional logic there.\n\n23\n00:01:20.288 --> 00:01:27.060\nThat it'll work, but\nmaybe it's not as clear.\n\n24\n00:01:27.060 --> 00:01:31.220\nAnd I think part of that brain\nworkout is lack of clarity, or\n\n25\n00:01:31.220 --> 00:01:33.160\nlack of the ability to read, right?\n\n26\n00:01:33.160 --> 00:01:36.160\nI can read old handwritten\nnotes from the 50s.\n\n27\n00:01:36.160 --> 00:01:40.650\nBut it would probably be better\nif they were written in pen, and\n\n28\n00:01:40.650 --> 00:01:44.070\nactually maybe digitized, or\ntranslated, or something like that.\n\n29\n00:01:44.070 --> 00:01:45.180\n&gt;&gt; Yeah, and\nI know we've talked about it, or\n\n30\n00:01:45.180 --> 00:01:46.630\nmaybe I even mentioned\nit in the last episode.\n\n31\n00:01:46.630 --> 00:01:51.300\nIt's like, it's not totally wrong,\nif you make sure that they're\n\n32\n00:01:51.300 --> 00:01:53.580\nleveled the right way,\nwhere you have it nested properly.\n\n33\n00:01:53.580 --> 00:01:58.590\nBut you could logic your way into it, but\nis that really the best way to do it?\n\n34\n00:01:58.590 --> 00:02:02.270\nIs it clear, and would you come back six\nmonths later and be able to read that?\n\n35\n00:02:02.270 --> 00:02:05.060\nOr have somebody else read it and\nbe like, that totally makes sense.\n\n36\n00:02:05.060 --> 00:02:08.700\nInstead of going, but wait this, almost\nlike having a little notepad on the side,\n\n37\n00:02:08.700 --> 00:02:11.410\nlike what was the number, what was that.\n\n38\n00:02:11.410 --> 00:02:12.800\nSo it makes it, like you're saying,\n\n39\n00:02:12.800 --> 00:02:16.560\nwe have a clearer way of\ngetting to the same result.\n\n40\n00:02:16.560 --> 00:02:18.810\n&gt;&gt; And ELIF,\n\n41\n00:02:18.810 --> 00:02:23.070\nthat's our third contract that works with\nifs, is gonna help with that clarity.\n\n42\n00:02:23.070 --> 00:02:26.310\nWe're actually gonna have\nto run a little more code.\n\n43\n00:02:26.310 --> 00:02:31.570\nBut I'm a big proponent of, if it's\neasier to read, that's better, right?\n\n44\n00:02:31.570 --> 00:02:35.340\nDon't worry about this crazy,\nwell, I gotta be as concise and\n\n45\n00:02:35.340 --> 00:02:36.520\nas short as possible.\n\n46\n00:02:36.520 --> 00:02:39.080\nNo, make it easy to read and\neasy to reason about,\n\n47\n00:02:39.080 --> 00:02:41.180\nespecially if you're just getting started.\n\n48\n00:02:41.180 --> 00:02:43.730\nYour future self will be grateful.\n\n49\n00:02:43.730 --> 00:02:45.350\nOther people will be grateful.\n\n50\n00:02:45.350 --> 00:02:48.900\nBecause the thing I wrote in the last\nepisode, we're actually gonna take a look\n\n51\n00:02:48.900 --> 00:02:53.860\nat it in just a moment, if I came to\nthat a month from now, I'm going man,\n\n52\n00:02:53.860 --> 00:02:56.700\nI'm gonna have to get my notebook out,\nand go all right, wait a minute.\n\n53\n00:02:56.700 --> 00:02:59.130\nWhen does this code actually execute?\n\n54\n00:02:59.130 --> 00:03:02.220\nAnd furthermore,\nall I'm doing is print statements.\n\n55\n00:03:02.220 --> 00:03:06.850\nI've seen code like this that may have 30\nor 40 lines, and then it unindents and\n\n56\n00:03:06.850 --> 00:03:09.370\nit has other lines, and\nyou're like, wait a minute.\n\n57\n00:03:09.370 --> 00:03:09.870\nWhat is this doing?\n\n58\n00:03:10.890 --> 00:03:12.410\nAnd you just kind of have to go line,\n\n59\n00:03:12.410 --> 00:03:18.030\nI've actually printed out [LAUGH] went\nline by line and went, okay, that's how.\n\n60\n00:03:18.030 --> 00:03:21.760\nIt's kind of weird to actually have to\nprint out source code to reason about it.\n\n61\n00:03:21.760 --> 00:03:23.550\nThat's probably a bad sign.\n\n62\n00:03:23.550 --> 00:03:27.450\n&gt;&gt; It also could be, as humans,\nwe all think differently.\n\n63\n00:03:27.450 --> 00:03:31.580\nWe could come to the same result,\nbut you go this way, I go this way,\n\n64\n00:03:31.580 --> 00:03:33.690\nand somebody else goes\nright down the middle.\n\n65\n00:03:33.690 --> 00:03:37.948\nAnd it makes sense to me, and\nit would make sense to you.\n\n66\n00:03:37.948 --> 00:03:42.950\nSo, I mean, there is a little bit of,\nto each its own, slightly.\n\n67\n00:03:42.950 --> 00:03:45.650\nThere will always be part of that, but\n\n68\n00:03:45.650 --> 00:03:50.540\ntrying to be clear as possible for\nyourself and others, is important.\n\n69\n00:03:50.540 --> 00:03:55.040\n&gt;&gt; And that's the battle we have pretty\nmuch every day when we write code.\n\n70\n00:03:55.040 --> 00:03:59.260\nBut with that said, let's go ahead and\ntake a look at the screen here,\n\n71\n00:03:59.260 --> 00:04:01.320\nmake sure everybody's on the same page.\n\n72\n00:04:01.320 --> 00:04:04.490\nI do have this file open,\nbut just a quick review.\n\n73\n00:04:04.490 --> 00:04:06.860\nThis folder is open from my desktop.\n\n74\n00:04:06.860 --> 00:04:08.330\nWe made this in a previous episode.\n\n75\n00:04:08.330 --> 00:04:10.660\nI just made\na Programming Fundamentals folder.\n\n76\n00:04:10.660 --> 00:04:13.420\nI'll open the folder and\nthat's open in my editor.\n\n77\n00:04:13.420 --> 00:04:19.010\nLikewise, I'm in the terminal, and\nI'm in that respective folder.\n\n78\n00:04:19.010 --> 00:04:21.900\nSo underscores are gonna\nbe a little easier for\n\n79\n00:04:21.900 --> 00:04:25.890\nPython to digest, but\nthat's where we are, all right?\n\n80\n00:04:25.890 --> 00:04:30.050\nNow, let's circle back around, and\nthat doom and gloom that Vonne and\n\n81\n00:04:30.050 --> 00:04:31.180\nI were kind of alluding to.\n\n82\n00:04:32.530 --> 00:04:36.250\nI'm temporarily going to take this, and\n\n83\n00:04:36.250 --> 00:04:39.140\nwe're actually going to use some of\nwhat we haven't talked about thus far.\n\n84\n00:04:40.510 --> 00:04:44.997\nMainly because you're like, I don't\nreally see the point of it quite yet,\n\n85\n00:04:44.997 --> 00:04:46.990\nand that's common.\n\n86\n00:04:46.990 --> 00:04:54.320\nThese are pieces of things in your text\nfile, your Python, that's there for you.\n\n87\n00:04:55.490 --> 00:04:58.710\nThe interpreter, Python,\ndoesn't actually care anything about it,\n\n88\n00:04:58.710 --> 00:05:00.160\nit just kinda skips them.\n\n89\n00:05:00.160 --> 00:05:03.460\nNow, the reason I highlighted this is, I'm\ngonna hold Cmd, and if you're on a Windows\n\n90\n00:05:03.460 --> 00:05:08.420\nor a Linux machine, this will be Ctrl,\nand then hit the question mark button.\n\n91\n00:05:08.420 --> 00:05:14.110\nAnd then what will do is put\na bunch of hashtags right in front\n\n92\n00:05:14.110 --> 00:05:18.450\nof all of that code, all right, or\noctothropes, that's my favorite way.\n\n93\n00:05:18.450 --> 00:05:23.145\nAnd it'll do this block by block,\nthat means we can read this, right?\n\n94\n00:05:23.145 --> 00:05:24.080\nVonne can still read this.\n\n95\n00:05:24.080 --> 00:05:25.290\nI can still read this.\n\n96\n00:05:25.290 --> 00:05:27.175\nBut when the program actually executes,\n\n97\n00:05:27.175 --> 00:05:30.630\nPython will go,\nthat starts with a hashtag, forget it.\n\n98\n00:05:30.630 --> 00:05:31.790\nDon't worry about it.\n\n99\n00:05:31.790 --> 00:05:34.610\nComments are meant for people.\n\n100\n00:05:34.610 --> 00:05:37.460\nThis is actually atypical use of comments.\n\n101\n00:05:37.460 --> 00:05:41.071\nComments are meant more for\n\n102\n00:05:41.071 --> 00:05:46.729\nthe following determines some printout.\n\n103\n00:05:46.729 --> 00:05:52.171\nLet's actually zoom out just a little bit,\n\n104\n00:05:52.171 --> 00:05:58.801\nbased on the value of favorite_number,\nall right?\n\n105\n00:05:58.801 --> 00:06:00.720\nNow, you can use comments anywhere.\n\n106\n00:06:00.720 --> 00:06:03.870\nThere's other ways to do comments,\nwe'll touch on those as they come up.\n\n107\n00:06:03.870 --> 00:06:06.320\nI used to teach comments up front, but\n\n108\n00:06:06.320 --> 00:06:09.670\nthen a lot of people were like,\nwhy would you ever use this, right?\n\n109\n00:06:09.670 --> 00:06:13.990\nLikewise, comments can exist at the end\nof a line as well for respective code.\n\n110\n00:06:13.990 --> 00:06:17.940\nSo I can just put them after this,\nand say I'm printing some stuff.\n\n111\n00:06:17.940 --> 00:06:19.620\nAnd actually let's zoom out here.\n\n112\n00:06:19.620 --> 00:06:23.090\nPrinting some stuff,\nso that will also work.\n\n113\n00:06:23.090 --> 00:06:29.254\nSo these are simple line comments, and\nall you have to do is highlight Cmd + /,\n\n114\n00:06:29.254 --> 00:06:33.769\nthe question mark key, or\nCtrl on respective [INAUDIBLE].\n\n115\n00:06:33.769 --> 00:06:39.005\nNow, the reason I'm doing that is this\nis actually going to get rid of this\n\n116\n00:06:39.005 --> 00:06:43.909\nprintout temporarily in order for\nus to worry about this code above.\n\n117\n00:06:43.909 --> 00:06:47.973\n&gt;&gt; I have two questions, well,\none I guess is maybe a statement,\n\n118\n00:06:47.973 --> 00:06:52.650\ncuz the octothorpes, because I love\nto know what the other words are.\n\n119\n00:06:52.650 --> 00:06:53.840\nThat's just the hashtag.\n\n120\n00:06:53.840 --> 00:06:56.360\nSo, in case you're like what is that?\n\n121\n00:06:56.360 --> 00:06:57.270\nJust in case you didn't get it.\n\n122\n00:06:57.270 --> 00:06:59.650\nAnd I always like to throw that in too.\n\n123\n00:06:59.650 --> 00:07:01.850\nMy second question now is,\n\n124\n00:07:01.850 --> 00:07:04.610\nyou're putting the hashtag at\nthe beginning of every line.\n\n125\n00:07:04.610 --> 00:07:08.265\nIs there a way of making\nlike a block comment?\n\n126\n00:07:08.265 --> 00:07:11.590\nCuz I know in HTML or different languages,\nyou can do like a single line comment or\n\n127\n00:07:11.590 --> 00:07:13.044\na block level quote.\n\n128\n00:07:13.044 --> 00:07:15.690\nComment, you know what\nI'm trying to ask you.\n\n129\n00:07:15.690 --> 00:07:16.550\n[LAUGH]\n&gt;&gt; Yeah, so\n\n130\n00:07:16.550 --> 00:07:19.040\ncan I do a bunch of lines at once?\n\n131\n00:07:19.040 --> 00:07:22.210\nThere is and\njust temporarily I'll show you.\n\n132\n00:07:22.210 --> 00:07:25.760\nIt's triple quotes, either single or\ndouble, beginning and end.\n\n133\n00:07:25.760 --> 00:07:28.920\nThis actually, technically,\ncreates a string, so\n\n134\n00:07:28.920 --> 00:07:31.190\nPython will make this into a string.\n\n135\n00:07:31.190 --> 00:07:33.670\nBut it will not be assigned anything.\n\n136\n00:07:33.670 --> 00:07:34.870\nIt won't do anything.\n\n137\n00:07:34.870 --> 00:07:36.330\nSo that's the way it does it.\n\n138\n00:07:36.330 --> 00:07:41.570\nNow, the reason you wont see me do that\na great deal, is because with new editors\n\n139\n00:07:41.570 --> 00:07:45.500\nI can just highlight all of this and it'll\ndo it line by line, commenting for you.\n\n140\n00:07:45.500 --> 00:07:47.420\nSo it kind of automated the process.\n\n141\n00:07:47.420 --> 00:07:49.675\nSo a lot of times you'll\nsee single line comments,\n\n142\n00:07:49.675 --> 00:07:52.619\nespecially if people are using\nan editor like Visual Studio Code.\n\n143\n00:07:52.619 --> 00:07:59.133\n&gt;&gt; And one more, you don't have to\nhave a closing syntax to say, like.\n\n144\n00:07:59.133 --> 00:08:03.340\nStop the comment at this line like that,\nprinting some on that line 13.\n\n145\n00:08:03.340 --> 00:08:07.839\nIf you kept going and\nit wrapped around and everything,\n\n146\n00:08:07.839 --> 00:08:11.487\nthat's okay too, it doesn't matter if it.\n\n147\n00:08:11.487 --> 00:08:14.463\nWell, I guess, you know.\n\n148\n00:08:14.463 --> 00:08:15.363\n&gt;&gt; [LAUGH] yeah.\n&gt;&gt; If you did a little line break.\n\n149\n00:08:15.363 --> 00:08:16.500\n&gt;&gt; What is the, what is the, what is the.\n\n150\n00:08:16.500 --> 00:08:18.680\nIf you do a line break\nthen the comment ends.\n\n151\n00:08:18.680 --> 00:08:22.630\nSo, if I come here and I hit Enter,\nthis is now code again.\n\n152\n00:08:24.260 --> 00:08:27.455\nGreat question,\nthat's one of those things where,\n\n153\n00:08:27.455 --> 00:08:32.060\nit doesn't make anything to me because\nit's just kind of engrained in me.\n\n154\n00:08:32.060 --> 00:08:34.280\nBut if I hit, boom, that's a line break.\n\n155\n00:08:34.280 --> 00:08:35.950\nI hit Enter and\n\n156\n00:08:35.950 --> 00:08:42.450\nI start typing some_variable like so,\nthen this will still execute.\n\n157\n00:08:42.450 --> 00:08:48.446\nLikewise, that still happens,\nright over here, as soon as I hit Enter.\n\n158\n00:08:48.446 --> 00:08:51.350\nThat's the end of that line comment,\nso it's done.\n\n159\n00:08:52.620 --> 00:08:56.210\nAll right, so, does that kind\nof clear everything up for us?\n\n160\n00:08:56.210 --> 00:08:59.230\n&gt;&gt; It does, I just wanna, and again\nthere's because of the little bit I know\n\n161\n00:08:59.230 --> 00:09:03.354\nof some other languages,\nI know that there are other syntax.\n\n162\n00:09:03.354 --> 00:09:08.180\nSyntax is all together and just block\ncomments versus single line comments and\n\n163\n00:09:08.180 --> 00:09:10.370\nending characters versus\nall of those other things.\n\n164\n00:09:10.370 --> 00:09:11.112\nI just wanted to know about it.\n\n165\n00:09:11.112 --> 00:09:13.492\nAnd I'm the same way,\nI always thought comments up front.\n\n166\n00:09:13.492 --> 00:09:14.327\nAnd they were like, why?\n\n167\n00:09:14.327 --> 00:09:15.140\nI'm like, I'll show you later.\n\n168\n00:09:15.140 --> 00:09:18.056\n[LAUGH]\n&gt;&gt; Yeah, so we're trying something new,\n\n169\n00:09:18.056 --> 00:09:21.465\nmainly because this is our first\ninstance for needing these and\n\n170\n00:09:21.465 --> 00:09:23.440\nwe don't have to remember them.\n\n171\n00:09:23.440 --> 00:09:26.870\nSo, there's actually a need so\nhopefully that'll help you remember.\n\n172\n00:09:26.870 --> 00:09:30.289\nHighlight command forward slash and boom.\n\n173\n00:09:30.289 --> 00:09:33.653\nNow, one other thing that I'm gonna do,\njust kinda clear things up.\n\n174\n00:09:33.653 --> 00:09:35.080\nIs within our editor,\n\n175\n00:09:35.080 --> 00:09:40.640\nwe don't actually need this bar right\nnow cuz we're just working in this file.\n\n176\n00:09:40.640 --> 00:09:43.210\nYou go here and you click,\nit'll hide that temporarily,\n\n177\n00:09:43.210 --> 00:09:45.330\nif I want it back it'll open it back up.\n\n178\n00:09:45.330 --> 00:09:47.624\nSo, I just want to focus on this,\nall right.\n\n179\n00:09:47.624 --> 00:09:49.484\nSo, we have all of this.\n\n180\n00:09:49.484 --> 00:09:52.961\nAnd we come back over here, let's\nactually print this out, let's run this,\n\n181\n00:09:52.961 --> 00:09:55.447\nHello to everyone out there,\nmy favorite number is 2.\n\n182\n00:09:55.447 --> 00:09:59.833\nAnd one of that occur, well, favorite\nnumber is 2, let's change that back to 7.\n\n183\n00:09:59.833 --> 00:10:04.740\nAnd it ran this because I do like cheese,\nbut then it only ran this because well,\n\n184\n00:10:04.740 --> 00:10:08.915\nI do like cheese but it's not greater\nthan 3, so it skips here, but\n\n185\n00:10:08.915 --> 00:10:12.609\nit's still not greater than 3,\nso it actually runs here.\n\n186\n00:10:12.609 --> 00:10:17.872\nAll right, so if I run this back at 7.\n\n187\n00:10:17.872 --> 00:10:20.350\nMy favorite number is 7,\nthat is a big number.\n\n188\n00:10:20.350 --> 00:10:24.180\nWell, we notice it printed this,\nbut none of this other stuff.\n\n189\n00:10:25.200 --> 00:10:27.690\nAll right,\nbecause of the respective else statement.\n\n190\n00:10:29.175 --> 00:10:31.940\nBut I'm now gonna change this to false.\n\n191\n00:10:31.940 --> 00:10:36.200\nAnd what's going to happen is, if likes\ncheese is false, then this won't run.\n\n192\n00:10:36.200 --> 00:10:39.261\nSo hop into this else and\nthen, effectively,\n\n193\n00:10:39.261 --> 00:10:43.114\nfavorite number is going to be\nthe dictating kind of path.\n\n194\n00:10:43.114 --> 00:10:46.358\nGonna say do you go left,\nright, so on and so forth.\n\n195\n00:10:46.358 --> 00:10:50.610\nWell, if we run it one more time,\nwhy is that?\n\n196\n00:10:50.610 --> 00:10:55.530\nBecause favorite number is greater than 3,\nall right?\n\n197\n00:10:55.530 --> 00:10:57.220\nBut, how could we fix this?\n\n198\n00:10:57.220 --> 00:10:58.600\nHow could it be a little more clear?\n\n199\n00:10:58.600 --> 00:11:02.369\nInstead of having this nested if,\nreally what does this mean?\n\n200\n00:11:02.369 --> 00:11:04.965\nThis means if I don't like cheese and\n\n201\n00:11:04.965 --> 00:11:10.530\nfavorite number is still greater than 3,\nall right, how did I get there?\n\n202\n00:11:10.530 --> 00:11:14.480\nWell, if I like cheese then this will run.\n\n203\n00:11:15.740 --> 00:11:17.750\nMy favorite number is not greater than 3,\n\n204\n00:11:17.750 --> 00:11:20.773\nthen this will run, so\nwe're getting there.\n\n205\n00:11:20.773 --> 00:11:24.020\nSo this first if I don't like cheese and\n\n206\n00:11:24.020 --> 00:11:28.260\nfavorite number is still greater than 3,\nI want this to run, so how do we fix that?\n\n207\n00:11:28.260 --> 00:11:34.770\nWell I come here, and I'm gonna hit\nbackspace backspace backspace backspace.\n\n208\n00:11:36.230 --> 00:11:37.600\nThis is, I wanted to show you that,\n\n209\n00:11:37.600 --> 00:11:41.878\ncuz essentially what Python says is if you\nwant an else with additional condition\n\n210\n00:11:41.878 --> 00:11:47.890\nthen you're gonna take the SE and\nkinda just smack the if onto it.\n\n211\n00:11:47.890 --> 00:11:49.620\nSo I have an elif statement.\n\n212\n00:11:50.960 --> 00:11:52.770\nI get to add a condition here.\n\n213\n00:11:54.430 --> 00:11:59.765\nNow what that also means is notice I've\nbroken out of additional indentation.\n\n214\n00:12:00.940 --> 00:12:05.425\nIf I like cheese and favorite number is 3,\nis greater than 3, excuse me.\n\n215\n00:12:05.425 --> 00:12:08.792\nThen print, that is a big number.\n\n216\n00:12:08.792 --> 00:12:14.090\nElif, this elif will only\nexecute if this one does not.\n\n217\n00:12:14.090 --> 00:12:17.990\nAll right so if this if gets skipped\nit will check the next one in line.\n\n218\n00:12:17.990 --> 00:12:20.252\nIt's like a list of things to check.\n\n219\n00:12:20.252 --> 00:12:26.941\nSo elif the favorite number is greater\nthan 3, then print hello Vonne, all right?\n\n220\n00:12:26.941 --> 00:12:34.334\nAnd then notice this is now still kind of\nindented weird, this is going to break.\n\n221\n00:12:34.334 --> 00:12:36.845\nLet's actually see how it breaks and\n\n222\n00:12:36.845 --> 00:12:41.005\nthen we'll actually see how\nthis plays out, so clear this.\n\n223\n00:12:41.005 --> 00:12:42.630\nI found 3 if and indentation error.\n\n224\n00:12:42.630 --> 00:12:48.385\nUnindent does not match\nouter indentation level and\n\n225\n00:12:48.385 --> 00:12:51.792\nnotice it points at the colon.\n\n226\n00:12:51.792 --> 00:12:56.140\nAnd well, there's spaces and\nit still goes through all these.\n\n227\n00:12:56.140 --> 00:13:00.390\nThat's because it's looking to pair\nthis else with an if statement.\n\n228\n00:13:00.390 --> 00:13:02.830\nIt's like,\nI don't know what to do with it.\n\n229\n00:13:02.830 --> 00:13:07.820\nSo what we're gonna do is highlight this,\nhold Shift, hit Tab and\n\n230\n00:13:07.820 --> 00:13:10.950\nbring this all to a single level, okay?\n\n231\n00:13:12.580 --> 00:13:17.215\nNow if we read this, if I like cheese and\nmy favorite number is greater than 3,\n\n232\n00:13:17.215 --> 00:13:18.493\nthat is a big number.\n\n233\n00:13:18.493 --> 00:13:22.080\nElif, else if, otherwise if.\n\n234\n00:13:22.080 --> 00:13:25.510\nSo now that now I have\nthree possible states.\n\n235\n00:13:25.510 --> 00:13:27.430\nThree ways I can progress through this.\n\n236\n00:13:28.820 --> 00:13:33.160\nElif, if the favorite number is greater\nthan 3, print, Hello Vonne, okay?\n\n237\n00:13:34.280 --> 00:13:40.840\nAnd otherwise,\nif these two do not run print this one.\n\n238\n00:13:40.840 --> 00:13:44.414\nNow, we're changing some things.\n\n239\n00:13:44.414 --> 00:13:45.917\nThis still might break.\n\n240\n00:13:47.693 --> 00:13:48.449\nHello Vonne.\n\n241\n00:13:48.449 --> 00:13:50.114\nWell how did it get to hello Vonne?\n\n242\n00:13:50.114 --> 00:13:54.632\nWell, if favorite number is greater\nthan three, but I don't like cheese,\n\n243\n00:13:54.632 --> 00:13:56.120\nthat's false.\n\n244\n00:13:56.120 --> 00:14:00.220\nIs that what it should have done,\nversus what it did before?\n\n245\n00:14:00.220 --> 00:14:05.620\nSo, I don't like cheese is the favorite\nnumber greater than 3, it still is.\n\n246\n00:14:05.620 --> 00:14:09.150\nNow, notice this is not indented\nappropriately, we're gonna fix that,\n\n247\n00:14:09.150 --> 00:14:11.320\neven though we got away with it that time.\n\n248\n00:14:11.320 --> 00:14:17.952\nSometimes it's a little nicer to you,\nit'll help you out.\n\n249\n00:14:17.952 --> 00:14:21.020\nSo if I like cheese and my favorite\nnumber is greater than 3, print this.\n\n250\n00:14:21.020 --> 00:14:23.360\nOtherwise, how is this otherwise?\n\n251\n00:14:23.360 --> 00:14:25.310\nWell, one of these is not true.\n\n252\n00:14:26.380 --> 00:14:29.990\nProbably if likes cheese and\nfavorite number is greater than 3,\n\n253\n00:14:29.990 --> 00:14:32.290\nthen print hello vonne, otherwise.\n\n254\n00:14:32.290 --> 00:14:35.890\nFinally, otherwise,\nhello to everyone out there, all right?\n\n255\n00:14:35.890 --> 00:14:37.460\nHow do I get to here now?\n\n256\n00:14:37.460 --> 00:14:42.125\nWell, I'm gonna put 2, like so.\n\n257\n00:14:42.125 --> 00:14:45.388\nWell, it doesn't matter what this is,\nbecause that will be false, and\n\n258\n00:14:45.388 --> 00:14:47.200\nthat will be false also.\n\n259\n00:14:47.200 --> 00:14:52.670\nIf I rerun this, hello everyone\nto everyone out there, all right?\n\n260\n00:14:52.670 --> 00:14:54.650\nSo that's a little more readable.\n\n261\n00:14:55.880 --> 00:15:00.815\nBut I still have to talk about this\nlike cheese on the second line,\n\n262\n00:15:00.815 --> 00:15:05.143\nbecause really that dictates\nwhether I get to this elif.\n\n263\n00:15:05.143 --> 00:15:10.817\nWhat if I wanted something not like,\nnot like cheese and\n\n264\n00:15:10.817 --> 00:15:14.810\nthat nested if else in that else block?\n\n265\n00:15:16.460 --> 00:15:20.280\nThat's kind of what happened,\nbecause I had this if.\n\n266\n00:15:20.280 --> 00:15:24.060\nIf I don't like cheese and\nmy favorite number is greater than 3.\n\n267\n00:15:24.060 --> 00:15:25.490\nHello Vonne.\n\n268\n00:15:25.490 --> 00:15:29.680\nOtherwise, grant hello\nto everyone out there.\n\n269\n00:15:29.680 --> 00:15:33.430\nBy doing this, it is a little redundant,\nand still maybe not the best.\n\n270\n00:15:33.430 --> 00:15:34.494\nBut if I come in and read this again.\n\n271\n00:15:34.494 --> 00:15:37.506\nOkay, if you like cheese, and\nyour favorite number's greater than 3,\n\n272\n00:15:37.506 --> 00:15:38.290\nwhat a big number.\n\n273\n00:15:39.340 --> 00:15:43.650\nIf you don't like cheese, and the favorite\nnumber's greater than 3, hello Vonne.\n\n274\n00:15:43.650 --> 00:15:45.910\nOtherwise, we're just\ngonna print this out.\n\n275\n00:15:45.910 --> 00:15:47.270\nSo everything else,\n\n276\n00:15:47.270 --> 00:15:51.450\nother than these two conditions Is going\nto print out, hello to everyone out there.\n\n277\n00:15:51.450 --> 00:15:52.811\n&gt;&gt; And\nthis is going back to what you said.\n\n278\n00:15:52.811 --> 00:15:58.461\nSometimes I might be over explaining\nmyself, I'm actually adding more.\n\n279\n00:15:58.461 --> 00:16:03.967\nCode into that line, but it does make\nmore sense when I read it back to myself,\n\n280\n00:16:03.967 --> 00:16:07.800\nand I got a little scared\nwhen you're like, wait.\n\n281\n00:16:07.800 --> 00:16:11.524\nBut isn't it sometimes when you start\nbeing redundant, you're supposed to block?\n\n282\n00:16:11.524 --> 00:16:14.345\nI know I'm kind of going for\nother lessons on other languages and\n\n283\n00:16:14.345 --> 00:16:15.397\neverything like that.\n\n284\n00:16:15.397 --> 00:16:18.653\nBut that's where I was like, wait,\nI thought you're supposed to avoid that.\n\n285\n00:16:18.653 --> 00:16:24.550\nBut this is okay, because you're\nclarifying, you're being very clear.\n\n286\n00:16:24.550 --> 00:16:26.740\n&gt;&gt; When you're first starting out,\nI would rather see this.\n\n287\n00:16:26.740 --> 00:16:29.763\nNow in the grand scheme of things,\nthese are not the greatest conditions.\n\n288\n00:16:29.763 --> 00:16:32.093\nBecause liking cheese and\nhaving a favorite number,\n\n289\n00:16:32.093 --> 00:16:34.638\nmaybe those aren't necessarily\nconnected conditions.\n\n290\n00:16:34.638 --> 00:16:38.830\nSo I wouldn't necessarily be having one if\nstatement that brings those all together.\n\n291\n00:16:41.190 --> 00:16:46.846\nIf you can, right, effectively,\nthis is a compound condition,\n\n292\n00:16:46.846 --> 00:16:52.813\nyou have to like cheese and the number\nhas to be that big for this to run.\n\n293\n00:16:52.813 --> 00:16:53.520\nThat's our intention.\n\n294\n00:16:55.010 --> 00:17:02.449\nIf that is not the case, then not having\nthe not likes cheese doesn't matter.\n\n295\n00:17:02.449 --> 00:17:08.320\nBecause we're only checking if\nfavorite_number is greater than three,\n\n296\n00:17:08.320 --> 00:17:13.919\nbecause, it was originally,\nif I undo this, it was originally this.\n\n297\n00:17:13.919 --> 00:17:18.451\nLikes_cheese is what dictated\nwhether you got to this line or not.\n\n298\n00:17:18.451 --> 00:17:22.965\nBecause the only way you can have\na favorite_number is greater than\n\n299\n00:17:22.965 --> 00:17:27.790\nthree inside of this else is only\nif likes_cheese is false, okay?\n\n300\n00:17:27.790 --> 00:17:32.020\nSo kind of a weird thing and\nI had remember how to do redo.\n\n301\n00:17:32.020 --> 00:17:36.219\nSo I was just doing Command+Z there,\nall right, and\n\n302\n00:17:36.219 --> 00:17:41.700\nthere we go, but now if I read this,\nmy intention is very clear.\n\n303\n00:17:41.700 --> 00:17:44.393\nAnd again, like I said, Vonne,\n\n304\n00:17:44.393 --> 00:17:49.118\na lot of times people discourage this and\nin the long term?\n\n305\n00:17:49.118 --> 00:17:52.623\nYou may want to start figuring\nout better logic skills.\n\n306\n00:17:52.623 --> 00:17:55.326\nBut if you ever find code\nthat is deeply nested,\n\n307\n00:17:55.326 --> 00:17:58.177\nyour first pass should be\nrewriting it like this.\n\n308\n00:17:58.177 --> 00:18:01.416\nBecause you may find out these aren't\nactually connected in any way.\n\n309\n00:18:01.416 --> 00:18:06.620\nYou can actually pull them out and have\ntwo different sets of ifs, ifs and elses.\n\n310\n00:18:06.620 --> 00:18:09.721\nThat are no longer connected, and\nyou just go, yeah, that's what it is.\n\n311\n00:18:09.721 --> 00:18:14.436\nSo, the first pass is to get them here,\nand if you come back, maybe leave it.\n\n312\n00:18:14.436 --> 00:18:16.433\nYou come back a month later,\nyou go, if you like cheese and\n\n313\n00:18:16.433 --> 00:18:17.468\nthe favorite number, do that.\n\n314\n00:18:17.468 --> 00:18:20.511\nIf you don't like cheese and\nthe favorite_number is greater than three,\n\n315\n00:18:20.511 --> 00:18:22.793\nyou do that, otherwise,\nyou just do this other thing.\n\n316\n00:18:22.793 --> 00:18:26.959\nWe have three states and\narguably this is a lot more readable, and\n\n317\n00:18:26.959 --> 00:18:30.609\nit's not the best, but\nit is a great deal more readable.\n\n318\n00:18:30.609 --> 00:18:33.659\n&gt;&gt; And with the levels that we had before,\nfor me,\n\n319\n00:18:33.659 --> 00:18:36.874\nI kind of could tell when\nit's happening on this.\n\n320\n00:18:36.874 --> 00:18:40.159\nWhen you have an if, elif,\nas soon as the else,\n\n321\n00:18:40.159 --> 00:18:44.790\nthis breaks like this kind of block,\nfor lack of better terms.\n\n322\n00:18:44.790 --> 00:18:49.236\nAnd you can have multiple else,\nif but they're all in the same line.\n\n323\n00:18:49.236 --> 00:18:55.170\nSo it's that elif that's kind of like\nyour indent in and your other condition.\n\n324\n00:18:55.170 --> 00:18:58.049\nAnd that's how it,\nyou just have to kind of remember that and\n\n325\n00:18:58.049 --> 00:19:01.390\nonce the else happens then you're\ndone writing this little passage.\n\n326\n00:19:01.390 --> 00:19:05.481\n&gt;&gt; Yeah, exactly, and, so to further\nclarify, just to really drive this home,\n\n327\n00:19:05.481 --> 00:19:08.780\nif this executes,\nnone of the rest of these will.\n\n328\n00:19:08.780 --> 00:19:10.047\nSo it's like a checklist.\n\n329\n00:19:10.047 --> 00:19:14.314\nIt's like, as soon as you check off\none of the if, the elif, or the else,\n\n330\n00:19:14.314 --> 00:19:16.798\nnone of the other ones\nactually get checked.\n\n331\n00:19:16.798 --> 00:19:21.050\nNone of the other ones run, and that's\nthe same behavior for the indentation.\n\n332\n00:19:21.050 --> 00:19:25.449\nAnd that's how the elif is helpful\nto give you the same kind of\n\n333\n00:19:25.449 --> 00:19:29.081\nrun time behavior that\nyou had with indentation.\n\n334\n00:19:29.081 --> 00:19:32.905\nBut now I don't have indentation,\nI just go, well, if it's if this, cool.\n\n335\n00:19:32.905 --> 00:19:36.291\nAnd then it acts like this\ndoesn't even exist, and\n\n336\n00:19:36.291 --> 00:19:41.520\ndon't accidentally drag that like that,\nso you asked about multiple elifs.\n\n337\n00:19:41.520 --> 00:19:45.740\n&gt;&gt; Well, it's funny, because we're\ngoing to un-indent this, all right?\n\n338\n00:19:45.740 --> 00:19:53.640\nAnd just go through this one more time,\nso if I do here, well, what do I want?\n\n339\n00:19:53.640 --> 00:19:59.291\nAnd this is, I'm going to show you where\nthis can get a little out of hand.\n\n340\n00:19:59.291 --> 00:20:03.277\nIf the number is greater than zero,\nprint zero,\n\n341\n00:20:03.277 --> 00:20:08.440\nthis is nesting,\nreally what this means is the following.\n\n342\n00:20:08.440 --> 00:20:13.708\nI'm going to un-indent this,\nun-indent this, and say,\n\n343\n00:20:13.708 --> 00:20:18.678\nif Favorite_number is greater than zero,\nprint zero.\n\n344\n00:20:18.678 --> 00:20:22.853\nBut I want this to happen also, okay?\n\n345\n00:20:22.853 --> 00:20:27.447\nSo elif, elif,\n\n346\n00:20:27.447 --> 00:20:31.392\nelse, okay?\n\n347\n00:20:31.392 --> 00:20:36.002\nNow I'm showing you this because we're not\ngoing to get the same runtime behavior.\n\n348\n00:20:36.002 --> 00:20:38.349\nWe're not going to see\nthe exact same printout,\n\n349\n00:20:38.349 --> 00:20:41.450\nso I'm going to undo just real quick so\nwe can remind ourselves.\n\n350\n00:20:41.450 --> 00:20:46.840\nSo, just to uncomment that,\nCommand, Shift, or Command, Slash.\n\n351\n00:20:46.840 --> 00:20:49.990\nJust the same way you commented it,\ndoing it again will uncomment it, so\n\n352\n00:20:49.990 --> 00:20:50.981\nit'll bring it back.\n\n353\n00:20:50.981 --> 00:20:57.210\nSo let's go and clear python3 ifs.py, so\nI get a zero, well, why do I get a zero?\n\n354\n00:20:57.210 --> 00:20:59.160\nBecause this is a two,\nI actually want that to be a seven.\n\n355\n00:21:00.580 --> 00:21:05.036\nAnd we run it again, zero three five,\n\n356\n00:21:05.036 --> 00:21:08.669\nokay, you go well, nesting.\n\n357\n00:21:08.669 --> 00:21:12.533\nWhat I want is if it's greater than zero,\nI want it to print zero.\n\n358\n00:21:12.533 --> 00:21:17.414\nIf it's greater than three I want to print\nthree, if it's greater than five I want\n\n359\n00:21:17.414 --> 00:21:20.970\nit to print five,\notherwise I want it to not print not five.\n\n360\n00:21:22.840 --> 00:21:27.780\nBut with this nesting, I want to print\nzero, and if it's greater than zero,\n\n361\n00:21:27.780 --> 00:21:30.973\nand greater than three,\nI want it to print three.\n\n362\n00:21:30.973 --> 00:21:35.024\nSo this nesting has kind\nof a reason to be there, so\n\n363\n00:21:35.024 --> 00:21:39.240\nI just shift tab twice,\nand I retab that in.\n\n364\n00:21:39.240 --> 00:21:44.347\nAnd I'm going to put elif and elif,\nso these multiple conditions,\n\n365\n00:21:44.347 --> 00:21:48.304\nthese are fine,\nlet's go see the print out though.\n\n366\n00:21:48.304 --> 00:21:51.436\nPython3 ifs, I'm only going to get zero.\n\n367\n00:21:54.122 --> 00:21:57.103\nWait minute, wait a minute,\nwait a minute, why is that?\n\n368\n00:21:57.103 --> 00:22:01.449\nBecause when I unindented, and\nI didn't put additional conditions there.\n\n369\n00:22:03.430 --> 00:22:10.170\nIt's actually hard sometimes to get\nan elif to give you the same, okay?\n\n370\n00:22:10.170 --> 00:22:14.738\nWhat I mean is, as soon as this if ran,\nit skipped all the rest of these,\n\n371\n00:22:14.738 --> 00:22:17.560\nI can't do further logic inside of here.\n\n372\n00:22:17.560 --> 00:22:24.063\nThe only way I could reproduce is\nif I say, print zero, like so.\n\n373\n00:22:24.063 --> 00:22:29.641\nBut when I only want that to be\nthe case is if favorite_number, woah,\n\n374\n00:22:29.641 --> 00:22:35.518\nis greater than zero and favorite_number\nis greater than three, okay?\n\n375\n00:22:35.518 --> 00:22:39.664\nAnd then, well, wait a minute,\nwhen do I want it to print five?\n\n376\n00:22:39.664 --> 00:22:44.314\nWell, originally, it was deeply nested so\nI want it to print zero, three, and five.\n\n377\n00:22:44.314 --> 00:22:46.876\nIn all actuality,\nwhen its greater than zero and\n\n378\n00:22:46.876 --> 00:22:51.520\ngreater than three, because of the way\nit was nested, so how do I get that?\n\n379\n00:22:51.520 --> 00:22:54.093\nFurthermore, you have\nto spell it correctly.\n\n380\n00:22:54.093 --> 00:22:59.461\nSo when I want favorite_number\nis greater than zero,\n\n381\n00:22:59.461 --> 00:23:06.550\nand favorite_number is greater than three,\nand favorite_number.\n\n382\n00:23:06.550 --> 00:23:08.640\nThen I want to print what?\n\n383\n00:23:08.640 --> 00:23:13.080\nI want to print zero,\nI want to print three.\n\n384\n00:23:15.630 --> 00:23:19.683\nAnd then only then, is this else?\n\n385\n00:23:19.683 --> 00:23:20.720\nWhen would this else happen?\n\n386\n00:23:20.720 --> 00:23:25.713\nWell, if this doesn't work,\nit still gives me that part.\n\n387\n00:23:25.713 --> 00:23:30.603\nBut notice I had to change my\nconditions when I made it into an elif\n\n388\n00:23:30.603 --> 00:23:32.604\nto get the same behavior.\n\n389\n00:23:32.604 --> 00:23:36.910\nSo if I say, ifs zero, well, why is that?\n\n390\n00:23:38.730 --> 00:23:41.831\nHm, you're like, well, I want zero and\n\n391\n00:23:41.831 --> 00:23:45.661\nthree if it's greater than zero and\ngreater than three.\n\n392\n00:23:45.661 --> 00:23:50.897\nWell, that's kind of what\nwe just did here, right?\n\n393\n00:23:50.897 --> 00:23:59.593\nHm, again, the hiccup with elifs that you\nhave to be careful about is, guess what?\n\n394\n00:23:59.593 --> 00:24:02.600\nEven though we put this,\nkind of modeling this same thing here.\n\n395\n00:24:03.740 --> 00:24:08.553\nThe only way it will ever get to\ngreater than 3 with an elif is if\n\n396\n00:24:08.553 --> 00:24:10.694\nit's not greater than 0.\n\n397\n00:24:10.694 --> 00:24:15.030\nSo even though that's a plus side,\nit can be a down side.\n\n398\n00:24:15.030 --> 00:24:17.330\nNow Vonne, I'm looking at you,\nand you're going.\n\n399\n00:24:18.480 --> 00:24:20.060\nFeel like you lied to me, Justin.\n\n400\n00:24:20.060 --> 00:24:23.120\nThat's kinda the look that\nI'm getting from him.\n\n401\n00:24:23.120 --> 00:24:25.805\nAm I off-base there, or\nis there something else going on?\n\n402\n00:24:25.805 --> 00:24:30.159\n&gt;&gt; No, it was one of those,\nit's gonna print out 0, 3, and 5,\n\n403\n00:24:30.159 --> 00:24:31.750\ncuz you've clarified.\n\n404\n00:24:31.750 --> 00:24:33.770\nBut you're saying this is,\n\n405\n00:24:33.770 --> 00:24:37.810\nit's almost like a fifth grad solute,\non that first line.\n\n406\n00:24:37.810 --> 00:24:40.980\nEven if you're clarifying,\n\n407\n00:24:40.980 --> 00:24:45.560\nbeing very specific,\nlike I'm never gonna go past this.\n\n408\n00:24:45.560 --> 00:24:50.428\nAnd it's a condition or\na behavior of the if, elif, else and\n\n409\n00:24:50.428 --> 00:24:55.692\nthe conjunction of higher writing\nit in this particular manner.\n\n410\n00:24:55.692 --> 00:24:56.220\n&gt;&gt; Exactly.\n\n411\n00:24:56.220 --> 00:24:59.210\nSo, I showed you this,\ni knew its gonna happen.\n\n412\n00:24:59.210 --> 00:25:01.638\nYou can do something like this, and\nyou can have another condition, right?\n\n413\n00:25:01.638 --> 00:25:05.130\nIf you dont like cheese and\nthe number is not greater than 3, and\n\n414\n00:25:05.130 --> 00:25:08.970\nyou can have more elif,\nthese still work, it's not an error.\n\n415\n00:25:08.970 --> 00:25:15.590\nHowever, we have unknowingly put\nourselves where these elif's never run.\n\n416\n00:25:16.830 --> 00:25:19.960\nBecause the only way I\ncan get to this one is if\n\n417\n00:25:19.960 --> 00:25:23.400\nfavorite number is greater than 0, okay.\n\n418\n00:25:23.400 --> 00:25:25.750\nWell, how do you fix this?\n\n419\n00:25:27.390 --> 00:25:30.070\nHow does one fix this?\n\n420\n00:25:30.070 --> 00:25:37.377\nWell, take the elif part off, okay?\n\n421\n00:25:37.377 --> 00:25:40.231\nAnd get rid of this.\n\n422\n00:25:43.376 --> 00:25:44.330\nGet rid of this.\n\n423\n00:25:46.020 --> 00:25:50.830\nAnd this else, well, when does that print,\nwhen this is not true, okay?\n\n424\n00:25:50.830 --> 00:25:54.020\nSo if it's greater than\n3 then we'll check that.\n\n425\n00:25:54.020 --> 00:25:56.119\nSo now I still have all in line.\n\n426\n00:25:58.709 --> 00:26:06.595\nAll right, so let's clear ifs 0, 3, and 5.\n\n427\n00:26:06.595 --> 00:26:09.640\nEIif is not always\nthe solution that you need,\n\n428\n00:26:09.640 --> 00:26:12.795\nbecause what I want is if it's\ngreater than 0, I want it to print 0.\n\n429\n00:26:13.970 --> 00:26:19.740\nIf it's greater than 0 and\ngreater than 3, right.\n\n430\n00:26:19.740 --> 00:26:24.200\nI want to preserve the same thing because\nof the nesting that has to be here for\n\n431\n00:26:24.200 --> 00:26:26.110\nthe logic to be equivalent.\n\n432\n00:26:26.110 --> 00:26:30.049\nBut if it's greater than 0 and\nit's greater than 3, print 3.\n\n433\n00:26:30.049 --> 00:26:34.300\nIf it's greater than 0 and greater than\n3 and greater than 5, then print 5.\n\n434\n00:26:34.300 --> 00:26:35.360\nOtherwise not 5.\n\n435\n00:26:36.560 --> 00:26:40.860\nSo I don't know if that helped out Vonne\nor if that just made things worse.\n\n436\n00:26:40.860 --> 00:26:42.720\n&gt;&gt; Well, you wanted all of them to happen.\n\n437\n00:26:42.720 --> 00:26:47.380\nSo it was like,\nI wanted you to keep going past this and\n\n438\n00:26:47.380 --> 00:26:51.970\nthe elif broke it from line one,\nlike you could not get to it.\n\n439\n00:26:51.970 --> 00:26:55.090\nAnd so if you don't have the elif,\nit's just,\n\n440\n00:26:55.090 --> 00:26:58.455\nit's compounding on each\nother if you want to say.\n\n441\n00:26:58.455 --> 00:27:03.180\nAnd they're very clear that it\nhas to be this and, this and and.\n\n442\n00:27:03.180 --> 00:27:09.960\nOkay, we're good I want you to print 5\nbecause it is 7, but it also is 0 and 3.\n\n443\n00:27:09.960 --> 00:27:10.780\n&gt;&gt; Exactly right, and\n\n444\n00:27:10.780 --> 00:27:15.060\nthe reason I show you this is because\npeople go, we'll elif that is what I want.\n\n445\n00:27:15.060 --> 00:27:20.380\nBut really after you, soon as you hit in\nthe branch of ifs If, elif, and else?\n\n446\n00:27:20.380 --> 00:27:22.920\nAs soon as you hit one of those,\nnone of the rest of them work.\n\n447\n00:27:22.920 --> 00:27:24.760\nReally the way our logic was previously,\n\n448\n00:27:24.760 --> 00:27:29.010\nif it's 0 then we want\nit to print 0 always.\n\n449\n00:27:29.010 --> 00:27:33.320\nBut if it's 0, if it is greater than 0 and\n3, we want it to print 3 also.\n\n450\n00:27:34.530 --> 00:27:41.570\nBut if it's greater than 0,3, and\n5, then we want to print 5 as well.\n\n451\n00:27:41.570 --> 00:27:44.250\nAnd we have to be careful because if we\n\n452\n00:27:44.250 --> 00:27:48.870\nmade the assumption that the elif actually\nis going to give us the same run, right,\n\n453\n00:27:48.870 --> 00:27:52.550\nthe same do-this do-this do-this,\nit's not.\n\n454\n00:27:52.550 --> 00:27:55.280\nIt's one of those, not all of those.\n\n455\n00:27:55.280 --> 00:28:00.223\nIf you need all of those, you actually\nneed an elif, you need an if, an if,\n\n456\n00:28:00.223 --> 00:28:04.003\nan if and then if you have a fall back,\nthat if has an else.\n\n457\n00:28:04.003 --> 00:28:08.710\nSo, just be careful, logics hard,\nI'm not going to lie to you.\n\n458\n00:28:08.710 --> 00:28:12.982\nIt takes a little bit of thought and\nI just wanted to bring this kind\n\n459\n00:28:12.982 --> 00:28:16.960\nof the attention, to the forethought,\nif we make this a 4.\n\n460\n00:28:16.960 --> 00:28:19.600\nRight, if we run through this,\nis greater than 0?\n\n461\n00:28:19.600 --> 00:28:20.480\nYeah, should print 0.\n\n462\n00:28:20.480 --> 00:28:21.820\nIs it greater than 0 and 3?\n\n463\n00:28:21.820 --> 00:28:22.880\nYep, should print 3.\n\n464\n00:28:22.880 --> 00:28:25.452\nIs it greater than 0, 3 and 5?\n\n465\n00:28:25.452 --> 00:28:27.510\nNo, so it should print not 5.\n\n466\n00:28:28.550 --> 00:28:33.360\nSo, if we say python 3 ifs and\nit's 0, 3, not 5.\n\n467\n00:28:33.360 --> 00:28:37.610\nBut that is a lot clearer,\nright, these ifs, ifs ifs.\n\n468\n00:28:37.610 --> 00:28:44.600\nThis is a lot clearer, then adding the\ndeeply nested one, even though this logic\n\n469\n00:28:44.600 --> 00:28:50.260\nis a little more complex than a single\nfavorite number is greater than 3 or 5.\n\n470\n00:28:50.260 --> 00:28:54.500\nSo it's 6 of 1 half dozen\nof the other kind of thing.\n\n471\n00:28:54.500 --> 00:28:58.730\nSo there's multiple ways to do this,\nI tend to like.\n\n472\n00:28:58.730 --> 00:29:01.650\nAs little indentation,\nas far as blocks go.\n\n473\n00:29:01.650 --> 00:29:07.240\nJust be aware that if you have if, elif,\nand else, only one of those is gonna run.\n\n474\n00:29:07.240 --> 00:29:12.180\nIf I have an if, if, if, all three of\nthose could run, two of those could run.\n\n475\n00:29:12.180 --> 00:29:14.301\nIt depends on your respective logic,\n\n476\n00:29:14.301 --> 00:29:18.100\nand how you want your program to\nexecute the pure from top to bottom.\n\n477\n00:29:18.100 --> 00:29:21.890\n&gt;&gt; And if you had your favorite\nnumber variable as -1,\n\n478\n00:29:21.890 --> 00:29:24.590\nthen it will just print not 5.\n\n479\n00:29:24.590 --> 00:29:25.580\n&gt;&gt; Let's try it out.\n\n480\n00:29:25.580 --> 00:29:29.400\nI think you're right Vonne but\nstranger things do happen.\n\n481\n00:29:29.400 --> 00:29:34.230\nLet's clear python 3, if's and not 5.\n\n482\n00:29:34.230 --> 00:29:35.250\nSo why is that the case?\n\n483\n00:29:35.250 --> 00:29:36.640\nBecause it's not greater than 0.\n\n484\n00:29:36.640 --> 00:29:38.364\nIt's not greater than 0 and 3.\n\n485\n00:29:38.364 --> 00:29:40.880\nNot greater than 0, 3 and 5.\n\n486\n00:29:41.880 --> 00:29:46.820\nIt only hits this else and well if\nyou wanted to change that behavior,\n\n487\n00:29:46.820 --> 00:29:48.380\nchange this else to a different if.\n\n488\n00:29:49.720 --> 00:29:54.440\nOtherwise, this else will always\nrun if this if doesn't run.\n\n489\n00:29:54.440 --> 00:29:55.220\nAnd I'll tell you what.\n\n490\n00:29:55.220 --> 00:29:58.530\nIfs, elif's and\nelse seem like such a simple thing.\n\n491\n00:29:58.530 --> 00:30:02.235\nBut as you start talking about them,\nwell, there's a lot to this.\n\n492\n00:30:02.235 --> 00:30:04.170\nDon't worry,\nmost things are fairly simple.\n\n493\n00:30:04.170 --> 00:30:07.030\nI just wanted to show you a few edge\ncases that I've seen people get\n\n494\n00:30:07.030 --> 00:30:08.700\nkinda hung up on.\n\n495\n00:30:08.700 --> 00:30:10.830\nThen you're like, this is weird, I don't.\n\n496\n00:30:10.830 --> 00:30:13.127\nThis is, I don't like this.\n\n497\n00:30:13.127 --> 00:30:17.120\nAnd for the most part you're gonna\nhave stuff like if-like sheets.\n\n498\n00:30:17.120 --> 00:30:21.760\nIt's gonna be very, very simple, easy to\nreason about, and mutually exclusive.\n\n499\n00:30:21.760 --> 00:30:26.773\nIt's only after a while that you start\ngetting more complicated things, as such.\n\n500\n00:30:26.773 --> 00:30:31.227\nBut once you get there, you'll probably\nhave a little better understanding of\n\n501\n00:30:31.227 --> 00:30:34.430\nlogic combinations that will\nallow you to move forward.\n\n502\n00:30:34.430 --> 00:30:36.408\nSo there you go Von.\n\n503\n00:30:36.408 --> 00:30:41.330\nIf, elif, else's and hopefully we're\nstarting to build our repertoire\n\n504\n00:30:41.330 --> 00:30:46.260\nare tooltip so to speak so we can actually\nbuild something of moderate complexity.\n\n505\n00:30:46.260 --> 00:30:48.890\n&gt;&gt; And something that stuck\nwith me in all of that,\n\n506\n00:30:48.890 --> 00:30:51.660\nwas a little tough on the old noggin,\n\n507\n00:30:51.660 --> 00:30:57.440\nis I'd rather you say you start off\nwriting it like so in our fundamentals.\n\n508\n00:30:57.440 --> 00:31:00.770\nGet used to this and then maybe when\nyou get a little bit more eloquent,\n\n509\n00:31:00.770 --> 00:31:03.097\nyou could say, instead of like,\nI like cheese.\n\n510\n00:31:03.097 --> 00:31:05.780\nYou could just be like,\nI would prefer a nice gruyere.\n\n511\n00:31:05.780 --> 00:31:10.150\nThen you get a little bit more\nsophisticated as you learn to\n\n512\n00:31:10.150 --> 00:31:11.890\ntalk in this language.\n\n513\n00:31:11.890 --> 00:31:12.450\n&gt;&gt; Yep.\n\n514\n00:31:12.450 --> 00:31:14.430\n&gt;&gt; I like that, so\nthat really stuck with me.\n\n515\n00:31:14.430 --> 00:31:17.930\nSo, I hope it sticks with you, but we're\ngonna go ahead and get on out of here.\n\n516\n00:31:17.930 --> 00:31:21.090\nSo, signing off are Devpro.tv,\nI've been your host Vonne Smith.\n\n517\n00:31:21.090 --> 00:31:21.880\n&gt;&gt; And I'm Justin Dennison.\n\n518\n00:31:21.880 --> 00:31:23.009\n&gt;&gt; We'll see you soon.\n\n519\n00:31:23.009 --> 00:31:32.728\n[MUSIC]\n\n",
          "vimeoId": "267461637"
        }
      ],
      "title": "Comparisons, Conditions and Control"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Vonne explore lists a little further. Moreover, Justin discusses the use cases and considerations when using lists as well as a couple of gotchas that may crop up.",
          "length": "1669",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-1-1-lists-050218-PGM.00_36_23_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-1-1-lists-050218-PGM.00_36_23_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-1-1-lists-050218-PGM.00_36_23_29.Still001-sm.jpg",
          "title": "Lists",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.012 --> 00:00:16.888\nHello everyone and welcome back to\nanother exciting edition of Dev ProTV.\n\n3\n00:00:16.888 --> 00:00:18.162\nI'm your host Vonne Smith and\n\n4\n00:00:18.162 --> 00:00:21.026\nwe're continuing through our\nprogramming fundamental series.\n\n5\n00:00:21.026 --> 00:00:24.628\nIn this episode we're gonna be talking\nabout lists, and here to help us is Mr.\n\n6\n00:00:24.628 --> 00:00:26.690\nJustin Dennison, how are you today?\n&gt;&gt; Hi,\n\n7\n00:00:26.690 --> 00:00:28.420\nI'm doing fantastic Vonne, how are you?\n\n8\n00:00:28.420 --> 00:00:34.090\nI'm doing pretty good and\nI have a nice to do list for me.\n\n9\n00:00:34.090 --> 00:00:38.370\nYou wanna help me with that one?\n&gt;&gt; Well they're similar but\n\n10\n00:00:38.370 --> 00:00:42.210\na list is a more complicated structure or\ndata type,\n\n11\n00:00:42.210 --> 00:00:46.460\nreally it's a structure that we've\nseen before with Booleans, strings.\n\n12\n00:00:46.460 --> 00:00:51.200\nActually, strings are similar, but\nstrings abstract away things, but\n\n13\n00:00:51.200 --> 00:00:54.870\na list, well, when we think about\nto-do lists, like Vonne has,\n\n14\n00:00:54.870 --> 00:00:59.440\nwe think about a collection of\nthings I need to do, right?\n\n15\n00:00:59.440 --> 00:01:01.407\nNotice, I remove the word list.\n\n16\n00:01:01.407 --> 00:01:06.440\nAlso our to-do lists\nare typically ordered, right?\n\n17\n00:01:06.440 --> 00:01:10.400\nNow, if you use really complicated\nprograms you can rearrange them.\n\n18\n00:01:10.400 --> 00:01:13.580\nIf you use pencil and paper like I do,\nthen you have to number them so\n\n19\n00:01:13.580 --> 00:01:17.050\nthey have an order but\nthey have an explicit order.\n\n20\n00:01:17.050 --> 00:01:19.430\nYou go, I'm gonna do this first and\nthis second and this third,\n\n21\n00:01:19.430 --> 00:01:20.510\nthis fourth, this fifth.\n\n22\n00:01:20.510 --> 00:01:23.230\nAnd it's funny because you say that,\n\n23\n00:01:23.230 --> 00:01:26.080\nthat's essentially what\nthe structure helps us mimic.\n\n24\n00:01:26.080 --> 00:01:29.340\nI don't know if I'm gonna be able to\nbuild anything today that'll help you.\n\n25\n00:01:29.340 --> 00:01:30.240\n&gt;&gt; Well it's funny because\n\n26\n00:01:30.240 --> 00:01:34.240\nI was just trying to make a really bad\njoke of like, I have a to do list.\n\n27\n00:01:34.240 --> 00:01:39.410\nThen I'm like, wait that's actually a\ngreat intro that I didn't even mean to do.\n\n28\n00:01:39.410 --> 00:01:44.390\nYou are correct that they are a collection\nof items and they go together.\n\n29\n00:01:44.390 --> 00:01:46.730\nThey are my to-do list, and\n\n30\n00:01:46.730 --> 00:01:51.870\nthey usually do have some priority in\na sense of, this is really the first one.\n\n31\n00:01:51.870 --> 00:01:54.960\nLike you said, I usually kind of list them\nout and go back and renumber them, but\n\n32\n00:01:54.960 --> 00:02:00.380\nI actually never kind of thought that\nmy silly joke would be an accurate\n\n33\n00:02:00.380 --> 00:02:02.770\ndescription of what you're talking about.\n&gt;&gt; [LAUGH]\n\n34\n00:02:02.770 --> 00:02:04.080\n&gt;&gt; Well, maybe we lucked up, or\n\n35\n00:02:04.080 --> 00:02:09.030\nmaybe it was just fate but\nwe are going to be looking at lists and\n\n36\n00:02:09.030 --> 00:02:10.220\nwe are going to be looking at some\n\n37\n00:02:11.300 --> 00:02:15.950\nbasic kind of operations that we can have\nwith lists but also kind of intrinsic.\n\n38\n00:02:15.950 --> 00:02:19.000\nNow, if you have seen the string\nepisode hopefully you\n\n39\n00:02:19.000 --> 00:02:22.060\nshould have if you\nare watching things in order.\n\n40\n00:02:22.060 --> 00:02:27.540\nYou're gonna see that lists and\nstrings kinda have similar feels\n\n41\n00:02:27.540 --> 00:02:32.850\nwith some regards, but they're gonna be\nsome things that, up until this point,\n\n42\n00:02:32.850 --> 00:02:35.280\nwouldn't have made a whole lot of sense\nbut now with the list they would.\n\n43\n00:02:35.280 --> 00:02:37.020\nNow, we're explorer these.\n\n44\n00:02:37.020 --> 00:02:39.700\nI'm a big proponent of well,\ndoing exactly that.\n\n45\n00:02:39.700 --> 00:02:42.600\nActually typing, seeing how things work.\n\n46\n00:02:42.600 --> 00:02:45.520\nSeeing if we can break it and\nthen we try to learn and\n\n47\n00:02:45.520 --> 00:02:47.980\ninternalize those errors that making up.\n\n48\n00:02:47.980 --> 00:02:51.560\nSo, le's go and take a look at the screen\nhere and I just have my editor open.\n\n49\n00:02:51.560 --> 00:02:57.030\nActually this is already open enough\nprogramming fundamentals folder,\n\n50\n00:02:57.030 --> 00:03:00.140\nand we made this in a previous episode,\nand it's just a folder.\n\n51\n00:03:00.140 --> 00:03:01.410\nGood news now.\n\n52\n00:03:01.410 --> 00:03:03.360\nGetting started right?\n\n53\n00:03:03.360 --> 00:03:07.980\nMake a folder and then we're going\nto a file open and find the folder.\n\n54\n00:03:07.980 --> 00:03:11.790\nSo mine is on my desktop and\njust click the folder, hit open.\n\n55\n00:03:11.790 --> 00:03:14.030\nNow if you are on an alternative\nplatform other than mac,\n\n56\n00:03:14.030 --> 00:03:17.500\nI think there is actually\nan open folder option, and\n\n57\n00:03:17.500 --> 00:03:21.350\nthen that way we have the folder and\nall the respective files within it.\n\n58\n00:03:21.350 --> 00:03:24.170\nIn addition to I'm in the terminal or\n\n59\n00:03:24.170 --> 00:03:28.030\nkind of our command line interface,\ninside of that folder.\n\n60\n00:03:28.030 --> 00:03:32.890\nSo, if I look at my present working\ndirectory then there we go, okay.\n\n61\n00:03:32.890 --> 00:03:35.470\nI call it present working directory,\nI think it's actually\n\n62\n00:03:35.470 --> 00:03:38.900\ncurrent working directory but,\nI think it's where am I presently.\n\n63\n00:03:40.100 --> 00:03:43.520\nSo, we're good to go and\nif I hit LS then we have that single file.\n\n64\n00:03:43.520 --> 00:03:47.510\nWe've been working in this file but,\nsince we're already in the terminal\n\n65\n00:03:47.510 --> 00:03:51.690\nlet's create a file where we're gonna do\na little bit of our list exploration.\n\n66\n00:03:51.690 --> 00:03:55.250\nAnd this is one of the things\nthat I really like about Python\n\n67\n00:03:55.250 --> 00:03:57.610\nis I can just create a file, right.\n\n68\n00:03:57.610 --> 00:04:00.410\nKind of get started and get going.\n\n69\n00:04:00.410 --> 00:04:04.330\nMake sure that you have the .py there,\nbecause if you don't,\n\n70\n00:04:06.100 --> 00:04:08.810\nthen your editor is not going\nto be as helpful as it could be.\n\n71\n00:04:08.810 --> 00:04:11.890\nAnd then we're going to touch this\ninto existence and there we go, and\n\n72\n00:04:11.890 --> 00:04:15.530\nwe're going to hop back over here,\nand boom there we go.\n\n73\n00:04:15.530 --> 00:04:18.760\nNow, that same pop up is\ngoing to always come up and\n\n74\n00:04:18.760 --> 00:04:23.460\nI'm just exiting it out, and it's funny,\nwe went behind my head as I exited out.\n\n75\n00:04:23.460 --> 00:04:25.540\nLet's see if I can reproduce that.\n\n76\n00:04:25.540 --> 00:04:29.510\nSo boop, there it is and\nso you can install.\n\n77\n00:04:29.510 --> 00:04:30.420\nIt'll be helpful.\n\n78\n00:04:30.420 --> 00:04:34.440\nWe're gonna leave that out just to\nkeep things ordinarily focused,\n\n79\n00:04:34.440 --> 00:04:36.310\ninstead of letting our editor do too much.\n\n80\n00:04:36.310 --> 00:04:38.740\nAll right, so enough of that.\n\n81\n00:04:38.740 --> 00:04:40.330\nLet's talk about lists.\n\n82\n00:04:40.330 --> 00:04:42.580\nActually Vonne, you know what?\n\n83\n00:04:44.150 --> 00:04:46.170\nYou talked about that to-do list.\n\n84\n00:04:46.170 --> 00:04:50.702\nAre there any things that maybe we could\njust create a list of that you have to do?\n\n85\n00:04:50.702 --> 00:04:52.810\n&gt;&gt; [LAUGH] You say that, and\n\n86\n00:04:52.810 --> 00:04:56.240\nI don't want to start getting sad.\n\n87\n00:04:56.240 --> 00:05:00.820\nSo can we do an ingredients or something?\n&gt;&gt; Yeah, sure, sure.\n\n88\n00:05:00.820 --> 00:05:02.090\n&gt;&gt; Because I'm now I'm thinking about,\n\n89\n00:05:02.090 --> 00:05:04.280\nokay, don't think about\nall those big things.\n\n90\n00:05:04.280 --> 00:05:06.180\nHow about what you gonna have for\ndinner tonight?\n\n91\n00:05:06.180 --> 00:05:07.980\nWe're gonna have pizza.\n\n92\n00:05:07.980 --> 00:05:11.280\nSo pizza has like cheese right.\n\n93\n00:05:11.280 --> 00:05:12.420\nSo are you asking for\n\n94\n00:05:12.420 --> 00:05:13.585\na lot of things about pizza.\n&gt;&gt; So\n\n95\n00:05:13.585 --> 00:05:15.730\nyeah,I'm letting you\ndetermine what's going on.\n\n96\n00:05:15.730 --> 00:05:18.568\n&gt;&gt; Okay awesone,so we're gonna go with\n\n97\n00:05:18.568 --> 00:05:21.945\ncheese,let's go the pepperoni.\n&gt;&gt; All right.\n\n98\n00:05:21.945 --> 00:05:24.518\n&gt;&gt; And I like it with some mushrooms.\n\n99\n00:05:24.518 --> 00:05:25.106\n&gt;&gt; All right.\n\n100\n00:05:25.106 --> 00:05:25.898\n&gt;&gt; Pepperoni and\n\n101\n00:05:25.898 --> 00:05:27.750\nmushrooms pizza is my favorite.\n\n102\n00:05:27.750 --> 00:05:29.890\nKeep going?\n&gt;&gt; Give me one more.\n\n103\n00:05:29.890 --> 00:05:30.830\n&gt;&gt; I will go\n\n104\n00:05:30.830 --> 00:05:31.970\nwith onions.\n\n105\n00:05:31.970 --> 00:05:34.165\n&gt;&gt; All right.\n\n106\n00:05:34.165 --> 00:05:34.920\n&gt;&gt; [LAUGH]\n&gt;&gt; Or maybe-\n\n107\n00:05:34.920 --> 00:05:35.470\n&gt;&gt; You can switch it.\n\n108\n00:05:35.470 --> 00:05:36.590\n&gt;&gt; We could switch that out for\n\n109\n00:05:36.590 --> 00:05:39.030\ngarlic or something,\nI don't know, onions, eh.\n\n110\n00:05:39.030 --> 00:05:42.070\nAnyway, so\nI know I was doing a lot there, right?\n\n111\n00:05:42.070 --> 00:05:43.900\nVonne and\nI were having a little bit of fun but\n\n112\n00:05:43.900 --> 00:05:47.570\nI wanted to show you this\nWe've actually created a list.\n\n113\n00:05:47.570 --> 00:05:49.150\nLet me zoom out just a little bit.\n\n114\n00:05:49.150 --> 00:05:50.200\nWe've created a list here.\n\n115\n00:05:50.200 --> 00:05:54.930\nI said variable name,\nassign that to, square bracket and\n\n116\n00:05:54.930 --> 00:05:57.480\nthen I have what are called elements.\n\n117\n00:05:57.480 --> 00:05:59.490\nEach one of these is an element.\n\n118\n00:05:59.490 --> 00:06:02.210\nSo the first element,\nthe first element, and\n\n119\n00:06:02.210 --> 00:06:05.830\nyou'll see why I do that here shortly,\nis cheese.\n\n120\n00:06:05.830 --> 00:06:07.200\nThe second element is pepperoni.\n\n121\n00:06:07.200 --> 00:06:09.590\nNotice we have a comma between those.\n\n122\n00:06:09.590 --> 00:06:10.690\nThese are the strings.\n\n123\n00:06:11.770 --> 00:06:13.730\nThat's all you have to do.\n\n124\n00:06:13.730 --> 00:06:17.500\nNow there's nothing special about\nhaving them all on one line, and\n\n125\n00:06:17.500 --> 00:06:20.610\nactually I kinda showed my\nhand just a little while ago.\n\n126\n00:06:20.610 --> 00:06:24.240\nBecause if I had a long list\nthat I need to hard code,\n\n127\n00:06:24.240 --> 00:06:26.820\nI typically don't put them all on one\nline cuz they are harder to read.\n\n128\n00:06:27.840 --> 00:06:30.890\nWe'll come back and address that but\nwe have the third element and\n\n129\n00:06:30.890 --> 00:06:32.920\nthe fourth element, and\nthen we end it with a square bracket.\n\n130\n00:06:32.920 --> 00:06:37.250\nEverything's got commas between it and\nwe're good to go, all right.\n\n131\n00:06:37.250 --> 00:06:41.040\nNow that, technically is all you\nneed to do to create a list.\n\n132\n00:06:41.040 --> 00:06:44.060\nIt's done, that's it.\n&gt;&gt; And\n\n133\n00:06:44.060 --> 00:06:46.920\nyou use the quotes because\nwe're talking about text.\n\n134\n00:06:46.920 --> 00:06:51.720\nThose are strings but\nit's not just reserved for\n\n135\n00:06:51.720 --> 00:06:55.230\ntext element, or strings,\nwe should say, you could have numbers.\n\n136\n00:06:55.230 --> 00:06:58.900\nSo, if you could just have four of five,\ntwo and six,\n\n137\n00:06:58.900 --> 00:07:02.180\nwhich are the room number or,\nsomething to that effect.\n\n138\n00:07:02.180 --> 00:07:06.476\nSo, and can it be combination of different\ndata types, some text, some numbers, and\n\n139\n00:07:06.476 --> 00:07:10.228\nwhat, he's just giving me a look like,\nam I stealing it thunder [CROSSTALK]\n\n140\n00:07:10.228 --> 00:07:12.660\n&gt;&gt; You're not stealing because I just,\n\n141\n00:07:12.660 --> 00:07:18.520\nremember this phrase we'll comeback to it,\n[INAUDIBLE] doesn't mean you should.\n\n142\n00:07:18.520 --> 00:07:21.800\nWe'll actually see, what is this?\n\n143\n00:07:21.800 --> 00:07:22.430\nCan we do this?\n\n144\n00:07:22.430 --> 00:07:24.490\nActually let's create some numbers here.\n\n145\n00:07:24.490 --> 00:07:31.600\nLet's create some numbers and I know 7,\nand I like 2 and 3 and 5 and 11.\n\n146\n00:07:31.600 --> 00:07:34.500\nAll right, so\nthese are actually prime numbers.\n\n147\n00:07:34.500 --> 00:07:37.450\nIt doesn't matter whether they are,\nyou could do 1, 2, 3, 4, 5.\n\n148\n00:07:37.450 --> 00:07:43.090\nSo notice I constructed these exactly\nthe same other than I have numbers in it.\n\n149\n00:07:43.090 --> 00:07:45.860\nWell this is a construction on the list,\nall right.\n\n150\n00:07:45.860 --> 00:07:49.714\nThat's all you need,\nnumbers equals square bracket,\n\n151\n00:07:49.714 --> 00:07:54.634\na number comma, another number comma,\nso on and so forth, all right.\n\n152\n00:07:54.634 --> 00:07:58.916\nNow, one final thing,\n\n153\n00:07:58.916 --> 00:08:05.346\nlet's say word and Let's do this.\n\n154\n00:08:05.346 --> 00:08:08.180\nC-A-T, well, that's cat, right?\n\n155\n00:08:08.180 --> 00:08:13.256\nIf you kind of squint,\nI have an order, it's C-A-T.\n\n156\n00:08:13.256 --> 00:08:17.320\nAnd it's a collection of letters\nthat form a word, right?\n\n157\n00:08:18.390 --> 00:08:22.180\nWell, that's kind of odd cuz it almost\nlooks like a string, and if you kind of\n\n158\n00:08:22.180 --> 00:08:27.370\nthink of it that way, it will help you\nkeep all of this in order, all right.\n\n159\n00:08:27.370 --> 00:08:31.760\nSo, we have our three lists, for now,\nlet's just go and print these out and\n\n160\n00:08:31.760 --> 00:08:34.810\nsee how they're printed\nout in any special way.\n\n161\n00:08:34.810 --> 00:08:37.610\nAnd so we're going to print ingredients.\n\n162\n00:08:37.610 --> 00:08:42.160\nAnd all that was, just FYI,\nyour editor's being helpful, I typed ing,\n\n163\n00:08:42.160 --> 00:08:43.880\nand it said, do you mean ingredients?\n\n164\n00:08:43.880 --> 00:08:45.840\nAnd I just hit Enter, all right?\n\n165\n00:08:45.840 --> 00:08:51.650\nAnd then I am gonna print numbers,\nlike so, numbers.\n\n166\n00:08:51.650 --> 00:08:54.510\nAnd I'm gonna print word, all right?\n\n167\n00:08:54.510 --> 00:08:58.790\nSo we're come over here,\nwe're gonna run and boom.\n\n168\n00:08:58.790 --> 00:09:03.360\nIt is going to print those out\nalmost exactly like they're defined.\n\n169\n00:09:03.360 --> 00:09:08.530\nSo there is nothing like I got you\nat any moment that could happen so,\n\n170\n00:09:08.530 --> 00:09:14.266\njust wanted to show you that but see now\nin the there is this classical look on\n\n171\n00:09:14.266 --> 00:09:19.520\nVonne's face, and see what she get.\n&gt;&gt; Just a quick thing back on the editor,\n\n172\n00:09:19.520 --> 00:09:21.760\ncuz you said basically the autocomplete,\n\n173\n00:09:21.760 --> 00:09:26.580\njust like a couple of different programs\ndo that for you, again, me, Excel.\n\n174\n00:09:26.580 --> 00:09:30.900\nBut I also notice that once you start\ntyping like the word ingredients, or\n\n175\n00:09:30.900 --> 00:09:35.708\nnumbers that it had almost like a little\nicon next to that particular completion,\n\n176\n00:09:35.708 --> 00:09:40.306\nand I'm going to assume the best telling\nyou like what type, that's a named,\n\n177\n00:09:40.306 --> 00:09:42.207\nelement, that's a variable.\n\n178\n00:09:42.207 --> 00:09:46.287\nAnd so maybe those little\ngraphics in front right there,\n\n179\n00:09:46.287 --> 00:09:50.622\nwill give you some indication of like,\nis this a variable and\n\n180\n00:09:50.622 --> 00:09:55.050\nif you kept going,\nmaybe like a different command and stuff.\n\n181\n00:09:55.050 --> 00:09:57.960\nDo you know what I'm trying,\nlike a graphic is indicating something\n\n182\n00:09:57.960 --> 00:10:00.490\nto you.\n&gt;&gt; All right, so I know what you're saying\n\n183\n00:10:00.490 --> 00:10:04.050\nand as your editor comes out of the box,\nI don't think that's the case.\n\n184\n00:10:04.050 --> 00:10:09.930\nWe're gonna test that just to make sure,\nbecause I created a variable called one.\n\n185\n00:10:09.930 --> 00:10:11.410\nAnd just is assigned to the number one.\n\n186\n00:10:11.410 --> 00:10:12.850\nWhich is a number.\n\n187\n00:10:12.850 --> 00:10:17.900\nSo if I type word, notice that this\ngraphic is just an abc, right?\n\n188\n00:10:17.900 --> 00:10:18.780\nWith a box around it.\n\n189\n00:10:18.780 --> 00:10:21.280\nBut if I type one, it is also just an abc.\n\n190\n00:10:21.280 --> 00:10:25.350\nSo it's not gonna tell you what's\nassigned to that variable.\n\n191\n00:10:25.350 --> 00:10:27.490\nIf I'm not mistaken,\nthis is just telling you,\n\n192\n00:10:27.490 --> 00:10:32.530\nthis is a previously established word,\na variable in the text.\n\n193\n00:10:32.530 --> 00:10:36.660\nThe only reason it's doing this is\nbecause it already appears in this file\n\n194\n00:10:36.660 --> 00:10:37.710\none other time.\n\n195\n00:10:37.710 --> 00:10:41.480\nSo it's that indicator.\n&gt;&gt; And it's not specific to variables,\n\n196\n00:10:41.480 --> 00:10:44.870\ncuz we are defining variables.\n\n197\n00:10:44.870 --> 00:10:50.228\nSo it's just like,\nI found another word, somewhere else and\n\n198\n00:10:50.228 --> 00:10:54.600\nif you had that somewhere else and\nlike during a print statement like,\n\n199\n00:10:54.600 --> 00:10:58.570\nyou have won the final price,\nit will find you saw a final as well.\n\n200\n00:10:59.880 --> 00:11:05.570\nSomewhere else that you're typing it, so\nit's not like anything else then like,\n\n201\n00:11:05.570 --> 00:11:09.800\nreally glorified find.\n&gt;&gt; It's a really glorified find like here\n\n202\n00:11:09.800 --> 00:11:13.800\nare similar words at this point, now that\nlittle pop up that comes up in the lower\n\n203\n00:11:13.800 --> 00:11:18.292\nright hand corner whenever we open a file,\nif you install things in your editor and\n\n204\n00:11:18.292 --> 00:11:21.590\ndefinitely get play around with those\nI'm gonna stay away from those.\n\n205\n00:11:21.590 --> 00:11:24.350\nIt will start doing exactly\nlike you're talking about,\n\n206\n00:11:24.350 --> 00:11:27.360\nwhere it will say hey\nthis is probably a list.\n\n207\n00:11:27.360 --> 00:11:29.770\nSometimes they're not the best, but\n\n208\n00:11:29.770 --> 00:11:33.790\nit's a pretty good here's what's going on.\n&gt;&gt; Okay.\n\n209\n00:11:33.790 --> 00:11:35.535\n&gt;&gt; But great, right?\n\n210\n00:11:35.535 --> 00:11:39.080\nVonne's seeing things I just take for\ngranted all the time, so thank you so\n\n211\n00:11:39.080 --> 00:11:40.040\nmuch for that.\n\n212\n00:11:40.040 --> 00:11:45.396\nNow, these actually print not a lot\ndifferently than their defined,\n\n213\n00:11:45.396 --> 00:11:48.046\nand all right, that makes sense.\n\n214\n00:11:48.046 --> 00:11:52.517\nNow, I said we're gonna come back and\nlook at this, because before we move onto\n\n215\n00:11:52.517 --> 00:11:57.052\nanything else, if you had a bunch of these\nin a list it may not be beneficial to have\n\n216\n00:11:57.052 --> 00:12:01.188\nthem all in one line, it may be easier\nto have a different arrangement, so\n\n217\n00:12:01.188 --> 00:12:03.322\nif I come here in front of that quote and\n\n218\n00:12:03.322 --> 00:12:07.540\nI hit enter,\n&gt;&gt; And then I hit enter here and\n\n219\n00:12:07.540 --> 00:12:11.560\nI hit enter in front of each one of\nthese words, our editor will go, okay,\n\n220\n00:12:11.560 --> 00:12:12.460\nI know what you mean.\n\n221\n00:12:12.460 --> 00:12:15.190\nAnd then I'm gonna come here and\nboom, right?\n\n222\n00:12:15.190 --> 00:12:20.420\nNow, I do this because now it almost\nlooks like a top to bottom list,\n\n223\n00:12:20.420 --> 00:12:22.770\nlike check, check,\ncheck or one, two, three.\n\n224\n00:12:22.770 --> 00:12:25.530\nIf I have really long elements, right?\n\n225\n00:12:25.530 --> 00:12:29.013\nLet's say instead of cheese\nthis was goregonzola, and\n\n226\n00:12:29.013 --> 00:12:31.540\nthere's a bunch of other things there.\n\n227\n00:12:32.710 --> 00:12:37.410\nOr, if I have a really long list\nof things, right, my pizza,\n\n228\n00:12:37.410 --> 00:12:40.080\nsometimes I get a little carried away,\nand there's a whole bunch of ingredients.\n\n229\n00:12:41.460 --> 00:12:45.510\nWell, it makes it a little\neasier to reason about.\n\n230\n00:12:45.510 --> 00:12:50.260\nBut, let's go print it one more\ntime before we do anything else.\n\n231\n00:12:50.260 --> 00:12:57.050\nSo, I've done three lists, and\nnotice it doesn't print like you typed it.\n\n232\n00:12:57.050 --> 00:13:01.040\nSo, don't get scared if it doesn't\nprint exactly like you typed it.\n\n233\n00:13:01.040 --> 00:13:06.290\niPhone's going, this is the structure,\nI'm just gonna print it to my screen\n\n234\n00:13:06.290 --> 00:13:10.600\nas I know how to do, and it doesn't\nadd those extra newlines, all right?\n\n235\n00:13:10.600 --> 00:13:13.210\nSo we have our lists here,\nand we know what's in them.\n\n236\n00:13:13.210 --> 00:13:14.810\nI'm gonna leave that there.\n\n237\n00:13:14.810 --> 00:13:19.670\nBut what are some things\nwe can do with lists?\n\n238\n00:13:19.670 --> 00:13:23.370\nWell, we should always try\nwhat we anticipate with\n\n239\n00:13:23.370 --> 00:13:25.440\nsome of these operators that we may have.\n\n240\n00:13:25.440 --> 00:13:30.180\nAll right, so here's our new_list.\n\n241\n00:13:30.180 --> 00:13:33.623\nAnd let's just say that's ingredients +,\n\n242\n00:13:33.623 --> 00:13:38.070\nwe're just gonna try this out,\nthe numbers, all right?\n\n243\n00:13:39.160 --> 00:13:43.030\nNow in this context, this doesn't make\na whole lot of sense cuz I have cheese,\n\n244\n00:13:43.030 --> 00:13:46.180\npepperoni, mushrooms and\nonions, and then number.\n\n245\n00:13:47.210 --> 00:13:49.250\nWhat would you be thinking?\n\n246\n00:13:49.250 --> 00:13:53.550\nWell, I've seen people go,\nwell I want to take cheese and\n\n247\n00:13:53.550 --> 00:13:55.190\nadd the number seven to it.\n\n248\n00:13:55.190 --> 00:13:57.140\nTake pepperoni and\nadd the number two to it.\n\n249\n00:13:58.140 --> 00:14:00.790\nBecause maybe this how\nmany cheeses you have.\n\n250\n00:14:00.790 --> 00:14:04.110\nHow many pepperoni,\ntwo pepperoni big old pepperonies.\n\n251\n00:14:04.110 --> 00:14:06.560\nHow many mushroom and so on and so forth.\n\n252\n00:14:06.560 --> 00:14:09.520\nSo this is reasonable because we've\nseen that the plus sign actually\n\n253\n00:14:09.520 --> 00:14:10.340\nworks with strings.\n\n254\n00:14:10.340 --> 00:14:11.310\nIt works with numbers.\n\n255\n00:14:11.310 --> 00:14:15.610\nIt actually works in a few other places.\n\n256\n00:14:17.710 --> 00:14:19.990\nMaybe this will work.\n\n257\n00:14:19.990 --> 00:14:23.380\nSo let's see if it actually works as such.\n\n258\n00:14:24.560 --> 00:14:26.570\nI'm going to clear this out.\n\n259\n00:14:26.570 --> 00:14:30.680\nAnd I'm gonna say, lists and\nit actually did not fail.\n\n260\n00:14:30.680 --> 00:14:34.370\nBut what did it do?\n\n261\n00:14:34.370 --> 00:14:40.430\nWell, it kinda squished those things\ntogether, we're going back to squish.\n\n262\n00:14:40.430 --> 00:14:41.530\nWell, in our string episode,\n\n263\n00:14:41.530 --> 00:14:44.390\nwe saw that if we have string plus\na string, we get another string,\n\n264\n00:14:44.390 --> 00:14:46.720\nwhere we take the two strings and\nsquish them together into a string.\n\n265\n00:14:48.020 --> 00:14:51.680\nIf I have a list plus a list, take\nthe first list and the second list, and\n\n266\n00:14:51.680 --> 00:14:54.160\nI take all the elements from each,\nand put them in a list.\n\n267\n00:14:54.160 --> 00:14:56.600\nSo I get the same behavior\n\n268\n00:14:56.600 --> 00:14:58.610\nthat I do with a string.\n&gt;&gt; Yeah,\n\n269\n00:14:58.610 --> 00:15:02.520\nit's not taking the first element in this,\nfirst-first, second-second, third, it does\n\n270\n00:15:02.520 --> 00:15:05.950\nnot do that, just like it boom, boom.\n&gt;&gt; Yeah,\n\n271\n00:15:05.950 --> 00:15:09.220\njust smashes them all together\ninto a new list, all right?\n\n272\n00:15:09.220 --> 00:15:11.780\nSo plus works, and as soon as you\nfind that out, you're like, well,\n\n273\n00:15:11.780 --> 00:15:13.360\nI wonder if minus works.\n\n274\n00:15:13.360 --> 00:15:14.490\nLet's find out.\n\n275\n00:15:14.490 --> 00:15:19.440\nAnd I'm gonna reuse this variable,\njust because naming's hard.\n\n276\n00:15:19.440 --> 00:15:25.100\nAnd also to reinforce that you don't have\nto have new variable names every time.\n\n277\n00:15:25.100 --> 00:15:26.250\nIt's probably advisable.\n\n278\n00:15:26.250 --> 00:15:29.360\nI want to say ingredients minus numbers.\n\n279\n00:15:31.500 --> 00:15:34.030\nAll right, so the plus,\nI could think of a scenario,\n\n280\n00:15:34.030 --> 00:15:39.220\nbut looking here you go, no,\nthat doesn't seem right.\n\n281\n00:15:39.220 --> 00:15:41.380\nSomething's weird there.\n\n282\n00:15:41.380 --> 00:15:43.580\nSo I guess we should print that out.\n\n283\n00:15:43.580 --> 00:15:45.662\nGo print new_list.\n\n284\n00:15:45.662 --> 00:15:52.416\nAnd boom, unsupported operand type(s) for\n-: 'list' and 'list'.statistical.\n\n285\n00:15:52.416 --> 00:15:56.332\nIf two list you can't subtract them\nbecause it doesn't really make sense,\n\n286\n00:15:56.332 --> 00:15:56.952\nall right.\n\n287\n00:15:56.952 --> 00:15:58.413\nWhat are you gonna do?\n\n288\n00:15:58.413 --> 00:15:59.652\nSome of you maybe going,\n\n289\n00:15:59.652 --> 00:16:03.500\nwell what if I want to take the elements\nof the second list away from the first?\n\n290\n00:16:04.510 --> 00:16:09.240\nThere might be better ways to\ndo that than a minus sign.\n\n291\n00:16:09.240 --> 00:16:13.020\nAll right so minus doesn't work, but let's\ngo ahead and try the other operators for\n\n292\n00:16:13.020 --> 00:16:14.270\ngiggles.\n\n293\n00:16:14.270 --> 00:16:17.010\nLet's try times, all right?\n\n294\n00:16:17.010 --> 00:16:19.660\nWe're gonna clear this out,\nrerun this, and\n\n295\n00:16:19.660 --> 00:16:23.860\nno, cannot multiply sequence\nby non-int of type list.\n\n296\n00:16:23.860 --> 00:16:28.090\nThat's actually not\nthe unsupported operand types that\n\n297\n00:16:28.090 --> 00:16:29.920\npossibly you're expecting.\n\n298\n00:16:29.920 --> 00:16:32.260\nCan't multiply sequence\nby non-int of type list.\n\n299\n00:16:34.030 --> 00:16:37.660\nWell, that means,\nit means there might be some additional\n\n300\n00:16:37.660 --> 00:16:41.472\nthings that we could try with this one.\n&gt;&gt; Is that saying because you have text\n\n301\n00:16:41.472 --> 00:16:42.220\nand numbers?\n\n302\n00:16:42.220 --> 00:16:47.290\nIf you had a list of number and\na list of numbers, I'm still\n\n303\n00:16:47.290 --> 00:16:52.440\ntrying to figure out any reason\nwhy you would do it this way, but\n\n304\n00:16:54.080 --> 00:16:56.550\nthat's what I feel the error saying to me.\n&gt;&gt; And\n\n305\n00:16:56.550 --> 00:16:58.400\nthat makes perfect sense, all right.\n\n306\n00:16:58.400 --> 00:17:02.870\nWell, so I can't do a number\nin a string and a number,\n\n307\n00:17:02.870 --> 00:17:05.990\nit doesn't, well let's try\nthe numbers times numbers, right?\n\n308\n00:17:05.990 --> 00:17:07.370\nSo like seven times seven.\n\n309\n00:17:07.370 --> 00:17:10.098\nand three times two,\nmaybe it will do something like that.\n\n310\n00:17:10.098 --> 00:17:13.550\nLet's try again, and\nwe're gonna clear out, and\n\n311\n00:17:13.550 --> 00:17:18.520\nwe still got the same thing, but\nthis error does it say unsupported,\n\n312\n00:17:18.520 --> 00:17:23.640\nso multiply must be supported somehow,\nall right?\n\n313\n00:17:23.640 --> 00:17:26.480\nWell, instead of continue to explore,\nI'll just go ahead and tell you.\n\n314\n00:17:26.480 --> 00:17:31.010\nYou put a number on the right,\nyou gonna come over here and\n\n315\n00:17:31.010 --> 00:17:34.480\nrun this and this one.\n\n316\n00:17:34.480 --> 00:17:39.670\nYou get that thing repeated that\nmany times, very similarly,\n\n317\n00:17:39.670 --> 00:17:44.420\nthat we did with strings.\n&gt;&gt; Okay, that makes sense now.\n\n318\n00:17:45.790 --> 00:17:49.930\nAll right, in the sense what\nthey were saying printing.\n\n319\n00:17:49.930 --> 00:17:54.950\nOr use this three times or\ngenerate this three times, or\n\n320\n00:17:54.950 --> 00:17:56.320\nhow many times we want it to be.\n\n321\n00:17:56.320 --> 00:18:00.620\nWhether it's numbers or texts,\nbecause the other side of\n\n322\n00:18:00.620 --> 00:18:05.810\nthe operator is by this many times.\n&gt;&gt; Yeah, you're right, we get this repeat\n\n323\n00:18:05.810 --> 00:18:09.560\nbecause of how that's arranged, but\none just kinda real drill down and\n\n324\n00:18:09.560 --> 00:18:12.040\nmaybe I'm misunderstanding\nin what you're saying.\n\n325\n00:18:12.040 --> 00:18:15.850\nActually have a new list\nthat is a repeat of those,\n\n326\n00:18:15.850 --> 00:18:20.620\nI'm not necessarily just getting\na printout of multiple times.\n\n327\n00:18:20.620 --> 00:18:25.010\nI have a list with those numbers\nrepeated three times in it,\n\n328\n00:18:25.010 --> 00:18:27.100\nevery number repeated three times.\n&gt;&gt; Okay,\n\n329\n00:18:27.100 --> 00:18:30.790\ncuz I was equating in the command but\nit makes sense now.\n\n330\n00:18:30.790 --> 00:18:35.900\nBecause you're saying the variable of\nnew_list is taking that times three and\n\n331\n00:18:35.900 --> 00:18:37.100\nthat is the variable.\n\n332\n00:18:37.100 --> 00:18:39.180\nNot just the parenthesis is just\n\n333\n00:18:39.180 --> 00:18:41.210\nwhatever that particular variable is.\n\n334\n00:18:41.210 --> 00:18:42.200\n&gt;&gt; Yeah.\n&gt;&gt; Okay.\n\n335\n00:18:42.200 --> 00:18:42.710\n&gt;&gt; Yeah, so\n\n336\n00:18:42.710 --> 00:18:46.310\nwe have to be careful there and that's\nsomething that don't happen to all of us.\n\n337\n00:18:46.310 --> 00:18:49.060\nI have a new list and\nI've reused the variable name but\n\n338\n00:18:49.060 --> 00:18:53.580\nit actually has those repeated numbers,\nand if I change this to ingredients,\n\n339\n00:18:53.580 --> 00:18:57.500\nI'll have the repeated ingredients and\n\n340\n00:18:57.500 --> 00:19:00.320\nthis is probably more along\nthe lines of how I like my pizza.\n\n341\n00:19:00.320 --> 00:19:03.650\nCheese, pepperoni,\nmushrooms, nix the onions.\n\n342\n00:19:03.650 --> 00:19:06.460\nCheese, pepperoni,\njust keep throwing it on there, right?\n\n343\n00:19:06.460 --> 00:19:09.828\nNow something I do wanna\ndrive home here is,\n\n344\n00:19:09.828 --> 00:19:17.610\nI wonder if I do three times ingredients?\n\n345\n00:19:17.610 --> 00:19:21.410\nI wonder if that's going to work.\n&gt;&gt; To me, isn't that in math,\n\n346\n00:19:21.410 --> 00:19:23.170\nit doesn't matter what your doing.\n\n347\n00:19:23.170 --> 00:19:29.310\nThe way you just said it makes me think\nwe're going to have an error of some type.\n\n348\n00:19:29.310 --> 00:19:31.180\n&gt;&gt; Well, there's only one way to find out.\n\n349\n00:19:31.180 --> 00:19:32.570\nThat's to try it out.\n\n350\n00:19:32.570 --> 00:19:37.090\nLet's go ahead and\ntry it on three lists, look at that.\n\n351\n00:19:38.180 --> 00:19:40.196\nSo it actually works in this case.\n\n352\n00:19:40.196 --> 00:19:45.690\nThere are times,\nif I'm not mistaken, there are times\n\n353\n00:19:45.690 --> 00:19:49.640\nwhere you will not have what Vaughn's\ntalking about, commutative operations.\n\n354\n00:19:51.060 --> 00:19:53.658\nCommutative means I can switch the order.\n\n355\n00:19:53.658 --> 00:19:55.130\nTwo times five is the same\nas five times two,\n\n356\n00:19:55.130 --> 00:19:57.380\nI end up with the same answer, all right?\n\n357\n00:19:57.380 --> 00:20:01.400\nNow everything saved, whenever you see\nsomething like that always make sure you\n\n358\n00:20:01.400 --> 00:20:06.260\nsave just because you may get unexpected\nresults because you forget to save,\n\n359\n00:20:06.260 --> 00:20:08.260\nand it's actually using the old version.\n\n360\n00:20:08.260 --> 00:20:12.280\nBut, you can actually commute here,\nswitch the order and\n\n361\n00:20:12.280 --> 00:20:15.250\neverything is still good to go.\n\n362\n00:20:15.250 --> 00:20:18.160\nThere are times where that's\nnot necessarily always\n\n363\n00:20:18.160 --> 00:20:20.680\nthe case.\n&gt;&gt; Okay, you threw me a curved ball on\n\n364\n00:20:20.680 --> 00:20:25.360\nthat one because I'm like I feel like I\nhave, I can read Justin's like approach of\n\n365\n00:20:25.360 --> 00:20:29.950\ncertain topic like yep this is\n[INAUDIBLE] are we gonna break in?\n\n366\n00:20:29.950 --> 00:20:33.770\nNo, not to derail you too much like\nwhen you said there are times cuz it\n\n367\n00:20:33.770 --> 00:20:37.800\nthat won't flip it around.\n&gt;&gt; Just for\n\n368\n00:20:37.800 --> 00:20:39.950\nclarity, list will always work.\n\n369\n00:20:39.950 --> 00:20:41.878\nFlipping a list and numbers, right?\n\n370\n00:20:41.878 --> 00:20:45.088\nThree times or three times a list,\nand list times a number,\n\n371\n00:20:45.088 --> 00:20:49.880\nthose will always work.\n&gt;&gt; You're talking outside just list.\n\n372\n00:20:49.880 --> 00:20:53.370\nLike, strings or other various data types,\n\n373\n00:20:53.370 --> 00:20:57.980\nor different places where you're going to\nbe putting in something times somethings.\n\n374\n00:20:57.980 --> 00:21:02.830\nI didn't know if it was just specific for\ndata type that we're talking about\n\n375\n00:21:02.830 --> 00:21:03.690\nright now.\n&gt;&gt; It is.\n\n376\n00:21:03.690 --> 00:21:07.270\nThis works just for the data type, that's\nthe only assertion I'm going to make.\n\n377\n00:21:07.270 --> 00:21:10.625\nThere are times where you flip things\naround you may get weird errors,\n\n378\n00:21:10.625 --> 00:21:16.270\nespecially as you start diving\nin more complex actual types.\n\n379\n00:21:17.520 --> 00:21:21.390\nThe one thing that I am gonna do is\nI'm gonna change that to 3.2 and\n\n380\n00:21:21.390 --> 00:21:25.380\nwe're gonna clear this out, and\nI'm gonna say Python three lists,\n\n381\n00:21:25.380 --> 00:21:28.650\nand cannot multiply sequence\nof non-int by type float.\n\n382\n00:21:30.050 --> 00:21:34.390\nSo notice that chaining this to 3.2,\neven though they're both numbers,\n\n383\n00:21:34.390 --> 00:21:39.240\nit doesn't make sense to have 3 and\n0.2 of the list.\n\n384\n00:21:39.240 --> 00:21:42.500\nSo it has to be whole numbers,\nthey have to be integers.\n\n385\n00:21:42.500 --> 00:21:44.600\nSo that's important to know.\n\n386\n00:21:44.600 --> 00:21:51.800\nNow, kind of our final\noperation is divide, right?\n\n387\n00:21:51.800 --> 00:21:55.140\nLet's try divide,\nthese are our basic calculations.\n\n388\n00:21:55.140 --> 00:21:57.481\nThree divided by the the ingredient.\n\n389\n00:21:57.481 --> 00:22:00.270\nThis doesn't seem like it's gonna\nwork let's see what happens.\n\n390\n00:22:01.370 --> 00:22:04.610\nI'll clear this out Python three list and\n\n391\n00:22:04.610 --> 00:22:07.890\nunsupported operand that's\nactually kinda what I anticipated.\n\n392\n00:22:07.890 --> 00:22:10.260\nWhat if we flip this all right?\n\n393\n00:22:10.260 --> 00:22:15.940\nAnd the reason being is we're just\ntalking about being able to flip\n\n394\n00:22:15.940 --> 00:22:19.000\naddition and\nmultiplication are typically commutative.\n\n395\n00:22:19.000 --> 00:22:21.410\nDivision and subtraction are not.\n\n396\n00:22:21.410 --> 00:22:24.820\nAll right, three minus two is\nnot the same as two minus three.\n\n397\n00:22:24.820 --> 00:22:27.790\nThree plus two is the same\nas two plus three.\n\n398\n00:22:27.790 --> 00:22:31.635\nSo be careful, I'm not here to give you\na whole lesson on like math theory, but\n\n399\n00:22:31.635 --> 00:22:39.230\nalways try to reverse just in case and\nwe still get more or less the same thing.\n\n400\n00:22:39.230 --> 00:22:41.620\nThere's a type mismatch, these don't work.\n\n401\n00:22:43.190 --> 00:22:46.300\nSo it doesn't make any sense\nto have divisions in there.\n\n402\n00:22:46.300 --> 00:22:48.440\nSo we do have multiplication.\n\n403\n00:22:48.440 --> 00:22:55.800\nWe do have addition between lists, and\nwe actually only did list here but since\n\n404\n00:22:55.800 --> 00:23:00.550\nwe've been playing around with numbers,\nwe haven't tried all of our combinations.\n\n405\n00:23:00.550 --> 00:23:01.550\nOne final, no.\n\n406\n00:23:01.550 --> 00:23:02.650\nNot one final.\n\n407\n00:23:02.650 --> 00:23:03.620\nCouple of final things.\n\n408\n00:23:03.620 --> 00:23:06.934\nLet's try ingredients and ingredients, and\n\n409\n00:23:06.934 --> 00:23:10.220\nnope, list out of our list\nthat doesn't make any sense.\n\n410\n00:23:10.220 --> 00:23:13.110\nAnd what if we multiply\n\n411\n00:23:16.460 --> 00:23:20.690\nlist by list, I think yeah, bad,\ncan't do that, we already tried that.\n\n412\n00:23:20.690 --> 00:23:23.930\nBut, what if we changed this\nto ingredients plus a number?\n\n413\n00:23:23.930 --> 00:23:25.548\nWe didn't actually this with plus.\n\n414\n00:23:25.548 --> 00:23:29.510\nSo ingredients plus three,\nor I don't think we did.\n\n415\n00:23:29.510 --> 00:23:34.260\nIf we did, then I blacked out during that\npart of the show, and there we go, I'm\n\n416\n00:23:34.260 --> 00:23:40.230\nonly able to concatenate a list to a list,\nso only plus works with lists and lists.\n\n417\n00:23:40.230 --> 00:23:42.950\nAnd that's because you're like\nlemme go back and check that.\n\n418\n00:23:42.950 --> 00:23:45.910\nNow I'm trying to emulate what I would\ndo if I'm learning something new.\n\n419\n00:23:45.910 --> 00:23:50.260\nAs I learn new features, I'm gonna go\ntry to find the edge cases, all right?\n\n420\n00:23:50.260 --> 00:23:52.442\nWell can I do plus with\na number in the list.\n\n421\n00:23:52.442 --> 00:23:54.863\nCan I do plus with a list in a list?\n\n422\n00:23:54.863 --> 00:23:55.751\nYeah I can.\n\n423\n00:23:55.751 --> 00:23:57.024\nWhat about multiply?\n\n424\n00:23:57.024 --> 00:23:58.472\nOkay.\n\n425\n00:23:58.472 --> 00:24:01.028\nAnd then seeing, kind of internalizing.\n\n426\n00:24:01.028 --> 00:24:02.443\nYou can see we have a lot of errors.\n\n427\n00:24:02.443 --> 00:24:05.814\nTypically type errors are,\nhey, you have a mismatch,\n\n428\n00:24:05.814 --> 00:24:08.880\nthis is an integer and\na list, you can't do that.\n\n429\n00:24:08.880 --> 00:24:13.063\nThat operand error is also a TypeError.\n\n430\n00:24:13.063 --> 00:24:18.530\nNow, we have a lot more to talk about\nlists, but we're almost at a break point.\n\n431\n00:24:18.530 --> 00:24:20.910\nLooks like we're gonna have\nto come back with a part two.\n\n432\n00:24:20.910 --> 00:24:25.089\nIt happens from time to time, but\nI wanna show you one final thing.\n\n433\n00:24:25.089 --> 00:24:30.363\nIf you have a really long lists,\nas you move that bracket, right?\n\n434\n00:24:30.363 --> 00:24:34.090\nAnd accidentally we're typing it in,\nand this gets removed somehow.\n\n435\n00:24:34.090 --> 00:24:40.930\nIf we now try to run this,\nand oops, numbers.\n\n436\n00:24:40.930 --> 00:24:42.910\nI wanted to show you this because\nif you're following along,\n\n437\n00:24:42.910 --> 00:24:45.840\nyou may encounter this because you forgot\na bracket, or you accidentally deleted it,\n\n438\n00:24:45.840 --> 00:24:47.270\nor something like that.\n\n439\n00:24:47.270 --> 00:24:48.370\nIt prints the numbers.\n\n440\n00:24:50.510 --> 00:24:51.970\nThat, what?\n\n441\n00:24:51.970 --> 00:24:54.030\nIt's a SyntaxError, invalid syntax.\n\n442\n00:24:54.030 --> 00:24:54.860\nYeah, it is.\n\n443\n00:24:56.270 --> 00:24:58.380\nBut it actually prints to the next line.\n\n444\n00:24:58.380 --> 00:25:01.970\nAlways remember, if you have a syntax\nerror and it's really confusing,\n\n445\n00:25:01.970 --> 00:25:06.240\nlook one to two lines above where\nit's telling you the syntax error is.\n\n446\n00:25:06.240 --> 00:25:08.910\nYou go okay, well this is an empty line,\nand here's onions.\n\n447\n00:25:08.910 --> 00:25:13.730\nWell this is, you know what, there's\nsupposed to be an ending bracket there.\n\n448\n00:25:13.730 --> 00:25:16.280\nAnd that will help you.\n\n449\n00:25:17.360 --> 00:25:19.230\nFinding those closing brackets, right?\n\n450\n00:25:19.230 --> 00:25:24.480\nThose pairs of shoes,\nsometimes that is difficult to do.\n\n451\n00:25:24.480 --> 00:25:28.170\nJust remember, a syntax error doesn't make\nsense, look one to two lines above it.\n\n452\n00:25:28.170 --> 00:25:30.190\nSometimes you've gotta\ngo a little bit further.\n\n453\n00:25:30.190 --> 00:25:32.740\nBut if you're following along,\nyou may encounter that, so\n\n454\n00:25:32.740 --> 00:25:35.350\nI wanted to show you that before\nwe come back with our part two.\n\n455\n00:25:35.350 --> 00:25:39.680\nCuz there's a whole lot more with lists.\n&gt;&gt; And when you showed me that error,\n\n456\n00:25:39.680 --> 00:25:41.780\nI was trying to think,\nwhy'd they pick the s?\n\n457\n00:25:41.780 --> 00:25:48.520\nYou think it's because that's the last\nthing before the equal sign, and the equal\n\n458\n00:25:48.520 --> 00:25:52.790\nsign is where it's defining a variable, so\nmaybe that's the first thing it found, but\n\n459\n00:25:52.790 --> 00:25:58.020\nyou can't have an equals in a list?\n&gt;&gt; I was thinking about it.\n\n460\n00:25:58.020 --> 00:25:58.943\n&gt;&gt; My stretch in this one.\n\n461\n00:25:58.943 --> 00:26:00.383\n&gt;&gt; In a previous episode,\n\n462\n00:26:00.383 --> 00:26:04.199\nwe looked that sometimes this like,\nit's four spaces, and\n\n463\n00:26:04.199 --> 00:26:06.900\nthen this actually breaks that, right?\n\n464\n00:26:06.900 --> 00:26:09.920\nNumber is six characters?\n&gt;&gt; That's\n\n465\n00:26:09.920 --> 00:26:11.550\nexactly what I was thinking honestly.\n\n466\n00:26:11.550 --> 00:26:14.639\nCuz that was like, no, that's not\nthe same number of characters but\n\n467\n00:26:14.639 --> 00:26:17.210\nthere's an assigner, or\nan assignment with the equal.\n\n468\n00:26:17.210 --> 00:26:21.110\nSo maybe that's the thing that is saying,\nnope, don't understand,\n\n469\n00:26:21.110 --> 00:26:23.452\nlet me go in front of that, there's the s.\n\n470\n00:26:23.452 --> 00:26:24.922\nThat's where you're breaking.\n\n471\n00:26:24.922 --> 00:26:27.710\nI might just be making some\nof the stuff up honestly.\n\n472\n00:26:27.710 --> 00:26:29.940\n&gt;&gt; That makes sense to me because there\n\n473\n00:26:29.940 --> 00:26:33.960\nwill not be equal signs inside of a list\nunless they're in strings, at which point,\n\n474\n00:26:33.960 --> 00:26:34.790\nthey're just text.\n\n475\n00:26:34.790 --> 00:26:37.210\nYou will not be assigning\ninside of a list like that.\n\n476\n00:26:37.210 --> 00:26:41.160\nSo I suspect that maybe going hey, this\ndoesn't make any sense, you can't do this.\n\n477\n00:26:41.160 --> 00:26:46.950\nAnd then, the pairing is actually carrying\non left bracket, and right bracket.\n\n478\n00:26:46.950 --> 00:26:50.010\nIt may actually be looking further\nalong for that other bracket.\n\n479\n00:26:50.010 --> 00:26:51.377\nAnd it goes, hey, there's an equal sign.\n\n480\n00:26:51.377 --> 00:26:53.936\nI've gotta stop right here cuz this\ndoesn't make sense at this point.\n\n481\n00:26:53.936 --> 00:27:00.410\nI'm not 100% sure, but\nyour reasoning seems sound to me.\n\n482\n00:27:00.410 --> 00:27:03.670\nAnd sometimes I put these\nthings on in my mind.\n\n483\n00:27:03.670 --> 00:27:06.840\nI'm not always the best about\ndigging super deep about why.\n\n484\n00:27:06.840 --> 00:27:09.910\nI just say hey, I know how to fix that,\n\n485\n00:27:09.910 --> 00:27:14.670\nand that's all she wrote.\n&gt;&gt; Yeah, I make things up in my mind as to\n\n486\n00:27:14.670 --> 00:27:17.700\nwhy that's actually happening, and I don't\nknow if that's actually true or not.\n\n487\n00:27:17.700 --> 00:27:20.548\nBut it makes me feel like\nI think I know something.\n\n488\n00:27:20.548 --> 00:27:25.304\n[LAUGH] So I'm gonna go with it too even\nif it's not totally supported either.\n\n489\n00:27:25.304 --> 00:27:28.802\nBut like you said, we are done, we've\ncrossed a few things off of our list,\n\n490\n00:27:28.802 --> 00:27:30.223\nabout talking about list, and\n\n491\n00:27:30.223 --> 00:27:32.950\nwe're gonna come back with\na part two in just a little bit.\n\n492\n00:27:32.950 --> 00:27:34.743\nBut we're gonna go ahead,\nand wrap this one up.\n\n493\n00:27:34.743 --> 00:27:37.236\nSigning off for DevProTV,\nI've been your host Vonne Smith.\n\n494\n00:27:37.236 --> 00:27:38.120\n&gt;&gt; And I'm Justin Dennison.\n\n495\n00:27:38.120 --> 00:27:38.852\n&gt;&gt; We'll see you soon.\n\n496\n00:27:38.852 --> 00:27:42.558\n[SOUND]\n\n",
          "vimeoId": "268662214"
        },
        {
          "description": "In this episode, Justin and Vonne continue their look into lists. Justin demonstrates the ability to change lists as well as some common methods that can be used with lists.",
          "length": "2177",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-1-2-lists_pt_2-050218-PGM.00_41_49_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-1-2-lists_pt_2-050218-PGM.00_41_49_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-1-2-lists_pt_2-050218-PGM.00_41_49_17.Still001-sm.jpg",
          "title": "Lists Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.010 --> 00:00:16.316\nHello, everyone, and welcome back to\nanother exciting edition of DEVProTV.\n\n3\n00:00:16.316 --> 00:00:20.669\nI am your host Vonne Smith, and we are\ncoming back at you with part two in our\n\n4\n00:00:20.669 --> 00:00:23.284\nprogramming fundamental series on lists.\n\n5\n00:00:23.284 --> 00:00:24.842\nAnd here to help us again, is Mr.\n\n6\n00:00:24.842 --> 00:00:27.591\nJustin Dennison, how are you?\n&gt;&gt; I am doing fantastic Vonne,\n\n7\n00:00:27.591 --> 00:00:30.385\nhow are you?\n&gt;&gt; I think I am still doing pretty okay.\n\n8\n00:00:30.385 --> 00:00:33.865\nI am getting a little hungry\ntalking about pizza over here.\n\n9\n00:00:33.865 --> 00:00:36.701\n[LAUGH] If you have not\nchecked out our part one,\n\n10\n00:00:36.701 --> 00:00:41.378\ndefinitely do that because we started\ntalking about ingredients of pizza.\n\n11\n00:00:41.378 --> 00:00:44.200\nAnd that's what we use as\nan example of our list.\n\n12\n00:00:44.200 --> 00:00:47.718\nSo that's the only thing I'm\nthinking about right now [LAUGH].\n\n13\n00:00:47.718 --> 00:00:52.250\nAnd besides you were using big math terms\nover there on our previous episode.\n\n14\n00:00:52.250 --> 00:00:56.674\nBut, you're here to talk about some more\nterms and things to deal with lists,\n\n15\n00:00:56.674 --> 00:00:59.231\nso where do we wanna start?\n&gt;&gt; Well we left off\n\n16\n00:00:59.231 --> 00:01:03.090\nwith actually seeing that we\ncould do a plus with two lists.\n\n17\n00:01:03.090 --> 00:01:06.265\nWe can actually do multiply with\na number and a list as long as\n\n18\n00:01:06.265 --> 00:01:10.535\nthat number is an integer, all the other\noperations don't really make sense.\n\n19\n00:01:10.535 --> 00:01:12.350\nSo, where do we go from here?\n\n20\n00:01:12.350 --> 00:01:15.170\nWhat else can we do with lists?\n\n21\n00:01:15.170 --> 00:01:20.030\nWell, I wonder, I got,\nI have the ingredients, right?\n\n22\n00:01:20.030 --> 00:01:22.795\nI have that list of ingredients and\nI want,\n\n23\n00:01:22.795 --> 00:01:24.800\nwhat's the second ingredient to pizza?\n\n24\n00:01:24.800 --> 00:01:30.821\nI don't know, that's right,\nprogrammatically, I wouldn't know.\n\n25\n00:01:30.821 --> 00:01:34.061\nBut with a list because they're ordered,\n\n26\n00:01:34.061 --> 00:01:39.820\nI should be able to effectively\nquery against that idea, right?\n\n27\n00:01:39.820 --> 00:01:40.340\nSo let's go ahead and\n\n28\n00:01:40.340 --> 00:01:45.150\ntake a look at the screen here, and\nlet's get that second ingredient, okay?\n\n29\n00:01:45.150 --> 00:01:47.720\nSo I'm gonna, temporarily,\nI'm gonna highlight this.\n\n30\n00:01:47.720 --> 00:01:53.600\nCmd/ and that's just gonna comment that\nout, so it'll temporarily make it go away.\n\n31\n00:01:53.600 --> 00:01:56.579\nI'm always gonna leave these just so\nwe have a reference of what the previous\n\n32\n00:01:57.690 --> 00:02:00.650\ningredients numbers in Word are,\nall right?\n\n33\n00:02:00.650 --> 00:02:08.375\nSo from here, let's talk about\naccessing elements and slicing.\n\n34\n00:02:08.375 --> 00:02:12.574\nAll right, now, oddly enough,\nslicing is a technical Python term, and\n\n35\n00:02:12.574 --> 00:02:14.840\nwe're also talking about pizza.\n\n36\n00:02:14.840 --> 00:02:16.871\nIt's like it came together perfectly,\nI don't know.\n\n37\n00:02:16.871 --> 00:02:19.360\nSo let's look at the second ingredient,\nall right?\n\n38\n00:02:19.360 --> 00:02:25.120\nSo I'm gonna grab this and put it in,\nwell second ingredient as a variable.\n\n39\n00:02:25.120 --> 00:02:28.780\nI'm gonna say ingredients, and\nyou go well I want number [2].\n\n40\n00:02:28.780 --> 00:02:30.480\nSo we're using a square bracket there.\n\n41\n00:02:30.480 --> 00:02:32.520\nThis is where sometimes it\ngets confusing for people.\n\n42\n00:02:32.520 --> 00:02:34.508\nThey are like well wait a minute,\nsquare brackets?\n\n43\n00:02:34.508 --> 00:02:38.087\nLike you can make a list with\nsquare brackets, yes, but\n\n44\n00:02:38.087 --> 00:02:42.066\nyou also access elements using\nthe square bracket notation.\n\n45\n00:02:42.066 --> 00:02:46.960\nSquare bracket, what position,\nand then square bracket, right?\n\n46\n00:02:46.960 --> 00:02:49.810\nThis is actually very similar to strings.\n\n47\n00:02:49.810 --> 00:02:55.500\nAs a matter of fact, it's exactly\nthe same as strings, all right?\n\n48\n00:02:55.500 --> 00:02:58.360\nSo here's our second ingredient,\nall right, good deal.\n\n49\n00:02:58.360 --> 00:02:59.865\nLet's go ahead and print that out.\n\n50\n00:02:59.865 --> 00:03:03.000\nSo print(second_ingredient).\n\n51\n00:03:03.000 --> 00:03:07.550\nAnd we're gonna hop over here, and\nwe're gonna clear out, python3 lists.\n\n52\n00:03:07.550 --> 00:03:14.899\nAnd mushrooms,\nthat's not what I anticipated.\n\n53\n00:03:14.899 --> 00:03:17.878\nAnd well, full disclosure,\nif you watched the string episode,\n\n54\n00:03:17.878 --> 00:03:19.405\nyou kinda know where I'm going.\n\n55\n00:03:19.405 --> 00:03:24.200\nBut It's kind of odd, nonetheless.\n&gt;&gt; I\n\n56\n00:03:24.200 --> 00:03:29.070\nwas remembering our episode here and\nI'm like, and we talked about slicing, or\n\n57\n00:03:29.070 --> 00:03:31.320\nslicers and slicing when we\ntalked about strings, as well.\n\n58\n00:03:31.320 --> 00:03:34.194\nSo I'm like,\nthis is all sounding very familiar to me.\n\n59\n00:03:34.194 --> 00:03:38.319\nAnd even when you were referencing\nin that first part of our list,\n\n60\n00:03:38.319 --> 00:03:42.220\nyou said it's like the first, I'm like.\n\n61\n00:03:42.220 --> 00:03:47.902\nHe's doing that whole like zero length\nindex number thing of string characters.\n\n62\n00:03:47.902 --> 00:03:51.262\nWow, that was a very technical way\nof explaining what we were doing.\n\n63\n00:03:51.262 --> 00:03:51.948\n[LAUGH]\n&gt;&gt; Tell you what,\n\n64\n00:03:51.948 --> 00:03:53.468\ncouldn't have said it better myself.\n&gt;&gt; [LAUGH]\n\n65\n00:03:53.468 --> 00:03:55.390\n&gt;&gt; But what Vonne's actually saying,\n\n66\n00:03:55.390 --> 00:03:56.449\nand you're right.\n\n67\n00:03:56.449 --> 00:04:00.930\nSometimes using the terminology is\ndifficult just to keep things kind of\n\n68\n00:04:00.930 --> 00:04:03.670\nclear but without getting too technical.\n\n69\n00:04:03.670 --> 00:04:08.550\nIt's crazy, but what Vonne's\ntalking about is this is index 0,\n\n70\n00:04:08.550 --> 00:04:12.290\nthis is index 1.\n\n71\n00:04:12.290 --> 00:04:16.297\nThis is index 2,\n\n72\n00:04:16.297 --> 00:04:21.110\nand this is index 3.\n\n73\n00:04:21.110 --> 00:04:24.850\nNotice I have 0, 1, 2, 3,\nthat is the respective position.\n\n74\n00:04:24.850 --> 00:04:26.464\nSo when I ask for the second,\n\n75\n00:04:26.464 --> 00:04:30.102\nit actually gave me the third\nbecause it started counting at 0.\n\n76\n00:04:30.102 --> 00:04:32.350\nSo we have to be careful there.\n\n77\n00:04:32.350 --> 00:04:36.320\nBecause pretty much every collection that\nyou're gonna interact with in Python and\n\n78\n00:04:36.320 --> 00:04:38.490\nvarious other places\nare going to be 0 indexed.\n\n79\n00:04:38.490 --> 00:04:43.491\nThat's not always true, but for the most\npart, it is going to be 0 indexed.\n\n80\n00:04:43.491 --> 00:04:49.510\nNotice my index is up to 3, but\nI have 4 things in this list.\n\n81\n00:04:49.510 --> 00:04:56.128\nWell, just to kinda play off this,\nit seems very similar to strings.\n\n82\n00:04:56.128 --> 00:05:01.880\nWell, what of ingredients_length,\nor number of ingredients?\n\n83\n00:05:01.880 --> 00:05:05.279\nActually, let's call this\nnumber_of_ingredients.\n\n84\n00:05:06.959 --> 00:05:10.021\nThen I can say len(ingredients), and\n\n85\n00:05:10.021 --> 00:05:14.520\nthis is very similar to\nhow it works with strings.\n\n86\n00:05:14.520 --> 00:05:20.170\nAnd if we just print that out,\nnumber_of_ingredients, and we rerun this.\n\n87\n00:05:21.900 --> 00:05:26.766\nThen notice we have 4, and that's\nbecause I have 4 total elements, but\n\n88\n00:05:26.766 --> 00:05:28.815\nthe last index is actually 3.\n\n89\n00:05:28.815 --> 00:05:35.440\nIf I try to change this to 4,\nright, as the length.\n\n90\n00:05:35.440 --> 00:05:40.170\nThen we're gonna get an index error,\nlist index out of range, all right?\n\n91\n00:05:40.170 --> 00:05:43.634\nSo, let's actually make this\nlegitimately the second ingredient.\n\n92\n00:05:43.634 --> 00:05:47.157\nSo that would be an index of 1,\nbecause it would be 0 and then 1.\n\n93\n00:05:47.157 --> 00:05:50.918\nAnd so we hand the second ingredient,\nwe have the number of ingredients, but,\n\n94\n00:05:50.918 --> 00:05:52.200\nyou know what?\n\n95\n00:05:52.200 --> 00:05:53.440\nI'm thinking, I don't like onions.\n\n96\n00:05:54.440 --> 00:05:57.500\nI really just want,\nI want Justin's ingredients.\n\n97\n00:05:57.500 --> 00:06:01.640\nSo I want all those other ingredients,\nexcept not the onions.\n\n98\n00:06:03.020 --> 00:06:06.767\nSo there's a couple of ways\nthat I could accomplish that.\n\n99\n00:06:06.767 --> 00:06:13.213\nWe can change the element,\nwe can delete the element or,\n\n100\n00:06:13.213 --> 00:06:18.060\nwe could slice up the element, all right?\n\n101\n00:06:18.060 --> 00:06:19.650\nNow, I'm going to show\nyou a couple things.\n\n102\n00:06:19.650 --> 00:06:22.707\nLet's change the element.\n\n103\n00:06:22.707 --> 00:06:25.024\nAll right, so ingredients, and\n\n104\n00:06:25.024 --> 00:06:29.340\nthis is one of those things where\nit's gonna get a little odd.\n\n105\n00:06:29.340 --> 00:06:34.129\nI know that mushrooms, or excuse me,\nonions, is at the index of 3,\n\n106\n00:06:34.129 --> 00:06:36.290\nwhich is the fourth position.\n\n107\n00:06:36.290 --> 00:06:40.270\nAnd I'm going to change that to,\nmore cheese.\n\n108\n00:06:40.270 --> 00:06:42.685\nNotice how I have this on the left side.\n\n109\n00:06:42.685 --> 00:06:46.889\nI'm gonna show you this in strings\nbecause strings don't allow this.\n\n110\n00:06:46.889 --> 00:06:50.890\nThis is specific to lists.\n\n111\n00:06:50.890 --> 00:06:54.910\nI can access the element set\nit equal to a new element.\n\n112\n00:06:55.990 --> 00:07:01.130\nBut notice I don't actually get a new\nvariable, I just have the old variable.\n\n113\n00:07:01.130 --> 00:07:07.210\nI'm going to print out ingredients\nlike so, and here we go.\n\n114\n00:07:07.210 --> 00:07:13.020\nAnd I'm gonna [SOUND], python3, that is\nnot what I wanted to do, python3 lists.\n\n115\n00:07:13.020 --> 00:07:15.810\nAnd notice I have cheese,\npepperoni, mushrooms, onions.\n\n116\n00:07:15.810 --> 00:07:18.040\nBut here I have cheese, pepperoni,\nmushrooms, more cheese.\n\n117\n00:07:18.040 --> 00:07:22.850\nThose are the exact same variable name,\nand it's not a reuse of a variable name.\n\n118\n00:07:22.850 --> 00:07:26.960\nI've actually modified the list itself.\n\n119\n00:07:26.960 --> 00:07:30.730\nI will never have onions in this\nlist again, unless I go back and\n\n120\n00:07:30.730 --> 00:07:32.460\nchange it back.\n\n121\n00:07:32.460 --> 00:07:39.300\nThis can be [SOUND] kind of odd to think\nabout, I've actually mutated the list.\n\n122\n00:07:39.300 --> 00:07:45.560\nLists are mutable, not silence,\nbut able to be mutated.\n\n123\n00:07:45.560 --> 00:07:49.630\nBy large, you can do this,\nI wouldn't actually do this though,\n\n124\n00:07:49.630 --> 00:07:53.260\nit makes a little hard to reason about,\nat least early on.\n\n125\n00:07:53.260 --> 00:07:57.202\n&gt;&gt; Okay, I got a slight?\n\n126\n00:07:57.202 --> 00:08:01.244\nCan you switch back over?\n\n127\n00:08:01.244 --> 00:08:04.739\nAnd at this line 29 and 30 of the editor,\n\n128\n00:08:04.739 --> 00:08:10.640\nthis says print ingredients, but\nback up point, do you mind moving up?\n\n129\n00:08:10.640 --> 00:08:14.626\nOkay, there on line 12,\nit's print ingredients.\n\n130\n00:08:14.626 --> 00:08:18.495\nSo it's only, cuz it printed it\nwith onions the first time, and\n\n131\n00:08:18.495 --> 00:08:21.660\nthen it printed it with more\ncheese the second time.\n\n132\n00:08:21.660 --> 00:08:23.534\nIs it because of where\nyou are on the code?\n\n133\n00:08:23.534 --> 00:08:27.752\nI changed it at this point and\nany time going forward,\n\n134\n00:08:27.752 --> 00:08:32.273\nnot the ingredients that was\ncalled upon the first time.\n\n135\n00:08:32.273 --> 00:08:35.174\nThe second time is different, but\n\n136\n00:08:35.174 --> 00:08:39.670\nthe first time still exists as onions?\n&gt;&gt; Yeah, you're exactly correct.\n\n137\n00:08:39.670 --> 00:08:43.090\nSo, what happens is it kinda\nruns from top to bottom, right?\n\n138\n00:08:43.090 --> 00:08:47.830\nSo that first ingredients that we see\nhere is actually how we defined it.\n\n139\n00:08:47.830 --> 00:08:50.330\nIt's with onions and everything, and\n\n140\n00:08:50.330 --> 00:08:54.160\nas we keep going, we're just bopping\nalong, and then we say, you know what?\n\n141\n00:08:54.160 --> 00:08:56.324\nI want to change ingredients,\n\n142\n00:08:56.324 --> 00:09:01.329\nI want to change the element at index\n3 to more cheese instead of onion.\n\n143\n00:09:01.329 --> 00:09:04.531\nWhat happens is onion goes,\nI'm not part of that list any more.\n\n144\n00:09:04.531 --> 00:09:06.003\n&gt;&gt; At this point in the code.\n\n145\n00:09:06.003 --> 00:09:08.327\n&gt;&gt; This exact point in time,\n\n146\n00:09:08.327 --> 00:09:11.714\nfrom here on out it will not be onions.\n\n147\n00:09:11.714 --> 00:09:15.856\nBut up until this point, up until line 29,\n\n148\n00:09:15.856 --> 00:09:19.570\ningredients was still had onions in it.\n\n149\n00:09:21.370 --> 00:09:25.960\nAnd what we're discussing right now is\nexactly the reason I think that mutation\n\n150\n00:09:25.960 --> 00:09:29.300\nof lists make things weird for people.\n\n151\n00:09:29.300 --> 00:09:32.340\nAll right, so you're like, what is it?\n\n152\n00:09:32.340 --> 00:09:33.400\nI changed something.\n\n153\n00:09:33.400 --> 00:09:34.370\nWhen did it change?\n\n154\n00:09:34.370 --> 00:09:35.230\nWhere did it change?\n\n155\n00:09:35.230 --> 00:09:36.040\nHow did it change?\n\n156\n00:09:36.040 --> 00:09:36.560\nWho changed it?\n\n157\n00:09:36.560 --> 00:09:40.495\nThere's so many questions that come\nup by changing it like this that when\n\n158\n00:09:40.495 --> 00:09:44.567\nyou're first starting out, I would\nprobably not make changes like this.\n\n159\n00:09:44.567 --> 00:09:46.845\n&gt;&gt; Yeah, cuz at first I'm like okay,\n\n160\n00:09:46.845 --> 00:09:50.340\nthat's kinda cool in the sense\nof you could change on the fly.\n\n161\n00:09:50.340 --> 00:09:55.090\nIt has that flexibility, cuz maybe in\n\n162\n00:09:55.090 --> 00:09:59.980\nsome strange kind of outlier case of I get\nto this point, but at the end of the game,\n\n163\n00:09:59.980 --> 00:10:03.880\nI just wanna change this one, just for\nthis one time, but never again.\n\n164\n00:10:03.880 --> 00:10:08.522\nI'll go ahead and\nmodify that particular list.\n\n165\n00:10:08.522 --> 00:10:13.083\nBut, like you're saying, now you're\nputting it somewhere that's so deep in it\n\n166\n00:10:13.083 --> 00:10:17.850\nthat it might get kind of confusing,\nof like, I don't understand this.\n\n167\n00:10:17.850 --> 00:10:21.410\nI'm also putting it to like inline style\nsheets versus global style sheets.\n\n168\n00:10:21.410 --> 00:10:23.320\nAnd that will wreck your day.\n\n169\n00:10:23.320 --> 00:10:24.934\nWhy is this not working?\n\n170\n00:10:24.934 --> 00:10:29.560\nThere's some weird thing that's\nattached to it that's overriding it.\n\n171\n00:10:29.560 --> 00:10:33.690\nBut I really want it to\napply at the global level.\n\n172\n00:10:33.690 --> 00:10:35.249\nSo that's what I'm thinking of.\n\n173\n00:10:35.249 --> 00:10:36.255\nIt's like yeah!\n\n174\n00:10:36.255 --> 00:10:37.633\nMm, I don't know about that one.\n\n175\n00:10:37.633 --> 00:10:40.016\n[LAUGH]\n&gt;&gt; It's worse when you're working with\n\n176\n00:10:40.016 --> 00:10:43.010\npeople and they make a change somewhere\nin the code base that's very large.\n\n177\n00:10:43.010 --> 00:10:43.994\nAnd then you don't know about it.\n\n178\n00:10:43.994 --> 00:10:45.564\nAnd then you're like, wait a minute,\n\n179\n00:10:45.564 --> 00:10:48.130\nthere used to be onions in\nthis list of ingredients.\n\n180\n00:10:48.130 --> 00:10:50.574\nAnd if you've ever got your\norder wrong from a pizza joint,\n\n181\n00:10:50.574 --> 00:10:52.240\nyou know this is bad, right?\n\n182\n00:10:52.240 --> 00:10:53.734\nYou anticipated onions, there's no onions.\n\n183\n00:10:53.734 --> 00:10:55.250\nMaybe you wanted onions and\nthere wasn't, it's bad.\n\n184\n00:10:55.250 --> 00:10:59.350\nYou can do this and it's perfectly okay.\n\n185\n00:11:00.380 --> 00:11:04.930\nI would probably stay away from it at\nleast initially because you're gonna go,\n\n186\n00:11:04.930 --> 00:11:06.100\nI don't know.\n\n187\n00:11:06.100 --> 00:11:09.890\nI'm having trouble understanding\nwhat's going on with my list.\n\n188\n00:11:09.890 --> 00:11:11.000\n&gt;&gt; And just like you said,\n\n189\n00:11:11.000 --> 00:11:15.790\njust because you can do it\ndoesn't mean you should do it.\n\n190\n00:11:15.790 --> 00:11:18.790\nAnd don't get in a habit of it,\nbecause later down the road,\n\n191\n00:11:18.790 --> 00:11:23.220\nit will wreck your day, and\nprobably somebody else's day.\n\n192\n00:11:23.220 --> 00:11:30.438\nBecause it's also maybe that's the kind of\nconformity, or the you shouldn't do this,\n\n193\n00:11:30.438 --> 00:11:36.712\nwe highly suggest you don't do it this\nway in this coding, just don't do it.\n\n194\n00:11:36.712 --> 00:11:38.136\n[LAUGH]\n&gt;&gt; And to some extent,\n\n195\n00:11:38.136 --> 00:11:41.118\nfull disclosure, this is a little\nbit of a personal bias of mine,\n\n196\n00:11:41.118 --> 00:11:44.060\nI found that mutation makes things\nreally hard to reason about.\n\n197\n00:11:45.520 --> 00:11:48.060\nIf you're perfectly okay\nwith reasoning about it.\n\n198\n00:11:48.060 --> 00:11:49.750\nTotally, do it, right?\n\n199\n00:11:49.750 --> 00:11:53.440\nYour team may do it, if you're\nworking on a team, you may have to.\n\n200\n00:11:53.440 --> 00:11:57.580\nBut it already exists, but when you're\nfirst starting out, if you can avoid it,\n\n201\n00:11:57.580 --> 00:12:01.584\ntry to avoid it.\n&gt;&gt; Okay, and I'm gonna full disclosure,\n\n202\n00:12:01.584 --> 00:12:06.486\nin the last episode when you said\nmutable or I was like, silence,\n\n203\n00:12:06.486 --> 00:12:09.238\nwhen you said no, it's not silence.\n\n204\n00:12:09.238 --> 00:12:14.094\nThat's because between the episodes like,\nyou mean mutate, I thought you meant\n\n205\n00:12:14.094 --> 00:12:18.100\nlike making it silent or hushing it or\nmaking it go away for a little bit.\n\n206\n00:12:18.100 --> 00:12:19.705\nNo, you were talking\nabout changing the lists.\n\n207\n00:12:19.705 --> 00:12:23.700\nSo in case anybody else cought that,\nor didn't catch that.\n\n208\n00:12:24.980 --> 00:12:25.700\nI didn't get it.\n\n209\n00:12:25.700 --> 00:12:27.525\n[LAUGH]\n&gt;&gt; Well, that's all right,\n\n210\n00:12:27.525 --> 00:12:31.187\nbecause context does make a huge\ndifference when you're using words that\n\n211\n00:12:31.187 --> 00:12:33.444\nare spelled the same and\nsound very similar.\n\n212\n00:12:33.444 --> 00:12:37.731\nAlong those same lines with changing\nthis though, I'm gonna comment this out,\n\n213\n00:12:37.731 --> 00:12:39.820\nI don't want that to happen.\n\n214\n00:12:39.820 --> 00:12:45.370\nBut I am gonna do something\ndel ingredients[3].\n\n215\n00:12:45.370 --> 00:12:46.460\nNotice that it turns purple.\n\n216\n00:12:48.610 --> 00:12:49.897\nThis actually says delete.\n\n217\n00:12:49.897 --> 00:12:53.490\nDelete this thing, all right?\n\n218\n00:12:53.490 --> 00:12:55.760\nLet's go back, let's rerun it.\n\n219\n00:12:55.760 --> 00:12:59.030\nYou actually have to type\nstuff appropriately, and\n\n220\n00:12:59.030 --> 00:13:01.170\nnotice onions is no longer there.\n\n221\n00:13:01.170 --> 00:13:02.470\nI've deleted that element.\n\n222\n00:13:03.750 --> 00:13:07.193\nI would argue this is very\nsimilar to reassigning it.\n\n223\n00:13:07.193 --> 00:13:09.980\nIt has changed the original list.\n\n224\n00:13:09.980 --> 00:13:13.600\nAgain, along the same lines,\ndon't necessarily do this.\n\n225\n00:13:13.600 --> 00:13:18.781\nWhat I would suggest is instead of\nchanging ingredients, is create\n\n226\n00:13:18.781 --> 00:13:24.580\njustin_ingredients, where we\nwant just a part of those.\n\n227\n00:13:24.580 --> 00:13:29.210\nWe want a little slice,\nwe want a piece of it, all right?\n\n228\n00:13:29.210 --> 00:13:29.940\nHow are we gonna do that?\n\n229\n00:13:29.940 --> 00:13:32.090\nWe're gonna say ingredients.\n\n230\n00:13:32.090 --> 00:13:33.667\nAnd we can do a few things.\n\n231\n00:13:33.667 --> 00:13:37.959\nIf you've seen the string episode, there's\nprobably, I'm not gonna go quite as depth\n\n232\n00:13:37.959 --> 00:13:41.660\nbecause slices work very similar\nthat they do to strings.\n\n233\n00:13:41.660 --> 00:13:49.670\nI want from the 0 element, and I want\nall the way up to 3, and that's a 3.\n\n234\n00:13:49.670 --> 00:13:50.860\nBut that right hand one.\n\n235\n00:13:50.860 --> 00:13:52.180\nThis three right here.\n\n236\n00:13:52.180 --> 00:13:53.070\nThat one's not included.\n\n237\n00:13:53.070 --> 00:13:57.598\nWhat that means is I'm gonna get zero,\none, two but not three.\n\n238\n00:13:57.598 --> 00:14:00.950\nAll right, so I'm gonna grab this slice.\n\n239\n00:14:00.950 --> 00:14:06.100\nThis syntax works exactly the same,\nso give me the zero of the element.\n\n240\n00:14:06.100 --> 00:14:11.168\nThe one, the two but\nnot the three, all right?\n\n241\n00:14:11.168 --> 00:14:14.716\nAnd if we come back over here,\npython3 lists,\n\n242\n00:14:14.716 --> 00:14:20.050\nyou actually have to print these out for\nus to see, that's important.\n\n243\n00:14:22.400 --> 00:14:26.260\nLet's clear that out and\nrerun this, and now I have cheese,\n\n244\n00:14:26.260 --> 00:14:27.080\npepperoni, and mushrooms.\n\n245\n00:14:27.080 --> 00:14:30.894\nI get the same result, but guess what?\n\n246\n00:14:30.894 --> 00:14:33.279\nIf anywhere else I want to use\nthe full list of ingredients,\n\n247\n00:14:33.279 --> 00:14:35.290\nI still have those available to me.\n\n248\n00:14:35.290 --> 00:14:38.240\nI just have effectively a subset or\n\n249\n00:14:38.240 --> 00:14:43.130\na subset copy of the ingredients\nthat are 0 through 3.\n\n250\n00:14:43.130 --> 00:14:51.230\nNow, likewise if I wanted to grab all of\nthem, right, if I wanted a full copy?\n\n251\n00:14:51.230 --> 00:14:52.820\nAnd I could just put the slice here.\n\n252\n00:14:52.820 --> 00:14:58.060\nIf I wanted to start at 1 and go to the\nend, right, let's say I don't want cheese.\n\n253\n00:14:58.060 --> 00:15:00.861\nAnd well, if you've watched any of my\nepisodes, you know that that is not true.\n\n254\n00:15:00.861 --> 00:15:05.509\nBut if, so be it, then I'm now\nstarted at 1, and give me everything,\n\n255\n00:15:05.509 --> 00:15:07.140\nbecause I left that off.\n\n256\n00:15:09.240 --> 00:15:12.930\nOr, originally what we had\ninstead of putting the zero,\n\n257\n00:15:12.930 --> 00:15:17.880\nthe zeros imply, so we can go here and\nwe get cheese, pepperoni and\n\n258\n00:15:17.880 --> 00:15:20.732\nmushrooms just like we did before\nwith leaving the zero out.\n\n259\n00:15:20.732 --> 00:15:23.700\nIf we're starting out,\nI would always be explicit.\n\n260\n00:15:23.700 --> 00:15:24.970\nWhat index are you starting with?\n\n261\n00:15:24.970 --> 00:15:26.880\nWhat index are you ending with?\n\n262\n00:15:26.880 --> 00:15:30.050\nRemember, the right hand\nindex is not included.\n\n263\n00:15:30.050 --> 00:15:32.910\nAnd then finally there's\nactually another one.\n\n264\n00:15:32.910 --> 00:15:37.030\nI'm gonna go from zero to three but\nI'm gonna go by two.\n\n265\n00:15:38.290 --> 00:15:41.018\nStart, stop, step,\nthose are the three things.\n\n266\n00:15:41.018 --> 00:15:45.230\nWhere am I starting, where am I going and\nhow am I getting there?\n\n267\n00:15:45.230 --> 00:15:48.078\nThose are the three kind\nof slice parameters.\n\n268\n00:15:48.078 --> 00:15:52.420\nI go here, clear this out, and\nboom, I get cheese and mushrooms.\n\n269\n00:15:52.420 --> 00:15:52.930\nWhy?\n\n270\n00:15:52.930 --> 00:15:57.116\nStarted at zero, but\nI'm going to go to mushrooms and\n\n271\n00:15:57.116 --> 00:16:01.126\nthen there's actually\nnothing else beyond that.\n\n272\n00:16:01.126 --> 00:16:03.973\nSo it just gives me cheese and mushrooms.\n\n273\n00:16:03.973 --> 00:16:04.727\nAll right.\n\n274\n00:16:04.727 --> 00:16:12.312\nSlicing works exactly like\nit does in strings and\n\n275\n00:16:12.312 --> 00:16:16.710\nit's preferable for me.\n\n276\n00:16:16.710 --> 00:16:18.490\nI find it to be preferable.\n\n277\n00:16:18.490 --> 00:16:22.116\nNow one thing you can do\njust to show you you can\n\n278\n00:16:22.116 --> 00:16:25.470\nis what if I do something like 2, right?\n\n279\n00:16:27.620 --> 00:16:33.150\nAnd I said that equal to,\nwell what if I want both not 2?\n\n280\n00:16:33.150 --> 00:16:35.540\nExcuse me, 1, I want 0 and 1 to\n\n281\n00:16:38.490 --> 00:16:44.020\nbe set equal to something else like\ncheese, more cheese or bleu cheese.\n\n282\n00:16:45.270 --> 00:16:47.640\nBleu cheese.\n\n283\n00:16:47.640 --> 00:16:50.890\nWell if I could slice can I do that\nbecause I could not do this with string so\n\n284\n00:16:50.890 --> 00:16:53.960\nmaybe I can do this with\nlists because I can do this,\n\n285\n00:16:53.960 --> 00:16:56.670\nlet us see if it actually works.\n\n286\n00:16:56.670 --> 00:16:59.640\nAnd I meant for\nthis to be Justin ingredients.\n\n287\n00:17:01.230 --> 00:17:05.665\nAnd I am going to grab this,\nthat was just a command shift and\n\n288\n00:17:05.665 --> 00:17:10.036\nI hit the right key,\nit would be Ctrl+Shift+Right key.\n\n289\n00:17:10.036 --> 00:17:11.510\nAnd I'm gonna paste that.\n\n290\n00:17:12.850 --> 00:17:14.340\nAnd let's see what happens.\n\n291\n00:17:15.790 --> 00:17:16.370\nAnd boom.\n\n292\n00:17:17.780 --> 00:17:19.220\nThat's kinda odd.\n\n293\n00:17:19.220 --> 00:17:20.890\nThat's actually a weird behavior.\n\n294\n00:17:20.890 --> 00:17:22.731\nActually, let's clear that out.\n\n295\n00:17:22.731 --> 00:17:23.350\nRerun it.\n\n296\n00:17:23.350 --> 00:17:24.498\nAnd what did I get?\n\n297\n00:17:24.498 --> 00:17:27.973\nBleu cheese.\n\n298\n00:17:29.030 --> 00:17:31.940\nWell, it got rid of cheese and pepperoni.\n\n299\n00:17:31.940 --> 00:17:34.030\nAll right.\n\n300\n00:17:34.030 --> 00:17:37.970\nAnd it kept mushrooms but\nthere's no onions and why is that?\n\n301\n00:17:37.970 --> 00:17:39.930\nBecause it was already a slice.\n\n302\n00:17:39.930 --> 00:17:44.040\nSo, what did it do?\n\n303\n00:17:44.040 --> 00:17:45.631\nWell, let's get a rid of this.\n\n304\n00:17:47.506 --> 00:17:48.120\nRerun it.\n\n305\n00:17:48.120 --> 00:17:51.213\nThis is actually gonna\nchange it a little bit.\n\n306\n00:17:51.213 --> 00:17:52.630\nAnd so I had cheese pepperoni.\n\n307\n00:17:53.700 --> 00:17:56.840\nThat's exactly what I would\nhave in Justin's ingredients,\n\n308\n00:17:56.840 --> 00:18:00.030\nbecause I just put a single colon,\nwhich says, give me an exact copy.\n\n309\n00:18:01.300 --> 00:18:05.868\nAnd then well notice cheese and\npepperoni, well excuse me, pepperoni, and\n\n310\n00:18:05.868 --> 00:18:08.335\nmushrooms, and onions are still there.\n\n311\n00:18:08.335 --> 00:18:09.570\nBut what did it do?\n\n312\n00:18:09.570 --> 00:18:14.440\nIt came in and\nchanged cheese to a bunch of elements.\n\n313\n00:18:16.190 --> 00:18:17.770\nWell, why would it do that?\n\n314\n00:18:17.770 --> 00:18:21.300\nBecause it said from 0 to 1,\nmake that there.\n\n315\n00:18:21.300 --> 00:18:23.140\nAnd change this part to a list.\n\n316\n00:18:23.140 --> 00:18:27.750\nSo it said, you know what, take that\nstring and slice it up into a bunch\n\n317\n00:18:27.750 --> 00:18:30.960\nof characters of a list and\nthen put those characters in there.\n\n318\n00:18:30.960 --> 00:18:36.980\nI can tell by Vonne's face this\nis really hard to reason about.\n\n319\n00:18:36.980 --> 00:18:40.680\nThere are use cases for this starting out.\n\n320\n00:18:40.680 --> 00:18:42.830\nI'll be very cautious here.\n\n321\n00:18:42.830 --> 00:18:47.990\nCuz you go, wait a minute, that doesn't\nwork, this is doing something weird.\n\n322\n00:18:47.990 --> 00:18:50.888\nLikewise, if I did something like this.\n\n323\n00:18:55.637 --> 00:18:59.796\nLike that, okay,\nthis is a list with two elements.\n\n324\n00:18:59.796 --> 00:19:02.236\nIf I re-run it.\n\n325\n00:19:04.588 --> 00:19:07.060\nNotice it just kinda\njust puts those in place.\n\n326\n00:19:07.060 --> 00:19:09.860\nIt replaces cheese with\nwhatever is in the list.\n\n327\n00:19:09.860 --> 00:19:14.210\nIt's kind of like a, find and\nreplace concatenation,\n\n328\n00:19:14.210 --> 00:19:19.990\nlike multi-faceted type thing.\n&gt;&gt; I'm confused,\n\n329\n00:19:19.990 --> 00:19:25.160\nthe bleu cheese,that was in, you mind\ngoing back to that so I can see it?\n\n330\n00:19:25.160 --> 00:19:28.460\nThe other one was-\n&gt;&gt; A string.\n\n331\n00:19:28.460 --> 00:19:33.210\n&gt;&gt; And then redo what she just did?\n\n332\n00:19:33.210 --> 00:19:34.120\n&gt;&gt; I meant what redo is.\n\n333\n00:19:34.120 --> 00:19:34.795\n&gt;&gt; Yeah, right.\n\n334\n00:19:34.795 --> 00:19:38.394\n[LAUGH]\n&gt;&gt; No that was right.\n\n335\n00:19:38.394 --> 00:19:39.955\n&gt;&gt; Could you put those in\n\n336\n00:19:39.955 --> 00:19:41.850\nbrackets?\n&gt;&gt; Mm-hm.\n\n337\n00:19:41.850 --> 00:19:47.640\nCuz now it understands that this is the\nlist, these are the individual strings,\n\n338\n00:19:47.640 --> 00:19:53.270\nand you are replacing position 0 and\nposition 1 with these two pieces.\n\n339\n00:19:53.270 --> 00:19:58.010\nBefore, since we did not have, if you\nhave put the brackets around bleu cheese,\n\n340\n00:19:58.010 --> 00:20:00.570\ncuz then it's just a single.\n\n341\n00:20:00.570 --> 00:20:02.870\nBut then no, but\nyou're saying two of them.\n\n342\n00:20:02.870 --> 00:20:04.040\nNo, wait.\n\n343\n00:20:04.040 --> 00:20:06.230\nNo, zero through one,\nthat's a stopping point, so\n\n344\n00:20:06.230 --> 00:20:08.380\nthat's just replacing the first value.\n\n345\n00:20:08.380 --> 00:20:09.830\nSo this should work,\n\n346\n00:20:09.830 --> 00:20:13.090\nbecause it has the correct-\n&gt;&gt; And it does.\n\n347\n00:20:13.090 --> 00:20:14.180\n&gt;&gt; The syntax around it,\n\n348\n00:20:14.180 --> 00:20:16.940\nthe other ones because it was\nthere was the incorrect syntax.\n\n349\n00:20:16.940 --> 00:20:19.068\n&gt;&gt; But this is hard to reason about.\n\n350\n00:20:19.068 --> 00:20:19.690\n[CROSSTALK] Yeah.\n[LAUGH]\n\n351\n00:20:19.690 --> 00:20:21.270\n&gt;&gt; Wait a minute.\n\n352\n00:20:21.270 --> 00:20:24.510\nSo it has replaced that range.\n\n353\n00:20:24.510 --> 00:20:28.740\nIf you put it as a list,\nit'll replace kind of that list.\n\n354\n00:20:28.740 --> 00:20:34.340\nIf you put a string, what it actually\ndoes is it listifies the string.\n\n355\n00:20:34.340 --> 00:20:37.795\nSo I have a list of characters,\nkind of like our word.\n\n356\n00:20:37.795 --> 00:20:42.620\nRight, our word list which is CAT, we're\ngonna swing back to that in just a moment,\n\n357\n00:20:44.010 --> 00:20:46.490\nand it puts those in there.\n\n358\n00:20:46.490 --> 00:20:48.530\nOkay.\nSo it's kind of a weird behavior.\n\n359\n00:20:48.530 --> 00:20:50.110\n&gt;&gt; Okay, I understand it now but\n\n360\n00:20:50.110 --> 00:20:53.540\nlike you just said, no.\n\n361\n00:20:53.540 --> 00:20:59.140\nIt get's too swirly in there to,\n\n362\n00:20:59.140 --> 00:21:01.320\njust don't do it that way.\n&gt;&gt; Yeah, don't do it that way.\n\n363\n00:21:01.320 --> 00:21:04.390\nAnd which actually brings\nme to another point.\n\n364\n00:21:04.390 --> 00:21:06.080\nNotice this word is\na list of a characters?\n\n365\n00:21:07.830 --> 00:21:10.700\nI skipped over something\nduring the strings.\n\n366\n00:21:12.150 --> 00:21:15.950\nList of strings to string?\n\n367\n00:21:18.210 --> 00:21:21.270\nThis actually had to do little more\nwith strings than it does a list.\n\n368\n00:21:21.270 --> 00:21:24.728\nIf I have a list of strings,\nand I wanna print, right?\n\n369\n00:21:24.728 --> 00:21:28.488\nWe just saw that, we can take a string and\nsplit it out into individual characters,\n\n370\n00:21:28.488 --> 00:21:31.100\nwhat if I have individual characters,\nand I wanna put it together?\n\n371\n00:21:32.360 --> 00:21:37.770\nWell, I'm going to print string_word,\n\n372\n00:21:37.770 --> 00:21:44.510\nwhich is gonna be, I'm gonna make quotes,\nand I'm gonna put a comma there.\n\n373\n00:21:44.510 --> 00:21:45.620\nYou'll see why in just a moment.\n\n374\n00:21:47.680 --> 00:21:51.470\nAnd .join, so we talked a little bit\nabout those things that a string can do,\n\n375\n00:21:51.470 --> 00:21:52.260\nthose behaviors.\n\n376\n00:21:52.260 --> 00:21:55.640\nAnd then I'm gonna feed word,\nwhich is a list of strings.\n\n377\n00:21:58.330 --> 00:22:02.563\nIf I put string_word in here.\n\n378\n00:22:04.508 --> 00:22:05.530\nAnd here we go.\n\n379\n00:22:06.790 --> 00:22:11.210\nCat but its C comma, A comma, T.\n\n380\n00:22:11.210 --> 00:22:13.790\nWhy would I put that comma there?\n\n381\n00:22:13.790 --> 00:22:15.780\nCuz that is the separator.\n\n382\n00:22:15.780 --> 00:22:21.180\nIf I take that out then I\nend up with C-A-T, cat.\n\n383\n00:22:22.870 --> 00:22:25.960\nSo, join will actually take a list of\nstrings and join them back together with\n\n384\n00:22:25.960 --> 00:22:29.170\na character between each thing other\nthan the beginning and the end.\n\n385\n00:22:30.940 --> 00:22:33.150\nOtherwise I can also kind of listify\n\n386\n00:22:35.310 --> 00:22:39.310\ncharacters in some interesting\nways we saw assignment.\n\n387\n00:22:39.310 --> 00:22:42.020\nSometimes that just happens on your own.\n\n388\n00:22:42.020 --> 00:22:48.350\nIf you wanted to get this back,\nright, and, well, how do I do that?\n\n389\n00:22:48.350 --> 00:22:48.850\nWell.\n\n390\n00:22:50.850 --> 00:22:52.510\nSo we're gonna print string word.\n\n391\n00:22:54.100 --> 00:22:59.540\nAnd we're gonna print,\nlet's just call it back to list.\n\n392\n00:22:59.540 --> 00:23:03.646\nWe're gonna call it l\ni s t parenthesis and\n\n393\n00:23:03.646 --> 00:23:09.500\nwe're gonna call this string word,\nI'm gonna say back to list like so.\n\n394\n00:23:10.800 --> 00:23:16.110\nAnd now, to clear this, then I get cat.\n\n395\n00:23:16.110 --> 00:23:17.780\nBut now if I call list on it,\n\n396\n00:23:17.780 --> 00:23:22.920\nthe actual function,\nI get the listified version of the string.\n\n397\n00:23:22.920 --> 00:23:26.120\nIt just splits the characters out\ninto individual elements of a list.\n\n398\n00:23:26.120 --> 00:23:28.476\nSo there is this\ninteresting conversion and\n\n399\n00:23:28.476 --> 00:23:30.920\nyou will notice this is probably possible?\n\n400\n00:23:30.920 --> 00:23:33.080\nNot probably, this is possible,\nbecause strings and\n\n401\n00:23:33.080 --> 00:23:35.520\nlists, they're both collections.\n\n402\n00:23:35.520 --> 00:23:38.460\nStrings are collections of characters,\nright?\n\n403\n00:23:38.460 --> 00:23:41.960\nWe don't have a particular character type,\nbut just a bunch of text put together.\n\n404\n00:23:41.960 --> 00:23:44.890\nLists can be a collection\nof pretty much anything.\n\n405\n00:23:47.011 --> 00:23:54.590\nLyvonne, you asked me,\nwhat happens If we have mixed data types?\n\n406\n00:23:55.670 --> 00:23:57.406\nRight?\nAnd I said you know what,\n\n407\n00:23:57.406 --> 00:24:01.500\nyou could probably do that but\nI don't know if you would want to.\n\n408\n00:24:01.500 --> 00:24:09.011\nSo what if I say in numbers And\nletters, all right?\n\n409\n00:24:09.011 --> 00:24:14.555\nAnd I'm gonna use one of the previous\noperations, I wanna say numbers + word,\n\n410\n00:24:14.555 --> 00:24:18.555\nso that would give me seven blah,\nblah, blah, and cat.\n\n411\n00:24:18.555 --> 00:24:22.806\nI'm gonna print that, Numbers and letters.\n\n412\n00:24:22.806 --> 00:24:26.290\nAnd I'm gonna change this to numbers and\nletters like so.\n\n413\n00:24:28.080 --> 00:24:29.901\nYou're like, okay, well,\nthat'll take a list and\n\n414\n00:24:29.901 --> 00:24:31.970\nit'll put them together into a string and\nthat makes sense.\n\n415\n00:24:31.970 --> 00:24:39.130\nWe come over here, And boom, it broke.\n\n416\n00:24:39.130 --> 00:24:39.760\nWhy did it break?\n\n417\n00:24:41.130 --> 00:24:45.671\nJoin can only take a list of strings.\n\n418\n00:24:47.563 --> 00:24:49.110\nIt can only take a list of strings.\n\n419\n00:24:49.110 --> 00:24:53.910\nEverything in the list, in the collection,\nhas to be a string for join to work.\n\n420\n00:24:54.990 --> 00:24:58.680\nThis first element is the number 7,\nit's a number.\n\n421\n00:24:58.680 --> 00:25:02.470\nSo join breaks, and if your program's\nrunning, it will automatically break.\n\n422\n00:25:02.470 --> 00:25:06.000\nWell, I thought all of these were letters?\n\n423\n00:25:06.000 --> 00:25:10.790\nWell yeah, but now this list has\nletters and numbers in them, and\n\n424\n00:25:10.790 --> 00:25:12.820\nit's really hard to reason about.\n\n425\n00:25:12.820 --> 00:25:18.859\nThat's one example, but\nalso if you wanted to do\n\n426\n00:25:18.859 --> 00:25:24.027\nsomething like, I want to sum together.\n\n427\n00:25:24.027 --> 00:25:27.770\nAnd let's just say I say,\nnumbers_and_letters,\n\n428\n00:25:31.735 --> 00:25:36.159\nOf (-1), which means I can go backwards,\nthis is very similar to strings.\n\n429\n00:25:36.159 --> 00:25:39.390\nSo I come to the end, that's a t.\n\n430\n00:25:39.390 --> 00:25:46.232\nAnd then I say,\nnumbers_and_letters of 0, right?\n\n431\n00:25:46.232 --> 00:25:49.641\nRight, I wanna take the first and\nthe last and add them together.\n\n432\n00:25:49.641 --> 00:25:52.210\nAnd you go, yeah, there we go.\n\n433\n00:25:52.210 --> 00:25:56.400\nNow other than the variable name that\nwe have picked to be transparent,\n\n434\n00:25:56.400 --> 00:25:58.410\nthis could be just like a variable x.\n\n435\n00:25:58.410 --> 00:26:00.020\nYou may not know what's in there.\n\n436\n00:26:00.020 --> 00:26:03.640\nI'm gonna print sum_together.\n\n437\n00:26:03.640 --> 00:26:05.190\nSee what happens.\n\n438\n00:26:05.190 --> 00:26:09.734\nClear, And oops.\n\n439\n00:26:09.734 --> 00:26:12.629\nWell number one,\nwe're never gonna get past this part.\n\n440\n00:26:12.629 --> 00:26:16.374\nSo I'm gonna comment that out,\nand I'm gonna comment this out.\n\n441\n00:26:16.374 --> 00:26:19.515\nAnd I'm gonna actually comment\nthese lines out as well,\n\n442\n00:26:19.515 --> 00:26:21.290\ncuz I wanna see that final line.\n\n443\n00:26:23.953 --> 00:26:29.450\nAnd uh-oh, can't do that,\nmust be string, not integer, TypeError.\n\n444\n00:26:29.450 --> 00:26:34.155\nWhat happens is you thought you were\ngoing to add number and number, or\n\n445\n00:26:34.155 --> 00:26:36.087\nmaybe a string and a string.\n\n446\n00:26:36.087 --> 00:26:39.006\nBut now they're mismatched and\nyou got weird results,\n\n447\n00:26:39.006 --> 00:26:42.805\ncuz you can't take a number and\na string and kind of smash them together.\n\n448\n00:26:42.805 --> 00:26:43.970\nIt doesn't make any sense.\n\n449\n00:26:45.140 --> 00:26:47.960\nI would not mix data types,\nbecause of stuff just like this.\n\n450\n00:26:47.960 --> 00:26:51.870\nThings might unexpectedly break,\nall right?\n\n451\n00:26:51.870 --> 00:26:53.775\nNow up until this point,\n\n452\n00:26:53.775 --> 00:26:59.170\nwe've been doing a lot of things with\nlists that are, a lot of syntax.\n\n453\n00:26:59.170 --> 00:27:04.469\nBut are lists only indexable, right, I can\ngrab individual elements, or slice it and\n\n454\n00:27:04.469 --> 00:27:09.760\ndice it, can I add a multiplier,\nthose are the only things that I can do?\n\n455\n00:27:09.760 --> 00:27:13.420\nNo, we're actually gonna hop into\nthe REPL instead of this file\n\n456\n00:27:13.420 --> 00:27:17.120\nto talk about what we can do,\njust as a reminder of a couple of things.\n\n457\n00:27:17.120 --> 00:27:20.670\nSo I'm gonna hold Ctrl+L,\nI just type python3, I'm in the REPL.\n\n458\n00:27:20.670 --> 00:27:25.310\nAnd I'm gonna say letters = ['c', 'a',\n\n459\n00:27:25.310 --> 00:27:31.340\n't'], like that, all right,\nso that's letters.\n\n460\n00:27:31.340 --> 00:27:37.140\nThis is a list, so type(letters),\nit is a list of strings.\n\n461\n00:27:38.490 --> 00:27:43.415\nIf I say dir(letters),\n\n462\n00:27:43.415 --> 00:27:50.080\nlike so, we get all the things that\na list can also do, all right?\n\n463\n00:27:50.080 --> 00:27:52.931\nDisregard all the things with underscores.\n\n464\n00:27:52.931 --> 00:27:58.973\nBut we have append, clear,\ncopy, count, extend, index,\n\n465\n00:27:58.973 --> 00:28:04.339\ninsert, pop, remove, reverse, and sort.\n&gt;&gt; Can you enter a couple times?\n\n466\n00:28:04.339 --> 00:28:06.233\nIt's kinda above your-\n&gt;&gt; Yeah, okay,\n\n467\n00:28:06.233 --> 00:28:07.008\nthere we go.\n&gt;&gt; Here we go,\n\n468\n00:28:07.008 --> 00:28:07.816\nthere we go.\n&gt;&gt; Thank you.\n\n469\n00:28:07.816 --> 00:28:10.109\n&gt;&gt; So we have essentially these.\n\n470\n00:28:12.533 --> 00:28:15.880\nMost of these will do what\nis called mutate a list.\n\n471\n00:28:15.880 --> 00:28:19.660\nNot most, a chunk of these will,\nall right?\n\n472\n00:28:19.660 --> 00:28:22.680\nSo let's actually look at\na couple of the examples.\n\n473\n00:28:22.680 --> 00:28:26.933\nBecause these are gonna work very much\nlike join, or any of the other ones.\n\n474\n00:28:26.933 --> 00:28:31.108\nIf I ever wanted to find out,\nlet's clear this out, what it does.\n\n475\n00:28:31.108 --> 00:28:37.890\nI'm gonna say help, and\nI'm gonna say letters.append, like so.\n\n476\n00:28:37.890 --> 00:28:42.030\nAppend object to the end,\nwhere L is a list, all right?\n\n477\n00:28:42.030 --> 00:28:50.885\nSo how does that work, letters.append,\nall right, I'm saying, hey, letters.\n\n478\n00:28:50.885 --> 00:28:52.450\nSending you a message, it's called append.\n\n479\n00:28:53.900 --> 00:28:57.180\nAnd then, you accidentally hit Enter,\nand things break.\n\n480\n00:28:57.180 --> 00:29:00.020\nLetters, notice nothing prints out,\neverything's good.\n\n481\n00:29:01.160 --> 00:29:06.130\nBut from here on out, letters actually\nhas an s at the end of it, okay?\n\n482\n00:29:06.130 --> 00:29:08.370\nI've changed the list.\n\n483\n00:29:10.010 --> 00:29:13.370\nThat's one of those features that\nthere is a use-case for this,\n\n484\n00:29:13.370 --> 00:29:15.770\nbut you have to be careful.\n\n485\n00:29:15.770 --> 00:29:19.630\nAs long as you know that's what's\noccurring, that's okay, but\n\n486\n00:29:19.630 --> 00:29:25.460\nI'm appending to the right-hand end.\n&gt;&gt; Okay, and cuz we had done the replace,\n\n487\n00:29:25.460 --> 00:29:30.156\nor the D-E-L, the DEL\n&gt;&gt; And the, change the index three,\n\n488\n00:29:30.156 --> 00:29:33.250\nthe onions and cheese, or what have you.\n\n489\n00:29:33.250 --> 00:29:37.760\nSo this is add one more onto,\nwe never actually did that\n\n490\n00:29:37.760 --> 00:29:40.820\nin the text editor.\n&gt;&gt; No,\n\n491\n00:29:40.820 --> 00:29:45.195\nand this is because this method,\nexcuse me method, this behavior,\n\n492\n00:29:45.195 --> 00:29:49.660\nit's called a method, it's a function, but\nonly makes sense in the context of a list.\n\n493\n00:29:49.660 --> 00:29:53.890\nIf I just say, append('s'), what am I\nappending to, that doesn't make any sense.\n\n494\n00:29:55.350 --> 00:29:57.767\nThat allows us to append to the end.\n\n495\n00:29:57.767 --> 00:30:02.704\nWell what if I want to\n[SOUND] take that back off?\n\n496\n00:30:02.704 --> 00:30:08.360\nWell, letters.pop(),\nwe're gonna pop it off at the end.\n\n497\n00:30:10.250 --> 00:30:15.820\nIt gives you the letter back, but now,\nthat is no longer part of the list.\n\n498\n00:30:15.820 --> 00:30:19.210\nThere is however, some interesting things.\n\n499\n00:30:20.790 --> 00:30:24.597\nPop, see how there's squared\nbrackets with an index?\n\n500\n00:30:24.597 --> 00:30:28.562\nIn Python I can actually\npop any place of the list.\n\n501\n00:30:28.562 --> 00:30:30.996\nI can pop from the left side as well.\n\n502\n00:30:30.996 --> 00:30:35.479\nIf I call it just empty, like I did,\nit will pop from the right side.\n\n503\n00:30:35.479 --> 00:30:40.416\nSo letters.pop(0), it returned a c, and\n\n504\n00:30:40.416 --> 00:30:46.390\nnow letters is just ['a', 't'], okay?\n\n505\n00:30:46.390 --> 00:30:52.070\nSo append and pop are probably\nkinda your most common ones.\n\n506\n00:30:52.070 --> 00:30:53.300\nNow lets look here.\n\n507\n00:30:53.300 --> 00:30:59.556\nLetters and lets, [SOUND] there we go.\n\n508\n00:30:59.556 --> 00:31:03.529\nClear, well that's actually gonna\nclear the list, it'll be empty.\n\n509\n00:31:03.529 --> 00:31:06.720\nCopy, that'll give me a copy of it.\n\n510\n00:31:06.720 --> 00:31:09.944\nCount, that'll count.\n\n511\n00:31:09.944 --> 00:31:17.027\nBut look,\nReturn number occurances of value.\n\n512\n00:31:17.027 --> 00:31:20.423\nSo if I want to know how many times\nthere's an a in a list of strings,\n\n513\n00:31:20.423 --> 00:31:21.590\nthen I can count them.\n\n514\n00:31:23.040 --> 00:31:27.423\nAnd the one kind of last one that I wanna,\ndefinitely take a look\n\n515\n00:31:27.423 --> 00:31:31.825\nat these other ones,\njust do exactly what I did, is this sort.\n\n516\n00:31:31.825 --> 00:31:34.756\nI want to sort a list because\nthey're always in the same order.\n\n517\n00:31:34.756 --> 00:31:38.670\nBut what if I want them in\nlowest to biggest, right?\n\n518\n00:31:38.670 --> 00:31:42.632\nOr for letters,\nwhat if I want them in alphabetical order?\n\n519\n00:31:42.632 --> 00:31:48.904\nLet's go back and clear this out and\nsay letters = ['c',\n\n520\n00:31:48.904 --> 00:31:53.341\n'a', 't', 's'], cats, right?\n\n521\n00:31:53.341 --> 00:31:54.690\nThose are not in alphabetical order.\n\n522\n00:31:54.690 --> 00:31:58.091\nBut if i say letters.sort().\n\n523\n00:32:02.439 --> 00:32:05.749\nThere are now in alphabetical order,\nbut it changes the list.\n\n524\n00:32:05.749 --> 00:32:10.590\nThey now have different positions.\n&gt;&gt; So they will stay in that position?\n\n525\n00:32:10.590 --> 00:32:16.826\nThat's another, ooh.\n&gt;&gt; From here on out, that list is in ACST.\n\n526\n00:32:16.826 --> 00:32:21.247\nIt will not go back to the other one.\n&gt;&gt; Same idea,\n\n527\n00:32:21.247 --> 00:32:26.368\nlike at this point in time, when you're\ncalling this particular behavior or\n\n528\n00:32:26.368 --> 00:32:30.407\nmethod, you've changed it and\nnow from here on out, okay.\n\n529\n00:32:30.407 --> 00:32:35.387\nThen all of these seems like, feel like\nI could do it in certain ways like\n\n530\n00:32:35.387 --> 00:32:39.760\nyou're saying,\nthere are use case scenarios.\n\n531\n00:32:39.760 --> 00:32:43.320\nBut otherwise, to do these things too.\n&gt;&gt; Yeah, there's some weirdness there.\n\n532\n00:32:43.320 --> 00:32:47.580\nAnd if we go back and I reassign this, so\nI put them back because I created a new\n\n533\n00:32:47.580 --> 00:32:53.260\nthing, if I instead say letters.append(1),\n\n534\n00:32:53.260 --> 00:32:55.900\nit let's me do that.\n\n535\n00:32:55.900 --> 00:32:58.124\n['c', 'a', 't', 's', 1].\n\n536\n00:32:58.124 --> 00:33:03.880\nAnd now, if I say, cats.sort,\nnot cats, goodness gracious,\n\n537\n00:33:03.880 --> 00:33:07.166\nI've got cats on the brain.\n&gt;&gt; [LAUGH]\n\n538\n00:33:07.166 --> 00:33:07.714\n&gt;&gt; But\n\n539\n00:33:07.714 --> 00:33:11.030\nuh-oh, not supported\nbecause I mixed data types,\n\n540\n00:33:11.030 --> 00:33:15.250\nthis actually breaks again because there's\nno way to compare a number to a string.\n\n541\n00:33:15.250 --> 00:33:17.700\nIt's like you only put the numbers\nin alphabetical order or\n\n542\n00:33:17.700 --> 00:33:20.510\nyou want me to put the strings\nin ascending order.\n\n543\n00:33:20.510 --> 00:33:25.480\nSo now, mixing data types, you can do it,\nbut you probably shouldn't.\n\n544\n00:33:25.480 --> 00:33:30.420\nBut for the most part, lists are used\nto have an ordered collection\n\n545\n00:33:30.420 --> 00:33:35.390\nof like things that you want to bundle and\nuse accordingly, right?\n\n546\n00:33:35.390 --> 00:33:36.860\nNow, there's a few other\nthings that we could do for\n\n547\n00:33:36.860 --> 00:33:40.220\nlist, but we have to learn\na few more Python things and\n\n548\n00:33:40.220 --> 00:33:43.130\nprogramming things before\nwe can actually do that.\n\n549\n00:33:43.130 --> 00:33:44.870\nSo up until this point,\nwe can slice and dice,\n\n550\n00:33:44.870 --> 00:33:48.940\nwe can index, that almost started\nout like an infomercial there.\n\n551\n00:33:48.940 --> 00:33:51.980\nWe can drive individual elements,\njust like we do with strings.\n\n552\n00:33:51.980 --> 00:33:56.091\nWe can concatenate by using a plus sign,\nwe can multiply and\n\n553\n00:33:56.091 --> 00:33:58.404\nget repeat, we can also mutate.\n\n554\n00:33:58.404 --> 00:34:02.350\nYou have to be careful because we're\nmutating and if we're not ready,\n\n555\n00:34:02.350 --> 00:34:06.494\nwe may get weird results that sometimes,\nthrow an error exclusively, but\n\n556\n00:34:06.494 --> 00:34:10.470\nsometimes just behave a little bit\ndifferently than you anticipated.\n\n557\n00:34:11.660 --> 00:34:15.510\nAnd well, definitely an exercise kinda\nplay around with these other methods that\n\n558\n00:34:15.510 --> 00:34:19.300\nare available in list, but I think it's\na pretty good starting point for a list,\n\n559\n00:34:19.300 --> 00:34:23.148\nthough it'll definitely start the make a\nlittle more sense as we use them in future\n\n560\n00:34:23.148 --> 00:34:25.860\nwell, endeavors.\n&gt;&gt; Wow, that is a lot about lists.\n\n561\n00:34:25.860 --> 00:34:28.510\nAnd I know we're already\na little over time, I just,\n\n562\n00:34:28.510 --> 00:34:34.140\nI think I mentioned this in the strings,\nthat in my knowledge,\n\n563\n00:34:34.140 --> 00:34:37.985\nit is also very much like an array\nin a JavaScript language, and\n\n564\n00:34:37.985 --> 00:34:42.970\nthat's where you say, that's because\nlists in Python, they're very much like\n\n565\n00:34:42.970 --> 00:34:48.220\narrays except for the mutable part of\nlike the changing out of the variables.\n\n566\n00:34:48.220 --> 00:34:53.294\nThus, Python, Pythonic and the other\none is JavaScript like [CROSSTALK]\n\n567\n00:34:53.294 --> 00:34:54.632\n&gt;&gt; So I mean, in JavaScript,\n\n568\n00:34:54.632 --> 00:34:57.311\nif you have any experience,\nJavaScript is actually,\n\n569\n00:34:57.311 --> 00:34:58.869\narrays are mutable.\n&gt;&gt; They are.\n\n570\n00:34:58.869 --> 00:34:59.671\n&gt;&gt; And actually,\n\n571\n00:34:59.671 --> 00:35:01.730\nyou can actually add to the end.\n\n572\n00:35:01.730 --> 00:35:04.110\nThey're almost exactly like Python lists.\n\n573\n00:35:04.110 --> 00:35:05.150\nThere's a few exceptions.\n\n574\n00:35:06.330 --> 00:35:10.340\nThe reason that I think they\nchose not to call these arrays\n\n575\n00:35:10.340 --> 00:35:14.930\nin some other program languages, C, C++,\n\n576\n00:35:14.930 --> 00:35:20.000\narrays are not changeable,\nexcuse me, they're not resizable.\n\n577\n00:35:20.000 --> 00:35:23.400\nSo when I add to the end of a Python list,\nit gets bigger.\n\n578\n00:35:23.400 --> 00:35:26.039\nIn C, actually you can't do that.\n\n579\n00:35:26.039 --> 00:35:29.550\nYou have to create a whole new one,\nmake a copy.\n\n580\n00:35:29.550 --> 00:35:32.170\nThat's probably happening\nbehind the scenes, but\n\n581\n00:35:32.170 --> 00:35:36.390\nthere's some nuanced differences\nthere that we have to be careful of.\n\n582\n00:35:36.390 --> 00:35:39.577\nBut in JavaScript world,\nthese are essentially the exact\n\n583\n00:35:39.577 --> 00:35:42.192\nsame thing.\n&gt;&gt; That was the one that you can't add to\n\n584\n00:35:42.192 --> 00:35:43.420\nit, you can change it.\n\n585\n00:35:43.420 --> 00:35:46.554\nAnd maybe that's when we were talking off\ncamera, we were talking about mutable,\n\n586\n00:35:46.554 --> 00:35:49.750\nwe were like, they never mentioned mutable\nin the first part, they might not have.\n\n587\n00:35:49.750 --> 00:35:52.029\nYou know what,\nit all kind of blends together for\n\n588\n00:35:52.029 --> 00:35:54.864\nme sometimes because there's\na lot to learn about this, and\n\n589\n00:35:54.864 --> 00:35:57.770\nI'm actually having a really\ngood time learning about this.\n\n590\n00:35:57.770 --> 00:36:01.170\nSo thank you so much for that,\nbut I know we are over time, so\n\n591\n00:36:01.170 --> 00:36:03.040\nwe gotta wrap this one up.\n\n592\n00:36:03.040 --> 00:36:06.010\nSo signing off for DevProTV,\nI've been your host, Vonne Smith.\n\n593\n00:36:06.010 --> 00:36:06.750\n&gt;&gt; And I'm Justin Dennison.\n\n594\n00:36:06.750 --> 00:36:07.470\n&gt;&gt; And we'll see you soon.\n\n595\n00:36:07.470 --> 00:36:10.496\n[MUSIC]\n\n",
          "vimeoId": "268456340"
        },
        {
          "description": "In this episode, Justin and Vonne dive back into tuples as a way to arrange data in your program. Justin further discusses some of the operations that you can use when manipulating tuples.",
          "length": "2060",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-2-1-tuples-050318-PGM.00_40_37_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-2-1-tuples-050318-PGM.00_40_37_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-2-1-tuples-050318-PGM.00_40_37_01.Still001-sm.jpg",
          "title": "Tuples",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.155 --> 00:00:16.657\nHello everyone, and welcome back to\nanother exciting edition of DevProTV.\n\n3\n00:00:16.657 --> 00:00:18.214\nI'm your host, Vonne Smith, and\n\n4\n00:00:18.214 --> 00:00:21.670\nwe're coming back at you with more in\nour programming fundamental series.\n\n5\n00:00:21.670 --> 00:00:26.150\nAnd in this episode we're gonna be talking\nabout the tuples, or, well, tuples.\n\n6\n00:00:26.150 --> 00:00:27.910\nAnd here to help us is Justin Dennison.\n\n7\n00:00:27.910 --> 00:00:29.730\nHow are you doing?\n&gt;&gt; I'm doing fantastic, Vonne,\n\n8\n00:00:29.730 --> 00:00:31.660\nhow are you?\n&gt;&gt; I'm doing pretty good.\n\n9\n00:00:31.660 --> 00:00:35.940\nIt's not a tuple, I guess it is a tuple,\nand we can have multiple tuples.\n\n10\n00:00:35.940 --> 00:00:38.670\nBut a tuple is what you're\ngonna tell us it is.\n\n11\n00:00:38.670 --> 00:00:42.280\n[LAUGH] I don't wanna steal your thunder.\n&gt;&gt; It would've been perfectly okay.\n\n12\n00:00:42.280 --> 00:00:44.930\nI mean, if you do the show, then I'll\njust be like, and there you have it,\n\n13\n00:00:44.930 --> 00:00:45.721\nfolks.\n&gt;&gt; No, no.\n\n14\n00:00:45.721 --> 00:00:46.613\n&gt;&gt; Let's go ahead and\n\n15\n00:00:46.613 --> 00:00:49.715\nget out of here [LAUGH].\n&gt;&gt; I don't think anybody out there wants\n\n16\n00:00:49.715 --> 00:00:52.992\nthat to happen, you just proceed.\n&gt;&gt; All right, we will try.\n\n17\n00:00:52.992 --> 00:00:59.090\nNow, not the tuples, it's not a very\ndefined, I'm taking a dig at Vonne.\n\n18\n00:00:59.090 --> 00:01:02.440\nBased on the look she's giving me, I might\nhave overstepped the bounds a little bit.\n\n19\n00:01:02.440 --> 00:01:03.730\nBut that's all right.\n\n20\n00:01:03.730 --> 00:01:08.740\nBut yes, we can have a tuple, or\nwe can have a bunch of tuples.\n\n21\n00:01:08.740 --> 00:01:12.302\nSometimes you will hear me,\nand I'm not saying it's wrong,\n\n22\n00:01:12.302 --> 00:01:15.670\nmainly because I say it, but\nyou will hear tuple, right?\n\n23\n00:01:15.670 --> 00:01:19.889\nA tuple or a tuple, it doesn't matter\nto me, but really before we take it and\n\n24\n00:01:19.889 --> 00:01:24.190\nkind of dig in programmatically what that\nmeans, let's think about, well, tuple,\n\n25\n00:01:24.190 --> 00:01:27.380\ntuple, that's kind of a weird word and\nnot something you use on a daily basis.\n\n26\n00:01:27.380 --> 00:01:31.820\nYeah, but\nyou do use the word double, triple,\n\n27\n00:01:31.820 --> 00:01:36.149\nquadruple, quintuple or quintuple,\n\n28\n00:01:36.149 --> 00:01:40.923\nright, and then sextuple,\nseptuple, octuple.\n\n29\n00:01:40.923 --> 00:01:45.330\nA tuple is kind of\nthe generalization of a pair, right?\n\n30\n00:01:45.330 --> 00:01:48.350\nSo we have a double, a triple,\nquadruple, those things.\n\n31\n00:01:48.350 --> 00:01:51.970\nSo a tuple can have anywhere\nfrom one thing in them\n\n32\n00:01:51.970 --> 00:01:55.030\nall the way up to what\nI would say n things.\n\n33\n00:01:55.030 --> 00:01:57.840\nThey could, I mean, other than\nthe limitation of your computer,\n\n34\n00:01:57.840 --> 00:02:02.000\nyou could have a million kinda things,\nkinda bundled together, so\n\n35\n00:02:02.000 --> 00:02:04.750\nthat's in general what tuple means.\n&gt;&gt; Okay,\n\n36\n00:02:04.750 --> 00:02:08.640\nbut doesn't that sound like a list?\n\n37\n00:02:08.640 --> 00:02:13.550\nI mean, to me it's a collection of things,\nI almost feel like you, I think\n\n38\n00:02:13.550 --> 00:02:17.430\nyou almost defined it the exact same\nway when we were talking about a list.\n\n39\n00:02:17.430 --> 00:02:21.758\nSo I'm a little just going over here,\nokay, but I will say from my\n\n40\n00:02:21.758 --> 00:02:26.640\nexperience I have heard of tuple before,\nin relationship to databases,\n\n41\n00:02:26.640 --> 00:02:30.497\nrelational database design of like,\nwhen you have a row or\n\n42\n00:02:30.497 --> 00:02:34.620\na record in a database,\nthat is referred to as a tuple record.\n\n43\n00:02:34.620 --> 00:02:40.331\nRow, I mean, they're all interchangeable,\nit is a collection across.\n\n44\n00:02:40.331 --> 00:02:44.345\nSo I know it in that context, but\nwhen you just defined it, I'm like,\n\n45\n00:02:44.345 --> 00:02:48.220\nI'm not understanding why it's\nnot different than a list.\n\n46\n00:02:48.220 --> 00:02:51.280\n&gt;&gt; So, effectively, we can boil it down,\n\n47\n00:02:51.280 --> 00:02:54.520\nan oversimplification, admittedly so,\n\n48\n00:02:54.520 --> 00:02:58.840\nwe could boil it down to a tuple\nis just an immutable list.\n\n49\n00:02:58.840 --> 00:03:00.180\nWhat do I mean by immutable?\n\n50\n00:03:00.180 --> 00:03:02.890\nI don't mean that you can't shut it up,\n\n51\n00:03:02.890 --> 00:03:06.730\nI'm saying you can't change\nit once it's created.\n\n52\n00:03:06.730 --> 00:03:09.630\nIf it has three elements,\nit will always have three elements, and\n\n53\n00:03:09.630 --> 00:03:13.110\nthose are the three elements that\nare contained within the tuple.\n\n54\n00:03:13.110 --> 00:03:17.070\nI can't push, pop, or excuse me,\npin, pop, anything like that.\n\n55\n00:03:17.070 --> 00:03:23.150\nI can only create new ones with changes,\nI can't mutate a tuple.\n\n56\n00:03:23.150 --> 00:03:27.970\nThere is one edge case where you can\nkinda sidestep that limitation, and\n\n57\n00:03:27.970 --> 00:03:29.740\nwe'll take a look at that,\nbut for the most part,\n\n58\n00:03:29.740 --> 00:03:35.580\na tuple is an immutable list that\nessentially takes away some functionality.\n\n59\n00:03:35.580 --> 00:03:39.240\nThere's a lot more to it than that, but\nI think that's a good way to start,\n\n60\n00:03:39.240 --> 00:03:41.469\nas far as thinking about it.\n&gt;&gt; Okay, yeah, and then,\n\n61\n00:03:41.469 --> 00:03:43.735\nif you haven't watched the episode\non lists, definitely check that out.\n\n62\n00:03:43.735 --> 00:03:47.543\nThat's where you talked about pepperoni,\nand cheese, and you didn't like onions, so\n\n63\n00:03:47.543 --> 00:03:48.222\nwe changed it.\n\n64\n00:03:48.222 --> 00:03:51.678\nAnd we changed it on the fly,\nand we talked about how list saw,\n\n65\n00:03:51.678 --> 00:03:54.943\nyou changed it at this line in the code,\nso anything past it,\n\n66\n00:03:54.943 --> 00:03:59.020\nwe're not gonna talk about onions,\nwe're gonna talk about more cheese.\n\n67\n00:03:59.020 --> 00:04:03.630\nCannot do that with a tuple, so\nthat's the biggest defining element.\n\n68\n00:04:03.630 --> 00:04:06.366\nOkay, that now gives me a context of\n\n69\n00:04:06.366 --> 00:04:09.035\nhow they're different.\n&gt;&gt; And\n\n70\n00:04:09.035 --> 00:04:13.630\nI'll show you one time that you can\nkinda sidestep that up until this point.\n\n71\n00:04:13.630 --> 00:04:16.045\nBut for the most part,\nyou won't use it that way.\n\n72\n00:04:16.045 --> 00:04:17.310\nIt'll say this is an immutable list.\n\n73\n00:04:17.310 --> 00:04:21.930\nNow, for me, as far as use cases,\nwhen I can, I'll use a tuple,\n\n74\n00:04:21.930 --> 00:04:26.718\nif there's a fixed list, sadly,\nthat's the term I'm gonna use,\n\n75\n00:04:26.718 --> 00:04:31.350\na fixed grouping of things that I\njust wanna kinda keep together.\n\n76\n00:04:32.690 --> 00:04:35.877\nSecondly, kinda where it deviates,\nyou know how I said,\n\n77\n00:04:35.877 --> 00:04:39.662\nif you haven't watched it,\nI'm just gonna give you a quick review.\n\n78\n00:04:39.662 --> 00:04:41.300\nLists, I said,\nyou should keep the same data type.\n\n79\n00:04:41.300 --> 00:04:42.925\nThat is an opinion, you don't have to.\n\n80\n00:04:42.925 --> 00:04:47.960\nPython will let you mix data types, but\na lot of times lists do weird things.\n\n81\n00:04:47.960 --> 00:04:53.140\nIn a tuple, typically you could\neither create all the same data type,\n\n82\n00:04:53.140 --> 00:04:57.460\nor there are examples where a tuple\nmakes sense to have mixed data types,\n\n83\n00:04:57.460 --> 00:05:02.540\nlike strings, and numbers, and other\nthings, because the structure of a tuple\n\n84\n00:05:02.540 --> 00:05:06.070\nusually maps to some meaning to yourself,\nall right?\n\n85\n00:05:06.070 --> 00:05:10.350\nSo, we'll actually explore that and\nkinda delineate those small differences.\n\n86\n00:05:10.350 --> 00:05:12.521\nIn the grand scheme of things,\n\n87\n00:05:12.521 --> 00:05:16.707\nyou could probably just keep\neverything the same, right?\n\n88\n00:05:16.707 --> 00:05:19.137\nOther than you can't mutate,\nit's all good.\n\n89\n00:05:19.137 --> 00:05:20.810\nBut, let's go and\ntake a look at the screen here.\n\n90\n00:05:20.810 --> 00:05:23.190\nAnd let's actually start exploring tuples,\n\n91\n00:05:23.190 --> 00:05:26.310\nbecause right off the bat there's\ngonna be a gotcha, unfortunately.\n\n92\n00:05:28.070 --> 00:05:31.940\nSo, let's go ahead, and\nI have my editor open.\n\n93\n00:05:31.940 --> 00:05:36.460\nAnd all it is is I File &gt; Open, and\nI'm open Programming Fundamentals,\n\n94\n00:05:36.460 --> 00:05:38.310\nthe folder, and that's it.\n\n95\n00:05:38.310 --> 00:05:43.330\nWe have these, and then I also have\na terminal window that is running inside\n\n96\n00:05:43.330 --> 00:05:45.860\nat that present working directory, or\nwe just print the working directory,\n\n97\n00:05:45.860 --> 00:05:47.480\nwe're inside of programming_fundamentals.\n\n98\n00:05:47.480 --> 00:05:49.359\nSo, let's take a look at tuples.py.\n\n99\n00:05:49.359 --> 00:05:53.820\nI may get in trouble for\nthat because sometimes naming these files,\n\n100\n00:05:53.820 --> 00:05:58.594\ncan't remember if this is tuples.py,\nthat already exists in Python,\n\n101\n00:05:58.594 --> 00:06:01.970\nthat's where the tuple is defined.\n\n102\n00:06:01.970 --> 00:06:04.730\nSo it may, like, break stuff,\nand we might have to rename, so\n\n103\n00:06:04.730 --> 00:06:08.027\nwe have to be careful there.\n&gt;&gt; It's like those reserved words or\n\n104\n00:06:08.027 --> 00:06:13.378\nthings, that you can't use false in other\nplaces because it's a reserved word for\n\n105\n00:06:13.378 --> 00:06:15.300\nBooleans, so just avoid it.\n\n106\n00:06:15.300 --> 00:06:18.450\nAnd so\nthis even goes as far up as file names.\n\n107\n00:06:18.450 --> 00:06:19.200\n&gt;&gt; Every once in a while,\n\n108\n00:06:19.200 --> 00:06:21.580\nI'll run into a problem with I'm\ntrying to keep my file names simple,\n\n109\n00:06:21.580 --> 00:06:26.020\nbut you're not typically gonna name\nfiles like data type, like tuples.py.\n\n110\n00:06:26.020 --> 00:06:28.320\nI'm just doing that for\na learning purpose.\n\n111\n00:06:28.320 --> 00:06:32.445\nWe would be using tuples, and lists,\nand other things somewhere else,\n\n112\n00:06:32.445 --> 00:06:36.248\nin files like dataprocessing.py,\nor something of that nature.\n\n113\n00:06:36.248 --> 00:06:39.352\nSo, we have our file now, and\nwe're gonna clear this out, and,\n\n114\n00:06:39.352 --> 00:06:42.560\nwell, let's just take a look at\nhow we would define a tuple.\n\n115\n00:06:42.560 --> 00:06:45.750\nAnd we're gonna just get\nrid of that notification.\n\n116\n00:06:45.750 --> 00:06:47.340\nWe've talked about that at length.\n\n117\n00:06:47.340 --> 00:06:49.340\nSo, let's define some tuples.\n\n118\n00:06:50.510 --> 00:06:52.490\nSome tuples or tuples, all right?\n\n119\n00:06:52.490 --> 00:06:56.320\nLet's say we have a user, all right?\n\n120\n00:06:56.320 --> 00:06:57.570\nThis is a user tuple.\n\n121\n00:06:58.610 --> 00:07:03.340\nThis is the mixed data type version\nwhere it would make sense to have\n\n122\n00:07:03.340 --> 00:07:04.870\nmaybe different data types.\n\n123\n00:07:04.870 --> 00:07:05.990\nNow what do I mean by that?\n\n124\n00:07:05.990 --> 00:07:10.480\nWell, let's actually define this,\nand then we'll kinda backtrack.\n\n125\n00:07:10.480 --> 00:07:14.730\nSo, parentheses,\nit is not square brackets, right?\n\n126\n00:07:14.730 --> 00:07:16.190\nIt is parentheses.\n\n127\n00:07:17.230 --> 00:07:22.050\nSo, Vonne, I'm gonna use you as the user,\nand we actually saw this.\n\n128\n00:07:22.050 --> 00:07:24.540\nI used this as an example\nin a previous episode.\n\n129\n00:07:24.540 --> 00:07:30.080\nAnd well, Vonne, we know that you're\nonly 23, and that your favorite number,\n\n130\n00:07:30.080 --> 00:07:33.510\nno, what's your favorite food, Vonne?\n&gt;&gt; Let's go with pizza.\n\n131\n00:07:33.510 --> 00:07:34.210\n&gt;&gt; All right, pizza,\n\n132\n00:07:34.210 --> 00:07:35.646\npizza is your favorite food.\n\n133\n00:07:35.646 --> 00:07:39.786\nNot pizze, pizza.\n\n134\n00:07:39.786 --> 00:07:41.080\nAnd let's see here.\n\n135\n00:07:41.080 --> 00:07:45.530\nYou have, and I'm gonna put a,\nnotice, put a list inside of here.\n\n136\n00:07:45.530 --> 00:07:49.240\nDon't worry, ooh, doing some crazy stuff.\n\n137\n00:07:49.240 --> 00:07:56.107\nAnd I know fuego and bishop, all right?\n\n138\n00:07:56.107 --> 00:07:57.970\nSo, there's some structure here.\n\n139\n00:07:57.970 --> 00:08:00.189\nRight, even though they're not labeled,\nand\n\n140\n00:08:00.189 --> 00:08:04.140\nwe talked about this in a previous\nepisode, this is meaningful.\n\n141\n00:08:04.140 --> 00:08:05.060\nThis is the first name,\n\n142\n00:08:05.060 --> 00:08:09.070\nthis is the last name, this is an age,\nthis is favorite food and\n\n143\n00:08:09.070 --> 00:08:12.810\nthis is the list of, maybe we'll just\nsay animals instead of respective cats.\n\n144\n00:08:13.930 --> 00:08:17.890\nBut notice I have a string, a string,\na number, another string, but\n\n145\n00:08:17.890 --> 00:08:22.970\nthen here, my fourth element,\nexcuse me, my fifth element,\n\n146\n00:08:22.970 --> 00:08:27.310\nis actually list, inside of that tuple.\n\n147\n00:08:27.310 --> 00:08:29.330\nSo this would have five elements.\n\n148\n00:08:29.330 --> 00:08:34.200\nThis works very similar to a list, so\nI'm gonna speed this up a little bit, but\n\n149\n00:08:34.200 --> 00:08:38.250\nthen this is a list itself,\nso I can do these.\n\n150\n00:08:38.250 --> 00:08:39.410\nNow I wanted to show you that.\n\n151\n00:08:39.410 --> 00:08:40.630\nWe're gonna come back to that, but for\n\n152\n00:08:40.630 --> 00:08:43.610\nnow just to reduce this,\nI'm gonna delete those.\n\n153\n00:08:43.610 --> 00:08:45.521\nWe'll come back and add those in.\n\n154\n00:08:45.521 --> 00:08:47.445\nBut to define our tuple,\nit's just parentheses and\n\n155\n00:08:47.445 --> 00:08:49.324\nthen commas between them,\nvery similar to lists,\n\n156\n00:08:49.324 --> 00:08:51.250\nother than the parentheses.\n&gt;&gt; Yeah,\n\n157\n00:08:51.250 --> 00:08:53.890\nI'm already seeing Excel in my head,.\n\n158\n00:08:53.890 --> 00:08:57.150\nI have the first row is going\nto be like the column headers.\n\n159\n00:08:57.150 --> 00:09:02.010\nAnd then each one on each row is,\nit means something, like A,\n\n160\n00:09:02.010 --> 00:09:07.430\nuser, and so that's where you would\nprobably want to use tuples as,\n\n161\n00:09:07.430 --> 00:09:10.903\nit's kind of like properties of one thing.\n\n162\n00:09:10.903 --> 00:09:15.330\nThey're not random,\nthey mean something together.\n\n163\n00:09:16.710 --> 00:09:20.091\nThey're not just completely random,\nbut I guess they could be?\n\n164\n00:09:20.091 --> 00:09:22.396\n&gt;&gt; So, we could even do this, and\n\n165\n00:09:22.396 --> 00:09:28.354\nto further clarify, build on that,\nwe could say user_fieldnames, like so.\n\n166\n00:09:28.354 --> 00:09:33.031\nAnd this could be another tuple,\n\n167\n00:09:33.031 --> 00:09:38.208\nwhere it's first name, last name,\n\n168\n00:09:38.208 --> 00:09:43.880\nage, and favorite food, like so.\n\n169\n00:09:43.880 --> 00:09:47.850\nSo then this is a tuple that describes\n\n170\n00:09:47.850 --> 00:09:52.140\nthe relative kind of structure\nof these other user tuples.\n\n171\n00:09:52.140 --> 00:09:56.480\nSo if I have a user tuple, well, the first\nelement is gonna be the first name,\n\n172\n00:09:56.480 --> 00:09:58.440\nthe second element's\ngonna be the last name.\n\n173\n00:09:58.440 --> 00:10:02.206\nThird element's gonna be age, and the last\nelement is gonna be favorite food.\n\n174\n00:10:02.206 --> 00:10:05.590\nThere's nothing magic about this,\nI can kind of rearrange these.\n\n175\n00:10:05.590 --> 00:10:09.535\nBut a lot of times in tuples,\neven if this is not explicitly defined,\n\n176\n00:10:09.535 --> 00:10:14.160\nit's kind of implied that the structure\nhas, if they are mixed like this, these\n\n177\n00:10:14.160 --> 00:10:18.940\nare representing a more complex structure\nthan just a simple collection of stuff.\n\n178\n00:10:18.940 --> 00:10:21.700\n&gt;&gt; Now, wouldn't you say this is maybe\n\n179\n00:10:21.700 --> 00:10:25.450\nlike the common way that\nprogrammers use tuples?\n\n180\n00:10:25.450 --> 00:10:29.140\nThat it's almost like you\nare creating a mini database or\n\n181\n00:10:29.140 --> 00:10:33.294\na mini spreadsheet of collections of\nthings that do actually mean something.\n\n182\n00:10:33.294 --> 00:10:36.630\nThe first value, it means something,\nthe second value,\n\n183\n00:10:36.630 --> 00:10:38.990\nthird value, and that's kind of why\n\n184\n00:10:38.990 --> 00:10:43.407\nthey would use a tuple versus a list.\n&gt;&gt; They would use\n\n185\n00:10:43.407 --> 00:10:47.140\na tuple because I don't wanna accidentally\nchange this user record, right?\n\n186\n00:10:47.140 --> 00:10:52.325\nI don't wanna change pizza except\nthrough very transactional or\n\n187\n00:10:52.325 --> 00:10:55.351\nkind of guaranteed ways, all right?\n\n188\n00:10:55.351 --> 00:10:59.023\nAnd we'll see that shortly,\nbut it kinda fixes things, and\n\n189\n00:10:59.023 --> 00:11:01.670\nto some extent it's a semantic use.\n\n190\n00:11:01.670 --> 00:11:03.860\nCould you use a list to\ndo this exact same thing?\n\n191\n00:11:03.860 --> 00:11:05.591\nAbsolutely, you could.\n\n192\n00:11:05.591 --> 00:11:11.860\nI tended not to because tuples help\nme keep from doing weird stuff.\n\n193\n00:11:11.860 --> 00:11:16.720\nAlso, in the Python world, you'll see this\nmore commonly used to represent this mixed\n\n194\n00:11:16.720 --> 00:11:19.804\nstructure than you will in lists.\n&gt;&gt; I think you, what you just said it for\n\n195\n00:11:19.804 --> 00:11:21.670\nme, you don't want this to change.\n\n196\n00:11:21.670 --> 00:11:25.208\nThis is gonna fix, so\njust keep this always the same, and\n\n197\n00:11:25.208 --> 00:11:28.980\nthat's why we would use this as a tuple.\n&gt;&gt; Yep, and just for clarity,\n\n198\n00:11:28.980 --> 00:11:31.280\nI don't mean reassigning\nthe variable change.\n\n199\n00:11:31.280 --> 00:11:33.590\nI could reuse user a bunch of times.\n\n200\n00:11:33.590 --> 00:11:36.835\nI'm saying, Vonne, Smith, 23, pizza.\n\n201\n00:11:36.835 --> 00:11:40.760\nI'm not gonna change any attribute\nof that cuz those all come together.\n\n202\n00:11:40.760 --> 00:11:47.191\nThose are grouped, and they mean something\nonly together, so do keep that in mind.\n\n203\n00:11:47.191 --> 00:11:49.320\nNow, that is one usage.\n\n204\n00:11:49.320 --> 00:11:51.370\nThat is probably the most\ncommon way that I use tuples.\n\n205\n00:11:52.490 --> 00:11:53.375\nThere's another one.\n\n206\n00:11:53.375 --> 00:11:55.090\nLet's just say I wanted numbers.\n\n207\n00:11:55.090 --> 00:11:56.830\nParentheses, all right?\n\n208\n00:11:56.830 --> 00:12:00.541\nAnd then 1, 2, 3, 4, 5, 6.\n\n209\n00:12:00.541 --> 00:12:03.380\nIt's just a list of numbers, and\nit looks very much like a list.\n\n210\n00:12:04.890 --> 00:12:05.420\nGuess what?\n\n211\n00:12:05.420 --> 00:12:09.790\nFor all intents and purposes, if we change\nthese parentheses to square brackets,\n\n212\n00:12:09.790 --> 00:12:12.080\nit's just a list,\nthese work exactly the same.\n\n213\n00:12:12.080 --> 00:12:14.660\nYou can do this, perfectly fine.\n\n214\n00:12:14.660 --> 00:12:18.842\nAnd to some extent, there's not a lot of\ndifference between lists and tuples other\n\n215\n00:12:18.842 --> 00:12:23.160\nthan it's kind of these semantic uses,\nthese thought processes surrounding them.\n\n216\n00:12:23.160 --> 00:12:24.580\nSo, these work.\n\n217\n00:12:25.930 --> 00:12:27.115\nHere's the first gotcha, though.\n\n218\n00:12:27.115 --> 00:12:29.758\nYou ready?\n\n219\n00:12:29.758 --> 00:12:33.837\nSo one_number = (1,\n\n220\n00:12:33.837 --> 00:12:39.004\n) Not numbers,\nthat is supposed to be singular.\n\n221\n00:12:39.004 --> 00:12:48.445\nAnother_number = (1)\nWhen you first start out,\n\n222\n00:12:48.445 --> 00:12:51.060\nyou go, cool, they're both tuples,\nand they contain the number 1.\n\n223\n00:12:53.830 --> 00:12:54.330\nGuess what?\n\n224\n00:12:55.740 --> 00:12:59.270\nLet's see,\nhow can we see what the type of stuff is?\n\n225\n00:12:59.270 --> 00:13:03.858\nSo we're just gonna\nprint(type(one_number)),\n\n226\n00:13:03.858 --> 00:13:06.986\ncuz that is actually a tuple, right?\n\n227\n00:13:06.986 --> 00:13:09.294\nIt's (1, ), or we think it is.\n\n228\n00:13:09.294 --> 00:13:15.414\nAnd then print(type(another_number)),\nright?\n\n229\n00:13:15.414 --> 00:13:19.060\nLet's go run this, see what happens.\n\n230\n00:13:19.060 --> 00:13:22.131\nSo clear, python3, and\nI forgot, there we go.\n\n231\n00:13:22.131 --> 00:13:27.730\nLook at that, the first one is a tuple,\nthe other one is an integer.\n\n232\n00:13:29.400 --> 00:13:35.970\nIf a tuple has a single element, you have\nto put a comma after the single element.\n\n233\n00:13:35.970 --> 00:13:39.770\nIf you do not, then essentially what\nhappens is Python runs through,\n\n234\n00:13:39.770 --> 00:13:42.420\nit evaluates, and it goes, well,\n\n235\n00:13:42.420 --> 00:13:46.860\nthis expression inside\nthe parentheses evaluates to 1.\n\n236\n00:13:46.860 --> 00:13:50.007\nThis is like you’re doing math.\n\n237\n00:13:50.007 --> 00:13:54.090\nThis is like you’re making a tuple,\nall right?\n\n238\n00:13:54.090 --> 00:13:57.910\nSo all it does is it strips these away,\nand this is effectively the exact same\n\n239\n00:13:57.910 --> 00:13:59.390\nthing as that.\n&gt;&gt; I was gonna say,\n\n240\n00:13:59.390 --> 00:14:01.340\nit's just looking at it as a variable.\n\n241\n00:14:01.340 --> 00:14:04.740\nAnd then it's just looking at what\nthe data type is of that variable.\n\n242\n00:14:04.740 --> 00:14:09.300\nOkay, at first I thought you were\ngonna say you can't have a single\n\n243\n00:14:09.300 --> 00:14:13.480\nvalue within a tuple,\nlike it had to contain more than one.\n\n244\n00:14:13.480 --> 00:14:18.254\nThat was my first thought, but then when\nyou read that second line, I was like,\n\n245\n00:14:18.254 --> 00:14:19.979\nhm, what are we doing here?\n\n246\n00:14:19.979 --> 00:14:21.063\n[LAUGH]\n&gt;&gt; And this is a gotcha,\n\n247\n00:14:21.063 --> 00:14:22.740\nbecause you're like, I want a tuple.\n\n248\n00:14:22.740 --> 00:14:25.697\nThis only has one thing, and\nthis may be because you're interacting or\n\n249\n00:14:25.697 --> 00:14:29.065\nyou're messing with tuples, you're like,\nthere's one thing in there.\n\n250\n00:14:29.065 --> 00:14:32.907\nOkay, that's great,\nexcept if you forget the comma,\n\n251\n00:14:32.907 --> 00:14:37.670\nit doesn't actually make it a tuple,\nit evaluates the expression.\n\n252\n00:14:37.670 --> 00:14:38.990\nIt says, this is just the number 1.\n\n253\n00:14:40.170 --> 00:14:43.770\nHere's a further,\nsecond gotcha along these same lines.\n\n254\n00:14:43.770 --> 00:14:48.632\nBecause you’re like,\nokay, that's not a tuple,\n\n255\n00:14:48.632 --> 00:14:51.764\nbut, What is that?\n\n256\n00:14:51.764 --> 00:14:55.310\nIt's just a set of parentheses,\nthere's nothing in it.\n\n257\n00:14:58.377 --> 00:14:59.800\nHm, that's interesting.\n\n258\n00:14:59.800 --> 00:15:02.430\nWell, you said there has to\nbe a comma with one in there.\n\n259\n00:15:02.430 --> 00:15:05.613\nSo I'm gonna guess that this\nis just like nothing, or\n\n260\n00:15:05.613 --> 00:15:07.819\nit breaks, or something like that.\n\n261\n00:15:07.819 --> 00:15:09.150\nWell, let's take a look.\n\n262\n00:15:09.150 --> 00:15:10.350\nWhen in doubt, check it out.\n\n263\n00:15:12.270 --> 00:15:14.070\nSo, print empty.\n\n264\n00:15:14.070 --> 00:15:18.660\nAnd my variable name has kinda\ngiven my hand a little bit.\n\n265\n00:15:18.660 --> 00:15:20.180\nSo, boom!\n\n266\n00:15:20.180 --> 00:15:23.500\nWhat's funny is that one doesn't have\na comma in it and actually is a tuple.\n\n267\n00:15:24.650 --> 00:15:28.268\nI don't make the rule,\nI'm just telling you about it.\n\n268\n00:15:28.268 --> 00:15:32.367\nThat's the gotcha, they kinda all\ncombine together, because the gotcha is,\n\n269\n00:15:32.367 --> 00:15:36.913\nyou're like, well, I need a comma, all\nright, but I really need an empty tuple.\n\n270\n00:15:36.913 --> 00:15:38.240\nWhy would I need an empty tuple?\n\n271\n00:15:38.240 --> 00:15:40.551\nI'm trying to show you,\nthis tuple would be,\n\n272\n00:15:40.551 --> 00:15:42.760\nthere is the absence of something, right?\n\n273\n00:15:44.030 --> 00:15:46.430\nThere's nothing there, but\nit is a tuple data type.\n\n274\n00:15:47.550 --> 00:15:50.249\nBut if you put parentheses without\nanything in it, it is a tuple.\n\n275\n00:15:50.249 --> 00:15:53.562\nBut if you put a single thing in it,\nwhether it be a number, or a string, or\n\n276\n00:15:53.562 --> 00:15:55.980\nwhatever, without a comma,\nit's just that thing.\n\n277\n00:15:57.730 --> 00:15:59.598\nSuper, super tricky.\n\n278\n00:15:59.598 --> 00:16:04.138\nSo to boil it down, you need a comma for\na single element, and\n\n279\n00:16:04.138 --> 00:16:08.610\nif you want no elements,\njust put parentheses, no comma.\n\n280\n00:16:08.610 --> 00:16:11.920\nCrazy stuff, like I said, I don't make the\nrules, I'm just telling you about them.\n\n281\n00:16:11.920 --> 00:16:14.354\n&gt;&gt; But would you wanna use an empty tuple?\n\n282\n00:16:14.354 --> 00:16:19.187\nCuz I thought you said they're immutable,\nyou can't change it.\n\n283\n00:16:19.187 --> 00:16:22.424\nSo I'm thinking, you'd want it empty,\nbecause you wanna populate later.\n\n284\n00:16:22.424 --> 00:16:28.111\nI'm like, wait, but you can't do that?\n&gt;&gt; So we couldn't populate, we could apply\n\n285\n00:16:28.111 --> 00:16:34.230\ntransformations that generate new tuples\nfrom this, and kinda build up over time.\n\n286\n00:16:34.230 --> 00:16:37.836\nBut secondly, you actually made a comment\nabout database, now we're kinda early on,\n\n287\n00:16:37.836 --> 00:16:39.702\nyou may not have\nexperience with databases.\n\n288\n00:16:39.702 --> 00:16:43.806\nBut let's say I go to look up\nsomeone in a spreadsheet, right,\n\n289\n00:16:43.806 --> 00:16:46.677\nassuming that it's kind of database like.\n\n290\n00:16:46.677 --> 00:16:52.071\nAnd we look up Genghis Khan,\nbut he's not in our users.\n\n291\n00:16:52.071 --> 00:16:56.921\nWell, if every time I've looked up\nVonne or Justin, I get a tuple back,\n\n292\n00:16:56.921 --> 00:17:00.271\nbut Genghis Khan isn't there,\nwhat do I return?\n\n293\n00:17:00.271 --> 00:17:04.916\nWhat do I say, hey, here's what this is,\n\n294\n00:17:04.916 --> 00:17:08.021\ndo I just go, I don't know?\n\n295\n00:17:08.021 --> 00:17:13.350\nWell, no, you may actually return an empty\ntuple and say, I got nothing for you.\n\n296\n00:17:13.350 --> 00:17:17.398\nSo it's saying the tuple's the data type,\nbut there's just nothing to put in it.\n\n297\n00:17:17.398 --> 00:17:19.141\n&gt;&gt; Okay, this is one of those,\n\n298\n00:17:19.141 --> 00:17:23.220\nit's not like you can do this but\nyou shouldn't, don't do this.\n\n299\n00:17:23.220 --> 00:17:26.840\nThis is more of a,\nthere are like legitimate uses of\n\n300\n00:17:26.840 --> 00:17:30.130\nwhy you'd want an empty tuple,\nlike the example you just gave.\n\n301\n00:17:30.130 --> 00:17:34.926\nSo it's not the first, pretend you\ndidn't even know it can do that,\n\n302\n00:17:34.926 --> 00:17:36.261\nit can but don't.\n\n303\n00:17:36.261 --> 00:17:40.480\nThis, yes, this is okay, you can use this.\n&gt;&gt; And\n\n304\n00:17:40.480 --> 00:17:42.170\nthere are times where I get empty tuples.\n\n305\n00:17:43.270 --> 00:17:47.442\nSome uses, it can cause breakages, but\nI would rather have it break in my face,\n\n306\n00:17:47.442 --> 00:17:49.267\nblow up and go, that's bad.\n\n307\n00:17:49.267 --> 00:17:52.925\nOther than it kind of silently going,\nthere's nothing to see here,\n\n308\n00:17:52.925 --> 00:17:53.878\njust us breaking.\n\n309\n00:17:53.878 --> 00:17:59.540\nSo defining tuples already has a gotcha,\nI don't know if I like these tuple things.\n\n310\n00:17:59.540 --> 00:18:03.550\nThat's all right, because there's less\nthat they can do, there's less ways for\n\n311\n00:18:03.550 --> 00:18:05.540\nyou to mess stuff up.\n\n312\n00:18:05.540 --> 00:18:08.690\nAnd I'm not saying you in particular,\nI'm including me in that group.\n\n313\n00:18:08.690 --> 00:18:11.441\nI mess stuff up all the time,\nperfectly all right.\n\n314\n00:18:11.441 --> 00:18:14.716\nIn the meantime, I'm gonna highlight\nthat and just comment those out,\n\n315\n00:18:14.716 --> 00:18:15.582\njust for a moment.\n\n316\n00:18:15.582 --> 00:18:18.256\nCuz I'm gonna keep this empty,\nand this user and this number,\n\n317\n00:18:18.256 --> 00:18:20.080\nthose are the ones we're gonna work with.\n\n318\n00:18:21.280 --> 00:18:26.130\nWe may pull these in a couple of times,\nbut as always,\n\n319\n00:18:26.130 --> 00:18:29.932\nwhat are some common\noperations with tuples?\n\n320\n00:18:29.932 --> 00:18:34.947\nWell, I will tell you this,\nwe should always try plus,\n\n321\n00:18:34.947 --> 00:18:39.026\nminus, multiply, and divide, all right?\n\n322\n00:18:39.026 --> 00:18:44.435\nLet's see, result = let's just go\n\n323\n00:18:44.435 --> 00:18:49.679\nwith numbers + numbers, like so.\n\n324\n00:18:52.606 --> 00:18:55.150\nSo I've got a tuple and a tuple,\nany time you start doing these,\n\n325\n00:18:55.150 --> 00:18:56.430\nalways take the two data types.\n\n326\n00:18:56.430 --> 00:18:59.277\nI have a tuple and a tuple and I'm adding\nthem together, what am I gonna get?\n\n327\n00:18:59.277 --> 00:19:02.781\nSo print(result) and clear,\n\n328\n00:19:02.781 --> 00:19:07.849\npython tuples, and\nit works just like a list.\n\n329\n00:19:07.849 --> 00:19:14.120\nA tuple plus a tuple is a tuple with all\nthe stuff from the original two tuples.\n\n330\n00:19:14.120 --> 00:19:17.219\nYou do not have to have the same number\nof things, or even the same data types.\n\n331\n00:19:17.219 --> 00:19:22.782\nIf I change this to user, and\nI rerun this, then it's 1,\n\n332\n00:19:22.782 --> 00:19:28.138\n2, 3, 4, 5, 6, Vonne, Smith, 23, pizza.\n\n333\n00:19:28.138 --> 00:19:30.652\nWhy did it do that,\nbecause the user was second, so\n\n334\n00:19:30.652 --> 00:19:34.054\nthe order that they're added is\nthe order that they kind of combine.\n\n335\n00:19:34.054 --> 00:19:40.998\nWell, if that works, let's change\nthis back to numbers, like so.\n\n336\n00:19:40.998 --> 00:19:47.792\nLet's say minus, all right, and no,\na tuple minus a tuple doesn't work.\n\n337\n00:19:47.792 --> 00:19:49.064\nWhat about multiply?\n\n338\n00:19:52.994 --> 00:19:56.818\nTuples, and nope,\ncan't multiply two tuples.\n\n339\n00:19:56.818 --> 00:20:01.009\nWhat about divide, probably not, but,\n\n340\n00:20:01.009 --> 00:20:04.854\ntuples, nope, can't divide them.\n\n341\n00:20:04.854 --> 00:20:08.350\nAll right, so we've tried a tuple and\na tuple, okay,\n\n342\n00:20:08.350 --> 00:20:12.910\nwe know that plus works for two tuples or\nan arbitrary number of tuples.\n\n343\n00:20:12.910 --> 00:20:16.340\nI could do tuple plus a tuple\nplus a tuple plus a tuple, but\n\n344\n00:20:16.340 --> 00:20:17.940\nwhat about the other things?\n\n345\n00:20:17.940 --> 00:20:23.210\nWell, let's try that thing we did with\nlist, where we did a tuple times a number.\n\n346\n00:20:23.210 --> 00:20:27.945\nLet's see if we get a result,\nclear this out, tuples.\n\n347\n00:20:27.945 --> 00:20:30.085\nAnd that actually behaves\njust like a list.\n\n348\n00:20:30.085 --> 00:20:34.982\nYou're like, Justin, listen, other than\nthe parentheses, up until this point,\n\n349\n00:20:34.982 --> 00:20:36.760\nthis kind of looks like a list.\n\n350\n00:20:37.920 --> 00:20:41.019\nYou're right, and for\nall intents and purposes,\n\n351\n00:20:41.019 --> 00:20:46.580\nthese operations that we saw in the list\nepisode, they work for tuples as well.\n\n352\n00:20:46.580 --> 00:20:51.912\nRight, so I can multiply, I can add\ntwo tuples, and that's all good to go.\n\n353\n00:20:51.912 --> 00:20:57.354\nHere's the trick,\nanytime you use these operations,\n\n354\n00:20:57.354 --> 00:21:03.274\nI get a new tuple,\nI'm not accidentally changing numbers.\n\n355\n00:21:03.274 --> 00:21:07.656\nnumbers will always, from here on out,\nbe 1, 2, 3, 4, 5, 6,\n\n356\n00:21:07.656 --> 00:21:09.719\nunless I reassign the variable.\n\n357\n00:21:09.719 --> 00:21:17.470\nIf I come down here and do this, That,\nI didn't change the 1, 2, 3, 4, 5, 6.\n\n358\n00:21:17.470 --> 00:21:22.772\nI just said, well, the numbers variable\nfrom here on out actually means 1,\n\n359\n00:21:22.772 --> 00:21:24.907\n2, 3, which is a new tuple.\n\n360\n00:21:24.907 --> 00:21:27.064\nSo don't get this confused,\nyou have to be careful there.\n\n361\n00:21:27.064 --> 00:21:32.066\nSo, what do we got,\nwe got, add two tuples or\n\n362\n00:21:32.066 --> 00:21:37.620\nadd n tuples,\nn just being some number of tuples.\n\n363\n00:21:37.620 --> 00:21:42.497\nAnd then we multiply a tuple by\n\n364\n00:21:42.497 --> 00:21:46.991\nan int, int is important.\n\n365\n00:21:46.991 --> 00:21:51.946\n3.2 times a tuple doesn't make any sense,\nwhat is 0.2 of a tuple?\n\n366\n00:21:51.946 --> 00:21:55.332\nAll right,\nthat was pretty breakneck pace there,\n\n367\n00:21:55.332 --> 00:21:59.830\nbut it's not a lot different than\nwhat we've already seen, okay?\n\n368\n00:21:59.830 --> 00:22:06.247\nBut you know what, if I know,\nlet's take this user one,\n\n369\n00:22:06.247 --> 00:22:10.406\nand what about accessing elements?\n\n370\n00:22:10.406 --> 00:22:16.798\nIf I know this user, and\nI'm just gonna print this out, like so.\n\n371\n00:22:16.798 --> 00:22:21.069\nAnd what if I want the first name,\n\n372\n00:22:21.069 --> 00:22:24.893\nwell, that's user[0].\n\n373\n00:22:24.893 --> 00:22:29.529\nI know that I have to remember that\nthe first element of this user\n\n374\n00:22:29.529 --> 00:22:31.374\ntuple is the first name.\n\n375\n00:22:31.374 --> 00:22:34.461\nThis works just like a list,\nthere's no special syntax,\n\n376\n00:22:34.461 --> 00:22:36.100\nit's still square brackets.\n\n377\n00:22:36.100 --> 00:22:40.330\nIt works just like a a string in a list,\nwell, what does that mean?\n\n378\n00:22:40.330 --> 00:22:45.354\nThat means that I have print(first_name),\n\n379\n00:22:45.354 --> 00:22:48.126\nlike so, clear this out.\n\n380\n00:22:50.440 --> 00:22:54.234\nAnd I now have Vonne as a string,\nI just pulled that out, all right.\n\n381\n00:22:54.234 --> 00:22:58.094\nYou're like, well, that's not any,\nokay, that's very much the same.\n\n382\n00:22:58.094 --> 00:23:01.310\nWhat if I want the first and\nthe last name, okay?\n\n383\n00:23:02.510 --> 00:23:07.320\nWell, that's the first two elements,\nthat's 0 and 1.\n\n384\n00:23:07.320 --> 00:23:09.851\nBut I wanna grab those as a group,\n\n385\n00:23:09.851 --> 00:23:15.370\nI want it to essentially subset that\ntuple, right, or I could project or\n\n386\n00:23:15.370 --> 00:23:20.146\nwhatever it may be.\n&gt;&gt; I think you're gonna type in colon,\n\n387\n00:23:20.146 --> 00:23:24.622\nand then 3,\nbecause that's the stopping point.\n\n388\n00:23:24.622 --> 00:23:29.656\nSo that way we'll take,\nno, wait, no, 2, 0, 1, 2.\n\n389\n00:23:29.656 --> 00:23:32.456\nSo that way, am I on the right track?\n\n390\n00:23:32.456 --> 00:23:36.376\nCuz I'm like, this sounds exactly like all\nthe stuff we've already done, am I close?\n\n391\n00:23:36.376 --> 00:23:40.267\n&gt;&gt; 0:2, and I wasn't explicit about this\n\n392\n00:23:40.267 --> 00:23:45.139\nthis is still index of zero,\nit's still zero based.\n\n393\n00:23:45.139 --> 00:23:49.081\nEverything I run from here on out,\nif it has an order and\n\n394\n00:23:49.081 --> 00:23:53.050\nyou can access into it,\nprobably gonna be zero based.\n\n395\n00:23:54.140 --> 00:23:57.086\nAs long as that makes sense for\nthe respective time.\n\n396\n00:23:57.086 --> 00:23:59.990\nYou said zero colon two, is that right?\n\n397\n00:23:59.990 --> 00:24:05.078\nYes, because that would tell you,\nthat's the slicing that\n\n398\n00:24:05.078 --> 00:24:11.188\nwe would want because the two is\nthe stopping point of where we want to be.\n\n399\n00:24:11.188 --> 00:24:15.420\nYep, the two is the stopping point.\n\n400\n00:24:15.420 --> 00:24:20.880\nAnd well, if we come here and\nlook at python tuples,\n\n401\n00:24:20.880 --> 00:24:24.630\nyou're exactly correct, right.\n\n402\n00:24:24.630 --> 00:24:29.490\nSo zero colon two, and look, when we\nslice, we actually get a tuple back.\n\n403\n00:24:30.510 --> 00:24:34.390\nSo we get a new tuple with your first and\nlast name from the user one.\n\n404\n00:24:35.670 --> 00:24:39.495\nIts not actually causing any\nissues with the original tuple.\n\n405\n00:24:39.495 --> 00:24:44.390\nSo a user, and then if I slice\na tuple I get a tuple back.\n\n406\n00:24:44.390 --> 00:24:46.420\nIf I slice a list, I get a list back.\n\n407\n00:24:46.420 --> 00:24:49.050\nIf I slice a string, I get a string back.\n\n408\n00:24:49.050 --> 00:24:51.710\nSo that same thing applies.\n\n409\n00:24:51.710 --> 00:24:58.260\nBut you know what, Vonne,\nyou said that I like pizza but\n\n410\n00:24:58.260 --> 00:25:02.070\nyou told me off camera you're like\nI really like burritos, too, right.\n\n411\n00:25:02.070 --> 00:25:05.350\nSo what if we come here and\nI'm just gonna comment,\n\n412\n00:25:05.350 --> 00:25:07.565\nexcuse me I'm gonna leave that but\nI'm gonna take out the print.\n\n413\n00:25:07.565 --> 00:25:12.588\nYou're like, I really like my\nfavorite food and if we go up here,\n\n414\n00:25:12.588 --> 00:25:16.020\nright, your favorite\nfood is the last element.\n\n415\n00:25:16.020 --> 00:25:18.490\nWell, minus one, that still works.\n\n416\n00:25:18.490 --> 00:25:21.830\nI'm starting from the right hand side and\nI'm going backwards, okay.\n\n417\n00:25:23.170 --> 00:25:26.690\nI wanna make that burrito, like that.\n\n418\n00:25:26.690 --> 00:25:29.050\nWell, that works in a list.\n\n419\n00:25:29.050 --> 00:25:31.760\nLet's see what happens.\n\n420\n00:25:33.095 --> 00:25:34.207\nLike so.\n\n421\n00:25:36.712 --> 00:25:43.000\nSo python3 tuples and\ntuple does not support item assignment.\n\n422\n00:25:43.000 --> 00:25:44.670\nI cannot change these.\n\n423\n00:25:44.670 --> 00:25:45.940\nLikewise, you're like, you know what?\n\n424\n00:25:45.940 --> 00:25:46.900\nI don't really have a favorite food.\n\n425\n00:25:46.900 --> 00:25:49.910\nThere is that Del keyword.\n\n426\n00:25:51.240 --> 00:25:51.770\nFor delete.\n\n427\n00:25:52.960 --> 00:25:53.460\nCan't do it.\n\n428\n00:25:54.900 --> 00:25:55.710\nStill broken.\n\n429\n00:25:55.710 --> 00:25:58.040\nCannot item delete and\nlet's clear that out and rerun it so\n\n430\n00:25:58.040 --> 00:26:00.130\neverybody can see here.\n\n431\n00:26:00.130 --> 00:26:01.400\nTuples.\n\n432\n00:26:01.400 --> 00:26:03.390\nTuple object doesn't\nsupport item deletion.\n\n433\n00:26:03.390 --> 00:26:04.320\nCan't do that either.\n\n434\n00:26:04.320 --> 00:26:07.170\nThey are immutable.\n&gt;&gt; Immutable, I was saying you said that.\n\n435\n00:26:07.170 --> 00:26:08.310\nYou can't change them.\n\n436\n00:26:08.310 --> 00:26:10.020\nThey are going to be fixed so\n\n437\n00:26:10.020 --> 00:26:14.820\nyou can't append, you can't delete, you\ncan't pop the thing that we were doing.\n\n438\n00:26:14.820 --> 00:26:17.990\nIt doesn't work on a tuple.\n&gt;&gt; Nope.\n\n439\n00:26:17.990 --> 00:26:19.980\nWe can access elements.\n\n440\n00:26:19.980 --> 00:26:23.820\nWe can use all the indexing\ntricks that we did with lists.\n\n441\n00:26:23.820 --> 00:26:30.600\nWe can't reassign or delete,\nexcept there's a trick, all right.\n\n442\n00:26:30.600 --> 00:26:31.230\nYou ready?\n\n443\n00:26:31.230 --> 00:26:32.180\nYou ready, Vonne?\n&gt;&gt; Okay.\n\n444\n00:26:33.510 --> 00:26:35.140\n&gt;&gt; You're probably gonna get angry at me.\n\n445\n00:26:35.140 --> 00:26:36.560\nI'm not gonna lie.\n\n446\n00:26:36.560 --> 00:26:40.010\nLet's go up here and\nlet's add a header, right.\n\n447\n00:26:40.010 --> 00:26:41.460\nAnd let's just say, pets.\n\n448\n00:26:41.460 --> 00:26:44.916\nAnd we're gonna add those pets back,\nthat we started out with,\n\n449\n00:26:44.916 --> 00:26:46.260\nwhich is a list, right.\n\n450\n00:26:46.260 --> 00:26:52.140\nFuego and bishop, all right?\n\n451\n00:26:52.140 --> 00:26:57.140\nSo, there we go, and that is now\nthe last element in that tuple.\n\n452\n00:26:57.140 --> 00:26:58.510\nAnd I said you can't change the tuple.\n\n453\n00:26:58.510 --> 00:27:02.720\nWe already saw, if I do negative one\nequals something, can't do that.\n\n454\n00:27:02.720 --> 00:27:10.164\nBut what if I do user(-1)append( 3).\n\n455\n00:27:10.164 --> 00:27:17.510\nI'm doing some kinda magician kinda\nshenanigans there, and print(user).\n\n456\n00:27:17.510 --> 00:27:20.100\nWell I just told you their immutable and\nyou can't do that.\n\n457\n00:27:20.100 --> 00:27:21.090\nYou’re changing the tuple.\n\n458\n00:27:22.610 --> 00:27:23.120\nWell let's see.\n\n459\n00:27:24.180 --> 00:27:29.730\nSo clear this out, python3.\n\n460\n00:27:29.730 --> 00:27:30.800\nCan't spell python, I can.\n\n461\n00:27:32.205 --> 00:27:36.220\nYou're like,\nwell you lied to me Justin, you lied.\n\n462\n00:27:37.490 --> 00:27:42.750\nHere's the trick,\nI can't change the top level tuple,\n\n463\n00:27:42.750 --> 00:27:47.360\nbut there is no guarantees about\ncomplex things inside of a tuple.\n\n464\n00:27:47.360 --> 00:27:49.970\nI haven't changed the tuple per say.\n\n465\n00:27:49.970 --> 00:27:54.290\nI've actually changed the list that\nis in the tuple, which is tricky,\n\n466\n00:27:54.290 --> 00:27:55.110\ntricky, tricky.\n\n467\n00:27:56.130 --> 00:27:57.420\nBut it is something you can do.\n\n468\n00:27:57.420 --> 00:27:58.490\nAnd you have to be aware of it.\n\n469\n00:27:58.490 --> 00:27:59.750\nYou gotta be careful of.\n&gt;&gt; Okay,\n\n470\n00:27:59.750 --> 00:28:04.230\nI see, because at first I'm like,\nwait, wait, it's in the bracket.\n\n471\n00:28:04.230 --> 00:28:08.520\nYou just appended the list since, because\nyou can't append a tuple by saying well,\n\n472\n00:28:08.520 --> 00:28:10.540\nappend when the last thing is a list.\n\n473\n00:28:10.540 --> 00:28:12.180\nSo it's list, I can put it in there.\n\n474\n00:28:12.180 --> 00:28:19.570\nNow, if that last element had not been a\nlist, would we still get the same result?\n\n475\n00:28:19.570 --> 00:28:23.970\nIs it just because the list\ndata type in that last spot?\n\n476\n00:28:23.970 --> 00:28:26.840\n&gt;&gt; A list is mutable.\n\n477\n00:28:26.840 --> 00:28:27.530\nSo we can do that.\n\n478\n00:28:27.530 --> 00:28:30.730\nThere's a couple other things that are\nmutable, we haven't quite got to those.\n\n479\n00:28:30.730 --> 00:28:34.380\nBut if the element in\nthe tuple can be mutated,\n\n480\n00:28:35.720 --> 00:28:38.670\nthen technically you can\nchange it inside the tuple.\n\n481\n00:28:40.040 --> 00:28:41.573\nHowever-\n&gt;&gt; Okay, sorry, so\n\n482\n00:28:41.573 --> 00:28:46.514\nif that had been an integer, if we had\nfive, then what you just wrote would not\n\n483\n00:28:46.514 --> 00:28:49.230\nwork, cuz you can't.\n&gt;&gt; I'm\n\n484\n00:28:49.230 --> 00:28:50.720\nnot changing 5.\n&gt;&gt; Yes.\n\n485\n00:28:50.720 --> 00:28:52.500\n&gt;&gt; Every time I change 5,\n\n486\n00:28:52.500 --> 00:28:57.060\nI actually, I'm not,\nI actually get a new number, right?\n\n487\n00:28:57.060 --> 00:29:01.630\n5 plus 2 is not, well it's just 5, but\nwe changed it a little, it's actually 7,\n\n488\n00:29:01.630 --> 00:29:02.940\nit's a different number.\n\n489\n00:29:02.940 --> 00:29:04.540\nThough we haven't talked about that.\n\n490\n00:29:04.540 --> 00:29:07.480\nI left that out cuz it would\nhave been kinda crazy.\n\n491\n00:29:07.480 --> 00:29:08.990\nNumbers are immutable.\n\n492\n00:29:08.990 --> 00:29:10.810\nStrings, you can't change strings.\n\n493\n00:29:10.810 --> 00:29:14.075\nI actually said in the previous episode,\nyou can't change strings.\n\n494\n00:29:14.075 --> 00:29:19.180\nLet's see here, you ready?\n\n495\n00:29:19.180 --> 00:29:21.560\nLet's try something with\nthis favorite pizza.\n\n496\n00:29:21.560 --> 00:29:26.955\nSo I'm gonna do a negative two, all right.\n\n497\n00:29:26.955 --> 00:29:31.830\nSo pizza, and I'm gonna say\n\n498\n00:29:31.830 --> 00:29:37.723\nthat's equal to user(-2) and\n\n499\n00:29:37.723 --> 00:29:41.186\n+ with mushrooms.\n\n500\n00:29:41.186 --> 00:29:42.280\nOkay, see that right there?\n\n501\n00:29:42.280 --> 00:29:45.442\nThat's probably going to break, because\nI'm assigning something into the tuple.\n\n502\n00:29:48.185 --> 00:29:51.670\nAnd so we clear this out, python3 tuples.\n\n503\n00:29:51.670 --> 00:29:53.400\nNope, cannot do object assignment.\n\n504\n00:29:53.400 --> 00:29:57.860\nYou're like, all right, well listen,\nhere's what I'm gonna do.\n\n505\n00:29:57.860 --> 00:30:01.800\nI'm just gonna say +, right?\n\n506\n00:30:01.800 --> 00:30:05.290\nCuz this is pizza with mushrooms, and\nthere should probably be a space there.\n\n507\n00:30:06.630 --> 00:30:11.200\nSo still doesn't change it\nbecause it's not reassigning.\n\n508\n00:30:12.440 --> 00:30:16.200\nAnd you're like, well there\ndoesn't seem anyway you can do it.\n\n509\n00:30:16.200 --> 00:30:19.983\nStrings are immutable as well,\nyou can't do it.\n\n510\n00:30:19.983 --> 00:30:25.126\nLists are, dictionaries, which we haven't\nactually like kinda dived into, numbers,\n\n511\n00:30:25.126 --> 00:30:30.240\nthey're all immutable, you're getting\na new result when you do these things.\n\n512\n00:30:30.240 --> 00:30:34.250\nLists are mutable, so\nI can change an internal list,\n\n513\n00:30:34.250 --> 00:30:38.410\nand there's other things that will be\nmutable as well that I can change.\n\n514\n00:30:38.410 --> 00:30:40.740\nSo something to keep in mind.\n\n515\n00:30:40.740 --> 00:30:42.630\nFor the most part,\nwhat we know about lists,\n\n516\n00:30:42.630 --> 00:30:47.030\nkind of applies to tuples other than their\nmutability, there are a couple of gashes.\n\n517\n00:30:47.030 --> 00:30:51.280\nAnd before we get out of here,\ntuples, I will use tuples,\n\n518\n00:30:51.280 --> 00:30:54.220\na lot of times I use lists\nwhen first starting out.\n\n519\n00:30:54.220 --> 00:30:55.004\nBefore we get out of here,\n\n520\n00:30:55.004 --> 00:31:00.180\nwhen in doubt about capabilities,\nhop into the ripple, all right.\n\n521\n00:31:00.180 --> 00:31:06.150\nSo I'm just gonna create a tuple, poorly\nwritten tuple, but there it is, right.\n\n522\n00:31:06.150 --> 00:31:07.640\nWhat is the type?\n\n523\n00:31:07.640 --> 00:31:08.355\nIt's an X.\n\n524\n00:31:08.355 --> 00:31:13.390\ndir(x) and it's funny.\n\n525\n00:31:13.390 --> 00:31:17.920\nI've always told you,\ndisregard all the underscore things.\n\n526\n00:31:19.420 --> 00:31:21.300\nThere are two objects.\n\n527\n00:31:21.300 --> 00:31:24.000\nLet's clear this out and say, dir, there\n\n528\n00:31:25.890 --> 00:31:29.800\nare two things that are not underscored,\ncount and index.\n\n529\n00:31:31.340 --> 00:31:34.890\nThat's actually pretty much\nall you can do with a tuple.\n\n530\n00:31:34.890 --> 00:31:35.964\nWell, what is count?\n\n531\n00:31:35.964 --> 00:31:41.760\nX.count, T.count where\nT is the tuple value,\n\n532\n00:31:41.760 --> 00:31:44.832\nreturn the number of\noccurrences of the value, okay.\n\n533\n00:31:44.832 --> 00:31:48.380\nWhat about index?\n\n534\n00:31:50.785 --> 00:31:54.740\nT.index value start, stop,\nthese are optional parameters.\n\n535\n00:31:54.740 --> 00:31:58.346\nReturn the first index of, essentially\nfind it and tell me where it is.\n\n536\n00:31:58.346 --> 00:32:01.920\nAll right, well,\nwhat does that mean we could do?\n\n537\n00:32:01.920 --> 00:32:07.390\nI can say x.count, the number 2,\nthere's one number 2 in there.\n\n538\n00:32:07.390 --> 00:32:08.970\nIf I said x is 2, 2.\n\n539\n00:32:08.970 --> 00:32:12.790\nNo, wait a minute, wait a minute.\n\n540\n00:32:12.790 --> 00:32:13.758\nNope, let's try that again.\n\n541\n00:32:13.758 --> 00:32:15.526\nLike that, right.\n\n542\n00:32:15.526 --> 00:32:17.710\nAnd we re-ran that.\n\n543\n00:32:17.710 --> 00:32:19.869\nI'm just hitting up in the ripple.\n\n544\n00:32:19.869 --> 00:32:22.410\nI can run back through commands,\nthere's five 2's in there.\n\n545\n00:32:23.490 --> 00:32:29.590\nBut if I do index(2),\nit says it's at position zero or index(0).\n\n546\n00:32:29.590 --> 00:32:34.020\nIt doesn't give me all of them,\nit only gives me the first one.\n\n547\n00:32:35.020 --> 00:32:40.190\nIf I instead said,\nwell I want you to start at index(2),\n\n548\n00:32:40.190 --> 00:32:45.020\nright, so, zero, one, two, it says,\n\n549\n00:32:45.020 --> 00:32:48.960\nit's at four because that's\nthe next one after index two.\n\n550\n00:32:48.960 --> 00:32:53.210\nIf I said I want you to stop\nat index four, all right.\n\n551\n00:32:53.210 --> 00:32:56.450\nSo start here,\nactually let me shift these so\n\n552\n00:32:56.450 --> 00:32:58.142\nthat I can make sure\nthere's nothing in there.\n\n553\n00:32:59.765 --> 00:33:02.220\nValue error, it'll say not in the tuple.\n\n554\n00:33:02.220 --> 00:33:03.560\nWhy is it not?\n\n555\n00:33:03.560 --> 00:33:08.630\nHere's one, two, three, there's no\ntwo in there so we'll throw an error.\n\n556\n00:33:08.630 --> 00:33:12.250\nThose are the only two things that you\ncan do with tuples other than create new\n\n557\n00:33:12.250 --> 00:33:14.370\ntuples and access them.\n\n558\n00:33:14.370 --> 00:33:19.720\nThey're very simple, however they we\nwill keep you from doing bad things like\n\n559\n00:33:19.720 --> 00:33:23.720\nwell you know that used to be your last\nname, Vonne, but now it just says crowbar.\n\n560\n00:33:23.720 --> 00:33:25.930\nI don't know what that's all about, right.\n\n561\n00:33:25.930 --> 00:33:28.970\nSo immutability can be helpful\nespecially about reasoning.\n\n562\n00:33:28.970 --> 00:33:31.380\nBut the things that we learn.\n\n563\n00:33:31.380 --> 00:33:35.160\nAnd you're like, well, Python, seems like\nwe just keep learning the same things.\n\n564\n00:33:35.160 --> 00:33:38.685\nThere are some small differences but\nthat's actually the power.\n\n565\n00:33:38.685 --> 00:33:41.390\nYou're like,\nI just need to learn a few things and\n\n566\n00:33:41.390 --> 00:33:45.826\nI can continue to apply those\nto further build understanding.\n\n567\n00:33:45.826 --> 00:33:48.580\nBut, Vonne,\nother than those couple of gotchas of\n\n568\n00:33:48.580 --> 00:33:52.530\ncreating a tuple,\nI think we got everything covered when it\n\n569\n00:33:52.530 --> 00:33:55.375\ncomes to tuples.\n&gt;&gt; All right, well, the power is in\n\n570\n00:33:55.375 --> 00:33:58.990\nthe minutia of all of these different\nfundamentals that we're learning so\n\n571\n00:33:58.990 --> 00:34:03.710\nthank you so much for that on tuples but\nwe're gonna tip toe on out of the tuples.\n\n572\n00:34:03.710 --> 00:34:05.410\nSo coming on back with more.\n\n573\n00:34:05.410 --> 00:34:07.180\nBut for now we're gonna go ahead and\nsign out.\n\n574\n00:34:07.180 --> 00:34:09.260\nFor DevPro TV,\nI've been your host Vonne Smith.\n\n575\n00:34:09.260 --> 00:34:10.060\n&gt;&gt; And I'm Justin Dennison.\n\n576\n00:34:10.060 --> 00:34:10.947\n&gt;&gt; We'll see you soon.\n\n577\n00:34:10.947 --> 00:34:15.013\n[MUSIC]\n\n",
          "vimeoId": "268420797"
        },
        {
          "description": "In this episode, Justin and Vonne take a look at dictionaries that provide yet a different way to arranging data. Justin discusses when to use lists and tuples versus dictionaries as well as provides an overview of operations that you can use with dictionaries.",
          "length": "1675",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-3-1-dictionaries-050418-PGM.00_33_00_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-3-1-dictionaries-050418-PGM.00_33_00_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-3-1-dictionaries-050418-PGM.00_33_00_08.Still001-sm.jpg",
          "title": "Dictionaries",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.747 --> 00:00:13.646\nGreetings everyone.\n\n3\n00:00:13.646 --> 00:00:16.831\nWelcome back to another\nexciting edition of Devpro.tv.\n\n4\n00:00:16.831 --> 00:00:20.203\nI'm your host Vonne Smith and\nwe're continuing on in our programming\n\n5\n00:00:20.203 --> 00:00:24.680\nfundamental series and in this episode\nwe're gonna be talking about dictionaries.\n\n6\n00:00:24.680 --> 00:00:28.750\nAnd here to define dictionaries is Mr.\nJustin Dennison.\n\n7\n00:00:28.750 --> 00:00:30.240\nHow are you?\n&gt;&gt; I am doing fantastic.\n\n8\n00:00:30.240 --> 00:00:34.200\nVonne, how are you?\n&gt;&gt; I feel like I am doing pretty good.\n\n9\n00:00:34.200 --> 00:00:35.772\nWhat are we doing?\n\n10\n00:00:35.772 --> 00:00:37.370\n[LAUGH]\n&gt;&gt; [LAUGH] Dictionaries, right?\n\n11\n00:00:37.370 --> 00:00:40.510\nThis is one of those terms where people\ngo yeah, I know what a dictionary is.\n\n12\n00:00:40.510 --> 00:00:41.470\nAnd I go, in Python?\n\n13\n00:00:41.470 --> 00:00:41.970\nThey're like.\n\n14\n00:00:43.150 --> 00:00:47.460\nNo I thought you meant like how I go on\nthe computers, and I type define, and\n\n15\n00:00:47.460 --> 00:00:50.420\nthen a word, and\nthen it looks up that word.\n\n16\n00:00:50.420 --> 00:00:53.639\nThat's not quite what we're gonna\ntalk about, but they may be related.\n\n17\n00:00:53.639 --> 00:00:57.242\n&gt;&gt; And I feel you did mention this,\n\n18\n00:00:57.242 --> 00:01:00.320\nas soon am I, what is this?\n\n19\n00:01:00.320 --> 00:01:03.413\nI'm like wait, I think you\ntalked about this, the diotypes?\n\n20\n00:01:03.413 --> 00:01:04.394\nI have no idea,\n\n21\n00:01:04.394 --> 00:01:06.410\nI do not remember it at all.\n&gt;&gt; [LAUGH]\n\n22\n00:01:06.410 --> 00:01:08.540\n&gt;&gt; So I'm hoping that you're going to\n\n23\n00:01:08.540 --> 00:01:11.290\nrefresh our memory because we\ndidn't review it, correct?\n\n24\n00:01:11.290 --> 00:01:13.170\n&gt;&gt; We did, we did review it.\n\n25\n00:01:13.170 --> 00:01:15.090\nLet's kinda set the scene.\n\n26\n00:01:15.090 --> 00:01:19.700\nUp until this point we've looked at\ncollections that are number indexed.\n\n27\n00:01:19.700 --> 00:01:20.310\nNow what do I mean?\n\n28\n00:01:20.310 --> 00:01:25.070\nThey always start 0 and they might not\nhave anything, they actually may be empty.\n\n29\n00:01:25.070 --> 00:01:28.742\nAnd there is one thing that I'm gonna\npoint out about those previous collections\n\n30\n00:01:28.742 --> 00:01:29.884\nin this episode as well.\n\n31\n00:01:29.884 --> 00:01:32.074\nBut the head numbers, right?\n\n32\n00:01:32.074 --> 00:01:37.516\n0, 1, 2, 3, they have an order, I have the\nfirst thing, the second thing, the third\n\n33\n00:01:37.516 --> 00:01:42.650\nthing and I can do, up to this point, list\nand tuples the same kind of things, right?\n\n34\n00:01:42.650 --> 00:01:44.390\nI can slice, I can dice.\n\n35\n00:01:44.390 --> 00:01:45.310\nThat's all good.\n\n36\n00:01:45.310 --> 00:01:48.320\nNow, that makes sense, but\n\n37\n00:01:48.320 --> 00:01:52.140\nin the tuples episode I said, \"Remember,\nfirst name is the first element,\n\n38\n00:01:52.140 --> 00:01:58.440\nlast name is the second element.\"\nYou have to do that every time.\n\n39\n00:01:58.440 --> 00:01:59.450\nRight you go, wait a minute.\n\n40\n00:01:59.450 --> 00:02:01.200\nHow does that work again?\n\n41\n00:02:01.200 --> 00:02:03.830\nHow does it,\nwhat is the third element again?\n\n42\n00:02:03.830 --> 00:02:06.390\nIs that favourite food or is that age.\n\n43\n00:02:06.390 --> 00:02:09.620\nSo you have to think about the relevant\npositioning if you do that.\n\n44\n00:02:09.620 --> 00:02:12.770\nNow, a lot of times these collections\nwhether they be tuples or lists,\n\n45\n00:02:12.770 --> 00:02:16.350\nare just gonna be a collection of like\nthings and even though they are ordered,\n\n46\n00:02:16.350 --> 00:02:20.830\nthe order isn't necessarily always\ngoing to be used for some kind of mean.\n\n47\n00:02:22.940 --> 00:02:24.210\nDictionaries kind of depart.\n\n48\n00:02:24.210 --> 00:02:28.800\nThey are still a collection,\nbut they are a collection of\n\n49\n00:02:28.800 --> 00:02:33.800\nproperties with corresponding values,\nalso known as keys.\n\n50\n00:02:33.800 --> 00:02:37.060\nSo the key would be the word you're\nlooking up in the dictionary and\n\n51\n00:02:37.060 --> 00:02:39.350\nthe value would be the definition.\n\n52\n00:02:39.350 --> 00:02:42.700\nSo for every word, there is a definition.\n\n53\n00:02:42.700 --> 00:02:47.530\nIn Python dictionaries, for every key\nthere is a corresponding value and\n\n54\n00:02:47.530 --> 00:02:51.270\nthose values can pretty much be anything.\n\n55\n00:02:51.270 --> 00:02:52.850\nNow why would I wanna do that?\n\n56\n00:02:52.850 --> 00:02:56.120\nThey're a lot more readable in\n\n57\n00:02:56.120 --> 00:03:00.800\ndifferent instances than\nrespective lists or strings.\n\n58\n00:03:00.800 --> 00:03:04.230\nAnd they provide a little bit different\nway of organizing your data so\n\n59\n00:03:04.230 --> 00:03:06.690\nyou can reason about that data.\n\n60\n00:03:06.690 --> 00:03:11.210\nAnd hopefully that kinda gives\na reasoning for what we're doing.\n\n61\n00:03:11.210 --> 00:03:13.290\nMaybe not as clear as it could be.\n\n62\n00:03:13.290 --> 00:03:16.560\nBut we'll hopefully clear that up\nas we kinda take a look at things.\n\n63\n00:03:16.560 --> 00:03:17.840\n&gt;&gt; Okay, so they're in pairs.\n\n64\n00:03:17.840 --> 00:03:19.980\nAnd they'll always be in pairs,\nlike you said.\n\n65\n00:03:19.980 --> 00:03:22.500\nThere's the key and the value?\n\n66\n00:03:23.500 --> 00:03:26.570\nAnd then there's a collection of keys and\nvalues.\n\n67\n00:03:27.930 --> 00:03:30.050\nOkay, I got that part.\n\n68\n00:03:30.050 --> 00:03:33.390\nI don't know if I'm totally\ngoing off the rails here.\n\n69\n00:03:33.390 --> 00:03:35.290\nIt's almost like you're\ndefining a variable.\n\n70\n00:03:35.290 --> 00:03:36.460\nCuz if you're saying this is the key and\n\n71\n00:03:36.460 --> 00:03:41.080\nthis is its value it's almost\nlike this equals this?\n\n72\n00:03:41.080 --> 00:03:43.590\nAm I too far off?\n&gt;&gt; No, you're very similar.\n\n73\n00:03:43.590 --> 00:03:47.320\nAnd dictionaries behind the scenes\nin Python are actually used to do\n\n74\n00:03:47.320 --> 00:03:48.520\nsimilar things like that.\n\n75\n00:03:48.520 --> 00:03:51.630\nYou have what are called\nthe global environment and\n\n76\n00:03:51.630 --> 00:03:54.930\nI'm jumping ahead a little bit this\nactually doesn't matter for us now.\n\n77\n00:03:54.930 --> 00:03:59.390\nBut the global environment is more or\nless a dictionary that contains all\n\n78\n00:03:59.390 --> 00:04:04.500\nthe variables that you've defined in your\nprogram and their corresponding values.\n\n79\n00:04:04.500 --> 00:04:06.860\nSo behind the scenes dictionaries\nare used for a great deal of things.\n\n80\n00:04:06.860 --> 00:04:11.340\nNow why would I not just define\na bunch of variables like first name,\n\n81\n00:04:11.340 --> 00:04:14.810\nlast name, favorite food,\nthose types of things and just have them.\n\n82\n00:04:14.810 --> 00:04:19.270\nWell, the reason that I would want to do\nthis is I want to bind all of those things\n\n83\n00:04:19.270 --> 00:04:24.730\ntogether because they, at an abstract\nlevel, represent something more, right?\n\n84\n00:04:24.730 --> 00:04:32.190\nA first name, last name, favorite food,\npizza, age- Yeah pizza defines us all.\n\n85\n00:04:32.190 --> 00:04:34.910\nThose all define a person or\npossibly a user.\n\n86\n00:04:36.100 --> 00:04:40.160\nSo those are bundled together so it's\na way of taking essentially variables.\n\n87\n00:04:40.160 --> 00:04:44.305\nBut bundling them up so\nthey track along together.\n\n88\n00:04:44.305 --> 00:04:46.290\nTied them together so that it makes sense.\n\n89\n00:04:46.290 --> 00:04:52.490\nAnd at the abstract level this dictionary\nrepresents a more, kind of unified entity.\n\n90\n00:04:52.490 --> 00:04:55.860\nNow, that's a whole lot of\ntalking right there up front.\n\n91\n00:04:55.860 --> 00:04:58.370\nI think it's important to see,\nhow do we make dictionaries,\n\n92\n00:04:58.370 --> 00:04:59.760\nwhen do we use dictionaries?\n\n93\n00:04:59.760 --> 00:05:03.900\nAnd I do want to talk about\nsomething called the Literal Syntax,\n\n94\n00:05:03.900 --> 00:05:07.180\nwhich we've actually been\nusing up until this point.\n\n95\n00:05:07.180 --> 00:05:08.870\nBut the previous two examples.\n\n96\n00:05:08.870 --> 00:05:10.700\nThe tuple and the list.\n\n97\n00:05:10.700 --> 00:05:13.140\nThey didn't really add anything.\n\n98\n00:05:13.140 --> 00:05:15.990\nBut I'm gonna talk to bring it\nhere because now we have a way of\n\n99\n00:05:15.990 --> 00:05:17.260\ncomparing those things.\n\n100\n00:05:17.260 --> 00:05:20.710\nSo there's a little added extra for\nthe previous ones in this episode.\n\n101\n00:05:20.710 --> 00:05:21.590\nSo definitely stay tuned.\n\n102\n00:05:21.590 --> 00:05:23.280\nBut let's go ahead and\ntake a look at the screen here.\n\n103\n00:05:23.280 --> 00:05:24.966\nAnd we have a terminal window and\n\n104\n00:05:24.966 --> 00:05:27.780\nI'm inside of my programming\nfundamentals folder.\n\n105\n00:05:28.920 --> 00:05:29.430\nThat's good.\n\n106\n00:05:29.430 --> 00:05:30.520\nWhat do we have?\n\n107\n00:05:30.520 --> 00:05:32.095\nWe have ifs lists, and then tuples.\n\n108\n00:05:33.260 --> 00:05:38.160\nCorrespondingly I have my visual\nstudio code editor open and\n\n109\n00:05:38.160 --> 00:05:41.880\nthat folder is open as well.\n\n110\n00:05:41.880 --> 00:05:47.500\nSo we go to File, Open, you find\nthe folder, don't click then file but\n\n111\n00:05:47.500 --> 00:05:52.210\njust click Open on the folder and you'll\nbe at the same spot that I am, all right?\n\n112\n00:05:52.210 --> 00:05:56.580\nSo let's hop back over here and\nsay, I'm gonna\n\n113\n00:05:56.580 --> 00:06:00.930\nfully type this word and\nyou'll see why in just a moment.\n\n114\n00:06:00.930 --> 00:06:04.320\nJust so we can so touch dictionaries.py.\n\n115\n00:06:04.320 --> 00:06:05.580\nI think I spelled dictionaries, right?\n\n116\n00:06:05.580 --> 00:06:07.590\nYep, I did, I'm pretty sure I did.\n\n117\n00:06:09.420 --> 00:06:11.050\nWe'll overlook it if I didn't.\n\n118\n00:06:11.050 --> 00:06:13.980\nSo, there is dictionaries, right?\n\n119\n00:06:13.980 --> 00:06:20.610\nNow, at this point, I'm gonna let you\nknow, the shorthand and the function for\n\n120\n00:06:20.610 --> 00:06:27.280\ntalking about these in the Python world,\nthey're called Fixed with the TDICT.\n\n121\n00:06:27.280 --> 00:06:30.160\nUnfortunately with my accent and\n\n122\n00:06:30.160 --> 00:06:36.270\nthe way my speech patterns are,\nsometimes it sounds like a different word.\n\n123\n00:06:36.270 --> 00:06:41.840\nSo I'm going to say as much as possible,\ndictionaries, dictionaries, dictionaries.\n\n124\n00:06:41.840 --> 00:06:46.700\nSo just keep that in mind, you will\nhear that used other places, all right?\n\n125\n00:06:46.700 --> 00:06:51.710\nSo unfortunate, cool, kind of just making\nsure everybody is on the same page.\n\n126\n00:06:51.710 --> 00:06:56.530\nNow, up until this point we've been\ndoing things like square brackets,\n\n127\n00:06:56.530 --> 00:06:57.980\nright, parentheses.\n\n128\n00:06:57.980 --> 00:07:03.420\nWell, there's a set of grouping\npieces that we haven't used yet.\n\n129\n00:07:03.420 --> 00:07:04.310\nWhat are they?\n\n130\n00:07:04.310 --> 00:07:07.360\nWell, they're the curly braces.\n\n131\n00:07:07.360 --> 00:07:10.180\nSo let's say I have a user, right.\n\n132\n00:07:10.180 --> 00:07:15.770\nAnd this user, and we've seen this in\na previous episode, as a first name, ok.\n\n133\n00:07:15.770 --> 00:07:20.260\nSo that first name is Vonne,\nor we're gonna use Vonne.\n\n134\n00:07:20.260 --> 00:07:21.580\nAnd then there's a comma.\n\n135\n00:07:21.580 --> 00:07:26.987\nSo it's the key, colon,\nand then the value.\n\n136\n00:07:26.987 --> 00:07:32.220\nAnd notice left curly brace,\nright curly brace.\n\n137\n00:07:32.220 --> 00:07:34.900\nThis is the dictionary literal syntax.\n\n138\n00:07:34.900 --> 00:07:39.910\nSo I'm literally creating a dictionary\nusing these key value pairs.\n\n139\n00:07:39.910 --> 00:07:41.680\n&gt;&gt; That's like CSS a little bit.\n\n140\n00:07:41.680 --> 00:07:44.846\nYeah.\nBut I call them open squiggly and\n\n141\n00:07:44.846 --> 00:07:49.574\nclose squiggly but\nthat's just because I like to have\n\n142\n00:07:49.574 --> 00:07:54.826\nanything with a Y on the end for\nfun and separated by a colon,\n\n143\n00:07:54.826 --> 00:08:01.990\nso you have what's the property and the\nvalue in CSS, separated by a semicolon.\n\n144\n00:08:01.990 --> 00:08:04.475\nPair.\n&gt;&gt; Yep, so these are pairs.\n\n145\n00:08:04.475 --> 00:08:06.516\nAnd what's interesting is this pairing,\n\n146\n00:08:06.516 --> 00:08:09.530\neven though we're building this\nactually behind the scenes.\n\n147\n00:08:09.530 --> 00:08:12.510\nMaybe you represent it in a little bit\ndifferent way, and we'll see that.\n\n148\n00:08:12.510 --> 00:08:18.040\nSo we're not gonna go too crazy here,\nwe're gonna go last name .aad\n\n149\n00:08:18.040 --> 00:08:22.488\nwe can do Smith and we can say,\n\n150\n00:08:22.488 --> 00:08:27.060\nfood and pizza.\n\n151\n00:08:27.060 --> 00:08:29.110\nOr actually, let's do age.\n\n152\n00:08:29.110 --> 00:08:30.220\nAll of those are strings.\n\n153\n00:08:30.220 --> 00:08:33.250\nI don't want you to think that strings\nare some kind of magical thing.\n\n154\n00:08:33.250 --> 00:08:35.990\nSo age, she's definitely like 24.\n\n155\n00:08:35.990 --> 00:08:38.570\nSo there we go.\n\n156\n00:08:38.570 --> 00:08:39.850\nThat is a dictionary.\n\n157\n00:08:39.850 --> 00:08:41.460\nNow why would I wanna\ngroup those together?\n\n158\n00:08:41.460 --> 00:08:43.850\nI could just make it first name,\na last name, and an age.\n\n159\n00:08:43.850 --> 00:08:48.720\nI could, but all of these\ntogether represent a single user.\n\n160\n00:08:48.720 --> 00:08:53.200\nSo I want to collect them in\nsome meaningful way, all right?\n\n161\n00:08:53.200 --> 00:08:56.310\nSo these are mostly strings.\n\n162\n00:08:56.310 --> 00:09:00.169\nMost of the time you're gonna\nsee keys that are strings.\n\n163\n00:09:01.180 --> 00:09:05.020\nThere are some requirements for the keys.\n\n164\n00:09:05.020 --> 00:09:06.500\nStrings meet those requirements.\n\n165\n00:09:07.910 --> 00:09:11.990\nOther things that meet those\nrequirements and, I would say, foods,\n\n166\n00:09:11.990 --> 00:09:16.260\nyou can do something like this,\nlike, zero, colon, pizza\n\n167\n00:09:17.344 --> 00:09:22.770\n1: 'cookie' } and we'll leave it there.\n\n168\n00:09:22.770 --> 00:09:26.230\nAdding more won't actually change things.\n\n169\n00:09:26.230 --> 00:09:28.650\nI can use numbers as the keys.\n\n170\n00:09:28.650 --> 00:09:31.620\nIt's interesting,\nif you use numbers as the keys,\n\n171\n00:09:31.620 --> 00:09:37.060\nyou end up with what appears to be\na list but it's not actually a list.\n\n172\n00:09:38.290 --> 00:09:40.190\nHow we use it though\nwill look like a list.\n\n173\n00:09:40.190 --> 00:09:45.320\nSo numbers I tend to stay away from,\nthis doesn't have a lot of meaning\n\n174\n00:09:45.320 --> 00:09:49.790\nto me in a more semantic fashion.\n&gt;&gt; Yeah, that's weird.\n\n175\n00:09:49.790 --> 00:09:50.565\nI'll just say that right now.\n\n176\n00:09:50.565 --> 00:09:53.685\nI'm over here going, what?\n\n177\n00:09:53.685 --> 00:09:55.515\nSo zero is pizza?\n\n178\n00:09:55.515 --> 00:09:58.135\nOne, it doesn't make any logical sense.\n\n179\n00:09:58.135 --> 00:10:02.815\nI just feel like that can get\nyou really confused really fast.\n\n180\n00:10:02.815 --> 00:10:06.583\nI feels there's obviously different things\nwe're going to be able to do within these\n\n181\n00:10:06.583 --> 00:10:07.328\ndictionaries.\n\n182\n00:10:07.328 --> 00:10:11.991\nSo is this one of those you can do it but\n\n183\n00:10:11.991 --> 00:10:14.370\ndon't?\n&gt;&gt; I wouldn't say don't.\n\n184\n00:10:14.370 --> 00:10:17.880\nThere are very particular use\ncases because dictionaries,\n\n185\n00:10:19.000 --> 00:10:21.150\nthey have really fast look ups.\n\n186\n00:10:21.150 --> 00:10:26.220\nWhat I mean is, if I want\nthe zeroth key behind the scenes,\n\n187\n00:10:26.220 --> 00:10:31.340\nthat look up finding that zero is\npizza Is going to be very, very fast.\n\n188\n00:10:31.340 --> 00:10:32.740\nNow, with that said,\n\n189\n00:10:32.740 --> 00:10:36.410\nif I'm looking at the zeroth element\nof the list that's also pretty fast.\n\n190\n00:10:36.410 --> 00:10:40.700\nBut, as you get deeper into python\nyou'll find that there are some\n\n191\n00:10:40.700 --> 00:10:42.470\nthings that dictionaries\nare better suited for.\n\n192\n00:10:42.470 --> 00:10:46.980\nAnd some things that lists\nare better suited for.\n\n193\n00:10:46.980 --> 00:10:50.505\nBut it may be that the dictionary\nneeds to have numerical keys,\n\n194\n00:10:50.505 --> 00:10:53.709\nbecause it just makes sense\nin your respective problem.\n\n195\n00:10:55.523 --> 00:10:56.810\nI don't use this a lot.\n\n196\n00:10:56.810 --> 00:10:57.650\nThis isn't standard.\n\n197\n00:10:57.650 --> 00:11:01.220\nMost of the time I'm gonna\nhave keys that are strings, or\n\n198\n00:11:01.220 --> 00:11:04.220\nsome other data type like strings.\n\n199\n00:11:04.220 --> 00:11:08.040\nAnd we'll get to that,\nthat's kind of a foreshadowing there.\n\n200\n00:11:08.040 --> 00:11:10.040\nBut Typically we don't use numbers.\n\n201\n00:11:10.040 --> 00:11:12.730\nStrings are kinda the default initially.\n\n202\n00:11:14.500 --> 00:11:17.060\nAnd you'll see why they're\nthe default here shortly.\n\n203\n00:11:17.060 --> 00:11:18.310\nYou can use other data types.\n\n204\n00:11:18.310 --> 00:11:21.070\nYou can use a couple as a key.\n\n205\n00:11:21.070 --> 00:11:25.910\nYou can use like other things like dates\n\n206\n00:11:25.910 --> 00:11:28.620\nwe haven't quite got to there but\nI'm just letting you know.\n\n207\n00:11:28.620 --> 00:11:33.440\nYou're not limited to just strings.\n&gt;&gt; Okay, it's still a little odd.\n\n208\n00:11:33.440 --> 00:11:37.270\nBut what you just said of like performance\nwise if you were making like some\n\n209\n00:11:37.270 --> 00:11:38.800\nhuge master list.\n\n210\n00:11:38.800 --> 00:11:40.795\nWell that's hard not to say.\n\n211\n00:11:40.795 --> 00:11:44.540\n[LAUGH] List or other words that\nare in like how to use Python,\n\n212\n00:11:44.540 --> 00:11:46.300\na collection we'll say.\n\n213\n00:11:46.300 --> 00:11:51.670\nAnd you need it to, performance-wise, and\nyou're making this master reference sheet.\n\n214\n00:11:51.670 --> 00:11:57.920\nMaybe dictionaries would be the correct\ndata type for what you need it to do.\n\n215\n00:11:57.920 --> 00:11:59.860\nI'll accept that, I'll allow that one.\n\n216\n00:11:59.860 --> 00:12:03.600\nAnd I'll go, okay, Justin, I can see why,\nbut I still think it's a little weird\n\n217\n00:12:03.600 --> 00:12:05.480\nright now.\n&gt;&gt; It's a little weird, and another thing,\n\n218\n00:12:05.480 --> 00:12:07.420\nI don't want everybody to get\nhung up on the performance thing.\n\n219\n00:12:07.420 --> 00:12:09.470\nDon't worry about performance\nPerformance at all.\n\n220\n00:12:09.470 --> 00:12:10.290\nI'm just letting you know,\n\n221\n00:12:10.290 --> 00:12:14.240\nthere are some performance considerations\ndepending on how you're gonna use them.\n\n222\n00:12:14.240 --> 00:12:16.890\nThe second thing the dictionaries\nare used really well for and\n\n223\n00:12:16.890 --> 00:12:20.940\nmaybe zero, is higher article data.\n\n224\n00:12:20.940 --> 00:12:22.790\nWhat I mean is, what if I have a key,\n\n225\n00:12:22.790 --> 00:12:25.470\nwithin that corresponding\nvalue is also a dictionary.\n\n226\n00:12:25.470 --> 00:12:28.280\nThat has another set of keys\nthat I can kinda drill down.\n\n227\n00:12:29.340 --> 00:12:32.990\nThat kind of structuring is\na little harder to do in a list.\n\n228\n00:12:32.990 --> 00:12:39.999\nIn dictionary you can just go [SOUND] and\nkind of follow the keys.\n\n229\n00:12:39.999 --> 00:12:42.380\nWe're not gonna do that here but\nthat will come up eventually.\n\n230\n00:12:42.380 --> 00:12:47.680\nAll right, so, we come back now to\nthe screen here and, see I have this user.\n\n231\n00:12:47.680 --> 00:12:50.960\nWe're gonna move forward on\nwhat dictionaries can do.\n\n232\n00:12:51.970 --> 00:12:55.300\nAnd then from there I'm gonna come back.\n\n233\n00:12:55.300 --> 00:12:57.750\nVonne, I'm gonna ask you to\nremind me of this, come back and\n\n234\n00:12:57.750 --> 00:13:02.110\ncompare this with the non\nliteral construction.\n\n235\n00:13:02.110 --> 00:13:05.190\nSo this actual function that is helpful.\n\n236\n00:13:06.590 --> 00:13:08.970\nSo just say, dictionary function.\n\n237\n00:13:08.970 --> 00:13:09.850\nThat's all I want you to say.\n\n238\n00:13:09.850 --> 00:13:15.500\nAll right, so\nwhat about like operations, okay?\n\n239\n00:13:15.500 --> 00:13:18.780\nWell, we have a user and we have foods.\n\n240\n00:13:18.780 --> 00:13:19.890\nHm, I wonder.\n\n241\n00:13:19.890 --> 00:13:20.960\nCan we add them?\n\n242\n00:13:20.960 --> 00:13:21.820\nCan we multiply them?\n\n243\n00:13:21.820 --> 00:13:22.960\nCan we subtract them?\n\n244\n00:13:22.960 --> 00:13:24.430\nWe should always check those.\n\n245\n00:13:24.430 --> 00:13:25.360\nSo result.\n\n246\n00:13:26.460 --> 00:13:33.130\nEquals user plus foods, print result.\n\n247\n00:13:33.130 --> 00:13:38.440\nWe come over here, clear,\nmy hand is automatically programmed to\n\n248\n00:13:38.440 --> 00:13:41.370\nclear so, not necessarily needed.\n\n249\n00:13:41.370 --> 00:13:42.350\nUnsupported operands.\n\n250\n00:13:44.440 --> 00:13:48.160\nAs I said, dict and\na dictionary and a dictionary.\n\n251\n00:13:48.160 --> 00:13:50.560\nAlright, so that doesn't work.\n\n252\n00:13:50.560 --> 00:13:52.440\nWhat about subtraction?\n\n253\n00:13:52.440 --> 00:13:54.090\nAlright, so let's try it out.\n\n254\n00:13:54.090 --> 00:13:57.630\nClear, hit the up arrow\na couple of times and no.\n\n255\n00:13:58.890 --> 00:14:00.680\nOk, what about multiply?\n\n256\n00:14:02.850 --> 00:14:03.820\nLet's try that out.\n\n257\n00:14:03.820 --> 00:14:08.180\nNo, hmm, seems like dictionaries\nare fairly limiting.\n\n258\n00:14:08.180 --> 00:14:09.570\nWhat about the divide?\n\n259\n00:14:09.570 --> 00:14:11.110\nI suspect this one's not gonna work.\n\n260\n00:14:12.590 --> 00:14:14.490\nClear, up arrow, no.\n\n261\n00:14:15.970 --> 00:14:19.170\nLet's try multiply with a number.\n\n262\n00:14:19.170 --> 00:14:24.640\nSo, three And, now, none of those work.\n\n263\n00:14:24.640 --> 00:14:27.440\nSo, this is now one of\nthose things we get,\n\n264\n00:14:27.440 --> 00:14:30.180\nthis is not working like\nI was anticipating it to.\n\n265\n00:14:31.270 --> 00:14:33.320\nAnd you'll see shortly\nwhy that's the case.\n\n266\n00:14:33.320 --> 00:14:36.520\nSo, operations as far as normal operators,\n\n267\n00:14:36.520 --> 00:14:38.980\nthere's not a lot of actually work for\nthis.\n\n268\n00:14:40.550 --> 00:14:42.490\nAnd by not a lot, none of this work but\n\n269\n00:14:42.490 --> 00:14:45.140\nthere's some other\noperations that we can do.\n\n270\n00:14:45.140 --> 00:14:47.240\nThat a little beyond scope so\n\n271\n00:14:47.240 --> 00:14:50.210\nI'm not gonna show them to you cuz\nthere's a good way to mess stuff up.\n\n272\n00:14:50.210 --> 00:14:52.830\nBut we'll see them later on in\n\n273\n00:14:52.830 --> 00:14:55.340\nanother course.\n&gt;&gt; To me I was like I don't think any of\n\n274\n00:14:55.340 --> 00:14:58.620\nthese are gonna work cuz\nthey behave differently.\n\n275\n00:14:58.620 --> 00:15:03.520\nBecause you have those pairs,\nalmost like defined terms.\n\n276\n00:15:03.520 --> 00:15:08.110\nIt's not like a string or\na tuple or a list because\n\n277\n00:15:08.110 --> 00:15:11.810\nthose are just okay I can get that add\nthese together multiply them together.\n\n278\n00:15:11.810 --> 00:15:14.050\nBut I'm like this behaves differently.\n\n279\n00:15:14.050 --> 00:15:15.900\nSo that's not\n\n280\n00:15:15.900 --> 00:15:17.780\nI'm smarter than I think I am.\n&gt;&gt; [LAUGH]\n\n281\n00:15:17.780 --> 00:15:19.050\n&gt;&gt; Well that's not gonna work there\n\n282\n00:15:19.050 --> 00:15:19.840\nJustin.\n&gt;&gt; All\n\n283\n00:15:19.840 --> 00:15:22.370\nright Justin why are you\neven doing that it's bad.\n\n284\n00:15:22.370 --> 00:15:25.900\nAnd you're right this does have\na different behavior set so\n\n285\n00:15:25.900 --> 00:15:27.600\nthese aren't gonna work but now.\n\n286\n00:15:27.600 --> 00:15:30.400\nWhat about if I wanna grab the first name\n\n287\n00:15:30.400 --> 00:15:35.310\nout of this respective user dictionary,\nright?\n\n288\n00:15:35.310 --> 00:15:36.860\nI wonder how that's gonna work.\n\n289\n00:15:36.860 --> 00:15:38.330\nSo if you come and\ntake a look at the screen here,\n\n290\n00:15:39.600 --> 00:15:40.930\nwe're just gonna get rid of operations.\n\n291\n00:15:40.930 --> 00:15:42.300\nCuz I don't even want\nyou to think about them.\n\n292\n00:15:42.300 --> 00:15:46.410\nWe tried them, operations,\ndon't worry about them, right?\n\n293\n00:15:46.410 --> 00:15:51.906\nSo what about assignment, or\nexcuse me, getting elements or\n\n294\n00:15:51.906 --> 00:15:56.462\nvalues from a dictionary,\nI'm gonna say values.\n\n295\n00:15:56.462 --> 00:16:01.434\nAnd let's say I do want to now store\nthis in a first name variable.\n\n296\n00:16:01.434 --> 00:16:06.918\nWell I would, Do that by saying user,\nsquare brackets again,\n\n297\n00:16:06.918 --> 00:16:12.270\nkinda weird, but first_name,\nlike so, all right?\n\n298\n00:16:12.270 --> 00:16:13.070\nWhat does this do?\n\n299\n00:16:13.070 --> 00:16:17.650\nIt goes, all right, well,\nthis dictionary, first_name, gonna get\n\n300\n00:16:17.650 --> 00:16:23.110\nthis value that corresponds to this key,\nand that's what I'm gonna return.\n\n301\n00:16:23.110 --> 00:16:28.402\nSo I'm gonna print first_name, maybe.\n\n302\n00:16:28.402 --> 00:16:34.520\nAnd when we're here, figure this out,\nand boom, there's Vonne.\n\n303\n00:16:34.520 --> 00:16:37.450\nSo it does just like you do in\na dictionary when you're trying to\n\n304\n00:16:37.450 --> 00:16:38.590\nfind a word.\n\n305\n00:16:38.590 --> 00:16:41.930\nI look up the word, and\nthere's the corresponding definition,\n\n306\n00:16:43.090 --> 00:16:46.870\nthat is being able to grab\nsomething out of the dictionary.\n\n307\n00:16:46.870 --> 00:16:48.060\nThat's all we need to know.\n\n308\n00:16:49.350 --> 00:16:52.320\nThis is always going to be a key, so\n\n309\n00:16:52.320 --> 00:16:53.890\ndo keep that in mind.\n&gt;&gt; And\n\n310\n00:16:53.890 --> 00:16:57.500\njust to clarify,\nI'm pretty sure this is, right?\n\n311\n00:16:57.500 --> 00:17:00.670\nBecause you declared this\nvariable first_name, and\n\n312\n00:17:00.670 --> 00:17:03.460\nit's the exact same way\nthat you wrote in the key.\n\n313\n00:17:03.460 --> 00:17:07.070\nYou could have done fname\n= user ['first_name'],\n\n314\n00:17:07.070 --> 00:17:11.510\nthey do not have to match.\n&gt;&gt; They do not and\n\n315\n00:17:11.510 --> 00:17:13.900\nthat is a key point to remember.\n\n316\n00:17:13.900 --> 00:17:18.840\nThese keys are only specific to this user,\nall right?\n\n317\n00:17:18.840 --> 00:17:19.610\nTo this dictionary.\n\n318\n00:17:20.720 --> 00:17:25.070\nThis variable name is not tied in any way,\nI usually pick the same variable name,\n\n319\n00:17:25.070 --> 00:17:28.500\nbecause I don't wanna have like about\nnew names and things like that but,\n\n320\n00:17:28.500 --> 00:17:31.159\nif we print this out again, maybe.\n&gt;&gt; [LAUGH] clear.\n\n321\n00:17:31.159 --> 00:17:34.860\n&gt;&gt; Clear, if we print this out again.\n\n322\n00:17:36.260 --> 00:17:37.240\nIt's the exact same thing.\n\n323\n00:17:37.240 --> 00:17:40.150\nThere's nothing tied between those two.\n&gt;&gt; Okay, I was pretty sure,\n\n324\n00:17:40.150 --> 00:17:42.320\nbut I tend to start looking for patterns.\n\n325\n00:17:42.320 --> 00:17:46.390\nAnd then when I see, those are the same,\ndoes that mean they have to be the same?\n\n326\n00:17:46.390 --> 00:17:51.150\nAnd when they start out doing things,\nmy mind immediately goes to that.\n\n327\n00:17:51.150 --> 00:17:54.380\nSo that's why I just wanted to make sure,\njust in case.\n\n328\n00:17:54.380 --> 00:17:55.530\n&gt;&gt; Not a problem,\n\n329\n00:17:55.530 --> 00:17:58.440\nand those are things that you may also do.\n\n330\n00:17:58.440 --> 00:18:00.250\nPattern recognition is great.\n\n331\n00:18:00.250 --> 00:18:02.040\nSometimes pattern recognition,\n\n332\n00:18:02.040 --> 00:18:07.180\ndepending on how whoever's presenting\nyou the respective analysis text,\n\n333\n00:18:07.180 --> 00:18:09.445\nhowever their brain works.\n&gt;&gt; It doesn't mean anything.\n\n334\n00:18:09.445 --> 00:18:12.150\n[LAUGH]\n&gt;&gt; Yeah, like whatever, that's weird.\n\n335\n00:18:12.150 --> 00:18:14.380\nSo we can get this element like this, and\n\n336\n00:18:14.380 --> 00:18:16.250\ncorrespondingly we can get last name and\nage.\n\n337\n00:18:16.250 --> 00:18:21.210\nAnd you know what,\nwhat if I wanted to get some food?\n\n338\n00:18:21.210 --> 00:18:22.570\nLet's just call it f.\n\n339\n00:18:22.570 --> 00:18:25.030\nI go to food, bracket, zero.\n\n340\n00:18:26.840 --> 00:18:29.760\nThat looks a lot like a list, right?\n\n341\n00:18:29.760 --> 00:18:30.550\nOr a template.\n\n342\n00:18:31.690 --> 00:18:32.730\nFood, bracket, zero.\n\n343\n00:18:34.260 --> 00:18:37.004\nIf I print that out, it works.\n\n344\n00:18:39.240 --> 00:18:41.740\nHere's the weird thing.\n\n345\n00:18:41.740 --> 00:18:44.628\nThe reason I don't use this a great deal,\nthis is still just a key lookup.\n\n346\n00:18:44.628 --> 00:18:46.550\nWhat does it do?\n\n347\n00:18:46.550 --> 00:18:50.200\nIt goes up here, and it goes well\nhere's the zero key, and there we go.\n\n348\n00:18:50.200 --> 00:18:54.496\nThe reason I don't use numbers as keys,\nis because if I look through, and\n\n349\n00:18:54.496 --> 00:18:56.800\nlet's say I don't know where this is?\n\n350\n00:18:56.800 --> 00:18:59.090\nLet's say it's a bunch of code.\n\n351\n00:18:59.090 --> 00:19:04.760\nAnd I see food[0],\nI may assumed mistakenly\n\n352\n00:19:04.760 --> 00:19:07.560\nthat foods,\nthat's either a list or a topple.\n\n353\n00:19:08.640 --> 00:19:11.630\nThat's not right,\nit's a dictionary in this case.\n\n354\n00:19:11.630 --> 00:19:15.970\nAnd dictionaries don't have the topple and\nlist like behaviors.\n\n355\n00:19:15.970 --> 00:19:18.870\nSo just be careful with that\nwhen you're picking your keys.\n\n356\n00:19:18.870 --> 00:19:23.640\nAnd again, it's not because you are using\nfoods and you're using zero as the key.\n\n357\n00:19:23.640 --> 00:19:28.355\nYou could have done on that line six,\nyou could have put user zero, and\n\n358\n00:19:28.355 --> 00:19:32.065\nthat would have been the same\nbecause that's the 0 index number?\n\n359\n00:19:32.065 --> 00:19:33.185\nNo, is it?\n\n360\n00:19:33.185 --> 00:19:34.065\nWait.\n&gt;&gt; Yeah,\n\n361\n00:19:34.065 --> 00:19:34.865\nactually-\n&gt;&gt; Patterns\n\n362\n00:19:34.865 --> 00:19:35.365\nmatter here?\n&gt;&gt; Yeah,\n\n363\n00:19:35.365 --> 00:19:35.870\nso it's funny.\n&gt;&gt; What?\n\n364\n00:19:35.870 --> 00:19:38.475\n[LAUGH]\n&gt;&gt; Exactly what you said is what\n\n365\n00:19:38.475 --> 00:19:39.515\nhappens, right?\n\n366\n00:19:39.515 --> 00:19:41.017\nYou're like, well, first name is a 0.\n\n367\n00:19:41.017 --> 00:19:43.045\nNo, no, no, no.\n\n368\n00:19:43.045 --> 00:19:43.625\nOrder?\n\n369\n00:19:43.625 --> 00:19:45.365\nThere is no order to a dictionary.\n\n370\n00:19:45.365 --> 00:19:48.695\nIt just so\nhappens that this has the key of 0.\n\n371\n00:19:48.695 --> 00:19:51.351\n&gt;&gt; If I actually try what you just said,\n\n372\n00:19:51.351 --> 00:19:52.644\n0 here, right?\n\n373\n00:19:52.644 --> 00:19:54.850\nPeople are like, that's the first element.\n\n374\n00:19:54.850 --> 00:19:58.350\nNow, there's no guarantee,\ndictionaries are not ordered by default.\n\n375\n00:19:58.350 --> 00:20:01.920\nYou come here and boom,\nit actually breaks,\n\n376\n00:20:01.920 --> 00:20:04.740\nbecause guess what,\n0's not in here anywhere.\n\n377\n00:20:04.740 --> 00:20:08.590\nThe only reason I can do that\nhere is because 0 is in there.\n\n378\n00:20:08.590 --> 00:20:09.640\n&gt;&gt; Did you mention this before?\n\n379\n00:20:09.640 --> 00:20:11.750\nI'm sorry, did you mention this already?\n\n380\n00:20:11.750 --> 00:20:13.580\nAnd I just wanna like, did I miss that?\n\n381\n00:20:13.580 --> 00:20:17.680\nWhere you said like it's not in order?\n&gt;&gt; No,\n\n382\n00:20:17.680 --> 00:20:19.865\nI do not think I had gotten to order yet.\n&gt;&gt; Okay.\n\n383\n00:20:19.865 --> 00:20:22.270\n[LAUGH]\n&gt;&gt; So don't worry about that.\n\n384\n00:20:22.270 --> 00:20:23.510\nBut that's a common thing.\n\n385\n00:20:23.510 --> 00:20:25.270\nPeople are like, well there is an order.\n\n386\n00:20:25.270 --> 00:20:27.500\nDictionaries are not ordered, by default.\n\n387\n00:20:27.500 --> 00:20:29.650\nLists and tuples are.\n&gt;&gt; Because they are trying to treat\n\n388\n00:20:29.650 --> 00:20:30.750\nit like lists and tuples,\n\n389\n00:20:30.750 --> 00:20:32.210\nand they're not the same.\n&gt;&gt; And\n\n390\n00:20:32.210 --> 00:20:34.670\nthat's why I do not use numbers\nare keys in dictionaries.\n\n391\n00:20:34.670 --> 00:20:36.530\nBecause people go like,\nthe zero's element.\n\n392\n00:20:36.530 --> 00:20:37.940\nDictionaries must be ordered.\n\n393\n00:20:37.940 --> 00:20:39.220\nNo, they are not.\n\n394\n00:20:39.220 --> 00:20:40.610\nThey can be in any random position.\n\n395\n00:20:40.610 --> 00:20:41.803\nBecause you are looking up by name.\n\n396\n00:20:41.803 --> 00:20:44.860\nYou are not looking up by position.\n\n397\n00:20:44.860 --> 00:20:46.290\nOkay, it's just all.\n\n398\n00:20:46.290 --> 00:20:50.500\nIt was one of those, okay, I see it.\n\n399\n00:20:50.500 --> 00:20:53.319\nIt literally just light\nbulbs went all around.\n\n400\n00:20:53.319 --> 00:20:56.020\nI get it, I get it now.\n\n401\n00:20:56.020 --> 00:20:58.110\nThank you, Jeff.\n&gt;&gt; I try, I try.\n\n402\n00:20:58.110 --> 00:21:01.430\nAnd definitely keep me honest,\nbecause again, poison of knowledge,\n\n403\n00:21:01.430 --> 00:21:05.510\nsome time I'm like,\nyeah that makes sense to me.\n\n404\n00:21:05.510 --> 00:21:07.310\nThey always want to be explicit.\n\n405\n00:21:07.310 --> 00:21:11.060\nBut along with getting a value,\ncan I set a value?\n\n406\n00:21:11.060 --> 00:21:12.140\nNow what do I mean by set?\n\n407\n00:21:12.140 --> 00:21:15.950\nCan I assign a value inside of\na dictionary after it already exists?\n\n408\n00:21:15.950 --> 00:21:18.630\nSet a value, I sure can.\n\n409\n00:21:18.630 --> 00:21:22.850\nSo let's say I have user, and\nI want to change the age,\n\n410\n00:21:22.850 --> 00:21:26.890\nI got Ron's age wrong, it's actually 23.\n\n411\n00:21:26.890 --> 00:21:29.850\nThen, I wonder if this works?\n\n412\n00:21:29.850 --> 00:21:30.950\nI can do this with a list.\n\n413\n00:21:30.950 --> 00:21:32.490\nCan't do this with a tuple.\n\n414\n00:21:32.490 --> 00:21:33.320\nTuple doesn't allow this.\n\n415\n00:21:34.340 --> 00:21:37.800\nSo I wonder, let's just print user.\n\n416\n00:21:37.800 --> 00:21:38.930\nLet's print the whole dictionary.\n\n417\n00:21:40.380 --> 00:21:45.980\nSo if we come here and we clear out,\nand we python3 dictionaries.\n\n418\n00:21:45.980 --> 00:21:49.400\nFirst name, Vonne,\nlast name Smith, age 23.\n\n419\n00:21:50.730 --> 00:21:54.860\nI can update a particular age, or\n\n420\n00:21:54.860 --> 00:21:59.980\nany of these keys by doing exactly this.\n\n421\n00:21:59.980 --> 00:22:06.497\nThe ramification of this is,\nI cannot have age twice, okay?\n\n422\n00:22:06.497 --> 00:22:10.270\nI've waited to this moment\nto talk about this.\n\n423\n00:22:10.270 --> 00:22:14.400\nIf I come here and say, age : 19.\n\n424\n00:22:14.400 --> 00:22:19.139\nIn a dictionary, if you look up a word,\n\n425\n00:22:19.139 --> 00:22:23.740\nwill you ever see the word twice?\n\n426\n00:22:23.740 --> 00:22:28.568\nNo, you might have multiple definitions\nthat are nested for that particular word,\n\n427\n00:22:28.568 --> 00:22:31.160\nyou can have the word twice.\n\n428\n00:22:31.160 --> 00:22:35.771\nAnd if we command this out,\nand we come over here, and\n\n429\n00:22:35.771 --> 00:22:40.486\nboom, age 19,\n24 was immediately overwritten,\n\n430\n00:22:40.486 --> 00:22:44.995\nbecause the way it's kinda\n[INAUDIBLE] It says okay,\n\n431\n00:22:44.995 --> 00:22:50.960\nthis dictionary has a first name Vonne,\nlast name Smith, age 24.\n\n432\n00:22:50.960 --> 00:22:51.627\nAge is not 19.\n\n433\n00:22:51.627 --> 00:22:58.420\nI essentially overwrote the previous\none by having a duplicate key.\n\n434\n00:22:58.420 --> 00:23:02.410\nIt does not break explicitly, but\nbe very very careful about this.\n\n435\n00:23:02.410 --> 00:23:04.960\nYou only get one He.\n\n436\n00:23:04.960 --> 00:23:07.170\nExcuse me, one value for a key.\n\n437\n00:23:07.170 --> 00:23:10.420\nNow this value can be complex,\nlike a list of things.\n\n438\n00:23:10.420 --> 00:23:12.170\nBut you only get it one time.\n\n439\n00:23:12.170 --> 00:23:16.220\nAs a result, when you set it,\njust like this.\n\n440\n00:23:16.220 --> 00:23:21.990\nDoing this, and doing this,\nare kind of assigning age a new value.\n\n441\n00:23:21.990 --> 00:23:23.840\nEither time, so be very careful.\n\n442\n00:23:23.840 --> 00:23:26.630\nDoes that make sense, Vonne?\n&gt;&gt; Yeah, well this says to me that I'm\n\n443\n00:23:26.630 --> 00:23:30.700\nthinking primary keys and\naccess, and they must be unique.\n\n444\n00:23:30.700 --> 00:23:35.570\nSo every key that you have in\na dictionary must be unique.\n\n445\n00:23:35.570 --> 00:23:40.650\nThat's like the parameters\nof using this data type.\n\n446\n00:23:40.650 --> 00:23:42.290\nSo that does make sense.\n\n447\n00:23:42.290 --> 00:23:44.480\nI do have a question [LAUGH].\n\n448\n00:23:44.480 --> 00:23:49.322\nWhen you redefined, or assigned,\nyou did 23 instead of 24.\n\n449\n00:23:49.322 --> 00:23:55.179\nBefore it was like, was it tuples or\n\n450\n00:23:55.179 --> 00:23:58.503\nrows that redid it.\n\n451\n00:23:58.503 --> 00:24:05.718\nIt made a new one, or is it That from this\ncode point first going forward, or did you\n\n452\n00:24:05.718 --> 00:24:09.394\nactually reassign it and it is like that?\n\n453\n00:24:09.394 --> 00:24:10.104\n&gt;&gt; So-\n&gt;&gt; Permanently.\n\n454\n00:24:10.104 --> 00:24:11.771\n[LAUGH]\n&gt;&gt; I get what you're saying.\n\n455\n00:24:11.771 --> 00:24:15.750\nSo does it have a list like behavior\nwhere if I reassign a position in a list,\n\n456\n00:24:15.750 --> 00:24:19.740\nfrom that point on, that position\nhas that corresponding number?\n\n457\n00:24:19.740 --> 00:24:22.310\nIn a tuple,\nI have to make a new tuple with a change.\n\n458\n00:24:22.310 --> 00:24:26.040\nAll right, dictionaries are immutable,\nexcuse me.\n\n459\n00:24:26.040 --> 00:24:31.270\nI had a weird hiccup there and it\nsounded like I said immutable, it's not.\n\n460\n00:24:31.270 --> 00:24:34.710\nThey are able to be mutated.\n\n461\n00:24:34.710 --> 00:24:36.290\nI can mutate them.\n\n462\n00:24:36.290 --> 00:24:39.170\nI have mutated the dictionary\nat that point.\n\n463\n00:24:39.170 --> 00:24:42.920\nAfter line 12 onward the age\nwill be 23 in that dictionary.\n\n464\n00:24:43.958 --> 00:24:49.850\nSo dictionaries are mutatable,\nI guess I should say.\n\n465\n00:24:49.850 --> 00:24:51.880\nMutatable, I don't even\nknow if that's a word, but\n\n466\n00:24:51.880 --> 00:24:56.910\nI think it provides some clarity.\n&gt;&gt; Well it definitely makes it clear for\n\n467\n00:24:56.910 --> 00:24:58.690\nme and you say it a lot better than I do.\n\n468\n00:24:58.690 --> 00:25:01.120\nI'm like I'm just stumbling\nthrough all this stuff, is it,\n\n469\n00:25:01.120 --> 00:25:04.128\nthose things you said before [LAUGH]\n&gt;&gt; And that's okay.\n\n470\n00:25:04.128 --> 00:25:07.770\nNow Vonne, I have a fear of the things\nthat I wanna show you in dictionaries that\n\n471\n00:25:07.770 --> 00:25:10.310\nare kinda, that's weird.\n\n472\n00:25:10.310 --> 00:25:15.790\nSome of them have to do with mutability or\nmutatability, able to be mutated.\n\n473\n00:25:15.790 --> 00:25:18.310\nAnd I also wanna circle back around and\n\n474\n00:25:18.310 --> 00:25:22.350\ncompare these functions that\nI asked you to tell me about.\n\n475\n00:25:22.350 --> 00:25:26.490\nWhen I glanced at the clock,\nwhile you were asking me a question.\n\n476\n00:25:27.720 --> 00:25:29.760\nI don't think we have time, it looks\nlike we're gonna have to come back for\n\n477\n00:25:29.760 --> 00:25:32.320\na part two because it\ncould get a little hairy.\n\n478\n00:25:32.320 --> 00:25:34.430\nSo, maybe we have to come back for\na part two, but\n\n479\n00:25:34.430 --> 00:25:38.430\ndefinitely don't miss those because again,\nI wanna show you those gotchas so\n\n480\n00:25:38.430 --> 00:25:40.500\nyou have clarity moving forward.\n\n481\n00:25:40.500 --> 00:25:42.330\nDictionaries are incredibly powerful,\n\n482\n00:25:42.330 --> 00:25:46.380\nprobably one of the most common\nthings that I use and Python uses.\n\n483\n00:25:46.380 --> 00:25:50.320\nYou need to make sure you do not run into,\nwell that's weird, why does that, right?\n\n484\n00:25:50.320 --> 00:25:51.450\nDictionaries are not ordered.\n\n485\n00:25:51.450 --> 00:25:54.420\nIf you assume that they were,\neh, that's odd.\n\n486\n00:25:55.700 --> 00:25:57.910\nOne final note about that ordering.\n\n487\n00:25:57.910 --> 00:26:03.720\nThe reason I say they're not ordered,\nis up until Python.\n\n488\n00:26:03.720 --> 00:26:07.034\nIt might have been a later version of\nthree six, we are at three six five.\n\n489\n00:26:07.034 --> 00:26:10.665\nAnd three seven, they changed it,\n\n490\n00:26:10.665 --> 00:26:15.150\ndictionaries have some intrinsic\nordering behind the scene,\n\n491\n00:26:16.420 --> 00:26:20.060\nbut it specifically tells\nyou do not rely on them.\n\n492\n00:26:20.060 --> 00:26:23.290\nEverything beforehand,\nPython three one, three three,\n\n493\n00:26:23.290 --> 00:26:28.030\nthree four, Python two dictionary's\ndid not have an order.\n\n494\n00:26:29.250 --> 00:26:32.300\nWe're gonna assume that dictionaries do\nnot have an order because we're allowing\n\n495\n00:26:32.300 --> 00:26:34.400\nthat and it changes in the future.\n\n496\n00:26:34.400 --> 00:26:35.880\nChanges back to how it was.\n\n497\n00:26:37.940 --> 00:26:41.900\nLike in 38 or 39,\nthen some of your code is gonna break.\n\n498\n00:26:41.900 --> 00:26:46.160\nSo, if you a reading, you go actually\nwait they're actually ordered.\n\n499\n00:26:46.160 --> 00:26:48.590\nYes, that is a relatively new admit.\n\n500\n00:26:48.590 --> 00:26:54.238\nThink of them as unordered collections\nthat you do look-ups by keys,\n\n501\n00:26:54.238 --> 00:26:56.352\nnot relying on the order.\n\n502\n00:26:56.352 --> 00:26:58.932\nBut we're gonna have to come back Vonne,\nI did a lot of talking there and\n\n503\n00:26:58.932 --> 00:27:03.470\nI guess I'm gonna turn it over to you now.\n&gt;&gt; I love when language is kind of,\n\n504\n00:27:03.470 --> 00:27:05.010\nchange the way things happen.\n\n505\n00:27:05.010 --> 00:27:09.690\nIt's somewhat, you know maybe it's like\nsmall, but it's significant enough for\n\n506\n00:27:09.690 --> 00:27:11.220\nyou to be like ooh, okay.\n\n507\n00:27:11.220 --> 00:27:12.780\nYeah, so that's fun.\n\n508\n00:27:12.780 --> 00:27:17.240\nAnd I was stumbling through my question,\nbut it is definitely making sense to me.\n\n509\n00:27:17.240 --> 00:27:21.240\nAnd I'm liking that we're talking a lot\nabout it, because it really kind of\n\n510\n00:27:21.240 --> 00:27:25.350\nsolidifies in my brain as I'm going\nthrough here, when to use this.\n\n511\n00:27:25.350 --> 00:27:27.470\nSo I feel like the foundations\nare still important.\n\n512\n00:27:27.470 --> 00:27:28.330\nLike why?\n\n513\n00:27:28.330 --> 00:27:28.901\nWhat does this do?\n\n514\n00:27:28.901 --> 00:27:30.048\nWhy, how is that different?\n\n515\n00:27:30.048 --> 00:27:31.510\nWhen would you use it?\n\n516\n00:27:31.510 --> 00:27:34.670\nAll of those things to make sure\nthat you really understand it.\n\n517\n00:27:34.670 --> 00:27:36.050\nSo then you can use it appropriate.\n\n518\n00:27:36.050 --> 00:27:37.820\nBut I'm glad we're coming back for\nsome more.\n\n519\n00:27:37.820 --> 00:27:38.880\nSo you all stick around.\n\n520\n00:27:38.880 --> 00:27:41.550\nBut for now we are gonna to go ahead and\nsign off for DevPro.TV.\n\n521\n00:27:41.550 --> 00:27:44.390\nI have been your host Van Smith.\n&gt;&gt; And I'm Justin Dennison.\n\n522\n00:27:44.390 --> 00:27:46.070\n&gt;&gt; And we will see you soon.\n\n523\n00:27:46.070 --> 00:27:51.458\n[MUSIC]\n\n",
          "vimeoId": "268458074"
        },
        {
          "description": "In this episode, Justin and Vonne take a look at dictionaries that provide yet a different way to arranging data. Justin discusses when to use lists and tuples versus dictionaries as well as provides an overview of operations that you can use with dictionaries.",
          "length": "1662",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-3-2-dictionaries_pt_2-050418-PGM.00_27_46_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-3-2-dictionaries_pt_2-050418-PGM.00_27_46_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-3-2-dictionaries_pt_2-050418-PGM.00_27_46_11.Still001-sm.jpg",
          "title": "Dictionaries Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.961 --> 00:00:16.906\nSo what if I said?\n\n3\n00:00:16.906 --> 00:00:18.216\nI'm your host Vonne Smith.\n\n4\n00:00:18.216 --> 00:00:22.155\nAnd we're coming back with a part\ntwo in our Dictionaries episode in\n\n5\n00:00:22.155 --> 00:00:23.925\nour Programming Fundamentals series.\n\n6\n00:00:23.925 --> 00:00:26.035\nAnd here to help us is Mr.\nJustin Dennison.\n\n7\n00:00:26.035 --> 00:00:28.060\nHello, how are you?\n&gt;&gt; I'm doing fantastic, Vonne.\n\n8\n00:00:28.060 --> 00:00:29.565\nSo what if I said?\n&gt;&gt; I'm good.\n\n9\n00:00:29.565 --> 00:00:32.295\nWe had so\nmuch fun talking about dictionaries.\n\n10\n00:00:33.370 --> 00:00:35.850\nI had a light bulb moment back there.\n\n11\n00:00:35.850 --> 00:00:37.450\nI was pretty excited about it.\n\n12\n00:00:37.450 --> 00:00:39.080\nAnd so, we were finding patterns.\n\n13\n00:00:39.080 --> 00:00:41.144\nAnd I'm like, I found a pattern, yay!\n\n14\n00:00:41.144 --> 00:00:41.878\nWait, what?\n\n15\n00:00:41.878 --> 00:00:43.440\nThat one does matter, that one doesn't.\n\n16\n00:00:43.440 --> 00:00:46.170\nSo we kinda got into all of the semantics.\n\n17\n00:00:46.170 --> 00:00:50.335\nYou also told me I was supposed\nto remind you of something,\n\n18\n00:00:50.335 --> 00:00:56.030\n[LAUGH] which I'm so good at reminding\nyou about that thing that you told me.\n\n19\n00:00:56.030 --> 00:00:56.686\n&gt;&gt; With that guy in\n\n20\n00:00:56.686 --> 00:00:57.361\nthat movie?\n&gt;&gt; Yeah.\n\n21\n00:00:57.361 --> 00:00:58.018\n&gt;&gt; Yeah, I know what you're taking\n\n22\n00:00:58.018 --> 00:00:58.616\nabout.\n&gt;&gt; [LAUGH]\n\n23\n00:00:58.616 --> 00:01:00.560\n&gt;&gt; No it's the dictionary function, right?\n\n24\n00:01:00.560 --> 00:01:07.009\nIt's up until this point using list,\ntuples and, here are Dictionaries,\n\n25\n00:01:07.009 --> 00:01:11.970\nwe have used mostly,\nmostly the literal syntax, right?\n\n26\n00:01:11.970 --> 00:01:16.280\nSo you have some kinda braces or\nsome brackets or parentheses, and\n\n27\n00:01:16.280 --> 00:01:17.680\nthen you just type stuff.\n\n28\n00:01:17.680 --> 00:01:20.170\nSo these are called literal syntax.\n\n29\n00:01:20.170 --> 00:01:22.870\nStrings are also a literal\nsyntax like this.\n\n30\n00:01:22.870 --> 00:01:28.700\nHowever, one of the things that I do\nwanna kinda roll back around to is\n\n31\n00:01:28.700 --> 00:01:30.390\nthe dictionary syntax.\n\n32\n00:01:30.390 --> 00:01:34.250\nAnd you'll see why strings end\nup being the respective keys.\n\n33\n00:01:34.250 --> 00:01:37.790\nWe also have to do some expiration of,\nwhat can I do with the dictionary?\n\n34\n00:01:37.790 --> 00:01:40.320\nNow, this literal syntax,\nI'm going to bring in.\n\n35\n00:01:40.320 --> 00:01:45.084\nBut there's actually, excuse me,\nthe function, I'm gonna roll back into\n\n36\n00:01:45.084 --> 00:01:49.970\nlist and tuple just for a little bit cuz\nwe can kinda get these all co-mingled.\n\n37\n00:01:49.970 --> 00:01:54.390\nThe dictionary one is probably\nthe one that I use the most, though.\n\n38\n00:01:54.390 --> 00:01:58.750\nWhen you can, use the literal syntax,\nbut there are some times where\n\n39\n00:01:58.750 --> 00:02:01.330\nhaving these functions are just\ngonna be helpful to you.\n\n40\n00:02:01.330 --> 00:02:04.450\nSo let's go ahead and take a look\nat the screen and actually do that.\n\n41\n00:02:04.450 --> 00:02:07.600\nAll right, so I'm gonna show you this.\n\n42\n00:02:07.600 --> 00:02:10.040\nUsing the dictionary,\nlet's take this, we left off.\n\n43\n00:02:10.040 --> 00:02:11.320\nIn part one, we had all this.\n\n44\n00:02:11.320 --> 00:02:12.840\nI'm going to take this age 19 out.\n\n45\n00:02:14.140 --> 00:02:17.020\nAnd everything else looks fine, right?\n\n46\n00:02:17.020 --> 00:02:19.240\nI'm not gonna change any of this code.\n\n47\n00:02:19.240 --> 00:02:22.992\nWhat I am gonna do instead is\ncomment this out and show you, well,\n\n48\n00:02:22.992 --> 00:02:29.100\nI can create a user by typing\nthis function keyword, all right?\n\n49\n00:02:29.100 --> 00:02:35.229\nAnd then say, first_name=Vonne,\n\n50\n00:02:35.229 --> 00:02:43.123\nlast_name=Smith, age=24.\n\n51\n00:02:43.123 --> 00:02:49.330\nNow, what's really crazy about this\nis these are not in quotes, right?\n\n52\n00:02:49.330 --> 00:02:51.470\nUp here, they were in quotes, right?\n\n53\n00:02:51.470 --> 00:02:52.710\nHere, they're not.\n\n54\n00:02:52.710 --> 00:02:55.280\nAnd that's just because of\nhow functions work in Python.\n\n55\n00:02:55.280 --> 00:02:59.000\nWe're actually gonna\nsee functions later on,\n\n56\n00:02:59.000 --> 00:03:02.537\na little more in depth, but first_name=.\n\n57\n00:03:02.537 --> 00:03:05.322\nAnd by setting,\nthe equals behind the scenes,\n\n58\n00:03:05.322 --> 00:03:09.200\nit will actually give us\nthis entire thing, okay?\n\n59\n00:03:09.200 --> 00:03:13.340\nCrazy, crazy, crazy stuff,\nall right, but don't worry.\n\n60\n00:03:14.540 --> 00:03:18.080\nIf we hop over here, let's just see\nif everything else still works.\n\n61\n00:03:18.080 --> 00:03:20.420\nDictionaries, it does.\n\n62\n00:03:20.420 --> 00:03:24.250\nWhen I call this function,\nI give it a key equal to a value,\n\n63\n00:03:24.250 --> 00:03:29.210\na key equal to a value,\na key equal to a value.\n\n64\n00:03:29.210 --> 00:03:34.450\nAnd the reason that I use this a great\ndeal, the utility, to me, is if I need,\n\n65\n00:03:34.450 --> 00:03:39.050\nI don't have to worry about typing quotes\ncuz I'm really bad about messing that up.\n\n66\n00:03:39.050 --> 00:03:41.800\nAnd then also,\neven though I'm typing a string,\n\n67\n00:03:41.800 --> 00:03:47.140\nthis may actually be another function call\nor a list or I can pass in a variable.\n\n68\n00:03:47.140 --> 00:03:52.930\nSo if I wanted something like this,\nfirst_name=Vonne,\n\n69\n00:03:52.930 --> 00:03:57.906\ninstead of typing Vonne,\nI would say, and just for\n\n70\n00:03:57.906 --> 00:04:02.564\nclarity, let's change this to fname or\nname.\n\n71\n00:04:02.564 --> 00:04:04.900\nThere we go, cuz we reused fname.\n\n72\n00:04:04.900 --> 00:04:08.100\nSo let's say first_name=name.\n\n73\n00:04:08.100 --> 00:04:11.880\nIt will replace this value,\nand this makes it fairly easy.\n\n74\n00:04:11.880 --> 00:04:15.230\nAnd I don't accidentally mess up and\njust say, well, first_name name.\n\n75\n00:04:15.230 --> 00:04:18.950\nYou could do this exact same\nthing in the dictionary literal.\n\n76\n00:04:18.950 --> 00:04:21.720\nBut, when I have a bunch of\nthese kinda chained together,\n\n77\n00:04:21.720 --> 00:04:26.370\nI find this syntax\na little easier to type.\n\n78\n00:04:26.370 --> 00:04:28.820\nNot saying it's easier to\nreason about all the time,\n\n79\n00:04:28.820 --> 00:04:31.310\nbut it is a little bit easier to type.\n\n80\n00:04:31.310 --> 00:04:33.960\nSo everything still works there, and\n\n81\n00:04:33.960 --> 00:04:39.210\nit can be a little iffy.\n&gt;&gt; Well, those are variables.\n\n82\n00:04:39.210 --> 00:04:43.590\nI mean, that's what when we were assigning\nvariables, we said this equals this.\n\n83\n00:04:43.590 --> 00:04:45.950\nAnd that's why I actually\nsaid in the first part,\n\n84\n00:04:45.950 --> 00:04:48.710\nI was like, aren't these just\nlike a group of variables?\n\n85\n00:04:48.710 --> 00:04:50.490\nYou're saying this equals this.\n\n86\n00:04:50.490 --> 00:04:51.550\nAnd so, there you go.\n\n87\n00:04:51.550 --> 00:04:56.110\nSo you're saying that syntax that\nyou just typed in with the equals,\n\n88\n00:04:56.110 --> 00:05:01.640\nthis is valid and this is preferred\nas opposed to the colons?\n\n89\n00:05:01.640 --> 00:05:03.200\n&gt;&gt; So, behind the scenes,\n\n90\n00:05:03.200 --> 00:05:05.950\nwhat this does is this constructs.\n\n91\n00:05:05.950 --> 00:05:08.313\nThis creates a dictionary just like this.\n\n92\n00:05:08.313 --> 00:05:10.600\nSo there's an automated process.\n\n93\n00:05:10.600 --> 00:05:14.593\nIt is just because of the syntax\nof Python that I have to do,\n\n94\n00:05:14.593 --> 00:05:17.944\neffectively, a variable\nname equal to a value.\n\n95\n00:05:17.944 --> 00:05:21.840\nBut, behind the scenes\nthese become strings, okay.\n\n96\n00:05:21.840 --> 00:05:25.500\nSo these become this string.\n&gt;&gt; Is that what you're saying?\n\n97\n00:05:25.500 --> 00:05:32.676\nThe literal syntax, when you typed it on\nthat line 3, that's how we're typing it.\n\n98\n00:05:32.676 --> 00:05:37.023\nBut this string, sorry not the string,\nthe line, but the line above it,\n\n99\n00:05:37.023 --> 00:05:41.040\nwhen you have the quotes on it,\nthat's what it literally is doing?\n\n100\n00:05:41.040 --> 00:05:42.130\n&gt;&gt; Yeah, that is.\n\n101\n00:05:42.130 --> 00:05:44.830\nSo the literal syntax is\nliterally what it is.\n\n102\n00:05:44.830 --> 00:05:50.010\nIf you use the function, it assumes these\nare strings and turns it into this.\n\n103\n00:05:50.010 --> 00:05:52.950\nWhich is helpful especially if you\ndon't wanna type quote, quote, quote,\n\n104\n00:05:52.950 --> 00:05:53.648\nquote, quote.\n\n105\n00:05:53.648 --> 00:05:57.980\nAnd they end up with the same result.\n\n106\n00:05:57.980 --> 00:06:00.080\nIt's kind of a preference.\n\n107\n00:06:01.650 --> 00:06:04.300\nWhen I have other more complex things, and\n\n108\n00:06:04.300 --> 00:06:07.020\nI need to see the structure,\nI will use the literal syntax.\n\n109\n00:06:07.020 --> 00:06:11.550\nWhen I have variables that I need\nto combine into stuff, I will use\n\n110\n00:06:11.550 --> 00:06:14.441\nthe dictionary or the DICT function.\n&gt;&gt; Well, and\n\n111\n00:06:14.441 --> 00:06:17.616\nthat's what I noticed when you actually\nwent back to the REPL and actually ran it.\n\n112\n00:06:17.616 --> 00:06:20.430\nI'm like, wait, there's quotes around it.\n\n113\n00:06:20.430 --> 00:06:24.880\nSo it printed it out that way,\nand that's what it saw.\n\n114\n00:06:24.880 --> 00:06:27.890\nBut it didn't have it when you\ntyped it in with the equals, so\n\n115\n00:06:27.890 --> 00:06:29.770\nyou saw it in the result.\n\n116\n00:06:29.770 --> 00:06:32.200\nI actually noticed that, but\nI'm like I'm gonna hold back.\n\n117\n00:06:32.200 --> 00:06:34.690\nI'm not gonna say anything yet\ncuz I bet you he's gonna say something.\n\n118\n00:06:34.690 --> 00:06:36.190\n[LAUGH]\n&gt;&gt; So that's exactly correct.\n\n119\n00:06:36.190 --> 00:06:38.635\nAnd what's fuuny is that happens.\n\n120\n00:06:38.635 --> 00:06:42.320\nThat's usually why I\nuse strings as my keys.\n\n121\n00:06:42.320 --> 00:06:45.090\nLikewise, this works.\n\n122\n00:06:45.090 --> 00:06:48.730\nHowever, if I come down here,\nand I say foods =.\n\n123\n00:06:48.730 --> 00:06:53.540\nI'm just reusing this variable,\nand I say 0=pizza.\n\n124\n00:06:53.540 --> 00:06:56.125\nI'm not gonna type anything else.\n\n125\n00:06:56.125 --> 00:06:58.760\nThat's gonna be weird, right?\n\n126\n00:06:58.760 --> 00:07:02.220\nThat just reads weird to me.\n\n127\n00:07:02.220 --> 00:07:04.634\nSo, if I clear, and\nI say python3 dictionaries.\n\n128\n00:07:04.634 --> 00:07:07.400\nUh-oh, you can't actually do that.\n\n129\n00:07:07.400 --> 00:07:08.350\nIt has to be a word.\n\n130\n00:07:08.350 --> 00:07:10.880\nIt has to be like a valid variable name.\n\n131\n00:07:10.880 --> 00:07:14.960\nAnd it will turn it into\na string behind the scenes.\n\n132\n00:07:14.960 --> 00:07:18.810\nIt can't use numbers because\nthis number is a reserve thing.\n\n133\n00:07:18.810 --> 00:07:20.288\nIt's actually a number.\n&gt;&gt; Yeah.\n\n134\n00:07:20.288 --> 00:07:22.160\n&gt;&gt; It's not the string that is a number.\n\n135\n00:07:22.160 --> 00:07:23.240\n&gt;&gt; Numbers aren't strings.\n\n136\n00:07:23.240 --> 00:07:27.750\nI mean, yes, you could put the quotes\naround a number one and make it a string.\n\n137\n00:07:27.750 --> 00:07:30.366\nAnd it's like a pure value.\n\n138\n00:07:30.366 --> 00:07:31.570\nIt's not a sting.\n\n139\n00:07:31.570 --> 00:07:36.489\nAnd you're saying dictionaries will\nalways create strings out of the keys?\n\n140\n00:07:36.489 --> 00:07:39.770\n&gt;&gt; Yep, it will, using the function.\n\n141\n00:07:39.770 --> 00:07:43.590\nNow, I also told you I was gonna\nbring back list and tuples\n\n142\n00:07:43.590 --> 00:07:47.150\nbecause they have corresponding functions\nlike this, all right, list and tuple.\n\n143\n00:07:48.940 --> 00:07:50.780\nThis one, I have utility for.\n\n144\n00:07:52.200 --> 00:07:56.145\nTuples and list, I'm just gonna\ntemporarily kind of hijack this.\n\n145\n00:07:56.145 --> 00:07:57.440\nSo what if I said?\n\n146\n00:07:58.850 --> 00:08:01.056\nSome stuff, right?\n\n147\n00:08:01.056 --> 00:08:05.978\nThen normally, if we wanted a tuple,\nwe would say, cheese, a car, and\n\n148\n00:08:05.978 --> 00:08:09.960\na sock, right, so\nthis is the literal syntax for a tuple.\n\n149\n00:08:11.140 --> 00:08:16.528\nWell, if I wanted a list,\nI change those to square brackets,\n\n150\n00:08:16.528 --> 00:08:19.340\nand now it's a literal string.\n\n151\n00:08:21.110 --> 00:08:26.190\nIf I had a list and\nI wanted to make it into a tuple,\n\n152\n00:08:28.510 --> 00:08:34.470\nthen I do this,\nI have to pass what's called a collection.\n\n153\n00:08:34.470 --> 00:08:39.169\nTypically, it's gonna be a string, or\nexcuse me, it's going to be, wait for it,\n\n154\n00:08:39.169 --> 00:08:41.860\na list or something of that nature.\n\n155\n00:08:41.860 --> 00:08:46.350\nThis already has to be typed out\nthis way to use the tuple function.\n\n156\n00:08:48.410 --> 00:08:53.610\nIf we try this, now, unless things have\nchanged, this has always broken on me.\n\n157\n00:08:53.610 --> 00:08:55.870\nBut as soon as I got ready\nto say this out loud,\n\n158\n00:08:55.870 --> 00:08:58.280\nmy brain went, are you sure,\nare you sure, sure?\n\n159\n00:08:58.280 --> 00:09:00.670\nWell, we're about to find out.\n\n160\n00:09:00.670 --> 00:09:04.807\nTuple, parentheses, but\nnow I'm calling a function,\n\n161\n00:09:04.807 --> 00:09:08.871\nthat makes sense,\nbased on the dict function, right?\n\n162\n00:09:08.871 --> 00:09:16.618\nSo here, dictionary, tuple() takes at most\n1 argument (3 given), it takes 1 argument.\n\n163\n00:09:16.618 --> 00:09:21.002\nYou have to give the tuple function\neither another tuple, a list, or\n\n164\n00:09:21.002 --> 00:09:24.670\nany other collection, and\nthen it makes it into a tuple.\n\n165\n00:09:24.670 --> 00:09:30.452\nSo if I come back and I add these,\nlike so, and I'll just temporarily\n\n166\n00:09:30.452 --> 00:09:35.443\nprint that out, print(stuff).\n&gt;&gt; You've made it into one argument,\n\n167\n00:09:35.443 --> 00:09:37.635\nbecause you've put them in together.\n\n168\n00:09:37.635 --> 00:09:40.920\nSo this is one piece, and then it\nwill be able to go ahead and do it.\n\n169\n00:09:40.920 --> 00:09:41.970\n&gt;&gt; Yeah, and so\n\n170\n00:09:41.970 --> 00:09:45.950\nlist and tuple are typically for\nconversions between collection types.\n\n171\n00:09:45.950 --> 00:09:47.880\nSo what I mean is, if I have a list, and\n\n172\n00:09:47.880 --> 00:09:50.850\nI wanna make it a tuple,\nI use the tuple function.\n\n173\n00:09:50.850 --> 00:09:53.888\nIf I have a tuple, and I wanna make\nit a list, I use the list function.\n\n174\n00:09:53.888 --> 00:09:58.128\nSo if I go back here and\nI change this to list, and\n\n175\n00:09:58.128 --> 00:10:03.216\nI make this a tuple, like so,\nwell now, if I come back and\n\n176\n00:10:03.216 --> 00:10:10.417\nI run this, It's now a list,\nso these work as a conversion.\n\n177\n00:10:12.034 --> 00:10:16.060\nI do use these, I don't use them a great\ndeal, I usually use literal syntax, or\n\n178\n00:10:16.060 --> 00:10:18.600\nsome other things that\nwe'll learn about later.\n\n179\n00:10:18.600 --> 00:10:23.770\nThe dictionary one, though, has a lot\nmore utility to me, because I can go,\n\n180\n00:10:23.770 --> 00:10:25.570\nfirst name equals, last name equals.\n\n181\n00:10:25.570 --> 00:10:30.530\nI don't have to give it a collection\nof stuff to have it work.\n\n182\n00:10:30.530 --> 00:10:33.413\nWhich is weird,\ncuz that's a collection function, but\n\n183\n00:10:33.413 --> 00:10:37.387\nI already have to have a collection to\nuse that, wometimes it just gets weird.\n\n184\n00:10:37.387 --> 00:10:38.680\n&gt;&gt; Yeah, and when you were showing me,\n\n185\n00:10:38.680 --> 00:10:41.059\nI'm like, okay, that make sense,\nI can understand the syntax and\n\n186\n00:10:41.059 --> 00:10:41.835\nwhat you're doing.\n\n187\n00:10:41.835 --> 00:10:46.260\nI'm like, why would I do this, and where?\n\n188\n00:10:46.260 --> 00:10:51.340\nYou just kind of answered it for\nme, you tend to not do that.\n\n189\n00:10:51.340 --> 00:10:54.364\nBut the dictionary, yes,\ncuz that does, to me,\n\n190\n00:10:54.364 --> 00:10:56.941\nthat makes definitely more sense.\n&gt;&gt; Yeah, so\n\n191\n00:10:56.941 --> 00:10:58.265\nthe dictionary one makes sense.\n\n192\n00:10:58.265 --> 00:11:00.057\nWhat's interesting, though,\n\n193\n00:11:00.057 --> 00:11:03.900\nis if I do have a collection that\nobeys a very particular construction?\n\n194\n00:11:03.900 --> 00:11:09.400\nI can, I don't have to use\nthe dict function like this.\n\n195\n00:11:09.400 --> 00:11:12.120\nSo let's rearrange this,\njust real quick, all right?\n\n196\n00:11:12.120 --> 00:11:19.408\nSo I'm gonna comment this out,\nI can write these like so, okay?\n\n197\n00:11:19.408 --> 00:11:23.133\nI can break these to new lines,\nand this'll still work.\n\n198\n00:11:23.133 --> 00:11:24.438\nThis is a little easier.\n\n199\n00:11:24.438 --> 00:11:28.655\nBut notice, now I have the key on\nthe left and the value on the right.\n\n200\n00:11:28.655 --> 00:11:31.604\nWell, let's say that for some reason,\n\n201\n00:11:31.604 --> 00:11:35.777\nbecause of how I was programming,\nI actually had a list.\n\n202\n00:11:35.777 --> 00:11:39.156\nAnd I'm gonna use list and tuple,\nso you could do list and list,\n\n203\n00:11:39.156 --> 00:11:40.728\nthese are more complicated.\n\n204\n00:11:40.728 --> 00:11:45.369\nBut I'm gonna say first_name,\n\n205\n00:11:45.369 --> 00:11:50.180\nVonne, last_name,\n\n206\n00:11:52.909 --> 00:11:58.208\nAnd, whoa, easy there, Justin,\n\n207\n00:11:58.208 --> 00:12:02.631\nSmith, and then age, 24.\n\n208\n00:12:04.559 --> 00:12:10.244\nIf you kinda squint your eyes, Key-value,\n\n209\n00:12:10.244 --> 00:12:13.580\nokay, I can kinda see,\nthese have a similar structure.\n\n210\n00:12:15.157 --> 00:12:17.706\nThis is a dictionary, this is not, and\n\n211\n00:12:17.706 --> 00:12:21.277\nif I try to run this,\nbecause user is not a dictionary,\n\n212\n00:12:25.039 --> 00:12:29.509\nThen it break,s because list indices must\nbe integers or slices, not a string.\n\n213\n00:12:29.509 --> 00:12:33.311\nIt breaks right here because\nthis is a list of tuples,\n\n214\n00:12:33.311 --> 00:12:36.107\na little more complicated structure.\n\n215\n00:12:36.107 --> 00:12:40.755\nSo this would be the zeroth element,\nthe second, or the first element, and\n\n216\n00:12:40.755 --> 00:12:43.163\nthe second element, a total of three.\n\n217\n00:12:43.163 --> 00:12:47.387\nBut let's relabel this to data, all right,\nlet's call it, this is my data,\n\n218\n00:12:47.387 --> 00:12:51.166\nI got this out of a database, or\nan Excel spreadsheet, or something.\n\n219\n00:12:51.166 --> 00:12:54.070\nI've somehow collected\nall this information, and\n\n220\n00:12:54.070 --> 00:12:55.852\nit came back as a list of tuples.\n\n221\n00:12:55.852 --> 00:12:59.781\nOkay, and now if I say user,\n\n222\n00:13:03.615 --> 00:13:08.562\ndict(data), well, come back and\n\n223\n00:13:08.562 --> 00:13:11.762\nrun this, there we go.\n\n224\n00:13:11.762 --> 00:13:17.810\nWhat it does, is it takes this key and\nthis value, this key and this value,\n\n225\n00:13:17.810 --> 00:13:23.107\nthis key and this value, and\nit constructs a dictionary for you.\n\n226\n00:13:23.107 --> 00:13:26.528\nA dictionary, careful,\ncan be thought of, and\n\n227\n00:13:26.528 --> 00:13:31.211\nimplementation-wise, it actually\nworks very similar to this.\n\n228\n00:13:31.211 --> 00:13:36.311\nBe thought of as a list of\nkey-value pairs which are tuples,\n\n229\n00:13:36.311 --> 00:13:40.420\nand they're just represented\na different way.\n\n230\n00:13:40.420 --> 00:13:44.217\nNow, the way they get, the look-up\nworks a little bit differently, so\n\n231\n00:13:44.217 --> 00:13:45.658\nthere is some conversion.\n\n232\n00:13:45.658 --> 00:13:48.728\nBut you can think of them\nas being the same thing.\n\n233\n00:13:48.728 --> 00:13:49.573\n&gt;&gt; Wow, okay, so\n\n234\n00:13:49.573 --> 00:13:52.238\nI feel like we just kinda\nmade a couple loops, and\n\n235\n00:13:52.238 --> 00:13:54.710\nI actually understood\nwhat you were saying.\n\n236\n00:13:54.710 --> 00:13:58.187\nAnd I was like, well,\nthat's kinda slick, actually,\n\n237\n00:13:58.187 --> 00:14:02.111\nwhere you could create a dictionary\nout of something like this.\n\n238\n00:14:02.111 --> 00:14:05.423\nSo to me, it's like, that's clever.\n&gt;&gt; [LAUGH]\n\n239\n00:14:05.423 --> 00:14:06.372\n&gt;&gt; And actually,\n\n240\n00:14:06.372 --> 00:14:11.193\nit'll be a while before we get there,\nwhen you do database reads with Python?\n\n241\n00:14:11.193 --> 00:14:13.546\nSo if you reach out to a database,\n\n242\n00:14:13.546 --> 00:14:19.272\nyou may actually get a list of key-value\npairs, or you may get a tuple of tuples.\n\n243\n00:14:19.272 --> 00:14:22.237\nSo it doesn't matter if this is a list,\nI just used a list so\n\n244\n00:14:22.237 --> 00:14:23.947\nwe could have different braces.\n\n245\n00:14:23.947 --> 00:14:26.784\nBut now this is a tuple of tuples,\nright, so\n\n246\n00:14:26.784 --> 00:14:31.255\neach element in the tuple is itself\nis a tuple, so this is immutable.\n\n247\n00:14:31.255 --> 00:14:35.499\nIf I re-run this,\nStill works, it's all right,\n\n248\n00:14:35.499 --> 00:14:38.000\nit still has key-value pairs.\n&gt;&gt; But this is where you said,\n\n249\n00:14:38.000 --> 00:14:43.520\nyour data has to be structured in a manner\nthat it would actually make sense.\n\n250\n00:14:43.520 --> 00:14:49.030\nIf you just had cheese,\ndog, cat, bird, squirrel,\n\n251\n00:14:49.030 --> 00:14:53.310\nzero, then that's not gonna,\nit doesn't do anything for you.\n\n252\n00:14:53.310 --> 00:14:55.980\nYeah, you could go ahead and\nconstruct it that way, yeah,\n\n253\n00:14:55.980 --> 00:14:59.600\nyou could construct any of it this way,\nbut it's gotta make sense.\n\n254\n00:14:59.600 --> 00:15:02.020\nSo there has to be some way of,\n\n255\n00:15:02.020 --> 00:15:05.890\nhow it was either grabbed from\nanother place, or what have you.\n\n256\n00:15:05.890 --> 00:15:07.766\nStructure does matter for\nwhat you're doing.\n\n257\n00:15:07.766 --> 00:15:08.778\n&gt;&gt; The structure does matter, and\n\n258\n00:15:08.778 --> 00:15:11.268\nas a matter of fact, let's break this\nstructure and see how that breaks down.\n\n259\n00:15:11.268 --> 00:15:14.781\nSo I added this third element in\nthis tuple, it's just called stuff.\n\n260\n00:15:14.781 --> 00:15:19.208\nLet's re-run this,\nsee what happens, and broke.\n\n261\n00:15:19.208 --> 00:15:22.684\nThe update sequence for\n#0 has a length of 3, 2 is required.\n\n262\n00:15:22.684 --> 00:15:26.311\nYou have to have two elements per thing,\ncuz it's a key-value pair, right?\n\n263\n00:15:26.311 --> 00:15:30.812\nYou don't have three shoes in\na pair of shoes, you got two shoes.\n\n264\n00:15:30.812 --> 00:15:36.817\nLikewise, if we take this out,\nand we just say,\n\n265\n00:15:36.817 --> 00:15:42.091\nVonne, Smith, 24, like that-\n&gt;&gt; That's not gonna work.\n\n266\n00:15:42.091 --> 00:15:44.521\n&gt;&gt; Yeah, you see where this is going,\n\n267\n00:15:44.521 --> 00:15:45.980\ndictionary, boom.\n\n268\n00:15:45.980 --> 00:15:50.170\nIt now it's a length of 5,\nbecause guess what, it's trying to take,\n\n269\n00:15:52.031 --> 00:15:55.744\nWait for it,\nI actually have an extra character there,\n\n270\n00:15:55.744 --> 00:16:00.491\nso, Dictionaries has a length of 5.\n\n271\n00:16:00.491 --> 00:16:02.363\nHow did they get a length of 5?\n\n272\n00:16:02.363 --> 00:16:05.290\nWell, it's probably trying to\ndo some crazy stuff with, well,\n\n273\n00:16:05.290 --> 00:16:06.260\nmaybe this is Vonne.\n\n274\n00:16:06.260 --> 00:16:09.778\nAnd Vonne, well,\nI don't know how to do this.\n\n275\n00:16:09.778 --> 00:16:12.820\nJust remove this number,\ncuz that one's different, right?\n\n276\n00:16:13.920 --> 00:16:20.150\npython, wait for it, dictionary,\nI forgot that for some reason.\n\n277\n00:16:20.150 --> 00:16:22.150\nAnd why is it doing that?\n\n278\n00:16:22.150 --> 00:16:23.758\nIt's doing weird stuff, right?\n\n279\n00:16:23.758 --> 00:16:28.380\nWell, where's that 5 coming from?\n\n280\n00:16:28.380 --> 00:16:32.470\nIt's actually trying to treat this as\na collection, a string is a collection.\n\n281\n00:16:32.470 --> 00:16:34.980\nVonne's first name has five letters.\n\n282\n00:16:34.980 --> 00:16:39.340\nSo it's trying to go, well, the V\nmatches to the O, the N, the N, the E.\n\n283\n00:16:39.340 --> 00:16:42.040\nIt has to follow a very\nparticular structure.\n\n284\n00:16:42.040 --> 00:16:46.800\nIt has to be a collection of pairs,\nlike so.\n\n285\n00:16:46.800 --> 00:16:49.850\nAnd then you can call dict, and\nit will give you a dictionary.\n\n286\n00:16:51.020 --> 00:16:54.915\nNow, the reason I wanted to show you this\nand kinda contrast that with the list is,\n\n287\n00:16:54.915 --> 00:16:57.230\nif we head over onto the repo like so,\nall right,\n\n288\n00:16:57.230 --> 00:16:59.623\nwe're gonna play around\nin the repo a little bit.\n\n289\n00:16:59.623 --> 00:17:02.130\nAnd we always do this because the repo\nis very handy for experimentation.\n\n290\n00:17:02.130 --> 00:17:07.800\nI'm gonna say user,\nI'm just gonna say name is bob.\n\n291\n00:17:07.800 --> 00:17:13.320\nAnd wait for it, age is 23, all right?\n\n292\n00:17:13.320 --> 00:17:15.210\nSo here's our user dictionary.\n\n293\n00:17:16.780 --> 00:17:20.862\nAll right, so if I type dir(user),\n\n294\n00:17:20.862 --> 00:17:26.231\neverything with underscores,\nforget about it.\n\n295\n00:17:26.231 --> 00:17:31.331\nBut here, we have clear,\ncopy, fromkeys, get, items,\n\n296\n00:17:31.331 --> 00:17:36.535\nkeys, pop, popitem, setdefault,\nupdate, and values.\n\n297\n00:17:38.462 --> 00:17:39.862\nWe're not gonna go through all of these.\n\n298\n00:17:39.862 --> 00:17:42.130\nWe can show you how to take a look.\n\n299\n00:17:42.130 --> 00:17:45.430\nBut clear, that's actually just\ngonna clear your dictionary.\n\n300\n00:17:45.430 --> 00:17:47.645\nCopy, that's gonna copy your dictionary.\n\n301\n00:17:47.645 --> 00:17:51.262\nFromkeys, hm, let's actually look at that.\n\n302\n00:17:51.262 --> 00:17:54.470\nSo we're gonna say,\n\n303\n00:17:54.470 --> 00:18:00.080\nhelp( user.fromkeys), like so.\n\n304\n00:18:00.080 --> 00:18:05.220\nIterable, value returns a new dictionary\nwith keys from the iterable and\n\n305\n00:18:05.220 --> 00:18:06.340\nvalues equal to value.\n\n306\n00:18:07.530 --> 00:18:11.540\nEssentially, this says\ngive me bunch of keys, and\n\n307\n00:18:11.540 --> 00:18:14.911\nthen what value do you\nwant to assign it to?\n\n308\n00:18:16.609 --> 00:18:19.180\nYou know how I said it has to\nbe a very particular structure?\n\n309\n00:18:19.180 --> 00:18:25.013\nWell, if I said, Fromkeys,\n\n310\n00:18:25.013 --> 00:18:28.560\nso notice I didn't use user,\nbecause I'm using the function.\n\n311\n00:18:28.560 --> 00:18:31.245\nThe function has a property,\nthat's a whole different thing.\n\n312\n00:18:31.245 --> 00:18:36.570\nFromkeys, I'm gonna say, name and age.\n\n313\n00:18:37.840 --> 00:18:42.781\nAnd I'm gonna say value=3.\n\n314\n00:18:42.781 --> 00:18:47.390\nTakes no keyword, it shows it as\na keyword argument, which is unfortunate.\n\n315\n00:18:47.390 --> 00:18:51.110\nSo 3, what it does is it takes\nall of these and make them keys.\n\n316\n00:18:51.110 --> 00:18:53.060\nBut then it just fills in a default value.\n\n317\n00:18:54.120 --> 00:18:58.497\nSo if you had an iterable,\nwhich is a bunch of keys, a list or\n\n318\n00:18:58.497 --> 00:19:01.488\na tuple, first name, last name, age.\n\n319\n00:19:01.488 --> 00:19:03.870\nAnd you just wanna say,\nlet's put something in its place for now.\n\n320\n00:19:03.870 --> 00:19:05.636\nWe're gonna figure out\nthe rest of it later.\n\n321\n00:19:05.636 --> 00:19:07.250\nThen you can use fromkeys.\n\n322\n00:19:09.430 --> 00:19:15.340\nThat kinda goes along with the list\nof tuples, or tuples of tuples.\n\n323\n00:19:15.340 --> 00:19:21.380\nBut really, the most commonly used ones\nthat I use and that I see other people use\n\n324\n00:19:21.380 --> 00:19:26.075\nare the following, this get,\n\n325\n00:19:26.075 --> 00:19:30.220\nitems, keys, and values.\n\n326\n00:19:31.550 --> 00:19:35.940\nPop and popitem,\nevery once in a while, you'll use it.\n\n327\n00:19:37.910 --> 00:19:43.618\nIf we do the following, help(user.pop),\n\n328\n00:19:43.618 --> 00:19:49.680\nif I give it a k, a key like a name, if I\ngive it a name, it would return the value.\n\n329\n00:19:50.990 --> 00:19:55.289\nHowever, it will also delete\nthat value from the dictionary.\n\n330\n00:19:56.770 --> 00:20:04.070\nOkay, so if I pop the name, it goes away.\n&gt;&gt; It's like a full find and replace,\n\n331\n00:20:04.070 --> 00:20:08.987\nand it's gone.\n&gt;&gt; It's even more destructive than that.\n\n332\n00:20:08.987 --> 00:20:10.620\nActually, let's do this.\n\n333\n00:20:10.620 --> 00:20:12.590\nWell, clear doesn't work on the repo.\n\n334\n00:20:12.590 --> 00:20:19.691\nSo if I say, user.pop name,\nit gives me bob.\n\n335\n00:20:19.691 --> 00:20:22.090\nBut now the name is no\nlonger in the dictionary.\n\n336\n00:20:22.090 --> 00:20:24.490\nIt actually removed it\nfrom the dictionary.\n\n337\n00:20:24.490 --> 00:20:25.170\n&gt;&gt; It scrubbed it\n\n338\n00:20:25.170 --> 00:20:25.899\nout.\n&gt;&gt; Yeah.\n\n339\n00:20:25.899 --> 00:20:27.830\n&gt;&gt; This does not exist anymore.\n\n340\n00:20:27.830 --> 00:20:30.296\nIt's like all 1984 and\nall that stuff [LAUGH.\n\n341\n00:20:30.296 --> 00:20:32.876\n&gt;&gt; Yes, so if I do user, I put it back,\n\n342\n00:20:32.876 --> 00:20:34.597\nI re-initialized it.\n\n343\n00:20:34.597 --> 00:20:39.680\nI didn't show you this, because I told\nyou mutatability is kind of weird.\n\n344\n00:20:39.680 --> 00:20:45.730\nIt is very similar to using the del\nkeyword, user bob, like so.\n\n345\n00:20:45.730 --> 00:20:46.660\nNot bob, name.\n\n346\n00:20:48.480 --> 00:20:50.769\nBut notice it doesn't return the value,\nit just gets rid of it.\n\n347\n00:20:50.769 --> 00:20:53.510\nThat's not a common use case.\n\n348\n00:20:53.510 --> 00:20:56.250\nBut let's put these back, go to here.\n\n349\n00:20:56.250 --> 00:21:03.950\nWhat differs though, with user.popitem\nname, excuse me, not name.\n\n350\n00:21:03.950 --> 00:21:05.050\nThis takes no arguments.\n\n351\n00:21:06.670 --> 00:21:09.340\nAge, what is it, where did that come from?\n\n352\n00:21:09.340 --> 00:21:12.173\nNotice it's a tuple also,\nit's a key and a value.\n\n353\n00:21:12.173 --> 00:21:15.760\nDo it again, it gives me the name and bob.\n\n354\n00:21:15.760 --> 00:21:17.110\nDo it again, it's now empty.\n\n355\n00:21:17.110 --> 00:21:21.060\nIt actually deletes them out.\n\n356\n00:21:21.060 --> 00:21:25.207\nIt grabs a key and its corresponding\nvalue, and it puts them in a tuple.\n\n357\n00:21:25.207 --> 00:21:27.116\nAnd then it throws them out to you.\n\n358\n00:21:27.116 --> 00:21:33.920\nReally odd behavior, I have seen people\nuse this, it's not a typical use case.\n\n359\n00:21:33.920 --> 00:21:35.694\nBecause you're like, all right, so\n\n360\n00:21:35.694 --> 00:21:38.809\nI'm changing the dictionary while\nI'm getting key value pairs.\n\n361\n00:21:38.809 --> 00:21:42.604\nBut there's no guarantee that I'm\ngoing to get a particular key in\n\n362\n00:21:42.604 --> 00:21:44.050\na particular order.\n\n363\n00:21:44.050 --> 00:21:45.950\nIt's just gonna, whatever comes out.\n\n364\n00:21:46.960 --> 00:21:48.350\nDon't use this a great deal.\n\n365\n00:21:48.350 --> 00:21:49.420\nAnd I could tell by Vonne's look.\n\n366\n00:21:49.420 --> 00:21:53.460\nShe's like no, this is bad, this is bad.\n&gt;&gt; Yeah, I'm like, so let me see it and\n\n367\n00:21:53.460 --> 00:21:54.430\nthen get rid of it?\n\n368\n00:21:54.430 --> 00:21:59.970\nAnd randomly, that seems very destructive.\n&gt;&gt; Yeah, it is very destructive.\n\n369\n00:21:59.970 --> 00:22:04.280\nAnd there are use cases, I think\nbehind the scenes, they use this for\n\n370\n00:22:04.280 --> 00:22:05.260\nsome other operations.\n\n371\n00:22:06.290 --> 00:22:08.010\nIt's typically not what you're gonna do.\n\n372\n00:22:08.010 --> 00:22:09.430\nBut let's put the user back.\n\n373\n00:22:10.800 --> 00:22:12.940\nAnd really I have to do what?\n\n374\n00:22:12.940 --> 00:22:19.549\nIf I say user.items,\nyou get what is called a dict,items.\n\n375\n00:22:19.549 --> 00:22:24.630\nAnd it gives you a list of\ntuples with key value pairs.\n\n376\n00:22:24.630 --> 00:22:29.780\nThis is how you get that list of tuples\nback out if you feed into a dictionary.\n\n377\n00:22:29.780 --> 00:22:33.840\nSo it will give you key value pairs,\nand we'll see how to use those later.\n\n378\n00:22:35.570 --> 00:22:40.467\nKeys, it gives you effectively\na list of the keys.\n\n379\n00:22:42.651 --> 00:22:44.990\nAnd values, it gives you all the values.\n\n380\n00:22:44.990 --> 00:22:47.870\nSo if I want to split\nthese two pieces apart,\n\n381\n00:22:47.870 --> 00:22:52.240\nso if I say keys, that would be user.\n\n382\n00:22:52.240 --> 00:22:54.380\nActually, I'm gonna make\nthese just a regular list.\n\n383\n00:22:54.380 --> 00:22:58.030\nSo list user.keys.\n&gt;&gt; You spelled keys wrong.\n\n384\n00:22:58.030 --> 00:22:58.674\n&gt;&gt; All right, yeah.\n\n385\n00:22:58.674 --> 00:22:59.950\n&gt;&gt; [LAUGH]\n\n386\n00:22:59.950 --> 00:23:02.525\n&gt;&gt; There you go, Vonne, but that's a kyes.\n\n387\n00:23:02.525 --> 00:23:04.450\n&gt;&gt; I was like, is he gonna catch that?\n\n388\n00:23:04.450 --> 00:23:06.705\nNo, wait, hold on, hey wait, do it.\n\n389\n00:23:06.705 --> 00:23:08.606\n[LAUGH]\n&gt;&gt; All right,\n\n390\n00:23:08.606 --> 00:23:13.000\nnow I just put those in a list so\nI can get rid of this extra piece here.\n\n391\n00:23:13.000 --> 00:23:16.770\nWe're all good, so I have keys and\nnow I have values.\n\n392\n00:23:16.770 --> 00:23:19.180\nAnd now I essentially\njust got the two columns.\n\n393\n00:23:19.180 --> 00:23:21.980\nThis is how I can slice a column apart,\nand get the left and\n\n394\n00:23:21.980 --> 00:23:23.380\nthe right hand column.\n\n395\n00:23:23.380 --> 00:23:27.583\nIf I asked for items, and\nI'm not gonna assign this to a variable.\n\n396\n00:23:30.203 --> 00:23:33.650\nThen I get a list of tuples\nthat are key value pairs.\n\n397\n00:23:33.650 --> 00:23:36.341\nSo it's just,\nhow do I want to represent this data?\n\n398\n00:23:36.341 --> 00:23:39.030\n&gt;&gt; Yeah, I'm having flashbacks again.\n\n399\n00:23:39.030 --> 00:23:41.580\nWell, I don't know if it's flashbacks,\nbut of Excel.\n\n400\n00:23:41.580 --> 00:23:43.110\nI wanna extract this, I wanna take this.\n\n401\n00:23:43.110 --> 00:23:46.327\nNow I wanna group this together,\nand you guys go together.\n\n402\n00:23:46.327 --> 00:23:51.897\nI mean, it's just different ways of,\nit's almost like converting your database\n\n403\n00:23:51.897 --> 00:23:56.845\nof information, of how you want it to\ncome out, and it This is kinda cool.\n\n404\n00:23:56.845 --> 00:24:00.079\n[LAUGH]\n&gt;&gt; So, it's that exact reasoning of why\n\n405\n00:24:00.079 --> 00:24:05.470\ndictionaries are very useful, and\nwe'll see them continue to crop up.\n\n406\n00:24:05.470 --> 00:24:11.750\nBut at this point, items, values,\nkeys, know that you can do lookups.\n\n407\n00:24:11.750 --> 00:24:15.175\nThat dict function is very handy.\n\n408\n00:24:15.175 --> 00:24:16.747\nBut don't forget these,\n\n409\n00:24:16.747 --> 00:24:21.540\nI use them pretty much every time\nI'm programming something in Python.\n\n410\n00:24:21.540 --> 00:24:24.250\nIt has come up,\nyou need to know how these work.\n\n411\n00:24:24.250 --> 00:24:28.820\nNot a whole lot to know,\nthere are some edge cases though.\n\n412\n00:24:28.820 --> 00:24:31.393\nOne final thing before I let you go and\n\n413\n00:24:31.393 --> 00:24:35.690\nVonne takes us to the wild blue\nyonder then, wait a minute.\n\n414\n00:24:35.690 --> 00:24:36.990\nThat has some negative connotation.\n\n415\n00:24:36.990 --> 00:24:41.590\nAnyway, is if I say user, so\nif I look at user and it has a name in it.\n\n416\n00:24:41.590 --> 00:24:48.107\nWhat if I ask user for\nlast name here, doesn't exist.\n\n417\n00:24:48.107 --> 00:24:49.360\nThe user doesn't have a last name.\n\n418\n00:24:51.160 --> 00:24:53.850\nWell, this will always break your code.\n\n419\n00:24:53.850 --> 00:24:58.846\nBut what if you're like, I really\nwanna get the last name if it's there,\n\n420\n00:25:00.390 --> 00:25:05.274\nOr just give me an empty string,\nright, or give me something.\n\n421\n00:25:05.274 --> 00:25:10.200\nUser.get('last_name').\n\n422\n00:25:10.200 --> 00:25:14.345\nIf I do that,\nI can add a second argument or I can say,\n\n423\n00:25:14.345 --> 00:25:17.465\nempty string or some random last name.\n\n424\n00:25:20.540 --> 00:25:24.542\nAnd what that will do is it will say,\nokay, let me find the last name or\n\n425\n00:25:24.542 --> 00:25:26.140\ngive you this back up plan.\n\n426\n00:25:28.100 --> 00:25:35.140\nIf I remove this last name part,\nit gives me the name.\n\n427\n00:25:36.480 --> 00:25:41.770\nIt is equivalent to that if it exists.\n\n428\n00:25:41.770 --> 00:25:46.940\nAs a matter of fact,\nif you know it's there, these\n\n429\n00:25:46.940 --> 00:25:49.730\ntwo things do exactly the same thing.\n\n430\n00:25:49.730 --> 00:25:50.770\nThis exists.\n\n431\n00:25:51.790 --> 00:25:55.430\nThis is what I want and\nthis is your backup plan.\n\n432\n00:25:55.430 --> 00:25:56.810\nWhat if that's not there?\n\n433\n00:25:56.810 --> 00:25:58.410\nGive me the backup plan.\n\n434\n00:25:58.410 --> 00:25:59.830\nAnd that keeps you from getting\n\n435\n00:26:02.050 --> 00:26:05.330\nthat respective key error\nwhich will break things.\n\n436\n00:26:05.330 --> 00:26:07.060\nSo it's just a little bit of planning.\n\n437\n00:26:07.060 --> 00:26:10.920\nSo that one's kind of a,\nyou use it every once in a while.\n\n438\n00:26:10.920 --> 00:26:13.950\nThere's some other things you can do with\ndictionaries, but if you know these key\n\n439\n00:26:13.950 --> 00:26:18.260\nthings and you really internalize these,\nit'll be super handy as we\n\n440\n00:26:18.260 --> 00:26:21.740\ncontinue learning more about Python,\nand well, and programming in general.\n\n441\n00:26:21.740 --> 00:26:25.170\nThese structures,\nthough I talk about Python,\n\n442\n00:26:25.170 --> 00:26:27.300\nyou'll see similar things\nin other languages.\n\n443\n00:26:27.300 --> 00:26:30.340\nYou've heard Vonne go,\nthat's kinda like this other thing I know.\n\n444\n00:26:30.340 --> 00:26:32.100\nIt's kind of like this other thing I know.\n\n445\n00:26:32.100 --> 00:26:34.980\nSo don't get bogged down\nin I only know Python.\n\n446\n00:26:34.980 --> 00:26:39.650\nThese actually apply, maybe different\nnames different terminologies, they apply\n\n447\n00:26:39.650 --> 00:26:43.060\nin so many contexts, so need to know.\n&gt;&gt; Yeah,\n\n448\n00:26:43.060 --> 00:26:45.500\nI was always told if\nyou learn one language,\n\n449\n00:26:45.500 --> 00:26:50.950\nyou know 70% of all the other languages\nbecause these are all similar structures.\n\n450\n00:26:50.950 --> 00:26:55.820\nAnd what everything is based on\nthe fundamentals of a programming\n\n451\n00:26:55.820 --> 00:27:00.190\nlanguage such as Python is going\nto go across all sorts of places.\n\n452\n00:27:00.190 --> 00:27:04.090\nAnd I have to say, I did not think\nI was going to have this much fun\n\n453\n00:27:04.090 --> 00:27:07.350\nin this particular episode or\njust talking about dictionaries.\n\n454\n00:27:07.350 --> 00:27:12.137\nI have to say, I actually understood\nalmost every single thing you said.\n\n455\n00:27:12.137 --> 00:27:15.009\nAnd you were throwing in tuples,\nand lists and this.\n\n456\n00:27:15.009 --> 00:27:16.250\nAnd I'm looking at it,\nI know what that is.\n\n457\n00:27:16.250 --> 00:27:18.260\nAnd so that is a testament to you.\n\n458\n00:27:18.260 --> 00:27:20.245\nSo thank you so much for that.\n\n459\n00:27:20.245 --> 00:27:25.035\nI'm feeling really smart out here so\nI hope you are feeling smart out there.\n\n460\n00:27:25.035 --> 00:27:28.415\nWe're gonna go ahead and wrap this\nepisode up and come on back for more.\n\n461\n00:27:28.415 --> 00:27:31.025\nSigning off for DevProTV,\nI've been your host, Vonne Smith.\n\n462\n00:27:31.025 --> 00:27:31.795\n&gt;&gt; And I'm Justin Dennison.\n\n463\n00:27:31.795 --> 00:27:32.546\n&gt;&gt; And we'll see you soon.\n\n464\n00:27:32.546 --> 00:27:36.270\n[SOUND]\n\n",
          "vimeoId": "268421779"
        },
        {
          "description": "In this episode, Justin and Vonne take a look at sets in the Python programming language. Justin discusses the uses of sets as well as explores operations that can be used with sets.",
          "length": "1879",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-4-1-sets-050718-PGM.00_31_09_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-4-1-sets-050718-PGM.00_31_09_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-4-4-1-sets-050718-PGM.00_31_09_13.Still001-sm.jpg",
          "title": "Sets",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.314\n[SOUND]\n\n2\n00:00:01.314 --> 00:00:11.314\n[MUSIC]\n\n3\n00:00:13.199 --> 00:00:17.294\nHello, everyone and welcome back to\nanother exciting edition of DevProTV.\n\n4\n00:00:17.294 --> 00:00:20.695\nI'm your host Vonne Smith, and\nwe are continuing through our programming\n\n5\n00:00:20.695 --> 00:00:24.590\nfundamental series, and in this episode\nwe're gonna be talking about sets.\n\n6\n00:00:24.590 --> 00:00:27.260\nAnd ready, set, go, here to help is is Mr.\nJustin Dennison.\n\n7\n00:00:27.260 --> 00:00:28.910\nHow are you?\n&gt;&gt; I'm doing fantastic, Vonne.\n\n8\n00:00:28.910 --> 00:00:30.660\nHow are you?\n&gt;&gt; I'm pretty good.\n\n9\n00:00:30.660 --> 00:00:34.427\nSets, have we even talked about this?\n&gt;&gt; No, we haven't.\n\n10\n00:00:34.427 --> 00:00:38.159\nI actually intentionally left these out,\nbut it is a collection type, and\n\n11\n00:00:38.159 --> 00:00:39.830\nthey have very particular uses.\n\n12\n00:00:39.830 --> 00:00:45.551\nNow sadly, this is one of those words\nwhere people use the word set like this.\n\n13\n00:00:45.551 --> 00:00:50.640\nThis is a set of cups, this is a set\nsilverware, this is a set of plates and\n\n14\n00:00:50.640 --> 00:00:54.470\nit doesn't necessarily mean the same\nthing that does in computers and maths.\n\n15\n00:00:54.470 --> 00:00:59.720\nSet have very particular properties\nthat allow them to be utilized for\n\n16\n00:00:59.720 --> 00:01:01.490\nwell, particular uses.\n\n17\n00:01:01.490 --> 00:01:06.480\nUtilized for uses, but it means\nsomething very specific and they have\n\n18\n00:01:06.480 --> 00:01:08.825\nthese very specific set of properties.\n&gt;&gt; Okay,\n\n19\n00:01:08.825 --> 00:01:13.900\ncuz we've talked about our lists as\na collection of items, and I don't know,\n\n20\n00:01:13.900 --> 00:01:17.480\nto me, a collection, a set of information,\na collection of information.\n\n21\n00:01:17.480 --> 00:01:23.320\nIt kind of all sounds the same, but,\nas I've learned from you, everything\n\n22\n00:01:23.320 --> 00:01:27.390\nhas it's place, everything has a reason of\nwhy we have these different data types.\n\n23\n00:01:27.390 --> 00:01:31.400\nSo, I'm assuming this is the same thing,\nthis is a data type, correct?\n\n24\n00:01:31.400 --> 00:01:32.410\n&gt;&gt; This is a data type,\n\n25\n00:01:32.410 --> 00:01:36.320\nthis is one of those collection\ntypes as I call them, or\n\n26\n00:01:36.320 --> 00:01:38.450\ncontainer types as some\npeople will call them.\n\n27\n00:01:38.450 --> 00:01:41.050\nLet me set the scene of why you\nwould ever want to use a set,\n\n28\n00:01:41.050 --> 00:01:43.890\nand then we'll look at particular things.\n\n29\n00:01:43.890 --> 00:01:48.480\nThey're not super complicated,\nbut there are a few things.\n\n30\n00:01:48.480 --> 00:01:51.190\nA set can not have duplicates.\n\n31\n00:01:51.190 --> 00:01:55.860\nSo, if I have one one one, and\nI make it a set, guess what?\n\n32\n00:01:55.860 --> 00:01:58.380\nThe number one only appears one time.\n\n33\n00:01:58.380 --> 00:02:00.250\nSets are not ordered.\n\n34\n00:02:00.250 --> 00:02:03.290\nThere's no intrinsic order,\nthey may reorder at any time.\n\n35\n00:02:03.290 --> 00:02:05.060\nThere's no guarantee about order.\n\n36\n00:02:05.060 --> 00:02:07.510\nAnd then, number three, sets are really,\n\n37\n00:02:07.510 --> 00:02:10.870\nreally good at determining\nwhat's called membership.\n\n38\n00:02:10.870 --> 00:02:14.040\nIf I wanna know if something is in a set,\n\n39\n00:02:14.040 --> 00:02:17.770\nthen that's essentially\nwhat they're made for.\n\n40\n00:02:17.770 --> 00:02:21.380\nSo those are the three properties\nthat really set them apart.\n\n41\n00:02:21.380 --> 00:02:25.420\nNow, what's interesting is, if I have two\nsets and I have operations that allow\n\n42\n00:02:25.420 --> 00:02:28.450\nme to quickly determine,\nhey what are both in these sets?\n\n43\n00:02:28.450 --> 00:02:30.020\nWhat are outside of both of these sets?\n\n44\n00:02:30.020 --> 00:02:33.430\nWhat if I take the togetherness\nof these sets, and\n\n45\n00:02:33.430 --> 00:02:38.780\nif you have in SQL programming these\nare kind of like our join operations.\n\n46\n00:02:38.780 --> 00:02:40.650\nAnd if you don't have that\nexperience that's all right,\n\n47\n00:02:40.650 --> 00:02:44.280\ncuz we're gonna take a look\nat how sets allow us\n\n48\n00:02:44.280 --> 00:02:46.778\nto see data in a different way.\n&gt;&gt; Okay,\n\n49\n00:02:46.778 --> 00:02:48.950\nstill not seeing\nthe clarification just yet.\n\n50\n00:02:48.950 --> 00:02:53.660\nI know we'll get there, but when you said\ndoes not allow duplicates, I feel like you\n\n51\n00:02:53.660 --> 00:02:58.750\ndidn't specifically say that\nin our other data type,\n\n52\n00:02:58.750 --> 00:03:03.670\nso you can have duplicates and lists and\ntuples and all those things, and\n\n53\n00:03:03.670 --> 00:03:05.750\nthis one you specifically cannot.\n&gt;&gt; So\n\n54\n00:03:05.750 --> 00:03:09.662\nlists and tuples, you can have duplicates,\nyou can have the number one 10,000 times.\n\n55\n00:03:09.662 --> 00:03:13.400\nWith dictionaries you cannot\nhave duplicate keys, so-\n\n56\n00:03:13.400 --> 00:03:14.680\n&gt;&gt; That was right, the unique key,\n\n57\n00:03:14.680 --> 00:03:17.350\nthe primary key, okay,\nthat's coming back to me, that one.\n\n58\n00:03:17.350 --> 00:03:18.620\n&gt;&gt; Yeah, and then in sets,\n\n59\n00:03:18.620 --> 00:03:20.450\nyou cannot have duplicates of anything.\n\n60\n00:03:20.450 --> 00:03:25.530\nThere's no key values, it's just, these\nare the things within this data type.\n\n61\n00:03:25.530 --> 00:03:28.680\nAnd if I try to repeat, then it goes,\nnope, it's already in here, so\n\n62\n00:03:28.680 --> 00:03:30.220\nI'm gonna just filter it out.\n\n63\n00:03:30.220 --> 00:03:33.150\nNow, what you can use this for,\na very common use case,\n\n64\n00:03:33.150 --> 00:03:36.240\nis let's say you have a collection\nof a bunch of stuff, like words.\n\n65\n00:03:36.240 --> 00:03:39.370\nBut I want to know how\nmany unique words I have.\n\n66\n00:03:39.370 --> 00:03:43.170\nLet's say you have a scan in of\na newspaper and you've written all that\n\n67\n00:03:43.170 --> 00:03:46.630\ninto a list, and you're like, I really\njust want to know how many unique words.\n\n68\n00:03:46.630 --> 00:03:51.020\nBut you know a, an and\nthe are probably in there a great deal.\n\n69\n00:03:51.020 --> 00:03:54.820\nWell, if you make it a set,\nthen guess what?\n\n70\n00:03:54.820 --> 00:03:59.397\nA, an, and the, will only be counted\none time, so you'll only have a,\n\n71\n00:03:59.397 --> 00:04:03.973\nan, and the, once in that set,\nwhereas a list of those words may have a,\n\n72\n00:04:03.973 --> 00:04:06.540\nan, and the, whole bunch of times.\n\n73\n00:04:06.540 --> 00:04:11.210\nSo, it will remove duplicates, which is\ngreat if you wanna determine uniqueness,\n\n74\n00:04:11.210 --> 00:04:14.120\nor what is also known as\nthe intersection between two sets,\n\n75\n00:04:14.120 --> 00:04:15.900\nwhat is in this one and in this one?\n\n76\n00:04:15.900 --> 00:04:18.710\nOr what is the union of two sets,\nI take this set and this set and\n\n77\n00:04:18.710 --> 00:04:20.280\nI put them together, what do I get?\n\n78\n00:04:20.280 --> 00:04:23.720\nSo, there are some of these set\noperations that are kinda niche,\n\n79\n00:04:23.720 --> 00:04:26.660\nbut they're very helpful\nif you want uniqueness or\n\n80\n00:04:26.660 --> 00:04:31.060\noverlap, or also intersection, or\nyou want to combine two things.\n\n81\n00:04:31.060 --> 00:04:33.270\nAnd still not have duplicates.\n\n82\n00:04:33.270 --> 00:04:37.990\nSo we've seen, with list I can combine\ntwo lists, but if I have a one and one,\n\n83\n00:04:37.990 --> 00:04:40.790\nthen I'll have one twice, but\nI don't wanna count it twice.\n\n84\n00:04:40.790 --> 00:04:42.580\nSo then that's when you would use a set.\n\n85\n00:04:43.600 --> 00:04:49.235\nNow, with that said, there's not\na huge amount of things you can do,\n\n86\n00:04:49.235 --> 00:04:51.495\nas again, it's a niche case.\n\n87\n00:04:51.495 --> 00:04:54.745\nBut I say we go ahead and see, how do I\nmake a set, how do I manipulate a set,\n\n88\n00:04:54.745 --> 00:04:55.945\nwhat are some common operations?\n\n89\n00:04:55.945 --> 00:04:57.635\nSo let's go ahead and\ntake a look at the screen here.\n\n90\n00:04:57.635 --> 00:05:02.065\nAnd just have my editor open.\n\n91\n00:05:02.065 --> 00:05:07.075\nAnd right now,\nI'm in that same programming fundamentals\n\n92\n00:05:07.075 --> 00:05:11.010\nfolder that I've been in all these\nother episodes once we get set up here.\n\n93\n00:05:11.010 --> 00:05:16.350\nAnd just remember, you're gonna click that\nfolder, hit open and we're good to go.\n\n94\n00:05:16.350 --> 00:05:20.430\nAlso, I am in a terminal session, right?\n\n95\n00:05:20.430 --> 00:05:25.950\nOr bash session, and I'm inside that\nsame programming fundamentals and\n\n96\n00:05:25.950 --> 00:05:27.530\nwe're good to go, all right.\n\n97\n00:05:27.530 --> 00:05:30.970\nJust want to make sure everybody is on\nthe same page, I haven't changed anything.\n\n98\n00:05:30.970 --> 00:05:37.260\nBut, let's go ahead and\ntouch sets, not certs, sets.py.\n\n99\n00:05:37.260 --> 00:05:39.790\nSo let's open up sets, okay?\n\n100\n00:05:39.790 --> 00:05:41.520\nAnd get rid of that.\n\n101\n00:05:41.520 --> 00:05:43.700\nAnd I'm gonna hide this off the side.\n\n102\n00:05:43.700 --> 00:05:45.100\nI've left that open a couple of times.\n\n103\n00:05:45.100 --> 00:05:46.740\nLet's hide it out of the way.\n\n104\n00:05:46.740 --> 00:05:49.750\nLet's look at numbers, all right?\n\n105\n00:05:49.750 --> 00:05:51.620\nIf I want create set and\n\n106\n00:05:51.620 --> 00:05:55.360\nhuge something that's really confusing\nwhen you first interact with sets.\n\n107\n00:05:57.108 --> 00:05:58.530\nCurly braces, wait a minute,\n\n108\n00:05:58.530 --> 00:06:03.480\nthis looks a little like a dictionary,\nexcept there's no key.\n\n109\n00:06:03.480 --> 00:06:05.540\nIt looks like a list, but\n\n110\n00:06:05.540 --> 00:06:08.920\nyou replace the square brackets\nwith curly braces, all right?\n\n111\n00:06:08.920 --> 00:06:10.320\nWhat about letters?\n\n112\n00:06:11.800 --> 00:06:14.900\nWell, I can have a, b, c.\n\n113\n00:06:16.240 --> 00:06:21.210\nNow if I really, let's say I have that\nlist of words and it came in as a list but\n\n114\n00:06:21.210 --> 00:06:22.600\nI wanted to make it a set.\n\n115\n00:06:24.030 --> 00:06:27.440\nThere's a few other things, or\nthere's one other way I can create a set.\n\n116\n00:06:27.440 --> 00:06:32.470\nAnd that's calling set,\nthe actual function, parentheses, and\n\n117\n00:06:32.470 --> 00:06:36.640\nthen you have to give it a list,\na tuple, and you should be good.\n\n118\n00:06:36.640 --> 00:06:38.680\nAnd if I'm not mistaken,\nyou can give it a dictionary, but\n\n119\n00:06:38.680 --> 00:06:41.520\nsometimes that gets a little iffy\nbecause you lose information.\n\n120\n00:06:41.520 --> 00:06:49.510\nSo let's say,\nthe cheese is good, all right?\n\n121\n00:06:49.510 --> 00:06:52.974\nSo those are our three sets,\nthat's how we make sets.\n\n122\n00:06:52.974 --> 00:06:58.373\nSo let's go ahead and print those out,\nnumbers, and we're gonna explore a little\n\n123\n00:06:58.373 --> 00:07:03.820\nbit with these, just to reinforce some\nof these intrinsic behaviors of sets.\n\n124\n00:07:03.820 --> 00:07:06.530\nSo if we come here,\nI have all those printed out.\n\n125\n00:07:06.530 --> 00:07:09.230\nClear this out, and sets.\n\n126\n00:07:09.230 --> 00:07:09.960\nThere we go.\n\n127\n00:07:09.960 --> 00:07:14.040\n1, 2, 3, c, a b.\n\n128\n00:07:14.040 --> 00:07:15.740\nNotice that's not how I wrote them.\n\n129\n00:07:16.900 --> 00:07:18.910\nOrder is not guaranteed.\n\n130\n00:07:18.910 --> 00:07:23.830\nIt is ordered based on what is best for\nthe set behind the scenes.\n\n131\n00:07:23.830 --> 00:07:28.670\nAnd then the, is, good, cheese,\nwell that's not how I wrote that, either,\n\n132\n00:07:28.670 --> 00:07:30.130\nbut this is still a set.\n\n133\n00:07:30.130 --> 00:07:31.090\nThese are all sets.\n\n134\n00:07:31.090 --> 00:07:33.240\nOrder is not guaranteed, but\n\n135\n00:07:33.240 --> 00:07:36.690\nyou just have curly braces.\n&gt;&gt; So that was completely random.\n\n136\n00:07:36.690 --> 00:07:41.962\nI mean, if we printed this again, or ran\nit again, would you get a different order?\n\n137\n00:07:41.962 --> 00:07:46.280\nHow is it determining what?\n&gt;&gt; So ordering is not random.\n\n138\n00:07:46.280 --> 00:07:48.162\nThis is something,\nI don't want to get to deep in this.\n\n139\n00:07:48.162 --> 00:07:54.785\nBut the way sets determine how\nthese things go, is by hashing.\n\n140\n00:07:54.785 --> 00:07:59.727\nNotice that 1, 2, and\n3 there's staying fairly consistent, but\n\n141\n00:07:59.727 --> 00:08:04.190\nthe letters c, a, b, b, a, c,\nc, b, a, a, c, b Why is it?\n\n142\n00:08:04.190 --> 00:08:06.031\nBecause order is not guaranteed.\n\n143\n00:08:06.031 --> 00:08:10.530\nIt depends on, they create a hash, and\nthey're just kinda hanging out in a potty.\n\n144\n00:08:10.530 --> 00:08:14.300\nYou can think of a set as\nlike your pocket, all right.\n\n145\n00:08:14.300 --> 00:08:17.770\nBut your pocket does not allow duplicates.\n\n146\n00:08:17.770 --> 00:08:21.370\nSo if I reach into my pocket and\npull out a random coin, right,\n\n147\n00:08:21.370 --> 00:08:25.910\nas I pull coins out, maybe I have\na quarter, a nickel and a dime, okay.\n\n148\n00:08:25.910 --> 00:08:29.252\nIf I put all three of those coins back in\nmy pocket, and I pull those out again,\n\n149\n00:08:29.252 --> 00:08:31.270\nthen I might get a dime,\na nickel, a quarter.\n\n150\n00:08:32.580 --> 00:08:37.730\nIf I continue to do that, then I will\nget kind of these random permutations.\n\n151\n00:08:37.730 --> 00:08:42.870\nIt just so happens that numbers are one,\ntwo, three and that has to with, like\n\n152\n00:08:42.870 --> 00:08:48.730\nI said, there's something called hashing\nthat determines what's already in the set.\n\n153\n00:08:48.730 --> 00:08:52.740\nThink of it as a function that kind of\ncrushes this down to a different set of\n\n154\n00:08:52.740 --> 00:08:55.330\ninformation that allows\nPython to quickly go,\n\n155\n00:08:55.330 --> 00:08:57.743\n[SOUND] the number one's\nalready in the set.\n\n156\n00:08:57.743 --> 00:08:59.610\nIt's hidden away from you.\n\n157\n00:08:59.610 --> 00:09:02.920\nWith strings,\nit gets a little more iffy, and\n\n158\n00:09:02.920 --> 00:09:05.710\nyou maybe get kind of this old swaparoo.\n&gt;&gt; Okay, so\n\n159\n00:09:05.710 --> 00:09:09.480\nyou said it is doing something\nin the background but for\n\n160\n00:09:09.480 --> 00:09:14.030\nme and for what we see, like you said,\nit's just kind of like, see what we got.\n\n161\n00:09:14.030 --> 00:09:15.830\nOkay, let's do what we got.\n\n162\n00:09:15.830 --> 00:09:17.680\nIt's kind of like a lottery.\n\n163\n00:09:17.680 --> 00:09:20.140\nBut only if the lottery knows\nhow it's gonna pick the number.\n\n164\n00:09:20.140 --> 00:09:23.129\nSo it's just kind of, I guess I should\njust accept it and move on, right?\n\n165\n00:09:23.129 --> 00:09:24.394\n[LAUGH]\n&gt;&gt; Yes,\n\n166\n00:09:24.394 --> 00:09:26.336\nto some extent you need to be aware of it.\n\n167\n00:09:26.336 --> 00:09:28.820\nYou have to accept it because\nthat's just the way it is.\n\n168\n00:09:28.820 --> 00:09:31.610\nMainly because since\norder's not guaranteed,\n\n169\n00:09:31.610 --> 00:09:35.800\nyou cannot say I want this one,\nthen this one, then this one, and\n\n170\n00:09:35.800 --> 00:09:38.980\nexpect to get the same thing out,\nall right?\n\n171\n00:09:38.980 --> 00:09:41.960\nNow, that's how you create a set.\n\n172\n00:09:41.960 --> 00:09:43.750\nWell, with all of our explorations,\n\n173\n00:09:43.750 --> 00:09:48.030\nlet's see how some of these\nthings can kinda be put together.\n\n174\n00:09:48.030 --> 00:09:51.180\nBut one quick thing before we do that,\nall right?\n\n175\n00:09:51.180 --> 00:09:56.055\nSo let's say we do this, a, a, a,\n\n176\n00:09:56.055 --> 00:10:00.064\na, and the cheese is good,\n\n177\n00:10:00.064 --> 00:10:05.140\ngood, uh-oh, easy there, Justin, good.\n\n178\n00:10:05.140 --> 00:10:08.350\nNotice these now have duplicates, right.\n\n179\n00:10:08.350 --> 00:10:10.010\nIf I come back and I rerun these.\n\n180\n00:10:12.230 --> 00:10:13.910\nThe duplicates are removed.\n\n181\n00:10:13.910 --> 00:10:17.150\nOnce something is in the set I\nwill not get a repeated value.\n\n182\n00:10:18.200 --> 00:10:25.690\nThat does not mean that,\nlike here if I spelled this gud, just so\n\n183\n00:10:25.690 --> 00:10:29.940\nwe're clear it's doing anything crazy\nlike that, like, it's the same sound.\n\n184\n00:10:29.940 --> 00:10:32.780\nNo, it's looking is it G-O-O-D?\n\n185\n00:10:32.780 --> 00:10:37.350\nNo, its G-U-D, so\nthat's still included within the set.\n\n186\n00:10:37.350 --> 00:10:42.930\nQuickly remove duplicates if you have\nkind of this set construction like this.\n\n187\n00:10:42.930 --> 00:10:45.500\nSo list to a set,\nall your duplicates are removed and\n\n188\n00:10:45.500 --> 00:10:48.900\nyou guarantee a set of unique values.\n\n189\n00:10:48.900 --> 00:10:50.660\nNotice how I use the word, set.\n\n190\n00:10:50.660 --> 00:10:54.601\nUnfortunately, we use the word set,\nin a more general term like,\n\n191\n00:10:54.601 --> 00:10:58.480\nthis is a set of things\nas we've talked about.\n\n192\n00:10:58.480 --> 00:11:02.890\nAnd gotta be careful because a set\nhas a particular set of properties.\n\n193\n00:11:03.960 --> 00:11:07.620\nA set has a set of properties,\nit's kind of a recursive thing right.\n\n194\n00:11:07.620 --> 00:11:10.520\nSo, let's keep those\nkind of pointed out and\n\n195\n00:11:10.520 --> 00:11:14.845\nlet's look at some of these operations\nthat other things have had, right?\n\n196\n00:11:14.845 --> 00:11:22.402\nNow let's see, result =, I don't know,\n\n197\n00:11:22.402 --> 00:11:27.320\nletters + numbers, okay?\n\n198\n00:11:27.320 --> 00:11:29.360\nAnd then we're gonna print the result.\n\n199\n00:11:30.470 --> 00:11:32.190\nSo we're just using the plus operation,\n\n200\n00:11:32.190 --> 00:11:35.000\nthese are some of these\noperators that we can have.\n\n201\n00:11:35.000 --> 00:11:36.230\nLet's see what happens.\n\n202\n00:11:37.350 --> 00:11:42.350\nAn unsupported operands plus set for\nset, can't add two sets.\n\n203\n00:11:44.040 --> 00:11:46.540\nOkay, what about minus?\n\n204\n00:11:46.540 --> 00:11:47.160\nWe can't plus.\n\n205\n00:11:47.160 --> 00:11:48.840\nIt's very unlikely we're gonna get minus.\n\n206\n00:11:53.120 --> 00:11:55.580\nThat is a little bit surprising, right?\n\n207\n00:11:55.580 --> 00:11:57.400\nSo you always test things.\n\n208\n00:11:57.400 --> 00:12:00.390\nAnd I see Vonne going, hold on Justin,\nwait a minute, what are you doing?\n\n209\n00:12:00.390 --> 00:12:02.754\nYou're making stuff up.\n&gt;&gt; That one got me,\n\n210\n00:12:02.754 --> 00:12:06.000\nbecause I'm over here going,\nno that's not gonna work.\n\n211\n00:12:06.000 --> 00:12:09.640\nFor everything else,\nas soon as you did the plus.\n\n212\n00:12:09.640 --> 00:12:12.352\nAnd if the plus didn't work,\nthen the multiply wouldn't work,\n\n213\n00:12:12.352 --> 00:12:14.883\nany of it wouldn't work, so\nI just gonna [SOUND] so you got me.\n\n214\n00:12:14.883 --> 00:12:16.661\nYou got me there.\n\n215\n00:12:16.661 --> 00:12:19.750\nI have no idea what you just did [LAUGH].\n\n216\n00:12:19.750 --> 00:12:20.599\nI don't understand.\n\n217\n00:12:20.599 --> 00:12:21.500\n[LAUGH]\n&gt;&gt; And\n\n218\n00:12:21.500 --> 00:12:24.537\nright now based on the sets that\nwe have that we are subtracting,\n\n219\n00:12:24.537 --> 00:12:27.336\nwe can't really see any patterns, can we?\n\n220\n00:12:27.336 --> 00:12:32.100\nRight, you're like it gives me cab\nwhich is just letters minus number,\n\n221\n00:12:32.100 --> 00:12:34.450\nthat doesn't make any sense.\n\n222\n00:12:34.450 --> 00:12:37.390\nWhat if I instead change this\nto letters minus letters.\n\n223\n00:12:37.390 --> 00:12:40.140\nLet's see what happens.\n\n224\n00:12:40.140 --> 00:12:43.650\nClear python, three sets.\n\n225\n00:12:43.650 --> 00:12:44.672\nSee how this says set?\n\n226\n00:12:44.672 --> 00:12:49.921\n[SOUND] The reason it shows you this\nis empty curly braces is a dictionary,\n\n227\n00:12:49.921 --> 00:12:53.031\nonly if there's things in it, is it a set.\n\n228\n00:12:53.031 --> 00:12:55.500\nSo we will show you a set\nwith empty parentheses.\n\n229\n00:12:55.500 --> 00:12:56.790\nThat means the set is empty.\n\n230\n00:12:58.542 --> 00:13:02.250\nRemember how sets are really\ngood at determining membership.\n\n231\n00:13:02.250 --> 00:13:04.740\nBecause they are really good\ndetermining membership,\n\n232\n00:13:04.740 --> 00:13:09.835\nI can say I have this set of stuff and\nI wanna remove this other subset of stuff.\n\n233\n00:13:09.835 --> 00:13:17.010\nSo further clarify,\nit's the set with the letter a in it.\n\n234\n00:13:17.010 --> 00:13:22.090\nSo I have a bunch of letters and\nI have a set with just the letter a in it.\n\n235\n00:13:22.090 --> 00:13:24.320\nWhat is the result if\nI do letters minus a?\n\n236\n00:13:24.320 --> 00:13:29.000\nWell, let's make sure our understanding\nhas appropriately developed.\n\n237\n00:13:29.000 --> 00:13:32.740\nAnd it is, it said, when that first set,\nthe letter a was there, so\n\n238\n00:13:32.740 --> 00:13:33.730\nI'm gonna go ahead, and remove that.\n\n239\n00:13:34.920 --> 00:13:36.610\nSo this is the first time,\nout of the numbers,\n\n240\n00:13:36.610 --> 00:13:39.120\nthat we've seen subtract\nactually make sense.\n\n241\n00:13:39.120 --> 00:13:44.291\nI have a set, and I wanna remove a subset,\nwhich could be the entire set itself.\n\n242\n00:13:44.291 --> 00:13:47.712\nSo [SOUND] take things\naway from the first set.\n\n243\n00:13:47.712 --> 00:13:49.181\n&gt;&gt; Okay, that was pretty slick.\n\n244\n00:13:49.181 --> 00:13:54.185\nAnd especially since you said about\nremoving duplicates and the membership,\n\n245\n00:13:54.185 --> 00:13:59.408\nit all, I'm over here going okay but\nthen I'm like, don't say it out loud,\n\n246\n00:13:59.408 --> 00:14:03.535\nbecause I'm like, yeah, so\nI'm just nodding like I get it.\n\n247\n00:14:03.535 --> 00:14:08.190\nI can see the potential.\n&gt;&gt; For instance, let's say\n\n248\n00:14:08.190 --> 00:14:11.590\nyou had a bunch of letters and you\nwanted to remove all the vowels, right?\n\n249\n00:14:11.590 --> 00:14:13.590\nThen you would have a set\nwith only vowels in it, and\n\n250\n00:14:13.590 --> 00:14:17.760\nyou would remove vowels from\nthe previous letters, right?\n\n251\n00:14:18.980 --> 00:14:24.340\nLikewise you could remove maybe\ncurse words from a set of words and\n\n252\n00:14:24.340 --> 00:14:26.570\nthen you wanna look at\nthe non-curse words.\n\n253\n00:14:26.570 --> 00:14:31.350\nNow, as a math person,\nthis makes a whole lot of sense to me.\n\n254\n00:14:31.350 --> 00:14:35.830\nI'm like I need to determine\nmembership and when to remove things.\n\n255\n00:14:35.830 --> 00:14:38.780\nDon't beat yourself up if you're like,\nyeah,\n\n256\n00:14:38.780 --> 00:14:40.769\nI can do that with sets and\nit just makes things easier.\n\n257\n00:14:41.920 --> 00:14:44.920\nThey work very well,\nwhen I need to remove something.\n\n258\n00:14:44.920 --> 00:14:46.700\nAnd you’ll see a couple\nother things later.\n\n259\n00:14:46.700 --> 00:14:50.650\nBut if you kinda go toward lists and\ndictionaries, that’s perfectly okay.\n\n260\n00:14:50.650 --> 00:14:52.820\nThat’s where most people start.\n\n261\n00:14:52.820 --> 00:14:55.570\nNow that minus sign,\nthat was a tricky one.\n\n262\n00:14:55.570 --> 00:14:56.540\nThat was a tricky one.\n\n263\n00:14:56.540 --> 00:15:00.510\nBut let’s see multiply.\n\n264\n00:15:00.510 --> 00:15:04.870\nI suspect that multiply is gonna,\nprobably gonna break, right?\n\n265\n00:15:04.870 --> 00:15:08.110\nSo sets and yeah, it's broke.\n\n266\n00:15:08.110 --> 00:15:11.900\nLet's try, well, it might be broke\ncuz I have a random c there.\n\n267\n00:15:11.900 --> 00:15:16.820\nLet's make sure that we don't,\nI don't think it actually saved,\n\n268\n00:15:16.820 --> 00:15:18.440\nbut I was just making sure.\n\n269\n00:15:18.440 --> 00:15:21.011\nAnd then what about divide?\n\n270\n00:15:21.011 --> 00:15:22.443\n[SOUND] Divide.\n\n271\n00:15:22.443 --> 00:15:27.427\nSo sets and no, divide doesn't work,\nbut we only tried set and\n\n272\n00:15:27.427 --> 00:15:32.710\nset, so subtraction between two sets,\nokay, that makes sense.\n\n273\n00:15:33.970 --> 00:15:36.340\nBut what if we now take letters.\n\n274\n00:15:36.340 --> 00:15:39.590\nAnd we know that multiply usually\nworks with the other collection types\n\n275\n00:15:39.590 --> 00:15:44.100\nwith a number, right, letters times three.\n\n276\n00:15:44.100 --> 00:15:45.423\n[SOUND] I wonder.\n\n277\n00:15:45.423 --> 00:15:46.370\nLet's see here.\n\n278\n00:15:48.770 --> 00:15:52.130\nSets, and no, it's not.\n\n279\n00:15:52.130 --> 00:15:54.700\nAnd if you think about it,\nthis makes sense.\n\n280\n00:15:54.700 --> 00:15:56.370\nSets do not have duplicates.\n\n281\n00:15:56.370 --> 00:15:58.520\nWhat did multiplying by\na number in the other ones do?\n\n282\n00:15:58.520 --> 00:16:00.342\nIt duplicated those values.\n\n283\n00:16:00.342 --> 00:16:04.398\nSo if I had a list of one, two,\nthree, I would get three sets,\n\n284\n00:16:04.398 --> 00:16:07.682\nthree Additional one, two, three's, right?\n\n285\n00:16:07.682 --> 00:16:11.194\nThe sets don't have those, so it's like\nnah, those aren't supported because that\n\n286\n00:16:11.194 --> 00:16:13.460\ndoesn't make sense in\nthe context of the set.\n\n287\n00:16:13.460 --> 00:16:17.590\nSo the only operation that we've\nseen here is the subtraction.\n\n288\n00:16:17.590 --> 00:16:20.810\nNow, for some reason,\nI continue to hit the letter C there.\n\n289\n00:16:20.810 --> 00:16:23.330\nThat's not supposed to be there,\nand is actually not there and\n\n290\n00:16:23.330 --> 00:16:24.480\nnot cause that error.\n\n291\n00:16:24.480 --> 00:16:27.110\nSo, just a quick reminder, all right.\n\n292\n00:16:27.110 --> 00:16:29.250\nSo that's all fine and good.\n\n293\n00:16:30.360 --> 00:16:32.450\nOkay, so we can take the difference.\n\n294\n00:16:32.450 --> 00:16:39.940\nAnd well, you're like, well, what if\nI want the word, the, out of the set?\n\n295\n00:16:41.220 --> 00:16:47.563\nCan I get an element or slice, right?\n\n296\n00:16:47.563 --> 00:16:50.515\nThat would make sense for\nmaybe other collection types.\n\n297\n00:16:50.515 --> 00:16:52.060\nVonne over here is shaking her head.\n\n298\n00:16:52.060 --> 00:16:55.250\nBefore I do anything, I'm kind of\ninterested to see why Vonne thinks\n\n299\n00:16:55.250 --> 00:16:56.660\nthat.\n&gt;&gt; Man.\n\n300\n00:16:56.660 --> 00:16:59.723\n[LAUGH] Probably shouldn't have been so\nboisterous about, uh-uh,\n\n301\n00:16:59.723 --> 00:17:00.760\nis not gonna work.\n\n302\n00:17:00.760 --> 00:17:05.838\nWell, you said it doesn't have, it's\nrandom, the order cannot be determined.\n\n303\n00:17:05.838 --> 00:17:09.410\nIf you can't determine the order,\nthen you can't reference by index number.\n\n304\n00:17:10.410 --> 00:17:14.406\nSo that's where I'm going with right now,\nuntil you prove me wrong.\n\n305\n00:17:14.406 --> 00:17:16.316\n[LAUGH]\n&gt;&gt; I'll tell you what,\n\n306\n00:17:16.316 --> 00:17:20.182\nthat seems like sound reasoning to me,\nlet's see how that works out.\n\n307\n00:17:20.182 --> 00:17:23.200\nSo let's just grab\na random word from Word.\n\n308\n00:17:23.200 --> 00:17:26.903\nSo let's try word, zero, okay?\n\n309\n00:17:26.903 --> 00:17:28.270\nWe're just grabbing the zero one.\n\n310\n00:17:30.600 --> 00:17:32.150\nMaybe, maybe we will.\n\n311\n00:17:32.150 --> 00:17:33.160\nSo let's print that.\n\n312\n00:17:35.210 --> 00:17:38.310\nThat wasn't, that function doesn't exist.\n\n313\n00:17:38.310 --> 00:17:43.950\nSo let's sets and\nset object does not support indexing.\n\n314\n00:17:43.950 --> 00:17:45.844\nGuess why?\nIf it doesn't support indexing,\n\n315\n00:17:45.844 --> 00:17:47.713\nthen you know what else\nit doesn't support?\n\n316\n00:17:49.593 --> 00:17:54.190\nSlicing, because slicing is actually\nkind of like an extension of indexing.\n\n317\n00:17:54.190 --> 00:17:57.600\nJust to prove it to you,\nis not subscriptable.\n\n318\n00:17:58.970 --> 00:17:59.640\nDoesn't really work.\n\n319\n00:17:59.640 --> 00:18:01.280\nSo Vonne was right.\n\n320\n00:18:01.280 --> 00:18:02.430\nBut be very, very careful.\n\n321\n00:18:03.570 --> 00:18:09.200\nJust because we do not have, Indexes,\n\n322\n00:18:09.200 --> 00:18:15.085\nwe do have the ability to look at how\nmany elements we have, all right?\n\n323\n00:18:17.301 --> 00:18:24.160\nI'll say that, and boom, there are four\nelements in the words, all right?\n\n324\n00:18:24.160 --> 00:18:26.621\nSo, the cheese is good,\nthere are four things.\n\n325\n00:18:26.621 --> 00:18:30.812\nSo it's easy to say, there's four\nthings there, what's the first one?\n\n326\n00:18:30.812 --> 00:18:33.442\nI don't know,\ncould be something different every time.\n\n327\n00:18:33.442 --> 00:18:37.360\nIndexing is not supported, but\nwe still do have a length property.\n\n328\n00:18:37.360 --> 00:18:39.136\n&gt;&gt; And it's the length of the,\n\n329\n00:18:39.136 --> 00:18:41.285\nit's really almost like a count.\n\n330\n00:18:41.285 --> 00:18:44.940\nWell I guess, that's what length is,\nbut I was thinking characters.\n\n331\n00:18:44.940 --> 00:18:49.100\nI was immediately kind of going\nto the pure sense of length.\n\n332\n00:18:49.100 --> 00:18:50.630\nI'm like, well,\nhow many characters are in there?\n\n333\n00:18:50.630 --> 00:18:55.740\nNo, that's treated as one entity,\nthat's why we got four and not, however,\n\n334\n00:18:55.740 --> 00:18:58.160\nmany letters that are in there.\n&gt;&gt; Exactly, so\n\n335\n00:18:58.160 --> 00:19:02.840\nwe have these four things\nthat keeps account.\n\n336\n00:19:02.840 --> 00:19:05.490\nAnd you're like, well,\nthis seems very limited.\n\n337\n00:19:05.490 --> 00:19:08.660\nI can't grab particular things.\n\n338\n00:19:08.660 --> 00:19:12.450\nWell, up until this point,\nthis is where a set really shines.\n\n339\n00:19:12.450 --> 00:19:14.900\nThere's a new keyword,\nand I'm gonna introduce.\n\n340\n00:19:14.900 --> 00:19:20.666\nAnd this actually works with dictionaries,\nlists and tuples, okay?\n\n341\n00:19:20.666 --> 00:19:24.853\nBut membership,\n\n342\n00:19:24.853 --> 00:19:29.876\nokay, has the, so,\n\n343\n00:19:29.876 --> 00:19:34.640\nhas the, in words?\n\n344\n00:19:34.640 --> 00:19:37.710\nSo the key word in is saying,\nhey does this collection or\n\n345\n00:19:37.710 --> 00:19:43.210\ncontainer type,\ndoes it have this element in it, okay?\n\n346\n00:19:43.210 --> 00:19:48.348\nSo were gonna print, has the,\nand we're gonna clear this out.\n\n347\n00:19:50.933 --> 00:19:52.750\nAnd it does.\n\n348\n00:19:52.750 --> 00:19:55.760\nNow, the reason we would wanna use\nsets is because it's really fast to\n\n349\n00:19:55.760 --> 00:19:57.170\ndetermine that.\n\n350\n00:19:57.170 --> 00:20:00.955\nIt's very performant and\nits essentially what sets are meant to do,\n\n351\n00:20:00.955 --> 00:20:03.440\nlike determine is that thing there.\n\n352\n00:20:04.598 --> 00:20:09.570\nNow, you're like, wait a minute, you just\nsaid they work with lists and tuples and\n\n353\n00:20:09.570 --> 00:20:11.050\ndictionaries?\n\n354\n00:20:11.050 --> 00:20:15.170\nWell, I'm gonna change this to a list,\nokay, so\n\n355\n00:20:15.170 --> 00:20:18.180\nI'm gonna change the set back to a list.\n\n356\n00:20:18.180 --> 00:20:21.707\nActually, let's do this,\njust so I'm not, so\n\n357\n00:20:21.707 --> 00:20:25.760\nyou don't think I'm pulling\na magic switcheroo here.\n\n358\n00:20:29.609 --> 00:20:32.140\nOkay, and word_list.\n\n359\n00:20:32.140 --> 00:20:35.720\nSo we're gonna come back over here and\nset.\n\n360\n00:20:36.920 --> 00:20:38.630\nSo good, is, cheese, the.\n\n361\n00:20:38.630 --> 00:20:41.440\nThis now had a defined\norder once it's a list.\n\n362\n00:20:41.440 --> 00:20:44.500\nNotice this true still returns, like it's\nstill, the, is still there, all right?\n\n363\n00:20:46.560 --> 00:20:48.300\nBut here's the difference.\n\n364\n00:20:48.300 --> 00:20:51.913\nThe way a set works,\nis it goes, yeah, the.\n\n365\n00:20:51.913 --> 00:20:54.610\nBehind the scenes, it puts it\nthrough some of this machination.\n\n366\n00:20:54.610 --> 00:20:55.640\nIt goes, yeah, that's in here.\n\n367\n00:20:57.350 --> 00:21:01.040\nTo determine membership in a list,\nit goes, is that the?\n\n368\n00:21:01.040 --> 00:21:02.380\nNo, is that the?\n\n369\n00:21:02.380 --> 00:21:03.680\nNo, is that the?\n\n370\n00:21:03.680 --> 00:21:04.870\nNo, is that the?\n\n371\n00:21:04.870 --> 00:21:08.354\nYeah, and then it'll return true or\nfalse based on that.\n\n372\n00:21:08.354 --> 00:21:10.940\nIt's not a big deal with four elements.\n\n373\n00:21:10.940 --> 00:21:13.624\nBut if I have 10 million at once,\n\n374\n00:21:13.624 --> 00:21:18.620\nthen and what if the word, the,\nis actually the 10 millionth element.\n\n375\n00:21:18.620 --> 00:21:19.930\nIt goes, is that one, that one?\n\n376\n00:21:19.930 --> 00:21:21.440\nNope, nope, nope, nope.\n\n377\n00:21:21.440 --> 00:21:25.400\nLists can be really hard to determine\nmembership has they get bigger.\n\n378\n00:21:25.400 --> 00:21:28.480\nThey're small, there's not\na huge difference between those.\n\n379\n00:21:28.480 --> 00:21:30.770\n&gt;&gt; Okay, so it's like a find basically.\n\n380\n00:21:30.770 --> 00:21:37.490\nAnd you said, this is new as from when?\n&gt;&gt; So this is new for us.\n\n381\n00:21:37.490 --> 00:21:40.720\nThis has been in Python for awhile,\nbut I haven't talked about it because\n\n382\n00:21:40.720 --> 00:21:45.175\nin actually makes a lot of sense inside\nof a set because sets are class, or\n\n383\n00:21:45.175 --> 00:21:49.050\nthey have membership kind of properties.\n&gt;&gt; Okay, new,\n\n384\n00:21:49.050 --> 00:21:53.855\ngot it because I didn't know if you say\nthis was a new keyword in Python 3 or\n\n385\n00:21:53.855 --> 00:21:58.060\nlike it just came around in Python 2 or\nsomething to that effect.\n\n386\n00:21:58.060 --> 00:21:59.155\nIt was for me.\n\n387\n00:21:59.155 --> 00:22:02.258\n[LAUGH] And you too.\n&gt;&gt; Yeah,\n\n388\n00:22:02.258 --> 00:22:04.898\ndefinitely make sure it's not necessarily,\n\n389\n00:22:04.898 --> 00:22:09.240\nthis is new in Python particularly,\nthis is new to us, we haven't seen it.\n\n390\n00:22:09.240 --> 00:22:10.770\nIt makes a lot of sense in sets.\n\n391\n00:22:10.770 --> 00:22:13.064\nIt does work for lists,\nit works for tuples.\n\n392\n00:22:13.064 --> 00:22:19.360\nLike if I go back and change this\njust to a tuple, Still there, right?\n\n393\n00:22:19.360 --> 00:22:21.971\nIt does the same thing as a list,\nit goes one, two, three, four, five.\n\n394\n00:22:21.971 --> 00:22:25.722\nAnd then, I'm going to do dict from keys,\n\n395\n00:22:25.722 --> 00:22:31.052\nI think I'll get a dictionary\nwith a bunch of stuff in there.\n\n396\n00:22:31.052 --> 00:22:32.597\nLet's just put a number one in here.\n\n397\n00:22:35.512 --> 00:22:39.481\nAnd has no, I forget what that,\n\n398\n00:22:39.481 --> 00:22:44.038\nthis is when we hop into the REPL, and\n\n399\n00:22:44.038 --> 00:22:50.180\nyou go no underscore, whoops-a-daisy.\n\n400\n00:22:50.180 --> 00:22:51.859\nFromkeys, there we go.\n\n401\n00:22:51.859 --> 00:22:54.777\nAnd now, we clear out of the REPL.\n\n402\n00:22:56.886 --> 00:23:00.580\nThat's control D, and we rerun this.\n\n403\n00:23:00.580 --> 00:23:04.640\nAnd boom,\ndictionary's also have a membership.\n\n404\n00:23:04.640 --> 00:23:06.310\nSo is that key all ready in?\n\n405\n00:23:06.310 --> 00:23:09.330\nIt's looking at the keys though,\nnot the values.\n\n406\n00:23:09.330 --> 00:23:13.070\nSo we have this key value of pairs,\nit's looking at the keys.\n\n407\n00:23:13.070 --> 00:23:17.557\nNow, dictionaries are, it doesn't actually\ngo one, two, three, four, doesn't do that.\n\n408\n00:23:17.557 --> 00:23:19.680\nIt work similarly to a set.\n\n409\n00:23:19.680 --> 00:23:23.776\nThe dictionaries and sets,\nthe in keyword works fairly well with.\n\n410\n00:23:23.776 --> 00:23:30.190\nBut as you get very large list in tuples,\nthose can get a little iffy.\n\n411\n00:23:30.190 --> 00:23:32.809\nFor our intents and purposes,\nit's probably never gonna be an issue,\n\n412\n00:23:32.809 --> 00:23:34.820\njust something to keep in mind.\n\n413\n00:23:34.820 --> 00:23:37.870\nThis in word,\nthis actually reads very well.\n\n414\n00:23:39.020 --> 00:23:41.660\nIs the in word_list?\n\n415\n00:23:41.660 --> 00:23:43.560\nYes or not, that's it.\n\n416\n00:23:44.610 --> 00:23:48.850\nIt's a lot easier than saying hey,\ncan you find this, this is index.\n\n417\n00:23:48.850 --> 00:23:52.946\nThere's a bunch of that,\nI like how readable this is.\n\n418\n00:23:52.946 --> 00:23:56.530\nAs far as sets are concerned though,\nthis is pretty much,\n\n419\n00:23:56.530 --> 00:24:00.479\nas far as these new operations,\nthere are some methods on sets,\n\n420\n00:24:00.479 --> 00:24:04.596\nbut I think it's a little easier\nto play around the REPL with this.\n\n421\n00:24:04.596 --> 00:24:09.005\nSo let's hop over there,\nclear out REPL, and numbers.\n\n422\n00:24:09.005 --> 00:24:14.893\nLet's do a set of two, three, four,\n\n423\n00:24:14.893 --> 00:24:20.046\nand other numbers equals three,\n\n424\n00:24:20.046 --> 00:24:23.921\nfour, and five, okay?\n\n425\n00:24:23.921 --> 00:24:27.549\nNow, I've intentionally picked these,\nbecause there's some overlap and\n\n426\n00:24:27.549 --> 00:24:28.791\nthere's some not there.\n\n427\n00:24:28.791 --> 00:24:32.283\nOne thing that I did forget to\nmention early on in the episode,\n\n428\n00:24:32.283 --> 00:24:34.782\nthis literal syntax with the curly braces.\n\n429\n00:24:34.782 --> 00:24:39.943\nIn Python 2, I only think it's very later\nversions of Python 2 that support this,\n\n430\n00:24:39.943 --> 00:24:42.210\nand I even could be wrong about that.\n\n431\n00:24:42.210 --> 00:24:46.125\nPython 3 supports this, but Python 2,\nif you're on the older versions\n\n432\n00:24:46.125 --> 00:24:49.940\nyou have to work on a Legacy System,\nor something like that.\n\n433\n00:24:49.940 --> 00:24:54.770\nYou will have to create a set by passing,\neither a tuple,\n\n434\n00:24:54.770 --> 00:24:57.902\nor a list to the set function, okay?\n\n435\n00:24:57.902 --> 00:25:02.351\nNow, let's go ahead and do dir numbers.\n\n436\n00:25:02.351 --> 00:25:07.702\nAnd forget about all these\nunderscore things, right?\n\n437\n00:25:07.702 --> 00:25:11.711\nClear copy, but\nnotice we have an add, okay?\n\n438\n00:25:11.711 --> 00:25:14.799\nWe have a discard,\nwe have an intersection.\n\n439\n00:25:14.799 --> 00:25:16.223\nIt's kind of hard, let's see here.\n\n440\n00:25:16.223 --> 00:25:18.771\nLet's try that again.\n\n441\n00:25:18.771 --> 00:25:20.281\nThere we go.\n\n442\n00:25:20.281 --> 00:25:24.946\nWe have a few things, it's superset,\nit's subset, it's disjoint.\n\n443\n00:25:24.946 --> 00:25:26.052\nIntersection update.\n\n444\n00:25:26.052 --> 00:25:27.635\nAnd there's some weird things.\n\n445\n00:25:27.635 --> 00:25:31.311\nThere are a few operations that\nmake a great deal of sense.\n\n446\n00:25:31.311 --> 00:25:33.804\nI want to add to the set.\n\n447\n00:25:33.804 --> 00:25:36.598\nI want to know\nthe difference between sets.\n\n448\n00:25:36.598 --> 00:25:40.490\nI wanna know the intersection of two sets.\n\n449\n00:25:40.490 --> 00:25:44.732\nI want the union, and\nthen, a remove, okay?\n\n450\n00:25:44.732 --> 00:25:48.444\nNow pop is gonna work very similar\nto that pop works in other places.\n\n451\n00:25:48.444 --> 00:25:51.697\nBut, if you're gonna use the set,\nthose are probably the most common\n\n452\n00:25:51.697 --> 00:25:55.083\noperations that make sense,\ngiven the respective set of information.\n\n453\n00:25:55.083 --> 00:25:57.470\nI can't help but use the word set.\n\n454\n00:25:57.470 --> 00:25:59.291\nSo, what are those things?\n\n455\n00:25:59.291 --> 00:26:03.424\nAll right, so let's look at\n\n456\n00:26:03.424 --> 00:26:09.459\nnumbers.difference of other numbers.\n\n457\n00:26:09.459 --> 00:26:16.933\nTwo, hm, well, look at numbers\nminus other numbers, it's two.\n\n458\n00:26:16.933 --> 00:26:21.407\nThis method does the same\nthing as the minus sign.\n\n459\n00:26:21.407 --> 00:26:24.161\nSo, we've actually already seen that.\n\n460\n00:26:24.161 --> 00:26:28.730\nWe've taken number, and we took away\neverything that was in other numbers.\n\n461\n00:26:28.730 --> 00:26:34.451\nSo numbers is two, three, four,\nother numbers is three, four, five.\n\n462\n00:26:34.451 --> 00:26:36.851\nSo those two three four,\nwe'll take three away.\n\n463\n00:26:36.851 --> 00:26:40.440\nSo, get rid of that one,\nfour way, get rid of that one.\n\n464\n00:26:40.440 --> 00:26:45.452\nFive is not in the first one, so it can't\ntake it away, so it's already not there.\n\n465\n00:26:45.452 --> 00:26:49.089\nSo the only thing you have\nleft is the number two.\n\n466\n00:26:49.089 --> 00:26:53.343\nSo if I want the difference between\ntwo sets first, minus the other, and\n\n467\n00:26:53.343 --> 00:26:57.458\nit will take whatever's in the second\nset away from the first set, and\n\n468\n00:26:57.458 --> 00:26:58.739\ngive you the result.\n\n469\n00:27:00.030 --> 00:27:09.143\nDifference, well, what about,\nintersection (other_numbers)?\n\n470\n00:27:09.143 --> 00:27:11.022\nWell, what does that mean?\n\n471\n00:27:11.022 --> 00:27:14.213\nWhat do the two sets share, right?\n\n472\n00:27:14.213 --> 00:27:16.125\nThey are the three and the four, right?\n\n473\n00:27:16.125 --> 00:27:17.474\nThey're in both.\n\n474\n00:27:17.474 --> 00:27:24.102\nWhat about numbers.union(other_numbers)?\n\n475\n00:27:24.102 --> 00:27:26.873\nTake everything in both,\nand put them in a new set.\n\n476\n00:27:26.873 --> 00:27:27.832\nNotice there's no duplicates.\n\n477\n00:27:27.832 --> 00:27:33.381\nI don't get three twice, I don't get four\ntwice, cuz well you just only get one.\n\n478\n00:27:33.381 --> 00:27:38.712\nAnd then, what about numbers,\nyour favorite number is seven, right?\n\n479\n00:27:38.712 --> 00:27:43.190\nSo let's add,\nnow we just added to the set.\n\n480\n00:27:43.190 --> 00:27:47.048\nAnd if we go back up, and\nwe look at the intersection, three,\n\n481\n00:27:47.048 --> 00:27:50.329\nfour, that doesn't make any difference,\nright?\n\n482\n00:27:50.329 --> 00:27:53.786\nBut if we come back up here and\nwe subtract, we now have a seven,\n\n483\n00:27:53.786 --> 00:27:57.002\nbecause the second set doesn't\nhave a seven to take away.\n\n484\n00:27:57.002 --> 00:28:00.652\nSo we can add things.\n\n485\n00:28:00.652 --> 00:28:01.923\nLikewise.\n\n486\n00:28:03.692 --> 00:28:07.340\nIf we have the ability to add,\ncuz membership\n\n487\n00:28:07.340 --> 00:28:12.333\nis easy to determine We can remove\nthings from a set, as well.\n\n488\n00:28:12.333 --> 00:28:15.920\nSo, numbers, and I've removed the two.\n\n489\n00:28:15.920 --> 00:28:20.055\nNotice that numbers is actually changing,\nI'm mutating,\n\n490\n00:28:20.055 --> 00:28:23.944\neven though I said,\nI don't really like mutation,\n\n491\n00:28:23.944 --> 00:28:28.011\nthat's how sets work, kinda like,\nby default in Python.\n\n492\n00:28:28.011 --> 00:28:31.533\nAnd then there was one, other one,\n\n493\n00:28:31.533 --> 00:28:36.585\nwhen you forget,\nif I'm not mistaken, numbers,\n\n494\n00:28:36.585 --> 00:28:41.181\nand wait for it, wait for\nit, intersection.\n\n495\n00:28:41.181 --> 00:28:42.372\nNo, that was actually all of them.\n\n496\n00:28:42.372 --> 00:28:46.631\nNow, there's a few other things,\nright, issubset.\n\n497\n00:28:46.631 --> 00:28:50.444\nSo, here's what we're gonna do.\n\n498\n00:28:50.444 --> 00:28:55.226\nWe're going to clear this out and\nsay, numbers, or\n\n499\n00:28:55.226 --> 00:28:59.031\nhelp(numbers, issubset), it says,\n\n500\n00:28:59.031 --> 00:29:03.394\nreport whether another\nset contains this set.\n\n501\n00:29:05.512 --> 00:29:10.095\nAnytime you see that contains a set,\nif we go back to that help,\n\n502\n00:29:10.095 --> 00:29:13.131\nit doesn't tell you a whole lot, right?\n\n503\n00:29:13.131 --> 00:29:18.672\nSo numbers issubset, and numbers has two,\n\n504\n00:29:18.672 --> 00:29:22.124\nthree, four, and seven.\n\n505\n00:29:22.124 --> 00:29:25.688\nWhat if I go one, two three,\nfour, five, six, seven.\n\n506\n00:29:29.517 --> 00:29:32.511\nTrue, why?\n\n507\n00:29:32.511 --> 00:29:37.350\nOne, two, three, four, five, six,\nseven as a set contains two,\n\n508\n00:29:37.350 --> 00:29:39.613\nthree, four and seven, okay?\n\n509\n00:29:39.613 --> 00:29:42.421\nWell, I removed the two,\nso it's not there.\n\n510\n00:29:42.421 --> 00:29:46.161\nThree, four, and\nseven are inside the second set.\n\n511\n00:29:46.161 --> 00:29:50.742\nIf I instead change this to superset,\nthat means,\n\n512\n00:29:50.742 --> 00:29:56.080\ndoes numbers contain everything\nthat's in the other one.\n\n513\n00:29:56.080 --> 00:29:58.964\nNo, because numbers does\nnot have the number one.\n\n514\n00:29:58.964 --> 00:30:03.288\nSo, you're essentially,\nmanipulating two sets of like,\n\n515\n00:30:03.288 --> 00:30:07.630\nsatchels of marbles or something,\ndoes this contain this?\n\n516\n00:30:07.630 --> 00:30:09.999\nDo I have every color\nhere that I have here?\n\n517\n00:30:09.999 --> 00:30:11.615\nAnd you can kind of mix up your mind.\n\n518\n00:30:11.615 --> 00:30:13.550\nPut them together which is the union.\n\n519\n00:30:13.550 --> 00:30:15.592\nWhat is shared which is the intersection.\n\n520\n00:30:15.592 --> 00:30:20.251\nTake the difference, which is whatever's\nhere take away whatever in this, and\n\n521\n00:30:20.251 --> 00:30:21.973\nthen you have the remainder.\n\n522\n00:30:21.973 --> 00:30:25.310\nSets are really great for\ndetermining, do I have something?\n\n523\n00:30:25.310 --> 00:30:28.934\nAnd do I have a unique something?\n\n524\n00:30:28.934 --> 00:30:32.250\nSo keep those in mind,\nyou may not use them a whole lot, but\n\n525\n00:30:32.250 --> 00:30:36.180\nwhen you do need your neatness or\nto determine if something is there,\n\n526\n00:30:36.180 --> 00:30:39.821\nthey come in very very handy.\n&gt;&gt; Well, just like all of our data sets,\n\n527\n00:30:39.821 --> 00:30:41.921\nthey all have reasons for why they exist.\n\n528\n00:30:41.921 --> 00:30:45.082\nOtherwise, well,\n[LAUGH] they wouldn't exist.\n\n529\n00:30:45.082 --> 00:30:47.156\nBut I can definitely see\nthe potential with this.\n\n530\n00:30:47.156 --> 00:30:51.238\nI think it's all because of the some\nof the other things that I do,\n\n531\n00:30:51.238 --> 00:30:53.702\neither in Excel or any other programs.\n\n532\n00:30:53.702 --> 00:30:56.791\nYet, I get that, cause I do it a lot.\n\n533\n00:30:56.791 --> 00:30:59.439\nI identified with this one pretty well.\n\n534\n00:30:59.439 --> 00:31:02.556\nThank you so much, Fat Justin, and\nthank you guys for joining us, but for\n\n535\n00:31:02.556 --> 00:31:04.532\nnow we're gonna go ahead and\nwrap this one up.\n\n536\n00:31:04.532 --> 00:31:07.213\nSigning off for DevProTV and\nfor your host Vaugn Smith.\n\n537\n00:31:07.213 --> 00:31:07.953\n&gt;&gt; And I'm Justin Nielson.\n\n538\n00:31:07.953 --> 00:31:09.740\n&gt;&gt; We'll see you soon.\n\n",
          "vimeoId": "268614091"
        }
      ],
      "title": "Collection Types"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Vonne explore the concept of iteration and how that is important for programming.",
          "length": "1010",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-1-1-what_is_iteration-051118-PGM.00_16_42_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-1-1-what_is_iteration-051118-PGM.00_16_42_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-1-1-what_is_iteration-051118-PGM.00_16_42_18.Still001-sm.jpg",
          "title": "What is Interation",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.844 --> 00:00:15.920\nHello everyone, and welcome to\nanother excited edition of devproTV.\n\n3\n00:00:15.920 --> 00:00:18.040\nI'm your host Vonne Smith and\n\n4\n00:00:18.040 --> 00:00:21.540\nwe're coming back with more in\nthe programming fundamental series.\n\n5\n00:00:21.540 --> 00:00:23.890\nAnd today, what is iteration?\n\n6\n00:00:23.890 --> 00:00:27.800\nWell luckily, we have somebody here that\ncan answer that question for us, it is Mr.\n\n7\n00:00:27.800 --> 00:00:29.000\nJustin Dennison.\n\n8\n00:00:29.000 --> 00:00:31.660\nHow are you today, sir?\n&gt;&gt; I am doing fantastic,\n\n9\n00:00:31.660 --> 00:00:33.691\nhow are you?\n&gt;&gt; How are you today, sir?\n\n10\n00:00:33.691 --> 00:00:35.040\n[LAUGH]\n&gt;&gt; [LAUGH] I see what you did there,\n\n11\n00:00:35.040 --> 00:00:38.910\nand yeah, we're gonna be answering\nthe question on a very high level of,\n\n12\n00:00:38.910 --> 00:00:39.730\nwhat is iteration?\n\n13\n00:00:39.730 --> 00:00:42.720\nAnd to some extent, why should you care?\n\n14\n00:00:42.720 --> 00:00:44.940\nWhat does it matter?\n\n15\n00:00:44.940 --> 00:00:45.670\nIt doesn't matter.\n\n16\n00:00:45.670 --> 00:00:47.530\nNo one does it because a lot of times,\n\n17\n00:00:47.530 --> 00:00:49.670\nwhen I've explained this to people,\nthey go, why?\n\n18\n00:00:49.670 --> 00:00:53.590\nI mean, that's not how humans' minds work.\n\n19\n00:00:53.590 --> 00:00:57.410\nI argue that it is not how we\nperceive our minds to work, but\n\n20\n00:00:57.410 --> 00:01:00.650\nwe actually do work that way, all right?\n\n21\n00:01:00.650 --> 00:01:04.180\nSo what is iteration, and\nwe'll kind of think about this.\n\n22\n00:01:04.180 --> 00:01:06.040\nWe'll do some drawing and\nthings like that.\n\n23\n00:01:06.040 --> 00:01:09.190\nBut iteration is,\nI'm starting at the beginning.\n\n24\n00:01:09.190 --> 00:01:12.510\nAnd then I'm, one, two, three,\nI'm taking step-by-steps.\n\n25\n00:01:12.510 --> 00:01:17.460\nTo some extent,\nyou walking is an iterative process.\n\n26\n00:01:17.460 --> 00:01:22.170\nEspecially if you walk in\nthis kind of disjointed way,\n\n27\n00:01:22.170 --> 00:01:24.360\nwhere you always put\nthe same foot forward.\n\n28\n00:01:24.360 --> 00:01:28.460\nSo take step, take a step, take a step.\n\n29\n00:01:28.460 --> 00:01:29.720\nSo one, two, three.\n\n30\n00:01:29.720 --> 00:01:31.170\nAnd then when do you walk?\n\n31\n00:01:31.170 --> 00:01:33.490\nWell, I walk until I\nget to where I'm going.\n\n32\n00:01:34.550 --> 00:01:35.570\nWell, yeah.\n\n33\n00:01:35.570 --> 00:01:36.950\nThat is an iterative process.\n\n34\n00:01:36.950 --> 00:01:40.300\nI take a step until I don't\nhave to take steps anymore.\n\n35\n00:01:41.570 --> 00:01:47.710\nOr if you like games, a lot of card games\nhave iterative processes in them, right?\n\n36\n00:01:47.710 --> 00:01:50.300\nSo let's say Vonne and\nI are going to play.\n\n37\n00:01:50.300 --> 00:01:51.855\nI don't know.\nDo you like to play Rummy, Vonne?\n\n38\n00:01:51.855 --> 00:01:52.670\n&gt;&gt; Mm-hm, yeah.\n\n39\n00:01:52.670 --> 00:01:53.470\n&gt;&gt; Yeah, so if Vonne and\n\n40\n00:01:53.470 --> 00:01:54.270\nI were gonna play Rummy.\n\n41\n00:01:54.270 --> 00:01:55.630\nLet's say I'm the dealer.\n\n42\n00:01:55.630 --> 00:01:56.520\nI'm like, one.\n\n43\n00:01:57.550 --> 00:02:00.250\nOne, or maybe we each get seven cards.\n\n44\n00:02:00.250 --> 00:02:02.760\nI got a one, two, three, four, five, six.\n\n45\n00:02:02.760 --> 00:02:06.060\nBut notice how my hand is moving.\n\n46\n00:02:06.060 --> 00:02:09.570\nI'm, more or less, moving back and\nforth between two players.\n\n47\n00:02:09.570 --> 00:02:14.440\nIf there were three of us,\nI would move in a circle, right?\n\n48\n00:02:14.440 --> 00:02:18.870\nOr in a loop, so to speak.\n&gt;&gt; And it isn't just one, two, three four.\n\n49\n00:02:18.870 --> 00:02:21.060\nIt's one, one, one, one.\n\n50\n00:02:21.060 --> 00:02:22.440\nTwo, two, two, two.\n\n51\n00:02:22.440 --> 00:02:24.030\nOr if we have four people it goes\n&gt;&gt; Uh-huh.\n\n52\n00:02:24.030 --> 00:02:24.690\n&gt;&gt; It goes, yeah, four\n\n53\n00:02:24.690 --> 00:02:25.370\npeople.\n&gt;&gt; Yeah.\n\n54\n00:02:25.370 --> 00:02:25.870\n&gt;&gt; Yeah.\n\n55\n00:02:25.870 --> 00:02:26.370\n&gt;&gt; Yeah.\n\n56\n00:02:26.370 --> 00:02:28.360\n&gt;&gt; So your bet is\n\n57\n00:02:28.360 --> 00:02:33.260\nlike one time dealing around\nthe table would be one loop,\n\n58\n00:02:33.260 --> 00:02:36.171\none iteration, one time.\n&gt;&gt; Yep, exactly.\n\n59\n00:02:36.171 --> 00:02:41.150\nNow it's funny because Vonne, I used to\ncount, one one, two two, three three.\n\n60\n00:02:41.150 --> 00:02:44.420\nI found that I miscounted, so\nI just went one two three for\n\n61\n00:02:44.420 --> 00:02:46.840\nfive six and I would just count to 14.\n\n62\n00:02:46.840 --> 00:02:51.430\nBut if it's in a circle, right, it might\nget a little ify if I've got to deal\n\n63\n00:02:51.430 --> 00:02:56.280\nfour people seven cards, I got to count\nto 28 now, but you're exactly right,\n\n64\n00:02:56.280 --> 00:02:58.050\nI'm making one loop around my table.\n\n65\n00:02:58.050 --> 00:02:58.670\nTwo loops.\n\n66\n00:02:58.670 --> 00:03:00.540\nHow many times do I go around the table?\n\n67\n00:03:00.540 --> 00:03:01.870\nI go around seven times.\n\n68\n00:03:03.040 --> 00:03:04.960\nSo our steps are iterative.\n\n69\n00:03:04.960 --> 00:03:11.400\nDealing cards are iterative to some\nextent if you're guessing, right?\n\n70\n00:03:11.400 --> 00:03:16.410\nIf you've guessed anything, whether it be\na game or how much something's gonna cost\n\n71\n00:03:16.410 --> 00:03:19.640\nIf you don't get immediate validation,\nthat enters an iterative process.\n\n72\n00:03:19.640 --> 00:03:20.599\nWas it $5?\n\n73\n00:03:20.599 --> 00:03:22.120\nNo.\nWas it $10?\n\n74\n00:03:22.120 --> 00:03:23.641\nNo.\nWas it $12?\n\n75\n00:03:23.641 --> 00:03:25.162\nNo.\nWas it $15?\n\n76\n00:03:25.162 --> 00:03:27.460\nNo.\nWhen do you stop guessing?\n\n77\n00:03:27.460 --> 00:03:28.900\nWhen one of two things happens.\n\n78\n00:03:29.980 --> 00:03:34.760\nYou find out through\nthe other person telling you.\n\n79\n00:03:34.760 --> 00:03:37.350\nOr you guess correctly, right?\n\n80\n00:03:37.350 --> 00:03:41.070\nBut, either way you have\nfound out how much it is.\n\n81\n00:03:41.070 --> 00:03:46.170\nNow, these may be short lived\nprocesses but they're all iteration.\n\n82\n00:03:46.170 --> 00:03:48.100\nBut, we don't perceive it that way.\n\n83\n00:03:49.150 --> 00:03:53.960\nWhere, where it really breaks down is\na lot of times in computers we use\n\n84\n00:03:53.960 --> 00:03:59.414\niterations for searching, or\nsorting also, In collections.\n\n85\n00:03:59.414 --> 00:04:03.270\nAnd that's, we don't think of\nour mind working like that.\n\n86\n00:04:04.550 --> 00:04:06.310\nSo if I were to take\nthe same set of cards.\n\n87\n00:04:06.310 --> 00:04:10.540\nLet's say I take a suit from a set\nof cards and I shuffle them up,\n\n88\n00:04:10.540 --> 00:04:11.610\nthey're all spades.\n\n89\n00:04:12.800 --> 00:04:15.270\nAnd then I cut them in half, right?\n\n90\n00:04:15.270 --> 00:04:17.090\nSo I have some.\n\n91\n00:04:17.090 --> 00:04:18.810\nSome arbitrary number\nthat I've thrown away,\n\n92\n00:04:18.810 --> 00:04:23.680\nand then I hold them out in front of\nVonne, I go what's the biggest card?\n\n93\n00:04:25.420 --> 00:04:29.370\nVonne will probably sit silent just for a\nminute, she'd go it's the seven of spades.\n\n94\n00:04:30.720 --> 00:04:33.650\nAnd I go, yeah, that's right,\nbut how did she figure that out?\n\n95\n00:04:35.780 --> 00:04:37.820\nMost people go,\nI just looked at it and I knew.\n\n96\n00:04:40.360 --> 00:04:45.450\nProbably not, you actually had some sub\nconscious processes that are similar,\n\n97\n00:04:45.450 --> 00:04:50.090\nmaybe you don't do it exactly like\na computer, but I would argue it\n\n98\n00:04:50.090 --> 00:04:53.960\nis a type of iterative process.\n&gt;&gt; Well, I would have to look at the first\n\n99\n00:04:53.960 --> 00:04:57.190\ncard, look at the second card, look at the\nthird, look at all the, well I looked at\n\n100\n00:04:57.190 --> 00:05:00.720\nall of them, I've went through.\n&gt;&gt; And\n\n101\n00:05:00.720 --> 00:05:04.480\nthen determine one's the largest,\nthat one.\n\n102\n00:05:04.480 --> 00:05:09.870\nSo you had to look through it all,\nyou had to step through each one.\n\n103\n00:05:09.870 --> 00:05:13.600\nAnd then once I've kinda got it in my\nmemory or whatever, now I could go ahead\n\n104\n00:05:13.600 --> 00:05:16.090\nand make the determination that\nseven is the largest card.\n\n105\n00:05:16.090 --> 00:05:17.800\n&gt;&gt; And it's funny that you recognize that,\n\n106\n00:05:17.800 --> 00:05:20.010\ncuz a lot of the people that I\n&gt;&gt; I speak to.\n\n107\n00:05:20.010 --> 00:05:22.570\nThey're like I'll just look at it and\nI'm like no, I'm like but\n\n108\n00:05:22.570 --> 00:05:24.460\nhow did you find the biggest one?\n\n109\n00:05:24.460 --> 00:05:27.070\nWell, I knew that seven\nwas the biggest one.\n\n110\n00:05:27.070 --> 00:05:29.980\nBut really what I'm asking\nis how did you do that?\n\n111\n00:05:29.980 --> 00:05:35.350\nBut most people go, that's not, okay,\nlet me get a quick survey of all\n\n112\n00:05:35.350 --> 00:05:38.840\nof the values and I go well wait a minute\n&gt;&gt; Let me round back,\n\n113\n00:05:38.840 --> 00:05:42.000\nthat's the biggest one there.\n&gt;&gt; Well, we've also been working together\n\n114\n00:05:42.000 --> 00:05:44.530\nfor the last couple of weeks\non doing Excel functions, and\n\n115\n00:05:44.530 --> 00:05:47.250\na lot of programming fundamentals.\n\n116\n00:05:47.250 --> 00:05:47.750\nSo I'm like,\n\n117\n00:05:49.060 --> 00:05:51.160\nI need to think like a computer.\n&gt;&gt; [LAUGH]\n\n118\n00:05:51.160 --> 00:05:53.050\n&gt;&gt; So I'm a little biased right now,\n\n119\n00:05:53.050 --> 00:05:54.920\nonly because I've been\nasking the same question.\n\n120\n00:05:54.920 --> 00:05:56.910\nI was like, Justin,\nwhen we're doing vertical lookups,\n\n121\n00:05:56.910 --> 00:05:58.380\nwhat would you do?\n&gt;&gt; Yeah.\n\n122\n00:05:58.380 --> 00:05:59.010\n&gt;&gt; So we're\n\n123\n00:05:59.010 --> 00:06:00.860\nin that kind of mind frame right now.\n\n124\n00:06:00.860 --> 00:06:03.530\nBut I can see where It just does.\n\n125\n00:06:03.530 --> 00:06:06.610\nNo, break it down, stop,\ntell me your process.\n\n126\n00:06:06.610 --> 00:06:09.270\nAnd that's sometimes hard for\n\n127\n00:06:09.270 --> 00:06:12.250\nus to do in normal life.\n&gt;&gt; And\n\n128\n00:06:12.250 --> 00:06:16.030\nit's something that you're going to\nhave to learn to do initially, right?\n\n129\n00:06:16.030 --> 00:06:17.830\nYou have to be able to break it down.\n\n130\n00:06:17.830 --> 00:06:21.880\nAnd the first kind of barrier that I find,\nis iteration for\n\n131\n00:06:21.880 --> 00:06:23.520\nindividuals a lot of times.\n\n132\n00:06:23.520 --> 00:06:25.940\nI like big burette cuz\ntheir like I don't think.\n\n133\n00:06:25.940 --> 00:06:29.830\nI'm not going is it this one, no,\nis it this one, no, is it this one, is it.\n\n134\n00:06:29.830 --> 00:06:33.300\nI'm like yeah you kind of are, but\nthat's not how our brain processes it,\n\n135\n00:06:33.300 --> 00:06:35.940\nyou just go scan, theirs the biggest one.\n\n136\n00:06:35.940 --> 00:06:40.330\nBut we do it so fast if the set is small,\nright, if its seven cards,\n\n137\n00:06:40.330 --> 00:06:41.630\nand they're in random order.\n\n138\n00:06:42.800 --> 00:06:45.150\nYou go, there's a seven.\n\n139\n00:06:45.150 --> 00:06:50.080\nYou do it really, really fast that you're\nnot conscious of all of these steps.\n\n140\n00:06:50.080 --> 00:06:54.670\nNow, I'm not a neurologist,\nI'm not a cognitive scientist,\n\n141\n00:06:54.670 --> 00:06:59.330\nthese are based on anecdotal things that\nI've seen, so if you're watching this and\n\n142\n00:06:59.330 --> 00:07:01.180\nyou are one of those professionals.\n\n143\n00:07:01.180 --> 00:07:06.010\nAnd I would be interested to see what\nare the brain processes like for\n\n144\n00:07:06.010 --> 00:07:07.180\nthese respective things?\n\n145\n00:07:07.180 --> 00:07:09.850\nSo you know what?\n\n146\n00:07:09.850 --> 00:07:13.150\nI say, let's take a little ride,\nso to speak.\n\n147\n00:07:13.150 --> 00:07:14.870\nLet's go ahead and\ntake a look at the screen here.\n\n148\n00:07:14.870 --> 00:07:16.063\nAnd you know what?\n\n149\n00:07:17.802 --> 00:07:20.740\nLet's no, no, no.\n\n150\n00:07:20.740 --> 00:07:23.400\nYou can just cancel that.\n&gt;&gt; Yeah, well, as soon as it comes up.\n\n151\n00:07:23.400 --> 00:07:23.960\nSo what are we gonna do?\n\n152\n00:07:23.960 --> 00:07:29.190\nWe're actually gonna take a look at\na game that many of you may have played.\n\n153\n00:07:29.190 --> 00:07:31.415\nMy dad still plays it to this day, right?\n\n154\n00:07:31.415 --> 00:07:32.785\nHe's like, yeah.\n\n155\n00:07:32.785 --> 00:07:35.765\nNow I.\nI will say I'm more of a Freecell guy\n\n156\n00:07:35.765 --> 00:07:36.345\nmyself.\n\n157\n00:07:36.345 --> 00:07:39.915\nI don't like, what is it called,\nklondike solitaire?\n\n158\n00:07:39.915 --> 00:07:40.595\n&gt;&gt; My gosh!\n\n159\n00:07:40.595 --> 00:07:44.625\nMy friend Julia's parents had it on\nher computer, the old CRT monitor.\n\n160\n00:07:44.625 --> 00:07:45.755\nI loved playing that.\n\n161\n00:07:45.755 --> 00:07:49.575\nBut yeah, it's funny you say that\ncuz you're like, it's my iPad, and\n\n162\n00:07:49.575 --> 00:07:50.875\nyou're like, let's get a solitaire.\n\n163\n00:07:50.875 --> 00:07:53.760\nAnd I'm like, okay, and\nI immediately just like.\n\n164\n00:07:53.760 --> 00:07:57.710\nWait, we're supposed to show,\nI'm sorry [LAUGH]\n\n165\n00:07:57.710 --> 00:08:00.670\n&gt;&gt; So, and it's funny, because I was like\n\n166\n00:08:00.670 --> 00:08:03.890\nyou know what, where do we use so if\nyou've every played a game like this, so\n\n167\n00:08:03.890 --> 00:08:07.020\nwe've already talked about games but\nI feel like for\n\n168\n00:08:07.020 --> 00:08:11.350\nme when I was growing up this was one of\nthe few things that I remember almost\n\n169\n00:08:11.350 --> 00:08:16.590\neverybody I knew had done on a computer\nnow I'm from a very particular age range.\n\n170\n00:08:16.590 --> 00:08:20.190\n&gt;&gt; So your mileage may vary on this, but\n\n171\n00:08:20.190 --> 00:08:24.030\neverybody had at least\nplayed Solitaire right?\n\n172\n00:08:24.030 --> 00:08:25.180\nYou're like that's it.\n\n173\n00:08:26.270 --> 00:08:28.175\nNow, I picked this game and you're like,\n\n174\n00:08:28.175 --> 00:08:32.740\nwell you're proving iteration by picking\na game that's built on computer.\n\n175\n00:08:32.740 --> 00:08:34.850\nNo, I'm showing you on a computer.\n\n176\n00:08:34.850 --> 00:08:39.570\nI have watched people play\nSolitaire With just a deck of cards.\n\n177\n00:08:39.570 --> 00:08:40.980\nSo they do the exact same thing.\n\n178\n00:08:40.980 --> 00:08:46.180\nThe iteration process,\nnow I think this is easy mode.\n\n179\n00:08:46.180 --> 00:08:47.650\nBut I go, you know what?\n\n180\n00:08:47.650 --> 00:08:50.110\nI need to find a card, next.\n\n181\n00:08:50.110 --> 00:08:52.290\nWell, that's not the card I'm looking for.\n\n182\n00:08:52.290 --> 00:08:53.430\nThat's not the card I'm looking for.\n\n183\n00:08:53.430 --> 00:08:55.160\nThat's not the card I'm looking for.\n\n184\n00:08:55.160 --> 00:08:58.690\nAnd you iterate through one by one.\n\n185\n00:08:58.690 --> 00:09:01.760\nShould have actually grabbed that one.\n\n186\n00:09:01.760 --> 00:09:04.710\nOne by one until what, all right?\n\n187\n00:09:04.710 --> 00:09:07.960\nI found an ace and boom, right?\n\n188\n00:09:07.960 --> 00:09:12.970\nSo until I find the card I'm iterating and\nthen I start iterating again.\n\n189\n00:09:12.970 --> 00:09:19.570\nNext, next, next, next,\nnext There's a lot of cards in that stack.\n\n190\n00:09:19.570 --> 00:09:20.310\nThen what happens?\n\n191\n00:09:20.310 --> 00:09:22.280\nWhat happens when you get to the end?\n\n192\n00:09:22.280 --> 00:09:23.720\nWell, you stop, right?\n\n193\n00:09:23.720 --> 00:09:28.880\nActually, some solitary games give you\nthree times through and then you're done.\n\n194\n00:09:28.880 --> 00:09:30.890\nI don't like to play that way.\n\n195\n00:09:30.890 --> 00:09:33.610\nYou just flip the cards back over, right?\n\n196\n00:09:33.610 --> 00:09:35.680\nAnd you start back at the beginning.\n\n197\n00:09:35.680 --> 00:09:37.020\nAnd you can iterate again.\n\n198\n00:09:38.840 --> 00:09:40.870\nSo what am I looking for?\n\n199\n00:09:40.870 --> 00:09:45.540\nWell, and I guess I should actually\nthink about this just for a moment.\n\n200\n00:09:45.540 --> 00:09:48.460\nLet's go find that ace,\nso I'm now searching.\n\n201\n00:09:48.460 --> 00:09:50.290\nI found it, there it is.\n\n202\n00:09:50.290 --> 00:09:52.600\nAnd I use it, but\nnow I could continue to iterate.\n\n203\n00:09:52.600 --> 00:09:56.680\nNow the one thing is I'm actually\nchanging the stack of cards.\n\n204\n00:09:56.680 --> 00:09:59.290\nSo you have to be careful with that.\n\n205\n00:09:59.290 --> 00:10:05.030\nBut this is very much like structures\nthat we've seen in Python.\n\n206\n00:10:06.260 --> 00:10:09.590\nThe deck is just a list of cards.\n\n207\n00:10:09.590 --> 00:10:11.410\nI'm starting at the beginning\nof the list and\n\n208\n00:10:11.410 --> 00:10:14.230\nI want to look at the first card in the\nlist, and the second card in the list, and\n\n209\n00:10:14.230 --> 00:10:16.420\nthe third card in the list.\n&gt;&gt; They're indexed!\n\n210\n00:10:16.420 --> 00:10:17.420\n&gt;&gt; Yeah, they're indexed.\n\n211\n00:10:17.420 --> 00:10:19.860\nThey have They have an order.\n\n212\n00:10:19.860 --> 00:10:24.095\nI have the zero card, the first card,\nthe second card, and [SOUND] and\n\n213\n00:10:24.095 --> 00:10:25.483\nI go through them, and\n\n214\n00:10:25.483 --> 00:10:29.800\nthis is how I go through it in a computer.\n&gt;&gt; And you either append or delete, you\n\n215\n00:10:29.800 --> 00:10:33.843\nknow you could take those things out, and\nthen once you do it changes and you create\n\n216\n00:10:33.843 --> 00:10:37.270\na new list and all that kind of stuff.\n&gt;&gt; Yeah.\n\n217\n00:10:37.270 --> 00:10:38.190\n&gt;&gt; Yeah, so\n\n218\n00:10:38.190 --> 00:10:39.740\nwe're mutating the list in this, but\n\n219\n00:10:39.740 --> 00:10:43.850\nwe could think of it as well\nI'm gonna take these cards.\n\n220\n00:10:43.850 --> 00:10:49.160\nAnd okay, take this card out, and I'm\nbuilding a new list with the pop, okay?\n\n221\n00:10:49.160 --> 00:10:51.880\nSo you could, right,\nthat's about perspective.\n\n222\n00:10:51.880 --> 00:10:57.230\nSo I wanted to show you that because You\nhave to think that one by one, especially\n\n223\n00:10:57.230 --> 00:11:00.420\nif things are not lists or dictionaries or\ntuples or whatever it may be.\n\n224\n00:11:00.420 --> 00:11:04.460\nYou have to think I get\nto look at the one thing\n\n225\n00:11:04.460 --> 00:11:06.570\nbefore I can move on to the next thing.\n\n226\n00:11:07.660 --> 00:11:12.440\nIt's really hard to survey\neverything in a list all together.\n\n227\n00:11:12.440 --> 00:11:14.030\nUnless you're doing some kind of,\n\n228\n00:11:14.030 --> 00:11:17.880\nif I have a list of numbers I can get an\nidea about the numbers by taking the sum\n\n229\n00:11:17.880 --> 00:11:20.360\nof the numbers,\ntaking the average of the numbers.\n\n230\n00:11:21.410 --> 00:11:24.600\nBut what does the average\nof a deck of cards mean?\n\n231\n00:11:24.600 --> 00:11:26.150\nI don't know.\n\n232\n00:11:26.150 --> 00:11:30.240\nAnd then you get into the whole debate,\nwell is an ace a 1 or an 11?\n\n233\n00:11:30.240 --> 00:11:32.540\nI don't know, right?\n\n234\n00:11:32.540 --> 00:11:39.625\nSo you have to think about that,\nand that's how iteration works.\n\n235\n00:11:39.625 --> 00:11:44.620\nSo let's just kind of draw this up and\nI think that will give us a decent mental\n\n236\n00:11:44.620 --> 00:11:49.490\nmodel you should always think about one\nat a time and a list could be anything.\n\n237\n00:11:49.490 --> 00:11:53.560\nYou could think of\nconcrete even if the list\n\n238\n00:11:53.560 --> 00:11:58.980\nis not the structure maybe it's\na sat of steps that just so happen.\n\n239\n00:11:58.980 --> 00:12:03.160\nTo correspond to, like a number.\n\n240\n00:12:04.800 --> 00:12:06.700\nSo I got this list here, right?\n\n241\n00:12:08.080 --> 00:12:14.240\nAnd I got a card, let's say this is\nthe ace, let's say this is a three.\n\n242\n00:12:14.240 --> 00:12:18.870\nAnd these are all the same suit,\nI have, let's say the diamonds.\n\n243\n00:12:18.870 --> 00:12:22.600\nMaybe I should have made them red but, and\n\n244\n00:12:22.600 --> 00:12:26.480\nthen here's the seven.\n&gt;&gt; We have a nine.\n\n245\n00:12:26.480 --> 00:12:29.190\nThe nine of diamonds.\n&gt;&gt; And,\n\n246\n00:12:29.190 --> 00:12:34.280\nthen we have for on ever and\never and ever, all right?\n\n247\n00:12:34.280 --> 00:12:38.330\nNow, these aren't numbers anymore,\nthese aren't strings.\n\n248\n00:12:38.330 --> 00:12:40.088\nTechnically they could be strings, right?\n\n249\n00:12:40.088 --> 00:12:45.810\n[INAUDIBLE]\nI wouldn't do that, by the way.\n\n250\n00:12:45.810 --> 00:12:47.590\nBut these are 0, 1, 2, 3.\n\n251\n00:12:47.590 --> 00:12:48.410\nHere's the real hiccup.\n\n252\n00:12:50.390 --> 00:12:53.270\nWe know this,\nwe know how it can look at number 1.\n\n253\n00:12:53.270 --> 00:12:54.470\nWe know what's in there.\n\n254\n00:12:56.410 --> 00:12:58.520\nAnd I'll look at these\nthe way it's drawn out, and\n\n255\n00:12:58.520 --> 00:13:00.930\npeople will go I know\nthat number seven is two.\n\n256\n00:13:00.930 --> 00:13:05.210\nYeah, but\nthere's no guarantee that number seven is\n\n257\n00:13:05.210 --> 00:13:06.870\nalways the third card in the deck.\n\n258\n00:13:07.990 --> 00:13:11.160\nWhat happens before every game of cards?\n\n259\n00:13:11.160 --> 00:13:12.630\nYou shuffle them.\n\n260\n00:13:12.630 --> 00:13:15.090\nYou randomized them, so to speak.\n\n261\n00:13:15.090 --> 00:13:18.330\nSo now, how do you find the seven?\n\n262\n00:13:18.330 --> 00:13:18.840\nThere's two ways.\n\n263\n00:13:20.240 --> 00:13:22.841\nYou either go, all right,\nis that the seven?\n\n264\n00:13:22.841 --> 00:13:23.880\nNope.\nIs that the seven?\n\n265\n00:13:23.880 --> 00:13:24.380\nNope.\n\n266\n00:13:25.780 --> 00:13:26.670\nNext.\n\n267\n00:13:26.670 --> 00:13:27.580\nThat's the seven.\n\n268\n00:13:27.580 --> 00:13:31.220\nAnd that is analagous to let me turn\nthe card over, let me turn the card over.\n\n269\n00:13:32.330 --> 00:13:36.810\nThe alternative is get a big table.\n\n270\n00:13:36.810 --> 00:13:43.370\nAnd you just through them\ndown on that table like so.\n\n271\n00:13:44.630 --> 00:13:46.090\nThere's the seven.\n\n272\n00:13:46.090 --> 00:13:50.100\nBut here's the funny part,\nyou just disorganized it.\n\n273\n00:13:50.100 --> 00:13:54.970\nYou didn't really change the fact that\nyou have a specific order because\n\n274\n00:13:54.970 --> 00:13:59.410\nmore than likely here's what your eyes\ndid, I'll be it probably very quickly.\n\n275\n00:13:59.410 --> 00:14:01.530\nAnd I'm exaggerating this.\n\n276\n00:14:01.530 --> 00:14:03.250\nYou went, is that the seven?\n\n277\n00:14:03.250 --> 00:14:04.770\nNo, so I'm gonna come over here.\n\n278\n00:14:04.770 --> 00:14:06.440\nIs that?\nNo, I'm gonna come over here.\n\n279\n00:14:06.440 --> 00:14:08.350\nNo, there it is.\n\n280\n00:14:09.410 --> 00:14:12.430\nIf I were to take that and\nattach them together with string and\n\n281\n00:14:12.430 --> 00:14:14.910\nthen stretch them out, guess what.\n\n282\n00:14:15.920 --> 00:14:19.350\nIt looks just like that,\nit is an iterative process.\n\n283\n00:14:21.050 --> 00:14:25.520\nDo one thing, then the next,\nthen the next, there it is.\n\n284\n00:14:25.520 --> 00:14:27.880\nI have an order, I'm going one by one.\n\n285\n00:14:28.880 --> 00:14:31.126\nAnd that's how we have to\nthink about iteration.\n\n286\n00:14:32.362 --> 00:14:36.300\nInterestingly enough, This is such\na common thing that people need to do.\n\n287\n00:14:36.300 --> 00:14:37.320\nI need to search for things.\n\n288\n00:14:37.320 --> 00:14:41.440\nI need run through an entire collection,\nwhether it be couples or whatever,\n\n289\n00:14:42.660 --> 00:14:49.230\nmultiple times to find or change or add\ntogether or deposit a range of operations.\n\n290\n00:14:50.290 --> 00:14:50.900\nWhile this is so\n\n291\n00:14:50.900 --> 00:14:56.350\ncommon that programming languages\ntypically have iteration, Constructs.\n\n292\n00:14:56.350 --> 00:15:00.770\nIn Python, in the next few episodes,\nwe're gonna be looking at for\n\n293\n00:15:00.770 --> 00:15:04.880\nloops and\nwhile loops as those possible things.\n\n294\n00:15:04.880 --> 00:15:12.290\nNow in this episode I've picked things\nthat are rather concrete and finite.\n\n295\n00:15:12.290 --> 00:15:17.410\nThat means they have an actual,\ndefinable number of things.\n\n296\n00:15:17.410 --> 00:15:18.960\nIt is possible.\n\n297\n00:15:18.960 --> 00:15:22.180\nIt's kinda like finding you keys when\nyou're in hungry in the morning and\n\n298\n00:15:22.180 --> 00:15:25.510\nyou're late for work and\nit's gonna take forever.\n\n299\n00:15:25.510 --> 00:15:29.370\nSo, there are possible ways for\nyou are forever doing something,\n\n300\n00:15:30.510 --> 00:15:36.140\none of those other things is you're\nforever breathing until, until you're not.\n\n301\n00:15:36.140 --> 00:15:38.000\nSo keep that in mind.\n\n302\n00:15:38.000 --> 00:15:40.860\nIn the subsequent episodes we're actually\ngoing to see those programatically.\n\n303\n00:15:40.860 --> 00:15:43.230\nYou should start seeing\nthe discrete steps.\n\n304\n00:15:43.230 --> 00:15:47.230\nJust as you're walking around day to\nday just go, alright wait a minute.\n\n305\n00:15:47.230 --> 00:15:51.340\nWhat are the things that I'm doing\niteratively where it's a step by step\n\n306\n00:15:51.340 --> 00:15:52.410\nprocess?\n\n307\n00:15:52.410 --> 00:15:55.490\nAnd being able to recognize\nthat will help you choose\n\n308\n00:15:55.490 --> 00:15:57.880\nappropriate programmatic constructs.\n\n309\n00:15:57.880 --> 00:16:00.830\nFor solving problems, and\nthat's ultimately what programming's for.\n\n310\n00:16:00.830 --> 00:16:03.840\nLet me pick how to represent this data.\n\n311\n00:16:03.840 --> 00:16:07.540\nLet me pick how to use this data.\n\n312\n00:16:07.540 --> 00:16:10.940\nAnd in order to do that your\nrepresentation and use are interconnected.\n\n313\n00:16:10.940 --> 00:16:15.080\nAnd a lot of times that leads\nto an iterative structure.\n\n314\n00:16:15.080 --> 00:16:15.980\nAll right.\nWell, just like\n\n315\n00:16:15.980 --> 00:16:19.670\nthe episode on logic control where we\nreally had to just break it down and\n\n316\n00:16:19.670 --> 00:16:23.990\nreally think about it, it's a really\ngood primer for what's coming up.\n\n317\n00:16:23.990 --> 00:16:28.300\nAnd so, I think we're gonna have to\niterate through the next couple of\n\n318\n00:16:28.300 --> 00:16:33.102\nepisodes to really Condorcet or\nconcrete the information to our head.\n\n319\n00:16:33.102 --> 00:16:35.060\nTrying.\n[LAUGH] All right,\n\n320\n00:16:35.060 --> 00:16:39.240\nI think it's time to get on out of here,\nso signing off for Devpro.tv,\n\n321\n00:16:39.240 --> 00:16:41.830\nI've been your host Vonne Smith.\n&gt;&gt; And I'm Justin Dennison.\n\n322\n00:16:41.830 --> 00:16:44.702\n&gt;&gt; We'll see ya soon.\n\n323\n00:16:44.702 --> 00:16:49.556\n[MUSIC]\n\n",
          "vimeoId": "269669351"
        },
        {
          "description": "In this episode, Justin and Vonne take a look at the first iteration capability that you experience in Python, the for loop. Justin demonstrates how the for loop can be ability with or without and index as well as how to use the for loop for different iterable data types.",
          "length": "1782",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-2-1-for_loops-050718-PGM.00_33_09_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-2-1-for_loops-050718-PGM.00_33_09_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-2-1-for_loops-050718-PGM.00_33_09_20.Still001-sm.jpg",
          "title": "For Loops",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.104 --> 00:00:17.131\n&gt;&gt; Hello everyone, and welcome back to\nanother exciting edition of DevPro.TV.\n\n3\n00:00:17.131 --> 00:00:19.962\nI'm your host, Vonne Smith,\nand we're continuing through\n\n4\n00:00:19.962 --> 00:00:24.310\nprogramming fundamental series and this\nepisode, we're gonna talk about for loops!\n\n5\n00:00:24.310 --> 00:00:25.780\nYes, for loops.\n\n6\n00:00:25.780 --> 00:00:28.860\nAnd here to loop again is Mr.\nJustin Dennison, how are you?\n\n7\n00:00:28.860 --> 00:00:31.550\n&gt;&gt; I am doing fantastic Vonne,\nabsolutely fantastic.\n\n8\n00:00:31.550 --> 00:00:32.640\nLet me tell you how good I'm doing.\n\n9\n00:00:32.640 --> 00:00:33.213\nHow are you?\n\n10\n00:00:33.213 --> 00:00:35.170\n&gt;&gt; I'm good, I'm good, how are you?\n\n11\n00:00:35.170 --> 00:00:36.375\n[LAUGH] We need to stop right now.\n\n12\n00:00:36.375 --> 00:00:39.030\n&gt;&gt; [LAUGH] Yeah that could get\nwicked annoying pretty fast.\n\n13\n00:00:39.030 --> 00:00:41.200\nBut yeah we're going to be\ntalking about loops and you know,\n\n14\n00:00:41.200 --> 00:00:44.820\nit's really odd because one of\nthe things that I encounter when\n\n15\n00:00:44.820 --> 00:00:47.490\nI'm not teaching Python, when I'm trying\nto teach other languages or whatever.\n\n16\n00:00:47.490 --> 00:00:52.310\nIs people think that they don't\napproach problems this way,\n\n17\n00:00:52.310 --> 00:00:57.560\nor it's like a foreign concept,\nfor loops, iteration, all right.\n\n18\n00:00:57.560 --> 00:00:58.870\nWell what does that mean?\n\n19\n00:00:58.870 --> 00:01:02.700\nWell that means you're just going one\nby one, one right after the other.\n\n20\n00:01:02.700 --> 00:01:05.310\nAnd it takes a little while\nto get used to it, but\n\n21\n00:01:05.310 --> 00:01:08.867\nit's really important to\nunderstand kind of the construct.\n\n22\n00:01:08.867 --> 00:01:13.640\nLuckily in Python,it becomes very readable\nso we're actually gonna take a look at\n\n23\n00:01:13.640 --> 00:01:17.410\na for loop with an index with\ncollections that are indexed.\n\n24\n00:01:17.410 --> 00:01:21.246\nAnd then we're gonna look at a for\nloop that has, thumbs.\n\n25\n00:01:21.246 --> 00:01:25.450\n[LAUGH] Vonne like in\nfront of me off camera.\n\n26\n00:01:26.620 --> 00:01:29.703\nFour loops that are just like\nvery Pythonic, all right?\n\n27\n00:01:29.703 --> 00:01:34.590\nSo they're very readable, they make sense,\nand that's our goal for this episode.\n\n28\n00:01:34.590 --> 00:01:38.000\n&gt;&gt; Yeah, I was kinda like why are you\ndoing this, it's like, are you,\n\n29\n00:01:38.000 --> 00:01:42.950\nis this like a new thing, like That whole,\nI'm not gonna point at you,\n\n30\n00:01:42.950 --> 00:01:44.260\nso I'm gonna do my thumb like this!\n\n31\n00:01:44.260 --> 00:01:44.920\nYou know how they talk.\n\n32\n00:01:44.920 --> 00:01:47.430\nAnd I'm like, I don't know what\nyou're doing over there, Justin.\n\n33\n00:01:47.430 --> 00:01:50.630\n&gt;&gt; I don't know, a Pez dispenser,\nI guess, I don't know.\n\n34\n00:01:50.630 --> 00:01:53.320\nBut yeah, we should probably get started.\n\n35\n00:01:53.320 --> 00:01:56.990\nSo just gonna take a look at the screen\nhere, and we're just inside of\n\n36\n00:01:56.990 --> 00:02:04.070\nthe programming_fundamentals folder right\ninside of our terminal environment.\n\n37\n00:02:04.070 --> 00:02:06.060\nWow, totally forgot where we were.\n\n38\n00:02:06.060 --> 00:02:08.130\nSo here's programming fundamentals, right?\n\n39\n00:02:08.130 --> 00:02:15.335\nAnd so let's go ahead and make,\nlet's call them for_loops.py all right?\n\n40\n00:02:15.335 --> 00:02:17.300\nSo we're gonna go ahead and\nmake that while we're there.\n\n41\n00:02:17.300 --> 00:02:19.090\nWe're gonna come back over here and\n\n42\n00:02:19.090 --> 00:02:24.210\nour editors just opened, remember\nthat's file open, go open the folder.\n\n43\n00:02:24.210 --> 00:02:28.040\nI've said that so many times that we're\njust gonna quicken that up a little bit.\n\n44\n00:02:28.040 --> 00:02:29.608\nSo I'm gonna open up for loops and\n\n45\n00:02:29.608 --> 00:02:32.471\nI think it's very important to\nhave a range of collections.\n\n46\n00:02:32.471 --> 00:02:37.393\nBecause typically those collection\ntimes that we talked about, sets, list,\n\n47\n00:02:37.393 --> 00:02:39.280\ntuples and dictionaries.\n\n48\n00:02:39.280 --> 00:02:42.550\nAnd there's whole lot of other\nkind of collection types but\n\n49\n00:02:42.550 --> 00:02:45.130\nthose are our four core ones.\n\n50\n00:02:45.130 --> 00:02:46.970\nWell, how do they react with for_loop?\n\n51\n00:02:46.970 --> 00:02:47.920\nDo they work?\n\n52\n00:02:47.920 --> 00:02:49.580\nCan I iterate over them?\n\n53\n00:02:49.580 --> 00:02:51.430\nWell, we're going to take\na look at each one of those.\n\n54\n00:02:51.430 --> 00:02:53.270\nSo let's take a look a numbers.\n\n55\n00:02:53.270 --> 00:02:55.490\nNumbers are easy.\n\n56\n00:02:55.490 --> 00:02:59.230\nSo that is a list of numbers, okay?\n\n57\n00:02:59.230 --> 00:03:05.101\nAnd then let's look at some words,\n\n58\n00:03:05.101 --> 00:03:09.030\nand the cheese is good.\n\n59\n00:03:09.030 --> 00:03:14.122\nAnd let's look at the user and\nthat's a tupple, and\n\n60\n00:03:14.122 --> 00:03:20.739\nthat's gonna be \"Vonne\" and\n\"Smith\" 23 and she likes pizza.\n\n61\n00:03:20.739 --> 00:03:23.280\nNot pizzy, pizza.\nAnd then what's our last one?\n\n62\n00:03:23.280 --> 00:03:24.350\nWell its a dictionary.\n\n63\n00:03:24.350 --> 00:03:25.920\nWhat's a good dictionary here?\n\n64\n00:03:28.580 --> 00:03:30.258\nLet's see foods.\n\n65\n00:03:30.258 --> 00:03:37.410\nSo dict is Pizza=True.\n\n66\n00:03:37.410 --> 00:03:41.800\nAnd I'm just doing this because\nyou're like, well do you like pizza?\n\n67\n00:03:41.800 --> 00:03:44.610\nYeah, you can almost use\nit as a yes/no for a list.\n\n68\n00:03:44.610 --> 00:03:46.480\nSo pizza's true.\n\n69\n00:03:46.480 --> 00:03:49.970\nOnions, hm, this is mine, false.\n\n70\n00:03:49.970 --> 00:03:52.760\nOlives, false.\n\n71\n00:03:52.760 --> 00:03:55.980\nAnd one last one Salami,\n\n72\n00:03:57.440 --> 00:04:01.640\nabsolutely true, too bad I can't do true\ntrue, because I do love some salami.\n\n73\n00:04:01.640 --> 00:04:04.910\nSo here's our collection items, let's go\nahead and get these printed out just so\n\n74\n00:04:04.910 --> 00:04:06.650\nwe know what's going on here.\n\n75\n00:04:07.720 --> 00:04:12.320\nAnd we've seen these before, we talked\nabout these in a fair amount of depth.\n\n76\n00:04:12.320 --> 00:04:16.240\nAnd I suspect you hear me pecking away on\nmy keyboard and you're like wow that's\n\n77\n00:04:16.240 --> 00:04:20.010\nkind of loud, but you know our\nkeyboards are actually kind of loud.\n\n78\n00:04:20.010 --> 00:04:23.630\nSo let's clear this out and\nlook at for_loops.\n\n79\n00:04:23.630 --> 00:04:24.690\nSo there we are.\n\n80\n00:04:24.690 --> 00:04:28.680\nWe have our list, we have our set,\nwe have our tuple and\n\n81\n00:04:28.680 --> 00:04:32.232\nthen we have our dictionary, all right?\n\n82\n00:04:32.232 --> 00:04:35.130\nSo here are our collection types,\na sample of each one.\n\n83\n00:04:36.410 --> 00:04:41.378\nNow, what's really crazy is what\nif I wanted to do something one\n\n84\n00:04:41.378 --> 00:04:44.512\nat a time with each one of these, right?\n\n85\n00:04:44.512 --> 00:04:47.230\nAnd we're just gonna print out just\nto see how the for loop works.\n\n86\n00:04:47.230 --> 00:04:48.580\nWe're not gonna do a whole lot with them.\n\n87\n00:04:48.580 --> 00:04:51.010\nWe'll get to those at a later time.\n\n88\n00:04:51.010 --> 00:04:57.990\nThen, if I wanted to go like, number by\nnumber through the numbers list, right?\n\n89\n00:04:57.990 --> 00:05:00.220\nHow would I go about doing that?\n\n90\n00:05:00.220 --> 00:05:02.160\nWell, there's a couple ways.\n\n91\n00:05:02.160 --> 00:05:06.210\nYou always have to ask yourself,\ndo I need an index?\n\n92\n00:05:06.210 --> 00:05:10.360\nAnd does the index make sense for\nthe collection time?\n\n93\n00:05:10.360 --> 00:05:12.160\nAnd what I mean is numbers.\n\n94\n00:05:13.210 --> 00:05:18.500\nWell, yeah, these are list of 0, 1,\n2 these have respective indexes.\n\n95\n00:05:18.500 --> 00:05:24.000\nWords, this is a set,\nthere is no index here, this is a tuple.\n\n96\n00:05:24.000 --> 00:05:26.920\nYes there still are indexes,\nand then well,\n\n97\n00:05:26.920 --> 00:05:32.700\nfoods is a dictionary, that doesn't really\nhave indexes, so keep that in mind.\n\n98\n00:05:32.700 --> 00:05:35.156\nSo, let's just look at the standard for\nloop.\n\n99\n00:05:37.271 --> 00:05:42.820\nThe standard, gotta spell standard\ncorrectly, for loop in Python.\n\n100\n00:05:44.160 --> 00:05:47.850\nAnd this idea kind of stays around\nregardless of whether it's Python or not.\n\n101\n00:05:49.190 --> 00:05:55.904\nIf I want to go through every\nnumber in a list, Colon,\n\n102\n00:05:55.904 --> 00:06:02.430\nright, so for number in numbers,\nthat's the collection.\n\n103\n00:06:03.960 --> 00:06:07.620\nAnd this is like a temporary variable,\nall right?\n\n104\n00:06:08.970 --> 00:06:14.960\nAnd then a colon, and then I'm\njust gonna print the number, okay?\n\n105\n00:06:14.960 --> 00:06:17.250\nStandard Python for loop,\nthat's all it is, that's it.\n\n106\n00:06:18.250 --> 00:06:21.940\nAnd instead of, I do this great deal,\nI'm gonna scroll down just a little bit.\n\n107\n00:06:21.940 --> 00:06:26.150\nI do this great deal where I say\nsingular in plural, singular in plural.\n\n108\n00:06:26.150 --> 00:06:30.080\nBut really, you can think of this as for\nthe element,\n\n109\n00:06:33.350 --> 00:06:38.070\nfor each element in numbers,\ndo something with that element, okay?\n\n110\n00:06:38.070 --> 00:06:39.910\nLet's go see how that plays out.\n\n111\n00:06:41.010 --> 00:06:45.787\nSo clear this out.\n\n112\n00:06:45.787 --> 00:06:48.682\nRon, I tell you what, you're either gonna\nhave to take the coffee away from me or\n\n113\n00:06:48.682 --> 00:06:51.290\nactually put me down for a nap or\nsomething, I don't know.\n\n114\n00:06:51.290 --> 00:06:55.870\nSo, notice I get a print, a one,\na two, a three, a four, a five.\n\n115\n00:06:55.870 --> 00:06:58.580\nI did that for each element in numbers.\n\n116\n00:06:59.740 --> 00:07:02.670\nThis is very readable and if you ever\ntried to program in other programming\n\n117\n00:07:02.670 --> 00:07:04.650\nlanguages, or maybe you haven't,\nand that's fine.\n\n118\n00:07:04.650 --> 00:07:09.710\nI'm just going to tell you, it's usually\nnot as easy to iterate over a collection.\n\n119\n00:07:12.300 --> 00:07:13.506\nFor element in collection.\n\n120\n00:07:13.506 --> 00:07:15.700\nFor element in the thing\nthat can be iterated over.\n\n121\n00:07:17.070 --> 00:07:21.940\nIt's pretty straightforward as far\nas the Python standard for them.\n\n122\n00:07:21.940 --> 00:07:27.640\n&gt;&gt; I was going to say, that looks really\nsimple, in a sense, of how you read it.\n\n123\n00:07:27.640 --> 00:07:31.350\nBecause I feel like I remember with\nloops where you had to do stuff, for\n\n124\n00:07:31.350 --> 00:07:36.630\nevery time A is greater than, or ii plus\none,something like the iteration of.\n\n125\n00:07:36.630 --> 00:07:38.480\nYou go through it and\nthere was this whole kind of,\n\n126\n00:07:38.480 --> 00:07:43.454\nlike default syntax to make\nthe iteration happen, yes?\n\n127\n00:07:43.454 --> 00:07:46.310\n&gt;&gt; Yeah you're exactly.\n\n128\n00:07:46.310 --> 00:07:50.735\nAnother C base language, so\na little bit of history.\n\n129\n00:07:50.735 --> 00:07:55.884\nALGOL family, A L G O L, or what kind\nof ended up being the C programming\n\n130\n00:07:55.884 --> 00:08:02.543\nlanguages, curly braces, semi-colons, and\nthe for loop There was all this ceremony.\n\n131\n00:08:02.543 --> 00:08:03.666\nWell, where do I start?\n\n132\n00:08:03.666 --> 00:08:04.836\nWhere do I end?\n\n133\n00:08:04.836 --> 00:08:05.940\nHow do I get there?\n\n134\n00:08:05.940 --> 00:08:09.410\nAnd you have to have numbers and\neverything has to be indexed.\n\n135\n00:08:09.410 --> 00:08:11.730\nWell, Python was like you know,\n\n136\n00:08:11.730 --> 00:08:16.140\nthat leads people to try to\naccess elements that are outside.\n\n137\n00:08:16.140 --> 00:08:19.080\nIf you remember back to\nsome previous episodes.\n\n138\n00:08:19.080 --> 00:08:23.100\nIn a dictionary if I try to get a key\nthat wasn't there, I get a key error.\n\n139\n00:08:23.100 --> 00:08:27.610\nIf I try to use an index that was\noutside how many numbers I had or\n\n140\n00:08:27.610 --> 00:08:31.200\nhow many things in the user, right?\n\n141\n00:08:31.200 --> 00:08:35.840\nIf I said give me numbers bracket 1,000,\nit was an index error.\n\n142\n00:08:35.840 --> 00:08:38.490\nIt actually broke, like things are broke.\n\n143\n00:08:38.490 --> 00:08:42.540\nThis guarantees I start at\nthe beginning and I go to the end, and\n\n144\n00:08:42.540 --> 00:08:44.810\nit handles everything\nbehind the scenes for me.\n\n145\n00:08:45.880 --> 00:08:50.500\nBut there are times that you still need\nthe power of starting at a different\n\n146\n00:08:50.500 --> 00:08:52.640\nplace, okay?\n\n147\n00:08:52.640 --> 00:08:57.130\nYou wanna start at index 1 and\ngo to the end.\n\n148\n00:08:58.480 --> 00:09:02.940\nI'm gonna do the same thing for\nnumbers because this is,\n\n149\n00:09:02.940 --> 00:09:07.290\nwe'll see that this ends up being\nnot as needed for the most part.\n\n150\n00:09:07.290 --> 00:09:11.505\nMost of the time I would venture to say,\ntotally made up number,\n\n151\n00:09:11.505 --> 00:09:15.920\n80% of the time you're gonna use this for\nloop, that's it.\n\n152\n00:09:17.080 --> 00:09:23.630\nEvery once in a while you wanna say for\nthe index in and how do I do that?\n\n153\n00:09:23.630 --> 00:09:27.090\nWell, we actually need someway to like\n\n154\n00:09:27.090 --> 00:09:30.801\ncreate a set of numbers that\nrepresent where we're going, okay?\n\n155\n00:09:32.015 --> 00:09:33.978\nThere's this new called a range.\n\n156\n00:09:33.978 --> 00:09:36.574\nA range will give me a range of numbers.\n\n157\n00:09:36.574 --> 00:09:38.453\nI don't actually have to type this.\n\n158\n00:09:38.453 --> 00:09:44.018\nA range gives me a start,\n\n159\n00:09:44.018 --> 00:09:48.170\na stop and a step.\n\n160\n00:09:48.170 --> 00:09:54.050\nStep by default is 1, so if I leave\nout step it goes up by 1, right?\n\n161\n00:09:54.050 --> 00:09:55.150\nWhere do I need to start?\n\n162\n00:09:55.150 --> 00:09:58.250\nWell, let's say I wanted to,\nI don't want to print every element,\n\n163\n00:09:58.250 --> 00:10:00.710\nI actually want to start at index 1.\n\n164\n00:10:00.710 --> 00:10:04.920\nSo I'm gonna start at 1 and\nwhere do I want to go to?\n\n165\n00:10:05.960 --> 00:10:07.594\nWell, I wanna go to the end,\n\n166\n00:10:07.594 --> 00:10:11.015\nif you remember the index is\nalways 1 less than the length.\n\n167\n00:10:11.015 --> 00:10:15.615\nSo len of numbers.\n\n168\n00:10:21.712 --> 00:10:23.862\nYou ever have that bad taste in your\nmouth where you're like, I don't know.\n\n169\n00:10:23.862 --> 00:10:29.022\nThis is a lot, this is also a good\nway to mess stuff up cuz you now\n\n170\n00:10:29.022 --> 00:10:34.184\nhave the ability and I'll show\nyou to go outside of the range of\n\n171\n00:10:34.184 --> 00:10:40.480\nyour respective list or\nwhatever it may be and things will break.\n\n172\n00:10:40.480 --> 00:10:45.623\nBut now, if I want this element,\nthen I have to do\n\n173\n00:10:45.623 --> 00:10:51.407\nsomething like this,\nelement = numbers[index].\n\n174\n00:10:51.407 --> 00:10:55.970\nAnd now, I have to print(element).\n\n175\n00:10:55.970 --> 00:11:00.220\nSo if I use this index,\nI have to start at that index and\n\n176\n00:11:00.220 --> 00:11:02.270\nI have to grab the corresponding element.\n\n177\n00:11:02.270 --> 00:11:09.400\nSo the first time through, this will be 1,\nthe next time through it'll be 2, 3, 4.\n\n178\n00:11:09.400 --> 00:11:10.710\nHow many are in numbers?\n\n179\n00:11:10.710 --> 00:11:12.740\nThere are five things in there.\n\n180\n00:11:12.740 --> 00:11:17.765\nAnd then no will not be 5 because\nthey will be up to index 4.\n\n181\n00:11:19.740 --> 00:11:21.330\nThat's where it gets tricky here.\n\n182\n00:11:21.330 --> 00:11:28.000\nRange, this right-hand number is up to but\nnot including this right-hand number.\n\n183\n00:11:28.000 --> 00:11:30.191\nSo let's start here and say 5, okay?\n\n184\n00:11:30.191 --> 00:11:35.150\nThat is the same as the length of numbers,\nright?\n\n185\n00:11:35.150 --> 00:11:37.280\nThere are five elements here.\n\n186\n00:11:37.280 --> 00:11:38.866\nSo I'm gonna comment this\nout just temporarily,\n\n187\n00:11:38.866 --> 00:11:40.196\nwe're gonna leave that for comparison.\n\n188\n00:11:44.064 --> 00:11:50.233\nAnd in python3, you might actually have\nto run something, invalid syntax and\n\n189\n00:11:50.233 --> 00:11:55.770\nthat is because I have forgot to take\nthat extra parentheses off there.\n\n190\n00:11:56.960 --> 00:11:59.320\nAnother key thing there.\n\n191\n00:11:59.320 --> 00:12:02.286\nSo for_loops and 2, 3, 4, 5.\n\n192\n00:12:02.286 --> 00:12:06.928\nWell, you're going about your business and\nyou're like, you know what,\n\n193\n00:12:06.928 --> 00:12:10.203\nactually it is 5 elements,\nI need to go one beyond that,\n\n194\n00:12:10.203 --> 00:12:12.890\nyou get mixed up and\nyou put a 6 there, right?\n\n195\n00:12:14.040 --> 00:12:19.368\nYou go to rerun it again and everything is\nrunning and you're like, this is great,\n\n196\n00:12:19.368 --> 00:12:23.917\nindex error: list index out of range,\nthis can happen using this method.\n\n197\n00:12:25.828 --> 00:12:30.850\nI've somehow deleted my previous for\nloop, there we go.\n\n198\n00:12:30.850 --> 00:12:33.740\nSo get rid of that,\nget rid of that, there we go.\n\n199\n00:12:33.740 --> 00:12:35.490\nThat will never happen here.\n\n200\n00:12:35.490 --> 00:12:38.409\nI can never go outside\nthe bounds of the collection.\n\n201\n00:12:39.920 --> 00:12:44.800\nBut if I ever need to look at\nthis number and one ahead or\n\n202\n00:12:44.800 --> 00:12:49.990\none behind, you will have to use the index\nand that's just how things work.\n\n203\n00:12:49.990 --> 00:12:52.110\nSo I do want to show you that.\n\n204\n00:12:52.110 --> 00:12:56.740\nTypically, if you want to run\nthe full length, then the second\n\n205\n00:12:56.740 --> 00:13:01.070\nargument is gonna be the left of\nthe interval that you're iterating over.\n\n206\n00:13:01.070 --> 00:13:04.894\nThis range is just gonna give you a range\nof numbers, from the beginning to the end.\n\n207\n00:13:04.894 --> 00:13:11.404\nAnd if I wanna get every other one,\nthen I can put 2, 3, whatever it may be.\n\n208\n00:13:11.404 --> 00:13:16.681\nAnd just to show you that, 2 ,4,\nbecause I started at 1 and\n\n209\n00:13:16.681 --> 00:13:19.825\nI went not 3 but 4, grab that one and\n\n210\n00:13:19.825 --> 00:13:24.360\nthen I was at the end, so\nyou gotta be careful there.\n\n211\n00:13:24.360 --> 00:13:26.332\nThese are typically the two types of for\n\n212\n00:13:26.332 --> 00:13:29.213\nloops that you will see when\nyou're first starting out.\n\n213\n00:13:29.213 --> 00:13:34.410\nThere are some other ways, but I would get\ncomfortable with this, at least initially.\n\n214\n00:13:34.410 --> 00:13:36.160\nNow this is just for list.\n\n215\n00:13:36.160 --> 00:13:38.990\nBefore I go on, though,\nI see Vonne out of the corner of my eye.\n\n216\n00:13:38.990 --> 00:13:39.840\nShe's just itching.\n\n217\n00:13:39.840 --> 00:13:41.180\nShe's got a question for me.\n\n218\n00:13:41.180 --> 00:13:44.747\n&gt;&gt; No, it was really more of\nan observation like this,\n\n219\n00:13:44.747 --> 00:13:47.990\nthat second way that\nyou're just explaining,\n\n220\n00:13:47.990 --> 00:13:53.520\nthis is more of how I remember learning\nloops in other languages besides Python.\n\n221\n00:13:53.520 --> 00:13:57.250\nAnd I kind of wish I would have started\nwith Python cuz this makes a lot\n\n222\n00:13:57.250 --> 00:13:58.020\nmore sense.\n\n223\n00:13:58.020 --> 00:14:02.174\nBut like you said there are reasons why\nyou would have to write it out the way\n\n224\n00:14:02.174 --> 00:14:07.065\nthat you're doing because again, there are\nuse case scenarios for all of this stuff,\n\n225\n00:14:07.065 --> 00:14:10.691\nbut yeah, that first one I was like,\ngosh it's so much easier.\n\n226\n00:14:10.691 --> 00:14:13.690\n[LAUGH] So that's all I wanted to say.\n\n227\n00:14:13.690 --> 00:14:14.310\n&gt;&gt; Well, all right.\n\n228\n00:14:14.310 --> 00:14:17.580\nWell, made me feel good about myself,\nthat's even better than a question.\n\n229\n00:14:17.580 --> 00:14:21.307\nBut feel good about me and\nI had nothing to do with this,\n\n230\n00:14:21.307 --> 00:14:23.586\nI'm just showing you the stuff.\n\n231\n00:14:23.586 --> 00:14:26.470\nSo we looked at a list.\n\n232\n00:14:26.470 --> 00:14:28.975\nA list makes sense, that's probably\none of the first collection types.\n\n233\n00:14:28.975 --> 00:14:32.829\nBut actually let's look at some of the,\nI'm actually gonna skip\n\n234\n00:14:32.829 --> 00:14:37.290\nto the tuple because the tuple is,\nI don't have uniform data types.\n\n235\n00:14:37.290 --> 00:14:41.890\nSo iterating over that may not necessarily\nhave as much of a use case for\n\n236\n00:14:41.890 --> 00:14:46.030\niterating over that, but\nnonetheless, you may, right?\n\n237\n00:14:46.030 --> 00:14:51.060\nYou could just change this to a tuple\nby changing that to parenthesis.\n\n238\n00:14:51.060 --> 00:14:56.850\nBut let's go back, comment this out and\nchange this back here.\n\n239\n00:14:56.850 --> 00:15:00.910\nBut instead of numbers,\nlet's change this to user, all right?\n\n240\n00:15:00.910 --> 00:15:02.770\nLet's go see, do I get iteration?\n\n241\n00:15:03.900 --> 00:15:06.354\nDo I get iteration, Vonne Smith 23 pizza.\n\n242\n00:15:06.354 --> 00:15:10.180\nYep, now if you're trying to\nfind something in a tuple,\n\n243\n00:15:10.180 --> 00:15:14.440\nthis might be a, like hey,\nis Vonne in this tuple somewhere?\n\n244\n00:15:14.440 --> 00:15:16.876\nYou just go [SOUND] there it is,\nyep, yes or not, okay?\n\n245\n00:15:16.876 --> 00:15:19.511\nAnd there's other ways we\nsaw in the previous episode,\n\n246\n00:15:19.511 --> 00:15:22.380\nyou can just use the in keyword and\nit kinda does that for you.\n\n247\n00:15:23.800 --> 00:15:28.810\nSo that works, well, does the other one,\nthe other way, so to speak, work?\n\n248\n00:15:28.810 --> 00:15:33.165\nAnd I'm gonna change this to 0.\n\n249\n00:15:33.165 --> 00:15:39.070\nNow if I left this first argument out,\nthat actually defaults to 0.\n\n250\n00:15:39.070 --> 00:15:40.940\nSo, but I'm gonna be explicit here.\n\n251\n00:15:40.940 --> 00:15:44.374\nWe're starting at 0 and\nI want to start with user and\n\n252\n00:15:44.374 --> 00:15:46.960\nI'm gonna change this to user, okay?\n\n253\n00:15:48.080 --> 00:15:49.460\nLet's see, do I get the same result?\n\n254\n00:15:51.490 --> 00:15:52.260\nI do.\n\n255\n00:15:52.260 --> 00:15:53.768\nSo that works.\n\n256\n00:15:53.768 --> 00:15:57.318\nAll right, tuple's in the list,\nwe've seen they're very similar.\n\n257\n00:15:57.318 --> 00:16:00.142\nOne is mutable, one is immutable.\n\n258\n00:16:00.142 --> 00:16:04.268\nA word of warning though, if you're\naltering a list as your iterating through\n\n259\n00:16:04.268 --> 00:16:08.653\nit, your popping things out or removing,\nor deleting, you may get weird errors.\n\n260\n00:16:08.653 --> 00:16:12.910\nAnd you may actually go outside of bounds\nif you, like if I go to the next element.\n\n261\n00:16:12.910 --> 00:16:16.075\nAnd then, I delete the previous\nelement you may skip stuff,\n\n262\n00:16:16.075 --> 00:16:17.884\nyou get weird, so don't do that.\n\n263\n00:16:17.884 --> 00:16:20.053\nLet's try words, though, okay?\n\n264\n00:16:20.053 --> 00:16:21.410\nSo if we, what is words?\n\n265\n00:16:21.410 --> 00:16:27.656\nWords is a set, so here's words, words.\n\n266\n00:16:27.656 --> 00:16:33.114\n[SOUND] Is cheese good?\n\n267\n00:16:33.114 --> 00:16:35.230\nAll right, let's run it again.\n\n268\n00:16:35.230 --> 00:16:37.848\nCheese the is good, the good cheese is,\n\n269\n00:16:37.848 --> 00:16:43.238\nyou're gonna get different things because\na set, there's no order guaranteed,\n\n270\n00:16:43.238 --> 00:16:46.553\nyou may get different order each time,\nall right?\n\n271\n00:16:46.553 --> 00:16:50.532\nIt's especially true for strings and\nsome other things that can go in a set.\n\n272\n00:16:50.532 --> 00:16:56.541\nThe numbers, you may get more consistent,\ndo not rely on order of a set.\n\n273\n00:16:56.541 --> 00:17:00.305\nOkay, well you know what,\nyou're like okay,\n\n274\n00:17:00.305 --> 00:17:04.171\nI need the index,\nI need the first element of the set.\n\n275\n00:17:04.171 --> 00:17:11.522\nWell, you're like okay, so I'm gonna come\nhere and I'm gonna say words and words.\n\n276\n00:17:11.522 --> 00:17:15.821\nClear this out, and\nyou run it, and it's broke.\n\n277\n00:17:15.821 --> 00:17:19.669\nNow remember, I said at the beginning,\nto use this for loop,\n\n278\n00:17:19.669 --> 00:17:21.821\nyou have to make a consideration.\n\n279\n00:17:21.821 --> 00:17:26.752\nDo I have an index,\ncan I index this collection?\n\n280\n00:17:26.752 --> 00:17:30.360\nNo, a set does not have a zero,\none, two, three, four, index,\n\n281\n00:17:30.360 --> 00:17:34.113\nbecause order, the zeroed element,\nwill be different every time.\n\n282\n00:17:34.113 --> 00:17:36.692\nSo it goes, nope, that's not available.\n\n283\n00:17:36.692 --> 00:17:41.661\nSo, numbers, or tuples and lists,\nyou can do either for loop.\n\n284\n00:17:41.661 --> 00:17:46.712\nWords, you have the standard for\nloop, or excuse me, sets.\n\n285\n00:17:46.712 --> 00:17:50.792\nNow this final one, this final one.\n\n286\n00:17:50.792 --> 00:17:55.842\nLet's come down here, [SOUND] for\nloops and dictionaries.\n\n287\n00:17:55.842 --> 00:17:58.484\nThis is kind of foreboding.\n\n288\n00:17:58.484 --> 00:18:01.183\nSo I'm gonna comment this out.\n\n289\n00:18:01.183 --> 00:18:05.521\nAnd you go, okay, well, a dictionary\nis a collection of keys and values.\n\n290\n00:18:05.521 --> 00:18:06.373\nSo what can I do?\n\n291\n00:18:06.373 --> 00:18:12.899\nSo for, let's go element in foods,\n\n292\n00:18:12.899 --> 00:18:16.861\nprint, element, clear.\n\n293\n00:18:16.861 --> 00:18:21.215\n[SOUND] Pizza, onions,\n\n294\n00:18:21.215 --> 00:18:24.702\nolives, salami.\n\n295\n00:18:24.702 --> 00:18:27.861\nWhat a minute,\nwhat did I actually get here?\n\n296\n00:18:27.861 --> 00:18:36.892\nAnd this is where your dictionaries\ncan throw you for a loop.\n\n297\n00:18:36.892 --> 00:18:37.811\nSo to speak, that was not intentional.\n\n298\n00:18:37.811 --> 00:18:38.732\nI don't know, they can knock\nyou off kilter, so to speak.\n\n299\n00:18:38.732 --> 00:18:43.051\nIf you say for\nelement in a data dictionary,\n\n300\n00:18:43.051 --> 00:18:46.682\nyou will iterate over the keys only.\n\n301\n00:18:46.682 --> 00:18:48.221\nThe keys only.\n\n302\n00:18:48.221 --> 00:18:52.700\nSo matter of fact,\nit is exactly the same as saying .keys,\n\n303\n00:18:52.700 --> 00:18:56.742\nwhich is a method on a dictionary\nto get a list of keys.\n\n304\n00:18:56.742 --> 00:19:03.753\nSo if we rerun this, It's the same thing.\n\n305\n00:19:03.753 --> 00:19:06.932\nSo behind the scenes it\nkind of does that as well.\n\n306\n00:19:06.932 --> 00:19:10.229\nBut that's probably unexpected to you.\n\n307\n00:19:10.229 --> 00:19:14.742\n&gt;&gt; And this is going to be the case for\ndictionaries and loops all the time.\n\n308\n00:19:14.742 --> 00:19:17.683\nThere's no just like,\njust give me the values.\n\n309\n00:19:17.683 --> 00:19:23.973\nIt's only gonna give you the keys\nwhich ...useful, I guess?\n\n310\n00:19:23.973 --> 00:19:25.760\n&gt;&gt; It's funny that you say that.\n\n311\n00:19:25.760 --> 00:19:26.358\n&gt;&gt; Is it?\n\n312\n00:19:26.358 --> 00:19:27.056\n[LAUGH]\n&gt;&gt; Yes,\n\n313\n00:19:27.056 --> 00:19:30.727\nbecause dictionaries actually have some\nbuilt in methods that are meant for\n\n314\n00:19:30.727 --> 00:19:31.653\nuse in iteration.\n\n315\n00:19:31.653 --> 00:19:37.222\nYou ask about the values,\nokay, foods.values.\n\n316\n00:19:37.222 --> 00:19:38.802\nThere's a values.\n\n317\n00:19:38.802 --> 00:19:39.434\n&gt;&gt; You have a c in there.\n\n318\n00:19:39.434 --> 00:19:41.853\n&gt;&gt; There is it, I'll tell you what,\nwhere is that c coming from?\n\n319\n00:19:41.853 --> 00:19:43.421\nThat c is everywhere now.\n\n320\n00:19:43.421 --> 00:19:47.848\n&gt;&gt; And you're also always forgetting\nthe c when you clear the record or\n\n321\n00:19:47.848 --> 00:19:51.431\nit's always going,\nit's almost every single time.\n\n322\n00:19:51.431 --> 00:19:53.153\nSo you keep it there and\nputting it over there.\n\n323\n00:19:53.153 --> 00:19:56.768\n&gt;&gt; You know what I bet I'm doing, like as\nI'm selecting through I bet I start type,\n\n324\n00:19:56.768 --> 00:19:57.924\nlike I swipe and I type.\n\n325\n00:19:57.924 --> 00:19:58.451\n&gt;&gt; Yeah.\n&gt;&gt; And\n\n326\n00:19:58.451 --> 00:20:02.642\nbefore my desktop resets\nI bet there is a c there.\n\n327\n00:20:02.642 --> 00:20:04.673\n&gt;&gt; You're just too quick for\nyour own good there, Justin.\n\n328\n00:20:04.673 --> 00:20:05.751\n&gt;&gt; I know, Quick Draw McGraw.\n\n329\n00:20:05.751 --> 00:20:06.887\nI don't know.\n\n330\n00:20:06.887 --> 00:20:07.675\n&gt;&gt; [LAUGH]\n&gt;&gt; But for\n\n331\n00:20:07.675 --> 00:20:10.015\nelement in foods.values we did dot keys.\n\n332\n00:20:10.015 --> 00:20:12.281\nWithout the .keys we\nstill get the same thing.\n\n333\n00:20:12.281 --> 00:20:17.115\nAll right, so\nI'm going to rerun this, for_loop and\n\n334\n00:20:17.115 --> 00:20:20.383\nI'll actually just get the values.\n\n335\n00:20:20.383 --> 00:20:25.684\nYou're like, okay But, you have to\nbe careful because a lot of times,\n\n336\n00:20:25.684 --> 00:20:31.170\nreally what I wanna know is I wanna know\nthe key and its corresponding value.\n\n337\n00:20:31.170 --> 00:20:36.071\nSo you'll see,\ndictionaries actually do for key in foods,\n\n338\n00:20:36.071 --> 00:20:39.347\nand then you'll see value = foods key.\n\n339\n00:20:39.347 --> 00:20:40.562\nall right?\n\n340\n00:20:40.562 --> 00:20:41.992\nAnd you can kind of get away with it,\n\n341\n00:20:41.992 --> 00:20:45.063\nbecause it's always guaranteed to be\nthere, if it's there in iteration.\n\n342\n00:20:45.063 --> 00:20:48.343\nUnless you're changing\nthe dictionary as you're iterating.\n\n343\n00:20:48.343 --> 00:20:50.252\nSo be careful there.\n\n344\n00:20:50.252 --> 00:20:51.823\nAnd then, well, what do we get here?\n\n345\n00:20:51.823 --> 00:20:57.770\nWell, I'm gonna print the key and\nthe value.\n\n346\n00:20:57.770 --> 00:21:00.579\nSo instead of just going over the values,\n\n347\n00:21:00.579 --> 00:21:05.732\nI can get the values by using the key to\nretrieve the value in the dictionary.\n\n348\n00:21:05.732 --> 00:21:10.301\nThis is probably a lot more useful than\njust iterating over the values themselves.\n\n349\n00:21:10.301 --> 00:21:14.590\n&gt;&gt; Well, I could see where you,\nyou might only want the keys, so\n\n350\n00:21:14.590 --> 00:21:19.143\nI don't know, I'm feeling like\nthat could be handy somewhere.\n\n351\n00:21:19.143 --> 00:21:22.816\nI don't know where just yet,\nbut I feel it could be or\n\n352\n00:21:22.816 --> 00:21:27.922\nmaybe not the values as much as the keys,\nbut then both of them together.\n\n353\n00:21:27.922 --> 00:21:31.093\nThere's a reason why they put this there,\nand\n\n354\n00:21:31.093 --> 00:21:34.521\ni can kinda feel like\nthere's specific reasons.\n\n355\n00:21:34.521 --> 00:21:40.148\n&gt;&gt; Well, you better bucket up Vonne\ncuz tere's one thing that I've kind of\n\n356\n00:21:40.148 --> 00:21:45.499\nlet slide over these last few episodes\nwhen we talked about tuples and\n\n357\n00:21:45.499 --> 00:21:47.821\nlists and things with order.\n\n358\n00:21:47.821 --> 00:21:51.779\nAnd I'm gonna hop into the repo real\nquick, cause you may need keys,\n\n359\n00:21:51.779 --> 00:21:54.793\nyou may need values, but\nyou may need both, right.\n\n360\n00:21:54.793 --> 00:21:59.963\nAnd this doesn't seem like a lot\nright here, value = foods keys.\n\n361\n00:21:59.963 --> 00:22:02.347\nBut sometimes it get annoying and\n\n362\n00:22:02.347 --> 00:22:06.191\nmaybe you don't always want\nto have to remember all.\n\n363\n00:22:06.191 --> 00:22:10.742\nI need to add the value as\na look up from the dictionary.\n\n364\n00:22:10.742 --> 00:22:13.101\nSo I'm gonna hop in with the repo,\nI'm gonna clear this out.\n\n365\n00:22:13.101 --> 00:22:18.232\nAnd I'm just gonna say, dict but\n\n366\n00:22:18.232 --> 00:22:24.465\nwe say pizza=True, onions=False and\n\n367\n00:22:24.465 --> 00:22:28.323\nthere's a dictionary.\n\n368\n00:22:28.323 --> 00:22:34.263\nIf I remember correctly there's\nthis items, items all right.\n\n369\n00:22:34.263 --> 00:22:38.487\nSo if I do x.keys, I get just the keys but\n\n370\n00:22:38.487 --> 00:22:42.851\nif I do x.values And get just the values.\n\n371\n00:22:42.851 --> 00:22:47.702\nIf I do items, then I actually\nget a list for all intents and\n\n372\n00:22:47.702 --> 00:22:51.761\npurposes of tuples of pairs\nof a key in the value.\n\n373\n00:22:51.761 --> 00:22:53.801\nYou get the key and\nthe value at the same time.\n\n374\n00:22:53.801 --> 00:22:58.631\nFull disclosure, in Python II there\nwas an items and an inner items.\n\n375\n00:22:58.631 --> 00:23:02.213\nAnd the reason being,\nif the dictionary was really large.\n\n376\n00:23:02.213 --> 00:23:07.262\nThis time's ended up being giant,\nand can cause some memory issues.\n\n377\n00:23:07.262 --> 00:23:11.617\nIn Python, it's always items.\n\n378\n00:23:11.617 --> 00:23:13.849\nExcuse me, in Python 3.\n\n379\n00:23:13.849 --> 00:23:20.971\nSee this, this tuple,\nsomething that I left out, all right?\n\n380\n00:23:20.971 --> 00:23:22.493\nLet's create a tuple.\n\n381\n00:23:22.493 --> 00:23:26.629\nSo, let's say user,\n\n382\n00:23:26.629 --> 00:23:30.121\nIs Vonne, Smith.\n\n383\n00:23:30.121 --> 00:23:32.911\nIt has an order, right?\n\n384\n00:23:32.911 --> 00:23:37.752\nIf I wanted the first name to be\nuser bracket zero, I could do that,\n\n385\n00:23:37.752 --> 00:23:39.144\nand the last name.\n\n386\n00:23:39.144 --> 00:23:40.004\nDo you know what?\n\n387\n00:23:40.004 --> 00:23:43.212\nI'm gonna actually do\nsomething called unpacking.\n\n388\n00:23:43.212 --> 00:23:48.069\nThis has two elements, So,\n\n389\n00:23:48.069 --> 00:23:50.858\nfirst comma last equals user.\n\n390\n00:23:50.858 --> 00:23:54.240\n[SOUND] You have to spell it correctly,\n\n391\n00:23:59.380 --> 00:24:03.253\nThe reason I didn't show you this is\nthere wasn't really a use for it,\n\n392\n00:24:03.253 --> 00:24:05.301\nat the time for tunnels, all right?\n\n393\n00:24:05.301 --> 00:24:07.431\nYou're like, that's kind of neat.\n\n394\n00:24:07.431 --> 00:24:12.162\nWhat it does, is it takes variable and\nassigns it the first thing.\n\n395\n00:24:12.162 --> 00:24:15.351\nIt does like a pattern,\nthis first thing is this first thing.\n\n396\n00:24:15.351 --> 00:24:18.251\nThis second thing is this second thing.\n\n397\n00:24:18.251 --> 00:24:22.373\nHowever, you gotta be careful,\n\n398\n00:24:22.373 --> 00:24:26.061\nif I did f, l, other = user.\n\n399\n00:24:26.061 --> 00:24:30.909\nThen you'll get, if you don't have\nexactly the right amount of values, or\n\n400\n00:24:30.909 --> 00:24:32.890\nvariables to unpack, right?\n\n401\n00:24:32.890 --> 00:24:37.904\nOne to one, then you get issues,\nbut keep that in mind,\n\n402\n00:24:37.904 --> 00:24:41.331\nbecause I've just showed you items.\n\n403\n00:24:41.331 --> 00:24:48.241\nI'm gonna get rid of this and\ngonna say item, okay?\n\n404\n00:24:48.241 --> 00:24:52.381\nFor items and foods dot items, clear out.\n\n405\n00:24:54.991 --> 00:24:59.151\nPizza, true, onions, false,\n\n406\n00:24:59.151 --> 00:25:03.465\nolives, false, salami, true.\n\n407\n00:25:03.465 --> 00:25:07.641\nBut really, I wanna key and\nthe value at the same time.\n\n408\n00:25:07.641 --> 00:25:10.431\nBut I want them to be\nin different variables.\n\n409\n00:25:10.431 --> 00:25:15.173\nSo, if I know items is gonna give me\npairs, in the first part of items, which\n\n410\n00:25:15.173 --> 00:25:20.448\nin this case, would be pizza, will be the\nkey, and the second part, will be value.\n\n411\n00:25:20.448 --> 00:25:26.573\nSo, now I'm going to go key,\nvalue like so.\n\n412\n00:25:26.573 --> 00:25:31.139\nAnd, pizza true, onions false,\nolives false, salami true.\n\n413\n00:25:31.139 --> 00:25:36.735\nI get the same thing as having this,\nexcept,\n\n414\n00:25:36.735 --> 00:25:43.970\nI get to use what is called\nTuple Unpacking, in this case.\n\n415\n00:25:43.970 --> 00:25:47.873\nSo, if I'm iterating\nover a list of tuples,\n\n416\n00:25:47.873 --> 00:25:52.310\nI can unpack the tuple into\nits individual pieces.\n\n417\n00:25:52.310 --> 00:25:54.461\nSo the key is the first\nelement of the tuple.\n\n418\n00:25:54.461 --> 00:25:56.590\nThe value is the second\nelement of the tuple.\n\n419\n00:25:56.590 --> 00:26:03.252\nAnd on items, call will always give you\na tuple of two elements, all right?\n\n420\n00:26:03.252 --> 00:26:05.722\nSo, I don't need this,\nand it shortens that up.\n\n421\n00:26:05.722 --> 00:26:09.685\nAnd now, if I need just the value,\nI can use just the value,\n\n422\n00:26:09.685 --> 00:26:12.713\nif I need just the key,\nI can use just the key.\n\n423\n00:26:12.713 --> 00:26:16.251\nI don't really have to\ndo all this machination,\n\n424\n00:26:16.251 --> 00:26:20.410\nI just call .items or t,\nvalue in foods.items, boom.\n\n425\n00:26:20.410 --> 00:26:24.506\nAnd I know you're probably angry at me for\nnot showing you Tuple Unpacking,\n\n426\n00:26:24.506 --> 00:26:25.280\noriginally.\n\n427\n00:26:25.280 --> 00:26:30.469\nBut it just didn't have a use case,\nnecessarily, at the very particular time.\n\n428\n00:26:30.469 --> 00:26:34.182\nBut now,\nyou'll see this a lot in Pythonic code.\n\n429\n00:26:34.182 --> 00:26:37.140\nTuple Unpacking is what\nmakes this possible.\n\n430\n00:26:37.140 --> 00:26:39.521\n&gt;&gt; To me,\nit's just like you're adding a hetero.\n\n431\n00:26:39.521 --> 00:26:44.528\nYou're actually claiming it in a really,\nI don't wanna say easy, but\n\n432\n00:26:44.528 --> 00:26:49.380\na very slick way of doing it,\nlike, okay, well, there you go.\n\n433\n00:26:49.380 --> 00:26:51.400\nNow That makes total sense.\n\n434\n00:26:51.400 --> 00:26:54.755\n&gt;&gt; It does make sense, it takes\na little while to read through it, so\n\n435\n00:26:54.755 --> 00:26:55.740\nbe careful there.\n\n436\n00:26:55.740 --> 00:26:58.010\nYou can get into trouble\nwith Tuple Unpacking.\n\n437\n00:26:58.010 --> 00:27:00.471\nList will actually let you\nunpack that way as well.\n\n438\n00:27:00.471 --> 00:27:02.692\nSo, if I have a list of two elements,\n\n439\n00:27:02.692 --> 00:27:06.440\nI could assign variables to\nthe values of those two elements.\n\n440\n00:27:06.440 --> 00:27:10.254\nI write Python code like this, but\nwhen you're first starting out,\n\n441\n00:27:10.254 --> 00:27:14.481\njust keep in mind, if you see a comma\non the left-hand side with variables.\n\n442\n00:27:14.481 --> 00:27:15.908\nYou probably have a tuple or\n\n443\n00:27:15.908 --> 00:27:19.581\na list with a corresponding number\nof values on the right-hand side.\n\n444\n00:27:19.581 --> 00:27:22.520\nIt shows up a great deal in four-loops.\n\n445\n00:27:22.520 --> 00:27:25.602\n&gt;&gt; I say, it makes perfect sense\nbecause you're explaining it to me.\n\n446\n00:27:25.602 --> 00:27:28.931\nAnd I'm like, yeah, I get it,\nif you walk out this room and\n\n447\n00:27:28.931 --> 00:27:30.980\nyou said, tell me exactly what I said?\n\n448\n00:27:30.980 --> 00:27:32.862\nI'm like, nope, I have no idea.\n\n449\n00:27:32.862 --> 00:27:36.612\nSo I'm getting it as I'm absorbing now.\n\n450\n00:27:36.612 --> 00:27:41.721\nSo, that's where, don't be mad, I'm like,\nno, I wasn't ready for that yet.\n\n451\n00:27:41.721 --> 00:27:45.411\nI needed it kinda let it sink in, and\ngo through a couple more examples,\n\n452\n00:27:45.411 --> 00:27:48.810\nthroughout the series,\nbefore I could actually understand it.\n\n453\n00:27:48.810 --> 00:27:53.339\nWe've talked about this, like,\nyou purposely don't say things sometimes.\n\n454\n00:27:53.339 --> 00:27:58.072\nJust because, it would actually cloud the,\nmuddy the waters a little bit too much.\n\n455\n00:27:58.072 --> 00:27:59.701\nIt's like I don't want to\nget too hung up on this.\n\n456\n00:27:59.701 --> 00:28:02.271\nSo, I appreciate it, thank you.\n\n457\n00:28:02.271 --> 00:28:03.819\n&gt;&gt; Well, hopefully it all works out,\n\n458\n00:28:03.819 --> 00:28:05.993\nbecause this construct\nwill continue to crop up.\n\n459\n00:28:05.993 --> 00:28:09.841\nBecause there are other things\nthat we can do with four-loops.\n\n460\n00:28:09.841 --> 00:28:12.745\nNow quick reminder, tuples and\nlists have an index, and\n\n461\n00:28:12.745 --> 00:28:15.174\ncan be used with both\nversions of four-loops.\n\n462\n00:28:15.174 --> 00:28:18.060\nSo, if we need to start at the first one,\nthat's good.\n\n463\n00:28:18.060 --> 00:28:20.392\nAn alternative to that,\nis just to slice those up and\n\n464\n00:28:20.392 --> 00:28:23.470\nsay, give me one through blah blah,\nand iterate only through that.\n\n465\n00:28:23.470 --> 00:28:25.912\nSo you don't actually\nneed the range function.\n\n466\n00:28:25.912 --> 00:28:27.321\nBut you will see people\nwho write code with that.\n\n467\n00:28:27.321 --> 00:28:30.935\nEspecially, if they already knew\nprogramming from another language, and\n\n468\n00:28:30.935 --> 00:28:32.352\nare now writing Python code.\n\n469\n00:28:32.352 --> 00:28:35.078\nSets, they don't have an order,\n\n470\n00:28:35.078 --> 00:28:40.072\nyou only get to use the Pythonic for\nthe element in collection.\n\n471\n00:28:40.072 --> 00:28:43.637\nDictionaries, you get keys,\nyou get values,, or\n\n472\n00:28:43.637 --> 00:28:45.992\nyou get them both at the same time.\n\n473\n00:28:45.992 --> 00:28:49.571\nYou keep that in mind, that construct\nwill continue to come back up.\n\n474\n00:28:49.571 --> 00:28:51.480\nIt makes your code a lot cleaner.\n\n475\n00:28:51.480 --> 00:28:53.531\nI argue it makes it more readable.\n\n476\n00:28:53.531 --> 00:28:58.298\nBut I did keep it from you how\nthat worked, intentionally.\n\n477\n00:28:58.298 --> 00:29:03.118\nBut, we'll see more of it, and\nhopefully, it will start to see, yeah,\n\n478\n00:29:03.118 --> 00:29:06.861\nthat, that it does make things clean and\na little bit nicer.\n\n479\n00:29:06.861 --> 00:29:08.325\nJust take some getting used to them.\n\n480\n00:29:08.325 --> 00:29:09.678\n&gt;&gt; All right, well,\n\n481\n00:29:09.678 --> 00:29:14.675\nI know four-loops are very import\npart of any programming language.\n\n482\n00:29:14.675 --> 00:29:19.208\nAnd I notice, we will come back around\nagain, and we'll keep seeing this over,\n\n483\n00:29:19.208 --> 00:29:20.416\nand over, and over.\n\n484\n00:29:20.416 --> 00:29:24.191\n[LAUGH] Exactly, but thank you so\nmuch for that explanation into that.\n\n485\n00:29:24.191 --> 00:29:26.611\nBut for now, we're gonna go ahead and\nwrap this one up.\n\n486\n00:29:26.611 --> 00:29:29.720\nSo signing off for DevProTV,\nI've been your host Vonne Smith.\n\n487\n00:29:29.720 --> 00:29:30.444\n&gt;&gt; And I'm Justin Dennison.\n\n488\n00:29:30.444 --> 00:29:31.940\n&gt;&gt; And we'll see you soon.\n\n489\n00:29:31.940 --> 00:29:36.398\n[MUSIC]\n\n",
          "vimeoId": "268614545"
        },
        {
          "description": "In this episode, Justin and Vonne discuss a different loop, the while loop. Justin explores some of the differences as well as highlights some other uses for the while loop.",
          "length": "1307",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-3-1-while_loops-050818-PGM.00_24_33_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-3-1-while_loops-050818-PGM.00_24_33_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-3-1-while_loops-050818-PGM.00_24_33_29.Still001-sm.jpg",
          "title": "While Loops",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.023 --> 00:00:17.071\nHello everyone, and welcome back to\nanother exciting edition of DevPro.TV.\n\n3\n00:00:17.071 --> 00:00:20.834\nI'm your host Vonne Smith and we're coming\nback at you with more in our programming\n\n4\n00:00:20.834 --> 00:00:24.791\nfundamentals series and in this episode,\nwe're gonna be talking about while loops.\n\n5\n00:00:24.791 --> 00:00:26.911\nAnd here to help us is Mr.\nJustin Dennison.\n\n6\n00:00:26.911 --> 00:00:29.020\nHow are you today?\n&gt;&gt; I'm doing fantastic, Vonne.\n\n7\n00:00:29.020 --> 00:00:30.850\nHow are you?\n&gt;&gt; I'm doing pretty good.\n\n8\n00:00:30.850 --> 00:00:35.560\nSo while loops, we've done some loops,\nare we doing another loop?\n\n9\n00:00:35.560 --> 00:00:37.850\nWhere are we?\n&gt;&gt; We are doing another loop and\n\n10\n00:00:37.850 --> 00:00:39.960\nthis one has some interesting play.\n\n11\n00:00:39.960 --> 00:00:42.050\nI'm actually gonna show you,\njust as a quick review,\n\n12\n00:00:43.350 --> 00:00:48.000\npretty much anything you\ncan do with an index.\n\n13\n00:00:48.000 --> 00:00:52.430\nWe saw that in the for loop,\nwe can do them also with the while loop.\n\n14\n00:00:52.430 --> 00:00:57.730\nThere's one other use case, more or\nless anything you can do with a for\n\n15\n00:00:57.730 --> 00:01:00.480\nloop, you can do with the while\nloop except one thing.\n\n16\n00:01:00.480 --> 00:01:05.020\nAnd that's if you intentionally\nwanted to have an infinite loop,\n\n17\n00:01:05.020 --> 00:01:10.260\nI wanna loop forever and you're going,\nwhy would you wanna loop forever?\n\n18\n00:01:10.260 --> 00:01:13.280\nWell actually,\nif you've ever played a game, right?\n\n19\n00:01:13.280 --> 00:01:16.010\nA video game or whatever it may be,\nwhen you click start,\n\n20\n00:01:17.130 --> 00:01:20.810\nwhat's happening is that game is\nnow in what's called a game loop.\n\n21\n00:01:20.810 --> 00:01:25.830\nIt is infinitely looping through and\nprocessing your interactions.\n\n22\n00:01:25.830 --> 00:01:27.690\nIt goes, you pressed a button.\n\n23\n00:01:27.690 --> 00:01:29.360\nCool, I'm gonna do this.\n\n24\n00:01:29.360 --> 00:01:31.730\nCome back around,\nyou press another button.\n\n25\n00:01:31.730 --> 00:01:33.170\nCool, I'm gonna do this.\n\n26\n00:01:33.170 --> 00:01:36.312\nSo that is the one kind of edge case.\n\n27\n00:01:36.312 --> 00:01:39.729\nNow it's, I typically don't\nuse while loops, except for\n\n28\n00:01:39.729 --> 00:01:41.377\nthat one particular thing.\n\n29\n00:01:41.377 --> 00:01:45.705\nAnd I see Vonne kinda looking at me\nsideways going, I don't know how that,\n\n30\n00:01:45.705 --> 00:01:50.104\nwe're actually gonna build a game loop\nbecause I'm gonna show you how it can\n\n31\n00:01:50.104 --> 00:01:52.530\ncause issues when things kind of happen.\n\n32\n00:01:53.760 --> 00:01:57.302\nI'm intentionally might break my computer.\n\n33\n00:01:57.302 --> 00:02:01.477\nBut I'm also gonna show you a comparison\nof how to accomplish the exact the same\n\n34\n00:02:01.477 --> 00:02:03.572\nthing using a for loop and a while loop.\n\n35\n00:02:03.572 --> 00:02:07.458\nLike or instance, I wanna grab\nevery element from a list, and\n\n36\n00:02:07.458 --> 00:02:11.655\nthen I wanna do something with that.\n&gt;&gt; Sorry, quick question.\n\n37\n00:02:11.655 --> 00:02:17.571\nSo with the four loop, okay, for\nhowever many there are, just keep going.\n\n38\n00:02:17.571 --> 00:02:20.970\nSo there was like one, two, three,\nfour, five, and then it stopped.\n\n39\n00:02:20.970 --> 00:02:23.700\nThe while,\nas soon as you call the while loop,\n\n40\n00:02:23.700 --> 00:02:26.851\nit's just gonna keep going\nuntil you tell it to stop?\n\n41\n00:02:26.851 --> 00:02:33.221\nIs keep going until I say\nyou find this and then stop.\n\n42\n00:02:33.221 --> 00:02:36.631\nIs that how like the fundamental\ndifference is between for\n\n43\n00:02:36.631 --> 00:02:38.727\nand while loops?\n&gt;&gt; Yes, so\n\n44\n00:02:38.727 --> 00:02:42.620\nfor is some number for,\nsome number of times.\n\n45\n00:02:43.700 --> 00:02:50.130\nA while is, while something is true,\ndo this thing, otherwise stop.\n\n46\n00:02:50.130 --> 00:02:51.260\nSo that's kind of our condition.\n\n47\n00:02:51.260 --> 00:02:54.090\nSo here's a rule of thumb.\n\n48\n00:02:54.090 --> 00:02:56.890\nIf you don't know how long\nsomething is gonna take or\n\n49\n00:02:56.890 --> 00:03:02.380\nhow many things you need to process,\na while loop might be your best option.\n\n50\n00:03:02.380 --> 00:03:04.800\nIf you're like,\nI have a list of 10,000 elements and\n\n51\n00:03:04.800 --> 00:03:07.250\nI need to loop through every one of them,\nfor loop.\n\n52\n00:03:08.840 --> 00:03:11.610\nCan you use one where the other?.\n\n53\n00:03:11.610 --> 00:03:15.060\nYeah, except for\nthat infinite loop thing, okay?\n\n54\n00:03:15.060 --> 00:03:20.614\nSo what I mean is, can I iterate over\n10,000 things using a while loop?.\n\n55\n00:03:20.614 --> 00:03:24.482\nI sure can and that's actually we're\ngonna start because we're gonna take\n\n56\n00:03:24.482 --> 00:03:26.839\na four loop that we saw\nin a previous episode and\n\n57\n00:03:26.839 --> 00:03:29.932\nkinda use that to jump into\na while loop just for comparison.\n\n58\n00:03:29.932 --> 00:03:33.196\nBut as I said, I use a while loop\nonly in particular cases and\n\n59\n00:03:33.196 --> 00:03:36.474\nmost of the time the default in\nPython is using the for loop.\n\n60\n00:03:36.474 --> 00:03:40.995\nSo let's go ahead and take a look at the\nscreen here and I have the same programing\n\n61\n00:03:40.995 --> 00:03:45.332\nfundamentals folder open, I have\nthe same terminal session open, right?\n\n62\n00:03:45.332 --> 00:03:49.232\nWe're in that same folder.\n\n63\n00:03:49.232 --> 00:03:53.046\nLet's go ahead and say while_loop.py.\n\n64\n00:03:53.046 --> 00:03:56.895\nSo we're gonna touch that and\nthere's my while_loop.py.\n\n65\n00:03:56.895 --> 00:03:58.520\nWe're gonna hop back over here.\n\n66\n00:03:58.520 --> 00:04:04.070\nLet's open it up, and let's close\nthis side here and get rid of this.\n\n67\n00:04:04.070 --> 00:04:09.600\nNow, let's look at numbers 1, 2, 3, 4, 5.\n\n68\n00:04:09.600 --> 00:04:15.000\nNow, if you had a tuple this would work,\nokay?\n\n69\n00:04:15.000 --> 00:04:18.420\nIf you had a set, or\n\n70\n00:04:18.420 --> 00:04:23.220\na dictionary, might get a little\niffy because they're not indexed.\n\n71\n00:04:23.220 --> 00:04:27.690\nYou have to have some way to\ngo through an index all right?\n\n72\n00:04:28.930 --> 00:04:33.601\nSo this only works for\nindexable collections.\n\n73\n00:04:33.601 --> 00:04:39.114\nBut a for loop and a while loop\nboth can accomplish the same feat.\n\n74\n00:04:39.114 --> 00:04:42.164\nSo, if we wanted to print out\nall the numbers in the number,\n\n75\n00:04:42.164 --> 00:04:44.610\neach number in the number collection,\nright?\n\n76\n00:04:44.610 --> 00:04:45.788\nNumbers, 1, 2, 3, 4, 5.\n\n77\n00:04:45.788 --> 00:04:47.903\nHow would I do that with a for loop.\n\n78\n00:04:47.903 --> 00:04:53.555\nWell, I'm gonna say for\nelement in numbers.\n\n79\n00:04:53.555 --> 00:04:55.618\nThen print the element, right?\n\n80\n00:04:55.618 --> 00:04:56.360\nOkay.\n\n81\n00:04:56.360 --> 00:04:59.192\nThere was also an alternative way.\n\n82\n00:04:59.192 --> 00:05:03.643\nWhere, instead of that it was\na little more convoluted,\n\n83\n00:05:03.643 --> 00:05:08.664\nwe can say for the index in the range\nof the length of the numbers.\n\n84\n00:05:08.664 --> 00:05:10.297\nAnd let's start at 0,\n\n85\n00:05:10.297 --> 00:05:15.127\nwe're gonna start at 0 because I do\nwant to go the entire collection.\n\n86\n00:05:15.127 --> 00:05:19.612\nAnd I could say print, or excuse me,\n\n87\n00:05:19.612 --> 00:05:24.535\nelement equals numbers for the index and\n\n88\n00:05:24.535 --> 00:05:28.760\nthen print the index, all right?\n\n89\n00:05:28.760 --> 00:05:32.820\nExcuse me, not the index,\nthe element, my goodness.\n\n90\n00:05:32.820 --> 00:05:34.450\nThere we go, so there's our element.\n\n91\n00:05:34.450 --> 00:05:38.575\nLet's make sure this works, just make\nsure I'm not lying and you're like,\n\n92\n00:05:38.575 --> 00:05:40.865\nwell hold on Justin this is still for\nloop.\n\n93\n00:05:40.865 --> 00:05:41.667\nYou're right.\n\n94\n00:05:41.667 --> 00:05:42.272\nBut now,\n\n95\n00:05:42.272 --> 00:05:47.910\nI can accomplish this exact same thing\nwhere I have the index with a while loop.\n\n96\n00:05:47.910 --> 00:05:50.170\nThere are a few gotchyas.\n\n97\n00:05:50.170 --> 00:05:54.510\nI am guaranteed to go from zero to\nthe length of the collection and\n\n98\n00:05:54.510 --> 00:05:56.510\nno more, no less.\n\n99\n00:05:56.510 --> 00:05:58.670\nThat's how a for loop works.\n\n100\n00:05:58.670 --> 00:06:02.260\nBut now let's see how I\ncan use a while loop.\n\n101\n00:06:02.260 --> 00:06:05.910\nSo, while something is true,\nwell what is that something?\n\n102\n00:06:06.950 --> 00:06:09.328\nSo let's see here.\n\n103\n00:06:09.328 --> 00:06:13.920\nI'm going to\n\n104\n00:06:13.920 --> 00:06:18.900\nsay index, I'm going to reuse\nthat variable, all right?\n\n105\n00:06:18.900 --> 00:06:20.370\nSo the index where do I want to start?\n\n106\n00:06:20.370 --> 00:06:23.780\nI want to start at the first\nelement of the collection.\n\n107\n00:06:24.810 --> 00:06:25.800\nJust like I did here.\n\n108\n00:06:25.800 --> 00:06:30.280\nSo, I'm starting at 0 and you'll see\nhow I use this in just a moment.\n\n109\n00:06:30.280 --> 00:06:37.290\nI also wanna know the numbers_length and\nlen of numbers.\n\n110\n00:06:37.290 --> 00:06:38.780\nNow, I'm just doing that.\n\n111\n00:06:38.780 --> 00:06:43.501\nJust storing it in a variable so you can\nget rid of some function calls here.\n\n112\n00:06:43.501 --> 00:06:48.354\nAnd now, I'm gonna say while,\nwell while what?\n\n113\n00:06:48.354 --> 00:06:56.480\nWhile the index is less\nthan numbers length, colon.\n\n114\n00:06:56.480 --> 00:07:02.073\nSo let's compare this for\nthe index in sum collection,\n\n115\n00:07:02.073 --> 00:07:06.601\nthis, is going to evaluate to true or\nfalse.\n\n116\n00:07:06.601 --> 00:07:09.527\nIs 0 less than, how many are in numbers?\n\n117\n00:07:09.527 --> 00:07:10.203\n5.\n\n118\n00:07:10.203 --> 00:07:12.360\nYes, 0 is less than 5.\n\n119\n00:07:12.360 --> 00:07:16.610\nSo, while this is true, do something.\n\n120\n00:07:16.610 --> 00:07:20.210\nAs soon as it turns to false, stop.\n\n121\n00:07:20.210 --> 00:07:21.450\nOkay?\n\n122\n00:07:21.450 --> 00:07:22.830\nSo it is a true or false.\n\n123\n00:07:22.830 --> 00:07:26.450\nYou could almost think of it\nas if I put an if, right?\n\n124\n00:07:26.450 --> 00:07:30.520\nIf this is true do this thing,\nif it's not don't do this thing.\n\n125\n00:07:30.520 --> 00:07:35.858\nWell a while is very similar except\nwhen it reaches the bottom it doesn't\n\n126\n00:07:35.858 --> 00:07:40.772\ncontinue on in the rest of the program,\nit comes back to this line.\n\n127\n00:07:40.772 --> 00:07:43.053\nAnd does it again, okay?\n\n128\n00:07:43.053 --> 00:07:45.620\nNow I'm gonna write it correctly and\nthen I'm gonna show you how it can break.\n\n129\n00:07:46.650 --> 00:07:47.569\nSo what do I wanna do?\n\n130\n00:07:47.569 --> 00:07:51.638\nI wanna grab the element and\nthat's from numbers index,\n\n131\n00:07:51.638 --> 00:07:55.451\nI'm gonna print the element,\nand then a while loop,\n\n132\n00:07:55.451 --> 00:08:01.417\nhere's the tricky part, You have to think,\nwell when does this loop in?\n\n133\n00:08:01.417 --> 00:08:05.449\nWell when it gets to the last number,\nwhen is this loop in?\n\n134\n00:08:05.449 --> 00:08:07.730\nWhen index is less than numbers length.\n\n135\n00:08:07.730 --> 00:08:10.260\nWell index is zero,\nnumbers length is five.\n\n136\n00:08:11.490 --> 00:08:13.020\nWhen is zero less than five?\n\n137\n00:08:13.020 --> 00:08:15.480\nAlways, it's always less than five.\n\n138\n00:08:16.620 --> 00:08:18.430\nYou have to modify.\n\n139\n00:08:20.260 --> 00:08:22.316\nIt can be by one, by two.\n\n140\n00:08:22.316 --> 00:08:29.280\nI'm changing this value\nat the end of the loop so\n\n141\n00:08:29.280 --> 00:08:34.850\nthat at some point this becomes false.\n\n142\n00:08:34.850 --> 00:08:38.640\nIf I don't then I end up\nwith an infinite loop, okay?\n\n143\n00:08:38.640 --> 00:08:40.380\nAnd you'll get weird behaviors.\n\n144\n00:08:40.380 --> 00:08:43.590\nThat may be what you want\nin some circumstances.\n\n145\n00:08:43.590 --> 00:08:47.840\nThat's probably not what you want if\nyou're just iterating to a collection.\n\n146\n00:08:47.840 --> 00:08:51.430\nSo let's see if this works and\nI could be wrong.\n\n147\n00:08:51.430 --> 00:08:55.020\nThis is the hiccup of while loop.\n\n148\n00:08:55.020 --> 00:08:58.760\nSometimes you still have\nthings that go wrong, and\n\n149\n00:08:58.760 --> 00:09:02.590\nI'm gonna comment this out just so\nwe can make sure they were\n\n150\n00:09:02.590 --> 00:09:07.560\ncomparing what we think we are or\nabsorbing what we think we are.\n\n151\n00:09:07.560 --> 00:09:09.160\nSo one, two, three, four, five.\n\n152\n00:09:09.160 --> 00:09:13.800\nWe get the exact same output as\nthe four loop and we have a while loop.\n\n153\n00:09:13.800 --> 00:09:18.740\nNow notice how I spend\na lot of time talking about\n\n154\n00:09:18.740 --> 00:09:22.110\nthis condition and this modification.\n\n155\n00:09:23.330 --> 00:09:27.360\nI'm gonna show you what happens if oops,\nI forgot to type that.\n\n156\n00:09:29.310 --> 00:09:32.230\nYou better have your trigger\nfinger ready because it's\n\n157\n00:09:32.230 --> 00:09:36.540\nprobably not gonna break anything but\nlet's see what happens.\n\n158\n00:09:38.480 --> 00:09:43.450\nYou're in the infinite loop because, like\nyou said, it will never evaluate that way,\n\n159\n00:09:43.450 --> 00:09:47.450\nso it's just gonna keep on keeping on.\n&gt;&gt; Yeah and\n\n160\n00:09:47.450 --> 00:09:51.850\nif you're doing something that is very\nexpensive, it takes a lot of resources.\n\n161\n00:09:51.850 --> 00:09:55.560\nAs you start programming more, [INAUDIBLE]\nnow all I did there was hit CTRL+C,\n\n162\n00:09:55.560 --> 00:09:58.440\nit actually broke the process Is stopped.\n\n163\n00:09:58.440 --> 00:10:01.990\nIt used a keyboard interrupt, but\njust printed the same number, but\n\n164\n00:10:01.990 --> 00:10:05.320\nwhat if instead of just printing\na number to the screen,\n\n165\n00:10:05.320 --> 00:10:08.380\nwhat if it was creating a list\nof one million elements?\n\n166\n00:10:10.120 --> 00:10:13.620\nWell, eventually your computer's\njust gonna grind to a halt and\n\n167\n00:10:13.620 --> 00:10:15.560\nyou may have to restart.\n\n168\n00:10:15.560 --> 00:10:19.160\nSo be aware that sometimes, oops,\n\n169\n00:10:19.160 --> 00:10:24.180\nI forgot something at the end,\nparticularly this.\n\n170\n00:10:24.180 --> 00:10:24.990\nSo what do I do?\n\n171\n00:10:24.990 --> 00:10:27.070\nAt the end of every iteration,\n\n172\n00:10:27.070 --> 00:10:31.360\nI say that well the index is\nnow whatever it was plus one.\n\n173\n00:10:32.860 --> 00:10:35.390\nWhatever it was plus one.\n\n174\n00:10:35.390 --> 00:10:36.370\nHere is the hiccup though.\n\n175\n00:10:37.930 --> 00:10:40.240\nSee this index is less than numslength.\n\n176\n00:10:40.240 --> 00:10:44.765\nYou have to be careful here cuz sometimes\nyou may still get an index out of bounds\n\n177\n00:10:44.765 --> 00:10:45.500\nerror.\n\n178\n00:10:45.500 --> 00:10:51.872\nIf you add wrong or, You get it like this.\n\n179\n00:10:51.872 --> 00:10:54.892\nI added an equal sign while\nindex is less than or\n\n180\n00:10:54.892 --> 00:10:58.150\nequal to the length of the numbers or\nthis length.\n\n181\n00:10:58.150 --> 00:11:00.750\nThe length is five,\nwhat's the maximum index though?\n\n182\n00:11:01.980 --> 00:11:07.150\nFour because it's zero, one,\ntwo, three, four is the index.\n\n183\n00:11:07.150 --> 00:11:09.290\nSo if I accidentally do that.\n\n184\n00:11:12.570 --> 00:11:17.882\nIndex error, so everything runs and\nthen my index increments to\n\n185\n00:11:17.882 --> 00:11:23.410\nfive and then when I try to access\n\n186\n00:11:23.410 --> 00:11:28.970\nindex five and numbers and\nindex error list of range, can't do that.\n\n187\n00:11:28.970 --> 00:11:32.460\nThat's another way things break, okay?\n\n188\n00:11:32.460 --> 00:11:37.820\nSo, does that all kind of make sense Vern.\n&gt;&gt; It does, it seems that for\n\n189\n00:11:37.820 --> 00:11:43.350\nloop are a little bit more straight\nforward or a little less complicated.\n\n190\n00:11:43.350 --> 00:11:47.230\nIt's one of those, I get it, I see it,\n\n191\n00:11:47.230 --> 00:11:50.118\nit seems that we had to\nclear a lot of things too.\n\n192\n00:11:50.118 --> 00:11:53.105\n[LAUGH]\n&gt;&gt; Yeah so you're exactly correct and for\n\n193\n00:11:53.105 --> 00:11:56.110\nthe most part,\nif you are iterating over a collection.\n\n194\n00:11:58.110 --> 00:12:04.520\nSo collection, here's my recommendation,\ndon't with a while loop, and here's why.\n\n195\n00:12:04.520 --> 00:12:08.070\nI had to remember to create the index.\n\n196\n00:12:08.070 --> 00:12:10.580\nTechnically, I didn't need this I\ncould just put the length here but\n\n197\n00:12:10.580 --> 00:12:12.500\nthen I need to have\na termination condition or\n\n198\n00:12:12.500 --> 00:12:16.470\nsome other way to break the loop, and then\nI have to use that index, it's just a lot.\n\n199\n00:12:18.410 --> 00:12:22.890\nIn all actuality, this is equivalent and\n\n200\n00:12:22.890 --> 00:12:28.160\nit's guaranteed not to run\naccidentally forever, and\n\n201\n00:12:28.160 --> 00:12:30.890\nit is also guaranteed not to have\na index out of bounds error.\n\n202\n00:12:30.890 --> 00:12:34.850\nAssuming that you don't accidentally\nput like a weird number in this\n\n203\n00:12:34.850 --> 00:12:35.580\nrange function.\n\n204\n00:12:37.110 --> 00:12:40.990\nLikewise, and the one we saw before,\nfour number in numbers.\n\n205\n00:12:40.990 --> 00:12:44.500\nThey will gonna balance,\nthey will never run forever.\n\n206\n00:12:45.680 --> 00:12:47.390\nIt could be very large.\n\n207\n00:12:47.390 --> 00:12:50.410\nIt might run ten million times if there's\nten million numbers in the list or\n\n208\n00:12:50.410 --> 00:12:52.420\nthe [INAUDIBLE].\n\n209\n00:12:52.420 --> 00:12:56.320\nBy large in order to iterate over\ncollection in Python, use the For\n\n210\n00:12:56.320 --> 00:12:59.290\nloop.\n&gt;&gt; It seems that you just have less chance\n\n211\n00:12:59.290 --> 00:13:00.680\nfor errors.\n\n212\n00:13:00.680 --> 00:13:01.750\nThat's just what it is.\n\n213\n00:13:01.750 --> 00:13:05.610\nThat whole like, at the end that\nindex=index+1, you have to do that for\n\n214\n00:13:05.610 --> 00:13:07.080\nlike every time.\n\n215\n00:13:07.080 --> 00:13:10.530\nYou ever do a while loop and\nyes, maybe it's like, no,\n\n216\n00:13:10.530 --> 00:13:12.150\nit's just what you have to do so\nit's committed to memory.\n\n217\n00:13:12.150 --> 00:13:18.040\nI'm always gonna remember it,\nbut, just, yes, here you go.\n\n218\n00:13:18.040 --> 00:13:20.245\nYou're not gonna mess up by accident.\n\n219\n00:13:20.245 --> 00:13:22.330\n[LAUGH]\n&gt;&gt; Hey, you're right.\n\n220\n00:13:22.330 --> 00:13:23.930\nYou're not gonna mess up by accident.\n\n221\n00:13:23.930 --> 00:13:27.450\nYou're not gonna have\nsome of these issues but\n\n222\n00:13:27.450 --> 00:13:31.401\nthere are times where you\ndo want an infinite loop.\n\n223\n00:13:31.401 --> 00:13:33.904\nOr instead of running and\nrunning and running, right?\n\n224\n00:13:33.904 --> 00:13:40.510\nOr excuse me, instead of stopping\nat the end of a collection,\n\n225\n00:13:40.510 --> 00:13:44.460\nyou want to run, run,\nrun, when do you this?\n\n226\n00:13:44.460 --> 00:13:49.030\nGains are a perfect example or\nwhen you're taking user input,\n\n227\n00:13:49.030 --> 00:13:54.076\nor anytime you double clicked on\nan application on your computer right?\n\n228\n00:13:54.076 --> 00:13:58.370\nDouble click word ,you double click\nInternet explorer what happens\n\n229\n00:13:58.370 --> 00:14:03.215\nis that application window comes open and\nit now starts effectively a loop.\n\n230\n00:14:03.215 --> 00:14:08.640\nIt says why you have not hit\nclose,keep this application open and\n\n231\n00:14:08.640 --> 00:14:10.090\ndo all the stuff.\n\n232\n00:14:10.090 --> 00:14:13.310\nI'm grossly over simplifying\nthat a little bit, but\n\n233\n00:14:13.310 --> 00:14:17.350\nI wanna introduce you to a new concept,\njust a little extra bang for your buck.\n\n234\n00:14:17.350 --> 00:14:21.570\nTo show you when you would\nkind of do this, all right.\n\n235\n00:14:21.570 --> 00:14:24.430\nSo instead of a game,\n\n236\n00:14:24.430 --> 00:14:30.500\nlet's say,\nyou want to take words from a user, right.\n\n237\n00:14:30.500 --> 00:14:37.830\nAnd you wanna collect those words\ninto a set of words they've typed in.\n\n238\n00:14:37.830 --> 00:14:44.100\nNow, this is a very contrived example,\nbut I'm gonna take user input, and\n\n239\n00:14:44.100 --> 00:14:47.290\nwe have already talked about that a great\ndeal, but it's pretty easy in Python,\n\n240\n00:14:47.290 --> 00:14:51.020\nit's not as easy in some other places,\nand let's see here.\n\n241\n00:14:51.020 --> 00:14:54.970\nI'm gonna say words equals an empty set.\n\n242\n00:14:54.970 --> 00:14:59.730\nYou have to do it this way because\nthe empty set of curly braces\n\n243\n00:14:59.730 --> 00:15:00.950\nis in fact a dictionary.\n\n244\n00:15:00.950 --> 00:15:03.480\nThat's just the way the Python rules work.\n\n245\n00:15:03.480 --> 00:15:04.480\nI'm going to take the set.\n\n246\n00:15:04.480 --> 00:15:07.800\nThat's because if I type repeats,\nI don't want anything in there, all right.\n\n247\n00:15:09.260 --> 00:15:10.900\nSo what do I wanna do?\n\n248\n00:15:10.900 --> 00:15:15.010\nI wanna say while and\nI'm actually just gonna type True.\n\n249\n00:15:15.010 --> 00:15:19.840\nThis will always run, and\nbecause when I launch this application,\n\n250\n00:15:19.840 --> 00:15:23.300\nessentially what I'm saying\nis while this is going on,\n\n251\n00:15:23.300 --> 00:15:26.560\nwhile this application is running,\nI want you to do these things.\n\n252\n00:15:27.670 --> 00:15:30.620\nAnd it says again,\nyou double-click here on the application,\n\n253\n00:15:30.620 --> 00:15:35.150\nyou put in a game you hit start and\nyou say well I haven't lost.\n\n254\n00:15:35.150 --> 00:15:38.690\nRun forever, it's not actually forever and\n\n255\n00:15:38.690 --> 00:15:42.700\nall I'm going to do is\nsay word equals input.\n\n256\n00:15:44.570 --> 00:15:46.500\nWhat is your and, you know what?\n\n257\n00:15:46.500 --> 00:15:52.418\nJust a little reminisce, and I'm just\ngonna do that, kinda like the rebel, okay?\n\n258\n00:15:52.418 --> 00:15:57.147\nAnd then, I'm gonna\n\n259\n00:15:57.147 --> 00:16:02.146\nsay words.add word.\n\n260\n00:16:02.146 --> 00:16:08.162\nAnd then say Print,\nyou have typed the following words,\n\n261\n00:16:08.162 --> 00:16:13.298\nand then comma, and\njust put the set in there, so\n\n262\n00:16:13.298 --> 00:16:18.460\nwe'll get that set kind of out each time,\nokay?\n\n263\n00:16:18.460 --> 00:16:20.000\nThere we go, we can actually see that now.\n\n264\n00:16:20.000 --> 00:16:24.283\nSo create a set and then infinite loop.\n\n265\n00:16:24.283 --> 00:16:26.951\nAnd it's just gonna take,\nevery time I type.\n\n266\n00:16:26.951 --> 00:16:31.301\nAnd what this input is doing, it's saying\nhey user, I'm asking you for input.\n\n267\n00:16:31.301 --> 00:16:34.682\nAnd it's gonna hang out right here.\n\n268\n00:16:34.682 --> 00:16:36.711\nSo this is called a block.\n\n269\n00:16:36.711 --> 00:16:42.502\nIt's blocking until something happens.\n\n270\n00:16:42.502 --> 00:16:46.398\nWhen I say blocking,\nit will run until it hits this line,\n\n271\n00:16:46.398 --> 00:16:50.471\nand then it's gonna wait for\nme as the user to do something.\n\n272\n00:16:50.471 --> 00:16:52.273\nAnd then after that it will continue on.\n\n273\n00:16:52.273 --> 00:16:56.548\nBecause this is in a while true or\nkind of an infinite loop, and\n\n274\n00:16:56.548 --> 00:17:01.583\nwe go okay, do this, do this,\nwe're back to the end, still true.\n\n275\n00:17:01.583 --> 00:17:05.640\nAnd so\nwe're gonna always kind of run this.\n\n276\n00:17:05.640 --> 00:17:08.469\nAs before if you woopsie daisy,\nmisspell something or\n\n277\n00:17:08.469 --> 00:17:12.835\nit goes into an infinite loop, Ctrl+C will\nget you out of that regardless of whether\n\n278\n00:17:12.835 --> 00:17:15.380\nyou meant to be there or not, all right?\n\n279\n00:17:15.380 --> 00:17:19.868\nSo we're gonna come over and\nwe're look while_loop, and\n\n280\n00:17:19.868 --> 00:17:22.571\nnow I'm in the repel, not really.\n\n281\n00:17:22.571 --> 00:17:23.792\nAnd what are we gonna do?\n\n282\n00:17:23.792 --> 00:17:28.173\nWell, let's say Vonne,\nI've typed the following words, Vonne.\n\n283\n00:17:28.173 --> 00:17:30.543\nLet's say Vonne.\n\n284\n00:17:30.543 --> 00:17:33.795\nI typed it twice but it's a set so\nthere's no duplicates.\n\n285\n00:17:33.795 --> 00:17:40.669\nBut notice, it's not printing this until\nI'm hitting Enter after I hit the,\n\n286\n00:17:40.669 --> 00:17:47.349\ntype the word, [SOUND] and if I say\nCheese, and I've typed Cheese and Vonne.\n\n287\n00:17:47.349 --> 00:17:50.828\nIf I say cheese in lowercase.\n\n288\n00:17:50.828 --> 00:17:52.995\nThose are different so those are there.\n\n289\n00:17:52.995 --> 00:17:57.890\nBut notice it kind of just hangs out,\nit will do this forever.\n\n290\n00:17:57.890 --> 00:18:02.191\nUntil I hit Ctrl+C and\ndo a KeyboardInterrupt.\n\n291\n00:18:02.191 --> 00:18:06.810\nSo if I wanna take forever input,\ngame controls, interactions from users,\n\n292\n00:18:06.810 --> 00:18:09.452\nyou just put it into\nan infinite while loop.\n\n293\n00:18:09.452 --> 00:18:13.811\nThis is the one edge case where I do use\na while loop and it's very applicable.\n\n294\n00:18:13.811 --> 00:18:19.025\nIf I'm iterating over a collection,\nI tend to go with the for\n\n295\n00:18:19.025 --> 00:18:23.810\nloop unless I have a very specific reason.\n&gt;&gt; Now I can see that but\n\n296\n00:18:23.810 --> 00:18:29.151\nI was just saying, it's going, line, line,\nline, line, comeback around, blocked.\n\n297\n00:18:29.151 --> 00:18:33.842\nWait, okay, keep going, and\nthen back around, okay wait.\n\n298\n00:18:33.842 --> 00:18:38.469\nSo I can kinda see the thought\nprocess of the computer when you talk\n\n299\n00:18:38.469 --> 00:18:42.773\nabout like what that block and\nwhat that input is asking for.\n\n300\n00:18:42.773 --> 00:18:48.520\nNow just kinda talking,\nthinking out loud, you can do this and\n\n301\n00:18:48.520 --> 00:18:53.400\nthen once you've reached\n40 words then print out,\n\n302\n00:18:53.400 --> 00:18:56.452\nyou've filled the collection.\n\n303\n00:18:56.452 --> 00:18:59.511\nI mean, or would you switch\nthat back into a for loop?\n\n304\n00:18:59.511 --> 00:19:03.251\nOr would that stay a while?\n&gt;&gt; So, you've brought up a good point.\n\n305\n00:19:03.251 --> 00:19:04.952\nRight now it's always running.\n\n306\n00:19:04.952 --> 00:19:07.574\nBut what if I wanted, once I get a,\n\n307\n00:19:07.574 --> 00:19:11.930\nwhen someone types in five words,\nI wanna stop, right?\n\n308\n00:19:11.930 --> 00:19:13.332\nAnd then I wanna do some processing.\n\n309\n00:19:13.332 --> 00:19:18.010\nMaybe I wanna grab words from them and\nthen I wanna put them into a sentence.\n\n310\n00:19:18.010 --> 00:19:21.064\nWell, instead of while true,\n\n311\n00:19:21.064 --> 00:19:26.825\nI'm gonna say while the length\nof words is less than five.\n\n312\n00:19:26.825 --> 00:19:30.301\nAnd now It's kind of forever.\n\n313\n00:19:30.301 --> 00:19:31.612\nIt still blocks.\n\n314\n00:19:31.612 --> 00:19:34.015\nI'm still taking user input.\n\n315\n00:19:34.015 --> 00:19:37.191\nBut let's see here, python while.\n\n316\n00:19:37.191 --> 00:19:43.118\nThere we go, so let's say Vonne,\nJustin, Taylor,\n\n317\n00:19:43.118 --> 00:19:48.880\nCheese, Pepperoni and boom.\n\n318\n00:19:48.880 --> 00:19:52.041\nIt now stops, and it's kinda\nhard to see behind my head here.\n\n319\n00:19:52.041 --> 00:19:54.065\nThere's actually nothing behind my head,\nbut\n\n320\n00:19:54.065 --> 00:19:55.843\nit looks like there was something there.\n\n321\n00:19:55.843 --> 00:20:00.547\nSo, what it did is it went\nthrough that loop five times only\n\n322\n00:20:00.547 --> 00:20:02.861\nbecause I typed no repeats.\n\n323\n00:20:02.861 --> 00:20:04.555\nReally what it said is,\n\n324\n00:20:04.555 --> 00:20:10.080\nwhile the number of words in that set is\nless than five, then just keep going.\n\n325\n00:20:10.080 --> 00:20:14.051\nOtherwise stop,\nthat's all she wrote, it's done.\n\n326\n00:20:14.051 --> 00:20:15.576\nSo this is something,\n\n327\n00:20:15.576 --> 00:20:20.650\nif I'm taking user input I do use a while\nloop even if it's not a while true.\n\n328\n00:20:20.650 --> 00:20:24.537\nMaybe there is a termination\nedition like this where I say,\n\n329\n00:20:24.537 --> 00:20:26.960\nI wanna stop when this becomes true.\n\n330\n00:20:26.960 --> 00:20:28.792\nI'll still use a while loop.\n\n331\n00:20:28.792 --> 00:20:33.711\nI'm doing a collection, I'm gonna use\na for loop, those are your decisions.\n\n332\n00:20:33.711 --> 00:20:35.460\nWhich one do I use?\n\n333\n00:20:35.460 --> 00:20:37.832\nUser input, while is pretty good.\n\n334\n00:20:37.832 --> 00:20:40.518\nNeed to iterate over a list,\na tuple, a dictionary?\n\n335\n00:20:40.518 --> 00:20:42.336\nThat's good.\n\n336\n00:20:42.336 --> 00:20:46.683\nBecause, notice how I said whiles work for\nindexes?\n\n337\n00:20:46.683 --> 00:20:51.877\nTo iterate over a set, and\na dictionary actually requires\n\n338\n00:20:51.877 --> 00:20:59.191\na little more work because they're not\ntypical indexes, they're not numbers.\n\n339\n00:20:59.191 --> 00:21:03.403\nA set, gotta be able to go is there\nstuff in the set, does it have stuff?\n\n340\n00:21:03.403 --> 00:21:05.831\nAnd if it does, how do I iterate over it?\n\n341\n00:21:05.831 --> 00:21:09.522\nAnd eh,\nit's actually easier to do a for loop.\n\n342\n00:21:09.522 --> 00:21:13.548\nSo those are your two options, and I would\nremember those as you're kinda working\n\n343\n00:21:13.548 --> 00:21:14.870\nthrough Python.\n&gt;&gt; Yeah,\n\n344\n00:21:14.870 --> 00:21:19.559\nI can definitely see with the games and\nthe input, and ask me a question, and\n\n345\n00:21:19.559 --> 00:21:22.430\nlike hey, guess the letter,\nguess the word.\n\n346\n00:21:22.430 --> 00:21:25.943\nAnd I can see, definitely,\nwhy you'd want to go with that.\n\n347\n00:21:25.943 --> 00:21:28.093\nSo thank you for that clarification.\n\n348\n00:21:28.093 --> 00:21:30.021\nI'm feeling pretty good about my looping.\n\n349\n00:21:30.021 --> 00:21:33.492\nSo I think, though,\nwe need to loop on out of here.\n\n350\n00:21:33.492 --> 00:21:35.021\nSo thank you so much for joining.\n\n351\n00:21:35.021 --> 00:21:37.941\nSigning off for DevPro TV,\nI've been your host Vonne Smith.\n\n352\n00:21:37.941 --> 00:21:38.653\n&gt;&gt; And I'm Justin Dennison.\n\n353\n00:21:38.653 --> 00:21:40.356\n&gt;&gt; And we'll see you soon.\n\n354\n00:21:40.356 --> 00:21:43.893\n[MUSIC]\n\n",
          "vimeoId": "268801429"
        },
        {
          "description": "In this episode, Justin and Vonne explore creating lists using loops. However, Python provides an alternative to using standard for loops to populate new lists, the list comprehension. Justin demonstrates the use of list comprehensions as well as compares the readability of list comprehensions versus creating lists using standard for loops.",
          "length": "1529",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-4-1-list_comprehensions-050918-PGM.00_26_43_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-4-1-list_comprehensions-050918-PGM.00_26_43_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-4-1-list_comprehensions-050918-PGM.00_26_43_11.Still001-sm.jpg",
          "title": "List Comprehensions",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:01.227\n[MUSIC]\n\n2\n00:00:01.227 --> 00:00:11.071\n[SOUND]\n\n3\n00:00:12.938 --> 00:00:13.923\nHello everyone, and\n\n4\n00:00:13.923 --> 00:00:17.140\nwelcome back to another\nexciting edition of DevProTV.\n\n5\n00:00:17.140 --> 00:00:18.350\nI'm your host, Vonne Smith, and\n\n6\n00:00:18.350 --> 00:00:20.750\nwe're continuing through our\nprograming fundamentals.\n\n7\n00:00:20.750 --> 00:00:25.160\nAnd in this episode, we're going\nto be doing list comprehensions.\n\n8\n00:00:25.160 --> 00:00:27.470\nSounds like we're getting ready to\ntake a test in grade school and\n\n9\n00:00:27.470 --> 00:00:28.760\nI'm getting kinda scared.\n\n10\n00:00:28.760 --> 00:00:31.330\nBut here to help me feel better is Mr.\nJustin Denison.\n\n11\n00:00:31.330 --> 00:00:32.090\nHow are you?\n\n12\n00:00:32.090 --> 00:00:33.170\n&gt;&gt; I am doing fantastic.\n\n13\n00:00:33.170 --> 00:00:35.740\nAnd I don't know if I'm gonna make\nyou feel better because, listen, I\n\n14\n00:00:35.740 --> 00:00:39.995\ngot a list of like 15 words that you were\nsupposed to have a test on last Friday.\n\n15\n00:00:39.995 --> 00:00:42.273\n&gt;&gt; [LAUGH]\n&gt;&gt; No, no, list comprehensions,\n\n16\n00:00:42.273 --> 00:00:44.300\nkind of an odd title, right?\n\n17\n00:00:44.300 --> 00:00:44.990\nBecause you're like, well,\n\n18\n00:00:44.990 --> 00:00:49.589\nwait a minute, you're talked about lists\na lot, I feel like I comprehend lists.\n\n19\n00:00:50.700 --> 00:00:53.020\nWell, you might, but\nthere are a few things,\n\n20\n00:00:53.020 --> 00:00:55.410\nwe just looked at the structure in\ngeneral and some of the capabilities,\n\n21\n00:00:55.410 --> 00:00:58.520\nwe haven't actually used them a great\ndeal for anything meaningful.\n\n22\n00:00:58.520 --> 00:01:01.330\nBut I do wanna talk about these structures\nbecause it's something that I do in my\n\n23\n00:01:01.330 --> 00:01:05.170\ncode, and then it will probably come up,\nall right?\n\n24\n00:01:05.170 --> 00:01:07.720\nSo let me set the stage.\n\n25\n00:01:07.720 --> 00:01:10.926\nI get a list, let's just say numbers,\nwe're gonna keep it simple,\n\n26\n00:01:10.926 --> 00:01:12.490\nvery kind of contrived example.\n\n27\n00:01:12.490 --> 00:01:16.537\nWe have a list of numbers, and you're\nlike, well those are the right numbers,\n\n28\n00:01:16.537 --> 00:01:19.280\nbut I gotta add 3 to every\none of those numbers.\n\n29\n00:01:19.280 --> 00:01:24.890\nWell, you could say, well,\nthe list bracket 0 plus 3,\n\n30\n00:01:24.890 --> 00:01:30.399\nright, set that equal and\nreassign, you could do that.\n\n31\n00:01:30.399 --> 00:01:33.760\nYou're like, well, wait a minute,\nif I need to iterate over all the lists,\n\n32\n00:01:33.760 --> 00:01:35.840\nI can just use a for loop.\n\n33\n00:01:35.840 --> 00:01:42.195\nCorrect, but you need to either change\nit or do some other things, all right.\n\n34\n00:01:42.195 --> 00:01:45.136\nOr maybe you create a new list and\nyou go, all right, so I'm gonna\n\n35\n00:01:45.136 --> 00:01:49.490\ngrab from this list, I'm gonna add 3 to\nit, and I'm gonna put it in this list.\n\n36\n00:01:49.490 --> 00:01:52.150\nThat's probably what you're\ngonna see most commonly,\n\n37\n00:01:52.150 --> 00:01:56.430\nespecially if people are not Python\nfirst kind of thought processes.\n\n38\n00:01:57.560 --> 00:02:03.020\nList comprehensions will actually provide\na shorthand that I find very readable,\n\n39\n00:02:03.020 --> 00:02:05.980\nand is used a great deal\nin the Python world.\n\n40\n00:02:05.980 --> 00:02:10.831\nSo let's go ahead and set up that thought\nprocess and see some of the snafus we're\n\n41\n00:02:10.831 --> 00:02:14.760\ngonna run into, but then how does the list\ncomprehension actually solve that.\n\n42\n00:02:14.760 --> 00:02:16.560\nSo let's go ahead and\ntake a look at the screen here.\n\n43\n00:02:16.560 --> 00:02:18.840\nAnd just cuz have my editor open,\n\n44\n00:02:18.840 --> 00:02:23.370\nnothing to see other than I'm inside the\nprogramming fundamentals folder, and well,\n\n45\n00:02:23.370 --> 00:02:26.970\nI also have programming fundamentals\nopen in my terminal, all right?\n\n46\n00:02:26.970 --> 00:02:33.530\nSo we've done this pretty much for the\nlast ten or so episodes, so we're good.\n\n47\n00:02:33.530 --> 00:02:40.426\nNow, let's say we type\ntouch list_comps.py, okay.\n\n48\n00:02:40.426 --> 00:02:43.618\nSo we're gonna explore a little\nbit inside of this list comps.\n\n49\n00:02:43.618 --> 00:02:47.720\nAnd I'm gonna hide this off to the side\nand get rid of this little pop-up here.\n\n50\n00:02:47.720 --> 00:02:49.500\nAnd let’s set the scene.\n\n51\n00:02:49.500 --> 00:02:53.840\nNow, this could be a list of\n10,000 numbers, 1 million numbers.\n\n52\n00:02:53.840 --> 00:02:57.210\nWe’re gonna start with 1,\n2, 3, 4, 5, 6, okay?\n\n53\n00:02:57.210 --> 00:02:58.160\nSo we have six numbers.\n\n54\n00:02:59.570 --> 00:03:03.346\nAnd your task, your boss comes to you,\nwhatever it may be, and says, hey,\n\n55\n00:03:03.346 --> 00:03:06.178\nyou know what, when this comes in,\nwe need to go ahead and\n\n56\n00:03:06.178 --> 00:03:10.255\nadd 3 to these cuz there’s been a price\nincrease, or whatever it may be, right?\n\n57\n00:03:10.255 --> 00:03:15.125\nAnd you go, all right, so\nI need to add 3 to each number.\n\n58\n00:03:15.125 --> 00:03:17.915\nNow, I'm gonna show you one thing,\n\n59\n00:03:17.915 --> 00:03:23.332\nwe're not gonna do the long-hand\nwhere we say numbers[0] =, no.\n\n60\n00:03:23.332 --> 00:03:27.305\nNumber one, you have no idea how\nmany times you'll need to do that,\n\n61\n00:03:27.305 --> 00:03:30.247\nyou'll be copying and\npasting, it's just bad.\n\n62\n00:03:30.247 --> 00:03:34.009\nIf you find yourself doing a whole bunch\nof that, you should take a step back and\n\n63\n00:03:34.009 --> 00:03:35.750\ngo, all right, hold on a second.\n\n64\n00:03:35.750 --> 00:03:36.830\nIs there a better way?\n\n65\n00:03:36.830 --> 00:03:39.280\nFor loop is a pretty good way, all right?\n\n66\n00:03:39.280 --> 00:03:44.890\nSo you say, for number in numbers.\n\n67\n00:03:44.890 --> 00:03:46.643\nAnd here's what people will do.\n\n68\n00:03:46.643 --> 00:03:51.931\nThey will say, all right,\nso number = number + 3.\n\n69\n00:03:53.080 --> 00:03:55.010\nAnd all right, cool.\n\n70\n00:03:55.010 --> 00:03:57.430\nWell, let's come up here and\nprint out numbers for our two.\n\n71\n00:04:00.090 --> 00:04:03.621\nAnd wait for print(numbers), like so.\n\n72\n00:04:03.621 --> 00:04:10.420\nAll right, so we come over here python3,\nand list-comps, boom.\n\n73\n00:04:12.160 --> 00:04:14.410\nThat may not have been\nwhat you were expecting.\n\n74\n00:04:14.410 --> 00:04:18.230\nI see Vonne going, no, no, no,\nno, no, no, no, that's not right.\n\n75\n00:04:18.230 --> 00:04:22.982\n&gt;&gt; Well, I mean when you wrote it out\njust in normal speak, it't like, yeah,\n\n76\n00:04:22.982 --> 00:04:23.812\njust add 3.\n\n77\n00:04:23.812 --> 00:04:31.250\nOkay, but that's more of me talking like a\nhuman rather than talking like a computer.\n\n78\n00:04:31.250 --> 00:04:33.990\n&gt;&gt; Yeah, and\nthat's where the hiccup comes in.\n\n79\n00:04:33.990 --> 00:04:37.290\nSo what happens is, in this for\nloop, very easy to read, but\n\n80\n00:04:37.290 --> 00:04:41.630\nI get a temporary variable that,\nwhat python does is it goes, all right,\n\n81\n00:04:41.630 --> 00:04:45.500\nlet me plug this out of this list right\nquick just to sign it to the variable.\n\n82\n00:04:45.500 --> 00:04:51.650\nAnd that's doing is I'm reassigning this\nvariable at the end to plus 3, all right?\n\n83\n00:04:51.650 --> 00:04:54.370\nSo, or to whatever it was, plus 3.\n\n84\n00:04:54.370 --> 00:05:01.000\nSo it is adding to a number, but\nit's not modifying the list, all right?\n\n85\n00:05:01.000 --> 00:05:05.318\nSo then people come along and go,\nall right, all right, all right, [SOUND],\n\n86\n00:05:05.318 --> 00:05:08.117\nI know how to fix this,\nI know how to modify a list.\n\n87\n00:05:08.117 --> 00:05:13.748\nAnd they'll something like this,\nthey'll change this to index,\n\n88\n00:05:13.748 --> 00:05:19.000\nthey'll change this to a range\nof 0 to len of numbers.\n\n89\n00:05:19.000 --> 00:05:21.156\nOkay, I'm gonna get it now.\n\n90\n00:05:21.156 --> 00:05:25.233\nAnd then they'll say number, you don't\nnecessarily have to do this part,\n\n91\n00:05:25.233 --> 00:05:27.180\nnumbers[index].\n\n92\n00:05:27.180 --> 00:05:32.449\nAnd then you go, okay, well,\n\n93\n00:05:32.449 --> 00:05:38.540\nnumbers[index] = number + 3.\n\n94\n00:05:38.540 --> 00:05:41.176\nAll right, all right,\nthis is a little more complicated,\n\n95\n00:05:41.176 --> 00:05:43.590\nlittle possible issues that could crop up.\n\n96\n00:05:43.590 --> 00:05:49.059\nAnd you come here, and\nyou clear, and you go list_comp.\n\n97\n00:05:49.059 --> 00:05:52.100\nAnd okay, all right.\n\n98\n00:05:52.100 --> 00:05:57.200\nNow, what's interesting, though, is I'm\nactually modified the existing list.\n\n99\n00:05:57.200 --> 00:05:58.770\nLet's say this was a list of prices.\n\n100\n00:06:01.130 --> 00:06:05.510\nWhat I did is I took all the old prices,\nand deleted them, and I overwrote them.\n\n101\n00:06:07.030 --> 00:06:11.160\nNow, what happens if you go, man,\nI actually need those old prices again.\n\n102\n00:06:11.160 --> 00:06:13.730\nWell, you already know what\nthey are in this context, but\n\n103\n00:06:13.730 --> 00:06:14.720\nthis could be something else.\n\n104\n00:06:14.720 --> 00:06:16.711\nMaybe you don't wanna do that,\nmaybe you need to have,\n\n105\n00:06:16.711 --> 00:06:20.880\nI wanna know how much the price increases\nor what's the percentage change,\n\n106\n00:06:20.880 --> 00:06:22.890\nI need to do other things.\n\n107\n00:06:22.890 --> 00:06:25.520\nI need the old values and the new values.\n\n108\n00:06:25.520 --> 00:06:28.770\nSo then someone goes, all right,\nall right, I got this fixed.\n\n109\n00:06:28.770 --> 00:06:30.080\nSo I've seen other people do this.\n\n110\n00:06:30.080 --> 00:06:33.918\nWhat they do is they create an other list,\nand\n\n111\n00:06:33.918 --> 00:06:38.760\nit's empty, there's nothing in it, right?\n\n112\n00:06:38.760 --> 00:06:41.480\nAnd they I go, all right, so watch this.\n\n113\n00:06:43.120 --> 00:06:46.320\nAnd instead of going for index blah, blah,\n\n114\n00:06:46.320 --> 00:06:49.720\nblah, blah, they go, this looks fine,\nthis is actually okay.\n\n115\n00:06:49.720 --> 00:06:55.013\nThis is fine, but\nnow [SOUND] what they're gonna do is say,\n\n116\n00:06:55.013 --> 00:07:01.831\nwell, we're just gonna say the number\nis whatever it is, plus 3, okay?\n\n117\n00:07:01.831 --> 00:07:05.610\nAnd then we're gonna say,\n\n118\n00:07:05.610 --> 00:07:10.712\nother.append(number), okay?\n\n119\n00:07:10.712 --> 00:07:12.210\nGot that?\n\n120\n00:07:12.210 --> 00:07:17.200\nAnd then let's change this,\nadd print(other), like so.\n\n121\n00:07:17.200 --> 00:07:18.926\nAnd then they go, all right,\nyeah, I think I got this.\n\n122\n00:07:18.926 --> 00:07:23.334\nSo now I actually have, [SOUND],\n\n123\n00:07:23.334 --> 00:07:27.750\nthat's kinda odd, isn't it?\n\n124\n00:07:27.750 --> 00:07:31.360\nNumber one, you actually have to type the\nright variable cuz I was super confuses.\n\n125\n00:07:31.360 --> 00:07:35.490\nI was like, that's not right,\nthat shouldn't happen.\n\n126\n00:07:35.490 --> 00:07:39.536\nThere we go, and notice I have 1,\n2, 3, 4, 5, 6, an empty list.\n\n127\n00:07:39.536 --> 00:07:44.360\nAnd then later on I still have\nthat same set of numbers, but\n\n128\n00:07:44.360 --> 00:07:47.817\nthen other is 4, 5, 6, 7, 8, 9.\n\n129\n00:07:47.817 --> 00:07:54.615\nSo I've created another list with\nchanges from the original list.\n\n130\n00:07:54.615 --> 00:07:59.712\nYou will see people do this, and\nthere's nothing wrong with doing this.\n\n131\n00:07:59.712 --> 00:08:03.741\nBut, we went from this really pretty for\nloop and\n\n132\n00:08:03.741 --> 00:08:08.920\nthey're real easy to reason about and\nnot as pretty now.\n\n133\n00:08:08.920 --> 00:08:10.035\nWe know what?\n\n134\n00:08:10.035 --> 00:08:15.918\nLook at that,\nI bet I could change this back to number\n\n135\n00:08:15.918 --> 00:08:21.020\nin numbers and then,\nlet's get rid of this.\n\n136\n00:08:22.670 --> 00:08:26.170\nJust to simplify this, you go,\nwell really all I need to do this.\n\n137\n00:08:26.170 --> 00:08:27.400\nAnd I'm okay with doing this.\n\n138\n00:08:27.400 --> 00:08:30.490\nWhat it'll do is it'll\nevaluate inside out.\n\n139\n00:08:30.490 --> 00:08:33.159\nSo it goes, number +3 and\nI'm going to add that to the other list.\n\n140\n00:08:33.159 --> 00:08:35.900\nThis is a little easier to read.\n\n141\n00:08:37.280 --> 00:08:41.110\nThere still are some hiccups,\nyou could assign that to a variable.\n\n142\n00:08:41.110 --> 00:08:44.000\nAnd then, if we come back,\nlet's make sure we save.\n\n143\n00:08:44.000 --> 00:08:50.600\nWe come back and run this one more time,\nthat still works.\n\n144\n00:08:51.760 --> 00:08:53.860\nNotice okay, well what do I want to do?\n\n145\n00:08:53.860 --> 00:08:55.740\nWhat is the goal here?\n\n146\n00:08:55.740 --> 00:08:59.100\nI wanna run for each of the elements\nin the original set of numbers, or\n\n147\n00:08:59.100 --> 00:09:01.810\nthe original list of numbers, excuse me.\n\n148\n00:09:01.810 --> 00:09:08.730\nAnd I want to append whatever that element\nwas + 3 to the other set of numbers.\n\n149\n00:09:08.730 --> 00:09:11.232\nSo now I'm going,\nI'm gonna grab this, what is that?\n\n150\n00:09:11.232 --> 00:09:13.647\nThat's 3, I'm gonna add 3 to it and\nput it over here.\n\n151\n00:09:13.647 --> 00:09:17.290\nYou're kinda creating this parallel lists.\n\n152\n00:09:17.290 --> 00:09:20.310\nNow Vonne I'm gonna ask you a question,\nyou saw several examples of this.\n\n153\n00:09:20.310 --> 00:09:24.860\nWhich one would you prefer\nif you wanted to add 3?\n\n154\n00:09:24.860 --> 00:09:26.752\nAnd it doesn't matter whether it's\nthe original list, the new list.\n\n155\n00:09:26.752 --> 00:09:31.890\nI just want a list with whatever\nthe numbers were, and 3 added to them.\n\n156\n00:09:31.890 --> 00:09:35.840\n&gt;&gt; That one you just finished writing,\nbecause that does make more sense.\n\n157\n00:09:35.840 --> 00:09:38.486\nBecause I'm going through like, \"okay,\nwell that makes sense, I can see that.\".\n\n158\n00:09:38.486 --> 00:09:42.969\nThis is just a more\nelegant way of saying it,\n\n159\n00:09:42.969 --> 00:09:48.070\neasier to understand,\nand more comprehensive.\n\n160\n00:09:49.360 --> 00:09:50.550\n&gt;&gt; You would think that.\n\n161\n00:09:50.550 --> 00:09:55.000\nBut this is actually such a common\npattern, there's something else.\n\n162\n00:09:55.000 --> 00:09:57.180\nAre you ready Vonne?\nAre you ready?\n\n163\n00:09:57.180 --> 00:09:58.420\n&gt;&gt; Okay.\n\n164\n00:09:58.420 --> 00:09:59.360\n&gt;&gt; We'll see.\n\n165\n00:09:59.360 --> 00:10:03.460\nRemember this one, cuz if you had to\nchoose, I would also pick this one.\n\n166\n00:10:03.460 --> 00:10:06.430\nSo for each one of these,\nadd it to the other one.\n\n167\n00:10:06.430 --> 00:10:08.520\nAll right, this is such a common thing.\n\n168\n00:10:08.520 --> 00:10:10.920\nI wanna take a list of one thing and\n\n169\n00:10:10.920 --> 00:10:14.740\ncreate another list with changes\nto that original list, right?\n\n170\n00:10:14.740 --> 00:10:19.130\nWe're adding numbers, maybe you're\nadding hello to the beginning of names.\n\n171\n00:10:19.130 --> 00:10:23.969\nMaybe you're taking a first name, last\nname and you're switching them around.\n\n172\n00:10:23.969 --> 00:10:29.010\nAnd putting in commas so that they're\nin phonebook style, whatever it may be.\n\n173\n00:10:29.010 --> 00:10:32.309\nSo we're gonna keep this and\n\n174\n00:10:32.309 --> 00:10:37.260\nyou know what, I'm gonna keep this here.\n\n175\n00:10:37.260 --> 00:10:38.550\nNo, excuse me.\n\n176\n00:10:38.550 --> 00:10:40.200\nI'm gonna get rid of this,\nget rid of this.\n\n177\n00:10:40.200 --> 00:10:42.410\nSo we're gonna print numbers, all right?\n\n178\n00:10:42.410 --> 00:10:44.238\nI wanna keep other, shortly.\n\n179\n00:10:44.238 --> 00:10:48.360\nI wanna say other equals square brackets.\n\n180\n00:10:50.678 --> 00:10:56.309\nNumber + 3 for number in numbers\n\n181\n00:10:58.476 --> 00:11:00.670\nThat is a list comprehension.\n\n182\n00:11:01.840 --> 00:11:02.931\nWhat we have is, and\n\n183\n00:11:02.931 --> 00:11:06.925\nthese can get very complicated we're\ngonna stick with very simple ones.\n\n184\n00:11:06.925 --> 00:11:09.510\nWhat we have is this first little part.\n\n185\n00:11:09.510 --> 00:11:11.990\nThis is an expression that\nevaluates to something.\n\n186\n00:11:11.990 --> 00:11:13.844\nAnd it goes all right,\n\n187\n00:11:13.844 --> 00:11:19.120\nfrom the left square bracket all\nthe way to a couple of key words.\n\n188\n00:11:19.120 --> 00:11:21.910\nFour is mostly what we're gonna see now.\n\n189\n00:11:22.960 --> 00:11:26.300\nIt will go,\nI'm gonna evaluate that the something.\n\n190\n00:11:26.300 --> 00:11:27.920\nWhat's number +3?\n\n191\n00:11:27.920 --> 00:11:30.220\nWell, it goes,\nI don't really know what that is.\n\n192\n00:11:30.220 --> 00:11:33.820\nSo, let me go over here and\nread the rest of this for loop.\n\n193\n00:11:33.820 --> 00:11:36.690\nIt's essentially a behind the scenes for\nloop.\n\n194\n00:11:36.690 --> 00:11:37.590\nIt's gonna say, alright.\n\n195\n00:11:37.590 --> 00:11:43.570\nSo, I'm going to go through every one\nof the numbers in the numbers list.\n\n196\n00:11:43.570 --> 00:11:45.790\nAnd I'm gonna replace that over.\n\n197\n00:11:45.790 --> 00:11:50.730\nIt is equivalent to saying \"For every one\nof the numbers in numbers, add 3 to it and\n\n198\n00:11:50.730 --> 00:11:52.020\nappend to a list.\".\n\n199\n00:11:53.100 --> 00:11:56.460\nExcept, now it's just a single line and\nit says \" what number + 3 for\n\n200\n00:11:56.460 --> 00:11:57.550\nnumber in numbers\".\n\n201\n00:11:57.550 --> 00:11:59.762\n&gt;&gt; Well if you would just\ngive me that as an option.\n\n202\n00:11:59.762 --> 00:12:01.332\nThen I would be like, that one.\n\n203\n00:12:01.332 --> 00:12:03.266\n[LAUGH] You tricked me Justin!\n\n204\n00:12:03.266 --> 00:12:05.770\n&gt;&gt; I did, I am a tricky person.\n\n205\n00:12:05.770 --> 00:12:09.486\nNow, what's interesting\nis there's no colon,\n\n206\n00:12:09.486 --> 00:12:14.070\nthey actually change the syntax of the for\nloop.\n\n207\n00:12:14.070 --> 00:12:20.040\nSo its four number in numbers,\nthis is okay.\n\n208\n00:12:20.040 --> 00:12:23.230\nLet's go see if it actually\ndoes what it says it does.\n\n209\n00:12:23.230 --> 00:12:26.460\nI could just be lying, no it doesn't.\n\n210\n00:12:26.460 --> 00:12:28.320\nIt creates new lists with those changes.\n\n211\n00:12:28.320 --> 00:12:29.840\n&gt;&gt; I was like are you tricking me again?\n\n212\n00:12:29.840 --> 00:12:32.250\nI'm like wait, no I picked that one,\nthat's the right one.\n\n213\n00:12:32.250 --> 00:12:34.480\nNow he's like,\n\" should it work?\" I'm like,\n\n214\n00:12:34.480 --> 00:12:37.250\nthe way you're saying it is making\nme feel like its a \"Gotcha!\".\n\n215\n00:12:37.250 --> 00:12:40.655\nBut is there anymore \"Gotchas\"?That's it?\n\n216\n00:12:40.655 --> 00:12:41.380\n&gt;&gt; Thats it now.\n\n217\n00:12:41.380 --> 00:12:46.751\nAs you continue to learn more\nabout Python these can become\n\n218\n00:12:46.751 --> 00:12:51.909\na little more,\nhow do you say complicated, all right?\n\n219\n00:12:51.909 --> 00:12:56.839\nBecause not only can you do changes, but\n\n220\n00:12:56.839 --> 00:13:01.624\nyou can add exclusions or inclusions or\n\n221\n00:13:01.624 --> 00:13:07.520\nconditions inside of a list comprehension.\n\n222\n00:13:07.520 --> 00:13:10.820\n&gt;&gt; Write all within the square bracket.\n\n223\n00:13:10.820 --> 00:13:11.559\n&gt;&gt; Yes.\n\n224\n00:13:11.559 --> 00:13:15.510\n&gt;&gt; Well, then that’s kind of like,\nif you wanted it to get more complicated.\n\n225\n00:13:15.510 --> 00:13:20.630\nI mean, it seems like,\nthe simplicity of putting it right within\n\n226\n00:13:20.630 --> 00:13:22.850\nthe list is why you want to use it.\n\n227\n00:13:22.850 --> 00:13:25.810\nIf you started going, let me add,\nyou know, everything in\n\n228\n00:13:25.810 --> 00:13:30.220\nthe kitchen sink in it, well that kind of\ndefeats the purpose of doing it this way.\n\n229\n00:13:30.220 --> 00:13:32.090\n&gt;&gt; It could,\nnow that brings up a good point.\n\n230\n00:13:32.090 --> 00:13:34.800\nYou should keep those, you should try\nto keep it as simple as possible.\n\n231\n00:13:34.800 --> 00:13:37.370\nDon't go crazy where you have\nfifteen lines that does a single\n\n232\n00:13:37.370 --> 00:13:39.060\nlist comprehension.\n\n233\n00:13:39.060 --> 00:13:41.190\nBut, let me to show you one and\n\n234\n00:13:41.190 --> 00:13:44.090\nagain this will be a while before\nyou get real comfortable with this.\n\n235\n00:13:44.090 --> 00:13:46.290\nIt doesn't come up but\nwhen it comes up, it's handy.\n\n236\n00:13:46.290 --> 00:13:48.580\nLet's say that I only wanted to,\n\n237\n00:13:50.280 --> 00:13:54.870\nI wanted to add 3 to the numbers, but\nonly if the number was an even number.\n\n238\n00:13:54.870 --> 00:13:55.690\nI only want to keep the evens.\n\n239\n00:13:55.690 --> 00:13:58.180\nWell there's actually two parts to that.\n\n240\n00:13:59.350 --> 00:14:03.410\nFor every number in number,\nif it's even I want to keep it, all right?\n\n241\n00:14:03.410 --> 00:14:05.843\nBut I also wanna add 3 to it,\nwhich indirectly makes it odd.\n\n242\n00:14:05.843 --> 00:14:09.500\nSo I'm gonna say number + 3 for\n\n243\n00:14:09.500 --> 00:14:14.377\nnumber in numbers if number % 2 = 0, and\n\n244\n00:14:14.377 --> 00:14:21.020\nyou can think of this is,\nas if that's 8, all right?\n\n245\n00:14:21.020 --> 00:14:24.640\nSo if I take the remainder when\ndividing by 2 and there's no remainder,\n\n246\n00:14:24.640 --> 00:14:26.780\nthen it is an even number.\n\n247\n00:14:26.780 --> 00:14:31.880\nNow, that's actually all it does,\nlet's go see, or that's all we have to do,\n\n248\n00:14:31.880 --> 00:14:36.900\nlet's go see what it does.\n\n249\n00:14:36.900 --> 00:14:41.752\nPython3 list comprehensions,\nand we have 5, 7, 9.\n\n250\n00:14:41.752 --> 00:14:45.732\nIt will actually get all of the numbers,\nwhy is that?\n\n251\n00:14:45.732 --> 00:14:52.370\nOr goes, here's the original,\nactually I'm gonna comment this out.\n\n252\n00:14:52.370 --> 00:14:55.410\nClear this and re-run it so\nwe have comparison.\n\n253\n00:14:55.410 --> 00:14:59.820\nSo, it goes alright I'm gonna\ncreate this list from this one.\n\n254\n00:14:59.820 --> 00:15:02.854\nSo it says \"For each one of these numbers,\nI wanna add 3 but\n\n255\n00:15:02.854 --> 00:15:05.489\nonly if it's even,\notherwise I don't want it\".\n\n256\n00:15:06.700 --> 00:15:08.010\nIs 1 an even number?\n\n257\n00:15:08.010 --> 00:15:09.780\nNo, skip it.\n\n258\n00:15:09.780 --> 00:15:10.900\nIs 2 an even number?\n\n259\n00:15:10.900 --> 00:15:14.250\nYes, then add 3 and put it in there.\n\n260\n00:15:14.250 --> 00:15:15.450\nIs three an even number?\n\n261\n00:15:15.450 --> 00:15:16.510\nNo, skip it.\n\n262\n00:15:16.510 --> 00:15:17.600\nIs 4 an even number?\n\n263\n00:15:17.600 --> 00:15:20.530\nYes, add 3, put it in there.\n\n264\n00:15:20.530 --> 00:15:21.730\nIs five an even number?\n\n265\n00:15:21.730 --> 00:15:22.660\nNo.\n\n266\n00:15:22.660 --> 00:15:24.290\nIs 6 an even number?\n\n267\n00:15:24.290 --> 00:15:27.390\nYes, add 3, put it in there.\n\n268\n00:15:27.390 --> 00:15:29.280\nSo you can do exclusions.\n\n269\n00:15:30.390 --> 00:15:33.670\nNow those are probably the two most\ncommon things that you're going to do\n\n270\n00:15:33.670 --> 00:15:35.890\nat the beginning and\nyou can get more complicated.\n\n271\n00:15:35.890 --> 00:15:39.960\nYou can add an and, and\nan or and all these things.\n\n272\n00:15:39.960 --> 00:15:42.450\nIt's kinda ad nauseam there.\n\n273\n00:15:42.450 --> 00:15:45.170\nThere is one other thing that you can do,\nbut\n\n274\n00:15:45.170 --> 00:15:49.070\nI'm actually gonna hold off til later,\nwhere it starts to make sense.\n\n275\n00:15:49.070 --> 00:15:50.398\nWhere you go.\n\n276\n00:15:50.398 --> 00:15:54.120\nIt's called conditional assignment, so.\n\n277\n00:15:54.120 --> 00:15:57.322\nWhere this if goes does matter.\n\n278\n00:15:57.322 --> 00:15:58.724\nNotice the if.\n\n279\n00:15:58.724 --> 00:16:02.672\nIs after this for number in numbers.\n\n280\n00:16:02.672 --> 00:16:06.520\nThat is the filter operation.\n\n281\n00:16:06.520 --> 00:16:10.160\nIf you put at other places here,\nyou may get different results.\n\n282\n00:16:10.160 --> 00:16:14.040\nBut I'm not gonna cover that\nat his moment just because\n\n283\n00:16:14.040 --> 00:16:16.620\nwhy throw in a wrench in things.\n\n284\n00:16:16.620 --> 00:16:22.030\nBut this is a list comprehension and I'm,\nVaughn, I'm going to be upfront with you.\n\n285\n00:16:22.030 --> 00:16:24.910\nRemember they ask you something,\nit's a little tricky.\n\n286\n00:16:24.910 --> 00:16:26.280\nSo it's completely okay.\n\n287\n00:16:26.280 --> 00:16:27.760\nThis is a list comprehension.\n\n288\n00:16:27.760 --> 00:16:29.700\nNotice the square brackets.\n\n289\n00:16:29.700 --> 00:16:34.270\nIf I go here and I put parentheses,\nwhat is other going to be?\n\n290\n00:16:36.630 --> 00:16:41.760\nWhatever the syntax is for\nthe parentheses, which is [INAUDIBLE].\n\n291\n00:16:41.760 --> 00:16:42.935\nWhat is it?\n\n292\n00:16:42.935 --> 00:16:47.290\n&gt;&gt; Topples\n&gt;&gt; Topples [LAUGH] I was like, topples?\n\n293\n00:16:47.290 --> 00:16:50.430\n&gt;&gt; I know, I'm like,\nwhat did you just say?\n\n294\n00:16:50.430 --> 00:16:53.040\n&gt;&gt; So, my beard obscures my mouth.\n\n295\n00:16:53.040 --> 00:16:56.450\n&gt;&gt; I, and I was like it\nchanges what data type it is.\n\n296\n00:16:56.450 --> 00:17:01.720\nAnd that's where I was like I know that\nthat means that we're doing it different.\n\n297\n00:17:01.720 --> 00:17:03.160\nI just couldn't remember which one it was.\n\n298\n00:17:04.340 --> 00:17:06.645\n&gt;&gt; But I knew it wasn't a listening war!\n\n299\n00:17:06.645 --> 00:17:08.690\n[LAUGH]\n&gt;&gt; And that's common, but\n\n300\n00:17:08.690 --> 00:17:09.739\nhere's the tricky part.\n\n301\n00:17:10.850 --> 00:17:14.780\n&gt;&gt; I would say nine times out of ten,\n99 times out of 100.\n\n302\n00:17:14.780 --> 00:17:22.400\nIf you're new to python, that's gong to\nbe a tuple filled with those changes.\n\n303\n00:17:22.400 --> 00:17:27.480\nSo you come over here and start doing\nyour stuff and say yeah that's awesome.\n\n304\n00:17:27.480 --> 00:17:30.440\nAnd you go list comprehension and\n\n305\n00:17:30.440 --> 00:17:34.120\nyou do not get a tuple,\nit actually means something else.\n\n306\n00:17:34.120 --> 00:17:39.420\nIf you put parenthesis instead of square\nbrackets, it is not a list comprehension.\n\n307\n00:17:39.420 --> 00:17:41.450\nIt does not create a list.\n\n308\n00:17:41.450 --> 00:17:43.320\nIt also does not create a tuple.\n\n309\n00:17:44.640 --> 00:17:46.390\nIt creates something called a generator.\n\n310\n00:17:47.430 --> 00:17:52.240\nNow generators, you can think of as\nthe possibility of becoming a list.\n\n311\n00:17:53.590 --> 00:17:59.860\nGenerators don't actually get made until\nyou go to use them in a four loop,\n\n312\n00:17:59.860 --> 00:18:01.008\nor something of that.\n\n313\n00:18:01.008 --> 00:18:06.010\nThere like lazy, they're super lazy.\n\n314\n00:18:06.010 --> 00:18:09.889\nSo what this is, is you can think\nof a generator as the possibility\n\n315\n00:18:11.180 --> 00:18:14.190\nof giving you elements\nthat would go into a list.\n\n316\n00:18:14.190 --> 00:18:16.460\nBut it currently is just hanging out.\n\n317\n00:18:16.460 --> 00:18:19.370\nThis is like, all right, I'm just\ngonna hang out till you need me, and\n\n318\n00:18:19.370 --> 00:18:20.710\nthen we'll come around.\n\n319\n00:18:20.710 --> 00:18:22.530\nCome on, let's hang out in\nthe clip board or something.\n\n320\n00:18:22.530 --> 00:18:28.070\nLike okay, you do exist In\nsome ether form or whatever.\n\n321\n00:18:28.070 --> 00:18:31.956\nBut I'm just waiting\nuntil I'm gonna call it.\n\n322\n00:18:31.956 --> 00:18:33.398\nThat's weird, okay.\n\n323\n00:18:33.398 --> 00:18:35.390\nThis is the first time we've\nbeen introduced to this.\n\n324\n00:18:35.390 --> 00:18:39.110\nSo I'm assuming obviously there's\na reason why you would want this.\n\n325\n00:18:39.110 --> 00:18:42.290\nBut at this point we\njust go don't do this.\n\n326\n00:18:42.290 --> 00:18:44.270\n&gt;&gt; So I'm a stay away because\nit's hard to reason them out.\n\n327\n00:18:44.270 --> 00:18:45.350\nBecause you'll start printing.\n\n328\n00:18:45.350 --> 00:18:47.590\n&gt;&gt; All right,\nyou're going to print the console,.\n\n329\n00:18:47.590 --> 00:18:49.710\nYou go I don't know what that is.\n\n330\n00:18:49.710 --> 00:18:51.840\nI don't know what's in there.\n\n331\n00:18:51.840 --> 00:18:57.030\nThis, the reason I show you this is\nto let you know these are there.\n\n332\n00:18:57.030 --> 00:19:01.590\nYou will experience them in\nPython 3 because where possible\n\n333\n00:19:01.590 --> 00:19:04.330\nPython 3 has transitioned to generators.\n\n334\n00:19:05.590 --> 00:19:08.820\nAnd the reason being I come over here and\nI look at this number.\n\n335\n00:19:08.820 --> 00:19:11.870\nThat is only six numbers and\nI have ten million numbers.\n\n336\n00:19:11.870 --> 00:19:15.980\nThat means it has to\ncreate the whole list and\n\n337\n00:19:15.980 --> 00:19:20.110\nactually hold that entire list in memory.\n\n338\n00:19:20.110 --> 00:19:23.980\nIt means that somewhere in your computer\nthere is this little bunch of silicone\n\n339\n00:19:23.980 --> 00:19:26.090\nthat has the representation of that list.\n\n340\n00:19:26.090 --> 00:19:28.350\nThat can be very large and\nget very expensive.\n\n341\n00:19:29.350 --> 00:19:33.170\nAs far as, it may take a lot of memory,\nit may be slow.\n\n342\n00:19:33.170 --> 00:19:36.760\nYou may have to, maybe you only need\nthe first three elements of that list.\n\n343\n00:19:36.760 --> 00:19:39.380\nBut you go, am I gonna get lists and\nlists and lists?\n\n344\n00:19:40.910 --> 00:19:43.210\nSo what this does is it says,\nyou know what?\n\n345\n00:19:43.210 --> 00:19:46.300\nI'm only gonna give you\nelements as you need them and\n\n346\n00:19:46.300 --> 00:19:48.770\nI'm gonna do it on the fly, right?\n\n347\n00:19:48.770 --> 00:19:53.260\nYou can think of it as instead of\nyour parents giving you fat stacks of\n\n348\n00:19:53.260 --> 00:19:54.410\ncash, right.\n\n349\n00:19:54.410 --> 00:19:57.040\nThey're like, all right, so\nhere's all the money you're gonna get for\n\n350\n00:19:57.040 --> 00:20:00.650\nthe next ten years, they went,\nyou need some money?\n\n351\n00:20:00.650 --> 00:20:01.270\nHere you go.\n\n352\n00:20:01.270 --> 00:20:02.010\nYou need some money?\n\n353\n00:20:02.010 --> 00:20:03.450\nHere you go.\nYou need some money?\n\n354\n00:20:03.450 --> 00:20:05.210\nHere you go.\nSo that's a generator.\n\n355\n00:20:05.210 --> 00:20:07.570\nIt's kind of like a little trickle.\n\n356\n00:20:07.570 --> 00:20:13.621\nNow, If I want to iterate over this,\n\n357\n00:20:13.621 --> 00:20:17.526\nif I come here and say for\n\n358\n00:20:17.526 --> 00:20:23.403\nelement in other: print.\n\n359\n00:20:23.403 --> 00:20:25.590\nAnd I come over here and I run this.\n\n360\n00:20:29.500 --> 00:20:31.020\nList comprehension.\n\n361\n00:20:31.020 --> 00:20:35.050\nIt still works.\n\n362\n00:20:35.050 --> 00:20:38.320\nI get five, seven, and nine, but\n\n363\n00:20:38.320 --> 00:20:42.800\nit gave me five, seven, and\nnine, there's that C again.\n\n364\n00:20:42.800 --> 00:20:48.500\nIt gives me five, seven, and nine,\nas I ask for them in this prelude.\n\n365\n00:20:48.500 --> 00:20:53.100\nLikewise, they're one time use.\n\n366\n00:20:54.360 --> 00:20:55.500\nOkay.\n\n367\n00:20:55.500 --> 00:20:58.310\nSo, it said here's your three elements,\ncool we're done.\n\n368\n00:20:58.310 --> 00:21:00.323\nIf you try to do that one more time\n\n369\n00:21:03.642 --> 00:21:09.200\nNotice theres nothing printed\nat the bottom, that second.\n\n370\n00:21:09.200 --> 00:21:12.520\nYour mom and dad is broke,\nthe generator is broke.\n\n371\n00:21:12.520 --> 00:21:14.430\nIt doesn't have anything else to give you.\n\n372\n00:21:14.430 --> 00:21:18.990\nSo it's one time it is it's lazy for\nthe most part,\n\n373\n00:21:18.990 --> 00:21:20.950\nI just want you to be aware of this.\n\n374\n00:21:20.950 --> 00:21:24.460\nI'm not gonna use this as a great\ndeal if I can stay away from it.\n\n375\n00:21:24.460 --> 00:21:27.760\nBecause it's easier to reason\nabout list at least for now.\n\n376\n00:21:27.760 --> 00:21:33.550\nBut do know that Python 3 has kind of\nwent to this laziness if possible.\n\n377\n00:21:33.550 --> 00:21:36.450\nBecause number one it'll\nmake your programs faster.\n\n378\n00:21:36.450 --> 00:21:39.680\nBecause you don't have to calculate or\ngenerate.\n\n379\n00:21:39.680 --> 00:21:42.080\nI can actually make things all at once.\n\n380\n00:21:42.080 --> 00:21:44.360\nYou can just use them as you need them.\n\n381\n00:21:44.360 --> 00:21:50.140\nAnd number two, they are less resource\nintensive so it's kind of a win-win.\n\n382\n00:21:50.140 --> 00:21:53.100\nThey are a little harder\nto reason about so\n\n383\n00:21:53.100 --> 00:21:55.370\nwe're gonna stay with list when possible.\n\n384\n00:21:55.370 --> 00:21:59.080\n&gt;&gt; So list comprehension\nshould be used on a list\n\n385\n00:22:00.150 --> 00:22:03.050\nthat you just keep it\nthat way don;t try and\n\n386\n00:22:03.050 --> 00:22:07.110\ngo and changing it all up into these\n&gt;&gt; Tuples because that's what it\n\n387\n00:22:07.110 --> 00:22:09.120\nmeans when you put it in parenthesis.\n\n388\n00:22:09.120 --> 00:22:11.270\n&gt;&gt; And if you do absolutely want a tuple.\n\n389\n00:22:11.270 --> 00:22:17.430\nLet's say I wanted this list in\nthis comprehension to be a tuple.\n\n390\n00:22:17.430 --> 00:22:21.900\nI guess we'll just come over here and\nyou gotta tupple and\n\n391\n00:22:21.900 --> 00:22:24.630\nyou feed it that list comprehension.\n\n392\n00:22:26.240 --> 00:22:29.960\nCancel, save, so you just come here and\nsay tuple, parentheses.\n\n393\n00:22:29.960 --> 00:22:35.660\nAnd you put the list inside\nof the function named tuple.\n\n394\n00:22:35.660 --> 00:22:36.900\nAnd you actually get a tuple back out.\n\n395\n00:22:36.900 --> 00:22:40.230\n&gt;&gt; Because now you're still doing\nthe list comprehension as a list and\n\n396\n00:22:40.230 --> 00:22:42.080\nthen putting all of that.\n\n397\n00:22:42.080 --> 00:22:47.700\nYeah, so it's like yeah, you can do it\njust don't do it that way do it this way.\n\n398\n00:22:47.700 --> 00:22:50.880\n&gt;&gt; Exactly, if you replace square\nbrackets with parenthesis,\n\n399\n00:22:52.580 --> 00:22:54.550\nyou're results may be unexpected.\n\n400\n00:22:54.550 --> 00:22:57.060\nVery powerful concept once we get there.\n\n401\n00:22:57.060 --> 00:23:00.180\nI would argue list comprehension's\nare mind blowing for me.\n\n402\n00:23:00.180 --> 00:23:04.120\nI use them all the time because,\nI find them very easy to reason about.\n\n403\n00:23:04.120 --> 00:23:07.240\nBecause, it goes, I'm making a list.\n\n404\n00:23:07.240 --> 00:23:08.760\nLet's get rid of this\ncouple of shenanigans.\n\n405\n00:23:10.450 --> 00:23:12.970\nAlright if I look at this,\nI'm making a list,.\n\n406\n00:23:12.970 --> 00:23:16.740\nIt is going to be populated with\nwhatever this is evaluates to.\n\n407\n00:23:16.740 --> 00:23:17.700\nFor each number and numbers.\n\n408\n00:23:17.700 --> 00:23:22.510\nOkay, so I'm gonna take each one\nof these and add 3 to it, but\n\n409\n00:23:22.510 --> 00:23:25.460\nonly if the number is even.\n\n410\n00:23:25.460 --> 00:23:27.250\notherwise i'm just gonna ignore it.\n\n411\n00:23:27.250 --> 00:23:31.280\n&gt;&gt; So it reads very nicely, to me.\n\n412\n00:23:31.280 --> 00:23:35.740\nThere's nothing wrong with doing this,\nI tend to prefer this and\n\n413\n00:23:35.740 --> 00:23:37.240\nthis is very pythonic.\n\n414\n00:23:37.240 --> 00:23:38.560\nIt's called pythonic.\n\n415\n00:23:39.630 --> 00:23:43.800\nIf you start venturing to other languages,\nthey may not have these.\n\n416\n00:23:43.800 --> 00:23:49.170\nSo it's good to know this\nlittle bit Is equivalent.\n\n417\n00:23:49.170 --> 00:23:51.550\nThese accomplish the exact same thing.\n\n418\n00:23:51.550 --> 00:23:53.720\n&gt;&gt; Yeah, I mean I think this is\nvery useful like you said but\n\n419\n00:23:53.720 --> 00:23:55.540\nyou use this quite frequently.\n\n420\n00:23:55.540 --> 00:23:59.810\nYou need to add like the store\nreference number to your parts.\n\n421\n00:23:59.810 --> 00:24:02.590\nOr you need to add GNV to\neverything because now\n\n422\n00:24:02.590 --> 00:24:04.130\nit's going to be in the Gainsville store.\n\n423\n00:24:04.130 --> 00:24:07.860\nI mean all sorts of different\nreal world use case scenarious of\n\n424\n00:24:07.860 --> 00:24:10.250\nwhy you would use this comprehension.\n\n425\n00:24:10.250 --> 00:24:13.830\nyeah, and well Von,\nwell we've seen the ins and outs.\n\n426\n00:24:13.830 --> 00:24:16.850\nWe've spent a lot more time trying\nto find out how to populate a list\n\n427\n00:24:16.850 --> 00:24:18.020\nsome other ways.\n\n428\n00:24:18.020 --> 00:24:21.110\nJust to see how that compares\nto a list comprehension.\n\n429\n00:24:21.110 --> 00:24:24.870\nRemember square brackets and\nexpression that evaluates that something\n\n430\n00:24:24.870 --> 00:24:29.570\nhas to evaluate for\nelement in other collection.\n\n431\n00:24:29.570 --> 00:24:32.770\nAnd it will populate that list for\nyou and then you're off to the races.\n\n432\n00:24:32.770 --> 00:24:34.340\nA lot cleaner and\n\n433\n00:24:34.340 --> 00:24:37.840\nthere are a few gotcha's that you need to\nwatch out for, has to be square brackets.\n\n434\n00:24:37.840 --> 00:24:42.020\nOtherwise you get a generator and you\nknow depending on how you arrange these,\n\n435\n00:24:42.020 --> 00:24:43.500\nyou may get a syntax error.\n\n436\n00:24:43.500 --> 00:24:47.880\nSo kind of just play with these\nvery simple ones initially.\n\n437\n00:24:47.880 --> 00:24:50.830\nAnd it would be interesting if\nlist comprehensions were the only\n\n438\n00:24:50.830 --> 00:24:52.430\ncomprehensions we have.\n\n439\n00:24:52.430 --> 00:24:56.410\nBut they are not,\nwe're actually there's another one.\n\n440\n00:24:56.410 --> 00:24:59.130\nBut I don't think we're gonna\ndo that in this episode.\n\n441\n00:24:59.130 --> 00:25:02.670\n&gt;&gt; I think because list comprehension says\nwhatever other comprehension we're gonna\n\n442\n00:25:02.670 --> 00:25:04.160\ntalk about, saves with that thing.\n\n443\n00:25:04.160 --> 00:25:08.750\nSo we're good,\nwell my anxiety has subsided a little bit.\n\n444\n00:25:08.750 --> 00:25:12.710\nI'm feeling okay,\nlike that wasn't too bad.\n\n445\n00:25:12.710 --> 00:25:14.140\nSo thank you for that, Justin.\n\n446\n00:25:14.140 --> 00:25:17.160\nThank you for joining us, but we're\ngoing to go ahead and rap this one up.\n\n447\n00:25:17.160 --> 00:25:23.144\nSigning off for [INAUDIBLE],\nI've been your host Dawn Smith.\n\n448\n00:25:23.144 --> 00:25:26.069\n&gt;&gt; And I'm Justin Dennison.\n\n449\n00:25:26.069 --> 00:25:28.685\n&gt;&gt; And we'll see you soon.\n\n",
          "vimeoId": "269001819"
        },
        {
          "description": "In this episode, Justin and Vonne review how to create dictionaries as well as how to use list comprehensions to create dictionaries. Justin then extends the usage to dictionary comprehensions as well as provides a comparison of readability of dictionary comprehensions to others.",
          "length": "1678",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-5-1-dictionaries_comprehensions-050918-PGM.00_28_27_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-5-1-dictionaries_comprehensions-050918-PGM.00_28_27_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-5-1-dictionaries_comprehensions-050918-PGM.00_28_27_22.Still001-sm.jpg",
          "title": "Dictionary Comprehensions",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.205 --> 00:00:17.266\nHello, everyone and welcome back to\nanother exciting edition of DEVPRO.TV.\n\n3\n00:00:17.266 --> 00:00:18.923\nI'm your host, Vonne Smith, and\n\n4\n00:00:18.923 --> 00:00:21.735\nwe're continuing with more\nprogramming fundamentals.\n\n5\n00:00:21.735 --> 00:00:25.239\nAnd in this episode, we are going to\ntalk about dictionary comprehensions.\n\n6\n00:00:25.239 --> 00:00:28.411\nAnd here to help us is Mr.\nJustin Dennison, hello, how are you?\n\n7\n00:00:28.411 --> 00:00:30.593\n&gt;&gt; I am doing fantastic,\nVonne, how are you today?\n\n8\n00:00:30.593 --> 00:00:31.784\n&gt;&gt; I'm doing pretty good.\n\n9\n00:00:31.784 --> 00:00:35.105\nNow I know we have talked\nabout list comprehensions.\n\n10\n00:00:35.105 --> 00:00:38.310\nAnd it seemed like you just kind of\nadded some things in a little list.\n\n11\n00:00:38.310 --> 00:00:41.211\nAnd then I'm assuming that we're\ngoing to do the same thing for\n\n12\n00:00:41.211 --> 00:00:42.654\ndictionary comprehensions.\n\n13\n00:00:42.654 --> 00:00:46.258\n&gt;&gt; We are, we are, but\nthere's a few nuanced differences.\n\n14\n00:00:46.258 --> 00:00:50.184\nAnd actually,\none could use a list comprehension and\n\n15\n00:00:50.184 --> 00:00:53.073\nsome other things to get a dictionary.\n\n16\n00:00:53.073 --> 00:00:56.729\nBut why do we even need this?\n\n17\n00:00:56.729 --> 00:00:58.225\nWhy am I constructing a dictionary?\n\n18\n00:00:58.225 --> 00:01:01.205\nI thought we were just going to use dict,\n\n19\n00:01:01.205 --> 00:01:04.983\nnumber equals four,\nfavorite food equals pizza.\n\n20\n00:01:04.983 --> 00:01:08.220\nWe've seen this before,\nwell, let me set the scene.\n\n21\n00:01:08.220 --> 00:01:12.035\nThere are times where maybe you get data,\nor\n\n22\n00:01:12.035 --> 00:01:18.962\nsomeone's programmed it where you have\na list of labels, and a list of values.\n\n23\n00:01:18.962 --> 00:01:22.185\nAnd then this label\ncorresponds to this value,\n\n24\n00:01:22.185 --> 00:01:24.772\nthis label correspond to this value.\n\n25\n00:01:24.772 --> 00:01:26.352\nThis label corresponds to this value,\nit's kind of like a header.\n\n26\n00:01:26.352 --> 00:01:33.299\nBut really, you have to remember the first\nthing is always the favorite number.\n\n27\n00:01:33.299 --> 00:01:38.753\nThe second thing is always the favorite\nfood, the third thing is favorite pet.\n\n28\n00:01:38.753 --> 00:01:41.976\nYou really want those labels,\nso you're like,\n\n29\n00:01:41.976 --> 00:01:44.972\nI'm going to make these into dictionaries.\n\n30\n00:01:44.972 --> 00:01:48.382\nI'm going to make this into a dictionary,\nbut\n\n31\n00:01:48.382 --> 00:01:53.114\nyou have these two lists,\nwith headers and respective values.\n\n32\n00:01:53.114 --> 00:01:58.578\nWell, how do I do that, and you never know\nhow many one or the other's going to be.\n\n33\n00:01:58.578 --> 00:02:01.736\nSo you've got to put those together,\njust to make it a little easier.\n\n34\n00:02:01.736 --> 00:02:05.079\nYou're transforming data types and you\nwant to do this in a very particular way.\n\n35\n00:02:05.079 --> 00:02:09.526\nSo that is my most common use case for\nactually constructing a dictionary.\n\n36\n00:02:09.526 --> 00:02:12.808\nIs that I have two collections\nof things that are paired and\n\n37\n00:02:12.808 --> 00:02:14.557\nI want to create a dictionary.\n\n38\n00:02:14.557 --> 00:02:17.830\nI'm going to show you a couple of\nways that you could do that without\n\n39\n00:02:17.830 --> 00:02:19.361\na dictionary comprehension.\n\n40\n00:02:19.361 --> 00:02:23.531\nAnd then show you how a dictionary\ncomprehension can kind of alleviate those\n\n41\n00:02:23.531 --> 00:02:24.060\nthings.\n\n42\n00:02:24.060 --> 00:02:26.326\nAlso, there is a gotcha\nif you're not careful.\n\n43\n00:02:26.326 --> 00:02:29.674\nSo let's go ahead and\ntake a look at the screen here.\n\n44\n00:02:29.674 --> 00:02:32.399\nAnd I'm just in the terminal,\nI have actually,\n\n45\n00:02:32.399 --> 00:02:35.261\nI have list comprehensions open,\nleft that open.\n\n46\n00:02:35.261 --> 00:02:37.490\nI'm still in the programming\nfundamentals folder.\n\n47\n00:02:37.490 --> 00:02:44.420\nBut let's go ahead and touch,\nthere we go, dict underscore comp.py,\n\n48\n00:02:44.420 --> 00:02:48.749\nI do not trust myself\nsaying that first part.\n\n49\n00:02:48.749 --> 00:02:50.212\nNever, never, never.\n\n50\n00:02:50.212 --> 00:02:53.934\nSo, dictionary comprehensions,\nlet's close this out.\n\n51\n00:02:53.934 --> 00:02:59.458\nWe can get this a little nicer for\nus and let's start here, all right?\n\n52\n00:02:59.458 --> 00:03:03.089\nSo let's say labels.\n\n53\n00:03:03.089 --> 00:03:06.437\nLabels equals, and\n\n54\n00:03:06.437 --> 00:03:11.560\nthis is going to be first name,\n\n55\n00:03:11.560 --> 00:03:16.287\nfirst name, last name, and\n\n56\n00:03:16.287 --> 00:03:21.611\nI don't know, favorite food.\n\n57\n00:03:21.611 --> 00:03:26.630\nAll right, and then data, what is that?\n\n58\n00:03:26.630 --> 00:03:31.198\nWell, that's Vonne, Smith, and\nyou like pizza, right, Vonne?\n\n59\n00:03:31.198 --> 00:03:33.503\n&gt;&gt; Mm-hm.\n&gt;&gt; All right, I have these two lists but\n\n60\n00:03:33.503 --> 00:03:36.466\nnotice how they're kind of\nlinked together, right?\n\n61\n00:03:36.466 --> 00:03:41.596\nYou go, well, the first name is Vonne,\nthe last name is Smith,\n\n62\n00:03:41.596 --> 00:03:45.793\nfavorite food is pizza,\nbut they’re in two lists.\n\n63\n00:03:45.793 --> 00:03:50.248\nIf I wanted to find, I’m going to\nget a little complicated here,\n\n64\n00:03:50.248 --> 00:03:52.199\nif I kept these as two lists.\n\n65\n00:03:52.199 --> 00:03:56.567\nIf I was like, I can’t remember, I really\nwant to know what the favorite food is.\n\n66\n00:03:56.567 --> 00:04:00.466\nBut I don't remember if that's the third\nelement, or the fifth element, or\n\n67\n00:04:00.466 --> 00:04:02.808\nwhatever, you could do\nsomething like this.\n\n68\n00:04:02.808 --> 00:04:07.255\nAnd so I'm going to say, favorite food,\n\n69\n00:04:07.255 --> 00:04:11.195\nlet's say 4, we're going to say,\n\n70\n00:04:11.195 --> 00:04:16.675\nfavorite food index, wow,\nindex equals labels.\n\n71\n00:04:16.675 --> 00:04:22.017\nAnd I'm going to use index, which actually\nis going to find where something is.\n\n72\n00:04:22.017 --> 00:04:28.930\nAnd if you ever forget those,\nyou can always hop over to the rebel and\n\n73\n00:04:28.930 --> 00:04:32.829\nsay, there we go, list dir of a list.\n\n74\n00:04:32.829 --> 00:04:36.811\nAnd you can see this index is actually\ngoing to find something for you,\n\n75\n00:04:36.811 --> 00:04:39.931\nit's going to tell you what\nposition that that's in.\n\n76\n00:04:39.931 --> 00:04:44.045\nSo I'm going to clear out of this,\nhop over here, and\n\n77\n00:04:44.045 --> 00:04:48.809\nI want to know what the index of\nfavorite food is in the labels.\n\n78\n00:04:48.809 --> 00:04:54.879\nSo I'm going to get that index, and\nthen how do I get the favorite food?\n\n79\n00:04:54.879 --> 00:04:57.628\nFavorite food is, in fact,\n\n80\n00:04:57.628 --> 00:05:02.796\nthe data at the favorite food index,\nso I can do this.\n\n81\n00:05:02.796 --> 00:05:06.923\nLook it up in the labels,\ntake where it is and\n\n82\n00:05:06.923 --> 00:05:11.283\nfind the corresponding\nposition in the data.\n\n83\n00:05:11.283 --> 00:05:16.400\nAnd let's see if I did that right,\nfavorite food,\n\n84\n00:05:16.400 --> 00:05:21.400\nand we're just going to\nprint out favorite food.\n\n85\n00:05:21.400 --> 00:05:25.417\nSo let's go check this out, I found three,\n\n86\n00:05:25.417 --> 00:05:29.338\ncomprehension, favorite food is pizza.\n\n87\n00:05:29.338 --> 00:05:34.047\nSo what I did, and this is complicated,\nI'm not necessarily having you write this\n\n88\n00:05:34.047 --> 00:05:36.618\nfrom scratch, I went,\nis it the first name?\n\n89\n00:05:36.618 --> 00:05:38.405\nNo, is it the last name?\n\n90\n00:05:38.405 --> 00:05:41.686\nNo, favorite food, hey,\nyeah, that's, where am I?\n\n91\n00:05:41.686 --> 00:05:46.694\nI was at 012, cool, so index returned too,\n\n92\n00:05:46.694 --> 00:05:51.337\nand then now this has\nwhatever the match is.\n\n93\n00:05:51.337 --> 00:05:56.101\nYou have to be careful, though,\nbecause you may get something less,\n\n94\n00:05:56.101 --> 00:05:58.135\nthis index, you may return.\n\n95\n00:05:58.135 --> 00:06:02.573\nIf you're looking for a label that doesn't\nexist, then things are going to get weird.\n\n96\n00:06:02.573 --> 00:06:06.948\nBut we're going to make\nthe assumption that whatever we\n\n97\n00:06:06.948 --> 00:06:09.657\nput in this parentheses is there.\n\n98\n00:06:09.657 --> 00:06:15.108\nSo then it goes, cool, this is\nthe number 2, so what is the 0, 1, 2?\n\n99\n00:06:15.108 --> 00:06:18.692\nWell, that's pizza, so\nthat's the favorite food, so\n\n100\n00:06:18.692 --> 00:06:21.168\nI'm doing this pairing effectively.\n\n101\n00:06:21.168 --> 00:06:26.956\nYou're like, but dictionaries are keys,\nso I called these labels,\n\n102\n00:06:26.956 --> 00:06:32.171\nbut what if I called these keys,\nwhat if I called these values?\n\n103\n00:06:32.171 --> 00:06:36.489\nSo if I changed to that,\nI have a key array and a values array.\n\n104\n00:06:36.489 --> 00:06:40.135\nAnd at every position in the key array,\nI have a corresponding value.\n\n105\n00:06:40.135 --> 00:06:43.937\nSo first name is Vonne, last name\nis Smith, favorite food is pizza,\n\n106\n00:06:43.937 --> 00:06:45.788\nthat's what a dictionary does.\n\n107\n00:06:45.788 --> 00:06:50.285\nSo you go, okay,\nI don't particularly like this.\n\n108\n00:06:50.285 --> 00:06:55.305\nI would like to have it where\nI'd have first name colon Vonne,\n\n109\n00:06:55.305 --> 00:06:59.571\nlast name colon Smith,\nfavorite food colon pizza.\n\n110\n00:06:59.571 --> 00:07:01.662\nI don't want this in a dictionary.\n\n111\n00:07:01.662 --> 00:07:04.291\nSo, well,\nwe've learned about list apprehension so\n\n112\n00:07:04.291 --> 00:07:06.643\nactually I'm going to go ahead and\ndelete this.\n\n113\n00:07:06.643 --> 00:07:09.773\nGet it out of our way, out of our minds,\nbecause that’s not the preferred way,\n\n114\n00:07:09.773 --> 00:07:11.434\nbecause you can get all kinds of twisted.\n\n115\n00:07:11.434 --> 00:07:18.721\nI want, let’s just call it results, okay?\n\n116\n00:07:18.721 --> 00:07:25.681\nI’m going to come here, and I’m going\nto say, hm, you know what I want?\n\n117\n00:07:25.681 --> 00:07:32.437\nI actually want, I want the pairing,\nI want the pairing, how do I get this?\n\n118\n00:07:32.437 --> 00:07:39.665\nWell, I want the label,\nactually I mean to put parenthesis,\n\n119\n00:07:39.665 --> 00:07:44.397\nI want a label to be paired with the data.\n\n120\n00:07:45.877 --> 00:07:48.533\nIndex, that's not going to work.\n\n121\n00:07:48.533 --> 00:07:53.454\nSo I'm going to come over here,\nand say, labelsIndex,\n\n122\n00:07:53.454 --> 00:07:58.489\nand you'll see why this is not\nmy prefered method either.\n\n123\n00:07:58.489 --> 00:08:05.960\nFour index in the range of\nzero to the len of labels.\n\n124\n00:08:08.430 --> 00:08:10.150\nThat is a lot, all right.\n\n125\n00:08:10.150 --> 00:08:13.130\nSo, let me break this up so\nwe can read this a little better.\n\n126\n00:08:13.130 --> 00:08:17.290\nAnd because this is a list\ncomprehension I can do this.\n\n127\n00:08:17.290 --> 00:08:18.950\nI can kind of split these.\n\n128\n00:08:18.950 --> 00:08:19.820\nWhat is this giving me?\n\n129\n00:08:19.820 --> 00:08:24.920\nI'm getting a list, where I get\nthe label and the corresponding data.\n\n130\n00:08:24.920 --> 00:08:27.490\nAt the zero, zero,\nat the one, one, at the two,\n\n131\n00:08:27.490 --> 00:08:30.920\ntwo for\nevery index in the length of the labels.\n\n132\n00:08:30.920 --> 00:08:36.110\nI'm making the assumption that there\nis a value for every label that exists.\n\n133\n00:08:36.110 --> 00:08:38.600\nAll right so they're sending in data for\nevery label.\n\n134\n00:08:38.600 --> 00:08:39.465\nWhat do I get out?\n\n135\n00:08:39.465 --> 00:08:45.148\nprint( results) and\n\n136\n00:08:45.148 --> 00:08:48.150\npython3.\n\n137\n00:08:48.150 --> 00:08:50.470\nAnd now I have a list of tuples.\n\n138\n00:08:51.800 --> 00:08:55.060\nBut if we have a list of tuples\nwe learned that dictionaries\n\n139\n00:08:55.060 --> 00:08:58.820\ncan actually just give a list\nof tuples to the dict function.\n\n140\n00:09:00.590 --> 00:09:04.593\nSo if I come here and\n\n141\n00:09:04.593 --> 00:09:08.855\nI say, dict right.\n\n142\n00:09:08.855 --> 00:09:10.790\nI'll just put parenthesis\nin a parenthesis.\n\n143\n00:09:10.790 --> 00:09:16.030\nAnd you know what, I'm going to,\njust for clarity I'm gonna change that.\n\n144\n00:09:19.680 --> 00:09:24.960\nIt's the dictionary version of results,\nall right?\n\n145\n00:09:24.960 --> 00:09:30.271\nAnd then I'm gonna print\nthe results dictionary.\n\n146\n00:09:30.271 --> 00:09:32.740\nAll right, so\nlet's see how that plays out.\n\n147\n00:09:34.450 --> 00:09:41.450\nPython 3, oohh, I need to name\nthese files a little better.\n\n148\n00:09:41.450 --> 00:09:45.036\nSo if I zoom out just a little bit,\nnotice I have first_name: Vonne,\n\n149\n00:09:45.036 --> 00:09:47.579\nlast_name: Smith, favorite_food: pizza.\n\n150\n00:09:47.579 --> 00:09:51.193\nfirst_name: Vonne, last_name: Smith,\nfavorite_food: pizza.\n\n151\n00:09:51.193 --> 00:09:56.770\nBut now if I wanted to know what Vonne's\nfavorite food was, if it is now inside\n\n152\n00:09:56.770 --> 00:10:02.600\nof this dictionary,\nI'm gonna say favorite_food.\n\n153\n00:10:02.600 --> 00:10:05.600\nIt's a little more readable,\nso I would want that, okay.\n\n154\n00:10:07.650 --> 00:10:08.790\n&gt;&gt; But Vonne, I'm gonna ask you.\n\n155\n00:10:10.040 --> 00:10:13.760\nThis results, this lists\ncomprehension with couples and stuff.\n\n156\n00:10:13.760 --> 00:10:16.840\nI saw you a couple of times,\nI have a feeling like that's a lot.\n\n157\n00:10:16.840 --> 00:10:18.040\nI don't know if I like that.\n\n158\n00:10:18.040 --> 00:10:19.125\nHow're you feeling about this?\n\n159\n00:10:19.125 --> 00:10:21.259\n&gt;&gt; I don't know.\n\n160\n00:10:21.259 --> 00:10:24.426\n&gt;&gt; [LAUGH]\n&gt;&gt; Well to be honest I thought we were\n\n161\n00:10:24.426 --> 00:10:28.087\ngonna be working with dictionaries\nthemselves, I'm like wait these are just\n\n162\n00:10:28.087 --> 00:10:32.093\nlist comprehensions that we're just kind\nof taking multiple list comprehensions.\n\n163\n00:10:32.093 --> 00:10:36.910\nAnd then basically feeding it out into or\ncreating a dictionary.\n\n164\n00:10:36.910 --> 00:10:39.800\nSo that was one, I'm like okay, I get it.\n\n165\n00:10:41.200 --> 00:10:45.080\nSo far, I'm like it's okay, but\nI think your going to tell me why and\n\n166\n00:10:45.080 --> 00:10:48.590\nhow I can make it better and\nmake it a little more readable.\n\n167\n00:10:48.590 --> 00:10:51.870\n&gt;&gt; Yes, my hope is that.\n\n168\n00:10:51.870 --> 00:10:56.030\nSo, I'm actually going to get rid of that\nand I'm going to get rid of this and\n\n169\n00:10:56.030 --> 00:11:00.210\nI'm going to leave this previous\nresults just for comparison.\n\n170\n00:11:00.210 --> 00:11:04.110\nAnd I'm going to say results equal and\nthen curly braces.\n\n171\n00:11:06.310 --> 00:11:11.286\nI technically have made a dictionary,\nokay, remember that I could do first\n\n172\n00:11:11.286 --> 00:11:18.440\nname: Vonne like that I can do that.\n\n173\n00:11:18.440 --> 00:11:23.572\nAnd well, dictionary comprehension\nsays well if you give me a key,\n\n174\n00:11:23.572 --> 00:11:29.258\ncolon, value and then some things to\niterate over, I'll make it for you.\n\n175\n00:11:29.258 --> 00:11:33.297\nAll right, so what if I wanted\n\n176\n00:11:33.297 --> 00:11:38.650\na labels[index]: data[index]?\n\n177\n00:11:38.650 --> 00:11:44.725\nFor index in range of zero\n\n178\n00:11:44.725 --> 00:11:49.996\nto length of labels,\nwould that be all right?\n\n179\n00:11:49.996 --> 00:11:52.784\n&gt;&gt; It is [INAUDIBLE]\n&gt;&gt; [LAUGH]\n\n180\n00:11:52.784 --> 00:11:54.079\n&gt;&gt; You tricked me once again,\n\n181\n00:11:54.079 --> 00:11:57.964\nI'm like, wait I thought we're suppose\nto be doing this with dictionaries and\n\n182\n00:11:57.964 --> 00:11:59.840\nIike, now we are, it's like.\n\n183\n00:12:01.940 --> 00:12:04.370\nJustin, you're getting me again.\n\n184\n00:12:04.370 --> 00:12:04.980\n&gt;&gt; Shame!\n\n185\n00:12:04.980 --> 00:12:07.860\nAnd this should work.\n\n186\n00:12:07.860 --> 00:12:11.200\nThere are some better ways to do this.\n\n187\n00:12:11.200 --> 00:12:11.860\nWe'll see.\n\n188\n00:12:13.350 --> 00:12:14.810\nBut right here, ready?\n\n189\n00:12:16.370 --> 00:12:21.320\nSo python3, dictionary,\ncomprehension, boom there it is.\n\n190\n00:12:22.740 --> 00:12:23.360\nSo what do I do?\n\n191\n00:12:23.360 --> 00:12:26.280\nI get the labels at this position and\nthe data for this position,\n\n192\n00:12:26.280 --> 00:12:29.680\nI pair those up for each index and\nthe range of labels.\n\n193\n00:12:31.250 --> 00:12:31.750\nCool.\n\n194\n00:12:33.900 --> 00:12:35.854\nThis works, right.\n\n195\n00:12:35.854 --> 00:12:41.070\nIt's not as pretty as I would like for\nit to be.\n\n196\n00:12:41.070 --> 00:12:45.970\nThere are and there are some other ways.\n\n197\n00:12:45.970 --> 00:12:50.000\nBut before we get to those,\nI actually wanna, you notice this range.\n\n198\n00:12:51.000 --> 00:12:53.240\nYou can do what I'm getting ready to do,\nbut\n\n199\n00:12:53.240 --> 00:12:55.500\nwe're gonna see that it's gonna be weird.\n\n200\n00:12:55.500 --> 00:13:00.270\nI'm gonna comment this out and I've\nseen people go well I want results, and\n\n201\n00:13:00.270 --> 00:13:05.500\nI want a label, colon Datum,\nsingular for data, for\n\n202\n00:13:05.500 --> 00:13:11.960\nlabel in labels, for datum in data.\n\n203\n00:13:11.960 --> 00:13:14.570\nThere's actually a four and a four there.\n\n204\n00:13:17.390 --> 00:13:18.180\nGuess what?\n\n205\n00:13:18.180 --> 00:13:19.800\nThis is syntactically correct.\n\n206\n00:13:19.800 --> 00:13:22.640\nThis is valid python I look.\n\n207\n00:13:22.640 --> 00:13:24.160\nI'll just try it out.\n\n208\n00:13:24.160 --> 00:13:25.990\nWhat does results give me now?\n\n209\n00:13:25.990 --> 00:13:26.630\nLet's see.\n\n210\n00:13:31.360 --> 00:13:36.172\nFirst name pizza, last name pizza,\nfavorite food, pizza.\n\n211\n00:13:36.172 --> 00:13:38.073\nThat's unexpected.\n\n212\n00:13:38.073 --> 00:13:41.320\nThat is really unexpected.\n\n213\n00:13:41.320 --> 00:13:42.120\nWhy is that?\n\n214\n00:13:42.120 --> 00:13:45.630\nWhat's hard to tell in a dictionary?\n\n215\n00:13:45.630 --> 00:13:46.250\nWhat happened?\n\n216\n00:13:47.310 --> 00:13:50.330\nSo what we're gonna do is temporarily,\nwe're gonna move back to tuples.\n\n217\n00:13:50.330 --> 00:13:56.250\nI'm gonna change this to a comma,\nput parenthesis around here and\n\n218\n00:13:56.250 --> 00:13:59.060\nchange these curly braces\nto square brackets.\n\n219\n00:14:01.040 --> 00:14:05.030\nLet's go re run that,\nclear this out, re run.\n\n220\n00:14:05.030 --> 00:14:09.750\nFirst name Vonne, first name Smith,\nfirst name Pizza, last name Vonne,\n\n221\n00:14:09.750 --> 00:14:11.960\nlast name Smith,\nlast name Pizza, favorite Vonne,\n\n222\n00:14:11.960 --> 00:14:15.080\nfavorite food Smith,\nfavorite food Pizza, what are to do?\n\n223\n00:14:17.120 --> 00:14:21.170\nWell it said, okay first name,\nthat's the first label.\n\n224\n00:14:21.170 --> 00:14:24.390\nAnd it said, for each one of those labels,\nI wanna grab Vonne,\n\n225\n00:14:24.390 --> 00:14:26.530\nSmith and Pizza, and pair those up.\n\n226\n00:14:26.530 --> 00:14:31.450\nSo I got every possible combination\nof the first three labels and\n\n227\n00:14:31.450 --> 00:14:34.190\nthe three chunks of data.\n\n228\n00:14:34.190 --> 00:14:37.838\nAnd it said pair these up as\nmany possible ways as you can.\n\n229\n00:14:37.838 --> 00:14:41.230\nWhen I made that into a dictionary,\nit said you know what?\n\n230\n00:14:41.230 --> 00:14:42.610\nI'm just gonna run through these and\n\n231\n00:14:42.610 --> 00:14:46.950\nyou get one key with the word first name,\none key with last name.\n\n232\n00:14:46.950 --> 00:14:52.816\nOne key with favorite food, so\nif I change this back like so.\n\n233\n00:14:56.700 --> 00:14:59.703\nLabel and them like so,\n\n234\n00:14:59.703 --> 00:15:04.967\nif I change that back and\nI clear this out.\n\n235\n00:15:07.169 --> 00:15:10.370\nAnd I say python3, whoa,\nwe're in the future.\n\n236\n00:15:13.810 --> 00:15:17.110\nNow all it did was said, all right well,\nfirst thing was Vonne, but\n\n237\n00:15:17.110 --> 00:15:21.020\nI came to a first name Pizza pair so\nI put that in there afterwards.\n\n238\n00:15:21.020 --> 00:15:24.530\nSo order matters in this case.\n\n239\n00:15:24.530 --> 00:15:28.600\nSo first name Pizza,\nlast name Pizza, favorite food Pizza.\n\n240\n00:15:30.680 --> 00:15:32.180\nIs this confusing?\n\n241\n00:15:32.180 --> 00:15:35.760\nIt should be,\nbecause this is not what you expect.\n\n242\n00:15:35.760 --> 00:15:40.210\nAnd can cause issues as far\nas when we're writing code.\n\n243\n00:15:40.210 --> 00:15:43.250\n&gt;&gt; Okay, Justin, I know you stopped and\nlooked at me because you're like,\n\n244\n00:15:43.250 --> 00:15:47.060\nI've got a face over here going, what?\n\n245\n00:15:47.060 --> 00:15:49.438\nSo a few things.\n\n246\n00:15:49.438 --> 00:15:51.934\nDatum, I know that you're\njust making that word up,\n\n247\n00:15:51.934 --> 00:15:55.425\nyou could have put in Bob in there,\nbecause it's not a different color, so\n\n248\n00:15:55.425 --> 00:15:58.917\nit's not a reserved word, so That right\nthere was kinda throwing me off and\n\n249\n00:15:58.917 --> 00:16:02.770\nI was like, what, no, it's just the word\nso that's okay, temporary example.\n\n250\n00:16:02.770 --> 00:16:06.800\nYou got that C again so you can take that\noff, but I knew you were gonna get there.\n\n251\n00:16:07.890 --> 00:16:08.750\nI don't like this.\n\n252\n00:16:08.750 --> 00:16:12.690\nI'll just tell you that this is more\nconfusing because I feel like we're\n\n253\n00:16:12.690 --> 00:16:16.610\nlooping in all the wrong directions and\nall the wrong ways.\n\n254\n00:16:16.610 --> 00:16:19.220\nThe way that you have\nit there on line nine.\n\n255\n00:16:19.220 --> 00:16:21.380\nThat makes way more sense in my brain.\n\n256\n00:16:21.380 --> 00:16:26.378\nSo that's why I'm just glassed over\nright now going, I don't like this.\n\n257\n00:16:26.378 --> 00:16:29.310\n&gt;&gt; [LAUGH]\n&gt;&gt; You're absolutely correct all right.\n\n258\n00:16:29.310 --> 00:16:32.400\nSo first off, let's talk about that datum.\n\n259\n00:16:32.400 --> 00:16:34.900\nI just picked datum because\ndatum is singular for data.\n\n260\n00:16:34.900 --> 00:16:39.990\nAnd I could have made this Bob,\nBob, but, maybe\n\n261\n00:16:39.990 --> 00:16:44.510\nI wasn't clear that that is only in the\ncontext of this dictionary comprehension.\n\n262\n00:16:44.510 --> 00:16:48.300\nIt only exist because I have\nthis four blank and blank here.\n\n263\n00:16:49.320 --> 00:16:50.810\nDoes that make a little more sense?\n\n264\n00:16:50.810 --> 00:16:53.550\n&gt;&gt; Yeah, it took me a while and\nagain it was that color coding so\n\n265\n00:16:53.550 --> 00:16:57.480\nI'm like, wait that, no that's just\na variable, it's a temporary variable\n\n266\n00:16:57.480 --> 00:17:00.720\njust like you had done in our other\nexamples in our four loops and everything.\n\n267\n00:17:00.720 --> 00:17:07.460\nBut since it's datum, it sounds so\ncodey [LAUGH], for lack of better term.\n\n268\n00:17:07.460 --> 00:17:09.854\nI'm just like, wait that special right?\n\n269\n00:17:09.854 --> 00:17:11.996\nCuz she says this thing,\nwait, no, no, no, no, no, no,\n\n270\n00:17:11.996 --> 00:17:13.390\nno that doesn't make any difference.\n\n271\n00:17:13.390 --> 00:17:16.520\nSo it took me a while to first,\nget over that.\n\n272\n00:17:16.520 --> 00:17:19.060\nI still just don't like this.\n\n273\n00:17:19.060 --> 00:17:24.660\nI mean, the way that you have the take\nthis index, take this index, mash it,\n\n274\n00:17:24.660 --> 00:17:30.790\nand then just keep doing this for as long\nas these strings exist or these good.\n\n275\n00:17:30.790 --> 00:17:31.690\nNot strings.\n\n276\n00:17:31.690 --> 00:17:32.430\nLists.\n\n277\n00:17:32.430 --> 00:17:35.820\nAnd yeah, take that other one out.\n\n278\n00:17:35.820 --> 00:17:37.786\n&gt;&gt; You should have a bad\nfeeling about this,\n\n279\n00:17:37.786 --> 00:17:41.620\nand the only reason I show everybody this\nand like I said, it could be confusing.\n\n280\n00:17:41.620 --> 00:17:45.710\nIt probably is because we haven't\ntalked about four and four.\n\n281\n00:17:45.710 --> 00:17:47.110\nYou're like, but python is so readable.\n\n282\n00:17:47.110 --> 00:17:48.200\nMaybe it'll just work.\n\n283\n00:17:48.200 --> 00:17:51.910\nIt does work, but\nit doesn't work as you expect.\n\n284\n00:17:51.910 --> 00:17:55.060\nAnd those are the worst\nerrors to kind of track down.\n\n285\n00:17:55.060 --> 00:17:58.770\nBecause they don't\nactually break your code.\n\n286\n00:17:58.770 --> 00:18:03.530\nThey break the reasoning behind your\ncode because now first name, last name,\n\n287\n00:18:03.530 --> 00:18:05.510\nand favorite food are all pizza.\n\n288\n00:18:05.510 --> 00:18:07.770\nThat was not the anticipated result.\n\n289\n00:18:07.770 --> 00:18:12.150\nThis is valid Python this is like\na loop and a loop and a loop.\n\n290\n00:18:12.150 --> 00:18:14.659\nIt is doing the wrong thing, though.\n\n291\n00:18:14.659 --> 00:18:15.432\nBut it will run.\n\n292\n00:18:15.432 --> 00:18:23.140\n&gt;&gt; This is, okay so full disclosure,\nwe do my Excel episodes in the same day.\n\n293\n00:18:23.140 --> 00:18:27.990\nThis is the exact same thing that\nhappened in our index function and\n\n294\n00:18:27.990 --> 00:18:30.070\nit's just like this does,\nwait or it was match,\n\n295\n00:18:30.070 --> 00:18:35.110\nthe match functions it's going to give\nyou results, but they're just wrong for\n\n296\n00:18:35.110 --> 00:18:39.780\nwhat your numbers within your\nworksheet are wanting it to do.\n\n297\n00:18:40.850 --> 00:18:44.620\nIt will throw you for\na loop there, Justin.\n\n298\n00:18:44.620 --> 00:18:45.600\n&gt;&gt; It will.\nTwo of them.\n\n299\n00:18:45.600 --> 00:18:48.420\nNow there are valid use cases for\nhaving for\n\n300\n00:18:48.420 --> 00:18:50.561\nblank in blank, for\nblank in blank, for blank.\n\n301\n00:18:51.740 --> 00:18:55.550\nThis, in a dictionary comprehension,\nis typically not what you want to do.\n\n302\n00:18:55.550 --> 00:18:59.530\nBecause if you have,\nif you try to do this you will always get,\n\n303\n00:18:59.530 --> 00:19:04.980\neffectively all of the keys will\nbe assigned the last value.\n\n304\n00:19:04.980 --> 00:19:09.580\nSo notice how it's labeling Bob,\nBob comes from data, so it goes alright,\n\n305\n00:19:09.580 --> 00:19:13.340\nthese first three keys\nokay well all right but\n\n306\n00:19:13.340 --> 00:19:17.770\nthen each time around it assigns first\nname last name and favorite food again and\n\n307\n00:19:17.770 --> 00:19:21.630\nit will override the previous value so\nwhatever is last in this list will be\n\n308\n00:19:21.630 --> 00:19:24.820\nwhat everything is this\nis not what you want bad.\n\n309\n00:19:24.820 --> 00:19:27.560\nSo instead, this is good right?\n\n310\n00:19:27.560 --> 00:19:32.110\nThis actually works, let’s just make\nsure that I didn’t break anything else.\n\n311\n00:19:33.690 --> 00:19:36.200\nThis just works like you’d anticipate.\n\n312\n00:19:36.200 --> 00:19:37.660\nLike, yeah.\nThat, cool.\n\n313\n00:19:37.660 --> 00:19:38.750\nThat makes sense.\n\n314\n00:19:38.750 --> 00:19:41.030\nFirst name, last name, favorite food.\n\n315\n00:19:42.040 --> 00:19:45.450\nHowever, I would argue this is\nstill not as clean as it could be.\n\n316\n00:19:46.610 --> 00:19:48.500\nWe don’t want that other\nshenanigans we just saw.\n\n317\n00:19:48.500 --> 00:19:50.380\nAll right?\n\n318\n00:19:50.380 --> 00:19:52.400\nI'm gonna show you something,\nand give a brief introduction,\n\n319\n00:19:52.400 --> 00:19:55.010\nthere's a few of these that I'm gonna\ncome back in another episode, that\n\n320\n00:19:55.010 --> 00:20:00.610\nI call iteration helpers, and we're gonna\ntalk about those a little more in depth.\n\n321\n00:20:00.610 --> 00:20:02.210\nBut there's one called zip.\n\n322\n00:20:04.060 --> 00:20:07.130\nAnd it's a function, and\nlet me just show you.\n\n323\n00:20:07.130 --> 00:20:08.490\nI'm gonna comment this out again.\n\n324\n00:20:08.490 --> 00:20:09.470\nI hope that's all right Vonne.\n\n325\n00:20:10.930 --> 00:20:12.900\nBoom.\nAnd then I'm gonna say label.\n\n326\n00:20:14.640 --> 00:20:16.130\nAnd datum.\n\n327\n00:20:16.130 --> 00:20:22.529\nI'm still using those two values for\n\n328\n00:20:22.529 --> 00:20:29.560\nlabel comma datum in .zip labels data.\n\n329\n00:20:29.560 --> 00:20:31.310\nOkay?\nThis is a special function.\n\n330\n00:20:32.330 --> 00:20:35.020\nNow what a zip does is you can\nthink of it like a zipper.\n\n331\n00:20:36.300 --> 00:20:40.952\nHere's my labels, here's my data,\nand it goes [SOUND].\n\n332\n00:20:40.952 --> 00:20:44.420\nAnd it gives them to you as pairs,\ntwo at a time.\n\n333\n00:20:45.810 --> 00:20:49.530\nZip can do a few other things, but what\nit does is says well the first label goes\n\n334\n00:20:49.530 --> 00:20:52.850\nwith the first datum, the second\nlabel goes with the second datum.\n\n335\n00:20:52.850 --> 00:20:56.172\nAnd I can iterate over these and\nuse that tuple unpacking to go,\n\n336\n00:20:56.172 --> 00:21:00.170\nwell I want the first and the second\nas separate variable and then go,\n\n337\n00:21:00.170 --> 00:21:06.010\nlabel colon datum or label comma\ndatum in the zip of labels and data.\n\n338\n00:21:06.010 --> 00:21:07.840\n&gt;&gt; It's the same thing you\njust wrote in that other line.\n\n339\n00:21:07.840 --> 00:21:09.390\nYou got me again, Justin.\n\n340\n00:21:09.390 --> 00:21:13.110\nI'm over here going, man, really?\n\n341\n00:21:13.110 --> 00:21:18.360\nYeah, zip, yeah take the index and\nmash them all up.\n\n342\n00:21:18.360 --> 00:21:18.990\n&gt;&gt; Yep.\n\n343\n00:21:18.990 --> 00:21:20.340\n&gt;&gt; That's cool.\n\n344\n00:21:20.340 --> 00:21:24.630\n&gt;&gt; Yeah, so zip is very powerful, and\nyou'll see me use it a great deal.\n\n345\n00:21:24.630 --> 00:21:30.240\nThis is one of those iteration helpers,\nbut, before I say it works,\n\n346\n00:21:30.240 --> 00:21:38.100\nlet's just make sure that, let me make\nsure that it actually produces what I say.\n\n347\n00:21:38.100 --> 00:21:40.820\nFirst name Vonne, last name Smith,\nfavorite food pizza.\n\n348\n00:21:40.820 --> 00:21:42.130\nAnd it does.\n\n349\n00:21:42.130 --> 00:21:43.240\nOne caveat.\n\n350\n00:21:43.240 --> 00:21:45.840\nThe reason I haven't talked\nabout some of these before, and\n\n351\n00:21:45.840 --> 00:21:51.047\nwe're gonna talk about them in a separate\nepisode, is if I say print zip of\n\n352\n00:21:51.047 --> 00:21:56.759\nlabels and data, so all I did is say\nzip those together and print that out,\n\n353\n00:21:58.180 --> 00:22:03.760\nI've got three, its a zip object.\n\n354\n00:22:03.760 --> 00:22:05.630\nIt's kind of like a generator.\n\n355\n00:22:06.710 --> 00:22:08.220\nYou can't see much about it.\n\n356\n00:22:08.220 --> 00:22:11.110\nYou can't print it out and\ngo what is it doing?\n\n357\n00:22:11.110 --> 00:22:12.350\nYou have to know.\n\n358\n00:22:12.350 --> 00:22:15.520\nSo what you do is typically\nuse them in four loops or\n\n359\n00:22:15.520 --> 00:22:17.720\nin comprehension of other sorts.\n\n360\n00:22:17.720 --> 00:22:22.110\nTo do this index matching and\nzip collections together.\n\n361\n00:22:22.110 --> 00:22:25.590\nBut we'll talk more about\nthose in another episode.\n\n362\n00:22:25.590 --> 00:22:30.180\nBut me personally,\nthis one works, not my favorite.\n\n363\n00:22:30.180 --> 00:22:35.181\nThere is another way that we can\nbuild a dictionary out of two lists,\n\n364\n00:22:35.181 --> 00:22:38.362\nbut it requires a for\nloop and other stuff.\n\n365\n00:22:38.362 --> 00:22:42.909\nI tend to go toward this one cuz you can\n\n366\n00:22:42.909 --> 00:22:47.604\nfurther extend it and say if, wait for\n\n367\n00:22:47.604 --> 00:22:52.757\nit, label is not equal to favorite food.\n\n368\n00:22:52.757 --> 00:22:55.921\nGive me all the labels except\nthe one that's favorite food so\n\n369\n00:22:55.921 --> 00:22:59.660\nI can filter this out just like\nI did with a list comprehension.\n\n370\n00:22:59.660 --> 00:23:02.160\nAnd I'm actually gonna break this\nout of the next line just so\n\n371\n00:23:02.160 --> 00:23:04.830\nwe can read this, and I'm gonna tab over.\n\n372\n00:23:05.840 --> 00:23:11.820\nSo give me the label colon datum for\nlabel datum in the zip between those two,\n\n373\n00:23:11.820 --> 00:23:17.506\nif the label is not\nequal to favorite food.\n\n374\n00:23:17.506 --> 00:23:25.590\nLet's see and boom,\nnow I have first name and last name.\n\n375\n00:23:25.590 --> 00:23:27.290\nYou know what I like about this?\n\n376\n00:23:27.290 --> 00:23:30.200\nWhen you know these trick functions,\n\n377\n00:23:30.200 --> 00:23:34.440\nthis doesn't look a whole lot different\nthan a list function, not much.\n\n378\n00:23:34.440 --> 00:23:39.670\nIt creates a dictionary, which is\nentirely different, this is very clean,\n\n379\n00:23:39.670 --> 00:23:41.910\nvery readable and\nespecially with the formatting.\n\n380\n00:23:41.910 --> 00:23:43.871\nWhat do I want?\nWell, I want the label and\n\n381\n00:23:43.871 --> 00:23:48.592\ndatum to be paired up for each of those\npairs between these collections, but\n\n382\n00:23:48.592 --> 00:23:53.126\nonly if the label is not favorite food and\nyou can kind of expand this out.\n\n383\n00:23:53.126 --> 00:23:54.740\nSuper, super useful.\n\n384\n00:23:55.970 --> 00:23:57.916\nI tend to write code like this.\n\n385\n00:23:57.916 --> 00:24:00.168\nThis is acceptable.\n\n386\n00:24:00.168 --> 00:24:03.010\nMaybe not the greatest right here.\n\n387\n00:24:03.010 --> 00:24:06.749\nAnd just for the sake of completeness,\n\n388\n00:24:06.749 --> 00:24:11.507\nif you wanted to create\na results dictionary, and\n\n389\n00:24:11.507 --> 00:24:16.620\nsay for label in labels,\nresults label equals data.\n\n390\n00:24:16.620 --> 00:24:20.590\nBut now you're back to, how do I\nget the appropriate data back out?\n\n391\n00:24:21.620 --> 00:24:25.100\nSo how do I get the first one?\n\n392\n00:24:25.100 --> 00:24:27.755\nWell, now I gotta go,\nthere is another way.\n\n393\n00:24:27.755 --> 00:24:32.062\nI'm gonna say, well, I want the data,\n\n394\n00:24:32.062 --> 00:24:36.260\nI want the labels.index of the label.\n\n395\n00:24:36.260 --> 00:24:40.200\nAnd then I want to use that index here.\n\n396\n00:24:40.200 --> 00:24:43.950\nAnd this is really hard to reason about,\nthat's why I'm coming back to the end.\n\n397\n00:24:43.950 --> 00:24:47.038\nI could tell it's really hard to\nreason about because Vonne's going-\n\n398\n00:24:47.038 --> 00:24:47.846\n&gt;&gt; [LAUGH]\n\n399\n00:24:47.846 --> 00:24:49.230\n&gt;&gt; What are you doing there, Justin?\n\n400\n00:24:49.230 --> 00:24:50.280\nI don't know.\n\n401\n00:24:50.280 --> 00:24:52.570\n&gt;&gt; I was like, wait, wait, wait,\nwait, are we going backwards?\n\n402\n00:24:52.570 --> 00:24:53.920\nHe said, don't do this.\n\n403\n00:24:53.920 --> 00:24:55.450\n&gt;&gt; Yeah, don't do this.\n\n404\n00:24:55.450 --> 00:25:00.941\nIf you see code like this, then,\nif you're in Python 3, the reason you\n\n405\n00:25:00.941 --> 00:25:06.899\nsee code like this is Python 2 really\nsupports some of these comprehensions.\n\n406\n00:25:06.899 --> 00:25:10.011\nSo if people would say, well,\nI have an empty dictionary, and\n\n407\n00:25:10.011 --> 00:25:11.950\nI'm gonna run through all the labels,\n\n408\n00:25:11.950 --> 00:25:15.320\nwhich is the keys, and\nI'm gonna find the corresponding index.\n\n409\n00:25:15.320 --> 00:25:17.550\nAnd there's a couple\nalternative ways to do this,\n\n410\n00:25:17.550 --> 00:25:20.040\nwe'll see more of this in\nthe iterations helper.\n\n411\n00:25:20.040 --> 00:25:22.340\nThen I'm gonna say, in this dictionary,\n\n412\n00:25:22.340 --> 00:25:26.630\nset that label equal to this position,\ncorresponding position.\n\n413\n00:25:26.630 --> 00:25:32.496\nSo if I print out old and say results\ncuz we're using the results down here.\n\n414\n00:25:36.920 --> 00:25:39.340\nIt works, it's first name Vonne,\nlast name Smith.\n\n415\n00:25:39.340 --> 00:25:41.270\nFavorite food, pizza.\n\n416\n00:25:41.270 --> 00:25:45.110\nBut it's a lot, it's not very clean.\n\n417\n00:25:45.110 --> 00:25:46.480\nYou mess this up.\n\n418\n00:25:46.480 --> 00:25:51.520\nMaybe you accidentally say,\nI wanna find label in datum.\n\n419\n00:25:51.520 --> 00:25:56.839\nYou mistype a word, it's,\nI show you that just for completeness,\n\n420\n00:25:56.839 --> 00:26:00.241\nso you can say, cool, I see code like\nthat, we're gonna delete that, and\n\n421\n00:26:00.241 --> 00:26:04.570\nactually rearrange it to be a little more\nreadable, a little easier to reason about.\n\n422\n00:26:04.570 --> 00:26:10.230\nPart of it is my opinion, but\nI have talked to a whole bunch\n\n423\n00:26:10.230 --> 00:26:15.060\nof people that would rather read something\nlike this, or even this one than that\n\n424\n00:26:15.060 --> 00:26:20.350\ngiant four loop shenanigans\nthat I just deleted from there.\n\n425\n00:26:20.350 --> 00:26:26.820\nSo dictionary comprehensions, very useful,\nvery similar to a list comprehensions.\n\n426\n00:26:26.820 --> 00:26:28.120\nWe learned about zip.\n\n427\n00:26:28.120 --> 00:26:31.810\nThere's a few more of those what\nI'm calling iterations helpers.\n\n428\n00:26:31.810 --> 00:26:37.438\nRange is technically one of them that I\nuse a great deal, but there's a few more.\n\n429\n00:26:37.438 --> 00:26:40.764\nWe don't have enough time in this episode,\nwe're gonna, for the sake of completeness,\n\n430\n00:26:40.764 --> 00:26:43.740\nwe'll see a few other of those and we'll\nkeep them in their own treatment because\n\n431\n00:26:43.740 --> 00:26:45.128\nthere are some tricky parts to them.\n\n432\n00:26:45.128 --> 00:26:49.369\nBut those iteration helpers come in\nhandy when building dictionary and\n\n433\n00:26:49.369 --> 00:26:50.802\nlist comprehensions.\n\n434\n00:26:50.802 --> 00:26:55.950\nRemember, comprehensions can make\nyour code more readable, and\n\n435\n00:26:55.950 --> 00:26:58.120\nthey're fun, right?\n\n436\n00:26:58.120 --> 00:27:01.800\nThey're fun to play tricks on Vonne,\nso definitely join us on back.\n\n437\n00:27:01.800 --> 00:27:04.112\nBut for this episode, I think we're done,\n\n438\n00:27:04.112 --> 00:27:04.726\nVonne\n&gt;&gt; Yeah,\n\n439\n00:27:04.726 --> 00:27:08.041\nyou've put me through the ringer [LAUGH]\non these last two episodes, I will say.\n\n440\n00:27:08.041 --> 00:27:12.798\nBut it's one of those, I will say it's for\na good reason because while I'm over here\n\n441\n00:27:12.798 --> 00:27:17.390\ngoing like, God, why wouldn't you\njust tell me it in the first place?\n\n442\n00:27:17.390 --> 00:27:21.329\nIf you would've, I would've\nnever been able to appreciate it\n\n443\n00:27:21.329 --> 00:27:25.133\nbecause I could see all the other ways and\nsaid, [SOUND], no.\n\n444\n00:27:25.133 --> 00:27:29.975\nSo I do appreciate that, even though\nI'm still a little mad at you for\n\n445\n00:27:29.975 --> 00:27:31.240\ndoing that to me.\n\n446\n00:27:31.240 --> 00:27:32.670\nBut yeah, these are really cool.\n\n447\n00:27:32.670 --> 00:27:36.504\nI really like these and see how\nsuper handy and useful they can be.\n\n448\n00:27:36.504 --> 00:27:40.315\nAll right, so if you wanna come back for\nmore of watching Justin play tricks on me,\n\n449\n00:27:40.315 --> 00:27:42.270\nwell, then why don't you come on back?\n\n450\n00:27:42.270 --> 00:27:44.100\nBut for now, we're gonna wrap this one up.\n\n451\n00:27:44.100 --> 00:27:47.490\nSo signing off for DevProTV,\nI've been your host, Vonne Smith\n\n452\n00:27:47.490 --> 00:27:48.470\n&gt;&gt; And I'm Justin Dennison.\n\n453\n00:27:48.470 --> 00:27:49.677\n&gt;&gt; And we will see you soon.\n\n454\n00:27:49.677 --> 00:27:55.069\n[SOUND]\n\n",
          "vimeoId": "269002242"
        },
        {
          "description": "In this episode, Justin and  Vonne revisit the zip and range functions as a way of combining collections. Additionally, Justin demonstrates an additional iteration helper, enumerate.",
          "length": "2175",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-6-1-iteration_helpers-051018-PGM.00_36_05_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-6-1-iteration_helpers-051018-PGM.00_36_05_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-programmingfundamentals/techskills-programming-fundamentals-5-6-1-iteration_helpers-051018-PGM.00_36_05_13.Still001-sm.jpg",
          "title": "Iteration Helpers",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.926 --> 00:00:16.835\nHello everyone and welcome back to\nanother exciting edition of DEVPRO.TV.\n\n3\n00:00:16.835 --> 00:00:18.228\nI'm your host Vonne Smith and\n\n4\n00:00:18.228 --> 00:00:21.526\nwe're coming back with more on our\nprogramming fundamental series.\n\n5\n00:00:21.526 --> 00:00:24.673\nAnd in this episode, we're gonna be\ntalking about iteration helpers.\n\n6\n00:00:24.673 --> 00:00:27.677\nHere to help us is Mr.\nJustin Dennison, how are you?\n\n7\n00:00:27.677 --> 00:00:28.738\n&gt;&gt; I'm doing fantastic, Vonne,\n\n8\n00:00:28.738 --> 00:00:30.295\nhow are you?\n&gt;&gt; I am doing good.\n\n9\n00:00:30.295 --> 00:00:35.156\nSo iteration helper, as iteration is\njust keep on going like the next one,\n\n10\n00:00:35.156 --> 00:00:38.103\nthe next one,\nthe next one from the next one.\n\n11\n00:00:38.103 --> 00:00:42.998\nSo I'm assuming that you're going to\nreview some helpers that do that.\n\n12\n00:00:42.998 --> 00:00:46.498\n[LAUGH]\n&gt;&gt; [LAUGH] So these are hard to name and\n\n13\n00:00:46.498 --> 00:00:50.292\nI kinda lump these together\ncuz there's a whole bunch of\n\n14\n00:00:50.292 --> 00:00:52.809\nthings that are iteration helpers.\n\n15\n00:00:52.809 --> 00:00:56.802\nBut there are three kinda common ones\nthat I use especially when I'm talking to\n\n16\n00:00:56.802 --> 00:01:00.753\npeople who are just getting started,\nyou're going to interact with these.\n\n17\n00:01:00.753 --> 00:01:05.522\nAnd I wanted to touch on these; we've\nactually already looked at two of them.\n\n18\n00:01:05.522 --> 00:01:08.209\nBut I wanna dive a little\nbit further in there, and\n\n19\n00:01:08.209 --> 00:01:10.072\ntalk about what these things are.\n\n20\n00:01:10.072 --> 00:01:16.197\nAnd the three iteration helpers that we're\ngonna discuss, this is not the defacto,\n\n21\n00:01:16.197 --> 00:01:21.638\nthis not the exhaustive list, a range,\nzip, and a numerator, Ring zip and\n\n22\n00:01:21.638 --> 00:01:25.742\na numerate e are super super handy.\n&gt;&gt; Yeah, those are the ones we did in\n\n23\n00:01:25.742 --> 00:01:29.843\nthe list and the dictionary comprehensions\nwhere I was like, that's really cool,\n\n24\n00:01:29.843 --> 00:01:31.499\nlike that, that's pretty handy.\n\n25\n00:01:31.499 --> 00:01:36.376\nI can see where you would really want to\nbe able to do that cuz it's a big help.\n\n26\n00:01:36.376 --> 00:01:37.847\n&gt;&gt; It is incredibly helpful and\n\n27\n00:01:37.847 --> 00:01:42.079\nI just wanna make sure that everybody's\non board of what you're actually getting\n\n28\n00:01:42.079 --> 00:01:42.828\nin Python 3.\n\n29\n00:01:42.828 --> 00:01:45.859\nSo what we're gonna do is we're\nactually gonna start in the raffle.\n\n30\n00:01:45.859 --> 00:01:50.161\nAnd then we're gonna move to a file\njust to see how these are used.\n\n31\n00:01:50.161 --> 00:01:53.140\nBecause we wanna do it a little\ninspection, a little bit of exploration,\n\n32\n00:01:53.140 --> 00:01:53.676\nso to speak.\n\n33\n00:01:53.676 --> 00:01:56.036\nSo let's go ahead and\ntake a look at the screen here and\n\n34\n00:01:56.036 --> 00:01:59.941\nit doesn't actually matter whether you're\nin the Programming Fundamentals folder.\n\n35\n00:01:59.941 --> 00:02:01.516\nIf you're following along,\n\n36\n00:02:01.516 --> 00:02:04.919\nwe're gonna hop into a repel just\nto look at these three things.\n\n37\n00:02:04.919 --> 00:02:09.147\nBecause I'm gonna show you and\nprovide some warnings as well,\n\n38\n00:02:09.147 --> 00:02:14.266\nat how these can come about or how you\ncan inspect this and reason about them.\n\n39\n00:02:14.266 --> 00:02:16.705\nAll right, so let's go ahead and\ntype python3 and\n\n40\n00:02:16.705 --> 00:02:18.363\nthen we're gonna clear that off.\n\n41\n00:02:18.363 --> 00:02:20.351\nLet's say numbers, right?\n\n42\n00:02:20.351 --> 00:02:24.359\nUp until this point for the most part,\nI've been typing numbers,\n\n43\n00:02:24.359 --> 00:02:29.023\nexcept there was this one time I said\nrange, range, range, range, range.\n\n44\n00:02:29.023 --> 00:02:31.835\nSo I'm gonna say numbers range, and\n\n45\n00:02:31.835 --> 00:02:36.025\nI'm just gonna give it up,\nthe number 100, okay.\n\n46\n00:02:36.025 --> 00:02:41.051\nWe're gonna make sure we know all\nthe pieces to this, what is that?\n\n47\n00:02:41.051 --> 00:02:45.083\nIt's funny, cuz when you print it back\nout it's says it's a range from 0 to 100.\n\n48\n00:02:45.083 --> 00:02:50.941\nYou're like, man I'm glad you cleared that\nup for me, I was having a real hard time.\n\n49\n00:02:50.941 --> 00:02:55.543\nSo when you have kind of these other\nobjects that you can iterate over,\n\n50\n00:02:55.543 --> 00:03:00.153\nthese other things that you can\niterate over, but they are not a list.\n\n51\n00:03:00.153 --> 00:03:02.720\nI don't really know what this does.\n\n52\n00:03:02.720 --> 00:03:06.660\nNumber one,\nnever forget that you have help, right.\n\n53\n00:03:06.660 --> 00:03:09.865\nSo what is help range?\n\n54\n00:03:09.865 --> 00:03:15.418\nWe're going to touch on\nclasses in a future series.\n\n55\n00:03:15.418 --> 00:03:21.964\nYou can think of classes as a way of\nmolding a custom thing in Python.\n\n56\n00:03:21.964 --> 00:03:25.962\nFor our purposes though,\nwe can treat it like a function,\n\n57\n00:03:25.962 --> 00:03:30.295\njust like we've been calling\nthese other built in functions.\n\n58\n00:03:30.295 --> 00:03:36.697\nThere are two signatures,\nalright, range stop, range object.\n\n59\n00:03:36.697 --> 00:03:38.989\nSo this is saying this\nis what you get back.\n\n60\n00:03:38.989 --> 00:03:44.632\nRange, start, stop and then notice square\nbracket step, this is a range object.\n\n61\n00:03:44.632 --> 00:03:48.912\nWell, what is a range object,\nwell we'll get there.\n\n62\n00:03:48.912 --> 00:03:54.606\nReturn an object that produces a sequence\nof integers from start inclusive,\n\n63\n00:03:54.606 --> 00:03:59.613\nthat means including to stop,\nexclusive, not including by step.\n\n64\n00:03:59.613 --> 00:04:05.977\nRange i, j produce i, 1 + 1, i + 2,\nj- 1, that's kind of hard to see.\n\n65\n00:04:05.977 --> 00:04:09.934\nLet me zoom out just here a little bit,\nsee how it says j-1?\n\n66\n00:04:09.934 --> 00:04:14.082\nYou don't actually get the right-hand\nside, you will not get the end,\n\n67\n00:04:14.082 --> 00:04:15.108\nit is exclusive.\n\n68\n00:04:15.108 --> 00:04:18.146\nSo how do you overcome that,\nwell, you just overrun it.\n\n69\n00:04:18.146 --> 00:04:22.584\nIf you need that last one,\njust pick a bigger number for the end and\n\n70\n00:04:22.584 --> 00:04:23.815\nwe'll see that.\n\n71\n00:04:23.815 --> 00:04:28.785\nStart defaults to 0, so\nby default, 0s there, and\n\n72\n00:04:28.785 --> 00:04:34.320\nstop is omitted,\nrange(4) produces 0, 1, 2, 3.\n\n73\n00:04:34.320 --> 00:04:39.441\nSo start is 0,\nstop is actually what you put in here.\n\n74\n00:04:39.441 --> 00:04:42.892\nSo range(4), if you give it one number,\nyou're giving it just the stop.\n\n75\n00:04:42.892 --> 00:04:45.520\nSo start at 0 and give me stop.\n\n76\n00:04:45.520 --> 00:04:50.965\nStep by default is 1, it increments by 1.\n\n77\n00:04:50.965 --> 00:04:55.435\nSo I start at 0 by default,\nand I move up by 1 by default.\n\n78\n00:04:55.435 --> 00:05:00.493\nWhen given, it specifies the increment or\ndecrement, you can actually go backwards.\n\n79\n00:05:00.493 --> 00:05:05.395\nDo keep in mind, backwards is kind of a,\nooh, could be an iffy case.\n\n80\n00:05:05.395 --> 00:05:09.517\nAll right, so there's all these other\nattributes, know how there's dunder,\n\n81\n00:05:09.517 --> 00:05:10.495\ndunder, dunder?\n\n82\n00:05:10.495 --> 00:05:14.961\nA range of object can though give\nyou a count very similar to a list.\n\n83\n00:05:14.961 --> 00:05:18.694\nSo count how many times this value occurs,\nand\n\n84\n00:05:18.694 --> 00:05:22.826\nit can also give you the index\nof the value, right.\n\n85\n00:05:22.826 --> 00:05:26.664\nSo, where do it lie in this value?\n\n86\n00:05:26.664 --> 00:05:28.646\nEverything else,\nwe don't really need to worry about.\n\n87\n00:05:28.646 --> 00:05:30.629\nSo, if you cue and boom.\n\n88\n00:05:30.629 --> 00:05:35.613\nSo, range has these couple of\ndifferent forms, and you know well,\n\n89\n00:05:35.613 --> 00:05:37.805\nyou gotta type it correctly.\n\n90\n00:05:37.805 --> 00:05:41.276\nBut if we say numbers,\nit goes it's a range from 0 to 100.\n\n91\n00:05:41.276 --> 00:05:43.035\nWhat does that mean?\n\n92\n00:05:43.035 --> 00:05:47.697\nIf we say list,\ngonna pass a range to the list,\n\n93\n00:05:47.697 --> 00:05:51.174\nwe actually get the list version.\n\n94\n00:05:51.174 --> 00:05:55.201\nSo if we wanted a list so\nwe could print out and reason about it,\n\n95\n00:05:55.201 --> 00:05:59.079\nyou just say list of a range,\nand boom that's what you get.\n\n96\n00:05:59.079 --> 00:06:04.410\nAnd notice, I don't get 100 here I get 99.\n&gt;&gt; I was just gonna say,\n\n97\n00:06:04.410 --> 00:06:08.997\nso if you want 100 you would\ndo zero column 101 because\n\n98\n00:06:08.997 --> 00:06:13.217\n101 is the stopping point and\nthen it will go back and\n\n99\n00:06:13.217 --> 00:06:17.970\ngive you 100, that's the like overpacking.\n&gt;&gt; You're right,\n\n100\n00:06:17.970 --> 00:06:22.078\nyou're just stepping just a little bit so\nyou can make sure you get that, now.\n\n101\n00:06:22.078 --> 00:06:27.813\nThat overstep is actually dependent on\nthe step cuz we're counting by twos or\n\n102\n00:06:27.813 --> 00:06:32.327\nby threes, or whatever it may be,\nthen when you get things.\n\n103\n00:06:32.327 --> 00:06:36.461\nSo, before we get there, I see Von, Von\na sec, wait a minute, hold on a second.\n\n104\n00:06:36.461 --> 00:06:38.432\n&gt;&gt; No, it's just the iteration like,\n\n105\n00:06:38.432 --> 00:06:42.374\nthe two's, the four's, that's where\nthat final number you might have\n\n106\n00:06:42.374 --> 00:06:44.870\nto do some math, [LAUGH] and,\nthat might hurt.\n\n107\n00:06:44.870 --> 00:06:48.668\nSo, it's really like [SOUND].\n&gt;&gt; All, right I'll tel you what Von,\n\n108\n00:06:48.668 --> 00:06:50.845\nyou said the dreaded M word and\nmade me scared.\n\n109\n00:06:50.845 --> 00:06:55.083\nNo, I'm joking, there is a little bit of\nmath, it's not too bad but when in doubt,\n\n110\n00:06:55.083 --> 00:06:57.437\njust try it out,\nhop into the ruffle, [SOUND].\n\n111\n00:06:57.437 --> 00:07:00.408\nAll right, so let's try a few\nof this out to get a feel for\n\n112\n00:07:00.408 --> 00:07:04.030\nrange because in previous episodes\nI kinda just used them, right.\n\n113\n00:07:04.030 --> 00:07:06.274\nLet me expose you something\nyou're gonna need to know but\n\n114\n00:07:06.274 --> 00:07:07.549\nwe're gonna come back around.\n\n115\n00:07:07.549 --> 00:07:11.064\nSo if I say,\nI'm always gonna cal list, alright.\n\n116\n00:07:11.064 --> 00:07:13.188\nSo I always gonna make it a list so\nwe can see.\n\n117\n00:07:13.188 --> 00:07:18.473\nAnd I'm gonna say range of 10,\nlet's keep it smaller.\n\n118\n00:07:18.473 --> 00:07:21.301\nSo I give it a single number,\nthat mean I only get a stop.\n\n119\n00:07:21.301 --> 00:07:27.364\nI'm giving it where it ends, I start\nat zero by default, and I step by one.\n\n120\n00:07:27.364 --> 00:07:29.057\nSo, I'm gonna get zero to naught.\n\n121\n00:07:29.057 --> 00:07:34.238\nBut, as Vaughn said,\nwell what if you wanted 0 to 10?\n\n122\n00:07:34.238 --> 00:07:40.412\nWell, you just overstep it by one,\nand then I get 0 to 10, okay.\n\n123\n00:07:40.412 --> 00:07:44.330\nYou're like, well really I wanna start\nat 1, I want 1 to 10, and go on, and\n\n124\n00:07:44.330 --> 00:07:45.100\nthat's cool.\n\n125\n00:07:45.100 --> 00:07:50.500\nSo, you come in here and you add a warning\nat the beginning, when you do this form.\n\n126\n00:07:50.500 --> 00:07:55.119\nThis is now the start,\nthis is the stop, 1,\n\n127\n00:07:55.119 --> 00:07:59.736\n2, 3, 4, 5, 6, 7, 8, 9, 10,\n\n128\n00:07:59.736 --> 00:08:06.682\nI now have 1 to 10 By doing 1,\n11 because 11 is not included.\n\n129\n00:08:06.682 --> 00:08:09.430\nBut this is where it gets a little tricky.\n\n130\n00:08:09.430 --> 00:08:12.510\nThere is the possibility of\nan optional third argument.\n\n131\n00:08:13.680 --> 00:08:15.120\nBy default it is 1.\n\n132\n00:08:15.120 --> 00:08:17.862\nI'm gonna get the exact same thing out,\nokay?\n\n133\n00:08:17.862 --> 00:08:22.928\nBut now if I come here and\nI make this a 2,\n\n134\n00:08:22.928 --> 00:08:27.249\nnotice 1, 3, 5, 7, and 9.\n\n135\n00:08:27.249 --> 00:08:28.743\nWell, wait a minute.\n\n136\n00:08:28.743 --> 00:08:30.590\nNotice that it got rid of the 10.\n\n137\n00:08:30.590 --> 00:08:32.500\nWhy is the 10 not included now?\n\n138\n00:08:33.620 --> 00:08:35.700\nWell, it doesn't include 11.\n\n139\n00:08:35.700 --> 00:08:36.585\nBut you know what?\n\n140\n00:08:36.585 --> 00:08:37.657\nIt skipped over 10.\n\n141\n00:08:37.657 --> 00:08:44.110\nIt went 1, 3, 5, it skips the 2,\nthe 4, the 6, and 8.\n\n142\n00:08:44.110 --> 00:08:45.300\nAnd therefore it skips the 10.\n\n143\n00:08:45.300 --> 00:08:47.070\nSo it's not even a possibility.\n\n144\n00:08:47.070 --> 00:08:50.754\nIf we change this to a 3,\nnotice it's 1, 4, 7, 10.\n\n145\n00:08:50.754 --> 00:08:52.650\n10 still is included.\n\n146\n00:08:52.650 --> 00:08:59.452\nWhat if we do 5, which is 1 and\n6, because 6 plus 5 is 11.\n\n147\n00:08:59.452 --> 00:09:01.860\nBut 11 is not included,\nso now the other number.\n\n148\n00:09:01.860 --> 00:09:05.330\nSo you have to be careful\nwhen you're doing the step.\n\n149\n00:09:05.330 --> 00:09:09.560\nIf I did want 11 in this last one,\nthen guess what?\n\n150\n00:09:09.560 --> 00:09:13.200\nI need to overrun a little bit more.\n\n151\n00:09:13.200 --> 00:09:15.030\nNow how do I know what to overrun by?\n\n152\n00:09:16.420 --> 00:09:21.210\nWell, you can always\nthink of take that and\n\n153\n00:09:21.210 --> 00:09:26.640\nadd whatever the step value is and it will\nguarantee that you get that, all right?\n\n154\n00:09:26.640 --> 00:09:27.706\nSo 1, 6, 11.\n\n155\n00:09:27.706 --> 00:09:32.490\nSo that's just some kind of mathematical\nexpressions that work in this trick.\n\n156\n00:09:32.490 --> 00:09:35.036\n&gt;&gt; See, that's where the math it gets so\n\n157\n00:09:35.036 --> 00:09:39.663\nweird in my head and then I'm like\njust add the step, the iteration.\n\n158\n00:09:39.663 --> 00:09:40.216\n&gt;&gt; Yeah, so\n\n159\n00:09:40.216 --> 00:09:42.370\nif you're counting by 2s, add 2.\n\n160\n00:09:42.370 --> 00:09:44.539\nIf you're counting by 5s, add 5.\n\n161\n00:09:44.539 --> 00:09:50.503\nIf you're counting by 12s, add 12 to\nthe upper range, and it will guarantee\n\n162\n00:09:50.503 --> 00:09:54.097\nthat you get that, but not the next one.\n&gt;&gt; Yeah,\n\n163\n00:09:54.097 --> 00:09:58.493\nit's another one of those where my\nbrain's doing that's all you had to do.\n\n164\n00:09:58.493 --> 00:10:00.995\nOkay, that makes it so much easier.\n\n165\n00:10:00.995 --> 00:10:04.592\nYeah, sometimes those basic\nthings can just throw you all up.\n\n166\n00:10:04.592 --> 00:10:05.780\n[LAUGH]\n&gt;&gt; Gets you every time,\n\n167\n00:10:05.780 --> 00:10:06.592\ngets you every time.\n\n168\n00:10:06.592 --> 00:10:10.870\nNow, range, we did see where it\nsaid increment decrement, right?\n\n169\n00:10:10.870 --> 00:10:12.880\nSo let's explore that just a little bit.\n\n170\n00:10:12.880 --> 00:10:16.240\nTypically you're going to do positive\nbecause you're gonna use range to\n\n171\n00:10:16.240 --> 00:10:18.490\neither sum up,\nactually do math operations, or\n\n172\n00:10:18.490 --> 00:10:23.290\nyou're gonna use it as index values for\nsome kind of indexible collection or\n\n173\n00:10:23.290 --> 00:10:26.710\ncontainer type,\nwhether that be tuples or lists.\n\n174\n00:10:26.710 --> 00:10:27.788\nWe've seen that before.\n\n175\n00:10:27.788 --> 00:10:30.040\nBut what if I say -10?\n\n176\n00:10:31.350 --> 00:10:33.390\nEmpty, why is that?\n\n177\n00:10:33.390 --> 00:10:39.460\nIt started at 0 and went to -10, but\nbecause I didn't add a third argument?\n\n178\n00:10:39.460 --> 00:10:43.750\nHow do you count from 0 to negative 10,\nby 1, by positive 1?\n\n179\n00:10:44.930 --> 00:10:46.910\nCan't, you can't do anything.\n\n180\n00:10:46.910 --> 00:10:51.110\nSo you end up with an empty list,\nor an empty range, all right?\n\n181\n00:10:51.110 --> 00:10:56.122\nWell, what if I said, all right, well,\n\n182\n00:10:56.122 --> 00:11:01.008\nI want to count from -1 to -10 by 1?\n\n183\n00:11:01.008 --> 00:11:02.720\nStill empty.\n\n184\n00:11:02.720 --> 00:11:07.399\nWhat if I make this -1?\n\n185\n00:11:07.399 --> 00:11:11.370\nOkay, negatives in decrement get weird.\n\n186\n00:11:11.370 --> 00:11:14.480\nThey always get weird,\nbut I'm starting at -1.\n\n187\n00:11:15.770 --> 00:11:20.920\nI'm counting to -10, not included, but\nI have to go in the opposite direction.\n\n188\n00:11:20.920 --> 00:11:23.040\nThat's what that -1 means.\n\n189\n00:11:23.040 --> 00:11:25.620\nSo you have to be careful there.\n&gt;&gt; If that was already,\n\n190\n00:11:25.620 --> 00:11:30.710\nyou just step by 1, but\nI'm thinking, yeah, backwards.\n\n191\n00:11:30.710 --> 00:11:33.142\nBut it's saying, no, I'm going, so\n\n192\n00:11:33.142 --> 00:11:37.590\nyou're just in this infinite loop\nof like I'm not gonna get anywhere.\n\n193\n00:11:37.590 --> 00:11:38.260\nSo yeah,\n\n194\n00:11:38.260 --> 00:11:43.380\nit's human talk versus computer talk.\n&gt;&gt; Exactly, now that's one of those\n\n195\n00:11:43.380 --> 00:11:49.400\nthings where minus signs and negative\nnumbers can kind of get people messed up.\n\n196\n00:11:49.400 --> 00:11:51.980\nNegative numbers just\ntalk about direction.\n\n197\n00:11:51.980 --> 00:11:56.320\nDraw a number line on a piece of\npaper saying negative is to the left,\n\n198\n00:11:56.320 --> 00:12:01.050\npositive is to the right, point at\nthe number, look at the other number.\n\n199\n00:12:01.050 --> 00:12:02.910\nCan I go to the right?\n\n200\n00:12:02.910 --> 00:12:05.840\nYes, that's how I get there,\nthere is a positive step.\n\n201\n00:12:05.840 --> 00:12:08.070\nAll right, so that's one of those things.\n\n202\n00:12:08.070 --> 00:12:13.187\nNow, but what if I instead,\n\n203\n00:12:13.187 --> 00:12:18.100\nwhat if I said -10 to 0?\n\n204\n00:12:18.100 --> 00:12:20.920\nNotice how I'm starting to the left.\n\n205\n00:12:22.060 --> 00:12:24.950\nWell, you go I got an empty list again.\n\n206\n00:12:24.950 --> 00:12:25.540\nWhy?\n\n207\n00:12:25.540 --> 00:12:29.400\nBecause I don't count\nfrom -10 to positive.\n\n208\n00:12:29.400 --> 00:12:31.270\nIt's essentially positive.\n\n209\n00:12:31.270 --> 00:12:33.950\nI have to count up.\n\n210\n00:12:33.950 --> 00:12:38.730\nNow, I have to reverse the order by\nstarting at -10 and counting up.\n\n211\n00:12:38.730 --> 00:12:40.640\nSo you keep that in mind.\n\n212\n00:12:40.640 --> 00:12:44.860\nReverse the order in the context of\nthese are more negative than these are.\n\n213\n00:12:46.050 --> 00:12:48.930\nHowever, notice that I still used, and\n\n214\n00:12:48.930 --> 00:12:54.920\nactually let me go ahead and say -1,\njust to keep those the same.\n\n215\n00:12:54.920 --> 00:12:56.010\nAll I do is switch the order.\n\n216\n00:12:57.090 --> 00:12:59.990\nSo notice, this is -1, -2,\nnegative, all the way to -9.\n\n217\n00:12:59.990 --> 00:13:04.763\nBy switching the order I get -10,-9, -8,\n\n218\n00:13:04.763 --> 00:13:09.360\n-7, -6, -5, -4, -3, -2.\n\n219\n00:13:09.360 --> 00:13:12.670\n-1's not there, but I've gained 10.\n\n220\n00:13:12.670 --> 00:13:18.910\nAnd also with negatives, you have to\nbe careful with that step thing, okay?\n\n221\n00:13:18.910 --> 00:13:23.520\nSo let's say we +1,\ncuz that's the step, okay?\n\n222\n00:13:23.520 --> 00:13:25.337\nI now got the -1.\n\n223\n00:13:25.337 --> 00:13:27.120\nWhat if we, I'm just hitting up.\n\n224\n00:13:28.740 --> 00:13:37.022\nIf we start here, plus -1,\ndon't forget the negative.\n\n225\n00:13:37.022 --> 00:13:39.566\nAll right,\nthat's how you get those inclusive ranges.\n\n226\n00:13:39.566 --> 00:13:42.280\nBut range is incredibly helpful,\nespecially if you just need some numbers.\n\n227\n00:13:42.280 --> 00:13:43.838\nYou're like, I don't like numbers.\n\n228\n00:13:43.838 --> 00:13:47.820\nBut numbers are indexes\nin indexible collections.\n\n229\n00:13:47.820 --> 00:13:50.370\nSo range is very, very handy.\n\n230\n00:13:51.690 --> 00:13:54.218\nRange is probably the most\ncomplicated of the one we're\n\n231\n00:13:54.218 --> 00:13:57.246\ngonna talk about today just because\nyou can switch things around.\n\n232\n00:13:59.392 --> 00:14:00.780\nHow else would you use range?\n\n233\n00:14:00.780 --> 00:14:03.520\nYou don't necessarily\nhave to make them a list.\n\n234\n00:14:03.520 --> 00:14:05.372\nWe'll see, sorry,\ndidn't mean to get out of the there.\n\n235\n00:14:05.372 --> 00:14:07.176\nI meant to clear the screen.\n\n236\n00:14:07.176 --> 00:14:11.140\nWe'll see shortly,\nyou just kinda use it, and it's fine,\n\n237\n00:14:11.140 --> 00:14:12.850\nyou don't have to make it a list.\n\n238\n00:14:12.850 --> 00:14:14.610\nNow, what about the other one?\n\n239\n00:14:14.610 --> 00:14:17.403\nLet's start with some letters.\n\n240\n00:14:17.403 --> 00:14:23.020\nOkay, there 's a couple of other ones and\nthey're similar but not quite.\n\n241\n00:14:23.020 --> 00:14:28.570\nSo letters, let's just say abcd and\nnumbers, and you know what?\n\n242\n00:14:28.570 --> 00:14:35.210\nI'm gonna say range(1, 10),\nso I'm gonna include that 11.\n\n243\n00:14:35.210 --> 00:14:38.716\nAnd then, just for\na third one, you know what?\n\n244\n00:14:38.716 --> 00:14:45.550\nFoods equals pizza and tacos.\n\n245\n00:14:45.550 --> 00:14:47.020\nAll right, pizza and tacos.\n\n246\n00:14:47.020 --> 00:14:48.940\nSo we have three collections.\n\n247\n00:14:48.940 --> 00:14:50.480\nAnd wait a minute, no, no, no, no.\n\n248\n00:14:51.550 --> 00:14:53.860\nWe only talked about a list\nas a collection time.\n\n249\n00:14:53.860 --> 00:14:57.230\nYeah, but\nwe also drew parallels to strings, so\n\n250\n00:14:57.230 --> 00:14:59.310\nstrings are kinda like\na collection of characters.\n\n251\n00:15:00.380 --> 00:15:02.900\nAnd then range, well,\nif we could iterate over them and\n\n252\n00:15:02.900 --> 00:15:07.170\nwe can use a list to create,\nuse the list function to create a list.\n\n253\n00:15:08.550 --> 00:15:09.610\nThey're kinda like a collection.\n\n254\n00:15:10.720 --> 00:15:13.450\nNot entirely, but they're kinda like one.\n\n255\n00:15:13.450 --> 00:15:14.720\nSo we're gonna keep those three.\n\n256\n00:15:14.720 --> 00:15:16.180\nRemember those three.\n\n257\n00:15:16.180 --> 00:15:19.674\nWe've seen this other function\nbefore in a previous episode.\n\n258\n00:15:19.674 --> 00:15:21.826\nAll right, so I said you know what?\n\n259\n00:15:21.826 --> 00:15:29.127\nI'm gonna zip up letters with foods, okay?\n\n260\n00:15:29.127 --> 00:15:33.529\nI'm gonna zip letters and foods,\nand I already see Vonne going,\n\n261\n00:15:33.529 --> 00:15:37.700\nhold on a second, wait a minute.\n&gt;&gt; Well, there's four, and\n\n262\n00:15:37.700 --> 00:15:40.310\nthere's two, so they don't match.\n\n263\n00:15:40.310 --> 00:15:45.650\nThat's why I'm going, what's gonna happen\nhere, because they're not the same length?\n\n264\n00:15:47.120 --> 00:15:47.916\nAnd that's it.\n\n265\n00:15:47.916 --> 00:15:50.450\n[LAUGH]\n&gt;&gt; And you're right to have that concern.\n\n266\n00:15:50.450 --> 00:15:51.327\nAnd actually, let's back up.\n\n267\n00:15:51.327 --> 00:15:53.234\nLet's just,\nwe're gonna zip letters to letters.\n\n268\n00:15:53.234 --> 00:15:54.869\nSo we're gonna take the same\ncollection and zip them.\n\n269\n00:15:54.869 --> 00:15:57.316\nSo I'm gonna get a a, b b, c c, d d.\n\n270\n00:15:57.316 --> 00:16:01.320\nRight, and\nI'm gonna get it that zip object back.\n\n271\n00:16:02.910 --> 00:16:04.320\nWell, what's a zip object?\n\n272\n00:16:04.320 --> 00:16:07.110\nWell, remember, you always have help.\n\n273\n00:16:08.680 --> 00:16:11.350\nIt looks very similar to that range thing.\n\n274\n00:16:12.920 --> 00:16:17.470\nReturn a zip object whose,\nI don't know what any of that is.\n\n275\n00:16:17.470 --> 00:16:18.770\nZip.\n\n276\n00:16:18.770 --> 00:16:22.030\nWe'll get to these like,\nagain what classes are and\n\n277\n00:16:22.030 --> 00:16:23.980\nhow to use them in a later series.\n\n278\n00:16:25.140 --> 00:16:28.560\nIter one, that means they are iterable.\n\n279\n00:16:28.560 --> 00:16:33.200\nWhat I've been calling collections,\nwell, they're actually iterable.\n\n280\n00:16:33.200 --> 00:16:37.230\nThat means you can use a for\nloop on them, okay?\n\n281\n00:16:37.230 --> 00:16:40.040\nJust so when you see iterable or iter.\n\n282\n00:16:40.040 --> 00:16:42.228\nThat means you can put them in a for\nloop and they do stuff.\n\n283\n00:16:42.228 --> 00:16:47.510\nAll right, iter bracket iter\n\n284\n00:16:47.510 --> 00:16:53.200\nbracket dot dot dot ellipsis means forever\nand ever and ever and ever, right.\n\n285\n00:16:53.200 --> 00:16:55.680\nLet's disregard all this shenanigans.\n\n286\n00:16:55.680 --> 00:17:00.500\nReturns a tuple where the i-th element\ncomes from the i-th integrable argument.\n\n287\n00:17:02.090 --> 00:17:04.950\nAll right so, help you and\nmuch help in this step.\n\n288\n00:17:04.950 --> 00:17:08.720\nAll right that was hard to read.\n\n289\n00:17:08.720 --> 00:17:09.420\nMaybe it's just me.\n\n290\n00:17:09.420 --> 00:17:12.710\nWhat do you think about Vonnie?\n&gt;&gt; Did I see the word pickle link?\n\n291\n00:17:12.710 --> 00:17:16.590\n&gt;&gt; Yeah, you did, you did.\n\n292\n00:17:16.590 --> 00:17:18.380\n&gt;&gt; There was the helping.\n\n293\n00:17:19.590 --> 00:17:21.130\n&gt;&gt; Returns state for pickling?\n\n294\n00:17:21.130 --> 00:17:23.120\n&gt;&gt; Yeah, yeah, but we'll get to-\n\n295\n00:17:23.120 --> 00:17:24.765\n&gt;&gt; We're making relish over here,\n\n296\n00:17:24.765 --> 00:17:25.310\nwhat are we doing?\n\n297\n00:17:25.310 --> 00:17:26.000\n[LAUGH]\n&gt;&gt; We'll get to pickling,\n\n298\n00:17:26.000 --> 00:17:28.445\nso there are things called Python pickles.\n\n299\n00:17:28.445 --> 00:17:32.500\n[LAUGH] We'll get to that.\n&gt;&gt; I'll wait for that one.\n\n300\n00:17:32.500 --> 00:17:33.620\n[LAUGH]\n&gt;&gt; Definitely stay tuned,\n\n301\n00:17:33.620 --> 00:17:35.710\nit's important, but we'll get there.\n\n302\n00:17:35.710 --> 00:17:39.360\nAll right, so\nlet's go ahead and there's zip.\n\n303\n00:17:39.360 --> 00:17:43.520\nZip is very similar to range except I\ncan put as many arguments as I want.\n\n304\n00:17:43.520 --> 00:17:45.520\nI don't get just one or three.\n\n305\n00:17:45.520 --> 00:17:47.821\nI can just keep putting comments.\n\n306\n00:17:47.821 --> 00:17:49.835\n[INAUDIBLE] using for two.\n\n307\n00:17:49.835 --> 00:17:56.200\nSo zip object, let's do the same\nzip object letters, letters, pow.\n\n308\n00:17:56.200 --> 00:17:59.150\nWell, a, a, b, b, c, c, d, d.\n\n309\n00:17:59.150 --> 00:18:01.590\nwhat if I add \"letters\" again?\n\n310\n00:18:03.260 --> 00:18:05.500\nA, a, a, b, b, b, c, c, c, d, d, d.\n\n311\n00:18:05.500 --> 00:18:07.270\nWhat did it do?\n\n312\n00:18:07.270 --> 00:18:10.470\nIt went, well, wait a minute,\nit's kind of hard to visualize, but\n\n313\n00:18:10.470 --> 00:18:13.360\nlet's assume there's a third hand there,\nright?\n\n314\n00:18:13.360 --> 00:18:16.040\nAnd you just zip all those,\nyou make a triple.\n\n315\n00:18:16.040 --> 00:18:19.260\nAnd at three intervals, I get triples.\n\n316\n00:18:19.260 --> 00:18:21.420\nWell, what if we do letters again?\n\n317\n00:18:21.420 --> 00:18:24.310\nA, a, a, you kind of get the idea.\n\n318\n00:18:24.310 --> 00:18:27.020\nThese all have the same\nnumber of elements though.\n\n319\n00:18:27.020 --> 00:18:30.576\nLetters is a, b, c, d.\n\n320\n00:18:30.576 --> 00:18:31.170\nA, b, c, d.\n\n321\n00:18:31.170 --> 00:18:32.700\nSo let's clear this out.\n\n322\n00:18:32.700 --> 00:18:39.360\nAnd now let's go to zip, letters numbers.\n\n323\n00:18:40.720 --> 00:18:44.250\nLetters has four,\nnumbers has 10, all right.\n\n324\n00:18:44.250 --> 00:18:48.520\nNumber is a range but it is an interval,\nwe'll see that pow, (a,\n\n325\n00:18:48.520 --> 00:18:51.520\n1), (b, 2), (c, 3), (d, 4).\n\n326\n00:18:51.520 --> 00:18:55.460\nWhere do all the other\nnumbers go right Vonne?\n\n327\n00:18:55.460 --> 00:18:56.840\n&gt;&gt; So, and then it stopped.\n\n328\n00:18:56.840 --> 00:19:02.270\nSo, is the first argument determining\n\n329\n00:19:02.270 --> 00:19:08.570\nwhat the amount is and\nsince there is extras and numbers,\n\n330\n00:19:08.570 --> 00:19:13.560\nit'll cut off, if you turn it around\nwhat if you put numbers first and\n\n331\n00:19:13.560 --> 00:19:17.782\nthen letters and since numbers has ten and\nletters has four.\n\n332\n00:19:17.782 --> 00:19:19.167\nWhat happens?\n\n333\n00:19:19.167 --> 00:19:20.350\n[LAUGH]\n&gt;&gt; I don't know.\n\n334\n00:19:21.350 --> 00:19:22.386\nAs I said-\n&gt;&gt; Okay, run it!\n\n335\n00:19:22.386 --> 00:19:24.510\n[LAUGH]\n&gt;&gt; When in doubt, let's find out, pow!\n\n336\n00:19:24.510 --> 00:19:27.510\nNo, it doesn't.\n&gt;&gt; It's always the shortest.\n\n337\n00:19:27.510 --> 00:19:29.290\n&gt;&gt; So there's almost like a zip,\n\n338\n00:19:29.290 --> 00:19:31.550\nshortest.\n&gt;&gt; So the order does not matter.\n\n339\n00:19:31.550 --> 00:19:32.740\n&gt;&gt; No, the order does not matter.\n\n340\n00:19:32.740 --> 00:19:34.460\n&gt;&gt; It's, the shortest matters, and\n\n341\n00:19:34.460 --> 00:19:39.740\nthat's what determines how many of these,\ncuz after that, I can't match it up.\n\n342\n00:19:39.740 --> 00:19:42.790\nSo it's not like it's just\ngonna make extra stuff,\n\n343\n00:19:42.790 --> 00:19:44.210\nthat's it.\n&gt;&gt; Right.\n\n344\n00:19:44.210 --> 00:19:47.230\n&gt;&gt; Well then that answers my question and\n\n345\n00:19:47.230 --> 00:19:50.540\nmy, wait, they're different lengths,\nwhat's gonna happen?\n\n346\n00:19:50.540 --> 00:19:52.430\n&gt;&gt; So if we do that same thing, right,\n\n347\n00:19:52.430 --> 00:19:57.150\nif we're doing numbers,\nletters, and foods.\n\n348\n00:19:57.150 --> 00:20:01.740\nDon't do list, there is a zip in there,\nall right, so zip.\n\n349\n00:20:01.740 --> 00:20:03.990\nWe want to zip up numbers letters and\nfoods.\n\n350\n00:20:03.990 --> 00:20:06.680\nWell numbers has 10,\nthat's actually a range.\n\n351\n00:20:06.680 --> 00:20:09.290\nLetters has four, it's a string.\n\n352\n00:20:09.290 --> 00:20:12.330\nFoods has two, right, pizza and tacos.\n\n353\n00:20:12.330 --> 00:20:13.650\nIt's a list.\n\n354\n00:20:13.650 --> 00:20:15.740\nPow!\nI'm only going to get two elements.\n\n355\n00:20:15.740 --> 00:20:17.230\nAnd why is that?\n\n356\n00:20:17.230 --> 00:20:21.330\nWell pizza and\ntacos is the shortest iterable I have.\n\n357\n00:20:21.330 --> 00:20:26.590\nSo it goes, zip up, but\nthere's only at most the shortest one.\n\n358\n00:20:26.590 --> 00:20:29.040\nSo it's zip shortest.\n\n359\n00:20:29.040 --> 00:20:31.760\nBut I could do this forever and\never and ever and\n\n360\n00:20:31.760 --> 00:20:38.480\nlikewise I can use this to kind of iterate\nthrough collections together, right?\n\n361\n00:20:38.480 --> 00:20:42.910\nLet's say I have five sets of numbers,\nand I wanna say, I wanna look at\n\n362\n00:20:42.910 --> 00:20:46.690\nall the first elements together,\nall the second elements together.\n\n363\n00:20:46.690 --> 00:20:51.800\nYou could just zip all of those together,\nand get all five first, second,\n\n364\n00:20:51.800 --> 00:20:53.830\nthird, fourth, and fifth elements.\n&gt;&gt; Yeah,\n\n365\n00:20:53.830 --> 00:20:56.580\nit'll always do, one,\nfirst, second, third.\n\n366\n00:20:56.580 --> 00:21:00.200\nSo how the information is ordered and\n\n367\n00:21:00.200 --> 00:21:04.550\nhow they are entered into the list or\nthe top, or\n\n368\n00:21:04.550 --> 00:21:09.360\nwhatever collection that's\ngonna take where they match up.\n\n369\n00:21:09.360 --> 00:21:12.940\nSo, you, it will do it but if like\nthe data that you're trying to match up is\n\n370\n00:21:12.940 --> 00:21:19.200\nlike, wait no, pizza's suppose to\ngo with b and 1 or what have you.\n\n371\n00:21:19.200 --> 00:21:21.730\nThen it's how you typed it in.\n&gt;&gt; Yeah, yeah, order doesn't matter\n\n372\n00:21:21.730 --> 00:21:25.060\nbecause it matches first, first,\nfirst, second, second, second, right?\n\n373\n00:21:25.060 --> 00:21:26.820\nThat's how a zips things together.\n\n374\n00:21:26.820 --> 00:21:31.650\nNow, very similar to zip is, and\nwe're gonna switch over to a file, it's\n\n375\n00:21:31.650 --> 00:21:35.226\njust gonna be a few things but I wanna\nmake sure to drive something home here.\n\n376\n00:21:35.226 --> 00:21:40.660\nIs enumerate, enumerate, right?\n\n377\n00:21:41.930 --> 00:21:45.525\nWell, we're gonna hit Help,\nand wait for it.\n\n378\n00:21:45.525 --> 00:21:50.390\nThere we go, return an enumerate object,\niterable must be another\n\n379\n00:21:50.390 --> 00:21:53.740\nobject that supports iterate, so\nan interable has to be iterable.\n\n380\n00:21:53.740 --> 00:21:59.390\nOkay, it takes two arguments,\nit takes an iterable, and\n\n381\n00:21:59.390 --> 00:22:03.800\nit takes a start, iterator for\nindex, value of iterable.\n\n382\n00:22:04.970 --> 00:22:08.470\nThe enumerate object yields pairs\ncontaining a count (from start,\n\n383\n00:22:08.470 --> 00:22:12.910\nwhich defaults to zero) and\na value yielded by the iterable argument.\n\n384\n00:22:14.310 --> 00:22:18.100\nIt is useful for\nobtaining an indexed list.\n\n385\n00:22:18.100 --> 00:22:21.740\nSo if I enumerate I get 0 and\nI get the zeroth element.\n\n386\n00:22:21.740 --> 00:22:23.310\nThen I get 1 and the first element.\n\n387\n00:22:23.310 --> 00:22:27.800\n2 and the second element.\n\n388\n00:22:27.800 --> 00:22:28.760\nYou get what I'm saying.\n\n389\n00:22:28.760 --> 00:22:30.050\n0, 1, 2.\nIt's always hard\n\n390\n00:22:30.050 --> 00:22:32.150\ncuz we don't think of zeroth.\n\n391\n00:22:32.150 --> 00:22:34.590\nSo 0 with the zeroth element.\n\n392\n00:22:34.590 --> 00:22:35.380\n1 with the 1 element.\n\n393\n00:22:35.380 --> 00:22:37.980\n2 with the index 2 element.\n\n394\n00:22:37.980 --> 00:22:41.830\nSo I get those as pairs.\n&gt;&gt; But the numbering, the 1,2, 3,\n\n395\n00:22:41.830 --> 00:22:46.640\nthe sequence,\nthat's just being automatically generated?\n\n396\n00:22:47.640 --> 00:22:51.390\nSo it's generating the index.\n\n397\n00:22:51.390 --> 00:22:52.700\nThe position of the index.\n\n398\n00:22:52.700 --> 00:22:57.195\nIt's almost like doing the autonumbering\nin Access where you just go [SOUND].\n\n399\n00:22:57.195 --> 00:22:57.930\n[LAUGH]\n&gt;&gt; Yeah,\n\n400\n00:22:57.930 --> 00:22:59.300\nand you can start at different ones.\n\n401\n00:22:59.300 --> 00:23:04.990\nAnd what's funny is I showed you the way\nthat we could do it with range, right?\n\n402\n00:23:04.990 --> 00:23:09.150\nSo if I look at letters,\nI have four things there.\n\n403\n00:23:09.150 --> 00:23:16.380\nWell, you know what, I need to have (0,\n'a'), (1, 'b'), (2, 'c'), (3, 'd').\n\n404\n00:23:16.380 --> 00:23:18.390\nAnd I was like you know what\nyou can do you can say for\n\n405\n00:23:18.390 --> 00:23:22.400\nindex in range from the start.\n\n406\n00:23:22.400 --> 00:23:27.100\n0 whatever, len of the, right?\n\n407\n00:23:27.100 --> 00:23:28.200\nWe did that the hard way.\n\n408\n00:23:29.280 --> 00:23:30.150\nGuess what?\n\n409\n00:23:30.150 --> 00:23:30.690\nYou're ready?\n\n410\n00:23:30.690 --> 00:23:31.540\nYou're ready Vonne?\n\n411\n00:23:31.540 --> 00:23:32.920\nLet's go and\nget him to throw this in a list.\n\n412\n00:23:32.920 --> 00:23:34.191\nBecause then enumerate object.\n\n413\n00:23:34.191 --> 00:23:37.738\n[INAUDIBLE] show enumerate,\nlet's say, letters.\n\n414\n00:23:37.738 --> 00:23:40.778\n(0, 'a'), (1, 'b'), (3, 'c'), (3, 'd').\n\n415\n00:23:40.778 --> 00:23:43.980\nAnd boom, it works.\n\n416\n00:23:43.980 --> 00:23:47.818\nLikewise, if I wanted to start at index 2,\n[INAUDIBLE] there we go.\n\n417\n00:23:47.818 --> 00:23:52.223\nNotice, notice, that start still kinda,\n\n418\n00:23:52.223 --> 00:23:59.129\nit's saying I'm just gonna add\nan offset To your numbering system,\n\n419\n00:23:59.129 --> 00:24:05.220\nit doesn't actually move forward\nto grab the c, all right?\n\n420\n00:24:05.220 --> 00:24:07.410\nYou're going,\nwe're gonna start with c now.\n\n421\n00:24:07.410 --> 00:24:11.300\nNo, no, no, you're actually\ngonna start numbering it to.\n\n422\n00:24:11.300 --> 00:24:14.340\nEssentially all it does is it just says,\nokay, instead of starting at 0,\n\n423\n00:24:14.340 --> 00:24:15.690\nI'm just gonna add 2 to it.\n\n424\n00:24:15.690 --> 00:24:18.770\nSo think of it as a step or na offset for\n\n425\n00:24:18.770 --> 00:24:20.130\nthat respective number.\n&gt;&gt; Okay,\n\n426\n00:24:20.130 --> 00:24:22.870\nthis is really cool cuz\nI have been like way\n\n427\n00:24:22.870 --> 00:24:26.530\ninto all these excel lookup functions and\ndoing a lot of episodes on this.\n\n428\n00:24:26.530 --> 00:24:29.490\nI'm like, this is like, this is like,\nimagine all of the, and\n\n429\n00:24:29.490 --> 00:24:31.050\nit's doing all of these functions and\n\n430\n00:24:31.050 --> 00:24:36.650\nlike to me I'm thinking I could see\nhow this could be already awesome.\n\n431\n00:24:36.650 --> 00:24:41.110\nCuz then you're just gonna\nreferencing by the index number and\n\n432\n00:24:41.110 --> 00:24:43.400\npull things out and\nmove things around or do everything.\n\n433\n00:24:43.400 --> 00:24:46.235\nSo I'm over here going,\nthis is really cool.\n\n434\n00:24:46.235 --> 00:24:47.583\n[LAUGH]\n&gt;&gt; Actually,\n\n435\n00:24:47.583 --> 00:24:50.353\nlet's see how cool it is because\nthis simplifies using these\n\n436\n00:24:50.353 --> 00:24:51.556\nPython helpers, right?\n\n437\n00:24:51.556 --> 00:24:54.427\nThat are optimized,\nthey're maintained, they're,\n\n438\n00:24:54.427 --> 00:24:57.490\nthey have a lot of Edge case handling,\nthey just kinda work.\n\n439\n00:24:57.490 --> 00:25:02.119\nIf we used those, our code is more\nPythonic, a little more readable, and\n\n440\n00:25:02.119 --> 00:25:05.790\nit's probably just gonna work better for\nus, all right?\n\n441\n00:25:05.790 --> 00:25:11.218\nSo let's go ahead and clear that out,\nlet's create some iterhelpers.\n\n442\n00:25:11.218 --> 00:25:13.909\nAll right, so iterhelpers, and\n\n443\n00:25:13.909 --> 00:25:20.090\nwe're gonna hop over to our editor,- and\nopen up itterhelp uppers.\n\n444\n00:25:20.090 --> 00:25:20.696\nClose this out, close all.\n\n445\n00:25:20.696 --> 00:25:25.386\nWe're not gonna to do a whole lot in\nthis file, except for some examples,\n\n446\n00:25:25.386 --> 00:25:28.260\nlike \"when would I use this?\" Alright?\n\n447\n00:25:28.260 --> 00:25:33.299\nSo let's start with those foods; pizza and\n\n448\n00:25:33.299 --> 00:25:37.145\ntacos, and numbers,\n\n449\n00:25:37.145 --> 00:25:42.380\nrange- 0 to,\nactually let's start with 1 to 11.\n\n450\n00:25:42.380 --> 00:25:48.488\nAnd what was the wait for?\n\n451\n00:25:48.488 --> 00:25:50.498\nLetters, yeah, it couldn't be a number.\n\n452\n00:25:50.498 --> 00:25:53.050\nSo what's displaying in those, over?\n\n453\n00:25:53.050 --> 00:25:57.780\nOne thing I'd wanna make sure you know,\nright, in the ripple, we're doing list so\n\n454\n00:25:57.780 --> 00:25:58.620\nwe get it up now.\n\n455\n00:26:00.190 --> 00:26:04.518\nWhat if I say, for n in numbers,\n\n456\n00:26:04.518 --> 00:26:08.920\nprint n, this will work,\nyou can notice that range is not list.\n\n457\n00:26:10.100 --> 00:26:12.935\nThis will work.\n\n458\n00:26:12.935 --> 00:26:19.948\nWe actually have to type that in python\nIII iterhelpers and 1 2 3 4 5 6 7 8 9 10.\n\n459\n00:26:19.948 --> 00:26:22.260\nI don't have to make it a list.\n\n460\n00:26:22.260 --> 00:26:27.820\nAs a matter of fact I can say range\nof 1 to 11 and so for in range.\n\n461\n00:26:27.820 --> 00:26:33.530\nIt doesn't have to be a list,\nit is iterable by nature\n\n462\n00:26:35.210 --> 00:26:40.850\nbe really clear, and that's true for\nboth enumerate and zip, okay?\n\n463\n00:26:40.850 --> 00:26:42.730\nSo, that's not bad.\n\n464\n00:26:42.730 --> 00:26:45.260\nRange is helpful if you need those.\n\n465\n00:26:45.260 --> 00:26:47.610\nWe're gonna use it for\nsome of the other things, but\n\n466\n00:26:47.610 --> 00:26:51.360\nlet's say that I wanna pair up.\n\n467\n00:26:53.370 --> 00:27:00.070\nLet's actually add cheese and onions,\nhere, even though I don't like onions.\n\n468\n00:27:00.070 --> 00:27:03.510\nSo we have four, four, and then we\nhave one that has a different number.\n\n469\n00:27:03.510 --> 00:27:10.870\nSo if I wanna look for food,\nletter in zip(foods, letter).\n\n470\n00:27:10.870 --> 00:27:16.598\nLet's print, letter, likes, food,\n\n471\n00:27:16.598 --> 00:27:23.841\nthat's clear python three\nit help us a like pizza,\n\n472\n00:27:23.841 --> 00:27:28.894\nb like tacos, c like cheese, and so\n\n473\n00:27:28.894 --> 00:27:34.130\nyou just kind of zip those together.\n\n474\n00:27:34.130 --> 00:27:37.180\nAnd then likewise, if you want to,\nlet's say you wanted,\n\n475\n00:27:37.180 --> 00:27:39.970\nI don't know, a row number.\n\n476\n00:27:39.970 --> 00:27:45.753\nYou can go, well you know what, row_num or\n\n477\n00:27:45.753 --> 00:27:49.190\nnumbers, all right?\n\n478\n00:27:49.190 --> 00:27:51.840\nNotice food comes from foods,\nletter comes from letters,\n\n479\n00:27:51.840 --> 00:27:54.470\nrow numbers comes from numbers.\n\n480\n00:27:54.470 --> 00:27:57.788\nAnd you just go, Row # and\n\n481\n00:27:57.788 --> 00:28:03.670\nI'm intentionally doing\nthis very simplistically.\n\n482\n00:28:05.791 --> 00:28:12.060\nAnd then let's put a colon here and\nanother comma, all right.\n\n483\n00:28:12.060 --> 00:28:16.700\nSo if we rerun this iterhelpers, and boom.\n\n484\n00:28:16.700 --> 00:28:18.141\nRow #1 : a likes pizza.\n\n485\n00:28:18.141 --> 00:28:20.185\nRow #2 : b likes tacos.\n\n486\n00:28:20.185 --> 00:28:22.581\nSo, [SOUND] and\njust kinda get that printed out.\n\n487\n00:28:22.581 --> 00:28:25.270\nZip is very handy.\n\n488\n00:28:25.270 --> 00:28:27.920\nThe other place that I use zip is,\n\n489\n00:28:29.420 --> 00:28:34.310\nlet's say that a is\nthe key of the dictionary.\n\n490\n00:28:35.420 --> 00:28:37.450\nAnd it corresponds to it.\n\n491\n00:28:37.450 --> 00:28:39.629\nSo, A next to B, right?\n\n492\n00:28:39.629 --> 00:28:41.226\nKind of like this likes.\n\n493\n00:28:41.226 --> 00:28:46.349\nSo I want food, letter,\nfood letters or letter foods,\n\n494\n00:28:46.349 --> 00:28:52.780\nlet's do letter foods because\nthat's actually make sense.\n\n495\n00:28:52.780 --> 00:28:57.650\nLetter, foods Remember that dict function?\n\n496\n00:28:57.650 --> 00:29:01.965\nWell if I give it a list of pairs,\nit will make a dictionary for me.\n\n497\n00:29:01.965 --> 00:29:09.820\nZip, Letters, foods.\n\n498\n00:29:09.820 --> 00:29:13.030\nZip up letters and foods into pairs, throw\nin a dictionary, guess what I get out.\n\n499\n00:29:13.030 --> 00:29:16.784\nPrint(letter_food).\n\n500\n00:29:16.784 --> 00:29:18.860\nSo back over here.\n\n501\n00:29:21.550 --> 00:29:22.410\nAnd iterhelpers.\n\n502\n00:29:23.590 --> 00:29:27.040\nA get a dictionary that has those\nmappings already made for me.\n\n503\n00:29:27.040 --> 00:29:30.790\nSo if I create pairs, it's wrote\ninto the dictionary function and\n\n504\n00:29:30.790 --> 00:29:35.490\nboom, it's all good to go Blow your mind,\nright.\n\n505\n00:29:35.490 --> 00:29:39.647\nI had seen it in Las Vegas.\n&gt;&gt; I'm just over here going this is really\n\n506\n00:29:39.647 --> 00:29:44.560\ncool [LAUGH] And, with even cooler is\nthat I'm falling all over this and\n\n507\n00:29:44.560 --> 00:29:47.090\nit's just kind of guess what?\n\n508\n00:29:47.090 --> 00:29:50.785\nIt's zipping together.\n&gt;&gt; I just banged it all together right and\n\n509\n00:29:50.785 --> 00:29:54.926\nwe need to make sure that we enumerate\nall the options and well that last\n\n510\n00:29:54.926 --> 00:29:58.946\nthing is enumerate And enumerate\nthis kinda like zip with numbers.\n\n511\n00:30:00.595 --> 00:30:02.480\nWho would have thought, right?\n\n512\n00:30:02.480 --> 00:30:08.390\nSo let's do this,\nwhen would I use enumerate?\n\n513\n00:30:08.390 --> 00:30:13.115\nSo I would say for index in, or for index,\n\n514\n00:30:13.115 --> 00:30:18.381\nfood in wait for it,\nwait for it, enumerate,\n\n515\n00:30:18.381 --> 00:30:23.525\nI forgot that word for a second, (foods).\n\n516\n00:30:23.525 --> 00:30:28.370\nAnd [INAUDIBLE] get is the food and\nit's relative position.\n\n517\n00:30:28.370 --> 00:30:32.600\nIf I wanted to find\na letter that likes/d it,\n\n518\n00:30:32.600 --> 00:30:37.820\nthen I say letters[index] All right,\nyou have those corresponding lists.\n\n519\n00:30:37.820 --> 00:30:42.970\nSo a to food, or a to pizza,\nb to tacos, c to cheese\n\n520\n00:30:43.970 --> 00:30:49.300\nthen you hit print(food, letter).\n\n521\n00:30:49.300 --> 00:30:56.420\nI didn't have to do all that nasty\nrange stuff, and boom, pizza a.\n\n522\n00:30:56.420 --> 00:30:58.140\nTacos b, cheese c, onions d.\n\n523\n00:30:59.470 --> 00:31:04.080\nOkay, I use it like that, but\n\n524\n00:31:04.080 --> 00:31:08.480\nanother place that I use it is\n\n525\n00:31:10.180 --> 00:31:15.410\nin respective dictionary comprehensions or\nlist comprehensions.\n\n526\n00:31:15.410 --> 00:31:20.740\nRight, what if I wanted to\ninstead of making a range,\n\n527\n00:31:20.740 --> 00:31:24.260\nwhat if I wanted to create\na list of tuples, right?\n\n528\n00:31:24.260 --> 00:31:27.980\nSo I wanted an actual triple\nwhere I get a row number,\n\n529\n00:31:29.230 --> 00:31:33.390\na food, and a corresponding letter, okay?\n\n530\n00:31:34.400 --> 00:31:35.830\nWell, how do I do that?\n\n531\n00:31:37.340 --> 00:31:41.470\nSo we're just gonna call this shenanigans\ncuz I would never actually need to do\n\n532\n00:31:41.470 --> 00:31:45.055\nthis unless I have like a spreadsheet or\nsomething, I don't know.\n\n533\n00:31:45.055 --> 00:31:49.868\nSo I'm gonna say parenthesis,\nthis is just a list.\n\n534\n00:31:49.868 --> 00:31:54.263\nI'm gonna say index food,\n\n535\n00:31:54.263 --> 00:31:59.232\nletters [index] for index,\n\n536\n00:31:59.232 --> 00:32:05.356\nfood in enumerate Foods, all right?\n\n537\n00:32:05.356 --> 00:32:10.506\nGive me the index, food,\nletters, at the same position.\n\n538\n00:32:10.506 --> 00:32:18.010\nI'm gonna break this over so we can see\nthis, for the index, food and enumerate.\n\n539\n00:32:18.010 --> 00:32:20.520\nEnumerate is gonna give\nme the relative position.\n\n540\n00:32:20.520 --> 00:32:22.590\nNow, I will be completely\nhonest with you Vonne,\n\n541\n00:32:22.590 --> 00:32:26.800\na lot of times this is what I'm using\nenumerate for, is to pair these lists.\n\n542\n00:32:26.800 --> 00:32:31.620\nLike kinda collect these things together,\nthat correspond element by element.\n\n543\n00:32:31.620 --> 00:32:35.863\nI don't use the second argument\na great deal in enumerate, personally.\n\n544\n00:32:35.863 --> 00:32:40.770\nDo remember it's there though, I can start\nthe count from a different place, okay?\n\n545\n00:32:40.770 --> 00:32:44.610\nSo, let's go see what\nshenanigans I actually have.\n\n546\n00:32:46.240 --> 00:32:50.810\nThere we go, and I'm actually\ngoing to comment this out, and\n\n547\n00:32:50.810 --> 00:32:52.780\nI'm gonna comment this out as well.\n\n548\n00:32:52.780 --> 00:32:55.860\nActually, I have to comment this out as\nwell, cuz that would be a syntax error.\n\n549\n00:32:55.860 --> 00:33:00.216\nLet's hop over here, iterhelpers,\n[(0, 'pizza', 'a'), (1,\n\n550\n00:33:00.216 --> 00:33:05.241\n'tacos', 'b'), (2, 'cheese',\n'c'), (3, 'onions', 'd')].\n\n551\n00:33:05.241 --> 00:33:07.520\nAnd you know what?\n\n552\n00:33:07.520 --> 00:33:10.250\nIf you know what enumerate means,\nyou're like.\n\n553\n00:33:10.250 --> 00:33:15.820\nAll right, so I'm going to grab its\nposition, the food at that position,\n\n554\n00:33:15.820 --> 00:33:19.610\nand then the corresponding\nletter at that position as well.\n\n555\n00:33:19.610 --> 00:33:20.420\nBoom.\n\n556\n00:33:20.420 --> 00:33:24.350\nA couple lines, instead of all this\nother shenanigans that we've been doing.\n\n557\n00:33:24.350 --> 00:33:27.370\nNow, I do want to throw back\nbecause vine got mad at me.\n\n558\n00:33:27.370 --> 00:33:33.622\nIn a previous episode, she was like hey,\nyou were showing us the hard way.\n\n559\n00:33:33.622 --> 00:33:37.265\nI was and I want you to remember,\nyou can't appreciate the tools that you\n\n560\n00:33:37.265 --> 00:33:40.390\nhave until you've done the work\nwithout those tools in hand.\n\n561\n00:33:40.390 --> 00:33:41.560\nSo you keep that in mind.\n\n562\n00:33:41.560 --> 00:33:44.528\nThose are the three iteration numbers\nthat you're most likely going to use in\n\n563\n00:33:44.528 --> 00:33:47.230\ndictionary comprehension,\nleast comprehensions.\n\n564\n00:33:47.230 --> 00:33:52.600\nForward loops,\nall kinds of these iterative processes.\n\n565\n00:33:52.600 --> 00:33:55.850\nThese are not exhaustive as\nwe continue on, we'll start,\n\n566\n00:33:55.850 --> 00:33:58.465\nyou'll go, I know about that one too.\n\n567\n00:33:58.465 --> 00:34:01.430\nI know about that one too,\nI know about that one too.\n\n568\n00:34:01.430 --> 00:34:04.963\nSo definitely keep those in mind, and\nwell there you have it, following,\n\n569\n00:34:04.963 --> 00:34:07.612\na three iteration of helpers\nthat'll get you started.\n\n570\n00:34:07.612 --> 00:34:09.201\n&gt;&gt; Well this is serious and\n\n571\n00:34:09.201 --> 00:34:12.935\nI'm just like and\nI appreciate the whole like,\n\n572\n00:34:12.935 --> 00:34:16.905\nhey you're going to learn how\nto dig a hole with a spoon, and\n\n573\n00:34:16.905 --> 00:34:21.210\nthen you realize when you get the shovel,\nit's so much easier.\n\n574\n00:34:21.210 --> 00:34:23.100\nI don't know if I should be\ncomparing this to digging a hole,\n\n575\n00:34:23.100 --> 00:34:24.820\nbecause that has the wrong connotation.\n\n576\n00:34:24.820 --> 00:34:28.280\nBut the idea of being\nable to appreciate and\n\n577\n00:34:28.280 --> 00:34:33.210\nyeah, I'd get a little miffed, but\nit's also just because its kinda\n\n578\n00:34:33.210 --> 00:34:34.735\nlike it's a taste of my own medicine.\n&gt;&gt; [LAUGH]\n\n579\n00:34:34.735 --> 00:34:36.605\n&gt;&gt; [LAUGH] Like I do this too when I teach\n\n580\n00:34:36.605 --> 00:34:39.314\nsomething, but\nit does make you appreciate, and\n\n581\n00:34:39.314 --> 00:34:42.620\nI've learned a lot in this series and\nI hope you guys have to.\n\n582\n00:34:42.620 --> 00:34:47.670\nSo what would be the next steps like,\nwhat any final parting words of it.\n\n583\n00:34:47.670 --> 00:34:48.600\nNow we're done this,\n\n584\n00:34:48.600 --> 00:34:50.610\nlike where do I go from here?\n&gt;&gt; Well,\n\n585\n00:34:50.610 --> 00:34:54.850\nthis was definitely cover the basics\nof like just the python syntax and\n\n586\n00:34:54.850 --> 00:34:57.330\na little bit of programming constructs,\nright?\n\n587\n00:34:58.420 --> 00:35:01.020\nNow lot of this map over to\nother programming languages,\n\n588\n00:35:01.020 --> 00:35:03.060\nso you can continue to explore.\n\n589\n00:35:03.060 --> 00:35:05.610\nThere's so much that we haven't covered.\n\n590\n00:35:05.610 --> 00:35:07.520\nWe still have to talk about functions.\n\n591\n00:35:07.520 --> 00:35:08.450\nHow do I make a function.\n\n592\n00:35:08.450 --> 00:35:09.500\nWhat do functions look like.\n\n593\n00:35:09.500 --> 00:35:11.820\nWhy would I care about functions.\n\n594\n00:35:11.820 --> 00:35:16.512\nWe also have to talk about how do I apply\nthis Wait a minute, you're telling me that\n\n595\n00:35:16.512 --> 00:35:21.074\nPython has a way more than just the things\nthat are immediately available to me?\n\n596\n00:35:21.074 --> 00:35:24.428\nI would come back specifically for\nfunctions and\n\n597\n00:35:24.428 --> 00:35:30.400\nother modules that can come up as well as\nhow to apply these in our problem solving.\n\n598\n00:35:30.400 --> 00:35:36.040\nAnd now, with that said,\nthis is the original, we're thinking.\n\n599\n00:35:36.040 --> 00:35:38.810\nThis is a good place to transition,\nbut you never know,\n\n600\n00:35:38.810 --> 00:35:41.770\nthere might be some bonus episodes\nthat crop up from here and there.\n\n601\n00:35:41.770 --> 00:35:44.950\nSo keep on the look out, but\nthere you have it, Vonne.\n\n602\n00:35:44.950 --> 00:35:48.480\nWe're gonna come back and\nlearn a little more about programming,\n\n603\n00:35:48.480 --> 00:35:51.650\nbut I wouldn't necessarily say\nit's All just fundamentals.\n\n604\n00:35:51.650 --> 00:35:52.210\n&gt;&gt; All right, so\n\n605\n00:35:52.210 --> 00:35:54.970\nwrapping up this series that's great,\nbut we know that we have\n\n606\n00:35:54.970 --> 00:35:58.370\nother series that we can go and find and\nhave this foundational knowledge.\n\n607\n00:35:58.370 --> 00:36:01.810\nBut okay, we're gonna go ahead and\nsign off one last time.\n\n608\n00:36:01.810 --> 00:36:04.170\nFor DevPro TV,\nI've been your host, Vonne Smith.\n\n609\n00:36:04.170 --> 00:36:04.820\n&gt;&gt; And I'm Justin Dennison.\n\n610\n00:36:04.820 --> 00:36:05.673\n&gt;&gt; And we'll see you soon!\n\n611\n00:36:05.673 --> 00:36:09.989\n[MUSIC]\n\n",
          "vimeoId": "269213475"
        }
      ],
      "title": "Iteration"
    }
  ],
  "url": "programming-fundamentals",
  "vLab": false
}
