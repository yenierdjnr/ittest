{
  "description": "Python has a set of protocols that the language internally adhere to which provides the functionality for features such as iteration, context manager behavior, string representation of an object, and many other things. When you create custom classes in Python and make use of these protocols then you can create custom behavior in the context of iterations, types, comparison of objects, operator overloading, and much more. Knowing about these will help level up your Python skills. If you are ready to progress forward in your Python prowess, then join us to learn more about the Python data model.",
  "descriptionMD": "Python has a set of protocols that the language internally adhere to which provides the functionality for features such as iteration, context manager behavior, string representation of an object, and many other things. When you create custom classes in Python and make use of these protocols then you can create custom behavior in the context of iterations, types, comparison of objects, operator overloading, and much more. Knowing about these will help level up your Python skills. If you are ready to progress forward in your Python prowess, then join us to learn more about the Python data model.",
  "length": "45877",
  "name": "Python Data Model",
  "practiceExam": false,
  "subtitle": "Magic Methods in Python Classes",
  "tagUrl": "devprotv",
  "topics": [
    {
      "episodes": [
        {
          "description": "Python has a set of protocols that the language internally adhere to which provides the functionality for features such as iteration, context manager behavior, string representation of an object, and many other things. When you create custom classes in Python and make use of these protocols then you can create custom behavior in the context of iterations, types, comparison of objects, operator overloading, and much more. Knowing about these will help level up your Python skills. If you are ready to progress forward in your Python prowess, then join us to learn more about the Python data model.",
          "length": "125",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-0-0-0-overview-020718-PGM.00_00_06_00.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-0-0-0-overview-020718-PGM.00_00_06_00.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-0-0-0-overview-020718-PGM.00_00_06_00.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.954\n[MUSIC]\n\n2\n00:00:05.954 --> 00:00:09.550\nIn this segment we are gonna take a few\nminutes to briefly overlook what you can\n\n3\n00:00:09.550 --> 00:00:12.000\nexpect from the upcoming\nPython Data Model series.\n\n4\n00:00:12.000 --> 00:00:14.659\nJustin if you would be so kind to\ngive us some idea of the the topics\n\n5\n00:00:14.659 --> 00:00:16.301\nthat we are gonna cover in that series.\n\n6\n00:00:16.301 --> 00:00:21.195\n&gt;&gt; So this series is meant to really\nup your game in Python, right?\n\n7\n00:00:21.195 --> 00:00:25.547\nWhat are some of these nice, behind\nthe scenes magic that we can now leverage\n\n8\n00:00:25.547 --> 00:00:29.358\nto our own advantage to make our\nlives a little bit easier, right?\n\n9\n00:00:29.358 --> 00:00:34.845\nPickling, copying, maybe making\na custom object behave like a number,\n\n10\n00:00:34.845 --> 00:00:37.776\nbeing able to compare custom objects.\n\n11\n00:00:37.776 --> 00:00:42.871\nMaybe actually making sure an object is\nconstructed exactly like you want it.\n\n12\n00:00:42.871 --> 00:00:44.732\nThese are all things we're\ngonna cover in this series.\n\n13\n00:00:44.732 --> 00:00:47.227\n&gt;&gt; Now, Justin a lot of times,\nwe have two different formats here.\n\n14\n00:00:47.227 --> 00:00:49.691\nTypically, we have\ncertification based tracks and\n\n15\n00:00:49.691 --> 00:00:51.825\nwe also have technical\nskills based tracks.\n\n16\n00:00:51.825 --> 00:00:53.600\nThings that we need people to know or\n\n17\n00:00:53.600 --> 00:00:56.332\npeople might want to know as\na technical type of skill.\n\n18\n00:00:56.332 --> 00:00:58.754\nWhich one of those tracks\nwould these series fall under?\n\n19\n00:00:58.754 --> 00:01:00.973\n&gt;&gt; This series is definitely\na technical skill, right?\n\n20\n00:01:00.973 --> 00:01:03.119\nThe assumption is you know\na little bit of Python.\n\n21\n00:01:03.119 --> 00:01:04.601\nYou really wanna up your game.\n\n22\n00:01:04.601 --> 00:01:07.511\nIt's not that I'm gonna test you\nat the end or someone else is.\n\n23\n00:01:07.511 --> 00:01:11.780\nBut you really want to understand\nthe inner workings of Python.\n\n24\n00:01:11.780 --> 00:01:14.641\nAnd that's what we're\ngonna do in this course.\n\n25\n00:01:14.641 --> 00:01:15.226\nAnd, Justin,\n\n26\n00:01:15.226 --> 00:01:18.112\nalso it seems like you're assuming some\nknowledge when it comes to Python.\n\n27\n00:01:18.112 --> 00:01:21.666\nWhat should the skill level be for\nthe person that is watching this series?\n\n28\n00:01:21.666 --> 00:01:23.941\n&gt;&gt; I recommend that you've been\nprogramming in Python for a little bit.\n\n29\n00:01:23.941 --> 00:01:27.754\nThis is probably a more intermediate to\nintermediate advanced type thing, right?\n\n30\n00:01:27.754 --> 00:01:33.187\nYou can get away without knowing any of\nthis in the series for a while in Python.\n\n31\n00:01:33.187 --> 00:01:36.502\nBut you should know what a Python\nclass is, how to create a class,\n\n32\n00:01:36.502 --> 00:01:38.987\na general idea of object\noriented programming.\n\n33\n00:01:38.987 --> 00:01:43.425\nAs well as, you have spawned Python\nfunctions, you've written Python scripts.\n\n34\n00:01:43.425 --> 00:01:47.128\nSo I recommend,\nif you're brand-new to Python,\n\n35\n00:01:47.128 --> 00:01:50.495\nmaybe here is not\nthe greatest place to start.\n\n36\n00:01:50.495 --> 00:01:53.897\n&gt;&gt; All right, well, Justin it looks like\nyou've got a lot of stuff on deck for\n\n37\n00:01:53.897 --> 00:01:55.629\nus in this series and it sounds great.\n\n38\n00:01:55.629 --> 00:01:59.079\nAnd if it sounds great to you we look\nforward to seeing you in those upcoming\n\n39\n00:01:59.079 --> 00:01:59.645\nepisodes.\n\n40\n00:01:59.645 --> 00:02:04.253\n[MUSIC]\n\n",
          "vimeoId": "254858924"
        },
        {
          "description": "In this episode, Justin and Mike start exploring the Python protocols for creating and initializing object instances. Justin explores the differences between the \\_\\_new\\_\\_ and \\_\\_init\\_\\_ methods as well as when to consider using those methods.",
          "length": "1466",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-1-1-creating_and_initializing_an_instance-011618-PGM.00_24_30_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-1-1-creating_and_initializing_an_instance-011618-PGM.00_24_30_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-1-1-creating_and_initializing_an_instance-011618-PGM.00_24_30_05.Still001-sm.jpg",
          "title": "Creating and Initializing an Instance",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.269 --> 00:00:16.691\nHello, welcome to another\nexciting episode of DevProTV.\n\n3\n00:00:16.691 --> 00:00:17.782\nI'm your host Mike Rodrick.\n\n4\n00:00:17.782 --> 00:00:20.886\nAnd today we're covering\nour Python data model, and\n\n5\n00:00:20.886 --> 00:00:25.587\nspecifically we're gonna be looking at\ncreating and initializing instances.\n\n6\n00:00:25.587 --> 00:00:27.819\nAnd here to help us with that is Mr.\nJustin Denison.\n\n7\n00:00:27.819 --> 00:00:30.228\nWelcome, Justin.\n&gt;&gt; Thanks for having me on Mike, and\n\n8\n00:00:30.228 --> 00:00:32.438\nhow are you today?\n&gt;&gt; I'm doing fantastic, thank you,\n\n9\n00:00:32.438 --> 00:00:34.982\nexcited, I mean we're gonna learn-\n&gt;&gt; Good to hear.\n\n10\n00:00:34.982 --> 00:00:35.565\n&gt;&gt; Yes.\n\n11\n00:00:35.565 --> 00:00:36.863\n&gt;&gt; Yeah, and I'm glad, and\n\n12\n00:00:36.863 --> 00:00:39.115\nthis is the very first\nepisode of the series.\n\n13\n00:00:39.115 --> 00:00:41.447\nAnd well,\nyou are here from the outside, right?\n\n14\n00:00:41.447 --> 00:00:44.443\nWe're gonna be talking about creating and\ninitializing an instance, and\n\n15\n00:00:44.443 --> 00:00:47.677\nactually I probably should have switched\nthat title around because we're gonna\n\n16\n00:00:47.677 --> 00:00:48.781\ndo it in reverse.\n\n17\n00:00:48.781 --> 00:00:49.650\n&gt;&gt; Yeah.\n&gt;&gt; Yeah.\n\n18\n00:00:49.650 --> 00:00:53.730\nSo let me back up a little bit,\nsince this is the first episode.\n\n19\n00:00:53.730 --> 00:00:54.920\nLet me set the stage for you.\n\n20\n00:00:54.920 --> 00:00:59.760\nSo within the Python ecosystem,\nyou may have heard of things called magic\n\n21\n00:01:01.050 --> 00:01:03.770\nmethods, or the dunder methods.\n\n22\n00:01:03.770 --> 00:01:08.361\nNow that is conforming to\nthe Python data model.\n\n23\n00:01:08.361 --> 00:01:10.886\nSo over the course of\nthese next few episodes,\n\n24\n00:01:10.886 --> 00:01:15.315\nwe're gonna be looking at some of these\nmagic methods or the data model methods.\n\n25\n00:01:15.315 --> 00:01:17.623\nAnd if we use them appropriately,\n\n26\n00:01:17.623 --> 00:01:21.600\nPython kinda takes care of\na great deal of things for us.\n\n27\n00:01:21.600 --> 00:01:25.360\nNow most of the time these\nare in the context of classes.\n\n28\n00:01:25.360 --> 00:01:29.190\nSo if you're feel like,\nI'm kind of ify on classes.\n\n29\n00:01:29.190 --> 00:01:30.460\nYou can go ahead and watch.\n\n30\n00:01:30.460 --> 00:01:34.780\nAll right, but you may want to come back\nonce you get a little more comfortable\n\n31\n00:01:34.780 --> 00:01:37.490\nusing classes to create custom objects.\n\n32\n00:01:37.490 --> 00:01:40.260\nAll right, maybe you're creating\nsome data structure for yourself.\n\n33\n00:01:40.260 --> 00:01:43.082\nThen come back, and this will\nstart to make a little more sense.\n\n34\n00:01:43.082 --> 00:01:43.633\n&gt;&gt; All right, good,\n\n35\n00:01:43.633 --> 00:01:45.396\nI'll be back in a little while\nI go check out those episodes.\n\n36\n00:01:45.396 --> 00:01:47.282\n[LAUGH]\n&gt;&gt; [LAUGH] Yeah, I'll go ahead and\n\n37\n00:01:47.282 --> 00:01:48.737\nwrap up the show when we're done, and\n\n38\n00:01:48.737 --> 00:01:50.623\nwe'll bring you in for the next one.\n&gt;&gt; Yes, thank you.\n\n39\n00:01:50.623 --> 00:01:52.826\n&gt;&gt; But let's start with, well,\n\n40\n00:01:52.826 --> 00:01:54.870\ninitializing an instance.\n\n41\n00:01:54.870 --> 00:01:58.630\nAnd you'll see why I'm starting\nthere first at the outset.\n\n42\n00:01:58.630 --> 00:02:02.140\nSo let's go ahead and take a look\nat my screen here, and there we go.\n\n43\n00:02:02.140 --> 00:02:04.340\nI am just in a folder\ncalled python-data-model.\n\n44\n00:02:04.340 --> 00:02:07.520\nI like to have a little reminder of,\nwell, what we're actually doing.\n\n45\n00:02:07.520 --> 00:02:11.223\nBe really confusing if I was like,\nAWS, or something like that.\n\n46\n00:02:11.223 --> 00:02:14.246\nSo within this, we're just gonna\ncreate a few Python files.\n\n47\n00:02:14.246 --> 00:02:17.041\nYou're more than welcome to use\nany editor that you want, and\n\n48\n00:02:17.041 --> 00:02:19.835\njust to keep from having to do\na lot of context which is possibly\n\n49\n00:02:19.835 --> 00:02:21.642\nmaking you dizzy, I'm gonna use Vim.\n\n50\n00:02:21.642 --> 00:02:27.823\nThere may be some fun times, nice for\na chuckle whenever Vim goes crazy on you.\n\n51\n00:02:27.823 --> 00:02:31.197\nBut we're just gonna cover\nthese piece by piece,\n\n52\n00:02:31.197 --> 00:02:35.140\nI'm gonna keep these fairly small compact,\nhopefully.\n\n53\n00:02:35.140 --> 00:02:39.405\nAnd then all will be reveled\nover the course of the series.\n\n54\n00:02:39.405 --> 00:02:41.809\nSo let's go ahead and create a file.\n\n55\n00:02:41.809 --> 00:02:45.430\nLet's see, let's call it create and\ninitialize.\n\n56\n00:02:45.430 --> 00:02:51.230\nNow notice this folder is where dash is,\nthat's fine\n\n57\n00:02:51.230 --> 00:02:55.430\nif I was doing this some other ways dashes\nare bad, that is why I use underscores in\n\n58\n00:02:55.430 --> 00:02:59.830\ntheir actual file name, because those are\ngonna play nicer with Python, all right?\n\n59\n00:02:59.830 --> 00:03:05.330\nSo I'm in here, now full assumption\nwe're in Python 3, right?\n\n60\n00:03:06.650 --> 00:03:10.951\nHopefully 3, 5 or above, because\nthere are maybe times where you get,\n\n61\n00:03:10.951 --> 00:03:13.430\nwell, this is very specific.\n\n62\n00:03:13.430 --> 00:03:15.740\nNow a lot of these were\navailable in Python 2,\n\n63\n00:03:15.740 --> 00:03:20.390\nsome of them changed names,\nnot the ones we're gonna look at today.\n\n64\n00:03:20.390 --> 00:03:23.410\nBut some of them had changed names for\nfuture episodes.\n\n65\n00:03:23.410 --> 00:03:26.710\nSo we're in Python 3,\nhopefully 3.5 or above.\n\n66\n00:03:26.710 --> 00:03:29.260\nSo let's create a class here.\n\n67\n00:03:29.260 --> 00:03:37.600\nJust as a reminder, I'm gonna say\nclass Person: and def, init, self.\n\n68\n00:03:37.600 --> 00:03:40.820\nAnd a person has a name, and\nlet's just say they have an age.\n\n69\n00:03:42.770 --> 00:03:46.910\nAnd so, we're gonna say,\nself.name equals name and\n\n70\n00:03:46.910 --> 00:03:51.280\nself.name, or excuse me,\nage equals age, right?\n\n71\n00:03:51.280 --> 00:03:53.660\nSo what do I have here?\n\n72\n00:03:54.830 --> 00:03:59.987\nLet's go person equals Person, and\njust because he's with me, let's say Mike,\n\n73\n00:03:59.987 --> 00:04:02.476\nand he's the ripe age of 28.\n&gt;&gt; I like it.\n\n74\n00:04:02.476 --> 00:04:03.095\n&gt;&gt; Yeah.\n\n75\n00:04:03.095 --> 00:04:03.673\n&gt;&gt; You're a good man.\n\n76\n00:04:03.673 --> 00:04:04.915\n&gt;&gt; I figured I would score some brownie\n\n77\n00:04:04.915 --> 00:04:06.085\npoints with that one.\n&gt;&gt; [LAUGH]\n\n78\n00:04:06.085 --> 00:04:07.128\n&gt;&gt; So I'm gonna come back out,\n\n79\n00:04:07.128 --> 00:04:09.612\nI'm just gonna escape outta there,\nI'm back on the command line.\n\n80\n00:04:09.612 --> 00:04:11.764\nAnd I'm gonna say python3,\n\n81\n00:04:11.764 --> 00:04:16.768\nbecause on my local installation\npython3 is higher than python3.\n\n82\n00:04:16.768 --> 00:04:19.206\nIf I type python, it gives me 2,\n\n83\n00:04:19.206 --> 00:04:23.919\nso this is very much contextual\nto your installation of python.\n\n84\n00:04:23.919 --> 00:04:27.472\nIf you ever wonder about that,\njust say python --version.\n\n85\n00:04:27.472 --> 00:04:29.106\nNow this says 2.7.\n\n86\n00:04:29.106 --> 00:04:35.305\nI'll say python3 --version,\nand that's python 3.6.0.\n\n87\n00:04:35.305 --> 00:04:37.062\nSo I'm gonna use python3.\n\n88\n00:04:37.062 --> 00:04:41.020\nSo I'm gonna just say python3 -i, and\nI'm just gonna use that filename.\n\n89\n00:04:41.020 --> 00:04:42.920\nNow what that will do is start a ripple,\nso\n\n90\n00:04:42.920 --> 00:04:44.720\nI can play around with this a little bit.\n\n91\n00:04:44.720 --> 00:04:47.090\nBut we'll go ahead and run this\nfile in the context of the ripple.\n\n92\n00:04:47.090 --> 00:04:50.260\nSo any variables defined\nwill be available there.\n\n93\n00:04:50.260 --> 00:04:53.190\nSo I'm gonna run this, and\nlet's clear this out in a little bit.\n\n94\n00:04:53.190 --> 00:04:57.380\nSo if I say person, notice it's\nkind of a weird printout there,\n\n95\n00:04:57.380 --> 00:04:59.740\nbut person has been created.\n\n96\n00:04:59.740 --> 00:05:01.990\nI created a custom class and\n\n97\n00:05:01.990 --> 00:05:07.070\nI initialized, well,\nan object from that class.\n\n98\n00:05:07.070 --> 00:05:08.170\nAnd I can do this as many times.\n\n99\n00:05:08.170 --> 00:05:10.930\nSo think of a class as, well,\nit's the cookie cutter and\n\n100\n00:05:10.930 --> 00:05:13.370\nthe individual objects\nare the cookies that I'm cutting out.\n\n101\n00:05:13.370 --> 00:05:16.550\nAnd all quick cutters have\na very particular shape, and\n\n102\n00:05:16.550 --> 00:05:20.140\nI'm not gonna get a Christmas tree\ncookie out of a ginger bread man.\n\n103\n00:05:20.140 --> 00:05:21.910\nCookie cutter, so think of it that way.\n\n104\n00:05:21.910 --> 00:05:26.220\nAnd if I say person.name, and it's Mike.\n\n105\n00:05:26.220 --> 00:05:30.110\nPerson.age, and he's 28.\n\n106\n00:05:30.110 --> 00:05:33.300\nSo that is the initialization part.\n\n107\n00:05:33.300 --> 00:05:36.520\nIf we come back in,\nwell, that is not, see?\n\n108\n00:05:36.520 --> 00:05:38.630\nI am in VM mode.\n\n109\n00:05:38.630 --> 00:05:41.090\nLet's exit out of here, clear, and\n\n110\n00:05:41.090 --> 00:05:45.300\nthen come back in here and now kind\nof break this down, break it apart.\n\n111\n00:05:45.300 --> 00:05:49.470\nSo this initialization, this is something\nthat, I just watched a talk recently,\n\n112\n00:05:49.470 --> 00:05:52.910\nthis didn't exist before Python version 1.\n\n113\n00:05:52.910 --> 00:05:55.290\nThat's been a long time ago.\n\n114\n00:05:55.290 --> 00:05:58.300\nBut it didn't exist,\nyou had to do a lot of manual setup.\n\n115\n00:05:58.300 --> 00:06:01.910\nBut along the way they said, hey,\nif you want to initialize a class,\n\n116\n00:06:01.910 --> 00:06:06.460\nyou're gonna create a function as\npart of that class called double\n\n117\n00:06:06.460 --> 00:06:11.580\nunderscore emit double underscore, okay?\n\n118\n00:06:11.580 --> 00:06:16.120\nAnd if you do that, then we know it,\nthen Python knows what to do\n\n119\n00:06:16.120 --> 00:06:21.230\nin order to initialize that object,\nall right?\n\n120\n00:06:21.230 --> 00:06:22.290\nAnd then we have arguments.\n\n121\n00:06:22.290 --> 00:06:23.502\nWell, what arguments do I have?\n\n122\n00:06:23.502 --> 00:06:27.849\nName and age and, well,\nthose are just, well, Mike and\n\n123\n00:06:27.849 --> 00:06:30.667\n28 in this case down here, right?\n\n124\n00:06:30.667 --> 00:06:31.786\nAnd there they are.\n\n125\n00:06:31.786 --> 00:06:35.970\nOkay, so that initializes,\nbut there's this weird,\n\n126\n00:06:35.970 --> 00:06:39.610\nweird first argument, self.\n&gt;&gt; And\n\n127\n00:06:39.610 --> 00:06:43.007\nwhat does that refer to?\n&gt;&gt; Self is actually the object,\n\n128\n00:06:43.007 --> 00:06:44.799\nit's already been created.\n\n129\n00:06:44.799 --> 00:06:48.029\nPython's passing something that\nbehind the scenes, it was like,\n\n130\n00:06:48.029 --> 00:06:49.624\nhold on a second let me create it.\n\n131\n00:06:49.624 --> 00:06:52.340\nAnd then it's going to hand\nit back to this function.\n\n132\n00:06:53.855 --> 00:06:55.760\nThere's nothing special about that work.\n\n133\n00:06:55.760 --> 00:06:57.710\nAs a matter of fact, Mike,\n\n134\n00:06:57.710 --> 00:07:01.060\nwhat is your favorite vegetable?\n&gt;&gt; Broccoli.\n\n135\n00:07:01.060 --> 00:07:01.886\n&gt;&gt; All right,\n\n136\n00:07:01.886 --> 00:07:04.859\nyou had to speak long in this,\nbroccoli and\n\n137\n00:07:04.859 --> 00:07:08.259\nthen I'm gonna come back here and\nsay broccoli.\n\n138\n00:07:10.754 --> 00:07:15.570\nAnd broccoli like so, okay?\n\n139\n00:07:15.570 --> 00:07:20.262\nLet's go see, if I rerun this,\nI didn't get any error.\n\n140\n00:07:20.262 --> 00:07:24.885\nIf i say a person.name still Mike,\n\n141\n00:07:24.885 --> 00:07:28.743\nperson.age its still 28.\n\n142\n00:07:28.743 --> 00:07:33.510\nWell, there's nothing special about\nthat other than its considered kind of\n\n143\n00:07:33.510 --> 00:07:34.327\n[INAUDIBLE].\n\n144\n00:07:34.327 --> 00:07:37.154\nThe first argument of a classmate,\nexcuse me, and\n\n145\n00:07:37.154 --> 00:07:41.231\nobject method, because there are some\nexceptions to that, is self, and\n\n146\n00:07:41.231 --> 00:07:44.690\nthat's just something that\npeople use by convention.\n\n147\n00:07:44.690 --> 00:07:48.872\nSo if I'm writing Python code and I hand\nit to Mike, and Mike knows about Python,\n\n148\n00:07:48.872 --> 00:07:49.979\nthen he goes, self,\n\n149\n00:07:49.979 --> 00:07:53.377\nthat's the object that's being\npassed into the dunder and mit.\n\n150\n00:07:53.377 --> 00:07:59.560\nNow some people get really round\nup by column stands for the score.\n\n151\n00:07:59.560 --> 00:08:03.695\nI say that word, and it doesn’t bother me,\nbut if it bothers you, this is\n\n152\n00:08:03.695 --> 00:08:08.600\nthe initialization, magic method, or the\ninit method, on this particular object.\n\n153\n00:08:08.600 --> 00:08:11.580\nBut the real key takeaway,\nthat behind the scenes,\n\n154\n00:08:11.580 --> 00:08:16.070\nPython has already created kind of\nthis empty object, think of it as,\n\n155\n00:08:16.070 --> 00:08:19.440\nif you’re building something out of clay,\nit’s the lump of clay.\n\n156\n00:08:19.440 --> 00:08:21.420\nAnd it hands you the lump of clay and\n\n157\n00:08:21.420 --> 00:08:25.510\nthen you get to sculpt it into\nthe individual pieces, all right?\n\n158\n00:08:25.510 --> 00:08:28.610\nSo, that is our initialization part and\n\n159\n00:08:28.610 --> 00:08:32.790\nbased on our title we have a,\nwe kind of started at the end.\n\n160\n00:08:33.950 --> 00:08:39.050\nSo you may be asking yourself,\nwell, if Python's creating it,\n\n161\n00:08:39.050 --> 00:08:43.570\nand some other languages, I have\nfull control over the creation part.\n\n162\n00:08:44.750 --> 00:08:48.560\nIs there any way that I can\nmanage the creation part,\n\n163\n00:08:48.560 --> 00:08:50.870\nthe actual building up of a lump of clay?\n\n164\n00:08:50.870 --> 00:08:54.050\nMaybe I want a lump of\nclay that Is 3 pounds or\n\n165\n00:08:54.050 --> 00:08:57.130\n2 kilograms or\nactually that will be 4.4 pounds.\n\n166\n00:08:57.130 --> 00:08:58.170\nYou get what I'm saying.\n&gt;&gt; [LAUGH]\n\n167\n00:08:58.170 --> 00:09:01.127\n&gt;&gt; It's 1.5 kilograms, roughly.\n\n168\n00:09:01.127 --> 00:09:06.510\nIs there any way that I can\nactually take care of that?\n\n169\n00:09:06.510 --> 00:09:09.985\nWell these two methods\nkind of go hand-in-hand.\n\n170\n00:09:09.985 --> 00:09:12.957\nAnd before we move on,\nwe should probably change this back, so\n\n171\n00:09:12.957 --> 00:09:15.100\nthere's not random broccoli there.\n\n172\n00:09:15.100 --> 00:09:17.340\nPeople are like well Justin said,\n&gt;&gt; [LAUGH]\n\n173\n00:09:17.340 --> 00:09:18.200\n&gt;&gt; That we should always\n\n174\n00:09:18.200 --> 00:09:19.370\nuse broccoli.\n&gt;&gt; That's right.\n\n175\n00:09:19.370 --> 00:09:21.790\n&gt;&gt; As our first argument, all right?\n\n176\n00:09:21.790 --> 00:09:29.020\nSo if I come here, there's another magic\nmethod called Dunder new And class.\n\n177\n00:09:29.020 --> 00:09:33.765\nAnd then, these are times where\nI'm like I'm not really sure\n\n178\n00:09:33.765 --> 00:09:36.062\nwhat is the intended method.\n\n179\n00:09:36.062 --> 00:09:37.500\nWhat is it?\n\n180\n00:09:37.500 --> 00:09:39.154\nIs it arguments, right?\n\n181\n00:09:39.154 --> 00:09:41.670\nIs it positional arguments or\nis it a bunch of key word arguments.\n\n182\n00:09:41.670 --> 00:09:42.650\nI'm not sure.\n\n183\n00:09:42.650 --> 00:09:47.600\nSo I do things like this which is\nnot necessarily always the best.\n\n184\n00:09:47.600 --> 00:09:53.839\nAnd then I'll just go to\nsomething like print(cls),\n\n185\n00:09:53.839 --> 00:09:58.486\nprint(orgs), and print(kwargs) or\n\n186\n00:09:58.486 --> 00:10:02.220\nkeyword arguments, all right.\n\n187\n00:10:02.220 --> 00:10:05.690\nAll right, and then, okay,\nwell I'm gonna leave it like this.\n\n188\n00:10:05.690 --> 00:10:08.250\nAnd we're gonna see something\ninteresting happen.\n\n189\n00:10:08.250 --> 00:10:12.890\nSo python dash i create and\ninitialize, person.\n\n190\n00:10:12.890 --> 00:10:19.080\nOkay, person dot name.\n\n191\n00:10:19.080 --> 00:10:21.020\nThat's kind of interesting.\n\n192\n00:10:21.020 --> 00:10:23.640\nI didn't see any prints.\n\n193\n00:10:23.640 --> 00:10:25.220\nNothing happened, right?\n\n194\n00:10:25.220 --> 00:10:26.560\nWell, let's see here.\n\n195\n00:10:26.560 --> 00:10:32.279\nLet's kind of, let's try and\nactually create another person.\n\n196\n00:10:32.279 --> 00:10:39.110\nAubri and she is not 35, 25.\n\n197\n00:10:39.110 --> 00:10:40.260\nP1, okay.\n\n198\n00:10:40.260 --> 00:10:42.680\nWell, that's interesting.\n\n199\n00:10:43.690 --> 00:10:47.754\nBut you know what, up until this point\nremember how I said we're using Python 3?\n\n200\n00:10:48.880 --> 00:10:50.740\nI'm not using Python 3, right here.\n\n201\n00:10:50.740 --> 00:10:54.060\nDo I get different behavior\nif I'm using Python 3?\n\n202\n00:10:54.060 --> 00:10:57.310\nSo again, this is one of those\ncommon mistakes that you'll make\n\n203\n00:10:57.310 --> 00:11:01.220\nwhen you're doing this, if you're used\nto typing python then reversed to 2.7.\n\n204\n00:11:01.220 --> 00:11:03.516\nLet's see if we get\nthe exact same behavior.\n\n205\n00:11:03.516 --> 00:11:08.833\npython3 -i create_and_initialize.\n\n206\n00:11:10.330 --> 00:11:12.100\nSo now we actually get a printout.\n\n207\n00:11:13.420 --> 00:11:16.250\nAnd that's a key importance to remember.\n\n208\n00:11:17.550 --> 00:11:22.110\nWhat I'm showing you in this series\nis very much related to Python 3,\n\n209\n00:11:22.110 --> 00:11:25.600\nnamely 3.5 and above.\n\n210\n00:11:25.600 --> 00:11:30.610\nIf I use it in 2, I may not get\nthe behavior that I anticipate, okay.\n\n211\n00:11:30.610 --> 00:11:32.120\nSo do keep that in mind.\n\n212\n00:11:32.120 --> 00:11:34.572\nAnd I'm gonna try to keep it in mind for\nthe remainder of this series-\n\n213\n00:11:34.572 --> 00:11:35.163\n&gt;&gt; [LAUGH]\n\n214\n00:11:35.163 --> 00:11:36.490\n&gt;&gt; I make no promises that I\n\n215\n00:11:36.490 --> 00:11:38.430\ndon't goof from time to time.\n\n216\n00:11:38.430 --> 00:11:39.980\nNow, what do we print out.\n\n217\n00:11:39.980 --> 00:11:41.950\nWe printed out this interesting part.\n\n218\n00:11:41.950 --> 00:11:45.360\nLet's look at person.name.\n\n219\n00:11:45.360 --> 00:11:47.930\nWell, that's not good.\n\n220\n00:11:47.930 --> 00:11:49.190\nThat's a problem.\n\n221\n00:11:49.190 --> 00:11:50.660\nIsn't it?\n&gt;&gt; Doesn't look right.\n\n222\n00:11:50.660 --> 00:11:53.820\n&gt;&gt; Yeah 'NoneType' object has\n\n223\n00:11:53.820 --> 00:11:55.130\nno attribute 'name'.\n\n224\n00:11:55.130 --> 00:11:56.980\nOkay we're gonna come back to that.\n\n225\n00:11:56.980 --> 00:11:57.850\nWhat did we print out?\n\n226\n00:11:57.850 --> 00:12:02.720\nWell, we printed out the CLS and\nthat's actually the class name, so\n\n227\n00:12:02.720 --> 00:12:04.220\nit's the name of the class.\n\n228\n00:12:05.310 --> 00:12:07.840\nBetter yet,\nmore specifically it's not just the name,\n\n229\n00:12:07.840 --> 00:12:10.550\nit's actually the class itself.\n\n230\n00:12:10.550 --> 00:12:18.360\nSo the Dunder New gets the class piped in\nso you can use the class if need be, okay?\n\n231\n00:12:18.360 --> 00:12:22.162\nSo, you can also get the name\nof the class, using this.\n\n232\n00:12:22.162 --> 00:12:26.598\nAnd then the args, what's Mike in 28?\n\n233\n00:12:26.598 --> 00:12:31.590\nWell, those are the positional\narguments that are being\n\n234\n00:12:31.590 --> 00:12:35.050\npassed in to the class instantiation.\n\n235\n00:12:35.050 --> 00:12:38.209\nRemember, it goes,\nperson, mike, comma, 28.\n\n236\n00:12:38.209 --> 00:12:39.990\nThose are the arguments.\n\n237\n00:12:39.990 --> 00:12:43.570\nAnd then the keyword args,\nI've got none here.\n\n238\n00:12:43.570 --> 00:12:47.300\nNow, when you're using Dunder New,\nthere are times, and\n\n239\n00:12:47.300 --> 00:12:50.460\nit's a little beyond the scope\nof just the standard data model.\n\n240\n00:12:50.460 --> 00:12:55.970\nWhere the args and the kwargs,\nkeyword argument, actually change.\n\n241\n00:12:55.970 --> 00:12:57.290\nYou'll get different things.\n\n242\n00:12:58.580 --> 00:13:01.828\nIf you're using it exactly\nlike I've used it,\n\n243\n00:13:01.828 --> 00:13:07.282\nyour arguments will be what you passed\ninto the creation of the object, right?\n\n244\n00:13:07.282 --> 00:13:09.233\nThe capital P, Person.\n\n245\n00:13:09.233 --> 00:13:12.526\nAnd I'm gonna hop out of here and\njust go, so\n\n246\n00:13:12.526 --> 00:13:17.690\nI'm not hand waving, right,\nso I'm gonna hop over here.\n\n247\n00:13:17.690 --> 00:13:20.966\nThese are your args.\n\n248\n00:13:20.966 --> 00:13:25.560\nThere are no keyword arguments in\nthe Dunder New in this context.\n\n249\n00:13:27.090 --> 00:13:30.500\nNow there is something called Mediclasses,\n\n250\n00:13:30.500 --> 00:13:33.870\nwhich is a whole other scope in and\nof itself.\n\n251\n00:13:33.870 --> 00:13:35.110\nIf this is a metaclass,\n\n252\n00:13:36.130 --> 00:13:41.110\nthen the dunder __new__ actually gets\npassed a different set of args and kwargs.\n\n253\n00:13:41.110 --> 00:13:43.390\nSo do keep that in mind.\n\n254\n00:13:43.390 --> 00:13:45.850\nAgain, that's, I would say\n\n255\n00:13:45.850 --> 00:13:48.260\nthis is more of an intermediate\nthing that's really nice to know.\n\n256\n00:13:48.260 --> 00:13:51.950\nSo know this,\nmetaclasses are fairly advanced.\n\n257\n00:13:51.950 --> 00:13:55.280\nAnd by and large,\nmost people will not use them.\n\n258\n00:13:55.280 --> 00:13:57.890\nNow, I printed the class.\n\n259\n00:13:57.890 --> 00:13:59.210\nSo I have access to the class.\n\n260\n00:13:59.210 --> 00:14:00.890\nNotice it's not self, it's not the object.\n\n261\n00:14:00.890 --> 00:14:02.900\nIt's actually the class.\n\n262\n00:14:02.900 --> 00:14:05.440\nThose are a nuanced difference.\n\n263\n00:14:05.440 --> 00:14:07.310\nAnd I get the arguments for\nthe instantiation.\n\n264\n00:14:07.310 --> 00:14:08.220\nWe've all ready talked about that.\n\n265\n00:14:08.220 --> 00:14:10.320\nAnd then I get no keyword\narguments in this context.\n\n266\n00:14:11.400 --> 00:14:15.230\nHowever, when I tried to access\nperson.name to see Mike?\n\n267\n00:14:16.390 --> 00:14:18.540\nThere's nothing there, it says none type.\n\n268\n00:14:18.540 --> 00:14:19.410\nWhy is it a none type?\n\n269\n00:14:19.410 --> 00:14:23.740\nWell, because functions in Python have,\nif there's no explicit return,\n\n270\n00:14:23.740 --> 00:14:27.280\nthere's an explicit none return, right, so\n\n271\n00:14:27.280 --> 00:14:31.980\nit will return none, or\nnothing from that function.\n\n272\n00:14:31.980 --> 00:14:37.180\nSo if I go here and\nI return- what do I got here?\n\n273\n00:14:37.180 --> 00:14:40.480\nI got return curly brace,\nor return a dictionary.\n\n274\n00:14:40.480 --> 00:14:45.110\nSo I'm just gonna return a dictionary,\nand let's see how that changes things.\n\n275\n00:14:46.630 --> 00:14:48.940\nAnd actually,\nlet me exit out and rerun that.\n\n276\n00:14:50.050 --> 00:14:53.080\nNothing's changed from\nthat printout perspective.\n\n277\n00:14:54.150 --> 00:14:58.023\nThe dict object has no attribute name.\n\n278\n00:14:58.023 --> 00:15:00.420\nThis was none type.\n\n279\n00:15:00.420 --> 00:15:06.500\nSo, whatever I return has to support\nwhat I'm doing in initialization.\n\n280\n00:15:06.500 --> 00:15:07.730\nSo, I can't hijack this and\n\n281\n00:15:07.730 --> 00:15:11.260\nsay I don't want your standard object,\nthat bundle of clay.\n\n282\n00:15:11.260 --> 00:15:15.807\nI want to substitute my own bundle\nof clay and then whatever is\n\n283\n00:15:15.807 --> 00:15:20.812\nreturned from dunder new is actually\nfed back into dunder in then.\n\n284\n00:15:20.812 --> 00:15:23.795\nAnd there's some other things that go on,\nbut from a simplistic view,\n\n285\n00:15:23.795 --> 00:15:24.960\nthat's what it is.\n\n286\n00:15:24.960 --> 00:15:26.830\nBut if I return a dictionary,\n\n287\n00:15:28.760 --> 00:15:33.170\nI lost the ability to do the\ninitialization step as I have it written.\n\n288\n00:15:33.170 --> 00:15:33.930\nThat's a problem.\n\n289\n00:15:35.590 --> 00:15:37.420\nSo how does one do this?\n\n290\n00:15:37.420 --> 00:15:42.664\nWell probably what's mostly\ngonna happen during this\n\n291\n00:15:42.664 --> 00:15:48.825\nstep is you're going to verify\nsomething about the arguments.\n\n292\n00:15:48.825 --> 00:15:52.124\nSo let's do this,\n\n293\n00:15:52.124 --> 00:15:57.910\nif the len of args is less than 2,\n\n294\n00:16:00.797 --> 00:16:04.930\nThen raise TypeError.\n\n295\n00:16:04.930 --> 00:16:07.520\nYeah.\nTechnically this is probably not\n\n296\n00:16:07.520 --> 00:16:08.900\nthe best error.\n\n297\n00:16:08.900 --> 00:16:17.750\nYou have not supplied,\nThe correct number of args.\n\n298\n00:16:17.750 --> 00:16:19.615\nThat's a long message.\n&gt;&gt; [LAUGH]\n\n299\n00:16:19.615 --> 00:16:20.690\n&gt;&gt; All right?\n\n300\n00:16:20.690 --> 00:16:26.410\nAnd then, we're probably just going\nto send back that bundle of clay.\n\n301\n00:16:26.410 --> 00:16:29.890\nI don't have access to it right now.\n\n302\n00:16:29.890 --> 00:16:34.950\nBut that's all right, within Python,\nI have the ability to go hey,\n\n303\n00:16:34.950 --> 00:16:38.570\nwhatever class this is inheriting from.\n\n304\n00:16:39.650 --> 00:16:43.080\nNotice there's' nothing up here, okay?\n\n305\n00:16:43.080 --> 00:16:44.510\nNothing right there, but\n\n306\n00:16:44.510 --> 00:16:48.900\nI have parenthesis there that would\nsay person inherits from block.\n\n307\n00:16:48.900 --> 00:16:50.210\nSince I have nothing there,\n\n308\n00:16:50.210 --> 00:16:53.552\nthere's a behind the scenes thing\ncalled just a general object.\n\n309\n00:16:53.552 --> 00:17:00.040\nPython construct one of those,\nit's the most basic type in the system.\n\n310\n00:17:00.040 --> 00:17:02.330\nAnd that's what should be returned.\n\n311\n00:17:02.330 --> 00:17:03.300\nWell, how do I get that?\n\n312\n00:17:04.770 --> 00:17:10.180\nWell, I say new and\nthen I pass in the class.\n\n313\n00:17:10.180 --> 00:17:13.620\nSo by saying give me the object,\ncall the new,\n\n314\n00:17:13.620 --> 00:17:17.580\nwith this class name,\nbehind the scenes Python'll go, okay.\n\n315\n00:17:17.580 --> 00:17:21.133\nI'll create a bundle of\nclay that is personalized,\n\n316\n00:17:21.133 --> 00:17:26.152\nthat has this attributes and then feed\nthat in to bundle in it, all right?\n\n317\n00:17:26.152 --> 00:17:29.530\nNow, as it stands what is\nback to exactly how it works?\n\n318\n00:17:29.530 --> 00:17:30.700\nEverything is good to go.\n\n319\n00:17:30.700 --> 00:17:35.350\nLet's say python3 -i create and\ninitialization, excuse me create and\n\n320\n00:17:35.350 --> 00:17:35.880\ninitialize.\n\n321\n00:17:36.890 --> 00:17:41.680\nEverything's good if I say person.name,\nwe're back to Mike,\n\n322\n00:17:41.680 --> 00:17:43.570\neverything's back to working.\n\n323\n00:17:43.570 --> 00:17:47.460\nAll right, now,\nI'm never gonna throw that error.\n\n324\n00:17:47.460 --> 00:17:50.818\nIf I try to run that again and\n\n325\n00:17:50.818 --> 00:17:55.637\nsay p1 = Person and to say name and 3.\n\n326\n00:17:55.637 --> 00:17:58.660\nOr, what I said there\nhas to be two arguments.\n\n327\n00:17:58.660 --> 00:17:59.810\nWell, I'm going to try that.\n\n328\n00:18:01.690 --> 00:18:02.752\nCreate and initialize.\n\n329\n00:18:02.752 --> 00:18:06.570\nI'm gonna get this because this\nis what I put in under new.\n\n330\n00:18:06.570 --> 00:18:09.230\nThis is my custom code,\nI have thrown an error,\n\n331\n00:18:09.230 --> 00:18:11.160\nI have said hey you did not supplied\nthe correct number of arguments.\n\n332\n00:18:12.170 --> 00:18:15.328\nIf I left this out then I'm\ngonna get an error anyway.\n\n333\n00:18:15.328 --> 00:18:19.000\nPython is gonna go, hey you didn't\nsupply the correct number of arguments.\n\n334\n00:18:19.000 --> 00:18:24.020\nSo this is not a great validation but\nsomething that I'm not saying you should,\n\n335\n00:18:24.020 --> 00:18:28.030\nI just wanna let you know that you can\nthere are times where you wanna do this.\n\n336\n00:18:28.030 --> 00:18:31.920\nIt's not so much checking something\nthat Python already checks,\n\n337\n00:18:31.920 --> 00:18:37.100\nbut well, Mike, let me ask you a question.\n&gt;&gt; Okay.\n\n338\n00:18:38.310 --> 00:18:38.890\n&gt;&gt; Is your name\n\n339\n00:18:38.890 --> 00:18:40.135\na number?\n&gt;&gt; It is not.\n\n340\n00:18:40.135 --> 00:18:45.240\n&gt;&gt; Uh-huh, is your age just text,\n\n341\n00:18:45.240 --> 00:18:47.350\nor is it a number?\n&gt;&gt; Well it's a number, right?\n\n342\n00:18:47.350 --> 00:18:49.650\n&gt;&gt; All right, so here is the deal.\n\n343\n00:18:51.010 --> 00:18:54.210\nI can say, within arg,\nI know there's two arguments.\n\n344\n00:18:54.210 --> 00:18:57.440\nI'm writing this custom, so\nthis is not really extensible.\n\n345\n00:18:57.440 --> 00:19:00.760\nI gonna name and age, equals args.\n\n346\n00:19:00.760 --> 00:19:04.250\nAnd I'm just gonna unpack this, so\nI'm grabbing what is our collection and\n\n347\n00:19:04.250 --> 00:19:05.570\nputting those into their respective.\n\n348\n00:19:06.910 --> 00:19:11.944\nAnd if name or excuse me,\nif not is instance,\n\n349\n00:19:11.944 --> 00:19:16.323\nand name is not an instance of a string.\n\n350\n00:19:16.323 --> 00:19:21.297\nNow, I'm gonna raise a TypeError and\n\n351\n00:19:21.297 --> 00:19:27.212\nsay all right,\nyour name should be a string.\n\n352\n00:19:29.346 --> 00:19:30.093\nAll right?\n\n353\n00:19:30.093 --> 00:19:33.649\nAnd then I can also say if not,\nnot that is not how you write that.\n\n354\n00:19:33.649 --> 00:19:38.357\nIf not isinstance age of either,\nan int or a float,\n\n355\n00:19:38.357 --> 00:19:42.200\nI'm providing some flexibility there.\n\n356\n00:19:42.200 --> 00:19:49.046\nSo I'm gonna raise TypeError your\nage should be a numeric type.\n\n357\n00:19:53.252 --> 00:19:53.811\nAll right?\n\n358\n00:19:53.811 --> 00:19:57.120\nSo that's something that we're validating.\n\n359\n00:19:57.120 --> 00:19:59.590\nThis is something I'm\nvalidating the arguments and\n\n360\n00:19:59.590 --> 00:20:01.030\nI wanna make sure that they are right.\n\n361\n00:20:01.030 --> 00:20:02.660\nI'm just raising an error.\n\n362\n00:20:02.660 --> 00:20:05.790\nYou could handle this\na little more gracefully.\n\n363\n00:20:05.790 --> 00:20:09.540\nYou could say, hey maybe they accidentally\ntyped in a stream let me see if I can\n\n364\n00:20:09.540 --> 00:20:11.080\ncast that to a number.\n\n365\n00:20:11.080 --> 00:20:12.390\nAnd if I can then I'm\ngoing to go ahead and\n\n366\n00:20:12.390 --> 00:20:16.380\ncontinue on but\npass in the new number part.\n\n367\n00:20:16.380 --> 00:20:22.010\nAll right, so if I do that,\nas it stands everything is good to go.\n\n368\n00:20:22.010 --> 00:20:30.280\nAll right everything's good, but\nif I say, p1=Person(13, 'cheese').\n\n369\n00:20:30.280 --> 00:20:32.640\nWell that would be their name is 13 and\ntheir age is cheese.\n\n370\n00:20:32.640 --> 00:20:33.850\nThat's nonsensical.\n\n371\n00:20:33.850 --> 00:20:36.510\nNumber one,\nthose are just nonsensical values.\n\n372\n00:20:36.510 --> 00:20:38.550\nBut number two, they're the wrong type.\n\n373\n00:20:38.550 --> 00:20:42.050\nSo if I hit it, your name should be\na string, that it checked the name first,\n\n374\n00:20:42.050 --> 00:20:43.790\nthat's based on my logic.\n\n375\n00:20:43.790 --> 00:20:45.080\nWell, all right.\n\n376\n00:20:45.080 --> 00:20:46.800\nSo let me get, put this as a string.\n\n377\n00:20:48.830 --> 00:20:51.650\nSo their name is still 13,\nso I can't get around there.\n\n378\n00:20:51.650 --> 00:20:53.990\nYour age should be a numeric type.\n\n379\n00:20:53.990 --> 00:20:56.855\nWell I can't do that.\n\n380\n00:20:56.855 --> 00:21:00.535\nSo this is someway that I could put\nvalidations in here and for a person,\n\n381\n00:21:00.535 --> 00:21:02.185\nyou could do a validation like this,\n\n382\n00:21:02.185 --> 00:21:05.965\na user, you could validate that\nthey have an email, right?\n\n383\n00:21:05.965 --> 00:21:12.335\nThere has to be an email or that the email\nis in fact of email lookness, right?\n\n384\n00:21:12.335 --> 00:21:15.420\nSo it's something @\nsomething dot something.\n\n385\n00:21:15.420 --> 00:21:17.660\nSo it's a little more complicated but\n\n386\n00:21:17.660 --> 00:21:19.730\nthat's something you can\ndo inside of the new.\n\n387\n00:21:19.730 --> 00:21:26.760\nIn addition to, Lets try this again.\n\n388\n00:21:26.760 --> 00:21:30.066\nAll right, so in addition to,\n\n389\n00:21:33.503 --> 00:21:38.038\nI'm going to take these out And\n\n390\n00:21:38.038 --> 00:21:43.828\nI'm gonna take this out and instead of\nreturning, I'm just gonna say obj is that.\n\n391\n00:21:43.828 --> 00:21:48.510\nAnd before I return it,\nI wanna make sure that there is a unique\n\n392\n00:21:48.510 --> 00:21:52.130\nidentifier like a UUID or\nsomething like that.\n\n393\n00:21:53.650 --> 00:21:56.960\nWell, python has the UUID library.\n\n394\n00:21:56.960 --> 00:21:58.530\nLet me go ahead and import that.\n\n395\n00:21:58.530 --> 00:22:01.750\nAnd just to make sure that this has\na unique identifier that maybe I'm gonna\n\n396\n00:22:01.750 --> 00:22:05.520\nuse for some instance,\nmaybe as a verification.\n\n397\n00:22:05.520 --> 00:22:10.300\nNow, technically Python already provides\nyou an ID based on memory address and\n\n398\n00:22:10.300 --> 00:22:15.378\nthings of that nature or hash codes,\nbut this is kind of a contrary example.\n\n399\n00:22:15.378 --> 00:22:19.585\nBut you can hijack the object creation and\nmake sure you have certain properties.\n\n400\n00:22:19.585 --> 00:22:25.703\nSo, I can say something like,\nlet's go obj.uuid = uuid.uuid4,\n\n401\n00:22:25.703 --> 00:22:30.938\nnothing special about version 4,\nI just picked version 4.\n\n402\n00:22:30.938 --> 00:22:38.538\nAnd then we're gonna return that object,\nokay?\n\n403\n00:22:38.538 --> 00:22:39.663\nEverything should still work.\n\n404\n00:22:39.663 --> 00:22:44.060\nI'm no longer validating for name and\nsuch, but if I re-run this, and\n\n405\n00:22:44.060 --> 00:22:45.320\nsay person.name.\n\n406\n00:22:45.320 --> 00:22:49.220\nWell there's Mike, and\nhis age still is 28, but\n\n407\n00:22:49.220 --> 00:22:53.010\neven though I didn't\ncreate him with a UID,\n\n408\n00:22:53.010 --> 00:22:57.510\nhe now has a UID that is specific to him.\n\n409\n00:22:57.510 --> 00:22:59.280\nSo I can't hijack those.\n\n410\n00:22:59.280 --> 00:23:03.490\nSo even though you don't see a lot\nof Python code with the dunder\n\n411\n00:23:03.490 --> 00:23:07.860\nnew there are times, maybe validation or\nmaking sure that a certain attribute\n\n412\n00:23:07.860 --> 00:23:11.720\nthat is generated, that actually\nrequires no user input, is there.\n\n413\n00:23:12.760 --> 00:23:16.240\nThen you can hijack\nthe dunder new by enlarge.\n\n414\n00:23:16.240 --> 00:23:21.030\nFor the most part, you should\nnot touch the Dunder New Method,\n\n415\n00:23:21.030 --> 00:23:23.280\nunless you have a very specific use case.\n\n416\n00:23:23.280 --> 00:23:26.130\nValidation is one of them there's\nother ways to validate new.\n\n417\n00:23:26.130 --> 00:23:29.188\nWe'll see some other ways to enforce,\nlike typing and\n\n418\n00:23:29.188 --> 00:23:31.124\nsome other things of that nature.\n\n419\n00:23:31.124 --> 00:23:35.840\nMost of the time, let's say 95% and,\nto some extent, that's my opinion.\n\n420\n00:23:35.840 --> 00:23:37.660\nI have a bias.\n\n421\n00:23:37.660 --> 00:23:42.280\nAll of your setup is going to be\ndone in the dunder init method.\n\n422\n00:23:42.280 --> 00:23:44.530\nBut now that you're aware of those,\nif you use either one,\n\n423\n00:23:44.530 --> 00:23:50.260\nPython just kind of gives you\nthe magic to provide that hijack, or\n\n424\n00:23:50.260 --> 00:23:56.270\nto provide initialization and creation\nwith custom logic just right in there.\n\n425\n00:23:56.270 --> 00:23:59.030\nPython 3, remind you nothing else.\n\n426\n00:23:59.030 --> 00:24:03.890\nBut Mike, that is creating and\ninitializing instance of custom classes\n\n427\n00:24:03.890 --> 00:24:07.060\nin ways that we can kind of\ntweak on them so to speak.\n\n428\n00:24:07.060 --> 00:24:07.560\n&gt;&gt; Alright,\n\n429\n00:24:07.560 --> 00:24:10.490\nthere is some great stuff there and\na great start too.\n\n430\n00:24:10.490 --> 00:24:11.530\nPython data model.\n\n431\n00:24:11.530 --> 00:24:14.750\nWe appreciate that, we hope everyone\nout there enjoyed watching this one.\n\n432\n00:24:14.750 --> 00:24:17.858\nSigning off for\nDEVPRO.TV I've been your host Mike Rodrick\n\n433\n00:24:17.858 --> 00:24:18.702\n&gt;&gt; And I'm Justin Nelson.\n\n434\n00:24:18.702 --> 00:24:20.670\n&gt;&gt; And we'll see you next time.\n\n435\n00:24:20.670 --> 00:24:26.293\n[MUSIC]\n\n",
          "vimeoId": "251550412"
        },
        {
          "description": "In this episode, Justin and Mike start exploring how you can represent an object for an output operation. Moreover, Justin discusses the nuanced differences between the \\_\\_str\\_\\_ and \\_\\_repr\\_\\_ methods as part of the Python data model protocol.",
          "length": "1217",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-2-1-representing_an_instance_str_and_repr-011618-PGM.00_20_59_14.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-2-1-representing_an_instance_str_and_repr-011618-PGM.00_20_59_14.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-2-1-representing_an_instance_str_and_repr-011618-PGM.00_20_59_14.Still001-sm.jpg",
          "title": "Representing an Instance: str and repr",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.366 --> 00:00:16.299\nHello, welcome to another exciting\nepisode here at DevProTV.\n\n3\n00:00:16.299 --> 00:00:20.481\nI'm your host, Mike Rodrick, and today\nwe're covering the Python data model.\n\n4\n00:00:20.481 --> 00:00:24.946\nSpecifically, in this episode we're going\nto be looking at representing an instance,\n\n5\n00:00:24.946 --> 00:00:25.666\nstr and repr.\n\n6\n00:00:25.666 --> 00:00:30.411\nAnd here tell us about what the heck\nthat stuff means is none other than Mr.\n\n7\n00:00:30.411 --> 00:00:31.580\nJustin Denison.\n\n8\n00:00:31.580 --> 00:00:33.910\nWelcome back, Justin.\n&gt;&gt; Thanks for having me back, Mike.\n\n9\n00:00:33.910 --> 00:00:35.940\nAnd how are you today?\n&gt;&gt; I'm doing good, but\n\n10\n00:00:35.940 --> 00:00:40.300\nI had a question since that last episode\nthere, you were creating some classes and\n\n11\n00:00:40.300 --> 00:00:44.000\nprinting them out, you were getting\nsome really strange output.\n\n12\n00:00:44.000 --> 00:00:45.830\nWhat the heck was that?\n&gt;&gt; Well,\n\n13\n00:00:45.830 --> 00:00:49.920\nMike, I am here to calm your nerves,\nright.\n\n14\n00:00:49.920 --> 00:00:52.770\nWe saw a printout in the previous episode,\nand if you haven't checked that out,\n\n15\n00:00:52.770 --> 00:00:55.760\ndefinitely go check that out, because\nthese kind of build upon each other.\n\n16\n00:00:55.760 --> 00:01:01.970\nAnd I will tell you, after this episode,\nstr and repr will continue to come up.\n\n17\n00:01:01.970 --> 00:01:04.530\nBut there was this weird printout.\n\n18\n00:01:04.530 --> 00:01:07.725\nAnd we had to do, we had to do\nwhat I've heard called dot dot,\n\n19\n00:01:07.725 --> 00:01:10.750\nwhere I just start .attribute name,\nbut see what it is.\n\n20\n00:01:12.310 --> 00:01:14.130\nMaybe that's not the best, right?\n\n21\n00:01:14.130 --> 00:01:17.380\nSo actually, as a reminder, let's go\nahead and jump into the screen and\n\n22\n00:01:17.380 --> 00:01:18.690\nsee what Mike's talking about, so\n\n23\n00:01:18.690 --> 00:01:22.680\nwe're all on the same page, but\nthen address how do we fix it.\n\n24\n00:01:22.680 --> 00:01:26.260\nSo if I look here at our previous screen,\nwe have this person class, and\n\n25\n00:01:26.260 --> 00:01:27.780\nwe have a name and an age.\n\n26\n00:01:27.780 --> 00:01:31.370\nAnd I'm gonna run this with python3,\ndon't forget python3.\n\n27\n00:01:31.370 --> 00:01:34.610\nAnd I say person, got a weird print out.\n\n28\n00:01:35.910 --> 00:01:39.880\nWell, I kinda have this name space\nvariable because this is the main\n\n29\n00:01:39.880 --> 00:01:40.688\nfile that's running.\n\n30\n00:01:42.120 --> 00:01:44.737\nIt's the person type, right, person class.\n\n31\n00:01:44.737 --> 00:01:49.320\nIt is an object at some hex value under\nmemory address location or something.\n\n32\n00:01:49.320 --> 00:01:52.160\nI don't know if that was right.\n\n33\n00:01:52.160 --> 00:01:56.350\nI say things like that to reinforce,\nokay I know it's a person object, but\n\n34\n00:01:56.350 --> 00:01:57.790\nI don't really know\nanything else about it.\n\n35\n00:01:57.790 --> 00:02:01.141\nI can't do any inspections so\nI have to do things like this,\n\n36\n00:02:01.141 --> 00:02:05.105\nwhich assumes that I already know\nimportant things about the object.\n\n37\n00:02:05.105 --> 00:02:08.895\nI know it has a name,\nbut what if it didn't?\n\n38\n00:02:08.895 --> 00:02:14.580\nLike if I said person.occupation,\nI could've just said job there I guess.\n\n39\n00:02:14.580 --> 00:02:17.250\nPerson object has no\nattribute [INAUDIBLE], and\n\n40\n00:02:17.250 --> 00:02:19.130\nthe I gotta go look at code.\n\n41\n00:02:19.130 --> 00:02:20.610\nMaybe this isn't the easiest way.\n\n42\n00:02:20.610 --> 00:02:25.220\nSo it'd be nice if I had some\nkind of output representation of\n\n43\n00:02:25.220 --> 00:02:29.620\nthe respective instance that would tell me\nmeaningful attributes about the instance.\n\n44\n00:02:29.620 --> 00:02:31.420\nI'm not saying like methods, right?\n\n45\n00:02:31.420 --> 00:02:33.300\nThings that it can do.\n\n46\n00:02:33.300 --> 00:02:35.660\nBut data that is bundled up within them.\n\n47\n00:02:35.660 --> 00:02:40.730\nAnd the first two that we're going\nto address are str and repr.\n\n48\n00:02:40.730 --> 00:02:43.770\nSometimes I call it reaper because I think\nit's interesting to say it that way,\n\n49\n00:02:43.770 --> 00:02:46.200\nit kinda grabs attention, but it is reper.\n\n50\n00:02:46.200 --> 00:02:48.620\nAnd reper stands for representation.\n\n51\n00:02:48.620 --> 00:02:52.580\nIt is a formal representation\nthat should be unambiguous.\n\n52\n00:02:52.580 --> 00:02:54.350\nThere shouldn't be a what?\n\n53\n00:02:54.350 --> 00:02:57.280\nWait a minute,\nis that this one or that one?\n\n54\n00:02:57.280 --> 00:03:01.800\nA string is the informal representation,\n\n55\n00:03:01.800 --> 00:03:05.410\nlike this is a person named Mike, right?\n\n56\n00:03:05.410 --> 00:03:07.900\nIt doesn't tell you everything but\nit gives you a quick glance.\n\n57\n00:03:09.020 --> 00:03:12.570\nTechnically we could implement them any\nway we want to, but that's the general\n\n58\n00:03:12.570 --> 00:03:19.536\nconsensus, the convention that we would\nuse in order to see how in spelling.\n\n59\n00:03:19.536 --> 00:03:24.270\nSo you know what, we could stay\nwith this person but just for\n\n60\n00:03:24.270 --> 00:03:28.918\ngiggles, let's say stir_and_repr.py,\nall right.\n\n61\n00:03:28.918 --> 00:03:30.540\nAnd, you know what?\n\n62\n00:03:30.540 --> 00:03:33.160\nI like Tacos.\n&gt;&gt; I do too.\n\n63\n00:03:33.160 --> 00:03:35.178\n&gt;&gt; Yeah, tacos are phenomenal.\n\n64\n00:03:35.178 --> 00:03:41.680\nThey have all the major food groups\nlike tortillas [LAUGH] and cheese.\n\n65\n00:03:41.680 --> 00:03:44.537\nWhat is part of what we're talking?\n\n66\n00:03:44.537 --> 00:03:47.973\nWe have a shell, and we have some of\nprotein, some abstract in this, right?\n\n67\n00:03:47.973 --> 00:03:50.580\nI like to chicken tacos,\nbeef tacos, steak tacos.\n\n68\n00:03:50.580 --> 00:03:53.440\nI'll be honest with you,\nI'm pretty good with,\n\n69\n00:03:53.440 --> 00:03:55.100\npretty much anything you can put on taco.\n\n70\n00:03:56.530 --> 00:03:58.050\nYou don't have to have a protein, or\n\n71\n00:03:58.050 --> 00:04:02.150\nmaybe your protein source of of the\nvegetable variety, that's perfectly okay.\n\n72\n00:04:02.150 --> 00:04:05.260\nAnd then some people\nlike them fairly plain,\n\n73\n00:04:05.260 --> 00:04:08.700\nsome people like them with some toppings,\nright?\n\n74\n00:04:08.700 --> 00:04:14.470\nSo I made a decision that\nmy taco has a shell, right?\n\n75\n00:04:14.470 --> 00:04:16.920\nHard or soft, wheat, flour.\n\n76\n00:04:16.920 --> 00:04:19.730\nAnd there are ways to enforce\nthat people are giving me,\n\n77\n00:04:19.730 --> 00:04:24.390\nlike, it is a shell that has a type and\na hardness, or something.\n\n78\n00:04:24.390 --> 00:04:28.080\nWe're just gonna use strings,\njust for simplicity's sake.\n\n79\n00:04:28.080 --> 00:04:34.778\nShell, and self, I'm gonna set up them\na little better on this, protein.\n\n80\n00:04:34.778 --> 00:04:41.130\nAnd self.toppings = toppings.\n\n81\n00:04:41.130 --> 00:04:43.990\nNow, for toppings I'm using\na default argument, just so\n\n82\n00:04:43.990 --> 00:04:46.290\nif they don't pass on any toppings,\nthere's no toppings on it.\n\n83\n00:04:46.290 --> 00:04:48.830\nIt's just the shell and the protein.\n\n84\n00:04:48.830 --> 00:04:53.810\nAll right, so before we get out of here,\nlet's create a taco.\n\n85\n00:04:53.810 --> 00:04:56.050\nActually, let's create a couple of tacos.\n\n86\n00:04:56.050 --> 00:05:02.160\nSo t1 is taco that is hard shell,\nand it's chicken.\n\n87\n00:05:02.160 --> 00:05:04.090\nThat's also a string.\n\n88\n00:05:04.090 --> 00:05:05.680\nBut it has not toppings,\nthis is fairly plain.\n\n89\n00:05:07.430 --> 00:05:12.614\nAnd we can also have\nanother one called taco\n\n90\n00:05:12.614 --> 00:05:19.238\nthat let's say it's soft and\nit is, let's say tofu.\n\n91\n00:05:19.238 --> 00:05:22.776\nBut the toppings are what?\n\n92\n00:05:22.776 --> 00:05:28.016\nCheese, lettuce and sour cream,\n\n93\n00:05:28.016 --> 00:05:32.360\njust like that, all right?\n\n94\n00:05:32.360 --> 00:05:33.730\nSo we have these two tacos.\n\n95\n00:05:33.730 --> 00:05:36.860\nNow let's talk about that weirdness,\nright, that Mike brought up from\n\n96\n00:05:36.860 --> 00:05:40.540\nthe person class or\nthe person object from the last episode.\n\n97\n00:05:40.540 --> 00:05:45.330\nSo we'll clear this out and\nwe say, python3 -i, so\n\n98\n00:05:45.330 --> 00:05:47.738\nthat will execute everything and\nnow I have t1.\n\n99\n00:05:47.738 --> 00:05:52.670\nT1, t2, the only thing that\nI know that makes these\n\n100\n00:05:52.670 --> 00:05:57.030\ntwo objects different are these numbers,\nand\n\n101\n00:05:57.030 --> 00:05:59.530\nthey're pretty close.\n&gt;&gt; Now,\n\n102\n00:05:59.530 --> 00:06:00.930\nthat doesn't seem all that helpful.\n&gt;&gt; Yeah,\n\n103\n00:06:00.930 --> 00:06:01.430\nyeah.\n&gt;&gt; [LAUGH]\n\n104\n00:06:01.430 --> 00:06:02.510\n&gt;&gt; You're like, well,\n\n105\n00:06:02.510 --> 00:06:05.290\ndoes it have toppings?\nWho knows, right?\n\n106\n00:06:05.290 --> 00:06:11.669\nSo it would be nice if I had some\nkind of representation, right.\n\n107\n00:06:11.669 --> 00:06:16.414\n[SOUND] So if I call,\nthere's a method that calls a repr\n\n108\n00:06:16.414 --> 00:06:21.164\n[COUGH] called repr that's\nat the top level of Python.\n\n109\n00:06:21.164 --> 00:06:23.810\nYou can just call it from anywhere,\nit's part of the built ins.\n\n110\n00:06:23.810 --> 00:06:27.810\nAnd what it does is it\nactually calls dundur repr.\n\n111\n00:06:27.810 --> 00:06:29.322\nSo let's say t1.\n\n112\n00:06:29.322 --> 00:06:35.460\nWell that's actually what I'm getting, so\nby default, I have a default one of those.\n\n113\n00:06:35.460 --> 00:06:37.470\nIf I say, well give me the string version.\n\n114\n00:06:38.980 --> 00:06:42.110\nI'm getting the exact same\nthing because by default,\n\n115\n00:06:42.110 --> 00:06:44.830\nthat's what I'm going to get, I'm going\nto get an official representation.\n\n116\n00:06:44.830 --> 00:06:46.440\nWhat is it?\nIt's a taco object\n\n117\n00:06:46.440 --> 00:06:49.120\nat this memory location.\n&gt;&gt; Can we change that up?\n\n118\n00:06:49.120 --> 00:06:53.640\nCan we make that a little more useful and\nsee whether it has toppings or\n\n119\n00:06:53.640 --> 00:06:56.310\nproteins?\n&gt;&gt; Yeah, yeah, I'm with you, Mike.\n\n120\n00:06:56.310 --> 00:06:58.400\nThis is kind of like reading a menu and\n\n121\n00:06:58.400 --> 00:07:03.294\ngoing, I want the taco with XOA482921D3.\n&gt;&gt; It's a crapshoot.\n\n122\n00:07:03.294 --> 00:07:04.200\n&gt;&gt; [LAUGH]\n\n123\n00:07:04.200 --> 00:07:05.450\n&gt;&gt; What am I getting?\n\n124\n00:07:05.450 --> 00:07:07.980\nI hope it's good though.\n\n125\n00:07:07.980 --> 00:07:10.850\nSo yeah, I completely agree.\n\n126\n00:07:10.850 --> 00:07:13.370\nAnd those two methods you may have\n\n127\n00:07:13.370 --> 00:07:15.900\nused to inspect classes as\nyou've been working on this.\n\n128\n00:07:15.900 --> 00:07:21.040\nBut you may not have known that, well,\nyou can override these with your own,\n\n129\n00:07:21.040 --> 00:07:22.700\nand let’s add a little space there.\n\n130\n00:07:22.700 --> 00:07:24.400\nI can say repr.\n\n131\n00:07:26.670 --> 00:07:30.310\nSo the repr call,\nthe function actually says,\n\n132\n00:07:30.310 --> 00:07:36.100\nlet me find the repr method on the object\nand call it, and then return that value.\n\n133\n00:07:36.100 --> 00:07:39.560\nSo it's kind of like a, let me delegate\nto the object to see what it says.\n\n134\n00:07:39.560 --> 00:07:41.120\n&gt;&gt; And if there is no dundr repr in there,\n\n135\n00:07:41.120 --> 00:07:43.740\nit would just go back up into the main.\n&gt;&gt; Yes, exactly.\n\n136\n00:07:44.880 --> 00:07:46.638\nMike, you're making my heart happy.\n\n137\n00:07:46.638 --> 00:07:47.415\n&gt;&gt; [LAUGH]\n&gt;&gt; He's listening.\n\n138\n00:07:47.415 --> 00:07:49.955\nHe's listening, ladies and gentlemen.\n&gt;&gt; Got a good teacher.\n\n139\n00:07:49.955 --> 00:07:52.015\n&gt;&gt; So you know what, let's see.\n\n140\n00:07:52.015 --> 00:07:54.236\nI'm going to say let me\ngather all the toppings.\n\n141\n00:07:54.236 --> 00:07:56.464\nI'm just going to put them\nas kind of a separated list.\n\n142\n00:07:56.464 --> 00:07:58.576\nThis is a little bit of Python.\n\n143\n00:07:58.576 --> 00:07:59.729\nYou know, just for fun.\n\n144\n00:07:59.729 --> 00:08:03.170\nSo with Toppings.\n\n145\n00:08:06.650 --> 00:08:11.360\nLet’s do this, so this F out front is\nsomething new in python from F string it\n\n146\n00:08:11.360 --> 00:08:15.705\nallows me to just use variables inside\nthe string and then they are replaced.\n\n147\n00:08:15.705 --> 00:08:17.850\nI'm just doing that to\nsave some real estate.\n\n148\n00:08:17.850 --> 00:08:20.870\nI could definitely use that format or\nother ways of formatting strings,\n\n149\n00:08:20.870 --> 00:08:23.840\nor even the plus sign if I so need it.\n\n150\n00:08:23.840 --> 00:08:28.272\nSo I’m gonna go here with\njoin(self.toppings) and\n\n151\n00:08:28.272 --> 00:08:34.840\nthere is an assumption that the toppings\nin the toppings list, are all strings.\n\n152\n00:08:34.840 --> 00:08:36.831\nOtherwise, this will break.\n\n153\n00:08:36.831 --> 00:08:40.360\nSo I'm gonna go to\nthe next line apparently.\n\n154\n00:08:40.360 --> 00:08:47.000\nI'm gonna put that there,\nif self.toppings exists.\n\n155\n00:08:47.000 --> 00:08:49.120\nOtherwise, nothing.\n\n156\n00:08:49.120 --> 00:08:51.910\nSo, the toppings as the variable,\n\n157\n00:08:51.910 --> 00:08:55.840\nis either gonna be a comma separated\nlist of all the toppings on the taco.\n\n158\n00:08:55.840 --> 00:08:58.560\nOr nothing, all right?\n\n159\n00:08:58.560 --> 00:09:02.310\nSo, now, let's see here.\n\n160\n00:09:05.680 --> 00:09:06.930\nAnd let's just return.\n\n161\n00:09:06.930 --> 00:09:14.300\nAnd I'm gonna use f string again and\nself.shell taco, or wait a minute.\n\n162\n00:09:14.300 --> 00:09:17.870\nLet's say you get hard or\nsoft, so that's shell.\n\n163\n00:09:20.070 --> 00:09:25.140\nAnd then we're gonna say protein taco.\n\n164\n00:09:27.240 --> 00:09:30.790\nAnd then after that f string,\nI'm gonna say, + toppings,\n\n165\n00:09:30.790 --> 00:09:32.710\nand I'm doing that because.\n\n166\n00:09:33.860 --> 00:09:37.555\nNot + toppings, we're gonna stay\nwith f strings, I am silly.\n\n167\n00:09:37.555 --> 00:09:40.990\n[LAUGH] Because I have this width here,\nI've already formatted that in a very\n\n168\n00:09:40.990 --> 00:09:43.810\nparticular way,\nI'm making the decisions on this.\n\n169\n00:09:43.810 --> 00:09:45.650\nYou can do this however, remember,\n\n170\n00:09:45.650 --> 00:09:49.550\nthis should be unambiguous, so\nthis should fully described the object.\n\n171\n00:09:49.550 --> 00:09:54.210\nNow the taco that me and Mike both\nmay have the exact same shell and\n\n172\n00:09:54.210 --> 00:09:57.414\ntoppings, but they're not the same taco.\n\n173\n00:09:57.414 --> 00:10:02.716\nSo repr, [SOUND] could get\na little interesting here.\n\n174\n00:10:02.716 --> 00:10:07.712\nWe should have some kind of unique\nidentifier or something that at least says\n\n175\n00:10:07.712 --> 00:10:13.670\nthese are possibly different things, so\nthat's why they say at particular thing.\n\n176\n00:10:13.670 --> 00:10:18.480\nAnd just to reinforce that, I'm gonna add\nthat to the end, it's kinda weird, but\n\n177\n00:10:18.480 --> 00:10:26.970\nit does allow me to wait for it,\njust keep that there, all right?\n\n178\n00:10:26.970 --> 00:10:32.320\nSo I'm gonna say toppings,\nthat is not how you spell toppings.\n\n179\n00:10:32.320 --> 00:10:36.610\nAnd boom, and let's say at\n\n180\n00:10:37.720 --> 00:10:41.680\nwell, the id of self, right.\n\n181\n00:10:41.680 --> 00:10:44.040\nSo it's gonna give us where it is, right?\n\n182\n00:10:44.040 --> 00:10:45.140\nThis particular place.\n\n183\n00:10:45.140 --> 00:10:46.530\nSo that's a record.\n\n184\n00:10:48.130 --> 00:10:53.560\nNow, if I do this correctly, and boom.\n\n185\n00:10:55.510 --> 00:10:58.450\nInvalid syntax, I forgot.\n\n186\n00:10:58.450 --> 00:11:02.950\nI forgot a quote, or excuse me,\na parenthesis, right?\n\n187\n00:11:02.950 --> 00:11:06.080\nI told you them is going to\nbe fun from time to time.\n\n188\n00:11:07.200 --> 00:11:13.070\nBut if we come down here like that and\nboom, invalid syntax.\n\n189\n00:11:13.070 --> 00:11:13.890\nWait for it.\n\n190\n00:11:13.890 --> 00:11:19.140\nI got something off here, Mike.\n&gt;&gt; I don't see it,\n\n191\n00:11:19.140 --> 00:11:22.760\nI'm just gonna-\n&gt;&gt; I don't see it either.\n\n192\n00:11:24.550 --> 00:11:25.050\nHm.\n\n193\n00:11:26.250 --> 00:11:29.050\nSo, well,\na little bit of live action debugging.\n\n194\n00:11:29.050 --> 00:11:33.940\nI know this is always fun, but this is a\nvery realistic portion of how things are.\n\n195\n00:11:33.940 --> 00:11:39.750\nAnd just to, you know what, let's just\nget rid of this, get rid of this.\n\n196\n00:11:39.750 --> 00:11:42.246\nLet's remove the f string just so\n\n197\n00:11:42.246 --> 00:11:46.091\nwe can get rid of things of that nature,\nand say id.\n\n198\n00:11:46.091 --> 00:11:52.287\nAnd I'm gonna say protein,\nand let's call format,\n\n199\n00:11:52.287 --> 00:11:57.253\nand I need to get rid\nof this shell portion.\n\n200\n00:11:57.253 --> 00:12:00.981\nSo I have these and\nI'm gonna say shell=self.shell,\n\n201\n00:12:04.271 --> 00:12:11.240\nAnd I'm gonna say protein=self.protein and\nmy lines are getting a little long here.\n\n202\n00:12:11.240 --> 00:12:13.070\nI should really reformat this,\n\n203\n00:12:13.070 --> 00:12:16.583\nbut in the sake of brevity-\n&gt;&gt; Mm-hm.\n\n204\n00:12:16.583 --> 00:12:20.277\n&gt;&gt; And we're gonna say toppings=toppings,\n\n205\n00:12:20.277 --> 00:12:24.979\nand that's because I precomputed\nit in the line above.\n\n206\n00:12:24.979 --> 00:12:27.738\nAnd you know what?\n\n207\n00:12:27.738 --> 00:12:30.485\nI'm gonna undo all that\ncuz I just found my\n\n208\n00:12:30.485 --> 00:12:31.138\nerror.\n&gt;&gt; Uh-oh.\n\n209\n00:12:33.428 --> 00:12:34.189\n&gt;&gt; All right,\n\n210\n00:12:34.189 --> 00:12:37.460\nyou gotta have a parenthesis\nin the line above.\n\n211\n00:12:37.460 --> 00:12:39.380\nAnd that's part of interpreted languages.\n\n212\n00:12:39.380 --> 00:12:41.100\nYou get some shenanigans there.\n\n213\n00:12:41.100 --> 00:12:42.810\nAll right, now we're back on track.\n\n214\n00:12:42.810 --> 00:12:43.320\nI think we are.\n\n215\n00:12:43.320 --> 00:12:44.325\nAnd if it doesn't work.\n\n216\n00:12:44.325 --> 00:12:45.349\nAha!\n&gt;&gt; Look at that.\n\n217\n00:12:45.349 --> 00:12:46.305\n&gt;&gt; I win, so t1,\n\n218\n00:12:46.305 --> 00:12:49.930\na hardshell taco at,\nblah blah blah blah blah, okay?\n\n219\n00:12:49.930 --> 00:12:52.690\nNow, I haven't done the text, or\nexcuse me, the hex representation,\n\n220\n00:12:52.690 --> 00:12:54.630\nso these numbers look\na little bit different.\n\n221\n00:12:54.630 --> 00:12:56.171\nThe hard shell taco,\nhard shell chicken taco-\n\n222\n00:12:56.171 --> 00:12:57.370\n&gt;&gt; Chicken taco, yes.\n\n223\n00:12:57.370 --> 00:13:00.288\n&gt;&gt; And when I say t2, a soft-shelled\n\n224\n00:13:00.288 --> 00:13:05.060\ntofu taco with cheese,\nlettuce, and sour cream, okay?\n\n225\n00:13:05.060 --> 00:13:07.550\nAnd I could do some\nother formatting there.\n\n226\n00:13:07.550 --> 00:13:12.913\nNow, other than the ID, this isn't really,\ndoesn't tell me much about the object,\n\n227\n00:13:12.913 --> 00:13:16.095\nit's kinda informal.\n&gt;&gt; Mm-hm.\n\n228\n00:13:16.095 --> 00:13:19.391\n&gt;&gt; So I look at this, and if you create\n\n229\n00:13:19.391 --> 00:13:25.910\na repr, if I say repr(t1),\nI get that, that's what I get.\n\n230\n00:13:25.910 --> 00:13:30.400\nIf I say str(t1), That's also what I get.\n\n231\n00:13:30.400 --> 00:13:35.950\nBecause by default, both string,\nprint, the representation.\n\n232\n00:13:35.950 --> 00:13:37.710\nIf I have a Dunder [INAUDIBLE] method,\n\n233\n00:13:39.030 --> 00:13:41.050\nthat's what gets called to\ngive the representation.\n\n234\n00:13:41.050 --> 00:13:44.700\nBecause that's kind of the more\nformal representation, right?\n\n235\n00:13:45.970 --> 00:13:49.550\nI'm looking at this and it seems\na little informal doesn't, it Mike?\n\n236\n00:13:49.550 --> 00:13:51.010\n&gt;&gt; It really does and\n\n237\n00:13:51.010 --> 00:13:54.820\nif they both give you the same output\nwhy do you use one or the other or\n\n238\n00:13:54.820 --> 00:13:57.200\nwhen do I use one or the other?\n&gt;&gt; Right,\n\n239\n00:13:57.200 --> 00:14:02.780\nso maybe this is more,\nit's a hard shell chicken taco right?\n\n240\n00:14:02.780 --> 00:14:05.773\nBut it's not,\nit doesn't look like an object,\n\n241\n00:14:05.773 --> 00:14:09.867\nit's not like [SOUND] It's not like\nthe person that we saw, right?\n\n242\n00:14:09.867 --> 00:14:15.573\nSo from create_and_initialize,\n\n243\n00:14:15.573 --> 00:14:20.000\ninitialize import person.\n\n244\n00:14:20.000 --> 00:14:24.600\nThat is kind of more formal, and notice\nbecause I imported it at first name space,\n\n245\n00:14:24.600 --> 00:14:25.356\nchange a little bit.\n\n246\n00:14:25.356 --> 00:14:28.710\nThe first [INAUDIBLE] qualify.\n\n247\n00:14:28.710 --> 00:14:30.190\nI mean, I do have this.\n\n248\n00:14:32.780 --> 00:14:35.870\nThis really should be like what\nkind of object [INAUDIBLE] or\n\n249\n00:14:35.870 --> 00:14:38.040\nwhat are the things I\nneed to know about it.\n\n250\n00:14:38.040 --> 00:14:43.360\nSo really, even though we wrote\nthis is a repr, I would argue that\n\n251\n00:14:43.360 --> 00:14:49.440\nthis is probably a better _str or\n_string method.\n\n252\n00:14:49.440 --> 00:14:55.370\nSo let's change that to dunderstring, and\n\n253\n00:14:55.370 --> 00:15:01.480\nactually remove this to really\ndrive home the informality of it.\n\n254\n00:15:03.250 --> 00:15:09.160\nSo, if I now re-run and I say key one,\nnotice by default I'm not getting that.\n\n255\n00:15:09.160 --> 00:15:13.510\nI say stir T1,\nit's a hard shell [INAUDIBLE] packet.\n\n256\n00:15:13.510 --> 00:15:15.120\nSo If I want to stringify it,\n\n257\n00:15:15.120 --> 00:15:19.420\nthat's the method I'm gonna use unless\nI intentionally call repr on it.\n\n258\n00:15:19.420 --> 00:15:24.800\nIf I call repr and say t1,\nwell then I get the default repr.\n\n259\n00:15:24.800 --> 00:15:27.510\nSo if I define repr, I get both.\n\n260\n00:15:27.510 --> 00:15:30.210\nIf I define string under stir, and\n\n261\n00:15:30.210 --> 00:15:32.780\nI actually only get [INAUDIBLE]\nif I repper any other thing.\n\n262\n00:15:32.780 --> 00:15:36.810\nIt's going to give me\nthe built in representation.\n\n263\n00:15:36.810 --> 00:15:42.380\nSo let's step back and make this a little\nmore formal in the representation.\n\n264\n00:15:42.380 --> 00:15:44.610\nIt's not going to be the exact\nsame print out that I have here.\n\n265\n00:15:45.830 --> 00:15:50.671\nBut maybe something that follows\nthose guidelines a little\n\n266\n00:15:50.671 --> 00:15:54.170\nmore specific, that is not what I wanted.\n\n267\n00:15:54.170 --> 00:16:00.183\nSo stir, and I can define both\nof these for any one object, and\n\n268\n00:16:00.183 --> 00:16:05.271\nI will admit,\nI have been known to use repr because,\n\n269\n00:16:05.271 --> 00:16:09.588\nnumber one, I get both at that point.\n\n270\n00:16:09.588 --> 00:16:13.340\nIf my repr would also serve as a\nstringified version, I may just implement\n\n271\n00:16:13.340 --> 00:16:16.514\nthe repr, but I also like to say repr.\n&gt;&gt; Yeah.\n\n272\n00:16:16.514 --> 00:16:18.800\n[LAUGH]\n&gt;&gt; So I'm like, yeah, just use the repr.\n\n273\n00:16:18.800 --> 00:16:21.370\nSo that's what we do.\n\n274\n00:16:21.370 --> 00:16:26.420\nSo I'm gonna say return an f string,\nand I wanna use those\n\n275\n00:16:28.750 --> 00:16:31.625\nbrackets, the Toco, all right?\n\n276\n00:16:31.625 --> 00:16:35.994\nToppings=(self.toppings) and\n\n277\n00:16:35.994 --> 00:16:41.066\nthen the protein=[self.protein] and\n\n278\n00:16:41.066 --> 00:16:45.582\nthe shell shell=[self.shell].\n\n279\n00:16:45.582 --> 00:16:51.728\nAnd I'm gonna come back to the beginning\n\n280\n00:16:51.728 --> 00:16:58.429\nof this line just to\nbreak it up a little bit.\n\n281\n00:17:03.859 --> 00:17:11.260\nAnd say,\ncan't use tabs right here + str(id(self)).\n\n282\n00:17:11.260 --> 00:17:14.620\nSo that's going to make it a little\nmore efficient by still getting that\n\n283\n00:17:14.620 --> 00:17:16.380\nmemory location.\n\n284\n00:17:16.380 --> 00:17:22.835\nAnd, Let's actually do this,\n\n285\n00:17:22.835 --> 00:17:27.540\nnot that, @ There we go.\n\n286\n00:17:27.540 --> 00:17:30.880\nI've done a bunch of string shenanigans\nthere, I would come back and\n\n287\n00:17:30.880 --> 00:17:32.000\nclean this up.\n\n288\n00:17:32.000 --> 00:17:36.220\nBut now, if I rerun the create_and,\nor excuse me, the str_and_repr,\n\n289\n00:17:36.220 --> 00:17:41.430\nwell, I call str(t1),\nI'll get a hardshell chicken taco.\n\n290\n00:17:41.430 --> 00:17:43.650\nIf I call str(t2).\n\n291\n00:17:43.650 --> 00:17:48.490\nWell its a soft shell tofu taco with\ncheese, lettuce and sour cream.\n\n292\n00:17:48.490 --> 00:17:50.590\nIf I call repr on t1, and\n\n293\n00:17:50.590 --> 00:17:56.530\nI still have a little bit of formatting\nthis really should have a space.\n\n294\n00:17:56.530 --> 00:18:01.410\nBut this seems a little more formal as\nfar as data, memory location and things.\n\n295\n00:18:01.410 --> 00:18:05.240\nYou don't have to have the memory location\nbut that provides some dis-ambiguity.\n\n296\n00:18:05.240 --> 00:18:09.470\nIt removes the ambiguity repr.\n\n297\n00:18:09.470 --> 00:18:12.340\nSo if we both ordered a chicken\ntaco with no other things and\n\n298\n00:18:12.340 --> 00:18:14.950\nthey were hard shell,\nwe'll know that they're different, right?\n\n299\n00:18:14.950 --> 00:18:23.040\nAnd then if I call repr(t2) then\nI actually get the toppings.\n\n300\n00:18:23.040 --> 00:18:26.300\nAnd I can format this a little\nbit differently if I wanted to.\n\n301\n00:18:26.300 --> 00:18:28.810\nBu those are the general differences.\n\n302\n00:18:28.810 --> 00:18:33.690\nAnd if I just call up t1, I actually\nget the repr by default on the repole.\n\n303\n00:18:33.690 --> 00:18:36.220\nSo that's what I'm gonna get out.\n\n304\n00:18:36.220 --> 00:18:39.250\nI know exactly what is\ncontained within this taco,\n\n305\n00:18:39.250 --> 00:18:42.870\nI know that it's a taco object, and\nI know where it's located in memory.\n\n306\n00:18:44.140 --> 00:18:48.690\nThat also allows me to reason about is t1?\n\n307\n00:18:49.890 --> 00:18:50.460\nIs it t2?\n\n308\n00:18:50.460 --> 00:18:51.260\nWell, no.\n\n309\n00:18:51.260 --> 00:18:54.920\nAnd that's because it's typically\ncomparing memory locations or\n\n310\n00:18:54.920 --> 00:18:57.040\nmaybe a hash or something of that nature.\n\n311\n00:18:57.040 --> 00:18:59.170\nAre they the exact same object?\n\n312\n00:18:59.170 --> 00:19:00.510\nNo, they're not.\n\n313\n00:19:00.510 --> 00:19:02.132\nAnd I can do that without the repr, but\n\n314\n00:19:02.132 --> 00:19:04.990\nthe repr makes it a little\neasier to reason about.\n\n315\n00:19:04.990 --> 00:19:07.510\nSo I tend to favor repr more so\nthan string.\n\n316\n00:19:07.510 --> 00:19:11.510\nBut there are times where you may\nwant a more informal one, right?\n\n317\n00:19:11.510 --> 00:19:15.500\nMaybe it's on a menu item,\nit's informal, but\n\n318\n00:19:15.500 --> 00:19:17.920\nin your program, you need it to be formal.\n\n319\n00:19:17.920 --> 00:19:19.061\nSo you have those two methods.\n\n320\n00:19:19.061 --> 00:19:20.640\nThen the repr and dada str,\n\n321\n00:19:20.640 --> 00:19:25.810\nother than changing the format a little\nbit, those are the two first ways that you\n\n322\n00:19:25.810 --> 00:19:30.140\nprobably are going to experience\nhow to represent the printout.\n\n323\n00:19:30.140 --> 00:19:33.390\nOr the usage of a respected custom object.\n&gt;&gt; All right, well,\n\n324\n00:19:33.390 --> 00:19:36.820\na couple of great methods there to work\nwith this, one a little less formal,\n\n325\n00:19:36.820 --> 00:19:38.640\none a little more formal.\n\n326\n00:19:38.640 --> 00:19:41.280\nAny others that we need to worry about?\n&gt;&gt; Well, Mike,\n\n327\n00:19:41.280 --> 00:19:45.280\nwe definitely have some other\nrepresentation methods but.\n\n328\n00:19:45.280 --> 00:19:46.760\nI'd really like for this to soak in,\n\n329\n00:19:46.760 --> 00:19:52.330\nbecause the other couple can\nbe a little tricky, so we're\n\n330\n00:19:52.330 --> 00:19:55.470\ngonna save those for another episode.\n&gt;&gt; All right, Justin, great look there at\n\n331\n00:19:55.470 --> 00:19:59.830\nstern repr, different ways we can\nuse to represent our instances.\n\n332\n00:19:59.830 --> 00:20:03.110\nAppreciate that, hope everybody out\nthere enjoyed watching this one.\n\n333\n00:20:03.110 --> 00:20:06.140\nSigning off for DevPro TV,\nI've been your host Mike Rodrick.\n\n334\n00:20:06.140 --> 00:20:06.950\n&gt;&gt; And I'm Justin Dennison.\n\n335\n00:20:06.950 --> 00:20:08.100\n&gt;&gt; And we'll see you next time.\n\n336\n00:20:08.100 --> 00:20:12.983\n[MUSIC]\n\n",
          "vimeoId": "251550166"
        },
        {
          "description": "In this episode, Justin and Mike continue the exploration of output representations. Justin demonstrates the usage of the \\_\\_format\\_\\_ method in order to provide custom string template formatting for users.",
          "length": "1451",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-3-1-representing_an_instance_format-011618-PGM.00_24_01_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-3-1-representing_an_instance_format-011618-PGM.00_24_01_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-3-1-representing_an_instance_format-011618-PGM.00_24_01_24.Still001-sm.jpg",
          "title": "Representing an Instance: format",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.963 --> 00:00:16.377\nHello, welcome to another exciting\nepisode here at DevProTV.\n\n3\n00:00:16.377 --> 00:00:19.887\nI'm your host Mike Rodrick and\ntoday we're doing our Python data model.\n\n4\n00:00:19.887 --> 00:00:24.086\nSpecifically in this episode, we're gonna\ncontinue on with representing an instance,\n\n5\n00:00:24.086 --> 00:00:26.070\nthis time looking more at format.\n\n6\n00:00:26.070 --> 00:00:28.300\nHere to help us with that is Mr.\nJustin Dennison.\n\n7\n00:00:28.300 --> 00:00:29.290\nWelcome Justin.\n\n8\n00:00:29.290 --> 00:00:30.450\n&gt;&gt; It's good to be back, Mike.\n\n9\n00:00:30.450 --> 00:00:31.958\nI'm excited, it's a little warm in here.\n\n10\n00:00:31.958 --> 00:00:33.622\nBut more importantly, how are you today?\n\n11\n00:00:33.622 --> 00:00:35.432\n&gt;&gt; [LAUGH] I'm doing good,\nthanks for asking.\n\n12\n00:00:35.432 --> 00:00:38.514\nExcited as always to be\nhere learning from you, and\n\n13\n00:00:38.514 --> 00:00:41.459\nI do have a little bone to pick with you,\nthough.\n\n14\n00:00:41.459 --> 00:00:45.115\nAt the end of that last episode,\nwe looked at rep and str, and we talked.\n\n15\n00:00:45.115 --> 00:00:49.570\nI asked you if there was some other\nways we might represent these instances.\n\n16\n00:00:49.570 --> 00:00:53.350\nAnd you said yes, but I don't think\nwe really ever saw anything, did we?\n\n17\n00:00:53.350 --> 00:00:53.879\n&gt;&gt; We did not.\n\n18\n00:00:53.879 --> 00:00:58.477\nAnd well we're back to we'll finish that,\na nice little cliff hanger, right?\n\n19\n00:00:58.477 --> 00:01:00.265\nThis is a sequel, so to speak, and\n\n20\n00:01:00.265 --> 00:01:02.688\nhopefully it's just as\ngood as the original.\n\n21\n00:01:02.688 --> 00:01:04.968\nI make no promises as sequels go.\n\n22\n00:01:04.968 --> 00:01:09.684\nBut yeah, there's several other ways\nthat we can represent an instance.\n\n23\n00:01:09.684 --> 00:01:11.676\nAnd these are not official terminologies.\n\n24\n00:01:11.676 --> 00:01:15.272\nThis is just some way of, how do I,\nthere is some representation.\n\n25\n00:01:15.272 --> 00:01:19.971\nWe looked at str and repr, repr is\nofficial, str is kind of unofficial.\n\n26\n00:01:19.971 --> 00:01:25.732\nThere's some fluidity there, repr should\nbe unambiguous, string may be ambiguous.\n\n27\n00:01:25.732 --> 00:01:27.100\nWho knows, right?\n\n28\n00:01:27.100 --> 00:01:31.460\nBut now there's something else that\nyou may wanna do with custom objects.\n\n29\n00:01:32.680 --> 00:01:34.130\nAnd actually you may do this.\n\n30\n00:01:34.130 --> 00:01:36.837\nIf you do any type of string formatting,\n\n31\n00:01:36.837 --> 00:01:40.506\nthen you may see this just\nkind of crop up on you anyway.\n\n32\n00:01:40.506 --> 00:01:42.681\nAnd you know what?\n\n33\n00:01:42.681 --> 00:01:48.000\nLet's see an example of a couple of\nones of using string formatting.\n\n34\n00:01:48.000 --> 00:01:51.438\nBecause maybe you have to use this\nobject when you're creating a message.\n\n35\n00:01:51.438 --> 00:01:56.005\nOr maybe you're sending data across\nan internet request, an HTTP request or\n\n36\n00:01:56.005 --> 00:01:56.789\nsomething.\n\n37\n00:01:56.789 --> 00:02:00.327\nAnd it has to be serialized and\nyou gotta do a few things.\n\n38\n00:02:00.327 --> 00:02:04.598\nSo let's see an example of something\nthat by default is formattable.\n\n39\n00:02:04.598 --> 00:02:05.358\nIs that a word?\n\n40\n00:02:05.358 --> 00:02:07.040\nWe'll go with it, formattable.\n\n41\n00:02:07.040 --> 00:02:11.525\nAnd things that are kind of formattable,\nmaybe they're not shenanigans and\n\n42\n00:02:11.525 --> 00:02:13.560\nthen we'll fix it, all right?\n\n43\n00:02:13.560 --> 00:02:15.227\nSo let's go and\ntake a look at my screen here.\n\n44\n00:02:15.227 --> 00:02:20.837\nAnd we're just inside of Python data model\nand let's look at the screen initialize.\n\n45\n00:02:20.837 --> 00:02:22.880\nAs we're going back to the person,\nthis is was a couple of episodes ago.\n\n46\n00:02:22.880 --> 00:02:27.697\nBut I know that there's no string or\nrpr, so we're gonna use that in some of\n\n47\n00:02:27.697 --> 00:02:31.458\nour kinda setting the stage,\nset the scene, so to speak.\n\n48\n00:02:31.458 --> 00:02:35.287\nAll right so let's say python3 again,\nremember python3.\n\n49\n00:02:35.287 --> 00:02:40.197\nAnd we have that person and\nthat is our default repr, okay, or repr.\n\n50\n00:02:40.197 --> 00:02:40.748\nThat's fine too.\n\n51\n00:02:40.748 --> 00:02:42.266\n&gt;&gt; [LAUGH]\n&gt;&gt; But\n\n52\n00:02:42.266 --> 00:02:47.300\nI just wanted to bring that\ninto the repl environment.\n\n53\n00:02:47.300 --> 00:02:50.190\nrepl and repr, those can get confusing.\n\n54\n00:02:50.190 --> 00:02:51.880\nrepl is what I'm in.\n\n55\n00:02:51.880 --> 00:02:53.850\nrepr is the representation.\n\n56\n00:02:53.850 --> 00:02:58.692\nSo maybe I will go with repr from\nnow on just to remove ambiguity.\n\n57\n00:02:58.692 --> 00:03:05.690\nAll right, so if you've ever done\nsomething like this, \"Took {} second\".\n\n58\n00:03:05.690 --> 00:03:09.099\nAnd format, and\nthis is a way of formatting string.\n\n59\n00:03:09.099 --> 00:03:10.058\nThere's a format language.\n\n60\n00:03:10.058 --> 00:03:13.987\nSo on strings there's the .format,\nall right?\n\n61\n00:03:13.987 --> 00:03:20.092\nAnd if I call .format and I say 3, right?\n\n62\n00:03:20.092 --> 00:03:23.598\nTook 3 [LAUGH] well I\npluralize that appropriately.\n\n63\n00:03:23.598 --> 00:03:24.483\nTook 3 seconds.\n\n64\n00:03:24.483 --> 00:03:27.668\nNow what it did, is it took that value,\nstringified it, and\n\n65\n00:03:27.668 --> 00:03:29.546\nput it in place of the curly braces.\n\n66\n00:03:29.546 --> 00:03:32.314\nSo it's like a little templating language,\nall right?\n\n67\n00:03:32.314 --> 00:03:37.359\nIf I do something like this, so\n\n68\n00:03:37.359 --> 00:03:42.602\nI come in here and I say, 02d.\n\n69\n00:03:42.602 --> 00:03:46.906\nI'm not gonna go all over all\nof the formating mini language.\n\n70\n00:03:46.906 --> 00:03:51.489\nBut I have, I needed to pad it,\nI need it to be two decimal places, and\n\n71\n00:03:51.489 --> 00:03:54.030\nit needs to be a number type, a digit.\n\n72\n00:03:54.030 --> 00:03:56.859\nSo here 03, pad it with a 0.\n\n73\n00:03:56.859 --> 00:03:58.147\nThat's what the 0 means.\n\n74\n00:03:58.147 --> 00:04:02.307\nAnd make sure that it's two places so\nif it doesn’t have two places,\n\n75\n00:04:02.307 --> 00:04:03.750\nit will pad it with a 0.\n\n76\n00:04:03.750 --> 00:04:08.940\nAnd then, d,\nmake sure that it was an integer, right?\n\n77\n00:04:08.940 --> 00:04:13.890\nSo if I come here and I say 3.2,\nI get weird things like this.\n\n78\n00:04:13.890 --> 00:04:17.415\nBecause for a float, there’s no d\ntemplating, because it’s not defined.\n\n79\n00:04:17.415 --> 00:04:19.542\nSo I’m gonna get an error, all right?\n\n80\n00:04:19.542 --> 00:04:26.064\nBut if I come over here and I change\nthis back to 3, and I change this to 4.\n\n81\n00:04:26.064 --> 00:04:30.583\nNow it pads with three 0s because there\nwas only one digit to take up the four\n\n82\n00:04:30.583 --> 00:04:31.744\npossible places.\n\n83\n00:04:31.744 --> 00:04:35.019\nSo you may do things like this.\n\n84\n00:04:35.019 --> 00:04:37.601\nI template so\nmuch when I'm benchmarking or\n\n85\n00:04:37.601 --> 00:04:41.452\ndoing little micro benchmarks or\njust testing timing of things.\n\n86\n00:04:41.452 --> 00:04:43.036\nI'll see this message all over the place.\n\n87\n00:04:43.036 --> 00:04:44.810\nAnd I have this go to kind of format.\n\n88\n00:04:44.810 --> 00:04:48.268\nBow, you may use this\nin a variety of ways.\n\n89\n00:04:48.268 --> 00:04:56.308\nBut what happens if we just say\n{}.format and we say person?\n\n90\n00:04:56.308 --> 00:04:59.848\nAnd well it just gives me the repr of it.\n\n91\n00:04:59.848 --> 00:05:07.328\nIf I come in here and I say well give me,\nI think, I always get these mixed up.\n\n92\n00:05:07.328 --> 00:05:12.111\n!r, this is another way of dictating\nthe format, that's the repr.\n\n93\n00:05:12.111 --> 00:05:14.384\nGive me the string version.\n\n94\n00:05:14.384 --> 00:05:18.428\nWell I don't have one defined on this so\nit's gonna give me the repr or\n\n95\n00:05:18.428 --> 00:05:20.118\nthe repr again, excuse me.\n\n96\n00:05:20.118 --> 00:05:25.492\nI said I was gonna change that\n[LAUGH] to make that a little clearer.\n\n97\n00:05:25.492 --> 00:05:31.389\nIf I come in here and\nI say well let's go with 04d, right?\n\n98\n00:05:31.389 --> 00:05:35.955\nI want four digits and\nI wanna format the person.\n\n99\n00:05:35.955 --> 00:05:41.480\nUnsupported format string\npassed to Person.__format__.\n\n100\n00:05:41.480 --> 00:05:43.541\nThat's interesting.\n\n101\n00:05:43.541 --> 00:05:50.114\nInterestingly enough, there is a format\nfunction kind of like the repr or\n\n102\n00:05:50.114 --> 00:05:54.470\nrepr function or\nstr function that calls these.\n\n103\n00:05:54.470 --> 00:05:55.833\nBehind the scenes that's being called.\n\n104\n00:05:55.833 --> 00:06:01.796\nif I say something like this and\nwait for it.\n\n105\n00:06:01.796 --> 00:06:07.248\nAll right, I don't use this a lot but\nit is there.\n\n106\n00:06:07.248 --> 00:06:07.824\nI'm being it.\n\n107\n00:06:07.824 --> 00:06:11.748\n&gt;&gt; [LAUGH]\n&gt;&gt; I got them backwards.\n\n108\n00:06:11.748 --> 00:06:13.067\nThere we go.\n\n109\n00:06:13.067 --> 00:06:17.301\nSo format 3 with this format,\nInvalid format specifier,\n\n110\n00:06:17.301 --> 00:06:20.870\nand that's because it's\nnot a template string.\n\n111\n00:06:20.870 --> 00:06:24.992\nIt's actually here or here, there we go\n&gt;&gt; So\n\n112\n00:06:24.992 --> 00:06:29.221\ninternally what it does is\nthe curly braces, it cuts that out.\n\n113\n00:06:29.221 --> 00:06:32.466\nIt cuts out the colon,\nit removes those and\n\n114\n00:06:32.466 --> 00:06:36.084\nthen it feeds in that representation,\nright?\n\n115\n00:06:36.084 --> 00:06:41.540\nWhatever the format is to the format\nmethod which then calls dunder format.\n\n116\n00:06:41.540 --> 00:06:45.631\nWhich then says it's a d\ntype thing with this entry?\n\n117\n00:06:45.631 --> 00:06:48.071\nWe know the decision making process there.\n\n118\n00:06:48.071 --> 00:06:50.906\nAnd then it'll return that\njust like here we have 03.\n\n119\n00:06:50.906 --> 00:06:56.185\nIf I said 3 give me two digits 0 padded,\nboom, and I can call format.\n\n120\n00:06:56.185 --> 00:06:59.192\nBy and large,\nI don't use this a great deal if at ever.\n\n121\n00:06:59.192 --> 00:07:04.582\nIt's more me creating a template string\nbecause I can kind of template it out and\n\n122\n00:07:04.582 --> 00:07:08.292\nI call .format and\nthen place those in respectively.\n\n123\n00:07:08.292 --> 00:07:09.620\nThat's a whole other topic.\n\n124\n00:07:09.620 --> 00:07:14.483\nBut as we've seen, if I have\na custom object, that doesn't work.\n\n125\n00:07:14.483 --> 00:07:19.860\nAnd you're like well you didn't make\na repr or a str method on this one.\n\n126\n00:07:19.860 --> 00:07:21.328\n&gt;&gt; Can you?\n\n127\n00:07:21.328 --> 00:07:22.164\nCan you?\n\n128\n00:07:22.164 --> 00:07:25.285\n&gt;&gt; I'm thinking dunder format.\n\n129\n00:07:25.285 --> 00:07:30.352\n&gt;&gt; Mike, this is the second time in this\nseries you have made my heart happy,\n\n130\n00:07:30.352 --> 00:07:32.500\nand you're exactly correct.\n\n131\n00:07:32.500 --> 00:07:34.836\nThis type error actually gives you a hint,\ndunder format.\n\n132\n00:07:37.340 --> 00:07:40.150\nOkay, dunder format,\ninteresting, interesting.\n\n133\n00:07:40.150 --> 00:07:42.200\nSo let's go ahead and exit out of this.\n\n134\n00:07:42.200 --> 00:07:47.778\nWe already have a repr and\na str method on, right, our tacos.\n\n135\n00:07:47.778 --> 00:07:55.353\nSo let's say python -i str_and_repr.\n\n136\n00:07:55.353 --> 00:07:56.231\n&gt;&gt; Like a tree.\n\n137\n00:07:56.231 --> 00:08:03.560\n&gt;&gt; And I forgot to save from The last\nlittle bit here, I made a boo boo.\n\n138\n00:08:03.560 --> 00:08:08.482\nAnd let's come here and wait for\n\n139\n00:08:08.482 --> 00:08:11.230\nit, wait for it.\n\n140\n00:08:11.230 --> 00:08:20.020\nI think I've got two, now that,\nThere we go, let's see if that works?\n\n141\n00:08:20.020 --> 00:08:25.670\nAnd there we go and, hm,\nthat is very interesting.\n\n142\n00:08:25.670 --> 00:08:27.580\nI remember mine.\n\n143\n00:08:27.580 --> 00:08:28.670\nThings worked.\n\n144\n00:08:28.670 --> 00:08:31.980\nI must have accidentally\ndeleted something, when I was.\n\n145\n00:08:31.980 --> 00:08:34.440\nSo yeah I told you,\nvim good times, all the time.\n\n146\n00:08:34.440 --> 00:08:37.358\nSo if we come here and\n\n147\n00:08:37.358 --> 00:08:43.160\nI remove that, and I remove that.\n\n148\n00:08:43.160 --> 00:08:47.539\nAll right, so I have this string, And\n\n149\n00:08:47.539 --> 00:08:53.821\njust to make this easier first, and\nthen return first plus that plus,\n\n150\n00:08:53.821 --> 00:08:59.264\nlet's just finish out\nthe formatting while we're in here.\n\n151\n00:08:59.264 --> 00:09:00.973\nAll right.\n\n152\n00:09:00.973 --> 00:09:02.970\nAnd well, Mike!\n\n153\n00:09:02.970 --> 00:09:06.738\nThat is, I was chasing a ghost again.\n\n154\n00:09:06.738 --> 00:09:07.669\nMike.\n&gt;&gt; Uh-oh.\n\n155\n00:09:07.669 --> 00:09:09.072\n&gt;&gt; &gt; You know why?\n\n156\n00:09:09.072 --> 00:09:15.241\nSee, this is testimonial\nto Python 3 -i str,\n\n157\n00:09:15.241 --> 00:09:22.741\nand there we,\nnow I've messed it up because I changed.\n\n158\n00:09:22.741 --> 00:09:23.900\nShenanigans.\n\n159\n00:09:23.900 --> 00:09:26.310\nSo, because I have,\nI know how to fix that.\n\n160\n00:09:26.310 --> 00:09:31.380\nSo we'll go and\nchange a file that doesn't exist.\n\n161\n00:09:31.380 --> 00:09:32.280\nAnd there we go.\n\n162\n00:09:33.720 --> 00:09:38.400\nAnd it's one of these things where it's\nkinda frustrating that that happens\n\n163\n00:09:38.400 --> 00:09:40.330\nwhile we're showing you these things.\n\n164\n00:09:40.330 --> 00:09:44.900\nBut I'm kinda glad that it does cuz\nthis is a very realistic thing.\n\n165\n00:09:44.900 --> 00:09:45.965\nFull disclosure.\n\n166\n00:09:45.965 --> 00:09:50.750\nThe first time things like just happen to\nme, it was not a 15-second fix, right?\n\n167\n00:09:50.750 --> 00:09:55.700\nI just went through in it, that's because\nI struggled, I cried and got really angry\n\n168\n00:09:55.700 --> 00:09:59.960\nat previous ones, so that's how I was\nlike, yeah I know how to fix them.\n\n169\n00:09:59.960 --> 00:10:03.020\n&gt;&gt; Are you saying I shouldn't expect\na perfect code the first time I write it?\n\n170\n00:10:03.020 --> 00:10:05.050\n&gt;&gt; That is exactly what\nI'm saying in my end.\n\n171\n00:10:05.050 --> 00:10:07.668\nI would say you should be wary.\n\n172\n00:10:07.668 --> 00:10:08.574\n&gt;&gt; [LAUGH]\n&gt;&gt; [INAUDIBLE]\n\n173\n00:10:08.574 --> 00:10:10.705\nthe very first time you write it.\n\n174\n00:10:10.705 --> 00:10:12.400\nSo be very careful of that.\n\n175\n00:10:12.400 --> 00:10:15.486\nAnd now, If we're good, there we go.\n\n176\n00:10:15.486 --> 00:10:17.864\nSo T-1, there's our repr, right?\n\n177\n00:10:17.864 --> 00:10:18.839\n&gt;&gt; Mm-hm.\n\n178\n00:10:18.839 --> 00:10:20.114\nThat's the formal.\n\n179\n00:10:20.114 --> 00:10:21.151\n&gt;&gt; The formal one.\n\n180\n00:10:21.151 --> 00:10:24.238\nIf I say stir T-1, there we go.\n\n181\n00:10:24.238 --> 00:10:28.903\nNow, what happens if I go here,\njust an empty,\n\n182\n00:10:28.903 --> 00:10:33.695\nI have no format specifications,\nbut I say t1.\n\n183\n00:10:33.695 --> 00:10:34.924\nInteresting.\n\n184\n00:10:34.924 --> 00:10:39.890\nI get this string merger because\nthis is a string being formatted to\n\n185\n00:10:39.890 --> 00:10:43.010\ninclude said taco, right?\n\n186\n00:10:43.010 --> 00:10:46.870\nIf I go two it's the same thing.\n\n187\n00:10:46.870 --> 00:10:53.850\nI could say well, give me,\npass in the reaper version\n\n188\n00:10:53.850 --> 00:10:59.320\nof the head and now that's the string\nformat because it returned a string.\n\n189\n00:10:59.320 --> 00:11:04.220\nSo we're good to go, but if we clear,\nI'm gonna clear out of this so snapshot,\n\n190\n00:11:04.220 --> 00:11:07.230\ndefinitely back to the servers\nwe need to look at it again.\n\n191\n00:11:07.230 --> 00:11:08.780\nClear here, so\nwe're at the top of the screen,\n\n192\n00:11:08.780 --> 00:11:11.770\ncuz if it gets down low it's\nkinda hard to see sometimes.\n\n193\n00:11:11.770 --> 00:11:15.409\nIf I instead do something like this,\nright?\n\n194\n00:11:15.409 --> 00:11:19.070\nWhere I say give me the repr version.\n\n195\n00:11:21.270 --> 00:11:25.160\nThen it will go ahead and\nlook that up and do it, okay?\n\n196\n00:11:25.160 --> 00:11:33.714\nWhat if, 02d.\n\n197\n00:11:33.714 --> 00:11:35.708\nI ran into the same thing for first.\n\n198\n00:11:35.708 --> 00:11:40.110\nSo repr and string worked, but\nthe format is not specified.\n\n199\n00:11:40.110 --> 00:11:44.240\nBut under format, gotten up and,\nno, it's in my face again.\n\n200\n00:11:44.240 --> 00:11:46.660\nSo I say we should fix that.\n\n201\n00:11:46.660 --> 00:11:47.890\n&gt;&gt; So let's do that.\n\n202\n00:11:47.890 --> 00:11:50.560\n&gt;&gt; So I'm gonna put that in\nthe stir_and_repr that we made.\n\n203\n00:11:50.560 --> 00:11:55.240\nJust because this is still about\nrepresentations, and here we go.\n\n204\n00:11:56.300 --> 00:11:59.530\nformat and notice that repr and\n\n205\n00:11:59.530 --> 00:12:05.150\nunder repr and\nunder string both just had self.\n\n206\n00:12:05.150 --> 00:12:09.590\nWell for format you actually get\na second argument, all right?\n\n207\n00:12:09.590 --> 00:12:11.700\nAnd what is that second argument?\n\n208\n00:12:11.700 --> 00:12:16.380\nIt is the format spec and we’ll see\nwhat that means in just a moment.\n\n209\n00:12:16.380 --> 00:12:21.660\nSo I’m just gonna return by\ndefault the string version and\n\n210\n00:12:21.660 --> 00:12:27.140\nI’m gonna print out the format spec.\n\n211\n00:12:27.140 --> 00:12:31.835\nI’m also, by doing this I’m gonna\nillustrate some dangerous shenanigans.\n\n212\n00:12:31.835 --> 00:12:32.960\n&gt;&gt; Uh-oh.\n\n213\n00:12:32.960 --> 00:12:35.515\n&gt;&gt; That one can do, all right?\n\n214\n00:12:35.515 --> 00:12:43.159\nSo python3 and t1, cool, still works.\n\n215\n00:12:43.159 --> 00:12:50.321\nSo format t1, and\nnotice I get this little extra space here.\n\n216\n00:12:50.321 --> 00:12:51.430\nAnd this is the string.\n\n217\n00:12:51.430 --> 00:12:52.310\nWhat if I come up here?\n\n218\n00:12:52.310 --> 00:12:55.720\nWe notice that it failed\noriginally with 02d.\n\n219\n00:12:55.720 --> 00:12:56.780\nIt doesn't fail anymore.\n\n220\n00:12:58.510 --> 00:13:00.370\nIt just returns the string representation.\n\n221\n00:13:00.370 --> 00:13:02.950\nSo technically you could say I\ndon't care what the format is.\n\n222\n00:13:04.410 --> 00:13:06.130\nHere's the string version.\n\n223\n00:13:06.130 --> 00:13:10.670\nYou shouldn't do this by default, okay?\n\n224\n00:13:10.670 --> 00:13:11.560\nShouldn't do this.\n\n225\n00:13:11.560 --> 00:13:12.560\n&gt;&gt; Why is that?\n\n226\n00:13:12.560 --> 00:13:16.500\n&gt;&gt; Well,\nthe format language is meant to be\n\n227\n00:13:16.500 --> 00:13:18.780\na way of saying I want\nthe numeric representation.\n\n228\n00:13:18.780 --> 00:13:22.050\nI would rather things fail than to\nthink I'm getting a numeric, so\n\n229\n00:13:22.050 --> 00:13:24.770\nthe D means I'm getting\nsome kind of numeric value.\n\n230\n00:13:24.770 --> 00:13:27.440\nWell, if I get the string version,\nit's not a numeric version.\n\n231\n00:13:27.440 --> 00:13:29.570\nSo if I go back to parse it, right?\n\n232\n00:13:29.570 --> 00:13:31.830\nSend it across the wire,\nmaybe through TCP or\n\n233\n00:13:31.830 --> 00:13:36.280\nHTTP, and then I go to parse it,\nmy that's not number.\n\n234\n00:13:36.280 --> 00:13:37.670\nAnd then I break a bunch of other systems.\n\n235\n00:13:37.670 --> 00:13:39.767\nI would rather it fail on my end.\n\n236\n00:13:39.767 --> 00:13:42.650\n&gt;&gt; So,\nbe very careful about implementing in it.\n\n237\n00:13:42.650 --> 00:13:47.100\nIf you go to the python documentation,\nlook up python, format, language.\n\n238\n00:13:47.100 --> 00:13:49.930\nAnd you can read a lot,\nit's actually pretty complicated and\n\n239\n00:13:49.930 --> 00:13:51.860\nit's beyond the scope of this.\n\n240\n00:13:51.860 --> 00:13:55.958\nOther than knowing a few of these that\nyou'll probably run into, all right?\n\n241\n00:13:55.958 --> 00:14:01.300\nSo, hm, and this is a little bit\nredundant, what I'm gonna do.\n\n242\n00:14:01.300 --> 00:14:04.740\nBut I'm gonna come down here.\n\n243\n00:14:04.740 --> 00:14:09.269\nAnd that format spec is gonna be\nwhatever is after the colon inside of\n\n244\n00:14:09.269 --> 00:14:10.545\nthe curly braces.\n\n245\n00:14:10.545 --> 00:14:11.850\nSo I said 02d.\n\n246\n00:14:13.780 --> 00:14:14.280\nOkay.\n\n247\n00:14:14.280 --> 00:14:15.940\nWell, what is that?\n\n248\n00:14:15.940 --> 00:14:20.691\nI can do something crazy like this and\nsay, you know what?\n\n249\n00:14:20.691 --> 00:14:26.968\nIf the fmt_spec.endswith('d'),\n\n250\n00:14:26.968 --> 00:14:33.330\nthen I know that's the D time, right?\n\n251\n00:14:33.330 --> 00:14:35.390\nNow I'm not gonna use the other stuff.\n\n252\n00:14:35.390 --> 00:14:36.240\nThe zero two.\n\n253\n00:14:37.800 --> 00:14:43.355\nBut here, I can return, I can return what?\n\n254\n00:14:43.355 --> 00:14:48.639\nHm, well I can return maybe\njust the sum of all of\n\n255\n00:14:48.639 --> 00:14:53.675\nthe ordinal representations of the string.\n\n256\n00:14:53.675 --> 00:14:56.194\nSo, craziness, all right?\n\n257\n00:14:56.194 --> 00:14:57.670\nCraziness.\n\n258\n00:14:57.670 --> 00:15:02.810\nSo the sum of the ordinal of a char or\n\n259\n00:15:02.810 --> 00:15:06.010\na char in self, str.\n\n260\n00:15:06.010 --> 00:15:08.850\nWhat this is gonna do is it's\ngonna split them apart, and\n\n261\n00:15:08.850 --> 00:15:11.700\nI'm gonna find an SQL look-up table or\nsomething like.\n\n262\n00:15:11.700 --> 00:15:17.160\nI think it uses an ascii table,\nit has escaped from me right now.\n\n263\n00:15:17.160 --> 00:15:18.320\nWe'll find out in just a moment.\n\n264\n00:15:19.880 --> 00:15:22.820\nAnd it's gonna find the sum of all\nthe string representations of all\n\n265\n00:15:22.820 --> 00:15:26.620\nthe characters contained within\nthe string representations, okay?\n\n266\n00:15:26.620 --> 00:15:30.260\nAnd that is going to be my\nnumeric representation of a taco.\n\n267\n00:15:31.710 --> 00:15:33.095\nThat is nonsensical.\n\n268\n00:15:33.095 --> 00:15:35.599\n&gt;&gt; [LAUGH]\n&gt;&gt; Give me the number representation.\n\n269\n00:15:35.599 --> 00:15:37.020\n124!\n\n270\n00:15:37.020 --> 00:15:37.808\nWhat is that?\n\n271\n00:15:37.808 --> 00:15:40.345\nHard shell type chicken taco,\nwith sour cream.\n\n272\n00:15:40.345 --> 00:15:41.134\n&gt;&gt; How did you not know?\n\n273\n00:15:41.134 --> 00:15:43.199\n&gt;&gt; [LAUGH]\n&gt;&gt; I meant that I don't know-\n\n274\n00:15:43.199 --> 00:15:43.756\n&gt;&gt; How did you forget all this?\n\n275\n00:15:43.756 --> 00:15:44.314\n&gt;&gt; Seems pretty obvious.\n\n276\n00:15:44.314 --> 00:15:45.237\nI know, right?\n\n277\n00:15:45.237 --> 00:15:48.340\nYou have to know those type of things,\nright?\n\n278\n00:15:48.340 --> 00:15:53.060\nSo, if we come here,\nit was originally returning string.\n\n279\n00:15:53.060 --> 00:15:53.661\nWe've seen that it's failed.\n\n280\n00:15:53.661 --> 00:15:56.683\nI've implemented the dunder format method.\n\n281\n00:15:56.683 --> 00:16:00.059\nIf I come back and\n\n282\n00:16:00.059 --> 00:16:04.887\nI say Bracket, 02d.\n\n283\n00:16:04.887 --> 00:16:07.480\nA reminder, I'm not using a 0 or the 2.\n\n284\n00:16:07.480 --> 00:16:10.855\nI do actually get those as part,\nthose are passed in as a string.\n\n285\n00:16:10.855 --> 00:16:15.421\nI could say, well if it's 02, or\nif it's three characters, splits it in,\n\n286\n00:16:15.421 --> 00:16:16.195\nends with d.\n\n287\n00:16:16.195 --> 00:16:18.103\nI don't need the d cuz\nI already know that.\n\n288\n00:16:18.103 --> 00:16:22.180\n02, I need to pad it with zeros and\nI need at most two places.\n\n289\n00:16:22.180 --> 00:16:27.090\nSo I could force those and you're crazy\nwith this especially if you're writing\n\n290\n00:16:27.090 --> 00:16:31.160\na custom type that actually needs to\nbe represented as a numeric type.\n\n291\n00:16:31.160 --> 00:16:35.084\nYou don't typically do that a whole great\ndeal, but maybe there's a used case.\n\n292\n00:16:35.084 --> 00:16:39.402\nBut if I say t1 and must return a string,\n\n293\n00:16:39.402 --> 00:16:43.979\nnot an int, whoops, so I messed up there.\n\n294\n00:16:43.979 --> 00:16:48.151\nThat's all right though, because we\nwill fix that right quick in a hurry.\n\n295\n00:16:48.151 --> 00:16:55.031\nI return to sum that was, so\nit has to be a string type.\n\n296\n00:16:55.031 --> 00:16:59.382\nAnd now, let's try that again.\n\n297\n00:16:59.382 --> 00:17:06.839\n02 and t1, 2195.\n\n298\n00:17:06.839 --> 00:17:09.896\n&gt;&gt; [LAUGH]\n&gt;&gt; So that is the sum of all of\n\n299\n00:17:09.896 --> 00:17:15.890\nthe numeric backing character lookups for\nthe string representation.\n\n300\n00:17:15.890 --> 00:17:19.480\nSo I could do something like that.\n\n301\n00:17:19.480 --> 00:17:26.430\nSo pretty crazy stuff, but that also means\nthat, well, did I break something else?\n\n302\n00:17:26.430 --> 00:17:30.770\nSo if I come back here and ask for\nthe repr version in this template string.\n\n303\n00:17:31.990 --> 00:17:37.246\nOkay, so that works, and\nif I ask for the string version,\n\n304\n00:17:37.246 --> 00:17:43.918\nwhich I should automatically get anyway,\nthen I get the string version.\n\n305\n00:17:43.918 --> 00:17:48.370\nBut now I have the ability to ask for\nthe numerical representation.\n\n306\n00:17:48.370 --> 00:17:53.006\nAnd really I don't even need\nthe 02d cuz I wanna use it,\n\n307\n00:17:53.006 --> 00:17:56.688\nI'm gonna say say d and I still get 2195.\n\n308\n00:17:56.688 --> 00:18:02.210\nAgain, a nonsensical example, but\nyou can research the format, right?\n\n309\n00:18:02.210 --> 00:18:05.190\nThe format language, that is,\nin terms of the Python and\n\n310\n00:18:05.190 --> 00:18:09.060\nthen create these custom methods for you.\n\n311\n00:18:09.060 --> 00:18:12.630\nNow, Mike, are you ready for this?\n\n312\n00:18:12.630 --> 00:18:13.580\n&gt;&gt; I think so.\n\n313\n00:18:13.580 --> 00:18:19.785\n&gt;&gt; So if I were to tell you I could hijack\nthis and create an all custom format,\n\n314\n00:18:19.785 --> 00:18:24.203\nwould you believe me or\nwould you call shenanigans?\n\n315\n00:18:24.203 --> 00:18:25.124\n&gt;&gt; I'm gonna call shenanigans.\n\n316\n00:18:25.124 --> 00:18:26.279\nI'm gonna say, prove it.\n\n317\n00:18:26.279 --> 00:18:29.108\n&gt;&gt; Okay, he called my bluff,\nladies and gentleman.\n\n318\n00:18:29.108 --> 00:18:31.064\n&gt;&gt; [LAUGH]\n&gt;&gt; That's it, no, I'm joking, I'm joking.\n\n319\n00:18:31.064 --> 00:18:32.830\nI'm not saying you should do this.\n\n320\n00:18:32.830 --> 00:18:37.134\nBut you may have a very specific use case,\nsome kind of internal project where maybe\n\n321\n00:18:37.134 --> 00:18:40.100\nyou don't wanna adhere to\nthe format language, right?\n\n322\n00:18:41.350 --> 00:18:46.050\nBut you wanna go,\nby passing this format string and\n\n323\n00:18:46.050 --> 00:18:51.970\nthis happens, right,\nthen I want this very specific use case.\n\n324\n00:18:53.110 --> 00:18:55.820\nAnd let me show you what I mean.\n\n325\n00:18:55.820 --> 00:19:01.309\nIf I come back and\nI say let's do this, let's say taco.\n\n326\n00:19:04.518 --> 00:19:10.170\nFormat(t1), and\nthis gives me the string representation.\n\n327\n00:19:10.170 --> 00:19:13.760\nAnd that's because I'm always\nreturn the string representation.\n\n328\n00:19:13.760 --> 00:19:15.821\nWhat about trying that with the number 3?\n\n329\n00:19:15.821 --> 00:19:21.920\nInvalid format specifier,\nwell, we should make\n\n330\n00:19:21.920 --> 00:19:26.500\nsure that anything that's invalid returns\nthat same, and we need to tweak that.\n\n331\n00:19:26.500 --> 00:19:29.650\nBut I do want the ability to go :taco, and\n\n332\n00:19:29.650 --> 00:19:33.520\nI want crazy,\nsomething kind of off the wall, right?\n\n333\n00:19:34.970 --> 00:19:37.920\nAnd again, I'm not saying you should.\n\n334\n00:19:37.920 --> 00:19:40.760\nI'm just letting you be aware that\nthere's a lot of power about adhering to\n\n335\n00:19:40.760 --> 00:19:44.680\nthe set of protocol methods that\nare available within Python.\n\n336\n00:19:44.680 --> 00:19:48.580\nAnd so if we come back and\ninstead of here,\n\n337\n00:19:48.580 --> 00:19:53.867\nI'm gonna return super().__format,\n\n338\n00:19:53.867 --> 00:19:58.780\nI think this should work,\nwe'll double check that.\n\n339\n00:19:58.780 --> 00:20:06.002\nBut if the format spec,\nlet's say endswith again,\n\n340\n00:20:06.002 --> 00:20:10.280\njust to keep with everything.\n\n341\n00:20:11.670 --> 00:20:12.694\nCan't spell with, Mike.\n\n342\n00:20:12.694 --> 00:20:16.862\n&gt;&gt; [LAUGH]\n&gt;&gt; endswith(\"taco\"),\n\n343\n00:20:16.862 --> 00:20:21.933\nthen I want to return the self.repr,\n\n344\n00:20:21.933 --> 00:20:25.895\njust to really mess it up, and\n\n345\n00:20:25.895 --> 00:20:33.829\nthen the upper case version\nplus four exclamation points.\n\n346\n00:20:33.829 --> 00:20:38.982\nRight, we wanna scream the repr at you,\nkind of like I'm excited about tacos.\n\n347\n00:20:38.982 --> 00:20:44.233\nSo let's go check and see if we did\nan error when we pass in unknown things.\n\n348\n00:20:44.233 --> 00:20:48.804\nSo, Here we go, and if I say,\n\n349\n00:20:50.735 --> 00:20:58.347\nBoom, I think I know that is not one so-\n&gt;&gt; [LAUGH]\n\n350\n00:20:58.347 --> 00:21:00.845\n&gt;&gt; t1 and unsupported strength format,\n\n351\n00:21:00.845 --> 00:21:04.561\ncool, got you unsupported\nbecause I passed to the super.\n\n352\n00:21:04.561 --> 00:21:06.673\nThe super doesn't know about\nthat within the format spec.\n\n353\n00:21:06.673 --> 00:21:10.997\nSo there we go, but if I say taco,\n\n354\n00:21:10.997 --> 00:21:14.857\nnow I have the yield version so\n\n355\n00:21:14.857 --> 00:21:19.035\nI could extend the formatting.\n\n356\n00:21:19.035 --> 00:21:23.410\nAgain, I'm not saying you should do this.\n\n357\n00:21:23.410 --> 00:21:27.270\nBut one of the wonderful parts of\nknowing about these magic methods,\n\n358\n00:21:27.270 --> 00:21:28.830\nthese the under methods,\n\n359\n00:21:28.830 --> 00:21:34.660\nis you can kind of mold the protocol to\nyour use case if you so need it, right?\n\n360\n00:21:34.660 --> 00:21:37.100\nAnd if this is something that happens\nover and over and over again,\n\n361\n00:21:37.100 --> 00:21:39.250\nmaybe you have a really good reason.\n\n362\n00:21:39.250 --> 00:21:45.320\nWith that said, I would stick to the\nformat language, the miniformat language.\n\n363\n00:21:45.320 --> 00:21:48.890\nOnly because if someone else tries\nto use it, if I handed this to Mike,\n\n364\n00:21:48.890 --> 00:21:53.840\nMike's not gonna know that he can\ncall :taco, and pass a taco object.\n\n365\n00:21:53.840 --> 00:21:57.730\nIf it's an internal project, you may be\nable to use that to your advantage for\n\n366\n00:21:57.730 --> 00:22:00.220\nvery specific kind of edge cases.\n\n367\n00:22:00.220 --> 00:22:05.390\nBut by and large, if I did need\na HEX representation or a numeric\n\n368\n00:22:05.390 --> 00:22:11.870\nrepresentation, and I'm doing some sort of\nmessage pass thing, a distributed system.\n\n369\n00:22:11.870 --> 00:22:15.455\nMaybe I'm using this\nas a way to serialize.\n\n370\n00:22:15.455 --> 00:22:18.740\nKind of a serialization protocol,\nnot necessarily the best thing to do.\n\n371\n00:22:18.740 --> 00:22:22.100\nBut I have to work with\nthe systems I'm given.\n\n372\n00:22:22.100 --> 00:22:26.440\nYou could use format and\nthen ask for those representations.\n\n373\n00:22:26.440 --> 00:22:31.670\nAnd well, just a case in point,\nI'm pretty sure x is it.\n\n374\n00:22:31.670 --> 00:22:35.590\nSo if I give it the number 3,\nokay, that's fine.\n\n375\n00:22:35.590 --> 00:22:39.290\nBut if I give it the number 199,\nc7 is actually the hex,\n\n376\n00:22:39.290 --> 00:22:42.420\nso :x is the hex representation.\n\n377\n00:22:42.420 --> 00:22:44.350\nIf I give it t1,\n\n378\n00:22:44.350 --> 00:22:49.310\nit's gonna say, don't know anything\nbecause you have to implement the logic.\n\n379\n00:22:49.310 --> 00:22:51.120\nThat's what Python's saying.\n\n380\n00:22:51.120 --> 00:22:55.160\nWe're gonna give you for free,\nreference string, all right, more or less.\n\n381\n00:22:56.430 --> 00:23:00.070\nHowever for the other ones,\nyou need to provide the logic.\n\n382\n00:23:00.070 --> 00:23:02.070\nOtherwise, it's gonna fail.\n\n383\n00:23:02.070 --> 00:23:06.097\nAnd in being able to do so, you can\nactually create kind of extensions.\n\n384\n00:23:06.097 --> 00:23:10.365\nChoose a format to the format language.\n\n385\n00:23:10.365 --> 00:23:15.445\nAnd we wanted the hex representation\nto send it across ACTP,\n\n386\n00:23:15.445 --> 00:23:19.426\nTCP, some kind of maybe\neven like a UNIX board or\n\n387\n00:23:19.426 --> 00:23:23.023\nsomething and we're using that as bytes.\n\n388\n00:23:23.023 --> 00:23:28.186\nHey, maybe that's a way that you can\nserialize messages to be passed back and\n\n389\n00:23:28.186 --> 00:23:31.612\nforth as long as you know\nhow to get back out of them.\n\n390\n00:23:31.612 --> 00:23:34.040\nAnd so you gotta know both signs there.\n\n391\n00:23:34.040 --> 00:23:37.750\nSo that is one other way that\nwe can represent an instance and\n\n392\n00:23:37.750 --> 00:23:40.340\nthat's using the format which\nprovides a lot of power.\n\n393\n00:23:40.340 --> 00:23:43.080\nBut we have to take care, right?\n\n394\n00:23:43.080 --> 00:23:45.410\nEverybody's heard of the great\npower comes great responsibility.\n\n395\n00:23:45.410 --> 00:23:48.240\nSo we're gonna leave you on that note.\n\n396\n00:23:48.240 --> 00:23:50.241\n&gt;&gt; All right, Justin,\ngreat look there again,\n\n397\n00:23:50.241 --> 00:23:53.385\ncontinuing on with representing\nan instance, looking at that format.\n\n398\n00:23:53.385 --> 00:23:54.720\nSo we appreciate that.\n\n399\n00:23:54.720 --> 00:23:56.760\nHope everybody out there\nenjoyed watching this one.\n\n400\n00:23:56.760 --> 00:23:59.675\nSigning off for DevProTV,\nI've been your host Mike Rodrick.\n\n401\n00:23:59.675 --> 00:24:00.558\n&gt;&gt; And I'm Justin Dennison.\n\n402\n00:24:00.558 --> 00:24:02.311\n&gt;&gt; And we'll see you next time.\n\n403\n00:24:02.311 --> 00:24:11.131\n[MUSIC]\n\n",
          "vimeoId": "251549952"
        },
        {
          "description": "In this episode, Justin and ______ explore one final representation method that can be implemented in Python. Specifically, Justin demonstrates both a simple way to create a bytes object from a class as well as other processes that can be used when writing a custom \\_\\_bytes\\_\\_ method.",
          "length": "985",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-4-1-representing_an_instance_bytes-011718-PGM.00_20_06_17.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-4-1-representing_an_instance_bytes-011718-PGM.00_20_06_17.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-4-1-representing_an_instance_bytes-011718-PGM.00_20_06_17.Still001-sm.jpg",
          "title": "Representing an Instance: bytes",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.144 --> 00:00:16.559\nHello, welcome to another exciting\nepisode here at DevProTV.\n\n3\n00:00:16.559 --> 00:00:21.170\nI'm your host Mike Rodrick, and today we\nare looking at that Python data model.\n\n4\n00:00:21.170 --> 00:00:24.630\nAnd specifically in this episode, we're\ngonna be taking a look at another way that\n\n5\n00:00:24.630 --> 00:00:28.610\nwe can represent instances known as bytes.\n\n6\n00:00:28.610 --> 00:00:30.690\nAnd here to help us with that is Mr.\nJustin Dennison.\n\n7\n00:00:30.690 --> 00:00:32.665\nWelcome, Justin.\n&gt;&gt; Thanks for having me back, Mike.\n\n8\n00:00:32.665 --> 00:00:36.292\nAnd yeah,\nPython is full of just a bag of tricks.\n\n9\n00:00:36.292 --> 00:00:39.633\nSo we're gonna be talking\nabout bytes today and well,\n\n10\n00:00:39.633 --> 00:00:42.040\nbytes are kind of an odd thing, right.\n\n11\n00:00:42.040 --> 00:00:44.810\nWhat do I mean by bytes?\n\n12\n00:00:44.810 --> 00:00:46.978\nNow, I'm not gonna go\nsuper low level here.\n\n13\n00:00:46.978 --> 00:00:48.467\n&gt;&gt; [LAUGH]\n\n14\n00:00:48.467 --> 00:00:51.230\n&gt;&gt; I know, we both sighed a sigh of\n\n15\n00:00:51.230 --> 00:00:57.030\nrelief, but it's essentially the byte\nsequence of a representation of a string.\n\n16\n00:00:57.030 --> 00:01:01.823\nNow, let me give you some back story on\nbytes because if you've ever worked in\n\n17\n00:01:01.823 --> 00:01:06.612\nPython 2 code and you try to move it over\nto Python 3 code, it can be a source of\n\n18\n00:01:06.612 --> 00:01:10.097\nhow do you say incredible frustration.\n&gt;&gt; [LAUGH]\n\n19\n00:01:10.097 --> 00:01:12.628\n&gt;&gt; It's one of those things you're like,\n\n20\n00:01:12.628 --> 00:01:16.410\nwell over here it's a string and\nPython 3 it's bytes, okay?\n\n21\n00:01:16.410 --> 00:01:17.040\nIt's a byte array.\n\n22\n00:01:18.370 --> 00:01:21.310\nAnd this kind of stemmed from,\nin Python 2,\n\n23\n00:01:21.310 --> 00:01:23.670\nlet's say we opened up a TCP socket,\nright?\n\n24\n00:01:23.670 --> 00:01:26.730\nWe're gonna send data across the way.\n\n25\n00:01:26.730 --> 00:01:29.070\nWell, you just send a string.\n\n26\n00:01:30.080 --> 00:01:34.420\nHowever, I think, seeing as there was some\nkind of crazy, this is my understanding.\n\n27\n00:01:34.420 --> 00:01:37.670\nI haven't really necessarily\npicked at all of the pieces and\n\n28\n00:01:37.670 --> 00:01:43.930\ncompared the implementation details from\n2 to 3 within the original source code.\n\n29\n00:01:45.110 --> 00:01:49.320\nBut it is my understanding that\nit would transmit like binary, or\n\n30\n00:01:49.320 --> 00:01:50.730\nthe bytes representation.\n\n31\n00:01:50.730 --> 00:01:53.830\nAnd then on the other side it's like,\nyeah it's still a string.\n\n32\n00:01:53.830 --> 00:01:55.295\nSo there's like weird ambiguity.\n\n33\n00:01:55.295 --> 00:01:57.180\n&gt;&gt; Mm-hm.\n&gt;&gt; Right?\n\n34\n00:01:57.180 --> 00:02:01.120\nAnd what they wanted to do was\nremove some of the encoding data,\n\n35\n00:02:01.120 --> 00:02:04.840\nsome of the representation of the string,\nto say,\n\n36\n00:02:04.840 --> 00:02:07.520\nthis is just kind of raw data,\nfor lack of a better word.\n\n37\n00:02:08.570 --> 00:02:11.840\nSo in Python 3, there's a bytes object.\n\n38\n00:02:11.840 --> 00:02:15.860\nAnd it has a bytes array\nof interestingly enough,\n\n39\n00:02:15.860 --> 00:02:18.300\nmutable, and it gets a little weird.\n\n40\n00:02:18.300 --> 00:02:24.043\nI would probably not do crazy stuff\nwhere it looks just like a string does,\n\n41\n00:02:24.043 --> 00:02:28.228\nbut we have individual bytes\nthat can be fed through.\n\n42\n00:02:28.228 --> 00:02:32.138\nAnd then if you're gonna use the TCP\nstuff in Python 3, a lot of times\n\n43\n00:02:32.138 --> 00:02:36.335\nyou're gonna have to make sure you have\na bytes object before you send it.\n\n44\n00:02:36.335 --> 00:02:40.002\nAnd likewise if you receive\nsomething from a network call,\n\n45\n00:02:40.002 --> 00:02:42.990\na lot of times those\nwill be bytes as well.\n\n46\n00:02:42.990 --> 00:02:46.600\nSo, that's one of those weird\ninstances that have crept up\n\n47\n00:02:46.600 --> 00:02:49.100\nin Python 3.\n&gt;&gt; Is there a reason we now\n\n48\n00:02:49.100 --> 00:02:50.180\nhave these bytes?\n\n49\n00:02:50.180 --> 00:02:53.450\nLike, we didn't have them before,\nwe got along just fine, right?\n\n50\n00:02:53.450 --> 00:02:56.950\nSo, why bring them in now, what is their,\nwhat are they solving for us?\n\n51\n00:02:56.950 --> 00:02:59.010\n&gt;&gt; So we had this,\n\n52\n00:02:59.010 --> 00:03:03.170\nstrings could be encoded with\ndifferent kind of encodings, so,\n\n53\n00:03:03.170 --> 00:03:06.260\nare these regular strings or\nUnicode strings?\n\n54\n00:03:06.260 --> 00:03:10.430\nAnd it was the removal, it wasn't\nas transparent about what was going\n\n55\n00:03:10.430 --> 00:03:10.990\non.\n&gt;&gt; Hm-mm.\n\n56\n00:03:10.990 --> 00:03:12.070\n&gt;&gt; So it was my understanding,\n\n57\n00:03:12.070 --> 00:03:15.940\nI'm not saying this is the end all be all.\n\n58\n00:03:15.940 --> 00:03:19.760\nLet's be explicit about things that we\nwant to treat, for lack of a better word,\n\n59\n00:03:19.760 --> 00:03:23.140\nas a binary, byte-level chunk of data.\n\n60\n00:03:24.570 --> 00:03:27.820\nSo if we want those,\nthose are going to be a bytes object.\n\n61\n00:03:28.820 --> 00:03:33.240\nIf we want a regular string,\nthen those will be a string.\n\n62\n00:03:33.240 --> 00:03:35.840\nAnd some of those things are shared,\nand that's where it gets weird.\n\n63\n00:03:35.840 --> 00:03:37.744\nYou're like, I'm gonna index a string.\n\n64\n00:03:37.744 --> 00:03:40.452\nI can index a bytes object.\n\n65\n00:03:40.452 --> 00:03:44.390\nOkay, well, what else can I do?\n\n66\n00:03:44.390 --> 00:03:48.570\nIt still has some operations\nthat are shared, but\n\n67\n00:03:48.570 --> 00:03:52.590\nthen if you try to do\nsome string operation,\n\n68\n00:03:52.590 --> 00:03:57.470\nit'll say hey I'm looking for\na string not a bytes object.\n\n69\n00:03:57.470 --> 00:04:01.040\nSo you have to encode and decode manually.\n\n70\n00:04:01.040 --> 00:04:05.820\nBut that is to make sure,\nI wanna use UTFA as the encoding.\n\n71\n00:04:05.820 --> 00:04:08.000\nWell now you're gonna say UTFA.\n\n72\n00:04:08.000 --> 00:04:13.160\nBut if you want a different encoding\nthen you can change that, right?\n\n73\n00:04:13.160 --> 00:04:15.999\nSo it's just to remove some of the magic.\n\n74\n00:04:17.470 --> 00:04:19.291\nCuz a lot of times these were low level.\n\n75\n00:04:19.291 --> 00:04:22.879\nThis kind of cropped up when you\nwere doing low levels things,\n\n76\n00:04:22.879 --> 00:04:26.122\nas I said like sending data\nacross a socket connection or\n\n77\n00:04:26.122 --> 00:04:27.780\nsomething of that nature.\n&gt;&gt; So,\n\n78\n00:04:27.780 --> 00:04:29.440\nseems like that's better than for us.\n\n79\n00:04:29.440 --> 00:04:31.850\nWe get a little more control\nover what's going on and\n\n80\n00:04:31.850 --> 00:04:34.970\nwe can be very specific about,\nlike you said,\n\n81\n00:04:34.970 --> 00:04:40.121\nwhat encoding we wanna use on either end.\n&gt;&gt; Exactly and\n\n82\n00:04:40.121 --> 00:04:43.070\nyeah, when I first encountered them,\nI'm gonna be honest with you,\n\n83\n00:04:43.070 --> 00:04:46.940\nI I got very angry a couple of times.\n&gt;&gt; I was enjoying the magic and\n\n84\n00:04:46.940 --> 00:04:47.912\njust let it do it's thing.\n\n85\n00:04:47.912 --> 00:04:48.560\n[LAUGH]\n&gt;&gt; Yeah,\n\n86\n00:04:48.560 --> 00:04:51.720\nand then it was like cannot expecting\nbytes object, found string.\n\n87\n00:04:51.720 --> 00:04:56.400\nAnd you're like it worked before.\n&gt;&gt; [LAUGH]\n\n88\n00:04:56.400 --> 00:04:58.320\n&gt;&gt; And then it's real easy,\n\n89\n00:04:58.320 --> 00:05:00.910\nyou can convert from one to the other.\n\n90\n00:05:00.910 --> 00:05:02.120\nYou just have to be aware.\n\n91\n00:05:02.120 --> 00:05:05.230\nBut once you get aware, you do bring\nsome of that control to the forefront.\n\n92\n00:05:05.230 --> 00:05:07.190\nYou're a little bit more\nexplicit about what you're doing.\n\n93\n00:05:07.190 --> 00:05:08.500\nSo those are helpful.\n\n94\n00:05:08.500 --> 00:05:10.920\nAnd well, we talked a little here Mike.\n\n95\n00:05:10.920 --> 00:05:14.230\nIt's actually a look at\nbytes versus a string.\n\n96\n00:05:14.230 --> 00:05:16.690\nNot crazy, but just a little bit.\n\n97\n00:05:16.690 --> 00:05:17.423\nOkay?\nSo let's go ahead and\n\n98\n00:05:17.423 --> 00:05:18.455\ntake a look at the screen here.\n\n99\n00:05:18.455 --> 00:05:21.749\nAnd, well, I'm gonna start a Python 3.\n\n100\n00:05:21.749 --> 00:05:24.530\nRemember, Python 3, Python 3.\n\n101\n00:05:24.530 --> 00:05:25.710\nSo, let me clear that out.\n\n102\n00:05:25.710 --> 00:05:30.910\nAnd I'm gonna say, by_str,\nand that's going to be,\n\n103\n00:05:30.910 --> 00:05:36.050\nthere's a b out in front,\nI just put a quote abc.\n\n104\n00:05:36.050 --> 00:05:37.060\nOkay?\n\n105\n00:05:37.060 --> 00:05:44.290\nSo that is, notice the b out front,\nwhat is its type?\n\n106\n00:05:44.290 --> 00:05:46.060\nIt's bytes.\n\n107\n00:05:46.060 --> 00:05:48.760\nIt is a bytes thing.\n\n108\n00:05:48.760 --> 00:05:54.640\nNow what about just s, and that's abc,\nand then what is its type?\n\n109\n00:05:56.270 --> 00:05:57.830\nIt's a string.\n\n110\n00:05:57.830 --> 00:05:58.330\nOkay?\n\n111\n00:05:58.330 --> 00:06:00.920\nNotice, if I print it out,\nthere's no b up front.\n\n112\n00:06:02.370 --> 00:06:07.110\nNow if I gowWhat is the zero\ncharacter of a string?\n\n113\n00:06:07.110 --> 00:06:08.380\nIt's an a.\n\n114\n00:06:08.380 --> 00:06:14.510\nIf I say, by_str and\nzero index, I get a 97.\n\n115\n00:06:14.510 --> 00:06:20.660\nThat's because it's the numeric\nrepresentation of that character.\n\n116\n00:06:20.660 --> 00:06:24.670\nIf I print it out,\nit shows like a string would.\n\n117\n00:06:24.670 --> 00:06:27.690\nThat's where the confusion comes in,\nis you'll miss that little b out front.\n\n118\n00:06:27.690 --> 00:06:29.050\nYou'll go, it's a string.\n\n119\n00:06:29.050 --> 00:06:29.950\nMy stuff's broke.\n\n120\n00:06:29.950 --> 00:06:30.990\nThat's weird.\n\n121\n00:06:30.990 --> 00:06:36.350\nAnd likewise it's my understanding,\nlet's try something.\n\n122\n00:06:36.350 --> 00:06:39.110\nActually, let's come back to\nthe string just for a second.\n\n123\n00:06:39.110 --> 00:06:43.120\nAnd I say s(0) = 'e'.\n\n124\n00:06:43.120 --> 00:06:45.410\nString object does not\nsupport item assignment.\n\n125\n00:06:45.410 --> 00:06:48.340\nThere it can't mutate\nthe individual pieces.\n\n126\n00:06:48.340 --> 00:06:51.430\nNow, some of you are like well you\ncan smash them together, that's true,\n\n127\n00:06:51.430 --> 00:06:54.430\nbut it's actually creating\nnew string objects and\n\n128\n00:06:54.430 --> 00:06:57.500\npossibly reassigning to a variable,\nso that's a little different.\n\n129\n00:06:57.500 --> 00:07:04.780\nIf I come here and say, by_str[0] equals,\nand you know what, I'm gonna say,\n\n130\n00:07:06.440 --> 00:07:11.220\nsince we know that getting has a number,\nlet's change this to 98.\n\n131\n00:07:11.220 --> 00:07:15.780\nAnd, does not support object assignment,\nokay, that's good.\n\n132\n00:07:15.780 --> 00:07:23.210\nSo, now we have this similar behavior, if\nI'm using this, why is this not working?\n\n133\n00:07:23.210 --> 00:07:28.350\nThe only way that we can kind of move\nbetween, and I always get these backwards.\n\n134\n00:07:28.350 --> 00:07:32.810\nSo if I say, by_str and\nnotice there's an ends with,\n\n135\n00:07:32.810 --> 00:07:35.860\nwell that's a string method,\nit ends with c.\n\n136\n00:07:36.940 --> 00:07:43.327\nAnd ends with first argument must be\nbytes or tuple bytes, not string.\n\n137\n00:07:43.327 --> 00:07:46.280\nI have to, ends with a bytes.\n\n138\n00:07:46.280 --> 00:07:50.020\nIt ends with this byte, right,\nif I'm using a single thing.\n\n139\n00:07:50.020 --> 00:07:55.862\nLikewise, then I'll say endswith c,\n\n140\n00:07:55.862 --> 00:07:58.810\nfor the string, it just returns True.\n\n141\n00:07:58.810 --> 00:08:00.230\nSo, it's those little nuance,\n\n142\n00:08:00.230 --> 00:08:03.270\nyou have to be a little more\nexplicit about your intentions.\n\n143\n00:08:03.270 --> 00:08:08.250\nBut likewise, if we say encode.\n\n144\n00:08:08.250 --> 00:08:12.460\nSo this is on a string, a regular string,\nit gives you the bytes representation.\n\n145\n00:08:12.460 --> 00:08:15.970\nIt's kind of hard to see here,\nbut let's zoom in.\n\n146\n00:08:15.970 --> 00:08:18.090\nYou notice there's a b there.\n\n147\n00:08:18.090 --> 00:08:22.260\nSo, in code that's\nthe bytes representation.\n\n148\n00:08:22.260 --> 00:08:29.248\nIf I say by a string and I decode, I'm\nnow gonna get the string representation.\n\n149\n00:08:29.248 --> 00:08:34.040\nSo I can move between the other two,\nbut there are some subtle differences.\n\n150\n00:08:35.060 --> 00:08:39.150\nAs I've said many times before,\nthis is a lot of times based on,\n\n151\n00:08:39.150 --> 00:08:45.260\nI need to send raw data, or some kind of\nbytes representation through something.\n\n152\n00:08:45.260 --> 00:08:46.080\nRight?\nAs a protocol.\n\n153\n00:08:47.450 --> 00:08:51.945\nSo let's get out of this just for\na moment, and\n\n154\n00:08:51.945 --> 00:08:59.700\nwhat's interesting is if I want the bytes\nrepresentation of well, an object.\n\n155\n00:08:59.700 --> 00:09:01.770\nWe saw that strings are easy.\n\n156\n00:09:01.770 --> 00:09:03.870\nBut you can actually implement this for\nany object.\n\n157\n00:09:05.200 --> 00:09:08.850\nUsing one of these magic methods,\none of these data model methods.\n\n158\n00:09:08.850 --> 00:09:11.321\nAnd you know, my [CROSSTALK]\n&gt;&gt; Like a person objects or\n\n159\n00:09:11.321 --> 00:09:14.195\nour taco object the other\nday we can actually use,\n\n160\n00:09:14.195 --> 00:09:17.330\nrepresent them as a byte.\n&gt;&gt; Yeah, yeah, yeah.\n\n161\n00:09:17.330 --> 00:09:21.073\nIt's kinda weird and while I got you here.\n\n162\n00:09:21.073 --> 00:09:25.973\nWould you care to guess what the dunder\nmethod is that we will use in order to\n\n163\n00:09:25.973 --> 00:09:30.711\nget the bytes output for a custom object?\n&gt;&gt; I'm gonna take a wild guess and\n\n164\n00:09:30.711 --> 00:09:35.040\nsay it's gonna be dunder bytes.\n&gt;&gt; Ding ding ding!\n\n165\n00:09:35.040 --> 00:09:35.870\nYou got it right.\n&gt;&gt; [LAUGH]\n\n166\n00:09:35.870 --> 00:09:37.030\n&gt;&gt; All right, yeah.\n\n167\n00:09:37.030 --> 00:09:39.810\nAnd that's what I like\nabout knowing these things.\n\n168\n00:09:39.810 --> 00:09:42.106\nYou're like [INAUDIBLE]\nthere's a dunder byte,\n\n169\n00:09:42.106 --> 00:09:42.740\nthere is.\n&gt;&gt; Mm-hm.\n\n170\n00:09:42.740 --> 00:09:43.890\n&gt;&gt; And if you didn't know that,\n\n171\n00:09:43.890 --> 00:09:45.670\nyou could go look on the documentation.\n\n172\n00:09:45.670 --> 00:09:47.130\nBut let's see how that's implemented.\n\n173\n00:09:47.130 --> 00:09:49.320\nAnd this is actually pretty easy.\n\n174\n00:09:49.320 --> 00:09:52.240\nWe've seen representations multiple times.\n\n175\n00:09:52.240 --> 00:09:56.834\nBut, just to get things here,\nI'm gonna go back into str and\n\n176\n00:09:56.834 --> 00:09:58.800\nrepr and for tacos, I do love tacos.\n\n177\n00:09:58.800 --> 00:10:03.340\nAnd right now we have, right,\nwe have format, we have taco,\n\n178\n00:10:03.340 --> 00:10:07.310\nand we have the numeric representation.\n\n179\n00:10:08.690 --> 00:10:13.880\nAnd I'm gonna come up here and say bytes.\n\n180\n00:10:16.740 --> 00:10:17.370\nAll right.\n\n181\n00:10:17.370 --> 00:10:22.310\nAnd then interestingly enough this\nneeds to return a bytes object.\n\n182\n00:10:22.310 --> 00:10:26.900\nSo you go let's return a string.\n\n183\n00:10:26.900 --> 00:10:29.200\nAll right?\nWell, bytes, I want the string version.\n\n184\n00:10:29.200 --> 00:10:32.320\nAnd in Python 2,\nyou could do crazy stuff like this.\n\n185\n00:10:32.320 --> 00:10:36.945\nActually, if I'm not mistaken, dunder\nbytes is relatively new, just because,\n\n186\n00:10:36.945 --> 00:10:39.402\nwell, this is a new data type for\nPython 3.\n\n187\n00:10:39.402 --> 00:10:43.930\nSo if I come here and\nI run python3- str_and\n\n188\n00:10:43.930 --> 00:10:48.420\nrepr I accidentally used a tab there.\n\n189\n00:10:48.420 --> 00:10:50.529\nSo you have to keep those consistent.\n\n190\n00:10:52.620 --> 00:10:59.039\nAnd, See that giant tab?\n&gt;&gt; Mm-hm.\n\n191\n00:11:01.015 --> 00:11:01.790\n&gt;&gt; There we go.\n\n192\n00:11:01.790 --> 00:11:07.810\nSo now if we rerun this, and\nwe have, well let's say t2, right?\n\n193\n00:11:07.810 --> 00:11:11.392\nThere's our repr representation.\n\n194\n00:11:11.392 --> 00:11:15.480\nAnd let's say bytes\n(t2) must return bytes.\n\n195\n00:11:15.480 --> 00:11:21.640\nMust return bytes,\nmust return a bytes object.\n\n196\n00:11:21.640 --> 00:11:23.410\nIt returns a string.\n\n197\n00:11:24.580 --> 00:11:26.170\nThat's a problem.\n\n198\n00:11:26.170 --> 00:11:28.880\nNotice I called the function\nbytes on it and\n\n199\n00:11:28.880 --> 00:11:31.160\nit just delegated to the custom object.\n\n200\n00:11:31.160 --> 00:11:32.830\nIt said you have a dunder bytes?\n\n201\n00:11:32.830 --> 00:11:33.983\nYou do?\n\n202\n00:11:33.983 --> 00:11:36.432\nCool, well give me that back.\n\n203\n00:11:36.432 --> 00:11:39.790\nNow, what happens if we get out of here.\n\n204\n00:11:41.070 --> 00:11:44.240\nAnd we're gonna come back and\nactually fix this.\n\n205\n00:11:44.240 --> 00:11:48.046\nBut for now, let's just put comments so\nit doesn't occur.\n\n206\n00:11:48.046 --> 00:11:49.778\nRight, we don't have one of those.\n\n207\n00:11:49.778 --> 00:11:53.491\nAnd we want to say python3 -i.\n\n208\n00:11:53.491 --> 00:11:57.422\nAnd then we say the bytes(t1).\n\n209\n00:11:57.422 --> 00:11:59.710\nCannot convert \"Taco\" object to bytes.\n\n210\n00:11:59.710 --> 00:12:03.140\nBy default we don't have that capability.\n\n211\n00:12:03.140 --> 00:12:08.560\nIf I override this dunder bytes,\nI get to decide how that works.\n\n212\n00:12:08.560 --> 00:12:10.960\nI'm not saying this is the best decision.\n&gt;&gt; [LAUGH]\n\n213\n00:12:10.960 --> 00:12:13.010\n&gt;&gt; I'm making you aware of it though.\n\n214\n00:12:13.010 --> 00:12:14.390\nSo, do keep that in mind.\n\n215\n00:12:14.390 --> 00:12:15.460\nSo, we're gonna come back in here.\n\n216\n00:12:15.460 --> 00:12:16.590\nWe gotta fix it.\n\n217\n00:12:16.590 --> 00:12:17.500\nWe gotta make it work.\n\n218\n00:12:18.940 --> 00:12:25.790\nAnd so, here, knowing that this is gonna\nreturn a string, I can say encode, right?\n\n219\n00:12:25.790 --> 00:12:27.480\nOkay, there's the encoded portion.\n\n220\n00:12:29.100 --> 00:12:31.190\nLet's come back.\n\n221\n00:12:31.190 --> 00:12:35.100\nAnd say, give me the bytes\nrepresentation of the taco.\n\n222\n00:12:36.300 --> 00:12:40.400\nAnd it's the string representation,\nbut it's now a bytes object.\n\n223\n00:12:40.400 --> 00:12:43.880\nAnd if I wanted to send\nthis across a TCP socket or\n\n224\n00:12:43.880 --> 00:12:47.000\nsomething, I could do\nthis in Python 3 now.\n\n225\n00:12:47.000 --> 00:12:49.100\nSo I have the bytes representation.\n\n226\n00:12:50.460 --> 00:12:51.820\nNow in my.\n\n227\n00:12:51.820 --> 00:12:54.900\nThis didn't seem too interesting, right?\n\n228\n00:12:54.900 --> 00:12:59.170\nIt would almost be kind\nof interesting to see\n\n229\n00:12:59.170 --> 00:13:02.940\nhow maybe I could use this as\nsome kind of serialization, or\n\n230\n00:13:02.940 --> 00:13:07.300\nkind of a send it over and\nthen deserialize it on the other end.\n\n231\n00:13:07.300 --> 00:13:14.250\nNow the trick here is I have a function\nover here that creates the object, I need\n\n232\n00:13:14.250 --> 00:13:17.461\nto be able to undo that on the other side.\n&gt;&gt; RIght,\n\n233\n00:13:17.461 --> 00:13:20.512\nneed to be able to undo\nthat on the other side.\n\n234\n00:13:20.512 --> 00:13:25.501\nSo, I'm gonna show you the one side,\nand then you'll\n\n235\n00:13:25.501 --> 00:13:29.644\nhave to undo it the other side.\n&gt;&gt; [LAUGH]\n\n236\n00:13:29.644 --> 00:13:30.892\n&gt;&gt; So, str, and\n\n237\n00:13:30.892 --> 00:13:35.156\ninstead of just returning\nthat encoded string,\n\n238\n00:13:35.156 --> 00:13:41.094\nlet's say message = ' ' .join(),\nand what are we gonna join?\n\n239\n00:13:41.094 --> 00:13:46.281\nWe're going to get the hex value\n\n240\n00:13:46.281 --> 00:13:51.661\nof the individual piece, okay,\n\n241\n00:13:51.661 --> 00:13:57.052\nfor a char, for char in self str.\n\n242\n00:13:57.052 --> 00:14:01.280\nAnd now we are going to encode that, okay?\n\n243\n00:14:01.280 --> 00:14:06.599\nAnd, just to be explicit,\nif we were to return the message here,\n\n244\n00:14:06.599 --> 00:14:13.126\nthis is a string but\nif we call it .encode There we go.\n\n245\n00:14:13.126 --> 00:14:18.770\nWe have the encoding so to speak.\n&gt;&gt; [LAUGH]\n\n246\n00:14:18.770 --> 00:14:20.970\n&gt;&gt; Let's see what this produces.\n\n247\n00:14:20.970 --> 00:14:24.070\nIf I now want this to be my\nbytes representation, and\n\n248\n00:14:24.070 --> 00:14:26.320\nI may have a very specific use case.\n\n249\n00:14:26.320 --> 00:14:30.360\nThis is kinda just a contrive and\nfun example, all right?\n\n250\n00:14:30.360 --> 00:14:33.640\nSo I found three,\ngotta be careful with that Python.\n\n251\n00:14:33.640 --> 00:14:36.410\nSo you can tell that a lot of times,\n\n252\n00:14:36.410 --> 00:14:40.060\nI work in a different environment\nsometimes that Python is Python 3.\n\n253\n00:14:40.060 --> 00:14:42.450\nSo it's gonna get me every time.\n\n254\n00:14:42.450 --> 00:14:45.690\nSo, now if I look at t1,\nit looks exactly the same.\n\n255\n00:14:45.690 --> 00:14:51.840\nBut if I say, bites of t1,\nI now have the hexadecimal representation.\n\n256\n00:14:51.840 --> 00:14:55.880\nIf I, just for giggles,\nlet's say we encode.\n\n257\n00:14:57.450 --> 00:14:57.950\nExcuse me.\n\n258\n00:14:57.950 --> 00:14:59.200\nDecode.\n\n259\n00:14:59.200 --> 00:15:00.380\nI always get those backwards.\n\n260\n00:15:01.460 --> 00:15:06.380\nAnd now I get the hexadecimal\nrepresentation from this integer.\n\n261\n00:15:06.380 --> 00:15:06.958\nEasy.\n\n262\n00:15:06.958 --> 00:15:08.996\nIt's kind of weird, right?\n\n263\n00:15:08.996 --> 00:15:13.300\nHmm, so what does that mean?\n\n264\n00:15:13.300 --> 00:15:14.720\nI have to figure out how to do,\n\n265\n00:15:14.720 --> 00:15:15.920\nundo the other way.\n\n266\n00:15:15.920 --> 00:15:16.900\n&gt;&gt; Okay.\n&gt;&gt; Right.\n\n267\n00:15:16.900 --> 00:15:21.570\nSo this is something where\nI could just transmit it.\n\n268\n00:15:21.570 --> 00:15:25.410\nIt's binary, or, excuse me,\nit's a hexadecimal representation and\n\n269\n00:15:25.410 --> 00:15:29.540\ntransmitted across the wires,\nit's just more or less raw data.\n\n270\n00:15:29.540 --> 00:15:32.510\nAnd if I know that serialization protocol,\nI could undo that.\n\n271\n00:15:32.510 --> 00:15:35.479\nI'm not saying this is\nthe best use case of it, but\n\n272\n00:15:35.479 --> 00:15:37.683\nthis is something that you could do.\n\n273\n00:15:37.683 --> 00:15:41.562\nAnd maybe you're in Mike's world and\nyou want to upscale,\n\n274\n00:15:41.562 --> 00:15:43.741\nsome things that you're doing.\n\n275\n00:15:43.741 --> 00:15:47.959\nIt's not a guarantee that they won't find\nout, but this is a manner of possible\n\n276\n00:15:47.959 --> 00:15:51.450\nespecially if you're doing message\npassing and things of that nature.\n\n277\n00:15:51.450 --> 00:15:56.894\nBut, dunder bytes, it's just that simple\nto get a binary representation of,\n\n278\n00:15:56.894 --> 00:16:02.590\na bytes representation, let me be more\nexplicit there, for your custom object.\n\n279\n00:16:02.590 --> 00:16:06.260\nOtherwise, it just won't work.\n&gt;&gt; All right Justin, great look there.\n\n280\n00:16:06.260 --> 00:16:09.990\nA new way we can represent objects\nin Python 3 using that dunder bytes.\n\n281\n00:16:09.990 --> 00:16:11.330\nWe appreciate that.\n\n282\n00:16:11.330 --> 00:16:13.660\nHope everybody out there\nenjoyed watching this one.\n\n283\n00:16:13.660 --> 00:16:16.880\nSigning off for DevProTV,\nI've been your host, Mike Rodrick.\n\n284\n00:16:16.880 --> 00:16:17.740\n&gt;&gt; And I'm Justin Dennison.\n\n285\n00:16:17.740 --> 00:16:19.170\n&gt;&gt; And we'll see you next time.\n\n286\n00:16:19.170 --> 00:16:25.289\n[MUSIC]\n\n",
          "vimeoId": "251683380"
        },
        {
          "description": "In this episode, Justin and ______ explore creating code when an object instance is deleted using the \\_\\_del\\_\\_ method. Moreover, Justin discusses some of the pain points that can arise when relying on the \\_\\_del\\_\\_ method within Python.",
          "length": "1267",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-5-1-deleting_an_instance-011718.00_20_59_21.Still002.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-5-1-deleting_an_instance-011718.00_20_59_21.Still002-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-1-5-1-deleting_an_instance-011718.00_20_59_21.Still002-sm.jpg",
          "title": "Deleting an Instance",
          "transcript": "WEBVTT\n\n1\n00:00:00.009 --> 00:00:10.009\n[MUSIC]\n\n2\n00:00:13.119 --> 00:00:17.190\nHello, welcome to another exciting\nepisode here at DevProTV.\n\n3\n00:00:17.190 --> 00:00:18.030\nI'm your host, Mike Rodrick.\n\n4\n00:00:18.030 --> 00:00:20.670\nToday we're doing our Python data model.\n\n5\n00:00:20.670 --> 00:00:25.370\nSpecifically in this episode, we're gonna\nbe taking a look at deleting an instance.\n\n6\n00:00:25.370 --> 00:00:27.280\nAnd I was talking just a little bit ago,\nand\n\n7\n00:00:27.280 --> 00:00:30.160\nI maybe should put air quotes around that.\n\n8\n00:00:30.160 --> 00:00:31.990\nWe're gonna see why here in just a second.\n\n9\n00:00:31.990 --> 00:00:34.170\nWelcome, Justin.\n&gt;&gt; Thanks for having me back, Mike,\n\n10\n00:00:34.170 --> 00:00:36.530\nand yeah, there is definitely a deserve.\n\n11\n00:00:36.530 --> 00:00:37.620\nTitling is hard.\n\n12\n00:00:37.620 --> 00:00:39.160\nI said this in a bunch\nof my other episodes.\n\n13\n00:00:39.160 --> 00:00:44.520\nWe have just a little bit of real estate\nto convey an idea to you out there,\n\n14\n00:00:44.520 --> 00:00:49.740\nto anybody else who's watching any time,\nwhat we're talking about, right.\n\n15\n00:00:49.740 --> 00:00:53.090\nBut sometimes it's really hard to get\nsome of the nuance details there.\n\n16\n00:00:53.090 --> 00:00:57.760\nSo let me back up and\ntalk a little bit about Python.\n\n17\n00:00:57.760 --> 00:00:58.800\nWe'll dive in.\n\n18\n00:00:58.800 --> 00:01:00.180\nWe'll do a little bit of\ncode here just shortly,\n\n19\n00:01:00.180 --> 00:01:02.890\nwhich there's actually not a lot there.\n\n20\n00:01:02.890 --> 00:01:06.470\nThis is kind of a, I'm gonna show you\nthis as a matter of completeness,\n\n21\n00:01:06.470 --> 00:01:11.380\nan appropriate treatment, cuz you may\nhappen upon this and go, I can use these.\n\n22\n00:01:11.380 --> 00:01:13.560\nSo what do I mean by deleting an instance?\n\n23\n00:01:13.560 --> 00:01:18.970\nI've created an object and\nI want to delete it, right.\n\n24\n00:01:18.970 --> 00:01:24.803\nWell in Python I can use\nthe keyword D-E-L, del, del?\n\n25\n00:01:24.803 --> 00:01:26.980\nDel, feels like there should be another,\nanyway.\n\n26\n00:01:26.980 --> 00:01:29.840\nSo del and then that object.\n\n27\n00:01:29.840 --> 00:01:31.300\nCool, it's deleted.\n\n28\n00:01:31.300 --> 00:01:35.080\nAnd if you try to reuse that variable,\nthere's nothing there.\n\n29\n00:01:35.080 --> 00:01:37.142\nAnd you're like, I deleted it.\n\n30\n00:01:37.142 --> 00:01:40.740\nHowever, it's a little more complicated.\n\n31\n00:01:42.000 --> 00:01:46.150\nWhen I delete these that just means that\nI've more or less put it out of my reach.\n\n32\n00:01:47.890 --> 00:01:51.868\nBut it may, the actual object\nmay be stored someone else, or\n\n33\n00:01:51.868 --> 00:01:53.667\nreferenced someone else.\n\n34\n00:01:53.667 --> 00:01:57.919\nMaybe it's a value in a dictionary or\nmaybe even a key in a dictionary.\n\n35\n00:01:57.919 --> 00:02:02.280\nIt's not attached to that variable\nanymore, but it may be somewhere else.\n\n36\n00:02:02.280 --> 00:02:03.940\nAt that point it's still in memory,\n\n37\n00:02:03.940 --> 00:02:07.610\nit's still possibly available,\nyou don't get any clean ups.\n\n38\n00:02:07.610 --> 00:02:10.100\nNow Python is a garbage\ncollected language,\n\n39\n00:02:10.100 --> 00:02:13.370\nthat means periodically there's like\na street sweeper that comes through and\n\n40\n00:02:13.370 --> 00:02:16.708\ngoes, all right, these things are no\nlonger being used by anything.\n\n41\n00:02:16.708 --> 00:02:20.550\nSo it just grabs those up and\nactually deletes them.\n\n42\n00:02:20.550 --> 00:02:23.880\nIt collects the garbage and\nputs it through a trash compactor and\n\n43\n00:02:23.880 --> 00:02:25.750\na shredder and an incinerator.\n\n44\n00:02:25.750 --> 00:02:29.210\nAnd maybe I'm going overboard\nwith that metaphor.\n\n45\n00:02:29.210 --> 00:02:34.060\nBut how does it determine what\nis actually not in use anymore?\n\n46\n00:02:34.060 --> 00:02:36.330\nAnd it does that by reference counting.\n\n47\n00:02:36.330 --> 00:02:37.190\nNow what is a reference?\n\n48\n00:02:37.190 --> 00:02:40.930\nWhen I say x equals object, right, or\n\n49\n00:02:40.930 --> 00:02:44.320\nt equals taco and\nI created a new taco object.\n\n50\n00:02:44.320 --> 00:02:50.350\nT and taco, I have a reference,\nright, t refers to taco.\n\n51\n00:02:52.100 --> 00:02:56.730\nAny time I use that any other place\nit's stored, there's an equals sign, and\n\n52\n00:02:56.730 --> 00:02:59.730\nsometimes when there's not,\nthere may be a reference.\n\n53\n00:03:01.310 --> 00:03:02.410\nSo it will start counting.\n\n54\n00:03:02.410 --> 00:03:04.890\nIt'll go, well t equals,\nthere's one reference.\n\n55\n00:03:04.890 --> 00:03:06.430\nIt's in a dictionary,\nthere's another reference.\n\n56\n00:03:06.430 --> 00:03:07.270\nThere's another reference.\n\n57\n00:03:07.270 --> 00:03:08.720\nThere's another reference.\n\n58\n00:03:08.720 --> 00:03:13.740\nSo behind the scenes it looks like\nit's just available in that variable,\n\n59\n00:03:13.740 --> 00:03:15.300\nbut maybe it's stored other places and\n\n60\n00:03:15.300 --> 00:03:17.001\nthere's three hidden references.\n&gt;&gt; And\n\n61\n00:03:17.001 --> 00:03:20.106\nyou're saying that a garbage collection\nprocess, it will see those references and\n\n62\n00:03:20.106 --> 00:03:24.312\nsay, nope, something's looking at it?\n&gt;&gt; Yeah, something's still using it, right\n\n63\n00:03:24.312 --> 00:03:28.950\nIt looks like it's decreased a little bit,\nbut this other one's still using it.\n\n64\n00:03:28.950 --> 00:03:32.410\nAnd until it hits zero,\nit will not be garbage collected.\n\n65\n00:03:33.420 --> 00:03:38.450\nNow, when we delete a lot\nof times our intention,\n\n66\n00:03:38.450 --> 00:03:42.620\nand especially if you come from other\nlanguages, our intention is to, hey,\n\n67\n00:03:42.620 --> 00:03:44.580\nI'm deleting this,\nI wanna do some cleanup.\n\n68\n00:03:45.970 --> 00:03:49.250\nThis is, I'm destructing it,\ninstead of constructing.\n\n69\n00:03:49.250 --> 00:03:52.480\nThese are sometimes mistakenly\ncalled destructors.\n\n70\n00:03:52.480 --> 00:03:56.990\nNot explicitly so, and\nC++ land you have a destructor,\n\n71\n00:03:56.990 --> 00:04:03.320\nthings to do when the object is\ndestructed, right, and it gets destroyed.\n\n72\n00:04:03.320 --> 00:04:04.120\nAnd you can do that.\n\n73\n00:04:04.120 --> 00:04:08.698\nBut within Python you can\ndo something similar, but\n\n74\n00:04:08.698 --> 00:04:11.410\nthere are some iffy bits here.\n\n75\n00:04:11.410 --> 00:04:13.780\nAnd well let's go ahead and\ntake a look at the screen.\n\n76\n00:04:13.780 --> 00:04:19.801\nLet's look at that delete, and then\nwe're gonna build a custom object that\n\n77\n00:04:19.801 --> 00:04:26.307\nallows you to hijack a method that may or\nmay not be called when things are deleted.\n\n78\n00:04:26.307 --> 00:04:31.900\nOr, let me rephrase that, it may or may\nnot be called when you think it should.\n\n79\n00:04:31.900 --> 00:04:34.434\nThat's the real key there.\n\n80\n00:04:34.434 --> 00:04:38.130\nYou're like, it should be\nhanging out there, it's weird.\n\n81\n00:04:38.130 --> 00:04:39.145\nSo let's see here.\n\n82\n00:04:39.145 --> 00:04:42.950\nWe're gonna hop into Python3,\nwe're gonna clear that out.\n\n83\n00:04:42.950 --> 00:04:49.161\nAnd let's just say I have a list of 1 2 3.\n\n84\n00:04:49.161 --> 00:04:51.730\nI can do del t and now t is not defined.\n\n85\n00:04:51.730 --> 00:04:54.959\nEverything [SOUND] destroyed.\n\n86\n00:04:54.959 --> 00:04:58.160\nThat list, there's no guarantee.\n\n87\n00:04:58.160 --> 00:05:02.544\nNow I just made it so, but in a more\ncomplex program there's no guarantee that\n\n88\n00:05:02.544 --> 00:05:07.267\nthat list itself is not also somewhere\nelse, right, being referenced by possibly\n\n89\n00:05:07.267 --> 00:05:10.438\nanother variable, right,\npossibly in a dictionary or\n\n90\n00:05:10.438 --> 00:05:14.300\nmaybe a element in a tuple or\na tuple, however you pronounce those.\n\n91\n00:05:15.620 --> 00:05:19.484\nSo even though I deleted it from\nthe reference from this variable,\n\n92\n00:05:19.484 --> 00:05:22.940\nthere's no guarantee I've\ndeleted all references.\n\n93\n00:05:22.940 --> 00:05:25.695\nAnd so\nthe garbage collector will not collect it.\n\n94\n00:05:25.695 --> 00:05:29.405\nBut deleting actual,\nI'm gonna get rid of this association,\n\n95\n00:05:29.405 --> 00:05:30.980\nis pretty much that easy.\n\n96\n00:05:30.980 --> 00:05:35.343\nAnd you can even do crazy\nthings like delete t[0],\n\n97\n00:05:35.343 --> 00:05:37.830\nwell you actually have to have.\n\n98\n00:05:37.830 --> 00:05:41.190\nYou can't delete t and\nthen try to delete something out of t.\n\n99\n00:05:41.190 --> 00:05:43.440\nThat's an important distinction there,\nMike.\n\n100\n00:05:43.440 --> 00:05:47.270\nAnd then if I look at t,\nI've removed something from the list.\n\n101\n00:05:47.270 --> 00:05:50.370\nI don't recommend doing this,\nto remove elements from a list.\n\n102\n00:05:50.370 --> 00:05:54.140\nUse the list elements or grab slices.\n\n103\n00:05:54.140 --> 00:05:57.070\nDo other things other than this.\n&gt;&gt; [LAUGH]\n\n104\n00:05:57.070 --> 00:05:57.769\n&gt;&gt; But you can do that.\n\n105\n00:05:57.769 --> 00:06:04.580\nNow, let's get out of here and\nlook at an object real quick.\n\n106\n00:06:04.580 --> 00:06:07.300\nAnd we'll just say deletion.pui.\n\n107\n00:06:07.300 --> 00:06:10.930\nAnd we'll create something,\nlet's set the scene.\n\n108\n00:06:12.160 --> 00:06:14.865\nLet's say that I have something\nI'm collecting in a buffer.\n\n109\n00:06:14.865 --> 00:06:16.650\n&gt;&gt; Okay.\n\n110\n00:06:16.650 --> 00:06:20.080\n&gt;&gt; And really what I want is\n\n111\n00:06:20.080 --> 00:06:24.740\nI want the ability to write to\nthe buffer up to a certain amount and\n\n112\n00:06:24.740 --> 00:06:26.350\nI want to be able to flush to the buffer.\n\n113\n00:06:26.350 --> 00:06:29.290\nAnd we're just gonna flush out\nto standard out just for now.\n\n114\n00:06:29.290 --> 00:06:30.989\nWe could flush to a file, flush to disk.\n\n115\n00:06:32.005 --> 00:06:35.420\nBut I also want to ensure,\nwhat if I delete this?\n\n116\n00:06:35.420 --> 00:06:38.130\nI want to make sure that whatever\nwas currently in the buffer\n\n117\n00:06:38.130 --> 00:06:39.110\nstill gets flushed.\n\n118\n00:06:39.110 --> 00:06:43.994\nAnd you're like, how do I ensure that?\n\n119\n00:06:43.994 --> 00:06:47.825\nWell you find out about this, the ability\nto delete, and you're like, it would be\n\n120\n00:06:47.825 --> 00:06:52.570\nnice if someone deleted it, I could ensure\nthat the buffer actually writes out.\n\n121\n00:06:52.570 --> 00:06:56.160\nAll right,\nlet's set up this buffer object and\n\n122\n00:06:56.160 --> 00:07:00.300\nI'm gonna give it a max length,\nlet's just say 50.\n\n123\n00:07:03.057 --> 00:07:08.730\nAnd we're gonna say, data, and that's a\nbytes object, right, now just for giggles.\n\n124\n00:07:08.730 --> 00:07:12.640\nAnd then we're gonna say\nmaxlength equals maxlength.\n\n125\n00:07:14.270 --> 00:07:18.791\nNow within this buffer we're gonna\nhave a few methods that are no way\n\n126\n00:07:18.791 --> 00:07:23.013\nrelated other then I want this\nto be able to happen, all right.\n\n127\n00:07:23.013 --> 00:07:26.791\nSo I want to write and\nwhat is the message, and\n\n128\n00:07:26.791 --> 00:07:30.580\nI'm gonna go keep away\nfrom air checking it.\n\n129\n00:07:30.580 --> 00:07:34.249\nI really should make sure this is\nthe bytes and if its not convert it.\n\n130\n00:07:34.249 --> 00:07:38.980\nBut I'm gonna say if the len\nof data is less than, so\n\n131\n00:07:38.980 --> 00:07:44.043\nwhatever I have in the buffer,\nis less than the maximum\n\n132\n00:07:44.043 --> 00:07:49.133\npossible amount of whatever\nthat respective buffer.\n\n133\n00:07:49.133 --> 00:07:56.743\nThen I'm going to kind of swish\nthat onto the data bytes object.\n\n134\n00:07:56.743 --> 00:08:02.738\nSo I'm going say, data =, or\n+=, so I can use += here.\n\n135\n00:08:02.738 --> 00:08:10.196\nWhatever the message is, :self.maxlengthn,\n\n136\n00:08:10.196 --> 00:08:14.995\nminus the len of self._data.\n\n137\n00:08:14.995 --> 00:08:16.200\nThere's a lot going on there.\n\n138\n00:08:16.200 --> 00:08:20.685\nAnd essentially, what I'm saying is,\nif there's only five bytes left,\n\n139\n00:08:20.685 --> 00:08:26.090\nI'm just gonna grab the first five bytes\nof that message and put it in a buffer.\n\n140\n00:08:26.090 --> 00:08:27.540\nSo I could do this a bunch\nof different ways.\n\n141\n00:08:27.540 --> 00:08:31.556\nWell, this is what I've decided.\n&gt;&gt; [LAUGH]\n\n142\n00:08:31.556 --> 00:08:33.571\n&gt;&gt; And then I wanna be able to flush it,\n\n143\n00:08:33.571 --> 00:08:34.960\nall right?\n\n144\n00:08:34.960 --> 00:08:36.440\nNow, what do I mean by flush?\n\n145\n00:08:36.440 --> 00:08:41.270\nWell, I'm gonna say if you call flush and\nthere is data,\n\n146\n00:08:43.641 --> 00:08:47.461\nThen I want to grab standard out and\n\n147\n00:08:47.461 --> 00:08:51.545\nwrite to it, self.data.decode,\n\n148\n00:08:51.545 --> 00:08:57.620\nbecause I want it to be\na string with utf-8 encoding.\n\n149\n00:08:58.630 --> 00:09:05.000\nAnd then when I flush I'm gonna say,\nbeta's reset then nothing, okay?\n\n150\n00:09:05.000 --> 00:09:10.820\nNow, I have to bring in import sys,\njust a habit.\n\n151\n00:09:11.940 --> 00:09:18.365\nAnd for now, we're gonna say b1 = Buffer,\n\n152\n00:09:18.365 --> 00:09:25.308\nand to say b1.write(\"Mike is hosting \").\n\n153\n00:09:25.308 --> 00:09:32.251\nBut now, I have to make sure\nthat is a bytes object.\n\n154\n00:09:32.251 --> 00:09:37.352\nAnd then I'm gonna say b1.flush, okay?\n\n155\n00:09:37.352 --> 00:09:44.120\nNow, I'm going to run this as,\nMike is hosting.\n\n156\n00:09:44.120 --> 00:09:46.102\nNotice that it wrote too standard out,\n\n157\n00:09:46.102 --> 00:09:49.235\nit kinda jacked up my REPL there\ncuz I didn't write a new line.\n\n158\n00:09:49.235 --> 00:09:54.018\nBut it ran it out cuz it\nflushed too standard out, okay?\n\n159\n00:09:54.018 --> 00:09:58.435\nAnd then you go, well, I always wanna\nmake sure that that happens, right,\n\n160\n00:09:58.435 --> 00:10:00.050\nthat it gets there.\n\n161\n00:10:00.050 --> 00:10:04.000\nWe come into deletion and\nI'm gonna do something crazy.\n\n162\n00:10:04.000 --> 00:10:06.551\nI'm just gonna raise an error.\n\n163\n00:10:11.174 --> 00:10:17.664\nWell, I caused a NameError by using error,\nwhich is not a valid error name.\n\n164\n00:10:17.664 --> 00:10:23.646\nLet's just do key or something,\n\n165\n00:10:23.646 --> 00:10:27.283\nraise ValueError.\n\n166\n00:10:27.283 --> 00:10:31.111\nAnd if something happens,\nyour program is running, and\n\n167\n00:10:31.111 --> 00:10:34.800\nyou get a ValueError,\nand, ValueError, okay.\n\n168\n00:10:34.800 --> 00:10:37.391\nNotice there is no flushing to the disk,\n\n169\n00:10:37.391 --> 00:10:38.180\nright?\n&gt;&gt; Right.\n\n170\n00:10:39.500 --> 00:10:44.683\n&gt;&gt; Also, if you have something like this.\n\n171\n00:10:44.683 --> 00:10:48.701\nSo if I go back in and you say,\n\n172\n00:10:48.701 --> 00:10:52.730\nwell, I want to delete b1.\n\n173\n00:10:55.670 --> 00:10:57.620\nWell, I really intended to flush.\n\n174\n00:10:57.620 --> 00:10:59.190\nThis is an oversight on my part.\n\n175\n00:10:59.190 --> 00:11:03.080\nMaybe there's some other part of\nthe program, I'm gonna delete that buffer.\n\n176\n00:11:03.080 --> 00:11:04.510\nLet's see if it still flushes, and\n\n177\n00:11:04.510 --> 00:11:08.540\nit doesn't because I have a name\nerror because that went out of scope.\n\n178\n00:11:08.540 --> 00:11:12.750\nThat means that I kinda lost the ability\nto refer to that buffer object.\n\n179\n00:11:12.750 --> 00:11:15.790\nI can't flush it to disk or\nto standard out in this case.\n\n180\n00:11:15.790 --> 00:11:17.779\nMaybe these are really\nmission-critical things.\n\n181\n00:11:17.779 --> 00:11:22.639\nSo you go, all right, so\nI don't want anybody to delete it and\n\n182\n00:11:22.639 --> 00:11:25.360\nbe able to do exactly what you did.\n\n183\n00:11:25.360 --> 00:11:29.300\nI always want it to flush if it's deleted,\nokay?\n\n184\n00:11:29.300 --> 00:11:31.832\nNow, I'm gonna change our\ncode here just a little bit.\n\n185\n00:11:34.680 --> 00:11:36.175\nI'm gonna get rid of that flush just so\n\n186\n00:11:36.175 --> 00:11:38.100\nwe don't always get that\nerror on the printout.\n\n187\n00:11:39.470 --> 00:11:44.795\nBut you're like, well, I found in the\ndocumentation that there's Thunder Dale.\n\n188\n00:11:46.290 --> 00:11:51.380\nAnd as it says on the documentation, this\nis sometimes mistakenly referred to as\n\n189\n00:11:51.380 --> 00:11:56.910\na destructor based on other language\nsemantics and that's not true.\n\n190\n00:11:56.910 --> 00:11:59.433\nAnd, I was about to have tabs\nall over the place there.\n\n191\n00:11:59.433 --> 00:12:00.041\n&gt;&gt; [LAUGH]\n\n192\n00:12:00.041 --> 00:12:03.257\n&gt;&gt; Deleting and if we do run this,\n\n193\n00:12:03.257 --> 00:12:08.843\nessentially, what we want is self.flush,\nright?\n\n194\n00:12:08.843 --> 00:12:10.490\nSo I've just delegated back to the flush.\n\n195\n00:12:10.490 --> 00:12:12.800\nI want to make sure that it flushes out.\n\n196\n00:12:12.800 --> 00:12:17.700\nOkay, so if I run this it ran.\n\n197\n00:12:18.950 --> 00:12:20.460\nYou're like, that helps.\n\n198\n00:12:20.460 --> 00:12:24.280\nThat works exactly how I anticipated.\n\n199\n00:12:24.280 --> 00:12:28.032\nThey made sure that when I deleted that\nit still flushed it, just standard out,\n\n200\n00:12:28.032 --> 00:12:31.180\ncould've been a disk,\nmaybe it was a database call, something.\n\n201\n00:12:31.180 --> 00:12:35.138\nBut what if I have something like this?\n\n202\n00:12:41.525 --> 00:12:46.721\nImmediately after that,\nI raise a ValueError.\n\n203\n00:12:46.721 --> 00:12:49.544\nAnd deleting, Mike is hosting, and\n\n204\n00:12:49.544 --> 00:12:53.468\nit still flush the disk cuz it's deleted,\nright?\n\n205\n00:12:53.468 --> 00:12:58.581\nBut now, let's do something here.\n\n206\n00:12:58.581 --> 00:13:03.835\nLet's come back in and\nwe wrote to that buffer and then somewhere\n\n207\n00:13:03.835 --> 00:13:09.499\nalong the way you go, well, b2 = b1.\n&gt;&gt; [LAUGH]\n\n208\n00:13:09.499 --> 00:13:11.466\n&gt;&gt; And we're gonna delete b1 and\n\n209\n00:13:11.466 --> 00:13:13.750\nthat's gonna raise a ValueError.\n\n210\n00:13:13.750 --> 00:13:16.168\nI wonder,\nI wonder if it's still gonna work.\n\n211\n00:13:16.168 --> 00:13:18.399\nWe're about to find out here.\n\n212\n00:13:18.399 --> 00:13:22.808\nAnd it doesn't?\n\n213\n00:13:22.808 --> 00:13:27.265\nEven though we deleted it, as soon as\nit failed, there was no guarantee that\n\n214\n00:13:27.265 --> 00:13:31.528\nThunder Dale because you're just\nremoving a reference to that object.\n\n215\n00:13:31.528 --> 00:13:37.316\nNow, if your program finished,\nthere is nothing that's set.\n\n216\n00:13:37.316 --> 00:13:38.240\nI mean, this ran.\n\n217\n00:13:38.240 --> 00:13:41.070\nAnd I'll even run it outside\nof the context of the REPL.\n\n218\n00:13:42.160 --> 00:13:43.610\nNotice, I stopped the REPL and\n\n219\n00:13:43.610 --> 00:13:45.670\nthen it ran.\n&gt;&gt; Hmm.\n\n220\n00:13:45.670 --> 00:13:46.460\n&gt;&gt; So you're like, well,\n\n221\n00:13:46.460 --> 00:13:50.770\nI was expecting that to run another time.\n&gt;&gt; Mm-hm.\n\n222\n00:13:50.770 --> 00:13:52.660\n&gt;&gt; What happens if instead of bringing it\n\n223\n00:13:52.660 --> 00:13:55.704\nin a REPL, I say run deletion.\n\n224\n00:13:55.704 --> 00:13:58.940\nWell, it still ran Mike is hosting.\n\n225\n00:13:58.940 --> 00:13:59.470\nThere we go.\n\n226\n00:14:00.980 --> 00:14:06.120\nFrom my research, and it's really hard to\nreproduce, there are times where there's\n\n227\n00:14:06.120 --> 00:14:08.410\nnot even a guarantee that this will run.\n&gt;&gt; Wow.\n\n228\n00:14:09.480 --> 00:14:10.015\n&gt;&gt; Now,\n\n229\n00:14:10.015 --> 00:14:13.557\nI have not been able to reproduce that.\n\n230\n00:14:13.557 --> 00:14:18.378\nI tried really hard in order to show you\nan example here of when to reproduce it,\n\n231\n00:14:18.378 --> 00:14:21.811\nbut you have a long running task or\nsomething like that or\n\n232\n00:14:21.811 --> 00:14:25.000\nit's being referenced somewhere else.\n\n233\n00:14:25.000 --> 00:14:28.631\nAt the very end,\na lot of times it will be called.\n\n234\n00:14:28.631 --> 00:14:34.257\nWhen the Python process shuts down,\nit does clean up.\n\n235\n00:14:34.257 --> 00:14:36.876\nIt's not always the case that it does.\n\n236\n00:14:36.876 --> 00:14:39.840\nLet's see if we can catastrophically.\n\n237\n00:14:39.840 --> 00:14:40.860\nI just had a thought in my head.\n\n238\n00:14:40.860 --> 00:14:41.671\nI've tried a bunch of other things.\n\n239\n00:14:41.671 --> 00:14:43.878\nI just had a thought.\n\n240\n00:14:43.878 --> 00:14:48.670\nI make no guarantees here, but\nthat's part of the learning process.\n\n241\n00:14:48.670 --> 00:14:53.969\nIf we come here,\nwe know that we're gonna delete,\n\n242\n00:14:53.969 --> 00:14:58.038\nlet's get here and say, while True and\n\n243\n00:14:58.038 --> 00:15:03.240\nwe'll just say, stuff, print('stuff').\n\n244\n00:15:07.240 --> 00:15:12.638\nAnd I'm going to say time.sleep one\nsecond so it's not running crazy.\n\n245\n00:15:16.948 --> 00:15:18.158\nAll right, now,\n\n246\n00:15:18.158 --> 00:15:22.934\nthis will put it into an infinite\nloop until I do a keyboard interrupt.\n\n247\n00:15:22.934 --> 00:15:29.980\npython3, stuff, stuff, stuff, and\nstill puts Mike is hosting, all right?\n\n248\n00:15:31.700 --> 00:15:35.858\nSo this is where this lulls you\ninto the false sense of security,\n\n249\n00:15:35.858 --> 00:15:40.179\nfrom reading the Python documentation,\nsome of the lower level.\n\n250\n00:15:40.179 --> 00:15:44.148\nI really tried to dig it cuz I wanted to\nbe able to get it to not do this on Python\n\n251\n00:15:44.148 --> 00:15:44.780\nshutdown.\n\n252\n00:15:44.780 --> 00:15:48.590\nIf everything is really nice, and\n\n253\n00:15:48.590 --> 00:15:51.230\nI'm pretty sure there is\none way I could do it, and\n\n254\n00:15:51.230 --> 00:15:55.200\nthat is to remove power from my machine\nwhile the Python process is running.\n\n255\n00:15:56.530 --> 00:15:58.135\nThere is no guarantee that that occurs.\n\n256\n00:15:58.135 --> 00:16:02.624\nNow, removing power also presents a whole\nbunch of other problems if your machine\n\n257\n00:16:02.624 --> 00:16:03.546\njust turns off.\n\n258\n00:16:05.130 --> 00:16:09.033\nBut I wanted to let you know about\nthese because you may encounter them.\n\n259\n00:16:09.033 --> 00:16:12.856\nAnd you can override them.\n\n260\n00:16:12.856 --> 00:16:18.686\nUse them, you shouldn't depend on them\nbecause of the lack of determinates.\n\n261\n00:16:18.686 --> 00:16:20.465\nWhen does it happen?\n\n262\n00:16:20.465 --> 00:16:23.118\nWell, you thought that it\nwas when you called Delete,\n\n263\n00:16:23.118 --> 00:16:24.570\nwhen you deleted the object.\n\n264\n00:16:24.570 --> 00:16:25.756\nNo.\n\n265\n00:16:25.756 --> 00:16:29.133\nIt's when everything finally goes\nto a reference count of zero.\n\n266\n00:16:29.133 --> 00:16:32.484\nWhen nothing else is using it and\nthe garbage collector runs,\n\n267\n00:16:32.484 --> 00:16:34.297\nthen that's when it's called.\n\n268\n00:16:34.297 --> 00:16:38.777\nNow, I've tried this probably\nupward 150 times just like this,\n\n269\n00:16:38.777 --> 00:16:43.191\nthe starting stopping,\nstarting stopping, starting stopping.\n\n270\n00:16:43.191 --> 00:16:45.547\nWhen the Python process shuts down,\n\n271\n00:16:45.547 --> 00:16:50.656\nit has been my experience that it does\nrun in Python, what version of Python 3?\n\n272\n00:16:50.656 --> 00:16:53.279\n3.6?\n\n273\n00:16:53.279 --> 00:16:57.177\nThat when the Python process shuts down,\nthe reference count goes to zero.\n\n274\n00:16:57.177 --> 00:16:58.881\nAnd it does run those delete methods.\n\n275\n00:16:58.881 --> 00:17:03.229\nBut it does say in\nthe documentation there's no\n\n276\n00:17:03.229 --> 00:17:06.716\nguarantee that always run just as so.\n\n277\n00:17:06.716 --> 00:17:09.036\nSo you may have a very specific use case,\nand\n\n278\n00:17:09.036 --> 00:17:13.013\nyou should know that you can grab a hold\nof this for when someone deletes it.\n\n279\n00:17:13.013 --> 00:17:17.437\nYou still have references outstanding,\nor maybe you're in an infinite loop, or\n\n280\n00:17:17.437 --> 00:17:20.560\nthere's some reference somewhere else.\n\n281\n00:17:20.560 --> 00:17:22.765\nWell, why,\n\n282\n00:17:22.765 --> 00:17:29.036\nand, My God, I just had another idea.\n&gt;&gt; [LAUGH] Yeah,\n\n283\n00:17:29.036 --> 00:17:30.468\nI saw that lightbulb.\n&gt;&gt; I just had another idea.\n\n284\n00:17:30.468 --> 00:17:31.726\n&gt;&gt; [LAUGH] And I saw it again.\n\n285\n00:17:31.726 --> 00:17:33.009\n&gt;&gt; And let's see if I can get it to where.\n\n286\n00:17:33.009 --> 00:17:38.196\nLet me see if I can delete two variables,\nbut they refer to each other.\n\n287\n00:17:38.196 --> 00:17:40.658\nAnd that way,\neven though I've deleted this one,\n\n288\n00:17:40.658 --> 00:17:42.500\nit still references something else.\n\n289\n00:17:42.500 --> 00:17:43.480\nSo its reference count.\n\n290\n00:17:43.480 --> 00:17:45.694\nIt's kinda this weird seesaw balance.\n\n291\n00:17:45.694 --> 00:17:48.268\nAll right, so\nyou should keep these in mind and\n\n292\n00:17:48.268 --> 00:17:50.733\nthis is part of the learning experience.\n\n293\n00:17:50.733 --> 00:17:53.096\nI just had a, how could I break this?\n\n294\n00:17:53.096 --> 00:17:54.935\nI like how, how can I break this?\n\n295\n00:17:54.935 --> 00:17:58.748\nAll right so I'm gonna get buffer one,\nbut instead just doing this,\n\n296\n00:17:58.748 --> 00:18:02.511\nI'm gonna say buffer like so, so\nthese are two different buffers.\n\n297\n00:18:02.511 --> 00:18:03.922\nI've actually constructed\ntwo different objects.\n\n298\n00:18:03.922 --> 00:18:08.202\nBut I'm gonna say Other = b2.\n\n299\n00:18:08.202 --> 00:18:11.441\nAnd then b2 other = b1.\n\n300\n00:18:11.441 --> 00:18:14.004\nSo kind of figure 8ed it.\n\n301\n00:18:14.004 --> 00:18:18.905\nAnd then I'm going to delete b1, okay?\n\n302\n00:18:18.905 --> 00:18:20.729\nAll right.\n\n303\n00:18:20.729 --> 00:18:22.569\nLet's see here.\n\n304\n00:18:22.569 --> 00:18:24.398\nThat's not how you run it.\n\n305\n00:18:30.997 --> 00:18:32.877\nApparently I forgot what\nmy bash history is.\n\n306\n00:18:32.877 --> 00:18:37.279\nStuff, stuff, stuff,\nthat delete was before.\n\n307\n00:18:37.279 --> 00:18:37.999\n&gt;&gt; It was.\n\n308\n00:18:37.999 --> 00:18:40.178\n&gt;&gt; There's nothing there, all right?\n\n309\n00:18:40.178 --> 00:18:43.373\nAnd then deleting,\ndeleting, Mike is hosting.\n\n310\n00:18:43.373 --> 00:18:49.024\nHowever, this is kind of interesting.\n\n311\n00:18:49.024 --> 00:18:52.211\nWe did get some non-determinism here.\n&gt;&gt; Uh-huh.\n\n312\n00:18:54.244 --> 00:18:55.784\n&gt;&gt; Excuse me, that's because I'd written\n\n313\n00:18:55.784 --> 00:18:56.357\nto the buffer.\n\n314\n00:18:56.357 --> 00:18:57.347\nThere was nothing to write there.\n\n315\n00:18:57.347 --> 00:19:00.149\nSo I misspoke, there is determinism there.\n\n316\n00:19:00.149 --> 00:19:01.134\nStill it exactly.\n\n317\n00:19:01.134 --> 00:19:04.057\nSo, the delete occured before.\n\n318\n00:19:04.057 --> 00:19:07.265\nOne other thing, so\n\n319\n00:19:07.265 --> 00:19:11.800\nb1, we're deleting b1.\n\n320\n00:19:11.800 --> 00:19:16.766\nSo instead of this reference here,\nI'm gonna say b1.other.\n\n321\n00:19:16.766 --> 00:19:18.547\nSo b1 points to b2.\n\n322\n00:19:18.547 --> 00:19:20.379\nSo I'm gonna delete b1.\n\n323\n00:19:20.379 --> 00:19:22.969\nAnd then I'm gonna put us into a loop,\nand then we're just gonna hang out for\n\n324\n00:19:22.969 --> 00:19:24.110\na little bit.\n&gt;&gt; Okay.\n\n325\n00:19:24.110 --> 00:19:24.721\n&gt;&gt; And see what happens.\n\n326\n00:19:28.716 --> 00:19:31.843\nThis is one of those things that's\nreally hard to drive, look at that.\n\n327\n00:19:31.843 --> 00:19:33.974\nAnd it ran before.\n&gt;&gt; Uh-huh.\n\n328\n00:19:33.974 --> 00:19:36.153\n&gt;&gt; Because even though it was referenced,\n\n329\n00:19:36.153 --> 00:19:37.760\nI removed a reference to b2.\n\n330\n00:19:37.760 --> 00:19:42.530\nBut now if I stop this,\nthe leading runs for b2, and as I said,\n\n331\n00:19:42.530 --> 00:19:48.303\napparently there's no real explicit\npromise of when exactly do these run?\n\n332\n00:19:48.303 --> 00:19:52.443\nWhen does the garbage collect and it has\nto do with reference counting to determine\n\n333\n00:19:52.443 --> 00:19:54.970\nwhether you can garbage\ncollect an object or not.\n\n334\n00:19:54.970 --> 00:19:59.354\nSo, this entire episode was to show\nyou something that by and large,\n\n335\n00:19:59.354 --> 00:20:04.040\nI would probably stay away from just\nbecause you can't always make strict\n\n336\n00:20:04.040 --> 00:20:06.931\ndetermination of when it's going to occur.\n\n337\n00:20:06.931 --> 00:20:13.886\nAnd according to documentation, whether\nit is guaranteed to occur all the time.\n\n338\n00:20:13.886 --> 00:20:16.452\nNow, it is my inkling,\nit makes sense to me, and\n\n339\n00:20:16.452 --> 00:20:18.779\nmaybe I'm misreading the documentation.\n\n340\n00:20:18.779 --> 00:20:22.042\nIf I shut down the Python process,\nI need to garbage collect everything.\n\n341\n00:20:22.042 --> 00:20:26.238\nSo maybe it runs at a different\ntime than you anticipate.\n\n342\n00:20:26.238 --> 00:20:28.104\nSo be very careful.\n\n343\n00:20:28.104 --> 00:20:29.542\nI would just stay away from these.\n\n344\n00:20:29.542 --> 00:20:34.274\nBy and large I have not seen many\nprojects that make use of these\n\n345\n00:20:34.274 --> 00:20:36.643\nthat there's a good impetus.\n\n346\n00:20:36.643 --> 00:20:40.226\nBut now you're aware of them and\nit's kind of like you can.\n\n347\n00:20:40.226 --> 00:20:42.077\nAnd maybe you shouldn't, right?\n\n348\n00:20:42.077 --> 00:20:43.022\nSo there you go.\n\n349\n00:20:43.022 --> 00:20:45.706\nDeleting an instance.\n&gt;&gt; All right Justin,\n\n350\n00:20:45.706 --> 00:20:48.892\nyou're right, the title is\ndefinitely a little bit misleading.\n\n351\n00:20:48.892 --> 00:20:51.490\nWe appreciate those words of wisdom.\n\n352\n00:20:51.490 --> 00:20:54.198\nI hope everybody out there enjoyed\nEnjoyed watching this one.\n\n353\n00:20:54.198 --> 00:20:57.317\nSigning off for DEVPROTV,\nI've been your host Mike Roderick.\n\n354\n00:20:57.317 --> 00:20:58.308\n&gt;&gt; And I'm Justin Dennison.\n\n355\n00:20:58.308 --> 00:20:59.556\n&gt;&gt; And we'll see you next time.\n\n356\n00:20:59.556 --> 00:21:04.645\n[MUSIC]\n\n",
          "vimeoId": "251683181"
        }
      ],
      "title": "Basics"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and ______ explore how a custom class can work with iteration. Justin discusses the implementation of \\_\\_iter\\_\\_ and \\_\\_next\\_\\_ methods in order to create a custom iterable.",
          "length": "1500",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-1-1-objects_as_iterables-011718.00_24_53_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-1-1-objects_as_iterables-011718.00_24_53_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-1-1-objects_as_iterables-011718.00_24_53_08.Still001-sm.jpg",
          "title": "Objects as Iterables",
          "transcript": "WEBVTT\n\n1\n00:00:00.370 --> 00:00:10.370\n[MUSIC]\n\n2\n00:00:13.163 --> 00:00:16.907\nHello, welcome to another exciting\nepisode here at DEVPRO.TV I'm your host\n\n3\n00:00:16.907 --> 00:00:18.010\nMike Roderick.\n\n4\n00:00:18.010 --> 00:00:20.630\nToday we're doing that Python data model.\n\n5\n00:00:20.630 --> 00:00:26.190\nSpecifically, in this episode we're gonna\nbe taking a look at objects as intervals.\n\n6\n00:00:26.190 --> 00:00:27.170\nWhat that means?\n\n7\n00:00:27.170 --> 00:00:30.505\nI don't know, but we've got someone\nhere that's gonna explain it us, Mr.\n\n8\n00:00:30.505 --> 00:00:31.810\nJustin Dennison.\n\n9\n00:00:31.810 --> 00:00:33.566\nJustin, glad to get your name out there.\n\n10\n00:00:33.566 --> 00:00:35.692\n[LAUGH]\n&gt;&gt; I've been called a lot of things.\n\n11\n00:00:35.692 --> 00:00:38.175\nI've answered the phone,\nsaid my name and their like.\n\n12\n00:00:38.175 --> 00:00:39.591\nWell, hello, Jeff.\n&gt;&gt; [LAUGH]\n\n13\n00:00:39.591 --> 00:00:41.309\n&gt;&gt; Casey, George, I'm like,\n\n14\n00:00:41.309 --> 00:00:43.540\nthat doesn't even start with a J.\n\n15\n00:00:43.540 --> 00:00:44.925\nSo-\n&gt;&gt; You're used to it.\n\n16\n00:00:44.925 --> 00:00:46.727\n&gt;&gt; I'll forgive you this time, so\n\n17\n00:00:46.727 --> 00:00:48.884\nI completely understand.\n&gt;&gt; All right.\n\n18\n00:00:48.884 --> 00:00:49.758\n&gt;&gt; But, hopefully,\n\n19\n00:00:49.758 --> 00:00:52.874\nI know what I'm talking about,\nbecause right before the episode,\n\n20\n00:00:52.874 --> 00:00:54.779\nI thought Mike had done this, and he-\n&gt;&gt; [LAUGH]\n\n21\n00:00:54.779 --> 00:00:55.954\n&gt;&gt; Was like, I don't know what's going on.\n\n22\n00:00:55.954 --> 00:00:59.400\nNo, I jest, object is iterables.\n\n23\n00:00:59.400 --> 00:01:04.340\nSo one of the handy things that I really\nlike about Python is I'm not a big fan.\n\n24\n00:01:04.340 --> 00:01:06.972\nI can use them, I've used them\na great deal in other languages.\n\n25\n00:01:06.972 --> 00:01:12.510\nC-style for-loops, that's where you get\nan index and you set the bounds, right?\n\n26\n00:01:12.510 --> 00:01:15.780\nWell, int i well, i is less than this.\n\n27\n00:01:15.780 --> 00:01:18.996\nStep by one and\nthat's how you iterate through arrays.\n\n28\n00:01:18.996 --> 00:01:20.661\nYou can also do other things.\n\n29\n00:01:20.661 --> 00:01:25.063\nBut one of the common uses of a for-loop\nis iterating through a collection\n\n30\n00:01:25.063 --> 00:01:25.703\nof stuff.\n\n31\n00:01:25.703 --> 00:01:29.783\nAll right, I'm iterating through this list\nof numbers, or this list of letters, or\n\n32\n00:01:29.783 --> 00:01:30.820\na string.\n\n33\n00:01:30.820 --> 00:01:35.240\nWell, in C, Java, and some other one,\nyou have to use that C-style for loop.\n\n34\n00:01:35.240 --> 00:01:38.525\nNow, some of them are coming along and\n\n35\n00:01:38.525 --> 00:01:42.639\nadopting kind of this\niterator type protocol.\n\n36\n00:01:42.639 --> 00:01:46.010\nBut in order for something to be iterable,\nI can use it, kind of for-loop,\n\n37\n00:01:46.010 --> 00:01:47.235\nwe're gonna simply that.\n\n38\n00:01:47.235 --> 00:01:52.313\nThat's not the strictest of definitions,\nbut I can iterate over it,\n\n39\n00:01:52.313 --> 00:01:56.443\nit is the iterable and well,\nin order to iterate over it,\n\n40\n00:01:56.443 --> 00:02:01.881\nI have to be able to obtain an iterator,\nsomething that I can iterate with.\n\n41\n00:02:01.881 --> 00:02:02.713\nLet-\n&gt;&gt; That's\n\n42\n00:02:02.713 --> 00:02:03.297\ncrazy.\n&gt;&gt; [LAUGH]\n\n43\n00:02:03.297 --> 00:02:05.310\n&gt;&gt; That's crazy stuff, right, Mike?\n\n44\n00:02:05.310 --> 00:02:09.576\nSo we'll cover this, and\nwhat's interesting is, in Python,\n\n45\n00:02:09.576 --> 00:02:14.475\nthe for-loop, unless you go out of\nyour way to make it C-style-esque,\n\n46\n00:02:14.475 --> 00:02:17.329\nand there are times\nwhen you would do that.\n\n47\n00:02:17.329 --> 00:02:21.180\nBut for-element in list, that's it.\n\n48\n00:02:21.180 --> 00:02:23.840\nI don't have to worry about an out of\nbounds issues starting at the beginning.\n\n49\n00:02:23.840 --> 00:02:25.980\nI start at the beginning and\ngo to the end.\n\n50\n00:02:25.980 --> 00:02:30.700\nAnd because of some other things,\nI can do slices and get every other one.\n\n51\n00:02:30.700 --> 00:02:35.628\nAnd so, it's really nice,\nit's very readable, and what's interesting\n\n52\n00:02:35.628 --> 00:02:40.200\nis if you write a custom object you\ncan make it usable with a for-loop.\n\n53\n00:02:40.200 --> 00:02:44.336\nBy default they're not,\ndictionaries are, lists are, tables are.\n\n54\n00:02:44.336 --> 00:02:48.136\nSets, I think sets are as well, but\n\n55\n00:02:48.136 --> 00:02:53.598\nif I have a custom taco class,\nwell, four t n taco.\n\n56\n00:02:53.598 --> 00:02:54.580\nWhat does that mean?\n\n57\n00:02:54.580 --> 00:02:57.520\nWell, when I think of that,\nwhat's the only collection of stuff?\n\n58\n00:02:57.520 --> 00:02:58.930\nThe toppings.\n\n59\n00:02:58.930 --> 00:03:00.910\nIf I wanted to make that\nas part of my interface.\n\n60\n00:03:00.910 --> 00:03:02.300\nAgain, this is a contrived example.\n\n61\n00:03:03.510 --> 00:03:05.020\nI can't do that by default,\n\n62\n00:03:05.020 --> 00:03:09.080\nbut I can using some of these\ndunder magic methods, right?\n\n63\n00:03:09.080 --> 00:03:13.824\nPart of the data model, I can provide\nthis iterable type interface.\n\n64\n00:03:13.824 --> 00:03:16.814\nSo let's go ahead and\ntake a look at the screen here and\n\n65\n00:03:16.814 --> 00:03:18.745\njust a quick review of what I mean.\n\n66\n00:03:18.745 --> 00:03:23.585\nSo let's say x is the list of range five.\n\n67\n00:03:23.585 --> 00:03:26.170\nAnd so, that's 0 through 4.\n\n68\n00:03:26.170 --> 00:03:31.519\nSo for n in x: print[n),\n\n69\n00:03:31.519 --> 00:03:35.960\nboom and\nI just went from beginning to end.\n\n70\n00:03:35.960 --> 00:03:38.381\nIt's very readable,\nI really like this for-loop.\n\n71\n00:03:38.381 --> 00:03:43.381\nNow, there are,\neven if I had something like\n\n72\n00:03:43.381 --> 00:03:47.592\ny is the dictionary where A equals 1,\n\n73\n00:03:47.592 --> 00:03:53.005\nB equals 2, but look at Y,\nit's a dictionary.\n\n74\n00:03:53.005 --> 00:03:56.856\nIf I say for key in y,\nI can print the key and\n\n75\n00:03:56.856 --> 00:04:01.809\nit will now iterate over\nthe keys of the dictionary and\n\n76\n00:04:01.809 --> 00:04:04.910\nthere's other ways to iterate.\n\n77\n00:04:06.570 --> 00:04:07.943\nVery readable to me.\n\n78\n00:04:07.943 --> 00:04:11.751\nI know once I understand the construction\nof the language I'm like okay,\n\n79\n00:04:11.751 --> 00:04:15.980\nif it's a dictionary get the keys, if\nit's a list get the individual elements.\n\n80\n00:04:15.980 --> 00:04:19.170\nBut I'm always getting\nthe elements of a collection.\n\n81\n00:04:19.170 --> 00:04:25.600\nI'm starting somewhere and I'm beginning\nto iterate over an iterator, right?\n\n82\n00:04:25.600 --> 00:04:28.710\nAnd then when I get to the end\nof the iterator I'm done, okay?\n\n83\n00:04:29.760 --> 00:04:32.610\nNow, [COUGH] what defines an iterator?\n\n84\n00:04:32.610 --> 00:04:39.504\nWell, let's create a simplified Taco\nclass and let's just call this iterables.\n\n85\n00:04:39.504 --> 00:04:42.129\nI'm gonna keep this a little\nsimpler than a previous one.\n\n86\n00:04:43.970 --> 00:04:50.047\nAnd there's a knit, and\nlet's just say, that I have shell and\n\n87\n00:04:50.047 --> 00:04:55.940\ntoppings and nuts then.\n&gt;&gt; I'm glad we do your\n\n88\n00:04:55.940 --> 00:05:01.090\nshows in the afternoon after lunch.\n&gt;&gt; Yeah, cuz you get hungry watching this.\n\n89\n00:05:01.090 --> 00:05:02.020\nI ain't gonna lie to you.\n\n90\n00:05:03.370 --> 00:05:07.030\nSo toppings, and then, let's just\nsay that we have a single taco, and\n\n91\n00:05:07.030 --> 00:05:09.180\nI'm gonna make sure that it has toppings.\n\n92\n00:05:09.180 --> 00:05:12.740\nWe could have no toppings here, but\nthat's not interesting in our case.\n\n93\n00:05:12.740 --> 00:05:18.199\nAnd we could just say this is a soft shell\n\n94\n00:05:18.199 --> 00:05:23.503\nwith sour cream and tomatoes, okay.\n\n95\n00:05:23.503 --> 00:05:27.867\nI'm not saying these are the best,\nwhatever you want in your taco.\n\n96\n00:05:27.867 --> 00:05:32.411\nThere's your taco and if we go Python3-i,\n\n97\n00:05:32.411 --> 00:05:35.765\niterables, now, we have taco.\n\n98\n00:05:35.765 --> 00:05:39.500\nCool, we don't have a wrapper,\nwe are gonna leave that alone,\n\n99\n00:05:39.500 --> 00:05:42.488\nthose string [INAUDIBLE],\nbut if I say for T in taco.\n\n100\n00:05:44.863 --> 00:05:47.300\nPrint t.\n\n101\n00:05:47.300 --> 00:05:50.460\nTaco object is not iterable, man.\n\n102\n00:05:50.460 --> 00:05:54.360\nI just saw that there\nare objects that are iterable.\n\n103\n00:05:54.360 --> 00:05:55.960\nWell, guess what?\n\n104\n00:05:55.960 --> 00:05:59.587\nWe do have magic methods\nthat we can override that\n\n105\n00:05:59.587 --> 00:06:04.456\nprovide the ability to iterate through,\nwell, a taco, right?\n\n106\n00:06:04.456 --> 00:06:06.290\nSo, let's see here and\n\n107\n00:06:06.290 --> 00:06:11.889\nthere is a few other ones that\nare typically associated with iteraters,\n\n108\n00:06:11.889 --> 00:06:17.630\nbut there is at minimum two,\nyou have to implement for a class.\n\n109\n00:06:17.630 --> 00:06:23.040\nThat is the dunder eater, all right?\n\n110\n00:06:23.040 --> 00:06:28.770\nNo, you can do that and the dunder next.\n\n111\n00:06:28.770 --> 00:06:34.440\nIn Python 2, this was actually just next,\nit was not a dunder method.\n\n112\n00:06:34.440 --> 00:06:37.175\nSo you had to implement next and\ndunder iter.\n\n113\n00:06:37.175 --> 00:06:40.776\nWe're in Python 3, but just in case,\nyou have to wear an old code base,\n\n114\n00:06:40.776 --> 00:06:44.990\nthis is one of those things that there is\na difference, but it's available in both.\n\n115\n00:06:44.990 --> 00:06:51.086\nSo what the dunder iter has to do\nis send back an iterate, right?\n\n116\n00:06:51.086 --> 00:06:56.887\nSo I could just return something\nthat can be iterated over.\n\n117\n00:06:56.887 --> 00:07:00.195\nIf, and here's the interesting part.\n\n118\n00:07:00.195 --> 00:07:04.640\nIf that object has a dunder next,\nthat makes it an iterator.\n\n119\n00:07:05.830 --> 00:07:10.210\nSo by implementing both of these,\nI can now iterate over tacos.\n\n120\n00:07:10.210 --> 00:07:14.819\nSo let's set this up and\nsay, well, for iter,\n\n121\n00:07:14.819 --> 00:07:17.931\nbecause I'm the class itself,\n\n122\n00:07:17.931 --> 00:07:23.019\nthe object itself is going\nto be the iterable thing.\n\n123\n00:07:23.019 --> 00:07:26.010\nI'm just gonna return self, and\nyou'll see this pattern a great deal.\n\n124\n00:07:26.010 --> 00:07:28.040\nWe'll come back to that in just a moment.\n\n125\n00:07:28.040 --> 00:07:30.446\nAnd then for next, well, what do we want?\n\n126\n00:07:30.446 --> 00:07:36.894\nWell, we got a,\nI got a thing or some here.\n\n127\n00:07:36.894 --> 00:07:41.415\nSo I am going to use an index here and\nyou'll see why and\n\n128\n00:07:41.415 --> 00:07:44.040\nI'm gonna start native once.\n\n129\n00:07:44.040 --> 00:07:47.430\nSo when we created taco and\nthere's like a hidden Index.\n\n130\n00:07:47.430 --> 00:07:48.555\nYou don't have to do this.\n\n131\n00:07:48.555 --> 00:07:51.872\nI'm gonna show you some other ways\nthat you can get around this.\n\n132\n00:07:51.872 --> 00:07:55.353\nReturn self, and\nthen what I'm gonna do is say self-index.\n\n133\n00:07:55.353 --> 00:07:57.546\nEvery time you call dunder next.\n\n134\n00:07:57.546 --> 00:08:03.375\nI'm gonna increment that by one And I'm\ngonna say if the index is greater than or\n\n135\n00:08:03.375 --> 00:08:09.128\nequal to the number of toppings,\ncuz that's what we're gonna iterate over.\n\n136\n00:08:11.007 --> 00:08:13.240\nWait, one, two, three, four.\n\n137\n00:08:13.240 --> 00:08:15.693\nI'm gonna raise a StopIteration.\n\n138\n00:08:17.575 --> 00:08:19.647\nSo what they're actually,\nthey're using control flow.\n\n139\n00:08:19.647 --> 00:08:21.891\nThey're raising like an error or\nan exception, but\n\n140\n00:08:21.891 --> 00:08:23.970\nit's called a stop iteration.\n\n141\n00:08:23.970 --> 00:08:25.510\nThat's how the for-loop works.\n\n142\n00:08:25.510 --> 00:08:28.600\nIt actually runs until you\nraise a stop iteration.\n\n143\n00:08:28.600 --> 00:08:29.620\nAnd then it goes, cool, we're done.\n\n144\n00:08:30.690 --> 00:08:32.870\nAnd it just kind of hides that away.\n\n145\n00:08:32.870 --> 00:08:35.860\nSo it's kind of a slick trick.\n\n146\n00:08:35.860 --> 00:08:37.720\nSo that's that.\n\n147\n00:08:37.720 --> 00:08:42.728\nOtherwise we're gonna return\nself.toppings, wait for it,\n\n148\n00:08:42.728 --> 00:08:45.440\nself.index.\n\n149\n00:08:45.440 --> 00:08:49.750\nGo to the first one, then the next\none then the next one, all right?\n\n150\n00:08:49.750 --> 00:08:50.560\nWe have these two,\n\n151\n00:08:50.560 --> 00:08:53.992\nmy taco is actually iterable.\n&gt;&gt; That is cool.\n\n152\n00:08:53.992 --> 00:08:56.505\n&gt;&gt; Now [COUGH] one final thing before I\n\n153\n00:08:56.505 --> 00:09:00.649\nforget, when we get here\nthat means that we're done.\n\n154\n00:09:04.108 --> 00:09:07.468\nI'm gonna reset this, we're gonna\ncome back and take that out and\n\n155\n00:09:07.468 --> 00:09:10.900\nsee what happens because I want\nto demonstrate a few things here.\n\n156\n00:09:10.900 --> 00:09:13.280\nPython3 iterables, all right?\n\n157\n00:09:13.280 --> 00:09:17.570\nSo, for T and taco, print T.\n\n158\n00:09:18.650 --> 00:09:19.501\nSour cream, tomatoes.\n\n159\n00:09:19.501 --> 00:09:21.680\nSo I can iterate over a taco now.\n\n160\n00:09:21.680 --> 00:09:22.430\nCan I do it again?\n\n161\n00:09:24.214 --> 00:09:24.851\nI can.\n\n162\n00:09:24.851 --> 00:09:28.133\nSo I can iterate over it multiple times.\n\n163\n00:09:28.133 --> 00:09:31.980\nThat's awesome.\n\n164\n00:09:31.980 --> 00:09:36.500\nThat negative one, so resetting\nthat at the end in the under next.\n\n165\n00:09:36.500 --> 00:09:38.950\nSo I can go to iterables.\n\n166\n00:09:41.070 --> 00:09:45.560\nThe reason I reset that is the filing.\n\n167\n00:09:45.560 --> 00:09:51.007\nSo taco, or for t in taco.\n\n168\n00:09:53.868 --> 00:09:55.860\nAnd, okay, looks good.\n\n169\n00:09:55.860 --> 00:09:56.720\nIt works.\n\n170\n00:09:58.520 --> 00:10:00.110\nAnd it didn't run again.\n&gt;&gt; Uh-uh.\n\n171\n00:10:00.110 --> 00:10:01.766\n&gt;&gt; And that's because the index is always\n\n172\n00:10:01.766 --> 00:10:03.180\ngoing to raise a stop iteration.\n\n173\n00:10:03.180 --> 00:10:03.860\nThat's saying in.\n\n174\n00:10:03.860 --> 00:10:07.782\nA lot of times generators and iterators,\n\n175\n00:10:07.782 --> 00:10:12.497\nlike in Python,\nthey're a one time run through.\n\n176\n00:10:12.497 --> 00:10:16.886\nSo it depends on whether you want to one\ntime be able to iterate through it and\n\n177\n00:10:16.886 --> 00:10:17.660\nit's done.\n\n178\n00:10:18.850 --> 00:10:22.065\nOr if you want to be able to start at\nthe beginning and iterate multiple times.\n\n179\n00:10:22.065 --> 00:10:25.780\nSo list, you can iterate multiple times.\n\n180\n00:10:25.780 --> 00:10:28.810\nGenerators, which are kind of lazy,\n\n181\n00:10:28.810 --> 00:10:32.950\nthey only actually do stuff when\nyou iterate through them, well,\n\n182\n00:10:32.950 --> 00:10:38.269\nyou only get one pass at them,\nunless you do some other tricks.\n\n183\n00:10:38.269 --> 00:10:42.850\nAnd this comes in handy,\nbecause effectively, what's happening is,\n\n184\n00:10:42.850 --> 00:10:47.160\nduring the for loop,\nI'm able to do something like this.\n\n185\n00:10:47.160 --> 00:10:49.332\nSo I have a taco.\n\n186\n00:10:49.332 --> 00:10:50.247\nI'm gonna say next.\n\n187\n00:10:50.247 --> 00:10:52.493\nNext is a built-in method.\n\n188\n00:10:52.493 --> 00:10:55.090\nThat's calling it the under next method.\n\n189\n00:10:55.090 --> 00:10:58.240\nThat return is what's\ngoing through in the for\n\n190\n00:10:58.240 --> 00:11:00.980\nloop, that's what's being\nassigned to that value.\n\n191\n00:11:00.980 --> 00:11:07.629\nNow if I do next, on the taco, tomatoes,\nif I do next, I get a stop iteration.\n\n192\n00:11:07.629 --> 00:11:10.390\nIt actually breaks here, but\nin the for loop, that for\n\n193\n00:11:10.390 --> 00:11:12.940\nloop goes a got you,\nI know what to do now.\n\n194\n00:11:12.940 --> 00:11:14.180\nWe're at the end.\n\n195\n00:11:14.180 --> 00:11:18.880\nBut if I try to do that again,\nI just get StopIteration every time.\n\n196\n00:11:18.880 --> 00:11:24.760\nSo that's why the for loop doesn't\nrun if I do not reset upon it.\n\n197\n00:11:24.760 --> 00:11:31.820\nSo if I come back here and\n\n198\n00:11:31.820 --> 00:11:37.850\ndo that, now we're back to I can run\nnext(taco), which would be like iterating.\n\n199\n00:11:37.850 --> 00:11:38.900\nI'm doing this manually.\n\n200\n00:11:38.900 --> 00:11:40.930\nI'm running through the for loop.\n\n201\n00:11:40.930 --> 00:11:43.151\nGood, stop iteration.\n\n202\n00:11:43.151 --> 00:11:46.115\nNotice, and then I cycle back through.\n\n203\n00:11:46.115 --> 00:11:50.191\nSo you have to be careful if you're\nimplementing custom logic here\n\n204\n00:11:50.191 --> 00:11:52.460\njust because these things do occur.\n\n205\n00:11:53.470 --> 00:11:55.059\nNow, Mike, I have to ask you.\n\n206\n00:11:55.059 --> 00:11:57.239\nI wanna get your opinion on this.\n\n207\n00:11:58.250 --> 00:12:02.411\nLet's hop into this iterables here,\nthis dunder next.\n\n208\n00:12:02.411 --> 00:12:06.754\nDo you find it odd just to return\nthe object itself for dunder iter, and\n\n209\n00:12:06.754 --> 00:12:10.697\nthen have to implement a dunder next?\n&gt;&gt; A little bit.\n\n210\n00:12:10.697 --> 00:12:11.985\n&gt;&gt; It's kind of a weird pattern,\n\n211\n00:12:11.985 --> 00:12:13.230\nlike, why am I returning it?\n\n212\n00:12:13.230 --> 00:12:15.640\nWhy isn't that just the default?\n\n213\n00:12:15.640 --> 00:12:20.680\nWell, I don't actually\nhave to have dunder next.\n\n214\n00:12:20.680 --> 00:12:23.641\nWhat I can do and-\n&gt;&gt; Cuz you got to\n\n215\n00:12:23.641 --> 00:12:26.581\nsomehow have that same logic that's\ngoing on within your next, right?\n\n216\n00:12:26.581 --> 00:12:27.123\n&gt;&gt; Yes, so\n\n217\n00:12:27.123 --> 00:12:31.850\nthe next has to return an iterator which\nhas to have a dunder next method on\n\n218\n00:12:31.850 --> 00:12:32.900\nit.\n&gt;&gt; Okay.\n\n219\n00:12:32.900 --> 00:12:33.770\n&gt;&gt; It doesn't mean that it\n\n220\n00:12:33.770 --> 00:12:36.030\nhas to be this class itself.\n\n221\n00:12:36.030 --> 00:12:43.526\nSo what I can do is here I want to T for\nt in self.toppings.\n\n222\n00:12:43.526 --> 00:12:49.070\nI've now returned a generator\nthat is an iterator,\n\n223\n00:12:49.070 --> 00:12:52.630\nall right, I can iterate over, excuse me,\nthat is an iterable, and has a dunder net.\n\n224\n00:12:53.690 --> 00:13:00.653\nSo I didn't return self, I returned\na reference to an object that is iterable.\n\n225\n00:13:00.653 --> 00:13:06.936\nSo if I come back in here and say I,\nand what did I call, iterables.\n\n226\n00:13:06.936 --> 00:13:14.030\nSo four t in taco then print e.\n\n227\n00:13:14.030 --> 00:13:15.430\nAnd there we go.\n\n228\n00:13:15.430 --> 00:13:19.800\nWhen we do this, though,\n\n229\n00:13:19.800 --> 00:13:23.960\nwhy is that generators are one pass.\n\n230\n00:13:23.960 --> 00:13:27.900\nThat's because every time I run through\na for loop, it returns a new version.\n\n231\n00:13:27.900 --> 00:13:30.886\nIt returns another generator object.\n\n232\n00:13:30.886 --> 00:13:38.411\nSo if I go, next, or better yet,\nif I say, taco._iter.\n\n233\n00:13:38.411 --> 00:13:40.877\nAnd you can call the methods like this,\n\n234\n00:13:40.877 --> 00:13:44.560\ntypically it's meant to be\nhidden away to discourage it.\n\n235\n00:13:44.560 --> 00:13:47.220\nBut as we've seen you can do this.\n\n236\n00:13:47.220 --> 00:13:51.690\nNotice I get a generator object\nfrom the taco iter method.\n\n237\n00:13:51.690 --> 00:13:55.505\nAnd then I can iterate\nthrough the generator itself.\n\n238\n00:13:55.505 --> 00:13:59.930\nSo that's handy cuz then I don't\nneed that custom dunder next.\n\n239\n00:14:01.230 --> 00:14:06.240\nThe time when I would use a dunder\nnet [COUGH] is let's say that\n\n240\n00:14:06.240 --> 00:14:11.610\nI want to iterate through something that\nI want to reset, or I need custom logic.\n\n241\n00:14:11.610 --> 00:14:16.090\nOr, well, if it's at the end,\nthen I want to start doubling.\n\n242\n00:14:16.090 --> 00:14:22.360\nOr you can technically\nmake infinite iterators or\n\n243\n00:14:22.360 --> 00:14:25.280\ninfinitely iterable where it just\ngoes over and over and over again.\n\n244\n00:14:25.280 --> 00:14:28.672\nObviously we wouldn't wanna put those on\na for loop cuz then they're just gonna run\n\n245\n00:14:28.672 --> 00:14:30.173\nforever.\n&gt;&gt; [LAUGH]\n\n246\n00:14:30.173 --> 00:14:32.000\n&gt;&gt; But there are times where you would\n\n247\n00:14:32.000 --> 00:14:34.150\nwant custom logic there.\n\n248\n00:14:34.150 --> 00:14:37.646\nBut if we just wanna top things out,\nI would probably do dander iter,\n\n249\n00:14:37.646 --> 00:14:39.527\nreturn a generator and just be done.\n\n250\n00:14:39.527 --> 00:14:44.840\nThe downside is you\nalways got a generator.\n\n251\n00:14:44.840 --> 00:14:47.800\nYou don't necessarily have access to.\n\n252\n00:14:47.800 --> 00:14:50.440\nYou can't implement custom logic\n\n253\n00:14:50.440 --> 00:14:53.580\nwithin the generator unless you\nget crazy generator expressions.\n\n254\n00:14:53.580 --> 00:14:55.680\nNow, along with being iterable.\n\n255\n00:14:55.680 --> 00:14:56.860\nI think of iterable.\n\n256\n00:14:56.860 --> 00:15:00.680\nI know Mike does a lot of\nmicroprocessor type things.\n\n257\n00:15:00.680 --> 00:15:03.480\nYou probably think of arrays and\nthings like that.\n\n258\n00:15:03.480 --> 00:15:04.750\n&gt;&gt; That was the first thing I thought of\n\n259\n00:15:04.750 --> 00:15:06.320\nwhen I saw the title of this show.\n&gt;&gt; Yeah,\n\n260\n00:15:06.320 --> 00:15:11.310\nso arrays, okay, and Mike and\nI have actually talked.\n\n261\n00:15:11.310 --> 00:15:13.610\nThere are times we're getting\n\n262\n00:15:13.610 --> 00:15:16.920\nhow many things do I have in an array\nis a little difficult for him.\n\n263\n00:15:16.920 --> 00:15:21.390\nBut for me in Python world for\na list how many things are in there?\n\n264\n00:15:21.390 --> 00:15:23.570\nYou can get the length.\n\n265\n00:15:23.570 --> 00:15:26.720\nAnd you go that's how many\niterations I would run.\n\n266\n00:15:26.720 --> 00:15:28.260\nSo there tends to be a corresponding.\n\n267\n00:15:28.260 --> 00:15:29.730\nYou don't have to follow a convention.\n\n268\n00:15:29.730 --> 00:15:32.814\nI recommend it,\nbecause otherwise it's confusing.\n\n269\n00:15:32.814 --> 00:15:36.790\nBut okay, so all right.\n\n270\n00:15:36.790 --> 00:15:37.850\nI have how many things?\n\n271\n00:15:37.850 --> 00:15:38.940\nThat's how many times the for\n\n272\n00:15:38.940 --> 00:15:42.440\nloop is going to run if I\niterate over said object.\n\n273\n00:15:42.440 --> 00:15:45.040\nIf I come back into here and I look.\n\n274\n00:15:46.170 --> 00:15:52.583\nWell, here I don't see anything but\nmaybe if the dunder iter I put in there.\n\n275\n00:15:53.730 --> 00:15:55.520\nMaybe, maybe I can get it to work.\n\n276\n00:15:55.520 --> 00:15:59.510\nSo, python3 -i iterables.\n\n277\n00:15:59.510 --> 00:16:01.757\nAnd I say the length of taco.\n\n278\n00:16:01.757 --> 00:16:02.560\nNo.\n\n279\n00:16:02.560 --> 00:16:10.100\n[LAUGH] The object of time taco\nhas no length, effectively.\n\n280\n00:16:10.100 --> 00:16:12.530\nIt's iterable, but\nit doesn't have a length, that's weird.\n\n281\n00:16:12.530 --> 00:16:16.170\nWell because this is a generator\nexpression, that makes sense.\n\n282\n00:16:16.170 --> 00:16:20.200\nAnd it's not just because we're returning\na generator expression that that occurs.\n\n283\n00:16:20.200 --> 00:16:25.410\nIf I call length on a generator\nexpression, so if I say len of taco.iter,\n\n284\n00:16:25.410 --> 00:16:30.170\nthat also does not\n\n285\n00:16:30.170 --> 00:16:34.140\nhave a length cuz a generator can\nbe infinite, so there's nothing.\n\n286\n00:16:34.140 --> 00:16:38.370\nBut if it was a list or a dictionary or\na set, those are finite and\n\n287\n00:16:38.370 --> 00:16:39.230\nthose do have a length.\n\n288\n00:16:40.240 --> 00:16:44.270\nWell, what's backing up the iteration\nportion of this object.\n\n289\n00:16:45.330 --> 00:16:46.480\nWell, it's the list of toppings.\n\n290\n00:16:47.600 --> 00:16:49.510\nSo really when I call\nthe length on a taco,\n\n291\n00:16:49.510 --> 00:16:50.940\nI should get how many toppings are bad.\n\n292\n00:16:50.940 --> 00:16:53.900\nBecause when I iterate a topping,\nI get a topping, right?\n\n293\n00:16:53.900 --> 00:16:55.680\nThere's a correspondence there.\n\n294\n00:16:55.680 --> 00:16:56.180\nWell.\n\n295\n00:16:58.771 --> 00:17:02.176\nThunder lin.\n\n296\n00:17:05.356 --> 00:17:07.850\nWhoa, not tabs.\n\n297\n00:17:07.850 --> 00:17:12.340\nAnd all it should do is return\nthe length of this thing.\n\n298\n00:17:12.340 --> 00:17:16.190\nWell, I'm just gonna return self.toppings.\n\n299\n00:17:16.190 --> 00:17:18.430\nCuz that's what I'm iterating\nover when I iterate over a taco.\n\n300\n00:17:19.470 --> 00:17:24.415\nSo now if we come back and\nwe say the len of the taco is two,\n\n301\n00:17:24.415 --> 00:17:29.580\ncuz it has two tacos.\n&gt;&gt; So that's another one of those.\n\n302\n00:17:29.580 --> 00:17:32.530\nThose kinda go hand-in-hand, and\nit's not technically has to do it.\n\n303\n00:17:32.530 --> 00:17:34.870\nBut when I think of\nlength of a collection,\n\n304\n00:17:34.870 --> 00:17:36.490\nI think of iterating over a collection.\n\n305\n00:17:36.490 --> 00:17:40.370\nAnd Mike and I have talked about this,\ncuz in other languages,\n\n306\n00:17:40.370 --> 00:17:42.691\nit gets a little hectic, doesn't it, Mike?\n&gt;&gt; It is very yes.\n\n307\n00:17:42.691 --> 00:17:43.576\n[LAUGH]\n&gt;&gt; So\n\n308\n00:17:43.576 --> 00:17:49.140\nthat's one of those things where I think\nof those as going hand-in-hand, and well,\n\n309\n00:17:49.140 --> 00:17:54.170\ninterestingly enough, there's one other\nthing that you need to be aware of that\n\n310\n00:17:54.170 --> 00:17:59.810\nyou can do as far as being able\nto iterate over an object.\n\n311\n00:17:59.810 --> 00:18:03.478\nIn python, I can ask for\n\n312\n00:18:03.478 --> 00:18:08.078\nthe sorted or reverse first.\n\n313\n00:18:08.078 --> 00:18:12.340\nI can say give me the reversed version so\nI can iterate over it backwards.\n\n314\n00:18:12.340 --> 00:18:16.700\nAnd that's a lot easier than creating\na C style for loop where I go start at\n\n315\n00:18:16.700 --> 00:18:22.060\nthe end and then while it's greater\nthan zero and go backwards.\n\n316\n00:18:22.060 --> 00:18:24.910\nAnd those are really prone to errors.\n\n317\n00:18:24.910 --> 00:18:26.300\nIt's just nice I can say.\n\n318\n00:18:26.300 --> 00:18:27.960\nFor T-N reversed taco.\n\n319\n00:18:27.960 --> 00:18:31.970\nRight, you're like, it's probably\nthe reverse of what it would be otherwise.\n\n320\n00:18:31.970 --> 00:18:36.850\nWell this is not uncommonly used,\nbut it is available to us.\n\n321\n00:18:36.850 --> 00:18:38.890\nAnd, Layne,\nI'm gonna call you out on the spot.\n\n322\n00:18:38.890 --> 00:18:43.280\nIf I say, reversed,\nwhat method do you think I'm going to\n\n323\n00:18:43.280 --> 00:18:46.280\noverload in order to get the reversed?\n&gt;&gt; Let's see.\n\n324\n00:18:46.280 --> 00:18:51.080\nDunderRev.\n&gt;&gt; That's a good guess.\n\n325\n00:18:51.080 --> 00:18:53.260\nLet's see if you're right.\n&gt;&gt; [LAUGH]\n\n326\n00:18:53.260 --> 00:18:54.600\n&gt;&gt; So, I don't know,\n\n327\n00:18:54.600 --> 00:18:56.630\nsometimes I like being dramatic, Mike.\n&gt;&gt; Right,\n\n328\n00:18:56.630 --> 00:18:57.370\nYeah?\n&gt;&gt; You?\n\n329\n00:18:57.370 --> 00:18:58.140\n&gt;&gt; Let's see.\n\n330\n00:18:58.140 --> 00:18:59.290\nThe suspense is mounting.\n\n331\n00:19:02.150 --> 00:19:03.700\nReversed.\n&gt;&gt; Yeah.\n\n332\n00:19:03.700 --> 00:19:07.070\n&gt;&gt; Actually use the whole word for once.\n\n333\n00:19:07.070 --> 00:19:10.910\n&gt;&gt; I know, so full disclosure, I wouldn't\n\n334\n00:19:10.910 --> 00:19:13.830\nprobably just guessed rev as well.\n&gt;&gt; [INAUDIBLE]\n\n335\n00:19:13.830 --> 00:19:14.330\n&gt;&gt; Yeah.\n\n336\n00:19:15.700 --> 00:19:17.190\n&gt;&gt; Hm, that's weird.\n\n337\n00:19:17.190 --> 00:19:20.480\nBut a lot of times if there\nis a corresponding function,\n\n338\n00:19:20.480 --> 00:19:23.070\nreverse is a function that\nis top level built in.\n\n339\n00:19:23.070 --> 00:19:25.840\nThen the dunder method\nis that name as well.\n\n340\n00:19:25.840 --> 00:19:26.760\n&gt;&gt; Post that name, got you.\n\n341\n00:19:26.760 --> 00:19:27.892\n&gt;&gt; Dunder.iter,\n\n342\n00:19:27.892 --> 00:19:32.510\nthere's an iter function and\nit will actually give you that itter.\n\n343\n00:19:32.510 --> 00:19:35.610\nSo I called it was a dunder iter just so\nyou know but\n\n344\n00:19:35.610 --> 00:19:40.140\nI can call iter(taco) and\nit'll give me that generator back.\n\n345\n00:19:40.140 --> 00:19:45.430\nSo there's almost always a function\nassociated with these dunder methods.\n\n346\n00:19:45.430 --> 00:19:50.180\nSo this one gets a little more\ncomplicated though because reversed\n\n347\n00:19:51.240 --> 00:19:55.690\nhas to,\nyou would think that it would be iter.\n\n348\n00:19:55.690 --> 00:19:58.940\nAlright, well it would be very similar,\nwell what would be the reversed?\n\n349\n00:19:58.940 --> 00:20:02.814\nIt would be like the next, or return.\n\n350\n00:20:02.814 --> 00:20:07.050\nAnd then I could implement it like return,\nlike so.\n\n351\n00:20:07.050 --> 00:20:09.640\nLike a back index.\n\n352\n00:20:09.640 --> 00:20:14.980\nAnd because I have length, I know what the\nback index is, it's the length minus one.\n\n353\n00:20:14.980 --> 00:20:17.240\nLet's do it a little differently here.\n\n354\n00:20:17.240 --> 00:20:21.826\nFor I, and\nsome of you C programmers are like,\n\n355\n00:20:21.826 --> 00:20:24.740\nhe's doing it.\n&gt;&gt; [LAUGH]\n\n356\n00:20:24.740 --> 00:20:27.585\n&gt;&gt; So, because I've already implemented\n\n357\n00:20:27.585 --> 00:20:33.450\ndunder.len, I can say the length\nof the object itself, minus\n\n358\n00:20:33.450 --> 00:20:37.420\n1 because it's less than that length,\n&gt;&gt; And\n\n359\n00:20:37.420 --> 00:20:42.330\nI want to go to negative one and\nI want to go backwards by one.\n\n360\n00:20:42.330 --> 00:20:44.680\nSo this kind of C style like but\n\n361\n00:20:44.680 --> 00:20:50.650\nI still find this a little more readable\nthan standard C style four loops.\n\n362\n00:20:50.650 --> 00:20:57.194\nAnd I can say yield self.toppings.\n\n363\n00:20:59.830 --> 00:21:01.270\nI, all right?\n\n364\n00:21:01.270 --> 00:21:03.190\nSo the yield is gonna\ncreate a generator for me.\n\n365\n00:21:03.190 --> 00:21:04.470\nIt's a little more custom logic.\n\n366\n00:21:06.060 --> 00:21:11.080\nAnd I can say Python 3-i iterables an so\n\n367\n00:21:11.080 --> 00:21:15.755\nfor t in taco print t\n\n368\n00:21:15.755 --> 00:21:21.960\nworks that iter just as\na reminder I call dunder iter but\n\n369\n00:21:21.960 --> 00:21:25.120\nthis will give me that iterator object,\nright.\n\n370\n00:21:25.120 --> 00:21:29.400\nSo let's see, iter or\n\n371\n00:21:29.400 --> 00:21:34.540\ntn iter echo print t,\n\n372\n00:21:34.540 --> 00:21:39.940\ntomatoes that's because it gave\nme back that first topping.\n\n373\n00:21:39.940 --> 00:21:40.960\nThat's kind of weird.\n\n374\n00:21:40.960 --> 00:21:45.900\nAnd well hm let's see\n\n375\n00:21:45.900 --> 00:21:51.060\nhere the reverse for t in reverse.\n\n376\n00:21:52.130 --> 00:21:58.029\nOkay well reverse I forgot what the object\nname was there for a second Mike.\n\n377\n00:21:59.280 --> 00:22:03.270\nTomato sour cream, it is sour cream\ntomato, so just reverse the order.\n\n378\n00:22:03.270 --> 00:22:04.420\n&gt;&gt; Very neat.\n\n379\n00:22:04.420 --> 00:22:08.496\n&gt;&gt; So, that's one way the, being lazy,\n\n380\n00:22:11.201 --> 00:22:14.102\nAnd iterables.\n\n381\n00:22:19.190 --> 00:22:27.290\nI could just return the self.toppings,\nBackwards, just reverse it.\n\n382\n00:22:27.290 --> 00:22:28.840\nSo nice little pipeline trick.\n\n383\n00:22:28.840 --> 00:22:33.800\nLet's make sure it works cuz that\nwas kind of an on the fly sometimes\n\n384\n00:22:33.800 --> 00:22:37.891\nyou're right and you're like, we made that\nway more complicated than it needed to be.\n\n385\n00:22:37.891 --> 00:22:38.487\n&gt;&gt; [LAUGH]\n\n386\n00:22:38.487 --> 00:22:39.396\n&gt;&gt; So if we do this and\n\n387\n00:22:39.396 --> 00:22:40.758\nwe say four t in reversed.\n\n388\n00:22:40.758 --> 00:22:47.230\nTaco, print t, and there we go,\nit's still reverse.\n\n389\n00:22:47.230 --> 00:22:49.840\nSo, reverse is one of those weird things.\n\n390\n00:22:49.840 --> 00:22:54.010\nNow, I do want to double check something,\n\n391\n00:22:55.310 --> 00:22:59.696\nthat iter, that I got back.\n&gt;&gt; Mm-hm.\n\n392\n00:22:59.696 --> 00:23:00.529\n&gt;&gt; Right.\n\n393\n00:23:00.529 --> 00:23:01.208\nIter.\n\n394\n00:23:01.208 --> 00:23:08.045\nSo next of, let's call that the iterator.\n\n395\n00:23:08.045 --> 00:23:12.810\nIter t for taco, oterator.\n\n396\n00:23:12.810 --> 00:23:14.200\nOkay, there we go.\n\n397\n00:23:15.400 --> 00:23:20.720\nAnd next, the taco, excuse me,\nthe next on the iterator.\n\n398\n00:23:20.720 --> 00:23:22.270\nThere we go.\n\n399\n00:23:22.270 --> 00:23:27.460\nI must've accidentally grabbed the next,\nthere was a weird print out,\n\n400\n00:23:27.460 --> 00:23:29.835\nI was like, is that, hold on a second.\n&gt;&gt; [CROSSTALK] Each character.\n\n401\n00:23:29.835 --> 00:23:32.171\n&gt;&gt; Remember when we got each character and\n\n402\n00:23:32.171 --> 00:23:35.357\nI already cleared the screen\nwhich is unfortunate but\n\n403\n00:23:35.357 --> 00:23:39.745\nI know that inter should've gave me\nthat iterator back from dunder iter,\n\n404\n00:23:39.745 --> 00:23:43.989\nI was like that's wrong and I think it\nmay have been because I was calling\n\n405\n00:23:43.989 --> 00:23:48.210\nthat in-line instead of caching that,\nso had some weirdness there.\n\n406\n00:23:48.210 --> 00:23:50.180\nAnd well, those things happen.\n\n407\n00:23:50.180 --> 00:23:53.080\nThe iter function gives you\nwhatever are done to your\n\n408\n00:23:53.080 --> 00:23:55.960\niterates next on that blah blah blah.\n\n409\n00:23:55.960 --> 00:24:01.500\nSo, in reverse we have limit,\nwe have iter, and we have under next.\n\n410\n00:24:02.730 --> 00:24:04.770\nIf you know those,\nyou can make things iterable and\n\n411\n00:24:04.770 --> 00:24:08.810\nsome of the associated\nattributes of being iterable.\n\n412\n00:24:08.810 --> 00:24:11.030\nDo you have to have reversed?\n\n413\n00:24:11.030 --> 00:24:12.610\nNo, but maybe you need it.\n\n414\n00:24:12.610 --> 00:24:14.210\nDo you have to have length?\n\n415\n00:24:14.210 --> 00:24:16.510\nNo, but\nit might make sense in the context.\n\n416\n00:24:16.510 --> 00:24:18.550\nEven need dunder next?\n\n417\n00:24:18.550 --> 00:24:23.748\nNot really if your dunder iter returns\nsomething that is iterable as well.\n\n418\n00:24:23.748 --> 00:24:25.669\nAll right?\n\n419\n00:24:25.669 --> 00:24:31.540\nIt's kind of a weird maze that you have to\nwalk through, but any custom object can\n\n420\n00:24:31.540 --> 00:24:37.100\nbecome iterable and be used in the Python\nfor loop so I find it very handy and it\n\n421\n00:24:37.100 --> 00:24:41.040\nwas incredibly powerful for time to time.\n&gt;&gt; All right Justin, well thank you for\n\n422\n00:24:41.040 --> 00:24:45.050\nguiding us through that maze of\nlooking at our objects as iterables.\n\n423\n00:24:45.050 --> 00:24:46.170\nWe appreciate that.\n\n424\n00:24:46.170 --> 00:24:49.340\nHope everybody out there enjoys watching\nthis one signing off for DevProTV,\n\n425\n00:24:49.340 --> 00:24:51.950\nI've been your host Mike Roderick.\n&gt;&gt; And I'm Justin Nelson.\n\n426\n00:24:51.950 --> 00:24:55.695\n&gt;&gt; And we'll see you next time.\n\n427\n00:24:55.695 --> 00:24:59.730\n[MUSIC]\n\n",
          "vimeoId": "251682982"
        },
        {
          "description": "In this episode, Justin and Zach explore how you can replicate dictionary-like behavior when creating a class. Justin explores the implementation of the \\_\\_getitem\\_\\_ method in order to bring access of values by keys just like a dictionary.",
          "length": "1016",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-2-1-getting_items-012218-PGM.00_18_57_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-2-1-getting_items-012218-PGM.00_18_57_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-2-1-getting_items-012218-PGM.00_18_57_12.Still001-sm.jpg",
          "title": "Getting Items",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.253 --> 00:00:13.521\nHello again, thank you for\n\n3\n00:00:13.521 --> 00:00:16.284\nwatching DEVPro.TV,\nhelping you learn wherever you go.\n\n4\n00:00:16.284 --> 00:00:17.820\nI'm your host, Zach Memos.\n\n5\n00:00:17.820 --> 00:00:21.186\nAs we continue on with Python Data Model,\nglad to be aboard,\n\n6\n00:00:21.186 --> 00:00:23.301\nglad to be working with Justin again.\n\n7\n00:00:23.301 --> 00:00:26.284\nWe're gonna be getting some items today,\nbut Justin, how are you doing?\n\n8\n00:00:26.284 --> 00:00:28.359\n&gt;&gt; I am doing fantastic Zach,\n\n9\n00:00:28.359 --> 00:00:31.101\nand how are you today?\n&gt;&gt; I'm excited to be with you again.\n\n10\n00:00:31.101 --> 00:00:35.018\nAnd the Python Data Model's a great topic,\ngreat course.\n\n11\n00:00:35.018 --> 00:00:37.250\nAnd I'm wondering,\nwhat about getting items.\n\n12\n00:00:37.250 --> 00:00:37.896\nWhat is getting items?\n\n13\n00:00:37.896 --> 00:00:39.437\nWhat are we doing?\n&gt;&gt; Getting items,\n\n14\n00:00:39.437 --> 00:00:42.879\nthat is an interesting,\nas I have said, sometimes\n\n15\n00:00:42.879 --> 00:00:45.907\ntitles, they're ment to build allure.\n&gt;&gt; A little\n\n16\n00:00:45.907 --> 00:00:46.472\nbit of mystique.\n&gt;&gt; Or\n\n17\n00:00:46.472 --> 00:00:50.240\nmaybe we just don't have enough ram like,\nwe're getting out of blah, blah, blah.\n\n18\n00:00:50.240 --> 00:00:54.300\nSo let's step back,\nif we've programmed in Python, whatsoever.\n\n19\n00:00:54.300 --> 00:00:57.336\nAnd kind of the assumption\nof the series is you've been\n\n20\n00:00:57.336 --> 00:00:58.686\nprogramming-\n&gt;&gt; Right.\n\n21\n00:00:58.686 --> 00:01:00.305\n&gt;&gt; In python for a little bit, and\n\n22\n00:01:00.305 --> 00:01:04.050\nnow you really wanna start diving\nunder the covers so to speak, right?\n\n23\n00:01:05.150 --> 00:01:09.597\nAnd part of that is, well there's this\none data structure called a dictionary.\n\n24\n00:01:09.597 --> 00:01:12.526\nOr I can give it key value pairs\nthat has a wonderful lookup time,\n\n25\n00:01:12.526 --> 00:01:13.990\nit's still iterable.\n\n26\n00:01:13.990 --> 00:01:19.633\nBut the key value pair lookups,\nso if I say dictionary bracket,\n\n27\n00:01:19.633 --> 00:01:23.931\nquotes, cheese and\nI might get GoodAh, right?\n\n28\n00:01:23.931 --> 00:01:26.498\nIf it's a dictionary of cheeses-\n&gt;&gt; [LAUGH]\n\n29\n00:01:26.498 --> 00:01:27.678\n&gt;&gt; Or a dictionary of foods.\n\n30\n00:01:27.678 --> 00:01:32.552\nThat lookup is actually,\nyou can bring that over to classes, so\n\n31\n00:01:32.552 --> 00:01:34.910\ncustom classes that we write.\n\n32\n00:01:34.910 --> 00:01:39.038\nSo a custom object may have\na dictionary like lookup.\n\n33\n00:01:39.038 --> 00:01:44.230\nSo when you get an item, it's gonna behave\njust like that, that is getting an item.\n\n34\n00:01:44.230 --> 00:01:49.943\nIf I say, dictionary, brackets, quotes,\ncheese, that's getting the item cheese is\n\n35\n00:01:49.943 --> 00:01:55.450\nactually getting the item associated with\nthe key cheese and then sending that back.\n\n36\n00:01:55.450 --> 00:01:58.838\nSo you can implement then\nkind of with custom logic or\n\n37\n00:01:58.838 --> 00:02:02.740\nmaybe you just need it for\na particular part of a class.\n\n38\n00:02:02.740 --> 00:02:05.940\nOr maybe you need different\ndata structures underneath to\n\n39\n00:02:05.940 --> 00:02:07.740\nfulfill other requirements.\n\n40\n00:02:07.740 --> 00:02:09.920\nAnd well,\nthat's what we're ultimately gonna do,\n\n41\n00:02:09.920 --> 00:02:12.300\nis we're gonna build\na dictionary like thing.\n\n42\n00:02:12.300 --> 00:02:16.340\nFull disclosure,\nthis has some possible performance issues\n\n43\n00:02:16.340 --> 00:02:21.250\nthe way we've implemented it here\nthat may not work for you, okay?\n\n44\n00:02:21.250 --> 00:02:26.230\nSo dictionary behind the scenes\nactually uses some pretty slick tricks.\n\n45\n00:02:26.230 --> 00:02:29.623\nAnd if you've ever tried to put\na list as a key on a dictionary and\n\n46\n00:02:29.623 --> 00:02:32.449\nit says unhashable type,\nthere's a reason being.\n\n47\n00:02:32.449 --> 00:02:35.564\nIt's because they build like a hash\ntable and all of this fun stuff.\n\n48\n00:02:35.564 --> 00:02:40.560\nSo that's what we're gonna do,\nwe're gonna keep it fairly simple.\n\n49\n00:02:40.560 --> 00:02:44.062\nBut let's go ahead and take a look\nat the screen here, and we're back.\n\n50\n00:02:44.062 --> 00:02:47.579\nThere was a lot of talk in there,\nbut I just really wanna drive home,\n\n51\n00:02:47.579 --> 00:02:50.440\nif we come into Python 3 and\nwe say x =, you know what?\n\n52\n00:02:50.440 --> 00:02:56.047\ndictionary, and\nlet's just stay with cheese.\n\n53\n00:02:56.047 --> 00:03:02.690\nExcuse me, no quotes there,\n(cheese= \"gouda\") just like so.\n\n54\n00:03:02.690 --> 00:03:08.598\nThen x, there's our dictionary with\nthe key of cheese and the value of gouda.\n\n55\n00:03:08.598 --> 00:03:12.550\nSo if I say,\n(\"cheese\") well I get back gouda.\n\n56\n00:03:13.930 --> 00:03:17.890\nNow if I to do that on a custom object,\nI don't get that behavior,\n\n57\n00:03:17.890 --> 00:03:19.906\nunless I subclass a dictionary.\n\n58\n00:03:19.906 --> 00:03:24.540\nBut what if I want something other than\ndictionary like key look-ups, right?\n\n59\n00:03:24.540 --> 00:03:28.496\nI wanna do additional validation or maybe\nI have different data structures, and\n\n60\n00:03:28.496 --> 00:03:30.075\nthen things get a little wonky.\n\n61\n00:03:30.075 --> 00:03:36.858\nBut luckily Python affords us\nthe capability of well, doing that.\n\n62\n00:03:36.858 --> 00:03:39.760\nNow, we're gonna look at getting items for\nthe most part.\n\n63\n00:03:39.760 --> 00:03:42.540\nThere's a couple other\nthings that we'll touch on\n\n64\n00:03:42.540 --> 00:03:45.330\nthat really make sense in this context,\nokay?\n\n65\n00:03:45.330 --> 00:03:49.950\nSo I have an inventory class, and\nI've pre-made a little bit of this code.\n\n66\n00:03:49.950 --> 00:03:52.193\nNow if you're like, I wanna get\nthis down so I can follow along.\n\n67\n00:03:52.193 --> 00:03:54.580\nJust go ahead and pause and\n\n68\n00:03:54.580 --> 00:03:56.372\nnow you're back.\n&gt;&gt; [LAUGH]\n\n69\n00:03:56.372 --> 00:03:57.087\n&gt;&gt; And that way,\n\n70\n00:03:57.087 --> 00:03:59.701\nyou can move along with us, all right.\n&gt;&gt; It's magical, this TV thing.\n\n71\n00:03:59.701 --> 00:04:00.394\n&gt;&gt; I know, it's magical.\n\n72\n00:04:00.394 --> 00:04:01.594\n&gt;&gt; It's the craziest thing.\n\n73\n00:04:01.594 --> 00:04:07.310\nYou probably thought you paused there just\na second ago, but no, that was just me.\n\n74\n00:04:07.310 --> 00:04:11.500\nSo I have this init function,\nwhere I've set up some products, and\n\n75\n00:04:11.500 --> 00:04:12.870\nI've set up corresponding process.\n\n76\n00:04:12.870 --> 00:04:15.845\nSo I have kind of this one to one, right?\n\n77\n00:04:15.845 --> 00:04:17.890\nCorrespondence between lists.\n\n78\n00:04:17.890 --> 00:04:22.840\nNow this is where the performance\nimplications maybe, if I had a million of\n\n79\n00:04:22.840 --> 00:04:29.010\nthese then what we're going to do will\nnot necessarily be the best performance.\n\n80\n00:04:29.010 --> 00:04:33.940\nLike lookups, will not be great because\nI'm having to traverse a list to get back\n\n81\n00:04:33.940 --> 00:04:35.546\nanother part of the list.\n\n82\n00:04:35.546 --> 00:04:37.349\nSo these are corresponding list,\n\n83\n00:04:37.349 --> 00:04:40.700\nalso this is sometimes a little\nharder to reason about.\n\n84\n00:04:40.700 --> 00:04:45.297\nBut I think it helps give a simplified\nversion of what happens behind the scenes\n\n85\n00:04:45.297 --> 00:04:46.491\nin the dictionary.\n\n86\n00:04:46.491 --> 00:04:51.228\nWithout the complexities so, and then\nI also have a repro method that I have\n\n87\n00:04:51.228 --> 00:04:55.640\nanother stream, so all it's gonna\ndo is print out an inventory.\n\n88\n00:04:55.640 --> 00:04:58.134\nAnd actually let's just see what\nthis inventory prints out here.\n\n89\n00:04:58.134 --> 00:05:00.718\nSo I'm gonna say python 3-i, and\n\n90\n00:05:00.718 --> 00:05:05.380\njust as a reminder this is very\nmuch python 3 specific, right?\n\n91\n00:05:05.380 --> 00:05:10.629\n3.5, 3.4, and above,\npreferably 3.5 at least.\n\n92\n00:05:10.629 --> 00:05:14.180\nSo if I go inventory,\njust like then I have my repr.\n\n93\n00:05:14.180 --> 00:05:19.057\nWell my inventory, I have leds for\n$1, batteries for $3, and solder for\n\n94\n00:05:19.057 --> 00:05:22.897\n$5, must be an electronics store or\nsomething like that.\n\n95\n00:05:22.897 --> 00:05:24.530\nSo that's my repr.\n\n96\n00:05:24.530 --> 00:05:31.230\nNow if I wanted to go inventory and\ngo well, I want leds, just like that.\n\n97\n00:05:31.230 --> 00:05:32.890\nInventory object is not subscriptable.\n\n98\n00:05:34.520 --> 00:05:38.470\nOkay, well I really just wanted\nto look up in the inventory and\n\n99\n00:05:38.470 --> 00:05:39.930\nfind out what the price is.\n\n100\n00:05:39.930 --> 00:05:44.940\nAnd ultimately that's what the get we're\ngetting items, that's what we're doing.\n\n101\n00:05:44.940 --> 00:05:49.614\nSo let's exit out of here, and\ncome back into getting items.\n\n102\n00:05:49.614 --> 00:05:52.330\nWhat could we possibly do?\n\n103\n00:05:52.330 --> 00:05:55.080\nNow, unlike some of the other ones,\n\n104\n00:05:55.080 --> 00:06:01.027\nthis one doesn't immediately pop out what\nmagic method or what dunder method or\n\n105\n00:06:01.027 --> 00:06:06.724\nwhat data method we're gonna be\noverwriting in order to get this behavior.\n\n106\n00:06:06.724 --> 00:06:14.660\nAnd well, def __getItem is that method,\nall right?\n\n107\n00:06:14.660 --> 00:06:18.730\nAnd that's going to take a key, or\nwe could even make it specific,\n\n108\n00:06:18.730 --> 00:06:21.144\nit's going to take a product, right?\n\n109\n00:06:21.144 --> 00:06:24.906\nSo we have _products which\nare hidden hopefully, but\n\n110\n00:06:24.906 --> 00:06:27.210\nthey're not actually private.\n\n111\n00:06:27.210 --> 00:06:31.790\nSo we're gonna say key just to\nkeep it a little more general.\n\n112\n00:06:31.790 --> 00:06:34.161\nAnd now when someone\ndoes that subscripting,\n\n113\n00:06:34.161 --> 00:06:36.972\nthat key we're gonna start\nlooking through that key.\n\n114\n00:06:36.972 --> 00:06:41.160\nAnd as soon as we find it we're gonna\nreturn the corresponding price, okay?\n\n115\n00:06:42.590 --> 00:06:48.019\nSo for index, and product in\n\n116\n00:06:48.019 --> 00:06:57.757\nenumerate(self._products) just like that.\n\n117\n00:06:57.757 --> 00:07:00.241\nAnd if wait for it product-\n&gt;&gt; [LAUGH]\n\n118\n00:07:00.241 --> 00:07:01.150\n&gt;&gt; = keys,\n\n119\n00:07:01.150 --> 00:07:06.733\nthen now we have found\nthe corresponding product, okay?\n\n120\n00:07:06.733 --> 00:07:13.950\nSo we're gonna return self._prices[index],\nso the relative position.\n\n121\n00:07:13.950 --> 00:07:17.428\nLet me go through this, or\ngrab whatever the key is, right?\n\n122\n00:07:17.428 --> 00:07:21.510\nSo it would be cheese in our previous\nexample, but let's say is batteries.\n\n123\n00:07:21.510 --> 00:07:24.527\nWe're gonna start iterating\nthrough the products list.\n\n124\n00:07:24.527 --> 00:07:26.555\nSo Leds, is that batteries?\n&gt;&gt; No.\n\n125\n00:07:26.555 --> 00:07:27.157\n&gt;&gt; Batteries,\n\n126\n00:07:27.157 --> 00:07:28.458\nis that batteries?\n&gt;&gt; Yes.\n\n127\n00:07:28.458 --> 00:07:31.420\n&gt;&gt; Yes, what position in this list is it?\n\n128\n00:07:31.420 --> 00:07:35.639\nThis is index of one, well come and\n\n129\n00:07:35.639 --> 00:07:40.878\nfind the corresponding position price and\n\n130\n00:07:40.878 --> 00:07:44.963\nthen send that back, all right?\n\n131\n00:07:44.963 --> 00:07:48.755\nSo if we come back, and\nwe go python 3 -i getting items,\n\n132\n00:07:48.755 --> 00:07:51.050\nwe have inventory, just like so.\n\n133\n00:07:51.050 --> 00:07:57.329\nAnd if I say inventory, and hopefully,\ncross your fingers, all or nothing, right?\n\n134\n00:07:57.329 --> 00:08:01.488\n['solder'] it's $5.\n\n135\n00:08:01.488 --> 00:08:06.647\nNow it rounded 0s, but I do get the 5,\nand I know that is what it should be.\n\n136\n00:08:06.647 --> 00:08:10.010\nI could return, right?\n\n137\n00:08:10.010 --> 00:08:16.410\nI could not make it work\nreturns $5.00 as a string.\n\n138\n00:08:16.410 --> 00:08:18.486\nBut for now,\nwe're just gonna just leave this standard.\n\n139\n00:08:18.486 --> 00:08:24.340\nIf I do the exact same thing for\n[\"Leds\"] well that is 1.\n\n140\n00:08:24.340 --> 00:08:30.245\nWell we see from the listing above,\nit is actually a dollar and then just for\n\n141\n00:08:30.245 --> 00:08:36.082\ncompleteness, we can say batteries,\njust like that, and that is $3.\n\n142\n00:08:36.082 --> 00:08:43.140\nWhat if I now try something else?\n\n143\n00:08:43.140 --> 00:08:44.964\nThen nothing happens.\n\n144\n00:08:44.964 --> 00:08:49.691\nWell, and then that's a problem\nbecause in dictionaries,\n\n145\n00:08:49.691 --> 00:08:54.710\nwe also have this other method\nwhere I can say is something else,\n\n146\n00:08:58.509 --> 00:09:00.070\nIn the inventory?\n\n147\n00:09:03.358 --> 00:09:07.896\nAnd now I kind of just locked\nup my repr there, oopsy daisy\n\n148\n00:09:07.896 --> 00:09:08.862\n&gt;&gt; [LAUGH]\n\n149\n00:09:08.862 --> 00:09:11.340\n&gt;&gt; But you will notice it actually says\n\n150\n00:09:11.340 --> 00:09:14.640\nfor index products and numerous.\n\n151\n00:09:14.640 --> 00:09:19.890\nIt tries to be helpful but\nmaybe it's not the most helpful.\n\n152\n00:09:19.890 --> 00:09:23.265\nThose are actually two corresponding\nmethods that I think make sense in\n\n153\n00:09:23.265 --> 00:09:24.735\nthe context of getting items.\n\n154\n00:09:24.735 --> 00:09:27.030\nThere's something called the missing.\n\n155\n00:09:27.030 --> 00:09:29.260\nWhat to do if there's a key missing?\n\n156\n00:09:29.260 --> 00:09:32.433\nAnd I think in the inventory, it would be\nnice if we got, hey, we don't have that.\n\n157\n00:09:32.433 --> 00:09:34.690\nPlease check with our blah, blah, blah.\n\n158\n00:09:34.690 --> 00:09:39.830\nAnd then for in,\nthat's another one called __contains,\n\n159\n00:09:39.830 --> 00:09:42.020\nand this is more of a set like.\n\n160\n00:09:42.020 --> 00:09:46.620\nNow a set is a different data structure\nwhere I can just figure out membership.\n\n161\n00:09:46.620 --> 00:09:50.130\nHey, does this contain this, right?\n\n162\n00:09:50.130 --> 00:09:53.780\nBut for dictionaries,\nwe typically use that for lists,\n\n163\n00:09:53.780 --> 00:09:55.810\nwe also use that for strings.\n\n164\n00:09:56.860 --> 00:10:01.584\nSo I think this is a good use case\ninstead of just kinda pouring it out and\n\n165\n00:10:01.584 --> 00:10:03.839\nlooking at that independently.\n\n166\n00:10:03.839 --> 00:10:08.700\nSo as far as getting items,\nwe're technically done.\n\n167\n00:10:08.700 --> 00:10:12.090\nBut there's a couple of other things\nthat I think made a lot of sense in\n\n168\n00:10:12.090 --> 00:10:13.039\nthe context of this.\n\n169\n00:10:13.039 --> 00:10:16.238\nSo if we're looking at getting items,\nand we come down here.\n\n170\n00:10:16.238 --> 00:10:20.675\nAnd well there's a couple of\nthings that we wanna do first.\n\n171\n00:10:20.675 --> 00:10:24.450\nLet's look at contains and\nwhat does contains take?\n\n172\n00:10:24.450 --> 00:10:31.626\nWell that is a key and you can almost\nthink of that as a hash key, right?\n\n173\n00:10:31.626 --> 00:10:38.650\nSo return key in self_products.\n\n174\n00:10:38.650 --> 00:10:42.480\nNow what I've done is I've delegated\nthat to the list underneath.\n\n175\n00:10:42.480 --> 00:10:48.730\nList also implements __contains, so\nwhen I use the operator in, right?\n\n176\n00:10:48.730 --> 00:10:52.928\nKey in self_products, it will\nautomatically go through or return true or\n\n177\n00:10:52.928 --> 00:10:54.136\nfalse based on that.\n\n178\n00:10:54.136 --> 00:10:58.807\nOkay, so technically,\n__contains is done, and\n\n179\n00:10:58.807 --> 00:11:03.380\nwe're delegating that to\ntheir respective list.\n\n180\n00:11:03.380 --> 00:11:06.120\nIf we want a custom logic here,\nwe can do that, but\n\n181\n00:11:06.120 --> 00:11:08.920\nit should return a true or\nfalse based on membership.\n\n182\n00:11:10.340 --> 00:11:12.694\nDoes Leds exist in the inventory?\n\n183\n00:11:12.694 --> 00:11:14.610\nTrue or false?\n\n184\n00:11:14.610 --> 00:11:17.230\nDoes cheese exist in the inventory?\n\n185\n00:11:17.230 --> 00:11:19.160\nWell at current time, no.\n\n186\n00:11:19.160 --> 00:11:20.993\nBased on the other products here,\n\n187\n00:11:20.993 --> 00:11:23.720\nit's very unlikely that\nit will ever exist there.\n\n188\n00:11:23.720 --> 00:11:29.517\nBut if someone asks, and\nmaybe you wanna hedge your bets,\n\n189\n00:11:29.517 --> 00:11:35.433\nthere's another thing that\nwe can do called __missing,\n\n190\n00:11:35.433 --> 00:11:40.538\nand that is notFoundKey, Right?\n\n191\n00:11:40.538 --> 00:11:43.410\nWhat should we do if there is\nsomething that is not found?\n\n192\n00:11:45.250 --> 00:11:52.401\nWell return,\nwe are currently out of stock.\n\n193\n00:11:52.401 --> 00:11:57.080\nPlease let us know, How we can help.\n\n194\n00:11:59.065 --> 00:12:02.710\nSomething general like that, it's not\nnecessarily the greatest message there.\n\n195\n00:12:03.900 --> 00:12:07.409\nIn all actuality, you could have this\nreturn some kind of default value, right?\n\n196\n00:12:07.409 --> 00:12:10.167\nLet's say every time you\nlook up in the inventory,\n\n197\n00:12:10.167 --> 00:12:14.545\nmaybe you wanna do something crazy like\nit's $5 million, if it's not there.\n\n198\n00:12:14.545 --> 00:12:17.323\nSomebody's like cheese is $5 million,\nthat's weird.\n\n199\n00:12:17.323 --> 00:12:19.994\n&gt;&gt; [LAUGH] Some good cheese.\n\n200\n00:12:19.994 --> 00:12:21.389\n&gt;&gt; It is good cheese,\n\n201\n00:12:21.389 --> 00:12:27.068\njust to stay in the context of this,\nthis makes sense in the context, right?\n\n202\n00:12:27.068 --> 00:12:31.728\nNow, in order to make this really work,\n\n203\n00:12:31.728 --> 00:12:35.300\nwe have to modify our get item.\n\n204\n00:12:36.420 --> 00:12:40.580\nIf we never hit this return, that means\nwe've never found the product key.\n\n205\n00:12:40.580 --> 00:12:47.033\nSo what we're gonna do is we're\ngonna return missing self,\n\n206\n00:12:47.033 --> 00:12:54.003\nwait, no, no, the key because\nwe haven't found that, right?\n\n207\n00:12:54.003 --> 00:12:59.590\nSo the reason we have to put that there\nis when it's an actual dictionary.\n\n208\n00:12:59.590 --> 00:13:01.713\nThe dictionary does it like this, so\n\n209\n00:13:01.713 --> 00:13:05.963\nthat __missing the dictionary will\ncall it in the getItem internally.\n\n210\n00:13:05.963 --> 00:13:10.595\nAnd it's not so much magic,\nit's just a convention where\n\n211\n00:13:10.595 --> 00:13:16.130\nadhering to the Python data model,\nso __missing is there.\n\n212\n00:13:16.130 --> 00:13:22.314\nI think this might get us up and\ngoing here, let's see here.\n\n213\n00:13:22.314 --> 00:13:25.940\nNope, getting, and then so\nwe have our inventory.\n\n214\n00:13:26.980 --> 00:13:31.034\nAnd if we look for,\nlet's make sure the Leds still work,\n\n215\n00:13:31.034 --> 00:13:34.586\ncuz we made some change to get items,\nand it does.\n\n216\n00:13:34.586 --> 00:13:39.814\nIf we look for inventory something else,\nwe are currently out of stock,\n\n217\n00:13:39.814 --> 00:13:43.029\nplease let us know how we can help.\n&gt;&gt; Yep, there it is.\n\n218\n00:13:43.029 --> 00:13:47.280\n&gt;&gt; And if we say, is something else\n\n219\n00:13:47.280 --> 00:13:51.670\nin inventory No, it's not.\n\n220\n00:13:51.670 --> 00:13:53.390\nSo we could do a lot of those checks.\n\n221\n00:13:53.390 --> 00:13:58.788\nAnd as far as getting items, we can\nactually do this check before we try to\n\n222\n00:13:58.788 --> 00:14:02.453\nretrieve it, so that makes a lot of sense.\n&gt;&gt; Yeah, it does.\n\n223\n00:14:02.453 --> 00:14:04.310\n&gt;&gt; There we go.\n\n224\n00:14:04.310 --> 00:14:06.450\nWe can get something,\nwe can check to see if it's there,\n\n225\n00:14:06.450 --> 00:14:10.680\nand if it is there,\nwe can retrieve the corresponding price.\n\n226\n00:14:10.680 --> 00:14:13.743\nAnd as I said, just to reiterate.\n\n227\n00:14:13.743 --> 00:14:16.590\nThis is not necessarily\nthe most efficient manner.\n\n228\n00:14:16.590 --> 00:14:23.502\nBut you can think of something like maybe\nI have a corresponding set to test for\n\n229\n00:14:23.502 --> 00:14:28.091\nmembership that would be a little faster,\nright?\n\n230\n00:14:28.091 --> 00:14:31.893\nSo I could do quick lookups,\npseudo quick lookups in the products,\n\n231\n00:14:31.893 --> 00:14:34.525\nas long as the product is not too long.\n\n232\n00:14:34.525 --> 00:14:37.460\nLookup the prices, that wouldn't be\ntoo bad, but then if I wanted to check\n\n233\n00:14:37.460 --> 00:14:40.880\ncontains, I could add another\ndata structure underneath.\n\n234\n00:14:41.890 --> 00:14:44.780\nSo I could say product set, and\n\n235\n00:14:44.780 --> 00:14:50.280\nthat is the set of all products like so.\n\n236\n00:14:50.280 --> 00:14:56.622\nAnd now that's gonna be a faster lookup\nfor contains than the respective list.\n\n237\n00:14:56.622 --> 00:14:59.556\nSo do keep that in mind, there's\nlittle tweaks around there, but for\n\n238\n00:14:59.556 --> 00:15:00.960\nnow we're gonna leave that off.\n\n239\n00:15:00.960 --> 00:15:04.896\nWe're not worried about performance or\nbeing the best, but\n\n240\n00:15:04.896 --> 00:15:08.756\nwe can use the __getItem to\ngive dictionary like behavior\n\n241\n00:15:08.756 --> 00:15:11.474\n__contains gives a set like behavior.\n\n242\n00:15:11.474 --> 00:15:13.491\nAnd kind of all together,\nhey, is the item there?\n\n243\n00:15:13.491 --> 00:15:15.650\nIf it is, give it to me.\n\n244\n00:15:15.650 --> 00:15:18.833\nIf it's not, we can now say, __missing.\n\n245\n00:15:18.833 --> 00:15:20.522\nThis is what you get by default.\n\n246\n00:15:20.522 --> 00:15:24.525\nBy default I get a message here, but\nyou could also give some kind of default\n\n247\n00:15:24.525 --> 00:15:27.530\nvalue, like $5 million or\nsomething of that nature.\n\n248\n00:15:27.530 --> 00:15:31.245\nMaybe you want deterrence, or\nmaybe zero works best in your application.\n\n249\n00:15:31.245 --> 00:15:37.232\nThat's very much context specific, but\nI do love that Python gives us the ability\n\n250\n00:15:37.232 --> 00:15:42.985\nto give the niceties of the syntax that\nwe're used to for dictionary and sets.\n\n251\n00:15:42.985 --> 00:15:46.607\nBut we can use those internal\nto our custom classes, and\n\n252\n00:15:46.607 --> 00:15:49.575\nI'm getting items [INAUDIBLE].\n&gt;&gt; Wow, that's a quick one.\n\n253\n00:15:49.575 --> 00:15:52.280\nGetting items inside\nthe Python Data Model.\n\n254\n00:15:52.280 --> 00:15:55.861\nAnd I know, I can just tell, there's\nsomething you'd like to say before we move\n\n255\n00:15:55.861 --> 00:15:58.561\non.\n&gt;&gt; Well, this is one of those things where\n\n256\n00:15:58.561 --> 00:16:02.558\nyou're not always going to use\nthings just like this, right?\n\n257\n00:16:02.558 --> 00:16:06.821\nYou're not always gonna be like why,\nI need to implement __getItem.\n\n258\n00:16:06.821 --> 00:16:11.900\nBut when it crops up, the fact that\nyou can now employ some of these more,\n\n259\n00:16:11.900 --> 00:16:13.912\nthese nice syntax, right?\n\n260\n00:16:13.912 --> 00:16:17.639\nBrackets quotes, and it works to\nclean up some of your external code,\n\n261\n00:16:17.639 --> 00:16:19.849\nwell know the through available to you and\n\n262\n00:16:19.849 --> 00:16:23.085\nyou dont have to like jump through\nhoops to make them happen.\n\n263\n00:16:23.085 --> 00:16:27.180\nAnd well it can make things a lot\nmore readable, a lot easier to use.\n\n264\n00:16:27.180 --> 00:16:29.450\nSo just remember they're there\nin the back of your mind.\n\n265\n00:16:29.450 --> 00:16:31.040\n&gt;&gt; Great job as usual, Justin.\n\n266\n00:16:31.040 --> 00:16:33.550\nPython Data Model, make sure you\nsee everything inside the series.\n\n267\n00:16:33.550 --> 00:16:36.256\nAnd when you're in the course library\nthere's thousands of other videos\n\n268\n00:16:36.256 --> 00:16:39.060\nthere and they're designed to help you\ngo further, so check those out too.\n\n269\n00:16:39.060 --> 00:16:40.643\nAnd thank you for watching DEVPro.TV.\n\n270\n00:16:40.643 --> 00:16:42.803\nRemember, a good DEVPro\nis always learning.\n\n271\n00:16:42.803 --> 00:16:44.269\nI'm Zack Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n272\n00:16:44.269 --> 00:16:45.500\n&gt;&gt; And we will see you soon!\n\n273\n00:16:45.500 --> 00:16:50.186\n[SOUND]\n\n",
          "vimeoId": "252217273"
        },
        {
          "description": "In this episode, Justin and Zach explore further adding dictionary-like behavior by providing the ability to set and delete values from an object. Justin highlights the details necessary in order to use \\_\\_setitem\\_\\_ and \\_\\_delitem\\_\\_ to further add dictionary-like behavior.",
          "length": "1448",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-3-1-setting_and_deleting_items-012218-PGM.00_23_58_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-3-1-setting_and_deleting_items-012218-PGM.00_23_58_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-2-3-1-setting_and_deleting_items-012218-PGM.00_23_58_21.Still001-sm.jpg",
          "title": "Setting and Deleting Items",
          "transcript": "WEBVTT\n\n1\n00:00:00.150 --> 00:00:10.150\n[MUSIC]\n\n2\n00:00:12.735 --> 00:00:17.330\nHello and thank you for watching DevProTV,\nhelping you learn wherever you go.\n\n3\n00:00:17.330 --> 00:00:20.660\nI'm your host, Zach Memos,\nas we continue on with Python Data Model.\n\n4\n00:00:20.660 --> 00:00:23.620\nThis is setting and deleting items.\n\n5\n00:00:23.620 --> 00:00:24.470\nWonderful course.\n\n6\n00:00:24.470 --> 00:00:28.000\nWonderful subject and the only person\nwho could teach this is Justin Dennison.\n\n7\n00:00:28.000 --> 00:00:28.990\nHe is right here.\n\n8\n00:00:28.990 --> 00:00:31.484\n&gt;&gt; Well, you know, Zach, I think you\nmight be over selling that a little bit.\n\n9\n00:00:31.484 --> 00:00:32.350\n&gt;&gt; [LAUGH]\n&gt;&gt; But that's all right.\n\n10\n00:00:32.350 --> 00:00:33.760\nHow are you today, Zach?\n\n11\n00:00:33.760 --> 00:00:34.920\n&gt;&gt; Well, I'm very excited.\n\n12\n00:00:34.920 --> 00:00:36.880\nWhat do we mean by studying and\ndeleting items?\n\n13\n00:00:36.880 --> 00:00:38.070\nI want to get into that right away.\n\n14\n00:00:38.070 --> 00:00:41.250\n&gt;&gt; So this is a a follow-up to\nthe previous episode where we were\n\n15\n00:00:41.250 --> 00:00:42.220\ngetting items, right.\n\n16\n00:00:42.220 --> 00:00:46.115\nSo getting items is adding dictionary-like\nbehavior where I can do a quick look up,\n\n17\n00:00:46.115 --> 00:00:50.980\nreal quick, ours is not actually going to\nbe quick over the grand scale of things.\n\n18\n00:00:50.980 --> 00:00:55.080\nBut I could do the nice syntax or\nI could do brackets, quotes, look up, and\n\n19\n00:00:55.080 --> 00:00:58.170\nget out a corresponding value, right.\n\n20\n00:00:58.170 --> 00:01:03.680\nSo when I do that though,\nusually dictionaries, I want the ability\n\n21\n00:01:03.680 --> 00:01:09.560\nto either update the item or\nmaybe I just want to get rid of the item.\n\n22\n00:01:09.560 --> 00:01:14.520\nAs it stands, if I just implement the get\nitem magic method, double underscore,\n\n23\n00:01:14.520 --> 00:01:16.160\nget item, double underscore.\n\n24\n00:01:16.160 --> 00:01:19.570\nI only have the ability to\nretrieve using a nice syntax.\n\n25\n00:01:19.570 --> 00:01:22.680\nI don't have the ability any other way.\n\n26\n00:01:22.680 --> 00:01:25.810\nWell, let's take a quick\nreminder of where we left off.\n\n27\n00:01:25.810 --> 00:01:28.560\nThey are connected, but\nthey aren't necessarily.\n\n28\n00:01:28.560 --> 00:01:29.460\nYou don't have to look at\n\n29\n00:01:29.460 --> 00:01:32.080\none versus the other if you\nalready knew the previous episode.\n\n30\n00:01:32.080 --> 00:01:35.790\nAnd then see how we can both delete and\nset.\n\n31\n00:01:35.790 --> 00:01:39.790\nI do want to remind you\nthat deleting an item from,\n\n32\n00:01:39.790 --> 00:01:44.480\nkind of this dictionary-like interface,\nis not the same as deleting an instance\n\n33\n00:01:44.480 --> 00:01:46.580\nwhich we've covered\nearlier on this course.\n\n34\n00:01:46.580 --> 00:01:49.370\nSo don't get those confused,\nthey are different,\n\n35\n00:01:49.370 --> 00:01:53.000\neven though the word delete is there,\ndelete an item, delete an instance.\n\n36\n00:01:54.100 --> 00:01:57.390\nThere are subtle differences, and\none is more predictable than the other.\n\n37\n00:01:57.390 --> 00:01:59.910\nThis one is more predictable\nthan the leading initiative.\n\n38\n00:01:59.910 --> 00:02:04.608\nSo let's go ahead and take a look at the\nscreen here and well let's go ahead and\n\n39\n00:02:04.608 --> 00:02:05.637\ngetting items.\n\n40\n00:02:05.637 --> 00:02:10.118\nAnd all we did was get an item and we\nhad looked through the products list for\n\n41\n00:02:10.118 --> 00:02:15.460\nan inventory, so I have a list of\ninventories, LEDs, batteries and solder.\n\n42\n00:02:15.460 --> 00:02:19.400\nAnd then if I find that,\nI'm gonna return the corresponding price.\n\n43\n00:02:19.400 --> 00:02:22.920\nOtherwise, I'm going to call self.missing,\n\n44\n00:02:22.920 --> 00:02:25.390\nwhich is just gonna return\nthis nice little help message.\n\n45\n00:02:25.390 --> 00:02:28.610\nAs I've said before,\nthis could be a default value type thing.\n\n46\n00:02:28.610 --> 00:02:32.570\nThis could be none, so\non and so forth, all right?\n\n47\n00:02:33.620 --> 00:02:38.690\nNow, let's look at the behavior here,\nand see what problem are we solving?\n\n48\n00:02:38.690 --> 00:02:41.460\nSo I'm gonna go to Python 3,\njust as a reminder.\n\n49\n00:02:41.460 --> 00:02:46.420\nDefinitely a Python 3 course, so to speak.\n\n50\n00:02:46.420 --> 00:02:51.310\nSo if I look at inventory, and I look at\nLEDs, well, I can get the number one back.\n\n51\n00:02:51.310 --> 00:02:54.850\nThat's the corresponding\nprice of the LEDs.\n\n52\n00:02:54.850 --> 00:02:58.870\nAnd we can see through the repr method,\nor repr method here,\n\n53\n00:02:58.870 --> 00:03:03.911\nthat LEDs are a dollar,\nbatteries are $3, solder is $5.\n\n54\n00:03:03.911 --> 00:03:06.540\nNow likewise, a lot of times,\n\n55\n00:03:06.540 --> 00:03:10.325\nif you accidentally hit Enter,\nyou get weird output like that.\n\n56\n00:03:10.325 --> 00:03:13.560\n&gt;&gt; [LAUGH]\n&gt;&gt; So inventory, you know what,\n\n57\n00:03:13.560 --> 00:03:16.400\nwe've had the prices increase on LEDs.\n\n58\n00:03:16.400 --> 00:03:19.560\nSo I want to say, plus equals a dollar.\n\n59\n00:03:19.560 --> 00:03:22.080\nAnd inventory object does\nnot support item assignment.\n\n60\n00:03:23.210 --> 00:03:27.140\nThat means that it has no logic capable of\n\n61\n00:03:27.140 --> 00:03:32.680\ngrabbing whatever the return would be and\nupdating it in place.\n\n62\n00:03:32.680 --> 00:03:34.880\nAll right,\nwe would have to provide that logic.\n\n63\n00:03:34.880 --> 00:03:39.810\nNow, dictionaries by default offer\nthis ability and case in point,\n\n64\n00:03:39.810 --> 00:03:43.790\nlet's just look at dictionaries,\nwhat are we trying to simulate?\n\n65\n00:03:43.790 --> 00:03:45.170\nAnd I'm going to clear\nout this screen here.\n\n66\n00:03:45.170 --> 00:03:50.060\nAnd we're going to say,\ndictionary of cheese.\n\n67\n00:03:50.060 --> 00:03:53.810\nLet's just make it one so\nwe can see those similar things.\n\n68\n00:03:53.810 --> 00:03:56.450\nNow if we look at there,\nwe can see cheese.\n\n69\n00:03:56.450 --> 00:03:58.370\nWe retrieve that, that's good.\n\n70\n00:03:58.370 --> 00:04:06.218\nAnd now, += 1 x, we've incremented\nthat corresponding value by one.\n\n71\n00:04:06.218 --> 00:04:09.350\nThese aren't much type dependent, if that\nwas a string on the right hand side,\n\n72\n00:04:09.350 --> 00:04:12.340\nand I get different results,\nso do keep that in mind.\n\n73\n00:04:12.340 --> 00:04:18.028\nSo we would like that,\nwe would also like to\n\n74\n00:04:18.028 --> 00:04:23.242\nbe able to say, del, well, is it del,\n\n75\n00:04:23.242 --> 00:04:28.000\nx cheese, like so and then, yeah.\n\n76\n00:04:28.000 --> 00:04:33.580\nThat del word is a little iffy, and that's\nwhy I said at the beginning of this,\n\n77\n00:04:33.580 --> 00:04:36.090\nwe've looked at deleting an instance,\nbut now,\n\n78\n00:04:36.090 --> 00:04:38.452\nwe're actually deleting\npart of a collection.\n\n79\n00:04:38.452 --> 00:04:39.155\n&gt;&gt; Mm-hm, mm-hm.\n\n80\n00:04:39.155 --> 00:04:43.452\n&gt;&gt; A dictionary, and all that does\nis it removes and that del item or\n\n81\n00:04:43.452 --> 00:04:49.090\ndeleted item is the same operator as if\nwe were trying to delete an instance.\n\n82\n00:04:49.090 --> 00:04:50.810\nSo don't get those mixed up.\n\n83\n00:04:50.810 --> 00:04:52.330\nBe very, very careful there.\n\n84\n00:04:52.330 --> 00:04:55.859\nBut these are the two behaviors that we\nwant to simulate in our inventory because\n\n85\n00:04:55.859 --> 00:04:57.391\nthat makes sense.\n\n86\n00:04:57.391 --> 00:04:58.820\n&gt;&gt; We're gonna take that\nout of the inventory.\n\n87\n00:04:58.820 --> 00:05:00.980\nWe'll delete it.\n\n88\n00:05:00.980 --> 00:05:02.350\nYou know, we had a price increase,\n\n89\n00:05:02.350 --> 00:05:06.480\nwe want to increase the price we wanna\nbe able to do this, well, nicely.\n\n90\n00:05:06.480 --> 00:05:12.681\nWe could force it, and\njust to show you that we could force it,\n\n91\n00:05:12.681 --> 00:05:17.694\nI could say inventory._prices[0] += 1,\n\n92\n00:05:17.694 --> 00:05:24.517\nand well, inventory,\nI've now actually increased LEDs by $1.\n\n93\n00:05:24.517 --> 00:05:28.674\nBut I had to know what position\non the list were LEDs,\n\n94\n00:05:28.674 --> 00:05:34.670\nI had to do _prices[0] += 1 and\nnow I've done that price increase.\n\n95\n00:05:34.670 --> 00:05:36.200\nThat's not pretty.\n\n96\n00:05:36.200 --> 00:05:37.230\nThat's kind of ugly.\n\n97\n00:05:37.230 --> 00:05:43.052\nAnd I don't think it's intuitive as\nsaying inventory, quote, LEDs += 1.\n\n98\n00:05:43.052 --> 00:05:46.520\nSo part of this is to provide\na nicer user interface, right.\n\n99\n00:05:46.520 --> 00:05:49.590\nA programming interface, so\nyou're not like, well, what is that?\n\n100\n00:05:49.590 --> 00:05:53.630\nThat's the fifth element in\nthe list that I need to update.\n\n101\n00:05:53.630 --> 00:05:56.850\nIt can get real iffy, real fast.\n\n102\n00:05:56.850 --> 00:06:00.720\nSo let's go ahead and get on the repr\nhere and start making those changes.\n\n103\n00:06:02.160 --> 00:06:04.960\nSo inventory, or excuse me,\nyou know the first thing?\n\n104\n00:06:04.960 --> 00:06:06.170\nWe should probably rename this file.\n\n105\n00:06:06.170 --> 00:06:08.370\nIt's not getting items anymore.\n\n106\n00:06:08.370 --> 00:06:10.620\nIt's getting, setting, and deleting items.\n\n107\n00:06:10.620 --> 00:06:14.817\n&gt;&gt; Mm.\n&gt;&gt; So this getting items is getting,\n\n108\n00:06:14.817 --> 00:06:18.690\nsetting, and deleting items.\n\n109\n00:06:18.690 --> 00:06:20.120\nThat is a long filename.\n\n110\n00:06:20.120 --> 00:06:23.040\nBut very descriptive, I don't have\nto think about what is contained.\n\n111\n00:06:23.040 --> 00:06:23.750\n&gt;&gt; It says it all.\n\n112\n00:06:23.750 --> 00:06:24.440\n&gt;&gt; Yeah, it does.\n\n113\n00:06:24.440 --> 00:06:25.400\nIt does.\n\n114\n00:06:25.400 --> 00:06:27.160\nSo I'm getting, and there we go.\n\n115\n00:06:27.160 --> 00:06:29.060\nSo we're back inside of inventory.\n\n116\n00:06:29.060 --> 00:06:33.280\nAnd I'm actually gonna put it\nright here under the repr method,\n\n117\n00:06:33.280 --> 00:06:35.560\nbecause, well, because I want to.\n\n118\n00:06:35.560 --> 00:06:38.320\nThere's nothing magic about\nthe ordering of these.\n\n119\n00:06:38.320 --> 00:06:40.420\nI haven't said that before.\n\n120\n00:06:40.420 --> 00:06:44.060\nAs long as they adhere to\nthe naming convention, okay?\n\n121\n00:06:45.420 --> 00:06:47.610\nSo let's do the set first.\n\n122\n00:06:47.610 --> 00:06:49.020\nPrice increase.\n\n123\n00:06:49.020 --> 00:06:51.650\nIt's more likely that you're gonna\nhave a price increase in inventory.\n\n124\n00:06:51.650 --> 00:06:55.280\nI'm using this as a story telling device,\na narrative device.\n\n125\n00:06:55.280 --> 00:06:58.070\nSo don't get hung up on the fact\nthat this is an inventory.\n\n126\n00:06:58.070 --> 00:07:00.010\nYou can do this for anything.\n\n127\n00:07:01.280 --> 00:07:03.795\nYou can say, well, I need to set an item.\n\n128\n00:07:03.795 --> 00:07:07.580\nAnd well, not that capital S.\n\n129\n00:07:07.580 --> 00:07:09.220\nKey and a value.\n\n130\n00:07:09.220 --> 00:07:16.510\nAnd in this case, it would actually\nbe a product and some price, okay?\n\n131\n00:07:16.510 --> 00:07:18.180\nSo I did a plus-equals first.\n\n132\n00:07:18.180 --> 00:07:19.900\nWe're actually just going to do a set.\n\n133\n00:07:22.000 --> 00:07:26.210\nJust a direct assignment and that's\njust to keep things simple, all right?\n\n134\n00:07:26.210 --> 00:07:29.720\nWe've gotta know a few other things\nin order for that stuff to work.\n\n135\n00:07:29.720 --> 00:07:34.400\nAll right, so now let me see here,\nhow do I set an item?\n\n136\n00:07:35.670 --> 00:07:44.480\nWell, if the key is in self.products and\n\n137\n00:07:44.480 --> 00:07:47.690\ntechnically, because I have\nthis under contains here.\n\n138\n00:07:47.690 --> 00:07:49.961\nNotice return key in self.\n\n139\n00:07:49.961 --> 00:07:57.098\nIf key in self, I can actually just\nsay self without the self._products.\n\n140\n00:07:57.098 --> 00:07:59.760\nIf it is here, if it's in the inventory.\n\n141\n00:07:59.760 --> 00:08:05.663\nThen, I want to the prices and\n\n142\n00:08:05.663 --> 00:08:09.913\nsay, self._products.\n\n143\n00:08:09.913 --> 00:08:13.720\nAnd that's a list, so\nI can say, index of the key.\n\n144\n00:08:13.720 --> 00:08:16.770\nFind where it is, right?\n\n145\n00:08:16.770 --> 00:08:19.710\nAnd I'm doing a little fancy stuff here.\n\n146\n00:08:19.710 --> 00:08:21.800\nAnd maybe we'll come back and\nbreak this down.\n\n147\n00:08:21.800 --> 00:08:23.160\nJust to make sure.\n\n148\n00:08:23.160 --> 00:08:28.850\nIf the key is found in this list of\nproducts, then come to the prices,\n\n149\n00:08:28.850 --> 00:08:33.910\nand then pass in whatever\nthe position of the key.\n\n150\n00:08:33.910 --> 00:08:38.330\nNow, the key that I'm setting in would be\nlike LEDs, or batteries, other products.\n\n151\n00:08:38.330 --> 00:08:41.010\nSo, if it was LEDs,\nit would give me zero here.\n\n152\n00:08:41.010 --> 00:08:45.823\nAnd so, set Self_prices of zero equal to\n\n153\n00:08:45.823 --> 00:08:49.950\nwhatever value is there, okay, so\n\n154\n00:08:49.950 --> 00:08:54.775\nthat's how we would go about doing that.\n\n155\n00:08:54.775 --> 00:08:59.837\nSo, I think this is good,\nlet's test this out,\n\n156\n00:08:59.837 --> 00:09:07.747\nand see where we, because I think I may\nhave missed spoken just a moment ago.\n\n157\n00:09:07.747 --> 00:09:11.180\nSo, if I have an inventory,\nand there it is.\n\n158\n00:09:11.180 --> 00:09:15.850\nAnd if I say inventory['leds'],\nand let's just do this.\n\n159\n00:09:15.850 --> 00:09:20.105\nIt is equal to, cuz technically,\nthat's setting an item, = 5.\n\n160\n00:09:20.105 --> 00:09:22.286\nAnd I no longer have that error.\n\n161\n00:09:22.286 --> 00:09:26.030\nIt is $5, right?\n\n162\n00:09:26.030 --> 00:09:32.588\nWhat if I do inventory['leds'] += 2?\n\n163\n00:09:32.588 --> 00:09:38.680\nI did mis-speak there,\nwhile I was thinking of something else.\n\n164\n00:09:38.680 --> 00:09:42.780\nThat is still supported, because all\nthat's doing is calling set item.\n\n165\n00:09:42.780 --> 00:09:47.400\nThe += is doing an increment on the value,\nand\n\n166\n00:09:47.400 --> 00:09:48.920\nthat's kind of being taken care of for\nyou.\n\n167\n00:09:48.920 --> 00:09:50.420\nSo, the set item works.\n\n168\n00:09:50.420 --> 00:09:54.340\nNow, there's one thing about\ndictionaries that is a little odd.\n\n169\n00:09:54.340 --> 00:09:57.190\nSo, if we go back to our\nclassic example here.\n\n170\n00:10:00.000 --> 00:10:07.038\nSo, this just has cheese in it,\nbut if I say, Apple, right?\n\n171\n00:10:07.038 --> 00:10:13.290\n= 4 that actually adds the key.\n\n172\n00:10:13.290 --> 00:10:15.960\nSo, it looks like a set,\nbut it adds the key.\n\n173\n00:10:15.960 --> 00:10:17.630\nAnd maybe you want this behavior.\n\n174\n00:10:18.990 --> 00:10:23.130\nLet's see if our inventory\nalready has said behavior.\n\n175\n00:10:23.130 --> 00:10:24.860\nSo, what is another electronic?\n\n176\n00:10:24.860 --> 00:10:28.474\nWe need some wire, and that it $10.\n\n177\n00:10:29.540 --> 00:10:33.723\nWell, inventory and\nit looks like it happened,\n\n178\n00:10:33.723 --> 00:10:39.241\nthat there were no errors, but\nit's not in the inventory list.\n\n179\n00:10:39.241 --> 00:10:43.436\nAnd let's just see inventory._products.\n\n180\n00:10:43.436 --> 00:10:49.640\nIt's not in this list, so\nit kind of just went in the wayside.\n\n181\n00:10:49.640 --> 00:10:51.720\nThis would be a horrible inventory system.\n\n182\n00:10:51.720 --> 00:10:55.095\nBy the way, you should not\nactually use this as a stance.\n\n183\n00:10:55.095 --> 00:10:57.400\n&gt;&gt; [LAUGH]\n&gt;&gt; But what if we wanted that behavior?\n\n184\n00:10:57.400 --> 00:10:59.110\nThat's still part of set item.\n\n185\n00:10:59.110 --> 00:11:00.950\nLet's see, using List, and\n\n186\n00:11:00.950 --> 00:11:05.330\nthis is very specific to List,\nhow this would come about all right.\n\n187\n00:11:05.330 --> 00:11:08.590\nSo, getting a setting and deleting Adam's.\n\n188\n00:11:08.590 --> 00:11:13.180\nSo, if the key is there,\nthen do what we've already said otherwise.\n\n189\n00:11:14.260 --> 00:11:15.470\nWhat do we want?\n\n190\n00:11:15.470 --> 00:11:24.951\nWe want self.products.append(key) and\n\n191\n00:11:24.951 --> 00:11:29.442\nself, cell, oh-oh\n\n192\n00:11:29.442 --> 00:11:35.433\ncrisis.append the value.\n\n193\n00:11:35.433 --> 00:11:39.310\nAnd what that's gonna do is that's gonna\npush those on the end of that list.\n\n194\n00:11:39.310 --> 00:11:43.670\nAgain, not the greatest of ways\nto implement the system, but\n\n195\n00:11:43.670 --> 00:11:46.478\nthat is perfectly okay for our example.\n\n196\n00:11:46.478 --> 00:11:52.480\nSo, Python dot three dash i,\ngetting in setting.\n\n197\n00:11:52.480 --> 00:11:57.420\nSo, if I look at inventory, there it is.\n\n198\n00:11:57.420 --> 00:12:01.200\nEverything still works, let's make\nsure that our assignment still works.\n\n199\n00:12:02.350 --> 00:12:05.280\nAnd let's mess with batteries this time.\n\n200\n00:12:06.330 --> 00:12:09.550\nBatteries plus equals four.\n\n201\n00:12:09.550 --> 00:12:12.140\nBatteries had a huge price increase.\n\n202\n00:12:12.140 --> 00:12:14.590\nAnd if we look here, battery still works.\n\n203\n00:12:14.590 --> 00:12:17.660\nBut now, if I say inventory and\n\n204\n00:12:17.660 --> 00:12:22.770\nwire, well, let's look at the inventory.\n\n205\n00:12:24.050 --> 00:12:26.400\nHey, look,\nwire is now part of the inventory.\n\n206\n00:12:26.400 --> 00:12:29.830\nSo, we've offered that similar interface.\n\n207\n00:12:29.830 --> 00:12:32.340\nMaybe you don't want this, so\nyou don't do the else part.\n\n208\n00:12:32.340 --> 00:12:36.190\nYou just say, hey,\nonly change the things internal.\n\n209\n00:12:36.190 --> 00:12:41.580\nYou could even raise some kind of\nerror and say, hey, you can't do that.\n\n210\n00:12:41.580 --> 00:12:45.005\nYou can't add to the inventory\nusing this method.\n\n211\n00:12:45.005 --> 00:12:49.010\nIt's completely up to you and\na judgment call based on your system.\n\n212\n00:12:49.010 --> 00:12:55.610\nNow, let's say that somebody comes\nalong and now does the following.\n\n213\n00:12:58.823 --> 00:13:03.216\nSomebody ordered some cheese, and\nthey accidentally put it in the inventory.\n\n214\n00:13:03.216 --> 00:13:04.740\n&gt;&gt; [LAUGH]\n&gt;&gt; And it's $3.\n\n215\n00:13:04.740 --> 00:13:06.130\n&gt;&gt; You do like your cheese.\n\n216\n00:13:06.130 --> 00:13:10.070\n&gt;&gt; I do like cheese, and, well that's\nkinda weird for an electronics store.\n\n217\n00:13:10.070 --> 00:13:10.690\n&gt;&gt; It is weird.\n\n218\n00:13:10.690 --> 00:13:11.900\n&gt;&gt; Right?\nYou're like, man,\n\n219\n00:13:11.900 --> 00:13:13.030\nit's in the inventory now.\n\n220\n00:13:13.030 --> 00:13:16.370\nWe really don't want that in\nthe inventory, so how do we?\n\n221\n00:13:16.370 --> 00:13:18.900\nWe'll just use this method.\n\n222\n00:13:18.900 --> 00:13:20.590\nLet's see if this works.\n\n223\n00:13:20.590 --> 00:13:23.810\nWho knows?\nWe might get lucky.\n\n224\n00:13:23.810 --> 00:13:26.299\nNo attribute error.\n\n225\n00:13:27.357 --> 00:13:28.718\nDel item.\n\n226\n00:13:28.718 --> 00:13:34.410\nNow, unlike the set item and things of\nthat nature, this actually tells you, hey.\n\n227\n00:13:34.410 --> 00:13:36.920\nYou don't have the del item,\nso we don't know what to do.\n\n228\n00:13:36.920 --> 00:13:38.190\nSo, we can't do that.\n\n229\n00:13:38.190 --> 00:13:39.900\nSo, you can't modify the inventory.\n\n230\n00:13:39.900 --> 00:13:44.900\nNow, because all of this is in memory\nwhen we start this back up things\n\n231\n00:13:44.900 --> 00:13:50.100\nwill fix themselves, but\nlet's get out of here, and\n\n232\n00:13:50.100 --> 00:13:54.190\nnow look at the deleting an item,\nall right?\n\n233\n00:13:54.190 --> 00:13:56.050\nSo, we have the ability to set an item.\n\n234\n00:13:57.660 --> 00:14:04.233\nAnd if we wanted to delete an item,\nwell let's see here.\n\n235\n00:14:04.233 --> 00:14:06.845\n[SOUND] Let's just put this here.\n\n236\n00:14:06.845 --> 00:14:10.635\nAnd it told us that we need\nthis del item method, and\n\n237\n00:14:10.635 --> 00:14:15.939\nthat is gonna give us a key,\nbecause we're del and then some key value.\n\n238\n00:14:17.620 --> 00:14:19.260\nAnd now, let's see.\n\n239\n00:14:20.340 --> 00:14:27.060\nIf the key is in self, so only be able\nto delete it if that is the case.\n\n240\n00:14:29.700 --> 00:14:32.088\nThen, [SOUND] what should we do?\n\n241\n00:14:32.088 --> 00:14:36.276\nWe should find the index and\n\n242\n00:14:36.276 --> 00:14:42.475\nadd self dot products .index(key).\n\n243\n00:14:42.475 --> 00:14:46.100\nAnd then, because these are lists,\nI can, behind the scenes,\n\n244\n00:14:46.100 --> 00:14:50.320\ndelete the corresponding places for\nthe products and the prices.\n\n245\n00:14:50.320 --> 00:14:56.670\nSo, self.products[index], and\n\n246\n00:14:56.670 --> 00:15:02.790\nI need to make sure that\nI also delete the prices.\n\n247\n00:15:02.790 --> 00:15:08.910\nAnd the reason being is otherwise I'll\nhave two products and three prices.\n\n248\n00:15:08.910 --> 00:15:09.760\nAnd then, people are gonna go.\n\n249\n00:15:10.890 --> 00:15:13.100\nSo, which one's what?\n\n250\n00:15:13.100 --> 00:15:17.250\nAlso my reaper method\nwould do weird stuff.\n\n251\n00:15:17.250 --> 00:15:19.780\nSo, it wouldn't necessarily error, but\n\n252\n00:15:19.780 --> 00:15:23.640\nit'll print out weirdness depending\non which one you deleted.\n\n253\n00:15:23.640 --> 00:15:27.449\nSo, we have that and\nactually that's for our system.\n\n254\n00:15:27.449 --> 00:15:30.100\nWe should be able to delete\nbased on key value now.\n\n255\n00:15:30.100 --> 00:15:36.090\nSo, make sure we get that here, and boom.\n\n256\n00:15:36.090 --> 00:15:38.661\nAnd if we say inventory, and\n\n257\n00:15:38.661 --> 00:15:44.037\nlet's put that cheese back in there,\nso let me order that cheese again.\n\n258\n00:15:44.037 --> 00:15:45.548\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm gonna have to have a talk\n\n259\n00:15:45.548 --> 00:15:46.072\nwith them.\n\n260\n00:15:46.072 --> 00:15:48.761\n&gt;&gt; Well, maybe they are using Swiss for\nlike a template, or\n\n261\n00:15:48.761 --> 00:15:50.155\nsomething you don't know.\n\n262\n00:15:50.155 --> 00:15:52.236\n&gt;&gt; There's probably cheaper templates for\n\n263\n00:15:52.236 --> 00:15:54.440\ncircles [LAUGH] than\na thing of Swiss cheese.\n\n264\n00:15:54.440 --> 00:15:57.506\nMaybe they are building some kind of\ncircuit that the control mechanism as\n\n265\n00:15:57.506 --> 00:15:58.252\nblock of cheese.\n\n266\n00:15:58.252 --> 00:15:59.047\n&gt;&gt; There you go.\n\n267\n00:15:59.047 --> 00:16:00.730\n&gt;&gt; All right, lets put this here.\n\n268\n00:16:00.730 --> 00:16:05.430\nSo it's there, and I'm like,\nI really need to get rid of that.\n\n269\n00:16:05.430 --> 00:16:11.305\nAnd so if I go, inventory, cheese,\nand nothing errored out this time.\n\n270\n00:16:11.305 --> 00:16:13.353\nBut if I print it back out\nit actually removed it.\n\n271\n00:16:13.353 --> 00:16:16.152\n&gt;&gt; Mm-hm.\n&gt;&gt; And if we look from the previous 1, 3,\n\n272\n00:16:16.152 --> 00:16:21.320\n5, 1, 3, 5, everything, all the prices\nare updated, and so on and so forth.\n\n273\n00:16:21.320 --> 00:16:26.290\nNow, along with Dell item, you may go on,\n\n274\n00:16:26.290 --> 00:16:30.020\nall right, so that looks like it\nmight be a whoopsie daisy, right.\n\n275\n00:16:30.020 --> 00:16:34.000\nYou could do some pretty bad\nstuff with this, and you could.\n\n276\n00:16:35.110 --> 00:16:39.410\nWhat if you wanted to inform people,\n\n277\n00:16:39.410 --> 00:16:42.450\nhey, you're trying to delete\nsomething that's not there.\n\n278\n00:16:42.450 --> 00:16:47.771\nOr maybe you have a set of products and\nyou don't want them to delete at all?\n\n279\n00:16:47.771 --> 00:16:48.585\n&gt;&gt; Mm-hm.\n&gt;&gt; Right,\n\n280\n00:16:48.585 --> 00:16:50.280\nyou wanna disable the ability to delete.\n\n281\n00:16:50.280 --> 00:16:53.680\nNow, full disclosure,\nif you knew a little it about Python,\n\n282\n00:16:53.680 --> 00:16:58.020\nyou could get behind in that list and\ngo ahead and delete it from the list.\n\n283\n00:16:58.020 --> 00:17:00.010\nSo there are ways around that.\n\n284\n00:17:00.010 --> 00:17:02.880\nBut maybe the list is\npopulated by a database,\n\n285\n00:17:02.880 --> 00:17:06.660\nand maybe the database\nis locked down as well.\n\n286\n00:17:06.660 --> 00:17:08.490\nSo you want to inform individuals.\n\n287\n00:17:08.490 --> 00:17:11.650\nWe'll kinda go the middle\nof the road here.\n\n288\n00:17:11.650 --> 00:17:15.980\nI went way too far,\nway too far down there, there we go.\n\n289\n00:17:15.980 --> 00:17:19.760\nAnd what I mean is, if the key's\nnot there, what do you wanna do?\n\n290\n00:17:20.970 --> 00:17:28.530\nWell, I'm gonna raise a key error,\nand say that product does not exist.\n\n291\n00:17:31.510 --> 00:17:34.940\nOkay, now this is just\nan alternative implementation.\n\n292\n00:17:34.940 --> 00:17:36.441\nI could use the missing key.\n\n293\n00:17:36.441 --> 00:17:37.157\n&gt;&gt; Mm-hm.\n\n294\n00:17:37.157 --> 00:17:37.848\n&gt;&gt; Right?\n\n295\n00:17:37.848 --> 00:17:42.152\nI think internal dict doesn't do this,\nit just kind of silently fails,\n\n296\n00:17:42.152 --> 00:17:44.150\ndoesn't do anything.\n\n297\n00:17:44.150 --> 00:17:46.960\nBut maybe your use case is,\nhey, if you're trying to delete\n\n298\n00:17:46.960 --> 00:17:49.070\nsomething that's not there,\nI'm gonna tell you about it,\n\n299\n00:17:49.070 --> 00:17:52.540\nbecause it could have possible\nramifications, depending on my setup.\n\n300\n00:17:52.540 --> 00:17:54.960\nSo that product does not exist.\n\n301\n00:17:54.960 --> 00:17:59.670\nSo now, if we come back, going to say,\nfive on three, getting setting.\n\n302\n00:17:59.670 --> 00:18:00.770\nYeah, that's beautiful.\n\n303\n00:18:00.770 --> 00:18:06.126\nAnd then, well we say inventory and\njust skip right to the point.\n\n304\n00:18:06.126 --> 00:18:08.355\nInventory.\n\n305\n00:18:08.355 --> 00:18:13.223\nYou know, I'm just gonna go with it,\n('cheese').\n\n306\n00:18:13.223 --> 00:18:15.830\nThat product does not exist.\n\n307\n00:18:15.830 --> 00:18:16.920\nThere we go.\n\n308\n00:18:16.920 --> 00:18:21.650\nRight, you can't delete something that's\nnot there and I'm gonna inform you of it.\n\n309\n00:18:21.650 --> 00:18:25.990\nI want things to fail explicitly because\nit allows me to know that I'm doing\n\n310\n00:18:25.990 --> 00:18:28.030\nsomething wrong,\nI don't like silent failures.\n\n311\n00:18:28.030 --> 00:18:29.720\nSo that might be something that I do.\n\n312\n00:18:29.720 --> 00:18:32.455\nFurthermore, if you want\nno deletions at all.\n\n313\n00:18:32.455 --> 00:18:33.210\n&gt;&gt; Mm-hm.\n\n314\n00:18:33.210 --> 00:18:33.710\n&gt;&gt; Right?\n\n315\n00:18:34.880 --> 00:18:37.480\nTechnically, you could\njust leave it as be.\n\n316\n00:18:37.480 --> 00:18:39.880\nRight, as we had before,\nremove the Dunderdale.\n\n317\n00:18:39.880 --> 00:18:44.620\nBut maybe you wanna custom message and\nsay, hey, no, no, no, no, no.\n\n318\n00:18:44.620 --> 00:18:47.410\nYou can't, don't delete anything at all.\n\n319\n00:18:47.410 --> 00:18:49.210\nAnd maybe you write a custom exception or\n\n320\n00:18:49.210 --> 00:18:52.020\na custom error, where you're like,\ndelete exception or\n\n321\n00:18:52.020 --> 00:18:56.700\ndelete error, or inventory delete error,\nand you raise that one with a message.\n\n322\n00:18:56.700 --> 00:19:00.780\nYou're not allowed to delete anything\nfrom the inventory, so keep that in mind.\n\n323\n00:19:00.780 --> 00:19:04.750\nThese are all handy methods and\nthey're pretty straightforward.\n\n324\n00:19:04.750 --> 00:19:10.420\nThey seem a little overwhelming at first,\nbut what do we have?\n\n325\n00:19:10.420 --> 00:19:13.675\nOver the last couple of episodes we have,\ndel item, well that makes sense,\n\n326\n00:19:13.675 --> 00:19:14.487\n&gt;&gt; Mm-hm, mm-hm.\n\n327\n00:19:14.487 --> 00:19:16.426\n&gt;&gt; Delete item.\nIt does use the same del operator,\n\n328\n00:19:16.426 --> 00:19:19.390\nas deleting an instance\nfrom a previous episode.\n\n329\n00:19:19.390 --> 00:19:22.620\nSo be careful with deleting\njust part of a data structure\n\n330\n00:19:22.620 --> 00:19:24.576\nnot an entire object in memory.\n\n331\n00:19:24.576 --> 00:19:27.240\nAnd actually,\nwe're just deleting the reference,\n\n332\n00:19:27.240 --> 00:19:28.478\nthe object may still be in the memory.\n\n333\n00:19:28.478 --> 00:19:30.430\nJust where it gets weird.\n\n334\n00:19:30.430 --> 00:19:33.765\nThis one's fine,\nthe deleting an instance gets weird.\n\n335\n00:19:33.765 --> 00:19:38.986\nSetting an item, where we're gonna\nupdate by some custom logic,\n\n336\n00:19:38.986 --> 00:19:41.610\npart of this interface, right?\n\n337\n00:19:42.690 --> 00:19:48.540\nAnd then, get item, well, we can just\nget an item based on custom logic.\n\n338\n00:19:48.540 --> 00:19:49.460\nIn this case,\n\n339\n00:19:49.460 --> 00:19:54.580\nwe're looking it up in the products\nlist in getting the corresponding price.\n\n340\n00:19:54.580 --> 00:20:00.140\nNow, get item, set item, del item,\nand even contains in missing,\n\n341\n00:20:00.140 --> 00:20:04.890\nthis is not the end-all be-all of logic,\nthis is just kind of an example, right?\n\n342\n00:20:04.890 --> 00:20:06.460\nI could make these very,\n\n343\n00:20:06.460 --> 00:20:11.130\nvery simple where get item looks\nin the underlying dictionary.\n\n344\n00:20:11.130 --> 00:20:14.960\nAnd in case you haven't messed\naround in Python a little bit,\n\n345\n00:20:14.960 --> 00:20:16.730\nevery time an object's created,\n\n346\n00:20:16.730 --> 00:20:21.360\nall of the data is held in this special\nattribute that is itself a dictionary.\n\n347\n00:20:21.360 --> 00:20:24.190\nSo an object is like\na wrapper around a dictionary\n\n348\n00:20:24.190 --> 00:20:27.500\nthat keeps you from doing dictionary-like\nthings, unless you want it to.\n\n349\n00:20:27.500 --> 00:20:29.710\nI know, it gets really complicated.\n\n350\n00:20:29.710 --> 00:20:36.440\nI could even do something\nof this nature for getitem.\n\n351\n00:20:36.440 --> 00:20:42.852\nAnd correspondingly, for\nsetitem, I could just say,\n\n352\n00:20:42.852 --> 00:20:47.510\nreturn self dict.get(key, None).\n\n353\n00:20:47.510 --> 00:20:50.440\nSo I could delegate that\nto the underlying one.\n\n354\n00:20:50.440 --> 00:20:54.214\nBut it's a little funner, too funner.\n\n355\n00:20:54.214 --> 00:20:54.782\n[CROSSTALK] Cause I like that.\n\n356\n00:20:54.782 --> 00:20:55.551\n&gt;&gt; Is funner a word?\n\n357\n00:20:55.551 --> 00:20:56.201\n&gt;&gt; I like funner.\n\n358\n00:20:56.201 --> 00:20:57.186\nIt's more fun.\n\n359\n00:20:57.186 --> 00:20:59.464\n&gt;&gt; From now on, we're gonna put\nfunner in the real dictionary-\n\n360\n00:20:59.464 --> 00:21:00.510\n&gt;&gt; [LAUGH] Yeah, I'm [CROSSTALK] not\n\n361\n00:21:00.510 --> 00:21:01.133\nsure it's there.\n\n362\n00:21:01.133 --> 00:21:03.734\n&gt;&gt; In the literal on your desk dictionary,\nfunner.\n\n363\n00:21:03.734 --> 00:21:06.748\n&gt;&gt; It's funny, I don't know if Zach's\nmaking fun of me or [CROSSTALK] not.\n\n364\n00:21:06.748 --> 00:21:09.240\n[LAUGH]\n&gt;&gt; No, no, no, no, I'm laughing with you.\n\n365\n00:21:09.240 --> 00:21:11.320\nWith you, I'm laughing with you,\nnot at you.\n\n366\n00:21:11.320 --> 00:21:13.871\n&gt;&gt; But when I'm not here,\nI'm gonna laugh at you.\n\n367\n00:21:13.871 --> 00:21:16.823\n[LAUGH]\n&gt;&gt; [LAUGH]\n\n368\n00:21:16.823 --> 00:21:18.792\n&gt;&gt; But this custom logic shows\n\n369\n00:21:18.792 --> 00:21:21.537\nus the power of what we're able to do.\n\n370\n00:21:21.537 --> 00:21:25.437\nAnd I've seen people do some\npretty slick things where,\n\n371\n00:21:25.437 --> 00:21:27.820\nthis look behaves like a list.\n\n372\n00:21:27.820 --> 00:21:32.040\nBut it has better runtime characteristics\nbecause behind the scenes it's not a list,\n\n373\n00:21:32.040 --> 00:21:36.290\nit's crazy data structures, like a red\nblack tree, and all these things.\n\n374\n00:21:36.290 --> 00:21:39.890\nSo you can get pretty slick with these and\nif nothing else,\n\n375\n00:21:39.890 --> 00:21:44.710\nit provides a nicer interface\nto accessing setting and\n\n376\n00:21:44.710 --> 00:21:48.220\ndeleting attributes from\nyour respective instance.\n\n377\n00:21:48.220 --> 00:21:52.230\nSo do keep that in mind and\nwell, there we are.\n\n378\n00:21:52.230 --> 00:21:53.480\nSo there you have it, Zach.\n\n379\n00:21:53.480 --> 00:21:55.400\n&gt;&gt; Setting and deleting items,\ngreat episode.\n\n380\n00:21:55.400 --> 00:21:58.733\nJustin did a wonderful job as usual,\nand before we move on,\n\n381\n00:21:58.733 --> 00:22:00.546\nwhat else would you like to say?\n\n382\n00:22:00.546 --> 00:22:04.350\n&gt;&gt; You know, Zach, now that you say that,\nI think I remembered just one other thing.\n\n383\n00:22:04.350 --> 00:22:05.220\n&gt;&gt; I knew'd it.\n\n384\n00:22:05.220 --> 00:22:10.670\n&gt;&gt; Just one other thing that, maybe we\nshould try, because behind the scenes,\n\n385\n00:22:10.670 --> 00:22:14.550\nmaybe this is, some of you are like,\nwell, do I have to use the bracket syntax?\n\n386\n00:22:14.550 --> 00:22:17.220\nI thought objects had the dot syntax?\n\n387\n00:22:17.220 --> 00:22:19.160\nSo maybe we should test that out.\n\n388\n00:22:19.160 --> 00:22:21.158\n&gt;&gt; And I have a question,\ndo I have to use the brackets?\n\n389\n00:22:21.158 --> 00:22:23.210\n&gt;&gt; [LAUGH] Yes, see?\n\n390\n00:22:23.210 --> 00:22:24.700\nZach, Zach had it [CROSSTALK]\n&gt;&gt; He read my mind.\n\n391\n00:22:24.700 --> 00:22:25.450\n[LAUGH]\n&gt;&gt; Yeah, I did,\n\n392\n00:22:25.450 --> 00:22:27.150\nI'm in there creeping around.\n\n393\n00:22:27.150 --> 00:22:28.830\nWhat's going on?\n\n394\n00:22:28.830 --> 00:22:30.472\nAnd then I run away.\n\n395\n00:22:30.472 --> 00:22:36.050\nSo let's get out of here and see, because\nfor dictionaries, you can't do that.\n\n396\n00:22:36.050 --> 00:22:37.757\n&gt;&gt; Right.\n&gt;&gt; Dictionaries, those are not allowed.\n\n397\n00:22:37.757 --> 00:22:38.377\n&gt;&gt; Okay.\n&gt;&gt; But\n\n398\n00:22:38.377 --> 00:22:41.970\nmaybe classes behave\na little bit differently.\n\n399\n00:22:41.970 --> 00:22:46.190\nAnd wait for it, getting, there we go.\n\n400\n00:22:46.190 --> 00:22:53.410\nSo here's our inventory, and\nwhat I'm saying is, inventory.leds.\n\n401\n00:22:53.410 --> 00:22:55.976\nInventory does not have an attribute leds.\n\n402\n00:22:55.976 --> 00:22:58.580\nSo it's only if you're like,\nbut I want that.\n\n403\n00:23:00.500 --> 00:23:01.228\nYeah.\nWell,\n\n404\n00:23:01.228 --> 00:23:05.125\nyou're gonna have to wait on that\ncuz that's a whole different thing.\n\n405\n00:23:05.125 --> 00:23:07.100\n&gt;&gt; Mm-hm.\n&gt;&gt; Which is kind of interesting.\n\n406\n00:23:07.100 --> 00:23:10.259\nForgetting and setting items is\nthe dictionary-like some text.\n\n407\n00:23:10.259 --> 00:23:12.567\nFor this,\nit's a little something different.\n\n408\n00:23:12.567 --> 00:23:17.400\nSo if you're like, well, I thought that\nwas gonna make it a little easier.\n\n409\n00:23:17.400 --> 00:23:18.808\nNot quite, but we'll get there.\n\n410\n00:23:18.808 --> 00:23:21.250\n&gt;&gt; And once again,\nsetting and deleting items.\n\n411\n00:23:21.250 --> 00:23:22.000\nGreat episode.\n\n412\n00:23:22.000 --> 00:23:22.910\nThanks, Justin.\n\n413\n00:23:22.910 --> 00:23:23.690\nOkay, one last time.\n\n414\n00:23:23.690 --> 00:23:25.330\nAnything else you'd like to say?\n\n415\n00:23:25.330 --> 00:23:28.430\n&gt;&gt; You know, Zach, I think that\ncovers all my basis at this point.\n\n416\n00:23:28.430 --> 00:23:30.300\nThere are a few of\nthe things that we can do,\n\n417\n00:23:30.300 --> 00:23:36.170\nnot necessarily with the Dunder item\nmethods, but things that are similar.\n\n418\n00:23:36.170 --> 00:23:38.350\nBut we'll have to save those for\nanother episode.\n\n419\n00:23:38.350 --> 00:23:40.170\n&gt;&gt; Fantastic and\nthere will be more episodes and\n\n420\n00:23:40.170 --> 00:23:43.650\nthere are more episodes inside\nthe Python Data Model Series.\n\n421\n00:23:43.650 --> 00:23:44.632\nSo make sure you see everything.\n\n422\n00:23:44.632 --> 00:23:47.405\nJustin's done a wonderful job,\nand inside that course library,\n\n423\n00:23:47.405 --> 00:23:50.170\nthere's thousands of other videos\ndesigned to help you go further.\n\n424\n00:23:50.170 --> 00:23:51.370\nSo check those out too.\n\n425\n00:23:51.370 --> 00:23:53.377\nAnd tell everybody you\nknow about DevPro.TV.\n\n426\n00:23:53.377 --> 00:23:55.330\nYou know,\na good Dev Pro is always learning.\n\n427\n00:23:55.330 --> 00:23:56.820\nThank for watching, I'm Zack Memos.\n\n428\n00:23:56.820 --> 00:23:57.550\n&gt;&gt; And I'm Justin Dennison.\n\n429\n00:23:57.550 --> 00:23:59.023\n&gt;&gt; And we will see you soon.\n\n430\n00:23:59.023 --> 00:24:04.439\n[MUSIC]\n\n",
          "vimeoId": "252216855"
        }
      ],
      "title": "Containers"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Zach take a look at the ability to coerce a custom object to True or False based on the \\_\\_bool\\_\\_ methods.",
          "length": "1371",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-1-1-obtaining_the_boolean_representation-012218-PGM.00_00_12_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-1-1-obtaining_the_boolean_representation-012218-PGM.00_00_12_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-1-1-obtaining_the_boolean_representation-012218-PGM.00_00_12_19.Still001-sm.jpg",
          "title": "Obtaining the Boolean Representation",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.891 --> 00:00:16.405\nHello, and thank you for choosing DEVPro\nTV, helping you learn wherever you go.\n\n3\n00:00:16.405 --> 00:00:20.660\nI'm your host Zach Memos,\nas we continue on with Python Data Model.\n\n4\n00:00:20.660 --> 00:00:24.880\nThe name of this episode is obtaining\nthe Boolean representation.\n\n5\n00:00:24.880 --> 00:00:25.760\nWhat does it all mean?\n\n6\n00:00:25.760 --> 00:00:27.330\nWell, Justin Dennison is here to tell us.\n\n7\n00:00:27.330 --> 00:00:28.375\nJustin, good to see you, sir.\n\n8\n00:00:28.375 --> 00:00:29.902\n&gt;&gt; It's good to be back in the studios,\nZach.\n\n9\n00:00:29.902 --> 00:00:30.720\nAnd how are you today?\n\n10\n00:00:30.720 --> 00:00:34.568\n&gt;&gt; Well, I'm excited to learn more\nabout the Boolean representation.\n\n11\n00:00:34.568 --> 00:00:38.840\n&gt;&gt; The Boolean representation, and well,\nagain, this is some assumptions here.\n\n12\n00:00:38.840 --> 00:00:42.243\nYou've been programming for a little bit\nand you know what a Boolean is, right?\n\n13\n00:00:42.243 --> 00:00:48.393\nSo Python is kind of it's a little\ndynamic, a little wishy washy.\n\n14\n00:00:48.393 --> 00:00:51.870\nIt has this feel where\nit's not really a true or\n\n15\n00:00:51.870 --> 00:00:55.730\nfalse value, but\nit can be truthy or falsey.\n\n16\n00:00:55.730 --> 00:00:58.780\nAnd ultimately,\nthat's what we're gonna deal with today.\n\n17\n00:00:58.780 --> 00:01:04.630\nNow, before we worry about creating a\ncustom object that does said thing, right?\n\n18\n00:01:04.630 --> 00:01:07.751\nI think it's important to see how\nthis may be used in some code.\n\n19\n00:01:07.751 --> 00:01:12.314\nAnd maybe you're just learning this in and\nof itself, right, the truthy,\n\n20\n00:01:12.314 --> 00:01:13.970\nfalsey portion of Python.\n\n21\n00:01:13.970 --> 00:01:17.720\nAnd, well,\nI use this in my code a great deal.\n\n22\n00:01:17.720 --> 00:01:18.815\nThe down side is,\n\n23\n00:01:18.815 --> 00:01:24.001\nif you're working with other programmers\nthat come from different backgrounds and\n\n24\n00:01:24.001 --> 00:01:28.983\naren't used to leveraging truthy or\nfalsey, then things can get a little iffy.\n\n25\n00:01:28.983 --> 00:01:32.275\nSo buyer beware kind of on this one.\n\n26\n00:01:32.275 --> 00:01:33.695\n&gt;&gt; [LAUGH]\n&gt;&gt; So let's go ahead and\n\n27\n00:01:33.695 --> 00:01:35.516\ntake a look at the screen here and\n\n28\n00:01:35.516 --> 00:01:38.771\nsee how this can be used,\nthis Boolean representation.\n\n29\n00:01:38.771 --> 00:01:40.420\nYou don't even know it's really happening.\n\n30\n00:01:41.450 --> 00:01:46.060\nLet's be a little more explicit about it,\nand then let's see how it's used, and\n\n31\n00:01:46.060 --> 00:01:48.000\nthen let's actually create\nan object that does that.\n\n32\n00:01:48.000 --> 00:01:54.465\nSo if we look at Python 3, Python 4,\nwe traveled to the future all of a sudden.\n\n33\n00:01:54.465 --> 00:01:58.840\n[LAUGH] So we go to Python 3,\nand let's create a few things.\n\n34\n00:01:58.840 --> 00:02:01.530\nLet's create a list that\njust has some numbers in it.\n\n35\n00:02:01.530 --> 00:02:03.940\nLet's create a list that is empty.\n\n36\n00:02:03.940 --> 00:02:10.486\nLet's create a dictionary that has\na single key in it, just because I'm lazy.\n\n37\n00:02:10.486 --> 00:02:15.340\nAnd now let's create an empty dictionary,\nas such.\n\n38\n00:02:15.340 --> 00:02:18.160\nAnd I accidentally over wrote\nthe previous dictionary, so\n\n39\n00:02:18.160 --> 00:02:20.840\nlet's actually change\nthat to the letter D.\n\n40\n00:02:20.840 --> 00:02:27.089\nSo, if I clear the screen out, and I go A,\nB, C, let's clear the screen out again.\n\n41\n00:02:27.089 --> 00:02:28.372\nLet's try that one more time.\n\n42\n00:02:28.372 --> 00:02:29.871\n&gt;&gt; [LAUGH]\n&gt;&gt; A, B, C, D,\n\n43\n00:02:29.871 --> 00:02:33.040\nwe have these respective\nobjects in memory.\n\n44\n00:02:33.040 --> 00:02:35.300\nNow, that's all fine and good.\n\n45\n00:02:36.320 --> 00:02:40.880\nNow, true and false are typically\nwhat we think of as Booleans.\n\n46\n00:02:40.880 --> 00:02:44.508\nAnd in Python, they're True and\nFalse with capital letters and\n\n47\n00:02:44.508 --> 00:02:47.500\nthey have a very particular meaning,\nright?\n\n48\n00:02:47.500 --> 00:02:51.909\nSo if True, that means do that thing,\nor while True.\n\n49\n00:02:51.909 --> 00:02:56.003\nWell, if I look and there's this function,\n\n50\n00:02:56.003 --> 00:03:01.412\nthat top level, then I can say,\nwhat is the bool of true?.\n\n51\n00:03:01.412 --> 00:03:02.242\nWell, it's True.\n\n52\n00:03:02.242 --> 00:03:04.227\nWhat is the bool of False?\n\n53\n00:03:04.227 --> 00:03:07.350\nWell, it's False,\nthat's what we're getting.\n\n54\n00:03:07.350 --> 00:03:14.428\nBut what is the Boolean representation\nof a, which is a list with stuff in it.\n\n55\n00:03:14.428 --> 00:03:16.119\nIt's True.\n\n56\n00:03:16.119 --> 00:03:18.770\nIt's a non-empty list.\n\n57\n00:03:18.770 --> 00:03:20.710\nWhat about b?\n\n58\n00:03:20.710 --> 00:03:21.451\nIt's False.\n\n59\n00:03:21.451 --> 00:03:25.799\nSo if a list has something in it,\nit's True.\n\n60\n00:03:25.799 --> 00:03:29.282\nAnd if it has nothing in it,\nit's False, right?\n\n61\n00:03:29.282 --> 00:03:33.380\nIt's kinda like 0, 1, there's\nsomething there, or there's nothing.\n\n62\n00:03:33.380 --> 00:03:39.660\nLikewise if I use lool(c),\nwell that's True because what is it?\n\n63\n00:03:39.660 --> 00:03:40.975\nIt has something in it.\n\n64\n00:03:40.975 --> 00:03:46.090\nBut let's look at bool(t) and that's\nFalse because it's an empty dictionary.\n\n65\n00:03:46.090 --> 00:03:47.973\nAnd by and large, not always.\n\n66\n00:03:47.973 --> 00:03:51.150\nSo be very careful, we're actually\ngonna touch on that in this episode.\n\n67\n00:03:52.210 --> 00:03:56.770\nIf it has something in it and it's a\ncomplex data structure, it's True, right?\n\n68\n00:03:56.770 --> 00:03:59.430\nIf it has nothing in it,\nit's the empty version, right?\n\n69\n00:03:59.430 --> 00:04:00.410\nIt's a list with nothing in it.\n\n70\n00:04:00.410 --> 00:04:01.880\nIt's a dictionary with nothing in it.\n\n71\n00:04:01.880 --> 00:04:02.981\nIt's a set with nothing in it.\n\n72\n00:04:02.981 --> 00:04:04.213\nI'm pretty sure a set does that.\n\n73\n00:04:04.213 --> 00:04:06.760\nThere's no better way than to find out.\n\n74\n00:04:06.760 --> 00:04:07.942\nSo s = set.\n\n75\n00:04:07.942 --> 00:04:09.513\nSo what is that?\n\n76\n00:04:09.513 --> 00:04:10.816\nWhat's a set?\n\n77\n00:04:10.816 --> 00:04:14.079\nAnd what is the Boolean\nrepresentation of s?\n\n78\n00:04:14.079 --> 00:04:15.490\nIs False.\n\n79\n00:04:15.490 --> 00:04:17.945\nWhat if I say, add 1?\n\n80\n00:04:17.945 --> 00:04:19.983\nSo now s has a 1 in it.\n\n81\n00:04:19.983 --> 00:04:24.732\nAnd it gets really confusing cuz\nthe curly braces are dictionaries and\n\n82\n00:04:24.732 --> 00:04:27.530\nsets, so no key value pairs as a set.\n\n83\n00:04:27.530 --> 00:04:29.360\nKey value pairs are dictionaries.\n\n84\n00:04:29.360 --> 00:04:32.080\nLet's look at the Boolean\nrepresentation of s now.\n\n85\n00:04:32.080 --> 00:04:34.410\nIt is True because it has\nsomething within the set.\n\n86\n00:04:35.640 --> 00:04:43.590\nNow, given these constraints,\nhow do I use this in my code, right?\n\n87\n00:04:43.590 --> 00:04:48.610\nWell let's look at the list, and I'm gonna\ndo something kind of interesting here.\n\n88\n00:04:48.610 --> 00:04:51.724\nSo while a, so what is a?\n\n89\n00:04:51.724 --> 00:04:54.970\nWell, a is that list with something in it.\n\n90\n00:04:54.970 --> 00:05:01.019\nWhile a, and\nI'm just gonna say count += a.pop.\n\n91\n00:05:01.019 --> 00:05:03.720\nI'm gonna pop off the end of the list.\n\n92\n00:05:03.720 --> 00:05:06.530\nAnd run, and it didn't run forever.\n\n93\n00:05:06.530 --> 00:05:07.490\nWhat's in a now?\n\n94\n00:05:07.490 --> 00:05:08.350\nNothing.\n\n95\n00:05:08.350 --> 00:05:10.284\nI mutated the list so\nthat gets a little weird.\n\n96\n00:05:10.284 --> 00:05:11.352\nWhat's in count?\n\n97\n00:05:11.352 --> 00:05:12.411\n6.\n\n98\n00:05:12.411 --> 00:05:15.337\nWell, a had 1, 2, 3 in it.\n\n99\n00:05:15.337 --> 00:05:17.420\nWhat happened to it?\n\n100\n00:05:17.420 --> 00:05:21.514\nWell, I grabbed 3, right here and\nI added to the count.\n\n101\n00:05:21.514 --> 00:05:23.720\nAnd then I grabbed 2 and\nthen I added to the count.\n\n102\n00:05:23.720 --> 00:05:26.260\nSo I pulled the pieces off the list.\n\n103\n00:05:26.260 --> 00:05:28.420\nI used a little bit like a cue here.\n\n104\n00:05:28.420 --> 00:05:33.440\nI'm not saying you should do that, but\nI can do things just like this list.\n\n105\n00:05:33.440 --> 00:05:36.560\nLet's reset a to 1,2,3.\n\n106\n00:05:36.560 --> 00:05:41.520\nAnd I can also say, if a, print('the\n\n107\n00:05:41.520 --> 00:05:45.447\nlist has something in it').\n\n108\n00:05:47.240 --> 00:05:48.050\nSomething in it.\n\n109\n00:05:50.320 --> 00:05:52.980\nElse it is empty.\n\n110\n00:05:53.990 --> 00:05:55.630\nJust like so.\n\n111\n00:05:55.630 --> 00:05:57.345\nAll right, the list has something in it,\n\n112\n00:05:57.345 --> 00:05:59.790\nthat's because it evaluated\nto true because it has in it.\n\n113\n00:05:59.790 --> 00:06:04.190\nBut if I change that exact same\nthing to b which is an empty list,\n\n114\n00:06:04.190 --> 00:06:10.220\nit doesn't matter what I print here cuz it\nwill never print because that is falsey.\n\n115\n00:06:10.220 --> 00:06:14.763\nLikewise, I can do something similar with\n\n116\n00:06:14.763 --> 00:06:19.189\ndictionaries where I can create a total.\n\n117\n00:06:19.189 --> 00:06:20.956\nAnd what's in that dictionary?\n\n118\n00:06:20.956 --> 00:06:21.614\nC.\n\n119\n00:06:21.614 --> 00:06:22.702\nAll right, so total.\n\n120\n00:06:22.702 --> 00:06:23.915\nGot it.\n\n121\n00:06:23.915 --> 00:06:29.906\nAnd, well, I can say,\n\n122\n00:06:29.906 --> 00:06:33.206\nwhile True.\n\n123\n00:06:33.206 --> 00:06:38.475\nAnd I'm hoping I don't mistype here and\nsend my computer into infinite loop.\n\n124\n00:06:38.475 --> 00:06:41.475\nIf c, then c,\n\n125\n00:06:41.475 --> 00:06:46.978\nI think I can do a pop here.\n\n126\n00:06:46.978 --> 00:06:51.963\nThis is one of those I don't do this\na great deal with dictionaries, but\n\n127\n00:06:51.963 --> 00:06:52.970\nyou can do it.\n\n128\n00:06:52.970 --> 00:06:55.520\nI typically use a little list or queues.\n\n129\n00:06:55.520 --> 00:06:59.015\nTotal equals c pop.\n\n130\n00:06:59.015 --> 00:07:05.950\nAnd otherwise, I got unindent.\n\n131\n00:07:05.950 --> 00:07:07.620\nWhat is going on here?\n\n132\n00:07:07.620 --> 00:07:08.680\nLet's just try this.\n\n133\n00:07:09.830 --> 00:07:16.374\nInstead if c, just to simplify and\nnot to get really bogged down here.\n\n134\n00:07:16.374 --> 00:07:24.653\nI can do print['len'(c)], so it's 1.\n\n135\n00:07:24.653 --> 00:07:26.700\nThat's because there's one key in there.\n\n136\n00:07:26.700 --> 00:07:29.610\nAnd then I can do exactly\nthe same thing with d.\n\n137\n00:07:29.610 --> 00:07:35.530\nSo if the len(d), and it won't print\nanything because it's not there.\n\n138\n00:07:35.530 --> 00:07:39.100\nBut I am interested to see if c.pop works.\n\n139\n00:07:39.100 --> 00:07:40.508\nAnd pop.\n\n140\n00:07:40.508 --> 00:07:45.290\nI gotta give it a key in the context of\na dictionary, so whoopsie Daisy on me.\n\n141\n00:07:45.290 --> 00:07:47.860\nSo I ought to have some weirdness there.\n\n142\n00:07:47.860 --> 00:07:51.460\nAgain, just to reiterate, I don't do\nthat a great deal with dictionaries.\n\n143\n00:07:51.460 --> 00:07:53.489\nThe only time I'll use dictionaries,\n\n144\n00:07:53.489 --> 00:07:57.496\nthe Booloean representation is just to\ncheck is the dictionary empty or not.\n\n145\n00:07:57.496 --> 00:08:02.375\nFor lists and queues, there are times\nwhere I'll use the truthy falsey.\n\n146\n00:08:02.375 --> 00:08:06.314\nAnd while loops so I can process a bunch\nof stuff without having to say for blah,\n\n147\n00:08:06.314 --> 00:08:07.820\nblah, blah, blah.\n\n148\n00:08:07.820 --> 00:08:10.811\nCuz with a queue,\nthe queue may be changing,\n\n149\n00:08:10.811 --> 00:08:16.108\nthe list may be changing based on other\nprocesses, so there are times for that.\n\n150\n00:08:16.108 --> 00:08:23.147\nNow by default,\nlets start with the boolean.py.\n\n151\n00:08:23.147 --> 00:08:28.080\nAnd actually I am going to change\nthat cuz I am not sure Boolean\n\n152\n00:08:28.080 --> 00:08:32.225\nmight be a reserved\nmodule inside of Python.\n\n153\n00:08:32.225 --> 00:08:34.005\nSo I have to be careful.\n\n154\n00:08:34.005 --> 00:08:36.445\nHow about boolean representation?\n\n155\n00:08:37.620 --> 00:08:41.010\nJust like so, .py.\n\n156\n00:08:41.010 --> 00:08:45.608\nAnd I was thinking about this, I do\na little bit of math, just a little bit.\n\n157\n00:08:45.608 --> 00:08:47.935\n&gt;&gt; [LAUGH]\n&gt;&gt; It doesn't have to\n\n158\n00:08:47.935 --> 00:08:48.664\nbe a whole lot of math.\n\n159\n00:08:48.664 --> 00:08:50.129\n&gt;&gt; He does a lot of math\ndon't let him kid you.\n\n160\n00:08:50.129 --> 00:08:53.166\n&gt;&gt; You're giving away my secrets, Zach.\n\n161\n00:08:53.166 --> 00:08:56.015\nDon't give away my secrets.\n\n162\n00:08:56.015 --> 00:08:59.770\nSometimes we need some\nway to determine a point.\n\n163\n00:08:59.770 --> 00:09:04.880\nNow, I'm not saying this has to be math\nlike you learned in high school or\n\n164\n00:09:04.880 --> 00:09:06.320\nmaybe even college.\n\n165\n00:09:06.320 --> 00:09:09.272\nBut maybe this is very particular,\nyou're writing a simulation.\n\n166\n00:09:09.272 --> 00:09:14.804\nMaybe you wanna know something about\nmigratory dynamics of migratory birds,\n\n167\n00:09:14.804 --> 00:09:17.923\nor migration dynamics of migratory birds.\n\n168\n00:09:17.923 --> 00:09:20.200\nSo maybe you wanna know about the cicada.\n\n169\n00:09:20.200 --> 00:09:22.372\nMan, I'll tell you what, I was\nwatching some crazy stuff on cicadas.\n\n170\n00:09:22.372 --> 00:09:22.925\n&gt;&gt; Here we go.\n\n171\n00:09:22.925 --> 00:09:25.902\n[LAUGH]\n&gt;&gt; And that would be an interesting study,\n\n172\n00:09:25.902 --> 00:09:29.110\nthat's all I'm gonna leave as far as that.\n\n173\n00:09:29.110 --> 00:09:33.470\nBut I need some way to represent their\nposition, and maybe that's a pair, right,\n\n174\n00:09:33.470 --> 00:09:35.350\nan x and y pair on a map.\n\n175\n00:09:36.530 --> 00:09:37.636\nSo this was kinda my mindset.\n\n176\n00:09:37.636 --> 00:09:40.623\nI wanted to give you some backdrop\nof why we have a pair object.\n\n177\n00:09:40.623 --> 00:09:45.712\nAnd I'm going to real quick\njust make a repo method,\n\n178\n00:09:45.712 --> 00:09:48.380\nit's a pretty simple one.\n\n179\n00:09:49.730 --> 00:09:57.053\nAnd I'm gonna make use of f strings,\n\n180\n00:09:57.053 --> 00:10:04.384\npair x= self.x, and y = self.y.\n\n181\n00:10:04.384 --> 00:10:12.726\nAnd these f-strings are only available\nin Python 3.6 if I'm not mistaken.\n\n182\n00:10:12.726 --> 00:10:13.883\nIt might be in 3.5.\n\n183\n00:10:13.883 --> 00:10:16.050\nSo do keep that in mind.\n\n184\n00:10:16.050 --> 00:10:20.250\nYou can use the dot format method\nas you've seen in other things.\n\n185\n00:10:20.250 --> 00:10:24.050\nAll right, so\nlet's see how these pairs work out.\n\n186\n00:10:24.050 --> 00:10:25.480\nSo, pair.\n\n187\n00:10:25.480 --> 00:10:26.630\nLet's create a couple of pairs.\n\n188\n00:10:27.820 --> 00:10:30.933\nOne, and\nI can even call this point in all honesty.\n\n189\n00:10:30.933 --> 00:10:35.140\nI could say 0, 0.\n\n190\n00:10:35.140 --> 00:10:41.825\nAnd then pair 2 is Pair(1,\n3), just like that.\n\n191\n00:10:41.825 --> 00:10:45.699\nAnd now let's bring\nthese into the repo and\n\n192\n00:10:45.699 --> 00:10:49.902\nsay python3 -i boolean_representation.\n\n193\n00:10:49.902 --> 00:10:55.924\nAnd you've gotta put an ending\nquote there, that's important.\n\n194\n00:10:55.924 --> 00:10:59.950\nCuz if you don't, stuff is broken.\n\n195\n00:10:59.950 --> 00:11:01.100\nThere we go, fixed.\n\n196\n00:11:02.230 --> 00:11:02.850\nAnd there we go.\n\n197\n00:11:02.850 --> 00:11:06.049\nSo I have p1, there's my pair,\np2, there's my other pair.\n\n198\n00:11:06.049 --> 00:11:07.712\nSo I have my pairs now, right?\n\n199\n00:11:07.712 --> 00:11:11.600\nGood deal, it looks good, but\n\n200\n00:11:11.600 --> 00:11:16.393\nif I look at bool(p1), I get true.\n\n201\n00:11:19.563 --> 00:11:22.141\nBool(p2), I get true.\n\n202\n00:11:22.141 --> 00:11:26.780\nThat doesn't make a whole\nlot of sense to me, right?\n\n203\n00:11:26.780 --> 00:11:32.590\nNow, That's based on the context\nof how I'm thinking.\n\n204\n00:11:32.590 --> 00:11:37.140\nIf both things are 0,\nI would think that would be false, right?\n\n205\n00:11:37.140 --> 00:11:39.670\nAnd then everything else is true, right?\n\n206\n00:11:39.670 --> 00:11:43.550\nI have some value, whether it will be 1,\n3, or negative 1, negative 3.\n\n207\n00:11:43.550 --> 00:11:45.932\nThere's something there other than 0s.\n\n208\n00:11:45.932 --> 00:11:48.650\nBut here it's saying, even if they're 0s,\nthere's something there.\n\n209\n00:11:48.650 --> 00:11:52.780\nAnd by default, when you create a custom\nobject, you kinda get this behavior.\n\n210\n00:11:53.860 --> 00:11:57.870\nIf p1, well, p1 exist so yes.\n\n211\n00:11:57.870 --> 00:11:59.657\nBut there is a way to\noverride that behavior.\n\n212\n00:11:59.657 --> 00:12:04.319\nAnd I'm saying if it's 0,\nright, if it's 0,\n\n213\n00:12:04.319 --> 00:12:09.388\n0, then I want to do\nsomething a little different.\n\n214\n00:12:09.388 --> 00:12:14.440\nAnd we're gonna do it a little\nbit different just to show you,\n\n215\n00:12:14.440 --> 00:12:16.140\nyou can do some crazy stuff here.\n\n216\n00:12:18.440 --> 00:12:19.650\nLet's see here.\n\n217\n00:12:20.740 --> 00:12:23.260\nHow do I get that boolean representation.\n\n218\n00:12:23.260 --> 00:12:26.910\nWell, just like a lot of the other times,\nthe function name gives you a hint at\n\n219\n00:12:26.910 --> 00:12:29.505\nthe dunner method that\nyou're gonna be overwriting.\n\n220\n00:12:32.288 --> 00:12:33.603\nAnd now what am I gonna return?\n\n221\n00:12:33.603 --> 00:12:40.258\nWell, I'm gonna return the Boolean\n\n222\n00:12:40.258 --> 00:12:45.844\nof self x times self y, right?\n\n223\n00:12:45.844 --> 00:12:51.050\nSo I'm now gonna now take those two\nnumbers and I'm just arbitrarily saying\n\n224\n00:12:51.050 --> 00:12:55.867\nmultiply them together and\nsee if there's something there, right?\n\n225\n00:12:55.867 --> 00:13:00.960\nWhat this will also say is if either\none of them is 0, I'm gonna get a 0.\n\n226\n00:13:00.960 --> 00:13:03.670\nAll right, and we'll see that shortly.\n\n227\n00:13:05.370 --> 00:13:06.316\nSo there's the boolean representation.\n\n228\n00:13:06.316 --> 00:13:10.780\nSo if I look at p1, p2, there they are.\n\n229\n00:13:10.780 --> 00:13:16.190\nAnd now, if I look at the bool (p2),\nI still get true,\n\n230\n00:13:16.190 --> 00:13:20.710\nthe bool (p1),\nI now get false because they're both 0.\n\n231\n00:13:20.710 --> 00:13:22.390\nSo 0 times 0 is 0.\n\n232\n00:13:22.390 --> 00:13:24.540\nWhat is the boolean representation of 0?\n\n233\n00:13:24.540 --> 00:13:26.420\nWell, in Python it is false.\n\n234\n00:13:26.420 --> 00:13:28.890\nI can actually use those\nkind of interchangeably\n\n235\n00:13:28.890 --> 00:13:31.100\njust like I did with List and\nthings of that nature.\n\n236\n00:13:32.750 --> 00:13:36.559\nInterestingly enough,\nif I come here and make a P3, right?\n\n237\n00:13:36.559 --> 00:13:39.584\nLet's say a -1, 3.\n\n238\n00:13:39.584 --> 00:13:41.451\nI just changed the sign of the first one.\n\n239\n00:13:41.451 --> 00:13:43.883\nNow look at p3.\n\n240\n00:13:43.883 --> 00:13:47.165\nI wonder if that's going to work.\n\n241\n00:13:47.165 --> 00:13:49.250\nAnd it still does.\n\n242\n00:13:49.250 --> 00:13:50.740\nIt's saying there's something there.\n\n243\n00:13:50.740 --> 00:13:51.990\nIt doesn't matter whether it's negative or\n\n244\n00:13:51.990 --> 00:13:56.020\npositive, it's just\nneither one of them are 0.\n\n245\n00:13:56.020 --> 00:13:57.218\nThis is very much context.\n\n246\n00:13:57.218 --> 00:14:01.630\nIt is dependent on what you\nare trying to accomplish with your\n\n247\n00:14:01.630 --> 00:14:04.440\nrespective custom class.\n\n248\n00:14:04.440 --> 00:14:09.902\nNow, I've avoided something here that\ncould be an issue by using multiplication.\n\n249\n00:14:09.902 --> 00:14:16.993\nIf I create a p4 and I say,\n(0, 3) then the bool(p4),\n\n250\n00:14:16.993 --> 00:14:21.690\nit's false because 0 times 3 is still 0.\n\n251\n00:14:21.690 --> 00:14:23.870\nSo I still get a false thing.\n\n252\n00:14:25.080 --> 00:14:28.132\nBut if I were to change this\nboolean representation.\n\n253\n00:14:28.132 --> 00:14:36.050\nAnd I'm doing this just to be explicit of\nthings you need to concern yourself with.\n\n254\n00:14:37.350 --> 00:14:44.105\nIf I instead change this to, I think it's\ny divided by x, is what I have here.\n\n255\n00:14:47.355 --> 00:14:49.697\nSo y divided by x, okay?\n\n256\n00:14:52.502 --> 00:14:54.509\nIf you were to do this, right?\n\n257\n00:14:54.509 --> 00:14:59.187\nAnd maybe this makes sense\nin your specific context.\n\n258\n00:14:59.187 --> 00:15:02.818\nYou're like, okay, well,\nfrom a math perspective,\n\n259\n00:15:02.818 --> 00:15:05.352\ny divided by x, what would that be?\n\n260\n00:15:05.352 --> 00:15:07.226\nWell, that might be, is that the tangent?\n\n261\n00:15:07.226 --> 00:15:11.220\nI think that's the tangent of\nthe angle between that, all right?\n\n262\n00:15:11.220 --> 00:15:12.307\nWho knows?\n&gt;&gt; [LAUGH]\n\n263\n00:15:12.307 --> 00:15:14.330\n&gt;&gt; Who knows?\n\n264\n00:15:14.330 --> 00:15:17.630\nMaybe these are representations of\nvectors or something of that nature.\n\n265\n00:15:17.630 --> 00:15:20.389\nWe're using a pair, but\nit could be a wide variety of things.\n\n266\n00:15:20.389 --> 00:15:23.643\nAnd your background might\nbe different than mine, but\n\n267\n00:15:23.643 --> 00:15:27.220\nyou still need to think about\nthese respective things.\n\n268\n00:15:27.220 --> 00:15:29.235\n&gt;&gt; So p1 looks fine.\n\n269\n00:15:29.235 --> 00:15:35.931\nP2, if I do the bool (P2),\nnot the bool(2).\n\n270\n00:15:35.931 --> 00:15:38.710\nP2, I still get true.\n\n271\n00:15:38.710 --> 00:15:41.766\nIf I do the bool(p1) and\nI get a division by 0 error.\n\n272\n00:15:41.766 --> 00:15:48.120\nAnd the reason being is x and\ny are both 0.\n\n273\n00:15:48.120 --> 00:15:49.200\nWhat's 0 divided by 0?\n\n274\n00:15:49.200 --> 00:15:53.488\nWell, I divided by 0,\nhow do I divide nothing into nothing?\n\n275\n00:15:53.488 --> 00:15:54.711\nWell, that doesn't make sense.\n\n276\n00:15:54.711 --> 00:15:59.247\nAnd we're not here to talk about\nwhat does divide by 0 mean then.\n\n277\n00:15:59.247 --> 00:16:02.685\nI still have an exception or excuse me,\nan error that is thrown at run time and\n\n278\n00:16:02.685 --> 00:16:05.325\nI would never be able to use\nthis baloon representation.\n\n279\n00:16:05.325 --> 00:16:08.996\nLikewise-\n&gt;&gt; The answer is 42\n\n280\n00:16:08.996 --> 00:16:09.750\n&gt;&gt; Hah 42,\n\n281\n00:16:09.750 --> 00:16:12.210\nnice Hitchikers Guide to\nthe Galaxy reference.\n\n282\n00:16:12.210 --> 00:16:17.590\n&gt;&gt; There you go, he's on to me\n&gt;&gt; Something like this.\n\n283\n00:16:17.590 --> 00:16:22.804\nIf I do something like this, if P1,\neven if I don't directly call bool,\n\n284\n00:16:22.804 --> 00:16:27.430\nbehind the scenes if I'm using if or\nwhile or things of that nature.\n\n285\n00:16:27.430 --> 00:16:30.730\nIt's calling that bool\non top of that pair.\n\n286\n00:16:30.730 --> 00:16:32.870\nI'm still gonna get\na divide by zero error.\n\n287\n00:16:33.970 --> 00:16:36.290\nSo, how do I fix that?\n\n288\n00:16:36.290 --> 00:16:41.090\nI need to put that logic\ninside of my dunder bool.\n\n289\n00:16:41.090 --> 00:16:43.181\nIt sounds like I'm saying bull.\n\n290\n00:16:43.181 --> 00:16:45.996\n[LAUGH]\n&gt;&gt; But it's bool.\n\n291\n00:16:45.996 --> 00:16:47.390\n&gt;&gt; Bool.\n&gt;&gt; B O O L.\n\n292\n00:16:47.390 --> 00:16:49.430\nMan, that is hard to say.\n\n293\n00:16:49.430 --> 00:16:52.660\nBut George Bool was a smart man, so.\n\n294\n00:16:52.660 --> 00:16:54.620\n&gt;&gt; Yeah.\n&gt;&gt; We're not gonna give him too hard\n\n295\n00:16:54.620 --> 00:16:55.790\nof a time over his name.\n\n296\n00:16:55.790 --> 00:16:56.590\n&gt;&gt; No, he's great.\n\n297\n00:16:56.590 --> 00:17:01.730\n&gt;&gt; So the what did I do here\nin order to manage this?\n\n298\n00:17:01.730 --> 00:17:05.140\nAnd let's see here, bool i.\n\n299\n00:17:05.140 --> 00:17:10.215\nI said, well return this if\n\n300\n00:17:10.215 --> 00:17:15.738\nself.x is not equal to zero.\n\n301\n00:17:15.738 --> 00:17:21.633\nOtherwise return bool of self.x\n\n302\n00:17:21.633 --> 00:17:26.903\ndivided by self.x plus one.\n\n303\n00:17:28.280 --> 00:17:30.550\nOkay?\nAnd all I've done here, and\n\n304\n00:17:30.550 --> 00:17:35.310\nI've gotta be very careful,\norder of operations still apply.\n\n305\n00:17:36.600 --> 00:17:38.800\nThat is not what I wanted to do.\n\n306\n00:17:38.800 --> 00:17:40.840\nWrong place Justin.\n\n307\n00:17:40.840 --> 00:17:44.448\nThere we go.\nI wanna make sure I add to x first,\n\n308\n00:17:44.448 --> 00:17:48.330\nthere, all right?\n\n309\n00:17:48.330 --> 00:17:50.100\nSo now,\n\n310\n00:17:50.100 --> 00:17:54.680\nI've kind of made sure that my logic\ndoesn't lead to errors that are thrown.\n\n311\n00:17:54.680 --> 00:17:57.540\nNow, this can happen in any\nof the previous errors, or\n\n312\n00:17:57.540 --> 00:18:01.650\nany of the previous methods that\nwe've seen in previous episodes.\n\n313\n00:18:01.650 --> 00:18:02.630\nOkay.\n\n314\n00:18:02.630 --> 00:18:05.370\nIt just makes a little more\nsense given the context and\n\n315\n00:18:05.370 --> 00:18:08.440\nkind of how it cropped up to show it here.\n\n316\n00:18:08.440 --> 00:18:11.935\nAgain, this is very much\nspecific to my background.\n\n317\n00:18:11.935 --> 00:18:13.150\n&gt;&gt; Mm-hm.\n&gt;&gt; So.\n\n318\n00:18:13.150 --> 00:18:16.755\nI do apologize if you're\nlike [SOUND] what.\n\n319\n00:18:16.755 --> 00:18:19.990\n&gt;&gt; [LAUGH]\n&gt;&gt; Really take away the Python part and\n\n320\n00:18:19.990 --> 00:18:23.240\ndisregard all other aspects if need be.\n\n321\n00:18:23.240 --> 00:18:28.679\nIf I say if p1 now, something should work.\n\n322\n00:18:32.778 --> 00:18:34.000\nThere we go.\n\n323\n00:18:34.000 --> 00:18:37.250\nIt didn't run, because it's still falsey.\n\n324\n00:18:37.250 --> 00:18:38.110\nThose are both zero.\n\n325\n00:18:38.110 --> 00:18:41.780\nAnd I'm still going to get a zero-ish,\nright?\n\n326\n00:18:41.780 --> 00:18:44.680\nSo y would be zero,\ndivided by one, which is zero.\n\n327\n00:18:44.680 --> 00:18:47.220\nThe bool of that false.\n\n328\n00:18:47.220 --> 00:18:50.700\nBut if I say p2.\n\n329\n00:18:53.542 --> 00:18:57.520\nEquals p3, equals the pair.\n\n330\n00:18:57.520 --> 00:19:01.990\nAnd I'm gonna keep x as zero,\nbut I'm gonna say y is three.\n\n331\n00:19:03.200 --> 00:19:05.580\nSo that actually tests our condition.\n\n332\n00:19:05.580 --> 00:19:10.707\nAnd if p3, print something\n\n333\n00:19:10.707 --> 00:19:15.680\nelse amazing.\n\n334\n00:19:15.680 --> 00:19:19.260\nAnd it actually does that because\ny is three, and because x is zero,\n\n335\n00:19:19.260 --> 00:19:21.320\nI'm gonna go ahead and\nadd one to that, which is one.\n\n336\n00:19:21.320 --> 00:19:23.240\nThree divided by one is three.\n\n337\n00:19:23.240 --> 00:19:26.720\nThe bool of three,\nbecause it's not zero, is actually true.\n\n338\n00:19:26.720 --> 00:19:30.360\nSo it would work in that specific manner.\n\n339\n00:19:30.360 --> 00:19:32.890\nNow I'm not saying this is\nthe best implementation\n\n340\n00:19:32.890 --> 00:19:36.480\nof using this truthy falsey\nboolean representation.\n\n341\n00:19:36.480 --> 00:19:39.690\nBut it illustrates how\nwe can make use of it.\n\n342\n00:19:40.800 --> 00:19:42.440\nAnd I do wanna reiterate,\n\n343\n00:19:42.440 --> 00:19:46.240\nit is very much specific to what\nyou're trying to accomplish.\n\n344\n00:19:47.240 --> 00:19:50.780\nThink of it in terms of standard\nPython data structures.\n\n345\n00:19:50.780 --> 00:19:52.360\nAny number other than zero is true.\n\n346\n00:19:53.620 --> 00:19:55.580\nZero is false.\n\n347\n00:19:55.580 --> 00:19:58.360\nA full list,\na list with something in it, is true.\n\n348\n00:19:58.360 --> 00:19:59.470\nAn empty list is false.\n\n349\n00:20:00.580 --> 00:20:02.540\nA dictionary with something in it,\nis true.\n\n350\n00:20:02.540 --> 00:20:04.870\nA dictionary that's empty, is false.\n\n351\n00:20:04.870 --> 00:20:07.010\nA set with something in it, is true.\n\n352\n00:20:07.010 --> 00:20:09.480\nA set with nothing in it, is false.\n\n353\n00:20:09.480 --> 00:20:14.250\nSo utilizing those kind of thought\nprocesses, processes [LAUGH]\n\n354\n00:20:14.250 --> 00:20:15.590\n&gt;&gt; You were close.\n\n355\n00:20:15.590 --> 00:20:16.160\n&gt;&gt; Whew.\n\n356\n00:20:16.160 --> 00:20:18.790\nI was getting scared there for\na second [LAUGH].\n\n357\n00:20:18.790 --> 00:20:21.940\nIt will make it a lot\neasier to utilize this, but\n\n358\n00:20:21.940 --> 00:20:25.100\nit could be handy, maybe you have\nto tweak it a little bit and\n\n359\n00:20:25.100 --> 00:20:27.930\nmake sure you provide\nappropriate documentation.\n\n360\n00:20:27.930 --> 00:20:30.970\nIt will make your code cleaner\nbecause you can say if P1.\n\n361\n00:20:30.970 --> 00:20:32.990\nAnd if this is a vector,\n\n362\n00:20:32.990 --> 00:20:37.460\nif there is a vector that is not zero,\nthen do something.\n\n363\n00:20:37.460 --> 00:20:39.460\nIf it is not,\nthen do something else right?\n\n364\n00:20:39.460 --> 00:20:44.500\nSo do keep that in mind,\nthat this could be incredibly powerful but\n\n365\n00:20:44.500 --> 00:20:50.030\ncould lead to some convoluted\npractices if used inappropriately.\n\n366\n00:20:50.030 --> 00:20:51.700\n&gt;&gt; Wonderful job as usual Justin.\n\n367\n00:20:51.700 --> 00:20:53.760\nObtaining the boolean representation.\n\n368\n00:20:53.760 --> 00:20:55.220\nAnd Justin, last words.\n\n369\n00:20:55.220 --> 00:20:59.810\nI would say the last words is,\nthroughout this series we've been\n\n370\n00:20:59.810 --> 00:21:03.370\ntalking about overriding some of\nthese methods to make things nicer.\n\n371\n00:21:03.370 --> 00:21:05.520\nTo make them a little clearer to you.\n\n372\n00:21:05.520 --> 00:21:07.670\nAnd while that may be the case,\n\n373\n00:21:07.670 --> 00:21:11.020\nwe can always run into places where\nI could use them with malintent.\n\n374\n00:21:11.020 --> 00:21:16.440\nOr maybe I just use them In an uninformed\nmanner to where it makes things worse.\n\n375\n00:21:16.440 --> 00:21:20.920\nSo, do think about the use cases when\nyou're implementing these methods,\n\n376\n00:21:20.920 --> 00:21:21.960\nunless you're just playing, right?\n\n377\n00:21:21.960 --> 00:21:24.340\nWe're doing this for a learning process.\n\n378\n00:21:24.340 --> 00:21:28.220\nI've built things that I\nwould never actually use\n\n379\n00:21:28.220 --> 00:21:31.460\nas a means of learning the ins and\nouts and edge cases of something.\n\n380\n00:21:31.460 --> 00:21:32.520\nWhat if I do this?\n\n381\n00:21:32.520 --> 00:21:33.567\nWill that make this work?\n\n382\n00:21:33.567 --> 00:21:36.990\nI encourage that.\n\n383\n00:21:36.990 --> 00:21:38.900\nBut if you're using this\nin production code or\n\n384\n00:21:38.900 --> 00:21:41.010\nsomething like that then be very aware.\n\n385\n00:21:41.010 --> 00:21:47.980\nBool is one of those, I use bool, the\nBoolean representation if blah, if list.\n\n386\n00:21:47.980 --> 00:21:51.780\nI do that in my code but I have had.\n\n387\n00:21:51.780 --> 00:21:53.490\nWhen I've worked with others they're like,\nwhat does this do?\n\n388\n00:21:53.490 --> 00:21:57.580\nI was like, well this coerces this\ninto a falsey or truthy value, and\n\n389\n00:21:57.580 --> 00:21:58.430\nthey're like, what?\n\n390\n00:21:58.430 --> 00:22:00.910\nI'm like, well, you know, whatever.\n\n391\n00:22:00.910 --> 00:22:03.990\nLets actually build\na function called is empty.\n\n392\n00:22:03.990 --> 00:22:06.330\nAnd sometimes that's a little clearer for\nsomebody.\n\n393\n00:22:06.330 --> 00:22:08.630\nSo keep in mind, it's team specific.\n\n394\n00:22:09.780 --> 00:22:12.870\nDo it with appropriate care.\n\n395\n00:22:12.870 --> 00:22:14.070\nWhen you're using either bool or\n\n396\n00:22:14.070 --> 00:22:18.150\nany of the other previous methods\nthat we've seen thus far.\n\n397\n00:22:18.150 --> 00:22:19.990\n&gt;&gt; Fantastic, thanks Justin.\n\n398\n00:22:19.990 --> 00:22:23.560\nAnd Python data model is a wonderful\nseries Justin's put together for you, and\n\n399\n00:22:23.560 --> 00:22:24.610\nhe's done a great job at it.\n\n400\n00:22:24.610 --> 00:22:27.440\nMake sure you watch every\nsingle episode a few times.\n\n401\n00:22:27.440 --> 00:22:30.240\nAnd when you're in the course library\nthere's thousands of other videos\n\n402\n00:22:30.240 --> 00:22:33.890\nthere and they're designed to help you\ngo further, so check all those out too.\n\n403\n00:22:33.890 --> 00:22:36.030\nAnd tell everybody you\nknow about DevProTV,\n\n404\n00:22:36.030 --> 00:22:37.390\na good dev pro is always learning.\n\n405\n00:22:37.390 --> 00:22:39.700\nI'm Zack Memos.\n&gt;&gt; And I'm Juston Dennison.\n\n406\n00:22:39.700 --> 00:22:40.762\n&gt;&gt; And we will see you soon.\n\n407\n00:22:40.762 --> 00:22:44.034\n[SOUND]\n\n",
          "vimeoId": "252216528"
        },
        {
          "description": "In this episode, Justin and Zach explore creating a custom comparable that will allow the equal and not equal comparisons on custom objects.",
          "length": "1579",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-2-1-equality_and_inequality-012318-PGM.00_28_49_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-2-1-equality_and_inequality-012318-PGM.00_28_49_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-2-1-equality_and_inequality-012318-PGM.00_28_49_13.Still001-sm.jpg",
          "title": "Equality and Inequality",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.963 --> 00:00:15.281\nHello there, thank you for\nwatching DevProTV,\n\n3\n00:00:15.281 --> 00:00:16.984\nhelping you learn wherever you go.\n\n4\n00:00:16.984 --> 00:00:20.990\nI'm your host, Zach Memos,\nas we continue on with Python data model.\n\n5\n00:00:20.990 --> 00:00:26.244\nAnd today's topic, or this episode's\ntopic is equality and inequality.\n\n6\n00:00:26.244 --> 00:00:29.477\nAnd Justin Dennison is here to tell\nus what the heck that means, Justin,\n\n7\n00:00:29.477 --> 00:00:31.684\ngood to see you sir.\n&gt;&gt; It is good to be back in the studio,\n\n8\n00:00:31.684 --> 00:00:34.171\nZach, and how are you today?\n&gt;&gt; I'm doing great,\n\n9\n00:00:34.171 --> 00:00:37.383\nand I think I kinda know what equality,\ninequality might be.\n\n10\n00:00:37.383 --> 00:00:38.988\nBut in what context, we're gonna see it,\n\n11\n00:00:38.988 --> 00:00:40.230\nhere in this episode.\n&gt;&gt; Well,\n\n12\n00:00:40.230 --> 00:00:41.430\nthis one's a little bit different.\n\n13\n00:00:41.430 --> 00:00:44.817\nWe're actually gonna set up a formal\ndebate, a political discourse,\n\n14\n00:00:44.817 --> 00:00:45.445\nif you will.\n\n15\n00:00:45.445 --> 00:00:51.290\nNo, I jest, I jest, we're actually gonna\nbe talking about comparisons of values.\n\n16\n00:00:51.290 --> 00:00:56.410\nParticularly, custom objects,\nokay, so what do I mean?\n\n17\n00:00:56.410 --> 00:01:02.610\nWell, let's step back,\nbefore we do any code, one equal to one.\n\n18\n00:01:02.610 --> 00:01:06.190\nWell, yes, that's true, right,\nso that works for the most part.\n\n19\n00:01:06.190 --> 00:01:09.000\nNumbers are interesting, a is equal to a.\n\n20\n00:01:10.510 --> 00:01:15.000\nWell, maybe you haven't thought about\nequality in the context of letters,\n\n21\n00:01:15.000 --> 00:01:16.660\nbut words, right?\n\n22\n00:01:16.660 --> 00:01:20.880\nSo if I take my name,\nis Justin equal to Zach?\n\n23\n00:01:20.880 --> 00:01:23.455\nWell, no, those are not equal,\nhow do we know that?\n\n24\n00:01:23.455 --> 00:01:27.992\nWell, I just know, well, if we had to have\nsome kind of algorithmic way, we would go,\n\n25\n00:01:27.992 --> 00:01:30.290\nare the first letters equal?\n\n26\n00:01:30.290 --> 00:01:32.142\nNo, they're not, then they're not equal.\n\n27\n00:01:32.142 --> 00:01:37.180\nBut what if it was Justin and\nJason, is Justin equal to Jason?\n\n28\n00:01:37.180 --> 00:01:40.370\nWell, no, they're not,\nbut if you're a computer,\n\n29\n00:01:40.370 --> 00:01:42.830\nyou have to have some\nalgorithmic way of doing that.\n\n30\n00:01:42.830 --> 00:01:46.176\nSo you go, is J equal to J, yes.\n\n31\n00:01:46.176 --> 00:01:49.170\nIs U equal to A, no.\n\n32\n00:01:49.170 --> 00:01:50.474\nThey are not equal.\n\n33\n00:01:50.474 --> 00:01:55.036\nSo strings are,\nyou can say they're equal or\n\n34\n00:01:55.036 --> 00:01:58.284\nnot equal, likewise, dates.\n\n35\n00:01:58.284 --> 00:02:03.368\nNow, I'm picking things that you and I may\nhave talked about in some other context.\n\n36\n00:02:03.368 --> 00:02:07.775\nBut all of the things I'm giving you\nexamples are things that we can do in\n\n37\n00:02:07.775 --> 00:02:08.373\nPython.\n\n38\n00:02:08.373 --> 00:02:13.714\nSo I can compare numbers, I can compare\ndates, I can compare through equality and\n\n39\n00:02:13.714 --> 00:02:18.070\ninequality, I can compare dates or\ndate time objects.\n\n40\n00:02:18.070 --> 00:02:24.060\nSo if I think, is right now\nequal to a year ago, well, no.\n\n41\n00:02:24.060 --> 00:02:29.919\nThat's the entire thought process of\na date is, are they equal or not equal?\n\n42\n00:02:29.919 --> 00:02:33.449\nAnd the date kinda moves along in time,\nright?\n\n43\n00:02:33.449 --> 00:02:39.229\nBut is your birthday\nequal to your birthday?\n\n44\n00:02:39.229 --> 00:02:41.050\nAnd I'm not picking particular values,\n\n45\n00:02:41.050 --> 00:02:44.760\nbecause I don't wanna call anybody out\non their age, or anything like that.\n\n46\n00:02:44.760 --> 00:02:50.060\nBut yeah, those are always equal,\nI was born exactly at the same time,\n\n47\n00:02:50.060 --> 00:02:55.010\non the same day, of the same month, of\nthe same year, so I could compare those.\n\n48\n00:02:55.010 --> 00:03:01.682\nBut, is today greater than, or\nless than, or equal to, or not equal to?\n\n49\n00:03:01.682 --> 00:03:03.840\nIs today not equal to my birthday?\n\n50\n00:03:03.840 --> 00:03:06.180\nWell, no,\nbecause my birthday was in the past.\n\n51\n00:03:06.180 --> 00:03:08.629\nAnd only reason I know\nthis is cuz I'm here.\n\n52\n00:03:08.629 --> 00:03:12.693\nSo those are kind of abstract,\nright, but within Python,\n\n53\n00:03:12.693 --> 00:03:17.570\nwe have a couple of ways that we\ncan do that, and we're gonna see.\n\n54\n00:03:17.570 --> 00:03:21.260\nWell, let's explore a little bit before\nwe see the solution that we're gonna\n\n55\n00:03:21.260 --> 00:03:21.860\nimplement, right.\n\n56\n00:03:21.860 --> 00:03:27.330\nSo if we come back to the screen here,\nwe're gonna start just in the repo.\n\n57\n00:03:27.330 --> 00:03:30.890\nSo I'm gonna go into Python 3, and\n\n58\n00:03:30.890 --> 00:03:35.522\nI'm gonna start with\nsomething like x=1 and\n\n59\n00:03:35.522 --> 00:03:40.875\ny=1, and z=2, not w, 2, that's important.\n\n60\n00:03:40.875 --> 00:03:45.833\nSo I'm gonna clear out the screen,\nso I have x=1, y=1 and z=2.\n\n61\n00:03:45.833 --> 00:03:52.687\nIs x = y, yes, true,\nI have answered yes to the question.\n\n62\n00:03:52.687 --> 00:03:58.500\nIs x = z, no, and that's because\nthose values are comparable.\n\n63\n00:03:58.500 --> 00:04:00.510\nThey have some kind of\ncomparable interface.\n\n64\n00:04:00.510 --> 00:04:05.750\nWell, 2 can't be 1 just by\nthe very nature of numbers.\n\n65\n00:04:05.750 --> 00:04:10.630\nLet's change that a little bit,\n\n66\n00:04:10.630 --> 00:04:15.346\nand say x = a, y = a, and z = b.\n\n67\n00:04:15.346 --> 00:04:19.588\nWell, is x = y,\n\n68\n00:04:19.588 --> 00:04:24.745\nyes, is x = z, no.\n\n69\n00:04:24.745 --> 00:04:28.633\nNow I'd caution you with these more\ncomplex objects based on memory\n\n70\n00:04:28.633 --> 00:04:29.458\nmanagement.\n\n71\n00:04:29.458 --> 00:04:32.620\nYou may periodically run\ninto the weird edge cases.\n\n72\n00:04:32.620 --> 00:04:35.480\nBut we know these are single letters,\nand they have to be different, so\n\n73\n00:04:35.480 --> 00:04:36.990\nI can make this comparison.\n\n74\n00:04:36.990 --> 00:04:42.879\nLikewise, if I can check if they're equal,\nis x != z,\n\n75\n00:04:42.879 --> 00:04:47.807\nwell, it's not,\nbecause one is a and one is b.\n\n76\n00:04:47.807 --> 00:04:52.149\nAnd I'm gonna, further,\nkind of drill this,\n\n77\n00:04:52.149 --> 00:04:56.050\nlet's, from datetime, import a date.\n\n78\n00:04:56.050 --> 00:05:04.375\nSo x is date, and\nlet's go with 2000, 1, 1, right?\n\n79\n00:05:04.375 --> 00:05:10.324\nAnd y is date 2000, 1, 1, and z is 2001,\n\n80\n00:05:10.324 --> 00:05:17.644\nwell you actually gotta say date,\n2001, 1, 1, right?\n\n81\n00:05:17.644 --> 00:05:22.124\nSo just the year value, so if I type x,\nI get a datetime, date, and\n\n82\n00:05:22.124 --> 00:05:24.210\nthat's a year, month, day.\n\n83\n00:05:24.210 --> 00:05:29.550\nIs x = y, yes, is x=z, no.\n\n84\n00:05:29.550 --> 00:05:33.072\nAnd that's because it compares, are the\nyears the same, are the months the same,\n\n85\n00:05:33.072 --> 00:05:34.510\nare the days the same?\n\n86\n00:05:34.510 --> 00:05:37.532\nWell, x and y, yes, all those numbers.\n\n87\n00:05:37.532 --> 00:05:39.867\nSo behind the scenes they're\nreally comparing numbers, so\n\n88\n00:05:39.867 --> 00:05:43.130\nif you can compare numbers,\nmost of the time, you can compare dates.\n\n89\n00:05:43.130 --> 00:05:47.523\nSo that's handy, can I still do\n\n90\n00:05:47.523 --> 00:05:52.580\ninequality, and I can, so x != z.\n\n91\n00:05:52.580 --> 00:05:55.460\nNow, before we move further and\ncreate a custom object,\n\n92\n00:05:55.460 --> 00:05:58.289\nand see if we still get these\nsimilar-type behaviors.\n\n93\n00:05:59.490 --> 00:06:03.835\nLet's clear this out and\nsay, from operator, so\n\n94\n00:06:03.835 --> 00:06:09.427\nthis is a Python package, import,\nI think it's eq for equals.\n\n95\n00:06:09.427 --> 00:06:16.320\nAnd then from operator,\nimport not equals, so eq and ne.\n\n96\n00:06:16.320 --> 00:06:19.003\nBehind the scenes, it's my understanding,\n\n97\n00:06:19.003 --> 00:06:22.942\nthese are used when I'm making\nthe double equals or the not equals.\n\n98\n00:06:22.942 --> 00:06:28.651\nSo if I say eq(x, y), true, our x and\n\n99\n00:06:28.651 --> 00:06:33.850\ny equal, ne(x, y), are false.\n\n100\n00:06:33.850 --> 00:06:36.950\nNow, I wanted to show you these because if\nI need to make a comparison of a bunch of\n\n101\n00:06:36.950 --> 00:06:40.594\nthings, it may be easier to use\nthe function than the actual\n\n102\n00:06:40.594 --> 00:06:45.400\nshorthand syntax for x = y.\n\n103\n00:06:45.400 --> 00:06:50.420\nSo this x = y and the eq(x,\ny) are exactly the same,\n\n104\n00:06:50.420 --> 00:06:52.978\nso this is a little added\nbonus of knowing these things.\n\n105\n00:06:52.978 --> 00:06:56.440\nSo there are operator package that\nallows you to grab a function\n\n106\n00:06:56.440 --> 00:06:58.240\nthat does the common functions.\n\n107\n00:06:58.240 --> 00:07:02.879\nIf there's a operator like == or != or\n\n108\n00:07:02.879 --> 00:07:06.500\n+, just for completeness.\n\n109\n00:07:06.500 --> 00:07:10.570\nAny of those, there's typically\na function from the operator package\n\n110\n00:07:10.570 --> 00:07:12.890\nthat actually means that, okay?\n\n111\n00:07:12.890 --> 00:07:18.249\nNow, so let's get out of here, and\nlet's create a file here, just for usage.\n\n112\n00:07:18.249 --> 00:07:19.979\nWe'll probably playing around\nwith the repo a little more.\n\n113\n00:07:21.560 --> 00:07:28.110\nSo let's call this equal_or_not_equal,\nall right?\n\n114\n00:07:28.110 --> 00:07:32.891\nAnd let's continue on\nwith a previous example,\n\n115\n00:07:32.891 --> 00:07:36.164\nbut just to keep it slim, a pair.\n\n116\n00:07:36.164 --> 00:07:43.292\nYou know what, let's go with point,\nso it's a point in space,\n\n117\n00:07:43.292 --> 00:07:49.508\nand all we have is our nice\nlittle initialization here.\n\n118\n00:07:49.508 --> 00:07:52.291\nAnd then for readability,\n\n119\n00:07:52.291 --> 00:07:57.377\nlet's get our reaper,\nour repper, so to speak.\n\n120\n00:07:57.377 --> 00:08:01.921\nAnd we're just gonna return \"Pair,\n\n121\n00:08:01.921 --> 00:08:07.017\npair, let's try that one more time.\n&gt;&gt; [LAUGH]\n\n122\n00:08:07.017 --> 00:08:09.712\n&gt;&gt; Pair pair, Point, Zach,\n\n123\n00:08:09.712 --> 00:08:12.468\nyou're killing me.\n&gt;&gt; There's a P in it.\n\n124\n00:08:12.468 --> 00:08:15.064\n[LAUGH]\n&gt;&gt; Yeah, there is, isn't there?\n\n125\n00:08:15.064 --> 00:08:19.946\nSo there's self.x and\n\n126\n00:08:19.946 --> 00:08:26.298\ny = self.y, and there we go.\n\n127\n00:08:26.298 --> 00:08:30.340\nAnd I'm going to format self=self.\n\n128\n00:08:30.340 --> 00:08:34.069\nNow that way I just kind of pass\nthe object to the string formatting.\n\n129\n00:08:34.069 --> 00:08:40.223\nI haven't used fstrings here, I've used\nan old style format just to show a little\n\n130\n00:08:40.223 --> 00:08:43.302\nvariety in the life is always good.\n&gt;&gt; Indeed.\n\n131\n00:08:43.302 --> 00:08:43.982\n&gt;&gt; All right, so\n\n132\n00:08:43.982 --> 00:08:46.143\nlet's create a couple\nof a points down here.\n\n133\n00:08:46.143 --> 00:08:52.581\nSo Point(0, 0) p2 is point,\n\n134\n00:08:52.581 --> 00:08:58.353\nand I'm still gonna say (0,\n\n135\n00:08:58.353 --> 00:09:05.464\n0) then p3 = point(1, -4).\n\n136\n00:09:05.464 --> 00:09:06.407\nAll right, so\n\n137\n00:09:06.407 --> 00:09:11.212\nif I were to ask you without discussing\nany type of algorithmic of parts.\n\n138\n00:09:11.212 --> 00:09:18.625\nZach of p1, p2, and p3, are any of those\npoints equal to any of the other points?\n\n139\n00:09:18.625 --> 00:09:21.367\nIf I just ask you that question,\nwhat would you say?\n\n140\n00:09:21.367 --> 00:09:22.940\n&gt;&gt; I'd say p1 and p2 are equal.\n\n141\n00:09:22.940 --> 00:09:24.378\n&gt;&gt; And for the most part,\n\n142\n00:09:24.378 --> 00:09:26.884\nwe have this intuative sense, right?\n\n143\n00:09:26.884 --> 00:09:29.205\np1 and p2 are equal,\nbecause well the numbers are equal.\n\n144\n00:09:29.205 --> 00:09:29.821\n&gt;&gt; Right.\n\n145\n00:09:29.821 --> 00:09:31.398\n&gt;&gt; And we kind of have a pretty good\n\n146\n00:09:31.398 --> 00:09:34.600\nintuative sense of comparisons of numbers.\n\n147\n00:09:34.600 --> 00:09:38.460\nSo let's see if we can do\nthe same thing programmatically.\n\n148\n00:09:38.460 --> 00:09:41.060\nCan we test if p1 and p2 are equal.\n\n149\n00:09:41.060 --> 00:09:45.930\nDon't make the assumption that p1 and\np3 are not equal, right?\n\n150\n00:09:45.930 --> 00:09:52.613\nSo let's close out here,\nhop in to to python3 and equal not_equal.\n\n151\n00:09:52.613 --> 00:09:54.767\nSo I have p1, right?\n\n152\n00:09:54.767 --> 00:09:58.876\nAnd I missed on I'm gonna fix that\nshortly, but that's all right.\n\n153\n00:09:58.876 --> 00:10:04.641\nSo p1 = p2 and\nwe've seen this works for numbers,\n\n154\n00:10:04.641 --> 00:10:10.812\nthis works for strings,\nthis works for dates, False.\n\n155\n00:10:10.812 --> 00:10:12.380\nThat's kind of weird, right?\n\n156\n00:10:14.230 --> 00:10:18.509\nBut you know, if we look at p1 and\np2 based on our intuitive sense,\n\n157\n00:10:18.509 --> 00:10:23.934\nit's at the point(0, 0), it's at\nthe point(0, 0), both numbers are 0.\n\n158\n00:10:23.934 --> 00:10:26.120\nI would think that those\nare in fact equal.\n\n159\n00:10:27.210 --> 00:10:28.300\nWhy is it returning false?\n\n160\n00:10:28.300 --> 00:10:36.856\nWell, let's see if we can say\np1 is equal to p3, False.\n\n161\n00:10:36.856 --> 00:10:41.103\nSo that's actually what we expect,\n\n162\n00:10:41.103 --> 00:10:44.670\np1is not equal to p3, True.\n\n163\n00:10:45.810 --> 00:10:50.083\np1 is not equal to p2, also True.\n\n164\n00:10:50.083 --> 00:10:53.195\nAnd what this is doing\ninitially is saying,\n\n165\n00:10:53.195 --> 00:10:59.096\nwell the only way I can compare are these\nactually the same exact objects in memory?\n\n166\n00:10:59.096 --> 00:11:03.310\nSo what is really being saved, so\nwhen I created p1, I created a new object.\n\n167\n00:11:03.310 --> 00:11:07.769\nWhen I create p2, I create a new object,\nand they're not exactly in the same place.\n\n168\n00:11:07.769 --> 00:11:11.340\nI think they kinda move around, so\nthat's the initial type comparison.\n\n169\n00:11:11.340 --> 00:11:16.452\nYour comparison is mostly based\non memory addressing and things.\n\n170\n00:11:16.452 --> 00:11:21.444\nBut that doesn't make any sense,\nbecause really what I wanna see is, hey,\n\n171\n00:11:21.444 --> 00:11:25.738\nis p1 and p2, if those are equal,\nmaybe some condition is met.\n\n172\n00:11:25.738 --> 00:11:31.120\nWell Python provides us with\nthe ability to do that.\n\n173\n00:11:31.120 --> 00:11:35.683\nBefore we go though,\nlet's see if that same thing occurs if\n\n174\n00:11:35.683 --> 00:11:39.899\nwe use those operator functions eq and\nne, all right?\n\n175\n00:11:39.899 --> 00:11:41.370\nEqual and not equal.\n\n176\n00:11:41.370 --> 00:11:46.043\nSo from operator, import eq and ne.\n\n177\n00:11:46.043 --> 00:11:53.160\nSo eq p1 and p2, no, but Zach,\nI mean he's absolutely accurate.\n\n178\n00:11:53.160 --> 00:11:56.391\nJust looking at it, and\nyou're like I think p1 and p2 are equal.\n\n179\n00:11:56.391 --> 00:11:59.821\nYeah, what about not equal p1, p2, and\n\n180\n00:11:59.821 --> 00:12:05.610\nit looks like all of those things\nare holding and well they should hold.\n\n181\n00:12:05.610 --> 00:12:09.690\neq should actually give you the same\nthing that double equals gives you.\n\n182\n00:12:09.690 --> 00:12:11.407\nAny issue, do the same thing.\n\n183\n00:12:11.407 --> 00:12:14.020\nJust by the nature of how they're written,\nall right?\n\n184\n00:12:14.020 --> 00:12:20.329\nSo let's exit out of here, we've gotta\ngo fix some things, it is no good.\n\n185\n00:12:20.329 --> 00:12:25.480\nNumber one, I'm gonna fix the fact\nthat this is missing a parenthesis,\n\n186\n00:12:25.480 --> 00:12:26.680\njust like so.\n\n187\n00:12:26.680 --> 00:12:27.727\nThere we go.\nSo formatting,\n\n188\n00:12:27.727 --> 00:12:30.400\nI'm a little bit of a stickler about that.\n\n189\n00:12:30.400 --> 00:12:36.539\nSo let's move down to here, and there's\na dunder, and there was a hint here.\n\n190\n00:12:36.539 --> 00:12:41.267\nDunder, and Zach if you had to\nguess what do you think is gonna be\n\n191\n00:12:41.267 --> 00:12:46.113\ndunder something, what would it be?\n&gt;&gt; Dunder my brain.\n\n192\n00:12:46.113 --> 00:12:49.051\n[LAUGH]\n&gt;&gt; That would be a good test and\n\n193\n00:12:49.051 --> 00:12:52.482\nthis is one of those\nthings from the operator.\n\n194\n00:12:52.482 --> 00:12:55.141\nThe operator module if\nit contains a function,\n\n195\n00:12:55.141 --> 00:12:58.276\na lot of times there's\na corresponding dunder method.\n\n196\n00:12:58.276 --> 00:13:01.576\nSo __eq just like so.\n\n197\n00:13:01.576 --> 00:13:03.999\nSo __=.\n&gt;&gt; Okay, __=.\n\n198\n00:13:03.999 --> 00:13:06.827\nOkay, gotcha.\n&gt;&gt; Yeah, yeah, yeah, so Zach I'm gonna\n\n199\n00:13:06.827 --> 00:13:09.542\nforewarn you, I'm gonna come back to\nyou with another question shortly.\n\n200\n00:13:09.542 --> 00:13:15.049\nBut I would almost, almost bet my paycheck\nthat you'll get the next one right.\n\n201\n00:13:15.049 --> 00:13:15.590\n&gt;&gt; All right.\n\n202\n00:13:15.590 --> 00:13:16.735\n&gt;&gt; So no worries.\n\n203\n00:13:16.735 --> 00:13:18.703\nBut now, if this __eq,\n\n204\n00:13:18.703 --> 00:13:23.360\nwe have to decide what actually\ndefines a quality for a point?\n\n205\n00:13:25.320 --> 00:13:30.167\nWell, if I have two different points,\nlet's say p1 and p2,\n\n206\n00:13:30.167 --> 00:13:34.023\nI know that my equal is not right,\nquite working.\n\n207\n00:13:34.023 --> 00:13:37.765\nBut when I ask Zack, hey,\nwhich one of these points are equal?\n\n208\n00:13:37.765 --> 00:13:42.297\nYou have p1 and p2, and\nthat's because the x and the y.\n\n209\n00:13:42.297 --> 00:13:47.236\nNotice I said the x and\nthe y's, are both equal.\n\n210\n00:13:47.236 --> 00:13:50.987\nSo I can return a condition\ncalled self.x and\n\n211\n00:13:50.987 --> 00:13:54.550\nwell eq actually takes another argument.\n\n212\n00:13:55.660 --> 00:14:01.300\nThe thing I'm talking about, and the other\nthing that I'm comparing to, okay?\n\n213\n00:14:01.300 --> 00:14:04.405\nSo self and other, and\nthis is typically a convention.\n\n214\n00:14:04.405 --> 00:14:10.194\nNow [COUGH] self and other, other can be\na whole bunch of stuff, and you can write\n\n215\n00:14:10.194 --> 00:14:15.824\nvery complex logic, but I wanna be able\nto compare points to points, okay?\n\n216\n00:14:15.824 --> 00:14:20.542\nSo is self.x = other.x and\n\n217\n00:14:20.542 --> 00:14:24.281\nself.y = other.y?\n\n218\n00:14:24.281 --> 00:14:30.919\nSo if x's and the y's are both equal,\nthen I'm saying the points are equal.\n\n219\n00:14:30.919 --> 00:14:34.767\nSo I've written this that\nthis should all work out.\n\n220\n00:14:34.767 --> 00:14:35.940\n&gt;&gt; Should.\n\n221\n00:14:35.940 --> 00:14:37.854\n&gt;&gt; Key word there, should.\n\n222\n00:14:37.854 --> 00:14:43.320\nSo let's clear out the screen, come\nback here and look at equal, not equal.\n\n223\n00:14:43.320 --> 00:14:48.755\nSo at p1, p2 is, and\nI accidentally deleted something from,\n\n224\n00:14:48.755 --> 00:14:51.280\nor added an extra equal sign.\n\n225\n00:14:51.280 --> 00:14:52.937\nBut that's all right,\nwe won't worry about that.\n\n226\n00:14:52.937 --> 00:14:58.663\nSo p1 = p2, originally this said False,\ncross your fingers.\n\n227\n00:14:58.663 --> 00:15:03.139\nAnd it is now True,\nbecause it delegates to that other __= or\n\n228\n00:15:03.139 --> 00:15:08.600\nthat __eq to say,\nI have a different way of comparing these.\n\n229\n00:15:08.600 --> 00:15:13.105\nOur x for p1 and the x for\np2, are those equal?\n\n230\n00:15:13.105 --> 00:15:18.700\nYes, are the y for p1 and\nthe y for p2, are those equal?\n\n231\n00:15:18.700 --> 00:15:23.300\nYes, so if they are both then that\nmeans the two points are equal.\n\n232\n00:15:23.300 --> 00:15:26.704\nNow why would I use the this, okay?\n\n233\n00:15:26.704 --> 00:15:30.428\nSo let's think about this,\nI'm trying to determine,\n\n234\n00:15:30.428 --> 00:15:32.976\nhave these two points come together?\n\n235\n00:15:32.976 --> 00:15:37.413\nAre they the same, or\nfamous one of those, we have a train\n\n236\n00:15:37.413 --> 00:15:39.891\nleaving from the East Coast-\n&gt;&gt; [LAUGH]\n\n237\n00:15:39.891 --> 00:15:42.175\n&gt;&gt; Traveling at 45 miles per hour, right?\n\n238\n00:15:42.175 --> 00:15:45.730\nWe have a train leaving from the West\nCoast driving at 35 miles an hour going\n\n239\n00:15:45.730 --> 00:15:46.853\ntoward the East Coast.\n\n240\n00:15:46.853 --> 00:15:51.468\nThey're traveling toward each other, at\nwhat point will they be the same, right?\n\n241\n00:15:51.468 --> 00:15:54.844\nWell, you could do that and\nsay whenever the two points are equal.\n\n242\n00:15:54.844 --> 00:16:01.707\nSo while [NOISE] run the trains,\nThe points are not equal, get together.\n\n243\n00:16:01.707 --> 00:16:05.491\nOr when they are equal, stop.\n\n244\n00:16:05.491 --> 00:16:10.120\nWell, if I were to not\nuse this __eq__ method,\n\n245\n00:16:10.120 --> 00:16:13.880\nI would have to say, okay, while True.\n\n246\n00:16:13.880 --> 00:16:18.282\nSo while the trains are running,\nprint something.\n\n247\n00:16:18.282 --> 00:16:25.781\nAnd if p1.x ==p2.x and\n\n248\n00:16:25.781 --> 00:16:34.223\np1.y == p2.y then break.\n\n249\n00:16:34.223 --> 00:16:36.197\nSo you know that reads,\nand you're like okay, so\n\n250\n00:16:36.197 --> 00:16:37.900\nI'm comparing edge wise about edge wise.\n\n251\n00:16:37.900 --> 00:16:40.110\nBut these are,\nI have two things to compare.\n\n252\n00:16:40.110 --> 00:16:43.300\nWhat if I have,\nwell their labels have to be the same,\n\n253\n00:16:43.300 --> 00:16:46.890\ntheir engine codes have to be the same,\ntheir x and y have to be the same.\n\n254\n00:16:48.200 --> 00:16:50.640\nWhat if I had a lot more\nproperties that I need to compare?\n\n255\n00:16:50.640 --> 00:16:52.310\nThis could get really messy.\n\n256\n00:16:52.310 --> 00:16:53.190\nLet's see if this works,\n\n257\n00:16:53.190 --> 00:16:56.560\nI might have thrown my computer into\nan infinite loop, there we are.\n\n258\n00:16:56.560 --> 00:16:59.420\nAnd no, it immediately breaks\nbecause we know those are true.\n\n259\n00:16:59.420 --> 00:17:06.206\nCompare that, though, with if p1 == p2.\n\n260\n00:17:08.935 --> 00:17:10.640\nIt's the exact same logic.\n\n261\n00:17:10.640 --> 00:17:12.850\nBut it's a little easier to read and\nto reason about,\n\n262\n00:17:12.850 --> 00:17:15.640\nif I know that p1 and p2 are points.\n\n263\n00:17:15.640 --> 00:17:18.030\nIf the two points are the same, break.\n\n264\n00:17:18.030 --> 00:17:23.820\nDoes it matter if I'm, well, p1.x, p2.x?\n\n265\n00:17:23.820 --> 00:17:27.980\nNo, I've hidden this logic away,\ninternal to the object And\n\n266\n00:17:27.980 --> 00:17:33.500\nby doing so, I've brought clarity to\nthe code that's using said object,.\n\n267\n00:17:33.500 --> 00:17:35.924\nIf the two points are equal, break.\n\n268\n00:17:35.924 --> 00:17:38.511\nIt doesn't matter how I'm\nmaking this comparison,\n\n269\n00:17:38.511 --> 00:17:41.680\nas long as the comparison is\nconsistent with my thought process.\n\n270\n00:17:41.680 --> 00:17:47.166\nAnd what I mean is, if we get out of here,\nand we'll come back.\n\n271\n00:17:47.166 --> 00:17:52.810\nSo, equal, and I feel compelled\nto remove that equals sign here.\n\n272\n00:17:52.810 --> 00:17:58.287\nHere, if I added something crazy,\n\n273\n00:17:58.287 --> 00:18:04.139\nand self.x != other.y like that.\n\n274\n00:18:04.139 --> 00:18:06.805\nWell, that may cause some\nweird logic issues, but\n\n275\n00:18:06.805 --> 00:18:11.030\nas long as I know how those comparisons\nare made under behind the scenes.\n\n276\n00:18:11.030 --> 00:18:15.602\nI don't necessarily always have\nto put them upfront in my code.\n\n277\n00:18:15.602 --> 00:18:21.584\nOkay, so that's is our equals and\nbefore we move on to possible inequality,\n\n278\n00:18:23.663 --> 00:18:29.763\nLet's go to our operator,\n\n279\n00:18:29.763 --> 00:18:33.747\nimport eq and eq.\n\n280\n00:18:33.747 --> 00:18:35.380\nAnd let's just turn that volume down.\n\n281\n00:18:35.380 --> 00:18:36.084\nThere we go.\n\n282\n00:18:36.084 --> 00:18:39.234\n[LAUGH] So, eq(p1, p2) and\n\n283\n00:18:39.234 --> 00:18:44.696\nthey are equal now based\non our numeric comparisons.\n\n284\n00:18:44.696 --> 00:18:51.990\nAnd eq(p1, p3) and don't put extra\nparenthesis in there, that's important.\n\n285\n00:18:53.070 --> 00:18:56.136\nAnd no they're not because they're\nactually different points, right?\n\n286\n00:18:56.136 --> 00:19:02.180\nSo eq works, w= works, and\nthey should produce the same.\n\n287\n00:19:02.180 --> 00:19:05.798\nIf you're finding that they're not, well,\nyou should probably go ask somebody.\n\n288\n00:19:05.798 --> 00:19:11.131\nAll right, Zack,\nI've let you hang out just long enough.\n\n289\n00:19:11.131 --> 00:19:12.146\nHere it comes.\n\n290\n00:19:12.146 --> 00:19:16.140\nAnd it's okay to guess,\nit's okay to guess.\n\n291\n00:19:16.140 --> 00:19:20.133\nAll right, so if __eq__ is for\n\n292\n00:19:20.133 --> 00:19:26.700\ndetermining if things are equal,\nso I have def __.\n\n293\n00:19:26.700 --> 00:19:30.858\nWhat do you think is going to be the name\nhere to determine if something is not\n\n294\n00:19:30.858 --> 00:19:35.579\nequal?\n&gt;&gt; It would be\n\n295\n00:19:35.579 --> 00:19:38.602\n__!eq?\n&gt;&gt; So\n\n296\n00:19:38.602 --> 00:19:40.242\nclose!\n&gt;&gt; So close!\n\n297\n00:19:40.242 --> 00:19:42.141\n[LAUGH]\n&gt;&gt; So close,\n\n298\n00:19:42.141 --> 00:19:44.318\nand there was a hint in the operator.\n\n299\n00:19:44.318 --> 00:19:45.740\nWhat was the function name?\n\n300\n00:19:45.740 --> 00:19:49.210\nWell, I imported both eq as well as ne.\n\n301\n00:19:50.350 --> 00:19:55.311\nne is the function, and __ne__ is-\n&gt;&gt; Aha, I was close!\n\n302\n00:19:55.311 --> 00:19:56.537\n&gt;&gt; You were really close.\n\n303\n00:19:56.537 --> 00:19:59.140\nAnd see, it all takes a little\nbit of moving forward.\n\n304\n00:19:59.140 --> 00:20:01.050\nHey, we can't be perfect every time.\n\n305\n00:20:01.050 --> 00:20:03.268\nSo that's all right.\n\n306\n00:20:03.268 --> 00:20:08.780\nSo we have, all these are comparing\nthe thing to something else.\n\n307\n00:20:10.180 --> 00:20:15.102\nMost of the time it's gonna be easiest\nif you compare, this is a point,\n\n308\n00:20:15.102 --> 00:20:17.494\nI'm comparing points to points.\n\n309\n00:20:17.494 --> 00:20:21.164\nYou could add additional logic to say,\nwell if other is a number,\n\n310\n00:20:21.164 --> 00:20:25.010\njust a number like a floater or\nan int, do this comparison.\n\n311\n00:20:25.010 --> 00:20:30.360\nIf it's a point, do this comparison,\nif it's a string do it, but those\n\n312\n00:20:30.360 --> 00:20:36.007\ncan get a little messy for this instance,\nso just keep these kind of in mind.\n\n313\n00:20:36.007 --> 00:20:38.731\nNow I'm gonna be explicit about this, and\n\n314\n00:20:38.731 --> 00:20:43.359\nthen I'm gonna show you kind of\na shortcut as it's kind of interesting.\n\n315\n00:20:43.359 --> 00:20:51.764\nSo I'm going to return\nself.x != other.x and\n\n316\n00:20:51.764 --> 00:20:56.100\nself.y != other.y.\n\n317\n00:20:56.100 --> 00:21:02.670\nBut in order for either one of these,\nthe right for it to not be equal.\n\n318\n00:21:02.670 --> 00:21:06.600\nDo both of them have to be not equal or\nonly one of them?\n\n319\n00:21:06.600 --> 00:21:11.690\nIt could be either the x's or\nthe y's if either one of them, right?\n\n320\n00:21:11.690 --> 00:21:13.521\nThen that means they\nare not equal in general.\n\n321\n00:21:13.521 --> 00:21:14.104\n&gt;&gt; I would say either one of them\n\n322\n00:21:14.104 --> 00:21:17.532\nbecause it will throw the whole thing off.\n&gt;&gt; So it could be either one and\n\n323\n00:21:17.532 --> 00:21:20.163\nby then I can just change that to or.\n\n324\n00:21:20.163 --> 00:21:24.240\nEither the x's are not equal,\nor the y's are not equal.\n\n325\n00:21:24.240 --> 00:21:26.170\nSo it doesn't matter which one-\n&gt;&gt; Doesn't matter.\n\n326\n00:21:26.170 --> 00:21:27.690\n&gt;&gt; If they're not both,\n\n327\n00:21:27.690 --> 00:21:30.220\nthen they have to be not equal, okay?\n\n328\n00:21:30.220 --> 00:21:36.650\nSo let's go check this out, and\nsee if that fixes all of our fun stuff.\n\n329\n00:21:36.650 --> 00:21:43.370\nSo p1 != p2,\nwell it's false because they are.\n\n330\n00:21:43.370 --> 00:21:48.031\nIs p1 != p3, and it's not.\n\n331\n00:21:48.031 --> 00:21:48.849\nAnd why is that?\n\n332\n00:21:48.849 --> 00:21:51.870\nWell p1 is 0,0, p3 is 1,-4.\n\n333\n00:21:51.870 --> 00:21:58.720\nLet's create another one called p4 and\nthat's just a point with 0,3.\n\n334\n00:21:58.720 --> 00:22:03.260\np4 the x's will actually be\nequal to either p1 or p2.\n\n335\n00:22:03.260 --> 00:22:06.540\nSo p1 != p4.\n\n336\n00:22:08.010 --> 00:22:10.330\nAnd that is still true because\nthe y's are not equal, right?\n\n337\n00:22:11.455 --> 00:22:15.430\nNow, when that works out, we actually have\n\n338\n00:22:15.430 --> 00:22:19.300\nthe ability to compare these two points\nwith either equals or not equals.\n\n339\n00:22:20.370 --> 00:22:26.172\nLet's take a quick little aside here and\nlook at a couple of tricks.\n\n340\n00:22:26.172 --> 00:22:29.290\nAnd you know maybe we'll just\ntry something real quick.\n\n341\n00:22:29.290 --> 00:22:31.510\nSo not equal, I could do this.\n\n342\n00:22:32.730 --> 00:22:37.429\nBut if you have fun with logic, and\n\n343\n00:22:37.429 --> 00:22:45.221\nyou can technically say\nif not self.__eq(other).\n\n344\n00:22:45.221 --> 00:22:47.890\nYou can actually just delegate\nthat back to the original equals.\n\n345\n00:22:47.890 --> 00:22:49.779\nHow do you define not equals?\n\n346\n00:22:49.779 --> 00:22:54.144\nWell if there's no complex logic,\nyou can just say well I want whatever\n\n347\n00:22:54.144 --> 00:22:57.520\ncomes from equals and\ndo the inverse of it, negate it.\n\n348\n00:22:57.520 --> 00:23:02.710\nSo return not equal and then that'll go,\nwell, let me go up here,\n\n349\n00:23:02.710 --> 00:23:07.735\nfigure out what this is,\nthat's gonna come back true or false.\n\n350\n00:23:07.735 --> 00:23:10.685\nAnd then I'm gonna say, if it's false,\nI'm gonna change it to true.\n\n351\n00:23:10.685 --> 00:23:14.265\nAnd if it's true, I'm gonna change\nit to false, so I just put a not.\n\n352\n00:23:14.265 --> 00:23:18.552\nI actually took the not equal and\nsaid, will return not equal.\n\n353\n00:23:18.552 --> 00:23:25.925\nThat's a nice little trick, let's make\nsure that it works, and ===, there we go.\n\n354\n00:23:25.925 --> 00:23:27.519\np1 == p2.\n\n355\n00:23:27.519 --> 00:23:33.383\nLets make sure equals still works,\np1 != to p2,\n\n356\n00:23:33.383 --> 00:23:39.270\np1 != p3 and that's true and\nit still works.\n\n357\n00:23:39.270 --> 00:23:43.030\nOne final thing I want to try though,\nIf we can do that,\n\n358\n00:23:43.030 --> 00:23:44.790\nI wonder if Python does that for\nus anyway.\n\n359\n00:23:44.790 --> 00:23:47.482\nIf we define an equals,\n\n360\n00:23:47.482 --> 00:23:52.415\ndo we get a not equals for free?\n&gt;&gt; I like free, free is good.\n\n361\n00:23:52.415 --> 00:23:54.916\n&gt;&gt; Free as in lunch, free as in donuts,\n\n362\n00:23:54.916 --> 00:23:56.989\nfree as in anything.\n&gt;&gt; I don't know.\n\n363\n00:23:56.989 --> 00:23:58.605\n&gt;&gt; So let's come here and\n\n364\n00:23:58.605 --> 00:24:00.910\nlet's just comment these out.\n\n365\n00:24:03.570 --> 00:24:04.920\nThat is not an appropriate comment.\n\n366\n00:24:06.640 --> 00:24:10.775\nAll right, it's the moment of truth.\n\n367\n00:24:10.775 --> 00:24:12.434\np1 != p3, true.\n\n368\n00:24:12.434 --> 00:24:16.901\np1 is 0,0,\n\n369\n00:24:16.901 --> 00:24:21.370\np3 is 1,4.\n\n370\n00:24:21.370 --> 00:24:25.612\nAnd a lot of times what will happen\nis if you don't have complex logic.\n\n371\n00:24:25.612 --> 00:24:29.806\nJust like I wrote explicitly,\nreturn not equals, Python will go,\n\n372\n00:24:29.806 --> 00:24:32.980\nwell there's no __ne so\nI'm going to go find eq.\n\n373\n00:24:32.980 --> 00:24:38.915\nDoes eq, it does, then find out what\neq is and then do the not for you.\n\n374\n00:24:40.645 --> 00:24:46.890\nSometimes being explicit is better than\nletting Python make decisions for you.\n\n375\n00:24:46.890 --> 00:24:51.855\nEspecially if you have more\ncomplex logic that needs to occur.\n\n376\n00:24:51.855 --> 00:24:54.810\nSo, even though I get that for free,\n\n377\n00:24:57.440 --> 00:25:00.510\nI will probably still put this in here.\n&gt;&gt; Better to be more explicit.\n\n378\n00:25:00.510 --> 00:25:02.150\n&gt;&gt; Yeah, just say hey,\n\n379\n00:25:02.150 --> 00:25:03.710\nthere's my not equal and my equal.\n\n380\n00:25:03.710 --> 00:25:05.520\nAnd now I can compare points.\n\n381\n00:25:05.520 --> 00:25:09.700\nAnd this makes my other code\nthat is using this Point class\n\n382\n00:25:09.700 --> 00:25:12.630\na lot cleaner because I can say,\nis p1 equal to p2?\n\n383\n00:25:12.630 --> 00:25:14.920\nYes or no, are they or are they not equal?\n\n384\n00:25:14.920 --> 00:25:18.380\nYes or no, and then if I need to figure\nout how that logic's implemented,\n\n385\n00:25:18.380 --> 00:25:21.600\nI'm gonna look at the original Point\nclass and everything's golden.\n\n386\n00:25:21.600 --> 00:25:26.170\nAnd it's actually, I know we kinda took a\ndetour there, but it's pretty simple just\n\n387\n00:25:26.170 --> 00:25:28.680\nto make this happen, right?\n&gt;&gt; It really, really is,\n\n388\n00:25:28.680 --> 00:25:30.280\nand I feel like a dunderhead.\n\n389\n00:25:30.280 --> 00:25:32.120\nBut anyway, equality and inequality,\n\n390\n00:25:32.120 --> 00:25:35.440\nwonderful episode inside\nthe Python data model series.\n\n391\n00:25:35.440 --> 00:25:37.469\nAnd before we move on though, Justin,\n\n392\n00:25:37.469 --> 00:25:40.798\nanything else you'd like to say?\n&gt;&gt; Well just keep in mind, Python's got\n\n393\n00:25:40.798 --> 00:25:44.260\nall these kinda tricks up its sleeves, and\nwe're more or less just getting started.\n\n394\n00:25:44.260 --> 00:25:49.170\nSo definitely stay tuned as we continue\nlooking at, well, just a few more aces\n\n395\n00:25:49.170 --> 00:25:52.420\nfrom who knows, right?\n&gt;&gt; Awesome job as usual, Justin.\n\n396\n00:25:52.420 --> 00:25:55.620\nMake sure you watch every single\nepisode of Python data model.\n\n397\n00:25:55.620 --> 00:25:58.638\nYou'll be glad you did and\nyou'll be in the course library.\n\n398\n00:25:58.638 --> 00:26:00.820\nAnd there's thousands of other videos\ndesigned to help you go further.\n\n399\n00:26:00.820 --> 00:26:01.960\nCheck those out too.\n\n400\n00:26:01.960 --> 00:26:04.423\nAnd tell everybody you\nknow about DevPro TV.\n\n401\n00:26:04.423 --> 00:26:05.937\nYou know a good DevPro is always learning.\n\n402\n00:26:05.937 --> 00:26:08.342\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n403\n00:26:08.342 --> 00:26:12.901\n&gt;&gt; And we will\n\n404\n00:26:12.901 --> 00:26:18.960\nsee you soon.\n\n",
          "vimeoId": "252569174"
        },
        {
          "description": "In this episode, Justin and Zach, further expand on the ability of custom objects to be less than, less than or equal to, greater than, and greater than or equal to using the \\_\\_lt\\_\\_, \\_\\_le\\_\\_, \\_\\_gt\\_\\_, and \\_\\_ge\\_\\_ methods.",
          "length": "1364",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-3-1-greater_and_less-012318-PGM.00_25_24_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-3-1-greater_and_less-012318-PGM.00_25_24_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-3-1-greater_and_less-012318-PGM.00_25_24_12.Still001-sm.jpg",
          "title": "Greater and Less",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.160 --> 00:00:16.660\nHello, thanks for choosing DevPro.tv\nhelping you learn wherever you go.\n\n3\n00:00:16.660 --> 00:00:19.970\nI'M your host Zach Memos,\nas we continue on with Python data model.\n\n4\n00:00:19.970 --> 00:00:23.280\nThe name of this episode is greater or\nless.\n\n5\n00:00:23.280 --> 00:00:24.800\nIt's a mystery, what could it mean?\n\n6\n00:00:24.800 --> 00:00:26.960\nBut Justin Dennison,\nis here to show us the way.\n\n7\n00:00:26.960 --> 00:00:28.345\nJustin, great to see you, sir.\n\n8\n00:00:28.345 --> 00:00:31.310\n&gt;&gt; It's good to be back, Zach, and\nhopefully, I will illuminate the path, but\n\n9\n00:00:31.310 --> 00:00:33.140\nbefore we do, how are you today?\n\n10\n00:00:33.140 --> 00:00:34.980\n&gt;&gt; I'm having a great time\nworking with you again, and\n\n11\n00:00:34.980 --> 00:00:39.290\nlearning as we go about this\ndev development territory.\n\n12\n00:00:39.290 --> 00:00:40.480\nI'm look very excited about it.\n\n13\n00:00:40.480 --> 00:00:45.594\n&gt;&gt; Well, hopefully, I can continue to,\nwell, bring new knowledge forth, Zach.\n\n14\n00:00:45.594 --> 00:00:48.320\nWell, greater or less.\n\n15\n00:00:48.320 --> 00:00:49.377\nGreater and less.\n\n16\n00:00:49.377 --> 00:00:52.671\nIn the previous episode,\nwe talked about equality and inequality.\n\n17\n00:00:52.671 --> 00:00:57.550\nWell, along with those comparisons,\nbeing able to compare things.\n\n18\n00:00:57.550 --> 00:00:58.560\nAnd I kind of eluded to it.\n\n19\n00:00:58.560 --> 00:01:03.220\nI slipped up in the last episode and I\nused the words less than or greater than.\n\n20\n00:01:03.220 --> 00:01:04.630\n&gt;&gt; I heard ya.\n\n21\n00:01:04.630 --> 00:01:07.370\n&gt;&gt; Right, for all of the comparisons\nthat we look for equality,\n\n22\n00:01:07.370 --> 00:01:10.150\na lot of times,\nthere's something called a total ordering.\n\n23\n00:01:10.150 --> 00:01:15.609\nNow, there are edge cases that\ndon't necessarily use these, right?\n\n24\n00:01:15.609 --> 00:01:16.790\n&gt;&gt; Mm-hm.\n\n25\n00:01:16.790 --> 00:01:19.708\n&gt;&gt; I can either have a less than or\ngreater than, but\n\n26\n00:01:19.708 --> 00:01:23.066\nif I have something that can\nbe totally ordered, okay?\n\n27\n00:01:23.066 --> 00:01:28.220\nThen I can put them in ascending order,\nor descending order.\n\n28\n00:01:28.220 --> 00:01:31.610\nAnd the only way that I\ncould do that is either by\n\n29\n00:01:31.610 --> 00:01:36.340\ndetermining whether they are equal, or\nbeing able to determine whether they\n\n30\n00:01:36.340 --> 00:01:40.440\nare less than one another,\nor greater than one another.\n\n31\n00:01:40.440 --> 00:01:44.223\nI don't necessarily have to have both,\nbecause if they're not equal and\n\n32\n00:01:44.223 --> 00:01:45.870\nthey're not less, then they,\n\n33\n00:01:45.870 --> 00:01:49.425\nwhat we're saying is the assumption\nis that they have to be greater.\n\n34\n00:01:49.425 --> 00:01:53.671\nBut if you want to be explicit,\nthen Python allows you to say,\n\n35\n00:01:53.671 --> 00:01:56.380\nwell this is how I determine less than.\n\n36\n00:01:57.540 --> 00:02:00.330\nThis is how I determine less than or\nequal to.\n\n37\n00:02:00.330 --> 00:02:05.010\nBecause it could be that I'm like,\nI don't really care it they're equal,\n\n38\n00:02:06.250 --> 00:02:12.560\njust strictly equal, I wanna know if it's\neither smaller up to equal to, right?\n\n39\n00:02:12.560 --> 00:02:17.790\nSo is one less than or equal to two, yes?\n\n40\n00:02:17.790 --> 00:02:19.890\nBecause one is less than two.\n\n41\n00:02:19.890 --> 00:02:23.090\nIs two less than or equal to two?\n\n42\n00:02:23.090 --> 00:02:25.060\nYes, because two and two are equal, right?\n\n43\n00:02:25.060 --> 00:02:28.890\nBut that same operator encompasses\nboth of those relationships.\n\n44\n00:02:28.890 --> 00:02:31.250\nAnd I may have butchered that explanation.\n\n45\n00:02:31.250 --> 00:02:34.670\nI'm trying not to get too deep in\nthe weeds there in an effort to do that.\n\n46\n00:02:35.900 --> 00:02:39.640\nDo forgive me if I might, so\nin other words, ten is greater than five.\n\n47\n00:02:39.640 --> 00:02:41.680\nTen is greater than five,\nten is greater than or\n\n48\n00:02:41.680 --> 00:02:45.570\nequal to five, five is greater than or\nequal to five.\n\n49\n00:02:45.570 --> 00:02:50.060\nFour is not greater than or\nequal to five, because I actually do not\n\n50\n00:02:50.060 --> 00:02:54.440\ncomplete either relationship,\neither equality or greater than.\n\n51\n00:02:54.440 --> 00:02:58.304\nSo greater than or equal to is\ndifferent than strictly greater than.\n\n52\n00:02:58.304 --> 00:03:00.412\n&gt;&gt; Right?\n&gt;&gt; Python offers you the ability through\n\n53\n00:03:00.412 --> 00:03:02.330\nout standard comparisons, right?\n\n54\n00:03:02.330 --> 00:03:07.480\nWe use these little operators to do those\ncomparisons, on numbers, on strings.\n\n55\n00:03:07.480 --> 00:03:09.410\nThink on dates as well.\n\n56\n00:03:09.410 --> 00:03:12.090\nSo we have what is kind\nof a total ordering.\n\n57\n00:03:12.090 --> 00:03:13.840\nAnd it offers some other tricks.\n\n58\n00:03:13.840 --> 00:03:18.230\nBut if you really want to create\na custom class, and really drill down.\n\n59\n00:03:18.230 --> 00:03:21.300\nWell, there's ways to make that explicit.\n\n60\n00:03:21.300 --> 00:03:24.580\nAnd well, let's go ahead and\ntake a look at the scree,\n\n61\n00:03:24.580 --> 00:03:28.438\nand use a previous episode's fun time.\n\n62\n00:03:28.438 --> 00:03:31.800\nI'm actually gonna make a copy of equal or\nnot equal and\n\n63\n00:03:31.800 --> 00:03:36.700\njust call it greater or less.\n\n64\n00:03:38.430 --> 00:03:40.040\nAnd then, I'm gonna call greater or less.\n\n65\n00:03:40.040 --> 00:03:41.150\nThen, I just wanna look at this.\n\n66\n00:03:41.150 --> 00:03:42.533\nWe're gonna play on\nthe ripple a little bit, and\n\n67\n00:03:42.533 --> 00:03:43.656\nthen we're gonna come back and fix it.\n\n68\n00:03:43.656 --> 00:03:44.374\n&gt;&gt; Okay, okay.\n\n69\n00:03:44.374 --> 00:03:47.920\n&gt;&gt; All right, so\nwe have this equal and not equal.\n\n70\n00:03:47.920 --> 00:03:50.350\nSo I know I can strictly compare equality.\n\n71\n00:03:51.750 --> 00:03:56.342\nBut I'm not necessarily guaranteed\nless than, greater than, less than or\n\n72\n00:03:56.342 --> 00:03:59.730\nequal to, greater than or\nequal to, as it stands here.\n\n73\n00:04:01.110 --> 00:04:05.845\nHowever, let's see if we can\nplay around in the ripple,\n\n74\n00:04:05.845 --> 00:04:09.185\nand maybe we get those for free just\nlike we saw in the previous episode.\n\n75\n00:04:09.185 --> 00:04:12.955\nTechnically, if I have an equal to I kind\nof get an equal to or a not equal for\n\n76\n00:04:12.955 --> 00:04:14.965\nfree if I don't have any custom logic.\n\n77\n00:04:14.965 --> 00:04:17.515\nBecause Python is like\nwell if you have an equal\n\n78\n00:04:17.515 --> 00:04:21.065\nthe not equal should just be\nthe equal negated, right?\n\n79\n00:04:21.065 --> 00:04:23.325\nIf equal returns true just make it false.\n\n80\n00:04:23.325 --> 00:04:25.290\nIf it returns false just make it true.\n\n81\n00:04:25.290 --> 00:04:30.170\nThen maybe you have some weird esoteric\nsystem where that's not the case.\n\n82\n00:04:30.170 --> 00:04:35.480\nI tend to be explicit even if I'm just\ndirectly saying, exactly what Python does.\n\n83\n00:04:35.480 --> 00:04:36.910\nIt just helps me reason about it, and\n\n84\n00:04:36.910 --> 00:04:41.380\nensure that the relationships are behaving\nthe way that I anticipate them to.\n\n85\n00:04:41.380 --> 00:04:46.280\nSo let's come over here, and\nstart up a python ripple with our points.\n\n86\n00:04:46.280 --> 00:04:51.110\nSo -i and greater than, there we go.\n\n87\n00:04:51.110 --> 00:04:53.450\nOkay, so at p1, there it is.\n\n88\n00:04:53.450 --> 00:04:54.840\nAt p2, there's that one.\n\n89\n00:04:54.840 --> 00:04:57.380\nThey should be the same.\n\n90\n00:04:57.380 --> 00:05:00.508\nIf I say p1 is less than p2.\n\n91\n00:05:00.508 --> 00:05:03.440\nLess than not supportive between\ninstances of point and point.\n\n92\n00:05:04.840 --> 00:05:08.190\nNotice this is different than\nin the previous episode,\n\n93\n00:05:08.190 --> 00:05:14.110\nbefore I had dunder eq or\ndunder ne, it said true or false.\n\n94\n00:05:14.110 --> 00:05:18.500\nIt actually returned something, it was\nlike I can tell you something about them.\n\n95\n00:05:18.500 --> 00:05:25.639\nBut less than and correspondingly less,\nlook at less than or equal to p2.\n\n96\n00:05:25.639 --> 00:05:31.237\nWell, it's the same thing and\nyou know what that's not right.\n\n97\n00:05:31.237 --> 00:05:35.797\nGreater than or equal two or strictly\ngreater than, I get almost word for\n\n98\n00:05:35.797 --> 00:05:39.430\nword except for\nthe operator the same type error.\n\n99\n00:05:39.430 --> 00:05:42.820\nAnd the reason being is because I'm\nnot gonna make any assumptions.\n\n100\n00:05:42.820 --> 00:05:46.620\nI don't have any way of doing less than,\nless than or equal to, greater than,\n\n101\n00:05:46.620 --> 00:05:47.760\ngreater or equal to.\n\n102\n00:05:47.760 --> 00:05:50.960\nComparisons from a point to a point.\n\n103\n00:05:50.960 --> 00:05:51.460\nI don't know.\n\n104\n00:05:53.540 --> 00:05:57.990\nIf we do this exact same thing\nusing the operator module actually.\n\n105\n00:05:57.990 --> 00:06:02.820\nSo from operator,\nwe have a ge, lt, le, gt.\n\n106\n00:06:02.820 --> 00:06:10.530\nAnd these are usually always\ntwo letter abbreviations.\n\n107\n00:06:10.530 --> 00:06:15.850\nI'm really bad about accent like putting\ng-t-e or l-t-e for less than or equal to.\n\n108\n00:06:17.030 --> 00:06:22.702\nBut in Python it's ge, lt, le, gt,\nunless I actually got that one reverse.\n\n109\n00:06:22.702 --> 00:06:27.410\nSo sometimes, invalid,\nyou actually have to say import.\n\n110\n00:06:29.110 --> 00:06:33.316\nThere we go, so I have ge,\na built-in function, so\n\n111\n00:06:33.316 --> 00:06:38.782\nI look at ge(p1, p2), greater than or\nequal to not supported.\n\n112\n00:06:38.782 --> 00:06:41.000\nNotice I get the exact same error message.\n\n113\n00:06:41.000 --> 00:06:46.155\nAnd that's because ge and\nthe operator are the same.\n\n114\n00:06:46.155 --> 00:06:49.308\n&gt;&gt; [LAUGH]\n&gt;&gt; So if I do le(p1, p2),\n\n115\n00:06:49.308 --> 00:06:52.502\nI get exactly the same, okay?\n\n116\n00:06:52.502 --> 00:06:53.900\nI'm not gonna go through the other ones.\n\n117\n00:06:53.900 --> 00:07:00.210\nBut I do get ge, lt, le,\nand gt as functions from\n\n118\n00:07:01.460 --> 00:07:06.580\nthe module that I can use\nin place of the actual less\n\n119\n00:07:06.580 --> 00:07:11.300\nthan symbol, or the greater than symbol,\nor the greater than, or equal to symbols.\n\n120\n00:07:11.300 --> 00:07:16.480\nSo let's get out of here, and\nlet's just try it out, right?\n\n121\n00:07:16.480 --> 00:07:19.998\nSo greater, or less.\n\n122\n00:07:19.998 --> 00:07:23.650\nNow, [COUGH] Knowing those functions,\nright?\n\n123\n00:07:24.960 --> 00:07:27.520\nKnowing what we know from\npossibly the previous episode.\n\n124\n00:07:27.520 --> 00:07:29.150\nIf you're just now joining us,\nthank you so much.\n\n125\n00:07:29.150 --> 00:07:30.907\nI would definitely go\ncheck out the others.\n\n126\n00:07:30.907 --> 00:07:32.317\n&gt;&gt; No, no.\n\n127\n00:07:32.317 --> 00:07:36.610\n&gt;&gt; But if I wanted to say, this is how\nI want you to determine less than.\n\n128\n00:07:38.400 --> 00:07:41.984\nWell, I got dunder, and\n\n129\n00:07:41.984 --> 00:07:46.612\nZach, do you dare on dunder lt?\n\n130\n00:07:46.612 --> 00:07:49.137\nYeah, dunder lt.\n\n131\n00:07:49.137 --> 00:07:53.029\nSo return, right, so self and other.\n\n132\n00:07:53.029 --> 00:07:54.709\nWhat am I gonna return?\n\n133\n00:07:54.709 --> 00:07:58.923\nWell, let's see, how do I determine\nif something's less than?\n\n134\n00:07:58.923 --> 00:08:01.958\nNow, I'm gonna make\na simplified assumption.\n\n135\n00:08:01.958 --> 00:08:06.500\nA point is less than if both x and\ny are less than.\n\n136\n00:08:07.860 --> 00:08:10.990\nMaybe that's not how you\nwant to determine that.\n\n137\n00:08:10.990 --> 00:08:15.860\nMaybe you want to say well,\nit's less than if\n\n138\n00:08:15.860 --> 00:08:20.310\nits distance from (0,0)\nIs less than distant.\n\n139\n00:08:20.310 --> 00:08:22.670\nAnd that way you can take in both x and\ny component and\n\n140\n00:08:22.670 --> 00:08:24.620\nget it into a single comparison.\n\n141\n00:08:24.620 --> 00:08:30.060\nBut, let's just keep it simple,\nnot strictly maybe the best comparison,\n\n142\n00:08:30.060 --> 00:08:36.339\nbut less than,\nself if the x is r, &lt; other.x and\n\n143\n00:08:36.339 --> 00:08:41.480\nself.y &lt; other.y,\nif they're both less than.\n\n144\n00:08:41.480 --> 00:08:44.930\nNow, that actually guarantees\nthat 1 is closer to the origin.\n\n145\n00:08:46.270 --> 00:08:50.180\nActually, no excuse me, on the positive\nside, it's closer, on the negative side,\n\n146\n00:08:50.180 --> 00:08:52.140\nit may actually mean far away.\n\n147\n00:08:52.140 --> 00:08:53.540\nSo we get weird comparisons there.\n\n148\n00:08:53.540 --> 00:08:56.270\nSo this isn't necessarily\nthe greatest comparison but\n\n149\n00:08:56.270 --> 00:08:58.620\nI don't wanna go into\na whole crazy math guy trap.\n\n150\n00:08:59.830 --> 00:09:01.150\n&gt;&gt; And I appreciate that.\n\n151\n00:09:01.150 --> 00:09:01.909\n&gt;&gt; Yeah, yeah, yeah.\n\n152\n00:09:01.909 --> 00:09:04.157\nLet's not get hung up on-\n&gt;&gt; A little helpful.\n\n153\n00:09:04.157 --> 00:09:07.865\n&gt;&gt; On appropriate metrics or\nanything like that.\n\n154\n00:09:07.865 --> 00:09:10.123\nSo less than.\n\n155\n00:09:10.123 --> 00:09:15.310\nNow we've seen that this already breaks,\nright, before we implemented this method.\n\n156\n00:09:15.310 --> 00:09:18.450\nWhile we're here,\nthere's no point in going back and forth.\n\n157\n00:09:18.450 --> 00:09:24.650\nIf I have a less than, I probably can\ndo a greater than pretty easily, right?\n\n158\n00:09:24.650 --> 00:09:29.720\nSo def dunder, Zach,\nwhat do you think it is?\n\n159\n00:09:29.720 --> 00:09:30.840\n&gt;&gt; Gt?\n\n160\n00:09:30.840 --> 00:09:33.430\n&gt;&gt; He's catching on, ladies and\ngentlemen, makes me happy.\n\n161\n00:09:33.430 --> 00:09:35.788\nWarms my heart, deep down into my soul.\n\n162\n00:09:35.788 --> 00:09:37.755\n&gt;&gt; [LAUGH]\n&gt;&gt; So, other, and\n\n163\n00:09:37.755 --> 00:09:41.660\nwe're gonna return self .x &gt; other .x or\nself .y &gt; other.y.\n\n164\n00:09:41.660 --> 00:09:46.826\nJust like that, so I have less than or\ngreater than, all right?\n\n165\n00:09:46.826 --> 00:09:51.478\nWe're gonna go play around just for\na moment and\n\n166\n00:09:51.478 --> 00:09:54.630\nsee kinda what happens, okay?\n\n167\n00:09:54.630 --> 00:09:57.015\nSo here we go, let's hop into the.\n\n168\n00:09:58.390 --> 00:10:02.438\nGreater than or less and p1 is &lt; p2.\n\n169\n00:10:02.438 --> 00:10:04.526\nFalse.\n\n170\n00:10:04.526 --> 00:10:09.530\nAnd that's because,\n00 can't be less than 00 right?\n\n171\n00:10:09.530 --> 00:10:13.289\nWhat if I say p1 &lt; p2, false,\n\n172\n00:10:13.289 --> 00:10:19.290\nI meant to a put p3 there,\np3 there, there we go.\n\n173\n00:10:19.290 --> 00:10:20.210\n&gt;&gt; It still false.\n\n174\n00:10:20.210 --> 00:10:21.540\n&gt;&gt; Yeah, but why?\n\n175\n00:10:21.540 --> 00:10:26.922\np1 and p3, well not both x and\n\n176\n00:10:26.922 --> 00:10:31.067\ny are less than, okay?\n\n177\n00:10:31.067 --> 00:10:33.480\nSo is p1 x is zero less than one?\n\n178\n00:10:33.480 --> 00:10:37.510\nYeah, but\nis zero less than negative four, no.\n\n179\n00:10:37.510 --> 00:10:42.298\nSo this is where I'm saying that\nmetric may not be the best because\n\n180\n00:10:42.298 --> 00:10:44.921\nit's hard to reason about, okay?\n\n181\n00:10:44.921 --> 00:10:46.112\nBut it is capable and\n\n182\n00:10:46.112 --> 00:10:50.751\njust to keep things simple we're not\ngonna add shenanigans here, all right?\n\n183\n00:10:50.751 --> 00:10:55.920\n&gt;&gt; [LAUGH]\n&gt;&gt; Let's see if I can do p1 &lt; p2.\n\n184\n00:10:55.920 --> 00:10:58.530\nNo, well, that makes sense\nbecause they're the same point.\n\n185\n00:10:59.620 --> 00:11:03.845\nIs p1 &gt; p3?\n\n186\n00:11:03.845 --> 00:11:04.760\nNo.\n\n187\n00:11:04.760 --> 00:11:09.170\nAgain, let's look and think about why that\nis based on the metric that we've decided.\n\n188\n00:11:09.170 --> 00:11:11.200\nAnd this brings up an interesting point.\n\n189\n00:11:11.200 --> 00:11:16.340\nYou should really think about what these\nmean to you in the context of usage.\n\n190\n00:11:16.340 --> 00:11:18.370\nLike don't willy nilly make these up.\n\n191\n00:11:18.370 --> 00:11:21.090\nCuz I'm showing you now, hey,\n\n192\n00:11:21.090 --> 00:11:24.990\nwell wait a minute, how do I actually\ndetermine if something's greater than or\n\n193\n00:11:24.990 --> 00:11:29.660\nequal to, or greater than or\nless than, if it has two components?\n\n194\n00:11:29.660 --> 00:11:32.230\nWell there's ways to reduce\nthat to a single number.\n\n195\n00:11:32.230 --> 00:11:35.510\nWe're staying away from that, but\nit's important to think about.\n\n196\n00:11:35.510 --> 00:11:37.350\nSo here, greater than doesn't work.\n\n197\n00:11:37.350 --> 00:11:38.780\nIs 0 greater than 1?\n\n198\n00:11:38.780 --> 00:11:41.650\nNo, out, I'm out, right?\n\n199\n00:11:43.280 --> 00:11:44.760\nSo there's that.\n\n200\n00:11:44.760 --> 00:11:46.060\nWe do have them working now.\n\n201\n00:11:46.060 --> 00:11:47.220\nWe no longer get a type error.\n\n202\n00:11:48.260 --> 00:11:49.080\nBut I wonder.\n\n203\n00:11:50.120 --> 00:11:51.930\nWe have equals.\n\n204\n00:11:51.930 --> 00:11:53.390\nWe have not equals.\n\n205\n00:11:53.390 --> 00:11:55.080\nWe have less than.\n\n206\n00:11:55.080 --> 00:11:55.780\nWe have greater than.\n\n207\n00:11:57.150 --> 00:12:01.960\nWell, isn't less than and\nequal to, less than or equal to?\n\n208\n00:12:01.960 --> 00:12:03.660\nNotice I just said or.\n\n209\n00:12:03.660 --> 00:12:05.230\nThat's kind of like if\nI had a less than and\n\n210\n00:12:05.230 --> 00:12:09.360\nequal to, I just find both of those and\nthen take the or of them, right?\n\n211\n00:12:09.360 --> 00:12:13.800\nSo let's see if I get less than or equal\nto and greater than and equal to for free.\n\n212\n00:12:13.800 --> 00:12:19.486\nRight, so p1 &lt; = to p3,\n\n213\n00:12:19.486 --> 00:12:22.450\nnot supported.\n\n214\n00:12:22.450 --> 00:12:26.140\nP1 &lt; = p3.\n\n215\n00:12:26.140 --> 00:12:26.772\nNo.\n\n216\n00:12:26.772 --> 00:12:31.288\nAnd so you're like, well,\nwhy did I do that other one?\n\n217\n00:12:31.288 --> 00:12:34.887\nWell, you never know,\nit's actually forcing you for\n\n218\n00:12:34.887 --> 00:12:39.890\nthe other comparisons to make logic for\nthose comparisons, okay.\n\n219\n00:12:39.890 --> 00:12:45.920\nSo if we come out of here, let's go and\nactually make that happen.\n\n220\n00:12:45.920 --> 00:12:51.450\nAnd I can't tell you Zach how much\npart of me wants to go, let's actually\n\n221\n00:12:51.450 --> 00:12:55.300\nfix this and make it to where it's\nmeaningful, but no, we're gonna stay away.\n\n222\n00:12:55.300 --> 00:12:59.370\nMaybe we'll do that at the very end,\njust in case people are like, yeah,\n\n223\n00:12:59.370 --> 00:13:00.920\nthat makes sense now.\n\n224\n00:13:00.920 --> 00:13:08.190\nSo def dunder, I want less than or equal\nto, Zach, this could be a little tricky.\n\n225\n00:13:08.190 --> 00:13:11.402\nWhat do you think the dunder method is?\n\n226\n00:13:11.402 --> 00:13:12.145\nLe?\n\n227\n00:13:12.145 --> 00:13:16.370\n&gt;&gt; Le, ladies and gentlemen,\nhe was paying attention.\n\n228\n00:13:16.370 --> 00:13:16.890\n&gt;&gt; I was?\n\n229\n00:13:16.890 --> 00:13:18.140\n&gt;&gt; He was, he was.\n\n230\n00:13:18.140 --> 00:13:18.890\n&gt;&gt; I'm a happy man.\n\n231\n00:13:18.890 --> 00:13:22.825\n&gt;&gt; It concerns me that\nyou were like I was?\n\n232\n00:13:22.825 --> 00:13:30.003\n&gt;&gt; [LAUGH]\n&gt;&gt; So less than or equal to and it's le.\n\n233\n00:13:30.003 --> 00:13:34.576\nSo I'm going to return, and\nthere was a, if I can spell return,\n\n234\n00:13:34.576 --> 00:13:39.494\na nice little foreshadowing near\nthe beginning of the episode where I\n\n235\n00:13:39.494 --> 00:13:42.190\nimported ge, le, lt, and gt.\n\n236\n00:13:42.190 --> 00:13:45.600\n&gt;&gt; Correct.\n&gt;&gt; Right, so le is less than or equal to.\n\n237\n00:13:45.600 --> 00:13:46.490\nAnd how do I do that?\n\n238\n00:13:46.490 --> 00:13:50.080\nWell, let's see here.\n\n239\n00:13:50.080 --> 00:13:56.282\nTo keep in line with all\nthese others I could say,\n\n240\n00:13:56.282 --> 00:14:04.010\nself.x &lt; = other.x and\nself.y is &lt; = other.y.\n\n241\n00:14:04.010 --> 00:14:09.239\nAnd likewise, I can do greater than or\nequal to just like that.\n\n242\n00:14:11.420 --> 00:14:16.368\nAnd so we could return self.x &gt;= other x.\n\n243\n00:14:16.368 --> 00:14:20.446\nAgain, not the greatest of metrics, and\n\n244\n00:14:20.446 --> 00:14:25.440\nself.y &gt;= other.y, and boom there we go.\n\n245\n00:14:25.440 --> 00:14:28.730\nSo we have less than, greater than,\nless than or equal to, greater than or\n\n246\n00:14:28.730 --> 00:14:29.740\nequal to.\n\n247\n00:14:29.740 --> 00:14:32.670\nEqual to, or not equal to, okay?\n\n248\n00:14:32.670 --> 00:14:34.870\nSo I now have a full comparison set.\n\n249\n00:14:34.870 --> 00:14:36.790\n&gt;&gt; Yes you do.\n&gt;&gt; I can use any of those comparison\n\n250\n00:14:36.790 --> 00:14:39.790\noperators with points.\n\n251\n00:14:39.790 --> 00:14:46.650\nOr, in Python land, with anything\nthat has an x and a y attribute.\n\n252\n00:14:46.650 --> 00:14:47.920\nBecause if it has an x and\n\n253\n00:14:47.920 --> 00:14:53.820\na y attribute then it kinda\nfulfills the interface for a point.\n\n254\n00:14:53.820 --> 00:14:58.020\nIt could be a pair or\nit could be left, right and\n\n255\n00:14:58.020 --> 00:14:59.430\nmaybe you just call them x and y.\n\n256\n00:14:59.430 --> 00:15:03.010\nSo anything can be compared but\n\n257\n00:15:03.010 --> 00:15:09.180\nbe careful because it may not make sense\nif not both of them are points, okay.\n\n258\n00:15:09.180 --> 00:15:14.903\nBecause maybe the numbers have\ndifferent meanings respectively.\n\n259\n00:15:14.903 --> 00:15:17.780\nSo like a vector, an x and y component.\n\n260\n00:15:17.780 --> 00:15:22.903\nAnd then well, how do I compare vectors?\n\n261\n00:15:22.903 --> 00:15:27.678\nWell that comparison is gonna be different\nthan absolute position on the page or\n\n262\n00:15:27.678 --> 00:15:29.257\nsome coordinate system.\n\n263\n00:15:29.257 --> 00:15:31.711\nSo here's less than,\ngreater than, equal, okay,\n\n264\n00:15:31.711 --> 00:15:33.490\nI think I have all of these down now.\n\n265\n00:15:33.490 --> 00:15:35.314\n&gt;&gt; Yeah.\n&gt;&gt; It looks like we are good to go.\n\n266\n00:15:35.314 --> 00:15:39.051\nBe very careful about typing these\nbecause you can actually just self x\n\n267\n00:15:39.051 --> 00:15:43.650\nis greater than self x, instead of other,\nand then your comparisons get weird.\n\n268\n00:15:43.650 --> 00:15:45.640\nOur comparison are weird anyway.\n\n269\n00:15:45.640 --> 00:15:47.046\nBut they can get weirder.\n\n270\n00:15:47.046 --> 00:15:50.139\n&gt;&gt; [LAUGH]\n&gt;&gt; So p1 &gt;= p3 and\n\n271\n00:15:50.139 --> 00:15:56.254\nnow I have the ability to\nmake said comparisons, okay?\n\n272\n00:15:56.254 --> 00:16:02.112\nSo that all exists And\nyou know what, Zach?\n\n273\n00:16:02.112 --> 00:16:05.390\nBecause we've seen that this is capable,\n\n274\n00:16:05.390 --> 00:16:09.180\nI feel really compelled to show you-\n&gt;&gt; Make it work, you mean?\n\n275\n00:16:09.180 --> 00:16:10.750\n&gt;&gt; Maybe a better metric.\n\n276\n00:16:10.750 --> 00:16:11.596\n&gt;&gt; Okay.\n&gt;&gt; Right, for\n\n277\n00:16:11.596 --> 00:16:13.840\nhow do I determine if\nsomething's less than?\n\n278\n00:16:13.840 --> 00:16:19.900\nWell, let's establish if less than is\nclosest, regardless of whether it's x and\n\n279\n00:16:19.900 --> 00:16:24.160\ny, if I were to take a straight edge and\nmark between 0, 0 on the page, or\n\n280\n00:16:24.160 --> 00:16:29.130\nat the center of the page to that, which\none has the shortest distance, right?\n\n281\n00:16:29.130 --> 00:16:31.084\nSo the respective shortest distances.\n\n282\n00:16:31.084 --> 00:16:32.613\nI'm not gonna do that for all of these.\n\n283\n00:16:32.613 --> 00:16:34.687\nBut I will do this for\none of them, just so\n\n284\n00:16:34.687 --> 00:16:37.683\nyou can see,\nthis is a little easier to reason about.\n\n285\n00:16:37.683 --> 00:16:40.780\nBecause as it stands,\nlet's take less than, for instance.\n\n286\n00:16:40.780 --> 00:16:43.175\nThose aren't really easy to reason about.\n\n287\n00:16:43.175 --> 00:16:46.810\nCuz you're like, wait a minute,\nthat doesn't make any sense.\n\n288\n00:16:46.810 --> 00:16:51.733\nSo if I have negative numbers,\nthe more negative one, but\n\n289\n00:16:51.733 --> 00:16:55.420\nonly, it's kinda mind-bending.\n\n290\n00:16:55.420 --> 00:16:58.270\nBecause they both have to be less or\nthey both have to be greater.\n\n291\n00:16:59.810 --> 00:17:02.040\nIt should be either or, no,\n\n292\n00:17:02.040 --> 00:17:07.300\nthat doesn't make sense cuz what if I have\na negative x but a really positive y?\n\n293\n00:17:07.300 --> 00:17:09.960\nSo how do I condense that down?\n\n294\n00:17:09.960 --> 00:17:14.360\nThis is a little added bonus for\nall of you watching.\n\n295\n00:17:14.360 --> 00:17:16.030\nSo, how do I do this?\n\n296\n00:17:16.030 --> 00:17:21.097\nLet's say self_dist, and that is going\n\n297\n00:17:21.097 --> 00:17:26.162\nto be self.x ** 2 + self.y ** 2 and\n\n298\n00:17:26.162 --> 00:17:30.530\ntake the square root, okay?\n\n299\n00:17:30.530 --> 00:17:35.850\nAnd full disclosure, taking the square\nroot, not really necessary.\n\n300\n00:17:35.850 --> 00:17:39.765\nBut this is to harken back,\nI'm making a triangle.\n\n301\n00:17:39.765 --> 00:17:41.458\n&gt;&gt; [LAUGH]\n&gt;&gt; This is technically\n\n302\n00:17:41.458 --> 00:17:42.410\npythagorean theroem.\n\n303\n00:17:43.580 --> 00:17:49.420\nSo other_dist = (other.x\n\n304\n00:17:49.420 --> 00:17:54.570\n** + other.y **).\n\n305\n00:17:54.570 --> 00:17:58.160\nAnd I do like the fact that we\nhave a power operator in Python.\n\n306\n00:17:58.160 --> 00:18:00.072\nIt makes things all so nice.\n\n307\n00:18:00.072 --> 00:18:05.922\nAnd now I take that, and\nnow here's how I make my determination.\n\n308\n00:18:09.039 --> 00:18:11.830\nNow I have that single\ncomparison of a reduced number.\n\n309\n00:18:11.830 --> 00:18:15.240\nAnd I'm saying, hey,\nis self, the distance,\n\n310\n00:18:15.240 --> 00:18:18.020\ncloser to the origin than the other one?\n\n311\n00:18:18.020 --> 00:18:19.850\nBy squaring and taking a square root,\n\n312\n00:18:19.850 --> 00:18:23.550\nI take out the implications of\nnegative numbers in this case.\n\n313\n00:18:23.550 --> 00:18:26.120\nNow this is very specific to my point.\n\n314\n00:18:26.120 --> 00:18:29.771\nNot my point that I'm making but\nthe actual point in class that I created.\n\n315\n00:18:29.771 --> 00:18:33.667\nSo keep that in mind,\nthese are context-based.\n\n316\n00:18:33.667 --> 00:18:34.740\nLet's see if it works, though.\n\n317\n00:18:34.740 --> 00:18:37.200\nLet's see if my less than\nactually makes sense.\n\n318\n00:18:37.200 --> 00:18:37.980\n&gt;&gt; Okay.\n\n319\n00:18:37.980 --> 00:18:40.465\n&gt;&gt; And I'm leaving greater than there,\nso we can make a comparison.\n\n320\n00:18:40.465 --> 00:18:41.938\n&gt;&gt; Mm-hm.\n\n321\n00:18:41.938 --> 00:18:46.124\n&gt;&gt; All right, so python3 -i\n\n322\n00:18:46.124 --> 00:18:51.404\ngreater than p1 is less than p2.\n\n323\n00:18:51.404 --> 00:18:52.644\nFalse.\n\n324\n00:18:52.644 --> 00:18:54.838\nAnd it's not because\nthey're actually equal.\n\n325\n00:18:54.838 --> 00:18:57.580\nAnd so if I look at p1 and\np2, they're the same.\n\n326\n00:18:58.800 --> 00:19:01.434\nThey have a distance of zero.\n\n327\n00:19:01.434 --> 00:19:03.826\nWhat about p1 is less than p3?\n\n328\n00:19:03.826 --> 00:19:05.369\nTrue.\n\n329\n00:19:05.369 --> 00:19:10.640\nThat originally turned false because\nboth of them had to be less.\n\n330\n00:19:10.640 --> 00:19:11.786\nWell, why is it true?\n\n331\n00:19:11.786 --> 00:19:15.843\nWell, we know that p1 is 0,0, 0.3 or\n\n332\n00:19:15.843 --> 00:19:19.912\np3 is actually at 1, -4 negative four.\n\n333\n00:19:19.912 --> 00:19:25.175\nAnd let's say my nose is the center\nof the screen, p1's here,\n\n334\n00:19:25.175 --> 00:19:31.237\np2, if I'm thinking about this right,\nis going to be this way and down.\n\n335\n00:19:31.237 --> 00:19:37.657\nAnd notice this is farther away from\nthe center than this point here, okay?\n\n336\n00:19:37.657 --> 00:19:42.234\nSo now that has an appropriate\ncomparison that makes sense.\n\n337\n00:19:42.234 --> 00:19:47.216\nIf I go to p1 &gt; p3, False,\n\n338\n00:19:47.216 --> 00:19:51.797\nwell, that makes sense.\n\n339\n00:19:51.797 --> 00:19:55.265\nBut what about p3 &gt; p1.\n\n340\n00:19:55.265 --> 00:19:58.500\nIf I reverse them, I still get false.\n\n341\n00:19:58.500 --> 00:20:00.220\nSo if I reverse them,\n\n342\n00:20:00.220 --> 00:20:05.776\nthen I should get not the same thing\nif I have a legitimate [INAUDIBLE].\n\n343\n00:20:05.776 --> 00:20:07.351\nZach's off camera going.\n\n344\n00:20:07.351 --> 00:20:10.105\n&gt;&gt; [LAUGH]\n&gt;&gt; Hold on a sec, hold on a sec.\n\n345\n00:20:10.105 --> 00:20:13.675\nIf I replace those with just numbers,\nright, 1 is greater than 3, no.\n\n346\n00:20:13.675 --> 00:20:14.983\n3 is greater than 1.\n\n347\n00:20:14.983 --> 00:20:18.192\nCan you imagine what would happen\nif it came back and said, no again.\n\n348\n00:20:18.192 --> 00:20:20.312\nOne of those has to be true,\n\n349\n00:20:20.312 --> 00:20:25.306\nso the way our grader then is written,\nit doesn't work so well.\n\n350\n00:20:25.306 --> 00:20:28.570\nSo Python offers some of\nthis nice syntax cleanup.\n\n351\n00:20:28.570 --> 00:20:29.892\nIt's very, very tricky.\n\n352\n00:20:29.892 --> 00:20:34.605\nYou have to think about, what does\nthe logic mean behind the system?\n\n353\n00:20:34.605 --> 00:20:36.384\nCuz if it's not meaningful,\n\n354\n00:20:36.384 --> 00:20:41.310\ncleaning it up is actually gonna cause\nmore problems than it'll actually solve.\n\n355\n00:20:41.310 --> 00:20:43.220\nCuz is p1 greater than p3?\n\n356\n00:20:43.220 --> 00:20:44.940\nNo, cool, then do this other stuff.\n\n357\n00:20:44.940 --> 00:20:48.984\nBut if your logic that is implementing\nthe comparison is faulty,\n\n358\n00:20:48.984 --> 00:20:52.083\nyou may get weird behavior,\nas we've just seen.\n\n359\n00:20:52.083 --> 00:20:53.114\np1 greater than p3?\n\n360\n00:20:53.114 --> 00:20:53.743\nNo.\n\n361\n00:20:53.743 --> 00:20:54.980\np3 greater than p1?\n\n362\n00:20:54.980 --> 00:20:55.970\nAbsolutely not.\n\n363\n00:20:56.990 --> 00:21:00.080\nI thought one of those had to\nbe true if we had comparables.\n\n364\n00:21:00.080 --> 00:21:04.730\nAnd we're assuming that points\nare comparable, so there's your answer.\n\n365\n00:21:04.730 --> 00:21:05.650\n&gt;&gt; Like you said before,\n\n366\n00:21:05.650 --> 00:21:10.025\nyou think it's better to be explicit\nthan to rely on Python necessarily.\n\n367\n00:21:10.025 --> 00:21:13.530\n&gt;&gt; Yeah, don't make use of those magic,\n\n368\n00:21:13.530 --> 00:21:18.050\nespecially when you're first starting out\nor if you're working with other people.\n\n369\n00:21:18.050 --> 00:21:19.960\nIf I can come into the point class and\ngo, okay,\n\n370\n00:21:19.960 --> 00:21:24.720\nI'll see all the comparisons,\nsee how the logic works?\n\n371\n00:21:24.720 --> 00:21:30.190\nIt's really nice to be explicit,\nother than, that's what that does?\n\n372\n00:21:30.190 --> 00:21:31.400\nI don't know.\n\n373\n00:21:31.400 --> 00:21:32.570\nSo Zach, there you have it.\n\n374\n00:21:32.570 --> 00:21:36.010\nI can do greater than, less than,\ngreater than or equal to, or less than or\n\n375\n00:21:36.010 --> 00:21:40.060\nequal to with custom objects that'll clean\nup my code and make things beautiful.\n\n376\n00:21:40.060 --> 00:21:43.140\nAnd it just kinda works if we\nimplement those dunder methods.\n\n377\n00:21:43.140 --> 00:21:43.850\n&gt;&gt; Wonderful job.\n\n378\n00:21:43.850 --> 00:21:48.340\nGreater and less, great episode inside\nof the Python data model series.\n\n379\n00:21:48.340 --> 00:21:50.830\nAnd Justin, before we move on,\nanything else you'd like to say?\n\n380\n00:21:50.830 --> 00:21:53.155\n&gt;&gt; Well, I just really wanna drive home,\n\n381\n00:21:53.155 --> 00:21:57.733\nthink about the contextual meaning\nwhen you're using these magic methods,\n\n382\n00:21:57.733 --> 00:22:01.195\nespecially with comparisons and\nsome of the other sorts.\n\n383\n00:22:01.195 --> 00:22:04.031\nBecause if you're not thinking about\nthat and you're just having fun,\n\n384\n00:22:04.031 --> 00:22:05.201\nthat's great for learning.\n\n385\n00:22:05.201 --> 00:22:11.790\nBut it could lead to, well, logic errors,\nadditional runtime issues down the road.\n\n386\n00:22:11.790 --> 00:22:13.930\nSo keep that in the back of your mind.\n\n387\n00:22:13.930 --> 00:22:14.830\n&gt;&gt; Thank you, Justin.\n\n388\n00:22:14.830 --> 00:22:17.132\nAnd Python data model's\na wonderful series.\n\n389\n00:22:17.132 --> 00:22:19.160\nJustin's done a great job\nputting it all together for you.\n\n390\n00:22:19.160 --> 00:22:21.130\nMake sure you see every single episode.\n\n391\n00:22:21.130 --> 00:22:24.280\nAnd while you're in the course library,\nthere's thousands of other videos\n\n392\n00:22:24.280 --> 00:22:27.110\ndesigned to help you go further,\nso check those out too.\n\n393\n00:22:27.110 --> 00:22:29.870\nTell everybody you know about DevProTV,\nyou'll be glad you did.\n\n394\n00:22:29.870 --> 00:22:31.430\nThanks for watching, I'm Zach Memos.\n\n395\n00:22:31.430 --> 00:22:31.994\n&gt;&gt; And I'm Justin Dennison.\n\n396\n00:22:31.994 --> 00:22:32.764\n&gt;&gt; And we will see you soon.\n\n397\n00:22:32.764 --> 00:22:38.290\n[MUSIC]\n\n",
          "vimeoId": "252568473"
        },
        {
          "description": "In this episode, Justin and Daniel explore using custom objects in sets and dictionaries and the effects of overriding the \\_\\_hash\\_\\_ method when using custom objects in sets and dictionaries. Additionally, Justin discusses how to handle some of the 'gotchas' using \\_\\_slots\\_\\_ for the object.",
          "length": "1843",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-4-1-hashing_and_slots-020618-PGM.00_30_34_14.Still002.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-4-1-hashing_and_slots-020618-PGM.00_30_34_14.Still002-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-4-1-hashing_and_slots-020618-PGM.00_30_34_14.Still002-sm.jpg",
          "title": "Hashing and Slots",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:11.076 --> 00:00:13.653\n[SOUND] All right, greetings everyone, and\n\n3\n00:00:13.653 --> 00:00:16.449\nwelcome to another great\nepisode of Dev Pro TV.\n\n4\n00:00:16.449 --> 00:00:19.629\nI'm your host, Daniel Lowrie,\nand in today's episode,\n\n5\n00:00:19.629 --> 00:00:21.995\nit's more in our Python data model series.\n\n6\n00:00:21.995 --> 00:00:26.220\nYeah, it's weird, my mouth doesn't want\nto say that but, and yet, it happened.\n\n7\n00:00:26.220 --> 00:00:27.630\nJoining us back in the studio,\n\n8\n00:00:27.630 --> 00:00:30.710\nlending his expertise on that topic,\nour good friend Mr. Justin Dennison.\n\n9\n00:00:30.710 --> 00:00:32.570\nJustin, welcome back my man,\nhow's it going?\n\n10\n00:00:32.570 --> 00:00:33.840\n&gt;&gt; It is going fantastic Daniel and\n\n11\n00:00:33.840 --> 00:00:36.220\nhow are you today?\n&gt;&gt; Doing great, I have a hankering for\n\n12\n00:00:36.220 --> 00:00:37.870\nhome fries for some strange reason.\n\n13\n00:00:37.870 --> 00:00:40.231\nBut I'll leave it up to\nyou what we do today.\n\n14\n00:00:40.231 --> 00:00:43.037\n&gt;&gt; Well, you might be, well, disappointed.\n\n15\n00:00:43.037 --> 00:00:47.553\nWe're gonna talk about hashing,\ncustom hashing, and\n\n16\n00:00:47.553 --> 00:00:50.540\nthe implications and what is slots?\n\n17\n00:00:50.540 --> 00:00:52.990\nWell, I'm gonna set that up.\n\n18\n00:00:52.990 --> 00:00:55.265\nLeave that be, because well,\nwe're gonna talk about hashing.\n\n19\n00:00:55.265 --> 00:00:59.940\nAnd no, not home fries,\nnot these hash brown potatoes.\n\n20\n00:00:59.940 --> 00:01:01.000\nThese are delicious.\n&gt;&gt; Good.\n\n21\n00:01:01.000 --> 00:01:02.270\n&gt;&gt; Nope, none of that.\n\n22\n00:01:02.270 --> 00:01:06.960\nWe're actually talking about\nhow to hash an object, right?\n\n23\n00:01:06.960 --> 00:01:11.720\nWhat does it mean, well to be hashed,\nand then how does that come out?\n\n24\n00:01:11.720 --> 00:01:13.280\n&gt;&gt; So not a Vegas Denny's.\n\n25\n00:01:13.280 --> 00:01:14.120\n&gt;&gt; No it is not,\n\n26\n00:01:14.120 --> 00:01:15.320\nit is not.\n&gt;&gt; [LAUGH]\n\n27\n00:01:15.320 --> 00:01:16.490\n&gt;&gt; Unfortunately\n\n28\n00:01:16.490 --> 00:01:17.080\n&gt;&gt; Yeah.\n\n29\n00:01:17.080 --> 00:01:18.750\n&gt;&gt; It's more about Python, now\n\n30\n00:01:18.750 --> 00:01:21.335\n&gt;&gt; I thought a lot about this episode and\n\n31\n00:01:21.335 --> 00:01:25.507\nI think it's gonna be easier to\nkind of build on an example,\n\n32\n00:01:25.507 --> 00:01:30.000\nlike a pseudo real-world example.\nInstead of doing a little more exploration\n\n33\n00:01:30.000 --> 00:01:31.840\nlike we tend to do in this series.\n\n34\n00:01:31.840 --> 00:01:35.770\nJust because this is one of those\nedge case things, by and large,\n\n35\n00:01:35.770 --> 00:01:41.202\nyou may not use this a lot.\n&gt;&gt; Probably 1 out of every 10,000 times,\n\n36\n00:01:41.202 --> 00:01:42.460\nit'll come up.\n\n37\n00:01:42.460 --> 00:01:46.180\nBut it's gonna be handy to know\nthat it's available to you.\n\n38\n00:01:46.180 --> 00:01:51.510\nSo let's go ahead and get started and,\nwell, just see how things build.\n\n39\n00:01:51.510 --> 00:01:53.070\nSo let's take a look at the screen here.\n\n40\n00:01:53.070 --> 00:01:57.380\nAnd well, let's just call it hashing.py.\n\n41\n00:01:57.380 --> 00:01:58.910\nSo I'm gonna create a class.\n\n42\n00:02:00.050 --> 00:02:04.362\nI always go for very simple classes and\nI have no reason for that.\n\n43\n00:02:04.362 --> 00:02:06.504\nI'm gonna call it color and a year.\n\n44\n00:02:06.504 --> 00:02:10.308\nAnd there's a lot more to\na car than color and year, but\n\n45\n00:02:10.308 --> 00:02:12.971\nthis is gonna make things easy for us.\n\n46\n00:02:12.971 --> 00:02:18.433\nSo let's say I have this class and\nlet's say I have these cars and\n\n47\n00:02:18.433 --> 00:02:21.990\nI need to look up a review for them.\n\n48\n00:02:21.990 --> 00:02:24.740\nOne easy way to do a lookup in\nPython is using a dictionary,\n\n49\n00:02:24.740 --> 00:02:27.720\nbut I don't want to lookup\nthe review to find the car.\n\n50\n00:02:27.720 --> 00:02:29.562\nI actually wanna switch them around.\n\n51\n00:02:29.562 --> 00:02:32.320\nI wanna lookup the car to find the review.\n\n52\n00:02:32.320 --> 00:02:36.170\nNow, something that I've seen people\ndo is they'll create a Tuple or\n\n53\n00:02:36.170 --> 00:02:39.320\nsomething of that nature that, well okay.\n\n54\n00:02:39.320 --> 00:02:39.820\nWait a minute.\n\n55\n00:02:41.020 --> 00:02:43.283\nHow is that going to,\nthey'll give it a special name,\n\n56\n00:02:43.283 --> 00:02:45.216\nand then use that as\nthe key to the dictionary.\n\n57\n00:02:45.216 --> 00:02:50.210\nAnd interestingly enough,\nlet's say I create a few cars here, and\n\n58\n00:02:50.210 --> 00:02:53.460\nlet's go with a red car that was a 1997.\n\n59\n00:02:53.460 --> 00:02:55.758\nThat's super generic I realize that.\n\n60\n00:02:55.758 --> 00:03:00.870\nBut let's go another car, and\nthis is a blue car from 2001.\n\n61\n00:03:00.870 --> 00:03:07.491\nAnd then a third car and-\n&gt;&gt; How do you know my auto history?\n\n62\n00:03:07.491 --> 00:03:08.758\n[LAUGH]\n&gt;&gt; Well, Daniel,\n\n63\n00:03:08.758 --> 00:03:12.010\nall I'm gonna need is your mother's\nmaiden name and her first pet.\n\n64\n00:03:12.010 --> 00:03:15.017\n&gt;&gt; Have you been sifting through the DMV\n\n65\n00:03:15.017 --> 00:03:17.520\nrecords?\n&gt;&gt; Let's not expose that on camera.\n\n66\n00:03:17.520 --> 00:03:18.590\nNo, no.\n\n67\n00:03:18.590 --> 00:03:20.330\nSo we have a third car and\n\n68\n00:03:20.330 --> 00:03:26.169\nI'm actually gonna give it the same\nvalues as the first car, okay, 1997.\n\n69\n00:03:26.169 --> 00:03:31.260\nNow I've intentionally made this very\ngeneric because right now you're like,\n\n70\n00:03:31.260 --> 00:03:34.968\nwell my mind goes first car and\nthe third car are the same car,\n\n71\n00:03:34.968 --> 00:03:36.580\nright?\n&gt;&gt; Right.\n\n72\n00:03:36.580 --> 00:03:38.780\n&gt;&gt; But it could be the difference between,\n\n73\n00:03:38.780 --> 00:03:40.610\nwell maybe it's a Ford and a Chevy.\n\n74\n00:03:40.610 --> 00:03:42.750\nThey're just both from 1997 and red.\n\n75\n00:03:44.270 --> 00:03:47.550\nI'm lacking information to\nmake an appropriate decision.\n\n76\n00:03:47.550 --> 00:03:50.870\nSo I need to look up these reviews.\n\n77\n00:03:50.870 --> 00:03:55.750\nSo let's say reviews,\nand that's a dictionary.\n\n78\n00:03:55.750 --> 00:04:00.730\nThen I say, well the review for the first\ncar, and notice, that's an object.\n\n79\n00:04:00.730 --> 00:04:03.930\nIt's not just a string or\na number in that dictionary,\n\n80\n00:04:03.930 --> 00:04:08.060\nI'm passing this entire car\nobject into that dictionary.\n\n81\n00:04:08.060 --> 00:04:10.440\nAnd, well that was an awesome car.\n\n82\n00:04:10.440 --> 00:04:13.882\nHopefully the reviews\nare actually more profound.\n\n83\n00:04:13.882 --> 00:04:14.628\n&gt;&gt; Aweseome.\n\n84\n00:04:14.628 --> 00:04:17.475\n&gt;&gt; There you go, making fun of my spelling\n\n85\n00:04:17.475 --> 00:04:20.453\nagain, so reviews.\n&gt;&gt; That third grade education is\n\n86\n00:04:20.453 --> 00:04:21.430\nreally paying off.\n\n87\n00:04:21.430 --> 00:04:23.360\n[LAUGH]\n&gt;&gt; It is, I would like to applaud you.\n\n88\n00:04:23.360 --> 00:04:25.550\nYou have done very well for yourself.\n\n89\n00:04:25.550 --> 00:04:31.946\nSo our second one is 'meh',\nand then our third car was,\n\n90\n00:04:31.946 --> 00:04:36.356\nso [third] 'it is okay' all right?\n\n91\n00:04:36.356 --> 00:04:41.830\nSo there's our three reviews and\nthere's our cars.\n\n92\n00:04:41.830 --> 00:04:43.830\nLet's hop into a repl.\n\n93\n00:04:43.830 --> 00:04:48.360\nLet's look at this dictionary,\nhow we could use this, all right.\n\n94\n00:04:48.360 --> 00:04:51.050\nAnd to give some context of why would\n\n95\n00:04:51.050 --> 00:04:54.020\nI actually be putting car objects\nas the keys of a dictionary.\n\n96\n00:04:54.020 --> 00:05:00.600\nAnd then the reviews as the respective\nreview, the value, so to speak.\n\n97\n00:05:00.600 --> 00:05:03.480\nSo I'm gonna execute this,\nI'm calling this hashing.\n\n98\n00:05:03.480 --> 00:05:06.560\nThere we go, and\nif I look at cars, not cars,\n\n99\n00:05:06.560 --> 00:05:11.950\nreviews, then notice I have\na dictionary that has a car object.\n\n100\n00:05:11.950 --> 00:05:15.360\nThat is associated with 'awesome', a car\nobject that is associated with 'meh'.\n\n101\n00:05:15.360 --> 00:05:18.887\nAnd another car object that is\nassociated with 'it is okay'.\n\n102\n00:05:18.887 --> 00:05:24.160\nBut let's say you're like, I need to\nlook up a review for the third car.\n\n103\n00:05:24.160 --> 00:05:29.120\nWell, since they're in a dictionary,\nI'm gonna say reviews[third], and\n\n104\n00:05:29.120 --> 00:05:33.750\nit'll actually quickly,\nvery quickly say, okay, look it up.\n\n105\n00:05:33.750 --> 00:05:35.270\nThere it is, right?\n\n106\n00:05:35.270 --> 00:05:36.480\nAnd we're good to go.\n\n107\n00:05:36.480 --> 00:05:41.080\nSo you're like, well, awesome, I have\nvery quick lookups because dictionaries\n\n108\n00:05:41.080 --> 00:05:43.820\nare implemented in a way\nthat the lookups are quick.\n\n109\n00:05:43.820 --> 00:05:49.680\nBehind the scenes you have this hashing\nand binning, and yes, I said hashing.\n\n110\n00:05:49.680 --> 00:05:54.662\nSo a hash is a function that somehow\nseparates these respective pieces.\n\n111\n00:05:54.662 --> 00:05:56.626\nNow, I don't want to\nget too deep into that,\n\n112\n00:05:56.626 --> 00:05:58.708\nbecause it's not\nultimately important here.\n\n113\n00:05:58.708 --> 00:06:03.495\nJust know that dictionary keys have\nto be hashable in order to arrange\n\n114\n00:06:03.495 --> 00:06:07.630\nthem in the dictionary so\nyou don't have hash collisions.\n\n115\n00:06:07.630 --> 00:06:12.724\nOtherwise, if you have a hash collision,\nyou effectively overwrite.\n\n116\n00:06:12.724 --> 00:06:15.681\nIt's kind of like saying first car,\nfirst car again.\n\n117\n00:06:15.681 --> 00:06:18.510\nIf two things have the same number or\n0, and\n\n118\n00:06:18.510 --> 00:06:21.728\nlater on saying I want to\nset 0 to something else.\n\n119\n00:06:21.728 --> 00:06:27.301\nIts hash is the same so\nthe assumption is they’re the same key.\n\n120\n00:06:27.301 --> 00:06:32.303\nSo let’s hop back in here and\nnow someone comes along and says, hey, you\n\n121\n00:06:32.303 --> 00:06:37.810\nknow what Justin, we also need to be able\nto compare whether two cars are equal.\n\n122\n00:06:39.250 --> 00:06:43.040\nOkay, but we don't want to add any\ninformation, like make or model.\n\n123\n00:06:43.040 --> 00:06:47.243\nWe want to keep it here, and we want to\nsay if they're the same type of object and\n\n124\n00:06:47.243 --> 00:06:50.885\nthey have the same color,\nand they have the same year,\n\n125\n00:06:50.885 --> 00:06:52.425\nthen they're equal.\n&gt;&gt; Okay.\n\n126\n00:06:52.425 --> 00:06:53.635\n&gt;&gt; Okay, so\n\n127\n00:06:53.635 --> 00:06:55.605\nyou're like, well I know how to do that.\n\n128\n00:06:55.605 --> 00:07:01.595\nI can do dunder eq like that,\nand I'm just gonna return,\n\n129\n00:07:01.595 --> 00:07:04.760\nand I'm gonna set a parentheses here.\n\n130\n00:07:04.760 --> 00:07:07.990\nBecause this is a more complex,\n\n131\n00:07:07.990 --> 00:07:11.708\ncan't use tabs, can't use tabs.\n&gt;&gt; You want to so bad.\n\n132\n00:07:11.708 --> 00:07:12.378\n&gt;&gt; I do, I do,\n\n133\n00:07:12.378 --> 00:07:16.950\nbecause my other editors and actually my I\nalter Vim for the most part to where tabs\n\n134\n00:07:16.950 --> 00:07:20.530\nare actually just spaces,\nit just replaces them with spaces.\n\n135\n00:07:20.530 --> 00:07:26.814\nSo if the self.__class__ is\nequal to the other.__class__.\n\n136\n00:07:26.814 --> 00:07:32.211\nRight, if they're both car types and\n\n137\n00:07:32.211 --> 00:07:37.273\nself.color == other.color and\n\n138\n00:07:37.273 --> 00:07:41.833\nself.year == other.year.\n\n139\n00:07:45.018 --> 00:07:47.470\nWell, We should be able\nto compare these two.\n\n140\n00:07:47.470 --> 00:07:49.520\nAnd you're like, okay, well, that's good.\n\n141\n00:07:49.520 --> 00:07:50.540\nNow I'm gonna run this.\n\n142\n00:07:50.540 --> 00:07:52.744\nIt's gonna be awesome, and here we go.\n\n143\n00:07:52.744 --> 00:07:54.984\nBoom, unhashable type.\n\n144\n00:07:57.425 --> 00:07:58.385\nCan't do this anymore.\n\n145\n00:07:58.385 --> 00:07:59.855\nYou can't put these in dictionaries.\n\n146\n00:07:59.855 --> 00:08:03.860\nIf I tried to look at this,\nit's now emptied, because that fails.\n\n147\n00:08:03.860 --> 00:08:08.004\nWhen you set equality,\nif the equality alters,\n\n148\n00:08:08.004 --> 00:08:11.441\nwhat happens is by default Python goes,\n\n149\n00:08:11.441 --> 00:08:16.830\nif you haven't done your\nEQ it's no longer hashable.\n\n150\n00:08:16.830 --> 00:08:18.890\nAnd the reason being is,\n\n151\n00:08:18.890 --> 00:08:23.190\nif two things are equal then it is\nassumed their hashes are equal.\n\n152\n00:08:23.190 --> 00:08:28.000\nSo if I'm altering the equality,\nthen I'm going to say the hash games off.\n\n153\n00:08:28.000 --> 00:08:30.870\nAnd you lose the ability to\nuse them in a dictionary.\n\n154\n00:08:30.870 --> 00:08:36.920\nSo now my lookup doesn't work,\nhowever, if I look at first == third.\n\n155\n00:08:36.920 --> 00:08:40.670\nIf you remember, they both are read\nfrom 1997, then yes, those are the same.\n\n156\n00:08:43.460 --> 00:08:47.030\nSecond, those are not the same,\nbecause they don't have the same values.\n\n157\n00:08:47.030 --> 00:08:49.640\nYou're like what, I've achieved this but\nnow I've lost the other.\n\n158\n00:08:51.240 --> 00:08:54.020\nAll right, so now you're like,\n\n159\n00:08:54.020 --> 00:08:56.890\nI still need that dictionary to\nlook up how I'm going to fix this.\n\n160\n00:08:58.070 --> 00:09:03.650\nWell, you start reading and you find\nout that you can implement, because\n\n161\n00:09:03.650 --> 00:09:09.800\nby default here's what Python has come\nbehind the scenes and said hash = None,\n\n162\n00:09:09.800 --> 00:09:12.940\nand that says hey this is not a hashable\ntag, you can't use them in dictionaries or\n\n163\n00:09:12.940 --> 00:09:16.830\nsets, because that's how they arrange\nthem in order to do efficient lookups.\n\n164\n00:09:16.830 --> 00:09:21.487\nThey use a hashing function to determine\nthe hash to divvy these up appropriately,\n\n165\n00:09:21.487 --> 00:09:25.343\nso they can go the red car that's\nover here in this bucket, so\n\n166\n00:09:25.343 --> 00:09:27.489\nI can just search that bucket, okay?\n\n167\n00:09:27.489 --> 00:09:31.073\nSo it does this by default,\nwhen you implement it under EQ for\n\n168\n00:09:31.073 --> 00:09:34.960\nequality, because you've kind\nof started messing up the game.\n\n169\n00:09:36.580 --> 00:09:39.532\nBut you find out, well,\nif I write a hashing function,\n\n170\n00:09:39.532 --> 00:09:43.790\nyou're like, I bet I can figure this out.\n\n171\n00:09:43.790 --> 00:09:46.400\nWhat is the hash of this car?\n\n172\n00:09:46.400 --> 00:09:50.734\nI’m just gonna return the hash of self,\n\n173\n00:09:50.734 --> 00:09:55.704\nof the temple self dot color and\nself dot year,\n\n174\n00:09:55.704 --> 00:09:59.407\nthat describes each car, right?\n\n175\n00:09:59.407 --> 00:10:03.689\nAnd then I can say okay,\nwell that will work,\n\n176\n00:10:03.689 --> 00:10:07.768\nlet’s see if these things kinda play out.\n\n177\n00:10:07.768 --> 00:10:13.167\nNow full disclosure, I'm showing you\nof the things you're gonna run into,\n\n178\n00:10:13.167 --> 00:10:16.520\nso you can be aware of what not to do.\n\n179\n00:10:16.520 --> 00:10:20.270\nSo some of these are gonna lead\nyou astray into a wrong path.\n\n180\n00:10:20.270 --> 00:10:24.120\nAnd I'm trying to bring those up, because\nthis is something you need to be very\n\n181\n00:10:24.120 --> 00:10:26.610\ncareful about,\ncuz you're gonna run into some weirdness.\n\n182\n00:10:26.610 --> 00:10:30.050\nTrying to show you the weirdness,\nso you are like that will work.\n\n183\n00:10:30.050 --> 00:10:32.528\nDon't stop just yet, continue watching.\n\n184\n00:10:32.528 --> 00:10:37.910\nSo we're gonna hop out of here,\nlet's clear this out, rerun this.\n\n185\n00:10:37.910 --> 00:10:44.400\nLook at that, I now have the ability\nto hash each of the cars.\n\n186\n00:10:44.400 --> 00:10:49.190\nSo if I look at first, if I hash the first\nI actually get this hash number here.\n\n187\n00:10:49.190 --> 00:10:54.540\nOkay, if I hash(third), notice first and\n\n188\n00:10:54.540 --> 00:10:59.730\nthird now hash equally, and\nfirst and third are the same.\n\n189\n00:10:59.730 --> 00:11:05.370\nLet's hash the second, and\nit has a different hash number.\n\n190\n00:11:05.370 --> 00:11:07.800\nNow I'm making sure, looks good.\n\n191\n00:11:07.800 --> 00:11:12.610\nI've now fulfilled the hashes are equal,\nif two things are equal.\n\n192\n00:11:12.610 --> 00:11:14.550\nI'm like, I figured that out.\n\n193\n00:11:16.250 --> 00:11:19.620\nOn your reviews,\nyou'll notice something interesting.\n\n194\n00:11:21.010 --> 00:11:26.890\nI only have two cars, and the reason that\nhappen is, my hashes are the same for\n\n195\n00:11:26.890 --> 00:11:30.890\nthe first and third car So\nto get the ability to hash back,\n\n196\n00:11:30.890 --> 00:11:36.370\nI implemented a hash function but\nthe unprepared for consequences first and\n\n197\n00:11:36.370 --> 00:11:38.670\nthird are assumed to be exactly\n&gt;&gt; The same.\n\n198\n00:11:38.670 --> 00:11:39.390\n&gt;&gt; The same thing.\n\n199\n00:11:39.390 --> 00:11:39.940\n&gt;&gt; Because their values\n\n200\n00:11:39.940 --> 00:11:40.880\nare the same.\n&gt;&gt; Yeah.\n\n201\n00:11:40.880 --> 00:11:41.380\n&gt;&gt; Right.\n\n202\n00:11:41.380 --> 00:11:42.130\n&gt;&gt; Exactly, their hash\n\n203\n00:11:42.130 --> 00:11:43.390\nvalues are the same, and\n\n204\n00:11:43.390 --> 00:11:46.860\ntheir equality operator is the same.\nSo in the dictionary keys,\n\n205\n00:11:46.860 --> 00:11:51.070\nit goes the first one, that was awesome.\nThe second one, meh, and\n\n206\n00:11:51.070 --> 00:11:55.790\nthen the third one which you know is\na different car has the same value,\n\n207\n00:11:55.790 --> 00:11:58.230\nthat’s actually the first one and\nit overrides that.\n\n208\n00:11:58.230 --> 00:12:00.440\nNow, I only have two cars.\n\n209\n00:12:00.440 --> 00:12:06.330\nAs a result, we know that if\nI look at reviews first and\n\n210\n00:12:06.330 --> 00:12:09.440\nreviews third,\nI should get different things.\n\n211\n00:12:11.470 --> 00:12:14.242\nThat is interesting, is it not?\n\n212\n00:12:14.242 --> 00:12:18.730\nWell, how?\n\n213\n00:12:18.730 --> 00:12:25.190\nSo, maybe the dunder hash, implementing\nthat is not the greatest, right?\n\n214\n00:12:25.190 --> 00:12:26.040\nOkay?\n\n215\n00:12:26.040 --> 00:12:28.500\nNow, there are better ways.\n\n216\n00:12:28.500 --> 00:12:31.731\nCreating an appropriate\nhashing function is difficult.\n\n217\n00:12:31.731 --> 00:12:33.080\n&gt;&gt; [LAUGH]\n\n218\n00:12:33.080 --> 00:12:34.690\n&gt;&gt; So keep that in mind.\n\n219\n00:12:36.570 --> 00:12:38.940\nSo how do we fix this?\n\n220\n00:12:38.940 --> 00:12:45.720\nWell, let's hop back in here, and now we\nstart, we kind of start working backwards.\n\n221\n00:12:45.720 --> 00:12:50.318\nWe've seen that dunder hash allows\nus to hash something to create\n\n222\n00:12:50.318 --> 00:12:54.928\nan actual hashing function, and\nthese are now the same, right?\n\n223\n00:12:54.928 --> 00:13:00.688\nSo behind the scenes, here I'm gonna\n\n224\n00:13:00.688 --> 00:13:07.530\ncreate self.id equals some random number.\n\n225\n00:13:07.530 --> 00:13:14.470\nThis is something that people will do,\nso from random, import random, I think.\n\n226\n00:13:14.470 --> 00:13:17.040\nI always have to go and\nlook that, I don't know.\n\n227\n00:13:17.040 --> 00:13:19.030\nWe're about to find out.\n\n228\n00:13:19.030 --> 00:13:24.702\nActually, I want randint, so, randint.\n\n229\n00:13:24.702 --> 00:13:28.638\nAnd randint of a really big number.\n\n230\n00:13:28.638 --> 00:13:33.960\nSo, I'm gonna get a random ID, and so\n\n231\n00:13:33.960 --> 00:13:39.560\nthat ID, again, not saying this\nis the absolute best solution,\n\n232\n00:13:39.560 --> 00:13:42.740\nbut this is probably an approach,\nwell that's just that a random number\n\n233\n00:13:42.740 --> 00:13:46.860\nthen our hashes should be different if\nwe're using the hush and the Tuple.\n\n234\n00:13:46.860 --> 00:13:48.860\nAll right, let's check it out.\n\n235\n00:13:48.860 --> 00:13:51.405\nI may have that rand int requiring.\n\n236\n00:13:53.010 --> 00:13:54.280\nYeah.\n\n237\n00:13:54.280 --> 00:13:56.310\nI always get that wrong.\n\n238\n00:13:56.310 --> 00:13:59.571\nSo, excuse me while I fix this.\n&gt;&gt; [LAUGH]\n\n239\n00:13:59.571 --> 00:14:01.849\n&gt;&gt; I think, I need a range between 0 and\n\n240\n00:14:01.849 --> 00:14:02.883\n10,000.\n\n241\n00:14:02.883 --> 00:14:05.650\nSo, a random integer between zero and\n10,000.\n\n242\n00:14:05.650 --> 00:14:09.192\nEven though we say it's random,\nnot truly random, so\n\n243\n00:14:09.192 --> 00:14:14.760\nthere is still a possibility of that hash\ncollision where I overwrite the keys.\n\n244\n00:14:14.760 --> 00:14:17.660\nI've reduced the possibility,\nwell, hopefully I have.\n\n245\n00:14:17.660 --> 00:14:21.460\nAnd maybe it works for\nmy perspective instances.\n\n246\n00:14:21.460 --> 00:14:24.690\nI now have my three cars back,\nbecause I've introduced a little bit of\n\n247\n00:14:24.690 --> 00:14:27.240\ndifference to where my\nhashes are different.\n\n248\n00:14:28.440 --> 00:14:30.615\nBut you know what I've done?\n\n249\n00:14:30.615 --> 00:14:36.258\nI've now said, my equality, first and\nthird, if I do first equal third,\n\n250\n00:14:36.258 --> 00:14:40.918\nstill true but\nit’s not cause they’re actually different,\n\n251\n00:14:40.918 --> 00:14:47.120\nmy hashes are different so if the hashes\nare different the equality is different.\n\n252\n00:14:47.120 --> 00:14:49.520\n&gt;&gt; So why is it seeing it as equal,\n\n253\n00:14:49.520 --> 00:14:53.041\nI mean, what is causing that?\n&gt;&gt; Well, we come back and added that\n\n254\n00:14:53.041 --> 00:14:58.150\nlittle bit to change it, but then we did\nnot account for that in the dunder eq.\n\n255\n00:14:58.150 --> 00:15:02.930\nSo I wanna say that these\ntwo things are equal, in\n\n256\n00:15:02.930 --> 00:15:07.300\norder to fulfill my part of the contract.\n&gt;&gt; So\n\n257\n00:15:07.300 --> 00:15:10.060\nto speak.\n&gt;&gt; I have to add information.\n\n258\n00:15:10.060 --> 00:15:15.740\nSo if I have this exactly like this,\nthen first and third are the same.\n\n259\n00:15:17.200 --> 00:15:20.110\nAnd if I have a hashing function,\nif two things are equal,\n\n260\n00:15:20.110 --> 00:15:21.840\nthen their hash should be equal.\n\n261\n00:15:21.840 --> 00:15:24.660\nThat is just kinda\nthe contract that's assumed.\n\n262\n00:15:24.660 --> 00:15:28.380\nWell, because I'm adding that little bit\nof randomness so I can use the dictionary,\n\n263\n00:15:28.380 --> 00:15:31.130\nI need to account for\nthat in the equality comparison.\n\n264\n00:15:31.130 --> 00:15:38.700\nSo, it's gonna be best if I come back and\nsay, if self.id == other.id.\n\n265\n00:15:38.700 --> 00:15:42.760\nSo I have to change it,\nwhich means first and third are not equal.\n\n266\n00:15:43.960 --> 00:15:48.941\nSo you are like, well, what if I want\nto compare the colors and the year?\n\n267\n00:15:48.941 --> 00:15:50.180\nI can't use it under equal.\n\n268\n00:15:50.180 --> 00:15:53.870\nMy recommendation in order to solve\nthis to keep from this back and forth,\n\n269\n00:15:53.870 --> 00:15:56.020\nback and forth.\n&gt;&gt; [INAUDIBLE] tennis match.\n\n270\n00:15:56.020 --> 00:15:58.584\n&gt;&gt; I've created another function like,\n\n271\n00:15:58.584 --> 00:16:01.380\ncar equals that is\nexterior to the class and\n\n272\n00:16:01.380 --> 00:16:06.756\nnot override the double equal sign If you\nneed to use them in a dictionary, right.\n\n273\n00:16:06.756 --> 00:16:10.486\nSo kind of pull that out of the class and\ndon't do this.\n\n274\n00:16:10.486 --> 00:16:15.090\nIf you're able,\nif you want to use double equals, but\n\n275\n00:16:15.090 --> 00:16:16.400\nyou still want to use\nthem in a dictionary.\n\n276\n00:16:16.400 --> 00:16:20.580\nYou need to make sure, if there are two\nthings are equal, their hashes are equal.\n\n277\n00:16:21.720 --> 00:16:24.750\nSo you need to make sure that holds, okay?\n&gt;&gt; Justin, just real quick.\n\n278\n00:16:24.750 --> 00:16:28.020\nWhat if we changed a property of\nthe object or added a property?\n\n279\n00:16:28.020 --> 00:16:30.150\nIs that gonna cause any\nkind of shenanigans?\n\n280\n00:16:30.150 --> 00:16:33.020\n&gt;&gt; Well, I think the best thing to do is\n\n281\n00:16:33.020 --> 00:16:36.430\nto try it out, but\nthat is a very realistic possibility.\n\n282\n00:16:36.430 --> 00:16:39.050\nYou're like, look,\nI've got my hashing working.\n\n283\n00:16:39.050 --> 00:16:39.690\nI've got fixed.\n\n284\n00:16:39.690 --> 00:16:40.580\nMy high quality works.\n\n285\n00:16:40.580 --> 00:16:44.530\nAdd a little bit, but now,\nsomeone comes along and says,\n\n286\n00:16:44.530 --> 00:16:47.600\nhey, that car is now yellow.\n&gt;&gt; Yeah.\n\n287\n00:16:47.600 --> 00:16:50.820\n&gt;&gt; Or, hey we added power windows on that.\n\n288\n00:16:50.820 --> 00:16:51.770\n&gt;&gt; I changed the VIN number,\n\n289\n00:16:51.770 --> 00:16:53.098\nand now it's a 2003.\n\n290\n00:16:53.098 --> 00:16:54.300\n[LAUGH]\n&gt;&gt; Yeah, yeah, yeah.\n\n291\n00:16:54.300 --> 00:16:57.310\nBut the way don't do that.\n&gt;&gt; Just so\n\n292\n00:16:57.310 --> 00:17:00.220\n&gt;&gt; Just quick takeaway, that's illegal.\n\n293\n00:17:00.220 --> 00:17:04.546\nSo I think we should do a little bit of\nexploration, because maybe things crop up.\n\n294\n00:17:04.546 --> 00:17:07.249\nLet's take a look at the screen here,\nand we're back, and\n\n295\n00:17:07.249 --> 00:17:10.619\nwe're just programming along and\nlike okay, yeah, everything works.\n\n296\n00:17:10.619 --> 00:17:17.100\nWe got our reviews here and reviews first,\non the first car is awesome and\n\n297\n00:17:17.100 --> 00:17:21.730\nsomeone goes,\nyou didn’t change color on it.\n\n298\n00:17:21.730 --> 00:17:29.330\nYou go okay, first dot color, it’s now\na yellow and you go reviews first, okay?\n\n299\n00:17:29.330 --> 00:17:32.490\nAnd now we have a KeyError.\n&gt;&gt; Right,\n\n300\n00:17:32.490 --> 00:17:35.580\ncuz now the hash has changed because\nof that change in the property,\n\n301\n00:17:35.580 --> 00:17:36.180\nright?\n&gt;&gt; Exactly,\n\n302\n00:17:36.180 --> 00:17:38.890\nnow, if you write your own\nhashing function there is\n\n303\n00:17:38.890 --> 00:17:41.840\na slight possibility that\nyou'll get a hash collision,\n\n304\n00:17:41.840 --> 00:17:45.170\nand even though you changed the property,\nit still looks it up correctly.\n\n305\n00:17:45.170 --> 00:17:48.800\nBut then later on you change the property\nagain, and the hash is different, and\n\n306\n00:17:48.800 --> 00:17:50.050\nyou get a KeyError.\n\n307\n00:17:50.050 --> 00:17:52.990\nAnd you go man, this is not good.\n\n308\n00:17:54.100 --> 00:17:55.710\nHow do you manage this?\n\n309\n00:17:55.710 --> 00:17:58.360\nWell, depending on whether you're\nimplementing your own hashing\n\n310\n00:17:58.360 --> 00:17:58.910\nfunction or not.\n\n311\n00:17:58.910 --> 00:18:02.220\nAnd let's say you take out the equality\nand you just let it happen, right?\n\n312\n00:18:04.950 --> 00:18:09.480\nThere is a way to enforce, hey,\nI want just these properties and\n\n313\n00:18:09.480 --> 00:18:12.120\nI cannot change once they're allocated.\n\n314\n00:18:13.260 --> 00:18:15.980\nAnd the reason you would do is,\nwell, for this reason and\n\n315\n00:18:15.980 --> 00:18:19.660\none, there's also a second reason, you\nget a little better memory performance,\n\n316\n00:18:19.660 --> 00:18:21.562\nbecause you're not using\nit back in a dictionary.\n\n317\n00:18:21.562 --> 00:18:25.730\nYou can actually using a backing\nkind of like a tuple and\n\n318\n00:18:25.730 --> 00:18:27.000\nthey're smaller in memory.\n\n319\n00:18:27.000 --> 00:18:30.750\nSo if you need thousands upon\nthousands of car objects, but\n\n320\n00:18:30.750 --> 00:18:33.860\nyou don’t want to take up a lot of memory,\nyou can use what we’re going to do here.\n\n321\n00:18:33.860 --> 00:18:36.310\nBut also if you want to enforce,\n\n322\n00:18:36.310 --> 00:18:41.550\nthis is going to be a red\ncar from 1997 and that’s it.\n\n323\n00:18:41.550 --> 00:18:44.930\nYou can’t change it, during the program.\n\n324\n00:18:44.930 --> 00:18:49.280\nNow you can come back in change it in\ndatabase or but you can't change it while\n\n325\n00:18:49.280 --> 00:18:50.070\nthe program's running.\n&gt;&gt; Yeah,\n\n326\n00:18:50.070 --> 00:18:53.410\ncuz I'm thinking if I was actually\ndoing this, I would probably go, well,\n\n327\n00:18:53.410 --> 00:18:57.470\nmy solution would be, well that car no\nlonger exists because it's no longer in\n\n328\n00:18:57.470 --> 00:19:00.550\nthat state, so\nnew car with the same attributes other\n\n329\n00:19:00.550 --> 00:19:01.880\nthan the fact that it's now yellow.\n&gt;&gt; And\n\n330\n00:19:01.880 --> 00:19:04.190\nthat's exaclty how you would handle this,\nright?\n\n331\n00:19:04.190 --> 00:19:06.090\nSo you would go well I wanna\nget rid of that car and\n\n332\n00:19:06.090 --> 00:19:08.410\ncreate a new car that has all\nthose attributes except the color\n\n333\n00:19:08.410 --> 00:19:09.520\nis different.\n&gt;&gt; Right.\n\n334\n00:19:09.520 --> 00:19:12.160\n&gt;&gt; So not mutating state, but\n\n335\n00:19:12.160 --> 00:19:16.120\ncreating a new object that represents\nthe change that you want too produce.\n\n336\n00:19:16.120 --> 00:19:21.300\nWhat that means is well, you can't use the\nkey lookup cuz the hash is different now,\n\n337\n00:19:21.300 --> 00:19:23.750\ncuz it's a new object.\n&gt;&gt; Which, that makes sense.\n\n338\n00:19:23.750 --> 00:19:26.270\nThat's actually the kind\nof behavior that you want.\n\n339\n00:19:26.270 --> 00:19:29.290\nSo how does one accomplish this?\n\n340\n00:19:29.290 --> 00:19:30.700\nWell, if we come in here to hashing.\n\n341\n00:19:30.700 --> 00:19:37.060\nIf you come up here to the top,\nand this is now the slots part.\n\n342\n00:19:37.060 --> 00:19:39.720\nThere's a property called slots.\n\n343\n00:19:39.720 --> 00:19:45.000\nAnd if you set this property\nto a list of properties,\n\n344\n00:19:45.000 --> 00:19:47.860\nlike color,\nnotice these are stringed, and year.\n\n345\n00:19:49.510 --> 00:19:54.960\nThat says,\nthis object can only have year and color,\n\n346\n00:19:54.960 --> 00:19:58.700\nand as a matter of fact, we're gonna\nsee something, because we have an ID.\n\n347\n00:19:58.700 --> 00:20:01.600\nWe were trying to say,\nwell, I wanna add an ID,\n\n348\n00:20:01.600 --> 00:20:04.980\nbecause man, I messed that up, right?\n\n349\n00:20:06.360 --> 00:20:08.420\nOkay.\nWell, there's slots.\n\n350\n00:20:09.460 --> 00:20:15.760\nAnd if I try to run this, then I'm\ngonna get this kind of weird behavior.\n\n351\n00:20:15.760 --> 00:20:17.820\nAnd it says car object\nhas no attribute ID.\n\n352\n00:20:18.890 --> 00:20:20.090\nWell, why is that?\n\n353\n00:20:20.090 --> 00:20:22.860\nBecause what slots does is says,\nyou want a space for\n\n354\n00:20:22.860 --> 00:20:27.440\ncolor and a space for year,\nthat's what we are going to give you.\n\n355\n00:20:27.440 --> 00:20:30.930\nThe reason objects are normally\ndynamic is there is a backing\n\n356\n00:20:30.930 --> 00:20:34.980\ndictionary to every object that\ncan grow in size as it needs to.\n\n357\n00:20:34.980 --> 00:20:37.200\nWith slots, it says, you get two spaces.\n\n358\n00:20:37.200 --> 00:20:41.320\nYou get two slots, essentially,\nfor For properties.\n\n359\n00:20:42.390 --> 00:20:46.640\nThe way we've written it, if I need three,\nI need to write three, okay?\n\n360\n00:20:46.640 --> 00:20:54.180\nSo if I needed that id, and just to keep\nthings consistent, I'm gonna add id.\n\n361\n00:20:54.180 --> 00:20:59.960\nRemember this id, I will forewarn you, we\nadded that at a little bit of randomness,\n\n362\n00:20:59.960 --> 00:21:04.200\nnot truly random,\nin order to make our hashing change.\n\n363\n00:21:04.200 --> 00:21:06.720\nIf I was going to use slots,\n\n364\n00:21:06.720 --> 00:21:10.850\nwhat I would do is I would actually take\nout the dunder hash and the dunder equals.\n\n365\n00:21:10.850 --> 00:21:12.680\nAnd I would say,\nyou would get coloring here,\n\n366\n00:21:12.680 --> 00:21:17.590\nI would do exactly what Daniel said and\nsaid, you get to create new cars.\n\n367\n00:21:17.590 --> 00:21:22.010\nIt had changes that you need to make, but\nyou don't get to keep the old car, okay?\n\n368\n00:21:22.010 --> 00:21:26.550\nYou have to be careful if you use these\nas key in a dictionary, because now,\n\n369\n00:21:26.550 --> 00:21:27.350\nthat's part of the key.\n\n370\n00:21:27.350 --> 00:21:29.500\nIt will not be garbage collected.\n\n371\n00:21:29.500 --> 00:21:31.220\nIt will do some weird stuff.\n\n372\n00:21:31.220 --> 00:21:33.570\nSo you would have to be handy.\n\n373\n00:21:33.570 --> 00:21:36.620\nSo I'm gonna show you that this works.\n\n374\n00:21:36.620 --> 00:21:41.140\nI can't modify the property, but then I am\ngonna reduce this back down to show you.\n\n375\n00:21:41.140 --> 00:21:45.010\nIf you gonna use this solution,\nkeep it simple.\n\n376\n00:21:45.010 --> 00:21:45.780\n&gt;&gt; Justin, real quick,\n\n377\n00:21:45.780 --> 00:21:48.370\nbefore we continue on.\n\n378\n00:21:48.370 --> 00:21:50.000\nI'm over here thinking\nmy brain is working.\n\n379\n00:21:50.000 --> 00:21:53.090\nJust idea machine happening right now.\n\n380\n00:21:53.090 --> 00:21:54.910\nWe created a new object, right?\n\n381\n00:21:54.910 --> 00:21:59.290\nWe had our car and\nit was red and it was 1997 and\n\n382\n00:21:59.290 --> 00:22:03.900\nbecause we could have shenanigans,\nwhy don't we create a new car.\n\n383\n00:22:03.900 --> 00:22:08.310\nCan I copy the car that I already have,\nand just say,\n\n384\n00:22:08.310 --> 00:22:13.790\nI want a car just like this, same year,\nsame review, but the color changed?\n\n385\n00:22:13.790 --> 00:22:17.920\nAm I able to just do that that way instead\nof having to create a brand new object,\n\n386\n00:22:17.920 --> 00:22:20.290\nbasically programmatically\nhave that happen if I need to?\n\n387\n00:22:21.550 --> 00:22:24.650\nWe can, and you know what,\nif we have time, I'll show you.\n\n388\n00:22:24.650 --> 00:22:29.440\nI would probably use a function right now\nthat takes the original car object and\n\n389\n00:22:29.440 --> 00:22:32.890\nthen what are the new properties\nyou wanna set, and it goes okay,\n\n390\n00:22:32.890 --> 00:22:36.200\nwell I'm going to now do those things.\n\n391\n00:22:36.200 --> 00:22:37.200\n&gt;&gt; Right.\n&gt;&gt; Okay.\n\n392\n00:22:37.200 --> 00:22:39.010\nWe'll keep it very simple.\n\n393\n00:22:39.010 --> 00:22:41.790\nThere's going to be better ways,\nmore robust ways.\n\n394\n00:22:41.790 --> 00:22:44.200\nBut that's what I would do in that case.\n\n395\n00:22:44.200 --> 00:22:48.670\nIf I had 30 attributes,\nI don't wanna be like, okay, I need to.\n\n396\n00:22:48.670 --> 00:22:50.700\n&gt;&gt; Or if the reviews were mega long,\n\n397\n00:22:50.700 --> 00:22:55.660\nI didn't have to copy all that\n&gt;&gt; And that gets a little iffy.\n\n398\n00:22:55.660 --> 00:22:58.940\nAnd then the reviews, that's a separate\ndictionary, it's not attached\n\n399\n00:22:58.940 --> 00:23:02.510\nto the car in this instance because\nwe're using it for lookout.\n\n400\n00:23:02.510 --> 00:23:04.550\nBut it could be attached to the car.\n\n401\n00:23:04.550 --> 00:23:07.220\nRight?\n&gt;&gt; Just anything that has a long attribute\n\n402\n00:23:07.220 --> 00:23:09.660\nthat would be not fun to\nretype a million times.\n\n403\n00:23:09.660 --> 00:23:10.860\n&gt;&gt; Or just a bunch of them.\n\n404\n00:23:10.860 --> 00:23:11.900\nRight?\n&gt;&gt; Yeah.\n\n405\n00:23:11.900 --> 00:23:13.220\n&gt;&gt; A thousand attributes.\n\n406\n00:23:13.220 --> 00:23:14.520\nThat's kind of a large object.\n\n407\n00:23:14.520 --> 00:23:16.680\nYou should kind of think about\npulluing that apart, but\n\n408\n00:23:16.680 --> 00:23:17.650\nit could happen.\n\n409\n00:23:17.650 --> 00:23:18.700\n&gt;&gt; Right.\n&gt;&gt; Right?\n\n410\n00:23:18.700 --> 00:23:20.623\nSo.\nWell, take a look at that but\n\n411\n00:23:20.623 --> 00:23:24.309\nwe have our slots in place that\nkind of preallocates our stuff.\n\n412\n00:23:24.309 --> 00:23:28.058\nIf we come back to the screen here,\nlet’s see how that plays out.\n\n413\n00:23:28.058 --> 00:23:32.096\nBecause this actually solves\nnot all of our problems,\n\n414\n00:23:32.096 --> 00:23:36.046\nbecause you’ve got to be\na little more disciplined,\n\n415\n00:23:36.046 --> 00:23:39.672\nbut what we have is we have our first car,\nright?\n\n416\n00:23:39.672 --> 00:23:43.640\nAnd we’ve seen if we change the color,\nthen that could cause a key error.\n\n417\n00:23:43.640 --> 00:23:46.870\nThere is a possibility that,\nwell, this hash is the same.\n\n418\n00:23:46.870 --> 00:23:50.489\nAnd that's because we've written\nour own hashing function, okay?\n\n419\n00:23:50.489 --> 00:23:55.543\nSo there's first, but another thing\nthat we haven't talked about,\n\n420\n00:23:55.543 --> 00:23:59.581\nif I add something like has_power_windows,\nright?\n\n421\n00:23:59.581 --> 00:24:04.188\nThere's some random attribute\nthat I add by adding slots This\n\n422\n00:24:04.188 --> 00:24:06.855\nwould cause a possible hash issue.\n\n423\n00:24:06.855 --> 00:24:11.024\nThe hash could change because I\nam adding a property dynamically.\n\n424\n00:24:11.024 --> 00:24:12.940\nLet's say true.\n\n425\n00:24:12.940 --> 00:24:15.500\nBy using slots, I removed them.\n\n426\n00:24:15.500 --> 00:24:19.665\nSo now I have a specific\nset of defined properties.\n\n427\n00:24:19.665 --> 00:24:26.700\n[COUGH] And we saw that with ID and\nthings like that, so that helps.\n\n428\n00:24:26.700 --> 00:24:31.975\nBut it does not solve if\nI say car = 'yellow',\n\n429\n00:24:35.690 --> 00:24:39.580\nI can still change that because\nthere's already pre-allocated space.\n\n430\n00:24:39.580 --> 00:24:44.519\nThere are ways in Python to say, hey,\nno, I don't want you to modify anything.\n\n431\n00:24:46.230 --> 00:24:49.880\nWe need to know a little more,\nso definitely stay tuned for\n\n432\n00:24:49.880 --> 00:24:52.910\nthis series in order to turn that off.\n\n433\n00:24:52.910 --> 00:24:54.290\nBut here's how I would do it.\n\n434\n00:24:54.290 --> 00:25:00.700\nNow, I'll actually indulge Daniel\nwith a simple function here.\n\n435\n00:25:00.700 --> 00:25:04.489\nIf I were using slots,\nI don't need this ID.\n\n436\n00:25:04.489 --> 00:25:06.000\nI would take that off.\n\n437\n00:25:06.000 --> 00:25:06.760\nI would take that off.\n\n438\n00:25:08.260 --> 00:25:10.870\nAnd if I was using slots,\nI would take that off.\n\n439\n00:25:10.870 --> 00:25:13.760\nAnd now I've made my class simple, okay?\n\n440\n00:25:13.760 --> 00:25:17.216\nNow we're gonna look to see\nif our equality holds, and\n\n441\n00:25:17.216 --> 00:25:20.383\nthen how would I remedy that,\nso to speak, okay?\n\n442\n00:25:20.383 --> 00:25:24.840\nSo if I come back in,\nI'm gonna say, python3 hashing.\n\n443\n00:25:24.840 --> 00:25:29.096\nAll right, so first,\nis first equal to third?\n\n444\n00:25:29.096 --> 00:25:30.750\nNo, why is that?\n\n445\n00:25:30.750 --> 00:25:35.830\nWell, that's because a lot of times\nequal is comparing memory locations.\n\n446\n00:25:35.830 --> 00:25:37.370\nWell, they're separate objects,\nso they're not equal.\n\n447\n00:25:38.480 --> 00:25:40.070\nSo how would I fix that?\n\n448\n00:25:43.611 --> 00:25:50.684\nIs_cars_equal, and then I'd say one,\n\n449\n00:25:50.684 --> 00:25:54.816\nand then other, right?\n\n450\n00:25:54.816 --> 00:25:58.032\nI'm gonna return.\n\n451\n00:25:58.032 --> 00:26:01.823\none.color == other.color, and\n\n452\n00:26:01.823 --> 00:26:06.722\nI went to the wrong language there for\na second.\n\n453\n00:26:06.722 --> 00:26:12.770\nAnd one.year == other.year,\n\n454\n00:26:12.770 --> 00:26:15.694\njust like that.\n\n455\n00:26:15.694 --> 00:26:19.362\nThat's horrible grammar, but\nI'm a programmer, I guess.\n\n456\n00:26:19.362 --> 00:26:20.187\n&gt;&gt; You're allowed.\n\n457\n00:26:20.187 --> 00:26:24.080\n&gt;&gt; Yeah, first and third, yes.\n\n458\n00:26:24.080 --> 00:26:27.944\nSo now I've put that in the function and\nthen I've pulled that outside the classes\n\n459\n00:26:27.944 --> 00:26:30.191\ninstead of overwriting\nthat double equals to.\n\n460\n00:26:30.191 --> 00:26:35.459\nI've also by using slots said, you can't\nadd new properties that may do things.\n\n461\n00:26:35.459 --> 00:26:37.320\nI don't necessarily know everything.\n\n462\n00:26:37.320 --> 00:26:42.459\nWe need to know a little more about\nthe Python data model to kinda freeze\n\n463\n00:26:42.459 --> 00:26:47.439\nthe attributes, but we can take\na little more initiative, right?\n\n464\n00:26:47.439 --> 00:26:52.932\nWe can do exactly like Daniel said and\nsay, hey, if you want to change\n\n465\n00:26:52.932 --> 00:26:58.646\na property, then let's say we want to,\nlet's call it a change_car.\n\n466\n00:26:58.646 --> 00:27:03.949\nAnd it takes a car, right,\n\n467\n00:27:03.949 --> 00:27:09.488\nand then let's say kwargs.\n\n468\n00:27:09.488 --> 00:27:14.850\nAnd then all I am going to say Is,\n\n469\n00:27:14.850 --> 00:27:19.228\nwait for it, wait for it.\n\n470\n00:27:19.228 --> 00:27:23.767\nnewcar = car, and the only thing\nI can set because these cars\n\n471\n00:27:23.767 --> 00:27:28.665\ncan't add new attributes, so\nI could either have color or year.\n\n472\n00:27:29.950 --> 00:27:34.940\nI'm gonna leave those blank for\nthis new car that I'm creating.\n\n473\n00:27:34.940 --> 00:27:39.516\nAnd then I'm gonna say for\n\n474\n00:27:39.516 --> 00:27:44.924\nprop in kwargs, new car,\n\n475\n00:27:44.924 --> 00:27:50.541\nI'm gonna setattr of the new car\n\n476\n00:27:50.541 --> 00:27:55.780\nto the prop kwargs[prop].\n\n477\n00:27:55.780 --> 00:27:59.790\nSo keyword args are typically\npassed in as a dictionary, and so\n\n478\n00:27:59.790 --> 00:28:03.810\nI'm gonna set the property on the new\ncar to whatever's in the dictionary.\n\n479\n00:28:03.810 --> 00:28:07.241\nAnd then return newcar, all right?\n\n480\n00:28:07.241 --> 00:28:13.928\nSo if I say change_car(first, but\nI want the color to be equal to yellow,\n\n481\n00:28:13.928 --> 00:28:18.820\nnow since it's a keyword\nargument it should work.\n\n482\n00:28:18.820 --> 00:28:21.460\nAnd I gotta save that so\nwe can actually look at it.\n\n483\n00:28:21.460 --> 00:28:24.062\nActually, let's just say color.\n\n484\n00:28:24.062 --> 00:28:26.144\nAnd I got a new car object that has\nthe changes that you wanna make.\n\n485\n00:28:26.144 --> 00:28:26.689\n&gt;&gt; Gotcha.\n\n486\n00:28:26.689 --> 00:28:28.068\n&gt;&gt; So I've put it in a function so\n\n487\n00:28:28.068 --> 00:28:31.714\nI can take a bunch of keyword arguments\nthat make the changes as I need them, but\n\n488\n00:28:31.714 --> 00:28:33.831\nI'm actually gonna need their object back.\n\n489\n00:28:33.831 --> 00:28:37.201\nSo knowing what we know up until then,\nthis is what I would do.\n\n490\n00:28:37.201 --> 00:28:41.675\nAnd hopefully that helps kind of create\nthe thinking process behind how to\n\n491\n00:28:41.675 --> 00:28:46.366\napproach solving a problem if you run\ninto other problems when you're trying\n\n492\n00:28:46.366 --> 00:28:50.608\nto solve a different problem originally.\n&gt;&gt; [LAUGH] What's the problem again?\n\n493\n00:28:50.608 --> 00:28:51.467\n&gt;&gt; Who knows?\n\n494\n00:28:51.467 --> 00:28:52.835\nBut just to recap,\n\n495\n00:28:52.835 --> 00:28:57.720\nwe saw that if we change equals we\nmay have to add a hashing function.\n\n496\n00:28:57.720 --> 00:29:01.560\nBut then that leads to a whole\nother set of problems where\n\n497\n00:29:01.560 --> 00:29:05.350\nif you add new attributes that may\nchange my hashing function, and\n\n498\n00:29:05.350 --> 00:29:07.510\nit's kinda this vicious circle.\n\n499\n00:29:07.510 --> 00:29:11.950\nSo the ultimate solution that I propose\nis let's keep things simple, all right?\n\n500\n00:29:13.080 --> 00:29:17.940\nIf you don't wanna override operators or\nanything like that, I would add slots.\n\n501\n00:29:17.940 --> 00:29:20.020\nSay these are the only properties you get.\n\n502\n00:29:20.020 --> 00:29:25.103\nIf you need this dictionary lookup, or\nif you need them to be added to sets,\n\n503\n00:29:25.103 --> 00:29:30.107\nyou need the ability to keep a hash\nconsistent, and then create functions\n\n504\n00:29:30.107 --> 00:29:36.263\nthat actually are not overriding operators\nso you're not kinda like, what's going on?\n\n505\n00:29:36.263 --> 00:29:40.516\nIn the long term, one further refinement\nthat I would make is I would make\n\n506\n00:29:40.516 --> 00:29:44.214\nsure people could not change\nexisting attributes like color on\n\n507\n00:29:44.214 --> 00:29:48.310\nan object especially if you\nneed the hash to be consistent.\n\n508\n00:29:48.310 --> 00:29:50.940\nCreating your own hashing\nfunctions is difficult.\n\n509\n00:29:50.940 --> 00:29:54.793\nSometimes it's maybe left to someone\nelse to make those decisions\n\n510\n00:29:54.793 --> 00:29:55.412\nfor you.\n&gt;&gt; To\n\n511\n00:29:55.412 --> 00:29:56.363\nthe professionals.\n&gt;&gt; Right.\n\n512\n00:29:56.363 --> 00:29:57.544\n&gt;&gt; Yeah, [LAUGH] it's a little above\n\n513\n00:29:57.544 --> 00:29:58.732\nmy pay grade, that's for sure.\n\n514\n00:29:58.732 --> 00:30:00.272\nBut Justin, it's very interesting stuff.\n\n515\n00:30:00.272 --> 00:30:04.745\nAnd like you said, at the beginning of the\nepisode, sometimes this could be the very\n\n516\n00:30:04.745 --> 00:30:08.150\nscalpel you'll need to pull out\nof the toolkit to get a job done.\n\n517\n00:30:08.150 --> 00:30:11.290\nSo we did wanna make sure that you guys\nunderstand how they work and how you\n\n518\n00:30:11.290 --> 00:30:14.790\nmight employ them and some of the pitfalls\nand caveats that go along with them.\n\n519\n00:30:14.790 --> 00:30:17.320\nSo very good on you, Justin,\nfor walking us through that.\n\n520\n00:30:17.320 --> 00:30:20.786\nI know it can be difficult to get\nthrough these super-educated stuff, but\n\n521\n00:30:20.786 --> 00:30:23.546\nyou did a masterful job and\nwe appreciate your time on that.\n\n522\n00:30:23.546 --> 00:30:27.050\nWe appreciate you good folks out there\nas well, but I'm looking at our clock,\n\n523\n00:30:27.050 --> 00:30:29.026\nand speaking of time,\nwe are well out of it.\n\n524\n00:30:29.026 --> 00:30:30.150\nSo we're gonna call it a day.\n\n525\n00:30:30.150 --> 00:30:32.410\nFor DevPro.TV, I've been your host,\nDaniel Lowrie.\n\n526\n00:30:32.410 --> 00:30:33.310\n&gt;&gt; And I'm Justin Dennison.\n\n527\n00:30:33.310 --> 00:30:34.784\n&gt;&gt; We'll see you next time.\n\n528\n00:30:34.784 --> 00:30:39.695\n[MUSIC]\n\n",
          "vimeoId": "254726643"
        }
      ],
      "title": "Comparables"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Zach make use to the \\_\\_add\\_\\_ and \\_\\_radd\\_\\_ methods to provide custom objects to be used with the \"+\" operator.",
          "length": "1590",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-4-1-adding-012318-PGM.00_27_23_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-4-1-adding-012318-PGM.00_27_23_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-3-4-1-adding-012318-PGM.00_27_23_05.Still001-sm.jpg",
          "title": "Adding",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.743 --> 00:00:16.541\nHello, thank you for watching DEVPRO.TV,\nhelping you learn wherever you go.\n\n3\n00:00:16.541 --> 00:00:20.440\nI am your host Zach Memos as we\ncontinue on with Python data model.\n\n4\n00:00:20.440 --> 00:00:22.850\nThe name of this episode Adding.\n\n5\n00:00:22.850 --> 00:00:25.420\nWe gonna be doing some\nadding with Justin Dennison.\n\n6\n00:00:25.420 --> 00:00:26.590\nJustin, good to see you, sir.\n\n7\n00:00:26.590 --> 00:00:28.110\n&gt;&gt; Good to be back Zach,\nand how are you today?\n\n8\n00:00:28.110 --> 00:00:29.040\n&gt;&gt; I am doing great.\n\n9\n00:00:29.040 --> 00:00:31.060\nWonderful to work with you, as always.\n\n10\n00:00:31.060 --> 00:00:33.910\nNow, I understand there is a little\nbit nuance here with the adding,\n\n11\n00:00:33.910 --> 00:00:37.240\na little bit more than just\none plus one equals two.\n\n12\n00:00:37.240 --> 00:00:41.220\n&gt;&gt; Well, there is, but it actually\nencapsulates that abstract concept.\n\n13\n00:00:41.220 --> 00:00:42.870\nSo, let's talk about adding.\n\n14\n00:00:43.880 --> 00:00:45.360\nTitle this show Adding.\n\n15\n00:00:45.360 --> 00:00:46.020\nAdding what?\n\n16\n00:00:46.020 --> 00:00:47.986\nWell one and one and I put them together.\n\n17\n00:00:47.986 --> 00:00:49.362\n&gt;&gt; [LAUGH]\n&gt;&gt; And I get two, right?\n\n18\n00:00:49.362 --> 00:00:50.900\n&gt;&gt; That is adding.\n\n19\n00:00:50.900 --> 00:00:54.906\nWell until you get further along in\nyour education, or maybe you didn't,\n\n20\n00:00:54.906 --> 00:00:59.520\nyou're like no, I need,\nI have all the math I need, that's fine.\n\n21\n00:00:59.520 --> 00:01:03.450\nBut if you're programming or\nyou've used any data science libraries,\n\n22\n00:01:03.450 --> 00:01:08.080\nmaybe like Num Pi or\nPandas, or other things.\n\n23\n00:01:08.080 --> 00:01:13.510\nWhere, I wanna take an array, and an array\nand add them and have that meaning,\n\n24\n00:01:13.510 --> 00:01:17.620\nwell, you're still adding but\nit can mean different things.\n\n25\n00:01:17.620 --> 00:01:21.555\nIn addition to we've\nseen adding with strings.\n\n26\n00:01:21.555 --> 00:01:26.530\n&gt;&gt; Uh-huh.\n&gt;&gt; So a plus b squishes them together,\n\n27\n00:01:26.530 --> 00:01:28.820\n&gt;&gt; That is not the same as b plus a.\n\n28\n00:01:29.850 --> 00:01:35.460\nSo well depending on the operation\nyou may break properties and\n\n29\n00:01:35.460 --> 00:01:38.300\nthat property in particular\nis being communitive.\n\n30\n00:01:38.300 --> 00:01:41.440\nI can do them in either order and\nget the same result.\n\n31\n00:01:41.440 --> 00:01:43.195\n&gt;&gt; Right, one plus two is three.\n\n32\n00:01:43.195 --> 00:01:45.680\nWhat's two plus one, it's still three.\n\n33\n00:01:45.680 --> 00:01:49.310\nA plus b is ab, b plus a is ba.\n\n34\n00:01:49.310 --> 00:01:49.870\n&gt;&gt; That's right.\n\n35\n00:01:49.870 --> 00:01:51.860\n&gt;&gt; So, be very careful there.\n\n36\n00:01:52.860 --> 00:01:56.650\nSo you have to think that some of\nthese properties that that change.\n\n37\n00:01:56.650 --> 00:02:02.720\nBut ultimately, what we're trying to do is\nto allow the use of the addition operator,\n\n38\n00:02:02.720 --> 00:02:04.460\nso the plus sign.\n\n39\n00:02:04.460 --> 00:02:09.660\nIt can mean something different for\nyour respective data types.\n\n40\n00:02:09.660 --> 00:02:12.350\nBe very careful, though.\n\n41\n00:02:12.350 --> 00:02:18.220\nIf you get crazy and overload adding\nwith like, well, if I do one.\n\n42\n00:02:18.220 --> 00:02:22.860\nOr excuse me, my data type plus my\nother data type, I get a string.\n\n43\n00:02:23.890 --> 00:02:26.380\nThat's probably hard to reason about.\n\n44\n00:02:26.380 --> 00:02:30.290\nSo the same thing that we've\nseen over this last few episodes\n\n45\n00:02:30.290 --> 00:02:33.230\nis gonna continue through\nwith this episode.\n\n46\n00:02:33.230 --> 00:02:36.246\nBut you know what,\nbefore we actually implement a custom one,\n\n47\n00:02:36.246 --> 00:02:40.830\nlet's see how ours,\nhow things come together.\n\n48\n00:02:40.830 --> 00:02:43.370\nRight so let's go ahead and\ntake a look at the screen here and\n\n49\n00:02:43.370 --> 00:02:46.982\nlet's look at adding in the context\nof what we just talked about.\n\n50\n00:02:46.982 --> 00:02:47.490\n&gt;&gt; Mm-hm, mm-hmm.\n\n51\n00:02:47.490 --> 00:02:51.040\n&gt;&gt; Okay so one plus one, okay it's two.\n\n52\n00:02:51.040 --> 00:02:55.130\nLet's say x equals one and\nx plus one, that's two.\n\n53\n00:02:55.130 --> 00:02:55.800\nWhat is x?\n\n54\n00:02:55.800 --> 00:02:58.485\nIt's still one becaue it's just replaced.\n\n55\n00:02:58.485 --> 00:03:00.950\n&gt;&gt; Mm-hm.\n&gt;&gt; Well what about one plus x?\n\n56\n00:03:00.950 --> 00:03:04.150\nIt's still two order\ndoesn't matter here okay.\n\n57\n00:03:04.150 --> 00:03:06.860\nWhat about x plus equals one.\n\n58\n00:03:06.860 --> 00:03:08.600\nTechnically that's adding.\n\n59\n00:03:08.600 --> 00:03:09.350\nBut what does it do,\n\n60\n00:03:09.350 --> 00:03:14.790\nit does return anything,\nit changes the object's internal state.\n\n61\n00:03:14.790 --> 00:03:16.630\nLet me rephrase it,\nit reassigns the variable.\n\n62\n00:03:16.630 --> 00:03:20.680\nGet's a little weird with numbers and\nstuff.\n\n63\n00:03:20.680 --> 00:03:23.500\nYou can think of it as,\nit changed the number.\n\n64\n00:03:23.500 --> 00:03:24.400\nDid it technically?\n\n65\n00:03:24.400 --> 00:03:24.960\nNo.\n\n66\n00:03:24.960 --> 00:03:28.280\nIt grabbed the number, added it,\nreassigned it to the variable.\n\n67\n00:03:28.280 --> 00:03:29.240\nSo there's some other things.\n\n68\n00:03:29.240 --> 00:03:30.788\nThis is called emplaced addition.\n\n69\n00:03:30.788 --> 00:03:31.905\nOkay.\n\n70\n00:03:31.905 --> 00:03:36.895\nThose are technically\nthree addition operations.\n\n71\n00:03:36.895 --> 00:03:41.200\nx+1 is one length, 1+x is the other way.\n\n72\n00:03:41.200 --> 00:03:42.040\n&gt;&gt; Mmhmm.\n\n73\n00:03:42.040 --> 00:03:46.327\n&gt;&gt; And then x+=1 is the third way.\n\n74\n00:03:46.327 --> 00:03:49.599\nSo even though you're like,\nyou just add them together,\n\n75\n00:03:49.599 --> 00:03:51.720\nthere's some nuance there as you said.\n\n76\n00:03:51.720 --> 00:03:53.490\nLet's look at strings.\n\n77\n00:03:53.490 --> 00:03:58.560\nSo if I say x is now equal to a,\nlet's clear this out.\n\n78\n00:03:58.560 --> 00:04:00.010\nSo X, okay.\n\n79\n00:04:01.720 --> 00:04:03.860\nX plus B, that's AB.\n\n80\n00:04:05.510 --> 00:04:08.410\nB plus X, that's BA.\n\n81\n00:04:08.410 --> 00:04:12.270\nWhat about X plus equals B?\n\n82\n00:04:12.270 --> 00:04:14.350\nWell, nothing changed,\nexcept now that's AB.\n\n83\n00:04:15.720 --> 00:04:16.490\nOkay.\n\n84\n00:04:16.490 --> 00:04:19.922\nNotice that the X plus equals.\n\n85\n00:04:19.922 --> 00:04:25.865\nIt should result in the variable of x\nplus the thing, okay, so that order.\n\n86\n00:04:27.370 --> 00:04:27.980\nThat's addition.\n\n87\n00:04:30.090 --> 00:04:33.890\nThat works on strings,\ndoes it make sense for other objects,\n\n88\n00:04:33.890 --> 00:04:39.350\nlike maybe a date alright, so let's clear\nthis out and say from day time Import\n\n89\n00:04:41.550 --> 00:04:46.360\ndate, so x equals the date,\nI think now works.\n\n90\n00:04:46.360 --> 00:04:51.600\nNope, nope that has to be date time,\nI'm sorry, wrong module.\n\n91\n00:04:51.600 --> 00:04:54.750\nThere's a whole lot in\nthe date time module, so\n\n92\n00:04:54.750 --> 00:04:59.543\nlet's just say x is date 2017 1, 1.\n\n93\n00:05:01.040 --> 00:05:04.930\nWell x plus one, no.\n\n94\n00:05:04.930 --> 00:05:06.310\nSee how I have two different types.\n\n95\n00:05:06.310 --> 00:05:08.450\nSo that's kind of weird.\n\n96\n00:05:08.450 --> 00:05:14.860\nHowever, if I say x plus x, no,\nthat doesn't make any sense.\n\n97\n00:05:14.860 --> 00:05:16.770\nX minus X.\n\n98\n00:05:16.770 --> 00:05:21.960\nAnd we're not going to talk about\nminusing today, but notice I have a minus\n\n99\n00:05:21.960 --> 00:05:26.760\nhere and so the operations\nare sometimes dependent on the type.\n\n100\n00:05:26.760 --> 00:05:29.730\nAnd that was ultimately what\nI'm trying to illustrate here.\n\n101\n00:05:29.730 --> 00:05:33.680\nSo a date plus a date,\nthat's not meaningful.\n\n102\n00:05:33.680 --> 00:05:35.280\nThe difference between dates.\n\n103\n00:05:35.280 --> 00:05:38.650\nThat is, how much time has\nelapsed since those dates.\n\n104\n00:05:38.650 --> 00:05:42.220\nEffectively, your age, is the difference\nbetween dates, right now and\n\n105\n00:05:42.220 --> 00:05:42.840\nwhen you were born.\n\n106\n00:05:43.940 --> 00:05:48.890\nSo sometimes it makes sense for\ndata times, sometimes it doesn't.\n\n107\n00:05:48.890 --> 00:05:51.540\nAddition, is one of those where sometimes\nit does and sometimes it doesn't.\n\n108\n00:05:52.680 --> 00:05:56.630\nWhereas maybe there's other operations\nthat are not that are not addition,\n\n109\n00:05:56.630 --> 00:05:58.480\nthat make sense when addition doesn't.\n\n110\n00:05:58.480 --> 00:06:00.580\nSo there's all these\nthings to keep in mind,\n\n111\n00:06:00.580 --> 00:06:03.730\nso again ask yourself some questions,\nhave a discussion with a friend.\n\n112\n00:06:03.730 --> 00:06:05.650\nHey if I did this would this make sense?\n\n113\n00:06:05.650 --> 00:06:07.928\nAsk someone who's not a programmer.\n\n114\n00:06:07.928 --> 00:06:10.240\nAnd they'll go, that doesn't, what?\n\n115\n00:06:10.240 --> 00:06:11.525\nThat doesn't make any sense to me.\n\n116\n00:06:11.525 --> 00:06:12.617\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n117\n00:06:12.617 --> 00:06:15.308\ndon't do like programming terms like,\nso if I had a daytime object and\n\n118\n00:06:15.308 --> 00:06:17.969\na daytime object and I add them together,\nwould that make any sense?\n\n119\n00:06:17.969 --> 00:06:19.159\nYou go, what?\n\n120\n00:06:19.159 --> 00:06:19.908\nWhat are you talking about, Justin?\n\n121\n00:06:19.908 --> 00:06:20.924\n&gt;&gt; [LAUGH]\n&gt;&gt; Are you all right?\n\n122\n00:06:20.924 --> 00:06:21.851\nDo you need something to eat?\n\n123\n00:06:21.851 --> 00:06:23.162\nDo you need lunch?\n\n124\n00:06:23.162 --> 00:06:25.148\n&gt;&gt; [LAUGH]\n&gt;&gt; But if I was, hey, Zach,\n\n125\n00:06:25.148 --> 00:06:29.727\nif I took the year 2012 and\nI added the year 2015 to it,\n\n126\n00:06:29.727 --> 00:06:32.300\ndoes that have any meaning to you?\n\n127\n00:06:32.300 --> 00:06:34.710\nAnd at least you'll come up with\nsome meaningful discussions.\n\n128\n00:06:34.710 --> 00:06:39.900\nMaybe Zack decides, well yeah that means\nthat 2,012 and 2,015, that's 4,027.\n\n129\n00:06:39.900 --> 00:06:43.530\nWell no, I'm not adding the years.\n\n130\n00:06:43.530 --> 00:06:49.320\nI'm actually adding an original year and\nsome numbers of years after that.\n\n131\n00:06:49.320 --> 00:06:52.950\nSo there's actually an implicit\nkind of weird unit difference.\n\n132\n00:06:52.950 --> 00:06:54.690\nSo keep those things in mind.\n\n133\n00:06:54.690 --> 00:06:56.950\nNow, that's a whole bunch\nof talking to actually,\n\n134\n00:06:56.950 --> 00:06:58.540\nyou're like well show me\nhow to do this Justin.\n\n135\n00:06:58.540 --> 00:07:00.100\nI wanna see how to wreck code, or\n\n136\n00:07:00.100 --> 00:07:04.730\nmake it better, or at least what is\nthe power capable within Python?\n\n137\n00:07:04.730 --> 00:07:06.930\nWell you asked for it, here it comes.\n\n138\n00:07:06.930 --> 00:07:10.550\nSo let's get out of here,\nand you know what?\n\n139\n00:07:10.550 --> 00:07:14.720\nI'm gonna stick with a pair and\nI'm gonna start with a previous episode.\n\n140\n00:07:14.720 --> 00:07:18.903\nI am gonna delete a bunch of stuff,\nbut just adding.py.\n\n141\n00:07:18.903 --> 00:07:23.940\nAnd then adding.py,\nI'm gonna take all this out.\n\n142\n00:07:23.940 --> 00:07:25.458\nIf you haven't watched that episode,\ndefinitely go check it out.\n\n143\n00:07:25.458 --> 00:07:26.124\n&gt;&gt; I did, I watched it.\n\n144\n00:07:26.124 --> 00:07:30.007\n&gt;&gt; It was [SOUND]\n&gt;&gt; [LAUGH]\n\n145\n00:07:30.007 --> 00:07:30.680\n&gt;&gt; Magnifico.\n\n146\n00:07:32.630 --> 00:07:35.495\nSo here's my point class.\n\n147\n00:07:35.495 --> 00:07:37.348\nAnd I'm gonna create a couple points here.\n\n148\n00:07:37.348 --> 00:07:40.733\nAnd here is point,\nI'm going to start 0, 0.\n\n149\n00:07:40.733 --> 00:07:47.728\nPoint equals Point 1,3 and\n\n150\n00:07:47.728 --> 00:07:53.323\np3 equals point -1,\n\n151\n00:07:53.323 --> 00:07:56.685\n-4, okay?\n\n152\n00:07:56.685 --> 00:07:58.347\nSo, a little bit different here.\n\n153\n00:07:58.347 --> 00:07:59.119\nAnd you know what?\n\n154\n00:07:59.119 --> 00:08:02.033\nLet's just change this to A -2,\n\n155\n00:08:02.033 --> 00:08:07.140\njust to keep the relative\nmagnitudes a little different.\n\n156\n00:08:07.140 --> 00:08:09.740\nSo, I'm not reusing a number\nat any point between these.\n\n157\n00:08:10.760 --> 00:08:15.550\nOkay, so, if we come out to our, and\n\n158\n00:08:15.550 --> 00:08:21.120\nwe've seen for other standard\nlibrary type, well, data types.\n\n159\n00:08:21.120 --> 00:08:22.280\nThat was kind of redundant.\n\n160\n00:08:22.280 --> 00:08:24.190\nBut you know what I mean.\n\n161\n00:08:24.190 --> 00:08:25.688\nLet's look at adding.\n\n162\n00:08:25.688 --> 00:08:28.440\nAnd I'll have to say point one and\npoint two.\n\n163\n00:08:28.440 --> 00:08:30.483\nIf I were to add those together\nI would get one [INAUDIBLE].\n\n164\n00:08:30.483 --> 00:08:31.586\nSo that's not really interesting.\n\n165\n00:08:31.586 --> 00:08:35.307\nBut if I say point one or\npoint two, and point three.\n\n166\n00:08:35.307 --> 00:08:40.014\nIf I were to add those together, then for\nme it would make sense to take the x's,\n\n167\n00:08:40.014 --> 00:08:43.741\nadd those together, take the y's and\nadd those together, and\n\n168\n00:08:43.741 --> 00:08:48.330\nI should get the resulting point\nthat is the addition of these two.\n\n169\n00:08:48.330 --> 00:08:52.762\nOkay, now this works very similar to if\nyou've done any type of vector math or\n\n170\n00:08:52.762 --> 00:08:55.231\nif you've done any kind of data analysis.\n\n171\n00:08:55.231 --> 00:08:58.398\nSimulations, vectors, arrays, tensors,\n\n172\n00:08:58.398 --> 00:09:02.220\nthere's a lot of times\na similar operation.\n\n173\n00:09:02.220 --> 00:09:04.230\nWell, I could do something like this.\n\n174\n00:09:04.230 --> 00:09:06.669\nAnd I'm gonna clear this out.\n\n175\n00:09:06.669 --> 00:09:13.430\nI can go, well, I'm just gonna\nget point where I take .2x + .3x.\n\n176\n00:09:13.430 --> 00:09:17.535\nAnd then I'm gonna say .2y + .3y.\n\n177\n00:09:17.535 --> 00:09:18.650\nAnd there is my point.\n\n178\n00:09:18.650 --> 00:09:21.210\nI actually got done what I wanted to.\n\n179\n00:09:21.210 --> 00:09:25.840\nThis is not pretty, and\nmy intention is maybe not always clear.\n\n180\n00:09:25.840 --> 00:09:28.930\nWhat's the point to point?\n\n181\n00:09:28.930 --> 00:09:29.850\nI don't know.\n\n182\n00:09:30.920 --> 00:09:32.690\nAlso very prone to typos.\n\n183\n00:09:32.690 --> 00:09:36.450\nWhat if I come up here and\nI accidentally say y.\n\n184\n00:09:37.630 --> 00:09:38.320\nI didn't error out.\n\n185\n00:09:38.320 --> 00:09:43.103\nIt actually gave me a result, but\nit's not what I thought it was, all right?\n\n186\n00:09:43.103 --> 00:09:44.020\n&gt;&gt; Mm-hm.\n\n187\n00:09:44.020 --> 00:09:47.977\n&gt;&gt; What I want is the ability to say,\nthat.\n\n188\n00:09:47.977 --> 00:09:51.970\n0.2 plus 0.3 and\nget negative 1, negative 1.\n\n189\n00:09:51.970 --> 00:09:56.465\nIt seems reasonable, right?\n\n190\n00:09:56.465 --> 00:10:02.558\nIn addition to you, and here's the nuance,\nI wanna be able to do .3 plus .2.\n\n191\n00:10:02.558 --> 00:10:07.724\nAnd for numbers, I think it makes sense,\n1 to 2 is 3, 2 plus 1 is 3.\n\n192\n00:10:07.724 --> 00:10:11.621\nI think in either direction,\nthey should work, okay?\n\n193\n00:10:11.621 --> 00:10:15.769\nOkay, now just as an extension,\n\n194\n00:10:15.769 --> 00:10:20.814\nI'm wondering what if I did p1 plus 1?\n\n195\n00:10:20.814 --> 00:10:25.868\nAnd maybe I could add to both sides,\nright, so\n\n196\n00:10:25.868 --> 00:10:31.975\nlet's say add 1 to x,\nadd 1 to y, okay, so here we go.\n\n197\n00:10:31.975 --> 00:10:37.595\nMaybe, and\nI'm gonna show you these two first\n\n198\n00:10:37.595 --> 00:10:43.513\nto really drive home that first portion,\nokay?\n\n199\n00:10:43.513 --> 00:10:46.810\nHold on to your hats, this is really\nhard method named to remember.\n\n200\n00:10:47.980 --> 00:10:48.690\nDunder add.\n\n201\n00:10:50.050 --> 00:10:51.910\nDunder add is for addition.\n\n202\n00:10:53.140 --> 00:10:56.560\nAnd it's actually kind\nof the standard digit.\n\n203\n00:10:56.560 --> 00:10:59.224\nSo P2 plus P3.\n\n204\n00:10:59.224 --> 00:11:04.438\nThat's what's gonna get called\non P2 when you do P2 plus P3.\n\n205\n00:11:04.438 --> 00:11:07.712\nIt's going to say P2 dunder add P3.\n\n206\n00:11:07.712 --> 00:11:13.238\nMm, however, if that is not defined,\n\n207\n00:11:13.238 --> 00:11:17.270\nit needs to try p3 plua p2.\n\n208\n00:11:17.270 --> 00:11:18.320\nThat's right addition.\n\n209\n00:11:20.100 --> 00:11:21.660\nSo I can come from the right side.\n\n210\n00:11:22.730 --> 00:11:28.431\nWell there's a further one,\nI'm gonna put a pass here and say radd.\n\n211\n00:11:33.650 --> 00:11:38.330\nSo, right addition, and then standard,\nor what could be called left, right?\n\n212\n00:11:39.850 --> 00:11:42.380\nInitially there's not going to seem\nlike a whole lot of difference here, but\n\n213\n00:11:42.380 --> 00:11:44.130\nwe'll see a difference shortly.\n\n214\n00:11:44.130 --> 00:11:46.990\nSo what do we want to do with right add?\n\n215\n00:11:46.990 --> 00:11:50.700\nWell, we want to return a new point, and\n\n216\n00:11:50.700 --> 00:11:53.793\ntypically you're going to\nreturn something new here.\n\n217\n00:11:53.793 --> 00:11:57.341\nself.x + other.x,\n\n218\n00:11:57.341 --> 00:12:03.136\nself.y + other.y, just like so.\n\n219\n00:12:03.136 --> 00:12:08.520\nAnd the reason you're gonna do that is\nthese are not meant to change in object.\n\n220\n00:12:08.520 --> 00:12:14.590\nI'm getting a new object as result of\noperating on two objects through addition.\n\n221\n00:12:15.740 --> 00:12:18.790\nOkay, so let's keep that one.\n\n222\n00:12:18.790 --> 00:12:23.490\nWe're gonna leave our add off and\nsee if this works adding.\n\n223\n00:12:23.490 --> 00:12:28.487\nAnd so if I say p2 + p3,\nI now have the ability to do p2 + p3.\n\n224\n00:12:28.487 --> 00:12:29.178\nBut that.\n\n225\n00:12:29.178 --> 00:12:35.831\nLikewise, technically, I get p3 + p2,\n\n226\n00:12:35.831 --> 00:12:42.107\nbecause p3 is still a point\nobject with an add method, okay?\n\n227\n00:12:42.107 --> 00:12:48.720\nBut if I look at p2 + 1.\n\n228\n00:12:48.720 --> 00:12:51.192\nThat doesn't work, right?\n\n229\n00:12:51.192 --> 00:12:54.040\nIt says, int has no attribute x.\n\n230\n00:12:55.590 --> 00:13:02.931\nAll right, well, what if I do 1 + p2?\n\n231\n00:13:05.125 --> 00:13:10.440\nWell, I get nothing, it actually kind of\nerrors it, and goes [INAUDIBLE] okay.\n\n232\n00:13:10.440 --> 00:13:12.520\nWell, where does this come in?\n\n233\n00:13:12.520 --> 00:13:15.580\nTypically, what I'm gonna do when I\nuse this, is I'm gonna say a point\n\n234\n00:13:15.580 --> 00:13:19.010\nplus some number, like a scalar,\nand I'm just gonna add those cross.\n\n235\n00:13:19.010 --> 00:13:24.014\nCuz I already have the commutative\nversion with just add.\n\n236\n00:13:24.014 --> 00:13:26.991\nIf I want to now change that,\n\n237\n00:13:26.991 --> 00:13:33.220\nlet's use radd to add our\nadditional logic, okay?\n\n238\n00:13:33.220 --> 00:13:34.600\nSo there we go.\n\n239\n00:13:36.260 --> 00:13:43.120\nIf isinstance,\nif other isinstance of either a float or\n\n240\n00:13:43.120 --> 00:13:47.710\nan int, then I want to do the following,\none, two, three, four.\n\n241\n00:13:47.710 --> 00:13:53.277\nI want to return a pair of self.x\n\n242\n00:13:53.277 --> 00:13:59.267\n+ other self.y + other, okay?\n\n243\n00:13:59.267 --> 00:14:01.663\nOtherwise.\n\n244\n00:14:03.110 --> 00:14:06.650\nAnd I'm going to make the assumption\nhere that otherwise is two points,\n\n245\n00:14:06.650 --> 00:14:07.930\npoint plus a point.\n\n246\n00:14:07.930 --> 00:14:15.630\nI'm just going to return self.add and\nthen other.\n\n247\n00:14:15.630 --> 00:14:17.900\nI could rewrite this up here,\nbut I've already had that, so\n\n248\n00:14:17.900 --> 00:14:19.800\nI'm just going to call it okay?\n\n249\n00:14:19.800 --> 00:14:21.960\nSo for right add I'm gonna go,\nhey, if it's an integer or\n\n250\n00:14:21.960 --> 00:14:24.140\nfloat, I wanna do this operations.\n\n251\n00:14:24.140 --> 00:14:26.760\nIf it's another point just\nsend it back up to add,\n\n252\n00:14:27.850 --> 00:14:30.610\nwhat dunder add that was there originally.\n\n253\n00:14:30.610 --> 00:14:33.190\nSo now that changes our\nbehavior a little bit.\n\n254\n00:14:34.370 --> 00:14:39.146\nAdding, there we go, adding queer, so\n\n255\n00:14:39.146 --> 00:14:45.697\nI'm gonna say p2 plus p3,\nokay, well, that still works.\n\n256\n00:14:45.697 --> 00:14:48.379\np3 + p2, that works.\n\n257\n00:14:48.379 --> 00:14:54.310\np2 + 1, int object has no attribute x.\n\n258\n00:14:54.310 --> 00:14:56.710\nHm, now why is that?\n\n259\n00:14:56.710 --> 00:15:01.620\nIt's still trying to call __add,\nall right?\n\n260\n00:15:01.620 --> 00:15:03.721\nHm, so what does that mean?\n\n261\n00:15:05.810 --> 00:15:12.660\nLet's take a look here and\nnow let's reverse this.\n\n262\n00:15:12.660 --> 00:15:14.210\nPair is not defined.\n\n263\n00:15:15.440 --> 00:15:17.646\nAnd that's because I called it a point.\n\n264\n00:15:17.646 --> 00:15:19.117\n&gt;&gt; Mm-hm.\n\n265\n00:15:19.117 --> 00:15:26.179\n&gt;&gt; So exit and\nI was using this as a demonstrative model.\n\n266\n00:15:26.179 --> 00:15:28.694\nBut you actually have to\ntype stuff correctly.\n\n267\n00:15:31.601 --> 00:15:33.230\nPoint, there we go.\n\n268\n00:15:33.230 --> 00:15:38.340\nLet's go back through that, python,\neverything else still works -a adding.\n\n269\n00:15:38.340 --> 00:15:41.800\nSo if I say p2 + 1, hey,\nint has no attribute x.\n\n270\n00:15:41.800 --> 00:15:43.401\nIt's actually calling standard add.\n\n271\n00:15:43.401 --> 00:15:46.103\nIt's going p2.__add 1.\n\n272\n00:15:46.103 --> 00:15:48.031\nThat doesn't work.\n\n273\n00:15:48.031 --> 00:15:52.174\nIf I do 1 + p2, it actually works,\n\n274\n00:15:52.174 --> 00:15:56.185\nbecause it called, it said, hey,\n\n275\n00:15:56.185 --> 00:16:01.562\n1 can't do that, but\ncan I call p2.our add?\n\n276\n00:16:01.562 --> 00:16:05.990\nIt's on the right side of the addition,\nand get something that makes sense.\n\n277\n00:16:05.990 --> 00:16:07.620\nSo then now the order,\n\n278\n00:16:07.620 --> 00:16:12.850\nthese are actually in the reverse\norder that you want them right?\n\n279\n00:16:12.850 --> 00:16:16.040\nSo you're like okay, okay.\n\n280\n00:16:16.040 --> 00:16:17.920\nSo what do you want to do?\n\n281\n00:16:17.920 --> 00:16:23.150\nWell we could move this, but\nthis does illustrate that the add,\n\n282\n00:16:23.150 --> 00:16:28.990\nand the r add are called depending\non where the arguments are.\n\n283\n00:16:28.990 --> 00:16:32.600\nNow, some of you may be asking,\nwell why did p2 and p3 work?\n\n284\n00:16:32.600 --> 00:16:35.680\nWell because p2,\nthere's a point on the left and\n\n285\n00:16:35.680 --> 00:16:37.480\non the right,\nit doesn't have to travel right.\n\n286\n00:16:38.580 --> 00:16:45.440\nBut if I go, let's go a, and\nwe know that's gonna fail plus p2.\n\n287\n00:16:45.440 --> 00:16:48.230\n'str' object has no attribute 'x'.\n\n288\n00:16:48.230 --> 00:16:52.130\nNotice it called radd,\n\n289\n00:16:52.130 --> 00:16:57.960\nwhich itself calls add unless it's an int\nor a float, but then that fails, okay?\n\n290\n00:16:57.960 --> 00:17:01.120\nI know that's kind of heady, kinda weird,\n\n291\n00:17:01.120 --> 00:17:06.080\ntakes a little bit to think about But\nthink about the order.\n\n292\n00:17:06.080 --> 00:17:08.620\nIt's gonna try to call add first.\n\n293\n00:17:08.620 --> 00:17:12.150\nIf that doesn't work, it's gonna try to\ncall our add cuz it's like well let me-\n\n294\n00:17:12.150 --> 00:17:13.150\n&gt;&gt; Which is the reverse.\n\n295\n00:17:13.150 --> 00:17:16.100\n&gt;&gt; Which is the reverse\nin the context of this.\n\n296\n00:17:16.100 --> 00:17:21.980\nWait for it, wait for it, there we go.\n\n297\n00:17:21.980 --> 00:17:28.330\nSo p2 + p3, let's say that p2\n.Dunder add p3 didn't work,\n\n298\n00:17:28.330 --> 00:17:35.276\nwell excuse me, these will always\nwork because these are both points.\n\n299\n00:17:37.921 --> 00:17:41.470\nIt's good, if I switch the order it\nstill calls add cuz they're both points.\n\n300\n00:17:41.470 --> 00:17:48.430\nBut what it's saying is if I say p2\n+ 1 It's going to call dunder add.\n\n301\n00:17:48.430 --> 00:17:51.110\nIt's going to say p2 dot dunder add\n\n302\n00:17:51.110 --> 00:17:56.190\none because it's on the left\nof the operator, just like so.\n\n303\n00:17:56.190 --> 00:17:59.610\nAnd it fails because I don't\nhave logic that handles that.\n\n304\n00:17:59.610 --> 00:18:03.507\nBut if I reverse them, p2.\n\n305\n00:18:03.507 --> 00:18:09.980\nWell, one, that fails going this way so\nwhat it does is it comes to the right\n\n306\n00:18:09.980 --> 00:18:15.790\nhand argument, p2 in this case which is\na point and says is there an radd method?\n\n307\n00:18:15.790 --> 00:18:17.750\nYes, dunder radd.\n\n308\n00:18:17.750 --> 00:18:21.840\nCool, p2.dunder radd and\n\n309\n00:18:21.840 --> 00:18:25.530\nthen it goes back to the left and\ngrabs the 1 and puts it in there.\n\n310\n00:18:25.530 --> 00:18:29.950\nAnd if I do that,\nit actually adds, I anticipate,\n\n311\n00:18:29.950 --> 00:18:34.310\nbecause it goes well let me check left\nto right, no let me check right to left.\n\n312\n00:18:34.310 --> 00:18:36.000\n&gt;&gt; Right, correct, I mean, yeah.\n\n313\n00:18:36.000 --> 00:18:41.770\n&gt;&gt; I'm like no Zach, no, and you have to\nbe careful cuz that can be a little crazy.\n\n314\n00:18:41.770 --> 00:18:45.600\nBut what I do get out of this\nkind of interestingly enough,\n\n315\n00:18:47.040 --> 00:18:49.070\nis let's say I have a bunch of points.\n\n316\n00:18:49.070 --> 00:18:54.080\nLet's say I have p1, p2, p3,\np3, p3, just like that, right?\n\n317\n00:18:55.450 --> 00:19:00.340\nSo I have a bunch of points and\nthey're in a list.\n\n318\n00:19:00.340 --> 00:19:04.700\nIf I were to call sum on the points.\n\n319\n00:19:04.700 --> 00:19:07.930\nSum actually works now.\n\n320\n00:19:07.930 --> 00:19:11.240\nBecause I've implemented add and r-add.\n\n321\n00:19:11.240 --> 00:19:13.960\nThere are ways of only implementing\none and getting some to work.\n\n322\n00:19:15.370 --> 00:19:21.580\nBut, the reason this works is because,\nsum implicitly starts with zero.\n\n323\n00:19:21.580 --> 00:19:24.490\nWhat's zero plus point, right here?\n\n324\n00:19:24.490 --> 00:19:26.410\nWell, it knows how to do\nthat because of our end,\n\n325\n00:19:27.560 --> 00:19:29.900\nin the end both of them should be good.\n\n326\n00:19:29.900 --> 00:19:33.410\nNow if I didn't have somebody\nto handle integer plus point and\n\n327\n00:19:33.410 --> 00:19:36.900\nreally I would probably get back and\nswitch this logic so I could do point and\n\n328\n00:19:36.900 --> 00:19:41.440\nthen integer also so I don't have,\nyou know what I mean?\n\n329\n00:19:41.440 --> 00:19:46.870\nYou have to do something like this\nwhere you start with like 0,0.\n\n330\n00:19:46.870 --> 00:19:48.100\nSo, and it knows how to do that.\n\n331\n00:19:48.100 --> 00:19:49.930\nI don't need to stick to same thing.\n\n332\n00:19:49.930 --> 00:19:53.660\nSome will take a second argument\nwhere to start the summation and\n\n333\n00:19:53.660 --> 00:19:58.490\nthen we start there and you're adding\ntogether as part of the reduction.\n\n334\n00:19:58.490 --> 00:20:03.390\nSo then our works there's\none last thing though.\n\n335\n00:20:03.390 --> 00:20:07.380\nIf I come here and\nI go p1 well that 0 is it.\n\n336\n00:20:07.380 --> 00:20:10.590\nI really wanna go Like p1 += p2.\n\n337\n00:20:10.590 --> 00:20:13.086\nWell does that work?\n\n338\n00:20:13.086 --> 00:20:16.878\np1, and it does!\n\n339\n00:20:16.878 --> 00:20:20.270\nWell, why does that work?\n\n340\n00:20:20.270 --> 00:20:21.740\nCuz this is in place.\n\n341\n00:20:23.010 --> 00:20:26.250\nBecause, what is happening is,\nit's grabbing that,\n\n342\n00:20:26.250 --> 00:20:30.440\nit's adding these two together, and\nthen it's re assigning the result.\n\n343\n00:20:30.440 --> 00:20:35.610\nSo ad and our ad,\nalready give you that ability, okay?\n\n344\n00:20:35.610 --> 00:20:38.490\nNow, here's where it gets a little tricky.\n\n345\n00:20:38.490 --> 00:20:40.760\nWhat if I do p1 plus, equals 1?\n\n346\n00:20:40.760 --> 00:20:45.500\nI fail because it doesn't know how to do\n\n347\n00:20:45.500 --> 00:20:49.500\nstandard addition where the number\ncomes second after the point.\n\n348\n00:20:49.500 --> 00:20:53.630\nSo if I wanted to add that, well number\none, I could do a couple of things.\n\n349\n00:20:53.630 --> 00:20:58.930\nLet me get out of here,\nand come to adding.\n\n350\n00:20:58.930 --> 00:21:04.190\nI could grab this right here, and\nbring it back up to add, right?\n\n351\n00:21:04.190 --> 00:21:06.290\nExcuse me, not all of this, but this part.\n\n352\n00:21:06.290 --> 00:21:12.330\nAnd then do else, the else would\njust be this return that exists.\n\n353\n00:21:12.330 --> 00:21:20.920\nOr I can do something called iadd,\nin place addition, okay?\n\n354\n00:21:20.920 --> 00:21:24.800\nAnd let me just make sure I\ngot all those arguments there.\n\n355\n00:21:24.800 --> 00:21:26.950\nSometimes these arguments change.\n\n356\n00:21:26.950 --> 00:21:27.770\nAnd nope, I'm good.\n\n357\n00:21:29.620 --> 00:21:31.592\nSo I add is that plus equals part.\n\n358\n00:21:31.592 --> 00:21:33.320\n&gt;&gt; Mm-hm, mm-hm.\n\n359\n00:21:33.320 --> 00:21:35.510\n&gt;&gt; And\nthis is not gonna return a new object.\n\n360\n00:21:37.770 --> 00:21:40.890\nThis is the actualy,\nlike I'm gonna make this change.\n\n361\n00:21:40.890 --> 00:21:47.970\nSo I wanna say, well if is instance\nof if the other is either a float or\n\n362\n00:21:47.970 --> 00:21:54.452\nan int Then I want to self.x +=other.\n\n363\n00:21:54.452 --> 00:21:58.065\nAnd then self.y +=other.\n\n364\n00:21:58.065 --> 00:22:02.106\nNow, what I'm doing is I'm delegating\nback to numbers knowing how to +=.\n\n365\n00:22:02.106 --> 00:22:02.768\n&gt;&gt; Mm-hm.\n\n366\n00:22:02.768 --> 00:22:07.338\nOkay?\n\n367\n00:22:07.338 --> 00:22:12.842\nOtherwise, I'm gonna\nassume that it's a point,\n\n368\n00:22:12.842 --> 00:22:17.714\nand I'm gonna say self.x is += other.x.\n\n369\n00:22:17.714 --> 00:22:23.820\nSelf.y is += other.y just like that.\n\n370\n00:22:23.820 --> 00:22:26.630\nNow we've seen that weirdness happens.\n\n371\n00:22:26.630 --> 00:22:31.060\nOriginally I didn't have the ability\nto do += a number, okay?\n\n372\n00:22:31.060 --> 00:22:36.890\nSo if I do add So, p1, actually lets do,\n\n373\n00:22:36.890 --> 00:22:41.810\nso p1 is 00,\nI wanna make sure to keep that one.\n\n374\n00:22:41.810 --> 00:22:43.220\nSo, I look to p2 and p3.\n\n375\n00:22:43.220 --> 00:22:45.270\np2 is +=p3, that works.\n\n376\n00:22:45.270 --> 00:22:48.340\nAnd now p2 is, well,\n\n377\n00:22:49.700 --> 00:22:53.990\nthat's weird, p2, let's take a look here.\n\n378\n00:22:55.210 --> 00:22:56.630\nYou know what?\n\n379\n00:22:58.030 --> 00:23:02.596\nThink I got a typo somewhere,\nbut let's see what happens.\n\n380\n00:23:02.596 --> 00:23:04.410\np1 += 1, p1, p1, p1.\n\n381\n00:23:04.410 --> 00:23:11.190\nAnd you know what I forgot to do,\nforgot to do?\n\n382\n00:23:12.670 --> 00:23:15.590\nI'm pretty sure I forgot\nto return something here.\n\n383\n00:23:15.590 --> 00:23:16.270\n&gt;&gt; Okay.\n\n384\n00:23:16.270 --> 00:23:22.802\n&gt;&gt; So we'll do that, and adding and well,\n\n385\n00:23:22.802 --> 00:23:29.990\nI kind of just want to return self, okay.\n\n386\n00:23:29.990 --> 00:23:33.920\nNow, what I've done is I've modified\nthe object and then returned it back.\n\n387\n00:23:33.920 --> 00:23:37.470\nNot necessarily the best way.\n\n388\n00:23:37.470 --> 00:23:43.100\nBut that works for us, and\nI wanted to say, I'm adding in place.\n\n389\n00:23:43.100 --> 00:23:45.330\nLet's see if that works for us.\n\n390\n00:23:45.330 --> 00:23:49.000\nIf not, then I think I might have\nsomething going on here, Zach.\n\n391\n00:23:49.000 --> 00:23:50.810\nSo who knows, might be a.\n\n392\n00:23:50.810 --> 00:23:52.980\nA little bit of-\n&gt;&gt; Lapse.\n\n393\n00:23:52.980 --> 00:23:54.550\n&gt;&gt; Lapse in judgement here.\n\n394\n00:23:54.550 --> 00:23:56.741\nSo p1, p1 += 1, p1.\n\n395\n00:23:56.741 --> 00:23:58.286\nThere we go.\n\n396\n00:23:58.286 --> 00:24:02.570\nforgot that return statement.\n\n397\n00:24:02.570 --> 00:24:06.150\nNow with that said, technically you\ncould just make a new obect and\n\n398\n00:24:06.150 --> 00:24:07.190\nreturn it from iadd.\n\n399\n00:24:07.190 --> 00:24:09.210\nAnd it would still work.\n\n400\n00:24:09.210 --> 00:24:11.970\nBut you can add logic in iadd\nif you want in-place addition.\n\n401\n00:24:13.930 --> 00:24:16.570\nWhat that means is I'm gonna mutate this,\n\n402\n00:24:16.570 --> 00:24:20.550\nwell mutate cuz I'm actually storing\na new object in the variable.\n\n403\n00:24:21.870 --> 00:24:27.130\nWhy do I need iadd if add and radd\nbeing implemented are to give me iadd?\n\n404\n00:24:27.130 --> 00:24:31.830\nMaybe you want to try to disallow this so\nyou can intercept it and\n\n405\n00:24:31.830 --> 00:24:36.590\nsay no no in place mutuations,\nbad, stop it.\n\n406\n00:24:36.590 --> 00:24:38.570\nSo, plus equals one works.\n\n407\n00:24:38.570 --> 00:24:41.430\nLet's see if plus equals P2, P1.\n\n408\n00:24:41.430 --> 00:24:44.780\nThat also works now.\n\n409\n00:24:44.780 --> 00:24:49.230\nSo I have all these addition operations\nthat I can use using integers,\n\n410\n00:24:49.230 --> 00:24:51.440\nfloats, or another point.\n\n411\n00:24:51.440 --> 00:24:56.661\nAnd, because of that,\nI have the ability to go sum of p1,\n\n412\n00:24:56.661 --> 00:25:02.965\np2, p3, and I can now get the sum of\na bunch of [CROSSTALK] from a list.\n\n413\n00:25:02.965 --> 00:25:06.372\nAnd everything's just a little prettier,\nlittle easier to read,\n\n414\n00:25:06.372 --> 00:25:08.655\nand actually follows\na more pythonic setup.\n\n415\n00:25:08.655 --> 00:25:10.185\n&gt;&gt; And life is good.\n\n416\n00:25:10.185 --> 00:25:11.235\nThat's fantastic.\n\n417\n00:25:11.235 --> 00:25:12.665\nAdding, wonderful episode.\n\n418\n00:25:12.665 --> 00:25:14.695\nI think you did a fantastic job as usual,\nJustin.\n\n419\n00:25:14.695 --> 00:25:16.775\nBefore we conclude anything else?\n\n420\n00:25:16.775 --> 00:25:19.235\n&gt;&gt; Well you know just to keep in mind,\njust to reiterate,\n\n421\n00:25:19.235 --> 00:25:24.395\nreally drive home the point always\nmake sure that what you're doing,\n\n422\n00:25:24.395 --> 00:25:28.650\nbecause effectively we\nare overriding operators, okay.\n\n423\n00:25:28.650 --> 00:25:30.965\nWe were saying plus sign for\npoints means this.\n\n424\n00:25:30.965 --> 00:25:32.450\n&gt;&gt; Mm-hm.\n&gt;&gt; Plus sign for numbers this.\n\n425\n00:25:32.450 --> 00:25:34.720\nPlus sign for strings means this.\n\n426\n00:25:34.720 --> 00:25:36.830\nPython affords you that ability but\n\n427\n00:25:36.830 --> 00:25:40.215\nyou have to be very careful cuz you can\ndo things that don't make a lot of sense.\n\n428\n00:25:40.215 --> 00:25:41.890\n&gt;&gt; Mm-hm.\n\n429\n00:25:41.890 --> 00:25:46.670\n&gt;&gt; Why does add create a string\n&gt;&gt; That is also web request,\n\n430\n00:25:46.670 --> 00:25:47.765\nI don't know what that is.\n\n431\n00:25:47.765 --> 00:25:51.070\n&gt;&gt; [LAUGHTER]\n&gt;&gt; Use them responsibly, use them so\n\n432\n00:25:51.070 --> 00:25:54.450\nthey make sense in the context of your\napplication, because if you don't,\n\n433\n00:25:54.450 --> 00:25:57.485\nyour coworkers, your friends or whoever\nis working on that project with you\n\n434\n00:25:57.485 --> 00:26:00.715\n&gt;&gt; He is probably gonna get really upset.\n\n435\n00:26:00.715 --> 00:26:04.215\n&gt;&gt; Another excellent episode inside\nthe Python data model series.\n\n436\n00:26:04.215 --> 00:26:06.885\nAnd make sure you watch every single\nvideo Justin's put together for you,\n\n437\n00:26:06.885 --> 00:26:07.985\nhe's done a fantastic job.\n\n438\n00:26:07.985 --> 00:26:09.395\nYou're in the course library too, so\n\n439\n00:26:09.395 --> 00:26:12.915\nthere's thousands of other videos that\nare there to help you go further.\n\n440\n00:26:12.915 --> 00:26:13.625\nCheck those out too.\n\n441\n00:26:13.625 --> 00:26:15.715\nAnd tell everybody you\nknow about DEVPRO.TV.\n\n442\n00:26:15.715 --> 00:26:17.675\nThanks for watching, I'm Zach Memos.\n\n443\n00:26:17.675 --> 00:26:18.385\n&gt;&gt; And I'm Justin Nelson.\n\n444\n00:26:18.385 --> 00:26:19.936\n&gt;&gt; And we will see you soon.\n\n445\n00:26:19.936 --> 00:26:24.316\n[MUSIC]\n\n",
          "vimeoId": "252570190"
        },
        {
          "description": "In this episode, Justin and Zach demonstrate the \"-\" operator overriding using the \\_\\_sub\\_\\_, \\_\\_rsub\\_\\_, and \\_\\_isub\\_\\_ methods.",
          "length": "1151",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-2-1-subtracting-012418-PGM.00_20_56_09.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-2-1-subtracting-012418-PGM.00_20_56_09.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-2-1-subtracting-012418-PGM.00_20_56_09.Still001-sm.jpg",
          "title": "Subtracting",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.104 --> 00:00:15.288\nHello, and thank you for\nwatching DevProTV,\n\n3\n00:00:15.288 --> 00:00:16.976\nhelping you learn wherever you go.\n\n4\n00:00:16.976 --> 00:00:20.528\nI'm your host Zach Memos as we\ncontinue on with Python data model.\n\n5\n00:00:20.528 --> 00:00:22.961\nSubtracting, that's what\nwe're gonna do right now.\n\n6\n00:00:22.961 --> 00:00:26.382\nJustin Dennison is here to show us how,\nJustin, good to see you sir.\n\n7\n00:00:26.382 --> 00:00:27.199\n&gt;&gt; It's good to be back,\n\n8\n00:00:27.199 --> 00:00:29.791\nZach, how are you today?\n&gt;&gt; I'm excited to be here, I'm excited to\n\n9\n00:00:29.791 --> 00:00:32.224\ncontinue on with Python data model.\n&gt;&gt; Yeah, yeah, and\n\n10\n00:00:32.224 --> 00:00:35.272\nhopefully Zach didn't oversell it there.\n&gt;&gt; [LAUGH]\n\n11\n00:00:35.272 --> 00:00:36.426\n&gt;&gt; He got really excited, he's like,\n\n12\n00:00:36.426 --> 00:00:39.774\nwe're subtracting-\n&gt;&gt; I get excited all the time.\n\n13\n00:00:39.774 --> 00:00:42.764\n&gt;&gt; [LAUGH] So subtracting, in the previous\n\n14\n00:00:42.764 --> 00:00:48.571\nepisode, we actually saw that we could\nmimic a numeric type with addition.\n\n15\n00:00:48.571 --> 00:00:51.811\nWe get sum,\nwe get the ability to left and right add,\n\n16\n00:00:51.811 --> 00:00:56.960\nand there's some weirdness there\nthat'll happen, but that's all right.\n\n17\n00:00:56.960 --> 00:01:00.220\nIn this one,\nsince it's a little bit of a rehash, and\n\n18\n00:01:00.220 --> 00:01:03.668\nsome of these, they're small differences.\n\n19\n00:01:03.668 --> 00:01:05.970\nBut I wanna be able to\ntake small little chunks,\n\n20\n00:01:05.970 --> 00:01:08.750\nif you just need to know\nabout one particular thing.\n\n21\n00:01:08.750 --> 00:01:12.802\nSo in this episode,\nwe're gonna see what do we need to do to\n\n22\n00:01:12.802 --> 00:01:17.464\nsimulate numeric types that allow for\nthe subtraction operator.\n\n23\n00:01:17.464 --> 00:01:22.330\nBut maybe we'll treat this a little\ndifferent, other than back story,\n\n24\n00:01:22.330 --> 00:01:25.380\nseeing a little more\nnuanced behavior here.\n\n25\n00:01:25.380 --> 00:01:29.690\nSo let's go ahead and take a look at the\nscreen, and well, where did we leave off?\n\n26\n00:01:29.690 --> 00:01:33.244\nWe had that adding, and\nI'm gonna go ahead and\n\n27\n00:01:33.244 --> 00:01:36.812\ncopy adding into, well, subtracting.py.\n\n28\n00:01:36.812 --> 00:01:41.710\nAnd let's look at subtracting,\nso we had radd, add, and iadd.\n\n29\n00:01:41.710 --> 00:01:46.720\nNow, just to clean up the mess,\nI'm gonna go ahead and delete this.\n\n30\n00:01:46.720 --> 00:01:50.855\nAnd you know what, maybe we'll do this\na little bit differently for a couple.\n\n31\n00:01:50.855 --> 00:01:57.027\nSo that repr is gonna be helpful to us,\nand it's gonna be all handy dandy.\n\n32\n00:01:57.027 --> 00:02:01.408\nNow, before we do too much,\nwe got that part set up,\n\n33\n00:02:01.408 --> 00:02:05.465\nI do want to talk about the adding,\nall right.\n\n34\n00:02:05.465 --> 00:02:07.165\nWe simulated a numeric type, but\n\n35\n00:02:07.165 --> 00:02:09.265\nthe addition operator can\nmean different things.\n\n36\n00:02:09.265 --> 00:02:11.760\nAs we've seen, that can be for\n\n37\n00:02:11.760 --> 00:02:16.430\nstrings, is that the same case for\nthe subtraction operator?\n\n38\n00:02:16.430 --> 00:02:20.283\nSo let's do a little bit of exploration,\nso\n\n39\n00:02:20.283 --> 00:02:24.776\nto speak, to see,\nlet me try to reason about this.\n\n40\n00:02:24.776 --> 00:02:30.269\nSo if I do 1- 3, that is -2,\nif I say x = 1, not -1,\n\n41\n00:02:30.269 --> 00:02:36.588\nx = 1, y = 3, then x- y, well,\nthat's still the same thing.\n\n42\n00:02:36.588 --> 00:02:41.120\nYou're like, okay, that makes sense,\nthat behaves as I anticipate it to.\n\n43\n00:02:41.120 --> 00:02:46.790\nAll right, now what if we say x = 'a',\ny = 'b' and\n\n44\n00:02:46.790 --> 00:02:52.180\nthen we say x- y, what's going to happen?\n\n45\n00:02:52.180 --> 00:02:57.140\nWell, unsupportive operand minus for\nstring and string.\n\n46\n00:02:57.140 --> 00:03:01.727\nIt doesn't make any sense,\nright, what does that do?\n\n47\n00:03:01.727 --> 00:03:06.529\nIt subtracts them, but\nhow is that meaningful to a string?\n\n48\n00:03:06.529 --> 00:03:10.850\nDo I take away letters, do I take\naway every instance of that letter?\n\n49\n00:03:10.850 --> 00:03:16.220\nIt just doesn't have any great context or\nsemantic meaning, so it's not defined.\n\n50\n00:03:17.250 --> 00:03:19.428\nSo that's still driving home that point,\n\n51\n00:03:19.428 --> 00:03:22.820\nmake sure it makes sense in\nthe context of your application.\n\n52\n00:03:22.820 --> 00:03:24.995\nSo we've looked at strings, you know what,\n\n53\n00:03:24.995 --> 00:03:28.327\nlet's look at a couple other\ncollection types, so let's do a list.\n\n54\n00:03:28.327 --> 00:03:32.076\nLet's say x = [1, 2, 3] [LAUGH],\n\n55\n00:03:32.076 --> 00:03:36.291\nwe'll get to there in just a second, Zach.\n\n56\n00:03:36.291 --> 00:03:40.412\nAnd then y = [4, 5, 6], and then, well,\n\n57\n00:03:40.412 --> 00:03:45.610\nyou know what,\ninterestingly enough, plus works.\n\n58\n00:03:45.610 --> 00:03:50.620\nI know I'm throwing back to plus,\nbut it's a matter of comparison.\n\n59\n00:03:50.620 --> 00:03:55.543\nx- y, let's see, it's still not supported.\n\n60\n00:03:55.543 --> 00:03:57.641\nAnd that's because it\ndoesn't have any meaning,\n\n61\n00:03:57.641 --> 00:03:59.114\nwhat would taking two lists apart?\n\n62\n00:03:59.114 --> 00:04:02.710\nIf I add two lists together, well,\nI just kinda squish them together, right?\n\n63\n00:04:02.710 --> 00:04:05.730\nBut if I subtract them,\nthat doesn't have a great deal of meaning.\n\n64\n00:04:05.730 --> 00:04:08.325\nIf we clear this out and\nwe say, from datetime.\n\n65\n00:04:10.030 --> 00:04:14.470\nImport, well, let's actually go\nwith the datetime this time, okay?\n\n66\n00:04:14.470 --> 00:04:16.828\nSo if we say x = datetime.now(),\n\n67\n00:04:16.828 --> 00:04:21.640\nso that's right now at the time of\nthis recording, boom, just happened.\n\n68\n00:04:21.640 --> 00:04:29.460\nAnd then y is datetime, and\nyou know what, 2000, 1, 1.\n\n69\n00:04:29.460 --> 00:04:31.664\nAnd I'm gonna leave\neverything else as 0's.\n\n70\n00:04:31.664 --> 00:04:36.525\nSo if we look at x,\nboom, January 24, 2018,\n\n71\n00:04:36.525 --> 00:04:40.501\nat 9:43 in the morning 43 seconds and\n\n72\n00:04:40.501 --> 00:04:44.809\n847,963 microseconds, I wanna say,\n\n73\n00:04:44.809 --> 00:04:49.670\nI forget if that's milli or micro.\n&gt;&gt; I live my life in microseconds, so\n\n74\n00:04:49.670 --> 00:04:52.683\nit makes sense.\n&gt;&gt; [LAUGH] It does, what am I doing now,\n\n75\n00:04:52.683 --> 00:04:56.650\n[LAUGH] it allows for hyperscheduling,\nI will give you that, Zach.\n\n76\n00:04:56.650 --> 00:04:59.960\nYou're like, what am I doing\nin the next four microseconds?\n\n77\n00:04:59.960 --> 00:05:01.947\nWell, it just went by, so who cares?\n&gt;&gt; And there it is.\n\n78\n00:05:01.947 --> 00:05:04.282\n&gt;&gt; [LAUGH] So I have these two, and y,\n\n79\n00:05:04.282 --> 00:05:09.288\nthe other thing's, so because I\ndidn't do now, I don't necessarily\n\n80\n00:05:09.288 --> 00:05:14.640\nhave the same amount of precision,\nit's 1, 1, 2000, and 0, 0.\n\n81\n00:05:14.640 --> 00:05:19.908\nWe'll say that's 12 AM,\nokay, 12 AM at night.\n\n82\n00:05:19.908 --> 00:05:24.292\nNow, if I do x + y, we actually saw,\nthat's not supported in datetime.\n\n83\n00:05:24.292 --> 00:05:28.740\n&gt;&gt; x- y, that is supported, so\n\n84\n00:05:28.740 --> 00:05:34.800\nnow in the context of datetimes, you get\na difference operator, right, subtraction.\n\n85\n00:05:34.800 --> 00:05:40.421\nBut notice I'm not getting a date back,\nI get something called a time delta.\n\n86\n00:05:40.421 --> 00:05:45.527\nWhat is a time delta,\nwt counts the number of minutes,\n\n87\n00:05:45.527 --> 00:05:51.660\nseconds, and, again,\nI'm hard pressed to say micro or milli.\n\n88\n00:05:51.660 --> 00:05:55.570\nThere is a difference,\nI just don't remember right off hand,\n\n89\n00:05:55.570 --> 00:05:56.680\nI always have to check the document.\n\n90\n00:05:56.680 --> 00:05:59.600\nI don't work in this last digit\na great deal, so it's hard for\n\n91\n00:05:59.600 --> 00:06:01.060\nme to always bring it back.\n\n92\n00:06:01.060 --> 00:06:07.550\nBut these are days and seconds,\nso it has been 6,598 days,\n\n93\n00:06:07.550 --> 00:06:12.252\n35023 seconds from January 1st,\n\n94\n00:06:12.252 --> 00:06:16.430\n2000 to, well, then when we took\nthe snapshot of time, okay.\n\n95\n00:06:16.430 --> 00:06:19.077\nNotice that it didn't return\nthe same data type, so\n\n96\n00:06:19.077 --> 00:06:22.275\nthere's nothing that says it has\nto return the same data type.\n\n97\n00:06:22.275 --> 00:06:26.143\nWhich means,\nwhat if I do something like this,\n\n98\n00:06:26.143 --> 00:06:30.230\nx- y- y, I actually get weirdness, okay.\n\n99\n00:06:30.230 --> 00:06:35.507\nSo that's something else to keep in mind,\nbecause now, subtraction doesn't have\n\n100\n00:06:35.507 --> 00:06:40.654\nthat nice property that, I can just\nmove things, I can kind of group things.\n\n101\n00:06:40.654 --> 00:06:43.894\nCuz depending on order,\nright, 1 minus 2, well,\n\n102\n00:06:43.894 --> 00:06:46.993\nthat's actually negative,\nyou're in the hole.\n\n103\n00:06:46.993 --> 00:06:51.209\n2 minus 1, you still have a dollar left,\nso those are things to keep in mind.\n\n104\n00:06:51.209 --> 00:06:54.761\nSo there's a nice little exploration\nto think about the context of what\n\n105\n00:06:54.761 --> 00:06:57.310\nthe operator means for\ndifferent data types.\n\n106\n00:06:57.310 --> 00:06:59.977\nBut we've talked a lot,\n\n107\n00:06:59.977 --> 00:07:05.565\nlet's go ahead on how this would work for\nour point.\n\n108\n00:07:05.565 --> 00:07:10.838\nNow, because our point is\na representation of an ordered pair,\n\n109\n00:07:10.838 --> 00:07:15.441\nthe numeric application\nprobably makes sense, okay?\n\n110\n00:07:15.441 --> 00:07:19.990\nSo here's what we're gonna do,\nwell, I have a dunder method,\n\n111\n00:07:19.990 --> 00:07:21.941\nI know that it has to exist.\n\n112\n00:07:21.941 --> 00:07:25.864\nZach, would you take a guess\nat what the dunder method for\n\n113\n00:07:25.864 --> 00:07:28.792\nsubtraction is?\n&gt;&gt; Dunder sub.\n\n114\n00:07:28.792 --> 00:07:30.955\n&gt;&gt; Dunder sub is exactly correct, and\n\n115\n00:07:30.955 --> 00:07:35.945\nbe careful, you may actually get a little\nhungry, but it's not that type of sub.\n\n116\n00:07:35.945 --> 00:07:37.698\n&gt;&gt; [LAUGH]\n\n117\n00:07:37.698 --> 00:07:41.077\n&gt;&gt; Let's actually add a little logic to\n\n118\n00:07:41.077 --> 00:07:47.510\nsay, I can subtract 2 points, or\nI can subtract a point and a number.\n\n119\n00:07:47.510 --> 00:07:52.140\nAnd we saw this in add, but\nlet's be more specific up front, okay?\n\n120\n00:07:52.140 --> 00:07:57.172\nSo, if isinstance(other, (int,\n\n121\n00:07:57.172 --> 00:08:02.834\nfloat)), right, if it's either one,\n\n122\n00:08:02.834 --> 00:08:07.238\nthen I wanna return a point that is\n\n123\n00:08:07.238 --> 00:08:12.918\n(self.x- other, self.y- other).\n\n124\n00:08:12.918 --> 00:08:17.626\nOtherwise, I wanna return a point\n\n125\n00:08:17.626 --> 00:08:22.008\nthat is (self.x- other.x,\n\n126\n00:08:22.008 --> 00:08:29.340\nself.y- other.y), and there we go, okay?\n\n127\n00:08:29.340 --> 00:08:33.766\nNow, one thing that we could say is,\nmaybe some of this logic,\n\n128\n00:08:33.766 --> 00:08:35.530\nmaybe we wanna catch it.\n\n129\n00:08:35.530 --> 00:08:40.238\nYou'll notice you get a type error\nif you try to subtract them.\n\n130\n00:08:40.238 --> 00:08:43.160\nRight now,\nall this is gonna give me is a other,\n\n131\n00:08:43.160 --> 00:08:45.710\nif I pass in something that's not\npoint like, it's just gonna say,\n\n132\n00:08:45.710 --> 00:08:51.460\ndoesn't have a point,\ndoesn't have an attribute x, okay?\n\n133\n00:08:51.460 --> 00:08:54.810\nSo maybe we'll put in a little more,\nand emulate that message.\n\n134\n00:08:54.810 --> 00:08:58.260\nSo if isinstance, and\nI know this is kind of,\n\n135\n00:08:59.930 --> 00:09:02.600\nit's duplicated,\nwe're just gonna go with it.\n\n136\n00:09:02.600 --> 00:09:08.039\nIf it is not a Point, an int,\nor a float, all right,\n\n137\n00:09:08.039 --> 00:09:13.110\nso what I mean is if it's\nnot one of those things,\n\n138\n00:09:13.110 --> 00:09:16.363\nthen I wanna do the following.\n\n139\n00:09:16.363 --> 00:09:21.731\nRaise a TypeError,\nas we've seen, Subtraction,\n\n140\n00:09:21.731 --> 00:09:27.104\nand we'll keep the message short,\nnot supported.\n\n141\n00:09:30.842 --> 00:09:33.838\nFor a Point, and\n\n142\n00:09:33.838 --> 00:09:39.830\nnow we need to do something else,\n\n143\n00:09:39.830 --> 00:09:44.704\nformat(type).\n&gt;&gt; Now Justin that type function that\n\n144\n00:09:44.704 --> 00:09:45.750\nyou're entering here,\n\n145\n00:09:45.750 --> 00:09:49.150\nwhat is that going to do, exactly?\n&gt;&gt; So this is gonna give me some more\n\n146\n00:09:49.150 --> 00:09:55.080\ngeneralized manner of reporting what\nis the type of the particular thing.\n\n147\n00:09:55.080 --> 00:09:59.640\nNow sometimes you get into some worry,\nand maybe there's better ways.\n\n148\n00:09:59.640 --> 00:10:05.776\nBut what I mean is, if the other thing\nthat I have listed is not a Point,\n\n149\n00:10:05.776 --> 00:10:10.886\nan int, or a float,\nthen I want to report what the type is.\n\n150\n00:10:10.886 --> 00:10:14.960\nSo that it can go, it's not supported\nbetween a Point and this other thing,\n\n151\n00:10:14.960 --> 00:10:17.636\nlike a datetime or a string or\nsomething like that.\n\n152\n00:10:17.636 --> 00:10:22.925\nSo I'm gonna say the type of other,\njust like that,\n\n153\n00:10:22.925 --> 00:10:26.783\nand three parentheses, there we go.\n\n154\n00:10:26.783 --> 00:10:30.521\nOkay, so I'm gonna raise a TypeError, so\nI have a little more error checking, so\n\n155\n00:10:30.521 --> 00:10:31.774\na little more robustness.\n\n156\n00:10:31.774 --> 00:10:36.590\nAnd then I say, well, if it is an int or\na float, do this operation.\n\n157\n00:10:36.590 --> 00:10:43.390\nOtherwise, have a syntax error,\ncuz I forgot the parentheses there.\n\n158\n00:10:43.390 --> 00:10:46.129\nBut now this is a little more\nrobust than we saw with that.\n\n159\n00:10:46.129 --> 00:10:51.034\nSo a little added value here,\nlet's see if it works,\n\n160\n00:10:51.034 --> 00:10:55.088\nthough, so\nwe have a few things to test out.\n\n161\n00:10:55.088 --> 00:11:01.776\nSo python3 -i, and let's see, wait for\nit, wait for it, subtracting.\n\n162\n00:11:01.776 --> 00:11:06.510\nSo we have p1, p2, p3, if I do p1- p2,\n\n163\n00:11:06.510 --> 00:11:10.643\nit does, it works, it works that way.\n\n164\n00:11:10.643 --> 00:11:16.327\nIf I do p1- 5, that also works,\n\n165\n00:11:16.327 --> 00:11:23.409\nif I say p1- a,\nSubtraction not supported for\n\n166\n00:11:23.409 --> 00:11:26.720\na Point and class str, so\nnot supported between those two.\n\n167\n00:11:27.820 --> 00:11:32.138\nNow as I said, that type function is\njust kind of the quick and dirty,\n\n168\n00:11:32.138 --> 00:11:36.770\nthere's better ways to get a nicer\nprintout other than class str, okay?\n\n169\n00:11:36.770 --> 00:11:41.742\nNow let's see here,\nthere's something else,\n\n170\n00:11:41.742 --> 00:11:44.659\nwhat if I do 1 minus a Point?\n\n171\n00:11:44.659 --> 00:11:47.710\nWell, unsupported operand types for\nint and Point.\n\n172\n00:11:49.410 --> 00:11:54.120\nOkay, well,\ndoes it make sense to subtract a point\n\n173\n00:11:54.120 --> 00:11:59.080\nfrom a single integer,\nno, it doesn't, right?\n\n174\n00:12:00.640 --> 00:12:02.580\nSo maybe we come back and say,\n\n175\n00:12:02.580 --> 00:12:07.310\nwell, if we do this,\nwe wanna change this message a little bit.\n\n176\n00:12:08.680 --> 00:12:12.730\nWe don't want to allow that to happen.\n\n177\n00:12:12.730 --> 00:12:17.198\nWe are going to come in\nhere to subtracting, and\n\n178\n00:12:17.198 --> 00:12:20.326\nnow we have a right subtraction,\n\n179\n00:12:20.326 --> 00:12:25.167\nI know that sounds crazy, rsub.\n&gt;&gt; A reverse sub.\n\n180\n00:12:25.167 --> 00:12:27.794\n&gt;&gt; Yeah, reverse sub, it's actually just\n\n181\n00:12:27.794 --> 00:12:30.746\na peanut butter and jelly sandwich.\n&gt;&gt; Yum yum.\n\n182\n00:12:30.746 --> 00:12:33.398\n&gt;&gt; Yeah sorry, I'm using the word sub-\n\n183\n00:12:33.398 --> 00:12:34.975\n&gt;&gt; [LAUGH]\n\n184\n00:12:34.975 --> 00:12:36.324\n&gt;&gt; Fairly liberally there.\n\n185\n00:12:36.324 --> 00:12:44.633\nSo I would say something\nlike a raise TypeError.\n\n186\n00:12:44.633 --> 00:12:51.217\nIf isinstance, if not isinstance(other,\n\n187\n00:12:51.217 --> 00:12:56.933\nPoint), if it's not another point,\n\n188\n00:12:56.933 --> 00:13:00.411\nthen raise TypeError.\n\n189\n00:13:04.111 --> 00:13:07.035\nAnd say something like,\ntry the reverse order.\n\n190\n00:13:10.409 --> 00:13:15.438\nBe careful, Your calculations\n\n191\n00:13:15.438 --> 00:13:19.690\nmay change, your difference may change.\n\n192\n00:13:22.777 --> 00:13:27.460\nOkay, so I'm just kinda hijacking that,\n\n193\n00:13:27.460 --> 00:13:33.326\notherwise, return self.__sub__(other).\n\n194\n00:13:33.326 --> 00:13:37.036\nI'm just gonna delegate it back up top,\nokay, okay.\n\n195\n00:13:37.036 --> 00:13:40.938\nNow one final thing, and we saw something\nelse, and while I'm on the screen,\n\n196\n00:13:40.938 --> 00:13:42.548\nI'm gonna go ahead and do this.\n\n197\n00:13:42.548 --> 00:13:47.796\nAnd then we'll test it, and then, well,\nwe'll have essentially subtraction.\n\n198\n00:13:47.796 --> 00:13:54.997\nWe have an in-line sub, and\nthat's like minus equals.\n\n199\n00:13:54.997 --> 00:13:59.150\nWe didn't really talk about that much\nat the beginning of this episode.\n\n200\n00:13:59.150 --> 00:14:04.097\nBut most of the operators, if I have\na minus sign, I have a minus equals sign.\n\n201\n00:14:04.097 --> 00:14:07.934\nWhich will instead of just evaluating,\nit will actually evaluate the result of\n\n202\n00:14:07.934 --> 00:14:11.500\nthe expression and store it back into\nthe left hand variable, all right?\n\n203\n00:14:11.500 --> 00:14:18.648\nSo it's always variable left hand,\nand then something on the right.\n\n204\n00:14:18.648 --> 00:14:21.776\nAnd well, we'll just say in place,\n\n205\n00:14:24.879 --> 00:14:28.086\nAnd then return self.\n\n206\n00:14:28.086 --> 00:14:31.472\nI'm also going to delegate back,\n\n207\n00:14:31.472 --> 00:14:36.620\nbecause I don't actually\nneed to do anything else.\n\n208\n00:14:36.620 --> 00:14:38.740\nI'm not adding custom logic\nother than the print statement,\n\n209\n00:14:38.740 --> 00:14:42.670\nwhich is, I would not actually\nkeep that in a real project.\n\n210\n00:14:42.670 --> 00:14:48.620\nSo I'm gonna come back out and\npython3 -i subtracting.\n\n211\n00:14:48.620 --> 00:14:55.572\nSo p1, and then if I do p1- 1,\nthat makes sense, cuz that's add.\n\n212\n00:14:55.572 --> 00:14:59.172\nIf I do 1- p1,\ntry the reverse order, be careful,\n\n213\n00:14:59.172 --> 00:15:03.986\ndifference may change, all right,\nprobably should be a comma there.\n\n214\n00:15:03.986 --> 00:15:08.824\nBut if I do p1 -= 5, notice it\n\n215\n00:15:08.824 --> 00:15:14.030\nprints in place cuz it calls isub.\n\n216\n00:15:15.290 --> 00:15:20.532\nIf isub's not determined, it will try\nits best to call either __sub__ or,\n\n217\n00:15:20.532 --> 00:15:23.518\nI'm pretty sure it's always __sub__.\n\n218\n00:15:23.518 --> 00:15:26.668\nDon't quote me on that,\nI'm like 80% sure it's dunder sub.\n\n219\n00:15:26.668 --> 00:15:29.562\n&gt;&gt; 80% is good.\n\n220\n00:15:29.562 --> 00:15:31.102\n&gt;&gt; Now what do I have, well,\n\n221\n00:15:31.102 --> 00:15:34.930\nI have a point that has been\nstored back into that variable.\n\n222\n00:15:34.930 --> 00:15:39.800\nNow, when would I use isub, we talked\na little bit about this with addition.\n\n223\n00:15:39.800 --> 00:15:44.406\nWhen would I use isub, rsub,\nwell, versus sub, right,\n\n224\n00:15:44.406 --> 00:15:47.416\nthere's three that are associated.\n\n225\n00:15:47.416 --> 00:15:51.726\nIf I need to add custom logic for\nisub, I put it there, right?\n\n226\n00:15:51.726 --> 00:15:54.535\nIt still is returning\nthe result of a calculation,\n\n227\n00:15:54.535 --> 00:15:57.060\nI just kind of delegate it back.\n\n228\n00:15:57.060 --> 00:16:01.537\nBut maybe you want to go, you know what,\nI want to disallow that, turn it off.\n\n229\n00:16:01.537 --> 00:16:05.324\nWell, catch it and say,\nno in place mutation, right,\n\n230\n00:16:05.324 --> 00:16:07.430\nyou need to create new things.\n\n231\n00:16:09.510 --> 00:16:14.126\nWhen would I use rsub, well,\nif you want to check like 1- p1,\n\n232\n00:16:14.126 --> 00:16:17.732\nwell, that's not defined for\ninteger, right?\n\n233\n00:16:17.732 --> 00:16:21.372\nSub for\ninteger doesn't know about Points, so\n\n234\n00:16:21.372 --> 00:16:25.200\nwe'll try a Point with\nthe reverse subtraction.\n\n235\n00:16:25.200 --> 00:16:30.554\nSo it'll say Point rsub the integer,\nand then you can say, hey, be careful,\n\n236\n00:16:30.554 --> 00:16:35.363\nsubtraction is not commutative,\nwhich means I can't trade places.\n\n237\n00:16:35.363 --> 00:16:38.651\nBut if you do want to force this\ncalculation, what we've said is,\n\n238\n00:16:38.651 --> 00:16:40.390\ntry the reverse order.\n\n239\n00:16:40.390 --> 00:16:44.220\nAnd then, if a Point is on the left,\nand then either a float,\n\n240\n00:16:44.220 --> 00:16:49.340\nan integer, or another Point is on\nthe right, it will just do dunder sub.\n\n241\n00:16:49.340 --> 00:16:55.360\nAnd doing that, we can simulate numeric\ntypes that work under subtraction.\n\n242\n00:16:55.360 --> 00:16:59.820\nNow, as we've seen, that isn't\nthe only thing that it has to do.\n\n243\n00:16:59.820 --> 00:17:02.468\nAnd it doesn't even have\nto return the same type.\n\n244\n00:17:02.468 --> 00:17:06.491\nIf I wanted to go something\nlike this just for\n\n245\n00:17:06.491 --> 00:17:09.024\ngiggles and-\n&gt;&gt; [LAUGH]\n\n246\n00:17:09.024 --> 00:17:10.344\n&gt;&gt; Giggles, and\n\n247\n00:17:10.344 --> 00:17:15.411\nif I wanted to come down here,\nand let's hijack isub.\n\n248\n00:17:15.411 --> 00:17:19.954\nNo, let's be a little more nicer,\ninstead of returning a Point,\n\n249\n00:17:19.954 --> 00:17:22.153\nwhat if I said it's not a point?\n\n250\n00:17:22.153 --> 00:17:26.140\nI'm just gonna remove the Point and\nreturn a tuple, okay?\n\n251\n00:17:26.140 --> 00:17:29.589\nSo it's just a pair,\nit doesn't have all the Point features,\n\n252\n00:17:29.589 --> 00:17:31.487\nit returns something different.\n\n253\n00:17:31.487 --> 00:17:38.040\nLet's go see this in action,\nso python3 -i subtracting.\n\n254\n00:17:38.040 --> 00:17:43.260\nAnd then p1- p2, and notice it's no\nlonger a Point, but instead a tuple.\n\n255\n00:17:43.260 --> 00:17:44.960\nNow, why would you want to do that?\n\n256\n00:17:44.960 --> 00:17:48.990\nWell, if you have to encapsulate\nsome other set of behaviors\n\n257\n00:17:48.990 --> 00:17:50.670\nlike with the time, right?\n\n258\n00:17:50.670 --> 00:17:55.628\nIf I subtract two times, I don't get\nanother time, excuse me, a datetime,\n\n259\n00:17:55.628 --> 00:17:57.014\nmore specifically.\n\n260\n00:17:57.014 --> 00:18:01.982\nI get a timedelta, which is\nthe representation of how much time\n\n261\n00:18:01.982 --> 00:18:06.250\nhas passed between those\ntwo respective dates.\n\n262\n00:18:06.250 --> 00:18:10.260\nSo sometimes you've gotta think outside\nthe box other than just numbers.\n\n263\n00:18:10.260 --> 00:18:15.063\nBut, Zach, there you have it, we have\nthe ability to override the subtract\n\n264\n00:18:15.063 --> 00:18:17.356\noperator in Python.\n&gt;&gt; Well done sir,\n\n265\n00:18:17.356 --> 00:18:20.446\nsubtracting inside the Python\ndata model series.\n\n266\n00:18:20.446 --> 00:18:22.272\nJustin before we move on,\nanything else you'd like to say?\n\n267\n00:18:22.272 --> 00:18:25.176\n&gt;&gt; And I just wanna continue going,\n\n268\n00:18:25.176 --> 00:18:28.501\nI'm gonna reiterate the same topic.\n\n269\n00:18:28.501 --> 00:18:33.601\nMake sure it makes sense, you can\noverride a great deal of operators.\n\n270\n00:18:33.601 --> 00:18:36.734\nJust make sure it makes sense in\nthe context of your application before\n\n271\n00:18:36.734 --> 00:18:38.886\nyou just willy nilly do it.\n&gt;&gt; Awesome stuff,\n\n272\n00:18:38.886 --> 00:18:41.520\nPython data model,\nthere is a lot of episodes.\n\n273\n00:18:41.520 --> 00:18:44.530\nMake sure you see every single one of\nthem, because Justin's done a very good\n\n274\n00:18:44.530 --> 00:18:47.704\njob putting this together for you, and\nit'll help you out now and in the future.\n\n275\n00:18:47.704 --> 00:18:51.165\nWhile you're in the course library,\nthere's thousands of other videos too, and\n\n276\n00:18:51.165 --> 00:18:52.460\nthey will help you go further.\n\n277\n00:18:52.460 --> 00:18:55.226\nCheck them out,\ntell everybody you know about DevProTV,\n\n278\n00:18:55.226 --> 00:18:56.868\na good dev pro is always learning.\n\n279\n00:18:56.868 --> 00:18:59.494\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n280\n00:18:59.494 --> 00:19:00.898\n&gt;&gt; And we will see you soon.\n\n281\n00:19:00.898 --> 00:19:05.714\n[MUSIC]\n\n",
          "vimeoId": "252906479"
        },
        {
          "description": "In this episode, Justin and Zach add the ability to multiply two custom objects using the \\_\\_mul\\_\\_, \\_\\_rmul\\_\\_, and \\_\\_imul\\_\\_ methods.",
          "length": "885",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-3-1-multiplying-012418-PGM.00_14_44_24.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-3-1-multiplying-012418-PGM.00_14_44_24.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-3-1-multiplying-012418-PGM.00_14_44_24.Still001-sm.jpg",
          "title": "Multiplying",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.698 --> 00:00:14.918\nHello, and thank you for\nwatching DEVPro.TV,\n\n3\n00:00:14.918 --> 00:00:16.660\nhelping you learn everywhere you go.\n\n4\n00:00:16.660 --> 00:00:17.884\nI'm your host, Zach Memos.\n\n5\n00:00:17.884 --> 00:00:20.550\nAs we continue on with Python Data Model.\n\n6\n00:00:20.550 --> 00:00:23.430\nThis episode is multiplying, that's right,\n\n7\n00:00:23.430 --> 00:00:25.520\nwe're gonna be multiplying\nwith Justin Dennison.\n\n8\n00:00:25.520 --> 00:00:27.372\nJustin, great to see you again,\nthanks for being here.\n\n9\n00:00:27.372 --> 00:00:29.654\n&gt;&gt; It is good to be back Zach,\nand how are you today?\n\n10\n00:00:29.654 --> 00:00:33.952\n&gt;&gt; I am happy to be here and happy to be\nworking with you again, and multiplying.\n\n11\n00:00:33.952 --> 00:00:35.521\nHow does it work within\nthe Python Data Model?\n\n12\n00:00:35.521 --> 00:00:39.998\n&gt;&gt; So multiplying, just like we've\nseen in the past couple of episodes.\n\n13\n00:00:39.998 --> 00:00:42.990\nWell, it seems to be a numeric operation.\n\n14\n00:00:42.990 --> 00:00:46.390\nBut there may be even some tricks\nhere that you didn't know about,\n\n15\n00:00:46.390 --> 00:00:51.940\nthat you learned about Python outside\nof the scope of well, overwriting them.\n\n16\n00:00:51.940 --> 00:00:56.340\nSo we're gonna be overwriting the\nmultiplication operator in this episode.\n\n17\n00:00:56.340 --> 00:00:59.640\n&gt;&gt; Okay.\n&gt;&gt; But it does have some handy tricks,\n\n18\n00:00:59.640 --> 00:01:04.759\nother than like subtract and\nadd, it’s kind of like rinse and\n\n19\n00:01:04.759 --> 00:01:06.504\nrepeat of that-\n&gt;&gt; Yes.\n\n20\n00:01:06.504 --> 00:01:07.049\n&gt;&gt; Okay?\n\n21\n00:01:07.049 --> 00:01:09.471\nSo I’m gonna let you kind of think about,\n\n22\n00:01:09.471 --> 00:01:12.460\nwhat are the methods\nJustin’s going to override?\n\n23\n00:01:14.030 --> 00:01:15.180\nWho knows?\n\n24\n00:01:16.300 --> 00:01:19.010\nBut before we do that,\nlet’s do a little bit of exploration.\n\n25\n00:01:19.010 --> 00:01:22.559\nCuz I always like to bring these up,\nthe thing about ideas about what is\n\n26\n00:01:22.559 --> 00:01:25.163\na meaningful use of\nthe multiplication operator?\n\n27\n00:01:25.163 --> 00:01:30.206\nSo let's go ahead and take a look at the\nscreen here, and we have python3, awesome.\n\n28\n00:01:30.206 --> 00:01:34.403\nWell we all know that 3 * 2 is 6, right?\n\n29\n00:01:34.403 --> 00:01:39.530\nThat makes sense, or 20 * 5 is well, 100.\n\n30\n00:01:39.530 --> 00:01:44.400\nBut if I do something like this, 'a' * 5.\n\n31\n00:01:44.400 --> 00:01:47.805\nNow Zach I know,\nknows a little bit about programming,\n\n32\n00:01:47.805 --> 00:01:51.948\nthat's perfectly fine,\nbased on all of our experiences thus far.\n\n33\n00:01:51.948 --> 00:01:54.732\nYou think this is gonna work or\nit's going to fail?\n\n34\n00:01:54.732 --> 00:01:56.575\n&gt;&gt; I think it might fail.\n\n35\n00:01:56.575 --> 00:01:59.260\n&gt;&gt; And most other languages,\nthat would make sense.\n\n36\n00:01:59.260 --> 00:02:01.900\nI'm taking our string,\nI'm multiplying by 5, are you ready Zach?\n\n37\n00:02:01.900 --> 00:02:03.422\n&gt;&gt; Yes.\n&gt;&gt; And it doesn't.\n\n38\n00:02:03.422 --> 00:02:04.150\n&gt;&gt; My goodness.\n\n39\n00:02:04.150 --> 00:02:07.375\n&gt;&gt; So multiplying the case of a string\nbeing first and then some number,\n\n40\n00:02:07.375 --> 00:02:09.829\nit repeats that string\nthat number of times.\n\n41\n00:02:09.829 --> 00:02:10.544\n&gt;&gt; Wow, okay.\n\n42\n00:02:10.544 --> 00:02:11.277\n&gt;&gt; Which is kind of wierd.\n\n43\n00:02:11.277 --> 00:02:14.846\nThis is atypical, I will say in\nother programming languages I'm in,\n\n44\n00:02:14.846 --> 00:02:17.264\nif you take a string and\nmultiply it by a number,\n\n45\n00:02:17.264 --> 00:02:20.606\nyou'll get things like not a number or\nsomething of that nature.\n\n46\n00:02:20.606 --> 00:02:21.975\n&gt;&gt; You'll get a cattywampus.\n\n47\n00:02:21.975 --> 00:02:22.712\n&gt;&gt; A cattywampus.\n\n48\n00:02:22.712 --> 00:02:25.374\n&gt;&gt; [LAUGH]\n&gt;&gt; He loves that word, I tell you,\n\n49\n00:02:25.374 --> 00:02:27.078\nI can't even spell that word.\n\n50\n00:02:27.078 --> 00:02:27.647\n&gt;&gt; It's the word of the day.\n\n51\n00:02:27.647 --> 00:02:29.918\n[LAUGH]\n&gt;&gt; C, A, D, D, I, E?\n\n52\n00:02:29.918 --> 00:02:31.050\n&gt;&gt; T, T.\n\n53\n00:02:31.050 --> 00:02:33.247\n&gt;&gt; Okay.\n&gt;&gt; Y, W, A, M, P, U, S.\n\n54\n00:02:33.247 --> 00:02:35.502\n&gt;&gt; And it means a mess,\nit means messed up.\n\n55\n00:02:35.502 --> 00:02:37.062\n&gt;&gt; So, but not in Python.\n\n56\n00:02:37.062 --> 00:02:37.662\n&gt;&gt; Not in Python.\n\n57\n00:02:37.662 --> 00:02:42.137\n&gt;&gt; Yes, the kinda repaeted character.\n\n58\n00:02:42.137 --> 00:02:42.716\n&gt;&gt; Cool.\n\n59\n00:02:42.716 --> 00:02:49.178\n&gt;&gt; If I do abc * 5,\nI get abcabcabc, right?\n\n60\n00:02:49.178 --> 00:02:51.836\nOkay, now if I flip those on their end,\n\n61\n00:02:51.836 --> 00:02:55.970\nthis is where it may not\nbe immediately evident.\n\n62\n00:02:55.970 --> 00:02:58.874\nThis is going to try 5,\n\n63\n00:02:58.874 --> 00:03:03.822\nwhich is an integer, multiply string.\n\n64\n00:03:03.822 --> 00:03:06.879\nAnd now Zach, I'm gonna come back to is\nit gonna fail or is it gonna succeed?\n\n65\n00:03:06.879 --> 00:03:08.990\n&gt;&gt; Fail.\n\n66\n00:03:08.990 --> 00:03:10.990\n&gt;&gt; And it succeeds again.\n\n67\n00:03:10.990 --> 00:03:14.029\n&gt;&gt; [LAUGH]\n&gt;&gt; Because it's not defined on integers,\n\n68\n00:03:14.029 --> 00:03:17.399\nbut then what it does is it comes over and\ngoes, all right, that failed,\n\n69\n00:03:17.399 --> 00:03:18.690\nlet me try-\n&gt;&gt; Okay.\n\n70\n00:03:18.690 --> 00:03:21.044\n&gt;&gt; The other one, okay?\n\n71\n00:03:21.044 --> 00:03:24.148\n&gt;&gt; Now- [CROSSTALK]\n&gt;&gt; That is different.\n\n72\n00:03:24.148 --> 00:03:24.682\n&gt;&gt; Yeah.\n\n73\n00:03:24.682 --> 00:03:25.960\n&gt;&gt; It's opposite of what you think.\n\n74\n00:03:25.960 --> 00:03:29.110\n&gt;&gt; Yeah, it's opposite of what you,\nand I'm actually with you, Zach.\n\n75\n00:03:29.110 --> 00:03:33.060\nEven if I knew about the first one\nwhere I have string times the number,\n\n76\n00:03:33.060 --> 00:03:34.900\nI would expect the opposite to fail.\n\n77\n00:03:34.900 --> 00:03:36.735\nI'm like well,\nthat's not really meaningful.\n\n78\n00:03:36.735 --> 00:03:39.793\nBut what they're saying is multiplication,\nright?\n\n79\n00:03:39.793 --> 00:03:43.568\nMultiply, they multiple operators,\nit's not multiplication as we know it.\n\n80\n00:03:43.568 --> 00:03:44.135\n&gt;&gt; No.\n\n81\n00:03:44.135 --> 00:03:49.384\n&gt;&gt; Is defined if I have a number and\na string this is what they do, okay?\n\n82\n00:03:49.384 --> 00:03:52.937\nNow okay,\nlet's try a few other things here, so\n\n83\n00:03:52.937 --> 00:03:56.328\nif I have x which is [1, 2, 3] all right?\n\n84\n00:03:56.328 --> 00:04:01.839\nThat's a list, x * 2,\nI actually get the string or\n\n85\n00:04:01.839 --> 00:04:06.739\nexcuse me,\nthe list repeated within itself.\n\n86\n00:04:06.739 --> 00:04:07.275\n&gt;&gt; Right.\n\n87\n00:04:07.275 --> 00:04:12.058\n&gt;&gt; So if I need [1, 2,\n3] copied 20 times, I say [1,\n\n88\n00:04:12.058 --> 00:04:16.296\n2, 3 * 20] and\nI get them 20 times repeated.\n\n89\n00:04:16.296 --> 00:04:17.615\n&gt;&gt; That make sense.\n&gt;&gt; Just like if there were strings.\n\n90\n00:04:17.615 --> 00:04:18.366\n&gt;&gt; Right.\n\n91\n00:04:18.366 --> 00:04:21.424\n&gt;&gt; Now [COUGH] following the string logic,\n\n92\n00:04:21.424 --> 00:04:25.697\nI would expect this to also work,\nand it does, right?\n\n93\n00:04:25.697 --> 00:04:29.110\nSo the collections are very similar.\n\n94\n00:04:29.110 --> 00:04:34.647\nLet's look at a set(x), and\na set is based on membership practices,\n\n95\n00:04:34.647 --> 00:04:37.151\nthere's no guaranteed order.\n\n96\n00:04:37.151 --> 00:04:41.332\nSo it kinds looks like a list, but\nit doesn't behave like a list.\n\n97\n00:04:41.332 --> 00:04:47.815\nIf I do 2 * x, that actually fails,\nthat has no meaning.\n\n98\n00:04:47.815 --> 00:04:49.040\n&gt;&gt; Okay.\n&gt;&gt; And here’s why.\n\n99\n00:04:50.520 --> 00:04:53.230\nA list, you can have repeated elements.\n\n100\n00:04:53.230 --> 00:04:56.560\nIn a set,\nyou can not have repeated elements.\n\n101\n00:04:56.560 --> 00:05:02.070\nSo it’s not meaningful to be able to\nduplicate those respective pieces, okay?\n\n102\n00:05:02.070 --> 00:05:04.341\nSo that's some interesting things.\n\n103\n00:05:04.341 --> 00:05:05.269\n&gt;&gt; That's how you can get it to break.\n\n104\n00:05:05.269 --> 00:05:07.383\n&gt;&gt; Yeah, you get it to break that way.\n\n105\n00:05:07.383 --> 00:05:10.027\nSo let's clear out, and you know what?\n\n106\n00:05:10.027 --> 00:05:14.552\nI always like to bring in dates\nbecause those are very relatable.\n\n107\n00:05:14.552 --> 00:05:18.909\nSo from datetime import datetime, Like so.\n\n108\n00:05:18.909 --> 00:05:25.040\nAnd well, I'm just gonna say\nthe day time is datetime.now, okay?\n\n109\n00:05:25.040 --> 00:05:28.852\nSo that's right now, datetime there it is.\n\n110\n00:05:28.852 --> 00:05:32.839\nAll right, so dt * 10.\n\n111\n00:05:32.839 --> 00:05:38.035\nIf I try to think of something that\nmakes sense, like if I have a date and\n\n112\n00:05:38.035 --> 00:05:42.014\nI'm multiply by number what\nwould that actually do?\n\n113\n00:05:42.014 --> 00:05:44.970\nI can't think of anything that,\nthat would be meaningful for.\n\n114\n00:05:44.970 --> 00:05:46.153\n&gt;&gt; No.\n&gt;&gt; And as a matter of fact,\n\n115\n00:05:46.153 --> 00:05:46.821\nthat doesn't work.\n\n116\n00:05:46.821 --> 00:05:47.669\n&gt;&gt; [LAUGH] It's not meaningful.\n\n117\n00:05:47.669 --> 00:05:49.120\n&gt;&gt; It's not meaningful.\n\n118\n00:05:49.120 --> 00:05:51.014\nWhat if I reversed it, is that meaningful?\n\n119\n00:05:51.014 --> 00:05:57.084\nIf I was like well, 10 * dt?\n\n120\n00:05:57.084 --> 00:05:58.189\nThat's also not meaningful.\n\n121\n00:05:58.189 --> 00:06:00.680\n&gt;&gt; No.\n&gt;&gt; So it's the exact same thing.\n\n122\n00:06:00.680 --> 00:06:03.880\nSo there are times where it's meaningful\nand times where it's not, right?\n\n123\n00:06:03.880 --> 00:06:07.792\nIt's kind of a repeated thing with\nall of these overrided operators.\n\n124\n00:06:07.792 --> 00:06:13.100\nBut with that said, I think it's time\nto actually start overriding ours.\n\n125\n00:06:13.100 --> 00:06:18.359\nSo let's grab that subtracting one,\nand let's just put it over in,\n\n126\n00:06:18.359 --> 00:06:21.540\nyou gotta spell multiplying correctly.\n\n127\n00:06:21.540 --> 00:06:25.842\nMultiplying.py just like so,\nand multiplying.\n\n128\n00:06:29.244 --> 00:06:33.630\nAnd bring it down,\ngot rid of it, beautiful.\n\n129\n00:06:33.630 --> 00:06:35.610\nAnd let's come back up here.\n\n130\n00:06:35.610 --> 00:06:38.537\nSo we're just starting out\nwith our standard point.\n\n131\n00:06:38.537 --> 00:06:45.302\nAnd now we'll look at this,\nwe may even try another one.\n\n132\n00:06:45.302 --> 00:06:49.750\nTry something a little bit different\nof our own, other than a point.\n\n133\n00:06:49.750 --> 00:06:54.322\nSo if I have dunder, I wonder what method\n\n134\n00:06:54.322 --> 00:06:59.036\nname that's going to be that I override.\n\n135\n00:06:59.036 --> 00:07:01.106\nSo you've had some time to think about it.\n\n136\n00:07:01.106 --> 00:07:02.746\nWe're about to find out.\n\n137\n00:07:02.746 --> 00:07:03.828\nZach, do you have a guess?\n\n138\n00:07:03.828 --> 00:07:05.148\n&gt;&gt; Mult?\n\n139\n00:07:05.148 --> 00:07:07.173\n&gt;&gt; That's actually a really good guess.\n\n140\n00:07:07.173 --> 00:07:08.851\n&gt;&gt; [LAUGH]\n&gt;&gt; It's a really good guess.\n\n141\n00:07:08.851 --> 00:07:09.634\n&gt;&gt; It has M-U-L in there.\n\n142\n00:07:09.634 --> 00:07:10.333\n&gt;&gt; It is M-U-L.\n\n143\n00:07:10.333 --> 00:07:11.939\n&gt;&gt; Yeah, yeah.\n\n144\n00:07:11.939 --> 00:07:15.107\n&gt;&gt; He's like I was so close,\nI was one letter off.\n\n145\n00:07:15.107 --> 00:07:17.195\n&gt;&gt; [LAUGH]\n&gt;&gt; Well.\n\n146\n00:07:17.195 --> 00:07:19.876\n&gt;&gt; Well, I'm from Iowa, and\nin Iowa we would have said Mult.\n\n147\n00:07:19.876 --> 00:07:22.548\n[LAUGH]\n&gt;&gt; [LAUGH] It's perfectly okay, and\n\n148\n00:07:22.548 --> 00:07:24.967\nwe're gonna look at other, right?\n\n149\n00:07:24.967 --> 00:07:28.578\nAnd so\nwe could add additional logic here, but\n\n150\n00:07:28.578 --> 00:07:33.494\nfor a particular point,\nI'm just gonna say to keep it simple.\n\n151\n00:07:33.494 --> 00:07:37.971\nI'm gonna say, all right,\nwell if mul is this,\n\n152\n00:07:37.971 --> 00:07:45.417\nI'm gonna say self.x * other.x,\nself.y * other.y, just like so, okay?\n\n153\n00:07:45.417 --> 00:07:49.527\nNow, If it is an instance,\n\n154\n00:07:49.527 --> 00:07:54.800\njust to reduce a little bit of\nthe else if and shenanigans.\n\n155\n00:07:54.800 --> 00:07:57.489\nIf other is an int or\n\n156\n00:07:57.489 --> 00:08:02.840\na float, Is that four ways?\n\n157\n00:08:02.840 --> 00:08:03.880\nOne, two, three, four.\n\n158\n00:08:03.880 --> 00:08:04.407\nThere we go.\n\n159\n00:08:04.407 --> 00:08:05.191\n&gt;&gt; There we go.\n\n160\n00:08:05.191 --> 00:08:09.561\n&gt;&gt; Point(self.x * other,\n\n161\n00:08:09.561 --> 00:08:12.981\nself.y * other).\n\n162\n00:08:12.981 --> 00:08:19.109\nNow, it's kind of repetitive.\n\n163\n00:08:19.109 --> 00:08:22.264\nThat's true, but\nif you're doing any kind of abstraction,\n\n164\n00:08:22.264 --> 00:08:24.336\nmaybe you're doing some simulations.\n\n165\n00:08:24.336 --> 00:08:26.617\nHaving all of these defined for\n\n166\n00:08:26.617 --> 00:08:30.660\nthe operators can make\noperating on points very easy.\n\n167\n00:08:30.660 --> 00:08:32.775\nYou just go, well I need to\nadd these two points together.\n\n168\n00:08:32.775 --> 00:08:34.851\nI need to multiply these\ntwo points together.\n\n169\n00:08:34.851 --> 00:08:37.382\nI need to multiply this point by 5.\n\n170\n00:08:37.382 --> 00:08:41.190\nI'm using points, but\nit could be vectors, right?\n\n171\n00:08:41.190 --> 00:08:45.220\nVectors with a direction and such, okay?\n\n172\n00:08:45.220 --> 00:08:48.885\nNow, okay, that's good to go.\n\n173\n00:08:48.885 --> 00:08:54.165\nAnd while we're here, so\nwe can test, let's rmul.\n\n174\n00:08:54.165 --> 00:08:55.721\n&gt;&gt; I was just gonna say,\nthere must be an rmul.\n\n175\n00:08:55.721 --> 00:08:58.703\n&gt;&gt; Yeah, there has to be an rmul.\n\n176\n00:08:58.703 --> 00:09:02.862\nSo (self, other) and this is one of those\nthings you'll notice for strings and\n\n177\n00:09:02.862 --> 00:09:04.897\nlists, it didn't matter what order.\n\n178\n00:09:04.897 --> 00:09:11.012\nAnd the reason being is from a context\nbasis, if I say, what's 2 times 3?\n\n179\n00:09:11.012 --> 00:09:11.564\nWell, that's 6.\n\n180\n00:09:11.564 --> 00:09:12.645\nWhat's 3 times 2?\n\n181\n00:09:12.645 --> 00:09:14.210\nIt's also 6.\n\n182\n00:09:14.210 --> 00:09:15.585\nThose are one of those reversible-\n&gt;&gt; Right.\n\n183\n00:09:15.585 --> 00:09:17.225\n&gt;&gt; Operations.\n\n184\n00:09:17.225 --> 00:09:20.342\nSo you should have reversible operations.\n\n185\n00:09:20.342 --> 00:09:21.025\n&gt;&gt; Yeah.\n\n186\n00:09:21.025 --> 00:09:28.030\n&gt;&gt; And just to make it simple, to be\nexplicit, I do this for being explicit.\n\n187\n00:09:28.030 --> 00:09:32.919\nThis pretty much happens\nanyway if you don't do rmul,\n\n188\n00:09:32.919 --> 00:09:36.014\nbut I'm gonna say add (other).\n\n189\n00:09:36.014 --> 00:09:38.687\nNot add, excuse me, don't do that.\n\n190\n00:09:38.687 --> 00:09:39.958\n&gt;&gt; No.\n&gt;&gt; Cuz that's really hard to reason him.\n\n191\n00:09:39.958 --> 00:09:41.956\n&gt;&gt; [LAUGH]\n&gt;&gt; I would say mul.\n\n192\n00:09:41.956 --> 00:09:43.037\n&gt;&gt; There we go.\n\n193\n00:09:43.037 --> 00:09:48.714\n&gt;&gt; And then what do you\nthink the last one is, Zach?\n\n194\n00:09:48.714 --> 00:09:52.379\n&gt;&gt; Let's see, so we have mul,\nwe have rmul, we have smul?\n\n195\n00:09:52.379 --> 00:09:55.027\n&gt;&gt; That would make, and\nwhat would s stand for?\n\n196\n00:09:55.027 --> 00:09:56.083\n&gt;&gt; Subtract?\n\n197\n00:09:56.083 --> 00:10:01.649\n&gt;&gt; Okay, what about inplace imul?\n\n198\n00:10:01.649 --> 00:10:04.481\nYeah, we always have to\nhave that inplace operator.\n\n199\n00:10:04.481 --> 00:10:08.060\nAnd actually this doesn't\nneed to happen [CROSSTALK],\n\n200\n00:10:08.060 --> 00:10:12.824\nbecause we could have times equals,\nwhich will reassign the variable.\n\n201\n00:10:12.824 --> 00:10:16.050\nIf I do mul and\ncertain things are fulfilled, and\n\n202\n00:10:16.050 --> 00:10:21.500\nI wanted to be commutative back and\nforth, everything should be fine, right?\n\n203\n00:10:21.500 --> 00:10:26.447\nVariable on the left that contains\na point, times equals, either a float,\n\n204\n00:10:26.447 --> 00:10:29.784\nan int, or another point and\nthen it just happens.\n\n205\n00:10:29.784 --> 00:10:32.450\n&gt;&gt; Justin, will there be an smul?\n\n206\n00:10:32.450 --> 00:10:35.630\n&gt;&gt; There is not in a standard data model,\nand\n\n207\n00:10:35.630 --> 00:10:37.130\nthat actually brings up\nan interesting point.\n\n208\n00:10:37.130 --> 00:10:41.003\nSome people are like should I use double\nunderscore something double underscore?\n\n209\n00:10:41.003 --> 00:10:45.850\nYou can, and I've actually open source\nprojects use it for very particular stuff.\n\n210\n00:10:47.320 --> 00:10:49.285\nI would be weary about\ngoing just willy-nilly.\n\n211\n00:10:49.285 --> 00:10:55.703\nBecause it may become confused within\nyour project for a standard Python thing.\n\n212\n00:10:55.703 --> 00:10:56.334\n&gt;&gt; Right.\n\n213\n00:10:56.334 --> 00:11:02.427\n&gt;&gt; Especially depending on if you're\nnew to Python, intermediate, advanced.\n\n214\n00:11:02.427 --> 00:11:03.872\nSo there is a time and place for it.\n\n215\n00:11:03.872 --> 00:11:05.943\nCase in point,\nthere's a project called NumPy,\n\n216\n00:11:05.943 --> 00:11:07.534\nthat actually does a lot of numerics.\n\n217\n00:11:07.534 --> 00:11:08.040\n&gt;&gt; Okay.\n\n218\n00:11:08.040 --> 00:11:13.469\n&gt;&gt; And they added a double underscore,\narray, underscore, interface,\n\n219\n00:11:13.469 --> 00:11:18.550\ndouble underscore,\nthat determines certain particular things.\n\n220\n00:11:19.820 --> 00:11:25.070\nThat's not by default in NumPy, or\nexcuse me, in Python, but it is in NumPy.\n\n221\n00:11:25.070 --> 00:11:28.294\nAnd they use it for\nalso other projects to say, hey,\n\n222\n00:11:28.294 --> 00:11:32.855\nif it has this then it behave like\na NumPy array, and everything's good.\n\n223\n00:11:32.855 --> 00:11:36.584\nIt's a really complicated project, so\nI'm definitely over simplifying it, and\n\n224\n00:11:36.584 --> 00:11:37.873\nmaybe not doing it justice.\n\n225\n00:11:37.873 --> 00:11:40.513\nBut that is one example that I\nknow of where it's something like.\n\n226\n00:11:40.513 --> 00:11:42.153\n&gt;&gt; But\nit makes us curious about NumPy more.\n\n227\n00:11:42.153 --> 00:11:45.898\n&gt;&gt; Yeah, there's a taste,\nit sounds like my taste.\n\n228\n00:11:45.898 --> 00:11:46.441\n&gt;&gt; Yum yum.\n\n229\n00:11:46.441 --> 00:11:47.049\n&gt;&gt; Yeah.\n\n230\n00:11:47.049 --> 00:11:51.514\n&gt;&gt; [LAUGH]\n&gt;&gt; So we're gonna return self.__mul__, and\n\n231\n00:11:51.514 --> 00:11:56.286\nI'm just deligating back to\nmultiplication, like so, okay?\n\n232\n00:11:56.286 --> 00:11:58.615\nNow, [COUGH] you have seen\nin that previous episodes,\n\n233\n00:11:58.615 --> 00:12:01.536\nI talked about a variety of ways to\nadd additional [INAUDIBLE] here.\n\n234\n00:12:01.536 --> 00:12:02.281\n&gt;&gt; Yeah.\n\n235\n00:12:02.281 --> 00:12:04.467\n&gt;&gt; And things that you can do, but\n\n236\n00:12:04.467 --> 00:12:09.580\nnow we're just kind of making\nthese a little more simplistic.\n\n237\n00:12:09.580 --> 00:12:11.814\nSo let's see if those actually work.\n\n238\n00:12:11.814 --> 00:12:16.169\nSo python3 -i and mulplying -1,\n\n239\n00:12:16.169 --> 00:12:20.531\nthat's not p1, p1, p2 and p3.\n\n240\n00:12:20.531 --> 00:12:24.023\nNow multiplication has some\ninteresting properties of zero.\n\n241\n00:12:24.023 --> 00:12:25.840\nZero times anything is zero.\n\n242\n00:12:25.840 --> 00:12:30.897\nSo I'm actually gonna us p2 and p3,\nbecause if I did zero, same thing.\n\n243\n00:12:30.897 --> 00:12:37.668\nSo p2 times p3, well it did mutliply,\nlike I anticipated it would.\n\n244\n00:12:37.668 --> 00:12:40.866\np2 * 100, it works.\n\n245\n00:12:40.866 --> 00:12:43.516\nWhat about 100 * p2?\n\n246\n00:12:43.516 --> 00:12:44.170\nThat also works.\n\n247\n00:12:44.170 --> 00:12:44.714\n&gt;&gt; Yeah, commutative, right.\n\n248\n00:12:44.714 --> 00:12:46.835\n&gt;&gt; It's commutative, right?\n\n249\n00:12:46.835 --> 00:12:51.769\nWhat about p1,\nwell that's never gonna work, right?\n\n250\n00:12:51.769 --> 00:12:56.857\np2 * =, and Zach,\nwhat's your favorite number?\n\n251\n00:12:56.857 --> 00:12:57.571\n&gt;&gt; 8.\n\n252\n00:12:57.571 --> 00:13:04.979\n&gt;&gt; 8, and so now I have p2, it has in\nplace multiply reassign that back.\n\n253\n00:13:04.979 --> 00:13:07.318\nEverything's good to go, okay?\n\n254\n00:13:07.318 --> 00:13:11.774\nSo there we kinda have our\nmultiplication operators.\n\n255\n00:13:11.774 --> 00:13:13.624\n&gt;&gt; Correct.\n&gt;&gt; Now as we've seen,\n\n256\n00:13:13.624 --> 00:13:17.895\nit doesn't necessarily always\nhave to occur with numerics.\n\n257\n00:13:17.895 --> 00:13:20.366\n&gt;&gt; Right.\n&gt;&gt; So do keep that in mind,\n\n258\n00:13:20.366 --> 00:13:25.113\nwhat are some other things\nthat might be meaningful?\n\n259\n00:13:25.113 --> 00:13:26.043\nWell a list.\n\n260\n00:13:26.043 --> 00:13:27.491\n&gt;&gt; Right a list,\nthat's what you're saying, yeah.\n\n261\n00:13:27.491 --> 00:13:30.095\n&gt;&gt; Strings, repitition.\n\n262\n00:13:30.095 --> 00:13:34.189\nWhat are some other things\nthat may be repetitive.\n\n263\n00:13:34.189 --> 00:13:37.183\nWell for you to find out,\nkind of play around with this,\n\n264\n00:13:37.183 --> 00:13:38.920\nsee how things work out for you.\n\n265\n00:13:38.920 --> 00:13:43.649\nAnd well, you never know when this is just\ngoing to be handy to clean up your code.\n\n266\n00:13:43.649 --> 00:13:47.252\nIt'll be all great, and\nwe used to be like that is so\n\n267\n00:13:47.252 --> 00:13:52.189\nmuch nicer to read and reason about,\nbut don't do it without just.\n\n268\n00:13:52.189 --> 00:13:56.136\n&gt;&gt; And it's nat all cattywampus\nmultiplying inside the Python Data Model.\n\n269\n00:13:56.136 --> 00:13:57.818\nWonderful episode, as usual Justin.\n\n270\n00:13:57.818 --> 00:13:58.385\nThanks very much.\n\n271\n00:13:58.385 --> 00:14:00.283\nAnything else you'd like\nto say before we move?\n\n272\n00:14:00.283 --> 00:14:03.123\n&gt;&gt; Yeah,\nI think we're on a pretty good pace here.\n\n273\n00:14:03.123 --> 00:14:06.167\n&gt;&gt; Yeah.\n&gt;&gt; These are special methods we can use to\n\n274\n00:14:06.167 --> 00:14:09.382\nour advantage when they are appropriate,\nand\n\n275\n00:14:09.382 --> 00:14:14.173\nthen otherwise we should probably\njust leave them alone otherwise.\n\n276\n00:14:14.173 --> 00:14:16.343\n&gt;&gt; Justin does a wonderful\njob with everything he does.\n\n277\n00:14:16.343 --> 00:14:18.306\nAnd the Python Data Model\nseries is fantastic.\n\n278\n00:14:18.306 --> 00:14:21.865\nMake sure you watch every episode, and\nwhile you're in that course library.\n\n279\n00:14:21.865 --> 00:14:23.489\nCheck out the other thousands and\n\n280\n00:14:23.489 --> 00:14:26.625\nthousands of other videos that\nare there to help you go further.\n\n281\n00:14:26.625 --> 00:14:29.257\nAnd tell everybody you\nknow about DEVPro TV.\n\n282\n00:14:29.257 --> 00:14:30.661\nA good DEVPro is always learning.\n\n283\n00:14:30.661 --> 00:14:31.421\nThanks for watching.\n\n284\n00:14:31.421 --> 00:14:32.237\nI'm Zack Memos.\n\n285\n00:14:32.237 --> 00:14:33.045\n&gt;&gt; And I'm Justin Dennison.\n\n286\n00:14:33.045 --> 00:14:34.869\n&gt;&gt; And we will see you soon!\n\n287\n00:14:34.869 --> 00:14:40.201\n[MUSIC]\n\n",
          "vimeoId": "252906960"
        },
        {
          "description": "In this episode, Justin and Zach review some of the \"gotchas\" with division in the Python world. Moreover, Justin demonstrates how custom objects can be divided using the \\_\\_floordiv\\_\\_, \\_\\_truediv\\_\\_, and associated methods.",
          "length": "1559",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-4-1-dividing-012418-PGM.00_29_11_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-4-1-dividing-012418-PGM.00_29_11_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-4-1-dividing-012418-PGM.00_29_11_27.Still001-sm.jpg",
          "title": "Dividing",
          "transcript": "WEBVTT\n\n1\n00:00:00.397 --> 00:00:10.397\n[MUSIC]\n\n2\n00:00:12.831 --> 00:00:14.765\nHello, and thank you for\nwatching DEVPRO.TV.\n\n3\n00:00:14.765 --> 00:00:16.456\nHelping you learn wherever you go.\n\n4\n00:00:16.456 --> 00:00:20.260\nI am your host Zach Memos, who's speaking\nto anyone with Python data model.\n\n5\n00:00:20.260 --> 00:00:23.096\nAnd this episode is dividing.\n\n6\n00:00:23.096 --> 00:00:25.241\nIt's a little bit different than\nwhat we've looked at already,\n\n7\n00:00:25.241 --> 00:00:28.013\nyou know the multiplying, the subtracting,\nthe adding, a little bit different.\n\n8\n00:00:28.013 --> 00:00:31.880\nSo Justin Dennison is here show us\nthe way, Justin, great to see you.\n\n9\n00:00:31.880 --> 00:00:33.910\n&gt;&gt; It is great to be back, Zach, and\n\n10\n00:00:33.910 --> 00:00:36.330\nI hope you're doing well today, are you?\n&gt;&gt; I am doing well, and\n\n11\n00:00:36.330 --> 00:00:39.790\nyou had mentioned to me earlier\nthat dividing is a little tricky.\n\n12\n00:00:39.790 --> 00:00:42.444\nThere's some shenanigans going on.\n&gt;&gt; Yeah, yeah.\n\n13\n00:00:42.444 --> 00:00:45.586\n[INAUDIBLE] You commandeered\nmy word there, Zach.\n\n14\n00:00:45.586 --> 00:00:46.476\n[LAUGH] You commandeered my word for\na moment.\n\n15\n00:00:46.476 --> 00:00:47.382\n&gt;&gt; I kidnapped it for a moment.\n\n16\n00:00:47.382 --> 00:00:49.519\n&gt;&gt; You're like, this is my word,\n\n17\n00:00:49.519 --> 00:00:50.870\nI'm gonna take it.\n\n18\n00:00:50.870 --> 00:00:54.210\n[LAUGH] So dividing in programming,\nactually in generally,\n\n19\n00:00:54.210 --> 00:00:56.670\nsometimes is a little wonky.\n\n20\n00:00:56.670 --> 00:01:00.580\nIn Java, let's take Java,\nwhere we have explicit types,\n\n21\n00:01:00.580 --> 00:01:05.050\nthese are the types, when I do division\nbetween integers, I get an integer back.\n\n22\n00:01:05.050 --> 00:01:09.027\nSo like,\n3 divided by 2 is just the number 1.\n\n23\n00:01:09.027 --> 00:01:12.950\nIt's not 1.5, and people are like, no,\nif I put it into a calculator, it's 1.5.\n\n24\n00:01:12.950 --> 00:01:14.830\nYeah, that's floating point division.\n\n25\n00:01:16.080 --> 00:01:18.410\nWell, here's some back\nstory on division and\n\n26\n00:01:18.410 --> 00:01:21.958\nthere's a whole bunch of other stuff\nthat we have to talk about, but\n\n27\n00:01:21.958 --> 00:01:27.100\nin Python 2, they actually used that.\n&gt;&gt; Mm-hm.\n\n28\n00:01:27.100 --> 00:01:29.920\n&gt;&gt; If I did division between integers,\n\n29\n00:01:29.920 --> 00:01:31.310\nI got an integer back.\n\n30\n00:01:31.310 --> 00:01:32.600\nWell, 3 divided by 2 is 1.\n\n31\n00:01:33.650 --> 00:01:37.990\nIf I did division between floats or\n\n32\n00:01:37.990 --> 00:01:42.080\nanything that had a float,\nI got a float back.\n\n33\n00:01:42.080 --> 00:01:45.110\nIn Python 3 there were like, so\n\n34\n00:01:45.110 --> 00:01:49.000\nlet's make the default division,\nan actual division sign, a slash.\n\n35\n00:01:50.040 --> 00:01:52.010\nLet's make that true division.\n\n36\n00:01:52.010 --> 00:01:54.590\nNow what they mean by true division is\n\n37\n00:01:54.590 --> 00:01:58.600\nit works just like you would anticipate\nif you put it in a calculator.\n\n38\n00:01:58.600 --> 00:02:03.200\nSo if i do 3 divided by 2 it's not like,\nit's 1.\n\n39\n00:02:03.200 --> 00:02:05.829\nNo, they actually changed that, and\n\n40\n00:02:05.829 --> 00:02:10.275\nit's as a result the Python data\nmodel got tweaked a little bit.\n\n41\n00:02:10.275 --> 00:02:13.344\nPeople still needed the ability\nto do integer division.\n\n42\n00:02:13.344 --> 00:02:15.930\nBecause if you've programmed\nin other languages,\n\n43\n00:02:15.930 --> 00:02:19.760\nyou make use of it in some pretty\nslick ways, maybe not the best ways.\n\n44\n00:02:19.760 --> 00:02:24.010\nBut there are ramifications for having\nintegers versus floating point numbers.\n\n45\n00:02:25.110 --> 00:02:27.900\nAnd so they're like, well,\nwe still need the ability to do\n\n46\n00:02:27.900 --> 00:02:30.850\nwhat is called floor based division or\ninteger division, right?\n\n47\n00:02:30.850 --> 00:02:33.000\nSo I just get the whole number part.\n\n48\n00:02:33.000 --> 00:02:36.990\nAnd not,\nthat is chop off the decimal point.\n\n49\n00:02:36.990 --> 00:02:43.196\nAnd so they added another operator that\nbehaves like the old operator did.\n\n50\n00:02:43.196 --> 00:02:48.099\nBut the old operator actually\ngot redefined to something.\n\n51\n00:02:48.099 --> 00:02:49.255\n&gt;&gt; [LAUGH]\n\n52\n00:02:49.255 --> 00:02:50.330\n&gt;&gt; I'll tell you this.\n\n53\n00:02:50.330 --> 00:02:54.600\nIt's one of the paying points of view if\nyou ever have to take Python code and make\n\n54\n00:02:54.600 --> 00:03:00.110\nit run in Python 3, if doing numerics,\nthen it can jump up and bite you.\n\n55\n00:03:00.110 --> 00:03:04.890\nBecause originally you might be\ndoing division to get indexes for\n\n56\n00:03:04.890 --> 00:03:07.570\nlists or things of that nature.\n\n57\n00:03:07.570 --> 00:03:12.210\nWell, that's all right in Python 2, cuz\nyou're like, division gives me an integer,\n\n58\n00:03:12.210 --> 00:03:13.581\nboom, there's an index.\n\n59\n00:03:13.581 --> 00:03:16.568\nI have to check to see if\nit's out of bounds, but\n\n60\n00:03:16.568 --> 00:03:18.680\nother than that the index works.\n\n61\n00:03:18.680 --> 00:03:20.811\nWell, now If you run that on Python 3,\n\n62\n00:03:20.811 --> 00:03:23.653\nit's going to give you\na floating point number, and\n\n63\n00:03:23.653 --> 00:03:25.754\nthat doesn't index the same way.\n&gt;&gt; Uh-uh.\n\n64\n00:03:25.754 --> 00:03:27.403\n&gt;&gt; So shenanigans.\n\n65\n00:03:27.403 --> 00:03:28.344\n&gt;&gt; And there it is.\n\n66\n00:03:28.344 --> 00:03:29.246\n&gt;&gt; Yeah, yeah.\n\n67\n00:03:29.246 --> 00:03:30.179\nI stole it back.\n\n68\n00:03:30.179 --> 00:03:32.520\nIt's mine now.\n&gt;&gt; [LAUGH] You can keep it.\n\n69\n00:03:32.520 --> 00:03:35.760\n&gt;&gt; And in order to get a full feel of what\n\n70\n00:03:35.760 --> 00:03:41.380\ndivision operators we can\nkind of anticipate, well,\n\n71\n00:03:41.380 --> 00:03:43.560\nwe should probably just do\na little bit of exploration.\n\n72\n00:03:43.560 --> 00:03:45.590\nI'm a big proponent,\nthis is something that I do,\n\n73\n00:03:45.590 --> 00:03:49.540\nwhen I'm trying to get a feel for,\nhow's this gonna work for me?\n\n74\n00:03:49.540 --> 00:03:53.610\nTake some things I know, try them in\nthe context of things that I know.\n\n75\n00:03:53.610 --> 00:03:54.420\nI know numbers.\n\n76\n00:03:54.420 --> 00:04:00.190\nIf you don't know numbers, typically,\nwe have a decent feel for calculators.\n\n77\n00:04:00.190 --> 00:04:04.065\nI'm not saying everybody does and\nif you don't that's perfectly okay,\n\n78\n00:04:04.065 --> 00:04:06.831\nyou're probably not gonna\nbe doing much dividing.\n\n79\n00:04:06.831 --> 00:04:12.411\nBut you should also see, does division\nmake sense in other contexts?\n\n80\n00:04:12.411 --> 00:04:16.444\nSo let's do a little bit of exploration\nand then we're actually gonna have to get\n\n81\n00:04:16.444 --> 00:04:20.502\non with it, because this is one of those\nwhere you're like, I gotta do all this?\n\n82\n00:04:20.502 --> 00:04:22.067\nThis is a lot of work.\n\n83\n00:04:22.067 --> 00:04:24.530\nSo let's go ahead and\ntake a look at the screen here.\n\n84\n00:04:24.530 --> 00:04:28.290\nAnd well,\nlet's just start up a python3 ripple.\n\n85\n00:04:28.290 --> 00:04:29.875\nNow what do I mean by division?\n\n86\n00:04:29.875 --> 00:04:34.080\nSo 3 divided by 2, so that's a slash.\n\n87\n00:04:34.080 --> 00:04:36.180\nThat's the one that also has\nthe question mark on it.\n\n88\n00:04:36.180 --> 00:04:38.490\nIt's usually next to your right Shift key.\n\n89\n00:04:38.490 --> 00:04:40.330\nBut hit Enter, it's 1.5.\n\n90\n00:04:40.330 --> 00:04:44.243\nIn Python 2, that will give you a 1.\n&gt;&gt; Okay.\n\n91\n00:04:44.243 --> 00:04:46.745\n&gt;&gt; Okay, if I now want floor division,\n\n92\n00:04:46.745 --> 00:04:48.845\nthis is called true division,\n\n93\n00:04:48.845 --> 00:04:52.908\nit behaves like you wouldn't\nanticipate on a calculator.\n\n94\n00:04:52.908 --> 00:04:59.904\nIf I do 3//2, I now get what\nthe single slash in Python 2 gave you,\n\n95\n00:04:59.904 --> 00:05:06.800\nso there was like this nice musical\nchairs for operators, okay?\n\n96\n00:05:06.800 --> 00:05:13.400\nAll right, those are effectively\nthe only two division parts,\n\n97\n00:05:14.520 --> 00:05:20.530\nbut along with those is if\nI change the order, right?\n\n98\n00:05:20.530 --> 00:05:21.090\nOkay.\n\n99\n00:05:21.090 --> 00:05:24.340\nThat kinda makes it,\nit's a floating point.\n\n100\n00:05:24.340 --> 00:05:27.384\nBut if I do, 2 // 3, I get 0.\n\n101\n00:05:27.384 --> 00:05:32.077\nBecause 3 does not go into 2 evenly,\nany amount of whole number of times.\n\n102\n00:05:32.077 --> 00:05:33.034\n&gt;&gt; Mm-hm.\n\n103\n00:05:33.034 --> 00:05:39.028\n&gt;&gt; I could also say, like x = 5 and\n\n104\n00:05:39.028 --> 00:05:45.029\nthen x /=3, and that works.\n&gt;&gt; Mh-hm.\n\n105\n00:05:45.029 --> 00:05:46.310\n&gt;&gt; Okay?\n\n106\n00:05:46.310 --> 00:05:50.896\nIf I set x back to five and I say x //=5,\n\n107\n00:05:50.896 --> 00:05:53.523\nthat also works.\n&gt;&gt; Mm-hm.\n\n108\n00:05:53.523 --> 00:05:54.397\n&gt;&gt; But it gives me 1.\n\n109\n00:05:56.828 --> 00:05:58.380\nWell, that makes sense, sorry.\n\n110\n00:05:58.380 --> 00:06:00.520\nI had the wrong number there.\n\n111\n00:06:00.520 --> 00:06:01.600\nYou let me mess up, Zach.\n\n112\n00:06:01.600 --> 00:06:03.078\nI'm gonna blame it on you.\n&gt;&gt; [LAUGH]\n\n113\n00:06:03.078 --> 00:06:07.230\n&gt;&gt; //=3, excuse me.\n\n114\n00:06:07.230 --> 00:06:07.950\nx is still equal.\n\n115\n00:06:07.950 --> 00:06:11.400\nSo whether the // floor division,\n\n116\n00:06:11.400 --> 00:06:15.350\nthen when I say floor\ndivision that's two slashes.\n\n117\n00:06:15.350 --> 00:06:17.330\nTrue division, that's divide.\n\n118\n00:06:17.330 --> 00:06:18.780\nIt's a single slash.\n\n119\n00:06:18.780 --> 00:06:23.460\nIf I leave it ambiguously,\nassume that it's a single divide and\n\n120\n00:06:23.460 --> 00:06:26.540\nthat it is going to be\nfloating point returns.\n\n121\n00:06:26.540 --> 00:06:31.160\nWhat's interesting is if\nI do something like 10/5,\n\n122\n00:06:31.160 --> 00:06:34.840\nthese are both integers, but\nI get a floating point number back.\n\n123\n00:06:36.290 --> 00:06:40.975\nIf I did 10//5,\nthen I'd get an integer back.\n\n124\n00:06:40.975 --> 00:06:44.192\nAnd this is where things got a little\nweird when we're trying to migrate from\n\n125\n00:06:44.192 --> 00:06:45.210\nPython 2 to Python 3.\n\n126\n00:06:45.210 --> 00:06:49.195\nSo, we've hopefully\nstarted to clear that up.\n\n127\n00:06:49.195 --> 00:06:52.359\nI know it's not necessarily the clearest\njust from the brief introduction.\n\n128\n00:06:52.359 --> 00:06:56.404\nBut I'm always a fan of\ntrying out other data types.\n\n129\n00:06:56.404 --> 00:07:03.295\nLet's see, abc / 3, no, doesn't work, oo.\n\n130\n00:07:03.295 --> 00:07:09.600\nIf I try 3 / abc, you're like,\nwell, this looks like algebra.\n\n131\n00:07:09.600 --> 00:07:12.030\nWell, these are text and number.\n\n132\n00:07:12.030 --> 00:07:14.047\nIf I divide, no.\n\n133\n00:07:14.047 --> 00:07:18.144\nI wonder if that's different for //, no.\n\n134\n00:07:18.144 --> 00:07:20.941\nWhat about floor division for that?\n\n135\n00:07:20.941 --> 00:07:23.041\nNo.\n&gt;&gt; Is that because you don't have a value\n\n136\n00:07:23.041 --> 00:07:25.378\nfor abc?\n&gt;&gt; No, actually abc is the value.\n\n137\n00:07:25.378 --> 00:07:30.376\nabc is a string, so the quotes\nactually have the letters a, b, and\n\n138\n00:07:30.376 --> 00:07:31.847\nc in there.\n&gt;&gt; Okay.\n\n139\n00:07:31.847 --> 00:07:33.737\n&gt;&gt; But there's nothing that's meaningful\n\n140\n00:07:33.737 --> 00:07:36.816\nto say, I want to take the number\nthree and divide it by the letter a.\n\n141\n00:07:36.816 --> 00:07:39.391\nThis is where it gets hit\nwhere you're like, well,\n\n142\n00:07:39.391 --> 00:07:42.330\nall through high school they\ntold me about stuff like that.\n\n143\n00:07:42.330 --> 00:07:47.220\nI'm not talking about a variable that is a\nplace holder, I'm talking about an actual,\n\n144\n00:07:47.220 --> 00:07:49.730\nlike it's kind of like saying,\nI have this letter of three.\n\n145\n00:07:49.730 --> 00:07:53.770\nI'm gonna take this page of the book,\nand try to divide that.\n\n146\n00:07:53.770 --> 00:07:56.441\nIt's nonsensical in nature, okay?\n\n147\n00:07:56.441 --> 00:07:58.769\nLet's try it with a couple\nof other data types.\n\n148\n00:07:58.769 --> 00:08:00.474\nIf it doesn't work for string,\n\n149\n00:08:00.474 --> 00:08:04.844\nI've got this funny feeling Had this funny\nfeeling that it may not work for a list.\n\n150\n00:08:04.844 --> 00:08:07.350\nSo x / 3, nope.\n\n151\n00:08:07.350 --> 00:08:09.205\nWhat about 3 / x?\n\n152\n00:08:09.205 --> 00:08:11.560\nWhat about floor division?\n\n153\n00:08:11.560 --> 00:08:17.283\nSo x // 3 and then 3 // x?\n\n154\n00:08:17.283 --> 00:08:18.451\nNo.\n&gt;&gt; No, no, no, no.\n\n155\n00:08:18.451 --> 00:08:19.074\n&gt;&gt; This is not,\n\n156\n00:08:19.074 --> 00:08:20.951\ndoesn't make any sense there either.\n\n157\n00:08:20.951 --> 00:08:26.415\nSo let's not exit, but instead, we\nalways like to try from datetime import.\n\n158\n00:08:26.415 --> 00:08:27.351\n&gt;&gt; I'd figure you'd do that.\n\n159\n00:08:27.351 --> 00:08:34.441\n&gt;&gt; Datetime, so x = datetime.now, x / 3.\n\n160\n00:08:34.441 --> 00:08:39.527\nDoes it make any sense to\ndivide a date by some number?\n\n161\n00:08:39.527 --> 00:08:40.822\nLet's see here.\n\n162\n00:08:40.822 --> 00:08:43.861\nAnd that is also not supported.\n&gt;&gt; It's brokededed.\n\n163\n00:08:43.861 --> 00:08:46.447\n&gt;&gt; It's brokededed.\n\n164\n00:08:46.447 --> 00:08:48.610\nThis is kinda par for\nthe course for division.\n\n165\n00:08:48.610 --> 00:08:53.497\nDivision's one of those things where\nyou're like it's meaningful for numbers,\n\n166\n00:08:53.497 --> 00:08:58.170\nbut I haven't seen a lot of other\ncontext from well the division operator,\n\n167\n00:08:58.170 --> 00:09:00.840\ncouldn't mean that thing, right?\n\n168\n00:09:00.840 --> 00:09:03.370\nNow, I tried it then with a datetime and\na number.\n\n169\n00:09:03.370 --> 00:09:07.092\nWhat if I do x / x?\n\n170\n00:09:07.092 --> 00:09:10.739\nWhat about abc / abc?\n\n171\n00:09:10.739 --> 00:09:17.063\nNo, what about a list\ndivided by another list?\n\n172\n00:09:17.063 --> 00:09:21.244\nNo, so even if the types are the same,\nit's still not, people are like,\n\n173\n00:09:21.244 --> 00:09:22.944\nI don't know what that does.\n\n174\n00:09:22.944 --> 00:09:27.870\nDoesn't mean very much to me,\nso keep that in mind.\n\n175\n00:09:27.870 --> 00:09:30.562\nAlso keep in mind, it's one of those\noperators where the order does matter.\n\n176\n00:09:30.562 --> 00:09:32.947\n2 divided by 3 and\n3 divided by 2 are different.\n\n177\n00:09:32.947 --> 00:09:33.691\n&gt;&gt; They are.\n\n178\n00:09:33.691 --> 00:09:35.690\n&gt;&gt; They are different things.\n\n179\n00:09:35.690 --> 00:09:36.537\nOne is bigger than one.\n\n180\n00:09:36.537 --> 00:09:40.330\nOne is smaller than one in\nthat particular example.\n\n181\n00:09:40.330 --> 00:09:44.225\nI'm not saying that applies to all\ndivision, so keep that in mind.\n\n182\n00:09:44.225 --> 00:09:51.411\nNow because we technically have two\noperators, we can get a lot more methods.\n\n183\n00:09:51.411 --> 00:09:56.910\nAnd they're not necessarily always,\nyou're like what does that do?\n\n184\n00:09:56.910 --> 00:10:01.946\nI've used some terms here to\ntry to get things going, okay?\n\n185\n00:10:01.946 --> 00:10:04.469\nSo let's do this.\n\n186\n00:10:04.469 --> 00:10:08.954\nLet's go cp and multiplying, and\n\n187\n00:10:08.954 --> 00:10:12.364\nlet's go dividing.py.\n\n188\n00:10:12.364 --> 00:10:16.693\nAnd then we'll come into dividing, we'll\nget rid of all this other stuff here.\n\n189\n00:10:16.693 --> 00:10:20.443\nAnd we want to be able to divide points,\ncuz these actually behave like numbers,\n\n190\n00:10:20.443 --> 00:10:21.556\nthis would make sense.\n\n191\n00:10:21.556 --> 00:10:25.429\nI wanna take the xs and\ndivide them the ys and divide them.\n\n192\n00:10:25.429 --> 00:10:27.140\nA further complicating factor.\n\n193\n00:10:28.810 --> 00:10:33.645\nIf I have an x or a y on the bottom,\nthen I can't do that,\n\n194\n00:10:33.645 --> 00:10:38.585\ncuz any number divided by 0,\nit suddenly all blows up,\n\n195\n00:10:38.585 --> 00:10:41.195\nit just doesn't exist.\n&gt;&gt; [LAUGH]\n\n196\n00:10:41.195 --> 00:10:42.177\n&gt;&gt; Your calculator goes,\n\n197\n00:10:42.177 --> 00:10:43.951\nI don't know what you're talking about.\n\n198\n00:10:43.951 --> 00:10:48.170\nI can't take something and\ndivide it into zero parts effectively.\n\n199\n00:10:48.170 --> 00:10:51.982\nIf I have a shoe, I can't go,\nI wanna divide this into zero shoes.\n\n200\n00:10:51.982 --> 00:10:54.542\nWell I have one shoe,\nthat's not physically impossible.\n\n201\n00:10:54.542 --> 00:10:55.390\n&gt;&gt; Impossible.\n\n202\n00:10:55.390 --> 00:10:57.482\n&gt;&gt; So keep that in mind as well and\n\n203\n00:10:57.482 --> 00:11:00.890\nwe'll try to handle that appropriately.\n\n204\n00:11:00.890 --> 00:11:04.260\nSo let's talk about these methods.\n\n205\n00:11:05.850 --> 00:11:08.110\nZach, I'm gonna throw you\nunder the bus a little bit.\n\n206\n00:11:08.110 --> 00:11:09.868\n&gt;&gt; Here we go.\n\n207\n00:11:09.868 --> 00:11:11.801\n&gt;&gt; What would you guess would be one\n\n208\n00:11:11.801 --> 00:11:14.815\nof these dunder methods\nthat I need to implement?\n\n209\n00:11:14.815 --> 00:11:15.585\n&gt;&gt; __div.\n\n210\n00:11:15.585 --> 00:11:20.170\n&gt;&gt; __ div, that makes sense, right?\n\n211\n00:11:20.170 --> 00:11:21.910\nIt's following the exact\nsame pattern that we've\n\n212\n00:11:21.910 --> 00:11:22.660\nseen.\n&gt;&gt; Right.\n\n213\n00:11:22.660 --> 00:11:23.834\n&gt;&gt; But because we have two operators,\n\n214\n00:11:23.834 --> 00:11:25.173\nwe can't do that.\n&gt;&gt; No.\n\n215\n00:11:25.173 --> 00:11:25.749\n&gt;&gt; Yeah.\n\n216\n00:11:25.749 --> 00:11:26.829\n&gt;&gt; Wow.\n\n217\n00:11:26.829 --> 00:11:30.517\n&gt;&gt; It's actually __truediv.\n\n218\n00:11:33.416 --> 00:11:35.977\n&gt;&gt; And correspondingly,\n\n219\n00:11:35.977 --> 00:11:38.925\nthere's a __floordiv.\n\n220\n00:11:42.229 --> 00:11:45.926\nAll right, so I'm just putting\na pass statement for now there.\n\n221\n00:11:45.926 --> 00:11:49.454\n[COUGH] We have other ones, but\nthese are kinda the two core.\n\n222\n00:11:49.454 --> 00:11:52.008\nSo if talked about subtraction,\nmultiplication.\n\n223\n00:11:52.008 --> 00:11:56.460\nSo that was sub, mul, add,\ntruediv is single slash.\n\n224\n00:11:57.590 --> 00:11:59.850\nFloor div is double slashes.\n&gt;&gt; Right, I got that.\n\n225\n00:11:59.850 --> 00:12:03.855\n&gt;&gt; Truediv is floating point, right?\n\n226\n00:12:03.855 --> 00:12:06.070\nWhat is the true?\n\n227\n00:12:06.070 --> 00:12:11.523\nFloordiv is divide,\nget rid of all decimals.\n\n228\n00:12:11.523 --> 00:12:14.706\nNotice we're still talking\nin terms of number,\n\n229\n00:12:14.706 --> 00:12:19.145\nthis is probably why we don't see this for\na lot of other data types.\n\n230\n00:12:19.145 --> 00:12:21.260\nBecause it's not very meaningful,\n\n231\n00:12:21.260 --> 00:12:24.951\nunless those data types\nare approximating some number, okay?\n\n232\n00:12:24.951 --> 00:12:29.835\nSo truediv, we need to\n\n233\n00:12:29.835 --> 00:12:34.981\nmake a check, if what?\n\n234\n00:12:34.981 --> 00:12:39.450\nIf other.x or, excuse me,\n\n235\n00:12:39.450 --> 00:12:45.408\nif other.x is 0, or other.y is 0,\n\n236\n00:12:45.408 --> 00:12:50.800\nthen we could do a check there.\n\n237\n00:12:50.800 --> 00:12:53.940\nYou know what?\nI'm a big fan of letting Python throw\n\n238\n00:12:53.940 --> 00:12:59.090\nthat 0 division exception for\nme or error, divide by 0 error.\n\n239\n00:12:59.090 --> 00:13:00.291\nSo I could do this and\n\n240\n00:13:00.291 --> 00:13:04.974\nhandle it gracefully like well I'm\njust going to return something else.\n\n241\n00:13:04.974 --> 00:13:08.986\nWe're gonna let it catastrophically fail,\nbecause if you're dividing by 0,\n\n242\n00:13:08.986 --> 00:13:11.582\nthen you probably have other\nthings going on that you\n\n243\n00:13:11.582 --> 00:13:12.810\nneed to know about.\n&gt;&gt; Right.\n\n244\n00:13:12.810 --> 00:13:13.754\n&gt;&gt; And I would rather it be\n\n245\n00:13:13.754 --> 00:13:15.603\nexplicit than us hide\nit behind the scenes.\n\n246\n00:13:15.603 --> 00:13:19.859\nSo let's do this,\n\n247\n00:13:19.859 --> 00:13:28.639\nif is instance of other is int or float.\n\n248\n00:13:31.085 --> 00:13:35.206\nI have yep, there we go.\n\n249\n00:13:35.206 --> 00:13:38.583\nWait for it, one, two,\nthree, four, return.\n\n250\n00:13:38.583 --> 00:13:39.438\n&gt;&gt; [LAUGH]\n\n251\n00:13:39.438 --> 00:13:43.806\n&gt;&gt; Point(self.x) /\n\n252\n00:13:43.806 --> 00:13:48.905\nother self.y / other.\n\n253\n00:13:48.905 --> 00:13:55.562\nOtherwise return Point(self.x / other.x,\n\n254\n00:13:55.562 --> 00:14:02.227\nself.y / other.y), just like that, okay?\n\n255\n00:14:02.227 --> 00:14:05.575\nNow what this means is I'm saying\nif it's an integer or float,\n\n256\n00:14:05.575 --> 00:14:08.813\nlet the first thing happen,\notherwise try the other thing.\n\n257\n00:14:08.813 --> 00:14:13.513\nAnything that has the interface, as I've\nsaid in previous episodes, will do this,\n\n258\n00:14:13.513 --> 00:14:16.992\nas long as it has an x property and\na y property that are numbers.\n\n259\n00:14:16.992 --> 00:14:21.523\n[COUGH] Also if other,\nif other is other.x or\n\n260\n00:14:21.523 --> 00:14:25.809\nother.y is 0, I'm gonna get an error,\n\n261\n00:14:25.809 --> 00:14:31.826\nI'm gonna get a runtime issue,\ncuz I can't divide by 0.\n\n262\n00:14:31.826 --> 00:14:35.374\nBut I'm gonna let it fail,\nand that's perfectly okay.\n\n263\n00:14:35.374 --> 00:14:41.449\nAll right, so now if isinstance(other,\n\n264\n00:14:41.449 --> 00:14:44.495\n(int, float)),\n\n265\n00:14:46.983 --> 00:14:54.099\nreturn Point(self.x // other,\n\n266\n00:14:54.099 --> 00:14:58.693\nself.y // other).\n\n267\n00:14:58.693 --> 00:15:05.953\nOtherwise, return Point(self.x // self.y,\n\n268\n00:15:05.953 --> 00:15:11.728\nwhoa, whoa, that's not what I wanted,\n\n269\n00:15:11.728 --> 00:15:16.351\nand then self.y // other.y.\n\n270\n00:15:16.351 --> 00:15:21.205\nAll right, I should be able to use divide,\ndivide, and divide, okay?\n\n271\n00:15:21.205 --> 00:15:26.679\nWe're gonna come back and\ntalk about the other methods here shortly,\n\n272\n00:15:26.679 --> 00:15:29.842\nso dividing and then so I have p1, p2.\n\n273\n00:15:29.842 --> 00:15:32.947\nI have a 0 there, so\nI'm gonna have to be careful, and p3.\n\n274\n00:15:32.947 --> 00:15:40.112\nSo if I say p2 / p3, notice I have\ndecimals in that point, okay?\n\n275\n00:15:40.112 --> 00:15:47.615\nWhat if I have p2, excuse me, p3 / p2?\n\n276\n00:15:47.615 --> 00:15:49.382\nWell I still have decimals.\n\n277\n00:15:49.382 --> 00:15:52.057\nI say p2 // p3.\n\n278\n00:15:52.057 --> 00:15:54.863\nI have whole numbers, okay?\n\n279\n00:15:54.863 --> 00:15:59.518\nAnd what's interesting is what did it do?\n\n280\n00:15:59.518 --> 00:16:06.675\nWell, it kinda, Hm,\nit went the opposite way.\n\n281\n00:16:06.675 --> 00:16:10.440\nSo that's kind of a weird part\nof that operator as well.\n\n282\n00:16:11.690 --> 00:16:16.684\nSo what I mean is -2 //,\n\n283\n00:16:16.684 --> 00:16:21.528\nor excuse me 1 // -2 is -1.\n\n284\n00:16:21.528 --> 00:16:24.040\nWhy is that?\n\n285\n00:16:24.040 --> 00:16:29.190\nIt should be a negative half, but\nit looks like it's doing some rounding.\n\n286\n00:16:29.190 --> 00:16:33.100\nSo that's how it's getting\nrid of the decimal point.\n\n287\n00:16:33.100 --> 00:16:35.440\nThat is some weird behavior.\n&gt;&gt; That is strange.\n\n288\n00:16:35.440 --> 00:16:37.380\n&gt;&gt; That's kind of the reason they went to\n\n289\n00:16:37.380 --> 00:16:40.460\ntrue division because it has this\nweird set of behavior rules here.\n\n290\n00:16:42.140 --> 00:16:45.790\nSo you would have to know about that.\n\n291\n00:16:45.790 --> 00:16:47.536\nWhat if I did p3 // p2, still works.\n\n292\n00:16:47.536 --> 00:16:52.790\nWhat about p2 / 3, that works,\np3 // 5, that works\n\n293\n00:16:52.790 --> 00:16:57.900\nas well and, Let's see.\n\n294\n00:16:57.900 --> 00:16:59.030\nYou know what?\n\n295\n00:16:59.030 --> 00:17:00.700\nThere's something going on here.\n\n296\n00:17:00.700 --> 00:17:05.580\nSo, we know this 1 divided by\na negative 2, that makes sense.\n\n297\n00:17:05.580 --> 00:17:07.680\nThe P3 is negative 2.\n\n298\n00:17:07.680 --> 00:17:13.528\nAnd when I did divide, divide 5,\nthat is getting negative one.\n\n299\n00:17:13.528 --> 00:17:17.510\nStill get -1's so\nwe'll double check that and\n\n300\n00:17:17.510 --> 00:17:23.432\nwhat we'll do is we'll\ndo -2 // 5 still -1.\n\n301\n00:17:23.432 --> 00:17:29.720\nLooks like there might be a lower\nbound there on that floor division.\n\n302\n00:17:29.720 --> 00:17:34.220\nCuz it's taking the floor\nnegative numbers it's the floor.\n\n303\n00:17:34.220 --> 00:17:40.960\nTo test that out what if we do -10\n// 5 It's going more negative.\n\n304\n00:17:40.960 --> 00:17:43.940\nSo the floor is more negative.\n\n305\n00:17:43.940 --> 00:17:44.980\nWeird stuff.\n\n306\n00:17:44.980 --> 00:17:49.340\nSo what we're just gonna\ndouble check just in case.\n\n307\n00:17:49.340 --> 00:17:52.590\nSo it looks like all of our division\noperators work with points.\n\n308\n00:17:52.590 --> 00:17:53.220\nThat's great.\n\n309\n00:17:54.270 --> 00:17:55.340\nThe ones that we have defined.\n\n310\n00:17:56.820 --> 00:17:59.840\nWell let's add some explicit notes.\n\n311\n00:17:59.840 --> 00:18:04.130\nJust to make sure everybody knows\nour intentions everything is good.\n\n312\n00:18:04.130 --> 00:18:08.150\nSo I'm gonna come back into dividing and\nit's good.\n\n313\n00:18:08.150 --> 00:18:13.690\nSo for true div if we have\na true div we probably have\n\n314\n00:18:15.230 --> 00:18:19.670\nA right div.\n&gt;&gt; But\n\n315\n00:18:19.670 --> 00:18:22.435\nyeah, a right div,\nthe R div, yeah, absolutely.\n\n316\n00:18:22.435 --> 00:18:24.770\n[LAUGH]\n&gt;&gt; I definitely need to-\n\n317\n00:18:24.770 --> 00:18:25.970\n&gt;&gt; I didn't know what you\n\n318\n00:18:25.970 --> 00:18:30.070\nwere trying to pull out of me anymore.\n&gt;&gt; I I'll take the blame for\n\n319\n00:18:30.070 --> 00:18:30.750\nthat one one Zach.\n\n320\n00:18:30.750 --> 00:18:31.780\nThat's on me.\n\n321\n00:18:31.780 --> 00:18:33.220\nThat all, it's all good fun.\n&gt;&gt; So basically,\n\n322\n00:18:33.220 --> 00:18:34.950\nit reverse div.\n&gt;&gt; A reverse true\n\n323\n00:18:34.950 --> 00:18:36.120\ndiv.\n&gt;&gt; Right.\n\n324\n00:18:36.120 --> 00:18:37.320\n&gt;&gt; Right, so\n\n325\n00:18:37.320 --> 00:18:39.310\nthat's actually getting\npretty long in name.\n\n326\n00:18:39.310 --> 00:18:41.260\nAnd for now I'm just going to proxy that.\n\n327\n00:18:41.260 --> 00:18:44.140\nBecause there's nothing\ninteresting that I would,\n\n328\n00:18:44.140 --> 00:18:47.940\nwe'd want to do in this particular case.\n\n329\n00:18:47.940 --> 00:18:50.350\nAnd so I'm just gonna return self.\n\n330\n00:18:50.350 --> 00:18:55.360\ntruediv and it kind of does this\nanyway if I flip the numbers.\n\n331\n00:18:55.360 --> 00:18:59.740\nAnd I don't implement this, but\nthis will give me some explicitness.\n\n332\n00:18:59.740 --> 00:19:04.860\nAnd then if I have truediv,\nrtruediv, well,\n\n333\n00:19:04.860 --> 00:19:09.990\nthere's one finally one and\nwhat would that one be?\n\n334\n00:19:11.100 --> 00:19:14.168\nIn place truediv, so\nthat would be itruediv.\n\n335\n00:19:14.168 --> 00:19:20.190\nSo def itruediv,\n\n336\n00:19:20.190 --> 00:19:24.210\nlike so, and\nI'm also gonna delegate that back as well.\n\n337\n00:19:24.210 --> 00:19:30.270\nSo return self truediv, there we go.\n\n338\n00:19:31.790 --> 00:19:34.838\nAll right, likewise the same thing for\n\n339\n00:19:34.838 --> 00:19:37.512\nrfloordiv.\n&gt;&gt; Mm-hm.\n\n340\n00:19:41.636 --> 00:19:44.679\n&gt;&gt; And we're just gonna return self\n\n341\n00:19:44.679 --> 00:19:45.770\nfloordiv.\n\n342\n00:19:45.770 --> 00:19:47.530\nThese are long method names.\n\n343\n00:19:47.530 --> 00:19:49.430\nThey take a little bit to type.\n&gt;&gt; They are long.\n\n344\n00:19:49.430 --> 00:19:51.080\n&gt;&gt; And like I said\n\n345\n00:19:51.080 --> 00:19:53.710\n&gt;&gt; I don't necessarily have to type these.\n\n346\n00:19:53.710 --> 00:19:55.060\n&gt;&gt; Yeah I'd put it in there.\n\n347\n00:19:55.060 --> 00:19:59.320\n&gt;&gt; But I like having them,\n\n348\n00:19:59.320 --> 00:20:00.140\nwhat am I doing here?\n\n349\n00:20:00.140 --> 00:20:03.040\nThere's no custom logic, I'm just\nusing the same logic that's there.\n\n350\n00:20:04.260 --> 00:20:06.750\nThere may be some\nperformance implications.\n\n351\n00:20:06.750 --> 00:20:09.750\nIt would depend on how Python\nmakes these decisions.\n\n352\n00:20:09.750 --> 00:20:12.960\nAnd such and floordiv.\n\n353\n00:20:12.960 --> 00:20:16.200\nSo don't be like, well, Justin said\nthis is gonna be the most performance,\n\n354\n00:20:16.200 --> 00:20:17.240\nthis is the best.\n\n355\n00:20:17.240 --> 00:20:22.260\nI'm not, I'll sacrifice a little bit of\nperformance as long as it's not crazy.\n\n356\n00:20:22.260 --> 00:20:23.860\nIf by adding these,\n\n357\n00:20:23.860 --> 00:20:29.850\nit went from millisecond\nan execution time to four minutes.\n\n358\n00:20:29.850 --> 00:20:31.270\nI would take this out.\n&gt;&gt; Yeah.\n\n359\n00:20:31.270 --> 00:20:33.150\n&gt;&gt; But if it's a millisecond\n\n360\n00:20:33.150 --> 00:20:34.950\nto two milliseconds-\n&gt;&gt; Nah.\n\n361\n00:20:34.950 --> 00:20:36.390\n&gt;&gt; Then I'll just go cool,\n\n362\n00:20:36.390 --> 00:20:38.430\nI know what's going on.\n\n363\n00:20:38.430 --> 00:20:41.160\nAnd in the grand scheme\nof a large code base.\n\n364\n00:20:41.160 --> 00:20:44.650\nI would probably end up coming and\ntaking this out over the long haul.\n\n365\n00:20:44.650 --> 00:20:46.370\nJust because if they're not needed,\n\n366\n00:20:46.370 --> 00:20:50.510\nthen they It's kind of a team\njudgement from that point.\n\n367\n00:20:50.510 --> 00:20:53.930\nAll right so those are all the divs.\n\n368\n00:20:53.930 --> 00:20:58.440\nSo I should be able to do everything\nI've been doing up until this point.\n\n369\n00:20:58.440 --> 00:21:00.860\nAnd then I'm gonna throw\na curve ball at you Zach,\n\n370\n00:21:00.860 --> 00:21:02.380\nit's gonna be.\n&gt;&gt; No.\n\n371\n00:21:02.380 --> 00:21:04.490\n&gt;&gt; A bunch of shenanigans.\n\n372\n00:21:04.490 --> 00:21:10.900\nAll right, so dividing, not I'm not\ngonna ask you to defend [INAUDIBLE].\n\n373\n00:21:10.900 --> 00:21:17.955\nI'm gonna show you something that you're\ngonna go I didn't see that coming.\n\n374\n00:21:17.955 --> 00:21:20.690\n[LAUGH] You're like, whew.\n&gt;&gt; [INAUDIBLE] is 42.\n\n375\n00:21:20.690 --> 00:21:22.190\n&gt;&gt; So I have p2 and p1 and\n\n376\n00:21:22.190 --> 00:21:25.930\nif I do p2 divided by p1 well we\nactually get the division by zero\n\n377\n00:21:25.930 --> 00:21:28.140\nerror that I said we would get.\n\n378\n00:21:28.140 --> 00:21:29.580\nZero division error.\n\n379\n00:21:29.580 --> 00:21:30.860\nAnd that's perfectly okay.\n\n380\n00:21:30.860 --> 00:21:37.020\nYou should know if you're dividing by 0,\nso let it fail.\n\n381\n00:21:37.020 --> 00:21:43.760\nHand that off to somebody else to handle.\n\n382\n00:21:43.760 --> 00:21:49.655\nIf I do p2 /= p3,\nthen p2 is in-place division, i true div.\n\n383\n00:21:49.655 --> 00:21:56.624\nIf I take p3 and divide equals\nall right so I slash equals p3.\n\n384\n00:21:56.624 --> 00:22:01.620\nI'm actually gonna divide by itself.\n\n385\n00:22:01.620 --> 00:22:04.210\nThen p3 is now one as it should be.\n\n386\n00:22:04.210 --> 00:22:06.440\nWe divide it by self should be one.\n\n387\n00:22:06.440 --> 00:22:12.132\nSo both of those work, the opposite works,\nit works for if I do P3 /- 5 P3\n\n388\n00:22:12.132 --> 00:22:17.370\nare now it it, or excuse me,\nfloating point numbers.\n\n389\n00:22:17.370 --> 00:22:22.340\nThat have been in placed divided by 5 so\nthose all work.\n\n390\n00:22:22.340 --> 00:22:25.840\nBut here is the curveball\n\n391\n00:22:27.500 --> 00:22:32.710\nIn Python, Python 3, I'm not entirely\nsure if there's a still a Python 2.\n\n392\n00:22:32.710 --> 00:22:34.760\nI would have to check.\n\n393\n00:22:34.760 --> 00:22:36.680\nI have a feeling there might have been.\n\n394\n00:22:38.150 --> 00:22:43.050\nThere's a function called divmod where\nI can handle a handed two numbers.\n\n395\n00:22:44.230 --> 00:22:50.610\nIt wit will return me a topple\nWith a division and a modulus.\n\n396\n00:22:52.270 --> 00:22:55.500\nAnd to get a better feel of,\nso let's do divmod.\n\n397\n00:22:55.500 --> 00:23:00.700\nAnd I'm gonna do 47,\nwhich I know is not evenly divisible by 4.\n\n398\n00:23:00.700 --> 00:23:05.400\nAnd it goes into,\n4 goes into 47 11 times, and\n\n399\n00:23:05.400 --> 00:23:07.280\nthere's 3 left over.\n&gt;&gt; Mm-hm.\n\n400\n00:23:07.280 --> 00:23:08.710\n&gt;&gt; So, it's like how we learned to divide\n\n401\n00:23:08.710 --> 00:23:11.420\ninitially until we do long division.\n&gt;&gt; Mm-hm.\n\n402\n00:23:11.420 --> 00:23:11.970\n&gt;&gt; You divide, and\n\n403\n00:23:11.970 --> 00:23:13.900\nthen you have some remainder.\n\n404\n00:23:13.900 --> 00:23:17.960\nIt returns them as well,\nhow many divisions there were.\n\n405\n00:23:17.960 --> 00:23:19.614\nAnd then what was remaining.\n&gt;&gt; Mm-hm.\n\n406\n00:23:21.220 --> 00:23:24.890\nWell, this is technically\na division action, right?\n\n407\n00:23:25.910 --> 00:23:31.480\nIf I try that with let's say P2, right?\n\n408\n00:23:31.480 --> 00:23:37.940\nDiv mod(p2, p3), div mod doesn't work.\n\n409\n00:23:37.940 --> 00:23:40.570\nIt technically is a division operation.\n\n410\n00:23:40.570 --> 00:23:42.850\nIt is also lame modular operation.\n\n411\n00:23:43.850 --> 00:23:47.480\nSo I'm letting you know about this.\n\n412\n00:23:47.480 --> 00:23:51.970\nBecause we're not quite ready to implement\nthis because this is a combination\n\n413\n00:23:51.970 --> 00:23:54.110\nof two operations.\n&gt;&gt; Okay.\n\n414\n00:23:54.110 --> 00:23:54.940\n&gt;&gt; And\n\n415\n00:23:54.940 --> 00:24:00.420\nwe don't have the secondary operation\ncomplete for our point object.\n\n416\n00:24:00.420 --> 00:24:04.410\nSo we're going to have to wait, but\nI did want to let everybody know Yes.\n\n417\n00:24:04.410 --> 00:24:05.140\n&gt;&gt; You're teasing them,\n\n418\n00:24:05.140 --> 00:24:07.080\nyou're giving us a tease.\n&gt;&gt; There's a div mod.\n\n419\n00:24:07.080 --> 00:24:12.180\nThis isn't necessarily a number two, this\nis a teaser for future things to come.\n\n420\n00:24:12.180 --> 00:24:15.220\nFor the most part,\nwe've covered both types of division.\n\n421\n00:24:15.220 --> 00:24:17.080\nI know that's really weird to hear.\n\n422\n00:24:17.080 --> 00:24:18.760\nWe have floor, and\n\n423\n00:24:18.760 --> 00:24:23.590\nwe have true div, and then we have\nthe respective right and left.\n\n424\n00:24:23.590 --> 00:24:26.080\nAnd then in place modifications.\n\n425\n00:24:26.080 --> 00:24:27.640\nSo keep those in mind.\n\n426\n00:24:27.640 --> 00:24:32.430\nA lot of times division is\ngonna be mostly about numerics,\n\n427\n00:24:32.430 --> 00:24:36.780\nanything that is number like or\nis composed of numbers.\n\n428\n00:24:36.780 --> 00:24:38.410\nDivision might be applicable.\n\n429\n00:24:38.410 --> 00:24:42.420\nIf it's a bunch of strings,\nI don't know of anything that makes sense.\n\n430\n00:24:42.420 --> 00:24:45.380\nI have a discussion about, so\nI divided that string by that string.\n\n431\n00:24:45.380 --> 00:24:46.580\nWhat'd you get?\n\n432\n00:24:46.580 --> 00:24:48.210\nErrors, it's broke.\n\n433\n00:24:48.210 --> 00:24:49.395\nIt doesn't mean anything.\n\n434\n00:24:49.395 --> 00:24:53.550\nDo keep that in mind when you're\nimplementing the division operator.\n\n435\n00:24:53.550 --> 00:24:55.340\n&gt;&gt; Well done, Justin, thanks very much.\n\n436\n00:24:55.340 --> 00:24:58.700\nDividing inside the Python\ndata model series.\n\n437\n00:24:58.700 --> 00:25:00.510\nAnd before we move away from this.\n\n438\n00:25:00.510 --> 00:25:01.740\nDo you have anything\nelse you'd like to say?\n\n439\n00:25:01.740 --> 00:25:03.150\n&gt;&gt; Well you should defintiely stay tuned\n\n440\n00:25:03.150 --> 00:25:03.930\nbecause we're gonna figure\n\n441\n00:25:03.930 --> 00:25:06.490\nout how this all comes together.\n&gt;&gt; Yes.\n\n442\n00:25:06.490 --> 00:25:07.260\n&gt;&gt; You know, it's crazy,\n\n443\n00:25:07.260 --> 00:25:08.820\nthe Python data model.\n\n444\n00:25:08.820 --> 00:25:14.360\nIf you know this series is not necessarily\nabsolutely extensively exhaustive.\n\n445\n00:25:15.390 --> 00:25:20.790\nBut it has a lot of good pieces that we've\nalready done but that are also coming up.\n\n446\n00:25:20.790 --> 00:25:24.680\nSo I definitely see how you can\nmake use of the Python data model\n\n447\n00:25:24.680 --> 00:25:26.510\nto make your life easier.\n&gt;&gt; Fantastic so\n\n448\n00:25:26.510 --> 00:25:30.310\nmake sure you see every single episode\ninside the Python data model series.\n\n449\n00:25:30.310 --> 00:25:33.460\nThat Justin's put together for\nyou because it's good stuff.\n\n450\n00:25:33.460 --> 00:25:35.350\nAnd it's good for\nyou now and in the future.\n\n451\n00:25:35.350 --> 00:25:38.640\nAnd while you're in the course library\nthere's thousands of other videos there\n\n452\n00:25:38.640 --> 00:25:40.040\ndesigned to help you go further.\n\n453\n00:25:40.040 --> 00:25:41.320\nCheck those out too.\n\n454\n00:25:41.320 --> 00:25:43.430\nAnd tell everybody you\nknow about DevProTV.\n\n455\n00:25:43.430 --> 00:25:45.110\nA good DevPro is always learning.\n\n456\n00:25:45.110 --> 00:25:45.760\nThanks for watching.\n\n457\n00:25:45.760 --> 00:25:47.380\nI'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n458\n00:25:47.380 --> 00:25:48.985\n&gt;&gt; And we will see you soon.\n\n459\n00:25:48.985 --> 00:25:53.479\n[MUSIC]\n\n",
          "vimeoId": "252907222"
        },
        {
          "description": "In this episode, Justin and Zach  continue building custom objects that emulate numeric types by exploring \\_\\_mod\\_\\_ and \\_\\_pow\\_\\_ to provide the ability to find the modulus as well as raise the object to a power.",
          "length": "1647",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-5-1-modulo_and_powers-012618-PGM.00_27_19_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-5-1-modulo_and_powers-012618-PGM.00_27_19_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-5-1-modulo_and_powers-012618-PGM.00_27_19_22.Still001-sm.jpg",
          "title": "Modulo and Powers",
          "transcript": "WEBVTT\n\n1\n00:00:00.089 --> 00:00:10.089\n[MUSIC]\n\n2\n00:00:12.833 --> 00:00:14.510\nHello?\nThan you for watching DevProTV.\n\n3\n00:00:14.510 --> 00:00:16.930\nHelping you learn wherever you go.\n\n4\n00:00:16.930 --> 00:00:20.340\nI'm your host Zach Memos as we\ncontinue on with Python Data Model.\n\n5\n00:00:20.340 --> 00:00:22.890\nThis episode is marginal and powers.\n\n6\n00:00:22.890 --> 00:00:24.190\nSounds like a superhero team.\n\n7\n00:00:24.190 --> 00:00:27.370\nThe person bringing us this information,\nof course, is Justin Denison.\n\n8\n00:00:27.370 --> 00:00:28.990\nJustin, great to see you.\n&gt;&gt; Thanks.\n\n9\n00:00:28.990 --> 00:00:32.290\nIt is great to be back and, actually,\nI think it sounds like a detective squad.\n\n10\n00:00:32.290 --> 00:00:33.150\n&gt;&gt; It does that, too.\n\n11\n00:00:33.150 --> 00:00:34.630\n&gt;&gt; Come on down to Modulo and Powers.\n\n12\n00:00:34.630 --> 00:00:37.350\nWe'll figure out what's happening with\nyou, but, more importantly, Zach,\n\n13\n00:00:37.350 --> 00:00:38.240\nhow are you today?\n&gt;&gt; Well,\n\n14\n00:00:38.240 --> 00:00:41.260\nI'm excited to find out what Modulo and\nPowers really has to do with\n\n15\n00:00:41.260 --> 00:00:45.850\nthe Python data model.\n&gt;&gt; Well, in previous few episodes we've\n\n16\n00:00:45.850 --> 00:00:52.000\nbeen seeing how we can emulate\na numeric type effectively, right?\n\n17\n00:00:52.000 --> 00:00:56.370\nWe've been able to add and\nsubtract, and multiply, and divide.\n\n18\n00:00:56.370 --> 00:00:58.820\nThe divide one got a little hairy there.\n\n19\n00:00:58.820 --> 00:01:05.260\nAnd actually, divide kinda leads\ninto this one because we div mod.\n\n20\n00:01:05.260 --> 00:01:09.150\nBut we have to talk about what\nhappens if you want to override\n\n21\n00:01:09.150 --> 00:01:13.570\nthe modulus operator and\nit's kind of rinse and repeat.\n\n22\n00:01:13.570 --> 00:01:18.090\nAnd then well, power actually\nhas its own set of operators,\n\n23\n00:01:18.090 --> 00:01:19.550\nits own operator in Python.\n\n24\n00:01:19.550 --> 00:01:23.170\nThis is not something that's usually\ninside of a programming langauge.\n\n25\n00:01:23.170 --> 00:01:28.310\nYou have to call a function or something.\n&gt;&gt; So I do like this syntax, just because\n\n26\n00:01:28.310 --> 00:01:33.240\nmy background, it allows me to more or\nless type what I would think about and\n\n27\n00:01:33.240 --> 00:01:36.400\ngo, well, that's actually\na valid pipeline, all right.\n\n28\n00:01:36.400 --> 00:01:42.290\nBut then it gets a little more complex\nif I have complex data structures okay?\n\n29\n00:01:42.290 --> 00:01:45.670\nSo if we come down on the screen here and\nwe take a look,\n\n30\n00:01:45.670 --> 00:01:50.430\nlet's just remind ourselves in\ncase you're not wholly familiar,\n\n31\n00:01:50.430 --> 00:01:56.350\nyou don't use modulus a lot,\nlet's see what happens.\n\n32\n00:01:56.350 --> 00:02:03.543\nWe're taking the modulus,\nit's the modulus operator or\n\n33\n00:02:03.543 --> 00:02:08.989\nthe modulo, right Three and four.\n\n34\n00:02:08.989 --> 00:02:13.530\nSo I would say four mod two.\n\n35\n00:02:13.530 --> 00:02:17.100\nWell, that's zero because it's going\nto give me the remainder of when\n\n36\n00:02:17.100 --> 00:02:22.810\nI divide by two ok.\n\n37\n00:02:22.810 --> 00:02:25.190\nWhat would 4 divided by 2?\n\n38\n00:02:25.190 --> 00:02:26.100\nWell that's two, right?\n\n39\n00:02:26.100 --> 00:02:28.190\nWe get that true division, right?\n\n40\n00:02:28.190 --> 00:02:30.650\nWhat if I go five mod two?\n\n41\n00:02:30.650 --> 00:02:32.788\nWell, that's one.\n\n42\n00:02:32.788 --> 00:02:35.680\nWhat about six mod two?\n\n43\n00:02:35.680 --> 00:02:41.328\nThat's zero.\nAnd because I'm taking mod two of\n\n44\n00:02:41.328 --> 00:02:46.360\nusing because I'm doing math too then\nI either get a remainder of one or\n\n45\n00:02:46.360 --> 00:02:50.300\na remainder of nothing because this is\nhow i determine if something is even or\n\n46\n00:02:50.300 --> 00:02:53.380\nnot if I have one leftover or I don't.\n\n47\n00:02:53.380 --> 00:02:56.960\nSo that's not really interesting,\n\n48\n00:02:56.960 --> 00:03:02.510\nwhat if I did something more\nlike five mod three, right.\n\n49\n00:03:02.510 --> 00:03:06.363\nTwo or about four mod three or one.\n\n50\n00:03:06.363 --> 00:03:09.080\nAgain I'm getting the remainder.\n\n51\n00:03:09.080 --> 00:03:10.710\nSo it goes into four, one time but\n\n52\n00:03:10.710 --> 00:03:13.530\nthen I have one left over\nthat I can't divide evenly.\n\n53\n00:03:13.530 --> 00:03:16.310\nSo, just keep that in mind.\n\n54\n00:03:16.310 --> 00:03:19.910\nLet's se if this make sense for any of\nour other kind of data types that we may\n\n55\n00:03:19.910 --> 00:03:25.660\ncommonly use, mod three.\n\n56\n00:03:25.660 --> 00:03:28.760\nModulus actually means something\nin the context of strings.\n\n57\n00:03:28.760 --> 00:03:32.270\nIt's actually string replacement,\nstring interpolation.\n\n58\n00:03:32.270 --> 00:03:33.465\nI don't use this a great deal.\n\n59\n00:03:33.465 --> 00:03:38.110\nI usually .format, or\nF-strings, or the plus sign.\n\n60\n00:03:38.110 --> 00:03:40.270\nBut this was kind of the old school way.\n\n61\n00:03:40.270 --> 00:03:43.060\nLet's see if we can get it to work here.\n\n62\n00:03:44.370 --> 00:03:47.742\nWe can say, a percentages.\n\n63\n00:03:47.742 --> 00:03:51.080\nThis is our replacement.\n\n64\n00:03:51.080 --> 00:03:52.300\nSo this is like our little template.\n\n65\n00:03:52.300 --> 00:03:54.290\nAnd then mod b.\n\n66\n00:03:54.290 --> 00:03:58.460\nAnd all it does is it says,\n\n67\n00:03:58.460 --> 00:04:02.710\nwhatever comes after the mod I'm\ngonna replace that in order.\n\n68\n00:04:02.710 --> 00:04:04.370\nSo you either give it a single argument.\n\n69\n00:04:04.370 --> 00:04:06.000\nOr if you had multiple arguments.\n\n70\n00:04:06.000 --> 00:04:13.790\nPercent as like so,\nthen I would need a tuple like so.\n\n71\n00:04:13.790 --> 00:04:16.208\nOkay, and\nit just replaces one to one in a line.\n\n72\n00:04:17.636 --> 00:04:21.277\nI'm not a big fan of this, because\nsometimes I have to do complex things, and\n\n73\n00:04:21.277 --> 00:04:24.090\nthen percent s, and\nthen I have another percent at the end.\n\n74\n00:04:24.090 --> 00:04:27.830\nAnd it's crazy, so\nI don't use that a great deal.\n\n75\n00:04:27.830 --> 00:04:32.400\nBut the operator is defined\non a string to have something\n\n76\n00:04:32.400 --> 00:04:34.480\nother than give me the remainder.\n\n77\n00:04:34.480 --> 00:04:37.260\nSo from a numeric type\ngive me the remainder.\n\n78\n00:04:37.260 --> 00:04:40.010\nFrom a string type do a replacement.\n\n79\n00:04:40.010 --> 00:04:45.384\nWhile we're looking at other data types,\njust to keep this brief,\n\n80\n00:04:45.384 --> 00:04:48.791\nlet's import, go back, from date time.\n\n81\n00:04:50.232 --> 00:04:53.140\nImport data, like so.\n\n82\n00:04:53.140 --> 00:04:58.189\nSo what about now, well,\nthat's datetime.now().\n\n83\n00:04:58.189 --> 00:05:01.310\nAnd if we look at now mod, and\n\n84\n00:05:02.890 --> 00:05:08.780\nI wanna type datetime.now(), because,\nwell, a few seconds have elapsed.\n\n85\n00:05:08.780 --> 00:05:12.115\nSo the datetime.now is gonna be different\n\n86\n00:05:12.115 --> 00:05:17.140\nthan the datetime.now that we\ndid just a few seconds ago.\n\n87\n00:05:17.140 --> 00:05:21.400\nAnd boom, it is not defined for\ndatetime objects.\n\n88\n00:05:21.400 --> 00:05:23.850\nAll right, so one final one.\n\n89\n00:05:26.030 --> 00:05:32.230\nLet's go a list mod, and\nlet's just try a list.\n\n90\n00:05:32.230 --> 00:05:32.910\nNo.\n\n91\n00:05:32.910 --> 00:05:34.340\nLet's try just a single number.\n\n92\n00:05:35.740 --> 00:05:38.080\nNo, that doesn't work either.\n\n93\n00:05:38.080 --> 00:05:42.540\nSo strings and numbers have the mod\noperators, they have one defined.\n\n94\n00:05:42.540 --> 00:05:44.760\nThey do distinctly different things.\n\n95\n00:05:44.760 --> 00:05:49.620\nOne is for replacement of\ntemplated pieces, like a format.\n\n96\n00:05:49.620 --> 00:05:53.650\nAnd then for numeric types it's just give\nme the remainder based on the right side\n\n97\n00:05:53.650 --> 00:05:54.790\noperand, okay?\n\n98\n00:05:57.330 --> 00:06:00.540\nSo let's,\nbefore we go anywhere I do wanna,\n\n99\n00:06:00.540 --> 00:06:02.660\nwe're gonna talk about powers as well.\n&gt;&gt; Okay.\n\n100\n00:06:02.660 --> 00:06:04.850\n&gt;&gt; And that one's pretty simple because\n\n101\n00:06:04.850 --> 00:06:09.560\nthere's not, I'm taking something\nto the power of something.\n\n102\n00:06:09.560 --> 00:06:13.900\nSo two to the power of five,\nand that's two asterisks.\n\n103\n00:06:13.900 --> 00:06:15.360\nNot one, that's multiply.\n\n104\n00:06:15.360 --> 00:06:15.930\nBut two.\n\n105\n00:06:15.930 --> 00:06:18.270\nSo that reads two to the power of five.\n\n106\n00:06:18.270 --> 00:06:18.891\nThat's 32.\nSo\n\n107\n00:06:18.891 --> 00:06:21.510\ntwo times two times two\ntimes two times two.\n\n108\n00:06:21.510 --> 00:06:28.520\nAnd then, the order does matter here and\nthat's going to come up in a little while.\n\n109\n00:06:28.520 --> 00:06:33.070\nFive to the power of two,\nyou notice is 25, not 32.\n\n110\n00:06:33.070 --> 00:06:35.730\nOrder matters,\njust a little bit like division.\n\n111\n00:06:37.550 --> 00:06:41.640\nIf order matters,\nthen there's probably not\n\n112\n00:06:41.640 --> 00:06:45.680\na lot you can,\nthere's not a lot you can do.\n\n113\n00:06:45.680 --> 00:06:49.920\nLet's see if we do a to the power of two.\n\n114\n00:06:49.920 --> 00:06:51.330\nNope, doesn't work.\n\n115\n00:06:51.330 --> 00:06:51.910\nIt's broke.\n\n116\n00:06:53.000 --> 00:06:56.980\nWhat about a to the power of b?\n\n117\n00:06:56.980 --> 00:06:58.720\nIt still doesn't work.\n\n118\n00:07:00.020 --> 00:07:01.980\nIt's hard to gauge meaning here.\n\n119\n00:07:01.980 --> 00:07:06.980\nAnd while we have now,\nnow to the power of now, no.\n\n120\n00:07:06.980 --> 00:07:09.620\nWhat about now to the power of three?\n\n121\n00:07:09.620 --> 00:07:10.350\nNo.\n\n122\n00:07:10.350 --> 00:07:15.870\nSo, really the power is generally\nstrictly in numeric thing.\n\n123\n00:07:15.870 --> 00:07:19.100\nNow, all of these may have\nnumeric type operators, so\n\n124\n00:07:19.100 --> 00:07:21.507\nwe are talking about the sign.\n\n125\n00:07:21.507 --> 00:07:25.122\nWhat usually I thought\nthat was module operator.\n\n126\n00:07:26.740 --> 00:07:28.940\nBut for a string, it means something else.\n\n127\n00:07:28.940 --> 00:07:32.820\nSo Justin, can you use modulo and powers\ntogether, or do they have to separate?\n\n128\n00:07:32.820 --> 00:07:34.130\n&gt;&gt; So you can use them together,\n\n129\n00:07:34.130 --> 00:07:39.510\nand just to show you,\nyou may have some specific calculation.\n\n130\n00:07:39.510 --> 00:07:44.789\nLet's say you wanna go, I want five mod\n\n131\n00:07:44.789 --> 00:07:51.089\nthree to the power of four and\nthen it will evaluate.\n\n132\n00:07:51.089 --> 00:07:55.310\nIf you're using the module operator for\nstrings then well obviously\n\n133\n00:07:55.310 --> 00:07:59.105\nyou're not using powers cause\npowers don't make any sense.\n\n134\n00:07:59.105 --> 00:08:02.399\nBut it can be used in conjunction\nwith other things, all right,\n\n135\n00:08:02.399 --> 00:08:05.040\nit's a little messy but doable.\n\n136\n00:08:05.040 --> 00:08:07.850\nBut now that we have\nthis kind of this review,\n\n137\n00:08:07.850 --> 00:08:12.010\nwe've done our inspection,\nhow do we manage this?\n\n138\n00:08:12.010 --> 00:08:17.816\nAnd if we look here, where's that dividing\none, there we go, dividing and modular,\n\n139\n00:08:17.816 --> 00:08:23.580\nand powers = modulo_and_powers.\n\n140\n00:08:23.580 --> 00:08:25.230\nAnd then I'm just gonna take this off.\n\n141\n00:08:26.230 --> 00:08:31.760\nYeah the defive got a little out of\nhand there, but that's all right.\n\n142\n00:08:31.760 --> 00:08:35.230\nNow, these points, I've been calling these\npoints, cuz I've been thinking about them\n\n143\n00:08:35.230 --> 00:08:39.140\nas ordered pairs, however,\nOne could make the argument.\n\n144\n00:08:39.140 --> 00:08:44.440\nI could change the name and\nmake these behave like a two D vector.\n\n145\n00:08:44.440 --> 00:08:46.830\nNow, if you don't know what a vector is,\nthat's perfectly fine.\n\n146\n00:08:46.830 --> 00:08:49.120\nThat's why I chose to call them points.\n\n147\n00:08:49.120 --> 00:08:54.930\nIt doesn't completely remove\nthe reliance on math,\n\n148\n00:08:54.930 --> 00:08:58.560\nbut to remove maybe something that\nyou're not familiar with in math.\n\n149\n00:08:58.560 --> 00:08:59.860\nMost people have made a point.\n\n150\n00:09:01.460 --> 00:09:02.620\nWhere is it?\nWell, its right there.\n\n151\n00:09:03.890 --> 00:09:06.020\nWe measure that based on some reference.\n\n152\n00:09:07.060 --> 00:09:10.130\nBut, if I said vectors all the time\npeople would what's a vector?\n\n153\n00:09:10.130 --> 00:09:11.680\nI don't know what you're talking about.\n\n154\n00:09:11.680 --> 00:09:12.780\nSo, that's what I call them there.\n\n155\n00:09:12.780 --> 00:09:15.280\nBut those of you who know what vector are,\nyou're like, okay.\n\n156\n00:09:15.280 --> 00:09:17.310\nI see what you're doing.\n\n157\n00:09:18.970 --> 00:09:21.070\nNow, because we have this point.\n\n158\n00:09:21.070 --> 00:09:26.060\nThis is gonna be fairly easy,\nbut Zach, I'm gonna\n\n159\n00:09:26.060 --> 00:09:29.440\nthrow you under the bus a little bit here.\n&gt;&gt; [LAUGH]\n\n160\n00:09:29.440 --> 00:09:30.090\n&gt;&gt; Dunder,\n\n161\n00:09:30.090 --> 00:09:34.430\nin order to use the modular operator,\nwhat do you think the dunder method is?\n\n162\n00:09:34.430 --> 00:09:35.140\n&gt;&gt; Dunder mod.\n\n163\n00:09:36.270 --> 00:09:37.395\n&gt;&gt; Man.\n\n164\n00:09:37.395 --> 00:09:40.620\nZach, you made me happy.\n\n165\n00:09:42.258 --> 00:09:47.320\nSo Dunder mod,\nwell that's the modula, right?\n\n166\n00:09:47.320 --> 00:09:50.300\nOkay, so\nthat means if I take a point percent and\n\n167\n00:09:50.300 --> 00:09:52.820\nanother point,\nit's going to do something specific.\n\n168\n00:09:54.320 --> 00:09:58.330\nSo just to, because we have\nto talk about powers as well\n\n169\n00:09:58.330 --> 00:10:01.430\nI'm not gonna put in the logic\nto allow a number, you could.\n\n170\n00:10:01.430 --> 00:10:03.280\nIf you go and watch previous videos,\n\n171\n00:10:03.280 --> 00:10:07.130\nyou'll see where I say if it's an instance\nof an int over a float do this.\n\n172\n00:10:07.130 --> 00:10:10.630\nIf it's not, it's a point and\na point, do this other thing.\n\n173\n00:10:10.630 --> 00:10:12.560\nSo that's just one of those things.\n\n174\n00:10:13.860 --> 00:10:20.449\nBut here I'm just gonna say\nreturn Point(self.x % other.x.\n\n175\n00:10:20.449 --> 00:10:26.548\nAnd my assumption is the other thing\nhas to be point like, all right?\n\n176\n00:10:26.548 --> 00:10:33.320\nSo self.y % other.y, just like so.\n\n177\n00:10:33.320 --> 00:10:36.658\nNow while we're here, all right?\n\n178\n00:10:36.658 --> 00:10:42.740\nHm, I wonder can I reverse the order?\n\n179\n00:10:42.740 --> 00:10:49.230\nYeah, the calculations may not necessarily\nbe the same, but can I reverse the order?\n\n180\n00:10:49.230 --> 00:10:53.897\nAnd let's see here,\n\n181\n00:10:53.897 --> 00:10:59.095\nrmod and self, other.\n\n182\n00:10:59.095 --> 00:11:03.219\nAnd instead of returning\nsomething I'm just gonna say\n\n183\n00:11:03.219 --> 00:11:08.810\nprint('rmod') to show you that this\none can be a little tricky for you.\n\n184\n00:11:08.810 --> 00:11:16.270\nAnd finally we have the ability to do\nin place, well modular arithmetic.\n\n185\n00:11:16.270 --> 00:11:20.550\nAnd really we could return a new thing,\n\n186\n00:11:20.550 --> 00:11:25.090\nlike a new point just like we did with\nup here, and we've done that before.\n\n187\n00:11:25.090 --> 00:11:26.570\nYou can do that.\n\n188\n00:11:26.570 --> 00:11:29.860\nIt is recommended and\nif I didn't mention this before,\n\n189\n00:11:29.860 --> 00:11:34.270\nI wanna drive this home cuz I've shown\nboth ways just to show the flexibility.\n\n190\n00:11:34.270 --> 00:11:39.420\nIt is recommended that you\nmutate the object that you're in\n\n191\n00:11:39.420 --> 00:11:44.430\nWhatever is represented by self and\nthen return either that\n\n192\n00:11:45.980 --> 00:11:49.950\nor return something derived from that.\n\n193\n00:11:49.950 --> 00:11:52.420\nAll right, so keep that in mind.\n\n194\n00:11:54.430 --> 00:12:00.960\nSo what we're gonna do is\nwe're just gonna say self.x%=,\n\n195\n00:12:00.960 --> 00:12:03.793\nwhich is my equals in place mode.\n&gt;&gt; Right.\n\n196\n00:12:03.793 --> 00:12:08.687\n&gt;&gt; other.x and then self.y percent\n\n197\n00:12:08.687 --> 00:12:12.980\nequals other.y and then return self.\n\n198\n00:12:12.980 --> 00:12:15.660\nWe're just gonna return this object,\nall right.\n\n199\n00:12:16.820 --> 00:12:20.100\nI think we have mod kinda worked out for\n\n200\n00:12:20.100 --> 00:12:21.110\nus here.\n&gt;&gt; Sounds good.\n\n201\n00:12:21.110 --> 00:12:23.700\n&gt;&gt; So let's go see how our points behave,\n\n202\n00:12:26.529 --> 00:12:30.100\nModulo and powers.\n\n203\n00:12:30.100 --> 00:12:32.560\nSo p1, p2.\nSo p and p2 mod p3.\n\n204\n00:12:32.560 --> 00:12:35.699\nWell, what was p3 again?\n\n205\n00:12:35.699 --> 00:12:38.076\nIt was -2.\n\n206\n00:12:38.076 --> 00:12:42.590\nAll right, so,\nnegative modulus, kinda weird.\n\n207\n00:12:44.050 --> 00:12:49.169\nSo p2 have 1 mod -2.\n\n208\n00:12:49.169 --> 00:12:54.668\nWhat's the remainder when I divide 1 by 2?\n\n209\n00:12:54.668 --> 00:12:58.132\nWell it's 1 but the signs are mixed so\nit returns a negative sign.\n\n210\n00:12:58.132 --> 00:12:59.810\nMm-hm, mm-hm.\n\n211\n00:12:59.810 --> 00:13:06.280\nAnd then 3, wait for it,\nyeah, 3 mod negative 4.\n\n212\n00:13:06.280 --> 00:13:11.360\nWell, how does that work?\n\n213\n00:13:11.360 --> 00:13:14.680\nIf I take 3, I need to go check that,\n\n214\n00:13:14.680 --> 00:13:16.490\nbecause that looks\na little backwards to me.\n\n215\n00:13:17.870 --> 00:13:22.200\nAnd maybe we'll remove the negative signs,\nbecause the negative signs\n\n216\n00:13:22.200 --> 00:13:27.074\nare messing up my mojo here a little bit.\n&gt;&gt; [LAUGH]\n\n217\n00:13:27.074 --> 00:13:28.170\n&gt;&gt; All right, so\n\n218\n00:13:28.170 --> 00:13:33.970\nlet's just make this 2 and 4, and then 0\nis not really interesting in this case.\n\n219\n00:13:33.970 --> 00:13:36.540\nSo let's make this 5.\n\n220\n00:13:36.540 --> 00:13:38.930\nAnd 5, okay?\n\n221\n00:13:38.930 --> 00:13:46.800\nSo let's go back here,\npython3 -i module, so via p1 p2 p3.\n\n222\n00:13:46.800 --> 00:13:52.080\nSo, but if p1 mod p2 just like that,\n\n223\n00:13:52.080 --> 00:13:55.270\nthat's exactly what I expect, all right?\n\n224\n00:13:55.270 --> 00:14:00.000\nSo Five mod one, well,\n\n225\n00:14:00.000 --> 00:14:02.670\none will divide into anything, so\nthere's nothing left over, zero.\n\n226\n00:14:04.250 --> 00:14:09.080\nFive mod three, well three will go into\nfive one time, but there's two left over.\n\n227\n00:14:09.080 --> 00:14:14.169\nSo there's my point, so modulus is just\nemulating the previous numeric types.\n\n228\n00:14:15.250 --> 00:14:17.930\nWhat about if I switch the order.\n\n229\n00:14:17.930 --> 00:14:21.350\nWell the order does matter, and\nnotice I get 1 and a 3, and\n\n230\n00:14:21.350 --> 00:14:24.950\nthat's because I've worked\nit in the reverse order.\n\n231\n00:14:24.950 --> 00:14:32.346\nAnd so, 2 mod 5,\n\n232\n00:14:32.346 --> 00:14:36.260\nand let's just see here, mod 5.\n\n233\n00:14:36.260 --> 00:14:40.430\nTo, no,\nI am going all over the place here, Zach.\n\n234\n00:14:42.770 --> 00:14:47.912\n&gt;&gt; So p2 mod 5 is so 1 mod 5 is 1,\n\n235\n00:14:47.912 --> 00:14:51.728\nand then 3 mod 5 is 3.\n\n236\n00:14:51.728 --> 00:14:53.465\nSo effectively, I get p2 back,\n\n237\n00:14:53.465 --> 00:14:57.690\nbecause those are all remainders\nwhen dividing by a big number.\n\n238\n00:14:57.690 --> 00:15:01.320\nAll right, you'll notice,\neven if I reverse the order,\n\n239\n00:15:01.320 --> 00:15:04.890\nI haven't seen that R mod thing yet.\n\n240\n00:15:06.100 --> 00:15:11.020\nSo what if we try p1 $ 2?\n\n241\n00:15:11.020 --> 00:15:15.800\nNothing, because it dies inside of mod.\n\n242\n00:15:15.800 --> 00:15:17.049\nWhat if I do 2 % p1?\n\n243\n00:15:18.370 --> 00:15:21.510\nWell, it actually just prints our mod.\n\n244\n00:15:21.510 --> 00:15:26.390\nCuz two mod a point is now supported,\nwell Python does is say hey,\n\n245\n00:15:26.390 --> 00:15:29.160\nlet me switch the arguments.\n\n246\n00:15:29.160 --> 00:15:35.600\nLet me try or not switch the argument,\nlet me try p1 mod\n\n247\n00:15:36.820 --> 00:15:41.430\ntwo, or R mod specifically.\n\n248\n00:15:41.430 --> 00:15:46.166\nSo you can have custom logic that says,\nwell you can't just exactly switch\n\n249\n00:15:46.166 --> 00:15:51.146\nthem around and make it work, but there is\na way to fanagle it and get it to work.\n\n250\n00:15:51.146 --> 00:15:55.984\nSo if I put the number, and we'll try R\nmod, and R mod just prints something,\n\n251\n00:15:55.984 --> 00:15:59.575\ndoesn't fail, So it continues on and\nthat's all it is.\n\n252\n00:15:59.575 --> 00:16:02.207\nThere's nothing available for you to use.\n\n253\n00:16:02.207 --> 00:16:10.420\nNow, Armont it's going to be a very\nspecific use case for Armont right?\n\n254\n00:16:10.420 --> 00:16:14.896\nIf you are using numbers and\nyou want to be able to support 2% a point,\n\n255\n00:16:14.896 --> 00:16:18.150\ntwo a point.\n\n256\n00:16:18.150 --> 00:16:21.260\nThat has a meaningful usage to you,\nthen implement our mod.\n\n257\n00:16:21.260 --> 00:16:26.660\nIf it doesn't, maybe you just leave\nit out and you let it fail, right?\n\n258\n00:16:26.660 --> 00:16:29.090\nBecause then that's a particular use case.\n\n259\n00:16:29.090 --> 00:16:34.660\nBut if we clear out and we look at P1 and\nP2, what if we say P1 percent\n\n260\n00:16:34.660 --> 00:16:41.640\nequals p2, just like that.\n\n261\n00:16:41.640 --> 00:16:47.970\nP1 is now 02, because it did the in\nplace modular or arithmetic, right?\n\n262\n00:16:47.970 --> 00:16:50.120\nSo 5 mod 1, well, it's 0.\n\n263\n00:16:50.120 --> 00:16:52.100\n5 mod 3, that's 2.\n\n264\n00:16:52.100 --> 00:16:54.450\nAnd now that's what's\nassigned to the p1 variable.\n\n265\n00:16:55.990 --> 00:16:59.710\nThat all works very similar to\nwhat we've seen with just regular\n\n266\n00:16:59.710 --> 00:17:00.570\nnumbers.\n&gt;&gt; Mm-hm.\n\n267\n00:17:00.570 --> 00:17:02.400\n&gt;&gt; Now you don't have to have that.\n\n268\n00:17:02.400 --> 00:17:04.090\nYou could have it be with strings.\n\n269\n00:17:04.090 --> 00:17:06.420\nMaybe you want to say, well,\n\n270\n00:17:06.420 --> 00:17:12.400\nif I mod two points I actually want\nto create a triangle object, right?\n\n271\n00:17:12.400 --> 00:17:16.560\nAnd just assimilate that\nshould be three points.\n\n272\n00:17:18.720 --> 00:17:21.650\nBetter yet if a mod two points\nI'm going to get a line.\n\n273\n00:17:21.650 --> 00:17:24.140\nLets say that's what\nyou want in your code.\n\n274\n00:17:24.140 --> 00:17:29.150\nYou're hijacking operators to\naccomplish a specific task.\n\n275\n00:17:29.150 --> 00:17:30.300\nI would probably not do this.\n\n276\n00:17:30.300 --> 00:17:34.560\nI just want to show that it is available\nand maybe it makes sense in your use case.\n\n277\n00:17:34.560 --> 00:17:35.200\nSo here we go.\n\n278\n00:17:35.200 --> 00:17:39.880\nLet's create another,\nlet's just say, line, like that.\n\n279\n00:17:39.880 --> 00:17:40.830\nAnd I'm gonna put a pass,\n\n280\n00:17:40.830 --> 00:17:45.820\nbecause it doesn't really matter what\nit is, just to show you what I mean.\n\n281\n00:17:45.820 --> 00:17:51.220\nSo instead of returning a point,\nlet's return a line.\n\n282\n00:17:53.510 --> 00:17:56.710\nAll right, so\npoint mod point, there we go.\n\n283\n00:17:57.740 --> 00:18:05.950\nSo Python and we're not even gonna\nget pretty print outs or anything.\n\n284\n00:18:05.950 --> 00:18:12.170\nSo p1 and p2, go p1 mod p2,and\nyou're gonna get a line back.\n\n285\n00:18:12.170 --> 00:18:13.130\nTwo points make a line.\n\n286\n00:18:14.560 --> 00:18:18.580\nSo, you can create relationships\nthis way using these modular,\n\n287\n00:18:18.580 --> 00:18:21.160\nor using this custom operator.\n\n288\n00:18:21.160 --> 00:18:26.260\nAnd you'll notice, this is one of\nthe times that we've seen that strings is\n\n289\n00:18:26.260 --> 00:18:31.900\ndrastically different in a abstract\nsense than it is in standard numbers.\n\n290\n00:18:32.950 --> 00:18:34.350\nSo using that,\n\n291\n00:18:34.350 --> 00:18:39.720\nmaybe this is an all right operator\nto to hijack, plus maybe not so much.\n\n292\n00:18:39.720 --> 00:18:42.230\nBut that ultimately depends upon you.\n\n293\n00:18:42.230 --> 00:18:47.670\nNow, just for completeness sake and\nthis is real quick we talked about powers.\n\n294\n00:18:48.670 --> 00:18:54.030\nSwitching around that, you have to be able\nIt has to make sense in some capacity,\n\n295\n00:18:54.030 --> 00:18:55.020\nright?\n&gt;&gt; Mm-hm.\n\n296\n00:18:55.020 --> 00:18:59.540\n&gt;&gt; So if I say mod, pow, all right.\n\n297\n00:19:01.720 --> 00:19:05.790\nSo that is just going to be dunder pow.\n\n298\n00:19:05.790 --> 00:19:07.600\nThat's a fun one to say.\n\n299\n00:19:07.600 --> 00:19:09.985\nI was gonna tell you,\nit's go be dunderpow.\n\n300\n00:19:09.985 --> 00:19:12.560\n&gt;&gt; [LAUGH] Dunderpow.\n\n301\n00:19:12.560 --> 00:19:16.530\nAnd effectivelly what we have is,\nwe're saying, when we implement pow,\n\n302\n00:19:16.530 --> 00:19:21.690\nthe self is the base and\nthe other is, well, the power.\n\n303\n00:19:21.690 --> 00:19:25.700\nThe actual exponent of\nthe power relationship.\n\n304\n00:19:25.700 --> 00:19:32.570\nSo I'm gonna return a point\nIt is self dot x other dot x.\n\n305\n00:19:32.570 --> 00:19:33.670\nI am making an assumption.\n\n306\n00:19:33.670 --> 00:19:36.040\nI am doing powers on points.\n&gt;&gt; Mhm.\n\n307\n00:19:36.040 --> 00:19:39.710\n&gt;&gt; Which in all real, being frank,\n\n308\n00:19:39.710 --> 00:19:43.660\nI don't know if that makes\na whole lot of sense.\n\n309\n00:19:43.660 --> 00:19:46.220\nBut there we go.\n\n310\n00:19:47.300 --> 00:19:50.670\nPower is one of those that\nmakes sense in numbers and\n\n311\n00:19:50.670 --> 00:19:52.050\nmaybe because of my background.\n\n312\n00:19:52.050 --> 00:19:53.250\nI kinda racked my brain.\n\n313\n00:19:53.250 --> 00:19:54.690\nI was like what\n\n314\n00:19:54.690 --> 00:19:57.480\nelse would that make sense in?\n&gt;&gt; [LAUGH]\n\n315\n00:19:57.480 --> 00:19:58.640\n&gt;&gt; I'm not entirely sure.\n\n316\n00:19:58.640 --> 00:20:02.490\nLike, it's typically going\nto be numbers related.\n\n317\n00:20:02.490 --> 00:20:06.210\nAnd these are meant to help\nyou emulate numeric types or\n\n318\n00:20:06.210 --> 00:20:11.100\nuse the numeric type operators for another\nobject so that just kinda comes par for\n\n319\n00:20:11.100 --> 00:20:12.020\nthe course.\n&gt;&gt; Right.\n\n320\n00:20:12.020 --> 00:20:14.792\n&gt;&gt; And that's not how you get out of.\n\n321\n00:20:14.792 --> 00:20:15.750\nThere we go.\n\n322\n00:20:15.750 --> 00:20:16.680\nSo if I come back.\n\n323\n00:20:19.308 --> 00:20:21.980\nAnd I look here, I got p1, p2.\n\n324\n00:20:21.980 --> 00:20:26.540\nIt would be at p1, power p2.\n\n325\n00:20:26.540 --> 00:20:34.330\nSo p1 power, p2, and now it's five to\nthe power of one, and that's five.\n\n326\n00:20:34.330 --> 00:20:36.780\nAnd five to the power of three,\n\n327\n00:20:36.780 --> 00:20:37.470\nwhich is 125.\n&gt;&gt; Mm-hm.\n\n328\n00:20:37.470 --> 00:20:41.080\n&gt;&gt; And now I can use this power, and\n\n329\n00:20:41.080 --> 00:20:45.320\nI get this like element wise power.\n&gt;&gt; Mm.\n\n330\n00:20:45.320 --> 00:20:47.710\n&gt;&gt; So, maybe instead of a point,\n\n331\n00:20:47.710 --> 00:20:50.400\n&gt;&gt; This could be, maybe, well\n\n332\n00:20:50.400 --> 00:20:54.930\nthis is again getting back to vectors,\nwhere, okay, maybe that's what that means.\n\n333\n00:20:54.930 --> 00:20:57.610\nMaybe this is a dot product or\nsomething of that nature.\n\n334\n00:20:57.610 --> 00:21:02.060\nOr maybe it's the element\nlies multiplication.\n\n335\n00:21:02.060 --> 00:21:03.770\nSo keep that in mind.\n\n336\n00:21:03.770 --> 00:21:06.430\nPower is available,\nit really needs to make sense.\n\n337\n00:21:06.430 --> 00:21:09.270\nAnd that's all there is to it.\n\n338\n00:21:09.270 --> 00:21:11.860\nIt follows a very similar pattern.\n\n339\n00:21:11.860 --> 00:21:17.300\nPower's a little different though\nbecause I don't have rpow or ipow.\n\n340\n00:21:17.300 --> 00:21:23.270\nWell, you know, Zach, I just started\nthinking, I'm pretty sure we don't.\n\n341\n00:21:23.270 --> 00:21:27.970\nBut you ever get to those points where you\nmake an assertion and you go but maybe.\n\n342\n00:21:27.970 --> 00:21:28.885\n&gt;&gt; I'm not sure.\n\n343\n00:21:28.885 --> 00:21:29.530\n&gt;&gt; [LAUGH]\n\n344\n00:21:29.530 --> 00:21:31.290\n&gt;&gt; Maybe I just messed up there,\n\n345\n00:21:31.290 --> 00:21:31.830\nright.\n&gt;&gt; Yeah.\n\n346\n00:21:31.830 --> 00:21:33.190\n&gt;&gt; And you have to backstep.\n\n347\n00:21:33.190 --> 00:21:35.890\nYou ever had one of those Zach?\n\n348\n00:21:35.890 --> 00:21:36.500\n&gt;&gt; Often.\n&gt;&gt; [LAUGH]\n\n349\n00:21:36.500 --> 00:21:37.090\n&gt;&gt; Daily basis.\n\n350\n00:21:37.090 --> 00:21:41.140\n&gt;&gt; So I think, just to make sure,\n\n351\n00:21:41.140 --> 00:21:45.850\nwe should probably double check to see if\nwe can do like in place powers, like star,\n\n352\n00:21:45.850 --> 00:21:47.150\nstar, equals.\n\n353\n00:21:47.150 --> 00:21:51.530\nBecause then we're probably gonna\nneed another dunder method and\n\n354\n00:21:51.530 --> 00:21:52.270\nthis will be real quick.\n\n355\n00:21:52.270 --> 00:21:58.278\nSo let's go ahead and come back into\nthe screen and calm my nerves, as it will.\n\n356\n00:21:58.278 --> 00:22:05.590\nLet's come here and\nlet's just look if I can do x = 2.\n\n357\n00:22:05.590 --> 00:22:07.210\nAnd then x **= 5.\n\n358\n00:22:07.210 --> 00:22:12.520\nx, there's 32, so\n\n359\n00:22:12.520 --> 00:22:17.429\nthere's an in-place power.\n\n360\n00:22:17.429 --> 00:22:21.845\nHm, well we were about to get\na little out of hand there, Zach.\n\n361\n00:22:21.845 --> 00:22:22.840\n&gt;&gt; [LAUGH]\n\n362\n00:22:22.840 --> 00:22:24.060\n&gt;&gt; And it's really,\n\n363\n00:22:24.060 --> 00:22:30.300\nit doesn't make sense to\n&gt;&gt; Our pal how would you test that?\n\n364\n00:22:30.300 --> 00:22:35.450\nCuz right now numbers are the only things\nthat you can use the power operator for\n\n365\n00:22:35.450 --> 00:22:38.110\nso we'll have to check that out.\n\n366\n00:22:38.110 --> 00:22:44.874\nWell here's how you test that int rpow and\n\n367\n00:22:44.874 --> 00:22:49.884\nrpow It's there,\n\n368\n00:22:49.884 --> 00:22:53.100\nso let's see if rpow is here.\n\n369\n00:22:54.160 --> 00:22:55.700\nIt is, rpow is there.\n\n370\n00:22:55.700 --> 00:22:58.520\nSo there's our right power as well.\n\n371\n00:22:59.670 --> 00:23:02.270\nHm, so you know what?\n\n372\n00:23:02.270 --> 00:23:05.990\nIt's kind of interesting, you make\nan assertion, you have to back up,\n\n373\n00:23:05.990 --> 00:23:08.005\nyou gotta fix it sometimes.\n&gt;&gt; Yep.\n\n374\n00:23:08.005 --> 00:23:08.592\n&gt;&gt; And\n\n375\n00:23:08.592 --> 00:23:12.720\nreally.\n&gt;&gt; It's rpow.\n\n376\n00:23:12.720 --> 00:23:20.794\nLet's just return self_pow_(other).\n\n377\n00:23:20.794 --> 00:23:25.142\nJust like that but\n\n378\n00:23:25.142 --> 00:23:30.830\nbecause it's not commutative you may\nget wayward results if you do that but\n\n379\n00:23:30.830 --> 00:23:33.510\nlet's see if we can get that done.\n\n380\n00:23:33.510 --> 00:23:40.790\nActually, let's say that we can take\na number to the power of a point, right?\n\n381\n00:23:40.790 --> 00:23:42.150\nSo return.\n\n382\n00:23:45.113 --> 00:23:48.475\nOther to the power of self.x.\n\n383\n00:23:48.475 --> 00:23:51.187\nJust to see kind of fun stuff there.\n\n384\n00:23:51.187 --> 00:24:00.540\nAnd then ipow That's other.\n\n385\n00:24:00.540 --> 00:24:03.540\nAnd then this should be in place for\nreturning self.\n\n386\n00:24:03.540 --> 00:24:09.874\nSo it's self.x is **= other.x.\n\n387\n00:24:09.874 --> 00:24:16.177\nSelf.y is **= other.y.\n\n388\n00:24:16.177 --> 00:24:21.304\nAnd then return self, like so, okay?\n\n389\n00:24:21.304 --> 00:24:26.970\nSo, this is the finale here Zach.\n\n390\n00:24:26.970 --> 00:24:28.630\nWe're about to see if this actually works.\n\n391\n00:24:29.690 --> 00:24:30.580\nAll right.\n\n392\n00:24:30.580 --> 00:24:32.070\nSo we have p1, p2, all right.\n\n393\n00:24:32.070 --> 00:24:36.950\nCan I do p1 power p2 still?\n\n394\n00:24:36.950 --> 00:24:37.964\nYep, that still works.\n\n395\n00:24:39.287 --> 00:24:42.580\nWhat if I do p2 to the power of p1?\n\n396\n00:24:44.130 --> 00:24:46.980\nThat's 32, so that did return something.\n\n397\n00:24:46.980 --> 00:24:49.000\nWhy did that return something?\n\n398\n00:24:49.000 --> 00:24:53.534\nWell, 2 to the power of p1.\n\n399\n00:24:53.534 --> 00:24:55.995\nThat doesn't make any sense, it goes\nI can't do that, that doesn't work.\n\n400\n00:24:55.995 --> 00:24:56.660\n&gt;&gt; Mm-hm.\n\n401\n00:24:56.660 --> 00:25:01.340\n&gt;&gt; Right, so what it does is it comes\n\n402\n00:25:01.340 --> 00:25:05.510\nover here and says p1.__rpal,\nand then the other is 2.\n\n403\n00:25:05.510 --> 00:25:10.850\nSo what we did is say return\nother to the power of the x1.\n\n404\n00:25:10.850 --> 00:25:13.580\nSo 2 to the power of 5 is in fact 32.\n\n405\n00:25:13.580 --> 00:25:18.640\nNow there's some crazy,\nlike, cycling through there.\n\n406\n00:25:18.640 --> 00:25:22.780\nBecause again,\ntwo to the power of a number?\n\n407\n00:25:22.780 --> 00:25:24.570\nI don't know, that's kind of weird.\n\n408\n00:25:24.570 --> 00:25:30.410\nI don't, but maybe you have a line\nto the power of a point and\n\n409\n00:25:30.410 --> 00:25:33.400\nyou go,\nwell I'm just adding a point to the line.\n\n410\n00:25:34.930 --> 00:25:35.850\nDon't necessarily do those,\n\n411\n00:25:35.850 --> 00:25:37.770\nbut maybe you're just having\na little bit of fun with it.\n\n412\n00:25:37.770 --> 00:25:39.710\nSo you need to know about that.\n\n413\n00:25:39.710 --> 00:25:46.070\nAnd then p1, what if we say p1 **= p2 and\n\n414\n00:25:46.070 --> 00:25:53.680\nthere we go, that is 5,125 because\nit did that in place power operator.\n\n415\n00:25:53.680 --> 00:25:57.860\nAnd there you have it Zach both powers and\nmodules have well, pow and\n\n416\n00:25:57.860 --> 00:26:02.260\nmod, rmod and rpow, and ipow and imod.\n\n417\n00:26:02.260 --> 00:26:06.650\nAnd if someone takes that and pulls it out\nof context and just has me going mod and\n\n418\n00:26:06.650 --> 00:26:11.830\npow, ipow and imod, and rmod and\nrpow, they're gonna go,\n\n419\n00:26:11.830 --> 00:26:12.986\nhe's a crazy person.\n&gt;&gt; [LAUGH]\n\n420\n00:26:12.986 --> 00:26:15.139\n&gt;&gt; But that's how this all comes to\n\n421\n00:26:15.139 --> 00:26:16.017\nfruition and\n\n422\n00:26:16.017 --> 00:26:21.222\nthose are very specific operators that\nyou need to know that they're there.\n\n423\n00:26:21.222 --> 00:26:24.708\nCuz maybe they crop up for\nyour use case, but by and\n\n424\n00:26:24.708 --> 00:26:29.440\nlarge they're not gonna used a great deal.\n&gt;&gt; Well Justin, if you're crazy,\n\n425\n00:26:29.440 --> 00:26:31.100\nyou're crazy like a fox.\n\n426\n00:26:31.100 --> 00:26:34.730\nMake sure you stay tuned for the next\nexciting episode of modular wind powers.\n\n427\n00:26:34.730 --> 00:26:36.180\nNo, that's not gonna happen.\n&gt;&gt; [LAUGH]\n\n428\n00:26:36.180 --> 00:26:37.640\n&gt;&gt; Before we move on, Justin,\n\n429\n00:26:37.640 --> 00:26:40.260\nany last words?\n&gt;&gt; Well, I'm ready for that modular\n\n430\n00:26:40.260 --> 00:26:42.380\nempower series to come out already.\n&gt;&gt; [LAUGH]\n\n431\n00:26:42.380 --> 00:26:45.440\n&gt;&gt; But no, just take care.\n\n432\n00:26:45.440 --> 00:26:49.400\nMake sure you're thinking about\nthe meaning behind what you're doing,\n\n433\n00:26:49.400 --> 00:26:51.020\nother than just willy nilly.\n\n434\n00:26:51.020 --> 00:26:54.070\nIf you're learning,\nmaybe you're all right, having fun.\n\n435\n00:26:54.070 --> 00:26:57.860\nIf you're working on an actual project,\ndon't just start overwriting operators.\n\n436\n00:26:57.860 --> 00:27:00.060\nBut, that's all I have for today.\n&gt;&gt; Fantastic,\n\n437\n00:27:00.060 --> 00:27:01.410\ngreat episode as usual Justin.\n\n438\n00:27:01.410 --> 00:27:05.090\nAnd everything is wonderful, I think,\ninside the Python Data Model series.\n\n439\n00:27:05.090 --> 00:27:06.990\nMake sure you watch every\nsingle one of those.\n\n440\n00:27:06.990 --> 00:27:10.470\nAnd while you're in the course library,\nthere's thousands of other videos there.\n\n441\n00:27:10.470 --> 00:27:12.840\nCheck those out too,\nthey're gonna help you out.\n\n442\n00:27:12.840 --> 00:27:15.030\nAnd tell everybody you\nknow about DevProTV.\n\n443\n00:27:15.030 --> 00:27:16.554\nYou know a good dev pro\nis always learning.\n\n444\n00:27:16.554 --> 00:27:18.570\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n445\n00:27:18.570 --> 00:27:20.092\n&gt;&gt; And we will see you soon.\n\n446\n00:27:20.092 --> 00:27:25.182\n[MUSIC]\n\n",
          "vimeoId": "253278167"
        },
        {
          "description": "In this episode, Justin and Zach dive into customizing the bit-shifting operations for a custom object using \\_\\_rshift\\_\\_, \\_\\_rrshift\\_\\_, \\_\\_lshift\\_\\_, \\_\\_rlshift\\_\\_, \\_\\_ilshift\\_\\_, and \\_\\_irshift\\_\\_.",
          "length": "1318",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-6-1-bit_shifting_operations-013118-PGM.00_23_37_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-6-1-bit_shifting_operations-013118-PGM.00_23_37_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-6-1-bit_shifting_operations-013118-PGM.00_23_37_05.Still001-sm.jpg",
          "title": "Bit Shifting Operations",
          "transcript": "WEBVTT\n\n1\n00:00:00.139 --> 00:00:10.139\n[MUSIC]\n\n2\n00:00:12.933 --> 00:00:16.358\nHi, thank you for choosing DevProTV,\nhelping you learn wherever you go.\n\n3\n00:00:16.358 --> 00:00:19.899\nI'm your host, Zach Memos,\non another episode of Python Data Model.\n\n4\n00:00:19.899 --> 00:00:22.900\nThis episode is Bit Shifting Operations.\n\n5\n00:00:22.900 --> 00:00:26.390\nBit shifting operations,\nwanted to make sure I said that again so\n\n6\n00:00:26.390 --> 00:00:27.934\nwe are all clear on that.\n\n7\n00:00:27.934 --> 00:00:28.530\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n8\n00:00:28.530 --> 00:00:30.630\nJustin Denison is bringing\nus the information we need.\n\n9\n00:00:30.630 --> 00:00:31.620\nJustin, good to see you sir.\n\n10\n00:00:31.620 --> 00:00:34.510\n&gt;&gt; It is good to be back, Zach,\nand you're absolutely correct.\n\n11\n00:00:34.510 --> 00:00:39.145\nBit shifting,\ngotta be careful saying that.\n\n12\n00:00:39.145 --> 00:00:40.160\n&gt;&gt; [LAUGH]\n&gt;&gt; Operations.\n\n13\n00:00:40.160 --> 00:00:42.860\nAnd look, what is bit shifting?\n\n14\n00:00:42.860 --> 00:00:45.520\nWell, last couple of episodes and\n\n15\n00:00:45.520 --> 00:00:50.490\nthis episode, there are some numeric\noperations that you may not use very much.\n\n16\n00:00:50.490 --> 00:00:53.480\nMaybe some numeric types or\nrepresentations, but\n\n17\n00:00:53.480 --> 00:00:57.340\nmaybe just that edge case,\nyou need to know how things work.\n\n18\n00:00:57.340 --> 00:01:03.340\nAnd maybe you have a lot of custom objects\nthat need that ability to do so, right?\n\n19\n00:01:03.340 --> 00:01:05.960\nNow we are gonna do a little\nbit of exploration.\n\n20\n00:01:05.960 --> 00:01:09.260\nBit shifting is not something\nthat I do a whole great deal of.\n\n21\n00:01:10.370 --> 00:01:13.260\nIf you come from a language that\nmaybe does signal processing or\n\n22\n00:01:13.260 --> 00:01:18.235\nmaybe image manipulation, and\nyou're doing it very low level like C or\n\n23\n00:01:18.235 --> 00:01:20.080\nC++, you may encounter these operations.\n\n24\n00:01:21.470 --> 00:01:26.260\nBy and large, though, most people\ndon't use them, but that's all right.\n\n25\n00:01:26.260 --> 00:01:30.650\nWe'll hopefully illuminate\nwhat's going on, right?\n\n26\n00:01:30.650 --> 00:01:33.970\nAnd then, we'll show you how to use\nthat in the context of a custom module.\n\n27\n00:01:33.970 --> 00:01:38.530\nBecause they're not used that often and\nthey're edge cases, we're more or\n\n28\n00:01:38.530 --> 00:01:43.660\nless just going to write an object\nto see how to override these methods\n\n29\n00:01:43.660 --> 00:01:46.965\nthat will allow us to use these operators.\n\n30\n00:01:46.965 --> 00:01:49.360\nIt's not ultimately super meaningful.\n\n31\n00:01:49.360 --> 00:01:51.740\nFull disclosure, I racked my brain.\n\n32\n00:01:51.740 --> 00:01:54.380\nI was like, all right,\nhow can I make this approachable?\n\n33\n00:01:54.380 --> 00:01:54.880\nHow would?\n\n34\n00:01:56.090 --> 00:01:59.760\nI fell back and I was like,\nmaybe I should just worry about\n\n35\n00:01:59.760 --> 00:02:03.320\nkeeping it in simple instead of\nmaking it approachable, right?\n\n36\n00:02:03.320 --> 00:02:05.430\nLike, I would use it, but\nthen it's not simple.\n\n37\n00:02:05.430 --> 00:02:08.200\nSo it was a tradeoff, so to speak.\n\n38\n00:02:08.200 --> 00:02:10.480\nSo let's go ahead and\ncome to the screen here.\n\n39\n00:02:10.480 --> 00:02:15.280\nAnd let's take a look at bit shifting.\n\n40\n00:02:15.280 --> 00:02:17.780\nWhew, man I tell you what Zach,\nyou have made me nervous.\n\n41\n00:02:17.780 --> 00:02:19.732\n&gt;&gt; [LAUGH]\n&gt;&gt; Every time I say this word.\n\n42\n00:02:19.732 --> 00:02:22.946\nLike [SOUND], I don't know why,\nbit shifting.\n\n43\n00:02:22.946 --> 00:02:28.641\nI know, but sometimes I have\na real bad tendency to mumble and\n\n44\n00:02:28.641 --> 00:02:32.720\nthings get lost in translation.\n\n45\n00:02:32.720 --> 00:02:34.310\nHowever, bit shifting.\n\n46\n00:02:34.310 --> 00:02:35.960\nLet's think about it,\n\n47\n00:02:35.960 --> 00:02:40.290\nand I'm picking these numbers\nintentionally, for full disclosure.\n\n48\n00:02:40.290 --> 00:02:45.800\nSo if I do 512 and\nI put two greater than signs.\n\n49\n00:02:45.800 --> 00:02:47.910\nThis is a right shift.\n\n50\n00:02:47.910 --> 00:02:52.920\nLet's see here, I'm actually going to\nsay right shift one, and it's 256.\n\n51\n00:02:52.920 --> 00:02:58.000\nIt is equivalent of dividing by two.\n\n52\n00:02:58.000 --> 00:03:02.080\nNow notice the vision gives me a float,\nwhereas that keeps it an integer.\n\n53\n00:03:02.080 --> 00:03:06.780\nWhat if I do 512, 2, it's 128.\n\n54\n00:03:06.780 --> 00:03:09.780\nThat's the same as saying 512 divided 4.\n\n55\n00:03:10.880 --> 00:03:16.660\nOr put another,\nway 512 divided by 2 to the power of 2.\n\n56\n00:03:16.660 --> 00:03:21.550\nNotice this 2 right here also\ncorresponds with this 2.\n\n57\n00:03:21.550 --> 00:03:24.800\nSo it's how many times we're\ngoing to divide by two,\n\n58\n00:03:24.800 --> 00:03:29.150\nnow that's a right shift, and\nif we do that and we still get 128.\n\n59\n00:03:29.150 --> 00:03:32.414\nNow, I'm gonna start lower here,\nI'm gonna start 16 and\n\n60\n00:03:32.414 --> 00:03:34.150\nI'm gonna do a left shift by 1.\n\n61\n00:03:34.150 --> 00:03:35.180\nNotice that's 32.\n\n62\n00:03:35.180 --> 00:03:42.640\nWell, left shift is the same way of\nexpressing multiplication by 2, all right?\n\n63\n00:03:42.640 --> 00:03:47.720\nRight, so let's say 32 left shift 3,\nthat's 256.\n\n64\n00:03:47.720 --> 00:03:48.676\nBut how do I get that?\n\n65\n00:03:48.676 --> 00:03:52.040\nThat's 32 * 8, or\n\n66\n00:03:52.040 --> 00:03:58.220\nalso seen as 2 to the 3rd power,\nwhich is where the 3 comes from.\n\n67\n00:03:58.220 --> 00:04:01.070\nSo we can either model multiplying or\ndividing by 2.\n\n68\n00:04:01.070 --> 00:04:04.760\nNow some of you are like,\nwhy do I care about 2?\n\n69\n00:04:04.760 --> 00:04:07.615\nWell 2 is the source of binary, right?\n\n70\n00:04:07.615 --> 00:04:08.858\nWe have a 0 or 1.\n\n71\n00:04:08.858 --> 00:04:12.505\nSo if you had real low level\nbinary operations, well,\n\n72\n00:04:12.505 --> 00:04:16.940\nbit shifting may be something\nthat you need to use, okay?\n\n73\n00:04:16.940 --> 00:04:20.340\nSo just keep that in mind and\nyou know what?\n\n74\n00:04:20.340 --> 00:04:24.850\nBecause I said the word binary,\nlet's do this.\n\n75\n00:04:24.850 --> 00:04:27.500\nI think I can do bin(2).\n\n76\n00:04:27.500 --> 00:04:28.760\nThat's 10, right?\n\n77\n00:04:30.130 --> 00:04:32.970\nOkay, well there's one 2 and zero 1s.\n\n78\n00:04:32.970 --> 00:04:38.731\nSo what if I say, bin(2) and\n\n79\n00:04:38.731 --> 00:04:42.280\nI left shift by 1?\n\n80\n00:04:42.280 --> 00:04:45.720\nSo I'd multiply by 2,\nlet's see what happens.\n\n81\n00:04:45.720 --> 00:04:50.020\nWell, I've taken this 1 and\nI've shifted it over 1 digit.\n\n82\n00:04:50.020 --> 00:04:51.210\nBut what does that give me?\n\n83\n00:04:51.210 --> 00:04:56.440\nIt gives me the next power,\nof 2 to the second.\n\n84\n00:04:56.440 --> 00:05:02.020\nIf I do the same thing with 3,\nthen notice I've taken this 1 and\n\n85\n00:05:02.020 --> 00:05:05.980\nI've moved it over and replaced it\nwith a 0, and that's actually where\n\n86\n00:05:05.980 --> 00:05:10.830\nthe shifting operation I'm shifting it to\nthe left, or I can shift it to the right.\n\n87\n00:05:11.910 --> 00:05:14.420\nAnd so\nI could do something like this, 256,\n\n88\n00:05:14.420 --> 00:05:16.960\nshift to the, let's just look at that.\n\n89\n00:05:16.960 --> 00:05:19.890\nThere's 1 with a bunch of 0's,\nand actually let's see here.\n\n90\n00:05:19.890 --> 00:05:23.230\nWe got 3, 6, 8 0s.\n\n91\n00:05:23.230 --> 00:05:25.570\nThat's the binary representation.\n\n92\n00:05:25.570 --> 00:05:32.580\nWhat about bin(256) shifted\nto the right four times?\n\n93\n00:05:34.050 --> 00:05:36.210\nNotice I have four 0s.\n\n94\n00:05:36.210 --> 00:05:40.999\nOriginally I had eight, so\nI moved everything over four places and\n\n95\n00:05:40.999 --> 00:05:42.220\ncut it off.\n\n96\n00:05:42.220 --> 00:05:44.990\nThat's actually where\nthe shifting comes from.\n\n97\n00:05:44.990 --> 00:05:49.380\nWe're shifting essentially binary places,\nbinary digit places.\n\n98\n00:05:49.380 --> 00:05:52.190\nSo do keep that in mind,\na little added extra for you.\n\n99\n00:05:52.190 --> 00:05:55.390\nI think it's important to have context\nof what these are before we see how to\n\n100\n00:05:55.390 --> 00:05:56.360\noverride them.\n\n101\n00:05:56.360 --> 00:05:58.300\nBut that's enough yammering along.\n\n102\n00:05:58.300 --> 00:06:00.090\nLet's actually see how these help.\n\n103\n00:06:00.090 --> 00:06:01.560\n&gt;&gt; You like your yammering.\n\n104\n00:06:01.560 --> 00:06:03.400\nYammer as much as you want.\n\n105\n00:06:03.400 --> 00:06:05.870\n&gt;&gt; Well,\nyou're giving me free permission, Zach.\n\n106\n00:06:05.870 --> 00:06:08.040\nCould get a little crazy in here.\n\n107\n00:06:08.040 --> 00:06:12.223\nBut let's go ahead and say bit shifting.\n\n108\n00:06:12.223 --> 00:06:13.930\nNow, here's what's gonna happen.\n\n109\n00:06:13.930 --> 00:06:15.560\nI didn't show you all the operations.\n\n110\n00:06:15.560 --> 00:06:20.680\nWe have left shift, a right shift,\nbut we also had in place shifting.\n\n111\n00:06:20.680 --> 00:06:22.170\nAnd just like add, subtract,\n\n112\n00:06:22.170 --> 00:06:25.100\nmultiply, divide, all of those,\nwe have the opposite.\n\n113\n00:06:25.100 --> 00:06:28.270\nIt will try left shift, right.\n\n114\n00:06:28.270 --> 00:06:30.230\nRight, if we're doing a right shift.\n\n115\n00:06:30.230 --> 00:06:32.900\nIf that's not capable,\nit will take the right argument and\n\n116\n00:06:32.900 --> 00:06:34.870\nsay, hey is there a left right shift?\n\n117\n00:06:36.670 --> 00:06:40.180\nEssentially like R add,\nR mod, R sub, those things.\n\n118\n00:06:40.180 --> 00:06:42.430\nAll right, so what am I gonna do?\n\n119\n00:06:42.430 --> 00:06:46.500\nWell, I'm gonna create a class\ncalled binary, and this is like,\n\n120\n00:06:46.500 --> 00:06:51.070\nwell I want a little more with\nmy binary representation.\n\n121\n00:06:51.070 --> 00:06:53.530\nSo I have a number and\n\n122\n00:06:53.530 --> 00:06:58.850\nI'm also choosing this to show you one\nedge case that you should be aware of.\n\n123\n00:06:58.850 --> 00:07:02.520\nNow, I'm also going to store\nthe binary version of that number\n\n124\n00:07:02.520 --> 00:07:06.260\nas the bin of number, like so.\n\n125\n00:07:06.260 --> 00:07:11.980\nAll right, now, let's go ahead and\ncreate a repr or a reaper method.\n\n126\n00:07:13.090 --> 00:07:15.340\nSo we can print it out and\nhave a meaningful output.\n\n127\n00:07:16.490 --> 00:07:17.220\nSo here we go.\n\n128\n00:07:17.220 --> 00:07:18.513\nThat's binary.\n\n129\n00:07:18.513 --> 00:07:24.642\nAnd number = [self.number].\n\n130\n00:07:24.642 --> 00:07:28.440\nAnd then binnumber, and\n\n131\n00:07:28.440 --> 00:07:32.360\nit's kinda repetitive but\nbinary is the class, the object type.\n\n132\n00:07:32.360 --> 00:07:35.990\nAnd [self._bin number.\n\n133\n00:07:35.990 --> 00:07:38.250\nNow I put an underscore\nthere just to say hey,\n\n134\n00:07:39.280 --> 00:07:41.240\nthis is behind the scenes\nI'm storing this data.\n\n135\n00:07:41.240 --> 00:07:43.380\nBut you really shouldn't\nbe messing with it.\n\n136\n00:07:43.380 --> 00:07:44.180\nCan you mess with it?\n\n137\n00:07:44.180 --> 00:07:46.390\nSure, if you know a lot about Python,\nabsolutely.\n\n138\n00:07:46.390 --> 00:07:48.156\nBut I'm telling you, you shouldn't.\n\n139\n00:07:48.156 --> 00:07:53.029\n&gt;&gt; [LAUGH]\n&gt;&gt; Now this is we've seen thus far these\n\n140\n00:07:53.029 --> 00:07:55.988\nkind of two argument operations,\n\n141\n00:07:55.988 --> 00:08:01.100\nwhich incidentally enough\nare called binary operations.\n\n142\n00:08:01.100 --> 00:08:04.449\nWe've seen these dunder methods,\nright, dunder add,\n\n143\n00:08:04.449 --> 00:08:09.006\ndunder r add, which is the opposite,\nright, if things don't work just so.\n\n144\n00:08:09.006 --> 00:08:14.350\nBut now we have a left shift and\na right shift.\n\n145\n00:08:14.350 --> 00:08:18.410\nI usually, this is the point in the show\nwhere I throw Zach under the bus.\n\n146\n00:08:18.410 --> 00:08:21.906\nBut because these are operators and\nthere's not a corresponding function that\n\n147\n00:08:21.906 --> 00:08:24.524\nI'm showing off,\nyou're off the hook on this one, Zach.\n\n148\n00:08:24.524 --> 00:08:26.310\nSo we're gonna leave you be here.\n\n149\n00:08:26.310 --> 00:08:27.251\nAre you all right with that?\n\n150\n00:08:27.251 --> 00:08:28.350\n&gt;&gt; Can I throw a guess?\n\n151\n00:08:28.350 --> 00:08:29.790\n&gt;&gt; Yeah, absolutely if you wanna guess.\n\n152\n00:08:29.790 --> 00:08:31.257\n&gt;&gt; lshift?\n\n153\n00:08:31.257 --> 00:08:33.994\n&gt;&gt; Actually, Zach, that's awesome.\n\n154\n00:08:33.994 --> 00:08:36.520\n&gt;&gt; [LAUGH]\n&gt;&gt; Yes, lshift is left shift.\n\n155\n00:08:36.520 --> 00:08:39.388\n&gt;&gt; Yeah.\n&gt;&gt; Then if lshift is left shift,\n\n156\n00:08:39.388 --> 00:08:42.400\nI do wonder what right shift is?\n\n157\n00:08:42.400 --> 00:08:44.374\n&gt;&gt; b, just letter b, all by itself.\n\n158\n00:08:44.374 --> 00:08:46.215\n&gt;&gt; [LAUGH]\n&gt;&gt; rshift.\n\n159\n00:08:46.215 --> 00:08:49.367\n&gt;&gt; rshift, exactly right, so cool deal.\n\n160\n00:08:49.367 --> 00:08:53.580\nWhen Zach has taken us all in and\ninternalizing in and\n\n161\n00:08:53.580 --> 00:09:00.650\nthen he's making guesses, right,\nthat are educated by previous episodes.\n\n162\n00:09:00.650 --> 00:09:03.030\nThat is effectively what\neverybody should strive to do.\n\n163\n00:09:03.030 --> 00:09:04.690\n&gt;&gt; I am a dunder head.\n\n164\n00:09:04.690 --> 00:09:05.287\n&gt;&gt; Well, there you go.\n\n165\n00:09:05.287 --> 00:09:07.263\n&gt;&gt; [LAUGH]\n&gt;&gt; I don't know if that has a positive\n\n166\n00:09:07.263 --> 00:09:07.950\nconnotation.\n\n167\n00:09:07.950 --> 00:09:08.983\n[CROSSTALK] But now,\n\n168\n00:09:08.983 --> 00:09:12.278\nwhat does that mean in the context\nof this binary thing, right?\n\n169\n00:09:12.278 --> 00:09:14.710\nOkay, let's see here.\n\n170\n00:09:14.710 --> 00:09:17.568\nHow do we provide this?\n\n171\n00:09:20.647 --> 00:09:24.630\nWell, I need to return\na new binary object.\n\n172\n00:09:24.630 --> 00:09:30.650\nAnd I'm going to say self.number and\nthen left shift.\n\n173\n00:09:30.650 --> 00:09:34.440\nI'm actually just going to put these in\nplace and delegate it back to the number.\n\n174\n00:09:35.520 --> 00:09:37.924\nBut just like all of our other add,\nsubtract, multiply,\n\n175\n00:09:37.924 --> 00:09:39.261\nthere's this other argument.\n\n176\n00:09:39.261 --> 00:09:44.090\nNow I'm gonna make\nthe assumption that we're going\n\n177\n00:09:44.090 --> 00:09:48.587\nto be left shifting with\nanother binary object,\n\n178\n00:09:48.587 --> 00:09:52.265\nnot a float, not an int, any of those.\n\n179\n00:09:52.265 --> 00:09:55.810\nother.number, just like that.\n\n180\n00:09:55.810 --> 00:09:58.233\nNow because I'm constructing\nthis _binnumber,\n\n181\n00:09:58.233 --> 00:10:01.570\nit's gonna be handled for me, okay?\n\n182\n00:10:01.570 --> 00:10:08.276\nAnd since Zach's already brought it up,\nrshift, And\n\n183\n00:10:08.276 --> 00:10:15.597\nreturn Binary and\nself.number other.number, just like that.\n\n184\n00:10:15.597 --> 00:10:19.049\nOkay, let's create us\na couple of binary objects.\n\n185\n00:10:19.049 --> 00:10:20.649\nBinary, and let's go with 2.\n\n186\n00:10:20.649 --> 00:10:25.376\nAnd then we're gonna keep this simple\njust because it's easy to reason\n\n187\n00:10:25.376 --> 00:10:30.117\nabout multiplying or dividing by 2 if,\nwell, they're powers of 2.\n\n188\n00:10:30.117 --> 00:10:34.410\nAnd then we're gonna say Binary(32),\njust like that.\n\n189\n00:10:34.410 --> 00:10:41.120\nSo let's escape, get out of there,\nand say python3 -i, and there we go.\n\n190\n00:10:41.120 --> 00:10:42.835\nSo what do we have?\n\n191\n00:10:42.835 --> 00:10:48.870\nb1, b2, b, excuse me, and\nthere we have our representation.\n\n192\n00:10:48.870 --> 00:10:53.618\nSo now if I say b left shift b1,\n\n193\n00:10:53.618 --> 00:10:57.835\nthen [SOUND] what happened?\n\n194\n00:10:57.835 --> 00:11:02.127\nWell, because of my logic I\nleft shifted by 32 times.\n\n195\n00:11:02.127 --> 00:11:06.461\nAnd that means that I\nmultiplied by 2 32 times.\n\n196\n00:11:06.461 --> 00:11:08.078\n&gt;&gt; Well, that's fine.\n\n197\n00:11:08.078 --> 00:11:11.465\n&gt;&gt; Yeah, that's 2 to the 32nd power,\nwhich is, well, it's a big number.\n\n198\n00:11:11.465 --> 00:11:12.142\n&gt;&gt; Big number.\n\n199\n00:11:12.142 --> 00:11:18.680\n&gt;&gt; As you can see, it is actually\nsomewhere around there, okay?\n\n200\n00:11:18.680 --> 00:11:23.881\nNow, if I reverse that and\nsay b1 left shift b,\n\n201\n00:11:23.881 --> 00:11:28.954\nI get 128 because I multiplied by 2 twice,\n\n202\n00:11:28.954 --> 00:11:31.697\nbut I started with 32.\n\n203\n00:11:31.697 --> 00:11:35.636\nSo 32 times 2 is 64, times 2 again is 128.\n\n204\n00:11:35.636 --> 00:11:39.850\nSo these left shift operators do work,\nright?\n\n205\n00:11:39.850 --> 00:11:47.466\nNow, what happens if I have\nsomething like 2 left shift b?\n\n206\n00:11:47.466 --> 00:11:52.517\nWell, we haven't done that because we\nhaven't handled an integer on the left and\n\n207\n00:11:52.517 --> 00:11:54.359\na binary object on the right.\n\n208\n00:11:54.359 --> 00:11:56.542\nSo do keep that in mind.\n\n209\n00:11:56.542 --> 00:11:58.328\nBut let's get out of here and look.\n\n210\n00:11:58.328 --> 00:12:03.440\nWhat are the corresponding methods for\nthe other ones?\n\n211\n00:12:03.440 --> 00:12:05.770\nAnd make sure you don't\naccidentally remove your c there.\n\n212\n00:12:06.790 --> 00:12:08.870\nAnd so\nthis is where it gets a little tricky.\n\n213\n00:12:09.910 --> 00:12:14.247\nI need the right left shift, right?\n\n214\n00:12:14.247 --> 00:12:17.762\nSo if it doesn't work from left to right,\ntry the right to left.\n\n215\n00:12:17.762 --> 00:12:18.360\n&gt;&gt; Okay.\n&gt;&gt; Okay?\n\n216\n00:12:18.360 --> 00:12:19.583\n&gt;&gt; Makes sense.\n\n217\n00:12:19.583 --> 00:12:27.198\n&gt;&gt; So self, other, and\nwe're gonna return Binary self.number.\n\n218\n00:12:27.198 --> 00:12:30.961\nWait a minute, this is left,\nso it's the right left one.\n\n219\n00:12:33.454 --> 00:12:35.080\nNaming's hard.\n\n220\n00:12:35.080 --> 00:12:39.027\nAnd then if we have the right left shift,\nwell, then what do we have?\n\n221\n00:12:39.027 --> 00:12:40.519\nWe have the right right shift.\n\n222\n00:12:42.688 --> 00:12:44.414\nSo starting on the right-hand argument.\n\n223\n00:12:44.414 --> 00:12:50.526\nAll right, so Binary self.number,\n\n224\n00:12:50.526 --> 00:12:53.391\nother.number.\n\n225\n00:12:53.391 --> 00:12:58.279\nNow, if I ever wanted to be\nable to have two right shift,\n\n226\n00:12:58.279 --> 00:13:03.167\nsome binary object just like we saw,\nthen I would need to\n\n227\n00:13:03.167 --> 00:13:07.960\nadd additional logic as we\nhave in previous episodes.\n\n228\n00:13:09.390 --> 00:13:13.779\nWhere maybe I'll come here and I say,\n\n229\n00:13:13.779 --> 00:13:17.070\nif isinstance other of int,\n\n230\n00:13:17.070 --> 00:13:22.143\nthen do the following, one, two, three,\n\n231\n00:13:22.143 --> 00:13:28.882\nfour, return the Binary of\nself.number other, right?\n\n232\n00:13:28.882 --> 00:13:36.350\nInstead of other.number,\njust the respective number.\n\n233\n00:13:36.350 --> 00:13:39.110\nSo we'll test that out,\nbut let's get out of here.\n\n234\n00:13:39.110 --> 00:13:44.643\nLook one more time and\nsay, python3 -i, okay.\n\n235\n00:13:44.643 --> 00:13:50.700\nSo b left shift b1, that still works,\nit's a really large number.\n\n236\n00:13:50.700 --> 00:13:56.495\nIf I say b right shift b1,\nnumber, all the way to 0.\n\n237\n00:13:57.830 --> 00:14:04.352\nIf I say b left shift 1,\nit's broke because I try,\n\n238\n00:14:04.352 --> 00:14:09.100\nint object has no attribute number.\n\n239\n00:14:09.100 --> 00:14:12.724\nBut what if I now reverse\nthe order of those and\n\n240\n00:14:12.724 --> 00:14:16.808\nsay that attribute number, then do that,\n\n241\n00:14:16.808 --> 00:14:22.970\nthe only one I have logic for is for\nright shift, right, right shift.\n\n242\n00:14:22.970 --> 00:14:24.417\nAnd that should work.\n\n243\n00:14:24.417 --> 00:14:27.428\nAnd it does,\nit actually returns a binary object.\n\n244\n00:14:27.428 --> 00:14:31.590\nSo I can handle different data types,\nI just have to add additional logic.\n\n245\n00:14:31.590 --> 00:14:36.850\nBut I do have the ability to overwrite\nthe left shift or the right shift.\n\n246\n00:14:36.850 --> 00:14:40.442\nThere is a couple of slick tricks\nthat I've seen in other projects,\n\n247\n00:14:40.442 --> 00:14:43.466\nwhere they used the left shift and\nthe right shift to say,\n\n248\n00:14:43.466 --> 00:14:46.953\nrun this function and then send\nthat input to this next function.\n\n249\n00:14:46.953 --> 00:14:51.900\nAnd then run that function with whatever\ncame from the left, and more or less pipe\n\n250\n00:14:51.900 --> 00:14:56.640\nit from left to right, very similar\nto bash if you're familiar with that.\n\n251\n00:14:56.640 --> 00:14:58.995\n&gt;&gt; Sure.\n&gt;&gt; Right, or the left shift operator,\n\n252\n00:14:58.995 --> 00:15:02.260\nstart at the right-hand side,\nand then go to the left.\n\n253\n00:15:03.660 --> 00:15:06.189\nI thought about doing\nthat in this episode, but\n\n254\n00:15:06.189 --> 00:15:09.804\nit ended up being a whole lot of\ncomplexity to show one little piece.\n\n255\n00:15:09.804 --> 00:15:13.461\nAnd I was afraid that it would be\nlost that we're really focused on\n\n256\n00:15:13.461 --> 00:15:14.870\nthese special methods.\n\n257\n00:15:14.870 --> 00:15:20.211\nBut one final thing about this,\nand, well, if we have left shift,\n\n258\n00:15:20.211 --> 00:15:24.992\nright shift, right left shift,\nright right shift, well,\n\n259\n00:15:24.992 --> 00:15:29.640\nwe also have the ability\nto inplace shifting, okay?\n\n260\n00:15:29.640 --> 00:15:34.965\nWe have irshift, and that's still other.\n\n261\n00:15:34.965 --> 00:15:39.764\nAnd that's going to, well, gonna say\n\n262\n00:15:39.764 --> 00:15:45.160\nself.number right shift other.number.\n\n263\n00:15:45.160 --> 00:15:47.156\nAnd then return self, just like that.\n\n264\n00:15:47.156 --> 00:15:51.889\nAnd then we also have one for left shift.\n\n265\n00:15:57.336 --> 00:16:01.514\nAnd then self.number.\n\n266\n00:16:01.514 --> 00:16:02.789\nLeft shift other.number.\n\n267\n00:16:02.789 --> 00:16:06.850\nNow these have to be binary objects or\nlook like a binary object.\n\n268\n00:16:06.850 --> 00:16:10.129\nAnd then I'm gonna return self, okay?\n\n269\n00:16:10.129 --> 00:16:13.690\nNow we're actually gonna see\nsomething interesting, okay?\n\n270\n00:16:13.690 --> 00:16:17.290\nThis is gonna bring up an edge case where\nyou're like, yeah, I forgot about that.\n\n271\n00:16:17.290 --> 00:16:19.530\nIt actually recommends, and I've shown\nyou, you could do it either way.\n\n272\n00:16:19.530 --> 00:16:22.010\nYou could return a new object,\nit still works.\n\n273\n00:16:22.010 --> 00:16:25.380\nBut the recommendation is actually\ndo the mutation on the object and\n\n274\n00:16:25.380 --> 00:16:30.610\nthen return the object itself unless\nit's supposed to return something else.\n\n275\n00:16:30.610 --> 00:16:33.400\nLike if you take two date times and then\nsubtact them you should get a time delta.\n\n276\n00:16:34.430 --> 00:16:36.910\nThen it makes sense to actually\nreturn a different object.\n\n277\n00:16:36.910 --> 00:16:39.950\nSo just keep aware of those.\n\n278\n00:16:39.950 --> 00:16:43.773\nSo if I say python3 -i, like so and\n\n279\n00:16:43.773 --> 00:16:49.260\nthen I can say b which is 2,\nright, the number 2.\n\n280\n00:16:49.260 --> 00:16:53.510\nAnd then I say, b left left equals,\n\n281\n00:16:53.510 --> 00:16:57.494\nin place left shift, b, then b.\n\n282\n00:16:57.494 --> 00:17:03.500\nThis is kind of interesting, right?\n\n283\n00:17:03.500 --> 00:17:07.460\nWell, let's see if we run into\nsome other problems here.\n\n284\n00:17:07.460 --> 00:17:11.713\nLeft, left equals,\nmaybe because b is just behaving weirdly.\n\n285\n00:17:11.713 --> 00:17:19.460\nb, that doesn't really work, right?\n\n286\n00:17:19.460 --> 00:17:21.400\nNow why is that?\n\n287\n00:17:21.400 --> 00:17:24.672\nWell, number one,\npretty sure I have a typo.\n\n288\n00:17:24.672 --> 00:17:26.830\nBut number two-\n&gt;&gt; [LAUGH]\n\n289\n00:17:26.830 --> 00:17:28.560\n&gt;&gt; This wouldn't have worked anyway.\n\n290\n00:17:28.560 --> 00:17:31.720\nBut I can tell you,\nthat's not what I was trying to show you.\n\n291\n00:17:31.720 --> 00:17:34.080\nAnd I just figured out what's going on.\n\n292\n00:17:34.080 --> 00:17:34.983\n&gt;&gt; All right.\n\n293\n00:17:34.983 --> 00:17:40.540\n&gt;&gt; You actually have to use left\nleft equals right right equals.\n\n294\n00:17:40.540 --> 00:17:42.700\nNow, let me actually show you\nwhat I was trying to show you.\n\n295\n00:17:45.660 --> 00:17:48.380\nGets you every time but I can debug it.\n\n296\n00:17:48.380 --> 00:17:49.390\n&gt;&gt; All right.\n\n297\n00:17:49.390 --> 00:17:51.974\n&gt;&gt; I got those backwards in my haste.\n\n298\n00:17:56.980 --> 00:17:57.976\nThere we go.\n\n299\n00:18:01.470 --> 00:18:02.750\nAnd there we go.\n\n300\n00:18:02.750 --> 00:18:04.800\nAll right, now.\n\n301\n00:18:04.800 --> 00:18:06.350\nAnd you can do &lt;&lt;= b.\n\n302\n00:18:06.350 --> 00:18:12.200\nAnd we knew that b was 2, it says 8, but\nlook at the binary number right there.\n\n303\n00:18:13.510 --> 00:18:17.444\nIt still represents 2 just like it was,\nit didn't change.\n\n304\n00:18:17.444 --> 00:18:19.430\nAnd that's because we did\nthe inplace mutation.\n\n305\n00:18:19.430 --> 00:18:22.710\nSo if you take this route,\nif there are dependent values,\n\n306\n00:18:22.710 --> 00:18:26.280\nright, you're storing some\nother set of information.\n\n307\n00:18:26.280 --> 00:18:30.800\nYou need to also update those accordingly,\nokay?\n\n308\n00:18:30.800 --> 00:18:36.183\nSo let's go down here and\nsay self.binnumber\n\n309\n00:18:36.183 --> 00:18:43.160\n= the binary representation\nof self.number now.\n\n310\n00:18:43.160 --> 00:18:46.450\nAnd that's a little different than\nI put in the initialization method,\n\n311\n00:18:46.450 --> 00:18:49.980\nbecause I don't have\narguments being passed in.\n\n312\n00:18:49.980 --> 00:18:54.347\nI have to look at the respective\nstate of the object.\n\n313\n00:18:54.347 --> 00:18:57.620\nSo bin(self.number), like so.\n\n314\n00:18:57.620 --> 00:19:01.174\nAll right,\nI think we might have it good now, Zach.\n\n315\n00:19:01.174 --> 00:19:02.580\n&gt;&gt; All right.\n\n316\n00:19:02.580 --> 00:19:05.361\n&gt;&gt; So there's 2 0b10.\n\n317\n00:19:05.361 --> 00:19:07.028\nAll right, looks good.\n\n318\n00:19:07.028 --> 00:19:13.660\nAnd then if I do left shift equals b,\nit is now changing.\n\n319\n00:19:13.660 --> 00:19:16.240\nI actually moved it to 8, right?\n\n320\n00:19:16.240 --> 00:19:19.690\nBecause it multiplied 2 by 2 twice.\n\n321\n00:19:19.690 --> 00:19:25.930\nThat's 2 squared, and\nthen that actually updated the binary.\n\n322\n00:19:25.930 --> 00:19:31.280\nAnd let me make sure, so that should be,\nI might be getting some weirdness here.\n\n323\n00:19:31.280 --> 00:19:35.662\nBut I see one, so that's 2 to\nthe power of 0 to the power of 1.\n\n324\n00:19:35.662 --> 00:19:38.849\n2 to the power of 2,\nwe're good, we're good.\n\n325\n00:19:38.849 --> 00:19:41.200\nAll right, I was like, hold on a second.\n\n326\n00:19:41.200 --> 00:19:42.680\nNo, that's right.\n\n327\n00:19:42.680 --> 00:19:45.810\nNow, can I go the other way and get back?\n\n328\n00:19:47.000 --> 00:19:48.938\nCan I right shift equals?\n\n329\n00:19:48.938 --> 00:19:53.786\nAnd I'm actually gonna create\na binary object that contains 2\n\n330\n00:19:53.786 --> 00:19:57.650\nbecause I modified the one\nthat didn't have 2.\n\n331\n00:19:57.650 --> 00:20:00.750\nNow I get 2 back and\nit is updating accordingly.\n\n332\n00:20:00.750 --> 00:20:04.570\nSo if you're mutating in place and\nyou have dependent values like that\n\n333\n00:20:04.570 --> 00:20:08.470\n_binnumber, part of your data\nis interdependent on each other.\n\n334\n00:20:08.470 --> 00:20:12.420\nMake sure you update both of them if\nyou're doing mutation on the object,\n\n335\n00:20:12.420 --> 00:20:16.850\nespecially for those eye methods in place,\nL shift and right shift.\n\n336\n00:20:16.850 --> 00:20:20.470\nThen bit shifting,\nas I said at the beginning of this episode\n\n337\n00:20:20.470 --> 00:20:23.990\nis very specific to\na particular set of use cases.\n\n338\n00:20:25.110 --> 00:20:29.340\nYou may never find that you ever need\nto actually shift numbers left or\n\n339\n00:20:29.340 --> 00:20:32.420\nright, actually do bit\nshifting on the numbers.\n\n340\n00:20:32.420 --> 00:20:36.390\nBut, keep in mind, I have seen people\nhijack this operator because it's so\n\n341\n00:20:36.390 --> 00:20:41.560\nless used, and have it mean other things\nlike, function function function.\n\n342\n00:20:41.560 --> 00:20:46.740\nAnd now I have a function that is\na composition of all of those functions.\n\n343\n00:20:46.740 --> 00:20:49.660\nSo you can use it for that and\nmaybe if you're going\n\n344\n00:20:49.660 --> 00:20:53.130\nto hijack one of the operators, this is\nprobably one of the better ones to take.\n\n345\n00:20:53.130 --> 00:20:56.200\nBut Zach, that is it for bit shifting.\n\n346\n00:20:56.200 --> 00:20:57.330\n&gt;&gt; Very well done, Justin.\n\n347\n00:20:57.330 --> 00:21:01.855\nBit shifting operations, say it with me,\nbit shifting operations.\n\n348\n00:21:01.855 --> 00:21:05.080\nGreat episode inside\nthe Python Data Model series.\n\n349\n00:21:05.080 --> 00:21:07.700\nAnd before we move on,\nI know you wanna say something else.\n\n350\n00:21:07.700 --> 00:21:10.030\n&gt;&gt; Well,\nI could talk about what I had for lunch.\n\n351\n00:21:10.030 --> 00:21:12.880\nNo, no, I joke, I jest.\n\n352\n00:21:12.880 --> 00:21:17.820\nJust remember, make your decisions wisely\nwhen you're overriding these methods.\n\n353\n00:21:17.820 --> 00:21:19.870\nDon't do anything crazy.\n\n354\n00:21:19.870 --> 00:21:21.350\nAnd if you do, right, for\n\n355\n00:21:21.350 --> 00:21:23.990\nthis one actually I told you maybe\nthis was a good one to hijack.\n\n356\n00:21:23.990 --> 00:21:25.650\nJust make sure it's\ndocumented appropriately.\n\n357\n00:21:25.650 --> 00:21:28.610\n&gt;&gt; And make sure you watch every\nsingle episode of Python Data Model.\n\n358\n00:21:28.610 --> 00:21:31.370\nJustin's done a marvelous job\nputting this all together for you so\n\n359\n00:21:31.370 --> 00:21:32.990\nyou can use it now and in the future.\n\n360\n00:21:32.990 --> 00:21:33.590\nAnd you know what?\n\n361\n00:21:33.590 --> 00:21:36.760\nThe course library's full of other videos\nthat you can make some use of as well.\n\n362\n00:21:36.760 --> 00:21:39.750\nSo take a look at those, and\nyou'll have a fun time doing that.\n\n363\n00:21:39.750 --> 00:21:41.842\nAnd tell everybody you\nknow about DevProTV.\n\n364\n00:21:41.842 --> 00:21:43.740\nYou know a good Dev Pro\nis always learning.\n\n365\n00:21:43.740 --> 00:21:45.140\nThanks for watching, I'm Zach Memos.\n\n366\n00:21:45.140 --> 00:21:45.850\n&gt;&gt; And I'm Justin Dennison.\n\n367\n00:21:45.850 --> 00:21:47.351\n&gt;&gt; And we will see you soon.\n\n368\n00:21:47.351 --> 00:21:53.286\n[MUSIC]\n\n",
          "vimeoId": "253816692"
        },
        {
          "description": "In this episode, Justin and Zach continue with bit operations by creating custom behavior for the bitwise or, xor, and and using the \\_\\_and\\_\\_, \\_\\_or\\_\\_, \\_\\_xor\\_\\_, \\_\\_rand\\_\\_, \\_\\_ror\\_\\_, \\_\\_rxor\\_\\_, \\_\\_iand\\_\\_, \\_\\_ior\\_\\_, and \\_\\_ixor\\_\\_.",
          "length": "1558",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-7-1-bitwise_logical_operations-020118-PGM.00_00_12_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-7-1-bitwise_logical_operations-020118-PGM.00_00_12_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-7-1-bitwise_logical_operations-020118-PGM.00_00_12_23.Still001-sm.jpg",
          "title": "Bitwise Logical Operations",
          "transcript": "WEBVTT\n\n1\n00:00:00.820 --> 00:00:01.823\n[MUSIC]\n\n2\n00:00:01.823 --> 00:00:06.025\nHello, and thank you for\n\n3\n00:00:06.025 --> 00:00:10.028\nchoosing DEVPro.TV,\n\n4\n00:00:10.028 --> 00:00:16.040\nhelping you learn wherever you go.\n\n5\n00:00:16.040 --> 00:00:20.309\nI'm your host, Zach Memos, for\nanother episode of Python Data Model.\n\n6\n00:00:20.309 --> 00:00:23.310\nBitwise Logical Operations\nis the name of this episode.\n\n7\n00:00:23.310 --> 00:00:25.970\nAnd Justin Dennison has said\nthat he would show us the way.\n\n8\n00:00:25.970 --> 00:00:27.834\nIs that true, Justin?\n&gt;&gt; I'm gonna try my best,\n\n9\n00:00:27.834 --> 00:00:28.363\nZach.\n&gt;&gt; Good.\n\n10\n00:00:28.363 --> 00:00:30.330\n[LAUGH].\n&gt;&gt; We'll see how it goes.\n\n11\n00:00:30.330 --> 00:00:34.690\nBut these are another set of these\noperations where we don't have\n\n12\n00:00:34.690 --> 00:00:36.652\nquite the use for them, right?\n\n13\n00:00:36.652 --> 00:00:41.190\nSo Bitwise is typically when you have\nbits that represent something and\n\n14\n00:00:41.190 --> 00:00:45.640\nyou want to operate between\nrespective bits of objects.\n\n15\n00:00:45.640 --> 00:00:46.980\nTypically, we're gonna talk about numbers.\n\n16\n00:00:46.980 --> 00:00:50.890\nWe're actually going to do numbers, and\nmore or less just write a wrapper class.\n\n17\n00:00:50.890 --> 00:00:55.090\nNow, in the grand scheme of things,\nit can get a little more complicated.\n\n18\n00:00:55.090 --> 00:01:00.380\nI've seen these operations for, I've done\nsome data science in my previous life.\n\n19\n00:01:00.380 --> 00:01:02.990\nWell, data science,\nlet's put air quotes around it.\n\n20\n00:01:02.990 --> 00:01:07.080\nI'm not sure I was hardcore statistics\nperson, but some data analysis.\n\n21\n00:01:08.080 --> 00:01:13.110\nAnd part of that involved very large\narrays, where the arrays could be,\n\n22\n00:01:13.110 --> 00:01:19.150\nmaybe 1,000 elements and\neach array represent a true or a false.\n\n23\n00:01:19.150 --> 00:01:21.060\nAnd that's kinda like a bit,\nan on or an off.\n\n24\n00:01:21.060 --> 00:01:23.667\nWell, I wanted to see what the result,\n\n25\n00:01:23.667 --> 00:01:25.143\nthere we go [CROSSTALK]\n&gt;&gt; That's it.\n\n26\n00:01:25.143 --> 00:01:26.005\n&gt;&gt; I was having trouble getting that\n\n27\n00:01:26.005 --> 00:01:27.630\nout of there.\n&gt;&gt; You got it out.\n\n28\n00:01:27.630 --> 00:01:29.410\n&gt;&gt; The result of the true and\n\n29\n00:01:29.410 --> 00:01:32.320\nfalse, ORING, or ANDING, or\n\n30\n00:01:32.320 --> 00:01:36.000\nmaybe even XORING, or exclusive OR\n&gt;&gt; Uh-huh.\n\n31\n00:01:36.000 --> 00:01:37.340\n&gt;&gt; Of each one of those\n\n32\n00:01:37.340 --> 00:01:38.720\nas a single composite.\n\n33\n00:01:38.720 --> 00:01:43.086\nSo if I said and, if there was any falses,\nthen it was false.\n\n34\n00:01:43.086 --> 00:01:50.070\nIf there was any trues and\nit was OR, then it was true.\n\n35\n00:01:50.070 --> 00:01:56.050\nI could also use Bitwise operations\nto get Bitwise ORING, all right?\n\n36\n00:01:56.050 --> 00:02:00.666\nSo now if I take a thousand elements,\n1,000 elements and I AND them,\n\n37\n00:02:00.666 --> 00:02:05.440\nI get the result of 1,000 elements\nthat give me pairwise, so to speak.\n\n38\n00:02:05.440 --> 00:02:09.231\nSo it was just a trick to try\nto vectorize certain type\n\n39\n00:02:09.231 --> 00:02:10.670\nof things.\n&gt;&gt; Okay.\n\n40\n00:02:10.670 --> 00:02:12.180\n&gt;&gt; Now, that's not what we're gonna\n\n41\n00:02:12.180 --> 00:02:13.470\ndo because I thought about that,\n\n42\n00:02:13.470 --> 00:02:17.310\nI was like that seems very complicated.\n&gt;&gt; All that being said.\n\n43\n00:02:17.310 --> 00:02:18.624\n&gt;&gt; All that being said,\n\n44\n00:02:18.624 --> 00:02:22.356\nwe're gonna take a very kind\nof straight forward approach.\n\n45\n00:02:22.356 --> 00:02:25.926\nA simplified approach,\nhopefully, to get things, well,\n\n46\n00:02:25.926 --> 00:02:28.218\nlet's get our understanding right.\n&gt;&gt; Right.\n\n47\n00:02:28.218 --> 00:02:29.644\n&gt;&gt; So let's go to take a look at\n\n48\n00:02:29.644 --> 00:02:34.046\nthe screen here and before we do anything\nelse let's do a little bit of exploration,\n\n49\n00:02:34.046 --> 00:02:38.560\nso we're gonna come in here to Python 3,\nyou gotta spell Python 3 right.\n\n50\n00:02:38.560 --> 00:02:42.797\nWell, there's a few operators\nthat we need to know, but\n\n51\n00:02:42.797 --> 00:02:46.170\nbefore we do, we're going to use integers.\n\n52\n00:02:46.170 --> 00:02:47.190\nI just want to make that known.\n\n53\n00:02:47.190 --> 00:02:51.100\nWe're gonna use integers as\nthe operators and you'll see why.\n\n54\n00:02:51.100 --> 00:02:56.360\nLet's say we have the binary\nrepresentation of 5, okay?\n\n55\n00:02:56.360 --> 00:02:56.968\nThat's 101.\n\n56\n00:02:56.968 --> 00:02:59.680\nBut how do we read this.\n\n57\n00:02:59.680 --> 00:03:03.290\nIt says 0B which means\nthe binary representation.\n\n58\n00:03:03.290 --> 00:03:05.650\nAnd here is binary, okay?\n\n59\n00:03:05.650 --> 00:03:08.715\n101.\nAnd then we look at the binary and\n\n60\n00:03:08.715 --> 00:03:12.866\nlet's look at something else, like 15.\n\n61\n00:03:12.866 --> 00:03:13.550\nOkay?\n\n62\n00:03:13.550 --> 00:03:15.032\nNotice that's 111.\n\n63\n00:03:15.032 --> 00:03:18.227\nBut I'm also going to,\nthese are just references for\n\n64\n00:03:18.227 --> 00:03:20.520\nwhat we're getting ready to do.\n\n65\n00:03:20.520 --> 00:03:27.103\nThe binary of 7, so 5 is 101,\n7 is 111, and then 15 is 4 ones,\n\n66\n00:03:27.103 --> 00:03:31.900\nnotice there's a different\nnumber of digits there.\n\n67\n00:03:31.900 --> 00:03:37.426\nSo we would have to line those up just\nlike we would in our respective 10s,\n\n68\n00:03:37.426 --> 00:03:40.160\n100s, 1000s, type thing.\n\n69\n00:03:40.160 --> 00:03:44.406\nNow if we'd look at the binary\nrepresentation of 5.\n\n70\n00:03:44.406 --> 00:03:50.570\nAnd a single ampersand,\nthat is a logical Bitwise AND operation.\n\n71\n00:03:50.570 --> 00:03:54.880\nThen well, what do we,\nwe can use these as Bitwise.\n\n72\n00:03:54.880 --> 00:03:58.154\nOr we can also use these as logic.\n\n73\n00:03:58.154 --> 00:03:59.442\nSo 5 and 7.\n\n74\n00:03:59.442 --> 00:04:01.270\nOkay?\nWhat do we get back?\n\n75\n00:04:01.270 --> 00:04:05.040\nWell, 101, well we know that's actually 5.\n\n76\n00:04:05.040 --> 00:04:06.820\nBecause these representations\nare the same.\n\n77\n00:04:06.820 --> 00:04:07.680\nWhy is that?\n\n78\n00:04:07.680 --> 00:04:13.770\nWell, if we come here, and let's zoom in\na little bit, just a, we have 1 and 1.\n\n79\n00:04:13.770 --> 00:04:15.940\nWell, what is 1 and 1?\n\n80\n00:04:15.940 --> 00:04:17.310\nThat's like true and true.\n\n81\n00:04:17.310 --> 00:04:19.830\nWell, that's true, so we keep that.\n\n82\n00:04:19.830 --> 00:04:21.770\n0 and 1.\n\n83\n00:04:21.770 --> 00:04:25.310\nWell, that's false and true, effectively.\n\n84\n00:04:25.310 --> 00:04:32.050\nAnd then we get false because with an AND,\nif there's one false, it's all false.\n\n85\n00:04:32.050 --> 00:04:33.548\nAnd notice we're going bit by bit.\n\n86\n00:04:33.548 --> 00:04:36.130\n1 and 1, well that's 101.\n\n87\n00:04:36.130 --> 00:04:43.369\nNow what happens if we do the exact\nsame thing for (5 &amp; 15), okay?\n\n88\n00:04:43.369 --> 00:04:46.970\nWe go here and we get 101.\n\n89\n00:04:46.970 --> 00:04:48.710\nWell, how does it do that?\n\n90\n00:04:48.710 --> 00:04:50.930\nIt's kind of like there's a 0 out front.\n\n91\n00:04:50.930 --> 00:04:53.380\nIf we wanted to make\nthe same number of digits.\n\n92\n00:04:53.380 --> 00:05:01.020\nSo notice that 5 &amp; 7, 5 and\nBitwise AND a 15, we both get 5 back.\n\n93\n00:05:01.020 --> 00:05:08.610\nAnd just to make sure that I'm not\nmistaking something, 5&amp;7 is 5, so\n\n94\n00:05:08.610 --> 00:05:14.610\nwe effectively get, it's a way of\nstripping away information, okay?\n\n95\n00:05:14.610 --> 00:05:17.080\nSo that is the Bitwise AND.\n\n96\n00:05:17.080 --> 00:05:18.420\nWhat about the Bitwise OR?\n\n97\n00:05:18.420 --> 00:05:20.060\nWell, we're gonna do\na similar type of thing,\n\n98\n00:05:20.060 --> 00:05:22.860\nexcept we won't ponder as long on this.\n\n99\n00:05:22.860 --> 00:05:25.460\n5 or 7 single vertical pipe.\n\n100\n00:05:25.460 --> 00:05:26.900\nIt's above your Return key.\n\n101\n00:05:26.900 --> 00:05:29.080\nIt does involve a Shift.\n\n102\n00:05:29.080 --> 00:05:29.740\nAll right?\n\n103\n00:05:29.740 --> 00:05:30.710\nHolding the Shift key.\n\n104\n00:05:31.850 --> 00:05:33.680\nHit Enter and I get 111.\n\n105\n00:05:33.680 --> 00:05:37.600\nWell, that's 7 and that's because 1 OR 1.\n\n106\n00:05:37.600 --> 00:05:42.100\nWell, as soon as there's a true,\nORs return as true.\n\n107\n00:05:42.100 --> 00:05:48.530\nSo 1 OR 1, 0 OR 1, and then 1 OR 1.\n\n108\n00:05:48.530 --> 00:05:52.170\nSo all of these are true,\nwe have all trues here, so\n\n109\n00:05:52.170 --> 00:05:54.185\nit doesn't really matter about this.\n\n110\n00:05:54.185 --> 00:05:56.635\nSo be careful about generalizing it.\n\n111\n00:05:56.635 --> 00:05:58.435\nI either get the left or\nthe right argument.\n\n112\n00:05:58.435 --> 00:06:02.695\nIt can get a little more complicated than\nthat, especially if you have multiple kind\n\n113\n00:06:02.695 --> 00:06:07.275\nof digits, or multiple numbers that\nyou're putting together, right?\n\n114\n00:06:07.275 --> 00:06:09.305\nSo that's the OR.\n\n115\n00:06:09.305 --> 00:06:15.430\nAnd then finally, there is an exclusive\nOR, which means I want either or,\n\n116\n00:06:15.430 --> 00:06:19.320\nbut not both, all right?\n\n117\n00:06:19.320 --> 00:06:24.187\nSo if only one of them is true,\nkeep that, otherwise, it's false.\n\n118\n00:06:24.187 --> 00:06:26.278\nNow, let's see how that works out.\n\n119\n00:06:26.278 --> 00:06:31.120\nThat's the caret which is a Shift six,\n7, okay?\n\n120\n00:06:31.120 --> 00:06:33.940\n5 exclusive OR 7.\n\n121\n00:06:33.940 --> 00:06:37.350\nAnd we get 1 0, now how did we get 1 0?\n\n122\n00:06:37.350 --> 00:06:40.690\nIf we look here, 1 OR 1.\n\n123\n00:06:40.690 --> 00:06:42.027\nWell, that would, but not both.\n\n124\n00:06:42.027 --> 00:06:43.760\nAll right.\n\n125\n00:06:43.760 --> 00:06:44.550\nWell, that's a 0.\n\n126\n00:06:44.550 --> 00:06:47.414\nWell, 0 OR 1.\n\n127\n00:06:47.414 --> 00:06:54.290\nWell, that would be 1 because\nwe now have a truth value.\n\n128\n00:06:54.290 --> 00:06:56.850\nBut not both, well,\nthey're not the same thing so that's a 1.\n\n129\n00:06:56.850 --> 00:07:03.310\nBut then we have 1 OR 1, okay,\nthe OR counts but they're both 1.\n\n130\n00:07:03.310 --> 00:07:05.010\nSo it's out, so that becomes a 0.\n\n131\n00:07:05.010 --> 00:07:07.240\nAnd it just drops that bottom 0.\n\n132\n00:07:07.240 --> 00:07:09.650\nSo this would be, well,\nlet's see what it is.\n\n133\n00:07:11.595 --> 00:07:14.100\nWell, it's 2, right?\n\n134\n00:07:14.100 --> 00:07:19.770\nSo you kind of get a feel for that based\non the binary, the actual binary bits.\n\n135\n00:07:19.770 --> 00:07:22.830\nIt's kind of hard to reason about if\nyou look at them as just standard\n\n136\n00:07:22.830 --> 00:07:23.600\ndecimal numbers.\n\n137\n00:07:23.600 --> 00:07:27.260\nBecause that doesn't make any sense to me.\n\n138\n00:07:27.260 --> 00:07:28.880\nWe are going to take over these operators,\n\n139\n00:07:28.880 --> 00:07:31.820\nsingle vertical pipe,\nampersand, and the caret.\n\n140\n00:07:31.820 --> 00:07:35.906\nNow, you may have a different name for\nthat caret but it's the hat, right?\n\n141\n00:07:35.906 --> 00:07:37.790\nKinda looks like a hat.\n\n142\n00:07:37.790 --> 00:07:42.002\nSo let's zoom back out,\nlet's get out of the REPL and\n\n143\n00:07:42.002 --> 00:07:48.283\nsee what do we need to make in order to\nhave Bitwise Logical Operations, right?\n\n144\n00:07:48.283 --> 00:07:51.350\nSo let's create a class\nthat wraps these numbers,\n\n145\n00:07:51.350 --> 00:07:53.859\nand let's just say it's a binary class.\n\n146\n00:07:53.859 --> 00:07:58.682\nAnd it's gonna hold a binary\nrepresentation of a number, but\n\n147\n00:07:58.682 --> 00:08:02.310\nalso give us that number back if we so\nask it to.\n\n148\n00:08:02.310 --> 00:08:07.032\nAll right, so we say self.number = number.\n\n149\n00:08:07.032 --> 00:08:12.087\nAnd then self.binnumber, and that would be\n\n150\n00:08:12.087 --> 00:08:19.050\nthe binary representation\nof whatever the number is.\n\n151\n00:08:19.050 --> 00:08:21.750\nOkay, now let's make a repr method.\n\n152\n00:08:23.580 --> 00:08:25.270\nSo we have a nice little readout.\n\n153\n00:08:26.400 --> 00:08:29.132\nAnd we're gonna use f strings,\nsay binary, and\n\n154\n00:08:29.132 --> 00:08:36.748\nthen number=(self.number).\n\n155\n00:08:36.748 --> 00:08:40.883\nAnd the binary number is\n\n156\n00:08:40.883 --> 00:08:45.649\nself.binnumber, okay?\n\n157\n00:08:45.649 --> 00:08:49.910\nNow, we've seen this before, right?\n\n158\n00:08:49.910 --> 00:08:52.260\nWe've seen this, actually,\nin the last episode.\n\n159\n00:08:53.680 --> 00:08:57.260\nAnd now we come here and\nwe think about it.\n\n160\n00:08:57.260 --> 00:08:59.218\nI want a bitwise and.\n\n161\n00:08:59.218 --> 00:09:06.495\nWell, up until this point, okay, we add\nfor the plus sign, sub for minus sign.\n\n162\n00:09:06.495 --> 00:09:10.800\nSome of them are shortened,\nsome of them are a different word.\n\n163\n00:09:10.800 --> 00:09:15.320\nThese are pretty straightforward, and this\nnow this typically the time in the show\n\n164\n00:09:15.320 --> 00:09:18.650\nwhere I throw it over to Zach, and\nsee if he's got a good guess for us.\n\n165\n00:09:18.650 --> 00:09:23.360\nZach, what do you think\nthe double underscore word is?\n\n166\n00:09:23.360 --> 00:09:28.870\n&gt;&gt; Well dunder bit or maybe dunder and.\n\n167\n00:09:28.870 --> 00:09:30.845\n&gt;&gt; It is in fact dunder and.\n\n168\n00:09:30.845 --> 00:09:31.668\n&gt;&gt; [SOUND]\n\n169\n00:09:31.668 --> 00:09:32.293\n&gt;&gt; Yeah, all right.\n\n170\n00:09:32.293 --> 00:09:35.297\nSo dunder and gives us the bitwise and,\n\n171\n00:09:35.297 --> 00:09:39.410\nand that's gonna take an other,\nsomething else.\n\n172\n00:09:39.410 --> 00:09:41.881\nNow we're gonna make an assumption\nas we're writing this, but\n\n173\n00:09:41.881 --> 00:09:43.770\nwe're not gonna do any checks just for\nbrevity.\n\n174\n00:09:43.770 --> 00:09:47.660\nWe're gonna assume it's another binary\nobject, so we can do these two together.\n\n175\n00:09:47.660 --> 00:09:53.004\nSo I'm gonna return a binary object that\n\n176\n00:09:53.004 --> 00:10:00.090\nis self.number &amp; other.number,\nlike so, okay?\n\n177\n00:10:00.090 --> 00:10:07.209\nSo along those lines I also wanna\nthink about the bitwise or.\n\n178\n00:10:07.209 --> 00:10:09.771\nWell if that's dunder and,\n\n179\n00:10:09.771 --> 00:10:15.867\nI wonder what an appropriate dunder\nmethod for bitwise or would be.\n\n180\n00:10:15.867 --> 00:10:18.321\nI think [CROSSTALK]\n&gt;&gt; Dunder Bjorn.\n\n181\n00:10:18.321 --> 00:10:20.570\n[LAUGH]\n&gt;&gt; [LAUGH] We could go dunder Bjorn.\n\n182\n00:10:20.570 --> 00:10:23.300\nI'm not sure that's gonna work out.\n&gt;&gt; Or\n\n183\n00:10:23.300 --> 00:10:24.880\ndunder or.\n&gt;&gt; Well,\n\n184\n00:10:24.880 --> 00:10:26.370\nZach says dunder or.\n&gt;&gt; Yeah, okay.\n\n185\n00:10:26.370 --> 00:10:27.470\n&gt;&gt; We're gonna try dunder or,\n\n186\n00:10:27.470 --> 00:10:31.610\nand I'm gonna let you in on\na little secret, it's dunder or.\n\n187\n00:10:31.610 --> 00:10:35.240\nGood job, Zach, he's coming along nicely.\n\n188\n00:10:35.240 --> 00:10:37.430\nOne day we're gonna make him a programmer.\n\n189\n00:10:37.430 --> 00:10:43.890\nSo Binary(self.number\nvertical pipe other.number).\n\n190\n00:10:43.890 --> 00:10:49.370\nAnd then, finally, there is an exclusive\nor, and this one's a little tricky.\n\n191\n00:10:49.370 --> 00:10:54.518\nAnd so we have and or, exclusive or,\n\n192\n00:10:54.518 --> 00:11:00.100\nmaybe it's exclusive_or, or\nmaybe it's something else.\n\n193\n00:11:00.100 --> 00:11:03.020\nMaybe we should turn it over to Zach,\nsee if he's really got it going today.\n\n194\n00:11:03.020 --> 00:11:04.860\n&gt;&gt; Dunder e or.\n\n195\n00:11:04.860 --> 00:11:05.985\n&gt;&gt; Well we could,\n\n196\n00:11:05.985 --> 00:11:09.015\nthat would make sense actually, right,\n\n197\n00:11:09.015 --> 00:11:13.866\nbased on our naming convention,\na common kind of abbreviation for\n\n198\n00:11:13.866 --> 00:11:18.085\nexclusive or is xor, or X-or.\n&gt;&gt; The xor, we were even talking about\n\n199\n00:11:18.085 --> 00:11:23.085\nthat earlier.\n&gt;&gt; So xor, and then we're just going\n\n200\n00:11:23.085 --> 00:11:30.478\nto return Binary(self.number\n^ other.number), okay.\n\n201\n00:11:30.478 --> 00:11:32.822\nSo there is our binary operations.\n\n202\n00:11:32.822 --> 00:11:36.401\nLet's go ahead and\ncreate a couple of binary objects.\n\n203\n00:11:36.401 --> 00:11:39.693\nSo Binary(, and we have 2,\nactually, let's go with 5.\n\n204\n00:11:39.693 --> 00:11:41.811\nBecause we've seen 5 and 7,\nlet's go with 5 and 7 like we had them.\n\n205\n00:11:41.811 --> 00:11:45.415\nAnd then b1 = Binary(7),\n\n206\n00:11:45.415 --> 00:11:49.438\nlet's try it again, there we go.\n\n207\n00:11:49.438 --> 00:11:55.830\nSo let's go play around just a little bit,\nthere we go.\n\n208\n00:11:55.830 --> 00:11:59.840\nSo we have b, b1, and\nthere are the representations.\n\n209\n00:11:59.840 --> 00:12:02.474\nSo we have, more or less ran this so\nwe have a nice printout.\n\n210\n00:12:02.474 --> 00:12:04.666\nBut we still want to keep\nour binary operations.\n\n211\n00:12:04.666 --> 00:12:09.857\nSo if I say b &amp; b1, I get binary 5,\n\n212\n00:12:09.857 --> 00:12:13.505\nwhich is what we expect.\n\n213\n00:12:13.505 --> 00:12:15.560\nWhat about or?\n\n214\n00:12:16.660 --> 00:12:20.440\nThat works as well, and then xor.\n\n215\n00:12:20.440 --> 00:12:21.950\nWell, that works as well,\n\n216\n00:12:21.950 --> 00:12:26.940\nso we've reproduced that\nbehavior as we had it before.\n\n217\n00:12:26.940 --> 00:12:28.947\nBut what if we wanted to\ndo something like this?\n\n218\n00:12:31.043 --> 00:12:36.127\n&amp;=, or, maybe we even wanted to say b.\n\n219\n00:12:36.127 --> 00:12:43.180\nExcuse me, 7 &amp; binary, or b, right.\n\n220\n00:12:43.180 --> 00:12:45.040\nWhat if we wanted to\noperate with the integers?\n\n221\n00:12:45.040 --> 00:12:47.320\nWe wanted to offer interoperability?\n\n222\n00:12:47.320 --> 00:12:50.620\nWhen we try that,\nit says unsupported operands.\n\n223\n00:12:50.620 --> 00:12:52.510\nBut you'll notice, binary's on the right.\n\n224\n00:12:53.750 --> 00:12:58.530\nThe integer, it doesn't have\nthe ability to handle binary objects,\n\n225\n00:12:58.530 --> 00:13:00.120\ncuz we just made them up.\n\n226\n00:13:00.120 --> 00:13:04.300\nSo what Python will do is come\nto the right and say, hey,\n\n227\n00:13:04.300 --> 00:13:07.380\nbinary object, the thing stored in b?\n\n228\n00:13:07.380 --> 00:13:10.300\nDo you have something\nthat we can try also?\n\n229\n00:13:10.300 --> 00:13:14.010\nAnd you go, well,\n\n230\n00:13:14.010 --> 00:13:19.600\nif we remember back we had and\nand r and, sub and r sub.\n\n231\n00:13:19.600 --> 00:13:23.958\nThere are corresponding ones for\nthe right hand operations.\n\n232\n00:13:23.958 --> 00:13:26.651\nSo right hand, right or, right xor.\n\n233\n00:13:26.651 --> 00:13:29.170\nOkay, so we're gonna exit out of here.\n\n234\n00:13:29.170 --> 00:13:35.642\nAnd these are gonna be fairly\nquick because I'm going to cheat.\n\n235\n00:13:36.979 --> 00:13:39.840\nYou know what, I can't cheat like that,\nbut I can cheat another way.\n\n236\n00:13:39.840 --> 00:13:44.560\nI was getting ready to cheat and\nback myself into a corner there.\n\n237\n00:13:44.560 --> 00:13:47.537\nDunder __rand__(self, other),\n\n238\n00:13:47.537 --> 00:13:52.440\nand then we're just gonna do\na quick check, if isinstance.\n\n239\n00:13:52.440 --> 00:13:54.860\nAnd this is very, you're like,\nI've seen this before.\n\n240\n00:13:54.860 --> 00:13:59.650\nBut that's really to drive home the point,\nbeing aware of these methods, but\n\n241\n00:13:59.650 --> 00:14:03.250\nalso seeing, these are kinds\nof patterns that I can use.\n\n242\n00:14:03.250 --> 00:14:08.010\nAnd I've intentionally left out more\ncomplicated or complex patterns, just for\n\n243\n00:14:08.010 --> 00:14:11.560\nthe sake of, well, the sake of discussion.\n&gt;&gt; Ease of\n\n244\n00:14:11.560 --> 00:14:12.700\noperation.\n&gt;&gt; Right, yeah.\n\n245\n00:14:12.700 --> 00:14:18.180\nSo let's just say they're going to operate\nwith an integer, one, two, three, four.\n\n246\n00:14:18.180 --> 00:14:24.930\nAnd then we're gonna return\na binary with self.number &amp; other,\n\n247\n00:14:24.930 --> 00:14:27.580\nbecause other is non-integer.\n\n248\n00:14:27.580 --> 00:14:30.479\nOtherwise, right, so\nthat return hints it's done.\n\n249\n00:14:30.479 --> 00:14:34.159\nSo we're gonna return binary,\n\n250\n00:14:34.159 --> 00:14:38.122\nself.number &amp; other.number.\n\n251\n00:14:38.122 --> 00:14:40.290\nSo just like that.\n\n252\n00:14:40.290 --> 00:14:42.760\nNow, here's where\nthe cheating part comes in.\n\n253\n00:14:42.760 --> 00:14:47.164\nLet me use my little,\nwell before I do that, I see a typo.\n\n254\n00:14:47.164 --> 00:14:48.807\nThere we go.\n\n255\n00:14:48.807 --> 00:14:52.626\nI'm gonna grab that and boom.\n\n256\n00:14:52.626 --> 00:14:58.023\nAnd I'm gonna change\nthis to instead an ror,\n\n257\n00:14:58.023 --> 00:15:02.710\nand change this operation to an or, and\n\n258\n00:15:02.710 --> 00:15:06.557\nthis operation to an or, okay?\n\n259\n00:15:06.557 --> 00:15:15.176\nAnd then we're gonna grab that again and\n\n260\n00:15:15.176 --> 00:15:20.000\nxor, don't do that.\n\n261\n00:15:20.000 --> 00:15:23.377\nThere we go, and change this to ^.\n\n262\n00:15:23.377 --> 00:15:28.011\nMaybe ^ is an easier way to think\nabout it, cuz when I say carrot,\n\n263\n00:15:28.011 --> 00:15:29.541\npeople that carrot?\n\n264\n00:15:29.541 --> 00:15:32.418\nYou mean like the root vegetable?\n&gt;&gt; It's a carrot hat.\n\n265\n00:15:32.418 --> 00:15:33.980\nIt's a carrot hat.\n&gt;&gt; Yeah.\n\n266\n00:15:33.980 --> 00:15:35.230\nSo rxor.\n\n267\n00:15:35.230 --> 00:15:38.519\nNow we have the ability to hey,\nif the integer's on the left side and\n\n268\n00:15:38.519 --> 00:15:41.231\nthis is a binary object,\nPython's going to say, hey,\n\n269\n00:15:41.231 --> 00:15:45.013\ndo you have the ability to return\nsomething meaningful from this operation?\n\n270\n00:15:45.013 --> 00:15:48.992\nNow this is returning a binary object\ninstead of an integer if we operate\n\n271\n00:15:48.992 --> 00:15:51.994\nwith an integer on the left\nhand on the left hand side.\n\n272\n00:15:51.994 --> 00:15:55.438\nSo let's see that actually works.\n\n273\n00:15:55.438 --> 00:15:56.869\nSo we have b, right?\n\n274\n00:15:56.869 --> 00:16:01.732\nAnd so now if we go 7,\nAND b we get feedback,\n\n275\n00:16:01.732 --> 00:16:05.080\nokay, that makes sense.\n\n276\n00:16:05.080 --> 00:16:09.440\nWhat about 7 OR b, and\n\n277\n00:16:09.440 --> 00:16:13.580\nwe don't get b back,\nwe get the same binary representation.\n\n278\n00:16:13.580 --> 00:16:18.540\nWe get, well, a binary with a number\nof 7 in its binary representation.\n\n279\n00:16:18.540 --> 00:16:20.275\nWhat about exclusive OR?\n\n280\n00:16:20.275 --> 00:16:24.750\nAnd this is exactly what we suspect,\nwe expected.\n\n281\n00:16:24.750 --> 00:16:27.330\nNot suspect,\nlike it's out to get us or something.\n\n282\n00:16:27.330 --> 00:16:27.930\nExpect.\n\n283\n00:16:29.180 --> 00:16:33.710\nThis is good though because now we can\nsay, I've defined Bitwise operations\n\n284\n00:16:33.710 --> 00:16:39.570\nalso for other data types, in this case,\nintegers, if they're on the left.\n\n285\n00:16:39.570 --> 00:16:42.090\nIf they're on the right,\nthat's still broken,\n\n286\n00:16:43.370 --> 00:16:48.410\njust like that because we haven't put\nthat logic inside of those methods,\n\n287\n00:16:48.410 --> 00:16:52.320\nso that's the entire purpose of this,\njust as a reminder.\n\n288\n00:16:52.320 --> 00:16:57.641\nNow, one final thing is if\nI wanted to say b &amp; b1.\n\n289\n00:16:59.330 --> 00:17:04.460\nWell, it works and that's because\nof Python does the magic for us.\n\n290\n00:17:04.460 --> 00:17:06.950\nAnd we look that is now 5 rule.\n\n291\n00:17:06.950 --> 00:17:10.980\nIt was originally 5, and this is where it\ngets tricky with this binary operations.\n\n292\n00:17:10.980 --> 00:17:16.499\nWhat if we do b &amp; = Binary of 32 b and\n\n293\n00:17:16.499 --> 00:17:22.740\nnow you'll notice that it's 0, okay.\n\n294\n00:17:23.830 --> 00:17:27.130\nThat actually does the in\nplace assignment, right.\n\n295\n00:17:27.130 --> 00:17:30.730\nIt ends them and\nthen it reassigns to that variable.\n\n296\n00:17:30.730 --> 00:17:31.650\nWe've seen this before.\n\n297\n00:17:31.650 --> 00:17:34.440\nIt just works out of the box\nif we have AND, our end.\n\n298\n00:17:35.890 --> 00:17:39.390\nAnd if I'm not mistaken, we've seen it,\n\n299\n00:17:39.390 --> 00:17:43.640\nwe really kind of only need the one, right\nespecially if they are on the same side.\n\n300\n00:17:43.640 --> 00:17:48.600\nNow, that does change if\nthings get crazy array.\n\n301\n00:17:48.600 --> 00:17:51.180\nSo it's probably better to be explicit.\n\n302\n00:17:51.180 --> 00:17:52.600\nSo how does one do that?\n\n303\n00:17:53.830 --> 00:17:57.480\nWell, let's come back into Bitwise and\nmake sure that\n\n304\n00:17:57.480 --> 00:18:03.020\nwe have all of our explicitness\nkind of up and going, right?\n\n305\n00:18:03.020 --> 00:18:07.909\nSo we have AND, OR, XOR, RAND,\n\n306\n00:18:07.909 --> 00:18:12.286\nROR, RXOR, or R-X-O-R.\n\n307\n00:18:12.286 --> 00:18:17.846\nWe have a final set for this binary\noperations that is in place ANDing,\n\n308\n00:18:17.846 --> 00:18:22.461\nin place ORing, in place XORing,\nand I think I'm gonna,\n\n309\n00:18:22.461 --> 00:18:26.325\nI'm really gonna make\nZach think one more time,\n\n310\n00:18:26.325 --> 00:18:30.690\nI need a dunder method for\nin place ANDing.\n\n311\n00:18:30.690 --> 00:18:34.548\nZach, what would be your guess for\nin place ANDing?\n\n312\n00:18:34.548 --> 00:18:39.220\n&gt;&gt; Dunder iand.\n\n313\n00:18:39.220 --> 00:18:40.540\n&gt;&gt; Exactly right.\n\n314\n00:18:40.540 --> 00:18:42.510\nWell, that's the entire\npurpose of this series,\n\n315\n00:18:42.510 --> 00:18:44.760\nis to bring these patterns to light.\n\n316\n00:18:44.760 --> 00:18:47.450\nZach's catching on,\nhopefully you are as well,\n\n317\n00:18:47.450 --> 00:18:51.180\nlet's see how that all plays out.\n&gt;&gt; I get a gold star.\n\n318\n00:18:51.180 --> 00:18:53.550\n&gt;&gt; I can confirm that Zach is correct,\n\n319\n00:18:53.550 --> 00:19:00.330\nit is iand, or, now these are meant for\nin place mutation of the object.\n\n320\n00:19:00.330 --> 00:19:03.200\nWe could create a new object or return\nit and it would appear to work the same.\n\n321\n00:19:03.200 --> 00:19:06.330\nBut a recommendation, and\nwe've seen that in a previous episode.\n\n322\n00:19:06.330 --> 00:19:10.990\nThe recommendation is,\nmodify the object, in this case,\n\n323\n00:19:10.990 --> 00:19:13.600\nself, that is referenced by self.\n\n324\n00:19:13.600 --> 00:19:16.730\nAnd then return that,\n\n325\n00:19:16.730 --> 00:19:22.320\nunless it makes sense to return\nsomething else, like maybe if you and\n\n326\n00:19:22.320 --> 00:19:25.750\ntwo date times together you get it\ntimed out there or something like that.\n\n327\n00:19:25.750 --> 00:19:28.990\nI don't think that actually works,\nwe may try that just to confirm,\n\n328\n00:19:28.990 --> 00:19:33.320\nbut keep it in context, right?\n\n329\n00:19:33.320 --> 00:19:35.990\nSo what do we got, let's see here.\n\n330\n00:19:35.990 --> 00:19:39.110\nI'm gonna grab, I'm gonna do\na little bit of cheating here.\n\n331\n00:19:39.110 --> 00:19:43.710\nAnd I'm gonna say, self.and (other).\n\n332\n00:19:43.710 --> 00:19:46.532\nOkay.\nAnd we're making an assumption that both\n\n333\n00:19:46.532 --> 00:19:50.004\nsides, for these methods,\nare binaries, binary objects.\n\n334\n00:19:50.004 --> 00:19:53.421\nAnd then I'm gonna say,\n\n335\n00:19:53.421 --> 00:19:57.991\nself.number = temp.number.\n\n336\n00:19:57.991 --> 00:20:04.247\nAnd then, self._binnumber = well,\n\n337\n00:20:04.247 --> 00:20:08.847\nlet's see here, probably,\n\n338\n00:20:08.847 --> 00:20:12.530\nother._binnumber.\n\n339\n00:20:13.590 --> 00:20:17.030\nAnd we have to do both of those because\nwe created the object before so\n\n340\n00:20:17.030 --> 00:20:21.750\nwe have to more or less redo what we did\nin dundering it, and then return self.\n\n341\n00:20:21.750 --> 00:20:25.980\nAll right, so you could do\na whole lot of other things, but\n\n342\n00:20:25.980 --> 00:20:28.000\nthis should give us in place operations.\n\n343\n00:20:28.000 --> 00:20:31.100\nNow, we're gonna go check those,\nmake sure you return self, by the way.\n\n344\n00:20:33.320 --> 00:20:36.778\nWe're gonna go check these but\nlet's go ahead and cheat a little bit.\n\n345\n00:20:40.548 --> 00:20:45.518\nAnd one more time, and\nnow I'm gonna come and make this ior,\n\n346\n00:20:45.518 --> 00:20:48.260\nor eor, or something like that.\n\n347\n00:20:49.800 --> 00:20:54.680\nAnd then down here, we're going to xor\n\n348\n00:20:57.200 --> 00:21:02.180\nand xor, so is ixor, exor?\n\n349\n00:21:02.180 --> 00:21:05.470\nNow, that xor is kind of weird,\nan x making a z sound.\n\n350\n00:21:05.470 --> 00:21:06.990\nAlways throws me off.\n\n351\n00:21:06.990 --> 00:21:09.980\nSo xor, good deal.\n\n352\n00:21:09.980 --> 00:21:13.010\nAnd now let's see,\nwe should get the same output.\n\n353\n00:21:13.010 --> 00:21:15.426\nWe already saw that it worked,\nbut now we're explicit.\n\n354\n00:21:15.426 --> 00:21:17.249\nAll right.\n\n355\n00:21:17.249 --> 00:21:22.125\nAnd python3 -i bitwise,\n\n356\n00:21:22.125 --> 00:21:28.909\nthere we go, b &amp;= Binary(32).\n\n357\n00:21:28.909 --> 00:21:32.390\nI'm just putting something new so\nwe can see something different.\n\n358\n00:21:32.390 --> 00:21:35.300\nBoom, b, there it is, all right?\n\n359\n00:21:35.300 --> 00:21:40.161\nNow, what about b1, which is 1 1 1, ORing,\n\n360\n00:21:40.161 --> 00:21:46.581\nin place with Binary(15),\nb1 and now it's 15, right?\n\n361\n00:21:46.581 --> 00:21:49.550\nIt takes all of the ones.\n\n362\n00:21:50.570 --> 00:21:52.197\nAnd then what about XORing?\n\n363\n00:21:52.197 --> 00:21:57.920\nWell, b1 hat = or caret hat, or\nwhatever we decided to call it.\n\n364\n00:21:59.040 --> 00:22:05.920\nBinary, let's go with 9 and b1 is 6.\n\n365\n00:22:05.920 --> 00:22:08.850\nSo we kinda toggled some\nthings around there.\n\n366\n00:22:10.340 --> 00:22:12.800\nAnd I know some of you are like,\nwell, if it already worked,\n\n367\n00:22:12.800 --> 00:22:14.990\nhow do we know that our\nmethod is getting called.\n\n368\n00:22:14.990 --> 00:22:17.697\nWell, we could just add a little\nprint line to double check that we\n\n369\n00:22:17.697 --> 00:22:18.990\nare in fact taking over.\n\n370\n00:22:18.990 --> 00:22:22.640\nBecause we're not changing\nbehavior effectively, but\n\n371\n00:22:23.930 --> 00:22:28.840\nI always like to try to drill\ndown on the details, all right?\n\n372\n00:22:28.840 --> 00:22:36.710\nSo iand and print ior, or ior.\n\n373\n00:22:36.710 --> 00:22:40.070\nior, we're gonna go with ior.\n&gt;&gt; ior is good.\n\n374\n00:22:41.980 --> 00:22:45.754\n&gt;&gt; And then we're going to print ixor,\n\n375\n00:22:45.754 --> 00:22:48.197\njust like that, okay?\n\n376\n00:22:48.197 --> 00:22:55.606\nSo phython3 -i,\ngotta make sure that three is there.\n\n377\n00:22:55.606 --> 00:23:00.326\nAnd then b1 OR = b ior,\n\n378\n00:23:00.326 --> 00:23:07.178\nnow what's in b1 now, still 7.\n\n379\n00:23:07.178 --> 00:23:10.499\nAnd then b1, hat = b ixor b1,\n\n380\n00:23:10.499 --> 00:23:17.460\nthat has actually changed\nbecause that was exclusive OR.\n\n381\n00:23:17.460 --> 00:23:20.637\nAnd then finally,\n\n382\n00:23:20.637 --> 00:23:25.805\nb &amp;= b1 iand, what's in b?\n\n383\n00:23:25.805 --> 00:23:30.280\nWell, it's now,\nI got something going on here, Zach.\n\n384\n00:23:30.280 --> 00:23:31.870\nSee that right there?\n&gt;&gt; Yep.\n\n385\n00:23:31.870 --> 00:23:33.250\n&gt;&gt; Yeah, those are all the same.\n\n386\n00:23:33.250 --> 00:23:37.220\nSo we were double checking to\nmake sure our logic was running.\n\n387\n00:23:37.220 --> 00:23:41.820\nThere's another thing that, well,\nit confirms that our logic is taking over\n\n388\n00:23:41.820 --> 00:23:43.160\nthe duties for that.\n&gt;&gt; Yeah.\n\n389\n00:23:43.160 --> 00:23:44.178\n&gt;&gt; But we have a logic error,\n\n390\n00:23:44.178 --> 00:23:45.410\nwe got something going on.\n&gt;&gt; Yep.\n\n391\n00:23:46.780 --> 00:23:48.420\n&gt;&gt; So let's see what it is.\n\n392\n00:23:48.420 --> 00:23:51.490\nAnd I think, I know what it is.\n\n393\n00:23:52.550 --> 00:23:56.819\nI think I misused, right here temp,\n\n394\n00:23:56.819 --> 00:23:59.250\nright there.\n&gt;&gt; Other.\n\n395\n00:24:00.930 --> 00:24:02.050\n&gt;&gt; That's not what I wanted.\n\n396\n00:24:02.050 --> 00:24:05.130\nI actually want temp._binname.\n&gt;&gt; Uh-huh.\n\n397\n00:24:05.130 --> 00:24:06.530\n&gt;&gt; And you've probably\n\n398\n00:24:06.530 --> 00:24:09.440\nheard me harp on copying and pasting.\n\n399\n00:24:09.440 --> 00:24:12.470\nThat error propagated from the copy paste.\n\n400\n00:24:12.470 --> 00:24:15.120\nIt happened in all three\nplaces because I copy paste.\n\n401\n00:24:15.120 --> 00:24:16.720\nLet's just make sure\nthat it fixes the error.\n\n402\n00:24:16.720 --> 00:24:18.030\nWe fixed it in all three places.\n\n403\n00:24:19.880 --> 00:24:24.860\nBitwise, and so b1 &amp;= b.\n\n404\n00:24:24.860 --> 00:24:25.401\nThere it is.\n\n405\n00:24:25.401 --> 00:24:27.274\nWhat's in b1?\n\n406\n00:24:27.274 --> 00:24:31.994\nAnd 5, 5, yeah,\nthat's 5 [LAUGH] I was just making sure,\n\n407\n00:24:31.994 --> 00:24:36.400\nI was like, that doesn't,\nyep, this is good.\n\n408\n00:24:36.400 --> 00:24:42.246\nSo we now see that we can override the\nBitwise Logical Operations by using these.\n\n409\n00:24:42.246 --> 00:24:46.479\nAgain, it's kind of Python Data Model\nmethods, dunder methods, magic methods,\n\n410\n00:24:46.479 --> 00:24:48.280\nthey have a variety of names.\n\n411\n00:24:48.280 --> 00:24:52.650\nAnd if you need Bitwise operations for\nthe respective data structure, and\n\n412\n00:24:52.650 --> 00:24:58.210\npairs of them, then this is how you\nacquire that to essentially hijack those.\n\n413\n00:24:58.210 --> 00:25:01.150\nVertical pipe, ampersand, and the hat.\n\n414\n00:25:01.150 --> 00:25:03.620\nBut there you go, Zach.\n&gt;&gt; Well done, sir.\n\n415\n00:25:03.620 --> 00:25:05.680\nBitwise Logical Operations.\n\n416\n00:25:05.680 --> 00:25:06.880\nAnother wonderful episode.\n\n417\n00:25:06.880 --> 00:25:10.000\nJustin, I can see that you want to\nsay something else before we move on.\n\n418\n00:25:10.000 --> 00:25:11.440\n&gt;&gt; Well, I've had a wonderful day.\n\n419\n00:25:11.440 --> 00:25:12.561\nThanks for having me.\n&gt;&gt; [LAUGH]\n\n420\n00:25:12.561 --> 00:25:13.408\n&gt;&gt; No, I jest.\n\n421\n00:25:13.408 --> 00:25:19.470\nJust remember,\ndunder methods are going to offer you\n\n422\n00:25:19.470 --> 00:25:22.400\nthe ability to take over these operators.\n&gt;&gt; Mm-hm.\n\n423\n00:25:22.400 --> 00:25:24.090\n&gt;&gt; Use them wisely, as long as you do,\n\n424\n00:25:24.090 --> 00:25:27.560\nthen everything should be fine.\n&gt;&gt; Fantastic.\n\n425\n00:25:27.560 --> 00:25:31.099\nPython Data Models, a wonderful series\nthat Justin has worked very hard on.\n\n426\n00:25:31.099 --> 00:25:33.430\nMake sure you see every\nsingle one of these episodes.\n\n427\n00:25:33.430 --> 00:25:34.360\nIt's good for you.\n\n428\n00:25:34.360 --> 00:25:36.070\nAnd while you're in the course library,\n\n429\n00:25:36.070 --> 00:25:39.420\nthere's thousands of other videos\ndesigned to help you go further.\n\n430\n00:25:39.420 --> 00:25:40.500\nCheck those out.\n\n431\n00:25:40.500 --> 00:25:42.050\nAnd tell everybody you\nknow about DevProTV.\n\n432\n00:25:42.050 --> 00:25:44.130\nYou know,\na good DevPro is always learning.\n\n433\n00:25:44.130 --> 00:25:46.410\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n434\n00:25:46.410 --> 00:25:48.511\n&gt;&gt; And we will see you soon.\n\n435\n00:25:48.511 --> 00:25:50.808\n[MUSIC]\n\n",
          "vimeoId": "253983149"
        },
        {
          "description": "In this episode, Justin and Zach start looking at the custom implementation of unary \"+\" and \"-\" operators using the \\_\\_pos\\_\\_ and \\_\\_neg\\_\\_ methods.",
          "length": "1157",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-8-1-negative_and_positive-012618-PGM.00_19_07_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-8-1-negative_and_positive-012618-PGM.00_19_07_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-8-1-negative_and_positive-012618-PGM.00_19_07_05.Still001-sm.jpg",
          "title": "Negative and Positive",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.275 --> 00:00:14.277\nHello, and thank you for\n\n3\n00:00:14.277 --> 00:00:16.578\nchoosing DevProTV,\nhelping you learn wherever you go.\n\n4\n00:00:16.578 --> 00:00:20.960\nI'm your host, Zach Memos,\nas we continue on with Python Data Model.\n\n5\n00:00:20.960 --> 00:00:23.910\nNegative and\nPositive is the title of this episode, and\n\n6\n00:00:23.910 --> 00:00:26.750\nonce again Justin Dennison\nis here to show us the way.\n\n7\n00:00:26.750 --> 00:00:27.920\nGood to see you, sir.\n\n8\n00:00:27.920 --> 00:00:28.960\n&gt;&gt; Hopefully I'll show you the way.\n\n9\n00:00:28.960 --> 00:00:33.166\nIt might just be an emotional roller\ncoaster ride where I get really down and\n\n10\n00:00:33.166 --> 00:00:35.320\nI come back up and then, no, no, no.\n\n11\n00:00:35.320 --> 00:00:36.080\n&gt;&gt; That's all right.\n\n12\n00:00:36.080 --> 00:00:37.080\n&gt;&gt; We're not gonna do that.\n\n13\n00:00:37.080 --> 00:00:37.755\nBut how are you today, Zach?\n\n14\n00:00:37.755 --> 00:00:38.993\n&gt;&gt; Well, I'm doing well and\n\n15\n00:00:38.993 --> 00:00:43.330\nI'm very excited as we continue on with\nPython Data Model, learning more about it.\n\n16\n00:00:43.330 --> 00:00:46.654\nAnd negative and positive,\nwhat exactly are we gonna do with that?\n\n17\n00:00:46.654 --> 00:00:50.017\n&gt;&gt; Well, really we can make a battery\nclass where we have a negative and\n\n18\n00:00:50.017 --> 00:00:51.916\na positive, or something like that.\n\n19\n00:00:51.916 --> 00:00:58.405\nBut really it's about emulating\nnumeric types, right?\n\n20\n00:00:58.405 --> 00:01:00.649\nSo if I say negative one, okay,\n\n21\n00:01:00.649 --> 00:01:06.250\nwell that's like I dug a hole one\nfoot deep, right, it's below ground.\n\n22\n00:01:06.250 --> 00:01:08.440\nBut what is negative negative one?\n\n23\n00:01:09.670 --> 00:01:11.716\nWell, it's really-\n&gt;&gt; Wait a minute,\n\n24\n00:01:11.716 --> 00:01:16.409\nthat's like digging a hole but up, so\nthat's like a mound of dirt, right?\n\n25\n00:01:16.409 --> 00:01:18.747\nWell how would I do that operator-wise?\n\n26\n00:01:18.747 --> 00:01:20.428\nWe've seen subtraction, right?\n\n27\n00:01:20.428 --> 00:01:23.440\nAnd that kind of encapsulates\nthat negative part.\n\n28\n00:01:23.440 --> 00:01:26.276\nBut what about positive parts?\n\n29\n00:01:26.276 --> 00:01:30.680\nAnd I wanna show you these,\nbecause they do come up.\n\n30\n00:01:30.680 --> 00:01:34.290\nNegative probably more so than positive.\n\n31\n00:01:34.290 --> 00:01:38.105\nBut you could use these for,\nwe might have a little fun with these.\n\n32\n00:01:38.105 --> 00:01:39.890\n&gt;&gt; Mm-hm.\n&gt;&gt; Because, again,\n\n33\n00:01:39.890 --> 00:01:43.430\nwe're getting into some of the edge\ncase ones that you should know about.\n\n34\n00:01:43.430 --> 00:01:47.682\nKnow they're there, know they're used, but\n\n35\n00:01:47.682 --> 00:01:52.998\nmaybe they're not always used,\nor maybe they're used for\n\n36\n00:01:52.998 --> 00:01:57.592\neither intentional or\nunintentional mal intent.\n\n37\n00:01:57.592 --> 00:01:59.090\nSo there we go.\n\n38\n00:01:59.090 --> 00:02:01.220\nSo let's go ahead and\ntake a look at the screen.\n\n39\n00:02:01.220 --> 00:02:03.530\nAnd what am I talking about,\nnegative and positive, right?\n\n40\n00:02:03.530 --> 00:02:10.855\nSo if we hop into Python3 and you're\nlike okay, well, let's say you have --1.\n\n41\n00:02:10.855 --> 00:02:14.658\nWell, why did it do that?\n\n42\n00:02:14.658 --> 00:02:18.710\nBecause really what it did is\nit kinda had this grouping.\n\n43\n00:02:18.710 --> 00:02:21.701\nWhat is the negative of -1?\n\n44\n00:02:21.701 --> 00:02:26.001\nWell, if it's already negative\nthen I need to change,\n\n45\n00:02:26.001 --> 00:02:31.958\neffectively the negative sign is a great\nway to indicate direction, right?\n\n46\n00:02:31.958 --> 00:02:35.026\nSo negative's down, but\nif I'm facing down,\n\n47\n00:02:35.026 --> 00:02:38.090\nwhat is the negative of my direction now?\n\n48\n00:02:38.090 --> 00:02:40.325\nIt's back up, okay?\n\n49\n00:02:40.325 --> 00:02:40.897\n&gt;&gt; Mm.\n\n50\n00:02:40.897 --> 00:02:43.170\n&gt;&gt; So that-\n&gt;&gt; You're negating it.\n\n51\n00:02:43.170 --> 00:02:44.388\n&gt;&gt; Yeah.\n&gt;&gt; Yeah.\n\n52\n00:02:44.388 --> 00:02:47.570\n&gt;&gt; Yeah, that's a great way\nto think about positives and\n\n53\n00:02:47.570 --> 00:02:49.657\nnegatives always come up, right?\n\n54\n00:02:49.657 --> 00:02:51.499\nI used to be a teacher and,\nwell that doesn't,\n\n55\n00:02:51.499 --> 00:02:53.260\nwell how does two\nnegatives make a positive?\n\n56\n00:02:53.260 --> 00:02:55.330\nYou've heard that all over the place.\n\n57\n00:02:55.330 --> 00:02:57.134\nWell the reason being is,\n\n58\n00:02:57.134 --> 00:03:02.546\nthe concept is a negative is negating\nwhatever entity you're talking about.\n\n59\n00:03:02.546 --> 00:03:03.143\n&gt;&gt; Right on.\n\n60\n00:03:03.143 --> 00:03:07.760\n&gt;&gt; Right, so if I'm facing down and\nI negate it, down is already negative.\n\n61\n00:03:07.760 --> 00:03:11.428\n&gt;&gt; But if I'm negating it,\nI turn back up, right?\n\n62\n00:03:11.428 --> 00:03:12.579\n&gt;&gt; There you go.\n\n63\n00:03:12.579 --> 00:03:15.296\n&gt;&gt; Well, I didn't mean to\nuse the phrase turn back up.\n\n64\n00:03:15.296 --> 00:03:17.153\n&gt;&gt; [LAUGH]\n&gt;&gt; But that's okay.\n\n65\n00:03:17.153 --> 00:03:21.239\nSo negative negative makes sense,\nbut can I do something like this,\n\n66\n00:03:21.239 --> 00:03:22.938\nnegative plus, or +-1?\n\n67\n00:03:22.938 --> 00:03:28.894\nWell I can, but\npositive is the unary plus operator.\n\n68\n00:03:28.894 --> 00:03:32.390\nWhat that means is typically we\nthink of plus as three plus four.\n\n69\n00:03:32.390 --> 00:03:36.843\nBut if I say plus four,\nthat's a more explicit way of saying I'm\n\n70\n00:03:36.843 --> 00:03:40.482\ntalking about positive four,\nno ambiguity there.\n\n71\n00:03:40.482 --> 00:03:43.847\n&gt;&gt; Right.\n&gt;&gt; Right, if I say positive four,\n\n72\n00:03:43.847 --> 00:03:51.359\nit just gives me four back, and that's\ntypically how we interact with numbers.\n\n73\n00:03:51.359 --> 00:03:56.570\nLet's play around, I'm pretty sure\nthere may be some weird edge case.\n\n74\n00:03:56.570 --> 00:04:02.020\nI'm pretty sure there's no crazy\nshenanigans that happens with other ones.\n\n75\n00:04:02.020 --> 00:04:06.850\nBut we should always explore, because\nmaybe we don't have access to the Internet\n\n76\n00:04:06.850 --> 00:04:10.670\nand we don't have the ability\nto go read through the docs or\n\n77\n00:04:10.670 --> 00:04:14.770\ngo look at blog posts or things like that\nwhen we're playing around with these.\n\n78\n00:04:14.770 --> 00:04:17.310\nExploration is always fun, right?\n\n79\n00:04:17.310 --> 00:04:20.640\nSo I say +a.\n\n80\n00:04:20.640 --> 00:04:23.704\nUnary plus and\nstring don't play nice together.\n\n81\n00:04:23.704 --> 00:04:25.836\nWell, what about -a?\n\n82\n00:04:25.836 --> 00:04:29.907\nAlso they do not play, notice that those\nare outside of the quotes because those\n\n83\n00:04:29.907 --> 00:04:31.684\nare unary, what does unary mean?\n\n84\n00:04:31.684 --> 00:04:38.666\nI need one argument, plus and then\nthe argument, minus and then the argument.\n\n85\n00:04:38.666 --> 00:04:45.077\nNow let's try it for a few others,\njust in case 1, 2, 3, no.\n\n86\n00:04:45.077 --> 00:04:45.667\n&gt;&gt; Mm-mm.\n\n87\n00:04:45.667 --> 00:04:48.970\n&gt;&gt; What about minus sign?\n\n88\n00:04:48.970 --> 00:04:49.636\nAlso wrong.\n\n89\n00:04:49.636 --> 00:04:50.304\n&gt;&gt; No beuno.\n\n90\n00:04:50.304 --> 00:04:55.980\n&gt;&gt; Wait, well,\nlet's try from datetime import datetime.\n\n91\n00:04:57.430 --> 00:05:02.200\nSo dt = datetime.now.\n\n92\n00:05:02.200 --> 00:05:09.400\nAnd we say +dt, no, -dt also doesn't work.\n\n93\n00:05:09.400 --> 00:05:14.320\nBut I could actually think of how this\nwould make sense with datetime cuz\n\n94\n00:05:14.320 --> 00:05:18.630\na lot of times dates and times are based\non some kind of unit of reference.\n\n95\n00:05:18.630 --> 00:05:22.480\nAnd behind the scenes, all they're\ndoing is counting from the reference.\n\n96\n00:05:22.480 --> 00:05:25.459\nIn computers, typically that is\nsince January 1st, 1970 at 12AM.\n\n97\n00:05:25.459 --> 00:05:29.898\nAnd they'll count either seconds or\nmilliseconds,\n\n98\n00:05:29.898 --> 00:05:32.567\nwhat is like the unit's epoch.\n\n99\n00:05:32.567 --> 00:05:37.448\nOkay, so the date is based on seconds or\nmilliseconds since that time.\n\n100\n00:05:37.448 --> 00:05:41.059\nAnd all dates work like this,\neven if it's not January 1st,\n\n101\n00:05:41.059 --> 00:05:44.265\n1970, it's referenced at\nsome time in the past.\n\n102\n00:05:44.265 --> 00:05:48.030\nWell, if I put up unary plus there,\nthat wouldn't make sense.\n\n103\n00:05:48.030 --> 00:05:50.740\nHey give me the second to that, right?\n\n104\n00:05:50.740 --> 00:05:53.070\nNow, this is a built-in module so\nwe don't have control over that,\n\n105\n00:05:53.070 --> 00:05:55.560\nbut I could see a use case there.\n\n106\n00:05:55.560 --> 00:06:02.218\nNow something you may not have used\nbefore, pretty sure it's, nope.\n\n107\n00:06:02.218 --> 00:06:10.510\nFraction import Fraction,\nFractions, there we go.\n\n108\n00:06:10.510 --> 00:06:13.290\nI always forget the s or not.\n\n109\n00:06:13.290 --> 00:06:14.210\nWhat does this represent?\n\n110\n00:06:14.210 --> 00:06:17.424\nWell, it's a fraction of one over four.\n\n111\n00:06:17.424 --> 00:06:22.688\nIt's the fraction of one over four,\nright, one-quarter.\n\n112\n00:06:22.688 --> 00:06:25.793\nNow, I can do things like numerator, and\n\n113\n00:06:25.793 --> 00:06:31.680\nthis'll give us the ability to represent\nactually one over four as an object.\n\n114\n00:06:31.680 --> 00:06:33.750\nWell, what if I do x + x?\n\n115\n00:06:33.750 --> 00:06:35.500\nHey, that counts.\n\n116\n00:06:35.500 --> 00:06:36.715\nAlso, notice it says one-half.\n\n117\n00:06:36.715 --> 00:06:37.400\n&gt;&gt; Mm-hm.\n\n118\n00:06:37.400 --> 00:06:41.260\n&gt;&gt; It does accurate fraction addition and\nsubtraction.\n\n119\n00:06:41.260 --> 00:06:42.498\n&gt;&gt; Mm-hm, mm-hm.\n\n120\n00:06:42.498 --> 00:06:48.610\n&gt;&gt; I wonder, if we do,\nwe have x and we say +x.\n\n121\n00:06:48.610 --> 00:06:50.928\nUnary operator makes sense here.\n\n122\n00:06:50.928 --> 00:06:51.917\n&gt;&gt; Mm-hm.\n&gt;&gt; -x,\n\n123\n00:06:51.917 --> 00:06:55.750\nit is now the negative version of that.\n\n124\n00:06:55.750 --> 00:07:00.247\nSo a lot of times,\nthese are about numbers, explicitly.\n\n125\n00:07:00.247 --> 00:07:04.750\nEspecially these unary operators.\n\n126\n00:07:04.750 --> 00:07:08.930\nI have seen, not in Python,\nbut in other languages, where\n\n127\n00:07:08.930 --> 00:07:14.100\nthey may use this feature to do something\nlike, if you put it in front of a string\n\n128\n00:07:14.100 --> 00:07:18.960\nthen it actually gives you the number\nrepresentation of that string.\n\n129\n00:07:18.960 --> 00:07:20.866\nIf it exists, all right?\n\n130\n00:07:20.866 --> 00:07:22.916\nAnd so\nwe may play around with that a little bit,\n\n131\n00:07:22.916 --> 00:07:25.990\njust to show an example of where\nI would think that makes sense.\n\n132\n00:07:25.990 --> 00:07:31.284\nBut let's go ahead and\nI'm going to hijack this point,\n\n133\n00:07:31.284 --> 00:07:35.688\njust real quick, for modulo_and_powers.\n\n134\n00:07:35.688 --> 00:07:37.557\n&gt;&gt; [LAUGH]\n&gt;&gt; Episode two.\n\n135\n00:07:37.557 --> 00:07:41.652\nIt's a joke,\nI'm not saying it was a good joke, but.\n\n136\n00:07:41.652 --> 00:07:45.340\n[LAUGH]\n&gt;&gt; But see the modulo and powers episode,\n\n137\n00:07:45.340 --> 00:07:47.411\nabsolutely, thank you.\n\n138\n00:07:47.411 --> 00:07:51.008\n&gt;&gt; Yeah, yeah, so\nwe come to negative and positive, and\n\n139\n00:07:51.008 --> 00:07:53.680\nwe're gonna get rid of this line class.\n\n140\n00:07:53.680 --> 00:07:58.848\nWe'll probably mess around there a little\nbit and then we're gonna get rid of all\n\n141\n00:07:58.848 --> 00:08:04.177\nthis mod and pow and rpow and that's fun,\nand now we're back to point, all right?\n\n142\n00:08:04.177 --> 00:08:09.869\nSo I'm thinking if we were\nto reproduce the number\n\n143\n00:08:09.869 --> 00:08:15.028\nbehavior that we've seen thus far, right?\n\n144\n00:08:15.028 --> 00:08:19.392\nIf I put a plus sign in front of\nthe number, I just get that number back.\n\n145\n00:08:19.392 --> 00:08:24.113\nWell, I need the plus sign, and\n\n146\n00:08:24.113 --> 00:08:28.360\nI say that's a positive four.\n\n147\n00:08:28.360 --> 00:08:29.007\nZach, are you ready?\n\n148\n00:08:29.007 --> 00:08:31.931\nI'm getting ready,\nI'm coming at you, Zach.\n\n149\n00:08:31.931 --> 00:08:38.180\nWhat do you think the method name for\nthe plus sign is?\n\n150\n00:08:38.180 --> 00:08:41.075\n&gt;&gt; Dunder pos.\n\n151\n00:08:41.075 --> 00:08:42.822\n&gt;&gt; You got it, all right.\n\n152\n00:08:42.822 --> 00:08:46.100\n&gt;&gt; [LAUGH]\n&gt;&gt; There we go, dunder pos.\n\n153\n00:08:46.100 --> 00:08:48.489\n&gt;&gt; I paused before I said, dunder pos.\n\n154\n00:08:48.489 --> 00:08:49.420\n&gt;&gt; You did, you did.\n\n155\n00:08:49.420 --> 00:08:54.184\nSo dunder pos is well I've put\nthe urinary plus in front of that thing.\n\n156\n00:08:54.184 --> 00:08:55.990\n&gt;&gt; Mm-hm.\n&gt;&gt; Right, so in this case,\n\n157\n00:08:55.990 --> 00:08:59.618\nwhen we've seen number,\nit just returns whatever that thing is.\n\n158\n00:08:59.618 --> 00:09:00.136\n&gt;&gt; Right.\n\n159\n00:09:00.136 --> 00:09:02.920\n&gt;&gt; So I'm just gonna return self,\nall right?\n\n160\n00:09:02.920 --> 00:09:04.670\nSo effectively, it's not making a change.\n\n161\n00:09:04.670 --> 00:09:08.565\nNow, this isn't interesting,\nit's more about showing the methods.\n\n162\n00:09:08.565 --> 00:09:12.994\nBut, if there's a dunder pos,\nthen there's probably.\n\n163\n00:09:12.994 --> 00:09:14.139\n&gt;&gt; Dunder neg.\n\n164\n00:09:14.139 --> 00:09:20.732\n&gt;&gt; Dunder neg, so\nlet's return Point(-self.x,\n\n165\n00:09:20.732 --> 00:09:26.407\n-self.y, effectively it flips the signs\n\n166\n00:09:26.407 --> 00:09:31.330\non both x and y at the same time, okay?\n\n167\n00:09:31.330 --> 00:09:37.093\nI'm not saying this is the only\nway that this would make sense,\n\n168\n00:09:37.093 --> 00:09:42.550\nbut let's just see if we now\nhave that capability, right?\n\n169\n00:09:42.550 --> 00:09:45.569\nAnd there we go.\n\n170\n00:09:45.569 --> 00:09:53.830\nAnd I'm gonna say +p1, okay,\n-p1, and now it flips the signs.\n\n171\n00:09:53.830 --> 00:10:00.710\nBy default, you might get this, you might\nnot, depending on what other methods.\n\n172\n00:10:00.710 --> 00:10:04.567\nI haven't created this long enumeration.\n\n173\n00:10:04.567 --> 00:10:07.110\nWell, if I have add, subtract,\nmultiply, and divide.\n\n174\n00:10:07.110 --> 00:10:09.750\nIf I have all of those,\ndo I get these for free?\n\n175\n00:10:09.750 --> 00:10:13.850\nAgain, I'm always,\nI like being explicit about my intentions.\n\n176\n00:10:13.850 --> 00:10:15.670\nPlus sign, boom, there we go.\n\n177\n00:10:15.670 --> 00:10:18.870\nMInus sign, boom, there we go, okay?\n\n178\n00:10:18.870 --> 00:10:22.230\nNow, let's see something here.\n\n179\n00:10:24.220 --> 00:10:29.150\nLet's take a fun little expedition.\n\n180\n00:10:29.150 --> 00:10:29.876\nLet's add another class.\n\n181\n00:10:29.876 --> 00:10:32.793\nWe've been playing around\nwith this point for a while.\n\n182\n00:10:32.793 --> 00:10:36.781\n&gt;&gt; Mm-hm.\n&gt;&gt; Let's create another class called my,\n\n183\n00:10:36.781 --> 00:10:40.720\nlet's just call it Date, right?\n\n184\n00:10:40.720 --> 00:10:45.570\nAnd what I'm gonna do is\nsay I'm gonna hijack stuff,\n\n185\n00:10:45.570 --> 00:10:48.470\nfrom datetime import datetime.\n\n186\n00:10:49.950 --> 00:10:55.751\nAnd we've seen that datetime\ndoesn't behave like we want it to.\n\n187\n00:10:55.751 --> 00:11:00.922\nSo I'm gonna create a new class\ncalled Date, capital D, and just so\n\n188\n00:11:00.922 --> 00:11:06.028\nwe're clear, there is a lowercase\nd date in the datetime module.\n\n189\n00:11:06.028 --> 00:11:06.727\n&gt;&gt; Mm-hm.\n\n190\n00:11:06.727 --> 00:11:08.324\n&gt;&gt; That provides a lot of this for us.\n\n191\n00:11:08.324 --> 00:11:11.843\nBut I wanna show that we can take this,\nmake it a wrapper, and\n\n192\n00:11:11.843 --> 00:11:14.990\nthen maybe add a little custom behavior.\n\n193\n00:11:14.990 --> 00:11:19.030\nSo boom, boom, boom,\n\n194\n00:11:19.030 --> 00:11:23.273\nboom, def _neg_, and\n\n195\n00:11:23.273 --> 00:11:28.124\nwe're just gonna say return\n\n196\n00:11:28.124 --> 00:11:33.192\n-self.seconds all right?\n\n197\n00:11:33.192 --> 00:11:38.400\nNow, if I'm not actually excuse me,\ntotal seconds.\n\n198\n00:11:40.291 --> 00:11:44.972\nThis self is going to be a datetime\nobject, which I know from the standard\n\n199\n00:11:44.972 --> 00:11:50.290\nlibrary has a dot seconds and total\nseconds and dot days and things like that.\n\n200\n00:11:50.290 --> 00:11:52.110\nThis is a method call\nthat will calculate that.\n\n201\n00:11:52.110 --> 00:11:55.821\nI'm just getting the negative of that.\n\n202\n00:11:55.821 --> 00:12:03.950\nIf I do a dunder pos,\nWell, I want to return.\n\n203\n00:12:03.950 --> 00:12:05.855\nI'll just self.total_seconds.\n\n204\n00:12:05.855 --> 00:12:09.864\nSo I'm using this operator overload\nto now delegate back to a method that\n\n205\n00:12:09.864 --> 00:12:12.390\nactually exists that I can call anyway.\n\n206\n00:12:12.390 --> 00:12:16.439\n&gt;&gt; Awesome.\n&gt;&gt; Let's see if my plan works.\n\n207\n00:12:16.439 --> 00:12:21.575\nSometimes a plan falls apart,\nnot gonna lie.\n\n208\n00:12:21.575 --> 00:12:26.545\nSo here we go, we go,\npython3 -i neg_and_pos.\n\n209\n00:12:26.545 --> 00:12:28.100\nSo d = Date.\n\n210\n00:12:28.100 --> 00:12:30.591\nRequired argument, we gotta have.\n\n211\n00:12:30.591 --> 00:12:31.181\n&gt;&gt; Mm.\n\n212\n00:12:31.181 --> 00:12:32.799\n&gt;&gt; Yeah, I wonder if we can just do.\n\n213\n00:12:35.960 --> 00:12:36.715\nLook at that.\n\n214\n00:12:36.715 --> 00:12:38.419\n&gt;&gt; Wow.\n&gt;&gt; Because it's a datetime,\n\n215\n00:12:38.419 --> 00:12:40.047\nI can make use of that .now.\n\n216\n00:12:40.047 --> 00:12:43.597\nSo now I have a date,\nI actually have a repper also but\n\n217\n00:12:43.597 --> 00:12:46.120\nI like having fun with this.\n\n218\n00:12:46.120 --> 00:12:50.961\nBut I wonder if I go +d, total seconds.\n\n219\n00:12:50.961 --> 00:12:54.650\nWell, that's because I forgot\nwhat that method name is.\n\n220\n00:12:54.650 --> 00:12:58.477\nSo let's say, okay.\n\n221\n00:12:58.477 --> 00:13:00.317\nLet's go to help.\n\n222\n00:13:00.317 --> 00:13:03.390\nWe'll hit d.\n\n223\n00:13:03.390 --> 00:13:04.609\nAnd there we go.\n\n224\n00:13:04.609 --> 00:13:06.587\nHere's all the possible\nthings that we can do.\n\n225\n00:13:06.587 --> 00:13:11.806\nNope, nope, nope, nope, nope.\n\n226\n00:13:11.806 --> 00:13:18.301\nFromtimestamp, now, replace, striptime,\ntimestamp, there we go, timestamp.\n\n227\n00:13:18.301 --> 00:13:21.829\n&gt;&gt; Aha.\n&gt;&gt; Maybe I'm thinking of the date module,\n\n228\n00:13:21.829 --> 00:13:26.220\nthe actual date object\ninside of the datetime.\n\n229\n00:13:26.220 --> 00:13:30.882\nRight, can't remember everything,\nsometimes you just gotta try it out, fail,\n\n230\n00:13:30.882 --> 00:13:33.221\nlet Zach laugh at you, and then go fix it.\n\n231\n00:13:33.221 --> 00:13:35.890\n&gt;&gt; Yes, you have to stop it from being so\ncaddywhompus.\n\n232\n00:13:35.890 --> 00:13:41.733\n&gt;&gt; Caddywhompus,\nthere's that word again, timestamp.\n\n233\n00:13:41.733 --> 00:13:47.510\n&gt;&gt; [LAUGH]\n&gt;&gt; Timestamp, just like that, okay?\n\n234\n00:13:47.510 --> 00:13:50.842\nNow if I really wanted to, I could\nsay give me the negative of whatever\n\n235\n00:13:50.842 --> 00:13:53.845\nthe positive is and then delegate\nback to the pos that I wrote.\n\n236\n00:13:53.845 --> 00:14:00.750\nBut for the sake of this time,\nwe will go this other way.\n\n237\n00:14:00.750 --> 00:14:05.249\nSo now I should be able\nto go dt = Date.now, and\n\n238\n00:14:05.249 --> 00:14:08.961\nthen there we go, what is a plus sign and\n\n239\n00:14:08.961 --> 00:14:13.478\nyou hit Enter by itself,\nit's a syntax error.\n\n240\n00:14:13.478 --> 00:14:14.540\nYou do it again.\n\n241\n00:14:14.540 --> 00:14:16.690\nIt's also still a syntax error.\n\n242\n00:14:17.736 --> 00:14:21.930\nSo a +dt, that didn't work before but it\ndoes now because I made my own date class.\n\n243\n00:14:21.930 --> 00:14:25.505\nI'm not saying you should do this, but\nmaybe you have a very particular use case.\n\n244\n00:14:25.505 --> 00:14:30.040\n-dt, it is the negative\nof whatever the +dt is.\n\n245\n00:14:30.040 --> 00:14:33.100\nSo I've kind of hijacked\nthis a little bit.\n\n246\n00:14:33.100 --> 00:14:38.100\nNow along those lines,\nI would really like to be able to take\n\n247\n00:14:38.100 --> 00:14:43.750\nsomething like one, Like that,\nsee how that's a plus?\n\n248\n00:14:43.750 --> 00:14:46.550\n&gt;&gt; Mm-hm.\n&gt;&gt; I would like to get the floating point\n\n249\n00:14:46.550 --> 00:14:50.485\nrepresentation, but\nit doesn't work for strings.\n\n250\n00:14:50.485 --> 00:14:55.742\nBut I really want that cuz I'm lazy,\nand that makes sense to me.\n\n251\n00:14:55.742 --> 00:14:59.269\nAnd that makes sense in some\nof my other experiences.\n\n252\n00:14:59.269 --> 00:15:03.850\nSo if I say a neg_and_pos, well,\n\n253\n00:15:03.850 --> 00:15:09.170\nI can say String, let's prefix it.\n\n254\n00:15:09.170 --> 00:15:11.130\nThis is a JString for Justin String.\n\n255\n00:15:12.590 --> 00:15:15.195\nAnd I'm gonna day def, and\nI'm just gonna use pos,\n\n256\n00:15:15.195 --> 00:15:18.610\ncuz we could do the same thing for\nneg, all right?\n\n257\n00:15:20.130 --> 00:15:25.666\nI'm going to try, To\n\n258\n00:15:25.666 --> 00:15:29.481\nreturn the float of self.\n\n259\n00:15:34.550 --> 00:15:40.962\nAnd if there is an exception,\nthere is an exception.\n\n260\n00:15:40.962 --> 00:15:41.549\nYou know what?\n\n261\n00:15:41.549 --> 00:15:42.587\nI'm not even going to put a try there.\n\n262\n00:15:42.587 --> 00:15:43.760\nI'm going to keep it a little simple.\n\n263\n00:15:43.760 --> 00:15:44.663\nLet it fail.\n\n264\n00:15:44.663 --> 00:15:45.270\nThat's all right.\n\n265\n00:15:47.275 --> 00:15:48.548\nI think that's enough.\n\n266\n00:15:48.548 --> 00:15:49.860\nEnter, all right.\n\n267\n00:15:49.860 --> 00:15:53.240\nSo now if I go back, there we go.\n\n268\n00:15:53.240 --> 00:15:56.452\nThis one may get a little,\nmight have to construct this a little bit.\n\n269\n00:15:56.452 --> 00:15:59.991\nDo I have a JString?\n\n270\n00:15:59.991 --> 00:16:01.820\nA one.\n\n271\n00:16:03.852 --> 00:16:06.949\nI do and notice it's just more or\nless a string representation.\n\n272\n00:16:06.949 --> 00:16:12.709\nSo some user input, and\nI know that it's going to be,\n\n273\n00:16:12.709 --> 00:16:19.116\n1, 2, 3, or\nsome number-like string, 1.233.\n\n274\n00:16:19.116 --> 00:16:21.294\nAnd then user_input.\n\n275\n00:16:21.294 --> 00:16:22.820\nThere it is.\n\n276\n00:16:22.820 --> 00:16:25.526\nI would say +user_input.\n\n277\n00:16:25.526 --> 00:16:28.804\nI now have the float representation, so-\n&gt;&gt; Cool.\n\n278\n00:16:28.804 --> 00:16:32.250\n&gt;&gt; Taken everything from the string and\nI've added my own little twist on it.\n\n279\n00:16:32.250 --> 00:16:34.145\nSo that's something else that you can do.\n\n280\n00:16:34.145 --> 00:16:39.027\nActually using any of these methods,\nso do keep that in mind.\n\n281\n00:16:39.027 --> 00:16:43.103\nPositive and negative lend themselves\nto kinda hijacking this a little more\n\n282\n00:16:43.103 --> 00:16:46.860\nbecause they're really only defined\non number on either fractions or\n\n283\n00:16:46.860 --> 00:16:50.313\nthere's another one called decimal,\nor just floats and ints.\n\n284\n00:16:50.313 --> 00:16:54.773\nBut if I want them for strings, I have\nto have a string class, if you have only\n\n285\n00:16:54.773 --> 00:16:59.470\nthat single method, please don't do this,\ncreate a function that does that.\n\n286\n00:16:59.470 --> 00:17:01.544\nIt's called float.\n\n287\n00:17:01.544 --> 00:17:06.722\nSo don't try to override the operator\njust to get some nice nuances,\n\n288\n00:17:06.722 --> 00:17:11.555\nbecause by default,\non default strings, that doesn't work.\n\n289\n00:17:11.555 --> 00:17:15.141\nThat may break a bunch of other\npeople's code, this is gonna print out.\n\n290\n00:17:15.141 --> 00:17:20.240\nAnd if we say type(user_input) here.\n\n291\n00:17:20.240 --> 00:17:24.204\nIt is a JString and people go, well, how\nis that different from a regular string?\n\n292\n00:17:24.204 --> 00:17:27.207\nWell that one method where\nI have a positive sign.\n\n293\n00:17:27.207 --> 00:17:28.321\nSo you can't do it.\n\n294\n00:17:28.321 --> 00:17:29.970\nI've seen it.\n\n295\n00:17:29.970 --> 00:17:33.966\nMaybe you need a lot more of\nthese operators overridden so\n\n296\n00:17:33.966 --> 00:17:38.389\nthen you could use a class that\ninherits from a previous class.\n\n297\n00:17:38.389 --> 00:17:39.964\nBut if you have just that one,\n\n298\n00:17:39.964 --> 00:17:42.814\nI would probably just stick\nwith the regular string.\n\n299\n00:17:42.814 --> 00:17:46.116\nJust try accept or\njust cast it as a float.\n\n300\n00:17:46.116 --> 00:17:51.270\nBut it is pretty cool, the date time,\nor the actual date, works very similar.\n\n301\n00:17:51.270 --> 00:17:55.946\nAnd then we've already seen that well,\non the point objects, that negative and\n\n302\n00:17:55.946 --> 00:17:59.248\npositive behave just like\nthey do with regular numbers,\n\n303\n00:17:59.248 --> 00:18:03.338\nexcept they distribute over both x and\ny instead of just the one thing.\n\n304\n00:18:03.338 --> 00:18:04.797\nAnd there you have it, Zach.\n\n305\n00:18:04.797 --> 00:18:06.870\n&gt;&gt; Well done sir, negative and positive.\n\n306\n00:18:06.870 --> 00:18:10.050\nAnother great episode inside\nthe Python Data Model series.\n\n307\n00:18:10.050 --> 00:18:11.835\nAnd one more thing before we leave,\nJustin.\n\n308\n00:18:11.835 --> 00:18:15.870\n&gt;&gt; Well, just keep on trying things,\nkeep on playing around.\n\n309\n00:18:15.870 --> 00:18:20.860\nSee if you can think of these, how could\nI use this, let me push the envelope.\n\n310\n00:18:20.860 --> 00:18:25.960\nAnd I've definitely not even\napproached the end of what is capable,\n\n311\n00:18:25.960 --> 00:18:29.060\nbut it's not about that,\npush your understanding.\n\n312\n00:18:29.060 --> 00:18:33.850\nGet to the very precipice of where you're\nlike, this is not quite making sense.\n\n313\n00:18:33.850 --> 00:18:37.350\nYou're a little uncomfortable and that's\nwhere most of your learning will occur.\n\n314\n00:18:37.350 --> 00:18:39.997\nYou'll really start to\ninternalize these things and\n\n315\n00:18:39.997 --> 00:18:42.534\nthen you can make use of\nthem in an informed manner.\n\n316\n00:18:42.534 --> 00:18:47.770\nIt may take a little time,\nbut keep on doing it anyway.\n\n317\n00:18:47.770 --> 00:18:49.015\n&gt;&gt; Thanks, Justin.\nGreat job, and\n\n318\n00:18:49.015 --> 00:18:52.811\nyou wanna make sure you watch every single\nepisode inside the Python Data Model\n\n319\n00:18:52.811 --> 00:18:54.898\nseries and you're in the course library.\n\n320\n00:18:54.898 --> 00:18:56.880\nAnd there's thousands of other videos.\n\n321\n00:18:56.880 --> 00:18:58.950\nCheck them out.\nThey're there to help you go further.\n\n322\n00:18:58.950 --> 00:19:00.326\nAnd tell everybody you\nknow about DevProTV.\n\n323\n00:19:00.326 --> 00:19:02.151\nYou know a good dev pro's always learning.\n\n324\n00:19:02.151 --> 00:19:02.884\nThanks for watching.\n\n325\n00:19:02.884 --> 00:19:03.574\nI'm Zack Memos.\n\n326\n00:19:03.574 --> 00:19:04.550\n&gt;&gt; And I'm Justin Dennison.\n\n327\n00:19:04.550 --> 00:19:07.392\n&gt;&gt; And we'll see you soon,\nsoon, soon, soon.\n\n328\n00:19:07.392 --> 00:19:12.168\n[MUSIC]\n\n",
          "vimeoId": "253279439"
        },
        {
          "description": "In this episode, Justin and Zach discuss the creation of custom objects that can have an absolute value and inverse using the methods \\_\\_abs\\_\\_ and \\_\\_invert\\_\\_.",
          "length": "1659",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-9-1-absolute_value_and_inverse-012618-PGM.00_27_30_23.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-9-1-absolute_value_and_inverse-012618-PGM.00_27_30_23.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-9-1-absolute_value_and_inverse-012618-PGM.00_27_30_23.Still001-sm.jpg",
          "title": "Absolute Value and Inverse",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.184 --> 00:00:15.062\nHello, thank you for choosing DevproTV.\n\n3\n00:00:15.062 --> 00:00:17.101\nHelping you learn everywhere you go.\n\n4\n00:00:17.101 --> 00:00:20.520\nI'm your host, Zach Memos,\nas we continue on with Python data model.\n\n5\n00:00:20.520 --> 00:00:24.980\nThis is Absolute and\nInverse episode of the Python data model.\n\n6\n00:00:24.980 --> 00:00:25.710\nWhat does it mean?\n\n7\n00:00:25.710 --> 00:00:27.366\nWell, we have Justin Dennison here and\n\n8\n00:00:27.366 --> 00:00:29.282\nhe's gonna help us\nbecause he said he would.\n\n9\n00:00:29.282 --> 00:00:30.250\nHe did, didn't you?\n\n10\n00:00:30.250 --> 00:00:30.840\n&gt;&gt; I did, I did.\n\n11\n00:00:30.840 --> 00:00:31.580\n&gt;&gt; You did say that.\n\n12\n00:00:31.580 --> 00:00:36.090\n&gt;&gt; I absolutely did that, and I would\nnot say the inverse of what I meant.\n\n13\n00:00:36.090 --> 00:00:37.560\nI tried, I don't know if it worked out.\n\n14\n00:00:37.560 --> 00:00:38.520\nBut how are you today, Zach?\n\n15\n00:00:38.520 --> 00:00:41.320\n&gt;&gt; I'm doing great, and just\na clarification, it's Absolute Value and\n\n16\n00:00:41.320 --> 00:00:43.440\nInverse is the title of the episode, so.\n\n17\n00:00:43.440 --> 00:00:47.380\n&gt;&gt; Well,\nI think it conveyed the meaning, right?\n\n18\n00:00:47.380 --> 00:00:49.800\nWe are not infallible, yeah.\n\n19\n00:00:49.800 --> 00:00:50.590\n&gt;&gt; Thank you.\n\n20\n00:00:50.590 --> 00:00:51.806\n&gt;&gt; Wait a minute.\nYeah, that's right.\n\n21\n00:00:51.806 --> 00:00:54.781\n[CROSSTALK] Sometimes I\nforget to use the negative.\n\n22\n00:00:54.781 --> 00:00:56.290\nWe are not fallible.\n\n23\n00:00:56.290 --> 00:00:57.140\nYeah, we are.\n\n24\n00:00:58.290 --> 00:00:59.487\nWe are infallible.\n\n25\n00:00:59.487 --> 00:01:01.076\nWe are fallible or we are not infallible.\n\n26\n00:01:01.076 --> 00:01:02.250\nSo there's that.\n\n27\n00:01:02.250 --> 00:01:07.670\nAnd Absolute Value and Inverse,\nand this again is probably one of\n\n28\n00:01:07.670 --> 00:01:12.520\nthose edge case very\nspecific to numeric types.\n\n29\n00:01:13.990 --> 00:01:20.420\nSo it may not fit your application,\nbut you should know it's available.\n\n30\n00:01:20.420 --> 00:01:21.880\nNow with that said,\n\n31\n00:01:21.880 --> 00:01:27.360\npoint kind of lends itself to\nan alternative absolute value meaning.\n\n32\n00:01:27.360 --> 00:01:31.090\nNow what I mean is, well,\nwhat is the absolute value?\n\n33\n00:01:31.090 --> 00:01:36.606\nIf it was a point, I'm just gonna apply\nabsolute value across the x and y.\n\n34\n00:01:36.606 --> 00:01:39.315\nAnd we're actually gonna see absolute\nvalue, just in case you're like,\n\n35\n00:01:39.315 --> 00:01:40.580\nwhat is he talking about?\n\n36\n00:01:40.580 --> 00:01:41.420\nWe'll get there.\n\n37\n00:01:41.420 --> 00:01:44.500\nWe'll do our explorations, right,\nand I think that's important.\n\n38\n00:01:44.500 --> 00:01:46.270\nI really wanted to emphasize that.\n\n39\n00:01:46.270 --> 00:01:49.236\nBecause that is one of the more\ndifficult things that, well,\n\n40\n00:01:49.236 --> 00:01:52.156\nmaybe you've been programming for\na while, and you got it.\n\n41\n00:01:52.156 --> 00:01:55.099\nBut when you get into some\nmore of these topics,\n\n42\n00:01:55.099 --> 00:01:59.454\nexploration may be your main means\nof creating meaning for yourself.\n\n43\n00:01:59.454 --> 00:02:01.780\nSo there's that.\n\n44\n00:02:01.780 --> 00:02:06.849\nBut absolute value for\na point could also be like,\n\n45\n00:02:06.849 --> 00:02:11.660\nhow far away is it from the origin, right?\n\n46\n00:02:11.660 --> 00:02:16.910\nThat could be absolute value of sometimes\nthought of as maybe a magnitude.\n\n47\n00:02:16.910 --> 00:02:22.758\nAnd for a two-dimensional thing, the\nmagnitude may be a little bit different.\n\n48\n00:02:22.758 --> 00:02:24.060\nSo if it's a single number,\n\n49\n00:02:24.060 --> 00:02:27.520\nabsolute value is essentially\ntelling you how far away from zero.\n\n50\n00:02:27.520 --> 00:02:30.220\nSo if my nose is zero this is,\n\n51\n00:02:30.220 --> 00:02:32.750\nwait a minute,\nI have to switch the image in my head.\n\n52\n00:02:32.750 --> 00:02:35.370\nThis would be negative,\nthis would be positive.\n\n53\n00:02:35.370 --> 00:02:38.100\nIf this is negative 2 and\nthis is positive 2,\n\n54\n00:02:38.100 --> 00:02:42.450\nthey're both two units away from my nose.\n\n55\n00:02:42.450 --> 00:02:44.964\nAnd yes, I just made you look at my\nnose very intently, and that was fun.\n\n56\n00:02:44.964 --> 00:02:48.079\n&gt;&gt; It would be many\nunits away from my nose.\n\n57\n00:02:48.079 --> 00:02:49.822\n&gt;&gt; It very well could be.\n\n58\n00:02:49.822 --> 00:02:51.301\nWait, and-\n&gt;&gt; [LAUGH]\n\n59\n00:02:51.301 --> 00:02:53.387\n&gt;&gt; Now we add the third, no, no.\n\n60\n00:02:53.387 --> 00:02:55.320\nAnd we added another dimension, right?\n\n61\n00:02:55.320 --> 00:02:58.230\nThen if we go up and down,\nleft and right, well,\n\n62\n00:02:58.230 --> 00:03:01.370\nif we're over here,\nhow far away from my nose are we?\n\n63\n00:03:01.370 --> 00:03:04.410\nWell, we have to account,\nwe came up here and way up here.\n\n64\n00:03:05.910 --> 00:03:13.290\nBut the magnitude, or the distance,\nwell, what does that mean?\n\n65\n00:03:13.290 --> 00:03:17.660\nAnd really, really,\nI'm describing possibly a vector, or\n\n66\n00:03:17.660 --> 00:03:20.215\npossibly something else, right?\n\n67\n00:03:20.215 --> 00:03:21.450\n&gt;&gt; Mm-hm.\n\n68\n00:03:21.450 --> 00:03:27.470\n&gt;&gt; So a vector, it could be pointing that\ndirection, that's how long the vector is.\n\n69\n00:03:27.470 --> 00:03:31.440\nBut a point, I could just be finding\nthe distance from zero, all right,\n\n70\n00:03:31.440 --> 00:03:33.270\nin an absolute sense.\n\n71\n00:03:33.270 --> 00:03:39.377\nNow inverse,\ninverse is a little interesting, right?\n\n72\n00:03:39.377 --> 00:03:45.670\nWhen I think of inverse, well,\nI'm going to invert a fraction maybe.\n\n73\n00:03:45.670 --> 00:03:50.340\nOr we'll actually see where the number,\nit does some weird stuff so\n\n74\n00:03:50.340 --> 00:03:54.310\nwe may have to do further clarification.\n\n75\n00:03:54.310 --> 00:03:55.760\nBut let's go ahead and\ntake a look at the screen here and\n\n76\n00:03:55.760 --> 00:04:00.710\nactually get started with that so\nwe can start making sense of things.\n\n77\n00:04:00.710 --> 00:04:03.180\n&gt;&gt; Good.\n&gt;&gt; Hopefully, so\n\n78\n00:04:03.180 --> 00:04:08.490\nabsolute value is actually ABS,\nnot ABS plastic,\n\n79\n00:04:08.490 --> 00:04:11.572\nacrylonitrile butadiene styrene or\nsomething like that.\n\n80\n00:04:11.572 --> 00:04:18.590\nButadiene styrene, or\nit is not ABS brakes, it's none of that.\n\n81\n00:04:18.590 --> 00:04:20.840\nIt just is short for absolute value.\n\n82\n00:04:20.840 --> 00:04:25.210\nSo if I say the abs(1),\nwell it's one unit away from zero.\n\n83\n00:04:25.210 --> 00:04:28.530\nWhat is the abs(-1)?\n\n84\n00:04:28.530 --> 00:04:31.180\nIt is also one unit away just\nin the opposite direction.\n\n85\n00:04:31.180 --> 00:04:35.220\nSo the positive and negative signs\nactually has to do with direction.\n\n86\n00:04:35.220 --> 00:04:39.480\nAbsolute value gives me how\nbig is that thing, right?\n\n87\n00:04:39.480 --> 00:04:41.490\n&gt;&gt; Right.\n&gt;&gt; The actual magnitude.\n\n88\n00:04:41.490 --> 00:04:44.950\nIf we look at absolute value, let's just\ntry some of these other things, too.\n\n89\n00:04:44.950 --> 00:04:47.172\nNope, it's broke.\n\n90\n00:04:47.172 --> 00:04:48.739\nWhat about a list?\n\n91\n00:04:50.620 --> 00:04:54.669\nNo, that's also broke, right?\n\n92\n00:04:54.669 --> 00:05:00.640\nWhat about, 1.2?\n\n93\n00:05:00.640 --> 00:05:03.370\nThat's a float, it's still\nthe same as it is with an integer.\n\n94\n00:05:04.535 --> 00:05:05.620\nLet's try it with date times.\n\n95\n00:05:05.620 --> 00:05:08.650\nI always like to try it dates cuz\ndates are technically numbers and\n\n96\n00:05:08.650 --> 00:05:11.030\nmaybe you get one that just works.\n\n97\n00:05:11.030 --> 00:05:15.398\nAnd so from datetime import datetime,\n\n98\n00:05:15.398 --> 00:05:20.930\ndt = datetime.now and dt.\n\n99\n00:05:20.930 --> 00:05:28.380\nSo abs(dt) and no, absolute value\ndoes not work there as well, nope.\n\n100\n00:05:28.380 --> 00:05:29.810\nSo it's very specific.\n\n101\n00:05:29.810 --> 00:05:31.350\nNow we've looked at absolute value.\n\n102\n00:05:31.350 --> 00:05:32.410\nWe've done our exploration.\n\n103\n00:05:32.410 --> 00:05:35.906\nLet's go ahead and\ntake a look at inverse, all right?\n\n104\n00:05:35.906 --> 00:05:39.446\nNow, or invert, finding the inverts.\n\n105\n00:05:39.446 --> 00:05:40.420\nIt's usually the tilde.\n\n106\n00:05:42.530 --> 00:05:46.190\nAnd here's where it gets a little,\nI think of inverse, or\n\n107\n00:05:46.190 --> 00:05:49.630\ninvert from a numeric standpoint.\n\n108\n00:05:51.240 --> 00:05:56.120\nBut it could be, what I'm saying is,\nfrom a more simplified numeric.\n\n109\n00:05:56.120 --> 00:05:59.797\nIf it's one over four and\nI invert it, it's four over one.\n\n110\n00:05:59.797 --> 00:06:01.317\nI mean,\nthat's not the strictest definition,\n\n111\n00:06:01.317 --> 00:06:02.920\nbut for some reason that comes to my mind.\n\n112\n00:06:02.920 --> 00:06:06.900\nOr from a function,\nthere are ways to invert a function,\n\n113\n00:06:06.900 --> 00:06:10.270\nassuming they satisfy certain properties,\nright?\n\n114\n00:06:10.270 --> 00:06:14.840\nIf I put an x into a function,\nI get out a y.\n\n115\n00:06:14.840 --> 00:06:17.240\nDoes there exist a function\nthat I can put out that Y and\n\n116\n00:06:17.240 --> 00:06:19.420\nget back out the original X?\n\n117\n00:06:19.420 --> 00:06:22.084\nAgain, that's a little more difficult,\nit's a little heady,\n\n118\n00:06:22.084 --> 00:06:23.543\nwe're staying away from that one.\n\n119\n00:06:23.543 --> 00:06:27.906\nBut if I use the tilde,\n\n120\n00:06:27.906 --> 00:06:31.809\nand I put 1, -2,\n\n121\n00:06:31.809 --> 00:06:36.421\nall right, 3, -4.\n\n122\n00:06:36.421 --> 00:06:38.657\nWell, that's kind of interesting.\n\n123\n00:06:38.657 --> 00:06:45.603\n5, -6, it looks like it's just\nbouncing to the other side.\n\n124\n00:06:45.603 --> 00:06:47.090\n&gt;&gt; Mm-hm.\n&gt;&gt; Right,\n\n125\n00:06:47.090 --> 00:06:52.500\nit actually looks like it's bouncing to\nthe other side and minusing one, okay?\n\n126\n00:06:52.500 --> 00:06:53.100\nNow what do I mean?\n\n127\n00:06:54.120 --> 00:06:57.380\nWhat is the inverse of 0, -1?\n\n128\n00:06:57.380 --> 00:07:04.076\nWell, then the negative of 0 is 0,\nminus 1 is -1.\n\n129\n00:07:04.076 --> 00:07:09.050\n2, well, that's -2 minus 1 is -3.\n\n130\n00:07:09.050 --> 00:07:11.980\nSo it's essentially applying that pattern.\n\n131\n00:07:11.980 --> 00:07:14.180\nWhat if we do the inverse of A?\n\n132\n00:07:14.180 --> 00:07:17.590\nNo, it doesn't make any sense.\n\n133\n00:07:17.590 --> 00:07:22.523\nWhat about the inverse of our date time?\n\n134\n00:07:22.523 --> 00:07:24.520\nIt doesn't make any sense there.\n\n135\n00:07:24.520 --> 00:07:29.730\nAnd I actually tried this to see\n\n136\n00:07:29.730 --> 00:07:35.470\nif this was implemented in a way for the\nfractions class from the fractions module.\n\n137\n00:07:35.470 --> 00:07:37.930\nAgain, this is a newer Python 3 thing.\n\n138\n00:07:37.930 --> 00:07:42.240\nIt doesn't work, and\nit doesn't behave like I thought it would.\n\n139\n00:07:42.240 --> 00:07:44.590\nSo you have to be careful.\n\n140\n00:07:44.590 --> 00:07:46.060\nSometimes they're just not there or\n\n141\n00:07:46.060 --> 00:07:47.979\nmaybe they haven't chosen\nto implement that feature.\n\n142\n00:07:49.430 --> 00:07:53.392\nThe only ones that I know that\nthese work on are numbers, and\n\n143\n00:07:53.392 --> 00:07:55.223\nthey follow that pattern.\n\n144\n00:07:55.223 --> 00:07:58.971\nNegative whatever the number is minus 1.\n\n145\n00:07:58.971 --> 00:07:59.923\nAll right, so they invert it.\n\n146\n00:07:59.923 --> 00:08:04.524\nNow Honestly,\nprobably what's happening is it's\n\n147\n00:08:04.524 --> 00:08:09.550\nflipping all of the bits for\nthe binary representation.\n\n148\n00:08:09.550 --> 00:08:12.814\nSo let me see,\n\n149\n00:08:12.814 --> 00:08:17.441\nbin(1) 0b1 and\n\n150\n00:08:17.441 --> 00:08:24.906\nthe binary of this Is negative.\n\n151\n00:08:24.906 --> 00:08:28.700\nWell, they're not giving me the true\ntwo's complement binary representations.\n\n152\n00:08:28.700 --> 00:08:32.200\nSo this is, I don't want to write\na function just to show you that,\n\n153\n00:08:32.200 --> 00:08:35.000\nthat may not be necessarily meaningful.\n\n154\n00:08:35.000 --> 00:08:38.280\nThe invert can mean a lot of things,\nit doesn't work on many of the data\n\n155\n00:08:38.280 --> 00:08:43.280\ntypes other than numbers, but\nthose things do occur, right?\n\n156\n00:08:44.850 --> 00:08:48.540\nNow that we've done our exploration,\nwe've seen the two operators.\n\n157\n00:08:48.540 --> 00:08:52.990\nYou probably haven't used that\ntilde very much, if any at all,\n\n158\n00:08:52.990 --> 00:08:55.210\nbecause it has a very particular use case.\n\n159\n00:08:55.210 --> 00:08:58.410\nBut let's talk about what it means\nin the context of the point.\n\n160\n00:08:58.410 --> 00:09:00.470\nI'm actually just going\nto hop over here and\n\n161\n00:09:00.470 --> 00:09:03.680\ngrab part of this point\nclass instead of copying it.\n\n162\n00:09:03.680 --> 00:09:06.400\nMainly because there is so\nmuch going here.\n\n163\n00:09:06.400 --> 00:09:10.090\nThis is the exact same point class\nthat we've been using before and\n\n164\n00:09:10.090 --> 00:09:15.840\nthis is color.abs and inv.py, all right.\n\n165\n00:09:15.840 --> 00:09:17.820\nSo paste and there we go.\n\n166\n00:09:19.200 --> 00:09:25.790\nAnd p1 is a point at (1,2) I'm\nnot gonna use (0,0) cuz (0,0).\n\n167\n00:09:25.790 --> 00:09:28.900\nWe're getting into things where\nzeros aren't really interesting.\n\n168\n00:09:28.900 --> 00:09:31.750\nP2, and you're like,\nzero's never interesting.\n\n169\n00:09:31.750 --> 00:09:35.880\nWell, sometimes it is, like division,\nwhere it causes stuff to blow up.\n\n170\n00:09:37.560 --> 00:09:43.940\nSo, 3, 2, and\nthen .3 is negative 5, negative 4,\n\n171\n00:09:43.940 --> 00:09:49.290\nokay, there we go.\n\n172\n00:09:49.290 --> 00:09:51.630\nAnd here we go.\n\n173\n00:09:51.630 --> 00:09:53.443\nAre you ready Zach [CROSSTALK]\n&gt;&gt; I am ready.\n\n174\n00:09:53.443 --> 00:09:54.520\n&gt;&gt; Have you buckled up?\n\n175\n00:09:54.520 --> 00:09:55.476\nHave you put your helmet on?\n\n176\n00:09:55.476 --> 00:09:56.700\n&gt;&gt; I am ready and I'm buckled up.\n\n177\n00:09:56.700 --> 00:09:57.640\nAll right, all right.\n\n178\n00:09:57.640 --> 00:10:02.620\nSo, we need to implement the ability\nto use both of these operators,\n\n179\n00:10:02.620 --> 00:10:04.590\nso if we try them now all right?\n\n180\n00:10:04.590 --> 00:10:06.495\nOne of them is actually a function,\none is an operator.\n\n181\n00:10:06.495 --> 00:10:10.990\nWe try them now,\nwe may get unexpected results.\n\n182\n00:10:10.990 --> 00:10:13.390\nLet's see if this is one of\nthose that by default just\n\n183\n00:10:14.470 --> 00:10:16.770\nthey make an assumption, right?\n\n184\n00:10:16.770 --> 00:10:22.028\nBecause that's important to know, because\n\n185\n00:10:22.028 --> 00:10:28.520\nIf abs works,\nit might not work like you think it works.\n\n186\n00:10:28.520 --> 00:10:34.260\nSo p1, p2, p3, there is those negatives,\nthose are probably gonna be\n\n187\n00:10:34.260 --> 00:10:38.760\nthe most interesting as far as those two\nvariable cuz it's just gonna remove those.\n\n188\n00:10:38.760 --> 00:10:42.460\nSo if I say abs(p3) and no,\nit's broke, it's no good.\n\n189\n00:10:42.460 --> 00:10:49.690\nIf I say this then p1,\nthen no, that's broke, okay?\n\n190\n00:10:49.690 --> 00:10:51.770\nThat don't work.\n\n191\n00:10:51.770 --> 00:10:56.780\nSo we've made sure that Python's met,\nand not making decisions for us.\n\n192\n00:10:56.780 --> 00:11:00.690\nFor these particular ones and usually\nthese edge case ones that is the case.\n\n193\n00:11:00.690 --> 00:11:03.620\nNotice there's a usually in there.\n\n194\n00:11:03.620 --> 00:11:08.266\nYou may go, but Justin actually,\nI found this one time where I made this\n\n195\n00:11:08.266 --> 00:11:12.076\nthing that satisfied all these\nvery intensely specific.\n\n196\n00:11:12.076 --> 00:11:17.700\nBut I didn't use Dunder whatever it is,\nand it still worked.\n\n197\n00:11:18.970 --> 00:11:23.520\nWell, it may be because you inherit it,\nmaybe you satisfied some other properties.\n\n198\n00:11:23.520 --> 00:11:27.380\nWe've seen the ability to compare\nwith less than or equal to.\n\n199\n00:11:27.380 --> 00:11:31.960\nTechnically, you can get away with\nimplementing only a couple of those,\n\n200\n00:11:31.960 --> 00:11:34.060\ndepending on which ones you implement.\n\n201\n00:11:34.060 --> 00:11:36.130\nAnd Python will make an assumption for\nthe rest.\n\n202\n00:11:37.240 --> 00:11:42.080\nI wouldn't do that, I'll be explicit,\nand we actually talked about that.\n\n203\n00:11:42.080 --> 00:11:46.070\n&gt;&gt; In fact, you say that often,\nto be explicit is a better way to operate.\n\n204\n00:11:46.070 --> 00:11:48.540\n&gt;&gt; Yeah, at least initially, right?\n\n205\n00:11:48.540 --> 00:11:51.280\nThere may be times where you just\nhave a bunch of extraneous code.\n\n206\n00:11:51.280 --> 00:11:54.379\nBut explicitness allows me to remove\nany questions about decisions\n\n207\n00:11:54.379 --> 00:11:56.240\nthat are being made on my behalf.\n\n208\n00:11:56.240 --> 00:11:59.660\nBecause I am saying,\nthis is what I expect.\n\n209\n00:11:59.660 --> 00:12:00.760\n&gt;&gt; Right.\n&gt;&gt; Right?\n\n210\n00:12:00.760 --> 00:12:03.880\nIf Python's handling it behind the scenes,\nwhatever the interpreter is or\n\n211\n00:12:03.880 --> 00:12:11.810\nthe language level is doing, if I'm not\nexplicit, I may get weird results, right?\n\n212\n00:12:11.810 --> 00:12:16.310\nOr maybe I made an assumption that\nit will behave in a certain way.\n\n213\n00:12:16.310 --> 00:12:19.800\nAnd then it doesn't, and then I just go on\nmy merry way and I start getting errors.\n\n214\n00:12:19.800 --> 00:12:20.620\nSo.\n&gt;&gt; Right.\n\n215\n00:12:20.620 --> 00:12:22.270\n&gt;&gt; Also, you know, Zach.\n\n216\n00:12:23.490 --> 00:12:26.110\nZach started down some programming realms.\n\n217\n00:12:26.110 --> 00:12:29.290\nIf I hand it to Zach, and maybe he's\nbeen doing for, it's just easy for\n\n218\n00:12:29.290 --> 00:12:32.080\nhim to go top to bottom and\nlook through it.\n\n219\n00:12:32.080 --> 00:12:34.810\nInstead of having to go,\nnow I wonder what that does.\n\n220\n00:12:34.810 --> 00:12:37.880\nAnd then have to do exploration\non the code that I wrote.\n\n221\n00:12:37.880 --> 00:12:41.600\nThat was based on the explorations that I\ndid on the Python standard library, so.\n\n222\n00:12:41.600 --> 00:12:43.760\nThat's kinda my impetus for that.\n\n223\n00:12:43.760 --> 00:12:50.720\nNow I'm gonna get off my soapbox, and come\non back to this respective point class.\n\n224\n00:12:50.720 --> 00:12:57.460\nAnd def dunder, for absolute value,\nwe're gonna stay with a theme here, Zach.\n\n225\n00:12:57.460 --> 00:12:59.980\nZach, what do you think\nthe Dunder method is?\n\n226\n00:12:59.980 --> 00:13:04.080\n&gt;&gt; I believe it would be Dunder ABS.\n\n227\n00:13:04.080 --> 00:13:06.960\n&gt;&gt; And usually when it's\na function call like that,\n\n228\n00:13:06.960 --> 00:13:10.290\nthe Dunder method matches\nthe function call name, right?\n\n229\n00:13:10.290 --> 00:13:14.870\nSo Zach is learning, makes me happy.\n\n230\n00:13:14.870 --> 00:13:21.365\nSo we're going to say return point and\nall it is, is just the abs of self.x.\n\n231\n00:13:21.365 --> 00:13:27.430\nAnd the abs and\nabsolute value of self.y, all right?\n\n232\n00:13:27.430 --> 00:13:32.100\nThat one's not, we're gonna stay there,\nwe'll come back and tweak that one.\n\n233\n00:13:32.100 --> 00:13:34.256\nThat one's,\nwe just want to make sure this works.\n\n234\n00:13:34.256 --> 00:13:41.690\nNow, def, the tilde and\nI'm not gonna ask Zach this one.\n\n235\n00:13:41.690 --> 00:13:44.370\nBecause I've actually\nintentionally done things\n\n236\n00:13:44.370 --> 00:13:48.600\njust the last few minutes that\nwould probably sway his answer.\n\n237\n00:13:48.600 --> 00:13:52.345\nSo this is actually invert instead of IMB.\n\n238\n00:13:52.345 --> 00:13:57.725\nBecause I named the file IMB I've\nsaid that a couple times and\n\n239\n00:13:57.725 --> 00:13:59.375\nthe operator doesn't give any hints.\n\n240\n00:13:59.375 --> 00:14:02.285\nSo I'm not gonna be mean\nto you on that one Zach.\n\n241\n00:14:02.285 --> 00:14:03.385\n&gt;&gt; Thank you very much.\n\n242\n00:14:03.385 --> 00:14:04.115\n&gt;&gt; And then this one,\n\n243\n00:14:04.115 --> 00:14:08.665\nwhat does it mean to invert a point,\nwhat if we just switch x and y?\n\n244\n00:14:08.665 --> 00:14:15.120\nRight, I think that from the concept\nof a point that is an invert and\n\n245\n00:14:15.120 --> 00:14:20.110\ntechnically I guess we'll switch the x and\ny then we'll get weirdness.\n\n246\n00:14:20.110 --> 00:14:24.430\nWe could do something like\nswitch the x and the y and\n\n247\n00:14:24.430 --> 00:14:29.270\nsigns so what does that do?\n\n248\n00:14:30.510 --> 00:14:33.120\nOr we could just switch both of the signs.\n\n249\n00:14:33.120 --> 00:14:36.610\nNow you have to think about what\nit means to invert a point.\n\n250\n00:14:36.610 --> 00:14:40.330\nIf we switch both of the signs that means\nif it's at one one it's now at negative\n\n251\n00:14:40.330 --> 00:14:46.540\none negative one and\nyou've made a reflection about something.\n\n252\n00:14:46.540 --> 00:14:52.850\nIf you switch the order, right, for 1,\n1 and 1, 1 it doesn't make a difference.\n\n253\n00:14:52.850 --> 00:14:56.032\nBut if it was 1, 2 then we'd be at 2,1.\n\n254\n00:14:56.032 --> 00:14:58.990\nAnd you kind of just made a translation.\n\n255\n00:15:00.320 --> 00:15:05.590\nIf you switch them and change their signs,\n\n256\n00:15:05.590 --> 00:15:09.380\nthen, well, you've reflected and\nkind of translated.\n\n257\n00:15:10.380 --> 00:15:14.270\nSo there's a bunch of things and\nit would be fun to play around with it.\n\n258\n00:15:14.270 --> 00:15:15.619\nI think those puzzles are fun.\n\n259\n00:15:15.619 --> 00:15:17.970\n&gt;&gt; It would be fun.\n&gt;&gt; Maybe you don't.\n\n260\n00:15:17.970 --> 00:15:20.610\nBut let's just flip the order, right.\n\n261\n00:15:20.610 --> 00:15:24.770\nLet's return a point where the y\nthat was is now the x, and\n\n262\n00:15:24.770 --> 00:15:27.850\nthe x that was is now the y, all right?\n\n263\n00:15:27.850 --> 00:15:30.660\nSo self.y, self.x.\n\n264\n00:15:30.660 --> 00:15:35.340\nSo I'm returning a new point that has the\narguments switched, that's all I've done.\n\n265\n00:15:35.340 --> 00:15:39.640\nLet's see if this all\nworks out in my favor.\n\n266\n00:15:39.640 --> 00:15:43.250\nIf it doesn't, I'm going to\nblame I guess I'll blame myself\n\n267\n00:15:44.260 --> 00:15:46.710\nbecause I wrote all the code.\n\n268\n00:15:46.710 --> 00:15:47.951\nLets, it's ABS and\n\n269\n00:15:47.951 --> 00:15:53.071\ndon't accidentally try to open something\nthat's way out in your file path there.\n\n270\n00:15:53.071 --> 00:15:56.266\nAnd now I have ap1 and\nlet's look at abs(p1), and\n\n271\n00:15:56.266 --> 00:15:58.470\nthis is just a test to see if it works.\n\n272\n00:15:58.470 --> 00:15:59.872\nIt does.\n\n273\n00:15:59.872 --> 00:16:01.180\nWhat if I look at p3?\n\n274\n00:16:01.180 --> 00:16:02.217\nThat has negatives.\n\n275\n00:16:02.217 --> 00:16:05.770\nSo I'm gonna say the absolute value of p3.\n\n276\n00:16:05.770 --> 00:16:06.890\nAnd it removes those negatives.\n\n277\n00:16:06.890 --> 00:16:07.530\nNow.\n&gt;&gt; Hm.\n\n278\n00:16:07.530 --> 00:16:10.000\n&gt;&gt; That's not entirely interesting.\n\n279\n00:16:10.000 --> 00:16:10.930\nYou're like, well, yeah.\n\n280\n00:16:10.930 --> 00:16:12.990\nI see that.\nWe're gonna come back to that.\n\n281\n00:16:12.990 --> 00:16:15.680\nLet's check to see if the invert works.\n\n282\n00:16:15.680 --> 00:16:16.290\nInvert of p1.\n\n283\n00:16:16.290 --> 00:16:20.558\nAnd now it has reverse arguments.\n\n284\n00:16:20.558 --> 00:16:21.254\n&gt;&gt; Mm-hm.\nMm-hm.\n\n285\n00:16:21.254 --> 00:16:21.920\n&gt;&gt; Okay?\n\n286\n00:16:21.920 --> 00:16:24.650\nSo in the context of your application,\nwhat does invert mean?\n\n287\n00:16:24.650 --> 00:16:27.500\nWell for a point,\nI'm just saying it flips.\n\n288\n00:16:27.500 --> 00:16:32.040\nLet's try, we're gonna keep on this\ninvert tangent, we're gonna come\n\n289\n00:16:32.040 --> 00:16:35.820\nback to absolute value and actually make\nit meaningful in the context of point.\n\n290\n00:16:35.820 --> 00:16:40.910\nBut in order to look at invert,\nlet's create another class.\n\n291\n00:16:42.240 --> 00:16:45.520\nThat is our own fraction class.\n\n292\n00:16:45.520 --> 00:16:46.445\n&gt;&gt; Mm hmm.\n\n293\n00:16:46.445 --> 00:16:48.935\n&gt;&gt; Alright?\n\n294\n00:16:48.935 --> 00:16:51.680\nAnd so we're gonna open up.\n\n295\n00:16:51.680 --> 00:16:55.180\nWait for it, wait for it,\nabsolute value and invert.\n\n296\n00:16:55.180 --> 00:16:57.580\nI am not going to fully\nimplement the fraction class.\n\n297\n00:17:00.150 --> 00:17:04.866\nBut what I am going to have\nhere is under init, that is,\n\n298\n00:17:04.866 --> 00:17:07.650\na numerator and a denominator.\n\n299\n00:17:09.887 --> 00:17:16.660\nAnd I'm gonna say self.x, or excuse me,\n= num, and that stands for numerator.\n\n300\n00:17:16.660 --> 00:17:21.840\nAnd then denom = denom, all right?\n\n301\n00:17:21.840 --> 00:17:23.784\nIf we invert.\n\n302\n00:17:26.859 --> 00:17:30.751\nThen, I'm gonna say, okay,\n\n303\n00:17:30.751 --> 00:17:38.100\njust return a fraction that is self.denom,\nself.num.\n\n304\n00:17:38.100 --> 00:17:41.450\nAnd I'm doing this intentionally,\nyou're like, that looks real familiar,\n\n305\n00:17:41.450 --> 00:17:42.480\nit looks like that point.\n\n306\n00:17:44.750 --> 00:17:47.245\nBut the concept behind it can change.\n\n307\n00:17:47.245 --> 00:17:51.534\nBecause if I change this\n\n308\n00:17:51.534 --> 00:17:56.042\nrepr to be, wait for it.\n\n309\n00:17:56.042 --> 00:18:02.270\nI'm just gonna return a string that says,\nfraction.\n\n310\n00:18:02.270 --> 00:18:07.213\nAnd then in here it is going to be\nthe numeric representation of the fraction\n\n311\n00:18:07.213 --> 00:18:09.888\nas numerator over denominator, okay?\n\n312\n00:18:09.888 --> 00:18:15.370\nSo boom and I am not going to get fancy so\nI am just going to use a slash.\n\n313\n00:18:17.450 --> 00:18:21.440\nFormat self dot numerator,\nself dot denominator.\n\n314\n00:18:23.040 --> 00:18:24.140\nJust like so, okay?\n\n315\n00:18:25.380 --> 00:18:28.028\nSo now if we come back and\nwe bring that back into scope.\n\n316\n00:18:32.850 --> 00:18:33.830\nAgain, don't do that.\n\n317\n00:18:35.400 --> 00:18:38.910\nAnd this is a fraction of 1,2.\n\n318\n00:18:38.910 --> 00:18:42.130\nThen that is a fraction of one half,\nalright?\n\n319\n00:18:42.130 --> 00:18:43.916\nSo that is what I have done.\n\n320\n00:18:43.916 --> 00:18:47.984\nWhat is the, if I invert that\nthen it is two over one, right?\n\n321\n00:18:47.984 --> 00:18:52.630\nNow I can add additional logic I can get\ncrazy complicated and then say, well only\n\n322\n00:18:52.630 --> 00:18:56.950\ngive me the most simplified version,\nbecause if I do something like this.\n\n323\n00:19:01.470 --> 00:19:02.435\nThat would break.\n\n324\n00:19:02.435 --> 00:19:05.722\n&gt;&gt; [LAUGH]\n&gt;&gt; But it's 2 or 4 and really 2 or\n\n325\n00:19:05.722 --> 00:19:09.396\n4 is as the same as 1 over 2, right?\n\n326\n00:19:09.396 --> 00:19:15.405\nBut likewise if I invert that is 4 over 2,\nor 4 over 2 is actually this 2.\n\n327\n00:19:17.280 --> 00:19:24.710\nSo, it's not perfect, but\nusing that invert, if I were to say\n\n328\n00:19:24.710 --> 00:19:30.830\nf plus, or\nf times the inverse of f, right?\n\n329\n00:19:30.830 --> 00:19:35.630\nNumber one, it's broke now,\nwhy is that broke?\n\n330\n00:19:35.630 --> 00:19:37.185\nWell, because I need to do a multiply.\n\n331\n00:19:38.860 --> 00:19:41.040\nLet's see how this would clean things up.\n\n332\n00:19:42.340 --> 00:19:46.470\nAnd then we're gonna come back and\nlook at this point class for\n\n333\n00:19:46.470 --> 00:19:49.560\na more kind of interesting absolute value,\nall right?\n\n334\n00:19:49.560 --> 00:19:54.210\nSo I need a multiply and we've seen\nin a previous, I'm doing a callback.\n\n335\n00:19:57.270 --> 00:20:02.960\nSelf, other, and\nthis is where it gets tricky.\n\n336\n00:20:02.960 --> 00:20:05.290\nI'm not doing most simple form.\n\n337\n00:20:05.290 --> 00:20:10.140\nSo the new denominator\n\n338\n00:20:10.140 --> 00:20:15.145\nis self.denom times, wait for it.\n\n339\n00:20:15.145 --> 00:20:16.420\nOther.denom.\n\n340\n00:20:17.780 --> 00:20:23.156\nThe new numerator is self.numerator times\n\n341\n00:20:23.156 --> 00:20:27.810\nother times denominator plus other.\n\n342\n00:20:27.810 --> 00:20:30.690\nAnd if you don't understand\nthese relationships that's\n\n343\n00:20:30.690 --> 00:20:33.452\nperfectly okay; it will be\na fun little adventure.\n\n344\n00:20:33.452 --> 00:20:34.650\n&gt;&gt; Mm-hm.\n\n345\n00:20:34.650 --> 00:20:41.168\n&gt;&gt; Other.numerator times self.numerator.\n\n346\n00:20:41.168 --> 00:20:46.380\nAnd then we're just going\nto return a new fraction.\n\n347\n00:20:48.430 --> 00:20:53.230\nThat is numerator, and\ndenominator just like that.\n\n348\n00:20:53.230 --> 00:20:55.600\nAll right now I can\nmultiply two fractions.\n\n349\n00:20:55.600 --> 00:20:58.650\n&gt;&gt; Not in the most simplest form,\nbut that's all right.\n\n350\n00:20:58.650 --> 00:21:02.040\nAnd then, bring these back into scope, and\n\n351\n00:21:02.040 --> 00:21:06.380\nsay f equals the fraction of 1 over 2.\n\n352\n00:21:06.380 --> 00:21:10.220\nAnd then, okay, well,\nwhat, we have one half.\n\n353\n00:21:10.220 --> 00:21:12.800\nThe inverse of one half is 2.\n\n354\n00:21:12.800 --> 00:21:15.660\nCan we do multiplication this way?\n\n355\n00:21:15.660 --> 00:21:16.750\nYep.\n\n356\n00:21:16.750 --> 00:21:20.690\nThree fourths, I've got something\nwrong there, because a half and\n\n357\n00:21:20.690 --> 00:21:22.670\na half should be one fourth.\n\n358\n00:21:24.060 --> 00:21:26.665\nSo I got my logic there wrong,\nbut that's all right.\n\n359\n00:21:26.665 --> 00:21:31.145\nProbably missing something.\n\n360\n00:21:31.145 --> 00:21:38.390\n[COUGH] Actually, so\nthe denominator's right, the numerator.\n\n361\n00:21:38.390 --> 00:21:40.470\nI must have typed something.\n\n362\n00:21:40.470 --> 00:21:41.110\nWe'll take a look at that.\n\n363\n00:21:41.110 --> 00:21:42.380\nIt's not a problem.\n\n364\n00:21:42.380 --> 00:21:48.070\nBut if I say, times here,\nthat's three halves.\n\n365\n00:21:48.070 --> 00:21:49.945\nAnd why is that?\n\n366\n00:21:49.945 --> 00:21:52.970\nBecause we took one half, flipped it here.\n\n367\n00:21:52.970 --> 00:21:55.610\nNow I wanna go fix this logic\nbecause really I should get one.\n\n368\n00:21:55.610 --> 00:21:57.330\n&gt;&gt; Hm.\n&gt;&gt; All the time.\n\n369\n00:21:57.330 --> 00:21:59.290\nI'm getting one and a half.\n\n370\n00:21:59.290 --> 00:22:02.850\nSo let's go a little\nlive action debugging.\n\n371\n00:22:02.850 --> 00:22:05.231\nIf we can't find it.\n\n372\n00:22:05.231 --> 00:22:08.810\nIt's okay because I think this\nexemplifies how you could use it.\n\n373\n00:22:08.810 --> 00:22:11.380\nAnd it just may be my logic.\n\n374\n00:22:11.380 --> 00:22:16.040\nSo, the numerator of the cell\ntimes the other's denominator and\n\n375\n00:22:16.040 --> 00:22:17.100\nthat would give me the numerator.\n\n376\n00:22:18.740 --> 00:22:20.570\nAlright and then the other one.\n\n377\n00:22:20.570 --> 00:22:25.736\nSo I add those together, I found it.\n\n378\n00:22:27.662 --> 00:22:30.711\nIt's self.denom.\n\n379\n00:22:30.711 --> 00:22:32.110\n&gt;&gt; Yeah you're a better man than I am.\n\n380\n00:22:32.110 --> 00:22:34.109\n&gt;&gt; There we go.\n\n381\n00:22:34.109 --> 00:22:38.477\nI was like I'm pretty sure that's the\nalgorithm I've done that a bunch of times.\n\n382\n00:22:38.477 --> 00:22:42.100\nSo the fraction of 1, 2, right?\n\n383\n00:22:42.100 --> 00:22:43.460\nThere's f.\n\n384\n00:22:43.460 --> 00:22:44.806\nWhat is the inverse of f?\n\n385\n00:22:44.806 --> 00:22:48.806\n2 over 1.\nWhat is f times the inverse of f?\n\n386\n00:22:48.806 --> 00:22:50.570\n5 halves.\n\n387\n00:22:50.570 --> 00:22:54.100\nMm, mm, 2 and a half.\n\n388\n00:22:55.340 --> 00:22:57.810\nNo, you know what I've done?\n\n389\n00:22:57.810 --> 00:23:00.068\n&gt;&gt; What have you done?\n&gt;&gt; I've implemented the add function.\n\n390\n00:23:00.068 --> 00:23:00.967\n&gt;&gt; Uh-oh.\n\n391\n00:23:00.967 --> 00:23:02.609\n&gt;&gt; For multiply.\n\n392\n00:23:03.890 --> 00:23:07.135\nZach, I can't believe you'd let me-\n&gt;&gt; Multiply and add at the same time.\n\n393\n00:23:07.135 --> 00:23:10.970\n&gt;&gt; [LAUGH] So\nthis is how you add two fractions.\n\n394\n00:23:10.970 --> 00:23:15.130\nSome of you are probably screaming at me,\ngoing, that's not right.\n\n395\n00:23:15.130 --> 00:23:15.930\n&gt;&gt; Okay.\n&gt;&gt; You actually\n\n396\n00:23:15.930 --> 00:23:17.710\njust need to multiply straight across.\n\n397\n00:23:17.710 --> 00:23:18.210\n&gt;&gt; Right on.\n\n398\n00:23:19.610 --> 00:23:23.715\nSo I made that way more\ncomplicated than it needed to be.\n\n399\n00:23:23.715 --> 00:23:25.220\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n400\n00:23:25.220 --> 00:23:29.030\nyou know we could remove that who knows.\n\n401\n00:23:29.030 --> 00:23:33.787\nNot that, don't do that and\nwe're gonna say self.denom times\n\n402\n00:23:33.787 --> 00:23:37.150\nother.denom like that.\n\n403\n00:23:37.150 --> 00:23:39.640\nWe're actually gonna get\nthe expected behavior now.\n\n404\n00:23:39.640 --> 00:23:40.900\n&gt;&gt; Okie dokie.\n\n405\n00:23:40.900 --> 00:23:44.532\n&gt;&gt; And if we don't, well,\nI'm gonna run out of the studio.\n\n406\n00:23:44.532 --> 00:23:45.107\n&gt;&gt; It's my fault.\n\n407\n00:23:45.107 --> 00:23:46.589\n&gt;&gt; Yeah, well,\nwe'll go with it as Zach's fault.\n\n408\n00:23:51.394 --> 00:23:57.363\n1/2, 2/1, 2/2 which is 1.\n\n409\n00:23:57.363 --> 00:23:57.967\n&gt;&gt; Which is 1.\n\n410\n00:23:57.967 --> 00:24:02.090\n&gt;&gt; So if I take a fraction I\nmultiply by its inverse, all right?\n\n411\n00:24:02.090 --> 00:24:03.985\nIt's reciprocal.\n\n412\n00:24:03.985 --> 00:24:04.914\nBoom, then I always get one.\n\n413\n00:24:04.914 --> 00:24:10.010\nThat was a lot of work to implement\na feature that's not available.\n\n414\n00:24:10.010 --> 00:24:10.920\n&gt;&gt; I am applauding.\n\n415\n00:24:10.920 --> 00:24:16.412\n&gt;&gt; In the Python standard library and part\nof it was cuz I had a brain lapse there,\n\n416\n00:24:16.412 --> 00:24:21.120\na whole bunch of shenanigans,\nwhere I was adding when I should multiply.\n\n417\n00:24:21.120 --> 00:24:24.340\nIt was bad, but those things happen.\n\n418\n00:24:24.340 --> 00:24:26.570\nLet's look at this one final thing.\n\n419\n00:24:26.570 --> 00:24:30.340\nThen, now I've messed\nthat fraction one up,\n\n420\n00:24:30.340 --> 00:24:33.780\nI'm kind of afraid to do this other one,\nbut that's all right.\n\n421\n00:24:33.780 --> 00:24:37.450\nWhen I say absolute value,\nwe could keep this one right here, right?\n\n422\n00:24:37.450 --> 00:24:40.670\nHowever it's almost like what\nis the distance to zero?\n\n423\n00:24:41.740 --> 00:24:46.510\nSo the distance for a particular point\nfrom zero if it's on a two dimensional\n\n424\n00:24:46.510 --> 00:24:52.406\nplane is self.x Squared plus\n\n425\n00:24:52.406 --> 00:24:57.740\nself.y squared all to the one half power.\n\n426\n00:24:59.900 --> 00:25:04.728\nAnd then I return distance.\n\n427\n00:25:04.728 --> 00:25:07.235\nAnd now here's what's interesting,\nit's not returning a point type.\n\n428\n00:25:07.235 --> 00:25:14.360\nThis is perfectly okay as long\nas consistent and reasonable.\n\n429\n00:25:14.360 --> 00:25:19.810\nSo if I have a point, right,\nwell, if I say abs(p1),\n\n430\n00:25:19.810 --> 00:25:26.620\nit is 2.23 units along\nthe shortest path from the origin.\n\n431\n00:25:26.620 --> 00:25:31.344\nSo let's say, p2, well, what is abs(p2)?\n\n432\n00:25:31.344 --> 00:25:33.772\nIt's 3.6.\n\n433\n00:25:33.772 --> 00:25:37.070\nI'm gonna make a point that I know\nis gonna have an even number.\n\n434\n00:25:37.070 --> 00:25:41.855\nSo if the point,\nlet's say it's p at (3,4),\n\n435\n00:25:41.855 --> 00:25:46.300\nthen what is the absolute value of p?\n\n436\n00:25:46.300 --> 00:25:49.460\nIt is 5.\nIt is exactly 5 away from the origin\n\n437\n00:25:49.460 --> 00:25:51.080\nalong that diagonal.\n\n438\n00:25:51.080 --> 00:25:55.090\nSo you could use the absolute value\nto have a different meaning, and for\n\n439\n00:25:55.090 --> 00:25:58.140\npoints it may be how far\naway from the center, right?\n\n440\n00:25:58.140 --> 00:26:01.710\nMy nose, if it's over here,\nhow far away on the shore is that.\n\n441\n00:26:01.710 --> 00:26:05.420\nIt was the vector, what is\nthe magnitude of the vector, right?\n\n442\n00:26:05.420 --> 00:26:09.840\nAnd you could do that by saying\nsomething actually very similar to this.\n\n443\n00:26:09.840 --> 00:26:14.310\nOr maybe he's created a string class or\na date class and say,\n\n444\n00:26:14.310 --> 00:26:20.430\nwhat is the absolute value, and\nyou have your own custom date, right?\n\n445\n00:26:20.430 --> 00:26:21.350\nThe absolute value?\n\n446\n00:26:21.350 --> 00:26:24.830\nWell, I want the absolute value to\nbe the total number of seconds.\n\n447\n00:26:24.830 --> 00:26:28.710\nOr maybe it's just the number of days,\nright?\n\n448\n00:26:28.710 --> 00:26:31.890\nIt has to be application specific,\nabsolute value and\n\n449\n00:26:31.890 --> 00:26:36.860\ninvert kind of cases but can be useful\ndepending on what you need them for.\n\n450\n00:26:36.860 --> 00:26:40.770\n&gt;&gt; Well done sir, absolute value and\ninverse anothe,r wonderful episode inside\n\n451\n00:26:40.770 --> 00:26:44.450\nthe Python data model series, anything\nelse you'd like to say before we go?\n\n452\n00:26:44.450 --> 00:26:47.640\n&gt;&gt; No, this is one of those\nthings where I'd like to show\n\n453\n00:26:48.990 --> 00:26:51.502\nthat not everything is rainbow and\nunicorn.\n\n454\n00:26:51.502 --> 00:26:54.468\nSometimes you're gonna mess up,\nyou gotta find those issues.\n\n455\n00:26:54.468 --> 00:26:59.000\nYou're gonna pin point them there, and\nit's okay, you're gonna mess up sometimes.\n\n456\n00:26:59.000 --> 00:27:02.220\nJust always be alert, always be thinking,\nalways be trying something new.\n\n457\n00:27:02.220 --> 00:27:07.500\nIf you're not making mistakes, then\nyou're not pushing yourself hard enough,\n\n458\n00:27:07.500 --> 00:27:09.550\nand so\nyou should continue to move forward.\n\n459\n00:27:09.550 --> 00:27:10.510\n&gt;&gt; Right, I agree with that.\n\n460\n00:27:10.510 --> 00:27:13.050\nWhether they say it's not the destination,\nit's the trip itself.\n\n461\n00:27:13.050 --> 00:27:14.180\nI mean, it's great.\n\n462\n00:27:14.180 --> 00:27:15.100\nExplore, explore.\n\n463\n00:27:15.100 --> 00:27:18.360\nAnd in fact, explore everything\ninside the Python data model series.\n\n464\n00:27:18.360 --> 00:27:20.240\nYou'll be glad you did, and\nyou're in that course library.\n\n465\n00:27:20.240 --> 00:27:23.680\nThere's thousands of other videos\nthat will help you go further.\n\n466\n00:27:23.680 --> 00:27:25.660\nAnd tell everybody you\nknow about DevProTV.\n\n467\n00:27:25.660 --> 00:27:27.265\nA good DevPro is always learning.\n\n468\n00:27:27.265 --> 00:27:29.060\nThanks for watching, I'm Zach Memos.\n\n469\n00:27:29.060 --> 00:27:29.790\n&gt;&gt; And I'm Justin Dennison.\n\n470\n00:27:29.790 --> 00:27:31.213\n&gt;&gt; And we will see you soon.\n\n471\n00:27:31.213 --> 00:27:36.026\n[MUSIC]\n\n",
          "vimeoId": "253279974"
        },
        {
          "description": "In this episode, Justin and Zach explore converting custom objects to their float and integer representation using the methods \\_\\_int\\_\\_ and \\_\\_float\\_\\_.",
          "length": "1176",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-10-1-integers_and_floats-012918-PGM.00_19_30_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-10-1-integers_and_floats-012918-PGM.00_19_30_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-10-1-integers_and_floats-012918-PGM.00_19_30_07.Still001-sm.jpg",
          "title": "Integers and Floats",
          "transcript": "WEBVTT\n\n1\n00:00:00.002 --> 00:00:10.002\n[MUSIC]\n\n2\n00:00:12.956 --> 00:00:16.470\nHello and thank you for watching DevProTV,\nhelping you learn wherever you go.\n\n3\n00:00:16.470 --> 00:00:21.144\nI'm your host Zach Memos, as we continue\non with Python Data Model integers and\n\n4\n00:00:21.144 --> 00:00:23.820\nfloats is the title of this episode.\n\n5\n00:00:23.820 --> 00:00:25.591\nLike Thanksgiving floats,\nI don't know, but\n\n6\n00:00:25.591 --> 00:00:27.370\nJustin Dennison is here\nto tell us all about it.\n\n7\n00:00:27.370 --> 00:00:28.690\nJustin, great to see you sir.\n\n8\n00:00:28.690 --> 00:00:30.330\nIt is good to be back in the studio and\n\n9\n00:00:30.330 --> 00:00:34.800\nhopefully I can draw the wool from\nyour eyes with integers and floats.\n\n10\n00:00:34.800 --> 00:00:39.110\nNow let's step back so\nwe don't get any confusion here.\n\n11\n00:00:39.110 --> 00:00:40.560\nWhen I say integers and floats,\n\n12\n00:00:40.560 --> 00:00:42.910\nyou're like, well there's already\nan integer type in Python.\n\n13\n00:00:42.910 --> 00:00:44.840\nThere's already a float type in Python.\n\n14\n00:00:44.840 --> 00:00:47.710\n&gt;&gt; Yes.\n&gt;&gt; That is floating point arithmetic or\n\n15\n00:00:47.710 --> 00:00:49.860\nfloating point numbers or integer numbers.\n\n16\n00:00:49.860 --> 00:00:53.070\nYou either have a whole number or\nyou have a number with a decimal.\n\n17\n00:00:53.070 --> 00:00:55.400\n&gt;&gt; So I'm like a giant,\ninflatable underdog.\n\n18\n00:00:55.400 --> 00:00:57.610\n&gt;&gt; It could be that, but it's not.\n\n19\n00:00:57.610 --> 00:00:58.400\n&gt;&gt; Okay, good, good.\n\n20\n00:00:58.400 --> 00:00:59.680\n&gt;&gt; It's not.\n\n21\n00:00:59.680 --> 00:01:03.580\nAnd there are times where\njargon does throw us off base.\n\n22\n00:01:03.580 --> 00:01:05.330\nSo let's just really drill down.\n\n23\n00:01:05.330 --> 00:01:07.960\nIn the concept of Python an integer is,\n\n24\n00:01:07.960 --> 00:01:10.860\nwell actually this is in\nthe concept of a few other things,\n\n25\n00:01:10.860 --> 00:01:14.200\nan integer is whole number,\npositive or negative, including zero.\n\n26\n00:01:14.200 --> 00:01:16.020\nAnd what do I mean by a whole number?\n\n27\n00:01:16.020 --> 00:01:18.831\nThere is no decimal aspect to it.\n\n28\n00:01:18.831 --> 00:01:22.740\nConsidering floats,\n\n29\n00:01:22.740 --> 00:01:27.285\nwell that is a number, positive or\nnegative that has a decimal place to it.\n\n30\n00:01:27.285 --> 00:01:28.555\n&gt;&gt; So like floating decimal?\n\n31\n00:01:28.555 --> 00:01:29.605\n&gt;&gt; Yeah like the floating decimal.\n\n32\n00:01:29.605 --> 00:01:33.165\nLike the floating decimal points that,\nyou know, they teach you all these tricks.\n\n33\n00:01:33.165 --> 00:01:37.765\nWell if I need a 10% tip then\nI move it to the left of 1.\n\n34\n00:01:37.765 --> 00:01:41.525\nYou're floating that point around to\nrepresent different numbers, okay?\n\n35\n00:01:42.530 --> 00:01:47.650\nNow, considering that, you're like,\nwell how are we even talking about this?\n\n36\n00:01:47.650 --> 00:01:52.690\nLast few episodes, we've actually been\ndiscussing how to emulate numeric types.\n\n37\n00:01:52.690 --> 00:01:55.060\n&gt;&gt; Right.\n&gt;&gt; And part of that is well,\n\n38\n00:01:55.060 --> 00:01:59.210\nwhat if I want an integer\nrepresentation of that type?\n\n39\n00:01:59.210 --> 00:02:02.220\nWhat if I want a floating point\nrepresentation of that type?\n\n40\n00:02:02.220 --> 00:02:05.190\nAnd that actually makes sense\nin the context of a few things.\n\n41\n00:02:05.190 --> 00:02:08.750\nWhat if I want the integer\nrepresentation of a string?\n\n42\n00:02:08.750 --> 00:02:12.260\nWell if inside the string it's\nactually an integer number,\n\n43\n00:02:12.260 --> 00:02:14.840\nwell that gives you the number\nback as an integer.\n\n44\n00:02:14.840 --> 00:02:18.490\nIf it's not, then things go horribly awry,\nI'm not gonna lie to you.\n\n45\n00:02:18.490 --> 00:02:20.500\nOr if you say, float of string,\n\n46\n00:02:20.500 --> 00:02:24.080\nit gives you the floating point\nrepresentation of that thing back.\n\n47\n00:02:24.080 --> 00:02:27.970\nNow, as with all of our previous episodes,\n\n48\n00:02:27.970 --> 00:02:30.430\nI say we should probably do\na little bit of exploration.\n\n49\n00:02:30.430 --> 00:02:31.630\nYou ready for some exploration today?\n\n50\n00:02:31.630 --> 00:02:32.640\n&gt;&gt; Let's explore.\n\n51\n00:02:32.640 --> 00:02:34.990\n&gt;&gt; He is ready for some exploration.\n\n52\n00:02:34.990 --> 00:02:36.150\nI almost messed up that word.\n\n53\n00:02:36.150 --> 00:02:36.860\nSo let's go ahead and\n\n54\n00:02:36.860 --> 00:02:40.770\ntake a look at my screen here, and\nlet's just hop into the Python Ripple.\n\n55\n00:02:40.770 --> 00:02:42.330\nYou gotta type in Python correctly.\n\n56\n00:02:42.330 --> 00:02:47.970\nWe're in Python 3 and if we look at int,\nthat is class, but we treat them as\n\n57\n00:02:47.970 --> 00:02:52.930\na data type, kind of a primitive type in\nother languages, but it really is a class.\n\n58\n00:02:54.060 --> 00:02:56.532\nAnd well, we have literals for them.\n\n59\n00:02:56.532 --> 00:03:01.052\nIf I say the type of 3, that is an int.\n\n60\n00:03:01.052 --> 00:03:02.580\nWhat is the type of 3.2?\n\n61\n00:03:02.580 --> 00:03:03.610\nThat is a float.\n\n62\n00:03:03.610 --> 00:03:06.090\nAnd so we have a float class.\n\n63\n00:03:06.090 --> 00:03:07.920\nAll right, that makes sense.\n\n64\n00:03:07.920 --> 00:03:09.290\nBut now let's back up.\n\n65\n00:03:09.290 --> 00:03:11.080\nIf I say the int of 3.2,\n\n66\n00:03:11.080 --> 00:03:15.900\nnotice I get the integer representation\nof a floating point number.\n\n67\n00:03:15.900 --> 00:03:16.910\nWhat does that mean?\n\n68\n00:03:16.910 --> 00:03:19.970\nCome to the decimal point, hack it off,\nand give me just the things to the left.\n\n69\n00:03:21.320 --> 00:03:24.470\nOkay, all right, so\nthis is kind of a conversion scheme.\n\n70\n00:03:24.470 --> 00:03:26.548\nConvert from float to int.\n\n71\n00:03:26.548 --> 00:03:29.990\nLikewise, can I get the float of 3?\n\n72\n00:03:29.990 --> 00:03:32.529\nYes it's 3.0.\n\n73\n00:03:32.529 --> 00:03:37.745\nThere's nothing there for an integer so it\ngoes, well I'm gonna tack on a decimal and\n\n74\n00:03:37.745 --> 00:03:42.760\nadd a 0 after the decimal point, so\nthat's the floating point representation.\n\n75\n00:03:42.760 --> 00:03:44.535\nNow this isn't really exciting, but\n\n76\n00:03:44.535 --> 00:03:47.170\nthere is something that\nyou may have done before.\n\n77\n00:03:47.170 --> 00:03:50.850\nAnd that's maybe you've taken user input,\nmaybe you've read in data from somewhere,\n\n78\n00:03:50.850 --> 00:03:53.160\nmaybe a CSV file or something like that.\n\n79\n00:03:53.160 --> 00:03:58.120\nThose all come in as strings, but\nmaybe they're not meant to be strings.\n\n80\n00:03:58.120 --> 00:04:01.250\nMaybe they're meant to be numbers, right?\n\n81\n00:04:01.250 --> 00:04:03.950\nAnd you have a decision to make here,\nis it an integer number or\n\n82\n00:04:03.950 --> 00:04:05.030\nis it a floating point number?\n\n83\n00:04:05.030 --> 00:04:08.320\nSo you have to make that delineation for\nyourself.\n\n84\n00:04:08.320 --> 00:04:09.595\nSo I'm gonna clear this out.\n\n85\n00:04:09.595 --> 00:04:13.031\nAnd I'm gonna say s = '1.23'.\n\n86\n00:04:13.031 --> 00:04:14.474\nWe're gonna use that.\n\n87\n00:04:14.474 --> 00:04:19.044\nOther than the quotes, that looks\na lot like a floating point number.\n\n88\n00:04:19.044 --> 00:04:20.368\nAll right?\n\n89\n00:04:20.368 --> 00:04:24.680\nAll right, so let's see if I can\ndo the floating point of s, and\n\n90\n00:04:24.680 --> 00:04:27.510\nit gives me the number\nrepresentation of it.\n\n91\n00:04:27.510 --> 00:04:31.110\nIt essentially converted\nfrom a string to a number.\n\n92\n00:04:31.110 --> 00:04:32.568\nCan I do the same thing with int?\n\n93\n00:04:32.568 --> 00:04:34.680\nWell, the int(s)?\n\n94\n00:04:34.680 --> 00:04:36.810\nNo, invalid literal.\n\n95\n00:04:36.810 --> 00:04:39.370\nThere's a point in there,\nthere's a decimal place in there and\n\n96\n00:04:39.370 --> 00:04:41.740\nin Python that actually fails.\n\n97\n00:04:41.740 --> 00:04:43.770\nI wanted to illustrate this\nbecause if you're familiar with\n\n98\n00:04:43.770 --> 00:04:44.880\nany of the programming languages,\n\n99\n00:04:44.880 --> 00:04:49.720\nmaybe even just cursory,\nthis isn't always what you expect.\n\n100\n00:04:49.720 --> 00:04:52.740\nIf you say I want the integer,\nit'll do a conversion and\n\n101\n00:04:52.740 --> 00:04:56.270\nthen it'll lop off the respective dot.\n\n102\n00:04:56.270 --> 00:04:57.880\nSo how does one fix that?\n\n103\n00:04:57.880 --> 00:05:00.800\nWell let's call this s1 and just say 1.\n\n104\n00:05:00.800 --> 00:05:07.660\nThen if I say int(s1), it now gives\nme the integer representation.\n\n105\n00:05:07.660 --> 00:05:09.870\nOkay, that makes sense.\n\n106\n00:05:09.870 --> 00:05:11.840\nThat makes sense in\nthe context of strings.\n\n107\n00:05:11.840 --> 00:05:17.080\nLet's do a little further exploration and\nsee do we get integer or\n\n108\n00:05:17.080 --> 00:05:20.080\nfloat representations of\nsome other things, right?\n\n109\n00:05:21.390 --> 00:05:27.030\nSo let's start with a list, and\nthat's 1, 2, 3, and say, int(a).\n\n110\n00:05:27.030 --> 00:05:31.130\nNope, it's broke, int argument must\nbe string, bytes like object, or\n\n111\n00:05:31.130 --> 00:05:33.480\na number, not list.\n\n112\n00:05:33.480 --> 00:05:36.200\nThis gives you a hint\nof what it's expecting.\n\n113\n00:05:36.200 --> 00:05:39.590\nA string, a bytes like object,\nwhich is kinda like a binary string,\n\n114\n00:05:39.590 --> 00:05:43.760\nwe're not gonna get into that real deeply,\nor a number.\n\n115\n00:05:43.760 --> 00:05:47.080\nOkay, well, what about float then?\n\n116\n00:05:48.600 --> 00:05:51.850\nFloat argument must be a strong or\na number, not a list.\n\n117\n00:05:51.850 --> 00:05:54.720\nSo lists are just out of it.\n\n118\n00:05:54.720 --> 00:05:56.290\nThat means more than likely,\n\n119\n00:05:56.290 --> 00:06:02.010\nbased on these error messages,\ndictionaries, sets, order dictionaries or\n\n120\n00:06:02.010 --> 00:06:06.450\nany of those other more complex structures\nare probably out of the game as well.\n\n121\n00:06:06.450 --> 00:06:07.312\nTuples, right?\n\n122\n00:06:07.312 --> 00:06:10.430\nOr tuples depending on\nyour pronunciation scheme.\n\n123\n00:06:10.430 --> 00:06:17.000\nBut there is one that I think we'll try\nbecause it might make a little more sense.\n\n124\n00:06:17.000 --> 00:06:22.830\nSo from datetime import datetime,\nthere we go.\n\n125\n00:06:22.830 --> 00:06:27.887\nAnd we're just gonna say,\ndatetime = datetime.now.\n\n126\n00:06:27.887 --> 00:06:30.965\nAnd what do we got?\n\n127\n00:06:30.965 --> 00:06:34.990\nWe got well, 2018, 1, 29,\n14th hour, 7th minute, 43rd second.\n\n128\n00:06:34.990 --> 00:06:38.320\nAnd again, I forget if those are millis or\nmicro seconds.\n\n129\n00:06:38.320 --> 00:06:39.820\nReally bad about that.\n\n130\n00:06:39.820 --> 00:06:41.180\nI usually go and look them up.\n\n131\n00:06:41.180 --> 00:06:42.711\n&gt;&gt; There are many micros.\n\n132\n00:06:42.711 --> 00:06:45.883\n&gt;&gt; That would make them nanos?\n\n133\n00:06:45.883 --> 00:06:47.022\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm not sure.\n\n134\n00:06:47.022 --> 00:06:47.973\nOr picos, who knows?\n\n135\n00:06:47.973 --> 00:06:49.119\n&gt;&gt; That may be a quark.\n\n136\n00:06:49.119 --> 00:06:52.511\n&gt;&gt; We could set that-\n&gt;&gt; [INAUDIBLE] They have somehow become\n\n137\n00:06:52.511 --> 00:06:58.980\nthe elementary building blocks of matter\njust by not knowing the appropriate unit.\n\n138\n00:06:58.980 --> 00:07:00.560\nNo, we're having fun.\n\n139\n00:07:00.560 --> 00:07:02.620\nI would just go look that up, make sure.\n\n140\n00:07:02.620 --> 00:07:06.640\nA lot of times you're not dealing with\nmicroseconds or milliseconds because,\n\n141\n00:07:06.640 --> 00:07:10.020\nwell, in the grand scheme of things,\nthat's hard for us to discern.\n\n142\n00:07:10.020 --> 00:07:12.720\nLike, how many milliseconds was that?\n\n143\n00:07:12.720 --> 00:07:16.480\nIf you're in a scientific world that\nmight make a little more sense.\n\n144\n00:07:16.480 --> 00:07:17.870\n&gt;&gt; Right,\nthat'd make more sense then, right.\n\n145\n00:07:17.870 --> 00:07:19.320\n&gt;&gt; You're doing instrument measurements,\n\n146\n00:07:19.320 --> 00:07:22.580\nyou may say,\nthis took 30 milliseconds to gather.\n\n147\n00:07:23.860 --> 00:07:29.006\nBut behind the scenes, this may be\nrepresented by the number of seconds,\n\n148\n00:07:29.006 --> 00:07:32.990\nor maybe the number of milliseconds or\nsome unit of time,\n\n149\n00:07:32.990 --> 00:07:37.783\nthat has elapsed since January 1st,\n1970 at 12 am.\n\n150\n00:07:37.783 --> 00:07:42.452\nSo I'm going to say int(dt),\ncross our fingers and no.\n\n151\n00:07:42.452 --> 00:07:43.238\n&gt;&gt; No broke.\n\n152\n00:07:43.238 --> 00:07:45.240\n&gt;&gt; No it's broke right.\n\n153\n00:07:45.240 --> 00:07:52.190\nBut what if I say int(dt) and\ntotal seconds.\n\n154\n00:07:52.190 --> 00:07:54.360\nI always get this wrong Zack.\n\n155\n00:07:54.360 --> 00:07:57.612\nAnd nope, so dt, and wait for\n\n156\n00:07:57.612 --> 00:08:02.440\nit, timestamp, every time, every time.\n\n157\n00:08:03.770 --> 00:08:08.110\nSo, if I say DT.timestamp, okay.\n\n158\n00:08:09.280 --> 00:08:10.390\nNot built in function.\n\n159\n00:08:10.390 --> 00:08:12.670\nYou actually have to call the function,\nthere we go.\n\n160\n00:08:12.670 --> 00:08:14.650\nSo now we have the integer representation.\n\n161\n00:08:14.650 --> 00:08:15.280\n&gt;&gt; Good.\n\n162\n00:08:15.280 --> 00:08:19.871\n&gt;&gt; Well, what if we go float dt_timestamp.\n\n163\n00:08:23.090 --> 00:08:25.110\nAnd, well, there we have it.\n\n164\n00:08:25.110 --> 00:08:29.590\nWe have that respective\nfloating point representation.\n\n165\n00:08:29.590 --> 00:08:31.820\nNow, here's the kicker.\n\n166\n00:08:31.820 --> 00:08:35.270\nI had to call another method on\nthe datetime to get another representation\n\n167\n00:08:35.270 --> 00:08:37.670\nthat I could feed into in and float.\n\n168\n00:08:37.670 --> 00:08:41.790\nThat, by and large,\nis not true of a custom object.\n\n169\n00:08:41.790 --> 00:08:45.890\nAgain, just to re-emphasize,\nthis is very much contextual.\n\n170\n00:08:45.890 --> 00:08:48.920\nDon't do this for\nthings that don't make sense.\n\n171\n00:08:48.920 --> 00:08:51.010\nAnd we'll actually build one\nto show you not what to do,\n\n172\n00:08:51.010 --> 00:08:54.960\nbut we'll also build one that might\nmake a little more sense, okay?\n\n173\n00:08:54.960 --> 00:08:57.630\nSo let's go ahead and\nget started on building that.\n\n174\n00:08:57.630 --> 00:08:58.970\n&gt;&gt; Yeah.\n&gt;&gt; And you know what?\n\n175\n00:08:58.970 --> 00:09:00.660\nLet's just start from scratch.\n\n176\n00:09:00.660 --> 00:09:01.615\nNo, I lied.\n\n177\n00:09:01.615 --> 00:09:02.720\n[LAUGH] I lied.\n\n178\n00:09:02.720 --> 00:09:08.780\nLet's grab this point class here, and\nI'm just gonna yank out the first part.\n\n179\n00:09:08.780 --> 00:09:14.330\nAnd we're gonna say floats_and_ints.py,\njust like so, right?\n\n180\n00:09:14.330 --> 00:09:19.180\nThat way I don't have to do\nthat ripper thing again, right?\n\n181\n00:09:19.180 --> 00:09:20.970\nOr reaper, either way.\n\n182\n00:09:20.970 --> 00:09:21.870\n&gt;&gt; Don't fear it.\n\n183\n00:09:21.870 --> 00:09:23.260\n&gt;&gt; Yeah, don't fear the reaper, right?\n\n184\n00:09:23.260 --> 00:09:26.200\nI don't know if we're gonna get in trouble\nwith copyright infringement on that.\n\n185\n00:09:26.200 --> 00:09:27.020\n&gt;&gt; We didn't sing it.\n\n186\n00:09:27.020 --> 00:09:29.205\n&gt;&gt; Yeah, we didn't sing it,\nso I don't know.\n\n187\n00:09:29.205 --> 00:09:31.200\n&gt;&gt; [LAUGH]\n&gt;&gt; So we look at this, and\n\n188\n00:09:31.200 --> 00:09:33.520\nlet's think about the context of a point.\n\n189\n00:09:33.520 --> 00:09:41.860\nIf I have a point, right,\nlet's say I have P1 equals the point 3.5.\n\n190\n00:09:41.860 --> 00:09:43.830\nIf I wanted to represent\nthis as an integer,\n\n191\n00:09:44.850 --> 00:09:49.960\nI would want to get back some single\nnumber that represents this point.\n\n192\n00:09:51.570 --> 00:09:54.090\nOkay, that might make sense.\n\n193\n00:09:55.680 --> 00:09:57.270\nLet's see here.\n\n194\n00:09:57.270 --> 00:09:59.370\nWhat is a single number?\n\n195\n00:09:59.370 --> 00:10:01.710\nWe've talked about this\nin previous episodes.\n\n196\n00:10:01.710 --> 00:10:05.460\nSo maybe I want the whole\nnumber representation of\n\n197\n00:10:05.460 --> 00:10:08.320\nthe distance from the origin for\na particular point.\n\n198\n00:10:08.320 --> 00:10:10.870\nHow far away from (0,0) is it?\n\n199\n00:10:10.870 --> 00:10:16.101\nAll right, so that calculation,\nwe'll just say distance =\n\n200\n00:10:16.101 --> 00:10:22.630\n(self.x **2 + self.y **2).\n\n201\n00:10:22.630 --> 00:10:24.450\nAll to the one-half hour,\nwe just square root.\n\n202\n00:10:25.500 --> 00:10:31.790\nAnd then we're gonna return the integer\nrepresentation of that number, okay?\n\n203\n00:10:31.790 --> 00:10:37.720\nBy doing this, well, we should get\nthe ability to cast this as an integer.\n\n204\n00:10:37.720 --> 00:10:39.820\nSo let's just check it out\nbefore we come back and\n\n205\n00:10:39.820 --> 00:10:41.930\nworry about floats and other things.\n\n206\n00:10:41.930 --> 00:10:46.320\nSo we're gonna say python3 -i\nfloats_and_ints, and let's look at p1.\n\n207\n00:10:46.320 --> 00:10:48.270\nThat's (3,5), right?\n\n208\n00:10:48.270 --> 00:10:50.840\nOver to the right three, up five.\n\n209\n00:10:50.840 --> 00:10:53.010\nAnd again, because we're in numeric types,\n\n210\n00:10:53.010 --> 00:10:56.430\nthere's really no way\naround math to some extent.\n\n211\n00:10:56.430 --> 00:11:00.650\nTry to keep it simple, as simple as\npossible, but that's just how it rolls.\n\n212\n00:11:00.650 --> 00:11:04.440\nSo if we say int of p1, notice I get five.\n\n213\n00:11:05.540 --> 00:11:06.660\nWhy is that?\n\n214\n00:11:06.660 --> 00:11:08.560\nWell, 3 squared is 9.\n\n215\n00:11:08.560 --> 00:11:10.050\n5 squared is 25.\n\n216\n00:11:10.050 --> 00:11:12.324\n9 plus 25 is 34.\n\n217\n00:11:12.324 --> 00:11:18.208\nThe square root of 34 is,\nlooks like 5 .7, something like that,\n\n218\n00:11:18.208 --> 00:11:23.920\n5.8 roundabout cuz 36 is the next\neven one and that would be 6.\n\n219\n00:11:23.920 --> 00:11:26.430\nBut then because I gave\nthe integer representation,\n\n220\n00:11:26.430 --> 00:11:30.070\nI just lop off all the decimal points and\nI get a five, all right.\n\n221\n00:11:30.070 --> 00:11:34.830\nNow just to show you this is not some\nkind of trickery, if I do float(p1),\n\n222\n00:11:34.830 --> 00:11:37.627\nfloat argument must be a string or\na number, not a point.\n\n223\n00:11:38.790 --> 00:11:43.680\nAnd that's because behind the scenes\nthere's not one of these magic methods.\n\n224\n00:11:43.680 --> 00:11:46.640\nI kind of glossed over that just\na moment ago, but that's all right.\n\n225\n00:11:46.640 --> 00:11:48.147\nWe're gonna hop back in here.\n\n226\n00:11:48.147 --> 00:11:49.807\nDunder int.\n\n227\n00:11:49.807 --> 00:11:50.895\nDunder int.\n\n228\n00:11:50.895 --> 00:11:51.525\n__int__.\n\n229\n00:11:51.525 --> 00:11:54.570\n&gt;&gt; I knew that was gonna happen.\n\n230\n00:11:54.570 --> 00:11:56.773\n&gt;&gt; Yeah, it seems to be a pattern.\n\n231\n00:11:56.773 --> 00:11:59.781\n&gt;&gt; [LAUGH]\n&gt;&gt; I like this pattern because I don't\n\n232\n00:11:59.781 --> 00:12:03.380\nhave to really think about it anymore,\nright?\n\n233\n00:12:03.380 --> 00:12:07.920\nSo __int says call this method if it's\navailable when I pass this object\n\n234\n00:12:07.920 --> 00:12:10.540\nto the int function.\n\n235\n00:12:10.540 --> 00:12:14.060\nNow you're like, wait a minute, earlier on\nin this episode you said int was a class.\n\n236\n00:12:14.060 --> 00:12:16.920\nWell, it is but\nit also has a function aspect to it.\n\n237\n00:12:16.920 --> 00:12:20.607\nSo you got to be careful there.\n\n238\n00:12:20.607 --> 00:12:26.620\nOkay, well, if this doesn't exist, we\nstart getting those error messages, right?\n\n239\n00:12:26.620 --> 00:12:32.610\nThe argument to int must be a string,\na biselect string or a number, right?\n\n240\n00:12:32.610 --> 00:12:34.570\nAnd we saw that that\ndoesn't work with float.\n\n241\n00:12:35.750 --> 00:12:41.470\nAll right, well Zack, because we've\nreally brought it back to the forefront,\n\n242\n00:12:41.470 --> 00:12:45.390\nif __int is the magic method name,\n\n243\n00:12:45.390 --> 00:12:50.010\nif you had guess what the magic name for\nfloat is, what do you think it would be.\n\n244\n00:12:50.010 --> 00:12:52.400\n&gt;&gt; Either flo or flt.\n\n245\n00:12:52.400 --> 00:12:54.500\n&gt;&gt; That would make sense, right?\n\n246\n00:12:54.500 --> 00:12:55.520\nThe shortened version.\n\n247\n00:12:55.520 --> 00:12:56.020\n&gt;&gt; Right.\n\n248\n00:12:57.360 --> 00:13:00.744\n&gt;&gt; But\nif I'm passing it to the float function,\n\n249\n00:13:00.744 --> 00:13:04.850\nif it's not a shorten version,\nwhat is it tipically?\n\n250\n00:13:04.850 --> 00:13:05.520\n&gt;&gt; It's float.\n\n251\n00:13:05.520 --> 00:13:07.050\n&gt;&gt; It is float, and actually Zach.\n\n252\n00:13:07.050 --> 00:13:08.950\n&gt;&gt; Yeah.\n&gt;&gt; Just that line of questioning,\n\n253\n00:13:08.950 --> 00:13:12.085\nZach's like well, if that's the case\nthen it has to be float, so\n\n254\n00:13:12.085 --> 00:13:16.440\nthat's the convention that we're using\nwithin the Python programming language.\n\n255\n00:13:16.440 --> 00:13:19.690\nSo it is __float, right?\n\n256\n00:13:19.690 --> 00:13:21.272\n&gt;&gt; Yep.\n&gt;&gt; Because we all [SOUND] down here.\n\n257\n00:13:21.272 --> 00:13:23.850\n&gt;&gt; Yeah, we all float in Python.\n\n258\n00:13:23.850 --> 00:13:25.090\nIt's always fun.\n\n259\n00:13:25.090 --> 00:13:26.400\nSo distance.\n\n260\n00:13:26.400 --> 00:13:27.930\nThis is the exact same calculation.\n\n261\n00:13:27.930 --> 00:13:31.540\nIf I was gonna use this a lot, I would\npull this out into another function and\n\n262\n00:13:31.540 --> 00:13:35.420\nthen just call that function internal\nto the class, or internal to this file.\n\n263\n00:13:37.580 --> 00:13:42.060\nSquared and then the square root.\n\n264\n00:13:42.060 --> 00:13:44.640\nOne more time, square root.\n\n265\n00:13:44.640 --> 00:13:47.970\nNow, to be explicit, I'm gonna say\nreturn the float version of this.\n\n266\n00:13:47.970 --> 00:13:53.030\nAnd because I'm taking the square root of\nit, I know that that's a float anyway.\n\n267\n00:13:53.030 --> 00:13:57.040\nSo there's not really any difference of\nnot putting float there versus not, but\n\n268\n00:13:57.040 --> 00:14:00.890\nI just want to draw a parallel\nbetween int and float itself.\n\n269\n00:14:00.890 --> 00:14:01.820\nOkay?\n\n270\n00:14:01.820 --> 00:14:07.393\nSo if we come here and we hop back into\nPython, that is not how you spell Python.\n\n271\n00:14:07.393 --> 00:14:10.511\nFloats_and_ints p1, the int of P1.\n\n272\n00:14:10.511 --> 00:14:14.123\nWell the integer representation\nis the distance from 0,\n\n273\n00:14:14.123 --> 00:14:17.760\nwhich is 5 because I grabbed\nthe integer version.\n\n274\n00:14:17.760 --> 00:14:18.808\nIf I say float of p1,\n\n275\n00:14:18.808 --> 00:14:22.658\nnow we get to see how close I was to my\nguesstimate to what the square root was.\n\n276\n00:14:22.658 --> 00:14:23.685\n&gt;&gt; Right, was gonna say.\n\n277\n00:14:23.685 --> 00:14:28.700\n&gt;&gt; 5.8, yeah, yeah.\n\n278\n00:14:28.700 --> 00:14:29.510\nThose are fun.\n\n279\n00:14:31.100 --> 00:14:33.170\nUse a calculator if you're unsure,\nall right.\n\n280\n00:14:33.170 --> 00:14:34.780\nSo now I can do this.\n\n281\n00:14:34.780 --> 00:14:38.760\nHowever, I do want to warn you,\nis this a typical use for int and flow?\n\n282\n00:14:40.380 --> 00:14:41.100\nProbably not.\n\n283\n00:14:42.430 --> 00:14:45.380\nBut in the context of your application,\nmaybe it makes sense.\n\n284\n00:14:45.380 --> 00:14:47.490\nHey, I want the integer to represent\nwhat is going to give you the distance.\n\n285\n00:14:48.750 --> 00:14:49.880\nOkay.\n\n286\n00:14:49.880 --> 00:14:52.180\nBut it may also be the unary plus sign,\nright?\n\n287\n00:14:52.180 --> 00:14:53.680\nYou put a plus sign in front of it.\n\n288\n00:14:53.680 --> 00:14:54.740\nNow you're gonna get a single number.\n\n289\n00:14:55.940 --> 00:14:57.200\nGot it.\n\n290\n00:14:57.200 --> 00:15:00.580\nThose are very much specific\nto what you're building.\n\n291\n00:15:01.600 --> 00:15:08.030\nI wouldn't break tradition too much\njust to keep things meaningful.\n\n292\n00:15:08.030 --> 00:15:12.190\nNow, to show you a gross\nmisrepresentation of this,\n\n293\n00:15:12.190 --> 00:15:16.020\nthat would be kind of weird, right?\n\n294\n00:15:16.020 --> 00:15:16.930\nLet's do this.\n\n295\n00:15:16.930 --> 00:15:19.390\nLet's create an element.\n\n296\n00:15:19.390 --> 00:15:22.330\nLet's create another object,\nanother custom object.\n\n297\n00:15:22.330 --> 00:15:25.160\nAnd I'm not gonna go\nthe whole shebang with this.\n\n298\n00:15:25.160 --> 00:15:27.550\nI'm not gonna create a rep or\nanything like that.\n\n299\n00:15:27.550 --> 00:15:31.280\nI'm gonna say def __init__,\n\n300\n00:15:31.280 --> 00:15:36.060\nwe're gonna create a shoe and the shoe\nis going to have a size and a color.\n\n301\n00:15:37.970 --> 00:15:42.620\nAnd I was going to say\nthat size = size and\n\n302\n00:15:42.620 --> 00:15:48.170\nself.color = color.\n\n303\n00:15:48.170 --> 00:15:50.640\nI'm, again, not going to go crazy.\n\n304\n00:15:50.640 --> 00:15:57.500\nI'm going to do integer just to\nshow you something you could do.\n\n305\n00:15:57.500 --> 00:15:58.728\nLet's just put a comment.\n\n306\n00:15:58.728 --> 00:16:04.592\nA short comment, bad,\nit's real bad writing.\n\n307\n00:16:04.592 --> 00:16:07.400\n&gt;&gt; [LAUGH]\n&gt;&gt; So this is bad, but\n\n308\n00:16:07.400 --> 00:16:13.440\nmaybe it actually make sense in the\ncontext of your respective application.\n\n309\n00:16:13.440 --> 00:16:15.630\nMaybe you have a shoe\ninventory application,\n\n310\n00:16:15.630 --> 00:16:19.510\nand you're wanna find the average\nsize of all the shoes, right?\n\n311\n00:16:19.510 --> 00:16:21.820\nSize is typically represent as a number.\n\n312\n00:16:21.820 --> 00:16:23.890\nA unitless number at that.\n\n313\n00:16:23.890 --> 00:16:26.001\nIt depends on where you are, right?\n\n314\n00:16:26.001 --> 00:16:30.538\nI always think it's fun to look inside\nmy shoe and go, I wear a 47, but\n\n315\n00:16:30.538 --> 00:16:33.888\nit's the size that's used\nin some other locale.\n\n316\n00:16:33.888 --> 00:16:34.516\nYeah, so\n\n317\n00:16:34.516 --> 00:16:40.460\nI think it make some more sense to get\nthe floating point representation, right?\n\n318\n00:16:40.460 --> 00:16:45.230\nBecause I may wear a 5 and\na half or a 12 and a half, right?\n\n319\n00:16:45.230 --> 00:16:49.095\nSo I'm going to return\nthe floating point of\n\n320\n00:16:49.095 --> 00:16:54.240\nself.signs as the float\nconversion between a shoe object\n\n321\n00:16:55.610 --> 00:16:59.570\nand the floating point\nimplementation of the shoe object.\n\n322\n00:16:59.570 --> 00:17:00.290\nAll right?\n\n323\n00:17:00.290 --> 00:17:05.618\nSo let's actually make our shoe, so shoe,\nedit, that's not how you spell shoe.\n\n324\n00:17:05.618 --> 00:17:11.330\nshoe = Shoe and well,\nlet us give it a 10.5.\n\n325\n00:17:11.330 --> 00:17:13.390\nAnd Zach, favorite color,\nwhat's your favorite color?\n\n326\n00:17:13.390 --> 00:17:16.530\n&gt;&gt; Blue.\n&gt;&gt; All right, we'll go with blue.\n\n327\n00:17:16.530 --> 00:17:17.310\nAnd there we go.\n\n328\n00:17:17.310 --> 00:17:19.160\nWe have a blue 10.5 shoe, right?\n\n329\n00:17:19.160 --> 00:17:21.714\nNow, if I was gonna make\na full fledged shoe,\n\n330\n00:17:21.714 --> 00:17:24.480\nI would probably need like who makes it,\nright?\n\n331\n00:17:25.720 --> 00:17:28.090\nColor, maybe a pattern designation.\n\n332\n00:17:28.090 --> 00:17:28.790\n&gt;&gt; Hush puppies.\n\n333\n00:17:28.790 --> 00:17:30.020\n&gt;&gt; Things like that.\n\n334\n00:17:30.020 --> 00:17:31.100\nThat sounds delicious.\n\n335\n00:17:31.100 --> 00:17:33.533\nYou're talking about something else.\n\n336\n00:17:33.533 --> 00:17:34.920\n&gt;&gt; [LAUGH]\n&gt;&gt; Sometimes I'm a little food.\n\n337\n00:17:34.920 --> 00:17:36.860\n&gt;&gt; Somebody missed lunch around here.\n\n338\n00:17:36.860 --> 00:17:38.770\n&gt;&gt; I'm a little food centric.\n\n339\n00:17:38.770 --> 00:17:43.346\nSo floats_and_ints, and\nnow let's look at shoe.\n\n340\n00:17:43.346 --> 00:17:46.650\nAnd there's our shoe object, right,\nwe don't have a reaper method, so\n\n341\n00:17:46.650 --> 00:17:49.560\nit just prints out this blah,\nbut that's all right.\n\n342\n00:17:49.560 --> 00:17:53.500\nLet's look at int of shoe,\nand nope, broke.\n\n343\n00:17:53.500 --> 00:17:58.260\nBut if we go to the float of shoe,\nand it is a 10.5.\n\n344\n00:17:58.260 --> 00:17:59.640\n&gt;&gt; Wow.\n&gt;&gt; Now,\n\n345\n00:17:59.640 --> 00:18:03.160\nwhat is the possible context\nthat maybe this isn't bad?\n\n346\n00:18:03.160 --> 00:18:07.010\nYou have a shoe inventory app, you have\nall the collection of shoe objects in\n\n347\n00:18:07.010 --> 00:18:10.800\nmemory and you say, I want to know\nthe average size of the shoe that I had,\n\n348\n00:18:10.800 --> 00:18:11.810\n&gt;&gt; Yep, that makes sense.\n\n349\n00:18:11.810 --> 00:18:13.180\n&gt;&gt; On hand.\n\n350\n00:18:13.180 --> 00:18:19.130\nWell, you could go shoe.size,\nand you probably should do that.\n\n351\n00:18:19.130 --> 00:18:22.200\nBut let's say you're like, well,\nI know that I can just call float them and\n\n352\n00:18:22.200 --> 00:18:23.130\nget the size.\n\n353\n00:18:23.130 --> 00:18:23.780\n&gt;&gt; Right, makes sense.\n\n354\n00:18:23.780 --> 00:18:26.680\n&gt;&gt; And then you just go,\nwell, iterate over these.\n\n355\n00:18:26.680 --> 00:18:30.060\nGive me the float import representation,\naverage those together.\n\n356\n00:18:30.060 --> 00:18:33.410\nAnd now you have the average size\nof the shoe in your inventory.\n\n357\n00:18:33.410 --> 00:18:38.130\nBut given the dunder int and the dunder\nfloat, if we obey those rules, we can get\n\n358\n00:18:38.130 --> 00:18:41.810\nthe floating point and the integer\nrepresentation of a respective object.\n\n359\n00:18:41.810 --> 00:18:43.780\nSo be careful, use them appropriately.\n\n360\n00:18:44.860 --> 00:18:46.940\n&gt;&gt; Great job as always Justin.\n\n361\n00:18:46.940 --> 00:18:47.650\nSo integers and\n\n362\n00:18:47.650 --> 00:18:51.820\nfloats, another wonderful episode\ninside of the Python Data Model Series.\n\n363\n00:18:51.820 --> 00:18:54.560\nBut before we move,\nanything else you'd like to say?\n\n364\n00:18:54.560 --> 00:18:56.120\n&gt;&gt; Well Zach, I will just say,\n\n365\n00:18:56.120 --> 00:19:00.755\nreally take heed of where appropriate\nwarnings for all of these.\n\n366\n00:19:00.755 --> 00:19:06.910\nThese can make your code really petty,\nreally nice to read, they can also cause\n\n367\n00:19:06.910 --> 00:19:11.250\nsome logic errors if used inappropriately,\nso just keep that in mind.\n\n368\n00:19:11.250 --> 00:19:13.420\n&gt;&gt; Awesome.\nPython data model, as I said before,\n\n369\n00:19:13.420 --> 00:19:14.110\nwonderful series.\n\n370\n00:19:14.110 --> 00:19:16.030\nMake sure you see each and every episode.\n\n371\n00:19:16.030 --> 00:19:18.950\nJustin's done a great job putting that\ntogether for you and you're in the course\n\n372\n00:19:18.950 --> 00:19:22.310\nlibrary so there's thousands of other\nvideos there to help you go further.\n\n373\n00:19:22.310 --> 00:19:23.380\nCheck those out.\n\n374\n00:19:23.380 --> 00:19:25.380\nAnd tell everybody you\nknow about DevProTV.\n\n375\n00:19:25.380 --> 00:19:26.620\nA good DevPro is always learning.\n\n376\n00:19:26.620 --> 00:19:27.310\nThanks for watching.\n\n377\n00:19:27.310 --> 00:19:28.160\nI'm Zach Memos.\n\n378\n00:19:28.160 --> 00:19:28.870\n&gt;&gt; And I'm Justin Dennison.\n\n379\n00:19:28.870 --> 00:19:30.058\n&gt;&gt; And we will see you soon.\n\n380\n00:19:30.058 --> 00:19:36.229\n&gt;&gt; [MUSIC]\n\n",
          "vimeoId": "253427997"
        },
        {
          "description": "In this episode, Justin and Zach demonstrate how custom objects can be rounded if they are emulating a numeric type using the \\_\\_round\\_\\_ method.",
          "length": "949",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-11-1-rounding-012918-PGM.00_16_59_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-11-1-rounding-012918-PGM.00_16_59_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-11-1-rounding-012918-PGM.00_16_59_22.Still001-sm.jpg",
          "title": "Rounding",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.690 --> 00:00:14.788\nHello and thank you for\nwatching DevPro.TV,\n\n3\n00:00:14.788 --> 00:00:16.410\nhelping you learn wherever you go.\n\n4\n00:00:16.410 --> 00:00:20.270\nI'm your host Zach Memos as we\ncontinue on with Python Data Model,\n\n5\n00:00:20.270 --> 00:00:21.410\nwe're gonna be rounding.\n\n6\n00:00:21.410 --> 00:00:22.960\nWhat does that mean?\n\n7\n00:00:22.960 --> 00:00:24.579\nWell, Justin Dennison's here\nto tell us all about that.\n\n8\n00:00:24.579 --> 00:00:27.170\nJustin, great to see you again, sir.\n&gt;&gt; I don't know, Zach.\n\n9\n00:00:27.170 --> 00:00:30.006\nAfter that face, I'm not sure\nwe're gonna be doing anything.\n\n10\n00:00:30.006 --> 00:00:31.949\nMan, you caught me off guard with that\n\n11\n00:00:31.949 --> 00:00:33.120\none.\n&gt;&gt; Rounding.\n\n12\n00:00:33.120 --> 00:00:35.439\n&gt;&gt; But I'm glad to be back here, and yeah,\n\n13\n00:00:35.439 --> 00:00:36.953\nwe are gonna be rounding.\n\n14\n00:00:36.953 --> 00:00:41.059\nAnd actually, this is a little bit of\na follow up to the previous episode,\n\n15\n00:00:41.059 --> 00:00:43.600\nwhere we saw floating and integers, right?\n\n16\n00:00:43.600 --> 00:00:48.409\nThe respective representations\nof set object, right?\n\n17\n00:00:48.409 --> 00:00:54.630\nSo maybe that makes sense, so\nlet's talk about rounding.\n\n18\n00:00:54.630 --> 00:00:58.175\nWell with floating point numbers,\nsometimes,\n\n19\n00:00:58.175 --> 00:01:03.282\nespecially on computers, you get\nall these numbers out to the right.\n\n20\n00:01:03.282 --> 00:01:06.357\nIt's 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n11, 12, well you can't get 9, 10.\n\n21\n00:01:06.357 --> 00:01:11.363\nTen doesn't work there, it'll just start\nback at zero, or something of that nature.\n\n22\n00:01:11.363 --> 00:01:14.449\nBut maybe you don't actually\nhave that much calculate, or\n\n23\n00:01:14.449 --> 00:01:17.060\nmaybe there's actually a rounding error.\n\n24\n00:01:17.060 --> 00:01:21.599\nSo the way that floating point numbers are\nrepresented within the computing system,\n\n25\n00:01:21.599 --> 00:01:23.563\nsometimes we have rounding errors.\n\n26\n00:01:23.563 --> 00:01:26.385\n3.0 may actually be represented as\n\n27\n00:01:26.385 --> 00:01:30.057\n2.9999999999999.\n&gt;&gt; Can you do that\n\n28\n00:01:30.057 --> 00:01:30.702\nagain?\n&gt;&gt; Yeah,\n\n29\n00:01:30.702 --> 00:01:32.697\nit's never gonna happen again.\n&gt;&gt; [LAUGH]\n\n30\n00:01:32.697 --> 00:01:34.226\n&gt;&gt; I thought about that,\n\n31\n00:01:34.226 --> 00:01:38.902\nit sounded like something off of\nCaddyshack or something like that.\n\n32\n00:01:38.902 --> 00:01:40.188\nYeah, [SOUND]\n&gt;&gt; [SOUND]\n\n33\n00:01:40.188 --> 00:01:42.001\n&gt;&gt; Well, we gotta get back on track,\n\n34\n00:01:42.001 --> 00:01:45.810\nZach,, we could easily get all\nkinds of crazy on Caddyshack.\n\n35\n00:01:45.810 --> 00:01:51.650\nBut given that necessity,\nif you have a custom float implementation,\n\n36\n00:01:51.650 --> 00:01:54.910\nyou may want to allow\nsomeone to just round.\n\n37\n00:01:54.910 --> 00:02:00.110\nNow you could just say, I'm gonna let\nthem handle that by themselves, right?\n\n38\n00:02:00.110 --> 00:02:01.297\nThey're gonna round,\n\n39\n00:02:01.297 --> 00:02:05.403\nand they're only gonna round after they\nget the floating point representation.\n\n40\n00:02:05.403 --> 00:02:08.340\nSo they'll call float on it, they'll\nget that, and then they'll round again.\n\n41\n00:02:08.340 --> 00:02:11.150\nBut would be really nice,\na little more readable,\n\n42\n00:02:11.150 --> 00:02:14.050\nif you just have said round, right?\n\n43\n00:02:14.050 --> 00:02:15.772\nAnd it all goes together.\n\n44\n00:02:15.772 --> 00:02:22.791\nNow let's take a look at what that means\nin the concept of standard Python objects.\n\n45\n00:02:22.791 --> 00:02:25.330\nBefore we actually do some\ncustom Python objects.\n\n46\n00:02:25.330 --> 00:02:28.119\nSo let's go ahead and take a look at\nthe screen here, I have another repl.\n\n47\n00:02:28.119 --> 00:02:30.552\nThis is our exploration\nportion of the show.\n\n48\n00:02:30.552 --> 00:02:32.510\n&gt;&gt; Yes, we're gonna explore.\n\n49\n00:02:32.510 --> 00:02:33.956\n&gt;&gt; So we have this round function,\n\n50\n00:02:33.956 --> 00:02:35.841\nnotice it's called a built in function.\n\n51\n00:02:35.841 --> 00:02:39.600\nIf we say help(round), and there we go.\n\n52\n00:02:39.600 --> 00:02:41.894\nIt's round, the number,\nand the number of digits.\n\n53\n00:02:41.894 --> 00:02:44.730\nRound the number to a given\nprecision in decimal digits.\n\n54\n00:02:44.730 --> 00:02:48.514\nDefault is 0, so\nif I give it nothing, it's 0, right?\n\n55\n00:02:48.514 --> 00:02:51.468\nThis returns an int when\ncalled with one argument,\n\n56\n00:02:51.468 --> 00:02:54.430\notherwise the same type as the number,\nall right?\n\n57\n00:02:54.430 --> 00:02:57.357\nAnd digits may be negative.\n\n58\n00:02:57.357 --> 00:03:00.849\nWe may have to tweak on that a little bit,\nbut that's all right.\n\n59\n00:03:00.849 --> 00:03:02.141\nSo let's get out of there, and\n\n60\n00:03:02.141 --> 00:03:05.170\nyou just hit Q to get out of\nthat little sub help menu.\n\n61\n00:03:05.170 --> 00:03:09.186\nIf you're familiar with the Linux space,\nit might be info or man pages.\n\n62\n00:03:09.186 --> 00:03:11.054\nI don't know the corollary to, and\n\n63\n00:03:11.054 --> 00:03:14.111\nactually MacOS will have some\nof those utilities as well.\n\n64\n00:03:14.111 --> 00:03:19.270\nI don't know the corollary on Windows,\nso I'm very sorry, Windows folks.\n\n65\n00:03:19.270 --> 00:03:22.100\nSo let's clear this out and\nlook at a couple of numbers.\n\n66\n00:03:22.100 --> 00:03:25.560\nLet's call this i, and\nthat's just the number three.\n\n67\n00:03:25.560 --> 00:03:30.900\nLet's call this f, and\nthat's 3.214, right?\n\n68\n00:03:30.900 --> 00:03:34.935\nLet's say that I only want\ntwo digits of precision.\n\n69\n00:03:34.935 --> 00:03:38.530\nI always need two digits to\ncarry through my calculations.\n\n70\n00:03:38.530 --> 00:03:40.862\nYou have to be careful,\nI'm not gonna get super deep in this.\n\n71\n00:03:40.862 --> 00:03:45.424\nWith integers, if I'm adding two digits,\ndepending on your calculation,\n\n72\n00:03:45.424 --> 00:03:47.190\nare you adding information?\n\n73\n00:03:47.190 --> 00:03:50.200\nAre you adding information that's\nnot there, do the zeroes count?\n\n74\n00:03:50.200 --> 00:03:55.082\nDo they count for your final calculations\nin determining what level precision am I\n\n75\n00:03:55.082 --> 00:03:57.568\nsure about this resulting calculation?\n\n76\n00:03:57.568 --> 00:04:02.191\nSo that's all I'm gonna say about that,\ncuz some of you just kinda got glassy eyed\n\n77\n00:04:02.191 --> 00:04:06.218\non me and went, he said a lot of math\nthings, I'm just gonna take a nap.\n\n78\n00:04:06.218 --> 00:04:08.203\nI'll go away and come back later.\n\n79\n00:04:08.203 --> 00:04:11.203\nBut we can call this round function,\nand if we call it on i,\n\n80\n00:04:11.203 --> 00:04:12.530\nwell it just gives me 3.\n\n81\n00:04:12.530 --> 00:04:15.050\nAnd that's to be expected,\nI gave it no additional arguments.\n\n82\n00:04:15.050 --> 00:04:19.350\nIf I say, round f, it also gives me 3.\n\n83\n00:04:19.350 --> 00:04:22.950\nIf we call round,\nit will round to that digit.\n\n84\n00:04:22.950 --> 00:04:27.020\nLet's do an f2 and do 3.714 and\n\n85\n00:04:27.020 --> 00:04:32.310\ncall a round on f2, our second float.\n\n86\n00:04:32.310 --> 00:04:36.541\nNotice it goes to 4, it applies some\nstandard rounding rules, right?\n\n87\n00:04:36.541 --> 00:04:41.653\nLess than 0.5, round down,\n0.5 and above, round up.\n\n88\n00:04:41.653 --> 00:04:45.874\nAnd if I'm not entirely sure about this,\nwhether it does the thing where sometimes\n\n89\n00:04:45.874 --> 00:04:48.721\nit rounds 0.5 up,\nsometimes it rounds 0.5 down.\n\n90\n00:04:48.721 --> 00:04:50.856\nI don't think it's stateful like that,\n\n91\n00:04:50.856 --> 00:04:54.280\nbut if you've ever encountered\nanything that employs that rule.\n\n92\n00:04:54.280 --> 00:04:57.182\nIt's not what we learned in\nelementary school or middle school,\n\n93\n00:04:57.182 --> 00:04:59.727\nor maybe you were reminded of\nin high school and college.\n\n94\n00:04:59.727 --> 00:05:07.119\n0.5 and above, it rounds up,\nless than 0.5, it rounds down.\n\n95\n00:05:07.119 --> 00:05:10.754\nNow what that means is you have a little\nhigher likelihood of rounding up than you\n\n96\n00:05:10.754 --> 00:05:13.412\ndo rounding down, but\nit's not a truncating operation,\n\n97\n00:05:13.412 --> 00:05:14.780\nthat's what's important.\n\n98\n00:05:14.780 --> 00:05:19.320\nIt just doesn't lop off decimal\ninformation, all right?\n\n99\n00:05:19.320 --> 00:05:24.184\nSo given that, what happens if we call\nround with i and just give it a 2?\n\n100\n00:05:24.184 --> 00:05:28.168\nWell, hm, it gave me 3 back.\n\n101\n00:05:28.168 --> 00:05:32.560\nAnd it gave me an integer\nwith no two decimal places.\n\n102\n00:05:33.730 --> 00:05:38.340\nThat may not be what you'd hoped for, but\n\n103\n00:05:38.340 --> 00:05:42.851\nif I go round(f, 2) at 3.21.\n\n104\n00:05:42.851 --> 00:05:45.219\nIt's two decimal places.\n\n105\n00:05:45.219 --> 00:05:49.200\nIf I give this f2, I get 3.71.\n\n106\n00:05:49.200 --> 00:05:56.450\nWhat if I have an f3 where I\nhave 3.715 instead of 714?\n\n107\n00:05:56.450 --> 00:06:00.460\nAnd now I place that in round\nwith two decimal places.\n\n108\n00:06:00.460 --> 00:06:05.885\nIt's still 71, notice that would be a 5.\n\n109\n00:06:05.885 --> 00:06:08.440\nIt gets a little tricky there.\n&gt;&gt; It does.\n\n110\n00:06:08.440 --> 00:06:10.560\n&gt;&gt; Let's try it with 0.6 to see\n\n111\n00:06:10.560 --> 00:06:11.885\nif that changes.\n\n112\n00:06:11.885 --> 00:06:17.390\nAnd f3 is still there, it now rounds up.\n\n113\n00:06:17.390 --> 00:06:22.730\nNow notice that's a little bit different\nthat that 5 precipice is down.\n\n114\n00:06:22.730 --> 00:06:26.080\nAnd I wanna double check,\nmaybe I misspoke earlier.\n\n115\n00:06:26.080 --> 00:06:27.569\nWe should always double check,\n\n116\n00:06:27.569 --> 00:06:31.277\nbecause these are one of these things\nwhere you're like, yeah, I got this.\n\n117\n00:06:31.277 --> 00:06:37.220\nLet's try 3.5 exactly and\nsee does it round up, round down?\n\n118\n00:06:37.220 --> 00:06:40.660\nBecause maybe it actually goes in\nthe opposition of some of those rules.\n\n119\n00:06:40.660 --> 00:06:41.980\n&gt;&gt; It should round down, shouldn't it?\n\n120\n00:06:41.980 --> 00:06:45.355\n&gt;&gt; It actually should round up,\n\n121\n00:06:45.355 --> 00:06:47.924\nbut it may not, okay?\n\n122\n00:06:47.924 --> 00:06:50.668\nAnd again-\n&gt;&gt; It's one of those trick things.\n\n123\n00:06:50.668 --> 00:06:55.802\n&gt;&gt; Yeah, crazy stuff, so if I get 3.5,\n\n124\n00:06:55.802 --> 00:06:59.530\nit rounds up to 4, okay.\n\n125\n00:06:59.530 --> 00:07:06.438\nIf I go round(3.15), and\nI give it one decimal place,\n\n126\n00:07:06.438 --> 00:07:12.001\nso it should be 3.-something,\nit rounds up.\n\n127\n00:07:12.001 --> 00:07:16.820\nNotice it doesn't round up with that 5,\nso that's something tricky there.\n\n128\n00:07:16.820 --> 00:07:21.524\nIt applies it for whole number rounding,\nbut for decimal rounding it looks like it\n\n129\n00:07:21.524 --> 00:07:22.905\ncuts it off.\n&gt;&gt; Interesting.\n\n130\n00:07:22.905 --> 00:07:24.880\n&gt;&gt; And there may be an edge case there.\n\n131\n00:07:24.880 --> 00:07:26.570\nThis is something I\nalways have to be really,\n\n132\n00:07:26.570 --> 00:07:30.520\nreally careful with when I'm\nkind of doing these things.\n\n133\n00:07:30.520 --> 00:07:34.382\nNow what does that mean in\nthe context of something like this?\n\n134\n00:07:34.382 --> 00:07:37.558\nRound, and I wanna round 2.99999999999.\n&gt;&gt; There it is again.\n\n135\n00:07:37.558 --> 00:07:42.230\n&gt;&gt; And I wanna round that to two digits,\n\n136\n00:07:42.230 --> 00:07:44.060\nit is 3.0.\n\n137\n00:07:44.060 --> 00:07:46.556\nAnd I don't actually get two digits.\n\n138\n00:07:46.556 --> 00:07:50.730\nAnd that's because of the way floating\npoint numbers are represented, all right?\n\n139\n00:07:50.730 --> 00:07:53.150\nSo keep that in mind.\n\n140\n00:07:53.150 --> 00:07:55.605\nNow we've done our exploration.\n\n141\n00:07:55.605 --> 00:07:57.690\nYou're like, okay, I can kinda see this.\n\n142\n00:07:57.690 --> 00:08:01.975\nAnd, to some extent,\nwe're returning the type that we want.\n\n143\n00:08:01.975 --> 00:08:05.730\nWe're gonna go a little off the cuff here.\n&gt;&gt; Good.\n\n144\n00:08:05.730 --> 00:08:07.320\n&gt;&gt; Because for custom objects,\n\n145\n00:08:07.320 --> 00:08:11.262\nmaybe the type, it doesn't make any\nsense because it's not an integer or\n\n146\n00:08:11.262 --> 00:08:12.033\na float type.\n\n147\n00:08:12.033 --> 00:08:15.710\nIt is some other thing,\nit's some other object.\n\n148\n00:08:15.710 --> 00:08:19.524\nAnd let's hop in here\ninto floats_and_ints and\n\n149\n00:08:19.524 --> 00:08:22.898\ngrab this point class and\nsay vim rounding.\n\n150\n00:08:22.898 --> 00:08:24.824\nAnd you don't have to use vim,\n\n151\n00:08:24.824 --> 00:08:29.620\nyou can definitely follow along with\nany of your respective text editors.\n\n152\n00:08:29.620 --> 00:08:32.348\nI would recommend a rich one, or\n\n153\n00:08:32.348 --> 00:08:37.190\nvim may not be rich,\nI would tend to the plugins in here.\n\n154\n00:08:37.190 --> 00:08:43.209\nBut we're just gonna leave that off so you\ncan see the real struggles that are vim.\n\n155\n00:08:43.209 --> 00:08:47.441\nSo if I say dunder, if I'm calling round,\n\n156\n00:08:47.441 --> 00:08:52.202\nI wonder.\n&gt;&gt; If they should be rounder or\n\n157\n00:08:52.202 --> 00:08:54.897\nRND.\n&gt;&gt; Even if Zach says the wrong thing, he's\n\n158\n00:08:54.897 --> 00:08:59.140\nactively engaged in thinking about what\nmakes sense in the context of this, right?\n\n159\n00:08:59.140 --> 00:09:03.609\nRND, that would absolutely make sense.\n\n160\n00:09:03.609 --> 00:09:06.756\nRound would also make sense in\nsome of the previous examples,\n\n161\n00:09:06.756 --> 00:09:11.620\ncuz there are a few that don't follow-\n&gt;&gt; So here we're gonna do ROU?\n\n162\n00:09:11.620 --> 00:09:13.430\n&gt;&gt; Well, let's see, you ready?\n\n163\n00:09:13.430 --> 00:09:15.232\nWe're gonna try round.\n&gt;&gt; Okay.\n\n164\n00:09:15.232 --> 00:09:16.696\n&gt;&gt; And well,\n\n165\n00:09:16.696 --> 00:09:23.370\nround should need an extra digit, okay?\n\n166\n00:09:23.370 --> 00:09:30.355\nWe're gonna, by default, say you're gonna\nget no additional digits, zero, okay?\n\n167\n00:09:30.355 --> 00:09:36.380\nAnd I wanna return, the rounding of,\nwell, what do we need?\n\n168\n00:09:36.380 --> 00:09:41.122\nWe need that distance, we're gonna\nstay with our previous example.\n\n169\n00:09:43.360 --> 00:09:47.160\nAnd find the distance from zero.\n\n170\n00:09:47.160 --> 00:09:51.009\nWow, don't do what I just did.\n\n171\n00:09:51.009 --> 00:09:57.150\nPlus self.y squared,\nall to the one-half power.\n\n172\n00:09:57.150 --> 00:09:59.900\nNow that is a floating\npoint number by default.\n\n173\n00:09:59.900 --> 00:10:04.704\nSo when I call round on this, because\nof the context of how I'm rounding,\n\n174\n00:10:04.704 --> 00:10:10.127\nI'm probably gonna get a floating point\nnumber unless someone calls it with zero,\n\n175\n00:10:10.127 --> 00:10:12.490\nand then, well I might get an int.\n\n176\n00:10:12.490 --> 00:10:16.630\nWe'll have to test that, cuz they're like\na float gives me float, int gives me int.\n\n177\n00:10:16.630 --> 00:10:17.172\nWhat does round give me?\n\n178\n00:10:17.172 --> 00:10:19.581\nWell, it might be an int,\nit might be a float, who knows?\n\n179\n00:10:19.581 --> 00:10:21.150\nWe'll figure it out.\n\n180\n00:10:21.150 --> 00:10:25.790\nSo I'm gonna return distance\nwith that n pass through.\n\n181\n00:10:25.790 --> 00:10:27.540\nBy default it's gonna be 0, but\n\n182\n00:10:27.540 --> 00:10:32.910\nit does afford you the ability to say,\nwell pass this through.\n\n183\n00:10:32.910 --> 00:10:34.062\nNow notice I'm delegating.\n\n184\n00:10:34.062 --> 00:10:36.738\nI'm just giving it a little\nbit of extra logic, and\n\n185\n00:10:36.738 --> 00:10:39.300\nthen using what we just\nexplored to define this.\n\n186\n00:10:40.450 --> 00:10:42.209\nI don't have to do that.\n\n187\n00:10:42.209 --> 00:10:47.056\nI could implement my own rounding logic,\nand we talked about some rounding logic.\n\n188\n00:10:47.056 --> 00:10:52.367\nLet's say that you wanted this\nto always round using the 5 and\n\n189\n00:10:52.367 --> 00:10:56.861\nabove rule as the last digit,\nversus the non-5 and\n\n190\n00:10:56.861 --> 00:11:01.010\nabove rule for the last digit, right?\n\n191\n00:11:01.010 --> 00:11:04.100\nTo get consistency, maybe you want\nto implement that because it makes\n\n192\n00:11:04.100 --> 00:11:05.370\nthe most sense in your application.\n\n193\n00:11:05.370 --> 00:11:10.252\nSo if we come out of here, and I just\nrealized I didn't make an actual point.\n\n194\n00:11:10.252 --> 00:11:15.026\nSo p = 0.3 and 0.4, and\nI know exactly what\n\n195\n00:11:15.026 --> 00:11:19.690\nthat's gonna be,\nit should be a whole number.\n\n196\n00:11:21.060 --> 00:11:24.523\nI'm gonna create a p1, and\nI know this will not be a whole number.\n\n197\n00:11:24.523 --> 00:11:27.720\nI'm gonna say 3 and 7, all right?\n\n198\n00:11:27.720 --> 00:11:32.610\nSo there we go, and\nwe're gonna say rounding, okay.\n\n199\n00:11:32.610 --> 00:11:40.368\nSo, p, p1, round(p), it is 5.0.\n\n200\n00:11:40.368 --> 00:11:42.554\nWe didn't pass it a new number,\nit actually passed 0,\n\n201\n00:11:42.554 --> 00:11:44.847\nbut notice it gave me the floating\npoint representation.\n\n202\n00:11:44.847 --> 00:11:46.200\nWhy does it do that?\n\n203\n00:11:46.200 --> 00:11:50.610\nBecause distance, that we calculated,\nis a floating point number.\n\n204\n00:11:50.610 --> 00:11:53.539\nSo, in this case, even was zero digits,\n\n205\n00:11:53.539 --> 00:11:57.408\nit's going to give me\na floating point number, okay?\n\n206\n00:11:57.408 --> 00:12:01.272\nDoes that hold true for\n5.0 with a 0 in there?\n\n207\n00:12:01.272 --> 00:12:05.470\nYes, it's gonna return the same type,\nokay?\n\n208\n00:12:05.470 --> 00:12:10.051\nNow if I go round(p1),\nit's gonna give me 8.\n\n209\n00:12:10.051 --> 00:12:17.360\nBut if I say give me p1 with 5 digits,\nit's gonna give me 7.61577, okay?\n\n210\n00:12:17.360 --> 00:12:21.393\nNow at 7.6, if I give it zero digits,\nit's gonna round to the next whole number.\n\n211\n00:12:21.393 --> 00:12:23.920\nGood deal.\n\n212\n00:12:23.920 --> 00:12:29.835\nThere is one thing that we looked at in\nthe help that maybe we need to make sure,\n\n213\n00:12:29.835 --> 00:12:32.931\nmaybe we need to make sure that it works.\n\n214\n00:12:32.931 --> 00:12:37.629\nSo with a standard number,\nlet's say 5, if I give it -3.\n\n215\n00:12:37.629 --> 00:12:40.780\nWhy would I give it -3?\n\n216\n00:12:40.780 --> 00:12:43.466\nLet's see what it does, 0.\n\n217\n00:12:43.466 --> 00:12:49.200\nIt rounded to the thousandth place.\n\n218\n00:12:49.200 --> 00:12:54.568\nSo how many thousands to the nearest\nthousand does 5 round to?\n\n219\n00:12:54.568 --> 00:12:56.118\nI think it's thousand, yeah, thousand.\n\n220\n00:12:56.118 --> 00:13:01.012\nWell it's 0, that's the closest whole\nnumber of thousands that it is.\n\n221\n00:13:01.012 --> 00:13:06.430\nIf I instead say, 1001, I should get 1000.\n\n222\n00:13:06.430 --> 00:13:09.560\nThis is verifying what we've said.\n\n223\n00:13:09.560 --> 00:13:13.852\nAnd it is 1000, what is the closest\n1000 that we're getting to?\n\n224\n00:13:13.852 --> 00:13:17.125\nThe closest 1000 now is what?\n\n225\n00:13:17.125 --> 00:13:18.116\n2000, so\n\n226\n00:13:18.116 --> 00:13:23.491\nnegative numbers effectively go the\nopposite way of how I think of rounding.\n\n227\n00:13:23.491 --> 00:13:25.840\nThis is not a typical use case.\n\n228\n00:13:25.840 --> 00:13:27.926\nDoes it work with our\ncustom object though?\n\n229\n00:13:27.926 --> 00:13:34.840\nRound and let's say p, because we know\nthat's a whole number and say -1, okay?\n\n230\n00:13:34.840 --> 00:13:37.695\nTo the tens, so what's the closest ten?\n\n231\n00:13:37.695 --> 00:13:42.128\nThis is gonna be 5, it's 0, all right?\n\n232\n00:13:42.128 --> 00:13:44.690\nWhat about p1?\n\n233\n00:13:44.690 --> 00:13:46.950\nIt is 10, because it actually goes to 8.\n\n234\n00:13:46.950 --> 00:13:48.770\nIt's closer to 10 than it is to 0.\n\n235\n00:13:48.770 --> 00:13:51.910\nSo that still works as we implemented it.\n\n236\n00:13:51.910 --> 00:13:57.004\nSo just as a quick review, if I wanted\nthe ability to round to a particular\n\n237\n00:13:57.004 --> 00:14:01.861\nfloating point representation,\nthis is something that I could do.\n\n238\n00:14:01.861 --> 00:14:04.601\nCould I also just implement float,\nand then say,\n\n239\n00:14:04.601 --> 00:14:08.972\nyou get to decide how many floating point\nnumbers or decimals that you round to,\n\n240\n00:14:08.972 --> 00:14:11.510\nas far as your precision is concerned?\n\n241\n00:14:11.510 --> 00:14:14.636\nAbsolutely, and the argument for that,\n\n242\n00:14:14.636 --> 00:14:19.475\nonly providing a float conversion,\nand then saying you round.\n\n243\n00:14:19.475 --> 00:14:21.815\nIf you do custom logic here, well,\n\n244\n00:14:21.815 --> 00:14:26.282\nit may break with how they're using\nround otherwise in their code.\n\n245\n00:14:26.282 --> 00:14:29.402\nYou will see me a lot of\ntimes do a little bit, and\n\n246\n00:14:29.402 --> 00:14:33.466\nthen delegate back to the original\nround function for a type.\n\n247\n00:14:33.466 --> 00:14:37.010\nSo in this case, distance is\na floating point type, a float.\n\n248\n00:14:38.260 --> 00:14:43.002\nThis maintains the same rounding\nlogic that is evident in\n\n249\n00:14:43.002 --> 00:14:47.457\nother round function calls\nin the Python ecosystem.\n\n250\n00:14:47.457 --> 00:14:50.950\nSo you should keep that in mind,\nbut it's just that easy.\n\n251\n00:14:50.950 --> 00:14:54.160\nI have a round function,\nI implement dunder round,\n\n252\n00:14:54.160 --> 00:14:57.070\nwe're all good to go.\n&gt;&gt; That makes sense, rounding.\n\n253\n00:14:57.070 --> 00:15:00.040\nAnother great episode inside\nthe Python Data Model Series.\n\n254\n00:15:00.040 --> 00:15:01.897\nBefore we go on to something else,\n\n255\n00:15:01.897 --> 00:15:05.257\nany last words, sir?\n&gt;&gt; Well, I really harped on a few topics\n\n256\n00:15:05.257 --> 00:15:09.264\nover the last few episodes,\nactually probably this entire series.\n\n257\n00:15:09.264 --> 00:15:14.382\nSo I'm gonna let people take away and\nkind of guess at what I would tell them\n\n258\n00:15:14.382 --> 00:15:19.033\nto be wary of and just leave it at that.\n&gt;&gt; [LAUGH] Sage advice.\n\n259\n00:15:19.033 --> 00:15:21.310\nAnd Python Data Model\nis a fantastic series.\n\n260\n00:15:21.310 --> 00:15:22.989\nJustin's done a great job\nputting that together for you.\n\n261\n00:15:22.989 --> 00:15:25.070\nMake sure you see every episode.\n\n262\n00:15:25.070 --> 00:15:28.247\nAnd while you're in that course library,\nthere's thousands of other videos.\n\n263\n00:15:28.247 --> 00:15:31.176\nAnd they're there to help you go further,\nso check those out too.\n\n264\n00:15:31.176 --> 00:15:33.328\nAnd tell everybody you\nknow about DevPro.TV,\n\n265\n00:15:33.328 --> 00:15:35.070\na good dev pro is always learning.\n\n266\n00:15:35.070 --> 00:15:37.240\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n267\n00:15:37.240 --> 00:15:38.303\n&gt;&gt; And we will see you again soon.\n\n268\n00:15:38.303 --> 00:15:43.467\n[NOISE]\n\n",
          "vimeoId": "253427703"
        },
        {
          "description": "In this episode, Justin and Zach utilize the \\_\\_floor\\_\\_ and \\_\\_ceil\\_\\_ methods to obtain the floor and ceiling representation of a custom objects if the objects are emulating numeric types.",
          "length": "1375",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-12-1-floor_and_ceiling.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-12-1-floor_and_ceiling-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-12-1-floor_and_ceiling-sm.jpg",
          "title": "Floor and Ceiling",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.256 --> 00:00:14.531\nHello and thank you for\nwatching DevPro.TV.\n\n3\n00:00:14.531 --> 00:00:16.400\nHelping you learn wherever you go.\n\n4\n00:00:16.400 --> 00:00:20.700\nI'm your host, Zach Memos as we\ncontinue on with Python data model.\n\n5\n00:00:20.700 --> 00:00:23.960\nTitle of this episode is Floor and\nCeiling.\n\n6\n00:00:23.960 --> 00:00:25.890\nI wanna know what this is all about and\nof course,\n\n7\n00:00:25.890 --> 00:00:28.900\nJustin Dennison is gonna tell us\nthat because he's a great guy.\n\n8\n00:00:28.900 --> 00:00:29.620\n&gt;&gt; I'm gonna try.\n\n9\n00:00:29.620 --> 00:00:30.690\nAnd actually,\n\n10\n00:00:30.690 --> 00:00:35.190\nI think what we're gonna do is write\na song that involve floor and ceiling.\n\n11\n00:00:35.190 --> 00:00:36.130\n&gt;&gt; I love it.\nI want it.\n\n12\n00:00:36.130 --> 00:00:39.000\n&gt;&gt; It seems like it might be part\nof a pop song, maybe the hook or\n\n13\n00:00:39.000 --> 00:00:43.830\nsomething like that but no in actuality\nthese are mathematical functions and\n\n14\n00:00:43.830 --> 00:00:47.210\nwe are continuing building these\ncustom objects that behave\n\n15\n00:00:47.210 --> 00:00:48.520\nlike numeric types, right?\n\n16\n00:00:48.520 --> 00:00:50.120\nLike integer or float.\n\n17\n00:00:50.120 --> 00:00:52.370\nLet me give you a brief overview\nof what floor and ceiling.\n\n18\n00:00:52.370 --> 00:00:56.070\nAnd it actually hides into the last two\nepisodes if you're watching this in order.\n\n19\n00:00:56.070 --> 00:00:58.750\nIf you're not I'm talking about Int and\nFloats and\n\n20\n00:00:58.750 --> 00:01:00.320\nI'm also talking about Rounding.\n\n21\n00:01:00.320 --> 00:01:03.757\n&gt;&gt; Right.\n&gt;&gt; Floor and ceiling are alternative ways\n\n22\n00:01:03.757 --> 00:01:08.020\nto change a number based\non decimal points, okay?\n\n23\n00:01:08.020 --> 00:01:09.340\nNow what do I mean there?\n\n24\n00:01:10.390 --> 00:01:11.750\nWell, let's think about this way,\nyou ready?\n\n25\n00:01:11.750 --> 00:01:12.710\n&gt;&gt; I'm ready.\n\n26\n00:01:12.710 --> 00:01:13.780\n&gt;&gt; You're ready?\n\n27\n00:01:13.780 --> 00:01:17.710\nAlright, so when I ask for the ceiling,\nI don't care what the decimal is,\n\n28\n00:01:17.710 --> 00:01:19.600\nI want the next highest whole number.\n\n29\n00:01:19.600 --> 00:01:20.666\nThe next greatest integer.\n\n30\n00:01:20.666 --> 00:01:21.588\n&gt;&gt; I figured that's what it would be.\n\n31\n00:01:21.588 --> 00:01:25.510\n&gt;&gt; So if have 3.2 and\nI say ceiling, I'm gonna get 4.\n\n32\n00:01:25.510 --> 00:01:28.518\nIf I say 3.9 ceiling, I'm gonna get 4.\n\n33\n00:01:28.518 --> 00:01:34.863\nIf I say 3.0000001 and I say ceiling,\nI'm gonna get 4 again.\n\n34\n00:01:34.863 --> 00:01:37.910\n&gt;&gt; Yeah.\n&gt;&gt; Oppositely, if I ask for the 4, right?\n\n35\n00:01:37.910 --> 00:01:40.700\nI'm going to get just the floor of that.\n\n36\n00:01:40.700 --> 00:01:41.846\nWhat do I mean?\n\n37\n00:01:41.846 --> 00:01:46.780\n3.5 I'm gonna get 3, 3.7 I'm gonna get 3,\n3.3 I'm gonna get 3.\n\n38\n00:01:46.780 --> 00:01:48.100\n&gt;&gt; Makes sense.\n&gt;&gt; All right.\n\n39\n00:01:48.100 --> 00:01:50.880\nNow there's some weirdness there.\n\n40\n00:01:50.880 --> 00:01:56.310\nWe'll have to double check a few things\nby and large that's what the idea is.\n\n41\n00:01:56.310 --> 00:02:00.423\nPython may have its own implementation\ndetails cuz there's also,\n\n42\n00:02:00.423 --> 00:02:02.091\nwell there's a truncate.\n\n43\n00:02:02.091 --> 00:02:03.740\nRight, and what does truncate mean?\n\n44\n00:02:03.740 --> 00:02:08.430\nAnd for the most part it almost\nis the same as floor, all right?\n\n45\n00:02:08.430 --> 00:02:13.240\nSo let's do a little bit of investigation\nbefore we write our own numeric type.\n\n46\n00:02:13.240 --> 00:02:18.710\nSo it's gonna go ahead and\ncome to the screen and, if I look.\n\n47\n00:02:18.710 --> 00:02:19.810\nYou're, like, well floor.\n\n48\n00:02:21.270 --> 00:02:22.400\nFloor is not defined.\n\n49\n00:02:23.810 --> 00:02:24.780\nWell, ceiling.\n\n50\n00:02:26.510 --> 00:02:28.050\nCeiling is not defined.\n\n51\n00:02:28.050 --> 00:02:31.450\nBy default, even though these\nare part of the standard library, and\n\n52\n00:02:31.450 --> 00:02:37.940\nwe're going to be emulating these kind of\nconversions or changes, transformations,\n\n53\n00:02:37.940 --> 00:02:43.980\nthey're not top level like round or float\nor int as part of the top level built-ins.\n\n54\n00:02:43.980 --> 00:02:47.150\nThey are in fact part of the math module.\n\n55\n00:02:47.150 --> 00:02:52.180\nSo we're gonna say from math import floor,\nand\n\n56\n00:02:52.180 --> 00:02:54.370\nI think it's actually called ceil,\nall right?\n\n57\n00:02:54.370 --> 00:02:57.000\nSo instead of ceiling it's ceil.\n\n58\n00:02:57.000 --> 00:03:02.005\nAll right, so floor,\nwhat is the floor of 3?\n\n59\n00:03:02.005 --> 00:03:03.421\nWell, that's three.\nWhat about 3.2?\n\n60\n00:03:03.421 --> 00:03:04.570\nIt's 3 again.\n\n61\n00:03:04.570 --> 00:03:06.785\nWhat about 3.5?\n\n62\n00:03:06.785 --> 00:03:08.022\nIt's 3 again.\n\n63\n00:03:08.022 --> 00:03:11.485\nWhat about 3.999999999?\n\n64\n00:03:13.760 --> 00:03:14.520\nWhy is that?\n\n65\n00:03:15.780 --> 00:03:17.790\nYou have to be careful here.\n\n66\n00:03:17.790 --> 00:03:22.540\nWe get a lot of 9s out there, floating\npoint representations actually says this\n\n67\n00:03:22.540 --> 00:03:24.260\nis the same as 4, so it gives you 4.\n\n68\n00:03:24.260 --> 00:03:26.510\nSo there's some edge cases there.\n\n69\n00:03:26.510 --> 00:03:29.100\nWith that said,\nlet's look at the comparison of ceiling.\n\n70\n00:03:30.130 --> 00:03:31.830\nAnd I may have said\nsomething earlier on that\n\n71\n00:03:31.830 --> 00:03:33.270\nmade it seem like that's not the case.\n\n72\n00:03:33.270 --> 00:03:36.875\nThis is one of those edge cases\nfrom a computing standpoint,\n\n73\n00:03:36.875 --> 00:03:42.500\n3.9 with a bunch of 9s is effectively 4.\n\n74\n00:03:42.500 --> 00:03:44.050\nSo it sees this as 4.0.\n\n75\n00:03:44.050 --> 00:03:45.830\nWhat is the floor of 4.0?\n\n76\n00:03:45.830 --> 00:03:46.520\nIt is 4, all right?\n\n77\n00:03:46.520 --> 00:03:51.900\nSo if I look at the ceiling of 3.\n\n78\n00:03:51.900 --> 00:03:52.666\nWell, that's 3.\n\n79\n00:03:52.666 --> 00:03:55.130\n3.2 it's 4.\n\n80\n00:03:55.130 --> 00:03:58.536\nNotice if I give it a 3, it doesn't go up.\n\n81\n00:03:58.536 --> 00:04:03.438\nWhat about 3.0001?\n\n82\n00:04:03.438 --> 00:04:07.470\nIt's 4, so\nif it's anything over 3, it's 4.\n\n83\n00:04:07.470 --> 00:04:10.400\nIf it's 3, give me 3.\n\n84\n00:04:10.400 --> 00:04:15.970\nIf it's, let's see here, a bunch of 9s.\n\n85\n00:04:15.970 --> 00:04:18.700\nIt's still 4 because effectively that's 4,\nright?\n\n86\n00:04:18.700 --> 00:04:23.180\nSo we have this weird edge case scenario,\nsomething we need to be aware of.\n\n87\n00:04:23.180 --> 00:04:27.190\nNow, from the math module, if I'm not\nmistaken this may have been changed around\n\n88\n00:04:27.190 --> 00:04:31.130\nin Python 3, and throughout my career\nI've done a little bit of Python 2 and\n\n89\n00:04:31.130 --> 00:04:32.080\na little bit of Python 3.\n\n90\n00:04:32.080 --> 00:04:36.990\nSo let's look for math import trunc,\nit stands for truncate.\n\n91\n00:04:39.180 --> 00:04:43.211\nLet's see if this behaves a little\nbit differently, all right?\n\n92\n00:04:43.211 --> 00:04:47.080\nSo trunc should give us\nthings similar to floor.\n\n93\n00:04:47.080 --> 00:04:50.180\nSo, trunc of 3 is 3.\n\n94\n00:04:50.180 --> 00:04:52.633\nTrunc of 3.2, about 3.5.\n\n95\n00:04:52.633 --> 00:04:56.900\nWhat about 3.99999999999?\n\n96\n00:04:56.900 --> 00:04:58.570\nThat actually gives us 3.\n\n97\n00:04:58.570 --> 00:05:03.034\nSo there's that subtle difference\nin behavior, all right?\n\n98\n00:05:03.034 --> 00:05:05.120\nIt doesn't go, well, that's kinda 4.\n\n99\n00:05:05.120 --> 00:05:09.490\nIt goes, whatever that literal\ndecimal point, cut it off, and\n\n100\n00:05:09.490 --> 00:05:10.430\ngive me the whole number only.\n\n101\n00:05:11.520 --> 00:05:14.650\nWe're not talking about\ntruncate in this episode.\n\n102\n00:05:14.650 --> 00:05:17.030\nBut I did want to illustrate this for\nsome of you who are like,\n\n103\n00:05:17.030 --> 00:05:18.600\nwell that's kinda like truncate.\n\n104\n00:05:18.600 --> 00:05:20.290\nThere is a small but subtle difference.\n\n105\n00:05:20.290 --> 00:05:21.150\n&gt;&gt; Very small difference, yeah.\n\n106\n00:05:21.150 --> 00:05:23.180\n&gt;&gt; Very nuanced there, all right?\n\n107\n00:05:23.180 --> 00:05:26.570\nNow, even though these aren't top level,\nI still have floor,\n\n108\n00:05:26.570 --> 00:05:30.180\nI still have ceil, I even have trunc,\nwhich is short for truncate,\n\n109\n00:05:30.180 --> 00:05:34.420\nbut weird that all they left off\nwas the ate, but that's all right.\n\n110\n00:05:34.420 --> 00:05:35.760\nI don't make these decisions,\n\n111\n00:05:35.760 --> 00:05:40.200\nthere are definitely people that are way\nsmarter than I am making these decisions.\n\n112\n00:05:40.200 --> 00:05:41.410\nNow, what does that mean?\n\n113\n00:05:41.410 --> 00:05:45.958\nLet's go and\ncreate a file called Floor_and_ceil.py.\n\n114\n00:05:45.958 --> 00:05:47.381\nAnd, you know what?\n\n115\n00:05:47.381 --> 00:05:51.890\nI need to grab that point.\n\n116\n00:05:51.890 --> 00:05:56.330\nI was like the point part.\n\n117\n00:05:56.330 --> 00:05:58.536\nAll right, so floor and ceil nope.\n\n118\n00:05:58.536 --> 00:06:05.260\nI have two autocomplete things\nthere we go, get rid of that.\n\n119\n00:06:05.260 --> 00:06:06.470\nAnd I'm gonna go ahead and import.\n\n120\n00:06:06.470 --> 00:06:10.770\nSo from math import ceil and floor.\n\n121\n00:06:12.900 --> 00:06:16.100\nGiven this point, and\nI'm gonna keep it pretty simple,\n\n122\n00:06:16.100 --> 00:06:17.770\nI'm just gonna return the x value for now.\n\n123\n00:06:19.000 --> 00:06:21.510\nJust to let you see.\n\n124\n00:06:21.510 --> 00:06:25.055\nIf I say, def and Zach,\nI'm gonna defer to you.\n\n125\n00:06:25.055 --> 00:06:27.480\n&gt;&gt; [LAUGH]\n&gt;&gt; If I want the floor,\n\n126\n00:06:27.480 --> 00:06:30.320\nwhat dunder method do you\nthink I'm going to implement?\n\n127\n00:06:30.320 --> 00:06:33.440\n&gt;&gt; I'm thinking in this instance we\nshould say floor, dunder, floor.\n\n128\n00:06:33.440 --> 00:06:35.660\n&gt;&gt; And it is dunder floor.\n\n129\n00:06:35.660 --> 00:06:38.920\nSome of these if they're very specific\nthey're rarely gonna be short.\n\n130\n00:06:38.920 --> 00:06:44.310\nAnd for the most part, they have them\nshortened not just to make sure, right?\n\n131\n00:06:44.310 --> 00:06:48.740\nSo floor and I say self, and\n\n132\n00:06:48.740 --> 00:06:56.770\nI'm gonna return floor self.x, okay?\n\n133\n00:06:56.770 --> 00:06:59.380\nJust returning the x, right?\n\n134\n00:06:59.380 --> 00:07:03.042\nSo if we come in here,\nactually I forgot something.\n\n135\n00:07:03.042 --> 00:07:05.080\nI need to create some interesting points.\n\n136\n00:07:06.430 --> 00:07:07.300\nSo point,\n\n137\n00:07:07.300 --> 00:07:12.820\nand I think this makes the most sense if x\nand y are floating point numbers, right?\n\n138\n00:07:12.820 --> 00:07:18.500\nSo let's say 3.6 and 2.7, okay?\n\n139\n00:07:18.500 --> 00:07:21.050\nWe may use that y later.\n\n140\n00:07:21.050 --> 00:07:28.570\nAnd so we say, python3-i Floor_and_ceil,\nand we look at p.\n\n141\n00:07:28.570 --> 00:07:32.390\nAnd floor should be here, because\nI've executed this in the context, so\n\n142\n00:07:32.390 --> 00:07:33.570\nI don't have to do another import.\n\n143\n00:07:33.570 --> 00:07:35.460\nIf I say floor(p) 3.\n\n144\n00:07:35.460 --> 00:07:40.560\nWell, the floor of 3.6 is 3.\n\n145\n00:07:40.560 --> 00:07:41.380\n&gt;&gt; Right.\n\n146\n00:07:41.380 --> 00:07:46.762\n&gt;&gt; If I say the ceil(p)\nmust be a real number,\n\n147\n00:07:46.762 --> 00:07:49.827\nnot a point, all right?\n\n148\n00:07:49.827 --> 00:07:53.919\nSo there's that, but\nit's kind of interesting,\n\n149\n00:07:53.919 --> 00:07:57.352\nI'm getting an integer that makes sense.\n\n150\n00:07:57.352 --> 00:08:01.803\nAm I limited to returning\nan integer can I get 3.0?\n\n151\n00:08:01.803 --> 00:08:04.208\nAll right,\nwe've seen that I get integers from that.\n\n152\n00:08:04.208 --> 00:08:05.510\nAre there limitations there?\n\n153\n00:08:07.320 --> 00:08:12.335\nAnd well, let's come down here and\n\n154\n00:08:12.335 --> 00:08:19.699\njust return,\nquote,the floating point version.\n\n155\n00:08:23.610 --> 00:08:24.700\nThere we go.\n\n156\n00:08:24.700 --> 00:08:30.900\nAnd then I'm gonna say floor(p),\nand now I get 3.0.\n\n157\n00:08:30.900 --> 00:08:34.230\nSo there's no limitations\non the return type.\n\n158\n00:08:34.230 --> 00:08:38.470\nIt does make the most sense for floor and\nceiling to return integers, okay?\n\n159\n00:08:40.020 --> 00:08:44.475\nBut if there's no return type,\nwe looked at a few episodes ago,\n\n160\n00:08:44.475 --> 00:08:46.798\nwe had the integer and the float.\n\n161\n00:08:46.798 --> 00:08:50.230\nI wonder, I wonder if we really\neven need to implement these.\n\n162\n00:08:50.230 --> 00:08:55.470\nThey're there, but\nare they really forefront?\n\n163\n00:08:55.470 --> 00:09:00.190\nAnd the reason I say this,\nif you look in the Python 3\n\n164\n00:09:00.190 --> 00:09:04.940\ndocumentation under the Python data model,\ndoesn't actually list these explicitly.\n\n165\n00:09:04.940 --> 00:09:08.220\nYou have to go searching and\nfinding things.\n\n166\n00:09:08.220 --> 00:09:15.660\nSo that makes me think that, I wonder if I\nhave an int or a float if this just works?\n\n167\n00:09:15.660 --> 00:09:19.260\nAnd maybe I'll only implement\nthis if I have additional\n\n168\n00:09:19.260 --> 00:09:21.280\nkind of logic that needs to be there.\n\n169\n00:09:21.280 --> 00:09:24.810\nNow we're gonna come back to ceiling,\nwe'll get there,\n\n170\n00:09:24.810 --> 00:09:29.640\nbut this is one of those nuanced edge\ncase, you gotta be careful type things.\n\n171\n00:09:29.640 --> 00:09:31.110\n&gt;&gt; Turn over all those rocks, Justin.\n\n172\n00:09:31.110 --> 00:09:32.890\n&gt;&gt; Yeah, I'm gonna try to.\n\n173\n00:09:32.890 --> 00:09:33.958\nI can't do that with Python.\n\n174\n00:09:33.958 --> 00:09:37.349\nWell, we can do that with Python but\nnot actually type in.\n\n175\n00:09:37.349 --> 00:09:39.840\nI'm not gonna rewrite them in Python.\n\n176\n00:09:39.840 --> 00:09:42.160\n&gt;&gt; You're starting to type rocks, rocks.\n\n177\n00:09:42.160 --> 00:09:44.550\n&gt;&gt; All right, there we go,\nso we're gonna come here.\n\n178\n00:09:44.550 --> 00:09:51.938\nAnd I'm just gonna say def_float\nI'm gonna return self.x.\n\n179\n00:09:51.938 --> 00:09:55.770\nAnd you know what, I'm gonna make\nsure it's the floating point version.\n\n180\n00:09:55.770 --> 00:09:57.990\nDon't necessarily need this,\nI could do a check, say,\n\n181\n00:09:57.990 --> 00:09:59.670\nif it is a float just go ahead and\nreturn it.\n\n182\n00:09:59.670 --> 00:10:01.971\nOtherwise cast it to a float,\nwhatever it may be.\n\n183\n00:10:01.971 --> 00:10:04.331\nLet's see what happens, okay.\n\n184\n00:10:04.331 --> 00:10:10.006\nSo python3 -i floor_and_ceiling.\n\n185\n00:10:11.490 --> 00:10:13.130\nFloor is there.\n\n186\n00:10:13.130 --> 00:10:13.640\nE is there.\n\n187\n00:10:15.740 --> 00:10:16.810\nInteresting.\n\n188\n00:10:16.810 --> 00:10:17.480\n&gt;&gt; Yes.\n\n189\n00:10:17.480 --> 00:10:21.180\n&gt;&gt; I commented out floor, and\n\n190\n00:10:21.180 --> 00:10:25.760\nnotice I returned the float,\nbut it gave me the integer.\n\n191\n00:10:25.760 --> 00:10:28.870\nAnd actually let's just make sure\nthat I'm not seeing things here.\n\n192\n00:10:31.280 --> 00:10:32.800\nIt is an integer.\n\n193\n00:10:32.800 --> 00:10:34.720\nWell that makes sense because by default,\n\n194\n00:10:34.720 --> 00:10:39.250\nthe standard for\nshould give you an integer back.\n\n195\n00:10:39.250 --> 00:10:44.060\nSo we haven't overridden dunder floor,\nwhich is kind of what's delegated to this.\n\n196\n00:10:44.060 --> 00:10:48.810\nWe did make a dunder float that\nreturned a floating point number.\n\n197\n00:10:48.810 --> 00:10:52.330\nBut internally, that changed it to\nan integer, and that's what we got back.\n\n198\n00:10:52.330 --> 00:10:54.562\nSo we don't really need dunder floor, but\n\n199\n00:10:54.562 --> 00:10:58.530\nwhat if you're like I really want all\nof these to be floating point numbers?\n\n200\n00:11:00.350 --> 00:11:02.880\nMaybe it doesn't make sense,\nright, for the most part.\n\n201\n00:11:02.880 --> 00:11:05.820\nWhat is the meaning of floor,\nwhat's an integer?\n\n202\n00:11:05.820 --> 00:11:08.350\nBut maybe you needed\na little additional logic.\n\n203\n00:11:08.350 --> 00:11:11.790\nAnd we're gonna fall back to\nkinda our contrived example.\n\n204\n00:11:11.790 --> 00:11:13.980\nWe always love it.\n\n205\n00:11:13.980 --> 00:11:16.670\nNotice I have floor commented out,\nit doesn't work.\n\n206\n00:11:16.670 --> 00:11:20.350\nI'm gonna get rid of that just\nto make sure that we're calling\n\n207\n00:11:20.350 --> 00:11:22.370\nthe right thing, all right.\n\n208\n00:11:22.370 --> 00:11:25.370\nLet's say that for floor,\n\n209\n00:11:25.370 --> 00:11:31.000\nI want the floor of the sum of x and\ny, okay.\n\n210\n00:11:31.000 --> 00:11:34.810\nI don't want just x, I don't want just y,\nI'm tired of that distance thing.\n\n211\n00:11:34.810 --> 00:11:37.120\nI just wanna see what is their sum, right?\n\n212\n00:11:38.490 --> 00:11:44.659\nWell, I'm gonna say s self.x + self.y.\n\n213\n00:11:44.659 --> 00:11:46.785\nAnd I'm gonna get the floor of x.\n\n214\n00:11:46.785 --> 00:11:50.247\nI'm not calling float on this because I'm\ngonna let it return the appropriate type.\n\n215\n00:11:50.247 --> 00:11:56.140\nAnd Python 3-i floor and ceiling.\n\n216\n00:11:56.140 --> 00:11:57.700\nAnd I'm gonna say floor p.\n\n217\n00:11:59.000 --> 00:12:01.680\nNow I just got to\nthinking about something.\n\n218\n00:12:01.680 --> 00:12:04.740\nWhen you read the transcript of this, I'm\ngonna say the word floor like 600 times,\n\n219\n00:12:04.740 --> 00:12:06.036\nbut it's a function call.\n\n220\n00:12:06.036 --> 00:12:07.720\n&gt;&gt; [LAUGH]\n&gt;&gt; And that's what it is.\n\n221\n00:12:07.720 --> 00:12:10.040\nYou're probably like, I don't know\nwhat this has to do with Python.\n\n222\n00:12:10.040 --> 00:12:12.590\nHe's just saying, floor, floor,\nfloor, ceiling, ceiling ceiling.\n\n223\n00:12:12.590 --> 00:12:13.630\nWho knows?\n\n224\n00:12:13.630 --> 00:12:14.840\nIt did give me the sum of those though.\n\n225\n00:12:16.310 --> 00:12:20.449\nThe floor of the sum of those, okay?\n\n226\n00:12:20.449 --> 00:12:23.850\nSo in order to delegate,\nI had a little extra logic.\n\n227\n00:12:23.850 --> 00:12:27.170\nI can call,\nwhat is the floor of this custom object.\n\n228\n00:12:27.170 --> 00:12:28.230\nIt will give me some number.\n\n229\n00:12:29.490 --> 00:12:33.860\nFor a point, or maybe even a pair,\ndistance again is\n\n230\n00:12:33.860 --> 00:12:39.230\nprobably more in line with\nan equivalent level of reasoning.\n\n231\n00:12:39.230 --> 00:12:42.470\nI want what is the integer, right?\n\n232\n00:12:42.470 --> 00:12:46.240\nDon't go over, but what is the shortest\n\n233\n00:12:46.240 --> 00:12:50.510\nwhole number distance in order\nto get toward that point?\n\n234\n00:12:50.510 --> 00:12:57.580\nOkay, but now what if I wanted,\nand we're doing just sums here.\n\n235\n00:12:57.580 --> 00:12:59.890\nWhat if wanted the ceiling, right?\n\n236\n00:12:59.890 --> 00:13:06.348\nWhat's the next whole number,\nwhat [SOUND] I don't know, right.\n\n237\n00:13:06.348 --> 00:13:09.451\nWell, we know it's gonna be\na dunder method just because\n\n238\n00:13:09.451 --> 00:13:11.400\nwell that's what we've written.\n\n239\n00:13:11.400 --> 00:13:12.250\n&gt;&gt; That's what we do.\n\n240\n00:13:12.250 --> 00:13:13.850\n&gt;&gt; It's all over the place.\n\n241\n00:13:13.850 --> 00:13:18.610\nAnd based on the function call, well,\nI always gotta give Zach a chance.\n\n242\n00:13:18.610 --> 00:13:20.460\nZach, what are we going to implement?\n\n243\n00:13:20.460 --> 00:13:21.144\nDunder, what?\n\n244\n00:13:21.144 --> 00:13:23.153\n&gt;&gt; C-E-I-L.\n\n245\n00:13:23.153 --> 00:13:26.780\n&gt;&gt; Dunder ceil, not ceiling.\n\n246\n00:13:26.780 --> 00:13:28.180\nCeil, just like the function call.\n\n247\n00:13:28.180 --> 00:13:31.098\nSo __ceil__(self).\n\n248\n00:13:31.098 --> 00:13:37.290\nAnd then we'll just say\ns = self.x + self.y.\n\n249\n00:13:37.290 --> 00:13:42.470\nAnd to some extent, these are opposite\nsides of the same coin, right?\n\n250\n00:13:42.470 --> 00:13:44.580\nSo I'm gonna return a similar quantity.\n\n251\n00:13:44.580 --> 00:13:46.940\nIt wouldn't make sense, at least to me,\n\n252\n00:13:46.940 --> 00:13:49.260\nthere may be some educational reasons for\nthis.\n\n253\n00:13:49.260 --> 00:13:52.450\nIt doesn't make sense to me to say,\nwell, one's gonna give me the sum,\n\n254\n00:13:52.450 --> 00:13:56.190\none's gonna give me the distance,\nwhich is square, square root.\n\n255\n00:13:56.190 --> 00:14:01.700\nSquare sum, square root or the difference,\nfloor and ceiling kind of come in pairs.\n\n256\n00:14:01.700 --> 00:14:02.550\nHow do I get the floor?\n\n257\n00:14:02.550 --> 00:14:03.450\nWell this is how you get the floor.\n\n258\n00:14:03.450 --> 00:14:05.040\nHow do I get the ceiling?\n\n259\n00:14:05.040 --> 00:14:07.680\nWell it's very similar to\nthe floor except it's the next\n\n260\n00:14:07.680 --> 00:14:11.400\ngreatest instead of the next lowest one,\nthe lowest whole number.\n\n261\n00:14:11.400 --> 00:14:18.422\nLet's see if that in fact does give us\nwhat we anticipate, .I floor and ceiling.\n\n262\n00:14:18.422 --> 00:14:21.350\nAll right, here we go.\n\n263\n00:14:21.350 --> 00:14:22.770\nAre you ready?\n\n264\n00:14:22.770 --> 00:14:28.440\nSo the ceiling of p is 7,\nthe floor of p is 6.\n\n265\n00:14:28.440 --> 00:14:33.870\nAnd well, that actually lies\nbetween those two extremes.\n\n266\n00:14:33.870 --> 00:14:37.700\nI think it's 3.6 and\n2.7, which would be 6.3.\n\n267\n00:14:37.700 --> 00:14:40.140\nSo it's rounding up effectively.\n\n268\n00:14:40.140 --> 00:14:45.980\nThat's what ceiling is when people saying\neveryday terms I'm rounding up, right?\n\n269\n00:14:45.980 --> 00:14:47.880\nI'm round up to the next\nwhole number again.\n\n270\n00:14:47.880 --> 00:14:50.950\nRounding down,\nrounding down to the next whole number.\n\n271\n00:14:50.950 --> 00:14:54.860\nThere are times where rounding up and\nrounding down mean different things.\n\n272\n00:14:54.860 --> 00:14:59.400\nBut that makes me think, if floor has\nthat interesting property of being\n\n273\n00:14:59.400 --> 00:15:03.790\navailable to us if we have a dunder float,\nright?\n\n274\n00:15:03.790 --> 00:15:05.720\nBut not a dunder ceil.\n\n275\n00:15:05.720 --> 00:15:08.790\nThe ceiling, or ceil,\nhave that same property.\n\n276\n00:15:09.840 --> 00:15:12.950\nSo this is where we start\ncoming back to exploration.\n\n277\n00:15:12.950 --> 00:15:14.660\nWe explore it, we learn something new.\n\n278\n00:15:14.660 --> 00:15:18.770\nNow, we're coming back to explore more\nto really fill in the gaps, so to speak.\n\n279\n00:15:18.770 --> 00:15:19.332\nSo I'm gonna come down here.\n\n280\n00:15:19.332 --> 00:15:20.310\n&gt;&gt; We're intrepid.\n\n281\n00:15:20.310 --> 00:15:23.648\n&gt;&gt; [SOUND] I thought you\nwere talking about the car.\n\n282\n00:15:23.648 --> 00:15:25.421\n&gt;&gt; [LAUGH]\n&gt;&gt; I was like, no, no,\n\n283\n00:15:25.421 --> 00:15:27.120\nI don't have one of those.\n\n284\n00:15:27.120 --> 00:15:31.170\nBut if I come back here and I say,\nfloat, and I'm just doing float.\n\n285\n00:15:31.170 --> 00:15:33.970\nI suspect that int would work as well,\nright?\n\n286\n00:15:33.970 --> 00:15:38.710\nI'm gonna say, return self.x + self.y.\n\n287\n00:15:38.710 --> 00:15:42.040\nReturning the sum instead of just x or\ny or the distance.\n\n288\n00:15:42.040 --> 00:15:45.240\nI'm changing it up a little bit so\nI can really draw in,\n\n289\n00:15:45.240 --> 00:15:47.128\nwould I put this in production?\n\n290\n00:15:48.932 --> 00:15:50.065\nProbably not.\n\n291\n00:15:50.065 --> 00:15:51.863\n[LAUGH] But the same.\n\n292\n00:15:51.863 --> 00:15:52.460\n&gt;&gt; [LAUGH] But that's all right.\n\n293\n00:15:52.460 --> 00:15:54.770\n&gt;&gt; But we're being intrepid.\n\n294\n00:15:54.770 --> 00:15:59.160\nWe're having fun here and I just\nnoticed I think I got an indentation.\n\n295\n00:15:59.160 --> 00:16:02.748\nYeah, then you just come over one more,\nthere we go.\n\n296\n00:16:02.748 --> 00:16:06.765\nNow if I say,\npython3 floor_and_ceil, there we go.\n\n297\n00:16:06.765 --> 00:16:09.126\nLet's see if floor works.\n\n298\n00:16:09.126 --> 00:16:13.710\nWe know floor should work, cuz we've\nimplemented that method, floor(p), got it?\n\n299\n00:16:13.710 --> 00:16:17.237\nCeil(p), got it, it still works.\n\n300\n00:16:17.237 --> 00:16:18.093\n&gt;&gt; Wow.\n\n301\n00:16:18.093 --> 00:16:22.485\n&gt;&gt; And that is why, if you go looking\nin the documentation at the Python data\n\n302\n00:16:22.485 --> 00:16:25.620\nmodel, these are not explicitly shown.\n\n303\n00:16:25.620 --> 00:16:31.085\nCuz if you implement float, we know for a\nfact you kinda get these for free, right?\n\n304\n00:16:31.085 --> 00:16:34.721\nSo it checks that, but\nthen that asks another question,\n\n305\n00:16:34.721 --> 00:16:36.556\nwhat if I don't want float?\n\n306\n00:16:36.556 --> 00:16:41.340\nIt only makes sense for me to have\ndunder int, as we've a few episodes ago.\n\n307\n00:16:41.340 --> 00:16:45.390\nDo I get floor and ceiling for free there,\nbecause these are integer representations?\n\n308\n00:16:45.390 --> 00:16:50.575\nYou know, Zach, we could go read, we\ncould go think about it a real long time.\n\n309\n00:16:50.575 --> 00:16:55.315\nWe could stare at our computer screen, but\nI'm a big fan of let's just try it out and\n\n310\n00:16:55.315 --> 00:16:56.421\nsee what happens.\n\n311\n00:16:56.421 --> 00:16:57.081\n&gt;&gt; There you go.\n\n312\n00:16:57.081 --> 00:17:02.987\n&gt;&gt; So let's get out of here,\nand come into floor_and_ceil.\n\n313\n00:17:02.987 --> 00:17:09.821\nAnd we're gonna make that float\njust be dunder int, just like that.\n\n314\n00:17:09.821 --> 00:17:13.541\nAnd just to make sure that it worked for\nboth.\n\n315\n00:17:17.975 --> 00:17:19.164\nWait for it, there we go.\n\n316\n00:17:19.164 --> 00:17:21.545\nThat's not how you spell clear.\n\n317\n00:17:23.236 --> 00:17:25.248\nAll right, floor_and_ceil.\n\n318\n00:17:25.248 --> 00:17:31.553\nFloor(p), interesting.\n\n319\n00:17:31.553 --> 00:17:36.348\nWhat about ceil(p)?\n\n320\n00:17:36.348 --> 00:17:37.337\nBroke?\n\n321\n00:17:37.337 --> 00:17:38.202\n&gt;&gt; Uh-oh.\n\n322\n00:17:38.202 --> 00:17:44.840\n&gt;&gt; Uh-oh, well, that's actually\na little surprising, is it not?\n\n323\n00:17:44.840 --> 00:17:46.489\nYou're like, well, integer and\nfloats it's returning?\n\n324\n00:17:46.489 --> 00:17:50.311\nIf it's returning an integer for\nfloor_and_ceil,\n\n325\n00:17:50.311 --> 00:17:52.585\nwhy wouldn't dunder int work?\n\n326\n00:17:52.585 --> 00:17:53.518\nWell, maybe we broke something else.\n\n327\n00:17:53.518 --> 00:17:56.190\nMaybe you need to have one of them, right?\n\n328\n00:17:56.190 --> 00:17:57.890\nYou need dunder floor and float,\n\n329\n00:17:57.890 --> 00:18:01.784\nthat doesn't make sense cuz we saw that\njust having float makes floor work.\n\n330\n00:18:01.784 --> 00:18:04.704\nSo now, if we go back and\nchange that to float but\n\n331\n00:18:04.704 --> 00:18:08.076\nwe leave the other two,\ndunder floor and dunder ceil.\n\n332\n00:18:08.076 --> 00:18:11.803\nComment it out,\ndo we get these methods back?\n\n333\n00:18:11.803 --> 00:18:17.243\nI don't know, Zach, I'm getting a little\nworried here, I'm not gonna lie to you.\n\n334\n00:18:17.243 --> 00:18:20.468\nAnd things go off the rails sometimes,\nyou know?\n\n335\n00:18:20.468 --> 00:18:25.200\nI don't know if Zach believes me\nwhen I say stuff like that [LAUGH].\n\n336\n00:18:25.200 --> 00:18:28.571\n&gt;&gt; [LAUGH] You're doing your best Columbo\nimpersonation here, I know what's coming.\n\n337\n00:18:28.571 --> 00:18:32.597\n&gt;&gt; He's like, I don't believe\na word you're saying, Justin.\n\n338\n00:18:32.597 --> 00:18:37.518\n&gt;&gt; [LAUGH]\n&gt;&gt; So here we go, all right,\n\n339\n00:18:37.518 --> 00:18:41.020\nso floor(p), aha!\n\n340\n00:18:41.020 --> 00:18:45.152\nHm, that's interesting.\n\n341\n00:18:45.152 --> 00:18:52.126\nY ceil must be a real number,\nbut I changed that back to float.\n\n342\n00:18:52.126 --> 00:18:53.990\n&gt;&gt; Mm-hm.\n\n343\n00:18:53.990 --> 00:18:59.255\n&gt;&gt; But notice a little while ago,\nit gives me something here,\n\n344\n00:18:59.255 --> 00:19:03.062\nbut it doesn't seem to be deterministic.\n\n345\n00:19:05.436 --> 00:19:08.179\nSo let's go make sure I\ndidn't do something wrong.\n\n346\n00:19:08.179 --> 00:19:14.780\nSo return self, yes, I did [LAUGH].\n\n347\n00:19:14.780 --> 00:19:17.217\n&gt;&gt; Okay.\n&gt;&gt; Apparently I was like, hold on,\n\n348\n00:19:17.217 --> 00:19:18.730\nhold on, hold on.\n\n349\n00:19:18.730 --> 00:19:24.580\nI accidentally renamed that dunder floor\nwhen it should have been dunder float.\n\n350\n00:19:24.580 --> 00:19:27.720\nSo that it delegates to\nthe appropriate method.\n\n351\n00:19:27.720 --> 00:19:33.357\nLet's try that again, that was so\nanticlimactic, [LAUGH].\n\n352\n00:19:33.357 --> 00:19:34.770\n&gt;&gt; But it's a learning moment.\n\n353\n00:19:34.770 --> 00:19:35.775\n&gt;&gt; It is, it is.\n&gt;&gt; They're all learning moments.\n\n354\n00:19:35.775 --> 00:19:36.421\n&gt;&gt; Let's see here.\n\n355\n00:19:36.421 --> 00:19:41.116\nNow let's see if this makes sense,\n(p) 6, okay?\n\n356\n00:19:41.116 --> 00:19:44.487\nI don't have floor or\nceil implemented, just dunder float.\n\n357\n00:19:44.487 --> 00:19:47.420\nDunder int didn't work, dunder int broke.\n\n358\n00:19:47.420 --> 00:19:52.310\nWhat about ceil(p), and that's 7?\n\n359\n00:19:52.310 --> 00:19:55.375\nActually, all I need is dunder float for\nfloor_and_ceil to work.\n\n360\n00:19:55.375 --> 00:20:00.074\nBut what if you have this weird one\nparticular thing where you only\n\n361\n00:20:00.074 --> 00:20:02.390\nwant floor_and_ceil?.\n\n362\n00:20:02.390 --> 00:20:04.374\nYou don't want the ability\nto change it to a float.\n\n363\n00:20:04.374 --> 00:20:06.061\nThen you can implement,\n\n364\n00:20:09.695 --> 00:20:14.338\nFloor_and_ceil only by themselves and\nprovide custom logic.\n\n365\n00:20:14.338 --> 00:20:16.033\nMaybe they mean something different.\n\n366\n00:20:16.033 --> 00:20:20.324\nYou're effectively hijacking the meaning\nof floor_and_ceil or ceiling.\n\n367\n00:20:20.324 --> 00:20:24.303\nSo you have to be careful, and\nI wanted to illustrate that this is\n\n368\n00:20:24.303 --> 00:20:27.930\none of the ones where you're like,\nthat's kinda weird.\n\n369\n00:20:27.930 --> 00:20:32.016\nI would probably be explicit and\nnot just let float take over,\n\n370\n00:20:32.016 --> 00:20:35.878\nunless I really wanted it to\nact just like another number.\n\n371\n00:20:35.878 --> 00:20:39.918\nIf you wanted any in different logic,\nanything that was,\n\n372\n00:20:39.918 --> 00:20:45.450\neven the most minuscule change, I would\nhave dunder floor and dunder ceiling.\n\n373\n00:20:45.450 --> 00:20:53.430\nDo beware, and I have no confirmation or\ndenial of this.\n\n374\n00:20:53.430 --> 00:20:56.626\nLooking into the Python\nmodel data documentation,\n\n375\n00:20:56.626 --> 00:21:00.403\nbecause they're not explicitly listed,\nI would be really,\n\n376\n00:21:00.403 --> 00:21:03.395\nreally hesitant about\nusing these widespread.\n\n377\n00:21:03.395 --> 00:21:08.132\nCuz I don't know if maybe, at some point\nthey were gonna become deprecated.\n\n378\n00:21:08.132 --> 00:21:11.335\nOr maybe they're like,\ndon't really use this,\n\n379\n00:21:11.335 --> 00:21:15.180\nwe use these behind the scenes,\nso do keep that in mind.\n\n380\n00:21:15.180 --> 00:21:17.510\nThese are one of those\nspecial dunder methods.\n\n381\n00:21:17.510 --> 00:21:20.053\nBut, by and large,\nI haven't seen them used a great deal.\n\n382\n00:21:20.053 --> 00:21:22.744\nMaybe you have a use for them, but\n\n383\n00:21:22.744 --> 00:21:26.889\nI would try to stay away from\nthem as much as I could.\n\n384\n00:21:26.889 --> 00:21:29.874\nMainly because they're\nnot explicitly there.\n\n385\n00:21:29.874 --> 00:21:35.362\nAnd that makes me think I should be\ncareful when actually utilizing these for\n\n386\n00:21:35.362 --> 00:21:37.087\nsomething important.\n\n387\n00:21:37.087 --> 00:21:39.301\nBut there you have it, floor_and_ceil.\n\n388\n00:21:39.301 --> 00:21:41.150\n&gt;&gt; Mm-hm, floor and ceiling.\n\n389\n00:21:41.150 --> 00:21:44.690\nAnother great episode inside of\nthe Python Data Model Series.\n\n390\n00:21:44.690 --> 00:21:45.786\nAnd last words, Justin?\n\n391\n00:21:45.786 --> 00:21:51.796\n&gt;&gt; Well, this is the first one we've seen\nwhere there's some crazy nuanced behavior,\n\n392\n00:21:51.796 --> 00:21:52.389\nright?\n\n393\n00:21:52.389 --> 00:21:56.160\nFloor is a little bit different\nthan truncate, and who knows?\n\n394\n00:21:56.160 --> 00:21:59.699\nJust keep those edge cases in\nmind as you're programming,\n\n395\n00:21:59.699 --> 00:22:03.510\nnot just in the Python data model,\nbut just in general.\n\n396\n00:22:03.510 --> 00:22:07.470\nAnd that'll help you track down some\nof those, what people call heisenbugs.\n\n397\n00:22:07.470 --> 00:22:10.096\nThey only happen when\nyou're not looking at them.\n\n398\n00:22:10.096 --> 00:22:13.548\n&gt;&gt; [LAUGH]\n&gt;&gt; And so do keep that in mind,\n\n399\n00:22:13.548 --> 00:22:19.520\nit can calls for some not so\nfun debugging activities.\n\n400\n00:22:19.520 --> 00:22:22.186\n&gt;&gt; And I don't even know if I'm gonna\nbe able to sleep tonight thinking about\n\n401\n00:22:22.186 --> 00:22:22.707\nheisenbugs.\n\n402\n00:22:22.707 --> 00:22:26.810\nPython data models, a wonderful series,\nJustin's done a fantastic job putting it\n\n403\n00:22:26.810 --> 00:22:30.080\ntogether for you, no stone unturned,\nhe turns them all over.\n\n404\n00:22:30.080 --> 00:22:32.945\nMake sure you see all those episodes and\nyou'll be in that course library.\n\n405\n00:22:32.945 --> 00:22:35.800\nThere's thousands of other videos\nthere that will help you go further.\n\n406\n00:22:35.800 --> 00:22:37.040\nSo check those out, too.\n\n407\n00:22:37.040 --> 00:22:38.842\nAnd tell everybody you\nknow about DevPro.TV,\n\n408\n00:22:38.842 --> 00:22:40.157\na good dev pro is always learning.\n\n409\n00:22:40.157 --> 00:22:41.544\nThanks for watching, I'm Zach Memos.\n\n410\n00:22:41.544 --> 00:22:42.442\n&gt;&gt; And I'm Justin Dennison.\n\n411\n00:22:42.442 --> 00:22:43.401\n&gt;&gt; And we will see you soon.\n\n412\n00:22:43.401 --> 00:22:49.021\n[NOISE]\n\n",
          "vimeoId": "253428243"
        },
        {
          "description": "In this episode, Justin and Daniel look into a couple of different data model methods, \\_\\_trunc\\_\\_ and \\_\\_index\\_\\_. Utilizing the \\_\\_trunc\\_\\_ method, Justin demonstrates how to truncate the representation of a numerical-like object. Moreover, Justin explores the use of an object as an index in a list.",
          "length": "1460",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-13-1-truncation_and_indexing-013018-PGM.00_24_11_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-13-1-truncation_and_indexing-013018-PGM.00_24_11_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-13-1-truncation_and_indexing-013018-PGM.00_24_11_28.Still001-sm.jpg",
          "title": "Truncation and Indexing",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.775 --> 00:00:13.590\nAll right, good.\n\n3\n00:00:13.590 --> 00:00:17.240\nGreetings everyone and welcome back\nto another great episode of DevProTV.\n\n4\n00:00:17.240 --> 00:00:18.380\nI'm your host Daniel Lowrie and\n\n5\n00:00:18.380 --> 00:00:22.890\nin today's episode we continue on with\nmore of our Python data model series.\n\n6\n00:00:22.890 --> 00:00:24.470\nVery interesting stuff so far.\n\n7\n00:00:24.470 --> 00:00:25.690\nJoining us back in the studio,\n\n8\n00:00:25.690 --> 00:00:28.940\nlearning his expertise on that topic\nour good friend Mister Justin Dennison.\n\n9\n00:00:28.940 --> 00:00:30.440\nJustin, welcome back, how's it going?\n\n10\n00:00:30.440 --> 00:00:32.580\n&gt;&gt; It's going fantastic Daniel,\nand how are you today?\n\n11\n00:00:32.580 --> 00:00:35.080\n&gt;&gt; I'm not going to say,\nnot going to comment on that,\n\n12\n00:00:35.080 --> 00:00:37.490\nbecause I think it's not a good business.\n\n13\n00:00:37.490 --> 00:00:38.885\n&gt;&gt; [LAUGH].\n&gt;&gt; I'm good, I'm good, I'm fine.\n\n14\n00:00:38.885 --> 00:00:40.030\n[LAUGH]\n&gt;&gt; I see what we're playing today.\n\n15\n00:00:40.030 --> 00:00:43.010\nWe'll see how you are at\nthe end of this episode.\n\n16\n00:00:43.010 --> 00:00:46.540\nWe'll see if that same kinda persist,\n\n17\n00:00:46.540 --> 00:00:49.960\nand while we're actually gonna be\ntalking about truncation and indexing.\n\n18\n00:00:49.960 --> 00:00:53.650\nAnd to some extent, we talked\nabout that in a previous episode.\n\n19\n00:00:53.650 --> 00:00:56.390\nWe looked at truncation\nas a comparison floor.\n\n20\n00:00:56.390 --> 00:01:00.760\nNow, I wanted to come back because it's\nactually one of those special methods,\n\n21\n00:01:00.760 --> 00:01:03.120\nthose dunder methods,\nthose data model methods.\n\n22\n00:01:03.120 --> 00:01:07.200\nIt's not explicit in the documentation,\nbut it is there if you go hunting.\n\n23\n00:01:07.200 --> 00:01:09.990\nReal deep into the documentation\nyou can find it.\n\n24\n00:01:09.990 --> 00:01:13.540\nNow, truncation, here's what you\nneed to know about truncation.\n\n25\n00:01:13.540 --> 00:01:19.120\nCuts it off at the decimal point and just\ngives you the actual remaining number.\n\n26\n00:01:19.120 --> 00:01:24.110\nWhereas four,\nif it's one dot and then nanana.\n\n27\n00:01:24.110 --> 00:01:26.360\nFour?\nWell actually, it's saying it's two.\n\n28\n00:01:26.360 --> 00:01:27.730\nSo I'm gonna give you two.\n\n29\n00:01:28.880 --> 00:01:32.640\nNow, because we've already seen a lot\nof that, it's just kind of a summation.\n\n30\n00:01:32.640 --> 00:01:35.120\nIn the second part of this episode,\n\n31\n00:01:35.120 --> 00:01:39.040\nwe're gonna look at,\nit's still about numeric types, indexing.\n\n32\n00:01:39.040 --> 00:01:43.300\nWe can use a custom object as a list\nindex which is kind of interesting.\n\n33\n00:01:43.300 --> 00:01:48.180\nAnd I tried to, hopefully\nthe example kind of gives away or\n\n34\n00:01:48.180 --> 00:01:50.350\nimparts why you want to do this.\n\n35\n00:01:51.580 --> 00:01:54.931\nGranted, I'm not sure if it would be\nsomething I would throw in production\n\n36\n00:01:54.931 --> 00:01:56.841\n[INAUDIBLE] but you never know.\n\n37\n00:01:56.841 --> 00:01:59.162\nYou need to know that these are available.\n\n38\n00:01:59.162 --> 00:02:03.550\nMaybe they're not all useful, but,\nI always like having the tool.\n\n39\n00:02:03.550 --> 00:02:06.520\nThat one wrench that I'm like I don't\nknow when I'm ever going to use that.\n\n40\n00:02:06.520 --> 00:02:07.620\nBut when it comes along,\n\n41\n00:02:07.620 --> 00:02:11.650\nI'm like I'm glad I got this thing,\ncuz it made my life a whole lot easier.\n\n42\n00:02:11.650 --> 00:02:14.840\nSo, enough talking,\nlet's go ahead and get started.\n\n43\n00:02:14.840 --> 00:02:16.580\nSo let's take a look\nat the screen here and\n\n44\n00:02:16.580 --> 00:02:18.690\nwe're just inside of\nthe python data model.\n\n45\n00:02:18.690 --> 00:02:22.290\nLet's just quickly remind\nourselves these two operations.\n\n46\n00:02:22.290 --> 00:02:23.550\nWe're gonna start with truncation.\n\n47\n00:02:24.920 --> 00:02:29.950\nAnd before, we'll go ahead and look at\nindexing, what do I mean by indexing?\n\n48\n00:02:29.950 --> 00:02:34.594\nBut then we will only concern ourselves\nwith truncation initially, all right?\n\n49\n00:02:34.594 --> 00:02:40.290\nSo and from that import truncate,\nall right?\n\n50\n00:02:40.290 --> 00:02:42.280\nTrunc, there we go.\n\n51\n00:02:42.280 --> 00:02:46.230\nI always want to give the full\nword that is a shortened word.\n\n52\n00:02:46.230 --> 00:02:47.460\nI don't know.\n\n53\n00:02:47.460 --> 00:02:48.330\nLet's keep it simple.\n\n54\n00:02:48.330 --> 00:02:49.210\n&gt;&gt; Yeah.\n&gt;&gt; I know.\n\n55\n00:02:49.210 --> 00:02:50.200\n&gt;&gt; I just wanna.\n\n56\n00:02:50.200 --> 00:02:52.040\n&gt;&gt; Try to keep this thing\na little too complex.\n\n57\n00:02:52.040 --> 00:02:54.185\n&gt;&gt; Well because I like whole words.\n\n58\n00:02:54.185 --> 00:02:57.440\n&gt;&gt; [LAUGH]\n&gt;&gt; They're easier to remember I get you.\n\n59\n00:02:57.440 --> 00:03:01.356\n&gt;&gt; Yeah they're and especially it's shrunk\n&gt;&gt; [CROSSTALK]\n\n60\n00:03:01.356 --> 00:03:02.810\n&gt;&gt; Maybe that's a play.\n\n61\n00:03:02.810 --> 00:03:06.670\nMaybe it's their truncating trunk cases.\n\n62\n00:03:06.670 --> 00:03:07.770\n&gt;&gt; See what I did there?\n\n63\n00:03:07.770 --> 00:03:09.000\n&gt;&gt; I'm too engrained in this.\n\n64\n00:03:09.000 --> 00:03:10.010\nI didn't even think about that.\n\n65\n00:03:10.010 --> 00:03:12.000\n&gt;&gt; You're too close to the problem.\n\n66\n00:03:12.000 --> 00:03:14.100\n&gt;&gt; Yeah,\nI'm too close to the problem, I am.\n\n67\n00:03:14.100 --> 00:03:16.950\nSo let's go ahead and\nsee what does truncate do?\n\n68\n00:03:16.950 --> 00:03:19.640\nWell, let's feed it a number like so.\n\n69\n00:03:20.980 --> 00:03:21.870\n&gt;&gt; I did it again, Daniel.\n\n70\n00:03:21.870 --> 00:03:22.630\n&gt;&gt; You sure did.\n\n71\n00:03:22.630 --> 00:03:24.720\n&gt;&gt; We were talking about tracking,\nand there it is.\n\n72\n00:03:24.720 --> 00:03:26.118\nIt just gives me one.\n\n73\n00:03:26.118 --> 00:03:27.540\nWell, what about 1.2.\n\n74\n00:03:27.540 --> 00:03:31.850\nIt just gives me one again,\nslicing the decimal point.\n\n75\n00:03:31.850 --> 00:03:33.900\nGive me everything that's a whole number.\n\n76\n00:03:33.900 --> 00:03:38.830\nBut what about a whole\nbunch of nines out here?\n\n77\n00:03:38.830 --> 00:03:44.200\nAw, two, but if I move back\nsome of these nines, I get one.\n\n78\n00:03:44.200 --> 00:03:45.900\nAnd that actually has to do with rounding,\nrounding.\n\n79\n00:03:45.900 --> 00:03:48.800\n&gt;&gt; Right, so\nit's rounding up depending on however\n\n80\n00:03:48.800 --> 00:03:50.440\nmany decimal places you mightbe over.\n\n81\n00:03:50.440 --> 00:03:54.520\n&gt;&gt; Exactly, and four actually\nbehaves a little bit differently\n\n82\n00:03:54.520 --> 00:03:56.840\ndepending on the number of nines, okay.\n\n83\n00:03:56.840 --> 00:03:58.320\nSo, truncate and four.\n\n84\n00:03:58.320 --> 00:04:02.120\nThey're very similar, but there\nare a few edge cases where depending on\n\n85\n00:04:02.120 --> 00:04:04.320\nhow close you are to two is\nit gonna give me one or two.\n\n86\n00:04:04.320 --> 00:04:07.450\nAnd we actually saw that\nin the previous episode.\n\n87\n00:04:07.450 --> 00:04:12.550\nSo it's one of those things where if\nyou really just hammer on the nine,\n\n88\n00:04:12.550 --> 00:04:16.520\nwell you may eventually get\ntruncate to give you two.\n\n89\n00:04:16.520 --> 00:04:22.380\nWhereas you expected one but\nit's less so for four, all right?\n\n90\n00:04:22.380 --> 00:04:25.040\n&gt;&gt; So this is how we truncate a number.\n\n91\n00:04:25.040 --> 00:04:26.790\nSlice it at the decimal point,\ngive me the whole number.\n\n92\n00:04:26.790 --> 00:04:28.730\nGive me the left side, all right.\n\n93\n00:04:28.730 --> 00:04:31.590\nSo, with that said, what about indexing?\n\n94\n00:04:31.590 --> 00:04:32.800\nWell, we need a list.\n\n95\n00:04:32.800 --> 00:04:36.410\nWe need a list of numbers just like so.\n\n96\n00:04:36.410 --> 00:04:39.790\nAnd then if I want the number\ntwo out of this list\n\n97\n00:04:39.790 --> 00:04:43.630\nI say a bracket one because\nthat's the first index,\n\n98\n00:04:43.630 --> 00:04:48.410\nI've indexed it at one it starts\nat zero and boom it comes up.\n\n99\n00:04:48.410 --> 00:04:49.860\n&gt;&gt; Boy that's not confusing.\n\n100\n00:04:49.860 --> 00:04:51.140\n&gt;&gt; That's not confusing.\n\n101\n00:04:51.140 --> 00:04:53.830\nGet's you every time.\n\n102\n00:04:53.830 --> 00:04:54.760\nI put one.\n\n103\n00:04:54.760 --> 00:04:55.670\n&gt;&gt; Aww.\n[LAUGH]\n\n104\n00:04:55.670 --> 00:04:58.258\n&gt;&gt; Yeah, I want index one which is.\n\n105\n00:04:58.258 --> 00:05:04.180\n&gt;&gt; [CROSSTALK]\n&gt;&gt; And so teaching this is, phew.\n\n106\n00:05:04.180 --> 00:05:06.230\nIt's rough going.\n\n107\n00:05:06.230 --> 00:05:09.020\nEssentially, you have to mess up a lot\nuntil you're like you're not gonna burn me\n\n108\n00:05:09.020 --> 00:05:11.140\nagain, I got you now, I understand.\n\n109\n00:05:11.140 --> 00:05:15.390\nNow Indexing can also\nbe related to slicing.\n\n110\n00:05:15.390 --> 00:05:18.018\nSo if I say 12, you mean,\n\n111\n00:05:18.018 --> 00:05:22.130\none two and notice it brings back\ntwo it's only one element, but\n\n112\n00:05:22.130 --> 00:05:27.980\nit gives me back as a list if I\nchange that to 0 2 it gives me 0,\n\n113\n00:05:27.980 --> 00:05:32.900\n1 2 not included there it gives\na none inclusive Interval, right?\n\n114\n00:05:32.900 --> 00:05:34.180\nIt's an open interval on the right.\n\n115\n00:05:35.480 --> 00:05:38.320\nSo that's what we need\nto know about indexing.\n\n116\n00:05:39.510 --> 00:05:42.200\nLists are probably what you're\ngoing to index the most.\n\n117\n00:05:42.200 --> 00:05:46.640\nYou use a similar syntax for dictionaries,\nbut those are key value pairs.\n\n118\n00:05:46.640 --> 00:05:48.440\nThat's not what we're talking about.\n\n119\n00:05:48.440 --> 00:05:52.140\nWe've actually talked about those\nbefore in a different context.\n\n120\n00:05:52.140 --> 00:05:57.210\nDo keep that in mind, but\nnotice indexing does require a number.\n\n121\n00:05:57.210 --> 00:06:03.620\nIf we look say, one point one, it goes\nI dont know what you're talking about.\n\n122\n00:06:03.620 --> 00:06:04.460\nCan't put a float in there.\n\n123\n00:06:04.460 --> 00:06:06.980\nWhat is the one point\none index of this list,\n\n124\n00:06:06.980 --> 00:06:09.140\nit doesn't exist because\nthese are discrete.\n\n125\n00:06:09.140 --> 00:06:11.860\nThere's the number one,\nthe number two, and the number three.\n\n126\n00:06:11.860 --> 00:06:14.940\nThere's nothing in between, and\nthey don't count in between.\n\n127\n00:06:14.940 --> 00:06:19.180\nRight, you don't go I have one,\none point one, one point two M&amp;M's.\n\n128\n00:06:19.180 --> 00:06:22.200\nOn my plate right or\nsomething of that nature.\n\n129\n00:06:22.200 --> 00:06:24.390\nSo, do keep that in mind.\n\n130\n00:06:24.390 --> 00:06:30.640\nAll so let us get out of here let's\ncreate a file called, shrunk and index.\n\n131\n00:06:30.640 --> 00:06:32.900\nIt is a fun file.\n\n132\n00:06:32.900 --> 00:06:37.420\nSo, for truncation we are gonna\nstart with kind of our standard\n\n133\n00:06:37.420 --> 00:06:42.270\nsimulating A numeric type that is\nactually a combination of two numbers.\n\n134\n00:06:42.270 --> 00:06:49.262\nWe're going to call those a point,\nand we have a set our values.\n\n135\n00:06:49.262 --> 00:06:53.860\nAnd you know, just for giggles, we haven't\ndone this- I almost forgot how to do this,\n\n136\n00:06:53.860 --> 00:06:58.470\nso I'm going to type this by hand .It\nwon't take very long because, well,\n\n137\n00:06:58.470 --> 00:07:00.200\nthere's not a lot to type actually.\n\n138\n00:07:00.200 --> 00:07:04.310\nAnd then a reaper just so\nwe have a nice representation.\n\n139\n00:07:05.650 --> 00:07:11.030\nSo I'm gonna return and users gonna\nabstain which is a python 3 new python 3\n\n140\n00:07:11.030 --> 00:07:17.080\nfeature and say point and\nthat's equals variables so\n\n141\n00:07:17.080 --> 00:07:21.650\nthat's gamma of y equals variables soft y.\n\n142\n00:07:21.650 --> 00:07:26.880\nThat is now we do solve y and\nthen in that end point.\n\n143\n00:07:26.880 --> 00:07:30.140\nHere's our point, and\nthere is a three two.\n\n144\n00:07:30.140 --> 00:07:36.760\nWhen we come back, and\nwe say #3- i, trunk and index.\n\n145\n00:07:37.840 --> 00:07:41.440\nEverything ran, we are good to go,\nand there is our point.\n\n146\n00:07:41.440 --> 00:07:44.710\nIf I say, from math, import, and\n\n147\n00:07:44.710 --> 00:07:48.708\nI'm hoping I don't mess\nthis up I got it that time.\n\n148\n00:07:48.708 --> 00:07:53.693\n&gt;&gt; [LAUGH]\n&gt;&gt; So trunc p doesn't define\n\n149\n00:07:53.693 --> 00:07:57.936\nthe double underscore trunc method.\n\n150\n00:07:57.936 --> 00:08:01.055\nNow, only if you ran into this would\nthis become immediately evident.\n\n151\n00:08:01.055 --> 00:08:04.146\nIf you see,\ndouble underscore trunc, your like\n\n152\n00:08:04.146 --> 00:08:08.830\nthat's probably a special method that I\ncan define that now I can truncate this.\n\n153\n00:08:08.830 --> 00:08:12.398\nAs it stands, though,\nI've put in whole numbers, doesn't really,\n\n154\n00:08:12.398 --> 00:08:13.970\nlike what does that mean?\n\n155\n00:08:13.970 --> 00:08:15.840\nWell, you just get the same numbers back.\n\n156\n00:08:15.840 --> 00:08:18.190\nSo we'll change that to make\nit a little more interesting.\n\n157\n00:08:18.190 --> 00:08:21.520\nBut anytime you're trying to use\na function that says does not implement\n\n158\n00:08:21.520 --> 00:08:25.029\nblah, You can probably implement that and\nget the expected behavior here.\n\n159\n00:08:25.029 --> 00:08:28.100\nOr maybe some kind of custom\nbehavior as we've seen thus far.\n\n160\n00:08:28.100 --> 00:08:30.970\nAll right, so let's hop back in here.\n\n161\n00:08:30.970 --> 00:08:32.438\nAnd what did I call that file?\n\n162\n00:08:32.438 --> 00:08:33.180\nTrunc and index.\n\n163\n00:08:33.180 --> 00:08:35.110\nThere we go.\nLet's go an change this to\n\n164\n00:08:35.110 --> 00:08:38.140\nsomething interesting before we go.\n\n165\n00:08:38.140 --> 00:08:41.163\nNow, if I were to round this,\nI would get three and three, right?\n\n166\n00:08:41.163 --> 00:08:42.460\nIt would round up.\n\n167\n00:08:42.460 --> 00:08:47.759\nI took the ceiling, and\nI would get four and three, cuz that's up.\n\n168\n00:08:47.759 --> 00:08:50.132\nFour, I would get three and two.\n\n169\n00:08:50.132 --> 00:08:52.900\nTrunc, well, what is that gonna do?\n\n170\n00:08:52.900 --> 00:08:57.250\nIn this case,\ntrunc is gonna be very similar to floor.\n\n171\n00:08:57.250 --> 00:08:59.152\nSo from that,import trunc.\n\n172\n00:09:01.568 --> 00:09:04.698\nI feel kind of weird saying that\nword over and over and over again.\n\n173\n00:09:04.698 --> 00:09:09.408\n&gt;&gt; [LAUGH]\n&gt;&gt; So dunder not truck, trunc.\n\n174\n00:09:09.408 --> 00:09:12.997\nSelf, and what am I going to return?\n\n175\n00:09:12.997 --> 00:09:16.986\nWell, just to keep it simple,\nI'm gonna say give me\n\n176\n00:09:16.986 --> 00:09:22.250\nthe truncated version of X and\nthe truncated version of Y.\n\n177\n00:09:22.250 --> 00:09:24.680\nI'm just going to return to a new\npoint that has those respectably\n\n178\n00:09:24.680 --> 00:09:26.470\ntruncated, all right.\n\n179\n00:09:26.470 --> 00:09:30.600\nNow, this could allow you to pass custom\ndata structures into truncate and\n\n180\n00:09:30.600 --> 00:09:34.490\nget representations that are meaningful\nto your respective application.\n\n181\n00:09:34.490 --> 00:09:38.650\nAs I said before, truncate,\npretty straightforward.\n\n182\n00:09:38.650 --> 00:09:41.420\nSo let's just see how this comes about.\n\n183\n00:09:41.420 --> 00:09:46.106\nAll right, so python3 -i trunc,\nthen p, all right?\n\n184\n00:09:46.106 --> 00:09:48.656\nBecause we've already imported\ntrunc inside of our file,\n\n185\n00:09:48.656 --> 00:09:50.320\nwe should have it accessible to us.\n\n186\n00:09:50.320 --> 00:09:52.698\nTrunc p, and there we go.\n\n187\n00:09:52.698 --> 00:09:55.650\nWe have the truncated\nversion of the point.\n\n188\n00:09:55.650 --> 00:10:00.350\nWe still have a point object,\nwe just now are able to feed that to\n\n189\n00:10:00.350 --> 00:10:04.578\nthe trunc function and\nhave it behave as we've declared.\n\n190\n00:10:04.578 --> 00:10:08.900\nAll right, so that is very similar\nto Float, very similar to Floor.\n\n191\n00:10:08.900 --> 00:10:10.670\nAnd if you have no idea\nwhat I'm talking about,\n\n192\n00:10:10.670 --> 00:10:13.870\ndefinitely go check out those episodes,\ncuz those have kind led up.\n\n193\n00:10:13.870 --> 00:10:17.090\nThere's these whole bunch of\nfunctions that behave similarly.\n\n194\n00:10:18.510 --> 00:10:21.660\nNow comes the interesting part,\nthat indexing.\n\n195\n00:10:21.660 --> 00:10:23.937\nAnd you'll have to bear with me on this,\nDaniel,\n\n196\n00:10:23.937 --> 00:10:25.684\nbecause hopefully this makes sense.\n\n197\n00:10:25.684 --> 00:10:30.790\nAnd if it doesn't, well, you can tell me,\nbut just remember I'm fragile.\n\n198\n00:10:30.790 --> 00:10:32.207\n&gt;&gt; Birdie lost, so don't worry.\n\n199\n00:10:32.207 --> 00:10:34.060\n[LAUGH]\n&gt;&gt; [LAUGH] What are you talking about?\n\n200\n00:10:34.060 --> 00:10:39.430\nAll right, so let's say that Python\ndoesn't have a character class per se,\n\n201\n00:10:39.430 --> 00:10:42.460\nwe have strings,\neven single characters are strings.\n\n202\n00:10:42.460 --> 00:10:45.180\nWhat do I mean by character,\nA, the letter A, right?\n\n203\n00:10:45.180 --> 00:10:47.253\nIf you come from other\nlanguages you're like,\n\n204\n00:10:47.253 --> 00:10:50.930\nwell, I wanna represent\nthe letter A as a character.\n\n205\n00:10:50.930 --> 00:10:53.260\nAnd behind the scenes sometimes\nI can use it as a number.\n\n206\n00:10:55.040 --> 00:10:57.740\nMaybe you want something like that.\n\n207\n00:10:57.740 --> 00:11:01.775\nSo I'm gonna create a character class-\n&gt;&gt; How many is A?\n\n208\n00:11:01.775 --> 00:11:03.079\n[LAUGH]\n&gt;&gt; Lower case or upper case?\n\n209\n00:11:04.114 --> 00:11:08.228\n&gt;&gt; So you mean like the hexadecimal value-\n&gt;&gt; Essentially, ASCII table look up.\n\n210\n00:11:08.228 --> 00:11:08.803\n&gt;&gt; Yeah, yeah.\n\n211\n00:11:08.803 --> 00:11:10.680\n&gt;&gt; Or seven, I don't know.\n\n212\n00:11:10.680 --> 00:11:11.205\n&gt;&gt; Who knows?\n\n213\n00:11:11.205 --> 00:11:12.470\n&gt;&gt; [LAUGH]\n&gt;&gt; We will find out.\n\n214\n00:11:12.470 --> 00:11:13.390\n&gt;&gt; I was making a joke.\n\n215\n00:11:14.570 --> 00:11:16.355\nHe's like, yeah, I can totally do that.\n\n216\n00:11:16.355 --> 00:11:20.800\n[LAUGH]\n&gt;&gt; You're like woops.\n\n217\n00:11:20.800 --> 00:11:22.600\nAll right, carry on.\n\n218\n00:11:22.600 --> 00:11:23.895\n&gt;&gt; The context helps, doesn't it?\n\n219\n00:11:23.895 --> 00:11:26.160\n&gt;&gt; [LAUGH] So\nwe're gonna create a dunder init.\n\n220\n00:11:26.160 --> 00:11:26.860\n&gt;&gt; And essentially,\n\n221\n00:11:26.860 --> 00:11:30.790\nwhat we're gonna have is the string\nrepresentation of the character.\n\n222\n00:11:30.790 --> 00:11:32.430\nAnd I'm just gonna call this char.\n\n223\n00:11:32.430 --> 00:11:35.210\nBut this is kinda just like a wrapper,\nall right?\n\n224\n00:11:35.210 --> 00:11:38.729\nSo, like so, and then we need that\nreaper just so we can read it.\n\n225\n00:11:41.577 --> 00:11:45.885\nAnd so we're gonna return another\nF string character like so.\n\n226\n00:11:45.885 --> 00:11:50.493\nAnd then I'm going to\nsay parenthesis double\n\n227\n00:11:50.493 --> 00:11:55.229\nquotes curly braces self.char curly brace.\n\n228\n00:11:55.229 --> 00:11:57.086\nMan that's a lot of quote.\n\n229\n00:11:57.086 --> 00:11:58.741\n&gt;&gt; That is a lot of quotes.\n\n230\n00:11:58.741 --> 00:12:00.280\n&gt;&gt; All right, so what do I mean?\n\n231\n00:12:00.280 --> 00:12:01.291\nLet see, here.\n\n232\n00:12:01.291 --> 00:12:04.030\nI wanna say A is the character.\n\n233\n00:12:04.030 --> 00:12:04.900\n&gt;&gt; The character?\n\n234\n00:12:04.900 --> 00:12:05.540\n&gt;&gt; Character.\n\n235\n00:12:06.610 --> 00:12:10.840\nCharacter A, all right.\n\n236\n00:12:10.840 --> 00:12:12.250\nB is the character, B.\n\n237\n00:12:14.320 --> 00:12:20.700\nAnd you know what, let's go with Z is.\n\n238\n00:12:22.290 --> 00:12:25.380\nI need something a little more\nmiddle of the road there.\n\n239\n00:12:25.380 --> 00:12:27.700\nSo, character P, all right?\n\n240\n00:12:27.700 --> 00:12:29.500\nSo I have these characters now.\n\n241\n00:12:29.500 --> 00:12:31.860\nI haven't done a lot, okay?\n\n242\n00:12:31.860 --> 00:12:34.900\nBut now, the indexing part's\ngonna come up, and just trust me,\n\n243\n00:12:34.900 --> 00:12:37.190\njust stay with me here, all right?\n\n244\n00:12:37.190 --> 00:12:39.930\nSo let's see how these,\nwell, how do they look?\n\n245\n00:12:39.930 --> 00:12:42.130\nWhat do they behave like?\n\n246\n00:12:42.130 --> 00:12:47.159\nI'm gonna trunc an index and\nsay A, B and P, right?\n\n247\n00:12:47.159 --> 00:12:48.540\nA, B, P, cool.\n\n248\n00:12:50.050 --> 00:12:53.378\nNow, what if I had a bunch of letters?\n\n249\n00:12:56.327 --> 00:12:59.055\nI type this so\nfast when we’re not on camera.\n\n250\n00:12:59.055 --> 00:13:03.995\n&gt;&gt; [LAUGH]\n&gt;&gt; And then, now I’m like is it w, q,\n\n251\n00:13:03.995 --> 00:13:06.550\nw, u, v, x, y, z.\n\n252\n00:13:06.550 --> 00:13:07.450\nThere we go.\n\n253\n00:13:07.450 --> 00:13:09.190\n&gt;&gt; Now you know your ABCs.\n\n254\n00:13:09.190 --> 00:13:10.820\n&gt;&gt; I do, I do, I do.\n\n255\n00:13:10.820 --> 00:13:13.050\nSo let say I have these letters.\n\n256\n00:13:13.050 --> 00:13:18.440\nWell, as it stands, I can do some slick\ntricks with this character class and\n\n257\n00:13:18.440 --> 00:13:23.130\nsay I want the letters A through\nJ by passing characters.\n\n258\n00:13:23.130 --> 00:13:25.195\nOr give me the Jth character\nfrom this collection.\n\n259\n00:13:26.220 --> 00:13:30.760\nThat's actually a little more\nreadable than saying, what is E?\n\n260\n00:13:30.760 --> 00:13:35.866\nWell, that's zero, one, two, three,\nfour, give me index four, right?\n\n261\n00:13:35.866 --> 00:13:38.330\nso there's some interesting parts there.\n\n262\n00:13:38.330 --> 00:13:42.400\nNow, there's a little bit of math here,\nso I may mess up.\n\n263\n00:13:42.400 --> 00:13:43.450\nIt's okay to laugh.\n\n264\n00:13:43.450 --> 00:13:45.740\nWe'll all laugh together and\nthen we'll fix it, all right?\n\n265\n00:13:45.740 --> 00:13:48.640\n&gt;&gt; It's the pointing that\nmakes you hurt inside.\n\n266\n00:13:48.640 --> 00:13:50.430\n[LAUGH]\n&gt;&gt; It is, it is.\n\n267\n00:13:50.430 --> 00:13:53.740\nSo just remember, we're all people.\n\n268\n00:13:53.740 --> 00:13:57.083\n&gt;&gt; We all have feelings.\n\n269\n00:13:57.083 --> 00:14:01.220\n&gt;&gt; [LAUGH] All right, so\nlet me get down here.\n\n270\n00:14:01.220 --> 00:14:03.440\nAnd I've got to retype that letters thing.\n\n271\n00:14:04.440 --> 00:14:13.853\nABCDEFGHIJKLMNOPQRSTUVWXYZ.\n\n272\n00:14:13.853 --> 00:14:16.426\nSome of you are probably\nscreaming at the screen,\n\n273\n00:14:16.426 --> 00:14:18.940\ngoing that's already built into Python.\n\n274\n00:14:18.940 --> 00:14:21.820\nIt is, but I wanted to type it so\nwe could actually see it.\n\n275\n00:14:21.820 --> 00:14:24.830\nSo it's explicit in our definition.\n\n276\n00:14:24.830 --> 00:14:28.690\nThis is actually part of the string\nmodule, so I can say import from string,\n\n277\n00:14:28.690 --> 00:14:31.950\nimport, I think it's ASCII upper.\n\n278\n00:14:31.950 --> 00:14:32.500\n&gt;&gt; Okay.\n&gt;&gt; And so\n\n279\n00:14:32.500 --> 00:14:34.270\nit will give me all the uppercase letters.\n\n280\n00:14:35.570 --> 00:14:37.690\nAll right, so there's letters.\n\n281\n00:14:37.690 --> 00:14:41.920\nNow, as it stands, if I wanted E,\n\n282\n00:14:41.920 --> 00:14:47.530\nI would have to say letters[4] like that.\n\n283\n00:14:47.530 --> 00:14:48.270\nWhat does four mean?\n\n284\n00:14:48.270 --> 00:14:50.350\nWell, it's index of four, right?\n\n285\n00:14:50.350 --> 00:14:53.320\nBut you still have to think about it.\n\n286\n00:14:53.320 --> 00:14:56.599\nThe worst is, well, 6 to 10.\n\n287\n00:14:58.700 --> 00:15:00.070\nWell, what character is that?\n\n288\n00:15:00.070 --> 00:15:00.570\nI don't know.\n\n289\n00:15:02.348 --> 00:15:11.077\nBut wouldn't it be interesting\nif I could say letters [a:p]?\n\n290\n00:15:11.077 --> 00:15:16.828\nOr if I were to type this out \"A\"\n\n291\n00:15:16.828 --> 00:15:22.460\ncolon \"P\" like so.\n\n292\n00:15:22.460 --> 00:15:25.270\nNow we-\n&gt;&gt; So something we have more of a context\n\n293\n00:15:25.270 --> 00:15:30.430\nto, like I don't know off the top\nof my head what index n is at.\n\n294\n00:15:30.430 --> 00:15:34.690\nBut I know n is there and I know where\nit lies in the context of the alphabet.\n\n295\n00:15:34.690 --> 00:15:35.810\n&gt;&gt; Exactly, and so\n\n296\n00:15:35.810 --> 00:15:38.570\nwe're essentially delegating\nthat to the character object and\n\n297\n00:15:38.570 --> 00:15:41.840\nsaying, well, this is a very particular\nuse case, I'm not gonna lie to you.\n\n298\n00:15:41.840 --> 00:15:45.800\nI could say, hey, you need to report\nwhere you are in this collection.\n\n299\n00:15:45.800 --> 00:15:47.820\n&gt;&gt; So it's resolving that for us.\n\n300\n00:15:47.820 --> 00:15:51.230\nIt's saying, well, I know you don't know\nwhere N is, but I know exactly where N is.\n\n301\n00:15:51.230 --> 00:15:53.487\nSo I'll just go ahead and\ndo that conversion for you.\n\n302\n00:15:53.487 --> 00:15:54.830\n&gt;&gt; Exactly, exactly.\n\n303\n00:15:54.830 --> 00:15:55.872\nAnd there are other ways to do this.\n\n304\n00:15:55.872 --> 00:15:59.062\nYou don't have to write a class,\nyou don't have to use these methods.\n\n305\n00:15:59.062 --> 00:16:02.864\nHold this closure if I was trying to\njust we can get some of it undone,\n\n306\n00:16:02.864 --> 00:16:07.100\nI will just probably write a couple\nof functions, put everything in line.\n\n307\n00:16:07.100 --> 00:16:08.500\nIt will be messy, hard to read.\n\n308\n00:16:08.500 --> 00:16:12.485\nBut if I needed to reuse it, sustainably.\n\n309\n00:16:12.485 --> 00:16:15.345\nI would probably try to\nabstract it in this manner.\n\n310\n00:16:15.345 --> 00:16:18.165\nNow, as it stands, this will not work,\nwhole bunch of broke.\n\n311\n00:16:18.165 --> 00:16:19.945\n[LAUGH] Whole bunch of broke.\n\n312\n00:16:19.945 --> 00:16:21.535\nAll kinds of broke.\n\n313\n00:16:21.535 --> 00:16:28.745\nNow, what we can do is say dunder index,\nlike so.\n\n314\n00:16:28.745 --> 00:16:31.860\nAnd dunder index has to return an integer.\n\n315\n00:16:31.860 --> 00:16:36.540\nBecause it's gonna be used to\nindex in a collection, right?\n\n316\n00:16:36.540 --> 00:16:40.010\nEarlier on we tried to pass 1.1 and\nit went absolutely not.\n\n317\n00:16:40.010 --> 00:16:41.700\nThat's a float, doesn't work.\n\n318\n00:16:41.700 --> 00:16:43.620\nIt has to return an integer.\n\n319\n00:16:43.620 --> 00:16:46.240\nWell, Daniel said something, what is a?\n\n320\n00:16:46.240 --> 00:16:47.620\nHow much is a?\n\n321\n00:16:47.620 --> 00:16:51.320\nWell, there's a nice little\nfunction in there in Python called\n\n322\n00:16:51.320 --> 00:16:52.350\nOrd like the ordinal.\n\n323\n00:16:53.370 --> 00:16:55.490\nWhere is it in the ASCII\nlookup table effectively?\n\n324\n00:16:55.490 --> 00:17:00.700\n41 is a capital a and\n61 is a lowercase a, pretty sure.\n\n325\n00:17:00.700 --> 00:17:02.980\nIt may change those a little.\n\n326\n00:17:02.980 --> 00:17:04.120\nIt's ASCII lookup table.\n\n327\n00:17:04.120 --> 00:17:04.690\nWahtever it is.\n\n328\n00:17:04.690 --> 00:17:07.210\nThere's some lookup table.\n\n329\n00:17:07.210 --> 00:17:11.740\nSo we're gonna do is we're going\nto use that to our, slef, slef.\n\n330\n00:17:11.740 --> 00:17:13.250\nSlef, [LAUGH] your slef.\n\n331\n00:17:13.250 --> 00:17:17.740\nWe're going to need to have you blow in\nthis straw for 12 seconds don't stop.\n\n332\n00:17:17.740 --> 00:17:19.950\nSo can you walk a line over here for\nme Justin.\n\n333\n00:17:19.950 --> 00:17:24.800\nI promise you I'm good, now,\nbecause I know the ordering, I\n\n334\n00:17:27.390 --> 00:17:33.370\nmay misspeak about this I've\nuse this self._class.first.\n\n335\n00:17:33.370 --> 00:17:35.910\nThat doesn't exist yet what I'm saying is\n\n336\n00:17:37.090 --> 00:17:42.080\nthe capital letter a is the first letter\nin these collection fo letters, right.\n\n337\n00:17:42.080 --> 00:17:46.140\nSo a is the first one that\nhas some numeric value.\n\n338\n00:17:46.140 --> 00:17:50.760\nThere are characters below that and\nwhat I've done here is said I\n\n339\n00:17:50.760 --> 00:17:55.190\nwant you to find whatever this character\nis and then subtract off the a part and\n\n340\n00:17:55.190 --> 00:17:59.770\nif I do that, I shift everything to zero,\none, two, three, four, five, six.\n\n341\n00:17:59.770 --> 00:18:01.030\nKinda slick, right?\n\n342\n00:18:01.030 --> 00:18:01.600\nYeah.\n\n343\n00:18:01.600 --> 00:18:04.180\nYeah, I know.\nI was pretty proud of myself.\n\n344\n00:18:04.180 --> 00:18:05.550\nI know.\n\n345\n00:18:05.550 --> 00:18:08.395\nThis is probably the highlight of my day.\n\n346\n00:18:08.395 --> 00:18:11.740\n[CROSSTALK] You just dropped the mic and\nwalked out.\n\n347\n00:18:11.740 --> 00:18:12.545\nReally, where's he going?\n\n348\n00:18:12.545 --> 00:18:15.340\n[LAUGH] Now there is one caveat to this.\n\n349\n00:18:15.340 --> 00:18:18.450\nIf you look in the documentation it\nsays if you implement dunder index\n\n350\n00:18:18.450 --> 00:18:19.920\nyou should implement dunder int.\n\n351\n00:18:19.920 --> 00:18:21.480\nAnd we've seen that before.\n\n352\n00:18:21.480 --> 00:18:25.450\nAnd they have to return the exact\nsame thing to stay consistent.\n\n353\n00:18:25.450 --> 00:18:27.100\nAre you allowed to make a change to that?\n\n354\n00:18:27.100 --> 00:18:27.600\nAbsolutely.\n\n355\n00:18:28.930 --> 00:18:30.570\nIs it advisable?\n\n356\n00:18:30.570 --> 00:18:32.470\nNo, all right?\n\n357\n00:18:32.470 --> 00:18:34.700\nSo what I'm gonna do is\nI'm just gonna copy this.\n\n358\n00:18:34.700 --> 00:18:39.190\nBut just a quick aside,\nthe self.__class.first this will go and\n\n359\n00:18:39.190 --> 00:18:40.910\nlook at the class level variable.\n\n360\n00:18:40.910 --> 00:18:43.330\nThis first equals outside\nof the dunder in it.\n\n361\n00:18:43.330 --> 00:18:46.550\nInstead of anything that\naccidentally overrides.\n\n362\n00:18:46.550 --> 00:18:47.730\nSo keep that in mind.\n\n363\n00:18:47.730 --> 00:18:49.080\nSo we're gonna grab that.\n\n364\n00:18:50.420 --> 00:18:53.010\nThat is the only VIN command\nthat I can use effectively and\n\n365\n00:18:53.010 --> 00:18:54.340\nthat is yank and paste.\n\n366\n00:18:56.180 --> 00:18:59.460\nSo int thunder and\nit returns the exact same thing.\n\n367\n00:18:59.460 --> 00:19:03.350\nNow I've just done this really I\nshould probably implement int and\n\n368\n00:19:03.350 --> 00:19:06.280\nthen have index just return\nwhatever the value of int is.\n\n369\n00:19:07.300 --> 00:19:10.050\nIt's recommended in the python\ndocumentation to implement these\n\n370\n00:19:10.050 --> 00:19:12.010\ntogether, right.\n\n371\n00:19:12.010 --> 00:19:15.300\nOnly if you intend for\nindex to be meaningful.\n\n372\n00:19:15.300 --> 00:19:17.670\nIf you only want\nthe integer representation,\n\n373\n00:19:17.670 --> 00:19:18.960\nyou don't have to implement index.\n\n374\n00:19:23.631 --> 00:19:25.150\nJust put them together, right?\n\n375\n00:19:25.150 --> 00:19:27.140\nIf you can get an index representation,\n\n376\n00:19:27.140 --> 00:19:30.790\nsomeone might try to use it to\ngrab something out of a list.\n\n377\n00:19:30.790 --> 00:19:31.950\nSo do keep that in mind.\n\n378\n00:19:31.950 --> 00:19:33.990\nBut now we've got it all set up, Daniel.\n\n379\n00:19:35.610 --> 00:19:36.830\nAnd hopefully it works.\n\n380\n00:19:36.830 --> 00:19:39.500\nFire away.\n\n381\n00:19:39.500 --> 00:19:40.690\nSo, Python.\n\n382\n00:19:40.690 --> 00:19:42.065\nPython, Python.\n\n383\n00:19:42.065 --> 00:19:43.530\n[LAUGH] There he is.\n\n384\n00:19:43.530 --> 00:19:45.340\nWe all got hecklers in our group, right?\n\n385\n00:19:45.340 --> 00:19:46.910\nI like to keep you young.\n\n386\n00:19:46.910 --> 00:19:48.890\nSo there's our letters right?\n\n387\n00:19:48.890 --> 00:19:52.170\nAnd then here's a, here's b, and here's p.\n\n388\n00:19:52.170 --> 00:19:54.630\nWell, what if I want letters a?\n\n389\n00:19:55.650 --> 00:19:56.660\nIt actually gives me the letter a.\n\n390\n00:19:56.660 --> 00:19:59.190\nWhat if I want letters p?\n\n391\n00:19:59.190 --> 00:20:01.310\nIt gives me the letter p.\n\n392\n00:20:01.310 --> 00:20:05.080\nWhat if I want letters a to p?\n\n393\n00:20:05.080 --> 00:20:08.420\nIt gives me everything up to p,\nnot including p.\n\n394\n00:20:08.420 --> 00:20:11.810\nBut I've done that\nbecause of dunder index.\n\n395\n00:20:13.000 --> 00:20:18.188\nAnd if I didn't have\nthese saved in variables,\n\n396\n00:20:18.188 --> 00:20:22.856\nI could go character Let's say d, colon,\n\n397\n00:20:22.856 --> 00:20:27.140\nto character, k, and boom defghi.\n\n398\n00:20:27.140 --> 00:20:31.750\nI find it intresting that,\nwhen you do the index,\n\n399\n00:20:31.750 --> 00:20:35.840\nit includes the first letter but\nnot the last one, very interesting.\n\n400\n00:20:35.840 --> 00:20:38.490\nYeah and that's actually\na pretty common pattern for\n\n401\n00:20:38.490 --> 00:20:41.160\nlanguages that include\nthe slicing capability.\n\n402\n00:20:41.160 --> 00:20:45.670\nFull disclosure, my first experience\nwith this was in the context of Python.\n\n403\n00:20:45.670 --> 00:20:48.610\nSo, include the left side,\nforget the right.\n\n404\n00:20:48.610 --> 00:20:49.520\nForget the right.\n\n405\n00:20:49.520 --> 00:20:54.170\nBut now, if I go to read this I don't\nhave to look what is d is index three,\n\n406\n00:20:54.170 --> 00:20:59.240\nk is, I don't know,\nindex Let's say 12, I don't know.\n\n407\n00:20:59.240 --> 00:21:00.750\nThat's what I thought.\n\n408\n00:21:00.750 --> 00:21:03.970\nThat's what I assume,\none, two, three, count.\n\n409\n00:21:03.970 --> 00:21:09.260\nBut now if I have this character class\nthat already kinda self indexes itself and\n\n410\n00:21:09.260 --> 00:21:11.030\nyou go, that's what I got.\n\n411\n00:21:11.030 --> 00:21:12.260\nThere it is.\n\n412\n00:21:12.260 --> 00:21:18.695\nAnd it can go even further and say, well,\nwhat if letters is now What it was plus?\n\n413\n00:21:22.028 --> 00:21:23.889\nAbcdef, you know what?\n\n414\n00:21:23.889 --> 00:21:26.090\nlLtters.lower.\n\n415\n00:21:26.090 --> 00:21:28.990\n[LAUGH] Let's not work too hard about it.\n\n416\n00:21:31.447 --> 00:21:32.800\nSo now I have all of them.\n\n417\n00:21:32.800 --> 00:21:34.610\nAnd this is actually how they're arranged.\n\n418\n00:21:36.450 --> 00:21:39.310\nLet's see if it still works,\nand if it doesn't.\n\n419\n00:21:39.310 --> 00:21:40.408\nWell, I am just gonna run.\n\n420\n00:21:40.408 --> 00:21:44.790\n[LAUGH] So, if I run from lowercase a,\nwhich is different,\n\n421\n00:21:47.720 --> 00:21:52.486\ncharater to lowercase j,\nj will not be included.\n\n422\n00:21:52.486 --> 00:21:53.759\nIt will.\n\n423\n00:21:53.759 --> 00:21:58.540\n[CROSSTALK]\nThere right?\n\n424\n00:21:58.540 --> 00:22:01.640\nOkay, and I think I know what happened.\n\n425\n00:22:01.640 --> 00:22:05.290\nI put these together, and\n\n426\n00:22:05.290 --> 00:22:08.310\nthese actually have some special\ncharacters in between them.\n\n427\n00:22:08.310 --> 00:22:10.190\nDo they really?\nYeah, some wierdness there.\n\n428\n00:22:10.190 --> 00:22:11.390\nWe're just not seeing it.\n\n429\n00:22:11.390 --> 00:22:12.030\nYeah.\nYep.\n\n430\n00:22:12.030 --> 00:22:14.030\nWell, I constructed this, but\n\n431\n00:22:14.030 --> 00:22:16.558\nI think in the actual lookup table\nthere's some Special characters.\n\n432\n00:22:16.558 --> 00:22:19.710\n[CROSSTALK] There are about 20 of them,\ntypically.\n\n433\n00:22:19.710 --> 00:22:22.200\nI mean the ASCII table I see.\n\n434\n00:22:22.200 --> 00:22:26.660\nYeah, and so if you went and you chain,\nyou'll have to add a little extra logic.\n\n435\n00:22:26.660 --> 00:22:28.700\nAnd maybe that will be\nan interesting exercise.\n\n436\n00:22:28.700 --> 00:22:32.520\nExercise offset by the number of\ncharacters, that seperate the three.\n\n437\n00:22:32.520 --> 00:22:35.270\nYeah, if it's in this range,\nthen go ahead and do this.\n\n438\n00:22:35.270 --> 00:22:38.940\nIf it's outside of this range,\nthen do this other thing.\n\n439\n00:22:38.940 --> 00:22:42.490\nSo that would be an interesting exercise,\nmaybe to practice, to really cement it,\n\n440\n00:22:42.490 --> 00:22:44.620\nto see if you can get it to index.\n\n441\n00:22:44.620 --> 00:22:46.680\nAlso lowercase letters.\n\n442\n00:22:46.680 --> 00:22:50.470\nNow we can do them separately,\nuppercase, lowercase, but\n\n443\n00:22:50.470 --> 00:22:52.190\nsquish them together,\nhow do you look those up?\n\n444\n00:22:52.190 --> 00:22:55.210\nCould you also have maybe like\nkinda how you made the index with\n\n445\n00:22:55.210 --> 00:22:57.280\nthe uppercase letters, make another\nindex for the lowercase letters.\n\n446\n00:22:57.280 --> 00:23:00.730\nThen make an index that\nbasically holds both indexes and\n\n447\n00:23:00.730 --> 00:23:02.970\nthen bypass that whole problem as well?\n\n448\n00:23:02.970 --> 00:23:06.250\nThat would be a valid\nsolution to this problem.\n\n449\n00:23:06.250 --> 00:23:10.270\nSo you would have some internal checks and\ngo wait a minute.\n\n450\n00:23:10.270 --> 00:23:13.060\nI need to know I would\nfind out those numbers.\n\n451\n00:23:13.060 --> 00:23:15.280\nYeah.\nAnd say, is it between these numbers?\n\n452\n00:23:15.280 --> 00:23:16.770\nAnd I need to use the uppercase index.\n\n453\n00:23:16.770 --> 00:23:21.020\nIf it's between these numbers I\nneed to use the lowercase index.\n\n454\n00:23:21.020 --> 00:23:23.280\nAnd then you just use it and\nthat's what it is.\n\n455\n00:23:23.280 --> 00:23:26.250\nYeah, that would be a valid solution, yes.\n\n456\n00:23:26.250 --> 00:23:28.870\nBut that is truncate an index, right?\n\n457\n00:23:28.870 --> 00:23:33.770\nMaybe not quite the same, but they do\nhave to do with numeric representations\n\n458\n00:23:33.770 --> 00:23:35.620\nof respective custom objects.\n\n459\n00:23:35.620 --> 00:23:38.120\nWell Justin, I can definitely see\nwhere that could come in handy.\n\n460\n00:23:38.120 --> 00:23:41.990\nEspecially if it's a large\nindex where I'm not\n\n461\n00:23:41.990 --> 00:23:47.050\nreally readily available in my\nmind of what index is that again?\n\n462\n00:23:47.050 --> 00:23:50.790\nCuz it's just too large for me to be\nable to handle that kind of information.\n\n463\n00:23:50.790 --> 00:23:55.340\nPut it in this kind of format, good\ngracious, let the program do the work for\n\n464\n00:23:55.340 --> 00:23:57.610\nyou, let Python handle the heavy lifting.\n\n465\n00:23:57.610 --> 00:24:00.710\nWe said [INAUDIBLE].\n\n466\n00:24:00.710 --> 00:24:01.710\nJustin thanks for joining us today.\n\n467\n00:24:01.710 --> 00:24:04.770\nA lot of cool stuff out of you, and\na lot of cool stuff out of you.\n\n468\n00:24:04.770 --> 00:24:05.930\nThanks for watching everyone.\n\n469\n00:24:05.930 --> 00:24:08.177\nIt is time for us to sign off for ITPROTV.\n\n470\n00:24:08.177 --> 00:24:09.461\nI've been your host Daniel Lowrie.\n\n471\n00:24:09.461 --> 00:24:10.391\nAnd I'm Justin Dennison.\n\n472\n00:24:10.391 --> 00:24:12.507\nAnd we'll see you next time.\n\n473\n00:24:12.507 --> 00:24:16.371\n[MUSIC]\n\n",
          "vimeoId": "253818381"
        },
        {
          "description": "In this episode, Justin and Daniel continue investigating the Python data model by exploring how to represent a numeric type as a complex number utilizing the \\_\\_complex\\_\\_ method.",
          "length": "1097",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-14-1-complex_number-013018-PGM.00_18_07_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-14-1-complex_number-013018-PGM.00_18_07_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-4-14-1-complex_number-013018-PGM.00_18_07_12.Still001-sm.jpg",
          "title": "Complex Number",
          "transcript": "WEBVTT\n\n1\n00:00:00.265 --> 00:00:10.265\n[MUSIC]\n\n2\n00:00:12.574 --> 00:00:14.345\n&gt;&gt; All right, greetings everyone, and\n\n3\n00:00:14.345 --> 00:00:16.568\nwelcome to another great\nepisode of DevProTV.\n\n4\n00:00:16.568 --> 00:00:19.229\nI'm your host, Daniel Lowrie,\nand in today's episode, well,\n\n5\n00:00:19.229 --> 00:00:21.429\nwe're back with more in our\nPython data model series.\n\n6\n00:00:21.429 --> 00:00:25.191\nJoining us in the studio, lending us his\nexpertise for us, our good friend and\n\n7\n00:00:25.191 --> 00:00:26.568\nmentor, Justin Dennison.\n\n8\n00:00:26.568 --> 00:00:28.089\nJustin, welcome back to the show man.\n\n9\n00:00:28.089 --> 00:00:29.913\nHow is it going today.\n&gt;&gt; It's going fantastic Daniel, and\n\n10\n00:00:29.913 --> 00:00:32.338\nhow are you today?\n&gt;&gt; I am wonderful, fantastic.\n\n11\n00:00:32.338 --> 00:00:36.270\nI am actually ready to see what you got\nin store for us in today's episode.\n\n12\n00:00:36.270 --> 00:00:36.990\n&gt;&gt; Well hopefully,\n\n13\n00:00:36.990 --> 00:00:41.490\nyou do decide that it is a treat and\nwell, in the previous episodes,\n\n14\n00:00:41.490 --> 00:00:44.415\nI've said we're gonna try to reduce\nthe math as much as possible.\n\n15\n00:00:44.415 --> 00:00:46.882\nEven though we're doing numeric types,\nwell math hard.\n\n16\n00:00:46.882 --> 00:00:50.787\nMath is hard, and I'm not sure that\nI can keep that promise in this\n\n17\n00:00:50.787 --> 00:00:51.980\nepisode.\n&gt;&gt; No.\n\n18\n00:00:51.980 --> 00:00:54.978\n[LAUGH]\n&gt;&gt; So I went scouring, if you don't know,\n\n19\n00:00:54.978 --> 00:00:58.500\nmy background is actually\nphysical sciences and math.\n\n20\n00:00:58.500 --> 00:01:00.410\nAnd a little bit of engineering.\n\n21\n00:01:00.410 --> 00:01:03.520\nSo I was like yeah that's a good example.\n\n22\n00:01:03.520 --> 00:01:05.370\nExcept it's really specific to my\n\n23\n00:01:05.370 --> 00:01:06.150\nbackground.\n&gt;&gt; [LAUGH]\n\n24\n00:01:06.150 --> 00:01:07.670\n&gt;&gt; There's like a bias there.\n\n25\n00:01:07.670 --> 00:01:09.780\nAnd it's about complex numbers.\n\n26\n00:01:09.780 --> 00:01:13.050\nNow complex numbers in and of themselves\nare a horrible thing that you probably\n\n27\n00:01:13.050 --> 00:01:16.190\nlearned in Algebra 2, sometime during\nhigh school that didn't make any sense,\n\n28\n00:01:16.190 --> 00:01:18.270\nbecause people were like\nit has an imaginary part.\n\n29\n00:01:18.270 --> 00:01:20.320\nAnd you're like, but\nI see it right there and\n\n30\n00:01:20.320 --> 00:01:23.280\nthen you go, how's it imaginary\nif I can see it, and we use it,\n\n31\n00:01:23.280 --> 00:01:27.510\nand terminology is a little\ninteresting there around this topic.\n\n32\n00:01:27.510 --> 00:01:32.320\nBut, python does support complex\nnumbers where we have a real and for\n\n33\n00:01:32.320 --> 00:01:37.760\nlack of a better term as much as it\npains me to say, an imaginary part.\n\n34\n00:01:37.760 --> 00:01:38.880\nAlright.\n\n35\n00:01:38.880 --> 00:01:40.490\nSo, that is what we have.\n\n36\n00:01:40.490 --> 00:01:42.170\nInterestingly enough,\n\n37\n00:01:42.170 --> 00:01:47.650\nwhat if I had a quality that may\nhave a complex representation?\n\n38\n00:01:47.650 --> 00:01:48.370\nRight?\n\n39\n00:01:48.370 --> 00:01:50.620\nIt has a real and an imaginary part.\n\n40\n00:01:50.620 --> 00:01:52.738\nNow let me set the background.\n\n41\n00:01:52.738 --> 00:01:53.660\nIf you're like,\n\n42\n00:01:53.660 --> 00:01:57.580\nhow can I actually have a representation\nlike that if it has an imaginary part?\n\n43\n00:01:59.020 --> 00:02:05.510\nWell, there is one and we'll see I'm\ngonna ask for forgiveness at front.\n\n44\n00:02:05.510 --> 00:02:07.540\nIt is very much physical science related.\n\n45\n00:02:07.540 --> 00:02:11.530\nIt has to do with a AC\nvoltage being imaginary.\n\n46\n00:02:11.530 --> 00:02:16.400\nThere's an imaginary part that helps\nkeep track of the respective components.\n\n47\n00:02:16.400 --> 00:02:19.570\nEither resistance, or\nthe actual voltage part.\n\n48\n00:02:19.570 --> 00:02:26.140\nAnd then the corresponding,\nopposing of that forward flow, so.\n\n49\n00:02:26.140 --> 00:02:28.075\nWe're just gonna use it\nto see how Python works.\n\n50\n00:02:28.075 --> 00:02:30.130\n[LAUGH]\n&gt;&gt; I don't expect you to have any thing\n\n51\n00:02:30.130 --> 00:02:32.700\nabout electronics theory\nafter this episode.\n\n52\n00:02:32.700 --> 00:02:35.380\nSo I'm not over promising on that.\n&gt;&gt; So is this anything that we're gonna be\n\n53\n00:02:35.380 --> 00:02:40.175\nusing on a regular type of basis,\nor is this you might run into this.\n\n54\n00:02:40.175 --> 00:02:43.195\nSo for completeness sake,\nI need to let you know how this works.\n\n55\n00:02:43.195 --> 00:02:44.635\n&gt;&gt; It is very much that second one.\n\n56\n00:02:44.635 --> 00:02:47.705\nThis is for completeness sake to let\nyou know that it is available to you.\n\n57\n00:02:47.705 --> 00:02:49.135\nMaybe your industry actually does it.\n\n58\n00:02:49.135 --> 00:02:53.515\nIf you do a lot of signals processing,\nwhich I know some people who, I have IoT\n\n59\n00:02:53.515 --> 00:02:58.245\ndevices, I'm controlling motors,\nI need to collect data.\n\n60\n00:02:58.245 --> 00:03:00.355\nMaybe you work in the physical sciences,\nand\n\n61\n00:03:00.355 --> 00:03:03.740\nyou're writing Python programs that\ncollect individual chunks of data.\n\n62\n00:03:03.740 --> 00:03:07.173\nYou might need to know about this, because\nthey have a real and an imaginary part.\n\n63\n00:03:07.173 --> 00:03:09.972\nI would,\nI'm totally making this number up.\n\n64\n00:03:09.972 --> 00:03:13.905\nI would say 99% of the time\nthat's not true, for\n\n65\n00:03:13.905 --> 00:03:18.130\npeople who are kind of\nplaying around on Python.\n\n66\n00:03:18.130 --> 00:03:20.070\nNow, it is big in\nthe scientific community and\n\n67\n00:03:20.070 --> 00:03:22.736\nthe data science community,\nso it just might be there.\n\n68\n00:03:22.736 --> 00:03:23.900\nBut it's more for\n\n69\n00:03:23.900 --> 00:03:28.980\nthe sake of completeness not the sake of,\nhere's a really interesting example and\n\n70\n00:03:28.980 --> 00:03:33.310\na complete example, necessarily in\nthe context of using complex numbers.\n\n71\n00:03:33.310 --> 00:03:35.790\nNow, that was a lot of preface.\n\n72\n00:03:35.790 --> 00:03:36.730\nLet's go ahead and get started.\n\n73\n00:03:36.730 --> 00:03:38.895\nSo, let's take a look at the screen here.\n\n74\n00:03:38.895 --> 00:03:42.350\nAnd there's not a lot to explore but\nI always like to exploring.\n\n75\n00:03:42.350 --> 00:03:44.490\nIf we type complex like so.\n\n76\n00:03:44.490 --> 00:03:46.580\nIt is just like an ant or float.\n\n77\n00:03:46.580 --> 00:03:52.190\nIf I say complex (1)\nthen I get 1 plus the 0j.\n\n78\n00:03:52.190 --> 00:03:56.930\nLowercase j, also different\nnotation because of sciences.\n\n79\n00:03:56.930 --> 00:03:59.670\nLowercase j is the complex part.\n\n80\n00:03:59.670 --> 00:04:05.000\nThis is one in the real side, and\nnone in the complex or the imaginary part.\n\n81\n00:04:06.110 --> 00:04:13.740\nIf I say complex(1, 1), then I get one\npart's real and one part's imaginary.\n\n82\n00:04:14.840 --> 00:04:16.750\nThat is pretty much all we need to know.\n\n83\n00:04:17.960 --> 00:04:23.938\nWe can add complex numbers,\nand say complex (1) + complex\n\n84\n00:04:23.938 --> 00:04:29.280\n(2,3) and I get (3+3).\n\n85\n00:04:29.280 --> 00:04:31.940\nSo I just added the real part,\nadded the imaginary part.\n\n86\n00:04:31.940 --> 00:04:35.378\nAnd for\nthe most part that's all we need to know.\n\n87\n00:04:35.378 --> 00:04:40.820\nNow I'm gonna start with a very\ntotally off base example,\n\n88\n00:04:40.820 --> 00:04:43.820\njust to show you how we can get this.\n\n89\n00:04:43.820 --> 00:04:48.590\nBecause when I'm saying complex of one,\nthat's taking one integer and it's\n\n90\n00:04:48.590 --> 00:04:52.890\ndetermining hey, you haven't indicated\nthat it's imaginary in any capacity.\n\n91\n00:04:52.890 --> 00:04:53.470\n&gt;&gt; You're just saying,\n\n92\n00:04:53.470 --> 00:04:54.880\nit's just a regular number.\n&gt;&gt; Yeah.\n\n93\n00:04:54.880 --> 00:04:57.526\n&gt;&gt; So, there's a real aspect of that and\n\n94\n00:04:57.526 --> 00:04:59.740\nthe unreal aspects.\n&gt;&gt; Exactly,\n\n95\n00:04:59.740 --> 00:05:05.181\nthat's exactly what it's doing, but\nwe have the ability to manage that logic.\n\n96\n00:05:05.181 --> 00:05:10.562\nSo let's get out of here and let's start\n\n97\n00:05:10.562 --> 00:05:16.590\nmaking our stuff, complex_numbers .py.\n\n98\n00:05:16.590 --> 00:05:22.035\nSo the first one here is,\nwell, let's call it a Point.\n\n99\n00:05:22.035 --> 00:05:26.820\nNo, let's change it up since\nthe math has been forgone.\n\n100\n00:05:26.820 --> 00:05:29.110\nThe math promise from previous episodes.\n\n101\n00:05:29.110 --> 00:05:33.760\nLet's call it,\nkind of more specifically, a Vector2D.\n\n102\n00:05:33.760 --> 00:05:34.715\nSo it's a two dimensional vector.\n\n103\n00:05:36.874 --> 00:05:38.960\nFor those of you who are like,\nwhat's a vector?\n\n104\n00:05:38.960 --> 00:05:42.250\nIt's a point, from the previous episodes.\n\n105\n00:05:42.250 --> 00:05:45.060\nFrom a physical quantity aspect,\nthat's not actually true.\n\n106\n00:05:45.060 --> 00:05:46.618\nPoints and vectors are different things.\n\n107\n00:05:46.618 --> 00:05:51.507\nBut you'll see the class itself\nbehaves pretty much exactly the same.\n\n108\n00:05:51.507 --> 00:05:59.541\nSo we're gonna say self.x = x and\nself.y = y.\n\n109\n00:05:59.541 --> 00:06:05.391\nNow, if I had some vector quantity,\n\n110\n00:06:05.391 --> 00:06:08.430\n(1,1) okay.\n\n111\n00:06:08.430 --> 00:06:13.108\nThere maybe a time where I need to\nrepresent this on the complex plane.\n\n112\n00:06:13.108 --> 00:06:17.795\nAgain, that's one where and I say it,\nand it's second nature to me.\n\n113\n00:06:17.795 --> 00:06:18.434\n&gt;&gt; [LAUGH]\n\n114\n00:06:18.434 --> 00:06:19.434\n&gt;&gt; And I know that most people\n\n115\n00:06:19.434 --> 00:06:21.460\nare like what is he talking about.\n\n116\n00:06:21.460 --> 00:06:24.080\nBut we need to represent\nthis as a complex number.\n\n117\n00:06:24.080 --> 00:06:26.540\nwhere x is just the real part.\n\n118\n00:06:26.540 --> 00:06:28.620\nAnd then y would be the imaginary part.\n\n119\n00:06:28.620 --> 00:06:32.680\nOr maybe you need it for a conversion for\nkeeping track of something.\n\n120\n00:06:32.680 --> 00:06:37.360\nIf I put __complex,\nthat's essentially what's happening.\n\n121\n00:06:39.220 --> 00:06:43.380\nThis is how we construct\na complex number from this.\n\n122\n00:06:43.380 --> 00:06:48.930\nNow, unlike previous examples,\nI am not going to return\n\n123\n00:06:48.930 --> 00:06:52.880\na vector 2D object from\nthe double underscore complex.\n\n124\n00:06:52.880 --> 00:06:55.230\nThis is kind of like a how do I change it.\n\n125\n00:06:55.230 --> 00:06:59.420\nNow, we've seen this with float and\nint to some extent.\n\n126\n00:06:59.420 --> 00:07:01.300\nWe've seen you can do both ways.\n\n127\n00:07:01.300 --> 00:07:06.540\nBut for complex numbers, it probably makes\nthe most sense to maintain complex number\n\n128\n00:07:06.540 --> 00:07:10.270\nstuff, arithmetic, multiplication,\nthose type of things.\n\n129\n00:07:10.270 --> 00:07:12.382\nArithmetic, I think,\ndoes include multiplication for\n\n130\n00:07:12.382 --> 00:07:13.617\nthose of you who are like, what?\n\n131\n00:07:13.617 --> 00:07:15.544\nSo, do keep that in mind.\n\n132\n00:07:15.544 --> 00:07:19.905\nAll we're gonna do is make a call to\ncomplex and say, self.x is the first,\n\n133\n00:07:19.905 --> 00:07:22.620\nthe real part, and\nself.y is the other part.\n\n134\n00:07:24.420 --> 00:07:25.648\nSo I have this vector.\n\n135\n00:07:25.648 --> 00:07:29.621\nAnd python3-i complex_numbers, and\n\n136\n00:07:29.621 --> 00:07:36.440\nI forgot to type Vector2D on the bottom\nof that, so we've to go fix it.\n\n137\n00:07:38.870 --> 00:07:41.751\n2D, there we go, we're fixed.\n\n138\n00:07:41.751 --> 00:07:46.327\nAnd boom, so now I have v,\nI didn't write a reaper or\n\n139\n00:07:46.327 --> 00:07:50.890\na reper method,\nwe're just gonna leave that on.\n\n140\n00:07:50.890 --> 00:07:53.900\nBut if I would say, complex(v),\nI now get (1 + 1j).\n\n141\n00:07:53.900 --> 00:07:57.920\nI've changed the y into the complex part,\nthe x is the real part.\n\n142\n00:07:59.160 --> 00:08:01.280\nThat's all we need to do.\n\n143\n00:08:01.280 --> 00:08:08.210\nBut to provide some kind of impetus\nof the way this would occur, I\n\n144\n00:08:08.210 --> 00:08:13.410\nam going to show you one with voltage that\nthough over simplifies certain aspects.\n\n145\n00:08:13.410 --> 00:08:17.670\nAnd what this is, is this is an object\nthat would represent the voltage quantity\n\n146\n00:08:18.820 --> 00:08:21.540\nin a circuit that has alternating current.\n\n147\n00:08:21.540 --> 00:08:23.120\nThe current is changing.\n\n148\n00:08:23.120 --> 00:08:26.230\nJust like if you plugged into the wall for\nmost places.\n\n149\n00:08:27.650 --> 00:08:36.730\nSo, let's go ahead and see probably a more\napt example for this complex quantity.\n\n150\n00:08:36.730 --> 00:08:39.705\nWe're gonna create Voltage, and\nit has a dunder init function.\n\n151\n00:08:39.705 --> 00:08:45.310\nAnd the base_voltage is like,\nwhat it would be if there was nothing.\n\n152\n00:08:45.310 --> 00:08:48.000\nThat's like, it is on or off.\n\n153\n00:08:48.000 --> 00:08:48.500\nThat is it.\n\n154\n00:08:50.360 --> 00:08:53.710\nAnd then, frequency is how fast.\n\n155\n00:08:53.710 --> 00:08:56.370\nIn the United States, that is 60 hertz.\n\n156\n00:08:56.370 --> 00:08:57.450\nHow fast is it switching.\n\n157\n00:08:57.450 --> 00:08:59.690\n60 times a second.\n\n158\n00:08:59.690 --> 00:09:03.860\nIn the UK and a couple other parts\nof the world, I think it's 50 hertz.\n\n159\n00:09:03.860 --> 00:09:05.985\nSo that does make a difference.\n\n160\n00:09:05.985 --> 00:09:13.590\nSo we're gonna say\nbase_voltage = base_voltage,\n\n161\n00:09:13.590 --> 00:09:18.715\nand I'm gonna do a quick calculation\n\n162\n00:09:18.715 --> 00:09:23.343\nhere and say afrequency like so,\n\n163\n00:09:23.343 --> 00:09:28.152\nand that's 2 * pi * frequency.\n\n164\n00:09:28.152 --> 00:09:33.496\nNow in order to make that available to me,\nI'm gonna say from math import pi,\n\n165\n00:09:33.496 --> 00:09:37.710\nand while I'm at it,\nI'm gonna bring in sin and cosine.\n\n166\n00:09:37.710 --> 00:09:40.959\nYou're like, wow, you really went off the\nrails on this math thing on this episode.\n\n167\n00:09:40.959 --> 00:09:43.861\nBut that's just the nature of the game.\n\n168\n00:09:43.861 --> 00:09:47.390\nSo what I've changed this into,\nis what's called angular frequency.\n\n169\n00:09:47.390 --> 00:09:49.640\nSo it actually has the two pi\nkind of bundled up into it.\n\n170\n00:09:51.490 --> 00:09:53.189\nNow why would I care about this?\n\n171\n00:09:54.420 --> 00:09:58.765\nWell it just so\nhappens that because of how this works,\n\n172\n00:09:58.765 --> 00:10:02.832\nthen I can get a complex_number\nrepresentation.\n\n173\n00:10:02.832 --> 00:10:08.664\nIf I have a voltage and a frequency,\nand technically I need a time.\n\n174\n00:10:08.664 --> 00:10:10.350\nWe're gonna make an assumption.\n\n175\n00:10:10.350 --> 00:10:12.430\nIf I ask just for\nthe complex representation,\n\n176\n00:10:12.430 --> 00:10:15.840\nI'm gonna ask for at time = 1.\n\n177\n00:10:15.840 --> 00:10:16.610\nAt one second.\n\n178\n00:10:18.170 --> 00:10:22.810\nSo there is an assumption, maybe not\nthe greatest use of the dander complex,\n\n179\n00:10:23.970 --> 00:10:26.610\nbut I think it's at one seconds,\nthat is like\n\n180\n00:10:26.610 --> 00:10:28.090\nwhat happens one seconds later.\n&gt;&gt; RIght\n\n181\n00:10:28.090 --> 00:10:29.680\n&gt;&gt; You may find yourself asking that\n\n182\n00:10:29.680 --> 00:10:33.670\nquestion from time to time,\nif you're kind of involved in this.\n\n183\n00:10:33.670 --> 00:10:35.260\nAs I said, I do wanna reiterate,\n\n184\n00:10:35.260 --> 00:10:40.250\nthis is not the most complete\ntreatment of this topic, but\n\n185\n00:10:40.250 --> 00:10:45.730\nthis actually uses complex_numbers for\na meaningful physical quantity.\n\n186\n00:10:45.730 --> 00:10:49.595\nSo the real part is the cosign of\n\n187\n00:10:49.595 --> 00:10:54.830\nself.afrequency, and\nthere's a time in there.\n\n188\n00:10:54.830 --> 00:10:59.794\nIt's at time zero plus, or\nexcuse me, *self.base_voltage.\n\n189\n00:11:00.990 --> 00:11:01.490\nAnd then.\n\n190\n00:11:03.598 --> 00:11:07.023\nThe imaginary part is\nthe sin of the frequency.\n\n191\n00:11:10.068 --> 00:11:14.510\nTimes the base_voltage.\n\n192\n00:11:15.530 --> 00:11:20.100\nNow, I'm just gonna return complex with\nthe real part and the imaginary part.\n\n193\n00:11:22.480 --> 00:11:25.597\nSo, there we go, and\nnow if I have voltage.\n\n194\n00:11:29.972 --> 00:11:34.170\nLike so, complex_numbers, v = Voltage,\n\n195\n00:11:34.170 --> 00:11:38.520\nit is (120 volts, 60 hertz).\n\n196\n00:11:38.520 --> 00:11:41.858\nThat is standard power,\ninside of the United States.\n\n197\n00:11:41.858 --> 00:11:45.216\nAs well as some other places, but\nI know for a fact that it's United States.\n\n198\n00:11:45.216 --> 00:11:48.950\nSometimes it's 110, 120.\n\n199\n00:11:48.950 --> 00:11:50.940\nWe'll go with 120.\n\n200\n00:11:50.940 --> 00:11:55.147\nSo if I say, what is the complex v?\n\n201\n00:11:55.147 --> 00:11:57.167\nAnd it's 120 volts.\n\n202\n00:11:57.167 --> 00:12:01.630\nAnd notice this E minus and -12.\n\n203\n00:12:01.630 --> 00:12:04.120\nIn the physicist terms, that's a 0,\n\n204\n00:12:04.120 --> 00:12:09.489\nthat's times 10 to the negative power\n12 which is 1 over 10 to the power 12.\n\n205\n00:12:09.489 --> 00:12:14.865\nOr 1 over 1 trillion, we're gonna go 0.\n&gt;&gt; [LAUGH] Good call that 0.\n\n206\n00:12:14.865 --> 00:12:17.790\n&gt;&gt; [INAUDIBLE] Yeah, so this is,\n\n207\n00:12:17.790 --> 00:12:20.770\nit means it is all real.\n\n208\n00:12:20.770 --> 00:12:25.730\nEverything there, this is just like\nthere was no actual oscillations to it.\n\n209\n00:12:26.870 --> 00:12:30.540\nIf we do make a change and\nthat's the complex representation, but\n\n210\n00:12:30.540 --> 00:12:34.150\nwhat if we add another one that actually\ngives a similar complex treatment.\n\n211\n00:12:34.150 --> 00:12:38.870\nIt's not the dunder complex but\nthis is one of those little added extras.\n\n212\n00:12:38.870 --> 00:12:42.810\nIf we come here and let me bring\nthis down cuz that bothers me.\n\n213\n00:12:44.560 --> 00:12:50.180\nBut if I say, def at(self, t=0).\n\n214\n00:12:50.180 --> 00:12:55.220\nSo I'm asking the voltage at some time,\nthen what do you get?\n\n215\n00:12:57.250 --> 00:13:00.380\nNow this is a little repetitious.\n\n216\n00:13:00.380 --> 00:13:03.545\nI'm gonna default to time = 0.\n\n217\n00:13:06.053 --> 00:13:10.556\nAnd now what we're gonna do is say,\n\n218\n00:13:10.556 --> 00:13:19.277\nthe real = cos(self.afrequency\n* t) * self.base_voltage.\n\n219\n00:13:22.320 --> 00:13:26.948\nAnd the imaginary part is,\nwell just the sign of that and\n\n220\n00:13:26.948 --> 00:13:29.123\nI'm lazy.\n&gt;&gt; [LAUGH]\n\n221\n00:13:30.203 --> 00:13:31.062\n&gt;&gt; Just like so.\n\n222\n00:13:31.062 --> 00:13:34.812\nSo I am gonna return and\nuse tabs, I forgot.\n\n223\n00:13:36.403 --> 00:13:38.702\nThe complex with the real and\nthe imaginary part.\n\n224\n00:13:38.702 --> 00:13:40.059\nJust like that.\n\n225\n00:13:40.059 --> 00:13:43.061\nSo now I can say, given this object,\n\n226\n00:13:43.061 --> 00:13:48.210\nwhat is the voltage look like real and\nimaginary parts at some specific time.\n\n227\n00:13:48.210 --> 00:13:51.160\nAnd now I can use this as\na numeric evaluation tool.\n\n228\n00:13:53.190 --> 00:13:58.367\nAnd complex numbers, and\nI have something wrong here.\n\n229\n00:13:58.367 --> 00:14:02.150\nI accidentally used tabs, that'll get you.\n\n230\n00:14:02.150 --> 00:14:03.760\nSometimes vim is really handy.\n\n231\n00:14:03.760 --> 00:14:06.957\nAnd sometimes vim is all kinds of not fun.\n\n232\n00:14:09.976 --> 00:14:11.850\nAll right, there we go.\n\n233\n00:14:13.260 --> 00:14:14.400\nLet's try that again.\n\n234\n00:14:14.400 --> 00:14:18.820\nThere we go.\nSo v is Voltage, and (120, 60 hertz).\n\n235\n00:14:20.170 --> 00:14:25.140\nAnd now, let's say that we just have\nsome one, two, three, four, five,\n\n236\n00:14:25.140 --> 00:14:27.940\nsix, seven,\nsome arbitrary number of seconds, right?\n\n237\n00:14:27.940 --> 00:14:28.688\nA whole range of them.\n\n238\n00:14:28.688 --> 00:14:32.950\nSo, seconds = range (0 to 60).\n\n239\n00:14:32.950 --> 00:14:36.380\nSo over 60 seconds, what happens?\n\n240\n00:14:36.380 --> 00:14:42.740\nWell I'm just going to from pretty print,\nimport pretty print so we can see them.\n\n241\n00:14:42.740 --> 00:14:44.665\nAnd then do something like this,\n\n242\n00:14:44.665 --> 00:14:49.265\n[v.at(That particular second for\ns in seconds].\n\n243\n00:14:51.320 --> 00:14:54.385\nAnd let me come back\nto the beginning here.\n\n244\n00:14:54.385 --> 00:14:57.590\nresults = and\n\n245\n00:14:57.590 --> 00:15:03.640\nthen you print results and there we go.\n\n246\n00:15:03.640 --> 00:15:07.100\nLooks like I have a calculation,\nI know what it is.\n\n247\n00:15:08.310 --> 00:15:11.950\nBecause I don't have fractional times,\nI don't actually see a minute change.\n\n248\n00:15:11.950 --> 00:15:16.420\nSo if I want a fractional time,\nwhat I would have to do is divide.\n\n249\n00:15:16.420 --> 00:15:21.720\nSo, let's actually do that, so\nyou can see that I'm not making stuff up.\n\n250\n00:15:21.720 --> 00:15:22.990\nWell, maybe just a little bit.\n\n251\n00:15:22.990 --> 00:15:29.620\nBut, it's actually move this and now I\nhave increment of 60 in there, all right.\n\n252\n00:15:29.620 --> 00:15:33.630\nSo run that again, one minute,\nnot s, but seconds.\n\n253\n00:15:33.630 --> 00:15:34.710\nSorry.\n\n254\n00:15:34.710 --> 00:15:36.060\nTypo.\n\n255\n00:15:36.060 --> 00:15:39.226\nNow, let's reprint that, and there we go.\n\n256\n00:15:39.226 --> 00:15:43.208\nWe got some, uh-oh we're gonna have to\ndo some live action debugging here,\n\n257\n00:15:43.208 --> 00:15:46.475\nbecause that shouldn't actually\ngive me individual pieces.\n\n258\n00:15:46.475 --> 00:15:48.182\nLet me make sure here.\n\n259\n00:15:48.182 --> 00:15:51.240\nSo seconds, 0 to 60, all right.\n\n260\n00:15:51.240 --> 00:15:54.688\nseconds =\n\n261\n00:15:54.688 --> 00:16:03.118\n[s/len(seconds) for\n\n262\n00:16:03.118 --> 00:16:08.486\ns in seconds].\n\n263\n00:16:08.486 --> 00:16:14.142\nSo now we have seconds, and there's\nindividual pieces, tiny little time steps.\n\n264\n00:16:14.142 --> 00:16:18.000\nAnd actually,\nyou can see a little bit of change.\n\n265\n00:16:18.000 --> 00:16:22.865\nIt's still a very large time step, even\na 60th of a second, because it's moving,\n\n266\n00:16:22.865 --> 00:16:26.680\nit's switching 60 times a second.\n&gt;&gt; That's why some says 13 the other says\n\n267\n00:16:26.680 --> 00:16:27.268\n12.\n&gt;&gt; Yup,\n\n268\n00:16:27.268 --> 00:16:29.750\nand also you'll notice we have a + sign.\n\n269\n00:16:29.750 --> 00:16:33.450\nSo, it's pretty close to the exactly the\nsame value, but they're kind of wiggling.\n\n270\n00:16:33.450 --> 00:16:36.510\nSo here's a + sign and a- sign.\n\n271\n00:16:38.070 --> 00:16:42.480\nEffectively, if this was me,\nI would say these are all 0 and it's 120.\n\n272\n00:16:42.480 --> 00:16:46.870\nBut what happens is this is moving really,\nreally fast back and forth, and so\n\n273\n00:16:46.870 --> 00:16:51.850\nwe would need very small precision\nto see those differences.\n\n274\n00:16:51.850 --> 00:16:57.230\nBut, we could use this now this\nvoltage object to say, at this\n\n275\n00:16:57.230 --> 00:17:00.928\nparticular time what do these values look\nlike, and get a complex representation.\n\n276\n00:17:00.928 --> 00:17:07.060\nNow is it the dunder complex, no but\nit does tie into the dunder complex.\n\n277\n00:17:07.060 --> 00:17:10.820\nBecause if I ask for\nthe complex representation of V,\n\n278\n00:17:10.820 --> 00:17:14.788\nI get a time equals one of\nthose perspective things.\n\n279\n00:17:14.788 --> 00:17:20.715\nSo complex numbers, we kind of run off\nthe rails there, I broke a promise.\n\n280\n00:17:20.715 --> 00:17:21.680\n[LAUGH]\n&gt;&gt; But for\n\n281\n00:17:21.680 --> 00:17:26.720\nthe sake of completeness, you can get\na representation of a custom object.\n\n282\n00:17:26.720 --> 00:17:29.050\nThat is a complex number if you so\n\n283\n00:17:29.050 --> 00:17:30.590\nneed it.\n&gt;&gt; Well Justin,\n\n284\n00:17:30.590 --> 00:17:33.165\nyou may have broken a promise,\nbut you did it for a good cause.\n\n285\n00:17:33.165 --> 00:17:35.040\nCuz it's something we may need to know,\n\n286\n00:17:35.040 --> 00:17:36.960\ndepending on the environment\nthat you're in.\n\n287\n00:17:36.960 --> 00:17:39.300\nSo, we're gonna let it slide this time.\n\n288\n00:17:39.300 --> 00:17:41.370\nThis time, but if you do it again?\n\n289\n00:17:41.370 --> 00:17:44.030\nIt's bats and socks with nickels\nabout the head and shoulders.\n\n290\n00:17:44.030 --> 00:17:45.715\nRight everyone, right?\n\n291\n00:17:45.715 --> 00:17:48.190\n[LAUGH]\n&gt;&gt; I will\n\n292\n00:17:48.190 --> 00:17:51.125\nbe interested to see if you deliver that.\n\n293\n00:17:51.125 --> 00:17:53.010\n[LAUGH]\n&gt;&gt; Well it would be a fun day if we do.\n\n294\n00:17:53.010 --> 00:17:56.040\nThat being said, looks like we're\nat the end of this episode for\n\n295\n00:17:56.040 --> 00:17:58.325\nwhat devolves into the madness spiral.\n\n296\n00:17:58.325 --> 00:18:00.100\n[LAUGH]\n&gt;&gt; Justin thanks for joining us today, and\n\n297\n00:18:00.100 --> 00:18:02.070\nwe thank you good folks out there for\nwatching,\n\n298\n00:18:02.070 --> 00:18:05.390\nbut we're gonna sign off for DevProTV,\nI've been your host Daniel Lowrie.\n\n299\n00:18:05.390 --> 00:18:06.140\n&gt;&gt; And I'm Justin Denison.\n\n300\n00:18:06.140 --> 00:18:07.407\n&gt;&gt; And we'll see you next time.\n\n301\n00:18:07.407 --> 00:18:11.645\n[MUSIC]\n\n",
          "vimeoId": "254035320"
        }
      ],
      "title": "Numbers"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Daniel revisit the idea of looking up information contained within an object. Justin demonstrates the reading of attributes and customizing that behavior using the \\_\\_getattr\\_\\_ method.",
          "length": "1313",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-1-1-getting_attributes-013018-PGM.00_31_57_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-1-1-getting_attributes-013018-PGM.00_31_57_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-1-1-getting_attributes-013018-PGM.00_31_57_04.Still001-sm.jpg",
          "title": "Getting Attributes",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.752 --> 00:00:17.211\nAll right, greetings everyone, and welcome\nback to another great episode of DevProTV.\n\n3\n00:00:17.211 --> 00:00:19.980\nI'm your host Daniel Lowrie,\nand in today's episode,\n\n4\n00:00:19.980 --> 00:00:22.750\nwe're back with more on our\nPython data model series.\n\n5\n00:00:22.750 --> 00:00:27.050\nJoining us in the studio, the Python\nmaster himself, the one Mr. Justin Edison.\n\n6\n00:00:27.050 --> 00:00:28.900\nJustin, welcome back to the show,\nhow's it going?\n\n7\n00:00:28.900 --> 00:00:30.005\n&gt;&gt; It is going fantastic, Daniel,\n\n8\n00:00:30.005 --> 00:00:31.567\nhow are you today?\n&gt;&gt; I am fantastic,\n\n9\n00:00:31.567 --> 00:00:36.670\nI walked up to a Buddhist monk and asked\nhim to, well, make me one with the show.\n\n10\n00:00:36.670 --> 00:00:39.214\nBut I assume that's what\nyou're going to do,\n\n11\n00:00:39.214 --> 00:00:42.226\ncuz you're the one with the knowledge and\nexpertise.\n\n12\n00:00:42.226 --> 00:00:45.370\nHe wasn't so, he was like,\nPython, I don't understand this,\n\n13\n00:00:45.370 --> 00:00:47.331\nI said, I'll go ask Justin\n&gt;&gt; Well,\n\n14\n00:00:47.331 --> 00:00:50.639\nhopefully I can deliver on\nsomething that was promised for\n\n15\n00:00:50.639 --> 00:00:53.838\nme by proxy [LAUGH].\n&gt;&gt; He channeled you, so\n\n16\n00:00:53.838 --> 00:00:56.516\nit was interesting.\n&gt;&gt; We'll see, it was weird, and\n\n17\n00:00:56.516 --> 00:01:00.047\nhe got a big old beard all of a sudden,\nit was some crazy stuff.\n\n18\n00:01:00.047 --> 00:01:04.449\nHopefully this will start to play in, this\nis actually a little play off of something\n\n19\n00:01:04.449 --> 00:01:08.550\nwe saw a bunch of episodes ago, right,\nif you're watching this in sequence.\n\n20\n00:01:08.550 --> 00:01:11.490\nIf not, if you're just joining us,\nwelcome, you're gonna learn something new,\n\n21\n00:01:11.490 --> 00:01:16.000\nhopefully, it is attributes,\nparticularly, getting attributes.\n\n22\n00:01:16.000 --> 00:01:17.384\nNow, Python in and\n\n23\n00:01:17.384 --> 00:01:21.030\nof itself doesn't have access modifiers,\nI can't make something private.\n\n24\n00:01:21.030 --> 00:01:24.578\nI can go out of my way to make it less\npublic, but they're not strictly private.\n\n25\n00:01:24.578 --> 00:01:29.262\nIf I know a lot about Python, I could\nprobably figure out what to get, right?\n\n26\n00:01:29.262 --> 00:01:33.186\nKinda dot diving,\ndot [SOUND] auto complete.\n\n27\n00:01:33.186 --> 00:01:34.082\n&gt;&gt; I like that, dot diving [LAUGH].\n\n28\n00:01:34.082 --> 00:01:34.833\n&gt;&gt; Yeah, dot, dot, dot.\n\n29\n00:01:34.833 --> 00:01:36.648\n&gt;&gt; Just keeping adding dots to it until\n\n30\n00:01:36.648 --> 00:01:38.628\nyou find something.\n&gt;&gt; Yeah, there it is,\n\n31\n00:01:38.628 --> 00:01:40.399\nthat's what I was looking for.\n&gt;&gt; [LAUGH]\n\n32\n00:01:40.399 --> 00:01:42.123\n&gt;&gt; But there are ways that\n\n33\n00:01:42.123 --> 00:01:46.760\nyou can modify the behavior\naround respective dots, okay?\n\n34\n00:01:47.900 --> 00:01:49.970\nNow, what do I mean about that?\n\n35\n00:01:49.970 --> 00:01:54.690\nWell, let's say that you have a car, a car\nobject, and you wanna find the color.\n\n36\n00:01:54.690 --> 00:01:57.745\nIn Python, you say .color,\nunlike other languages,\n\n37\n00:01:57.745 --> 00:02:00.158\nwhere you would write getters and setters.\n\n38\n00:02:00.158 --> 00:02:04.061\nWell, that's not true, you'd just\nsay .color, access the property, and\n\n39\n00:02:04.061 --> 00:02:05.580\nit's good to go.\n\n40\n00:02:05.580 --> 00:02:09.580\nThose are called, well, most of the time,\nthey're called attributes.\n\n41\n00:02:09.580 --> 00:02:14.160\nIf it's a method, a function, then I\nguess technically that's an attribute.\n\n42\n00:02:14.160 --> 00:02:17.922\nThe function is an attribute of the thing,\nbut you're calling a function, so\n\n43\n00:02:17.922 --> 00:02:20.430\nthat's typically not how\nwe discuss those things.\n\n44\n00:02:21.760 --> 00:02:25.900\nBut if I wanted to say, you know what,\nI want some kind of dynamic or\n\n45\n00:02:25.900 --> 00:02:26.562\ncomputed value.\n\n46\n00:02:26.562 --> 00:02:30.230\nLet's say you have an x and a y,\nand once x and y are there,\n\n47\n00:02:30.230 --> 00:02:34.948\nwell now z is available, but\nz is actually based on x and y.\n\n48\n00:02:34.948 --> 00:02:40.610\nOr maybe z, x and y being there,\nwell, z makes sense in this case.\n\n49\n00:02:40.610 --> 00:02:45.030\nSo it's kind of a dynamic or\ncomputed value of sorts.\n\n50\n00:02:45.030 --> 00:02:49.777\nIt does get a little interesting in\nPython because there's two methods\n\n51\n00:02:49.777 --> 00:02:52.316\nthat work in this manner, all right.\n\n52\n00:02:52.316 --> 00:02:56.830\nAnd we'll highlight kind of\nthe nuanced differences between them.\n\n53\n00:02:56.830 --> 00:02:59.170\nBut let's go ahead and\ntake a look at the screen here,\n\n54\n00:02:59.170 --> 00:03:01.779\nwe don't really have a lot of\nexploration to do in this one.\n\n55\n00:03:01.779 --> 00:03:07.140\nIt is probably just, let's make something\nand then explore using that thing.\n\n56\n00:03:07.140 --> 00:03:11.480\nAll right, so I'm gonna create,\nI'm gonna call this getting.py.\n\n57\n00:03:11.480 --> 00:03:14.093\nAnd I'm gonna create a pair, all right, so\n\n58\n00:03:14.093 --> 00:03:18.204\nyou can think of it as like a pair of\nshoes or something of that nature.\n\n59\n00:03:18.204 --> 00:03:21.500\nAnd that's just gonna take an x and\na y, and you're like, hey,\n\n60\n00:03:21.500 --> 00:03:24.735\nthat looks a lot like that point\nfrom previous episodes, shh,\n\n61\n00:03:24.735 --> 00:03:27.407\ndon't tell anybody.\n&gt;&gt; No one reuses code,\n\n62\n00:03:27.407 --> 00:03:28.375\nJustin.\n&gt;&gt; [LAUGH] No, no.\n\n63\n00:03:28.375 --> 00:03:29.516\n&gt;&gt; Always brand new and\n\n64\n00:03:29.516 --> 00:03:32.899\noriginal from scratch.\n&gt;&gt; It is, exactly, I love to reinvent\n\n65\n00:03:32.899 --> 00:03:34.916\nthe wheel at every possible turn.\n&gt;&gt; [LAUGH]\n\n66\n00:03:34.916 --> 00:03:37.557\n&gt;&gt; That's what I do, that's what I do.\n\n67\n00:03:37.557 --> 00:03:42.075\nBut just for readbility purposes, let's\ngo ahead and get that repr method and\n\n68\n00:03:42.075 --> 00:03:44.220\nthen we'll be good to go.\n\n69\n00:03:44.220 --> 00:03:47.760\nSo here's our f string,\nthis is a new Python thing.\n\n70\n00:03:47.760 --> 00:03:53.842\nSo here's Pair (x={self.x},\ny={self.y}) and there we go.\n\n71\n00:03:53.842 --> 00:03:59.187\nSo there's everything to do,\n\n72\n00:03:59.187 --> 00:04:07.470\nnow, I'm just gonna create a single pair.\n\n73\n00:04:07.470 --> 00:04:13.910\nAnd that's going to be, let's call it 3,\n7, two prime numbers, beautiful.\n\n74\n00:04:13.910 --> 00:04:19.165\nAnd if we say python -i getting.py,\nPython 3,\n\n75\n00:04:19.165 --> 00:04:23.179\nI accidentally went into Python 2 mode.\n\n76\n00:04:23.179 --> 00:04:25.968\nWhich I use a lot of features that\nwill break all over the place.\n\n77\n00:04:25.968 --> 00:04:27.408\n&gt;&gt; Gets you every time.\n\n78\n00:04:27.408 --> 00:04:28.250\n&gt;&gt; Yeah, it will, it will.\n\n79\n00:04:29.520 --> 00:04:34.630\nSo I have to stay disciplined and\nwait for it, there we go.\n\n80\n00:04:34.630 --> 00:04:37.102\nCouldn't remember that file just for\na second, getting.py.\n\n81\n00:04:37.102 --> 00:04:42.803\nOkay, so\nif we look at our pair just like that,\n\n82\n00:04:42.803 --> 00:04:47.810\nthen if I want the x, I just say pair.x.\n\n83\n00:04:47.810 --> 00:04:52.350\nThat's what I'm talking about when I say,\nI want that value, what is it?\n\n84\n00:04:52.350 --> 00:04:55.900\nVariable name dot whatever the thing is,\nokay?\n\n85\n00:04:55.900 --> 00:04:59.310\nBy saving those self.x equals,\nthat's what I'm doing.\n\n86\n00:05:00.530 --> 00:05:05.650\nBut there are times when you\nwant to maybe handle that,\n\n87\n00:05:05.650 --> 00:05:07.950\nor maybe you want to\nadd some custom logic.\n\n88\n00:05:07.950 --> 00:05:14.429\nYou can do those things by using\nget attr and get attribute.\n\n89\n00:05:14.429 --> 00:05:20.650\nThat was a lot of work there,\nget attr and get attribute.\n\n90\n00:05:20.650 --> 00:05:25.020\nAll right, what does that mean,\nwe're gonna start with get attr.\n\n91\n00:05:25.020 --> 00:05:28.249\nAnd it's gonna be pretty\nstraightforward here.\n\n92\n00:05:28.249 --> 00:05:32.061\n&gt;&gt; You're saying get attr, A-T-T-R or\n\n93\n00:05:32.061 --> 00:05:33.412\nA-D-D-R?\n\n94\n00:05:33.412 --> 00:05:37.234\nCuz I've heard get addr before,\nI think, or something addr.\n\n95\n00:05:37.234 --> 00:05:39.989\n&gt;&gt; Yeah, A-T-T-R, for me when I say addr,\n\n96\n00:05:39.989 --> 00:05:44.680\na lot of times I'm saying A-T-T-R,\nwhich is short for attribute.\n\n97\n00:05:44.680 --> 00:05:47.579\nAnd this is in fact A-T-T-R, get A-T-T-R.\n&gt;&gt; Excellent.\n\n98\n00:05:47.579 --> 00:05:49.999\n&gt;&gt; But I could see if you're not familiar\n\n99\n00:05:49.999 --> 00:05:54.427\nyou're like, A-D-D-E-R?\n&gt;&gt; Well, you see addresses and\n\n100\n00:05:54.427 --> 00:05:58.307\nstuff typically get truncated.\n&gt;&gt; Yeah, yeah,\n\n101\n00:05:58.307 --> 00:05:59.246\nA D D R.\n&gt;&gt; Yeah.\n\n102\n00:05:59.246 --> 00:06:00.318\n&gt;&gt; I said that really fast,\n\n103\n00:06:00.318 --> 00:06:04.164\nand it probably didn't sound very much\ndifferent, A-D-D-R instead of A-T-T-R.\n\n104\n00:06:04.164 --> 00:06:05.159\n&gt;&gt; Correct.\n\n105\n00:06:05.159 --> 00:06:05.960\n&gt;&gt; So addr and\n\n106\n00:06:05.960 --> 00:06:10.683\nattr, I guess that makes sense,\nlike IP addresses, IP addr.\n\n107\n00:06:10.683 --> 00:06:15.088\nActually, now that you mention that,\nI use the IP addr tool a lot,\n\n108\n00:06:15.088 --> 00:06:17.723\nfor IP address, anyway\n&gt;&gt; We digress.\n\n109\n00:06:17.723 --> 00:06:19.227\n&gt;&gt; So getattr, now,\n\n110\n00:06:19.227 --> 00:06:25.340\nattr is gonna give you an argument,\nit's gonna give you the attribute name.\n\n111\n00:06:25.340 --> 00:06:28.228\nNow, what is the attribute name,\n\n112\n00:06:28.228 --> 00:06:33.120\nit is typically this name here,\nso it'll be like quote x.\n\n113\n00:06:34.180 --> 00:06:38.520\nLet do this, let's just kind\nof print out what's going on.\n\n114\n00:06:38.520 --> 00:06:43.390\nSay print f string get in, actually,\n\n115\n00:06:43.390 --> 00:06:47.180\nlet's say get attr so\nwe know where we are.\n\n116\n00:06:47.180 --> 00:06:52.006\nAnd dollar sign, excuse me,\ncurly brace, attrname, and\n\n117\n00:06:52.006 --> 00:06:55.700\nthen we're just gonna\ndelegate back to what it was.\n\n118\n00:06:55.700 --> 00:07:04.117\nOkay, so return super().__getattr and\nattrname.\n\n119\n00:07:04.117 --> 00:07:07.243\nOkay, so what that should do,\nit should still allow us to retrieve, but\n\n120\n00:07:07.243 --> 00:07:09.879\nwe now have this print statement so\nwe know what's going on.\n\n121\n00:07:09.879 --> 00:07:13.919\nAll right,\nlet's see if that actually works.\n\n122\n00:07:16.120 --> 00:07:20.353\nOkay, if here's our pair, pair.x,\n\n123\n00:07:20.353 --> 00:07:25.485\npair pair., but\nthere's actually this other\n\n124\n00:07:25.485 --> 00:07:30.390\nfunction called getattr(pair, 'x').\n\n125\n00:07:30.390 --> 00:07:35.273\nAnd that print doesn't work,\nand sometimes what\n\n126\n00:07:35.273 --> 00:07:40.049\nhappens is,\nwhy is getattr not getting called?\n\n127\n00:07:40.049 --> 00:07:45.280\nWell, here we go,\nthere's another one that sometimes\n\n128\n00:07:45.280 --> 00:07:51.197\ngets called depending on\nthe respective context, excuse me.\n\n129\n00:07:51.197 --> 00:07:55.267\nSo before I make the assertion\nthat that's the case,\n\n130\n00:07:55.267 --> 00:08:00.524\nlet me make sure that I have\neverything spelled right, just in case.\n\n131\n00:08:00.524 --> 00:08:02.153\nPython doesn't just clean that for you?\n&gt;&gt; No.\n\n132\n00:08:02.153 --> 00:08:02.892\n&gt;&gt; I know what you meant.\n\n133\n00:08:02.892 --> 00:08:04.282\n&gt;&gt; No, [LAUGH] it doesn't.\n\n134\n00:08:04.282 --> 00:08:04.843\n&gt;&gt; [LAUGH]\n\n135\n00:08:04.843 --> 00:08:05.900\n&gt;&gt; So getattr.\n\n136\n00:08:05.900 --> 00:08:09.556\nLet's see if we can break it,\nI'm a big fan of breaking it.\n\n137\n00:08:09.556 --> 00:08:12.748\nIt looks like everything is spelled right,\nshould return this,\n\n138\n00:08:12.748 --> 00:08:15.550\nthere are times where\nthings get a little iffy.\n\n139\n00:08:15.550 --> 00:08:19.596\nI hope to get to those here shortly.\n\n140\n00:08:19.596 --> 00:08:24.160\nAnd .py, and then there's pair,\nokay, pair.x.\n\n141\n00:08:24.160 --> 00:08:26.720\nAnd pair, if we call getattr.\n\n142\n00:08:29.922 --> 00:08:34.710\nPair, x.\n&gt;&gt; So Justin, quick question here.\n\n143\n00:08:34.710 --> 00:08:40.880\nIf you're calling the double under,\nthe dunder attr, right?\n\n144\n00:08:40.880 --> 00:08:43.110\nThat's what it's called,\nif I'm following it correctly.\n\n145\n00:08:43.110 --> 00:08:44.070\nYou're calling that,\n\n146\n00:08:44.070 --> 00:08:48.558\nwhy is it not actually doing it?\n&gt;&gt; So we actually run into that.\n\n147\n00:08:48.558 --> 00:08:50.638\nI called getattr, the function, and\n\n148\n00:08:50.638 --> 00:08:53.628\nit should delegate to double\nunderscore getattr, but\n\n149\n00:08:53.628 --> 00:08:55.862\nit doesn't appear to be doing that.\n&gt;&gt; No,\n\n150\n00:08:55.862 --> 00:09:00.817\nit's not.\n&gt;&gt; And this is one of those, that's weird,\n\n151\n00:09:00.817 --> 00:09:03.230\nthat's weird, right?\n\n152\n00:09:03.230 --> 00:09:04.877\nAnd I showed you this because\nthis is probably one of\n\n153\n00:09:04.877 --> 00:09:07.478\nthe first hiccups that\nyou're going to run into.\n\n154\n00:09:07.478 --> 00:09:09.246\nI wanted to, why is that not, what,\n\n155\n00:09:09.246 --> 00:09:10.756\nwhy is that doing that?\n&gt;&gt; Should have, but\n\n156\n00:09:10.756 --> 00:09:11.362\nit doesn't feel like it did.\n\n157\n00:09:11.362 --> 00:09:15.760\n[LAUGH]\n&gt;&gt; So pair has an x and a y, right?\n\n158\n00:09:15.760 --> 00:09:18.150\nAnd it doesn't show that\nprint statement that we have.\n\n159\n00:09:18.150 --> 00:09:20.630\nWhy is that not printing?\n\n160\n00:09:20.630 --> 00:09:22.290\nWhat's going on?\n\n161\n00:09:22.290 --> 00:09:27.490\nBut if I now say, pair.z, it runs.\n&gt;&gt; Weird!\n\n162\n00:09:27.490 --> 00:09:29.160\n&gt;&gt; And here's what's happening.\n\n163\n00:09:29.160 --> 00:09:32.700\nSo you can hijack this, and\nwe'll actually see another one shortly.\n\n164\n00:09:33.750 --> 00:09:38.250\nIt only calls this if it goes,\nI don't know anything about z.\n\n165\n00:09:38.250 --> 00:09:40.720\nLet's go see if the getattr\nfunction knows about z,\n\n166\n00:09:40.720 --> 00:09:42.990\nbecause maybe that's a computed property.\n\n167\n00:09:42.990 --> 00:09:47.310\nMaybe z is, well I'm gonna take x and\ny and add them together and\n\n168\n00:09:47.310 --> 00:09:51.810\nhave z every time, that way it's\nmore reactive to x and y changes.\n\n169\n00:09:53.090 --> 00:09:56.960\nAnd you're like, well,\nI called pair.z, that's an attribute,\n\n170\n00:09:56.960 --> 00:09:58.060\nI'm looking up an attribute, but\n\n171\n00:09:58.060 --> 00:10:03.790\nit doesn't call this until it delegates\nback to getattr if it doesn't exist.\n\n172\n00:10:03.790 --> 00:10:08.400\nWhich means you can do some\npretty slick things, like so.\n\n173\n00:10:08.400 --> 00:10:13.640\nSo let's get out of here,\nand say vim getting.py.\n\n174\n00:10:13.640 --> 00:10:17.720\nAnd here, it just printed,\nit didn't actually return anything, right?\n\n175\n00:10:17.720 --> 00:10:18.640\nLet's get out of there.\n\n176\n00:10:18.640 --> 00:10:22.749\nLet's say, if attrname is z,\n\n177\n00:10:22.749 --> 00:10:27.806\nthen we wanna do the following, one,\n\n178\n00:10:27.806 --> 00:10:33.980\ntwo, three, four, return cheese, right?\n\n179\n00:10:33.980 --> 00:10:39.850\nOtherwise, well, what should we do?\n\n180\n00:10:39.850 --> 00:10:44.206\nElse, I think we're gonna raise an error,\nokay?\n\n181\n00:10:44.206 --> 00:10:47.775\nSo you know what,\nlet's have some fun with it.\n\n182\n00:10:47.775 --> 00:10:49.670\nReturn, a singularity has occurred.\n\n183\n00:10:51.985 --> 00:10:54.375\nProbably in production code\nI'm gonna raise an error here,\n\n184\n00:10:54.375 --> 00:10:56.245\nbecause this should break.\n\n185\n00:10:56.245 --> 00:10:59.215\nOr maybe just let it silently fail and\nit returns none.\n\n186\n00:10:59.215 --> 00:11:03.065\nI'm not a big fan of that, I like explicit\nfailures more than silent failures.\n\n187\n00:11:03.065 --> 00:11:05.245\nBut that's a matter of preference.\n\n188\n00:11:05.245 --> 00:11:09.010\nNow if we have this here and\nwe come back, we clear this out.\n\n189\n00:11:09.010 --> 00:11:15.460\nWe come back into python3, and\nwe say getting.py, there we go.\n\n190\n00:11:15.460 --> 00:11:17.407\nIf we say pair.x, that's 3.\n\n191\n00:11:17.407 --> 00:11:24.720\nIf I say pair.z, it returns cheese and\nwill always return cheese.\n\n192\n00:11:24.720 --> 00:11:30.241\nWell, unless I say pair.z = 5, okay?\n\n193\n00:11:30.241 --> 00:11:37.140\nI have the actual cheese return\nhard coded in the getattr.\n\n194\n00:11:37.140 --> 00:11:40.170\nLet's see what's going on here, right?\n\n195\n00:11:40.170 --> 00:11:44.465\nSo pair.z, it's now gonna return 5,\nbecause I've set that attribute.\n\n196\n00:11:44.465 --> 00:11:48.080\nGetattr is no longer being called\nbecause it's part of the standard,\n\n197\n00:11:48.080 --> 00:11:50.150\nthe object knows about it now.\n\n198\n00:11:50.150 --> 00:11:51.990\nAnd doesn't have to go, hey, getattr,\n\n199\n00:11:51.990 --> 00:11:55.940\nthis person's asking for z,\nwhat does that mean, okay?\n\n200\n00:11:55.940 --> 00:11:59.530\nSo this is kind of a conditional\nlookup based on whether it's there or\n\n201\n00:11:59.530 --> 00:12:00.240\nwhether it's not.\n\n202\n00:12:01.720 --> 00:12:05.551\nNow, along with that there's\nanother one called getattribute.\n\n203\n00:12:05.551 --> 00:12:07.817\nSo getattr's kinda wishy-washy, right?\n\n204\n00:12:10.269 --> 00:12:16.918\nWell, if we come back in here to\ngetting.py, so there's getattr.\n\n205\n00:12:18.175 --> 00:12:20.599\nThen we say getattribute.\n\n206\n00:12:20.599 --> 00:12:23.826\nAnd this is, we also get an attrname,\nan attribute name.\n\n207\n00:12:23.826 --> 00:12:31.000\nAnd now I'm gonna say if attrname == 'z'.\n\n208\n00:12:31.000 --> 00:12:35.136\nBetter yet, let's always put\na print in there to see if it runs.\n\n209\n00:12:35.136 --> 00:12:40.707\nSo print('__getattribute__ ',\n\n210\n00:12:40.707 --> 00:12:45.963\nand then + attrname, just like that.\n\n211\n00:12:45.963 --> 00:12:49.820\nThat will always print every\ntime this function runs.\n\n212\n00:12:49.820 --> 00:12:55.948\nBut now, if that's the case,\nlet's return cheese.\n\n213\n00:12:55.948 --> 00:12:59.109\nAnd I put funny words in\nthere just because, well,\n\n214\n00:12:59.109 --> 00:13:00.839\nI think they're funny.\n&gt;&gt; They're funny.\n\n215\n00:13:00.839 --> 00:13:03.610\n[LAUGH] Yeah, I just said that.\n&gt;&gt; I'm more likely to\n\n216\n00:13:03.610 --> 00:13:06.276\nremember that, right?\n&gt;&gt; At least\n\n217\n00:13:06.276 --> 00:13:07.174\nyou're keeping them show friendly.\n\n218\n00:13:07.174 --> 00:13:09.140\n[LAUGH]\n&gt;&gt; Yeah, I am, I am.\n\n219\n00:13:09.140 --> 00:13:12.850\nOtherwise, I am going to\ndelegate this one back to.\n\n220\n00:13:14.230 --> 00:13:15.760\nThis is not inheriting for anything, so\n\n221\n00:13:15.760 --> 00:13:18.240\nthis is actually going to\nlook at the standard object.\n\n222\n00:13:18.240 --> 00:13:19.970\nThat's where a lot of these\nfunctionalities come from.\n\n223\n00:13:19.970 --> 00:13:25.740\nI'm gonna say, getattribute and attrname.\n\n224\n00:13:26.980 --> 00:13:30.680\nNow, this may fail, but\nit will maintain the standard behavior.\n\n225\n00:13:30.680 --> 00:13:33.990\nThe z now,\neven though I don't have z declared here,\n\n226\n00:13:33.990 --> 00:13:36.150\nit's going to be a computed property,\nokay?\n\n227\n00:13:37.490 --> 00:13:40.719\nSo let's go, let's see what happens.\n\n228\n00:13:40.719 --> 00:13:47.300\nPython3 -i getting.py and now I have pair.\n\n229\n00:13:47.300 --> 00:13:48.950\nAnd look, I typed pair.\n\n230\n00:13:50.420 --> 00:13:54.263\nAnd because the repper uses self.x and\nself.y,\n\n231\n00:13:54.263 --> 00:13:58.390\nI get getattr x, getattr y,\nit actually prints out.\n\n232\n00:13:58.390 --> 00:14:03.142\nIf I say pair.x, I get getattr x,\npair.y, getattr y,\n\n233\n00:14:03.142 --> 00:14:07.480\npair.z, getattr z, and it returns cheese.\n\n234\n00:14:07.480 --> 00:14:08.126\nSo that print always occurs.\n\n235\n00:14:08.126 --> 00:14:12.570\nNotice that's a little bit different\nbehavior than the getattr.\n\n236\n00:14:12.570 --> 00:14:16.530\nAnd the reason being is this\nis more absolute in nature.\n\n237\n00:14:17.570 --> 00:14:21.405\nAnd just to show that off, if- You know,\nthe little red light's on,\n\n238\n00:14:21.405 --> 00:14:21.978\nDaniel.\n&gt;&gt; [LAUGH]\n\n239\n00:14:21.978 --> 00:14:22.850\n&gt;&gt; So this may go-\n\n240\n00:14:22.850 --> 00:14:23.373\n&gt;&gt; This will break.\n\n241\n00:14:23.373 --> 00:14:23.944\n[LAUGH]\n&gt;&gt; And\n\n242\n00:14:23.944 --> 00:14:27.334\nthis will go horribly awry cuz I was\ngetting ready to make a real strong\n\n243\n00:14:27.334 --> 00:14:28.824\ndecision.\n&gt;&gt; I hear someone knocking on the door,\n\n244\n00:14:28.824 --> 00:14:30.767\nI think that's Murphy [LAUGH].\n&gt;&gt; [LAUGH] Yeah,\n\n245\n00:14:30.767 --> 00:14:34.480\nI'm about to ruin all of this.\n&gt;&gt; [LAUGH]\n\n246\n00:14:34.480 --> 00:14:35.910\n&gt;&gt; So just like we did with getattr,\n\n247\n00:14:35.910 --> 00:14:37.900\nwe're gonna set z on the object.\n\n248\n00:14:37.900 --> 00:14:41.640\nIt wasn't there when we constructed,\nbut we're gonna say pair.z is 10, okay?\n\n249\n00:14:41.640 --> 00:14:42.695\nSo boom, there it is.\n\n250\n00:14:42.695 --> 00:14:48.550\nPair, if it was getattr,\nit's now overwritten.\n\n251\n00:14:48.550 --> 00:14:54.070\nPair.z, it always returns cheese cuz\nthat's actually what's doing the lookup.\n\n252\n00:14:54.070 --> 00:14:59.342\nSo getattribute is saying, here's\nthe custom logic, definitely going to run,\n\n253\n00:14:59.342 --> 00:15:04.720\ngetattr, this is gonna run if\nwe can't find it otherwise.\n\n254\n00:15:04.720 --> 00:15:06.380\nAnd what that means is,\n\n255\n00:15:06.380 --> 00:15:11.260\nyou'll notice, I have the if\nattrname equals z, both methods.\n\n256\n00:15:11.260 --> 00:15:13.925\nGetattr doesn't run, at current time,\n\n257\n00:15:13.925 --> 00:15:18.380\nbecause getattribute is going,\nthat's, there you go.\n\n258\n00:15:18.380 --> 00:15:22.810\nWhat if I look for pair.a?\n\n259\n00:15:22.810 --> 00:15:25.500\nGetattribute a, but\nnow a singularity has occurred.\n\n260\n00:15:25.500 --> 00:15:29.890\nThat return is because it goes, I don't\nknow what to do so I'm gonna turn to\n\n261\n00:15:29.890 --> 00:15:33.900\ngetattr, the shortened version,\nand say, do you know what this is?\n\n262\n00:15:33.900 --> 00:15:37.380\nAnd it's gonna go, no,\nsingularity has occurred.\n\n263\n00:15:37.380 --> 00:15:39.530\nSo these actually have an interplay.\n\n264\n00:15:39.530 --> 00:15:44.586\nThe nuanced difference there,\ngetattribute is absolute,\n\n265\n00:15:44.586 --> 00:15:49.250\ngetattr is the fallback play, okay.\n&gt;&gt; And that's built into Python.\n\n266\n00:15:49.250 --> 00:15:51.200\nPython does that,\nyou don't have to say, do this.\n\n267\n00:15:51.200 --> 00:15:52.228\n&gt;&gt; Yeah, exactly,\n\n268\n00:15:52.228 --> 00:15:55.662\nthat is the order of execution\nthat is standard for Python.\n\n269\n00:15:55.662 --> 00:16:00.907\nSo if you say, getattribute, well getattr\ndoesn't, you don't have to implement that.\n\n270\n00:16:00.907 --> 00:16:05.440\nIf you type getattr, it will try to get\nattributes until it can't find them.\n\n271\n00:16:05.440 --> 00:16:07.830\nAnd it goes well,\nI don't know what you're talking about.\n\n272\n00:16:07.830 --> 00:16:09.730\nIt will check with getattr.\n\n273\n00:16:09.730 --> 00:16:12.588\nIf getattr doesn't know,\nthen it will either fail or\n\n274\n00:16:12.588 --> 00:16:16.597\nit will return nothing, depending on\nyour respective logic, all right?\n\n275\n00:16:16.597 --> 00:16:21.010\nNow, along with that,\nthis didn't really belong anywhere else.\n\n276\n00:16:21.010 --> 00:16:24.140\nBut I think it makes sense here, because\nwe're talking about properties that\n\n277\n00:16:24.140 --> 00:16:28.645\ntechnically don't exist on the object,\nuntil I ask for them.\n\n278\n00:16:28.645 --> 00:16:35.640\nLike, if I look inside behind\nthe scenes of a pair, P-A-I-R,\n\n279\n00:16:35.640 --> 00:16:38.286\nthere's no z property called cheese.\n&gt;&gt; Right.\n\n280\n00:16:38.286 --> 00:16:39.694\n&gt;&gt; Right, now I set it on the object that\n\n281\n00:16:39.694 --> 00:16:40.880\nwe are playing with in memory.\n\n282\n00:16:41.880 --> 00:16:46.370\nBut, it's not there, it's only when it\nruns through that get attribute method.\n\n283\n00:16:46.370 --> 00:16:50.090\nThat it goes, well if it's Z,\nhand them cheese.\n\n284\n00:16:50.090 --> 00:16:55.810\nIf I type this wonderful little\nfunction here called dir.\n\n285\n00:16:55.810 --> 00:16:59.630\nOkay, see that that Z has\nbeen been placed there?\n\n286\n00:17:01.110 --> 00:17:01.890\nI wanna do something.\n\n287\n00:17:01.890 --> 00:17:03.810\nBecause we set that attribute,\nwe actually,\n\n288\n00:17:03.810 --> 00:17:05.810\nduring this session we set that attribute.\n\n289\n00:17:05.810 --> 00:17:09.710\nI'm gonna get out of here,\nI'm gonna rerun this.\n\n290\n00:17:09.710 --> 00:17:12.090\nAnd now I'm going to run it one more time.\n\n291\n00:17:12.090 --> 00:17:15.280\nAnd you'll notice that z is not there.\n\n292\n00:17:15.280 --> 00:17:18.620\nI think it actually might\nbe behind my head there.\n\n293\n00:17:18.620 --> 00:17:20.950\nLet's get out of here [SOUND].\n\n294\n00:17:20.950 --> 00:17:22.530\nLet's rerun it, there we go, there we go.\n\n295\n00:17:22.530 --> 00:17:24.260\nIt's brought it to the top, X, Y.\n\n296\n00:17:24.260 --> 00:17:25.730\n&gt;&gt; Z.\n&gt;&gt; Z's\n\n297\n00:17:25.730 --> 00:17:26.800\na go?\n&gt;&gt; Yeah.\n\n298\n00:17:26.800 --> 00:17:28.355\n&gt;&gt; And that's because it's actually\n\n299\n00:17:28.355 --> 00:17:29.410\ncomputer property.\n\n300\n00:17:29.410 --> 00:17:31.280\nThe only reason it existed beforehand,\n\n301\n00:17:31.280 --> 00:17:35.470\nis to demonstrate that get attribute\nwas absolute, actually put it there.\n\n302\n00:17:36.470 --> 00:17:41.130\nSo DIR gives me all of these attributes\nthat are defined for this object.\n\n303\n00:17:42.470 --> 00:17:45.530\nWhat is interesting is,\nif I want people to know hey,\n\n304\n00:17:45.530 --> 00:17:50.140\nyou can request pair.z but\nit's not a static thing.\n\n305\n00:17:50.140 --> 00:17:52.310\nIt actually has to do\nwith something dynamic.\n\n306\n00:17:52.310 --> 00:17:56.130\nI wanna change that\ndynamic just to show you.\n\n307\n00:17:56.130 --> 00:18:00.650\nThen you could override one other method\nthat actually plays in hand with this.\n\n308\n00:18:00.650 --> 00:18:05.950\nSo getting.py, and\nlet's say instead of it returning cheese,\n\n309\n00:18:07.170 --> 00:18:11.203\nz is just gonna return self.x + self.y.\n\n310\n00:18:11.203 --> 00:18:14.660\nThat means every time x or\ny changes, then z also changes.\n\n311\n00:18:14.660 --> 00:18:16.080\nSo it's kind of a reactive property.\n\n312\n00:18:17.280 --> 00:18:19.670\nBut, if people don't know that and\n\n313\n00:18:19.670 --> 00:18:22.988\nthey using DIR,\nnow I didn't know z was a property.\n\n314\n00:18:22.988 --> 00:18:27.670\nYou need to let them know.\n\n315\n00:18:27.670 --> 00:18:31.975\nSo __dir, that just sounds\nbad when I say it out loud.\n\n316\n00:18:31.975 --> 00:18:35.330\nBut __dir, let me overscroll here.\n\n317\n00:18:36.600 --> 00:18:40.080\nAll right, so we're gonna come here,\nand what am I gonna return?\n\n318\n00:18:40.080 --> 00:18:45.310\nI'm gonna return, well, a list of key for\n\n319\n00:18:45.310 --> 00:18:50.410\nkey in self.dictionary.\n\n320\n00:18:50.410 --> 00:18:51.970\nEverything is backed by a dictionary,\n\n321\n00:18:51.970 --> 00:18:54.608\nunless you go out of your way to\nmake it not backed by a dictionary.\n\n322\n00:18:54.608 --> 00:19:00.236\nPlus Z.\n\n323\n00:19:00.236 --> 00:19:03.700\nI'm adding custom logic to\nthat list of things, okay?\n\n324\n00:19:04.860 --> 00:19:08.340\nNow Z is actually computed from X and\nY, so it's more reactive.\n\n325\n00:19:08.340 --> 00:19:13.250\nThis is a more semi realistic example\nother than, every time you ask for\n\n326\n00:19:13.250 --> 00:19:16.560\nG, just return G, Z it just returns G.\n\n327\n00:19:16.560 --> 00:19:19.577\nJustin must have written this\n&gt;&gt; [LAUGH]\n\n328\n00:19:19.577 --> 00:19:21.620\n&gt;&gt; But, as we've seen, if I ask for\n\n329\n00:19:21.620 --> 00:19:25.360\ndir looking for a list of function or\nproperties, it's not there,\n\n330\n00:19:25.360 --> 00:19:28.200\nbecause it's computed in\nthe getattribute method.\n\n331\n00:19:28.200 --> 00:19:33.570\nWell now if we come back here, and\nwe say getting and I look at pair.\n\n332\n00:19:33.570 --> 00:19:35.410\nOkay, so getattribute's still running.\n\n333\n00:19:35.410 --> 00:19:40.813\nAnd I look at dir pair,\n[SOUND] look at that.\n\n334\n00:19:40.813 --> 00:19:45.885\nIt actually reduced to that,\ncuz I have said only hand them back\n\n335\n00:19:45.885 --> 00:19:51.200\nthe attributes that are in the dictionary,\nincluding z.\n\n336\n00:19:51.200 --> 00:19:52.690\nSo I've added a custom logic there, but\n\n337\n00:19:52.690 --> 00:19:55.080\nI have also let them know\nthat they can request z.\n\n338\n00:19:55.080 --> 00:19:57.460\nSo now if I go it's 10.\n\n339\n00:19:57.460 --> 00:20:02.830\nBut what if I said pair.x = 37.\n\n340\n00:20:02.830 --> 00:20:06.170\nWell, pair dot Z is now 44,\n\n341\n00:20:06.170 --> 00:20:11.850\nbecause it's based on whatever the current\nstanding values of X and Y are.\n\n342\n00:20:11.850 --> 00:20:16.060\nSo, getting attributes can be customized,\nbut not hidden.\n\n343\n00:20:16.060 --> 00:20:20.290\nBut there are ways to make\nthem a little less public.\n\n344\n00:20:20.290 --> 00:20:23.554\nBut also hijack if you\nwant computer properties,\n\n345\n00:20:23.554 --> 00:20:27.605\nespecially if the computed\nportion is not really expensive.\n\n346\n00:20:27.605 --> 00:20:31.199\nIf this involved the database\ncall every time you call dot Z,\n\n347\n00:20:31.199 --> 00:20:32.619\nit might be kinda slow.\n\n348\n00:20:32.619 --> 00:20:36.505\nIf it summed one million numbers\ntogether every time you called it,\n\n349\n00:20:36.505 --> 00:20:39.719\nI don't know if I'd do that.\n&gt;&gt; [LAUGH]\n\n350\n00:20:39.719 --> 00:20:41.459\n&gt;&gt; So do keep that in mind,\n\n351\n00:20:41.459 --> 00:20:44.382\nuse it with appropriate use cases.\n\n352\n00:20:44.382 --> 00:20:49.245\nBut gettattr is a fall back plan,\nget attribute is absolute, and\n\n353\n00:20:49.245 --> 00:20:53.540\n__dir gives you a list of properties\nthat are available to you.\n\n354\n00:20:53.540 --> 00:20:57.960\nAll of these are there by default, you're\nonly typing these if you want to kind\n\n355\n00:20:57.960 --> 00:21:01.670\nof tap into those potentials.\n&gt;&gt; Well, Justin, I feel like we are now\n\n356\n00:21:01.670 --> 00:21:05.160\na little better equipped, when it comes\nto getting attributes on side the Python.\n\n357\n00:21:05.160 --> 00:21:05.660\nAnd guess what?\n\n358\n00:21:05.660 --> 00:21:07.560\nWe've got you to thank for that.\n\n359\n00:21:07.560 --> 00:21:10.953\nBecause I came in here stone cold\nknowing nothing about that, and now,\n\n360\n00:21:10.953 --> 00:21:12.492\nI got a little bit of knowledge.\n\n361\n00:21:12.492 --> 00:21:17.320\nHopefully you guys out there\nare going this is amazing,\n\n362\n00:21:17.320 --> 00:21:22.490\nthis is exactly what I needed\nto know about my environment.\n\n363\n00:21:22.490 --> 00:21:25.258\nThis is what I've been looking for,\nand Justin, you made that happen for\n\n364\n00:21:25.258 --> 00:21:26.480\nall those good folks out there.\n\n365\n00:21:26.480 --> 00:21:27.020\nSo go home and\n\n366\n00:21:27.020 --> 00:21:30.990\nrest easy, knowing that you have put\nevil to bed, that's always a good thing.\n\n367\n00:21:30.990 --> 00:21:31.550\nSo, Justin,\n\n368\n00:21:31.550 --> 00:21:34.060\nit looks like we're at the end of our\nshow though cuz I'm starting to ramble.\n\n369\n00:21:34.060 --> 00:21:35.700\nSo, Justin, thanks for joining us.\n\n370\n00:21:35.700 --> 00:21:38.350\nWe do thank you good folks out there for\nwatching, but it's time for\n\n371\n00:21:38.350 --> 00:21:39.160\nus to sign off.\n\n372\n00:21:39.160 --> 00:21:41.310\nFor DevProTV, I'm your host,\nDaniel Lowery.\n\n373\n00:21:41.310 --> 00:21:42.280\n&gt;&gt; And I'm Justin Dennison.\n\n374\n00:21:42.280 --> 00:21:43.861\nSee you next time.\n\n375\n00:21:43.861 --> 00:21:48.493\n[MUSIC]\n\n",
          "vimeoId": "253817538"
        },
        {
          "description": "In this episode, Justin and Zach hijack the setting and deleting of attributes on custom objects using \\_\\_setattr\\_\\_ and \\_\\_delattr\\_\\_.",
          "length": "1122",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-2-1-setting_attributes-013118-PGM.00_19_14_21.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-2-1-setting_attributes-013118-PGM.00_19_14_21.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-2-1-setting_attributes-013118-PGM.00_19_14_21.Still001-sm.jpg",
          "title": "Setting and Deleting Attributes",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.646 --> 00:00:14.924\nHello, and thank you you for\nchoosing DevProTV,\n\n3\n00:00:14.924 --> 00:00:16.720\nhelping you learn wherever you go.\n\n4\n00:00:16.720 --> 00:00:20.130\nI'm your host, Zach Memos,\nas we continue on with Python data model.\n\n5\n00:00:20.130 --> 00:00:23.130\nThe name of this episode setting and\ndeleting attributes, and\n\n6\n00:00:23.130 --> 00:00:26.320\nonce again Justin Dennison\nwill show us the way, for\n\n7\n00:00:26.320 --> 00:00:29.460\nhe is Justin.\n&gt;&gt; Well we will see you\n\n8\n00:00:29.460 --> 00:00:33.470\ndefinitely over promise for this episode,\nthat was epic I wasn't expecting maybe\n\n9\n00:00:33.470 --> 00:00:36.390\npyrotechnics someone falling from\nthe ceiling coming in who knows.\n\n10\n00:00:36.390 --> 00:00:37.720\n&gt;&gt; I was gonna bring a fire cracker in but\n\n11\n00:00:37.720 --> 00:00:41.160\nI couldn't find one.\n&gt;&gt; Well that could have possibly caused\n\n12\n00:00:41.160 --> 00:00:42.030\na panic in the building.\n\n13\n00:00:42.030 --> 00:00:43.550\nI am glad that you didn't do that.\n&gt;&gt; Okay.\n\n14\n00:00:43.550 --> 00:00:45.320\n&gt;&gt; I might have left anway.\n\n15\n00:00:45.320 --> 00:00:46.300\nJust for a moment.\n\n16\n00:00:46.300 --> 00:00:48.140\nI'd been like this is serious.\n\n17\n00:00:48.140 --> 00:00:51.560\nBut no setting and\ndeleting attributes,right?\n\n18\n00:00:51.560 --> 00:00:54.110\nYou've seen getting attributes, right?\n\n19\n00:00:54.110 --> 00:00:54.840\nGet adder.\n\n20\n00:00:54.840 --> 00:00:56.070\nGet attribute.\n\n21\n00:00:56.070 --> 00:01:00.160\nBut what about if we want\nto,well set them, right.\n\n22\n00:01:00.160 --> 00:01:01.840\nWhat do I mean by set them?\n\n23\n00:01:01.840 --> 00:01:04.110\nAssign them on the object.\n\n24\n00:01:04.110 --> 00:01:09.460\nNow by default we can kind of just\ndo that willy-nilly in Python.\n\n25\n00:01:09.460 --> 00:01:11.180\nBut what if I want to hijack that?\n\n26\n00:01:11.180 --> 00:01:12.210\nWhat if I want to take control?\n\n27\n00:01:12.210 --> 00:01:13.380\nAdd a little extra logic.\n\n28\n00:01:13.380 --> 00:01:20.290\nMaybe, maybe I want to swayed people\nfrom messing or something, right.\n\n29\n00:01:20.290 --> 00:01:25.290\nSo that's what we gonna do in this episode\nand I think it's best build something.\n\n30\n00:01:25.290 --> 00:01:28.540\nSee how it all comes together,\nkind at all comes together.\n\n31\n00:01:28.540 --> 00:01:29.190\nNicely measure.\n\n32\n00:01:29.190 --> 00:01:30.120\nLet's go ahead and\n\n33\n00:01:30.120 --> 00:01:31.720\ntake a look at the screen here.\n&gt;&gt; Mm-hm.\n\n34\n00:01:31.720 --> 00:01:33.290\n&gt;&gt; Let's get started.\n\n35\n00:01:33.290 --> 00:01:35.000\nWe'll say, let's call setting.\n\n36\n00:01:35.000 --> 00:01:39.960\nI know setting is the leading but\njust to make things simple.\n\n37\n00:01:39.960 --> 00:01:43.410\nSo let's start with a restaurant object.\n\n38\n00:01:43.410 --> 00:01:46.430\nAnd what are we gonna put in that object?\n\n39\n00:01:47.650 --> 00:01:50.160\nWell, we're gonna have a name and\na location.\n\n40\n00:01:52.370 --> 00:01:54.980\nAnd so we're gonna have self.name = name.\n\n41\n00:01:54.980 --> 00:01:57.302\nAnd technically we\nare setting attributes right\n\n42\n00:01:57.302 --> 00:01:58.002\nnow.\n&gt;&gt; Mm-hm.\n\n43\n00:01:58.002 --> 00:01:59.540\n&gt;&gt; Self.name =.\n\n44\n00:01:59.540 --> 00:02:00.155\nJust like that.\n\n45\n00:02:00.155 --> 00:02:04.520\nAnd then self.name location\n= location like self.\n\n46\n00:02:04.520 --> 00:02:07.002\nAll right, and let's make us a repr.\n\n47\n00:02:11.191 --> 00:02:12.290\nMaybe if I can try.\n\n48\n00:02:12.290 --> 00:02:18.280\nSo I'm wanna return f string and\nI'm gonna say restaurant.\n\n49\n00:02:19.940 --> 00:02:20.700\nRestaurant.\n\n50\n00:02:20.700 --> 00:02:24.680\nI know my repr are not very\ninteresting sometimes, but\n\n51\n00:02:24.680 --> 00:02:27.178\nthese are informational only.\n&gt;&gt; Mm-hm, mm-hm.\n\n52\n00:02:27.178 --> 00:02:35.310\n&gt;&gt; So self.name} location={self.location}.\n\n53\n00:02:35.310 --> 00:02:36.690\nOkay, there we go.\n\n54\n00:02:38.140 --> 00:02:41.450\nSo if we have a restaurant and\nwhat is a good restaurant?\n\n55\n00:02:41.450 --> 00:02:44.970\nWell, I'm gonna make one up.\n&gt;&gt; Paraguayan cuisine.\n\n56\n00:02:44.970 --> 00:02:46.880\n&gt;&gt; We could call it that.\n\n57\n00:02:46.880 --> 00:02:51.550\nI was thinking about the DevPro Gyro Bar.\n\n58\n00:02:52.680 --> 00:02:57.310\nAnd it's location is somewhere.\n&gt;&gt; Yes,\n\n59\n00:02:57.310 --> 00:03:00.240\nI know where that place is.\n&gt;&gt; Real exclusive spot.\n\n60\n00:03:00.240 --> 00:03:02.680\nZip code, really hard to get in there.\n\n61\n00:03:02.680 --> 00:03:05.290\nUp and coming neighborhood, as well.\n\n62\n00:03:05.290 --> 00:03:07.770\nSo let's take a look at this restaurant.\n\n63\n00:03:07.770 --> 00:03:10.360\nLet's make sure all of\nthose pieces actually work.\n\n64\n00:03:10.360 --> 00:03:13.530\nAnd so, we're going to say restaurant,\nand there we go.\n\n65\n00:03:13.530 --> 00:03:17.210\nDevPro, Gyro Bar and location somewhere.\n\n66\n00:03:17.210 --> 00:03:19.960\nGood deal, we have all of that set up.\n\n67\n00:03:19.960 --> 00:03:22.140\nWe are setting the attributes.\n\n68\n00:03:22.140 --> 00:03:24.320\nBut now, let's say that and\nI come along and\n\n69\n00:03:24.320 --> 00:03:26.940\nI'm like, you know,\nthis is part of a ratings system.\n\n70\n00:03:26.940 --> 00:03:29.840\nI wanna add ratings to restaurants but\n\n71\n00:03:29.840 --> 00:03:34.010\nI only want to add ratings\nthrough some manner.\n\n72\n00:03:35.560 --> 00:03:39.210\nThrough a very particular defined\nmanner and lemme show you what I mean.\n\n73\n00:03:40.870 --> 00:03:43.900\nSo setting, nope,\njust a single s apparently.\n\n74\n00:03:45.590 --> 00:03:49.300\nAnd now, if I come here and\n\n75\n00:03:49.300 --> 00:03:56.020\nI say self.ratings = ratings, there we go.\n\n76\n00:03:56.020 --> 00:03:57.470\nWell, as it stands.\n\n77\n00:03:57.470 --> 00:03:58.979\nNot self.ratings.\n\n78\n00:03:58.979 --> 00:04:02.482\nSelf.ratings = empty list.\n\n79\n00:04:02.482 --> 00:04:08.224\nAs it stands, I can come down here and\n\n80\n00:04:08.224 --> 00:04:15.280\nsay restaurant .ratings=good, like so.\n\n81\n00:04:15.280 --> 00:04:17.100\nAnd that would override that property.\n\n82\n00:04:17.100 --> 00:04:19.170\nIt used to be a list, now it's not.\n\n83\n00:04:19.170 --> 00:04:24.410\nA whole bunch of broke or\nI could say, it's empty again.\n\n84\n00:04:24.410 --> 00:04:26.660\nThere was a bunch of ratings there and\nI just got rid of them.\n\n85\n00:04:26.660 --> 00:04:28.090\nOops, my bad.\n\n86\n00:04:28.090 --> 00:04:30.900\nNow, ideally we would put\nthese in a database and\n\n87\n00:04:30.900 --> 00:04:33.670\nthey wouldn't just live in memory\nlike this, so we could go fetch them.\n\n88\n00:04:33.670 --> 00:04:34.730\nBut just bear with me.\n\n89\n00:04:34.730 --> 00:04:36.240\nThis is for-\n&gt;&gt; For\n\n90\n00:04:36.240 --> 00:04:37.660\ndemonstrative purposes.\n&gt;&gt; Oops, sorry.\n\n91\n00:04:37.660 --> 00:04:39.280\n&gt;&gt; We will, we will bear with you.\n\n92\n00:04:39.280 --> 00:04:41.560\n&gt;&gt; So, how do I manage that?\n\n93\n00:04:41.560 --> 00:04:44.030\nWell, there's this dunder\nmethod called setattr.\n\n94\n00:04:44.030 --> 00:04:45.970\nIt's very similar to getattr.\n\n95\n00:04:47.120 --> 00:04:48.380\nBut what does it do?\n\n96\n00:04:48.380 --> 00:04:54.650\nWell it actually gives you a name,\nand a value.\n\n97\n00:04:54.650 --> 00:05:04.790\nAnd let's just print out f\nstring of name:value, like so.\n\n98\n00:05:04.790 --> 00:05:07.200\nAnd then, you know what?\n\n99\n00:05:07.200 --> 00:05:10.450\nI say we just see what\nhappens if we do just that.\n\n100\n00:05:12.040 --> 00:05:13.823\nOkay, so we come back to our restaurant.\n\n101\n00:05:17.975 --> 00:05:21.410\nOkay, notice it prints name and\nthat's because a name in\n\n102\n00:05:21.410 --> 00:05:26.720\nthat case is actually the name\nargument that's being said, self.name.\n\n103\n00:05:26.720 --> 00:05:30.460\nAnd then, location somewhere,\nratings, there.\n\n104\n00:05:30.460 --> 00:05:36.130\nIt's running that every time\nthat something's happening.\n\n105\n00:05:36.130 --> 00:05:37.320\nExcuse me.\nNot something\n\n106\n00:05:37.320 --> 00:05:39.500\nthat we're setting an attribute.\n\n107\n00:05:39.500 --> 00:05:41.140\nSo if I look at restaurant and\n\n108\n00:05:41.140 --> 00:05:46.040\nI look at name, it actually says the\nrestaurant object has no attribute name.\n\n109\n00:05:46.040 --> 00:05:50.330\nAnd that's because when we over\nrode that dunder set adder,\n\n110\n00:05:50.330 --> 00:05:54.220\nwe essentially took away\nthe ability to do that.\n\n111\n00:05:54.220 --> 00:05:58.810\nOkay because we didn't implement,\ndidn't go put this on.\n\n112\n00:06:00.700 --> 00:06:06.030\nThat is a problem so\nwe should probably go fix that and\n\n113\n00:06:06.030 --> 00:06:08.870\nwell I like living on\nthe edge a little bit.\n\n114\n00:06:10.330 --> 00:06:17.400\nSo just to make sure that still works,\nI'm gonna say self.__dict__[name] = value.\n\n115\n00:06:17.400 --> 00:06:22.200\nI wanna store it in a backing\ndictionary of this object, okay?\n\n116\n00:06:22.200 --> 00:06:26.400\nAnd now if we rerun, well,\nlet's clear this out.\n\n117\n00:06:27.400 --> 00:06:28.610\nWe rerun that.\n\n118\n00:06:30.510 --> 00:06:33.300\nWe now get back that ability.\n\n119\n00:06:33.300 --> 00:06:38.520\nNow, I could use setattr, if I'm not\nmistaking, from the general object.\n\n120\n00:06:38.520 --> 00:06:40.770\nBut I think that's a little more explicit.\n\n121\n00:06:40.770 --> 00:06:42.010\nWe're good to go.\n\n122\n00:06:42.010 --> 00:06:44.485\nBut I could go back in here and\ndo exactly what I said.\n\n123\n00:06:44.485 --> 00:06:50.240\nAnd say restaurant.ratings = good.\n\n124\n00:06:50.240 --> 00:06:51.350\nAnd okay,\n\n125\n00:06:51.350 --> 00:06:56.260\nnotice that ran because it's printing\nout every time we set an attribute.\n\n126\n00:06:56.260 --> 00:07:00.200\nAnd say restaurant and there we go.\n\n127\n00:07:00.200 --> 00:07:05.050\nLooks good but\nnothing upfront has changed ratings,\n\n128\n00:07:05.050 --> 00:07:09.930\nbut if we were lying on it to be\na list of individual ratings, right.\n\n129\n00:07:09.930 --> 00:07:16.205\nOne, two, three, four,\nfive, that's a problem.\n\n130\n00:07:16.205 --> 00:07:19.110\nBecause now all of our\nother code is broken.\n\n131\n00:07:19.110 --> 00:07:23.895\nIf I had, I was like, I'm gonna\nadd a rating did I spell it right?\n\n132\n00:07:23.895 --> 00:07:25.098\nYeah, I did.\n\n133\n00:07:25.098 --> 00:07:27.870\nRatings.append.\n\n134\n00:07:27.870 --> 00:07:29.950\nThey got a five star.\n\n135\n00:07:29.950 --> 00:07:31.650\nString object has no attribute append.\n\n136\n00:07:31.650 --> 00:07:34.850\nAnd now we start getting things\nlike this so I can overwrite that.\n\n137\n00:07:34.850 --> 00:07:38.500\nWell ratings are really\nimportant to my restaurant.\n\n138\n00:07:38.500 --> 00:07:41.370\nThe DevPro Gyro Bar.\n\n139\n00:07:41.370 --> 00:07:47.960\nSo how can I make sure that\nnothing bad happens to that.\n\n140\n00:07:49.410 --> 00:07:50.680\nWell let's come back in here.\n\n141\n00:07:51.720 --> 00:07:52.851\nAnd I wanna take this out.\n\n142\n00:07:52.851 --> 00:07:59.130\nAnd I'm gonna say,\nif name = 'ratings', right.\n\n143\n00:07:59.130 --> 00:08:01.060\nThat's actually the attribute\nwe're trying to set.\n\n144\n00:08:03.510 --> 00:08:08.660\nThen say, just for now, 'No!!!' Okay?\n\n145\n00:08:08.660 --> 00:08:13.970\nI've essentially intercepted that and\nsaid nope, and\n\n146\n00:08:13.970 --> 00:08:18.400\njust to make sure I don't accidentally\ngo ahead and send, I'm gonna return.\n\n147\n00:08:18.400 --> 00:08:22.270\nNow, I'm not a big fan of this, but\nI think it works in this scenario.\n\n148\n00:08:24.080 --> 00:08:28.960\nOkay, just the empty return I mean.\n&gt;&gt; Mm-hm.\n\n149\n00:08:28.960 --> 00:08:30.450\n&gt;&gt; But kind of has an implicit\n\n150\n00:08:30.450 --> 00:08:33.320\nempty return anyway, because we're not\nreturning anything from set adder.\n\n151\n00:08:34.420 --> 00:08:38.730\nSo I come back and I come into setting,\nI was gonna call it restaurant.\n\n152\n00:08:38.730 --> 00:08:39.630\nNotice how it says no.\n\n153\n00:08:39.630 --> 00:08:43.957\nPhew, well-\n&gt;&gt; [LAUGH]\n\n154\n00:08:43.957 --> 00:08:46.805\n&gt;&gt; If I look, .ratings that has no\n\n155\n00:08:46.805 --> 00:08:51.880\nratings, because I needed\nthe first time through okay?\n\n156\n00:08:53.290 --> 00:08:55.650\nSo I gotta put a little extra logic, and\n\n157\n00:08:55.650 --> 00:08:59.340\nI wanted to show you that\nbecause I'm gonna guard this.\n\n158\n00:08:59.340 --> 00:09:04.310\nBut what that means is I can't\ndo this line right here, I\n\n159\n00:09:04.310 --> 00:09:05.730\ncan't set that attribute the first time.\n\n160\n00:09:06.880 --> 00:09:12.260\nWhat I can do,\nif the name is ratings and hasattr,\n\n161\n00:09:12.260 --> 00:09:17.370\nand I have to look because I\nalways get these backwards.\n\n162\n00:09:17.370 --> 00:09:22.880\nSelf, name, or more specifically,\n\n163\n00:09:22.880 --> 00:09:28.180\nratings If it has already has\nthat set now block it off,\n\n164\n00:09:28.180 --> 00:09:31.660\nso you get kind of a you\nwrite one time and that's it.\n\n165\n00:09:31.660 --> 00:09:36.910\nYou're doing it in pen,\nso we come back and\n\n166\n00:09:36.910 --> 00:09:42.740\nrerun it doesn't tell me no, I say\nrestaurant.ratings, boom there we go.\n\n167\n00:09:42.740 --> 00:09:45.670\nNow how could I modify these ratings,\n\n168\n00:09:45.670 --> 00:09:49.425\nwell let's see if I can\nchange this back to good.\n\n169\n00:09:49.425 --> 00:09:50.333\nNo!!!\n\n170\n00:09:53.306 --> 00:09:56.681\nRatings, and\nit still lists we come back and\n\n171\n00:09:56.681 --> 00:10:02.980\nappend it's not one star it's five stars,\nI was about to mess up there.\n\n172\n00:10:02.980 --> 00:10:05.420\nI come back and I append,\nit's now in there so\n\n173\n00:10:05.420 --> 00:10:09.280\nI can keep this collection of ratings,\nkeep people from overriding it.\n\n174\n00:10:09.280 --> 00:10:13.530\nThis is one, there's other ways\nto say hey, don't rename these.\n\n175\n00:10:13.530 --> 00:10:15.080\nDon't reallocate these.\n\n176\n00:10:15.080 --> 00:10:18.170\nThese are more or less unusable.\n&gt;&gt; Mm-hm.\n\n177\n00:10:18.170 --> 00:10:20.220\n&gt;&gt; So, I didn't add additional logic.\n\n178\n00:10:20.220 --> 00:10:22.760\nI can determine can you override this?\n\n179\n00:10:22.760 --> 00:10:26.270\nCan you, can you reassign it.\n\n180\n00:10:26.270 --> 00:10:30.310\nYou have to be careful though\nbecause that logic is needed\n\n181\n00:10:30.310 --> 00:10:35.180\nat least during the initialization\nphase right here, right?\n\n182\n00:10:35.180 --> 00:10:37.545\nIf you're setting that attribute and\n\n183\n00:10:37.545 --> 00:10:42.519\n[INAUDIBLE] set adder has to allow\nthat the first time through, okay?\n\n184\n00:10:42.519 --> 00:10:47.750\nIf not, things get a little weird,\nall right?\n\n185\n00:10:47.750 --> 00:10:51.330\nNow, what about if I'm like,\n\n186\n00:10:51.330 --> 00:10:54.410\nyou know, sometimes I want\nmy location to be anonymous.\n\n187\n00:10:54.410 --> 00:10:56.620\nI want to be able to remove that.\n\n188\n00:10:56.620 --> 00:10:57.870\nAs it stands, we can just delete it.\n\n189\n00:10:57.870 --> 00:11:01.350\nIf we wanted to intercept that, and\nmaybe do a little bit of logic,\n\n190\n00:11:01.350 --> 00:11:03.430\nmaybe call back to a database.\n\n191\n00:11:03.430 --> 00:11:06.050\nI'm not sure I would\nnecessarily advocate that.\n\n192\n00:11:06.050 --> 00:11:12.470\nOr maybe you say hey you can delete\nlocation but don't delete the name.\n\n193\n00:11:12.470 --> 00:11:20.840\nSo allow some things and not the other,\nthat is dunder, delattr just like that.\n\n194\n00:11:20.840 --> 00:11:25.860\nAnd that is going to give you a name, and\nthe name is the respective attribute.\n\n195\n00:11:25.860 --> 00:11:28.620\nSo if I wanted to allow\nthe deleting of location.\n\n196\n00:11:28.620 --> 00:11:36.000\nSo there's nothing but\nnot anything else then I'll\n\n197\n00:11:37.900 --> 00:11:41.860\nsay if name = location\nthen do the following,\n\n198\n00:11:43.460 --> 00:11:51.010\ndel self_.dict_(name).\n\n199\n00:11:51.010 --> 00:11:57.860\nOtherwise, would I say raise TypeError,\n\n200\n00:11:58.970 --> 00:12:05.500\nno, let's just print('You\ncan't delete that You cannot\n\n201\n00:12:05.500 --> 00:12:08.520\nbecause I've used single quotes to them.\n&gt;&gt; Hm.\n\n202\n00:12:08.520 --> 00:12:12.970\n&gt;&gt; All right, now if we come back, and\n\n203\n00:12:12.970 --> 00:12:17.320\nwe come back into our Python\ninterpretor here, we're good to go.\n\n204\n00:12:18.360 --> 00:12:22.930\nAnd say restaurant, python,\n\n205\n00:12:22.930 --> 00:12:28.032\nnot python 3, excuse me,\nrestaurant.ratings all right.\n\n206\n00:12:28.032 --> 00:12:32.990\nRestaurant.location, go to somewhere.\n\n207\n00:12:32.990 --> 00:12:37.650\nIf I say restaurant del,\nrestaurant.location, it didn't give me\n\n208\n00:12:37.650 --> 00:12:42.760\nan error, but it says hey that attribute\ndoesn't exist anymore, it's gone, okay?\n\n209\n00:12:44.560 --> 00:12:50.170\nIf I instead say restaurant dot\nname you cannot delete that.\n\n210\n00:12:51.400 --> 00:12:56.430\nAnd let's see if that holds true because\nyou know logic is sometimes hard.\n\n211\n00:12:56.430 --> 00:12:58.630\nIt now persists the names.\n\n212\n00:12:58.630 --> 00:13:01.530\nI can't delete the ratings either\nbecause of that exact same logic.\n\n213\n00:13:03.210 --> 00:13:08.200\nSo those are the idea is\nbetween setting and deleting.\n\n214\n00:13:08.200 --> 00:13:13.717\nNow a little added bonus,\nthose ratings, Doing this,\n\n215\n00:13:17.253 --> 00:13:20.406\n.ratings.append.\n\n216\n00:13:20.406 --> 00:13:22.870\nMaybe if I'm disallowing\nyou to reassign it,\n\n217\n00:13:22.870 --> 00:13:25.810\nmaybe I want to provide\nyou with an interface.\n\n218\n00:13:25.810 --> 00:13:28.530\nSo if you do things like that, right?\n\n219\n00:13:28.530 --> 00:13:29.270\nYou can't delete it.\n\n220\n00:13:30.280 --> 00:13:31.490\nYou can't reset it.\n\n221\n00:13:32.520 --> 00:13:35.060\nI only want you to interact\nin a very particular way and\n\n222\n00:13:35.060 --> 00:13:38.810\nthis is not typical for Python.\n\n223\n00:13:38.810 --> 00:13:42.250\nBut there are times like rating\nsuch important information that\n\n224\n00:13:42.250 --> 00:13:44.280\nyou may want to do that.\n\n225\n00:13:44.280 --> 00:13:47.650\nThen you need to think about\nthe additional methods\n\n226\n00:13:47.650 --> 00:13:48.970\nas part of that interface.\n\n227\n00:13:48.970 --> 00:13:50.500\nSo, if I say rate.\n\n228\n00:13:50.500 --> 00:13:51.830\nNow, this is not a dunder method.\n\n229\n00:13:51.830 --> 00:13:54.570\nThis is totally specific\nto this application.\n\n230\n00:13:54.570 --> 00:13:55.546\nRate is going to get a rating.\n\n231\n00:13:58.362 --> 00:14:01.290\nAnd I'm gonna say self.ratings.append.\n\n232\n00:14:01.290 --> 00:14:07.240\nI'm abstracting that away from\nthe respective user and that\n\n233\n00:14:07.240 --> 00:14:12.253\nway it'll keep them from trying to maybe\ndot dive or get in there as a sort, okay?\n\n234\n00:14:12.253 --> 00:14:17.309\nSo, python3 -i setting and\n\n235\n00:14:17.309 --> 00:14:23.016\nthen restaurant.rate{4}\n\n236\n00:14:23.016 --> 00:14:26.868\nthat also a 5, another 5.\n\n237\n00:14:26.868 --> 00:14:31.480\nAnd then, restaurant.ratings.\n\n238\n00:14:31.480 --> 00:14:32.500\nI got 4, 5, 5.\n\n239\n00:14:32.500 --> 00:14:36.070\nAnd even that,\nmaybe I add another method called summary.\n\n240\n00:14:37.070 --> 00:14:40.540\nThat gives me a summary of\nwhat the average rating is for\n\n241\n00:14:40.540 --> 00:14:41.570\nthis particular restaurant.\n\n242\n00:14:42.990 --> 00:14:47.700\nBeing able to come in here and\n\n243\n00:14:47.700 --> 00:14:51.800\nhijack the set adder and\ndelattr properties,\n\n244\n00:14:51.800 --> 00:14:55.930\ndo remember set adder has to be available\nat least the first time through,\n\n245\n00:14:57.180 --> 00:15:00.410\nbecause that's what you\ndoing in the dunder method.\n\n246\n00:15:01.550 --> 00:15:03.690\nAfter that you maybe wanna high jack or\n\n247\n00:15:03.690 --> 00:15:09.290\nmaybe you want to set attributes when\nother attributes are updated Right?\n\n248\n00:15:09.290 --> 00:15:12.513\nLike, let's say we have something like so.\n\n249\n00:15:12.513 --> 00:15:18.379\nAverage_rating =None and\n\n250\n00:15:18.379 --> 00:15:24.486\nnow if we not average rating,\n\n251\n00:15:24.486 --> 00:15:27.670\nwait a minute.\n\n252\n00:15:29.830 --> 00:15:34.730\nLet's just say state or\nabbreviation, right?\n\n253\n00:15:36.800 --> 00:15:38.350\nMaybe even title.\n\n254\n00:15:39.370 --> 00:15:40.730\nThere we go, none.\n\n255\n00:15:40.730 --> 00:15:44.520\nI can come in here and\n\n256\n00:15:44.520 --> 00:15:49.170\nsay, if the name is.\n\n257\n00:15:49.170 --> 00:15:52.880\nName, and the name I mean is the value.\n\n258\n00:15:52.880 --> 00:15:54.030\nWhatever I'm changing.\n\n259\n00:15:54.030 --> 00:15:56.800\nSo the name here is equal to name.\n\n260\n00:15:56.800 --> 00:15:59.240\nThe name is a value.\n\n261\n00:16:00.960 --> 00:16:02.020\nName equals name.\n\n262\n00:16:03.100 --> 00:16:07.550\nThen I want to do something else, right?\n\n263\n00:16:07.550 --> 00:16:15.689\nI want to self.title = value.upper().\n\n264\n00:16:17.779 --> 00:16:23.010\nAnd so,\nI'm gonna reflect that of name.upper.\n\n265\n00:16:23.010 --> 00:16:25.974\nIt's just all uppercase, maybe like\na billboard or something like that.\n\n266\n00:16:29.397 --> 00:16:33.990\nThere are not fantastical representation.\n\n267\n00:16:33.990 --> 00:16:39.145\nBut drives home the point nonetheless so\ndash i setting and\n\n268\n00:16:39.145 --> 00:16:47.530\nrestaurant.name see how it works,\ngot title, it's all upper case.\n\n269\n00:16:47.530 --> 00:16:51.807\nNow if I set the name to\n\n270\n00:16:51.807 --> 00:16:56.327\n'abc', all right?\n\n271\n00:16:56.327 --> 00:17:00.614\n.tittle, now I have capital 'ABC' because\nI have said, okay, this has changed,\n\n272\n00:17:00.614 --> 00:17:04.020\nwhen that change I need to\nupdate this other thing.\n\n273\n00:17:04.020 --> 00:17:10.160\nSo these are also ways that I can update\ninternal state by hijacking said addr.\n\n274\n00:17:10.160 --> 00:17:13.700\nLikewise, if I remove\nthe name which I disallowed,\n\n275\n00:17:13.700 --> 00:17:17.340\nI would probably also want\nto remove that title aspect.\n\n276\n00:17:17.340 --> 00:17:22.660\nSo those are kind of interplay but\nthat's how we set and delete attributes.\n\n277\n00:17:23.770 --> 00:17:29.240\nCustom like in a customized\nmanner not just letting it up to\n\n278\n00:17:29.240 --> 00:17:30.040\nPython.\n&gt;&gt; I know for\n\n279\n00:17:30.040 --> 00:17:32.020\na fact I could not have said it better.\n\n280\n00:17:32.020 --> 00:17:35.630\nSetting into leading attributes another\none of episodes inside the Python DM\n\n281\n00:17:35.630 --> 00:17:36.510\nmodel.\n\n282\n00:17:36.510 --> 00:17:39.430\nAnd Justin before we move on\nanything else you'd like to say.\n\n283\n00:17:39.430 --> 00:17:40.010\n&gt;&gt; So by and\n\n284\n00:17:40.010 --> 00:17:44.350\nlarge you just have to think about\nthe context of your application.\n\n285\n00:17:44.350 --> 00:17:45.740\nAlways keep that in the back of your mind.\n\n286\n00:17:45.740 --> 00:17:50.070\nI know I've harped on it a lot, but it is\nvery important when making decisions of,\n\n287\n00:17:50.070 --> 00:17:55.470\nwell, do I use the set adder__method or\nthe magic method or the data model method?\n\n288\n00:17:55.470 --> 00:17:56.300\nDo I use it here?\n\n289\n00:17:56.300 --> 00:17:58.210\nWell, do I need x, y, or z?\n\n290\n00:17:58.210 --> 00:17:59.220\nDo I need to hijack?\n\n291\n00:17:59.220 --> 00:18:00.550\nDo I need to protect?\n\n292\n00:18:00.550 --> 00:18:02.490\nIf you don't, then leave it out.\n\n293\n00:18:02.490 --> 00:18:04.470\nJust let Python do its thing.\n\n294\n00:18:04.470 --> 00:18:06.990\nOtherwise, maybe it's\na good time to use it.\n\n295\n00:18:06.990 --> 00:18:10.020\nMake sure it makes sense in the context\nof whatever you're building.\n\n296\n00:18:10.020 --> 00:18:11.270\n&gt;&gt; Well said, Justin, and\n\n297\n00:18:11.270 --> 00:18:13.220\nanother wonderful episdoe indeed.\n\n298\n00:18:13.220 --> 00:18:16.040\nThis is Python Data Model,\nit's a wonderful series that Justin's put\n\n299\n00:18:16.040 --> 00:18:17.750\ntogether for you,\nhe's worked very hard at it.\n\n300\n00:18:17.750 --> 00:18:19.790\nMake sure you see every episode,\nyou'll be glad you did.\n\n301\n00:18:19.790 --> 00:18:21.700\nAnd inside that course library,\n\n302\n00:18:21.700 --> 00:18:24.310\nthere's thousands of other videos that\nare there to help you go further.\n\n303\n00:18:24.310 --> 00:18:25.770\nSo check those out, too.\n\n304\n00:18:25.770 --> 00:18:27.850\nSo tell them whether you\nknow about Dev Pro TV.\n\n305\n00:18:27.850 --> 00:18:29.960\nYou know a good Dev Pro\nis always learning.\n\n306\n00:18:29.960 --> 00:18:32.020\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n307\n00:18:32.020 --> 00:18:33.574\n&gt;&gt; And we'll see you soon.\n\n308\n00:18:33.574 --> 00:18:38.335\n[MUSIC]\n\n",
          "vimeoId": "253983817"
        },
        {
          "description": "In this episode, Justin and Zach discuss the idea of descriptors briefly when considering a property that needs either to be dependent or have custom logic associated with generating the value. Justin demonstrates the use of the property decorator to define custom object properties that adhere to the \"get\", \"set\", and \"delete\" paradigm.",
          "length": "1311",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-3-1-descriptors_property_decorators-020118-PGM.00_22_25_06.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-3-1-descriptors_property_decorators-020118-PGM.00_22_25_06.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-3-1-descriptors_property_decorators-020118-PGM.00_22_25_06.Still001-sm.jpg",
          "title": "Descriptors: Property Decorators",
          "transcript": "WEBVTT\n\n1\n00:00:00.077 --> 00:00:01.154\n[MUSIC]\n\n2\n00:00:01.154 --> 00:00:11.154\n[SOUND]\n\n3\n00:00:13.002 --> 00:00:16.480\nHello and thank you for choosing DevPRO\nTV, helping you learn everywhere you go.\n\n4\n00:00:16.480 --> 00:00:19.620\nI'm your host Zach Memos,\nas we continue on with Python Data Model,\n\n5\n00:00:19.620 --> 00:00:24.180\nthe name of this episode is Descriptors,\nProperty Decorators.\n\n6\n00:00:24.180 --> 00:00:25.540\nWhat's that about?\n\n7\n00:00:25.540 --> 00:00:28.095\nJustin Denison, Justin,\ntell us what that's about please.\n\n8\n00:00:28.095 --> 00:00:30.610\n&gt;&gt; Well Zach I would be happy to actually,\n\n9\n00:00:30.610 --> 00:00:33.739\nwe're looking to re-decorate\nthis entire studio.\n\n10\n00:00:33.739 --> 00:00:34.520\n&gt;&gt; [LAUGH]\n\n11\n00:00:34.520 --> 00:00:35.870\n&gt;&gt; Now I just,\n\n12\n00:00:35.870 --> 00:00:39.920\nif you've been in Python for any little\ntime you've heard about decorators which\n\n13\n00:00:39.920 --> 00:00:44.960\nare functions that decorate other\nfunctions, you hang new functionality or\n\n14\n00:00:44.960 --> 00:00:47.220\nnew abilities on top of a function.\n\n15\n00:00:47.220 --> 00:00:50.970\nNow, we've talked a little\nbit about descriptors.\n\n16\n00:00:50.970 --> 00:00:56.420\nDescriptors, let's just make\nsure we're all on the same page.\n\n17\n00:00:56.420 --> 00:01:00.120\nYou may have heard about them before.\n\n18\n00:01:00.120 --> 00:01:06.640\nDescriptors are special properties that\nexist in the context of another object.\n\n19\n00:01:06.640 --> 00:01:11.620\nAnd these properties, as we've seen before\nmaking all these classes over the last few\n\n20\n00:01:11.620 --> 00:01:16.840\nepisodes, we've just been setting\nthese numbers or strings.\n\n21\n00:01:16.840 --> 00:01:20.810\nBut what if we have something more\ncomplex that actually represents,\n\n22\n00:01:20.810 --> 00:01:25.380\nyou maybe a color that only comes\nfrom a certain selections of colors?\n\n23\n00:01:25.380 --> 00:01:29.650\nOr maybe, we need it to be an email,\nbut we want it to be an email object so\n\n24\n00:01:29.650 --> 00:01:33.290\nthat we know it is valid, at least,\nfrom a format perspective.\n\n25\n00:01:33.290 --> 00:01:36.820\nNot reaching out to the email service and\nsaid, hey, is this email there?\n\n26\n00:01:37.980 --> 00:01:42.750\nIf we wanted to implement that,\nthen maybe strings don't, they don't work.\n\n27\n00:01:42.750 --> 00:01:44.470\nWe could put that in the Dunderen net.\n\n28\n00:01:45.850 --> 00:01:48.850\nHowever, that would be a lot\nof logic to put in there.\n\n29\n00:01:48.850 --> 00:01:54.260\nIf we instead made a descriptor, let's\ncall it email, and then inside of that\n\n30\n00:01:54.260 --> 00:02:00.100\nclass, it's actually another class,\nit has a get, a set and a delete.\n\n31\n00:02:00.100 --> 00:02:01.220\nThose are all dunder methods.\n\n32\n00:02:01.220 --> 00:02:05.360\nIf it has those three,\nit will behave just like anything else.\n\n33\n00:02:06.560 --> 00:02:11.510\nWe can also use decorators\nto set up descriptors, and\n\n34\n00:02:11.510 --> 00:02:16.540\nwhat it allows us to do is create\na property that has certain behaviors.\n\n35\n00:02:16.540 --> 00:02:18.550\nMaybe we need validation for setting.\n\n36\n00:02:18.550 --> 00:02:21.620\nMaybe getting or\nactually having a way or some composite,\n\n37\n00:02:21.620 --> 00:02:27.440\nmaybe it's computer value for deleting,\nI actually need to delete the email and\n\n38\n00:02:27.440 --> 00:02:30.720\nI need to also make sure\nthey're not in email list.\n\n39\n00:02:30.720 --> 00:02:33.060\nMaybe I need a couple of\nthings that need to happen.\n\n40\n00:02:33.060 --> 00:02:36.840\nSo descriptors are either objects or\n\n41\n00:02:36.840 --> 00:02:41.280\nkind of these properties that have a get,\na set, and a delete.\n\n42\n00:02:41.280 --> 00:02:45.280\nAnd the property decorator, you're like,\nwell if we're decorating a function,\n\n43\n00:02:45.280 --> 00:02:46.590\nhow's that making it an object.\n\n44\n00:02:46.590 --> 00:02:50.420\nThe property decorator is actually\na class that's creating an object for\n\n45\n00:02:50.420 --> 00:02:51.640\nthe class that you're setting up.\n\n46\n00:02:51.640 --> 00:02:56.368\nNow that was very, that was a lot of talk,\nI'm not gonna lie.\n\n47\n00:02:56.368 --> 00:03:00.559\n[CROSSTALK] All those words,\nyou're saying words and things Justin,\n\n48\n00:03:00.559 --> 00:03:01.918\nthat sounds amazing.\n\n49\n00:03:01.918 --> 00:03:05.088\nBut I wanted to give you a kind of\nan overview, maybe a couple of quick\n\n50\n00:03:05.088 --> 00:03:09.170\nexamples, but we're probably gonna have to\nbuild something for it to really sink in.\n\n51\n00:03:09.170 --> 00:03:11.260\nYou say, why would I use this?\n\n52\n00:03:11.260 --> 00:03:12.200\nWhat is it doing?\n\n53\n00:03:12.200 --> 00:03:13.660\nWho knows.\n\n54\n00:03:13.660 --> 00:03:17.880\nI think it's important to see these\nin the context of being used.\n\n55\n00:03:17.880 --> 00:03:23.040\nBecause that's how these are going\nto make sense, descriptors that is.\n\n56\n00:03:23.040 --> 00:03:26.250\nWe're gonna use the property\ndecorator at first to make them.\n\n57\n00:03:26.250 --> 00:03:30.190\nNow, I'll show you some other ways,\nprobably won't be in this episode,\n\n58\n00:03:30.190 --> 00:03:34.150\nthe property decorator is probably the\nmost accessible way to get things started.\n\n59\n00:03:34.150 --> 00:03:38.330\nSo let's go ahead and come to the screen\nhere and we are going to look at a couple\n\n60\n00:03:38.330 --> 00:03:42.050\nof things in the Python rep but we're\nnot gonna do a whole lot of exploration.\n\n61\n00:03:42.050 --> 00:03:46.780\nWe're gonna build a class, but\nin the Python record we can look\n\n62\n00:03:47.930 --> 00:03:50.990\npython3, and we can say help.\n\n63\n00:03:52.100 --> 00:03:53.670\nAnd just look at property.\n\n64\n00:03:53.670 --> 00:03:55.280\nAnd you're like what is that?\n\n65\n00:03:55.280 --> 00:03:58.310\nIf you click it, it's actually a class.\n\n66\n00:03:58.310 --> 00:04:02.480\nSo I will create a property\nobject that has a get.\n\n67\n00:04:02.480 --> 00:04:05.380\nIt says F get, F set, and F delete.\n\n68\n00:04:05.380 --> 00:04:08.620\nAnd if you scroll down,\nyou'll notice there is.\n\n69\n00:04:08.620 --> 00:04:09.680\nWell, what is this?\n\n70\n00:04:10.910 --> 00:04:13.000\nThat's kind of odd.\n\n71\n00:04:13.000 --> 00:04:14.440\nAnd then, class C.\n\n72\n00:04:14.440 --> 00:04:17.500\nThis is showing you\nthe difference between these.\n\n73\n00:04:17.500 --> 00:04:20.840\nSo if you come from another language and\nyou're used to getters and setters,\n\n74\n00:04:20.840 --> 00:04:25.520\nthis is get X, set X, delete X.\n\n75\n00:04:25.520 --> 00:04:29.750\nBut really,\nyou could make X a property of the,\n\n76\n00:04:29.750 --> 00:04:34.780\nlike it has here of C, instead of\nhaving get x, set x and delete x.\n\n77\n00:04:34.780 --> 00:04:39.390\nAnd you can do that by saying x equals,\nnotice that x is now what we're trying to\n\n78\n00:04:39.390 --> 00:04:45.160\naccess, with a get, a set, a delete,\nand whatever that description is.\n\n79\n00:04:45.160 --> 00:04:50.100\nIf we look yep documentation excuse me,\nI said description, documentation.\n\n80\n00:04:51.190 --> 00:04:53.700\nBut really,\nmost of the time you're gonna see this.\n\n81\n00:04:53.700 --> 00:04:59.900\nAnd this is a little more Phythonic is\nusing the property class as a decorator.\n\n82\n00:04:59.900 --> 00:05:05.070\nNotice @property covers the method x,\n\n83\n00:05:05.070 --> 00:05:09.598\nand then it gets back whatever\ndata is going to represent x.\n\n84\n00:05:09.598 --> 00:05:14.700\nAnd then @x.setter is\nregistering another method to\n\n85\n00:05:14.700 --> 00:05:19.070\nyour writing as how to set this value,\nokay?\n\n86\n00:05:19.070 --> 00:05:22.560\nAnd then well @x.deleter\nis how you delete.\n\n87\n00:05:23.990 --> 00:05:28.770\nNow if you're still kind of Iffy\non how this all comes to fruition.\n\n88\n00:05:28.770 --> 00:05:32.880\nWe'll hopefully illuminate that for\nyou by not just reading documentation but\n\n89\n00:05:32.880 --> 00:05:36.810\nbuilding something,\nseeing how it works out, so to speak.\n\n90\n00:05:38.020 --> 00:05:43.890\nSo let's look at descriptors, and\nthis is a little more of a topic,\n\n91\n00:05:43.890 --> 00:05:48.330\nbut let's say we are creating a class for\na car inventory, all right?\n\n92\n00:05:48.330 --> 00:05:51.660\nAnd each of these need to be a car object.\n\n93\n00:05:51.660 --> 00:05:55.670\nAnd for now, all we want is color.\n\n94\n00:05:55.670 --> 00:05:57.730\nOkay, we just want to be\nable to register the color.\n\n95\n00:05:57.730 --> 00:05:58.300\nI'm doing this for\n\n96\n00:05:58.300 --> 00:06:02.560\nbrevity, you probably want to keep track\nof more than just the color of the car.\n\n97\n00:06:03.590 --> 00:06:05.700\nHey, do you have any Buicks?\n\n98\n00:06:05.700 --> 00:06:07.030\nI got red.\n\n99\n00:06:07.030 --> 00:06:09.640\nSo I'm not sure that would\nwork out in the long-term.\n\n100\n00:06:09.640 --> 00:06:10.400\n&gt;&gt; The red Buick, yeah,\n\n101\n00:06:10.400 --> 00:06:12.680\nthat was a popular one.\n&gt;&gt; No, I didn't say it was a Buick,\n\n102\n00:06:12.680 --> 00:06:14.317\nI just said it was red.\n&gt;&gt; Yeah, [CROSSTALK]\n\n103\n00:06:14.317 --> 00:06:16.888\n&gt;&gt; Cuz that's all we got in our little\n\n104\n00:06:16.888 --> 00:06:17.779\nlist here.\n\n105\n00:06:17.779 --> 00:06:22.330\nSo self.color equals color, and\nlet's see how this class normally works.\n\n106\n00:06:22.330 --> 00:06:29.080\nSo car equals car and let's say it's red,\nsince we're going with red cars.\n\n107\n00:06:29.080 --> 00:06:32.330\nAnd if we look at python dash\nthree descriptors, just like that,\n\n108\n00:06:32.330 --> 00:06:33.010\nyou can say car.\n\n109\n00:06:33.010 --> 00:06:35.000\nOkay, that's a car object.\n\n110\n00:06:35.000 --> 00:06:36.520\nWhat about car.color?\n\n111\n00:06:36.520 --> 00:06:43.560\nIt's red.\nWhat about car.color equals, well, green.\n\n112\n00:06:43.560 --> 00:06:46.810\nJust repainted the car If I look at.\n\n113\n00:06:46.810 --> 00:06:47.860\nI set that property.\n\n114\n00:06:47.860 --> 00:06:50.900\nAnd we've seen in previous episodes\nthat we can hijack, get adder,\n\n115\n00:06:50.900 --> 00:06:54.245\nset adder, del adder.\n\n116\n00:06:54.245 --> 00:06:56.140\nYou could make a case.\n\n117\n00:06:56.140 --> 00:06:57.700\nOkay, I see what you're doing.\n\n118\n00:06:57.700 --> 00:07:00.000\nBut now if you have a bunch of\nproperties you need to take over.\n\n119\n00:07:00.000 --> 00:07:01.560\nWe're just seeing one.\n\n120\n00:07:01.560 --> 00:07:04.250\nThen all of your logic is in get adder,\ndel adder.\n\n121\n00:07:04.250 --> 00:07:07.311\nMaybe that's not sustainable.\n\n122\n00:07:07.311 --> 00:07:11.040\nAnd if we wanted to delete car.color,\n\n123\n00:07:11.040 --> 00:07:15.562\nthen car.color, it doesn't exist anymore.\n\n124\n00:07:15.562 --> 00:07:19.631\nAnd that's just during the running\nof this in the rapple.\n\n125\n00:07:19.631 --> 00:07:25.050\nBut you know, wait for it,\ndescriptors There we go.\n\n126\n00:07:25.050 --> 00:07:28.730\nI look at this and, maybe I want this\nto be a little bit more private.\n\n127\n00:07:28.730 --> 00:07:30.550\nI want to intercept, if people ask for\n\n128\n00:07:30.550 --> 00:07:36.310\ncolor, I don't want to just get\nself.color a direct access.\n\n129\n00:07:36.310 --> 00:07:39.440\nSo what you'll see is someone will come\nand put either a single underscore, or\n\n130\n00:07:39.440 --> 00:07:43.660\nsometimes a double underscore, which\nwill do something called name angling.\n\n131\n00:07:43.660 --> 00:07:46.000\nIt'll do like weird name spacing things.\n\n132\n00:07:46.000 --> 00:07:52.164\nI keep single underscore just in case\nI need to grab ahold of it, all right?\n\n133\n00:07:52.164 --> 00:07:55.728\nNow, what we're gonna do is\nif someone says car.color,\n\n134\n00:07:55.728 --> 00:07:58.284\nI'm gonna add a little extra logic here.\n\n135\n00:07:58.284 --> 00:08:02.641\nAnd I'm gonna do that by saying Hey,\nI'm defining the property.\n\n136\n00:08:02.641 --> 00:08:07.166\nAnd the property is going to be color and\n\n137\n00:08:07.166 --> 00:08:11.018\nit's going to take self, okay?\n\n138\n00:08:11.018 --> 00:08:12.510\nThis is your getter.\n\n139\n00:08:12.510 --> 00:08:16.438\nThis is how you are getting\nthe respective property, okay?\n\n140\n00:08:16.438 --> 00:08:20.090\nSelf._color just like so.\n\n141\n00:08:20.090 --> 00:08:25.250\nSo it's looking in and finding this on\nthe object itself and then returning that.\n\n142\n00:08:30.830 --> 00:08:36.770\nActually let's take a look at this because\nI think exploring this will illustrate\n\n143\n00:08:36.770 --> 00:08:38.910\nwhy these are kind of handy.\n\n144\n00:08:38.910 --> 00:08:42.618\nSo if we look at car,\nif I say car.color it returns red.\n\n145\n00:08:42.618 --> 00:08:50.073\nLet's say car.color =\ngreen can't set attribute.\n\n146\n00:08:50.073 --> 00:08:53.210\nThat's interesting, I just made immutable.\n\n147\n00:08:55.150 --> 00:09:01.750\nThis, I could do this car._color= green.\n\n148\n00:09:01.750 --> 00:09:04.810\nAnd then if I ask for car.color,\n\n149\n00:09:04.810 --> 00:09:10.310\nI get green bag because I\ndon't have ultimate privacy.\n\n150\n00:09:10.310 --> 00:09:14.330\nBut if someone says car.color,\nnot car_color = green,\n\n151\n00:09:14.330 --> 00:09:20.040\nbecause I haven't created a setter,\nit says hey, no you can't do that.\n\n152\n00:09:20.040 --> 00:09:21.110\nNope.\n\n153\n00:09:21.110 --> 00:09:25.280\nSo you could try to enforce\nthe interface that way.\n\n154\n00:09:25.280 --> 00:09:26.200\nSo that's handy.\n\n155\n00:09:26.200 --> 00:09:27.290\nThere are ways around it.\n\n156\n00:09:27.290 --> 00:09:28.726\nI'm not gonna lie.\n\n157\n00:09:28.726 --> 00:09:33.605\nBut by using @property,\nwe get the getter method.\n\n158\n00:09:33.605 --> 00:09:37.352\nIf you come from a language or\na background that's getters, setters,\n\n159\n00:09:37.352 --> 00:09:39.720\nall day long, you may be used to this.\n\n160\n00:09:39.720 --> 00:09:43.040\nNow, why would we want to do this?\n\n161\n00:09:44.120 --> 00:09:49.089\nAnd this is an oversimplification,\nwhat if you had something where\n\n162\n00:09:49.089 --> 00:09:53.460\nbefore you could return this,\nsome calculation, right?\n\n163\n00:09:53.460 --> 00:09:57.255\nYou need to do some calculation and\nthen return that.\n\n164\n00:09:57.255 --> 00:10:00.770\nOr you're still just saying car a color\nbut it's running this entire function,\n\n165\n00:10:00.770 --> 00:10:02.850\nthis method, okay?\n\n166\n00:10:02.850 --> 00:10:04.326\nWe're gonna leave that and\nwe'll come back to it.\n\n167\n00:10:04.326 --> 00:10:09.130\nBut now how do I set up the color setter.\n\n168\n00:10:09.130 --> 00:10:12.810\nI say @color because\ncolor is a noun object.\n\n169\n00:10:12.810 --> 00:10:15.417\nIt's an object property.\n\n170\n00:10:15.417 --> 00:10:22.220\n.setter and I'm gonna say,\nwell this also gonna be called color.\n\n171\n00:10:22.220 --> 00:10:25.960\nThis is not something we typically\ndo in Python and wait for it.\n\n172\n00:10:29.940 --> 00:10:31.880\nWe have two methods with the same name.\n\n173\n00:10:31.880 --> 00:10:36.936\nBut that's because we're wrapping\nthem up in a property, okay?\n\n174\n00:10:36.936 --> 00:10:42.309\nSo here we go let's say\nself._color = value,\n\n175\n00:10:42.309 --> 00:10:45.068\nwhatever it's in that.\n\n176\n00:10:45.068 --> 00:10:50.232\nAnd then finally for\ndeletion deleter that's kind\n\n177\n00:10:50.232 --> 00:10:55.403\nof a hard word to say and\nthen def.color(self).\n\n178\n00:10:55.403 --> 00:11:02.967\nAnd then, let's see here, we want\nto del self._color, just like that.\n\n179\n00:11:02.967 --> 00:11:06.650\nThis is a way of, hey Zach,\nI need you to use this car class.\n\n180\n00:11:07.710 --> 00:11:12.330\nI want you to set the colors but he has\nto do it in the way that I dictate, okay?\n\n181\n00:11:12.330 --> 00:11:14.870\nAnd we'll see how this comes into play.\n\n182\n00:11:14.870 --> 00:11:17.160\nOkay, here we go.\n\n183\n00:11:19.183 --> 00:11:21.292\nThe scriptures just like that.\n\n184\n00:11:21.292 --> 00:11:24.270\nAnd if we look at car.color,\nthere's our getter.\n\n185\n00:11:24.270 --> 00:11:27.905\nNotice we have some calculation before it\nruns that, it runs that entire function,\n\n186\n00:11:27.905 --> 00:11:28.888\nthen we have a return.\n\n187\n00:11:28.888 --> 00:11:36.140\nI say car.color= we'll go green.\n\n188\n00:11:36.140 --> 00:11:37.499\nIt failed the last time,\n\n189\n00:11:37.499 --> 00:11:41.531\nit works now because we implemented\nthe logic that actually sets this up.\n\n190\n00:11:41.531 --> 00:11:43.690\nI'll say car.color again.\n\n191\n00:11:43.690 --> 00:11:46.020\nIt's now green, but\nit runs this calculation again.\n\n192\n00:11:47.550 --> 00:11:50.400\nSo maybe this calculation\nis just making sure it's\n\n193\n00:11:50.400 --> 00:11:52.440\npersisted to a database somewhere.\n\n194\n00:11:52.440 --> 00:11:57.023\nEvery time I read it, I wanna double-check\nthat nothing's changed, okay?\n\n195\n00:11:57.023 --> 00:11:59.400\nOr maybe I wanna validate it.\n\n196\n00:11:59.400 --> 00:12:01.590\nOr, well, maybe it just sends an email.\n\n197\n00:12:01.590 --> 00:12:03.650\nThat would be a horrible program,\ncuz that's a lot of emails.\n\n198\n00:12:03.650 --> 00:12:06.000\nBut that's something we could do.\n\n199\n00:12:06.000 --> 00:12:13.308\nAnd then if we said del.car.color,\nit is running using that deleter function.\n\n200\n00:12:13.308 --> 00:12:17.800\nNow, [COUGH] why would we set up a\ndescriptor using this add property method?\n\n201\n00:12:19.970 --> 00:12:26.663\nLet's say that we have something\nlike this, wait for it, descriptors.\n\n202\n00:12:26.663 --> 00:12:30.872\nThat's some calculation,\nthat makes sense, but for setters,\n\n203\n00:12:30.872 --> 00:12:32.869\nwhat if I said, you know what?\n\n204\n00:12:32.869 --> 00:12:36.654\nI do want you to set the color but\nthe cars on this lot in this app,\n\n205\n00:12:36.654 --> 00:12:40.380\nwhatever it may be,\nthey only come in red, green, and blue.\n\n206\n00:12:40.380 --> 00:12:44.369\nYou try to do anything else and\nit will go absolutely not, okay?\n\n207\n00:12:44.369 --> 00:12:51.420\nSo if value in and we're using set\nliteral these are not dictionaries.\n\n208\n00:12:51.420 --> 00:12:56.480\nred, green, blue, then we're\n\n209\n00:12:56.480 --> 00:13:01.903\ngoing to raise an AttributeError,\n\n210\n00:13:01.903 --> 00:13:06.798\nI think that's how that's it.\n\n211\n00:13:06.798 --> 00:13:08.715\nActually let's just go with ValueError.\n\n212\n00:13:10.510 --> 00:13:13.700\nMaybe not the strictest\nconformance of the error types.\n\n213\n00:13:13.700 --> 00:13:15.100\nSo I do apologize for that.\n\n214\n00:13:17.550 --> 00:13:22.208\nThe color, I choose an f-string,\nthe color and\n\n215\n00:13:22.208 --> 00:13:27.789\nthen we're just gonna substitute,\nis not valid, okay?\n\n216\n00:13:27.789 --> 00:13:31.220\nSo okay, we can set it to red,\ngreen, or blue.\n\n217\n00:13:32.270 --> 00:13:35.780\nWe've imposed constraints\non the assignment.\n\n218\n00:13:35.780 --> 00:13:36.820\nLet's see how this plays out.\n\n219\n00:13:38.580 --> 00:13:42.500\nSo we say car.color,\nit's doing some calculations, it's red.\n\n220\n00:13:42.500 --> 00:13:43.860\nGot it.\n\n221\n00:13:43.860 --> 00:13:50.562\nWhat if we say car.color = blue.\n\n222\n00:13:50.562 --> 00:13:52.323\nThe color blue is not valid.\n\n223\n00:13:52.323 --> 00:13:57.960\nIt looks like we've got something going\non here, maybe I mistyped, wait for it.\n\n224\n00:13:59.380 --> 00:14:05.140\nSo we got some live action debugging.\n&gt;&gt; I love that.\n\n225\n00:14:05.140 --> 00:14:11.500\nTeachable moments.\n&gt;&gt; And that looks fine.\n\n226\n00:14:11.500 --> 00:14:17.220\nIf value, if value not in, logic's wrong.\n\n227\n00:14:17.220 --> 00:14:20.140\nIt will always fail keeping it that way.\n\n228\n00:14:21.190 --> 00:14:23.030\nLet's go here.\n\n229\n00:14:23.030 --> 00:14:28.387\nNow if I say car.color = blue it works,\nokay?\n\n230\n00:14:28.387 --> 00:14:31.300\nIt didn't raise an error\nbecause that didn't catch.\n\n231\n00:14:31.300 --> 00:14:35.600\nBecause it is blue, it's in that set\nof pre-defined colors we can have.\n\n232\n00:14:35.600 --> 00:14:38.960\nSo if we look back it runs that\ncalculation, it says hey the color's blue.\n\n233\n00:14:40.310 --> 00:14:44.680\nBut now if I say color = chartreuse.\n\n234\n00:14:46.980 --> 00:14:51.100\nNope the color chartreuse is not valid,\nso we're gonna essentially\n\n235\n00:14:51.100 --> 00:14:55.280\nenforce certain valid\noptions to be set for\n\n236\n00:14:55.280 --> 00:15:00.122\na parameter by using this setter property,\nright?\n\n237\n00:15:00.122 --> 00:15:02.137\nNow, I'm thinking,\n\n238\n00:15:02.137 --> 00:15:07.370\nif this is an actual car and it's on a car\nlot and we're keeping car inventory,\n\n239\n00:15:07.370 --> 00:15:12.160\nit is very unlikely we can look at it and\nsee what color it is.\n\n240\n00:15:12.160 --> 00:15:13.490\nWe can get it.\n\n241\n00:15:13.490 --> 00:15:15.430\nWe can set it,\nmaybe we're re-painting, right?\n\n242\n00:15:15.430 --> 00:15:18.100\nWe're doing some custom word.\n\n243\n00:15:19.630 --> 00:15:22.570\nI have yet to see a car that makes any\nsense to me that we just get rid of\n\n244\n00:15:22.570 --> 00:15:24.380\nthe color and it's just bare metal.\n\n245\n00:15:24.380 --> 00:15:26.220\nBecause then it turns into rust for\nthe most part.\n\n246\n00:15:26.220 --> 00:15:27.920\nThere are exceptions, right?\n\n247\n00:15:27.920 --> 00:15:30.904\nIf it's made out of stainless steel or\nmaybe gold-plated.\n\n248\n00:15:30.904 --> 00:15:31.920\n&gt;&gt; Aluminium.\n\n249\n00:15:31.920 --> 00:15:33.813\n&gt;&gt; Aluminium will oxidize but\n\n250\n00:15:33.813 --> 00:15:36.120\ntypically not painted, right?\n\n251\n00:15:37.130 --> 00:15:39.500\nSo we need to enforce that.\n\n252\n00:15:39.500 --> 00:15:40.210\nSo how do we do that?\n\n253\n00:15:40.210 --> 00:15:45.097\nWe come back in here and\nwe just say, well, descriptors.\n\n254\n00:15:45.097 --> 00:15:50.103\nAnd for the deleter, instead of allowing\n\n255\n00:15:50.103 --> 00:15:56.404\nsomeone to delete,\nlet's say, raise TypeError.\n\n256\n00:15:56.404 --> 00:16:01.530\nActually, I think this is more\nappropriately an AttributeError.\n\n257\n00:16:01.530 --> 00:16:02.732\nYou cannot delete.\n\n258\n00:16:04.853 --> 00:16:10.537\nRight, now, let's see if we\nhave that all squared away,\n\n259\n00:16:10.537 --> 00:16:13.580\npython3 -i, wait for it.\n\n260\n00:16:13.580 --> 00:16:17.721\nFor some reason I'm having a really hard\ntime remembering that file name even\n\n261\n00:16:17.721 --> 00:16:20.211\nthough it's what's in\nthe title of the show.\n\n262\n00:16:20.211 --> 00:16:22.520\nSo we have car.color.\n\n263\n00:16:22.520 --> 00:16:23.896\nWe know that setting works.\n\n264\n00:16:23.896 --> 00:16:28.329\nLet's make sure we didn't mess up setting,\nblue, okay?\n\n265\n00:16:28.329 --> 00:16:33.297\ncar.color = green this is going\nthrough a bunch of repaints,\n\n266\n00:16:33.297 --> 00:16:38.466\nsomeone was like I just wanna remove it,\nI don't want any color.\n\n267\n00:16:38.466 --> 00:16:40.177\nOkay, well, we'll try.\n\n268\n00:16:40.177 --> 00:16:43.525\ncar.color and actually,\nyou cannot delete, well,\n\n269\n00:16:43.525 --> 00:16:48.403\nwe have disallowed the deleting of the\nattribute because maybe it's needed for\n\n270\n00:16:48.403 --> 00:16:52.280\nour inventory system,\nour application, whatever it may be.\n\n271\n00:16:53.530 --> 00:16:56.220\nSo that's the way we can use\nthe property decorator to\n\n272\n00:16:56.220 --> 00:17:00.370\ncreate what's called a descriptor that\nhas a get, a set, and a delete, okay?\n\n273\n00:17:01.390 --> 00:17:06.686\nThis is not the only way, but this is\nprobably a good first approximation.\n\n274\n00:17:06.686 --> 00:17:09.837\nThe one thing that does crop up,\npeople are like, well, now,\n\n275\n00:17:09.837 --> 00:17:11.390\nI have to write three methods.\n\n276\n00:17:12.870 --> 00:17:16.130\nWell, you do, to access color.\n\n277\n00:17:16.130 --> 00:17:18.760\nAnd they go, do I have to name\nall the methods the same?\n\n278\n00:17:19.920 --> 00:17:21.120\nThat is also a good question.\n\n279\n00:17:21.120 --> 00:17:22.590\nThat could be confusing, maybe for\n\n280\n00:17:22.590 --> 00:17:28.180\nnew developers or someone coming from,\nwell, these are all named color.\n\n281\n00:17:28.180 --> 00:17:28.830\nDoes it matter?\n\n282\n00:17:29.850 --> 00:17:35.900\nWell, first off, I think it might matter\nsome because I use @color.setter.\n\n283\n00:17:35.900 --> 00:17:39.840\nLet's change this to x, right?\n\n284\n00:17:39.840 --> 00:17:40.865\nJust to check it out.\n\n285\n00:17:43.290 --> 00:17:45.910\nAnd the name color is not defined.\n\n286\n00:17:45.910 --> 00:17:47.650\nSo those do have to match.\n\n287\n00:17:49.900 --> 00:17:51.450\nSo that makes sense.\n\n288\n00:17:52.740 --> 00:17:55.983\nLet's go make them match.\n\n289\n00:17:55.983 --> 00:18:02.245\nAll right now, let's change this to x.\n\n290\n00:18:02.245 --> 00:18:08.838\nSo and everything's good, car.x,\n\n291\n00:18:08.838 --> 00:18:14.405\nthat's good, car.x = blue.\n\n292\n00:18:14.405 --> 00:18:17.036\nCannot set attribute.\n\n293\n00:18:17.036 --> 00:18:21.590\nWell, hmm, that's kind of odd.\n\n294\n00:18:21.590 --> 00:18:23.849\nWell, why not?\n\n295\n00:18:23.849 --> 00:18:25.184\nLet's go look.\n\n296\n00:18:28.311 --> 00:18:33.355\nWhy, I passed in the value for\nx.setter, that makes sense.\n\n297\n00:18:33.355 --> 00:18:37.508\nself.color _color, but\n\n298\n00:18:37.508 --> 00:18:43.110\nblue was in there, but I can't set.\n\n299\n00:18:43.110 --> 00:18:45.399\nSo there's some weirdness there, right?\n\n300\n00:18:45.399 --> 00:18:48.900\nWhat if we change this now to x,\n\n301\n00:18:48.900 --> 00:18:53.884\nto actually be x.setter\nis the x method with\n\n302\n00:18:53.884 --> 00:18:58.481\nthis function signature, this setup.\n\n303\n00:18:58.481 --> 00:19:02.379\nSo car.color = blue, and\n\n304\n00:19:02.379 --> 00:19:06.110\nnow it works, all right?\n\n305\n00:19:06.110 --> 00:19:09.619\nI did color, I should do car.x = blue.\n\n306\n00:19:09.619 --> 00:19:14.240\nThat also works, car.x,\nsome calculation, blue.\n\n307\n00:19:14.240 --> 00:19:19.300\nIt is important about those names, okay,\nyou have to follow that convention.\n\n308\n00:19:19.300 --> 00:19:21.340\nAnd what is that convention?\n\n309\n00:19:21.340 --> 00:19:24.937\nWhatever you define with the at property,\nthat is the name of the property.\n\n310\n00:19:24.937 --> 00:19:27.130\nIf you do object.something,\nthat's the property.\n\n311\n00:19:28.180 --> 00:19:31.850\nCorrespondingly, you need color.setter.\n\n312\n00:19:31.850 --> 00:19:36.630\nSo whatever that name is for the setter,\nright here, that needs to be here as well.\n\n313\n00:19:37.950 --> 00:19:44.040\nAnd just to keep things consistent, well,\nwe saw that if those don't match for\n\n314\n00:19:44.040 --> 00:19:47.860\nthe setter and by extension, we're making\nthe assumption it works for the deleter.\n\n315\n00:19:47.860 --> 00:19:48.450\nWhy wouldn't it?\n\n316\n00:19:49.910 --> 00:19:51.790\nThen those don't match up either.\n\n317\n00:19:51.790 --> 00:19:54.840\nSo you do have to follow this convention,\nand that's because Python's using\n\n318\n00:19:54.840 --> 00:19:59.220\nsome tricks to say, okay,\nthis goes here and this goes here.\n\n319\n00:19:59.220 --> 00:20:04.207\nBut by doing this, you get a little more\ncontrol, and to me, it's a little cleaner.\n\n320\n00:20:04.207 --> 00:20:06.755\nIf you're comfortable with decorators,\nyou're like, okay,\n\n321\n00:20:06.755 --> 00:20:07.739\nI have a color property.\n\n322\n00:20:07.739 --> 00:20:12.342\nThis is how I set the property when\nI do object.property.equals, and\n\n323\n00:20:12.342 --> 00:20:16.040\nthen if I try to delete it,\nthis is what happens, got it.\n\n324\n00:20:17.210 --> 00:20:20.150\nThis color in this case is a descriptor.\n\n325\n00:20:20.150 --> 00:20:23.833\nIt describes the color\nattribute of the car.\n\n326\n00:20:23.833 --> 00:20:28.810\nWe didn't set it up here,\nwe set backing data.\n\n327\n00:20:28.810 --> 00:20:30.700\nAnd that makes sense.\n\n328\n00:20:30.700 --> 00:20:33.250\nSo we have some backing data,\nbut then we define\n\n329\n00:20:33.250 --> 00:20:38.350\nkind of something that sits up front,\nthat allows appropriate interactions.\n\n330\n00:20:38.350 --> 00:20:42.702\nBut that's not the only thing left with\nthe scriptors, but maybe it's a good time\n\n331\n00:20:42.702 --> 00:20:45.176\nto go ahead and let this gurgle.\n&gt;&gt; Sink in.\n\n332\n00:20:45.176 --> 00:20:46.895\n&gt;&gt; Yeah, let it stew around, and\n\n333\n00:20:46.895 --> 00:20:51.079\nthen we'll come back and talk about\nmore descriptors in another episode.\n\n334\n00:20:51.079 --> 00:20:51.704\n&gt;&gt; Well done, sir.\n\n335\n00:20:51.704 --> 00:20:55.374\nDescriptors, property decorators,\nthere I said it right, Justin,\n\n336\n00:20:55.374 --> 00:20:57.433\nany last words before we move on?\n&gt;&gt; Well,\n\n337\n00:20:57.433 --> 00:21:00.946\njust keep in mind, we still have\na little more to talk about descriptors.\n\n338\n00:21:00.946 --> 00:21:04.528\nReally try to internalize this,\nplay around, break it,\n\n339\n00:21:04.528 --> 00:21:08.697\nsee if this makes sense,\nbecause we're going to reproduce similar\n\n340\n00:21:08.697 --> 00:21:11.160\nfunctionality\n&gt;&gt; But\n\n341\n00:21:11.160 --> 00:21:14.780\nit's not going to be using a decorator,\nmaybe that's a better fit for you.\n\n342\n00:21:14.780 --> 00:21:18.960\nSo if you have a decent grasp of what\nthey mean, you'll be good to go.\n\n343\n00:21:18.960 --> 00:21:20.040\n&gt;&gt; Another excellent episode in\n\n344\n00:21:20.040 --> 00:21:21.810\nthe Python Data Model series.\n\n345\n00:21:21.810 --> 00:21:23.500\nMake sure you watch every\nsingle one of them.\n\n346\n00:21:23.500 --> 00:21:24.770\nJustin's doing a great job, isn't he?\n\n347\n00:21:24.770 --> 00:21:27.910\nHe really is, and you're in that\ncourse library, I can see you.\n\n348\n00:21:27.910 --> 00:21:30.098\nAnd there's thousands of\nother videos in there, and\n\n349\n00:21:30.098 --> 00:21:31.710\nthey're there to help you go further.\n\n350\n00:21:31.710 --> 00:21:34.395\nSo check those out, too, and\ntell everybody you know about DevProTV.\n\n351\n00:21:34.395 --> 00:21:37.190\nA good Dev Pro is always learning.\n\n352\n00:21:37.190 --> 00:21:39.470\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n353\n00:21:39.470 --> 00:21:40.424\n&gt;&gt; And we will see you soon.\n\n354\n00:21:40.424 --> 00:21:45.041\n[MUSIC]\n\n",
          "vimeoId": "253983534"
        },
        {
          "description": "In this episode, Justin and Zach discuss and implement a custom descriptor object. Additonally, Justin demonstrates how to use a descriptor as a property in another class.",
          "length": "1564",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-4-1-descriptors_creating_a_custom_descriptor-020118-PGM.00_28_20_26.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-4-1-descriptors_creating_a_custom_descriptor-020118-PGM.00_28_20_26.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-5-4-1-descriptors_creating_a_custom_descriptor-020118-PGM.00_28_20_26.Still001-sm.jpg",
          "title": "Descriptors: Creating a Custom Descriptor",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.565 --> 00:00:17.001\nHello and thank you for choosing DevProTV,\nhelping you learn everywhere you go.\n\n3\n00:00:17.001 --> 00:00:21.120\nI'm your host, Zach Memos,\nas we continue on with Python Data Model.\n\n4\n00:00:21.120 --> 00:00:25.330\nThis episode is Descriptors,\nCreating a Custom Descriptor.\n\n5\n00:00:25.330 --> 00:00:25.950\nAnd once again,\n\n6\n00:00:25.950 --> 00:00:28.970\nJustin Dennison has said he would help\nus out because he's that kind of a guy.\n\n7\n00:00:28.970 --> 00:00:29.690\nHe's awesome.\n\n8\n00:00:29.690 --> 00:00:32.320\nHey Justin, thanks for being here.\n&gt;&gt; Thanks for having me back Zach, and\n\n9\n00:00:32.320 --> 00:00:38.150\nhopefully I can help us out, help kind\nof see the allure of descriptors.\n\n10\n00:00:38.150 --> 00:00:41.340\nThe utility if you will.\n&gt;&gt; And in a previous episode,\n\n11\n00:00:41.340 --> 00:00:44.830\nwe saw using the property decorator,\n@property,\n\n12\n00:00:44.830 --> 00:00:48.150\nwe could create custom logic around\ngetting, setting, and deleting.\n\n13\n00:00:48.150 --> 00:00:50.040\nWell those three operations,\n\n14\n00:00:50.040 --> 00:00:53.740\nif we had an object that had\nthose in a very particular way?\n\n15\n00:00:53.740 --> 00:00:57.970\nWell they can be used in place or\nusing the property decorator.\n\n16\n00:00:57.970 --> 00:01:01.080\nSo in order to demonstrate this so\nwe can see side by side,\n\n17\n00:01:01.080 --> 00:01:05.020\nwe're going to work alongside what\nwe created in the previous episode.\n\n18\n00:01:05.020 --> 00:01:07.640\nNow if you don't have that,\nthat's perfectly okay.\n\n19\n00:01:07.640 --> 00:01:12.410\nWhen we open it up, just give us a quick\npause, get that, take a look at that,\n\n20\n00:01:12.410 --> 00:01:13.439\nand then carry on.\n&gt;&gt; And\n\n21\n00:01:13.439 --> 00:01:15.950\nthen they're playing in that sandbox.\n&gt;&gt; Yeah, yeah.\n\n22\n00:01:15.950 --> 00:01:19.230\nOr go back, watch that previous episode,\ncome back again.\n\n23\n00:01:19.230 --> 00:01:21.050\nSo it's all good.\n\n24\n00:01:21.050 --> 00:01:22.920\nNow, there's not a lot to say.\n\n25\n00:01:22.920 --> 00:01:27.330\nDescriptors have a GetASet and\na Delete method, right?\n\n26\n00:01:27.330 --> 00:01:28.940\nYou can implement the logic as you see,\n\n27\n00:01:28.940 --> 00:01:33.350\nbut they represent some\nproperty on another object.\n\n28\n00:01:33.350 --> 00:01:36.100\nSo we have like an object\nin an object kind of thing.\n\n29\n00:01:36.100 --> 00:01:39.910\nAnd on Python pretty much everything is\nan object, so we should be used to that,\n\n30\n00:01:39.910 --> 00:01:41.120\neven if we don't think of them that way.\n\n31\n00:01:42.210 --> 00:01:44.040\nSo let's go ahead and\ncome to the screen here and\n\n32\n00:01:44.040 --> 00:01:47.300\ndo a quick overview of what we\nhave in descriptors as it stands.\n\n33\n00:01:47.300 --> 00:01:48.890\nWe have a car class.\n\n34\n00:01:48.890 --> 00:01:52.110\nAnd it is storing the color, okay?\n\n35\n00:01:52.110 --> 00:01:54.860\nAs I said, in the grand scheme of things,\n\n36\n00:01:54.860 --> 00:01:58.570\nwe probably need to store more than\nthe color, that's what we're coming to.\n\n37\n00:01:58.570 --> 00:02:01.030\nWe had that at property and the setter and\n\n38\n00:02:01.030 --> 00:02:05.320\nthe deleter, right, the at property\nactually defines the getter.\n\n39\n00:02:05.320 --> 00:02:12.210\nThis is how our color, if we do CRDA\ncolor, using this variable down here, or\n\n40\n00:02:12.210 --> 00:02:16.010\nCRDA color equals, these are the methods\nthat are used to determine that behavior.\n\n41\n00:02:17.790 --> 00:02:21.360\nNow, I could go wild and say,\nwhat is the make, the model,\n\n42\n00:02:21.360 --> 00:02:24.230\nthe VIN, and things of that nature.\n\n43\n00:02:24.230 --> 00:02:25.820\nBut I'm just gonna pick one, and\n\n44\n00:02:25.820 --> 00:02:29.650\nmaybe you can implement some of\nthe other ones just to try things out.\n\n45\n00:02:29.650 --> 00:02:32.006\nIf we come here, self.color.\n\n46\n00:02:32.006 --> 00:02:36.660\nI'm actually gonna say vin,\nall right, the vin number.\n\n47\n00:02:36.660 --> 00:02:40.060\nThis determines where was manufacture,\nwhat was the color code,\n\n48\n00:02:40.060 --> 00:02:42.740\nwhat were the engine options,\nthings of that nature.\n\n49\n00:02:42.740 --> 00:02:47.710\nI am not saying that I am willing to\nadhere to an appropriate VIN number\n\n50\n00:02:47.710 --> 00:02:50.160\nformat, we are going to fake that.\n\n51\n00:02:50.160 --> 00:02:52.460\nBut does every car have a VIN number?\n\n52\n00:02:52.460 --> 00:02:53.148\nAbsolutely.\n\n53\n00:02:53.148 --> 00:02:55.568\nA vehicle identification number.\n&gt;&gt; Mine doesn't.\n\n54\n00:02:55.568 --> 00:02:56.608\n&gt;&gt; You shouldn't tell anybody that.\n\n55\n00:02:56.608 --> 00:02:59.225\n&gt;&gt; [LAUGH]\n\n56\n00:02:59.225 --> 00:02:59.904\n&gt;&gt; It does have a VIN number.\n\n57\n00:02:59.904 --> 00:03:03.032\nI can vouch for it.\n&gt;&gt; [LAUGH]\n\n58\n00:03:03.032 --> 00:03:04.416\n&gt;&gt; But we're gonna assume that\n\n59\n00:03:04.416 --> 00:03:06.730\nevery car has a VIN number and\nwe have to keep it.\n\n60\n00:03:06.730 --> 00:03:07.420\nAll right?\n\n61\n00:03:08.500 --> 00:03:09.870\nSo how could I go about that?\n\n62\n00:03:09.870 --> 00:03:12.586\nI could use the add property\nlike I have here, okay?\n\n63\n00:03:12.586 --> 00:03:18.020\nAdd property, dev, VIN,\ncolored offest, right?\n\n64\n00:03:18.020 --> 00:03:19.660\nYou do just do just those things.\n\n65\n00:03:21.210 --> 00:03:26.850\nHowever, however, what I need instead\n\n66\n00:03:26.850 --> 00:03:32.287\nis another object that\nrepresents a VIN number, right?\n\n67\n00:03:32.287 --> 00:03:37.685\nSo vin.self, and I got to make sure,\n\n68\n00:03:37.685 --> 00:03:42.590\nI'm going to set default number.\n\n69\n00:03:42.590 --> 00:03:47.526\nAnd we'll see why, wait a minute,\nI need 0 1 2 3 4 5 6,.\n\n70\n00:03:47.526 --> 00:03:49.442\nOkay 1 2 3 4 5 6.\n\n71\n00:03:49.442 --> 00:03:50.228\nYou can tell [INAUDIBLE] I\nstarted counting with zero.\n\n72\n00:03:50.228 --> 00:03:54.070\n[LAUGH] I think that's 9.\n\n73\n00:03:54.070 --> 00:03:57.120\nIt should be 9, and here we go.\n\n74\n00:03:57.120 --> 00:04:04.150\nSo we're gonna say vin = vin,\njust like that, okay?\n\n75\n00:04:04.150 --> 00:04:07.510\nNow, why am I choosing VIN number?\n\n76\n00:04:07.510 --> 00:04:11.160\nWell, I wanna use this as a custom\ndescriptor to enforce a behavior.\n\n77\n00:04:11.160 --> 00:04:14.210\nI'm gonna say VIN numbers\nneed to be nine digits.\n\n78\n00:04:14.210 --> 00:04:17.650\nThey need to be nine numeric digits.\n\n79\n00:04:17.650 --> 00:04:19.382\nIs that true for all VINs?\n\n80\n00:04:19.382 --> 00:04:24.110\nNo, actually I did some research on this,\nit's country specific and\n\n81\n00:04:24.110 --> 00:04:28.090\nusually there's letters in there,\nwe're simplifying it for\n\n82\n00:04:28.090 --> 00:04:29.400\nthe sake of argument.\n&gt;&gt; Right.\n\n83\n00:04:29.400 --> 00:04:32.580\n&gt;&gt; Okay, so in order to accomplish that,\n\n84\n00:04:32.580 --> 00:04:37.430\nwithin VIN, I'm going to set\na top level property and say,\n\n85\n00:04:37.430 --> 00:04:41.970\nvalidation regex, okay?\n\n86\n00:04:41.970 --> 00:04:45.280\nAnd you're like regex,\nyou are feeling brave, Justin.\n\n87\n00:04:45.280 --> 00:04:46.280\nI am, I am.\n\n88\n00:04:46.280 --> 00:04:50.962\nAnd in order to have this regex,\nwe need to import the regex module,\n\n89\n00:04:50.962 --> 00:04:53.602\nthe regular expression module, re.\n\n90\n00:04:53.602 --> 00:04:58.813\nAnd then we'll say re.compile,\n\n91\n00:04:58.813 --> 00:05:04.030\nand let's see here, \\d{9}.\n\n92\n00:05:04.030 --> 00:05:07.230\nI'm pretty sure that's it,\nwe may have to tweak that.\n\n93\n00:05:07.230 --> 00:05:09.990\nApparently I love debugging\nthings in front of\n\n94\n00:05:09.990 --> 00:05:14.310\neveryone out there because I always\nset myself up to have some issues.\n\n95\n00:05:14.310 --> 00:05:17.160\nOkay, so how are we going to do this?\n\n96\n00:05:18.180 --> 00:05:21.940\nIn order for this to be a valid\ndescriptor, this needs to have a get,\n\n97\n00:05:23.860 --> 00:05:27.340\nokay, and let's just pass for now.\n\n98\n00:05:28.700 --> 00:05:31.250\nIt needs to have a set.\n\n99\n00:05:31.250 --> 00:05:34.680\nNotice these are dunder methods, and\nthat's going to be passed a value.\n\n100\n00:05:36.180 --> 00:05:40.784\nPass, and it needs a delete.\n\n101\n00:05:40.784 --> 00:05:41.440\nDelete.\n\n102\n00:05:41.440 --> 00:05:45.475\nI wanted to make sure I did not\nactually mess it up and put del or\n\n103\n00:05:45.475 --> 00:05:47.240\nget those mixed up.\n\n104\n00:05:47.240 --> 00:05:49.920\nDel and delete, kind of interchange\nthose from time to time.\n\n105\n00:05:51.240 --> 00:05:54.430\nNow you maybe thinking well these\nare special dunder methods.\n\n106\n00:05:54.430 --> 00:05:54.960\nThey are.\n\n107\n00:05:54.960 --> 00:05:59.600\nThey are actually special to\ndescriptors which represent\n\n108\n00:05:59.600 --> 00:06:03.600\nsome special type of logic, but it's\ntypically a property of another object.\n\n109\n00:06:03.600 --> 00:06:06.290\nMy car has a VIN number, right?\n\n110\n00:06:06.290 --> 00:06:11.320\nWell, this is a VIN object,\nit has a get, set, and a delete.\n\n111\n00:06:12.530 --> 00:06:17.820\nSo it has custom ways that it can be\ndeleted from its containing object,\n\n112\n00:06:17.820 --> 00:06:19.380\nright, the car in this case.\n\n113\n00:06:19.380 --> 00:06:23.440\nHow we set it or how we get it, okay?\n\n114\n00:06:23.440 --> 00:06:28.660\nSo if we come up here, and just for\nnow, I'm going to do this.\n\n115\n00:06:30.100 --> 00:06:34.510\nI originally put vin right here,\ndidn't mean to.\n\n116\n00:06:34.510 --> 00:06:40.440\nI'm gonna say vin = VIN,\njust like that, okay?\n\n117\n00:06:41.540 --> 00:06:46.130\nNow if we look at the car,\nwell addproperty.\n\n118\n00:06:46.130 --> 00:06:47.180\nThat's the get part.\n\n119\n00:06:47.180 --> 00:06:49.960\nThat defines the getter for color.\n\n120\n00:06:49.960 --> 00:06:51.840\nThe setter, well that's colorsetter.\n\n121\n00:06:51.840 --> 00:06:53.290\nWe have the same methods.\n\n122\n00:06:53.290 --> 00:06:56.100\nThese are both descriptors, just\na different way of doing the same thing.\n\n123\n00:06:57.410 --> 00:07:02.620\nBut notice now that I have vin =,\nthere you go, it's that.\n\n124\n00:07:02.620 --> 00:07:06.786\nAnd I could even do something like this.\n\n125\n00:07:09.652 --> 00:07:16.981\nAnd then say, self.vin = VIN.\n\n126\n00:07:16.981 --> 00:07:22.328\nWell, self.class.vin if vin\n\n127\n00:07:22.328 --> 00:07:27.278\nis none else the vin number and\n\n128\n00:07:27.278 --> 00:07:33.820\nactually pass in whatever's passed.\n\n129\n00:07:35.060 --> 00:07:38.230\nI'm gonna keep it a little simpler\nthan that so we can have appropriate\n\n130\n00:07:38.230 --> 00:07:43.960\ndiscussions for what I'm trying to teach\nyou, but something to keep in mind, okay?\n\n131\n00:07:43.960 --> 00:07:46.010\nSo we save that, good deal.\n\n132\n00:07:47.650 --> 00:07:50.200\nAnd here we go.\n\n133\n00:07:50.200 --> 00:07:54.750\nBelieve it or not, that is the get,\nthe set, and the delete.\n\n134\n00:07:54.750 --> 00:07:59.689\nIf we come back and\nchange these passes to print,\n\n135\n00:07:59.689 --> 00:08:04.626\ngetting the VIN And\nwe come here and we say print,\n\n136\n00:08:04.626 --> 00:08:11.505\nsetting the vin to and I'm just going\nto do this a little old school.\n\n137\n00:08:11.505 --> 00:08:14.975\nAnd then print deleting the vin.\n\n138\n00:08:17.010 --> 00:08:20.660\nDeleting the vin, okay?\n\n139\n00:08:20.660 --> 00:08:21.970\nThere we go.\n\n140\n00:08:21.970 --> 00:08:24.954\nGood deal, and you're like well, why'd\nyou talk about that regular expression.\n\n141\n00:08:24.954 --> 00:08:27.240\nWe're getting there, we're getting there.\n\n142\n00:08:27.240 --> 00:08:31.725\nWell, we come back and\nwe look, and we go into\n\n143\n00:08:31.725 --> 00:08:36.920\npython3-i descriptors just like that,\nthen well, car.\n\n144\n00:08:36.920 --> 00:08:37.950\nWhat do we have on car.\n\n145\n00:08:37.950 --> 00:08:38.760\nDo we have a vin?\n\n146\n00:08:39.860 --> 00:08:43.110\nGet takes 2 argument, but 3 were given.\n\n147\n00:08:44.490 --> 00:08:47.090\nWell, that's interesting.\n\n148\n00:08:47.090 --> 00:08:49.406\nWhy, what happened?\n\n149\n00:08:49.406 --> 00:08:52.606\nAnd you were like, well, the property,\nit should have the same.\n\n150\n00:08:52.606 --> 00:08:56.030\nAnd this is kind of where\nhiccups get thrown around.\n\n151\n00:08:57.070 --> 00:09:03.020\nLet's exit out of here and now,\nwe wanna see those printed out.\n\n152\n00:09:03.020 --> 00:09:08.041\nFor a get method,\nwhat we actually get is not just\n\n153\n00:09:08.041 --> 00:09:12.818\nthe self which would be\nthe VIN object itself,\n\n154\n00:09:12.818 --> 00:09:17.738\nwe get the instance and\nwe get the owner, okay?\n\n155\n00:09:17.738 --> 00:09:20.730\nNow, let's just print those out and\nsee if we can get something.\n\n156\n00:09:20.730 --> 00:09:23.974\nSo, self, so print self,\n\n157\n00:09:23.974 --> 00:09:29.224\nprint instance, and\n\n158\n00:09:29.224 --> 00:09:33.820\nprint owner, okay.\n\n159\n00:09:33.820 --> 00:09:38.100\nJust like so, let's try that again.\n\n160\n00:09:40.130 --> 00:09:44.090\nAnd if we say, car,\ncar.vin and here we get.\n\n161\n00:09:44.090 --> 00:09:46.180\nWell, self is the vin object.\n\n162\n00:09:46.180 --> 00:09:52.360\nThe instance is, or the actual instance\nthat this vin object belongs to,\n\n163\n00:09:52.360 --> 00:09:57.124\nand then finally main.car or\n\n164\n00:09:57.124 --> 00:10:00.770\nthe owner belongs to the car class.\n\n165\n00:10:00.770 --> 00:10:03.280\nOkay, so we get that at times.\n\n166\n00:10:03.280 --> 00:10:06.881\nI call it owner, cuz class is reserved for\nthere's ways around that, but\n\n167\n00:10:06.881 --> 00:10:07.880\nit's good to know.\n\n168\n00:10:09.105 --> 00:10:11.830\nAnd it did print getting the vin as well.\n\n169\n00:10:11.830 --> 00:10:12.800\nSo it ran the getter.\n\n170\n00:10:14.340 --> 00:10:16.919\nAll right,\nlet's see how to actually implement that.\n\n171\n00:10:20.267 --> 00:10:22.070\nSo that it actually gets the vin.\n\n172\n00:10:23.510 --> 00:10:28.440\nAnd we're gonna delete all that,\nand just return self.vin, so\n\n173\n00:10:28.440 --> 00:10:32.900\nI put this layer between\ngetting the actual value and\n\n174\n00:10:32.900 --> 00:10:35.250\nthe behavior of the object\nwithin the class.\n\n175\n00:10:35.250 --> 00:10:40.950\nSo we're returning the vin,\nhere we go cross your fingers Zach.\n\n176\n00:10:40.950 --> 00:10:42.693\n&gt;&gt; I'm crossing my fingers.\n\n177\n00:10:42.693 --> 00:10:45.090\n&gt;&gt; And wait for it.\n\n178\n00:10:45.090 --> 00:10:48.920\nHere we go, it has a default vin,\nwell, it's not great.\n\n179\n00:10:48.920 --> 00:10:50.933\nWe'll get to that.\n\n180\n00:10:50.933 --> 00:10:55.182\nOur default vin, but it got to work.\n\n181\n00:10:55.182 --> 00:10:57.520\nAll right,\nlet's see if we can do the setter.\n\n182\n00:10:57.520 --> 00:11:02.470\nNow, set as, wait for it, wait for it.\n\n183\n00:11:03.590 --> 00:11:09.988\nNew, okay, here we go.\n\n184\n00:11:09.988 --> 00:11:16.300\nAnd actually needs self value, excuse me.\n\n185\n00:11:16.300 --> 00:11:18.270\nLet's just see what it prints out.\n\n186\n00:11:18.270 --> 00:11:19.380\nLet's see if we can get it to work.\n\n187\n00:11:21.120 --> 00:11:26.210\nSelf value, cuz I always get these like\n\n188\n00:11:26.210 --> 00:11:30.830\nbackwards, because a lot of times\nI use the property decorator.\n\n189\n00:11:30.830 --> 00:11:33.330\nBut there are times where\nthis would be handy.\n\n190\n00:11:35.120 --> 00:11:37.670\nAnd you know what?\n\n191\n00:11:37.670 --> 00:11:39.906\nI'm just gonna gather arg kwargs.\n\n192\n00:11:39.906 --> 00:11:41.790\nSo star args.\n\n193\n00:11:41.790 --> 00:11:45.501\nSo anything that is a positional\nparameter starts kwargs.\n\n194\n00:11:45.501 --> 00:11:50.970\nAnything that is respective\nkeyword arguments.\n\n195\n00:11:50.970 --> 00:11:56.654\nSo print(args) and (kwargs).\n\n196\n00:11:56.654 --> 00:12:01.114\nNow, let's try to set that and say, car.\n\n197\n00:12:01.114 --> 00:12:08.418\ncar.vin = '0' and here's what we get.\n\n198\n00:12:08.418 --> 00:12:10.600\nI accidentally forgot\nto take the value out.\n\n199\n00:12:11.810 --> 00:12:14.280\nThe first argument is\nthe VIN object itself.\n\n200\n00:12:14.280 --> 00:12:19.510\nWe get as positional arguments,\nwe get the instance that it belongs to,\n\n201\n00:12:19.510 --> 00:12:21.770\nso its owner and the new value.\n\n202\n00:12:21.770 --> 00:12:23.450\nThere are no keyword arguments.\n\n203\n00:12:24.720 --> 00:12:27.640\nSo sometimes if I'm like, I don't\nremember what the argument list is,\n\n204\n00:12:27.640 --> 00:12:31.765\nhow that works,\nI'll do the star r arg star star kwargs.\n\n205\n00:12:31.765 --> 00:12:36.100\nPrint them out, see what happens,\nand now the new values, actually,\n\n206\n00:12:36.100 --> 00:12:39.620\nnot the second argument, but\nthe third one as we get,\n\n207\n00:12:39.620 --> 00:12:44.360\nwhat does this descriptor belong to or\nbelongs to this car object.\n\n208\n00:12:44.360 --> 00:12:46.850\nThe same car object that we\njust printed out right here.\n\n209\n00:12:47.920 --> 00:12:52.630\nSo let's zoom out, get rid of that, and\n\n210\n00:12:52.630 --> 00:12:55.830\nsay, descriptors.\n\n211\n00:12:57.020 --> 00:13:00.986\nAll right, now that we know that,\nwe can come back and\n\n212\n00:13:00.986 --> 00:13:04.085\nchange this to instance and new_value.\n\n213\n00:13:07.564 --> 00:13:11.826\nNew value, but you know what we\nknow that the new value's there,\n\n214\n00:13:11.826 --> 00:13:15.750\nlet's go ahead and\nsay self.vin equals new value.\n\n215\n00:13:15.750 --> 00:13:18.618\nAnd Python's taking care of this for\nus a great deal.\n\n216\n00:13:18.618 --> 00:13:23.448\nAnd then for delete, we don't really\nneed to know additional information,\n\n217\n00:13:23.448 --> 00:13:27.479\nwe're just deleting it,\nnow we're gonna delete this, okay?\n\n218\n00:13:27.479 --> 00:13:29.620\nYou know what?\n\n219\n00:13:29.620 --> 00:13:31.628\nI'm not sure that a VIN should be deleted.\n\n220\n00:13:31.628 --> 00:13:34.790\nEven though Zach says his car\ndoes not have a VIN number on it.\n\n221\n00:13:34.790 --> 00:13:38.224\nWe should probably make sure that\npeople can't remove VIN numbers.\n\n222\n00:13:38.224 --> 00:13:38.724\n&gt;&gt; Yes.\n\n223\n00:13:38.724 --> 00:13:40.199\n&gt;&gt; So for delete,\n\n224\n00:13:40.199 --> 00:13:44.290\nwe can put any delete\nlogic we wanted here.\n\n225\n00:13:44.290 --> 00:13:49.424\nWe're just gonna raise Type, and\n\n226\n00:13:49.424 --> 00:13:55.091\nlet's just print is that technically\n\n227\n00:13:55.091 --> 00:13:59.528\nthe best error to raise, no.\n\n228\n00:13:59.528 --> 00:14:03.830\nYou need a vin number, there we go.\n\n229\n00:14:05.290 --> 00:14:09.786\nThis should work, and\nit abstracts away things, okay.\n\n230\n00:14:09.786 --> 00:14:14.250\nSo python3-i descriptors.\n\n231\n00:14:14.250 --> 00:14:18.432\nThey'll have car.vin,\nthere's the vin, the default vin.\n\n232\n00:14:18.432 --> 00:14:25.120\ncar.vin = 0, car.vin, it does set it.\n\n233\n00:14:25.120 --> 00:14:30.100\nAnd if I say print, or del car.vin,\n\n234\n00:14:30.100 --> 00:14:32.500\ntakes one positional argument,\nbut two were given.\n\n235\n00:14:33.550 --> 00:14:37.130\nWe ran into the same thing, but\nall of our other stuff works.\n\n236\n00:14:37.130 --> 00:14:41.870\nThat's good to go, and that's one of\nthose, it gets the instance, just in case.\n\n237\n00:14:43.460 --> 00:14:44.961\nI always mess that up.\n\n238\n00:14:47.005 --> 00:14:49.911\nHere we go, this delete.\n\n239\n00:14:49.911 --> 00:14:52.061\nYou'll notice if it's a descriptor,\n\n240\n00:14:52.061 --> 00:14:55.460\nall of these methods get\nthe instance as the second argument.\n\n241\n00:14:55.460 --> 00:14:57.110\nWhat instance am I talking about?\n\n242\n00:14:57.110 --> 00:15:02.250\nWell, in this case, it's whatever the car\ninstance that it belongs to, okay?\n\n243\n00:15:02.250 --> 00:15:05.910\nSo we just have to pass that, we could\nalways do star args, star star kwargs,\n\n244\n00:15:05.910 --> 00:15:09.850\njust to say, I don't really care, just\ngather them up and throw them away, and\n\n245\n00:15:09.850 --> 00:15:11.020\nthen you won't get that error.\n\n246\n00:15:11.020 --> 00:15:12.600\nBut just to be explicit, there we go.\n\n247\n00:15:12.600 --> 00:15:13.608\nLet's see if our delete works now.\n\n248\n00:15:16.025 --> 00:15:22.950\nAnd del car.vin, no,\nyou need a vin number.\n\n249\n00:15:22.950 --> 00:15:26.890\nAnd then well, do we still have\na vin number, we absolutely do and\n\n250\n00:15:26.890 --> 00:15:28.950\nwe can set it, okay?\n\n251\n00:15:30.310 --> 00:15:33.826\nNow, as it stands, right, as it stands,\n\n252\n00:15:33.826 --> 00:15:39.304\nthis is pretty straightforward,\nthere's some trickery there,\n\n253\n00:15:39.304 --> 00:15:43.631\nthere's that layer that\nPython just hand waves on.\n\n254\n00:15:43.631 --> 00:15:48.740\nAnd it's good because we can now\ndisable the deletion of VIN.\n\n255\n00:15:49.860 --> 00:15:53.582\nAll VIN objects have to there, you\ncan't delete them once they're created.\n\n256\n00:15:57.066 --> 00:16:01.959\nAnd if we look through here, I said that\nVINs had to follow a particular format\n\n257\n00:16:01.959 --> 00:16:05.066\nIf we start back at\nthe beginning of the episode.\n\n258\n00:16:05.066 --> 00:16:06.551\nWe're not actually starting back.\n\n259\n00:16:06.551 --> 00:16:10.282\nI'm referring back to the beginning of\nthe episode, I was talking about email.\n\n260\n00:16:10.282 --> 00:16:12.877\nEmail is one of those things where,\nhere's an email.\n\n261\n00:16:12.877 --> 00:16:16.431\nIf someone hands me the email and\nit's like the letter j,\n\n262\n00:16:16.431 --> 00:16:18.738\nthen I go this is not about the email.\n\n263\n00:16:18.738 --> 00:16:22.245\nBut if they go, j@me.j,\n\n264\n00:16:22.245 --> 00:16:26.971\nI go nowadays I'm not sure that might\n\n265\n00:16:26.971 --> 00:16:31.396\nbe a valid domain, and who knows.\n\n266\n00:16:31.396 --> 00:16:33.262\nBut I could check the format.\n\n267\n00:16:33.262 --> 00:16:38.702\nIt has an @ in the middle, and\nit's got a dot something, right?\n\n268\n00:16:38.702 --> 00:16:43.605\nSo that's how we're going to\nkind of take this through VIN.\n\n269\n00:16:43.605 --> 00:16:47.401\nI said all VINs should be nine digits,\nnine numeric digits.\n\n270\n00:16:47.401 --> 00:16:50.471\nI have this validation regex here.\n\n271\n00:16:50.471 --> 00:16:55.666\nAnd now I can say if not\n\n272\n00:16:55.666 --> 00:17:05.666\nself._validation_regex.match(new_value).\n\n273\n00:17:09.541 --> 00:17:14.581\nAnd what I'm saying is, if the new\nvalue doesn't conform to nine digits,\n\n274\n00:17:14.581 --> 00:17:17.061\nI don't wanna let you set it either.\n\n275\n00:17:17.061 --> 00:17:20.501\nBecause now you're like, well,\nI'm just gonna take this VIN off and\n\n276\n00:17:20.501 --> 00:17:24.077\nput something written in crayon, or\nin place of the VIN or a smiley face.\n\n277\n00:17:24.077 --> 00:17:28.985\nI need you to follow the format,\ncuz what if other parts of my application\n\n278\n00:17:28.985 --> 00:17:32.132\nassume also a VIN follows\na nine digit format?\n\n279\n00:17:34.957 --> 00:17:39.124\nSo now, I would say raise.\n\n280\n00:17:39.124 --> 00:17:42.276\nI would probably raise.\n\n281\n00:17:42.276 --> 00:17:44.660\nBut let's just print and return.\n\n282\n00:17:44.660 --> 00:17:47.874\nReturn cuz this might be a good time for\na custom exception but\n\n283\n00:17:47.874 --> 00:17:49.584\nwe don't want to get into that.\n\n284\n00:17:49.584 --> 00:17:54.659\nSo [COUGH] print(\"Your vin must adhere\n\n285\n00:17:54.659 --> 00:17:58.971\nto the appropriate formatting)\n\n286\n00:18:02.391 --> 00:18:05.299\nLike so, okay?\n\n287\n00:18:05.299 --> 00:18:08.357\nAnd then we're just going to return.\n\n288\n00:18:08.357 --> 00:18:10.636\nNot a very big fan of empty returns,\nbut that's all right.\n\n289\n00:18:10.636 --> 00:18:12.644\nThere's an implicit name to return there.\n\n290\n00:18:12.644 --> 00:18:16.706\nAnyway, but I means ones that I do.\n\n291\n00:18:16.706 --> 00:18:20.641\nSo if we go there, and we rerun this.\n\n292\n00:18:20.641 --> 00:18:22.566\nI forgot a quote.\n\n293\n00:18:25.698 --> 00:18:28.265\nThat'll get you every time, Zach.\n&gt;&gt; Every time.\n\n294\n00:18:31.033 --> 00:18:33.248\n&gt;&gt; There we go.\n\n295\n00:18:33.248 --> 00:18:36.507\nSo we have a car, it has a vin.\n\n296\n00:18:36.507 --> 00:18:40.574\nWhat if I do car.vin = '3'.\n\n297\n00:18:40.574 --> 00:18:43.067\nYour vin must adhere to\nthe appropriate formatting.\n\n298\n00:18:43.067 --> 00:18:45.882\nI say car.vin, it's still the same.\n\n299\n00:18:45.882 --> 00:18:53.823\nBut if I say car.vin = '111111111'.\n\n300\n00:18:53.823 --> 00:18:58.843\nI had to make sure it was nine car.vin,\nand now it sets those because it conforms.\n\n301\n00:18:58.843 --> 00:19:02.824\nThis is a great place to do validation,\nto kind of hide back validation.\n\n302\n00:19:02.824 --> 00:19:08.593\nEspecially if you need certain properties\nto be a very particular thing,\n\n303\n00:19:08.593 --> 00:19:11.204\nor look at a very particular way.\n\n304\n00:19:11.204 --> 00:19:15.247\nNow there's one final thing\nthat I do wanna talk about, so\n\n305\n00:19:15.247 --> 00:19:19.796\nwe have this kinda have this set up,\nwe make sure we can't add it.\n\n306\n00:19:23.903 --> 00:19:28.525\nAnd I wanted to bring this up because\nthis is kind of a decision of yourself.\n\n307\n00:19:28.525 --> 00:19:33.410\nThis vin class, okay,\nnow it has its own set of properties.\n\n308\n00:19:33.410 --> 00:19:40.273\nThe vin by default has this\nvin = a default property.\n\n309\n00:19:40.273 --> 00:19:44.290\nBecause that's the way we've set up\nthe set method and how we're validating.\n\n310\n00:19:45.560 --> 00:19:51.659\nWe could change that logic and\nsay hey, if the _vin up here,\n\n311\n00:19:51.659 --> 00:19:57.520\nthe actual data,\nis not set then check it, right?\n\n312\n00:19:57.520 --> 00:20:01.485\nOr we can move that down\ninto that first set method.\n\n313\n00:20:01.485 --> 00:20:07.827\nCuz if I come into this Car and\n\n314\n00:20:07.827 --> 00:20:12.056\nI say vin=None and\n\n315\n00:20:12.056 --> 00:20:17.340\nI say if vin is not None,\n\n316\n00:20:17.340 --> 00:20:21.840\nthen self.vin=.\n\n317\n00:20:21.840 --> 00:20:26.480\nLets try that one more time,\nthe vin number, okay?\n\n318\n00:20:26.480 --> 00:20:29.284\nIf somebody actually\npassed in that argument,\n\n319\n00:20:29.284 --> 00:20:32.590\nhey I want you to go ahead and\nset that up as the argument.\n\n320\n00:20:32.590 --> 00:20:36.782\nAnd I wanted to bring this to\nyour attention because there\n\n321\n00:20:36.782 --> 00:20:41.251\nare some edge cases that we have to,\nlooks fine, car.vin.\n\n322\n00:20:41.251 --> 00:20:42.581\nThat's because we didn't pass it in.\n\n323\n00:20:42.581 --> 00:20:44.427\nIt was an optional keyword argument.\n\n324\n00:20:44.427 --> 00:20:48.062\nIf we instead say Car, and\n\n325\n00:20:48.062 --> 00:20:52.201\nwe keep it red, and we say 1.\n\n326\n00:20:52.201 --> 00:20:55.288\nWait for it, wait for it.\n\n327\n00:20:55.288 --> 00:21:00.419\nExpected string or bytes like objects.\n\n328\n00:21:00.419 --> 00:21:03.992\nSo what did we do here?\n\n329\n00:21:03.992 --> 00:21:06.049\nDid I, type something wrong?\n\n330\n00:21:06.049 --> 00:21:09.486\nI got something going on here Zach.\n&gt;&gt; And there we go again,\n\n331\n00:21:09.486 --> 00:21:11.182\nteachable moment.\n&gt;&gt; I know, I know.\n\n332\n00:21:11.182 --> 00:21:11.838\n&gt;&gt; Not a bad thing.\n\n333\n00:21:11.838 --> 00:21:13.226\n&gt;&gt; So vin=vin.\n\n334\n00:21:16.239 --> 00:21:18.038\nVin=vin.\n\n335\n00:21:18.038 --> 00:21:23.957\nExpect string or bytes like object.\n\n336\n00:21:23.957 --> 00:21:29.357\nGood deal, let's just print this\n\n337\n00:21:29.357 --> 00:21:36.251\nnew value to see how things play out,\nokay?\n\n338\n00:21:36.251 --> 00:21:41.493\nSo everything's good, but\nif I create another car that is red and\n\n339\n00:21:41.493 --> 00:21:44.938\nhas 1, it says it's the vin object.\n\n340\n00:21:44.938 --> 00:21:50.265\nThe first time through,\nif we do that, it's gonna be weird\n\n341\n00:21:50.265 --> 00:21:55.814\nbecause it's actually going\nthrough the set method, okay?\n\n342\n00:21:55.814 --> 00:21:58.003\nThat's odd.\n\n343\n00:21:58.003 --> 00:21:59.586\nSo that's something to keep in mind.\n\n344\n00:21:59.586 --> 00:22:06.778\nBut like I said, you could add additional\nlogic in order to handle that.\n\n345\n00:22:06.778 --> 00:22:10.475\nBut a lot of times when\npeople use descriptors,\n\n346\n00:22:10.475 --> 00:22:13.993\nthey will set things up\nnot like we have here.\n\n347\n00:22:18.347 --> 00:22:22.049\nBut instead, what do we have?\n\n348\n00:22:22.049 --> 00:22:28.049\nWell, I have a vin, and if I had a color,\nmaybe that's a Color object.\n\n349\n00:22:28.049 --> 00:22:30.695\nA Color descriptor,\ninstead of using a property.\n\n350\n00:22:30.695 --> 00:22:34.626\nSo I'll just have a list like this,\nand then everything inherits, and\n\n351\n00:22:34.626 --> 00:22:36.604\nthen you set those up accordingly.\n\n352\n00:22:36.604 --> 00:22:42.394\nNow to make sure that I good, good.\n\n353\n00:22:42.394 --> 00:22:44.854\nI think we're all good.\n\n354\n00:22:44.854 --> 00:22:48.135\nThere is one final case,\nand I want to be explicit.\n\n355\n00:22:48.135 --> 00:22:53.398\nI'm gonna take this out cuz I'm like,\n\n356\n00:22:53.398 --> 00:22:57.227\nI could leave it up on there,\n\n357\n00:22:57.227 --> 00:23:02.021\n*args, *kwargs, **kwargs.\n\n358\n00:23:02.021 --> 00:23:07.331\nAnd just print(args), can't do that.\n\n359\n00:23:07.331 --> 00:23:13.575\nPrint(kwargs) and now what if we do this?\n\n360\n00:23:13.575 --> 00:23:21.562\nvin=None, we're gonna put\nthat back if not vin is None.\n\n361\n00:23:23.475 --> 00:23:24.132\nThen do the following.\n\n362\n00:23:27.702 --> 00:23:31.846\n= VIN object and pass in the vin number.\n\n363\n00:23:35.198 --> 00:23:36.142\nThere we go.\n\n364\n00:23:36.142 --> 00:23:39.179\nLooks fine, but don't forget,\n\n365\n00:23:39.179 --> 00:23:44.932\nwe didn't actually put a vin in there,\nred, wait for it, 1.\n\n366\n00:23:44.932 --> 00:23:49.333\nWe still get that but notice, I get\nthe car object and the actual VIN number.\n\n367\n00:23:49.333 --> 00:23:51.364\nSo I need to double-check.\n\n368\n00:23:51.364 --> 00:23:56.971\nHey, is the value that's being passed\nin the first time around when set it,\n\n369\n00:23:56.971 --> 00:23:58.558\nwhy is it doing that?\n\n370\n00:23:58.558 --> 00:24:02.670\nIt's actually passing in\nthe object itself for\n\n371\n00:24:02.670 --> 00:24:08.120\nthe set method and\nthen it's all subsequent values.\n\n372\n00:24:08.120 --> 00:24:13.052\nSo there is a trick there and\nI wanted to more explicit about that that\n\n373\n00:24:13.052 --> 00:24:17.130\nthe last argument maybe it's\na number most of the time.\n\n374\n00:24:17.130 --> 00:24:21.700\nLike when we're doing normal sets,\nbut inside of the dander and mit,\n\n375\n00:24:21.700 --> 00:24:24.965\nfirst time through it could\nbe the object itself.\n\n376\n00:24:24.965 --> 00:24:27.143\nSo the name new value is not defined,\n\n377\n00:24:27.143 --> 00:24:31.790\nwhich actually breaks other things\nnow when we saw that printout.\n\n378\n00:24:31.790 --> 00:24:38.423\nSo we would have to say hey if this\nis type vin, then just go ahead.\n\n379\n00:24:38.423 --> 00:24:41.195\nWe're all good.\n\n380\n00:24:41.195 --> 00:24:45.602\nIf it is not, make sure it matches this,\notherwise go ahead and\n\n381\n00:24:45.602 --> 00:24:47.540\nset it to whatever it is.\n\n382\n00:24:47.540 --> 00:24:51.672\nSo those are things to keep in mind when\nwe're using these custom descriptors.\n\n383\n00:24:51.672 --> 00:24:55.840\nAs long as it has a get, a set, and a\ndelete method with those dunders on either\n\n384\n00:24:55.840 --> 00:24:59.322\nside, you can use these as custom\nproperties in other classes.\n\n385\n00:24:59.322 --> 00:25:01.795\nEnforce validation,\nmaybe some other rules.\n\n386\n00:25:01.795 --> 00:25:05.682\nVerify that it comes from a particular\nset, and then you're all good to go.\n\n387\n00:25:05.682 --> 00:25:07.667\n&gt;&gt; Wonderful episode Justin.\n\n388\n00:25:07.667 --> 00:25:10.703\nDescriptors creating a custom\ndescriptor and before we move on,\n\n389\n00:25:10.703 --> 00:25:12.458\nanything you'd like to say?\n&gt;&gt; Zach,\n\n390\n00:25:12.458 --> 00:25:14.915\nI think I have said a great\ndeal in this episode.\n\n391\n00:25:14.915 --> 00:25:20.580\nThis is very heady because there's this\nlayer of abstraction, so to speak.\n\n392\n00:25:20.580 --> 00:25:25.630\nSo I'll just let everybody think about\nit and let it stew a little more.\n\n393\n00:25:25.630 --> 00:25:30.270\nAnd maybe you'll find a good use case for\nwhen descriptors are appropriate for\n\n394\n00:25:30.270 --> 00:25:32.180\nyou.\n&gt;&gt; Wonderful job as always, Justin.\n\n395\n00:25:32.180 --> 00:25:34.890\nThanks so much and\nPython Data Models is a fantastic series.\n\n396\n00:25:34.890 --> 00:25:37.003\nMake sure you watch all the episodes.\n\n397\n00:25:37.003 --> 00:25:39.450\nEvery one of them can help\nyou out in your career.\n\n398\n00:25:39.450 --> 00:25:41.387\nAnd you're in that course library.\n\n399\n00:25:41.387 --> 00:25:44.550\nWhile you're there there's thousands of\nother videos that are there to help you go\n\n400\n00:25:44.550 --> 00:25:45.871\nfurther, so check those out too.\n\n401\n00:25:45.871 --> 00:25:47.797\nHey, tell everybody you\nknow about DevProTV.\n\n402\n00:25:47.797 --> 00:25:49.899\nYou know a good DevPro is always learning.\n\n403\n00:25:49.899 --> 00:25:52.060\nThanks for watching, I'm Zach Memos.\n&gt;&gt; And I'm Justin Dennison.\n\n404\n00:25:52.060 --> 00:25:52.903\n&gt;&gt; And we will see you soon.\n\n405\n00:25:52.903 --> 00:25:58.586\n[MUSIC]\n\n",
          "vimeoId": "253982831"
        }
      ],
      "title": "Attributes"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Daniel explore how to make a custom object behave like a function using the \\_\\_call\\_\\_ method. Justin further discusses why you would want to have an object that is callable.",
          "length": "1220",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-6-1-1-making_an_object_callable-020518.00_24_20_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-6-1-1-making_an_object_callable-020518.00_24_20_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-6-1-1-making_an_object_callable-020518.00_24_20_04.Still001-sm.jpg",
          "title": "Making an Object Callable",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.968 --> 00:00:17.741\nGreetings everyone, and welcome to\nanother great episode of DevProTV.\n\n3\n00:00:17.741 --> 00:00:19.227\nI'm your host Daniel Lowrie, and\n\n4\n00:00:19.227 --> 00:00:22.116\nin todays episode we're back with\nmore Python Data Model series.\n\n5\n00:00:22.116 --> 00:00:25.104\nAnd of course, it would be a day without\nsunshine if we didn't have our good\n\n6\n00:00:25.104 --> 00:00:27.830\nfriend, Mr. Justin Dennison\njoining us back in the studio.\n\n7\n00:00:27.830 --> 00:00:29.840\nJustin, we're so glad to have you back,\nhow's it going today?\n\n8\n00:00:29.840 --> 00:00:31.150\n&gt;&gt; It is going fantastic, Daniel.\n\n9\n00:00:31.150 --> 00:00:32.020\nAnd how are you today?\n\n10\n00:00:32.020 --> 00:00:34.990\n&gt;&gt; I'm great as well,\nthanks for asking as well.\n\n11\n00:00:34.990 --> 00:00:39.416\nWeird. [LAUGH]. &gt;&gt; It's like I went and\nintroduce myself, it's weird.\n\n12\n00:00:39.416 --> 00:00:40.030\n[LAUGH].\n\n13\n00:00:40.030 --> 00:00:42.800\n&gt;&gt; Anyway, yeah, we're looking forward for\nmore Python Data Model.\n\n14\n00:00:42.800 --> 00:00:44.890\nWhat do you have on deck for us today?\n\n15\n00:00:44.890 --> 00:00:48.970\n&gt;&gt; Well, we'll actually gonna be talking\nabout, making an object callable.\n\n16\n00:00:48.970 --> 00:00:50.270\nThat was a lot of juggling.\n\n17\n00:00:50.270 --> 00:00:52.190\nSo you're like.\n\n18\n00:00:52.190 --> 00:00:53.050\n&gt;&gt; You said making.\n\n19\n00:00:53.050 --> 00:00:54.358\nWhat does that mean?\n\n20\n00:00:54.358 --> 00:00:55.404\n[LAUGH]\n&gt;&gt; Well,\n\n21\n00:00:55.404 --> 00:00:59.250\nit's kinda like dough,\nuse some eggs and flour.\n\n22\n00:00:59.250 --> 00:01:01.730\nNo, no, it's making an object callable.\n\n23\n00:01:01.730 --> 00:01:03.580\nSo up until this point,\n\n24\n00:01:03.580 --> 00:01:07.820\nwe've been adding methods to objects to\nmake them behave in a very particular way.\n\n25\n00:01:09.050 --> 00:01:14.680\nWell we've seen some descriptors, and\ngetting attributes, and getting items,\n\n26\n00:01:14.680 --> 00:01:20.020\nand pretending like things are numbers,\nbut they're not really numeric.\n\n27\n00:01:20.020 --> 00:01:25.623\nBut now, now I'm about to, you better hold\non tight, I'm about to blow your mind.\n\n28\n00:01:25.623 --> 00:01:28.713\n&gt;&gt; [INAUDIBLE] [LAUGH]\n&gt;&gt; Making an object callable.\n\n29\n00:01:28.713 --> 00:01:33.927\nYou can actually create an object,\nthat behaves like a function.\n\n30\n00:01:33.927 --> 00:01:37.540\nSo I can create an object, and I do,\nand I can call it like a function and\n\n31\n00:01:37.540 --> 00:01:39.830\nthen it does function stuff.\n\n32\n00:01:39.830 --> 00:01:43.328\n&gt;&gt; In the words of John Tuturro in,\n\"O Brother,\n\n33\n00:01:43.328 --> 00:01:47.045\nWhere Art Thou?\",\nthat don't make no sense.\n\n34\n00:01:47.045 --> 00:01:49.510\n[LAUGH]\n&gt;&gt; Well, I will tell you,\n\n35\n00:01:49.510 --> 00:01:51.399\nthis is something that I happened upon,\n\n36\n00:01:51.399 --> 00:01:54.974\nbecause there's some limitations when\nyou're trying to do concurrency.\n\n37\n00:01:54.974 --> 00:01:55.647\n&gt;&gt; Yeah.\n&gt;&gt; Right,\n\n38\n00:01:55.647 --> 00:01:58.740\nwhen I'm trying to use a process pool,\nor something like that.\n\n39\n00:01:58.740 --> 00:02:01.019\nNow if you haven't, just trust me,\n\n40\n00:02:01.019 --> 00:02:05.737\nI learned how to do this because it\nsolves a problem that I was encountering.\n\n41\n00:02:05.737 --> 00:02:09.413\nI'm gonna show you that problem, and\nthen I'm gonna show you, well if you\n\n42\n00:02:09.413 --> 00:02:13.390\ndo this with an object that's problem\nsolved, hopefully that will give context.\n\n43\n00:02:13.390 --> 00:02:15.278\nAre you gonna use this all the time?\n\n44\n00:02:15.278 --> 00:02:18.539\nNo, you don't necessarily\nneed to all the time, but\n\n45\n00:02:18.539 --> 00:02:22.370\nother times where it will\nmake your life easier?\n\n46\n00:02:22.370 --> 00:02:23.200\nAbsolutely.\n\n47\n00:02:23.200 --> 00:02:28.012\n&gt;&gt; It's amazing how little context\nmakes everything so much clear.\n\n48\n00:02:28.012 --> 00:02:30.948\n[LAUGH]\n&gt;&gt; Here is the thing [INAUDIBLE].\n\n49\n00:02:30.948 --> 00:02:33.140\n&gt;&gt; [INAUDIBLE]\n&gt;&gt; I'll use you as a gauge for\n\n50\n00:02:33.140 --> 00:02:36.310\nthat if I glance out of the side of\nmy eye, and you're going- [LAUGH]\n\n51\n00:02:36.310 --> 00:02:37.010\n&gt;&gt; Then I'm gonna go,\n\n52\n00:02:37.010 --> 00:02:38.490\nI don't know, maybe, maybe.\n\n53\n00:02:38.490 --> 00:02:39.730\n&gt;&gt; Well.\n&gt;&gt; So, let's go ahead and\n\n54\n00:02:39.730 --> 00:02:40.608\ncome down to the screen.\n\n55\n00:02:40.608 --> 00:02:45.802\nAnd, let's actually do the wrong thing,\nokay?\n\n56\n00:02:45.802 --> 00:02:49.290\nSo let's, there's some-\n&gt;&gt; Counterexample, there.\n\n57\n00:02:49.290 --> 00:02:51.050\n&gt;&gt; Yeah.\n\n58\n00:02:51.050 --> 00:02:55.200\nSo, let's actually look at callable,\nactually I don't think I can\n\n59\n00:02:55.200 --> 00:03:00.430\ncall it callable, mainly because them\nmight be a Python module internally.\n\n60\n00:03:00.430 --> 00:03:05.900\nSo, let's say likefunctions,\nlet's just call it that.\n\n61\n00:03:05.900 --> 00:03:09.472\nAll right, so we're gonna go through this.\n\n62\n00:03:09.472 --> 00:03:13.886\nWe're gonna make a very simple functions,\nit's gonna be called add.\n\n63\n00:03:13.886 --> 00:03:14.817\nAnd you're like that's nice.\n\n64\n00:03:14.817 --> 00:03:19.340\nWe're just gonna make sure that we're\nall good on how that works out.\n\n65\n00:03:19.340 --> 00:03:21.020\nSo I'm gonna add and\nwhat is that gonna take?\n\n66\n00:03:21.020 --> 00:03:23.029\nIt's gonna take two numbers, (x, y).\n\n67\n00:03:23.029 --> 00:03:25.910\nAnd then it's just gonna return those.\n\n68\n00:03:25.910 --> 00:03:29.480\nNow, technically you could import\nthis from the operator module and\n\n69\n00:03:29.480 --> 00:03:31.710\nit's just, it's this.\n\n70\n00:03:31.710 --> 00:03:35.820\nBut for clarity, let's make it this way.\n\n71\n00:03:35.820 --> 00:03:37.640\nAnd let's get some numbers here.\n\n72\n00:03:37.640 --> 00:03:41.680\n&gt;&gt; And that's [1, 2, 3, 4, 5] okay.\n\n73\n00:03:43.120 --> 00:03:46.630\nOkay, well how do I add this.\n\n74\n00:03:46.630 --> 00:03:53.362\nWell, you could something like this and\n\n75\n00:03:53.362 --> 00:03:58.906\nsay, print([add( x, y) for\n\n76\n00:03:58.906 --> 00:04:04.257\nx, y in zip(numbers, numbers\n\n77\n00:04:06.723 --> 00:04:10.734\n[ 1:]).\n\n78\n00:04:10.734 --> 00:04:15.244\nAnd all I did there, was I grabbed the\nlist, I grabbed a slice of another list\n\n79\n00:04:15.244 --> 00:04:19.077\nand then I zipped them together and\nthat way, q1pairs with 2.\n\n80\n00:04:19.077 --> 00:04:22.520\nTwo, and so I just added them together.\n\n81\n00:04:22.520 --> 00:04:27.700\nNow, if I wanted to add all those\ntogether, this is one thing I could do.\n\n82\n00:04:27.700 --> 00:04:31.348\nLet's make it a little simpler,\nbecause glancing out the side of my eye.\n\n83\n00:04:31.348 --> 00:04:33.908\n[LAUGH]\n&gt;&gt; Daniel's gonna,\n\n84\n00:04:33.908 --> 00:04:34.555\nwhat are you talking about?\n\n85\n00:04:34.555 --> 00:04:37.305\n&gt;&gt; You got a lot of words on that screen.\n\n86\n00:04:37.305 --> 00:04:38.210\n[LAUGH]\n&gt;&gt; So,\n\n87\n00:04:38.210 --> 00:04:41.110\nlet's say that I wanna add\n1 to all of these numbers.\n\n88\n00:04:41.110 --> 00:04:42.770\nSo, for x in numbers.\n\n89\n00:04:43.920 --> 00:04:44.540\nJust like that.\n\n90\n00:04:44.540 --> 00:04:49.038\nSo I used add, ran through it on a list\ncomprehension, and it's just gonna add 1\n\n91\n00:04:49.038 --> 00:04:54.300\nto x, where 1 or x is gonna be 1, and then\n2, and then 3, and then 4, and then 5.\n\n92\n00:04:54.300 --> 00:04:57.970\nIf we have done this appropriately,\nand I don't have any syntax errors,\n\n93\n00:04:57.970 --> 00:05:01.650\nthen we should see something 2, 3, 4.\n\n94\n00:05:01.650 --> 00:05:03.760\nSo I just added 1, right?\n\n95\n00:05:03.760 --> 00:05:08.700\nSo if I come back here,\nand I say I accidentally\n\n96\n00:05:08.700 --> 00:05:13.590\nhad an extra k there so\nI didn't, two files to edit.\n\n97\n00:05:13.590 --> 00:05:15.830\nThat is not what I wanted.\n\n98\n00:05:15.830 --> 00:05:17.136\nBut that's all right.\n\n99\n00:05:17.136 --> 00:05:19.126\nSo, there we go.\n\n100\n00:05:19.126 --> 00:05:25.684\nIf I wanted to come back and change\nthis to 3, I've got to change this to 3,\n\n101\n00:05:25.684 --> 00:05:30.611\nand common pattern that people use,\nis my ADD_NUMBER.\n\n102\n00:05:31.820 --> 00:05:38.640\nAnd I'll say 3, and\nthen they'll use that like a constant.\n\n103\n00:05:38.640 --> 00:05:39.830\nBut now I have to keep track of that.\n\n104\n00:05:39.830 --> 00:05:43.580\nAnd then I change that,\nand then add changes,\n\n105\n00:05:43.580 --> 00:05:47.730\nand then it can get a little complicated,\nokay?\n\n106\n00:05:47.730 --> 00:05:52.550\nIt does work,\nif you actually take the cap lock off.\n\n107\n00:05:52.550 --> 00:05:54.150\nAnd run them appropriately.\n\n108\n00:05:54.150 --> 00:05:55.490\nSo, here we go.\n\n109\n00:05:55.490 --> 00:05:57.130\nI added three to all of the numbers.\n\n110\n00:05:57.130 --> 00:05:59.810\nIt works fine.\n\n111\n00:05:59.810 --> 00:06:04.961\nBut now, if I come back here,\nI can actually\n\n112\n00:06:04.961 --> 00:06:10.808\nchange this to where,\nlike if I wanted to add one,\n\n113\n00:06:10.808 --> 00:06:15.278\nthen I can say add_one = add(1).\n\n114\n00:06:15.278 --> 00:06:20.620\nIf I re-wrote this function a very\nparticular way, then it would work, okay?\n\n115\n00:06:20.620 --> 00:06:22.678\nSo, a little bit of\nstorytelling going on here.\n\n116\n00:06:24.374 --> 00:06:28.660\nDaniel, but make_add.\n\n117\n00:06:28.660 --> 00:06:33.582\nAnd I change that function's name and\nyou'll see why in just a moment,\n\n118\n00:06:33.582 --> 00:06:38.354\ndef add, and that's gonna take a (y),\none, two, three, four.\n\n119\n00:06:43.028 --> 00:06:47.160\nSo, this is a function that takes\na number and returns another function.\n\n120\n00:06:47.160 --> 00:06:49.350\nThat function is going to take a number,\nand\n\n121\n00:06:49.350 --> 00:06:51.080\nthen add whatever the original one was.\n\n122\n00:06:51.080 --> 00:06:55.250\nSo this is a way that I can,\nand kinda gather up state.\n\n123\n00:06:55.250 --> 00:07:00.242\nIf I do make add like this,\nthen I can say things\n\n124\n00:07:00.242 --> 00:07:04.210\nlike add_one = make_add(1),\n\n125\n00:07:04.210 --> 00:07:07.927\nadd_three = make_add(3).\n\n126\n00:07:07.927 --> 00:07:13.977\nAnd now, instead of using add and\nhaving to keep track,\n\n127\n00:07:13.977 --> 00:07:20.570\nI'm gonna say ([add one(x) for\nx in numbers]).\n\n128\n00:07:20.570 --> 00:07:21.310\nLikewise.\n\n129\n00:07:23.241 --> 00:07:29.010\nI'm gonna say [(add_three (x) for\nx in numbers)].\n\n130\n00:07:29.010 --> 00:07:29.510\nJust like that.\n\n131\n00:07:31.240 --> 00:07:32.801\nMaybe-\n&gt;&gt; [INAUDIBLE]\n\n132\n00:07:32.801 --> 00:07:33.437\n&gt;&gt; I'm gonna try.\n\n133\n00:07:33.437 --> 00:07:35.120\n[LAUGH]\n&gt;&gt; I'm trying, Daniel, I'm trying-\n\n134\n00:07:35.120 --> 00:07:36.230\n&gt;&gt; You're almost at the station.\n\n135\n00:07:36.230 --> 00:07:37.888\n[LAUGH]\n&gt;&gt; Yeah, I got it, I got it.\n\n136\n00:07:37.888 --> 00:07:39.243\nAnd then boom, there we go.\n\n137\n00:07:39.243 --> 00:07:44.700\nNow, this is a way of, this is a higher\norder function that returns a function.\n\n138\n00:07:44.700 --> 00:07:46.950\nIt all looks great, and\nthis is something you may encounter.\n\n139\n00:07:46.950 --> 00:07:48.150\nYou're like, okay.\n\n140\n00:07:48.150 --> 00:07:52.084\nSo, I don't need a whole class to keep\ncontrol of all this information that I\n\n141\n00:07:52.084 --> 00:07:53.816\npassed in, the one or the three.\n\n142\n00:07:53.816 --> 00:07:56.990\nI'm just gonna have a function\nthat returns a function, and\n\n143\n00:07:56.990 --> 00:07:58.865\nthen that kind of keeps it, right?\n\n144\n00:07:58.865 --> 00:08:01.164\nAnd then I can use that internal function.\n\n145\n00:08:01.164 --> 00:08:04.206\nUntil you're like, well,\nI got a lot of numbers.\n\n146\n00:08:04.206 --> 00:08:09.624\nNow, I'm not gonna do it on a lot of\nnumbers, just for the sake of expediency.\n\n147\n00:08:09.624 --> 00:08:13.580\nBut I wanna use some concurrency.\n\n148\n00:08:13.580 --> 00:08:17.170\nI want to use, maybe some threads,\nor processes, or thread pools, or\n\n149\n00:08:17.170 --> 00:08:18.300\nprocess pools.\n\n150\n00:08:18.300 --> 00:08:19.380\nIt's computationally expensive.\n\n151\n00:08:19.380 --> 00:08:21.126\nWe're probably gonna use process pools.\n\n152\n00:08:21.126 --> 00:08:25.210\nSo you're like, I need to speed this up,\nand this is easy,\n\n153\n00:08:25.210 --> 00:08:28.320\nbecause I'm just applying\na function to parts of a list.\n\n154\n00:08:29.560 --> 00:08:31.170\nSo then, you go, all right, I got you.\n\n155\n00:08:31.170 --> 00:08:34.220\nAll right, here we go,\nhere we go, I got it, I got it.\n\n156\n00:08:34.220 --> 00:08:38.120\nSo likefunctions.py, and\nthen, you come down here.\n\n157\n00:08:38.120 --> 00:08:40.110\nWell, actually you come up here first.\n\n158\n00:08:40.110 --> 00:08:46.570\nYou say from, if you're in Python 3, you\ncan get a module from concurrent futures,\n\n159\n00:08:46.570 --> 00:08:50.665\nimport Process PoolExecutor, or Executor.\n\n160\n00:08:50.665 --> 00:08:52.380\n&gt;&gt; [LAUGH] Executor.\n\n161\n00:08:52.380 --> 00:08:53.180\n&gt;&gt; All right.\n\n162\n00:08:53.180 --> 00:08:58.660\n&gt;&gt; Is that the guy that wears the black\nmask over his face and curvy sharp axe.\n\n163\n00:08:58.660 --> 00:09:01.640\n&gt;&gt; Yeah, you have to be careful because\nif you mess this up he shows on your\n\n164\n00:09:01.640 --> 00:09:03.420\ncomputer in ASCII art, it's weird.\n\n165\n00:09:03.420 --> 00:09:04.930\nNo, I jest, I jest.\n\n166\n00:09:04.930 --> 00:09:06.175\nIt doesn't work that way.\n\n167\n00:09:06.175 --> 00:09:08.760\n&gt;&gt; [LAUGH]\n&gt;&gt; But now,\n\n168\n00:09:08.760 --> 00:09:12.196\nwhat you can do is you can say, with\n\n169\n00:09:12.196 --> 00:09:21.370\nProcessPoolExecutor as e.\n\n170\n00:09:21.370 --> 00:09:25.820\n1, 2, 3, 4, and then,\nyou can say results equals\n\n171\n00:09:28.919 --> 00:09:34.530\nwait for it, e.map(add_one) to numbers.\n\n172\n00:09:34.530 --> 00:09:40.194\nAnd what that does, is it creates\nprocesses, independent Python processes,\n\n173\n00:09:40.194 --> 00:09:44.350\nand then, it will use that to say,\nhey, I need some work.\n\n174\n00:09:44.350 --> 00:09:47.773\nI'm gonna send it over to this process,\nsend it over to this process.\n\n175\n00:09:47.773 --> 00:09:52.600\nThis circumvents some of the limitations\nof Python being a single process.\n\n176\n00:09:53.780 --> 00:09:56.820\nNo guarantees this will be faster, but\n\n177\n00:09:56.820 --> 00:09:59.940\nif you have a lot of work to do,\nand it is computational and\n\n178\n00:09:59.940 --> 00:10:04.813\nexpensive, this is a fairly easy way\nto make use of multi-core machines.\n\n179\n00:10:04.813 --> 00:10:05.900\n&gt;&gt; Hm.\n\n180\n00:10:05.900 --> 00:10:10.500\n&gt;&gt; There's a whole lot of, gotta be\ncareful on this, but you come a long,\n\n181\n00:10:10.500 --> 00:10:14.550\nI had one, I was just doing a list\ncomprehension, map works very similar,\n\n182\n00:10:14.550 --> 00:10:20.150\napply add 1, 2, all of the numbers in\nnumbers, and you get results, and then,\n\n183\n00:10:20.150 --> 00:10:24.450\nprint the list of results,\ncuz that's what I had.\n\n184\n00:10:24.450 --> 00:10:27.000\nResults returns a different structure.\n\n185\n00:10:27.000 --> 00:10:28.710\nIt's lazy, until you ask for it.\n\n186\n00:10:29.910 --> 00:10:32.420\nSo it's just hanging out,\nuntil you say I need stuff.\n\n187\n00:10:32.420 --> 00:10:36.385\nWe're just gonna cast it to a list to make\nsure that we're gonna print all of that.\n\n188\n00:10:36.385 --> 00:10:38.320\nFair warning, this is going to break.\n\n189\n00:10:40.770 --> 00:10:44.750\nAnd so, you've solved one of your problems\nof not having to carry around this extra\n\n190\n00:10:44.750 --> 00:10:46.565\nnumber all the time or\n\n191\n00:10:46.565 --> 00:10:49.730\nhard coding it, by having this\nfunction that returns a function.\n\n192\n00:10:49.730 --> 00:10:52.150\nBut now,\nif I have all of this typed right.\n\n193\n00:10:53.450 --> 00:10:59.420\nAnd can't pickle local object\n'make_add.&lt;locals&gt;.add'.\n\n194\n00:10:59.420 --> 00:11:02.270\nThese are internal functions, and\n\n195\n00:11:02.270 --> 00:11:05.550\nwhat happens is,\nthese are not what are called picklable.\n\n196\n00:11:05.550 --> 00:11:09.240\nYou don't know what a pickle is,\nwell, it's this little cucumber.\n\n197\n00:11:09.240 --> 00:11:10.410\n&gt;&gt; [LAUGH] Yeah, it's a gherkin.\n\n198\n00:11:10.410 --> 00:11:12.275\n&gt;&gt; [LAUGH] Yeah, it's a gherkin.\n\n199\n00:11:12.275 --> 00:11:16.526\nIn Python, pickling is a way\nof creating a serialization,\n\n200\n00:11:16.526 --> 00:11:21.117\na binary representation of Python\nobjects or Python things, so\n\n201\n00:11:21.117 --> 00:11:27.510\nyou can transmit them, unpickle them,\nand use them in another Python process.\n\n202\n00:11:27.510 --> 00:11:31.740\nOr you can actually do this among multiple\ncomputers, and all kinds of things.\n\n203\n00:11:32.870 --> 00:11:36.100\nBut now, notice that my,\nit's just kind of broke.\n\n204\n00:11:36.100 --> 00:11:36.630\nIt's just hanging out.\n\n205\n00:11:36.630 --> 00:11:37.500\n&gt;&gt; It's not doing a whole lot.\n\n206\n00:11:37.500 --> 00:11:41.954\n&gt;&gt; It's not doing anything, it broke.\n\n207\n00:11:41.954 --> 00:11:45.053\nSo you're like, man, what happened?\n\n208\n00:11:45.053 --> 00:11:47.272\n&gt;&gt; Error.\n\n209\n00:11:47.272 --> 00:11:49.600\n&gt;&gt; So control c, I get out of there.\n\n210\n00:11:49.600 --> 00:11:52.860\nIt kind of messes things up,\nand it was just waiting.\n\n211\n00:11:52.860 --> 00:11:56.580\nAnd because you can't pickle it,\nyou can't actually submit any work, and\n\n212\n00:11:56.580 --> 00:11:57.090\nit just hangs out.\n\n213\n00:11:57.090 --> 00:11:58.100\n&gt;&gt; It just sits there waiting.\n\n214\n00:11:58.100 --> 00:11:59.030\n&gt;&gt; Yeah.\n&gt;&gt; Yeah.\n\n215\n00:11:59.030 --> 00:12:01.320\n&gt;&gt; So, how does one fix this?\n\n216\n00:12:02.340 --> 00:12:04.890\nHm, well, what makes a thing picklable?\n\n217\n00:12:04.890 --> 00:12:09.480\nWell, top level classes, and\nobjects defined by those classes.\n\n218\n00:12:10.520 --> 00:12:14.710\nWhat I mean is, they're not nested\ndeep inside of modules, are picklable.\n\n219\n00:12:16.690 --> 00:12:19.500\nI know that's the Python vernacular, but\n\n220\n00:12:19.500 --> 00:12:22.055\nI feel absolutely ridiculous\nevery time I say that.\n\n221\n00:12:22.055 --> 00:12:23.780\n&gt;&gt; [LAUGH]\n&gt;&gt; What makes it pickleable?\n\n222\n00:12:25.190 --> 00:12:27.056\nI don't know, brine and sugar?\n\n223\n00:12:27.056 --> 00:12:27.825\n&gt;&gt; [LAUGH]\n&gt;&gt; I don't know.\n\n224\n00:12:27.825 --> 00:12:28.985\nI'm gonna add some garlic cloves.\n\n225\n00:12:28.985 --> 00:12:30.315\n&gt;&gt; [LAUGH]\n&gt;&gt; Makes them real good.\n\n226\n00:12:30.315 --> 00:12:31.244\n&gt;&gt; [LAUGH]\n&gt;&gt; They real good.\n\n227\n00:12:31.244 --> 00:12:31.830\n&gt;&gt; [LAUGH] Yeah.\n\n228\n00:12:31.830 --> 00:12:32.572\n&gt;&gt; They are like that.\n\n229\n00:12:32.572 --> 00:12:36.320\n[LAUGH] The garlic does\nmake it good,but anyway,\n\n230\n00:12:36.320 --> 00:12:38.862\nlet's actually go back to Python pickles.\n\n231\n00:12:38.862 --> 00:12:40.661\n&gt;&gt; [LAUGH] Yes, python pickles.\n\n232\n00:12:40.661 --> 00:12:42.405\n&gt;&gt; Got a little sidetracked there.\n\n233\n00:12:42.405 --> 00:12:46.163\nNow, if we look at this, you're like,\nI solved my problem, and now,\n\n234\n00:12:46.163 --> 00:12:48.350\nI have a different problem.\n\n235\n00:12:48.350 --> 00:12:50.290\nThat's actually par for\nthe course, welcome.\n\n236\n00:12:52.000 --> 00:12:54.320\nI can't return a function,\nbecause it's not pickleable.\n\n237\n00:12:54.320 --> 00:12:55.790\nI can't use a process pool, but\n\n238\n00:12:55.790 --> 00:12:59.020\nI really need to do this work in\nsome kind of concurrent way, right?\n\n239\n00:12:59.020 --> 00:12:59.650\nI had a lot of work.\n\n240\n00:12:59.650 --> 00:13:00.420\nI need to speed it up.\n\n241\n00:13:02.020 --> 00:13:08.840\nWell, I can now make this an object, okay?\n\n242\n00:13:08.840 --> 00:13:10.180\nSo let's call this an adder.\n\n243\n00:13:11.800 --> 00:13:15.760\nAnd what is this adder gonna take?\n\n244\n00:13:15.760 --> 00:13:18.530\nWell, in our initialization,\n\n245\n00:13:18.530 --> 00:13:23.040\nit's going to take our first number,\nright, our add number.\n\n246\n00:13:25.170 --> 00:13:26.551\nThat's not how you do that.\n\n247\n00:13:26.551 --> 00:13:29.016\nAnd self dot number=add_number.\n\n248\n00:13:29.016 --> 00:13:30.860\nJust like that.\n\n249\n00:13:30.860 --> 00:13:36.540\nNow, I can make an object\nthat keeps some number behind\n\n250\n00:13:36.540 --> 00:13:41.820\nthe scenes, like okay,\nand how would I use that?\n\n251\n00:13:41.820 --> 00:13:43.638\nWell, I would come here,\nand I would say, Adder.\n\n252\n00:13:46.016 --> 00:13:50.896\nAnd Adder, so now the number is 1\nbehind the scenes, the number is 3, and\n\n253\n00:13:50.896 --> 00:13:52.390\nwe're all good.\n\n254\n00:13:52.390 --> 00:13:57.600\nNow, if I try to use it this way, I'm also\ngoing to get something that's broke, but\n\n255\n00:13:57.600 --> 00:14:02.390\nI wanna show you that, just so,\nobject is not callable.\n\n256\n00:14:02.390 --> 00:14:05.210\nYou're like, all right, well,\nI didn't get that weird pickle message.\n\n257\n00:14:05.210 --> 00:14:06.580\nSo the pickle problem is over.\n\n258\n00:14:06.580 --> 00:14:08.020\n&gt;&gt; Yeah, the pickle problem is over.\n\n259\n00:14:08.020 --> 00:14:09.130\nNow, the problem is you can't\ncall this thing a thing.\n\n260\n00:14:09.130 --> 00:14:10.940\n&gt;&gt; Yeah, can't call it.\n\n261\n00:14:10.940 --> 00:14:15.800\nHowever, Python offers the ability using\none of these Python data model methods\n\n262\n00:14:15.800 --> 00:14:17.520\nto make an object callable.\n\n263\n00:14:17.520 --> 00:14:20.350\nI can call it like a function, all right?\n\n264\n00:14:20.350 --> 00:14:24.140\nSo, we're going to do that,\nand before we run this,\n\n265\n00:14:24.140 --> 00:14:28.010\nI'm gonna comment this out, we're gonna\nhop in, explore, see how that works.\n\n266\n00:14:28.010 --> 00:14:31.030\nAnd then, we're gonna see if it\nactually worked for us, okay?\n\n267\n00:14:31.030 --> 00:14:32.350\n&gt;&gt; I think I see were\nyou are going with this.\n\n268\n00:14:32.350 --> 00:14:36.890\nSo you had the variable, basically,\nbefore where it had the number in it, but\n\n269\n00:14:36.890 --> 00:14:37.650\nwe weren't able to use it,\n\n270\n00:14:37.650 --> 00:14:40.200\nbecause it wouldn't allow\ndue to the pickling process.\n\n271\n00:14:40.200 --> 00:14:40.930\n&gt;&gt; Right.\n&gt;&gt; Right, so\n\n272\n00:14:40.930 --> 00:14:43.830\nto get around that,\nwe're making it an object.\n\n273\n00:14:43.830 --> 00:14:47.460\nNow, we have encountered a new problem,\nwhich is, it's not callable.\n\n274\n00:14:47.460 --> 00:14:49.260\nSo now, we need to make it callable.\n\n275\n00:14:49.260 --> 00:14:51.320\nMan, I'm following.\n\n276\n00:14:51.320 --> 00:14:52.025\n&gt;&gt; Hopefully, you are, as well.\n\n277\n00:14:52.025 --> 00:14:54.475\n&gt;&gt; [LAUGH]\n&gt;&gt; So if I called it dunder\n\n278\n00:14:54.475 --> 00:14:57.089\n&gt;&gt; Call or __call, this says, well,\n\n279\n00:14:57.089 --> 00:15:00.848\nI'm gonna take the object,\nwhich is self, and then,\n\n280\n00:15:00.848 --> 00:15:05.425\nany number of arguments that you\nneed in order to accomplish this,\n\n281\n00:15:05.425 --> 00:15:10.164\nright, so I'm gonna say, value,\njust to keep them different, and\n\n282\n00:15:10.164 --> 00:15:15.508\nthis is going to have a return,\nit's gonna return self.number plus value.\n\n283\n00:15:15.508 --> 00:15:19.472\nJust like that, okay?\n\n284\n00:15:19.472 --> 00:15:22.610\nOkay, notice that I commented out\nthe process spool and things like that.\n\n285\n00:15:22.610 --> 00:15:24.560\nWe just wanna mess with add one and\nadd three.\n\n286\n00:15:26.090 --> 00:15:29.400\nSo, let's clear this out,\n\n287\n00:15:29.400 --> 00:15:33.810\npython3- i likefunctions,\nand then, add one.\n\n288\n00:15:33.810 --> 00:15:34.850\nWhat is that?\n\n289\n00:15:34.850 --> 00:15:36.480\nThat's an adder object.\n\n290\n00:15:36.480 --> 00:15:37.490\nAdd one.\n\n291\n00:15:39.360 --> 00:15:43.953\nWell, add one to three, that's four,\nthat next set of parenthesis.\n\n292\n00:15:43.953 --> 00:15:47.804\nBecause, effectively,\nwhat I've done is this, adder two,\n\n293\n00:15:47.804 --> 00:15:52.672\nthat saves the two behind the scenes, and\nthen, I call it again with another set\n\n294\n00:15:52.672 --> 00:15:56.759\nof parenthesis, and it behaves\nlike a function and returns that.\n\n295\n00:15:56.759 --> 00:15:58.850\nThis is now callable.\n\n296\n00:15:58.850 --> 00:16:02.693\nMm, well, maybe that solves our problem.\n\n297\n00:16:02.693 --> 00:16:06.510\nWe will see, maybe, maybe it doesn't.\n\n298\n00:16:06.510 --> 00:16:10.260\nAnd if it doesn't, then, well-\n&gt;&gt; You'll throw your hands in the air and\n\n299\n00:16:10.260 --> 00:16:11.220\nwalk out of the room.\n\n300\n00:16:11.220 --> 00:16:12.185\n&gt;&gt; Yep.\n&gt;&gt; [LAUGH]\n\n301\n00:16:12.185 --> 00:16:13.919\n&gt;&gt; Abandon ship, just like that,\n\n302\n00:16:13.919 --> 00:16:14.568\nall right.\n\n303\n00:16:14.568 --> 00:16:22.065\nSo now add_one is an adder object with a\ncallable method, it calls like a function.\n\n304\n00:16:22.065 --> 00:16:22.890\n&gt;&gt; Right.\n\n305\n00:16:22.890 --> 00:16:27.670\n&gt;&gt; And if we did def add_one,\nthat's exactly what it would do.\n\n306\n00:16:27.670 --> 00:16:31.000\nBut now we have kind of this abstraction\nwhere I can go, I have add_one and\n\n307\n00:16:31.000 --> 00:16:33.730\nadd_three, they're both adder objects.\n\n308\n00:16:33.730 --> 00:16:35.690\nBut in general, their behavior's the same.\n\n309\n00:16:35.690 --> 00:16:37.980\nThey wanna add some number that\nI've stored behind the scenes.\n\n310\n00:16:39.180 --> 00:16:40.750\nAnd now here we go.\n\n311\n00:16:40.750 --> 00:16:42.120\nI'm getting nervous, Daniel.\n\n312\n00:16:43.500 --> 00:16:46.960\nHere we go and, boom,\nit added one, just like that.\n\n313\n00:16:48.060 --> 00:16:52.950\nNow [COUGH] you may go,\nthis is a very small example.\n\n314\n00:16:52.950 --> 00:16:54.960\nYeah, it is.\n\n315\n00:16:54.960 --> 00:17:01.280\nBut here is something\nthat I have done before.\n\n316\n00:17:01.280 --> 00:17:06.940\nI have used this set up to kind of grab\ninformation that I may ask from a user.\n\n317\n00:17:06.940 --> 00:17:14.493\nLike, hey, well, what date, what\nparameter, what information do you need?\n\n318\n00:17:14.493 --> 00:17:17.421\nAnd now I have a bunch of CSV\nprocessing that I need to do for\n\n319\n00:17:17.421 --> 00:17:20.610\nmultiple CSV files that\nhave similar structures.\n\n320\n00:17:20.610 --> 00:17:23.350\nSo I'll store all of that user\ninformation in an object.\n\n321\n00:17:23.350 --> 00:17:28.163\nAnd then I'll make a dunder_call method\nthat actually does the parsing and\n\n322\n00:17:28.163 --> 00:17:29.149\nabstracting.\n\n323\n00:17:29.149 --> 00:17:32.640\nAnd then I'll fire up a process pool or\na thread pool in that case,\n\n324\n00:17:32.640 --> 00:17:35.160\ncuz that's more read intensive.\n\n325\n00:17:35.160 --> 00:17:39.140\nAnd then map, boom, and I'm actually hand.\n\n326\n00:17:39.140 --> 00:17:40.820\nYou won't always get this.\n\n327\n00:17:40.820 --> 00:17:42.630\nI'm actually hand if I have\nan eight core machine.\n\n328\n00:17:43.750 --> 00:17:49.010\nIt runs six times faster, which if\nnormally it would take you 60 seconds,\n\n329\n00:17:49.010 --> 00:17:50.520\nand now it takes you 10 seconds.\n\n330\n00:17:50.520 --> 00:17:53.300\nAnd you can process things a lot faster.\n\n331\n00:17:53.300 --> 00:17:58.501\nIf you spin up some kind of cloud\ninstance that might have 50 cores,\n\n332\n00:17:58.501 --> 00:18:00.843\nthen you might get a 40 time.\n\n333\n00:18:00.843 --> 00:18:02.617\nNow you'll notice I'm\nnot saying it's perfect.\n\n334\n00:18:02.617 --> 00:18:03.356\n&gt;&gt; Right.\n\n335\n00:18:03.356 --> 00:18:07.879\n&gt;&gt; But actually with threads you might get\nreally fast cuz you can have a bunch of\n\n336\n00:18:07.879 --> 00:18:12.763\nthreads per Python process, but\nyou might get a 40 times speed up, right?\n\n337\n00:18:12.763 --> 00:18:16.733\nI just did a lot of, but the only way\nyou can do that if you need to store\n\n338\n00:18:16.733 --> 00:18:22.210\ninformation in order to make decisions for\nthe function is, let me bundle this up.\n\n339\n00:18:22.210 --> 00:18:23.790\nAnd now it has a callable method.\n\n340\n00:18:23.790 --> 00:18:25.190\nAnd boom, there we go.\n\n341\n00:18:25.190 --> 00:18:29.040\nWe can use it like a function, but\nwe've stored information that we need for\n\n342\n00:18:29.040 --> 00:18:30.550\nthe function to execute.\n\n343\n00:18:30.550 --> 00:18:33.810\nBut we don't have to keep it in\nthis global file and kind of go,\n\n344\n00:18:33.810 --> 00:18:35.370\nwhat was the add number on this?\n\n345\n00:18:35.370 --> 00:18:36.730\nI need to change that to three now.\n\n346\n00:18:37.930 --> 00:18:39.060\nAdd three, what is that?\n\n347\n00:18:39.060 --> 00:18:41.860\nThat's an adder object with the number\nthree behind the scenes, and\n\n348\n00:18:41.860 --> 00:18:43.030\nit's all good.\n\n349\n00:18:43.030 --> 00:18:46.786\nSo this is how you make an object\nbehave like a function and\n\n350\n00:18:46.786 --> 00:18:50.238\nI have found it does comes\nin handy from time to time.\n\n351\n00:18:50.238 --> 00:18:52.784\n&gt;&gt; There's nothing like\nadding a very unique and\n\n352\n00:18:52.784 --> 00:18:56.280\nspecific tool to your\ntoolbox cuz you never know.\n\n353\n00:18:56.280 --> 00:19:00.700\nI've done it myself, you go to the store,\nyou buy a tool for that one thing.\n\n354\n00:19:00.700 --> 00:19:03.220\nBut when that one thing comes around and\nyou need that tool,\n\n355\n00:19:03.220 --> 00:19:06.570\nit's nice to have it there and not have to\ngo back and search around for it again.\n\n356\n00:19:06.570 --> 00:19:09.760\nIt's there, you know how to make it work,\nand this is a really cool example,\n\n357\n00:19:09.760 --> 00:19:10.980\nactually, Justin.\n\n358\n00:19:10.980 --> 00:19:14.690\nFor a specific case, but you're probably\ngonna run into it from time to time and\n\n359\n00:19:14.690 --> 00:19:16.780\nnow you're better equipped\nto handle it when you do.\n\n360\n00:19:16.780 --> 00:19:19.690\nJustin, anything else we need to add\nto this before we call it a day?\n\n361\n00:19:19.690 --> 00:19:21.790\n&gt;&gt; I think this is a good takeaway, right?\n\n362\n00:19:21.790 --> 00:19:23.510\nThis is a very specific tool.\n\n363\n00:19:23.510 --> 00:19:24.340\n&gt;&gt; Yeah.\n\n364\n00:19:24.340 --> 00:19:26.790\n&gt;&gt; But\nit is incredibly handy when it comes up.\n\n365\n00:19:26.790 --> 00:19:29.830\nAnd well, if you just start playing\naround in cloud technologies or\n\n366\n00:19:29.830 --> 00:19:32.710\ndistributed systems and\nyou're using Python.\n\n367\n00:19:32.710 --> 00:19:34.340\nYou may encounter a similar error and\n\n368\n00:19:34.340 --> 00:19:38.000\nnot necessarily with the process pool,\nexecutor or a thread pool.\n\n369\n00:19:38.000 --> 00:19:38.950\nHey, can't play the list.\n\n370\n00:19:40.370 --> 00:19:41.110\nWhy?\n\n371\n00:19:41.110 --> 00:19:43.780\nWell, you have to transmit information.\n\n372\n00:19:44.790 --> 00:19:47.280\nMake it an object and\nput the dunder call on it.\n\n373\n00:19:47.280 --> 00:19:48.840\nAnd now, it should be picklable.\n\n374\n00:19:49.940 --> 00:19:53.760\nBe very careful, there are times\nthat may still break that, but\n\n375\n00:19:53.760 --> 00:19:58.760\nat least it won't be that first\nbarrier that you would encounter.\n\n376\n00:19:58.760 --> 00:19:59.940\nYou're gonna remove that.\n\n377\n00:19:59.940 --> 00:20:01.470\n&gt;&gt; All right, well Justin,\nreally cool stuff today.\n\n378\n00:20:01.470 --> 00:20:03.000\nWe appreciate you dropping by.\n\n379\n00:20:03.000 --> 00:20:05.290\nAnd we appreciate you good\nfolks out there for watching.\n\n380\n00:20:05.290 --> 00:20:08.060\nBut it looks like we're at that point\nin the show where we call it a day.\n\n381\n00:20:08.060 --> 00:20:09.090\nThanks for watching yet again.\n\n382\n00:20:09.090 --> 00:20:11.990\nSigning off for DevProTV,\nI've been your host, Daniel Lowry.\n\n383\n00:20:11.990 --> 00:20:12.740\n&gt;&gt; And I'm Justin Dennison.\n\n384\n00:20:12.740 --> 00:20:14.734\n&gt;&gt; And we'll see you next time.\n\n385\n00:20:14.734 --> 00:20:20.420\n[MUSIC]\n\n",
          "vimeoId": "254547397"
        }
      ],
      "title": "Functions"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Daniel demonstrate how you can make a custom object work with context managers using the \\_\\_enter\\_\\_ and \\_\\_exit\\_\\_ methods.",
          "length": "1275",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/python-7-1-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/python-7-1-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/python-7-1-1-sm.jpg",
          "title": "Clean Up with Context Managers",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.407 --> 00:00:16.457\nAll right, greetings everyone, and welcome\nto another great episode of DevProTV.\n\n3\n00:00:16.457 --> 00:00:19.650\nI'm your host Daniel Lowrie,\nand in today's episode,\n\n4\n00:00:19.650 --> 00:00:22.132\nit's more in our Python data model series.\n\n5\n00:00:22.132 --> 00:00:24.364\nThat's right, if you haven't\nhad enough fun with them, well,\n\n6\n00:00:24.364 --> 00:00:25.549\nthen we're glad to have you back.\n\n7\n00:00:25.549 --> 00:00:28.741\nAnd joining us in the studio to have\nas much fun with us today as we did\n\n8\n00:00:28.741 --> 00:00:32.390\nyesterday and the day before that,\nour good friend, Mr. Justin Denison.\n\n9\n00:00:32.390 --> 00:00:35.167\nJustin, welcome back man, how's it going?\n&gt;&gt; It is going fantastic, Daniel,\n\n10\n00:00:35.167 --> 00:00:36.950\nhow are you today?\n&gt;&gt; I'm great, thanks for\n\n11\n00:00:36.950 --> 00:00:39.468\nasking, looking forward to\nwe're gonna talk about.\n\n12\n00:00:39.468 --> 00:00:43.490\nSome cleanup today, if I'm not mistaken.\n&gt;&gt; Yeah, yeah, so\n\n13\n00:00:43.490 --> 00:00:48.590\nif you've never used them, context\nmanagers are a great way to make sure\n\n14\n00:00:48.590 --> 00:00:53.190\nthat you start a process appropriately,\nand you end a process appropriately.\n\n15\n00:00:53.190 --> 00:00:56.180\nNow, interestingly enough, I'm gonna say,\nlet me give you some context for\n\n16\n00:00:56.180 --> 00:00:57.914\ncontext managers.\n&gt;&gt; [LAUGH]\n\n17\n00:00:57.914 --> 00:00:59.306\n&gt;&gt; If you've never used them,\n\n18\n00:00:59.306 --> 00:01:01.850\nyou should probably think about them.\n\n19\n00:01:01.850 --> 00:01:04.540\nWhat context managers allow\nus to do is say, hey.\n\n20\n00:01:04.540 --> 00:01:09.900\nWhen I start this process, there may\nbe some things I need to do always.\n\n21\n00:01:09.900 --> 00:01:12.360\nAnd then when I end this process,\nthere's some.\n\n22\n00:01:12.360 --> 00:01:16.440\nWhat I'm calling a process,\nI'm just saying like a block of code.\n\n23\n00:01:16.440 --> 00:01:18.723\nThere's something I always wanna do.\n\n24\n00:01:18.723 --> 00:01:20.730\nNow, let me give you\na more specific example.\n\n25\n00:01:21.820 --> 00:01:25.530\nOpening and reading a text file or\nsome kind of file, right?\n\n26\n00:01:25.530 --> 00:01:28.200\nIf you open a file,\nyou should always close it.\n\n27\n00:01:28.200 --> 00:01:32.315\nNow, on Linux it behaves, and\non Mac it behaves fairly well.\n\n28\n00:01:32.315 --> 00:01:36.952\nIf I'm not mistaken, there can crop\nup sometimes where in Windows, and\n\n29\n00:01:36.952 --> 00:01:40.760\nI'm not saying Mac and\nLinux can't do this.\n\n30\n00:01:40.760 --> 00:01:44.817\nI opened a file, I forgot to close it,\nI closed my Python repo or\n\n31\n00:01:44.817 --> 00:01:46.669\nmy script stopped running.\n\n32\n00:01:46.669 --> 00:01:51.187\nAnd then I try to go open it again, and\nit says, resource busy, or one of those.\n\n33\n00:01:51.187 --> 00:01:54.344\nWhere the file is still open and\nbeing used by a process that\n\n34\n00:01:54.344 --> 00:01:57.158\ndoesn't exist anymore.\n&gt;&gt; I've actually gotten those errors from\n\n35\n00:01:57.158 --> 00:01:59.049\nWindows before,\nwhere you're trying to open a file.\n\n36\n00:01:59.049 --> 00:02:03.731\nAnd it says that the resource you were\ntrying to use is currently being used by\n\n37\n00:02:03.731 --> 00:02:07.846\nanother program, or application,\nor something, sorry [LAUGH].\n\n38\n00:02:07.846 --> 00:02:09.452\n&gt;&gt; Yeah, and we don't want that,\n\n39\n00:02:09.452 --> 00:02:11.120\nbecause I've had those as well.\n\n40\n00:02:11.120 --> 00:02:16.640\nAnd it's incredibly frustrating, and\na lot of times, reboot might fix it.\n\n41\n00:02:16.640 --> 00:02:21.014\nBut now you gotta reboot, what was I\ndoing, I gotta wait for the updates,\n\n42\n00:02:21.014 --> 00:02:22.420\nhere we go again.\n\n43\n00:02:22.420 --> 00:02:23.090\nAnd so\n\n44\n00:02:23.090 --> 00:02:27.860\nit would be nice if you were like, I just\nneed to remember to close that file.\n\n45\n00:02:27.860 --> 00:02:33.900\nBut if it's left up to us, sometimes we\nforget, I've forgotten, full disclosure.\n\n46\n00:02:33.900 --> 00:02:37.680\nI'm bad about this if I don't\nuse content managers, okay?\n\n47\n00:02:37.680 --> 00:02:42.420\nNow, what's interesting is,\nfiles are a great example,\n\n48\n00:02:42.420 --> 00:02:44.810\nopening socket connections in Python 3.\n\n49\n00:02:44.810 --> 00:02:50.380\nI wanna create a socket which creates some\nkind of connection, I wanna do stuff.\n\n50\n00:02:50.380 --> 00:02:52.760\nAnd then I wanna make stuff\nsure I close it when I'm done.\n\n51\n00:02:54.560 --> 00:02:59.200\nCan be done, but it now has\nthe context manager available with it.\n\n52\n00:02:59.200 --> 00:03:02.838\nI've seen this in threading, you're gonna\nactually use this to thread pools and\n\n53\n00:03:02.838 --> 00:03:03.583\nprocess pools.\n\n54\n00:03:03.583 --> 00:03:07.134\nBecause those should also be\nkind of spun down, terminated,\n\n55\n00:03:07.134 --> 00:03:09.400\nand rejoined back to the main process.\n\n56\n00:03:09.400 --> 00:03:12.959\nIf you don't, sometimes you'll have\nwhat are called zombie processes.\n\n57\n00:03:12.959 --> 00:03:15.821\nThey're just Python processes hanging out,\nthey're not doing anything, but\n\n58\n00:03:15.821 --> 00:03:17.684\nthey're running, and\nthey're taking up memory.\n\n59\n00:03:17.684 --> 00:03:22.397\nAnd if your program that you've written\nmaybe has a memory leak over a long time,\n\n60\n00:03:22.397 --> 00:03:24.560\nyou look in htop or Process Manager.\n\n61\n00:03:24.560 --> 00:03:28.576\nAnd you're like, there's a Python\nprocess taking up six gigabytes of RAM\n\n62\n00:03:28.576 --> 00:03:31.824\nafter two days, that's no good.\n&gt;&gt; It seems excessive.\n\n63\n00:03:31.824 --> 00:03:34.768\n&gt;&gt; It does seem excessive, and, well,\n\n64\n00:03:34.768 --> 00:03:36.335\nit is, it is [LAUGH].\n\n65\n00:03:36.335 --> 00:03:42.600\nBut all of these things have happened,\ncontext managers help with this.\n\n66\n00:03:42.600 --> 00:03:45.090\nSo if you've never used them,\nlet me show you how to use them.\n\n67\n00:03:45.090 --> 00:03:47.570\nAnd then let me show you how, well,\n\n68\n00:03:47.570 --> 00:03:52.560\nmaybe I always want to clean up kind\nof after I've accomplished something.\n\n69\n00:03:52.560 --> 00:03:54.610\nNot the greatest example,\nbut at a high level,\n\n70\n00:03:54.610 --> 00:03:58.920\nprovides us with a more\nmacroscopic approach, all right?\n\n71\n00:03:58.920 --> 00:04:03.750\nSo let's go ahead and take a look at the\nscreen here and let's hop into the repo.\n\n72\n00:04:03.750 --> 00:04:09.700\nBefore we do, though,\nI'm going to say data.txt, and\n\n73\n00:04:09.700 --> 00:04:15.610\nthis data file has a, b, c, d,\ne, f, g, and h all on a line.\n\n74\n00:04:15.610 --> 00:04:19.560\nThat's all we want, because I'm\ngonna use a file to show you, well,\n\n75\n00:04:19.560 --> 00:04:21.230\ncontext managers, okay?\n\n76\n00:04:21.230 --> 00:04:26.358\nSo here we go,\nI'm going to hop into Python 3,\n\n77\n00:04:26.358 --> 00:04:33.558\nand if I wanted to open this file,\nwe could open data.txt like so.\n\n78\n00:04:33.558 --> 00:04:40.514\nAnd I now have mode r encoding\na text IO wrapper data.txt.\n\n79\n00:04:40.514 --> 00:04:44.756\nAnd I can read the data,\n\n80\n00:04:44.756 --> 00:04:50.490\nfo.readlines like so, okay.\n\n81\n00:04:50.490 --> 00:04:53.240\nSo here's data, and\nit just reads in line by line.\n\n82\n00:04:53.240 --> 00:04:54.570\nThe new line characters are still there,\n\n83\n00:04:54.570 --> 00:04:58.520\nyou have to do a little bit of processing,\nbut it's all there.\n\n84\n00:04:58.520 --> 00:05:02.024\nNow let's say that I have to do a bunch\nof other stuff, and then I'm like, well,\n\n85\n00:05:02.024 --> 00:05:03.549\nI'm done, and I close out the repo.\n\n86\n00:05:03.549 --> 00:05:07.633\nI haven't closed the file,\nwhich as I said, on Mac and on Linux,\n\n87\n00:05:07.633 --> 00:05:09.874\nit's a little bit better behaved.\n\n88\n00:05:09.874 --> 00:05:11.716\nBut I really should go,\n\n89\n00:05:11.716 --> 00:05:16.887\nfo.close() when I'm finished\nwith the file, just like that.\n\n90\n00:05:16.887 --> 00:05:20.975\nAll right, so if we look at fo,\nthis hasn't changed any.\n\n91\n00:05:20.975 --> 00:05:25.443\nAnd if I'm not mistaken, in older\nversions of Python, it used to say,\n\n92\n00:05:25.443 --> 00:05:28.350\nfile object either open or closed.\n\n93\n00:05:28.350 --> 00:05:34.965\nSo this is a little bit different, it\nwould be nice if I could, let's see here.\n\n94\n00:05:34.965 --> 00:05:40.098\nSee this fo.closed, there is\na property that that changes as a flag,\n\n95\n00:05:40.098 --> 00:05:42.364\nyes the file object is closed.\n\n96\n00:05:42.364 --> 00:05:46.587\nIf I now try to read, just to clear\nthis out, if I try to readlines again,\n\n97\n00:05:46.587 --> 00:05:50.810\nyou can't, because I've actually\nclosed the file object.\n\n98\n00:05:50.810 --> 00:05:52.080\nAnd that's good, that's what we want,\n\n99\n00:05:52.080 --> 00:05:54.650\nwe wanna make sure we don't have\nthat resource is busy thing.\n\n100\n00:05:55.710 --> 00:05:59.070\nBut I'm gonna hop out of here just to\nclean things up, and come back in.\n\n101\n00:05:59.070 --> 00:06:04.398\nAnd now, how can I do this with a process,\nor excuse me, with a context manager?\n\n102\n00:06:04.398 --> 00:06:10.491\nWell, with open('data.txt') as fo.\n\n103\n00:06:10.491 --> 00:06:16.067\nWell, in this block, I can do anything\nwith a file object that I want.\n\n104\n00:06:16.067 --> 00:06:20.125\nBecause in this block, the variable fo\nis a assigned to the file object and\n\n105\n00:06:20.125 --> 00:06:21.610\nit's open.\n\n106\n00:06:21.610 --> 00:06:28.980\nSo I'll go, okay, I wanna grab some data,\nfo.readlines(), just like that.\n\n107\n00:06:28.980 --> 00:06:34.513\nAnd then print(data),\nprint(fo.closed) like that.\n\n108\n00:06:34.513 --> 00:06:39.941\nI'm just gonna print out those properties,\nI'm gonna hit Enter.\n\n109\n00:06:39.941 --> 00:06:44.842\nAnd notice it says,\nfo.closed was false inside of this,\n\n110\n00:06:44.842 --> 00:06:48.540\nif I now type fo.closed, it is true.\n\n111\n00:06:48.540 --> 00:06:52.160\nBy using the context manager, when it\ngets to the end of that block, it goes,\n\n112\n00:06:52.160 --> 00:06:54.780\nhey, I’m gonna go ahead and\nclean up for you.\n\n113\n00:06:54.780 --> 00:06:58.270\nI’m gonna close that file and\nmake sure that's all taken care of.\n\n114\n00:06:58.270 --> 00:07:02.410\nSockets will do this, process pools,\nthread pools, a lot of things\n\n115\n00:07:02.410 --> 00:07:07.194\nuse context managers, because this\nis a common pattern, all right?\n\n116\n00:07:07.194 --> 00:07:10.470\nNow, if you are building custom objects,\nright,\n\n117\n00:07:10.470 --> 00:07:14.340\nso we've seen how context managers\nare helpful, how they're useful,\n\n118\n00:07:14.340 --> 00:07:18.690\nif you've never used them, but\neven if you have, that's a quick reminder.\n\n119\n00:07:18.690 --> 00:07:24.750\nIf I have something that I need to,\nwell, start and end, I have a starting\n\n120\n00:07:24.750 --> 00:07:28.930\nprocess and I have an ending process,\nthen we can do that in the custom object.\n\n121\n00:07:28.930 --> 00:07:33.160\nAnd we can use context managers,\njust like any of these others, all right?\n\n122\n00:07:33.160 --> 00:07:36.459\nSo let's create a file called ctx.py,\nand as I said,\n\n123\n00:07:36.459 --> 00:07:39.278\nI'm gonna take a more\nmacroscopic approach.\n\n124\n00:07:39.278 --> 00:07:42.606\nI'm gonna create a car class,\nall right, so\n\n125\n00:07:42.606 --> 00:07:46.735\nhere we have def __init__ and\nself, you know what?\n\n126\n00:07:46.735 --> 00:07:52.055\nI'm not gonna have any colors or anything,\nbut let's say there's a running.\n\n127\n00:07:52.055 --> 00:07:54.457\nAnd by default, when you create a car,\nit's not running.\n\n128\n00:07:54.457 --> 00:08:00.234\nAnd let's say that it has an odometer,\nand that starts as 0.\n\n129\n00:08:00.234 --> 00:08:05.430\nAnd let's say that there's a direction,\nand that starts 90 degrees, right?\n\n130\n00:08:05.430 --> 00:08:07.038\nAnd so it's pointing north.\n\n131\n00:08:07.038 --> 00:08:12.635\nThose degree measures don't\nalways match up to north,\n\n132\n00:08:12.635 --> 00:08:14.188\nsouth, east-\n\n133\n00:08:14.188 --> 00:08:14.699\n&gt;&gt; Right.\n&gt;&gt; West correctly.\n\n134\n00:08:14.699 --> 00:08:16.824\nSo do keep that in mind.\n&gt;&gt; But close enough, right?\n\n135\n00:08:16.824 --> 00:08:17.743\n&gt;&gt; Yeah, it'll be fine.\n\n136\n00:08:17.743 --> 00:08:18.517\n&gt;&gt; [LAUGH]\n\n137\n00:08:18.517 --> 00:08:19.303\n&gt;&gt; We'll go with\n\n138\n00:08:19.303 --> 00:08:20.028\nit.\n&gt;&gt; Yeah.\n\n139\n00:08:20.028 --> 00:08:22.119\n[LAUGH]\n&gt;&gt; So I'm gonna add a few methods,\n\n140\n00:08:22.119 --> 00:08:24.051\njust not mave, that's something else.\n\n141\n00:08:24.051 --> 00:08:26.648\nSelf amount-\n&gt;&gt; What's more about this mave method?\n\n142\n00:08:26.648 --> 00:08:29.426\n[LAUGH]\n&gt;&gt; Is that that special one?\n\n143\n00:08:29.426 --> 00:08:32.106\nNo, that's just a typo,\nit'll get you every time.\n\n144\n00:08:32.106 --> 00:08:38.100\nSo when I move, I want to take\nthe odometer and set that equal to,\n\n145\n00:08:38.100 --> 00:08:42.768\nor excuse me,\nadd to it whatever amount I send in.\n\n146\n00:08:42.768 --> 00:08:48.558\nHowever, I only want to do\nthat if the car is running.\n\n147\n00:08:51.453 --> 00:08:56.680\nAll right, so now I can only move if\nthe car is running, and that makes sense.\n\n148\n00:08:56.680 --> 00:09:01.580\nIn real life, typically your car's\nnot gonna move if it's not running.\n\n149\n00:09:01.580 --> 00:09:05.123\nTypically, now if you're on a hill and\nyou forgot the emergency brake and\n\n150\n00:09:05.123 --> 00:09:08.799\nyou put it in neutral, technically your\ncar is not running but it is moving.\n\n151\n00:09:08.799 --> 00:09:11.959\nBut those are eductate,\nlet's not worry about this.\n\n152\n00:09:11.959 --> 00:09:18.069\nAnd now I'm gonna make a quick helper\nmethod here, that's called _turn,\n\n153\n00:09:18.069 --> 00:09:22.569\nthat's says, hey,\nI just want you to hang out on this.\n\n154\n00:09:22.569 --> 00:09:26.770\nI don't want you to use this as\nan internal implementation details.\n\n155\n00:09:26.770 --> 00:09:30.078\nI also wanna say,\nonly if self.running, do these things.\n\n156\n00:09:30.078 --> 00:09:33.916\nSo one, two, three, four, and\n\n157\n00:09:33.916 --> 00:09:39.000\nthen self.direction += amount, okay?\n\n158\n00:09:39.000 --> 00:09:46.849\nAnd I'm gonna use that to\nimplement turn_right, (self): and\n\n159\n00:09:46.849 --> 00:09:51.866\nthen so self., I'll just go with turn.\n\n160\n00:09:51.866 --> 00:09:57.273\nAnd if I want turn right, I'm gonna assume\na certain direction is turn 90 degrees.\n\n161\n00:09:57.273 --> 00:10:06.555\nSo turn 90 degrees, and\nthen I'm gonna turn around, All right?\n\n162\n00:10:06.555 --> 00:10:07.587\nSo what is turn around?\n\n163\n00:10:07.587 --> 00:10:11.826\nWell, that's turn 180 degrees,\n\n164\n00:10:11.826 --> 00:10:15.540\nand I think that'll work for us.\n\n165\n00:10:15.540 --> 00:10:18.709\nNow if I come down here and\ncreate a car object,\n\n166\n00:10:18.709 --> 00:10:23.110\nlet’s just make sure that I can do,\nwell let’s think about it.\n\n167\n00:10:23.110 --> 00:10:26.382\nIf I wanna move,\nI have to start the car, right?\n\n168\n00:10:26.382 --> 00:10:31.378\nSo I have to say, car.running = True,\nthat’s like getting into the car,\n\n169\n00:10:31.378 --> 00:10:34.440\nturning it on, that’s our startup process.\n\n170\n00:10:34.440 --> 00:10:40.141\nI’m gonna say car.move, just like that,\nand how much do I wanna move by?\n\n171\n00:10:40.141 --> 00:10:46.296\nWell 10, and then car.turn_right, And\n\n172\n00:10:46.296 --> 00:10:53.465\nthen car.move again, And\nthen car.turn_left, excuse me,\n\n173\n00:10:53.465 --> 00:10:57.641\nturn_around, turn right, turn left.\n&gt;&gt; [LAUGH]\n\n174\n00:10:57.641 --> 00:10:59.077\n&gt;&gt; turn_round, and\n\n175\n00:10:59.077 --> 00:11:03.676\nthen I'm getting out of the car, I'm done.\n&gt;&gt; So turn the car off.\n\n176\n00:11:03.676 --> 00:11:05.079\n&gt;&gt; I need to turn the car off.\n\n177\n00:11:05.079 --> 00:11:07.750\nAnd well, that would be easy to forget.\n\n178\n00:11:07.750 --> 00:11:08.810\nNow in real life,\n\n179\n00:11:08.810 --> 00:11:13.622\nit's probably not easy to forget that you\nleft your car running on your carport or\n\n180\n00:11:13.622 --> 00:11:17.303\nin your carage, but you never know-\n&gt;&gt; Yeah, these things happen.\n\n181\n00:11:17.303 --> 00:11:18.031\n&gt;&gt; So they do, and\n\n182\n00:11:18.031 --> 00:11:19.949\nI actually know a few people-\n&gt;&gt; [LAUGH]\n\n183\n00:11:19.949 --> 00:11:20.537\n&gt;&gt; Who are like I came out\n\n184\n00:11:20.537 --> 00:11:21.390\nthe next morning to go to work.\n\n185\n00:11:21.390 --> 00:11:23.815\nMy car was warm,\ncuz I left it running all night.\n\n186\n00:11:23.815 --> 00:11:27.774\nAnd I'm like,\nhow did you get in your house with keys?\n\n187\n00:11:27.774 --> 00:11:28.372\n&gt;&gt; [LAUGH]\n\n188\n00:11:28.372 --> 00:11:30.716\n&gt;&gt; But it easy to forget in programming,\n\n189\n00:11:30.716 --> 00:11:31.808\nright?\n&gt;&gt; Yeah.\n\n190\n00:11:31.808 --> 00:11:33.867\n&gt;&gt; So if we were to not turn the car on,\n\n191\n00:11:33.867 --> 00:11:38.340\nour move, our turn_right,\nour turn_around, none of that would work.\n\n192\n00:11:38.340 --> 00:11:39.973\nBecause well, our car has to be running.\n\n193\n00:11:39.973 --> 00:11:46.038\nLet's do a little print out here,\n\n194\n00:11:46.038 --> 00:11:50.640\nprint(f' you have moved\n\n195\n00:11:50.640 --> 00:11:55.662\n{car.odometer} miles,\n\n196\n00:11:55.662 --> 00:11:58.602\njust like that.\n\n197\n00:11:58.602 --> 00:12:03.619\nAnd then print (f' you are facing\n\n198\n00:12:03.619 --> 00:12:11.751\n{car.direction} direction 90 degrees,\nright?\n\n199\n00:12:11.751 --> 00:12:15.140\nSo these are gonna be degrees, maybe not\nthe greatest print out, we'll go with it.\n\n200\n00:12:15.140 --> 00:12:16.045\n&gt;&gt; Yeah, it will work.\n\n201\n00:12:16.045 --> 00:12:16.645\n&gt;&gt; There we go.\n\n202\n00:12:16.645 --> 00:12:20.572\nSo now if I run this, Right?\n\n203\n00:12:20.572 --> 00:12:26.730\nctx, boom, you've moved 20 miles, you're\nfacing 360 degrees, a turn 90, right?\n\n204\n00:12:26.730 --> 00:12:28.899\nSo that was 90 degrees from 90,\nthat's 180.\n\n205\n00:12:28.899 --> 00:12:31.045\nI turned around so that's 360 degrees.\n&gt;&gt; Right.\n\n206\n00:12:31.045 --> 00:12:32.745\n&gt;&gt; Logic's a little weird in there because\n\n207\n00:12:32.745 --> 00:12:34.887\nreally I'm back to zero\n&gt;&gt; [LAUGH]\n\n208\n00:12:34.887 --> 00:12:36.552\n&gt;&gt; As far as turning, but\n\n209\n00:12:36.552 --> 00:12:38.401\nI have moved 20 miles.\n\n210\n00:12:38.401 --> 00:12:39.187\nIt worked, right?\n\n211\n00:12:39.187 --> 00:12:41.886\nBut now let's think about this.\n\n212\n00:12:41.886 --> 00:12:47.507\nIf I was using this in a program, and\nI forgot to turn the car on, right?\n\n213\n00:12:47.507 --> 00:12:50.529\nForgot to turn it on, right?\n\n214\n00:12:50.529 --> 00:12:53.690\nYou have a large code base,\nthese things happen.\n\n215\n00:12:53.690 --> 00:12:56.380\nYou've moved zero miles and\nyou are facing 90 degrees.\n\n216\n00:12:56.380 --> 00:13:01.000\nNothing happens because my\ncar is not running, man,\n\n217\n00:13:01.000 --> 00:13:03.910\nI messed that up, but\nI now I have to do that every time.\n\n218\n00:13:03.910 --> 00:13:08.140\nLikewise I need to turn it off every time,\nand\n\n219\n00:13:08.140 --> 00:13:10.880\nit would be nice if that was\nkind of just handled for us.\n\n220\n00:13:10.880 --> 00:13:13.377\nWell, we've seen a similar pattern of,\nI open a file, I need to close it.\n\n221\n00:13:13.377 --> 00:13:14.828\nI open a socket, I need to close.\n\n222\n00:13:14.828 --> 00:13:18.370\nI create a process pool,\nI need to shut it down.\n\n223\n00:13:19.820 --> 00:13:21.823\nHow can we implement this in our car?\n\n224\n00:13:21.823 --> 00:13:28.144\nWell, there's a couple of methods,\nbut before we do those methods,\n\n225\n00:13:28.144 --> 00:13:34.803\nlet me give you some context of,\nI wanna say with Car() as car, like so.\n\n226\n00:13:34.803 --> 00:13:39.409\nAnd then one, two, three,\nfour, one, two, three,\n\n227\n00:13:39.409 --> 00:13:44.520\nfour, one, two, three, four,\none, two, three, four.\n\n228\n00:13:44.520 --> 00:13:49.846\nAnd yes I'm counting, because my tabs are\ntab characters in this instance of them.\n\n229\n00:13:49.846 --> 00:13:53.805\nSo I can't hit tabs, cuz then-\n&gt;&gt; [LAUGH] [CROSSTALK]\n\n230\n00:13:53.805 --> 00:13:55.306\n&gt;&gt; Bad, don't do that.\n\n231\n00:13:55.306 --> 00:14:00.660\nBut now, if I did this,\nI don't even need this car.running or\n\n232\n00:14:00.660 --> 00:14:06.737\nthe car.running = true, or\nthe car dot running = false, all right?\n\n233\n00:14:06.737 --> 00:14:10.368\nSo with car as car,\ncar.move, car.turn_right(),\n\n234\n00:14:10.368 --> 00:14:14.232\ncar.move(10), car.turn_around(),\nall right?\n\n235\n00:14:14.232 --> 00:14:20.500\nLikewise, let's say that I wanna a report\nanytime I'm done with my car,r ight?\n\n236\n00:14:20.500 --> 00:14:24.279\nIf you're ever in a delivery driver\nI have, we had to make reports-\n\n237\n00:14:24.279 --> 00:14:24.893\n&gt;&gt; Yeah.\n\n238\n00:14:24.893 --> 00:14:26.474\n&gt;&gt; At the end of every kind of shipment,\n\n239\n00:14:26.474 --> 00:14:29.441\nlike all right, I've driven this\nmany miles, this is where I went.\n\n240\n00:14:29.441 --> 00:14:33.994\nIt would be nice if that was kinda auto,\nsomething you need to remember.\n\n241\n00:14:33.994 --> 00:14:37.461\nWell as it stands,\nlet's just see if this works.\n\n242\n00:14:37.461 --> 00:14:40.455\nLet's see if this works,\nyou're like well maybe this works,\n\n243\n00:14:40.455 --> 00:14:42.778\nsometimes Python provides\nus a little bit of magic.\n\n244\n00:14:42.778 --> 00:14:47.482\nAnd it's broke, but\nsometimes the broke message\n\n245\n00:14:47.482 --> 00:14:51.637\ngives you a little bit of a breadcrumb.\n&gt;&gt; Yeah.\n\n246\n00:14:51.637 --> 00:14:53.720\n&gt;&gt; AttributeError: __enter,\n\n247\n00:14:53.720 --> 00:14:55.314\nyou don't have that.\n\n248\n00:14:55.314 --> 00:14:59.442\nWell, if it doesn't have that,\ndouble underscores are typically methods,\n\n249\n00:14:59.442 --> 00:15:02.577\nI wonder if we put a __enter in there.\n&gt;&gt; It just worked after that.\n\n250\n00:15:02.577 --> 00:15:05.917\n&gt;&gt; Maybe it'll just work, And so\n\n251\n00:15:05.917 --> 00:15:09.419\nwe're gonna come down here to\nthe bottom and say def __enter.\n\n252\n00:15:11.730 --> 00:15:17.418\nAnd, return 0.\n&gt;&gt; [LAUGH] Yeah.\n\n253\n00:15:17.418 --> 00:15:18.168\n&gt;&gt; I don't know,\n\n254\n00:15:18.168 --> 00:15:19.674\nwe'll just throw it in there.\n\n255\n00:15:19.674 --> 00:15:24.645\n[COUGH] Actually,\nwe'd exit, there's no exit.\n\n256\n00:15:24.645 --> 00:15:25.164\n&gt;&gt; No exit.\n\n257\n00:15:25.164 --> 00:15:26.351\n&gt;&gt; So it looks like it worked.\n\n258\n00:15:26.351 --> 00:15:27.261\n&gt;&gt; Exit problem's gone, yeah.\n\n259\n00:15:27.261 --> 00:15:29.056\n&gt;&gt; Yeah, to the enter problem's gone,\n\n260\n00:15:29.056 --> 00:15:30.298\nnow we need it under exit.\n\n261\n00:15:30.298 --> 00:15:34.431\nWell that's easy, and I'm doing this to\ndemonstrate some of the thought processes\n\n262\n00:15:34.431 --> 00:15:36.830\nwhen you're playing\naround with these things.\n\n263\n00:15:36.830 --> 00:15:39.371\nHow to thing about this,\n\n264\n00:15:39.371 --> 00:15:43.919\nthis is pre-prepared so I know-\n&gt;&gt; You know what's gonna happen.\n\n265\n00:15:43.919 --> 00:15:44.700\n[LAUGH]\n&gt;&gt; What's gonna happen.\n\n266\n00:15:44.700 --> 00:15:49.898\nSpoiler alert, but\nI do know just for the sake of time\n\n267\n00:15:49.898 --> 00:15:56.173\nthat this dunder exit sometimes\ntakes additional arguments.\n\n268\n00:15:56.173 --> 00:15:56.766\nAll right?\n\n269\n00:15:56.766 --> 00:16:03.650\nBut we're gonna print args,\nand print kworgs.\n\n270\n00:16:03.650 --> 00:16:05.750\nI just like saying kworgs.\n&gt;&gt; It is fun.\n\n271\n00:16:05.750 --> 00:16:07.530\n&gt;&gt; All right, those are keyword arguments.\n\n272\n00:16:07.530 --> 00:16:10.640\nLet's see where we're being sent in.\n\n273\n00:16:10.640 --> 00:16:11.450\nSo here we go.\n\n274\n00:16:12.770 --> 00:16:13.470\nThere we go.\n\n275\n00:16:14.710 --> 00:16:16.420\nSo we're so close.\n\n276\n00:16:17.580 --> 00:16:19.485\nClass AttributeError, AttributeError.\n\n277\n00:16:19.485 --> 00:16:21.265\nSo there's the argument.\n\n278\n00:16:21.265 --> 00:16:23.420\nSo we get some errors.\n\n279\n00:16:23.420 --> 00:16:26.740\nBut what is the error if we come down\nhere, int object has no attribute move?\n\n280\n00:16:28.240 --> 00:16:29.415\nYeah, we didn't return zero.\n\n281\n00:16:29.415 --> 00:16:31.580\nZero.move doesn't make any sense.\n\n282\n00:16:33.900 --> 00:16:37.327\nS, well, now here is where l\nstart revealing that, well,\n\n283\n00:16:37.327 --> 00:16:39.468\nI've already pre-pared for this.\n\n284\n00:16:39.468 --> 00:16:40.878\nTypically on Enter,\n\n285\n00:16:40.878 --> 00:16:45.590\nyou're going to return the object\nthat is being aliased using that as.\n\n286\n00:16:45.590 --> 00:16:48.762\nSo with car parentheses as car,\nwhatever's getting\n\n287\n00:16:48.762 --> 00:16:53.910\nstored in that variable is what you're\nreturning from the dunder enter.\n\n288\n00:16:53.910 --> 00:16:54.902\nIn this case,\n\n289\n00:16:54.902 --> 00:16:59.872\nwe want to return the object itself\nbecause we want it to be a car, okay?\n\n290\n00:16:59.872 --> 00:17:02.213\nMost of the time that is the case.\n\n291\n00:17:02.213 --> 00:17:08.383\nYou're returning whatever you're\nconstructing, or initializing, I guess.\n\n292\n00:17:08.383 --> 00:17:11.512\nThe constructing gets a little weird.\n\n293\n00:17:11.512 --> 00:17:15.048\nSo we come back, and\nwe say python3 ctx.py,\n\n294\n00:17:15.048 --> 00:17:18.138\nnotice our args are None, None, None.\n\n295\n00:17:18.138 --> 00:17:20.819\nAnd then here we go.\n\n296\n00:17:20.819 --> 00:17:25.050\nI still have moved zero miles and\n90 degrees.\n\n297\n00:17:25.050 --> 00:17:25.950\nBut why is that?\n\n298\n00:17:25.950 --> 00:17:30.930\nWell, we haven't quite got our start-up\nprocedure or ending procedure right.\n\n299\n00:17:31.990 --> 00:17:34.675\nWell, let's fix that,\nlet's think about this.\n\n300\n00:17:34.675 --> 00:17:36.050\nDunder Enter.\n\n301\n00:17:36.050 --> 00:17:41.960\nAnything that you need to do when\nyou enter a context manager block.\n\n302\n00:17:41.960 --> 00:17:44.876\nWell here, I wanna say\nself.running equals true, right?\n\n303\n00:17:44.876 --> 00:17:45.770\nI wanna start the car.\n\n304\n00:17:47.330 --> 00:17:48.490\nAnd then return self.\n\n305\n00:17:48.490 --> 00:17:50.240\nAnd then inside of the indented block,\n\n306\n00:17:50.240 --> 00:17:52.760\nthat's where I'm gonna\nuse that car object.\n\n307\n00:17:52.760 --> 00:17:55.515\nAnd then,\nI'm gonna come down here to exit.\n\n308\n00:17:55.515 --> 00:17:57.740\nBut when I exit the car,\nwhat do I wanna do?\n\n309\n00:17:57.740 --> 00:18:00.210\nI wanna, that is-\n&gt;&gt; [LAUGH]\n\n310\n00:18:00.210 --> 00:18:01.730\n&gt;&gt; Not even a thing.\n\n311\n00:18:01.730 --> 00:18:03.746\nRunning equals false.\n\n312\n00:18:03.746 --> 00:18:11.860\nBut this reporting that's probably a good\nplace to put this here as well, right?\n\n313\n00:18:11.860 --> 00:18:15.610\nI'm done with my shift and\nnow I'm reporting.\n\n314\n00:18:15.610 --> 00:18:18.830\nThe one thing we have to do is\nI'm no longer using car, but\n\n315\n00:18:18.830 --> 00:18:23.150\nit's actually the individual\nobject like that, okay?\n\n316\n00:18:24.570 --> 00:18:26.880\nBy doing that, notice,\nI've hidden away, hey,\n\n317\n00:18:26.880 --> 00:18:29.793\nthis is the thing you have to do\nwhen you start using this object.\n\n318\n00:18:29.793 --> 00:18:32.130\nThis is the thing you have\nto do when you're done.\n\n319\n00:18:32.130 --> 00:18:33.742\nI just use a context manager block.\n\n320\n00:18:33.742 --> 00:18:38.075\nSo with Car() as car, car.move,\ncar.turn_right, car.move again, and\n\n321\n00:18:38.075 --> 00:18:39.295\ncar.turn_around.\n\n322\n00:18:39.295 --> 00:18:40.760\nLet's see if it works.\n\n323\n00:18:41.810 --> 00:18:44.020\nCross your fingers, here's hoping.\n\n324\n00:18:44.020 --> 00:18:48.296\nAnd there we go,\nI have moved 20 miles 360 degrees.\n\n325\n00:18:48.296 --> 00:18:55.180\nWell, let's do this, python3 -i ctx.py,\nso it ran, do I still have car?\n\n326\n00:18:55.180 --> 00:18:55.810\nI do.\n\n327\n00:18:56.942 --> 00:18:58.370\nIs it running?\n\n328\n00:18:58.370 --> 00:18:59.110\nNo.\n\n329\n00:18:59.110 --> 00:19:05.470\nIf I try to move Let's say move by ten,\ncar.odometer.\n\n330\n00:19:05.470 --> 00:19:10.210\nIt's still 20 because the context\nmanager made sure I turned the car off.\n\n331\n00:19:10.210 --> 00:19:12.594\nThat was abstracted away from me.\n\n332\n00:19:12.594 --> 00:19:15.519\nI don't have to manually\nhandle that every time.\n\n333\n00:19:15.519 --> 00:19:19.590\nSo it's a great way of, I need to do\nthis every time, at the beginning and\n\n334\n00:19:19.590 --> 00:19:22.340\nat the end, enter, exit.\n\n335\n00:19:22.340 --> 00:19:25.680\nIt's a real great way to make sure\nyou don't forget that little bit of.\n\n336\n00:19:25.680 --> 00:19:30.140\nIn this case, it wouldn't matter,\nother than it just reports poorly.\n\n337\n00:19:30.140 --> 00:19:32.930\nBut in the case of a file, resource busy.\n&gt;&gt; Right.\n\n338\n00:19:32.930 --> 00:19:34.350\n&gt;&gt; There's only a socket connection open.\n\n339\n00:19:34.350 --> 00:19:35.230\n&gt;&gt; Can't connect.\n\n340\n00:19:35.230 --> 00:19:37.460\n&gt;&gt; Who knows what's gonna happen there?\n\n341\n00:19:37.460 --> 00:19:39.530\nOr leave a process pool running, or\n\n342\n00:19:39.530 --> 00:19:44.630\nI forget to close it down appropriately,\nI've got zombie processes running.\n\n343\n00:19:44.630 --> 00:19:49.670\nSo these are great ways to make sure all\nthose steps happens, and it’s pretty easy.\n\n344\n00:19:49.670 --> 00:19:51.954\nI need a dunder enter, a dunder exit.\n\n345\n00:19:51.954 --> 00:19:55.350\nAnd as long as you,\nthe implementation details are up to you.\n\n346\n00:19:55.350 --> 00:19:56.580\nAs long as you have those,\n\n347\n00:19:56.580 --> 00:19:59.350\nyou can use the safety manager.\n&gt;&gt; Yeah, nothing like putting a safety net\n\n348\n00:19:59.350 --> 00:20:01.640\nunderneath you so\nyou don’t forget to do some things.\n\n349\n00:20:01.640 --> 00:20:03.840\nAs Justin has pointed out so eloquently.\n\n350\n00:20:03.840 --> 00:20:07.370\nAnd we appreciate that, cuz it might be\nsomething you just hadn't even thought of,\n\n351\n00:20:07.370 --> 00:20:09.610\nor haven't even experienced before.\n\n352\n00:20:09.610 --> 00:20:11.180\nBut one day, you will.\n\n353\n00:20:11.180 --> 00:20:13.620\nAnd you're gonna think, man,\nI gotta stop doing this.\n\n354\n00:20:13.620 --> 00:20:16.150\nHow can I make that an easier process?\n\n355\n00:20:16.150 --> 00:20:16.950\nThere we go, right?\n\n356\n00:20:16.950 --> 00:20:18.010\nWhat you learned today.\n\n357\n00:20:18.010 --> 00:20:19.100\nGreat stuff, Justin.\n\n358\n00:20:19.100 --> 00:20:21.700\nIs there anything else you wanna add\nto this before we call it a show?\n\n359\n00:20:21.700 --> 00:20:23.610\n&gt;&gt; Well, it's pretty straight forward,\n\n360\n00:20:23.610 --> 00:20:25.660\njust remember this is not,\n\n361\n00:20:25.660 --> 00:20:27.270\nI don't need this for everything.\n\n362\n00:20:27.270 --> 00:20:28.020\n&gt;&gt; Right.\n&gt;&gt; Right?\n\n363\n00:20:28.020 --> 00:20:30.340\nThis is not a, well,\nI need a context manager all the time.\n\n364\n00:20:31.790 --> 00:20:35.420\nOnly implement this if you do need a,\nif it makes sense for\n\n365\n00:20:35.420 --> 00:20:38.490\na context manager to be used with\nthe object you're constructing.\n\n366\n00:20:38.490 --> 00:20:42.665\nI have a start up procedure and\na clean-up procedure.\n\n367\n00:20:42.665 --> 00:20:47.760\nCleaning up is probably what's most\nimportant for me when I use these.\n\n368\n00:20:47.760 --> 00:20:51.210\nJust add those two methods, but if you\ndon't have those, just leave them out.\n\n369\n00:20:51.210 --> 00:20:54.150\nKeep things as simple as possible.\n&gt;&gt; All right, well, Justin, thanks for\n\n370\n00:20:54.150 --> 00:20:54.780\ndropping by today.\n\n371\n00:20:54.780 --> 00:20:56.710\nAnd thanks for\nteaching us about context managers and\n\n372\n00:20:56.710 --> 00:20:58.190\nhow we can clean up using them.\n\n373\n00:20:58.190 --> 00:21:00.160\nBut it looks like we\nare gonna call it a show.\n\n374\n00:21:00.160 --> 00:21:04.120\nWe do appreciate you good folks out there\nfor watching, as well, but signing off for\n\n375\n00:21:04.120 --> 00:21:06.090\nDevProTV, I've been your host,\nDaniel Lowrie.\n\n376\n00:21:06.090 --> 00:21:06.990\n&gt;&gt; And I'm Justin Dennison.\n\n377\n00:21:06.990 --> 00:21:08.593\n&gt;&gt; We'll see you next time.\n\n378\n00:21:08.593 --> 00:21:13.218\n[MUSIC]\n\n",
          "vimeoId": "254727612"
        }
      ],
      "title": "Context Managers"
    },
    {
      "episodes": [
        {
          "description": "In this episode, Justin and Daniel explore the nuances of copying objects with special attention to the difference between copy and deepcopy. Additionally, Justin demonstrates how to override the \\_\\_copy\\_\\_ and \\_\\_deepcopy\\_\\_ to provide custom copy behavior.",
          "length": "1415",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-8-1-1-copying_objects-020718-PGM.00_27_18_27.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-8-1-1-copying_objects-020718-PGM.00_27_18_27.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-8-1-1-copying_objects-020718-PGM.00_27_18_27.Still001-sm.jpg",
          "title": "Copying Objects",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.846 --> 00:00:16.500\nAll right, greetings everyone and welcome\nto another setting episode of DevPro.TV.\n\n3\n00:00:16.500 --> 00:00:18.380\nI'm your host Daniel Lowrie and\n\n4\n00:00:18.380 --> 00:00:22.880\nin today's episode we're kicking back with\nmore in our Python data bundle series.\n\n5\n00:00:22.880 --> 00:00:26.300\nJoining us back in the studio yet again,\nlending his expertise, our good friend Mr.\n\n6\n00:00:26.300 --> 00:00:27.190\nJustin Dennison.\n\n7\n00:00:27.190 --> 00:00:28.680\nJustin, welcome back my man.\n\n8\n00:00:28.680 --> 00:00:30.590\nHow's it going?\n&gt;&gt; It is going fantastic Daniel.\n\n9\n00:00:30.590 --> 00:00:33.390\nHow are you today?\n&gt;&gt; I am honored today man, really excited\n\n10\n00:00:33.390 --> 00:00:36.640\nto see what we're gonna do, cuz i kinda\nhinted at this in a previous show.\n\n11\n00:00:36.640 --> 00:00:38.830\nWe're gonna look at copying stuff today.\n\n12\n00:00:38.830 --> 00:00:42.570\nAnd I know you're thinking,\nwe're gonna swipe things with our mouths,\n\n13\n00:00:42.570 --> 00:00:43.700\nyou know, right click.\n\n14\n00:00:43.700 --> 00:00:45.790\nI think you're gonna take it\na little farther than that, right?\n\n15\n00:00:45.790 --> 00:00:46.630\n&gt;&gt; We are, we are.\n\n16\n00:00:46.630 --> 00:00:51.332\nWe are not gonna be right-clicking, copy,\npasting or if you're on a Mac command,\n\n17\n00:00:51.332 --> 00:00:55.340\nC command,V, if you're on any\nother system control,C control, V.\n\n18\n00:00:55.340 --> 00:00:59.970\nWe actually wanna copy objects in memory,\nright?\n\n19\n00:00:59.970 --> 00:01:00.660\n&gt;&gt; In memory?\n\n20\n00:01:00.660 --> 00:01:02.820\n&gt;&gt; Yeah, so it's all behind the scenes.\n\n21\n00:01:02.820 --> 00:01:06.090\nAnd well you're like why do I wanna care?\n\n22\n00:01:06.090 --> 00:01:11.220\nAnd why would I be part of the Python\ndata model we know what's coming.\n\n23\n00:01:11.220 --> 00:01:13.500\nWe've seen and know these episodes.\n\n24\n00:01:13.500 --> 00:01:17.150\nJustin is gonna show us this data\nmend is gonna let us hide that.\n\n25\n00:01:17.150 --> 00:01:18.210\n&gt;&gt; I've done it ago.\n\n26\n00:01:18.210 --> 00:01:19.370\n&gt;&gt; But I think it's important to know\n\n27\n00:01:19.370 --> 00:01:27.190\nthe context of why do we care about this\ncopy or other things like that, okay?\n\n28\n00:01:27.190 --> 00:01:29.240\nSo we're gonna do\na little bit exploration.\n\n29\n00:01:29.240 --> 00:01:33.800\nI'm gonna try to keep it brief and then\nI'm gonna just let you know what's up.\n\n30\n00:01:33.800 --> 00:01:38.790\nThis is one of those techniques where I\ndon't need it until I really need it,\n\n31\n00:01:38.790 --> 00:01:42.685\nand then I'm like, yeah, all right,\nso I gotta do this one thing.\n\n32\n00:01:42.685 --> 00:01:45.910\nHaven't used it a great deal,\nyou may not use it a great deal.\n\n33\n00:01:45.910 --> 00:01:48.830\nYou may go in years programming and\nnever need this.\n\n34\n00:01:48.830 --> 00:01:55.170\nBut the one time you're like,\nI really need to be able to copy these\n\n35\n00:01:55.170 --> 00:02:00.270\nin x manner, in some particular manner.\n&gt;&gt; But you're gonna think back to Justin\n\n36\n00:02:00.270 --> 00:02:05.055\nand go hey, he said something about\nthis one time, I remember this.\n\n37\n00:02:05.055 --> 00:02:06.540\n[LAUGH]\n&gt;&gt; Exactly, and\n\n38\n00:02:06.540 --> 00:02:08.040\nwell, that's what we're here for.\n\n39\n00:02:08.040 --> 00:02:15.200\nSo let's go ahead and see what\nproblem does copying and sort solve?\n\n40\n00:02:15.200 --> 00:02:18.650\nAnd then how do we hijack the process and\nmake it our own, so to speak?\n\n41\n00:02:18.650 --> 00:02:20.900\nSo let's go ahead and\ncome to the screen here.\n\n42\n00:02:20.900 --> 00:02:27.430\nAnd well, I usually have another\nripple to work with this and we're\n\n43\n00:02:27.430 --> 00:02:30.970\ngoing to do that for the first little bit\nbecause I don't wanna muddy up the file.\n\n44\n00:02:30.970 --> 00:02:34.800\nWe will eventually kinda begin\nthis over to our file, but I'm\n\n45\n00:02:36.020 --> 00:02:39.970\nwanna clear this out and let's just assume\nthat you have a list of numbers, okay.\n\n46\n00:02:39.970 --> 00:02:44.100\nSo you're working with a list, maybe it's\na list that you received from a user or\n\n47\n00:02:44.100 --> 00:02:45.937\nsomething like that and you have A.\n\n48\n00:02:45.937 --> 00:02:48.617\nAnd you go, well,\nI need a copy of this and so\n\n49\n00:02:48.617 --> 00:02:52.392\nyou create another variable called B and\nyou set it equal to A.\n\n50\n00:02:52.392 --> 00:02:55.570\nOkay now I have a copy got it.\n\n51\n00:02:55.570 --> 00:03:03.288\nAnd then we go okay well A I need\nto change the first element to 10.\n\n52\n00:03:03.288 --> 00:03:07.029\nRight so now a is 10, 2,\n3, and you're like but\n\n53\n00:03:07.029 --> 00:03:09.336\nI need to come back and look at B.\n\n54\n00:03:09.336 --> 00:03:13.543\nAnd if you look at B,\nyou'll notice that b is also 10, 2, 3.\n\n55\n00:03:13.543 --> 00:03:18.200\nAnd that's kind of odd right,\nwhy did that happen?\n\n56\n00:03:18.200 --> 00:03:20.833\nThis line doesn't actually make a copy,\n\n57\n00:03:20.833 --> 00:03:24.524\nit creates a reference to\nthe exact same object in memory.\n\n58\n00:03:24.524 --> 00:03:28.090\nSo, B and\nA are pointing to the same thing.\n\n59\n00:03:28.090 --> 00:03:32.262\nAnd then when you change something like\nan A, then you're indirectly changing\n\n60\n00:03:32.262 --> 00:03:35.087\nsomething in B.\n&gt;&gt; It seems like a you need some more\n\n61\n00:03:35.087 --> 00:03:40.423\nexercise to do linking, linking files, you\ndo a hand link, basically makes a coffee,\n\n62\n00:03:40.423 --> 00:03:44.339\neach link is something,\npointed to the same place on the drive.\n\n63\n00:03:44.339 --> 00:03:48.225\nSo if you delete one, the other one's\nstill around but if you make a change to\n\n64\n00:03:48.225 --> 00:03:51.740\none as well, both of them get changed.\n&gt;&gt; It was very similar to that, right?\n\n65\n00:03:51.740 --> 00:03:55.990\nYou have the underlying data is the same,\nbut you may have two pointers to it,\n\n66\n00:03:55.990 --> 00:03:56.890\nor maybe you have five.\n\n67\n00:03:58.160 --> 00:04:00.580\nThis is a common trip up, right,\nand you may have encountered this.\n\n68\n00:04:00.580 --> 00:04:06.290\nAnd so the common solution to this is,\nwell, you clear this out, you reset A.\n\n69\n00:04:06.290 --> 00:04:13.745\nAnd you go, man, A is right here and\nI am going to say from copy import copy.\n\n70\n00:04:13.745 --> 00:04:18.322\nSo there is a module called copy and\nthe higher purpose of this is for\n\n71\n00:04:18.322 --> 00:04:23.983\ncopying objects, creating new objects\nfrom the original, like a photocopier.\n\n72\n00:04:23.983 --> 00:04:26.520\nSo when I import copy.\n&gt;&gt; So\n\n73\n00:04:26.520 --> 00:04:28.840\nyou're sliding in your\noriginal into the tray and\n\n74\n00:04:28.840 --> 00:04:31.700\nnow you're going to hit the copy button.\n&gt;&gt; Exactly just like that.\n\n75\n00:04:31.700 --> 00:04:36.690\nSo I now am going to say B equals A or\ncopy of A.\n\n76\n00:04:36.690 --> 00:04:39.270\nThat's one minor change there.\n&gt;&gt; Yeah I understand a little difference.\n\n77\n00:04:39.270 --> 00:04:40.784\n&gt;&gt; So and then I go well and\n\n78\n00:04:40.784 --> 00:04:44.826\nthen I need to change the first\nelement of A that's equal to 10 and\n\n79\n00:04:44.826 --> 00:04:46.575\nwell A is now 10, 2, 3.\n\n80\n00:04:46.575 --> 00:04:51.710\nAnd B is still 1, 2,\n3 because they are not shared anymore.\n\n81\n00:04:51.710 --> 00:04:55.840\nIt's actually a separate\ncopy of the data structure.\n\n82\n00:04:55.840 --> 00:04:58.750\n&gt;&gt; So going along with our analogy of\n\n83\n00:04:58.750 --> 00:05:01.520\na copy machine,\nI've now pulled the original out one,\n\n84\n00:05:01.520 --> 00:05:03.490\nugh, that one should have been a 10.\n\n85\n00:05:03.490 --> 00:05:08.510\nI write a 0 on it, but all my copies\nI've already created still say 1, 2, 3.\n\n86\n00:05:08.510 --> 00:05:09.410\n&gt;&gt; Exactly, and\n\n87\n00:05:09.410 --> 00:05:13.580\nthis is very handy especially if\nyou need to, I need exactly this.\n\n88\n00:05:13.580 --> 00:05:16.340\nBut I'm now going to have\ndivergent changes, right?\n\n89\n00:05:16.340 --> 00:05:17.140\nJust like Daniel said.\n\n90\n00:05:17.140 --> 00:05:20.700\nMy original, I'm gonna make a change and\nI'm gonna leave all the copies as they\n\n91\n00:05:20.700 --> 00:05:21.890\nstand and they're not affected.\n&gt;&gt; And\n\n92\n00:05:21.890 --> 00:05:25.960\nthen any subsequent copies after this, or\nif I started copying A from this point,\n\n93\n00:05:25.960 --> 00:05:27.710\nit will now be ten, two, three, correct?\n&gt;&gt; Exactly,\n\n94\n00:05:27.710 --> 00:05:30.940\nit will copy it as\nwhatever the original is.\n\n95\n00:05:30.940 --> 00:05:32.080\nSo, just like that.\n\n96\n00:05:32.080 --> 00:05:34.500\nNow you're like that's good.\n\n97\n00:05:34.500 --> 00:05:35.970\nThat solves all of our problems.\n\n98\n00:05:37.130 --> 00:05:38.188\nOr does it?\n\n99\n00:05:38.188 --> 00:05:43.040\n[LAUGH] Well I'm here to tell you no,\nno it doesn't.\n\n100\n00:05:43.040 --> 00:05:46.070\nBecause-\n&gt;&gt; It's never that easy.\n\n101\n00:05:46.070 --> 00:05:47.270\n&gt;&gt; It's never that easy.\n\n102\n00:05:47.270 --> 00:05:48.490\nIt's always like I got it.\n\n103\n00:05:48.490 --> 00:05:50.370\nI don't have it.\n\n104\n00:05:50.370 --> 00:05:54.610\nSo let's back up and say I have a little\nmore complex of a data structure, right?\n\n105\n00:05:54.610 --> 00:05:56.774\nI have I have like\na list inside of a list.\n\n106\n00:05:56.774 --> 00:06:02.032\nSo list change A and we're going\n\n107\n00:06:02.032 --> 00:06:07.104\nto say A is 1 2, 3 4, 5 6.\n\n108\n00:06:07.104 --> 00:06:09.530\nAll right so I have a list in list.\n\n109\n00:06:09.530 --> 00:06:14.440\nSo I have an outer list that each\nelement in it isn't a list okay.\n\n110\n00:06:15.450 --> 00:06:17.890\nSo I go like this, so here's A.\n\n111\n00:06:17.890 --> 00:06:19.020\nAll right, that's not too bad.\n\n112\n00:06:19.020 --> 00:06:21.119\nAnd then you go well I\nneed a copy of this.\n\n113\n00:06:21.119 --> 00:06:28.600\nSo I say copy of A and\nhere's where it gets kind of slick.\n\n114\n00:06:28.600 --> 00:06:33.260\nIf you go a brackets and I'm actually\ngoing to change it from a list to\n\n115\n00:06:33.260 --> 00:06:36.050\nsomething else so we can see, just A.\n\n116\n00:06:36.050 --> 00:06:40.130\nSo notice that changed, B didn't change.\n\n117\n00:06:40.130 --> 00:06:43.180\nThis is what's called\nthe false sense of security.\n\n118\n00:06:43.180 --> 00:06:46.415\nBecause well we're like okay so\ncopy takes care of that, that's good.\n\n119\n00:06:46.415 --> 00:06:54.435\nBut then you go you know what I\nreally need to change this 3 to a 9.\n\n120\n00:06:54.435 --> 00:06:58.249\nAll right so you go A, that's the first\none but then you get a list back so\n\n121\n00:06:58.249 --> 00:07:02.139\nyou go 0 with 1 because you have two\nindexes cuz you had a list and a list.\n\n122\n00:07:02.139 --> 00:07:06.729\nAnd then you go that's 9, and\nso now you have 9 4, all right.\n\n123\n00:07:06.729 --> 00:07:13.384\nYou're like yeah it's all good it's\nall good and that is unexpected.\n\n124\n00:07:13.384 --> 00:07:18.298\nAnd here's why, and in order to try to\nkeep things more performing a copy is\n\n125\n00:07:18.298 --> 00:07:22.830\ncalled a shallow copy, so\nwhen I call copy, it's shallow.\n\n126\n00:07:22.830 --> 00:07:27.210\nIt copies the outside data structure but\nif there are more complex things inside of\n\n127\n00:07:27.210 --> 00:07:31.730\nit, it will actually just make\na reference to those, like the original.\n\n128\n00:07:33.240 --> 00:07:34.400\nHow do we solve that?\n\n129\n00:07:34.400 --> 00:07:39.390\nWell, I'm gonna come back up here and\nreset A to that.\n\n130\n00:07:39.390 --> 00:07:40.850\nSo just to show you,\nthis is what I have a.\n\n131\n00:07:40.850 --> 00:07:45.230\nAnd then I'm gonna say from copy\nimport deepcopy, just like that.\n\n132\n00:07:46.438 --> 00:07:49.976\nNow b = deepcopy(a).\n\n133\n00:07:49.976 --> 00:07:52.801\nAll right, good deal.\n\n134\n00:07:52.801 --> 00:07:57.129\nAnd now if we do 0, or\n\n135\n00:07:57.129 --> 00:08:00.500\nexcuse me, 1.\n\n136\n00:08:00.500 --> 00:08:04.909\n0 equals 9, right?\n\n137\n00:08:04.909 --> 00:08:09.440\nThen a,\nwe have a 9 there do we have a 9 in b?\n\n138\n00:08:09.440 --> 00:08:16.060\nNo because deep copy actually continues\ngoing down making additional copies.\n\n139\n00:08:16.060 --> 00:08:18.570\nNow as we see, that's really fast.\n\n140\n00:08:18.570 --> 00:08:23.246\nIf these were very\ncomplex large structures,\n\n141\n00:08:23.246 --> 00:08:27.050\nthe entire purpose of referencing\nsomething that already exists is I don't\n\n142\n00:08:27.050 --> 00:08:31.380\nhave to make a new thing in\nmemory which could be slower.\n\n143\n00:08:31.380 --> 00:08:36.990\nThere are times when you have to have a\ncopy and there are also times where maybe\n\n144\n00:08:36.990 --> 00:08:43.050\nyou wanna make sure certain things occur\nduring a copy if you have a custom object.\n\n145\n00:08:43.050 --> 00:08:45.130\nSo how does one accomplish that?\n\n146\n00:08:45.130 --> 00:08:46.490\nWell let's get out of the rubble.\n\n147\n00:08:46.490 --> 00:08:49.800\nAnd let's say copying just like that.\n\n148\n00:08:49.800 --> 00:08:51.680\nAnd I'm gonna try to have\na little fun with this.\n\n149\n00:08:51.680 --> 00:08:53.990\nAnd hopefully you find it fun as well.\n\n150\n00:08:53.990 --> 00:08:57.550\nIf you don't, well just pretend.\n&gt;&gt; [LAUGH]\n\n151\n00:08:57.550 --> 00:09:00.220\n&gt;&gt; So I'm gonna create a taco, right?\n\n152\n00:09:00.220 --> 00:09:01.570\nBecause I do love a taco.\n\n153\n00:09:01.570 --> 00:09:04.030\nWe've seen tacos before.\n\n154\n00:09:04.030 --> 00:09:05.120\nWho doesn't like tacos?\n\n155\n00:09:05.120 --> 00:09:06.730\nMaybe you don't, and that's okay.\n\n156\n00:09:06.730 --> 00:09:08.550\nBut I do love a good taco.\n\n157\n00:09:08.550 --> 00:09:09.570\nAnd I'm going to keep it simple.\n\n158\n00:09:09.570 --> 00:09:12.210\nI'm just going to say\na taco has a protein.\n\n159\n00:09:12.210 --> 00:09:14.820\nRight?\nSome kind of protein, whether it be tofu,\n\n160\n00:09:14.820 --> 00:09:20.270\ntempeh, chicken, steak,\npork, whatever it may be.\n\n161\n00:09:20.270 --> 00:09:21.880\nAnd there we go.\n\n162\n00:09:21.880 --> 00:09:23.692\nAnd I'm going to create a Reaper method.\n\n163\n00:09:25.822 --> 00:09:29.880\nAnd it's gonna be fairly easy right here,\nall right?\n\n164\n00:09:29.880 --> 00:09:32.840\nSo let's just create\na very simple Reaper so\n\n165\n00:09:32.840 --> 00:09:37.961\nwe know the protein=self.protein.\n\n166\n00:09:37.961 --> 00:09:40.930\nAnd you have to spell protein right,\nthat's important.\n\n167\n00:09:41.990 --> 00:09:43.465\nAll right, so there is our Reaper.\n\n168\n00:09:44.690 --> 00:09:49.530\nAnd lets create a toco down here and\nthat's Taco, and that's steak.\n\n169\n00:09:52.040 --> 00:09:56.610\nAll right, so I made a steak Taco and\nnow if we come back.\n\n170\n00:09:56.610 --> 00:10:00.400\nAnd I wanna show you this because\nsometimes we get away with just\n\n171\n00:10:00.400 --> 00:10:02.970\npython working for us, all right?\n\n172\n00:10:02.970 --> 00:10:04.570\nSo I have a taco.\n\n173\n00:10:04.570 --> 00:10:06.185\nAnd it's a steak Taco.\n\n174\n00:10:06.185 --> 00:10:12.099\nIf I now change this, if I do exactly\nwhat I just did with the list right?\n\n175\n00:10:12.099 --> 00:10:14.654\nanother=taco.\n\n176\n00:10:14.654 --> 00:10:17.584\nIf I were to do that I'm just\nreferencing same object.\n\n177\n00:10:17.584 --> 00:10:24.584\nSo you're like, okay well I'm\ngonna say from copy import copy.\n\n178\n00:10:24.584 --> 00:10:28.390\nAnd so another taco equals\na copy of the current taco.\n\n179\n00:10:28.390 --> 00:10:30.000\nAnd if tacos were this easy to make-\n&gt;&gt; [LAUGH]\n\n180\n00:10:30.000 --> 00:10:30.880\n&gt;&gt; I would probably\n\n181\n00:10:30.880 --> 00:10:32.095\neat tacos more.\n&gt;&gt; Yeah.\n\n182\n00:10:32.095 --> 00:10:34.520\n[LAUGH]\n&gt;&gt; Just throw it in a photocopier,\n\n183\n00:10:34.520 --> 00:10:37.385\nbe like I got a bunch of tacos.\n&gt;&gt; Just call me Taco Dan.\n\n184\n00:10:37.385 --> 00:10:38.680\n[LAUGH]\n&gt;&gt; Yeah exactly.\n\n185\n00:10:38.680 --> 00:10:42.220\nSo luckily in the computing world,\nit's a little easier to do this.\n\n186\n00:10:42.220 --> 00:10:48.410\nSo now, if I change, if we look at taco,\nand another, they're both steak.\n\n187\n00:10:48.410 --> 00:10:51.060\nI wanted the other one to be chicken.\n\n188\n00:10:51.060 --> 00:10:56.078\nSo, another.protein = not checken.\n&gt;&gt; Chicken.\n\n189\n00:10:56.078 --> 00:10:58.170\n&gt;&gt; Chicken chicken.\n\n190\n00:10:58.170 --> 00:11:00.960\nAll right?\nSo if I look at Taco, that's still steak.\n\n191\n00:11:00.960 --> 00:11:03.160\nAnother, that is now a chicken taco.\n\n192\n00:11:03.160 --> 00:11:04.700\nCopy just works.\n\n193\n00:11:06.120 --> 00:11:07.639\nWell, that's pretty slick.\n\n194\n00:11:08.890 --> 00:11:09.700\nAlright?\n\n195\n00:11:09.700 --> 00:11:12.540\nBut what if when you make a copy\n\n196\n00:11:12.540 --> 00:11:15.320\nyou always want to make sure\nthat it has cheese on it?\n\n197\n00:11:15.320 --> 00:11:17.090\nRight?\n&gt;&gt; It's not a Taco without cheese.\n\n198\n00:11:17.090 --> 00:11:19.360\n&gt;&gt; Exactly, so you've got to make sure.\n\n199\n00:11:19.360 --> 00:11:22.850\nI want to make sure there's cheese on it.\n&gt;&gt; Yeah, and\n\n200\n00:11:22.850 --> 00:11:25.790\nnot the skimpy cheese where people\nare like, here's your cheese,\n\n201\n00:11:25.790 --> 00:11:28.160\nI want some cheese.\n&gt;&gt; Yeah.\n\n202\n00:11:28.160 --> 00:11:30.722\nThere should be at least a one\nto one ratio from taco to\n\n203\n00:11:30.722 --> 00:11:31.450\ncheese.\n&gt;&gt; [LAUGH] Yes.\n\n204\n00:11:31.450 --> 00:11:33.960\n&gt;&gt; So, how does one accomplish that?\n\n205\n00:11:33.960 --> 00:11:34.920\nWell, first you gotta\n\n206\n00:11:34.920 --> 00:11:37.030\nget in the right file.\n&gt;&gt; It does help.\n\n207\n00:11:37.030 --> 00:11:37.980\n&gt;&gt; It does.\n\n208\n00:11:37.980 --> 00:11:39.120\nAnd then all right.\n\n209\n00:11:40.470 --> 00:11:45.576\nWell, if one had to guess, there's\na double underscore and wait for it.\n\n210\n00:11:45.576 --> 00:11:47.255\nA copy.\n\n211\n00:11:47.255 --> 00:11:49.650\nSo, copy.\n\n212\n00:11:49.650 --> 00:11:55.650\nI'm gonna say *args,**kwargs, and\nI'm just gonna print those out.\n\n213\n00:11:55.650 --> 00:11:58.260\nNow this is something that\nI do whenever I'm like,\n\n214\n00:11:58.260 --> 00:12:02.880\nI need to know what these arguments are,\nare there any keyword arguments.\n\n215\n00:12:02.880 --> 00:12:04.310\nSo I'll just print those out.\n\n216\n00:12:04.310 --> 00:12:06.810\nJust for the meantime, I will always\ncome back and take these out.\n\n217\n00:12:06.810 --> 00:12:09.560\nYou probably shouldn't have\nthat in production system.\n\n218\n00:12:09.560 --> 00:12:14.270\nBut what copy says is you're\ngonna tell me the object.\n\n219\n00:12:14.270 --> 00:12:16.180\nTaco, how to copy myself.\n\n220\n00:12:17.500 --> 00:12:18.140\nAll right?\n\n221\n00:12:18.140 --> 00:12:19.310\nSo we're gonna create a new taco.\n\n222\n00:12:19.310 --> 00:12:26.304\nAnd that's just going to be creating\na new taco with whatever the protein was.\n\n223\n00:12:26.304 --> 00:12:31.190\nBut, let's say that we wanna hijack and\nsay, you know what?\n\n224\n00:12:31.190 --> 00:12:36.420\nAnytime you make a copy,\nThere has to be a cheese component, right?\n\n225\n00:12:36.420 --> 00:12:37.790\nAnd let's just say cheddar.\n\n226\n00:12:38.830 --> 00:12:40.760\nI don't know if I've-\n&gt;&gt; [LAUGH]\n\n227\n00:12:40.760 --> 00:12:42.083\n&gt;&gt; Ever had a taco where I'm like,\n\n228\n00:12:42.083 --> 00:12:43.644\nthis cheese is not good on this taco.\n&gt;&gt; Yeah.\n\n229\n00:12:43.644 --> 00:12:45.464\n&gt;&gt; So feel free to add whatever cheese\n\n230\n00:12:45.464 --> 00:12:46.037\nyou want.\n\n231\n00:12:46.037 --> 00:12:48.454\nAnd then, return that object.\n\n232\n00:12:48.454 --> 00:12:49.860\nSo you have to return that object.\n\n233\n00:12:51.210 --> 00:12:53.840\nNow, when you hijack this, okay?\n\n234\n00:12:54.840 --> 00:12:58.258\nYou are effectively saying,\nthis is how a copy is gonna work.\n\n235\n00:12:58.258 --> 00:13:01.250\nIf I returned a day time\nobject from a taco, when\n\n236\n00:13:01.250 --> 00:13:02.900\nI called copy that's what I'm gonna get.\n\n237\n00:13:02.900 --> 00:13:04.820\n&gt;&gt; Yeah.\n&gt;&gt; All right?\n\n238\n00:13:04.820 --> 00:13:06.690\nMake sure that it makes sense.\n\n239\n00:13:06.690 --> 00:13:09.100\nSo, let's see how this plays out.\n\n240\n00:13:10.130 --> 00:13:11.640\nAnd here we go.\n\n241\n00:13:11.640 --> 00:13:15.400\nCopying and we have a taco, all right.\n\n242\n00:13:15.400 --> 00:13:19.430\nSo, from copy, import, copy and\n\n243\n00:13:19.430 --> 00:13:25.080\nthen another taco is a copy\nof the existing taco.\n\n244\n00:13:25.080 --> 00:13:28.230\nNotice I have no args, no kwargs.\n\n245\n00:13:28.230 --> 00:13:30.400\nMost of the time you're\nnot gonna see those.\n\n246\n00:13:30.400 --> 00:13:33.580\nEvery once in a while you will have args,\nkwargs here.\n\n247\n00:13:33.580 --> 00:13:38.415\nAnd if I'm not mistaken, I think it\nmight happen when, no actually for\n\n248\n00:13:38.415 --> 00:13:41.406\ncopy, I don't know if you'll have those.\n\n249\n00:13:41.406 --> 00:13:42.796\nI would have to go reach in.\n\n250\n00:13:42.796 --> 00:13:46.427\nNow I'm showing you the 95% use case.\n\n251\n00:13:46.427 --> 00:13:51.235\nThere's always an edge case involved, so\ndefinitely consult the documentation if\n\n252\n00:13:51.235 --> 00:13:55.107\nyou're like, I really need\nthe arguments from the previous taco.\n\n253\n00:13:55.107 --> 00:13:57.703\nMaybe that's available, maybe it's not,\ndefinitely go check those out.\n\n254\n00:13:57.703 --> 00:13:59.093\n&gt;&gt; Yeah.\n\n255\n00:13:59.093 --> 00:14:00.766\n&gt;&gt; So if I look at another,\n\n256\n00:14:00.766 --> 00:14:03.570\nwell that's a steak taco.\n\n257\n00:14:03.570 --> 00:14:07.690\nIf I go another.cheese,\nit has the cheese property.\n\n258\n00:14:07.690 --> 00:14:13.920\nBecause during the copy process, I was\nlike well, add a cheese property, right?\n\n259\n00:14:13.920 --> 00:14:15.900\nI can now add properties or\n\n260\n00:14:15.900 --> 00:14:20.820\nmaybe I wanna take away properties\nduring copies, all right?\n\n261\n00:14:20.820 --> 00:14:21.500\nNow why would you do this?\n\n262\n00:14:21.500 --> 00:14:25.000\nThis is very kinda goofy example, right?\n\n263\n00:14:25.000 --> 00:14:26.140\nBut why would I want to do that?\n\n264\n00:14:26.140 --> 00:14:31.410\nWell, let's say when I make a copy of an\nemployee object to set up a new employee,\n\n265\n00:14:32.420 --> 00:14:36.540\nthen maybe I want a copy date, right?\n\n266\n00:14:36.540 --> 00:14:39.810\nOr a creation date.\n&gt;&gt; Right.\n\n267\n00:14:39.810 --> 00:14:41.060\n&gt;&gt; And now when I copy I can\n\n268\n00:14:41.060 --> 00:14:43.560\nreset the creation date to right now.\n\n269\n00:14:43.560 --> 00:14:45.410\nWhen the copy was made.\n&gt;&gt; Makes sense.\n\n270\n00:14:45.410 --> 00:14:46.510\n&gt;&gt; And then you put that in the database.\n\n271\n00:14:46.510 --> 00:14:51.620\nSo that is a valid use case, but this is\njust fun to help you try to remember it.\n\n272\n00:14:51.620 --> 00:14:54.460\nNow, you come along and somebody says,\n\n273\n00:14:54.460 --> 00:14:58.340\nyou know what,\nyou only have very plain tacos, right?\n\n274\n00:14:58.340 --> 00:15:00.320\nYeah, when you copy them you\nget a little bit of cheese,\n\n275\n00:15:00.320 --> 00:15:02.840\nbut I really like mine\npacked with toppings.\n\n276\n00:15:02.840 --> 00:15:04.530\nAnd you're like,\nwell that's a valid concern.\n\n277\n00:15:06.420 --> 00:15:07.790\nSo how do we remedy that?\n\n278\n00:15:07.790 --> 00:15:11.190\nWell, we come in here and\nwe say, you know what?\n\n279\n00:15:11.190 --> 00:15:12.410\nWe need some toppings.\n\n280\n00:15:13.440 --> 00:15:15.950\nAnd toppings are going to be\na list of things on the taco.\n\n281\n00:15:17.920 --> 00:15:18.734\nToppings.\n\n282\n00:15:18.734 --> 00:15:24.022\nAnd now, if we run copy,\nwe'll have to change our copy, all right?\n\n283\n00:15:24.022 --> 00:15:27.333\nSelf.toppings, just like that.\n\n284\n00:15:27.333 --> 00:15:30.616\nBecause we have to create a new object\nwith the required information to create\n\n285\n00:15:30.616 --> 00:15:32.295\nthe new object, and we're good to go.\n\n286\n00:15:32.295 --> 00:15:36.833\nSo let's make sure that still works,\nall right?\n\n287\n00:15:36.833 --> 00:15:40.220\nMissing, I forgot to change\nthe one at the bottom.\n\n288\n00:15:40.220 --> 00:15:42.820\nThat's my fault.\n&gt;&gt; Nothing.\n\n289\n00:15:42.820 --> 00:15:45.061\nA good example of why you need to go back.\n&gt;&gt; Yeah.\n\n290\n00:15:45.061 --> 00:15:46.676\n&gt;&gt; And if you make a change put them in\n\n291\n00:15:46.676 --> 00:15:49.210\nthe requisite parts.\n&gt;&gt; Yeah, that is absolutely correct.\n\n292\n00:15:49.210 --> 00:15:52.351\nLuckily it's gonna tell me that I\ndidn't fulfill my end of the contract.\n\n293\n00:15:52.351 --> 00:15:52.918\n&gt;&gt; [LAUGH] Yeah.\n\n294\n00:15:52.918 --> 00:15:55.230\n&gt;&gt; So what are some good things on tacos?\n\n295\n00:15:56.338 --> 00:15:58.034\nTomatoes.\n&gt;&gt; Tomatros.\n\n296\n00:15:58.034 --> 00:16:00.124\n[LAUGH]\n&gt;&gt; Yeah, tomatros those are good as well.\n\n297\n00:16:00.124 --> 00:16:02.779\nThey go wonderfully with the tomatoes.\n\n298\n00:16:02.779 --> 00:16:04.992\nSpelling mistakes are fun.\n&gt;&gt; Yeah.\n\n299\n00:16:04.992 --> 00:16:06.370\n[LAUGH]\n&gt;&gt; Yeah, they are.\n\n300\n00:16:06.370 --> 00:16:10.967\nSour cream, and you know what?\n&gt;&gt; No lettuce?\n\n301\n00:16:10.967 --> 00:16:14.970\n&gt;&gt; No, no, no.\n\n302\n00:16:14.970 --> 00:16:19.645\nI like grass on it, I guess.\n&gt;&gt; [LAUGH]\n\n303\n00:16:19.645 --> 00:16:21.870\n&gt;&gt; So we just added those back right, so\n\n304\n00:16:21.870 --> 00:16:23.260\ntomatoes, sour cream.\n\n305\n00:16:23.260 --> 00:16:26.905\nWe should be good to go,\nnow let's run that.\n\n306\n00:16:26.905 --> 00:16:30.769\nHad to go back into that file cuz I\naccidentally, my hands got a little itchy,\n\n307\n00:16:30.769 --> 00:16:32.600\nI was like get out there.\n\n308\n00:16:32.600 --> 00:16:35.031\nSo, I just wanna make\nsure everybody saw that.\n\n309\n00:16:35.031 --> 00:16:36.230\nAnd now I have a taco.\n\n310\n00:16:36.230 --> 00:16:38.912\nWe haven't updated our repper,\nthat's alright.\n\n311\n00:16:38.912 --> 00:16:42.800\nWe're just gonna take a look,\ntoppings, cool.\n\n312\n00:16:42.800 --> 00:16:48.153\nSo from copy import copy and\nyou got okay, well all right,\n\n313\n00:16:48.153 --> 00:16:53.515\nI'm gonna say another = copy(taco),\njust like that.\n\n314\n00:16:53.515 --> 00:16:55.966\nAnd you know that that's running\ncuz those prints are still there,\n\n315\n00:16:55.966 --> 00:16:57.654\nI can definitely come back and\ntake those out.\n\n316\n00:16:57.654 --> 00:17:02.340\nAnd then so another.toppings,\nthat's copied as well.\n\n317\n00:17:02.340 --> 00:17:03.200\nBut you know what?\n\n318\n00:17:03.200 --> 00:17:08.021\nThe first taco, someone asked for\nsome lettuce, so\n\n319\n00:17:08.021 --> 00:17:12.523\nI'm gonna go [CROSSTALK]\ntaco.toppings.why.\n\n320\n00:17:12.523 --> 00:17:14.030\nWe jest, we jest.\n\n321\n00:17:14.030 --> 00:17:16.670\nI actually eat lettuce on my tacos.\n\n322\n00:17:16.670 --> 00:17:19.580\nSo tacos.toppings.append.\n\n323\n00:17:19.580 --> 00:17:22.602\nI'm just grabbing the property and\nmodifying it, right?\n\n324\n00:17:22.602 --> 00:17:28.064\nSo now if I do taco.toppings lettuce,\n\n325\n00:17:28.064 --> 00:17:35.235\nor excuse me another.toppings,\nalso has lettuce now.\n\n326\n00:17:35.235 --> 00:17:36.880\nUh-oh, order's wrong send it back.\n\n327\n00:17:38.480 --> 00:17:40.770\nThat's maybe you expected this,\nmaybe you didn't.\n\n328\n00:17:40.770 --> 00:17:43.280\nBut now I have a complex data structure.\n&gt;&gt; Right.\n\n329\n00:17:43.280 --> 00:17:44.880\n&gt;&gt; That is actually just a reference, and\n\n330\n00:17:44.880 --> 00:17:48.360\nbehind the scenes, copied by default,\nis kind of doing this, right?\n\n331\n00:17:48.360 --> 00:17:50.680\nFor the dunder copy\nthat we've implemented.\n\n332\n00:17:50.680 --> 00:17:52.580\nWe do get another .cheese.\n\n333\n00:17:52.580 --> 00:17:57.840\nSo we get that added extra property, but\nif we modify the original tacos toppings,\n\n334\n00:17:57.840 --> 00:18:01.340\nwe actually modify the other\ncopy's toppings because\n\n335\n00:18:01.340 --> 00:18:05.420\nthose are a list that are a shallow copy.\n&gt;&gt; That's where our\n\n336\n00:18:05.420 --> 00:18:07.837\ndeep copy comes in to play?\n&gt;&gt; It is.\n\n337\n00:18:07.837 --> 00:18:11.530\nDaniel's learning,\nmakes my heart happy, it's beautiful.\n\n338\n00:18:11.530 --> 00:18:13.558\nIt's a wonderful thing.\n&gt;&gt; [LAUGH]\n\n339\n00:18:13.558 --> 00:18:15.258\n&gt;&gt; So we come in here copying.\n\n340\n00:18:15.258 --> 00:18:18.843\nAnd well, you may have already guessed it.\n\n341\n00:18:18.843 --> 00:18:20.340\nThere's another dunder method.\n\n342\n00:18:20.340 --> 00:18:23.440\nAnd it's called deepcopy, all right?\n\n343\n00:18:23.440 --> 00:18:29.256\nSo *args, **kwargs just to make sure,\nall right?\n\n344\n00:18:29.256 --> 00:18:36.387\nSo we have args and\nwe have kwargs, all right?\n\n345\n00:18:36.387 --> 00:18:38.675\nNow, I'm gonna create a new taco.\n\n346\n00:18:38.675 --> 00:18:42.558\nYou're like, this looks very\nsimilar to what he's done before.\n\n347\n00:18:42.558 --> 00:18:45.170\nself.protein.\n\n348\n00:18:45.170 --> 00:18:46.580\nBut here's the trick.\n\n349\n00:18:48.670 --> 00:18:51.390\nI'm going to copy the toppings.\n\n350\n00:18:53.330 --> 00:18:55.410\nNotice this is a shallow copy.\n\n351\n00:18:55.410 --> 00:18:57.470\nBut a topping should be one level deep.\n\n352\n00:18:57.470 --> 00:19:00.318\nIt should have just strings inside of it.\n&gt;&gt; Right.\n\n353\n00:19:00.318 --> 00:19:00.850\n&gt;&gt; Right?\n\n354\n00:19:01.920 --> 00:19:07.720\nIf I really wanted to make sure I could\nactually do a deep copy of the topping,\n\n355\n00:19:07.720 --> 00:19:10.770\nso we get a new list of\nthe toppings to put in there.\n\n356\n00:19:10.770 --> 00:19:14.550\nSo I'm gonna come up and\nsay from copy import, and you know what?\n\n357\n00:19:14.550 --> 00:19:18.489\nJust to absolutely make sure,\nI'm gonna change this to deep copy.\n\n358\n00:19:21.265 --> 00:19:21.900\nOkay?\n\n359\n00:19:21.900 --> 00:19:26.845\nSo I'm making sure I'm getting\na brand new set of toppings based\n\n360\n00:19:26.845 --> 00:19:30.700\non the deep copy of the original taco,\nall right?\n\n361\n00:19:30.700 --> 00:19:32.720\nAnd then, you know what?\n\n362\n00:19:32.720 --> 00:19:34.740\nWhat else could we add at this toco?\n\n363\n00:19:34.740 --> 00:19:35.890\nNew-\n&gt;&gt; Jalapenos.\n\n364\n00:19:35.890 --> 00:19:39.492\n&gt;&gt; Yeah, let's say guacamole.\n\n365\n00:19:39.492 --> 00:19:43.440\nhas_guac.\n&gt;&gt; has_guac, I like that.\n\n366\n00:19:43.440 --> 00:19:44.930\n&gt;&gt; = True, right?\n\n367\n00:19:44.930 --> 00:19:46.360\nIt does have guac now.\n\n368\n00:19:46.360 --> 00:19:48.910\nYou make a deep copy,\nyou're adding a little bit of guacamole.\n\n369\n00:19:48.910 --> 00:19:52.700\nSo you can add new\nproperties just like this.\n\n370\n00:19:52.700 --> 00:19:54.320\nJust like we did on copy.\n\n371\n00:19:54.320 --> 00:19:56.690\nLet's return that new_taco.\n\n372\n00:19:56.690 --> 00:20:02.440\nAnd let's see if we get both\nthe added property, but\n\n373\n00:20:02.440 --> 00:20:09.300\nwe have now untangled the respective\nproperty list or topping list, excuse me.\n\n374\n00:20:09.300 --> 00:20:10.130\nSo copying.\n\n375\n00:20:10.130 --> 00:20:13.416\nThere we go, so I have a taco, looks good.\n\n376\n00:20:13.416 --> 00:20:18.597\nLet's say another\n\n377\n00:20:18.597 --> 00:20:22.610\n= deepcopy, now, I can use this\ncuz I interpreted that file,\n\n378\n00:20:22.610 --> 00:20:26.780\nit's already been imported,\ntaco, there we go.\n\n379\n00:20:26.780 --> 00:20:31.450\nNotice I get args, a little bit different\nstructure, it's still empty, more or\n\n380\n00:20:31.450 --> 00:20:33.980\nless, but\nit's a little bit different structure.\n\n381\n00:20:33.980 --> 00:20:39.270\nAnd then, if I look at another,\nif I has_guac,\n\n382\n00:20:39.270 --> 00:20:41.950\nit does have guacamole now, which is good.\n\n383\n00:20:41.950 --> 00:20:45.190\nIf I go back to the original taco and\nsay toppings.add,\n\n384\n00:20:45.190 --> 00:20:49.320\nlet's add that lettuce back.\n&gt;&gt; You went full neck on that,\n\n385\n00:20:49.320 --> 00:20:50.216\nhas toppins.\n\n386\n00:20:50.216 --> 00:20:50.776\n[LAUGH]\n&gt;&gt; Has\n\n387\n00:20:50.776 --> 00:20:51.670\ntoppins.\n&gt;&gt; [LAUGH]\n\n388\n00:20:51.670 --> 00:20:54.690\n&gt;&gt; I know, I can't help it,\n\n389\n00:20:54.690 --> 00:20:56.820\nit's where I'm from.\n&gt;&gt; I know.\n\n390\n00:20:56.820 --> 00:20:57.780\n&gt;&gt; And then, not add,\n\n391\n00:20:57.780 --> 00:20:58.630\nwe're going to append.\n\n392\n00:20:58.630 --> 00:21:03.060\nWe're gonna add it to the toppings list,\nbut we use append to do that.\n\n393\n00:21:03.060 --> 00:21:05.560\nSo there we go, toppins.\n&gt;&gt; Toppins.\n\n394\n00:21:05.560 --> 00:21:06.285\n&gt;&gt; Still went with\n\n395\n00:21:06.285 --> 00:21:06.970\ntoppins.\n&gt;&gt; You did.\n\n396\n00:21:06.970 --> 00:21:07.680\n&gt;&gt; We need to fix it,\n\n397\n00:21:07.680 --> 00:21:09.052\nthere we go.\n&gt;&gt; [LAUGH]\n\n398\n00:21:09.052 --> 00:21:09.559\n&gt;&gt; There we go, so.\n\n399\n00:21:09.559 --> 00:21:10.800\n&gt;&gt; [LAUGH] You just couldn't break\n\n400\n00:21:10.800 --> 00:21:11.920\nyourself.\n&gt;&gt; I couldn't do it.\n\n401\n00:21:11.920 --> 00:21:12.990\n&gt;&gt; Take it out of there.\n\n402\n00:21:12.990 --> 00:21:14.195\n&gt;&gt; I couldn't do it.\n\n403\n00:21:14.195 --> 00:21:17.823\n[LAUGH] We all have different diverse\ncultural backgrounds and well,\n\n404\n00:21:17.823 --> 00:21:20.290\nyou know where I hail from.\n&gt;&gt; I understand.\n\n405\n00:21:20.290 --> 00:21:21.961\nI'm the same kind of background.\n\n406\n00:21:21.961 --> 00:21:22.932\n[CROSSTALK]\n&gt;&gt; [LAUGH]\n\n407\n00:21:22.932 --> 00:21:25.871\n&gt;&gt; Yeah, in case you haven't noticed.\n\n408\n00:21:25.871 --> 00:21:26.575\n&gt;&gt; [LAUGH]\n\n409\n00:21:26.575 --> 00:21:28.140\n&gt;&gt; From the deep dark woods.\n\n410\n00:21:28.140 --> 00:21:28.850\n&gt;&gt; [LAUGH]\n\n411\n00:21:28.850 --> 00:21:30.130\n&gt;&gt; We are, we are.\n\n412\n00:21:30.130 --> 00:21:34.510\nSo now we've added lettuce to\nthe original taco toppings, right?\n\n413\n00:21:34.510 --> 00:21:40.790\nAnd let's look at that another.toppings,\n\n414\n00:21:40.790 --> 00:21:45.340\nand lettuce is not there because I\nensured that by hijacking deep copy,\n\n415\n00:21:45.340 --> 00:21:47.430\nI've made the appropriate changes.\n\n416\n00:21:47.430 --> 00:21:49.730\nNow notice I tailored\nthese two to taco object.\n\n417\n00:21:51.370 --> 00:21:55.080\nYou kinda get this by default out of the\nbox if you don't wanna add a property or\n\n418\n00:21:55.080 --> 00:21:57.720\nyou don't have very specific use cases.\n\n419\n00:21:57.720 --> 00:22:02.377\nSo, if I was going to\nbe completely honest.\n\n420\n00:22:02.377 --> 00:22:08.994\nIf I had this simple of an object would I\nimplement dunder copy or dunder deepcopy?\n\n421\n00:22:08.994 --> 00:22:14.314\nProbably not, but if I had to make\nsure like the employee example,\n\n422\n00:22:14.314 --> 00:22:18.594\nif I had to make sure that it had a,\ncreated that date.\n\n423\n00:22:18.594 --> 00:22:23.802\nAnd that had to be the case,\nthen I would have probably use that and\n\n424\n00:22:23.802 --> 00:22:29.220\nI was using copy, I would use\nthis to enforce that attribute.\n\n425\n00:22:29.220 --> 00:22:33.210\nSo just keep that in mind there\nis a time and place for it.\n\n426\n00:22:33.210 --> 00:22:35.710\nDo I actually need this for\nthe simple example that I have?\n\n427\n00:22:35.710 --> 00:22:38.440\nNo, it's kinda out of the box\nit just worked, right?\n\n428\n00:22:38.440 --> 00:22:42.160\nBut if I wanted to add something,\nif I wanted to remove something\n\n429\n00:22:42.160 --> 00:22:46.960\nthat may be there, then deep copy or\n\n430\n00:22:46.960 --> 00:22:51.410\nundercopy is the way to go.\n&gt;&gt; Well, awesome stuff, Justin.\n\n431\n00:22:51.410 --> 00:22:55.180\nIt's definitely something I would've\nnever known to even look for, but\n\n432\n00:22:55.180 --> 00:22:57.210\nfrom time to time,\nthese are things that crop up, right?\n\n433\n00:22:57.210 --> 00:23:01.880\nLike Justin said, you may not use\nthis one out of a 10,000 times.\n\n434\n00:23:01.880 --> 00:23:06.252\nThat 10,000 times, well that 10,000 times\nnice to know or at least have a reference\n\n435\n00:23:06.252 --> 00:23:09.045\nin your mind like, yes,\nthere is a way to get around this problem.\n\n436\n00:23:09.045 --> 00:23:12.653\nAnd copying and deep copy can\ndefinitely come to your rescue too.\n\n437\n00:23:12.653 --> 00:23:15.727\nJustin thanks for joining us today,\nI appreciate you stopping by and\n\n438\n00:23:15.727 --> 00:23:18.646\nteaching us about copying objects and\nmemory good time.\n\n439\n00:23:18.646 --> 00:23:20.576\nHopefully you guys have\nenjoyed it as well, but\n\n440\n00:23:20.576 --> 00:23:23.190\nit looks like we're at the end of\nour show so Let's call it a day.\n\n441\n00:23:23.190 --> 00:23:25.730\nSigning off for DevProTV I've\nbeen your host Daniel Lowrie.\n\n442\n00:23:25.730 --> 00:23:26.660\n&gt;&gt; And I'm Justin Dennison.\n\n443\n00:23:26.660 --> 00:23:27.482\n&gt;&gt; We'll see you next time.\n\n444\n00:23:27.482 --> 00:23:32.854\n[SOUND]\n\n",
          "vimeoId": "254858574"
        },
        {
          "description": "In this episode, Justin and Daniel discuss and demonstrate customizing the behavior of the pickle module when pickling and unpickling an object using the \\_\\_getstate\\_\\_ and \\_\\_setstate\\_\\_ methods.",
          "length": "1444",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-8-2-1-pickling_get_and_set_state-020718-PGM.00_23_56_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-8-2-1-pickling_get_and_set_state-020718-PGM.00_23_56_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythondatamodel/techskills-pythondatamodel-8-2-1-pickling_get_and_set_state-020718-PGM.00_23_56_07.Still001-sm.jpg",
          "title": "Pickling: Get and Set State",
          "transcript": "WEBVTT\n\n1\n00:00:00.102 --> 00:00:10.102\n[MUSIC]\n\n2\n00:00:12.794 --> 00:00:14.014\nAll right, greetings everyone.\n\n3\n00:00:14.014 --> 00:00:16.579\nAnd welcome to another\ngreat episode of DevProTV.\n\n4\n00:00:16.579 --> 00:00:18.032\nI'm your host, Daniel Lowrie.\n\n5\n00:00:18.032 --> 00:00:22.871\nAnd in today's episode we're back with\nmore on our Python data model series.\n\n6\n00:00:22.871 --> 00:00:26.400\nJoining us in the studio yet again,\nour good friend, Mr. Justin Dennison.\n\n7\n00:00:26.400 --> 00:00:28.270\nJustin, so\nglad to have you back in the studio.\n\n8\n00:00:28.270 --> 00:00:30.230\nHow's it going today?\n&gt;&gt; It is going fantastic, Daniel.\n\n9\n00:00:30.230 --> 00:00:31.140\nI'm glad to be back.\n\n10\n00:00:31.140 --> 00:00:33.820\nAnd how are you today?\n&gt;&gt; I'm great, speaking of great,\n\n11\n00:00:33.820 --> 00:00:36.505\nI think we're gonna talk about\ngreat garlic gherkins today.\n\n12\n00:00:36.505 --> 00:00:37.605\n[LAUGH] Well,\n\n13\n00:00:37.605 --> 00:00:41.105\nthat is a common misconception whenever\npeople are like Python pickles.\n\n14\n00:00:41.105 --> 00:00:41.795\nWait a minute.\nHold on,\n\n15\n00:00:41.795 --> 00:00:44.245\nthat's weird.\n&gt;&gt; I wanted it to be about pickles,\n\n16\n00:00:44.245 --> 00:00:45.125\nlike real pickles.\n\n17\n00:00:45.125 --> 00:00:47.145\nCuz I like pickles.\n&gt;&gt; I also-\n\n18\n00:00:47.145 --> 00:00:48.415\n&gt;&gt; I feel like I've been lied to.\n\n19\n00:00:48.415 --> 00:00:50.334\n&gt;&gt; I also enjoy pickles, but\n\n20\n00:00:50.334 --> 00:00:55.865\nit's actually more about\npickling the process, right?\n\n21\n00:00:55.865 --> 00:00:57.955\nWhat is the purpose of pickling?\n\n22\n00:00:57.955 --> 00:01:02.612\nWell, to preserve in some\ncapacity the state of an object.\n\n23\n00:01:02.612 --> 00:01:04.978\nI have this cucumber, it's gonna go bad.\n\n24\n00:01:04.978 --> 00:01:08.103\nBut if I put it in this pickle juice,\nit's now pickle.\n\n25\n00:01:08.103 --> 00:01:11.202\nYeah it's a pickled cucumber and\nthey're delicious.\n\n26\n00:01:11.202 --> 00:01:14.546\nNow pickling, actually,\nhas a bunch of other things.\n\n27\n00:01:14.546 --> 00:01:16.125\nWe were talking before the show.\n\n28\n00:01:16.125 --> 00:01:19.860\nThere's a bunch of pickled stuff and\nmost of them are delicious.\n\n29\n00:01:19.860 --> 00:01:23.370\nNot all, not all.\n&gt;&gt; I don't know whose idea it was to stick\n\n30\n00:01:23.370 --> 00:01:28.314\na severed pig's hoof into a jar.\n&gt;&gt; That would be the one I was thinking of\n\n31\n00:01:28.314 --> 00:01:28.829\nas well.\n\n32\n00:01:28.829 --> 00:01:30.814\nI probably do not partake of those.\n\n33\n00:01:30.814 --> 00:01:33.101\nNow, how does this work in Python?\n\n34\n00:01:33.101 --> 00:01:36.902\nWell, what we want to do when\nwe pickle something is I want to\n\n35\n00:01:36.902 --> 00:01:41.019\ngrab the information that represents\nan object at this moment.\n\n36\n00:01:41.019 --> 00:01:44.455\nAnd I want to serialize it in some manner,\nokay?\n\n37\n00:01:44.455 --> 00:01:49.308\nI want to serialize it, so I can either\nsave it to disk or maybe I have another\n\n38\n00:01:49.308 --> 00:01:53.520\nprocess running either on my computer or\non a remote system.\n\n39\n00:01:53.520 --> 00:01:56.957\nSo this is actually some way you can\nexchange information between remote\n\n40\n00:01:56.957 --> 00:02:01.060\nsystems, like if you're doing\nsome kind of distributed system.\n\n41\n00:02:01.060 --> 00:02:01.730\n&gt;&gt; Just one second.\n\n42\n00:02:01.730 --> 00:02:05.865\nCould you help out the people that\nstill have to sound out the words here?\n\n43\n00:02:05.865 --> 00:02:09.731\nSerialize, what do you mean by that?\n&gt;&gt; So serialize is a way of taking\n\n44\n00:02:09.731 --> 00:02:14.146\na complex object and\nputting it in a format that has\n\n45\n00:02:14.146 --> 00:02:19.089\na very particular structure so\nwhen I serialize it I go,\n\n46\n00:02:19.089 --> 00:02:23.842\nhey, this object always\nturns into 001BXQ21.\n\n47\n00:02:23.842 --> 00:02:27.408\nI'm giving a general example there.\n\n48\n00:02:27.408 --> 00:02:31.608\nA lot of times they are represented as\nbyte strings or something like that.\n\n49\n00:02:31.608 --> 00:02:34.465\nSo this occurs in a very\nparticular manner.\n\n50\n00:02:34.465 --> 00:02:40.573\nAnd then when I send it over, if it\nserialized using that protocol, all right?\n\n51\n00:02:40.573 --> 00:02:42.488\nIt starts with 001 blah blah blah.\n\n52\n00:02:42.488 --> 00:02:46.053\nThen I can undo that because I\nknow how it was done originally.\n\n53\n00:02:46.053 --> 00:02:48.861\nAnd I can recreate [CROSSTALK].\n&gt;&gt; Okay, so\n\n54\n00:02:48.861 --> 00:02:50.411\nnow I'm starting to get to\nwhere you're going here.\n\n55\n00:02:50.411 --> 00:02:53.817\nYou wanna preserve the way in which\nthis is supposed to unpack or\n\n56\n00:02:53.817 --> 00:02:56.880\ndo whatever it's supposed to do.\n&gt;&gt; Exactly, exactly.\n\n57\n00:02:56.880 --> 00:02:59.590\nAnd that is what pickling is all about.\n\n58\n00:02:59.590 --> 00:03:02.540\nNow, I do feel compelled whenever\nI talk about Python pickling.\n\n59\n00:03:02.540 --> 00:03:04.775\nThis is actually a documentation in bold\n\n60\n00:03:04.775 --> 00:03:05.796\nletters.\n&gt;&gt; [LAUGH]\n\n61\n00:03:07.270 --> 00:03:09.940\n&gt;&gt; Be careful when using Python pickle,\n\n62\n00:03:09.940 --> 00:03:15.790\nthe pickle package, and unpickling from\nsources that you are not a part of.\n\n63\n00:03:15.790 --> 00:03:18.420\nOr even if you are a part of them,\njust be wary.\n\n64\n00:03:18.420 --> 00:03:24.920\nBecause when you pickle, there are ways to\nget a pickle to just run arbitrary code.\n\n65\n00:03:24.920 --> 00:03:29.198\nSo this can be a security\nissue if used inappropriately.\n\n66\n00:03:29.198 --> 00:03:33.340\nI just feel compelled because it's in\nbright, bright letters is all good to go.\n\n67\n00:03:33.340 --> 00:03:36.460\nNow, I just wanted to give you an overview\nand make sure we're all on the same\n\n68\n00:03:36.460 --> 00:03:40.250\npage with pickle because,\nwell I'm creating a custom object.\n\n69\n00:03:40.250 --> 00:03:44.870\nAnd there are times where maybe\nI want to pickle that object.\n\n70\n00:03:46.070 --> 00:03:47.860\nBut I want to either add or\n\n71\n00:03:47.860 --> 00:03:53.910\nremove certain things before I pickle it,\ncertain things that I can look up.\n\n72\n00:03:53.910 --> 00:03:56.290\nThat is not a problem.\n\n73\n00:03:56.290 --> 00:03:59.470\nBut let's see how we can create an object,\ngo ahead and\n\n74\n00:03:59.470 --> 00:04:01.940\npickle it, and pickle it,\nsee how it works, all right?\n\n75\n00:04:01.940 --> 00:04:03.674\nSo, let's go ahead and\ncome to the screen here.\n\n76\n00:04:03.674 --> 00:04:07.726\nAnd we are going to create,\nlet's just call it pickling.\n\n77\n00:04:09.339 --> 00:04:11.009\nThat is a weird word to say.\n&gt;&gt; [LAUGH]\n\n78\n00:04:11.009 --> 00:04:12.125\n&gt;&gt; I'm not gonna lie to you.\n\n79\n00:04:12.125 --> 00:04:15.060\nSo let's go to an employee object.\n&gt;&gt; Is it like a baby pickle [LAUGH]?\n\n80\n00:04:15.060 --> 00:04:15.800\n&gt;&gt; Yeah, I think it is.\n\n81\n00:04:15.800 --> 00:04:16.652\n&gt;&gt; It's a pickling.\n\n82\n00:04:16.652 --> 00:04:18.484\nThey're so cute.\n&gt;&gt; Look at them.\n\n83\n00:04:18.484 --> 00:04:20.360\nSuch a tiny little thing.\n\n84\n00:04:20.360 --> 00:04:22.470\nSo let's create an employee object.\n\n85\n00:04:22.470 --> 00:04:23.480\nAnd what are we gonna have?\n\n86\n00:04:23.480 --> 00:04:27.567\nWe're gonna have the name of the employee,\nthe title, and\n\n87\n00:04:27.567 --> 00:04:30.620\nthe respective employees' supervisors.\n\n88\n00:04:30.620 --> 00:04:33.360\nAnd I think in my notes\nI use real examples.\n\n89\n00:04:33.360 --> 00:04:36.785\nI might make these up just to\nprotect the innocent, I guess.\n\n90\n00:04:36.785 --> 00:04:37.896\n&gt;&gt; [LAUGH]\n\n91\n00:04:37.896 --> 00:04:41.809\n&gt;&gt; So self.name, self.title = title.\n\n92\n00:04:41.809 --> 00:04:46.494\nYou're like if nothing else from this\nseries of, from this course, you'll\n\n93\n00:04:46.494 --> 00:04:50.162\ndefinitely know how to write a class.\n&gt;&gt; Yeah [LAUGH].\n\n94\n00:04:50.162 --> 00:04:53.810\n&gt;&gt; So self.supervisors = supervisors.\n\n95\n00:04:53.810 --> 00:04:55.633\nNow there's some assumptions here.\n\n96\n00:04:55.633 --> 00:04:59.372\nname is a string, title is also a string.\n\n97\n00:04:59.372 --> 00:05:04.510\nAnd supervisors is a possible\nlist of respective supervisors.\n\n98\n00:05:04.510 --> 00:05:08.914\nNow I am going to create a repr method and\njust so we can have.\n\n99\n00:05:08.914 --> 00:05:11.590\nAnd I'm going to keep it simple.\n\n100\n00:05:13.050 --> 00:05:20.338\nSo, return f string &lt;Employee, like so.\n\n101\n00:05:20.338 --> 00:05:26.080\nAnd it's an employee with\nthe name={self.name} and\n\n102\n00:05:26.080 --> 00:05:31.350\nthe title={self.title} and\nthe supervisors.\n\n103\n00:05:33.500 --> 00:05:36.664\nAnd I know I'm going over the length\nof a line that I probably should, but-\n\n104\n00:05:36.664 --> 00:05:38.278\n&gt;&gt; You're doing it.\n\n105\n00:05:38.278 --> 00:05:41.808\n&gt;&gt; I'm trying, I'm trying, so supervisors,\n\n106\n00:05:41.808 --> 00:05:42.355\nokay?\n\n107\n00:05:42.355 --> 00:05:45.432\nSo, just made, look at that.\n&gt;&gt; You just made it.\n\n108\n00:05:45.432 --> 00:05:46.562\n&gt;&gt; There really should be another\n\n109\n00:05:46.562 --> 00:05:47.349\ncharacter in there.\n\n110\n00:05:47.349 --> 00:05:51.157\nBut we're gonna remedy that by\nremoving this first character.\n\n111\n00:05:51.157 --> 00:05:52.570\nLook at that, all right.\n\n112\n00:05:52.570 --> 00:05:56.820\nSo not a problem, just something simple so\nwe actually get a printout on the REPL so\n\n113\n00:05:56.820 --> 00:05:58.930\nwe don't have to try to reason about it.\n\n114\n00:05:58.930 --> 00:06:01.120\nLet's create an employee object.\n\n115\n00:06:01.120 --> 00:06:02.261\nAnd then we're gonna\nplay around a little bit.\n\n116\n00:06:02.261 --> 00:06:05.132\nBecause I think for the most part,\n\n117\n00:06:05.132 --> 00:06:10.680\nthere are edge cases pickling kind\nof just works for the most part.\n\n118\n00:06:10.680 --> 00:06:15.160\nSo let's create an employee,\nlet's just say emp.\n\n119\n00:06:15.160 --> 00:06:18.370\nActually, let's just call it e,\nbecause emp is also electromagnetic pulse.\n\n120\n00:06:18.370 --> 00:06:20.879\nSo that might be a little confusing.\n&gt;&gt; You don't wanna bring that down\n\n121\n00:06:20.879 --> 00:06:23.577\non your computer.\n&gt;&gt; [LAUGH] Yeah, that's bad, that's bad.\n\n122\n00:06:23.577 --> 00:06:27.880\nSo let's say it's me and\nmy title is Edutainer.\n\n123\n00:06:27.880 --> 00:06:33.074\nAnd my supervisors, well,\nthere's somebody and\n\n124\n00:06:33.074 --> 00:06:38.405\npossibly somebody else and\nsomebody else, right?\n\n125\n00:06:38.405 --> 00:06:40.990\nIt might be three,\nit might be one, it might be none.\n\n126\n00:06:40.990 --> 00:06:43.490\nWe want to just,\nmaybe not bring that to the forefront.\n\n127\n00:06:43.490 --> 00:06:44.970\nSo we're gonna leave that out of that.\n\n128\n00:06:44.970 --> 00:06:47.180\nAll right, so it's just some strings,\na list of strings.\n\n129\n00:06:47.180 --> 00:06:48.890\nThis is just to show the data structure.\n\n130\n00:06:48.890 --> 00:06:50.140\nThere's our employee.\n\n131\n00:06:50.140 --> 00:06:54.239\nSo let's go run this, bring this into\na REPL enviroment and say pickling and\n\n132\n00:06:54.239 --> 00:06:54.954\nthere we go.\n\n133\n00:06:54.954 --> 00:06:58.290\nSo our employee is that think, all right?\n\n134\n00:06:58.290 --> 00:07:00.770\nNice little output, looks good.\n\n135\n00:07:01.870 --> 00:07:05.400\nAnd let’s go ahead and\nimport the pickle module.\n\n136\n00:07:05.400 --> 00:07:06.278\nPickling is great.\n\n137\n00:07:06.278 --> 00:07:08.898\nThere is a lot of third party\nlibraries that are trying to expand\n\n138\n00:07:08.898 --> 00:07:10.340\nthe capabilities of this.\n\n139\n00:07:10.340 --> 00:07:13.240\nOne of them is called Dill,\ninterestingly enough.\n\n140\n00:07:13.240 --> 00:07:17.930\nThere is also cloudpickle,\nthat tries to make pickling a little more\n\n141\n00:07:17.930 --> 00:07:21.920\nrobust for actually sending\nmessages to remote systems.\n\n142\n00:07:23.020 --> 00:07:28.080\nSo this is something that you will\nprobably encounter at some point.\n\n143\n00:07:28.080 --> 00:07:32.281\nNow pickle has a couple of\nmethods that are fairly common.\n\n144\n00:07:32.281 --> 00:07:36.131\nThere is dumps like dump s\nthat will give you, well,\n\n145\n00:07:36.131 --> 00:07:38.680\nlet's just see what it gives you.\n\n146\n00:07:38.680 --> 00:07:42.090\ne gives you the binary\nstring representation\n\n147\n00:07:42.090 --> 00:07:43.210\nof the object.\n\n148\n00:07:43.210 --> 00:07:44.840\n&gt;&gt; Interesting.\n&gt;&gt; Okay?\n\n149\n00:07:44.840 --> 00:07:46.570\nNotice there's a couple of things, really.\n\n150\n00:07:46.570 --> 00:07:47.200\nI know what that is.\n\n151\n00:07:47.200 --> 00:07:48.489\nThat's __main__.\n\n152\n00:07:48.489 --> 00:07:49.487\nWhat is this?\n\n153\n00:07:49.487 --> 00:07:50.540\nThere's Employee.\n\n154\n00:07:50.540 --> 00:07:52.070\nYou come over here.\n\n155\n00:07:52.070 --> 00:07:53.092\nEdutainer.\n\n156\n00:07:53.092 --> 00:07:57.330\nSo essentially it's taking a string.\n\n157\n00:07:57.330 --> 00:07:59.427\nIt's taking a string representation.\n\n158\n00:07:59.427 --> 00:08:04.150\nAnd then it's changing some of those to\nhex values, so that they're very defined.\n\n159\n00:08:04.150 --> 00:08:06.500\nSome of these are not hex values and\n\n160\n00:08:06.500 --> 00:08:10.100\nthat has to do with\nthe serialization protocol, right?\n\n161\n00:08:10.100 --> 00:08:12.410\nIt implements it in a very particular way.\n\n162\n00:08:12.410 --> 00:08:15.780\nBecause it knows how to do that,\nit can undo that.\n\n163\n00:08:17.150 --> 00:08:19.110\nAnd get the original object back,\nall right?\n\n164\n00:08:19.110 --> 00:08:26.220\nSo, let's say other and\nif we say pickle.loads, that means loads.\n\n165\n00:08:26.220 --> 00:08:30.600\nNow you can read and write these\nto a file using load and dump but\n\n166\n00:08:30.600 --> 00:08:34.730\nloads and dumps actually just gives you\na strong and then reads in a string.\n\n167\n00:08:34.730 --> 00:08:40.830\nSo, loads and then I'm going to\nsay pickle.dumps e, like so.\n\n168\n00:08:40.830 --> 00:08:46.950\nI should get an employee that looks\nexactly like the original employee, okay?\n\n169\n00:08:48.500 --> 00:08:49.260\nSo there we go.\n\n170\n00:08:49.260 --> 00:08:52.400\nIf I look at other,\nI actually have an object, okay?\n\n171\n00:08:53.550 --> 00:08:55.949\nAnd I can say other.name.\n\n172\n00:08:55.949 --> 00:08:57.278\nThat's Justin.\n\n173\n00:08:57.278 --> 00:09:03.180\nBut is e, which is our original object,\nis that other?\n\n174\n00:09:03.180 --> 00:09:06.780\nNow the key word is actually\nrepresents a comparison,\n\n175\n00:09:06.780 --> 00:09:08.290\nare these the exact same thing in memory?\n\n176\n00:09:08.290 --> 00:09:11.840\n'e' is other, false.\n\n177\n00:09:11.840 --> 00:09:16.050\nI have two separate objects because\nI dumped it out and reloaded it and\n\n178\n00:09:16.050 --> 00:09:17.910\nit creates a new in memory.\n\n179\n00:09:17.910 --> 00:09:18.580\nAll right?\n\n180\n00:09:18.580 --> 00:09:20.730\nNow this is really handy if Daniel and\n\n181\n00:09:20.730 --> 00:09:23.940\nI had two processes running on our\ncomputers and we were networked.\n\n182\n00:09:23.940 --> 00:09:24.730\nI could pickle something.\n\n183\n00:09:24.730 --> 00:09:25.650\nI could send it.\n\n184\n00:09:25.650 --> 00:09:30.430\nLet's say he has some kinda server that's\nwaiting to receive this and it goes,\n\n185\n00:09:30.430 --> 00:09:32.590\nI know that I'm gonna\nget a pickle-like thing.\n\n186\n00:09:32.590 --> 00:09:36.750\nAnd you read it in,\nslurp it up and he unpickles it.\n\n187\n00:09:36.750 --> 00:09:39.760\nHe now has an employee\nobject on his computer\n\n188\n00:09:39.760 --> 00:09:42.310\nthat he can do employee\nobject things with.\n\n189\n00:09:42.310 --> 00:09:44.270\nRight?\nSo this is great for\n\n190\n00:09:44.270 --> 00:09:45.700\ndistributing information.\n\n191\n00:09:45.700 --> 00:09:50.770\nAlso wonderful, I've done this before,\nsave it in a file for later.\n\n192\n00:09:50.770 --> 00:09:54.500\nAnd make sure that other people don't\nhave access to it, as best I can.\n\n193\n00:09:54.500 --> 00:09:56.460\nAnd we're not perfect.\n\n194\n00:09:56.460 --> 00:10:01.310\nBut that allows me to ensure I'm the one\nwho's put the data inside the file, that I\n\n195\n00:10:01.310 --> 00:10:05.070\nexpect to be there and it's not gonna\nrun arbitrary code when I unpickle it.\n\n196\n00:10:05.070 --> 00:10:06.224\nSo do keep that in mind.\n\n197\n00:10:06.224 --> 00:10:08.350\nI'm probably gonna emphasize\nthat like six other times.\n\n198\n00:10:09.676 --> 00:10:13.630\nSo out of the box,\npickle just kinda works.\n\n199\n00:10:13.630 --> 00:10:19.880\nBut there is a time, maybe and I think I\nreferenced this in a previous episode.\n\n200\n00:10:19.880 --> 00:10:22.410\nMaybe when I pickle and un-pickle,\n\n201\n00:10:22.410 --> 00:10:27.430\nI wanna keep track of the respective dates\nof when I pickle and un-pickle, right?\n\n202\n00:10:27.430 --> 00:10:29.410\nIt's kinda like a save process.\n\n203\n00:10:29.410 --> 00:10:31.550\nSo when I pickle an employee object,\n\n204\n00:10:31.550 --> 00:10:34.570\nI wanna just randomly add,\nhey, you know what,\n\n205\n00:10:34.570 --> 00:10:36.516\nI'm gonna have a saved date on there.\n&gt;&gt; Yeah.\n\n206\n00:10:36.516 --> 00:10:40.060\n&gt;&gt; And when I unpickle, you know what, I\n\n207\n00:10:41.170 --> 00:10:46.940\nwant to maybe get rid of that saved\ndate just to show, maybe I don't wanna\n\n208\n00:10:46.940 --> 00:10:51.170\nget rid of the saved date, maybe I wanna\nadd an un-pickle date or a creation date.\n\n209\n00:10:51.170 --> 00:10:52.760\nSo I can add an additional property.\n\n210\n00:10:52.760 --> 00:10:55.330\nBut there's two methods\nthat we have to implement.\n\n211\n00:10:55.330 --> 00:10:59.200\nAnd this is not exhaustive in\nwhat you can do with pickling.\n\n212\n00:10:59.200 --> 00:11:01.930\nBut it's a great starting place,\nall right?\n\n213\n00:11:01.930 --> 00:11:04.953\nSo we're gonna have to add\na couple of methods here.\n\n214\n00:11:04.953 --> 00:11:09.861\nAnd those are __getstate and\n\n215\n00:11:09.861 --> 00:11:14.207\nthat's args **kwargs.\n\n216\n00:11:15.851 --> 00:11:22.168\nAnd I'm just gonna pass for\nnow and setstate.\n\n217\n00:11:22.168 --> 00:11:26.930\nSelf and\nthen it actually gives you the state back.\n\n218\n00:11:26.930 --> 00:11:27.910\nNow what do I mean?\n\n219\n00:11:27.910 --> 00:11:29.400\nYou also have to type this appropriately.\n\n220\n00:11:31.170 --> 00:11:32.950\nNow what do I mean by state?\n\n221\n00:11:32.950 --> 00:11:38.940\nWell, the state of this employee object,\nas it stands, is what represents it.\n\n222\n00:11:38.940 --> 00:11:43.300\nWhat behind the scenes is the data that\nrepresents those respective things.\n\n223\n00:11:44.680 --> 00:11:49.730\nWell, Justin the name,\nthe title, and supervisors list.\n\n224\n00:11:49.730 --> 00:11:50.950\nOkay?\n\n225\n00:11:50.950 --> 00:11:53.790\nIf I wanted to make a change,\nthen I go and\n\n226\n00:11:53.790 --> 00:11:58.640\nadd to whatever is going\nto be saved in getstate.\n\n227\n00:11:58.640 --> 00:12:02.440\nLikewise, if I customize that,\nhey, when I unpickle this,\n\n228\n00:12:02.440 --> 00:12:05.960\nit's gonna hand me back\nthe information from getstate.\n\n229\n00:12:05.960 --> 00:12:08.400\nBut now how do I put\nit back to the object?\n\n230\n00:12:08.400 --> 00:12:11.050\nSo how do I set the object back up?\n\n231\n00:12:11.050 --> 00:12:16.440\nSo you're hijacking those kind of dump and\nload processes.\n\n232\n00:12:16.440 --> 00:12:17.220\nOkay?\n\n233\n00:12:17.220 --> 00:12:19.820\nSo, here we go.\n\n234\n00:12:19.820 --> 00:12:23.809\nApparently, I just randomly\ndeleted a bunch of stuff.\n\n235\n00:12:23.809 --> 00:12:27.419\nAnd for now,\nwe're just going to return self and\n\n236\n00:12:27.419 --> 00:12:30.600\nthen the backing dictionary, all right?\n\n237\n00:12:30.600 --> 00:12:32.930\nThe information here.\n\n238\n00:12:32.930 --> 00:12:38.755\nAnd let's just, just call it what it is.\n\n239\n00:12:38.755 --> 00:12:43.561\nAnd return state like so, okay?\n\n240\n00:12:43.561 --> 00:12:47.961\nSo I'm just grabbing the backing\ndictionary, there it is and\n\n241\n00:12:47.961 --> 00:12:51.610\nlet's put a print, so\nyou know what we're doing.\n\n242\n00:12:53.360 --> 00:12:56.640\nNow, likewise, this backing dictionary,\n\n243\n00:12:56.640 --> 00:13:01.150\nthat's what's gonna be passed in\nas state to the set state, okay?\n\n244\n00:13:01.150 --> 00:13:05.850\nSo how does one, how does one manage that?\n\n245\n00:13:05.850 --> 00:13:13.150\nWell, the object's already gonna\nbe created for you and for\n\n246\n00:13:14.680 --> 00:13:19.920\npiece in state for\neach one of the individual pieces\n\n247\n00:13:21.810 --> 00:13:27.038\nOne, two, three, four, we're gonna setattr\n\n248\n00:13:27.038 --> 00:13:31.530\non self to the name, not price, piece.\n\n249\n00:13:31.530 --> 00:13:35.500\nAnd then set it to the value of here.\n\n250\n00:13:35.500 --> 00:13:41.237\nAll right and for clarity I'm\n\n251\n00:13:41.237 --> 00:13:47.664\nactually going to add a print, so\n\n252\n00:13:47.664 --> 00:13:53.190\nsetting the piece to blank.\n\n253\n00:13:53.190 --> 00:14:00.427\nAll right, so format(piece) and\nthen the state(piece), right?\n\n254\n00:14:00.427 --> 00:14:05.378\nSo that I actually print out\nwhich what's going on, okay?\n\n255\n00:14:05.378 --> 00:14:09.990\nSo and I think I may have to\nrun that a just little bit.\n\n256\n00:14:09.990 --> 00:14:12.930\nSo we gonna all see,\nthere we go, there we go.\n\n257\n00:14:12.930 --> 00:14:17.457\nSometimes I get in and\nthere's really [LAUGH] like I'm in it.\n\n258\n00:14:17.457 --> 00:14:21.393\nYou all can't see that but to just make\nsure that everybody is good because it was\n\n259\n00:14:21.393 --> 00:14:24.035\nbehind my head just a moment ago,\nfor piece in state,\n\n260\n00:14:24.035 --> 00:14:28.150\nI'm gonna tell you what I'm setting on\nthe object that's being created because it\n\n261\n00:14:28.150 --> 00:14:32.890\nknows because of the pickling protocol,\nhey, this is an employee type object.\n\n262\n00:14:32.890 --> 00:14:34.255\nBut how do I set the properties?\n\n263\n00:14:34.255 --> 00:14:38.210\nI'm gonna Set the on the object itself,\n\n264\n00:14:38.210 --> 00:14:43.680\nwith the name piece and\nthen the individual state piece, okay?\n\n265\n00:14:43.680 --> 00:14:47.598\nSo let's take a look and\nsee how that plays out.\n\n266\n00:14:47.598 --> 00:14:52.750\nSo python3 -i pickling,\nthere we go, we have our E and\n\n267\n00:14:52.750 --> 00:14:57.090\nthen I'm gonna import pickles,\nimport pickles, import pickle and\n\n268\n00:14:57.090 --> 00:15:03.250\nthen I'm gonna say pickle.dumps(e),\nlike so, all right?\n\n269\n00:15:03.250 --> 00:15:06.340\nThis right here is that dictionary, okay?\n\n270\n00:15:06.340 --> 00:15:09.990\nSo that's our state of our object,\nit's the back end dictionary.\n\n271\n00:15:09.990 --> 00:15:15.000\nThis could be anything I wanted it to be,\nso name Justin, title entertainer,\n\n272\n00:15:15.000 --> 00:15:20.160\nsupervisors, for instance,\nif I didn't want to save the supervisors,\n\n273\n00:15:20.160 --> 00:15:24.140\nI can just remove that, I can delete\nit and say, hey, I only worry about the\n\n274\n00:15:24.140 --> 00:15:24.870\n&gt;&gt; The name and title\n\n275\n00:15:24.870 --> 00:15:26.810\n&gt;&gt; The name and title.\n\n276\n00:15:26.810 --> 00:15:31.460\nLikewise, if I wanted to add a property,\nI could add it right there and\n\n277\n00:15:31.460 --> 00:15:36.920\nreturn that and then handle that\nappropriately in set state.\n\n278\n00:15:36.920 --> 00:15:40.988\nAnd then it just turn this back,\nall right, so,\n\n279\n00:15:40.988 --> 00:15:46.510\nif we kind of get the,\nlet's say pickle.dumps (e), right?\n\n280\n00:15:46.510 --> 00:15:47.340\nIt printed.\n\n281\n00:15:47.340 --> 00:15:48.910\nRight, Still printing.\n\n282\n00:15:48.910 --> 00:15:50.265\nBut now D is at string.\n\n283\n00:15:50.265 --> 00:15:53.702\nIf I say pickle.loads(d),\n\n284\n00:15:53.702 --> 00:15:57.940\nwhich is the binary representation.\n\n285\n00:15:57.940 --> 00:16:04.025\nAnd Setting the name piece to adjusting,\nSetting the title piece to Edutainers,\n\n286\n00:16:04.025 --> 00:16:07.730\nSetting supervisors piece\nto well this list, and\n\n287\n00:16:07.730 --> 00:16:13.570\nthen it returns the employee object\nright here, and that's how it does this.\n\n288\n00:16:13.570 --> 00:16:19.320\nSo you're hijacking the reading and\nsetting that or actually backwards.\n\n289\n00:16:19.320 --> 00:16:23.500\nSo you should think of,\nhow am I going to now package this up\n\n290\n00:16:23.500 --> 00:16:24.165\nto send it somewhere?\n&gt;&gt; Yeah.\n\n291\n00:16:24.165 --> 00:16:26.350\n&gt;&gt; That's get state.\n\n292\n00:16:26.350 --> 00:16:29.552\nBut likewise,\nget state is going to feed into set state,\n\n293\n00:16:29.552 --> 00:16:32.364\nif I want to read this back in and\ncreate an object.\n\n294\n00:16:32.364 --> 00:16:37.080\nSet state is well, how do I reorganize and\nreimplement this, okay?\n\n295\n00:16:37.080 --> 00:16:40.540\nNow by default this is effectively what\nhappens if you don't implement these\n\n296\n00:16:40.540 --> 00:16:41.440\nmethods.\n\n297\n00:16:41.440 --> 00:16:47.995\nSo let's see how I can make a change to\nwhere I'm changing up a few things, okay?\n\n298\n00:16:47.995 --> 00:16:51.283\nAnd as I said, this is another\none of those edge case things,\n\n299\n00:16:51.283 --> 00:16:53.484\nbut you never know when it might crop up.\n\n300\n00:16:53.484 --> 00:16:58.681\nI'd ran into some pickling issues myself,\nbecause I like to play\n\n301\n00:16:58.681 --> 00:17:03.700\naround with sending messages\nbetween respective computers.\n\n302\n00:17:05.440 --> 00:17:07.070\nI know I have a weird hobby.\n&gt;&gt; [LAUGH]\n\n303\n00:17:07.070 --> 00:17:10.880\n&gt;&gt; But this does come up, all right?\n\n304\n00:17:10.880 --> 00:17:16.010\nSo the state is a dictionary,\nbut I'm like, you now what?\n\n305\n00:17:16.010 --> 00:17:18.579\nI don't wanna keep track\nof the supervisors.\n\n306\n00:17:20.490 --> 00:17:27.530\nSo I'm just gonna delete that key and the\nrespective value before I get it, okay?\n\n307\n00:17:27.530 --> 00:17:31.696\nNow technically I'm deleting self.__dict__\nbecause I have a reference complex object.\n\n308\n00:17:31.696 --> 00:17:33.168\nYou have no idea what I'm talking about,\n\n309\n00:17:33.168 --> 00:17:34.820\ngo watch the previous\nepisode about copying.\n\n310\n00:17:34.820 --> 00:17:37.485\nSo I'm modifying that because\nthese variables actually point to\n\n311\n00:17:37.485 --> 00:17:38.690\nthe same thing.\n\n312\n00:17:38.690 --> 00:17:44.535\nI could make a copy and do just that,\nbut we won't worry about that for now.\n\n313\n00:17:44.535 --> 00:17:49.580\nBut I do want to say save_date,\nand set that equal to right now,\n\n314\n00:17:49.580 --> 00:17:53.090\nwhen it's occurring, all right?\n\n315\n00:17:53.090 --> 00:17:58.080\nSo from datetime import datatime,\n\n316\n00:18:00.141 --> 00:18:06.830\nAnd I'm gonna say daytime.now,\njust like that.\n\n317\n00:18:06.830 --> 00:18:11.447\nSo I'm gonna now add a dynamic key\nwhen you're getting a state, and\n\n318\n00:18:11.447 --> 00:18:14.452\nsays there's a save_date right now.\n\n319\n00:18:14.452 --> 00:18:19.010\nBoom, okay, let's just see how that\nworks out for us and pickling.\n\n320\n00:18:19.010 --> 00:18:21.927\nThere we go, e.\n\n321\n00:18:21.927 --> 00:18:26.886\nSo import pickle, pickle.dumps(e), and\n\n322\n00:18:26.886 --> 00:18:33.430\nnow we have that save_date right here,\nthat will stay.\n\n323\n00:18:33.430 --> 00:18:34.100\nAnd if you look,\n\n324\n00:18:34.100 --> 00:18:40.000\nyou can kinda see that became part of the\nbinary string representation, all right?\n\n325\n00:18:40.000 --> 00:18:43.210\nThe byte array, or\nthat thing has a bunch of names,\n\n326\n00:18:43.210 --> 00:18:44.630\nand it kind of-\n&gt;&gt; [LAUGH]\n\n327\n00:18:44.630 --> 00:18:46.740\n&gt;&gt; That's a whole different episode.\n\n328\n00:18:46.740 --> 00:18:47.700\n&gt;&gt; That's not [CROSSTALK] [LAUGH]\n\n329\n00:18:47.700 --> 00:18:49.898\n&gt;&gt; [LAUGH] Yeah, but\n\n330\n00:18:49.898 --> 00:18:54.137\nnow if I say d = pickle.dumps,\n\n331\n00:18:55.358 --> 00:19:00.540\nThat is not what I meant to do.\n\n332\n00:19:00.540 --> 00:19:03.317\ne, right?\nKeyError supervisors, well see,\n\n333\n00:19:03.317 --> 00:19:08.335\nI didn't make a copy and\nI originally run it into a problem there.\n\n334\n00:19:08.335 --> 00:19:08.991\nSo you know what?\n\n335\n00:19:08.991 --> 00:19:14.615\nI guess I was trying to ignore it,\nlook what I got.\n\n336\n00:19:14.615 --> 00:19:21.385\nSo let's go ahead and\nsay from copy import deepcopy.\n\n337\n00:19:21.385 --> 00:19:24.473\nAnd I wouldn't necessarily recommend this,\nthere's better ways to do this, but\n\n338\n00:19:24.473 --> 00:19:25.920\nlet's make this-\n&gt;&gt; Just quick and dirty right.\n\n339\n00:19:25.920 --> 00:19:26.460\n&gt;&gt; Yeah, and\n\n340\n00:19:26.460 --> 00:19:30.960\nthen let's go ahead and import pickle,\nso that's always available to us.\n\n341\n00:19:30.960 --> 00:19:35.880\nAll right, so here I'm gonna\nsay deepcopy of the dictionary.\n\n342\n00:19:38.550 --> 00:19:42.050\nAnd now we should be able to rerun this\nmultiple times, and we're good to go.\n\n343\n00:19:43.130 --> 00:19:46.363\nOkay, pickling, and\n\n344\n00:19:46.363 --> 00:19:51.304\nthen we still have e, looks good.\n\n345\n00:19:51.304 --> 00:19:53.914\ndata = pickle.dumps, and e, right?\n\n346\n00:19:53.914 --> 00:19:58.280\nThere's data, there's our date string.\n\n347\n00:19:58.280 --> 00:20:00.650\nLook at data,\nthat's that thing we've seen before.\n\n348\n00:20:00.650 --> 00:20:07.180\nAnd if we go pickle.loads, the data back.\n\n349\n00:20:07.180 --> 00:20:12.910\nThe Employee object has no attributes\nsupervisors, or why is that?\n\n350\n00:20:14.440 --> 00:20:18.730\nWell this occurred because this is like\none of those woopsy daisy moments.\n\n351\n00:20:18.730 --> 00:20:23.210\nIf you modify this you need to make\nsure that attribute is not dependent for\n\n352\n00:20:23.210 --> 00:20:24.840\nthe object of work.\n\n353\n00:20:24.840 --> 00:20:28.274\nOr try to print out,\nlook Setting the name piece to Justin,\n\n354\n00:20:28.274 --> 00:20:32.673\nSetting the title piece to Edutainer,\nSetting the save_date piece to this\n\n355\n00:20:32.673 --> 00:20:34.550\ninformation\n&gt;&gt; Right.\n\n356\n00:20:34.550 --> 00:20:37.450\n&gt;&gt; But in our repr method we said he\n\n357\n00:20:37.450 --> 00:20:39.900\nthere is going to be\na supervisor's property.\n\n358\n00:20:40.930 --> 00:20:44.002\nBut we deleted it before we saved it,\nso when we tried to to read it back in,\n\n359\n00:20:44.002 --> 00:20:45.155\nit's not set to anything.\n\n360\n00:20:45.155 --> 00:20:49.895\nSo we're real close, it was running,\n\n361\n00:20:49.895 --> 00:20:53.639\nbut now how do you manage this?\n\n362\n00:20:53.639 --> 00:20:58.042\nWell, it's a real simple change, but\nI wanted to show you that cuz when you're\n\n363\n00:20:58.042 --> 00:21:01.320\nmessing with the issue,\nyou go why is that broke?\n\n364\n00:21:01.320 --> 00:21:03.784\nThat's weird.\n\n365\n00:21:03.784 --> 00:21:07.320\nIf I come back right up here.\n\n366\n00:21:07.320 --> 00:21:12.320\nThat reaper, the supervisor's\npart is kind of necessary.\n\n367\n00:21:12.320 --> 00:21:13.380\nI can do one of two things.\n\n368\n00:21:13.380 --> 00:21:18.584\nI can remove that from being necessary or\nI can say, okay, I deleted it cuz I don't\n\n369\n00:21:18.584 --> 00:21:23.728\nwanna save it, because I don't wanna keep\nit in disk, I wanna handle it myself.\n\n370\n00:21:23.728 --> 00:21:31.210\nAnd then __setstate__,\nI'm just gonna set it back up initially.\n\n371\n00:21:31.210 --> 00:21:36.289\nSo I'm gonna say supervisors,\nactually, self.supervisors,\n\n372\n00:21:36.289 --> 00:21:39.924\nI'm gonna add it back in\nto just an empty array.\n\n373\n00:21:39.924 --> 00:21:44.570\nAnd then additional setup can occur\nafter you've unpickled it, okay?\n\n374\n00:21:44.570 --> 00:21:46.510\nI'm making these based on\nthe context of what I need.\n\n375\n00:21:46.510 --> 00:21:50.166\nI'm just making decisions that\nyou're going to have to make\n\n376\n00:21:50.166 --> 00:21:52.180\nit if you do something like this.\n\n377\n00:21:53.360 --> 00:21:59.790\nWith that, we should notice keyword there,\nshould be good to go.\n\n378\n00:21:59.790 --> 00:22:02.730\nSo -i pickling, okay.\n\n379\n00:22:02.730 --> 00:22:07.267\nSo data = pickle.dumps, and\n\n380\n00:22:07.267 --> 00:22:11.460\nwait for it, (e), okay?\n\n381\n00:22:11.460 --> 00:22:12.640\nLooks good.\n\n382\n00:22:12.640 --> 00:22:13.550\nThere's no supervisors there.\n\n383\n00:22:13.550 --> 00:22:18.798\nAnd then I should be able to get other or\n\n384\n00:22:18.798 --> 00:22:24.590\nanother = pickle.loads(data).\n\n385\n00:22:24.590 --> 00:22:30.260\nAnd you see it there, and\nif I look at another, there it is.\n\n386\n00:22:30.260 --> 00:22:36.822\nAnd interestingly enough,\nThere's now a save_date.\n\n387\n00:22:36.822 --> 00:22:39.018\nAnd this dynamic edition\nof a property says, hey,\n\n388\n00:22:39.018 --> 00:22:41.180\nthis has been picked one time before.\n\n389\n00:22:41.180 --> 00:22:41.930\nThis has been saved.\n\n390\n00:22:43.100 --> 00:22:47.040\nI wouldn't have known that if I hadn't\nimplemented these customizations.\n\n391\n00:22:47.040 --> 00:22:53.080\nLikewise, I still fulfilled by\ncontract with the repr method.\n\n392\n00:22:53.080 --> 00:22:56.310\nSo it can print out,\nusing supervisors, but they're empty.\n\n393\n00:22:56.310 --> 00:22:59.310\nWell, when we unpickled it,\nwe gotta make a call to a database and\n\n394\n00:22:59.310 --> 00:23:00.310\nrepopulate that list.\n\n395\n00:23:00.310 --> 00:23:04.890\nSo we'll do that external to set state,\nand that's perfectly okay.\n\n396\n00:23:04.890 --> 00:23:08.090\nMaybe you wanna have it internally,\nit gets a little weird when you handle\n\n397\n00:23:08.090 --> 00:23:11.800\ndatabase calls and stuff cuz it may\ntake a while for those to return.\n\n398\n00:23:11.800 --> 00:23:15.110\nSo just make sure you\nuse these appropriately.\n\n399\n00:23:15.110 --> 00:23:19.460\nBut getting and setting state is a great\nway to start with customizing how pickle\n\n400\n00:23:19.460 --> 00:23:24.700\nloads and dumps information for\nyour respective custom objects.\n\n401\n00:23:24.700 --> 00:23:28.030\nAnd like I said, it's not exhaustive,\nbut it's a great starting point and\n\n402\n00:23:28.030 --> 00:23:32.320\nprobably the first place you'll\nkind of weave around into.\n\n403\n00:23:32.320 --> 00:23:33.378\n&gt;&gt; Well, Justin, thanks for\n\n404\n00:23:33.378 --> 00:23:35.586\ngetting us squared away when\nit comes to Python pickles.\n\n405\n00:23:35.586 --> 00:23:39.350\nIt's a fun thing to say and it can\neven be a more fun thing to implement.\n\n406\n00:23:39.350 --> 00:23:41.480\nEspecially if that's exactly\nwhat you're looking for.\n\n407\n00:23:41.480 --> 00:23:43.080\nGreat stuff, we appreciate your time and\neffort on that.\n\n408\n00:23:43.080 --> 00:23:46.200\nAnd we appreciate you good\nfolks out there for watching.\n\n409\n00:23:46.200 --> 00:23:49.075\nBut from the look at my man's eye over\nthere, he's all done with pickles, so\n\n410\n00:23:49.075 --> 00:23:50.103\nwe're gonna call it a day.\n\n411\n00:23:50.103 --> 00:23:51.290\nThanks for watching.\n\n412\n00:23:51.290 --> 00:23:53.557\nSigning off for DevProTV,\nI've been your host, Daniel Lowrie.\n\n413\n00:23:53.557 --> 00:23:54.630\n&gt;&gt; And I'm Justin Dennison.\n\n414\n00:23:54.630 --> 00:23:55.950\n&gt;&gt; We'll see you next time.\n\n415\n00:23:55.950 --> 00:23:58.514\n[MUSIC]\n\n",
          "vimeoId": "254857844"
        }
      ],
      "title": "Serialization"
    }
  ],
  "url": "python-data-model",
  "vLab": false
}
