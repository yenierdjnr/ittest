{
  "description": "In this series, Daniel and Justin walk you through an in-depth primer on the Python programming language. Whether you have some other programming experience or you are completely new to coding, you will be given the tools necessary to get started writing programs with Python. They cover topics like printing output to the screen, assigning and utilizing variables, getting input from the user, decision making, iteration/loops, creating lists, dictionaries, and tuples, using and creating functions, slicing, and more. If you're looking for an easy programming language to get started, or you want to add another language to your repertoire, Python is a great choice.",
  "descriptionMD": "",
  "length": "22748",
  "name": "Python Programming",
  "practiceExam": false,
  "subtitle": "Programming Language",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin give a general overview of what to expect in the upcoming Python programming series. They cover topics like who is the intended audience, what the scope of the series will cover, and what are some specific topics that will be addressed.",
          "length": "166",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-0-0-overview-030616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-0-0-overview-030616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-0-0-overview-030616-1-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.005 --> 00:00:04.383\n[SOUND]\n\n2\n00:00:04.383 --> 00:00:09.383\n[MUSIC]\n\n3\n00:00:09.383 --> 00:00:13.016\nIn this segment we're gonna give you a\ngeneral overview of what to expect in our\n\n4\n00:00:13.016 --> 00:00:16.484\nupcoming Python Programming series,\nstarring my good friend here, Mr.\n\n5\n00:00:16.484 --> 00:00:17.760\nJustin Dennison.\n\n6\n00:00:17.760 --> 00:00:22.540\nJustin, Python programming, you've had a\nlittle experience with that in your past,\n\n7\n00:00:22.540 --> 00:00:23.929\nso we're glad to have you onboard.\n\n8\n00:00:25.050 --> 00:00:26.580\nFirst let's start here.\n\n9\n00:00:26.580 --> 00:00:29.620\nWhat is the intended audience for\nthis Python series?\n\n10\n00:00:29.620 --> 00:00:34.575\n>> I think Python is a great language for\nall beginners, but I've kind of tried\n\n11\n00:00:34.575 --> 00:00:39.618\nto think about what would help me the most\nif I had a diversity of backgrounds.\n\n12\n00:00:39.618 --> 00:00:44.778\nSo say I'm a sys admin, but I don't really\nknow a lot about hardcore programming.\n\n13\n00:00:44.778 --> 00:00:46.417\nThat audience would benefit,\n\n14\n00:00:46.417 --> 00:00:50.998\nas well as someone who just wants to get\nstarted with Python to play around with.\n\n15\n00:00:50.998 --> 00:00:55.287\nSo I've tried to make it practical\nwhile teaching beginner-level concepts,\n\n16\n00:00:55.287 --> 00:00:57.310\nintroductory-level concepts.\n\n17\n00:00:57.310 --> 00:00:58.120\n>> Excellent.\n\n18\n00:00:58.120 --> 00:01:03.880\nSo what would you say is a good overview\nof what to expect in our Python series?\n\n19\n00:01:03.880 --> 00:01:08.370\n>> So in Python, really,\nwe gotta get started, we gotta get set up.\n\n20\n00:01:08.370 --> 00:01:09.760\nHow do we get set up?\n\n21\n00:01:09.760 --> 00:01:13.060\nHow do we run these reliably and\nkind of reproducibly?\n\n22\n00:01:13.060 --> 00:01:19.040\nAnd then we're gonna spend some time\naddressing some of this basic fundamental\n\n23\n00:01:19.040 --> 00:01:23.430\nunderstanding of Python,\nlike what are lists, what are strings?\n\n24\n00:01:23.430 --> 00:01:25.748\nWhat are all of these words\nyou're saying that I don't know?\n\n25\n00:01:25.748 --> 00:01:30.368\nAnd then finally we're gonna culminate\nin putting all of these new concepts,\n\n26\n00:01:30.368 --> 00:01:32.468\nlike functions and data types, and\n\n27\n00:01:32.468 --> 00:01:35.980\nwrite something that I'm pretty\nsure will blow your mind.\n\n28\n00:01:35.980 --> 00:01:36.970\n>> Sounds awesome.\n\n29\n00:01:36.970 --> 00:01:40.058\nNow what are some specific topics\nthat we're gonna dive into,\n\n30\n00:01:40.058 --> 00:01:43.850\njust to whet the appetite of someone\nthat might be interested in this?\n\n31\n00:01:43.850 --> 00:01:48.390\n>> So how do I import new functionality\nfrom the standard library?\n\n32\n00:01:48.390 --> 00:01:50.328\nWell, there's very\nspecific ways to do that.\n\n33\n00:01:50.328 --> 00:01:53.510\nOr how do I write my\nown functions if I want\n\n34\n00:01:53.510 --> 00:01:58.530\nto encapsulate all of these\nnew things I've learned?\n\n35\n00:01:58.530 --> 00:02:00.280\nHow do I write my own functions?\n\n36\n00:02:00.280 --> 00:02:04.810\nIn particular, how do I write those\nfunctions to make use of lists,\n\n37\n00:02:04.810 --> 00:02:10.580\nwhich are collections of whatever you want\nthem to be, so I can stream through those?\n\n38\n00:02:10.580 --> 00:02:11.735\nDoes that answer your question?\n\n39\n00:02:11.735 --> 00:02:15.085\n>> Yeah,\nthat's exactly what we're looking for.\n\n40\n00:02:15.085 --> 00:02:19.950\nWe just wanted to know some of the details\nof our Python course for our viewers out\n\n41\n00:02:19.950 --> 00:02:24.450\nthere that might be going, hm, this looks\ninteresting, but tell me more about that.\n\n42\n00:02:24.450 --> 00:02:27.060\nSo thank you so much for\njoining us today and\n\n43\n00:02:27.060 --> 00:02:31.080\nexplaining some of what our viewers out\nthere might expect from this course.\n\n44\n00:02:31.080 --> 00:02:34.777\nIf it sounds like something that you might\nbe interested in, that might be helpful\n\n45\n00:02:34.777 --> 00:02:38.058\nfor you, then we look forward to\nseeing you in those upcoming episodes.\n\n46\n00:02:38.058 --> 00:02:42.316\n[MUSIC]\n\n",
          "vimeoId": "158179580"
        },
        {
          "description": "In this episode, Daniel and Justin kick things off by explaining what Python is and giving a little history of the language. They also talk about what a program is and why Python is so powerful. Then they show you how to acquire Python if it's not already installed on your system. Finally, they show you how to write your first simple Python program.",
          "length": "1874",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-1-setting_up_python-030516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-1-setting_up_python-030516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-1-setting_up_python-030516-1-sm.jpg",
          "title": "Setting up Python",
          "transcript": "WEBVTT\n\n1\n00:00:00.150 --> 00:00:03.702\n[SOUND]\n\n2\n00:00:03.702 --> 00:00:07.869\n[MUSIC]\n\n3\n00:00:07.869 --> 00:00:08.990\nAll right.\n\n4\n00:00:08.990 --> 00:00:12.140\nGreetings everyone and welcome to\nanother great episode of ITPro TV.\n\n5\n00:00:12.140 --> 00:00:13.930\nI'm your host Daniel Lowrie.\n\n6\n00:00:13.930 --> 00:00:17.840\nAnd in today's episode, we are beginning\nour Python programming series.\n\n7\n00:00:17.840 --> 00:00:21.830\nAnd joining us on the studio today to\nlend his expertise on that very topic\n\n8\n00:00:21.830 --> 00:00:24.020\nis my good friend Mr. Justin Denisson.\n\n9\n00:00:24.020 --> 00:00:25.120\nJustin, welcome to the show sir.\n\n10\n00:00:25.120 --> 00:00:25.960\nHow you doing today?\n\n11\n00:00:25.960 --> 00:00:27.740\n>> I'm doing well, thank you Daniel.\n\n12\n00:00:29.100 --> 00:00:34.980\nReally excited to dive in and show\nthe intricacies and the wonder of Python,\n\n13\n00:00:34.980 --> 00:00:38.470\nbut there is a little bit\nto get started first.\n\n14\n00:00:38.470 --> 00:00:39.110\n>> Yeah that's right.\n\n15\n00:00:39.110 --> 00:00:41.040\nWe have to set the stage as it were.\n\n16\n00:00:41.040 --> 00:00:43.040\nGive you guy a little bit of information,\n\n17\n00:00:43.040 --> 00:00:46.210\nlike a good place to start would\nprobably be, what is Python?\n\n18\n00:00:46.210 --> 00:00:50.590\nWe're talking Python is usually something\nreferred to as a large snake, but\n\n19\n00:00:50.590 --> 00:00:52.770\nobviously not in this instance,\n\n20\n00:00:52.770 --> 00:00:55.530\nwe're doing IT, I even know\nsome of you might have pythons.\n\n21\n00:00:55.530 --> 00:00:59.006\nWe're talking specifically about\nthe programming language itself, and\n\n22\n00:00:59.006 --> 00:01:00.810\nJustin it goes beyond that though.\n\n23\n00:01:00.810 --> 00:01:02.320\nWhat exactly is Python?\n\n24\n00:01:02.320 --> 00:01:06.100\nWhat makes it different than\nother forms of programming?\n\n25\n00:01:06.100 --> 00:01:11.470\n>> So, Python is very interesting, that\nthe whole purpose that it was devised,\n\n26\n00:01:11.470 --> 00:01:15.780\nwas to make it easy and\nentry level to get a lot of things done.\n\n27\n00:01:15.780 --> 00:01:20.280\nIt's meant to be incredibly powerful\nwhile we're moving away from\n\n28\n00:01:20.280 --> 00:01:25.440\nall those arduous semicolons and\ncurly braces and parenthesis.\n\n29\n00:01:25.440 --> 00:01:30.820\nBut with all this power comes great\nresponsibility, just like Uncle Ben said.\n\n30\n00:01:30.820 --> 00:01:31.340\n>> That's right.\n\n31\n00:01:31.340 --> 00:01:32.460\nUncle Ben is not a liar.\n\n32\n00:01:32.460 --> 00:01:33.770\nThe man knows his stuff.\n\n33\n00:01:33.770 --> 00:01:37.686\nWell when it comes to Python,\nreally what makes it, what separates it?\n\n34\n00:01:37.686 --> 00:01:39.730\nAnd obviously you said it's more simple,\n\n35\n00:01:39.730 --> 00:01:44.460\nit's not as I guess complex as\nsomething maybe in like C right?\n\n36\n00:01:44.460 --> 00:01:47.150\nC tends to be quite complex\nwhen we think about it.\n\n37\n00:01:47.150 --> 00:01:52.050\nPython has the same kind of power, yet\na whole lot less of the complexity.\n\n38\n00:01:52.050 --> 00:01:54.180\n>> Yeah.\nSo there's this really smart guy\n\n39\n00:01:54.180 --> 00:01:58.270\nnamed Guido Van [INAUDIBLE] I hope\nI pronounced his name correctly.\n\n40\n00:01:58.270 --> 00:02:03.280\nHe's Dutch, so very sorry if I\nmispronounced the name there.\n\n41\n00:02:03.280 --> 00:02:07.880\nBut his entire goal was to create\na language that was meant for\n\n42\n00:02:07.880 --> 00:02:13.030\nlearning and being kind of entry level,\nthat read like normal English.\n\n43\n00:02:13.030 --> 00:02:16.160\nSo instead of having all\nthese weird characters,\n\n44\n00:02:16.160 --> 00:02:20.400\nyou know as you get the semi-colons,\nthe weird curly braces,\n\n45\n00:02:20.400 --> 00:02:25.840\nand who knows what else, the goal was to\nhave it read more or less like a sentence,\n\n46\n00:02:25.840 --> 00:02:30.760\nand remove all those things became\na sticking point for beginners.\n\n47\n00:02:30.760 --> 00:02:34.300\nAnd it just so happened he's\nreally good at what he does so\n\n48\n00:02:34.300 --> 00:02:36.540\nit became very very powerful.\n\n49\n00:02:36.540 --> 00:02:37.860\n>> Well, we sure do thank him for\n\n50\n00:02:37.860 --> 00:02:39.970\nthat because I don't know\nabout you guys out there,\n\n51\n00:02:39.970 --> 00:02:44.280\nI've tried my hand at programming from\ntime to time and I remember picking up my\n\n52\n00:02:44.280 --> 00:02:49.160\nfirst book on C and C# and C++ and all\nthe other different languages out there.\n\n53\n00:02:49.160 --> 00:02:50.820\nAnd you try to get into them.\n\n54\n00:02:50.820 --> 00:02:54.430\nAnd it just seems like they\nalready expect you to know a lot\n\n55\n00:02:54.430 --> 00:02:55.930\nabout the programming language itself.\n\n56\n00:02:55.930 --> 00:02:57.960\nIt's like,\nI'm here to learn this language,\n\n57\n00:02:57.960 --> 00:03:02.130\nnot have to already kind of know it\nbefore I'm able to understand it.\n\n58\n00:03:02.130 --> 00:03:06.150\nThat seems where Python, anytime I ask\nsomeone what's the best language to get\n\n59\n00:03:06.150 --> 00:03:10.460\ninto if I'm a beginner, Python invariably\nis what comes out of their mouth.\n\n60\n00:03:10.460 --> 00:03:14.030\nAnd obviously that's because it's\nmeant to be end user friendly.\n\n61\n00:03:14.030 --> 00:03:17.900\nIf you don't know languages, you can jump\nin there and you don't need to know much\n\n62\n00:03:17.900 --> 00:03:22.620\nof syntax right out of the gate, all you\nhave to do is start learning, see how this\n\n63\n00:03:22.620 --> 00:03:25.580\nworks, and then start writing programs,\nand I guess that's a good place for\n\n64\n00:03:25.580 --> 00:03:31.129\nus to go next is what exactly is a program\nand how does Python deal with that?\n\n65\n00:03:32.430 --> 00:03:35.950\n>> Well,\nbefore I answer the what is the program,\n\n66\n00:03:35.950 --> 00:03:38.830\nI just wanna give a general\nstatement about Python.\n\n67\n00:03:38.830 --> 00:03:41.380\nSo, you said it was a scripting language.\n\n68\n00:03:41.380 --> 00:03:47.220\nIt very much is kind of a replacement for\nBash or Pearl or VB Script.\n\n69\n00:03:48.410 --> 00:03:51.670\nThat's actually one of the first\nthings that you can do with it\n\n70\n00:03:51.670 --> 00:03:56.010\nvery easy to get started,\neasy to set up on most platforms.\n\n71\n00:03:56.010 --> 00:04:01.946\nIt's kind of already baked into the Star\nNix systems, so we'll get up and rolling.\n\n72\n00:04:01.946 --> 00:04:06.222\n[COUGH]\nExcuse me.\n\n73\n00:04:06.222 --> 00:04:09.230\nBut what is a programming language?\n\n74\n00:04:09.230 --> 00:04:13.270\nThe whole purpose of Python is to give\nyou something easy that you can write and\n\n75\n00:04:13.270 --> 00:04:14.520\nunderstand.\n\n76\n00:04:14.520 --> 00:04:17.220\nAnd then there's this special\nthing called an interpreter.\n\n77\n00:04:17.220 --> 00:04:19.035\nWe can think of it as a little black box.\n\n78\n00:04:19.035 --> 00:04:20.620\n>> [LAUGH]\n>> It's hanging right here,\n\n79\n00:04:20.620 --> 00:04:21.380\nsee it right there?\n\n80\n00:04:22.570 --> 00:04:26.760\nSo we take that language, that text and\nwe feed it in and then there's magic.\n\n81\n00:04:26.760 --> 00:04:28.700\nEffectively we're gonna say it's magic.\n\n82\n00:04:28.700 --> 00:04:33.680\nAnd it comes out into machine\nunderstandable instructions that says hey,\n\n83\n00:04:33.680 --> 00:04:38.960\nwhen I type print, I want you to\noutput to the standard output.\n\n84\n00:04:38.960 --> 00:04:39.550\nThings like that.\n\n85\n00:04:39.550 --> 00:04:43.080\nSo a programming language is a way\nto interface with the computer\n\n86\n00:04:43.080 --> 00:04:46.860\nin commonly understood English verbage.\n\n87\n00:04:46.860 --> 00:04:47.650\n>> Yeah, and\n\n88\n00:04:47.650 --> 00:04:51.240\nI guess you make a really good point there\nis I did call it a scripting language.\n\n89\n00:04:51.240 --> 00:04:55.280\nAnd from what I understand you can do\nscripting with it as you just said.\n\n90\n00:04:55.280 --> 00:05:00.010\nBut it more properly is a programing\nlanguage we're scripting, it typically\n\n91\n00:05:00.010 --> 00:05:03.150\nthat's a line by line interpretation,\nit just starts from the top, and\n\n92\n00:05:03.150 --> 00:05:06.700\nworks it's way down, and finds any\nerrors or whatever, than it stops, and\n\n93\n00:05:06.700 --> 00:05:09.870\nyou have to go in and check your code and\nsee what the problem is.\n\n94\n00:05:09.870 --> 00:05:14.140\nWell programming language, it becomes more\nof a self contained kind of entity right?\n\n95\n00:05:15.340 --> 00:05:18.640\n>> Yeah, so Python wears many hats.\n\n96\n00:05:18.640 --> 00:05:22.690\nYou can use it as a replacement for\nBash scripting, as I said.\n\n97\n00:05:22.690 --> 00:05:27.990\nWhich interprets kinda line by line and\nthat's typically where most people start.\n\n98\n00:05:27.990 --> 00:05:29.310\nThat's where we're gonna start.\n\n99\n00:05:29.310 --> 00:05:33.740\nBut then you can do object\noriented programming which for\n\n100\n00:05:33.740 --> 00:05:37.018\nthese purposes, I don't know what that is.\n\n101\n00:05:37.018 --> 00:05:39.780\n>> [LAUGH]\n>> Functional programming It has access to\n\n102\n00:05:39.780 --> 00:05:45.090\nall of these programming paradigms but\nit is very well-developed.\n\n103\n00:05:45.090 --> 00:05:48.970\nIt's called a batteries included\nprogramming language because\n\n104\n00:05:48.970 --> 00:05:54.880\nthere are times when I'm like,\nI wonder can I do this.\n\n105\n00:05:54.880 --> 00:05:56.260\nHit the interwebs a little bit and\n\n106\n00:05:56.260 --> 00:05:59.650\nI'm like, hey, that's already\navailable in the standard library.\n\n107\n00:05:59.650 --> 00:06:03.570\nSo very, very broad in it's capabilities.\n\n108\n00:06:03.570 --> 00:06:07.590\n>> So do we have to deal with normal\nthings that you would any other\n\n109\n00:06:07.590 --> 00:06:12.020\nprogramming language obviously anytime\nsomething goes wrong, I do Bash scripting,\n\n110\n00:06:12.020 --> 00:06:15.980\nif something goes wrong, it kinda give\nan error, something will come up, and\n\n111\n00:06:15.980 --> 00:06:16.860\nthen you're gonna go and check.\n\n112\n00:06:16.860 --> 00:06:19.880\nDo we get the same kind of\noutput from Python as well?\n\n113\n00:06:19.880 --> 00:06:21.990\n>> We'll get the same type of output.\n\n114\n00:06:21.990 --> 00:06:26.450\nSince it's not a compiled language,\nwhich means the language is taken and\n\n115\n00:06:26.450 --> 00:06:31.080\ntransmitted to machine\nunderstandable instructions first,\n\n116\n00:06:31.080 --> 00:06:35.320\nbefore it's run,\nPython kind of interprets that as it runs.\n\n117\n00:06:35.320 --> 00:06:38.960\nSo, you'll find that there will be errors\nthat'll happen while a program's running,\n\n118\n00:06:38.960 --> 00:06:41.730\nlike part of your program will run,\nand then it'll just eh!\n\n119\n00:06:41.730 --> 00:06:43.178\nIt'll just error out, and you're like.\n\n120\n00:06:43.178 --> 00:06:46.614\nThat's interesting.\n\n121\n00:06:46.614 --> 00:06:48.640\nSo cuz it's an interpretive language,\n\n122\n00:06:48.640 --> 00:06:52.800\njust like that, it runs like a Bash\nscript, we will have errors.\n\n123\n00:06:52.800 --> 00:06:55.660\nBut it's pretty friendly about\nhow it denotes those errors.\n\n124\n00:06:55.660 --> 00:06:59.650\nAnd we'll be able to see some\nof those I'm sure in due time.\n\n125\n00:06:59.650 --> 00:07:03.550\n>> All right, well I guess now we kind of\nunderstand a little bit of what Python is,\n\n126\n00:07:03.550 --> 00:07:04.930\nhow it kind of works.\n\n127\n00:07:04.930 --> 00:07:08.030\nA good place to go would be to let's\nget this thing set up and running.\n\n128\n00:07:09.130 --> 00:07:11.200\nDoes it run on every platform or\n\n129\n00:07:11.200 --> 00:07:14.950\ndo you have to have a specific type\nof platform to make Python work?\n\n130\n00:07:14.950 --> 00:07:16.040\n>> That's a great question.\n\n131\n00:07:16.040 --> 00:07:21.220\nAs I said, and you know, Linux, Unix\ntype systems, it's typically baked in.\n\n132\n00:07:21.220 --> 00:07:22.829\nEspecially newer distros like.\n\n133\n00:07:23.880 --> 00:07:27.140\nRed Hat, any Red Hat distribution,\nor Ubuntu.\n\n134\n00:07:28.640 --> 00:07:33.850\nAs well as OS X, they come with\na standard Python distribution baked in.\n\n135\n00:07:33.850 --> 00:07:37.930\nAnd actually, Linux comes with two\nversions, and that's where it gets weird.\n\n136\n00:07:37.930 --> 00:07:40.140\nWe have to talk about\nthe two version issue.\n\n137\n00:07:41.520 --> 00:07:44.370\nAnd I'll show you that when\nwe get to the installer.\n\n138\n00:07:44.370 --> 00:07:48.140\nFor Windows, I'm gonna show\nyou where everybody can go and\n\n139\n00:07:48.140 --> 00:07:49.620\ndownload a simple installer.\n\n140\n00:07:49.620 --> 00:07:52.466\nYou're up and\nrunning in a matter of minutes.\n\n141\n00:07:52.466 --> 00:07:55.066\nSo yeah, it's pretty easy to get started.\n\n142\n00:07:55.066 --> 00:07:59.801\nGreat thing about Python cuz I have tried\nsome other languages that I'm like,\n\n143\n00:07:59.801 --> 00:08:01.242\nokay, what am I doing?\n\n144\n00:08:01.242 --> 00:08:04.936\nI gotta set what, I set a path and\nthere's this thing and then,\n\n145\n00:08:04.936 --> 00:08:08.700\nit just keeps screaming at me and\nit's very frustrating.\n\n146\n00:08:08.700 --> 00:08:10.130\n>> All right, well, let's do it.\n\n147\n00:08:10.130 --> 00:08:14.810\nLet's jump into your computer there and\nlet's see the Python environment.\n\n148\n00:08:14.810 --> 00:08:16.550\nHow do we interface with this thing?\n\n149\n00:08:16.550 --> 00:08:17.410\nHow do we get his working?\n\n150\n00:08:17.410 --> 00:08:22.341\nIf I wanted to write a script, where would\nI go to first, or if I don't have Python,\n\n151\n00:08:22.341 --> 00:08:25.453\nhow do I get that installed so\nthat I can make it work?\n\n152\n00:08:25.453 --> 00:08:28.090\n>> All right.\nSo there's a multitude of ways that you\n\n153\n00:08:28.090 --> 00:08:32.673\ncan interface with Python, writing\nPython scripts, running Python scripts.\n\n154\n00:08:32.673 --> 00:08:36.643\nI'm gonna take kind of almost\nlike a systems approach,\n\n155\n00:08:36.643 --> 00:08:41.380\ncuz I use this not only for\nkind of making full blown applications.\n\n156\n00:08:41.380 --> 00:08:46.419\nI also use it to automate some processes,\nwhich makes it very handy.\n\n157\n00:08:46.419 --> 00:08:50.445\nBut before we worry about how to interface\nwith that, let's just take a look,\n\n158\n00:08:50.445 --> 00:08:52.397\nwhat happens if I don't have Python.\n\n159\n00:08:52.397 --> 00:08:56.092\nWell, the Python organization\nhas a wonderful community,\n\n160\n00:08:56.092 --> 00:08:58.561\nthat's one of the best things about it.\n\n161\n00:08:58.561 --> 00:09:03.701\nYou go to python.org, that will actually\ntake you to this handy dandy website,\n\n162\n00:09:03.701 --> 00:09:05.830\nthey have this little nice icon.\n\n163\n00:09:05.830 --> 00:09:11.070\nFun fact, this was designed by\nGuido van Rossum's brother,\n\n164\n00:09:11.070 --> 00:09:12.430\nwho is a graphic designer.\n\n165\n00:09:12.430 --> 00:09:13.920\nInteresting, interesting fact.\n\n166\n00:09:13.920 --> 00:09:15.248\n>> Awesomeness runs in their family,\napparently.\n\n167\n00:09:15.248 --> 00:09:16.536\n>> Yeah, yeah, yeah.\n\n168\n00:09:16.536 --> 00:09:22.133\n>> Guido van Rossum, he worked at Google\nfor a while and now he works at Dropbox,\n\n169\n00:09:22.133 --> 00:09:27.060\nreally, really smart guy,\nstill heading up Python development.\n\n170\n00:09:27.060 --> 00:09:31.707\nBut if you come to the downloads here,\nyou'll see all these releases,\n\n171\n00:09:31.707 --> 00:09:34.584\nsource code, Windows, other platforms.\n\n172\n00:09:34.584 --> 00:09:39.169\nLet's just take a quick look at other\nplatforms, I don't even know what that is.\n\n173\n00:09:39.169 --> 00:09:41.920\nDo you know what-\n>> Yeah, that is IBM mainframe.\n\n174\n00:09:41.920 --> 00:09:45.506\nSo, if you're working in an IBM mainframe\nenvironment, you can install and\n\n175\n00:09:45.506 --> 00:09:48.500\nrun Python, create Python scripts\nthat are gonna help you out.\n\n176\n00:09:48.500 --> 00:09:49.824\nThat's actually pretty\ncool that it does that.\n\n177\n00:09:49.824 --> 00:09:53.790\n>> Yeah.\nBOS, I didn't know that still was around.\n\n178\n00:09:53.790 --> 00:09:57.290\n[LAUGH] I mean, you can see very,\nvery well supported.\n\n179\n00:09:57.290 --> 00:10:00.830\nThese are all interpreters that\nwill run and allow you to run,\n\n180\n00:10:00.830 --> 00:10:03.360\neffectively, the same scripts anywhere.\n\n181\n00:10:03.360 --> 00:10:07.454\nSo very standardized,\ncomes almost like Java, in that sense.\n\n182\n00:10:07.454 --> 00:10:11.170\nWrite once, run anywhere as long as\nthere's an interpreter for that platform.\n\n183\n00:10:11.170 --> 00:10:14.316\n>> Yeah, kinda gives you\na ubiquity to the language.\n\n184\n00:10:14.316 --> 00:10:17.310\nI'm starting to see why people\nare always like, go to Python.\n\n185\n00:10:17.310 --> 00:10:18.980\nPython's a great language to learn.\n\n186\n00:10:18.980 --> 00:10:20.780\nCuz it's stinking everywhere, apparently.\n\n187\n00:10:20.780 --> 00:10:24.780\nIt doesn't matter what you're, I could\nbe on AS/400, I saw Solaris on there,\n\n188\n00:10:24.780 --> 00:10:27.530\nI mean, any platform just about\nthat you're working with,\n\n189\n00:10:27.530 --> 00:10:30.390\nit looks like Python's got a pill for you.\n\n190\n00:10:30.390 --> 00:10:33.400\n>> Yeah, it was,\nit's pretty overwhelming at times.\n\n191\n00:10:33.400 --> 00:10:36.010\nAnd I guess the first\noverwhelming thing that I see,\n\n192\n00:10:36.010 --> 00:10:40.930\nso the website will auto detect\nyour operating system and\n\n193\n00:10:40.930 --> 00:10:44.870\nit'll say,\nyou want to download one of these two.\n\n194\n00:10:44.870 --> 00:10:48.470\nAnd this is what it's a real turn off for\nbeginners.\n\n195\n00:10:48.470 --> 00:10:51.470\nYou're like, which one do I download?\n\n196\n00:10:51.470 --> 00:10:52.820\nWhat's the difference?\n\n197\n00:10:52.820 --> 00:10:58.660\nAnd if you hit the inner webs again, it's\nalmost like a horrible flame war of like,\n\n198\n00:10:58.660 --> 00:11:01.931\nthis should be Python 3, no it's Python 2.\n\n199\n00:11:01.931 --> 00:11:07.652\nAnd honestly, at current time,\nyou can't go wrong with either one.\n\n200\n00:11:07.652 --> 00:11:10.612\nYou just have to keep in\nthe back of your mind\n\n201\n00:11:10.612 --> 00:11:15.406\nthat eventually version 2.7\nwill be phased out around 2020.\n\n202\n00:11:15.406 --> 00:11:20.479\nThe support from the community will\nstop and with the push for three.\n\n203\n00:11:20.479 --> 00:11:23.132\nThree has some improvements.\n\n204\n00:11:23.132 --> 00:11:28.128\nBut the reason two is still around is,\nthere was so much explosive growth in\n\n205\n00:11:28.128 --> 00:11:33.683\nthe Python community for creating\nlibraries, and then, scientific computing,\n\n206\n00:11:33.683 --> 00:11:39.420\nmath, systems programming, deployment,\nweb development and the rest in why not.\n\n207\n00:11:39.420 --> 00:11:43.870\nYou can use Python to write like web\nserver like you wouldn't know, or\n\n208\n00:11:43.870 --> 00:11:45.830\nthings like that.\n\n209\n00:11:45.830 --> 00:11:49.401\nPretty easy to get up and\nrunning, pretty expedient,\n\n210\n00:11:49.401 --> 00:11:52.749\nit's like the Ruby on rails for\nnon-Ruby people.\n\n211\n00:11:52.749 --> 00:11:56.791\nSo, 2.7 was strongly pushed,\nand as a result,\n\n212\n00:11:56.791 --> 00:12:01.119\nthey couldn't really break\naway from version three.\n\n213\n00:12:01.119 --> 00:12:05.836\nSo what the Python organization\ndecided to do is support three and\n\n214\n00:12:05.836 --> 00:12:08.850\ntwo, and focus on development of three.\n\n215\n00:12:08.850 --> 00:12:14.213\nAnd then as those features\ngot well developed in three,\n\n216\n00:12:14.213 --> 00:12:17.417\nthey back ported on this 2.7.\n\n217\n00:12:17.417 --> 00:12:19.650\nSo they're available in two.\n\n218\n00:12:19.650 --> 00:12:23.890\nBut the goal is to,\nany future development should be in three.\n\n219\n00:12:23.890 --> 00:12:26.690\nBut I will tell you from\nmy personal experience,\n\n220\n00:12:26.690 --> 00:12:31.829\nI use some scientific computing libraries,\nwhich are still strongly series two based.\n\n221\n00:12:31.829 --> 00:12:36.728\n>> So, it's still a good idea that if\nyou're new, you can still use 2.7.\n\n222\n00:12:36.728 --> 00:12:39.598\nIf you want to, you can go ahead and\njump into 3, but\n\n223\n00:12:39.598 --> 00:12:43.976\nyou're gonna see some differences in\nthe way they maybe operate and do things,\n\n224\n00:12:43.976 --> 00:12:46.120\ncan be a little bit different.\n\n225\n00:12:46.120 --> 00:12:49.980\nSo, for our purposes in this show,\nwhich version are we gonna use?\n\n226\n00:12:49.980 --> 00:12:55.174\n>> So, I've decided to take a point of\nversion two mainly because a lot of the,\n\n227\n00:12:55.174 --> 00:13:00.367\nif you go looking for information,\ntwo has been around a little bit longer,\n\n228\n00:13:00.367 --> 00:13:04.288\nhas some more help on stack overflow,\nthings like that.\n\n229\n00:13:04.288 --> 00:13:07.888\nBut what we're gonna do is we're\ngonna modify a couple of things so\n\n230\n00:13:07.888 --> 00:13:12.257\nthat your two code will be kind of easier\nto switch over to three in the future, and\n\n231\n00:13:12.257 --> 00:13:14.830\nI'll highlight those as we come to them.\n\n232\n00:13:14.830 --> 00:13:19.134\nThere's not a great\ndeal of differences for\n\n233\n00:13:19.134 --> 00:13:23.561\nthe entry level things,\nbut there are some.\n\n234\n00:13:23.561 --> 00:13:27.525\nSo, if I wanted to get started,\nI would go ahead and\n\n235\n00:13:27.525 --> 00:13:33.904\nclick download Python version 2.7.11\nwhich is the latest stable version.\n\n236\n00:13:33.904 --> 00:13:35.920\nAnd you get this nice\nlittle installer package.\n\n237\n00:13:35.920 --> 00:13:39.390\nOn Mac, I think it's a packaged file.\n\n238\n00:13:39.390 --> 00:13:44.340\nAnd then on Windows, it's on MSI, I think.\n\n239\n00:13:44.340 --> 00:13:47.330\nSo, it's a self installing executable.\n\n240\n00:13:47.330 --> 00:13:50.824\nRun it, click, click, click,\nand it should be up to go.\n\n241\n00:13:50.824 --> 00:13:54.408\n>> Yeah, and I asume, as we said before,\nif you're running some sort of Unix or\n\n242\n00:13:54.408 --> 00:13:57.952\nLinux system, it's probably already\ncooked into this operating system.\n\n243\n00:13:57.952 --> 00:14:01.983\nBut if it's not, if you have a more\nstripped down streamlined version,\n\n244\n00:14:01.983 --> 00:14:06.360\nthis is probably available as a either\nan RPM or a Debian package as well.\n\n245\n00:14:06.360 --> 00:14:09.690\nWell, any of the package management\nsystems are almost guaranteed\n\n246\n00:14:09.690 --> 00:14:13.240\nhave you the ability to go ahead and\nuse those to download, install and\n\n247\n00:14:13.240 --> 00:14:15.480\nget it set up for your environment.\n\n248\n00:14:15.480 --> 00:14:17.360\nNow if not,\nthere is always good old source.\n\n249\n00:14:17.360 --> 00:14:19.500\nSo, if you are running\nthat sort of environment,\n\n250\n00:14:19.500 --> 00:14:23.080\nmaybe you're a source person so\nyou can just use that as available.\n\n251\n00:14:23.080 --> 00:14:28.120\nSo very, very cool and I know that it\ncan be used on just about any platform,\n\n252\n00:14:28.120 --> 00:14:29.610\nnow, how do we interface with it?\n\n253\n00:14:29.610 --> 00:14:32.790\nHow do we start going hello Python,\nlet's do something today?\n\n254\n00:14:32.790 --> 00:14:37.760\n>> That's a great question, we're\ngonna start on terminal, our shell or\n\n255\n00:14:37.760 --> 00:14:42.320\nour terminal emulator to interface\nwith Python, just to see,\n\n256\n00:14:42.320 --> 00:14:43.710\nmake sure it's installed.\n\n257\n00:14:43.710 --> 00:14:48.230\nHow do we move around in this,\nwhat are some things we should expect?\n\n258\n00:14:48.230 --> 00:14:53.090\nAnd then, we'll go ahead and get set up so\nwe can have executable files.\n\n259\n00:14:53.090 --> 00:14:57.480\nCuz once we quit the terminal, the Python\nshell, all of our work goes away.\n\n260\n00:14:57.480 --> 00:14:59.930\nThat sounds like\na horrible way to program.\n\n261\n00:15:01.430 --> 00:15:02.800\nQuick side note, though.\n\n262\n00:15:02.800 --> 00:15:07.290\nI do know that Aptitude and\nYum both support\n\n263\n00:15:07.290 --> 00:15:11.550\npretty up to date versions of Python,\nas well as other Python tools.\n\n264\n00:15:11.550 --> 00:15:18.594\nSo, if you're using Debian or\na Red Hat variant then, you're good to go.\n\n265\n00:15:18.594 --> 00:15:20.890\n>> So, do I have yet install.\n\n266\n00:15:20.890 --> 00:15:23.538\nSo, if we take a look here,\n\n267\n00:15:23.538 --> 00:15:28.854\nI'm gonna switch over to\njust my terminal on Windows.\n\n268\n00:15:28.854 --> 00:15:32.426\nThis would be your command prompt or\nPowerShell.\n\n269\n00:15:32.426 --> 00:15:35.921\nAnd luckily, we're not gonna do anything\nright now that involves you understanding\n\n270\n00:15:35.921 --> 00:15:37.342\nhow to use the terminal.\n\n271\n00:15:37.342 --> 00:15:42.054\nThat's gonna be a little added benefit to\nthis course is, we'll see how these things\n\n272\n00:15:42.054 --> 00:15:45.667\nwork, because that's one of\nthe powerful things about Python.\n\n273\n00:15:45.667 --> 00:15:49.988\nThe things that you do on a terminal,\nas like a system admin or just working\n\n274\n00:15:49.988 --> 00:15:54.956\nthrough those, can be automated as Python\nscripts, just like you would with Bash.\n\n275\n00:15:54.956 --> 00:15:55.529\n>> Excellent.\n\n276\n00:15:55.529 --> 00:15:58.626\n>> So, if you have Python installed.\n\n277\n00:15:58.626 --> 00:16:02.507\nYou can actually python and\nhit Enter, and we're ready to go.\n\n278\n00:16:02.507 --> 00:16:04.433\n[LAUGH] And that's it, so-\n>> It's that simple.\n\n279\n00:16:04.433 --> 00:16:05.478\n>> It's that simple.\n\n280\n00:16:05.478 --> 00:16:06.674\n>> It just works, ladies and gentlemen.\n\n281\n00:16:06.674 --> 00:16:09.632\n[LAUGH]\n>> Yeah, it makes me warm and\n\n282\n00:16:09.632 --> 00:16:13.450\nfuzzy inside, cuz I'm like hey, it worked.\n\n283\n00:16:13.450 --> 00:16:15.899\n>> Yeah, we're all ready starting\nto see the simplicity of it right\n\n284\n00:16:15.899 --> 00:16:16.600\nout of the gate.\n\n285\n00:16:16.600 --> 00:16:20.570\nYou type in python and you're\ndropped into the Python interpreter.\n\n286\n00:16:20.570 --> 00:16:23.265\nNow you can see that the prompt\nhas changed and I see Jason,\n\n287\n00:16:23.265 --> 00:16:24.978\nJason I want to call you Jason so bad.\n\n288\n00:16:24.978 --> 00:16:26.058\n>> [LAUGH] Yeah.\n\n289\n00:16:26.058 --> 00:16:27.864\n>> Justin, he looks like I guy\nI used to know named Jason and\n\n290\n00:16:27.864 --> 00:16:29.761\nI'm probably gonna call him that for\nthe rest of the time.\n\n291\n00:16:29.761 --> 00:16:31.236\n[CROSSTALK] You are now Jason.\n\n292\n00:16:31.236 --> 00:16:33.240\n[LAUGH]\n>> You and all kinds of other people.\n\n293\n00:16:33.240 --> 00:16:33.920\n>> That's exactly it.\n\n294\n00:16:33.920 --> 00:16:35.253\n>> Hey Jason.\n\n295\n00:16:35.253 --> 00:16:37.354\nNot me, not me, not me.\n\n296\n00:16:37.354 --> 00:16:40.560\n>> But he was playing around and\nyou can see it says, Learning Python.\n\n297\n00:16:40.560 --> 00:16:42.590\nThat's his prompt.\n\n298\n00:16:42.590 --> 00:16:45.010\nWhen he typed in Python at that prompt,\nit dropped and\n\n299\n00:16:45.010 --> 00:16:48.310\nyou can see the little,\nthe three greater than signs.\n\n300\n00:16:48.310 --> 00:16:51.950\nLet's you know that you're actually\ninto the Python interface itself.\n\n301\n00:16:51.950 --> 00:16:54.280\nAnd now you can start\nthrowing Python commands or\n\n302\n00:16:54.280 --> 00:16:56.620\nanything else that it will\ninterpret right there.\n\n303\n00:16:56.620 --> 00:17:00.301\n>> Exactly and I know for beginners,\nsometimes if this is the first\n\n304\n00:17:00.301 --> 00:17:04.407\ntime you've been in a terminal\nyou're just like, well that's cool.\n\n305\n00:17:04.407 --> 00:17:09.063\nBut now I want to, I wanna exit.\n\n306\n00:17:09.063 --> 00:17:14.345\nAnd luckily the Python\ninterpreter is pretty forgiving.\n\n307\n00:17:14.345 --> 00:17:15.738\nIf you're like I wanna exit.\n\n308\n00:17:15.738 --> 00:17:20.679\nIt's like, okay you actually need to\nuse exit with parenthesis after it, or\n\n309\n00:17:20.679 --> 00:17:22.436\nyou can hold Ctrl and hit D.\n\n310\n00:17:22.436 --> 00:17:25.039\nSo you know, I know when I started,\nthe first thing I did,\n\n311\n00:17:25.039 --> 00:17:27.764\nI was like I can't get out of this,\nI would just close stuff.\n\n312\n00:17:27.764 --> 00:17:30.475\nAnd it'd give this weird\nerror message about,\n\n313\n00:17:30.475 --> 00:17:33.300\nyou sure you wanna kill this process?\n\n314\n00:17:33.300 --> 00:17:40.774\nI'm like sure, I don't know maybe,\nbut so if I hit CTRL-D, I can get out.\n\n315\n00:17:40.774 --> 00:17:45.770\nIf I go back into Python I can also\ntype exit with parentheses and\n\n316\n00:17:45.770 --> 00:17:47.669\nthat just takes me out.\n\n317\n00:17:47.669 --> 00:17:53.046\nThat kills the Python process and\nwe're good to go.\n\n318\n00:17:53.046 --> 00:17:55.979\n>> Now are they setting\nthat up that way because\n\n319\n00:17:55.979 --> 00:18:00.430\nthe word exit is some sort of program or\na command inside of Python?\n\n320\n00:18:00.430 --> 00:18:03.390\nAnd it's gonna get confused\nif it has more than one?\n\n321\n00:18:03.390 --> 00:18:05.200\n>> Yeah, so you bring up a good point.\n\n322\n00:18:05.200 --> 00:18:09.452\nThat exit with parentheses after\nit is actually an internal Python,\n\n323\n00:18:09.452 --> 00:18:11.224\nwhat's called a function.\n\n324\n00:18:11.224 --> 00:18:16.205\nAnd that executes a system\nprocess kill and kills it.\n\n325\n00:18:16.205 --> 00:18:20.478\nSo yep, you've technically,\ntechnically when you write exit,\n\n326\n00:18:20.478 --> 00:18:22.780\nyou've written Python code, so.\n\n327\n00:18:23.840 --> 00:18:25.306\n>> That's actually kind of cool, right?\n\n328\n00:18:25.306 --> 00:18:26.007\n>> [LAUGH]\n>> Right\n\n329\n00:18:26.007 --> 00:18:28.585\nout of the gate we've already got\nonto Python, written our first code,\n\n330\n00:18:28.585 --> 00:18:31.010\nwhich is just typing the word exit\nwith some parentheses behind it.\n\n331\n00:18:31.010 --> 00:18:35.460\nBut that's cool because it's\nactually calling a Python function.\n\n332\n00:18:35.460 --> 00:18:39.750\nPython is interpreting that and then\nexecuting the command through Python and\n\n333\n00:18:39.750 --> 00:18:43.650\nnot through some other outside entity,\nit's doing it itself.\n\n334\n00:18:43.650 --> 00:18:44.810\nReally kind of cool.\n\n335\n00:18:44.810 --> 00:18:48.230\nNow, obviously this is\na visually based show.\n\n336\n00:18:48.230 --> 00:18:50.410\nWe want people to see cool stuff.\n\n337\n00:18:50.410 --> 00:18:51.624\nCan we write a program, is that cool?\n\n338\n00:18:51.624 --> 00:18:54.806\nOr can we see some basic\nfunctioning of the Python?\n\n339\n00:18:54.806 --> 00:19:00.529\n>> Sure, from the shell kind of how I go\nabout learning some of the new things.\n\n340\n00:19:00.529 --> 00:19:04.215\nLike I don't, the standard library is so\nexpansive, I'm like\n\n341\n00:19:04.215 --> 00:19:08.740\nI wonder how that works, I usually jump\ninto the Shell and try some things out.\n\n342\n00:19:08.740 --> 00:19:12.067\nSo you know we can write\nour first program, and\n\n343\n00:19:12.067 --> 00:19:17.884\nI think it's obligatory as a programming\nshow, that we go with the Hello World.\n\n344\n00:19:17.884 --> 00:19:18.604\n>> Of course.\n\n345\n00:19:18.604 --> 00:19:22.975\n>> But improvise an opportunity\nto bring up a great point about\n\n346\n00:19:22.975 --> 00:19:26.569\nthe difference between Python 2 and\nPython 3.\n\n347\n00:19:26.569 --> 00:19:33.629\nSo if we were to write,\nprint 'Hello World' that\n\n348\n00:19:33.629 --> 00:19:38.682\nactually just, and you're done.\n\n349\n00:19:38.682 --> 00:19:44.699\nI mean it's that simple and if you've\never written, tried to look at C or\n\n350\n00:19:44.699 --> 00:19:49.348\nJava or C++ that is actually\na very involved process.\n\n351\n00:19:49.348 --> 00:19:52.946\nIt kind of makes me flash back\na little bit, I get scared.\n\n352\n00:19:52.946 --> 00:19:55.153\n>> You'll be diving under the desk soon?\n\n353\n00:19:55.153 --> 00:19:57.370\n[LAUGH]\n>> Yeah, I'm like!\n\n354\n00:19:57.370 --> 00:20:01.851\nBut this was,\nI wanted to show this because\n\n355\n00:20:01.851 --> 00:20:06.082\nactually this print space Hello World,\n\n356\n00:20:06.082 --> 00:20:12.090\nthis was a python 2.7 or\nversion 2 paradigm.\n\n357\n00:20:12.090 --> 00:20:17.172\nPrint is not technically,\nit's like a special statement,\n\n358\n00:20:17.172 --> 00:20:22.566\na special word that echoes out,\nprints to the standard output.\n\n359\n00:20:22.566 --> 00:20:23.653\nBut in Python 3,\n\n360\n00:20:23.653 --> 00:20:28.811\nthey ran into problems because this is not\ntechnically a standard Python function.\n\n361\n00:20:28.811 --> 00:20:34.125\nWell, Python 3 requires you to use,\n\n362\n00:20:34.125 --> 00:20:40.330\nwow, parentheses, and that still works.\n\n363\n00:20:40.330 --> 00:20:44.460\nSo, in this show,\neven though we're using the version 2.7,\n\n364\n00:20:44.460 --> 00:20:46.370\nwe're gonna use the Python 3 syntax.\n\n365\n00:20:46.370 --> 00:20:49.610\nCuz it works in 2.7, and it alleviates\n\n366\n00:20:49.610 --> 00:20:53.703\nthe ridiculousness that you have to go\nthrough to port your code over to 3.\n\n367\n00:20:53.703 --> 00:20:57.122\n>> Well that's very forward\nthinking of them to realize that.\n\n368\n00:20:57.122 --> 00:20:59.190\n[LAUGH] Hey, you know what,\nwe're changing things.\n\n369\n00:20:59.190 --> 00:21:02.120\nWe might wanna make it backwards\ncompatible if at all possible, and so\n\n370\n00:21:02.120 --> 00:21:02.830\nthey've done that for us.\n\n371\n00:21:02.830 --> 00:21:03.880\nVery, very cool.\n\n372\n00:21:03.880 --> 00:21:08.290\nNow, another good reason to use it,\nyou've kinda mentioned scientific work for\n\n373\n00:21:08.290 --> 00:21:09.440\nPython use.\n\n374\n00:21:09.440 --> 00:21:13.700\nIs, I guess, typically involves some\nsort of mathematical functions.\n\n375\n00:21:13.700 --> 00:21:17.210\nAnd any programming language worth it's\nsalt is going to be able to do math.\n\n376\n00:21:17.210 --> 00:21:18.900\nCan we do math inside of Python?\n\n377\n00:21:18.900 --> 00:21:23.970\n>> Yeah, if you wanna fire up the shell\nand just do like 3+2 and it's done.\n\n378\n00:21:23.970 --> 00:21:25.773\nI mean it's a basic calculator.\n\n379\n00:21:25.773 --> 00:21:30.115\n3/2, 1, that one's tricky.\n\n380\n00:21:30.115 --> 00:21:31.393\nYou have to watch out there.\n\n381\n00:21:31.393 --> 00:21:33.795\n3 divided by 2,\nwhat would you say that was Daniel?\n\n382\n00:21:33.795 --> 00:21:37.453\n>> 3 divided by 2 would be\n1 with a remainder of 1.\n\n383\n00:21:37.453 --> 00:21:42.026\n>> Yeah 1 remainder 1 or\nif we did decimal number's it'd be 1.5.\n\n384\n00:21:42.026 --> 00:21:46.830\nSomething we have to keep in mind with\nprogramming languages is sometimes numbers\n\n385\n00:21:46.830 --> 00:21:51.093\nbehave weird depending on how they're\nrepresented behind the scenes.\n\n386\n00:21:51.093 --> 00:21:55.220\nAnd I'll definitely point that out\nin kind of when we come to those.\n\n387\n00:21:55.220 --> 00:21:59.506\nBut division is the very first\none that we should know about.\n\n388\n00:21:59.506 --> 00:22:03.872\nWe can also do 3*2, 6.\n\n389\n00:22:03.872 --> 00:22:10.650\nAnd then 3**2, actually this\nprovides us with the power operator.\n\n390\n00:22:10.650 --> 00:22:15.100\nSo, very simplified compared to\nother languages that I've used.\n\n391\n00:22:15.100 --> 00:22:16.800\nYou know, without all these imports.\n\n392\n00:22:16.800 --> 00:22:20.737\nNow, we spent us some time in the shell,\nthe Python shell.\n\n393\n00:22:20.737 --> 00:22:24.755\nBut you know once I CTRL D or exit,\n\n394\n00:22:24.755 --> 00:22:30.943\nif I go back in it's all gone,\nand that's no good.\n\n395\n00:22:30.943 --> 00:22:35.132\n>> Yeah, especially if we want to\nlike create something, test it, and\n\n396\n00:22:35.132 --> 00:22:39.845\nthen if I run it, and I get out of Python,\nI go back in, now all my code is gone.\n\n397\n00:22:39.845 --> 00:22:42.466\nAll the things that I've\ndone there have disappeared,\n\n398\n00:22:42.466 --> 00:22:45.410\nthey've flushed out of the system\n>> I'm gonna have to re-write\n\n399\n00:22:45.410 --> 00:22:49.600\nall of that all over again, and\nthen make my change, and see how it works.\n\n400\n00:22:49.600 --> 00:22:52.740\nThere's gotta be a better\n>> There is, there is,\n\n401\n00:22:52.740 --> 00:22:57.535\nactually the Python distribution,\nyou can download from python.org,\n\n402\n00:22:57.535 --> 00:23:00.487\ncomes with a simple text\neditor called Idle.\n\n403\n00:23:00.487 --> 00:23:03.039\nThat'll allow you to execute and\nmodify those.\n\n404\n00:23:04.370 --> 00:23:06.210\nHowever, any text editor will work.\n\n405\n00:23:06.210 --> 00:23:10.480\nI'm actually going to use Adam because\nit provides some additional tools that\n\n406\n00:23:10.480 --> 00:23:12.817\nare helpful, like syntax highlighting.\n\n407\n00:23:12.817 --> 00:23:17.380\nAnd it's customizable, and\nprogrammers love to customize things.\n\n408\n00:23:17.380 --> 00:23:19.911\nSo that's what we're going to use.\n\n409\n00:23:19.911 --> 00:23:23.091\nI think it's good just to show that one,\n\n410\n00:23:23.091 --> 00:23:26.567\njust in case anybody\nwants to follow along.\n\n411\n00:23:26.567 --> 00:23:32.418\nSo if you come to atom.io,\nthis is actually a GitHub project.\n\n412\n00:23:32.418 --> 00:23:34.751\nIt is a hackable text editor.\n\n413\n00:23:34.751 --> 00:23:40.170\nIt will auto detect your operating system.\n\n414\n00:23:40.170 --> 00:23:43.043\nAnd you can go ahead and download for Mac.\n\n415\n00:23:43.043 --> 00:23:45.740\nI'm not gonna download,\nI already have a downloaded.\n\n416\n00:23:45.740 --> 00:23:48.044\nBut like if you have RedHat,\n\n417\n00:23:48.044 --> 00:23:53.137\nI think there are RPM as well\nas Debbie and packages, Windows.\n\n418\n00:23:53.137 --> 00:23:56.462\nIf you're still using Windows Vista or\nWindows XP,\n\n419\n00:23:56.462 --> 00:23:59.790\nyou're probably gonna have\nto use something else.\n\n420\n00:23:59.790 --> 00:24:02.959\nSublime or Brackets.\n\n421\n00:24:02.959 --> 00:24:04.790\nThere's a plethora of those.\n\n422\n00:24:04.790 --> 00:24:07.960\nBut really, all we need is\nthe Python interpreter installed and\n\n423\n00:24:07.960 --> 00:24:09.190\nsome text editor.\n\n424\n00:24:09.190 --> 00:24:12.152\nIf I really wanted to be adventurous,\nI could use Notepad.\n\n425\n00:24:12.152 --> 00:24:14.196\n[LAUGH]\n>> It will work.\n\n426\n00:24:14.196 --> 00:24:16.330\n>> It will work.\n\n427\n00:24:16.330 --> 00:24:19.630\nSomething that will save plain text, but\n\n428\n00:24:19.630 --> 00:24:24.800\nit's, you'll probably become\nvery frustrated very quickly.\n\n429\n00:24:24.800 --> 00:24:29.180\n>> Yeah, I've recently,\ncuz I'm using a Mac, you're using a Mac,\n\n430\n00:24:29.180 --> 00:24:33.890\nI use Atom as my variety of my show notes\nand things of that nature, it's very nice.\n\n431\n00:24:33.890 --> 00:24:38.570\nBut other than that, I will just jump in\nto the terminal and use Google vi, right?\n\n432\n00:24:38.570 --> 00:24:40.720\nI like vi, I'm a Unix guy.\n\n433\n00:24:40.720 --> 00:24:43.350\nI go back, me and vi are like old friends.\n\n434\n00:24:43.350 --> 00:24:48.180\nBut in Mac, it's a single color,\nit's basically working with Notepad or\n\n435\n00:24:48.180 --> 00:24:52.160\nwhatever at this point in time as\nI'm trying to create a text file.\n\n436\n00:24:52.160 --> 00:24:55.200\nAnd it's great if I'm just writing\nup notes, I don't need that.\n\n437\n00:24:55.200 --> 00:24:58.270\nBut as we get into bash scripter here,\n\n438\n00:24:58.270 --> 00:25:02.890\nwe got a programmer here, those syntax\nhighlighting becomes very, very helpful.\n\n439\n00:25:02.890 --> 00:25:06.200\nSo I had to actually go in and\ntweak the, change my .bashrc and\n\n440\n00:25:06.200 --> 00:25:11.340\nmy bash profile so that I could\nhave some coloration inside of vi.\n\n441\n00:25:11.340 --> 00:25:14.590\nSo if you're using things like vi,\nyou're using nano, all those things and\n\n442\n00:25:14.590 --> 00:25:15.980\nyou're not getting any coloration.\n\n443\n00:25:15.980 --> 00:25:17.250\nOr maybe you're in Windows and\n\n444\n00:25:17.250 --> 00:25:20.480\nyou're working with Notepad, check out\nsome of the other options that you\n\n445\n00:25:20.480 --> 00:25:23.990\nhave because syntax highlighting\nwill help you immensely.\n\n446\n00:25:23.990 --> 00:25:25.320\nLike Justin said,\n\n447\n00:25:25.320 --> 00:25:30.480\nit becomes super frustrating to try to\nfind issues and to work with your code.\n\n448\n00:25:30.480 --> 00:25:35.650\nIt's not as easily seeable as it is\nwhen you have some sort of coloring and\n\n449\n00:25:35.650 --> 00:25:38.570\nsyntax coloring in\nthe actual editor itself.\n\n450\n00:25:38.570 --> 00:25:41.990\nSo check out those but\nworse comes to worse,\n\n451\n00:25:41.990 --> 00:25:46.370\nyou're stuck with a monochrome old amber\nscreen or something of that nature.\n\n452\n00:25:46.370 --> 00:25:49.574\nIt will still work, it will just\nbe a little bit more difficult.\n\n453\n00:25:49.574 --> 00:25:55.121\n>> Right, I use vim as well,\nbut I have a vimrc with a bunch\n\n454\n00:25:55.121 --> 00:26:00.938\nof plugins and\nit's not standard vi or vim, so.\n\n455\n00:26:00.938 --> 00:26:05.260\nYeah, I would say to start off it's better\njust to use a graphical text editor.\n\n456\n00:26:05.260 --> 00:26:10.770\nThere are what are called IDEs for\nPython, like PyCharm, there's one,\n\n457\n00:26:10.770 --> 00:26:15.110\nan extension for Eclipse, which is\nan integrated development environment.\n\n458\n00:26:15.110 --> 00:26:18.060\nAnd what these provide\nare a bunch of tools,\n\n459\n00:26:18.060 --> 00:26:23.570\nlike debuggers that you can attach and\nsee where it will stop for your areas.\n\n460\n00:26:23.570 --> 00:26:26.500\nThey are really handy but what I found\nis when you're first starting to\n\n461\n00:26:26.500 --> 00:26:31.470\nuse a language, you get all of this stuff\nand you're just like, what am I clicking?\n\n462\n00:26:31.470 --> 00:26:32.870\nHow do I actually get this to work?\n\n463\n00:26:32.870 --> 00:26:34.510\nI don't understand.\n\n464\n00:26:35.520 --> 00:26:38.470\nSo I recommend starting with a text\neditor and as you become more\n\n465\n00:26:38.470 --> 00:26:41.310\ncomfortable with the programming,\ngo seek out those other things.\n\n466\n00:26:41.310 --> 00:26:48.270\nWing, PyCharm, Eclipse,\nwhatever you find works best for you.\n\n467\n00:26:48.270 --> 00:26:53.532\nI still typically use vim or Atom,\nit works for me, I like it, it's good.\n\n468\n00:26:53.532 --> 00:26:54.728\n>> I'm in the same boat.\n\n469\n00:26:54.728 --> 00:26:58.570\n>> [COUGH] So let's take a look at,\nif you're using Atom,\n\n470\n00:26:58.570 --> 00:27:02.280\nI'm gonna use some\ncommands that are helpful.\n\n471\n00:27:02.280 --> 00:27:04.050\nIf you type atom.,\n\n472\n00:27:04.050 --> 00:27:06.920\nAtom actually comes with some command\nline tools when you install it.\n\n473\n00:27:06.920 --> 00:27:09.800\nIt will allow you to open folders using\n\n474\n00:27:09.800 --> 00:27:12.260\ncommand line-\n>> Syntax.\n\n475\n00:27:12.260 --> 00:27:13.230\n>> Syntax, yeah.\n\n476\n00:27:13.230 --> 00:27:18.160\nSo if you do atom., you actually get\nall of the folders that you need.\n\n477\n00:27:19.970 --> 00:27:25.420\nSo if I come to this Getting Started\nfolder, there's nothing in there.\n\n478\n00:27:25.420 --> 00:27:30.433\nBut I can right-click or\nCtrl + click on a Mac, and\n\n479\n00:27:30.433 --> 00:27:37.437\njust New File, and then what do we wanna,\nour_first_program.py.\n\n480\n00:27:37.437 --> 00:27:38.211\nAll right,\n\n481\n00:27:38.211 --> 00:27:44.020\nso this is a way to save all of these\nthings we're doing internal for later.\n\n482\n00:27:44.020 --> 00:27:46.700\nSo, we don't have to go, what did I do?\n\n483\n00:27:46.700 --> 00:27:47.742\nHow did I do that again?\n\n484\n00:27:47.742 --> 00:27:51.880\nAll right, I'll have a file that I'll\nhave a bunch of different stuff going on,\n\n485\n00:27:51.880 --> 00:27:55.720\nit's kinda just like my scratch pad,\nso it's very handy.\n\n486\n00:27:56.800 --> 00:27:59.540\nBut we're actually,\n\n487\n00:27:59.540 --> 00:28:04.180\nif you're using Atom or Sublime.py, you'll\nsee in the bottom right hand corner,\n\n488\n00:28:04.180 --> 00:28:07.120\nit's like, hey, this is Python file,\nwe're ready to go.\n\n489\n00:28:07.120 --> 00:28:11.140\nI got syntax highlighting, I think it's\ntime to write our first program, and\n\n490\n00:28:11.140 --> 00:28:11.890\nactually run it.\n\n491\n00:28:11.890 --> 00:28:13.150\n>> I'm down, let's see it happen.\n\n492\n00:28:13.150 --> 00:28:14.319\nLet's see the magic.\n\n493\n00:28:14.319 --> 00:28:18.741\n>> All right, so we started with our\nshell program, just hello world.\n\n494\n00:28:18.741 --> 00:28:23.710\nLet's reproduce that, cuz we know what\nit should do, and get it to run, and\n\n495\n00:28:23.710 --> 00:28:28.382\nI think that'll be up, we'll be ready\nto go for the really good stuff.\n\n496\n00:28:28.382 --> 00:28:29.462\n>> Yeah, or write a passage.\n\n497\n00:28:29.462 --> 00:28:34.080\n>> Yeah, so\nlet's make that a little bigger here.\n\n498\n00:28:34.080 --> 00:28:38.690\nI have some plugins in Atom that actually\nprovides me with some auto-completions.\n\n499\n00:28:38.690 --> 00:28:43.490\nSo if anything you see is valid Python\nhere, like I wonder what that does?\n\n500\n00:28:43.490 --> 00:28:45.550\nDefinitely, go look at those things.\n\n501\n00:28:45.550 --> 00:28:48.526\nWe'll get to a bunch of these but\nnot necessarily all of them.\n\n502\n00:28:48.526 --> 00:28:49.730\n>> Got you.\n\n503\n00:28:49.730 --> 00:28:54.930\n>> And then, Hello World.\n\n504\n00:28:54.930 --> 00:28:57.250\nAnd I save and this is my first Python.\n\n505\n00:28:58.290 --> 00:29:02.560\nSomething different about Python,\nthere's not all of this ceremony,\n\n506\n00:29:02.560 --> 00:29:06.340\nkind of these things you have to\ndo to get a file set up to run.\n\n507\n00:29:06.340 --> 00:29:11.790\nIf it ends in .py, and it has valid\nsyntax, then we're good to go.\n\n508\n00:29:11.790 --> 00:29:12.563\n>> It's gonna run.\n\n509\n00:29:12.563 --> 00:29:14.247\n>> Yeah, or it should.\n\n510\n00:29:14.247 --> 00:29:15.861\n[LAUGH] It should.\n\n511\n00:29:15.861 --> 00:29:23.280\nSo, I actually made that in my\nGetting Started folder, and there it is.\n\n512\n00:29:23.280 --> 00:29:28.130\nSo, from the terminal, and\nthis is how I start to develop,\n\n513\n00:29:28.130 --> 00:29:32.306\nI have this file saved,\nI need to say python\n\n514\n00:29:32.306 --> 00:29:39.470\nour_first_program.py, and it's run.\n\n515\n00:29:39.470 --> 00:29:43.896\nSo we now have a way to create\nprograms for later use, run them, but\n\n516\n00:29:43.896 --> 00:29:47.926\nnot only that, I think of this from a,\nif I was an assistant,\n\n517\n00:29:47.926 --> 00:29:51.031\nhow do I always run Python,\nblah, blah blah.\n\n518\n00:29:51.031 --> 00:29:54.050\nWell, we'll come to that.\n\n519\n00:29:54.050 --> 00:29:56.560\nThere's actually another\nway that we can run these\n\n520\n00:29:56.560 --> 00:29:59.220\neasier to really automate those processes.\n\n521\n00:29:59.220 --> 00:30:01.281\n>> I know cuz that was super difficult,\nright?\n\n522\n00:30:01.281 --> 00:30:02.170\n>> [LAUGH] Yeah.\n\n523\n00:30:02.170 --> 00:30:03.053\n>> That was very, very hard.\n\n524\n00:30:03.053 --> 00:30:04.855\nI'm so glad there's a much\neasier way to make this happen.\n\n525\n00:30:04.855 --> 00:30:05.778\n>> Yeah, yeah.\n\n526\n00:30:05.778 --> 00:30:08.220\n>> [LAUGH]\n>> Programmers are lazy, what can I say?\n\n527\n00:30:09.900 --> 00:30:10.546\n>> The way it is.\n\n528\n00:30:10.546 --> 00:30:11.069\n>> Yep.\n\n529\n00:30:11.069 --> 00:30:12.009\n>> All right, Justin.\n\n530\n00:30:12.009 --> 00:30:14.657\nWell, obviously,\nwe've taken a look at Python,\n\n531\n00:30:14.657 --> 00:30:17.290\nwe've seen what it is and\nkind of how it works.\n\n532\n00:30:17.290 --> 00:30:19.810\nGot a little familiar\nwith using the Python\n\n533\n00:30:19.810 --> 00:30:21.970\ninterface itself inside of a terminal.\n\n534\n00:30:21.970 --> 00:30:27.000\nAlso used a text editor to create\nreproducible scripts that we can run\n\n535\n00:30:27.000 --> 00:30:31.540\nover and over again, make changes to, and\nalways are there, very, very simple stuff.\n\n536\n00:30:31.540 --> 00:30:34.610\nSo we look forward to jumping\ninto a little more complex things\n\n537\n00:30:34.610 --> 00:30:35.460\nhere in the future.\n\n538\n00:30:35.460 --> 00:30:37.445\nBut I'm looking at the clock here,\nwe're running down on time.\n\n539\n00:30:37.445 --> 00:30:40.600\nSo I guess this is a good spot for\nus to close this episode up.\n\n540\n00:30:40.600 --> 00:30:43.710\nThanks so much for joining us today and\nexplaining these things with Python.\n\n541\n00:30:43.710 --> 00:30:45.780\nWe look forward to the upcoming episodes.\n\n542\n00:30:45.780 --> 00:30:46.562\nHopefully you do as well.\n\n543\n00:30:46.562 --> 00:30:50.870\nWe're gonna thank you for\njoining us today, as I swallow.\n\n544\n00:30:50.870 --> 00:30:52.080\n>> Are you okay?\n\n545\n00:30:52.080 --> 00:30:56.190\n>> I'm okay, I'm still of a clamps but\nthat we have to go but\n\n546\n00:30:56.190 --> 00:30:58.300\nhopefully we will see\nyou in the next episode.\n\n547\n00:30:58.300 --> 00:30:59.939\nSigning off for ITProTV.\n\n548\n00:30:59.939 --> 00:31:02.830\nI've been your host, Daniel Lowrie.\n\n549\n00:31:02.830 --> 00:31:03.957\n>> And I'm Justin Dennison.\n\n550\n00:31:03.957 --> 00:31:05.117\n>> We'll see you next time.\n\n551\n00:31:05.117 --> 00:31:14.110\n[SOUND]\n\n",
          "vimeoId": "158181979"
        },
        {
          "description": "In this episode, Daniel and Justin start building your foundational Python vocabulary. They explain Python objects like Variables and Values (which are stored in variables) as well as logical operators/operands. They also cover what to do when things go awry and you have to \"debug\" your code, and how to keep your code descriptive by employing comments.",
          "length": "2492",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-2-using_python_for_simple_tasks-030516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-2-using_python_for_simple_tasks-030516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-2-using_python_for_simple_tasks-030516-1-sm.jpg",
          "title": "Using Python for Simple Tasks",
          "transcript": "WEBVTT\n\n1\n00:00:00.150 --> 00:00:07.847\n[MUSIC]\n\n2\n00:00:07.847 --> 00:00:12.280\nAll right, greetings everyone and welcome\nto another exciting episode of IT Pro TV.\n\n3\n00:00:12.280 --> 00:00:14.170\nI'm your I'm your host Daniel Lowrie and\n\n4\n00:00:14.170 --> 00:00:17.850\nin today's episode we are continuing\non with our Python programming series.\n\n5\n00:00:17.850 --> 00:00:20.680\nJoining us back in the studio\ntoday is our good friend and\n\n6\n00:00:20.680 --> 00:00:22.425\nmentor in all that is Python.\n\n7\n00:00:22.425 --> 00:00:23.710\nMr. Justin Dennison.\n\n8\n00:00:23.710 --> 00:00:25.220\nWell Justin welcome back to the show, sir.\n\n9\n00:00:25.220 --> 00:00:26.090\nHow are you doing today?\n\n10\n00:00:26.090 --> 00:00:27.820\n>> I'm doing great Daniel.\n\n11\n00:00:27.820 --> 00:00:32.500\nWe started with Python the last episode\nbut we really need to dig deep.\n\n12\n00:00:32.500 --> 00:00:37.510\nStart seeing some more of those intricate\nways that we can be more powerful.\n\n13\n00:00:37.510 --> 00:00:42.270\nSo that's what we're gonna do today,\nbut that power comes incrementally.\n\n14\n00:00:42.270 --> 00:00:45.770\nWe're more or less laying the foundation,\ndigging the footers,\n\n15\n00:00:45.770 --> 00:00:50.710\nlaying the pipes, pouring the foundation\nso we can write more meaningful\n\n16\n00:00:52.100 --> 00:00:54.300\ncomplex Python programs so.\n\n17\n00:00:55.440 --> 00:00:57.230\nYeah.\n>> Well, we're looking forward to seeing\n\n18\n00:00:57.230 --> 00:01:00.800\nthat in this episode, we've got some great\nstuff lined up for you, and you're right.\n\n19\n00:01:00.800 --> 00:01:02.820\nWe are trying to lay that foundation.\n\n20\n00:01:02.820 --> 00:01:05.440\nWe can't just throw you in the deep\nend and see if you can swim.\n\n21\n00:01:05.440 --> 00:01:08.150\nThat's not the best model for\nyou guys to learn out there.\n\n22\n00:01:08.150 --> 00:01:11.350\nSo, we did take a look at writing\nvery very simple programs.\n\n23\n00:01:11.350 --> 00:01:14.750\nBasically, doing some simple math and some\n\n24\n00:01:14.750 --> 00:01:19.560\nprinting to the standard output of your\nterminal or whatever it is your using.\n\n25\n00:01:19.560 --> 00:01:20.740\nNow we need to dig a little deeper.\n\n26\n00:01:20.740 --> 00:01:22.150\nWe're going to see a little\nmore of the power and\n\n27\n00:01:22.150 --> 00:01:24.160\nwe're going to start with variables.\n\n28\n00:01:24.160 --> 00:01:26.920\nAnd if you've ever worked with any\nkind of program before you've probably\n\n29\n00:01:26.920 --> 00:01:27.520\nheard that term.\n\n30\n00:01:27.520 --> 00:01:29.960\nIf you haven't it's okay because Justin,\n\n31\n00:01:29.960 --> 00:01:34.010\nyou're going to explain exactly what\na variable is and how we use them.\n\n32\n00:01:34.010 --> 00:01:38.662\n>> Yeah so variables allow us to,\nmore or less we get to store away,\n\n33\n00:01:38.662 --> 00:01:43.100\nnumbers, text.\n\n34\n00:01:43.100 --> 00:01:46.410\nWe gotta store those away later and\nit's very cumbersome to type that over and\n\n35\n00:01:46.410 --> 00:01:47.220\nover and over again.\n\n36\n00:01:47.220 --> 00:01:49.500\nYou can very well do that.\n\n37\n00:01:49.500 --> 00:01:51.740\nIt's not a good practice and\n\n38\n00:01:51.740 --> 00:01:55.810\nit will make your programming\nexperience more than frustrating.\n\n39\n00:01:55.810 --> 00:01:58.950\nSo I like to think of a variable as,\nwhen I create a variable,\n\n40\n00:01:58.950 --> 00:02:03.840\nI'm getting a cup out of the cupboard and\nI'm putting something in it for later.\n\n41\n00:02:03.840 --> 00:02:08.190\nThen yeah I know this cup it's labeled\nit's mine I know what's in it and so\n\n42\n00:02:08.190 --> 00:02:13.790\nwhen I need to come back and grab whatever\nit is you know whether it's quarters or\n\n43\n00:02:13.790 --> 00:02:18.990\npennies or you know Cheetos whatever it\nmay be then I'm like they're in that cup.\n\n44\n00:02:18.990 --> 00:02:22.880\nI know where to get them and\nwe're good to go.\n\n45\n00:02:22.880 --> 00:02:25.820\nSo something we have to\nworry about variables.\n\n46\n00:02:25.820 --> 00:02:30.360\nPython allows us to the fine\nvariables very easily\n\n47\n00:02:30.360 --> 00:02:34.810\nexcept there's some behind the scene\nstuff that can make our life hard.\n\n48\n00:02:34.810 --> 00:02:36.210\nThere's these things called pipes.\n\n49\n00:02:36.210 --> 00:02:38.430\nSo a number is different than text.\n\n50\n00:02:39.920 --> 00:02:44.470\nOr there's other special types, and we'll\nget more into that later as we see down\n\n51\n00:02:44.470 --> 00:02:49.470\nthe line, but Python will allow\nus to change those at our whim.\n\n52\n00:02:50.910 --> 00:02:55.952\nThis is very unlike some other\nlanguages such as Java, C, C++,\n\n53\n00:02:55.952 --> 00:03:00.100\nso we have to be careful,\nit can make your life hard and\n\n54\n00:03:00.100 --> 00:03:05.380\nwe just, what's important there is\nusing important naming conventions.\n\n55\n00:03:05.380 --> 00:03:09.080\nCreating variable names that\nare meaningful to us so\n\n56\n00:03:09.080 --> 00:03:12.490\nwe don't have to think about what\ndoes that variable represent again?\n\n57\n00:03:12.490 --> 00:03:17.320\nAnd how is that represented\nby the Python interpreter?\n\n58\n00:03:17.320 --> 00:03:19.850\nAnd what does that mean I can do with it?\n\n59\n00:03:19.850 --> 00:03:21.820\nThose type of things.\n\n60\n00:03:21.820 --> 00:03:24.080\n>> So, Justin when we have a variable so\n\n61\n00:03:24.080 --> 00:03:29.480\nwe define some variables inside our Python\nprogram, that little bit we're creating.\n\n62\n00:03:29.480 --> 00:03:31.060\nWhat would use them for typically?\n\n63\n00:03:31.060 --> 00:03:34.360\nYou said that they're a container,\nthey basically hold things, but\n\n64\n00:03:34.360 --> 00:03:36.439\nwhat typically are the kind of\nthings that they end up holding.\n\n65\n00:03:37.700 --> 00:03:42.380\n>> So in Python, we start very much\nwith numbers which can be integers,\n\n66\n00:03:42.380 --> 00:03:45.820\nwhich are whole numbers only,\npositive or negative, or\n\n67\n00:03:45.820 --> 00:03:49.610\nfloating point numbers which have\na decimal attached with them.\n\n68\n00:03:49.610 --> 00:03:52.940\nWe can also have these things called\nstrings which are their own entity and\n\n69\n00:03:52.940 --> 00:03:54.440\nhave all these things that\nyou can do with them,\n\n70\n00:03:54.440 --> 00:03:58.490\nbut you can just think of them as text,\ntext between two quotes.\n\n71\n00:03:58.490 --> 00:04:02.630\nAnd we'll see those in the future\nwhat we can do with those things.\n\n72\n00:04:02.630 --> 00:04:05.610\nAs well as list of things and\n\n73\n00:04:05.610 --> 00:04:11.490\nsome weird other data types\nlike dictionaries and tuples.\n\n74\n00:04:11.490 --> 00:04:13.410\nAnd I just said a bunch of word and\nthe people are like,\n\n75\n00:04:13.410 --> 00:04:14.880\nI don't know what you're saying.\n\n76\n00:04:14.880 --> 00:04:16.080\nIt's kind of scared me.\n\n77\n00:04:16.080 --> 00:04:17.150\n>> It's kinda scary.\n\n78\n00:04:17.150 --> 00:04:19.090\nAnyway we'll definitely to that guys.\n\n79\n00:04:19.090 --> 00:04:22.180\nWe won't leave you out in the weeds for\ntoo long with that stuff.\n\n80\n00:04:22.180 --> 00:04:25.430\nWell basically what I'm hearing you say\nJustin is that a variable, like you said,\n\n81\n00:04:25.430 --> 00:04:27.760\nis a box or\nit's some sort of container, and\n\n82\n00:04:27.760 --> 00:04:30.750\ninside of it is going to\nbe some type of a value.\n\n83\n00:04:30.750 --> 00:04:33.680\nThe user is gonna be a string, maybe\na number, maybe a floating point number.\n\n84\n00:04:33.680 --> 00:04:35.460\nPlenty of types of values.\n\n85\n00:04:35.460 --> 00:04:39.030\nThe cool about a variable is it will hold\n\n86\n00:04:39.030 --> 00:04:43.110\nany type of value that we have available\nto us and once you put that in the box,\n\n87\n00:04:43.110 --> 00:04:46.320\nnow I can easily reference that\nlater on throughout my script.\n\n88\n00:04:46.320 --> 00:04:47.870\nBecause otherwise, if I had a long,\n\n89\n00:04:47.870 --> 00:04:50.660\nbecause I've done this,\ndon't do this people.\n\n90\n00:04:50.660 --> 00:04:54.970\nDon't create a long string or\nmaybe a long path name,\n\n91\n00:04:54.970 --> 00:04:58.550\nthat is a very good place where\nyou'll see variables used.\n\n92\n00:04:58.550 --> 00:05:00.420\nI have a super long path name.\n\n93\n00:05:00.420 --> 00:05:04.060\nWell I can continue to use that\npath name throughout my code, and\n\n94\n00:05:04.060 --> 00:05:08.160\nI will have finger cramps for typing\nit out, over and over and over again.\n\n95\n00:05:08.160 --> 00:05:11.100\nAnd what else happens, is I'm most\nlikely gonna make a typing mistake.\n\n96\n00:05:11.100 --> 00:05:14.770\nI'm gonna have some sort of syntax\nerror because I'm typing out this\n\n97\n00:05:14.770 --> 00:05:18.980\nlong string of stuff and the more I do it,\nthe more likely this to happen.\n\n98\n00:05:18.980 --> 00:05:20.560\nSo, I'll use a very, this is what I do.\n\n99\n00:05:20.560 --> 00:05:22.600\nThis is typically like user.\n\n100\n00:05:22.600 --> 00:05:25.700\nI'll create a variable for\nthat long string, or for\n\n101\n00:05:25.700 --> 00:05:29.750\nthat long path name so\nthat I can reference that variable and so\n\n102\n00:05:29.750 --> 00:05:32.650\nthat path name in whole lot less\nlikely to make a syntax error.\n\n103\n00:05:32.650 --> 00:05:34.310\nAnd to whole lot easier to use.\n\n104\n00:05:34.310 --> 00:05:35.800\nMakes my code easier to read as well.\n\n105\n00:05:37.000 --> 00:05:40.900\n>> Yeah, readability is very important and\nit's funny that you bring up the pathname,\n\n106\n00:05:40.900 --> 00:05:44.260\nbecause during my day to\nday programming experience,\n\n107\n00:05:44.260 --> 00:05:45.690\nI have those all over the place.\n\n108\n00:05:45.690 --> 00:05:50.367\nI'm like, okay, this is my documents,\nbut instead of typing out home/my\n\n109\n00:05:50.367 --> 00:05:55.970\nuser name/documents, all these things\nI'll just put that in a variable at\n\n110\n00:05:55.970 --> 00:05:58.730\nthe very top of my script, and\nit's always available to me.\n\n111\n00:05:58.730 --> 00:06:04.440\nAnd I'll say, like documents equals,\nbut I think it's good to actually see\n\n112\n00:06:04.440 --> 00:06:08.690\nhow we go about defining variables, and\ntalk about some appropriate conventions\n\n113\n00:06:08.690 --> 00:06:12.400\nthat will make our lives easier,\nas well as your lives easier as well.\n\n114\n00:06:13.450 --> 00:06:16.050\nSo let's go ahead and take a look here.\n\n115\n00:06:16.050 --> 00:06:18.660\nSo I'm in a folder,\nI've just called it variables, just so\n\n116\n00:06:18.660 --> 00:06:20.280\nwe can, what are we doing?\n\n117\n00:06:20.280 --> 00:06:21.550\nI think that's a good cue.\n\n118\n00:06:21.550 --> 00:06:23.730\nI'm just gonna open the interpreter.\n\n119\n00:06:23.730 --> 00:06:28.330\nI always like to start in the Python\nInterpreter, just quick prototyping type\n\n120\n00:06:28.330 --> 00:06:32.330\nthings, because it allows me\nto get immediate feedback.\n\n121\n00:06:32.330 --> 00:06:36.190\nIf I do something wrong, it's gonna\ntell me that was wrong immediately.\n\n122\n00:06:36.190 --> 00:06:41.190\nInstead of writing this giant program or\nscript or\n\n123\n00:06:41.190 --> 00:06:45.740\nwhatever it may be and having it break and\nme just start searching for bugs and\n\n124\n00:06:45.740 --> 00:06:47.370\nerrors and things like that.\n\n125\n00:06:47.370 --> 00:06:52.260\nSo, how does Python ask\nus to declare variables?\n\n126\n00:06:52.260 --> 00:06:57.380\nWell, in other languages, we have keywords\nlike var, or you have to talk about types.\n\n127\n00:06:57.380 --> 00:06:59.930\nFirst, but in Python,\nwe don't have to do that.\n\n128\n00:06:59.930 --> 00:07:01.930\nI can easily say x equals 1.\n\n129\n00:07:01.930 --> 00:07:05.270\nAnd I've defined my first variable.\n\n130\n00:07:05.270 --> 00:07:06.400\nThat's incredibly powerful.\n\n131\n00:07:07.680 --> 00:07:14.382\nBut there's some things behind the scenes\nthat we have take into account.\n\n132\n00:07:14.382 --> 00:07:19.200\nFirst, x is now associated\nwith a number type.\n\n133\n00:07:19.200 --> 00:07:24.280\nSo I actually have access to, just\nlike the exit command, was a function,\n\n134\n00:07:24.280 --> 00:07:28.695\nI have access to this command called type,\nand type.\n\n135\n00:07:28.695 --> 00:07:32.160\nIf I do type, and I read this,\nwhat is the type of x?\n\n136\n00:07:32.160 --> 00:07:38.050\nAnd I type it, it'll say int, and then,\nokay I need to treat that like a number.\n\n137\n00:07:38.050 --> 00:07:41.320\nBecause numbers behave differently,\nthan like a bunch of text.\n\n138\n00:07:42.420 --> 00:07:48.996\nBut any time I type x,\nI get the value of 1,\n\n139\n00:07:48.996 --> 00:07:55.098\nand I can say x plus 1, and it gives me 2,\nbut notice x has not changed.\n\n140\n00:07:55.098 --> 00:07:57.669\nBut I can change variables,\n\n141\n00:07:57.669 --> 00:08:02.818\nI can now say x equals You know\nlike crowbar or something.\n\n142\n00:08:02.818 --> 00:08:07.229\nSo, if i type x,\nit is now the string crowbar which again,\n\n143\n00:08:07.229 --> 00:08:10.300\nis just a series of letters and numbers.\n\n144\n00:08:10.300 --> 00:08:12.800\nAnd now, if I use type, that'll say,\nhey, that's of type string.\n\n145\n00:08:12.800 --> 00:08:17.430\nSo that's something that we have to keep\nin mind because that will lead to some\n\n146\n00:08:17.430 --> 00:08:22.916\nweird behavior that's\nhard to reason about.\n\n147\n00:08:22.916 --> 00:08:28.380\nNow I'll say Daniel you saw me\ntype x as the variable name,\n\n148\n00:08:28.380 --> 00:08:33.660\nthat is a horrible, horrible variable\nname, x I wonder what that represents.\n\n149\n00:08:33.660 --> 00:08:37.800\nBut if I wanted something\nlike my favorite tool\n\n150\n00:08:37.800 --> 00:08:41.490\nthe standard convention is to use\nsomething called snake casing.\n\n151\n00:08:41.490 --> 00:08:42.830\nAnd you will see this in Python.\n\n152\n00:08:42.830 --> 00:08:47.200\nYou actually saw me name my\nlast script using snake casing.\n\n153\n00:08:47.200 --> 00:08:49.880\nThat means all lower case letters.\n\n154\n00:08:49.880 --> 00:08:52.950\nAny compound words\nare separated by underscores.\n\n155\n00:08:53.970 --> 00:08:57.530\nAnd that's it you can't have special\ncharacters like apostrophes.\n\n156\n00:08:57.530 --> 00:08:58.529\nYou can have numbers.\n\n157\n00:08:59.590 --> 00:09:04.410\nCan't start with a number, but you can't\nhave exclamation points, apostrophes,\n\n158\n00:09:04.410 --> 00:09:09.470\nthings like that, cuz those actually have\nother meaning in the Python language.\n\n159\n00:09:09.470 --> 00:09:15.430\nSo if I say my_favorite_fruit\n\n160\n00:09:15.430 --> 00:09:20.505\n= 'banana' then I can say\n\n161\n00:09:20.505 --> 00:09:25.160\nmy_favorite_fruit.\n\n162\n00:09:25.160 --> 00:09:29.700\nAnd now that's actually a single variable,\nthat's a very descriptive variable.\n\n163\n00:09:29.700 --> 00:09:33.690\nYou know, I don't have to think\nabout what's stored in it.\n\n164\n00:09:33.690 --> 00:09:38.680\nIf I use them appropriately now if I\nsaid my_favorite_fruit equals seven,\n\n165\n00:09:38.680 --> 00:09:43.810\nthen that is more than the problem\nwe should follow these conventions,\n\n166\n00:09:43.810 --> 00:09:45.640\nthey just make our lives easier.\n\n167\n00:09:45.640 --> 00:09:48.910\n>> Yeah, we were talking about conventions\nand standards before the show, and\n\n168\n00:09:48.910 --> 00:09:52.890\nit just makes sense that if\nyou're working on a program and\n\n169\n00:09:52.890 --> 00:09:55.430\nyou want other people to be\nable to help you with that,\n\n170\n00:09:55.430 --> 00:09:58.810\nthen using standard conventions\nis going to help them help you.\n\n171\n00:09:58.810 --> 00:10:02.860\nOr if you're working with a team\nof developers one day and\n\n172\n00:10:02.860 --> 00:10:07.510\nyou create a block of code that you\nhave always done it that way, and\n\n173\n00:10:07.510 --> 00:10:10.100\nit kinda deviates from how\neverybody else does it.\n\n174\n00:10:10.100 --> 00:10:12.410\nThink about how difficult\nthat is going to be for\n\n175\n00:10:12.410 --> 00:10:15.760\nthem to be able to look at what you've\ndone, interpret what's going on, and\n\n176\n00:10:15.760 --> 00:10:19.870\nhelp maybe either find errors,\nor increase efficiency.\n\n177\n00:10:19.870 --> 00:10:24.170\nSo using standardization, using\nconventions is going to be a big help\n\n178\n00:10:24.170 --> 00:10:27.430\nthat doesn't mean that you never\ndeviate from standards of convention.\n\n179\n00:10:27.430 --> 00:10:30.880\nYou can always create a new standard or\ncreate a new convention, but for\n\n180\n00:10:30.880 --> 00:10:33.950\nthe most part, especially when\nworking with other people, Justin and\n\n181\n00:10:33.950 --> 00:10:38.140\nI both came to the agreement of it is\nthe better policy to use those standards,\n\n182\n00:10:38.140 --> 00:10:39.270\nuse those conventions.\n\n183\n00:10:39.270 --> 00:10:44.050\nSo for looking down the road, we're trying\nto be forward looking in our programming,\n\n184\n00:10:44.050 --> 00:10:46.930\nso that other people could take\na look at it and help us out with it.\n\n185\n00:10:46.930 --> 00:10:50.590\nWell now that we can define a variable,\nJustin, what do we do next?\n\n186\n00:10:50.590 --> 00:10:55.980\n>> Well I think it's very important\nbecause Python has some weird nuances.\n\n187\n00:10:55.980 --> 00:10:57.740\nLike white space is important.\n\n188\n00:10:57.740 --> 00:11:02.920\nSo not having a space before a variable\nname versus having a space can actually\n\n189\n00:11:02.920 --> 00:11:04.460\nbreak all kinds of things.\n\n190\n00:11:04.460 --> 00:11:08.630\nAs well as,\nif we don't take into account those types.\n\n191\n00:11:08.630 --> 00:11:10.950\nIs it a string, which is characters.\n\n192\n00:11:10.950 --> 00:11:12.770\nIs it a number, a floating point number.\n\n193\n00:11:12.770 --> 00:11:15.100\nThen we'll get unexpected behavior.\n\n194\n00:11:15.100 --> 00:11:18.520\nSo I think it's important to look at\nthe interpreter and to see some of these\n\n195\n00:11:18.520 --> 00:11:24.060\ncommon errors that'll crop up, just so\nyou know, hey, I've seen this before.\n\n196\n00:11:24.060 --> 00:11:29.640\nI know what to do about this and then\nwe'll jump into using variables with some\n\n197\n00:11:29.640 --> 00:11:32.410\nnumbers and strings and\nto see some basic things.\n\n198\n00:11:33.440 --> 00:11:38.560\nWhen I'm typing my_favorite_fruit and\nI wanna go back to one letter\n\n199\n00:11:38.560 --> 00:11:45.090\nvariable names just to demonstrate these,\nso, our lunching type ridiculousness.\n\n200\n00:11:45.090 --> 00:11:47.960\nBut let's say I wanted\ny to be equal to 10,\n\n201\n00:11:47.960 --> 00:11:53.510\nexcept unknowst to me I accidentally\nhit a space, and say y equals 10.\n\n202\n00:11:53.510 --> 00:11:57.895\nAnd I get this weird error,\nIndentationError.\n\n203\n00:11:59.020 --> 00:12:01.440\nNow, in Python, the standard is,\n\n204\n00:12:01.440 --> 00:12:06.070\nyou use four spaces to properly indent,\nand we'll see how indentation comes up.\n\n205\n00:12:06.070 --> 00:12:08.920\nIn these first programs,\nwe're not gonna have to worry about that.\n\n206\n00:12:08.920 --> 00:12:11.290\nThey're all gonna be\nlined up along the left.\n\n207\n00:12:11.290 --> 00:12:14.950\nBut if I accidentally hit a space\nwhere I'm not supposed to,\n\n208\n00:12:14.950 --> 00:12:18.860\nas soon as I start executing my script,\nit's gonna break.\n\n209\n00:12:18.860 --> 00:12:21.580\nAnd that can be very problematic.\n\n210\n00:12:21.580 --> 00:12:27.835\nIn addition to now, okay, y equals 10,\nokay, Y is now equal to 10.\n\n211\n00:12:29.080 --> 00:12:34.363\nBut if I had y plus my_favorite_fruit,\nand I was like,\n\n212\n00:12:34.363 --> 00:12:40.190\nyeah, I've stored the number\n7 in my_favorite_fruit and y.\n\n213\n00:12:41.490 --> 00:12:43.965\nThen I can get another error which says,\n\n214\n00:12:43.965 --> 00:12:48.630\nhey you can't put these two things\ntogether in the form that they're in.\n\n215\n00:12:48.630 --> 00:12:56.350\nLike plus isn't meaningful with 1 plus the\nword the or the word banana in this case.\n\n216\n00:12:56.350 --> 00:12:59.220\nSo we need to keep that\nwith those two errors,\n\n217\n00:12:59.220 --> 00:13:02.200\nthose are probably the first two\nerrors that people will run into.\n\n218\n00:13:03.410 --> 00:13:07.810\n>> Very cool, and it's nice that Python\nhas those helps built in to say hey,\n\n219\n00:13:07.810 --> 00:13:08.580\nyou know what?\n\n220\n00:13:08.580 --> 00:13:11.740\nYou made a little bit of a syntax error\nthere, you might go back, check that.\n\n221\n00:13:11.740 --> 00:13:12.940\nSee where the problem is,\n\n222\n00:13:12.940 --> 00:13:16.880\nI'm gonna help you out into figuring out\nwhat exactly the problem actually was.\n\n223\n00:13:16.880 --> 00:13:21.870\nIn this case it was IndentionError or\nyou're trying to do a mathematical\n\n224\n00:13:21.870 --> 00:13:24.660\ncomputation on things\nthat aren't mathematical.\n\n225\n00:13:24.660 --> 00:13:25.520\nWords aren't math,\n\n226\n00:13:25.520 --> 00:13:29.770\nright, they're just symbols that\nmean objects out in the real world.\n\n227\n00:13:29.770 --> 00:13:35.320\nWhereas a five has some sort of\nextraneous meaning as a number.\n\n228\n00:13:35.320 --> 00:13:36.280\nIt means that.\n\n229\n00:13:36.280 --> 00:13:37.600\nSo you can't put those\ntwo things together.\n\n230\n00:13:37.600 --> 00:13:40.100\nPython says hey,\nlet me help you out with that.\n\n231\n00:13:40.100 --> 00:13:42.370\nYou can't add banana and 10 together.\n\n232\n00:13:42.370 --> 00:13:43.100\nIt just doesn't work.\n\n233\n00:13:43.100 --> 00:13:46.350\nYou can go back, look at your code and\ngo, what did I do here.\n\n234\n00:13:46.350 --> 00:13:48.750\nUse these two variables.\n\n235\n00:13:48.750 --> 00:13:51.250\nAnd maybe that's where the problem is,\nmay be go back and\n\n236\n00:13:51.250 --> 00:13:53.755\nuse your type command to figure out hey,\nlook at that.\n\n237\n00:13:53.755 --> 00:13:58.000\nmy_favorite_fruit is not an integer type,\nit is a string called banana.\n\n238\n00:13:58.000 --> 00:14:01.670\nLet me go ahead and make that change to\nmake it seven, and now I should be able to\n\n239\n00:14:01.670 --> 00:14:04.330\nrun my mathematical computation,\neverything should work fine.\n\n240\n00:14:04.330 --> 00:14:07.950\nAll right, so what else can we do now that\nwe understand how the errors can help us?\n\n241\n00:14:07.950 --> 00:14:11.780\n>> Well, I think it's good to\nsee basic usage of variables but\n\n242\n00:14:11.780 --> 00:14:13.980\nas an executable Python program.\n\n243\n00:14:13.980 --> 00:14:19.590\nAnd you know we did a little\nbit of that last show.\n\n244\n00:14:19.590 --> 00:14:23.800\nBut if we want to do systems admin or\njust automate some processes.\n\n245\n00:14:23.800 --> 00:14:28.130\nThere's a little bit more we need to do\njust to make our lives a little easier.\n\n246\n00:14:28.130 --> 00:14:30.381\nSo, I think it's good to\ntake a quick assign and\n\n247\n00:14:30.381 --> 00:14:33.060\nthen we'll jump back right\nback into variables.\n\n248\n00:14:33.060 --> 00:14:36.020\nSo, I'm actually in this\nfolder called variables and\n\n249\n00:14:36.020 --> 00:14:41.310\nI'm just gonna make\na file called variables.\n\n250\n00:14:41.310 --> 00:14:45.830\nIf you're in a Linux or Unix distribution\nthen this touch command just\n\n251\n00:14:45.830 --> 00:14:49.373\nmakes this file for you so, and\nI'm gonna open it up in Atom.\n\n252\n00:14:49.373 --> 00:14:58.390\nNow, if we take a look at this file,\nnothing in it, right?\n\n253\n00:14:58.390 --> 00:15:04.750\nAnd let's just start with something\nlike x equals 10, y equals 13 And\n\n254\n00:15:04.750 --> 00:15:09.550\nthen print x+y.\n\n255\n00:15:09.550 --> 00:15:15.670\nSo I can do that, Sorry about that.\n\n256\n00:15:15.670 --> 00:15:18.140\n>> Clearly that was an administrative\nlevel function that we're talking about.\n\n257\n00:15:18.140 --> 00:15:21.720\n>> Yeah, yeah that is not the print\nfunction that was going on there.\n\n258\n00:15:21.720 --> 00:15:26.050\nThere were some updates that apparently\nI thought I had run and didn't run,\n\n259\n00:15:26.050 --> 00:15:27.840\nso there.\n\n260\n00:15:27.840 --> 00:15:29.750\nGotta be careful about those things.\n\n261\n00:15:29.750 --> 00:15:33.250\nSo if I print here,\nthen what's gonna happen?\n\n262\n00:15:33.250 --> 00:15:37.540\nWell if we switch back to our terminal,\nwe can see it there.\n\n263\n00:15:37.540 --> 00:15:39.033\nAnd I said last time.\n\n264\n00:15:41.531 --> 00:15:44.750\nI can just and there we go.\n\n265\n00:15:44.750 --> 00:15:49.178\nExcept has real color center type that\nPython thing over and over again.\n\n266\n00:15:49.178 --> 00:15:53.961\nIn addition to if I wanna automate some\nthings, typing that over and over, and\n\n267\n00:15:53.961 --> 00:15:58.888\nover again that becomes probably like how\ndo I get things to automate when I have to\n\n268\n00:15:58.888 --> 00:15:59.768\ntype Python.\n\n269\n00:15:59.768 --> 00:16:04.520\nWell it's actually pretty easy,\nagain on Linux Unix distributions.\n\n270\n00:16:04.520 --> 00:16:09.960\nIf I just which type which Python I'll get\nwhat Python is my current interpreter.\n\n271\n00:16:09.960 --> 00:16:12.900\nSo I need to take note of this.\n\n272\n00:16:12.900 --> 00:16:16.042\nSo this user local bin python.\n\n273\n00:16:16.042 --> 00:16:20.190\nSometimes there's interpreters\nalso in the user bin\n\n274\n00:16:21.380 --> 00:16:24.970\nenvironment folder, or ENV folder.\n\n275\n00:16:25.980 --> 00:16:30.890\nBut if we come back we can make\na quick little change to our script,\n\n276\n00:16:30.890 --> 00:16:34.230\nour Python file, and\nwe're gonna add a shebang.\n\n277\n00:16:34.230 --> 00:16:36.570\nNow are you familiar with shebangs?\n\n278\n00:16:36.570 --> 00:16:39.720\n>> I have walked the shebang\nline quite a few times.\n\n279\n00:16:39.720 --> 00:16:41.410\nHave you've done any?\n\n280\n00:16:41.410 --> 00:16:44.870\n>> I've done batch scripting,\nso this why I know this.\n\n281\n00:16:44.870 --> 00:16:48.450\nAny time you create a batch script, you\nhave to start, the first line always has\n\n282\n00:16:48.450 --> 00:16:52.050\nto be the shebang, the pound sign,\nand then the exclamation point.\n\n283\n00:16:52.050 --> 00:16:55.607\nAll the pound sign is also\nreferred to as the hash,\n\n284\n00:16:55.607 --> 00:16:59.490\nso that's where you get\nthe sh part of the shebang.\n\n285\n00:16:59.490 --> 00:17:01.608\nBang is the exclamation point.\n\n286\n00:17:01.608 --> 00:17:04.689\nAnd then typically in\na basket we put /bin//.\n\n287\n00:17:04.689 --> 00:17:10.000\nSo shabang then /bin//, and lets you\nknow where you bash interpreter is.\n\n288\n00:17:10.000 --> 00:17:12.520\n>> I see where your\ngoing with this Justin.\n\n289\n00:17:12.520 --> 00:17:15.260\n>> Well you might be\npretty excited about this.\n\n290\n00:17:15.260 --> 00:17:17.890\nI know when I first saw this\nI was like wow that's handy.\n\n291\n00:17:18.890 --> 00:17:27.000\nSo, you'll notice which Python path and\nagain, this resides in various places.\n\n292\n00:17:27.000 --> 00:17:30.906\nThis is probably the easiest way to gain\naccess to the Python interpreter that will\n\n293\n00:17:30.906 --> 00:17:31.538\nrun things.\n\n294\n00:17:31.538 --> 00:17:37.558\nAnd I did shabang, and then just type that\npath out, and notice it ends in Python.\n\n295\n00:17:37.558 --> 00:17:44.290\nSo effectively, this is running\nthat Python portion to the script.\n\n296\n00:17:44.290 --> 00:17:47.120\nNow, there's also one other\nthing that we need to do.\n\n297\n00:17:47.120 --> 00:17:49.000\nLet's make sure that's saved.\n\n298\n00:17:49.000 --> 00:17:52.940\nCommon issue that I have is I'll\nforget to save changes in my file\n\n299\n00:17:52.940 --> 00:17:55.860\nbefore running stuff, and\nI'm like, that didn't work out.\n\n300\n00:17:56.880 --> 00:17:59.120\nSo definitely be careful there.\n\n301\n00:17:59.120 --> 00:18:04.250\nSo I need to change these permissions\njust like I would on a bash script or\n\n302\n00:18:04.250 --> 00:18:06.920\nany other executable\nscript that I'm writing.\n\n303\n00:18:06.920 --> 00:18:14.260\nAnd I can say CHMOD + X variables and\nthen this is.\n\n304\n00:18:16.640 --> 00:18:18.820\nAnd you'll notice this changed in color.\n\n305\n00:18:20.700 --> 00:18:24.940\nAnd you'll notice if I type LL or LS-LA,\n\n306\n00:18:24.940 --> 00:18:30.160\nI'll get all of these permissions here,\nand I do have executable permissions now.\n\n307\n00:18:30.160 --> 00:18:33.090\n>> So it's a very important thing to\nremember is if your script isn't running,\n\n308\n00:18:33.090 --> 00:18:39.690\nyou try to run it using a standard type of\nexecutable format and then Unix or Linux\n\n309\n00:18:39.690 --> 00:18:43.246\ntype of environments and it doesn't run,\nit might be because it's not executable.\n\n310\n00:18:43.246 --> 00:18:47.250\nYou gotta go in and set the execution bit\nusing that CH mild command, it's great for\n\n311\n00:18:47.250 --> 00:18:48.920\nthat, it's actually what it's for.\n\n312\n00:18:48.920 --> 00:18:50.710\nSo you can add that plus x saying,\n\n313\n00:18:50.710 --> 00:18:56.180\nI want to add executable permissions to my\nscript so this thing will actually run.\n\n314\n00:18:56.180 --> 00:18:59.090\nAnd a lot of great terminals\nlike this one will show you\n\n315\n00:18:59.090 --> 00:19:02.050\nthat the color will change\nindicating that that is happening.\n\n316\n00:19:02.050 --> 00:19:04.900\nIf not, you can run LS-L or\nthe LL command and\n\n317\n00:19:04.900 --> 00:19:08.960\nit will show you the RWX which means read,\nwrite, and execute.\n\n318\n00:19:08.960 --> 00:19:13.060\nIf you see that x there, you should be\ngood to go and then you can use standard\n\n319\n00:19:13.060 --> 00:19:16.200\nregular command line interpretation\nto get this thing to run, right.\n\n320\n00:19:16.200 --> 00:19:21.430\n>> Yeah, so now that we've changed\nthis to an executable file, I can\n\n321\n00:19:21.430 --> 00:19:26.710\nactually ./ is there a special name for\nthat?\n\n322\n00:19:26.710 --> 00:19:29.240\n>> You know, I don't know.\n\n323\n00:19:29.240 --> 00:19:30.118\nDot slash?\n\n324\n00:19:30.118 --> 00:19:34.400\n>> There's the shebang./ and\nthen variables and\n\n325\n00:19:34.400 --> 00:19:37.420\nthen I can run it just as\na standard executable file.\n\n326\n00:19:37.420 --> 00:19:40.680\nBut where this becomes\nincredibly powerful is.\n\n327\n00:19:40.680 --> 00:19:44.920\nI can now set up automated crime\njobs to run these scripts.\n\n328\n00:19:44.920 --> 00:19:47.896\nI can have these just as\nsomething I click on and\n\n329\n00:19:47.896 --> 00:19:51.418\nif I set them up correctly\nthere's a little more to it.\n\n330\n00:19:51.418 --> 00:19:56.242\nThey'll run in Windows I think this is\nkind of built in, and this is assumed that\n\n331\n00:19:56.242 --> 00:20:00.778\nyou want these to be executed well,\nyou double click them, they'll run.\n\n332\n00:20:00.778 --> 00:20:02.950\nBut very very handy.\n\n333\n00:20:03.960 --> 00:20:10.040\nBut now that we have this setup to be\nexecutable, let's get back to variables.\n\n334\n00:20:10.040 --> 00:20:13.580\nSo I have these few variables set up here,\nand\n\n335\n00:20:13.580 --> 00:20:19.440\nin a shell whenever I type x+y,\nI got the output always.\n\n336\n00:20:19.440 --> 00:20:23.320\nSomething to keep in mind, if you wanna\nsee output, like standard output.\n\n337\n00:20:23.320 --> 00:20:26.450\nYou have to have this print statement or\n\n338\n00:20:26.450 --> 00:20:30.260\nsomething else that outputs\nto various other places.\n\n339\n00:20:30.260 --> 00:20:33.340\nSo if I come here and\nlet's just say I remove this.\n\n340\n00:20:35.480 --> 00:20:38.750\nAnd then I come and I run, it ran.\n\n341\n00:20:38.750 --> 00:20:42.940\nAnd it looks like something's broke but\nit's not actually broke.\n\n342\n00:20:42.940 --> 00:20:45.740\nIt just ran,\nloaded those variables in the memory and\n\n343\n00:20:45.740 --> 00:20:48.870\nthen it stopped cuz that's\nwhat you told it to do.\n\n344\n00:20:48.870 --> 00:20:51.148\nProgramming languages\nare very literal typically.\n\n345\n00:20:51.148 --> 00:20:55.460\nLike what do you want me to do?\n\n346\n00:20:55.460 --> 00:20:57.610\nWell, I want you to declare\nthese couple of variables.\n\n347\n00:20:57.610 --> 00:20:59.639\nOkay, then what?\n\n348\n00:20:59.639 --> 00:21:02.890\nThen, that's it I guess.\n\n349\n00:21:02.890 --> 00:21:04.230\n>> It's a great program.\n\n350\n00:21:04.230 --> 00:21:05.170\n[LAUGH]\n>> [LAUGH] Yeah.\n\n351\n00:21:05.170 --> 00:21:08.290\n>> Everybody write this at home\nbecause this is groundbreaking.\n\n352\n00:21:08.290 --> 00:21:11.866\n>> Yeah, this is change your\nlife type of programming.\n\n353\n00:21:11.866 --> 00:21:16.850\nBut Daniel I wanna keep in mind that\nwe're showing these kind of intro level\n\n354\n00:21:16.850 --> 00:21:21.710\nthings cuz I like to think of these\nas I'm putting tools in my toolbox.\n\n355\n00:21:21.710 --> 00:21:23.640\nAll right, I'm like okay,\nyeah I got this hammer.\n\n356\n00:21:23.640 --> 00:21:25.710\nI got this new screwdriver.\n\n357\n00:21:25.710 --> 00:21:27.990\nI've got this adjustable wrench.\n\n358\n00:21:27.990 --> 00:21:31.160\nAnd then when we come to a problem,\nsomething we need to solve.\n\n359\n00:21:31.160 --> 00:21:35.060\nWe can always reach in and\ngo I got the perfect tool for that.\n\n360\n00:21:35.060 --> 00:21:40.900\nSo as I said, you're like okay, I got you,\nyou're just declaring variables.\n\n361\n00:21:40.900 --> 00:21:44.770\nBut this provides a lot\nof power in the future.\n\n362\n00:21:44.770 --> 00:21:47.400\nSo looking at these variables,\nI have x and y.\n\n363\n00:21:47.400 --> 00:21:50.740\nWhat can I do?\n\n364\n00:21:50.740 --> 00:21:57.780\nWell I can print these\nas just standard plots.\n\n365\n00:21:58.845 --> 00:22:05.207\nMinus, times, and\n\n366\n00:22:05.207 --> 00:22:10.590\ndivide, right?\n\n367\n00:22:10.590 --> 00:22:15.780\nSo if we go back and\nrun that, then I have plus,\n\n368\n00:22:15.780 --> 00:22:19.290\nminus, multiply, and divide.\n\n369\n00:22:19.290 --> 00:22:22.130\nSo now we're actually getting some\noutput that is starting to see\n\n370\n00:22:22.130 --> 00:22:23.870\nwhere we might have some use to this.\n\n371\n00:22:23.870 --> 00:22:26.050\nI can use Python to create,\n\n372\n00:22:26.050 --> 00:22:30.240\nto do math equations that I'm\ntypically do on a regular basis.\n\n373\n00:22:30.240 --> 00:22:33.710\nI always wanna run and see,\nI can't think of any math equations.\n\n374\n00:22:33.710 --> 00:22:35.360\nI don't do math, I'm horrible with math.\n\n375\n00:22:35.360 --> 00:22:38.590\nBut if I did, if I were to need\nthat math equation every time.\n\n376\n00:22:38.590 --> 00:22:39.690\nPython would be great for this.\n\n377\n00:22:39.690 --> 00:22:41.600\nI would just have to\nplug in the variables and\n\n378\n00:22:41.600 --> 00:22:44.775\nthen give it the equation and\nlet it do its thing.\n\n379\n00:22:44.775 --> 00:22:47.440\n>> Well, we might not wanna do math, but\n\n380\n00:22:47.440 --> 00:22:50.010\nwe're getting ready to come up to\nsomething that may be of interest.\n\n381\n00:22:50.010 --> 00:22:53.440\nWe'll do some kind of\nhokey fun things here.\n\n382\n00:22:53.440 --> 00:22:54.400\nBut it's important.\n\n383\n00:22:54.400 --> 00:22:56.510\nNow with Adam, quick sidenote about Adam.\n\n384\n00:22:56.510 --> 00:22:59.990\nIf I hold command-shift and hit D,\nwell I' can just duplicate lines and\n\n385\n00:22:59.990 --> 00:23:03.650\nthen just change one thing,\nway better than copy and paste.\n\n386\n00:23:03.650 --> 00:23:08.470\nBut there's also this other arithmetic or\nthis number operator.\n\n387\n00:23:08.470 --> 00:23:13.660\nIt represented by a percent sign and\nit's called the modules operator.\n\n388\n00:23:13.660 --> 00:23:15.240\nNow what would I use this for.\n\n389\n00:23:15.240 --> 00:23:19.970\nWell let's go see, I got 10 and 13 right.\n\n390\n00:23:19.970 --> 00:23:21.640\nSo 10 plus 13 is 23.\n\n391\n00:23:21.640 --> 00:23:25.420\nSome negative numbers let's go back and\nrun this and\n\n392\n00:23:25.420 --> 00:23:31.260\nyou'll see these last two this is\ndivide this is this modulus operator.\n\n393\n00:23:31.260 --> 00:23:36.070\nWhen I divide 13 will not go\ninto 10 any whole numbers.\n\n394\n00:23:36.070 --> 00:23:39.040\nSo this is what's called\ninteger arithmetic.\n\n395\n00:23:39.040 --> 00:23:42.720\nIt's important to realize that Python will\ndo this and version three treats this\n\n396\n00:23:42.720 --> 00:23:45.330\na little differently,\nthere's some differences there.\n\n397\n00:23:46.450 --> 00:23:49.728\nSo you need to be careful.\n\n398\n00:23:49.728 --> 00:23:52.298\nBut this is a standard\nprogram in convention.\n\n399\n00:23:52.298 --> 00:23:56.148\nThis will actually give you\nwhat's left over after division.\n\n400\n00:23:56.148 --> 00:24:02.120\nSo, this percent sign says take x,\ndivide by y, and give me what's left over.\n\n401\n00:24:02.120 --> 00:24:06.570\nIt's a great way to essentially like\nif I wanna do every other thing,\n\n402\n00:24:06.570 --> 00:24:09.640\nlike if I wanna go through a bunch of,\na list of things and\n\n403\n00:24:09.640 --> 00:24:14.070\ndo every other one, I can use this and\nit'll skip to every other one.\n\n404\n00:24:14.070 --> 00:24:16.439\nSo you'll see that come up in some\nof the future scripts that we write.\n\n405\n00:24:17.760 --> 00:24:21.960\nAnd then the final operator is x**y, and\n\n406\n00:24:23.700 --> 00:24:28.400\nthat's 10 to the 13th power which\nshould be a giant number, and it is.\n\n407\n00:24:28.400 --> 00:24:32.100\nSo handy operators.\n\n408\n00:24:32.100 --> 00:24:36.270\n>> And obviously the order of\noperations is coming to play here.\n\n409\n00:24:36.270 --> 00:24:41.110\nYou had x or minus y well that's,\nthat's really\n\n410\n00:24:41.110 --> 00:24:43.960\nlike your gonna get a negative number\nwith that because of the larger.\n\n411\n00:24:43.960 --> 00:24:45.420\nIts seeing is as a negative number.\n\n412\n00:24:45.420 --> 00:24:46.410\n>> Right.\n\n413\n00:24:46.410 --> 00:24:51.150\nSo we look at these you're like that's\ngreat Justin your showing me some simple\n\n414\n00:24:51.150 --> 00:24:53.280\nmath I don't really understand whatever.\n\n415\n00:24:53.280 --> 00:24:57.690\nWell again, we're just we're\nbuilding to some stuff here.\n\n416\n00:24:57.690 --> 00:25:00.890\nBut you brought up order of\noperations when talking about math.\n\n417\n00:25:00.890 --> 00:25:06.960\nOrder of operations is not only\na mathematical construction within Python,\n\n418\n00:25:06.960 --> 00:25:11.610\nbut we can enforce order in a variety\nof things, manipulating strings,\n\n419\n00:25:11.610 --> 00:25:13.530\nor lists of things.\n\n420\n00:25:13.530 --> 00:25:18.240\nAnd we can do that just like we\nwould in math, by using parenthesis.\n\n421\n00:25:18.240 --> 00:25:22.180\nNow, I'm gonna create a third\nvariable that is a result\n\n422\n00:25:22.180 --> 00:25:25.800\nof this complicated expression,\nfrom the first two variables.\n\n423\n00:25:25.800 --> 00:25:31.270\nComplicated, but, so,\nif I have a new variable, z, and\n\n424\n00:25:31.270 --> 00:25:36.390\nx plus y times 7, Right?\n\n425\n00:25:36.390 --> 00:25:38.340\nSo I now have two operators.\n\n426\n00:25:38.340 --> 00:25:41.840\nThis would follow the standard\norder of operations.\n\n427\n00:25:41.840 --> 00:25:44.080\nI would multiply first and then add.\n\n428\n00:25:44.080 --> 00:25:46.040\nBut I really need to add this X and\nY together.\n\n429\n00:25:46.040 --> 00:25:50.790\nYou know, let's assume that I'm\ncreating some kind of exchange rate or\n\n430\n00:25:50.790 --> 00:25:54.169\nlike I'm making a deposit to my account\nand I wanna know what my interest is.\n\n431\n00:25:55.230 --> 00:26:00.140\nThen I can force this by\nadding parentheses, and\n\n432\n00:26:00.140 --> 00:26:06.657\njust to show you I will print Z here,\n\n433\n00:26:06.657 --> 00:26:12.170\nand print Z here.\n\n434\n00:26:12.170 --> 00:26:15.870\nSo the last two things when\nour script runs is gonna be z,\n\n435\n00:26:15.870 --> 00:26:21.050\nexcept I'm gonna remove\nthese two parentheses.\n\n436\n00:26:21.050 --> 00:26:25.480\nSo let's go back I'm gonna clear\nmy terminal run this again.\n\n437\n00:26:25.480 --> 00:26:28.230\nAnd you'll notice these\ntwo things are different.\n\n438\n00:26:28.230 --> 00:26:30.080\nNow I use numbers to illustrate that,\n\n439\n00:26:30.080 --> 00:26:34.280\nbecause even though you said you weren't\ngood at math, but even people who\n\n440\n00:26:34.280 --> 00:26:38.190\nare like, I'm not good at math, they have\nat least some mathematical intuition,\n\n441\n00:26:38.190 --> 00:26:41.070\nlike I know there's supposed to\nbe a particular order there.\n\n442\n00:26:41.070 --> 00:26:46.003\nThat will extend to other things\nthat we're doing within Python.\n\n443\n00:26:46.003 --> 00:26:50.559\n[COUGH]\nExcuse me.\n\n444\n00:26:50.559 --> 00:26:53.510\nSo, I can enforce this order of operation.\n\n445\n00:26:53.510 --> 00:26:55.280\nBut you'll notice\nsomething about this code.\n\n446\n00:26:55.280 --> 00:26:56.910\nI just did a bunch of stuff.\n\n447\n00:26:56.910 --> 00:27:01.260\nAnd if I come back to this, I've\nchosen horrible variable names, right?\n\n448\n00:27:01.260 --> 00:27:01.780\n>> Yeah.\n\n449\n00:27:01.780 --> 00:27:06.770\n>> Yeah, and\nhow would I know what I was doing?\n\n450\n00:27:09.360 --> 00:27:12.490\nIs there something in\nBash where I can notate?\n\n451\n00:27:12.490 --> 00:27:16.440\n>> Yeah, yeah there is, actually, and\nI see where you're going with this.\n\n452\n00:27:16.440 --> 00:27:19.510\nJustin's got a program here,\nand it does something.\n\n453\n00:27:19.510 --> 00:27:23.278\nIf he emailed me this program and I opened\nit up and looked at it I'd go, okay,\n\n454\n00:27:23.278 --> 00:27:27.350\nit does something,\nI don't know why it's doing any of this,\n\n455\n00:27:27.350 --> 00:27:31.900\nor and like he said his variables are\nhorribly written out, because they're not\n\n456\n00:27:31.900 --> 00:27:35.340\ndescribing anything very well,\nthey're not using that cool syntax.\n\n457\n00:27:35.340 --> 00:27:36.820\nWhat was it called, snake.\n\n458\n00:27:36.820 --> 00:27:37.490\n>> Yeah, snake case.\n\n459\n00:27:37.490 --> 00:27:38.900\n>> Yeah snake case.\n\n460\n00:27:38.900 --> 00:27:43.330\nNone of that is there, so I have no idea\nof why the variables are what they are.\n\n461\n00:27:43.330 --> 00:27:47.550\nSo I'm gonna be at a loss on\nwhat's going on inside of this.\n\n462\n00:27:47.550 --> 00:27:54.840\nWe tend to use some commenting and\nI I do this in batch scripting as well.\n\n463\n00:27:54.840 --> 00:27:56.990\nTo let everybody know that it's not me or\n\n464\n00:27:56.990 --> 00:28:01.085\neven to remind myself to be honest with\nyou, if I go back a long time later and\n\n465\n00:28:01.085 --> 00:28:02.510\n,try to figure out what was\nI doing with this script?\n\n466\n00:28:02.510 --> 00:28:04.260\nWhat does this script do?\n\n467\n00:28:04.260 --> 00:28:07.380\nI can look at the comments that\nI put inside of my script so\n\n468\n00:28:07.380 --> 00:28:08.930\nthat I can see, yes.\n\n469\n00:28:08.930 --> 00:28:13.100\nIt's all reminders, it's all helps\nto let anybody who's looking at it\n\n470\n00:28:13.100 --> 00:28:15.820\nunderstand what's happening\ninside of the code itself.\n\n471\n00:28:15.820 --> 00:28:18.080\nAnd I assume that any Python, or\n\n472\n00:28:18.080 --> 00:28:22.240\nprogramming language worth itself is going\nto have some sort of commenting feature.\n\n473\n00:28:23.840 --> 00:28:25.820\n>> Absolutely, and Python's no different.\n\n474\n00:28:25.820 --> 00:28:27.910\nThere's actually two types of comments.\n\n475\n00:28:29.090 --> 00:28:32.170\nSo if we look,\ntypically at the very top, we want\n\n476\n00:28:32.170 --> 00:28:36.650\na short description of what's going on\nwithin the script, it's like a synopsis.\n\n477\n00:28:36.650 --> 00:28:42.950\nYou will see this as what\nare called triple quotes.\n\n478\n00:28:42.950 --> 00:28:45.780\nThis provides me with\na multi- line comment.\n\n479\n00:28:45.780 --> 00:28:49.730\nAnything I type within these quotes,\nI can write paragraphs, upon paragraphs,\n\n480\n00:28:49.730 --> 00:28:52.420\nupon paragraphs, and\nthis is still a comment, so\n\n481\n00:28:52.420 --> 00:28:54.800\nI don't have to worry about\ncommenting each line.\n\n482\n00:28:54.800 --> 00:29:02.710\nSo this is an introduction\n[SOUND] to basic math.\n\n483\n00:29:02.710 --> 00:29:05.320\nSo not the best introduction.\n\n484\n00:29:05.320 --> 00:29:09.030\nI didn't say it was a good one,\nbut it is an introduction.\n\n485\n00:29:09.030 --> 00:29:12.630\nIf we come back and actually look,\nyou'll notice nothing prints out.\n\n486\n00:29:12.630 --> 00:29:15.040\nThat's because the interpreter\ndoesn't see those.\n\n487\n00:29:15.040 --> 00:29:16.390\nIt turns a blind eye to them.\n\n488\n00:29:16.390 --> 00:29:19.510\nIt's like, you're not there,\nyou're not there.\n\n489\n00:29:19.510 --> 00:29:22.930\nSo, that's really important\nbecause if I come back later,\n\n490\n00:29:22.930 --> 00:29:27.649\njust adding this simple comment,\nI'm like, yeah, this is what I'm doing.\n\n491\n00:29:29.240 --> 00:29:32.790\nBut what if I'm like,\nthis is a new operator to me.\n\n492\n00:29:32.790 --> 00:29:33.930\nI don't remember what this is.\n\n493\n00:29:33.930 --> 00:29:38.290\nI'm gonna actually come back to the end\nof this line at a pound sign or\n\n494\n00:29:38.290 --> 00:29:41.300\nthe hash or I think there's\nanother word for octothorpe?\n\n495\n00:29:41.300 --> 00:29:42.850\nI think it's called an octothorpe.\n\n496\n00:29:42.850 --> 00:29:43.870\n>> That's exactly right.\n\n497\n00:29:43.870 --> 00:29:44.500\n>> Yeah?\nSo\n\n498\n00:29:44.500 --> 00:29:46.290\nwow,\n>> Good for you.\n\n499\n00:29:46.290 --> 00:29:46.900\n>> I'm proud.\n\n500\n00:29:46.900 --> 00:29:50.131\nI can say this is the modulus operator.\n\n501\n00:29:53.874 --> 00:29:57.310\nGives remainder.\n\n502\n00:29:57.310 --> 00:29:59.280\nAnd my text is zoomed in so\n\n503\n00:29:59.280 --> 00:30:02.770\neverybody can see this is actually\nnot that long of a line comment.\n\n504\n00:30:02.770 --> 00:30:06.280\nBut now when I come back I'm like,\nyeah that's.\n\n505\n00:30:07.530 --> 00:30:09.860\nIt kind of self documents\nyour thought process, and\n\n506\n00:30:09.860 --> 00:30:13.740\nwhat I'll use comments for is, before\nI ever write a really complex script,\n\n507\n00:30:13.740 --> 00:30:15.360\nI'll actually write a bunch\nof stuff in comments,\n\n508\n00:30:15.360 --> 00:30:19.350\nlike the steps that I need to take,\nand then implement those piecewise.\n\n509\n00:30:19.350 --> 00:30:22.930\nIt keeps the problems at bay,\nthings of that.\n\n510\n00:30:22.930 --> 00:30:27.340\n>> So, Python is going to, because it's\ninterpreting line by line as it goes\n\n511\n00:30:27.340 --> 00:30:32.040\nthrough the code, it's going to ignore\nanything either between triple quotes,\n\n512\n00:30:32.040 --> 00:30:33.560\nor a set of triple quotes.\n\n513\n00:30:33.560 --> 00:30:36.670\nSo one on top of the other and anything\nin between that's gonna ignore that, and\n\n514\n00:30:36.670 --> 00:30:40.680\nignore anything after the hash sign,\nor the pound sign and\n\n515\n00:30:40.680 --> 00:30:42.090\nregardless of where it is.\n\n516\n00:30:42.090 --> 00:30:47.060\n>> Right and this only applies to\nthe line to the end of the line.\n\n517\n00:30:47.060 --> 00:30:49.460\nOnce you hit enter that\nis no longer valid.\n\n518\n00:30:50.680 --> 00:30:54.680\nAlso in some other languages double quotes\nand single quotes are treated differently\n\n519\n00:30:54.680 --> 00:30:59.660\nand Python they're equivalent and\nactually play in making our lives easier.\n\n520\n00:30:59.660 --> 00:31:02.503\nSo I could have all of\nthese be single quotes.\n\n521\n00:31:06.620 --> 00:31:08.450\nWow that's some crazy stuff there.\n\n522\n00:31:08.450 --> 00:31:12.500\nI could have these be single quotes and\nthat still works just the same.\n\n523\n00:31:12.500 --> 00:31:17.210\nAnd so now this is the order\nof operations demo below.\n\n524\n00:31:17.210 --> 00:31:18.670\nThis is the modules operator.\n\n525\n00:31:19.700 --> 00:31:21.860\nThis is the exponent operator.\n\n526\n00:31:23.980 --> 00:31:24.930\nI misspelled exponent.\n\n527\n00:31:26.540 --> 00:31:27.470\n>> It's a funny word.\n\n528\n00:31:27.470 --> 00:31:28.130\n>> Yeah it is.\n\n529\n00:31:28.130 --> 00:31:28.920\nIt is.\nIt is.\n\n530\n00:31:28.920 --> 00:31:29.730\nIt is.\n\n531\n00:31:29.730 --> 00:31:32.190\nSo now when I come back to these these\n\n532\n00:31:32.190 --> 00:31:34.900\ncomments help me self\ndocument what I'm doing.\n\n533\n00:31:34.900 --> 00:31:36.990\nAnd I don't have to think as much.\n\n534\n00:31:36.990 --> 00:31:40.201\nWe need to take these conventions,\nthese variable namings,\n\n535\n00:31:40.201 --> 00:31:44.229\nall of these things are put in place so\nI can reason about what I want to happen.\n\n536\n00:31:44.229 --> 00:31:48.652\nAnd Python helps us do that by abstracting\naway some of all of this ceremony that\n\n537\n00:31:48.652 --> 00:31:50.538\nyou'll see in other languages.\n\n538\n00:31:50.538 --> 00:31:53.818\nBut comments are very, very helpful.\n\n539\n00:31:53.818 --> 00:31:55.078\nAnd getting that done.\n\n540\n00:31:55.078 --> 00:31:59.391\n>> Now, Justin, you were talking before\nabout we're using things like good\n\n541\n00:31:59.391 --> 00:32:04.321\nstandard notation, making sure that you\nhave variables that are very descriptive,\n\n542\n00:32:04.321 --> 00:32:07.810\nthat we put in comments so\nwe understand what's going on.\n\n543\n00:32:07.810 --> 00:32:11.610\nAll these things are helps to try\nto keep us from making a mistake\n\n544\n00:32:11.610 --> 00:32:14.810\ninside of our program so\nthat they'll actually run correctly.\n\n545\n00:32:14.810 --> 00:32:17.560\nBut, as good as we might be, and\n\n546\n00:32:17.560 --> 00:32:20.630\nI know you've never seen errors before\nin your life, you're that good.\n\n547\n00:32:20.630 --> 00:32:23.380\nBut I am not as good as you\nwhen it comes to this, and\n\n548\n00:32:23.380 --> 00:32:27.500\nI create errors all the time, and\nI have to go back in and debug.\n\n549\n00:32:27.500 --> 00:32:30.770\nWhat kind of basic debugging\noperations do we have inside, or\n\n550\n00:32:30.770 --> 00:32:32.950\njust using Python in general?\n\n551\n00:32:32.950 --> 00:32:34.940\n>> You must've been in my head.\n\n552\n00:32:34.940 --> 00:32:37.303\nI have not seen that many errors,\nI have to go seek them out.\n\n553\n00:32:37.303 --> 00:32:40.420\n>> [LAUGH]\n>> But when they do happen for\n\n554\n00:32:40.420 --> 00:32:41.850\nother people, this is what I hear.\n\n555\n00:32:41.850 --> 00:32:42.390\n>> Not you.\n\n556\n00:32:42.390 --> 00:32:43.890\n>> Not me.\n>> Yeah, never.\n\n557\n00:32:45.800 --> 00:32:49.340\n>> Wow I can't even say\nthat with a straight face.\n\n558\n00:32:49.340 --> 00:32:52.560\nLet's take the indentation\nerror that we saw earlier.\n\n559\n00:32:52.560 --> 00:32:53.800\nI put a space there.\n\n560\n00:32:54.870 --> 00:32:57.100\nNow, this is a little different\nthan running it in a shell.\n\n561\n00:32:57.100 --> 00:32:59.380\nI don't know that error has occurred.\n\n562\n00:32:59.380 --> 00:33:02.140\nI'm typing away,\nI'm making this great program and\n\n563\n00:33:02.140 --> 00:33:04.140\ndoes some pretty groundbreaking stuff.\n\n564\n00:33:04.140 --> 00:33:10.290\nBut, if I run it,\nI actually get a similar error\n\n565\n00:33:10.290 --> 00:33:15.494\nthat I would on the interpreter shell,\n\n566\n00:33:15.494 --> 00:33:20.780\nexcept now it'll say hey,\nhere's where this error occurred and\n\n567\n00:33:20.780 --> 00:33:24.200\nthese are simple ones that\nyou'll encounter commonly.\n\n568\n00:33:24.200 --> 00:33:28.030\nAs these grow in complexity, these\nerror messages will get very long and\n\n569\n00:33:28.030 --> 00:33:31.650\nyou'll go, I gotta go read some stuff.\n\n570\n00:33:31.650 --> 00:33:36.260\nBut it also tells you it\nhappened in the file, on line 5.\n\n571\n00:33:36.260 --> 00:33:39.260\nAnd it happened at this point in the file.\n\n572\n00:33:39.260 --> 00:33:41.790\nSo if I come back and I'm like,\nokay so what's wrong here?\n\n573\n00:33:41.790 --> 00:33:46.270\nIt said indentation, yeah.\n\n574\n00:33:46.270 --> 00:33:48.950\nThere we go, found it.\n\n575\n00:33:48.950 --> 00:33:51.800\nIt's right there, I messed up indentation.\n\n576\n00:33:51.800 --> 00:33:55.640\nAnd now I can come back,\nrerun it and my error is fixed.\n\n577\n00:33:55.640 --> 00:33:59.500\nSo, the Python interpreter will\nstart running your program, but\n\n578\n00:33:59.500 --> 00:34:00.780\nhere's the trick.\n\n579\n00:34:00.780 --> 00:34:05.142\nSince this is not a compiled language,\nbut an interpreted language, so like C,\n\n580\n00:34:05.142 --> 00:34:09.610\nC++, C#, Java, they turn all those\ninto code before they're run, and\n\n581\n00:34:09.610 --> 00:34:11.140\nthey do a bunch of checks.\n\n582\n00:34:11.140 --> 00:34:12.520\nLike, is this the appropriate data type,\n\n583\n00:34:12.520 --> 00:34:16.210\nis this formatted appropriately,\nbefore that code runs.\n\n584\n00:34:17.240 --> 00:34:20.590\nPython starts running top to bottom and\n\n585\n00:34:20.590 --> 00:34:24.900\nit kinda consumes the text as\nit comes to it top to bottom.\n\n586\n00:34:24.900 --> 00:34:27.650\nSo, when it came to a problem, it stopped.\n\n587\n00:34:28.850 --> 00:34:31.920\nNow, there are ways to\nmitigate those issues but\n\n588\n00:34:32.990 --> 00:34:35.470\nour program doesn't run\nunless it's error free.\n\n589\n00:34:35.470 --> 00:34:39.248\nThat can be source of deep\nfrustration with people.\n\n590\n00:34:39.248 --> 00:34:40.924\nNot me.\n\n591\n00:34:40.924 --> 00:34:42.950\n>> You would know about that.\n\n592\n00:34:42.950 --> 00:34:45.450\n>> Yeah.\nBut I hear people do.\n\n593\n00:34:45.450 --> 00:34:50.190\n>> But also a source of great help\nthough as well because, especially for\n\n594\n00:34:50.190 --> 00:34:53.330\nnew programmers,\nwe're not used to seeing errors,\n\n595\n00:34:53.330 --> 00:34:55.580\nwe don't know what should be right and\nwhat should be wrong.\n\n596\n00:34:55.580 --> 00:34:59.930\nWe need that help to let us know, hey\nbuddy, you threw an indention there and\n\n597\n00:34:59.930 --> 00:35:02.864\nI know that you didn't mean to,\nyou never would have done that on purpose.\n\n598\n00:35:02.864 --> 00:35:05.690\nSo why don't you to go ahead and\nrun back the line five and\n\n599\n00:35:05.690 --> 00:35:09.820\ncheck that out to see if can find what\nwent wrong and erase the problem.\n\n600\n00:35:09.820 --> 00:35:12.770\nI actually lean on the fact\nthat it will stop and\n\n601\n00:35:12.770 --> 00:35:16.890\ngive me some sort of output\nas to what went wrong or\n\n602\n00:35:16.890 --> 00:35:22.635\nvery heavily just because I'm not as\nproficient as someone like yourself, John.\n\n603\n00:35:22.635 --> 00:35:23.890\n>> [LAUGH] Yeah,\n\n604\n00:35:23.890 --> 00:35:26.890\nI feel like we're propagating\na legend that doesn't actually occur.\n\n605\n00:35:28.120 --> 00:35:29.995\nSo everybody will have errors.\n\n606\n00:35:29.995 --> 00:35:32.190\nIt'll happen to even the best programmers.\n\n607\n00:35:32.190 --> 00:35:34.570\nThe important thing is\nto know what to do and\n\n608\n00:35:34.570 --> 00:35:38.550\nwhat tools are available to you\nto figure out what those are.\n\n609\n00:35:39.850 --> 00:35:46.180\nSo, that's one error and then,\nwhat was that other error that we had?\n\n610\n00:35:47.650 --> 00:35:51.800\nYeah, we tried to do some weird\nstuff with strings and numbers.\n\n611\n00:35:51.800 --> 00:35:57.410\nSo let's say we're trying to assign y and\nI'm like, I want 13 apples and I\n\n612\n00:35:57.410 --> 00:36:01.260\nactually want it to say 13 apples but I'm\nlike, I'm gonna use a number and a string.\n\n613\n00:36:01.260 --> 00:36:05.667\nSo I want to put them together I guess,\nI'm just trying stuff, and\n\n614\n00:36:05.667 --> 00:36:08.514\nthis is something that people do early on.\n\n615\n00:36:08.514 --> 00:36:13.521\nLet's go run that, and again we get\na similar type error, it says hey,\n\n616\n00:36:13.521 --> 00:36:20.090\nthat happens in variable.py on line 6, and\nit happens because there is a type error.\n\n617\n00:36:20.090 --> 00:36:24.340\nYou can not add an int and\na string together.\n\n618\n00:36:24.340 --> 00:36:27.625\nSo I'm like, yeah I forgot about that.\n\n619\n00:36:27.625 --> 00:36:31.620\nSo, I gotta fix that,\nI gotta figure out another way to do that.\n\n620\n00:36:33.430 --> 00:36:35.410\nThere are ways to do that.\n\n621\n00:36:35.410 --> 00:36:40.210\nAnd I think now's a good time, let's use\nvariables to do something interactive,\n\n622\n00:36:40.210 --> 00:36:42.090\ncuz we're just printing\nnumbers on the screen.\n\n623\n00:36:42.090 --> 00:36:48.130\nI know people are like well, that's\ngreat but when can we actually use this?\n\n624\n00:36:48.130 --> 00:36:49.570\nSo I'm gonna create a new file.\n\n625\n00:36:49.570 --> 00:36:55.213\nAnd just say, user input.py,\n\n626\n00:36:55.213 --> 00:37:01.500\nand notice that's snake cased.\n\n627\n00:37:01.500 --> 00:37:06.880\nAnd I'm gonna add my shebang, and\nI hope to go look at where my path was.\n\n628\n00:37:06.880 --> 00:37:09.920\nDo you have trouble\nremembering those also?\n\n629\n00:37:09.920 --> 00:37:11.762\n>> Of course.\n\n630\n00:37:11.762 --> 00:37:14.460\nEventually you'll just know\nwhere it is because you use your\n\n631\n00:37:14.460 --> 00:37:15.230\nenvironment all the time.\n\n632\n00:37:15.230 --> 00:37:17.770\nBut yeah, if you're new to the\nenvironment, especially if you're new to\n\n633\n00:37:17.770 --> 00:37:21.103\nprogramming, this is something that\nyou're gonna have to steal from a lot.\n\n634\n00:37:21.103 --> 00:37:24.897\n[LAUGH]\n>> They'll be like I really like that\n\n635\n00:37:24.897 --> 00:37:30.405\nwhich, and that'll tell me which\ninterpreter is currently set.\n\n636\n00:37:30.405 --> 00:37:32.770\nNow, when would we use variables?\n\n637\n00:37:32.770 --> 00:37:37.570\nWell we've stored these numbers, but\nwhat if I wanted to interact with a user?\n\n638\n00:37:37.570 --> 00:37:41.550\nLike, if I had a script that when\nI typed something back at it,\n\n639\n00:37:41.550 --> 00:37:46.000\nit would execute a series of commands or\ndo something simple.\n\n640\n00:37:46.000 --> 00:37:51.660\nWell in Python 2,\nthere is an input command called raw input\n\n641\n00:37:51.660 --> 00:37:56.520\nthat will take user input and spit it\nback so you can store it in a variable.\n\n642\n00:37:56.520 --> 00:37:59.190\nHowever, the other side is,\n\n643\n00:37:59.190 --> 00:38:02.280\nin Python 3 there's actually\nbeen change to just input.\n\n644\n00:38:02.280 --> 00:38:06.830\nSo there's a little difference there,\nsince we're using 2,\n\n645\n00:38:06.830 --> 00:38:09.260\nwe're going to use the raw_input.\n\n646\n00:38:09.260 --> 00:38:13.883\nSo if I want user input,\nthat's going to be raw_input.\n\n647\n00:38:15.724 --> 00:38:19.302\nAnd this is a simple command,\nwhoops, see me,\n\n648\n00:38:19.302 --> 00:38:24.328\nmy Java days are coming back,\nputting semicolons over the place.\n\n649\n00:38:24.328 --> 00:38:28.100\nSo, raw_input.\n\n650\n00:38:28.100 --> 00:38:32.649\nWhat is your favorite color?\n\n651\n00:38:32.649 --> 00:38:37.054\nSo if I were to run this.\n\n652\n00:38:49.783 --> 00:38:51.329\nWait a minute, we've gotta figure it.\n\n653\n00:38:55.739 --> 00:38:56.675\nHere it is.\n\n654\n00:38:56.675 --> 00:39:01.840\nDaniel, do you know what's going on?\n\n655\n00:39:01.840 --> 00:39:03.860\nI noticed there-\n>> It's not red.\n\n656\n00:39:03.860 --> 00:39:04.400\n>> It's not red.\n\n657\n00:39:05.440 --> 00:39:07.610\nWhat did I forget to do, Daniel?\n\n658\n00:39:07.610 --> 00:39:10.500\n>> Gotta make these files executable,\nright?\n\n659\n00:39:10.500 --> 00:39:11.780\nThat's what we talked about before.\n\n660\n00:39:11.780 --> 00:39:14.920\nIt's not executable,\nusing it this way is not going to work and\n\n661\n00:39:14.920 --> 00:39:18.460\nsee what Justin just had right\nthere is that it just says okay,\n\n662\n00:39:18.460 --> 00:39:20.920\nI don't know what you're\ntrying to do here.\n\n663\n00:39:20.920 --> 00:39:25.250\nI'll see if I can help you, and\nit tried but wasn't successful of that.\n\n664\n00:39:25.250 --> 00:39:28.500\nBecause Justin was trying to get it to do\nsomething that it didn't know what was.\n\n665\n00:39:28.500 --> 00:39:31.520\nSo now we have to go back in,\nmake that file executable so\n\n666\n00:39:31.520 --> 00:39:34.230\nthey can actually execute\nit using standard notation.\n\n667\n00:39:35.630 --> 00:39:40.560\n>> And\njust do that with sudo chmod +x, and\n\n668\n00:39:40.560 --> 00:39:44.910\nnow I can actually take user input.\n\n669\n00:39:46.230 --> 00:39:48.130\nSo, what is your favorite color, Dan?\n\n670\n00:39:48.130 --> 00:39:49.490\n>> I'm gonna go with blue.\n\n671\n00:39:49.490 --> 00:39:49.990\n>> Blue.\n\n672\n00:39:51.130 --> 00:39:52.370\nAnd it actually did that.\n\n673\n00:39:52.370 --> 00:39:56.785\nWell, it didn't seem like it did anything,\nlet's have it print out user input.\n\n674\n00:39:56.785 --> 00:40:04.880\nPrint(user_input), and\nDaniel's favorite color is blue,\n\n675\n00:40:04.880 --> 00:40:11.700\nand so I can now store this user input\nas a variable, and I can use a layer.\n\n676\n00:40:11.700 --> 00:40:15.040\nThis is great if I wanted to\nbuild command-line utilities,\n\n677\n00:40:15.040 --> 00:40:16.930\nthat made decisions based on those.\n\n678\n00:40:16.930 --> 00:40:19.910\nBut, that's a little beyond\nthe scope of what we know yet.\n\n679\n00:40:19.910 --> 00:40:21.200\nBut we're gonna keep that in mind,\n\n680\n00:40:21.200 --> 00:40:24.580\nbecause we're gonna make use of\nthat a little later down the road.\n\n681\n00:40:24.580 --> 00:40:25.210\n>> Yeah.\nJustin,\n\n682\n00:40:25.210 --> 00:40:28.700\nyou've done a really good job of building\na great foundation for us so that we can\n\n683\n00:40:28.700 --> 00:40:34.300\ncontinue on and create those more complex\nscripts or programs down the road.\n\n684\n00:40:34.300 --> 00:40:38.024\nNow we're able to work with variables,\nthat wasn't too difficult, right, or\n\n685\n00:40:38.024 --> 00:40:39.970\na container that holds a value.\n\n686\n00:40:39.970 --> 00:40:44.960\nAnd we can do math, we can separate things\nout using math operands or operators.\n\n687\n00:40:44.960 --> 00:40:46.330\nThat's always very helpful.\n\n688\n00:40:46.330 --> 00:40:49.660\nAnd now we can also debug\ncommenter scripts and\n\n689\n00:40:49.660 --> 00:40:52.740\ntake user input and\nthat's gonna be really a cool stuff.\n\n690\n00:40:52.740 --> 00:40:57.280\nThat's what makes programming fun is\nsaying, hey, I wanna interact with you as\n\n691\n00:40:57.280 --> 00:41:00.970\nthe user and then we'll do something\nthat is unique to your experience.\n\n692\n00:41:00.970 --> 00:41:03.080\nSo it's gonna be a lot of\nfun as we get further and\n\n693\n00:41:03.080 --> 00:41:04.750\nfurther down in that complexity.\n\n694\n00:41:04.750 --> 00:41:07.908\nJustin, thank you for joining us\nagain today and explaining these and\n\n695\n00:41:07.908 --> 00:41:10.263\nbuilding our foundational\nknowledge of Python, so\n\n696\n00:41:10.263 --> 00:41:12.770\nthat we can make those\nmore complex scripts.\n\n697\n00:41:12.770 --> 00:41:14.500\nIt looks like we have\ncome out of time though.\n\n698\n00:41:14.500 --> 00:41:15.740\nWe thank you for joining us.\n\n699\n00:41:15.740 --> 00:41:16.970\nWe thank you guys for watching.\n\n700\n00:41:16.970 --> 00:41:18.970\nWe're going to go ahead and\nsign off for ITProTV.\n\n701\n00:41:18.970 --> 00:41:21.060\nI've been your host, Daniel Lowrie.\n\n702\n00:41:21.060 --> 00:41:21.890\n>> And I'm Justin.\n\n703\n00:41:21.890 --> 00:41:23.275\n>> And we'll see you next time.\n\n704\n00:41:23.275 --> 00:41:31.830\n[SOUND]\n\n",
          "vimeoId": "158182503"
        },
        {
          "description": "In this episode, Daniel and Justin take you to the next level with Python by showing you how to create more intelligent programs through the use of decision making. They start by looking at boolean expressions and logical operators and then using those values to make a decision through the employ of If, Else, and Elif statements.",
          "length": "2177",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-3-decision_making_in_python-030516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-3-decision_making_in_python-030516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-3-decision_making_in_python-030516-1-sm.jpg",
          "title": "Decision Making in Python",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:08.149\n[MUSIC]\n\n2\n00:00:08.149 --> 00:00:12.071\nAll right greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:12.071 --> 00:00:14.880\nI'm your host Daniel Lowrie and\nin today's episode,\n\n4\n00:00:14.880 --> 00:00:17.910\nwell we are continuing on with\nour Python programming series.\n\n5\n00:00:17.910 --> 00:00:21.880\nJoining us back in the studio again today\nis our master programmer in Python,\n\n6\n00:00:21.880 --> 00:00:24.830\nthat is Mister Justin Dennison,\nJustin welcome back to the show sir.\n\n7\n00:00:24.830 --> 00:00:25.400\nHow's it going?\n\n8\n00:00:25.400 --> 00:00:26.230\n>> Thanks for having me.\n\n9\n00:00:26.230 --> 00:00:27.680\nI'm doing well.\n\n10\n00:00:27.680 --> 00:00:30.280\nWhoo, I'm ready.\n\n11\n00:00:30.280 --> 00:00:31.640\n>> Hitting the Python?\n\n12\n00:00:31.640 --> 00:00:32.180\n>> Yeah, yeah.\n\n13\n00:00:32.180 --> 00:00:33.170\n>> Ground running.\n\n14\n00:00:33.170 --> 00:00:36.490\nWell, today we are covering\na very interesting topic.\n\n15\n00:00:36.490 --> 00:00:39.010\nWe've taken a look at some of\nthe foundational bits of knowledge that we\n\n16\n00:00:39.010 --> 00:00:43.120\nneed for Python to get us going, but\nnow we wanna take it to the next level.\n\n17\n00:00:43.120 --> 00:00:47.710\nWe wanna bump it up a notch and today's\nepisode is gonna be about decision making,\n\n18\n00:00:47.710 --> 00:00:52.300\nand this is necessary in just about\nany kind of programming language, or\n\n19\n00:00:52.300 --> 00:00:56.600\nprogram itself, if you want it to be able\nto do anything other than one thing.\n\n20\n00:00:56.600 --> 00:01:00.100\nSometimes I want it to say, well,\nif this is happening, then do this, but\n\n21\n00:01:00.100 --> 00:01:03.140\nif something else occurs,\nthen you need to do something else.\n\n22\n00:01:03.140 --> 00:01:04.910\nThe program needs to be\nable to make a decision.\n\n23\n00:01:04.910 --> 00:01:05.713\nIt needs to be smart,\n\n24\n00:01:05.713 --> 00:01:10.290\nthat's what we're gonna do, we're gonna\nadd a little brain power to it today, and\n\n25\n00:01:10.290 --> 00:01:12.990\nJustin, when it comes to Python,\nwhere do we begin with that?\n\n26\n00:01:14.380 --> 00:01:18.210\n>> Well, first off,\nbefore we actually program these things,\n\n27\n00:01:18.210 --> 00:01:21.640\nI like to think of what\nare called boolean statements, so\n\n28\n00:01:21.640 --> 00:01:26.570\nthis process of making decisions, and\nany programming language involves boolean.\n\n29\n00:01:28.030 --> 00:01:30.400\nBoolean expressions, boolean values.\n\n30\n00:01:30.400 --> 00:01:33.310\nI like to think of these\nthough as questions.\n\n31\n00:01:33.310 --> 00:01:36.700\nLike you're effectively asking what\nwould be a rhetorical question,\n\n32\n00:01:36.700 --> 00:01:38.860\nand you're getting an answer.\n\n33\n00:01:38.860 --> 00:01:44.820\nEither a yes or\nno answer like did you have lunch, yes.\n\n34\n00:01:44.820 --> 00:01:48.719\nHave you done 15 jumping jacks, yes.\n\n35\n00:01:50.140 --> 00:01:53.810\nThen you can start to\nstructure your code so\n\n36\n00:01:53.810 --> 00:01:55.830\nit runs on these conditional statements.\n\n37\n00:01:56.920 --> 00:01:59.340\nBut as I said,\nI like to think of them as questions and\n\n38\n00:01:59.340 --> 00:02:02.900\nyou'll see me when I'm programming,\nI'll try to reinforce the fact that\n\n39\n00:02:02.900 --> 00:02:07.860\nthe variable naming and\nhow I read these lead to this question and\n\n40\n00:02:07.860 --> 00:02:12.050\nanswer process that will help\nreason about how these things work.\n\n41\n00:02:13.760 --> 00:02:19.690\nSo, I think the best thing to do is\njust start in the Python shell and\n\n42\n00:02:19.690 --> 00:02:23.740\nlook at how Python\nimplements these things.\n\n43\n00:02:23.740 --> 00:02:26.980\nThere is a little bit of a difference,\nbut not a big deal.\n\n44\n00:02:26.980 --> 00:02:29.170\nYou'll notice that I'm in\na folder called decisions,\n\n45\n00:02:29.170 --> 00:02:30.600\nthere's actually some files in there.\n\n46\n00:02:30.600 --> 00:02:31.130\nThey're empty.\n\n47\n00:02:31.130 --> 00:02:34.050\nThey're just placeholders so\nwe can use them later.\n\n48\n00:02:34.050 --> 00:02:35.840\nSo, we're gonna start\nwith the Python shell.\n\n49\n00:02:36.870 --> 00:02:41.850\nNow, creating a boolean,\neven though it's answering a yes,\n\n50\n00:02:41.850 --> 00:02:47.610\nno question, booleans have typically\ntwo values, true or false.\n\n51\n00:02:47.610 --> 00:02:49.610\nTrue would be an answer as yes.\n\n52\n00:02:49.610 --> 00:02:51.940\nFalse would be an answer as no.\n\n53\n00:02:51.940 --> 00:02:54.210\nSo, I ate lunch.\n\n54\n00:02:54.210 --> 00:02:54.820\nTrue.\n\n55\n00:02:54.820 --> 00:02:55.940\nDid you eat lunch?\n\n56\n00:02:55.940 --> 00:02:59.610\nYes.\nThose would be corollary\n\n57\n00:02:59.610 --> 00:03:02.780\nstatements between how\nwe would program those.\n\n58\n00:03:02.780 --> 00:03:07.640\nWe can actually use true and false\ndirectly as variables, but a couple of\n\n59\n00:03:07.640 --> 00:03:12.368\nthings about how I name variables when I\nknow they're gonna contain a boolean value\n\n60\n00:03:12.368 --> 00:03:18.820\nlike have_money and that's equal to true.\n\n61\n00:03:20.390 --> 00:03:22.930\nAnd if we use our handy\ndandy type function\n\n62\n00:03:25.100 --> 00:03:27.400\nyou will see that it\nsays it's of type bool.\n\n63\n00:03:27.400 --> 00:03:30.000\nThat means it's gonna be a true or\na false statement.\n\n64\n00:03:30.000 --> 00:03:35.330\nThose are the only two values\nthat booleans can take on.\n\n65\n00:03:35.330 --> 00:03:40.640\nNow I notice I still use\nmy snake casing here.\n\n66\n00:03:40.640 --> 00:03:43.026\nAnd I would read this, do you have money?\n\n67\n00:03:43.026 --> 00:03:46.500\nYes.\nOr have_money = True.\n\n68\n00:03:46.500 --> 00:03:51.380\nSo I think of it in my mind as a question\nthat I gonna answer yes or no to.\n\n69\n00:03:51.380 --> 00:03:52.580\nDoes that make sense?\n\n70\n00:03:52.580 --> 00:03:53.790\n>> Yeah that totally makes sense.\n\n71\n00:03:53.790 --> 00:03:58.040\nBecause when we think of decisions,\nis it am I going to do this?\n\n72\n00:03:58.040 --> 00:03:58.590\nYes or no.\n\n73\n00:03:58.590 --> 00:03:59.980\nIs this going to happen?\n\n74\n00:03:59.980 --> 00:04:00.850\nYes or no.\n\n75\n00:04:00.850 --> 00:04:04.440\nAnd if we just kind of\ntweak that just a hair and\n\n76\n00:04:04.440 --> 00:04:08.680\nwe start thinking in a way that\nthe Python programming language sees it,\n\n77\n00:04:08.680 --> 00:04:12.500\ninstead of saying yes or no, for\nthe Python it says true or false.\n\n78\n00:04:12.500 --> 00:04:15.650\nSo it's that true equalling yes and\nfalse equalling no.\n\n79\n00:04:15.650 --> 00:04:18.680\nSo if you just keep that\nstraight in your mind,\n\n80\n00:04:18.680 --> 00:04:21.970\nboolean starts to make a whole lot more\nsense to you and it's pretty simple,\n\n81\n00:04:21.970 --> 00:04:25.840\nyou have a 50, 50 shot of getting it right\ncuz it's only one value or the other.\n\n82\n00:04:25.840 --> 00:04:27.940\nIt's either gonna be true or\nit's gonna be false.\n\n83\n00:04:27.940 --> 00:04:31.280\nSo move that as you move\nforward in your programming.\n\n84\n00:04:31.280 --> 00:04:34.570\nIf you need to make a simple decision,\njust a yes or a no, a true or\n\n85\n00:04:34.570 --> 00:04:38.380\na false,\nthese boolean operators are the way to go.\n\n86\n00:04:38.380 --> 00:04:41.930\n>> Yeah, and with true,\nas we said, there is a false.\n\n87\n00:04:41.930 --> 00:04:43.620\nI want to highlight that,\n\n88\n00:04:43.620 --> 00:04:46.950\nunlike a lot of other programming\nlanguages, these are capitalized.\n\n89\n00:04:48.200 --> 00:04:56.230\nAnd just to show you, Let's say x = true,\nI actually get name 'true' is not defined.\n\n90\n00:04:56.230 --> 00:05:01.420\nIf I don't capitalize, Python interpreters\ndon't see this as a special value.\n\n91\n00:05:01.420 --> 00:05:05.130\nIt tries to find the variable\nwith the name true to assign in.\n\n92\n00:05:05.130 --> 00:05:08.640\nYou know I can do this weird\nvariable training assignment.\n\n93\n00:05:08.640 --> 00:05:09.910\nSo, that's important.\n\n94\n00:05:10.960 --> 00:05:15.760\nSo did_ go_running.\n\n95\n00:05:15.760 --> 00:05:17.100\nAnd that is False.\n\n96\n00:05:17.100 --> 00:05:19.000\nI mean for me it is,\nI don't know about you.\n\n97\n00:05:20.200 --> 00:05:22.770\n>> So I have these true and false values.\n\n98\n00:05:22.770 --> 00:05:28.780\nNow before we can start making decisions\nthat logic that our programs need to.\n\n99\n00:05:28.780 --> 00:05:33.190\nI only want it to execute this code\nwhen the answer to this question is yes.\n\n100\n00:05:33.190 --> 00:05:36.600\nOr I only want to execute this\ncode when the answer's no, or\n\n101\n00:05:36.600 --> 00:05:42.170\nhave some kind of a brain as you said,\nwe have to see how these work.\n\n102\n00:05:42.170 --> 00:05:45.770\nBut I think it's important, we'll look\nat these in the shell a little bit but\n\n103\n00:05:45.770 --> 00:05:50.370\nwe're gonna switch over to our editor\nreal quick and program those out and\n\n104\n00:05:50.370 --> 00:05:53.770\nadd some comments just so\nwe can see and remind ourselves.\n\n105\n00:05:53.770 --> 00:06:00.661\nSo I can actually say have_money and\n\n106\n00:06:00.661 --> 00:06:04.681\ndid_go_running.\n\n107\n00:06:04.681 --> 00:06:12.340\nAnd you'll notice that's normal language,\ndo you have money and\n\n108\n00:06:12.340 --> 00:06:17.530\ndid you go running Well I have money but I\ndidn't go running so overall that's false.\n\n109\n00:06:17.530 --> 00:06:21.840\nSo the and operator is our first\noperator that can operate on booleans.\n\n110\n00:06:23.580 --> 00:06:28.400\nAnd and and they have both have to be\ntrue for that entire thing to be true.\n\n111\n00:06:28.400 --> 00:06:31.160\nEven though I have some\nmoney I did not go running.\n\n112\n00:06:31.160 --> 00:06:32.360\nSo, there it is.\n\n113\n00:06:32.360 --> 00:06:35.880\n>> So because the entirety\nof the statement isn't true,\n\n114\n00:06:35.880 --> 00:06:38.535\nthat's what you get thats why\nwe get that false output.\n\n115\n00:06:38.535 --> 00:06:43.520\nIf you did go running and both of those\nsize of the equation if you will,\n\n116\n00:06:43.520 --> 00:06:45.420\nwere true,\nthen we will get that true statement.\n\n117\n00:06:45.420 --> 00:06:47.520\nBut everything has to equal one or\n\n118\n00:06:47.520 --> 00:06:52.480\nthe other before I give a true statement,\ninstead of a false statement.\n\n119\n00:06:52.480 --> 00:06:55.610\nIf both of them are false,\ndoes it come out as true?\n\n120\n00:06:55.610 --> 00:06:57.840\n>> Well that's, I don't know,\nlet's find out.\n\n121\n00:06:57.840 --> 00:07:05.090\nLet's just say, did_go_running and False.\n\n122\n00:07:05.090 --> 00:07:09.019\nSo I can actually use the keyword false\nin place instead of having a variable,\n\n123\n00:07:10.160 --> 00:07:11.590\nI'm just testing things out.\n\n124\n00:07:11.590 --> 00:07:14.820\nIn practicality I wouldn't actually\ndo this but you can see, false and\n\n125\n00:07:14.820 --> 00:07:16.368\nfalse is false.\n\n126\n00:07:16.368 --> 00:07:20.150\nSo, for and, the only time\nthe entire expression with statement\n\n127\n00:07:20.150 --> 00:07:22.780\nevaluates to true is if they're both true.\n\n128\n00:07:22.780 --> 00:07:28.060\nSo, I want this to execute when both\nof this things are answered with a yes.\n\n129\n00:07:28.060 --> 00:07:31.260\n>> Very cool, now it's not the only way we\ncan evaluate this things though, right?\n\n130\n00:07:31.260 --> 00:07:34.370\nThere's also I'm not mistaken,\nis like an or.\n\n131\n00:07:34.370 --> 00:07:35.170\n>> Yeah, yeah.\n\n132\n00:07:35.170 --> 00:07:39.730\nAnd in other languages, we have these\nweird characters that represent or,\n\n133\n00:07:39.730 --> 00:07:41.530\nthe double vertical pipes and,\n\n134\n00:07:42.540 --> 00:07:46.050\nthe whole goal of Python was to\nmake it easy to interact with.\n\n135\n00:07:46.050 --> 00:07:51.627\nSo, did_go_running or\n\n136\n00:07:51.627 --> 00:07:54.576\nhave_money.\n\n137\n00:07:54.576 --> 00:07:56.236\nSo, did you go running?\n\n138\n00:07:56.236 --> 00:07:57.419\nNo.\n\n139\n00:07:57.419 --> 00:07:58.638\nOr do you have money?\n\n140\n00:07:58.638 --> 00:07:59.312\nYes.\n\n141\n00:07:59.312 --> 00:08:04.372\nSo, with an or If either one of those\nthings, either did go running or\n\n142\n00:08:04.372 --> 00:08:10.072\nhave money or both have true, then\nthe entire statement evaluates the true.\n\n143\n00:08:10.072 --> 00:08:13.724\nThe only time that or is false,\nor is answer with no,\n\n144\n00:08:13.724 --> 00:08:17.722\nis when both things are answered\nwith a false statement.\n\n145\n00:08:17.722 --> 00:08:18.860\n>> A very, very cool.\n\n146\n00:08:18.860 --> 00:08:22.745\nNow, I know there's actually a quite\na few different ways that we can work\n\n147\n00:08:22.745 --> 00:08:23.700\nwith booleans.\n\n148\n00:08:23.700 --> 00:08:26.240\nWhat are some of the other\nones that we commonly use?\n\n149\n00:08:26.240 --> 00:08:31.970\n>> So, we want to, so these are boolean\nvalue stored in variables but\n\n150\n00:08:31.970 --> 00:08:35.370\nI'm actually get booleans\nby comparison operators.\n\n151\n00:08:35.370 --> 00:08:38.420\nI can use standard\nmathematical comparisons.\n\n152\n00:08:38.420 --> 00:08:41.927\nI can also say something like this.\n\n153\n00:08:41.927 --> 00:08:47.389\nIs three, and\nthen in order to compare equality,\n\n154\n00:08:47.389 --> 00:08:51.690\nI wanna know if three is equal to three.\n\n155\n00:08:51.690 --> 00:08:53.931\nWell, I mean, three is three.\n\n156\n00:08:53.931 --> 00:08:55.920\nSo, that is true.\n\n157\n00:08:55.920 --> 00:09:00.280\nSo, two equal signs compare the values.\n\n158\n00:09:00.280 --> 00:09:02.280\nBut, is three equal to four?\n\n159\n00:09:03.440 --> 00:09:04.986\nAnd that is fact, no.\n\n160\n00:09:04.986 --> 00:09:09.207\nNot only can I do that with numbers,\n\n161\n00:09:09.207 --> 00:09:14.555\nI can do things like\napple equal equal apple,\n\n162\n00:09:14.555 --> 00:09:17.245\nand that is also true.\n\n163\n00:09:17.245 --> 00:09:20.784\nNow, this leads to this\ncomparisons only work for\n\n164\n00:09:20.784 --> 00:09:24.840\ncertain data types that\nare what I call it, comparable.\n\n165\n00:09:27.510 --> 00:09:33.120\nCapitalization does matter in strings and\nthen with some other like things, like\n\n166\n00:09:33.120 --> 00:09:37.050\ncollections, like list and dictionaries,\nother things have to be true.\n\n167\n00:09:37.050 --> 00:09:41.990\nAnd we'll see how those work,\nwhen we see go deeper dive into those.\n\n168\n00:09:41.990 --> 00:09:43.210\nWe're gonna stick with numbers and\n\n169\n00:09:43.210 --> 00:09:46.000\ntext right now cuz they're\nreally easy to reason about.\n\n170\n00:09:46.000 --> 00:09:48.060\nAnd see how these things work.\n\n171\n00:09:48.060 --> 00:09:51.380\nFor instance, if I just hit up and\nI change this into a capital A.\n\n172\n00:09:52.660 --> 00:09:56.840\nLowercase apple is not\nequal to uppercase apple.\n\n173\n00:09:56.840 --> 00:10:00.730\nWhich brings me to an interesting point,\nwhat if I wanna see if they're not equal.\n\n174\n00:10:00.730 --> 00:10:02.830\nI wanna do something when\nthey're not the same.\n\n175\n00:10:03.970 --> 00:10:07.040\nSo I can say, hey are these not equal?\n\n176\n00:10:07.040 --> 00:10:08.420\nAnd it says, yes they're not equal.\n\n177\n00:10:09.790 --> 00:10:14.120\nSo, I have two new operators,\nI have in addition to the and and\n\n178\n00:10:14.120 --> 00:10:17.920\nor, I have equal equal, which means\nare these two things exactly the same.\n\n179\n00:10:19.220 --> 00:10:24.170\nAnd then I have not equal,\nare these things not exactly the same.\n\n180\n00:10:24.170 --> 00:10:27.740\nSo, that's a great start.\n\n181\n00:10:27.740 --> 00:10:32.779\nAnd there's one final\none that we can use with\n\n182\n00:10:32.779 --> 00:10:37.294\njust booleans, so, not have_money.\n\n183\n00:10:38.510 --> 00:10:39.490\nDo you not have money?\n\n184\n00:10:40.870 --> 00:10:43.540\nNo, I do have money.\n\n185\n00:10:43.540 --> 00:10:47.680\nSo I can actually use the word not\nas what's called a negation or\n\n186\n00:10:47.680 --> 00:10:51.240\nto flip the value from true to false or\nfrom false to true.\n\n187\n00:10:52.530 --> 00:10:55.440\nSo, we have some other comparisons,\n\n188\n00:10:55.440 --> 00:11:00.340\nbut maybe we should jump over and see how\nsome of these work in an actual script.\n\n189\n00:11:00.340 --> 00:11:05.068\nAnd then, how do these work with\nour decision making process?\n\n190\n00:11:05.068 --> 00:11:11.760\nSo, let's go ahead and\nhop over out of the shell.\n\n191\n00:11:11.760 --> 00:11:14.681\nAnd just pop into Atom.\n\n192\n00:11:19.534 --> 00:11:23.296\nAnd let's just add our shebang here.\n\n193\n00:11:23.296 --> 00:11:25.861\nWhoa, I was about to do\nsome crazy stuff there.\n\n194\n00:11:29.878 --> 00:11:33.001\nSo, there is that.\n\n195\n00:11:42.336 --> 00:11:42.880\n>> Gotta love that.\n\n196\n00:11:42.880 --> 00:11:44.010\n>> Sorry about that.\n\n197\n00:11:44.010 --> 00:11:45.190\nThose things will happen.\n\n198\n00:11:46.390 --> 00:11:48.582\nMake sure you remember your passwords.\n\n199\n00:11:48.582 --> 00:11:49.743\nThat is an important sign there.\n\n200\n00:11:49.743 --> 00:11:50.462\n>> Critical.\n\n201\n00:11:50.462 --> 00:11:52.888\n>> Very important side note to have.\n\n202\n00:11:52.888 --> 00:11:56.650\nSo, if I start here,\nlet's just start with some boolean.\n\n203\n00:11:56.650 --> 00:12:02.641\nLet's just start with\nthose have_money is True,\n\n204\n00:12:02.641 --> 00:12:06.693\ndid_go_running equals False.\n\n205\n00:12:06.693 --> 00:12:14.950\nAnd, ate_carrots equals True.\n\n206\n00:12:14.950 --> 00:12:16.750\nSo I would read these as,\ndo you have money?\n\n207\n00:12:16.750 --> 00:12:18.050\nDid you go running?\n\n208\n00:12:18.050 --> 00:12:19.690\nAnd did you eat carrots, right?\n\n209\n00:12:20.790 --> 00:12:23.310\nSo there's some weird\nlanguage things to go on.\n\n210\n00:12:23.310 --> 00:12:28.398\nBut, what are some common\nthings we saw with the and, and\n\n211\n00:12:28.398 --> 00:12:35.716\nnot, and the or, but we can combine those\ninto more kind of complex expressions.\n\n212\n00:12:35.716 --> 00:12:40.214\nSo, if I were to say X equals\n\n213\n00:12:40.214 --> 00:12:45.694\nhave_money and ate_carrots,\n\n214\n00:12:45.694 --> 00:12:51.181\nthen that would be true and true.\n\n215\n00:12:51.181 --> 00:12:58.060\nBut I want to say if that is\nnot the case for both of those.\n\n216\n00:12:58.060 --> 00:13:00.860\nSo I can add parenthesis, so\n\n217\n00:13:00.860 --> 00:13:05.850\nif I did not, if I do not have money and\nnot eating carrots.\n\n218\n00:13:05.850 --> 00:13:09.371\nIt's kinda weird to think about,\ntakes a little thought,\n\n219\n00:13:09.371 --> 00:13:11.495\nthere are some crown error in this.\n\n220\n00:13:11.495 --> 00:13:13.335\n>> Seems a bit like a shortcut so\n\n221\n00:13:13.335 --> 00:13:18.101\nthat you don't have to continually\nrewrite the code in the opposite way.\n\n222\n00:13:18.101 --> 00:13:20.783\nYou just add not to it, and\nstick it in your parenthesis and now,\n\n223\n00:13:20.783 --> 00:13:22.186\nyou've got your not statement.\n\n224\n00:13:22.186 --> 00:13:27.060\n>> Yeah, so instead of going through and\nputting a not in front of all of these,\n\n225\n00:13:27.060 --> 00:13:30.870\nand I know that I just want\nthe opposite of having_money and\n\n226\n00:13:30.870 --> 00:13:34.640\neating_carrots, then I can\njust put a not in front.\n\n227\n00:13:34.640 --> 00:13:36.100\nSo, let's go see what that looks like.\n\n228\n00:13:36.100 --> 00:13:40.570\nAnd we gotta be careful, we need to-\n>> That's right,\n\n229\n00:13:40.570 --> 00:13:42.100\nalways add your executable.\n\n230\n00:13:42.100 --> 00:13:42.600\n>> Yep.\n\n231\n00:13:46.390 --> 00:13:48.648\n>> They should make that\nlike an OSHA guideline.\n\n232\n00:13:48.648 --> 00:13:49.488\n[LAUGH] Listen ladies and\n\n233\n00:13:49.488 --> 00:13:52.260\ngentleman, you're under a severe stress\nif you don't add your executable.\n\n234\n00:13:52.260 --> 00:13:56.815\n>> Yeah, if you don't add your executable,\nif I don't see different colors\n\n235\n00:13:56.815 --> 00:13:59.406\non the command line then-\n>> We're gonna cite you.\n\n236\n00:13:59.406 --> 00:14:00.684\n>> Yeah, yeah.\n\n237\n00:14:00.684 --> 00:14:03.870\nYou messed up.\n\n238\n00:14:03.870 --> 00:14:06.910\nSo, booleans, if we, let's go ahead and\n\n239\n00:14:06.910 --> 00:14:11.060\nrun that without all the stuff on\nthe screen as I mess up again.\n\n240\n00:14:12.950 --> 00:14:13.523\nThere we go.\n\n241\n00:14:13.523 --> 00:14:17.470\nSo, if we flip back over\nthat gave us false.\n\n242\n00:14:17.470 --> 00:14:22.451\nBut did you go running or excuse me,\ndo you have money and do you have carrots?\n\n243\n00:14:22.451 --> 00:14:24.704\nTrue and true, that would be true.\n\n244\n00:14:24.704 --> 00:14:30.148\nBut I want the opposite, I like to think\nof not as to doing the opposite of that.\n\n245\n00:14:30.148 --> 00:14:32.313\n>> Yeah, and\nwhat's cool is if you look at Jason, no,\n\n246\n00:14:32.313 --> 00:14:34.250\nI told you I'm gonna call you Jason,\nall day.\n\n247\n00:14:34.250 --> 00:14:40.030\nIf you look at Justin's code here,\nour output was just the word false, right?\n\n248\n00:14:40.030 --> 00:14:41.960\nIt seems like it really\ndidn't do a whole lot.\n\n249\n00:14:41.960 --> 00:14:44.010\nBut what is he doing is\ndeclaring a few variables.\n\n250\n00:14:44.010 --> 00:14:46.360\nHe's giving them the values\nthat they need, right?\n\n251\n00:14:46.360 --> 00:14:50.080\nHe's got the true, false, and true for\neach one of the variables, respectively.\n\n252\n00:14:50.080 --> 00:14:54.100\nAnd then he creates a new variable\nthat is negating the fact that two of\n\n253\n00:14:54.100 --> 00:14:55.820\nthose variables are true.\n\n254\n00:14:55.820 --> 00:14:57.730\nSo it's basically turned\nthem into not statements and\n\n255\n00:14:57.730 --> 00:15:02.960\nthen say, print the value that's in that\nvariable that he's creating which is X for\n\n256\n00:15:02.960 --> 00:15:06.810\nsake of the specific, whats the word?\n\n257\n00:15:06.810 --> 00:15:08.180\nExample, that's the word I'm looking for.\n\n258\n00:15:08.180 --> 00:15:09.470\nThis specific example.\n\n259\n00:15:09.470 --> 00:15:10.400\nI know, it gets you every time.\n\n260\n00:15:10.400 --> 00:15:12.760\nIt's a big difficult word to say and\nremember.\n\n261\n00:15:12.760 --> 00:15:15.137\nSo, when we actually run the code,\nwhat do we get?\n\n262\n00:15:15.137 --> 00:15:19.628\nWe only got that print function because\nthat's the only output that's happening\n\n263\n00:15:19.628 --> 00:15:20.743\ninside of our code.\n\n264\n00:15:20.743 --> 00:15:24.207\nSo even though there could be a lot\ngoing on, the output might be very,\n\n265\n00:15:24.207 --> 00:15:25.167\nvery simplistic.\n\n266\n00:15:25.167 --> 00:15:29.173\nAnd if you only see false you think, wow,\nman, your code didn't do a whole lot.\n\n267\n00:15:29.173 --> 00:15:32.163\nMaybe it actually did\na vast number of things but\n\n268\n00:15:32.163 --> 00:15:35.140\nonly the output seemed very simplistic.\n\n269\n00:15:35.140 --> 00:15:36.420\n>> Yeah, and typically,\n\n270\n00:15:36.420 --> 00:15:39.780\nyou're not just going to print true or\nfalse to the output.\n\n271\n00:15:39.780 --> 00:15:41.380\nThis is to illustrate some things.\n\n272\n00:15:41.380 --> 00:15:44.550\nBut I want to highlight that, before we\nmove on, I want to highlight something.\n\n273\n00:15:44.550 --> 00:15:48.150\nIf you have tried to program\nin any other thing and I know,\n\n274\n00:15:48.150 --> 00:15:53.476\nyou do some Bash stuff and I've done some\nvarious things in a plethora of languages.\n\n275\n00:15:53.476 --> 00:15:56.971\nThis reads more or less,\nlike natural language.\n\n276\n00:15:56.971 --> 00:15:59.328\nI mean you've got some of\nthe data structure stuff.\n\n277\n00:15:59.328 --> 00:16:05.170\nBut okay, have money,\nyeah did you go running, no, ate carrots,\n\n278\n00:16:05.170 --> 00:16:09.846\nyeah, and then did you not have money,\nand carrots?\n\n279\n00:16:09.846 --> 00:16:14.500\nOkay, yeah there's still some\nmathy type things there, but\n\n280\n00:16:14.500 --> 00:16:19.040\nway friendlier than some of the other\nprogramming languages that we've\n\n281\n00:16:19.040 --> 00:16:23.310\nencountered before or excuse me that\nyou may have encountered before.\n\n282\n00:16:23.310 --> 00:16:30.110\nSo is this easier than\nit would look in bash.\n\n283\n00:16:30.110 --> 00:16:33.960\n>> So far,\nit's about the same in complexity.\n\n284\n00:16:33.960 --> 00:16:37.680\nMaybe no, I'd say it's about even so far.\n\n285\n00:16:37.680 --> 00:16:41.170\nEven stevens, for a bash versus\nPython at this point in time.\n\n286\n00:16:41.170 --> 00:16:44.580\nBut we'll see as we continue\nto get a little more complex.\n\n287\n00:16:44.580 --> 00:16:47.490\nSpeaking of more complex we're gonna use\n\n288\n00:16:47.490 --> 00:16:49.855\nthese things to actually\nmake some decisions right?\n\n289\n00:16:49.855 --> 00:16:55.690\n>> Yeah,yeah, so this is just a general\noverview of the things we can do, but\n\n290\n00:16:55.690 --> 00:17:01.150\nfor instance,\nI'm actually going to get rid of this.\n\n291\n00:17:01.150 --> 00:17:05.620\nAnd this is what's called an if statement.\n\n292\n00:17:05.620 --> 00:17:07.830\nSo an if statement,\nas our program is running,\n\n293\n00:17:07.830 --> 00:17:10.430\nour interpreter is ingesting this text.\n\n294\n00:17:10.430 --> 00:17:14.825\nI can use what is called\nan if statement to have basic\n\n295\n00:17:14.825 --> 00:17:20.230\ndecisions and here's how that looks.\n\n296\n00:17:21.360 --> 00:17:26.916\nI'm going to say if you do not have\n\n297\n00:17:26.916 --> 00:17:33.179\nthese things then print,\nyou need to eat some carrots.\n\n298\n00:17:34.330 --> 00:17:39.100\n>> And Justin I noticed right\naway that your text editor did\n\n299\n00:17:39.100 --> 00:17:43.680\na little funny thing it indented for\nyou unless you did that?\n\n300\n00:17:43.680 --> 00:17:48.560\n>> No, well that's so\nthese rich text editors are very powerful.\n\n301\n00:17:48.560 --> 00:17:54.390\nAs I said before the standard for Python\nand you'll notice it jumps like this.\n\n302\n00:17:54.390 --> 00:17:58.990\nThe standard is actually four spaces,\nso in a regular text editor,\n\n303\n00:17:58.990 --> 00:18:04.370\nI would have to hit spacebar four times.\n\n304\n00:18:04.370 --> 00:18:06.808\nIf you don't match those up appropriately,\n\n305\n00:18:06.808 --> 00:18:10.150\nthen you'll get all of those\nweird indentation errors.\n\n306\n00:18:10.150 --> 00:18:12.540\nHowever, because I'm using\nAtom as well as Sublime and\n\n307\n00:18:12.540 --> 00:18:15.810\nthings, when I hit enter,\nit can kind of yeah.\n\n308\n00:18:15.810 --> 00:18:18.420\nYou need to indent there.\n\n309\n00:18:18.420 --> 00:18:19.850\nI'm glad you brought up the indentation.\n\n310\n00:18:20.990 --> 00:18:26.480\nThis means when I indent one level,\nif this\n\n311\n00:18:26.480 --> 00:18:32.270\nis evaluates to true, if this whole\nthing ends up being true, okay.\n\n312\n00:18:32.270 --> 00:18:37.611\nThen, all of the code that is\nindented one level at least or\n\n313\n00:18:37.611 --> 00:18:42.954\nmore is nested under that if statement,\nand you'll see,\n\n314\n00:18:48.326 --> 00:18:50.054\nYou'll see things like this.\n\n315\n00:18:52.515 --> 00:19:00.350\nRight so, if this is true, this whole\nthing evaluates to true, print this.\n\n316\n00:19:00.350 --> 00:19:02.978\nBut notice this is not indented.\n\n317\n00:19:02.978 --> 00:19:07.720\nSo, let's hop over into the terminal and\nsee how that actually looks.\n\n318\n00:19:07.720 --> 00:19:12.780\nIt says, I like turtles and\nthat is not indented.\n\n319\n00:19:12.780 --> 00:19:15.860\nWell, that's because as we\nsaw when we printed this out,\n\n320\n00:19:15.860 --> 00:19:17.790\nthis entire thing is false.\n\n321\n00:19:17.790 --> 00:19:22.740\nSo if this is false then\nthis code doesn't run.\n\n322\n00:19:22.740 --> 00:19:26.910\nI now have the ability to\ncode up some things and\n\n323\n00:19:26.910 --> 00:19:30.740\nsay, only when these are happening\ndo you run this code.\n\n324\n00:19:31.870 --> 00:19:37.740\nSo if I take out this not statement which\nin effect will make flip it back to true.\n\n325\n00:19:37.740 --> 00:19:39.520\nThen let's see what happens.\n\n326\n00:19:40.890 --> 00:19:43.410\nYou need to eat some carrots,\nI like turtles.\n\n327\n00:19:43.410 --> 00:19:46.280\nSo, it'll start here,\n\n328\n00:19:46.280 --> 00:19:52.550\nit'll run everything that's indented and\nthen it hops out of that if statement.\n\n329\n00:19:52.550 --> 00:19:57.870\nThis is a strong divergence from\nother programming languages.\n\n330\n00:19:57.870 --> 00:20:01.134\nThis is called kind of\nyour block scoping or\n\n331\n00:20:01.134 --> 00:20:05.497\nhow you create code blocks\nwith associated parameters.\n\n332\n00:20:06.693 --> 00:20:10.360\nDoes, you said you've done some C++,\nright?\n\n333\n00:20:10.360 --> 00:20:13.280\nOr C-\n>> Long time ago, long time ago.\n\n334\n00:20:13.280 --> 00:20:16.270\n>> Long time ago,\nyou had all kinds of curly braces.\n\n335\n00:20:16.270 --> 00:20:17.220\n>> Yeah, everywhere.\n\n336\n00:20:17.220 --> 00:20:18.550\n>> Yeah, so\n\n337\n00:20:18.550 --> 00:20:23.539\nPython wants to get away from that because\nless amount of special characters that you\n\n338\n00:20:23.539 --> 00:20:28.130\nhave to write the less likely you are to\nmess those special characters up.\n\n339\n00:20:28.130 --> 00:20:31.960\nAnd I don't even really need these\nparentheses at this point in time.\n\n340\n00:20:33.550 --> 00:20:36.620\nAlso there is an introduction\nof a new special character.\n\n341\n00:20:36.620 --> 00:20:37.800\nMaybe I can zoom in here.\n\n342\n00:20:39.070 --> 00:20:43.630\nWhen I have these expressions that\nare going to have indentation,\n\n343\n00:20:43.630 --> 00:20:44.380\nlike an if statement.\n\n344\n00:20:44.380 --> 00:20:46.250\nThis is the first thing\nwe've seen like this.\n\n345\n00:20:47.460 --> 00:20:49.160\nI usually end with a colon.\n\n346\n00:20:49.160 --> 00:20:52.220\nNot a semicolon, but\nI think it's valuable to see.\n\n347\n00:20:52.220 --> 00:20:54.550\nI've done some programming before.\n\n348\n00:20:54.550 --> 00:20:57.660\nWhat if I just wham, I hit that semicolon.\n\n349\n00:20:57.660 --> 00:21:03.080\nGoing on my marry way, and\noo, we now have a new error.\n\n350\n00:21:03.080 --> 00:21:04.770\nIt's called a syntax error.\n\n351\n00:21:04.770 --> 00:21:08.580\nSo if you misspell something,\nand what I mean by misspell,\n\n352\n00:21:08.580 --> 00:21:13.290\nthat the language doesn't like,\nit will tell you right there where it is.\n\n353\n00:21:14.450 --> 00:21:15.150\nThat should be a colon.\n\n354\n00:21:17.500 --> 00:21:23.660\nNow I only, there's some weirdness here.\n\n355\n00:21:23.660 --> 00:21:30.390\nI only want to print that I like turtles\npart if the first part is not true.\n\n356\n00:21:30.390 --> 00:21:35.360\nSo, if I do not have money and\nhave not eaten any carrots,\n\n357\n00:21:35.360 --> 00:21:37.110\nI wanna print that second part.\n\n358\n00:21:37.110 --> 00:21:40.920\nSo, right now I like turtles\nprints all the time so\n\n359\n00:21:40.920 --> 00:21:45.190\nwhatever code would come after\nthe indented block would always run.\n\n360\n00:21:46.290 --> 00:21:51.350\nBut I have this extra\nstrategy this else statement.\n\n361\n00:21:51.350 --> 00:21:56.570\nAnd what this means is this is\nalways attached to an if, so\n\n362\n00:21:56.570 --> 00:21:59.569\nif the first part doesn't\nrun skip to this other part.\n\n363\n00:22:00.610 --> 00:22:03.970\nBut, Daniel do you think this is\ngonna run as we've written it?\n\n364\n00:22:03.970 --> 00:22:04.880\n>> Well, let's see here.\n\n365\n00:22:04.880 --> 00:22:06.910\nIt says, if you have money and\n\n366\n00:22:06.910 --> 00:22:11.030\nate carrots then you're gonna print\nthat you need to eat some carrots.\n\n367\n00:22:11.030 --> 00:22:16.860\nSo I'm assuming that,\nboth of those statements have to be false.\n\n368\n00:22:16.860 --> 00:22:17.855\nLet me remember here.\n\n369\n00:22:17.855 --> 00:22:22.970\nate_carrots is true so\nyou did eat carrots so, and I do.\n\n370\n00:22:22.970 --> 00:22:25.680\n>> Yeah yeah, and you do have the money,\nyou do have money.\n\n371\n00:22:25.680 --> 00:22:27.060\nSo those both are true so\n\n372\n00:22:27.060 --> 00:22:30.420\nit should print that you need\nto eat some carrots statement.\n\n373\n00:22:30.420 --> 00:22:35.820\n>> Okay, so but\nas you've seen what Python has,\n\n374\n00:22:35.820 --> 00:22:38.811\ndo you think this is\na syntactically correct program?\n\n375\n00:22:40.140 --> 00:22:43.010\n>> You know, so\nfar it's pretty lenient on you.\n\n376\n00:22:44.180 --> 00:22:46.400\nI feel like this is a trick question.\n\n377\n00:22:46.400 --> 00:22:47.123\n>> [LAUGH]\n>> So,\n\n378\n00:22:47.123 --> 00:22:50.230\nI wanna say absolutely positively maybe.\n\n379\n00:22:50.230 --> 00:22:52.110\n>> Absolutely, possibly.\n\n380\n00:22:52.110 --> 00:22:54.150\n>> Very possible this\ncould definitely correct.\n\n381\n00:22:54.150 --> 00:22:58.130\nI'll put my money on, no.\n\n382\n00:22:58.130 --> 00:22:59.820\nThis is not syntactically correct.\n\n383\n00:22:59.820 --> 00:23:01.360\nThere's only one way to find out.\n\n384\n00:23:01.360 --> 00:23:02.300\nRun that sucker.\n\n385\n00:23:02.300 --> 00:23:04.350\n>> Yeah, so let's run it.\n\n386\n00:23:05.610 --> 00:23:09.600\nIndentationError, now I did\nthis intentionally cuz it says,\n\n387\n00:23:09.600 --> 00:23:12.140\nhey this is where the error is.\n\n388\n00:23:12.140 --> 00:23:16.000\nOur Python interpreter\nknows that this else\n\n389\n00:23:16.000 --> 00:23:18.140\nshould have code that's\nassociated with it.\n\n390\n00:23:18.140 --> 00:23:20.170\nRight now it has nothing.\n\n391\n00:23:20.170 --> 00:23:23.780\nAnd it says I'm assuming this next\nline that you wrote right there\n\n392\n00:23:25.230 --> 00:23:28.290\nthat's supposed to be the else statement.\n\n393\n00:23:28.290 --> 00:23:30.030\nYeah, that's right okay.\n\n394\n00:23:30.030 --> 00:23:33.910\nSo if I tap this in notice\nthis structure follows.\n\n395\n00:23:33.910 --> 00:23:37.350\nSo that if everything associated\nwith if is indented one level.\n\n396\n00:23:37.350 --> 00:23:42.462\nAnd then when I pop back out to the else\neverything associated with the else\n\n397\n00:23:42.462 --> 00:23:47.085\nrunning is one level indentation,\nwhich again, is four spaces.\n\n398\n00:23:47.085 --> 00:23:51.368\n>> So it's not just the fact that it's\ntrying to help you keep everything put\n\n399\n00:23:51.368 --> 00:23:52.612\ntogether visually,\n\n400\n00:23:52.612 --> 00:23:57.173\nbut it's actually meaningful as far as\nthe programming language goes to say,\n\n401\n00:23:57.173 --> 00:24:01.732\nif you want to join that print statement\ninto your else, it needs to be indented\n\n402\n00:24:01.732 --> 00:24:05.986\nunderneath it so that Python knows\nthat it goes with the else statement.\n\n403\n00:24:05.986 --> 00:24:06.881\nAbsolutely.\n\n404\n00:24:06.881 --> 00:24:11.570\nSo, right now, as this runs,\nyou did wonderful through the reason.\n\n405\n00:24:11.570 --> 00:24:13.380\nThese are both true, so this is true.\n\n406\n00:24:13.380 --> 00:24:14.520\nThis should run.\n\n407\n00:24:14.520 --> 00:24:17.120\nBut the last time, I like turtles printed\n\n408\n00:24:17.120 --> 00:24:19.690\nregardless of whether that if\nstatement ran or not, right?\n\n409\n00:24:19.690 --> 00:24:20.570\n>> That's right.\n>> So,\n\n410\n00:24:20.570 --> 00:24:23.860\nif we clear, and we look,\nyou need to eat some carrots.\n\n411\n00:24:23.860 --> 00:24:29.520\nBut I now have the ability of saying\nonly when these things are true\n\n412\n00:24:30.570 --> 00:24:35.230\nthen print this or\ndo whatever, delete some files,\n\n413\n00:24:35.230 --> 00:24:39.614\ngo to the internet and\nfind some downloads.\n\n414\n00:24:39.614 --> 00:24:44.330\nOtherwise print this or do something else.\n\n415\n00:24:44.330 --> 00:24:47.060\nSo I'd like to think\nof it as an either or.\n\n416\n00:24:47.060 --> 00:24:48.800\nSo either do this.\n\n417\n00:24:48.800 --> 00:24:52.697\nOr do this versus without\nthe else statement.\n\n418\n00:24:56.296 --> 00:25:00.770\nOoh, this is what I like\nto call an either and.\n\n419\n00:25:00.770 --> 00:25:06.426\nThat's not technically correct, but maybe\ndo this, but always do this thing thing.\n\n420\n00:25:06.426 --> 00:25:09.120\n>> So kinda a both and really.\n\n421\n00:25:09.120 --> 00:25:12.320\nI want you to go through this,\nand I want you to print.\n\n422\n00:25:12.320 --> 00:25:14.610\nYou need to eat some carrots\nif the statement is true and\n\n423\n00:25:14.610 --> 00:25:16.930\nalso print I like turtles.\n\n424\n00:25:16.930 --> 00:25:20.900\nBut if we want one or the other,\nthen we need to give it more conditions,\n\n425\n00:25:20.900 --> 00:25:24.470\nmore decision making ability and\nthat's when we throw in that else.\n\n426\n00:25:24.470 --> 00:25:28.798\nNow I will tell you that at this point now\nyou've actually become easier than bash.\n\n427\n00:25:28.798 --> 00:25:32.990\nBecause with bash I would have to\nclose out my if statement using a phi\n\n428\n00:25:32.990 --> 00:25:35.430\nto let it know this is\nthe end of my if but\n\n429\n00:25:35.430 --> 00:25:38.060\nhere you just it's the indentation\nthat lets it know.\n\n430\n00:25:38.060 --> 00:25:42.670\n>> Yep, so\nindentation is the delimiting factor.\n\n431\n00:25:42.670 --> 00:25:46.280\nNow this can be hard to deal\nwith because technically you\n\n432\n00:25:46.280 --> 00:25:49.480\nknow I can nest as many of these\nas I want to and come in here and\n\n433\n00:25:49.480 --> 00:25:52.970\nstart another if and indent further and\nfurther and further.\n\n434\n00:25:52.970 --> 00:25:56.870\nBut if you use editors and you start\nwith simple and you just start adding\n\n435\n00:25:56.870 --> 00:26:02.500\nadditional kind of properties,\nthen it's not really a huge deal.\n\n436\n00:26:02.500 --> 00:26:11.000\nBut, let's look at how this else\nwould work if this had the opposite.\n\n437\n00:26:12.830 --> 00:26:15.800\nSo I'm gonna go over and run this,\n\n438\n00:26:15.800 --> 00:26:20.910\nthe last time that first part was true,\nthis time it is false.\n\n439\n00:26:20.910 --> 00:26:24.020\nAnd it in fact displays the else block.\n\n440\n00:26:25.230 --> 00:26:28.840\nSo we now have some basic decision making,\n\n441\n00:26:28.840 --> 00:26:33.120\nthat we can utilize to\nstructure our program.\n\n442\n00:26:33.120 --> 00:26:35.930\nOnly do this when this is true,\nonly do this part when this is true,\n\n443\n00:26:35.930 --> 00:26:40.320\notherwise do this, but\nright now, what do you see?\n\n444\n00:26:40.320 --> 00:26:41.680\nWhat kind of stands out?\n\n445\n00:26:41.680 --> 00:26:43.290\nDoes something stand about.\n\n446\n00:26:43.290 --> 00:26:45.260\n>> Yeah,\nsomething does stand out to me here, and\n\n447\n00:26:45.260 --> 00:26:48.580\nit's really that it's, even though\nwe've gotten more complex, obviously,\n\n448\n00:26:48.580 --> 00:26:51.860\nwith our decision making abilities,\n>> It's still very basic and\n\n449\n00:26:51.860 --> 00:26:56.060\nnormally, I don't have just one or\nanother option to choose.\n\n450\n00:26:56.060 --> 00:26:59.660\nI might have a multitude of options\nthat I need to go through and\n\n451\n00:26:59.660 --> 00:27:03.480\nthat's really where we need to\nget into next is what if I have\n\n452\n00:27:03.480 --> 00:27:06.500\nfive different options that I wanna\nchoose or three different options even?\n\n453\n00:27:06.500 --> 00:27:09.060\nIt gets beyond that just this or that.\n\n454\n00:27:09.060 --> 00:27:09.890\nHow do we make that happen?\n\n455\n00:27:11.330 --> 00:27:13.900\nAnd so a standard if else statement is,\n\n456\n00:27:13.900 --> 00:27:18.370\nthe assumption is you have two\npossibilities, a yes or a no.\n\n457\n00:27:18.370 --> 00:27:23.270\nBut there is that maybe or\nif you're comparing something,\n\n458\n00:27:23.270 --> 00:27:26.680\nyou are trying to look for something,\nyou may have multitude of options.\n\n459\n00:27:26.680 --> 00:27:31.772\nAnd maybe we can combine that with\nsome of that user interaction that we\n\n460\n00:27:31.772 --> 00:27:36.781\nlearned last episode and\njust write something kind of interesting,\n\n461\n00:27:36.781 --> 00:27:41.095\nkind of hokey, that really drives\nhome the point that I want\n\n462\n00:27:41.095 --> 00:27:45.096\nto see based on several\nconditions what this is [SOUND].\n\n463\n00:27:45.096 --> 00:27:47.078\nI'm gonna try that one more time.\n\n464\n00:27:47.078 --> 00:27:50.317\n>> [LAUGH]\n>> Let's see what this actually is capable\n\n465\n00:27:50.317 --> 00:27:50.920\nof doing.\n\n466\n00:27:50.920 --> 00:27:54.101\nSo [COUGH] I'm gonna hop\nover to my user decision.\n\n467\n00:27:54.101 --> 00:27:57.020\nI'm just gonna copy my shebang here.\n\n468\n00:27:59.723 --> 00:28:01.421\nMaybe.\n\n469\n00:28:01.421 --> 00:28:05.431\nI usually run a dark theme so\nI can see all the highlighting, but\n\n470\n00:28:05.431 --> 00:28:07.334\nit's hard to see sometimes.\n\n471\n00:28:07.334 --> 00:28:09.355\nSo let's see.\n\n472\n00:28:09.355 --> 00:28:13.020\nLet's say I wanted to ask\na person their favorite color.\n\n473\n00:28:13.020 --> 00:28:15.416\nAll right,\nI'm writing just a general program.\n\n474\n00:28:15.416 --> 00:28:21.560\nSo, favorite_color = raw_input,\n\n475\n00:28:21.560 --> 00:28:27.900\nand I'm gonna say,\nwhat is your favorite color?\n\n476\n00:28:29.370 --> 00:28:30.480\nAnd I have a space there.\n\n477\n00:28:30.480 --> 00:28:34.750\nNotice that space there, that'll\nactually be preserved in the output,\n\n478\n00:28:34.750 --> 00:28:37.920\nit's a real sticking point for\nsomething, they're like that's weird.\n\n479\n00:28:37.920 --> 00:28:41.390\nSo what the program will do with this\nuser input is it'll come here and\n\n480\n00:28:41.390 --> 00:28:44.840\nwait for a person to type something and\nhit Enter.\n\n481\n00:28:45.880 --> 00:28:48.990\nNow, what are some,\nyou said your favorite color was blue, but\n\n482\n00:28:48.990 --> 00:28:50.180\nwhat are some other favorite colors?\n\n483\n00:28:50.180 --> 00:28:54.640\nI like green,\nsome people like orange, yellow.\n\n484\n00:28:54.640 --> 00:28:57.460\n>> Red.\n>> So this was a case where okay,\n\n485\n00:28:57.460 --> 00:29:02.160\nI want to do different things depending on\n>> What is this, if you answer blue,\n\n486\n00:29:02.160 --> 00:29:02.940\nI wanna do this.\n\n487\n00:29:02.940 --> 00:29:04.340\nIf you answer green, I wanna do this.\n\n488\n00:29:05.960 --> 00:29:10.390\nThis is a perfect way to introduce\nwhat is called an else if or an el if.\n\n489\n00:29:10.390 --> 00:29:17.322\nSo, I start with if\nfavorite_color is equal to blue,\n\n490\n00:29:17.322 --> 00:29:23.060\nI'll just say, hey that is Daniel's also.\n\n491\n00:29:27.520 --> 00:29:29.400\nNow this runs into an interesting problem.\n\n492\n00:29:29.400 --> 00:29:33.310\nI got some weird highlighting issues.\n\n493\n00:29:33.310 --> 00:29:36.010\n>> That's right, the highlighting\nwent a little wonky on us there.\n\n494\n00:29:36.010 --> 00:29:41.140\nI assume it has something to do with the\nfact that we have a single quotation mark\n\n495\n00:29:41.140 --> 00:29:44.860\ninside of our statement there.\n\n496\n00:29:44.860 --> 00:29:46.190\n>> Yep.\nIt does, and\n\n497\n00:29:46.190 --> 00:29:52.260\nthat's really why I like these rich text\neditors because they'll give you hints.\n\n498\n00:29:52.260 --> 00:29:53.130\nUse your editor.\n\n499\n00:29:53.130 --> 00:29:56.610\nIf we were in notepad,\nyou may have 30 of these and\n\n500\n00:29:56.610 --> 00:30:02.050\nyou go, yeah let me go fix that,\nrun go fix, run go fix.\n\n501\n00:30:02.050 --> 00:30:06.640\nSo because in Python I can have a series\nof characters with either single quotes or\n\n502\n00:30:06.640 --> 00:30:10.140\ndouble quotes, if I know there\nis going to be a contraction or\n\n503\n00:30:10.140 --> 00:30:12.280\nsome single quote inside of a string.\n\n504\n00:30:12.280 --> 00:30:14.640\nI'll just put double quotes at\nthe other end and I'm good.\n\n505\n00:30:16.390 --> 00:30:20.600\nSo if the favorite color is blue then,\n\n506\n00:30:20.600 --> 00:30:27.010\nhey that's Daniels also.Elif so\nthis stands for else if.\n\n507\n00:30:27.010 --> 00:30:30.520\nNow the difference between else if and\njust an else\n\n508\n00:30:30.520 --> 00:30:35.180\nis that else if takes a condition like,\njust like the if statement does.\n\n509\n00:30:35.180 --> 00:30:39.902\nSo if the favorite color is orange.\n\n510\n00:30:45.392 --> 00:30:49.400\nI can just say, hmmmm tasty.\n\n511\n00:30:51.390 --> 00:30:55.740\nAnd then you know what, those are the only\ntwo colors that I worry about.\n\n512\n00:30:55.740 --> 00:30:57.530\nSo let's just say.\n\n513\n00:30:57.530 --> 00:30:58.030\nElse.\n\n514\n00:30:59.250 --> 00:31:00.490\nPrint.\n\n515\n00:31:00.490 --> 00:31:05.250\nThat is also a great color.\n\n516\n00:31:05.250 --> 00:31:11.860\nNow I've created a way to interact with\nmy user, based on input from them.\n\n517\n00:31:13.110 --> 00:31:14.860\nThis lead to hey.\n\n518\n00:31:14.860 --> 00:31:17.060\nWhat are the files you wanna\ndelete from your system?\n\n519\n00:31:17.060 --> 00:31:18.778\nI'll just give you all the file names,\nand you go cool.\n\n520\n00:31:18.778 --> 00:31:24.250\n[SOUND] This would be like\nthe touch command or the megdor or\n\n521\n00:31:24.250 --> 00:31:29.279\nany of those things, but\nlet's see how that works.\n\n522\n00:31:29.279 --> 00:31:34.166\nAs always,\nwe have to change our permissions.\n\n523\n00:31:39.066 --> 00:31:40.157\nLet's go with yours.\n\n524\n00:31:40.157 --> 00:31:40.801\n>> All right.\nLet's do it.\n\n525\n00:31:40.801 --> 00:31:43.786\n>> Blue.\n>> Blue.\n\n526\n00:31:43.786 --> 00:31:45.550\nAnd notice it stops.\n\n527\n00:31:45.550 --> 00:31:51.250\nRight so when this gets to\nthe very end it stops executing.\n\n528\n00:31:51.250 --> 00:32:00.786\nBut I notice something this is\nwhat's called a run time error.\n\n529\n00:32:00.786 --> 00:32:04.003\nThis is something unexpected\nthat I didn't plan for.\n\n530\n00:32:04.003 --> 00:32:05.546\nIt doesn't make my program break.\n\n531\n00:32:05.546 --> 00:32:08.402\nIt just doesn't run as\nI anticipated it to.\n\n532\n00:32:08.402 --> 00:32:12.930\nDaniel, what do you think the problem is?\n\n533\n00:32:12.930 --> 00:32:15.500\n>> Obviously,\nit has something to do with the fact that,\n\n534\n00:32:15.500 --> 00:32:21.000\nwhen we defined what my favorite\ncolor was, we used a capital B and\n\n535\n00:32:21.000 --> 00:32:25.530\nnot a lowercase b, so it's seeing it,\nlike you said before, that is important.\n\n536\n00:32:25.530 --> 00:32:30.060\nCase is sensitive when it comes to\ncreating a value with a string.\n\n537\n00:32:30.060 --> 00:32:31.670\n>> Right, so\n\n538\n00:32:31.670 --> 00:32:36.580\nthis is a perfect time where we can use\nthose compound operators and be like,\n\n539\n00:32:36.580 --> 00:32:40.820\nyeah, I need to go back and account for\nif someone doesn't capitalize the letter.\n\n540\n00:32:40.820 --> 00:32:49.390\nSo I could say or\nif favorite_color == 'blue'.\n\n541\n00:32:49.390 --> 00:32:52.810\nSo if the favorite color is\nblue with a capital B, or\n\n542\n00:32:52.810 --> 00:32:57.530\nif it's blue with a lowercase B,\nthen print these things.\n\n543\n00:32:57.530 --> 00:32:58.860\nLet's see if that changes the behavior.\n\n544\n00:33:01.600 --> 00:33:04.030\nAnd it does in fact change the behavior.\n\n545\n00:33:04.030 --> 00:33:08.350\nAnd let's just, we know that our last\nelse statement works because originally,\n\n546\n00:33:08.350 --> 00:33:09.810\nthis didn't work.\n\n547\n00:33:09.810 --> 00:33:11.555\nBut what if I type orange?\n\n548\n00:33:14.584 --> 00:33:21.000\nThen that now catches, but\ndoes it execute anything else?\n\n549\n00:33:21.000 --> 00:33:23.470\nSo it doesn't, this is not true.\n\n550\n00:33:23.470 --> 00:33:24.910\nIt is neither one of these.\n\n551\n00:33:24.910 --> 00:33:29.067\nSo it skips this one, hops right here,\nand says, is this true?\n\n552\n00:33:29.067 --> 00:33:30.600\nAnd it goes yep.\n\n553\n00:33:30.600 --> 00:33:32.950\nBut it doesn't come to the else.\n\n554\n00:33:32.950 --> 00:33:36.170\nIt won't come to any other else ifs.\n\n555\n00:33:36.170 --> 00:33:37.980\nIt will only execute that one and\n\n556\n00:33:37.980 --> 00:33:42.690\nthen hop out of that chain of\ndecisions that we've made.\n\n557\n00:33:42.690 --> 00:33:48.560\n>> So obviously, every time it gets\nto a decision that is valid and\n\n558\n00:33:48.560 --> 00:33:52.910\ndoes that decision, and once it reaches\nthat and it executes it, then it's done.\n\n559\n00:33:52.910 --> 00:33:55.305\nIt just jumps out of the program and\ncompletes and\n\n560\n00:33:55.305 --> 00:33:56.888\nbrings you back to your prompt.\n\n561\n00:33:56.888 --> 00:34:02.320\n>> Yep, and just to prove this and\nthen I like to think about.\n\n562\n00:34:02.320 --> 00:34:04.480\nI'm just gonna have it say red.\n\n563\n00:34:06.040 --> 00:34:09.960\nSo here if we type orange,\nit will catch here, print this.\n\n564\n00:34:09.960 --> 00:34:13.310\nAnd if it were to catch on either\none of these type of statements,\n\n565\n00:34:13.310 --> 00:34:15.660\nthen it would catch on red next.\n\n566\n00:34:15.660 --> 00:34:21.210\nBut it still only prints\nthat one statement.\n\n567\n00:34:21.210 --> 00:34:26.724\nSo I can have a giant list of these\nthings that just incrementally,\n\n568\n00:34:26.724 --> 00:34:32.548\nokay, [NOISE] here's the one I want\nto write and it does a single thing.\n\n569\n00:34:32.548 --> 00:34:35.807\n>> So I guess what that leaves us\nwith what does it do if we type in,\n\n570\n00:34:35.807 --> 00:34:38.660\ndoes that else catch,\nI guess that'll be anything.\n\n571\n00:34:38.660 --> 00:34:41.120\nI could put my favorite\ncolor as potato and\n\n572\n00:34:41.120 --> 00:34:43.350\nit's going to say that's a great color.\n\n573\n00:34:43.350 --> 00:34:44.180\n>> I don't know, let's find out.\n\n574\n00:34:44.180 --> 00:34:44.750\n>> Yeah.\n\n575\n00:34:44.750 --> 00:34:47.040\n>> So, I do like potatoes.\n\n576\n00:34:47.040 --> 00:34:48.380\nBut I don't know, is it a color?\n\n577\n00:34:49.600 --> 00:34:50.770\nI want a potato crayon.\n\n578\n00:34:50.770 --> 00:34:53.120\n>> Yeah, [LAUGH] a potato crayon.\n\n579\n00:34:53.120 --> 00:34:54.710\n>> That is also a great color.\n\n580\n00:34:54.710 --> 00:34:59.450\nSo this is very naive, but that else is\na great thing if, when all else fails-\n\n581\n00:34:59.450 --> 00:35:00.340\n>> It's a catch all.\n\n582\n00:35:00.340 --> 00:35:02.075\n>> Yeah, do this thing.\n\n583\n00:35:02.075 --> 00:35:04.950\nSo that gives us some decision making.\n\n584\n00:35:04.950 --> 00:35:08.320\nAnd you'll see these kind of crop up,\nso we have and or\n\n585\n00:35:08.320 --> 00:35:11.110\nand then we have comparisons, right?\n\n586\n00:35:11.110 --> 00:35:16.010\nEqual to, not equal to,\nwe can also do greater than, less than,\n\n587\n00:35:16.010 --> 00:35:18.320\nless than or equal to,\ngreater than or equal to.\n\n588\n00:35:18.320 --> 00:35:20.690\nThat's good for\nif you're counting something.\n\n589\n00:35:20.690 --> 00:35:22.390\nThose will come up.\n\n590\n00:35:22.390 --> 00:35:25.230\nAnd then we have not, and\n\n591\n00:35:25.230 --> 00:35:30.170\nthat pretty much covers the ability to\nmake decisions based on a range of values.\n\n592\n00:35:30.170 --> 00:35:31.090\n>> Very, very cool stuff.\n\n593\n00:35:31.090 --> 00:35:35.297\nObviously now you can start to see our\nprograms are definitely becoming more\n\n594\n00:35:35.297 --> 00:35:38.121\ncomplex, you have the ability\nto make a decision,\n\n595\n00:35:38.121 --> 00:35:42.211\neven multiple decisions if necessary\ngiven multiple different values.\n\n596\n00:35:42.211 --> 00:35:44.737\nAnd now, they'll become more powerful,\n\n597\n00:35:44.737 --> 00:35:47.832\nthey'll become much more\nuseful as we continue on.\n\n598\n00:35:47.832 --> 00:35:50.410\nAnd I know that's not where\nthe power ends, Justin.\n\n599\n00:35:50.410 --> 00:35:54.010\nBut I'm looking at the clock and\nwe have run out of time for this episode.\n\n600\n00:35:54.010 --> 00:35:56.560\nBut we've got plenty more\ncoming down the line so\n\n601\n00:35:56.560 --> 00:35:58.000\nI hope that you'll be back with us.\n\n602\n00:35:58.000 --> 00:35:59.750\nAnd I hope everybody out there\nwill be back with us as well.\n\n603\n00:35:59.750 --> 00:36:02.840\nI guess we're going to have to\nwrap up this episode though.\n\n604\n00:36:02.840 --> 00:36:05.847\nSigning off for ITProTV,\nI've been your host Daniel Lowrie.\n\n605\n00:36:05.847 --> 00:36:07.008\n>> And I'm Justin Dennison.\n\n606\n00:36:07.008 --> 00:36:08.935\n>> And we'll see you next time.\n\n607\n00:36:08.935 --> 00:36:17.100\n[SOUND]\n\n",
          "vimeoId": "158183521"
        },
        {
          "description": "In this episode, Daniel and Justin explore how to make your Python code more modular by introducing Functions. They begin by explaining what a function is and how to create one or many, and even use functions nested inside other functions to create a more structured program/script.",
          "length": "1849",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-4-functions-030516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-4-functions-030516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-4-functions-030516-1-sm.jpg",
          "title": "Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:08.087\n[MUSIC]\n\n2\n00:00:08.087 --> 00:00:12.221\nAll right, greetings everyone, and welcome\nto another great episode of IT ProTV.\n\n3\n00:00:12.221 --> 00:00:14.200\nI'm your host, Daniel Lowrie, and\n\n4\n00:00:14.200 --> 00:00:18.800\nin today's episode we are continuing\non with our Python programming series.\n\n5\n00:00:18.800 --> 00:00:21.630\nJoining me back in the studio today\nis none other than the man, the myth,\n\n6\n00:00:21.630 --> 00:00:24.370\nthe legend, that is Mr. Justin Dennison.\n\n7\n00:00:24.370 --> 00:00:25.830\nJustin, welcome back to the show sir.\n\n8\n00:00:25.830 --> 00:00:26.480\nHow are you doing?\n\n9\n00:00:26.480 --> 00:00:28.540\n>> Thank you Daniel, it's, I'm doing well.\n\n10\n00:00:28.540 --> 00:00:32.370\nI feel like though you're definitely\ncreating this persona and\n\n11\n00:00:32.370 --> 00:00:34.910\nI don't know if I can live up to it.\n\n12\n00:00:34.910 --> 00:00:36.460\nBut I will definitely try.\n\n13\n00:00:37.810 --> 00:00:40.140\nSo today you know we're\nlooking at functions,\n\n14\n00:00:40.140 --> 00:00:43.730\nwe've actually already used some\nfunctions, didn't even know it.\n\n15\n00:00:43.730 --> 00:00:44.950\nWe didn't really call them that.\n\n16\n00:00:44.950 --> 00:00:48.420\nThey exit from the Python Interpreter.\n\n17\n00:00:48.420 --> 00:00:49.990\nDefinitely a function call.\n\n18\n00:00:49.990 --> 00:00:54.200\nThat type function, so we can wrap\nour mind around how this data looks.\n\n19\n00:00:54.200 --> 00:00:55.730\nAlso a function call, but\n\n20\n00:00:55.730 --> 00:00:59.220\nwe'll look at some other built\nin functions along the way.\n\n21\n00:00:59.220 --> 00:01:03.460\nBut what if I wanna\nbundle up some code that\n\n22\n00:01:03.460 --> 00:01:06.520\nI don't want to repeat this all the time.\n\n23\n00:01:06.520 --> 00:01:10.070\nI have this repetitious\nthing that I want to do.\n\n24\n00:01:10.070 --> 00:01:12.700\nI can put that in a function,\nI can define my own function.\n\n25\n00:01:12.700 --> 00:01:15.410\nBut there are some things\nwe need to look out for.\n\n26\n00:01:15.410 --> 00:01:20.130\nJust like with the if, else-if, and\nelse statements, we have to watch for\n\n27\n00:01:20.130 --> 00:01:21.590\nindentation.\n\n28\n00:01:21.590 --> 00:01:26.630\nSo the best way to look at how\nthose work Is Python Shell,\n\n29\n00:01:26.630 --> 00:01:29.520\nbecause it'll give you immediate\nfeedback if you mess up.\n\n30\n00:01:29.520 --> 00:01:33.040\nSo we're gonna start there, and\nthen we're gonna move over and\n\n31\n00:01:33.040 --> 00:01:38.240\nbuild a Python script that,\nI don't know, again, a little hokey.\n\n32\n00:01:38.240 --> 00:01:41.670\nBut we're building up to something\nthat I find very interesting, and\n\n33\n00:01:41.670 --> 00:01:44.580\nwould be very helpful from\na day to day systems admin,\n\n34\n00:01:44.580 --> 00:01:47.920\nor just playing around,\ndata analysis type deal.\n\n35\n00:01:47.920 --> 00:01:50.690\n>> Very cool, now Justin I do\nwanna stop you right there.\n\n36\n00:01:50.690 --> 00:01:52.750\nYou've said that we're using functions and\nwe've used them,\n\n37\n00:01:52.750 --> 00:01:54.910\nwe haven't even realized it yet.\n\n38\n00:01:54.910 --> 00:01:58.700\nFor those viewers out there that might\nnot be up on the programming lingo,\n\n39\n00:01:58.700 --> 00:02:00.890\nwhat exactly is a function?\n\n40\n00:02:00.890 --> 00:02:01.790\n>> That's a great question.\n\n41\n00:02:01.790 --> 00:02:08.060\nSo you know when you hear a function,\ntypically a lot of people go, math no.\n\n42\n00:02:08.060 --> 00:02:15.290\nDon't worry, it's kinda mathy but it is\neffectively like this bundle of black box.\n\n43\n00:02:15.290 --> 00:02:18.750\nAgain a black box where we,\nit's kinda like our Python Interpreter.\n\n44\n00:02:18.750 --> 00:02:22.730\nBut a function, a well-written function,\nthey don't all have to be well-written.\n\n45\n00:02:22.730 --> 00:02:27.390\nThey take some inputs, and\nthey give you something out.\n\n46\n00:02:27.390 --> 00:02:30.910\nAnd particularly,\nyou want that to be deterministically.\n\n47\n00:02:30.910 --> 00:02:35.170\nAnd what I mean by that is if I\ngive it the same thing twice,\n\n48\n00:02:35.170 --> 00:02:38.410\nI get the same thing out, every time.\n\n49\n00:02:38.410 --> 00:02:43.950\nSo it's very important that we think about\nfunctions of those and, keep in mind, when\n\n50\n00:02:43.950 --> 00:02:49.790\nI say it comes out or puts in, we have\nthe option of what goes in is nothing.\n\n51\n00:02:49.790 --> 00:02:51.430\nSo it's kinda weird.\n\n52\n00:02:51.430 --> 00:02:53.880\nI can give it nothing and\nit'll still do something.\n\n53\n00:02:53.880 --> 00:02:57.850\nAnd it may run and\nnot necessarily spit out anything.\n\n54\n00:02:57.850 --> 00:03:02.132\nAnd we'll look at a couple of how\nthose differ in construction,\n\n55\n00:03:02.132 --> 00:03:06.731\nbut if we're worried about math,\nwe're just using a math word, but\n\n56\n00:03:06.731 --> 00:03:09.911\nit [CROSSTALK]\n>> It's not necessarily actual algorithms.\n\n57\n00:03:09.911 --> 00:03:11.510\n[LAUGH]\n>> Yeah, yeah, yeah.\n\n58\n00:03:11.510 --> 00:03:15.670\nSo the algorithms that does take some time\nto develop those, but that's the wonderful\n\n59\n00:03:15.670 --> 00:03:20.230\nthing about Python is I have an idea in\nfive minutes have a working prototype.\n\n60\n00:03:21.250 --> 00:03:21.750\nRight.\n\n61\n00:03:23.720 --> 00:03:24.770\nMaybe it's not the best written.\n\n62\n00:03:24.770 --> 00:03:28.380\nMaybe the algorithm or how I thought\nabout it is the the best way.\n\n63\n00:03:28.380 --> 00:03:32.790\nBut, I have something that works\nthat allows me to iterate quickly.\n\n64\n00:03:32.790 --> 00:03:35.750\nAnd that was one of a the processes for,\n\n65\n00:03:35.750 --> 00:03:40.680\none of the reasons that people choose\nPython to quickly get up to speed.\n\n66\n00:03:40.680 --> 00:03:42.920\n>> Well it looks like you're not\nthe only one that thinks that way.\n\n67\n00:03:42.920 --> 00:03:45.745\nOur chatroom says this nerd stuff is so\ncool.\n\n68\n00:03:45.745 --> 00:03:47.170\n>> [LAUGH]\n>> So I'm glad we're\n\n69\n00:03:47.170 --> 00:03:49.990\nentertaining our viewers as\nwell as educating them as well.\n\n70\n00:03:49.990 --> 00:03:51.600\nHence the term edutainment, right?\n\n71\n00:03:51.600 --> 00:03:53.040\nThat's what we like to do around here.\n\n72\n00:03:53.040 --> 00:03:56.490\nSo Justin now that we kind of understand\nwhat functions are take it away.\n\n73\n00:03:56.490 --> 00:03:59.760\nShow us how we can use things things and\nwhere should we begin.\n\n74\n00:03:59.760 --> 00:04:03.940\n>> All right.\nSo as always kind of my flow and\n\n75\n00:04:03.940 --> 00:04:06.480\nyou'll hear those people,\ndevelopers get in their flow.\n\n76\n00:04:06.480 --> 00:04:07.890\nProgrammers get in their flow.\n\n77\n00:04:07.890 --> 00:04:11.930\nWhen you put in your music and you're\nlike all right, I'm in it, I'm ready.\n\n78\n00:04:11.930 --> 00:04:14.920\nI usually start when I'm writing\nsomething in the new in the shell.\n\n79\n00:04:14.920 --> 00:04:19.850\nSo we're gonna go ahead and\npop into the Python Interpreter and\n\n80\n00:04:19.850 --> 00:04:23.300\nlet's review those quick couple of\nfunctions that we've already used and\n\n81\n00:04:23.300 --> 00:04:25.980\ntalk about what those mean.\n\n82\n00:04:25.980 --> 00:04:31.840\nSo if I type exit(), open close,\nthat tells me it is a function.\n\n83\n00:04:31.840 --> 00:04:32.880\nSo behind the scenes,\n\n84\n00:04:32.880 --> 00:04:37.270\nthere's other code running, but\nnotice there's nothing in parenthesis.\n\n85\n00:04:37.270 --> 00:04:39.485\nThat means I don't have\nto give it an input.\n\n86\n00:04:41.500 --> 00:04:45.360\nAlso it's not necessarily\ngonna give me something back.\n\n87\n00:04:45.360 --> 00:04:49.280\nBecause this function as we found out,\nkills our process.\n\n88\n00:04:49.280 --> 00:04:54.670\nSo I give it nothing and it gives nothing\nout that's one of the rarities but\n\n89\n00:04:54.670 --> 00:05:00.600\nit's still is a bundled set of code that\ncan be thought of a magical black box.\n\n90\n00:05:00.600 --> 00:05:03.770\nAnd you heard that term a lot\nif you read any blogs or\n\n91\n00:05:03.770 --> 00:05:06.890\ngo looking how do I do x, y, or z.\n\n92\n00:05:06.890 --> 00:05:10.760\nPeople will go it's functions\nare these black boxes.\n\n93\n00:05:10.760 --> 00:05:16.130\nBut I think more of an interesting\none that we've used is this type.\n\n94\n00:05:17.210 --> 00:05:20.840\nSo type again a function\nwe see the parentheses.\n\n95\n00:05:20.840 --> 00:05:22.000\nThat tells me it's a function.\n\n96\n00:05:22.000 --> 00:05:27.200\nIt takes what is called a parameter,\nit takes a single parameter in this case,\n\n97\n00:05:27.200 --> 00:05:28.720\nwhich is the number 1.\n\n98\n00:05:28.720 --> 00:05:33.250\nSo, it takes that in and\nwhat does it spit out if I hit enter.\n\n99\n00:05:33.250 --> 00:05:39.379\nIt will actually tell me, hey,\nit's a type it's a <type 'int>.\n\n100\n00:05:39.379 --> 00:05:41.100\nAnd, if I give it a 1 again.\n\n101\n00:05:41.100 --> 00:05:43.400\nIt will tell me that\nit is an integer also.\n\n102\n00:05:43.400 --> 00:05:47.080\nSo, that's what I mean by that\ndeterministic functional executions.\n\n103\n00:05:47.080 --> 00:05:50.800\nSo when I give it a one,\nit's gonna give me a type int.\n\n104\n00:05:50.800 --> 00:05:53.240\nBut if I give it something different like\n\n105\n00:05:54.450 --> 00:05:59.690\nthe word money or\n\n106\n00:06:01.900 --> 00:06:06.520\nthe word laughter, in quotes, then.\n\n107\n00:06:06.520 --> 00:06:08.600\nThis will always say hey\nthese are of type string.\n\n108\n00:06:10.800 --> 00:06:15.830\nNow I do have to be careful I can do\nstuff that seems like it would work.\n\n109\n00:06:18.060 --> 00:06:20.610\nBut if I try to give it\nsomething without quotes and\n\n110\n00:06:20.610 --> 00:06:23.720\nI haven't defined laughter as a variable.\n\n111\n00:06:23.720 --> 00:06:27.320\nThen it goes I don't know what you're\ntalking about that's not defined so.\n\n112\n00:06:29.360 --> 00:06:30.620\nI don't have a name here.\n\n113\n00:06:30.620 --> 00:06:35.597\nWhen I see these errors I just think of\nthe interpreter in the back of my mind\n\n114\n00:06:35.597 --> 00:06:36.571\ngoing [NOISE].\n\n115\n00:06:36.571 --> 00:06:39.591\n>> You're giving it something that's\noutside of the scope of it's normal\n\n116\n00:06:39.591 --> 00:06:40.190\noperations.\n\n117\n00:06:40.190 --> 00:06:42.000\n>> Right.\n>> You haven't given it any meaning so\n\n118\n00:06:42.000 --> 00:06:45.340\nit just says okay you asked for\nthe type of this,\n\n119\n00:06:45.340 --> 00:06:49.530\nbut you've never defined what the type is\nand I don't know what it is by default.\n\n120\n00:06:49.530 --> 00:06:51.962\nSo I'm just gonna give you an error and\n\n121\n00:06:51.962 --> 00:06:54.933\nhopefully we can come to\nan agreement on that.\n\n122\n00:06:54.933 --> 00:06:57.637\n>> Exactly, but\nyou'll notice if I go back and\n\n123\n00:06:57.637 --> 00:07:01.877\nactually define laughter as a variable\njust with a string hahaahha so\n\n124\n00:07:01.877 --> 00:07:06.065\nI've created the container laughter and\nI've put in it hahaahha.\n\n125\n00:07:06.065 --> 00:07:09.290\nIf I go back and\nrun type(laughter), it'll say,\n\n126\n00:07:09.290 --> 00:07:13.190\nhey the thing that's stored in\nthat variable is a type string.\n\n127\n00:07:14.300 --> 00:07:17.000\nSo those are the two functions\nthat we've used already.\n\n128\n00:07:17.000 --> 00:07:19.030\nDidn't even know we were using functions.\n\n129\n00:07:19.030 --> 00:07:20.500\nIt's that easy.\n\n130\n00:07:20.500 --> 00:07:24.780\nBut I think what's really powerful\nis being able to create your own.\n\n131\n00:07:24.780 --> 00:07:29.390\nYou provided this power over,\nI'd like to say your digital domain.\n\n132\n00:07:29.390 --> 00:07:31.530\nI wanna do whatever I want to.\n\n133\n00:07:33.040 --> 00:07:35.150\nAnd we can do that functions.\n\n134\n00:07:36.490 --> 00:07:40.030\nFunctions are great way of something\nthat you keep typing over and over and\n\n135\n00:07:40.030 --> 00:07:40.610\nover again.\n\n136\n00:07:40.610 --> 00:07:45.530\nIf you find that pattern, then you gonna\npull that out into an appropriately named\n\n137\n00:07:45.530 --> 00:07:47.969\nfunction with whatever it needs to run.\n\n138\n00:07:47.969 --> 00:07:51.749\nAnd that way you can single line it,\nget deterministic,\n\n139\n00:07:51.749 --> 00:07:56.790\nrepetition, also reduces syntax errors,\nand reduces kind of this non,\n\n140\n00:07:56.790 --> 00:08:01.941\nI thought this was gonna evaluate to\na string but it actually gave me a number.\n\n141\n00:08:01.941 --> 00:08:05.804\nBecause I type something wrong,\nso the runtime and syntax errors,\n\n142\n00:08:05.804 --> 00:08:09.710\nonce you develop a function,\nends up helping you a great deal.\n\n143\n00:08:09.710 --> 00:08:13.630\n>> So basically, what you're telling is\nthat if you come to the point in creating\n\n144\n00:08:13.630 --> 00:08:16.750\ncode that you start seeing yourself\ndoing something over and over and\n\n145\n00:08:16.750 --> 00:08:18.590\nover again, and it's very workable.\n\n146\n00:08:18.590 --> 00:08:20.630\nIt works and not just that piece of code.\n\n147\n00:08:20.630 --> 00:08:24.340\nMaybe you've written another program,\nand it works great in that as well.\n\n148\n00:08:24.340 --> 00:08:27.120\nI can take that block of code and\ncreate a function out of it.\n\n149\n00:08:27.120 --> 00:08:30.760\nIt's a repeatable function that does\nsomething that I can always expect\n\n150\n00:08:30.760 --> 00:08:34.630\nthis type of output from and\nreuse it over and over again.\n\n151\n00:08:34.630 --> 00:08:37.780\nAgain, reduces the amount of\ntyping I have to which I love.\n\n152\n00:08:37.780 --> 00:08:40.190\nI don't know about you,\nyou're a much better typist than I am.\n\n153\n00:08:40.190 --> 00:08:40.790\nThat's for sure.\n\n154\n00:08:40.790 --> 00:08:42.480\nI take forever to type this stuff up.\n\n155\n00:08:42.480 --> 00:08:45.270\nI'm prone to syntax error so\nthat helps me relieve that.\n\n156\n00:08:45.270 --> 00:08:47.820\nI just have to call\nthe function instead of\n\n157\n00:08:47.820 --> 00:08:49.930\nretyping out everything that\nis inside the function.\n\n158\n00:08:49.930 --> 00:08:55.240\n>> Exactly, so I think a good way, you\nknow we talked in a very abstract sense.\n\n159\n00:08:55.240 --> 00:08:57.790\nLet's actually look at a function,\nhow functions formatted.\n\n160\n00:08:57.790 --> 00:09:01.730\nWe're gonna use the shell to do that so\nwe can get immediate feedback if we do\n\n161\n00:09:01.730 --> 00:09:07.030\nsomething wrong so we are not chasing,\nrevs, I fix, it still broke.\n\n162\n00:09:07.030 --> 00:09:12.520\nSo I'm actually gonna kill the process\nreal quick and go back into the shell\n\n163\n00:09:12.520 --> 00:09:16.820\njust so I don't have stuff popping\nat the bottom of the screen for now.\n\n164\n00:09:16.820 --> 00:09:20.630\nNow a function there's\na key word it's kind of\n\n165\n00:09:22.420 --> 00:09:28.070\nlike if, or else, or else if, and you'll\nnotice from Atom those were key words.\n\n166\n00:09:28.070 --> 00:09:32.240\nFunctions have a keyword\nassociated with defining them.\n\n167\n00:09:32.240 --> 00:09:33.980\nIt's actually called def.\n\n168\n00:09:33.980 --> 00:09:38.221\nSo define is what I like to think of it,\ndefine a function, and\n\n169\n00:09:38.221 --> 00:09:43.618\nlet's just create you know something\nthat we're all understandable, add.\n\n170\n00:09:43.618 --> 00:09:48.736\nAnd we're gonna start with\na function that takes parameters\n\n171\n00:09:48.736 --> 00:09:54.255\ncuz the reasoning about not taking\nin values is kinda abstract and\n\n172\n00:09:54.255 --> 00:09:58.988\nhard, but let's just say it takes num and\nanother num.\n\n173\n00:10:01.554 --> 00:10:05.188\nAnd, all functions we're\ngonna have similar to if and\n\n174\n00:10:05.188 --> 00:10:10.950\nelse if we're gonna have that block, that\nindented block so it ends with a colon.\n\n175\n00:10:10.950 --> 00:10:13.230\nSo I'm defining the function called add.\n\n176\n00:10:13.230 --> 00:10:18.550\nIt takes a num and another num,\nnow I know you're afraid of math,\n\n177\n00:10:18.550 --> 00:10:21.770\nbut we know how adding works\nwith two numbers, right?\n\n178\n00:10:21.770 --> 00:10:22.539\nTwo plus three is?\n\n179\n00:10:22.539 --> 00:10:23.259\n>> Is potato.\n\n180\n00:10:23.259 --> 00:10:25.475\n>> Is potato, or it's six no, I,\n\n181\n00:10:25.475 --> 00:10:30.360\nwell I'm not as good in math as\nI thought I was, but it's okay.\n\n182\n00:10:30.360 --> 00:10:34.350\nBut in the shell when you\nhit Enter with these colons,\n\n183\n00:10:34.350 --> 00:10:36.180\nyou actually see these dot, dot, dot.\n\n184\n00:10:36.180 --> 00:10:38.968\nThat means that you've started\nsomething that you haven't finished.\n\n185\n00:10:38.968 --> 00:10:43.675\nIf I hit Enter,\nit goes hey, you messed up,\n\n186\n00:10:43.675 --> 00:10:47.240\nit's an indentation error.\n\n187\n00:10:47.240 --> 00:10:52.800\nIt still expects the indentation that you\nwould normally use to be used in a shell\n\n188\n00:10:52.800 --> 00:10:54.910\nbut or excuse me, yeah.\n\n189\n00:10:54.910 --> 00:10:58.525\nThat you used in your other programs, but\n\n190\n00:10:58.525 --> 00:11:00.870\nyou'll get an immediate\nfeedback if you mess that up.\n\n191\n00:11:00.870 --> 00:11:03.010\nIt's good to practice with this.\n\n192\n00:11:03.010 --> 00:11:08.650\nNot a great way to keep functions cuz\nyou have to write them every time but\n\n193\n00:11:08.650 --> 00:11:11.752\nlet's just say we're going to take and\n\n194\n00:11:11.752 --> 00:11:15.520\nsay the result is equal\nto num plus another num.\n\n195\n00:11:17.576 --> 00:11:20.950\nAnd we're just going to print, the result.\n\n196\n00:11:22.890 --> 00:11:24.510\nAnd notice I got no errors.\n\n197\n00:11:24.510 --> 00:11:26.470\nI have indentation.\n\n198\n00:11:26.470 --> 00:11:34.300\nAnd, I was able to use variables here that\nare not necessarily all over the place.\n\n199\n00:11:34.300 --> 00:11:39.550\nAnd that's one of the weird hiccups that\npeople have when they're using functions.\n\n200\n00:11:39.550 --> 00:11:41.750\nIf I define a variable within a function,\n\n201\n00:11:41.750 --> 00:11:43.389\nit only exists while\nthat function's running.\n\n202\n00:11:44.510 --> 00:11:47.410\nIt kind of gets crushed out of\nexistence once the function ends.\n\n203\n00:11:47.410 --> 00:11:48.510\n>> So it's not global.\n\n204\n00:11:48.510 --> 00:11:50.080\n>> Right.\nAnd it's not global,\n\n205\n00:11:50.080 --> 00:11:53.300\nI end up with this nice,\nessentially a scratch pad.\n\n206\n00:11:53.300 --> 00:11:55.241\n>> Yeah.\n>> That I can go all right, I got it.\n\n207\n00:11:55.241 --> 00:11:56.297\nThrow that away.\n\n208\n00:11:56.297 --> 00:12:00.560\nSo I can't use result anywhere else.\n\n209\n00:12:00.560 --> 00:12:02.140\nBut result is defining my function.\n\n210\n00:12:02.140 --> 00:12:06.180\nSo if I say add 1 and 3 I get 4.\n\n211\n00:12:06.180 --> 00:12:08.110\nIt just prints 4.\n\n212\n00:12:08.110 --> 00:12:12.465\nIf I wanna say 2, 3.\n\n213\n00:12:12.465 --> 00:12:18.118\nWhat if I.\n\n214\n00:12:18.118 --> 00:12:19.465\n>> The dreaded syntax error.\n\n215\n00:12:19.465 --> 00:12:21.410\n>> The dreaded syntax error.\n\n216\n00:12:21.410 --> 00:12:24.350\nSo this can still crop up.\n\n217\n00:12:24.350 --> 00:12:27.910\nThere are ways around this,\nI could use if statements,\n\n218\n00:12:27.910 --> 00:12:32.399\nand see if the types are of integer,\nand do one thing versus the other.\n\n219\n00:12:32.399 --> 00:12:37.372\nAnd we'll actually save that more\nrobust function definition for\n\n220\n00:12:37.372 --> 00:12:43.270\nour text editor, just because it's\na lot to type, and what if I mess up?\n\n221\n00:12:43.270 --> 00:12:49.660\nAnd everybody is like but\nI have add but I use this print.\n\n222\n00:12:51.110 --> 00:12:53.890\nWell print is that's\n\n223\n00:12:53.890 --> 00:12:57.510\nnot typically not a great way to pass\naround information within Python.\n\n224\n00:12:58.540 --> 00:13:03.050\nThere is a new, you haven't seen it,\nbut when I say spit out there\n\n225\n00:13:03.050 --> 00:13:07.478\nis a word that will mean spit out,\nso if I go back to redefine add.\n\n226\n00:13:10.658 --> 00:13:18.230\nBut instead of printing result,\nI can actually just return result.\n\n227\n00:13:18.230 --> 00:13:27.073\nAnd now, I can say x equals add(1,2) and\n\n228\n00:13:27.073 --> 00:13:32.840\nnow I can spit that back out.\n\n229\n00:13:32.840 --> 00:13:38.220\nThat's very much like that raw_input\nfunction that gathers user input.\n\n230\n00:13:38.220 --> 00:13:43.170\nSo now with a return,\nI can do variable assignments and sort.\n\n231\n00:13:43.170 --> 00:13:44.200\n>> Very very cool stuff.\n\n232\n00:13:44.200 --> 00:13:45.970\nNow, we're growing in power,\n\n233\n00:13:45.970 --> 00:13:49.550\nwe're growing in complexity,\nto try to get these functions built.\n\n234\n00:13:49.550 --> 00:13:52.260\nBut, do we have the ability to\ncreate multiple functions and\n\n235\n00:13:52.260 --> 00:13:53.130\nmake them more together?\n\n236\n00:13:53.130 --> 00:13:55.420\nOr do we just have to do\neverything inside of our function?\n\n237\n00:13:55.420 --> 00:13:56.720\n>> That's a great question.\n\n238\n00:13:56.720 --> 00:14:01.370\nSo, I think now is a good\ntime to take a step back.\n\n239\n00:14:01.370 --> 00:14:06.850\nLook at how an appropriately\nstructured Python program would look.\n\n240\n00:14:06.850 --> 00:14:09.220\nFor making sure it runs correctly.\n\n241\n00:14:09.220 --> 00:14:12.330\nI know Windows will sometimes\ndo some weird stuff\n\n242\n00:14:15.070 --> 00:14:18.950\nif you're not formatted correctly\nwith some special keywords.\n\n243\n00:14:18.950 --> 00:14:22.540\nSo I think we should go ahead and\ntake a look at that.\n\n244\n00:14:22.540 --> 00:14:24.304\nSo let's go ahead and\nopen our text editor.\n\n245\n00:14:29.750 --> 00:14:34.370\nAnd, I already have my shebang set up and\nI usually come down at the bottom, and\n\n246\n00:14:34.370 --> 00:14:36.473\nnow that we know this if statement.\n\n247\n00:14:40.049 --> 00:14:45.900\nThere's a special key, my goodness,\njust gonna have to keep that open.\n\n248\n00:14:47.640 --> 00:14:48.928\nAre you sabotaging me?\n\n249\n00:14:48.928 --> 00:14:52.046\n>> [LAUGH]\n>> So.\n\n250\n00:14:56.690 --> 00:15:01.380\nThis says if the name equals\nmain that's a weird thing.\n\n251\n00:15:01.380 --> 00:15:04.460\nThis double underscore, and\nthese are kind of hard to see.\n\n252\n00:15:04.460 --> 00:15:05.440\nLet's zoom in here.\n\n253\n00:15:07.300 --> 00:15:11.680\nSo this is an underscore, underscore,\nname, underscore, underscore.\n\n254\n00:15:11.680 --> 00:15:16.780\nThese are called a dunder name,\ndunder main.\n\n255\n00:15:16.780 --> 00:15:22.030\nThat's Python verbiage for\nI have double underscores on either side.\n\n256\n00:15:22.030 --> 00:15:24.910\nThese are kind of like magic keywords.\n\n257\n00:15:24.910 --> 00:15:28.810\nThis is saying if I'm running this\nprogram as the main program, so\n\n258\n00:15:28.810 --> 00:15:34.260\nif I type Python my_functions or\n\n259\n00:15:34.260 --> 00:15:38.370\nI create an executable,\nthis is the part that will run.\n\n260\n00:15:38.370 --> 00:15:43.145\nSo, that way this allows me to\nfind functions up above it and\n\n261\n00:15:43.145 --> 00:15:44.683\nuse them below it.\n\n262\n00:15:44.683 --> 00:15:50.862\nSo, for instance if I wanted to say, let's\njust stay with our add function right,\n\n263\n00:15:50.862 --> 00:15:55.806\nbut because Python is an interpreted\nlanguage it needs to have this\n\n264\n00:15:55.806 --> 00:15:59.538\nfunction definition before\nit's able to use it.\n\n265\n00:15:59.538 --> 00:16:03.114\nSo, I can say def add (num,\n\n266\n00:16:03.114 --> 00:16:08.778\nanother_num): and I can just say return,\n\n267\n00:16:08.778 --> 00:16:13.547\nand I'm gonna shorthand this just for\n\n268\n00:16:13.547 --> 00:16:19.070\nkeeping things on screen and readable.\n\n269\n00:16:19.070 --> 00:16:21.070\nSo this says return,\ndon't add it together.\n\n270\n00:16:23.510 --> 00:16:26.811\nSo if I print(x), right,\n\n271\n00:16:26.811 --> 00:16:31.220\nthen I can come over here and just say.\n\n272\n00:16:33.370 --> 00:16:35.340\nAnd it does in fact print 3.\n\n273\n00:16:35.340 --> 00:16:39.879\nSo the only parts that will run\nare what are inside this main area.\n\n274\n00:16:41.240 --> 00:16:45.700\nSo if this being run by itself,\nthis is the part that's gonna run, and\n\n275\n00:16:45.700 --> 00:16:51.127\nI can define as many functions\nas I want to up here.\n\n276\n00:16:51.127 --> 00:16:55.320\nSo, does that answer your question?\n\n277\n00:16:57.390 --> 00:17:00.170\nI wanted to make sure I got\neverything scoped out there.\n\n278\n00:17:00.170 --> 00:17:03.760\n>> Yeah, I'm starting to follow you,\nit's making some sense here.\n\n279\n00:17:03.760 --> 00:17:08.640\nYou have to start by defining\nwhat functions are that\n\n280\n00:17:08.640 --> 00:17:12.900\nyou wanna use for this, and now you\nhave to call that into effect by saying,\n\n281\n00:17:12.900 --> 00:17:16.890\nlisten, I want you to ignore all\nthose functions you see up above\n\n282\n00:17:16.890 --> 00:17:20.010\nme by using the other cool name,\nthe dunder, I like that.\n\n283\n00:17:20.010 --> 00:17:21.490\nThat's interesting.\n\n284\n00:17:21.490 --> 00:17:25.280\nUsing the dunder there and saying, this\nis really where the main block of code is\n\n285\n00:17:25.280 --> 00:17:30.110\ngoing to start, and once you have reached\nhere, now you can go back up to find\n\n286\n00:17:30.110 --> 00:17:34.810\nwhere I'm calling these functions from and\nuse them as necessary as I call them.\n\n287\n00:17:34.810 --> 00:17:36.630\nYeah, I think I'm following you here.\n\n288\n00:17:37.640 --> 00:17:41.290\n>> You are most definitely following me,\ngreat to hear.\n\n289\n00:17:41.290 --> 00:17:46.260\nSo I have input, outputs,\nI can use this main portion.\n\n290\n00:17:48.580 --> 00:17:50.940\nBut when would we use these?\n\n291\n00:17:50.940 --> 00:17:54.125\nLet's say we wanted something that does\n\n292\n00:17:54.125 --> 00:18:00.310\nprint_three of whatever we pass it,\nright, some parameter.\n\n293\n00:18:00.310 --> 00:18:03.998\nAnd we just say print(param).\n\n294\n00:18:03.998 --> 00:18:08.806\nThat's four and that's one.\n\n295\n00:18:08.806 --> 00:18:13.765\n[LAUGH] So [COUGH] if I find\nmyself printing three times in\n\n296\n00:18:13.765 --> 00:18:18.626\na bunch of places,\nI can now just say print_three.\n\n297\n00:18:21.940 --> 00:18:25.459\nAnd it'll print them three at a time,\nwhich is handy.\n\n298\n00:18:25.459 --> 00:18:31.684\nBut where would we use this?\n\n299\n00:18:31.684 --> 00:18:37.649\nI can modulize my code, I can keep it\ntogether, I can define new functionality,\n\n300\n00:18:37.649 --> 00:18:43.555\nI can reuse this, I can define things\nthat work together, it's pretty handy.\n\n301\n00:18:43.555 --> 00:18:46.581\nExcuse me.\n\n302\n00:18:46.581 --> 00:18:50.825\nBut, I'm gonna zoom out\nof here a little bit.\n\n303\n00:18:50.825 --> 00:18:55.477\nWow, I can't see,\n\n304\n00:18:55.477 --> 00:19:02.880\nthere we go, sorry about that.\n\n305\n00:19:08.338 --> 00:19:13.655\nSo if we wanted some user_input,\nand that's raw_input,\n\n306\n00:19:18.918 --> 00:19:20.497\nWhat is your favorite word?\n\n307\n00:19:28.955 --> 00:19:37.129\nAnd then num_times = raw_input.\n\n308\n00:19:40.068 --> 00:19:44.386\nHow many times do you want to print that?\n\n309\n00:19:47.704 --> 00:19:52.853\nAnd then we now have two inputs, so\n[COUGH] and this is a little extra bang\n\n310\n00:19:52.853 --> 00:19:58.265\nfor your buck, I'm gonna write\na function that will take favorite word,\n\n311\n00:19:58.265 --> 00:20:02.138\nuser_input, and\nactually print that many times.\n\n312\n00:20:02.138 --> 00:20:06.020\nAnd I'm generalizing\neffectively this print_three.\n\n313\n00:20:06.020 --> 00:20:10.590\nSo this will always print three times,\nbut I notice\n\n314\n00:20:10.590 --> 00:20:15.300\nsometimes I need to print four times or\nfive times and I see this pattern.\n\n315\n00:20:15.300 --> 00:20:21.949\nI can say print_num_times(what,\n\n316\n00:20:21.949 --> 00:20:25.101\nhow_many):.\n\n317\n00:20:25.101 --> 00:20:27.210\n>> So you're saying,\nwhat do you want me to print, and\n\n318\n00:20:27.210 --> 00:20:28.780\nhow many times do you want me to print it?\n\n319\n00:20:28.780 --> 00:20:32.195\n>> Right, and\nI'm making some assumptions here.\n\n320\n00:20:32.195 --> 00:20:36.290\nSo we've talked about types,\nI'm gonna assume that the what, for\n\n321\n00:20:36.290 --> 00:20:39.010\nnow, is always a string.\n\n322\n00:20:39.010 --> 00:20:44.520\nAnd I'm gonna assume how many is\nalways a valid integer number, okay?\n\n323\n00:20:44.520 --> 00:20:48.310\nSo we will go back and break that and\nrefactor it a little bit.\n\n324\n00:20:48.310 --> 00:20:55.020\nBut for now,\nI just want to print(what*how_many).\n\n325\n00:20:55.020 --> 00:20:56.680\nNow that seems a little weird.\n\n326\n00:20:58.680 --> 00:21:02.590\nSo strings, this is a new\nintroductions of some things.\n\n327\n00:21:02.590 --> 00:21:06.740\nStrings will actually let you use\nthe multiplication operator and\n\n328\n00:21:06.740 --> 00:21:08.620\nwill just repeat themselves\nthat many times.\n\n329\n00:21:08.620 --> 00:21:11.680\nAnd if you've ever done that\nin any other languages,\n\n330\n00:21:11.680 --> 00:21:15.710\nthat's actually very laborious even for\nsomething very hokey.\n\n331\n00:21:15.710 --> 00:21:20.110\nSo what do you wanna print and\nhow many times?\n\n332\n00:21:20.110 --> 00:21:23.230\nOkay, I actually don't need\nthis function anymore.\n\n333\n00:21:24.270 --> 00:21:29.950\nBecause, in a sense,\nI have that behavior encapsulated here,\n\n334\n00:21:29.950 --> 00:21:31.865\nbecause I can just say how many is three?\n\n335\n00:21:31.865 --> 00:21:37.010\n[COUGH] So,\nlet's actually test out our function.\n\n336\n00:21:37.010 --> 00:21:41.270\nSo I'm gonna print_num_times,\nand what do you wanna print?\n\n337\n00:21:41.270 --> 00:21:45.460\nI wanna print my user_input and\n\n338\n00:21:45.460 --> 00:21:50.900\nnum_times, and let's see if it works.\n\n339\n00:21:52.000 --> 00:21:53.550\nHopefully it works.\n\n340\n00:21:53.550 --> 00:21:54.680\n>> Here's crossing fingers.\n\n341\n00:21:54.680 --> 00:21:55.500\n>> You ready?\n\n342\n00:21:55.500 --> 00:21:56.455\nI'm kinda scared.\n\n343\n00:21:56.455 --> 00:21:59.888\n>> [LAUGH]\n>> What's your favorite word, Daniel?\n\n344\n00:21:59.888 --> 00:22:03.020\n>> I'm gonna go with hippopotamus.\n\n345\n00:22:03.020 --> 00:22:04.144\n>> Let's just go with hippo.\n\n346\n00:22:04.144 --> 00:22:07.460\n[LAUGH] How many times\ndo you wanna print it?\n\n347\n00:22:07.460 --> 00:22:08.490\n>> Let's go seven.\n\n348\n00:22:10.590 --> 00:22:14.970\n>> Can't multiply sequence by\nnon-int of type 'string', did I?\n\n349\n00:22:16.874 --> 00:22:22.455\nHere's one of those dreaded,\ndreaded errors,\n\n350\n00:22:22.455 --> 00:22:26.002\nnon-int of type 'string'.\n\n351\n00:22:28.904 --> 00:22:31.024\nThat is-\n>> You think it's giving you a problem\n\n352\n00:22:31.024 --> 00:22:34.235\nbecause you have the string and\nthe integer and you're multiplying,\n\n353\n00:22:34.235 --> 00:22:37.730\neven though normally you say\nthat it can't actually do that?\n\n354\n00:22:37.730 --> 00:22:43.300\n>> Yeah it should, this is one of\nthose weird syntax errors that is.\n\n355\n00:22:43.300 --> 00:22:47.370\nSo this is hippo,\nhow many times do you wanna print that?\n\n356\n00:22:47.370 --> 00:22:48.579\nLet's just say 2.\n\n357\n00:22:52.822 --> 00:22:54.284\nThat is interesting.\n\n358\n00:23:08.168 --> 00:23:09.770\n>> Talk us through it, Jess.\n\n359\n00:23:09.770 --> 00:23:11.490\n>> It just hit me, just hit me.\n\n360\n00:23:12.500 --> 00:23:17.575\nI am silly because you know how I\nmade the assumption that what and\n\n361\n00:23:17.575 --> 00:23:19.655\nhow_many are respective data types?\n\n362\n00:23:19.655 --> 00:23:21.340\n>> Mm-hm.\n\n363\n00:23:21.340 --> 00:23:27.882\n>> Yeah, and I see some people were trying\nto help us, but this raw_input, well\n\n364\n00:23:27.882 --> 00:23:32.699\nthat raw_input, that actually comes back\nas a string, but what was my assumption?\n\n365\n00:23:33.860 --> 00:23:37.140\nThat it was in fact an integer, right?\n\n366\n00:23:37.140 --> 00:23:42.092\nSo, I have to make sure that's an integer,\nwhich is a great time\n\n367\n00:23:42.092 --> 00:23:47.075\nto look at a new function,\nwhich will show us how these can work.\n\n368\n00:23:47.075 --> 00:23:48.851\nSo I can actually say,\n\n369\n00:23:48.851 --> 00:23:54.378\nI want to make this an integer by\nputting a function within a function.\n\n370\n00:23:54.378 --> 00:23:57.843\nSo whatever comes back from raw_input,\n\n371\n00:23:57.843 --> 00:24:02.405\nmake it an integer and\nmake that assign to num_times.\n\n372\n00:24:04.286 --> 00:24:05.307\nSo.\n\n373\n00:24:08.197 --> 00:24:11.891\nPrint what times how many.\n\n374\n00:24:13.640 --> 00:24:15.720\nWe should be good to go now.\n\n375\n00:24:15.720 --> 00:24:17.330\nWe're about to find out.\n\n376\n00:24:17.330 --> 00:24:21.360\nSo hippo and four.\n\n377\n00:24:21.360 --> 00:24:22.850\nThere we go.\n\n378\n00:24:22.850 --> 00:24:28.030\nSo as I said Python will let us get\ninto some crazy stuff with these types,\n\n379\n00:24:28.030 --> 00:24:32.910\nand we have to be very, very careful\nabout how we think about them.\n\n380\n00:24:32.910 --> 00:24:36.130\nSo I made an assumption,\nmy assumption was wrong,\n\n381\n00:24:36.130 --> 00:24:40.530\nit was bound to happen to everybody,\nbut the cool thing is,\n\n382\n00:24:40.530 --> 00:24:45.260\nis that the error that it generated\nled you right to what the problem was.\n\n383\n00:24:45.260 --> 00:24:48.000\nAnd it helps you because of\nyour knowledge of Python,\n\n384\n00:24:48.000 --> 00:24:52.700\nhow it works with the different data types\nto see there's a problem with the types.\n\n385\n00:24:52.700 --> 00:24:57.270\nI need to readdress that, take a look at\nmy assumptions and see where I went wrong.\n\n386\n00:24:57.270 --> 00:24:59.700\nYou found it immediately, and\nwe're back in business, and\n\n387\n00:24:59.700 --> 00:25:00.910\neverything's starting to work.\n\n388\n00:25:00.910 --> 00:25:02.250\nYup.\nSo,\n\n389\n00:25:02.250 --> 00:25:06.030\nwith those assumptions we now have\ndecision making capabilities.\n\n390\n00:25:06.030 --> 00:25:09.490\nThat we can make decisions\nbased on these input types.\n\n391\n00:25:09.490 --> 00:25:13.950\nAnd kind of check,\nI need this to be a string.\n\n392\n00:25:13.950 --> 00:25:16.800\nI need this to be an integer.\n\n393\n00:25:16.800 --> 00:25:22.490\nI can actually make that check right here\nand make my function a little more robust.\n\n394\n00:25:22.490 --> 00:25:23.810\nSo now we're taking functions.\n\n395\n00:25:23.810 --> 00:25:26.370\nWe're combining some of\nthe other stuff that we know.\n\n396\n00:25:26.370 --> 00:25:31.000\nThat way we alleviate the issues of,\nif someone gives us the wrong thing,\n\n397\n00:25:32.070 --> 00:25:36.560\nthen we can tell them instead of\njust having these weird errors.\n\n398\n00:25:36.560 --> 00:25:40.190\nSo, if the type of what\n\n399\n00:25:42.650 --> 00:25:47.290\nequals string and\n\n400\n00:25:47.290 --> 00:25:52.020\nthe type of how many is equal to int.\n\n401\n00:25:54.770 --> 00:25:56.020\nThen this is what we want to do.\n\n402\n00:25:58.590 --> 00:26:06.040\nElse Print('first parameter\n\n403\n00:26:07.470 --> 00:26:13.714\nmust be a string') and ('second\n\n404\n00:26:13.714 --> 00:26:19.430\nparameter must be ') An integer.\n\n405\n00:26:19.430 --> 00:26:22.710\nThis is cool.\nSo you're actually creating your own type\n\n406\n00:26:22.710 --> 00:26:26.500\nof error messages so\nthat it's a little more informative and\n\n407\n00:26:26.500 --> 00:26:29.830\na little easier to follow if and\nwhen this thing does break.\n\n408\n00:26:29.830 --> 00:26:31.910\n>> Yeah.\nSo it's always good to,\n\n409\n00:26:31.910 --> 00:26:36.520\nthis is not the most robust way\nto print error messages, but for\n\n410\n00:26:36.520 --> 00:26:39.590\nthe time being, if I'm using this and\nthis comes up and\n\n411\n00:26:39.590 --> 00:26:44.330\nlike, yeah, that immediately\nlets me know what and how many,\n\n412\n00:26:44.330 --> 00:26:48.580\nI didn't hold up my end of the bargain\nwhen I was using this function.\n\n413\n00:26:49.870 --> 00:26:54.350\nNow, let see how that runs,\nlet see if still works.\n\n414\n00:26:54.350 --> 00:27:00.204\nSo, hippo or hip, and\ntwo times still works,\n\n415\n00:27:00.204 --> 00:27:05.311\nso this works, this makes sure that what\n\n416\n00:27:05.311 --> 00:27:11.180\nis if type string, and\nhow many as of type end.\n\n417\n00:27:11.180 --> 00:27:13.090\nAnd then let's see if we can break it.\n\n418\n00:27:13.090 --> 00:27:13.740\n>> Yeah.\n>> You ready.\n\n419\n00:27:13.740 --> 00:27:14.500\n>> I like breaking stuff.\n\n420\n00:27:14.500 --> 00:27:15.838\n>> Yeah, so.\n\n421\n00:27:15.838 --> 00:27:21.340\n>> Print, not printer print num times.\n\n422\n00:27:21.340 --> 00:27:26.750\nAnd let's just say three, and three.\n\n423\n00:27:26.750 --> 00:27:31.360\nSo what do we notice about\nthe difference between these?\n\n424\n00:27:31.360 --> 00:27:35.129\nUser input is put this first\nparameter is supposed to be a string.\n\n425\n00:27:36.500 --> 00:27:37.790\nThis right now is a number.\n\n426\n00:27:37.790 --> 00:27:39.400\nIt's an integer.\n\n427\n00:27:39.400 --> 00:27:40.270\nLet's see what it does.\n\n428\n00:27:41.740 --> 00:27:46.420\nSo should have commented\nout that other one.\n\n429\n00:27:46.420 --> 00:27:49.260\nSo the first time,\nit still works but notice,\n\n430\n00:27:49.260 --> 00:27:54.150\nwhen I didn't hold up my end of the\nbargain, I actually get the error message.\n\n431\n00:27:54.150 --> 00:27:54.900\nAnd nothing happens.\n\n432\n00:27:55.900 --> 00:27:58.690\n>> I can actually make\nthe program stop at that point.\n\n433\n00:27:58.690 --> 00:28:00.376\nSo if this happens,\n\n434\n00:28:00.376 --> 00:28:06.144\n[SOUND] kill the program because I\nknow it's gonna ruin other things.\n\n435\n00:28:06.144 --> 00:28:10.888\nBut very easy way to now combine\ndecision making, the function making,\n\n436\n00:28:10.888 --> 00:28:14.740\nnow I'm starting to build\nthese robust tool sets.\n\n437\n00:28:14.740 --> 00:28:18.940\nThen I can keep dipping into as\nI have more complex things to.\n\n438\n00:28:18.940 --> 00:28:24.030\n>> Yeah, it totally we're already at\nthe portion of we're able to create some\n\n439\n00:28:24.030 --> 00:28:28.830\nvery complex set of codes here that\nwill be reusable which is always nice.\n\n440\n00:28:28.830 --> 00:28:32.850\nSo that, as I go through out and\nI create a large code logs.\n\n441\n00:28:32.850 --> 00:28:35.980\nThings and somethings that I\nwant to do is very complex.\n\n442\n00:28:35.980 --> 00:28:39.130\nI can continue to dip\nback to my functions, and\n\n443\n00:28:39.130 --> 00:28:43.660\nuse them to short things up, make it a\nlittle easier, take me from syntax errors,\n\n444\n00:28:43.660 --> 00:28:48.350\nand even use my decision making abilities\nto verify that everything's going to work.\n\n445\n00:28:48.350 --> 00:28:52.340\nCheck the types that are inside of those\nfunctions, and because that's obviously as\n\n446\n00:28:52.340 --> 00:28:55.835\nan important thing we ran into that\nwhen we found our error there.\n\n447\n00:28:55.835 --> 00:28:57.980\nJustin is there anything else\nabout functions that we would need\n\n448\n00:28:57.980 --> 00:29:00.120\nto know before we wrap up this episode?\n\n449\n00:29:00.120 --> 00:29:02.950\n>> So there are a great\ndeal of built-in functions.\n\n450\n00:29:02.950 --> 00:29:07.120\nWe have seen type, accent,\nraw input, and now we have a new one\n\n451\n00:29:07.120 --> 00:29:11.410\nthat is actually a function and\na type which is kind of weird.\n\n452\n00:29:11.410 --> 00:29:16.270\nSo if this type is an integer and\nit's also a function that will try to,\n\n453\n00:29:16.270 --> 00:29:21.230\nwhat's called, like coerce,\nmakes one thing another thing, so\n\n454\n00:29:21.230 --> 00:29:24.950\nI can take a string, pass it into int.\n\n455\n00:29:24.950 --> 00:29:28.750\nIf it is a properly formatted\nstring that represents a integer.\n\n456\n00:29:28.750 --> 00:29:34.350\nSo for instance if I had quotes,\nthe number three, that would work,\n\n457\n00:29:34.350 --> 00:29:42.050\nbut if I had 3.2.4=1 there is no,\n\n458\n00:29:42.050 --> 00:29:47.100\nit's like I don't know what you're doing.\n\n459\n00:29:47.100 --> 00:29:50.740\nSo we have these great deal\nof built in functions, but\n\n460\n00:29:50.740 --> 00:29:54.550\nwe've got what we need\nright now to do start doing\n\n461\n00:29:54.550 --> 00:29:59.440\nsome more interesting things with our\nown functions, our own decision making.\n\n462\n00:29:59.440 --> 00:30:01.650\nAnd we're working toward, okay, okay.\n\n463\n00:30:01.650 --> 00:30:06.970\nThese are getting little longer, getting\na little more complex but as I said,\n\n464\n00:30:06.970 --> 00:30:11.648\nin five minutes, I've had, got an idea,\n>> It's up on\n\n465\n00:30:11.648 --> 00:30:13.809\nthe screen I can test it out,\nwe're good to go.\n\n466\n00:30:13.809 --> 00:30:15.855\nI like it.\n>> Thank you so much Justin so much for\n\n467\n00:30:15.855 --> 00:30:17.285\nexplaining functions to us.\n\n468\n00:30:17.285 --> 00:30:21.605\nObviously they can seem like they're very\ndifficult to work with but not too bad.\n\n469\n00:30:21.605 --> 00:30:23.975\nJustin you did a great job\nof explaining it to us and\n\n470\n00:30:23.975 --> 00:30:27.455\ndemonstrating to us how they might\nwork in an actual Python program.\n\n471\n00:30:27.455 --> 00:30:31.285\nSo it looks like we've come to the end\nof another episode here at IT pro tv.\n\n472\n00:30:31.285 --> 00:30:34.780\nHopefully you guys have enjoyed it and got\na lot out of it we thank you for watching.\n\n473\n00:30:34.780 --> 00:30:38.020\nSigning off for\nITProTV I've been your host Daniel Lowrie.\n\n474\n00:30:38.020 --> 00:30:39.110\n>> And I'm Justin Dennison.\n\n475\n00:30:39.110 --> 00:30:42.515\n>> And we'll see you next time.\n\n476\n00:30:42.515 --> 00:30:49.120\n[SOUND]\n\n",
          "vimeoId": "158184257"
        },
        {
          "description": "In this episode, Daniel and Justin take a look at how to use Python to perform repetitive tasks, a process known as iteration or loops. They begin by explaining the structure and use of While loops and then show you some examples to demonstrate how while loops iterate. They also explain how to avoid infinite loops by breaking the loop through decision statements.",
          "length": "1981",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-5-iterations-030516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-5-iterations-030516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-5-iterations-030516-1-sm.jpg",
          "title": "Iterations",
          "transcript": "WEBVTT\n\n1\n00:00:00.053 --> 00:00:08.109\n[MUSIC]\n\n2\n00:00:08.109 --> 00:00:12.090\nAlright, greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:12.090 --> 00:00:14.160\nI'm your host Daniel Lowrie and\n\n4\n00:00:14.160 --> 00:00:18.130\ntoday's episode we are continuing on\nwith our Python programming series.\n\n5\n00:00:18.130 --> 00:00:21.570\nJoining us back in the studio again\ntoday is our programming master\n\n6\n00:00:21.570 --> 00:00:23.620\nthat knows all things\nin Python apparently.\n\n7\n00:00:23.620 --> 00:00:24.980\nHe's name is Justin Dennison.\n\n8\n00:00:24.980 --> 00:00:26.590\nJustin, welcome back to the show sir.\n\n9\n00:00:26.590 --> 00:00:28.180\n>> Thank you for having me back here.\n\n10\n00:00:28.180 --> 00:00:31.190\nI'm excited to further dive into Python.\n\n11\n00:00:31.190 --> 00:00:36.200\nAgain though I think we're holding\nup this mythos about me that I\n\n12\n00:00:36.200 --> 00:00:41.530\ndon't know if I can I can live up to those\nexpectations but I'll definitely try.\n\n13\n00:00:41.530 --> 00:00:42.200\n>> Just go with it man.\n\n14\n00:00:42.200 --> 00:00:43.215\nJust go with it.\n\n15\n00:00:43.215 --> 00:00:46.810\n[LAUGH] Let me say, we have covered\na lot of ground in Python so far.\n\n16\n00:00:46.810 --> 00:00:49.450\nSo if you're just joining us,\nyou might wanna jump back and\n\n17\n00:00:49.450 --> 00:00:50.760\nwatch the previous episodes.\n\n18\n00:00:50.760 --> 00:00:53.530\nThey're gonna help you because we've been\nbuilding a foundation of knowledge so\n\n19\n00:00:53.530 --> 00:00:57.730\nthat we can continue to get more and more\ncomplexity out of our Python programs.\n\n20\n00:00:57.730 --> 00:01:01.000\nThat being said in today's episode\nwe're gonna cover iteration,\n\n21\n00:01:01.000 --> 00:01:05.980\nand this is probably one of\nthe more difficult things for\n\n22\n00:01:05.980 --> 00:01:10.170\npeople to assimilate into their knowledge\nbase, it's a hard concept to grasp.\n\n23\n00:01:10.170 --> 00:01:13.090\nBut Justin I know that if\nanybody can help us it's you.\n\n24\n00:01:13.090 --> 00:01:16.210\nYou're gonna explain what are iterations,\nhow do we use them, and\n\n25\n00:01:16.210 --> 00:01:17.500\nhow do we see them inside of Python?\n\n26\n00:01:19.210 --> 00:01:23.970\nSo iterations,\nyou've seen in the previous episodes that\n\n27\n00:01:23.970 --> 00:01:28.800\nwe've had ways to do things more and\nmore, one after the other, repeat things.\n\n28\n00:01:28.800 --> 00:01:30.380\nAnd currently,\n\n29\n00:01:30.380 --> 00:01:35.050\nI've just been using the power of my\ntext editor to replicate these things.\n\n30\n00:01:35.050 --> 00:01:40.009\nHowever, that's unreasonable if\nwe needed to do 100,000 things,\n\n31\n00:01:40.009 --> 00:01:43.610\nor a million things,\nwhich is a possible request.\n\n32\n00:01:43.610 --> 00:01:48.660\nI need to sift through a 100,000 log\nfiles to find this particular error,\n\n33\n00:01:48.660 --> 00:01:50.180\nhow often it occurred.\n\n34\n00:01:51.480 --> 00:01:55.970\nOr it could be a simple as I need to\nadd the first 1,000 numbers together.\n\n35\n00:01:55.970 --> 00:01:59.300\nYou know, depends on what you wanna do.\n\n36\n00:01:59.300 --> 00:02:03.470\nSo from a math science perspective,\nI may need to add up a bunch of things.\n\n37\n00:02:03.470 --> 00:02:10.060\nFrom a system admin's perspective,\nI may need to iterate multiple files,\n\n38\n00:02:10.060 --> 00:02:16.070\nmultiple strings,\nfinding instances like error error,\n\n39\n00:02:16.070 --> 00:02:20.340\nsomething of that nature and that's\nreally where iteration comes into play.\n\n40\n00:02:20.340 --> 00:02:24.860\nSo, when I iterate what\ndo I mean by Iterate?\n\n41\n00:02:24.860 --> 00:02:29.470\nWell, iterate, for all intents and\npurposes, is repeat until some\n\n42\n00:02:29.470 --> 00:02:34.350\ncondition is met, and\nPython has a couple ways of doing that.\n\n43\n00:02:34.350 --> 00:02:38.850\nI have the for loop, with will be a little\nlater, those make sense in the context of\n\n44\n00:02:38.850 --> 00:02:43.248\nsome other Python structures,\nand then the while loop.\n\n45\n00:02:43.248 --> 00:02:47.680\nSo the while loop can happen\nanywhere that you can use a for\n\n46\n00:02:47.680 --> 00:02:49.350\nloop you can use a while loop.\n\n47\n00:02:49.350 --> 00:02:51.300\nThey're just constructed\na little differently.\n\n48\n00:02:51.300 --> 00:02:54.520\nBut what you will find is if you've\never had something that just keeps\n\n49\n00:02:54.520 --> 00:02:59.180\nasking you for input, hey I need more\ninformation, I need more information.\n\n50\n00:02:59.180 --> 00:03:02.710\nYou can even think of it as someone's why?\n\n51\n00:03:02.710 --> 00:03:03.230\nWhy?\n\n52\n00:03:03.230 --> 00:03:03.860\nWhy?\n\n53\n00:03:03.860 --> 00:03:06.910\nSo that's effectively a while loop,\nthat's an infinite while loop\n\n54\n00:03:06.910 --> 00:03:10.650\nthat I can also use that to\njust keep asking users for\n\n55\n00:03:10.650 --> 00:03:15.380\ninformation until they decided to quit or\nsome other condition is satisfied.\n\n56\n00:03:15.380 --> 00:03:19.120\nBut I think what makes iteration\nthe most difficult for\n\n57\n00:03:19.120 --> 00:03:23.840\npeople to grasp is that's\nnot how our brain works,\n\n58\n00:03:23.840 --> 00:03:27.710\nit's not all right do this next thing,\nthis next thing, this next thing.\n\n59\n00:03:29.090 --> 00:03:32.090\nIf I ask you to add the numbers\none through five together\n\n60\n00:03:32.090 --> 00:03:35.420\nyou just you'll write down and\nyou'll add them together.\n\n61\n00:03:35.420 --> 00:03:40.210\nBut if I ask you to do that iteratively\nyou're like I don't know what that means.\n\n62\n00:03:40.210 --> 00:03:43.690\nSo in essence I would take a container and\nI would go,\n\n63\n00:03:43.690 --> 00:03:47.090\nIf I wanna add the numbers from one\nthrough five, I start with the number\n\n64\n00:03:47.090 --> 00:03:52.050\none and I put it in the container so\nI would have one marble.\n\n65\n00:03:52.050 --> 00:03:57.480\nIf I wanted to now go on to two, I would\ngrab two marbles, add those in there.\n\n66\n00:03:57.480 --> 00:03:59.140\nThree marbles, add those in there.\n\n67\n00:03:59.140 --> 00:04:01.668\nAll the way up to five\nuntil that condition's met.\n\n68\n00:04:01.668 --> 00:04:06.020\nAnd then iteratively,\nI would have that in my variable,\n\n69\n00:04:06.020 --> 00:04:09.240\nmy count, or something of that nature.\n\n70\n00:04:10.420 --> 00:04:16.860\nSo if you want a nice concrete\nexample of how iteration works,\n\n71\n00:04:16.860 --> 00:04:24.280\ngo find a deck of cards, and sort them\nby suit, and then go one, two, three.\n\n72\n00:04:24.280 --> 00:04:28.400\nSo start with the first one,\nthe next one, the next one, the next one.\n\n73\n00:04:28.400 --> 00:04:33.840\nAnd that's how iteration works\nas far as a general practice.\n\n74\n00:04:33.840 --> 00:04:37.180\nBut when would we use it is\nreally where people struggle.\n\n75\n00:04:37.180 --> 00:04:38.804\nOr how do we use it effectively.\n\n76\n00:04:38.804 --> 00:04:43.960\nJustin I guess that takes us to we\nneed to start with the foundation,\n\n77\n00:04:43.960 --> 00:04:45.090\nhow do we use it?\n\n78\n00:04:45.090 --> 00:04:48.810\nAnd then, you can show us where we\ncan use it in a more practical sense.\n\n79\n00:04:48.810 --> 00:04:49.938\nSo let's go there.\n\n80\n00:04:49.938 --> 00:04:52.380\nYou said there's a couple of ways\nin which we can do the iteration.\n\n81\n00:04:52.380 --> 00:04:53.740\nWe have for loops.\n\n82\n00:04:53.740 --> 00:04:55.030\nWe have while loops.\n\n83\n00:04:55.030 --> 00:04:56.640\nWhich ones are best to start with?\n\n84\n00:04:56.640 --> 00:04:58.700\nIs there a better one than the other or\n\n85\n00:04:58.700 --> 00:05:02.870\nis it really just six and one,\nhalf a dozen of the other?\n\n86\n00:05:02.870 --> 00:05:06.470\n>> Ultimately, it depends on\nthe context of what you want to do.\n\n87\n00:05:06.470 --> 00:05:10.510\nFor loops are great for iterating\nthrough a known collection of things,\n\n88\n00:05:12.380 --> 00:05:17.610\nI know I have a collection, this group\nof files that I need to go through.\n\n89\n00:05:17.610 --> 00:05:19.850\nFor loops make that incredibly easy.\n\n90\n00:05:19.850 --> 00:05:22.380\nWhile loops, do you game?\n\n91\n00:05:22.380 --> 00:05:24.000\nJust a hair.\n\n92\n00:05:24.000 --> 00:05:24.590\nJust a hair?\n\n93\n00:05:24.590 --> 00:05:29.220\nYeah, I know some people who game a great\ndeal and there's actually something that's\n\n94\n00:05:29.220 --> 00:05:32.310\ncalled a game loop that is\neffectively an infinite while loop,\n\n95\n00:05:32.310 --> 00:05:34.820\nwhile true, always do these things.\n\n96\n00:05:34.820 --> 00:05:35.470\nRight?\n\n97\n00:05:35.470 --> 00:05:39.820\nAsk the player to move,\nmove the player, things of that nature.\n\n98\n00:05:39.820 --> 00:05:44.250\nSo if I want something to run all\nthe time, while loops are great.\n\n99\n00:05:44.250 --> 00:05:45.540\nIf I want to start at the beginning and\n\n100\n00:05:45.540 --> 00:05:50.300\ngo to the end of a collection then for\nloops are probably my better choice.\n\n101\n00:05:50.300 --> 00:05:54.340\n>> All right well that being said now that\nwe know kind of where we'd use one versus\n\n102\n00:05:54.340 --> 00:05:59.530\nthe other show us how to do,\nI don't care, dealers choice.\n\n103\n00:05:59.530 --> 00:06:04.012\nWhiles or fors you throw down and show\nus how we can actually use these things.\n\n104\n00:06:04.012 --> 00:06:08.055\n>> All right, so we're going to solve\nthe same problem using a while and a for\n\n105\n00:06:08.055 --> 00:06:12.510\nloop, and we have to, for the for loop,\nwe're going to have to create and\n\n106\n00:06:12.510 --> 00:06:17.150\nuse a new function that\ngives me a collection.\n\n107\n00:06:17.150 --> 00:06:18.940\nWe haven't talked a great\ndeal about collections but\n\n108\n00:06:18.940 --> 00:06:20.680\nwe'll talk about it when we get there.\n\n109\n00:06:20.680 --> 00:06:22.440\nSo I'm electing, as always,\n\n110\n00:06:22.440 --> 00:06:26.920\nstarting the Python shell,\njust get something working, right?\n\n111\n00:06:28.160 --> 00:06:33.054\nSo within the shell, when I had while\nloop, I need something to break, Mike.\n\n112\n00:06:33.054 --> 00:06:37.940\nI need something to stop my while loop\ncuz otherwise it'll run forever, and\n\n113\n00:06:37.940 --> 00:06:41.545\nI will warn you, if you accidentally\nget into an infinite loop\n\n114\n00:06:41.545 --> 00:06:46.560\nthat builds up a bunch of memory,\nyou will lock up your computer at times.\n\n115\n00:06:46.560 --> 00:06:50.038\nThere are ways to kill\nprocesses in Python, Ctrl,\n\n116\n00:06:50.038 --> 00:06:55.190\nAlt, Delete or I don't know,\nwhen in doubt, power button.\n\n117\n00:06:55.190 --> 00:06:58.690\nIt has happened to me,\nit may happen to you.\n\n118\n00:06:58.690 --> 00:07:01.560\nSo I like to start just\nwith simple numbers, right?\n\n119\n00:07:01.560 --> 00:07:04.774\nWe're gonna start just printing\nout the numbers, 1 through 100.\n\n120\n00:07:06.300 --> 00:07:12.190\nThis is something that seems truly easy,\nbut, man if I had to type print one,\n\n121\n00:07:12.190 --> 00:07:16.960\nprint two, print three, print four,\nthis is very laborious.\n\n122\n00:07:16.960 --> 00:07:20.140\nIt's not something I want\nto do on a regular basis.\n\n123\n00:07:20.140 --> 00:07:23.569\nIt's not something that's practical\nfrom a programming standpoint.\n\n124\n00:07:23.569 --> 00:07:27.407\nSo, I'm gonna start from 1 and go to 100.\n\n125\n00:07:27.407 --> 00:07:28.823\nCouple of assumptions.\n\n126\n00:07:28.823 --> 00:07:33.345\nI'm gonna represent these as numbers,\nintegers to be specific.\n\n127\n00:07:33.345 --> 00:07:38.579\nAnd, that means that I can\nuse integer operations.\n\n128\n00:07:38.579 --> 00:07:43.101\nSo I'm gonna start with i = 1,\ni is a common\n\n129\n00:07:43.101 --> 00:07:48.496\nconvention that people use\nto represent a counter.\n\n130\n00:07:48.496 --> 00:07:53.482\nI can just as easily say, counter = 1 and\n\n131\n00:07:53.482 --> 00:07:58.482\nthis is probably a better variable name.\n\n132\n00:07:58.482 --> 00:08:02.552\nI wanted to show you that i is sometimes\nused cuz you'll see that a lot if you look\n\n133\n00:08:02.552 --> 00:08:03.920\nat other people's code.\n\n134\n00:08:03.920 --> 00:08:08.568\nAnd I wanna say, while counter is less,\n\n135\n00:08:08.568 --> 00:08:13.680\nnow here's a new comparison operator.\n\n136\n00:08:13.680 --> 00:08:18.580\nWhile loops require you to\nhave a Boolean statement, so\n\n137\n00:08:18.580 --> 00:08:21.930\nwhile counter is less than 100.\n\n138\n00:08:21.930 --> 00:08:25.130\nCan I ask that in the form of a question?\n\n139\n00:08:25.130 --> 00:08:26.560\nIs counter less than 100?\n\n140\n00:08:26.560 --> 00:08:28.650\nIs that a yes/no question?\n\n141\n00:08:28.650 --> 00:08:31.349\nWell, it is, I can say,\nyes it is, or no it's not.\n\n142\n00:08:31.349 --> 00:08:34.420\nIf the answer is yes,\nthe while will keep running.\n\n143\n00:08:34.420 --> 00:08:39.170\nWhen the answer becomes no,\nthe while will break or kind of stop.\n\n144\n00:08:40.180 --> 00:08:43.430\nSo, and you'll notice the dot, dot, dot.\n\n145\n00:08:44.590 --> 00:08:47.374\nSo that means, hey,\nyou're not finished yet.\n\n146\n00:08:47.374 --> 00:08:52.013\nAnd I'm just gonna say print(counter) and\nnow we haven't,\n\n147\n00:08:52.013 --> 00:08:55.251\nwe've just been assigning variables, but\n\n148\n00:08:55.251 --> 00:09:00.151\nwhen I have numerical variables,\nI can do things like increment,\n\n149\n00:09:00.151 --> 00:09:04.902\ndecrement, divide,\nI can change their value multiple times.\n\n150\n00:09:04.902 --> 00:09:10.304\nAnd I think this is where people get\nreally caught up, that it becomes weird,\n\n151\n00:09:10.304 --> 00:09:14.055\nbecause counter right up\nhere ends up being the same.\n\n152\n00:09:14.055 --> 00:09:14.856\nIt's 1.\n\n153\n00:09:14.856 --> 00:09:16.199\nIt is 1 at that point.\n\n154\n00:09:17.320 --> 00:09:18.690\nIf I never change that,\n\n155\n00:09:18.690 --> 00:09:23.970\nthen counter will always be less than\n100 and my while loop will run forever.\n\n156\n00:09:23.970 --> 00:09:28.793\nAnd as I said,\nthat could be a bad, bad thing.\n\n157\n00:09:28.793 --> 00:09:33.187\nBut typically at the end of loops,\nI want to change that variable,\n\n158\n00:09:33.187 --> 00:09:37.673\nbecause I want to approach a condition\nwhere this is no longer True.\n\n159\n00:09:37.673 --> 00:09:39.820\nI want this to become false.\n\n160\n00:09:39.820 --> 00:09:45.370\nSo print the number or counter in\nthis instance, and then when you do,\n\n161\n00:09:45.370 --> 00:09:49.280\nincrease it by 1, and\nthen once it gets to this final part,\n\n162\n00:09:49.280 --> 00:09:53.800\nit's actually gonna hop back up here and\ngo, hey, is counter still less than 100?\n\n163\n00:09:53.800 --> 00:09:54.340\nYep.\n\n164\n00:09:54.340 --> 00:09:56.420\nAll right, do it again.\n\n165\n00:09:56.420 --> 00:09:57.410\nIt's gonna hop back up here.\n\n166\n00:09:57.410 --> 00:09:59.001\nHey, is counter less than 100?\n\n167\n00:09:59.001 --> 00:10:00.150\nYep, do it again.\n\n168\n00:10:00.150 --> 00:10:04.590\nAnd it'll do that until it can say,\nnope, and then it'll jump out.\n\n169\n00:10:04.590 --> 00:10:08.630\n>> Yeah, this is definitely, like you said\nthe portion, of our proceedings where\n\n170\n00:10:08.630 --> 00:10:12.250\npeople start going, okay, I don't\nunderstand what you're doing there.\n\n171\n00:10:12.250 --> 00:10:16.180\nI remember my first time I started\nlooking at loops in general.\n\n172\n00:10:16.180 --> 00:10:17.890\nAnd you start seeing this idea of this,\n\n173\n00:10:17.890 --> 00:10:20.790\nhow does it know that's it's\ngone through the next iteration?\n\n174\n00:10:20.790 --> 00:10:22.770\nHow does it know to do this?\n\n175\n00:10:22.770 --> 00:10:26.020\nAnd it was that incrementation\nthat I was not seeing.\n\n176\n00:10:26.020 --> 00:10:30.717\nAnd that's what you have to see is that\nonce we get to that portion where it\n\n177\n00:10:30.717 --> 00:10:35.183\nfigures out, okay, I see counter,\nhere's counter's value, and\n\n178\n00:10:35.183 --> 00:10:39.118\nnow we compare that with whether or\nnot it is equal to 100.\n\n179\n00:10:39.118 --> 00:10:42.054\nAnd if it doesn't equal 100,\nwe should do something.\n\n180\n00:10:42.054 --> 00:10:43.130\nWell, what are we doing?\n\n181\n00:10:43.130 --> 00:10:44.510\nAt that point in time,\nif it doesn't equal 100,\n\n182\n00:10:44.510 --> 00:10:49.490\nI want you to print this line of text and\nthen I want you to increment the value\n\n183\n00:10:49.490 --> 00:10:54.470\nof that variable by whatever we put,\nand in this case Justin has put 1.\n\n184\n00:10:54.470 --> 00:10:56.760\nSo now the value of it is 2.\n\n185\n00:10:56.760 --> 00:11:00.008\nIt doesn't go back to the original value\nbecause we've added that incrementation.\n\n186\n00:11:00.008 --> 00:11:03.950\nIt doesn't go all the way back,\nit only jumps to the while loop or the for\n\n187\n00:11:03.950 --> 00:11:08.684\nloop at that point in time, and then does\nits incrementation, goes back through it,\n\n188\n00:11:08.684 --> 00:11:13.354\ndoes its calculation again, and continues\nto do that until it returns an exit status\n\n189\n00:11:13.354 --> 00:11:17.493\nwhich would be, okay, it does equal,\nor it's less than or greater to, or\n\n190\n00:11:17.493 --> 00:11:21.710\nhowever we put it in our structure\nthere to exit out that piece of code.\n\n191\n00:11:21.710 --> 00:11:26.930\nSo to me, Justin, this is the lynchpin\nof how these things actually work.\n\n192\n00:11:26.930 --> 00:11:29.290\nEspecially when it comes\nto the while loop.\n\n193\n00:11:30.430 --> 00:11:33.545\n>> Yeah,\nit can take a little bit to get used to.\n\n194\n00:11:33.545 --> 00:11:39.110\nBut there's that ah-ha moment that this\naffords you a great deal of power,\n\n195\n00:11:39.110 --> 00:11:44.750\nbecause now you can say, all right, I want\nto look at every file on my computer and\n\n196\n00:11:44.750 --> 00:11:49.670\nlook for, you know,\nidentifying information, right?\n\n197\n00:11:49.670 --> 00:11:56.343\nThis is actually a form of attack,\nright, I'm just snooping around.\n\n198\n00:11:56.343 --> 00:11:59.700\nBut I don't wanna sit there and, okay,\nI'm gonna type all these things.\n\n199\n00:11:59.700 --> 00:12:02.930\nI'm gonna say, go through,\nlook at everything.\n\n200\n00:12:02.930 --> 00:12:05.860\nAnd so\nlet's take a look at how this works.\n\n201\n00:12:05.860 --> 00:12:09.850\nI'm gonna run this in the shell, look at\na for loop that does the exact same thing,\n\n202\n00:12:09.850 --> 00:12:14.620\nso we can see, hey,\nthese provide the same mechanism, but.\n\n203\n00:12:14.620 --> 00:12:16.034\nAnd then we're gonna come back and\n\n204\n00:12:16.034 --> 00:12:18.332\nmake sure we understand\nwhere each part's happening.\n\n205\n00:12:18.332 --> 00:12:25.367\nSo if I run this, it goes really fast,\nbut you'll know I don't quite reach 100,\n\n206\n00:12:25.367 --> 00:12:31.825\nbecause it stops before 100 is reached,\nand, woah, getting too crazy.\n\n207\n00:12:31.825 --> 00:12:36.270\nSo it goes, 1, 2, 3, 4, 5.\n\n208\n00:12:36.270 --> 00:12:40.280\nAnd it's just printing that\nnumber while it's less than 100.\n\n209\n00:12:40.280 --> 00:12:42.940\nBut if I wanted it to\nactually go fully to 100,\n\n210\n00:12:42.940 --> 00:12:47.942\nI gotta add an equals to sign there,\nand we'll actually see that.\n\n211\n00:12:49.200 --> 00:12:53.320\nBut how would this look in\ncomparison to a for loop?\n\n212\n00:12:53.320 --> 00:12:57.590\nSo a for loop can be used to\nsolve the exact same problem.\n\n213\n00:12:57.590 --> 00:13:00.610\nVery simple problem, kinda hokey.\n\n214\n00:13:00.610 --> 00:13:05.401\nSo I can say for count in, and\n\n215\n00:13:05.401 --> 00:13:12.000\nthen there's a new function, range.\n\n216\n00:13:12.000 --> 00:13:17.024\nAnd range can take one parameter,\ntwo parameters, or three parameters.\n\n217\n00:13:17.024 --> 00:13:21.400\nAnd we're gonna start with the two\nparameter, because it's a start and\n\n218\n00:13:21.400 --> 00:13:21.910\na stop.\n\n219\n00:13:21.910 --> 00:13:30.022\nSo I want to get the collection of\nnumbers that start at 1 and go up to 100.\n\n220\n00:13:30.022 --> 00:13:32.400\nSo I want for count in range.\n\n221\n00:13:33.800 --> 00:13:38.720\nSo for every number in the range 1 to 100,\nand here's the trick.\n\n222\n00:13:38.720 --> 00:13:42.615\n100 is, I don't know,\nis it included, is it not?\n\n223\n00:13:42.615 --> 00:13:46.200\nCuz we didn't include it up there\ncuz we had some weird logic issues.\n\n224\n00:13:46.200 --> 00:13:49.440\nLet's just see what happens.\n\n225\n00:13:49.440 --> 00:13:53.620\nSo I click here and\nI just want to print count.\n\n226\n00:13:53.620 --> 00:13:57.490\nNow, count is gonna take on the value,\nit's gonna start at the beginning.\n\n227\n00:13:57.490 --> 00:14:02.400\nSo 1 would be the first number in that\nrange, and then after it finishes all\n\n228\n00:14:02.400 --> 00:14:06.260\nthe for loop, it's gonna come back and\ngo, okay, I need to go to the next thing.\n\n229\n00:14:06.260 --> 00:14:09.980\nSo I have this, this is our\nfirst exposure to a collection.\n\n230\n00:14:09.980 --> 00:14:14.430\nSo this is just a collection of numbers,\nand we can think of a range,\n\n231\n00:14:14.430 --> 00:14:17.580\nokay, 1 to 100,\nI know all the numbers between 1 and 100.\n\n232\n00:14:17.580 --> 00:14:20.150\nSo, if we just, doop, and we're done!\n\n233\n00:14:20.150 --> 00:14:21.953\nAnd that was fast.\n\n234\n00:14:21.953 --> 00:14:27.160\nSo, notice, simpler than the while loop,\nand honestly,\n\n235\n00:14:27.160 --> 00:14:33.616\nas a Python programmer, I tend to favor\nthe for loop for most of my things,\n\n236\n00:14:33.616 --> 00:14:39.472\ncuz I know I have a fixed collection\nthat I need to iterate through.\n\n237\n00:14:39.472 --> 00:14:41.537\nBut the while loop can come in handy.\n\n238\n00:14:41.537 --> 00:14:46.254\nBut we start at 1, go to 2, 3,\n\n239\n00:14:46.254 --> 00:14:50.469\n4, 5, all the way to 99.\n\n240\n00:14:50.469 --> 00:14:56.170\nSo the range function here actually\nis exclusive on this right-hand side.\n\n241\n00:14:56.170 --> 00:14:59.230\nSo it does not include the last\nnumber that you provided.\n\n242\n00:14:59.230 --> 00:15:03.429\n>> So if we wanted 100 here, we'd have to\nhave to actually make the range 1 to 101,\n\n243\n00:15:03.429 --> 00:15:05.400\nand then we would get 1 through 100.\n\n244\n00:15:05.400 --> 00:15:06.510\n>> Exactly.\n\n245\n00:15:06.510 --> 00:15:11.140\nSo that's some nice little\nexperiments in the shell, but\n\n246\n00:15:11.140 --> 00:15:16.690\nlet's see how we can use that in\ncombination with functions and\n\n247\n00:15:16.690 --> 00:15:20.300\nreevaluate something we've already done\nusing some built-in functionality but\n\n248\n00:15:20.300 --> 00:15:22.760\nhow would that look iteratively?\n\n249\n00:15:22.760 --> 00:15:27.751\nSo here we go.\n\n250\n00:15:27.751 --> 00:15:32.592\nLet's kill the shell here.\n\n251\n00:15:32.592 --> 00:15:35.053\nAnd, wow, you gotta spell atom correctly.\n\n252\n00:15:35.053 --> 00:15:36.073\n>> It does help.\n\n253\n00:15:36.073 --> 00:15:37.220\n>> It does help, it does help.\n\n254\n00:15:38.840 --> 00:15:45.160\nSo maybe, I already have it open.\n\n255\n00:15:45.160 --> 00:15:46.138\nI already have it open.\n\n256\n00:15:46.138 --> 00:15:49.180\nSo even though I called this while_loop,\n\n257\n00:15:49.180 --> 00:15:51.600\nwe're actually gonna look\nat at the comparison.\n\n258\n00:15:51.600 --> 00:15:55.675\nSo if I wanted to embed this\nfunctionality and make it general, right?\n\n259\n00:15:55.675 --> 00:15:58.607\nI wanna count to any number,\nand in particular,\n\n260\n00:15:58.607 --> 00:16:00.690\nI just don't want to print it out.\n\n261\n00:16:00.690 --> 00:16:02.145\nI want the sum, right.\n\n262\n00:16:02.145 --> 00:16:07.346\nI want I'm like, I gotta sum up\nall the numbers from one to ten.\n\n263\n00:16:07.346 --> 00:16:08.380\nQuick side note.\n\n264\n00:16:08.380 --> 00:16:12.630\nThere was a mathematician that apparently\nfigured this out When his teacher gave him\n\n265\n00:16:12.630 --> 00:16:13.700\nsome busy work.\n\n266\n00:16:13.700 --> 00:16:16.150\nFind the sum of one to 100,\nwithout a calculator.\n\n267\n00:16:17.200 --> 00:16:21.660\nInteresting little pattern, but if we\nhave computers, we don't need tricks.\n\n268\n00:16:21.660 --> 00:16:24.569\nWe just brute force it and\nthat's where loops come in handy.\n\n269\n00:16:25.770 --> 00:16:29.782\nSo let's say,\n\n270\n00:16:29.782 --> 00:16:35.339\nfind the sum from some\n\n271\n00:16:35.339 --> 00:16:42.450\nnumber to a second number.\n\n272\n00:16:42.450 --> 00:16:46.010\nNow, this is where it gets\na little weird for people.\n\n273\n00:16:46.010 --> 00:16:46.800\nBecause again,\n\n274\n00:16:46.800 --> 00:16:51.910\nI just described, I got to think of having\na container where I put stuff in it.\n\n275\n00:16:53.030 --> 00:16:58.390\nSo, I need a variable called sum and\nwhen I start out I have summed nothing.\n\n276\n00:16:59.800 --> 00:17:02.443\nBut I can say,\nlet's start with the while loop.\n\n277\n00:17:05.247 --> 00:17:06.659\nAnd I need a count variable.\n\n278\n00:17:09.601 --> 00:17:15.800\nAnd that's actually going to be set\nto the num, whatever num I pass in.\n\n279\n00:17:15.800 --> 00:17:20.420\nSo, I'm going to start at whatever\nthis is and go to whatever this is.\n\n280\n00:17:20.420 --> 00:17:22.740\nAnd sum up all of those numbers.\n\n281\n00:17:22.740 --> 00:17:26.720\nSo, this is getting a little more complex,\nbut we can see we wrap this in a function.\n\n282\n00:17:26.720 --> 00:17:29.550\nAnd then, once we figure out\nall the functionality within\n\n283\n00:17:29.550 --> 00:17:32.375\nthis function construct,\nwe just forget about it.\n\n284\n00:17:32.375 --> 00:17:34.380\n>> Yeah,this allows you\nto be more general and\n\n285\n00:17:34.380 --> 00:17:36.720\nthen let the specifics\ncome in at a later time.\n\n286\n00:17:36.720 --> 00:17:39.410\nAnd that way, they can change,\nthe specifics can change.\n\n287\n00:17:39.410 --> 00:17:42.280\nBut they continue to use the same\nblock of code over and over again.\n\n288\n00:17:42.280 --> 00:17:44.270\nHence, the generality of it.\n\n289\n00:17:45.420 --> 00:17:49.650\n>> Exactly, now this was also\na good time to make some decisions.\n\n290\n00:17:49.650 --> 00:17:54.050\nWe saw that if we use strictly less than,\nwe don't include the last number.\n\n291\n00:17:54.050 --> 00:17:59.190\nI'm actually going to include the last\nnumber, so one to 100 with 100 included.\n\n292\n00:17:59.190 --> 00:18:02.440\nOr maybe we'll just do one to ten,\nso I think that's 55.\n\n293\n00:18:02.440 --> 00:18:04.960\nSo, we can see how that works.\n\n294\n00:18:04.960 --> 00:18:09.320\nSo, I want to run all the way up to\nsecond num and while we're doing that.\n\n295\n00:18:10.350 --> 00:18:14.436\nI'm going to add to the sum,\nwhatever counter is.\n\n296\n00:18:17.428 --> 00:18:20.500\nAnd I'm going to say,\ncounter is increased by one.\n\n297\n00:18:20.500 --> 00:18:23.120\nNow, we saw this plus equals.\n\n298\n00:18:23.120 --> 00:18:29.260\nIf you come from a C background, Java\nbackground, you may have seen this syntax.\n\n299\n00:18:31.980 --> 00:18:33.630\nThis is not allowed in Python.\n\n300\n00:18:33.630 --> 00:18:35.910\nSo, if you have previous programming\nexperience, you try to do this,\n\n301\n00:18:35.910 --> 00:18:36.829\nit's going to give you an error.\n\n302\n00:18:37.840 --> 00:18:39.838\nAnd there's a particular reason for that.\n\n303\n00:18:39.838 --> 00:18:45.050\nThat little plus-plus can go before or\nafter and cause all kinds of problems.\n\n304\n00:18:45.050 --> 00:18:50.250\nSo, this enforces that counter\nis incremented, after it's used.\n\n305\n00:18:50.250 --> 00:18:53.300\n>> Yeah I've definitely used\nthe plus-plus and I like that.\n\n306\n00:18:53.300 --> 00:18:55.360\nBut I see where you're going with.\n\n307\n00:18:55.360 --> 00:18:58.440\nIt can definitely cause some\nconfusions on the program,\n\n308\n00:18:58.440 --> 00:18:59.830\nif you don't use it correctly.\n\n309\n00:18:59.830 --> 00:19:02.600\nAnd it's just too easy for\nus to make a mistake here.\n\n310\n00:19:02.600 --> 00:19:06.390\nSo, best to just avoid the mistake\naltogether by not allowing it.\n\n311\n00:19:07.440 --> 00:19:11.330\n>> Exactly, so I think that was\na good decision, I have no problem.\n\n312\n00:19:11.330 --> 00:19:14.070\nI have adapted very well.\n\n313\n00:19:14.070 --> 00:19:17.020\nAnd then at the end of this function,\nI actually want to return sum.\n\n314\n00:19:17.020 --> 00:19:19.650\nSo, it's going to spit out some number.\n\n315\n00:19:19.650 --> 00:19:22.440\nAnd now,\nwe have black boxed this function.\n\n316\n00:19:22.440 --> 00:19:25.790\nBy the name, find the sum,\nsum number, another number.\n\n317\n00:19:25.790 --> 00:19:27.890\nI can probably deduce\nwhat that's going to do.\n\n318\n00:19:27.890 --> 00:19:32.250\nAnd then I can just use it, without\nworrying about the implementation of it.\n\n319\n00:19:32.250 --> 00:19:33.900\nSo, let's go ahead and use that.\n\n320\n00:19:35.060 --> 00:19:42.506\nSo let's say, X = find_sum(1,10) and\n\n321\n00:19:42.506 --> 00:19:45.680\nthen print(x).\n\n322\n00:19:45.680 --> 00:19:47.935\nAnd I've gotten things\nall twisted around here.\n\n323\n00:19:47.935 --> 00:19:52.511\nUh-oh, you know what I forgot to do?\n\n324\n00:19:52.511 --> 00:19:53.719\n>> There's your problem.\n\n325\n00:19:53.719 --> 00:19:54.757\n>> There's your problem.\n\n326\n00:19:59.788 --> 00:20:02.543\nIt happens to the best of us, so-\n>> I do it all the time.\n\n327\n00:20:02.543 --> 00:20:03.986\n>> [LAUGH]\n>> I don't know why.\n\n328\n00:20:03.986 --> 00:20:06.402\nYou would think that this would\njust become like second nature.\n\n329\n00:20:06.402 --> 00:20:09.939\nI'm creating scripts,\nI'm doing this, I'm yeah, and\n\n330\n00:20:09.939 --> 00:20:13.051\nI always forget to go in and\ncheck that executable.\n\n331\n00:20:13.051 --> 00:20:14.380\nI do not do it.\n\n332\n00:20:14.380 --> 00:20:17.940\nI try to run my script and it says,\nwhoops sorry, it's not a script.\n\n333\n00:20:17.940 --> 00:20:19.250\nYou need to give me a valid executable.\n\n334\n00:20:19.250 --> 00:20:22.380\nI'm like, yeah, I need to make this\nexecutable, it's so easy to do.\n\n335\n00:20:23.560 --> 00:20:26.780\n>> Yeah, so these are key things\nthat you should check very first.\n\n336\n00:20:28.200 --> 00:20:29.090\nIs it executable?\n\n337\n00:20:29.090 --> 00:20:30.620\nDid I add my shebang?\n\n338\n00:20:30.620 --> 00:20:34.900\nDid I properly format my syntax?\n\n339\n00:20:34.900 --> 00:20:36.850\nAnd it will tell you that pretty quickly.\n\n340\n00:20:36.850 --> 00:20:39.980\nAnd boom, that was fast,\nI have the sum from one to ten.\n\n341\n00:20:39.980 --> 00:20:44.150\nBut if I wanted to come back and\n\n342\n00:20:44.150 --> 00:20:48.552\nsay from one to 11,000.\n\n343\n00:20:48.552 --> 00:20:55.110\nI mean even, with a calculator that\nwould take me, one plus two plus three.\n\n344\n00:20:55.110 --> 00:21:01.060\nBut there it is, and\nthat is the power of iteration.\n\n345\n00:21:01.060 --> 00:21:07.630\nI can do repetitive task very,\nvery fast, with very little effort.\n\n346\n00:21:08.780 --> 00:21:12.440\nI do want to come back and\nlook at some of this syntax here.\n\n347\n00:21:13.640 --> 00:21:16.090\nI have a function,\nwhich has the def keyword and\n\n348\n00:21:16.090 --> 00:21:18.640\nI have this first block of indentation.\n\n349\n00:21:18.640 --> 00:21:23.700\nBut you'll notice the indentation for\nthe while, actually comes in again.\n\n350\n00:21:23.700 --> 00:21:28.130\nSaying hey, this code is\nassociated with this while loop.\n\n351\n00:21:28.130 --> 00:21:31.890\nBut this while loop is\nassociated with this function.\n\n352\n00:21:31.890 --> 00:21:34.400\nSo, I don't have all these\ncurly braces and things, but\n\n353\n00:21:34.400 --> 00:21:36.350\nif I don't indent them properly.\n\n354\n00:21:36.350 --> 00:21:40.160\nAnd let's just take a look,\nlike let's say, that I space and\n\n355\n00:21:40.160 --> 00:21:41.390\nI didn't indent that properly.\n\n356\n00:21:43.740 --> 00:21:47.910\nIt says unexpected indent and I'm like.\n\n357\n00:21:47.910 --> 00:21:51.019\nAnd notice, sometimes,\nwhen we start getting these nested ones.\n\n358\n00:21:52.370 --> 00:21:56.900\nI don't actually get the error where\nI thought I would get the error.\n\n359\n00:21:56.900 --> 00:22:02.240\nSo counter, well,\nit's actually the line before it.\n\n360\n00:22:02.240 --> 00:22:04.850\nSo, something to be very careful about.\n\n361\n00:22:04.850 --> 00:22:08.720\n>> At least it gives you a good idea\nof about where to start looking.\n\n362\n00:22:08.720 --> 00:22:12.529\nIf you see the code there and\nas you can see on Jason's example.\n\n363\n00:22:12.529 --> 00:22:14.587\nJason, I'm going to call you Jason.\n\n364\n00:22:14.587 --> 00:22:17.476\nI told you, it's your new name,\nit's your new name.\n\n365\n00:22:17.476 --> 00:22:18.761\nIn Justin's example,\n\n366\n00:22:18.761 --> 00:22:22.687\neven though it didn't get him the correct\nline of where the problem was.\n\n367\n00:22:22.687 --> 00:22:26.174\nIt gave him the general whereabouts and\nhe can start looking.\n\n368\n00:22:26.174 --> 00:22:29.140\nAnd he can see, okay,\nwell this looks right.\n\n369\n00:22:29.140 --> 00:22:31.620\nSo maybe, if something before that.\n\n370\n00:22:31.620 --> 00:22:36.070\nObviously it will have to be before that,\nbecause once it exits out with an error.\n\n371\n00:22:36.070 --> 00:22:38.870\nIt didn't read any of the code below it,\nif there is any at all.\n\n372\n00:22:38.870 --> 00:22:40.840\nSo, you have to start\nworking your way backwards.\n\n373\n00:22:40.840 --> 00:22:44.450\nAnd immediately, we saw that\nindentation didn't look quite right and\n\n374\n00:22:44.450 --> 00:22:45.410\nyou were able to fix it quickly.\n\n375\n00:22:47.130 --> 00:22:49.980\n>> Well, Daniel first off I\nhave to congratulate you.\n\n376\n00:22:49.980 --> 00:22:53.300\nYou've actually, already made\nsense of some of the programming\n\n377\n00:22:53.300 --> 00:22:55.070\nthings that we've done on this show.\n\n378\n00:22:55.070 --> 00:22:57.600\nYou're like, I know because\nit's an interpreted language,\n\n379\n00:22:57.600 --> 00:23:00.060\nthat it doesn't do anything after that.\n\n380\n00:23:00.060 --> 00:23:01.480\nSo, It stopped there.\n\n381\n00:23:01.480 --> 00:23:03.750\nSo, that means it had to come before it.\n\n382\n00:23:03.750 --> 00:23:06.260\nSo, great job guy.\n\n383\n00:23:06.260 --> 00:23:07.345\n>> I try.\nI try.\n\n384\n00:23:07.345 --> 00:23:10.590\n>> [LAUGH]\n>> If we can just get that Jason\n\n385\n00:23:10.590 --> 00:23:11.470\nname thing down.\n\n386\n00:23:11.470 --> 00:23:12.900\n>> I know.\nThat I'll never get, but-\n\n387\n00:23:12.900 --> 00:23:13.440\n>> I don't know.\n\n388\n00:23:14.560 --> 00:23:18.250\nSo I think it would behest us,\n\n389\n00:23:18.250 --> 00:23:23.570\nto see how this would look, written as\na four loop, just for comparative reasons.\n\n390\n00:23:23.570 --> 00:23:27.460\nNow, we're using numbers here,\njust to really drive home the concept.\n\n391\n00:23:27.460 --> 00:23:32.100\nBut these really become powerful,\nwhen I need to automate those tasks.\n\n392\n00:23:32.100 --> 00:23:34.930\nWhen I need to go through\nincredibly large collections.\n\n393\n00:23:34.930 --> 00:23:37.260\nLike for instance, this 11000,\n\n394\n00:23:37.260 --> 00:23:41.050\nmay represent the number\nof lines in a log document.\n\n395\n00:23:41.050 --> 00:23:45.280\nFrom my Apache logs or\nmy EngineX logs or whatever it may be.\n\n396\n00:23:45.280 --> 00:23:49.510\n>> And I can just go line by line and\njust find, okay, there's an error,\n\n397\n00:23:49.510 --> 00:23:50.530\nthere's an error, there's an error.\n\n398\n00:23:50.530 --> 00:23:52.210\nI can do quick error counts.\n\n399\n00:23:52.210 --> 00:23:55.630\nI can actually propagate another\nfile that has just the errors, so\n\n400\n00:23:55.630 --> 00:23:57.474\nI can filter out all the other mess.\n\n401\n00:23:57.474 --> 00:24:02.880\nSo even though this is just numbers,\nthis gives us tools that\n\n402\n00:24:02.880 --> 00:24:08.830\nThat we can use to our,\nwhat's the word I'm looking for?\n\n403\n00:24:08.830 --> 00:24:13.390\nTo really make us powerful in\nthe programs that we write.\n\n404\n00:24:13.390 --> 00:24:19.471\nSo let's quickly look at a comparison\nbetween, and you'll find in Python the for\n\n405\n00:24:19.471 --> 00:24:24.160\nloop is probably the more what\nthey call Pythonic of the loops.\n\n406\n00:24:25.230 --> 00:24:29.758\nBecause they just work, they just work.\n\n407\n00:24:29.758 --> 00:24:32.590\nSo, for_find_sum, and\n\n408\n00:24:32.590 --> 00:24:37.770\nI'm gonna start with\nmore descriptive numbers.\n\n409\n00:24:37.770 --> 00:24:39.945\nSo, start and stop, right?\n\n410\n00:24:39.945 --> 00:24:43.861\nThose are probably better variable\nnames instead of num and second num.\n\n411\n00:24:43.861 --> 00:24:48.340\nSo for_find_sum I wanna say for\n\n412\n00:24:52.770 --> 00:24:57.280\nelement in, so\nelement is something in our collection,\n\n413\n00:24:57.280 --> 00:25:03.549\nin the range of start to stop, and we have\nto add one as we saw that's not inclusive.\n\n414\n00:25:04.860 --> 00:25:07.370\nAnd, we forgot something,\n\n415\n00:25:08.700 --> 00:25:13.790\nwe need our accumulator so\nwe're gonna have sum again.\n\n416\n00:25:13.790 --> 00:25:22.560\nWe're just gonna say sum += element,\nand return sum.\n\n417\n00:25:22.560 --> 00:25:27.900\nSo if I had to choose between find_sum or\nfor_find_sum, I would choose the for\n\n418\n00:25:27.900 --> 00:25:32.960\nloop version cuz it's just a little easier\nto read to me, makes a little more sense.\n\n419\n00:25:32.960 --> 00:25:38.013\nNow, I could've chosen\nvariable names that made\n\n420\n00:25:38.013 --> 00:25:44.038\nthis a little more sensible, so\nif I change this num to start\n\n421\n00:25:47.178 --> 00:25:49.600\nAnd this to stop.\n\n422\n00:25:50.990 --> 00:25:54.250\nThen and that's a little more readable,\nso variable names are important.\n\n423\n00:25:55.310 --> 00:26:00.618\nBut Daniel which one would you choose\nif you had to pick the implementation?\n\n424\n00:26:00.618 --> 00:26:02.610\n>> At this point I would say the for\n\n425\n00:26:02.610 --> 00:26:06.990\nin Python has definitely seemed to\nbe a little bit easier to follow.\n\n426\n00:26:06.990 --> 00:26:09.560\nSo for me I would probably go with the for\nloop on this.\n\n427\n00:26:11.600 --> 00:26:12.720\n>> Good man, good man.\n\n428\n00:26:12.720 --> 00:26:15.326\nYou are following the Python equates.\n\n429\n00:26:15.326 --> 00:26:17.485\n>> Thank you.\n\n430\n00:26:17.485 --> 00:26:20.450\n>> [LAUGH]\n>> So\n\n431\n00:26:20.450 --> 00:26:25.319\nyou know what one through ten is,\nlet's make sure that our function runs.\n\n432\n00:26:26.980 --> 00:26:29.430\nBoom, it's 55, just as fast.\n\n433\n00:26:29.430 --> 00:26:34.900\nIt doesn't look like there's any issues\nwith how fast it runs in comparison.\n\n434\n00:26:34.900 --> 00:26:37.890\nAnd if I go all the way up to what is it,\n10,000?\n\n435\n00:26:37.890 --> 00:26:40.150\nLet see how that works.\n\n436\n00:26:40.150 --> 00:26:41.980\nAnd there we go.\n\n437\n00:26:41.980 --> 00:26:43.570\nWhat is that?\n\n438\n00:26:43.570 --> 00:26:45.069\nA giant number is what that is.\n\n439\n00:26:46.270 --> 00:26:47.500\nSo-\n>> Lots of fives and zeros.\n\n440\n00:26:47.500 --> 00:26:49.540\n[LAUGH]\n>> [LAUGH] Lots of fives and zeros.\n\n441\n00:26:49.540 --> 00:26:54.080\nBut we've now seen both of\nour iterative structures.\n\n442\n00:26:54.080 --> 00:26:56.600\nThese do take a little\nwhile to think about.\n\n443\n00:26:56.600 --> 00:26:58.500\nHow are these working?\n\n444\n00:26:58.500 --> 00:27:02.580\nWe've also seen them in\nthe construct of building functions.\n\n445\n00:27:02.580 --> 00:27:07.750\nBut one final thing\nthat we may want to see\n\n446\n00:27:07.750 --> 00:27:12.270\nis when would we use maybe these\ninfinite loops that I've talked about.\n\n447\n00:27:13.960 --> 00:27:16.660\nAnd it provides a final\n\n448\n00:27:16.660 --> 00:27:21.449\nkind of decision making process in\ncombination with loops that will help us.\n\n449\n00:27:22.470 --> 00:27:30.250\nSo I'm going to bring this up here and I'm\njust gonna forgo the functions for now.\n\n450\n00:27:30.250 --> 00:27:36.090\nSo, while and\nI'm just gonna say while True, okay?\n\n451\n00:27:36.090 --> 00:27:41.690\nAnd remind me not to save my text until\nI'm done talking cuz it hops down\n\n452\n00:27:41.690 --> 00:27:49.258\nat the bottom and kind of deletes all of\nthe things that I was trying to do anyway.\n\n453\n00:27:49.258 --> 00:27:54.414\nSo, Real quick,\n\n454\n00:27:54.414 --> 00:27:59.212\nI'm taking user input,\nI'm just asking, asking, asking, and\n\n455\n00:27:59.212 --> 00:28:04.860\nI give them the option of saying,\nif you wanna quit, type q, right?\n\n456\n00:28:04.860 --> 00:28:11.355\nWell I would start with an infinite loop,\ntake user input, use decision making\n\n457\n00:28:11.355 --> 00:28:17.430\nprocesses to break the loop only if\nthe input was what I asked them to do.\n\n458\n00:28:17.430 --> 00:28:25.970\nSo, I would say user_input equals\nraw_input, let's see here.\n\n459\n00:28:28.430 --> 00:28:32.070\nWhat is a fruit that you like?\n\n460\n00:28:33.520 --> 00:28:38.550\nAnd then and here's where it gets\nkind of tricky, I'm gonna zoom\n\n461\n00:28:40.480 --> 00:28:42.950\nout, type q to quit.\n\n462\n00:28:44.180 --> 00:28:48.610\nSo that's a standard kind\nof prompt you would see and\n\n463\n00:28:48.610 --> 00:28:51.940\nI just noticed that you may\nnot be able to see me here.\n\n464\n00:28:54.320 --> 00:28:55.786\nThere we go.\n\n465\n00:28:55.786 --> 00:29:01.210\nAnd So while True take user_input and\n\n466\n00:29:01.210 --> 00:29:05.970\nif someone types q I don't\nwant to do anything else.\n\n467\n00:29:05.970 --> 00:29:07.950\nThat they said hey I want to quit.\n\n468\n00:29:07.950 --> 00:29:15.430\nSo if user_input == q,\nthen I want to break the loop.\n\n469\n00:29:15.430 --> 00:29:19.640\nThis is a new key word, this is saying\nif you're in the middle of iteration,\n\n470\n00:29:19.640 --> 00:29:22.780\nwhen you see this word break out.\n\n471\n00:29:22.780 --> 00:29:25.490\nSo if they type q, I wanna quit,\n\n472\n00:29:27.250 --> 00:29:33.450\nelse that is a good fruit.\n\n473\n00:29:34.630 --> 00:29:38.570\nNow this is not a robust program,\nI could type anything in here.\n\n474\n00:29:38.570 --> 00:29:43.950\nI could type things that aren't\nactually fruit in there like potato and\n\n475\n00:29:43.950 --> 00:29:45.310\nit would still run.\n\n476\n00:29:45.310 --> 00:29:47.910\nBut let's see how this works.\n\n477\n00:29:47.910 --> 00:29:54.030\nSo while this was running effectively,\ntake user input with this prompt.\n\n478\n00:29:54.030 --> 00:30:00.510\nIf they type a q, stop, otherwise tell\nthem how good of a fruit that is.\n\n479\n00:30:00.510 --> 00:30:01.940\nAll right, cool.\n\n480\n00:30:01.940 --> 00:30:05.360\nSo, while_loops.\n\n481\n00:30:05.360 --> 00:30:07.720\nWhat's the type of fruit you like?\n\n482\n00:30:07.720 --> 00:30:10.010\n>> Let's go with, how about pears?\n\n483\n00:30:10.010 --> 00:30:12.410\n>> Pears, that is a good fruit.\n\n484\n00:30:12.410 --> 00:30:13.390\nWhat's another fruit you like?\n\n485\n00:30:14.520 --> 00:30:15.880\n>> Let's go oranges.\n\n486\n00:30:15.880 --> 00:30:16.400\n>> Oranges.\n\n487\n00:30:18.300 --> 00:30:20.660\nI'm gonna go with kiwis.\n\n488\n00:30:20.660 --> 00:30:22.790\nAnd this would actually go on forever.\n\n489\n00:30:22.790 --> 00:30:26.700\nAnd because I have that pause, it's\nnot eating up a bunch of CPU cycles or\n\n490\n00:30:26.700 --> 00:30:28.080\na bunch of memory.\n\n491\n00:30:28.080 --> 00:30:32.380\nThat raw input causes it to pause so\nI can gather input.\n\n492\n00:30:32.380 --> 00:30:36.470\nBut if I just had this running\ninfinitely with nothing else going on,\n\n493\n00:30:36.470 --> 00:30:40.065\nnot taking user input,\nthis would run really really fast and\n\n494\n00:30:40.065 --> 00:30:43.328\nyou may have to like CTRL,\nALT DEL or kill the process.\n\n495\n00:30:43.328 --> 00:30:48.263\nBut I wanna quit now,\nI know those are all good fruits so\n\n496\n00:30:48.263 --> 00:30:51.870\nI type q and that's a great way to stop.\n\n497\n00:30:51.870 --> 00:30:53.732\nThat's effectively a game loop.\n\n498\n00:30:53.732 --> 00:30:57.864\n>> Yeah, and I would assume this is\nsomething that they also use in like menu\n\n499\n00:30:57.864 --> 00:31:00.913\ndriven systems where it gives\nyou a bunch of options,\n\n500\n00:31:00.913 --> 00:31:03.200\nyou have to choose the correct option.\n\n501\n00:31:03.200 --> 00:31:05.470\nOr if you don't want to\nchoose any of the options and\n\n502\n00:31:05.470 --> 00:31:08.640\nwe need to break out of the loop using\nsomething like press q for quit.\n\n503\n00:31:08.640 --> 00:31:11.830\nI can see that definitely being\nused in that type of environment.\n\n504\n00:31:11.830 --> 00:31:16.250\n>> Actually old command\nline style menu-driven\n\n505\n00:31:16.250 --> 00:31:18.820\napplications very much\nimplemented something like this.\n\n506\n00:31:18.820 --> 00:31:23.370\nApplication launch while True and\nthen there was some decision making\n\n507\n00:31:23.370 --> 00:31:28.140\nprocess that, hey if they wanna quit,\nALT q or ALT F4 or something like that.\n\n508\n00:31:29.250 --> 00:31:31.030\nSo, yeah.\n>> That would definitely be cool for\n\n509\n00:31:31.030 --> 00:31:36.040\nmaking something like a systems and\nnetworking administration program\n\n510\n00:31:36.040 --> 00:31:39.320\nwhere you can say, I have got a menu\nof items that I want it to do.\n\n511\n00:31:39.320 --> 00:31:42.520\nMaybe I wanna do some networking tools or\nI wanna throw in some systems and\n\n512\n00:31:42.520 --> 00:31:45.730\ncheck the size of my hard drive,\nhow much free space do I have.\n\n513\n00:31:45.730 --> 00:31:50.700\nCreate a menu, have it call in those\nfunctions into the program itself and\n\n514\n00:31:50.700 --> 00:31:52.430\nwhen you're done, you press q,\nyou're out of it.\n\n515\n00:31:52.430 --> 00:31:53.750\nI've done that kind of thing with Bash and\n\n516\n00:31:53.750 --> 00:31:56.430\nI don't know, I feel like I could\nprobably do that with Python as well.\n\n517\n00:31:57.620 --> 00:32:00.510\n>> As much as your progressing\nover these last few episodes,\n\n518\n00:32:00.510 --> 00:32:01.900\nI have no doubt that you would.\n\n519\n00:32:01.900 --> 00:32:02.640\n>> Awesome.\n\n520\n00:32:02.640 --> 00:32:08.460\nWell we've definitely seen a jump now in\nour knowledge base as far as Python goes.\n\n521\n00:32:08.460 --> 00:32:14.060\nI feel at this point that we could maybe\ncall ourselves Python programmers.\n\n522\n00:32:14.060 --> 00:32:17.770\nWe definitely got some\nskills in our toolkit here\n\n523\n00:32:17.770 --> 00:32:22.400\nto be able to create a truly functional,\nusable type of program.\n\n524\n00:32:22.400 --> 00:32:25.580\nGot a lot of skills in that bag, but\nI'm sure there's plenty more to go.\n\n525\n00:32:25.580 --> 00:32:28.660\nMaybe we're programmers but\nwe're not good programmers quite yet so\n\n526\n00:32:28.660 --> 00:32:30.640\nstill a whole lot more to go.\n\n527\n00:32:30.640 --> 00:32:35.790\nBut Justin, thank you for indulging us and\nteaching us how to do these iterations.\n\n528\n00:32:35.790 --> 00:32:38.310\nHow to work with for loops,\nhow to work with wild loops.\n\n529\n00:32:38.310 --> 00:32:41.760\nThey're gonna be very, very handy,\nI'm sure, in our upcoming episodes.\n\n530\n00:32:41.760 --> 00:32:44.420\nThat being said,\nJustin thank you again for joining us.\n\n531\n00:32:44.420 --> 00:32:46.080\nThank you guys out there for watching.\n\n532\n00:32:46.080 --> 00:32:48.230\nWe're gonna go ahead and\nsign off for ITProTV.\n\n533\n00:32:48.230 --> 00:32:50.370\nI've been your host Daniel Lowrie.\n\n534\n00:32:50.370 --> 00:32:51.220\n>> And I'm Justin Dennison.\n\n535\n00:32:51.220 --> 00:32:53.398\n>> And we'll see you next time.\n\n536\n00:32:53.398 --> 00:32:58.919\n[MUSIC]\n\n",
          "vimeoId": "158186427"
        },
        {
          "description": "In this episode, Daniel and Justin take a closer look at Strings in Python. They explain the structure of Strings through which they are able to introduce you to the concept and practice of Slicing. They also cover another useful concept known as Zero Based Indexing, which leads them to their final topic of another iteration process called For loops.",
          "length": "1604",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-6-strings_and_more_iteration-030516-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-6-strings_and_more_iteration-030516-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-6-strings_and_more_iteration-030516-1-sm.jpg",
          "title": "Strings and more Iteration",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:07.888\n[MUSIC]\n\n2\n00:00:07.888 --> 00:00:12.766\nAll right, greetings everyone, and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:12.766 --> 00:00:14.275\nI'm your host, Daniel Lowrie.\n\n4\n00:00:14.275 --> 00:00:18.050\nAnd in today's episode, we are continuing\non with our Python programming series.\n\n5\n00:00:18.050 --> 00:00:21.888\nJoining us back in the studio again today\nto lend his expertise on the very topic is\n\n6\n00:00:21.888 --> 00:00:24.379\nour good friend and mentor, Mr.\nJustin Dennison.\n\n7\n00:00:24.379 --> 00:00:26.284\nJustin, welcome back to the show, sir.\n\n8\n00:00:26.284 --> 00:00:26.934\n>> Thank you, Daniel.\n\n9\n00:00:26.934 --> 00:00:31.588\nAnd today, we're starting off\nwith a little more iteration, and\n\n10\n00:00:31.588 --> 00:00:34.758\nwe're really gonna dive deep into strings.\n\n11\n00:00:34.758 --> 00:00:37.731\nSo, strings are, we've been using them.\n\n12\n00:00:37.731 --> 00:00:38.845\nWe've been testing for them.\n\n13\n00:00:38.845 --> 00:00:42.027\nI've said, hey, it's just some characters,\nit looks like a sentence.\n\n14\n00:00:42.027 --> 00:00:46.367\nBut It's very important to realize\nsome neat properties about strings.\n\n15\n00:00:46.367 --> 00:00:50.231\nBecause if I'm running through and\ntrying to look through error logs, or\n\n16\n00:00:50.231 --> 00:00:54.342\nif I'm trying to look for information on\na computer system trying to track down\n\n17\n00:00:54.342 --> 00:00:57.480\nproblems, or maybe just doing\nlike a frequency analysis.\n\n18\n00:00:58.540 --> 00:01:00.740\nIf I was a computational linguist,\n\n19\n00:01:00.740 --> 00:01:04.260\nthen I could do frequency analysis\nbased on character counts.\n\n20\n00:01:04.260 --> 00:01:08.440\nWhich, side note, is an interesting\nway of breaking certain ciphers,\n\n21\n00:01:09.770 --> 00:01:11.830\nfrequency analysis for Caesar ciphers.\n\n22\n00:01:12.890 --> 00:01:16.100\nGone, over, totally obliterated.\n\n23\n00:01:16.100 --> 00:01:17.790\nJust horrible.\n\n24\n00:01:17.790 --> 00:01:22.026\nSo, that was an interesting but yet\nawkward aside, but let's go ahead and\n\n25\n00:01:22.026 --> 00:01:23.717\nget started on some strings.\n\n26\n00:01:23.717 --> 00:01:27.945\nSo I'm gonna actually hop\ninto the terminal and\n\n27\n00:01:27.945 --> 00:01:31.331\nlet's just review what strings are.\n\n28\n00:01:31.331 --> 00:01:38.553\nAnd there's some methods that we haven't\nused even though we've been using strings.\n\n29\n00:01:38.553 --> 00:01:43.339\nSo I'm just gonna define my_string,\nand again,\n\n30\n00:01:43.339 --> 00:01:48.346\nin quotes, I can use double quotes or\nsingle quotes,\n\n31\n00:01:48.346 --> 00:01:53.380\nand this may be a sentence\nlike here we are recording.\n\n32\n00:01:55.920 --> 00:01:59.210\nAnd I have to open and\nclose the quotes accordingly.\n\n33\n00:01:59.210 --> 00:02:02.610\nBut now here's where it\ncomes to the horrible\n\n34\n00:02:02.610 --> 00:02:04.800\nweird hiccups that people will have.\n\n35\n00:02:04.800 --> 00:02:07.880\nA string is a collection of characters.\n\n36\n00:02:07.880 --> 00:02:12.430\nFor instance, If I ask you to spell\nyour name, how would you do so?\n\n37\n00:02:12.430 --> 00:02:15.500\n>> I would use the American alphabet.\n\n38\n00:02:15.500 --> 00:02:17.520\nThe English alphabet should I say.\n\n39\n00:02:17.520 --> 00:02:18.740\nOf d a n i e and l and\n\n40\n00:02:18.740 --> 00:02:23.630\nput them all together in a formulated\ngrouping so that it wouldn't\n\n41\n00:02:23.630 --> 00:02:27.060\nget confused with any other letters that\nmight be on a page if I was writing this.\n\n42\n00:02:27.060 --> 00:02:30.640\nAnd that would be it, I would spell\nit out using those characters.\n\n43\n00:02:30.640 --> 00:02:34.150\n>> And it seems really intuitive\nbecause when you ask someone\n\n44\n00:02:34.150 --> 00:02:35.420\nhey how do you spell that?\n\n45\n00:02:35.420 --> 00:02:38.490\nThey name off character after\ncharacter after character.\n\n46\n00:02:38.490 --> 00:02:42.960\nWhich is effectively how strings\nare treated in Python and\n\n47\n00:02:42.960 --> 00:02:44.440\nsome other programming languages.\n\n48\n00:02:44.440 --> 00:02:49.330\nIt is a collection of characters put\ntogether in very particular ways.\n\n49\n00:02:49.330 --> 00:02:53.810\nI think what really trips people\nup is space is its own character,\n\n50\n00:02:53.810 --> 00:02:56.510\nnew line is its own character.\n\n51\n00:02:56.510 --> 00:03:00.100\nSo you can have a space on a new line and\nthey count.\n\n52\n00:03:00.100 --> 00:03:03.150\nAnd uppercase and\nlowercase are not the same.\n\n53\n00:03:03.150 --> 00:03:09.300\nSo there's multiple ways of encoding\nthese, you have ASCII tables and UTF-8.\n\n54\n00:03:09.300 --> 00:03:13.700\nThose are behind the scenes but\nsometimes you will run into problems.\n\n55\n00:03:13.700 --> 00:03:17.080\nI don't foresee most anybody\nrunning into problems with these.\n\n56\n00:03:17.080 --> 00:03:21.215\nBut because these are collections, this\nis a great way to introduce some more of\n\n57\n00:03:21.215 --> 00:03:24.316\nthese complex features that\nthe people have trouble with.\n\n58\n00:03:24.316 --> 00:03:27.172\nIteration is one and\nwe're gonna use iteration.\n\n59\n00:03:27.172 --> 00:03:30.402\nBut also like accessing these elements and\n\n60\n00:03:30.402 --> 00:03:35.252\nmoving these things around and\ntrying to count how things work.\n\n61\n00:03:35.252 --> 00:03:39.709\nSo let's look at a couple of methods\nwithin strings and then actually use them.\n\n62\n00:03:39.709 --> 00:03:47.270\nAnd what I mean by methods are functions\nthat operate on a particular data type.\n\n63\n00:03:47.270 --> 00:03:51.082\nSo that data, so,\nthese are four strings only,\n\n64\n00:03:51.082 --> 00:03:53.890\nthey operate a particular way on strings.\n\n65\n00:03:53.890 --> 00:03:56.720\nYou may see these methods\nused with other data,\n\n66\n00:03:56.720 --> 00:03:59.922\nbut they'll do something\na little bit differently.\n\n67\n00:03:59.922 --> 00:04:06.261\nNow, I'm also gonna introduce\na function to really help us.\n\n68\n00:04:06.261 --> 00:04:11.270\nSometimes in the interpreter, I wanna\nknow, hey what are some things I can do?\n\n69\n00:04:11.270 --> 00:04:14.120\nSo what can I do with strings?\n\n70\n00:04:14.120 --> 00:04:17.950\nIf I type D I R as a function and\n\n71\n00:04:17.950 --> 00:04:24.080\ngive it the data type which I can get from\ntype, it'll tell me all of these things.\n\n72\n00:04:24.080 --> 00:04:30.100\nThese double dunder stuff, for\nnow I would not worry about those.\n\n73\n00:04:30.100 --> 00:04:36.190\nBut when you get down here to like\ncapitalize, center, count, decode.\n\n74\n00:04:36.190 --> 00:04:39.802\nThese are all methods that\nyou can use with strings and\n\n75\n00:04:39.802 --> 00:04:42.655\nthen there's some other ones\nthat have special syntax.\n\n76\n00:04:42.655 --> 00:04:46.210\n>> Justin, would you say these\nare manipulators maybe even?\n\n77\n00:04:46.210 --> 00:04:49.550\n>> So that's an interesting question.\n\n78\n00:04:49.550 --> 00:04:51.410\nStrings are immutable.\n\n79\n00:04:51.410 --> 00:04:52.850\nAnd I'm glad you brought this up.\n\n80\n00:04:52.850 --> 00:04:54.920\nNow what do I mean by immutable?\n\n81\n00:04:54.920 --> 00:04:57.310\nIf I say my string.\n\n82\n00:04:59.110 --> 00:05:02.720\nI can't change the value of\nwhatever's attached to that.\n\n83\n00:05:02.720 --> 00:05:04.230\nSo here we are recording.\n\n84\n00:05:05.400 --> 00:05:05.900\nRight?\n\n85\n00:05:09.771 --> 00:05:14.440\nNone of these methods that\nare listed here change that string.\n\n86\n00:05:14.440 --> 00:05:19.400\nThey will give you a copy of a new\nstring that has the changes for you.\n\n87\n00:05:19.400 --> 00:05:21.940\nSo behind the scenes I\ncan't actually change.\n\n88\n00:05:21.940 --> 00:05:24.770\nAnd we'll see that that actually brings\nup an error if I try to do that.\n\n89\n00:05:24.770 --> 00:05:26.240\nBut it's something to keep in mind.\n\n90\n00:05:26.240 --> 00:05:27.590\nStrings are immutable.\n\n91\n00:05:27.590 --> 00:05:31.640\nWhich is not, everything we've done,\nthere's been, I can change stuff.\n\n92\n00:05:31.640 --> 00:05:32.640\nI can do whatever.\n\n93\n00:05:32.640 --> 00:05:36.170\nNow that does not mean that I\ncannot reassign a variable.\n\n94\n00:05:36.170 --> 00:05:41.120\nSo variable assignment is different\nthan actually changing the data.\n\n95\n00:05:41.120 --> 00:05:44.730\nSo we'll take a look at that, excuse me.\n\n96\n00:05:44.730 --> 00:05:49.366\nBut the first thing with a string,\nlike my string,\n\n97\n00:05:49.366 --> 00:05:53.650\nis I wanna know, right,\n\n98\n00:05:53.650 --> 00:05:57.690\nmy first name has six letters,\npeople are like yeah, so that's even cool.\n\n99\n00:05:57.690 --> 00:06:03.770\nI can actually use len as a function and\nsay my string.\n\n100\n00:06:05.740 --> 00:06:08.170\nAnd what was that string again?\n\n101\n00:06:08.170 --> 00:06:10.477\nHere we are recording.\n\n102\n00:06:10.477 --> 00:06:15.461\nSo there's one, two, three, four, five\nspaces count, six, seven, eight, nine,\n\n103\n00:06:15.461 --> 00:06:17.890\nten 11 blah blah blah blah blah.\n\n104\n00:06:17.890 --> 00:06:19.060\nOnward and upward.\n\n105\n00:06:19.060 --> 00:06:21.460\nSo the length of my\nstring is 21 characters.\n\n106\n00:06:23.350 --> 00:06:28.660\nGreat, we can also do things like\n\n107\n00:06:28.660 --> 00:06:32.650\nI just want the first letter of my string.\n\n108\n00:06:34.510 --> 00:06:37.130\nI want the very first one,\nand it returns an H.\n\n109\n00:06:38.710 --> 00:06:42.780\nDaniel, do you see something\nkind of odd about this?\n\n110\n00:06:42.780 --> 00:06:47.370\n>> Yeah, you used the zero number\ninstead of the first right?\n\n111\n00:06:47.370 --> 00:06:48.850\nBecause the first would be one.\n\n112\n00:06:48.850 --> 00:06:51.850\nSo I don't understand why you would\nwanna use zero instead of one.\n\n113\n00:06:53.410 --> 00:06:56.250\n>> And this is a giant hiccup for\na bunch of people.\n\n114\n00:06:58.270 --> 00:07:01.630\nCollections in Python and\nvarious other programming languages\n\n115\n00:07:01.630 --> 00:07:05.020\ntypically start what\nare called zero based indexes.\n\n116\n00:07:05.020 --> 00:07:08.320\nWe start counting with zero which\nis really weird cuz I don't go\n\n117\n00:07:08.320 --> 00:07:10.649\nthere's zero cups, there's one cup.\n\n118\n00:07:11.740 --> 00:07:15.850\nIt's not something that's intuitive,\nbut it makes memory management and\n\n119\n00:07:15.850 --> 00:07:20.440\nsome CPU stuff a little easier to\nmanipulate if we start at zero.\n\n120\n00:07:20.440 --> 00:07:24.670\nSo if I start at zero, then the second\nletter is actually indexed at\n\n121\n00:07:25.780 --> 00:07:30.090\none, and\nif I wanted to say all the way up to.\n\n122\n00:07:31.460 --> 00:07:36.690\nAnd notice, the length here was 21,\nI want it to go to 20.\n\n123\n00:07:36.690 --> 00:07:41.650\nThat actually gives me the last letter.\n\n124\n00:07:41.650 --> 00:07:46.410\nSo the maximum index is one less cuz\nwe've taken all these numbers and\n\n125\n00:07:46.410 --> 00:07:48.560\nshift them back one.\n\n126\n00:07:48.560 --> 00:07:54.325\nSo, we have to be careful, because,\nwhat if I wanted to access 21?\n\n127\n00:07:54.325 --> 00:07:58.206\nI actually get an index\nout of range error.\n\n128\n00:07:58.206 --> 00:08:02.566\n>> So, the problem is the inherent way\nthat the computer actually counts.\n\n129\n00:08:02.566 --> 00:08:04.693\nMost computers start\ncounting with zero and\n\n130\n00:08:04.693 --> 00:08:08.190\nthat is something that can like you say,\ncan definitely trip us up.\n\n131\n00:08:08.190 --> 00:08:11.590\nBecause we're so used to counting\nstarting with the number one.\n\n132\n00:08:11.590 --> 00:08:13.010\nI've actually done this,\n\n133\n00:08:13.010 --> 00:08:16.032\nI've ran into this as a problem\nin bash scripting actually.\n\n134\n00:08:17.080 --> 00:08:21.290\nI was setting parameters\non the end of a command.\n\n135\n00:08:21.290 --> 00:08:24.290\nSo I created a script, the script had\nits name, I wanna execute that script.\n\n136\n00:08:24.290 --> 00:08:29.530\nI can add parameters to the end of it but\nif I started counting with one,\n\n137\n00:08:29.530 --> 00:08:31.510\nthe problem arised and\nwasn't working correctly.\n\n138\n00:08:31.510 --> 00:08:33.440\nI had to remember I gotta to\nstart counting with zero,\n\n139\n00:08:33.440 --> 00:08:34.920\ncuz that's the way computers count.\n\n140\n00:08:34.920 --> 00:08:37.090\nApparently we're running\ninto that same problem.\n\n141\n00:08:37.090 --> 00:08:40.220\nI say problem,\nit's just the nature of the computer.\n\n142\n00:08:40.220 --> 00:08:41.099\nIt's the same here.\n\n143\n00:08:42.720 --> 00:08:46.950\n>> Yeah, exact, I mean this is a pretty\npervasive practice with computing.\n\n144\n00:08:46.950 --> 00:08:51.320\nI know there are some languages that\nstart at one to make them more intuitive.\n\n145\n00:08:51.320 --> 00:08:54.040\nFor me, if you've ever done any\nprogramming or you try to read other\n\n146\n00:08:54.040 --> 00:08:58.380\npeople's code, it's necessary to\nunderstand how zero-based indexing works.\n\n147\n00:08:58.380 --> 00:09:01.380\nFor collections,\ncuz you'll see that a great deal.\n\n148\n00:09:01.380 --> 00:09:05.070\nSo Python decided not to do that.\n\n149\n00:09:05.070 --> 00:09:11.945\nBut along with these collections, Python,\nGuido van Rossom decided to introduce,\n\n150\n00:09:11.945 --> 00:09:16.460\nin addition to this syntax,\nanother thing called a slice.\n\n151\n00:09:16.460 --> 00:09:22.580\nSo usually when I wanted to grab the first\nto the fifth letter of something, I had to\n\n152\n00:09:22.580 --> 00:09:28.540\nwrite a for-loop, grab all of these\nthings, build a new string, return it.\n\n153\n00:09:28.540 --> 00:09:34.180\nBut let's say I want the first,\nwhich is zero-indexed to the fifth,\n\n154\n00:09:34.180 --> 00:09:39.150\nwhich is for-indexed,\nthis is just like the range function.\n\n155\n00:09:39.150 --> 00:09:41.520\nIt doesn't include the index of five but\n\n156\n00:09:41.520 --> 00:09:47.120\nthe fifth letter is actually indexed\nat zero and we'll take a look at that.\n\n157\n00:09:47.120 --> 00:09:50.312\nSo if I wanna go from zero to five,\n\n158\n00:09:50.312 --> 00:09:55.898\nI get the first five letters and\nzero, one, two, three,\n\n159\n00:09:55.898 --> 00:10:00.920\nfour, but\nthere are in fact five characters there.\n\n160\n00:10:02.520 --> 00:10:05.050\nThe space counts which is handy.\n\n161\n00:10:05.050 --> 00:10:08.746\nBecause if I want to start pulling these\nthings apart like if I'm doing like if I'm\n\n162\n00:10:08.746 --> 00:10:12.630\ndoing text based processing which is,\nbig data's all the rage.\n\n163\n00:10:12.630 --> 00:10:18.150\nThat's definitely something you do in big\ndata is processing text and information.\n\n164\n00:10:18.150 --> 00:10:23.480\nThis is way handier than anything\nI've done in other languages.\n\n165\n00:10:23.480 --> 00:10:28.950\nIn addition to, let's say that\nI want to go to the very end.\n\n166\n00:10:30.480 --> 00:10:36.050\nSo I wanna go from zero to the end but\nI don't really know,\n\n167\n00:10:36.050 --> 00:10:41.470\nI could do something like give me\nthe length and and do all kinds of math.\n\n168\n00:10:41.470 --> 00:10:43.220\nBut if I actually don't\ngive it a parameter,\n\n169\n00:10:43.220 --> 00:10:46.350\nit'll just assume that I want\nthe whole all the way to the end.\n\n170\n00:10:46.350 --> 00:10:49.330\nSo that's handy, slicing is very handy.\n\n171\n00:10:49.330 --> 00:10:51.790\nAnd just like the range function,\nwe didn't see this.\n\n172\n00:10:51.790 --> 00:10:55.430\nBut the range function allows\nus to do what's called a step.\n\n173\n00:10:55.430 --> 00:11:02.440\nI can go from zero to the end by twos,\nso I can get every other letter.\n\n174\n00:11:02.440 --> 00:11:06.420\nAnd you'll see that's kind of,\nI have not changed.\n\n175\n00:11:06.420 --> 00:11:07.850\n>> It's like old English.\n\n176\n00:11:07.850 --> 00:11:09.570\n>> Yeah, I am Chaucer.\n\n177\n00:11:09.570 --> 00:11:11.930\n>> Maybe I'll read Beowulf today.\n\n178\n00:11:11.930 --> 00:11:14.300\n>> I've not changed my string,\n\n179\n00:11:14.300 --> 00:11:19.660\nI've gotten a copy of a new string\nwith the changes that I requested.\n\n180\n00:11:19.660 --> 00:11:23.766\nSo that's something to keep in mind with\nthat immutability we might think that\n\n181\n00:11:23.766 --> 00:11:25.134\nwe're making changes but\n\n182\n00:11:25.134 --> 00:11:28.194\nif we tried to make a change\nto my string directly, right?\n\n183\n00:11:28.194 --> 00:11:33.412\nIf I wanted to change the first letter to\n3 and I'm just gonna assign a variable or\n\n184\n00:11:33.412 --> 00:11:38.190\nlet's actually make it a string so\nyou're not like well, you messed up.\n\n185\n00:11:40.110 --> 00:11:42.930\nString object does not\nsupport object assignment.\n\n186\n00:11:42.930 --> 00:11:44.420\nSo it does not allow me to do that.\n\n187\n00:11:45.920 --> 00:11:50.320\nSo I've got length,\nI know how to do what are called slices.\n\n188\n00:11:50.320 --> 00:11:54.200\nBut I'm gonna pop back over\nto this string thing and\n\n189\n00:11:54.200 --> 00:12:00.280\nhighlight a couple of very\nnice functions to have.\n\n190\n00:12:00.280 --> 00:12:02.810\nFor instance, islower.\n\n191\n00:12:02.810 --> 00:12:05.020\nIt'll tell you if it's lowercase.\n\n192\n00:12:05.020 --> 00:12:08.090\nI wonder what capitalize does.\n\n193\n00:12:08.090 --> 00:12:09.350\nSo, I don't know.\n\n194\n00:12:09.350 --> 00:12:14.751\nSo I want my_string.capitalize,\nspelled correctly.\n\n195\n00:12:18.326 --> 00:12:21.840\nHas no attribute capitalized,\ndid I spell it incorrectly?\n\n196\n00:12:23.830 --> 00:12:24.350\nAnd I did.\n\n197\n00:12:24.350 --> 00:12:26.170\n>> Yes, you did.\n>> [LAUGH] I sure did.\n\n198\n00:12:26.170 --> 00:12:32.138\nThere's your problem, capitalize,\nthat will actually, so just to show you.\n\n199\n00:12:32.138 --> 00:12:37.711\nMy string2,\n\n200\n00:12:37.711 --> 00:12:42.505\nhello and then if I say my\n\n201\n00:12:42.505 --> 00:12:47.440\nstring2.capitalize, you got to\nwatch me Daniel, I don't know.\n\n202\n00:12:47.440 --> 00:12:51.910\nIt will actually do normal\ncapitalization schema.\n\n203\n00:12:51.910 --> 00:12:53.350\nFirst letter capitalization.\n\n204\n00:12:53.350 --> 00:12:53.970\n>> That's very cool.\n\n205\n00:12:53.970 --> 00:12:55.240\nThat's a nice little function there.\n\n206\n00:12:55.240 --> 00:12:57.420\nTo throw that in to be able to say,\nyou know what,\n\n207\n00:12:57.420 --> 00:13:00.570\nmaybe I forgot and I need to have\nall of these things capitalized.\n\n208\n00:13:00.570 --> 00:13:04.970\nI can just go through there and add\nthat to it and it will change it for me.\n\n209\n00:13:04.970 --> 00:13:06.676\n>> Right, yeah.\n\n210\n00:13:06.676 --> 00:13:09.060\nWonderful functions,\nI definitely know, I use this stir,\n\n211\n00:13:09.060 --> 00:13:12.110\nI wonder if there is this thing,\nyeah I can do this.\n\n212\n00:13:12.110 --> 00:13:13.385\nYeah, I can do this.\n\n213\n00:13:13.385 --> 00:13:18.096\nThere's some other functions that\nwe'll talk about in just a moment.\n\n214\n00:13:18.096 --> 00:13:19.842\nBut I wanted to illustrate,\n\n215\n00:13:19.842 --> 00:13:24.890\nthis is calling a function a little\ndifferently than we have in the past.\n\n216\n00:13:24.890 --> 00:13:30.210\nI'm using the dot operator because I\nwant to take this string, my string_2,\n\n217\n00:13:30.210 --> 00:13:36.840\nwhatever value is in there and\nthen capitalize that thing right?\n\n218\n00:13:36.840 --> 00:13:40.920\nSo I'm calling this\nfunction on this thing.\n\n219\n00:13:40.920 --> 00:13:43.380\nThey're called objects in programming.\n\n220\n00:13:43.380 --> 00:13:50.640\nBut anything listed by this dir is going\nto be called very much in that way.\n\n221\n00:13:50.640 --> 00:13:54.185\nSo if I wanted to count and\nthis is what it doesn't tell you,\n\n222\n00:13:54.185 --> 00:13:56.830\na count takes a parameter.\n\n223\n00:13:56.830 --> 00:14:03.480\nI would have to go look this up, but\nif I do my_string2.count(l), it counts how\n\n224\n00:14:08.220 --> 00:14:12.940\nmany times that character\noccurs within that string.\n\n225\n00:14:12.940 --> 00:14:19.022\nIf I do my_string without the 2, 0 times.\n\n226\n00:14:19.022 --> 00:14:19.990\n>> Wow.\n>> So.\n\n227\n00:14:19.990 --> 00:14:21.410\n>> Really cool.\n\n228\n00:14:21.410 --> 00:14:24.850\n>> Yeah, it's easy, intuitive,\nbecause I go, okay,\n\n229\n00:14:24.850 --> 00:14:30.220\nI'm counting the number of l's in\nstring and it gives me a number.\n\n230\n00:14:30.220 --> 00:14:35.888\nAnd we've solved a couple of other,\nlike when I say hello * 3.\n\n231\n00:14:35.888 --> 00:14:39.410\nI get that back three times.\n\n232\n00:14:39.410 --> 00:14:42.520\nSo that's repetition, a repeat operator.\n\n233\n00:14:42.520 --> 00:14:49.240\nI can also push through two strings\ntogether, if they are strings.\n\n234\n00:14:49.240 --> 00:14:57.230\nNow we saw,\nIf I do this then I get an error.\n\n235\n00:14:57.230 --> 00:15:01.470\nIt's like hey,\nyou can't put these two things together.\n\n236\n00:15:01.470 --> 00:15:02.676\nBut if I type correctly.\n\n237\n00:15:06.715 --> 00:15:11.200\nIf I actually keep two strings then\nthe + sign takes on a whole new meaning.\n\n238\n00:15:11.200 --> 00:15:14.320\nI can actually take these two strings and\nsquish them together.\n\n239\n00:15:14.320 --> 00:15:16.990\nAnd I can do that for\nas many strings as I want.\n\n240\n00:15:16.990 --> 00:15:20.260\nBut that leads to\nan interesting thought process.\n\n241\n00:15:20.260 --> 00:15:21.749\nI can actually build strings.\n\n242\n00:15:23.290 --> 00:15:25.490\nFrom I need every other\nword in a sentence.\n\n243\n00:15:25.490 --> 00:15:27.480\nAnd then return a new sentence.\n\n244\n00:15:27.480 --> 00:15:29.620\nIt's kind of weird that I would do that.\n\n245\n00:15:29.620 --> 00:15:33.490\nBut maybe that's what I wanted to do.\n\n246\n00:15:33.490 --> 00:15:37.230\nAnd then finally if I\nwant it to really format,\n\n247\n00:15:37.230 --> 00:15:38.800\nif I know what the general pattern.\n\n248\n00:15:38.800 --> 00:15:43.334\nAnd this is where paths come in,\nURL's, file names,\n\n249\n00:15:43.334 --> 00:15:46.093\nif I know these follow a pattern,\n\n250\n00:15:46.093 --> 00:15:51.534\nPython has a lot of ways of creating\na general format for strings.\n\n251\n00:15:51.534 --> 00:15:54.950\nBut personally,\nI like this format operator and\n\n252\n00:15:54.950 --> 00:15:59.546\nit would take as many arguments as\nthere are sets of curly braces.\n\n253\n00:15:59.546 --> 00:16:01.078\nSo this, I told you.\n\n254\n00:16:01.078 --> 00:16:05.081\nPython was not great about curly braces,\nthey got rid of them, but\n\n255\n00:16:05.081 --> 00:16:07.320\nthey are good for formatting.\n\n256\n00:16:07.320 --> 00:16:14.790\nSo, if I know that I want\na space between two words,\n\n257\n00:16:14.790 --> 00:16:20.320\nI can say hello, comma, world, and\n\n258\n00:16:20.320 --> 00:16:25.530\nthen I'll actually build that string using\nthat pattern and the inputs in order.\n\n259\n00:16:25.530 --> 00:16:30.670\nSo, strings are very powerful and\ncome up a great deal whenever\n\n260\n00:16:30.670 --> 00:16:36.040\nwe're doing text-based processing, which I\nactually do, or looking on the internet,\n\n261\n00:16:36.040 --> 00:16:41.430\nor cron job automation, write a script,\nlook through all these.\n\n262\n00:16:41.430 --> 00:16:43.640\nHey, this is a log, send me an email.\n\n263\n00:16:43.640 --> 00:16:46.090\nSo, very very powerful.\n\n264\n00:16:46.090 --> 00:16:48.990\n>> Now Justin obviously you've\ngiven us some good power or\n\n265\n00:16:48.990 --> 00:16:54.530\nat least some expansive capabilities\nto working with these strings.\n\n266\n00:16:54.530 --> 00:16:58.340\nNow that we have these abilities,\nwhat can we do with them?\n\n267\n00:16:58.340 --> 00:17:01.500\nWhat's the practical\nside of working this way?\n\n268\n00:17:02.630 --> 00:17:04.730\n>> So what would we do with them?\n\n269\n00:17:04.730 --> 00:17:06.980\nThat's a great question.\n\n270\n00:17:06.980 --> 00:17:10.860\nI think it's best to maybe\njust make a program.\n\n271\n00:17:10.860 --> 00:17:15.352\nLet's see a couple of things in action\ninstead of hanging out in terminal.\n\n272\n00:17:15.352 --> 00:17:21.340\nI've set up here, and I'm just\ngonna make my_string as a variable.\n\n273\n00:17:23.093 --> 00:17:26.040\nAnd I'm just gonna lean on\nthe keyboard just like that.\n\n274\n00:17:28.652 --> 00:17:29.372\nSee that right there?\n\n275\n00:17:29.372 --> 00:17:30.269\n>> It's lovely.\n\n276\n00:17:30.269 --> 00:17:31.920\n>> Yeah, it's handy.\n\n277\n00:17:31.920 --> 00:17:34.630\n>> So\nyou can imagine this is a giant log file.\n\n278\n00:17:37.080 --> 00:17:40.440\nAre you gonna go through and\ncount every time error occurs in there?\n\n279\n00:17:40.440 --> 00:17:41.020\n>> Negative.\n\n280\n00:17:41.020 --> 00:17:43.060\n>> No, I'm not, right?\n\n281\n00:17:43.060 --> 00:17:45.340\nI could use count, right?\n\n282\n00:17:45.340 --> 00:17:51.307\nSo we could just say hey,\nprint my_string.count,\n\n283\n00:17:51.307 --> 00:17:59.240\nand what is, let's just say how\nmany times does df occur, right?\n\n284\n00:17:59.240 --> 00:18:01.570\nIt has to look just like that.\n\n285\n00:18:01.570 --> 00:18:02.070\nLet's go run it.\n\n286\n00:18:05.062 --> 00:18:07.530\nAnd that only occurs one time in there.\n\n287\n00:18:07.530 --> 00:18:10.390\nSo that's incredibly powerful, right?\n\n288\n00:18:10.390 --> 00:18:13.800\n>> It was much faster then us going,\nokay, let's see here a, s, d,\n\n289\n00:18:13.800 --> 00:18:15.630\nno you went to l there.\n\n290\n00:18:15.630 --> 00:18:16.350\nOkay.\n\n291\n00:18:16.350 --> 00:18:18.500\nAnd working our way,\nthat's a very long string.\n\n292\n00:18:18.500 --> 00:18:22.290\nIt'll take us forever to do that and\nthat's just an example, right?\n\n293\n00:18:22.290 --> 00:18:25.650\nThere's much, much larger strings of text.\n\n294\n00:18:25.650 --> 00:18:28.130\nLog files is a great example\nwhere I'm looking for\n\n295\n00:18:28.130 --> 00:18:31.620\na specific string in general and\nI don't want to parse through that.\n\n296\n00:18:31.620 --> 00:18:34.220\nI want to let the computer do it,\nit's a whole lot faster than I am.\n\n297\n00:18:34.220 --> 00:18:36.570\nAnd obviously, that's the way to go.\n\n298\n00:18:36.570 --> 00:18:40.970\n>> And let's just see to confirm our\nsuspicions that this is looking for\n\n299\n00:18:40.970 --> 00:18:43.390\ndf, as that pattern.\n\n300\n00:18:43.390 --> 00:18:47.000\nI know there's a bunch of ds in there\ncuz I was just on the home row going,\n\n301\n00:18:47.000 --> 00:18:49.670\nI like playing on my keyboard, doodle oop.\n\n302\n00:18:49.670 --> 00:18:52.900\n[LAUGH] And there's 17 ds in there.\n\n303\n00:18:52.900 --> 00:18:54.660\nNow I just leaned on the keyboard but\n\n304\n00:18:54.660 --> 00:18:57.320\nyou can think,\nI've seen logfiles in the gigabytes.\n\n305\n00:18:57.320 --> 00:19:00.892\nAnd gigabytes of text,\nthere's lots of text in there.\n\n306\n00:19:00.892 --> 00:19:05.965\nI can now go how many times did\nerrors occur on these daily files?\n\n307\n00:19:05.965 --> 00:19:07.417\nThat's great.\n\n308\n00:19:07.417 --> 00:19:12.774\nBut now you know,\nI noticed what if I wanted to count\n\n309\n00:19:12.774 --> 00:19:18.820\nhow many times a letter for\neach letter occurred.\n\n310\n00:19:18.820 --> 00:19:21.550\nA, b, c, d, e, f, g.\n\n311\n00:19:22.640 --> 00:19:25.112\n[SOUND] I just got tired.\n\n312\n00:19:25.112 --> 00:19:28.990\nBut now this lends us back,\nthis is iteration.\n\n313\n00:19:30.080 --> 00:19:31.470\n>> Repetitive tasks.\n\n314\n00:19:31.470 --> 00:19:33.190\n>> Yeah, repetitive tasks.\n\n315\n00:19:33.190 --> 00:19:38.630\nSo, I could say this.\n\n316\n00:19:38.630 --> 00:19:45.006\nHow about, lookup_string and I wanna\nlook for each individual character.\n\n317\n00:19:45.006 --> 00:19:47.221\nA, b, c, d, e, right?\n\n318\n00:19:47.221 --> 00:19:51.850\nOkay, and this is where strings\nas a collection are really shy.\n\n319\n00:19:51.850 --> 00:19:57.550\nI can say, okay, I'm gonna look for every,\nin the lookup_string, I'm gonna start\n\n320\n00:19:57.550 --> 00:20:03.160\nat the first one and I'm gonna look for\nhow many times that occurs in my string.\n\n321\n00:20:03.160 --> 00:20:06.120\nJust like maybe this is error, right?\n\n322\n00:20:06.120 --> 00:20:12.050\nOr debug or log or something that\nwould happen in these files.\n\n323\n00:20:12.050 --> 00:20:15.519\nI got to actually say,\n\n324\n00:20:15.519 --> 00:20:20.449\nsince this is a collection, for\n\n325\n00:20:20.449 --> 00:20:27.207\nchar in lookup_string, print(char),\n\n326\n00:20:27.207 --> 00:20:33.802\nprint(my_string.count(char)).\n\n327\n00:20:33.802 --> 00:20:39.250\nSo I have abstracted a way and\nmade this very, very short.\n\n328\n00:20:39.250 --> 00:20:40.450\nOkay, I'm gonna start here.\n\n329\n00:20:40.450 --> 00:20:42.060\nI'm gonna look at a.\n\n330\n00:20:42.060 --> 00:20:44.900\nSo char is going to be a,\nthe first time through.\n\n331\n00:20:44.900 --> 00:20:47.040\nAnd it's gonna count how\nmany times a occurs.\n\n332\n00:20:47.040 --> 00:20:48.850\nAnd it's just gonna print those out.\n\n333\n00:20:48.850 --> 00:20:54.200\nNow I put this char in here so we can see,\na number a number a or you know, a b c d.\n\n334\n00:20:54.200 --> 00:20:56.810\nLet's actually go and\nlook at what that does.\n\n335\n00:20:56.810 --> 00:21:04.190\nSo a occurs 9 times, b occurs 14,\nc is 10, d is 17, e is 1, all right.\n\n336\n00:21:04.190 --> 00:21:04.950\n>> Sweet.\n\n337\n00:21:04.950 --> 00:21:06.620\n>> Yeah, and that's fast.\n\n338\n00:21:06.620 --> 00:21:07.470\nAnd that was easy.\n\n339\n00:21:09.860 --> 00:21:12.840\nAs I said strings offer\nus a great deal of power.\n\n340\n00:21:12.840 --> 00:21:18.247\nBut because they're a collection,\nI can use iteration with them.\n\n341\n00:21:18.247 --> 00:21:23.907\nSo I wonder what would happen if.\n\n342\n00:21:26.729 --> 00:21:28.156\nLet's see.\n\n343\n00:21:28.156 --> 00:21:31.187\nThere's one other thing that\nwe can do with strings.\n\n344\n00:21:31.187 --> 00:21:33.892\nI'm gonna write the exact same for loop.\n\n345\n00:21:36.793 --> 00:21:37.746\nAnd I'm going to.\n\n346\n00:21:40.973 --> 00:21:46.636\nResult =, it is the char + ': ' +,\n\n347\n00:21:46.636 --> 00:21:51.444\nand now I have this new operator,\n\n348\n00:21:51.444 --> 00:21:57.111\nthis new function that I can try to force\n\n349\n00:21:57.111 --> 00:22:02.290\nsomething to behave like a string.\n\n350\n00:22:02.290 --> 00:22:06.400\nSo just like I had end, I'm gonna\nforce its behavior like a string.\n\n351\n00:22:06.400 --> 00:22:16.600\nI can say, my_string.count and\njust count the char.\n\n352\n00:22:16.600 --> 00:22:20.920\nSo I've nested these,\nthis is sometimes hard to read but\n\n353\n00:22:20.920 --> 00:22:25.320\nwhat this does is say, hey figure out this\nnumber and then pass it back to print.\n\n354\n00:22:25.320 --> 00:22:30.290\nHere, figure out this number,\npass it back to string,\n\n355\n00:22:30.290 --> 00:22:32.840\nwhich will then turn it into a string.\n\n356\n00:22:32.840 --> 00:22:33.960\nAnd then, do the plus sign.\n\n357\n00:22:33.960 --> 00:22:36.390\nAnd as we saw the plus sign,\nit just squishes them together.\n\n358\n00:22:36.390 --> 00:22:40.980\nSo now I can properly format my output.\n\n359\n00:22:40.980 --> 00:22:45.220\nAnd let's see what that\nlooks like comparatively.\n\n360\n00:22:45.220 --> 00:22:48.935\nAnd I didn't print anything,\nso that's not gonna work.\n\n361\n00:22:48.935 --> 00:22:52.510\n[LAUGH] So, let's print the result.\n\n362\n00:22:55.680 --> 00:22:59.620\nAnd notice, now this output is nicer.\n\n363\n00:22:59.620 --> 00:23:01.250\n>> Yeah, very nicely formatted actually.\n\n364\n00:23:01.250 --> 00:23:05.340\n>> Yeah, now what's amazing is\nwhen we get to reading files is\n\n365\n00:23:05.340 --> 00:23:08.530\nI can actually make like csvs, tsvs\n>> And\n\n366\n00:23:08.530 --> 00:23:11.370\nthen they'll open directly in\nmy Excel spreadsheet editor.\n\n367\n00:23:13.320 --> 00:23:18.130\nSo amazing, amazing stuff,\nbut I think we saw something\n\n368\n00:23:18.130 --> 00:23:22.560\nthat actually make this easier\nthan we have it right now.\n\n369\n00:23:23.860 --> 00:23:24.920\nAre you ready, Daniel?\n\n370\n00:23:24.920 --> 00:23:26.160\n>> I, blow my mind.\n\n371\n00:23:26.160 --> 00:23:27.470\n>> About to blow your mind.\n\n372\n00:23:27.470 --> 00:23:29.090\n>> I'll put my helmet on.\n\n373\n00:23:29.090 --> 00:23:31.110\n>> Yep, be careful, be careful.\n\n374\n00:23:31.110 --> 00:23:33.330\nSo again,\nnotice that I'm indenting appropriately.\n\n375\n00:23:33.330 --> 00:23:35.750\nI have an indentation here,\nan indentation here.\n\n376\n00:23:35.750 --> 00:23:42.250\nAnd so, let's say, for char one more time.\n\n377\n00:23:42.250 --> 00:23:45.620\nI know it's, you're like, okay,\nyou're doing the same thing.\n\n378\n00:23:45.620 --> 00:23:47.480\n>> Repetition breeds retention.\n\n379\n00:23:47.480 --> 00:23:47.980\n>> Yeah.\n\n380\n00:23:50.790 --> 00:23:53.302\n>> But\nI'm now going to use that formatting.\n\n381\n00:23:53.302 --> 00:23:56.756\nSo I can go okay, I know exactly\nwhat it's going to look like.\n\n382\n00:23:56.756 --> 00:23:58.637\nThis is going to be my character.\n\n383\n00:23:58.637 --> 00:24:00.808\nThis is going to be my count.\n\n384\n00:24:00.808 --> 00:24:05.962\nAnd I'm gonna format it with\n\n385\n00:24:05.962 --> 00:24:12.200\nCharacter there and Count there.\n\n386\n00:24:12.200 --> 00:24:14.260\nNot the greatest format but.\n\n387\n00:24:14.260 --> 00:24:16.030\n>> It gets the point across.\n\n388\n00:24:16.030 --> 00:24:20.320\n>> This is a little more complex than what\nwe have up here and this gets messy fast.\n\n389\n00:24:20.320 --> 00:24:24.770\nSo when, I could just go okay,\nhere's the general pattern that I want.\n\n390\n00:24:24.770 --> 00:24:26.330\nAnd then I can say format.\n\n391\n00:24:26.330 --> 00:24:28.660\nIn the first one, I want the character.\n\n392\n00:24:28.660 --> 00:24:34.823\nAnd in the next one,\nI want my_string.count(char).\n\n393\n00:24:34.823 --> 00:24:39.513\nAnd then print(result).\n\n394\n00:24:42.197 --> 00:24:44.110\nCharacter a has a count of nine.\n\n395\n00:24:44.110 --> 00:24:46.510\nCharacter b has a count of 14.\n\n396\n00:24:46.510 --> 00:24:49.270\nSo, strings are very much iterables.\n\n397\n00:24:49.270 --> 00:24:52.470\nYou can iterate over them and\n\n398\n00:24:54.270 --> 00:24:57.330\nthey make things easy when we\nknow how to manipulate them.\n\n399\n00:24:57.330 --> 00:24:58.100\n>> Yeah, obviously.\n\n400\n00:24:58.100 --> 00:25:02.290\nIt makes it a whole lot easier\nespecially for the end user's experience\n\n401\n00:25:02.290 --> 00:25:05.490\nwhich you've got to remember,\nthat's kind of what we're doing this for.\n\n402\n00:25:05.490 --> 00:25:08.380\nEven if that end user is ourself.\n\n403\n00:25:08.380 --> 00:25:11.630\nYou want to put in the best\ntype of formatting as possible.\n\n404\n00:25:11.630 --> 00:25:16.230\nAnd being able to manipulate\nthe strings as we have using these\n\n405\n00:25:16.230 --> 00:25:20.230\ndifferent manipulators is going to\nbe very, very helpful in that task.\n\n406\n00:25:20.230 --> 00:25:24.040\nWe want to have that output give\nus a little more information and\n\n407\n00:25:24.040 --> 00:25:30.060\nas we saw it was very ugly even though\nfunctional, and our first for loop that we\n\n408\n00:25:30.060 --> 00:25:34.025\ncreated to do the count of the characters,\nand as we moved our way through it and\n\n409\n00:25:34.025 --> 00:25:37.960\ngained a little more power, a little more\nknowledge that Justin gave us there.\n\n410\n00:25:37.960 --> 00:25:39.150\nIt started to get prettier.\n\n411\n00:25:39.150 --> 00:25:43.220\nIt started becoming more readable,\nstarted becoming more useful to us or\n\n412\n00:25:43.220 --> 00:25:45.070\nwhoever as the end user.\n\n413\n00:25:45.070 --> 00:25:47.700\nJustin, is there anything else that we\ncan do with strings that you would like\n\n414\n00:25:47.700 --> 00:25:50.490\nto explain to us for this episode?\n\n415\n00:25:50.490 --> 00:25:53.692\n>> Well, there is a great deal\nthat we can do with strings but\n\n416\n00:25:53.692 --> 00:25:55.910\nwe need a few more tools in our tool bag.\n\n417\n00:25:55.910 --> 00:25:57.470\nWe have a good foundation but\n\n418\n00:25:57.470 --> 00:26:01.940\nwe need a couple of other things before\nwe can really harness their full power.\n\n419\n00:26:01.940 --> 00:26:03.370\n>> That's right.\nNot too much too soon, right?\n\n420\n00:26:03.370 --> 00:26:05.620\nI don't want you guys\ndrinking from a fire hose.\n\n421\n00:26:05.620 --> 00:26:06.840\nWell thank you so much Justin for\n\n422\n00:26:06.840 --> 00:26:10.630\nexplaining strings to us at least\nthe expanded capabilities that are there,\n\n423\n00:26:10.630 --> 00:26:14.360\nlying underneath the hood of Python\nobviously, it's a very powerful tool and\n\n424\n00:26:14.360 --> 00:26:17.950\nto be able to use iteration through them,\nthat is also a very powerful tool.\n\n425\n00:26:17.950 --> 00:26:21.170\nPut those two together,\nyou've got some serious horsepower.\n\n426\n00:26:21.170 --> 00:26:23.080\nThat being said,\nagain thank you for joining us.\n\n427\n00:26:23.080 --> 00:26:24.590\nThank you guys for watching out there.\n\n428\n00:26:24.590 --> 00:26:27.010\nHopefully, you've learned something and\nyou got a lot out of it and\n\n429\n00:26:27.010 --> 00:26:28.400\nyou enjoyed it on top of that.\n\n430\n00:26:28.400 --> 00:26:30.960\nWe're gonna go ahead and\nsign off for ITProTV.\n\n431\n00:26:30.960 --> 00:26:32.360\nI've been your host Daniel Lowery.\n\n432\n00:26:32.360 --> 00:26:33.690\n>> And I'm Justin Dennison.\n\n433\n00:26:33.690 --> 00:26:35.973\n>> And we'll see you next time.\n\n434\n00:26:35.973 --> 00:26:41.503\n[NOISE]\n\n",
          "vimeoId": "158186027"
        },
        {
          "description": "In this episode, Daniel and Justin explain how to use Lists in Python. They start off by defining what lists are and what they can be comprised of. Then they compare the similarities and differences of Lists with Strings. Next, they show you how to access the elements in a list as well as how to use List Operations, Slicing with Lists, and modifying Lists.",
          "length": "1831",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-7-lists-030616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-7-lists-030616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-7-lists-030616-1-sm.jpg",
          "title": "Lists",
          "transcript": "WEBVTT\n\n1\n00:00:00.191 --> 00:00:07.904\n[MUSIC]\n\n2\n00:00:07.904 --> 00:00:09.800\nAll right, greetings everyone.\n\n3\n00:00:09.800 --> 00:00:12.190\nAnd welcome to another\ngreat episode of ITProTV.\n\n4\n00:00:12.190 --> 00:00:14.030\nI'm your host Daniel Lowry.\n\n5\n00:00:14.030 --> 00:00:17.900\nAnd in today's episode, we are continuing\non with our Python Programming series.\n\n6\n00:00:17.900 --> 00:00:21.100\nJoining us back in the studio again\ntoday is our resident Python export,\n\n7\n00:00:21.100 --> 00:00:22.440\nthat is Justin Dennison.\n\n8\n00:00:22.440 --> 00:00:24.946\nJustin welcome back to the show,\nhow's it going today?\n\n9\n00:00:24.946 --> 00:00:25.909\nGoing great today.\n\n10\n00:00:25.909 --> 00:00:30.606\nReally excited to dive a little further\nin the Python to see those new data\n\n11\n00:00:30.606 --> 00:00:36.450\nstructures we need in order to really\nmakes something interesting happen.\n\n12\n00:00:36.450 --> 00:00:41.270\nThat these first little bit is,\nputting tools in our toolbox.\n\n13\n00:00:41.270 --> 00:00:43.350\nBut now we're getting closer to the end.\n\n14\n00:00:43.350 --> 00:00:47.935\nWhere we're gonna have pretty robust\ntool set that allows to do some pretty\n\n15\n00:00:47.935 --> 00:00:49.680\ninteresting things.\n\n16\n00:00:49.680 --> 00:00:53.700\nSo I think today, the best thing to\ndo is to immediately move to lists,\n\n17\n00:00:53.700 --> 00:00:55.630\nbecause we just saw strings.\n\n18\n00:00:55.630 --> 00:00:58.910\nAnd strings are kinda like\na list of characters.\n\n19\n00:00:58.910 --> 00:01:02.660\nI have A, B, C, D, the ABC song.\n\n20\n00:01:02.660 --> 00:01:06.150\nIf I ask you to spell your name,\nyou'll list off a bunch of characters.\n\n21\n00:01:07.360 --> 00:01:10.300\nBut there is a little difference in lists.\n\n22\n00:01:10.300 --> 00:01:14.290\nLists are mutable or mutatable,\nI can't change elements of a list,\n\n23\n00:01:14.290 --> 00:01:19.500\nI can change the size of a list,\nyou know, using direct access.\n\n24\n00:01:19.500 --> 00:01:22.700\nWhereas I can't do that with a string,\nstrings are immutable.\n\n25\n00:01:22.700 --> 00:01:27.290\nI can get a new copy with changes but\nI can't change the original string.\n\n26\n00:01:27.290 --> 00:01:31.450\nAlso, list can be a collection of\nall kinds of different things.\n\n27\n00:01:31.450 --> 00:01:33.580\nI can put string, number and\n\n28\n00:01:33.580 --> 00:01:39.040\nthen like an apple object if I\nwas able to make that in Phyton.\n\n29\n00:01:39.040 --> 00:01:43.090\nAll together in a list, so list can\npresent some interesting problems.\n\n30\n00:01:43.090 --> 00:01:44.902\nBut, we're gonna stay fairly uniform.\n\n31\n00:01:44.902 --> 00:01:48.910\nI wanna emphasize some best practices for\nwhen you start.\n\n32\n00:01:48.910 --> 00:01:52.810\nWhen you're first learning lists that\nwill ease the problems that people\n\n33\n00:01:52.810 --> 00:01:54.010\ntypically run into.\n\n34\n00:01:54.010 --> 00:01:54.730\n>> That's very cool.\n\n35\n00:01:54.730 --> 00:01:56.130\nNow we were talking and\n\n36\n00:01:56.130 --> 00:02:01.020\nyou said that strings are like a list but\nlists are different\n\n37\n00:02:01.020 --> 00:02:04.910\nbecause of their mutability verses\nthe immutability of an actual string.\n\n38\n00:02:04.910 --> 00:02:07.880\nHow can we see that\nimpracticality if we're looking at\n\n39\n00:02:07.880 --> 00:02:11.810\na Python in the interface,\nhow can we start working with lists?\n\n40\n00:02:11.810 --> 00:02:15.114\nSo if we jump inside our Python shell.\n\n41\n00:02:21.173 --> 00:02:22.870\nThere we go.\n\n42\n00:02:22.870 --> 00:02:26.670\nSorry about that and\nwe actually just start up Python.\n\n43\n00:02:26.670 --> 00:02:30.160\nSo let's just have a quick,\nyou know, the quick brown fox\n\n44\n00:02:32.760 --> 00:02:36.072\nso we now have a string that\nhas several words in it.\n\n45\n00:02:36.072 --> 00:02:37.500\nI can't change any of these,\n\n46\n00:02:37.500 --> 00:02:41.830\nI can take slices as we have seen, take\nevery other letter, every third letter.\n\n47\n00:02:41.830 --> 00:02:46.010\nBut actually there is a method on\n\n48\n00:02:47.180 --> 00:02:53.460\nstrings that allows me\nto split these either\n\n49\n00:02:53.460 --> 00:02:58.930\ngive me every character separately or\nI can give it a parameter that says\n\n50\n00:02:58.930 --> 00:03:04.080\nsplit it on spaces or\nnew lines or whatever it may be.\n\n51\n00:03:04.080 --> 00:03:09.090\nSo let's see what that looks like and\nnow I've actually split,\n\n52\n00:03:09.090 --> 00:03:13.310\nthe string into individual words,\nbecause I split its spaces.\n\n53\n00:03:13.310 --> 00:03:16.688\nSo now I have a list that\nrepresents the original string.\n\n54\n00:03:16.688 --> 00:03:23.300\nHowever, unlike strings I can say,\nall right.\n\n55\n00:03:23.300 --> 00:03:25.610\nI want, instead of that lowercase t.\n\n56\n00:03:25.610 --> 00:03:29.355\nThat's, oops,\ntypo I want to make that uppercase.\n\n57\n00:03:31.932 --> 00:03:34.640\nAnd now I can actually\nchange that element.\n\n58\n00:03:34.640 --> 00:03:37.680\nI haven't changed the string\nat that position, but\n\n59\n00:03:37.680 --> 00:03:42.390\nI have assigned a new value to\nthat position within the list.\n\n60\n00:03:43.410 --> 00:03:48.660\nAnd let's say that I don't\nreally like this brown\n\n61\n00:03:48.660 --> 00:03:53.670\nfox isn't really that quick, so, the brown\nfox, I need to remove that element and\n\n62\n00:03:53.670 --> 00:03:58.650\nactually say del for delete, and delete.\n\n63\n00:03:58.650 --> 00:04:02.760\nAnd since we're on a zero based array,\n\n64\n00:04:02.760 --> 00:04:08.250\nit's just like strings, these collections,\nthese sequences are all zero index.\n\n65\n00:04:08.250 --> 00:04:11.060\nI want to delete quick, so\n\n66\n00:04:11.060 --> 00:04:15.930\nI'm gonna say 1 because 1 corresponds\nto the second element and\n\n67\n00:04:15.930 --> 00:04:20.430\nnow, we can see that I'm\nactually removed that element.\n\n68\n00:04:20.430 --> 00:04:23.280\nSo that's really the key difference\n\n69\n00:04:25.180 --> 00:04:29.108\nother than the fact that I can\ndo weird things like this,\n\n70\n00:04:29.108 --> 00:04:34.550\nwhere I can wait for it.\n\n71\n00:04:34.550 --> 00:04:39.680\nI can come here and\njust change this to a number.\n\n72\n00:04:39.680 --> 00:04:44.590\nAnd now I have a string,\na number, and a string.\n\n73\n00:04:44.590 --> 00:04:48.190\nAnd I would recommend\nstrongly against this,\n\n74\n00:04:48.190 --> 00:04:51.710\nmainly because it makes it a little\nmore difficult to reason about.\n\n75\n00:04:51.710 --> 00:04:54.590\nIf I'm running through a list and\ndoing these operations,\n\n76\n00:04:54.590 --> 00:04:59.210\nI may forget there may be numbers in\nthere, especially if I've put them there.\n\n77\n00:04:59.210 --> 00:05:03.610\nI would keep the data within in\na list very uniform to start with.\n\n78\n00:05:03.610 --> 00:05:07.275\n>> Now what's cool about this\nis this does seem a lot like.\n\n79\n00:05:07.275 --> 00:05:09.600\nIn Bash scripting, we have a for\n\n80\n00:05:09.600 --> 00:05:14.720\nloop that is, you have basically an array\nwhich is kind of like this list.\n\n81\n00:05:14.720 --> 00:05:18.310\nIt seems a lot like it where you say, here\nis a list of things that I want you to\n\n82\n00:05:18.310 --> 00:05:21.420\niterate through and it'll go\nthrough that each one at a time and\n\n83\n00:05:21.420 --> 00:05:24.420\nonce it reaches the end of that list,\nit ends, the loop will end.\n\n84\n00:05:24.420 --> 00:05:27.340\nCan we do something similar\nlike that with these lists?\n\n85\n00:05:28.540 --> 00:05:33.740\n>> We sure can, so you know you\ntalked about iterating through,\n\n86\n00:05:33.740 --> 00:05:36.180\ngoing through one at\na time in Bash scripting.\n\n87\n00:05:36.180 --> 00:05:40.750\nI like to think of list as a sequence and\nthat's to reinforce something.\n\n88\n00:05:40.750 --> 00:05:46.130\nThe order is preserved so whatever\nI put first unless I make a change\n\n89\n00:05:46.130 --> 00:05:50.710\nlike I wanna change the first element then\nthat will always be the first element,\n\n90\n00:05:50.710 --> 00:05:55.000\nso I get that predictability, but I think\nwhat you're really talking about is,\n\n91\n00:05:55.000 --> 00:05:59.950\nhey you had that for loop that iterated\nthrough every character of a string, but\n\n92\n00:05:59.950 --> 00:06:01.870\ncan you do that with a list?\n\n93\n00:06:01.870 --> 00:06:05.310\nI don't know, let's take what we\nknow from the previous sessions and\n\n94\n00:06:05.310 --> 00:06:07.430\nsee if that applies with lists.\n\n95\n00:06:07.430 --> 00:06:10.769\nSo if I wanted to iterate, and\nlet's just say I wanted a print out.\n\n96\n00:06:13.400 --> 00:06:14.900\nEach element on a new line.\n\n97\n00:06:14.900 --> 00:06:23.410\nI could say for the element in s_list.\n\n98\n00:06:23.410 --> 00:06:26.930\nI'm gonna print the element.\n\n99\n00:06:28.850 --> 00:06:33.860\nAnd I can in fact apply what I\nalready know about strings to a list.\n\n100\n00:06:33.860 --> 00:06:36.510\nAnd that's what I really like\nabout Python it provides this\n\n101\n00:06:37.960 --> 00:06:41.530\nintuitive feel like okay,\nthese kinda remind me of strings.\n\n102\n00:06:41.530 --> 00:06:46.910\nI wonder if I can do some other things\nthat I have done with strings with list.\n\n103\n00:06:46.910 --> 00:06:50.560\nAnd you know, we're starting to see,\nI think you're starting to pick up\n\n104\n00:06:50.560 --> 00:06:54.390\nthis is pretty intuitive yeah\nthat probably works like that.\n\n105\n00:06:54.390 --> 00:06:57.820\nYou're making guesses\nthat in fact are correct.\n\n106\n00:06:57.820 --> 00:07:00.930\n>> What's cool is that anytime you make\na program that's that intuitive where you\n\n107\n00:07:00.930 --> 00:07:02.560\ncan actually just start to see,\n\n108\n00:07:02.560 --> 00:07:08.120\nwell if I can do this then maybe I can do\nthat as well that it does give Python that\n\n109\n00:07:08.120 --> 00:07:13.540\nlevel of usefulness for the person\nthat's maybe uninitiated, right?\n\n110\n00:07:13.540 --> 00:07:16.760\nThey start to see things in\npatterns that are coming about, and\n\n111\n00:07:16.760 --> 00:07:17.680\nthat's what we like about it.\n\n112\n00:07:17.680 --> 00:07:21.370\nReally we're thrilled actually to\nbe able to work with you on this.\n\n113\n00:07:21.370 --> 00:07:23.690\nSo going back to the list, though,\nwhat else can we do with the list?\n\n114\n00:07:23.690 --> 00:07:26.846\nWhat are some of the other characteristics\nof using this that we need to be aware of?\n\n115\n00:07:28.410 --> 00:07:33.180\n>> So pretty much everything that we have\nseen in the string is applicable to a list\n\n116\n00:07:33.180 --> 00:07:36.610\nwith additions to you know the fact\nthat we can change elements.\n\n117\n00:07:36.610 --> 00:07:41.030\nSo if we look I have this s_list\nI know that has three elements.\n\n118\n00:07:41.030 --> 00:07:44.830\nBut let's say that I have a list\nthat I have read in from a file or\n\n119\n00:07:44.830 --> 00:07:46.970\nI have read in from a user input.\n\n120\n00:07:46.970 --> 00:07:52.728\nI don't really know, my god I don't\nknow how many elements are in there.\n\n121\n00:07:52.728 --> 00:07:58.309\nWell, I can actually use the len\nfunction and find that in fact s_list.\n\n122\n00:07:58.309 --> 00:08:00.188\nHas three elements.\n\n123\n00:08:00.188 --> 00:08:04.857\nSo len works with strings exactly in\nthe same way that it works with list and\n\n124\n00:08:04.857 --> 00:08:09.753\nit almost forces you to see these patterns\nthat are sometimes not as evident in\n\n125\n00:08:09.753 --> 00:08:12.250\nother programming languages.\n\n126\n00:08:12.250 --> 00:08:16.610\nIn addition to what's\nkind of weird is let's,\n\n127\n00:08:16.610 --> 00:08:21.790\nwe know that multiple by a number\nin a string well, that repeats.\n\n128\n00:08:21.790 --> 00:08:24.870\nI wonder if that works with list\n'cuz we've seen up until this point\n\n129\n00:08:24.870 --> 00:08:25.930\nthey're pretty close.\n\n130\n00:08:25.930 --> 00:08:28.978\nSo, maybe I'll just try it.\n\n131\n00:08:28.978 --> 00:08:34.829\nAnd in fact I do, I get a new\nlist that is you know element 1,\n\n132\n00:08:34.829 --> 00:08:40.584\n2, 3 or 0, 1, 2 and\nthen I repeat and I repeat again.\n\n133\n00:08:40.584 --> 00:08:45.275\nSo I've now effectively made a list\nthree times as long with a repetition of\n\n134\n00:08:45.275 --> 00:08:46.260\nthe elements.\n\n135\n00:08:46.260 --> 00:08:51.270\nAnd then, we didn't really see\nthis in strings but there is this\n\n136\n00:08:51.270 --> 00:08:57.260\nnew keyword in Python where I can\njust test, hey, is something in here?\n\n137\n00:08:57.260 --> 00:09:00.180\nAnd it reads very simply.\n\n138\n00:09:00.180 --> 00:09:05.168\nSo I can say okay is the end s_list,\n\n139\n00:09:05.168 --> 00:09:08.860\nand it is in fact s_list.\n\n140\n00:09:08.860 --> 00:09:11.550\nAnd what I like about that is\nthat I don't have to write a loop\n\n141\n00:09:11.550 --> 00:09:12.800\nto go through and test.\n\n142\n00:09:12.800 --> 00:09:14.930\nI don't, in C and Java and\n\n143\n00:09:14.930 --> 00:09:17.845\nsome of the other languages,\nthis is actually kind of laborious.\n\n144\n00:09:17.845 --> 00:09:22.150\nCuz I have to start at the beginning,\ngo until I find it, and\n\n145\n00:09:22.150 --> 00:09:26.820\nthen return true if I do find it,\nor return false if I don't find it.\n\n146\n00:09:26.820 --> 00:09:28.250\nHere I just go, hey, is that in that?\n\n147\n00:09:28.250 --> 00:09:30.010\nAnd I'm like, yep.\n\n148\n00:09:30.010 --> 00:09:31.220\nOr, it'll go no.\n\n149\n00:09:31.220 --> 00:09:36.050\nFor instance,\nif I change this to a lower case letter,\n\n150\n00:09:36.050 --> 00:09:37.940\nit says no, that's not in there.\n\n151\n00:09:37.940 --> 00:09:40.210\nSo it's a very strict comparison.\n\n152\n00:09:40.210 --> 00:09:45.509\nUppercase count's differently,\nnumbers have to be very specific,\n\n153\n00:09:45.509 --> 00:09:51.000\nlike 13 and 13.1 will not necessarily\nevaluate to the same thing.\n\n154\n00:09:51.000 --> 00:09:54.450\nThese are not the same so\nit would return false in that case,\n\n155\n00:09:54.450 --> 00:09:59.370\nso in there is great [COUGH] but\nlet's see.\n\n156\n00:09:59.370 --> 00:10:03.523\nI'm gonna create a new list,\njust so we can look.\n\n157\n00:10:03.523 --> 00:10:08.133\n>> So, really quickly, with the being\nable to look inside of there, and\n\n158\n00:10:08.133 --> 00:10:11.258\nuse that in and\ncreate the true and false value,\n\n159\n00:10:11.258 --> 00:10:14.480\ncan we use that like we\nuse other Boolean values?\n\n160\n00:10:15.510 --> 00:10:16.770\nThat is a great question.\n\n161\n00:10:17.890 --> 00:10:20.500\nYes, that's actually\nthe entire purpose of it.\n\n162\n00:10:20.500 --> 00:10:25.290\nYou can say, if this one thing\nis in this list of other things\n\n163\n00:10:25.290 --> 00:10:28.650\nthen I wanna do something,\notherwise don't do this.\n\n164\n00:10:28.650 --> 00:10:31.820\nSo, let's see you have a series\nof commands or a series of\n\n165\n00:10:31.820 --> 00:10:34.915\nwords you're looking for or series of\nnumbers that you're trying to sit through,\n\n166\n00:10:34.915 --> 00:10:41.550\nyou even say, if I'm running through this\nstream or log files, if this is in this\n\n167\n00:10:41.550 --> 00:10:46.900\nlist that I've predefined, run this code,\notherwise do something else.\n\n168\n00:10:46.900 --> 00:10:53.490\nSo actually makes it very powerful,\neasy to think about, reason about.\n\n169\n00:10:53.490 --> 00:10:55.400\nAnd that's why I really love it.\n\n170\n00:10:55.400 --> 00:10:59.090\n>> Yeah, you're kind of creating your\nown bullions that you can then therefore\n\n171\n00:10:59.090 --> 00:11:02.910\ncreate blocks of code that will\ndo stuff that is specific and\n\n172\n00:11:04.140 --> 00:11:07.670\nunique to your needs, right?\n\n173\n00:11:07.670 --> 00:11:08.260\n>> Exactly.\n\n174\n00:11:08.260 --> 00:11:10.750\nAnd it's very easy to read.\n\n175\n00:11:10.750 --> 00:11:13.439\nWay easier than some of the other\nways that I've seen it implemented.\n\n176\n00:11:14.500 --> 00:11:19.340\nBut if we, there are some other methods\non the list, some of them are related to\n\n177\n00:11:19.340 --> 00:11:24.040\nnumbers, some of them are related\nto anything that is comparable.\n\n178\n00:11:24.040 --> 00:11:28.240\nWe are slowly adding in\nour standard built-ins.\n\n179\n00:11:28.240 --> 00:11:32.700\nIf I say I want the maximum of list two,\nit goes, that's 4.\n\n180\n00:11:32.700 --> 00:11:35.450\nSo I don't, again,\nI don't have to write those loops that\n\n181\n00:11:35.450 --> 00:11:39.990\ntypically come up in other languages\nto go, is this the biggest one, yeah.\n\n182\n00:11:39.990 --> 00:11:42.010\nAnd then spit out the biggest one.\n\n183\n00:11:42.010 --> 00:11:47.890\nI can also look and what is the minimum\nand it will spit those out also.\n\n184\n00:11:47.890 --> 00:11:52.720\nSo that's incredibly handy,\nthere's a multitude of these that work for\n\n185\n00:11:52.720 --> 00:11:57.200\nlist and we'll start to see some more\nof those as we use them a little more.\n\n186\n00:11:57.200 --> 00:12:02.880\nBefore we move on though,\nreally utilize these, there's\n\n187\n00:12:02.880 --> 00:12:08.140\na couple other things we saw in strings\nthat I wonder if they work in lists.\n\n188\n00:12:08.140 --> 00:12:13.896\nSo we saw that we can access elements,\nlist 2.\n\n189\n00:12:13.896 --> 00:12:18.570\nThat gives me the first element back I\ncan do the same thing and change it.\n\n190\n00:12:23.609 --> 00:12:25.610\nSo I've changed that list now.\n\n191\n00:12:25.610 --> 00:12:28.840\nBut there was this other weird syntax and\n\n192\n00:12:28.840 --> 00:12:34.170\nstrings where I could say,\nI want to start at 0, and go up to :2.\n\n193\n00:12:34.170 --> 00:12:38.490\nTwo not included right,\nit'll go from 0, 1 but not 2.\n\n194\n00:12:38.490 --> 00:12:41.180\nSo one beyond where I wanna stop.\n\n195\n00:12:41.180 --> 00:12:44.120\nAnd that will actually give me a list,\na slice.\n\n196\n00:12:44.120 --> 00:12:47.900\nSo this is called a slice\njust like it is in strings.\n\n197\n00:12:47.900 --> 00:12:52.110\nSo I can quickly go I wanna chunk\nthis up and do other stuff with it.\n\n198\n00:12:52.110 --> 00:12:58.330\nBut juts like in strings I can also say,\nI wanna count by 2's,\n\n199\n00:12:58.330 --> 00:13:03.860\ngo from 0 to the end and count by 2's,\n\n200\n00:13:03.860 --> 00:13:08.030\nand I get every other element\nas we've seen in list 2.\n\n201\n00:13:08.030 --> 00:13:14.010\nSo 2, 3, and these are the same so\ndon't let that be confusing It actually\n\n202\n00:13:14.010 --> 00:13:20.000\nstarts at 0, counts over 2, grabs this\none, and then it goes, we're at the end.\n\n203\n00:13:20.000 --> 00:13:24.760\nSo the slicing syntax works just like it\ndoes in strings, so that's really handy.\n\n204\n00:13:24.760 --> 00:13:27.730\nI don't have to remember multiple things.\n\n205\n00:13:27.730 --> 00:13:29.430\nMore or less when I'm starting,\n\n206\n00:13:29.430 --> 00:13:33.890\nI can treat these as the same thing\nwith the idea that strings can't be\n\n207\n00:13:33.890 --> 00:13:38.270\nchanged in place list can't\nbe changed in place, cool.\n\n208\n00:13:38.270 --> 00:13:40.800\n>> Now if I'm recalling correctly,\nwe also use start and\n\n209\n00:13:40.800 --> 00:13:44.410\nstop as well with our strings.\n\n210\n00:13:44.410 --> 00:13:46.990\nMaybe I'm confusing, but\ncan we do that here as well?\n\n211\n00:13:48.070 --> 00:13:51.830\n>> Yeah, so I mean we've indirectly\nseen the start and stop.\n\n212\n00:13:51.830 --> 00:13:55.460\nLet's be a little more specific here.\n\n213\n00:13:55.460 --> 00:13:59.285\nLet's look back at s_list and\n\n214\n00:13:59.285 --> 00:14:04.240\nthen, okay, so I have 0, 1, 2.\n\n215\n00:14:04.240 --> 00:14:09.820\nThe slice is that starting style,\nso I wanna start at 1 and\n\n216\n00:14:09.820 --> 00:14:14.090\ngo to 2, 2 not included,\nso I have a start and\n\n217\n00:14:14.090 --> 00:14:18.760\na stop and\nthat in fact returns that slice.\n\n218\n00:14:18.760 --> 00:14:22.390\nAnd in this case it's\na slice of one thing.\n\n219\n00:14:22.390 --> 00:14:23.180\nSo let's put that.\n\n220\n00:14:24.420 --> 00:14:25.980\nLet's look at s.\n\n221\n00:14:25.980 --> 00:14:27.999\nSo s is the quick brown fox.\n\n222\n00:14:29.671 --> 00:14:31.520\nLet's get something a little\nmore interesting here.\n\n223\n00:14:32.630 --> 00:14:36.840\nI'm gonna redefine s_list, and\nthis is something that I haven't\n\n224\n00:14:36.840 --> 00:14:41.270\ntalked a great deal about in Python,\nI don't have to create new variable names.\n\n225\n00:14:41.270 --> 00:14:44.440\nIf I just wanna repurpose those, I can.\n\n226\n00:14:44.440 --> 00:14:49.330\nBut be warned, sometimes this makes your\nprograms hard to reason about, because\n\n227\n00:14:49.330 --> 00:14:53.580\nyou're like, well, up here it was this\nthing, down here it was this other thing.\n\n228\n00:14:53.580 --> 00:14:55.830\nDown here, it's a number,\nover here, it's a list.\n\n229\n00:14:56.960 --> 00:14:58.530\nThis is something you\ncan do in the terminal.\n\n230\n00:14:58.530 --> 00:15:01.390\nI don't recommend doing\nit actually on a program.\n\n231\n00:15:01.390 --> 00:15:06.100\nSo instead of splitting on a space,\nI'm just gonna split.\n\n232\n00:15:06.100 --> 00:15:11.090\nI'm just going to blow apart and\nnotice it defaults to a space.\n\n233\n00:15:12.090 --> 00:15:15.440\nThere are ways that I can split\nthose along the characters.\n\n234\n00:15:15.440 --> 00:15:18.510\nSo, let's see here.\n\n235\n00:15:18.510 --> 00:15:21.259\nI've got this, my s_list back.\n\n236\n00:15:24.440 --> 00:15:30.000\nSo if I wanted to start at 1 and go to 3,\nnow we can see a little more here.\n\n237\n00:15:30.000 --> 00:15:31.700\nI get just quick and brown.\n\n238\n00:15:31.700 --> 00:15:34.360\nI get that little chunk here.\n\n239\n00:15:34.360 --> 00:15:39.712\nSo, in general, this is the start,\n\n240\n00:15:39.712 --> 00:15:46.458\nthis is the stop and\nthen this is also the step.\n\n241\n00:15:46.458 --> 00:15:50.386\nNow one final thing about accessing lists,\n\n242\n00:15:50.386 --> 00:15:56.018\neither with start, stop, step or\njust individual elements.\n\n243\n00:15:56.018 --> 00:15:59.375\nI'm starting from the beginning and\niterating through,\n\n244\n00:15:59.375 --> 00:16:00.958\nkind of behind the scenes.\n\n245\n00:16:00.958 --> 00:16:01.918\nTo the end.\n\n246\n00:16:01.918 --> 00:16:04.718\nI can start at the end and go backwards.\n\n247\n00:16:04.718 --> 00:16:09.418\nI can say, I want from 0 to the end,\nif I leave this out,\n\n248\n00:16:09.418 --> 00:16:12.990\nit automatically jumps to the end.\n\n249\n00:16:12.990 --> 00:16:14.785\nBut I wanna go backwards.\n\n250\n00:16:14.785 --> 00:16:21.592\nSo now, [COUGH] What happened?\n\n251\n00:16:21.592 --> 00:16:25.039\nThat's interesting, that.\n\n252\n00:16:30.343 --> 00:16:32.155\nHm.\n\n253\n00:16:32.155 --> 00:16:34.117\nDid I type something wrong?\n\n254\n00:16:34.117 --> 00:16:37.298\nNo.\n\n255\n00:16:38.922 --> 00:16:43.880\nI went backwards from, sorry,\nthat was totally my fault.\n\n256\n00:16:43.880 --> 00:16:46.250\nIf you put a zero there,\nit actually starts at the ending,\n\n257\n00:16:46.250 --> 00:16:48.130\ncounts backwards and you get one.\n\n258\n00:16:48.130 --> 00:16:54.570\nSo, you get some unpredictable behaviors\nsometimes when you start going backwards.\n\n259\n00:16:54.570 --> 00:16:59.460\nBut here, if I step backwards by one,\nactually go fox,\n\n260\n00:16:59.460 --> 00:17:04.410\nbrown, quick, the, so that's a way I\ncan reverse the order of the list.\n\n261\n00:17:04.410 --> 00:17:08.570\nSo, very very powerful, but\nwhen would we use these?\n\n262\n00:17:08.570 --> 00:17:12.160\nWell, I think it's kind\nof interesting to see how\n\n263\n00:17:12.160 --> 00:17:13.960\nwould we use these in an actual program.\n\n264\n00:17:15.680 --> 00:17:18.980\nSo, if we hop over to our text editor,\n\n265\n00:17:18.980 --> 00:17:22.390\nnotice I have my shebang already up and\nrunning.\n\n266\n00:17:22.390 --> 00:17:25.830\nI got my main portion defined.\n\n267\n00:17:25.830 --> 00:17:28.440\nAnd, what do we have here?\n\n268\n00:17:28.440 --> 00:17:34.160\nSo, let's just start with fav_foods.\n\n269\n00:17:34.160 --> 00:17:36.850\nAnd Daniel,\nwhat are some of your favorite foods?\n\n270\n00:17:36.850 --> 00:17:39.920\n>> I'm gonna have to go with\nat least pizza and spaghetti.\n\n271\n00:17:39.920 --> 00:17:45.190\n>> Pizza, spaghetti, and\n\n272\n00:17:45.190 --> 00:17:48.459\nlet's add a third one there, mangoes.\n\n273\n00:17:50.290 --> 00:17:53.230\nI'm sure those things go well together.\n\n274\n00:17:53.230 --> 00:17:56.102\n>> I just pour mangoes all over\nthe top of my spaghetti and pizza.\n\n275\n00:17:56.102 --> 00:17:56.667\n>> Yeah, yeah, so.\n\n276\n00:17:56.667 --> 00:17:58.541\n>> [LAUGH]\n>> I think I get pizza,\n\n277\n00:17:58.541 --> 00:18:03.250\nput spaghetti in it, roll it up,\nand then dip it in a mango salsa.\n\n278\n00:18:03.250 --> 00:18:04.212\n[CROSSTALK] It's glorious.\n\n279\n00:18:04.212 --> 00:18:04.744\n>> Beautiful treat.\n\n280\n00:18:04.744 --> 00:18:05.499\n>> Yeah.\n\n281\n00:18:05.499 --> 00:18:07.710\nSo, that's my favorite foods.\n\n282\n00:18:07.710 --> 00:18:09.640\nAnd then, what are some.\n\n283\n00:18:09.640 --> 00:18:12.690\nYou know what,\nlet's just look at some random words here.\n\n284\n00:18:12.690 --> 00:18:16.527\nLet's just make up words.\n\n285\n00:18:16.527 --> 00:18:21.824\nThe, hammer,\n\n286\n00:18:21.824 --> 00:18:27.123\ncar and pizza.\n\n287\n00:18:27.123 --> 00:18:31.250\nAnd you'll notice that I've intentionally,\nwithin this list of words.\n\n288\n00:18:31.250 --> 00:18:37.720\nThis may be a list that I'm reading\nfrom users, something of that nature.\n\n289\n00:18:37.720 --> 00:18:38.800\nOkay.\n\n290\n00:18:38.800 --> 00:18:43.258\nThere's some shared there, but\nnow I can use this to make decisions.\n\n291\n00:18:43.258 --> 00:18:47.638\nSo, [COUGH] I could say for\na word in words, and\n\n292\n00:18:47.638 --> 00:18:53.420\nthis is a common convention\nyou'll see in lists.\n\n293\n00:18:53.420 --> 00:18:58.910\nLists will be plural,\nwhereas a single element would be, well,\n\n294\n00:18:58.910 --> 00:19:00.490\nsingular in nature.\n\n295\n00:19:00.490 --> 00:19:04.129\nSo, for every word in words,\n\n296\n00:19:04.129 --> 00:19:09.667\nI wanna run through, if word in fav_foods.\n\n297\n00:19:09.667 --> 00:19:14.300\nI'm just gonna say hey,\nthat is a favorite of mine also.\n\n298\n00:19:20.012 --> 00:19:21.579\nOtherwise.\n\n299\n00:19:25.920 --> 00:19:27.530\nI do not like that.\n\n300\n00:19:30.290 --> 00:19:34.000\nAll right, so,\nI have a list that I'm referencing.\n\n301\n00:19:34.000 --> 00:19:37.410\nYou asked about that membership,\nthat in keyword.\n\n302\n00:19:37.410 --> 00:19:38.455\nHow would I use that?\n\n303\n00:19:40.500 --> 00:19:45.760\nThis creates a boolean, whereas, this\nactually allows me to iterate through.\n\n304\n00:19:45.760 --> 00:19:48.940\nSo, I have this list that\nI am comparing against and\n\n305\n00:19:48.940 --> 00:19:51.600\nI'm gonna through and\nlook through these set of words.\n\n306\n00:19:51.600 --> 00:19:55.024\nFor every set of word in words,\nif the word is in fav_foods,\n\n307\n00:19:55.024 --> 00:19:59.073\nsay that is also a favorite of mine,\notherwise, say I do not like that.\n\n308\n00:19:59.073 --> 00:20:02.808\n>> So, it's comparing the two lists\ntogether and checking to see, well,\n\n309\n00:20:02.808 --> 00:20:05.809\nI'm looking through this list and\nwhile I'm doing that,\n\n310\n00:20:05.809 --> 00:20:08.213\nI need to look through\nthis other list as well.\n\n311\n00:20:08.213 --> 00:20:12.820\nAnd if I find anything that's common,\nthen I'm gonna print a certain output.\n\n312\n00:20:12.820 --> 00:20:15.260\nIf not,\nI'm just gonna print this other output.\n\n313\n00:20:15.260 --> 00:20:19.540\n>> Exactly, and again, this was kind of\na hokey example so we can reason about it.\n\n314\n00:20:19.540 --> 00:20:23.420\nWe'll actually take some user input and\n\n315\n00:20:23.420 --> 00:20:27.200\nsee how this would work\ninteractively in just a moment.\n\n316\n00:20:27.200 --> 00:20:30.462\nSo, if I run this in my terminal.\n\n317\n00:20:30.462 --> 00:20:32.910\nI do not like that, I do not like that,\nI do not like that,\n\n318\n00:20:32.910 --> 00:20:34.296\nthat is a favorite of mine also.\n\n319\n00:20:34.296 --> 00:20:38.406\nSo, if I hop back over in to my\ntext editor, it starts here.\n\n320\n00:20:38.406 --> 00:20:40.403\nI don't like the to eat.\n\n321\n00:20:40.403 --> 00:20:44.887\nI don't like hammers to eat either,\nand I don't like cars to eat, but\n\n322\n00:20:44.887 --> 00:20:45.961\nI do like pizza.\n\n323\n00:20:45.961 --> 00:20:47.661\n>> Cars are too high in saturated fats.\n\n324\n00:20:47.661 --> 00:20:49.006\n>> They are, they are.\n>> You should stay away from those.\n\n325\n00:20:49.006 --> 00:20:50.280\n>> You gotta be careful.\n\n326\n00:20:50.280 --> 00:20:51.904\nSaturated fats, trans fatty acids.\n\n327\n00:20:51.904 --> 00:20:53.111\n>> Yeah.\n\n328\n00:20:53.111 --> 00:20:55.900\n>> Not to mention,\nthe tires are actually really chewy.\n\n329\n00:20:55.900 --> 00:20:57.320\nI don't know.\n\n330\n00:20:57.320 --> 00:21:02.663\nSo this is pretty interesting, but how do\nwe use this to interact with our users?\n\n331\n00:21:02.663 --> 00:21:06.282\nLet's say I want to make\na program that takes input and\n\n332\n00:21:06.282 --> 00:21:10.708\nprovide some kind of statistics\nto my users, or actually goes and\n\n333\n00:21:10.708 --> 00:21:17.020\nsearches their favorite foods or something\nyou're looking through for a log file.\n\n334\n00:21:17.020 --> 00:21:20.600\nOr searching your computer for,\nor maybe even the internet.\n\n335\n00:21:20.600 --> 00:21:23.541\nNow, to keep down on the amount of input,\n\n336\n00:21:23.541 --> 00:21:28.584\nI'm actually gonna just highlight\nall of this, and in my text editor,\n\n337\n00:21:28.584 --> 00:21:33.290\nI can hold command, and slash,\ngoing next to the question mark and\n\n338\n00:21:33.290 --> 00:21:37.492\nit will actually comment all of\nthe lines out for me at once,\n\n339\n00:21:37.492 --> 00:21:42.955\nwhich is good if I want to reference this\nlater to see how things are working but\n\n340\n00:21:42.955 --> 00:21:45.346\nI don't actually want it to run.\n\n341\n00:21:45.346 --> 00:21:46.712\n[COUGH] So, within a list,\n\n342\n00:21:46.712 --> 00:21:50.199\nwe have a couple other methods\nthat we're gonna make this useful.\n\n343\n00:21:50.199 --> 00:21:54.812\nI'm gonna say this is\nmy user_input_list and\n\n344\n00:21:54.812 --> 00:21:58.278\nI'm just gonna make an empty list.\n\n345\n00:21:58.278 --> 00:22:03.988\nAnd I'm gonna say while True, then\n\n346\n00:22:07.087 --> 00:22:14.727\nUser_input = raw_input.\n\n347\n00:22:14.727 --> 00:22:21.670\nWhat are some numbers to sum up?\n\n348\n00:22:21.670 --> 00:22:23.034\nRight?\nAgain, kinda pokey, but\n\n349\n00:22:23.034 --> 00:22:24.400\nhow do we interact to these users.\n\n350\n00:22:26.940 --> 00:22:32.610\nPress q to quit, okay?\n\n351\n00:22:32.610 --> 00:22:35.750\nSo I'm gonna address this,\nthere's a couple of things.\n\n352\n00:22:35.750 --> 00:22:39.636\nThe only time that I need to treat\nit as a letter is when I type q.\n\n353\n00:22:39.636 --> 00:22:42.363\nOtherwise, I assuming\nthey're typing numbers.\n\n354\n00:22:42.363 --> 00:22:48.102\nSo, if user_input\n\n355\n00:22:48.102 --> 00:22:52.826\n== 'q' then I\n\n356\n00:22:52.826 --> 00:22:57.222\nwant to break.\n\n357\n00:22:57.222 --> 00:23:02.457\nOtherwise, I just wanna\ngrab all these numbers,\n\n358\n00:23:02.457 --> 00:23:06.579\nI am writing a calculator for someone.\n\n359\n00:23:06.579 --> 00:23:08.015\nVery simple calculator or\n\n360\n00:23:08.015 --> 00:23:12.380\nmaybe a teacher needs to quickly sum\nup all of their students' grades.\n\n361\n00:23:12.380 --> 00:23:13.710\nThey can just type these in.\n\n362\n00:23:13.710 --> 00:23:15.633\nI want to put those in the list but\n\n363\n00:23:15.633 --> 00:23:20.230\nI've also have made the assumption\nthat these are going to be numbers.\n\n364\n00:23:20.230 --> 00:23:23.080\nAnd, in particular, integers.\n\n365\n00:23:23.080 --> 00:23:27.979\nLet's say this teacher always gives whole\nnumber grades, which is not unreasonable.\n\n366\n00:23:27.979 --> 00:23:33.719\nSo I can say, user_input and\nI wanna make sure,\n\n367\n00:23:33.719 --> 00:23:38.339\nif it’s not a q, then I wanna say okay,\n\n368\n00:23:38.339 --> 00:23:44.639\nchange that to an integer,\njust like we have before,\n\n369\n00:23:44.639 --> 00:23:48.280\nand then user_input_list.\n\n370\n00:23:49.300 --> 00:23:51.598\nAnd then there's another one\nthat we can use called append.\n\n371\n00:23:51.598 --> 00:23:56.238\nAnd what that'll do is actually push\nthose onto the end of that list.\n\n372\n00:23:56.238 --> 00:23:59.858\nSo append user_input.\n\n373\n00:23:59.858 --> 00:24:03.996\n>> So since we have an empty list,\nthere's no data in it whatsoever.\n\n374\n00:24:03.996 --> 00:24:06.678\nAs the user inputs data it\nstarts adding it to our list and\n\n375\n00:24:06.678 --> 00:24:09.316\ntherefore giving us something\nto actually work with.\n\n376\n00:24:09.316 --> 00:24:11.470\n>> Exactly, exactly.\n\n377\n00:24:11.470 --> 00:24:16.255\nSo now this is happening as long\nas my user's typing numbers and\n\n378\n00:24:16.255 --> 00:24:20.370\nhasn't typed the number, or\nexcuse me, the letter Q.\n\n379\n00:24:20.370 --> 00:24:22.860\nAnd I've made some\npretty naive assertions.\n\n380\n00:24:22.860 --> 00:24:26.460\nRight, that they're not gonna type\nthings they're not allowed to.\n\n381\n00:24:26.460 --> 00:24:30.280\nBut if you're the one using this program,\nyou know the parameters.\n\n382\n00:24:30.280 --> 00:24:35.826\nAnd there's kind of an unspoken contract\nbetween users and how these programs work.\n\n383\n00:24:35.826 --> 00:24:39.060\nLike, hey, I'll hold up my end of the deal\nif you hold up your end of the deal.\n\n384\n00:24:39.060 --> 00:24:41.917\nSo, we've all had that\nblue screen of death or\n\n385\n00:24:41.917 --> 00:24:45.818\nyou're like, that's interesting,\nthat broke hard.\n\n386\n00:24:45.818 --> 00:24:48.418\n>> [LAUGH]\n>> [LAUGH] Yeah, so\n\n387\n00:24:48.418 --> 00:24:50.840\nonce this loop, the user quits.\n\n388\n00:24:50.840 --> 00:24:54.860\nThey've added all of these numbers,\nI just wanna tell them what the sum is.\n\n389\n00:24:54.860 --> 00:25:03.120\nSo I'm gonna say output\nis a string that says,\n\n390\n00:25:03.120 --> 00:25:09.360\nYour sum is, I'm gonna use that\nformatted string and just say format.\n\n391\n00:25:09.360 --> 00:25:12.860\nAnd when I had a list of numbers,\nwe saw min and\n\n392\n00:25:12.860 --> 00:25:17.110\nmax, I could make another for\nloop that adds up all of things.\n\n393\n00:25:18.460 --> 00:25:24.240\nBut I can also just say, find\n\n394\n00:25:24.240 --> 00:25:28.110\nthe sum of the user_input_list.\n\n395\n00:25:28.110 --> 00:25:31.954\nSo, some, min, max we have some,\nagain I don't even have, I'm like,\n\n396\n00:25:31.954 --> 00:25:34.080\nI'm wondering what that's doing.\n\n397\n00:25:34.080 --> 00:25:37.360\nIt's probably finding the sum\nof all the things on that list.\n\n398\n00:25:37.360 --> 00:25:43.900\nAnd then I'm just going to print\nthe output, so again, kind of pokey.\n\n399\n00:25:43.900 --> 00:25:46.560\nBut we'll notice this has\nincreased in complexity.\n\n400\n00:25:46.560 --> 00:25:50.510\nThis is the main portion of our script,\nor our program here.\n\n401\n00:25:51.790 --> 00:25:53.150\nI've started with an empty list.\n\n402\n00:25:53.150 --> 00:25:58.340\nI have populated that list through\nuser interactions and only done so\n\n403\n00:25:58.340 --> 00:26:01.550\nwhen the interaction has not been a q.\n\n404\n00:26:01.550 --> 00:26:05.001\nAnd then when I finally say, hey I'm done,\n\n405\n00:26:05.001 --> 00:26:08.746\nthen I'm going to output\nthe sum to the screen.\n\n406\n00:26:08.746 --> 00:26:12.848\nSo what are some numbers?\n\n407\n00:26:12.848 --> 00:26:17.786\n1,3 and I got some weird output here\nthis is an example of run time error.\n\n408\n00:26:17.786 --> 00:26:21.766\nI forgot to put a space at the end,\neasy fix.\n\n409\n00:26:21.766 --> 00:26:25.526\nIt's not really gonna affect\nhow my program works, but\n\n410\n00:26:25.526 --> 00:26:27.206\nit is a little annoying.\n\n411\n00:26:27.206 --> 00:26:28.720\nWhat's you're favorite number, Daniel?\n\n412\n00:26:28.720 --> 00:26:30.748\n>> My favorite number is a googolplex.\n\n413\n00:26:30.748 --> 00:26:32.213\nNo [LAUGH].\n\n414\n00:26:32.213 --> 00:26:35.293\n>> All right, Daniel, let's-\n>> Let's keep it realistic?\n\n415\n00:26:35.293 --> 00:26:36.313\n>> Yeah, let's keep it realistic.\n\n416\n00:26:36.313 --> 00:26:39.393\n>> Let's go with, 9 is a good number.\n\n417\n00:26:39.393 --> 00:26:42.973\n>> 9, and then let's go ahead and quit.\n\n418\n00:26:42.973 --> 00:26:49.913\nYour sum is 23, and\n1 plus 3 plus 7 plus 3 plus 9 is 23.\n\n419\n00:26:49.913 --> 00:26:52.373\n>> [LAUGH] Good job with\nthe adding in the head there.\n\n420\n00:26:52.373 --> 00:26:57.106\n>> Yeah, so that's one way that\nwe can interact with users,\n\n421\n00:26:57.106 --> 00:27:01.273\npopulate a list and\nthen make a bunch of decisions.\n\n422\n00:27:01.273 --> 00:27:03.293\nNow how would I actually use this?\n\n423\n00:27:03.293 --> 00:27:05.333\nAnd we'll see this shortly.\n\n424\n00:27:05.333 --> 00:27:10.733\nI may take a lot of commands from users,\nor just tasks that I need to do.\n\n425\n00:27:10.733 --> 00:27:15.445\nAnd then when I've populated that\nlist of tasks, I just run through.\n\n426\n00:27:15.445 --> 00:27:21.693\nLike, go search out all of your trash\ndirectories, go clean them, and then quit.\n\n427\n00:27:21.693 --> 00:27:25.580\nSo trash, clean, quit, and\nthat would be a list of tasks.\n\n428\n00:27:25.580 --> 00:27:29.480\nAnd I would have a bunch of if\nstatements that did something,\n\n429\n00:27:29.480 --> 00:27:31.510\nbased on those input parameters.\n\n430\n00:27:31.510 --> 00:27:33.185\n>> Yeah,\nI could see how that could simply be done.\n\n431\n00:27:33.185 --> 00:27:35.853\nYou're just basically\nbuilding a list of maybe\n\n432\n00:27:35.853 --> 00:27:40.132\nsome directories that you have common\nareas in which you throw things away.\n\n433\n00:27:40.132 --> 00:27:44.130\nAnd you want the to be cleaned on a daily\nbasis or something of that nature.\n\n434\n00:27:44.130 --> 00:27:46.700\nCreate that list through user interaction,\nand\n\n435\n00:27:46.700 --> 00:27:49.480\nit asks you what directories\ndo you want me to clean out.\n\n436\n00:27:49.480 --> 00:27:51.670\nGive it that information,\nand it creates the list.\n\n437\n00:27:51.670 --> 00:27:53.370\nAnd from that list,\nyou start running your loops,\n\n438\n00:27:53.370 --> 00:27:56.530\nstart running your decisional\nstatements to go into them.\n\n439\n00:27:56.530 --> 00:27:59.850\nFind out if there's anything inside\nof them, if there is, delete it and\n\n440\n00:27:59.850 --> 00:28:01.200\nthen get out and break the system.\n\n441\n00:28:01.200 --> 00:28:04.690\nIt's a very, very helpful little handy\nitem that we got there on Python.\n\n442\n00:28:04.690 --> 00:28:06.990\n>> Yeah, yeah, and I don't,\npersonally, I don't know.\n\n443\n00:28:06.990 --> 00:28:07.796\nYou're the Bash expert.\n\n444\n00:28:07.796 --> 00:28:10.530\nIs that hard to do in Bash?\n\n445\n00:28:10.530 --> 00:28:12.610\n>> Is that hard to do in Bash?\n\n446\n00:28:12.610 --> 00:28:17.780\nIt might be around equivalence\njust because Bash works so\n\n447\n00:28:17.780 --> 00:28:21.420\nintegrally with\nthe operating system itself.\n\n448\n00:28:21.420 --> 00:28:28.040\nSo you can take advantage of any of the\ncommands that are built into the system.\n\n449\n00:28:28.040 --> 00:28:32.510\nI might be able to just write a really,\na delete script that does that.\n\n450\n00:28:32.510 --> 00:28:37.430\nBut, if I want to get that user\ninteraction, I want the user to tell me,\n\n451\n00:28:37.430 --> 00:28:43.580\nokay, I don't know what directories you\nwant me to delete any information out of.\n\n452\n00:28:43.580 --> 00:28:45.400\nI need you to tell me what they are.\n\n453\n00:28:45.400 --> 00:28:49.660\nIt probably would be a little\nmore difficult to work that out.\n\n454\n00:28:49.660 --> 00:28:51.735\nJust because I couldn't create\na list like what you have.\n\n455\n00:28:51.735 --> 00:28:54.490\n>> Mm-hm.\n>> It would be more difficult to do that.\n\n456\n00:28:54.490 --> 00:28:57.960\n>> So that is the power, so\nthere is some trade offs, right.\n\n457\n00:28:57.960 --> 00:29:02.830\nAnd I ask you about Bash because you know\nI look at this as a possible replacement\n\n458\n00:29:02.830 --> 00:29:06.900\nfor Bash as we've seen Python\nis pretty much everywhere.\n\n459\n00:29:06.900 --> 00:29:09.580\nSo there are trade offs either place, but\n\n460\n00:29:09.580 --> 00:29:13.020\nyou said something that was interesting\nthat's almost like foreshadowing.\n\n461\n00:29:13.020 --> 00:29:18.866\nI have access to all these system\ncommands that are so integrated.\n\n462\n00:29:18.866 --> 00:29:21.510\nI do have a surprise for\nyou in the future Daniel.\n\n463\n00:29:21.510 --> 00:29:24.990\nBut I think that's a good start on this,\nthough.\n\n464\n00:29:24.990 --> 00:29:25.690\n>> Well excellent.\n\n465\n00:29:25.690 --> 00:29:29.750\nIt's definitely is a, like you said,\na great start on this actually.\n\n466\n00:29:29.750 --> 00:29:32.950\nBecause we have the foundation,\nwe see what we can do with it.\n\n467\n00:29:32.950 --> 00:29:35.066\nAnd we've barely even scratched\nthe surface on it to be honest with you.\n\n468\n00:29:35.066 --> 00:29:37.310\nI'm sure it has a lot more.\n\n469\n00:29:37.310 --> 00:29:40.380\nWe've seen all those modules and\nthings that you have available to them.\n\n470\n00:29:40.380 --> 00:29:44.210\nSo, as you start playing with it\ndon't be afraid to jump in there and\n\n471\n00:29:44.210 --> 00:29:45.580\nsee what else you can do with it.\n\n472\n00:29:45.580 --> 00:29:50.190\nBut for right now,\nyou should have a great, like I said,\n\n473\n00:29:50.190 --> 00:29:53.760\nit's foundation to build upon,\nas we continue on with our series.\n\n474\n00:29:53.760 --> 00:29:57.320\nJustin, is there anything else about lists\nthat we need to cover for this episode?\n\n475\n00:29:57.320 --> 00:29:59.060\n>> Not at this moment,\nthey'll keep cropping up.\n\n476\n00:29:59.060 --> 00:30:02.550\nThey're, kind of,\nlike the core data structure that\n\n477\n00:30:02.550 --> 00:30:07.500\neverything else behaves like, or\nhas some way to interact with in Python.\n\n478\n00:30:07.500 --> 00:30:10.680\nSo, I think we're good for now.\n\n479\n00:30:10.680 --> 00:30:13.140\n>> All right, well thank you so\nmuch for explaining lists to us.\n\n480\n00:30:13.140 --> 00:30:15.040\nYou did a great job demonstrating that.\n\n481\n00:30:15.040 --> 00:30:16.180\nThank you guys for watching.\n\n482\n00:30:16.180 --> 00:30:18.326\nWe're gonna go ahead and\nsign off for ITProTV.\n\n483\n00:30:18.326 --> 00:30:19.766\nI've been your host Daniel Lowrie.\n\n484\n00:30:19.766 --> 00:30:21.026\n>> And I'm Justin Dennison.\n\n485\n00:30:21.026 --> 00:30:23.266\n>> We'll see you next time.\n\n486\n00:30:23.266 --> 00:30:31.260\n[SOUND]\n\n",
          "vimeoId": "158189658"
        },
        {
          "description": "In this episode, Daniel and Justin acquaint you with yet another invaluable Python container, that container being Dictionaries. They explain exactly what a Dictionary is; contrasting it against Lists. They show you how to use all the standard operations that we've learned, as well as how to iterate through elements in the Dictionary.",
          "length": "1749",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-8-dictionaries-030616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-8-dictionaries-030616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-8-dictionaries-030616-1-sm.jpg",
          "title": "Dictionaries",
          "transcript": "WEBVTT\n\n1\n00:00:00.029 --> 00:00:07.712\n[MUSIC]\n\n2\n00:00:07.712 --> 00:00:12.170\nAll right greetings everyone and welcome\nto another exciting episode of IT Pro TV.\n\n3\n00:00:12.170 --> 00:00:16.340\nI'm your host Daniel Lowrie and in today's\nepisode that's right we are continuing on\n\n4\n00:00:16.340 --> 00:00:18.300\nwith our Python programming series.\n\n5\n00:00:18.300 --> 00:00:21.290\nJoining us back in the studio\nagain today to lend his enormous\n\n6\n00:00:21.290 --> 00:00:26.120\nexpertise on that very topic is our good\nfriend and mentor, Mr. Justin Dennison.\n\n7\n00:00:26.120 --> 00:00:27.830\nJustin welcome back to the show sir.\n\n8\n00:00:27.830 --> 00:00:29.990\n>> Thanks, I'm glad to be back.\n\n9\n00:00:29.990 --> 00:00:31.580\n>> You seem excited.\n\n10\n00:00:31.580 --> 00:00:32.680\n>> So excited.\n\n11\n00:00:32.680 --> 00:00:37.940\nI also, we keep perpetuating this\nmythos and I'm just gonna go with it.\n\n12\n00:00:37.940 --> 00:00:38.500\n>> Yep you should.\n\n13\n00:00:38.500 --> 00:00:41.490\n>> I'm just gonna go with it,\nI'm just gonna go with it.\n\n14\n00:00:41.490 --> 00:00:45.690\nSo today we've got these final few data\nstructures that are the core part of\n\n15\n00:00:45.690 --> 00:00:46.920\nPython.\n\n16\n00:00:46.920 --> 00:00:49.200\nSo, we're gonna talk about dictionaries.\n\n17\n00:00:49.200 --> 00:00:51.050\nBut before we talk about programming,\n\n18\n00:00:51.050 --> 00:00:53.930\nbecause dictionaries can\nkinda be a weird feel.\n\n19\n00:00:53.930 --> 00:00:57.660\nIf you come from a JavaScript background,\nyou'd be like,\n\n20\n00:00:57.660 --> 00:01:00.879\nthat kinda looks like JavaScript,\nbut not quite.\n\n21\n00:01:02.728 --> 00:01:07.674\nWhen I go to look up a dictionary,\nright, I open a dictionary and I go and\n\n22\n00:01:07.674 --> 00:01:11.310\nI do a look up, I'm like okay,\nhere the word apple.\n\n23\n00:01:11.310 --> 00:01:13.920\nAnd I can find the definition of an apple.\n\n24\n00:01:13.920 --> 00:01:18.090\nSo a dictionary is very much like\na look up like that, it is mapping.\n\n25\n00:01:18.090 --> 00:01:22.200\nAlmost like an association that\nI can artificially impose.\n\n26\n00:01:22.200 --> 00:01:27.450\nSo this kinda happens with strings and\nlist already behind the scenes.\n\n27\n00:01:27.450 --> 00:01:31.080\nSo when I do,\nif we hope over to the terminal just so\n\n28\n00:01:31.080 --> 00:01:33.020\nwe have some frame of reference here.\n\n29\n00:01:34.300 --> 00:01:40.710\nIf I do, the string abcde right, there is\n\n30\n00:01:40.710 --> 00:01:45.940\nactually an association made for me by\nthe string that a is the 0th element.\n\n31\n00:01:47.870 --> 00:01:52.890\nBut sometimes indexing by numbers are not\nthe most intuitive or the best way.\n\n32\n00:01:52.890 --> 00:01:56.880\nAnd Daniel, if you'll allow me to,\nI figure the best way to talk about these\n\n33\n00:01:56.880 --> 00:01:59.980\nassociations is maybe a little\nword association game.\n\n34\n00:01:59.980 --> 00:02:00.500\n>> All right.\n\n35\n00:02:00.500 --> 00:02:03.700\n>> So when I say a word\n>> You say the first thing that\n\n36\n00:02:03.700 --> 00:02:04.570\ncomes to your mind.\n\n37\n00:02:04.570 --> 00:02:05.114\n>> Well this ought to be fun.\n\n38\n00:02:05.114 --> 00:02:07.390\n[LAUGH]\n>> This ought to be fun.\n\n39\n00:02:07.390 --> 00:02:08.567\nSo cracker.\n\n40\n00:02:08.567 --> 00:02:09.888\n>> Hamstring.\n\n41\n00:02:09.888 --> 00:02:14.000\n>> [LAUGH] So that's the first\nthing that comes to your mind.\n\n42\n00:02:14.000 --> 00:02:15.917\n>> Car.\n>> Wheel.\n\n43\n00:02:15.917 --> 00:02:16.772\n>> Bus.\n\n44\n00:02:16.772 --> 00:02:18.477\n>> Driver.\n\n45\n00:02:18.477 --> 00:02:19.615\n>> Taco.\n\n46\n00:02:19.615 --> 00:02:22.030\n>> Stand.\n\n47\n00:02:22.030 --> 00:02:26.280\n>> So these are effectively what\nwe're doing programmatically\n\n48\n00:02:26.280 --> 00:02:28.070\nin a Python dictionary.\n\n49\n00:02:28.070 --> 00:02:32.160\nWe're creating these\nassociations that when I say hey\n\n50\n00:02:32.160 --> 00:02:35.590\ngive me this it'll spit\nout a plethora of things.\n\n51\n00:02:35.590 --> 00:02:37.220\nI can get a number back.\n\n52\n00:02:37.220 --> 00:02:38.210\nI can get a string back.\n\n53\n00:02:38.210 --> 00:02:39.210\nI can get a list back.\n\n54\n00:02:39.210 --> 00:02:41.320\nI can even get another dictionary back.\n\n55\n00:02:41.320 --> 00:02:44.440\nBut I think that's a little\nbeyond the scope of right now.\n\n56\n00:02:44.440 --> 00:02:45.630\nThe introduction but\n\n57\n00:02:45.630 --> 00:02:49.570\nit's effectively a way to instead\nof having zero based indexing.\n\n58\n00:02:49.570 --> 00:02:53.790\nI can use other means of indexing or\nlooking up these values.\n\n59\n00:02:53.790 --> 00:02:58.540\nThe first thing we need to realize though,\norder is not preserved.\n\n60\n00:02:58.540 --> 00:03:04.780\nSo because there's this association\nthat isn't created with numbers, Python,\n\n61\n00:03:04.780 --> 00:03:08.640\nbehind the scenes, will find the most\nefficient way to store these in memory.\n\n62\n00:03:08.640 --> 00:03:11.880\nSo they don't always come in\nthe order that you think they would.\n\n63\n00:03:11.880 --> 00:03:14.290\nSo we have to be very careful about that.\n\n64\n00:03:14.290 --> 00:03:16.540\nBut let's go ahead and\nlook at a simple dictionary.\n\n65\n00:03:17.720 --> 00:03:23.790\nSo this would be our first_dictionary and\n\n66\n00:03:25.470 --> 00:03:29.790\nlet's say for one, right.\n\n67\n00:03:31.090 --> 00:03:33.970\nSo we have a number but\nit's actually a string.\n\n68\n00:03:33.970 --> 00:03:38.730\nWe have the number 1 and for two,\n\n69\n00:03:38.730 --> 00:03:42.530\nwe have the number 2.\n\n70\n00:03:42.530 --> 00:03:46.024\nSo if I do this and\nI'm just gonna print this backup.\n\n71\n00:03:48.620 --> 00:03:51.220\nYou'll notice the order\nhas already changed.\n\n72\n00:03:51.220 --> 00:03:56.090\nSo behind the scenes I'm not guarantee\nthis order like one is always gonna be\n\n73\n00:03:56.090 --> 00:04:00.460\nthe first one, two is gonna be\nthe second one or however I define them.\n\n74\n00:04:00.460 --> 00:04:05.430\nAlso, I said that we were gonna get\nrid of some of those curly braces,\n\n75\n00:04:05.430 --> 00:04:07.150\nwell, they do crop back up.\n\n76\n00:04:07.150 --> 00:04:11.510\nThis is a way of defining\na dictionary in a literal sense.\n\n77\n00:04:11.510 --> 00:04:18.270\nLike I want to make this where one\nis associated with the number 1.\n\n78\n00:04:18.270 --> 00:04:22.622\nBut now, I effectively have a collection\nwhere instead of going I want\n\n79\n00:04:22.622 --> 00:04:26.031\nthe zeroth element like in\nthe string up here, right.\n\n80\n00:04:26.031 --> 00:04:31.500\nSo if I look back at the string,\nif I want the zeroth element,\n\n81\n00:04:31.500 --> 00:04:36.560\nthen I get a, but\nin this dictionary, I can't do that.\n\n82\n00:04:36.560 --> 00:04:38.650\nIf I actually try to use a look up,\n\n83\n00:04:40.070 --> 00:04:42.910\nthis a common error we'll\nrun into with dictionaries.\n\n84\n00:04:43.980 --> 00:04:48.930\nI have the string one and\nthe string two I don't actually\n\n85\n00:04:48.930 --> 00:04:52.728\nhave anything that associated with zero.\n\n86\n00:04:52.728 --> 00:04:56.137\nSo I get a key error and it will\nactually tell me what key it is and\n\n87\n00:04:56.137 --> 00:04:59.888\nthis is important if we're trying\nto iterate through somethings.\n\n88\n00:04:59.888 --> 00:05:05.780\nAnd hey you're trying to ask me to look up\nsomething and I don't know what this is.\n\n89\n00:05:05.780 --> 00:05:08.990\n>> So you're just basically trying to\nput chocolate with peanut butter here.\n\n90\n00:05:08.990 --> 00:05:10.600\nEven though that's a tasty treat.\n\n91\n00:05:10.600 --> 00:05:11.410\n>> That is tasty.\n\n92\n00:05:11.410 --> 00:05:15.360\n>> But in programming it's the I guess\nI should say more like oil and water.\n\n93\n00:05:15.360 --> 00:05:17.270\nThey're not mixing because\nthey don't go together.\n\n94\n00:05:17.270 --> 00:05:20.080\n>> Right.\nRight, it's kinda like if you\n\n95\n00:05:20.080 --> 00:05:23.400\ngo to a normal dictionary that\nyou would look up words in, and\n\n96\n00:05:23.400 --> 00:05:26.220\nyou try to look up a word\nthat's in a different language.\n\n97\n00:05:26.220 --> 00:05:27.730\nYou're like, it's not there.\n\n98\n00:05:27.730 --> 00:05:29.290\nBueno, it's not there.\n\n99\n00:05:29.290 --> 00:05:31.180\n>> So that makes sense.\n\n100\n00:05:31.180 --> 00:05:32.240\n>> Right.\n>> Yeah.\n\n101\n00:05:32.240 --> 00:05:36.980\n>> So how do we actually access these\nproperties within dictionaries?\n\n102\n00:05:36.980 --> 00:05:39.860\nWell I can say, first_dict.\n\n103\n00:05:39.860 --> 00:05:44.460\nAnd if I say find the element\nassociated with the string one.\n\n104\n00:05:46.500 --> 00:05:48.460\nIt goes well, it is the number 1.\n\n105\n00:05:48.460 --> 00:05:54.080\nSo, I can create this more\nintuitive relationships\n\n106\n00:05:54.080 --> 00:05:59.290\nthat actually come in handy and\nwe'll see how this work shortly.\n\n107\n00:05:59.290 --> 00:06:03.635\nBut, a dictionary,\nDaniel if you had to take a guess,\n\n108\n00:06:03.635 --> 00:06:07.820\ndo you think dictionaries are mutable or\nimmutable?\n\n109\n00:06:07.820 --> 00:06:11.260\n>> I'm gonna say mutable because\nit just seems to me that\n\n110\n00:06:11.260 --> 00:06:14.700\nif I can change things in a dictionary,\nI can make them do whatever I want.\n\n111\n00:06:16.060 --> 00:06:19.120\n>> As I said always,\nPython is very intuitive and Daniel,\n\n112\n00:06:19.120 --> 00:06:21.020\nI have to applaud you.\n\n113\n00:06:21.020 --> 00:06:22.200\nGreat, great work.\n\n114\n00:06:22.200 --> 00:06:23.890\nYou're taking this all in,\nyou're doing great.\n\n115\n00:06:23.890 --> 00:06:27.390\nI hope everybody else is taking\nthis all in like you are.\n\n116\n00:06:27.390 --> 00:06:31.860\nSo if I actually want to change\nthe association between the word one and\n\n117\n00:06:31.860 --> 00:06:33.070\nsomething else, right?\n\n118\n00:06:33.070 --> 00:06:36.860\nMaybe I want to change, instead of it\nbeing associated with the number one,\n\n119\n00:06:36.860 --> 00:06:43.650\nI want to change it to,\nlet's say my number one favorite food,\n\n120\n00:06:43.650 --> 00:06:49.661\nright, I can say one equals carrot.\n\n121\n00:06:49.661 --> 00:06:54.180\nI don't get an error,\nlet's see what the dictionary looks like.\n\n122\n00:06:54.180 --> 00:06:59.260\nAnd I now have two is associated with the\nnumber 2, one is associated with carrot.\n\n123\n00:07:00.540 --> 00:07:02.760\nSo this is incredibly powerful.\n\n124\n00:07:02.760 --> 00:07:07.630\nSo we've just seen that\ndictionaries are in fact mutable.\n\n125\n00:07:07.630 --> 00:07:11.610\nWhich as you said Daniel,\nmakes them incredibly powerful.\n\n126\n00:07:11.610 --> 00:07:15.530\n>> Yeah, and instead of having to go in\nand redefine the entire dictionary, so\n\n127\n00:07:15.530 --> 00:07:16.970\nthat I can make that one change,\n\n128\n00:07:16.970 --> 00:07:21.020\nI have the ability to just select\nwhere I want to make the change.\n\n129\n00:07:21.020 --> 00:07:24.010\nDo that and say here's what I wanna do,\nbefore I had one\n\n130\n00:07:24.010 --> 00:07:27.990\nequals 1 the actual number 1, or\nthe number 1 equals the word one.\n\n131\n00:07:27.990 --> 00:07:30.950\nNow I want it to equal carrot\nbecause my definition of what\n\n132\n00:07:30.950 --> 00:07:34.470\nI want 1 to be has changed,\ntherefor I can make that change easily.\n\n133\n00:07:34.470 --> 00:07:39.764\n>> Exactly, exactly, now there's some\nother things, and just right off hand\n\n134\n00:07:39.764 --> 00:07:45.467\nI wonder if some of the things we've used\nfor list are applicable to dictionaries or\n\n135\n00:07:45.467 --> 00:07:49.958\nwhat we've applied to strings\nare applicable to dictionaries.\n\n136\n00:07:49.958 --> 00:07:54.911\nSo, when I start getting this intuitive\nfeel about a language I'm more\n\n137\n00:07:54.911 --> 00:08:00.032\nprone to trying things out like I noticed\nin the list we can delete things,\n\n138\n00:08:00.032 --> 00:08:04.014\nlet's see if we can delete\nSomething from a dictionary.\n\n139\n00:08:04.014 --> 00:08:10.223\nSo del And\n\n140\n00:08:10.223 --> 00:08:13.680\ndelete the element, right?\n\n141\n00:08:13.680 --> 00:08:17.430\nThe pairing,\nthe relationship with two and whatever.\n\n142\n00:08:17.430 --> 00:08:23.820\nAnd, I can in fact remove\nthose definitions.\n\n143\n00:08:23.820 --> 00:08:25.090\nSo it's like you went in the library,\n\n144\n00:08:25.090 --> 00:08:28.570\nyou went, I don't like this page of\nqueues, just gonna rip that out.\n\n145\n00:08:28.570 --> 00:08:32.060\nI don't recommend doing that but\nit's very much like that.\n\n146\n00:08:32.060 --> 00:08:34.900\nSo I can delete these associations but\n\n147\n00:08:34.900 --> 00:08:37.950\nit's just as easy to\ncreate new associations.\n\n148\n00:08:37.950 --> 00:08:41.000\nI'm like you know what,\nI actually don't wanna get rid of two.\n\n149\n00:08:41.000 --> 00:08:43.310\nI wanna keep that association in there.\n\n150\n00:08:43.310 --> 00:08:44.150\nYou know my fault.\n\n151\n00:08:44.150 --> 00:08:47.630\nI'm gonna actually say first dictionary,\nand\n\n152\n00:08:47.630 --> 00:08:50.530\nyou can see the only thing I have\nhere is one is related to carrot.\n\n153\n00:08:51.642 --> 00:08:55.719\nI wanna say well two, I want to put\nthat back in and make it equal to 2.\n\n154\n00:08:58.690 --> 00:08:59.900\nAnd it's back already.\n\n155\n00:08:59.900 --> 00:09:03.510\nSo I can add and remove very easily,\nvery intuitively,\n\n156\n00:09:03.510 --> 00:09:05.710\nwithout knowing a lot of things.\n\n157\n00:09:05.710 --> 00:09:09.280\n>> Now, Justin,\nwhen you do the either delete, or\n\n158\n00:09:09.280 --> 00:09:13.060\nyou're doing the re-edition of\nthe addendum two the dictionary.\n\n159\n00:09:13.060 --> 00:09:14.850\nI noticed you only used the number 2.\n\n160\n00:09:14.850 --> 00:09:17.940\nYou didn't do two colon two or\nthe other way around.\n\n161\n00:09:17.940 --> 00:09:18.700\nYou didn't do any of that.\n\n162\n00:09:18.700 --> 00:09:22.680\nYou just said this is the entry that I\nwanna delete and deleted the entirety.\n\n163\n00:09:22.680 --> 00:09:26.600\nThis is the portion I wanna add and\nit added the entirety of it.\n\n164\n00:09:26.600 --> 00:09:28.910\nIs that because of the association?\n\n165\n00:09:28.910 --> 00:09:32.520\n>> Exactly so these come in what\nare called key valued pairs.\n\n166\n00:09:32.520 --> 00:09:37.740\nSo in this case,\nin this dictionary I have two keys.\n\n167\n00:09:37.740 --> 00:09:42.000\nThe words two and then word one and\n\n168\n00:09:42.000 --> 00:09:47.570\nthen I have two values,\nthe number 2 and the word carrot.\n\n169\n00:09:47.570 --> 00:09:51.690\nSo these key value pairs come together.\n\n170\n00:09:51.690 --> 00:09:53.220\nIt's all or nothing, right?\n\n171\n00:09:53.220 --> 00:09:56.760\nSo I have a key that is\nassociated with a value and\n\n172\n00:09:56.760 --> 00:09:58.860\nthen I have another key\nassociated with the values.\n\n173\n00:09:58.860 --> 00:10:03.480\nSo when I delete the key entry the value\nhas to disappear because that relationship\n\n174\n00:10:03.480 --> 00:10:04.220\nis now broken.\n\n175\n00:10:05.640 --> 00:10:10.640\nSo it's a very good,\nokay why would that work?\n\n176\n00:10:10.640 --> 00:10:12.950\nBut it becomes very powerful, right?\n\n177\n00:10:12.950 --> 00:10:16.490\nNow that doesn't mean that I\ncan't do something like this.\n\n178\n00:10:16.490 --> 00:10:26.180\nfirst_dict two plus equals 3 or\nexcuse me 2.\n\n179\n00:10:26.180 --> 00:10:29.770\nLet's just make it 3, so\nit's not weird bunch of 2s.\n\n180\n00:10:29.770 --> 00:10:35.650\nSo this is saying sit this,\ngrab this, and increase that by 3.\n\n181\n00:10:35.650 --> 00:10:37.039\nLet's see if it works.\n\n182\n00:10:40.571 --> 00:10:42.160\nAnd it does in fact work.\n\n183\n00:10:42.160 --> 00:10:47.100\nSo I can now use this kind of like\nas a counter, like a way to go,\n\n184\n00:10:47.100 --> 00:10:51.700\nwell, two is related to\nthese 5 instances of two.\n\n185\n00:10:51.700 --> 00:10:53.710\nOr one is related to carrot.\n\n186\n00:10:53.710 --> 00:10:58.980\nI can use these as a collection of\nwhere I can create associations.\n\n187\n00:10:58.980 --> 00:11:02.210\nAnd this will come in handy as\nwe'll see in just a moment.\n\n188\n00:11:02.210 --> 00:11:06.520\nSo I think it's best to actually go look\nat a program about how this would work.\n\n189\n00:11:06.520 --> 00:11:10.560\nAnd I defined a dictionary like this.\n\n190\n00:11:10.560 --> 00:11:13.080\nAnd I wanna talk about how to\niterate through those first.\n\n191\n00:11:14.390 --> 00:11:16.660\nJust to see how those work.\n\n192\n00:11:16.660 --> 00:11:19.420\nAnd then let's do something\na little more interesting.\n\n193\n00:11:19.420 --> 00:11:23.290\nSo when I iterate through a dictionary,\nthere's a few different ways.\n\n194\n00:11:23.290 --> 00:11:25.530\nI have a key value pair as I said.\n\n195\n00:11:26.830 --> 00:11:31.570\nSo if I say for,\nI'm gonna use what I know about lists.\n\n196\n00:11:31.570 --> 00:11:40.110\nfor, element in my_dictionary I'm\njust gonna print the element.\n\n197\n00:11:42.310 --> 00:11:49.610\nAnd let's get out of the shell and\nfav_sport, fav_food, fav_day.\n\n198\n00:11:49.610 --> 00:11:51.940\nIf I go back and try to reason about this,\n\n199\n00:11:51.940 --> 00:11:57.090\nif I use this like a standard for\nloop, what am I getting Daniel?\n\n200\n00:11:57.090 --> 00:11:59.000\nWhat do you see that I'm getting?\n\n201\n00:11:59.000 --> 00:12:04.480\n>> It looks like you're getting just the,\nalmost the subject of it.\n\n202\n00:12:04.480 --> 00:12:06.558\nYou're getting favorite food,\nyou're getting favorite sport,\n\n203\n00:12:06.558 --> 00:12:07.550\nyou're getting favorite day.\n\n204\n00:12:07.550 --> 00:12:10.610\nBut you're not getting what\nthose values actually are.\n\n205\n00:12:10.610 --> 00:12:13.840\n>> Exactly, you made a key point,\nI'm not getting the value but\n\n206\n00:12:13.840 --> 00:12:16.790\ninstead I'm getting the key,\nthe look up value, so\n\n207\n00:12:16.790 --> 00:12:21.240\nover here on the left are the keys and\ntheir associated values are on the right,\n\n208\n00:12:21.240 --> 00:12:23.810\nso that's that mapping\nthat I'm talking about.\n\n209\n00:12:23.810 --> 00:12:26.290\nThis was what you would look\nup in a standard dictionary,\n\n210\n00:12:26.290 --> 00:12:29.190\nlike if I'm, carrot, okay,\n\n211\n00:12:29.190 --> 00:12:34.710\nit is a small tuberous ground vegetable\nthat is high in beta keratin, you know?\n\n212\n00:12:34.710 --> 00:12:39.200\nBut that's okay because if\nI can grab all of those and\n\n213\n00:12:39.200 --> 00:12:42.320\niterate through those then I can, in fact,\n\n214\n00:12:42.320 --> 00:12:47.790\niterate through the values also,\n\n215\n00:12:47.790 --> 00:12:52.670\nbecause now I have a variable that allows\nme to access the corresponding values.\n\n216\n00:12:52.670 --> 00:12:55.250\nAnd just to show you\nthat I'm not being crazy.\n\n217\n00:12:55.250 --> 00:12:59.460\nYou can see it prints the element,\nthen the associated value.\n\n218\n00:12:59.460 --> 00:13:01.860\nThe element, the associated value.\n\n219\n00:13:01.860 --> 00:13:04.160\nThe element, the associated value.\n\n220\n00:13:04.160 --> 00:13:07.710\nSo I can create these structures\nthat create relationships.\n\n221\n00:13:09.220 --> 00:13:13.460\nIncredibly powerful, but are you ready to\ndo something that maybe you can see if you\n\n222\n00:13:13.460 --> 00:13:16.195\nsquint your eyes a little bit and\nmaybe a little applicable?\n\n223\n00:13:16.195 --> 00:13:16.895\n>> Let's do it.\n\n224\n00:13:16.895 --> 00:13:17.725\n>> You ready?\n\n225\n00:13:17.725 --> 00:13:18.255\n>> I'm ready.\n\n226\n00:13:18.255 --> 00:13:22.305\n>> Okay so here's what I'm gonna do.\n\n227\n00:13:22.305 --> 00:13:25.155\nI'm going to comment this out.\n\n228\n00:13:25.155 --> 00:13:27.215\nWe don't want all that print out.\n\n229\n00:13:27.215 --> 00:13:32.615\nAnd I'm just gonna create\na variable called logs.\n\n230\n00:13:32.615 --> 00:13:34.675\nAnd I'm just gonna lean\non the keyboard like so.\n\n231\n00:13:37.279 --> 00:13:39.309\nReal scientific process here.\n\n232\n00:13:41.549 --> 00:13:46.530\nSo here, right, I now want to count.\n\n233\n00:13:46.530 --> 00:13:51.770\nI wanna count how many\ntimes does a j appear or\n\n234\n00:13:51.770 --> 00:13:56.902\na k appear, which could be associated\nwith an error or a log or a debug info.\n\n235\n00:13:56.902 --> 00:14:00.715\nSo I'm gonna say, okay,\n\n236\n00:14:00.715 --> 00:14:08.650\nmy logs_count is equal to and\nI'm gonna create an empty dictionary.\n\n237\n00:14:08.650 --> 00:14:11.720\nSo I have a dictionary now,\nI can add and delete from it.\n\n238\n00:14:11.720 --> 00:14:13.520\nThere's nothing there so\nI have nothing to delete.\n\n239\n00:14:13.520 --> 00:14:16.800\nIf I try to do that well I\nguess we can try that and\n\n240\n00:14:16.800 --> 00:14:20.090\nsee what happens I think it's important\nto see the errors that we make come up so\n\n241\n00:14:20.090 --> 00:14:24.798\nI'm gonna say del logs\n\n242\n00:14:24.798 --> 00:14:29.960\ncount and\nlet's just give it some key seven.\n\n243\n00:14:29.960 --> 00:14:34.420\nIf I try to run that it\nagain gives me a KeyError.\n\n244\n00:14:34.420 --> 00:14:36.980\nIt says, hey, you can't delete\nsomething that's not there.\n\n245\n00:14:36.980 --> 00:14:38.645\nSo that's important to know.\n\n246\n00:14:38.645 --> 00:14:42.230\nThat KeyError's come up a couple of times.\n\n247\n00:14:42.230 --> 00:14:43.930\nBut what can we do here?\n\n248\n00:14:45.430 --> 00:14:50.246\nI'm gonna say for every char in logs,\n\n249\n00:14:50.246 --> 00:14:54.761\nand I know I'm going by character,\n\n250\n00:14:54.761 --> 00:14:59.743\nthen I'm gonna say if char == 'j',\n\n251\n00:15:00.985 --> 00:15:03.706\nAnd here's where it gets,\nwe start nesting these things.\n\n252\n00:15:03.706 --> 00:15:08.953\nIf char is in the logs_count and\nthis in from dictionaries\n\n253\n00:15:08.953 --> 00:15:13.140\nmeans is there a key\nthat corresponds to this?\n\n254\n00:15:13.140 --> 00:15:18.530\nSo is there a key j, or\nbetter off if I come out here and\n\n255\n00:15:18.530 --> 00:15:23.480\njust say logs_count of j.\n\n256\n00:15:23.480 --> 00:15:26.735\nCould I do that without\ngetting a KeyError?\n\n257\n00:15:27.970 --> 00:15:33.029\nSo if that character's there then I wanna\n\n258\n00:15:33.029 --> 00:15:37.378\nsay logs_count(char) += 1.\n\n259\n00:15:37.378 --> 00:15:40.860\nSo I'm gonna increase that by 1.\n\n260\n00:15:40.860 --> 00:15:45.830\nSo every time I come to a j,\nif j is already in the logs_count,\n\n261\n00:15:45.830 --> 00:15:48.640\nthen I'm gonna increase it by 1.\n\n262\n00:15:49.794 --> 00:15:50.902\nElse,\n\n263\n00:15:59.992 --> 00:16:05.346\nlogs_count Gotta be careful there, Daniel.\n\n264\n00:16:05.346 --> 00:16:05.904\n>> It gets you every time.\n\n265\n00:16:05.904 --> 00:16:07.071\n>> It gets you every time.\n\n266\n00:16:07.071 --> 00:16:10.634\nI'm just gonna say, otherwise, when you've\ncome to it, if it's not already there,\n\n267\n00:16:10.634 --> 00:16:12.150\nput it in there.\n\n268\n00:16:12.150 --> 00:16:15.950\nSo this,\nwe've added significant complexity.\n\n269\n00:16:15.950 --> 00:16:20.470\nI've added a 4, a condition, and notice\nI have a condition within a condition.\n\n270\n00:16:20.470 --> 00:16:24.990\nAnd now I'm starting to see, okay,\nthese can be a little tricky.\n\n271\n00:16:24.990 --> 00:16:30.720\nGotta be careful with our indentation,\ngotta be careful with our reasoning.\n\n272\n00:16:30.720 --> 00:16:33.710\nBut even then, it's still fairly readable,\nwould you agree Dan?\n\n273\n00:16:33.710 --> 00:16:35.660\n>> Yeah, it's definitely not too bad, and\n\n274\n00:16:35.660 --> 00:16:37.200\nwe start seeing\nthe conditional statements.\n\n275\n00:16:37.200 --> 00:16:42.812\nThose are relatively simple, if this, then\ndo this, if not, then do something else.\n\n276\n00:16:42.812 --> 00:16:43.880\nAnd that is why we have the else there.\n\n277\n00:16:43.880 --> 00:16:44.750\nIt's very cool.\n\n278\n00:16:44.750 --> 00:16:49.450\nAnd then we have the forward loop which\nis iterating through a certain condition.\n\n279\n00:16:49.450 --> 00:16:53.140\n>> Exactly and then at the end lets just\n\n280\n00:16:54.350 --> 00:16:59.800\nprint logs_count.\n\n281\n00:16:59.800 --> 00:17:05.290\nAnd clear and up and\nthere are 33 j's in there.\n\n282\n00:17:05.290 --> 00:17:13.180\nAnd if I imagine this to be,\nokay, this is a variable.\n\n283\n00:17:13.180 --> 00:17:16.350\nMaybe it means error,\nmaybe it means there's a log.\n\n284\n00:17:16.350 --> 00:17:18.360\nOr maybe these are the things\nI need to delete.\n\n285\n00:17:18.360 --> 00:17:20.307\nHow many things do I need to delete?\n\n286\n00:17:20.307 --> 00:17:24.032\nAnd should we turn it up a little bit?\n\n287\n00:17:24.032 --> 00:17:25.646\n>> Should we put a little more fire on it?\n\n288\n00:17:25.646 --> 00:17:26.946\n>> Just put a little more fire on it?\n\n289\n00:17:26.946 --> 00:17:27.945\nAre you ready?\n\n290\n00:17:27.945 --> 00:17:33.250\nYeah, I'm ready, so\nlet's just say I have the alphabet.\n\n291\n00:17:33.250 --> 00:17:38.051\nAnd this could be representative\nof all the things\n\n292\n00:17:38.051 --> 00:17:42.860\nthat I wanna do,\nabcdefghijklmnopqrstuvwxyz.\n\n293\n00:17:42.860 --> 00:17:44.113\nDid I get all of them?\n\n294\n00:17:44.113 --> 00:17:46.760\n>> I think you hit every 26 of them.\n\n295\n00:17:46.760 --> 00:17:48.610\n>> I got tired there for a second.\n\n296\n00:17:48.610 --> 00:17:55.727\nSo for every letter, In the alphabet,\n\n297\n00:18:00.973 --> 00:18:03.010\nLet's just tab that over one.\n\n298\n00:18:03.010 --> 00:18:07.250\nSo for every letter in alphabet,\nfor every char in logs.\n\n299\n00:18:07.250 --> 00:18:10.229\nIf char is equal to, and instead of j\n\n300\n00:18:13.562 --> 00:18:17.847\nI wanna say letter.\n\n301\n00:18:17.847 --> 00:18:19.541\nLet's see how that changes our output.\n\n302\n00:18:19.541 --> 00:18:20.506\n>> This ought to be interesting.\n\n303\n00:18:20.506 --> 00:18:24.831\n>> Hey it may break, but\nI'm not prone to errors, but-\n\n304\n00:18:24.831 --> 00:18:25.655\n>> [LAUGH]\n\n305\n00:18:25.655 --> 00:18:26.711\n>> But I hear they exist.\n\n306\n00:18:26.711 --> 00:18:28.894\n>> Yeah.\n\n307\n00:18:28.894 --> 00:18:32.752\n>> And there we go,\nthere are 7 a's, 14 c's, 11 b's and\n\n308\n00:18:32.752 --> 00:18:37.960\nnow I have quickly counted through that\ngiant string that was hard to figure out.\n\n309\n00:18:37.960 --> 00:18:43.680\nI've teased that apart, and\nnow with a little more I can just boom,\n\n310\n00:18:43.680 --> 00:18:45.790\nput this into a file,\nsomething of that nature.\n\n311\n00:18:45.790 --> 00:18:49.679\n>> Yeah, this is definitely really cool,\nas you can see we start using\n\n312\n00:18:49.679 --> 00:18:53.856\nthe basics of what Justin is showing\nus to start flushing out [INAUDIBLE].\n\n313\n00:18:53.856 --> 00:18:58.502\nAnd he's right, this is really interesting\nfor things of like log nature where I\n\n314\n00:18:58.502 --> 00:19:02.188\ncan say, if I know that every error\nis going to start with a star or\n\n315\n00:19:02.188 --> 00:19:04.810\na capital e because it's\ngoing to say error.\n\n316\n00:19:04.810 --> 00:19:08.377\nAnd that's a unique condition,\nI can just go through and look for that,\n\n317\n00:19:08.377 --> 00:19:11.270\ncount them up, or\nmaybe deliver those lines back.\n\n318\n00:19:11.270 --> 00:19:13.940\nOutput that to a file or\njust output it to the screen.\n\n319\n00:19:13.940 --> 00:19:17.290\nA lot of ways in which we can\nuse this to parse through.\n\n320\n00:19:17.290 --> 00:19:21.540\nLog parsing is one of the most\nnon-fun jobs that we have\n\n321\n00:19:21.540 --> 00:19:24.940\nas system administrators, network\nadministrators, any kind of administrator.\n\n322\n00:19:24.940 --> 00:19:28.180\nYou're gonna be looking at logs, and\ngoing through them can be a pain.\n\n323\n00:19:28.180 --> 00:19:30.863\nThere are third party tools out there, but\n\n324\n00:19:30.863 --> 00:19:34.746\nyou have to work within the confines\nof that third party tool.\n\n325\n00:19:34.746 --> 00:19:37.565\nIf you get a little Python\nunderneath your belt,\n\n326\n00:19:37.565 --> 00:19:40.570\nyou can make it customized\nto your experience.\n\n327\n00:19:40.570 --> 00:19:43.367\nMaking it much more efficient, and\nthat is why we're showing you this stuff.\n\n328\n00:19:43.367 --> 00:19:44.829\nVery, very cool Justin.\n\n329\n00:19:44.829 --> 00:19:47.168\n>> Yeah and, you know,\nI look at this output and\n\n330\n00:19:47.168 --> 00:19:51.170\nyou said parsing through log files,\nparsing through any files.\n\n331\n00:19:51.170 --> 00:19:54.740\nAnd what I mean by parse,\nI'm not saying I have, but\n\n332\n00:19:54.740 --> 00:19:59.290\nI have heard of people who have opened\nthose up, and went, well there's one,\n\n333\n00:19:59.290 --> 00:20:02.630\nwrite that down, there's another one,\nwrite that down.\n\n334\n00:20:02.630 --> 00:20:03.578\n>> They call that the hard way?\n\n335\n00:20:03.578 --> 00:20:04.132\n[LAUGH].\n>> Yeah,\n\n336\n00:20:04.132 --> 00:20:06.770\n[LAUGH] that is definitely the hard way.\n\n337\n00:20:06.770 --> 00:20:10.130\nI don't recommend it,\nI weep a little bit when it happens.\n\n338\n00:20:11.790 --> 00:20:14.700\nNot saying I've done it,\nbut I hear that it happens.\n\n339\n00:20:14.700 --> 00:20:20.620\nThis is not a great, you know, this is\na better output than we had before,\n\n340\n00:20:20.620 --> 00:20:23.500\nbut what if we make this a little better.\n\n341\n00:20:24.530 --> 00:20:31.220\nSo I want to print out these\nin comma separated value form.\n\n342\n00:20:31.220 --> 00:20:32.292\n>> So\nyou're gonna put a little makeup on this.\n\n343\n00:20:32.292 --> 00:20:35.229\n>> Yeah, and this, woo, okay so I-\n>> Pretty it up.\n\n344\n00:20:35.229 --> 00:20:39.156\n>> I know at the very end, my logs count\nhas all the information that it contains,\n\n345\n00:20:39.156 --> 00:20:44.300\nbut I want to make this to where it prints\nout in a, okay, this is delimited, cool.\n\n346\n00:20:44.300 --> 00:20:48.829\nWe saw that we can use a for\nloop to print through the keys and\n\n347\n00:20:48.829 --> 00:20:50.780\nthen access the values.\n\n348\n00:20:50.780 --> 00:20:54.604\nSometimes we want to be able\nto access those easier.\n\n349\n00:20:54.604 --> 00:20:59.845\nAnd see how those relationships,\nwithout using this syntax right here\n\n350\n00:20:59.845 --> 00:21:05.700\nmy_dictionary element, or bracket element,\nor how the lookup would work.\n\n351\n00:21:05.700 --> 00:21:14.867\nSo I can, there's actually a method\non dictionaries Called items.\n\n352\n00:21:14.867 --> 00:21:20.411\nSo, if I say for key,\nvalue in items, right,\n\n353\n00:21:20.411 --> 00:21:26.390\nso I add that little bit\nof extra stuff there.\n\n354\n00:21:26.390 --> 00:21:28.800\nThen that one method call\nin the dictionary, and\n\n355\n00:21:28.800 --> 00:21:31.030\nthen I add this, hey this value.\n\n356\n00:21:31.030 --> 00:21:35.896\nLet's just see what this prints out, so\nI'm gonna print(key) I'm gonna print\n\n357\n00:21:35.896 --> 00:21:42.870\nthe value, And boom,\nokay that's a little better,\n\n358\n00:21:42.870 --> 00:21:48.440\na is corresponding to 7,\nbut that's still not great.\n\n359\n00:21:48.440 --> 00:21:54.580\nIt would almost be better if I had\nthese in comma separated form.\n\n360\n00:21:54.580 --> 00:21:57.910\nI have to bend down here because\nmy highlighting is a little weird.\n\n361\n00:21:57.910 --> 00:22:03.234\nSo what if I say the output string for\neach iteration is going to look\n\n362\n00:22:05.345 --> 00:22:09.319\nSome key, some value and\n\n363\n00:22:09.319 --> 00:22:18.032\nthen I'm gonna add this \\n.format and\nkey, value.\n\n364\n00:22:18.032 --> 00:22:20.765\nSo, do you have a guess of\nwhat that slash n is, Dan?\n\n365\n00:22:20.765 --> 00:22:24.310\n>> Yeah, because I have a little\nbit of programming experience.\n\n366\n00:22:24.310 --> 00:22:26.802\nI'm guessing that stands for\nthe new line character,\n\n367\n00:22:26.802 --> 00:22:28.922\nwhich is going to basically\ngive you a return.\n\n368\n00:22:28.922 --> 00:22:33.400\nIt comes to the end of something, and\nthen drops it down to the next line.\n\n369\n00:22:33.400 --> 00:22:38.130\n>> Exactly, now since we're using print\nstatements in an iterative structure,\n\n370\n00:22:38.130 --> 00:22:40.680\nwe don't actually have to put this here.\n\n371\n00:22:40.680 --> 00:22:44.800\nBut this is in preparation of, what if I\nwanted to output this to an actual file\n\n372\n00:22:44.800 --> 00:22:49.960\nthat I could open in Excel or LibreOffice\nCalc or something of that nature.\n\n373\n00:22:51.080 --> 00:22:52.605\nThen this is necessary,\n\n374\n00:22:52.605 --> 00:22:55.720\ncuz otherwise they'll just run\ntogether along in the same line.\n\n375\n00:22:55.720 --> 00:23:01.289\nSo I'm going to print the output,\nand we'll see how that works.\n\n376\n00:23:03.370 --> 00:23:09.077\nSo now I get a,7, c,14, b,11.\n\n377\n00:23:09.077 --> 00:23:12.160\nAnd if I pull this into\na spreadsheet utility,\n\n378\n00:23:12.160 --> 00:23:15.850\nI could sort those,\nI could create histograms.\n\n379\n00:23:15.850 --> 00:23:17.690\nAnd this is kind of a hokey example, but\n\n380\n00:23:17.690 --> 00:23:22.044\nyou could see I could count the errors,\ncount how many info's.\n\n381\n00:23:23.320 --> 00:23:28.480\nGive me some basic statistics about\nthese large gigabyte log files or\n\n382\n00:23:29.700 --> 00:23:31.380\nterm papers that I'm searching through.\n\n383\n00:23:31.380 --> 00:23:34.021\n>> Yeah, you basically in about\nthree lines of code created\n\n384\n00:23:34.021 --> 00:23:35.625\nthe Comma Separated Values file.\n\n385\n00:23:35.625 --> 00:23:40.660\n>> [LAUGH] Yeah, yeah, the first time I\ndid this it made me incredibly happy.\n\n386\n00:23:40.660 --> 00:23:43.192\nI was like yes, yes.\n\n387\n00:23:43.192 --> 00:23:44.263\n>> [LAUGH]\n>> So\n\n388\n00:23:44.263 --> 00:23:47.970\nwe've learned a great\ndeal about dictionaries.\n\n389\n00:23:47.970 --> 00:23:53.102\nBut I wonder where else\nthese could be used.\n\n390\n00:23:53.102 --> 00:23:56.179\nSo I've done this count in the logs,\n\n391\n00:23:56.179 --> 00:24:01.558\ndone this incredibly complex for\nwithin a for, if within an if.\n\n392\n00:24:01.558 --> 00:24:07.300\nElse if counting through this\njust mishmash of strings, right.\n\n393\n00:24:07.300 --> 00:24:12.400\nAnd notice I didn't actually count\nthe semicolons because I'm like,\n\n394\n00:24:12.400 --> 00:24:17.085\n[SOUND] I'm just doing a lookup here and\nseeing if these are equal.\n\n395\n00:24:17.085 --> 00:24:19.690\nThese are the things I care about.\n\n396\n00:24:19.690 --> 00:24:22.520\nThis allows me to skip over\nthe things I don't care about.\n\n397\n00:24:22.520 --> 00:24:25.130\nSo these relationships are powerful.\n\n398\n00:24:25.130 --> 00:24:29.560\nBut dictionaries, and lists,\nand other things in our\n\n399\n00:24:29.560 --> 00:24:34.290\nstrings provide us other ways to spit\nback information from functions.\n\n400\n00:24:34.290 --> 00:24:39.570\nSo I think it's good to see this\nlast little, I can pop these apart.\n\n401\n00:24:39.570 --> 00:24:44.840\nAnd then just spin back and\nreturn the elements that I need.\n\n402\n00:24:44.840 --> 00:24:46.620\nSo let's just create a function.\n\n403\n00:24:46.620 --> 00:24:49.068\nWe haven't created a function in a while.\n\n404\n00:24:49.068 --> 00:24:56.350\nSo split_comma, right, and\nlet's just say it takes a (string).\n\n405\n00:24:57.730 --> 00:25:01.660\nAnd then what I wanna do is split.\n\n406\n00:25:01.660 --> 00:25:03.070\nI'm gonna make an assumption.\n\n407\n00:25:03.070 --> 00:25:05.250\nI'm gonna assume that this string\nhas a single comma in it and\n\n408\n00:25:05.250 --> 00:25:09.030\nI'm gonna split on that comma and\nreturn the first half and the second half.\n\n409\n00:25:09.030 --> 00:25:11.560\nAnd then I'm gonna return\nit in a dictionary\n\n410\n00:25:11.560 --> 00:25:14.170\nwith those keys as the relationship.\n\n411\n00:25:14.170 --> 00:25:15.340\nFirst and second.\n\n412\n00:25:16.660 --> 00:25:21.226\nSo I can say my split_list is equal\n\n413\n00:25:21.226 --> 00:25:25.484\nto string.split (',').\n\n414\n00:25:25.484 --> 00:25:30.830\nAnd then I can return a dictionary and\n\n415\n00:25:30.830 --> 00:25:34.770\nI can define it in place.\n\n416\n00:25:34.770 --> 00:25:38.510\nAnd you saw that I had this already made.\n\n417\n00:25:38.510 --> 00:25:42.450\nHow would I make this dictionary without\nsaying create an empty one, add a new key,\n\n418\n00:25:42.450 --> 00:25:43.710\ncreate an empty one?\n\n419\n00:25:43.710 --> 00:25:48.146\nI can actually say { }, and say okay,\n\n420\n00:25:48.146 --> 00:25:53.855\nthe 'first_half' is\ngoing to be split_list.\n\n421\n00:25:53.855 --> 00:25:57.650\nAnd since I know there's gonna be\none comma, I have a zero element and\n\n422\n00:25:57.650 --> 00:25:59.060\na first element.\n\n423\n00:25:59.060 --> 00:26:04.871\nSo I can say 0, and I can say second\n\n424\n00:26:04.871 --> 00:26:09.900\nhalf is split_list[1].\n\n425\n00:26:09.900 --> 00:26:11.820\nSo now when I use this,\n\n426\n00:26:11.820 --> 00:26:15.500\nif I pass a string that has one\ncomma in it, that's my assumption,\n\n427\n00:26:15.500 --> 00:26:20.340\nthen I will get them back as two halves\nin a dictionary that I can then use.\n\n428\n00:26:20.340 --> 00:26:23.000\nSo I now have a function\nthat returns a dictionary.\n\n429\n00:26:23.000 --> 00:26:23.873\nLet's go and use that function.\n\n430\n00:26:27.636 --> 00:26:31.240\nI'm going to comment this out so\nwe don't have this output.\n\n431\n00:26:31.240 --> 00:26:36.658\nSo this is my halves,\nhow do you spell, yeah there we go so\n\n432\n00:26:36.658 --> 00:26:44.160\nsplit_comma ( 'tomato, carrot').\n\n433\n00:26:44.160 --> 00:26:46.980\nSo I have the string that's all run\ntogether and I want the first half and\n\n434\n00:26:46.980 --> 00:26:48.620\nthe second half.\n\n435\n00:26:48.620 --> 00:26:52.242\nThis could be a line split where\na lot of times you'll have\n\n436\n00:26:52.242 --> 00:26:54.802\nsomething:something else.\n\n437\n00:26:54.802 --> 00:26:59.280\nLike in various text files\nyou'll see that separation.\n\n438\n00:26:59.280 --> 00:27:03.630\nThis would be a way to go okay on every\nline, I want to split this right there.\n\n439\n00:27:03.630 --> 00:27:06.780\nAnd get the first half and the second\nhalf, and they're not exactly halves.\n\n440\n00:27:07.860 --> 00:27:12.806\nBut now, I can print(halves).\n\n441\n00:27:12.806 --> 00:27:16.254\nAnd if I clear and run.\n\n442\n00:27:16.254 --> 00:27:20.131\nThen I can see that returns\nto me as a dictionary.\n\n443\n00:27:20.131 --> 00:27:22.620\nThat I can then use in reference.\n\n444\n00:27:22.620 --> 00:27:25.410\nI can iterate through this\nlike any other dictionary but\n\n445\n00:27:25.410 --> 00:27:30.260\nI've extracted that split\nvalue into a function\n\n446\n00:27:30.260 --> 00:27:34.560\nthat's descriptive and gives me data\ntypes that I can now work with.\n\n447\n00:27:34.560 --> 00:27:39.690\n>> Wow, that is extremely cool to be\nable to just create that function and\n\n448\n00:27:39.690 --> 00:27:43.145\nthen say, now when I need to add to my\ndictionary I just throw it in here and\n\n449\n00:27:43.145 --> 00:27:43.920\ndown with my code.\n\n450\n00:27:43.920 --> 00:27:44.870\ncouple of lines.\n\n451\n00:27:44.870 --> 00:27:47.310\nHere's the associations I wanna create.\n\n452\n00:27:47.310 --> 00:27:48.760\nAnd throw that in there for me would you.\n\n453\n00:27:48.760 --> 00:27:50.290\nCreate that dictionary.\n\n454\n00:27:50.290 --> 00:27:51.140\nIt was super simple.\n\n455\n00:27:51.140 --> 00:27:52.320\nIt was nothing to it.\n\n456\n00:27:52.320 --> 00:27:54.700\nThat's what I'm liking about Python so\nfar.\n\n457\n00:27:54.700 --> 00:27:57.680\nThat's what most people like about Python.\n\n458\n00:27:57.680 --> 00:28:02.024\nThat's what draws me to it cuz as I've\nalways said, I can have an idea and\n\n459\n00:28:02.024 --> 00:28:05.670\nhave it down in five lines of\ncode in a couple,10 minutes.\n\n460\n00:28:06.830 --> 00:28:07.910\n>> Awesome stuff.\n\n461\n00:28:07.910 --> 00:28:10.850\nSo Justin is there anything else about\ndictionaries that we wanna go over before\n\n462\n00:28:10.850 --> 00:28:11.650\nwe wrap up the show?\n\n463\n00:28:11.650 --> 00:28:14.600\n>> No,\nwe've actually covered a great deal.\n\n464\n00:28:14.600 --> 00:28:18.996\nWe've utilized a lot of the things\nthat we've already learned, iteration,\n\n465\n00:28:18.996 --> 00:28:20.540\ndecision making.\n\n466\n00:28:20.540 --> 00:28:26.140\nThe use of dictionaries and functions\nall together to do a couple of example.\n\n467\n00:28:26.140 --> 00:28:29.550\nWe're starting to see\nthe full power of Python.\n\n468\n00:28:29.550 --> 00:28:31.370\nSo I think we're good.\n\n469\n00:28:31.370 --> 00:28:32.080\n>> Awesome stuff.\n\n470\n00:28:32.080 --> 00:28:35.330\nWell Justin thanks again for\njust stopping by and\n\n471\n00:28:35.330 --> 00:28:38.040\ngiving us your wealth of knowledge and\nexperience with Python.\n\n472\n00:28:38.040 --> 00:28:41.980\nTo help us become young Python\nmasters one day ourselves.\n\n473\n00:28:41.980 --> 00:28:45.580\nThat being said, we've got nothing\nelse to go for on dictionaries.\n\n474\n00:28:45.580 --> 00:28:49.520\nWe thank you guys for watching, I hope you\nenjoyed this episode, got a lot out of it.\n\n475\n00:28:49.520 --> 00:28:52.570\nWe appreciate everyone that watches and\nviews, so we thank you for that.\n\n476\n00:28:52.570 --> 00:28:53.885\nHopefully we'll see you\nin the next episode.\n\n477\n00:28:53.885 --> 00:28:57.785\nAs for this one, signing off for ITProTV,\nI've been your host, Daniel Lowrie.\n\n478\n00:28:57.785 --> 00:28:59.062\n>> And I'm Justin Denison.\n\n479\n00:28:59.062 --> 00:29:01.140\nAnd we'll see you next time.\n\n480\n00:29:01.140 --> 00:29:09.230\n[MUSIC]\n\n",
          "vimeoId": "158188688"
        },
        {
          "description": "In this episode, Daniel and Justin familiarize you with Tuples in Python. Though it may have an unusual name, Tuples are very similar to Lists, but with some important differences. Here, Justin describes exactly what Tuples are and gives some great examples of how and where one might use them. They also show you how to use the standard operating methods and slicing techniques applied to Tuples. Finally, they show you how you can use Tuples as input to Functions.",
          "length": "1942",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-9-tuples-030616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-9-tuples-030616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-9-tuples-030616-1-sm.jpg",
          "title": "Tuples",
          "transcript": "WEBVTT\n\n1\n00:00:00.038 --> 00:00:07.873\n[MUSIC]\n\n2\n00:00:07.873 --> 00:00:12.628\nAll right, greetings everyone and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:12.628 --> 00:00:15.801\nI'm your host, Daniel Lowrie, and\nin today's episode, that's right,\n\n4\n00:00:15.801 --> 00:00:18.295\nwe're continuing on with our\nPython programming series.\n\n5\n00:00:18.295 --> 00:00:20.285\nHopefully, you're getting a lot\nof enjoyment out of that.\n\n6\n00:00:20.285 --> 00:00:24.145\nJoining us back in the studio again\ntoday is our mentor in that endeavor,\n\n7\n00:00:24.145 --> 00:00:25.315\nthat is Justin Dennison.\n\n8\n00:00:25.315 --> 00:00:26.695\nJustin, welcome back to the show, sir.\n\n9\n00:00:26.695 --> 00:00:27.425\nHow are you doing?\n\n10\n00:00:27.425 --> 00:00:28.615\n>> I'm doing great.\n\n11\n00:00:28.615 --> 00:00:29.985\nI'm really excited to be back.\n\n12\n00:00:29.985 --> 00:00:35.500\nWe're down to our final core\ndata structure, tuples.\n\n13\n00:00:35.500 --> 00:00:36.580\n>> Well say no more.\n\n14\n00:00:36.580 --> 00:00:37.400\n>> Yeah, I know, right.\n\n15\n00:00:37.400 --> 00:00:39.207\n>> We should just end\nthe show right there.\n\n16\n00:00:39.207 --> 00:00:42.180\n[LAUGH]\n>> And we're done.\n\n17\n00:00:42.180 --> 00:00:46.886\nSo, first off, I don't,\nthere is some contention, is it tuples or\n\n18\n00:00:46.886 --> 00:00:48.520\ntuples, it's up in the air.\n\n19\n00:00:48.520 --> 00:00:49.226\nWhatever you like.\n\n20\n00:00:49.226 --> 00:00:50.067\n>> Potato, potato.\n\n21\n00:00:50.067 --> 00:00:51.710\n>> Potato, potato.\n\n22\n00:00:51.710 --> 00:00:56.042\nI've heard tuples but\nwhen I say quadruple or, but\n\n23\n00:00:56.042 --> 00:01:01.290\nwhen you say quintuple,\nI don't know, I don't know.\n\n24\n00:01:01.290 --> 00:01:04.300\nSo, you make your own decisions\nabout how to pronounce it.\n\n25\n00:01:05.490 --> 00:01:06.750\nIt's up in the air.\n\n26\n00:01:06.750 --> 00:01:09.790\n>> Well that being said, now that we've\nhad a little fun with the word here,\n\n27\n00:01:09.790 --> 00:01:11.950\nit is a strange word.\n\n28\n00:01:11.950 --> 00:01:13.810\nWhat exactly is a tuple?\n\n29\n00:01:13.810 --> 00:01:17.720\nI mean we're working on Python,\nmaybe, is this specific to Python?\n\n30\n00:01:17.720 --> 00:01:20.280\nDo other programs use this or\nhow does it work?\n\n31\n00:01:21.360 --> 00:01:25.310\n>> There are some programming\nlanguages that have tuples,\n\n32\n00:01:25.310 --> 00:01:29.240\nthey're typically those more\nesoteric ones, I think Python is\n\n33\n00:01:29.240 --> 00:01:33.850\nthe most mainstream one that I know of,\nnot saying that there aren't others.\n\n34\n00:01:33.850 --> 00:01:40.120\nOr some hidden type things nested away in\nother languages that implement tuples.\n\n35\n00:01:40.120 --> 00:01:44.020\nSo tuples are kind of like\nimmutable relationships.\n\n36\n00:01:44.020 --> 00:01:48.950\nSo we had those dictionaries that\ncan map but those were mutable.\n\n37\n00:01:48.950 --> 00:01:54.030\nWith tuples, I can create effectively\nan immutable list that is used for\n\n38\n00:01:54.030 --> 00:01:56.110\nestablishing relationships.\n\n39\n00:01:56.110 --> 00:01:58.510\nLike if I had a tuple that\nrepresented a person,\n\n40\n00:01:58.510 --> 00:02:02.590\nthe first element may be the first name,\nsecond element may be the last name, and\n\n41\n00:02:02.590 --> 00:02:04.758\nthen the third element would be their age.\n\n42\n00:02:04.758 --> 00:02:08.095\nSo that would be a relationship between\nthose three pieces of information and\n\n43\n00:02:08.095 --> 00:02:09.388\nI don't want that to change.\n\n44\n00:02:09.388 --> 00:02:13.708\nSo tuples are a great way to bind all of\nthose together in a nice little container\n\n45\n00:02:13.708 --> 00:02:18.029\nthat I don't have to worry about people\nchanging because they are immutable,\n\n46\n00:02:18.029 --> 00:02:19.680\nvery much like strings.\n\n47\n00:02:19.680 --> 00:02:26.370\nSo I had the relationships with\ndictionaries which were mutable so\n\n48\n00:02:26.370 --> 00:02:30.830\nthey correspond kind of a list but\nthen strings are immutable.\n\n49\n00:02:30.830 --> 00:02:36.120\nI need some way to bind these things and\nnot have that mutability become an issue.\n\n50\n00:02:36.120 --> 00:02:37.790\nSo tuples kind of fill that role.\n\n51\n00:02:37.790 --> 00:02:40.635\n>> So they're kind of the yin to\nthe yang of a dictionary, right,\n\n52\n00:02:40.635 --> 00:02:43.806\nwhere the dictionary says, well,\nyou can make these associations,\n\n53\n00:02:43.806 --> 00:02:45.436\nanything you would like them to be.\n\n54\n00:02:45.436 --> 00:02:49.332\nBut the tuple, or tuple, however you like\nit, once you create the association,\n\n55\n00:02:49.332 --> 00:02:51.830\nthat is it, it is locked solid,\nit is not changing.\n\n56\n00:02:52.900 --> 00:02:55.010\n>> Exactly and\nthat's how I like to think of them.\n\n57\n00:02:55.010 --> 00:02:58.900\nThere are some more stringent reasons for\n\n58\n00:02:58.900 --> 00:03:01.740\nhaving tuples and\nwe'll see a couple of different uses.\n\n59\n00:03:01.740 --> 00:03:06.150\nI typically have some standard uses for\ntuples, but\n\n60\n00:03:06.150 --> 00:03:11.190\nI've seen people implement them\nas like discreet pieces of data,\n\n61\n00:03:11.190 --> 00:03:14.830\nor ways to switch things around,\nor all kinds of stuff.\n\n62\n00:03:14.830 --> 00:03:18.660\nBut they have some very interesting\nproperties that allow us to\n\n63\n00:03:18.660 --> 00:03:23.270\nshorten our code, make it a little\nmore concise, and.sometimes,\n\n64\n00:03:23.270 --> 00:03:26.230\nonce you figure out how tuples work,\na little more readable.\n\n65\n00:03:27.642 --> 00:03:31.220\nSo I think the best thing to do\n\n66\n00:03:31.220 --> 00:03:36.090\nis just take a look in the Python\nshell about, what is a tuple?\n\n67\n00:03:36.090 --> 00:03:37.360\nHow would I define a tuple?\n\n68\n00:03:37.360 --> 00:03:40.074\nHow do I know if it's a tuple?\n\n69\n00:03:40.074 --> 00:03:44.976\nSo some common usages are to\nreturn multiple values\n\n70\n00:03:44.976 --> 00:03:49.430\nfrom a function or\nto switch variable values.\n\n71\n00:03:49.430 --> 00:03:53.902\nThere are some algorithms where I need\nto do something to variables, and\n\n72\n00:03:53.902 --> 00:03:59.680\nthen switch their values, and then kind of\nrepeat that until some condition is met.\n\n73\n00:03:59.680 --> 00:04:05.111\nBut the most often thing that I use\nthem for is to be able to return\n\n74\n00:04:05.111 --> 00:04:10.850\nmultiple values outside of\na dictionary from a function.\n\n75\n00:04:10.850 --> 00:04:14.160\nSo I can say I knew the first value is\nalways the name, the second value is\n\n76\n00:04:14.160 --> 00:04:19.160\nalways the age, the third value is\nalways the city where they were born.\n\n77\n00:04:19.160 --> 00:04:23.344\nAnd we'll look a couple of functions that\ndo that, we'll implement our own, but\n\n78\n00:04:23.344 --> 00:04:26.990\nbefore we do that,\nwe need to look at tuples, right?\n\n79\n00:04:26.990 --> 00:04:32.439\nSo I need to look at tuple_1 and\ntuples are surrounded\n\n80\n00:04:32.439 --> 00:04:37.179\nin parenthesis,\nthey work kind of like a list,\n\n81\n00:04:37.179 --> 00:04:42.210\nbut list,\nI can make an empty list like this.\n\n82\n00:04:42.210 --> 00:04:43.476\nBut if I try it with a tuple.\n\n83\n00:04:46.868 --> 00:04:54.360\nOkay, and then I go type(tuple_1),\nthat is a tuple.\n\n84\n00:04:54.360 --> 00:04:58.219\nSo okay, I have an empty tuple, but\nI already said they're immutable,\n\n85\n00:04:58.219 --> 00:04:59.686\nlike I can't change that.\n\n86\n00:04:59.686 --> 00:05:03.780\nIf I want to say tuple_1[0], right,\n\n87\n00:05:03.780 --> 00:05:08.215\nI'm using some of the things\nI know from list,\n\n88\n00:05:08.215 --> 00:05:11.758\n= 1, it goes hey, can't do that.\n\n89\n00:05:11.758 --> 00:05:15.010\nI get a type error,\nit says does not support assignment.\n\n90\n00:05:15.010 --> 00:05:19.360\nSo okay, I don't know why we need an empty\ntuple, but the logical progression, and\n\n91\n00:05:19.360 --> 00:05:22.110\nhere's where the hiccup for\na lot of people happened.\n\n92\n00:05:22.110 --> 00:05:26.448\nI'm gonna reassign tuple_1 to\nsomething a little more useful.\n\n93\n00:05:26.448 --> 00:05:32.818\nI need a single element in there, and it's\njust the number 1, or let's go with 10.\n\n94\n00:05:32.818 --> 00:05:36.498\nI'm like, okay, I have a tuple,\nand let's make sure it's a tuple.\n\n95\n00:05:40.008 --> 00:05:42.050\nWell, that was unexpected.\n\n96\n00:05:43.270 --> 00:05:47.260\nBut if I use empty parentheses,\nI get a tuple, but\n\n97\n00:05:47.260 --> 00:05:52.400\nif I use a single value in there,\nI get a whatever that value is.\n\n98\n00:05:52.400 --> 00:05:55.460\nThis was an integer,\nit could have been a string.\n\n99\n00:05:55.460 --> 00:05:58.340\nSo this is the first big\nhiccup when people use tuples,\n\n100\n00:05:58.340 --> 00:06:01.240\nthis is a weird syntax to me.\n\n101\n00:06:01.240 --> 00:06:07.930\nIf I actually want this to be a tuple,\nI need this to be a trailing comma.\n\n102\n00:06:07.930 --> 00:06:12.040\nSo then, if I go type(tuple_1),\nI do get a tuple.\n\n103\n00:06:12.040 --> 00:06:16.570\nAnd I will tell you, I can't tell you the\ncountless number of times where I'm like,\n\n104\n00:06:17.600 --> 00:06:20.160\nwhy can't I, I can't access an element.\n\n105\n00:06:21.850 --> 00:06:25.090\nThat's not working right, I'm getting\nweird type errors, and it's because I\n\n106\n00:06:25.090 --> 00:06:29.220\nthought I was creating a tuple when in\nfact I was just creating an integer, or\n\n107\n00:06:29.220 --> 00:06:31.570\na string, or something of that nature.\n\n108\n00:06:31.570 --> 00:06:32.980\nSo I get this unpredictable behavior.\n\n109\n00:06:32.980 --> 00:06:36.440\nIt's very important to realize\nthat tuples have this.\n\n110\n00:06:36.440 --> 00:06:40.930\nThis is fairly unintuitive as\nfar as the Python world goes for\n\n111\n00:06:40.930 --> 00:06:45.330\nme when I look at the broad scope\nof what we've covered thus far.\n\n112\n00:06:45.330 --> 00:06:54.260\nSo tuples are not limited to single\nelements, I can have a quadruple, right?\n\n113\n00:06:54.260 --> 00:06:58.168\nSo let's just actually call it a quad, and\n\n114\n00:06:58.168 --> 00:07:03.053\nI could say 1, 2, carrot,\nand some name, right,\n\n115\n00:07:03.053 --> 00:07:09.120\nI've created an association\nbetween this packet of data.\n\n116\n00:07:09.120 --> 00:07:11.890\nSo I now have quad and\n\n117\n00:07:11.890 --> 00:07:17.020\nI can confirm with the type function\nthat it is in fact a tuple.\n\n118\n00:07:18.810 --> 00:07:20.626\nTuples provided a wonderful way,\n\n119\n00:07:20.626 --> 00:07:24.510\nand we use this in functions to\ndo some thing called unpacking.\n\n120\n00:07:24.510 --> 00:07:29.500\nSo I can actually utilize Python\nto take this group of data and\n\n121\n00:07:29.500 --> 00:07:32.330\nassign it to variables all in one line.\n\n122\n00:07:32.330 --> 00:07:37.161\nSo I can say a,b,c,d\n\n123\n00:07:37.161 --> 00:07:42.250\n= quad, and\nit'll actually unpack those for me.\n\n124\n00:07:42.250 --> 00:07:47.383\nSo if I look at a,\nthat was the first element in a tuple,\n\n125\n00:07:47.383 --> 00:07:51.960\nand that tuple in particular,\nb was the second,\n\n126\n00:07:51.960 --> 00:07:55.550\nc was the third, and d was the fourth.\n\n127\n00:07:55.550 --> 00:08:00.623\nBut we have to be careful because\nwe have to understand Tuples\n\n128\n00:08:00.623 --> 00:08:07.682\ncome with a fixed length, so if I went, A,\nB, C, D, or let's just leave off the D,\n\n129\n00:08:07.682 --> 00:08:13.190\nand I say quad, I will actually\nget what's called a ValueError.\n\n130\n00:08:13.190 --> 00:08:15.480\nIt will say, hey,\nyou got too many values to unpack.\n\n131\n00:08:15.480 --> 00:08:20.150\nI don't know what to assign to A,\nwhat assign to B, what to assign to C.\n\n132\n00:08:21.190 --> 00:08:24.280\nWhat do you want me to do?\n\n133\n00:08:24.280 --> 00:08:25.874\nSo when you see ValueErrors,\n\n134\n00:08:25.874 --> 00:08:29.829\nthat means you're trying to assign\nlike three variables to four values or\n\n135\n00:08:29.829 --> 00:08:33.234\nfive values to only two variables,\nsomething of that nature.\n\n136\n00:08:33.234 --> 00:08:35.892\n>> So there needs to be a one-to-one\nmapping with your tuple and\n\n137\n00:08:35.892 --> 00:08:37.692\nyour variables that you're assigning.\n\n138\n00:08:37.692 --> 00:08:39.380\n>> Exactly, exactly.\n\n139\n00:08:39.380 --> 00:08:44.810\nNow, what really comes out great is,\nbecause I have this unpacking ability,\n\n140\n00:08:44.810 --> 00:08:47.940\nwhen I return these to functions,\nI can make a function call and\n\n141\n00:08:47.940 --> 00:08:51.890\nif I know that I'm getting a first\nname and a last name separately.\n\n142\n00:08:51.890 --> 00:08:55.800\nI can assign those separately in\nvariables, first, comma, last,\n\n143\n00:08:55.800 --> 00:08:58.430\nequals, get names,\nsomething of that nature.\n\n144\n00:08:58.430 --> 00:08:59.170\nWe'll take a look at that.\n\n145\n00:09:00.480 --> 00:09:06.840\nBut other than that, we get all of\nthe collection that we normally have.\n\n146\n00:09:06.840 --> 00:09:10.384\nHow would I add, let's look at this quad,\nif I don't wanna change this,\n\n147\n00:09:10.384 --> 00:09:16.430\nI just wanted to grab this one value, I\ncan say, hey, give me the zeroth element.\n\n148\n00:09:16.430 --> 00:09:22.256\nThere's still zero based, if I wanted the\nsecond element, which would be index one.\n\n149\n00:09:22.256 --> 00:09:26.670\nI now have then association that\nI do in list and strings, but\n\n150\n00:09:26.670 --> 00:09:31.791\na tuple allows me an immutable structure\nthat I can put any data I want.\n\n151\n00:09:31.791 --> 00:09:35.869\nStrings, numbers, other tuples,\nother dictionaries,\n\n152\n00:09:35.869 --> 00:09:38.568\nall kinds of weird nested structures.\n\n153\n00:09:38.568 --> 00:09:41.260\n>> Do tuples show us the mappings,\nkind of like the dictionaries were?\n\n154\n00:09:41.260 --> 00:09:45.690\nIn dictionaries, we had one,\nit would have the number one, and two, and\n\n155\n00:09:45.690 --> 00:09:46.440\nit'd have the number two.\n\n156\n00:09:46.440 --> 00:09:50.356\nAnd we created those associations,\nwe could see them as we printed that out.\n\n157\n00:09:50.356 --> 00:09:52.876\nDoes the tuple do that\nsame kind of function?\n\n158\n00:09:52.876 --> 00:09:56.210\n>> No, it's implied very much like a list.\n\n159\n00:09:56.210 --> 00:09:59.050\nThis first thing is the zeroth element.\n\n160\n00:09:59.050 --> 00:10:01.110\nThe next thing is the first element.\n\n161\n00:10:01.110 --> 00:10:02.950\nThe next thing is the third element.\n\n162\n00:10:02.950 --> 00:10:05.670\nDid I say third twice?\n\n163\n00:10:05.670 --> 00:10:06.527\nI'm sorry if I did.\n\n164\n00:10:06.527 --> 00:10:10.012\n>> [LAUGH]\n>> I think I meant zero, one, two, so\n\n165\n00:10:10.012 --> 00:10:11.636\nsorry about that.\n\n166\n00:10:11.636 --> 00:10:16.370\nBut really what where doing is, let's\nsay I wanted to, here's a person, right?\n\n167\n00:10:16.370 --> 00:10:17.680\nI'm a variable kind of person.\n\n168\n00:10:17.680 --> 00:10:19.450\nI wanna create an association.\n\n169\n00:10:19.450 --> 00:10:22.722\nAnd I'm gonna created a tuple that\nhas a very specific structure.\n\n170\n00:10:22.722 --> 00:10:24.527\nFirst name, last name, age, okay?\n\n171\n00:10:24.527 --> 00:10:26.907\nJust like we were talking about.\n\n172\n00:10:26.907 --> 00:10:31.115\nSo, Jim,\n\n173\n00:10:31.115 --> 00:10:36.729\nJohn, 21.\n\n174\n00:10:36.729 --> 00:10:39.662\nSo now, this person is this tuple.\n\n175\n00:10:39.662 --> 00:10:44.116\nThese kind of imply relationship but\nthey have a specific order.\n\n176\n00:10:44.116 --> 00:10:48.642\nThey keep that order, unlike dictionaries,\nbut like lists or strings.\n\n177\n00:10:48.642 --> 00:10:52.027\nSo now I have this kind of\ndeterministic behavior where\n\n178\n00:10:52.027 --> 00:10:56.882\nI can go to the first thing from a person\nlike tuple, is gonna be the first name,\n\n179\n00:10:56.882 --> 00:10:59.773\nthe second thing's gonna\nbe the second name.\n\n180\n00:10:59.773 --> 00:11:06.230\nAnd then I can say, first_name,\n\n181\n00:11:06.230 --> 00:11:12.720\nlast_name, age equals person.\n\n182\n00:11:12.720 --> 00:11:17.630\nAnd that's a quick way to start\npeeling apart these data pieces.\n\n183\n00:11:18.860 --> 00:11:22.388\nSo, we get this little\nextra functionality.\n\n184\n00:11:22.388 --> 00:11:27.840\nBut I wonder what else do\nyou think these can do?\n\n185\n00:11:27.840 --> 00:11:29.560\nWe've had this intuitive feel.\n\n186\n00:11:29.560 --> 00:11:31.094\nThis is a collection.\n\n187\n00:11:31.094 --> 00:11:32.196\nSo what are your thoughts, Daniel?\n\n188\n00:11:32.196 --> 00:11:36.825\n>> Yeah, my thoughts are if I can do all\nthe other cool collections on the other\n\n189\n00:11:36.825 --> 00:11:38.550\ntypes that we looked at.\n\n190\n00:11:38.550 --> 00:11:41.930\nThen I should be able to run\nthose on tuples as well.\n\n191\n00:11:41.930 --> 00:11:42.950\n>> Let's find out.\n\n192\n00:11:42.950 --> 00:11:43.450\n>> Let's do it.\n\n193\n00:11:43.450 --> 00:11:44.630\n>> Let's find out.\n\n194\n00:11:44.630 --> 00:11:48.600\nSo, can I get the length of a tuple?\n\n195\n00:11:48.600 --> 00:11:51.045\nAnd I can in fact get\nthe length of a tuple.\n\n196\n00:11:51.045 --> 00:11:52.508\nThat tells me how many\nelements are in there.\n\n197\n00:11:52.508 --> 00:11:57.055\nNow, for some of the mutable structures,\nlike lists or\n\n198\n00:11:57.055 --> 00:12:00.942\ndictionaries, these properties may change.\n\n199\n00:12:00.942 --> 00:12:05.085\nBut with these unmutable properties,\nfor this particular tuple,\n\n200\n00:12:05.085 --> 00:12:08.658\nunless I reassign the variable,\nI will always get three.\n\n201\n00:12:08.658 --> 00:12:14.733\nI wonder if I can do this\nmembership operator like,\n\n202\n00:12:14.733 --> 00:12:20.260\nis Jim in person, so\nis the name Jim in person?\n\n203\n00:12:21.420 --> 00:12:24.730\nIt is, is Steve in person?\n\n204\n00:12:25.980 --> 00:12:26.610\nAnd it's not.\nSo\n\n205\n00:12:26.610 --> 00:12:30.022\nI get that membership operator\njust like I do with list.\n\n206\n00:12:30.022 --> 00:12:37.720\nI wonder, we saw strings and list had\nthat repetition operator rocking it.\n\n207\n00:12:37.720 --> 00:12:38.625\nRight?\nOver and over, and over again.\n\n208\n00:12:38.625 --> 00:12:44.937\nI wonder if that occurs also, so\nif I go person times three and I do.\n\n209\n00:12:44.937 --> 00:12:49.943\nAnd here's what, just like strings,\nthe original person didn't change.\n\n210\n00:12:49.943 --> 00:12:55.274\nI actually get a new copy of the tuple\nthat says, I'm gonna give you the copy,\n\n211\n00:12:55.274 --> 00:12:59.176\nor the tuple copied three\ntimes into another tuple.\n\n212\n00:12:59.176 --> 00:13:03.600\n>> Is that basically like a dynamic\ncopy where you say, I have this tuple\n\n213\n00:13:03.600 --> 00:13:07.730\nperson and I want to multiply by three,\nand give me three iterations of it?\n\n214\n00:13:07.730 --> 00:13:10.070\nAnd then it creates that as, like I said,\n\n215\n00:13:10.070 --> 00:13:14.720\nkinda dynamically where, once it's done an\noutput then it deletes it and it's gone.\n\n216\n00:13:14.720 --> 00:13:20.539\n>> So unless I actually\nphysically assign it to something\n\n217\n00:13:20.539 --> 00:13:26.617\nlike person triple, is person,\nis person times three.\n\n218\n00:13:26.617 --> 00:13:29.940\nUnless I do that, then yes.\n\n219\n00:13:29.940 --> 00:13:32.540\nOnce it's output,\nlike there's no other need for it.\n\n220\n00:13:32.540 --> 00:13:35.710\nIt may remain in the memory for\na little while behind the scenes.\n\n221\n00:13:35.710 --> 00:13:40.210\nBut you don't have access to it so it will\nbe what's called garbage collected very,\n\n222\n00:13:40.210 --> 00:13:41.220\nvery quickly.\n\n223\n00:13:41.220 --> 00:13:43.980\n>> Now, Justin, one of the cool\nfeatures that we've seen so\n\n224\n00:13:43.980 --> 00:13:47.530\nfar with many of the other types of\ncollections that we used is slicing.\n\n225\n00:13:47.530 --> 00:13:50.820\nSlicing was very, very helpful for\nus in the other collections.\n\n226\n00:13:50.820 --> 00:13:52.604\nCan we use slicing here with tuples?\n\n227\n00:13:52.604 --> 00:13:57.938\n>> Well, intuitively, if I'm looking\nat this from a beginning aspect, when I\n\n228\n00:13:57.938 --> 00:14:03.041\nfirst saw tuples I was like, I wonder\nif I can, I asked the same question.\n\n229\n00:14:03.041 --> 00:14:05.466\nI wonder if I can slice tuples.\n\n230\n00:14:05.466 --> 00:14:07.800\nI think there's only one way to find out.\n\n231\n00:14:07.800 --> 00:14:13.110\nI could go on the internet, but\nwith the Python chill, I could say,\n\n232\n00:14:13.110 --> 00:14:16.240\nokay, give me from one, or excuse me,\n\n233\n00:14:16.240 --> 00:14:21.310\nfrom zero to the first thing,\nand it does give me a slice.\n\n234\n00:14:22.350 --> 00:14:25.750\nBut how does it return the slice and\nthat's a key difference for\n\n235\n00:14:25.750 --> 00:14:27.890\nall these slicing operations.\n\n236\n00:14:27.890 --> 00:14:30.560\nIf I slice a tuple, I'll get a tuple back.\n\n237\n00:14:30.560 --> 00:14:32.300\nIf I slice a list, I'll get a list back.\n\n238\n00:14:32.300 --> 00:14:34.600\nIf I slice a string,\nI'll get a string back.\n\n239\n00:14:34.600 --> 00:14:38.920\nSo the slice actually gives\nme the data type, the thing,\n\n240\n00:14:38.920 --> 00:14:43.240\nthe entity in the same form\nthat it originally was.\n\n241\n00:14:43.240 --> 00:14:45.910\nI wonder if I can do that skip thing.\n\n242\n00:14:45.910 --> 00:14:48.190\nSo maybe I should use person_triple for\nthat.\n\n243\n00:14:48.190 --> 00:14:55.650\nSo, go through the entire thing and\ngive me every third.\n\n244\n00:14:55.650 --> 00:14:56.567\nGot you.\n\n245\n00:14:56.567 --> 00:15:02.460\nSo, started zero, one, two, give me\nthat one, one, two, give me that one.\n\n246\n00:15:02.460 --> 00:15:05.480\nSo I can skip through here.\n\n247\n00:15:05.480 --> 00:15:09.035\nWhat if I wanted to start at one and\ngo through there.\n\n248\n00:15:09.035 --> 00:15:10.776\nThen, I'll get John, John, John.\n\n249\n00:15:10.776 --> 00:15:13.492\nAnd then likewise, I can do two.\n\n250\n00:15:13.492 --> 00:15:15.480\nSo the slicing is very important.\n\n251\n00:15:15.480 --> 00:15:17.616\nI can start to extract these.\n\n252\n00:15:17.616 --> 00:15:21.637\nAnd now that I have have a tuple,\nI could even do something like this.\n\n253\n00:15:21.637 --> 00:15:28.984\nA, B, C equals person_triple two colon,\ncolon three, right?\n\n254\n00:15:28.984 --> 00:15:31.300\nSo this means start at two.\n\n255\n00:15:31.300 --> 00:15:35.770\nIf I put nothing here, just as a quick\nreminder, this means go to the very end\n\n256\n00:15:35.770 --> 00:15:40.740\nand step by three, and\nnow A has 21, B has 21, C has 21.\n\n257\n00:15:40.740 --> 00:15:45.420\nSo I can, split those out\ninto variables very quickly.\n\n258\n00:15:45.420 --> 00:15:47.930\n>> Now, Justin,\nas this seems like basically, again,\n\n259\n00:15:47.930 --> 00:15:51.140\nlike kind of the other different\ntypes of collections that we've used.\n\n260\n00:15:51.140 --> 00:15:52.176\nIt's basically a list of things.\n\n261\n00:15:52.176 --> 00:15:57.002\nAnd, I know, I'm starting to assume\nwith Python a lot here, that usually if\n\n262\n00:15:57.002 --> 00:16:01.104\nI have a list, I can iterate\nthrough those lists when necessary.\n\n263\n00:16:01.104 --> 00:16:02.566\nIs that possible?\n\n264\n00:16:02.566 --> 00:16:05.306\nThere's only one way to find out.\n\n265\n00:16:05.306 --> 00:16:10.958\nSo let's just use standard collection,\n\n266\n00:16:10.958 --> 00:16:16.932\nlet's say for element in person_triple,\n\n267\n00:16:16.932 --> 00:16:19.850\nprint(element).\n\n268\n00:16:19.850 --> 00:16:23.765\nAnd it does in fact iterate\nvery much like a list so\n\n269\n00:16:23.765 --> 00:16:27.878\nI can almost think of a tuple\nas a fixed length list.\n\n270\n00:16:27.878 --> 00:16:31.288\nWhich is interesting because in\nother programming languages,\n\n271\n00:16:31.288 --> 00:16:34.694\nif you've ever programmed in Java or\nC, when you make an array,\n\n272\n00:16:34.694 --> 00:16:38.220\nwhich effectively is what a list is,\nit's fixed in length.\n\n273\n00:16:38.220 --> 00:16:39.200\nLike you can't change it.\n\n274\n00:16:39.200 --> 00:16:41.310\nYou have to make a new copy and\ndo stuff like that,\n\n275\n00:16:41.310 --> 00:16:43.500\nso this takes a little different paradigm.\n\n276\n00:16:43.500 --> 00:16:48.090\nLists, which are commonly\nused are dynamic.\n\n277\n00:16:48.090 --> 00:16:49.940\nThey can change in size.\n\n278\n00:16:49.940 --> 00:16:52.570\nTuples on the other hand are fixed.\n\n279\n00:16:52.570 --> 00:16:59.020\nAnd behave very much like an array as\nwe would think them in other languages.\n\n280\n00:16:59.020 --> 00:17:03.330\nBut really the power comes\nfrom tuples in my view,\n\n281\n00:17:03.330 --> 00:17:08.670\nthis is something that make sense to\nme a lot, is in functions, right.\n\n282\n00:17:08.670 --> 00:17:16.088\nSo, if we hop over to our\nlittle script here tupples.py.\n\n283\n00:17:16.088 --> 00:17:18.188\nI got my shebang here,\nI got my main method.\n\n284\n00:17:18.188 --> 00:17:22.320\nI'm gonna create a function,\nI'm gonna call it divmod.\n\n285\n00:17:22.320 --> 00:17:24.550\nSo, here I'm gonna explain\nwhat the function's gonna do.\n\n286\n00:17:24.550 --> 00:17:28.360\nIt's gonna take two numbers so\na and b are numbers.\n\n287\n00:17:29.650 --> 00:17:35.880\nSo, just to comment that out,\na, b are numbers.\n\n288\n00:17:35.880 --> 00:17:42.223\nI'm going to find the division of a/b or\n\n289\n00:17:42.223 --> 00:17:50.020\nbetter put the quotient and\nthen I'm going to find the remainder.\n\n290\n00:17:50.020 --> 00:17:53.960\nAnd, Daniel, do you remember right off\nhand how I can find that remainder?\n\n291\n00:17:53.960 --> 00:17:57.720\n>> Yeah, it had to do with\nfloating point integers, right, or\n\n292\n00:17:57.720 --> 00:18:00.810\nwe had to use the,\nif I can remember it correctly.\n\n293\n00:18:02.280 --> 00:18:04.610\nMan, I can't remember,\nit was the percent sign right, yeah.\n\n294\n00:18:04.610 --> 00:18:05.580\n>> Yes, you got it!\n\n295\n00:18:05.580 --> 00:18:06.140\n>> Yes.\n\n296\n00:18:06.140 --> 00:18:11.930\n>> Right, all right, so\nI can actually do a%b, and that\n\n297\n00:18:11.930 --> 00:18:16.910\nwill return the remainder of a divided\nby b, and we'll see how that works.\n\n298\n00:18:17.990 --> 00:18:23.240\nAnd then I want to return the quotient and\nthe remainder together.\n\n299\n00:18:23.240 --> 00:18:26.850\nAnd normally if I wanted to do that I\nwould have to put them in a dictionary and\n\n300\n00:18:26.850 --> 00:18:29.170\nname them, but I know for\n\n301\n00:18:29.170 --> 00:18:34.520\nsomething this simple, I just wanna return\nthe quotient, the remainder always.\n\n302\n00:18:34.520 --> 00:18:37.530\nSo a and b are numbers.\n\n303\n00:18:37.530 --> 00:18:39.273\nI need to address that first.\n\n304\n00:18:39.273 --> 00:18:45.494\nIf the type of a is equal to int and\n\n305\n00:18:45.494 --> 00:18:50.340\ntype of b is equal to int.\n\n306\n00:18:51.360 --> 00:18:53.040\nAnd these are integer numbers.\n\n307\n00:18:53.040 --> 00:18:55.398\nThen, I'm going to do this part here.\n\n308\n00:18:58.811 --> 00:19:04.500\nAnd I'm going to return,\notherwise, return.\n\n309\n00:19:04.500 --> 00:19:06.930\nAnd I'm gonna introduce something new.\n\n310\n00:19:06.930 --> 00:19:09.638\nI'm actually gonna return nothing, okay?\n\n311\n00:19:09.638 --> 00:19:13.010\nSo this allows me to interact\nwith this method and go hey,\n\n312\n00:19:13.010 --> 00:19:15.940\nyou didn't hold up your\nend of the bargain.\n\n313\n00:19:15.940 --> 00:19:17.730\nSo I'm not gonna give you anything back.\n\n314\n00:19:17.730 --> 00:19:22.370\nThis is a key word in Python that you'll\nsee a lot of functions will have a return\n\n315\n00:19:22.370 --> 00:19:27.030\ntype of none and if they fail,\nyou can say, hey, try this.\n\n316\n00:19:27.030 --> 00:19:28.240\nIf this is none,\n\n317\n00:19:28.240 --> 00:19:32.150\nthen we need to change course a little\nbit because something went wrong.\n\n318\n00:19:32.150 --> 00:19:34.160\nSo this is some basic air handling.\n\n319\n00:19:34.160 --> 00:19:37.214\nNot necessarily the most robust,\nbut it's available.\n\n320\n00:19:37.214 --> 00:19:38.052\n>> Functional.\n\n321\n00:19:38.052 --> 00:19:38.706\n>> Yeah.\n\n322\n00:19:38.706 --> 00:19:40.590\nSo if I want the quotient.\n\n323\n00:19:40.590 --> 00:19:45.770\nAnd that's just gonna be a divided by b.\n\n324\n00:19:46.900 --> 00:19:52.665\nAnd then I want\nthe remainder that's a%b and\n\n325\n00:19:52.665 --> 00:19:57.366\nthen finally, I want to return a, or\n\n326\n00:19:57.366 --> 00:20:02.084\nexcuse me, quotient,remainder.\n\n327\n00:20:02.084 --> 00:20:07.380\nSo, what do notice about this Daniel?\n\n328\n00:20:07.380 --> 00:20:11.530\nIn the shell, I was defining\ntuples in a very specific way, but\n\n329\n00:20:11.530 --> 00:20:14.730\nwhat do you notice about this?\n\n330\n00:20:14.730 --> 00:20:17.300\n>> In what way?\n>> So this return function, typically,\n\n331\n00:20:17.300 --> 00:20:19.880\nwhen I was creating tuples,\nwhat did I say were required?\n\n332\n00:20:21.080 --> 00:20:24.981\n>> Let's see here, for requirements,\nagain I'm not quite following,\n\n333\n00:20:24.981 --> 00:20:28.573\nI don't wanna say the wrong thing or\nlead you down the wrong path.\n\n334\n00:20:28.573 --> 00:20:33.170\n>> [LAUGH] That's totally fine so\nif I look back in the shell,\n\n335\n00:20:33.170 --> 00:20:36.740\nall of these things were\nsurrounded in parentheses.\n\n336\n00:20:36.740 --> 00:20:40.340\nBut I'm not surrounding these in\nparentheses, when I return these,\n\n337\n00:20:40.340 --> 00:20:45.330\nif I separate things by a comma, then\nit kinda implies that this is a tuple.\n\n338\n00:20:45.330 --> 00:20:50.390\nI can put parentheses\naround these if I want to.\n\n339\n00:20:50.390 --> 00:20:52.300\nAnd that will ensure that I understand it.\n\n340\n00:20:52.300 --> 00:20:53.220\nIt's a reminder for me.\n\n341\n00:20:53.220 --> 00:20:56.130\nIt's kinda self documents hey,\nthis is a tuple.\n\n342\n00:20:56.130 --> 00:21:02.410\nSo I have this thing called divmod,\nso division and modulus of a and b.\n\n343\n00:21:02.410 --> 00:21:06.732\nAnd it returns a tuple with\nthe quotient and the remainder.\n\n344\n00:21:06.732 --> 00:21:14.125\nSo if I have let's say number1 = 4 and\n\n345\n00:21:14.125 --> 00:21:19.503\nnumber2 =, your favorite\n\n346\n00:21:19.503 --> 00:21:24.440\nnumber was 9 you said 9.\n\n347\n00:21:24.440 --> 00:21:25.462\n>> It's a lovely number.\n\n348\n00:21:25.462 --> 00:21:26.928\n>> It is a lovely number.\n\n349\n00:21:26.928 --> 00:21:29.299\n>> Very aesthetic,\nthe rounding of it [LAUGH].\n\n350\n00:21:29.299 --> 00:21:30.809\n>> Yep, yep.\n\n351\n00:21:30.809 --> 00:21:32.577\n>> Prime [LAUGH].\n\n352\n00:21:32.577 --> 00:21:33.277\n>> Is it prime?\n\n353\n00:21:33.277 --> 00:21:35.138\n>> I think it is, right?\n\n354\n00:21:35.138 --> 00:21:36.136\n>> It's odd.\n\n355\n00:21:36.136 --> 00:21:36.743\n>> It is odd.\n\n356\n00:21:36.743 --> 00:21:37.512\nIs it prime?\n\n357\n00:21:37.512 --> 00:21:39.640\n>> Yeah, it's three by three,\nthree times three.\n\n358\n00:21:40.760 --> 00:21:42.710\n>> It is three times three.\n\n359\n00:21:42.710 --> 00:21:43.753\n>> I told you I'm not good at math.\n\n360\n00:21:43.753 --> 00:21:47.170\n[LAUGH] It seems like nine\nshould be prime though.\n\n361\n00:21:47.170 --> 00:21:48.857\n>> It seems like it should be,\nintuitively.\n\n362\n00:21:48.857 --> 00:21:51.250\n>> You're like, one, three,\n[CROSSTALK] five, seven.\n\n363\n00:21:51.250 --> 00:21:53.150\nYou're like, nine's gotta be.\n\n364\n00:21:53.150 --> 00:21:55.250\n>> Yeah.\n>> And it's like, nope, nine's not, and\n\n365\n00:21:55.250 --> 00:21:56.725\nyou're like, hold on a second.\n\n366\n00:21:56.725 --> 00:22:00.010\n>> [LAUGH]\n>> So, if I have these two numbers and\n\n367\n00:22:00.010 --> 00:22:05.790\nI want, the div or modulus, or remainder.\n\n368\n00:22:05.790 --> 00:22:07.690\nI'm just choosing variable names.\n\n369\n00:22:07.690 --> 00:22:11.050\nThen I can say hey,\n\n370\n00:22:11.050 --> 00:22:17.378\ndivmod(number1,number2).\n\n371\n00:22:17.378 --> 00:22:19.263\nOkay?\n\n372\n00:22:19.263 --> 00:22:23.550\nNow, wonder what this is gonna do.\n\n373\n00:22:23.550 --> 00:22:25.180\nLooks like it should unpack.\n\n374\n00:22:25.180 --> 00:22:30.060\nLet's just print(div) and\nprint the remainder.\n\n375\n00:22:31.250 --> 00:22:37.900\nSo clear, and Tuples, and\nit does in fact unpack these.\n\n376\n00:22:37.900 --> 00:22:40.728\nSo it assigns div to the division.\n\n377\n00:22:40.728 --> 00:22:44.590\n4 divided by 9,\nwell 9 doesn't go into 4 evenly at all.\n\n378\n00:22:44.590 --> 00:22:47.080\nSo, divides evenly 0 times.\n\n379\n00:22:47.080 --> 00:22:48.680\nAnd then what's the leftover?\n\n380\n00:22:50.110 --> 00:22:52.410\nWell, there's four leftover\nbecause it was never divided.\n\n381\n00:22:52.410 --> 00:22:58.550\nIf I were to switch these in order though,\nwe will see that,\n\n382\n00:22:58.550 --> 00:22:59.530\nthat in fact that's changed.\n\n383\n00:22:59.530 --> 00:23:02.700\n4 goes into 9 2 times\nwith a remainder of 1.\n\n384\n00:23:02.700 --> 00:23:08.416\nAnd this is a great way to kind of\nindex things, skip over certain ones,\n\n385\n00:23:08.416 --> 00:23:12.895\nget this information back all\nat once instead of going,\n\n386\n00:23:12.895 --> 00:23:17.017\nokay, I need to divide,\nthen find the remainder.\n\n387\n00:23:17.017 --> 00:23:21.599\nBut what happens if I just say,\n\n388\n00:23:21.599 --> 00:23:27.072\nsome horrible variable name like d?\n\n389\n00:23:27.072 --> 00:23:29.579\nWhat happens if I do that and\nI print here?\n\n390\n00:23:34.640 --> 00:23:38.879\nThen I get back a different data type, so\n\n391\n00:23:38.879 --> 00:23:43.119\nthat's something I have to be aware of,\n\n392\n00:23:43.119 --> 00:23:47.611\nthat unpacking can actually change that,\n\n393\n00:23:47.611 --> 00:23:53.621\nbecause if I look at the type of d it is,\nin fact, a tuple.\n\n394\n00:23:56.407 --> 00:24:01.704\nBut, if I go back to div remainder,\n\n395\n00:24:01.704 --> 00:24:07.003\ndo divmod, number 1 Number two and\n\n396\n00:24:07.003 --> 00:24:11.064\nI print the type of div, and\n\n397\n00:24:11.064 --> 00:24:15.670\nI print the type of remainder.\n\n398\n00:24:18.580 --> 00:24:26.306\nThe nodes are actually integers, so\nthey're the embedded data that we have.\n\n399\n00:24:26.306 --> 00:24:28.240\nSo, that's great, right?\n\n400\n00:24:29.320 --> 00:24:31.830\nNow, I will be completely honest,\n\n401\n00:24:31.830 --> 00:24:35.940\nwe actually just implemented\na function that's already in Python.\n\n402\n00:24:35.940 --> 00:24:38.550\n>> So you created a function\nthat is complete unnecessary.\n\n403\n00:24:38.550 --> 00:24:42.120\n>> Yeah, so completely,\nif you want this functionality,\n\n404\n00:24:42.120 --> 00:24:45.390\nyou don't have to write this, divmod\nis actually in the standard library,\n\n405\n00:24:45.390 --> 00:24:49.020\nand we'll probably have more robust\nair checking than we do here.\n\n406\n00:24:49.020 --> 00:24:52.750\nBut it does exactly the same thing, it\nreturns that tuple with the quotient and\n\n407\n00:24:52.750 --> 00:24:55.450\nthe remainder, and\nyou give it to integers.\n\n408\n00:24:55.450 --> 00:24:59.530\n>> I should have known because when you\nstarted divmod, it tried to auto complete\n\n409\n00:24:59.530 --> 00:25:03.430\nit for you, and I assumed it was because\nyou were working with a serial here and\n\n410\n00:25:03.430 --> 00:25:05.480\nit was kinda remembering that.\n\n411\n00:25:05.480 --> 00:25:09.660\nBut now I know why, because it actually\nexist and so the Python has a function.\n\n412\n00:25:09.660 --> 00:25:12.462\n>> Yeah\n>> So, I think it's really good to see\n\n413\n00:25:12.462 --> 00:25:17.902\nthat sometimes these Python functions\nthat we're using, they seem like magic.\n\n414\n00:25:17.902 --> 00:25:21.814\nBut as we've learned more of these things,\nthey're not actually that magical,\n\n415\n00:25:21.814 --> 00:25:25.930\nthey're pretty straightforward and\nthey're just there to be conveniences.\n\n416\n00:25:25.930 --> 00:25:30.110\nBut maybe we can change this divmod and\n\n417\n00:25:30.110 --> 00:25:34.240\ninstead of taking the two numbers\nseparately, what if we give the numbers\n\n418\n00:25:34.240 --> 00:25:39.130\nas a tuple, and then we make\nassumptions behind the scenes, right?\n\n419\n00:25:39.130 --> 00:25:42.950\nIt comes as a tuple as the first\ndivided by the second.\n\n420\n00:25:42.950 --> 00:25:47.060\nSo, I would like to compare those, and\nI think that it'll give us a good idea of\n\n421\n00:25:47.060 --> 00:25:49.820\nhow tuples can be used to pass\naround these chunks of data.\n\n422\n00:25:49.820 --> 00:25:50.650\n>> Yeah, so it'll be interesting.\n\n423\n00:25:50.650 --> 00:25:51.540\nLet's see it.\n\n424\n00:25:51.540 --> 00:25:54.281\n>> So, I'm gonna name this\na little differently, so\n\n425\n00:25:54.281 --> 00:25:56.851\nit doesn't do that weird\nauto complete thing.\n\n426\n00:25:56.851 --> 00:26:01.950\nSo I'm gonna say tuple_div_mod and\n\n427\n00:26:01.950 --> 00:26:08.171\nthis is going to take my pair_tuple,\nright?\n\n428\n00:26:08.171 --> 00:26:16.539\nSo, pair_tuple is going to contain\nthe first and second numbers.\n\n429\n00:26:21.889 --> 00:26:25.360\nOkay, so\nI'm gonna pass this in as a tuple.\n\n430\n00:26:25.360 --> 00:26:28.350\nSo first off,\nI need to make sure pair_tuple is a tuple.\n\n431\n00:26:28.350 --> 00:26:35.940\nIf type of pair_tuple equals,\n\n432\n00:26:37.360 --> 00:26:40.680\nnot typle, that's something else\n>> [LAUGH] Completely different.\n\n433\n00:26:40.680 --> 00:26:41.960\n>> Completely different.\n\n434\n00:26:41.960 --> 00:26:45.440\nThen now, I know that I can\ndo the unpacking that I want.\n\n435\n00:26:45.440 --> 00:26:50.580\nAnd in particular,\nthis is a two things within a tuple.\n\n436\n00:26:50.580 --> 00:26:55.149\nAnd I can say, okay first,\n\n437\n00:26:55.149 --> 00:27:00.318\nsecond equals pair_tuple and\n\n438\n00:27:00.318 --> 00:27:08.874\nthe I can say,\ndiv equals first divided by second.\n\n439\n00:27:08.874 --> 00:27:15.032\nAnd remainder equals first mod second.\n\n440\n00:27:18.177 --> 00:27:23.388\nAnd then return div, comma,\nremainder, else, return None,\n\n441\n00:27:23.388 --> 00:27:28.888\njust so you can say, hey,\nthat's not what's supposed to happen,\n\n442\n00:27:28.888 --> 00:27:32.168\nnot if you even had a print statement, or\n\n443\n00:27:32.168 --> 00:27:37.506\nas I get further into this,\nI could throw errors and break stuff.\n\n444\n00:27:37.506 --> 00:27:43.185\nBut, even without this, if, else, right?\n\n445\n00:27:43.185 --> 00:27:45.560\nWhat's really crazy is,\nI'm gonna do something.\n\n446\n00:27:45.560 --> 00:27:47.951\nI'm gonna say, print.\n\n447\n00:27:50.930 --> 00:27:53.751\nLook here, okay?\n\n448\n00:27:53.751 --> 00:27:57.780\nSo, I'm gonna give this a tuple,\nwe'll get the same output.\n\n449\n00:27:57.780 --> 00:28:02.980\nI'm gonna comment this out just so\nwe can focus on the appropriate output.\n\n450\n00:28:04.240 --> 00:28:07.755\nSo here's my pair.\n\n451\n00:28:07.755 --> 00:28:12.016\nAnd let's go with four and seven.\n\n452\n00:28:12.016 --> 00:28:14.280\nSo there's my paired tuple.\n\n453\n00:28:14.280 --> 00:28:21.870\nAnd then I want div remain\nequal to tuple_div_mod.\n\n454\n00:28:22.870 --> 00:28:24.390\nHand in my pair.\n\n455\n00:28:24.390 --> 00:28:26.200\nAnd I should get that back.\n\n456\n00:28:26.200 --> 00:28:30.300\nBut it's gonna hit this\nreturn statement right here.\n\n457\n00:28:30.300 --> 00:28:32.010\nBut I have a print statement down here.\n\n458\n00:28:33.270 --> 00:28:39.631\nSo, let's see what happens cuz I'm like,\nokay, I always wanna print this output.\n\n459\n00:28:39.631 --> 00:28:43.949\nSo I'm gonna print div and\nprint remainder, and\n\n460\n00:28:43.949 --> 00:28:49.240\nthis is gonna unpack, so\nthese should be integers.\n\n461\n00:28:49.240 --> 00:28:51.966\nAnd then I'm gonna run this.\n\n462\n00:28:51.966 --> 00:28:53.440\nAnd that's kind of odd, right?\n\n463\n00:28:53.440 --> 00:28:58.502\nI think a print div, print remainder,\n\n464\n00:28:58.502 --> 00:29:02.440\nexcept this didn't print.\n\n465\n00:29:02.440 --> 00:29:03.470\n>> Look here.\n\n466\n00:29:03.470 --> 00:29:05.000\n>> Yeah, the look here.\n\n467\n00:29:05.000 --> 00:29:08.070\nI always want just to say, hey,\nlook here, I'm doing something.\n\n468\n00:29:08.070 --> 00:29:09.844\nI wonder why that didn't print.\n\n469\n00:29:13.396 --> 00:29:15.820\n>> Is it because of the return statement?\n\n470\n00:29:16.940 --> 00:29:19.335\n>> Daniel, you always make me happy.\n\n471\n00:29:19.335 --> 00:29:21.090\n>> [LAUGH]\n>> You are a cop.\n\n472\n00:29:21.090 --> 00:29:24.380\nYou're like, I think it's probably,\ncuz you're absolutely correct.\n\n473\n00:29:24.380 --> 00:29:28.400\nAs soon as I hit the return statement\nin a function, the function stops.\n\n474\n00:29:28.400 --> 00:29:29.760\nI get nothing below of it.\n\n475\n00:29:29.760 --> 00:29:31.930\nAnd then actually if we're\nusing a full born IDE,\n\n476\n00:29:31.930 --> 00:29:34.110\nit will flag this as unreachable.\n\n477\n00:29:34.110 --> 00:29:36.640\nIt will actually say, hey,\nyou might wanna think this out,\n\n478\n00:29:36.640 --> 00:29:38.790\ncuz this is never gonna run.\n\n479\n00:29:38.790 --> 00:29:43.740\nBut it's good to know that as soon as you\nhit a return statement within a function,\n\n480\n00:29:43.740 --> 00:29:46.260\nthat function spits out and it stops.\n\n481\n00:29:47.460 --> 00:29:52.780\n>> So we'd have to move that if you wanted\nit to do that, we'd actually put it,\n\n482\n00:29:52.780 --> 00:29:56.290\nwell I guess before or after our return\nstatements, before our return statement.\n\n483\n00:29:56.290 --> 00:29:57.520\n>> Before our return statements,\n\n484\n00:29:57.520 --> 00:30:00.830\nbefore any return statement\nis possible to be reached.\n\n485\n00:30:00.830 --> 00:30:03.060\nSo, little extra on functions but\n\n486\n00:30:03.060 --> 00:30:08.380\nnotice, I've been able to write\neffectively the same function.\n\n487\n00:30:08.380 --> 00:30:12.110\nBut here, this had to take two parameters.\n\n488\n00:30:12.110 --> 00:30:14.271\nHere, this took a pairing,\n\n489\n00:30:14.271 --> 00:30:18.788\na chunk of data that then I unpacked and\ndid something with.\n\n490\n00:30:18.788 --> 00:30:23.118\nAnd really, what I could do is say,\nhey this always take a tuple, but\n\n491\n00:30:23.118 --> 00:30:26.194\nwhat if I gave it a tuple of two,\nthree, or four?\n\n492\n00:30:26.194 --> 00:30:31.020\nAnd then I could say, okay,\nif the tuple is length two, do this.\n\n493\n00:30:31.020 --> 00:30:33.490\nIf it's length three,\ndo a different thing.\n\n494\n00:30:33.490 --> 00:30:35.750\nIf it's length four, do a different thing.\n\n495\n00:30:35.750 --> 00:30:38.850\nSo then,\nI can really generalize those functions.\n\n496\n00:30:38.850 --> 00:30:42.030\nAnd I know that people are always\ngonna give me a tuple,\n\n497\n00:30:42.030 --> 00:30:44.580\nthat I can always unpack\nin very particular ways.\n\n498\n00:30:44.580 --> 00:30:45.360\nVery, very powerful.\n\n499\n00:30:45.360 --> 00:30:46.694\n>> Yeah, that is very, very cool, man.\n\n500\n00:30:46.694 --> 00:30:51.178\nSo obviously, tuples can become\nan extreme convenience factor for\n\n501\n00:30:51.178 --> 00:30:55.984\nus when we have a certain amount of\nvariable data that we wanna work with.\n\n502\n00:30:55.984 --> 00:30:59.988\nAnd if we wanna change that, and it keeps\nus from having to write super lengthy\n\n503\n00:30:59.988 --> 00:31:02.770\namounts of code to make that happen.\n\n504\n00:31:02.770 --> 00:31:04.288\n>> Absolutely.\n\n505\n00:31:04.288 --> 00:31:06.004\nSo, I used tuple unpacking and\n\n506\n00:31:06.004 --> 00:31:09.771\nfunctional returns are kind of my\nmain things that I use tuples for.\n\n507\n00:31:09.771 --> 00:31:12.908\nYou may find a multitude of use for\ntuples as well, but\n\n508\n00:31:12.908 --> 00:31:17.539\nit's good to know that some built in\nfunctions will return a tuple by default.\n\n509\n00:31:17.539 --> 00:31:19.050\nAnd you have to be like, okay,\n\n510\n00:31:19.050 --> 00:31:21.850\nwell why is this not working\nlike I thought I was going to.\n\n511\n00:31:22.890 --> 00:31:28.040\nOr, hey, I can do this weird comma and\nit unpacks these variables.\n\n512\n00:31:28.040 --> 00:31:28.970\nCrazy stuff.\n\n513\n00:31:28.970 --> 00:31:29.590\n>> Yeah.\n\n514\n00:31:29.590 --> 00:31:33.600\n>> Think that'll get us ready to\nutilize these functions appropriately.\n\n515\n00:31:33.600 --> 00:31:34.860\n>> Very cool, Justin.\n\n516\n00:31:34.860 --> 00:31:37.370\nTuples obviously,\nwe need to dive into those.\n\n517\n00:31:37.370 --> 00:31:39.910\nGet a hold of them because as we've seen,\n\n518\n00:31:39.910 --> 00:31:41.960\nthey can be very useful\ninside of our code.\n\n519\n00:31:41.960 --> 00:31:44.450\nYou never know when\na tuple might be just your\n\n520\n00:31:46.390 --> 00:31:50.280\nlife preserver that you need to get that\ncode working exactly how you want and\n\n521\n00:31:50.280 --> 00:31:52.540\nbe a whole lot more efficient,\nand effective.\n\n522\n00:31:52.540 --> 00:31:56.090\nJustin, we thank you for stopping by and\nexplaining tuples to us,\n\n523\n00:31:56.090 --> 00:31:58.850\neven though it's a funny word and\nenjoyable to say.\n\n524\n00:31:58.850 --> 00:32:01.710\nOr more enjoyable to use\nin our Python programs.\n\n525\n00:32:01.710 --> 00:32:04.075\nThat being said, looks like we've\nwrapped up yet another great episode.\n\n526\n00:32:04.075 --> 00:32:07.013\nHopefully you guys have enjoyed it and\ngot something out of it.\n\n527\n00:32:07.013 --> 00:32:08.953\nWe're gonna go ahead and\nsign off for ITPro TV.\n\n528\n00:32:08.953 --> 00:32:10.670\nI've been your host, Daniel Lowry.\n\n529\n00:32:10.670 --> 00:32:12.016\n>> And I'm Justin Denison.\n\n530\n00:32:12.016 --> 00:32:13.248\n>> And we'll see you next time.\n\n531\n00:32:13.248 --> 00:32:19.446\n[SOUND]\n\n",
          "vimeoId": "158203868"
        },
        {
          "description": "In this episode, Daniel and Justin show you how to use Python to manipulate text files. They begin by showing you open files and read the content out to Python. Then they introduce you to the With statement as an easy way to close files once your program is done with them. They also show you how to write to files, which adds useful functions to your programs.",
          "length": "1665",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-10-manipulating_files-030616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-10-manipulating_files-030616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-10-manipulating_files-030616-1-sm.jpg",
          "title": "Manipulating Files",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:07.930\n[MUSIC]\n\n2\n00:00:07.930 --> 00:00:12.151\nAll right, greetings everyone and welcome\nto another great episode of ITProTV.\n\n3\n00:00:12.151 --> 00:00:13.980\nI'm your host Daniel Lowrie and\n\n4\n00:00:13.980 --> 00:00:17.910\nin todays episode we are continuing on\nwith our Python Programming series.\n\n5\n00:00:17.910 --> 00:00:21.150\nHopefully you guys have been enjoying that\nbecause we've got Justin Dennison back\n\n6\n00:00:21.150 --> 00:00:23.390\nin the studio with us together today.\n\n7\n00:00:23.390 --> 00:00:24.560\nJustin, how's it going today, sir?\n\n8\n00:00:24.560 --> 00:00:25.950\n>> I am doing great.\n\n9\n00:00:25.950 --> 00:00:31.240\nWe are coming down to these last few\nintroductory pieces that we need\n\n10\n00:00:31.240 --> 00:00:33.470\nto really get to some interesting things.\n\n11\n00:00:33.470 --> 00:00:37.885\nSo today, we're gonna talk about\nutilizing file input output.\n\n12\n00:00:37.885 --> 00:00:43.250\nSo, what do we do when we have text files,\nCSV files?\n\n13\n00:00:44.370 --> 00:00:46.380\nAnd we get to see how those work.\n\n14\n00:00:46.380 --> 00:00:48.150\n>> So now,\nwe're actually going to jump in,\n\n15\n00:00:48.150 --> 00:00:50.380\nwe've been working mostly, I say mostly,\n\n16\n00:00:50.380 --> 00:00:54.340\nwe've been working almost extensively\ninside of the Python environment.\n\n17\n00:00:54.340 --> 00:00:57.290\nSo, either by writing it\nup in a text editor, and\n\n18\n00:00:57.290 --> 00:01:02.770\nthen running it from a terminal or working\ninside of the Python terminal itself.\n\n19\n00:01:02.770 --> 00:01:05.600\nBut today we're gonna actually start\njumping a little bit outside of that\n\n20\n00:01:05.600 --> 00:01:06.200\nand say you know what,\n\n21\n00:01:06.200 --> 00:01:10.090\nthere's all these wonderful files\nthat reside on my computer.\n\n22\n00:01:10.090 --> 00:01:14.490\nHow can I make Python and my files say,\nyou know what, let's get together and\n\n23\n00:01:14.490 --> 00:01:15.320\nmake some magic happen.\n\n24\n00:01:15.320 --> 00:01:16.810\nHow do we do that, Justin?\n\n25\n00:01:16.810 --> 00:01:20.390\nSo with files we have input and output.\n\n26\n00:01:20.390 --> 00:01:21.640\nRight?\nSo if I want input,\n\n27\n00:01:21.640 --> 00:01:25.920\nI'm gonna read from these files and\nI think that's a good place to start,\n\n28\n00:01:25.920 --> 00:01:28.640\nbecause this was a great way\nto organize information.\n\n29\n00:01:28.640 --> 00:01:32.182\nI can take a spreadsheet,\nexport it to a CSV file.\n\n30\n00:01:32.182 --> 00:01:36.770\nRead it into Python, write a function that\nthen puts it in a dictionary and I go,\n\n31\n00:01:36.770 --> 00:01:41.030\nokay I have this as a Python\ndata structure but it's just,\n\n32\n00:01:41.030 --> 00:01:43.460\nit's real easy to read in from a file and\n\n33\n00:01:43.460 --> 00:01:48.250\nthis is in a sense what's called\nserialization, deserialization.\n\n34\n00:01:48.250 --> 00:01:50.955\nBringing back and forth between this data.\n\n35\n00:01:50.955 --> 00:01:55.300\nThere's a few things we have to watch out\nfor and we do have to talk a little bit.\n\n36\n00:01:55.300 --> 00:01:57.190\nI've tried to stay away from it.\n\n37\n00:01:57.190 --> 00:02:02.920\nWhat an object is, what a programmatic\nobject is behind the scenes.\n\n38\n00:02:02.920 --> 00:02:06.980\nSo I think there's no better time\nthan now to get started with input.\n\n39\n00:02:06.980 --> 00:02:10.450\nSo if we hop over,\nwe are going to look at file inputs.\n\n40\n00:02:10.450 --> 00:02:16.748\nIf we look here, I'm looking at my\npython.txt and this file's .py.\n\n41\n00:02:16.748 --> 00:02:20.840\nIt's already executable, but\nI wonder what's in this python.txt.\n\n42\n00:02:20.840 --> 00:02:22.860\nWell, I just put something in there.\n\n43\n00:02:22.860 --> 00:02:24.835\nThis is actually from\nthe inventor of Python.\n\n44\n00:02:24.835 --> 00:02:28.520\nIt's great little added extra there.\n\n45\n00:02:28.520 --> 00:02:31.570\nPython is an experiment in how\nmuch freedom programmers need.\n\n46\n00:02:31.570 --> 00:02:33.550\nToo much freedom and\nnobody can read another's code.\n\n47\n00:02:33.550 --> 00:02:35.770\nToo little and\nexpressiveness is endangered.\n\n48\n00:02:35.770 --> 00:02:38.820\nSo that was kind of the driving factor for\nMr.\n\n49\n00:02:38.820 --> 00:02:44.590\nVan Rossum when he was creating Python,\nbut I have this in a text file.\n\n50\n00:02:44.590 --> 00:02:50.470\nThere's a couple of things we need to\nkeep in mind when I read in a file.\n\n51\n00:02:51.490 --> 00:02:54.850\nI need to notice right here this\nlooks like I have a line breaks.\n\n52\n00:02:54.850 --> 00:02:57.080\nSo we've talked about nano\nin a previous episode.\n\n53\n00:02:57.080 --> 00:03:00.685\nThat's represented by this\nbackslash in character.\n\n54\n00:03:00.685 --> 00:03:05.765\nMost typically, I think there's\nanother one in Windows-based systems.\n\n55\n00:03:05.765 --> 00:03:07.525\nDo you remember what that one is?\n\n56\n00:03:07.525 --> 00:03:08.745\n>> No, I can't recall.\n\n57\n00:03:08.745 --> 00:03:10.585\n>> Sometimes you have to be careful.\n\n58\n00:03:10.585 --> 00:03:11.750\nIt'll screen match you.\n\n59\n00:03:11.750 --> 00:03:15.685\nYou have to hope on Stack Overflow cuz\nthis new line character can be represented\n\n60\n00:03:15.685 --> 00:03:18.245\nother than backslash n.\n\n61\n00:03:18.245 --> 00:03:23.520\nAnd then we also have spaces,\nthere may be a tab here or there.\n\n62\n00:03:23.520 --> 00:03:27.860\nBut if we jump into the Python shell,\nwe're gonna start there.\n\n63\n00:03:27.860 --> 00:03:33.460\nCome back to, files.py and\nactually do some manipulation here.\n\n64\n00:03:33.460 --> 00:03:38.560\nBut the shell is always a great place\nto do a little experimentation.\n\n65\n00:03:38.560 --> 00:03:42.010\nSo, I'm gonna say f and\nthis is a common convention.\n\n66\n00:03:43.110 --> 00:03:45.620\nF is representative of the file object.\n\n67\n00:03:46.900 --> 00:03:53.320\nSo file objects are like this programmatic\nabstraction of what a file is.\n\n68\n00:03:53.320 --> 00:03:55.050\nIt has information within it.\n\n69\n00:03:55.050 --> 00:03:56.090\nIt has a type.\n\n70\n00:03:56.090 --> 00:03:58.390\nIn this instance it's a text file.\n\n71\n00:03:58.390 --> 00:04:00.720\nAnd so we can open and close a file.\n\n72\n00:04:00.720 --> 00:04:01.930\nWe can save a file.\n\n73\n00:04:01.930 --> 00:04:04.500\nWe can delete a file, so\n\n74\n00:04:04.500 --> 00:04:09.590\nwe have these general constructions\nof how a file behaves.\n\n75\n00:04:09.590 --> 00:04:13.370\nThis is probably our first\nintroduction officially to objects.\n\n76\n00:04:13.370 --> 00:04:15.400\nBut you've been using objects all along.\n\n77\n00:04:15.400 --> 00:04:17.390\nWe've been using objects all along.\n\n78\n00:04:17.390 --> 00:04:19.860\nEverything in Python is\na programmatic object.\n\n79\n00:04:21.130 --> 00:04:26.440\nSo if I want to open this python.txt,\nI'm already in that directory.\n\n80\n00:04:26.440 --> 00:04:30.160\nSo wherever I launch the Python shell,\nI'm in that directory.\n\n81\n00:04:31.280 --> 00:04:36.460\nSo I can say, in quotes,\nI want to open python.txt, quotes.\n\n82\n00:04:36.460 --> 00:04:40.900\nAnd when I open this there's a couple\nof different modes that I can have.\n\n83\n00:04:40.900 --> 00:04:44.110\nI can have read and write.\n\n84\n00:04:44.110 --> 00:04:46.260\nAnd then I can tweak that read and\nwrite for\n\n85\n00:04:46.260 --> 00:04:50.190\nhey, I wanna be able to read and write to\nthis file so I can manipulate this file.\n\n86\n00:04:50.190 --> 00:04:53.210\nI don't wanna mess with this,\nI just wanna read in the data.\n\n87\n00:04:53.210 --> 00:04:59.220\nAnd then not worry about\nchanging the data.\n\n88\n00:04:59.220 --> 00:05:02.780\nSo f is now a file object.\n\n89\n00:05:02.780 --> 00:05:05.190\nSo we'll see what this is, is a type file.\n\n90\n00:05:05.190 --> 00:05:08.360\nSo this is just like a tuple or\na dictionary,\n\n91\n00:05:08.360 --> 00:05:11.560\nor anything like that, it's just a file.\n\n92\n00:05:11.560 --> 00:05:15.639\nBut there's this other method or\nfunction that we've used that helps us,\n\n93\n00:05:15.639 --> 00:05:19.198\nokay I don't really want to go on\nthe internet and try to peruse and\n\n94\n00:05:19.198 --> 00:05:21.094\nfigure out how these things work.\n\n95\n00:05:21.094 --> 00:05:24.364\nIf I use the dir and\ngive it an object it'll say hey,\n\n96\n00:05:24.364 --> 00:05:26.430\nhere are the things you can use.\n\n97\n00:05:27.590 --> 00:05:31.410\nSome things for me if I'm reading in,\nI'm like there's a read,\n\n98\n00:05:31.410 --> 00:05:35.530\nthere's a readline, readlines, right.\n\n99\n00:05:35.530 --> 00:05:39.570\nSome of these other things I'm like\nI don't know what that does, but I\n\n100\n00:05:39.570 --> 00:05:42.830\nthink it's good just to see the difference\nbetween these different read types.\n\n101\n00:05:44.090 --> 00:05:47.830\nSo I have read, readline and\ncompare how those work and\n\n102\n00:05:47.830 --> 00:05:51.280\ncompare to what the file looks like to us.\n\n103\n00:05:51.280 --> 00:05:57.580\nSo if I do f.read,\nI actually get the entire\n\n104\n00:05:57.580 --> 00:06:02.630\ncontents of the file, but you'll notice,\nDaniel, what do you notice about this?\n\n105\n00:06:02.630 --> 00:06:05.590\n>> Yeah, the first thing that jumps right\nout at me is the fact that I'm seeing\n\n106\n00:06:05.590 --> 00:06:08.670\nthe new line character\n>> Whereas then if I just\n\n107\n00:06:08.670 --> 00:06:11.790\nused cat to open the file and see what\nwas inside of it, I don't see that.\n\n108\n00:06:11.790 --> 00:06:14.250\nIt just shows up as no space or nothing.\n\n109\n00:06:14.250 --> 00:06:16.430\nIt's just a return character.\n\n110\n00:06:16.430 --> 00:06:19.580\n>> Right, so\nthese are interpreted very literally.\n\n111\n00:06:19.580 --> 00:06:25.230\nAnd it says hey, here's the content\nall the way including this slash n,\n\n112\n00:06:25.230 --> 00:06:29.520\nwhich would represent the new\nline character as you said.\n\n113\n00:06:29.520 --> 00:06:35.026\nBut now, let's compare that to readline.\n\n114\n00:06:36.403 --> 00:06:40.250\nSo readline,\nI wonder where that comes from?\n\n115\n00:06:42.410 --> 00:06:43.827\nI have no idea.\n\n116\n00:06:43.827 --> 00:06:45.840\nWhat's an f?\n\n117\n00:06:47.000 --> 00:06:48.420\nSo if I go back to read.\n\n118\n00:06:51.280 --> 00:06:53.790\nAnd this is where people\ncan get in trouble.\n\n119\n00:06:53.790 --> 00:06:59.312\nAs soon as I redid that information,\nit's like I had a really good Slushie,\n\n120\n00:06:59.312 --> 00:07:05.114\nand I was like [SOUND], or a milkshake,\nand when I get to the bottom, it's over.\n\n121\n00:07:05.114 --> 00:07:10.250\nIt kind of outputs that information from\nthat file object, and it empties it out.\n\n122\n00:07:10.250 --> 00:07:15.790\nI haven't changed the file, but the object\nis kind of been slurped up, if you will.\n\n123\n00:07:15.790 --> 00:07:20.000\nSo when I first read,\nI have to do this in a way that\n\n124\n00:07:21.740 --> 00:07:23.890\nI save that information in a variable.\n\n125\n00:07:23.890 --> 00:07:27.320\nSo let's just flip back through here,\nreopen this file, and\n\n126\n00:07:27.320 --> 00:07:31.220\nsee if we can get, okay, so if I reopen.\n\n127\n00:07:31.220 --> 00:07:37.525\nGreat, but now if I read line I can get,\nokay, how is this working?\n\n128\n00:07:37.525 --> 00:07:40.960\nReadline.\n\n129\n00:07:40.960 --> 00:07:45.835\nWhen I actually, when I readline I go all\nthe way to this new line character and\n\n130\n00:07:45.835 --> 00:07:51.174\nas soon as I encounter that, that's where\nthe slurping, the intake kind of stops.\n\n131\n00:07:51.174 --> 00:07:56.262\nSo if I readline again,\nand I readline again, and\n\n132\n00:07:56.262 --> 00:08:01.968\nI readline again,\nI will get up to new line characters.\n\n133\n00:08:01.968 --> 00:08:04.630\nSo I'll get little chunks out.\n\n134\n00:08:04.630 --> 00:08:06.860\nNow, typically what I do\nif the file's not huge,\n\n135\n00:08:06.860 --> 00:08:12.510\nand by huge I mean gigabytes,\ncuz when I open a file object like this,\n\n136\n00:08:12.510 --> 00:08:15.530\nthis object's going to be\nroughly as large as the file.\n\n137\n00:08:15.530 --> 00:08:18.410\nMaybe not quite as large\ndepending on how you handle it.\n\n138\n00:08:18.410 --> 00:08:20.369\nIf I read all of that\nin the memory at once,\n\n139\n00:08:22.150 --> 00:08:26.660\nyou may get to where your computer's like,\nno, I need a nap.\n\n140\n00:08:26.660 --> 00:08:32.090\nSo we're now at the end of our file.\n\n141\n00:08:32.090 --> 00:08:34.790\nI wonder if I open that up, but\n\n142\n00:08:34.790 --> 00:08:39.874\nI don't want to reopen files all the time,\nso if I seek.\n\n143\n00:08:43.016 --> 00:08:45.370\nI'm gonna actually seek back\nto the end of the file.\n\n144\n00:08:45.370 --> 00:08:48.030\nSo this behaves kinda like a stream,\n\n145\n00:08:48.030 --> 00:08:50.250\ngo along through the file\nuntil you come to the end.\n\n146\n00:08:50.250 --> 00:08:52.160\nAnd then I can seek back,\n\n147\n00:08:52.160 --> 00:08:56.790\nto what's effectively the zero\nposition within the file.\n\n148\n00:08:57.840 --> 00:09:04.410\nSo these behave very similarly to list,\nstrings, and when we read in,\n\n149\n00:09:04.410 --> 00:09:08.520\nwe're actually getting string\nrepresentation of what's in the file back.\n\n150\n00:09:10.810 --> 00:09:13.520\nOne final thing about files though,\nI've opened them.\n\n151\n00:09:14.850 --> 00:09:17.940\nBut I wonder, when you open a door,\n\n152\n00:09:17.940 --> 00:09:20.570\nwhat do you typically do\nafter you open the door?\n\n153\n00:09:20.570 --> 00:09:23.480\n>> Well, probably if I've opened it,\nI want to walk through it.\n\n154\n00:09:23.480 --> 00:09:27.320\nAnd then if I've done that,\nI'll also usually close the door.\n\n155\n00:09:27.320 --> 00:09:32.800\n>> Hm, so, let's go back and look at\nall the functions that are on the file.\n\n156\n00:09:32.800 --> 00:09:35.380\nHey, there's this close function.\n\n157\n00:09:37.240 --> 00:09:39.390\nHm, when you are done with a file, and\n\n158\n00:09:39.390 --> 00:09:44.090\nthis is not as much of an issue with\nreading in, information from a file.\n\n159\n00:09:44.090 --> 00:09:47.450\nBut when you're writing to a file,\nif you don't close,\n\n160\n00:09:47.450 --> 00:09:51.120\nthen things kinda just don't\nhappen right at the very end.\n\n161\n00:09:51.120 --> 00:09:53.010\nI actually won't write to a file.\n\n162\n00:09:54.570 --> 00:09:59.140\nSo, I need to close this file,\nit puts it up for garbage collection.\n\n163\n00:09:59.140 --> 00:10:05.810\nIf I do type of f,\nsee how it says type is file?\n\n164\n00:10:05.810 --> 00:10:11.580\nBut up here it told me the type was\nopen file, so I've now closed it.\n\n165\n00:10:11.580 --> 00:10:14.400\nThis is good practice, but\nthere's a better way to do that, and\n\n166\n00:10:14.400 --> 00:10:15.490\nwe'll see that in just a moment.\n\n167\n00:10:17.070 --> 00:10:18.840\nSo we've read lines.\n\n168\n00:10:18.840 --> 00:10:24.605\nI wanted this new lines thing,\nlet's go ahead, and reopen that file.\n\n169\n00:10:24.605 --> 00:10:27.565\nSo newlines.\n\n170\n00:10:27.565 --> 00:10:31.115\nNoneType, okay.\n\n171\n00:10:31.115 --> 00:10:33.480\nNewlines.\n\n172\n00:10:33.480 --> 00:10:37.860\nSo this is an instance where,\nthis dir is kinda breaking down on me.\n\n173\n00:10:37.860 --> 00:10:40.100\nAnd I don't know how to use this.\n\n174\n00:10:40.100 --> 00:10:41.980\nI'm having trouble, where do I go?\n\n175\n00:10:41.980 --> 00:10:45.980\nWhat would be your first instinct Daniel?\n\n176\n00:10:45.980 --> 00:10:48.380\nIf I saw something like this,\nwhat would you do?\n\n177\n00:10:48.380 --> 00:10:49.790\n>> Probably go to stack overflow.\n\n178\n00:10:49.790 --> 00:10:50.590\n>> Stack overflow.\n\n179\n00:10:50.590 --> 00:10:52.130\n>> I'm hitting the web.\n\n180\n00:10:52.130 --> 00:10:53.320\n>> Hitting the web.\n\n181\n00:10:53.320 --> 00:10:57.910\nSo, I think it's good to see\nsome of this documentation.\n\n182\n00:10:57.910 --> 00:10:59.900\nSo I'm gonna go to pythondocsorg.\n\n183\n00:11:01.240 --> 00:11:07.257\nMaybe I'm going nowhere,\ndocspython.com or actually .org.\n\n184\n00:11:10.145 --> 00:11:16.220\nAnd you'll notice, this comes up with,\nas I said three is really the push.\n\n185\n00:11:16.220 --> 00:11:23.040\nI want to know about 2.7, and\nthen I can do a quick search for\n\n186\n00:11:24.320 --> 00:11:28.260\nfile, and that's kind of hard.\n\n187\n00:11:30.000 --> 00:11:33.080\nI mean this is, but that kind of looks\nlike the file that we're use to right?\n\n188\n00:11:34.090 --> 00:11:37.830\nSo describe file objects\ncan be used with open.\n\n189\n00:11:39.630 --> 00:11:41.490\nHm, this is difficult.\n\n190\n00:11:41.490 --> 00:11:46.360\nSo, I go to docs first, and\nthen if I trouble with docs.\n\n191\n00:11:46.360 --> 00:11:52.255\nAs Daniel said, I'll just,\nhey, file new lines method\n\n192\n00:11:52.255 --> 00:11:58.900\nPython 2.7, built in functions,\nit takes you back here,\n\n193\n00:11:58.900 --> 00:12:03.490\nhere's another one, core tools of strings,\nthese are all by Python.\n\n194\n00:12:05.390 --> 00:12:11.850\nHm, stack overflow, stack overflow, but\nthese don't really seem to help me.\n\n195\n00:12:12.910 --> 00:12:17.460\nSo, here's a right lines.\n\n196\n00:12:20.470 --> 00:12:25.400\nThese are all great things to\nhave access to, but, right now,\n\n197\n00:12:25.400 --> 00:12:27.000\nit doesn't seem like I can find anything.\n\n198\n00:12:27.000 --> 00:12:30.090\n>> Yeah, and I've noticed that\nthis is one of the major problems,\n\n199\n00:12:30.090 --> 00:12:35.600\ntrying to figure out exactly, where can\nI find the information that I need for\n\n200\n00:12:35.600 --> 00:12:39.770\nthe problem that I'm having can definitely\nbe a bit of a challenge, right?\n\n201\n00:12:39.770 --> 00:12:44.370\nBecause usually the situation you're in,\nis at least, in some way, or shape, or\n\n202\n00:12:44.370 --> 00:12:45.440\nform, unique.\n\n203\n00:12:45.440 --> 00:12:47.880\nSo I have to find the common thread,\n\n204\n00:12:47.880 --> 00:12:50.750\nthat's gonna get me to\nthe answer that I'm looking for.\n\n205\n00:12:50.750 --> 00:12:55.520\nIs Python's documentation system,\nis that really the best place to go?\n\n206\n00:12:55.520 --> 00:12:59.880\nOr is there a better documentation system,\nthat's gonna help us out?\n\n207\n00:12:59.880 --> 00:13:03.260\n>> So, from my standpoint\nthe documentation is a great start.\n\n208\n00:13:03.260 --> 00:13:08.000\nSometimes I don't find it\nas quite intuitive, for\n\n209\n00:13:08.000 --> 00:13:10.300\nsome things, just like we saw with files,\nit's like, hey,\n\n210\n00:13:10.300 --> 00:13:12.450\nthis is what you get when\nyou use the open function.\n\n211\n00:13:12.450 --> 00:13:13.940\nYou're like that's great.\n\n212\n00:13:13.940 --> 00:13:15.630\nWhere can I find more information?\n\n213\n00:13:16.920 --> 00:13:20.560\nSometimes you really have\nto dig deep within those.\n\n214\n00:13:20.560 --> 00:13:26.390\nSo within the Python\ndocumentation I use search.\n\n215\n00:13:26.390 --> 00:13:31.190\nOther times I wanna go to\nLanguage Reference, and go through those,\n\n216\n00:13:31.190 --> 00:13:34.730\nsee if I can find files, file input.\n\n217\n00:13:36.750 --> 00:13:39.840\nOkay, that doesn't really help me,\nit's difficult.\n\n218\n00:13:41.740 --> 00:13:46.684\nTutorial is great, so\nkind of like self documenting, like here\n\n219\n00:13:46.684 --> 00:13:51.010\nare the basic things, some of the things\nthat we went through, not all of them.\n\n220\n00:13:51.010 --> 00:13:56.240\nBut I wanna look for that open function,\nand I can't find it there.\n\n221\n00:13:56.240 --> 00:13:59.930\nSo, when I can't find this\nwithin the Python documentation,\n\n222\n00:13:59.930 --> 00:14:02.910\nit will take me a little bit to\nsearch this out on the internet.\n\n223\n00:14:02.910 --> 00:14:06.910\nSo don't worry, there's typically\nan answer, but what do we do?\n\n224\n00:14:06.910 --> 00:14:09.120\nWhat do we do?\n\n225\n00:14:09.120 --> 00:14:11.100\n>> That's a great question.\n\n226\n00:14:11.100 --> 00:14:15.630\n>> So this new lines portion,\nI don't see it helping me.\n\n227\n00:14:18.270 --> 00:14:19.610\nI'm wasting time.\n\n228\n00:14:19.610 --> 00:14:22.060\nI have tools at my disposal,\n\n229\n00:14:22.060 --> 00:14:26.140\nthat I know how they work,\nI typically go with those, use those,\n\n230\n00:14:26.140 --> 00:14:31.030\nuntil I'm like, yeah, there's this one\ninstance where this is really helpful.\n\n231\n00:14:31.030 --> 00:14:34.810\nSo, don't worry if you're like I\nwonder what the truncate does?\n\n232\n00:14:34.810 --> 00:14:39.220\nOr what the tail does or\nwhat the new lines does?\n\n233\n00:14:40.930 --> 00:14:42.290\nIs it helping you?\n\n234\n00:14:42.290 --> 00:14:45.870\nThen it may not be necessary for\nwhat you need to get done at this point.\n\n235\n00:14:45.870 --> 00:14:52.395\nSo there's a lot within Python, that\nyou're just not gonna use it currently.\n\n236\n00:14:52.395 --> 00:14:54.590\nMaybe at some point, but not right now.\n\n237\n00:14:54.590 --> 00:14:57.513\n>> Right, but\nas a core foundation, it probably\n\n238\n00:14:57.513 --> 00:15:02.000\njust will be on the scope of what you're\ngonna need typically, at that level.\n\n239\n00:15:02.000 --> 00:15:06.530\n>> Exactly, so when you use that dir,\nI just wanted to highlight that you'll\n\n240\n00:15:06.530 --> 00:15:09.289\ncome across things, that you're like,\nthat probably makes sense,\n\n241\n00:15:09.289 --> 00:15:13.200\neven though Python's very intuitive,\nit's not always intuitive.\n\n242\n00:15:13.200 --> 00:15:15.560\nSo I've opened this file.\n\n243\n00:15:15.560 --> 00:15:16.540\nI've closed the file.\n\n244\n00:15:16.540 --> 00:15:18.090\nI've read in the file.\n\n245\n00:15:18.090 --> 00:15:25.170\nI can't really figure out object\nis not callable, okay, cool.\n\n246\n00:15:25.170 --> 00:15:27.940\nSo what if we wanted to write a file?\n\n247\n00:15:27.940 --> 00:15:29.640\nI have a bunch of data somewhere.\n\n248\n00:15:29.640 --> 00:15:31.560\nAnd I just wanna write to a file.\n\n249\n00:15:31.560 --> 00:15:38.340\nSo I can say f_writer = open and\nlet's just say ('sample.txt' and\n\n250\n00:15:38.340 --> 00:15:42.640\nthis is gonna save in\nthe current directory.\n\n251\n00:15:43.640 --> 00:15:49.586\nAlso I need to provide a file extension,\ncuz if I don't then it's just yeah,\n\n252\n00:15:49.586 --> 00:15:52.981\nit's sample, it's maybe text whatever.\n\n253\n00:15:52.981 --> 00:15:57.989\nAnd I'm gonna make it writeable\nwith this w flag right here So\n\n254\n00:15:57.989 --> 00:16:02.820\nf_writer is a sample\ntext that is writeable.\n\n255\n00:16:02.820 --> 00:16:06.249\nAnd then I'm gonna say f_writer.write.\n\n256\n00:16:06.249 --> 00:16:08.950\nSo that's a property on a file object.\n\n257\n00:16:08.950 --> 00:16:13.258\nAnd say, here is some new sample text.\n\n258\n00:16:15.656 --> 00:16:17.530\nF_write is not defined.\n\n259\n00:16:17.530 --> 00:16:25.090\nThat's because I misspelled f.write,\n\n260\n00:16:25.090 --> 00:16:30.283\nand then f_write.close.\n\n261\n00:16:30.283 --> 00:16:33.490\nf_writer.\n\n262\n00:16:33.490 --> 00:16:34.819\nDaniel I am having trouble right now,\nfor some reason.\n\n263\n00:16:34.819 --> 00:16:37.120\n>> [LAUGH]\n>> I don't know.\n\n264\n00:16:37.120 --> 00:16:39.166\n>> You just want to call it f_write so\nbad you can taste it, man.\n\n265\n00:16:39.166 --> 00:16:39.900\n>> I do, I do.\n\n266\n00:16:39.900 --> 00:16:42.091\nIt's kind of like when you\nwant to call me Jason.\n\n267\n00:16:42.091 --> 00:16:43.490\n>> I know, it happens.\n\n268\n00:16:43.490 --> 00:16:43.990\nIt does.\n\n269\n00:16:43.990 --> 00:16:46.890\nSomething inside the human brain\nthat will just not let something\n\n270\n00:16:46.890 --> 00:16:47.850\ngo from time to time.\n\n271\n00:16:47.850 --> 00:16:48.660\n>> I know, I know.\n\n272\n00:16:48.660 --> 00:16:49.930\nBut it happens.\n\n273\n00:16:49.930 --> 00:16:52.870\nAt least I know, I'm like,\nyeah, f_write is not defined,\n\n274\n00:16:52.870 --> 00:16:55.080\nthat's because I didn't\ndefine that appropriately.\n\n275\n00:16:55.080 --> 00:16:58.135\n>> You should create a function\nthat says hey guy, stop doing that.\n\n276\n00:16:58.135 --> 00:16:59.162\n>> [LAUGH]\n>> Yeah, yeah.\n\n277\n00:16:59.162 --> 00:17:02.315\nWhen you see this error, just pop-up\na dialogue guy, and go stop it, stop it.\n\n278\n00:17:02.315 --> 00:17:04.569\n>> [LAUGH]\n>> So if I look,\n\n279\n00:17:04.569 --> 00:17:09.450\nthis sample text is actually available\nto me, and here's some new sample text.\n\n280\n00:17:09.450 --> 00:17:15.650\nSo when I'm writing these though, if I\ndon't intentionally put new lines in here\n\n281\n00:17:15.650 --> 00:17:20.640\nit just writes it without any new lines,\nwhich in a text editor like this, or\n\n282\n00:17:20.640 --> 00:17:26.350\nplain text, is horrible to read,\nvery difficult to read and get use of.\n\n283\n00:17:28.000 --> 00:17:30.010\nI've now read and written a file.\n\n284\n00:17:31.140 --> 00:17:34.320\nBut I always have to close,\nit seems like Python may address that,\n\n285\n00:17:34.320 --> 00:17:38.060\nbecause that seems like something\nthat I would forget to do.\n\n286\n00:17:38.060 --> 00:17:39.580\nDo you think you might forget to do that?\n\n287\n00:17:39.580 --> 00:17:41.290\n>> I guarantee you,\nI will forget to do that.\n\n288\n00:17:41.290 --> 00:17:45.850\n>> And I'm not saying this has happened,\nbut it's very likely that you're like,\n\n289\n00:17:45.850 --> 00:17:50.420\nI got all this information, I wanna\nwrite it out to a file, And alright,\n\n290\n00:17:50.420 --> 00:17:54.780\nI created my open file I've\nwritten it to that file and\n\n291\n00:17:54.780 --> 00:18:00.750\nmy Python script stops so\nI, I forgot to close it.\n\n292\n00:18:00.750 --> 00:18:03.798\nAnd maybe this is a process that took a\ncouple of hours because of just the amount\n\n293\n00:18:03.798 --> 00:18:05.720\nof data that you had to go through.\n\n294\n00:18:05.720 --> 00:18:10.260\nIt's very very debilitating,\ndeflating, you're like.\n\n295\n00:18:11.430 --> 00:18:15.740\nThere seems to be a better way and\nPython has provided that for us.\n\n296\n00:18:15.740 --> 00:18:18.530\nSo if I just wanna quickly read in a file,\nthis is a great way.\n\n297\n00:18:18.530 --> 00:18:20.580\nOpen it, close it, cool.\n\n298\n00:18:20.580 --> 00:18:25.300\nBut if I want to not worry about that and\nthen have some error\n\n299\n00:18:25.300 --> 00:18:30.260\nhandling ways to make sure things\noccur in just the right manner,\n\n300\n00:18:30.260 --> 00:18:36.170\nwithout having the close there, there\nis something called context managers.\n\n301\n00:18:37.210 --> 00:18:43.492\nIf I go over into my files, .Python here,\n\n302\n00:18:43.492 --> 00:18:49.949\ngot to add my shebang, local bin/python,\n\n303\n00:18:49.949 --> 00:18:54.671\nand then if _name == _main.\n\n304\n00:18:57.144 --> 00:19:00.550\nAll right, I have everything set up,\nI'm good to go, it's already executable.\n\n305\n00:19:01.820 --> 00:19:06.860\nThere's this new keyword called with, and\nwhat with allows you to do is open a file,\n\n306\n00:19:06.860 --> 00:19:11.180\nand then create, effectively,\nan alias so with open,\n\n307\n00:19:12.880 --> 00:19:16.788\nand I'm just gonna go\nwith this python.txt.\n\n308\n00:19:16.788 --> 00:19:23.270\nI'm gonna read, and\nI'm gonna with open as f.\n\n309\n00:19:23.270 --> 00:19:28.580\nSo now it's kinda like that f = open,\nbut since I'm in this with block,\n\n310\n00:19:28.580 --> 00:19:32.340\nwhen this with block closes\nit'll close that file for\n\n311\n00:19:32.340 --> 00:19:37.250\nme, and I will never have to remember\nto physically close that file.\n\n312\n00:19:37.250 --> 00:19:42.380\nAlso it allows you to pass this f around\nin the context of this with block.\n\n313\n00:19:42.380 --> 00:19:45.830\nSo I'm indented within this with block\nbecause everything that I do with this\n\n314\n00:19:45.830 --> 00:19:51.120\nfile is going to be in\nthe context of this with chunk.\n\n315\n00:19:51.120 --> 00:19:54.170\nSo what do I want to do?\n\n316\n00:19:54.170 --> 00:20:01.310\nI was like, okay, so\nthe text = to f.read and\n\n317\n00:20:01.310 --> 00:20:05.590\nlet's just print then to remind\nourselves what's in there.\n\n318\n00:20:07.300 --> 00:20:16.330\nSo I'm gonna kill the shell and\nand there it is.\n\n319\n00:20:16.330 --> 00:20:21.120\nAnd notice I don't get that weird\noutput that I had in the shell\n\n320\n00:20:21.120 --> 00:20:24.710\nbecause this is no longer being very\nliteral from the shell perspective.\n\n321\n00:20:24.710 --> 00:20:30.000\nThis is just printing out a string which\nwill break on those new line characters.\n\n322\n00:20:30.000 --> 00:20:34.270\nSo I have a string but let's say I wanted\nto break on those new line characters so\n\n323\n00:20:34.270 --> 00:20:37.110\nI had little chunks to, I don't know,\n\n324\n00:20:37.110 --> 00:20:41.038\nthere's something that I would want to do,\none right after the other.\n\n325\n00:20:41.038 --> 00:20:44.280\nHaving trouble, Daniel.\n\n326\n00:20:46.530 --> 00:20:48.850\nIteration, iteration.\n\n327\n00:20:48.850 --> 00:20:54.294\nSo I want to break on this,\nso I'm going to say the text\n\n328\n00:20:54.294 --> 00:21:01.540\nlist = text.split, but\nI'm going to split on a new line.\n\n329\n00:21:04.250 --> 00:21:08.275\nAnd then for element el,\n\n330\n00:21:08.275 --> 00:21:13.450\nshort for element in text list,\n\n331\n00:21:13.450 --> 00:21:18.049\nI just want to print out el and\n\n332\n00:21:18.049 --> 00:21:27.520\nthen print out little divisions, right.\n\n333\n00:21:27.520 --> 00:21:31.010\nSo okay, let's see how that works out.\n\n334\n00:21:31.010 --> 00:21:33.780\nSo now after every new line\ncharacter I have little divisions.\n\n335\n00:21:35.430 --> 00:21:40.504\nOkay, well, I've done this in\nthe context of this manager,\n\n336\n00:21:40.504 --> 00:21:45.286\nbut let's say that I wanna\nmodify this python.txt file,\n\n337\n00:21:45.286 --> 00:21:51.977\ncreate a new one, And I wanna do\nthat after I've opened this file,\n\n338\n00:21:51.977 --> 00:21:56.180\nread in its contents, split it up,\nand I have accessed the here.\n\n339\n00:21:56.180 --> 00:22:00.400\nWhen I come out, this file closes,\nbut I still have access to text list.\n\n340\n00:22:00.400 --> 00:22:05.800\nSo for text list, for element in text\nlist, I'm gonna do these things.\n\n341\n00:22:05.800 --> 00:22:11.052\nBut I can open another with block and\n\n342\n00:22:11.052 --> 00:22:15.081\nsay new_python.text and\n\n343\n00:22:15.081 --> 00:22:19.808\nmake it writeable and as fw, and\n\n344\n00:22:19.808 --> 00:22:24.535\nnow here I'm going to indent and\n\n345\n00:22:24.535 --> 00:22:31.016\nchange these prints to fw.write(el) and\n\n346\n00:22:31.016 --> 00:22:36.094\nfw.write this string of just some\n\n347\n00:22:36.094 --> 00:22:42.680\nlittle characters to break up the lines.\n\n348\n00:22:42.680 --> 00:22:44.800\nSo, let's see how that works.\n\n349\n00:22:44.800 --> 00:22:45.640\nI've opened a file.\n\n350\n00:22:45.640 --> 00:22:47.210\nI've read in the contents.\n\n351\n00:22:47.210 --> 00:22:49.988\nAfter I've done that,\nI want to open another file and\n\n352\n00:22:49.988 --> 00:22:53.526\nthen go through those contents and\nwrite some changes to that file.\n\n353\n00:22:58.702 --> 00:23:00.290\n>> Apparently,\nwe made a mistake somewhere.\n\n354\n00:23:02.280 --> 00:23:03.177\n>> And, but we didn't.\n\n355\n00:23:03.177 --> 00:23:03.887\n>> But we didn't.\n\n356\n00:23:03.887 --> 00:23:04.814\nBecause it created a new file.\n\n357\n00:23:04.814 --> 00:23:07.110\n>> It created a new file.\n\n358\n00:23:07.110 --> 00:23:07.930\n>> That's right.\n\n359\n00:23:07.930 --> 00:23:09.050\n>> Yeah, but what happened?\n\n360\n00:23:09.050 --> 00:23:10.800\nWe got something unexpected.\n\n361\n00:23:10.800 --> 00:23:12.820\n>> We did.\nWe didn't get any separation for\n\n362\n00:23:12.820 --> 00:23:14.080\nthat new line stuff.\n\n363\n00:23:14.080 --> 00:23:15.900\nIt didn't create a return.\n\n364\n00:23:15.900 --> 00:23:22.840\n>> Right, so hm, I wonder, maybe we can,\nokay, I've seen something.\n\n365\n00:23:22.840 --> 00:23:25.880\nThis is a great example\nof a runtime error.\n\n366\n00:23:25.880 --> 00:23:27.070\nI'm gonna go fix that real quick.\n\n367\n00:23:28.340 --> 00:23:32.690\nSo, here I want to write that, fw.write.\n\n368\n00:23:32.690 --> 00:23:36.510\nAnd I'm just gonna have it\nwrite a new line everytime.\n\n369\n00:23:37.740 --> 00:23:39.590\nBecause I've split on new lines,\n\n370\n00:23:39.590 --> 00:23:42.509\nI know after every one of those elements,\nI need to add a new line back.\n\n371\n00:23:43.980 --> 00:23:49.460\nGo back and run, and\nlet's see, there we go, right?\n\n372\n00:23:49.460 --> 00:23:50.165\n>> Much better.\n\n373\n00:23:50.165 --> 00:23:54.704\n>> Much better, still getting some,\nI need new lines here, so\n\n374\n00:23:54.704 --> 00:23:57.113\nI'm gonna one more time fix it.\n\n375\n00:23:58.601 --> 00:24:02.262\nFw.write, there's an extra j there Daniel.\n\n376\n00:24:02.262 --> 00:24:04.200\n>> The j is silent usually.\n\n377\n00:24:04.200 --> 00:24:07.640\n>> Yeah,\nthose silent js get me every time.\n\n378\n00:24:09.390 --> 00:24:13.030\nGo back and run it one more time and\nthere we go.\n\n379\n00:24:13.030 --> 00:24:17.609\nSo now I've changed the formatting\nof that file, which is great.\n\n380\n00:24:17.609 --> 00:24:21.367\nAnd actually in the context of\nother files, I could go okay,\n\n381\n00:24:21.367 --> 00:24:24.534\nI want all the errors to be\nput in a separate file, so\n\n382\n00:24:24.534 --> 00:24:27.226\nI can look at all the errors,\nall the info.\n\n383\n00:24:27.226 --> 00:24:34.540\nOr I can save new versions of these files\nthat have some highlighting, or boldness,\n\n384\n00:24:34.540 --> 00:24:39.099\nor if you're using markdowns, you could\ncreate a basic markdown generator.\n\n385\n00:24:40.520 --> 00:24:41.850\nWhich is great.\n\n386\n00:24:41.850 --> 00:24:45.990\nOne last thing before we\nfinish up this file business.\n\n387\n00:24:45.990 --> 00:24:47.440\nWe're getting into some\n\n388\n00:24:48.440 --> 00:24:53.660\nmeta programming things within this file,\nthis is text, right?\n\n389\n00:24:53.660 --> 00:24:59.081\nSo I'm just going to hop\nback into the shell and\n\n390\n00:24:59.081 --> 00:25:03.809\nsay f_py = open('files.py', and\n\n391\n00:25:03.809 --> 00:25:07.018\nI'm just going to read it.\n\n392\n00:25:15.714 --> 00:25:20.587\nI'm going to actually read in Python\nfiles using Python, make changes to\n\n393\n00:25:20.587 --> 00:25:26.680\nPython files and create new versions of\nprograms that will then be executable.\n\n394\n00:25:26.680 --> 00:25:30.852\nSo some of those upgrades from 2.7\nto 3.5 that we've talked about,\n\n395\n00:25:30.852 --> 00:25:32.750\nit's not as pretty there right?\n\n396\n00:25:32.750 --> 00:25:37.830\nBut some of those upgrades, you can\nactually use Python, write a script or\n\n397\n00:25:37.830 --> 00:25:41.380\na program in Python that'll go through,\nfind all your Python files.\n\n398\n00:25:41.380 --> 00:25:44.560\nMake the necessary changes,\nsave new versions of them,\n\n399\n00:25:44.560 --> 00:25:46.130\nand then you're up to snuff.\n\n400\n00:25:46.130 --> 00:25:48.760\n>> Wow,\nthat's sort of like to call witchcraft.\n\n401\n00:25:48.760 --> 00:25:50.320\nI'm pretty sure-\n>> That is magic.\n\n402\n00:25:50.320 --> 00:25:52.220\n>> That's exactly what that is.\n\n403\n00:25:52.220 --> 00:25:53.200\nThat's very cool though, right?\n\n404\n00:25:53.200 --> 00:25:57.450\nYou're basically taking the version\nof Python that you're used to and\n\n405\n00:25:57.450 --> 00:26:00.870\nnow that you're kind of being shoved\ninto maybe upgrading into a newer\n\n406\n00:26:00.870 --> 00:26:03.060\nversion of Python,\nthere's some differences.\n\n407\n00:26:03.060 --> 00:26:07.040\nFind out what those differences are, use\nsomething like what Justin showed us here\n\n408\n00:26:07.040 --> 00:26:11.385\nto go through, make the necessary\nchanges to already written scripts, so\n\n409\n00:26:11.385 --> 00:26:13.950\nthat become the newer version compliant.\n\n410\n00:26:13.950 --> 00:26:15.905\nAnd now, saved them as a new file,\n\n411\n00:26:15.905 --> 00:26:20.968\nprobably putting some sort of delineation\nto say, well this is our 3.5 version,\n\n412\n00:26:20.968 --> 00:26:23.751\nor this is our 3 version,\nwhatever the case is.\n\n413\n00:26:23.751 --> 00:26:26.964\nAnd now you've got the new version\nof that ready to rock and roll,\n\n414\n00:26:26.964 --> 00:26:30.880\nadd that to your Cron jobs, or whatever\nyou need, and you're off to the races,\n\n415\n00:26:30.880 --> 00:26:31.950\nvery cool stuff sir.\n\n416\n00:26:31.950 --> 00:26:35.377\n>> Yeah so, that's a little\nbeyond the scope maybe, but\n\n417\n00:26:35.377 --> 00:26:39.112\nit's something that we've\nactually used and I've used.\n\n418\n00:26:39.112 --> 00:26:43.323\nI'm like man, I need, because in the older\nversion 2.7 before the parenthesis\n\n419\n00:26:43.323 --> 00:26:47.007\nbecame part of the print statement,\nyou're like wow, I need to go back and\n\n420\n00:26:47.007 --> 00:26:50.770\nchange those 10,000 print statements\nthat I have in all this Python.\n\n421\n00:26:52.140 --> 00:26:55.740\nYeah, I could just write a Python program\nthat goes and finds all those print\n\n422\n00:26:55.740 --> 00:27:00.090\nstatements and updates to the parenthesis\nversions of those print statements.\n\n423\n00:27:00.090 --> 00:27:04.063\nSo very, very nice.\n\n424\n00:27:04.063 --> 00:27:08.546\nSo I think that actually gets us to\na good stopping point within files and\n\n425\n00:27:08.546 --> 00:27:10.940\nreading in and outputting data.\n\n426\n00:27:10.940 --> 00:27:14.645\n>> Awesome, well being able to manipulate\nfiles is something that we're definitely\n\n427\n00:27:14.645 --> 00:27:18.260\ngonna want to be able to do if we\nare writing programs that deal with files.\n\n428\n00:27:18.260 --> 00:27:19.400\nSo, Justin thank you so\n\n429\n00:27:19.400 --> 00:27:22.620\nmuch for explaining how we\nmight be able to go about that.\n\n430\n00:27:22.620 --> 00:27:24.670\nAnd doing it very efficiently and\nvery creatively.\n\n431\n00:27:24.670 --> 00:27:25.770\nAwesome stuff.\n\n432\n00:27:25.770 --> 00:27:26.850\nWe thank you for that.\n\n433\n00:27:26.850 --> 00:27:28.280\nThank you guys for joining us today.\n\n434\n00:27:28.280 --> 00:27:29.673\nHopefully you enjoyed that episode.\n\n435\n00:27:29.673 --> 00:27:31.692\nWe're gonna go ahead and\nsign off for ITProTV.\n\n436\n00:27:31.692 --> 00:27:33.455\nI've been your host Daniel Lowrie.\n\n437\n00:27:33.455 --> 00:27:34.629\n>> And I'm Justin Dennisen.\n\n438\n00:27:34.629 --> 00:27:36.672\n>> We'll see you next time.\n\n439\n00:27:36.672 --> 00:27:44.590\n[MUSIC]\n\n",
          "vimeoId": "158203647"
        },
        {
          "description": "In this episode, Daniel and Justin jump back to Functions for a more in-depth look at the Standard Library. In the previous episode on Python Functions you learned how to create your own custom function. Here, the guys show you how to take advantage of the myriad of built-in Functions found in any Python install.",
          "length": "1700",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-11-standard_library_functions-030616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-11-standard_library_functions-030616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-11-standard_library_functions-030616-1-sm.jpg",
          "title": "Standard Library Functions",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:07.844\n[MUSIC]\n\n2\n00:00:07.844 --> 00:00:12.471\nAll right, greetings everyone, and welcome\nto another exciting episode of ITProTV.\n\n3\n00:00:12.471 --> 00:00:17.190\nI'm your host, Daniel Lowrie, and in this\nepisode we are continuing on with our\n\n4\n00:00:17.190 --> 00:00:21.375\nPython programming series that we've\nbeen working so diligently on.\n\n5\n00:00:21.375 --> 00:00:24.898\nBrought back in the studio with us today\nis none other than our resident expert,\n\n6\n00:00:24.898 --> 00:00:25.850\nMr Justin Dennison.\n\n7\n00:00:25.850 --> 00:00:27.850\nJustin, welcome back to the show,\nsir, how you doing?\n\n8\n00:00:27.850 --> 00:00:30.010\n>> Thanks for having me back,\nI'm doing very well.\n\n9\n00:00:30.010 --> 00:00:33.010\nAnd we're making those steps closer and\ncloser and\n\n10\n00:00:33.010 --> 00:00:38.040\ncloser to that final kind of culmination\nof all of these skills we've acquired.\n\n11\n00:00:39.170 --> 00:00:42.970\nSo we've been using some of these\nstandard library functions,\n\n12\n00:00:42.970 --> 00:00:47.910\nlike LAN, and and print, even though\nprint and 27 is not really a function.\n\n13\n00:00:47.910 --> 00:00:50.620\nThe max function, the min function,\nthe sum function,\n\n14\n00:00:50.620 --> 00:00:54.160\nthose are standard built-ins that I\nhave access to right off the bat.\n\n15\n00:00:55.280 --> 00:00:59.760\nAnd let's just quickly review a couple\nof those and see how those work.\n\n16\n00:00:59.760 --> 00:01:03.610\nBut there are a bunch of other\nstandard library functions, but\n\n17\n00:01:03.610 --> 00:01:07.700\nI have to do some special things and we\nneed that last little piece of the puzzle\n\n18\n00:01:07.700 --> 00:01:12.750\nbefore we can start putting\nall of this together, so.\n\n19\n00:01:12.750 --> 00:01:13.860\n>> Without further ado.\n\n20\n00:01:13.860 --> 00:01:15.960\n>> Without further ado, here we go.\n\n21\n00:01:15.960 --> 00:01:22.960\nSo if we take a look, I have just a list\nof numbers, a list of some strings,\n\n22\n00:01:22.960 --> 00:01:26.440\na string dictionary that has a mapping,\nand then a tuple.\n\n23\n00:01:26.440 --> 00:01:31.610\nAll right, so if I were to just\nremind myself, what does len do?\n\n24\n00:01:32.640 --> 00:01:38.490\nWell if I run that, maybe,\nI get 4, okay, awesome.\n\n25\n00:01:39.860 --> 00:01:42.320\nWhat does max do?\n\n26\n00:01:42.320 --> 00:01:48.700\nThese are pretty self-explanatory, but\nit's always good to have a quick review.\n\n27\n00:01:48.700 --> 00:01:52.385\nIt just so happens that the 4 is also-\n>> The fourth.\n\n28\n00:01:52.385 --> 00:01:53.570\n[LAUGH] Yeah, the fourth.\n\n29\n00:01:53.570 --> 00:02:00.363\nSo just to keep from having confusion,\nmy tuple,\n\n30\n00:02:00.363 --> 00:02:05.878\nthe maximum is 5, and then I can do min.\n\n31\n00:02:05.878 --> 00:02:09.744\nAnd I can actually say, okay,\nI want to print out a dir,\n\n32\n00:02:09.744 --> 00:02:12.953\nwhich gives me all of\nthose list of things, and\n\n33\n00:02:12.953 --> 00:02:18.650\nas we've seen in the last couple of\nepisodes, this can be very nice to have.\n\n34\n00:02:18.650 --> 00:02:21.510\nBut it can also lead to some\npoints where you're like,\n\n35\n00:02:21.510 --> 00:02:23.500\nI don't really know what this part does.\n\n36\n00:02:23.500 --> 00:02:27.860\nAnd that's okay, but I do get some,\nhey, there's a count,\n\n37\n00:02:27.860 --> 00:02:31.920\nthere's an index, and that's about all\nwe need to worry about for tuples.\n\n38\n00:02:31.920 --> 00:02:33.800\nSo these are some built-in functions.\n\n39\n00:02:33.800 --> 00:02:38.586\nRemember, I'm treating print as\na function, but in 2.7 print is not\n\n40\n00:02:38.586 --> 00:02:43.620\ntechnically a function, it behaves\nlike it but it's a special statement.\n\n41\n00:02:43.620 --> 00:02:44.828\nSo we have to be careful,\n\n42\n00:02:44.828 --> 00:02:48.459\nwe can't used it necessarily in a context\nthat we always could a function.\n\n43\n00:02:48.459 --> 00:02:52.624\nI've written it in the Python\n3 variety to simulate that,\n\n44\n00:02:52.624 --> 00:02:56.720\ncuz in 3 it is actually\na standard library function.\n\n45\n00:02:56.720 --> 00:02:59.382\n>> So, Justin,\nwhen you say standard library,\n\n46\n00:02:59.382 --> 00:03:04.160\nwhat you're telling me is that there are\nall these functions built into Python that\n\n47\n00:03:04.160 --> 00:03:08.276\nare part of the standard library of\nfunctionality that make up Python.\n\n48\n00:03:08.276 --> 00:03:11.091\nAnd I can use them at any time I want\nbecause I don't have to reinvent\n\n49\n00:03:11.091 --> 00:03:11.594\nthe wheel,\n\n50\n00:03:11.594 --> 00:03:15.160\nthey've already found some very common\nways in which you're gonna use them.\n\n51\n00:03:15.160 --> 00:03:17.580\nOr people were creating common\nfunctions and they said,\n\n52\n00:03:17.580 --> 00:03:21.290\nyou know what, we should just add that to\nPython, make it part of that library so\n\n53\n00:03:21.290 --> 00:03:24.100\nthey can all upon that and\ndo a whole lot less coding.\n\n54\n00:03:24.100 --> 00:03:25.830\nBut we've only seen a few of them, right?\n\n55\n00:03:25.830 --> 00:03:27.874\nThere's a myriad of others.\n\n56\n00:03:27.874 --> 00:03:32.213\n>> Yeah, when I look at the standard\nlibrary list of functionality,\n\n57\n00:03:32.213 --> 00:03:37.900\nall the modules, as I've told you, you\nwill go, I wonder if I could do x, y or z?\n\n58\n00:03:37.900 --> 00:03:43.240\nAnd you start hitting the interwebs and\nyou're like, wow, that's built-in.\n\n59\n00:03:43.240 --> 00:03:46.900\nIt's almost like that scene where\nyou look at the Holy Grail and\n\n60\n00:03:46.900 --> 00:03:48.690\nyou go, it's so beautiful.\n\n61\n00:03:48.690 --> 00:03:52.760\nThat's kinda how I feel when I\nlook at the standard library.\n\n62\n00:03:52.760 --> 00:03:56.220\nExcept we have to treat\nthese a little differently.\n\n63\n00:03:56.220 --> 00:03:59.320\nThese don't always come imported in.\n\n64\n00:03:59.320 --> 00:04:05.600\nI can't immediately use these\nupon initial programming,\n\n65\n00:04:05.600 --> 00:04:09.470\nbecause otherwise my program\nfiles would be huge.\n\n66\n00:04:09.470 --> 00:04:14.672\nSo Python provides us a way to import\nthese in a variety of manners,\n\n67\n00:04:14.672 --> 00:04:19.260\nso I only grab the little chunks\nthat I need from each one.\n\n68\n00:04:20.560 --> 00:04:24.090\nSo I think a good place to start is,\nhow do I do that?\n\n69\n00:04:24.090 --> 00:04:29.214\nHow do I bring in these pieces of the\nstandard library that are called modules?\n\n70\n00:04:29.214 --> 00:04:32.810\nSo these modules are a bunch of functions\nbundled together that I can bring\n\n71\n00:04:32.810 --> 00:04:34.000\nin and use.\n\n72\n00:04:34.000 --> 00:04:35.170\nHow do I bring those in?\n\n73\n00:04:35.170 --> 00:04:41.290\nWell I can say import, and\nthere's actually a math function.\n\n74\n00:04:41.290 --> 00:04:46.730\nSo math provides expanded use,\nlike exponents,\n\n75\n00:04:46.730 --> 00:04:51.350\ngamma functions, which if you've done any\nscientific stuff, the gamma function.\n\n76\n00:04:51.350 --> 00:04:52.770\nYou're like, cool,\nI know what he's talking about.\n\n77\n00:04:52.770 --> 00:04:57.330\nIf you don't, it's totally fine,\nI know how people get scared with math.\n\n78\n00:04:57.330 --> 00:05:02.440\nCeiling, floor, square root,\nI think you can do average.\n\n79\n00:05:02.440 --> 00:05:04.191\n>> I'm about to fall into the fetal\nposition and [CROSSTALK].\n\n80\n00:05:04.191 --> 00:05:04.850\n>> Yeah, yeah.\n\n81\n00:05:04.850 --> 00:05:05.639\n>> It's getting scary.\n\n82\n00:05:05.639 --> 00:05:07.081\n[LAUGH]\n>> [LAUGH] Yeah, so\n\n83\n00:05:07.081 --> 00:05:12.057\nwe're just gonna look at a couple of\nthem and actually look at a new number\n\n84\n00:05:12.057 --> 00:05:15.986\ntime in comparison with these,\nwhat are called floats.\n\n85\n00:05:15.986 --> 00:05:19.080\nFloating point numbers, decimals,\nwe saw those a little bit,\n\n86\n00:05:19.080 --> 00:05:22.710\nI tend to stay toward integers\nbecause they don't behave weirdly.\n\n87\n00:05:22.710 --> 00:05:27.966\nBut if I import math I now have access\nto the math set of functionality.\n\n88\n00:05:27.966 --> 00:05:32.154\nSo in this episode, we're gonna go through\na couple of these that are really,\n\n89\n00:05:32.154 --> 00:05:36.277\nreally valuable that I use all of the time\nand provide that power to start doing\n\n90\n00:05:36.277 --> 00:05:39.324\nsome of that systems stuff\nthat I find very interesting,\n\n91\n00:05:39.324 --> 00:05:40.930\nand I know that you do as well.\n\n92\n00:05:41.930 --> 00:05:46.750\nSo if I import math, let's keep this.\n\n93\n00:05:46.750 --> 00:05:48.920\nOkay, so I'm just gonna use these.\n\n94\n00:05:48.920 --> 00:05:53.570\nSo if I want to use the functions\nfrom the math module, I need to\n\n95\n00:05:55.550 --> 00:05:59.000\nmath, and then I have to put a dot, right?\n\n96\n00:05:59.000 --> 00:06:02.887\nAnd since I have some\nauto completion here, so\n\n97\n00:06:02.887 --> 00:06:05.784\nI won't save that until I have to.\n\n98\n00:06:05.784 --> 00:06:07.602\nI have some auto completion,\n\n99\n00:06:07.602 --> 00:06:11.800\nhere's all of these math functions\nthat I now have access to.\n\n100\n00:06:11.800 --> 00:06:17.660\nAnd careful, Daniel, I know you're like,\nI don't even know what these do.\n\n101\n00:06:17.660 --> 00:06:18.260\nThat's okay,\n\n102\n00:06:18.260 --> 00:06:22.480\nsome of them I don't know what they\ndo either, but that's perfectly fine.\n\n103\n00:06:22.480 --> 00:06:28.350\nI have access to pi, everybody loves pi,\nbut one that I use is ceiling.\n\n104\n00:06:28.350 --> 00:06:33.531\nLike take this 2.5 and\ngo up to the next largest number,\n\n105\n00:06:33.531 --> 00:06:36.491\nso if I do math.ceil and 2.5,\n\n106\n00:06:36.491 --> 00:06:43.560\nwell print(math.ceil(2.5)),\nand what does that in fact do?\n\n107\n00:06:43.560 --> 00:06:45.013\nIt rounds up to 3.0.\n\n108\n00:06:45.013 --> 00:06:47.720\nBut what do you notice that's\ndifferent about this number?\n\n109\n00:06:49.490 --> 00:06:50.520\n>> It has a decimal point.\n\n110\n00:06:50.520 --> 00:06:52.020\n>> It does have a decimal point.\n\n111\n00:06:52.020 --> 00:06:53.770\nAnd these are called\nfloating point numbers.\n\n112\n00:06:53.770 --> 00:06:57.540\nI can use decimals, they behave\na little bit differently than ints.\n\n113\n00:06:57.540 --> 00:07:01.260\nAnd let's just hop over to the shell\nreal quick to illustrate that.\n\n114\n00:07:01.260 --> 00:07:08.547\nIf I did 3.0/2, I actually get normal,\nor what we would call normal division.\n\n115\n00:07:08.547 --> 00:07:11.347\nSo any time I had a decimal\nin one of the numbers,\n\n116\n00:07:11.347 --> 00:07:13.480\nI get kind of that normal division.\n\n117\n00:07:13.480 --> 00:07:18.185\nSo if you wanna keep normal math\noperations working for you,\n\n118\n00:07:18.185 --> 00:07:20.029\nthen just add a .0, or\n\n119\n00:07:20.029 --> 00:07:25.396\nmake sure that one of them is what's\ncalled a floating point number.\n\n120\n00:07:25.396 --> 00:07:30.245\n[COUGH] So that's good to know,\ncuz this math module provides access that\n\n121\n00:07:30.245 --> 00:07:34.450\na lot of times will come back\nas floating point numbers.\n\n122\n00:07:34.450 --> 00:07:36.545\nSo this comes back as\na floating point number.\n\n123\n00:07:36.545 --> 00:07:40.547\nWhat about math.floor?\n\n124\n00:07:40.547 --> 00:07:44.657\nWell, I like the name of this\ncuz of the ceiling goes up,\n\n125\n00:07:44.657 --> 00:07:47.020\nI wonder what the floor does?\n\n126\n00:07:47.020 --> 00:07:48.269\n>> It goes up even higher.\n\n127\n00:07:48.269 --> 00:07:51.243\n[LAUGH]\n>> Daniel,\n\n128\n00:07:51.243 --> 00:07:54.878\nyou were making me happy and then no, no.\n\n129\n00:07:54.878 --> 00:07:58.046\nI know what you're saying,\nit's the next story up.\n\n130\n00:07:58.046 --> 00:07:59.475\n>> That's it, it's the floor, right?\n\n131\n00:07:59.475 --> 00:08:02.087\n>> It's the floor which\nis pass the ceiling.\n\n132\n00:08:02.087 --> 00:08:04.373\nLet's see what it does.\n\n133\n00:08:04.373 --> 00:08:07.670\nAnd actually effectively rounds down,\nit truncates.\n\n134\n00:08:07.670 --> 00:08:12.340\nIt gets rid of all decimals\ndown to the next whole number.\n\n135\n00:08:12.340 --> 00:08:15.710\n>> So it helps you work with whole\nnumbers if you have a decimal number or\n\n136\n00:08:15.710 --> 00:08:17.300\none of these floating point\nnumbers you're working with,\n\n137\n00:08:17.300 --> 00:08:20.021\nyou're like you know what I want to\nmake it quick I want to make it easy I'm\n\n138\n00:08:20.021 --> 00:08:23.510\nsick of all this guessing game here\nbecause I'm not great at math,\n\n139\n00:08:23.510 --> 00:08:26.170\njust make them whole numbers so\nit's easier for me to work with.\n\n140\n00:08:26.170 --> 00:08:28.130\nWe can use the ceiling and\nthe floor to make that happen.\n\n141\n00:08:28.130 --> 00:08:32.610\n>> Right and then if we really wanted to\nput them back to those integer values\n\n142\n00:08:32.610 --> 00:08:37.470\nwe could just say, hey,\nmake those back to integers also.\n\n143\n00:08:38.490 --> 00:08:41.210\nSo this is a way that we could round.\n\n144\n00:08:41.210 --> 00:08:43.840\nSo the math module's nice.\n\n145\n00:08:43.840 --> 00:08:47.090\nIt also comes with square root, right?\n\n146\n00:08:47.090 --> 00:08:49.490\nIf you're doing some calculations\nyou need square root.\n\n147\n00:08:49.490 --> 00:08:55.080\nSo math.sqrt(4), we know what\nthat should be, should be two.\n\n148\n00:08:55.080 --> 00:09:03.780\nIf we run that, I do in fact get two,\nbut notice I imported this math module.\n\n149\n00:09:03.780 --> 00:09:05.860\nAnd I couldn't just call ceiling.\n\n150\n00:09:05.860 --> 00:09:10.330\nI just couldn't call ceiling from\nmath I had to say math.ceiling,\n\n151\n00:09:10.330 --> 00:09:15.550\nthis is something called a name space,\nso I can name space these modules.\n\n152\n00:09:15.550 --> 00:09:22.240\nWhat if I had a function\ncalled ceil right?\n\n153\n00:09:22.240 --> 00:09:27.070\nIf I had math.ceil versus ceil I\ncan have what's called a name space\n\n154\n00:09:27.070 --> 00:09:31.830\nclash or a function class where it goes\nI don't know what you want me to do,\n\n155\n00:09:31.830 --> 00:09:36.278\nI have two things names seal and\none of them is just\n\n156\n00:09:36.278 --> 00:09:40.380\nprint('look up') and the other one\nactually operates on numbers, and\n\n157\n00:09:40.380 --> 00:09:42.670\nI'm trying to to figure out,\nI'm having trouble.\n\n158\n00:09:42.670 --> 00:09:48.450\nSo this importing modules provides\na way to tease those apart.\n\n159\n00:09:50.190 --> 00:09:55.610\nSo [COUGH] upon this some of these\nmodules have very long names.\n\n160\n00:09:55.610 --> 00:09:57.780\nMath is not one of them.\n\n161\n00:09:57.780 --> 00:10:00.550\nBut I can actually change\nhow it's referenced.\n\n162\n00:10:00.550 --> 00:10:04.470\nIf I import math like this I\nimport the entire math module And\n\n163\n00:10:04.470 --> 00:10:09.880\nit was just math.ceiling, math.squareroot,\nmath.forward, but I can also say as m.\n\n164\n00:10:09.880 --> 00:10:16.860\nAnd just say I want to call everything\nin math just by m and then I can go\n\n165\n00:10:18.960 --> 00:10:23.157\nm And I get the exact same output, so\n\n166\n00:10:23.157 --> 00:10:26.763\nthis is a way to change some of\nthe standard Python functionality and\n\n167\n00:10:26.763 --> 00:10:31.420\nname it the way that you would, you kinda\nthink about it, that makes sense to you.\n\n168\n00:10:31.420 --> 00:10:35.530\n>> Now Justin, what's the advantage\nof changing it from math to m?\n\n169\n00:10:35.530 --> 00:10:38.380\n>> The advantage is\nsometimes these libraries\n\n170\n00:10:38.380 --> 00:10:40.918\n>> That's just a run through one of these\n\n171\n00:10:40.918 --> 00:10:46.160\nusual in, argvemulator, right?\n\n172\n00:10:46.160 --> 00:10:49.160\nLet's say I'm using\nthe argvemulator module.\n\n173\n00:10:49.160 --> 00:10:50.070\n>> As you normally would.\n\n174\n00:10:50.070 --> 00:10:52.740\n>> Yeah.\nI mean I use it on a daily basis.\n\n175\n00:10:52.740 --> 00:10:58.270\nI don't wanna type\nargvemulator every time.\n\n176\n00:10:58.270 --> 00:11:02.800\nSo maybe I say, import argvemulator as,\nso let's just do that,\n\n177\n00:11:04.650 --> 00:11:12.260\nas arge emu, or maybe even just emu.\n\n178\n00:11:12.260 --> 00:11:15.660\nRight?\nAnd then anything that I want to use there\n\n179\n00:11:15.660 --> 00:11:18.330\nis just emu., instead of argvemulator.\n\n180\n00:11:18.330 --> 00:11:22.500\n>> So it essentially helps you to-\n>> Basically, abbreviate, maybe, and\n\n181\n00:11:22.500 --> 00:11:25.320\nlower the amount of typing\nthat you have to in your code.\n\n182\n00:11:25.320 --> 00:11:30.880\nCleaning it up, making it easier to read,\nand giving it that nicer look to it,\n\n183\n00:11:30.880 --> 00:11:34.170\nand making it, I guess,\njust easier to read and work with.\n\n184\n00:11:34.170 --> 00:11:40.410\n>> Right, and then another quick example,\nsometimes it makes more sense to you.\n\n185\n00:11:40.410 --> 00:11:45.640\nPython comes with a base HTTP server,\nso I can just say as http cuz\n\n186\n00:11:45.640 --> 00:11:50.600\nthen it interacts with HTTP protocols or\nI may even just call it server and\n\n187\n00:11:50.600 --> 00:11:53.850\nthen I'm like this is actually\na server but I know it's HTTP.\n\n188\n00:11:53.850 --> 00:11:57.530\nIn addition to this offers power to you\n\n189\n00:11:57.530 --> 00:12:00.580\nthat if you're using third party\nmodules which you can go download and\n\n190\n00:12:00.580 --> 00:12:05.490\nintegrate, I can just switch these out,\nchange this name.\n\n191\n00:12:05.490 --> 00:12:08.460\nAs long as the functions\nare still the same, and\n\n192\n00:12:08.460 --> 00:12:10.400\nthen all the rest of my\ncode is already done.\n\n193\n00:12:10.400 --> 00:12:14.730\nSo if I use an alias, and I can have\nthese modules that are interchangeable,\n\n194\n00:12:14.730 --> 00:12:18.590\nI just change one line of code, and\nit still works just like it did before.\n\n195\n00:12:18.590 --> 00:12:21.070\nMaybe it's a little bit more efficient,\nmaybe it's faster.\n\n196\n00:12:21.070 --> 00:12:24.918\nMaybe it provides additional functions\nother than the core functionality, for\n\n197\n00:12:24.918 --> 00:12:29.910\ninstance, for instance there is\na server framework called Tornado.\n\n198\n00:12:29.910 --> 00:12:32.728\nIf I now wanted to now\nuse Tornado as my server,\n\n199\n00:12:32.728 --> 00:12:34.909\nI just switch out the Tornado part.\n\n200\n00:12:36.140 --> 00:12:37.680\nAnd hopefully everything still works.\n\n201\n00:12:37.680 --> 00:12:39.645\nThere may be some minor\ntweaks that you have to do.\n\n202\n00:12:39.645 --> 00:12:41.670\n>> Gotcha, yeah,\nthat's extremely convenient.\n\n203\n00:12:41.670 --> 00:12:44.500\nTo be able, instead of having to go\nthrough the entirety of your code, and\n\n204\n00:12:44.500 --> 00:12:48.740\nyeah, we do have cool find and\nreplace features on most of our editors.\n\n205\n00:12:48.740 --> 00:12:52.490\nAll you gotta do is run up to wherever it\nis you're trying to call that module from,\n\n206\n00:12:52.490 --> 00:12:56.300\nchange what it is you're calling it to,\nand now everything that, like if you had\n\n207\n00:12:56.300 --> 00:13:00.560\na Tornado and sever one changed it back\nHTTP server, just change the HTTP server.\n\n208\n00:13:00.560 --> 00:13:03.960\nNow everything that says server is\nthe HTTP server instead of Tornado, right?\n\n209\n00:13:03.960 --> 00:13:05.220\n>> Right, exactly.\n\n210\n00:13:05.220 --> 00:13:06.100\nSo it's very handy,\n\n211\n00:13:06.100 --> 00:13:10.990\nand you'll notice in the community that\nthese follow a fair amount of conventions.\n\n212\n00:13:10.990 --> 00:13:15.120\nSome of the third party libraries you'll\nsee are like always import this way.\n\n213\n00:13:16.590 --> 00:13:21.180\nAnd then there's one final import\nway that we need to look at, but\n\n214\n00:13:21.180 --> 00:13:24.940\nI think it's better to, you now I\nhinted Daniel that you really like\n\n215\n00:13:24.940 --> 00:13:29.182\nsome system things you know\nbash on these commands,\n\n216\n00:13:29.182 --> 00:13:35.520\nyou know RM-RF or RM some file name or\ntouch some file number or make dirt.\n\n217\n00:13:35.520 --> 00:13:38.350\nWell, I've got a surprise for you Daniel.\n\n218\n00:13:38.350 --> 00:13:40.530\nPython has all of those built in.\n\n219\n00:13:40.530 --> 00:13:43.290\nThey are standard functions\nwithin the standard library.\n\n220\n00:13:43.290 --> 00:13:44.960\n>> Wow.\nYou just gave me Christmas and\n\n221\n00:13:44.960 --> 00:13:46.891\nmy birthday all rolled into one there,\nJustin.\n\n222\n00:13:46.891 --> 00:13:48.115\n[LAUGH]\n>> I know.\n\n223\n00:13:48.115 --> 00:13:49.177\nI know.\nI got excited when I\n\n224\n00:13:49.177 --> 00:13:50.037\nlearned how to use these.\n\n225\n00:13:50.037 --> 00:13:56.310\nI was like, [SOUND] because now I can\ncall those functions programatically.\n\n226\n00:13:56.310 --> 00:13:57.850\nAnd we're all good to go.\n\n227\n00:13:57.850 --> 00:13:58.710\n>> So that's awesome, so\n\n228\n00:13:58.710 --> 00:14:03.410\nyou're telling me just like in Bash where\nI can say, here is a directory, right?\n\n229\n00:14:03.410 --> 00:14:05.520\nAnd I want you to look\ninside that directory, and\n\n230\n00:14:05.520 --> 00:14:08.130\nI want you to remove startup.*.\n\n231\n00:14:08.130 --> 00:14:12.920\nAnd it will do that, I don't have to do\nanything special to make that happen.\n\n232\n00:14:12.920 --> 00:14:16.860\n>> So the programming interface\nis a little different than\n\n233\n00:14:16.860 --> 00:14:20.180\nsome of these standard bash scripts, but\nall of the functionality is still there.\n\n234\n00:14:20.180 --> 00:14:23.150\nAnd typically they have\nvery similar names.\n\n235\n00:14:23.150 --> 00:14:29.550\nI think its best to maybe just take a look\nat a few, but introduce a new syntax.\n\n236\n00:14:29.550 --> 00:14:32.290\nLets say I'm writing a system\nadmin script, right, and\n\n237\n00:14:32.290 --> 00:14:34.300\nI need to walk through a directory.\n\n238\n00:14:34.300 --> 00:14:38.360\nI'm going to from,\nthis is the final import style.\n\n239\n00:14:38.360 --> 00:14:41.010\nFrom os import.\n\n240\n00:14:41.010 --> 00:14:44.500\nAnd let's import a favorite of mine, walk.\n\n241\n00:14:46.090 --> 00:14:50.940\nSo now instead of having to type os.walk,\nI can just type walk.\n\n242\n00:14:52.280 --> 00:14:56.230\nSo I'm gonna come down here, I'm going\nto actually comment all this out.\n\n243\n00:14:57.510 --> 00:14:59.660\nSo I want to walk,\n\n244\n00:14:59.660 --> 00:15:02.670\nwhat's a good directory that typically\nhas some interesting stuff in it.\n\n245\n00:15:02.670 --> 00:15:03.420\nNot too much.\n\n246\n00:15:03.420 --> 00:15:04.180\n>> Not too much.\n\n247\n00:15:04.180 --> 00:15:07.490\nOkay, let's try,\netc is a usually good one.\n\n248\n00:15:07.490 --> 00:15:08.230\nEtc.\n\n249\n00:15:08.230 --> 00:15:10.720\n>> Etc is usually a good one.\n\n250\n00:15:10.720 --> 00:15:11.480\nSo print.\n\n251\n00:15:13.300 --> 00:15:15.630\nAnd there we go, let's see what this does.\n\n252\n00:15:17.640 --> 00:15:19.440\nSo generator.\n\n253\n00:15:19.440 --> 00:15:23.390\nSo Waffle actually gave me\na thing that's a giant collection\n\n254\n00:15:23.390 --> 00:15:26.070\nof all of these functions.\n\n255\n00:15:26.070 --> 00:15:27.980\nSo what do I wanna do?\n\n256\n00:15:27.980 --> 00:15:32.830\nWell, any time I see generator for our\nintents and purposes, write a for loop.\n\n257\n00:15:32.830 --> 00:15:38.574\nFor item in walk etc,\n\n258\n00:15:38.574 --> 00:15:42.089\nprint item.\n\n259\n00:15:46.708 --> 00:15:52.046\nAnd not as pretty on the command line but\nit will actually give me every\n\n260\n00:15:52.046 --> 00:15:57.951\npossible combination of files, paths,\nand folders in the etc sub folder.\n\n261\n00:15:57.951 --> 00:16:02.885\nSo, it says, etc and then here's\na bunch of files that come in etc.\n\n262\n00:16:02.885 --> 00:16:04.567\nHere's a bunch of configurations.\n\n263\n00:16:04.567 --> 00:16:09.095\nOr excuse me, these are folders that\nare in etc, and if I scroll down\n\n264\n00:16:09.095 --> 00:16:14.210\na little bit it says inside of Apache\n2 there's all of these things.\n\n265\n00:16:14.210 --> 00:16:15.440\n>> So it's completely recursive.\n\n266\n00:16:15.440 --> 00:16:16.830\nIt goes trough every single thing.\n\n267\n00:16:16.830 --> 00:16:17.330\n>> Yeah, yeah.\n\n268\n00:16:17.330 --> 00:16:18.820\nIt'll just find these.\n\n269\n00:16:18.820 --> 00:16:19.320\n>> Wow.\n\n270\n00:16:19.320 --> 00:16:19.880\n>> Yeah.\n\n271\n00:16:19.880 --> 00:16:22.850\nSo this would be a great way to\ngo I just need to look through\n\n272\n00:16:22.850 --> 00:16:24.460\neverything on my computer.\n\n273\n00:16:24.460 --> 00:16:28.800\nAnd find every configuration file\nthat exists and do something with it,\n\n274\n00:16:28.800 --> 00:16:33.600\nadd a new little log,\nso this is a great way.\n\n275\n00:16:33.600 --> 00:16:35.890\nSo this will give you the base directory,\n\n276\n00:16:35.890 --> 00:16:39.390\nwhere it looked,\nwhat are other directories in it, and\n\n277\n00:16:39.390 --> 00:16:44.240\nthen another list of all of the files\nthat are in that directory also.\n\n278\n00:16:44.240 --> 00:16:44.780\n>> Very cool.\n\n279\n00:16:44.780 --> 00:16:46.768\n>> So the log function is great.\n\n280\n00:16:46.768 --> 00:16:52.400\nBut, there's also some other ones.\n\n281\n00:16:52.400 --> 00:16:55.380\nI know a common one I use\nis to just make new files.\n\n282\n00:16:57.955 --> 00:17:00.630\nMkdir is actually a Python function.\n\n283\n00:17:00.630 --> 00:17:02.260\nI don't know what you call it.\n\n284\n00:17:02.260 --> 00:17:03.870\nI call it mkdir\n>> That's what I say.\n\n285\n00:17:03.870 --> 00:17:04.540\nMake dir.\n\n286\n00:17:04.540 --> 00:17:06.460\n>> Mkdir, it helps me,\nI'm like make directory.\n\n287\n00:17:06.460 --> 00:17:07.860\nMake directory.\n\n288\n00:17:07.860 --> 00:17:12.920\nSo if I say from this directory,\nI'm gonna mkdir.\n\n289\n00:17:14.630 --> 00:17:20.850\nAnd within where I am, where the script\nexecutes, I'm gonna have a new folder.\n\n290\n00:17:20.850 --> 00:17:24.114\nLet's just call it test_folder.\n\n291\n00:17:26.320 --> 00:17:28.140\nAnd ls.\n\n292\n00:17:28.140 --> 00:17:29.820\nAnd right there it is.\n\n293\n00:17:29.820 --> 00:17:35.387\nSo now I can just run through and\nautomate all of these mkdir processes.\n\n294\n00:17:35.387 --> 00:17:39.570\nAnd it works very similar to mkdir\nlike I would normally use it.\n\n295\n00:17:39.570 --> 00:17:40.740\n>> Yeah, that's very awesome.\n\n296\n00:17:40.740 --> 00:17:44.050\nI can see where that could\nbe very functional for\n\n297\n00:17:44.050 --> 00:17:47.560\nmaybe creating an old backup file, right.\n\n298\n00:17:47.560 --> 00:17:50.400\nI wanna take a backup\nof a certain directory.\n\n299\n00:17:50.400 --> 00:17:54.980\nWell maybe my backup directory doesn't\nexist and I wanna copy it to something.\n\n300\n00:17:54.980 --> 00:17:56.930\nMaybe I give it some input and\n\n301\n00:17:56.930 --> 00:17:59.600\nsay this is the directory I\nwant you to make a backup of.\n\n302\n00:17:59.600 --> 00:18:02.020\nThen it will look that up and say well\nyou don't have the directory I need.\n\n303\n00:18:02.020 --> 00:18:03.440\nI'm gonna go ahead and make that.\n\n304\n00:18:03.440 --> 00:18:07.590\nI'm gonna copy all of these files,\ndump the output as .bax, and\n\n305\n00:18:07.590 --> 00:18:09.280\nnow you have a backup file and all that.\n\n306\n00:18:09.280 --> 00:18:13.350\nNow I can clean up the original directory,\nmake it nice and clean for\n\n307\n00:18:13.350 --> 00:18:16.420\nyou, nothing inside of it, and\ngo back to saving new files there, and\n\n308\n00:18:16.420 --> 00:18:17.760\nyou got all your old stuff.\n\n309\n00:18:17.760 --> 00:18:19.710\nAnd a backup file in a different location.\n\n310\n00:18:19.710 --> 00:18:21.240\nThat would be very, very helpful.\n\n311\n00:18:21.240 --> 00:18:25.800\n>> Yep, and one of the downfalls of mkdir\nthat I've found is when I wanna make,\n\n312\n00:18:25.800 --> 00:18:29.550\nlike I know where I need to make this but\nI need to nest some folders,\n\n313\n00:18:29.550 --> 00:18:34.260\nthere's that dash p flag that I can add\nto recursively make those folders, well,\n\n314\n00:18:34.260 --> 00:18:37.170\nPython also provides that.\n\n315\n00:18:37.170 --> 00:18:41.700\nAnd saying I want to makedirs and\nyou can give it a series of path names.\n\n316\n00:18:41.700 --> 00:18:47.700\nSo, within this directory I want to make\na folder and then an inside _folder.\n\n317\n00:18:47.700 --> 00:18:53.080\nAnd this will actually,\nif this folder doesn't exist right now.\n\n318\n00:18:53.080 --> 00:18:56.530\nI hop over here, doesn't exist,\ntest_folder does.\n\n319\n00:18:56.530 --> 00:19:02.080\nBut if I run this, Forgot.\n\n320\n00:19:03.320 --> 00:19:05.640\nIf you already make it,\nyou can't make it again.\n\n321\n00:19:05.640 --> 00:19:08.410\nYeah, so that's a standard functionality.\n\n322\n00:19:10.320 --> 00:19:15.000\nSo I have folder and inside a folder,\nI have an inside_folder.\n\n323\n00:19:15.000 --> 00:19:19.430\nSo I can give it a long path, MakeDirs and\nit'll make all of those things\n\n324\n00:19:19.430 --> 00:19:23.270\nat one time with a single function call,\nwhich we can do in batch but\n\n325\n00:19:23.270 --> 00:19:26.660\nI find this pretty helpful and I'm like,\nokay I need to make some folders here.\n\n326\n00:19:26.660 --> 00:19:29.820\nMove these things around, come back out.\n\n327\n00:19:29.820 --> 00:19:33.675\nIt's wonderful, wonderful for\nme, great, great.\n\n328\n00:19:33.675 --> 00:19:36.335\n>> Awesome, what else can we\ndo in the OS using Python?\n\n329\n00:19:36.335 --> 00:19:40.695\n>> Well, what are some other common\nthings that you use on the terminal?\n\n330\n00:19:40.695 --> 00:19:45.795\n>> Let's see here, I'd probably, copying\nfiles is a very common thing that you do.\n\n331\n00:19:45.795 --> 00:19:50.155\n>> Okay, so I mean, we could open a file,\ncopy, so how do we copy?\n\n332\n00:19:51.165 --> 00:19:52.115\nCopy, copy.\n\n333\n00:19:52.115 --> 00:19:56.220\nI don't know, maybe copy?\n\n334\n00:19:56.220 --> 00:19:58.570\nThat's a, that's a-\n>> Copy just very well may work.\n\n335\n00:19:58.570 --> 00:19:59.670\n>> It very well may work.\n\n336\n00:19:59.670 --> 00:20:01.180\nLet's find it out.\n\n337\n00:20:01.180 --> 00:20:03.100\nAnd, what's a good way?\n\n338\n00:20:03.100 --> 00:20:06.738\nI could just hop into\nthe shell right here and\n\n339\n00:20:06.738 --> 00:20:10.780\nsay import os and\nthen dir(os) and take a look.\n\n340\n00:20:13.650 --> 00:20:15.200\nAnd copy.\n\n341\n00:20:15.200 --> 00:20:17.662\nIt doesn't look like copy's there.\n\n342\n00:20:17.662 --> 00:20:18.845\n>> Do they have cp?\n\n343\n00:20:18.845 --> 00:20:26.310\nCP doesn't look like CP is there.\n\n344\n00:20:27.740 --> 00:20:32.542\nSo-\n>> I guess in Linux systems typically if\n\n345\n00:20:32.542 --> 00:20:37.030\nyou want a copy of file you will\nmove it if I'm not mistaken.\n\n346\n00:20:37.030 --> 00:20:37.850\n>> You'll move it.\n\n347\n00:20:37.850 --> 00:20:41.250\n>> We'll actually just do an mv,\nmove from one file from the other.\n\n348\n00:20:41.250 --> 00:20:44.106\nAnd it'll,\nif I'm remembering it correctly,\n\n349\n00:20:44.106 --> 00:20:46.970\nthere's always one way in\nwhich to do it to copy.\n\n350\n00:20:46.970 --> 00:20:50.310\nCuz you're right, copy command,\nI thought cp was it.\n\n351\n00:20:50.310 --> 00:20:51.460\nBut maybe it's not.\n\n352\n00:20:51.460 --> 00:20:55.760\n>> Cp does actually work in a terminal,\nbut I'm glad you brought this up.\n\n353\n00:20:55.760 --> 00:21:01.280\nNot everything is there, and the reason\nbeing is I could simulate a copy\n\n354\n00:21:01.280 --> 00:21:07.080\nby reading in the file and writing\nout the file in a different location.\n\n355\n00:21:07.080 --> 00:21:09.300\nSo, I could make my own copy.\n\n356\n00:21:09.300 --> 00:21:14.380\nSo that's typically not in there,\nbut some of the more things, chdir.\n\n357\n00:21:14.380 --> 00:21:18.810\nThat's not something we see in Linux,\nthat's not something we see on the command\n\n358\n00:21:18.810 --> 00:21:23.170\nprompt, but it is something that you and\nI have used.\n\n359\n00:21:23.170 --> 00:21:29.330\nSo if I change dir, and I can say change\ndir, and where do you want to go?\n\n360\n00:21:29.330 --> 00:21:30.620\nI want to go inside a folder.\n\n361\n00:21:30.620 --> 00:21:33.913\nAnd then there's another\none that's great to see.\n\n362\n00:21:36.421 --> 00:21:37.705\nAnd listdir, so\n\n363\n00:21:37.705 --> 00:21:43.600\nthis will actually get me a list of\nall of the things within a directory.\n\n364\n00:21:43.600 --> 00:21:46.870\nAnd unlike walk, it doesn't give\nme necessarily recursively,\n\n365\n00:21:46.870 --> 00:21:50.770\nit just gives me that top level,\nwhich is sometimes all I need.\n\n366\n00:21:50.770 --> 00:21:55.230\nSo [COUGH] I'm gonna comment this\nout because those are already made,\n\n367\n00:21:55.230 --> 00:21:57.198\nwe'll get an error there.\n\n368\n00:21:57.198 --> 00:21:59.523\nSo change dir,\nI wanna change in the folder and\n\n369\n00:21:59.523 --> 00:22:03.464\nthen I want a list of all of the things\nand I'm gonna go ahead and print that out.\n\n370\n00:22:06.300 --> 00:22:08.080\n[SOUND] That was a lot of stuff there.\n\n371\n00:22:09.220 --> 00:22:14.240\nSo if I run this, yeah.\n\n372\n00:22:14.240 --> 00:22:15.670\n>> You might be already in that folder.\n\n373\n00:22:15.670 --> 00:22:19.760\n>> Yeah, I'm actually in that folder,\nso from the, when this script runs\n\n374\n00:22:19.760 --> 00:22:23.728\nI'm actually gonna go into this folder,\nrun Lister and print out all those things.\n\n375\n00:22:23.728 --> 00:22:29.000\nUh-oh, unexpected indent.\n\n376\n00:22:29.000 --> 00:22:31.100\n>> The indents will get you every time.\n\n377\n00:22:31.100 --> 00:22:32.078\n>> And where did it happen?\n\n378\n00:22:32.078 --> 00:22:36.260\nLine four, I am silly.\n\n379\n00:22:38.600 --> 00:22:39.715\nLet's try that again.\n\n380\n00:22:39.715 --> 00:22:44.560\n[FOREIGN] Trailing comma not allowed\nwithout surrounding parentheses.\n\n381\n00:22:44.560 --> 00:22:48.790\nSo, we've run into a problem and\nI wanted to wrap this around.\n\n382\n00:22:48.790 --> 00:22:50.580\nLet's make sure I'm not\ndoing anything else wrong.\n\n383\n00:22:52.880 --> 00:22:54.915\nNo such file or directory.\n\n384\n00:22:54.915 --> 00:22:58.410\nChange_dir Folder.\n\n385\n00:23:00.940 --> 00:23:02.430\nDo I need this leading slash?\n\n386\n00:23:02.430 --> 00:23:05.710\n>> I was gonna say, you might have to\ngive it the full path for it to go.\n\n387\n00:23:05.710 --> 00:23:06.300\n>> There we go.\n>> Yeah, yeah.\n\n388\n00:23:06.300 --> 00:23:10.250\n>> Yeah, so I don't, sometimes\nthe leading slash, if I wanted that,\n\n389\n00:23:10.250 --> 00:23:12.240\nI would actually probably do that.\n\n390\n00:23:12.240 --> 00:23:13.490\n>> Yeah.\n\n391\n00:23:13.490 --> 00:23:14.860\n>> So be careful with those.\n\n392\n00:23:14.860 --> 00:23:19.080\nThose are some of the nuances that would\nkind of happen within the terminal.\n\n393\n00:23:19.080 --> 00:23:20.590\n>> So, easily fixed.\n\n394\n00:23:20.590 --> 00:23:23.910\nAs we said, if you know anything about\nthe operating systems you're working with,\n\n395\n00:23:23.910 --> 00:23:27.320\nyou're gonna see the error and you're\ngonna go okay, what's happening here?\n\n396\n00:23:27.320 --> 00:23:28.800\nI see what's happening.\n\n397\n00:23:28.800 --> 00:23:31.720\nI need to remove something or\nI need to add something so\n\n398\n00:23:31.720 --> 00:23:33.200\nthat it knows exactly where I want to go.\n\n399\n00:23:33.200 --> 00:23:37.790\nI tend to use full path names just to\ntry to avoid situations like that.\n\n400\n00:23:37.790 --> 00:23:39.550\n>> Yeah.\nBut if you're making effectively like a\n\n401\n00:23:39.550 --> 00:23:42.980\ncrawler sometimes that gets a little weird\nbecause you're automating the process.\n\n402\n00:23:42.980 --> 00:23:45.270\nAnd you're like I don't\nwanna go in this folder and\n\n403\n00:23:45.270 --> 00:23:49.440\nlook at everything around,\nfind these things, back up.\n\n404\n00:23:49.440 --> 00:23:52.640\nBut if you ever need to check,\n\n405\n00:23:52.640 --> 00:23:58.284\nthere's actually another\nfunction that is great.\n\n406\n00:23:58.284 --> 00:24:03.341\nAnd this will probably finish up if I want\n\n407\n00:24:03.341 --> 00:24:08.858\nto print getcwd,\njust run it as a function.\n\n408\n00:24:08.858 --> 00:24:11.093\nWhere'd you go?\n\n409\n00:24:11.093 --> 00:24:17.547\nI didn't save,\na common mistake that people will make.\n\n410\n00:24:17.547 --> 00:24:20.256\nIt will actually give me\nthe full path of where I\n\n411\n00:24:20.256 --> 00:24:23.385\nam at that current time\nduring the script execution.\n\n412\n00:24:23.385 --> 00:24:27.740\nSo if you want this full pass\nyou can actually use getcwd,\n\n413\n00:24:27.740 --> 00:24:31.478\nwhich would work like pwd\non the Linux terminal.\n\n414\n00:24:31.478 --> 00:24:32.279\n>> Very cool.\n\n415\n00:24:32.279 --> 00:24:36.169\n>> So I've made all these dirs,\nthese directories,\n\n416\n00:24:36.169 --> 00:24:38.619\nI finally want to clean them up.\n\n417\n00:24:41.346 --> 00:24:46.999\nThere is a way to remove files and\ndirectories.\n\n418\n00:24:46.999 --> 00:24:47.765\nSo.\n\n419\n00:24:50.982 --> 00:24:58.097\nI'm going to bring in remove and\nremove dir.\n\n420\n00:24:58.097 --> 00:25:03.240\nSo, instead of going into this directory,\n\n421\n00:25:03.240 --> 00:25:08.383\nI'm gonna comment that out and remove dir,\n\n422\n00:25:08.383 --> 00:25:13.113\nand I want to remove folder, all right?\n\n423\n00:25:13.113 --> 00:25:18.966\nSo folder directory not empty,\nthis is a common error that you will see.\n\n424\n00:25:18.966 --> 00:25:20.870\nSo what do I need to do?\n\n425\n00:25:26.826 --> 00:25:29.850\nWell, this actually brings\nus to an interesting point.\n\n426\n00:25:29.850 --> 00:25:32.710\nIn Bash I could just stream these, right?\n\n427\n00:25:32.710 --> 00:25:35.500\nRemove everything that's star.star.\n\n428\n00:25:35.500 --> 00:25:39.380\nTypically in Python you're gonna have\nto iterate through all of those things,\n\n429\n00:25:39.380 --> 00:25:43.270\nso I could do something like this.\n\n430\n00:25:44.860 --> 00:25:51.150\nIf I go into that folder,\nI can say for folder in listdir,\n\n431\n00:25:51.150 --> 00:25:55.080\nor for thing in listdir.\n\n432\n00:25:55.080 --> 00:26:01.070\nI could just say rmdir, and\nI know those are all directories.\n\n433\n00:26:01.070 --> 00:26:02.320\nI could test for that.\n\n434\n00:26:02.320 --> 00:26:03.460\nRemove thing.\n\n435\n00:26:03.460 --> 00:26:07.000\nAnd let's see if we get invalid syntax.\n\n436\n00:26:08.080 --> 00:26:10.520\nWell that's cuz I have\nan extra parentheses here.\n\n437\n00:26:10.520 --> 00:26:11.355\n>> They look so good.\n\n438\n00:26:11.355 --> 00:26:12.720\n[LAUGH]\n>> They do, they do.\n\n439\n00:26:13.830 --> 00:26:19.310\nAnd if I ls folder still there, but\nthere's nothing inside of folder now.\n\n440\n00:26:19.310 --> 00:26:21.720\nSo I can just kinda crawl through those.\n\n441\n00:26:21.720 --> 00:26:23.330\nSome of the stream things,\n\n442\n00:26:23.330 --> 00:26:28.650\nthe multiple arguments don't work\nquite like the same, but it's usually\n\n443\n00:26:28.650 --> 00:26:32.040\neasy to get around if you've had some\nexperience with your operating system.\n\n444\n00:26:32.040 --> 00:26:35.400\n>> Yeah, and it keeps you from\nhaving to jump platforms, right?\n\n445\n00:26:35.400 --> 00:26:38.757\nWhat's the point of writing all these\nBash scripts that do certain things and\n\n446\n00:26:38.757 --> 00:26:41.580\nthen try to have them work\nwith your Python scripts.\n\n447\n00:26:41.580 --> 00:26:44.120\nJust, if your in Python,\nyou know how to use Python,\n\n448\n00:26:44.120 --> 00:26:48.690\nuse Python has the ability to do all\nthese things for you within itself, so\n\n449\n00:26:48.690 --> 00:26:52.480\nit just doesn't make sense to try to,\nlike I said, cross platform.\n\n450\n00:26:52.480 --> 00:26:55.630\n>> And one of the great things\nabout Python is if I write this and\n\n451\n00:26:55.630 --> 00:27:00.150\nI'm running it on a Linux system\nit uses kind of those OS processes\n\n452\n00:27:00.150 --> 00:27:05.154\nIf I go to Windows based systems,\nI will actually get C:\\\\.\n\n453\n00:27:05.154 --> 00:27:10.170\nThose path names instead of a Linux\nstyled path names, but then\n\n454\n00:27:10.170 --> 00:27:15.490\nremove dir would still remove folders,\nor remove would still remove files.\n\n455\n00:27:15.490 --> 00:27:16.040\n>> Yeah, that's cool.\n\n456\n00:27:16.040 --> 00:27:20.290\nSo it gives you a standard set\nof commands across OS platforms.\n\n457\n00:27:20.290 --> 00:27:21.770\n>> It does, it does.\n\n458\n00:27:21.770 --> 00:27:26.920\nAnd luckily Daniel, with these tools, the\ntools that we've seen before, we're right\n\n459\n00:27:26.920 --> 00:27:30.840\non the precipice of some interesting,\nwell I think it's interesting,\n\n460\n00:27:30.840 --> 00:27:34.350\nI hope you think it's interesting, I hope\neverybody else thinks it's interesting.\n\n461\n00:27:34.350 --> 00:27:37.010\nI think that'll kind of do it for\nour OS and\n\n462\n00:27:37.010 --> 00:27:40.580\nimport, how we use these\nstandard library functions.\n\n463\n00:27:40.580 --> 00:27:41.260\n>> Well excellent.\n\n464\n00:27:41.260 --> 00:27:45.695\nI cannot wait to see how this\nculminates into our final product.\n\n465\n00:27:45.695 --> 00:27:48.153\nBeing able to take everything\nthat we've learned and\n\n466\n00:27:48.153 --> 00:27:50.402\nactually create something\nawesome out of that.\n\n467\n00:27:50.402 --> 00:27:52.466\nJustin, thank you for joining us today and\n\n468\n00:27:52.466 --> 00:27:56.250\nexplaining how we can use Python through\nwork in cyber operating systems, and\n\n469\n00:27:56.250 --> 00:28:00.180\nplay around with the cool modules to\nbuilt our understand library is well.\n\n470\n00:28:00.180 --> 00:28:01.910\nThat being said,\nit looks like we've wrapped up yet\n\n471\n00:28:01.910 --> 00:28:05.690\nanother great episode, hopefully you guys\nenjoyed it and learned something from it.\n\n472\n00:28:05.690 --> 00:28:08.751\nSigning off for IT Pro TV,\nI've been your host Daniel Lowry.\n\n473\n00:28:08.751 --> 00:28:09.924\n>> And I'm Justin Denison.\n\n474\n00:28:09.924 --> 00:28:11.820\n>> And we'll see you next time.\n\n475\n00:28:11.820 --> 00:28:19.720\n[MUSIC]\n\n",
          "vimeoId": "158190683"
        },
        {
          "description": "In this episode, Daniel and Justin show you how to take all they've taught you so far and put it to use in one program. They use variables, lists, dictionaries, file manipulation, etc. to create a program that parses through text files, looks for desired text, and outputs to a comma separated value(CSV) file for further analysis. This is a culmination of all your new Python skills!",
          "length": "1718",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-12-putting_it_all_together-030616-1.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-12-putting_it_all_together-030616-1-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/pythonprogramming/pythonprogramming-1-12-putting_it_all_together-030616-1-sm.jpg",
          "title": "Putting it all Together",
          "transcript": "WEBVTT\n\n1\n00:00:00.006 --> 00:00:07.881\n[MUSIC]\n\n2\n00:00:07.881 --> 00:00:12.230\nAlright, greetings everyone and welcome\nto another great episode of ITPROTV.\n\n3\n00:00:12.230 --> 00:00:14.240\nI'm your host, Daniel Lowrie, and\n\n4\n00:00:14.240 --> 00:00:18.750\nin today's episode, well we are finishing\nup our programming with Python series.\n\n5\n00:00:18.750 --> 00:00:20.380\nHopefully you guys have enjoyed it so far.\n\n6\n00:00:20.380 --> 00:00:23.170\nJoining us back in the studio\nagain today is our good friend and\n\n7\n00:00:23.170 --> 00:00:25.880\nmentor when it comes to Python, Mr.\nJustin Dennison.\n\n8\n00:00:25.880 --> 00:00:27.120\nJustin, welcome back, sir.\n\n9\n00:00:27.120 --> 00:00:27.950\n>> Thanks for having me.\n\n10\n00:00:27.950 --> 00:00:32.740\nWe're finally at a point to where we can\nkind of put all of these tools that we've\n\n11\n00:00:32.740 --> 00:00:36.420\nbeen accumulating over the last\nfew shows and put them to work.\n\n12\n00:00:36.420 --> 00:00:41.170\nLike how would we actually\nuse these In the context of\n\n13\n00:00:41.170 --> 00:00:46.000\nlooking at server logs or looking at\nprocessed logs or even just doing\n\n14\n00:00:46.000 --> 00:00:51.200\nsome maybe nice little side projects like,\nwhat's called a frequency analysis where I\n\n15\n00:00:51.200 --> 00:00:54.040\ncan do character counts of\nsomething that's encrypted.\n\n16\n00:00:54.040 --> 00:00:57.210\nAnd if it 's not real secure, I can make\npretty good guesses and do a find and\n\n17\n00:00:57.210 --> 00:01:00.230\nreplace and\nbreak a lot of encryption algorithms.\n\n18\n00:01:00.230 --> 00:01:03.890\nNot something like RSA or anything\nlike that but like Caesar Ciphers or\n\n19\n00:01:03.890 --> 00:01:05.770\nShift Cyphers or things like that.\n\n20\n00:01:05.770 --> 00:01:09.260\nBut before we get into that,\nlet me kind of set the scene.\n\n21\n00:01:09.260 --> 00:01:10.930\nHere's what I've done.\n\n22\n00:01:10.930 --> 00:01:15.210\nFinding server files, server logs,\nthat's kind of weird and\n\n23\n00:01:15.210 --> 00:01:19.190\nmaybe, maybe you know something\nabout those or maybe you don't.\n\n24\n00:01:19.190 --> 00:01:22.500\nSo I've tried to take\nan approach of I'm gonna pretend\n\n25\n00:01:22.500 --> 00:01:27.630\nthat these text files are server\nlogs when in fact they are stories.\n\n26\n00:01:27.630 --> 00:01:32.560\nI've went to project Gutenberg, which\nif you don't know is a way to grab out\n\n27\n00:01:32.560 --> 00:01:39.750\nof copyright or, kind of public domain,\nyeah, public domain stories,\n\n28\n00:01:39.750 --> 00:01:44.220\nand how do we how do\nwe sift through these?\n\n29\n00:01:44.220 --> 00:01:48.404\nAnd these are hundreds of pages long and\nthey are just simple text files.\n\n30\n00:01:48.404 --> 00:01:50.170\nSo I went to Project Gutenberg.\n\n31\n00:01:50.170 --> 00:01:51.580\nI have those up.\n\n32\n00:01:51.580 --> 00:01:55.250\nAnd now I'm gonna tart sifting through\nthose and just looking for keywords,\n\n33\n00:01:55.250 --> 00:01:59.790\nlike I would in a server file or\nin a log file.\n\n34\n00:01:59.790 --> 00:02:04.770\nSo let's see how these all works together.\n\n35\n00:02:04.770 --> 00:02:09.923\nSo first off, I'm going to make my,\n\n36\n00:02:09.923 --> 00:02:13.081\nlet's just make it a,\n\n37\n00:02:13.081 --> 00:02:18.760\ncall it searcher.py, sudo chmod +x.\n\n38\n00:02:18.760 --> 00:02:20.835\nI definitely did not spell that correctly.\n\n39\n00:02:20.835 --> 00:02:24.130\n[LAUGH] And so we're gonna fix that.\n\n40\n00:02:24.130 --> 00:02:28.810\nSo I'm going to move\nthat to searcher.py and\n\n41\n00:02:30.710 --> 00:02:36.540\nso I think we're actually good\nto go to hop over into Atom and\n\n42\n00:02:36.540 --> 00:02:40.520\nsee all of these things,\nhow they, how we can use these.\n\n43\n00:02:40.520 --> 00:02:42.690\nI have Bram Stoker's Dracula.\n\n44\n00:02:42.690 --> 00:02:45.930\nI have Frankenstein by Mary Shelley.\n\n45\n00:02:45.930 --> 00:02:50.250\nAnd then I have Sherlock Holmes\nby Sir Arthur Conan Doyle.\n\n46\n00:02:50.250 --> 00:02:51.600\nSo some great stories.\n\n47\n00:02:53.860 --> 00:02:58.930\nMy push for this was everybody was like,\nit's not actually Frankenstein,\n\n48\n00:02:58.930 --> 00:03:00.630\nit's Frankenstein's Monster.\n\n49\n00:03:00.630 --> 00:03:01.720\nSo I was like, I wonder,\n\n50\n00:03:01.720 --> 00:03:06.470\nthe story, how many times is the word\nmonster used in Frankenstein?\n\n51\n00:03:06.470 --> 00:03:08.580\nI don't know, let's find out.\n\n52\n00:03:08.580 --> 00:03:12.045\nSo I'm gonna add my shebang here and\n\n53\n00:03:12.045 --> 00:03:16.520\nsay#!/user/local/bin/python and\n\n54\n00:03:16.520 --> 00:03:20.200\nthat's my Python interpreter.\n\n55\n00:03:20.200 --> 00:03:22.220\nThat's the one that's currently\nrunning on my computer.\n\n56\n00:03:22.220 --> 00:03:25.650\nYours may be in a different place if\nyou're on Starnex systems, just type which\n\n57\n00:03:25.650 --> 00:03:30.490\npython in a terminal and it will give you\na path that and now this is executable.\n\n58\n00:03:30.490 --> 00:03:36.118\nSo set up my main chunk here, and\n\n59\n00:03:36.118 --> 00:03:41.961\nthis just runs as an executable.\n\n60\n00:03:41.961 --> 00:03:46.467\nOther stuff would run, but I like to have\nthis because I can use functions and\n\n61\n00:03:46.467 --> 00:03:50.565\nnot have to worry about what's\nactually running when I run the file.\n\n62\n00:03:50.565 --> 00:03:55.055\nWell, if I run, from the terminal,\nI know the main section's what's running,\n\n63\n00:03:55.055 --> 00:03:59.130\nthe section definitions are just there for\nconvenience for me.\n\n64\n00:03:59.130 --> 00:04:01.090\nSo let's start with Frankenstein.\n\n65\n00:04:01.090 --> 00:04:04.150\nI'm gonna start just with one file and\nkind of build this up.\n\n66\n00:04:04.150 --> 00:04:07.500\nAnd this emulates how you would go\nabout programming something of a large\n\n67\n00:04:07.500 --> 00:04:12.830\ncomplexity, and I find that when people\nstart, they get really overwhelmed.\n\n68\n00:04:12.830 --> 00:04:15.520\nLook, I don't know all these\nthings that are going on.\n\n69\n00:04:15.520 --> 00:04:18.790\nAnd that's typically not how\nanybody starts programming.\n\n70\n00:04:18.790 --> 00:04:20.180\nYou take it little bite size,\n\n71\n00:04:20.180 --> 00:04:24.150\nyou iterate through these just like\nyou would in normal programming.\n\n72\n00:04:24.150 --> 00:04:28.993\nSo let's open, so with open, and\n\n73\n00:04:28.993 --> 00:04:33.502\nI'm inside of this directory so\n\n74\n00:04:33.502 --> 00:04:39.030\nI'm gonna open and just read in.\n\n75\n00:04:39.030 --> 00:04:44.160\nSo with open as f we saw that that's\na context manager, I can read those in.\n\n76\n00:04:44.160 --> 00:04:50.546\nSo I can say frankenstein_text\n\n77\n00:04:52.854 --> 00:04:55.250\nand just say f.read.\n\n78\n00:04:55.250 --> 00:05:00.450\nAnd I'm gonna read in all of those,\ncuz I'm just\n\n79\n00:05:02.490 --> 00:05:07.478\ngoing to run through each word and\nactually I'm gonna go ahead and say,\n\n80\n00:05:07.478 --> 00:05:15.550\nfrankenstein_text = frankenstein_text,\n\n81\n00:05:15.550 --> 00:05:20.780\nwell I should maybe pick a better\nvariable name that's just easier to say.\n\n82\n00:05:20.780 --> 00:05:25.250\nAnd I'm gonna split that just on spaces,\nso\n\n83\n00:05:25.250 --> 00:05:31.510\nI'm gonna get every word in\nthere as a list of elements.\n\n84\n00:05:31.510 --> 00:05:35.693\nBut just to make sure,\nlet's go ahead and run this print, and\n\n85\n00:05:35.693 --> 00:05:39.557\nI'm just gonna say\nprint(frankenstein_text), and\n\n86\n00:05:39.557 --> 00:05:43.419\nI'm just gonna print the first\n100 elements, just so\n\n87\n00:05:43.419 --> 00:05:48.353\nit doesn't go blah on the screen so\nI can kind of make heads or tails of it.\n\n88\n00:05:52.074 --> 00:05:55.311\nSo there we go, and\nit looks like I do in fact,\n\n89\n00:05:55.311 --> 00:05:58.480\nI have some weird unicode characters here.\n\n90\n00:05:58.480 --> 00:06:04.416\nI don't care about that, but I have\nindividual words kind of pieced out,\n\n91\n00:06:04.416 --> 00:06:07.895\nand now I can iterate through those.\n\n92\n00:06:07.895 --> 00:06:12.562\nSo, okay, I have that, and\n\n93\n00:06:12.562 --> 00:06:18.006\nI can start here and just say, for\n\n94\n00:06:18.006 --> 00:06:23.077\nword in frankenstein_text.\n\n95\n00:06:23.077 --> 00:06:30.938\nIf word == monster then print,\n\n96\n00:06:30.938 --> 00:06:36.560\nlet's just say there.\n\n97\n00:06:38.410 --> 00:06:39.630\nSo let's go run that.\n\n98\n00:06:40.880 --> 00:06:43.500\nAnd it's looks like I can count those and\n\n99\n00:06:43.500 --> 00:06:46.540\nfigure out how many times the word\nmonster is used in Frankenstein.\n\n100\n00:06:46.540 --> 00:06:48.650\nAnd that was fast, right?\n\n101\n00:06:48.650 --> 00:06:54.810\nI had an idea and in what, nine lines\nof code, I have a working prototype.\n\n102\n00:06:54.810 --> 00:06:56.340\nOne of the best things about Python.\n\n103\n00:06:56.340 --> 00:07:01.490\nI can tell you, I have some Java\nexperience, man, I actually\n\n104\n00:07:01.490 --> 00:07:05.880\nalmost had a horrible flashback just now\nthinking about reading in files in Java.\n\n105\n00:07:05.880 --> 00:07:07.130\nBut I think we can make this better.\n\n106\n00:07:07.130 --> 00:07:09.060\nI now have a better idea.\n\n107\n00:07:09.060 --> 00:07:14.310\nLet's see how many times we can\ncompare Frankenstein, the word, and\n\n108\n00:07:14.310 --> 00:07:20.480\nmonster, the word, were in this text and\nlet's actually keep a count.\n\n109\n00:07:20.480 --> 00:07:24.080\nSo, okay, I need to go back and\nchange some things and\n\n110\n00:07:24.080 --> 00:07:28.540\nsay word_count.\n\n111\n00:07:29.760 --> 00:07:34.380\nAnd I'm just gonna make a dictionary and\nsay, okay, frankenstein,\n\n112\n00:07:35.420 --> 00:07:41.130\nand I know that's a name so\nI'm going to say, capital F and\n\n113\n00:07:41.130 --> 00:07:43.860\nI'm gonna set that to 0.\n\n114\n00:07:43.860 --> 00:07:51.400\nAnd I'm gonna say monster and\nset that to 0 as well.\n\n115\n00:07:51.400 --> 00:07:56.790\nSo now I'm looking for these words.\n\n116\n00:07:56.790 --> 00:08:00.969\nBut I actually need a list of\nwords that I'm looking for so\n\n117\n00:08:00.969 --> 00:08:03.679\nI can see Am I looking at what this is?\n\n118\n00:08:03.679 --> 00:08:08.320\nSo, search_words and this is gonna be\n\n119\n00:08:08.320 --> 00:08:13.250\na little duplicated, but that's okay.\n\n120\n00:08:13.250 --> 00:08:15.940\nI think it's easier to reason\nabout when we do this.\n\n121\n00:08:18.480 --> 00:08:19.570\nSo then monster.\n\n122\n00:08:21.470 --> 00:08:24.580\nAnd now I'm gonna change\nthis a little bit.\n\n123\n00:08:24.580 --> 00:08:28.670\nI still want the text, I want to read it\nin, I want to split it into words, and\n\n124\n00:08:28.670 --> 00:08:33.360\nthen I'm gonna go through here but\nI want to change this part.\n\n125\n00:08:35.210 --> 00:08:40.554\nIf word in search_words then\n\n126\n00:08:40.554 --> 00:08:47.520\nI want to say word_count of the word.\n\n127\n00:08:47.520 --> 00:08:51.929\nAnd I want to increment it by one.\n\n128\n00:08:51.929 --> 00:08:55.540\nSo every time I come across that word,\nI want to increment it by one and\n\n129\n00:08:56.870 --> 00:09:00.980\nI want to print word count.\n\n130\n00:09:03.800 --> 00:09:07.840\nFrankenstein occurs 8 times,\nmonsters occurs 18 times in there.\n\n131\n00:09:07.840 --> 00:09:10.490\n>> So, most nicer output format just by\n\n132\n00:09:10.490 --> 00:09:13.120\nadding a little bit of extra\ncode giving us some formatting.\n\n133\n00:09:13.120 --> 00:09:14.110\n>> Exactly.\n\n134\n00:09:14.110 --> 00:09:16.680\nSo, you know Daniel I'm\ngonna pick on you a little.\n\n135\n00:09:16.680 --> 00:09:20.730\nWhat are some other words that you\nthink might come up regularly?\n\n136\n00:09:20.730 --> 00:09:23.000\nI mean,\nit can be words related to the story or\n\n137\n00:09:23.000 --> 00:09:25.140\njust words that you're like\nI wonder if that's in there.\n\n138\n00:09:25.140 --> 00:09:31.500\n>> Okay, well let's go with\nhow about the word afraid.\n\n139\n00:09:31.500 --> 00:09:33.070\n>> Okay, afraid.\n\n140\n00:09:33.070 --> 00:09:37.830\nAnd I'm gonna add another one in there,\nthe.\n\n141\n00:09:37.830 --> 00:09:41.500\nAll right, that's a common word\nthat we use in English, and\n\n142\n00:09:41.500 --> 00:09:45.050\nI'm just gonna start that there and\nthen I'm gonna add it to my list here.\n\n143\n00:09:45.050 --> 00:09:50.030\nSo, afraid and the.\n\n144\n00:09:50.030 --> 00:09:52.550\nOkay, so I have my search words.\n\n145\n00:09:52.550 --> 00:09:54.555\nAnd actually, just by changing that,\n\n146\n00:09:54.555 --> 00:09:57.970\nI now have a new version that I can\ngo through and look very quickly.\n\n147\n00:09:57.970 --> 00:10:01.837\nHey, Frankenstein is 8 times,\n\n148\n00:10:01.837 --> 00:10:07.094\nthe is 3,409 times, afraid is 1 time.\n\n149\n00:10:07.094 --> 00:10:10.646\nIsn't that kind of surprising\nin the Frankenstein text?\n\n150\n00:10:10.646 --> 00:10:17.643\n>> Yeah, especially since it's kind of\na horror, a lot of dark theme is going on.\n\n151\n00:10:17.643 --> 00:10:20.061\nYou think there would be more\npeople afraid but apparently not,\n\n152\n00:10:20.061 --> 00:10:21.970\nit's a very sunny, good place to live.\n\n153\n00:10:21.970 --> 00:10:23.050\nFrankenstein's monster.\n\n154\n00:10:23.050 --> 00:10:26.990\n>> Right, so\nI could do a word analysis on this, and\n\n155\n00:10:26.990 --> 00:10:28.930\nsometimes you find surprising things.\n\n156\n00:10:28.930 --> 00:10:33.440\nBut Frankenstein could be easily\nreplaced by the word error.\n\n157\n00:10:33.440 --> 00:10:36.890\nOr something of that nature, or\nlog, or something like that.\n\n158\n00:10:36.890 --> 00:10:39.900\nWhere you know how these\nare gonna be formatted.\n\n159\n00:10:39.900 --> 00:10:41.330\nAnd I'm gonna do you one even better.\n\n160\n00:10:41.330 --> 00:10:44.180\nWhen this runs,\ninstead of printing it out,\n\n161\n00:10:44.180 --> 00:10:49.138\ncuz this is still not the greatest, how\nabout we create a new file that is a CSV.\n\n162\n00:10:49.138 --> 00:10:54.710\nI'll puts it so we can open it inside\nof like a spreadsheet you tell it.\n\n163\n00:10:54.710 --> 00:10:55.460\n>> Awesome.\n\n164\n00:10:55.460 --> 00:10:57.970\n>> So let's do that and,\n\n165\n00:10:59.890 --> 00:11:04.100\nI'm actually gonna write a function\nthat just prints out word count.\n\n166\n00:11:04.100 --> 00:11:12.050\nSo print_csv and\nit takes a dictionary of word_count.\n\n167\n00:11:13.140 --> 00:11:15.320\nSo okay, I know what this is.\n\n168\n00:11:15.320 --> 00:11:19.720\nOr better yet, this would probably\nmake_csv, that's probably a better term.\n\n169\n00:11:20.720 --> 00:11:24.170\nNow, I'm not assigning a variable,\nI'm just passing off this functionality.\n\n170\n00:11:24.170 --> 00:11:30.298\nIt makes it a little more readable\nto me when I have it like this.\n\n171\n00:11:30.298 --> 00:11:37.630\nSo, make_csv and this\n\n172\n00:11:37.630 --> 00:11:41.980\nis going to be a word count dictionary,\nso it's gonna look just like this.\n\n173\n00:11:41.980 --> 00:11:49.090\nAnd so with open, and\nmaybe I should tell it how to save this.\n\n174\n00:11:49.090 --> 00:11:55.131\nSo I'll look at this and I go,\nokay, maybe I need a file name.\n\n175\n00:11:55.131 --> 00:12:02.062\nAnd then, frankenstein, analysis.\n\n176\n00:12:05.447 --> 00:12:07.409\n.csv.\n\n177\n00:12:07.409 --> 00:12:10.130\nOkay so a comma separated file.\n\n178\n00:12:10.130 --> 00:12:11.590\nI'm like okay,\n\n179\n00:12:11.590 --> 00:12:14.600\nI'm gonna start with word count,\nit's probably easier to have file names.\n\n180\n00:12:14.600 --> 00:12:19.240\nSo, when I open this file name,\nas a writer,\n\n181\n00:12:20.700 --> 00:12:27.560\nas f, right, I'm just gonna say f, for\n\n182\n00:12:28.690 --> 00:12:37.070\nthe key value in word_count.items.\n\n183\n00:12:37.070 --> 00:12:44.570\nI'm going to, f.write, and\nmaybe we should put this in a variable.\n\n184\n00:12:44.570 --> 00:12:53.120\nSo this would be a row,\nand then a new line.\n\n185\n00:12:53.120 --> 00:12:55.250\nSo this would be the first element.\n\n186\n00:12:55.250 --> 00:12:59.759\nSo the first column, a comma, the next\ncolumn, and then go to the next line.\n\n187\n00:13:02.540 --> 00:13:05.690\nAnd then, a key value.\n\n188\n00:13:07.200 --> 00:13:10.690\nAnd notice I've tried to make this as\ngeneral as possible because I know it's\n\n189\n00:13:10.690 --> 00:13:15.780\na dictionary of key values that I want and\ncomma separator value or\n\n190\n00:13:15.780 --> 00:13:19.488\ncomma separated form and\nI know I can give it a file name.\n\n191\n00:13:19.488 --> 00:13:24.410\nCool, well let's see if it works.\n\n192\n00:13:24.410 --> 00:13:27.525\nThat's the real proof there, does it work?\n\n193\n00:13:27.525 --> 00:13:30.290\n>> Write code all day long and\nget a whole lot of nothing back, right?\n\n194\n00:13:30.290 --> 00:13:33.880\nThe whole point is I want this thing\nto do what I think it should do.\n\n195\n00:13:33.880 --> 00:13:37.710\n>> Yep, so, hm, what have we got here?\n\n196\n00:13:37.710 --> 00:13:39.570\nThere's my file.\n\n197\n00:13:44.180 --> 00:13:47.500\nDid I, wait a minute.\n\n198\n00:13:49.290 --> 00:13:51.200\nI forgot something.\n\n199\n00:13:51.200 --> 00:13:53.755\nI forgot to actually write the file.\n\n200\n00:13:53.755 --> 00:13:56.810\n[LAUGH] So\nI want to write every row that I create.\n\n201\n00:13:56.810 --> 00:13:58.830\nSo great debugging skills there Justin.\n\n202\n00:13:58.830 --> 00:13:59.442\n>> Yep.\n[LAUGH]\n\n203\n00:13:59.442 --> 00:14:00.434\n>> There's your problem.\n\n204\n00:14:00.434 --> 00:14:01.423\nThere's your problem.\n\n205\n00:14:02.540 --> 00:14:06.150\nAnd I actually do have\ncomma separated values, and\n\n206\n00:14:06.150 --> 00:14:10.300\nI think what's really powerful is,\ncan I open this in a spreadsheet utility?\n\n207\n00:14:10.300 --> 00:14:11.310\n>> Yeah, that'd be cool.\n\n208\n00:14:11.310 --> 00:14:16.450\n>> Well, it just so\nhappens that I have spreadsheet utility.\n\n209\n00:14:16.450 --> 00:14:22.000\nLet's open file, and let's see here.\n\n210\n00:14:22.000 --> 00:14:23.260\nWhere do I have this?\n\n211\n00:14:24.610 --> 00:14:29.498\nSo learning Python,\nthis is putting it all together and\n\n212\n00:14:29.498 --> 00:14:33.666\nFrankenstein analysis and,\nis it gonna work?\n\n213\n00:14:37.487 --> 00:14:39.704\nWhere is csv?\n\n214\n00:14:42.687 --> 00:14:43.477\nThere we go.\n\n215\n00:14:50.003 --> 00:14:55.125\nSo I open it and I, in fact it's\n\n216\n00:14:55.125 --> 00:15:01.626\nnot gonna let me zoom in here as easily.\n\n217\n00:15:01.626 --> 00:15:06.610\nView, zoom, 150.\n\n218\n00:15:06.610 --> 00:15:12.821\nSo as you'll see, I actually have a file\nthat I can open in a spreadsheet.\n\n219\n00:15:12.821 --> 00:15:18.233\nAnd now I can use all of my spreadsheet\nunderstanding to further analyze these.\n\n220\n00:15:18.233 --> 00:15:23.120\nUse Python to create information\nthat I can then manipulate.\n\n221\n00:15:23.120 --> 00:15:24.500\n>> This is very, very cool stuff.\n\n222\n00:15:24.500 --> 00:15:25.570\nThis is the meat and potatoes.\n\n223\n00:15:25.570 --> 00:15:30.500\nWhy we wanted to do a Python course,\nto show you exactly how flexible this\n\n224\n00:15:30.500 --> 00:15:34.880\nlanguage actually is and\nhow powerful it is as well.\n\n225\n00:15:34.880 --> 00:15:39.130\nNow Justin's output of the necessary\ninformation into a CSV file.\n\n226\n00:15:39.130 --> 00:15:42.020\nNow anybody can start an analysis on that.\n\n227\n00:15:42.020 --> 00:15:45.307\nHe can email that to someone and\nsay hey here is our statistic guys,\n\n228\n00:15:45.307 --> 00:15:49.258\nneed to take a look at that and see what's\ngoing on with this Frankenstein book.\n\n229\n00:15:49.258 --> 00:15:51.911\nWe've got a lot of different\ntypes of words being used there.\n\n230\n00:15:51.911 --> 00:15:55.117\nOr whatever the case maybe, in this course\nwe're having a good time with it and\n\n231\n00:15:55.117 --> 00:15:55.951\nkind of having fun.\n\n232\n00:15:55.951 --> 00:16:00.046\nBut this could have easily been a log file\nand if I'm just looking for errors or\n\n233\n00:16:00.046 --> 00:16:02.300\nif I'm looking for a specific error.\n\n234\n00:16:02.300 --> 00:16:07.940\nMaybe I'm looking for authorization errors\nor I'm looking for system errors itself.\n\n235\n00:16:07.940 --> 00:16:12.810\nThis is going to give me that flexibility\nto write my own program to output that out\n\n236\n00:16:12.810 --> 00:16:19.350\nto a CSV so all I gotta do is open up my\nfavorites, type of spreadsheet program.\n\n237\n00:16:19.350 --> 00:16:22.040\nMaybe it's Excel, maybe it's Libra Office,\n\n238\n00:16:22.040 --> 00:16:24.610\nwhatever the case may be,\nthrow it in there, take and look, and\n\n239\n00:16:24.610 --> 00:16:27.560\nget only the pertinent information\nthat's necessary for me.\n\n240\n00:16:27.560 --> 00:16:31.820\nBecause goodness knows that we spend\nplenty enough time pouring through logs\n\n241\n00:16:31.820 --> 00:16:36.210\nand application files and all that other\nstuff looking for the pertinent data, and\n\n242\n00:16:36.210 --> 00:16:39.650\nyes again we've talked about it before,\nthere is third party systems that will do\n\n243\n00:16:39.650 --> 00:16:43.960\nthat but you're confined to\nthose systems themselves.\n\n244\n00:16:43.960 --> 00:16:48.330\nWouldn't it be nice for you to be able\nto create your own customized script\n\n245\n00:16:48.330 --> 00:16:51.770\nthat does exactly what you need, only\ngives you the outputs you're looking for.\n\n246\n00:16:51.770 --> 00:16:53.090\nAnd if you ever need to make a change,\n\n247\n00:16:53.090 --> 00:16:56.810\nwell you can jump right back in there,\ncreate the function necessary, and\n\n248\n00:16:56.810 --> 00:16:58.900\nmake that change,\nget the output you're looking for.\n\n249\n00:16:58.900 --> 00:17:00.020\nJustin, very cool so far.\n\n250\n00:17:00.020 --> 00:17:01.750\nAnything else that we\nhave to take a look at?\n\n251\n00:17:01.750 --> 00:17:02.690\n>> We're not done yet.\n\n252\n00:17:02.690 --> 00:17:03.600\n>> But wait there's more?\n\n253\n00:17:03.600 --> 00:17:05.350\n>> But wait, there's more.\n\n254\n00:17:05.350 --> 00:17:06.895\nIf you act now.\n\n255\n00:17:06.895 --> 00:17:08.405\n[LAUGH]\n>> What's amazing is.\n\n256\n00:17:08.405 --> 00:17:11.290\n>> [COUGH] We have this general look here,\n\n257\n00:17:11.290 --> 00:17:14.500\nI'm gonna do something that's\ncalled a re-factor, I'm like okay.\n\n258\n00:17:14.500 --> 00:17:17.230\nI don't wanna open just frankenstein.txt,\n\n259\n00:17:17.230 --> 00:17:21.130\nI wanna open all of the files that\nI have in this particular folder.\n\n260\n00:17:21.130 --> 00:17:22.950\nWell we have OS tools,\n\n261\n00:17:22.950 --> 00:17:26.670\nwe can make a function that\ntakes all of these requirements.\n\n262\n00:17:26.670 --> 00:17:32.060\nAnd then would just spit back\na dictionary with this information and\n\n263\n00:17:32.060 --> 00:17:36.090\nI can just iterate through all that and\nget a nice little tidy package and\n\n264\n00:17:36.090 --> 00:17:37.100\nmake multiple files.\n\n265\n00:17:38.380 --> 00:17:39.240\nHandy dandy.\n\n266\n00:17:40.520 --> 00:17:41.980\n>> Believe it can be done, sir?\n\n267\n00:17:41.980 --> 00:17:46.416\n>> Well, it might not be [LAUGH] but\nwe will definitely give it a try.\n\n268\n00:17:46.416 --> 00:17:52.120\nLet's just say get_file Info.\n\n269\n00:17:52.120 --> 00:17:56.680\nAnd it's going to take the file name, and\n\n270\n00:17:56.680 --> 00:18:01.610\nit's going to take the search words, and\n\n271\n00:18:01.610 --> 00:18:05.690\nnotice that I can use the same variables\nhere in this parameter and I can,\n\n272\n00:18:05.690 --> 00:18:12.220\nmy main method because these\nare these are disjointed.\n\n273\n00:18:12.220 --> 00:18:14.500\nOne is global, one is functionally scoped.\n\n274\n00:18:14.500 --> 00:18:16.840\nSo, what do I do?\n\n275\n00:18:16.840 --> 00:18:19.340\nWell, I want to do this part.\n\n276\n00:18:19.340 --> 00:18:22.460\nSo I'm just going to grab this, cut it.\n\n277\n00:18:22.460 --> 00:18:25.360\nNow I may have to make some changes.\n\n278\n00:18:25.360 --> 00:18:29.100\nPaste it, and\nthen this is just going to be text.\n\n279\n00:18:29.100 --> 00:18:33.006\nSo, I'm going to change\nfrankenstein_text to just text.\n\n280\n00:18:35.706 --> 00:18:38.988\nBecause now we're generalizing this, and\n\n281\n00:18:38.988 --> 00:18:44.310\ninstead of opening frankenstein.txt,\nI'm going to actually tell it\n\n282\n00:18:44.310 --> 00:18:49.363\nwhat to open as a parameter to\nthe function and search words is well,\n\n283\n00:18:49.363 --> 00:18:54.436\nI'm still using that already, so\nthis was a pretty good refactor.\n\n284\n00:18:54.436 --> 00:18:56.400\nAnd we need to make sure it works.\n\n285\n00:18:56.400 --> 00:18:57.670\nWe have a commonly,\n\n286\n00:18:57.670 --> 00:19:03.200\nan already existing setup that we\nknow exactly what it should give me,\n\n287\n00:19:03.200 --> 00:19:08.690\nand I'm going to delete this Frankenstein\nanalysis, just to see if it does work.\n\n288\n00:19:08.690 --> 00:19:09.290\nMove to trash.\n\n289\n00:19:11.400 --> 00:19:16.340\nSo, I'm gonna come over here, and the one\n\n290\n00:19:16.340 --> 00:19:21.680\nthing that it's not gonna work right now,\nit's not going to give me this output.\n\n291\n00:19:21.680 --> 00:19:23.060\nRight?\n\n292\n00:19:23.060 --> 00:19:26.440\nWe have to change this a little bit.\n\n293\n00:19:26.440 --> 00:19:30.625\nSo for word and\ntext if words in search words,\n\n294\n00:19:30.625 --> 00:19:35.140\nthere's one thing that we have to do,\n\n295\n00:19:35.140 --> 00:19:40.590\nI need to create a result\nwhich is like word count.\n\n296\n00:19:42.170 --> 00:19:43.510\nAnd i'm gonna making an empty dictionary.\n\n297\n00:19:45.550 --> 00:19:47.860\nAnd if word in search words.\n\n298\n00:19:47.860 --> 00:19:53.428\nI need one final qualifying\nstatement if word\n\n299\n00:19:53.428 --> 00:19:58.710\nin result, then result [word] += 1.\n\n300\n00:19:58.710 --> 00:20:00.390\nSo it's all ready there.\n\n301\n00:20:00.390 --> 00:20:02.310\nIncrement is count by one.\n\n302\n00:20:02.310 --> 00:20:07.412\nOtherwise, Uh-oh,\nyou about let me mess up there Daniel.\n\n303\n00:20:07.412 --> 00:20:13.410\n>> [LAUGH]\n>> Apparently I\n\n304\n00:20:13.410 --> 00:20:15.772\nhave lost the ability to type.\n\n305\n00:20:15.772 --> 00:20:19.873\nOtherwise create a new entry and set it\nequal to one, so now this is general,\n\n306\n00:20:19.873 --> 00:20:22.770\nI can give it whatever list\nof words I'm looking for.\n\n307\n00:20:24.200 --> 00:20:26.860\nAnd I've now created a new tool for\nmy toolbox.\n\n308\n00:20:26.860 --> 00:20:30.090\nThis, hey I can just give it a list\nof words in the file name, and\n\n309\n00:20:30.090 --> 00:20:35.340\nit'll give me an output of how\nmany times do those words appear\n\n310\n00:20:37.380 --> 00:20:40.330\nregardless of the file or\nthe list of words.\n\n311\n00:20:40.330 --> 00:20:43.970\nAnd then finally at the very end,\nI wanna return the result.\n\n312\n00:20:45.170 --> 00:20:46.970\nSo I don't even need this anymore.\n\n313\n00:20:50.430 --> 00:20:51.390\nWhoa careful.\n\n314\n00:20:54.860 --> 00:20:59.760\nSo I want to say word count is equal\n\n315\n00:20:59.760 --> 00:21:04.700\nto get file info for Frankenstein\n\n316\n00:21:06.940 --> 00:21:11.670\ndot txt and I want to give it\nsearch words as a list of words.\n\n317\n00:21:13.020 --> 00:21:16.672\nSo now what's incredibly powerful\nis by creating a function,\n\n318\n00:21:16.672 --> 00:21:19.700\nthis what words am I searching for.\n\n319\n00:21:19.700 --> 00:21:24.285\nI'm going to get file info which\ngives me the word count and\n\n320\n00:21:24.285 --> 00:21:28.974\nthen I'm going to make a csv\nusing a word count as my source.\n\n321\n00:21:28.974 --> 00:21:32.393\n[SOUND] Cross your fingers, Daniel.\n\n322\n00:21:32.393 --> 00:21:33.140\n>> Here we go.\n\n323\n00:21:33.140 --> 00:21:34.320\n>> Here we go.\n\n324\n00:21:34.320 --> 00:21:35.130\n>> Let's light this candle.\n\n325\n00:21:36.320 --> 00:21:40.160\n>> Mm, and there we go.\n\n326\n00:21:40.160 --> 00:21:41.170\n>> Very cool.\n\n327\n00:21:41.170 --> 00:21:42.580\n>> So, there we go.\n\n328\n00:21:42.580 --> 00:21:46.640\nBut now, because I have these generalized\nfunctions, this is the last little bit.\n\n329\n00:21:46.640 --> 00:21:47.300\nAre you ready?\n\n330\n00:21:47.300 --> 00:21:49.190\n>> Yeah, I think you're\ngetting ready to blow my mind.\n\n331\n00:21:49.190 --> 00:21:52.250\nHave an idea that I think I know\nwhere you're going with this.\n\n332\n00:21:52.250 --> 00:21:54.940\n>> So I know that I have multiple files.\n\n333\n00:21:54.940 --> 00:21:56.740\nAnd I'm actually going to\nput these in a folder.\n\n334\n00:21:58.450 --> 00:22:04.970\nSo I'm going to create a new folder and\njust make it a text folder.\n\n335\n00:22:04.970 --> 00:22:09.450\nSo I'm gonna move this here and you\ncould write a program that would go and\n\n336\n00:22:09.450 --> 00:22:11.100\nsearch all of these things out.\n\n337\n00:22:11.100 --> 00:22:13.810\nSo I'm gonna put them in a text folder so\nI know exactly where to look and\n\n338\n00:22:13.810 --> 00:22:19.470\nI don't have to say, disregard the CSV,\ndisregard the weird little lock files.\n\n339\n00:22:19.470 --> 00:22:26.640\nBut I'm going to import OS and I'm just\ngoing to temporarily commit this out.\n\n340\n00:22:28.910 --> 00:22:35.741\nAnd say, hey, print(os.listdir('text')).\n\n341\n00:22:35.741 --> 00:22:39.170\nWe'll see what that does.\n\n342\n00:22:39.170 --> 00:22:41.735\nAnd it gives me all this text.\n\n343\n00:22:41.735 --> 00:22:42.235\n>> Mm-hm.\n\n344\n00:22:44.220 --> 00:22:47.611\nSo now, I'm gonna un-comment these.\n\n345\n00:22:50.030 --> 00:22:57.006\nAnd say for text_file in os.listdir\n\n346\n00:22:57.006 --> 00:23:03.551\nof everything in the text directory\n\n347\n00:23:09.891 --> 00:23:14.775\nI want you to look for these words and\nthis is the name of it and\n\n348\n00:23:14.775 --> 00:23:16.640\nwe have to be careful.\n\n349\n00:23:16.640 --> 00:23:18.470\nI know this is in the text directory.\n\n350\n00:23:18.470 --> 00:23:26.423\nSo, I have to say text slash dot\n\n351\n00:23:29.382 --> 00:23:32.364\nformat(text_file).\n\n352\n00:23:32.364 --> 00:23:39.521\nSo I can say,\nhey go find this in the text directory and\n\n353\n00:23:39.521 --> 00:23:44.928\nthen here, I know in that very end I wanna\n\n354\n00:23:44.928 --> 00:23:52.904\nrename this with the original\ntext like Dracula analysis.\n\n355\n00:23:52.904 --> 00:23:54.530\nFrankenstein analysis.\n\n356\n00:23:57.398 --> 00:23:59.880\nSo I have that and format.\n\n357\n00:23:59.880 --> 00:24:06.690\nAnd I want everything up to\nthe period of the original text file.\n\n358\n00:24:06.690 --> 00:24:10.790\nSo I'm going to, and let's just,\n\n359\n00:24:10.790 --> 00:24:14.280\nI'll pull that in another variable so\nthat's a little bit easier for.\n\n360\n00:24:14.280 --> 00:24:19.608\nSo new_filename equals\n\n361\n00:24:19.608 --> 00:24:24.440\ntext_file.split.\n\n362\n00:24:24.440 --> 00:24:28.620\nI'm gonna split on the period and\nI'm just gonna take the first part.\n\n363\n00:24:29.680 --> 00:24:33.310\nSo that's gonna give me everything\nexcept the dot text part.\n\n364\n00:24:33.310 --> 00:24:38.620\nAnd then I can say format with new,\nfile new.\n\n365\n00:24:38.620 --> 00:24:42.090\nAnd now for every file in that\ndirectory I'm gonna search for\n\n366\n00:24:42.090 --> 00:24:46.145\nthe words, grab the word count, and create\na new analysis for every one of those.\n\n367\n00:24:46.145 --> 00:24:47.000\n>> This is gonna rock.\n\n368\n00:24:47.000 --> 00:24:47.825\n>> This is gonna rock.\n\n369\n00:24:47.825 --> 00:24:49.752\n>> [LAUGH]\n>> Well I hope it rocks.\n\n370\n00:24:49.752 --> 00:24:50.252\n>> Yeah.\n\n371\n00:24:50.252 --> 00:24:53.180\n>> Cuz if it doesn't,\nI'm gonna be a little sad.\n\n372\n00:24:54.870 --> 00:24:56.880\nSyntax error.\n\n373\n00:24:56.880 --> 00:24:58.240\nSo what did I do here?\n\n374\n00:24:58.240 --> 00:24:59.200\nInvalid syntax.\n\n375\n00:25:03.060 --> 00:25:04.545\nI forgot to finish this line.\n\n376\n00:25:04.545 --> 00:25:07.660\n[LAUGH]\n>> Requires a little extra.\n\n377\n00:25:07.660 --> 00:25:12.320\n>> Yeah so go look for that.\n\n378\n00:25:12.320 --> 00:25:14.900\nIn the text directory,\ngo find this text file, and\n\n379\n00:25:14.900 --> 00:25:16.995\nI'm just building this string\nwhich represents a path.\n\n380\n00:25:16.995 --> 00:25:23.699\nget_file_info() takes exactly\ntwo arguments, one given.\n\n381\n00:25:23.699 --> 00:25:24.500\nWhat.\n\n382\n00:25:27.623 --> 00:25:29.467\nSearch_words\n\n383\n00:25:37.536 --> 00:25:45.340\nAnd I have three files analyzed\nin fractions of a second.\n\n384\n00:25:45.340 --> 00:25:47.660\n>> That was pretty incredible, actually.\n\n385\n00:25:47.660 --> 00:25:52.250\nSo, my mind is actually blown here,\nthat was really cool.\n\n386\n00:25:52.250 --> 00:25:57.400\nHe had three files, we wanted to run the\nsame function on each one of those files.\n\n387\n00:25:57.400 --> 00:25:59.990\nAnd instead of going in and\nwriting it over and over and\n\n388\n00:25:59.990 --> 00:26:03.900\nover again for each three of those\ndifferent files, created one thing,\n\n389\n00:26:03.900 --> 00:26:08.620\ncreated all the necessary libraries and\nlists and things that he need to search\n\n390\n00:26:08.620 --> 00:26:12.420\nto get through it, put it all together,\nrun it through one function and\n\n391\n00:26:12.420 --> 00:26:15.640\nthen it says okay, well now I'm moving\ninto this file, I'm moving to that file,\n\n392\n00:26:15.640 --> 00:26:19.420\nI'm moving to the next file and do the\nsame thing, over and over and over again.\n\n393\n00:26:19.420 --> 00:26:19.980\nAnd when I'm done,\n\n394\n00:26:19.980 --> 00:26:23.470\ncreate these three lovely files\nusing their own names as a basis for\n\n395\n00:26:23.470 --> 00:26:27.180\nthe new file name and set them in a folder\nfor him, so that he can check them out.\n\n396\n00:26:27.180 --> 00:26:28.820\nVery, very cool my friend.\n\n397\n00:26:30.150 --> 00:26:31.710\nIs there anymore after that?\n\n398\n00:26:31.710 --> 00:26:33.080\nI don't know how you're gonna top that.\n\n399\n00:26:33.080 --> 00:26:37.550\n>> Well, I will say this pretty much\nencapsulates everything we've done\n\n400\n00:26:37.550 --> 00:26:38.580\nup until this point.\n\n401\n00:26:38.580 --> 00:26:41.880\nRight, we've used lists,\ndictionaries, we didn't touch tuples.\n\n402\n00:26:41.880 --> 00:26:47.720\nI could have made tuples to where get\nfile info returns a new file name or\n\n403\n00:26:47.720 --> 00:26:53.010\nmakes the CSV returns a new file name\nwith actual path and things like that.\n\n404\n00:26:53.010 --> 00:26:57.150\nI could have done that but\nin the sake of time, I decided not to.\n\n405\n00:26:57.150 --> 00:27:00.350\nI used decisions,\nI used dictionaries, I used lists.\n\n406\n00:27:00.350 --> 00:27:03.980\nI used for loops iteration,\nI used my OS utilities.\n\n407\n00:27:03.980 --> 00:27:06.480\nI used creation of functions,\nI used imports.\n\n408\n00:27:06.480 --> 00:27:10.440\nMy shebang all of that stuff\nthat I'm like, you just wait.\n\n409\n00:27:10.440 --> 00:27:12.010\nYou just wait.\n\n410\n00:27:12.010 --> 00:27:13.520\nWe put it all together.\n\n411\n00:27:13.520 --> 00:27:20.750\nAnd in 28 lines of code, and that includes\nline breaks between the functions.\n\n412\n00:27:20.750 --> 00:27:25.390\nIn 28 lines of code I was able to\nsift through entire novels and\n\n413\n00:27:25.390 --> 00:27:29.730\ndo a word analysis and\nthis is just the surface.\n\n414\n00:27:29.730 --> 00:27:31.840\nThere is so much more that you can do but\n\n415\n00:27:31.840 --> 00:27:34.390\nI think it's time to let you\nsimmer on that a little bit.\n\n416\n00:27:34.390 --> 00:27:38.890\n>> That's right let's zip into the blood\nstream, permeate in the brain, think on\n\n417\n00:27:38.890 --> 00:27:43.040\nthese things And start thinking of ways\nin which you can use what Justin has so\n\n418\n00:27:43.040 --> 00:27:47.880\ngraciously shown us in your everyday\nlife and make some cool programs for\n\n419\n00:27:47.880 --> 00:27:51.530\nyourself that work in your environment for\nyour unique situation,\n\n420\n00:27:51.530 --> 00:27:54.960\ndo exactly what you need it to do\ninstead of relying on other stuff.\n\n421\n00:27:54.960 --> 00:27:56.180\nJustin it's so cool.\n\n422\n00:27:56.180 --> 00:28:00.130\nThank you very much for showing us and\ntaking everything that you have shown us\n\n423\n00:28:00.130 --> 00:28:05.390\nthus far in culminating into one really\nawesome program, that's some cool stuff.\n\n424\n00:28:05.390 --> 00:28:08.650\nThat being said it looks like\nwe have finally ended our\n\n425\n00:28:08.650 --> 00:28:10.150\nPython programming series.\n\n426\n00:28:10.150 --> 00:28:13.060\nHopefully you guys have enjoyed it,\nwe had a lot of good times and\n\n427\n00:28:13.060 --> 00:28:14.960\nwe hope you'll learn something as well.\n\n428\n00:28:14.960 --> 00:28:16.690\nAnd we're gonna go ahead and sign off.\n\n429\n00:28:16.690 --> 00:28:19.760\nFor ITProTV,\nI've been your host Daniel Lowrie.\n\n430\n00:28:19.760 --> 00:28:22.270\n>> And can I say one quick\nthing before our final signoff?\n\n431\n00:28:22.270 --> 00:28:24.470\n>> Go ahead.\n>> There's a word in the community.\n\n432\n00:28:24.470 --> 00:28:26.600\nYou have now become a Pythonista.\n\n433\n00:28:26.600 --> 00:28:27.160\n>> A Pythonista.\n\n434\n00:28:27.160 --> 00:28:27.900\n>> I'm Justin Dennison.\n\n435\n00:28:27.900 --> 00:28:28.900\nHave a great day.\n\n436\n00:28:28.900 --> 00:28:30.346\n>> Have a good one.\n\n437\n00:28:30.346 --> 00:28:38.420\n>> [MUSIC]\n\n",
          "vimeoId": "158190495"
        }
      ],
      "title": "Python Programming"
    }
  ],
  "url": "python-programming",
  "vLab": false
}
