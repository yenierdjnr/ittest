{
  "description": "Python is a great language for learning, writing web applications, and manipulating data. However, Python can be used for security testing as well. In this series, we will explore the use of Python in such concepts as brute force password cracking, making SSH connections programmatically, creating socket connections and port scanner a particular host, banner grabbing from open ports, and more. If that sounds interesting to you, then please join us!",
  "descriptionMD": "Python is a great language for learning, writing web applications, and manipulating data. However, Python can be used for security testing as well. In this series, we will explore the use of Python in such concepts as brute force password cracking, making SSH connections programmatically, creating socket connections and port scanner a particular host, banner grabbing from open ports, and more. If that sounds interesting to you, then please join us!",
  "length": "20666",
  "name": "Python for Security",
  "practiceExam": false,
  "subtitle": "Being Sneaky with Python",
  "tagUrl": "developer",
  "topics": [
    {
      "episodes": [
        {
          "description": "Python is a great language for learning, writing web applications, and manipulating data. However, Python can be used for security testing as well. In this series, we will explore the use of Python in such concepts as brute force password cracking, making SSH connections programmatically, creating socket connections and port scanner a particular host, banner grabbing from open ports, and more. If that sounds interesting to you, then please join us!",
          "length": "128",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-0-0-overview-081017-PGM.00_05_39_22.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-0-0-overview-081017-PGM.00_05_39_22.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-0-0-overview-081017-PGM.00_05_39_22.Still001-sm.jpg",
          "title": "Overview",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:05.536\n[MUSIC]\n\n2\n00:00:05.536 --> 00:00:09.001\nIn this segment we're gonna give you\na quick look at what you can expect from\n\n3\n00:00:09.001 --> 00:00:10.985\nour upcoming Python for Security series.\n\n4\n00:00:10.985 --> 00:00:14.855\nJustin, could you do us the immense favor\nof giving us some of the topics that we're\n\n5\n00:00:14.855 --> 00:00:17.010\ngonna encounter as refers to the series?\n\n6\n00:00:17.010 --> 00:00:19.580\n&gt;&gt; So there's a few things\nthat we're going to encounter.\n\n7\n00:00:19.580 --> 00:00:22.180\nMost of what we're going to\nbe doing is network related,\n\n8\n00:00:22.180 --> 00:00:26.220\nbecause Python already has some\nbuilt in network related modules.\n\n9\n00:00:26.220 --> 00:00:30.840\nThe socket library, create a server,\ncreate a client, two set server.\n\n10\n00:00:30.840 --> 00:00:33.260\nAlso, maybe a little\nbit of packet sniffing.\n\n11\n00:00:33.260 --> 00:00:38.950\nMoreover, we're gonna be looking at some\nattacks to like various ports on your\n\n12\n00:00:38.950 --> 00:00:43.910\nmachine, various services, particularly\nyour brute force attack to the SSH client.\n\n13\n00:00:43.910 --> 00:00:45.233\n&gt;&gt; Very cool.\n\n14\n00:00:45.233 --> 00:00:51.040\nWe have a lot of different times that\nwe're doing certification based training.\n\n15\n00:00:51.040 --> 00:00:54.420\nWe also do technical skills\nbased training as well.\n\n16\n00:00:54.420 --> 00:00:57.310\nWhich one of those categories\nwould this series fall under?\n\n17\n00:00:57.310 --> 00:00:58.760\n&gt;&gt; This is most definitely a tech skill.\n\n18\n00:00:58.760 --> 00:01:00.840\nThis is something where\na little bit of Python.\n\n19\n00:01:00.840 --> 00:01:02.470\nI'm interested in security.\n\n20\n00:01:02.470 --> 00:01:04.360\nHow do those two come together?\n\n21\n00:01:04.360 --> 00:01:06.430\nThis is not certification based.\n\n22\n00:01:06.430 --> 00:01:08.530\nIt's more about, hey, I have this idea.\n\n23\n00:01:08.530 --> 00:01:11.650\nLet me kind of make it come to\nfruition in the context of security.\n\n24\n00:01:11.650 --> 00:01:12.810\n&gt;&gt; And Justin, I always like to ask,\n\n25\n00:01:12.810 --> 00:01:15.720\nwho is the intended audience for\nthis series, as well?\n\n26\n00:01:15.720 --> 00:01:19.710\n&gt;&gt; So the intended audience is, you should\nprobably have some experience with Python,\n\n27\n00:01:19.710 --> 00:01:22.710\ncuz that's kind of\nassumed from the outset.\n\n28\n00:01:22.710 --> 00:01:26.850\nOtherwise, you're gonna be like,\nI don't know what all of this is, right?\n\n29\n00:01:26.850 --> 00:01:29.020\nSo, some programming experience in Python,\n\n30\n00:01:29.020 --> 00:01:33.390\nI'm not saying you have to be\nan expert but you should have\n\n31\n00:01:33.390 --> 00:01:37.530\na basic understanding of variables,\nlists, classes, so on and so forth.\n\n32\n00:01:37.530 --> 00:01:42.300\nMoreover, you should have some basic\nunderstanding of security principles, or\n\n33\n00:01:42.300 --> 00:01:49.280\nat least attacks that can be employed\nagainst a particular node or individual.\n\n34\n00:01:49.280 --> 00:01:52.100\n&gt;&gt; All right, well Justin, that sounds\nfantastic, and I know I'm looking\n\n35\n00:01:52.100 --> 00:01:55.350\nforward to it and it sounds like\nthat you might be interested in.\n\n36\n00:01:55.350 --> 00:01:58.278\n&gt;&gt; Well, we look forward to seeing\nyou in the upcoming series.\n\n37\n00:01:58.278 --> 00:02:03.219\n[MUSIC]\n\n",
          "vimeoId": "229281645"
        },
        {
          "description": "In this episode, Daniel and Justin show you how to build a standard TCP socket connection using Python. Here they walk you through the Python documentation looking at necessary pieces to make up a socket that will connect to a given host address and port number, after which it will verify the connection by displaying a code to the screen.",
          "length": "1486",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-1-1-create_a_socket_connection-080117-PGM.00_24_35_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-1-1-create_a_socket_connection-080117-PGM.00_24_35_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-1-1-create_a_socket_connection-080117-PGM.00_24_35_02.Still001-sm.jpg",
          "title": "Create a Socket Connection",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.063 --> 00:00:13.880\n[SOUND] All right!\n\n3\n00:00:13.880 --> 00:00:16.811\nGreetings everyone and welcome to\nanother great episode of DEVPROTV.\n\n4\n00:00:16.811 --> 00:00:18.470\nI'm your host Daniel Lawry, and\n\n5\n00:00:18.470 --> 00:00:23.400\nin today's episode we are kicking off\nour series of Python for security.\n\n6\n00:00:23.400 --> 00:00:26.590\nJoining us in the studio, our resident\nPython expert, our good friend, and\n\n7\n00:00:26.590 --> 00:00:28.290\nmentor, Mr. Justin Denison.\n\n8\n00:00:28.290 --> 00:00:29.140\nJustin welcome back sir.\n\n9\n00:00:29.140 --> 00:00:29.840\nAnd how's it going to today?\n\n10\n00:00:29.840 --> 00:00:31.720\n&gt;&gt; It is going fantastic.\n\n11\n00:00:31.720 --> 00:00:35.610\nIt is a, well I get to come back into\nPython land, which is always good.\n\n12\n00:00:35.610 --> 00:00:36.400\nAnd how are you today?\n\n13\n00:00:36.400 --> 00:00:36.950\n&gt;&gt; I'm doing great.\n\n14\n00:00:36.950 --> 00:00:42.100\nI'm actually fairly excited about\nthis series specifically because it's\n\n15\n00:00:42.100 --> 00:00:46.730\nblending two things I'm very interested in\nprogramming, specifically in Python and\n\n16\n00:00:46.730 --> 00:00:50.540\nsecurity, which is something I'm very\npassionate about, I do it ITProTV a lot.\n\n17\n00:00:50.540 --> 00:00:53.249\nSo I can't wait to see\nhow I can improve and\n\n18\n00:00:53.249 --> 00:00:57.982\naugment my skill set by learning\na little Python in that security realm.\n\n19\n00:00:57.982 --> 00:01:00.078\nThat being said,\nwhere are we gonna start today?\n\n20\n00:01:00.078 --> 00:01:01.274\nAnd are we gonna do?\n\n21\n00:01:01.274 --> 00:01:06.350\n&gt;&gt; Well, in terms of security, number one,\nI just wanna put a few things out there.\n\n22\n00:01:06.350 --> 00:01:10.290\nThere's some assumed knowledge\nthat you know some Python.\n\n23\n00:01:10.290 --> 00:01:12.930\nYou've been playing around with Python and\nsuch, so\n\n24\n00:01:12.930 --> 00:01:17.230\nyou have a basic command of how\nto run files, how to install it.\n\n25\n00:01:17.230 --> 00:01:18.850\nThat's kind of assumed knowledge.\n\n26\n00:01:18.850 --> 00:01:24.590\nAdditionally, we're not necessarily gonna\nfocus on kind of the most basic details,\n\n27\n00:01:24.590 --> 00:01:27.640\nreally nitty gritty type things.\n\n28\n00:01:27.640 --> 00:01:30.530\nWe're looking at how I can use Python to\n\n29\n00:01:30.530 --> 00:01:33.400\ndo some of the things that\nyou may need to do, right?\n\n30\n00:01:33.400 --> 00:01:38.300\nI need to, and this actual episode,\nhow do I create a socket connection?\n\n31\n00:01:38.300 --> 00:01:41.850\nNow the reason we're\ntouching on this topic first\n\n32\n00:01:41.850 --> 00:01:45.170\nis socket connections can be used for\na variety of things.\n\n33\n00:01:45.170 --> 00:01:49.380\nI want a port scan, I want to open\na socket and do some banner grabbing.\n\n34\n00:01:49.380 --> 00:01:50.820\nI want to do some of those things.\n\n35\n00:01:50.820 --> 00:01:53.490\nSo I wanted to make sure\nwe know how to use, well,\n\n36\n00:01:53.490 --> 00:01:59.090\nsockets in the context of Python,\nbefore we go down any of those trails.\n\n37\n00:01:59.090 --> 00:02:02.290\nAnd, well Daniel,\nI think I've set the scene a little bit.\n\n38\n00:02:02.290 --> 00:02:02.900\nAre you ready?\n\n39\n00:02:02.900 --> 00:02:03.940\n&gt;&gt; I am totally ready.\n\n40\n00:02:03.940 --> 00:02:07.380\nI cannot wait to get started and\nsee how we can create these cool sockets.\n\n41\n00:02:07.380 --> 00:02:10.293\n&gt;&gt; Well all right, so let's go ahead and\ntake a look at my screen here and\n\n42\n00:02:10.293 --> 00:02:12.190\nI have a folder, python-for-security.\n\n43\n00:02:12.190 --> 00:02:12.870\nWho would have thought?\n\n44\n00:02:12.870 --> 00:02:16.239\nWho would have thought?\nNow in that folder is utils.py.\n\n45\n00:02:16.239 --> 00:02:20.431\nAnd now all that's in there, is this nice\nlittle helper function that will come up\n\n46\n00:02:20.431 --> 00:02:22.275\nfrom time to time called timefunc.\n\n47\n00:02:22.275 --> 00:02:25.339\nI'm not expecting you\nto know what this does.\n\n48\n00:02:25.339 --> 00:02:28.467\nYou'll see what it does, but I just\nwanted to show you that there's no magic.\n\n49\n00:02:28.467 --> 00:02:31.390\nThere's nothing up my sleeves,\nI'm not hiding anything from you.\n\n50\n00:02:31.390 --> 00:02:37.210\nBut it does allows us to time a function\nif we want to time said function.\n\n51\n00:02:37.210 --> 00:02:41.860\nIt is not super precise,\nit just gives us a general,\n\n52\n00:02:41.860 --> 00:02:44.060\nkind of feel of how\nlong the function took.\n\n53\n00:02:44.060 --> 00:02:47.084\nAnd that may be important\nespecially if you're port scanning,\n\n54\n00:02:47.084 --> 00:02:49.220\nbrute forcing dictionary attack.\n\n55\n00:02:49.220 --> 00:02:51.250\nCuz you had this actively.\n\n56\n00:02:51.250 --> 00:02:53.340\nIf you gotta walk away for three days, and\n\n57\n00:02:53.340 --> 00:02:56.400\nyou're like,\nI might need to rethink my strategy here.\n\n58\n00:02:56.400 --> 00:02:57.650\nOr maybe not, right?\n\n59\n00:02:57.650 --> 00:03:02.800\nSo it just gives a good run time kind\nof context for what we're doing.\n\n60\n00:03:02.800 --> 00:03:04.120\n&gt;&gt; It is a really good thing.\n\n61\n00:03:04.120 --> 00:03:08.550\nIf you look at off the shelf port\nscanners and things of that nature.\n\n62\n00:03:08.550 --> 00:03:09.450\nTime is of the essence.\n\n63\n00:03:09.450 --> 00:03:11.480\nIt's always about trying to\nfigure out how long it took.\n\n64\n00:03:11.480 --> 00:03:15.000\nHow can I shave that time down so\nthat I can increase\n\n65\n00:03:15.000 --> 00:03:18.800\nmy efficiency when it comes to,\nmaybe if I'm doing penetration testing,\n\n66\n00:03:18.800 --> 00:03:22.910\ntrying to do security as a third party,\nor maybe I'm internal to the company.\n\n67\n00:03:22.910 --> 00:03:25.480\nI'm thinking, you know what,\nI don't wanna use those off the shelf.\n\n68\n00:03:25.480 --> 00:03:28.450\nI want to tailor make something for\na specific purpose.\n\n69\n00:03:28.450 --> 00:03:30.610\nAll about creating efficiency and\nkeeping time.\n\n70\n00:03:30.610 --> 00:03:35.780\nSo knowing how long it took for\nmy program to run could be very essential.\n\n71\n00:03:35.780 --> 00:03:39.470\nEspecially when I'm reporting to the\nhigher ups, they like that kinda stuff.\n\n72\n00:03:39.470 --> 00:03:42.310\n&gt;&gt; Yeah, and for nothing else,\nthe ultimate goal of this series is\n\n73\n00:03:42.310 --> 00:03:45.290\nwe're learning a little bit about Python\nand some of the built-in features and\n\n74\n00:03:45.290 --> 00:03:48.350\nmaybe some external modules\nthat can help us achieve this.\n\n75\n00:03:48.350 --> 00:03:51.950\nBut also to increase our understanding\nof some of these security tools.\n\n76\n00:03:51.950 --> 00:03:56.040\nyou may be, that are, more of less,\njust black boxes, do it, click.\n\n77\n00:03:56.040 --> 00:04:00.410\nSo, I wanted to give you and insight\nthere again without getting crazy deep,\n\n78\n00:04:00.410 --> 00:04:03.910\nlike going and looking at the seed\ncode that the Python kind of wraps.\n\n79\n00:04:03.910 --> 00:04:08.860\nNow, we've talked a great deal, how do\nI actually create a socket connection?\n\n80\n00:04:08.860 --> 00:04:13.940\nWell, I'm going to take a detour\ninto the documentation and\n\n81\n00:04:13.940 --> 00:04:15.470\nwell it's kind of interesting.\n\n82\n00:04:15.470 --> 00:04:18.243\nIf I look at Python socket.\n\n83\n00:04:18.243 --> 00:04:21.697\nAnd well there's a couple of different\nversions of Python that are current.\n\n84\n00:04:21.697 --> 00:04:25.843\nWe have 2713,\nnow Python 2 is coming end of life,\n\n85\n00:04:25.843 --> 00:04:29.450\nit's 2020, it's supposed to go away.\n\n86\n00:04:29.450 --> 00:04:33.175\nThat does not mean that it's not available\nin the systems that maybe you're\n\n87\n00:04:33.175 --> 00:04:34.058\nrunning this on.\n\n88\n00:04:34.058 --> 00:04:37.334\nSo I'm gonna try my best to\nalways test it with both, and\n\n89\n00:04:37.334 --> 00:04:41.406\nillustrate hey if you're in a system\nthat only has Python 3 do this.\n\n90\n00:04:41.406 --> 00:04:44.520\nIf you have a system that\nonly has Python 2 do this.\n\n91\n00:04:44.520 --> 00:04:48.470\nNow Daniel I'm gonna need you\nto help me remember to do that.\n\n92\n00:04:48.470 --> 00:04:51.560\nBe like hey how's that working in\nPython 2 because I have both versions\n\n93\n00:04:51.560 --> 00:04:54.700\non the machine for that particular reason.\n\n94\n00:04:54.700 --> 00:04:57.350\nBut I'm gonna look at the Python 3.6.\n\n95\n00:04:57.350 --> 00:04:59.490\nAnd if you're building these tools or\n\n96\n00:04:59.490 --> 00:05:03.360\nyou're just playing around I\nrecommend trying out Python 3.6.\n\n97\n00:05:03.360 --> 00:05:06.250\nMainly because 2 is end of life.\n\n98\n00:05:06.250 --> 00:05:08.477\nThere's new features, it's gotten faster.\n\n99\n00:05:08.477 --> 00:05:12.560\nit is active development, there's\nless likely to be persistent security\n\n100\n00:05:12.560 --> 00:05:15.625\nvulnerabilities inside of\nthis Python distribution.\n\n101\n00:05:15.625 --> 00:05:17.770\nSo they're updating\nthat fairly frequently.\n\n102\n00:05:17.770 --> 00:05:20.700\nThis is 3.6.2 at the time\nof this recording.\n\n103\n00:05:20.700 --> 00:05:23.580\nI think this was a patch\nthat actually patched\n\n104\n00:05:23.580 --> 00:05:26.980\nsome long standing\nvulnerabilities in Python itself.\n\n105\n00:05:26.980 --> 00:05:30.460\nI think it released like a couple\nof weeks ago if I'm not mistaken.\n\n106\n00:05:30.460 --> 00:05:32.420\nSo there's that.\n\n107\n00:05:32.420 --> 00:05:33.980\nNow let me zoom in here.\n\n108\n00:05:33.980 --> 00:05:35.939\nSocket, low level networking interface.\n\n109\n00:05:37.040 --> 00:05:38.160\nThat's what it is.\n\n110\n00:05:38.160 --> 00:05:40.480\nAnd, actually, if you wanna look at\nthe source code, you can click right here,\n\n111\n00:05:40.480 --> 00:05:44.090\nit'll take you directly there,\nyou can read to your heart's content.\n\n112\n00:05:44.090 --> 00:05:47.633\nNow, if I scroll down there's some\nassociated sockets, socket server and SSL.\n\n113\n00:05:47.633 --> 00:05:51.320\nSo, you can wrap it with SSL.\n\n114\n00:05:51.320 --> 00:05:55.069\nAnd classes that simplify\nrunning network servers.\n\n115\n00:05:55.069 --> 00:05:58.650\nMaybe you mean to do that,\nmaybe you don't, we'll see.\n\n116\n00:05:58.650 --> 00:06:01.008\nNow, what's kind of interesting is,\nthis socket server?\n\n117\n00:06:01.008 --> 00:06:05.710\nNotice it says simplify, technically I can\nwrite a server with the socket library.\n\n118\n00:06:05.710 --> 00:06:06.650\nI can write.\n\n119\n00:06:06.650 --> 00:06:08.490\nI'm just listening on this port and\n\n120\n00:06:08.490 --> 00:06:13.680\nnow these are sockets that are based\non how you construct them.\n\n121\n00:06:13.680 --> 00:06:17.750\nAnd if you scroll down it'll\ntalk about socket families.\n\n122\n00:06:17.750 --> 00:06:21.540\nAnd you'll see a couple of these\nkind of highlighted throughout.\n\n123\n00:06:21.540 --> 00:06:25.173\nBut if I scroll down a little bit further,\nif I'm not mistaken,\n\n124\n00:06:25.173 --> 00:06:27.003\nI think they moved this around.\n\n125\n00:06:27.003 --> 00:06:29.860\nIf I, there we go.\n\n126\n00:06:29.860 --> 00:06:36.878\nSo here are some constants, these are the\ntypes of sockets that you can create,\n\n127\n00:06:36.878 --> 00:06:41.613\nUnix sockets, Inet set,\nIPv4 and IPv6 excuse me.\n\n128\n00:06:41.613 --> 00:06:45.514\nAnd then you have particular protocols,\n\n129\n00:06:45.514 --> 00:06:49.870\nby default, it defaults to Inet If Inet.\n\n130\n00:06:49.870 --> 00:06:54.820\nAnd then SOCK_STREAM\nwhich gives you kind of\n\n131\n00:06:54.820 --> 00:06:59.150\nyour standard TCP socket using IPv4.\n\n132\n00:06:59.150 --> 00:07:02.434\nSo if we go down here you\ncan creat UDP sockets,\n\n133\n00:07:02.434 --> 00:07:06.403\nas well as raw sockets and\nyou may have a particular use.\n\n134\n00:07:06.403 --> 00:07:08.615\nI just want binary data,\nI just want to grab,\n\n135\n00:07:08.615 --> 00:07:10.960\nlet me worry about what to do with it.\n\n136\n00:07:10.960 --> 00:07:15.050\nI just wanna listen for anything and\nnot have any particular encoding or\n\n137\n00:07:15.050 --> 00:07:15.700\nassumptions.\n\n138\n00:07:16.910 --> 00:07:22.980\nAnd it's funny, only SOCK_STREAM and\nSOCK_DGRAM appear to be generally useful.\n\n139\n00:07:22.980 --> 00:07:28.300\nThey're there, but they actually say\nin the documentation right here,\n\n140\n00:07:28.300 --> 00:07:30.199\nonly these two tend to\nbe generally useful.\n\n141\n00:07:31.220 --> 00:07:34.640\nAnd while that may not be the case in\nthe context that we're using it, they're\n\n142\n00:07:34.640 --> 00:07:39.940\ntalking more of a general use case on a\nsetup of a server or a client or whatnot.\n\n143\n00:07:39.940 --> 00:07:43.491\nNow if you scroll down there's\na lot more of these constants and\n\n144\n00:07:43.491 --> 00:07:45.306\ndefinitely go check those out.\n\n145\n00:07:45.306 --> 00:07:47.097\nGonna do a little bit of\nhand waving there Daniel.\n\n146\n00:07:47.097 --> 00:07:47.929\n&gt;&gt; Yeah.\n\n147\n00:07:47.929 --> 00:07:49.839\n[LAUGH]\n&gt;&gt; But this will tell you,\n\n148\n00:07:49.839 --> 00:07:51.210\nhey creating sockets.\n\n149\n00:07:51.210 --> 00:07:52.716\nThis will create a socket object.\n\n150\n00:07:52.716 --> 00:07:57.341\nSocket.socket, now the word socket\nsomehow appears a great deal\n\n151\n00:07:57.341 --> 00:08:01.540\nof time in this library so\nI'm showing you the docks.\n\n152\n00:08:01.540 --> 00:08:04.752\nCuz I recommend coming and\nmaking sure, what am I doing again?\n\n153\n00:08:04.752 --> 00:08:06.060\nHow does this work?\n\n154\n00:08:08.080 --> 00:08:11.740\nSo, socket, socket pair,\ncreate connection,\n\n155\n00:08:11.740 --> 00:08:15.740\nhow does that differ than the socket?\n\n156\n00:08:15.740 --> 00:08:20.570\nWell, it doesn't really\nother than the arguments,\n\n157\n00:08:20.570 --> 00:08:22.779\nand time out, and\nkind of how things work there.\n\n158\n00:08:23.810 --> 00:08:27.193\nHow things are constructed,\nexcuse me, not how they work.\n\n159\n00:08:27.193 --> 00:08:32.043\nBut then there's some other utility\nfunctions that you can use like get add or\n\n160\n00:08:32.043 --> 00:08:37.210\ninfo that will kind of parse things apart\nfor you and give you host names and such.\n\n161\n00:08:37.210 --> 00:08:40.790\n&gt;&gt; Yeah, Justin, I actually found the\ndocumentation here to be extremely useful.\n\n162\n00:08:40.790 --> 00:08:43.830\nI used Python to create\na socket connection so\n\n163\n00:08:43.830 --> 00:08:49.000\nthat I could fuzz a network service\nthat allowed me to do that.\n\n164\n00:08:49.000 --> 00:08:52.520\nSo to create that socket was\nreally pretty easy to do, and\n\n165\n00:08:52.520 --> 00:08:53.920\nthen I could start passing data.\n\n166\n00:08:53.920 --> 00:08:57.200\nAnd I did it all just based off\nof looking at this documentation.\n\n167\n00:08:57.200 --> 00:08:59.469\nSo it is pretty simple to get this up and\nrunning.\n\n168\n00:08:59.469 --> 00:09:03.175\nYou just read through it,\nmake sure you follow the instructions and\n\n169\n00:09:03.175 --> 00:09:06.708\nlo and behold you will have\na TCP connection pretty shortly.\n\n170\n00:09:06.708 --> 00:09:10.635\n&gt;&gt; Yeah, and just fill disclosure\nthere are a lot of things in,\n\n171\n00:09:10.635 --> 00:09:12.560\nthe documentation is dense.\n\n172\n00:09:12.560 --> 00:09:13.680\nBecause there's a lot in there.\n\n173\n00:09:13.680 --> 00:09:17.925\nBecause to some extent, this is just\na wrapper around some lower level c\n\n174\n00:09:17.925 --> 00:09:21.121\ninterfaces that are extended\ninto the Python world.\n\n175\n00:09:21.121 --> 00:09:24.220\nThey are a lot easier to\nwork with inside of Python.\n\n176\n00:09:24.220 --> 00:09:28.350\nAnd now, well, we've shown documentation\nand we've kind of talked about it.\n\n177\n00:09:28.350 --> 00:09:32.330\nLet's see about how we actually\nmake socket connection.\n\n178\n00:09:32.330 --> 00:09:33.794\nFull disclosure here,\n\n179\n00:09:33.794 --> 00:09:38.412\nmaybe a little weird cuz I don't have\na lot going on the network currently.\n\n180\n00:09:38.412 --> 00:09:40.137\nBut I'm gonna show you how to do this and\n\n181\n00:09:40.137 --> 00:09:43.500\nthen we'll actually see applications\nof this and in the upcoming episode.\n\n182\n00:09:43.500 --> 00:09:45.359\nSo, let's go ahead and\ntake a look at my screen here.\n\n183\n00:09:45.359 --> 00:09:48.741\nAnd just to stay in the spirit of things,\n\n184\n00:09:48.741 --> 00:09:52.790\nI've decided to use Vim\nto write all my code.\n\n185\n00:09:52.790 --> 00:09:55.705\nSo, maybe that'll slow me down,\nmake me think about what I'm saying.\n\n186\n00:09:55.705 --> 00:09:56.250\n&gt;&gt; [LAUGH]\n&gt;&gt; So,\n\n187\n00:09:56.250 --> 00:10:00.464\nI'm gonna create a file\ncalled create_connection.py.\n\n188\n00:10:01.490 --> 00:10:04.401\nAnd inside of that I'm say import socket.\n\n189\n00:10:04.401 --> 00:10:07.860\nNow, this is importing the entire module.\n\n190\n00:10:07.860 --> 00:10:11.787\nAll of those functions that\nyou saw are subfunctions or\n\n191\n00:10:11.787 --> 00:10:15.210\nsubconstance of this module, okay?\n\n192\n00:10:15.210 --> 00:10:20.035\nSo if I import socket,\nI can then use the entire modules of\n\n193\n00:10:20.035 --> 00:10:24.500\nsocket.socket that\nactually creates a socket.\n\n194\n00:10:24.500 --> 00:10:25.480\nThat's weird.\n\n195\n00:10:25.480 --> 00:10:27.410\nOr create connect\nsocket.create connection,\n\n196\n00:10:27.410 --> 00:10:29.220\nit's kinda like a factory function.\n\n197\n00:10:29.220 --> 00:10:33.840\nBut what I'm gonna do is create a main\nfunction, and just get some things set up.\n\n198\n00:10:33.840 --> 00:10:38.090\nNow, I recommend, if you're building\ntools or playing around like this, and\n\n199\n00:10:38.090 --> 00:10:42.800\nyou don't know, if you're going\nto use them in other files.\n\n200\n00:10:42.800 --> 00:10:45.950\nRight, and maybe you've built some\nfunctions that do all your socket stuff in\n\n201\n00:10:45.950 --> 00:10:49.520\nthis file and you want to import them and\nuse them in another file.\n\n202\n00:10:50.650 --> 00:10:52.881\nI recommend wrapping\nany function that runs.\n\n203\n00:10:52.881 --> 00:10:56.980\nSo like this main in this if\ndunder name equals dunder main.\n\n204\n00:10:56.980 --> 00:10:59.530\nAnd what that'll do is that'll\nkeep that function from running\n\n205\n00:11:00.600 --> 00:11:03.820\nwhen you import the functions\nfrom this file.\n\n206\n00:11:03.820 --> 00:11:06.670\nAnd that way you're not accidentally\ntrying to create socket connections and\n\n207\n00:11:06.670 --> 00:11:09.080\nstuff when you don't intend to.\n\n208\n00:11:09.080 --> 00:11:10.730\nSo, nice little tip there.\n\n209\n00:11:11.810 --> 00:11:16.580\nSo, if we have our main function,\nwhat are we gonna to do?\n\n210\n00:11:16.580 --> 00:11:20.420\nLet's see, I'm gonna create a sock or\n\n211\n00:11:20.420 --> 00:11:23.870\nyou can even call this s or\nmaybe even a connection.\n\n212\n00:11:23.870 --> 00:11:30.120\nSo, it's socket.socket and\ntechnically there are defaults to this,\n\n213\n00:11:30.120 --> 00:11:34.223\nand that's AF_INET, which is standard PCP.\n\n214\n00:11:34.223 --> 00:11:40.334\nAnd then SOCK_STREAM, which goes\nalong with the protocol for that.\n\n215\n00:11:40.334 --> 00:11:45.134\nSo, I like to be specific\nmainly because it's\n\n216\n00:11:45.134 --> 00:11:47.934\na reminder of-\n&gt;&gt; What the heck you're doing?\n\n217\n00:11:47.934 --> 00:11:51.312\n[LAUGH]\n&gt;&gt; Yeah, what you're doing?\n\n218\n00:11:51.312 --> 00:11:57.700\nSo this is the family that I'm using and\nthis is the protocol that I'm using.\n\n219\n00:11:57.700 --> 00:11:58.880\nIf you ever need to change this,\n\n220\n00:11:58.880 --> 00:12:01.730\nlet's say you need to change\nthis to UDP or something.\n\n221\n00:12:01.730 --> 00:12:05.410\nThis is a [INAUDIBLE] yeah,\nI need to go change those.\n\n222\n00:12:05.410 --> 00:12:08.160\nIf you leave those out,\nthese defaults will be there.\n\n223\n00:12:08.160 --> 00:12:10.892\nBut I find that sometimes that\nleads to harder debugging.\n\n224\n00:12:10.892 --> 00:12:12.570\nYou're like,\nI didn't wanna type it in then and\n\n225\n00:12:12.570 --> 00:12:14.780\nthen it causes you a whole lot\nof problems down the road.\n\n226\n00:12:14.780 --> 00:12:17.510\nSo, I would keep this here.\n\n227\n00:12:18.645 --> 00:12:22.555\nAll right, so there is ESC key and\n\n228\n00:12:22.555 --> 00:12:26.415\nnow this s, what is this s?\n\n229\n00:12:26.415 --> 00:12:29.195\nThat's actually going to\nbe our constructor socket.\n\n230\n00:12:29.195 --> 00:12:30.565\nNow it's not connected to anything.\n\n231\n00:12:30.565 --> 00:12:34.015\nIt's not actually connected to,\nwell, anything like I said.\n\n232\n00:12:34.015 --> 00:12:37.870\nJust to be redundant and\nkind of enforcing that.\n\n233\n00:12:37.870 --> 00:12:41.170\nNow I'm just gonna connect to local host\njust to show you that it will actually\n\n234\n00:12:41.170 --> 00:12:46.820\nmake a connection, or\nshould make a connection, should.\n\n235\n00:12:46.820 --> 00:12:49.090\nSo, what is our host?\n\n236\n00:12:49.090 --> 00:12:49.970\nWhat is our port?\n\n237\n00:12:51.430 --> 00:12:52.847\nAnd let's just say port 5,000.\n\n238\n00:12:52.847 --> 00:12:57.594\nAnd then in order to\nactually connect well,\n\n239\n00:12:57.594 --> 00:13:04.460\nwe can do s.connect, and\nthen we have to pass a tuple.\n\n240\n00:13:04.460 --> 00:13:12.120\nAnd the reason being is it expects a tuple\nbeing two, kind of a pair, so to speak.\n\n241\n00:13:12.120 --> 00:13:15.619\nA tuple can technically be a bunch of\nthings put together in parentheses.\n\n242\n00:13:17.020 --> 00:13:21.730\nIt is expecting a host, port pair.\n\n243\n00:13:21.730 --> 00:13:24.158\nAnd that's just how the arguments work,\nokay?\n\n244\n00:13:24.158 --> 00:13:28.850\nNow this host, port pair,\nthis should be a string.\n\n245\n00:13:28.850 --> 00:13:32.430\nHost has to be a string because even if\nyou're given IP addresses or anything like\n\n246\n00:13:32.430 --> 00:13:36.590\nthat, it doesn't really fit in the number\nmodel in Python so it'll error out.\n\n247\n00:13:36.590 --> 00:13:40.630\nSo if you do 10.10 dot blah, blah, blah,\nblah, it'll go, that's not a valid number,\n\n248\n00:13:40.630 --> 00:13:41.450\nthings are weird.\n\n249\n00:13:41.450 --> 00:13:42.500\nIt'll cause a parse error.\n\n250\n00:13:42.500 --> 00:13:47.460\nSo host is always going to be a string,\nand then port is going to be a number.\n\n251\n00:13:47.460 --> 00:13:51.065\nNow port does have some latitude because\nthey end up being concatenated together on\n\n252\n00:13:51.065 --> 00:13:51.690\nthe back end.\n\n253\n00:13:51.690 --> 00:13:54.440\nI'm pretty sure you can\nget away with string.\n\n254\n00:13:54.440 --> 00:13:56.760\nAs a matter of fact,\nwe'll just try that out.\n\n255\n00:13:56.760 --> 00:14:01.070\nI tend to like to keep ports as numbers,\nwell, mainly because when I've done things\n\n256\n00:14:01.070 --> 00:14:04.140\nlike this, I'm manipulating the port\nnumber and kinda doing some other things.\n\n257\n00:14:04.140 --> 00:14:10.750\nSo if that connection holds,\nwe should be able to see it works.\n\n258\n00:14:10.750 --> 00:14:13.870\nNow I'm gonna show you some more\nproof of this in just a moment so\n\n259\n00:14:13.870 --> 00:14:15.675\nyou're not like, you're lying, Justin.\n\n260\n00:14:15.675 --> 00:14:18.148\n&gt;&gt; [LAUGH]\n&gt;&gt; Believe it or not,\n\n261\n00:14:18.148 --> 00:14:22.670\nthat is it in order to\nmake a socket connection.\n\n262\n00:14:22.670 --> 00:14:24.829\nIf we get to the print out, it works.\n\n263\n00:14:24.829 --> 00:14:28.290\nIt's actually made a full connection and\neverything's good to go.\n\n264\n00:14:28.290 --> 00:14:34.265\nIf it can't make the connection, it will\nkind of error out and do weird things.\n\n265\n00:14:34.265 --> 00:14:38.615\nNow, every once in a while\nI've had some weirdness here.\n\n266\n00:14:38.615 --> 00:14:46.018\nIf we go to connect, so connect to a TCB\nservice listening on the Internet address.\n\n267\n00:14:46.018 --> 00:14:52.400\nNot create connection, I actually\nwant socket.connect, wait for it.\n\n268\n00:14:52.400 --> 00:14:54.150\nSo the word connect is in\nthis a whole bunch as well.\n\n269\n00:14:54.150 --> 00:14:57.072\n&gt;&gt; Yeah [LAUGH]\n&gt;&gt; It's like you're gonna be doing that\n\n270\n00:14:57.072 --> 00:14:58.111\nfrom time to time.\n\n271\n00:14:58.111 --> 00:15:02.682\nSo create a remote socket at address,\nthe former address blah, blah, blah.\n\n272\n00:15:02.682 --> 00:15:06.922\nIf the connection is interrupted by\nthe signal it waits until the connection\n\n273\n00:15:06.922 --> 00:15:09.890\ncompletes or\nraise a socket.timeout on timeout.\n\n274\n00:15:09.890 --> 00:15:13.549\nIf the signal handler doesn't\nraise an exception and\n\n275\n00:15:13.549 --> 00:15:16.810\nthe socket is blocking or\nhas a timeout, okay?\n\n276\n00:15:16.810 --> 00:15:23.193\nSo, you should get an exception or\nan error if it kinda just, [SOUND] Okay?\n\n277\n00:15:23.193 --> 00:15:25.995\nNow, there's this other one called,\nConnectEx.\n\n278\n00:15:25.995 --> 00:15:29.235\nAnd we'll see that, in just a moment, cuz\nthat's actually gonna be fairly handy for\n\n279\n00:15:29.235 --> 00:15:30.406\nsome things that we need to do.\n\n280\n00:15:30.406 --> 00:15:34.909\nBut I been talking a lot let's see if\nthis actually works, and boom it works so\n\n281\n00:15:34.909 --> 00:15:38.388\nmade a connection and\nthen that was all good and then it die.\n\n282\n00:15:38.388 --> 00:15:43.220\nNow in all\n&gt;&gt; Transparency.\n\n283\n00:15:43.220 --> 00:15:46.284\nIn fairness\n&gt;&gt; It is not really doing a whole lot.\n\n284\n00:15:46.284 --> 00:15:48.454\n&gt;&gt; It seems like magic\nto be honest with you.\n\n285\n00:15:48.454 --> 00:15:50.551\n&gt;&gt; Yeah, it was a little bit of magic and\n\n286\n00:15:50.551 --> 00:15:54.150\nthe reason it seems like magic\nis this is an abstraction layer.\n\n287\n00:15:54.150 --> 00:16:00.521\nEven though it says low level networking\ninterface, it's an abstraction layer over\n\n288\n00:16:00.521 --> 00:16:06.624\nsome of the APIs that are available within\nPython through the C API out to Python but\n\n289\n00:16:06.624 --> 00:16:11.350\nif I came here I'm not closing\nthis connection either.\n\n290\n00:16:11.350 --> 00:16:15.449\nSo technically, when you're done\nyou should close a connection and\n\n291\n00:16:15.449 --> 00:16:19.067\nthen that would just cut it off and\ncleanly exit the program.\n\n292\n00:16:19.067 --> 00:16:22.433\n&gt;&gt; Yeah.\n&gt;&gt; So there is not a lot to see, and\n\n293\n00:16:22.433 --> 00:16:26.971\nI mean, I think it works,\nbut here's how you can\n\n294\n00:16:26.971 --> 00:16:32.310\nactually check to see if site\nconnection's being made.\n\n295\n00:16:32.310 --> 00:16:36.560\nOr maybe it's being made but\nthere's something weird going on, and\n\n296\n00:16:36.560 --> 00:16:41.190\nthis is a nice little handy-dandy feature.\n\n297\n00:16:41.190 --> 00:16:45.649\nInstead of connect, we can do connect_ex\nand I'm just gonna call that result,\n\n298\n00:16:46.680 --> 00:16:51.763\nget rid of that and say Result is and\n\n299\n00:16:51.763 --> 00:16:57.070\nthen format(result).\n\n300\n00:16:57.070 --> 00:17:01.160\nSo what we should see is\nwhat's called the error code.\n\n301\n00:17:01.160 --> 00:17:04.740\nNow I think that's a little misleading\n\n302\n00:17:04.740 --> 00:17:08.390\nbecause there's one error code\nthat represents there's no error.\n\n303\n00:17:08.390 --> 00:17:12.130\nSo error code tells me,\nsomething went wrong,\n\n304\n00:17:12.130 --> 00:17:16.480\nnot exactly, what it could mean is there's\nno error, so that's a possibility.\n\n305\n00:17:16.480 --> 00:17:21.350\nSo if we re-run this and the result is 0,\nwhen you see the result is 0,\n\n306\n00:17:21.350 --> 00:17:23.050\nfrom this connect_ex.\n\n307\n00:17:23.050 --> 00:17:25.040\nThat means the connection\nhas been made and\n\n308\n00:17:25.040 --> 00:17:29.550\nwas made successfully, there's no time\nouts, no issues, anything of that nature.\n\n309\n00:17:29.550 --> 00:17:33.910\nSo that's a handy function if you're like,\nI don't know what exactly it's doing\n\n310\n00:17:33.910 --> 00:17:36.440\ncuz we're just making\nthe connection at this point.\n\n311\n00:17:36.440 --> 00:17:40.590\nIf you do that connect_ex, and\nyou get a 0 back, we're all good to go.\n\n312\n00:17:40.590 --> 00:17:45.080\nNow these error codes are actually just\nforwarded from the underlying C connection\n\n313\n00:17:45.080 --> 00:17:45.986\nfunction call.\n\n314\n00:17:45.986 --> 00:17:47.768\nSo connect is going to return and\n\n315\n00:17:47.768 --> 00:17:49.918\nentered here based on the-\n&gt;&gt; Justin,\n\n316\n00:17:49.918 --> 00:17:52.615\ncan we change the hostname to something\nthat we know that it won't get to so\n\n317\n00:17:52.615 --> 00:17:54.321\nthat we could return an error and see it?\n\n318\n00:17:54.321 --> 00:18:00.028\n&gt;&gt; Yeah, yeah, that is a great idea,\nI'm glad you thought of it,\n\n319\n00:18:00.028 --> 00:18:04.132\nhow about, Yes.\n\n320\n00:18:04.132 --> 00:18:05.590\n&gt;&gt; I don't think that will work.\n\n321\n00:18:05.590 --> 00:18:08.319\n&gt;&gt; No, I can route to that right now,\nI'm pinging it now.\n\n322\n00:18:08.319 --> 00:18:09.756\n&gt;&gt; [LAUGH]\n&gt;&gt; Are you kidding?\n\n323\n00:18:09.756 --> 00:18:12.218\n&gt;&gt; It's got 10 ping times, it's weird.\n\n324\n00:18:12.218 --> 00:18:12.742\n&gt;&gt; That's crazy.\n\n325\n00:18:12.742 --> 00:18:17.292\n&gt;&gt; So there we go, and\nif I run this and boom,\n\n326\n00:18:17.292 --> 00:18:22.400\nnodename nor\nservname provided or not known.\n\n327\n00:18:22.400 --> 00:18:26.520\nSo this is a GAI error which is\na different type of socket error,\n\n328\n00:18:26.520 --> 00:18:28.220\nit's like an exception that's thrown.\n\n329\n00:18:29.280 --> 00:18:33.270\nSo there you go, it doesn't work so maybe\n\n330\n00:18:33.270 --> 00:18:37.880\nwe need to come up with a valid thing\nthat shouldn't be able to get pinged.\n\n331\n00:18:37.880 --> 00:18:41.130\nSo I'm thinking, I don't know of anything,\n\n332\n00:18:41.130 --> 00:18:45.660\nmaybe just a random IP that shouldn't\nbe accessible from my computer.\n\n333\n00:18:45.660 --> 00:18:49.960\n&gt;&gt; I'm trying to think here, who does\nnot Ping, Microsoft won't let you ping.\n\n334\n00:18:49.960 --> 00:18:54.293\n&gt;&gt; Okay, so actually let's just\npoint to the Microsoft and\n\n335\n00:18:54.293 --> 00:18:58.546\nport 80, so let's see what happens,\nI don't know.\n\n336\n00:18:58.546 --> 00:19:02.039\n&gt;&gt; If you are asking questions,\nyou're asking questions,\n\n337\n00:19:02.039 --> 00:19:05.195\nnow if they show up here,\nI'm gonna blame it on you.\n\n338\n00:19:05.195 --> 00:19:07.100\n&gt;&gt; [LAUGH]\n&gt;&gt; Is it Microsoft?\n\n339\n00:19:07.100 --> 00:19:09.818\n&gt;&gt; I know they don't allow ping,\nI don't know if they'll,\n\n340\n00:19:09.818 --> 00:19:12.539\n[CROSSTALK] You're gonna hit\ntheir web server [INAUDIBLE].\n\n341\n00:19:12.539 --> 00:19:15.833\n&gt;&gt; Actually, so\nlet's just stay with 4 to 5,000.\n\n342\n00:19:15.833 --> 00:19:16.554\n&gt;&gt; Yeah.\n\n343\n00:19:16.554 --> 00:19:17.792\n&gt;&gt; That's probably not open.\n\n344\n00:19:17.792 --> 00:19:19.950\n&gt;&gt; Yeah.\n\n345\n00:19:19.950 --> 00:19:22.390\n&gt;&gt; And wait for it, and\nnotice how it's hanging.\n\n346\n00:19:22.390 --> 00:19:23.520\n&gt;&gt; Yeah.\n\n347\n00:19:23.520 --> 00:19:25.212\n&gt;&gt; That means it's waiting,\nit's like, I'm waiting.\n\n348\n00:19:25.212 --> 00:19:28.445\n&gt;&gt; So it's got a certain amount of\ntime that it's gonna wait and see,\n\n349\n00:19:28.445 --> 00:19:32.380\nmaybe I just haven't heard it yet,\nmaybe you haven't had time to respond.\n\n350\n00:19:32.380 --> 00:19:35.970\nMaybe there was an issue in the network\ntraffic and you need to resend, and\n\n351\n00:19:35.970 --> 00:19:37.162\nI'm waiting for that.\n\n352\n00:19:37.162 --> 00:19:39.440\nIs just giving it a little bit of time and\n\n353\n00:19:39.440 --> 00:19:42.080\nthe benefit of the doubt before it says,\nokay, nothing works.\n\n354\n00:19:42.080 --> 00:19:42.790\n&gt;&gt; Exactly, and\n\n355\n00:19:42.790 --> 00:19:47.600\nto some extent this time out may take an\nexorbitant amount of time, in all honesty.\n\n356\n00:19:47.600 --> 00:19:52.240\nSo while we're waiting to see if that\nactually does time out or errors out,\n\n357\n00:19:52.240 --> 00:19:56.270\nlet's hop over here just to remind\nourselves, what are some possible options.\n\n358\n00:19:56.270 --> 00:20:00.680\nSo this connect_ex,\nthese are just called with address,\n\n359\n00:20:00.680 --> 00:20:03.110\nthere seems to be no\nadditional parameters.\n\n360\n00:20:03.110 --> 00:20:11.605\nHowever, if we go up to socket.socket,\n&gt;&gt; [LAUGH]\n\n361\n00:20:11.605 --> 00:20:13.130\n&gt;&gt; Let me scroll back to the top.\n\n362\n00:20:13.130 --> 00:20:14.608\n&gt;&gt; It's a very dense documentation.\n\n363\n00:20:14.608 --> 00:20:18.642\n&gt;&gt; Yeah, yeah, just to remind you,\nthis is very dense,\n\n364\n00:20:18.642 --> 00:20:21.557\nif we go down here and socket.socket.\n\n365\n00:20:21.557 --> 00:20:25.792\nSo we have type, file, no, it's good,\n\n366\n00:20:25.792 --> 00:20:29.690\nhow could you possibly set a time out?\n\n367\n00:20:29.690 --> 00:20:34.310\nSo if we go and\nlook up time out, time outs and\n\n368\n00:20:34.310 --> 00:20:36.880\nthe connect method,\nnotes on socket time outs.\n\n369\n00:20:36.880 --> 00:20:37.435\n&gt;&gt; How about that?\n\n370\n00:20:37.435 --> 00:20:38.700\n&gt;&gt; There's a subsection,\n\n371\n00:20:38.700 --> 00:20:42.350\nit's like they know people\nare going to ask this question.\n\n372\n00:20:42.350 --> 00:20:45.610\nThe socket object can be in one of\nthree modes, blocking, non blocking, or\n\n373\n00:20:45.610 --> 00:20:46.778\ntime out.\n\n374\n00:20:46.778 --> 00:20:49.560\nSockets are always\ncreated in blocking mode,\n\n375\n00:20:49.560 --> 00:20:53.790\nthis can be changed by\ncalling set default time out.\n\n376\n00:20:53.790 --> 00:20:57.270\nSo if we have a socket,\nwe should set default time out and\n\n377\n00:20:57.270 --> 00:21:01.240\nthen it will time out,\nthat's how I read that.\n\n378\n00:21:01.240 --> 00:21:05.285\nSo time outs in the connect method,\nwhich by extension should work for\n\n379\n00:21:05.285 --> 00:21:09.170\nconnect_ex, is also subject\nto the time out setting.\n\n380\n00:21:09.170 --> 00:21:12.540\nAnd in general, recommended to call\nset time out before calling connect.\n\n381\n00:21:13.740 --> 00:21:18.020\nOkay, so set timeout or\nset default timeout,\n\n382\n00:21:18.020 --> 00:21:21.430\nif we come back over, look,\nit actually finally timed out.\n\n383\n00:21:22.490 --> 00:21:25.230\nWell, we think it timed out,\nthat result is 60,\n\n384\n00:21:25.230 --> 00:21:27.680\ndo you by chance know the error\ncodes off the top of your head?\n\n385\n00:21:27.680 --> 00:21:29.040\n&gt;&gt; I do not know them\noff the top of my head,\n\n386\n00:21:29.040 --> 00:21:30.840\nI actually have a printed\nout list of them.\n\n387\n00:21:30.840 --> 00:21:33.350\n&gt;&gt; Yeah, I always have to go look them up,\nand ultimately for\n\n388\n00:21:33.350 --> 00:21:35.920\nthe context of this,\nthat error code is not important.\n\n389\n00:21:35.920 --> 00:21:39.011\nBut it does illustrate that\nif something goes wrong and\n\n390\n00:21:39.011 --> 00:21:42.998\nthe connection is not made- [CROSSTALK]\n&gt;&gt; You will get a nonzero error code,\n\n391\n00:21:42.998 --> 00:21:45.134\nwhich means, hey something went wrong.\n\n392\n00:21:45.134 --> 00:21:46.053\n&gt;&gt; Check it out.\n\n393\n00:21:46.053 --> 00:21:50.670\n&gt;&gt; But using this little bit that\nwe've seen thus far, we can actually\n\n394\n00:21:50.670 --> 00:21:55.660\nstart snooping and creeping around like,\nwhat you got over there?\n\n395\n00:21:55.660 --> 00:21:58.971\nSo that's how you create a socket\nconnection with raw Python, but\n\n396\n00:21:58.971 --> 00:22:02.098\nI did just remember something,\nI only did it for Python 2.\n\n397\n00:22:02.098 --> 00:22:03.190\n&gt;&gt; That's right.\n\n398\n00:22:03.190 --> 00:22:05.487\n&gt;&gt; That was me running it in Python 2,\n\n399\n00:22:05.487 --> 00:22:09.477\nthat was the exact same code\nthat just ran, run for Python 3.\n\n400\n00:22:09.477 --> 00:22:10.415\n&gt;&gt; Python 3.\n\n401\n00:22:10.415 --> 00:22:14.423\n&gt;&gt; Now I was using the three\ndocumentation, there's no guarantee though\n\n402\n00:22:14.423 --> 00:22:18.721\nthat I haven't crossed my wires in my\nhead, so we should double check that.\n\n403\n00:22:18.721 --> 00:22:21.901\nBut in the sake of being brief,\nwe'll go ahead and\n\n404\n00:22:21.901 --> 00:22:24.537\nchange that back to local host,\n&gt;&gt; Yeah, [LAUGH].\n\n405\n00:22:24.537 --> 00:22:27.614\n&gt;&gt; So we don't have to wait two minutes\nfor a time out, so let's go ahead and\n\n406\n00:22:27.614 --> 00:22:29.640\ntake a look at my screen,\nsee if that works out.\n\n407\n00:22:29.640 --> 00:22:35.630\nSo I'm gonna call this create\nconnection and local host,\n\n408\n00:22:35.630 --> 00:22:40.570\nthere we go,\nthere's that VM working for you.\n\n409\n00:22:40.570 --> 00:22:44.910\nI will tell you though, I don't like\nnot having a physical escape key on my\n\n410\n00:22:44.910 --> 00:22:48.551\nkeyboard because I actually do\nuse them a fair amount of time.\n\n411\n00:22:48.551 --> 00:22:49.810\n&gt;&gt; I can't blame you on that.\n\n412\n00:22:49.810 --> 00:22:53.020\n&gt;&gt; So I need to remap that\nto another key or something.\n\n413\n00:22:53.020 --> 00:22:54.620\n&gt;&gt; I've gone back and forth on whether or\n\n414\n00:22:54.620 --> 00:22:59.620\nnot to when I upgraded my PC to\ngo to a new Mac or a System76.\n\n415\n00:22:59.620 --> 00:23:02.100\n&gt;&gt; Yeah.\n&gt;&gt; And there's pros and cons to both.\n\n416\n00:23:02.100 --> 00:23:07.068\n&gt;&gt; Yeah, yeah, it's a hit or a miss,\nnot having a physical escape key, for\n\n417\n00:23:07.068 --> 00:23:10.575\nme, because I'm an avid VM user-\n&gt;&gt; It bothers me.\n\n418\n00:23:10.575 --> 00:23:14.810\n&gt;&gt; Yeah, so\nI can just remap it to something else, but\n\n419\n00:23:14.810 --> 00:23:19.960\nmy hands already have muscle memory, there\nit is, so I would have to relearn that.\n\n420\n00:23:19.960 --> 00:23:22.070\nAnd then it wouldn't be applicable\nto other keyboards unless I\n\n421\n00:23:22.070 --> 00:23:22.934\nmapped all those as well.\n\n422\n00:23:22.934 --> 00:23:27.809\nBut anyway we got here, that was nice,\nPython 3, boom, there it is, so\n\n423\n00:23:27.809 --> 00:23:30.520\nthis code works both in two and three.\n\n424\n00:23:30.520 --> 00:23:33.890\nSo we've introduced no\nnew features from 2 to 3\n\n425\n00:23:33.890 --> 00:23:37.040\nthat should be different based\non the system that you have.\n\n426\n00:23:37.040 --> 00:23:41.630\nNow again, we're gonna try that throughout\nthis series, always emphasize that.\n\n427\n00:23:41.630 --> 00:23:45.790\nBut here it works so we've made\na socket connection and particularly,\n\n428\n00:23:45.790 --> 00:23:47.810\nwe've made a TCP socket connection.\n\n429\n00:23:47.810 --> 00:23:50.580\nWe're all good to go and now who knows\nwhat kind of mess we're gonna get into?\n\n430\n00:23:50.580 --> 00:23:52.970\n&gt;&gt; That's right, we've actually\nbuilt a really good platform for\n\n431\n00:23:52.970 --> 00:23:56.175\nus to be able to do all sorts\nof network security type things.\n\n432\n00:23:56.175 --> 00:23:59.410\nWe've mentioned fuzzers,\nwe've mentioned scanners, you name it.\n\n433\n00:23:59.410 --> 00:24:03.549\nIf you need a socket connection in any\nway to do talking across the network,\n\n434\n00:24:03.549 --> 00:24:05.863\nnow you know how to create that in Python.\n\n435\n00:24:05.863 --> 00:24:08.937\nYou're thinking, well why don't we just\nuse what we already have built in?\n\n436\n00:24:08.937 --> 00:24:11.847\nWell, you never know when\nthat's not available or\n\n437\n00:24:11.847 --> 00:24:16.458\nit's been blocked, maybe a standard tool\nout there is not allowed on a network.\n\n438\n00:24:16.458 --> 00:24:18.385\nAntivirus is killing it and\nyou can't use that,\n\n439\n00:24:18.385 --> 00:24:19.848\nyou have to build from the ground up.\n\n440\n00:24:19.848 --> 00:24:21.975\nOr you wanna be a little more stealthy,\n\n441\n00:24:21.975 --> 00:24:25.060\nthis could be a very good way\nin which you can do that.\n\n442\n00:24:25.060 --> 00:24:26.720\nJustin, we do thank you for\nyour time and effort on this,\n\n443\n00:24:26.720 --> 00:24:29.840\nvery cool stuff, hopefully you\nguys enjoyed it, but guess what?\n\n444\n00:24:29.840 --> 00:24:33.080\nIt's that time for us to sign off,\nfor DevProTV, I've been your host,\n\n445\n00:24:33.080 --> 00:24:33.870\nDaniel Lowry.\n\n446\n00:24:33.870 --> 00:24:34.817\n&gt;&gt; And I'm Justin Dennison.\n\n447\n00:24:34.817 --> 00:24:35.331\n&gt;&gt; And we'll see you next time.\n\n448\n00:24:35.331 --> 00:24:41.335\n[MUSIC]\n\n",
          "vimeoId": "228213883"
        },
        {
          "description": "In this episode, Daniel and Justin demonstrate using Python to create a simple port scanner. Here they will build upon their socket connection to query a machine on specified ports. They also look at debugging errors.",
          "length": "1817",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-2-1-create_a_port_scanner-080117-PGM.00_30_32_28.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-2-1-create_a_port_scanner-080117-PGM.00_30_32_28.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-2-1-create_a_port_scanner-080117-PGM.00_30_32_28.Still001-sm.jpg",
          "title": "Create a Port Scanner",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.005 --> 00:00:14.309\nAll right, greetings everyone.\n\n3\n00:00:14.309 --> 00:00:17.540\nWelcome back to another\ngreat episode of DEVPRO.TV.\n\n4\n00:00:17.540 --> 00:00:19.640\nI'm your host, Daniel Lowrie,\nand in today's episode,\n\n5\n00:00:19.640 --> 00:00:22.570\nit's more in our Python for\nSecurity series.\n\n6\n00:00:22.570 --> 00:00:24.340\nJoining us back in the studio yet again,\n\n7\n00:00:24.340 --> 00:00:28.790\nto help lend his knowledge to that topic,\nour good friend Mr. Justin Dennison.\n\n8\n00:00:28.790 --> 00:00:30.380\nJustin, welcome back sir,\nhow is it going today?\n\n9\n00:00:30.380 --> 00:00:32.733\n&gt;&gt; It is going fantastic.\n\n10\n00:00:32.733 --> 00:00:34.442\nI was a little warm earlier, but I think\nI'm just trying to cool down a little bit.\n\n11\n00:00:34.442 --> 00:00:37.680\n&gt;&gt; It was, it gets so\nwarm on these floors.\n\n12\n00:00:37.680 --> 00:00:39.410\n&gt;&gt; Maybe I'm just getting in the groove or\nsomething.\n\n13\n00:00:39.410 --> 00:00:40.270\nBut how are you today?\n\n14\n00:00:40.270 --> 00:00:42.890\n&gt;&gt; I'm good man,\nI'm looking forward to today's episode.\n\n15\n00:00:42.890 --> 00:00:44.859\nCuz today we're gonna,\nif I'm not mistaken,\n\n16\n00:00:44.859 --> 00:00:48.318\nif I'm looking at my notes correctly,\nit's talking about port scanner referee.\n\n17\n00:00:48.318 --> 00:00:49.710\n[LAUGH]\n&gt;&gt; Yeah, we are.\n\n18\n00:00:49.710 --> 00:00:53.471\nWell, it may not be quite to\nthe extent that you know it, but\n\n19\n00:00:53.471 --> 00:00:56.192\nI think it's a good first approximation.\n\n20\n00:00:56.192 --> 00:00:59.918\nAnd well, we're gonna build our own, so\nwe can see how some of those other tools,\n\n21\n00:00:59.918 --> 00:01:02.340\npossibly start doing\ntheir very own things.\n\n22\n00:01:02.340 --> 00:01:07.081\nAgain, this series is about\nunderstanding the tools.\n\n23\n00:01:07.081 --> 00:01:09.460\nBecause this Python-specific for us, but\n\n24\n00:01:09.460 --> 00:01:13.315\nthere is nothing that says these may\nnot be available in other languages\n\n25\n00:01:13.315 --> 00:01:16.610\nthat you use, or have available\nto you on a specific system.\n\n26\n00:01:16.610 --> 00:01:20.690\nSo yeah, we're gonna build a port\nscanner and, well, all we're gonna do is\n\n27\n00:01:20.690 --> 00:01:24.830\npick an IP, and check a bunch of\nport ranges, and see how it works.\n\n28\n00:01:24.830 --> 00:01:27.283\nNow, it's fairly simplistic but,\n\n29\n00:01:27.283 --> 00:01:32.170\nI'm gonna add my own little flair,\nmake it a little more readable for me.\n\n30\n00:01:32.170 --> 00:01:35.820\nAlso give it,\nmaybe even I'm gonna output it to a file.\n\n31\n00:01:35.820 --> 00:01:37.184\nAnd I'm gonna do that in Python.\n\n32\n00:01:37.184 --> 00:01:41.270\nEven though, admittedly so,\nwe could probably just do that by printing\n\n33\n00:01:41.270 --> 00:01:45.870\nto standard out, and then redirecting\nthat into a file using our utilities.\n\n34\n00:01:45.870 --> 00:01:47.900\nBut who knows?\n\n35\n00:01:47.900 --> 00:01:49.840\nMaybe we need it for some other reason.\n\n36\n00:01:49.840 --> 00:01:53.304\nSo let's go ahead and take a look at my\nscreen here, and kinda set the scene,\n\n37\n00:01:53.304 --> 00:01:53.911\nso tp speak.\n\n38\n00:01:53.911 --> 00:01:58.410\nI have a VM running on my\nother desktop metasploitable.\n\n39\n00:01:58.410 --> 00:02:00.550\nThat is a really long word!\n\n40\n00:02:00.550 --> 00:02:01.166\n&gt;&gt; It is.\n\n41\n00:02:01.166 --> 00:02:03.620\nMetasploitable!\n\n42\n00:02:03.620 --> 00:02:05.030\nSo it's running, it's good.\n\n43\n00:02:05.030 --> 00:02:07.230\nIt has known exploits.\n\n44\n00:02:07.230 --> 00:02:12.175\nI'm going to assume,\nI already know the IP, everything's good.\n\n45\n00:02:12.175 --> 00:02:15.559\nWe're now down to the step,\nI need to scan a range of ports,\n\n46\n00:02:15.559 --> 00:02:17.018\nto see which ones are open.\n\n47\n00:02:17.018 --> 00:02:22.510\nAnd then I can make some assertions\nabout possible services that I can use,\n\n48\n00:02:22.510 --> 00:02:25.396\nlike a vulnerability vector, right?\n\n49\n00:02:25.396 --> 00:02:28.280\nSo we're good.\n\n50\n00:02:28.280 --> 00:02:30.735\nI'm still in the same folder,\ncreate connection.\n\n51\n00:02:30.735 --> 00:02:31.810\nAnd that's episode one,\n\n52\n00:02:31.810 --> 00:02:33.800\nyou should definitely go check\nthat out if you haven't.\n\n53\n00:02:33.800 --> 00:02:39.570\nBecause I'm assuming you know how to\ncreate a socket connect from episode one,\n\n54\n00:02:39.570 --> 00:02:41.110\nin order to be build this port scanner.\n\n55\n00:02:41.110 --> 00:02:43.530\nAnd then this utils\nfunction is the timing.\n\n56\n00:02:43.530 --> 00:02:46.472\nNow, we actually may use that\nin this episode, because it's,\n\n57\n00:02:46.472 --> 00:02:49.480\nI just wanna see how long it takes\nto scan a certain range of ports.\n\n58\n00:02:49.480 --> 00:02:52.731\nAll right, so I'm gonna build this for\n\n59\n00:02:52.731 --> 00:02:58.060\nmy Pythonic perspective,\nwith some kind of assumptions here.\n\n60\n00:02:58.060 --> 00:03:01.580\nAnd it may be that you, and\nmay be even Daniel's like, hold up,\n\n61\n00:03:01.580 --> 00:03:05.255\nI don't like the way you're doing that,\nwhy are you doing it that way?\n\n62\n00:03:05.255 --> 00:03:08.294\n&gt;&gt; [LAUGH]\n&gt;&gt; And that's the interesting thing about\n\n63\n00:03:08.294 --> 00:03:11.860\ncode, is everybody has their\nown little flavor, right?\n\n64\n00:03:11.860 --> 00:03:15.970\nSo let's go ahead, and\nlet's make our port scanner here.\n\n65\n00:03:15.970 --> 00:03:18.302\nAnd I have to do a little bit of setup.\n\n66\n00:03:18.302 --> 00:03:24.352\nAnd part of that is, well,\nI'm gonna say if__ or\n\n67\n00:03:24.352 --> 00:03:28.600\nname__ == '__main__'.\n\n68\n00:03:28.600 --> 00:03:32.990\nNow, again, just to reiterate, I'm doing\nthis because now the scanning utility,\n\n69\n00:03:32.990 --> 00:03:37.220\nthe actual port scanning utility, if I\nwanted to use it in some other context.\n\n70\n00:03:37.220 --> 00:03:40.120\nLet's say, well, I'm gonna scan all\nthe ports and then, when I get that,\n\n71\n00:03:40.120 --> 00:03:43.750\nI'm gonna go ahead and start,\nI don't know, banner grabbing, right?\n\n72\n00:03:43.750 --> 00:03:48.070\nSo if I wanted to combine those, I don't\nwant this code that I'm using to run to\n\n73\n00:03:48.070 --> 00:03:52.470\nkind of test the port scan, in this file,\nto run when I import it from another file.\n\n74\n00:03:52.470 --> 00:03:54.840\nSo just a reminder there.\n\n75\n00:03:54.840 --> 00:03:57.297\nAnd I typically just call this main, and\n\n76\n00:03:57.297 --> 00:04:00.339\nthen write another function\nthat actually runs.\n\n77\n00:04:00.339 --> 00:04:03.571\nAgain, it's not necessarily\nsomething you have to do,\n\n78\n00:04:03.571 --> 00:04:05.533\nit's something that I do though.\n\n79\n00:04:05.533 --> 00:04:10.269\nAnd, well, I'm gonna go ahead and say IP,\n\n80\n00:04:10.269 --> 00:04:15.280\nand what is the IP for\nthis VM that's running?\n\n81\n00:04:15.280 --> 00:04:17.551\nIt's 10.10.140.\n\n82\n00:04:17.551 --> 00:04:20.653\nAnd well, that's all I'm\ngoing to store there for now.\n\n83\n00:04:20.653 --> 00:04:22.910\nBecause, actually I have\nto write a port scan.\n\n84\n00:04:22.910 --> 00:04:26.693\nNow, here's my goal.\n\n85\n00:04:26.693 --> 00:04:32.320\nI want to construct kind\nof these variables.\n\n86\n00:04:32.320 --> 00:04:36.430\nThe one that takes the IP,\nor the host, or address.\n\n87\n00:04:36.430 --> 00:04:39.079\nUltimately, I know those\nare different things ultimately, but\n\n88\n00:04:39.079 --> 00:04:42.356\nI'm gonna be honest with you, I'm kind\nof cavalier when it comes to terminology\n\n89\n00:04:42.356 --> 00:04:43.914\nabout this stuff I want so [INAUDIBLE].\n\n90\n00:04:43.914 --> 00:04:47.987\n&gt;&gt; [LAUGH]\n&gt;&gt; So [COUGH] I wanna build something that\n\n91\n00:04:47.987 --> 00:04:53.020\ncan store those, to where I can\nuse those in multiple functions.\n\n92\n00:04:53.020 --> 00:04:55.445\nSo I don't have to pass\nthem around to functions.\n\n93\n00:04:55.445 --> 00:04:58.580\nNow, the way we do that in\nPython is using a class.\n\n94\n00:04:58.580 --> 00:05:01.402\nSo I'm just gonna call this, not scan!\n\n95\n00:05:01.402 --> 00:05:03.360\n&gt;&gt; [LAUGH]\n&gt;&gt; But scanner.\n\n96\n00:05:03.360 --> 00:05:07.437\nAnd I'm gonna say def __init.\n\n97\n00:05:07.437 --> 00:05:10.220\nAnd what is the Scanner gonna do?\n\n98\n00:05:10.220 --> 00:05:12.305\nIt's going to take, let's just call it IP.\n\n99\n00:05:12.305 --> 00:05:16.570\nAgain, yo could change this name and\nultimately drill down.\n\n100\n00:05:16.570 --> 00:05:22.694\nCuz technically, I don't have to have\nan IP in order to scan over this.\n\n101\n00:05:22.694 --> 00:05:26.612\nBut self.ip = ip.\n\n102\n00:05:26.612 --> 00:05:31.310\nAnd well,\nI just wanna see what this looks like.\n\n103\n00:05:31.310 --> 00:05:36.390\nAnd to do that,\nI'm gonna build a reaper method, yes repr.\n\n104\n00:05:36.390 --> 00:05:39.240\nIt's kind of an interesting thing.\n\n105\n00:05:39.240 --> 00:05:44.284\nAnd I'm going to return Scanner.\n\n106\n00:05:44.284 --> 00:05:50.613\nAnd I just wanna return the IP\nthat's in there, self.ip, all right?\n\n107\n00:05:50.613 --> 00:05:54.793\nSo I'm gonna build the scanner object.\n\n108\n00:05:54.793 --> 00:05:59.665\nAnd again, this is very Pythonic,\nas far as building a class, but\n\n109\n00:05:59.665 --> 00:06:04.635\nI do wanna take a quick aside and\nshow you, why I'm going to do that.\n\n110\n00:06:04.635 --> 00:06:07.698\nSo I'm gonna run back through this,\nbut I wanna a quick print out here.\n\n111\n00:06:07.698 --> 00:06:12.222\nSo I'm gonna pass the IP\nthat I know about, and\n\n112\n00:06:12.222 --> 00:06:15.356\nthen, python port_scanner.\n\n113\n00:06:15.356 --> 00:06:18.692\nWait for it, yeah,\nI actually have to print something out for\n\n114\n00:06:18.692 --> 00:06:20.488\nit to do what I anticipated it to do.\n\n115\n00:06:20.488 --> 00:06:25.212\n&gt;&gt; [LAUGH]\n&gt;&gt; So print(repr(scanner), or\n\n116\n00:06:25.212 --> 00:06:28.150\nrepresentation of the scanner.\n\n117\n00:06:28.150 --> 00:06:30.648\nSo python port_scanner.py, boom.\n\n118\n00:06:30.648 --> 00:06:33.880\nSo it's a scanner for this IP.\n\n119\n00:06:33.880 --> 00:06:36.890\nSo that's why I'm building a class.\n\n120\n00:06:36.890 --> 00:06:40.287\nSo that IP is essentially cached\ninternal to the object, and\n\n121\n00:06:40.287 --> 00:06:44.294\nthen I can do a bunch of other stuff,\nand always have that IP available.\n\n122\n00:06:44.294 --> 00:06:48.129\nNow, one could say,\nwell that's kinda weird, but hopefully,\n\n123\n00:06:48.129 --> 00:06:50.723\nyou'll see the power\nhere in just a moment.\n\n124\n00:06:50.723 --> 00:06:54.860\nThat self.ip = ip,\nthat's what's allowing me to do that.\n\n125\n00:06:54.860 --> 00:06:58.350\nI'm saying, take this object,\ncreate a property called IP,\n\n126\n00:06:58.350 --> 00:07:03.860\nwhatever is passed in as the IP, assign it\nto that property, to the object property.\n\n127\n00:07:05.130 --> 00:07:07.320\nThis is convention for Python.\n\n128\n00:07:07.320 --> 00:07:11.986\nAnd then the reaper method is a special\nmethod, just like __init, that if I print\n\n129\n00:07:11.986 --> 00:07:16.133\nand there's no __ string, it will\nactually print this out to the line.\n\n130\n00:07:16.133 --> 00:07:19.061\nAnd they're technically supposed to be\ndifferent, but I like saying reaper.\n\n131\n00:07:19.061 --> 00:07:19.773\nSo I tend to write reaper methods.\n\n132\n00:07:19.773 --> 00:07:21.668\n&gt;&gt; [LAUGH]\n&gt;&gt; And Justin,\n\n133\n00:07:21.668 --> 00:07:24.967\nwe had an interesting conversation\nbefore the show about this.\n\n134\n00:07:24.967 --> 00:07:26.992\nI was looking at it, and\nI saw these classes, and\n\n135\n00:07:26.992 --> 00:07:29.640\nI asked you to explain why\nwe were using this class?\n\n136\n00:07:29.640 --> 00:07:33.258\nAnd when you explained that, I said,\nwell, it sounds a lot like a function.\n\n137\n00:07:33.258 --> 00:07:36.900\nIs this different than a function,\nis it the same as a function?\n\n138\n00:07:36.900 --> 00:07:41.860\nAre they function-like,\nwhy is the definition so similar?\n\n139\n00:07:41.860 --> 00:07:43.222\n&gt;&gt; Can I just check e, all of the above?\n\n140\n00:07:43.222 --> 00:07:44.045\n&gt;&gt; [LAUGH] Yeah.\n\n141\n00:07:44.045 --> 00:07:45.560\n&gt;&gt; I think I'm gonna go with that.\n\n142\n00:07:45.560 --> 00:07:50.396\nNow, technically, technically in Python,\na function is an object,\n\n143\n00:07:50.396 --> 00:07:54.036\na class is a way to declare\nhow to construct an object.\n\n144\n00:07:54.036 --> 00:07:56.026\nSo when you def some name,\n\n145\n00:07:56.026 --> 00:08:01.550\nit's creating something similar to\nwhen I called Scanner and put in IP.\n\n146\n00:08:01.550 --> 00:08:07.440\nI can also make a class, something called\ncallable, and call it like a function.\n\n147\n00:08:07.440 --> 00:08:09.700\nSo ultimately, they kind of blur together.\n\n148\n00:08:09.700 --> 00:08:14.140\nNow, I think for comparison sake, if we\nhave time, if we can get the scanner off\n\n149\n00:08:14.140 --> 00:08:18.230\nthe ground, what I may do is build\none that is not flash based.\n\n150\n00:08:18.230 --> 00:08:22.850\nJust real quick so we can see a comparison\nof why we do one versus the other.\n\n151\n00:08:22.850 --> 00:08:25.410\nAlso when it comes down\nto personal preference.\n\n152\n00:08:25.410 --> 00:08:29.640\nI know when I need to kind of encapsulate\ninformation that I may use in multiple\n\n153\n00:08:29.640 --> 00:08:32.340\nplaces, it's easier for\nme to build a class and\n\n154\n00:08:32.340 --> 00:08:37.290\nthen put methods on that class than it is\nto, like for instance, the IP or the host.\n\n155\n00:08:37.290 --> 00:08:40.720\nIf I wanna pass that around, I have\nto actually make that an argument of\n\n156\n00:08:40.720 --> 00:08:43.700\nevery function that I write,\nwhich can get a little, eh.\n\n157\n00:08:43.700 --> 00:08:48.290\nOr I have to use global variables and\nthen, sometimes that gets a little weird.\n\n158\n00:08:48.290 --> 00:08:49.760\n&gt;&gt; Okay.\n&gt;&gt; Like someone,\n\n159\n00:08:49.760 --> 00:08:51.810\nI just changed that global\nvariable to something,\n\n160\n00:08:51.810 --> 00:08:53.030\nwell it broke the rest of the code.\n\n161\n00:08:53.030 --> 00:08:53.530\n&gt;&gt; Yeah.\n&gt;&gt; Oops!\n\n162\n00:08:53.530 --> 00:08:54.490\n&gt;&gt; You can't do that.\n\n163\n00:08:54.490 --> 00:08:55.230\n&gt;&gt; Yeah, it was bad.\n\n164\n00:08:55.230 --> 00:08:56.170\nSo, let's go ahead and\n\n165\n00:08:56.170 --> 00:08:57.780\ntake a look at my code here and well,\n\n166\n00:08:57.780 --> 00:09:02.050\nlet's actually start\nbuilding a port scanner.\n\n167\n00:09:02.050 --> 00:09:06.020\nWe got the start, but, so\n\n168\n00:09:06.020 --> 00:09:12.090\nI'm gonna import the socket library,\nand well, what am I going to do here?\n\n169\n00:09:12.090 --> 00:09:14.670\nWell, ultimately,\nI don't want a long-living socket,\n\n170\n00:09:14.670 --> 00:09:16.900\nI don't want a long-living\nsocket connection.\n\n171\n00:09:18.210 --> 00:09:21.160\nMy ultimate goal is to do a quick check.\n\n172\n00:09:21.160 --> 00:09:25.010\nDoes it return that it is open?\n\n173\n00:09:25.010 --> 00:09:28.000\nAnd if it does, I want to keep right.\n\n174\n00:09:28.000 --> 00:09:29.890\nI want to say, yep that one is open.\n\n175\n00:09:29.890 --> 00:09:31.720\nAnd then otherwise I want to ignore it.\n\n176\n00:09:31.720 --> 00:09:33.349\nSo, this is the general algorithm here.\n\n177\n00:09:34.610 --> 00:09:37.320\nSo I'm gonna write a couple\nof kind of stub methods here.\n\n178\n00:09:37.320 --> 00:09:38.850\nSo I'm gonna say scan.\n\n179\n00:09:38.850 --> 00:09:44.410\nAnd this is going to take a lower port and\nan upper port.\n\n180\n00:09:44.410 --> 00:09:48.540\nSo this is going to scan a range of ports.\n\n181\n00:09:49.850 --> 00:09:52.280\nI'm just gonna put a pass here for now.\n\n182\n00:09:52.280 --> 00:09:57.130\nAnd then also I'm going to say is_open,\nand\n\n183\n00:09:57.130 --> 00:10:00.950\nthat's going to tell me\nwhether a port is open or not.\n\n184\n00:10:00.950 --> 00:10:03.360\nNow this is really the meat and potatoes.\n\n185\n00:10:03.360 --> 00:10:04.417\nI just got hungry, Dan.\n\n186\n00:10:04.417 --> 00:10:05.475\n&gt;&gt; [LAUGH]\n&gt;&gt; Meat and potatoes.\n\n187\n00:10:05.475 --> 00:10:07.315\nOpen-faced roast beef sandwich.\n\n188\n00:10:07.315 --> 00:10:08.865\n&gt;&gt; Now you're talking my language.\n\n189\n00:10:08.865 --> 00:10:09.485\n&gt;&gt; Yeah, yeah.\n\n190\n00:10:09.485 --> 00:10:10.115\n&gt;&gt; Forget Python.\n\n191\n00:10:10.115 --> 00:10:13.306\nI wanna have a language called\nOpen-Faced Roast Beef Sandwich.\n\n192\n00:10:13.306 --> 00:10:15.354\n[LAUGH]\n&gt;&gt; Yeah, you just stare at it and\n\n193\n00:10:15.354 --> 00:10:16.570\ndrool and it does stuff.\n\n194\n00:10:16.570 --> 00:10:17.475\n&gt;&gt; [LAUGH]\n&gt;&gt; Au jus.\n\n195\n00:10:17.475 --> 00:10:18.325\nThat's delicious.\n\n196\n00:10:18.325 --> 00:10:22.175\n&gt;&gt; That was a nice little segue.\n\n197\n00:10:23.415 --> 00:10:25.475\n&gt;&gt; Anyway, coming back, so\n\n198\n00:10:25.475 --> 00:10:30.160\nit's open is ultimately gonna\nbe what accomplishes our work.\n\n199\n00:10:30.160 --> 00:10:32.290\nIt's gonna test the port.\n\n200\n00:10:32.290 --> 00:10:33.810\nHow's it gonna do that?\n\n201\n00:10:33.810 --> 00:10:38.050\nWell, you know it's probably best\nif we wait to come back to that.\n\n202\n00:10:38.050 --> 00:10:41.560\nI know,\nit was a nice little curveball there.\n\n203\n00:10:41.560 --> 00:10:42.170\n&gt;&gt; Teaser, you.\n\n204\n00:10:42.170 --> 00:10:43.820\n&gt;&gt; I promise, we'll come back to that.\n\n205\n00:10:43.820 --> 00:10:46.620\nBecause, I just wanted to\nstub out this last method.\n\n206\n00:10:46.620 --> 00:10:50.600\nAnd say I want to have a write\nmethod that takes a file path and\n\n207\n00:10:50.600 --> 00:10:52.180\nactually outputs to files.\n\n208\n00:10:53.230 --> 00:10:54.820\nSo I'm going to say pass.\n\n209\n00:10:54.820 --> 00:11:01.899\nNow, in order to keep track of\nall of the ports that are open,\n\n210\n00:11:03.170 --> 00:11:07.940\nI needed to keep track of the list\nof ports internal to the class okay.\n\n211\n00:11:07.940 --> 00:11:13.950\nSo I'm gonna say self open\nports is an empty list.\n\n212\n00:11:13.950 --> 00:11:14.450\nThat's it.\n\n213\n00:11:15.660 --> 00:11:20.740\nNow we're can start writing our scan and\nour is open.\n\n214\n00:11:20.740 --> 00:11:24.000\nSo i'm gonna start the scan because that's\nthe broad overview of our algorithm that\n\n215\n00:11:24.000 --> 00:11:25.210\nwe're going to approach.\n\n216\n00:11:26.290 --> 00:11:28.060\nWell, we're going to use to approach this.\n\n217\n00:11:28.060 --> 00:11:31.530\nSo for port in the range,\n\n218\n00:11:31.530 --> 00:11:36.480\nfrom the lower port,\nto the upper port plus one.\n\n219\n00:11:36.480 --> 00:11:39.350\nNow, there's some assumptions here.\n\n220\n00:11:39.350 --> 00:11:43.050\nThe assumption is the lower port and\nupper port are numbers.\n\n221\n00:11:43.050 --> 00:11:45.250\nParticularly, they're integer values.\n\n222\n00:11:45.250 --> 00:11:46.930\nWell, that kind of makes sense.\n\n223\n00:11:46.930 --> 00:11:49.160\nExcept they can't be strings,\nbecause then it gets weird.\n\n224\n00:11:49.160 --> 00:11:51.650\nAnd the reason I put the plus\none there is because\n\n225\n00:11:51.650 --> 00:11:54.910\nI actually have to overrun\nbecause it is not inclusive.\n\n226\n00:11:54.910 --> 00:11:57.330\nThe range function is\nnon-inclusive on the right side.\n\n227\n00:11:58.860 --> 00:12:03.374\nAnd as I run from these ports,\n\n228\n00:12:03.374 --> 00:12:10.246\nI'm gonna say, if the port is open, right?\n\n229\n00:12:10.246 --> 00:12:17.402\nSo if the port is open,\nthen self.add.port like so, okay?\n\n230\n00:12:17.402 --> 00:12:22.549\nSo I have parentheses that I do not need.\n\n231\n00:12:24.230 --> 00:12:28.190\nI went back to like Java,\nJavaScript C based land.\n\n232\n00:12:28.190 --> 00:12:30.620\nIt was crazy there for a second.\n\n233\n00:12:30.620 --> 00:12:31.538\nDid I black out?\n\n234\n00:12:31.538 --> 00:12:35.010\n&gt;&gt; [LAUGH]\n&gt;&gt; No sorry sometimes I get a little crazy\n\n235\n00:12:35.010 --> 00:12:36.170\nwith parentheses.\n\n236\n00:12:36.170 --> 00:12:40.140\nThat's what happens when you switch\ncontext between languages a great deal.\n\n237\n00:12:40.140 --> 00:12:42.090\nSo if we just read this for\n\n238\n00:12:42.090 --> 00:12:46.090\na port in the range of ports,\nif the port is open, add the port,\n\n239\n00:12:46.090 --> 00:12:50.637\nwell that method, this self, that means\nit should be defined on the class.\n\n240\n00:12:50.637 --> 00:12:55.310\nAdd port does not exist, so we're just\ngonna go ahead and write that real quick.\n\n241\n00:12:55.310 --> 00:12:58.690\nAnd, the reason I renamed it,\nit's actually gonna be fairly simple, but\n\n242\n00:12:58.690 --> 00:13:04.000\nnow my algorithm, my intention,\nis very clearly described.\n\n243\n00:13:05.570 --> 00:13:09.410\nIf it's open, add it, if it's not?\n\n244\n00:13:09.410 --> 00:13:11.380\nDon't worry about it.\n\n245\n00:13:11.380 --> 00:13:15.250\nSo that's there, so\nI'm just gonna say add_port and\n\n246\n00:13:15.250 --> 00:13:20.456\nthat's going to be a class method that\ntakes a port and all it's gonna do is\n\n247\n00:13:20.456 --> 00:13:25.919\nsay open_ports.append(port) like so.\n\n248\n00:13:27.020 --> 00:13:28.916\nNow, what about is.open?\n\n249\n00:13:28.916 --> 00:13:33.190\nIs.open is where we're finally\ngonna use the socket library and\n\n250\n00:13:33.190 --> 00:13:36.340\nto figure out is the port open or not.\n\n251\n00:13:36.340 --> 00:13:39.280\nNow I've made no claims about\nthe robustness of this,\n\n252\n00:13:39.280 --> 00:13:43.100\nbut this is a good first try, I've\nactually had fairly good luck with it.\n\n253\n00:13:43.100 --> 00:13:46.810\nWell I ended up testing all kinds\nof stuff in varieties of places,\n\n254\n00:13:46.810 --> 00:13:48.395\nI don't necessarily\nrecommend doing that either.\n\n255\n00:13:48.395 --> 00:13:52.220\n&gt;&gt; [LAUGH]\n&gt;&gt; Like my home and things like that,\n\n256\n00:13:52.220 --> 00:13:55.230\nit was one time I actually ran\nport scan on a public network.\n\n257\n00:13:55.230 --> 00:13:59.550\nI was like, it feels like somebody's gonna\nshow up and go like, what are you doing?\n\n258\n00:13:59.550 --> 00:14:01.233\n&gt;&gt; You don't feel that way anymore.\n\n259\n00:14:01.233 --> 00:14:03.550\n&gt;&gt; But I be the one, what are you doing?\n\n260\n00:14:03.550 --> 00:14:07.650\nSorry man, my bad, but\nhow we determine if its open?\n\n261\n00:14:07.650 --> 00:14:13.160\nAnd now well,\nI'm going to create a socket just like so\n\n262\n00:14:13.160 --> 00:14:17.680\nand I'm going to be explicit\nabout that and I'm making some\n\n263\n00:14:17.680 --> 00:14:21.900\nassumptions again as this is a standard\nTCP socket and so on and so forth.\n\n264\n00:14:21.900 --> 00:14:24.530\nThat one I check on episode one\nwhere we talked more in-depth\n\n265\n00:14:24.530 --> 00:14:25.527\nabout what I'm doing here.\n\n266\n00:14:25.527 --> 00:14:31.235\nAnd so SOCK_STREAM, and\nthere's our socket, okay?\n\n267\n00:14:31.235 --> 00:14:33.914\nSo, let's see.\n\n268\n00:14:37.630 --> 00:14:42.453\nResult, now, the reason I'm doing\nthis result here is because I want\n\n269\n00:14:42.453 --> 00:14:46.380\nto be able to close\nthe port before I return.\n\n270\n00:14:46.380 --> 00:14:51.690\nSo I'm gonna grab a result,\nand I'm gonna say, connect_ex.\n\n271\n00:14:51.690 --> 00:14:53.848\nAnd what am I gonna connect to?\n\n272\n00:14:53.848 --> 00:14:55.243\nLet's say.\n\n273\n00:14:55.243 --> 00:14:58.810\nWith the IP, the host,\nand the port that sent it.\n\n274\n00:14:58.810 --> 00:15:02.820\nAnd the result's gonna\nreturn zero to something.\n\n275\n00:15:02.820 --> 00:15:05.800\nSo zero means that it is open and there\nwere no errors making the connection,\n\n276\n00:15:05.800 --> 00:15:07.080\nthe connection was made.\n\n277\n00:15:07.080 --> 00:15:08.450\nAnd then there's all these other things.\n\n278\n00:15:08.450 --> 00:15:12.310\nIf it's not zero, that means that it's not\nopen to us, that something went wrong.\n\n279\n00:15:13.970 --> 00:15:17.510\nAnd then, I'm going to ahead and\nclose said socket, so\n\n280\n00:15:17.510 --> 00:15:20.050\nI can just not worry about it anymore.\n\n281\n00:15:20.050 --> 00:15:23.541\nAnd then return is the result equal to 0?\n\n282\n00:15:23.541 --> 00:15:28.913\nSo is_open is not quite as clear\nas I would like to be because\n\n283\n00:15:28.913 --> 00:15:34.510\nthis variable name right here,\nresult, what is the result?\n\n284\n00:15:34.510 --> 00:15:37.110\nWell what was the result\nof the connection made?\n\n285\n00:15:37.110 --> 00:15:41.600\nDid I get a zero code or\ndid I get something else?\n\n286\n00:15:41.600 --> 00:15:45.080\nSo create a socket, try to connect and\n\n287\n00:15:45.080 --> 00:15:49.830\nget the area code, 0 being there's\nno error, we successfully connected.\n\n288\n00:15:49.830 --> 00:15:54.533\nClose the socket and then return,\nis the result equal to 0?\n\n289\n00:15:54.533 --> 00:15:59.434\nOr so what'll happen is this will\nevaluate to true if the result is 0,\n\n290\n00:15:59.434 --> 00:16:02.273\nor it will evaluate to false otherwise.\n\n291\n00:16:02.273 --> 00:16:04.180\nAnd that will tell me if\nthe port's open or not.\n\n292\n00:16:04.180 --> 00:16:11.700\nSo, What about this scan, hm?\n\n293\n00:16:11.700 --> 00:16:12.700\nOr excuse me, this write.\n\n294\n00:16:15.440 --> 00:16:17.960\nLet's hold off on that just for a moment.\n\n295\n00:16:17.960 --> 00:16:21.010\nI'm actually going to do\nsome crazy stuff here and\n\n296\n00:16:21.010 --> 00:16:26.040\njust say print(scanner.open_ports).\n\n297\n00:16:26.040 --> 00:16:29.470\nAnd I can do this because\nthere's nothing about privacy.\n\n298\n00:16:29.470 --> 00:16:32.060\nThere's no private member\nvariables inside of Python.\n\n299\n00:16:32.060 --> 00:16:33.020\nEverything's public.\n\n300\n00:16:33.020 --> 00:16:35.700\n&gt;&gt; So this is all just going to\nbasically return to the screen?\n\n301\n00:16:35.700 --> 00:16:39.470\n&gt;&gt; Yep, yeah, so\nit's going to do a port scan, and\n\n302\n00:16:39.470 --> 00:16:42.030\nI actually have to tell\nit what range to scan.\n\n303\n00:16:42.030 --> 00:16:44.490\nAnd then it's going to tell\nme what open ports there are.\n\n304\n00:16:44.490 --> 00:16:48.600\nAnd this is gonna be pointed to then\nmy exploitable VM that we know for\n\n305\n00:16:48.600 --> 00:16:50.000\na fact has open ports on it.\n\n306\n00:16:50.000 --> 00:16:52.330\nThat's the entire purpose.\n\n307\n00:16:52.330 --> 00:16:56.420\nBut we should see a list of open ports.\n\n308\n00:16:58.120 --> 00:17:00.860\nSo I'm gonna say scanner.scan.\n\n309\n00:17:00.860 --> 00:17:04.880\nDo you have a favorite range of ports\nthat you'll have to scan for Daniel?\n\n310\n00:17:04.880 --> 00:17:08.470\n&gt;&gt; Well, there's always some good stuff\nthere right at the beginning of the well\n\n311\n00:17:08.470 --> 00:17:12.460\nknown port, so go from 1 to 100.\n\n312\n00:17:12.460 --> 00:17:15.510\n&gt;&gt; All right,1 to 100, all right.\n\n313\n00:17:15.510 --> 00:17:16.920\nLet's see what happens.\n\n314\n00:17:16.920 --> 00:17:20.020\nSo 1 to 100, like so, and you know what?\n\n315\n00:17:21.260 --> 00:17:26.430\nI'm going to import and bring in timefunc\njust to see how long this takes.\n\n316\n00:17:26.430 --> 00:17:30.620\n&gt;&gt; Yeah.\n&gt;&gt; So boom and then from utils import\n\n317\n00:17:33.120 --> 00:17:35.530\ntimefunc just like so.\n\n318\n00:17:35.530 --> 00:17:38.145\nMy VM skills have definitely\ngot better over the years.\n\n319\n00:17:38.145 --> 00:17:38.881\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n320\n00:17:38.881 --> 00:17:41.626\nthis timefunc is going to say main took so\n\n321\n00:17:41.626 --> 00:17:47.294\nmany seconds And,then also main itself is\ngoing to print out the set of open ports.\n\n322\n00:17:47.294 --> 00:17:51.828\nAnd also I have a syntax here which\nis now beyond my scope, boom.\n\n323\n00:17:51.828 --> 00:17:53.883\n&gt;&gt; Something\n&gt;&gt; Something went wrong\n\n324\n00:17:53.883 --> 00:17:56.557\n&gt;&gt; The timefunc really worked well though\n\n325\n00:17:56.557 --> 00:17:58.570\n[LAUGH]\n&gt;&gt; Yeah the timefunc,\n\n326\n00:17:58.570 --> 00:18:03.764\nit was definitely fast, so\nwhat could have possibly went wrong?\n\n327\n00:18:03.764 --> 00:18:06.473\nSometimes when you build these tools,\nright?\n\n328\n00:18:06.473 --> 00:18:09.625\nYou're building the tool, so\nyou have to get it right,\n\n329\n00:18:09.625 --> 00:18:11.810\nversus not building the tool.\n\n330\n00:18:11.810 --> 00:18:16.732\nSo my first instinct is I\nneed to go double check that\n\n331\n00:18:16.732 --> 00:18:22.001\nthe particular port,\nI'm getting a result, right?\n\n332\n00:18:22.001 --> 00:18:27.880\nSo I'm gonna go add a print statement for\neach port.\n\n333\n00:18:27.880 --> 00:18:32.100\nSo as I scan, only if it's open\n\n334\n00:18:34.380 --> 00:18:37.150\ndo I want to print the port.\n\n335\n00:18:37.150 --> 00:18:40.590\nSo let's see,\nmaybe add port is just not working.\n\n336\n00:18:40.590 --> 00:18:47.180\nSo that's my first step and then boom,\nno that ain't it so that's not running.\n\n337\n00:18:47.180 --> 00:18:50.810\nWe should probably make sure that function\nitself is running or that method.\n\n338\n00:18:50.810 --> 00:18:53.020\nSo I'm going to say port scanner and\n\n339\n00:18:53.020 --> 00:18:56.148\nI will tell you that timefunc\nit is working handily.\n\n340\n00:18:56.148 --> 00:19:01.570\nSo let's see for port in range lower\n\n341\n00:19:01.570 --> 00:19:07.330\nport to upper port, self port.\n\n342\n00:19:07.330 --> 00:19:11.030\nI should probably check to see\nif this actually has anything.\n\n343\n00:19:12.360 --> 00:19:18.020\nSo I'm going to create a little\nhelper here and say port\n\n344\n00:19:20.280 --> 00:19:26.010\nand then boom, and I'll just bring\nover here and result, right?\n\n345\n00:19:26.010 --> 00:19:31.090\nSo format, and\nthis is gonna be port, result, and\n\n346\n00:19:31.090 --> 00:19:35.460\nthis should print out every time that\ncheck is run internal to that method.\n\n347\n00:19:35.460 --> 00:19:36.345\nAnd then boom, all right, 61.\n\n348\n00:19:36.345 --> 00:19:39.215\n[SOUND] What happened there?\n\n349\n00:19:39.215 --> 00:19:40.130\n&gt;&gt; Not returning zero.\n\n350\n00:19:40.130 --> 00:19:43.578\n&gt;&gt; Yeah, not returning zero, which is\nweird because the entire purpose of using\n\n351\n00:19:43.578 --> 00:19:46.360\nMetasploitable is I knew\nthere were open ports here.\n\n352\n00:19:46.360 --> 00:19:51.248\nSo let me check to see why that\ncould possibly be the case.\n\n353\n00:19:51.248 --> 00:19:55.160\nWell, that is the question of the hour.\n\n354\n00:19:55.160 --> 00:19:56.470\n&gt;&gt; That is the question.\n\n355\n00:19:56.470 --> 00:19:58.410\n&gt;&gt; So let's give it an.\n\n356\n00:19:58.410 --> 00:20:00.910\nNot create connection,\nbut create a scanner.\n\n357\n00:20:04.000 --> 00:20:08.170\nSo port in lower range if it's open,\nhow do I check to see if it's open?\n\n358\n00:20:08.170 --> 00:20:12.600\nI create a socket, and the socket is\n\n359\n00:20:12.600 --> 00:20:17.380\nthe ip and port.\n\n360\n00:20:18.690 --> 00:20:22.215\nYou know what, maybe,\nI should double check this IP.\n\n361\n00:20:24.914 --> 00:20:29.223\nI checked that before the show, but\nmaybe I looked in the wrong place,\n\n362\n00:20:31.047 --> 00:20:33.360\nBecause everything else\nshould be good to go.\n\n363\n00:20:35.370 --> 00:20:39.026\nSo, let's check the IP,\n\n364\n00:20:39.026 --> 00:20:45.683\n10.10.13.0:1040 all right.\n\n365\n00:20:47.585 --> 00:20:49.142\nAnd go back.\n\n366\n00:20:49.142 --> 00:20:54.850\nYeah, that's odd well, thanks for\njoining us back there.\n\n367\n00:20:54.850 --> 00:20:59.200\nWe had some networking\ntroubleshooting in order to manage.\n\n368\n00:20:59.200 --> 00:21:01.470\nWe had some different IP mixups.\n\n369\n00:21:01.470 --> 00:21:05.600\nAnd well, I think we got it working now,\nas soon as we make that change.\n\n370\n00:21:05.600 --> 00:21:07.485\n&gt;&gt; You'll love virtual machines.\n\n371\n00:21:07.485 --> 00:21:08.691\nIt's a lot of fun later on.\n\n372\n00:21:08.691 --> 00:21:10.120\n&gt;&gt; You know, we are not infallible.\n\n373\n00:21:10.120 --> 00:21:10.650\n&gt;&gt; No, we are not.\n\n374\n00:21:10.650 --> 00:21:13.766\n&gt;&gt; Luckily you see it\nright here first hand.\n\n375\n00:21:13.766 --> 00:21:14.450\nSo, let's go ahead and\n\n376\n00:21:14.450 --> 00:21:18.690\ntake a look at my screen here and\nsee my assertion is in fact correct.\n\n377\n00:21:19.870 --> 00:21:23.023\nSo, we hop over here,\nhere's our Metasploitable box,\n\n378\n00:21:23.023 --> 00:21:26.700\nI'm gonna type IF config to find\nout what the IP address is.\n\n379\n00:21:26.700 --> 00:21:31.070\nAnd I like how I lose my cursor,\nbecause it's-\n\n380\n00:21:31.070 --> 00:21:32.030\n&gt;&gt; Yeah, it's.\n\n381\n00:21:32.030 --> 00:21:33.810\nWelcome to the headless system, my man.\n\n382\n00:21:33.810 --> 00:21:38.000\n&gt;&gt; So let's see, ifconfig and\nthen I'll just pipe grep inet.\n\n383\n00:21:38.000 --> 00:21:40.920\nI think that should give it to me, right?\n\n384\n00:21:40.920 --> 00:21:45.648\nSo reduce down all that noise,\n10.0.13.231.\n\n385\n00:21:45.648 --> 00:21:48.640\nAll right, so\nI'm gonna change the scanner's IP.\n\n386\n00:21:50.170 --> 00:21:51.176\n&gt;&gt; To the correct one.\n\n387\n00:21:51.176 --> 00:21:54.602\n&gt;&gt; To the correct one, and then that\nshould actually give us the list of open\n\n388\n00:21:54.602 --> 00:21:57.710\nports that we were originally\nexpecting before I had that [SOUND].\n\n389\n00:21:57.710 --> 00:21:58.490\n&gt;&gt; Yeah, [INAUDIBLE].\n[LAUGH]\n\n390\n00:21:58.490 --> 00:22:00.760\n&gt;&gt; I tested this nine times.\n\n391\n00:22:00.760 --> 00:22:02.130\nBut that's all right.\n\n392\n00:22:02.130 --> 00:22:05.260\nAnd we're gonna leave that print\nstatement in there just in case, right?\n\n393\n00:22:05.260 --> 00:22:07.900\nJust in case our assertion is not right.\n\n394\n00:22:07.900 --> 00:22:11.971\nSo I'm gonna come down here to IP, and\n\n395\n00:22:11.971 --> 00:22:15.932\nthat was 10.0.13.231.\n\n396\n00:22:15.932 --> 00:22:17.330\nThere we go.\n\n397\n00:22:17.330 --> 00:22:22.160\nSo, boom, python port_scanner,\nand there we go.\n\n398\n00:22:22.160 --> 00:22:29.150\nWe actually have a list of open ports,\n21, 22, 23 25, 53, and 80, from 1 to 100.\n\n399\n00:22:29.150 --> 00:22:32.582\nAnd as a matter of fact,\nit took four one-hundredths of a second.\n\n400\n00:22:32.582 --> 00:22:33.638\n&gt;&gt; That's pretty quick.\n\n401\n00:22:33.638 --> 00:22:35.400\n&gt;&gt; In order to scan those ports.\n\n402\n00:22:35.400 --> 00:22:37.410\nSo you could really churn them out.\n\n403\n00:22:37.410 --> 00:22:40.570\nAnd also,\nthis is the Python standard library.\n\n404\n00:22:40.570 --> 00:22:43.131\nI've been doing it in Python 2.\n\n405\n00:22:43.131 --> 00:22:43.932\nSo the question is.\n\n406\n00:22:43.932 --> 00:22:45.508\n&gt;&gt; Will it run on Python 3?\n\n407\n00:22:45.508 --> 00:22:48.580\n&gt;&gt; Question is will it run on Python 3?\n\n408\n00:22:48.580 --> 00:22:52.870\nAnd so I'm gonna say python3 and\nscanner, or port_scanner.\n\n409\n00:22:52.870 --> 00:22:54.400\nBoom, still runs on Python 3.\n\n410\n00:22:54.400 --> 00:22:56.010\nAnd as a matter of fact,\n&gt;&gt; Is it faster?\n\n411\n00:22:56.010 --> 00:22:56.676\n&gt;&gt; It's faster.\n\n412\n00:22:56.676 --> 00:22:57.688\n&gt;&gt; [LAUGH]\n&gt;&gt; But in-\n\n413\n00:22:57.688 --> 00:22:58.480\n&gt;&gt; 50% faster.\n\n414\n00:22:58.480 --> 00:23:01.134\n&gt;&gt; Yeah, in recent editions,\n&gt;&gt; 100% faster.\n\n415\n00:23:01.134 --> 00:23:01.690\n&gt;&gt; Yeah, 100% faster.\n\n416\n00:23:01.690 --> 00:23:02.290\nCut in half.\n\n417\n00:23:02.290 --> 00:23:02.980\n&gt;&gt; Cut in half.\n\n418\n00:23:02.980 --> 00:23:08.530\n&gt;&gt; In recent editions Python 3\nhas surpassed Python 2's speed.\n\n419\n00:23:08.530 --> 00:23:13.820\nSo, it works on both and I'm actually\ngoing to remove the nasty little-\n\n420\n00:23:13.820 --> 00:23:14.810\n&gt;&gt; Yeah, we don't need that.\n\n421\n00:23:14.810 --> 00:23:20.877\n&gt;&gt; We don't need that anymore, that's no\nbueno, so let's just get rid of this.\n\n422\n00:23:20.877 --> 00:23:24.041\nNow what I would like to do is maybe\nI need this list of open ports for\n\n423\n00:23:24.041 --> 00:23:24.802\nother things.\n\n424\n00:23:24.802 --> 00:23:28.720\nBoom I ran a port scan it was real\nfast I wanna keep it in a list.\n\n425\n00:23:28.720 --> 00:23:30.960\nLine by line, right,\nI know what the IP is.\n\n426\n00:23:30.960 --> 00:23:33.650\nAnd I've already accumulated\nthat information.\n\n427\n00:23:33.650 --> 00:23:36.700\nSo I'm just gonna write that to the file.\n\n428\n00:23:36.700 --> 00:23:40.699\nSo with open(filepath,\n\n429\n00:23:40.699 --> 00:23:46.151\n) we're gonna open it in write mode\n\n430\n00:23:46.151 --> 00:23:53.440\nas f.write( newline.join, so open files.\n\n431\n00:23:53.440 --> 00:23:55.929\nOpen ports, excuse me.\n\n432\n00:23:55.929 --> 00:24:00.502\nNow I could do some error checking to see\nif open ports has anything in it before I\n\n433\n00:24:00.502 --> 00:24:04.937\nwrote the file and then just say hey\nthere's no ports to write the file, file\n\n434\n00:24:04.937 --> 00:24:09.745\nnot written, but We're just going to go,\nthis is my tool I do what I want, right?\n\n435\n00:24:09.745 --> 00:24:13.270\nSo let's see if that actually works out.\n\n436\n00:24:13.270 --> 00:24:14.420\nPython 3.0 and\n\n437\n00:24:14.420 --> 00:24:18.960\njust cause we get that speed increase,\nboom it's actually faster that time.\n\n438\n00:24:18.960 --> 00:24:23.160\nSo there is some variability and part of\nthat is the timing function does not have\n\n439\n00:24:23.160 --> 00:24:27.720\ngreat precision, so we're making no strong\nclaims about performance from those.\n\n440\n00:24:27.720 --> 00:24:31.230\nBut we can say over a lot of runs,\n\n441\n00:24:31.230 --> 00:24:37.230\nwe could probably make an assertion\nabout it's 30% faster over some average.\n\n442\n00:24:37.230 --> 00:24:38.530\n&gt;&gt; Take an average.\n\n443\n00:24:38.530 --> 00:24:42.560\n&gt;&gt; Out of an average of 1,000 runs and\ncompare the average between two and three.\n\n444\n00:24:42.560 --> 00:24:44.240\nSo here's my open ports.\n\n445\n00:24:44.240 --> 00:24:50.180\nAnd now if I look there's actually,\nI didn't call anything.\n\n446\n00:24:50.180 --> 00:24:51.527\nSo it didn't write it to a file.\n\n447\n00:24:51.527 --> 00:24:53.432\n&gt;&gt; [LAUGH]\n&gt;&gt; I am silly.\n\n448\n00:24:53.432 --> 00:24:54.204\n&gt;&gt; It wanted to.\n\n449\n00:24:54.204 --> 00:24:56.030\n&gt;&gt; It wanted to, real bad.\n\n450\n00:24:56.030 --> 00:24:58.384\nThe function is there but\nI don't wanna list that.\n\n451\n00:24:58.384 --> 00:25:02.240\nI wanna say scanner,\nwrite and what do I run it.\n\n452\n00:25:02.240 --> 00:25:04.528\nLet's just call it open ports.\n\n453\n00:25:04.528 --> 00:25:10.200\nI’m not even gonna put a file extension\ncuz this is going to be a plain text file.\n\n454\n00:25:10.200 --> 00:25:14.035\n&gt;&gt; The great thing about Nix\nbased systems, you just give\n\n455\n00:25:14.035 --> 00:25:14.852\n&gt;&gt; [CROSSTALK]\n\n456\n00:25:14.852 --> 00:25:16.030\n&gt;&gt; I do love it.\n\n457\n00:25:16.030 --> 00:25:20.994\nAnd I did forget one thing,\nthese are numbers and the write requires,\n\n458\n00:25:20.994 --> 00:25:24.714\nthe join and write requires strings so\nthere you go.\n\n459\n00:25:24.714 --> 00:25:29.820\nPort, scanner, and boom.\n\n460\n00:25:29.820 --> 00:25:35.920\nSo we know that open ports,\nI'm just gonna say, open ports equals map.\n\n461\n00:25:35.920 --> 00:25:43.800\nSo I'm gonna map the string\nover self.open_ports like so.\n\n462\n00:25:43.800 --> 00:25:46.650\nAnd now all of those will\nbe converted to strings and\n\n463\n00:25:46.650 --> 00:25:49.610\nI can join on those with\nnew line characters.\n\n464\n00:25:51.470 --> 00:25:55.810\nOpen port, guess I should have\nreally made those plural.\n\n465\n00:25:55.810 --> 00:25:58.830\nBut here we go.\n\n466\n00:25:58.830 --> 00:26:02.952\nBoom, that's still like 2 one hundredth of\na second or 2.5 one hundredth of a second.\n\n467\n00:26:02.952 --> 00:26:05.290\n&gt;&gt; It's hovering right around there.\n\n468\n00:26:05.290 --> 00:26:07.945\n&gt;&gt; And then open, boom,\nthere they are from 1 to 100,\n\n469\n00:26:07.945 --> 00:26:10.102\nthere's the list of open\nports line by line.\n\n470\n00:26:10.102 --> 00:26:14.809\nNow I could use those for other tools and\nthat's ultimately, I love when I’m\n\n471\n00:26:14.809 --> 00:26:19.663\ndriving home, ultimately why I write this\non a class is now as long as that object\n\n472\n00:26:19.663 --> 00:26:24.390\nremains in memory during a run in process,\nI don't have to write it to a file.\n\n473\n00:26:24.390 --> 00:26:26.730\nI can just say, hey,\nwhat are your open ports?\n\n474\n00:26:26.730 --> 00:26:28.070\nSo the scan runs first.\n\n475\n00:26:28.070 --> 00:26:30.120\nAnd then it just hangs out.\n\n476\n00:26:30.120 --> 00:26:33.570\nAnd then let's say you're like,\nI wanna do some banner grabbing.\n\n477\n00:26:33.570 --> 00:26:34.140\n&gt;&gt; Yeah.\n\n478\n00:26:34.140 --> 00:26:36.840\n&gt;&gt; I'm gonna drag that list of\nports from the scanner object.\n\n479\n00:26:36.840 --> 00:26:41.339\nAnd then my banner grabber function, will\njust [SOUND] it'll just run through and\n\n480\n00:26:41.339 --> 00:26:45.496\ngrab the first 1024-\n&gt;&gt; How fast do you think it'd take to do\n\n481\n00:26:45.496 --> 00:26:48.990\nall 65,355 or whatever ports it is?\n\n482\n00:26:48.990 --> 00:26:51.250\n&gt;&gt; I don't know,\nthat sounds like a challenge-\n\n483\n00:26:51.250 --> 00:26:52.730\n&gt;&gt; I just wanna see how fast it'll go.\n\n484\n00:26:52.730 --> 00:26:54.030\n&gt;&gt; All right, well let's do it.\n\n485\n00:26:54.030 --> 00:26:54.760\n&gt;&gt; Let's do it.\n&gt;&gt; Let's do it.\n\n486\n00:26:54.760 --> 00:26:55.310\n&gt;&gt; Let's do it.\n\n487\n00:26:55.310 --> 00:26:56.560\n&gt;&gt; And within reason.\n\n488\n00:26:56.560 --> 00:26:57.580\n&gt;&gt; Yeah.\n&gt;&gt; Or we're just\n\n489\n00:26:57.580 --> 00:26:59.230\nsitting here going-\n&gt;&gt; [LAUGH]\n\n490\n00:26:59.230 --> 00:27:00.584\n&gt;&gt; Yeah, if it's 12 minutes,\n\n491\n00:27:00.584 --> 00:27:01.841\nwe'll probably let you go.\n\n492\n00:27:01.841 --> 00:27:04.300\n[LAUGH]\n&gt;&gt; Let's actually,\n\n493\n00:27:04.300 --> 00:27:06.456\nwhat's the last port number?\n\n494\n00:27:06.456 --> 00:27:10.832\n&gt;&gt; It's 65,000, is it- 535?\n\n495\n00:27:10.832 --> 00:27:13.235\nYeah, I think it is 65,535.\n\n496\n00:27:13.235 --> 00:27:14.821\nI always get the numbers mixed up.\n\n497\n00:27:14.821 --> 00:27:15.409\n&gt;&gt; Let's just go, 65,000.\n\n498\n00:27:15.409 --> 00:27:16.341\n&gt;&gt; Yeah, 65,000.\n\n499\n00:27:16.341 --> 00:27:16.884\n&gt;&gt; Ultimately,\n\n500\n00:27:16.884 --> 00:27:18.320\nthat last little bit [CROSSTALK]\n&gt;&gt; Yeah,\n\n501\n00:27:18.320 --> 00:27:20.380\nit's not gonna make a hill of beans.\n\n502\n00:27:20.380 --> 00:27:20.986\n&gt;&gt; Here we go!\n\n503\n00:27:20.986 --> 00:27:26.330\nFingers crossed, Python port_scanner,\nand wait for it, wait for it.\n\n504\n00:27:26.330 --> 00:27:28.380\nSo let's think about how this would scale.\n\n505\n00:27:28.380 --> 00:27:30.762\nThis is running one by\none through the ports.\n\n506\n00:27:30.762 --> 00:27:32.700\n&gt;&gt; Yep, making a full TCP connection.\n\n507\n00:27:32.700 --> 00:27:34.620\n&gt;&gt; Yep, 5.7 seconds, Daniel.\n\n508\n00:27:34.620 --> 00:27:36.440\n&gt;&gt; That's pretty smoking fast.\n\n509\n00:27:36.440 --> 00:27:39.370\n&gt;&gt; And let's see if there were any\nopen ports in the upper ranges.\n\n510\n00:27:39.370 --> 00:27:41.550\nSo I'm gonna say open_ports and boom,\n\n511\n00:27:41.550 --> 00:27:45.960\nthere is the all the open ports on\nthat machine that you can find.\n\n512\n00:27:45.960 --> 00:27:48.640\nAnd we wrote it from standard Python.\n\n513\n00:27:48.640 --> 00:27:50.645\nI don't know about you, but\nI'm pretty proud of this.\n\n514\n00:27:50.645 --> 00:27:52.050\n&gt;&gt; Yeah, you should be pretty proud of it.\n\n515\n00:27:52.050 --> 00:27:53.960\nIt ran extremely well, right?\n\n516\n00:27:53.960 --> 00:27:57.080\nWe got all the ports from A to Z,\nget every last one of them.\n\n517\n00:27:57.080 --> 00:28:00.580\nWe know that the connection\nwas made because it used that\n\n518\n00:28:00.580 --> 00:28:05.180\nstandard TCP connection, so a full three\nway handshake is being applied there.\n\n519\n00:28:05.180 --> 00:28:07.880\nWe know that it replied, it did do that.\n\n520\n00:28:07.880 --> 00:28:11.880\nVery robust and\nyou wrote within what's inside of the box,\n\n521\n00:28:11.880 --> 00:28:16.120\nso if I wasn't allowed to use something\nlike InMAP, which is a very great,\n\n522\n00:28:16.120 --> 00:28:19.000\nit is the gold standard of port scanners.\n\n523\n00:28:19.000 --> 00:28:23.040\nBut maybe that system has\nsaid if I see InMAP on there,\n\n524\n00:28:23.040 --> 00:28:26.256\nnein, nix, get rid of it or\nyou can't run it.\n\n525\n00:28:26.256 --> 00:28:29.720\nOr I could write my own just using Python,\nrun straight from the terminal and\n\n526\n00:28:29.720 --> 00:28:32.252\nit runs very, very quickly, so very nice.\n\n527\n00:28:32.252 --> 00:28:35.160\n&gt;&gt; And unless they're changing\nthe standard install,\n\n528\n00:28:35.160 --> 00:28:38.770\nthis is with the socket module from\nthe standard install for Python,\n\n529\n00:28:38.770 --> 00:28:43.680\nwhich is on most Linux distributions, both\nPython 2 and 3, so you get either one.\n\n530\n00:28:43.680 --> 00:28:45.760\nThis all runs in both.\n\n531\n00:28:45.760 --> 00:28:50.680\nLikewise, what's interesting is I do not\nneed elevated privileges in this context,\n\n532\n00:28:50.680 --> 00:28:51.720\nin order to run this.\n\n533\n00:28:51.720 --> 00:28:54.390\n&gt;&gt; That is an interesting\nlittle fact that you\n\n534\n00:28:54.390 --> 00:28:56.750\ndid not mention at the beginning\nof our show, my good man.\n\n535\n00:28:56.750 --> 00:29:00.530\n&gt;&gt; Yeah, so as far as I know,\nunless they really kind of,\n\n536\n00:29:00.530 --> 00:29:02.865\nyou change the permissions and\nwatch for that.\n\n537\n00:29:02.865 --> 00:29:06.180\nI've tried it on a couple\ndifferent machines, and\n\n538\n00:29:06.180 --> 00:29:10.620\nagain these are my user machines, so I'm\nnot like super drilled down on privileges.\n\n539\n00:29:10.620 --> 00:29:12.840\nI do not have to escalate\nprivileges in order to do this,\n\n540\n00:29:12.840 --> 00:29:13.660\n&gt;&gt; Very, very cool.\n\n541\n00:29:13.660 --> 00:29:16.490\nThat's a great thing to know and\nit's a great thing for you out there.\n\n542\n00:29:16.490 --> 00:29:19.924\nYou get a lot of really good information\nwhen it comes to using Python in\n\n543\n00:29:19.924 --> 00:29:24.430\na networking and\nsecurity specific environment.\n\n544\n00:29:24.430 --> 00:29:28.685\nAnd so you can ply your skills to that\narena and build upon them as we go.\n\n545\n00:29:28.685 --> 00:29:31.778\nThat's kind of the purpose of this\nwhole series, is to go yeah I love\n\n546\n00:29:31.778 --> 00:29:35.500\nprogramming and Python, I'm also\nkind of passionate about security.\n\n547\n00:29:35.500 --> 00:29:38.130\nHow can I mend the two together and\n\n548\n00:29:38.130 --> 00:29:40.670\nuse them both in an environment\nthat I wanna be in?\n\n549\n00:29:40.670 --> 00:29:41.730\nSo, very cool stuff.\n\n550\n00:29:41.730 --> 00:29:45.250\nJustin, we do thank you for your time and\neffort on this project, very cool.\n\n551\n00:29:45.250 --> 00:29:47.240\nWe hope you guys thought\nit was awesome as well.\n\n552\n00:29:47.240 --> 00:29:49.010\nWe spend a lot of time\nworking on these shows for\n\n553\n00:29:49.010 --> 00:29:51.520\nyou guys to entertain and educate.\n\n554\n00:29:51.520 --> 00:29:54.090\nThat's why we call ourselves\nedutainers around here.\n\n555\n00:29:54.090 --> 00:29:56.780\nBut looking at the clock,\nwe are out of time for this episode.\n\n556\n00:29:56.780 --> 00:29:58.350\nDefinitely come back for\nmore in this series,\n\n557\n00:29:58.350 --> 00:30:01.510\na lot of cool tools that this man\nright here is going to develop for us.\n\n558\n00:30:01.510 --> 00:30:04.410\nSigning off for DevPro.TV,\nI've been your host, Daniel Lowrie.\n\n559\n00:30:04.410 --> 00:30:05.380\n&gt;&gt; And I'm Justin Dennison.\n\n560\n00:30:05.380 --> 00:30:07.157\n&gt;&gt; And we'll see you next time.\n\n561\n00:30:07.157 --> 00:30:12.660\n[MUSIC]\n\n",
          "vimeoId": "228213312"
        },
        {
          "description": "In this episode, Daniel and Justin create a Python program that will make a socket connection to an open port and then grab banner info for enumeration purposes. They also bundle this banner grabbing feature with the port scanner from the previous episode so that you can scan and banner grab the discovered open ports in one fell swoop.",
          "length": "2021",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-3-1-banner_reading_from_open_ports-080217-PGM.00_35_37_13.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-3-1-banner_reading_from_open_ports-080217-PGM.00_35_37_13.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-3-1-banner_reading_from_open_ports-080217-PGM.00_35_37_13.Still001-sm.jpg",
          "title": "Banner Reading from Open Ports",
          "transcript": "WEBVTT\n\n1\n00:00:00.004 --> 00:00:10.004\n[MUSIC]\n\n2\n00:00:12.945 --> 00:00:17.070\nAll right, greetings everyone and welcome\nback to another great episode of DevProTV.\n\n3\n00:00:17.070 --> 00:00:18.810\nI'm your host Daniel Lowrie.\n\n4\n00:00:18.810 --> 00:00:22.710\nAnd today's episode it's all about\nour Python for Security series.\n\n5\n00:00:22.710 --> 00:00:25.800\nHaving a lot of fun doing that and joining\nus back in the studios to have a good\n\n6\n00:00:25.800 --> 00:00:28.965\ntime with us and actually teach us\na thing or two about a little thing\n\n7\n00:00:28.965 --> 00:00:31.850\nwe like to call Python,\nour good friend, Mr. Justin Dennison.\n\n8\n00:00:31.850 --> 00:00:33.260\nJustin, man, how's it going today?\n\n9\n00:00:33.260 --> 00:00:36.772\n&gt;&gt; It is going fantastic, right, and had a\nlittle trouble getting going this morning.\n\n10\n00:00:36.772 --> 00:00:37.329\n&gt;&gt; That happens.\n\n11\n00:00:37.329 --> 00:00:40.120\n&gt;&gt; But after that the day started\nchugging along, so I'm doing well.\n\n12\n00:00:40.120 --> 00:00:41.150\nHow are you Daniel?\n\n13\n00:00:41.150 --> 00:00:44.650\n&gt;&gt; Man, I'm doing actually really well,\nhad a great day today.\n\n14\n00:00:44.650 --> 00:00:48.530\nWorking on some things for\nupcoming shows but also sitting there\n\n15\n00:00:48.530 --> 00:00:52.320\nbeing pretty excited about today's show\nbecause we're doing Python for Security,\n\n16\n00:00:52.320 --> 00:00:54.700\nand as I've alluded to,\nI like both, right.\n\n17\n00:00:54.700 --> 00:00:57.390\nI like me a little bit of Python,\nI definitely like me a little bit of\n\n18\n00:00:57.390 --> 00:01:01.040\nsecurity, and melding the two together\nis just a match made in heaven.\n\n19\n00:01:01.040 --> 00:01:04.720\nAnd that being said, Justin how\nare you going to enlighten us today?\n\n20\n00:01:04.720 --> 00:01:09.440\nWell I was thinking, now, we saw in\na previous episode how we could start\n\n21\n00:01:09.440 --> 00:01:13.640\nopening socket connections and checking\nto see if we had open ports, right,\n\n22\n00:01:13.640 --> 00:01:16.820\nwe just scanned a bunch of TCP ports and\nwe got a list that were open.\n\n23\n00:01:16.820 --> 00:01:21.600\nAnd I was like, well,\nI know some people change service ports.\n\n24\n00:01:21.600 --> 00:01:23.760\nYou and\nI were talking I think yesterday or\n\n25\n00:01:23.760 --> 00:01:25.930\nthe day before, some point,\nwe were talking.\n\n26\n00:01:25.930 --> 00:01:30.586\nSome people would change their SSH service\nto actually surf or be open on 2222.\n\n27\n00:01:30.586 --> 00:01:31.504\n&gt;&gt; Yeah.\n\n28\n00:01:31.504 --> 00:01:36.110\n&gt;&gt; So it's kinda iffy,\nwe know about all these open ports, but\n\n29\n00:01:36.110 --> 00:01:38.850\nwe don't know what those ports are.\n\n30\n00:01:38.850 --> 00:01:42.642\nSo, I figure the next step in kinda\nsnooping around, so to speak,\n\n31\n00:01:42.642 --> 00:01:45.880\nis can I gather information\nfrom those open ports?\n\n32\n00:01:45.880 --> 00:01:47.560\nJust grab, maybe like the banners,\n\n33\n00:01:47.560 --> 00:01:49.740\nlike the little headers when you log in or\nwhat not.\n\n34\n00:01:49.740 --> 00:01:54.650\nTo see, that's what that is, and if so,\nthat will give us additional information\n\n35\n00:01:54.650 --> 00:01:56.970\nthat then we can continue to\npoke around on systems with.\n\n36\n00:01:56.970 --> 00:02:00.765\n&gt;&gt; This is a very valid thing that\nsecurity professionals do when they're in\n\n37\n00:02:00.765 --> 00:02:03.402\nthe enumeration phase of\ntheir security testing.\n\n38\n00:02:03.402 --> 00:02:06.640\nThey wanna see what services are running\nand where they're running at.\n\n39\n00:02:06.640 --> 00:02:11.990\nSo, being able to do this with\nan unknown entity out there in the wild\n\n40\n00:02:11.990 --> 00:02:16.190\nbecause we've built it from scratch could\nbe beneficial in some shapes and forms.\n\n41\n00:02:16.190 --> 00:02:18.910\nSo, Justin, I'm looking forward to\nseeing how we can make this happen.\n\n42\n00:02:18.910 --> 00:02:21.166\n&gt;&gt; All right, well,\nDaniel I think the first step, well,\n\n43\n00:02:21.166 --> 00:02:23.510\nlet me just give you an outline\nof how this is gonna go.\n\n44\n00:02:23.510 --> 00:02:27.600\nFirst off, I'm wanna show you how to just\nbanner read from a single port, right,\n\n45\n00:02:27.600 --> 00:02:30.980\njust grab some information and\nkinda print it out and that's done.\n\n46\n00:02:30.980 --> 00:02:35.960\nAfter that though, I figure it might\nbe interesting to go back and do it for\n\n47\n00:02:35.960 --> 00:02:40.140\na lot of open ports that we now know are\nopen instead of just trying to do it for\n\n48\n00:02:40.140 --> 00:02:41.230\nthe entire range of ports.\n\n49\n00:02:41.230 --> 00:02:43.860\nSo we do an initial scan,\nwe find all the open ones, and\n\n50\n00:02:43.860 --> 00:02:45.740\nthen we go, what's on those ports?\n\n51\n00:02:45.740 --> 00:02:47.740\nWhat's actually going on?\n\n52\n00:02:47.740 --> 00:02:50.630\nNow, keep in mind this\nis not an exact science.\n\n53\n00:02:50.630 --> 00:02:52.160\nEvery once in a while\nyou get some craziness.\n\n54\n00:02:52.160 --> 00:02:55.260\nLike if you open a CCP\nport on a web server and\n\n55\n00:02:55.260 --> 00:02:57.140\nthen you're not actually\nsending it something back and\n\n56\n00:02:57.140 --> 00:03:00.980\nforth, you may get some weird behavior,\nbut for the most part it should work.\n\n57\n00:03:00.980 --> 00:03:05.550\nSo our first step is build something\nthat will grab from a single port,\n\n58\n00:03:05.550 --> 00:03:08.750\nfind out what the service is, and\nI kinda just print that to the screen.\n\n59\n00:03:08.750 --> 00:03:12.020\nSo let's go ahead and take a look at\nmy screen here and get that started.\n\n60\n00:03:12.020 --> 00:03:13.246\nNow if I look in here,\n\n61\n00:03:13.246 --> 00:03:18.130\nthere's a couple of other things\nthat maybe we haven't seen before.\n\n62\n00:03:18.130 --> 00:03:21.600\nThis dunder, or\ndouble underscore, _pycache_.\n\n63\n00:03:21.600 --> 00:03:24.000\nThis is, it caches some runtime usage,\n\n64\n00:03:24.000 --> 00:03:26.550\nthis is just a Python\nthing that'll happen.\n\n65\n00:03:26.550 --> 00:03:30.680\nAnd then this .pyc,\nthat's compile Python file.\n\n66\n00:03:30.680 --> 00:03:33.900\nDoesn't hurt anything to have them there,\nbut if you need, if you were trying to\n\n67\n00:03:33.900 --> 00:03:36.920\nclean up after yourself,\njust be aware that those will be there.\n\n68\n00:03:36.920 --> 00:03:41.277\nAnd a lot of times I'll go through and\nperiodically delete the pycache, so\n\n69\n00:03:41.277 --> 00:03:44.666\nkinda bust the cache so\nit'll actually do something new,\n\n70\n00:03:44.666 --> 00:03:47.869\nespecially if I'm getting\nweird runtime behaviors.\n\n71\n00:03:47.869 --> 00:03:51.059\nBut we've created a connection,\nwe've scanned for ports, and\n\n72\n00:03:51.059 --> 00:03:54.887\nthis utilities function, just as a\nreminder, has that timefunc in it just for\n\n73\n00:03:54.887 --> 00:03:58.290\ntiming purposes so\nwe can see how long does something take.\n\n74\n00:03:58.290 --> 00:04:01.589\nWhich is handy cuz we found some,\nin a previous episode,\n\n75\n00:04:01.589 --> 00:04:04.630\nwe scanned 65,000 ports\nin under 6 seconds.\n\n76\n00:04:04.630 --> 00:04:06.560\nI was pretty proud of that, right?\n\n77\n00:04:06.560 --> 00:04:09.794\nI'm not saying it's the world record or\nanything.\n\n78\n00:04:09.794 --> 00:04:14.300\n&gt;&gt; [LAUGH]\n&gt;&gt; But I was like, well there you go.\n\n79\n00:04:14.300 --> 00:04:17.770\nI like to think of this as\nlike a banner grabber, right,\n\n80\n00:04:17.770 --> 00:04:21.170\nI'm gonna grab the banner, so\nI'm actually gonna name the file grabber.\n\n81\n00:04:22.520 --> 00:04:26.230\nAnd again,\nI'm going to use a class-based approach\n\n82\n00:04:26.230 --> 00:04:29.420\nbecause it allows me to do kind\nof segment these things up.\n\n83\n00:04:29.420 --> 00:04:34.070\nIt works in my mental model, also it\nkeeps all of that information cached\n\n84\n00:04:34.070 --> 00:04:37.949\ninside the class or the object instance\ninstead of having them as global and\n\n85\n00:04:37.949 --> 00:04:40.400\nI have to pass them around or\ndo crazy things.\n\n86\n00:04:40.400 --> 00:04:43.822\nSo, I'm gonna write a class, and\nwell, let's just call the class,\n\n87\n00:04:43.822 --> 00:04:45.280\nlet's just call it Grabber.\n\n88\n00:04:46.570 --> 00:04:51.178\nAnd this class,\nwhat do I need to know in order to, well,\n\n89\n00:04:51.178 --> 00:04:56.830\nread from a port and grab some\ninformation and kinda print it out.\n\n90\n00:04:56.830 --> 00:05:01.421\nWell, typically,\nI'm gonna have an IP, or a host,\n\n91\n00:05:01.421 --> 00:05:06.640\nan address, and a port, and so\nI'm gonna set those as such.\n\n92\n00:05:06.640 --> 00:05:10.110\nSo here is my IP and my port.\n\n93\n00:05:10.110 --> 00:05:13.927\nNow, IP and port are now internal to\nthe class when I construct the object, or\n\n94\n00:05:13.927 --> 00:05:17.100\nexcuse me, internal to the object\nwhen I construct the object,\n\n95\n00:05:17.100 --> 00:05:19.380\nand I can use it in the other methods.\n\n96\n00:05:19.380 --> 00:05:22.928\nSo, I'm gonna come up here, and\nin order to do TCP stuff, well,\n\n97\n00:05:22.928 --> 00:05:26.216\nI need some information, or\nexcuse me, I need a module, and\n\n98\n00:05:26.216 --> 00:05:29.760\nthat's the socket module\nthat we've seen used before.\n\n99\n00:05:29.760 --> 00:05:36.508\nSo I'm also gonna go ahead and bring in\nthat timefunc, we might need it as well.\n\n100\n00:05:36.508 --> 00:05:39.810\nAll right, so what do I want to do?\n\n101\n00:05:39.810 --> 00:05:44.310\nAfter I initialize an IP and a port,\nand I know these are IPs, so\n\n102\n00:05:44.310 --> 00:05:45.575\nI'm definitely going with that,\n\n103\n00:05:45.575 --> 00:05:50.740\nthere's a variety of ways you could\ndo this, I want a read and a close.\n\n104\n00:05:50.740 --> 00:05:52.980\nAnd ultimately, that's all I need.\n\n105\n00:05:52.980 --> 00:05:57.450\nSo I could do Grabber.grab, but\nI'm gonna say Grabber read, and\n\n106\n00:05:57.450 --> 00:06:03.060\nit's gonna read from a port some\ndefined set of characters, right?\n\n107\n00:06:03.060 --> 00:06:08.980\nSome number of bits, bytes, excuse me,\nbytes, I always mess those up.\n\n108\n00:06:08.980 --> 00:06:09.860\nBits or bytes?\n\n109\n00:06:09.860 --> 00:06:11.060\nWe'll figure it out here shortly.\n\n110\n00:06:11.060 --> 00:06:13.780\nAnd then it's just going\nto return that to me.\n\n111\n00:06:13.780 --> 00:06:18.750\nThe close is gonna make sure that the TCP\nconnection is closed when I'm finished.\n\n112\n00:06:18.750 --> 00:06:26.422\nSo, I need a read, and that read\nis going to take some length here.\n\n113\n00:06:26.422 --> 00:06:31.510\nI'm gonna use 1024 as a default argument,\nbut leave it open to the fact that\n\n114\n00:06:33.020 --> 00:06:39.000\nI can make this happen again, right,\nexcuse me, I can change it at will.\n\n115\n00:06:40.050 --> 00:06:43.520\nSo now here comes\nthe interesting question.\n\n116\n00:06:43.520 --> 00:06:50.640\nIf I have to close and read from a port,\nwhere is the opening occurring?\n\n117\n00:06:51.790 --> 00:06:53.470\nWhere is the connection occurring?\n\n118\n00:06:55.310 --> 00:06:58.380\nWell that's, I assigned the IP and\nthe port, but\n\n119\n00:06:58.380 --> 00:07:00.770\nI actually haven't created the connection.\n\n120\n00:07:00.770 --> 00:07:04.550\nWhen I create the Grabber instance,\nthat would make sense to go ahead and\n\n121\n00:07:04.550 --> 00:07:07.820\nopen a socket connection and\nconnect during that point.\n\n122\n00:07:07.820 --> 00:07:12.273\nSo I'm gonna come back and change my\ndunder init method in order to do so.\n\n123\n00:07:12.273 --> 00:07:17.290\nSo, not only am I going to have self.port,\nmaybe I just want to read that later on.\n\n124\n00:07:17.290 --> 00:07:20.580\nI'm gonna say self.socket,\n\n125\n00:07:20.580 --> 00:07:25.960\nand the socket thing is all over the place\nhere, so there's no way around that.\n\n126\n00:07:25.960 --> 00:07:30.420\nI'm gonna construct a socket and\nwith these default arguments.\n\n127\n00:07:30.420 --> 00:07:34.550\nIf you haven't seen making a socket\nconnection definitely go check that out,\n\n128\n00:07:34.550 --> 00:07:36.716\nthat's kind of assumed\nknowledge in this episode.\n\n129\n00:07:36.716 --> 00:07:44.255\nSo, SOCK_STREAM, and then,\na bunch of capital letters.\n\n130\n00:07:44.255 --> 00:07:47.557\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm gonna say socket.connect.\n\n131\n00:07:47.557 --> 00:07:54.978\nNow, what I'm gonna have to be aware of is\nthe fact that if this connection fails,\n\n132\n00:07:54.978 --> 00:08:00.587\nit throws an exception,\nit times out or something like that.\n\n133\n00:08:00.587 --> 00:08:03.395\nAnd things are gonna go awry, so\n\n134\n00:08:03.395 --> 00:08:09.019\nas I'm using these I have to be\naware of that as I use them, okay?\n\n135\n00:08:09.019 --> 00:08:12.040\nSo, what am I gonna do for read?\n\n136\n00:08:12.040 --> 00:08:15.376\nWell, I'm gonna hop over to the socket\ndocumentation just for a moment.\n\n137\n00:08:15.376 --> 00:08:21.850\nAnd in socket, there is a recv,\nyep, there we go.\n\n138\n00:08:21.850 --> 00:08:24.842\nSo there's our connection and,\nwait for it,\n\n139\n00:08:24.842 --> 00:08:27.847\nI'm trying to get to the actual,\nthere we go.\n\n140\n00:08:27.847 --> 00:08:29.200\nReceive data from socket.\n\n141\n00:08:29.200 --> 00:08:32.986\nReturn value is a bytes object\nrepresenting the data received, okay?\n\n142\n00:08:32.986 --> 00:08:37.310\nThe maximum amount of data to be received\nat once is specified by the buffer size.\n\n143\n00:08:37.310 --> 00:08:43.330\nSo that number is gonna say\nI want this many bytes,\n\n144\n00:08:43.330 --> 00:08:47.200\nyes, bytes, cuz that's actually\ngonna determine the bytes object.\n\n145\n00:08:47.200 --> 00:08:49.120\nSo give me all of this, okay?\n\n146\n00:08:52.141 --> 00:08:55.268\nThe flags, well,\nI'm gonna be honest with you,\n\n147\n00:08:55.268 --> 00:08:59.139\nI haven't really used the flags\na whole lot in my dealings, so\n\n148\n00:08:59.139 --> 00:09:02.720\nI can't speak to why you would\nneed to tweak those per se.\n\n149\n00:09:02.720 --> 00:09:06.258\n&gt;&gt; Just as much a learning experience for\nJustin as it is for us.\n\n150\n00:09:06.258 --> 00:09:09.097\n[LAUGH]\n&gt;&gt; Yeah, just so we're clear,\n\n151\n00:09:09.097 --> 00:09:12.090\nI'm not saying I know everything or\nDaniel knows everything.\n\n152\n00:09:12.090 --> 00:09:14.456\nThat's the entire impetus of this is,\nI need to get a job done,\n\n153\n00:09:14.456 --> 00:09:15.312\nI need to do this work.\n\n154\n00:09:15.312 --> 00:09:20.605\n&gt;&gt; Can we roll this footage of Justin\nsaying I know everything about Python?\n\n155\n00:09:20.605 --> 00:09:22.102\nNo, [LAUGH] it's very damning,\nvery damning.\n\n156\n00:09:22.102 --> 00:09:24.658\n&gt;&gt; [LAUGH] Never happened, never happened.\n\n157\n00:09:24.658 --> 00:09:27.716\nSo now, given this that I\ncan use this receive method,\n\n158\n00:09:27.716 --> 00:09:29.922\nI can use that with these open sockets.\n\n159\n00:09:29.922 --> 00:09:36.904\nAnd essentially I'm writing my own API,\nmy own do not do that again.\n\n160\n00:09:36.904 --> 00:09:39.278\n&gt;&gt; [LAUGH]\n&gt;&gt; I'm writing essentially an interface\n\n161\n00:09:39.278 --> 00:09:40.304\nthat I can use.\n\n162\n00:09:40.304 --> 00:09:43.150\nI'm gonna create a grabber with an IP and\na port, and\n\n163\n00:09:43.150 --> 00:09:46.630\nwhen I say read, it's just gonna\ngive me that first little bit back.\n\n164\n00:09:47.800 --> 00:09:49.770\nSo what is it gonna do?\n\n165\n00:09:49.770 --> 00:09:56.265\nIt's gonna return\nself.socket.recv(length), okay?\n\n166\n00:09:56.265 --> 00:09:59.337\nNow that's a little bit different than,\n\n167\n00:09:59.337 --> 00:10:04.425\nI could just say socket.receive blah,\nblah, blah, blah, blah,\n\n168\n00:10:04.425 --> 00:10:10.254\nexcept now this is gonna read a little\nbit better in my eyes, grabber read.\n\n169\n00:10:10.254 --> 00:10:11.186\nWhat does it do?\n\n170\n00:10:11.186 --> 00:10:12.880\nIt's gonna read the banner,\nthat's all it's gonna do.\n\n171\n00:10:12.880 --> 00:10:17.290\nAnd so I'm doing this in order to\ncache all that information but\n\n172\n00:10:17.290 --> 00:10:20.770\nalso make it a little easier to read and\nreason about.\n\n173\n00:10:20.770 --> 00:10:22.920\nWell, hopefully, so to speak.\n\n174\n00:10:22.920 --> 00:10:28.080\nSo we go back here and, well, what's gonna\ngo, I wanna just close out the socket.\n\n175\n00:10:28.080 --> 00:10:32.980\nThis is just a wrapper, but since the\nsocket is internal to this grabber object,\n\n176\n00:10:32.980 --> 00:10:35.010\nI now have to write a method\nin order to do that.\n\n177\n00:10:35.010 --> 00:10:36.595\nI couldn't do it.\n\n178\n00:10:36.595 --> 00:10:38.900\nNow there's a bunch of\nways to do this in Python.\n\n179\n00:10:38.900 --> 00:10:43.680\nI could do something called a context\nmanager and write special methods but just\n\n180\n00:10:43.680 --> 00:10:47.850\nfor clarity I'm gonna do all this and then\nI'm gonna close the individual grabbers.\n\n181\n00:10:47.850 --> 00:10:53.050\nVery similar that I would to a socket,\nbut they have a specific purpose, so\n\n182\n00:10:53.050 --> 00:10:54.970\nthat's what we're gonna do.\n\n183\n00:10:54.970 --> 00:10:59.100\nSo, if we come down here and\n\n184\n00:10:59.100 --> 00:11:03.030\nlet's just over scroll a little bit.\n\n185\n00:11:03.030 --> 00:11:04.360\nAnd I'm gonna create a main method.\n\n186\n00:11:06.160 --> 00:11:10.467\nAnd just for now I'm gonna pass an if\n\n187\n00:11:10.467 --> 00:11:15.650\n_name_ == '_main_', main().\n\n188\n00:11:15.650 --> 00:11:17.410\nSo I'm gonna create a Grabber instance.\n\n189\n00:11:18.460 --> 00:11:21.360\nI feel like I really wanna say Grabboid,\nlike really-\n\n190\n00:11:21.360 --> 00:11:23.790\n&gt;&gt; [LAUGH] Tremors.\n\n191\n00:11:23.790 --> 00:11:26.490\n&gt;&gt; Yeah, Tremors, I do, it's a good movie.\n\n192\n00:11:26.490 --> 00:11:28.790\n&gt;&gt; If you haven't seen Tremors,\nwe highly recommend it.\n\n193\n00:11:28.790 --> 00:11:29.670\nIt's a lot of fun.\n\n194\n00:11:29.670 --> 00:11:30.600\n&gt;&gt; We do.\nWe do.\n\n195\n00:11:30.600 --> 00:11:32.722\nOne and two.\n\n196\n00:11:32.722 --> 00:11:33.476\n&gt;&gt; One and two.\n\n197\n00:11:33.476 --> 00:11:35.060\n&gt;&gt; After that, it gets.\n\n198\n00:11:35.060 --> 00:11:36.290\n&gt;&gt; Don't get too crazy.\n\n199\n00:11:36.290 --> 00:11:39.981\n&gt;&gt; I still watch them all,\nI'm completely honest about it.\n\n200\n00:11:39.981 --> 00:11:43.500\n&gt;&gt; Once you get your foot in that door,\nyou kinda gotta go through the threshold.\n\n201\n00:11:43.500 --> 00:11:44.440\n&gt;&gt; We'll see how this plays out.\n\n202\n00:11:44.440 --> 00:11:45.560\n&gt;&gt; Yeah, you gotta.\n\n203\n00:11:45.560 --> 00:11:49.690\n&gt;&gt; Likewise, I wanna see how this\nplays out, so let's go ahead and\n\n204\n00:11:49.690 --> 00:11:51.460\nget back in it, Daniel.\n\n205\n00:11:51.460 --> 00:11:52.900\nNice little.\n\n206\n00:11:52.900 --> 00:11:53.890\n&gt;&gt; We saw a squirrel.\n\n207\n00:11:53.890 --> 00:11:55.400\n&gt;&gt; Yeah, ooh, shiny.\n\n208\n00:11:55.400 --> 00:11:58.710\nBut I do wanna remind you that\nI have Metaspoitable kinda\n\n209\n00:12:00.200 --> 00:12:01.710\nrunning in a VM over here.\n\n210\n00:12:01.710 --> 00:12:06.470\nAnd that's the ports that we scan, so\nI know for a fact that Port 22 is open, so\n\n211\n00:12:06.470 --> 00:12:09.780\nI'm just gonna go ahead and say, yeah,\nthis is the IP, this is the port.\n\n212\n00:12:09.780 --> 00:12:12.120\nI wanna see what you get back.\n\n213\n00:12:12.120 --> 00:12:16.758\nNow, fingers crossed, we should\nsee the SSH service that is open.\n\n214\n00:12:16.758 --> 00:12:23.231\nSo, what do I want?\n\n215\n00:12:23.231 --> 00:12:26.440\nI want 10.0.13.231 and port 22.\n\n216\n00:12:26.440 --> 00:12:34.316\nThen I'm just gonna print(grabber.read()),\nlike so.\n\n217\n00:12:34.316 --> 00:12:38.150\nAnd then, grabber.close, just like that.\n\n218\n00:12:38.150 --> 00:12:42.690\nSo, create the grabber,\nread the grabber, close the grabber.\n\n219\n00:12:42.690 --> 00:12:43.610\nOne, two, three.\n\n220\n00:12:43.610 --> 00:12:47.650\nAnd that's ultimately why I write\na class is it just helps me,\n\n221\n00:12:47.650 --> 00:12:51.130\nwhen I write my main code, it helps me\nreason about it a little more cuz I can\n\n222\n00:12:51.130 --> 00:12:52.860\nabstract away some of the handling.\n\n223\n00:12:52.860 --> 00:12:55.710\nNow ultimately, this class is very simple.\n\n224\n00:12:55.710 --> 00:12:57.060\nBut you never know,\n\n225\n00:12:57.060 --> 00:13:01.320\nthings may get a little more\ncomplicated as things progress.\n\n226\n00:13:01.320 --> 00:13:06.728\nSo, well, if I have this grabber class,\n\n227\n00:13:06.728 --> 00:13:13.384\nand I can read,\nI should be able to run this and see.\n\n228\n00:13:13.384 --> 00:13:17.240\nUh-oh, I'm pretty sure,\nlet me check my notes here.\n\n229\n00:13:17.240 --> 00:13:19.618\n&gt;&gt; It says something about meth.\n\n230\n00:13:19.618 --> 00:13:23.112\n[LAUGH]\n&gt;&gt; I'm pretty sure if I got the IP wrong,\n\n231\n00:13:23.112 --> 00:13:26.087\nso let's double check-\n&gt;&gt; Now that's bush league man,\n\n232\n00:13:26.087 --> 00:13:26.660\nbush league.\n\n233\n00:13:26.660 --> 00:13:27.691\n&gt;&gt; I know, I know.\n\n234\n00:13:27.691 --> 00:13:30.873\n&gt;&gt; It's an easy thing to do,\nwe all do it, I can't.\n\n235\n00:13:30.873 --> 00:13:31.707\n&gt;&gt; Turn left.\n\n236\n00:13:31.707 --> 00:13:34.987\n&gt;&gt; There are only human readable ways\nin the, yeah that's right, DNS but.\n\n237\n00:13:34.987 --> 00:13:38.281\n&gt;&gt; [LAUGH]\n&gt;&gt; We're not messing with that.\n\n238\n00:13:38.281 --> 00:13:40.830\nI'm just kicking salt in the [LAUGH].\n\n239\n00:13:40.830 --> 00:13:46.117\n&gt;&gt; So 10.13, I accidentally put an extra.\n\n240\n00:13:46.117 --> 00:13:46.991\n&gt;&gt; An extra something.\n\n241\n00:13:46.991 --> 00:13:48.289\n&gt;&gt; An extra dot in there.\n\n242\n00:13:48.289 --> 00:13:50.566\nNow, if the code works.\n\n243\n00:13:50.566 --> 00:13:51.625\n[LAUGH]\n&gt;&gt; There's no ending dot there,\n\n244\n00:13:51.625 --> 00:13:52.133\nso that was totally my bad.\n\n245\n00:13:52.133 --> 00:13:53.650\n&gt;&gt; Yeah.\n\n246\n00:13:53.650 --> 00:13:55.013\n&gt;&gt; That's not even a valid format.\n\n247\n00:13:55.013 --> 00:13:55.707\n&gt;&gt; No.\n[LAUGH]\n\n248\n00:13:55.707 --> 00:13:57.241\n&gt;&gt; [LAUGH]\n\n249\n00:13:57.241 --> 00:13:57.857\n&gt;&gt; You're like, that's\n\n250\n00:13:57.857 --> 00:13:58.540\nthe end of that sentence.\n\n251\n00:13:58.540 --> 00:14:01.780\n&gt;&gt; [LAUGH]\n&gt;&gt; Here's IP, period.\n\n252\n00:14:01.780 --> 00:14:02.428\n&gt;&gt; Period.\n\n253\n00:14:02.428 --> 00:14:06.860\n[LAUGH]\n&gt;&gt; [LAUGH] So there we go, boom!\n\n254\n00:14:06.860 --> 00:14:12.690\nAnd it prints out\nSSH-2.0-OpenSSH_4.7p1 Debian, boom.\n\n255\n00:14:12.690 --> 00:14:15.740\nNow, what's interesting is, that was fast,\n\n256\n00:14:15.740 --> 00:14:20.244\nI now know a little bit about the service,\nwhat it's running on, and okay.\n\n257\n00:14:21.820 --> 00:14:25.640\nAnd, ultimately, in the grand scheme of\nthings, I would start, are there exploits,\n\n258\n00:14:25.640 --> 00:14:29.300\nare there things that I\ncan use to get around?\n\n259\n00:14:29.300 --> 00:14:30.326\nWe're not gonna do that.\n\n260\n00:14:30.326 --> 00:14:33.191\n&gt;&gt; No, no, this is all about\nenumeration and using Python so\n\n261\n00:14:33.191 --> 00:14:37.620\nthat we can build our own tool to do\nenumeration, banner grabbing specifically.\n\n262\n00:14:37.620 --> 00:14:41.510\nBut, it does beg the question, Justin,\nit would take us a while unless there was\n\n263\n00:14:41.510 --> 00:14:45.050\njust a couple ports, we ran our\nport scanners 2 or 3 ports open.\n\n264\n00:14:45.050 --> 00:14:49.750\nThis is fine, you can do this, just change\nthe port number and go through it, but\n\n265\n00:14:49.750 --> 00:14:53.208\nthat Metasploitable machine\nhas a bunch of open ports, and\n\n266\n00:14:53.208 --> 00:14:57.532\nif I wanted to banner grab them all,\nhow would I do that more efficiently?\n\n267\n00:14:57.532 --> 00:15:01.140\n&gt;&gt; All right, well,\nI think what you're asking is,\n\n268\n00:15:01.140 --> 00:15:05.000\ncan I take my port scanner,\ncombine its power with the grabber.\n\n269\n00:15:05.000 --> 00:15:05.620\n&gt;&gt; You've nailed it.\n\n270\n00:15:05.620 --> 00:15:10.840\n&gt;&gt; And then just grab all of them and\nmaybe just spit them out?\n\n271\n00:15:10.840 --> 00:15:12.150\nWell, just print them out.\n\n272\n00:15:12.150 --> 00:15:15.020\nWe could write them out to the screen or\nwrite them to a file,\n\n273\n00:15:15.020 --> 00:15:16.820\nbut we'll just print them out.\n\n274\n00:15:16.820 --> 00:15:19.870\nAnd to some extent I'm going to,\nwe're not gonna do all 65,000,\n\n275\n00:15:19.870 --> 00:15:21.227\ncuz it might get a little crazy.\n\n276\n00:15:21.227 --> 00:15:22.580\n&gt;&gt; [LAUGH] Just the open ports we know.\n\n277\n00:15:22.580 --> 00:15:25.280\n&gt;&gt; Yeah, so maybe we'll do up to 1,000.\n\n278\n00:15:25.280 --> 00:15:28.280\nBecause we know there's a lot\nof these privileged services and\n\n279\n00:15:28.280 --> 00:15:30.130\nthings like that on\nthe lower number ports.\n\n280\n00:15:30.130 --> 00:15:33.936\nNow, ultimately if someone,\nif I actually did that,\n\n281\n00:15:33.936 --> 00:15:38.097\nif someone changed SSH to be 2222,\nis that four 2's?\n\n282\n00:15:38.097 --> 00:15:41.080\n&gt;&gt; Yeah, 2222.\n&gt;&gt; Yeah, four 2's, then I would miss that.\n\n283\n00:15:41.080 --> 00:15:42.430\nSo just keep that in mind.\n\n284\n00:15:42.430 --> 00:15:47.560\nThis is for demonstrative purposes,\nnot necessarily what I would do for real.\n\n285\n00:15:48.650 --> 00:15:53.720\nSo, well, if we have that, if we look,\nwe've got create connection.\n\n286\n00:15:53.720 --> 00:15:55.094\nThere's our port scanner.\n\n287\n00:15:55.094 --> 00:15:56.712\nSo let's just take a look\nat the port scanner,\n\n288\n00:15:56.712 --> 00:15:58.010\nwe built this in a previous episode.\n\n289\n00:15:58.010 --> 00:16:00.968\nThere's our scanner object, right?\n\n290\n00:16:00.968 --> 00:16:04.772\nSo here's our scan, and that's real nice.\n\n291\n00:16:04.772 --> 00:16:08.679\nAnd again, this is the readable portion,\nscanner.scan from this, and\n\n292\n00:16:08.679 --> 00:16:10.750\nthen I can write it to a file.\n\n293\n00:16:10.750 --> 00:16:15.830\nOr I can just grab the open ports because\nI wrote the scanner object to save\n\n294\n00:16:17.180 --> 00:16:19.670\nthe open ports in this property.\n\n295\n00:16:19.670 --> 00:16:23.240\nSo now we can pull this in, scan, and\n\n296\n00:16:23.240 --> 00:16:27.960\nthen build a bunch of grabber instances,\nand then just read and kind of print out.\n\n297\n00:16:27.960 --> 00:16:32.906\nNow I'm gonna create a lot of objects and\nthen get rid of those particular objects.\n\n298\n00:16:32.906 --> 00:16:37.900\nBut the reason I'm doing that is it might\nbe that if I want to spread this out,\n\n299\n00:16:37.900 --> 00:16:40.710\nmaybe use all the processes on my machine,\n\n300\n00:16:40.710 --> 00:16:44.950\nbecause the grabber object\nhandles one IP port combo.\n\n301\n00:16:44.950 --> 00:16:49.886\nLet's say that time is of the essence,\nand I had all 65,000 ports,\n\n302\n00:16:49.886 --> 00:16:52.444\nand I'm not just doing a banner grab.\n\n303\n00:16:52.444 --> 00:16:56.460\nLet's say I wanna do a banner grab and\ndo something else.\n\n304\n00:16:56.460 --> 00:17:01.050\nThen I can extend that to use\nall the processes on my machine,\n\n305\n00:17:01.050 --> 00:17:02.970\nusing some of the Python tools built in.\n\n306\n00:17:04.110 --> 00:17:05.790\nSo keeping them small and\n\n307\n00:17:05.790 --> 00:17:09.940\nsingly focused helps with that ability\nto scale if you absolutely need it.\n\n308\n00:17:09.940 --> 00:17:13.650\nNow ultimately, I haven't found a lot\nof things that the sequential for\n\n309\n00:17:13.650 --> 00:17:17.530\nloop doesn't work for, but\nyou never know, you never know.\n\n310\n00:17:17.530 --> 00:17:20.860\nSo here's our scanner, so\nI'm gonna come back into grabber.\n\n311\n00:17:22.190 --> 00:17:24.720\nActually, let's create another file.\n\n312\n00:17:24.720 --> 00:17:28.270\nLet's call it grab_and_scan, okay?\n\n313\n00:17:28.270 --> 00:17:31.390\nAnd then build it separately so we can\nimport from both of those files because\n\n314\n00:17:31.390 --> 00:17:32.690\nthose are ultimately separate tools,\n\n315\n00:17:32.690 --> 00:17:35.290\nand I don't wana mix those in those files,\nright?\n\n316\n00:17:35.290 --> 00:17:36.560\n&gt;&gt; Sounds like a convenience store.\n\n317\n00:17:36.560 --> 00:17:38.334\n&gt;&gt; Yeah.\n&gt;&gt; Go to the Grab and Scan,\n\n318\n00:17:38.334 --> 00:17:39.506\nget us a Big Gulp.\n\n319\n00:17:39.506 --> 00:17:40.420\n[LAUGH]\n&gt;&gt; Slushee.\n\n320\n00:17:40.420 --> 00:17:41.010\n&gt;&gt; Yeah.\n\n321\n00:17:41.010 --> 00:17:42.150\n&gt;&gt; I do love blue.\n\n322\n00:17:42.150 --> 00:17:45.371\n&gt;&gt; It is tasty.\n&gt;&gt; Yeah, and also why is blue a flavor?\n\n323\n00:17:45.371 --> 00:17:46.190\n&gt;&gt; I don't know.\n\n324\n00:17:46.190 --> 00:17:48.470\n&gt;&gt; I don't know, I think it's\nsupposed to be raspberry or something\n\n325\n00:17:48.470 --> 00:17:49.580\n&gt;&gt; I'm pretty sure it is.\n\n326\n00:17:49.580 --> 00:17:51.250\nI just say blue.\n\n327\n00:17:51.250 --> 00:17:54.630\nSo we're going to create grab_and_scan.\n\n328\n00:17:54.630 --> 00:17:55.280\nSo there we go.\n\n329\n00:17:55.280 --> 00:17:59.590\nAnd then I'm gonna say from port scanner,\nimport Scanner,\n\n330\n00:18:01.290 --> 00:18:06.550\nand from grabber import Grabber, right?\n\n331\n00:18:06.550 --> 00:18:08.960\nSo now I'm importing\nboth of these classes.\n\n332\n00:18:08.960 --> 00:18:12.612\nAnd while we're at it,\n\n333\n00:18:12.612 --> 00:18:17.183\nfrom utils import timefunc.\n\n334\n00:18:17.183 --> 00:18:20.591\nNow I'm being kind of cavalier\nwith how the importing and\n\n335\n00:18:20.591 --> 00:18:25.025\nresolution of these works because\nsometimes Python's fairly smart.\n\n336\n00:18:25.025 --> 00:18:27.708\nYou imported it over here, I'm gonna\ngo ahead and leave it in the global so\n\n337\n00:18:27.708 --> 00:18:28.980\nit's already accessible.\n\n338\n00:18:28.980 --> 00:18:32.210\nYou shouldn't depend on that,\nbecause if you ever come back and\n\n339\n00:18:32.210 --> 00:18:38.180\ntake out one of these imports, and\nI like to be explicit and let Python\n\n340\n00:18:38.180 --> 00:18:42.680\nhandle any duplication that I have, by\nchance, have in there, so that's just me.\n\n341\n00:18:42.680 --> 00:18:45.940\nSo I'm gonna have timefunc and\nI'm gonna just create a main() method.\n\n342\n00:18:45.940 --> 00:18:48.830\nThis is kinda like my work, right?\n\n343\n00:18:48.830 --> 00:18:53.830\nSo there's no class in here,\nI've built those tools separately and\n\n344\n00:18:53.830 --> 00:18:57.983\nI'm just gonna pass,\nbuild on my nice little part here.\n\n345\n00:18:57.983 --> 00:19:02.142\nTechnically, like I've said before,\nyou don't need this, but if you ever have\n\n346\n00:19:02.142 --> 00:19:06.481\na function, like you wanna have this main\nfunction and use it in another file, well,\n\n347\n00:19:06.481 --> 00:19:09.520\nyou can import it without\nhaving the entire file run.\n\n348\n00:19:09.520 --> 00:19:12.459\nSo I always do this,\ncuz I've been burnt by that\n\n349\n00:19:13.690 --> 00:19:18.755\nit just changed settings because it ran\nthe file and then it's a nightmare.\n\n350\n00:19:18.755 --> 00:19:22.925\nSo let's go ahead and\njust time this main function.\n\n351\n00:19:22.925 --> 00:19:24.980\nSo what do I want?\n\n352\n00:19:24.980 --> 00:19:29.037\nI want for this IP, I'm gonna go ahead and\nget the IP in here.\n\n353\n00:19:29.037 --> 00:19:31.624\nAnd I have to double check that IP and\n\n354\n00:19:31.624 --> 00:19:35.670\nmake sure I don't put\nan extra period at the end.\n\n355\n00:19:35.670 --> 00:19:37.718\nAnd then I don't need a port.\n\n356\n00:19:37.718 --> 00:19:43.080\nActually I'm gonna scan for all the ports,\nso let's create a scanner object.\n\n357\n00:19:45.630 --> 00:19:50.205\nAnd that's going to take the IP, and\nI'm going to say scanner.scan and\n\n358\n00:19:50.205 --> 00:19:55.470\nI wanna scan from 1 to let's say 1001,\nso that will give me the full thousand.\n\n359\n00:19:55.470 --> 00:20:02.827\nSo now that I've scanned there for\nport in scanner.open_ports,\n\n360\n00:20:02.827 --> 00:20:08.891\nI'm gonna create a Grabber that\nis the IP and the port and\n\n361\n00:20:08.891 --> 00:20:16.909\nI'm just gonna print(grabber.read()) and\nthen grabber.close.\n\n362\n00:20:16.909 --> 00:20:22.470\nSo this is like a unification\nof these two tools.\n\n363\n00:20:22.470 --> 00:20:27.090\nAnd because I've written them in the way\nthat I have, even if Daniel wasn't here to\n\n364\n00:20:27.090 --> 00:20:30.090\nwatch this, I feel pretty confident\nthat Daniel could read this and\n\n365\n00:20:30.090 --> 00:20:34.470\ngo, I'm pretty sure it's\nscanning all the ports and\n\n366\n00:20:34.470 --> 00:20:37.370\nit's just grabbing something\noff of those ports.\n\n367\n00:20:37.370 --> 00:20:41.681\nAnd he may not know that I'm looking for\nthat first 1,024 bytes.\n\n368\n00:20:41.681 --> 00:20:45.463\n&gt;&gt; I mean, the fact that it's sitting\nright next to where it says scanner IP,\n\n369\n00:20:45.463 --> 00:20:49.247\nand you're feeding it IP address,\nand then the next is 1 to 1001 might\n\n370\n00:20:49.247 --> 00:20:52.400\ngive me an indication that\nhe's getting 1,000 points.\n\n371\n00:20:52.400 --> 00:20:54.639\n&gt;&gt; Yes, so by writing these classes,\n\n372\n00:20:54.639 --> 00:20:59.655\nthe ultimate goal is I don't have to think\nand kinda retrace my code every time.\n\n373\n00:20:59.655 --> 00:21:02.831\nBecause maybe I'm in a time crunch or\nsomething.\n\n374\n00:21:02.831 --> 00:21:05.390\nI'll just go, that scanner thing,\nit does the scanning for anyone.\n\n375\n00:21:05.390 --> 00:21:07.952\n&gt;&gt; And that's weird to have the 1 to 1001.\n\n376\n00:21:07.952 --> 00:21:11.360\nIt probably would be 1 to 65,356,\nwhatever it is.\n\n377\n00:21:11.360 --> 00:21:16.737\nAnd then I go, that's a port range right\nthere staring me right in the face.\n\n378\n00:21:16.737 --> 00:21:22.269\n&gt;&gt; Yeah, and if I wanted to be\nsuper specific, I could say,\n\n379\n00:21:22.269 --> 00:21:28.743\nport range 1 to 1,000 and\nthen do some crazy stuff like this.\n\n380\n00:21:28.743 --> 00:21:34.136\nYou may not know the syntax,\nbut that is fairly readable,\n\n381\n00:21:34.136 --> 00:21:38.605\nscanner.scan the port range, and boom.\n\n382\n00:21:38.605 --> 00:21:40.963\nSo maybe if we have time,\nwe'll try all 65,000.\n\n383\n00:21:40.963 --> 00:21:43.210\nYou never know, you never know.\n\n384\n00:21:43.210 --> 00:21:46.850\n&gt;&gt; So let's go ahead and give it a whirl,\ncross your fingers, Daniel.\n\n385\n00:21:46.850 --> 00:21:52.090\nI think I got that IP address correct\nthis time, so we're gonna grab and\n\n386\n00:21:52.090 --> 00:21:55.997\nscan, and then boom, all right?\n\n387\n00:21:55.997 --> 00:21:58.650\nSo it's running,\nit's running, it's running.\n\n388\n00:21:58.650 --> 00:22:01.810\nAnd here's where it gets a little iffy.\n\n389\n00:22:02.820 --> 00:22:07.490\nIt doesn't seem to be\nshowing anything else, right?\n\n390\n00:22:07.490 --> 00:22:11.235\n&gt;&gt; Yeah,\nI think I know what's going on here.\n\n391\n00:22:11.235 --> 00:22:12.224\n&gt;&gt; Well, Daniel.\n\n392\n00:22:12.224 --> 00:22:13.980\n&gt;&gt; Yeah, [CROSSTALK]\n&gt;&gt; By all means, so take it away, sir.\n\n393\n00:22:13.980 --> 00:22:16.663\n&gt;&gt; Yeah, it looks like what's happening\nis this is an interactive shell that he's\n\n394\n00:22:16.663 --> 00:22:17.420\nmade a connection to.\n\n395\n00:22:18.530 --> 00:22:21.110\nIt's given him some data and\nnow it's waiting.\n\n396\n00:22:21.110 --> 00:22:22.425\nThe connection did not close.\n\n397\n00:22:22.425 --> 00:22:24.370\nIt's saying you're in, do something.\n\n398\n00:22:24.370 --> 00:22:25.120\nI'm waiting for you.\n\n399\n00:22:25.120 --> 00:22:28.520\nAnd our program's like well,\nI'm waiting for you.\n\n400\n00:22:28.520 --> 00:22:31.390\nAnd now we have this infinite\nwait until we actually Ctrl+C or\n\n401\n00:22:31.390 --> 00:22:32.559\ndo something to kill it.\n\n402\n00:22:32.559 --> 00:22:39.470\n&gt;&gt; Yeah, so let's try Ctrl+C,\nsee what happens.\n\n403\n00:22:39.470 --> 00:22:41.867\nIt's waiting to receive something back.\n\n404\n00:22:41.867 --> 00:22:44.841\nSo I think a good solution,\nif I'm just grabbing banners,\n\n405\n00:22:44.841 --> 00:22:47.118\nI just wanna set like a time out or\nsomething.\n\n406\n00:22:47.118 --> 00:22:48.650\nI get a fairly short time out.\n\n407\n00:22:48.650 --> 00:22:51.920\nGive it to me, if there is nothing there,\nI want you to just keep going.\n\n408\n00:22:51.920 --> 00:22:52.820\n&gt;&gt; Right.\n&gt;&gt; All right, so\n\n409\n00:22:52.820 --> 00:22:56.420\nlet's go over here to the socket library\nbecause that's ultimately how I'm\n\n410\n00:22:56.420 --> 00:23:00.160\nmaking those connections,\nand look for timeout.\n\n411\n00:23:01.310 --> 00:23:03.360\n&gt;&gt; So set time out.\n\n412\n00:23:03.360 --> 00:23:10.604\nActually, I'm looking for set time out,\nset time out, and there we go.\n\n413\n00:23:10.604 --> 00:23:12.490\nSo I can say set time out.\n\n414\n00:23:12.490 --> 00:23:17.116\nNow the reason why I'm coming to the\ndocumentation is set a time out value on\n\n415\n00:23:17.116 --> 00:23:19.032\na blocking socket operation.\n\n416\n00:23:19.032 --> 00:23:24.620\nWe do have a blocking one\ncuz it's waiting, boom.\n\n417\n00:23:24.620 --> 00:23:27.368\nThe value argument can be\na non-negative floating point or none.\n\n418\n00:23:27.368 --> 00:23:32.000\nIf a non-zero value is given, subsequent\nsockets will raise a timeout exception\n\n419\n00:23:32.000 --> 00:23:35.070\nif the timeout period value has elapsed.\n\n420\n00:23:35.070 --> 00:23:38.270\nIf zero is given,\nthe socket is put in non-blocking mode.\n\n421\n00:23:38.270 --> 00:23:40.910\nIf none is given,\nthe socket is put in blocking mode.\n\n422\n00:23:40.910 --> 00:23:44.010\nOkay, so by default, it seems like none\n\n423\n00:23:44.010 --> 00:23:47.870\nis the default argument cuz it just\nwaits until you get something back.\n\n424\n00:23:47.870 --> 00:23:52.107\nIf I can come back over here and\ncome into my grabber, well, maybe,\n\n425\n00:23:53.984 --> 00:23:57.885\nLike so, then, you know what?\n\n426\n00:23:57.885 --> 00:24:02.056\nMaybe I'll say self.socket.settimeout.\n\n427\n00:24:02.056 --> 00:24:06.119\nAnd I'm just gonna hard code a value\nbecause We're testing something.\n\n428\n00:24:06.119 --> 00:24:10.343\nI wanna wait about a second because\notherwise that small amount of data is\n\n429\n00:24:10.343 --> 00:24:15.140\ngonna be transmitted, I will say fairly\nquickly, given Internet connections.\n\n430\n00:24:15.140 --> 00:24:20.710\nNow you may want to make this\ntweakable through the grabber.\n\n431\n00:24:20.710 --> 00:24:24.044\nHowever, there is something\nwe need to keep in mind now,\n\n432\n00:24:24.044 --> 00:24:26.410\nwe're gonna have to do a modification.\n\n433\n00:24:26.410 --> 00:24:30.542\nBecause we have a try, accept and\n\n434\n00:24:30.542 --> 00:24:34.090\nwhen is that going to occur?\n\n435\n00:24:34.090 --> 00:24:35.467\nIf I come to timeout,\n\n436\n00:24:35.467 --> 00:24:40.790\nif the timeout period value has a laugh\nbefore the operation completed.\n\n437\n00:24:40.790 --> 00:24:41.846\nIt's tying out on the receive.\n\n438\n00:24:41.846 --> 00:24:46.406\nSo, I could go dig down but\nall I gonna do is use try and\n\n439\n00:24:46.406 --> 00:24:51.020\naccept and just more or\nless just ignore acception.\n\n440\n00:24:51.020 --> 00:24:54.070\nSo I'm using it time now\njust to skip things.\n\n441\n00:24:54.070 --> 00:24:57.145\nIn real software this may\nnot be the best option.\n\n442\n00:24:57.145 --> 00:24:59.750\n&gt;&gt; [LAUGH]\n&gt;&gt; But for this particular use case,\n\n443\n00:24:59.750 --> 00:25:01.760\nI think it's valid use case.\n\n444\n00:25:01.760 --> 00:25:03.789\nSo, let's call grab and scan.\n\n445\n00:25:03.789 --> 00:25:06.890\nAnd now, we have to say try.\n\n446\n00:25:09.865 --> 00:25:10.780\nBoom.\n\n447\n00:25:10.780 --> 00:25:14.813\nI really need to get better\nwith my macros and stuff,\n\n448\n00:25:14.813 --> 00:25:19.550\nbecause otherwise I could have\ndone that in lickety split.\n\n449\n00:25:19.550 --> 00:25:22.670\nSo we're gonna say Exception: as E.\n\n450\n00:25:22.670 --> 00:25:23.230\nYou know what?\n\n451\n00:25:23.230 --> 00:25:27.300\nI'm just gonna say Exception,\naccept exception because in two and\n\n452\n00:25:27.300 --> 00:25:29.890\nthree it's a little bit\nof different syntax.\n\n453\n00:25:30.940 --> 00:25:34.630\nActually, I think in two seven it\nstill might let me do this, so\n\n454\n00:25:34.630 --> 00:25:36.480\nlet's just try it out.\n\n455\n00:25:36.480 --> 00:25:38.260\nSo I'm going to print E.\n\n456\n00:25:38.260 --> 00:25:40.570\nBut I'm going to do error.\n\n457\n00:25:42.090 --> 00:25:43.460\nError.\n\n458\n00:25:43.460 --> 00:25:47.585\nSo I know that that line is an error and\nnot something.\n\n459\n00:25:47.585 --> 00:25:48.757\nWe're snooping around.\n\n460\n00:25:48.757 --> 00:25:49.610\n&gt;&gt; That you missed.\n\n461\n00:25:49.610 --> 00:25:50.739\nThat's not I'm getting back, right?\n\n462\n00:25:50.739 --> 00:25:53.620\n&gt;&gt; Yeah.\nSo, I would come back and\n\n463\n00:25:53.620 --> 00:25:55.620\nprobably just put a pass statement there.\n\n464\n00:25:55.620 --> 00:26:00.430\nActually, I would more likely go back and\nchange the grabber instance\n\n465\n00:26:00.430 --> 00:26:05.000\nto where when I do read, the try and\naccept is embedded in that.\n\n466\n00:26:05.000 --> 00:26:08.750\nAnd I handle that and\nI return something accordingly.\n\n467\n00:26:08.750 --> 00:26:09.440\nSo we may do that.\n\n468\n00:26:09.440 --> 00:26:13.860\nI just want to do this real quick\nbecause I know this should catch\n\n469\n00:26:13.860 --> 00:26:17.875\nany errors that occur at that instance,\nso here we go.\n\n470\n00:26:17.875 --> 00:26:21.190\nGrab and scan.\n\n471\n00:26:21.190 --> 00:26:24.970\nAnd then, this should timeout.\n\n472\n00:26:24.970 --> 00:26:26.378\nWell, per the documentation.\n\n473\n00:26:26.378 --> 00:26:32.820\nBut, what's happening?\n\n474\n00:26:32.820 --> 00:26:33.420\nHere's the trick.\n\n475\n00:26:33.420 --> 00:26:34.800\nWe're scanning a thousand.\n\n476\n00:26:34.800 --> 00:26:38.260\nWhat if it takes a second\nto do each one of those?\n\n477\n00:26:38.260 --> 00:26:39.939\nLet's say there's,\nbecause there is a bunch of services.\n\n478\n00:26:39.939 --> 00:26:41.200\n&gt;&gt; Yeah.\n\n479\n00:26:41.200 --> 00:26:43.220\nLet's say it takes a second.\n\n480\n00:26:43.220 --> 00:26:47.020\nWell that's gonna be 1,000 seconds\nwhich is roughly 20 minutes.\n\n481\n00:26:47.020 --> 00:26:50.180\n&gt;&gt; That's a lot more time than\nwe have left in this show.\n\n482\n00:26:50.180 --> 00:26:51.830\n&gt;&gt; Yeah, yeah, yeah.\n\n483\n00:26:51.830 --> 00:26:53.180\nSo, but I did want.\n\n484\n00:26:53.180 --> 00:26:56.810\nIf you actually were watching while\nwe were talking, the cursor moved.\n\n485\n00:26:56.810 --> 00:26:57.400\n&gt;&gt; Yeah.\n\n486\n00:26:57.400 --> 00:27:00.990\n&gt;&gt; The cursor moved on the screen,\nso it is timing out.\n\n487\n00:27:00.990 --> 00:27:05.120\nAnd that exception, actually it's weird\nthat exception should catch that but\n\n488\n00:27:05.120 --> 00:27:06.490\nit might be an error.\n\n489\n00:27:06.490 --> 00:27:10.525\nSo the catch or accept exception\nwouldn't necessarily catch that.\n\n490\n00:27:10.525 --> 00:27:15.330\nSo it'll tick down\nthe screen that is progress.\n\n491\n00:27:15.330 --> 00:27:19.040\nSo what I would do is tweak\nthat time out in real scenario,\n\n492\n00:27:19.040 --> 00:27:24.030\nto where, if it doesn't happen within\nthis time frame I wanna speed it up.\n\n493\n00:27:24.030 --> 00:27:27.900\nLikewise, sometimes we're\nnot getting stuff back and\n\n494\n00:27:27.900 --> 00:27:29.920\nthat's because we have this open terminal.\n\n495\n00:27:29.920 --> 00:27:32.540\nI'm pretty sure the first\none it hits is a port 80,\n\n496\n00:27:32.540 --> 00:27:34.360\nwhich has a web server running on it.\n\n497\n00:27:34.360 --> 00:27:37.901\nAnd the web server is waiting for\nan http request.\n\n498\n00:27:37.901 --> 00:27:39.735\nAnd it's always running, so\nit's just hanging there.\n\n499\n00:27:39.735 --> 00:27:42.240\n&gt;&gt; Hm.\n&gt;&gt; Until the timeout occurs.\n\n500\n00:27:42.240 --> 00:27:44.855\nSo it does time out and move down.\n\n501\n00:27:44.855 --> 00:27:47.502\nBut like you said I don't think\nwe have time in the show.\n\n502\n00:27:47.502 --> 00:27:50.746\n&gt;&gt; [LAUGH] Yeah.\n&gt;&gt; But we do have the ability to see,\n\n503\n00:27:50.746 --> 00:27:52.630\nI can scan for ports.\n\n504\n00:27:52.630 --> 00:27:57.490\nI can start doing port reading, but\nyou would have to tweak that timeout value\n\n505\n00:27:57.490 --> 00:28:01.670\nto get an appropriate runtime for your\nuse case, or maybe chunk it up and say,\n\n506\n00:28:01.670 --> 00:28:04.910\nI just wanna know what's on these ports,\nwhat's on these ports.\n\n507\n00:28:04.910 --> 00:28:09.474\nSo it doesn't look like we're\ngonna have time for all 65,000.\n\n508\n00:28:09.474 --> 00:28:11.420\n&gt;&gt; Yeah.\n&gt;&gt; And then do a banner grab from\n\n509\n00:28:11.420 --> 00:28:12.090\neach of those.\n\n510\n00:28:12.090 --> 00:28:13.390\n&gt;&gt; But the proof of concept was there.\n\n511\n00:28:13.390 --> 00:28:16.060\nWe saw it does actually work,\nit's just going to take longer.\n\n512\n00:28:16.060 --> 00:28:18.730\nAnd then we have more time in the show,\nand maybe we'll come back and\n\n513\n00:28:18.730 --> 00:28:23.920\ndo a scan grab 2.0 kind of thing\nwhere it goes a little faster.\n\n514\n00:28:23.920 --> 00:28:24.830\nI know Justin, he's smart,\n\n515\n00:28:24.830 --> 00:28:27.080\nhe could probably make it go a whole lot\nfaster than what is happening right now.\n\n516\n00:28:27.080 --> 00:28:30.940\nBut, this is the quick and\ndirty of how to make this actually work.\n\n517\n00:28:30.940 --> 00:28:36.090\nWhich it does, it's very cool in giving\nyou the idea of the concept behind it so\n\n518\n00:28:36.090 --> 00:28:40.630\nthat you are more foundationally aware,\nand take that into your person,\n\n519\n00:28:40.630 --> 00:28:43.720\nthat information, so\nthat you can use it later down the road.\n\n520\n00:28:43.720 --> 00:28:46.380\n&gt;&gt; Now, Daniel,\nlet me interject here real quick.\n\n521\n00:28:46.380 --> 00:28:50.260\nAs soon as you said that, something popped\nin my mind and I was like, you know what,\n\n522\n00:28:50.260 --> 00:28:52.255\nwe should probably double-check because.\n\n523\n00:28:52.255 --> 00:28:55.800\nThinking about that, I don't think\nit should take quite that long.\n\n524\n00:28:55.800 --> 00:28:57.260\nSo, let me check something.\n\n525\n00:28:57.260 --> 00:28:59.210\nIt may do it, but you never know.\n\n526\n00:28:59.210 --> 00:29:01.150\nWho knows, I might have made a mistake.\n\n527\n00:29:01.150 --> 00:29:01.770\nI'm not infallible.\n\n528\n00:29:01.770 --> 00:29:05.370\n&gt;&gt; Right, because the time anomaly only\ncomes from if it finds an open port, but\n\n529\n00:29:05.370 --> 00:29:07.010\nit doesn't respond to anything correct?\n\n530\n00:29:07.010 --> 00:29:07.740\n&gt;&gt; Right, right.\n\n531\n00:29:07.740 --> 00:29:10.930\nAnd one second, it was still running.\n\n532\n00:29:10.930 --> 00:29:12.091\n&gt;&gt; Yeah, it was taking a while.\n\n533\n00:29:12.091 --> 00:29:13.650\n&gt;&gt; It was taking a while.\n\n534\n00:29:13.650 --> 00:29:17.030\nSo let's see if maybe I made a boo boo.\n\n535\n00:29:17.030 --> 00:29:18.920\nAnd it's very well the case.\n\n536\n00:29:18.920 --> 00:29:20.310\nCould be the case, excuse me.\n\n537\n00:29:20.310 --> 00:29:23.440\nSo let's go ahead and take a look at my\nscreen here, and I'm just gonna hop into\n\n538\n00:29:23.440 --> 00:29:28.980\ngrabber because I was thinking this\ntimeout thing, it should be a second.\n\n539\n00:29:28.980 --> 00:29:29.770\nThat's 1,000 seconds.\n\n540\n00:29:29.770 --> 00:29:31.900\nYeah, that's 20 minutes.\n\n541\n00:29:31.900 --> 00:29:36.690\nBut that's only for ports that block and\ndon't respond to anything.\n\n542\n00:29:36.690 --> 00:29:39.519\nSo the other ports that\nrespond with nothing or\n\n543\n00:29:39.519 --> 00:29:43.000\nactually send back data,\nthose shouldn't be a second,\n\n544\n00:29:43.000 --> 00:29:44.865\nthose should be [SOUND]\n&gt;&gt; Yeah.\n\n545\n00:29:44.865 --> 00:29:45.915\n&gt;&gt; And you know what?\n\n546\n00:29:45.915 --> 00:29:51.022\nLooking at this, I set the timeout on each\nport that is blocking as a 1000 seconds.\n\n547\n00:29:51.022 --> 00:29:51.535\nSo 20 minutes.\n\n548\n00:29:51.535 --> 00:29:52.575\n&gt;&gt; That would be a while.\n\n549\n00:29:52.575 --> 00:29:53.865\n&gt;&gt; Yeah, that can be a problem.\n\n550\n00:29:53.865 --> 00:29:56.826\nSo I think if we change that, [LAUGH].\n\n551\n00:29:56.826 --> 00:29:58.718\n&gt;&gt; [LAUGH].\n&gt;&gt; We might be able to scan those\n\n552\n00:29:58.718 --> 00:29:59.990\n1000 ports.\n\n553\n00:29:59.990 --> 00:30:02.824\nWho knows?\nWe might get that 65,000 a go.\n\n554\n00:30:02.824 --> 00:30:04.245\n&gt;&gt; Yeah, just to see.\n\n555\n00:30:04.245 --> 00:30:06.150\n&gt;&gt; It just depends on what we see.\n\n556\n00:30:06.150 --> 00:30:07.488\n&gt;&gt; Depending on what we see.\n\n557\n00:30:07.488 --> 00:30:11.881\n&gt;&gt; Put a boo boo on it, or a band-aid\n&gt;&gt; So, I want to double check something.\n\n558\n00:30:11.881 --> 00:30:15.524\nThe timeout value can be\na floating point number,\n\n559\n00:30:15.524 --> 00:30:19.985\nso I'm actually going to cut\nthis down to 0.5 just to see.\n\n560\n00:30:19.985 --> 00:30:21.047\n&gt;&gt; Yeah.\n&gt;&gt; If that's the case, or\n\n561\n00:30:21.047 --> 00:30:23.350\nyou know what, 0.3,\nlet's live on the edge a little bit.\n\n562\n00:30:23.350 --> 00:30:28.016\nI think that should still be\nlong enough because this is a VM\n\n563\n00:30:28.016 --> 00:30:31.168\non my machine to get Internet traffic.\n\n564\n00:30:31.168 --> 00:30:35.470\nSo I\"m gonna say 0.3,\nso a third of a second.\n\n565\n00:30:36.540 --> 00:30:41.100\nAnd now if we run grab and scan.\n\n566\n00:30:41.100 --> 00:30:41.770\nHere we go, Daniel.\n\n567\n00:30:41.770 --> 00:30:43.390\nLet's see if I was correct on that.\n\n568\n00:30:43.390 --> 00:30:44.910\nAnd boom, boom, boom, boom.\n\n569\n00:30:44.910 --> 00:30:46.201\nThere we go.\n\n570\n00:30:46.201 --> 00:30:46.853\n&gt;&gt; That was a whole lot faster.\n\n571\n00:30:46.853 --> 00:30:49.200\n&gt;&gt; Whole lot faster, 1.9 seconds.\n\n572\n00:30:49.200 --> 00:30:53.741\n&gt;&gt; For 1000 ports, so\nthat's roughly a minute.\n\n573\n00:30:53.741 --> 00:30:57.370\nI don't know if we quite have that time\nbut we could scan up to maybe 5,000.\n\n574\n00:30:57.370 --> 00:30:59.329\n&gt;&gt; Yeah.\n&gt;&gt; Because there's some possible\n\n575\n00:30:59.329 --> 00:31:00.210\nreassignment.\n\n576\n00:31:00.210 --> 00:31:02.308\nSo let's see if there's any\nother things interesting.\n\n577\n00:31:02.308 --> 00:31:04.034\nNow we have the list of open ports.\n\n578\n00:31:04.034 --> 00:31:06.557\n&gt;&gt; Yeah.\n&gt;&gt; So we can see real quick what we would\n\n579\n00:31:06.557 --> 00:31:08.160\nhave to scan up to.\n\n580\n00:31:08.160 --> 00:31:11.500\nAnd yeah, there's some other services\nup to, let's just go ahead and\n\n581\n00:31:11.500 --> 00:31:16.760\nscan to 6000, because this is the print\nout from a previous episode of open ports.\n\n582\n00:31:16.760 --> 00:31:21.870\nSo let's go grab_and_scan.\n\n583\n00:31:21.870 --> 00:31:26.394\nAnd let's go to 6000.\n\n584\n00:31:27.580 --> 00:31:29.350\nAnd wait for it.\n\n585\n00:31:29.350 --> 00:31:30.170\nBoom.\n\n586\n00:31:30.170 --> 00:31:30.810\nBoom. Boom. Boom.\n\n587\n00:31:30.810 --> 00:31:32.908\nBoom.\nSo we still have some time outs,\n\n588\n00:31:32.908 --> 00:31:35.749\n[SOUND] but\nI have some new services, right?\n\n589\n00:31:35.749 --> 00:31:42.440\nSo we have some blocking services there,\nsome of these, FTPD interesting.\n\n590\n00:31:42.440 --> 00:31:44.830\nI'm not entirely sure what this is.\n\n591\n00:31:44.830 --> 00:31:46.944\nThat might be more your purview.\n\n592\n00:31:46.944 --> 00:31:48.118\n&gt;&gt; [LAUGH] Which one?\n\n593\n00:31:48.118 --> 00:31:48.631\nI can't see.\n\n594\n00:31:48.631 --> 00:31:53.378\n&gt;&gt; This 50.5a3 Ubuntu IO2SHHQ?\n\n595\n00:31:53.378 --> 00:31:55.790\n&gt;&gt; I know exactly what that is.\n\n596\n00:31:55.790 --> 00:31:56.646\n&gt;&gt; What is it?\n&gt;&gt; Yeah,\n\n597\n00:31:56.646 --> 00:32:01.720\nthat's probably like old Rlogin or\nsomething, where you just type in.\n\n598\n00:32:01.720 --> 00:32:03.144\n&gt;&gt; You just logged in.\n\n599\n00:32:03.144 --> 00:32:06.145\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] I also see root@metasploitable\n\n600\n00:32:06.145 --> 00:32:07.610\nin a hashtag up there.\n\n601\n00:32:07.610 --> 00:32:09.940\n&gt;&gt; Yeah, yeah.\n&gt;&gt; That's just logging in.\n\n602\n00:32:09.940 --> 00:32:12.205\nMetasploitable by the way,\nis highly vulnerable.\n\n603\n00:32:12.205 --> 00:32:14.940\n[LAUGH]\n&gt;&gt; That's the entire purpose, right?\n\n604\n00:32:14.940 --> 00:32:15.570\n&gt;&gt; Right.\n&gt;&gt; So,\n\n605\n00:32:15.570 --> 00:32:17.290\nwe're not going to take\nthe easy ways on this.\n\n606\n00:32:17.290 --> 00:32:19.340\nBut, we did get a bunch of printouts and\nwho knows.\n\n607\n00:32:19.340 --> 00:32:22.590\nSomeone who hasn't done security\nupdates or security patch.\n\n608\n00:32:22.590 --> 00:32:24.770\nSomebody hasn't taken these services down.\n\n609\n00:32:26.100 --> 00:32:28.070\nI have a root terminal there.\n\n610\n00:32:28.070 --> 00:32:34.980\nIt's craziness, and that was 3.9 seconds,\naround 4 seconds for 6,000 ports.\n\n611\n00:32:34.980 --> 00:32:39.462\nSo it might take over a minute, but\nI could get a printout for all of these.\n\n612\n00:32:39.462 --> 00:32:42.910\nAnd I would probably remove this error\ntimeout thing that I'm doing now.\n\n613\n00:32:42.910 --> 00:32:44.806\n&gt;&gt; Yeah, it's a little beautification,\n\n614\n00:32:44.806 --> 00:32:48.221\ntell what what port it was that it\nfound some actual banner information.\n\n615\n00:32:48.221 --> 00:32:54.020\n&gt;&gt; Yeah but I have some information\nof services and that's good for me.\n\n616\n00:32:54.020 --> 00:32:56.040\nNot so much for metasploitable.\n\n617\n00:32:56.040 --> 00:32:57.030\n&gt;&gt; No, not so much.\n\n618\n00:32:57.030 --> 00:33:00.640\nThat thing is, it's having a hard time\nright now because we just owned it\n\n619\n00:33:00.640 --> 00:33:03.280\npretty hard with our banner grabber.\n\n620\n00:33:03.280 --> 00:33:04.180\nSo, very cool stuff.\n\n621\n00:33:04.180 --> 00:33:06.150\nJustin, very neat, interesting way.\n\n622\n00:33:06.150 --> 00:33:10.850\nWe've actually been building upon,\nwe used the socket connection right?\n\n623\n00:33:10.850 --> 00:33:13.100\nNow we used our port scanner as well.\n\n624\n00:33:13.100 --> 00:33:17.520\nAll this stuff came into play, continually\nbuilding upon our knowledge base\n\n625\n00:33:17.520 --> 00:33:22.130\nof Python so that we can work more into\nthe security realm, very cool stuff.\n\n626\n00:33:22.130 --> 00:33:24.970\nJustin we thank you for your time and\neffort, we do thank our good audience out\n\n627\n00:33:24.970 --> 00:33:27.360\nthere for watching but\nit looks like we are out of time.\n\n628\n00:33:27.360 --> 00:33:31.120\nFor this episode, signing off for Devpro\nTV, I've been your host Daniel Lowrie.\n\n629\n00:33:31.120 --> 00:33:33.621\n&gt;&gt; And I'm Justin Dennison\n&gt;&gt; We'll see you next time.\n\n630\n00:33:33.621 --> 00:33:37.903\n[MUSIC]\n\n",
          "vimeoId": "228408069"
        },
        {
          "description": "In this episode, Daniel and Justin use the power of Python to build a brute-force program that attacks SSH for the purpose of testing weak passwords. Here they spend the majority of the time programming the SSH connection portion with a little help from Paramiko.",
          "length": "1434",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-4-1-1-brute_forcing_an_ssh_connection-080217-PGM.00_23_44_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-4-1-1-brute_forcing_an_ssh_connection-080217-PGM.00_23_44_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-4-1-1-brute_forcing_an_ssh_connection-080217-PGM.00_23_44_18.Still001-sm.jpg",
          "title": "Brute Forcing an SSH Connection",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.225 --> 00:00:16.890\nAll right, greetings everyone and welcome\nback to another great episode of DevProTV.\n\n3\n00:00:16.890 --> 00:00:18.571\nI'm your host Daniel Lowrie and\n\n4\n00:00:18.571 --> 00:00:23.210\ntoday's episode we're moving on with\nmore in our Python for Security series.\n\n5\n00:00:23.210 --> 00:00:25.710\nAnd joining us in the studio,\nlending his expertise,\n\n6\n00:00:25.710 --> 00:00:28.360\nour resident expert himself,\nMr Justin Dennison.\n\n7\n00:00:28.360 --> 00:00:29.710\nJustin, welcome back sir.\n\n8\n00:00:29.710 --> 00:00:30.810\nSo good to have you back in the studio.\n\n9\n00:00:30.810 --> 00:00:33.440\nHow's it going?\n&gt;&gt; It is going fantastic.\n\n10\n00:00:33.440 --> 00:00:35.160\nI can actually breath out my nose today.\n\n11\n00:00:35.160 --> 00:00:35.718\n&gt;&gt; That's fantastic.\n\n12\n00:00:35.718 --> 00:00:39.230\n&gt;&gt; Yeah, so\nallergies are subdued I like it.\n\n13\n00:00:39.230 --> 00:00:41.935\n&gt;&gt; And then the weather has kinda\nkept the heat down a little bit.\n\n14\n00:00:41.935 --> 00:00:42.831\n&gt;&gt; Yeah, that's been beautiful.\n\n15\n00:00:42.831 --> 00:00:44.100\n&gt;&gt; Yeah, beautiful.\n\n16\n00:00:44.100 --> 00:00:44.651\n&gt;&gt; There's wind.\n\n17\n00:00:44.651 --> 00:00:46.471\nI didn't even know wind existed.\n\n18\n00:00:46.471 --> 00:00:48.593\n&gt;&gt; There's triple digits\nin the northwest but-\n\n19\n00:00:48.593 --> 00:00:51.620\n&gt;&gt; Yeah, more power to it.\n\n20\n00:00:51.620 --> 00:00:54.213\n&gt;&gt; Welcome to our world every\nnine months out of the year.\n\n21\n00:00:54.213 --> 00:00:56.560\n&gt;&gt; Yeah, best of luck, best of luck.\n\n22\n00:00:56.560 --> 00:00:57.284\nBut how are you doing then?\n\n23\n00:00:57.284 --> 00:01:01.068\n&gt;&gt; I'm great, I'm great looking forward\nto kicking off, or, not kicking off, but\n\n24\n00:01:01.068 --> 00:01:04.250\ncontinuing in our Python series here for\nsecurity.\n\n25\n00:01:04.250 --> 00:01:06.106\nWe've done a lot of cool things so far so\n\n26\n00:01:06.106 --> 00:01:08.480\nI'm wondering where you're\ngonna take us next.\n\n27\n00:01:08.480 --> 00:01:11.424\n&gt;&gt; Well, Daniel, I was,\nin our previous couple of episodes,\n\n28\n00:01:11.424 --> 00:01:14.369\nwe did some port scanning, and\nwe did some banner grabbing,\n\n29\n00:01:14.369 --> 00:01:16.706\nand I noticed there was\nan SSH service running.\n\n30\n00:01:16.706 --> 00:01:22.463\nAnd I was like, I wonder if I\ncould get into an SSH connection,\n\n31\n00:01:22.463 --> 00:01:26.002\nprogrammatically, open a connection.\n\n32\n00:01:26.002 --> 00:01:31.080\nAnd then if I do maybe I\ncould do some other thing.\n\n33\n00:01:31.080 --> 00:01:32.400\nMaybe I could place files there.\n\n34\n00:01:32.400 --> 00:01:32.949\nMaybe put a keylogger there.\n\n35\n00:01:32.949 --> 00:01:35.327\nMaybe put a worm there who knows, right?\n\n36\n00:01:35.327 --> 00:01:40.410\nBut there's a couple of things that\nI need to be able to do first.\n\n37\n00:01:40.410 --> 00:01:44.146\nNumber one, I need to be able to make\nan SSH connection using Python to that\n\n38\n00:01:44.146 --> 00:01:45.303\nparticular service.\n\n39\n00:01:45.303 --> 00:01:51.600\nNumber two, now when I say make\na connection, just have the ability to.\n\n40\n00:01:52.810 --> 00:01:55.860\nNumber two, I don't really know\nthe password or anything so\n\n41\n00:01:55.860 --> 00:02:00.985\nwe'd have to figure that out, and\nultimately I've narrowed down the user\n\n42\n00:02:00.985 --> 00:02:03.125\nname, then if the passwords\na little bit iffy.\n\n43\n00:02:03.125 --> 00:02:06.695\nSo maybe we'll just a brute for\nattack if I can do it programmatically.\n\n44\n00:02:06.695 --> 00:02:09.070\nCuz then I can just turn it loose and\njust be like, well,\n\n45\n00:02:09.070 --> 00:02:10.499\nI'll be back when you're done.\n\n46\n00:02:10.499 --> 00:02:12.666\nSo we'll give that a try, but\n\n47\n00:02:12.666 --> 00:02:17.105\nfirst we need to be able to\naccess SSH services using Python.\n\n48\n00:02:18.235 --> 00:02:20.666\nAnd that's what we're doing\nright now at this moment.\n\n49\n00:02:20.666 --> 00:02:23.307\nSo let's give a rundown here.\n\n50\n00:02:23.307 --> 00:02:24.661\nIf we take a look at my screen,\n\n51\n00:02:24.661 --> 00:02:27.491\nlet me give you some idea of how\nI decided to test this, right?\n\n52\n00:02:27.491 --> 00:02:29.136\nWe have our metasploitable box is open.\n\n53\n00:02:29.136 --> 00:02:33.760\nBut I wanted to remove the variability,\nso in order to test my SSH\n\n54\n00:02:33.760 --> 00:02:38.840\nconnection I started up just\na VM with Ubuntu Server in it.\n\n55\n00:02:38.840 --> 00:02:42.800\nHas SSH running, I know the username and\npassword, cuz I gotta figure out how to\n\n56\n00:02:42.800 --> 00:02:48.160\nmake a connection, and have an open\nconnection, and kinda play around with it.\n\n57\n00:02:48.160 --> 00:02:52.564\nSo that is actually opened and\nrunning on this other screen, cool.\n\n58\n00:02:52.564 --> 00:02:58.697\nNow, I have to figure out how in Python\nam I going to make said connection?\n\n59\n00:02:58.697 --> 00:03:04.612\nSo if you go and you look you'll keep\nseeing a couple of libraries coming out,\n\n60\n00:03:04.612 --> 00:03:10.072\nbut the one that really took off to me and\nthis is one of those weird things\n\n61\n00:03:10.072 --> 00:03:15.907\nI try to figure out and easy way to do\nthis without using an external library.\n\n62\n00:03:15.907 --> 00:03:22.500\nCan I take what I know about sockets and\ncan I write my own right off the bat?\n\n63\n00:03:22.500 --> 00:03:27.110\nAnd ultimately ended up being really,\nit was way more complicated.\n\n64\n00:03:27.110 --> 00:03:28.918\nNot saying that it's undoable, but\n\n65\n00:03:28.918 --> 00:03:33.013\nI just don't know if it's practical in the\nsense of either this or other contexts.\n\n66\n00:03:33.013 --> 00:03:36.164\nBecause now you actually have\nto worry about the protocol and\n\n67\n00:03:36.164 --> 00:03:40.139\nall the exchange of your information and\nparsing and things of that nature.\n\n68\n00:03:40.139 --> 00:03:46.310\nSo In an attempt to say, okay, I have\naccess and now I need programmatic access.\n\n69\n00:03:46.310 --> 00:03:50.052\nI have a computer that I have control\nover, whether it be yours or maybe it's\n\n70\n00:03:50.052 --> 00:03:54.740\none that you've already escalated\nprivileges on or something like that.\n\n71\n00:03:54.740 --> 00:03:56.683\nBut now I can install external packages or\n\n72\n00:03:56.683 --> 00:03:59.246\nmaybe I can just bring this\npackage along for the ride.\n\n73\n00:03:59.246 --> 00:04:03.666\nMaybe this is okay, now, I'm trying\nto just have it a single doorway, but\n\n74\n00:04:03.666 --> 00:04:05.435\nI wanna start moving around.\n\n75\n00:04:05.435 --> 00:04:09.872\nThe one that comes up a great\ndeal of time, is Paramiko.\n\n76\n00:04:09.872 --> 00:04:11.565\n&gt;&gt; Paramiko.\n\n77\n00:04:11.565 --> 00:04:15.590\n[LAUGH]\n&gt;&gt; I'm not entirely sure,\n\n78\n00:04:15.590 --> 00:04:16.920\nhow you pronounce it.\n\n79\n00:04:16.920 --> 00:04:19.900\nI like Paramiko,\nwe're gonna go with it, Paramiko.\n\n80\n00:04:19.900 --> 00:04:21.949\nSo there's a couple of different versions.\n\n81\n00:04:21.949 --> 00:04:25.475\nAnd if you come over here,\nthat will actually tell you,\n\n82\n00:04:25.475 --> 00:04:28.790\ninstalling pip install Paramiko, cool.\n\n83\n00:04:28.790 --> 00:04:32.270\nIt actually works on 2.6,\n2.7 anything above 3.3 and\n\n84\n00:04:32.270 --> 00:04:34.248\nPyPy which is a different runtime.\n\n85\n00:04:34.248 --> 00:04:36.332\nUltimately, in our use case,\nthat doesn't matter.\n\n86\n00:04:36.332 --> 00:04:40.530\nBut it tells you about some things.\n\n87\n00:04:40.530 --> 00:04:43.900\nBut really what we care\nabout are the API docs.\n\n88\n00:04:43.900 --> 00:04:47.451\nAnd I'm gonna zoom in\nhere just a little bit.\n\n89\n00:04:47.451 --> 00:04:53.510\nOn the left, we have all of these\nabilities using the Paramiko library.\n\n90\n00:04:53.510 --> 00:04:55.895\nAnd if I'm saying that wrong,\nI'm still gonna say Paramiko.\n\n91\n00:04:55.895 --> 00:04:58.207\n&gt;&gt; [LAUGH]\n&gt;&gt; Cuz that's fun to say Paramiko.\n\n92\n00:04:58.207 --> 00:05:01.001\n&gt;&gt; sounds like a spice or something.\n\n93\n00:05:01.001 --> 00:05:04.201\n&gt;&gt; That's got a lot of peremico\nin it that is delicious.\n\n94\n00:05:04.201 --> 00:05:06.416\n&gt;&gt; [LAUGH]\n&gt;&gt; [LAUGH] So\n\n95\n00:05:06.416 --> 00:05:09.698\non the left we have all of these things.\n\n96\n00:05:09.698 --> 00:05:12.140\nNow in the previous episodes\nI've been writing classes.\n\n97\n00:05:12.140 --> 00:05:14.837\nSo lets take a look at the client and\n\n98\n00:05:14.837 --> 00:05:20.698\nnow instead of zooming in that way I'm\njust gonna make the font size giant.\n\n99\n00:05:20.698 --> 00:05:23.116\nWe have a client, and\nnotice these are classes, so\n\n100\n00:05:23.116 --> 00:05:26.502\nthese have methods just like I've\nbeen writing in previous episodes.\n\n101\n00:05:26.502 --> 00:05:29.410\nSo well,\nthis kind of played out in our favor.\n\n102\n00:05:29.410 --> 00:05:30.250\nThese are not just functions.\n\n103\n00:05:30.250 --> 00:05:36.910\nBut if I scroll down a little bit,\nthere's a paramiko.client.SSHClient.\n\n104\n00:05:36.910 --> 00:05:42.560\nAnd what's interesting is this creates or\nshould\n\n105\n00:05:42.560 --> 00:05:47.160\ncreate an SSH connection,\nassuming a couple of things are met.\n\n106\n00:05:47.160 --> 00:05:51.830\nEither you have the keys if it's key-based\nand not necessarily password-based.\n\n107\n00:05:51.830 --> 00:05:53.655\nIt does support username and password.\n\n108\n00:05:53.655 --> 00:05:58.840\nAnd the real issue here is I couldn't\nbuild this form scratch because when you\n\n109\n00:05:58.840 --> 00:06:04.047\nSSH for the first time and it asks you to\nverify the key, like a null and hosts?\n\n110\n00:06:04.047 --> 00:06:04.627\n&gt;&gt; Yeah.\n\n111\n00:06:04.627 --> 00:06:09.380\n&gt;&gt; So, there's the delay you also\ncan't bind in the standard SSH.\n\n112\n00:06:09.380 --> 00:06:11.753\nI can't say SSH--password.\n\n113\n00:06:11.753 --> 00:06:14.218\nWell, you're not supposed to be able to.\n\n114\n00:06:14.218 --> 00:06:15.839\n&gt;&gt; [LAUGH]\n&gt;&gt; Because, your SSH, and\n\n115\n00:06:15.839 --> 00:06:18.624\nthen is asks you for\nthe password if there's a password entry.\n\n116\n00:06:18.624 --> 00:06:23.044\nThat lag in that change actually\nrequires a little pergomatic\n\n117\n00:06:23.044 --> 00:06:26.130\nfinesse in order to get things running.\n\n118\n00:06:26.130 --> 00:06:30.489\nYou could wrap the standard SSH process,\nbut you still have the same problem of\n\n119\n00:06:30.489 --> 00:06:34.997\nthe SSH and then you have to wait to input\nthe password and then some other things.\n\n120\n00:06:34.997 --> 00:06:38.424\nParameco is taken care of that for\nus, so this is on my machine,\n\n121\n00:06:38.424 --> 00:06:41.335\nwe're gonna see if we can\nget pergomatic access, and\n\n122\n00:06:41.335 --> 00:06:44.590\nthis is something you could\nkinda bring along for the ride.\n\n123\n00:06:44.590 --> 00:06:47.608\nAnd I've snooped around and\nas far as I can tell,\n\n124\n00:06:47.608 --> 00:06:52.500\nthere's no like C dependencies or\nanything like that it's just pure Python.\n\n125\n00:06:52.500 --> 00:06:55.529\nNow you may find out different,\nor it may change in the future.\n\n126\n00:06:55.529 --> 00:06:59.139\nBut that's why I picked this and\nit's fairly full featured.\n\n127\n00:06:59.139 --> 00:07:05.730\nSo, we're going to be using Paramico and\nhow do we get started with Paramico?\n\n128\n00:07:05.730 --> 00:07:07.164\nWe have an SSH server up running.\n\n129\n00:07:07.164 --> 00:07:09.219\nWe know what the username and password is.\n\n130\n00:07:09.219 --> 00:07:11.897\nWell, I hope remember\nwhat the password is.\n\n131\n00:07:11.897 --> 00:07:13.950\n&gt;&gt; [LAUGH]\n&gt;&gt; I think I do.\n\n132\n00:07:13.950 --> 00:07:18.430\nBut now, we need to create an SSH\nconnection which means I need Paramico.\n\n133\n00:07:18.430 --> 00:07:23.690\nSo if I say which Python,\nthat's my local bin Python.\n\n134\n00:07:23.690 --> 00:07:29.280\nIf I say which pip which is the Python and\npackage manager, and\n\n135\n00:07:29.280 --> 00:07:33.920\nwell and that is your local okay so\nif I say pip --version,\n\n136\n00:07:33.920 --> 00:07:37.260\nit's not a one for Python 2.7 okay?\n\n137\n00:07:37.260 --> 00:07:41.892\nSo this is gonna be one of those things\nthat the library is supported for\n\n138\n00:07:41.892 --> 00:07:45.517\n27, 26, and 33 plus, so anything above 33.\n\n139\n00:07:45.517 --> 00:07:49.261\nSo I'm not gonna go and\nrun all of these for both versions.\n\n140\n00:07:49.261 --> 00:07:52.810\nCuz I would have to install it for\nboth versions, and managing both major\n\n141\n00:07:52.810 --> 00:07:56.083\nversions could be a little bit iffy,\nso, this is gonna work on 2.\n\n142\n00:07:56.083 --> 00:07:59.754\nI would rather work on 3,\nbut there's some weirdness,\n\n143\n00:07:59.754 --> 00:08:02.364\nlike I have to Do pip3, and there we go.\n\n144\n00:08:02.364 --> 00:08:07.270\nSo I actually got that,\nwe're gonna do it on 3, not 2.\n\n145\n00:08:07.270 --> 00:08:08.435\nIt'll work on both versions.\n\n146\n00:08:08.435 --> 00:08:10.170\n&gt;&gt; [LAUGH]\n&gt;&gt; Yeah, phew.\n\n147\n00:08:10.170 --> 00:08:12.790\nMan, I'll tell you what, I said I was\ndoing good at the beginning of the show.\n\n148\n00:08:12.790 --> 00:08:13.788\nI'm not entirely sure.\n\n149\n00:08:13.788 --> 00:08:16.640\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, so let's go ahead and\n\n150\n00:08:16.640 --> 00:08:20.200\ncreate a file, just a setup, right?\n\n151\n00:08:20.200 --> 00:08:24.000\nSo touch Create SSH connection.\n\n152\n00:08:25.050 --> 00:08:27.050\nAnd this is a playground.\n\n153\n00:08:27.050 --> 00:08:30.910\nThis is ultimately not our final hooray.\n\n154\n00:08:30.910 --> 00:08:37.054\nBut I am going to say pif\nthree install paramiko.\n\n155\n00:08:37.054 --> 00:08:41.760\nNow then, going through the versions and\nwhich and all of that, the reason I did\n\n156\n00:08:41.760 --> 00:08:45.980\nthat is to show you hey, you might have\nboth versions of python available.\n\n157\n00:08:45.980 --> 00:08:49.060\nI know this is a lot of times on Linux\njust shows you'll have a Python two and\n\n158\n00:08:49.060 --> 00:08:50.860\nPython three both there.\n\n159\n00:08:50.860 --> 00:08:53.770\nYou should just be aware\nwhich one you're using,\n\n160\n00:08:53.770 --> 00:08:56.440\nso that's a good way, dash dash version.\n\n161\n00:08:56.440 --> 00:09:01.730\nAnd if you do python--version, you'll\nalso get the python version, as well.\n\n162\n00:09:01.730 --> 00:09:05.950\nSo I have paramiko installed,\nand now I'm gonna hop into\n\n163\n00:09:05.950 --> 00:09:11.470\nthe create_ssh_connection, and\nI'm going to import paramiko.\n\n164\n00:09:11.470 --> 00:09:15.540\nAnd I'm gonna go ahead and make my\nmain method here, or my main function.\n\n165\n00:09:15.540 --> 00:09:19.580\nAnd then if name equals main.\n\n166\n00:09:19.580 --> 00:09:22.890\nAnd we're going to kind\nof build up because\n\n167\n00:09:22.890 --> 00:09:26.920\nwhen you're using an external library,\nyou need, there's a word called grok.\n\n168\n00:09:26.920 --> 00:09:29.160\nYou need to understand the parts\nyou need to understand.\n\n169\n00:09:29.160 --> 00:09:33.520\nYou need to really go, okay, once I\nmake a connection, how do I do this?\n\n170\n00:09:33.520 --> 00:09:35.060\nWhat are some possible pitfalls?\n\n171\n00:09:36.310 --> 00:09:36.860\nAll right?\n\n172\n00:09:36.860 --> 00:09:40.330\nSo we're gonna make the connection but\nwe're also going to break it so\n\n173\n00:09:40.330 --> 00:09:42.730\nwe can know how to\nhandle when we break it.\n\n174\n00:09:42.730 --> 00:09:46.420\nCuz the ultimate goal is to use this\nto just start hammering away a possible\n\n175\n00:09:46.420 --> 00:09:49.250\npassword combinations for a username.\n\n176\n00:09:49.250 --> 00:09:53.880\nSo if I have this main,\nif I come over here,\n\n177\n00:09:53.880 --> 00:09:56.840\nthere Mico actually says here is a client.\n\n178\n00:09:56.840 --> 00:10:01.420\nThe docs do not tell you that you're\nimporting this from paramiko, so\n\n179\n00:10:01.420 --> 00:10:02.670\nthese are all name spaced.\n\n180\n00:10:02.670 --> 00:10:03.840\nSo we're gonna go through and\n\n181\n00:10:03.840 --> 00:10:07.420\nI'm gonna show you that basic example,\nexplain what's going on.\n\n182\n00:10:07.420 --> 00:10:10.780\nI'm gonna name these a bit differently,\nso I'm gonna say this is the client.\n\n183\n00:10:10.780 --> 00:10:14.240\nThis is actually,\nthis is like me typing ssh.\n\n184\n00:10:14.240 --> 00:10:19.960\nIt's gonna be paramiko.SSH Client,\n\n185\n00:10:19.960 --> 00:10:26.050\nand this is not a SSH key thing.\n\n186\n00:10:26.050 --> 00:10:27.910\nThis is username and password.\n\n187\n00:10:27.910 --> 00:10:33.070\nSo, if we look, this assumes that you\nhave keys on your system and standard\n\n188\n00:10:33.070 --> 00:10:38.260\nroutes and things, or standard filepaths,\nthat will allow you a SSH connection.\n\n189\n00:10:38.260 --> 00:10:39.918\nThat's not true for us.\n\n190\n00:10:39.918 --> 00:10:45.165\nHowever, this client.connect,\nif we go and look if we scroll down,\n\n191\n00:10:45.165 --> 00:10:50.880\nclient.connect takes all of\nthese parameters, postname,\n\n192\n00:10:50.880 --> 00:10:56.990\nport, username, password, yeah, key file.\n\n193\n00:10:56.990 --> 00:10:59.180\nKeep file name, okay?\n\n194\n00:10:59.180 --> 00:11:03.360\nTime out, allow agent, look for\nkeys, compress, sock, none.\n\n195\n00:11:03.360 --> 00:11:05.860\nWhat would we need sock for?\n\n196\n00:11:05.860 --> 00:11:06.780\nWho knows?\n\n197\n00:11:06.780 --> 00:11:10.340\nUnopened sock better sock like\nobject to use for communications.\n\n198\n00:11:10.340 --> 00:11:13.880\nSo you can open it,\nusing an existing sock that you have open.\n\n199\n00:11:13.880 --> 00:11:16.850\nSo there's a lot that you can do,\nwe're gonna keep this fairly simple.\n\n200\n00:11:16.850 --> 00:11:20.720\nWell, this is a lot to go through.\n\n201\n00:11:20.720 --> 00:11:24.540\nBut, having documentation where you can\njust look this up, does help a great deal.\n\n202\n00:11:25.940 --> 00:11:33.000\nSo, I'm going to say client.connect and\nsuper secure password.\n\n203\n00:11:34.536 --> 00:11:36.424\nIt's sulfur.\n\n204\n00:11:36.424 --> 00:11:39.040\nI'm hoping it's sulfur.\n\n205\n00:11:39.040 --> 00:11:43.140\nI'm pretty sure that's what I set it to.\n\n206\n00:11:43.140 --> 00:11:47.620\nSo let's set the IP in this main method,\nand what is my IP?\n\n207\n00:11:47.620 --> 00:11:48.200\nSo 192.168.198.136.\n\n208\n00:11:48.200 --> 00:11:54.770\nOkay, so username is Ubuntu,\n\n209\n00:11:54.770 --> 00:11:59.650\nI'm also teaching by counterexample\na bunch of things you shouldn't do.\n\n210\n00:11:59.650 --> 00:12:06.830\nAnd then password is sulfur like so, okay?\n\n211\n00:12:06.830 --> 00:12:10.177\nSo I'm gonna give it the IP.\n\n212\n00:12:10.177 --> 00:12:17.300\nHost name username=username, so\nI'm being specific about what's going,\n\n213\n00:12:17.300 --> 00:12:21.050\ncuz I have all that list of parameters,\nthey are not necessarily by,\n\n214\n00:12:21.050 --> 00:12:23.860\nyou can do them the position but that\nmeans I have to pass nine other things.\n\n215\n00:12:23.860 --> 00:12:29.960\nSo when you say username=username and\npassword=password.\n\n216\n00:12:29.960 --> 00:12:34.490\nAnd then I just want to\nprint out the client.\n\n217\n00:12:34.490 --> 00:12:38.370\nYou notice this has a very similar\nA P I to the socket, right.\n\n218\n00:12:38.370 --> 00:12:42.600\nThe socket library that we used in\nprevious episodes, so create the socket,\n\n219\n00:12:42.600 --> 00:12:44.370\nand then connect the socket.\n\n220\n00:12:44.370 --> 00:12:48.240\nWell, there we go, create the client,\nconnect the client.\n\n221\n00:12:48.240 --> 00:12:52.530\nI wonder if there's a corollary\nunderneath you think?\n\n222\n00:12:52.530 --> 00:12:53.320\nWho knows?\n\n223\n00:12:53.320 --> 00:12:54.340\nWho knows?\n\n224\n00:12:54.340 --> 00:12:55.470\nIt is a mystery that will never be solved.\n\n225\n00:12:55.470 --> 00:12:59.454\n&gt;&gt; It seems too coincidental for\nmy tastes [LAUGH].\n\n226\n00:12:59.454 --> 00:13:02.630\n&gt;&gt; I agree, I just don't think,\ntotally unrelated.\n\n227\n00:13:02.630 --> 00:13:04.440\nWe're being sarcastic.\n\n228\n00:13:04.440 --> 00:13:05.430\n&gt;&gt; Yes, that's a lie [LAUGH].\n\n229\n00:13:05.430 --> 00:13:06.830\n&gt;&gt; Yes, that's totally a lie.\n\n230\n00:13:06.830 --> 00:13:11.010\n&gt;&gt; So let's go ahead and run this and\nsee What in that client.\n\n231\n00:13:11.010 --> 00:13:13.090\nWhat does it actually print?\n\n232\n00:13:13.090 --> 00:13:14.810\nSo, it's gonna give us\nsome representation.\n\n233\n00:13:14.810 --> 00:13:18.540\nBut ideally, if we get a printout,\nwe've made a connection on port 22.\n\n234\n00:13:18.540 --> 00:13:24.100\nWe can't change the port using the pyramid\ncode, but I'm assuming that it's port 22.\n\n235\n00:13:24.100 --> 00:13:27.150\nANd I'm assuming that because\nI set it up to be on port 22.\n\n236\n00:13:27.150 --> 00:13:28.010\nThat's what it is.\n\n237\n00:13:28.010 --> 00:13:33.515\nBut, I'm going to say Python 3,\nand then create SSH connection.\n\n238\n00:13:33.515 --> 00:13:34.650\nOh-oh.\n\n239\n00:13:34.650 --> 00:13:37.160\nNot found a known host.\n\n240\n00:13:38.530 --> 00:13:43.060\nHold on, we were just talking\nabout that question, right?\n\n241\n00:13:44.520 --> 00:13:47.160\nSo, here's the first gotcha about this.\n\n242\n00:13:48.770 --> 00:13:55.310\nBy default, it will not add to your known\nhost file if it does not already exist.\n\n243\n00:13:55.310 --> 00:13:57.560\nBy default, it says, nope,\nthrow an error, don't allow that.\n\n244\n00:13:57.560 --> 00:13:59.930\n&gt;&gt; Well when you say by default,\n\n245\n00:13:59.930 --> 00:14:02.340\nthat leading me to believe\nthat you can change that.\n\n246\n00:14:02.340 --> 00:14:04.800\n&gt;&gt; Exactly, I can change it.\n\n247\n00:14:04.800 --> 00:14:08.490\nAnd there's this interesting method.\n\n248\n00:14:08.490 --> 00:14:11.500\nSet missing host key policy.\n\n249\n00:14:11.500 --> 00:14:14.980\nSo if I go down here, and\nthen I can give it a policy.\n\n250\n00:14:14.980 --> 00:14:15.770\nOkay?\n\n251\n00:14:15.770 --> 00:14:17.620\nAnd you can do a list of policies.\n\n252\n00:14:17.620 --> 00:14:20.010\nYou can do an auto add policy,\nwhere you just say yeah,\n\n253\n00:14:20.010 --> 00:14:22.100\naccept it, whatever it may be.\n\n254\n00:14:22.100 --> 00:14:26.660\nNow, keep in mind,\nkeep in mind, that means it's\n\n255\n00:14:27.910 --> 00:14:32.480\njust gonna be adding things, every time\nyou use this, to your known host file.\n\n256\n00:14:32.480 --> 00:14:35.150\nSo it's something to be aware of for\nfuture reference.\n\n257\n00:14:36.320 --> 00:14:42.650\nBut, we are gonna set that missing host\nkey policy to the auto add policy.\n\n258\n00:14:42.650 --> 00:14:44.070\nWe could use warning policy.\n\n259\n00:14:44.070 --> 00:14:47.880\nUltimately I don't want to clutter up\nthe output just to get things working.\n\n260\n00:14:47.880 --> 00:14:48.570\nOkay?\n\n261\n00:14:48.570 --> 00:14:52.480\nSo we need to hope back\ninto create connection.\n\n262\n00:14:52.480 --> 00:14:56.110\nAnd then, right before you connect,\nbecause we haven't had that policy in\n\n263\n00:14:56.110 --> 00:14:59.820\nplace, before you connect, otherwise\nit's always gonna error out, right?\n\n264\n00:14:59.820 --> 00:15:01.980\nConfiguration and then connect.\n\n265\n00:15:01.980 --> 00:15:06.250\nSo client, and that is a long method name,\nso I always have to come back and\n\n266\n00:15:06.250 --> 00:15:09.165\nlook at it, set_missing_host.\n\n267\n00:15:09.165 --> 00:15:11.710\nkey_policy.\n\n268\n00:15:11.710 --> 00:15:13.810\nEven though it's long, it is descriptive.\n\n269\n00:15:13.810 --> 00:15:17.700\nThere is no ambiguity\nabout what it's doing.\n\n270\n00:15:17.700 --> 00:15:22.874\n&gt;&gt; You know exactly what that\nthing is up to, don't you?\n\n271\n00:15:22.874 --> 00:15:24.078\n&gt;&gt; Yeah, exactly.\n\n272\n00:15:24.078 --> 00:15:28.890\n&gt;&gt; [LAUGH]\n&gt;&gt; So, it's paramiko.AutoAddPolicy.\n\n273\n00:15:28.890 --> 00:15:33.850\nOkay, now you will see\npeople write code like this.\n\n274\n00:15:33.850 --> 00:15:40.560\nNotice how I'm creating something\ninside of a function column,\n\n275\n00:15:40.560 --> 00:15:44.589\nme, I don't particularly like that.\n\n276\n00:15:44.589 --> 00:15:49.305\nSo what I tend to do is pull that out and\nsay,\n\n277\n00:15:49.305 --> 00:15:54.811\nclient_policy = paramiko.AutoAddPolicy and\n\n278\n00:15:54.811 --> 00:15:59.921\nthen likewise, just passing client Policy,\n\n279\n00:15:59.921 --> 00:16:06.420\nI need to get rid of those\nextra parentheses there.\n\n280\n00:16:06.420 --> 00:16:09.829\nI find that a little more readable just\nbecause I don't have parentheses all\n\n281\n00:16:09.829 --> 00:16:13.130\nover the place cuz ultimately what I\nam doing is creating an object like our\n\n282\n00:16:13.130 --> 00:16:16.753\nscanner object and our grabber objects and\nall those objects we built classes for\n\n283\n00:16:16.753 --> 00:16:17.837\nin previous episodes.\n\n284\n00:16:17.837 --> 00:16:22.766\nAnd that's a configuration object\nthat sets the policy for you to,\n\n285\n00:16:22.766 --> 00:16:25.510\nyeah, just add it my own host file.\n\n286\n00:16:25.510 --> 00:16:28.530\nWe're all good to go so\nthat's got you, number one.\n\n287\n00:16:28.530 --> 00:16:32.740\nLet's see if this plays\nout differently this time.\n\n288\n00:16:33.830 --> 00:16:36.132\nSo create_ssh_connection.\n\n289\n00:16:36.132 --> 00:16:41.800\nAnd SSHClient object has no attribute,\nand you know what I did?\n\n290\n00:16:41.800 --> 00:16:48.250\nI, add an extra letter in there,\nthere we go.\n\n291\n00:16:48.250 --> 00:16:54.150\nSo sorry about that everyone and create\na ssh_connection and boom, there it is.\n\n292\n00:16:54.150 --> 00:16:56.710\nI have a SSHClient object.\n\n293\n00:16:56.710 --> 00:17:01.360\nThat object is created I think\nwhenever I make a connection.\n\n294\n00:17:01.360 --> 00:17:04.460\nSo here's the first question that should\ncome to your mind when you're trying to\n\n295\n00:17:04.460 --> 00:17:09.510\nfigure out these things is my insertion\nthat I just made, is that true?\n\n296\n00:17:09.510 --> 00:17:13.728\nDo I have to this print out if\nI've made a connection only, or\n\n297\n00:17:13.728 --> 00:17:19.214\ndo I always have this print out as long\nas it's done something and errored out?\n\n298\n00:17:19.214 --> 00:17:24.000\nI wanna see what happens\nwhen I give it the wrong IP.\n\n299\n00:17:25.660 --> 00:17:29.850\nOr maybe the wrong password,\nmaybe the wrong username.\n\n300\n00:17:29.850 --> 00:17:32.570\nSo we're gonna make a couple of those\nquick changes just so we can know,\n\n301\n00:17:32.570 --> 00:17:36.540\nhey, what is it gonna do,\nwhat things am I going to expect, and\n\n302\n00:17:36.540 --> 00:17:40.380\nwe can exploit that maybe when we\nactually start to try to brute force.\n\n303\n00:17:40.380 --> 00:17:42.100\nThat's wrong, cool, done.\n\n304\n00:17:42.100 --> 00:17:44.390\nBecause we're going to be\ntrying a lot of passwords.\n\n305\n00:17:44.390 --> 00:17:48.740\nIf we can expedite the fill and\nkind of recover from it,\n\n306\n00:17:48.740 --> 00:17:52.640\nfrom giving the wrong password,\nthat's going to be advantageous to us.\n\n307\n00:17:52.640 --> 00:17:56.170\nSo it answers the question of how this\nworks but it also leads to an advantage\n\n308\n00:17:56.170 --> 00:18:01.320\nlater on as we're building\nour brute force entry point.\n\n309\n00:18:01.320 --> 00:18:06.796\nSo, I'm gonna hop back in here and\nI'm gonna make a couple of those changes.\n\n310\n00:18:06.796 --> 00:18:13.390\nI'm going to make this just\ngonna remove a number.\n\n311\n00:18:13.390 --> 00:18:16.840\nI'm pretty sure we're good\nto go who knows, though.\n\n312\n00:18:16.840 --> 00:18:20.620\nAnd wait for it, wait for\nit, and it's still waiting.\n\n313\n00:18:20.620 --> 00:18:22.150\nIt's waiting, it's waiting.\n\n314\n00:18:22.150 --> 00:18:25.360\n&gt;&gt; So\ndefinitely getting a different experience.\n\n315\n00:18:25.360 --> 00:18:26.850\n&gt;&gt; Yeah.\n&gt;&gt; Something's not working.\n\n316\n00:18:26.850 --> 00:18:27.980\n&gt;&gt; Yeah, exactly.\n\n317\n00:18:29.492 --> 00:18:34.140\nSo, it doesn't really,\nit's not finding anything, right?\n\n318\n00:18:34.140 --> 00:18:36.842\nIt's trying but\nis it ever making a connection.\n\n319\n00:18:36.842 --> 00:18:43.428\nI'm gonna go ahead and kill that and\nlook at that sock.connect.\n\n320\n00:18:43.428 --> 00:18:48.480\nSo oops, but if you look here,\nretry on signal.\n\n321\n00:18:49.780 --> 00:18:54.490\nAnd if I come over here and\ngo, what is retry on signal?\n\n322\n00:18:54.490 --> 00:18:58.440\nI wonder if we can set like a time\nout like we did with our sockets?\n\n323\n00:19:00.630 --> 00:19:03.580\nThere's a time out,\nan optional timeout in seconds for\n\n324\n00:19:03.580 --> 00:19:08.010\nthe TCP connect, so I don't want\nthat if I got the address wrong or\n\n325\n00:19:08.010 --> 00:19:13.250\nthe host name wrong,\nI don't want it just to hang out, right.\n\n326\n00:19:13.250 --> 00:19:15.640\nI actually want it to\ntimeout within some reason.\n\n327\n00:19:15.640 --> 00:19:17.240\nSo, lets set this to five seconds.\n\n328\n00:19:17.240 --> 00:19:18.390\nI think that's reasonable.\n\n329\n00:19:18.390 --> 00:19:22.310\nThis still might take a little\ntime connection and interact and\n\n330\n00:19:22.310 --> 00:19:23.140\nthings like that.\n\n331\n00:19:23.140 --> 00:19:28.778\nSo let's set that to\nfive seconds down here.\n\n332\n00:19:28.778 --> 00:19:31.210\nSo I'm gonna accept my timeout.\n\n333\n00:19:33.760 --> 00:19:38.370\nTimeout equals, and then I'm gonna extract\nthis to a variable just in case I want to\n\n334\n00:19:38.370 --> 00:19:40.218\nuse that in other places.\n\n335\n00:19:40.218 --> 00:19:43.870\nSo timeout = 5 seconds.\n\n336\n00:19:43.870 --> 00:19:51.151\nSo now if we try this again, So we're\nwaiting, we're waiting, we're waiting,\n\n337\n00:19:51.151 --> 00:19:56.690\nwe're waiting, we're waiting, and\nboom, there's our timeout exceptions.\n\n338\n00:19:56.690 --> 00:19:59.790\nBut that means that I can\ncatch that exception and\n\n339\n00:19:59.790 --> 00:20:02.020\nthen handle it appropriately.\n\n340\n00:20:02.020 --> 00:20:06.470\nIt just killed my program here, but if I\nhad tried and accept whenever I'm using\n\n341\n00:20:06.470 --> 00:20:10.340\nthis, then I can recover from it\nappropriately based on time out.\n\n342\n00:20:10.340 --> 00:20:15.970\nAlso lets me know hey, if it times out,\neither the service is down,\n\n343\n00:20:15.970 --> 00:20:19.500\nmaybe I got the wrong IP, maybe that\nport doesn't actually have that, and\n\n344\n00:20:19.500 --> 00:20:22.119\nthen it gives me information that\nI can go and double check against.\n\n345\n00:20:23.350 --> 00:20:30.620\nLet's go and fix that IP but then change\nthe username that we know is not correct.\n\n346\n00:20:31.710 --> 00:20:38.638\nCreate ssh_connection and\nI'm glad I wrote that IP down.\n\n347\n00:20:38.638 --> 00:20:41.880\n&gt;&gt; [LAUGH]\n&gt;&gt; I was like, uh-oh.\n\n348\n00:20:41.880 --> 00:20:46.780\nSo, boom and there it is, okay, works.\n\n349\n00:20:46.780 --> 00:20:48.690\nI wanted to make sure it still works.\n\n350\n00:20:48.690 --> 00:20:52.110\nSo create connection and\nnow I'm gonna change this to ubunt.\n\n351\n00:20:53.140 --> 00:20:59.690\nI forgot the U and\nif I run it and we're back up.\n\n352\n00:20:59.690 --> 00:21:02.560\nLook at that paramiko\n\n353\n00:21:02.560 --> 00:21:05.370\nexception AuthenticationException\nAuthentication fail.\n\n354\n00:21:06.680 --> 00:21:09.790\nOkay, if it throws\nan AuthenticationException\n\n355\n00:21:09.790 --> 00:21:13.280\nwe know that if I try a wrong password,\nit probably should do that, but\n\n356\n00:21:13.280 --> 00:21:18.990\nit also throws an AuthenticationException\nfor a wrong username.\n\n357\n00:21:18.990 --> 00:21:21.380\nNow, I just made an assertion there\nthat I should probably double-check,\n\n358\n00:21:21.380 --> 00:21:24.150\nis it gonna throw the same exception,\nif I give it the wrong password?\n\n359\n00:21:25.700 --> 00:21:28.390\nWell, let's go figure out.\n\n360\n00:21:28.390 --> 00:21:32.450\nBut I can recover from that, cuz it's\nan exception, that's all good, it's good.\n\n361\n00:21:32.450 --> 00:21:36.860\nSo let's go back and make that bump to.\n\n362\n00:21:36.860 --> 00:21:42.010\nAnd let's forget the U, I just like to\nget ready and use I guess, let's see\n\n363\n00:21:42.010 --> 00:21:46.690\nif I get the exception because\nyou gotta type the right Python,\n\n364\n00:21:47.800 --> 00:21:52.010\nthat's important, python 3,\nthat should probably change those aliases.\n\n365\n00:21:52.010 --> 00:21:55.490\nSo boom, one, two, three and boom.\n\n366\n00:21:55.490 --> 00:21:58.940\nIt's pretty fast,\nit's still an authentication exception.\n\n367\n00:21:58.940 --> 00:22:00.580\nSo here's where it gets a little weird.\n\n368\n00:22:00.580 --> 00:22:02.990\nIt's throwing the same exception\nregardless of whether it's user name or\n\n369\n00:22:02.990 --> 00:22:06.410\npassword, but-\n&gt;&gt; It's not differentiating between\n\n370\n00:22:06.410 --> 00:22:10.170\nwhether the person that was wrong\nwas the user name or the password.\n\n371\n00:22:10.170 --> 00:22:12.160\n&gt;&gt; Right, and\nultimately I'm not sure that,\n\n372\n00:22:12.160 --> 00:22:16.240\nif paramiko is even able to\nmake that determination, right?\n\n373\n00:22:16.240 --> 00:22:18.170\nIt might be-\n&gt;&gt; It just knows it tried one thing and\n\n374\n00:22:18.170 --> 00:22:19.100\nthat didn't work.\n\n375\n00:22:19.100 --> 00:22:21.820\n&gt;&gt; Yep, hey,\nsomething about this is wrong.\n\n376\n00:22:21.820 --> 00:22:26.080\nAnd even if it is, for me,\nfrom a web portal login,\n\n377\n00:22:26.080 --> 00:22:30.300\nany of those, you don't wanna say,\nhey you're username's wrong, right?\n\n378\n00:22:30.300 --> 00:22:33.840\nYour given ambiguous statements,\nsomething's wrong,\n\n379\n00:22:33.840 --> 00:22:36.930\nor your username/password\ncombination is incorrect.\n\n380\n00:22:36.930 --> 00:22:39.840\nAnd the ambiguity actually\nkeeps people from going\n\n381\n00:22:39.840 --> 00:22:41.670\nwell I know a valid username now.\n\n382\n00:22:41.670 --> 00:22:43.570\n&gt;&gt; Yeah.\n&gt;&gt; So there's things there,\n\n383\n00:22:43.570 --> 00:22:46.450\nso now we're able to\nmake an ssh_ connection.\n\n384\n00:22:46.450 --> 00:22:49.980\nWe see some of the exceptions\nthat can crop up.\n\n385\n00:22:49.980 --> 00:22:54.800\nWe're ready to start maybe thinking\nabout how am I gonna brute force and\n\n386\n00:22:54.800 --> 00:22:56.270\nhow do I put those together?\n\n387\n00:22:56.270 --> 00:22:59.580\nBut I know that's gonna take a lot of time\nDaniel, so maybe we'll come back in a part\n\n388\n00:22:59.580 --> 00:23:04.430\ntwo and talking about brute forcing and\nthen finally bring these two together.\n\n389\n00:23:04.430 --> 00:23:08.840\n&gt;&gt; Sounds good, Justin we will continue\nthis little train of movement after we\n\n390\n00:23:08.840 --> 00:23:10.045\ntake this short break, right.\n\n391\n00:23:10.045 --> 00:23:11.410\nNow, we're gonna have a lot of fun.\n\n392\n00:23:11.410 --> 00:23:13.700\nCome back,\ndefinitely see how we fixed this,\n\n393\n00:23:13.700 --> 00:23:17.610\nget that ssh connection to work correctly\nno matter what the error is going on.\n\n394\n00:23:17.610 --> 00:23:20.100\nAnd then start throwing\nsome brute forcing at it,\n\n395\n00:23:20.100 --> 00:23:23.870\nsee if we can't break in for\nnefarious purposes.\n\n396\n00:23:23.870 --> 00:23:26.130\nNo, no, no testing, testing purposes only.\n\n397\n00:23:26.130 --> 00:23:26.970\n&gt;&gt; Totally tests.\n\n398\n00:23:26.970 --> 00:23:27.820\n&gt;&gt; All legit!\n\n399\n00:23:27.820 --> 00:23:30.210\nAll legit here at ITProTV, or DEVProTV.\n\n400\n00:23:30.210 --> 00:23:32.830\nSo come back and\nsee what's going down with that.\n\n401\n00:23:32.830 --> 00:23:36.540\nAs for this episode, as Justin has alluded\nto, we're a little bit out of time for\n\n402\n00:23:36.540 --> 00:23:39.550\nus to continue from here, but\nthere will be a part two.\n\n403\n00:23:39.550 --> 00:23:42.338\nThat being said, it's time for\nus to sign off for DevProTV.\n\n404\n00:23:42.338 --> 00:23:43.900\nI've been your host Daniel Lowrie.\n\n405\n00:23:43.900 --> 00:23:44.920\n&gt;&gt; And I'm Justin Dennison.\n\n406\n00:23:44.920 --> 00:23:45.572\n&gt;&gt; And we'll see you next time.\n\n407\n00:23:45.572 --> 00:23:53.900\n[MUSIC]\n\n",
          "vimeoId": "228407744"
        },
        {
          "description": "In this episode, Daniel and Justin continue building their SSH brute-force program. Here they build the brute-force portion of the program, puts it together with the SSH connect program, and then attacks an SSH server to test for weak passwords.",
          "length": "2311",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-4-1-2-brute_forcing_an_ssh_connection_pt2_ending-080217-PGM.00_38_50_19.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-4-1-2-brute_forcing_an_ssh_connection_pt2_ending-080217-PGM.00_38_50_19.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-4-1-2-brute_forcing_an_ssh_connection_pt2_ending-080217-PGM.00_38_50_19.Still001-sm.jpg",
          "title": "Brute Forcing an SSH Connection Part 2",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.528 --> 00:00:14.470\nAll right, greetings everyone and\n\n3\n00:00:14.470 --> 00:00:17.521\nwelcome back to another\nexciting episode of DevPro TV.\n\n4\n00:00:17.521 --> 00:00:21.270\nI'm your host Daniel Lowry and\nin today's episode we are continuing on\n\n5\n00:00:21.270 --> 00:00:24.520\nwith more in our Python for\nSecurity series.\n\n6\n00:00:24.520 --> 00:00:29.520\nWe've been working on a little\nbit of the brutish force, but\n\n7\n00:00:29.520 --> 00:00:33.150\nactually we've been building SSH\nconnection, so that we can do brute force.\n\n8\n00:00:33.150 --> 00:00:37.500\nJoining us back in the studio to help\ncontinue part two into that field,\n\n9\n00:00:37.500 --> 00:00:39.130\nour good friend, Mr. Justin Dennison.\n\n10\n00:00:39.130 --> 00:00:43.000\nJustin, we're glad to have you back,\nyet again Where we going today?\n\n11\n00:00:43.000 --> 00:00:46.210\n&gt;&gt; Well that is a question that\nneeds to be answered right.\n\n12\n00:00:46.210 --> 00:00:49.360\nIn part one we left off at being able\nto make a successful connection.\n\n13\n00:00:49.360 --> 00:00:53.100\nNow we didn't actually do a whole lot\nbecause I'm a big proponent, I tend to\n\n14\n00:00:53.100 --> 00:00:58.470\npick up libraries, Python libraries, and\nonly learn the parts as I need them.\n\n15\n00:00:58.470 --> 00:01:01.280\nAnd typically I feel most people,\n\n16\n00:01:01.280 --> 00:01:03.610\npeople that I have spoken to,\nthat's how they do it.\n\n17\n00:01:03.610 --> 00:01:06.630\nAnd the ultimate goal is get things done.\n\n18\n00:01:06.630 --> 00:01:09.070\nAnd not necessarily try\nto understand everything.\n\n19\n00:01:09.070 --> 00:01:13.650\nSo, we were able to make the connection\nand for the most part, that's what\n\n20\n00:01:13.650 --> 00:01:17.410\nwe need in order to brute, hey, you\nmade a connection, cool, that's awesome.\n\n21\n00:01:17.410 --> 00:01:19.410\nNow, we could do some\nadditional testing and\n\n22\n00:01:19.410 --> 00:01:24.200\nthings of that nature, but our ultimate\ngoal is, create a connection, if you're\n\n23\n00:01:24.200 --> 00:01:28.100\nsuccessful there's not an authentication\nerror, boom, there's our password.\n\n24\n00:01:28.100 --> 00:01:30.830\nAnd then I have a username and\npassword, and then if I wanted to,\n\n25\n00:01:30.830 --> 00:01:33.910\nI could either continue on with what\nI was doing or I could then SSH,\n\n26\n00:01:33.910 --> 00:01:38.480\nand see what kind of privileges I had and\nthings of that nature.\n\n27\n00:01:38.480 --> 00:01:40.880\nBut, I do wanna take a moment and\n\n28\n00:01:40.880 --> 00:01:45.840\nbuild a very simplistic semi-contrived,\nbrute force.\n\n29\n00:01:47.100 --> 00:01:51.590\nClass that actually brute forces\nthings just so we can see,\n\n30\n00:01:51.590 --> 00:01:53.680\nokay this is how this works.\n\n31\n00:01:53.680 --> 00:02:00.780\nAnd then all we're gonna do is slide in\nthat SSH stuff that we learned Peramico.\n\n32\n00:02:00.780 --> 00:02:04.050\nOkay, now instead of just\ndoing this comparison\n\n33\n00:02:04.050 --> 00:02:07.780\nThe comparison is establishing SSH\nconnection and it was succesful.\n\n34\n00:02:07.780 --> 00:02:12.810\nSo let's go and take a look on my screen\nhere and let's get started on brut force.\n\n35\n00:02:12.810 --> 00:02:17.960\nNow Daniel I'm gonna forewarn you, this is\nvery very simplistic kind of contracted.\n\n36\n00:02:17.960 --> 00:02:20.410\nIt's all about the thought process.\n\n37\n00:02:20.410 --> 00:02:21.490\n&gt;&gt; So your not like Justin?\n\n38\n00:02:21.490 --> 00:02:22.240\n&gt;&gt; That's wrong.\n\n39\n00:02:22.240 --> 00:02:23.320\nThat's a whole bunch of wrong.\n\n40\n00:02:23.320 --> 00:02:24.170\n&gt;&gt; That's garbage.\n\n41\n00:02:24.170 --> 00:02:25.630\n&gt;&gt; Yeah, and he'll do it to you.\n\n42\n00:02:25.630 --> 00:02:26.590\nI've seen him do it.\n\n43\n00:02:26.590 --> 00:02:28.610\nHe done it to me Well, a whole.\n\n44\n00:02:28.610 --> 00:02:29.395\nbunch.\n\n45\n00:02:29.395 --> 00:02:31.090\n[LAUGH]\n&gt;&gt; Calling you out in a heartbeat.\n\n46\n00:02:31.090 --> 00:02:31.960\n&gt;&gt; He's like, nope.\n\n47\n00:02:33.410 --> 00:02:35.980\n&gt;&gt; Now let's go ahead.\n\n48\n00:02:35.980 --> 00:02:37.990\nMaybe, you said brute-ish.\n\n49\n00:02:37.990 --> 00:02:39.860\nMaybe I'll just call this Brutus.\n\n50\n00:02:39.860 --> 00:02:44.190\nI like being whimsical, what can I say?\n\n51\n00:02:44.190 --> 00:02:46.640\nSo let's create a file called Brutus.\n\n52\n00:02:48.530 --> 00:02:51.140\npy, and well, let's think about this.\n\n53\n00:02:51.140 --> 00:02:54.230\nI'm gonna again create a class, and\n\n54\n00:02:54.230 --> 00:02:57.170\nI'm gonna say-\n&gt;&gt; There's already\n\n55\n00:02:57.170 --> 00:02:58.310\na Brutus password there.\n\n56\n00:02:58.310 --> 00:02:59.685\n&gt;&gt; I know there is.\n\n57\n00:02:59.685 --> 00:03:00.830\n&gt;&gt; [LAUGH]\n&gt;&gt; Well,\n\n58\n00:03:00.830 --> 00:03:05.025\nsince he called me out,\nI bet there's not Brutaise.\n\n59\n00:03:05.025 --> 00:03:07.448\n[LAUGH]\n&gt;&gt; Et tu, Brutaise?\n\n60\n00:03:07.448 --> 00:03:08.570\n[LAUGH]\n&gt;&gt; [LAUGH] Brutaise\n\n61\n00:03:08.570 --> 00:03:10.040\n&gt;&gt; All right, we're gonna go with that,\n\n62\n00:03:10.040 --> 00:03:10.770\nbrewtase.\n\n63\n00:03:10.770 --> 00:03:11.430\n&gt;&gt; Yeah, that's awful.\n\n64\n00:03:11.430 --> 00:03:12.520\n&gt;&gt; All right, we'll change that.\n\n65\n00:03:12.520 --> 00:03:14.970\nMy goodness, trademark.\n\n66\n00:03:14.970 --> 00:03:17.580\nYou think you have such great ideas.\n\n67\n00:03:17.580 --> 00:03:18.480\n&gt;&gt; I know.\n&gt;&gt; And you never do.\n\n68\n00:03:18.480 --> 00:03:20.260\n&gt;&gt; I'm gonna name my band Metallica.\n\n69\n00:03:20.260 --> 00:03:21.731\nI don't think that's taken [INAUDIBLE].\n\n70\n00:03:21.731 --> 00:03:22.730\n[LAUGH]\n&gt;&gt; I'm gonna go with AC/DC.\n\n71\n00:03:22.730 --> 00:03:23.670\nI like electronics.\n\n72\n00:03:23.670 --> 00:03:24.830\n&gt;&gt; Yeah, it's cool stuff.\n\n73\n00:03:24.830 --> 00:03:31.690\n&gt;&gt; So yeah, anyway, we have brutaz or\nbrutiz or whatever it may be.\n\n74\n00:03:31.690 --> 00:03:35.380\n&gt;&gt; Yeah maybe that was a little bit of fun\nthere you know maybe we should actually\n\n75\n00:03:35.380 --> 00:03:40.710\nbuild this Brutus or brutes.\n\n76\n00:03:40.710 --> 00:03:45.740\nThe thing about brute force password\nhacking or password cracking or\n\n77\n00:03:45.740 --> 00:03:48.770\nI'm just testing a bunch of things\nif I'm brute forcing anything.\n\n78\n00:03:48.770 --> 00:03:51.380\nThe ultimate goal whether it\nbe passwords or whatever.\n\n79\n00:03:51.380 --> 00:03:55.330\nI'm trying every possible combination of\nthat I can from the given information.\n\n80\n00:03:55.330 --> 00:04:00.180\n&gt;&gt; I will assume that's the big meat\nof the actual programming, right?\n\n81\n00:04:00.180 --> 00:04:02.970\nThat's coming at it programmatically\nsaying I need you to do this and\n\n82\n00:04:02.970 --> 00:04:04.790\nthen this and then this and\n\n83\n00:04:04.790 --> 00:04:08.200\nthis and when you're done with that I want\nyou to do that again but add this And\n\n84\n00:04:08.200 --> 00:04:11.930\nso on and so forth and that repetition\nis where it gets difficult.\n\n85\n00:04:11.930 --> 00:04:15.460\n&gt;&gt; And it does and\nif we were to build that logic ourselves\n\n86\n00:04:15.460 --> 00:04:19.920\nthis would be a lot more complicated but\nknowing the Python standard library\n\n87\n00:04:19.920 --> 00:04:23.260\nmight show you a little trick that\nyou're probably gonna be upset about.\n\n88\n00:04:23.260 --> 00:04:25.710\n&gt;&gt; [LAUGH]\n&gt;&gt; But that's all right.\n\n89\n00:04:25.710 --> 00:04:27.950\nSo what do we need to know?\n\n90\n00:04:27.950 --> 00:04:30.830\nConcerning passwords we ned\nto know character sets and\n\n91\n00:04:30.830 --> 00:04:32.370\nthe length of the password.\n\n92\n00:04:32.370 --> 00:04:40.630\nWe could say, I know it's at least 8 and\nmaybe up to 12, I have a range.\n\n93\n00:04:40.630 --> 00:04:46.190\nI'm just gonna forewarn you,\ndon't brute force something of that size.\n\n94\n00:04:46.190 --> 00:04:48.060\nI think 12, I was looking it up.\n\n95\n00:04:48.060 --> 00:04:53.360\nAnd it's somewhere around lot\nlonger than you have to wait.\n\n96\n00:04:53.360 --> 00:04:56.860\nI think it's 40 days or something\nlike that of constant running, and\n\n97\n00:04:56.860 --> 00:04:58.520\nthat's a million operations a second.\n\n98\n00:04:58.520 --> 00:04:59.950\nI could be completely wrong about that.\n\n99\n00:05:01.600 --> 00:05:02.509\nI didn't memorize the numbers.\n\n100\n00:05:02.509 --> 00:05:05.180\n&gt;&gt; [LAUGH]\n&gt;&gt; I just saw we didn't have that kind of\n\n101\n00:05:05.180 --> 00:05:05.860\ntime on the show.\n\n102\n00:05:05.860 --> 00:05:07.300\n&gt;&gt; No.\n&gt;&gt; So I was like, all right,\n\n103\n00:05:07.300 --> 00:05:08.680\nlet's not worry about it.\n\n104\n00:05:08.680 --> 00:05:09.880\nAnd actually-\n&gt;&gt; So we're going for\n\n105\n00:05:09.880 --> 00:05:12.470\nproof of a concept here, not-\n&gt;&gt; Proof of concept.\n\n106\n00:05:12.470 --> 00:05:15.060\n&gt;&gt; Yeah.\n&gt;&gt; So actually I wrote something earlier\n\n107\n00:05:15.060 --> 00:05:19.870\ntoday and\nI wanted to see how long does it take for\n\n108\n00:05:19.870 --> 00:05:23.050\nsix, like a word that is six letters.\n\n109\n00:05:23.050 --> 00:05:23.670\nOkay?\n\n110\n00:05:23.670 --> 00:05:27.230\nSo I ran one and I actually got that\ndown in another terminal window.\n\n111\n00:05:27.230 --> 00:05:28.260\nAnd.\n\n112\n00:05:28.260 --> 00:05:28.810\nMan.\n\n113\n00:05:28.810 --> 00:05:30.230\nI clear it out.\n\n114\n00:05:30.230 --> 00:05:31.270\nI clear it out.\n\n115\n00:05:31.270 --> 00:05:32.020\nSo.\n\n116\n00:05:32.020 --> 00:05:33.410\nWell, I'll tell you this.\n\n117\n00:05:33.410 --> 00:05:35.358\nSix letters of the actual word.\n\n118\n00:05:35.358 --> 00:05:40.560\nIt took 5.100 seconds,\n\n119\n00:05:40.560 --> 00:05:43.860\nwhich is just under- it's\nabout an hour and half.\n\n120\n00:05:45.140 --> 00:05:45.880\n&gt;&gt; It's not too bad.\n\n121\n00:05:45.880 --> 00:05:46.680\n&gt;&gt; It's not too bad.\n\n122\n00:05:46.680 --> 00:05:50.890\nExcept it grows exponentially\nthat was lower case letters only.\n\n123\n00:05:50.890 --> 00:05:55.160\n&gt;&gt; Right.\n&gt;&gt; So, no upper case letters, no numbers,\n\n124\n00:05:55.160 --> 00:05:57.190\nno special characters and\n\n125\n00:05:57.190 --> 00:06:00.130\nultimately that grows exponentially\nwith the password length.\n\n126\n00:06:00.130 --> 00:06:04.420\nSo, if I have a character set of lower\ncase letters only that's 26 characters.\n\n127\n00:06:04.420 --> 00:06:07.660\nAnd if it's four digits long,\nthat's 26 to the fourth power, so\n\n128\n00:06:07.660 --> 00:06:09.000\n26 times 26 times 26 times 26.\n\n129\n00:06:09.000 --> 00:06:10.060\nThat's not bad.\n\n130\n00:06:10.060 --> 00:06:12.810\nI can actually rip through those\nreally fast programmatically.\n\n131\n00:06:14.160 --> 00:06:19.980\nBut if I get up to eight,\nthat's 26 times 26 times 26 times 26.\n\n132\n00:06:19.980 --> 00:06:22.560\nThat's a whole bunch.\n\n133\n00:06:22.560 --> 00:06:28.160\nAnd even if I simplified that as 20 so\nI can do the math in my head.\n\n134\n00:06:28.160 --> 00:06:32.660\nThat's ten to the eighth so\nroughly ten to the eighth.\n\n135\n00:06:32.660 --> 00:06:35.720\nWhat's ten to the,\nit's like a hundred million.\n\n136\n00:06:35.720 --> 00:06:36.750\nOkay?\n\n137\n00:06:36.750 --> 00:06:39.260\nThat's not bad.\n\n138\n00:06:39.260 --> 00:06:44.550\nIf I get up to 12 that's ten to the 12th\n\n139\n00:06:44.550 --> 00:06:48.570\nWhich is, that's 1 trillion.\n\n140\n00:06:48.570 --> 00:06:50.830\nYeah, so 2 trillion possible combinations.\n\n141\n00:06:50.830 --> 00:06:52.550\nThat's lowercase letters only.\n\n142\n00:06:52.550 --> 00:06:54.620\nIt gets really complicated\nif I have uppercase,\n\n143\n00:06:54.620 --> 00:06:59.820\ncuz then it's 52 to the power of 10,\nor to the power of 12.\n\n144\n00:06:59.820 --> 00:07:03.200\nOr if I add special characters,\ndepending on that special character set\n\n145\n00:07:03.200 --> 00:07:07.090\nit may be up to 65, 68,\nsomewhere around in there.\n\n146\n00:07:07.090 --> 00:07:08.230\nTo the power of 12.\n\n147\n00:07:08.230 --> 00:07:12.060\nSo, password length\nactually plays a huge role.\n\n148\n00:07:12.060 --> 00:07:16.670\nSo if you're doing one at a time,\nbrute force is okay up to a certain limit.\n\n149\n00:07:16.670 --> 00:07:18.280\nDefinitely not something\nthat you wanna go,\n\n150\n00:07:18.280 --> 00:07:20.670\nI know the password is at\nleast 26 characters long.\n\n151\n00:07:21.820 --> 00:07:24.370\nYeah, you should probably\nnot use brute force,\n\n152\n00:07:24.370 --> 00:07:27.070\ncuz that's gonna take 26 to the 26 power.\n\n153\n00:07:27.070 --> 00:07:28.400\nPut it in perspective.\n\n154\n00:07:28.400 --> 00:07:33.900\nI think one trillion seconds equates to,\nno.\n\n155\n00:07:33.900 --> 00:07:38.050\nSo one million seconds is like 33 days.\n\n156\n00:07:38.050 --> 00:07:40.190\nOne billion seconds is like 33 years.\n\n157\n00:07:40.190 --> 00:07:42.449\nAnd one trillion seconds\nis like 33,000 years.\n\n158\n00:07:43.960 --> 00:07:45.660\nSo-\n&gt;&gt; That's a long time [LAUGH].\n\n159\n00:07:45.660 --> 00:07:49.252\n&gt;&gt; Our minds don't have\na good scale concept there.\n\n160\n00:07:49.252 --> 00:07:52.859\nAnd I may be off on those\nconcrete numbers, but that scale,\n\n161\n00:07:52.859 --> 00:07:55.688\nhow that scale ultimately\nplays out that way.\n\n162\n00:07:55.688 --> 00:07:59.373\nSo, I say all that to say this\nIf you know a password is so\n\n163\n00:07:59.373 --> 00:08:05.190\nmany letters long or below,\nbrute force might be an effective method.\n\n164\n00:08:05.190 --> 00:08:10.690\nWell, I know for a fact that\nthe password I'm trying to crack,\n\n165\n00:08:10.690 --> 00:08:13.590\nyou know I was looking around,\nI was doing some snooping and\n\n166\n00:08:13.590 --> 00:08:19.740\nit said password can be no more, and we're\nfaking this, no more than four characters.\n\n167\n00:08:19.740 --> 00:08:20.940\nBy the way, don't actually do that.\n\n168\n00:08:20.940 --> 00:08:23.218\nIf your password's four characters,\nstop watching right now, go change it.\n\n169\n00:08:23.218 --> 00:08:28.068\n&gt;&gt; [LAUGH]\n&gt;&gt; But if I know some information,\n\n170\n00:08:28.068 --> 00:08:31.930\nthen that informs my\ndecision to use brute force.\n\n171\n00:08:31.930 --> 00:08:35.540\nSo, that was a lot of talking to say,\nI need to know the character set and\n\n172\n00:08:35.540 --> 00:08:37.080\nthe length.\n\n173\n00:08:37.080 --> 00:08:42.190\nSo as a result, I'm gonna say it's\na charset and the length of the password.\n\n174\n00:08:42.190 --> 00:08:49.759\nNow, I could have written this to account\nfor the length, and anything below.\n\n175\n00:08:49.759 --> 00:08:52.410\nBut that ultimately adds time, right.\n\n176\n00:08:52.410 --> 00:08:58.319\nSo let's say that eight characters takes,\nI don't know, ten days.\n\n177\n00:08:58.319 --> 00:09:00.940\nI don't think it does,\nbut lets say it does.\n\n178\n00:09:00.940 --> 00:09:03.210\nLet's say seven characters\ntakes three days.\n\n179\n00:09:03.210 --> 00:09:06.270\nWell, seven and\neight characters take 13 days.\n\n180\n00:09:06.270 --> 00:09:10.180\nSo you end up with this summation\nproblem unless you distribute it across\n\n181\n00:09:10.180 --> 00:09:11.090\na bunch of things.\n\n182\n00:09:11.090 --> 00:09:15.140\nSo knowing the length will\ndefinitely help you out with that.\n\n183\n00:09:15.140 --> 00:09:18.360\nSo I know the length in our\nhypothetical situation.\n\n184\n00:09:19.620 --> 00:09:22.120\nOkay, so now that I have that,\n\n185\n00:09:23.350 --> 00:09:28.510\nI'm gonna have this class start\njust spitting out guesses.\n\n186\n00:09:28.510 --> 00:09:30.320\nJust guesses for me.\n\n187\n00:09:30.320 --> 00:09:36.600\nAnd then, by having those guesses, I can\nthen write a method that says, all right.\n\n188\n00:09:36.600 --> 00:09:38.660\nTry these guesses, and\ncheck against this password.\n\n189\n00:09:38.660 --> 00:09:42.090\nTry these guesses, and\ncheck against this password.\n\n190\n00:09:42.090 --> 00:09:44.210\nAnd I'm gonna call these methods.\n\n191\n00:09:44.210 --> 00:09:49.265\nMaybe not most appropriately named,\ncrackit.\n\n192\n00:09:49.265 --> 00:09:51.910\nDon't say self a bunch of times.\n\n193\n00:09:51.910 --> 00:09:54.250\nBecause ultimately this is contrived,\nit's not gonna do this.\n\n194\n00:09:54.250 --> 00:09:56.410\n&gt;&gt; Is slef correct?\n\n195\n00:09:56.410 --> 00:09:59.580\n&gt;&gt; Shame on you, Daniel, for\nmaking me misspell that.\n\n196\n00:09:59.580 --> 00:10:04.300\nAll right, so there's def, and\nthen I'm gonna say guesses, like so.\n\n197\n00:10:04.300 --> 00:10:10.325\nAnd I'm going to use a little\nPython thing here called property.\n\n198\n00:10:10.325 --> 00:10:14.860\nThis is a decorator that allows me to\naccess this, well, like a property.\n\n199\n00:10:14.860 --> 00:10:20.760\nSo I can say brutes.guesses and it'll\njust start generating guesses for me.\n\n200\n00:10:20.760 --> 00:10:23.310\nI don't have to call a method and\nsave that and such.\n\n201\n00:10:23.310 --> 00:10:26.740\nSo it's just a little nicety,\nyou don't have to do that.\n\n202\n00:10:26.740 --> 00:10:31.303\nAnd so what's gonna happen is,\nI'm gonna say for guess in, and\n\n203\n00:10:31.303 --> 00:10:36.120\nthen this is the part where I could\ngo we'll start with the first\n\n204\n00:10:36.120 --> 00:10:40.363\nletter of the chart set and\nthen start adding combination.\n\n205\n00:10:40.363 --> 00:10:41.400\nYou ready for this thing?\n\n206\n00:10:41.400 --> 00:10:42.640\n&gt;&gt; Hit me.\n\n207\n00:10:42.640 --> 00:10:47.802\n&gt;&gt; In the Python standard library, there's\nthis library or module called itertools.\n\n208\n00:10:49.618 --> 00:10:54.603\nIts entire purpose is to provide ways\nof creating iterables, or iterators,\n\n209\n00:10:54.603 --> 00:10:59.200\nof combinations, permutations,\nthings of that nature.\n\n210\n00:10:59.200 --> 00:11:00.892\nAnd as a result.\n\n211\n00:11:00.892 --> 00:11:02.245\n&gt;&gt; This sounds like cheating.\n\n212\n00:11:02.245 --> 00:11:04.832\n[LAUGH]\n&gt;&gt; You know what,\n\n213\n00:11:04.832 --> 00:11:09.370\nit's part of the standard library, so\nin the famous words, I'll allow it.\n\n214\n00:11:09.370 --> 00:11:13.590\nSo what I'm gonna do is, I'm gonna say,\n\n215\n00:11:13.590 --> 00:11:18.950\nin IT, which is iter tools and\nthere's a product method.\n\n216\n00:11:18.950 --> 00:11:20.480\nAnd that takes iterables.\n\n217\n00:11:20.480 --> 00:11:24.819\nAnd what it will do is create every\ncombination from the iterables.\n\n218\n00:11:24.819 --> 00:11:28.939\nSo if I have ABC, one, two,\nthree it would go A one, A two,\n\n219\n00:11:28.939 --> 00:11:32.910\nA three, B one, B two, B three,\nC one, C two, C three.\n\n220\n00:11:34.110 --> 00:11:37.829\nWhat's really crazy is,\nI can tell it, here's an iterable,\n\n221\n00:11:39.000 --> 00:11:43.800\ndo that with itself, and only give me\nthe ones that are so much in size.\n\n222\n00:11:45.000 --> 00:11:50.917\nUh-huh, I'm tricky, and that happens\nby saying, here's the charset,\n\n223\n00:11:50.917 --> 00:11:57.054\nand use the repeat,\nRepeat is that argument of the length.\n\n224\n00:12:00.419 --> 00:12:03.327\nOkay, now before guessing that,\n\n225\n00:12:03.327 --> 00:12:09.580\nI'm gonna use this other Python\nnicety too, it's called yield.\n\n226\n00:12:09.580 --> 00:12:10.740\nAnd what that does is,\n\n227\n00:12:10.740 --> 00:12:15.380\nthis method will now run and\ncreate what's called a generator.\n\n228\n00:12:15.380 --> 00:12:19.728\nThis'll keep from generating a list that\nis entirely in memory because if I have 1\n\n229\n00:12:19.728 --> 00:12:21.619\ntrillion possible combinations,\n\n230\n00:12:21.619 --> 00:12:25.430\nessentially my computer's gonna run\nout of memory and just lock up.\n\n231\n00:12:25.430 --> 00:12:29.740\nReally, I wanna try them one at a time,\nand only consume the ones that I need.\n\n232\n00:12:29.740 --> 00:12:33.100\nLikewise, I don't wanna spend all\nthat time loading these into memory.\n\n233\n00:12:33.100 --> 00:12:36.440\nWhen I might find the password\non the third one.\n\n234\n00:12:36.440 --> 00:12:39.360\nSo this yield will say,\ngive me the first one, and\n\n235\n00:12:39.360 --> 00:12:43.580\nthen the next time that I ask for\na value, it'll say here's the next one.\n\n236\n00:12:43.580 --> 00:12:45.670\nSo it pauses at this yield statement.\n\n237\n00:12:45.670 --> 00:12:47.600\nSo I'm just gonna have\nit do the guess there.\n\n238\n00:12:47.600 --> 00:12:48.640\nAnd you know what?\n\n239\n00:12:48.640 --> 00:12:53.750\nBefore we worry about the crackit,\nI'm gonna build a main method just for\n\n240\n00:12:53.750 --> 00:12:55.810\na illustrative purposes.\n\n241\n00:12:55.810 --> 00:12:58.500\nAnd let's get some overscroll here.\n\n242\n00:12:58.500 --> 00:13:00.690\nSo here's our main method.\n\n243\n00:13:00.690 --> 00:13:05.045\nAnd we'll say brute.\n\n244\n00:13:05.045 --> 00:13:11.609\nAnd we had such a crazy concern over that\nname, I gotta go double check what it is.\n\n245\n00:13:11.609 --> 00:13:13.383\n[LAUGH] Brutes.\n\n246\n00:13:13.383 --> 00:13:15.473\nPez!\n\n247\n00:13:15.473 --> 00:13:21.020\nAnd I'm going to simplify\nthe character set just, again, for.\n\n248\n00:13:21.020 --> 00:13:28.220\nSo a, b, c, d, e, f, g, h, i, j, k, l and\nthen what is the length of the password.\n\n249\n00:13:28.220 --> 00:13:32.530\nWell, let's just say it is\nfour characters long, okay?\n\n250\n00:13:33.570 --> 00:13:37.907\nSo now, all I want to do is, for guess\n\n251\n00:13:37.907 --> 00:13:43.134\nin brute.guesses,\n\n252\n00:13:43.134 --> 00:13:48.958\nprint, guess, like so, okay.\n\n253\n00:13:48.958 --> 00:13:53.210\nSo, I'm gonna run that just real quick,\nI've gotta rename that file,\n\n254\n00:13:53.210 --> 00:13:59.070\nsince I don't want people to come and\nget me over the trademark.\n\n255\n00:13:59.070 --> 00:14:02.420\nAnd wait for it,\nI forgot to call it, my bad.\n\n256\n00:14:02.420 --> 00:14:07.170\nSo brutus, I wrote a main method, but\nI don't actually call it anywhere.\n\n257\n00:14:07.170 --> 00:14:09.160\nSo-\n&gt;&gt; Does that help?\n\n258\n00:14:09.160 --> 00:14:10.430\n&gt;&gt; Yeah, it does, it does.\n\n259\n00:14:10.430 --> 00:14:13.460\nIf you don't call it, it'll go,\nyeah, it ran, that's good.\n\n260\n00:14:13.460 --> 00:14:15.922\nBut I wanna actually do it [LAUGH]\n&gt;&gt; Thanks for playing [LAUGH]\n\n261\n00:14:15.922 --> 00:14:17.935\n&gt;&gt; That's great, you were fantastic.\n\n262\n00:14:17.935 --> 00:14:19.958\n&gt;&gt; [LAUGH]\n&gt;&gt; All right so, boom, there they are,\n\n263\n00:14:19.958 --> 00:14:21.370\nthere are all the possible\n&gt;&gt; Wow\n\n264\n00:14:21.370 --> 00:14:22.630\n&gt;&gt; Four letter combinations from\n\n265\n00:14:22.630 --> 00:14:23.310\nthat character set.\n\n266\n00:14:24.780 --> 00:14:27.280\nNow, it's actually slower because\nit printed them to the screen.\n\n267\n00:14:27.280 --> 00:14:29.489\n&gt;&gt; [LAUGH] Yeah\n&gt;&gt; However there is one thing,\n\n268\n00:14:29.489 --> 00:14:30.908\nnotice this parentheses and commas?\n\n269\n00:14:30.908 --> 00:14:32.430\nThose are tuples.\n\n270\n00:14:32.430 --> 00:14:34.390\nWe actually want them as strings.\n\n271\n00:14:34.390 --> 00:14:39.168\nCuz if we had to say generate a hash or\nsomething, technically,\n\n272\n00:14:39.168 --> 00:14:44.843\nI could use this same method to generate\nrainbow tables and stuff like that.\n\n273\n00:14:44.843 --> 00:14:50.313\nIf I come in here and this yield guess?\n\n274\n00:14:50.313 --> 00:14:55.250\nInstead of yielding guess, if I say,\n\n275\n00:14:55.250 --> 00:15:01.281\nempty string.join, on the guess, like so.\n\n276\n00:15:01.281 --> 00:15:02.103\nNow.\n\n277\n00:15:05.233 --> 00:15:06.340\nBoom.\n\n278\n00:15:06.340 --> 00:15:08.420\nThere are all the possible combinations.\n\n279\n00:15:08.420 --> 00:15:09.394\nThat's pretty fast.\n\n280\n00:15:09.394 --> 00:15:10.293\n&gt;&gt; Yeah.\n\n281\n00:15:10.293 --> 00:15:14.600\n&gt;&gt; Now, that's four characters\nfrom a less than 26 character set.\n\n282\n00:15:14.600 --> 00:15:16.740\nSo let's see how fast it is, actually.\n\n283\n00:15:18.780 --> 00:15:20.720\nAnd this is the bulk of the effort ,here.\n\n284\n00:15:20.720 --> 00:15:27.810\nSo from utils import timefunc, all right.\n\n285\n00:15:27.810 --> 00:15:29.717\nSo here's our main.\n\n286\n00:15:29.717 --> 00:15:32.496\n@timefunc.\n\n287\n00:15:32.496 --> 00:15:33.420\nI just wanted to say func.\n\n288\n00:15:34.470 --> 00:15:35.120\n&gt;&gt; You got the funk?\n\n289\n00:15:35.120 --> 00:15:39.505\n&gt;&gt; Yeah, I do have the funk,\nall right, so where am I?\n\n290\n00:15:39.505 --> 00:15:45.207\n[SOUND] And\nall that jumping around in my terminal,\n\n291\n00:15:45.207 --> 00:15:48.067\nI'm in the wrong place.\n\n292\n00:15:48.067 --> 00:15:49.965\nSo [LAUGH]\n&gt;&gt; [LAUGH]\n\n293\n00:15:49.965 --> 00:15:52.153\n&gt;&gt; We have to do a quick move,\n\n294\n00:15:52.153 --> 00:15:56.134\nthat is totally okay So,\nI will grab that here.\n\n295\n00:15:56.134 --> 00:15:57.350\nAgain, I must have the funk.\n\n296\n00:15:57.350 --> 00:15:58.120\n&gt;&gt; You do.\n\n297\n00:15:58.120 --> 00:16:02.485\n&gt;&gt; [LAUGH] I do, I do, I do.\n\n298\n00:16:02.485 --> 00:16:05.060\nSo move it to here, there we go.\n\n299\n00:16:06.160 --> 00:16:07.403\nEverything still works.\n\n300\n00:16:07.403 --> 00:16:10.610\nI made boom.\n\n301\n00:16:10.610 --> 00:16:15.630\nAnd in 0.09 seconds,\nit generates all possible four-letter\n\n302\n00:16:15.630 --> 00:16:20.730\ncombinations from Maybe up to L.\n\n303\n00:16:22.210 --> 00:16:24.060\nSo not bad.\n\n304\n00:16:24.060 --> 00:16:26.140\nNow typing out the character sets.\n\n305\n00:16:27.300 --> 00:16:28.920\nThat's not great.\n\n306\n00:16:28.920 --> 00:16:30.830\nThe reason I'm gonna type them out here.\n\n307\n00:16:30.830 --> 00:16:33.600\nForewarning, if you're using\nPython 2 versus Python 3.\n\n308\n00:16:33.600 --> 00:16:39.560\nIf we come over to\nthe stream python module.\n\n309\n00:16:39.560 --> 00:16:43.220\nTwo and three both have the string module.\n\n310\n00:16:43.220 --> 00:16:46.840\nSee this ascii letters,\nand ascii lowercase, and\n\n311\n00:16:46.840 --> 00:16:49.930\nascii uppercase, and digits?\n\n312\n00:16:49.930 --> 00:16:50.930\nSo this is in two.\n\n313\n00:16:53.490 --> 00:16:55.650\nIt is also in three.\n\n314\n00:16:57.470 --> 00:17:04.380\nAnd forewarning, in three there are some\nthat have went away that were in two.\n\n315\n00:17:04.380 --> 00:17:06.120\nSo we're gonna use this, but\n\n316\n00:17:06.120 --> 00:17:09.360\nI wanted to illustrate that there\nare some differences from two to three.\n\n317\n00:17:09.360 --> 00:17:11.630\nIf you use stream.letters in two,\nit will work.\n\n318\n00:17:11.630 --> 00:17:14.760\nIt's the same as aske letters.\n\n319\n00:17:14.760 --> 00:17:18.520\nIf you use string.letters in three,\nit just fails immediately.\n\n320\n00:17:19.600 --> 00:17:21.690\nSo I'm gonna use this.\n\n321\n00:17:21.690 --> 00:17:24.390\nASCII letters is ASCII lower case and\nASCII upper case.\n\n322\n00:17:24.390 --> 00:17:28.040\nIt's a through z lower case,\na through z upper case.\n\n323\n00:17:28.040 --> 00:17:31.400\nAnd if I just say ask for the letters,\nit'll give me both of them.\n\n324\n00:17:31.400 --> 00:17:33.330\nIf I want numbers,\nit's just string.digits.\n\n325\n00:17:33.330 --> 00:17:36.890\nSo I've gotta actually build\nthe entire character set.\n\n326\n00:17:36.890 --> 00:17:37.670\nPass it in.\n\n327\n00:17:37.670 --> 00:17:40.110\nBut I will tell you,\nit's not gonna be as fast.\n\n328\n00:17:40.110 --> 00:17:43.370\nBut I did wanna show you that four\ncharacters is still fairly fast,\n\n329\n00:17:43.370 --> 00:17:44.760\neven with this large character set.\n\n330\n00:17:46.200 --> 00:17:50.560\nSo if I come back in here,\nand I come to the top.\n\n331\n00:17:50.560 --> 00:17:57.190\nAnd I import string,\nstill standard Python.\n\n332\n00:17:57.190 --> 00:18:02.170\nNothing special here yet\nso if I come here and\n\n333\n00:18:02.170 --> 00:18:08.432\nnow if I say chartset equals string\n\n334\n00:18:08.432 --> 00:18:13.719\nascii letters plus string dot digits.\n\n335\n00:18:14.830 --> 00:18:17.890\nThat'll give me uppercase,\nlowercase, and zero through nine.\n\n336\n00:18:17.890 --> 00:18:21.460\n&gt;&gt; And just to make sure, you said that\nwas suppose to be chartset or charset?\n\n337\n00:18:21.460 --> 00:18:22.918\n&gt;&gt; Char, well charset.\n\n338\n00:18:22.918 --> 00:18:28.780\n[NOISE] That's wrong letter, Justin.\n\n339\n00:18:28.780 --> 00:18:29.488\nThere we go.\n\n340\n00:18:29.488 --> 00:18:33.140\n[LAUGH] All right, there we go.\n\n341\n00:18:33.140 --> 00:18:36.580\nSo, I'm just going to\nsay [INAUDIBLE] Charset.\n\n342\n00:18:37.580 --> 00:18:41.000\nSo now I'm feeding in a larger character\nset, it's still only four digits.\n\n343\n00:18:42.640 --> 00:18:47.410\nBoom, let's clear it out so\nwe can see it in all its glory.\n\n344\n00:18:47.410 --> 00:18:51.500\nIt's still running, it's still running,\nit's still running, it's still running and\n\n345\n00:18:51.500 --> 00:18:52.270\nit's up through D.\n\n346\n00:18:52.270 --> 00:18:53.340\nNow notice.\n\n347\n00:18:53.340 --> 00:18:56.060\nThis still is taking some time,\nand I'm printing this out, so\n\n348\n00:18:56.060 --> 00:18:59.500\nthat's ultimately slowing it down cuz\nit's outputting the standard out.\n\n349\n00:18:59.500 --> 00:19:01.680\nI'm already through L.\n\n350\n00:19:01.680 --> 00:19:06.970\nThis does include numbers, uppercase,\nso I'm not sure if we have\n\n351\n00:19:06.970 --> 00:19:11.810\ntime to watch this completely run through,\nbut you wanna see that it's racing past.\n\n352\n00:19:11.810 --> 00:19:13.950\nI think if you turn this off,\n\n353\n00:19:13.950 --> 00:19:17.340\nit's somewhere around a minute\nin order to get these.\n\n354\n00:19:18.380 --> 00:19:21.430\nAgain, let's test it out just real quick.\n\n355\n00:19:21.430 --> 00:19:23.950\nBecause here's a little forewarning for\nyou.\n\n356\n00:19:23.950 --> 00:19:32.920\nIf you have print statements\nthat are not necessary.\n\n357\n00:19:32.920 --> 00:19:35.320\nThen don't do them, okay.\n\n358\n00:19:35.320 --> 00:19:36.300\nJust take them out.\n\n359\n00:19:36.300 --> 00:19:36.970\nJust take them out.\n\n360\n00:19:36.970 --> 00:19:41.140\nSo I'm just calling a pass and so\nit'll just run through each one, but\n\n361\n00:19:41.140 --> 00:19:43.860\nit won't actually do anything.\n\n362\n00:19:43.860 --> 00:19:49.550\nSo python3, brutus and then it's still\nrunning, so it still takes a little\n\n363\n00:19:49.550 --> 00:19:53.300\nbit longer, but 3.3 seconds to run\nthrough all those possible combinations.\n\n364\n00:19:53.300 --> 00:19:57.850\nSo ultimately the char set\nis not the factor typically,\n\n365\n00:19:57.850 --> 00:19:59.560\nit's the length of the password.\n\n366\n00:19:59.560 --> 00:20:02.290\nBecause as we crank that up.\n\n367\n00:20:02.290 --> 00:20:05.970\nAgain, I did a six-letter quick runaround.\n\n368\n00:20:07.270 --> 00:20:08.670\nIt took like an hour and a half.\n\n369\n00:20:08.670 --> 00:20:11.400\nWhich again, not bad,\nit you set it, forget,\n\n370\n00:20:11.400 --> 00:20:14.600\nand go walk off and see what's going on.\n\n371\n00:20:14.600 --> 00:20:20.020\nSo let's clear out here, and\n\n372\n00:20:20.020 --> 00:20:22.540\njust, let's just try it out.\n\n373\n00:20:23.850 --> 00:20:27.600\nI'm going to come in here and\nsay Brutes crackit.\n\n374\n00:20:29.030 --> 00:20:34.260\nThis crackit method,\nthis would actually be\n\n375\n00:20:34.260 --> 00:20:38.700\nwhere I would put in a password and\nsee if it could find it.\n\n376\n00:20:38.700 --> 00:20:39.610\nThis is just a test.\n\n377\n00:20:39.610 --> 00:20:42.440\nWe'll ultimately change this.\n\n378\n00:20:44.070 --> 00:20:48.120\nFor guess in self.guesses.\n\n379\n00:20:48.120 --> 00:20:51.885\nThis is very similar to\nthe main function that I did.\n\n380\n00:20:51.885 --> 00:20:56.404\nIf password equals guess,\n\n381\n00:20:56.404 --> 00:21:00.136\nprint found and well,\n\n382\n00:21:00.136 --> 00:21:05.030\nthen just return the guess.\n\n383\n00:21:05.030 --> 00:21:07.540\nNow, this is not how this is\ngoing to work in all actuality.\n\n384\n00:21:07.540 --> 00:21:08.610\n&gt;&gt; Yeah.\n&gt;&gt; Right?\n\n385\n00:21:08.610 --> 00:21:10.520\nAlready know the password,\nwhy am I doing this?\n\n386\n00:21:10.520 --> 00:21:13.290\n&gt;&gt; You're just verifying the fact\nthat your program will actually\n\n387\n00:21:13.290 --> 00:21:14.140\nfind the password.\n\n388\n00:21:14.140 --> 00:21:16.175\n&gt;&gt; Right.\nAnd then I'm gonna modify this two things\n\n389\n00:21:16.175 --> 00:21:19.290\nto try the SSH connections inside this.\n\n390\n00:21:19.290 --> 00:21:24.600\nSo okay, so\nI wanna time this just to see how long,\n\n391\n00:21:24.600 --> 00:21:28.360\nbecause that 3.3 seconds has to run\nthrough every possible combination.\n\n392\n00:21:28.360 --> 00:21:32.310\nBut I do have to call that method\nin order for it to do anything.\n\n393\n00:21:32.310 --> 00:21:37.430\nSo I'm going to now take this out,\ntake this out, and say,\n\n394\n00:21:37.430 --> 00:21:43.870\nhe brute.crackit, and let's see how long\nit takes to find, I don't know, abcd.\n\n395\n00:21:43.870 --> 00:21:44.370\n&gt;&gt; Okay.\n\n396\n00:21:45.520 --> 00:21:48.020\n&gt;&gt; That should be an A4 combination.\n\n397\n00:21:48.020 --> 00:21:48.880\nSo, boom.\n\n398\n00:21:50.190 --> 00:21:52.010\nAnd then, there it is.\n\n399\n00:21:52.010 --> 00:21:52.510\nWow.\n\n400\n00:21:54.580 --> 00:21:58.740\nOne, one thousandth of a second,\nin order to find it.\n\n401\n00:21:58.740 --> 00:22:00.280\nPretty fast.\n\n402\n00:22:00.280 --> 00:22:01.750\nNow, comes the fun part.\n\n403\n00:22:01.750 --> 00:22:03.460\nWe know it works.\n\n404\n00:22:03.460 --> 00:22:08.080\nWe know it works and since it works,\nI can now come in and\n\n405\n00:22:08.080 --> 00:22:12.130\nchange that crack it, use the SSH,\nand start hammering it.\n\n406\n00:22:12.130 --> 00:22:16.370\nBecause I know the username.\n\n407\n00:22:16.370 --> 00:22:18.540\nSo, I might have to modify\nthis a little bit and\n\n408\n00:22:18.540 --> 00:22:21.740\nultimately you may want to extract this\nout into a tool, but sometimes it's just\n\n409\n00:22:21.740 --> 00:22:25.600\neasier to see if things work by just\ngoing ahead and combining tools.\n\n410\n00:22:25.600 --> 00:22:26.980\nBrutus, that's good.\n\n411\n00:22:28.250 --> 00:22:29.880\nSo, let's see.\n\n412\n00:22:29.880 --> 00:22:31.180\nI want to crack it.\n\n413\n00:22:33.430 --> 00:22:38.660\nAnd I want this to be for\nSSH I'm gonna pass on the username.\n\n414\n00:22:40.890 --> 00:22:43.050\nSo I'm gonna pass on the username and\n\n415\n00:22:43.050 --> 00:22:46.470\nthen I'm just gonna start running\nvery similar to how I did here.\n\n416\n00:22:47.690 --> 00:22:50.720\nBut what do I need to do,\nwhy need a paramiko.\n\n417\n00:22:52.700 --> 00:22:53.679\nSo import.\n\n418\n00:22:55.010 --> 00:23:01.980\nParamiko, and I'm gonna create a little\nhelper function, not in a class.\n\n419\n00:23:01.980 --> 00:23:02.890\nSo, create_client.\n\n420\n00:23:02.890 --> 00:23:07.470\nAnd that's going to take an IP and\nit's going to take a username,\n\n421\n00:23:07.470 --> 00:23:08.940\nand it's gonna take a password.\n\n422\n00:23:10.400 --> 00:23:14.988\nSo, here's the client,\njust like we did in part one.\n\n423\n00:23:14.988 --> 00:23:23.400\nAnd that's paramiko.SSHClient() and\nthen client.\n\n424\n00:23:24.570 --> 00:23:25.130\nYou know what?\n\n425\n00:23:25.130 --> 00:23:29.290\nI'm just, my goodness,\nI don't even know why I'm doing that.\n\n426\n00:23:29.290 --> 00:23:36.400\nThen create, nope, l s I have done\nthe same thing that I did with that one.\n\n427\n00:23:36.400 --> 00:23:38.640\n&gt;&gt; [LAUGH]\n&gt;&gt; I had totally wrong place.\n\n428\n00:23:38.640 --> 00:23:39.710\nBut that's all right.\n\n429\n00:23:39.710 --> 00:23:41.860\nAll right, we'll just go with it,\nI was trying to be lazy.\n\n430\n00:23:41.860 --> 00:23:43.020\nThat's what I get for being lazy.\n\n431\n00:23:43.020 --> 00:23:46.140\nI want to go back to brutus.\n\n432\n00:23:46.140 --> 00:23:48.430\nSo I want to set the host policy.\n\n433\n00:23:49.630 --> 00:23:51.070\nI'll actually just look that up.\n\n434\n00:23:52.380 --> 00:23:52.970\nWhere'd that go?\n\n435\n00:23:52.970 --> 00:23:54.625\nSet.\n\n436\n00:23:56.047 --> 00:23:58.506\nMissing host key policy.\n\n437\n00:23:58.506 --> 00:24:01.203\nSo set_missing_host.\n\n438\n00:24:01.203 --> 00:24:05.571\nkey_policy.\n\n439\n00:24:05.571 --> 00:24:09.678\nAnd I have to give that a policy, so\n\n440\n00:24:09.678 --> 00:24:15.504\nclient_policy=paramiko.AutoAddPolicy.\n\n441\n00:24:15.504 --> 00:24:18.889\nSo client_policy\n\n442\n00:24:21.946 --> 00:24:25.470\nAnd then I'm just gonna go ahead and\nreturn the client.\n\n443\n00:24:25.470 --> 00:24:28.600\nSo, the reason I'm doing that\nis I can quickly get clients and\n\n444\n00:24:28.600 --> 00:24:33.820\nI can clean up my code a little bit,\nand boom, there it is.\n\n445\n00:24:33.820 --> 00:24:38.775\nThen I'm gonna call connect,\nso I don't actually need\n\n446\n00:24:40.167 --> 00:24:45.148\nThis part or\nrather I don't need the inits of this.\n\n447\n00:24:47.500 --> 00:24:48.470\nSo there we go.\n\n448\n00:24:50.170 --> 00:24:52.680\nSo what do I want to do?\n\n449\n00:24:52.680 --> 00:24:56.925\nWell in order to crack it for\neach guess and\n\n450\n00:24:56.925 --> 00:25:01.960\nself.guesses I want to get a client.\n\n451\n00:25:01.960 --> 00:25:03.280\nSo gonna call it create client.\n\n452\n00:25:05.340 --> 00:25:11.470\nAnd I want to client.connect\nwith how am I gonna get that ip?\n\n453\n00:25:11.470 --> 00:25:16.950\nI think the ip is probably\na good thing in this\n\n454\n00:25:16.950 --> 00:25:22.420\nparticular case this is a very\nspecialized tool I'll comeback.\n\n455\n00:25:22.420 --> 00:25:22.920\nAdd that.\n\n456\n00:25:24.440 --> 00:25:25.614\nSet it internal.\n\n457\n00:25:25.614 --> 00:25:29.983\nself.ip = ip.\n\n458\n00:25:29.983 --> 00:25:37.543\nI'm going to connect to the ip or\nthe hostname.\n\n459\n00:25:37.543 --> 00:25:42.240\nself.ip, username= username,\n\n460\n00:25:44.200 --> 00:25:52.759\nand then the password=guess, okay?\n\n461\n00:25:52.759 --> 00:25:55.990\nSo remember how we get\nthat authentication error?\n\n462\n00:25:55.990 --> 00:25:56.660\n&gt;&gt; Yes.\n\n463\n00:25:56.660 --> 00:25:59.260\n&gt;&gt; So I'm assuming that the IP is correct.\n\n464\n00:25:59.260 --> 00:26:01.150\nI assume that I already know the username.\n\n465\n00:26:02.340 --> 00:26:04.440\nI'm gonna surround this in a try catch.\n\n466\n00:26:05.530 --> 00:26:09.530\nAnd I'm gonna keep trying, I'm gonna\nkeep trying, I'm gonna keep trying.\n\n467\n00:26:09.530 --> 00:26:14.620\nAnd as soon as the try fully works,\n\n468\n00:26:14.620 --> 00:26:18.610\nI'm just gonna return that guess,\nbecause that should be the password.\n\n469\n00:26:18.610 --> 00:26:20.900\nShould be is the key word there.\n\n470\n00:26:20.900 --> 00:26:24.360\nSo it's very similar to\nthe logic that I have here.\n\n471\n00:26:24.360 --> 00:26:27.360\nExcept I have to delete a bunch of stuff.\n\n472\n00:26:28.510 --> 00:26:30.710\nThere we go.\n\n473\n00:26:30.710 --> 00:26:31.730\nToo many app keys.\n\n474\n00:26:31.730 --> 00:26:36.602\nSo try, And\n\n475\n00:26:36.602 --> 00:26:39.660\nthen boom, except.\n\n476\n00:26:39.660 --> 00:26:45.220\nAnd I'm just gonna pass because\nif it gets below this line,\n\n477\n00:26:45.220 --> 00:26:46.850\nthe connection has been made.\n\n478\n00:26:46.850 --> 00:26:48.520\nAnd it's the password.\n\n479\n00:26:48.520 --> 00:26:51.110\nSo I'm gonna return the guess,\njust like that.\n\n480\n00:26:53.100 --> 00:26:58.610\nThe one final thing before I forget\nwe do need add in an IP to Brutes.\n\n481\n00:26:59.980 --> 00:27:04.500\nSo if I just say ip = and\n\n482\n00:27:04.500 --> 00:27:08.100\nI have Metasploitable open\nalso on this other screen.\n\n483\n00:27:08.100 --> 00:27:10.250\nNow, I've set this up, full disclosure,\n\n484\n00:27:10.250 --> 00:27:13.190\nI've set this up to where\nthe password length is small.\n\n485\n00:27:13.190 --> 00:27:14.740\n&gt;&gt; Right.\n&gt;&gt; So we can actually see it work.\n\n486\n00:27:15.950 --> 00:27:19.730\nSo I know this is gonna be fast,\njust for your viewership.\n\n487\n00:27:19.730 --> 00:27:23.080\nBut that's where the narrative comes in.\n\n488\n00:27:23.080 --> 00:27:24.110\nI've done some research and\n\n489\n00:27:24.110 --> 00:27:27.380\nI know that their password policy\nsays that it's four characters long.\n\n490\n00:27:27.380 --> 00:27:27.880\nCool.\n\n491\n00:27:29.100 --> 00:27:31.670\nIt's good if you know that if you\ndon't know that it could get,\n\n492\n00:27:31.670 --> 00:27:36.480\nit feels like brute forcing may not\nbe the best technique to employ.\n\n493\n00:27:36.480 --> 00:27:40.920\nBut you never know, if you know how to\napply brute force to this SSH1 you might\n\n494\n00:27:40.920 --> 00:27:45.460\nbe able to tweak it some other things,\nright?\n\n495\n00:27:45.460 --> 00:27:50.800\nSo let's go 1013231 And\nthen I'm just gonna pass that in like so.\n\n496\n00:27:50.800 --> 00:27:54.896\nWell, this no longer requires an argument.\n\n497\n00:27:54.896 --> 00:28:02.280\nAnd since it returns, here it is.\n\n498\n00:28:02.280 --> 00:28:04.870\nSay password equals.\n\n499\n00:28:06.760 --> 00:28:11.930\nSo if there's a password print found\n\n500\n00:28:14.990 --> 00:28:17.980\nand dot format password.\n\n501\n00:28:19.620 --> 00:28:24.740\nSo a little bit of logic the in our main\nand I'm gonna remove this time stamp here.\n\n502\n00:28:24.740 --> 00:28:26.900\nSo as it goes through,\nthere's our character set,\n\n503\n00:28:26.900 --> 00:28:30.010\nit's all lower-case letters,\nall upper-case letters, all digits.\n\n504\n00:28:30.010 --> 00:28:31.080\nThere's the IP.\n\n505\n00:28:31.080 --> 00:28:35.840\nCreate our instance, our object instance,\nand then I say, hey, crack it.\n\n506\n00:28:35.840 --> 00:28:38.580\nAnd then it's gonna return me\nthe password if it can find it.\n\n507\n00:28:38.580 --> 00:28:40.420\nAnd if it does, honestly, I found it.\n\n508\n00:28:40.420 --> 00:28:41.870\nThere's the password.\n\n509\n00:28:41.870 --> 00:28:42.470\nOkay?\n\n510\n00:28:42.470 --> 00:28:45.450\nSo, let's see if we got all\nour ducks in the row here?\n\n511\n00:28:45.450 --> 00:28:49.550\nSo python3 Brutus and boom.\n\n512\n00:28:49.550 --> 00:28:51.750\nI forgot to give a user name.\n\n513\n00:28:51.750 --> 00:28:54.140\nI didn't have all my ducks in a row.\n\n514\n00:28:54.140 --> 00:28:57.170\n&gt;&gt; The lynchpin in our set up here.\n\n515\n00:28:57.170 --> 00:28:58.820\n&gt;&gt; So for the username of what?\n\n516\n00:29:00.010 --> 00:29:02.850\nAnd I found out through some snooping.\n\n517\n00:29:04.270 --> 00:29:07.440\nI found out that a valid\nusername is msfadmin.\n\n518\n00:29:08.850 --> 00:29:11.110\nCould be through,\nlike your web master domain.\n\n519\n00:29:11.110 --> 00:29:13.820\nThere's an email or\nyou have an email for the company and\n\n520\n00:29:13.820 --> 00:29:15.020\nyou're just making assumptions.\n\n521\n00:29:15.020 --> 00:29:17.880\nNow, I set this up to where I\nknow that's the user name but\n\n522\n00:29:17.880 --> 00:29:20.110\nthis could be one of those\nthings where you may,\n\n523\n00:29:20.110 --> 00:29:23.610\nhave to gather these pieces of\ninformation in order to get this done.\n\n524\n00:29:23.610 --> 00:29:25.443\nAnd so, what is the user name?\n\n525\n00:29:25.443 --> 00:29:28.323\nusername=msfadmin.\n\n526\n00:29:28.323 --> 00:29:31.531\nmsfadmin, yeah, all right.\n\n527\n00:29:31.531 --> 00:29:36.630\n[COUGH] Now [LAUGH] I got\nall my ducks in a row,\n\n528\n00:29:36.630 --> 00:29:40.459\nthis should work, should.\n\n529\n00:29:40.459 --> 00:29:43.394\nSo it's running,\nit's running, it's running.\n\n530\n00:29:43.394 --> 00:29:46.100\nNow this could take a little while, right?\n\n531\n00:29:46.100 --> 00:29:49.110\nWe saw that it was 3.3 seconds but\nnow it's actually having to create\n\n532\n00:29:49.110 --> 00:29:55.140\na connection its doing its thing and\nit's gonna hang out for a little bit.\n\n533\n00:29:55.140 --> 00:29:59.930\nSo then it might be one of those things\nwhere we'll just take a quickly little\n\n534\n00:29:59.930 --> 00:30:03.610\nwhoo yeah what have we got,\nwhat's happening?\n\n535\n00:30:05.000 --> 00:30:06.819\nSome serious hatred-\n&gt;&gt; [SOUND]\n\n536\n00:30:06.819 --> 00:30:07.710\n&gt;&gt; Going on right there.\n\n537\n00:30:09.160 --> 00:30:10.680\n&gt;&gt; So-\n&gt;&gt; Correct me if I'm wrong,\n\n538\n00:30:10.680 --> 00:30:13.648\nbut this doesn't look right.\n\n539\n00:30:13.648 --> 00:30:17.320\n[LAUGH]\n&gt;&gt; Aww, Daniel, you are the observant man.\n\n540\n00:30:17.320 --> 00:30:18.130\nAww, look at that.\n\n541\n00:30:18.130 --> 00:30:22.800\nIt looks like,\nit looks like that I have And\n\n542\n00:30:22.800 --> 00:30:27.480\nI've put it into some weird states so\nwe have to do some\n\n543\n00:30:28.790 --> 00:30:34.860\ninvestigations here so if I,\nnow you can really do this\n\n544\n00:30:37.960 --> 00:30:41.170\nthere it is got it got it got it got it,\nso what's going on,\n\n545\n00:30:41.170 --> 00:30:46.690\nerror readings tap games [LAUGH] So,\nerror reading SSH protocol ban.\n\n546\n00:30:47.820 --> 00:30:49.180\nWhat is that mean?\n\n547\n00:30:49.180 --> 00:30:55.690\nyou know we should probably double check\nto make this actually at least connected\n\n548\n00:30:55.690 --> 00:31:02.060\nones, and we've done that on another one\nbut, we should probably double check some.\n\n549\n00:31:02.060 --> 00:31:04.460\nWe're humble where here and say ok.\n\n550\n00:31:06.400 --> 00:31:10.080\nAnd just to make sure that\nthis connection's made, so\n\n551\n00:31:10.080 --> 00:31:13.140\nthere's the username, Brutus.\n\n552\n00:31:14.910 --> 00:31:18.180\nAnd wait for it, wait for it.\n\n553\n00:31:18.180 --> 00:31:23.290\nI'm gonna hard code some usernames and\npasswords just because I know they work.\n\n554\n00:31:23.290 --> 00:31:27.314\nUsername, that's not the username.\n\n555\n00:31:27.314 --> 00:31:29.171\nIt's ubuntu.\n\n556\n00:31:31.474 --> 00:31:33.590\nAnd then sulphur.\n\n557\n00:31:33.590 --> 00:31:37.730\n&gt;&gt; But just it seems to be taking\na little bit longer than we expected.\n\n558\n00:31:37.730 --> 00:31:40.780\n&gt;&gt; Yes, taking so long and\nit's getting some weird errors.\n\n559\n00:31:40.780 --> 00:31:42.920\nI think I forgot a few things.\n\n560\n00:31:42.920 --> 00:31:46.300\nI wanna make a couple of tweaks,\nthis is Live, so to speak.\n\n561\n00:31:46.300 --> 00:31:47.340\n&gt;&gt; That's a process.\n\n562\n00:31:47.340 --> 00:31:48.499\n&gt;&gt; Right, it is a process.\n\n563\n00:31:48.499 --> 00:31:51.877\nSo let's go ahead and\nfix a couple of things that I think, and\n\n564\n00:31:51.877 --> 00:31:53.412\nwith some justification.\n\n565\n00:31:53.412 --> 00:31:57.617\nWe'll have to use our imagination Some\nthat will help alleviate these errors,\n\n566\n00:31:57.617 --> 00:32:00.300\nmake it a little bit faster and\nget things in.\n\n567\n00:32:00.300 --> 00:32:02.930\nThis is the realistic\ntruth of brute force.\n\n568\n00:32:02.930 --> 00:32:05.360\nIf you have a process that takes time,\n\n569\n00:32:05.360 --> 00:32:09.330\nyou're no longer able to check half a\nmillion or a million passwords at a time.\n\n570\n00:32:09.330 --> 00:32:13.610\nYou are checking it as fast as\nthe service will verify said password.\n\n571\n00:32:13.610 --> 00:32:15.250\nSo let's go and take a look at my screen.\n\n572\n00:32:15.250 --> 00:32:18.720\nI've cleared it out,\nlet's just get back into it here.\n\n573\n00:32:20.570 --> 00:32:24.760\nSo there's a couple of things that,\nI think I know what's going on.\n\n574\n00:32:24.760 --> 00:32:27.080\nEvery for-loop I'm creating a client.\n\n575\n00:32:27.080 --> 00:32:27.990\nI don't think I need to.\n\n576\n00:32:27.990 --> 00:32:32.160\nI actually just need to try to\nconnect using the same client.\n\n577\n00:32:32.160 --> 00:32:32.930\nSilly me.\n\n578\n00:32:33.940 --> 00:32:37.439\nSo we're gonna come over here, maybe,\nif I have my hands on the correct keys.\n\n579\n00:32:38.880 --> 00:32:44.010\nSo I'm gonna say client\n= create_client Like so.\n\n580\n00:32:44.010 --> 00:32:48.810\nIn addition to,\nI should probably set a timeout so\n\n581\n00:32:48.810 --> 00:32:51.050\nit's not hanging for 30 seconds.\n\n582\n00:32:52.890 --> 00:32:56.470\nSo over here, I'm gonna say timeout.\n\n583\n00:32:56.470 --> 00:33:02.930\nAnd I'm just gonna say time out 0.001,\nso this does take a float.\n\n584\n00:33:02.930 --> 00:33:08.718\nIn addition to, I wanna say finally,\nso try except finally.\n\n585\n00:33:08.718 --> 00:33:12.023\nI want to close the client,\nso if it does connect,\n\n586\n00:33:12.023 --> 00:33:14.560\nI wanna make sure that that is closed.\n\n587\n00:33:14.560 --> 00:33:16.330\nSo that's one thing.\n\n588\n00:33:16.330 --> 00:33:20.050\nNow, through additional research,\nthis is where some of the magic comes in.\n\n589\n00:33:20.050 --> 00:33:24.140\nThrough additional research,\nI'm running through\n\n590\n00:33:24.140 --> 00:33:28.360\nall of the ASCII letters and\nall of the digits.\n\n591\n00:33:28.360 --> 00:33:30.520\nIt'd probably be best,\n\n592\n00:33:30.520 --> 00:33:34.390\nthe fact that I know their password\npolicy only allows lowercase letters.\n\n593\n00:33:34.390 --> 00:33:36.119\nLet's just run through\nthe lowercase letters.\n\n594\n00:33:36.119 --> 00:33:37.182\n&gt;&gt; Could increase the speed.\n\n595\n00:33:37.182 --> 00:33:38.300\n&gt;&gt; Reduce the character set.\n\n596\n00:33:38.300 --> 00:33:41.330\nUltimately, it's the length\nthat becomes an issue,\n\n597\n00:33:41.330 --> 00:33:44.600\nbut this can kind of speed things up.\n\n598\n00:33:44.600 --> 00:33:47.379\nSo that should get things churning.\n\n599\n00:33:47.379 --> 00:33:49.900\nAnd, well, we should be good to go.\n\n600\n00:33:49.900 --> 00:33:52.310\nNow, I do know even with that,\n\n601\n00:33:52.310 --> 00:33:56.510\nit's gonna take a little bit longer\nthan we have for you to set here.\n\n602\n00:33:56.510 --> 00:33:59.540\nI mean, I can sit here and\nstare at you while it's going on.\n\n603\n00:33:59.540 --> 00:34:00.567\n&gt;&gt; [LAUGH] And talk about the weather.\n\n604\n00:34:00.567 --> 00:34:01.948\n&gt;&gt; I don't think that's good, so\n\n605\n00:34:01.948 --> 00:34:05.119\nwhat we're gonna do is we're gonna do\na little bit of movie magic [NOISE] and\n\n606\n00:34:05.119 --> 00:34:07.642\nthen when we come back,\nwe'll actually see the results.\n\n607\n00:34:07.642 --> 00:34:11.630\nAnd that's the very realistic\nassumption here, right?\n\n608\n00:34:11.630 --> 00:34:13.190\nWe're just pinging, pinging, pinging.\n\n609\n00:34:13.190 --> 00:34:15.340\nIt is a network type thing,\nit will take a while.\n\n610\n00:34:15.340 --> 00:34:18.260\nSo definitely stay tuned,\nwe'll be back with you shortly.\n\n611\n00:34:19.560 --> 00:34:20.780\nWelcome back.\n\n612\n00:34:20.780 --> 00:34:24.100\nWe finally have a cracked password,\nDaniel.\n\n613\n00:34:24.100 --> 00:34:28.290\nAnd, well, just to prove it, let's go\nahead and take a look at my screen here.\n\n614\n00:34:28.290 --> 00:34:30.900\nJust to show you that I,\nin fact, do have it.\n\n615\n00:34:30.900 --> 00:34:31.610\nIt found it out.\n\n616\n00:34:31.610 --> 00:34:32.960\nNow, full disclosure.\n\n617\n00:34:32.960 --> 00:34:35.770\nI knew it was four characters,\nand I knew what it was.\n\n618\n00:34:35.770 --> 00:34:37.810\nIt was the word pass.\n\n619\n00:34:37.810 --> 00:34:41.890\nBut notice, it took about 500,\nalmost 600 seconds.\n\n620\n00:34:41.890 --> 00:34:46.840\n600 seconds, that's a little while.\n\n621\n00:34:46.840 --> 00:34:50.773\nAnd let's just check to see if it works.\n\n622\n00:34:50.773 --> 00:34:54.233\nSo I'm gonna ssh msfadmin@10.0.13.231.\n\n623\n00:34:54.233 --> 00:34:55.951\nAnd I'm gonna say pass.\n\n624\n00:34:55.951 --> 00:34:59.440\nAnd there we go, we are now in.\n\n625\n00:34:59.440 --> 00:35:01.580\nSo, we brute force that password.\n\n626\n00:35:03.040 --> 00:35:05.428\nNow, I'm gonna be,\nI'm gonna disclose this fully.\n\n627\n00:35:05.428 --> 00:35:09.800\nWhen we took that little break, I had to\nmake a couple of tweaks because, well,\n\n628\n00:35:09.800 --> 00:35:15.372\nbrute forcing takes a while by the very\nnature of how brute force works.\n\n629\n00:35:15.372 --> 00:35:19.800\nSo, let's go ahead and\nget out of this ssh connection and\n\n630\n00:35:19.800 --> 00:35:23.460\ntake a look at what changes I had to make.\n\n631\n00:35:23.460 --> 00:35:26.250\nSo, everything was good except for\na couple of things.\n\n632\n00:35:27.750 --> 00:35:32.570\nI put some more prints in there just\nto make sure we could see output going.\n\n633\n00:35:32.570 --> 00:35:36.190\nThis timeout, I originally had\nthat as a really small timeout.\n\n634\n00:35:36.190 --> 00:35:39.130\nAnd then, the SSH connection\ncouldn't actually be established so\n\n635\n00:35:39.130 --> 00:35:41.570\nit would just go, no,\nthat's not right, nope, not right.\n\n636\n00:35:41.570 --> 00:35:44.220\nSo it would time out too fast,\nso I had to extend that.\n\n637\n00:35:44.220 --> 00:35:49.170\nBut by the very nature of that,\nit extended how long it would take.\n\n638\n00:35:49.170 --> 00:35:54.240\nLikewise, I changed this from a general\nexception to an authentication exception\n\n639\n00:35:54.240 --> 00:35:58.880\njust so I would know,\nthat didn't happen, okay?\n\n640\n00:35:58.880 --> 00:36:00.267\nBlank is not it.\n\n641\n00:36:00.267 --> 00:36:03.278\nSo I know that an authentication,\nit actually made a connection,\n\n642\n00:36:03.278 --> 00:36:04.260\ntried the password.\n\n643\n00:36:04.260 --> 00:36:07.941\nAnd because I had to extend the timeout,\nI actually went down here and\n\n644\n00:36:07.941 --> 00:36:09.650\nI cheated a little bit.\n\n645\n00:36:09.650 --> 00:36:12.510\nI changed this from string,\n\n646\n00:36:12.510 --> 00:36:16.080\nI had ASCII letters which gave\nme the entire character set.\n\n647\n00:36:16.080 --> 00:36:19.200\nUpper case, lower case,\nall that fun stuff.\n\n648\n00:36:19.200 --> 00:36:22.910\nAnd I changed it just to a few\nletters that I know it would try.\n\n649\n00:36:22.910 --> 00:36:28.298\nSo given the character set is five\nletters, it still took about ten minutes.\n\n650\n00:36:28.298 --> 00:36:31.728\nNow with a very large character set and\n\n651\n00:36:31.728 --> 00:36:36.240\nsome craziness, the SSH connection\nactually takes a little while.\n\n652\n00:36:36.240 --> 00:36:41.870\nAnd as a result, it was going to\ntake probably a couple of days.\n\n653\n00:36:41.870 --> 00:36:44.850\nAnd that's the realistic\nnature of brute force.\n\n654\n00:36:44.850 --> 00:36:46.680\nBut we found the password.\n\n655\n00:36:46.680 --> 00:36:48.780\nThere are ways to speed this up, right?\n\n656\n00:36:48.780 --> 00:36:53.570\nI may kick a bunch of these processes\noff in a botnet if I were so inclined.\n\n657\n00:36:53.570 --> 00:36:54.883\nI'm not saying you should do that.\n\n658\n00:36:54.883 --> 00:36:55.673\nDon't.\n\n659\n00:36:55.673 --> 00:36:59.830\nBut brute force work,\nI found out the password.\n\n660\n00:36:59.830 --> 00:37:06.709\nNow I'm in, and it looks like I might be\na little privileged in my shell there.\n\n661\n00:37:06.709 --> 00:37:08.553\nWho knows?\n\n662\n00:37:08.553 --> 00:37:12.222\nBut the main goal was to make an SSH\nconnection, brute force connection, and\n\n663\n00:37:12.222 --> 00:37:14.280\nwe have accomplished that very thing.\n\n664\n00:37:14.280 --> 00:37:17.070\n&gt;&gt; Well, it's very cool to watch you\nbuild this thing, create it, and\n\n665\n00:37:17.070 --> 00:37:18.500\nactually make it work.\n\n666\n00:37:18.500 --> 00:37:22.230\nLook at some of the rough spots where we\nhad to overcome some stumbling stones\n\n667\n00:37:22.230 --> 00:37:25.820\nto get it to actually do what it\nis we thought it should do, but\n\n668\n00:37:25.820 --> 00:37:27.470\nit wasn't quite doing it out of the gate.\n\n669\n00:37:27.470 --> 00:37:29.470\nThis is just typical to\ncreating any program.\n\n670\n00:37:29.470 --> 00:37:32.450\nYou guys already know this cuz you\nhave some experience behind that,\n\n671\n00:37:32.450 --> 00:37:34.840\njust name of the game,\nnature of the beast as they say, right?\n\n672\n00:37:34.840 --> 00:37:38.330\nAnd Justin did a fantastic job of figuring\nout where those hot spots were and\n\n673\n00:37:38.330 --> 00:37:39.690\ncooling them on down.\n\n674\n00:37:39.690 --> 00:37:44.094\nAnd like you said, in real life land,\nthe nature is that this is gonna take\n\n675\n00:37:44.094 --> 00:37:47.309\na while because brute forcing\nthat is just what it is.\n\n676\n00:37:47.309 --> 00:37:49.968\nIt's going to try everything\nyou tell it to try, and\n\n677\n00:37:49.968 --> 00:37:53.060\nuntil it makes that connection,\nall that stuff takes time.\n\n678\n00:37:53.060 --> 00:37:54.960\nSo it can be frustrating.\n\n679\n00:37:54.960 --> 00:37:59.054\nI've been on that end of the spectrum\nwhere I'm running a brute force program to\n\n680\n00:37:59.054 --> 00:38:02.390\ntry to access something, but\nit's just taking forever.\n\n681\n00:38:02.390 --> 00:38:04.310\nYou just gotta wait and be patient.\n\n682\n00:38:04.310 --> 00:38:05.508\nSpin up an instance somewhere and\n\n683\n00:38:05.508 --> 00:38:07.618\nlet that take care of it,\nkeep your computer to yourself.\n\n684\n00:38:07.618 --> 00:38:11.890\n[LAUGH] So that you can not be bogged\ndown with it trying to do that work.\n\n685\n00:38:11.890 --> 00:38:13.010\nBut very cool stuff.\n\n686\n00:38:13.010 --> 00:38:13.890\nJustin, it was a great tool.\n\n687\n00:38:13.890 --> 00:38:16.210\nWe appreciate your time and\neffort that you put in on that.\n\n688\n00:38:16.210 --> 00:38:19.000\nBut looks like we have run out of time for\nthis episode.\n\n689\n00:38:19.000 --> 00:38:21.320\nFor DevProTV,\nI've been your host Daniel Lowrie.\n\n690\n00:38:21.320 --> 00:38:22.090\n&gt;&gt; And I'm Justin Dennison.\n\n691\n00:38:22.090 --> 00:38:23.373\n&gt;&gt; And we'll see you next time.\n\n692\n00:38:23.373 --> 00:38:26.036\n[MUSIC]\n\n",
          "vimeoId": "228654816"
        },
        {
          "description": "In this episode, Daniel and Justin build a TCP packet sniffer with Python. Here they will show you how to make the correct socket connection, explain the security permissions surrounding packet capture, create an infinite loop to capture more than one packet, discuss capture output, and look at doing this in Python 2 vs 3.",
          "length": "1423",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-1-1-packet_sniffing_with_python-080717-PGM.00_23_33_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-1-1-packet_sniffing_with_python-080717-PGM.00_23_33_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-1-1-packet_sniffing_with_python-080717-PGM.00_23_33_01.Still001-sm.jpg",
          "title": "Packet Sniffing with Python",
          "transcript": "WEBVTT\n\n1\n00:00:00.293 --> 00:00:10.293\n[MUSIC]\n\n2\n00:00:13.109 --> 00:00:13.718\nAll right.\n\n3\n00:00:13.718 --> 00:00:17.800\nGreetings everyone, and welcome back\nto another great episode of DEVPRO.TV.\n\n4\n00:00:17.800 --> 00:00:20.710\nI am your host, Daniel Lowrie, and\nin today's episode, well, guess what?\n\n5\n00:00:20.710 --> 00:00:24.340\nWe are returning with more in our\nPython for securities series,\n\n6\n00:00:24.340 --> 00:00:26.900\na very important series for\nyou good folks out there.\n\n7\n00:00:26.900 --> 00:00:30.720\nThey're both wanting to do some\ndevelopment and be security minded.\n\n8\n00:00:30.720 --> 00:00:33.457\nJoining us back in the studio yet\nagain, our good friend and\n\n9\n00:00:33.457 --> 00:00:35.774\nmentor in this endeavor, Mr.\nJustin Dennison.\n\n10\n00:00:35.774 --> 00:00:37.144\nJustin, welcome back, sir.\n\n11\n00:00:37.144 --> 00:00:38.170\nWe're so glad to have you again.\n\n12\n00:00:38.170 --> 00:00:38.920\nHow's it going today?\n\n13\n00:00:38.920 --> 00:00:40.330\n&gt;&gt; It is going fantastic.\n\n14\n00:00:40.330 --> 00:00:44.572\nIt's a little warm outside,\na little muggy, but we're inside.\n\n15\n00:00:44.572 --> 00:00:45.519\n[LAUGH]\n&gt;&gt; So it's all good.\n\n16\n00:00:45.519 --> 00:00:46.259\n&gt;&gt; AC's cranking today.\n\n17\n00:00:46.259 --> 00:00:47.447\n&gt;&gt; [LAUGH] That it is.\n\n18\n00:00:47.447 --> 00:00:53.440\nAnd yeah, we're starting with a little\nmore down the security path with python.\n\n19\n00:00:53.440 --> 00:00:55.600\nThe previous episodes in this series,\n\n20\n00:00:55.600 --> 00:00:59.670\nwe've kinda undertook some\nambitious endeavors actually.\n\n21\n00:00:59.670 --> 00:01:00.680\nThat brute forcing thing,\n\n22\n00:01:00.680 --> 00:01:03.920\nif you haven't seen that you\nshould definitely check that out.\n\n23\n00:01:03.920 --> 00:01:08.190\nBrute forcing takes a long time and\nalong that route well,\n\n24\n00:01:08.190 --> 00:01:11.540\nwhat are some other ways that I could\ngather information that may be,\n\n25\n00:01:11.540 --> 00:01:14.618\nmaybe I wouldn't have to\nbrute force a password.\n\n26\n00:01:14.618 --> 00:01:17.822\nMaybe I can find out some information\nabout a particular network,\n\n27\n00:01:17.822 --> 00:01:19.605\nabout a person, whatever it maybe.\n\n28\n00:01:19.605 --> 00:01:24.514\nAnd well, Python has a set of tools and\nI know you talk about using TCP dump and\n\n29\n00:01:24.514 --> 00:01:27.659\ntools of that nature,\nas well as Wire Shark, but\n\n30\n00:01:27.659 --> 00:01:30.374\nwhat if you don't have those available.\n\n31\n00:01:30.374 --> 00:01:34.645\nIn addition to what if you just wanna know\na little more about how this works at\n\n32\n00:01:34.645 --> 00:01:35.530\na lower level?\n\n33\n00:01:35.530 --> 00:01:39.720\nAnd well, maybe you know a little more\nthan I do or maybe not, who knows?\n\n34\n00:01:39.720 --> 00:01:45.830\nBut I guess we'll find out in\nthis set of shows, episodes.\n\n35\n00:01:45.830 --> 00:01:49.180\nSo let's go ahead and get started, and see\nwhat we're actually going to undertake.\n\n36\n00:01:49.180 --> 00:01:52.590\nSo if we take a look at my screen here,\nI do have some disclaimer here.\n\n37\n00:01:52.590 --> 00:01:56.710\nI'm now in Ubuntu, disclaimer number one.\n\n38\n00:01:56.710 --> 00:02:00.550\nDaniel, I'm gonna tell you a whole\nbunch of just heartache and pain.\n\n39\n00:02:00.550 --> 00:02:02.000\n&gt;&gt; Yeah, tears, right.\n\n40\n00:02:02.000 --> 00:02:03.400\n&gt;&gt; There were lots of tears.\n\n41\n00:02:03.400 --> 00:02:09.280\nI tried to write a packet sniffer\non my Mac, just standard Mac stuff.\n\n42\n00:02:09.280 --> 00:02:12.434\nWell there's always like little\nsecurity twigs that number one,\n\n43\n00:02:12.434 --> 00:02:13.630\nmade that difficult.\n\n44\n00:02:13.630 --> 00:02:19.270\nNumber two,\nlistening on raw packets in Mac,\n\n45\n00:02:19.270 --> 00:02:23.215\nit's not available as an interface,\nbecause it's original,\n\n46\n00:02:23.215 --> 00:02:25.650\nit's a BST flavor and\nsome of the things are little different.\n\n47\n00:02:25.650 --> 00:02:29.340\nSo Pythons are, yeah,\nyou could probably get it to work,\n\n48\n00:02:29.340 --> 00:02:32.430\nbut I was in the bathroom crying.\n\n49\n00:02:32.430 --> 00:02:37.750\n&gt;&gt; Well the good news is is that\nnot a ton of Mac servers out there,\n\n50\n00:02:37.750 --> 00:02:40.190\nso if you were doing\nexploitation of some sort,\n\n51\n00:02:40.190 --> 00:02:45.560\nit's highly unlikely that you're gonna\nbe like breaking into Macs a whole lot.\n\n52\n00:02:45.560 --> 00:02:49.303\nSo Linux servers, Windows servers,\nthat's gonna be your bread and butter.\n\n53\n00:02:49.303 --> 00:02:50.588\nSpecifically Linux server.\n\n54\n00:02:50.588 --> 00:02:54.527\nSo it's not an unfortunate thing\nthat we are working inside of Linux,\n\n55\n00:02:54.527 --> 00:02:57.286\nit's probably a more\ncommon use case scenario.\n\n56\n00:02:57.286 --> 00:03:00.517\n&gt;&gt; And that was actually something\nI thoughts about as we started, or\n\n57\n00:03:00.517 --> 00:03:02.086\nkind of as I started this thing.\n\n58\n00:03:02.086 --> 00:03:06.565\nWell most of the time it's this is a Linux\nserver, or some kind of a Linux appliance,\n\n59\n00:03:06.565 --> 00:03:09.420\nor this is probably\na more accurate use case.\n\n60\n00:03:09.420 --> 00:03:11.990\nIn addition to,\nthere's some assumptions here.\n\n61\n00:03:11.990 --> 00:03:14.214\nLet me kind of set the stage for you.\n\n62\n00:03:14.214 --> 00:03:18.319\nYou are already gonna need to have\nelevated privileges to do this,\n\n63\n00:03:18.319 --> 00:03:22.791\ncuz from all the places that I've looked,\nif you try to sneak packets and\n\n64\n00:03:22.791 --> 00:03:25.378\nthings just kinda go nope, no, no, no.\n\n65\n00:03:25.378 --> 00:03:26.141\n[INAUDIBLE]\n&gt;&gt; So\n\n66\n00:03:26.141 --> 00:03:28.990\nthis is a post exploitation\ntype of thing that we're doing.\n\n67\n00:03:28.990 --> 00:03:31.750\n&gt;&gt; Exactly, so\nthis is you already have some in.\n\n68\n00:03:31.750 --> 00:03:34.980\nAnd you're as a root user.\n\n69\n00:03:34.980 --> 00:03:36.440\nWell, now you can sniff packets.\n\n70\n00:03:36.440 --> 00:03:37.420\nIf you try to run this,\n\n71\n00:03:37.420 --> 00:03:40.573\nI'll actually show you this,\nknowing my luck it'll work with this time.\n\n72\n00:03:40.573 --> 00:03:42.049\n[LAUGH]\n&gt;&gt; But I assure you.\n\n73\n00:03:42.049 --> 00:03:44.067\n&gt;&gt; [INAUDIBLE] [CROSSTALK]\n&gt;&gt; There was lots of blood,\n\n74\n00:03:44.067 --> 00:03:44.940\nsweats and tears.\n\n75\n00:03:44.940 --> 00:03:47.174\nWhen I try to do this\njust as a standard user.\n\n76\n00:03:47.174 --> 00:03:49.390\n&gt;&gt; Yeah.\n&gt;&gt; And it was like, absolutely not.\n\n77\n00:03:49.390 --> 00:03:50.670\nIt's actually pretty simple.\n\n78\n00:03:50.670 --> 00:03:55.530\nAnd the goal of this episode is just to\nget kind of our sniffer working, just\n\n79\n00:03:55.530 --> 00:03:59.940\ngrabbing packets from a raw socket, and\nkind of outputting them to the screen and\n\n80\n00:03:59.940 --> 00:04:05.350\nseeing, well, you can't actually read\nmuch about them, but that's our goal.\n\n81\n00:04:05.350 --> 00:04:08.790\nYou could technically save these, and\nthen use some other tool to consume them.\n\n82\n00:04:08.790 --> 00:04:11.870\nBut let's see how it works on Python.\n\n83\n00:04:11.870 --> 00:04:15.390\nSo, I'm inside of this folder,\nthere's nothing there.\n\n84\n00:04:15.390 --> 00:04:18.850\nAnd for now, I'm gonna write\ncode just as a standard user.\n\n85\n00:04:18.850 --> 00:04:21.350\nWe're gonna try to run,\nI want you to see what's going on.\n\n86\n00:04:21.350 --> 00:04:25.610\nAnd addition to, we're gonna have to look\nat some of the documentation, because\n\n87\n00:04:25.610 --> 00:04:29.070\nit's a little bit different in the socket\nconnections that we made before, right?\n\n88\n00:04:29.070 --> 00:04:32.970\nWe use the standard TCP connection,\nit's all good.\n\n89\n00:04:32.970 --> 00:04:37.990\nHowever, we're gonna have to make a few\ntweaks and I'll illustrate kind of why\n\n90\n00:04:37.990 --> 00:04:42.840\nwe're on Linux, cuz not all the options\nyou're gonna see are available everywhere.\n\n91\n00:04:42.840 --> 00:04:47.220\nSo if you're targeting a Window's\nplatform, this would have to be tweaked.\n\n92\n00:04:47.220 --> 00:04:50.090\nBut the general idea should be the same.\n\n93\n00:04:50.090 --> 00:04:51.990\nSo let's go ahead and dive right in.\n\n94\n00:04:51.990 --> 00:04:54.130\nAnd I'm just gonna call this sniffer.\n\n95\n00:04:55.160 --> 00:04:58.500\nYou know, self explanatory.\n\n96\n00:04:58.500 --> 00:05:01.000\nI don't know if that's\nnecessarily the best thing.\n\n97\n00:05:01.000 --> 00:05:02.970\nBut I'm gonna import the socket library.\n\n98\n00:05:02.970 --> 00:05:05.630\nI'm gonna go ahead and\nset up my main function here.\n\n99\n00:05:05.630 --> 00:05:10.060\nAnd this is just to say, you know what,\n\n100\n00:05:10.060 --> 00:05:14.950\nI'm not even gonna make this one of\nthose executable with a custom shabang.\n\n101\n00:05:14.950 --> 00:05:18.660\nYou never know,\nI'm feeling a little froggy so to speak.\n\n102\n00:05:18.660 --> 00:05:24.590\nSo let's make sure that this runs, and\nI'm gonna say Python 3 just like that.\n\n103\n00:05:24.590 --> 00:05:26.360\nSo it runs.\n\n104\n00:05:26.360 --> 00:05:28.460\nSecond kind of disclaimer.\n\n105\n00:05:28.460 --> 00:05:33.250\nPython 3 is going to make this\na little clearer about how I do this,\n\n106\n00:05:33.250 --> 00:05:38.100\nbecause Python 3 handles byte streams,\nUnicode streams, and\n\n107\n00:05:38.100 --> 00:05:41.130\nwhat are called just standard\nstreams differently.\n\n108\n00:05:41.130 --> 00:05:43.960\nSo when we bring in data,\nwhen we bring in binary data,\n\n109\n00:05:43.960 --> 00:05:50.190\nwe're gonna get it as a binary kind of\narray, binary string representation.\n\n110\n00:05:50.190 --> 00:05:53.420\nIn Python 2, I actually show\nyou it running in Python 2,\n\n111\n00:05:53.420 --> 00:05:57.350\nif I can get it to work, it's not\nas clear about what's going on and\n\n112\n00:05:57.350 --> 00:06:00.150\nyou get weird output and\nit's a little harder to handle.\n\n113\n00:06:00.150 --> 00:06:03.740\nSo even though we strive to keep\nthis working on either one, and\n\n114\n00:06:03.740 --> 00:06:05.680\nyou can make it work on either one,\njust for\n\n115\n00:06:05.680 --> 00:06:08.860\nclarity, we're going to use Python\n3 most of the time for this one.\n\n116\n00:06:08.860 --> 00:06:12.140\nMainly because it's just clearer\nabout what's going on and\n\n117\n00:06:12.140 --> 00:06:13.109\nhow it handles set things.\n\n118\n00:06:14.390 --> 00:06:20.630\nSo, let's go ahead and\njust get back into our file here.\n\n119\n00:06:20.630 --> 00:06:22.230\nAnd what we want to do.\n\n120\n00:06:22.230 --> 00:06:26.040\nWell first off,\nwe wanna make a connection, so\n\n121\n00:06:26.040 --> 00:06:28.750\nI'm going to say socket.socket.\n\n122\n00:06:28.750 --> 00:06:35.560\nNow, by default, this is just IPv4 and\nsocket strings, socket string.\n\n123\n00:06:35.560 --> 00:06:36.940\nAnd those are the defaults.\n\n124\n00:06:36.940 --> 00:06:38.420\nWe don't want that anymore.\n\n125\n00:06:38.420 --> 00:06:41.900\nWe actually want to say,\nI am looking for just packets and\n\n126\n00:06:41.900 --> 00:06:43.380\nI'm looking on the raw side.\n\n127\n00:06:43.380 --> 00:06:44.750\nI just want data.\n\n128\n00:06:44.750 --> 00:06:48.890\nAnd there's a couple, there's this final\noption that ultimately we're gonna\n\n129\n00:06:48.890 --> 00:06:51.920\ndo a hand wavy action, we're actually\ngoing to look at in the documentation.\n\n130\n00:06:51.920 --> 00:06:56.541\nBut there's a socket that\nAF_packet who knew, right?\n\n131\n00:06:56.541 --> 00:06:59.600\n[LAUGH]\n&gt;&gt; Is the packet family, so\n\n132\n00:06:59.600 --> 00:07:05.490\nthis is the family of the types\nof connections you can make.\n\n133\n00:07:05.490 --> 00:07:10.512\nAnd then socket-SOCK_ROLL,\nlet me make sure, yep.\n\n134\n00:07:10.512 --> 00:07:15.158\nAnd then finally,\nwe're gonna say socket.ntohs and\n\n135\n00:07:15.158 --> 00:07:17.990\nwe're just gonna put a 3 there.\n\n136\n00:07:17.990 --> 00:07:22.493\nNow, that's the hard way before we're\nactually gonna go take a look, but\n\n137\n00:07:22.493 --> 00:07:26.797\nI wanna show you that this actually\nworks if all goes according to plan.\n\n138\n00:07:26.797 --> 00:07:32.685\n&gt;&gt; Yeah, that socket.ntohs\nisn't very explanatory at all.\n\n139\n00:07:32.685 --> 00:07:33.210\n[LAUGH]\n&gt;&gt; Yeah,\n\n140\n00:07:33.210 --> 00:07:36.240\nso what's interesting about\nthe library inside of Python,\n\n141\n00:07:36.240 --> 00:07:41.560\nit's a wrap around the low level\nC libraries that handle sockets.\n\n142\n00:07:41.560 --> 00:07:42.220\nAnd it's funny,\n\n143\n00:07:42.220 --> 00:07:46.690\nI've seen some kind of wars about why you\nwriting in Python, just write it in C?\n\n144\n00:07:46.690 --> 00:07:50.630\nWell okay, I admit,\nmaybe that's a little better,\n\n145\n00:07:50.630 --> 00:07:52.940\nyou could build a binary executable.\n\n146\n00:07:52.940 --> 00:07:55.668\nHowever, I find Python\na little more readable.\n\n147\n00:07:55.668 --> 00:07:58.654\nAnd maybe this is something that you write\nin Python the first time to kind of get\n\n148\n00:07:58.654 --> 00:07:59.476\nyour head around it.\n\n149\n00:07:59.476 --> 00:08:01.820\nAnd then if you're like,\nI really need this to be fast.\n\n150\n00:08:01.820 --> 00:08:05.454\nI know that the C parts gonna be there so\nyou may go write it in C.\n\n151\n00:08:05.454 --> 00:08:10.360\nThey compiled it to a binary\nexecutable and there she goes.\n\n152\n00:08:10.360 --> 00:08:13.640\nSo Python is a good prototyping language\nyou'll get, for the most part it's\n\n153\n00:08:13.640 --> 00:08:17.165\navailable on most Linux Systems because\nbehind the scenes what they don't tell you\n\n154\n00:08:17.165 --> 00:08:23.977\nis a lot of the Linux system processes\nuse Python in some Glue Code way.\n\n155\n00:08:23.977 --> 00:08:25.760\nSo, we're gonna grab some data and\n\n156\n00:08:25.760 --> 00:08:27.920\nyou're going to find something\ninteresting about this data.\n\n157\n00:08:27.920 --> 00:08:32.510\nWe're going to say, data and\nwe're going to use this connection and\n\n158\n00:08:32.510 --> 00:08:36.410\nwe're just gonna say received from and\n\n159\n00:08:36.410 --> 00:08:42.740\nthis is 65 and you know what\nI'm just going to say 65,500.\n\n160\n00:08:42.740 --> 00:08:47.510\nThis is the buffer length,\nthat we're gonna be able to get.\n\n161\n00:08:47.510 --> 00:08:50.290\nWe can actually go a little\nbit higher than that but\n\n162\n00:08:50.290 --> 00:08:51.720\nI'm just gonna leave it at 655.\n\n163\n00:08:51.720 --> 00:08:56.550\nAnd then, well, let's just print\nthat out and see what we have.\n\n164\n00:08:56.550 --> 00:08:59.860\nSo this by default is\na blocking connection.\n\n165\n00:08:59.860 --> 00:09:03.750\nThat means that connection\n.received from is gonna hang out\n\n166\n00:09:03.750 --> 00:09:09.010\nuntil it grabs something from\nthe socket connection, okay?\n\n167\n00:09:09.010 --> 00:09:10.380\nSo let's see if this works, and\n\n168\n00:09:10.380 --> 00:09:14.000\nthen we're gonna take a perusal\nthrough the documentation.\n\n169\n00:09:14.000 --> 00:09:16.250\nSo sniffer, boom, operation not permitted.\n\n170\n00:09:17.310 --> 00:09:18.150\n&gt;&gt; That's a problem.\n\n171\n00:09:18.150 --> 00:09:19.670\n&gt;&gt; Yeah, that is a problem.\n\n172\n00:09:19.670 --> 00:09:24.010\nThat's because I'm a standard user,\nI don't have the privilege\n\n173\n00:09:24.010 --> 00:09:28.540\nof actually doing this, so by default it's\ngoing to try to keep you from doing this.\n\n174\n00:09:28.540 --> 00:09:34.350\n&gt;&gt; It reminds me of if you've ever worked\nwith a setting something into promiscuous,\n\n175\n00:09:34.350 --> 00:09:36.626\nlike using Wireshark for sniffing packets.\n\n176\n00:09:36.626 --> 00:09:41.060\nYou wanna set your network adapter to\nbe promiscuous, accept all traffic and\n\n177\n00:09:41.060 --> 00:09:42.260\nthen I want to look at it.\n\n178\n00:09:42.260 --> 00:09:43.330\nEnd map, same kind of thing.\n\n179\n00:09:43.330 --> 00:09:47.860\nIf you wanna really get down to\ncontrolling the packets at the raw level,\n\n180\n00:09:47.860 --> 00:09:51.340\nyou have to make sure that you SUDO that,\ngive yourself elevated permissions.\n\n181\n00:09:51.340 --> 00:09:53.400\nBecause otherwise it's not\ngonna be able to do that.\n\n182\n00:09:53.400 --> 00:09:56.398\nAnd I guess they were unable\nto overcome that obstacle and\n\n183\n00:09:56.398 --> 00:09:58.150\nneither are you, Justin [LAUGH].\n\n184\n00:09:58.150 --> 00:10:01.537\n&gt;&gt; Well I mean, from a security\nstandpoint it would be irresponsible.\n\n185\n00:10:01.537 --> 00:10:02.140\n&gt;&gt; Right.\n\n186\n00:10:02.140 --> 00:10:05.190\n&gt;&gt; Of them to allow, well,\nrunning this Python.\n\n187\n00:10:05.190 --> 00:10:09.483\nPacket sniffer essentially\noutside of kind of a SUDO or\n\n188\n00:10:09.483 --> 00:10:13.041\na superuser or\nmaybe even a root kind of role.\n\n189\n00:10:13.041 --> 00:10:17.312\nMy guess is because this is wrapping\na low level CAPI, is not something that I\n\n190\n00:10:17.312 --> 00:10:22.385\nactually have control over handling\nsomething that's going to occur.\n\n191\n00:10:22.385 --> 00:10:24.005\nSo, what is the option?\n\n192\n00:10:24.005 --> 00:10:26.815\nWell we can just go into root.\n\n193\n00:10:26.815 --> 00:10:29.009\nI forget my password.\n\n194\n00:10:29.009 --> 00:10:32.474\n&gt;&gt; [LAUGH]\n&gt;&gt; Let me remember if I can remember my\n\n195\n00:10:32.474 --> 00:10:33.575\npassword.\n\n196\n00:10:34.685 --> 00:10:37.667\n&gt;&gt; There's two Ss in password.\n\n197\n00:10:37.667 --> 00:10:39.660\n&gt;&gt; Yeah that's it.\n\n198\n00:10:39.660 --> 00:10:40.280\n&gt;&gt; That's the problem.\n\n199\n00:10:40.280 --> 00:10:41.477\nEvery time it's everything.\n\n200\n00:10:41.477 --> 00:10:42.150\n&gt;&gt; That's it.\n\n201\n00:10:42.150 --> 00:10:44.127\nWell, we'll deal with\nthat in just a moment.\n\n202\n00:10:44.127 --> 00:10:44.880\n&gt;&gt; [LAUGH]\n&gt;&gt; My goodness,\n\n203\n00:10:44.880 --> 00:10:48.590\nI'm gonna have to look at my password but\nwe'll get to there in just a moment.\n\n204\n00:10:48.590 --> 00:10:52.100\nJust to show you that it works\nin the same way with Python 2,\n\n205\n00:10:52.100 --> 00:10:54.990\nI'm just gonna run it with Python\nwhich is the default interpreter here.\n\n206\n00:10:54.990 --> 00:10:57.620\nAnd boom, operation not permitted.\n\n207\n00:10:57.620 --> 00:11:01.179\nHowever notice that where it kinda fails.\n\n208\n00:11:02.470 --> 00:11:04.660\nIs a little bit different,\nthe output, right?\n\n209\n00:11:04.660 --> 00:11:08.540\nSo they've changed a little\nbit of this from time to time.\n\n210\n00:11:08.540 --> 00:11:12.214\nSo this is Python 3,\nsocket.socket_init and\n\n211\n00:11:12.214 --> 00:11:16.701\nthen here it was _realsocket(family,\ntype, proto).\n\n212\n00:11:16.701 --> 00:11:19.820\nSo I'm just gonna hop back in here.\n\n213\n00:11:19.820 --> 00:11:22.335\nAnd, as I try to remember my password.\n\n214\n00:11:22.335 --> 00:11:23.850\n&gt;&gt; [LAUGH] Yeah.\n\n215\n00:11:23.850 --> 00:11:24.606\n&gt;&gt; Who knows?\n\n216\n00:11:24.606 --> 00:11:26.005\n&gt;&gt; It's that password you used.\n&gt;&gt; Right?\n\n217\n00:11:26.005 --> 00:11:29.849\n&gt;&gt; Yes, that password I used that [SOUND],\nwhat's gonna happen?\n\n218\n00:11:29.849 --> 00:11:31.620\nLet's take a look here.\n\n219\n00:11:31.620 --> 00:11:36.878\nAnd if I kinda scroll down,\nand I look for this AF Packet.\n\n220\n00:11:39.260 --> 00:11:44.260\nWhat's really crazy is AF packet\nonly is mentioned one time.\n\n221\n00:11:44.260 --> 00:11:45.621\n&gt;&gt; Hm.\n\n222\n00:11:45.621 --> 00:11:48.142\n&gt;&gt; Certain other address families,\nAF packet,\n\n223\n00:11:48.142 --> 00:11:50.880\ncan support specific representations.\n\n224\n00:11:50.880 --> 00:11:53.680\nAnd here's the reason it's\nkinda mentioned only one time.\n\n225\n00:11:53.680 --> 00:11:58.810\nAF packet does not exist on Mac OS.\n\n226\n00:11:58.810 --> 00:12:01.060\n&gt;&gt; AF packet does not exist in this dojo,\ndoes it?\n\n227\n00:12:01.060 --> 00:12:02.125\n&gt;&gt; It does not, it does not.\n\n228\n00:12:02.125 --> 00:12:02.850\n&gt;&gt; [LAUGH]\n&gt;&gt; So\n\n229\n00:12:02.850 --> 00:12:07.490\nI'm guessing what's happened is they've\nkind of just hand waved that because\n\n230\n00:12:07.490 --> 00:12:11.480\nthese are not the features that\nare easily accessible across platforms.\n\n231\n00:12:11.480 --> 00:12:12.940\nThere's no way to map that.\n\n232\n00:12:12.940 --> 00:12:16.200\nThis is something that I,\nmaybe you find something different,\n\n233\n00:12:16.200 --> 00:12:20.310\nhave only been able to get to\nwork on a Linux style system.\n\n234\n00:12:20.310 --> 00:12:23.400\nSo AF_Packet, well that's the family type.\n\n235\n00:12:23.400 --> 00:12:26.240\nAnd particularly,\nyou're looking for packets.\n\n236\n00:12:26.240 --> 00:12:31.070\nLet's look for that sock_raw.\n\n237\n00:12:31.070 --> 00:12:32.250\nAnd there it is.\n\n238\n00:12:32.250 --> 00:12:35.860\nNotice that AF_Packet is not\neven listed in these constants.\n\n239\n00:12:35.860 --> 00:12:39.086\nBut it's there, but only for\nLinux systems as far as I can tell.\n\n240\n00:12:39.086 --> 00:12:43.590\nAnd then SOCK_RAW, well, what are those?\n\n241\n00:12:43.590 --> 00:12:44.185\nWell, let's go look.\n\n242\n00:12:44.185 --> 00:12:49.078\nSOCK_RAW, or perhaps one of\nthe SOCK_ constants, okay, whatever.\n\n243\n00:12:49.078 --> 00:12:55.240\nAh-ha, so SOCK_RAW and\nsock raw, create a raw socket.\n\n244\n00:12:55.240 --> 00:13:02.430\nSo, it's not assuming any type of,\nwait for it, type, right?.\n\n245\n00:13:02.430 --> 00:13:04.690\nIt's just, give me data.\n\n246\n00:13:04.690 --> 00:13:08.260\nI don't care what it looks like,\njust give it to me.\n\n247\n00:13:08.260 --> 00:13:12.840\nGranted the socket library can do TCP,\nUDP, but also raw sockets.\n\n248\n00:13:12.840 --> 00:13:17.430\nI think it can actually do Linux sockets\nas well between Linux processes.\n\n249\n00:13:17.430 --> 00:13:20.130\nNot necessarily something\nI would recommend doing.\n\n250\n00:13:20.130 --> 00:13:24.107\nBut the raw is saying just listen,\njust give it to me okay?\n\n251\n00:13:24.107 --> 00:13:29.870\nSo there's that and\nwell what was that N2HS thing?\n\n252\n00:13:29.870 --> 00:13:31.983\n&gt;&gt; Yeah, the new toes.\n\n253\n00:13:31.983 --> 00:13:35.264\n&gt;&gt; N2\n&gt;&gt; Let's see,\n\n254\n00:13:35.264 --> 00:13:38.190\nMTO\n&gt;&gt; HS.\n\n255\n00:13:38.190 --> 00:13:42.530\n&gt;&gt; Convert a 16 bit positive integer\nfrom network to host by order.\n\n256\n00:13:42.530 --> 00:13:45.700\nOur machines where the host byte order\nis the same as the network byte order,\n\n257\n00:13:45.700 --> 00:13:47.530\nthis is a no op, so no operation.\n\n258\n00:13:48.830 --> 00:13:51.180\nOtherwise, it performs\na 4 byte swap operation.\n\n259\n00:13:52.570 --> 00:13:53.971\n&gt;&gt; Okay.\n&gt;&gt; [LAUGH]\n\n260\n00:13:53.971 --> 00:13:54.798\n&gt;&gt; Sure.\n\n261\n00:13:54.798 --> 00:13:58.900\nWhat I have found is ultimately\nwhen you start to decode these, and\n\n262\n00:13:58.900 --> 00:14:00.160\nthat's not the purpose here.\n\n263\n00:14:00.160 --> 00:14:04.950\nWhen you start to decode these this\nends up being something that's assumed.\n\n264\n00:14:04.950 --> 00:14:09.020\nThere are some other ways that\nyou can go about doing this.\n\n265\n00:14:09.020 --> 00:14:13.963\nHTONS, into HSHT and ultimately,\n\n266\n00:14:13.963 --> 00:14:18.750\nthis is all by order conversions.\n\n267\n00:14:18.750 --> 00:14:21.230\nAnd actually, if you start reading,\n\n268\n00:14:21.230 --> 00:14:26.480\nthere used to be some other constants\nthat assumes kind of this protocol.\n\n269\n00:14:26.480 --> 00:14:30.120\nAnd essentially what you're\ndenoting is the conversion between\n\n270\n00:14:30.120 --> 00:14:31.670\n&gt;&gt; What you're reading in and\n\n271\n00:14:31.670 --> 00:14:33.680\nwhat you're bringing\ninto the host machine.\n\n272\n00:14:33.680 --> 00:14:36.830\nSo, it's just about\narranging the raw data.\n\n273\n00:14:36.830 --> 00:14:38.140\nThat's all we need to know.\n\n274\n00:14:38.140 --> 00:14:43.035\nNow, if you're more than willing to go and\nkind of dig in on that,\n\n275\n00:14:43.035 --> 00:14:44.461\nby all means do so.\n\n276\n00:14:44.461 --> 00:14:49.374\nI think it's a little beyond the scope of\nwhat we need to get done at this current\n\n277\n00:14:49.374 --> 00:14:50.150\njuncture.\n\n278\n00:14:50.150 --> 00:14:54.963\nSo there are those, but\nif you scroll down there's a whole\n\n279\n00:14:54.963 --> 00:14:59.788\nlot of other changes and\ntransformations that can occur.\n\n280\n00:14:59.788 --> 00:15:06.834\nAnd I'm now gonna come back over here\nI'm pretty sure I remember my password,\n\n281\n00:15:06.834 --> 00:15:12.171\nso I'm just going to SUDO Python\nrun this kind of elevated so\n\n282\n00:15:12.171 --> 00:15:16.150\nwe can actually see what\ncomes out as a read.\n\n283\n00:15:16.150 --> 00:15:23.190\nSo, SUDO Python 3 sniffer,\nand there we go.\n\n284\n00:15:23.190 --> 00:15:24.129\nNotice it's hanging.\n\n285\n00:15:26.010 --> 00:15:27.890\nOr I forgot my password.\n\n286\n00:15:27.890 --> 00:15:28.490\n&gt;&gt; Forgot your password.\n\n287\n00:15:30.590 --> 00:15:31.740\n&gt;&gt; Wait for it.\n\n288\n00:15:31.740 --> 00:15:32.340\nWait for it.\n\n289\n00:15:32.340 --> 00:15:35.010\n&gt;&gt; I think you might\nhave action this time.\n\n290\n00:15:35.010 --> 00:15:36.501\n&gt;&gt; All right all right, so, we finally\nhave it [LAUGH] I think, I think.\n\n291\n00:15:36.501 --> 00:15:39.372\n&gt;&gt; Because,\nyou are not getting the password.\n\n292\n00:15:39.372 --> 00:15:42.180\n&gt;&gt; Yes,\nI am not getting the password here.\n\n293\n00:15:42.180 --> 00:15:43.260\nPasswords are hard.\n\n294\n00:15:43.260 --> 00:15:43.860\n&gt;&gt; They really are.\n\n295\n00:15:43.860 --> 00:15:44.710\n&gt;&gt; So, refresh.\n\n296\n00:15:44.710 --> 00:15:45.480\n&gt;&gt; Stupid passwords.\n\n297\n00:15:45.480 --> 00:15:47.950\n&gt;&gt; And now, boom, there we go.\n\n298\n00:15:47.950 --> 00:15:51.250\nIt actually grabbed a single packet\nwhen I refreshed on Firefox.\n\n299\n00:15:51.250 --> 00:15:54.010\nSo it was like, there we go.\n\n300\n00:15:54.010 --> 00:15:57.473\nAnd that data that I spit out, boom.\n\n301\n00:15:57.473 --> 00:15:58.974\nIt actually has two parts.\n\n302\n00:15:58.974 --> 00:16:00.288\nIt come in as a tubal.\n\n303\n00:16:00.288 --> 00:16:01.736\nIt gives me raw data.\n\n304\n00:16:01.736 --> 00:16:04.144\nAnd essentially,\nthis is the binary string.\n\n305\n00:16:04.144 --> 00:16:08.872\nAnd what I think's funny about the binary\nstring is that every once in a while,\n\n306\n00:16:08.872 --> 00:16:11.032\nit doesn't encode a portion of it.\n\n307\n00:16:11.032 --> 00:16:16.400\nRight here, www, something,\nsomething, something, google.com.\n\n308\n00:16:16.400 --> 00:16:17.870\nI wonder what this was for.\n\n309\n00:16:17.870 --> 00:16:20.850\nIt's probably www.google.com.\n\n310\n00:16:20.850 --> 00:16:24.014\nAnd then over here is actually,\nthe adder part,\n\n311\n00:16:24.014 --> 00:16:26.724\nthe address in which things originated.\n\n312\n00:16:26.724 --> 00:16:29.140\nOriginated, hold on.\n\n313\n00:16:29.140 --> 00:16:29.930\nI have to double check.\n\n314\n00:16:31.760 --> 00:16:32.790\nA received from.\n\n315\n00:16:32.790 --> 00:16:34.860\nWe should probably go look at that.\n\n316\n00:16:34.860 --> 00:16:39.686\nWe used said method, received from.\n\n317\n00:16:39.686 --> 00:16:44.190\nOkay so, received data the return\nvalue is the the bytes and\n\n318\n00:16:44.190 --> 00:16:48.530\naddress that will run,\naddress of the socket sending of data.\n\n319\n00:16:48.530 --> 00:16:51.000\nSo where the data is coming from?\n\n320\n00:16:51.000 --> 00:16:53.786\nYou always second guess yourself\nat the most inopportune times, but\n\n321\n00:16:53.786 --> 00:16:54.851\nthat's just how it goes.\n\n322\n00:16:54.851 --> 00:16:58.330\nSo that's what we got.\n\n323\n00:16:58.330 --> 00:17:02.670\nAll right, it just grabbed on packet.\n\n324\n00:17:02.670 --> 00:17:06.603\nHow is this actually going\nto be useful in capacitor?\n\n325\n00:17:06.603 --> 00:17:10.640\n&gt;&gt; Yeah, we'll gonna need more than one\npacket to be a true packet sniffer.\n\n326\n00:17:10.640 --> 00:17:15.090\n&gt;&gt; Yeah, yeah, so I could just sit around\nand start this up a bunch of times.\n\n327\n00:17:15.090 --> 00:17:16.350\nWell there we go.\n\n328\n00:17:16.350 --> 00:17:18.752\n&gt;&gt; Just make job and\nsay we're on this and-\n\n329\n00:17:18.752 --> 00:17:20.272\n&gt;&gt; [INAUDIBLE] [LAUGH]\n\n330\n00:17:20.272 --> 00:17:21.106\n&gt;&gt; Forever, but\n\n331\n00:17:21.106 --> 00:17:25.562\nit seems like there is probably a better\nway to do that even in the [CROSSTALK].\n\n332\n00:17:25.562 --> 00:17:29.870\nSo let's go change this a little bit\nthat'll just constantly grab packets.\n\n333\n00:17:29.870 --> 00:17:32.190\nAnd actually I wanna remove kind of the,\n\n334\n00:17:32.190 --> 00:17:36.570\nI'm wanna separate the raw\ndata from the address.\n\n335\n00:17:36.570 --> 00:17:39.030\nAnd that way I can pull those apart and\n\n336\n00:17:39.030 --> 00:17:42.270\nlet's just see what the raw\ndata's coming through.\n\n337\n00:17:42.270 --> 00:17:47.630\nAnd we'll just kinda move around on the\nInternet and see how fast this is working.\n\n338\n00:17:47.630 --> 00:17:54.250\nSo here we go and now instead of data,\nI'm gonna say raw.data and addr.\n\n339\n00:17:54.250 --> 00:17:58.622\nNow I'm doing tuple unpacking here so\nraw data comma adder.\n\n340\n00:17:58.622 --> 00:18:01.923\nSince through, I know that there's a tuple\nbeing returned, it'll go ahead and\n\n341\n00:18:01.923 --> 00:18:02.612\nsplit those up.\n\n342\n00:18:02.612 --> 00:18:06.970\nAnd assign the first argument, or\nthe zero element, to raw data.\n\n343\n00:18:06.970 --> 00:18:11.955\nAnd then the address element, the second\nelement, or index of one to adder.\n\n344\n00:18:11.955 --> 00:18:17.033\nAnd instead of data well,\nlet's just print raw data.\n\n345\n00:18:17.033 --> 00:18:23.260\nBut that still doesn't fix our problem of,\nthings are only gonna happen one time.\n\n346\n00:18:23.260 --> 00:18:27.146\nBut using this main method, now notice,\nI'm not writing a class or anything,\n\n347\n00:18:27.146 --> 00:18:29.301\nthis is just meant to be very,\nvery simple.\n\n348\n00:18:29.301 --> 00:18:32.568\nSo I'm gonna say, while true.\n\n349\n00:18:32.568 --> 00:18:33.689\nAnd you're like, hold on Justin.\n\n350\n00:18:34.750 --> 00:18:36.980\nI thought infinite loops were bad?\n\n351\n00:18:36.980 --> 00:18:40.760\nWell, infinite loops are typically bad,\nexcept you will see them a great\n\n352\n00:18:40.760 --> 00:18:45.300\ndeal of time in games and\nnetwork type stuff.\n\n353\n00:18:45.300 --> 00:18:47.610\nSo if you're opening up a server or\n\n354\n00:18:47.610 --> 00:18:52.580\na connection, you're just looping all\nthe time, and essentially you're polling.\n\n355\n00:18:52.580 --> 00:18:53.700\nHey, you got something there?\n\n356\n00:18:53.700 --> 00:18:54.803\nYou got something there?\n\n357\n00:18:54.803 --> 00:18:58.688\nAnd what's interesting, this connect\nreceiver, connect receive from,\n\n358\n00:18:58.688 --> 00:19:02.230\nthis is a blocking call, so\nthere's nothing going on.\n\n359\n00:19:02.230 --> 00:19:08.680\nIt actually stops, it pauses right here\nuntil it sees something that it can read.\n\n360\n00:19:08.680 --> 00:19:12.263\nSome packet comes across the wire.\n\n361\n00:19:12.263 --> 00:19:14.950\nSo it's not like it's churning\nup a bunch of information or\n\n362\n00:19:14.950 --> 00:19:16.440\ncalculating large numbers.\n\n363\n00:19:16.440 --> 00:19:18.800\nAnd then it runs out of space, and\n\n364\n00:19:18.800 --> 00:19:23.370\nbreaks things, it blocks, and\nthen it'll turn as fast as possible.\n\n365\n00:19:23.370 --> 00:19:25.680\nNow there is some finite limit to Python.\n\n366\n00:19:25.680 --> 00:19:27.470\nThis is the nature of the beast.\n\n367\n00:19:27.470 --> 00:19:34.600\nBut let's see,\nhere comes the password fun times again.\n\n368\n00:19:34.600 --> 00:19:37.754\nBoom, and wait for it.\n\n369\n00:19:37.754 --> 00:19:42.970\nI think it remembered,\nit cached my session there, at least.\n\n370\n00:19:42.970 --> 00:19:47.040\nSo let's just refresh and there we go.\n\n371\n00:19:47.040 --> 00:19:52.440\nWe got bunches of packets, all kinds of\nthem, and that was from a single refresh.\n\n372\n00:19:52.440 --> 00:19:55.701\nOkay, what happens now?\n\n373\n00:19:55.701 --> 00:20:00.270\nInteresting, what happens now if\nI navigate to some other place?\n\n374\n00:20:01.370 --> 00:20:07.475\nSo ITPro.TV, and boom, boom,\nboom, it's grabbing all of those.\n\n375\n00:20:07.475 --> 00:20:11.645\n[LAUGH] My Firefox is having\na bunch of fun times.\n\n376\n00:20:11.645 --> 00:20:15.504\n&gt;&gt; [LAUGH]\n&gt;&gt; And then, what happens if I open up\n\n377\n00:20:15.504 --> 00:20:20.121\nanother terminal window and\njust ping something.\n\n378\n00:20:20.121 --> 00:20:22.743\nAlso Google DNS 8.8.8.8\n&gt;&gt; Yeah.\n\n379\n00:20:22.743 --> 00:20:26.944\n&gt;&gt; So ping 8.8.8.8 and\njust start pinging and\n\n380\n00:20:26.944 --> 00:20:31.350\nnow every time this pings\nI'm reading a new packet.\n\n381\n00:20:31.350 --> 00:20:35.310\nSo I'm grabbing packets from all over\nthe place, I'm giving them as raw data and\n\n382\n00:20:35.310 --> 00:20:40.900\ntechnically I can save this\nraw data into a file and\n\n383\n00:20:40.900 --> 00:20:44.340\njust have a giant, essentially I\nthink they're called PCAP files?\n\n384\n00:20:44.340 --> 00:20:48.960\n&gt;&gt; Yeah, PCAP files, they open up in\ntcpdump or WireShark as most commonly.\n\n385\n00:20:48.960 --> 00:20:53.110\n&gt;&gt; Yep, and so I can just save these as\nkind of raw data, boom, I'm good to go.\n\n386\n00:20:53.110 --> 00:20:56.710\nI have the beginnings of\na packet sniffer here.\n\n387\n00:20:56.710 --> 00:21:00.960\nNow the next step is starting\nto pull these apart and\n\n388\n00:21:00.960 --> 00:21:03.920\nget meaningful information\nout programatically.\n\n389\n00:21:03.920 --> 00:21:08.890\nBecause maybe the ultimate thought\nprocess is, I don't have those tools.\n\n390\n00:21:08.890 --> 00:21:13.090\nIf I already had those tools then\nthis is a moot point, right?\n\n391\n00:21:13.090 --> 00:21:17.000\nWhat if I wanted to fly\nunder the radar and maybe\n\n392\n00:21:17.000 --> 00:21:21.150\nagain just to understand a little more,\nI'm wanna pull these pieces apart and\n\n393\n00:21:21.150 --> 00:21:26.080\nsee what is this information\nactually representing?\n\n394\n00:21:26.080 --> 00:21:30.757\nI know we don't have time to do that,\nthat's a whole involved process or\n\n395\n00:21:30.757 --> 00:21:31.919\na few [CROSSTALK].\n\n396\n00:21:31.919 --> 00:21:34.300\n&gt;&gt; [LAUGH]\n&gt;&gt; It's a whole involved process.\n\n397\n00:21:34.300 --> 00:21:38.370\nBut there is one final thing that I wanna\ndo before we kind of get out of here.\n\n398\n00:21:38.370 --> 00:21:41.098\nAnd that is, I showed you Python 3,\n\n399\n00:21:41.098 --> 00:21:45.682\nyou saw that is was essentially\na bunch of hex values, right.\n\n400\n00:21:45.682 --> 00:21:48.297\nEvery once in a while you got some plain\ntext characters that you could read\n\n401\n00:21:48.297 --> 00:21:49.090\nand make out.\n\n402\n00:21:49.090 --> 00:21:53.270\nSo if nothing else you're like,\nthey're here, they're here, I got you.\n\n403\n00:21:53.270 --> 00:21:58.559\nHowever, if I say pseudo Python\n\n404\n00:21:58.559 --> 00:22:03.700\nboom, and see what I mean about clarity?\n\n405\n00:22:03.700 --> 00:22:04.550\n&gt;&gt; Yeah.\n\n406\n00:22:04.550 --> 00:22:06.650\n&gt;&gt; So this is still just bytes.\n\n407\n00:22:06.650 --> 00:22:08.830\nThat's all it is.\n\n408\n00:22:08.830 --> 00:22:14.020\nExcept the way it's represented as\nstrings in Python 2 is not super clear.\n\n409\n00:22:14.020 --> 00:22:20.410\nSo we'll try this at various points\nto see if we can extract pieces.\n\n410\n00:22:20.410 --> 00:22:23.060\nCuz you'll notice every once in a while\nyou'll get something like this where it\n\n411\n00:22:23.060 --> 00:22:25.520\nactually prints out\nsomething that you can read.\n\n412\n00:22:25.520 --> 00:22:27.350\nBut the rest of the time it's just going.\n\n413\n00:22:27.350 --> 00:22:30.260\n&gt;&gt; Just garbage.\n&gt;&gt; I don't know what to do on the screen.\n\n414\n00:22:30.260 --> 00:22:33.690\nBut that's all it takes,\nactually, to start sniffing and\n\n415\n00:22:33.690 --> 00:22:36.790\njust grabbing network traffic\nfrom whatever you're doing.\n\n416\n00:22:36.790 --> 00:22:40.598\nSo if all you need is the raw packets,\nthis is it.\n\n417\n00:22:40.598 --> 00:22:43.900\nAnd then maybe you can extract\nthose in some other capacity.\n\n418\n00:22:43.900 --> 00:22:48.060\nBut well, the ultimate goal is to\nstart pulling these apart with Python.\n\n419\n00:22:48.060 --> 00:22:54.190\nI will forewarn you, there's some\nPython C kind of interface things\n\n420\n00:22:54.190 --> 00:22:57.760\nthat we're gonna have to do in order to do\nthat, but well, that's our next testing.\n\n421\n00:22:57.760 --> 00:22:59.230\n&gt;&gt; Well, Justin sounds like a lot of fun.\n\n422\n00:22:59.230 --> 00:23:00.705\nThis was really cool to watch,\n\n423\n00:23:00.705 --> 00:23:03.837\nto be able to get that raw data\nthat's flying across the network.\n\n424\n00:23:03.837 --> 00:23:06.124\nActually put it into\na file if we wanted to.\n\n425\n00:23:06.124 --> 00:23:10.129\nAnd then if we had access to another tool,\nlike WireShark or tcpdump, go ahead and\n\n426\n00:23:10.129 --> 00:23:12.530\nopen that and read that data as necessary.\n\n427\n00:23:12.530 --> 00:23:15.280\nBut yeah, I'm really looking forward\nto seeing how we can kind of like\n\n428\n00:23:15.280 --> 00:23:18.470\nmake our own tool that does that so\nwe can see that, very cool stuff.\n\n429\n00:23:18.470 --> 00:23:21.010\nJustin we do thank you for\ndropping by today and\n\n430\n00:23:21.010 --> 00:23:23.870\nexplaining how we can create our\nown sniffer using Python very cool.\n\n431\n00:23:23.870 --> 00:23:26.580\nHopefully you guys enjoyed it and\nfound it entertaining as well.\n\n432\n00:23:26.580 --> 00:23:29.180\nBut does look like it is time for\nus to sign out.\n\n433\n00:23:29.180 --> 00:23:31.790\nFor DevPro.TV,\nI've been your host, Daniel Lowry.\n\n434\n00:23:31.790 --> 00:23:33.060\n&gt;&gt; And I'm Justin Dennison.\n\n435\n00:23:33.060 --> 00:23:34.862\n&gt;&gt; And we'll see you next time.\n\n436\n00:23:34.862 --> 00:23:38.660\n[MUSIC]\n\n",
          "vimeoId": "228813747"
        },
        {
          "description": "In this episode, Daniel and Justin start a new project that will use Python to help us format our RAW packet data into a readable .pcap file. Here you'll see how to format the data and then send that data to a .pcap file which you can then view using a standard tool like Wireshark or TCPdump.",
          "length": "1597",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-2-packet_capture_output-080817-PGM.00_29_18_02.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-2-packet_capture_output-080817-PGM.00_29_18_02.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-2-packet_capture_output-080817-PGM.00_29_18_02.Still001-sm.jpg",
          "title": "Packet Capture Output",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.924 --> 00:00:14.154\nAll right, greetings, everyone.\n\n3\n00:00:14.154 --> 00:00:17.386\nWelcome to another exciting\nepisode of DEVPRO.TV.\n\n4\n00:00:17.386 --> 00:00:20.081\nI'm your host, Daniel Lowrie, and\nin today's episode, guess what?\n\n5\n00:00:20.081 --> 00:00:23.321\nWe are moving on with more in our\nPython for Security series, and\n\n6\n00:00:23.321 --> 00:00:27.056\nwe've learned a lot so far and\ntoday we're gonna learn a little bit more.\n\n7\n00:00:27.056 --> 00:00:29.993\nWe built a sniffer in a prior episode.\n\n8\n00:00:29.993 --> 00:00:32.035\nNow we're gonna kinda work\nwith that output today.\n\n9\n00:00:32.035 --> 00:00:35.877\nAnd of course, joining us in the studio to\nteach us what to do when it comes to that,\n\n10\n00:00:35.877 --> 00:00:37.850\nour good friend, Mr. Justin Dennison.\n\n11\n00:00:37.850 --> 00:00:39.520\nJustin, welcome back, sir.\n\n12\n00:00:39.520 --> 00:00:40.188\nHow's it going today?\n\n13\n00:00:40.188 --> 00:00:41.983\n&gt;&gt; It is going fantastic, right?\n\n14\n00:00:41.983 --> 00:00:48.287\nIt's not quite too hot in the morning, but\nI suspect it will be that way before long.\n\n15\n00:00:48.287 --> 00:00:49.530\n&gt;&gt; A little balmy in Florida.\n\n16\n00:00:49.530 --> 00:00:50.326\n&gt;&gt; It is a little balmy.\n\n17\n00:00:50.326 --> 00:00:54.962\nAnd by balmy he means it's\nlike a tropical rainforest\n\n18\n00:00:54.962 --> 00:00:58.265\nwithout any of the coverage of shade.\n\n19\n00:00:58.265 --> 00:01:03.034\n[LAUGH] So\nit's the actual enemy of redheads.\n\n20\n00:01:03.034 --> 00:01:04.235\n&gt;&gt; Yes.\n&gt;&gt; So I don't know why I'm here.\n\n21\n00:01:04.235 --> 00:01:04.834\n&gt;&gt; You poor man.\n\n22\n00:01:04.834 --> 00:01:06.880\n[LAUGH]\n&gt;&gt; But I am.\n\n23\n00:01:06.880 --> 00:01:08.590\nBut yes, in a previous episode,\n\n24\n00:01:08.590 --> 00:01:12.240\nwe actual just started sniffing\npackets from a particular network.\n\n25\n00:01:12.240 --> 00:01:14.360\nIt was a network on a virtual\nmachine that I had.\n\n26\n00:01:14.360 --> 00:01:19.100\nAnd again, just to re-emphasize, this\nis kind of post-exploitation, this is.\n\n27\n00:01:19.100 --> 00:01:20.690\nWe already have elevated privileges,\n\n28\n00:01:20.690 --> 00:01:24.640\nmainly because we need those in order\nto kinda just sniff the traffic.\n\n29\n00:01:24.640 --> 00:01:29.020\nNow there's a couple of things,\nall we did was kind of output this, right,\n\n30\n00:01:29.020 --> 00:01:30.050\nin the previous episode.\n\n31\n00:01:30.050 --> 00:01:31.370\nWe saw how to set that up.\n\n32\n00:01:31.370 --> 00:01:34.130\nBut there was something\nthat was bothering me.\n\n33\n00:01:34.130 --> 00:01:39.120\nIf nothing else, if would be nice if I\ncould save this, maybe to a PCAP file, and\n\n34\n00:01:39.120 --> 00:01:41.560\nthen just extract those, right?\n\n35\n00:01:41.560 --> 00:01:42.980\nMaybe I can analyze those later.\n\n36\n00:01:42.980 --> 00:01:47.810\nI could turn this loose somewhere, have it\noutput to a file, extract that file, and\n\n37\n00:01:47.810 --> 00:01:51.330\nthen analyze those, maybe using\nWireshark or something of that nature.\n\n38\n00:01:51.330 --> 00:01:54.340\nSo ultimately,\nthat's what we're going to do today.\n\n39\n00:01:54.340 --> 00:01:59.680\nWe're going to build a custom class that,\nwell, it simulates a PCAP file.\n\n40\n00:01:59.680 --> 00:02:03.640\nI will forewarn you, there's kind\nof some low level binary shifts and\n\n41\n00:02:03.640 --> 00:02:06.640\npacking and shenanigans there,\nand we'll talk about that.\n\n42\n00:02:06.640 --> 00:02:10.400\nBut this is a good introduction to some\nof the power that is available in Python\n\n43\n00:02:10.400 --> 00:02:14.470\nmainly because it has access\nto some low level CAPIs.\n\n44\n00:02:14.470 --> 00:02:19.090\nSo I think the best thing to do is\nto go ahead, do a quick review, and\n\n45\n00:02:19.090 --> 00:02:24.580\nthen let's get started creating that PCAP\nfile class where we can create PCAP files,\n\n46\n00:02:24.580 --> 00:02:25.980\nrun boom, there we go.\n\n47\n00:02:25.980 --> 00:02:29.050\nSo let's go ahead and\ntake a look at my screen here,\n\n48\n00:02:29.050 --> 00:02:32.210\nand I'm just back in our little sniffer.\n\n49\n00:02:32.210 --> 00:02:34.980\nProbably should have named that\nfolder a little bit differently,\n\n50\n00:02:34.980 --> 00:02:37.010\nbut it is what it is.\n\n51\n00:02:37.010 --> 00:02:42.040\nSo let's just hop back in here just for\na moment, and it was pretty easy.\n\n52\n00:02:42.040 --> 00:02:44.510\nWe were just printing out raw data.\n\n53\n00:02:44.510 --> 00:02:48.786\nWe make a connection using AF packet\nwhich is the family type, and\n\n54\n00:02:48.786 --> 00:02:50.588\nthen using the raw socket.\n\n55\n00:02:50.588 --> 00:02:55.220\nAnd then again this is about some\nshifts in particular by order.\n\n56\n00:02:55.220 --> 00:03:00.910\nUltimately, this is what you need to\nknow in order to sniff through these.\n\n57\n00:03:00.910 --> 00:03:03.629\nAnd then we set it into\nan infinite loop and\n\n58\n00:03:03.629 --> 00:03:07.130\ngrabbed the raw data by\njust receiving these, okay.\n\n59\n00:03:07.130 --> 00:03:11.374\nNow I use 65,500.\n\n60\n00:03:11.374 --> 00:03:17.134\nI'm actually gonna change this a little\nbit to the actual absolute maximum 65,535,\n\n61\n00:03:17.134 --> 00:03:18.770\nif I'm not mistaken.\n\n62\n00:03:18.770 --> 00:03:19.580\n&gt;&gt; That is correct.\n\n63\n00:03:19.580 --> 00:03:20.830\n&gt;&gt; Yep, there you go.\n\n64\n00:03:20.830 --> 00:03:24.920\nSo boom, there we have,\nit's just going to run.\n\n65\n00:03:24.920 --> 00:03:26.410\nAnd let me show you that it runs.\n\n66\n00:03:26.410 --> 00:03:32.250\nAnd if I remember correctly,\nI should be able to end up in root now.\n\n67\n00:03:32.250 --> 00:03:37.210\nNow in a previous episode, I thought I\nhad changed the password and I didn't.\n\n68\n00:03:37.210 --> 00:03:39.960\nAnd well,\nwe're just going to circumvent that by\n\n69\n00:03:39.960 --> 00:03:42.760\nescalating my privileges\nto change myself to root.\n\n70\n00:03:42.760 --> 00:03:48.870\nSo I'm gonna say python and\nsniffer or python3, excuse me.\n\n71\n00:03:48.870 --> 00:03:51.880\nThis is probably going to\nwork best just for output.\n\n72\n00:03:51.880 --> 00:03:56.090\nAnd you'll notice that it's already\ngrabbing some traffic here.\n\n73\n00:03:56.090 --> 00:03:58.640\nIt's actually grabbing traffic\nbecause I'm sharing this\n\n74\n00:03:58.640 --> 00:04:02.940\nbetween the virtual machine and\nmy particular computer.\n\n75\n00:04:02.940 --> 00:04:05.320\nSo it's just this binary files.\n\n76\n00:04:05.320 --> 00:04:09.160\nThis is nice, but it's just printing\nthe standard out currently.\n\n77\n00:04:10.280 --> 00:04:12.920\nThat's probably not\nnecessarily what you want.\n\n78\n00:04:12.920 --> 00:04:16.650\nIt may be nice if you could\njust save those, right?\n\n79\n00:04:16.650 --> 00:04:21.850\nSo a lot of these packet\nsniffing software, Wireshark.\n\n80\n00:04:21.850 --> 00:04:24.050\nI totally forgot the other\none that I had prepared.\n\n81\n00:04:24.050 --> 00:04:25.100\nI should have wrote it down.\n\n82\n00:04:25.100 --> 00:04:25.960\n&gt;&gt; TCP dump.\n\n83\n00:04:25.960 --> 00:04:29.522\n&gt;&gt; TCP dump, there we go, there we go.\n\n84\n00:04:29.522 --> 00:04:31.205\n&gt;&gt; You get on that side of the fence and\n\n85\n00:04:31.205 --> 00:04:34.764\nyour brain takes all the information\nthat you know and suddenly goes ha!\n\n86\n00:04:34.764 --> 00:04:38.952\n&gt;&gt; Yeah, it's kinda like I'm just putting\nmy brain in a blend tech blender and\n\n87\n00:04:38.952 --> 00:04:41.583\nwas like, yep, it will blend,\nit will blend.\n\n88\n00:04:41.583 --> 00:04:45.978\nIt would be nice if I can take this\ninformation, save it into a file, and\n\n89\n00:04:45.978 --> 00:04:50.744\nmaybe just pull that out through that\nexploded SSH connection that we had from\n\n90\n00:04:50.744 --> 00:04:51.870\na previous time.\n\n91\n00:04:53.060 --> 00:04:55.570\nSo let's do that.\n\n92\n00:04:55.570 --> 00:04:58.350\nAnd I'm actually gonna put\nthis in a separate file\n\n93\n00:04:59.680 --> 00:05:02.640\nto kinda give some organization so\nwe can abstract away.\n\n94\n00:05:02.640 --> 00:05:04.480\nBecause I wanna keep\nthe actual sniffer.pi,\n\n95\n00:05:04.480 --> 00:05:06.650\nI wanna keep that fairly clean.\n\n96\n00:05:07.950 --> 00:05:10.330\nThere will be some logic in there later,\nbut for\n\n97\n00:05:10.330 --> 00:05:13.940\nnow, it'd just be nice to see,\nhere are the pieces that I need.\n\n98\n00:05:13.940 --> 00:05:19.090\nNow what we're going to write is,\nin fact, let me get out of\n\n99\n00:05:19.090 --> 00:05:24.559\nhere because I'm afraid my VM\nwill default to something else.\n\n100\n00:05:24.559 --> 00:05:27.966\nWhat we're gonna write is\na simple PCAP file class.\n\n101\n00:05:27.966 --> 00:05:34.750\nAnd it will have an initialization method,\na close and a write.\n\n102\n00:05:34.750 --> 00:05:38.210\nWe're exposing a little bit of\nthe interface for a file, and\n\n103\n00:05:38.210 --> 00:05:40.190\nreally behind the scenes\nof the file object.\n\n104\n00:05:41.190 --> 00:05:43.476\nBut by exposing that interface,\nthat's nice.\n\n105\n00:05:43.476 --> 00:05:47.588\nAnd if we have time,\nmaybe we'll add a couple of methods for\n\n106\n00:05:47.588 --> 00:05:53.280\ncontacts manager so we can do a with\nstatement, so it will auto close itself.\n\n107\n00:05:53.280 --> 00:05:55.110\nBut you never know.\n\n108\n00:05:55.110 --> 00:05:57.420\nWe'll see how the time allows.\n\n109\n00:05:57.420 --> 00:06:02.422\nSo let's go ahead and make another\nPython file called capture.py and\n\n110\n00:06:02.422 --> 00:06:06.120\nthen within that I'm\ngoing to create a class.\n\n111\n00:06:06.120 --> 00:06:09.845\nAnd that class is going\nto be PCAP file and\n\n112\n00:06:09.845 --> 00:06:13.830\nthe initialization here.\n\n113\n00:06:13.830 --> 00:06:15.950\nWe're just going to start very simply.\n\n114\n00:06:15.950 --> 00:06:19.350\nAnd just to show you that\nessentially we're wrapping a file\n\n115\n00:06:20.940 --> 00:06:22.260\nin this PCAP file object.\n\n116\n00:06:22.260 --> 00:06:30.020\nSo if I have a file name, what I want is a\nfile pointer, like a file object pointer.\n\n117\n00:06:30.020 --> 00:06:33.299\nAnd not pointer in the context\nof like C and C++ and\n\n118\n00:06:33.299 --> 00:06:36.053\nthings like that,\njust [SOUND] there we go.\n\n119\n00:06:36.053 --> 00:06:37.552\nIt's an open file object.\n\n120\n00:06:37.552 --> 00:06:43.647\nI'm gonna pass in the filename and\nI'm gonna change the mode here to wb.\n\n121\n00:06:43.647 --> 00:06:47.830\nAnd that means write mode but\nit's a binary encoding.\n\n122\n00:06:47.830 --> 00:06:52.140\nSo it's expecting binary\ninformation to be written to it.\n\n123\n00:06:52.140 --> 00:06:55.010\nThis is a little bit different than\nif you're just writing plain text,\n\n124\n00:06:55.010 --> 00:06:58.000\ncuz then the representation's\na little bit different.\n\n125\n00:06:58.000 --> 00:06:59.550\nSo we're gonna do that.\n\n126\n00:06:59.550 --> 00:07:05.840\nAnd for now we're gonna say,\nwrite and data.\n\n127\n00:07:05.840 --> 00:07:07.270\nAnd you know what?\n\n128\n00:07:07.270 --> 00:07:14.131\nSo file pointer, write data,\nand then def close,\n\n129\n00:07:14.131 --> 00:07:19.750\nand that's just going to say fp.close.\n\n130\n00:07:19.750 --> 00:07:23.975\nNow it doesn't seem like a good idea,\nlike why would you do that?\n\n131\n00:07:23.975 --> 00:07:25.510\nThat doesn't make any sense.\n\n132\n00:07:25.510 --> 00:07:31.080\nWell, if nothing else, I now have\na kind of a in written documentation.\n\n133\n00:07:31.080 --> 00:07:32.310\nWhat kind of file is this?\n\n134\n00:07:32.310 --> 00:07:33.570\nThis is a PCAP file.\n\n135\n00:07:33.570 --> 00:07:36.157\nThis is a packet capture file.\n\n136\n00:07:36.157 --> 00:07:40.085\nAll that does right now is essentially\nopen a file and close a file.\n\n137\n00:07:40.085 --> 00:07:43.420\nThere's nothing really new about this.\n\n138\n00:07:43.420 --> 00:07:47.090\nLet's make sure it works,\nthough, before we carry on.\n\n139\n00:07:47.090 --> 00:07:53.318\nSo I'm gonna say,\nfrom capture import PCAPfile.\n\n140\n00:07:53.318 --> 00:08:00.755\nAnd then if I say pcap, PCAP file,\nand let's just say test.\n\n141\n00:08:00.755 --> 00:08:02.460\nThere we go.\n\n142\n00:08:02.460 --> 00:08:05.712\nΥou know what, test.pcap.\n\n143\n00:08:05.712 --> 00:08:08.160\nLike so, boom, there we go.\n\n144\n00:08:08.160 --> 00:08:11.069\nAnd then I'm going to create\njust a binary string,\n\n145\n00:08:11.069 --> 00:08:13.436\nbecause I know it's going to paste that,\n\n146\n00:08:13.436 --> 00:08:18.192\nso here's a message, and this is purely\nsimulated, Daniel, purely simulated.\n\n147\n00:08:18.192 --> 00:08:19.060\n&gt;&gt; Uh-huh, purely.\n\n148\n00:08:19.060 --> 00:08:21.881\n&gt;&gt; This is a simulated message.\n\n149\n00:08:21.881 --> 00:08:22.907\nThis should work.\n&gt;&gt; Simulated.\n\n150\n00:08:22.907 --> 00:08:26.479\n&gt;&gt; Simulated, simulated, there we go.\n\n151\n00:08:26.479 --> 00:08:28.681\n&gt;&gt; [LAUGH] [INAUDIBLE]\n&gt;&gt; I know, I know.\n\n152\n00:08:28.681 --> 00:08:32.473\nAnd then, this should work,\nand then as its binary, and\n\n153\n00:08:32.473 --> 00:08:37.770\nthen I'm gonna say pcap.close, just\nlike so and then let's get out of there.\n\n154\n00:08:39.020 --> 00:08:45.130\nAnd boom, there's our test.pcap so\nthat basic operation, that works.\n\n155\n00:08:45.130 --> 00:08:47.560\nLet's see what's inside of that file.\n\n156\n00:08:47.560 --> 00:08:48.980\nAnd, boom.\n\n157\n00:08:48.980 --> 00:08:51.270\nIt's binary representation of the string.\n\n158\n00:08:51.270 --> 00:08:52.280\nThat's fine.\n\n159\n00:08:52.280 --> 00:08:57.109\nBut we have a binary representation that\nwe're receiving from the socket, right.\n\n160\n00:08:57.109 --> 00:08:59.023\nWe're just reading those in, and\n\n161\n00:08:59.023 --> 00:09:01.870\nit would be nice if I could\nput these inside of here.\n\n162\n00:09:02.900 --> 00:09:07.167\nBefore we do though,\nthese PCAT files have a few requirements,\n\n163\n00:09:07.167 --> 00:09:12.789\nnamely how the data's structured and all\nthese files have what are called a header.\n\n164\n00:09:12.789 --> 00:09:15.669\nSo there's gonna be some little\nbit of hand wavy here just\n\n165\n00:09:15.669 --> 00:09:17.835\nbecause that's the file specification.\n\n166\n00:09:17.835 --> 00:09:25.868\nBut that __pycache that's just\nsomethings that are running and\n\n167\n00:09:25.868 --> 00:09:30.890\nas it runs, Python is catching those like\n\n168\n00:09:30.890 --> 00:09:35.634\na pic you compile Python files for you.\n\n169\n00:09:35.634 --> 00:09:40.090\nSo you can actually delete then it will\nre-create it every time it needs it.\n\n170\n00:09:40.090 --> 00:09:42.700\nSo I'm gonna delete it,\njust to clean things up for now and\n\n171\n00:09:42.700 --> 00:09:45.960\nI'm actually going to delete this pCat.\n\n172\n00:09:45.960 --> 00:09:48.740\nNow that header I was talking about,\nI'm gonna have to\n\n173\n00:09:48.740 --> 00:09:52.780\nwrite that immediately as soon as\nI construct this pCat file object.\n\n174\n00:09:52.780 --> 00:09:57.624\nNow that header is going to\nrequire some weirdness, okay?\n\n175\n00:09:59.245 --> 00:10:06.695\nSo let's take a look and\nif we come over here to a browser,\n\n176\n00:10:06.695 --> 00:10:11.309\nif we look for python struct like so,\n\n177\n00:10:11.309 --> 00:10:16.105\nand boom this struct module\n\n178\n00:10:16.105 --> 00:10:20.570\ninterpret bytes as packed binary data,\nnow what does that mean?\n\n179\n00:10:20.570 --> 00:10:25.120\nEssentially, you're using bit operations\nin order to reduce how much data you're\n\n180\n00:10:25.120 --> 00:10:28.350\nsaving, and\nit's based on file specifications.\n\n181\n00:10:28.350 --> 00:10:33.074\nSo let's say that something\nrequires 8 bytes, right?\n\n182\n00:10:33.074 --> 00:10:36.880\nBut you only have 3 bytes\non that most of the time.\n\n183\n00:10:36.880 --> 00:10:41.570\nYou may remove five of those bytes and\nthen only store that, but\n\n184\n00:10:41.570 --> 00:10:45.350\nknowing based on the file\nspecifications you need the full eight.\n\n185\n00:10:45.350 --> 00:10:50.367\nSo you have to unpack and\nit also depends on data types.\n\n186\n00:10:50.367 --> 00:10:57.258\nIf it's a byte type, and if we scroll\ndown here, we'll come back to these.\n\n187\n00:10:57.258 --> 00:11:02.165\nIf we come back here,\nwe have all of these C types that\n\n188\n00:11:02.165 --> 00:11:06.980\ncorrespond to Python types and\nthis is the format.\n\n189\n00:11:06.980 --> 00:11:09.360\nNow what does this format mean?\n\n190\n00:11:09.360 --> 00:11:13.136\nSo if I unpack something with\nthis format character, I,\n\n191\n00:11:13.136 --> 00:11:17.478\nI'm going to get a regular C integer,\nwhich is a Python integer.\n\n192\n00:11:17.478 --> 00:11:23.260\nAnd then, what's the size?\n\n193\n00:11:23.260 --> 00:11:23.763\nWell, it's 4 bytes.\n\n194\n00:11:23.763 --> 00:11:25.470\nFour, wait a minute, I said bytes.\n\n195\n00:11:27.190 --> 00:11:30.579\nYeah, I'm pretty sure that\ndoesn't sound right, though.\n\n196\n00:11:30.579 --> 00:11:34.110\n&gt;&gt; Bytes, it says it right there\nin the little paragraph above it.\n\n197\n00:11:34.110 --> 00:11:36.839\n&gt;&gt; Yeah, well,\nthat seems awful small to me.\n\n198\n00:11:36.839 --> 00:11:39.010\n&gt;&gt; [LAUGH]\n&gt;&gt; But you never know, you never know.\n\n199\n00:11:39.010 --> 00:11:44.114\nSo this unsigned is still the same but\nit represents a larger set\n\n200\n00:11:44.114 --> 00:11:49.025\nof numbers because I no longer\ncan have negative, right, so\n\n201\n00:11:49.025 --> 00:11:54.439\nlet's say I go from negative 128 or\nnegative 128 to 127.\n\n202\n00:11:54.439 --> 00:11:58.630\nI just essentially moved that\nfrom 0 to 255 for an unsigned.\n\n203\n00:11:58.630 --> 00:12:04.250\nSo using these format characters I can\npull apart this binary information.\n\n204\n00:12:04.250 --> 00:12:10.700\nOr I can put binary information together\nand represent it by these format types.\n\n205\n00:12:10.700 --> 00:12:15.030\nI can say I want this to be represented\nas a long or an unsigned long.\n\n206\n00:12:15.030 --> 00:12:18.288\nWell, I think this is funny,\na long long or\n\n207\n00:12:18.288 --> 00:12:22.107\nassign char, unassign char,\nso on and so forth.\n\n208\n00:12:22.107 --> 00:12:26.190\nNow if I go up here,\nthere's a byte order size and alignment.\n\n209\n00:12:27.380 --> 00:12:34.630\nThis at character byte order, it's native,\nsize native, alignment, native.\n\n210\n00:12:34.630 --> 00:12:39.293\nSo alternatively, the first character of\nthe format string can indicate byte order.\n\n211\n00:12:39.293 --> 00:12:41.087\nAnd what is byte order?\n\n212\n00:12:41.087 --> 00:12:47.480\nNative byte order is big endian or little\nendian, depending on the host system.\n\n213\n00:12:47.480 --> 00:12:50.790\nThis add character says,\nwhatever your host system's using,\n\n214\n00:12:51.890 --> 00:12:55.090\nuse that in order to arrange it.\n\n215\n00:12:55.090 --> 00:13:02.300\nHowever, the equal is negative byte order\nstandard size, and then no alignment.\n\n216\n00:13:02.300 --> 00:13:04.132\nSo these are just for different options.\n\n217\n00:13:04.132 --> 00:13:08.427\nThen you can kind of drive down and\nsay, I want it to be little endian or\n\n218\n00:13:08.427 --> 00:13:10.900\nbig endian in arrangement.\n\n219\n00:13:10.900 --> 00:13:16.060\nThe exclamation point is network\nthat might be applicable.\n\n220\n00:13:16.060 --> 00:13:20.780\nSo network, that seems like something\nthat we would use, however it's funny,\n\n221\n00:13:20.780 --> 00:13:23.100\nthis comment kind of cracks me up.\n\n222\n00:13:23.100 --> 00:13:27.490\nThe format exclamation is available to\nthose poor souls who claim they can't\n\n223\n00:13:27.490 --> 00:13:30.537\nremember why their network by order\nis big endian or little endian.\n\n224\n00:13:30.537 --> 00:13:32.686\n&gt;&gt; [LAUGH]\n&gt;&gt; Well, I'm gonna go with it just because\n\n225\n00:13:32.686 --> 00:13:33.805\nI think it's funny.\n\n226\n00:13:33.805 --> 00:13:35.120\n&gt;&gt; It is funny.\n\n227\n00:13:35.120 --> 00:13:36.630\n&gt;&gt; So if you come up here,\n\n228\n00:13:36.630 --> 00:13:41.720\nthere's a few methods in the struct\nmodule that are available to us.\n\n229\n00:13:41.720 --> 00:13:44.080\nUnpack, and you got a format and a buffer.\n\n230\n00:13:44.080 --> 00:13:46.000\nNow a buffer are those byte strings.\n\n231\n00:13:46.000 --> 00:13:48.240\nThe things that are prepended by a B.\n\n232\n00:13:48.240 --> 00:13:53.688\nOr you have a PEC, where returning\nbytes objects containing the values.\n\n233\n00:13:53.688 --> 00:13:58.519\nNow PAC is going to take a bunch of kind\nof Python values and produce, essentially,\n\n234\n00:13:58.519 --> 00:14:02.798\nthe bite string representation,\nwhat we're seeing, so it's a back and\n\n235\n00:14:02.798 --> 00:14:04.350\nforth conversion.\n\n236\n00:14:04.350 --> 00:14:09.270\nFor PCAP, we have to pack things and\nwrite it to the file.\n\n237\n00:14:09.270 --> 00:14:11.462\nFor a particular like Wireshark or\n\n238\n00:14:11.462 --> 00:14:14.718\nPCP Download to know that\nthis is a valid PCAT file.\n\n239\n00:14:14.718 --> 00:14:20.610\nThat's based on file specifications but\nwe'll see how this plays out.\n\n240\n00:14:20.610 --> 00:14:25.130\nIn addition to some of these\nare easier to represent HEX\n\n241\n00:14:25.130 --> 00:14:30.140\njust because that's based on\nfile specifications as well.\n\n242\n00:14:30.140 --> 00:14:35.470\nAnd then there's just kind of some\nnumbers that will play out here for us.\n\n243\n00:14:35.470 --> 00:14:40.550\nSo let's go ahead and do just that.\n\n244\n00:14:40.550 --> 00:14:47.600\nSo now, if we can actually clear the\nscreen, I'm gonna hop back into capture.\n\n245\n00:14:47.600 --> 00:14:50.002\nAnd right here, so self.fp.\n\n246\n00:14:50.002 --> 00:14:54.359\nI need to immediately write that header,\n\n247\n00:14:54.359 --> 00:14:59.346\nbecause otherwise it's\nnot a valid PCAP file.\n\n248\n00:14:59.346 --> 00:15:04.170\nAnd in order to do that,\nI need the struct module.\n\n249\n00:15:04.170 --> 00:15:12.096\nSo struct, but I'm just going to get\nthe pack from struct, import pack.\n\n250\n00:15:12.096 --> 00:15:14.836\nAnd then well, let's do this.\n\n251\n00:15:14.836 --> 00:15:18.790\nLet's say header equals pack,\nand what are we packing?\n\n252\n00:15:18.790 --> 00:15:24.042\nWell, it's going to be this exclamation,\nH, H, lowercase i, i, i, i.\n\n253\n00:15:24.042 --> 00:15:28.480\nNow we're gonna come back and\nlook at that In just a moment.\n\n254\n00:15:28.480 --> 00:15:34.216\nSo this is our format string, and now,\nwe need to give it the series of values.\n\n255\n00:15:34.216 --> 00:15:37.940\nNotice, I have 1, 2, 3,\n4, 5, 6, 7 characters.\n\n256\n00:15:39.310 --> 00:15:43.085\nI wonder if that's going,\nlet me make sure I have all that.\n\n257\n00:15:43.085 --> 00:15:43.913\nYep, yeah, okay.\n\n258\n00:15:43.913 --> 00:15:45.206\nI was like, hold on, hold on!\n\n259\n00:15:45.206 --> 00:15:48.440\nSo I have seven characters.\n\n260\n00:15:48.440 --> 00:15:52.502\nAnd see if there is a correspondents\nbetween that or maybe is it,\n\n261\n00:15:52.502 --> 00:15:54.695\nyeah there is some overlap there.\n\n262\n00:15:54.695 --> 00:15:58.174\nBefore I go on though,\nI do wanna come back and\n\n263\n00:15:58.174 --> 00:16:01.563\nremind that uppercase\nI is an unsigned int,\n\n264\n00:16:01.563 --> 00:16:07.625\nuppercase H is an unsigned short And\nlowercase i is a standard integer, okay?\n\n265\n00:16:07.625 --> 00:16:11.937\nSo by doing this, I can say,\nI want to write the 0x,\n\n266\n00:16:11.937 --> 00:16:17.660\nis the hexidecimal representation\nof this particular number.\n\n267\n00:16:17.660 --> 00:16:23.727\nYou could figure this out in decimal,\nit would still work.\n\n268\n00:16:23.727 --> 00:16:28.034\nHonestly I don't find it as easy to read,\nwhich is kind of weird to say cuz it's\n\n269\n00:16:28.034 --> 00:16:32.631\njust kind of a random number more or less,\nnot a truly random number it has meaning.\n\n270\n00:16:32.631 --> 00:16:39.240\nBut you'll see what I mean the hex is A1,\nB2, C3, D4.\n\n271\n00:16:40.660 --> 00:16:45.520\nThe decimal representation is 2173852,\nsomething like that, and\n\n272\n00:16:45.520 --> 00:16:49.720\nI'm like, okay I can remember this,\nI can't remember the other number.\n\n273\n00:16:49.720 --> 00:16:56.020\nAnd then we need to also pass in 4,\n\n274\n00:16:56.020 --> 00:17:01.970\nexcuse me, 0, 0, and then 65535, probably\n\n275\n00:17:01.970 --> 00:17:06.210\nhave a pretty good idea where that\nnumber comes from, and then a 1, okay?\n\n276\n00:17:06.210 --> 00:17:10.879\nSo that's a pack, and\nthen let's just print the header,\n\n277\n00:17:10.879 --> 00:17:14.800\nbut I'm also going to write said header,\nokay?\n\n278\n00:17:14.800 --> 00:17:21.162\nSo let's do a quick look here, python3,\n\n279\n00:17:21.162 --> 00:17:27.187\nand then from capture import PCAPfile.\n\n280\n00:17:27.187 --> 00:17:31.173\nSo, PCAP, maybe, PCAPfile,\n\n281\n00:17:31.173 --> 00:17:37.790\nreally need to get auto\ncomplete working on these.\n\n282\n00:17:37.790 --> 00:17:43.450\nSo test.pcap cuz I already got\nrid of that file and then, boom.\n\n283\n00:17:43.450 --> 00:17:48.550\nNotice that printout,\nI now have a representation of that data\n\n284\n00:17:48.550 --> 00:17:51.430\nas essentially a buffer, okay?\n\n285\n00:17:51.430 --> 00:17:55.560\nSo that's good to know,\nand that header's written.\n\n286\n00:17:55.560 --> 00:18:01.129\nSo if we look at, you know,\nA1, B2, C3, D4, awesome.\n\n287\n00:18:01.129 --> 00:18:05.865\nIf we look at test.pcap,\nI can't really read it, okay?\n\n288\n00:18:05.865 --> 00:18:06.510\n&gt;&gt; It's a bit of gibberish.\n\n289\n00:18:06.510 --> 00:18:12.610\n&gt;&gt; Yeah, it is and that's because this\nbecomes the representation underneath,\n\n290\n00:18:12.610 --> 00:18:13.660\nbased on these characters.\n\n291\n00:18:13.660 --> 00:18:18.820\nSo slash x, you can kinda read it, you\ncan see that it looks like these packets.\n\n292\n00:18:18.820 --> 00:18:23.170\nBut then when it's saved to the file,\nthe file representation typically presents\n\n293\n00:18:23.170 --> 00:18:26.570\nwith these weird characters\nthat are encoded.\n\n294\n00:18:26.570 --> 00:18:28.720\n&gt;&gt; Yeah, Justin,\nis that going to cause us a problem?\n\n295\n00:18:28.720 --> 00:18:32.855\nIf we're outputting files and we wanna\nread them, are we gonna read them with\n\n296\n00:18:32.855 --> 00:18:36.395\nsomething that can actually read this or\nare we gonna have to reformat this?\n\n297\n00:18:36.395 --> 00:18:38.375\n&gt;&gt; So you would definitely, at this level,\n\n298\n00:18:38.375 --> 00:18:44.235\nwe're going to need to read these in\na program that consumes PCAP files.\n\n299\n00:18:44.235 --> 00:18:47.185\nSo this is our first foray.\n\n300\n00:18:47.185 --> 00:18:49.075\nI'm not saying that's the best way,\n\n301\n00:18:49.075 --> 00:18:53.290\nit might be easier to have kinda\nplain text readout and you go, okay.\n\n302\n00:18:54.400 --> 00:18:58.850\nThe bright side of this is, this is kind\nof a very small format where I can store\n\n303\n00:18:58.850 --> 00:19:00.870\na lot of information very quickly.\n\n304\n00:19:02.470 --> 00:19:04.330\nWe just can't read it, right?\n\n305\n00:19:04.330 --> 00:19:10.180\nYou're like yeah,\nAOY bunch of at symbols, who knows.\n\n306\n00:19:10.180 --> 00:19:12.310\nSo assuming that I've\ndone all that correctly-\n\n307\n00:19:12.310 --> 00:19:14.046\n&gt;&gt; Email addresses from the future\n\n308\n00:19:14.046 --> 00:19:15.920\n[LAUGH], at at at at at.\n\n309\n00:19:15.920 --> 00:19:19.504\n&gt;&gt; That's the valid format and\nit's really hard to validate,\n\n310\n00:19:19.504 --> 00:19:21.980\nit's really hard to validate.\n\n311\n00:19:21.980 --> 00:19:25.979\nBut, hopefully if I've done everything\ncorrectly, we should be able\n\n312\n00:19:25.979 --> 00:19:29.723\nto read these in Wireshark,\ntcpdump, something of that nature.\n\n313\n00:19:29.723 --> 00:19:34.000\nNow, we're not quit finished\nwith that PCAP file.\n\n314\n00:19:35.370 --> 00:19:39.200\nSo, I'm gonna get rid of this print header\nbecause, that would be kind of annoying.\n\n315\n00:19:39.200 --> 00:19:44.900\nNow this write, we have to put this in\na particular order with a time stamp also.\n\n316\n00:19:46.810 --> 00:19:50.545\nSo, what I need is the time module.\n\n317\n00:19:50.545 --> 00:19:53.590\nSo import TIME, and\n\n318\n00:19:53.590 --> 00:19:58.786\nI'm first going to get seconds and\n\n319\n00:19:58.786 --> 00:20:03.815\nmicroseconds, microseconds?\n\n320\n00:20:03.815 --> 00:20:06.966\nLet's just say m seconds,\nI'm very non committal on this.\n\n321\n00:20:06.966 --> 00:20:08.360\n&gt;&gt; [LAUGH]\n&gt;&gt; And\n\n322\n00:20:08.360 --> 00:20:12.970\nwhat I'm gonna do is I'm going to\nstringify the time capture, split\n\n323\n00:20:12.970 --> 00:20:16.880\nit on the period because I'm gonna get\nseconds and then fractions of a second.\n\n324\n00:20:16.880 --> 00:20:21.100\nAnd I'm gonna split it and change it back\nto integers so I have two separate parts,\n\n325\n00:20:21.100 --> 00:20:24.330\nso I can actually write\nthose as integer values.\n\n326\n00:20:24.330 --> 00:20:31.532\nSo I'm gonna say int for,\nlet's say part, int for part in parts.\n\n327\n00:20:31.532 --> 00:20:33.399\nAnd what is that part?\n\n328\n00:20:33.399 --> 00:20:38.734\nThat would be the stringify\nversion of time.time,\n\n329\n00:20:38.734 --> 00:20:42.990\nand then split it on a period, okay?\n\n330\n00:20:42.990 --> 00:20:46.710\nSo that'll give me seconds and\nmicroseconds as integer representations\n\n331\n00:20:48.180 --> 00:20:53.300\nand then I need to know how long the data\nthat I'm writing to the file is for\n\n332\n00:20:53.300 --> 00:20:55.180\nthis particular chunk.\n\n333\n00:20:55.180 --> 00:20:58.390\nSo I'm gonna say length =\nthe length of the data.\n\n334\n00:20:58.390 --> 00:21:02.920\nNow this data is going to come\nin as a binary string, so\n\n335\n00:21:02.920 --> 00:21:05.870\nI know I can get a length\nproperty of that.\n\n336\n00:21:05.870 --> 00:21:12.260\nAnd then finally I need to\ncreate let's just call it,\n\n337\n00:21:12.260 --> 00:21:19.570\nI better not call it a buffer, let's just\nsay the message that I am going to write.\n\n338\n00:21:19.570 --> 00:21:27.350\nAnd that's also going to be also use pack\nand this pack is going to be i i i i.\n\n339\n00:21:27.350 --> 00:21:30.960\nThat is a standard integer,\nexcuse me, unsigned integer.\n\n340\n00:21:32.400 --> 00:21:33.460\nAnd what is it going to be?\n\n341\n00:21:33.460 --> 00:21:37.830\nIt's going to be seconds, mseconds, and\n\n342\n00:21:37.830 --> 00:21:41.420\nthen the length, and\nthen the length again.\n\n343\n00:21:41.420 --> 00:21:44.340\n&gt;&gt; Make sure that's on seconds, mseconds.\n\n344\n00:21:44.340 --> 00:21:47.520\nThat's why we program as pairs,\nright [LAUGH]?\n\n345\n00:21:47.520 --> 00:21:50.120\n&gt;&gt; That's exactly right,\nthat's exactly right.\n\n346\n00:21:50.120 --> 00:21:53.900\nSo, there's our message, and\nthen we're going to write that message and\n\n347\n00:21:53.900 --> 00:21:56.520\nessentially this is saying,\nhey there's gonna be something,\n\n348\n00:21:56.520 --> 00:22:01.010\nthere's some data right after this,\nand this is a descriptor of that data.\n\n349\n00:22:01.010 --> 00:22:07.710\nSo I'm gonna say, self.fp.write and\nmessage like so, okay?\n\n350\n00:22:07.710 --> 00:22:10.919\nSo, write the message and then write\nthe data and they kind of come in chunks.\n\n351\n00:22:12.260 --> 00:22:16.194\nAnd then close, believe it or not,\n\n352\n00:22:16.194 --> 00:22:21.059\nalready works, so we're good to go there.\n\n353\n00:22:21.059 --> 00:22:24.857\nSo there we go, there is our PCAP file.\n\n354\n00:22:24.857 --> 00:22:28.467\nLet's see if we can if we can wire it up\nin our sniffer and get some output maybe,\n\n355\n00:22:28.467 --> 00:22:30.210\nI think I have Wireshark on here.\n\n356\n00:22:30.210 --> 00:22:32.530\nLet's see if we can open\nup that PCAP file and\n\n357\n00:22:32.530 --> 00:22:35.264\nif we can't, well we'll blame\nit on someone who is not here.\n\n358\n00:22:35.264 --> 00:22:41.082\n&gt;&gt; [LAUGH]\n&gt;&gt; So let's go ahead I'm back in here and\n\n359\n00:22:41.082 --> 00:22:46.729\nfrom capture I'm going import PCAPfile and\n\n360\n00:22:46.729 --> 00:22:52.541\nI am going to construct\nsaid file right here.\n\n361\n00:22:55.303 --> 00:22:57.586\nLet's just say packets.pcap.\n\n362\n00:22:59.954 --> 00:23:06.444\nAnd then every time I grab this data,\ninstead of printing it out,\n\n363\n00:23:06.444 --> 00:23:11.165\nlet's just say pcap.write, like so, okay?\n\n364\n00:23:11.165 --> 00:23:16.628\nAnd then well,\nI should be able to say pcap.close\n\n365\n00:23:16.628 --> 00:23:20.669\nafter all the runnings done, okay?\n\n366\n00:23:20.669 --> 00:23:26.047\nSo if we elevate so we can actually\n\n367\n00:23:26.047 --> 00:23:31.050\nrun this, python3 and boom.\n\n368\n00:23:32.070 --> 00:23:34.400\nPCAP, you know what I did?\n\n369\n00:23:34.400 --> 00:23:35.232\nI am silly.\n\n370\n00:23:35.232 --> 00:23:40.088\n&gt;&gt; [LAUGH]\n&gt;&gt; I\n\n371\n00:23:40.088 --> 00:23:43.110\nalso went in the wrong file on that one,\nthere we go.\n\n372\n00:23:43.110 --> 00:23:47.799\nThis is PCAPfile, it is a PCAP file.\n\n373\n00:23:47.799 --> 00:23:51.990\nAnd now, we should be able to run this and\nlet me just go refresh.\n\n374\n00:23:53.060 --> 00:23:54.370\nBoom, there we go.\n\n375\n00:23:54.370 --> 00:23:58.585\nAnd if we now kill it,\n\n376\n00:23:58.585 --> 00:24:05.153\nls there's our packets.pcap.\n\n377\n00:24:05.153 --> 00:24:06.941\nWe should be able to look at the size,\n\n378\n00:24:06.941 --> 00:24:09.381\nit does look like it's got\nsome packets in there.\n\n379\n00:24:09.381 --> 00:24:11.070\n&gt;&gt; Yeah, a couple.\n\n380\n00:24:11.070 --> 00:24:16.130\n&gt;&gt; So, I'm going to exit, and\njust to make sure things aren't,\n\n381\n00:24:16.130 --> 00:24:21.705\nand should be able to go, There we go.\n\n382\n00:24:24.201 --> 00:24:27.410\nChanged ownership,\njust to make sure things are nice there.\n\n383\n00:24:27.410 --> 00:24:28.620\nSo let's go Wireshark.\n\n384\n00:24:30.910 --> 00:24:39.340\nOpen this up and see if I can open this\nvery file, so there we go, Open, Open.\n\n385\n00:24:39.340 --> 00:24:43.560\nAnd there all of our packets written\nto a file format that I can now open in\n\n386\n00:24:43.560 --> 00:24:46.360\nWireshark or\none of those particular things.\n\n387\n00:24:46.360 --> 00:24:52.720\nAnd boom, there we go, there is our nice\nlittle pieces of information that we want.\n\n388\n00:24:52.720 --> 00:24:55.610\nVery, very handy because now I can\nsave this to a file, maybe just to\n\n389\n00:24:55.610 --> 00:25:00.150\nextract those from time to time or\nif I wanted to get really crazy about it,\n\n390\n00:25:00.150 --> 00:25:03.900\nmaybe I have something that bundles those\nup, ships them to me every now and again.\n\n391\n00:25:03.900 --> 00:25:08.425\nFor me if I was doing it, that would\njust make me really paranoid about\n\n392\n00:25:08.425 --> 00:25:11.885\nsomeone going I know where it's going,\nlet's go find out where it's going.\n\n393\n00:25:11.885 --> 00:25:15.193\n&gt;&gt; [LAUGH] It's going to some random\nserver out there on the interwebs\n\n394\n00:25:15.193 --> 00:25:16.826\n&gt;&gt; [LAUGH] Yeah, exactly.\n\n395\n00:25:16.826 --> 00:25:20.951\nBut boom, we have a PCAP file that we\ncan now save packets to, open them up,\n\n396\n00:25:20.951 --> 00:25:23.780\nanalyze them with various\npacket analysis tools.\n\n397\n00:25:23.780 --> 00:25:25.200\n&gt;&gt; That's very, very cool stuff.\n\n398\n00:25:25.200 --> 00:25:29.960\nNow like you said, you got the all\nthe elements of actual sniffing, right?\n\n399\n00:25:29.960 --> 00:25:31.300\nWe have the sniffer involved,\n\n400\n00:25:31.300 --> 00:25:36.150\nit's capturing data, putting it into a\nnice file format that we can then extract\n\n401\n00:25:36.150 --> 00:25:41.070\nusing another standardized tool that can\nread PCAP files and then peruse that data.\n\n402\n00:25:41.070 --> 00:25:45.770\nAnd if anything's being, well pushed\nacross in plain text on an FTP,\n\n403\n00:25:45.770 --> 00:25:48.940\nTelnet type sessions and\nthere's a username and password involved,\n\n404\n00:25:48.940 --> 00:25:50.820\nwell guess what we just got?\n\n405\n00:25:50.820 --> 00:25:54.720\nAnd odds are pretty high that if\nthey're using that username and\n\n406\n00:25:54.720 --> 00:25:58.200\npassword on those systems,\nthey're using them on other systems or\n\n407\n00:25:58.200 --> 00:26:01.550\non other things that require username and\npassword that they have access to.\n\n408\n00:26:01.550 --> 00:26:05.570\nSo now we can start, again, kind of trying\nto guess at the fence there for us.\n\n409\n00:26:05.570 --> 00:26:09.227\nJustin, very cool stuff man, we appreciate\nyour time and effort that you put into\n\n410\n00:26:09.227 --> 00:26:12.407\nthese things things, so we can learn,\nand expand our knowledge base,\n\n411\n00:26:12.407 --> 00:26:15.491\nwhen it comes to both Python, and\nsecurity, it's very good stuff.\n\n412\n00:26:15.491 --> 00:26:17.832\nWe do thank you good folks out there,\nfor watching but guess what?\n\n413\n00:26:17.832 --> 00:26:20.930\nI'm looking at the clock, and\nit has run out of time for this episode.\n\n414\n00:26:20.930 --> 00:26:23.960\nSigning off for DevProTv,\nI've been your host Daniel Lowrie.\n\n415\n00:26:23.960 --> 00:26:24.760\n&gt;&gt; And I'm Justin Dennison.\n\n416\n00:26:24.760 --> 00:26:27.417\n&gt;&gt; And we'll see you next time.\n\n417\n00:26:27.417 --> 00:26:31.897\n[SOUND]\n\n",
          "vimeoId": "228971157"
        },
        {
          "description": "In this episode, Daniel and Justin build a new project that connects with their sniffer program to unpack the TCP packet and extract the Ethernet Frames. They will then take that extracted Frame, grab the MAC address, and print it to the screen in real time.",
          "length": "1381",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-3-ethernet_frames_from_raw_packets-080817-PGM.00_24_36_12.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-3-ethernet_frames_from_raw_packets-080817-PGM.00_24_36_12.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-3-ethernet_frames_from_raw_packets-080817-PGM.00_24_36_12.Still001-sm.jpg",
          "title": "Ethernet Frames from RAW Packets",
          "transcript": "WEBVTT\n\n1\n00:00:00.005 --> 00:00:10.005\n[MUSIC]\n\n2\n00:00:12.530 --> 00:00:14.452\nAll right, greetings everyone and\n\n3\n00:00:14.452 --> 00:00:17.599\nwelcome back to another\nexciting episode of DEVPRO.TV.\n\n4\n00:00:17.599 --> 00:00:20.313\nI'm your host Daniel Lowrie and\nin today's episode,\n\n5\n00:00:20.313 --> 00:00:22.673\nwe're gonna have a lot\nmore fun with packets and\n\n6\n00:00:22.673 --> 00:00:26.214\nwhat-not because we're continuing\non with our Python for security.\n\n7\n00:00:26.214 --> 00:00:29.030\nAnd we've kinda like,\nbeen kind of, bouncing,\n\n8\n00:00:29.030 --> 00:00:34.010\nleapfrogging from one thing to the next\nhere in this portion of those proceedings.\n\n9\n00:00:34.010 --> 00:00:37.598\nJoining us back in the studio to continue\nour talk on that subject, our good friend,\n\n10\n00:00:37.598 --> 00:00:38.650\nMr. Justin Dennison.\n\n11\n00:00:38.650 --> 00:00:40.160\nJustin, welcome back sir.\n\n12\n00:00:40.160 --> 00:00:40.756\nHow's it going today?\n\n13\n00:00:40.756 --> 00:00:42.510\n&gt;&gt; It is going fantastic.\n\n14\n00:00:42.510 --> 00:00:47.116\nIt is starting to warm up outside,\nbut that is how it rolls, right?\n\n15\n00:00:47.116 --> 00:00:50.650\nYeah and\nin the last couple of episodes we've been\n\n16\n00:00:50.650 --> 00:00:52.836\nplaying around with packet sniffing,\nright?\n\n17\n00:00:52.836 --> 00:00:56.190\nJust getting a raw sniffer and\nactually in the last episode,\n\n18\n00:00:56.190 --> 00:00:59.950\nwe saw that we can say that to\na pcap file for analysis later.\n\n19\n00:00:59.950 --> 00:01:00.680\nThat was pretty cool.\n\n20\n00:01:00.680 --> 00:01:01.968\nI'm gonna be honest with you, Daniel.\n\n21\n00:01:01.968 --> 00:01:04.687\nThat was a moment of celebration\nwhen I finally got that to work.\n\n22\n00:01:04.687 --> 00:01:07.634\n&gt;&gt; [LAUGH]\n&gt;&gt; It was like go out and buy streamers,\n\n23\n00:01:07.634 --> 00:01:10.195\nand like silly string, and was like, whoo!\n\n24\n00:01:10.195 --> 00:01:11.132\n&gt;&gt; A full billboard ad or a spot on TV.\n\n25\n00:01:11.132 --> 00:01:14.600\n[LAUGH]\n&gt;&gt; Yeah like why is this commercial with\n\n26\n00:01:14.600 --> 00:01:18.732\nJustin running across like he\nwas successful in something.\n\n27\n00:01:18.732 --> 00:01:20.510\n&gt;&gt; Your girlfriend'is like,\n\n28\n00:01:20.510 --> 00:01:24.476\nwhat is this loan for like $30,000?\"\n&gt;&gt; [LAUGH]\n\n29\n00:01:24.476 --> 00:01:25.343\n&gt;&gt; But yeah actually,\n\n30\n00:01:25.343 --> 00:01:26.545\nthat was very successful.\n\n31\n00:01:26.545 --> 00:01:30.122\n&gt;&gt; And now we're getting to see\nanother part of the success,\n\n32\n00:01:30.122 --> 00:01:31.876\nparsing those raw packets.\n\n33\n00:01:31.876 --> 00:01:33.030\nWell, I call it parsing.\n\n34\n00:01:33.030 --> 00:01:34.770\nIt's not necessarily\nlike picking it apart,\n\n35\n00:01:34.770 --> 00:01:38.930\nbut essentially unpacking the binary\nportion of the raw packet and\n\n36\n00:01:38.930 --> 00:01:41.710\nnow we're gonna start stripping\noff things so we can read it.\n\n37\n00:01:41.710 --> 00:01:42.540\n&gt;&gt; Particularly,\n\n38\n00:01:42.540 --> 00:01:47.150\nwe're going to focus on the ethernet frame\nportion of the packet in this episode.\n\n39\n00:01:47.150 --> 00:01:51.377\nSo that's our ultimate goal is just grab\nthat off because once we get that, and\n\n40\n00:01:51.377 --> 00:01:54.920\nnow we can start down the road to\na couple of other pieces, right?\n\n41\n00:01:54.920 --> 00:02:00.520\nIP header, the TCP segment, if it exists,\nor maybe it's a UDP packet.\n\n42\n00:02:00.520 --> 00:02:05.470\nSo now if we can start pulling these\npieces apart, that is very, very handy.\n\n43\n00:02:05.470 --> 00:02:09.230\nBut the first step in that is\nthe actual Ethernet frame.\n\n44\n00:02:09.230 --> 00:02:11.350\nSo, no better time than\nnow to get started.\n\n45\n00:02:11.350 --> 00:02:13.638\nSo let's go ahead and\ntake a look at my screen here and\n\n46\n00:02:13.638 --> 00:02:15.210\nlet's just do a quick review here.\n\n47\n00:02:15.210 --> 00:02:16.400\nI got a of couple files.\n\n48\n00:02:16.400 --> 00:02:18.270\nThis is from a previous episode.\n\n49\n00:02:18.270 --> 00:02:21.389\nMost of our work, actual sniffing part,\nis always gonna be in sniffer.py.\n\n50\n00:02:21.389 --> 00:02:25.656\nBut I'm gonna keep pulling these apart\njust for organization, so I can keep\n\n51\n00:02:25.656 --> 00:02:30.540\nsniffer very, very thin, because it's\nessentially like our main runtime, right?\n\n52\n00:02:30.540 --> 00:02:34.990\nThat's, all it does is start up the\nsniffing and then does its thing, right?\n\n53\n00:02:36.150 --> 00:02:40.167\nSo just in the meantime,\nI'm gonna clear out of here these just to,\n\n54\n00:02:40.167 --> 00:02:44.210\nI don't know, I don't know,\nmy mind's going, you should delete that.\n\n55\n00:02:44.210 --> 00:02:47.512\nSo I'm going to do said thing and\nthere we go.\n\n56\n00:02:47.512 --> 00:02:54.670\nThen will always come back, so I don't\nknow why I bother doing that, but I do.\n\n57\n00:02:54.670 --> 00:02:57.240\nSo I'm gonna create\na file called nettypes.\n\n58\n00:02:57.240 --> 00:03:02.040\nYou can't use types in Python three\nbecause that's actually a built in module.\n\n59\n00:03:02.040 --> 00:03:07.930\nSo I'm just saying net types, so it's\nthe network type of things in this file.\n\n60\n00:03:07.930 --> 00:03:12.350\nSo all of my classes that define, well\nwhat our upcoming episodes are going to\n\n61\n00:03:12.350 --> 00:03:15.680\nhandle, particularly in this episode, the\nEthernet frame, are gonna be contained in\n\n62\n00:03:15.680 --> 00:03:19.310\nthis file, and I'm just gonna import them\ninto the sniffer and use said thing.\n\n63\n00:03:19.310 --> 00:03:21.630\nSo there's our nettypes.\n\n64\n00:03:21.630 --> 00:03:24.620\nAnd well, what do we need to do?\n\n65\n00:03:24.620 --> 00:03:31.950\nWell, I'm gonna to create\nthis Ethernet frame class.\n\n66\n00:03:31.950 --> 00:03:34.130\nAnd these are gonna create objects but\n\n67\n00:03:34.130 --> 00:03:37.840\nwhat's interesting is this init is\nactually gonna do some of the parsing.\n\n68\n00:03:37.840 --> 00:03:43.050\nSo I'm gonna grab this in and\nthis is going to be constructed with data.\n\n69\n00:03:43.050 --> 00:03:44.940\nNow where's this data gonna come from?\n\n70\n00:03:44.940 --> 00:03:47.267\nThis data is going to come from,\n\n71\n00:03:47.267 --> 00:03:51.754\nwell the actual raw data from\nthe packet that we're sending.\n\n72\n00:03:51.754 --> 00:03:56.190\nSo we're gonna take that raw data\nthat we're getting in sniffer.py and\n\n73\n00:03:56.190 --> 00:03:58.516\nconstruct an object, the parsing and\n\n74\n00:03:58.516 --> 00:04:02.660\nmoving things into individual\npieces is going happen here.\n\n75\n00:04:02.660 --> 00:04:04.801\nBut also we're going to\nkeep the remaining portion.\n\n76\n00:04:04.801 --> 00:04:08.962\nSo essentially what's going to happen is\nI'm gonna grab a certain section of it,\n\n77\n00:04:08.962 --> 00:04:11.630\nand then keep the remaining section for\nfuture use.\n\n78\n00:04:11.630 --> 00:04:14.575\nSo I'm gonna be constructing\nthese objects and\n\n79\n00:04:14.575 --> 00:04:19.076\nessentially slicing up that packet\ninto its individual pieces as we go.\n\n80\n00:04:19.076 --> 00:04:25.110\nWhat that does mean is, these classes\ntend to be dependent on each other.\n\n81\n00:04:25.110 --> 00:04:27.960\nWhat I mean is,\nwhen I construct an object,\n\n82\n00:04:27.960 --> 00:04:32.640\nthat object is gonna have the data for\nthe next set of constructions.\n\n83\n00:04:32.640 --> 00:04:33.590\nYou'll see what I mean.\n\n84\n00:04:34.760 --> 00:04:37.660\nWell, I don't know if it'll be this\nepisode, but it will definitely be soon.\n\n85\n00:04:39.050 --> 00:04:44.717\nSo one of the first things that I'm gonna\ndo is give a length property to the class\n\n86\n00:04:44.717 --> 00:04:49.809\nand every object that I create,\nI want the length to be 14, yep 14.\n\n87\n00:04:49.809 --> 00:04:54.507\nAnd I'm gonna grab the first 14\ncharacters of essentially this data.\n\n88\n00:04:54.507 --> 00:04:59.120\nThis is a binary or\nlike a byte string or a bytes array.\n\n89\n00:04:59.120 --> 00:05:01.910\nAnd so I'm gonna grab\nthe first 14 elements there.\n\n90\n00:05:01.910 --> 00:05:06.450\nAnd what am I going to\ndo with those elements?\n\n91\n00:05:06.450 --> 00:05:11.600\nWell, first off,\nI'm going to grab some unpacked data.\n\n92\n00:05:11.600 --> 00:05:15.240\nAnd in order to unpack, if you haven't\nchecked out the previous episode,\n\n93\n00:05:15.240 --> 00:05:18.830\ndefinitely go check that out,\ncuz I talk about the struct module and\n\n94\n00:05:18.830 --> 00:05:20.920\nparticulars about the struct module.\n\n95\n00:05:20.920 --> 00:05:24.685\nWe're going to use not the pack method,\nbut the unpack method.\n\n96\n00:05:24.685 --> 00:05:27.580\nThen, well,\nI'm just gonna show you a brief overview,\n\n97\n00:05:27.580 --> 00:05:29.530\nnot quite as in depth as the last one.\n\n98\n00:05:29.530 --> 00:05:35.449\nIf I come up here to unpack, I'm gonna\ntake a format string and a buffer.\n\n99\n00:05:36.510 --> 00:05:37.570\nAccording to the format string,\n\n100\n00:05:37.570 --> 00:05:41.040\nthe result is a tuple,\neven if it contains exactly one item.\n\n101\n00:05:41.040 --> 00:05:45.020\nSo what I'm gonna get is the individual\npieces that's going to unpack them into\n\n102\n00:05:45.020 --> 00:05:49.629\nsegments based on the type that I pipe or\nuse in the format string.\n\n103\n00:05:50.990 --> 00:05:52.387\nNow what do I mean?\n\n104\n00:05:52.387 --> 00:05:57.196\nWell, if I say I have three unsigned\nints and I give it enough characters to\n\n105\n00:05:57.196 --> 00:06:01.384\nactually pull that apart,\nI will get a tuple of three elements,\n\n106\n00:06:01.384 --> 00:06:05.731\nwhere the first to unpack is the first\nelement, second to unpack is\n\n107\n00:06:05.731 --> 00:06:10.990\nthe second element, third to unpack\nis the third element, and likewise.\n\n108\n00:06:10.990 --> 00:06:14.510\nSo we're gonna grab that tuple and\njust pull these apart.\n\n109\n00:06:14.510 --> 00:06:19.240\nNow, in part of constructing\nthis Ethernet frame object,\n\n110\n00:06:19.240 --> 00:06:23.050\nI'm also going to need the socket module,\nand a little helper function.\n\n111\n00:06:23.050 --> 00:06:27.780\nSo, the helper function will be maintained\nin here temporarily, but it may be that\n\n112\n00:06:29.140 --> 00:06:33.240\nit can be extracted to a separate\nmodule at a later date.\n\n113\n00:06:33.240 --> 00:06:34.875\nSo how are we going to unpack this?\n\n114\n00:06:34.875 --> 00:06:40.902\nWell I just told you I need to\nactually get into normal mode and\n\n115\n00:06:40.902 --> 00:06:44.694\nvim so I can move about the so to speak.\n\n116\n00:06:44.694 --> 00:06:45.412\n&gt;&gt; [INAUDIBLE]\n&gt;&gt; It does, it does.\n\n117\n00:06:45.412 --> 00:06:51.373\nAnd then I'm going to grab, not only\nsocket, but struct, because, well,\n\n118\n00:06:51.373 --> 00:06:57.850\nthe socket library contains a lot of the\nnetwork conversions and things like that.\n\n119\n00:06:57.850 --> 00:06:59.044\nSo unpack data.\n\n120\n00:06:59.044 --> 00:07:00.145\nWhat am I going to unpack?\n\n121\n00:07:00.145 --> 00:07:01.941\nAnd you know what?\n\n122\n00:07:01.941 --> 00:07:07.682\nI'm just going to say from Struct.\n\n123\n00:07:07.682 --> 00:07:09.246\nJust to reduce.\n\n124\n00:07:09.246 --> 00:07:11.514\nImport.\n\n125\n00:07:11.514 --> 00:07:12.775\nUnpack.\n\n126\n00:07:12.775 --> 00:07:16.240\nJust to reduce how much I\nhave to type each time.\n\n127\n00:07:16.240 --> 00:07:18.430\nSo, I'm just gonna peel off\nthat one particular function.\n\n128\n00:07:18.430 --> 00:07:21.570\nAnd then, what is our unpack data?\n\n129\n00:07:21.570 --> 00:07:27.111\nWell, I'm gonna say, unpack,\nand it's going to be 6S6SH.\n\n130\n00:07:27.111 --> 00:07:33.360\nNow what does that mean in particular?\n\n131\n00:07:33.360 --> 00:07:38.320\nSo if I come up here and,\nwell what is an s?\n\n132\n00:07:38.320 --> 00:07:39.770\nIt is a char array.\n\n133\n00:07:39.770 --> 00:07:45.250\nSo six is I'm getting a char array\nof six characters, of six elements.\n\n134\n00:07:45.250 --> 00:07:47.600\nSo I'm gonna grab six, six.\n\n135\n00:07:47.600 --> 00:07:49.930\nAnd then H is two.\n\n136\n00:07:49.930 --> 00:07:54.092\nWell 6 plus 6 plus 2 is 14.\n\n137\n00:07:54.092 --> 00:07:57.277\nSo that's where that 14 comes into play.\n\n138\n00:07:57.277 --> 00:07:59.890\nThose have to match up or unpack fails.\n\n139\n00:07:59.890 --> 00:08:02.538\nIt goes, no, you're trying to unpack.\n\n140\n00:08:02.538 --> 00:08:08.520\nA 32-byte string when you're only\nasking to unpack 14 bytes of it.\n\n141\n00:08:08.520 --> 00:08:11.890\nSo things get a little weird or\npart of this throw an error or\n\n142\n00:08:11.890 --> 00:08:13.210\nan exception each time.\n\n143\n00:08:13.210 --> 00:08:14.840\nSo those have to match.\n\n144\n00:08:14.840 --> 00:08:18.271\nAnd we can do that by this S.\n\n145\n00:08:18.271 --> 00:08:23.550\nSix S says I want six\ncharacters in this char array.\n\n146\n00:08:23.550 --> 00:08:25.740\nSo, what are we going to unpack?\n\n147\n00:08:25.740 --> 00:08:32.717\nWell, I'm going to grab only\nthe first 14 characters.\n\n148\n00:08:32.717 --> 00:08:37.670\nSo I'm gonna go from 0\nto self.length like so.\n\n149\n00:08:37.670 --> 00:08:42.250\nSo the data that is passed in,\nI'm gonna peel off the first 14,\n\n150\n00:08:42.250 --> 00:08:44.090\nI'm gonna call them characters.\n\n151\n00:08:44.090 --> 00:08:49.140\nIt's actually the first 14\nelements from that binary string.\n\n152\n00:08:49.140 --> 00:08:50.328\nSo I'm slicing it up.\n\n153\n00:08:50.328 --> 00:08:54.636\nOkay, so the self.length, even though\nit's not defined in this under init,\n\n154\n00:08:54.636 --> 00:08:56.580\nit actually goes back to the class.\n\n155\n00:08:56.580 --> 00:09:00.699\nLength is declared as\ntop-level class attribute.\n\n156\n00:09:00.699 --> 00:09:01.780\nSo it goes I know where that is.\n\n157\n00:09:01.780 --> 00:09:04.272\nSo it just grabs, essentially, that's 14.\n\n158\n00:09:04.272 --> 00:09:07.548\nNow, the reason I do it that way\nis if I ever need to tweak this,\n\n159\n00:09:07.548 --> 00:09:09.508\nI wanna have to tweak it in one place.\n\n160\n00:09:09.508 --> 00:09:12.960\nI don't have to go change the hard-coded\nnumber 14 in a bunch of other places.\n\n161\n00:09:14.340 --> 00:09:15.973\nSo there's our unpacked data.\n\n162\n00:09:15.973 --> 00:09:18.600\nNow, when do we get out of this?\n\n163\n00:09:18.600 --> 00:09:20.286\nWell, we get a protocol.\n\n164\n00:09:20.286 --> 00:09:23.856\nI'm gonna spell protocol.\n\n165\n00:09:23.856 --> 00:09:28.641\nBut we have to do some transformations,\n\n166\n00:09:28.641 --> 00:09:33.870\nntohs, I will tell you, unpacked_data.\n\n167\n00:09:33.870 --> 00:09:36.500\nAnd I put a 3 there and not an S.\n\n168\n00:09:36.500 --> 00:09:41.360\nThere we go, ntohs, all right.\n\n169\n00:09:41.360 --> 00:09:42.594\n&gt;&gt; This is like the A2I thing.\n\n170\n00:09:42.594 --> 00:09:43.526\n&gt;&gt; Yes, yes.\n\n171\n00:09:43.526 --> 00:09:44.767\n&gt;&gt; Was it a toy?\n\n172\n00:09:44.767 --> 00:09:46.137\nNo, not a toy.\n\n173\n00:09:46.137 --> 00:09:48.188\n[LAUGH]\n&gt;&gt; Yeah, it's things and stuff.\n\n174\n00:09:48.188 --> 00:09:49.710\n&gt;&gt; [LAUGH] Yeah.\n\n175\n00:09:49.710 --> 00:09:50.250\n&gt;&gt; And again,\n\n176\n00:09:50.250 --> 00:09:53.659\nthis is one of those conversion helpers\nthat are part of the socket module.\n\n177\n00:09:53.659 --> 00:09:54.540\n&gt;&gt; Mm-hm.\n\n178\n00:09:54.540 --> 00:09:58.100\n&gt;&gt; I don't think it's a little beyond\nthe scope to really dive down and\n\n179\n00:09:58.100 --> 00:10:01.130\nsee what's happening\nbehind the scenes there.\n\n180\n00:10:01.130 --> 00:10:05.300\nWe're gonna use it, because essentially,\nthis helps with that conversion for\n\n181\n00:10:05.300 --> 00:10:06.850\nthis particular data.\n\n182\n00:10:06.850 --> 00:10:09.570\nSo ntoh, hint, that thing.\n\n183\n00:10:09.570 --> 00:10:13.990\n&gt;&gt; [LAUGH]\n&gt;&gt; That will give us our protocol.\n\n184\n00:10:13.990 --> 00:10:20.020\nAnd then, we should be able\nto get our destination and\n\n185\n00:10:20.020 --> 00:10:25.112\nyou'll see what destinations are shortly.\n\n186\n00:10:25.112 --> 00:10:29.860\nAnd our destination-\n&gt;&gt; Yeah, and on the end of destination-\n\n187\n00:10:29.860 --> 00:10:31.153\n&gt;&gt; Destination, yes.\n\n188\n00:10:31.153 --> 00:10:36.400\nAnd wait for it, our destination is\nunpacked, now wait a minute, data.\n\n189\n00:10:37.670 --> 00:10:40.374\nHere we go, I got it, I got it.\n\n190\n00:10:40.374 --> 00:10:41.014\n&gt;&gt; [LAUGH] You got this.\n\n191\n00:10:41.014 --> 00:10:44.708\n&gt;&gt; I got it,\nwe're gonna grab just the raw data.\n\n192\n00:10:44.708 --> 00:10:46.671\nAnd why is that, you'll see it soon.\n\n193\n00:10:46.671 --> 00:10:50.465\nAnd then self.source = data, and\n\n194\n00:10:50.465 --> 00:10:55.910\nI accidentally made this 12,\nthis should be 6.\n\n195\n00:10:59.179 --> 00:11:00.377\nThis should be from 6 to 12.\n\n196\n00:11:00.377 --> 00:11:01.465\nThere we go.\n\n197\n00:11:01.465 --> 00:11:02.834\nWe got it now.\n\n198\n00:11:02.834 --> 00:11:05.888\n&gt;&gt; Is that a Chicago time?\n\n199\n00:11:05.888 --> 00:11:06.995\n[LAUGH]\n&gt;&gt; Yeah, it is.\n\n200\n00:11:06.995 --> 00:11:08.780\n26th, I don't know.\n\n201\n00:11:08.780 --> 00:11:09.575\n&gt;&gt; [LAUGH]\n&gt;&gt; Chicago,\n\n202\n00:11:09.575 --> 00:11:12.170\nI do like Chicago from time to times.\n\n203\n00:11:12.170 --> 00:11:16.512\nAnd then let's just call this, I wanna\ncall it data, cuz it makes sense in my\n\n204\n00:11:16.512 --> 00:11:21.830\nmind, but I'm gonna say the leftover\ndata just to be very explicit.\n\n205\n00:11:23.920 --> 00:11:29.560\nSo that's going to be data of\nself.length all the way to the end.\n\n206\n00:11:29.560 --> 00:11:32.723\nSo I'm gonna grab the first 14 characters,\nand\n\n207\n00:11:32.723 --> 00:11:37.632\nthen store what's remaining as leftover\ndata inside of this object, okay?\n\n208\n00:11:37.632 --> 00:11:41.660\nNow, there's a lot going on there,\na lot going on.\n\n209\n00:11:41.660 --> 00:11:46.130\nLet's just create one and\nprint it out then and see what happens.\n\n210\n00:11:46.130 --> 00:11:47.082\n&gt;&gt; Before we get too big for our braces.\n\n211\n00:11:47.082 --> 00:11:52.022\n&gt;&gt; Exactly, so what I'm gonna do is\nI'm gonna use some kinda special.\n\n212\n00:11:52.022 --> 00:11:57.704\nWell, there's a property inside of\nPython objects called the __dict__,\n\n213\n00:11:57.704 --> 00:12:01.625\nwhich where all of this\ninformation is kind of stored.\n\n214\n00:12:01.625 --> 00:12:04.181\nYou shouldn't do this in real programs,\nbut\n\n215\n00:12:04.181 --> 00:12:08.902\nit's gonna keep me from having to spend\ntime to write a repr or __str__ method.\n\n216\n00:12:08.902 --> 00:12:11.780\nSo we're going to now\nmove into our sniffer,\n\n217\n00:12:11.780 --> 00:12:16.872\ncreate an Ethernet frame not quite done\nhere just to see what's output, okay?\n\n218\n00:12:16.872 --> 00:12:21.891\nSo, I'm gonna say from nettypes\n\n219\n00:12:21.891 --> 00:12:25.780\nimport EthernetFrame.\n\n220\n00:12:27.650 --> 00:12:34.750\nAnd temporarily, I'm going to close, I'm\nnot going to write any PCAP files like so.\n\n221\n00:12:35.760 --> 00:12:42.173\nOkay, so I'm gonna say ethframe,\nwhy not, EthernetFrame.\n\n222\n00:12:42.173 --> 00:12:47.906\nAnd I'm gonna pass in\nthis raw_data like so,\n\n223\n00:12:47.906 --> 00:12:53.099\nprint, ethFrame,\n\n224\n00:12:53.099 --> 00:12:57.779\nand the information contained in said\nobject, and I'm gonna go ahead and break.\n\n225\n00:12:57.779 --> 00:12:59.565\nAnd that way, it won't happen.\n\n226\n00:12:59.565 --> 00:13:02.645\nAs soon as it has one,\nit'll just print it out and we're done.\n\n227\n00:13:02.645 --> 00:13:04.593\nAll right, so\nwe've modified our sniffer for now.\n\n228\n00:13:04.593 --> 00:13:07.035\nLet's see if we can get that to work.\n\n229\n00:13:07.035 --> 00:13:08.173\nSo sudo python.\n\n230\n00:13:08.173 --> 00:13:14.578\nI'm gonna sudo this one, because I\nknow this is gonna be short-lived.\n\n231\n00:13:16.460 --> 00:13:19.764\nAnd now, I'm going to do a refresh.\n\n232\n00:13:19.764 --> 00:13:23.260\nThere we go.\nAnd what do we have?\n\n233\n00:13:23.260 --> 00:13:28.730\nWe have source, destination,\nprotocol is 8, and the leftover data.\n\n234\n00:13:28.730 --> 00:13:31.450\nNow, this source and this destination,\nthey're still weird.\n\n235\n00:13:31.450 --> 00:13:37.019\nThere's still that weirdness, right,\nbut they should be the MAC addresses.\n\n236\n00:13:37.019 --> 00:13:41.185\nBut in order to format those\nappropriately, I'm gonna write a little\n\n237\n00:13:41.185 --> 00:13:46.070\nhelper function that should consume those\nand generate the MAC addresses for us.\n\n238\n00:13:46.070 --> 00:13:48.176\nNow Daniel, if I get this wrong,\n\n239\n00:13:48.176 --> 00:13:51.494\nI give you permission to\nmake fun of me atrociously.\n\n240\n00:13:51.494 --> 00:13:55.630\n&gt;&gt; Uh-huh.\n&gt;&gt; Not on air, but maybe off camera.\n\n241\n00:13:55.630 --> 00:13:57.217\n&gt;&gt; [INAUDIBLE] will be awesome.\n\n242\n00:13:57.217 --> 00:13:57.913\n&gt;&gt; Yeah.\n&gt;&gt; [LAUGH]\n\n243\n00:13:57.913 --> 00:13:59.458\n&gt;&gt; Maybe we should tape it, who knows?\n\n244\n00:13:59.458 --> 00:14:01.024\n&gt;&gt; [LAUGH] Yeah.\n\n245\n00:14:01.024 --> 00:14:05.084\n&gt;&gt; But that little helper function should\nformat these to an appropriate MAC\n\n246\n00:14:05.084 --> 00:14:05.680\naddress.\n\n247\n00:14:05.680 --> 00:14:09.480\nYou may see some live action debugging.\n\n248\n00:14:09.480 --> 00:14:10.500\nThis is-\n&gt;&gt; You never know.\n\n249\n00:14:10.500 --> 00:14:12.630\n&gt;&gt; You never know,\nI sometimes get these things wrong.\n\n250\n00:14:12.630 --> 00:14:16.965\nSo let's hop back into nettypes,\n\n251\n00:14:16.965 --> 00:14:21.153\nand let's just say def mac addr.\n\n252\n00:14:21.153 --> 00:14:23.290\nAnd that takes some information.\n\n253\n00:14:24.800 --> 00:14:26.780\nParticularly, it takes the bytestring.\n\n254\n00:14:26.780 --> 00:14:28.580\nThat is the representation of it.\n\n255\n00:14:31.012 --> 00:14:36.165\nAnd it is going to return,\njoined by colons,\n\n256\n00:14:36.165 --> 00:14:39.554\nthis is some craziness here,\n\n257\n00:14:39.554 --> 00:14:44.037\nthe formatted string in hexadecimal.\n\n258\n00:14:44.037 --> 00:14:50.603\nSo that X has formatted as\nhex characters format for\n\n259\n00:14:50.603 --> 00:14:55.007\neach piece, Of said bytestring.\n\n260\n00:14:59.403 --> 00:15:03.760\nOkay, so I wanna boom each piece of those.\n\n261\n00:15:03.760 --> 00:15:05.843\nI'm gonna grab it,\nchange it into hex characters and\n\n262\n00:15:05.843 --> 00:15:07.060\nI'm gonna join them by colon.\n\n263\n00:15:07.060 --> 00:15:09.470\nSo I should have\nan appropriate MAC address.\n\n264\n00:15:09.470 --> 00:15:11.357\nWe're about to find out.\n\n265\n00:15:11.357 --> 00:15:14.271\n&gt;&gt; [LAUGH]\n&gt;&gt; So what I'm gonna do is I'm gonna\n\n266\n00:15:14.271 --> 00:15:19.052\nuse this helper function to grab\nthis data and to say mac_addr.\n\n267\n00:15:19.052 --> 00:15:22.645\nFor some reason, just saying\nthat makes me giggle, mac_addr.\n\n268\n00:15:22.645 --> 00:15:26.071\nSo mac-\n&gt;&gt; Sounds like a deadly snake.\n\n269\n00:15:26.071 --> 00:15:26.610\n&gt;&gt; It does.\n\n270\n00:15:27.750 --> 00:15:28.660\nSo there we go.\n\n271\n00:15:28.660 --> 00:15:33.230\nI used that helper function to now grab\nthat raw data and hopefully change it\n\n272\n00:15:33.230 --> 00:15:40.220\ninto, well,\nan appropriate MAC address, okay?\n\n273\n00:15:40.220 --> 00:15:46.342\nSo python3 and then sniffer,\nand then boom.\n\n274\n00:15:46.342 --> 00:15:50.120\nWell, you gotta spell\nbytestring appropriately.\n\n275\n00:15:50.120 --> 00:15:55.646\nThat's important with nettypes,\nthere we go.\n\n276\n00:15:59.876 --> 00:16:02.772\nThere we go, that should work now.\n\n277\n00:16:02.772 --> 00:16:09.461\nAnd boom, and then there we go, and-\n&gt;&gt; You\n\n278\n00:16:09.461 --> 00:16:10.972\ncan do colon separated values there.\n\n279\n00:16:10.972 --> 00:16:11.790\nIt's a address.\n\n280\n00:16:11.790 --> 00:16:12.722\n&gt;&gt; Yeah, there you go.\n\n281\n00:16:12.722 --> 00:16:13.880\n&gt;&gt; Yeah.\n&gt;&gt; There you go.\n\n282\n00:16:15.060 --> 00:16:17.420\nSo Daniel, am I wrong?\n\n283\n00:16:17.420 --> 00:16:18.780\nDoes that look right to you?\n\n284\n00:16:18.780 --> 00:16:19.981\n&gt;&gt; That looks right.\n\n285\n00:16:19.981 --> 00:16:21.709\nThat's exactly what that is.\n\n286\n00:16:21.709 --> 00:16:24.253\n&gt;&gt; Man, I am so\nhappy that that worked out.\n\n287\n00:16:24.253 --> 00:16:27.019\nNow I would really like for\nthose to be uppercase but\n\n288\n00:16:27.019 --> 00:16:29.345\nthose are actually pretty easy to change.\n\n289\n00:16:29.345 --> 00:16:32.120\nCuz I find uppercase x values\na little easier to read.\n\n290\n00:16:32.120 --> 00:16:32.720\n&gt;&gt; I agree.\n\n291\n00:16:32.720 --> 00:16:36.376\n&gt;&gt; So let's make that quick change there.\n\n292\n00:16:36.376 --> 00:16:40.581\nAnd we're gonna do that\nby saying format and\n\n293\n00:16:40.581 --> 00:16:46.500\nthen when we format said thing,\nwe're gonna just say upper.\n\n294\n00:16:46.500 --> 00:16:49.032\nChaining that onto\nthe string it's created, and\n\n295\n00:16:49.032 --> 00:16:50.908\nnow I should have uppercase values.\n\n296\n00:16:50.908 --> 00:16:53.468\nAnd, boom, like so, all right?\n\n297\n00:16:53.468 --> 00:16:57.361\nSo sudo python3 sniffer,\nand yeah, there we go.\n\n298\n00:16:57.361 --> 00:17:01.860\nSometimes wierd things where\nyou're just waiting, all right?\n\n299\n00:17:01.860 --> 00:17:07.480\nBoom, so destination, source,\nthey're formatted appropriately.\n\n300\n00:17:07.480 --> 00:17:11.050\nThere is the respective\ndata that we've unpacked.\n\n301\n00:17:11.050 --> 00:17:14.060\nNow I do wanna draw in your attention to\none thing that some of you are gonna be\n\n302\n00:17:14.060 --> 00:17:16.500\nlike, that doesn't make sense.\n\n303\n00:17:16.500 --> 00:17:19.250\nThere's part of that that\ndoesn't make sense to me.\n\n304\n00:17:20.570 --> 00:17:24.170\nAnd it's not that file that I just\ncreated that doesn't actually exist.\n\n305\n00:17:25.480 --> 00:17:33.940\nWhen I unpack this data,\nI end up grabbing just the raw data.\n\n306\n00:17:33.940 --> 00:17:39.531\nSo why did I unpack this char array and\nthis char array using unpack?\n\n307\n00:17:39.531 --> 00:17:44.497\nWell, that's because the protocol\nis this h, all right?\n\n308\n00:17:44.497 --> 00:17:45.051\nSo what is h?\n\n309\n00:17:45.051 --> 00:17:47.200\nIt's an unsigned short.\n\n310\n00:17:47.200 --> 00:17:49.150\nThe protocol number's the third element.\n\n311\n00:17:49.150 --> 00:17:50.790\nWell, in order to get\nto the third element,\n\n312\n00:17:50.790 --> 00:17:54.980\nI have to unpack all three elements,\nand then I end up not using one.\n\n313\n00:17:54.980 --> 00:18:00.400\nNow that's not the case for some of the\nother kinda binary parsing that we use.\n\n314\n00:18:02.170 --> 00:18:04.750\nBut it is the case here.\n\n315\n00:18:04.750 --> 00:18:09.087\nNow one final thing inside this ethernet\nframe is I am now going to write, well,\n\n316\n00:18:09.087 --> 00:18:15.410\na dunder string, which is what will be\nprinted out just for some pretty printing.\n\n317\n00:18:15.410 --> 00:18:19.970\nAnd then, ultimately, all I want is\nsource and destination, and, well,\n\n318\n00:18:19.970 --> 00:18:21.692\nsaid protocol to print out.\n\n319\n00:18:21.692 --> 00:18:25.564\nI don't wanna print out all of that\nleftover information that we're\n\n320\n00:18:25.564 --> 00:18:26.373\nseeing here.\n\n321\n00:18:26.373 --> 00:18:31.231\nCuz that doesn't really tell me anything\nthat's gonna be used at some other point.\n\n322\n00:18:31.231 --> 00:18:34.506\nSo, nettypes and dunder string.\n\n323\n00:18:34.506 --> 00:18:40.485\nNow I could've used a dunder reaper here,\nthose are funner.\n\n324\n00:18:40.485 --> 00:18:46.040\nIt's a non-formal representation,\n\n325\n00:18:46.040 --> 00:18:50.759\nso I'm gonna use dunder string.\n\n326\n00:18:50.759 --> 00:18:52.800\nAnd then, what do I want?\n\n327\n00:18:52.800 --> 00:18:58.020\nWell, I have to return some\nformatted string, okay?\n\n328\n00:18:58.020 --> 00:19:02.710\nSo I'm gonna return, and\nthen three triple quotes, in particular.\n\n329\n00:19:03.820 --> 00:19:07.250\nAnd this may be formatted a little\nbit weird, but we'll go with it.\n\n330\n00:19:09.140 --> 00:19:10.020\nHere's what we're gonna do.\n\n331\n00:19:10.020 --> 00:19:18.030\nWe're gonna say source and source,\njust like that, all right?\n\n332\n00:19:18.030 --> 00:19:25.390\nAnd then destination and\nthen destination, destination.\n\n333\n00:19:26.610 --> 00:19:31.570\nAnd then protocol and protocol.\n\n334\n00:19:34.200 --> 00:19:39.830\nAnd then let's actually make these\nline up a little bit, all right?\n\n335\n00:19:39.830 --> 00:19:43.770\nSo boom and then boom.\n\n336\n00:19:43.770 --> 00:19:52.414\nAnd then I wanna say, format\n**self.dunder dictionary, all right?\n\n337\n00:19:52.414 --> 00:19:56.511\nSo that dunder dict is gonna\nhave all the information.\n\n338\n00:19:56.511 --> 00:20:00.468\nBut because I use the same names\nhere that I set them as properties,\n\n339\n00:20:00.468 --> 00:20:03.660\nthis will unpack only those\nparticular properties.\n\n340\n00:20:03.660 --> 00:20:06.411\nI will be leaving out the leftover data.\n\n341\n00:20:06.411 --> 00:20:10.872\nSo now we should be able to do\na great deal of packet captures.\n\n342\n00:20:10.872 --> 00:20:19.099\nAnd, well, see those particular\nframes printed out real nice like.\n\n343\n00:20:19.099 --> 00:20:25.643\nSo by doing that dunder__string, this\nprint method should give me that nice,\n\n344\n00:20:25.643 --> 00:20:29.890\npretty print out instead of,\nwell, shenanigans.\n\n345\n00:20:29.890 --> 00:20:32.928\n&gt;&gt; [LAUGH]\n&gt;&gt; So let's see if that is the case.\n\n346\n00:20:32.928 --> 00:20:36.230\nI'll remove the break, so\nthis should keep going here.\n\n347\n00:20:36.230 --> 00:20:42.281\nAnd then sudo python sniffer,\nand there we go.\n\n348\n00:20:42.281 --> 00:20:47.408\nI'm just gonna hit a refresh so\nI can spawn a bunch of them.\n\n349\n00:20:47.408 --> 00:20:54.080\nBut, oop, unknown format code for\nobject of type string, interesting.\n\n350\n00:20:54.080 --> 00:20:56.404\nSo, you know what?\n\n351\n00:20:56.404 --> 00:20:59.637\nI think this is,\n\n352\n00:20:59.637 --> 00:21:04.861\nI called upper on the wrong place.\n\n353\n00:21:04.861 --> 00:21:06.310\n&gt;&gt; Well, there you go.\n&gt;&gt; There we go.\n\n354\n00:21:06.310 --> 00:21:11.250\nSo, let's fix that, because sometimes\nit'll do some weirdness there.\n\n355\n00:21:15.880 --> 00:21:20.090\nSo if I call upper at the end of this,\nI should join all of these together and\n\n356\n00:21:20.090 --> 00:21:22.000\nthen get the uppercase version of that.\n\n357\n00:21:22.000 --> 00:21:25.410\nWhich should not affect numbers and,\nor punctuation.\n\n358\n00:21:25.410 --> 00:21:29.130\nSo let's see if I was\nright in my assumptions.\n\n359\n00:21:29.130 --> 00:21:30.540\nI also used Python.\n\n360\n00:21:30.540 --> 00:21:33.830\nThis is a Python 2 thing.\n\n361\n00:21:33.830 --> 00:21:38.423\nByte strings and strings were essentially\nthe same thing, so that would've failed.\n\n362\n00:21:38.423 --> 00:21:41.459\nThis is one of those times where\nformatting and stuff becomes difficult.\n\n363\n00:21:41.459 --> 00:21:44.010\nCuz in Python 2,\neverything is exactly the same.\n\n364\n00:21:44.010 --> 00:21:49.630\nIn Python 3, you have unicode,\nnormal and then bitstrings.\n\n365\n00:21:49.630 --> 00:21:56.193\nAnd let's see here, I may have just broke\nmy Python 3 code by making that change.\n\n366\n00:21:56.193 --> 00:21:58.914\nBoom, and there we go.\n\n367\n00:21:58.914 --> 00:22:00.017\n&gt;&gt; That was nice.\n\n368\n00:22:00.017 --> 00:22:04.220\n&gt;&gt; So source destination protocol and\nit's just printing out to the screen.\n\n369\n00:22:04.220 --> 00:22:08.150\nI would like to have it kinda pulled\nover to the left, but you know what?\n\n370\n00:22:08.150 --> 00:22:09.559\nI'll leave it here for now.\n\n371\n00:22:09.559 --> 00:22:10.604\n&gt;&gt; Looks like a win to me, right?\n\n372\n00:22:10.604 --> 00:22:12.593\n&gt;&gt; Yep, I'm gonna chalk it up as a win.\n\n373\n00:22:12.593 --> 00:22:13.480\n&gt;&gt; Yeah, I'll take that.\n\n374\n00:22:13.480 --> 00:22:15.913\nIt's very nicely formatted,\nit comes out very well and\n\n375\n00:22:15.913 --> 00:22:18.834\ngives us just the pertinent\ninformation that we were looking for.\n\n376\n00:22:18.834 --> 00:22:20.281\nJustin, this is very cool stuff.\n\n377\n00:22:20.281 --> 00:22:24.955\nWe're really starting to take that data\nwhere we started off way back when we did\n\n378\n00:22:24.955 --> 00:22:25.600\nsnipper.\n\n379\n00:22:25.600 --> 00:22:27.364\nAnd getting that just raw data and\n\n380\n00:22:27.364 --> 00:22:29.829\nstarting to make it\nsomething that we can use.\n\n381\n00:22:29.829 --> 00:22:33.240\nAnd it's more easily\ndigestible by us as humans.\n\n382\n00:22:33.240 --> 00:22:34.042\nVery cool stuff.\n\n383\n00:22:34.042 --> 00:22:37.856\nJustin, we do thank you for showing us how\nwe [LAUGH] can do that cuz reading raw\n\n384\n00:22:37.856 --> 00:22:40.470\npackets, not the most\nfun thing in the world.\n\n385\n00:22:40.470 --> 00:22:41.530\nBut we're gonna continue on this train.\n\n386\n00:22:41.530 --> 00:22:44.050\nI know he's got a little\nmore to show us coming up.\n\n387\n00:22:44.050 --> 00:22:45.589\nSo definitely check out\nthe upcoming episodes.\n\n388\n00:22:45.589 --> 00:22:47.238\nAs for this one, we are out of time.\n\n389\n00:22:47.238 --> 00:22:50.480\nSigning off for DevProTV,\nI've been your host Daniel Lowrie.\n\n390\n00:22:50.480 --> 00:22:51.282\n&gt;&gt; And I'm Justin Dennison.\n\n391\n00:22:51.282 --> 00:22:52.400\n&gt;&gt; And we'll see you next time.\n\n392\n00:22:52.400 --> 00:22:58.485\n[MUSIC]\n\n",
          "vimeoId": "228971873"
        },
        {
          "description": "In this episode, Daniel and Justin build a new project that connects with their MAC grabbing program to unpack the IP Headers from the Ethernet Frames. They will then take those IP headers and print them to the screen in real time.",
          "length": "1366",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-4-ip_headers_from_ethernet_frames-080817-PGM.00_22_56_01.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-4-ip_headers_from_ethernet_frames-080817-PGM.00_22_56_01.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-4-ip_headers_from_ethernet_frames-080817-PGM.00_22_56_01.Still001-sm.jpg",
          "title": "IP Headers from Ethernet Frames",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.331 --> 00:00:18.216\nAll right, greetings everyone and welcome\nback to another great episode of DevProTV.\n\n3\n00:00:18.216 --> 00:00:21.170\nI'm your host, Daniel Lowrie,\nand in today's episode, well,\n\n4\n00:00:21.170 --> 00:00:23.934\nwe're moving on with more in\nour Python for Security series.\n\n5\n00:00:23.934 --> 00:00:28.126\nKinda continuing, like I said before, it's\na leap frog from one topic to the other,\n\n6\n00:00:28.126 --> 00:00:30.357\nthey're kinda connected, but not purely.\n\n7\n00:00:30.357 --> 00:00:34.030\nSo we're breaking them off into their\nown separate episodes for you out there.\n\n8\n00:00:34.030 --> 00:00:36.930\nAnd joining us,\nback into the studio, yet again,\n\n9\n00:00:36.930 --> 00:00:40.790\nlending his expertise on this very topic,\nour good friend Mr. Justin Dennison.\n\n10\n00:00:40.790 --> 00:00:43.920\nAnd Justin, welcome back, sir, and\nwe are glad to have you yet again.\n\n11\n00:00:43.920 --> 00:00:46.960\n&gt;&gt; Well, I'm glad that you all actually\ninvited me back, I was afraid that,\n\n12\n00:00:46.960 --> 00:00:49.407\nI thought there was a memo out there-\n&gt;&gt; Part ways.\n\n13\n00:00:49.407 --> 00:00:51.978\n&gt;&gt; Like, so, yeah, Justin,\nwe're gonna need you to not come back.\n\n14\n00:00:51.978 --> 00:00:53.892\n&gt;&gt; [LAUGH]\n&gt;&gt; But I gotta finish those shows.\n\n15\n00:00:53.892 --> 00:00:55.909\n&gt;&gt; Why don't you take a vacation, forever.\n\n16\n00:00:55.909 --> 00:00:57.937\n[LAUGH]\n&gt;&gt; [LAUGH] So yeah, Daniel,\n\n17\n00:00:57.937 --> 00:00:59.751\nyou've kind of hinted at it.\n\n18\n00:00:59.751 --> 00:01:02.550\nWe've hit a couple of things\nin the last couple of\n\n19\n00:01:02.550 --> 00:01:06.444\nepisodes that they're not strictly\nrequired to, well actually,\n\n20\n00:01:06.444 --> 00:01:10.082\nthe previous episode and\nthis one are pretty tightly coupled.\n\n21\n00:01:10.082 --> 00:01:10.918\n&gt;&gt; They're pretty, yeah.\n\n22\n00:01:10.918 --> 00:01:12.330\n&gt;&gt; But the ones previous to that,\n\n23\n00:01:12.330 --> 00:01:15.670\nit's all about grabbing raw packets and\ndoing different things with them.\n\n24\n00:01:15.670 --> 00:01:19.460\nIn the previous episode we actually\ngrabbed the Ethernet frame and just\n\n25\n00:01:19.460 --> 00:01:24.190\nthe Ethernet frame portion, so we can find\na source of destination and said protocol.\n\n26\n00:01:25.500 --> 00:01:28.860\nIn this episode,\nwe wanna take that leftover data, right,\n\n27\n00:01:28.860 --> 00:01:33.010\nthe part that's not part of the Ethernet\nframe, and grab the IP header off of it.\n\n28\n00:01:34.140 --> 00:01:37.560\nSo by grabbing the IP header,\nwe're now going to know, hey,\n\n29\n00:01:37.560 --> 00:01:43.250\ndoes it have a TCP segment, a UDP segment,\nICMP, or is it something else, all right?\n\n30\n00:01:43.250 --> 00:01:48.550\nSo we can start parsing these\nin our particular context, so\n\n31\n00:01:48.550 --> 00:01:52.800\nI don't need Wireshark to read this,\nI can just have it printed out.\n\n32\n00:01:52.800 --> 00:01:55.710\nNow keep in mind,\nthis is gonna be one of those things that\n\n33\n00:01:57.130 --> 00:02:00.340\nyou might have a use case for\nthis, you might not.\n\n34\n00:02:00.340 --> 00:02:04.352\nBut for me, the first time I did this,\nit was definitely a learning experience.\n\n35\n00:02:04.352 --> 00:02:09.198\nI was like, this is how this individual\npieces of binary data are constructed to\n\n36\n00:02:09.198 --> 00:02:12.353\nrepresent these things, and\nthen these are partial.\n\n37\n00:02:12.353 --> 00:02:14.426\nI had a greater appreciation and\n\n38\n00:02:14.426 --> 00:02:19.530\nprobably a greater understanding of\nhow these packets are constructed.\n\n39\n00:02:19.530 --> 00:02:24.810\nSo, well, let's actually get started\ncreating that IP header, and\n\n40\n00:02:24.810 --> 00:02:25.880\nsee if it we can get it working.\n\n41\n00:02:25.880 --> 00:02:31.680\nSo go ahead and take a look at my screen\nhere, and let's hop right into net types.\n\n42\n00:02:31.680 --> 00:02:35.960\nSo here's our net types and\nhere's our Ethernet frame, so\n\n43\n00:02:35.960 --> 00:02:38.790\nthis is our object that\nwe're constructing.\n\n44\n00:02:38.790 --> 00:02:43.453\nJust real quick,\nI'm gonna grab this MAC address thing, and\n\n45\n00:02:43.453 --> 00:02:47.129\nI'm gonna pull that out\ninto a utils just in case I\n\n46\n00:02:47.129 --> 00:02:51.988\nhave other utility functions that\nI may need in other contexts.\n\n47\n00:02:51.988 --> 00:02:58.261\nSo I'm gonna create a utils file and\njust, apparently, not paste that.\n\n48\n00:03:00.790 --> 00:03:03.395\nPaste it,\nI guess I'm going to be retyping it.\n\n49\n00:03:03.395 --> 00:03:10.405\nSo that is okay, so\ndef mac_addr and bystring.\n\n50\n00:03:11.437 --> 00:03:15.607\nThat was unexpected, but, you know,\nsometimes things are just that.\n\n51\n00:03:15.607 --> 00:03:21.077\nSo we are going to join for,\ncolon, zero, two, x.\n\n52\n00:03:22.377 --> 00:03:30.197\nAnd format of the piece, for\npiece in the black stream.\n\n53\n00:03:31.550 --> 00:03:35.290\nPiece in bytestring.\n\n54\n00:03:35.290 --> 00:03:36.870\nThere we go.\n\n55\n00:03:36.870 --> 00:03:40.380\nAnd then I'm gonna call upper on that,\njust so.\n\n56\n00:03:40.380 --> 00:03:45.342\nSo in order to use that in net-types,\nand now I just say from utils,\n\n57\n00:03:45.342 --> 00:03:51.650\nimport, macadder.\n\n58\n00:03:51.650 --> 00:03:54.590\nAnd it may be that I have to\nparse this in some other place,\n\n59\n00:03:54.590 --> 00:03:56.390\nmaybe it's not necessarily in this file.\n\n60\n00:03:56.390 --> 00:04:00.640\nSo I extracted it because it's\nnot necessarily just here.\n\n61\n00:04:00.640 --> 00:04:06.000\nI may have a use case for formatting\na MAC address in some other context.\n\n62\n00:04:06.000 --> 00:04:09.870\nSo I have that there, and\nnow I have my ethernet frame.\n\n63\n00:04:09.870 --> 00:04:13.670\nNow I want to draw your attention\nto this left over data portion.\n\n64\n00:04:13.670 --> 00:04:18.240\nThis left over data is essentially\nafter peeling off the portion that is\n\n65\n00:04:18.240 --> 00:04:21.890\nthe Ethernet frame,\nI have all the rest of the data there.\n\n66\n00:04:21.890 --> 00:04:25.850\nWell the first part of that left\nover data is in fact the IP header.\n\n67\n00:04:25.850 --> 00:04:29.430\nSo I'm gonna write in this class,\njust saying, there's some data coming in.\n\n68\n00:04:29.430 --> 00:04:34.050\nBut you'll see when I actually use this,\nI'm gonna be passing this data along.\n\n69\n00:04:34.050 --> 00:04:36.750\nSo these end up being\nfairly coupled in nature.\n\n70\n00:04:38.320 --> 00:04:41.040\nSo let's get some over scroll here.\n\n71\n00:04:41.040 --> 00:04:42.200\nAnd come back up.\n\n72\n00:04:42.200 --> 00:04:50.790\nAnd so I'm gonna say,\nclass IPHeader def_init.\n\n73\n00:04:50.790 --> 00:04:53.250\nAnd this is going to be some data.\n\n74\n00:04:53.250 --> 00:04:56.530\nNow, what is the length of this?\n\n75\n00:04:57.680 --> 00:05:00.960\nThe length of an IP header is 20, bytes?\n\n76\n00:05:00.960 --> 00:05:05.860\n20 elements,\nwe'll just say elements just to\n\n77\n00:05:05.860 --> 00:05:10.710\nkeep shenanigans cuz sometimes,\nsometimes I misspeak.\n\n78\n00:05:10.710 --> 00:05:11.850\nIt's a byte bit word.\n\n79\n00:05:11.850 --> 00:05:14.520\n20 elements, 20 pieces.\n\n80\n00:05:15.660 --> 00:05:17.150\nSo there's our length for our IP header.\n\n81\n00:05:17.150 --> 00:05:20.220\nNow I've done this, just like I\ndid with the Ethernet frame, so\n\n82\n00:05:20.220 --> 00:05:23.880\nI can use this in the context\nof this class definition.\n\n83\n00:05:23.880 --> 00:05:26.660\nSo, I can change it if I need to.\n\n84\n00:05:26.660 --> 00:05:30.440\nDoesn't seem like I'm going to need to,\nbut it also is easier.\n\n85\n00:05:30.440 --> 00:05:34.459\nHey, what is IP header length, 20, cool,\nit's kind of self documenting in nature.\n\n86\n00:05:35.500 --> 00:05:41.140\nSo this dunder init, what do I need?\n\n87\n00:05:41.140 --> 00:05:44.290\nWell, I need to unpack the data and\n\n88\n00:05:44.290 --> 00:05:47.470\nI'm gonna do that with the unpack\nfeature from the struct module.\n\n89\n00:05:49.000 --> 00:05:54.490\nAnd that's going to be unpack and\nBB, HH, HBBH, 4S,4S.\n\n90\n00:05:54.490 --> 00:05:58.040\nWe're going to come look\nat that in just a moment.\n\n91\n00:05:58.040 --> 00:06:02.490\nThat was a whole bunch,\nthat was a whole bunch!\n\n92\n00:06:02.490 --> 00:06:08.820\nAnd then I'm going to get the data and\nzero to self dot length.\n\n93\n00:06:10.150 --> 00:06:12.920\nTechnically I could leave out the zero,\nbut just to show you that we are starting\n\n94\n00:06:12.920 --> 00:06:15.840\nat zero I'm going to put it there So\nthere is our unpacked data.\n\n95\n00:06:15.840 --> 00:06:23.460\nNow before we move on in it,\nthis length, this is 20 pieces, right?\n\n96\n00:06:26.230 --> 00:06:29.560\nThis should also add up to\nbe 20 based on these types.\n\n97\n00:06:30.890 --> 00:06:33.610\nThese are bytes, okay?\n\n98\n00:06:33.610 --> 00:06:35.110\nSo B B.\n\n99\n00:06:35.110 --> 00:06:36.670\nSo a B is what?\n\n100\n00:06:36.670 --> 00:06:37.700\n1, okay.\n\n101\n00:06:37.700 --> 00:06:42.740\nAnd then an H is all capital H is 2.\n\n102\n00:06:42.740 --> 00:06:47.030\nAnd then an S is,\n\n103\n00:06:47.030 --> 00:06:52.058\nwell it doesn't say but\nit’s a charge so should be 1.\n\n104\n00:06:52.058 --> 00:06:56.510\nSo there's 1,2, 4, 6, 8,\n10, 12, 16, or 16, 18.\n\n105\n00:06:56.510 --> 00:07:01.460\n16, 20.\nSo 20\n\n106\n00:07:01.460 --> 00:07:09.670\nbytes, there is our length.\n\n107\n00:07:10.740 --> 00:07:11.550\nOkay.\n\n108\n00:07:11.550 --> 00:07:13.730\nSo this has to correspond to that length,\n\n109\n00:07:13.730 --> 00:07:15.740\notherwise it will fail\nwhen we try to unpack.\n\n110\n00:07:17.370 --> 00:07:19.830\nNow in the Ethernet frame\nwe unpacked a lot of data\n\n111\n00:07:19.830 --> 00:07:22.020\nto only use a small piece of it.\n\n112\n00:07:22.020 --> 00:07:24.930\nIn the IP header, we actually need\na good chunk of it because we\n\n113\n00:07:24.930 --> 00:07:30.180\nhave several pieces of information that\nwe can grab in the IP header, okay?\n\n114\n00:07:30.180 --> 00:07:35.920\nSo also we're gonna do\nsome bitwise operations,\n\n115\n00:07:35.920 --> 00:07:38.570\njust because that's how\nthings are represented.\n\n116\n00:07:38.570 --> 00:07:41.650\nWe'll discuss bitwise when\nwe actually get to those,\n\n117\n00:07:41.650 --> 00:07:45.650\nwhich interestingly enough is\nprobably gonna be fairly shortly.\n\n118\n00:07:45.650 --> 00:07:49.080\nSo for the IP header,\nI can get the version.\n\n119\n00:07:49.080 --> 00:07:50.787\nNow, what is the version?\n\n120\n00:07:50.787 --> 00:07:56.223\nThat is the data, notice it's the raw\ndata its not the unpacked data and\n\n121\n00:07:56.223 --> 00:07:59.572\nit is the data 0,\nI think I have that right,\n\n122\n00:07:59.572 --> 00:08:05.480\nI'm hoping I don't have a typo in my\nnotes, you never know, you never know.\n\n123\n00:08:05.480 --> 00:08:10.557\nSo what's this two greater than\n\n124\n00:08:10.557 --> 00:08:15.076\nsigns for, [SOUND], right?\n\n125\n00:08:15.076 --> 00:08:19.121\nLet's take a quick aside, see what this\noperation actually does in Python.\n\n126\n00:08:20.170 --> 00:08:26.134\nSo I'm just going to start up a Python\ninterpreter, and let's say, sample.\n\n127\n00:08:26.134 --> 00:08:30.291\n&gt;&gt; We can see it, it's right there,\nit's the prompt that they've given you.\n\n128\n00:08:30.291 --> 00:08:31.562\n&gt;&gt; [LAUGH] there it is, silly us.\n\n129\n00:08:31.562 --> 00:08:33.996\n&gt;&gt; [LAUGH]\n&gt;&gt; We were gonna up an interpreter and\n\n130\n00:08:33.996 --> 00:08:35.085\ndo things, crazy.\n\n131\n00:08:35.085 --> 00:08:40.683\n[LAUGH] Let's just do it on the number 4,\n\n132\n00:08:40.683 --> 00:08:47.125\nso here's our sample,\nand if I say sample 2.\n\n133\n00:08:47.125 --> 00:08:52.348\nWell, 4 to 1, how does that work,\n\n134\n00:08:52.348 --> 00:08:58.760\nso, let's just say, sample 1, 2.\n\n135\n00:09:00.350 --> 00:09:03.945\nEssentially, this says,\nhow many times do you wanna divide by 2?\n\n136\n00:09:05.090 --> 00:09:06.620\nSo, it's a bit shift operator,\n\n137\n00:09:06.620 --> 00:09:10.940\nbut because it's in binary,\nyou're essentially dividing by 2.\n\n138\n00:09:10.940 --> 00:09:15.381\nLet's crank up the sample a little bit,\n\n139\n00:09:15.381 --> 00:09:19.570\nlet's say 256, so sample and 2.\n\n140\n00:09:19.570 --> 00:09:25.206\nSo if divide by two 2,\nthat's dividing by 4, which should be 64,\n\n141\n00:09:25.206 --> 00:09:30.440\nand it is in fact 64, so\nit's just a quick way of dividing.\n\n142\n00:09:30.440 --> 00:09:33.410\nBut essentially what happens is,\nin the binary representation,\n\n143\n00:09:33.410 --> 00:09:37.040\nyou're either adding or\nremoving digits from there.\n\n144\n00:09:37.040 --> 00:09:40.740\nSo you're essentially shifting\nhow many digits you have for\n\n145\n00:09:40.740 --> 00:09:42.240\nthe particular representation.\n\n146\n00:09:42.240 --> 00:09:47.860\nIf we do this by 4, like we have\nseen in our little unpack here,\n\n147\n00:09:47.860 --> 00:09:52.710\nthen we are dividing by 2 to the 4th,\nwhich is 16,\n\n148\n00:09:52.710 --> 00:09:56.150\nso that's ultimately what\nwe're doing on that line.\n\n149\n00:09:56.150 --> 00:10:00.650\nWe could do that just by dividing,\nhowever,\n\n150\n00:10:00.650 --> 00:10:06.300\nbecause this is a binary string,\nI wonder, we did this on numbers,\n\n151\n00:10:06.300 --> 00:10:10.671\nI wonder if now we make our sample,\nI don't know, x\\aa.\n\n152\n00:10:10.671 --> 00:10:14.301\nAll right, so here's our sample,\n\n153\n00:10:14.301 --> 00:10:20.838\nthe binary representation,\nI have that wrong, shenanigans.\n\n154\n00:10:20.838 --> 00:10:24.240\nThere we go, let's just go aa,\nthere we go, so there's aa.\n\n155\n00:10:24.240 --> 00:10:30.832\nIf I do sample 4,\nunsupported operand types,\n\n156\n00:10:30.832 --> 00:10:37.110\nbytes and integer, so\nyou might get some weirdness there.\n\n157\n00:10:37.110 --> 00:10:42.650\nBut this is not an actual\nrepresentation of\n\n158\n00:10:42.650 --> 00:10:46.070\nan integer value,\nit's not a hex code in a binary string.\n\n159\n00:10:46.070 --> 00:10:49.040\nSo we may be able to get away with it,\nspoiler alert,\n\n160\n00:10:49.040 --> 00:10:51.000\nwe are gonna be able to get away with it.\n\n161\n00:10:51.000 --> 00:10:53.460\nBut ultimately,\nit is doing the exact same operation here,\n\n162\n00:10:53.460 --> 00:10:57.200\nit is doing a bit shift operation,\nso let's go down to there.\n\n163\n00:10:57.200 --> 00:11:02.100\nNice little aside, and\nlet's get back into net types, so\n\n164\n00:11:02.100 --> 00:11:08.000\nif I scroll down, our version is\ngoing to be that first element,\n\n165\n00:11:08.000 --> 00:11:10.680\nthat first byte, bit shifted by 4.\n\n166\n00:11:11.940 --> 00:11:15.120\nSo there's our version, and\nthen what is our header length?\n\n167\n00:11:16.450 --> 00:11:18.682\nI probably should have done\nboth of these at the same time.\n\n168\n00:11:18.682 --> 00:11:22.765\n&gt;&gt; It may have helped.\n&gt;&gt; Yeah, so [COUGH] this length, this 20,\n\n169\n00:11:22.765 --> 00:11:25.050\nis the length of the data.\n\n170\n00:11:25.050 --> 00:11:28.164\nThe actual header length\nis a separate property.\n\n171\n00:11:28.164 --> 00:11:33.560\nAnd so I have data[0] &amp; 15,\n\n172\n00:11:33.560 --> 00:11:36.870\nthat is a binary &amp;.\n\n173\n00:11:36.870 --> 00:11:40.607\nSo essentially, it's like I took\ntwo binaries and I &amp;'ed them,\n\n174\n00:11:40.607 --> 00:11:44.190\nso that 1 and 1, I get a 1,\nany other time, I get a 0.\n\n175\n00:11:44.190 --> 00:11:51.750\nSo it's just a binary operation, and\nthen I'm going to multiply by 4.\n\n176\n00:11:51.750 --> 00:11:56.090\nWell, binary are numbers, so\nI can still do numeric operations on them,\n\n177\n00:11:56.090 --> 00:11:59.101\nit just may not provide\nthe output that you expect.\n\n178\n00:11:59.101 --> 00:12:05.214\nAll these can be represented\nas decimal values,\n\n179\n00:12:05.214 --> 00:12:11.325\nand then ttl is the unpacked data and\nelement 5,\n\n180\n00:12:11.325 --> 00:12:17.600\nthe protocol is the unpacked data and\nelement 6.\n\n181\n00:12:17.600 --> 00:12:24.531\nAnd a source addr is socket.inet Into a,\n\n182\n00:12:24.531 --> 00:12:29.287\nman, those always crop up.\n\n183\n00:12:29.287 --> 00:12:31.629\nAgain, it's one of those\ndata transformations,\n\n184\n00:12:31.629 --> 00:12:34.800\nvery similar to the bit shifting\nthat we're doing by hand.\n\n185\n00:12:34.800 --> 00:12:39.436\nBut it's just provided as an API in\nthe socket library, which, again,\n\n186\n00:12:39.436 --> 00:12:43.412\nis mostly a wrapper around\nthe low level C API for sockets.\n\n187\n00:12:43.412 --> 00:12:48.588\nAnd then I can say, dest_addr\n\n188\n00:12:48.588 --> 00:12:57.757\nis socket.inet_ntoa(unpacked_data[9]).\n\n189\n00:13:01.844 --> 00:13:05.984\nAnd then self.data equals, excuse me,\n\n190\n00:13:05.984 --> 00:13:10.371\nlet me be clear,\nthis is the leftover data.\n\n191\n00:13:10.371 --> 00:13:13.038\nIt's like the leftover data after\nwe've stripped off the ethernet frame.\n\n192\n00:13:13.038 --> 00:13:17.502\n&gt;&gt; We've got what we want, and\nthis is what's gonna kinda sit in the pot.\n\n193\n00:13:17.502 --> 00:13:20.817\n&gt;&gt; Yep, that way, we know where to go get\nafter we've stripped off the ethernet\n\n194\n00:13:20.817 --> 00:13:23.180\nframe, after we've stripped\noff the IP header.\n\n195\n00:13:23.180 --> 00:13:26.270\nWell, the data that's left over is\ngonna be contained in the IP header as\n\n196\n00:13:26.270 --> 00:13:27.480\nleftover data.\n\n197\n00:13:27.480 --> 00:13:30.610\nAnd then we can just pull that off and\nuse that in different contexts.\n\n198\n00:13:30.610 --> 00:13:35.390\nSo it's kind of like this pipeline of,\nwell, here's my piece, here's my piece,\n\n199\n00:13:35.390 --> 00:13:36.560\nhere's my piece.\n\n200\n00:13:36.560 --> 00:13:37.970\nLike a stair step operation,\n\n201\n00:13:37.970 --> 00:13:41.910\nand that'll actually become\nevident as we start using these.\n\n202\n00:13:41.910 --> 00:13:48.120\nSo I'm gonna say, data[self.length:],\nand then all the way to the end.\n\n203\n00:13:49.320 --> 00:13:54.330\nSo I could put the length of the data,\nbut if you leave it open,\n\n204\n00:13:54.330 --> 00:14:00.070\njust like that, then it just says,\ngive me from that index to the remainder,\n\n205\n00:14:00.070 --> 00:14:02.310\nit'll give me everything,\nso that's our selects.\n\n206\n00:14:03.470 --> 00:14:05.630\nSo there's our IP header,\nlet's go check and\n\n207\n00:14:05.630 --> 00:14:09.670\nsee if it works before I get crazy and\nwrite a dunder string method.\n\n208\n00:14:10.750 --> 00:14:14.200\nSo, If we come into our sniffer,\n\n209\n00:14:14.200 --> 00:14:19.018\nlike so, this eth frame is\ngoing to have what we want.\n\n210\n00:14:19.018 --> 00:14:25.330\nHowever, if I have my notes in order, and\n\n211\n00:14:25.330 --> 00:14:30.330\nI've been thinking about this correctly,\nonly if the ethernet frame protocol\n\n212\n00:14:30.330 --> 00:14:35.552\nis the number 8 can I actually\npull off an IP header.\n\n213\n00:14:35.552 --> 00:14:39.812\nSo there's some other things going on,\nthis is all we care about,, so\n\n214\n00:14:39.812 --> 00:14:42.585\nI need to check the ethernet\nframes protocol.\n\n215\n00:14:42.585 --> 00:14:49.614\nAnd if it's an 8, then I can construct\nan IP header from the remaining data,\n\n216\n00:14:49.614 --> 00:14:56.481\nso if ethframe.protocol, Is an 8,\n\n217\n00:14:56.481 --> 00:15:04.120\nthen I can create\nan ipheader from that class.\n\n218\n00:15:04.120 --> 00:15:07.160\nNow, we haven't quite imported that yet,\nwe'll go and do that in just a moment.\n\n219\n00:15:07.160 --> 00:15:12.019\nSo I'm gonna say ethframe.leftover_data,\nso\n\n220\n00:15:12.019 --> 00:15:18.505\nI'm passing the ethframe,\nthe leftover data, to the IP header.\n\n221\n00:15:18.505 --> 00:15:22.919\nShould now provide the appropriate\ndata with the ethernet frame portion\n\n222\n00:15:22.919 --> 00:15:24.100\npulled off.\n\n223\n00:15:24.100 --> 00:15:28.155\nThen I'm gonna say IP header,\nlike so, and, you know what,\n\n224\n00:15:28.155 --> 00:15:31.377\nlet's just see if we can print ipheader,\n\n225\n00:15:34.814 --> 00:15:40.873\nDunder all right, so cross your fingers,\nDaniel, let's see if it works.\n\n226\n00:15:40.873 --> 00:15:47.240\nSo there we go, need a password,\nand boom, there we go.\n\n227\n00:15:47.240 --> 00:15:53.589\nOur destination addr, our source addr,\nour protocol ttl, header length.\n\n228\n00:15:53.589 --> 00:15:54.241\n&gt;&gt; There she is.\n\n229\n00:15:54.241 --> 00:15:58.846\n&gt;&gt; Boom, here we go, beautiful,\nwhat version, we're on IPv4,\n\n230\n00:15:58.846 --> 00:16:04.320\nit says version 4 So we've now started\ngrabbing this piece of information.\n\n231\n00:16:04.320 --> 00:16:07.262\nIt would be nice if these were\nprinted out a little nicer,\n\n232\n00:16:07.262 --> 00:16:11.697\nI think that's probably our next course\nof action, cuz if you can just get that.\n\n233\n00:16:11.697 --> 00:16:12.571\n&gt;&gt; It's a beautiful thing.\n\n234\n00:16:12.571 --> 00:16:16.429\n&gt;&gt; It's a beautiful thing, cuz we have\nour source and destination protocol,\n\n235\n00:16:16.429 --> 00:16:17.760\njust like so.\n\n236\n00:16:17.760 --> 00:16:23.070\nIf we can get our actual IP header to\nprint out, now we know some information.\n\n237\n00:16:23.070 --> 00:16:28.410\nI'm gonna kill this and\njust go do that very thing,\n\n238\n00:16:28.410 --> 00:16:35.334\nso IP header, And\nlet's create it under string,\n\n239\n00:16:35.334 --> 00:16:39.330\nwell, Daniel,\nI'm gonna let you make a decision here.\n\n240\n00:16:39.330 --> 00:16:42.711\nIf you were to get the information-\n&gt;&gt; Democracy [LAUGH].\n\n241\n00:16:42.711 --> 00:16:45.890\n&gt;&gt; Yeah, well, at the very least,\nthe illusion of democracy.\n\n242\n00:16:45.890 --> 00:16:47.842\n&gt;&gt; Yeah, I'm the one man that\ngets a vote here, right?\n\n243\n00:16:47.842 --> 00:16:54.572\n&gt;&gt; Yeah, protocol, source addr, dest addr,\nthose properties that we have available.\n\n244\n00:16:54.572 --> 00:16:59.790\nWhich ones would be most applicable to\nyou if you were using a tool like this?\n\n245\n00:16:59.790 --> 00:17:01.620\n&gt;&gt; The source and destination addr.\n\n246\n00:17:01.620 --> 00:17:04.860\n&gt;&gt; The source and destination addr,\nI would probably agree, as well.\n\n247\n00:17:04.860 --> 00:17:10.895\nAnd just to make sure,\nI'm probably gonna print the protocol,\n\n248\n00:17:10.895 --> 00:17:15.477\nso it's gonna be similar\nto ethernet frame, but\n\n249\n00:17:15.477 --> 00:17:20.872\nthose are probably what we\ncare about the most, so cool.\n\n250\n00:17:20.872 --> 00:17:23.754\n&gt;&gt; Well, it's funny you say that,\nreally thinking about it,\n\n251\n00:17:23.754 --> 00:17:27.300\nthe source and\ndestination are bundled with the protocol.\n\n252\n00:17:27.300 --> 00:17:29.090\nReally other than, okay, well,\n\n253\n00:17:29.090 --> 00:17:32.870\nI have a conversation happening\nbetween this machine and that machine.\n\n254\n00:17:32.870 --> 00:17:35.351\nI don't know what that\nis without the protocol,\n\n255\n00:17:35.351 --> 00:17:37.297\nthey really kind of are intertwined.\n\n256\n00:17:37.297 --> 00:17:42.395\n&gt;&gt; Yeah, yeah, so what are you saying,\nDaniel, have you changed your decision?\n\n257\n00:17:42.395 --> 00:17:46.555\n&gt;&gt; Well, you gave me an option that-\n&gt;&gt; [LAUGH]\n\n258\n00:17:46.555 --> 00:17:48.527\n&gt;&gt; My choices on the ballot weren't really\n\n259\n00:17:48.527 --> 00:17:49.988\nthe way it should be.\n\n260\n00:17:49.988 --> 00:17:54.139\n&gt;&gt; Not appropriately, shenanigans [LAUGH].\n\n261\n00:17:54.139 --> 00:17:56.379\n&gt;&gt; It's like the question, have you yet\nstopped beating your girlfriend?\n\n262\n00:17:56.379 --> 00:18:01.553\n[LAUGH] It assumes something,\nbecause you can't answer that question.\n\n263\n00:18:01.553 --> 00:18:08.230\n&gt;&gt; Yeah, no, I can't, shenanigans.\n\n264\n00:18:08.230 --> 00:18:12.470\nSo we're gonna go [LAUGH] with\nthe protocol source and dest addr.\n\n265\n00:18:12.470 --> 00:18:14.522\nI told you it was\nthe illusion of democracy.\n\n266\n00:18:14.522 --> 00:18:15.418\n&gt;&gt; Yes, it was.\n\n267\n00:18:15.418 --> 00:18:18.174\n&gt;&gt; So it's cool,\nyou had a little bit of say, but\n\n268\n00:18:18.174 --> 00:18:20.666\nprobably not as much as you would like to.\n\n269\n00:18:20.666 --> 00:18:23.448\n&gt;&gt; [LAUGH]\n&gt;&gt; But we'll go with that, so\n\n270\n00:18:23.448 --> 00:18:25.579\nwe're just gonna return triple quotes.\n\n271\n00:18:25.579 --> 00:18:29.519\nWe're gonna return a formatted string,\nand I think I got too many-\n\n272\n00:18:29.519 --> 00:18:30.693\n&gt;&gt; You got a lot of quotes there.\n\n273\n00:18:30.693 --> 00:18:32.171\n&gt;&gt; I got too many triple quotes in there.\n\n274\n00:18:32.171 --> 00:18:35.773\n&gt;&gt; [LAUGH]\n&gt;&gt; All right, so let's see,\n\n275\n00:18:35.773 --> 00:18:40.587\nlet's just say IP header like so, [SOUND],\n\n276\n00:18:40.587 --> 00:18:43.941\nand, well, what do we have?\n\n277\n00:18:43.941 --> 00:18:49.717\nWe have source address,\nand come out here and\n\n278\n00:18:49.717 --> 00:18:55.650\nsource addr, nope,\nit is fully spelled out.\n\n279\n00:18:57.050 --> 00:19:01.040\nAnd so, and then, destination\n\n280\n00:19:04.540 --> 00:19:07.490\naddress, may have to space this\nout a little bit differently.\n\n281\n00:19:07.490 --> 00:19:08.530\n&gt;&gt; Yeah, I guess so.\n\n282\n00:19:08.530 --> 00:19:11.250\n&gt;&gt; Yeah,\nI forget that destination is a long word-\n\n283\n00:19:11.250 --> 00:19:11.880\n&gt;&gt; It's a long word, yeah.\n\n284\n00:19:11.880 --> 00:19:16.800\n&gt;&gt; It is, the dest addr, that sounds\nlike Death Adder, that really does.\n\n285\n00:19:16.800 --> 00:19:18.027\n&gt;&gt; Does sound like it.\n\n286\n00:19:18.027 --> 00:19:22.263\n&gt;&gt; That sounds like a snake, and then we\nshould probably actually put an R on addr\n\n287\n00:19:22.263 --> 00:19:24.623\nhere, and then let's just say protocol.\n\n288\n00:19:28.676 --> 00:19:31.805\nYou can format it,\nsince you're writing the tool,\n\n289\n00:19:31.805 --> 00:19:36.230\nyou actually get to define what the format\nis, I do love the power in that.\n\n290\n00:19:37.260 --> 00:19:42.102\nSo this is just protocol, and\n\n291\n00:19:42.102 --> 00:19:48.892\nlet's actually move these over like so.\n\n292\n00:19:48.892 --> 00:19:54.534\nAll right, so\nnow I'll say format(self._dict_),\n\n293\n00:19:54.534 --> 00:19:58.800\nthis is a weird little\ntrick that I use a lot.\n\n294\n00:19:58.800 --> 00:20:02.570\nI'm not necessarily saying you should\ndo this in widget software, but\n\n295\n00:20:02.570 --> 00:20:06.590\njust pulling out the pieces of\ninformation, by naming the template\n\n296\n00:20:06.590 --> 00:20:10.768\nportion as the same as you\ndid in the data attributes.\n\n297\n00:20:10.768 --> 00:20:16.490\nSo source addr is the same, and then just\nsaying, I forgot a piece, this ** is\n\n298\n00:20:16.490 --> 00:20:21.700\nto say, just blow this apart and just give\nme the pieces that match those formats.\n\n299\n00:20:21.700 --> 00:20:25.795\nNot saying you should that all that time,\nbut just for the sake of brevity.\n\n300\n00:20:25.795 --> 00:20:26.445\n&gt;&gt; Quick and dirty.\n\n301\n00:20:26.445 --> 00:20:30.424\n&gt;&gt; Quick and dirty, I do enjoy it,\nall right, well, here we go, Daniel,\n\n302\n00:20:30.424 --> 00:20:31.747\nlet's see if it works.\n\n303\n00:20:31.747 --> 00:20:35.844\nPython 3, what'd I call it,\na-ha, there we go, and\n\n304\n00:20:35.844 --> 00:20:40.137\nI forgot to change the sniffer,\nso no, it doesn't work.\n\n305\n00:20:40.137 --> 00:20:44.371\n&gt;&gt; [LAUGH]\n&gt;&gt; Silly me, all right.\n\n306\n00:20:44.371 --> 00:20:47.070\n&gt;&gt; You mean the sniffer needs to\nactually work with this thing?\n\n307\n00:20:47.070 --> 00:20:51.902\n&gt;&gt; It's crazy, so crazy,\nand there's my vim command,\n\n308\n00:20:51.902 --> 00:20:55.273\ncuz my escape key didn't get caught.\n\n309\n00:20:55.273 --> 00:20:59.411\n&gt;&gt; Registered, you love that little LCD\ndisplay you get on top of that thing.\n\n310\n00:20:59.411 --> 00:21:01.843\n&gt;&gt; Man, it's, [SOUND].\n\n311\n00:21:01.843 --> 00:21:03.273\n&gt;&gt; [LAUGH]\n&gt;&gt; There's nothing better.\n\n312\n00:21:03.273 --> 00:21:04.243\n&gt;&gt; The struggle is real.\n\n313\n00:21:04.243 --> 00:21:08.826\n&gt;&gt; Nothing better, but there we go,\nwe have our ethernet frame.\n\n314\n00:21:08.826 --> 00:21:11.952\nAnd for each packet,\nwe also have our IP header,\n\n315\n00:21:11.952 --> 00:21:14.630\nif the ethernet frame's protocol is 8.\n\n316\n00:21:15.960 --> 00:21:20.690\nSo boom, we're gonna see\nethernet frames regardless, but\n\n317\n00:21:20.690 --> 00:21:24.330\nif we ever get one where the protocol is\ndifferent than 8, it will not print out\n\n318\n00:21:24.330 --> 00:21:29.370\nthe IP header because, well,\nit doesn't make any sense to have that.\n\n319\n00:21:29.370 --> 00:21:33.162\nBut that is a nice packet sniffing,\nnow if I can just kinda bundle this up,\n\n320\n00:21:33.162 --> 00:21:36.840\nmaybe I could go crazy, and\nstart to send this back.\n\n321\n00:21:36.840 --> 00:21:40.690\nMaybe I'll start this up as a server that\nopens an additional socket connection and\n\n322\n00:21:40.690 --> 00:21:43.880\npipes it somewhere else,\ninstead of standard out like we have here.\n\n323\n00:21:43.880 --> 00:21:48.282\nBut we have our IP header,\nwe have our ethernet frame.\n\n324\n00:21:48.282 --> 00:21:53.253\nThere's a few more things we wanna do, but\nI think this is a good little chunk point.\n\n325\n00:21:53.253 --> 00:21:57.213\nBecause even though it's a short\namount of code, there is a lot there,\n\n326\n00:21:57.213 --> 00:21:58.997\nespecially after that unpack.\n\n327\n00:21:58.997 --> 00:22:03.369\nWhere we're grabbing the next 20 bytes and\nunpacking them to the respective data\n\n328\n00:22:03.369 --> 00:22:07.428\ntypes, and then doing some transformations\nthere, so a little bit of code,\n\n329\n00:22:07.428 --> 00:22:08.700\nstill a lot in there.\n\n330\n00:22:08.700 --> 00:22:10.870\n&gt;&gt; Yeah definitely, for\na little bit of effort,\n\n331\n00:22:10.870 --> 00:22:13.050\nyou get a lot of output\ninto your screen there.\n\n332\n00:22:13.050 --> 00:22:16.467\nAnd a lot of information that could be\npertinent to you and your environments.\n\n333\n00:22:16.467 --> 00:22:20.835\nEspecially if you're working security, or\nmaybe working as a penetration tester,\n\n334\n00:22:20.835 --> 00:22:23.440\nthings like this can\ncome very much in handy.\n\n335\n00:22:23.440 --> 00:22:24.501\nJustin, thanks so much for\n\n336\n00:22:24.501 --> 00:22:27.099\nshowing us how we could do this\ninside of our Python environments.\n\n337\n00:22:27.099 --> 00:22:29.668\nWe thank you good folks out there for\nwatching, but\n\n338\n00:22:29.668 --> 00:22:31.890\nwe are at that portion\nwhere we call it a day.\n\n339\n00:22:31.890 --> 00:22:34.494\nThanks for watching yet again,\nsigning off for DevProTV,\n\n340\n00:22:34.494 --> 00:22:36.117\nI've been your host Daniel Lowrie.\n\n341\n00:22:36.117 --> 00:22:37.578\n&gt;&gt; And I'm Justin Dennison.\n\n342\n00:22:37.578 --> 00:22:39.743\n&gt;&gt; And we'll see you next time.\n\n343\n00:22:39.743 --> 00:22:44.607\n[MUSIC]\n\n",
          "vimeoId": "228971562"
        },
        {
          "description": "In this episode, Daniel and Justin build upon their Sniffer program to make it extract only TCP segments from the RAW TCP data and then have that printed to the screen.",
          "length": "1882",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-5-tcp_segments-080917-PGM.00_56_52_20.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-5-tcp_segments-080917-PGM.00_56_52_20.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-5-tcp_segments-080917-PGM.00_56_52_20.Still001-sm.jpg",
          "title": "TCP Segments",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.763 --> 00:00:14.641\nAll right greetings everyone and\n\n3\n00:00:14.641 --> 00:00:17.733\nwelcome back to another\ngreat episode of DEVPRO.TV.\n\n4\n00:00:17.733 --> 00:00:22.065\nI'm your host Daniel Lowry and in today's\nepisode well we're continuing on with\n\n5\n00:00:22.065 --> 00:00:26.271\nour series Pn Python for security that's\nright joining us back in the studio yet\n\n6\n00:00:26.271 --> 00:00:30.881\nagain lending his expertise on that topic\nto us, our good friend Mr. Justin Denison.\n\n7\n00:00:30.881 --> 00:00:32.907\nJustin, welcome back my man and\nhow is it going today?\n\n8\n00:00:32.907 --> 00:00:36.198\n&gt;&gt; It is going fantastic once I\nwas finally able to wake up and\n\n9\n00:00:36.198 --> 00:00:39.231\nget out of bed this morning,\nthings are going well.\n\n10\n00:00:39.231 --> 00:00:42.094\nIt is I'm not a morning person by trade,\nand how are you today Dan?\n\n11\n00:00:42.094 --> 00:00:47.012\n&gt;&gt; I'm doing great as well as yourself\nI'm not a morning person Gone over that\n\n12\n00:00:47.012 --> 00:00:49.980\nhump today and\nready to do some shows today and\n\n13\n00:00:49.980 --> 00:00:53.338\nwe're moving more into our python for\nsecurity and\n\n14\n00:00:53.338 --> 00:00:57.971\nstill kind of digging in to playing\naround with TCP and UDP even right?\n\n15\n00:00:59.050 --> 00:01:04.050\n&gt;&gt; The ultimate goal in this episode is\nto go back to a couple previous episodes.\n\n16\n00:01:04.050 --> 00:01:09.170\nWe build our very basic package and\nover the last couple of episodes.\n\n17\n00:01:09.170 --> 00:01:13.130\nAnd definitely if you haven't checked\nthose out go check those out cuz\n\n18\n00:01:13.130 --> 00:01:15.360\nthose are context for\nwhat we're gonna do now.\n\n19\n00:01:15.360 --> 00:01:16.710\nWe're kind of continuing on.\n\n20\n00:01:17.770 --> 00:01:22.600\nWe're going to check to see,\nis this a TCP-type packet?\n\n21\n00:01:22.600 --> 00:01:25.910\nAnd if it is,\nI wanna grab the data off of that and\n\n22\n00:01:25.910 --> 00:01:30.580\nkinda parse it to pieces and\nget any information that I can from it.\n\n23\n00:01:30.580 --> 00:01:36.350\nNow, the ultimate goal is just to\nget the relevent information and\n\n24\n00:01:36.350 --> 00:01:39.840\nstill kinda just keep the left\nover information, if there is any.\n\n25\n00:01:39.840 --> 00:01:41.994\nWhat's interesting though,\n\n26\n00:01:41.994 --> 00:01:46.890\nis a lot of times if you have a TCP\npacket and let's say it's port 80.\n\n27\n00:01:46.890 --> 00:01:51.830\nThe remaining data is possibly a HTTP\nrequest, all right some kind of\n\n28\n00:01:51.830 --> 00:01:56.870\nrequest headers or maybe it's\nan actual response through those.\n\n29\n00:01:56.870 --> 00:01:59.750\nSo we'll play around with\nthat a little bit and then,\n\n30\n00:01:59.750 --> 00:02:04.480\nwe might dive into UDP packets,\nlet me necessarily be so but In\n\n31\n00:02:04.480 --> 00:02:09.630\nanother episode there are a whole bunch of\nthese kind of rinse and repeat operations.\n\n32\n00:02:09.630 --> 00:02:12.310\nI'm gonna be honest with you and\n\n33\n00:02:12.310 --> 00:02:15.685\nthe thing around this stuff,\nI didn't know that existed.\n\n34\n00:02:15.685 --> 00:02:18.772\n&gt;&gt; [LAUGH]\n&gt;&gt; So, but ultimately our goal on this\n\n35\n00:02:18.772 --> 00:02:23.960\nepisode is well TCP, so\nlet's go ahead and review, where are we?\n\n36\n00:02:23.960 --> 00:02:26.532\nAnd then let's get going\nto where we're going.\n\n37\n00:02:26.532 --> 00:02:32.529\nSo let's go ahead and take a look at where\nwe are now and so I have this socket and\n\n38\n00:02:32.529 --> 00:02:38.641\ncapture and P cap and these net types\nthat we've viewed on previous episodes.\n\n39\n00:02:38.641 --> 00:02:43.611\nI currently have a P cap file It's kind of\njust commented out because I don't want to\n\n40\n00:02:43.611 --> 00:02:46.102\ncapture every time we're testing this.\n\n41\n00:02:46.102 --> 00:02:49.463\nBut it is available there if I want\nto save these if we get files that I\n\n42\n00:02:49.463 --> 00:02:50.913\ncan analyze later, right?\n\n43\n00:02:50.913 --> 00:02:53.780\nExtract them, something of that nature.\n\n44\n00:02:53.780 --> 00:02:58.640\nAnd as it stands, I'm printing\nthe ethernet frame and the IP header.\n\n45\n00:02:58.640 --> 00:03:01.410\nNow, what I'm talking about for\n\n46\n00:03:01.410 --> 00:03:06.030\nthe TCP segments is that IP\nheader's going to have a protocol.\n\n47\n00:03:06.030 --> 00:03:10.880\nAnd based on that protocol, I'm then gonna\nbe able to say, okay, this is a TCP type,\n\n48\n00:03:10.880 --> 00:03:14.950\nlet me parse it like a TCP type packet,\ncool,\n\n49\n00:03:14.950 --> 00:03:17.160\nlet me grab this TCP segment out of it,\nrather.\n\n50\n00:03:18.580 --> 00:03:23.841\nAnd there are other way, ICMP, and\nthere are some other ones UDP.\n\n51\n00:03:23.841 --> 00:03:25.844\nThere was one row, I can't think of,\n\n52\n00:03:25.844 --> 00:03:29.000\nright off the top of my head\nthat I did some research in.\n\n53\n00:03:29.000 --> 00:03:33.900\nBut typically, what interests me,\npersonally, I'm gonna put some bias in\n\n54\n00:03:33.900 --> 00:03:38.900\nhere, admittedly so, is TCP and\nUDP because of the things that I do.\n\n55\n00:03:38.900 --> 00:03:41.840\nThose are typically the types\nthat I'm looking for.\n\n56\n00:03:42.930 --> 00:03:46.300\nSo, let's see how this works.\n\n57\n00:03:46.300 --> 00:03:50.503\nSo sudo phyton3 and sniffer, there we go.\n\n58\n00:03:52.948 --> 00:03:57.790\nAnd boom, as its kind of running\nthrough here is my ethernet frame and\n\n59\n00:03:57.790 --> 00:03:59.510\nhere is my IP header.\n\n60\n00:03:59.510 --> 00:04:04.441\nNow I'm only gonna get an IP\nheader if my ethernet frame is\n\n61\n00:04:04.441 --> 00:04:08.448\nof protocol 8 and\nnotice here is a protocol for\n\n62\n00:04:08.448 --> 00:04:13.205\nthe IP headers there's 6,\n17 what are we gonna do?\n\n63\n00:04:13.205 --> 00:04:19.016\nWell let me make sure I have this all\nin order here, I have paper abounds so\n\n64\n00:04:19.016 --> 00:04:23.040\nthis is looking for\nthose pieces of information.\n\n65\n00:04:23.040 --> 00:04:28.371\nNow I'd really like to pull\nthose pieces to the side I have\n\n66\n00:04:28.371 --> 00:04:33.705\na two string method a dunder\nSTR which allows the printing\n\n67\n00:04:33.705 --> 00:04:38.814\nout like this, but\nI don't have all the information,\n\n68\n00:04:38.814 --> 00:04:43.591\nright so this TCP segment\nif my IP header protocol is\n\n69\n00:04:43.591 --> 00:04:48.063\nthe number six then I can\nextract a TCP segment.\n\n70\n00:04:48.063 --> 00:04:54.093\nIt's going to be something like this,\n\n71\n00:04:54.093 --> 00:04:59.758\nif IP header.protocol equals six,\n\n72\n00:04:59.758 --> 00:05:03.970\nthen this is a tcp segment.\n\n73\n00:05:05.130 --> 00:05:10.697\nLike so, and let's rerun that and\nsee when is that going to happen, right?\n\n74\n00:05:10.697 --> 00:05:12.080\nIs that happening all the time?\n\n75\n00:05:12.080 --> 00:05:13.879\nIs that all the packets were getting?\n\n76\n00:05:13.879 --> 00:05:16.203\nNow, full disclosure, I am more or\n\n77\n00:05:16.203 --> 00:05:20.780\nless just refreshing Firefox to call\nsome network traffic on this VM.\n\n78\n00:05:20.780 --> 00:05:24.657\nSo I suspect the majority of\nwhat's happening, is probably TCP,\n\n79\n00:05:24.657 --> 00:05:28.061\nthat doesn't guarantee\nthat's all that's happening.\n\n80\n00:05:28.061 --> 00:05:35.530\nSo, if I come back and I rerun sudo\npython3 sniffer, just like that.\n\n81\n00:05:35.530 --> 00:05:37.363\nLooks like I'm gonna have to, there we go.\n\n82\n00:05:37.363 --> 00:05:39.120\nSo notice TCP Segment.\n\n83\n00:05:40.310 --> 00:05:43.639\nCool.\nLooks like all I'm getting now is just\n\n84\n00:05:43.639 --> 00:05:44.868\nTCP Segments.\n\n85\n00:05:44.868 --> 00:05:49.310\nSo it probably but who's make, there\nwas one flipped off the screen before.\n\n86\n00:05:49.310 --> 00:05:54.307\nIf you rewind this,\nthere's an IP protocol 17,\n\n87\n00:05:54.307 --> 00:06:00.363\nIP header protocol 17,\nwhich is not a TCP segment, right?\n\n88\n00:06:00.363 --> 00:06:03.556\nBut most of what we're\ngetting is TCP segments, so\n\n89\n00:06:03.556 --> 00:06:06.850\nit probably behooves us\nto handle those first.\n\n90\n00:06:06.850 --> 00:06:09.030\nNow, this is obviously dependent\non the type of network and\n\n91\n00:06:09.030 --> 00:06:13.270\nthe services that you're trying\nto just Snoop around on, right?\n\n92\n00:06:13.270 --> 00:06:14.740\nBecause these are our web services,\n\n93\n00:06:14.740 --> 00:06:18.450\nthis is the most of the traffic\nthat we're going to get.\n\n94\n00:06:18.450 --> 00:06:24.652\nSo, with that said, here we got like,\nI think it's, connection established.\n\n95\n00:06:24.652 --> 00:06:25.914\nYoue don't say,\nI think I all ready had one.\n\n96\n00:06:25.914 --> 00:06:26.694\n&gt;&gt; I think so.\n\n97\n00:06:26.694 --> 00:06:27.762\n&gt;&gt; Perform there, good buddy.\n\n98\n00:06:27.762 --> 00:06:31.956\n&gt;&gt; So what I want is from net types,\nI want a TC segment.\n\n99\n00:06:31.956 --> 00:06:34.701\nTCP segment class that\nwill do the parsing,\n\n100\n00:06:34.701 --> 00:06:39.530\nvery similar to our ethernet frame,\nas well as our IP header.\n\n101\n00:06:39.530 --> 00:06:44.370\nSo if I come into net types,\nI can now start\n\n102\n00:06:44.370 --> 00:06:48.880\nmaking My TPC segment.\n\n103\n00:06:48.880 --> 00:06:54.590\nSo TPC segment like so looks so familiar.\n\n104\n00:06:54.590 --> 00:06:58.660\nWell, that's because we're just\ncreating a great deal of objects that\n\n105\n00:06:58.660 --> 00:07:03.150\nkind of hand off the left over data\nto create this waterfall approach,\n\n106\n00:07:03.150 --> 00:07:09.110\nthis step down that allows us\nto make things really easy.\n\n107\n00:07:09.110 --> 00:07:16.720\nThe length of the TCP segment that\nactually contains information is 20 bucks.\n\n108\n00:07:16.720 --> 00:07:23.285\nAnd by having that length there I can say,\nunpacked data maybe\n\n109\n00:07:23.285 --> 00:07:28.680\nequals, let me.\n\n110\n00:07:28.680 --> 00:07:29.726\nThere we go.\n\n111\n00:07:29.726 --> 00:07:35.941\nSo boom, I can unpack and\nwhat are we unpacking?\n\n112\n00:07:35.941 --> 00:07:43.439\nSo TCP segments,\nare this format string, llbbhhh.\n\n113\n00:07:43.439 --> 00:07:44.178\nOkay?\n\n114\n00:07:44.178 --> 00:07:47.906\nNow, if I go and look to the struct\ndocumentation I recommend that you\n\n115\n00:07:47.906 --> 00:07:50.617\nalways look at the Python\nstruct documentation.\n\n116\n00:07:50.617 --> 00:07:54.522\nBelieve it or not if you learn to read\nit a little bit it will save you a whole\n\n117\n00:07:54.522 --> 00:07:55.686\nbunch of heart ache.\n\n118\n00:07:55.686 --> 00:08:00.425\nSo, if I come H L and B, I wanna take\na look, look it's like I prepared for\n\n119\n00:08:00.425 --> 00:08:04.892\nthis it's exactly the screen I needed\nto be It's the craziest thing.\n\n120\n00:08:04.892 --> 00:08:08.614\n&gt;&gt; [LAUGH]\n&gt;&gt; So I'm unassigned which is two and\n\n121\n00:08:08.614 --> 00:08:14.490\nL which is unsigned long which is four,\nand a B capital B which is a one okay?\n\n122\n00:08:14.490 --> 00:08:19.464\nSo, those should add up to 20 because\nthat's how it's going to parse a part\n\n123\n00:08:19.464 --> 00:08:23.748\nin addition to I'm going to have\na tuple that is one, two, three,\n\n124\n00:08:23.748 --> 00:08:26.903\nfour, five, six, seven eight, nine pieces.\n\n125\n00:08:26.903 --> 00:08:30.203\nI'm gonna have nine element\ntuple that I can unpack.\n\n126\n00:08:30.203 --> 00:08:31.860\nBut what was H?\n\n127\n00:08:31.860 --> 00:08:33.399\nSee, it's gonna save\nyou a lot fo heartache.\n\n128\n00:08:33.399 --> 00:08:36.772\n&gt;&gt; [LAUGH]\n&gt;&gt; 2, 4, 6, 8, 10 and\n\n129\n00:08:36.772 --> 00:08:40.291\nthen these are 1s so that's 12.\n\n130\n00:08:40.291 --> 00:08:45.666\nAnd these are four-piece so\nthat's 16 and 20, so that's 20.\n\n131\n00:08:45.666 --> 00:08:46.914\nThat means that,\n\n132\n00:08:46.914 --> 00:08:52.410\nthat's going to unpack the 20 bytes\nthat is our segment length, okay?\n\n133\n00:08:52.410 --> 00:08:54.780\nSo how am I going to\ngrab that information?\n\n134\n00:08:54.780 --> 00:08:59.917\nWell I'm going to say,\nI start at 0 and go to self.length.\n\n135\n00:08:59.917 --> 00:09:04.865\nNow you will notice from a programming\npractice this is very repetitive some\n\n136\n00:09:04.865 --> 00:09:06.730\nof this is very repetitive.\n\n137\n00:09:06.730 --> 00:09:10.063\nAnd I aired on the side of\ncaution of being very explicit,\n\n138\n00:09:10.063 --> 00:09:13.676\neven though we're violating\nsome programming principles,\n\n139\n00:09:13.676 --> 00:09:17.231\ncuz ultimately it's not our\ngoal to have the best software.\n\n140\n00:09:17.231 --> 00:09:20.600\nOr best program, code structure here.\n\n141\n00:09:20.600 --> 00:09:25.090\nIt's about understanding how this\ninteracts from a security standpoint.\n\n142\n00:09:25.090 --> 00:09:29.550\nIf we go and look that length and\nunpacking, that is always the case.\n\n143\n00:09:29.550 --> 00:09:34.660\nThere is an argument to be said that\nthere's an abstraction that I could apply\n\n144\n00:09:34.660 --> 00:09:37.479\nand kind of pull all of this\nout into an abstract class.\n\n145\n00:09:38.580 --> 00:09:41.643\nOr Python doesn't have a actually,\nI take that back.\n\n146\n00:09:41.643 --> 00:09:45.070\nThere are new collection types that\nyou can mark things abstract, sorry.\n\n147\n00:09:45.070 --> 00:09:47.360\nDisregard that previous statement.\n\n148\n00:09:47.360 --> 00:09:51.060\nSo I could pull that out and\nthen write a lot less code for IP header,\n\n149\n00:09:51.060 --> 00:09:52.840\nethernet frame, so on and so forth.\n\n150\n00:09:54.500 --> 00:09:58.760\nI like clarity over really trying to\nmake it the best code, ever, right?\n\n151\n00:09:58.760 --> 00:10:04.500\nReadable code that works is more\nimportant, than code that works but\n\n152\n00:10:04.500 --> 00:10:09.570\nI have a hard time understanding\nhow things kind of come together.\n\n153\n00:10:09.570 --> 00:10:13.770\nSo that's kind of my own personal bias,\nat least for the first pass.\n\n154\n00:10:13.770 --> 00:10:16.744\nNow, if this grows in large enough size,\nand\n\n155\n00:10:16.744 --> 00:10:22.066\nthis is a tool that I used a whole bunch,\nI would probably spend time to refine it,\n\n156\n00:10:22.066 --> 00:10:25.532\nmake it a little more,\na little easier to maintain.\n\n157\n00:10:25.532 --> 00:10:28.568\nBecause any of that overlapping code,\nlike the length,\n\n158\n00:10:28.568 --> 00:10:31.737\nsetting the length on\neach of these classes.\n\n159\n00:10:31.737 --> 00:10:34.407\nI could probably abstract that out and\n\n160\n00:10:34.407 --> 00:10:39.331\nthis would make that a class that\nitself takes that length argument and\n\n161\n00:10:39.331 --> 00:10:43.349\nthen boom all the other parsing\njust kind of occurs okay?\n\n162\n00:10:43.349 --> 00:10:45.361\nSo we have our unpacked data here.\n\n163\n00:10:45.361 --> 00:10:50.950\nThat was a nice little digression\non software practices.\n\n164\n00:10:50.950 --> 00:10:52.052\n&gt;&gt; Yeah, philosophy of creating program.\n\n165\n00:10:52.052 --> 00:10:55.744\n&gt;&gt; So what can we get from a TCP segment?\n\n166\n00:10:55.744 --> 00:10:59.150\nWell, I can get the source port.\n\n167\n00:10:59.150 --> 00:11:02.414\nAnd that's going to be unpacked data, so\n\n168\n00:11:02.414 --> 00:11:07.731\nkind of our expanded data and\nthat's going to be the first element or\n\n169\n00:11:07.731 --> 00:11:13.421\n0 indexed element of the tuple, and\nI'm gonna get a destination port,\n\n170\n00:11:13.421 --> 00:11:17.741\nand that's going to be in second,\nsecond or index 1.\n\n171\n00:11:17.741 --> 00:11:21.414\nI can also get the sequence.\n\n172\n00:11:21.414 --> 00:11:27.512\nAnd, I'm showing you all the properties\nthat I was able to pull off from this.\n\n173\n00:11:27.512 --> 00:11:31.600\nThat doesn't mean that I would necessarily\nalways do all of these, right?\n\n174\n00:11:31.600 --> 00:11:36.000\nMaybe I only care about source and\ndestination port just to kind of gleam,\n\n175\n00:11:36.000 --> 00:11:41.720\nhey what's going on here, then that might\nbe, if I was doing this in situ, I'm just\n\n176\n00:11:41.720 --> 00:11:44.750\ngoing to get the source and destination\nport and forget about the rest of it.\n\n177\n00:11:44.750 --> 00:11:50.717\nSo theres a sequence and\nthen I can get an acknowledgement.\n\n178\n00:11:50.717 --> 00:11:55.281\nAcknowledge, that's kind of a hard\n\n179\n00:11:55.281 --> 00:12:00.291\nword to spell and then unpacked data 3.\n\n180\n00:12:00.291 --> 00:12:03.520\nAnd then, I can get an offset.\n\n181\n00:12:07.170 --> 00:12:10.490\nThere we go, and that's unpacked data 4.\n\n182\n00:12:10.490 --> 00:12:14.390\nAnd in a previous episode,\nwe talked about bit shift operators.\n\n183\n00:12:14.390 --> 00:12:18.708\nAnd using this (D:) offset reserve\nwe can actually do a calculation as\n\n184\n00:12:18.708 --> 00:12:22.474\nbitshifted and get the header\nlength an actual header length.\n\n185\n00:12:22.474 --> 00:12:27.646\nNow, kinda already know\nthe header length because\n\n186\n00:12:27.646 --> 00:12:32.936\nthat's how we parsed it but\njust in the scope of being\n\n187\n00:12:32.936 --> 00:12:38.347\ncomplete I will show said thing,\nso header length and\n\n188\n00:12:38.347 --> 00:12:43.620\nthat is Offset.\n\n189\n00:12:46.040 --> 00:12:48.891\nSo today apparently my\nven skills are better but\n\n190\n00:12:48.891 --> 00:12:50.962\nmy typing skills have regressed.\n\n191\n00:12:50.962 --> 00:12:53.450\nSo there we go.\n\n192\n00:12:53.450 --> 00:12:57.390\nSo we're gonna bit shift by four, that's\ndividing by two to the fourth power.\n\n193\n00:12:57.390 --> 00:12:58.763\nSo there we go.\n\n194\n00:12:58.763 --> 00:13:03.822\nAnd then finally, we're going to keep the\nleft over data, like we have otherwise,\n\n195\n00:13:03.822 --> 00:13:07.886\njust keep the portion that we\nstripped off the first 20 bytes, and\n\n196\n00:13:07.886 --> 00:13:10.330\nthen we're going to keep the left over.\n\n197\n00:13:10.330 --> 00:13:16.280\nThat way if we need it for\nsomething else, we can pass it along.\n\n198\n00:13:18.530 --> 00:13:24.620\nWe're just gonna take data and start\nthe length and go all the way to the end.\n\n199\n00:13:24.620 --> 00:13:30.170\n&gt;&gt; Justin quickly I was looking at your\ncode there I think you missed an a and.\n\n200\n00:13:30.170 --> 00:13:34.629\n&gt;&gt; That might cause an issue, you're right\nI actually transposed the P and the A.\n\n201\n00:13:34.629 --> 00:13:37.377\n&gt;&gt; [LAUGH]\n&gt;&gt; See this is why we program.\n\n202\n00:13:37.377 --> 00:13:40.410\n&gt;&gt; [CROSSTALK]\n&gt;&gt; Now this actually brings up\n\n203\n00:13:40.410 --> 00:13:45.002\na good point, you've seen this\nin several of our episodes.\n\n204\n00:13:45.002 --> 00:13:49.246\nIt may seem that Daniel's just doing who\nknows maybe fixing some Raman off screen.\n\n205\n00:13:49.246 --> 00:13:50.764\n&gt;&gt; [LAUGH] That's delicious.\n\n206\n00:13:50.764 --> 00:13:54.016\n&gt;&gt; But he's actually looking through and\nhelping me point out errors and\n\n207\n00:13:54.016 --> 00:13:56.785\nwell that's typically how things\nin teams are going to go.\n\n208\n00:13:56.785 --> 00:13:59.370\nSo thank you let's actually\nfix that because that could\n\n209\n00:13:59.370 --> 00:14:01.132\nhave been a horrible thing to happen.\n\n210\n00:14:01.132 --> 00:14:05.086\n&gt;&gt; It's funny, here at dev pro and IT pro\nwe have developers working on our website\n\n211\n00:14:05.086 --> 00:14:08.993\nand API's and things that we have so\nthat when you come in, guess what they do?\n\n212\n00:14:08.993 --> 00:14:10.060\nThey code in pairs.\n\n213\n00:14:10.060 --> 00:14:13.308\nThey have screens that face each other so\nthat they're seeing the same thing and\n\n214\n00:14:13.308 --> 00:14:16.862\nthey're both looking through it to make\nsure everything's going to work correctly.\n\n215\n00:14:16.862 --> 00:14:19.952\n&gt;&gt; As long as it's not confrontational.\n\n216\n00:14:19.952 --> 00:14:20.951\nIt's very helpful.\n\n217\n00:14:20.951 --> 00:14:22.860\n&gt;&gt; Yeah.\n&gt;&gt; So thank you, let's fix that.\n\n218\n00:14:22.860 --> 00:14:24.950\nWe don't have to worry about it, boom.\n\n219\n00:14:24.950 --> 00:14:29.210\nSo let's go up here and do just that.\n\n220\n00:14:29.210 --> 00:14:32.413\nI made some sly comment about\nmy VIM skills being better,\n\n221\n00:14:32.413 --> 00:14:35.494\nand then I was going all over\nthe place with the cursor.\n\n222\n00:14:35.494 --> 00:14:36.640\nSo there we go.\n\n223\n00:14:36.640 --> 00:14:38.490\nSo it looks like I have this packet,\n\n224\n00:14:38.490 --> 00:14:41.390\nkind of the segment extracted\nfrom the remaining data.\n\n225\n00:14:41.390 --> 00:14:45.086\nNow, keep in mind this is the IP header\nI'm passing the remaining data so\n\n226\n00:14:45.086 --> 00:14:49.101\nI've already lopped off the ethernet\nframe already lopped off the IP header.\n\n227\n00:14:49.101 --> 00:14:53.430\nSo this is the 20 bytes that are after\nthe initial I think 34 bytes.\n\n228\n00:14:54.470 --> 00:14:58.608\nSo this is bytes number 34 zero index all\n\n229\n00:14:58.608 --> 00:15:02.991\nthe way up to 54 non\ninclusive I think yes.\n\n230\n00:15:02.991 --> 00:15:07.578\nSo let's see if that works\njust a quick little look here,\n\n231\n00:15:07.578 --> 00:15:11.209\nso I'm gonna go into our sniffer,\nand boom,\n\n232\n00:15:11.209 --> 00:15:15.700\nboom, boom,\ninstead of printing IP, excuse me,\n\n233\n00:15:15.700 --> 00:15:21.570\ninstead of printing TCP segment as\na string, I'm just gonna say, TCP.\n\n234\n00:15:21.570 --> 00:15:24.429\nAnd say TCPSegment and\n\n235\n00:15:24.429 --> 00:15:30.457\nI'm gonna parse the ipheaders\nleft over data.\n\n236\n00:15:30.457 --> 00:15:35.160\nLeftover_data like so okay?\n\n237\n00:15:35.160 --> 00:15:38.760\nSo that's the data that I'm passing in\nin order to construct the TCPSegment.\n\n238\n00:15:38.760 --> 00:15:43.541\nAnd then I'm gonna say, print(tcp and\n\n239\n00:15:43.541 --> 00:15:50.720\njust show me what is contained\nin this object as data, okay?\n\n240\n00:15:50.720 --> 00:15:58.460\nNow, this will actually error out until\nI import the TCPSegment, just like so.\n\n241\n00:15:58.460 --> 00:16:01.432\nSo let's run in,\nsee what kind of traffic we have.\n\n242\n00:16:01.432 --> 00:16:06.098\nI'm going here This always\nmakes me weary when I do this,\n\n243\n00:16:06.098 --> 00:16:12.728\nbecause I'm afraid we're going to see\ntraffic or someone shouldn't see that.\n\n244\n00:16:12.728 --> 00:16:18.150\nSo I'm just going to stop it real quick\n&gt;&gt; Is that a password?\n\n245\n00:16:18.150 --> 00:16:20.980\n&gt;&gt; That's somebody's password, not mine.\n\n246\n00:16:20.980 --> 00:16:25.510\nIf we come here and\nsee header length, acknowledgement,\n\n247\n00:16:25.510 --> 00:16:31.240\nsource port I'll set destination port 443.\n\n248\n00:16:31.240 --> 00:16:35.160\nInteresting, well what traffic\ndo you know goes to 443?\n\n249\n00:16:35.160 --> 00:16:39.030\n&gt;&gt; Typically its secured,\nencrypted traffic for web, right?\n\n250\n00:16:39.030 --> 00:16:39.939\nSSL, TLS.\n\n251\n00:16:39.939 --> 00:16:41.315\n&gt;&gt; Yeah, yeah.\n\n252\n00:16:41.315 --> 00:16:47.022\n&gt;&gt; So if we go through here, we can\nsee source port and destination port.\n\n253\n00:16:47.022 --> 00:16:50.363\nSo you can make some assumptions\nabout what traffic's flowing there.\n\n254\n00:16:50.363 --> 00:16:53.610\nNow, that assumes you're using standard\nports and things of that nature.\n\n255\n00:16:53.610 --> 00:16:56.410\nBut we have that data that's\nactually being parsed.\n\n256\n00:16:56.410 --> 00:16:57.410\nAwesome.\n\n257\n00:16:57.410 --> 00:16:59.480\nLet's actually make this\nkind of stringified.\n\n258\n00:16:59.480 --> 00:17:02.250\nSo we can see it like we have for\nour IP header.\n\n259\n00:17:02.250 --> 00:17:05.730\nI don't know if we're\nquite finished there yet.\n\n260\n00:17:05.730 --> 00:17:09.180\nWe had one little thing that\nwe can do with TCP segments\n\n261\n00:17:09.180 --> 00:17:10.060\nthat's a little bit different.\n\n262\n00:17:10.060 --> 00:17:16.689\nLet's go to net types and\nadd that daunder string method.\n\n263\n00:17:16.689 --> 00:17:20.890\nSo daunder string and here we go.\n\n264\n00:17:20.890 --> 00:17:27.570\nWe have a self and we actually have\nthe appropriate number of that.\n\n265\n00:17:27.570 --> 00:17:30.630\nIt's like I have done before it's crazy.\n\n266\n00:17:30.630 --> 00:17:33.930\nSo it used to be segment and both.\n\n267\n00:17:33.930 --> 00:17:35.872\nAll right, so what do we have?\n\n268\n00:17:35.872 --> 00:17:38.687\nWe have, a.\n\n269\n00:17:38.687 --> 00:17:39.640\n&gt;&gt; You know what?\n\n270\n00:17:39.640 --> 00:17:43.870\nI'm really gonna care about\nmy source port for this.\n\n271\n00:17:43.870 --> 00:17:46.630\nSo source port, and\nthat will be, src port.\n\n272\n00:17:49.240 --> 00:17:52.510\nAnd then, I want destination port.\n\n273\n00:17:54.220 --> 00:17:57.950\nDestination, that is not\nhow we spell destination.\n\n274\n00:17:57.950 --> 00:18:03.910\nDestination port And\ndest port, like so, okay?\n\n275\n00:18:03.910 --> 00:18:10.133\nSo boom, and then you know what, I'm\nactually going to print the leftover data.\n\n276\n00:18:10.133 --> 00:18:15.220\nThat's because I have something up\nmy sleeve here in just a moment,\n\n277\n00:18:15.220 --> 00:18:17.195\nbut let's just say data.\n\n278\n00:18:17.195 --> 00:18:23.599\nAnd now, I'm gonna just change\nthis to left over data,\n\n279\n00:18:23.599 --> 00:18:30.576\nexcel, the format Boom.\n\n280\n00:18:30.576 --> 00:18:31.330\nAll right.\n\n281\n00:18:31.330 --> 00:18:34.650\nSo we impact the dictionary,\nit will look up by keys,\n\n282\n00:18:34.650 --> 00:18:38.150\nreplace values there just like we've\ndone in the previous episodes.\n\n283\n00:18:38.150 --> 00:18:42.600\nSo Daniel before I hand off here, is there\nanything else that if you were using this\n\n284\n00:18:42.600 --> 00:18:46.190\nto extract TCB segments, that you would\nlike to see other than destination port,\n\n285\n00:18:46.190 --> 00:18:48.400\nsource port and then the remaining data?\n\n286\n00:18:48.400 --> 00:18:51.540\n&gt;&gt; Man I think you've probably\ncovered everything I can think of.\n\n287\n00:18:51.540 --> 00:18:52.880\n&gt;&gt; Well you know what?\n\n288\n00:18:52.880 --> 00:18:53.900\nThen we're gonna go with it.\n\n289\n00:18:53.900 --> 00:18:55.240\n&gt;&gt; Run it up the flag pole, right?\n\n290\n00:18:55.240 --> 00:18:58.560\n&gt;&gt; And the reason I ask you that is,\nif I find out hey,\n\n291\n00:18:58.560 --> 00:19:01.080\nI really need to know about\nthe acknowledgements for what I'm doing.\n\n292\n00:19:01.080 --> 00:19:02.700\nI'm just gonna come back and\nchange the string.\n\n293\n00:19:02.700 --> 00:19:03.370\n&gt;&gt; Right?\n&gt;&gt; Right,\n\n294\n00:19:03.370 --> 00:19:06.950\nI wanna add an acknowledgement label and\nboom there it is.\n\n295\n00:19:06.950 --> 00:19:12.430\nSo once I get it working we will like\nstart making those small tricks as I need.\n\n296\n00:19:12.430 --> 00:19:15.040\nThen all right, so\nthere we go and here we go.\n\n297\n00:19:16.850 --> 00:19:20.340\nThere we go here we go we are going\nall the places it's crazy.\n\n298\n00:19:20.340 --> 00:19:24.530\nSo boom, let's see if we can\nget some traffic going here.\n\n299\n00:19:25.882 --> 00:19:27.692\nWow, there you go.\n\n300\n00:19:27.692 --> 00:19:33.236\nYou have to change the actual\nsniffer to actually print\n\n301\n00:19:33.236 --> 00:19:38.297\nout what you expect instead\nprinting those out but\n\n302\n00:19:38.297 --> 00:19:41.445\nit's going to print (tcp).\n\n303\n00:19:41.445 --> 00:19:42.960\nNow, I'm just printing\nthese just standard out.\n\n304\n00:19:42.960 --> 00:19:44.300\nYou don't necessarily have to do that.\n\n305\n00:19:44.300 --> 00:19:46.760\nI don't know if I would\ndo that realistically.\n\n306\n00:19:46.760 --> 00:19:49.630\nI would either forward them or-\n&gt;&gt; I think put in a file or something.\n\n307\n00:19:49.630 --> 00:19:51.898\n&gt;&gt; Put them in a file or\nsomething of that nature, yeah.\n\n308\n00:19:51.898 --> 00:19:54.638\nSo, boom.\n\n309\n00:19:54.638 --> 00:19:59.020\nFor demonstration,\nwe will do just exactly this.\n\n310\n00:19:59.020 --> 00:19:59.620\n&gt;&gt; Demonstrative.\n\n311\n00:19:59.620 --> 00:20:00.820\n&gt;&gt; Demonstrative.\n\n312\n00:20:00.820 --> 00:20:01.430\nI like that word.\n\n313\n00:20:01.430 --> 00:20:02.057\n&gt;&gt; It's fun to say.\n\n314\n00:20:02.057 --> 00:20:04.406\nBecause it sounds like monster almost.\n\n315\n00:20:04.406 --> 00:20:05.017\n&gt;&gt; Yes, it does.\n\n316\n00:20:05.017 --> 00:20:07.810\nHere we go.\n\n317\n00:20:07.810 --> 00:20:10.060\nThose are our TCP segments.\n\n318\n00:20:10.060 --> 00:20:13.380\nYou'll notice some of the TCP\nsegments have no left over data.\n\n319\n00:20:13.380 --> 00:20:19.410\nAll right cool, well, some of them\ntoo though, they have this giant, and\n\n320\n00:20:19.410 --> 00:20:26.950\nI can't read any of this, however, if I\ncome here and I look, let's see if I can,\n\n321\n00:20:26.950 --> 00:20:31.990\nlet's see if I can get some\nstuff to work that is port 80.\n\n322\n00:20:31.990 --> 00:20:33.810\nThat's a lot.\n\n323\n00:20:33.810 --> 00:20:36.140\nSee, that's another reason I\ndon't necessarily print it out.\n\n324\n00:20:36.140 --> 00:20:39.030\nLet's just stop that.\n\n325\n00:20:39.030 --> 00:20:42.938\nIf we come over here, let me see\nif I can get some port 80 traffic.\n\n326\n00:20:42.938 --> 00:20:47.302\nApparently not.\n\n327\n00:20:47.302 --> 00:20:50.184\nWait a minute, not port 80.\n\n328\n00:20:51.930 --> 00:20:58.370\nPut, actually the 443 stuff should\nactually decode cuz that's https and\n\n329\n00:20:58.370 --> 00:21:01.820\nit still might be header and\nit might be encrypted, who knows?\n\n330\n00:21:01.820 --> 00:21:03.190\nWell, we're about to find out.\n\n331\n00:21:04.500 --> 00:21:10.610\nSo this last little bit, the reason I'm\nputting out that data is in nettypes.\n\n332\n00:21:10.610 --> 00:21:12.930\nFort this TCP segment.\n\n333\n00:21:12.930 --> 00:21:17.730\nThis leftover data,\nit might be the http headers, right?\n\n334\n00:21:17.730 --> 00:21:19.900\nThat's actually might be what the data is.\n\n335\n00:21:19.900 --> 00:21:22.330\nSo it would be nice if you could,\n\n336\n00:21:22.330 --> 00:21:26.430\nI don't know, decode that from\nbinary to some representation.\n\n337\n00:21:27.740 --> 00:21:30.760\nWell, that's actually fairly easy to do.\n\n338\n00:21:30.760 --> 00:21:34.130\nSo, Let's do just that.\n\n339\n00:21:35.570 --> 00:21:38.650\nAnd well we're gonna try to do that.\n\n340\n00:21:38.650 --> 00:21:41.310\nNow this gets a little iffy.\n\n341\n00:21:41.310 --> 00:21:48.440\nThis is going to be\ncalled parse http data.\n\n342\n00:21:48.440 --> 00:21:51.620\nAnd I'm making some\nstrong assumptions here,\n\n343\n00:21:51.620 --> 00:21:56.154\nthere should be additional error handling,\nI should check ports,\n\n344\n00:21:56.154 --> 00:22:00.301\nor have some other way to verify\nthat this is actual http type.\n\n345\n00:22:00.301 --> 00:22:03.141\nOr maybe I should change the method name,\n\n346\n00:22:03.141 --> 00:22:07.766\nbecause it's not really depending on it,\nand it could be any data,\n\n347\n00:22:07.766 --> 00:22:12.476\nIt is more meaningful with the https,\nbecause those kind of come with\n\n348\n00:22:12.476 --> 00:22:16.971\nthese chunks of information that\nare human readable typically.\n\n349\n00:22:16.971 --> 00:22:21.958\nSo we're gonna try, not true,\n\n350\n00:22:21.958 --> 00:22:27.317\nbut try to return data.decode and\n\n351\n00:22:27.317 --> 00:22:30.290\ntwo UTF 8, okay?\n\n352\n00:22:30.290 --> 00:22:34.060\nAnd if there is an exception.\n\n353\n00:22:34.060 --> 00:22:37.320\nAnd now,\nI'm saying any general exception for\n\n354\n00:22:37.320 --> 00:22:42.140\nthat single line which more than likely\nis going to be, hey this is empty or hey\n\n355\n00:22:42.140 --> 00:22:47.930\nthis is how to decode method, because it's\nnot actually still like binary string.\n\n356\n00:22:47.930 --> 00:22:52.320\nThen, I'm just going to return the data,\nokay?\n\n357\n00:22:52.320 --> 00:22:53.600\nSo if it can't be done,\n\n358\n00:22:53.600 --> 00:22:56.872\nit's just gonna give me the data\nthat originally head back.\n\n359\n00:22:56.872 --> 00:23:00.098\nBut by having this method, and\nnotice that the underscore in front,\n\n360\n00:23:00.098 --> 00:23:03.825\nthis is typically not something you're\ngonna be calling from other programs,\n\n361\n00:23:03.825 --> 00:23:05.401\nyou will be calling in internal.\n\n362\n00:23:05.401 --> 00:23:09.046\nIf I really wanted to do,\nI can do two underscores in front and\n\n363\n00:23:09.046 --> 00:23:12.907\nthat actually employs behind\nthe scenes a meddling algorithm,\n\n364\n00:23:12.907 --> 00:23:17.660\nthat will actually change the name\none time so you can't call it easily.\n\n365\n00:23:17.660 --> 00:23:21.740\nSo single underscore is the concept\nof protected even though it's\n\n366\n00:23:21.740 --> 00:23:23.430\nnot actually protected.\n\n367\n00:23:23.430 --> 00:23:25.370\nDouble underscore is\nsupposed to be private.\n\n368\n00:23:25.370 --> 00:23:27.330\nSo you should only use it\ninternal to the class.\n\n369\n00:23:28.520 --> 00:23:32.248\nHowever, Python is,\nhas no way of enforcing set convention.\n\n370\n00:23:32.248 --> 00:23:33.610\n&gt;&gt; [LAUGH]\n&gt;&gt; So you can, you can more or\n\n371\n00:23:33.610 --> 00:23:34.670\nless do whatever you want to.\n\n372\n00:23:34.670 --> 00:23:39.910\nI try to stay with conventions,\nbecause convention have a configuration.\n\n373\n00:23:39.910 --> 00:23:41.690\nWill save you a lot of heart ache.\n\n374\n00:23:41.690 --> 00:23:46.410\nSo by parsing the http data, all of those\nbinary strings that we saw printed out,\n\n375\n00:23:46.410 --> 00:23:49.930\nwe might actually glean some\ninformation from those.\n\n376\n00:23:49.930 --> 00:23:51.240\nOr we may not.\n\n377\n00:23:51.240 --> 00:23:52.481\nWho knows?\n\n378\n00:23:52.481 --> 00:23:54.709\nI make no promises to anyone.\n\n379\n00:23:54.709 --> 00:24:00.436\nSo sudo python 3, and boom.\n\n380\n00:24:00.436 --> 00:24:05.780\nThere we go and if we can just get\nit to load a little bit of traffic.\n\n381\n00:24:05.780 --> 00:24:12.550\nHas no attribute,\nI can't spell apparently.\n\n382\n00:24:12.550 --> 00:24:15.760\nSome of you are yelling at\nthe screen right now being like,\n\n383\n00:24:15.760 --> 00:24:17.070\nthat is not what you said.\n\n384\n00:24:17.070 --> 00:24:18.140\n&gt;&gt; It's one of those days.\n\n385\n00:24:18.140 --> 00:24:18.712\n&gt;&gt; It is, it is.\n\n386\n00:24:18.712 --> 00:24:22.980\nSo here,\nI named the method pack HTTP data.\n\n387\n00:24:22.980 --> 00:24:26.160\nDown below, I call it parse.\n\n388\n00:24:26.160 --> 00:24:28.064\nThose are not the same names.\n\n389\n00:24:28.064 --> 00:24:31.000\n&gt;&gt; No, no, last time I checked,\nthose are two different words.\n\n390\n00:24:31.000 --> 00:24:32.000\n&gt;&gt; They are, they are.\n\n391\n00:24:33.370 --> 00:24:34.680\nJust like so, boom.\n\n392\n00:24:36.744 --> 00:24:39.376\nAnd cross your fingers, here we go.\n\n393\n00:24:39.376 --> 00:24:45.710\nAnd then, boom, and yeah,\nwe get a packet that is not PCP.\n\n394\n00:24:45.710 --> 00:24:51.180\nSo we get some data that is not okay.\n\n395\n00:24:51.180 --> 00:24:58.536\nIt looks like I may have to go\nsomewhere else that is not HTTPS.\n\n396\n00:24:58.536 --> 00:25:02.080\n[SOUND] Yeah, so what are we gonna do?\n\n397\n00:25:02.080 --> 00:25:06.946\nFor the sake of seeing things on\nport 80 that are not encrypted,\n\n398\n00:25:06.946 --> 00:25:11.899\nI'm going to, sudo, I have to install\nnginx to start up a local Web\n\n399\n00:25:11.899 --> 00:25:16.253\nserver on this VM, and that way,\nI can just hit port 80.\n\n400\n00:25:16.253 --> 00:25:17.667\n&gt;&gt; You could use Python.\n\n401\n00:25:17.667 --> 00:25:20.025\n&gt;&gt; Actually I can.\n\n402\n00:25:20.025 --> 00:25:20.810\n&gt;&gt; [LAUGH]\n&gt;&gt; You are silly man.\n\n403\n00:25:20.810 --> 00:25:22.823\n&gt;&gt; I got my moments, I got my moments.\n\n404\n00:25:22.823 --> 00:25:24.786\n&gt;&gt; So\nlet's open up another terminal window.\n\n405\n00:25:24.786 --> 00:25:31.070\nNew terminal, and let's just from\nright here, Python, so Python3.\n\n406\n00:25:31.070 --> 00:25:35.132\nI think you use the Python2.1\nto a great deal So Python3,\n\n407\n00:25:35.132 --> 00:25:38.660\nthe syntax actually changes a little bit.\n\n408\n00:25:38.660 --> 00:25:40.540\nSo HTTP.server-\n&gt;&gt; That's a whole easier actually.\n\n409\n00:25:41.610 --> 00:25:45.334\n&gt;&gt; Yeah, I actually had a lot of\ntime remembering that simple HTTP so\n\n410\n00:25:45.334 --> 00:25:47.309\nlike the capitalization in here.\n\n411\n00:25:47.309 --> 00:25:48.540\nSo HTTP.server.\n\n412\n00:25:48.540 --> 00:25:50.143\n&gt;&gt; And you're gonna get that, right?\n\n413\n00:25:50.143 --> 00:25:51.656\n[CROSSTALK] Losing counts here.\n\n414\n00:25:51.656 --> 00:25:52.700\n[LAUGH]\n&gt;&gt; Or it's broke.\n\n415\n00:25:52.700 --> 00:25:56.424\nSo this is standard HTTP on port 8080, and\n\n416\n00:25:56.424 --> 00:25:59.965\nnow we should be able\nto sniff some traffic.\n\n417\n00:25:59.965 --> 00:26:03.600\nAnd let me actually go to-\n&gt;&gt; To that size.\n\n418\n00:26:03.600 --> 00:26:09.190\n&gt;&gt; Yeah, Localhost8080, and boom,\nthere's a lot of files there.\n\n419\n00:26:09.190 --> 00:26:09.850\n&gt;&gt; A lot.\n\n420\n00:26:09.850 --> 00:26:11.800\n&gt;&gt; There it is, there it is.\n\n421\n00:26:11.800 --> 00:26:16.690\nSo sudo python3, and there we go.\n\n422\n00:26:16.690 --> 00:26:18.298\nSo there's our TCP segment.\n\n423\n00:26:18.298 --> 00:26:22.390\nLet's see here.\n\n424\n00:26:22.390 --> 00:26:27.370\nAnd if we refresh, and-\n&gt;&gt; There it is, port 8080, I just saw it.\n\n425\n00:26:27.370 --> 00:26:28.514\n&gt;&gt; Yep, Port 8080?\n&gt;&gt; Yep.\n\n426\n00:26:28.514 --> 00:26:29.540\n&gt;&gt; It's up here.\n\n427\n00:26:29.540 --> 00:26:30.650\n&gt;&gt; There it is.\n\n428\n00:26:30.650 --> 00:26:34.549\n&gt;&gt; There it is, and\nit's still not quite parsed.\n\n429\n00:26:37.460 --> 00:26:38.452\n&gt;&gt; The way you want.\n\n430\n00:26:38.452 --> 00:26:39.526\n&gt;&gt; The way I want it, right?\n\n431\n00:26:39.526 --> 00:26:42.110\n&gt;&gt; And Justin, that was interesting.\n\n432\n00:26:42.110 --> 00:26:46.365\nWe had just the files kind of showing\ngiving you the directory listing when you\n\n433\n00:26:46.365 --> 00:26:48.950\nstarted the HTTP server using Python.\n\n434\n00:26:48.950 --> 00:26:52.285\nBut are we really gonna get any\nkind of meaningful data from now?\n\n435\n00:26:52.285 --> 00:26:53.570\nIt's not starting in HTML or\n\n436\n00:26:53.570 --> 00:26:57.060\nanything of that nature would\nthat be causing any issues?\n\n437\n00:26:57.060 --> 00:26:58.853\n&gt;&gt; You know, Daniel,\nI think you might be onto something.\n\n438\n00:26:58.853 --> 00:27:02.055\nI think, cuz typically what\nyou're gonna see if it's an HTTP,\n\n439\n00:27:02.055 --> 00:27:04.380\ncuz I'm anticipating it's an HTTP request.\n\n440\n00:27:04.380 --> 00:27:08.970\nThere's gonna be appropriate header\nset and things like that for HTTP.\n\n441\n00:27:08.970 --> 00:27:13.349\nSo what we may need to do is instead\nof using a simple Python one,\n\n442\n00:27:13.349 --> 00:27:18.309\nwe could just install nginx,\nhave it send up its default landing page,\n\n443\n00:27:18.309 --> 00:27:20.973\nsee if we glean some meaningful data.\n\n444\n00:27:20.973 --> 00:27:26.925\nIn addition to we're getting any TCP\ninformation being parsed as HTTP.\n\n445\n00:27:26.925 --> 00:27:32.642\nReally it's probably limited\nto set of limited ports.\n\n446\n00:27:32.642 --> 00:27:34.838\nSo maybe we can filter it out just\nto get rid of some of the noise.\n\n447\n00:27:34.838 --> 00:27:36.117\nI say we can get that.\n\n448\n00:27:36.117 --> 00:27:39.685\nNow, this is one of those things where\nyou're gonna get a nice little golden\n\n449\n00:27:39.685 --> 00:27:40.932\nnugget from time to time.\n\n450\n00:27:40.932 --> 00:27:43.467\n&gt;&gt; [LAUGH]\n&gt;&gt; There's no guarantee that you're still\n\n451\n00:27:43.467 --> 00:27:47.443\ngoing to get meaningful data all\nthe time just because of how things\n\n452\n00:27:47.443 --> 00:27:51.490\nare being served up, especially if\nit's HTTPS and not at all HTTP,\n\n453\n00:27:51.490 --> 00:27:53.551\nyou may get some weirdness there.\n\n454\n00:27:53.551 --> 00:27:55.860\nSo actually let's try those,\nlet's kill our Python server and\n\n455\n00:27:55.860 --> 00:27:56.860\ninstall nginx real quick.\n\n456\n00:27:56.860 --> 00:28:00.126\nI know it's small and\nit's good to go pretty quickly.\n\n457\n00:28:00.126 --> 00:28:04.081\nAnd then let's see if we can actually\nget some read out by modifying our\n\n458\n00:28:04.081 --> 00:28:04.960\nsniffer here.\n\n459\n00:28:04.960 --> 00:28:10.135\nSo let's take a look back at my screen\nand, that's why you're here, Daniel,\n\n460\n00:28:10.135 --> 00:28:15.047\nto help me kind of think through these\nbecause I was about to go and just cry.\n\n461\n00:28:15.047 --> 00:28:17.920\n&gt;&gt; [LAUGH]\n&gt;&gt; So just forget about it.\n\n462\n00:28:17.920 --> 00:28:24.603\nSo let's kill this Python server and\nI'm gonna sudo apt install Nginx And\n\n463\n00:28:24.603 --> 00:28:29.760\nthere we go, yep, I do and\nboom, there we go.\n\n464\n00:28:29.760 --> 00:28:32.300\nThat's actually a pretty\nsmall Web server so.\n\n465\n00:28:32.300 --> 00:28:36.330\n&gt;&gt; That is pretty small.\n&gt;&gt; So, sudo service nginx start, and\n\n466\n00:28:36.330 --> 00:28:41.070\nnginx should be started,\nlet's check it out.\n\n467\n00:28:43.210 --> 00:28:49.649\nTo see local host and boom, there's nginx.\n\n468\n00:28:49.649 --> 00:28:52.581\nSo nginx is running, all right.\n\n469\n00:28:52.581 --> 00:28:57.020\nLet's modify our sniffer a little bit.\n\n470\n00:28:58.490 --> 00:29:01.941\nSo, if I come into the sniffer here,\n\n471\n00:29:01.941 --> 00:29:06.240\nand instead of printing out TCP all\nthe time I only want to print it out\n\n472\n00:29:06.240 --> 00:29:10.910\nIf the source port is port 80, that way\nI can filter out some of those things.\n\n473\n00:29:10.910 --> 00:29:16.307\nSo if we come here, And\n\n474\n00:29:16.307 --> 00:29:21.776\nsay if tcp.src_port == 80,\n\n475\n00:29:21.776 --> 00:29:24.421\nthen print tcp.\n\n476\n00:29:24.421 --> 00:29:30.796\nSo, clear, sudo python3\n\n477\n00:29:30.796 --> 00:29:36.620\nsniffer, just like so.\n\n478\n00:29:38.418 --> 00:29:40.597\nAnd you actually have to\nput the file extension,\n\n479\n00:29:40.597 --> 00:29:42.800\nbecause it doesn't know otherwise.\n\n480\n00:29:42.800 --> 00:29:43.570\n&gt;&gt; What?\n[LAUGH]\n\n481\n00:29:43.570 --> 00:29:44.840\n&gt;&gt; I know, it's the craziest thing.\n\n482\n00:29:44.840 --> 00:29:50.870\nAnd then if we refresh, there we go,\nexcept we don't have any TCP set up.\n\n483\n00:29:50.870 --> 00:29:55.370\nThere we go, and\nwe get a little bit of headers.\n\n484\n00:29:55.370 --> 00:30:00.140\nIt's not quite exact, but\nthey tried real hard.\n\n485\n00:30:00.140 --> 00:30:04.990\nSo we can kinda glean what is a server,\nwhat is a keep a live time and\n\n486\n00:30:04.990 --> 00:30:07.880\nsome other last modifying headers three or\nfour.\n\n487\n00:30:07.880 --> 00:30:10.820\nSo we can get some meaningful information.\n\n488\n00:30:10.820 --> 00:30:14.180\nBut there still is some parsing\nthat we could be done but\n\n489\n00:30:14.180 --> 00:30:18.390\nin addition to we still get piece of\ninformation that are not real meaningful.\n\n490\n00:30:18.390 --> 00:30:21.140\nBut we can extract those TCP segments,\n\n491\n00:30:21.140 --> 00:30:23.920\nstart to gather some additional\ninformation from those segments.\n\n492\n00:30:24.940 --> 00:30:28.450\nWe do get a lot of packet so\nyou may have to filter you may end up,\n\n493\n00:30:28.450 --> 00:30:31.980\nthis might be one of those times where,\nlet me just save it to a PCAT file and\n\n494\n00:30:31.980 --> 00:30:35.680\nI'll analyze them statically instead\nof trying to get a printout here.\n\n495\n00:30:35.680 --> 00:30:38.620\nBut that's how you grab the TCP segment\n\n496\n00:30:38.620 --> 00:30:41.420\nif you have the appropriate\nprotocol on your IP header.\n\n497\n00:30:41.420 --> 00:30:43.650\n&gt;&gt; Very cool stuff Justin,\nwe appreciate your time and\n\n498\n00:30:43.650 --> 00:30:45.910\neffort into this little project of ours.\n\n499\n00:30:45.910 --> 00:30:49.160\nBut I'm looking at our clock and it looks\nlike we are out of time for this episode.\n\n500\n00:30:49.160 --> 00:30:51.820\nWe do thank our audience out there for\nwatching as we do everyday.\n\n501\n00:30:51.820 --> 00:30:54.210\nWe spend a lot of hard work so\nyou can come here,\n\n502\n00:30:54.210 --> 00:30:58.755\nwatch us bang around on the keyboard, make\nsomething happen and feel entertained and\n\n503\n00:30:58.755 --> 00:31:03.430\neven educated, if that's at all\npossible for us to do for you.\n\n504\n00:31:03.430 --> 00:31:05.740\nJustin, thanks again for\nstopping by, thanks again for\n\n505\n00:31:05.740 --> 00:31:07.190\nyou guys out there watching.\n\n506\n00:31:07.190 --> 00:31:11.331\nBut like I said signing off for DevPro.TV,\nI've been your host Daniel Lowrie.\n\n507\n00:31:11.331 --> 00:31:12.379\n&gt;&gt; And I'm Justin Dennison.\n\n508\n00:31:12.379 --> 00:31:13.229\n&gt;&gt; We'll see you next time.\n\n509\n00:31:13.229 --> 00:31:18.840\n[MUSIC]\n\n",
          "vimeoId": "229624563"
        },
        {
          "description": "In this episode, Daniel and Justin build upon their Sniffer program to make it extract only UDP segments from the RAW data and then have that printed to the screen.",
          "length": "1096",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-6-udp_segments-080917-PGM.00_19_50_25.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-6-udp_segments-080917-PGM.00_19_50_25.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-5-6-udp_segments-080917-PGM.00_19_50_25.Still001-sm.jpg",
          "title": "UDP Segments",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.519 --> 00:00:17.820\nAll right, greetings everyone, and welcome\nback to another great episode of DEVPRO.TV\n\n3\n00:00:17.820 --> 00:00:19.040\n&gt;&gt; I'm your host Daniel Lowrie, and\n\n4\n00:00:19.040 --> 00:00:22.390\ntoday's episode, well it's more\nin our Python Security series,\n\n5\n00:00:22.390 --> 00:00:24.270\ncontinuing down that train.\n\n6\n00:00:24.270 --> 00:00:27.390\nAnd joining us yet again,\nback in our studio, here today for\n\n7\n00:00:27.390 --> 00:00:30.330\nyour viewing pleasure,\nour good man, Mr. Justin Dennison.\n\n8\n00:00:30.330 --> 00:00:31.280\nJustin, welcome back.\n\n9\n00:00:31.280 --> 00:00:32.070\nHow's it going today?\n\n10\n00:00:32.070 --> 00:00:33.760\n&gt;&gt; It is going fantastic.\n\n11\n00:00:33.760 --> 00:00:35.580\nIt's actually starting\nto heat up around here.\n\n12\n00:00:35.580 --> 00:00:36.631\n&gt;&gt; Just a little bit.\n&gt;&gt; But\n\n13\n00:00:36.631 --> 00:00:40.715\nthe questions is, am I talking about\nPython for Security or the weather?\n\n14\n00:00:40.715 --> 00:00:42.015\n&gt;&gt; [LAUGH] Yeah.\n\n15\n00:00:42.015 --> 00:00:44.170\n&gt;&gt; We're gonna go,\nI'm gonna think that it's me.\n\n16\n00:00:44.170 --> 00:00:45.600\nAnd yeah, how are you today Daniel?\n\n17\n00:00:45.600 --> 00:00:46.458\n&gt;&gt; I'm good man, I'm good.\n\n18\n00:00:46.458 --> 00:00:51.057\nI'm looking forward to seeing,\nI know we're kind of like finishing up our\n\n19\n00:00:51.057 --> 00:00:55.218\nlittle mini-series with inside\nthe series of looking at raw data,\n\n20\n00:00:55.218 --> 00:00:58.148\nbringing it in and\nextracting things out of it.\n\n21\n00:00:58.148 --> 00:01:00.633\nWe have come to UDP, if I'm not mistaken.\n\n22\n00:01:00.633 --> 00:01:01.411\n&gt;&gt; Yeah.\n\n23\n00:01:01.411 --> 00:01:05.565\nUDP, which, you know, I've seen a bunch\nof packets floating around at UDP.\n\n24\n00:01:05.565 --> 00:01:06.477\nRight.\n\n25\n00:01:06.477 --> 00:01:09.182\nWe actually hand in a previous episode,\n\n26\n00:01:09.182 --> 00:01:13.399\nkind of just filter out some of those,\nwell, TCP packets, but\n\n27\n00:01:13.399 --> 00:01:19.010\nalso I'm currently printing out any of\nthe IP headers regardless of protocol.\n\n28\n00:01:19.010 --> 00:01:20.760\nSo we might actually take\nout some of those just so\n\n29\n00:01:20.760 --> 00:01:24.000\nwe can see what are we\nactually getting here.\n\n30\n00:01:24.000 --> 00:01:26.790\nSo TCP and UDP, beautiful.\n\n31\n00:01:26.790 --> 00:01:31.980\nAgain, just to reiterate, these are not\nthe only packet types that you can parse.\n\n32\n00:01:31.980 --> 00:01:34.245\nICMP, all of those.\n\n33\n00:01:34.245 --> 00:01:36.750\nMan, I keep forgetting that\n\n34\n00:01:36.750 --> 00:01:39.930\none last one that I can't think\nof right off the top of my head.\n\n35\n00:01:39.930 --> 00:01:41.250\nWell.\n&gt;&gt; [LAUGH]\n\n36\n00:01:41.250 --> 00:01:42.785\n&gt;&gt; So, we'll go with it.\n\n37\n00:01:42.785 --> 00:01:45.245\nAnd then, even within those,\nthere's specific types.\n\n38\n00:01:45.245 --> 00:01:48.375\nRight?\nSo, TCP, if you drill down in a little it\n\n39\n00:01:48.375 --> 00:01:51.823\nmight be an HTTP type packet or\nit may be something else.\n\n40\n00:01:51.823 --> 00:01:52.665\n&gt;&gt; Mm-hm.\n\n41\n00:01:52.665 --> 00:01:54.795\n&gt;&gt; That is just raw TCP connection.\n\n42\n00:01:54.795 --> 00:01:56.920\nBytes flying everywhere.\n\n43\n00:01:56.920 --> 00:02:01.000\nSo, UDP is something that I'm interested\nin because some of these processes,\n\n44\n00:02:01.000 --> 00:02:01.850\ndistributed systems,\n\n45\n00:02:01.850 --> 00:02:05.880\nmay use UDP because it's faster,\nand we don't really care about\n\n46\n00:02:05.880 --> 00:02:09.270\nloss of data because maybe you're just\nflooding it with redundant packets anyway.\n\n47\n00:02:10.340 --> 00:02:13.230\nAnd then, after that,\n\n48\n00:02:13.230 --> 00:02:17.360\nI think we have a pretty good grasp on how\nto capture packets, how to save packets,\n\n49\n00:02:17.360 --> 00:02:21.100\nhow to parse packets,\nI would sniff the network all using, and\n\n50\n00:02:21.100 --> 00:02:25.705\nhere's the amazing part,\nstandard library Python.\n\n51\n00:02:25.705 --> 00:02:28.470\nThere's no external modules\nin this whatsoever.\n\n52\n00:02:28.470 --> 00:02:30.480\nWe have built it\ncompletely from ground up.\n\n53\n00:02:30.480 --> 00:02:33.500\nAnd, I don't know maybe I'm just\nreiterating that because I feel really,\n\n54\n00:02:33.500 --> 00:02:35.060\nreally proud of myself.\n\n55\n00:02:35.060 --> 00:02:36.545\nAnd well, hopefully,\n\n56\n00:02:36.545 --> 00:02:40.970\nif you can get everything to work that\nwe have on these last few episodes.\n\n57\n00:02:40.970 --> 00:02:44.642\nYou should be incredibly proud of yourself\nas well because how many people can say\n\n58\n00:02:44.642 --> 00:02:45.834\nthat they've done this?\n\n59\n00:02:45.834 --> 00:02:50.140\nBut that leaves the one last task at hand.\n\n60\n00:02:50.140 --> 00:02:51.750\nWell, last task for us.\n\n61\n00:02:51.750 --> 00:02:56.080\nYou could go on forever about this,\nand that's parsing UDP packets.\n\n62\n00:02:56.080 --> 00:02:57.910\nAnd this is kind of one of those rinse and\nrepeats.\n\n63\n00:02:57.910 --> 00:03:02.760\nBut I really wanted to drill down\nthe idea that once you find out\n\n64\n00:03:02.760 --> 00:03:06.760\nkind of how the data's organized, boom,\nit's just rinse and repeat from here.\n\n65\n00:03:06.760 --> 00:03:08.970\nSo, let's go ahead and jump in my screen.\n\n66\n00:03:08.970 --> 00:03:14.470\nAnd I'm not gonna run the sniffer but\nI did wanna just review real quick.\n\n67\n00:03:14.470 --> 00:03:18.337\nWe have this print EthernetFrame,\nprint IPHeader, and print TCP,\n\n68\n00:03:18.337 --> 00:03:20.880\nonly if the port is equal to port 80,\nokay?\n\n69\n00:03:22.118 --> 00:03:26.990\nNow, I'm gonna modify this soon, just so\nwe only get the actual packet information\n\n70\n00:03:26.990 --> 00:03:32.200\nprinted out, so we can see what's going\non instead of having all that noise.\n\n71\n00:03:32.200 --> 00:03:34.430\nWe have the Ethernet frame, the IP header.\n\n72\n00:03:34.430 --> 00:03:39.088\nThis may be something where you're like\nI just want to send this off to places.\n\n73\n00:03:39.088 --> 00:03:39.877\nRight?\n\n74\n00:03:39.877 --> 00:03:42.510\nI wanna send this somewhere else,\nI'm gonna save this on a file.\n\n75\n00:03:42.510 --> 00:03:46.070\nAnd now I can only have to save\nthe part that I'm interested in.\n\n76\n00:03:46.070 --> 00:03:51.459\nMaybe you just wanna know, what are the\ncommon ports and/or like MAC addresses\n\n77\n00:03:51.459 --> 00:03:56.458\nof devices that are being, that\nare communicating through the network.\n\n78\n00:03:56.458 --> 00:04:00.238\nIf that's the case, then you only need\nselect pieces of information, and\n\n79\n00:04:00.238 --> 00:04:01.918\nthen you can modify this at will.\n\n80\n00:04:01.918 --> 00:04:03.770\nSo, that's where we are.\n\n81\n00:04:03.770 --> 00:04:07.242\nLet's go into net types like so,\n\n82\n00:04:07.242 --> 00:04:12.016\nand now, let's create a UDP segment class.\n\n83\n00:04:12.016 --> 00:04:15.845\nSo, UDPSegment and\n\n84\n00:04:15.845 --> 00:04:20.730\ndef_init, and\nthis again is going to be similar to\n\n85\n00:04:20.730 --> 00:04:25.050\nthe TCP segment in that the data that\nis passed in is the leftover data after\n\n86\n00:04:25.050 --> 00:04:29.010\npeeling off the information from\nthe Ethernet frame, and the IP header.\n\n87\n00:04:29.010 --> 00:04:33.132\nSo this is the remaining information,\nbut now we have the segment, and\n\n88\n00:04:33.132 --> 00:04:34.725\nthat's going to get data.\n\n89\n00:04:34.725 --> 00:04:36.430\nBut, UDPSegment.\n\n90\n00:04:37.630 --> 00:04:39.850\nHow long in bytes is that all?\n\n91\n00:04:40.990 --> 00:04:43.962\nLength of eight.\n\n92\n00:04:43.962 --> 00:04:48.730\nOkay, so the things that we care about or\nthat I care about.\n\n93\n00:04:48.730 --> 00:04:53.390\nSo, I'm going to grab the unpack\ndata using that unpack.\n\n94\n00:04:53.390 --> 00:04:55.860\nSo, unpack data equals unpack.\n\n95\n00:04:57.470 --> 00:05:00.010\nAnd what is the format?\n\n96\n00:05:00.010 --> 00:05:01.099\nWell, it's four hs.\n\n97\n00:05:01.099 --> 00:05:04.000\nHs are two bytes apiece.\n\n98\n00:05:04.000 --> 00:05:05.340\nWhat are hs again?\n\n99\n00:05:05.340 --> 00:05:07.380\nWell, they're unsigned shorts.\n\n100\n00:05:07.380 --> 00:05:12.260\nAnd well, that's going to give\nus eight bytes in length.\n\n101\n00:05:12.260 --> 00:05:17.087\nAnd so, I'm gonna pass the data from\n\n102\n00:05:17.087 --> 00:05:21.470\nzero to self.length, like so.\n\n103\n00:05:21.470 --> 00:05:25.660\nAnd now, we can actually parse this\ninto this individual component.\n\n104\n00:05:25.660 --> 00:05:28.410\nSo, let's get some over scroll here.\n\n105\n00:05:29.710 --> 00:05:33.140\nAnd here we go, so\nwe can get a source port, and\n\n106\n00:05:33.140 --> 00:05:37.300\nthis typically you have where's\nit coming from, where's it going?\n\n107\n00:05:37.300 --> 00:05:40.930\nThat's very interesting because it may\ntell you a lot more than you realize,\n\n108\n00:05:40.930 --> 00:05:41.610\nall right?\n\n109\n00:05:41.610 --> 00:05:45.410\nEspecially if you have standard ports\nthat certain things are on like\n\n110\n00:05:45.410 --> 00:05:48.940\nif you have port 80,\nthat might be an HTTP server.\n\n111\n00:05:48.940 --> 00:05:51.700\nIf it's port 22, that might be SSH.\n\n112\n00:05:51.700 --> 00:05:54.395\nIf it's 443, that's a HTTPS.\n\n113\n00:05:55.450 --> 00:06:01.140\nThere are some other, 1194,\nis a certain types of traffic.\n\n114\n00:06:01.140 --> 00:06:04.230\nSo, that plays into your research.\n\n115\n00:06:04.230 --> 00:06:05.570\nYou're just gathering intel.\n\n116\n00:06:05.570 --> 00:06:07.980\n&gt;&gt; I still put a BPN.\n\n117\n00:06:07.980 --> 00:06:09.450\n&gt;&gt; There you go.\n\n118\n00:06:09.450 --> 00:06:13.490\nI have a source port, or\ndestination port, 1194, UDP pack.\n\n119\n00:06:13.490 --> 00:06:16.720\nHey, I bet that's an open BPN service.\n\n120\n00:06:16.720 --> 00:06:18.730\nHey, what kind of service\nare they running?\n\n121\n00:06:18.730 --> 00:06:19.990\nWhat version is it?\n\n122\n00:06:19.990 --> 00:06:26.540\nNow I can start to find additional vectors\nof attack, if that were my prerogative.\n\n123\n00:06:26.540 --> 00:06:29.550\nRight now, this is for\nresearch purposes only.\n\n124\n00:06:29.550 --> 00:06:34.359\n&gt;&gt; We do not condone the use of any\nof these tools in a malicious or\n\n125\n00:06:34.359 --> 00:06:35.310\nmalfeasance way.\n\n126\n00:06:35.310 --> 00:06:35.960\n&gt;&gt; Exactly.\n\n127\n00:06:35.960 --> 00:06:37.440\nEspecially the malfeasance part.\n\n128\n00:06:37.440 --> 00:06:38.867\n&gt;&gt; [LAUGH]\n&gt;&gt; So we want this source port,\n\n129\n00:06:38.867 --> 00:06:40.392\nwhich is part of the unpacked data.\n\n130\n00:06:40.392 --> 00:06:43.540\nYou actually have to spell data correctly.\n\n131\n00:06:43.540 --> 00:06:46.380\nAnd that's index zero, so\nthat's our source port and\n\n132\n00:06:46.380 --> 00:06:48.930\nthat's our first unsigned short.\n\n133\n00:06:50.350 --> 00:06:52.895\nAnd then what is our destination port?\n\n134\n00:06:52.895 --> 00:06:57.577\nWell, that is unpacked data here and\n\n135\n00:06:57.577 --> 00:07:01.201\nthen we can get the length and\n\n136\n00:07:01.201 --> 00:07:05.590\nthat's unpacked data, like so.\n\n137\n00:07:05.590 --> 00:07:12.090\nThat is two, aha, and then a checksum.\n\n138\n00:07:12.090 --> 00:07:16.596\nAnd that is unpacked_data(3).\n\n139\n00:07:16.596 --> 00:07:17.802\nAll right.\nAnd then,\n\n140\n00:07:17.802 --> 00:07:23.084\nwe're going to have the leftover data\nbecause we may have leftover data,\n\n141\n00:07:23.084 --> 00:07:26.250\nwho knows,\nas a final kind of section here.\n\n142\n00:07:27.560 --> 00:07:30.750\nSo starting at the length,\ngo all the way to end, and there we go.\n\n143\n00:07:30.750 --> 00:07:34.300\nSo as always,\nlet's check to see if this works and\n\n144\n00:07:34.300 --> 00:07:39.320\nin checking we're going to set up our\nsniffer to handle UDP packets as a,\n\n145\n00:07:39.320 --> 00:07:45.090\nextract the segments from them based\non the protocol from the IP header.\n\n146\n00:07:45.090 --> 00:07:47.670\nSo if we hop into our sniffer, and boom.\n\n147\n00:07:47.670 --> 00:07:50.179\nAnd for now,\nI'm actually going to comment this out.\n\n148\n00:07:50.179 --> 00:07:52.640\nI'm gonna comment this out.\n\n149\n00:07:54.260 --> 00:07:55.890\nAnd you know what?\n\n150\n00:07:55.890 --> 00:07:57.935\nI'm just gonna replace this\nwith a standard print.\n\n151\n00:07:57.935 --> 00:08:02.283\nJust print it always.\n\n152\n00:08:02.283 --> 00:08:05.243\nIt's always there.\n\n153\n00:08:05.243 --> 00:08:06.863\nelif, the IP header protocol.\n\n154\n00:08:06.863 --> 00:08:12.443\nI'm gonna spell IP header protocol is 17.\n\n155\n00:08:12.443 --> 00:08:15.550\nWell, that should be a UDP packet.\n\n156\n00:08:15.550 --> 00:08:16.729\nLet me double check.\n\n157\n00:08:16.729 --> 00:08:18.670\n17, yeah it's 17.\n\n158\n00:08:18.670 --> 00:08:21.535\nSo, that is UDP, and\n\n159\n00:08:21.535 --> 00:08:26.330\nthen this is UDPSegment, like so.\n\n160\n00:08:26.330 --> 00:08:28.970\nAnd then, I'm going to get\nthe leftover data from the header,\n\n161\n00:08:28.970 --> 00:08:32.820\nbecause that's where I'm gonna grab those\neight bytes in order to parse our source\n\n162\n00:08:32.820 --> 00:08:36.320\nport, check some length and\ndestination port.\n\n163\n00:08:36.320 --> 00:08:41.670\nSo, that's our leftover data, like so, and\n\n164\n00:08:41.670 --> 00:08:46.980\nwell, let's just print UDP to make sure,\n\n165\n00:08:46.980 --> 00:08:52.460\nand you'll notice I always take\nsimilar steps,build a little,\n\n166\n00:08:52.460 --> 00:08:57.000\ncheck, build a little check, sure could\nyou code all these from scratch and\n\n167\n00:08:57.000 --> 00:08:58.940\nnever test anything and work perfectly?\n\n168\n00:08:58.940 --> 00:08:59.600\nYeah.\nWell,\n\n169\n00:08:59.600 --> 00:09:02.600\nI go ahead of that working\nthough it's very slim.\n\n170\n00:09:02.600 --> 00:09:06.277\nSo, I'm a big proponent of little bit,\nsee if it works, little bit see if it\n\n171\n00:09:06.277 --> 00:09:10.242\nworks cuz then if you have to debug, you\nhave very limited code you have to review,\n\n172\n00:09:10.242 --> 00:09:12.334\nin order to find out\nwhere your problem is.\n\n173\n00:09:12.334 --> 00:09:13.922\nSo,there's our UDP.\n\n174\n00:09:13.922 --> 00:09:15.175\n&gt;&gt; Sounds like you've done this before,\nJustin.\n\n175\n00:09:15.175 --> 00:09:15.973\n&gt;&gt; I know, it's weird.\n\n176\n00:09:15.973 --> 00:09:20.644\n&gt;&gt; [LAUGH]\n&gt;&gt; So boom.\n\n177\n00:09:22.354 --> 00:09:26.867\nAnd wait for it, wait for it, and\nI actually have nginx still running,\n\n178\n00:09:26.867 --> 00:09:28.308\nif I'm not mistaken.\n\n179\n00:09:28.308 --> 00:09:29.720\nThere we go, ooh!\n\n180\n00:09:31.370 --> 00:09:32.330\nI actually have an error.\n\n181\n00:09:32.330 --> 00:09:33.950\nCase in point.\n\n182\n00:09:33.950 --> 00:09:35.725\nSo, and you may be like, why this work?\n\n183\n00:09:35.725 --> 00:09:37.900\nOr these are actually TCP packets.\n\n184\n00:09:37.900 --> 00:09:41.627\nSo, that first if statement cut because\nIP had a protocol that said hey these\n\n185\n00:09:41.627 --> 00:09:42.159\nare TCPs.\n\n186\n00:09:42.159 --> 00:09:46.067\nAs soon as they hit a UDP segment though,\n[SOUND].\n\n187\n00:09:46.067 --> 00:09:46.690\nBroke.\n\n188\n00:09:48.200 --> 00:09:49.610\nBut, I did not write a lot of code.\n\n189\n00:09:49.610 --> 00:09:51.180\nI made a little bid of\nchange in the sniffer and\n\n190\n00:09:51.180 --> 00:09:57.490\na little bit of change in the actual\nnet types package right the module.\n\n191\n00:09:57.490 --> 00:10:00.300\nName UDPSegment is not defined.\n\n192\n00:10:00.300 --> 00:10:01.910\nThis line right here is\nwhere the error occurred.\n\n193\n00:10:03.010 --> 00:10:08.176\nBy doing a little bit, I can come\nback in and know, you actually have\n\n194\n00:10:08.176 --> 00:10:13.716\nto import it to use it, because otherwise\nthe script doesn't know about it.\n\n195\n00:10:13.716 --> 00:10:14.455\n&gt;&gt; Yeah.\n\n196\n00:10:14.455 --> 00:10:15.934\nSo, it says hey, that's no defined.\n\n197\n00:10:15.934 --> 00:10:19.270\n[LAUGH] You're just using\nstuff no one knows about.\n\n198\n00:10:19.270 --> 00:10:19.790\n&gt;&gt; Exactly.\n\n199\n00:10:19.790 --> 00:10:22.580\nSo it's just like, yeah,\nyou're stuffed, who cares.\n\n200\n00:10:22.580 --> 00:10:24.535\nI really wish it would\nsay your stuff's broke.\n\n201\n00:10:24.535 --> 00:10:26.610\n&gt;&gt; Yeah, [LAUGH]\n&gt;&gt; It would make me giggle.\n\n202\n00:10:26.610 --> 00:10:28.520\nIt would be like I'm not\nas mad about it now.\n\n203\n00:10:28.520 --> 00:10:30.255\n&gt;&gt; At least errors would\nbe a little more fun.\n\n204\n00:10:30.255 --> 00:10:32.043\n[LAUGH]\n&gt;&gt; I always wanted to make an IDE that\n\n205\n00:10:32.043 --> 00:10:35.040\nwhen you have a compile error or\nsomething like that.\n\n206\n00:10:35.040 --> 00:10:37.993\nThere's just like mini-explosions\n[LAUGH] all over the place.\n\n207\n00:10:37.993 --> 00:10:38.940\n&gt;&gt; [LAUGH] That would be funny.\n\n208\n00:10:38.940 --> 00:10:41.765\n&gt;&gt; It would reinforce,\nbe like, yeah, stuff's broke.\n\n209\n00:10:41.765 --> 00:10:42.603\n&gt;&gt; Yeah.\n&gt;&gt; So now,\n\n210\n00:10:42.603 --> 00:10:46.950\nwe think we've fixed the sniffer now.\n\n211\n00:10:46.950 --> 00:10:47.955\nWe think.\n\n212\n00:10:47.955 --> 00:10:49.265\nI think I have.\n\n213\n00:10:49.265 --> 00:10:53.125\nDaniel may be harboring intelligence\nfrom me just to watch me crash and\n\n214\n00:10:53.125 --> 00:10:55.365\nburn but I think I fixed it.\n\n215\n00:10:55.365 --> 00:10:56.265\n&gt;&gt; I think you probably got it.\n\n216\n00:10:56.265 --> 00:11:01.875\n&gt;&gt; So let's see, sudo python3 sniffer.py,\nand there we go and\n\n217\n00:11:01.875 --> 00:11:06.817\nthis is still printing out TCP packets,\nso let's refresh\n\n218\n00:11:06.817 --> 00:11:08.477\n&gt;&gt; And boom.\n\n219\n00:11:08.477 --> 00:11:10.754\n&gt;&gt; Ooh.\n&gt;&gt; That is a bunch of UDP packets,\n\n220\n00:11:10.754 --> 00:11:15.070\nreal fast length, checksums so\nwe get checksums, destination port, and\n\n221\n00:11:15.070 --> 00:11:18.360\nsource port and\nthen there's no leftover data right, so\n\n222\n00:11:18.360 --> 00:11:21.670\nthese aren't actually\ntransmitting much to anything.\n\n223\n00:11:21.670 --> 00:11:22.930\n&gt;&gt; It's a bunch of DDS.\n\n224\n00:11:24.040 --> 00:11:24.950\n&gt;&gt; Well, there you go-\n&gt;&gt; Yeah.\n\n225\n00:11:24.950 --> 00:11:27.940\n&gt;&gt; There you go, so see,\nthis is why it's helpful to have\n\n226\n00:11:27.940 --> 00:11:29.325\nadditional personnel around-\n&gt;&gt; [LAUGH]\n\n227\n00:11:29.325 --> 00:11:30.099\n&gt;&gt; Cuz I'm like whoop,\n\n228\n00:11:30.099 --> 00:11:33.170\nI don't know about that, and\nyou're like, that's what that is.\n\n229\n00:11:33.170 --> 00:11:35.980\nSo, by seeing that printed out,\n\n230\n00:11:35.980 --> 00:11:38.990\nwe know that we're actually parsing\nthat information appropriately.\n\n231\n00:11:38.990 --> 00:11:43.650\nCuz those ports, that makes sense to me.\n\n232\n00:11:43.650 --> 00:11:47.150\nDaniel says it makes sense to him,\nso we're gonna go with it.\n\n233\n00:11:47.150 --> 00:11:48.610\nBut by printing it out like that,\n\n234\n00:11:48.610 --> 00:11:53.370\nif you know exactly what's you're\ntargeting, what you're looking for,\n\n235\n00:11:53.370 --> 00:11:55.770\nthat doesn't look quite right, again,\nthat would be a run time error.\n\n236\n00:11:55.770 --> 00:11:57.230\nIt's not actually gonna break your code.\n\n237\n00:11:57.230 --> 00:12:00.740\nIt's just the results that you get\nare not gonna be very meaningful.\n\n238\n00:12:00.740 --> 00:12:04.750\nAnd yeah, you just keep grabbing\npackets off the network right now.\n\n239\n00:12:04.750 --> 00:12:10.528\nSo let's get that nice and pretty\nprinted just so [SOUND], there it is.\n\n240\n00:12:10.528 --> 00:12:15.980\nAnd then, I think that'll be a pretty\ngood culmination there, right?\n\n241\n00:12:15.980 --> 00:12:18.500\nAgain, you could figure\nout how to do your ICMP.\n\n242\n00:12:18.500 --> 00:12:23.510\nYeah, ICMP,\nInternet Controller Messaging Protocol?\n\n243\n00:12:23.510 --> 00:12:24.500\n&gt;&gt; Yeah.\n\n244\n00:12:24.500 --> 00:12:27.900\n&gt;&gt; So you could do those or\nmaybe you have, well,\n\n245\n00:12:27.900 --> 00:12:31.400\nI find the UDP packet that is here,\nI wanna do additional parsing.\n\n246\n00:12:31.400 --> 00:12:35.310\nOr when I find a TCP packet that's here,\nI can do additional parsing so\n\n247\n00:12:35.310 --> 00:12:38.500\nyou could add, well-\n&gt;&gt; Functionality.\n\n248\n00:12:38.500 --> 00:12:39.830\n&gt;&gt; Ad nauseam, I guess.\n\n249\n00:12:39.830 --> 00:12:40.680\nJust keep going.\n\n250\n00:12:40.680 --> 00:12:41.241\n&gt;&gt; Add nauseam.\n\n251\n00:12:41.241 --> 00:12:41.990\n&gt;&gt; Keep going.\n\n252\n00:12:41.990 --> 00:12:46.280\nSo let's do a nice little print out just\nto see this is what we're getting here.\n\n253\n00:12:47.440 --> 00:12:53.200\nSo let's see here, I'm going to hop\nback into net types, and hop down and\n\n254\n00:12:53.200 --> 00:12:58.160\nadd that dunder string method, like so.\n\n255\n00:12:59.270 --> 00:13:03.165\nAnd I'm gonna return, I did it again.\n\n256\n00:13:03.165 --> 00:13:07.270\n[SOUND] I got it, makes me so\nhappy when I get that right.\n\n257\n00:13:07.270 --> 00:13:13.700\nAnd we're gonna say UDPSegment and\nthen oop.\n\n258\n00:13:13.700 --> 00:13:19.040\nSo, I'm gonna say, source And\n\n259\n00:13:19.040 --> 00:13:25.250\nthen that is going to be the source port,\nAnd then destination.\n\n260\n00:13:26.270 --> 00:13:29.050\nAnd just to keep this,\n\n261\n00:13:29.050 --> 00:13:32.870\nI'll actually put port in there just to\nkeep it consistent in how I present these.\n\n262\n00:13:34.355 --> 00:13:38.592\nNot really important at this point\nin time, but I'm a stickler for\n\n263\n00:13:38.592 --> 00:13:42.130\ndetails sometimes the details\nthat don't matter.\n\n264\n00:13:42.130 --> 00:13:45.269\nThat do not matter, don't matter.\n\n265\n00:13:45.269 --> 00:13:47.758\nAll right, so\nthen I'm actually going to see,\n\n266\n00:13:47.758 --> 00:13:51.070\nI'm just gonna print out check some value,\njust for giggles.\n\n267\n00:13:52.890 --> 00:13:53.537\nSo, here's our checksum.\n\n268\n00:13:53.537 --> 00:13:58.956\nAnd checksum, and maybe I think\nwe're at the point now to where\n\n269\n00:13:58.956 --> 00:14:06.027\nthe data starts to become interesting,\nlike what's leftover, if there is any?\n\n270\n00:14:06.027 --> 00:14:08.144\n&gt;&gt; Mmm.\n&gt;&gt; That's left over, so\n\n271\n00:14:08.144 --> 00:14:10.370\nthat can give you an idea.\n\n272\n00:14:10.370 --> 00:14:13.020\nOkay, well when it's this source and\n\n273\n00:14:13.020 --> 00:14:15.980\nthis destination that's\nactually transmitting data,\n\n274\n00:14:15.980 --> 00:14:19.610\nwhat do I know about those ports, and can\nI find out information about this data?\n\n275\n00:14:20.900 --> 00:14:23.010\nMaybe you can, maybe you can't.\n\n276\n00:14:23.010 --> 00:14:29.634\nSo,we're gonna have to say leftover data,\nlike so.\n\n277\n00:14:29.634 --> 00:14:33.930\nAnd then, format star, star, like so.\n\n278\n00:14:33.930 --> 00:14:38.049\nSo, boom.\nAnd then just to clear things up a little\n\n279\n00:14:38.049 --> 00:14:44.649\nbit, let's hop over here and,\nClean this up, just so it\n\n280\n00:14:44.649 --> 00:14:49.462\ndoesn't print out, I would go back and put\nthat in, maybe for putting this to a file.\n\n281\n00:14:49.462 --> 00:14:53.449\nYou have multiple files open,\nthey are just, when it's a TCP packet,\n\n282\n00:14:53.449 --> 00:14:54.590\nprint to this file.\n\n283\n00:14:54.590 --> 00:14:56.260\nWhen it's a UDP packet,\nprint to this file.\n\n284\n00:14:56.260 --> 00:15:00.070\nThen you can kind of do this\nsequestering so to speak.\n\n285\n00:15:00.070 --> 00:15:05.240\nSo, boom, sudo python3, and then sniffer.\n\n286\n00:15:05.240 --> 00:15:06.040\nThere we go.\n\n287\n00:15:06.040 --> 00:15:09.553\nSo now,\nare we going to get some UDP packets.\n\n288\n00:15:09.553 --> 00:15:10.255\nThere we go.\n\n289\n00:15:10.255 --> 00:15:13.890\nYou also have to- I do that every time.\n\n290\n00:15:15.280 --> 00:15:18.300\nStill just printing the raw data\ninstead of the stringified version.\n\n291\n00:15:18.300 --> 00:15:23.786\n[SOUND] And now, we should actually see\n\n292\n00:15:23.786 --> 00:15:29.282\nsome pretty, pretty print out here.\n\n293\n00:15:29.282 --> 00:15:30.190\nSo, boom.\n\n294\n00:15:30.190 --> 00:15:35.580\nAnd now it looks like we've got some\nlive action debugging down here Daniel.\n\n295\n00:15:35.580 --> 00:15:36.270\n&gt;&gt; Looks like we do.\n\n296\n00:15:36.270 --> 00:15:37.720\n&gt;&gt; So, what happened?\n\n297\n00:15:40.420 --> 00:15:43.900\nSo, if I come down here there's\nour segment, our leftover data,\n\n298\n00:15:43.900 --> 00:15:48.180\nI'm going to print and\nI'm pretty sure that's grabbing,\n\n299\n00:15:48.180 --> 00:15:52.350\nso I'm gonna uncomment this just because\nI know if the IP header prints out and\n\n300\n00:15:52.350 --> 00:15:55.995\nhas a protocol 17, then it should also\nget a print out of a UDP segment.\n\n301\n00:15:55.995 --> 00:16:02.440\nSo, sudo python3 sniffer.\n\n302\n00:16:02.440 --> 00:16:05.700\nAnd now, it prints out a UDPSegment\nas soon as I turn that back on.\n\n303\n00:16:05.700 --> 00:16:07.721\n&gt;&gt; [LAUGH]\n&gt;&gt; So there's our source port,\n\n304\n00:16:07.721 --> 00:16:08.690\ndestination port.\n\n305\n00:16:08.690 --> 00:16:10.850\nAnd notice I'm getting\nno leftover data here so\n\n306\n00:16:10.850 --> 00:16:12.110\nthere's not a lot of leftover data.\n\n307\n00:16:12.110 --> 00:16:17.110\nNow, here's a bunch of TCP packets,\nand then there's a UDPSegment.\n\n308\n00:16:17.110 --> 00:16:21.370\nSo, I now can get just real quick readouts\n\n309\n00:16:21.370 --> 00:16:24.420\nof exactly what I,\nwhat's interesting to me.\n\n310\n00:16:24.420 --> 00:16:28.480\nBecause I can always go and change those\nstrings, and I can continue to parse.\n\n311\n00:16:28.480 --> 00:16:32.810\nAnd now, if I find, hey, there's a UDP\ncommunications between these two ports,\n\n312\n00:16:32.810 --> 00:16:35.450\nit always has this chunk of data,\nmaybe that's interesting to me\n\n313\n00:16:35.450 --> 00:16:38.895\nbecause I know what services are using\nthat for method of communication.\n\n314\n00:16:38.895 --> 00:16:42.480\nOr maybe it's on TCP, that's a Web server.\n\n315\n00:16:42.480 --> 00:16:44.730\nLet me see what's going on here, or\n\n316\n00:16:44.730 --> 00:16:49.830\nyou know TCP could be socket connections\nbetween some other nodes on a network for\n\n317\n00:16:49.830 --> 00:16:53.812\ndistributive processes and\nyou can just start those.\n\n318\n00:16:53.812 --> 00:16:57.680\nSo, there's a lot that you can do with\nthis but this is all standard library.\n\n319\n00:16:57.680 --> 00:17:02.092\nAnd I just wanted to show you at\nsome extent it is just exactly\n\n320\n00:17:02.092 --> 00:17:05.480\nthe same each and every time, right?\n\n321\n00:17:05.480 --> 00:17:09.790\nParse the data, find out what you want,\nkeep moving on, and\n\n322\n00:17:09.790 --> 00:17:14.850\nthen you actually learn a little bit\nmore about the networking protocols and\n\n323\n00:17:14.850 --> 00:17:16.210\nsuch as you do this.\n\n324\n00:17:16.210 --> 00:17:17.560\n&gt;&gt; Justin, it all sounds fantastic.\n\n325\n00:17:17.560 --> 00:17:20.560\nI do love the way that you\ncontinue to basically show us\n\n326\n00:17:20.560 --> 00:17:24.910\nwhen it comes to sniffing data you\nhave that come in, it's all about\n\n327\n00:17:24.910 --> 00:17:28.560\nmaking it to where you're pulling\nit apart into chunks that you need.\n\n328\n00:17:28.560 --> 00:17:32.200\nAnd then formatting that so that when it's\npresented to you it's something that you\n\n329\n00:17:32.200 --> 00:17:36.420\ncan easily digest and just go okay, I need\nthat UDP data, what's going on in there,\n\n330\n00:17:36.420 --> 00:17:39.360\nI need that TCP data,\nwhat's going on there?\n\n331\n00:17:39.360 --> 00:17:41.690\nDealing with the raw packets is cool and\nstuff but\n\n332\n00:17:41.690 --> 00:17:46.730\nbeing able to break that down into\nmore digestible pieces is really\n\n333\n00:17:46.730 --> 00:17:50.358\nthe meat potatoes of what we're doing here\ntoday with our little sniffer program.\n\n334\n00:17:50.358 --> 00:17:53.490\nJust now, I think you did a fine job and\nI appreciate your effort on that.\n\n335\n00:17:53.490 --> 00:17:55.320\nI appreciate our audience for\nwatching, but\n\n336\n00:17:55.320 --> 00:17:58.500\nit looks like we are at\nthe end of this said episode.\n\n337\n00:17:58.500 --> 00:17:59.860\nThank you for watching, yet again.\n\n338\n00:17:59.860 --> 00:18:03.180\nSigning off for DEVPRO.TV,\nI've been your host Daniel Lowrie.\n\n339\n00:18:03.180 --> 00:18:04.080\n&gt;&gt; And I'm Justin Dennison.\n\n340\n00:18:04.080 --> 00:18:06.192\n&gt;&gt; And we'll see you next time.\n\n341\n00:18:06.192 --> 00:18:09.502\n[MUSIC]\n\n",
          "vimeoId": "229136095"
        },
        {
          "description": "In this episode, Daniel and Justin employ Python to create a rudimentary, single connection server. Here you'll see how to build the server module which will open a port and accept incoming client connections and receive data from said client.",
          "length": "1234",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-6-1-creating_a_tcp_server-080917-PGM.00_21_25_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-6-1-creating_a_tcp_server-080917-PGM.00_21_25_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-6-1-creating_a_tcp_server-080917-PGM.00_21_25_08.Still001-sm.jpg",
          "title": "Creating a TCP Server",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:13.217 --> 00:00:14.877\nAll right greetings everyone and\n\n3\n00:00:14.877 --> 00:00:17.630\nwelcome back to another\ngreat episode of DevPro.TV.\n\n4\n00:00:17.630 --> 00:00:19.640\nI'm your host Daniel Lowrie and\n\n5\n00:00:19.640 --> 00:00:23.910\nin today's episode we are back with\nmore in our Python for security series.\n\n6\n00:00:23.910 --> 00:00:27.980\nSo grab a rack and settle in because\nwe are continuing on looking at\n\n7\n00:00:27.980 --> 00:00:30.710\nbuilding a server today\nif I'm not mistaken.\n\n8\n00:00:30.710 --> 00:00:34.360\nAnd showing us how to do that very thing,\nour good friend Mr. Justin Dennison.\n\n9\n00:00:34.360 --> 00:00:36.310\nJustin welcome back sir, how's it going?\n\n10\n00:00:36.310 --> 00:00:37.970\n&gt;&gt; It is going fantastic.\n\n11\n00:00:37.970 --> 00:00:40.350\nMy brain's been rolling ideas and\n\n12\n00:00:40.350 --> 00:00:44.370\nsince we've built that sniffer,\nI actually had a very interesting idea.\n\n13\n00:00:44.370 --> 00:00:48.800\nWe've been saving all\nthis data locally but\n\n14\n00:00:48.800 --> 00:00:51.790\nyou said something like couldn't\nwe sent it somewhere else?\n\n15\n00:00:51.790 --> 00:00:54.370\nDaniel says something\nthat gets in my mind and\n\n16\n00:00:54.370 --> 00:00:57.260\nwe start rolling it around it's crazy so\n\n17\n00:00:57.260 --> 00:01:01.530\nactually I think I'm just gonna go ahead\nand tell you what I'm thinking right.\n\n18\n00:01:01.530 --> 00:01:06.480\nSo, our sniffer, it either saves to\na file that I need to extract or\n\n19\n00:01:06.480 --> 00:01:07.420\nit just prints those out.\n\n20\n00:01:07.420 --> 00:01:09.700\nAnd if you haven't seen those episodes,\ndefinitely go check those out.\n\n21\n00:01:09.700 --> 00:01:14.470\nIt was a whole series of snffiing traffic\nand grabbing packets and parsing packets.\n\n22\n00:01:14.470 --> 00:01:15.820\nBut I started thinking.\n\n23\n00:01:18.350 --> 00:01:19.950\nWhat if, stay with me.\n\n24\n00:01:19.950 --> 00:01:23.630\nWhat if our sniffer was\nactually also a client\n\n25\n00:01:23.630 --> 00:01:27.510\nto another server that we\nput somewhere else, right?\n\n26\n00:01:27.510 --> 00:01:28.880\nNow.\n\n27\n00:01:28.880 --> 00:01:30.570\n&gt;&gt; Kind of phone home kind of thing.\n\n28\n00:01:30.570 --> 00:01:34.570\n&gt;&gt; Yeah, yeah, so\nlike a phone home sniffer,\n\n29\n00:01:34.570 --> 00:01:37.958\nalmost like a forwarding proxy or\nsomething of that nature.\n\n30\n00:01:37.958 --> 00:01:43.020\nNot quite as full fledged as that,\nbut when, it grabs that information,\n\n31\n00:01:43.020 --> 00:01:45.480\ninstead of running it to the screen or\nwriting it to a pcat file,\n\n32\n00:01:45.480 --> 00:01:50.170\nit just turns around and sends it off\nto our server, that we have control of,\n\n33\n00:01:50.170 --> 00:01:52.640\nsomewhere on the Internet or\nsomething of that nature and then,\n\n34\n00:01:52.640 --> 00:01:55.940\nwhen that server receives it, it goes okay\nI'm gonna put this in this pcat file.\n\n35\n00:01:55.940 --> 00:01:59.840\nRight, so now we've kind of\ndistributed this load, and\n\n36\n00:01:59.840 --> 00:02:04.613\nfrom a security aspect,\nthere might be firewalls.\n\n37\n00:02:04.613 --> 00:02:07.050\nThere might be software firewalls,\nthere might be hardware firewalls.\n\n38\n00:02:07.050 --> 00:02:10.810\nYou may have to send traffic through\nparticular ports because you have\n\n39\n00:02:10.810 --> 00:02:13.820\naccess to the server and you're like,\nI'm gonna set it up over here and\n\n40\n00:02:13.820 --> 00:02:17.820\nit's gonna listen on this port and\nI can send it on this port.\n\n41\n00:02:17.820 --> 00:02:21.370\nSo you get a little more leeway\nby extracting data out there,\n\n42\n00:02:21.370 --> 00:02:24.340\nespecially if there's\nalready known holes there.\n\n43\n00:02:24.340 --> 00:02:27.870\nBut then I started thinking, well,\nwe know how to make a client connection.\n\n44\n00:02:27.870 --> 00:02:31.590\nWe've kind of done that in the sniffer and\nwe've seen that in a few other episodes.\n\n45\n00:02:31.590 --> 00:02:34.210\nWe don't know how to make the server\nto accept the connection.\n\n46\n00:02:35.880 --> 00:02:36.872\nSo that's a problem.\n\n47\n00:02:36.872 --> 00:02:39.410\nSo.\n&gt;&gt; [LAUGH] Kind of the missing key here.\n\n48\n00:02:39.410 --> 00:02:41.200\nA puzzle piece working on, right?\n\n49\n00:02:41.200 --> 00:02:42.670\n&gt;&gt; Yeah, it's like chicken and\negg type thing.\n\n50\n00:02:42.670 --> 00:02:46.580\nSo I need a server that\naccepts that I have a client\n\n51\n00:02:46.580 --> 00:02:48.210\nthat doesn't have a- hold on, hold on.\n\n52\n00:02:48.210 --> 00:02:52.270\nSo in this episode what we're\ngoing to do in anticipation of\n\n53\n00:02:52.270 --> 00:02:57.990\nmaking a phone home package number,\nwhich is actually not a whole lot\n\n54\n00:02:57.990 --> 00:03:02.030\nis figuring out how to\nmake the server right?\n\n55\n00:03:02.030 --> 00:03:04.050\nSo, that's our goal today.\n\n56\n00:03:04.050 --> 00:03:06.600\n&gt;&gt; You should call it ET server.\n\n57\n00:03:06.600 --> 00:03:07.360\n&gt;&gt; ET server.\n\n58\n00:03:07.360 --> 00:03:08.140\nET phone home.\n\n59\n00:03:08.140 --> 00:03:08.950\nWhat can I say?\n\n60\n00:03:08.950 --> 00:03:10.880\nThat brings me back.\n\n61\n00:03:10.880 --> 00:03:15.000\nFor some reason I wanna get on a bicycle\nand ride in front of the moon.\n\n62\n00:03:15.000 --> 00:03:19.190\nHowever, let's go ahead and just make our\nserver first, just a plain old server.\n\n63\n00:03:19.190 --> 00:03:24.670\nNow in doing this we actually have\nto test this out with a client.\n\n64\n00:03:24.670 --> 00:03:28.770\nWe could write the client, but\nmaybe I'll save that fun for\n\n65\n00:03:28.770 --> 00:03:34.310\nwhen we actually get our the clients.\n\n66\n00:03:34.310 --> 00:03:39.750\nSo I'm pretty sure that I have on here,\nso it's just boom.\n\n67\n00:03:39.750 --> 00:03:41.580\n&gt;&gt; Swiss Army knife of.\n\n68\n00:03:41.580 --> 00:03:42.440\n&gt;&gt; I know.\n\n69\n00:03:42.440 --> 00:03:43.000\nI know.\n\n70\n00:03:44.180 --> 00:03:45.630\nSo just for being expeditious,\n\n71\n00:03:45.630 --> 00:03:49.800\nbuild the server, send information to it\nthrough net cat, just get it to print out.\n\n72\n00:03:49.800 --> 00:03:53.610\nSo let's take a look at my screen here and\nI have a folder called, well TCP server.\n\n73\n00:03:53.610 --> 00:03:55.690\nCraziest thing, your notes.\n\n74\n00:03:56.880 --> 00:03:59.950\nSo what are we going to do here?\n\n75\n00:03:59.950 --> 00:04:04.670\nI don't know,\nlet's create a file called server.py.\n\n76\n00:04:04.670 --> 00:04:06.810\nAnd I'm gonna clear that out in server.py.\n\n77\n00:04:06.810 --> 00:04:09.940\nNow the ability to make a server,\nthere's a couple ways there.\n\n78\n00:04:09.940 --> 00:04:14.500\nI wanna take a quick aside and\nwe're gonna use kind of the low level way.\n\n79\n00:04:14.500 --> 00:04:15.640\nIn Python 3, there's\n\n80\n00:04:17.760 --> 00:04:21.830\nthis socket library which we've seen\nextensively through this series.\n\n81\n00:04:21.830 --> 00:04:24.220\nBut there's also a socket server.\n\n82\n00:04:25.300 --> 00:04:28.030\nAnd that is actually\na higher level module.\n\n83\n00:04:29.060 --> 00:04:31.980\nThere's a class called TCPServer.\n\n84\n00:04:31.980 --> 00:04:33.160\nAnd that's what it does.\n\n85\n00:04:33.160 --> 00:04:34.300\n&gt;&gt; That's aptly named [LAUGH].\n\n86\n00:04:34.300 --> 00:04:35.430\n&gt;&gt; Yeah, wonder what that does.\n\n87\n00:04:35.430 --> 00:04:36.360\nI think it does TCP stuff.\n\n88\n00:04:36.360 --> 00:04:40.380\n&gt;&gt; I think it makes grilled cheese.\n\n89\n00:04:40.380 --> 00:04:41.200\n&gt;&gt; Yeah, it's like [LAUGH].\n\n90\n00:04:41.200 --> 00:04:43.890\nIt's like a panini press,\nI don't know, I don't know.\n\n91\n00:04:43.890 --> 00:04:51.460\nBut along in this documentation, not these\ndocumentation, there's a UDP server.\n\n92\n00:04:51.460 --> 00:04:54.830\nThere's a Unix stream server,\nUnix datagram server.\n\n93\n00:04:54.830 --> 00:05:00.850\nSo there's a crazy amount that's\nalready pre-built for you.\n\n94\n00:05:00.850 --> 00:05:02.620\nNow we could use this.\n\n95\n00:05:02.620 --> 00:05:05.870\nBut for some reason in my gut,\nat this point for\n\n96\n00:05:05.870 --> 00:05:09.400\na learning experience,\nit kinda makes me feel nauseaus.\n\n97\n00:05:09.400 --> 00:05:10.910\nIt kinda feels like cheating.\n\n98\n00:05:10.910 --> 00:05:12.720\n&gt;&gt; It's doing a little too much for us.\n\n99\n00:05:12.720 --> 00:05:17.900\n&gt;&gt; Yeah there's a whole bunch of magic\nthat maybe I wanna keep this fairly slim,\n\n100\n00:05:17.900 --> 00:05:20.660\nfairly small it does one particular thing.\n\n101\n00:05:20.660 --> 00:05:25.130\nWhat's great about this built in\nsocket server module inside of Python\n\n102\n00:05:26.280 --> 00:05:28.840\nis a lot of that is already built in for\nyou and\n\n103\n00:05:28.840 --> 00:05:32.280\nit handles errors a little better\nthen you may, things of that nature.\n\n104\n00:05:32.280 --> 00:05:33.190\nSo keep that in mind.\n\n105\n00:05:33.190 --> 00:05:37.920\nIf you're needing to build an application\nthat needs to be more robust,\n\n106\n00:05:37.920 --> 00:05:40.970\nYou might want to investigate using these.\n\n107\n00:05:40.970 --> 00:05:44.790\nSo if you go down it actually gives\nyou a fair amount of hey this is\n\n108\n00:05:44.790 --> 00:05:48.060\nhow you make it, but\nyou have to open sockets and\n\n109\n00:05:48.060 --> 00:05:52.510\ncreate servers and then you also\nhave to give it what's called\n\n110\n00:05:52.510 --> 00:05:55.960\na handler like how to handle requests that\ncome in and out and things of that nature.\n\n111\n00:05:55.960 --> 00:06:00.169\nSo, it's a little more involved,\nbut it's going to be more robust.\n\n112\n00:06:01.310 --> 00:06:02.666\nHowever, that's not what we're doing.\n\n113\n00:06:02.666 --> 00:06:06.560\nWe're going to go kind of low level,\nold school.\n\n114\n00:06:06.560 --> 00:06:10.700\nI want to make a very simple one, okay?\n\n115\n00:06:10.700 --> 00:06:11.670\nNow, how are we going to do it?\n\n116\n00:06:11.670 --> 00:06:13.020\nWell, we need the socket library.\n\n117\n00:06:13.020 --> 00:06:14.410\nWe're going to use socket.\n\n118\n00:06:14.410 --> 00:06:18.930\nSo, import socket, just like so.\n\n119\n00:06:18.930 --> 00:06:21.200\nAnd let's create a class.\n\n120\n00:06:22.250 --> 00:06:23.520\nAnd I'm gonna do that just so\n\n121\n00:06:23.520 --> 00:06:27.810\nI can cache some things than actually\nnot running on a separate things.\n\n122\n00:06:27.810 --> 00:06:31.570\nOkay so I can write this in a function but\nI tend to like\n\n123\n00:06:31.570 --> 00:06:36.020\nto say here's all the information I need\nand then here's the behavior that I want.\n\n124\n00:06:36.020 --> 00:06:41.210\nSo a class is a good way to organize that\nas we've seen well on several episodes.\n\n125\n00:06:41.210 --> 00:06:43.910\nDon't put too many underscores\nthere cause it's not helpful.\n\n126\n00:06:45.350 --> 00:06:49.470\nSo we need a host and a port, all right?\n\n127\n00:06:49.470 --> 00:06:53.090\nSo what we're gonna do is we're\ngonna create a socket, so\n\n128\n00:06:53.090 --> 00:07:00.259\nsocket Self.socket = socket.socket and\n\n129\n00:07:00.259 --> 00:07:04.442\nsocket.AF_INET and\n\n130\n00:07:04.442 --> 00:07:09.730\nthen socket.SOCK_STREAM.\n\n131\n00:07:09.730 --> 00:07:14.700\nAnd then another thing in doing these kind\nof things if you find this interesting\n\n132\n00:07:14.700 --> 00:07:19.000\nyou will learn a great deal about\nthese respective protocols families.\n\n133\n00:07:19.000 --> 00:07:22.880\nAlso, well that kind of comes in this way,\nhow do I do that?\n\n134\n00:07:22.880 --> 00:07:25.270\nSo if nothing else,\nthis is a great learning experience.\n\n135\n00:07:26.550 --> 00:07:28.830\nSo what is the server going to do?\n\n136\n00:07:28.830 --> 00:07:32.700\nWell, okay, so we've set up the socket,\n\n137\n00:07:33.820 --> 00:07:39.760\nwe're gonna go ahead and\nbind to the host and port.\n\n138\n00:07:39.760 --> 00:07:40.760\nNow what is bind?\n\n139\n00:07:41.880 --> 00:07:43.310\nBind if going to be, excuse me,\n\n140\n00:07:43.310 --> 00:07:45.692\nI don't want to bind it,\nI don't want to bind it, I'm sorry.\n\n141\n00:07:45.692 --> 00:07:47.545\n&gt;&gt; [LAUGH] You don't want, forget that.\n\n142\n00:07:47.545 --> 00:07:49.590\n[LAUGH]\n&gt;&gt; Yeah, all that thing I said just now,\n\n143\n00:07:49.590 --> 00:07:50.819\n&gt;&gt; It's never.\n\n144\n00:07:50.819 --> 00:07:52.640\n&gt;&gt; [LAUGH] Yeah, forget it.\n\n145\n00:07:52.640 --> 00:07:53.456\nThrow it away.\n\n146\n00:07:53.456 --> 00:07:54.594\n&gt;&gt; [LAUGH]\n&gt;&gt; Throw it away.\n\n147\n00:07:54.594 --> 00:07:59.802\nWhat I want to do is when I call serve,\nI now want to bind and\n\n148\n00:07:59.802 --> 00:08:03.616\nset off kind of like the serving process.\n\n149\n00:08:03.616 --> 00:08:06.137\nI can create the server,\ndo some other stuff like other setup.\n\n150\n00:08:06.137 --> 00:08:07.452\nMaybe I need some other things.\n\n151\n00:08:07.452 --> 00:08:10.852\nAnd when I'm building and\nthen when I call server.serve,\n\n152\n00:08:10.852 --> 00:08:14.120\nboom it kicks off and\nnow its listening for connections.\n\n153\n00:08:15.470 --> 00:08:21.472\nSo this socket that I've made for the\nserver, it's there, what do I need to do?\n\n154\n00:08:21.472 --> 00:08:25.352\nWell I need to bind it to\na host in a port, okay?\n\n155\n00:08:25.352 --> 00:08:30.830\nAnd then when I do that I also wanna say,\nI need you to listen for connections and\n\n156\n00:08:30.830 --> 00:08:35.984\nwhen you get a connection,\nhere's what's going to happen, all right?\n\n157\n00:08:35.984 --> 00:08:40.370\nSo here's what we're gonna do,\n\n158\n00:08:40.370 --> 00:08:44.600\nwe're gonna say self.bind and\n\n159\n00:08:44.600 --> 00:08:50.405\nself.host = host and self.port = port.\n\n160\n00:08:50.405 --> 00:08:54.223\nSo I wanna save those as kind of\ninternal pieces of data for the server,\n\n161\n00:08:54.223 --> 00:08:56.825\nyou never know when they\nmight be useful again.\n\n162\n00:08:56.825 --> 00:09:01.373\nSo I'm gonna bind to that respective\npiece, so I'm gonna bind to host.\n\n163\n00:09:01.373 --> 00:09:04.576\nAnd notice this is wrapped in a tuple, so\n\n164\n00:09:04.576 --> 00:09:08.260\nactually let me extract\nthat just to be clear.\n\n165\n00:09:08.260 --> 00:09:11.480\nIt's kinda the connect that we do, and\n\n166\n00:09:11.480 --> 00:09:15.781\nlet's just call it host port,\nvery original name.\n\n167\n00:09:15.781 --> 00:09:19.495\nAnd here's our host port tuple,\nnotice it's parentheses comma.\n\n168\n00:09:19.495 --> 00:09:22.760\nThat means I have an immutable data\nstructure with two pieces of information\n\n169\n00:09:22.760 --> 00:09:23.840\nhost and port.\n\n170\n00:09:23.840 --> 00:09:24.456\nThere we go.\nAnd\n\n171\n00:09:24.456 --> 00:09:29.853\nthen I'm gonna bind to the host port pair,\nand then I'm gonna say self.listen.\n\n172\n00:09:29.853 --> 00:09:34.875\nAnd let's go see what this listen\nthing does, not self.lesson.\n\n173\n00:09:34.875 --> 00:09:39.702\nBy the way, you actually have to bind\nthe socket not the server itself.\n\n174\n00:09:39.702 --> 00:09:45.462\nSo not the server object that we're\nbuilding, so self.socket.listen.\n\n175\n00:09:45.462 --> 00:09:46.761\nThere we go.\n\n176\n00:09:46.761 --> 00:09:51.302\nSo let's go see what that\nlisten actually does.\n\n177\n00:09:51.302 --> 00:09:55.225\nSo if I come over here and\nI say listen and listen,\n\n178\n00:09:55.225 --> 00:09:58.493\nenable a server to accept connections.\n\n179\n00:09:58.493 --> 00:10:03.514\nIf backlog is enabled, it must be at least\nzero, if it's lower it will set to zero.\n\n180\n00:10:03.514 --> 00:10:07.550\nIt specifies the number of unaccepted\nconnections that the system will allow\n\n181\n00:10:07.550 --> 00:10:09.795\nbefore refusing new connections, okay?\n\n182\n00:10:09.795 --> 00:10:14.302\nSo essentially you're setting the number\nof connections that kind of queue up to\n\n183\n00:10:14.302 --> 00:10:15.042\nthe server.\n\n184\n00:10:15.042 --> 00:10:19.044\nNow, this is a very simple one, we're not\nusing threads to spin off new threads\n\n185\n00:10:19.044 --> 00:10:21.151\nthat'll handle multiple connections.\n\n186\n00:10:21.151 --> 00:10:22.983\nIt is not meant to be that, right?\n\n187\n00:10:22.983 --> 00:10:27.577\nThe anticipation of this is how\ndo I make a server that I can\n\n188\n00:10:27.577 --> 00:10:31.333\nset up that is expecting\na single connection?\n\n189\n00:10:31.333 --> 00:10:35.280\nA connection for my phone home sniffer,\nthat's all I need.\n\n190\n00:10:35.280 --> 00:10:38.850\nI don't wanna a bunch of other stuff\nkind of connecting to it, right?\n\n191\n00:10:40.210 --> 00:10:46.020\nSo let's switch back and\nthat explains why I have the one there.\n\n192\n00:10:46.020 --> 00:10:51.822\nI am kind of giving a little bit of\nwiggle room, could set it to zero.\n\n193\n00:10:51.822 --> 00:10:54.483\nGive it one just in case\nsomething's trying to connect and\n\n194\n00:10:54.483 --> 00:10:56.342\nthe other connection has to hold there.\n\n195\n00:10:56.342 --> 00:10:59.462\nSo now once I make this listen,\n\n196\n00:10:59.462 --> 00:11:04.271\nI'm going to do what's\ncalled an accept call.\n\n197\n00:11:04.271 --> 00:11:06.190\nAnd you know what?\n\n198\n00:11:06.190 --> 00:11:12.249\nIn order to see what that does,\nI'm just gonna say,\n\n199\n00:11:12.249 --> 00:11:18.280\nresponse or results = self.socket.accept.\n\n200\n00:11:18.280 --> 00:11:23.172\nNow, this accept is saying,\nI'm accepting a connection, okay?\n\n201\n00:11:23.172 --> 00:11:24.012\nThat's kind of obvious.\n\n202\n00:11:24.012 --> 00:11:25.043\n&gt;&gt; We like that.\n\n203\n00:11:25.043 --> 00:11:25.807\n&gt;&gt; I'll allow, I'll allow.\n\n204\n00:11:25.807 --> 00:11:28.424\n&gt;&gt; [LAUGH]\n&gt;&gt; And I'm just gonna print that out.\n\n205\n00:11:28.424 --> 00:11:34.353\nNow what this means is,\nthis is not actually gonna say running.\n\n206\n00:11:34.353 --> 00:11:37.005\nSo these servers typically end up\nin an infinite loop, just waiting.\n\n207\n00:11:37.005 --> 00:11:38.763\nThey're like is there a connection yet?\n\n208\n00:11:38.763 --> 00:11:39.413\nHow about now?\n\n209\n00:11:39.413 --> 00:11:40.052\nHow about now?\n\n210\n00:11:40.052 --> 00:11:40.911\nHow about now?\n\n211\n00:11:40.911 --> 00:11:41.531\nHow about now?\n\n212\n00:11:41.531 --> 00:11:44.972\nAnd then when something happens,\nboom, it's there.\n\n213\n00:11:44.972 --> 00:11:53.761\nSo we put our kind of main method here,\nSo there we go.\n\n214\n00:11:53.761 --> 00:11:57.594\nAnd then I'm gonna create my server,\nand that's gonna be my server object.\n\n215\n00:11:57.594 --> 00:12:03.237\nAnd I'm just gonna say local host and\nlet me say Port 8080, okay?\n\n216\n00:12:03.237 --> 00:12:06.531\nFor some reason based on my development\nexperience and stuff, 8080 and\n\n217\n00:12:06.531 --> 00:12:08.344\nI was like yeah, just put it on 8080.\n\n218\n00:12:08.344 --> 00:12:09.760\nThat's cool, just put it on 8080.\n\n219\n00:12:09.760 --> 00:12:11.860\nI think that's Tomcat and\nsome other things.\n\n220\n00:12:13.140 --> 00:12:17.375\nThere's nothing special about that and\nI could pick any port that I want, as long\n\n221\n00:12:17.375 --> 00:12:21.692\nas there's not already an existing service\nkind of harboring that port, right?\n\n222\n00:12:21.692 --> 00:12:24.974\n&gt;&gt; I believe it's also a very\npopular port for proxy servers.\n\n223\n00:12:24.974 --> 00:12:26.859\n&gt;&gt; [LAUGH]\n&gt;&gt; Well there you go,\n\n224\n00:12:26.859 --> 00:12:28.867\nmaybe that's why it's-\n&gt;&gt; Yeah.\n\n225\n00:12:28.867 --> 00:12:29.881\n&gt;&gt; There, right?\nSo-\n\n226\n00:12:29.881 --> 00:12:30.855\n&gt;&gt; Serendipity, right?\n\n227\n00:12:30.855 --> 00:12:31.748\n&gt;&gt; I know, I know.\n\n228\n00:12:31.748 --> 00:12:33.622\nIt's like my brain is\nmaking decisions without me\n\n229\n00:12:33.622 --> 00:12:34.263\nbeing-\n&gt;&gt; [LAUGH]\n\n230\n00:12:34.263 --> 00:12:35.763\n&gt;&gt; Conscious of said things.\n\n231\n00:12:35.763 --> 00:12:36.818\nSo here's our server.\n\n232\n00:12:36.818 --> 00:12:40.203\nNow, because I have this .server,\n\n233\n00:12:40.203 --> 00:12:44.798\nit actually does the bind and\nlisten and connect.\n\n234\n00:12:44.798 --> 00:12:46.754\nI could do other set up here, right?\n\n235\n00:12:46.754 --> 00:12:51.594\nSo additional set up, and\nthen actually at the very end I wanted to\n\n236\n00:12:51.594 --> 00:12:55.910\nkick off the process,\nI could say server.serve like so.\n\n237\n00:12:55.910 --> 00:12:59.553\nAnd I can name that run or\nmain loop or something like that.\n\n238\n00:12:59.553 --> 00:13:02.023\nSo there's our server.serv.\n\n239\n00:13:02.023 --> 00:13:05.369\nThis should run, so let's note there's\n\n240\n00:13:05.369 --> 00:13:10.062\na nice little qualifying word\nin the previous statement.\n\n241\n00:13:10.062 --> 00:13:15.828\nShould, should run and host, post.\n\n242\n00:13:15.828 --> 00:13:16.840\n&gt;&gt; Host, post.\n\n243\n00:13:16.840 --> 00:13:18.453\n[LAUGH]\n&gt;&gt; Host, post.\n\n244\n00:13:18.453 --> 00:13:19.951\n[LAUGH] Host, post, man.\n\n245\n00:13:19.951 --> 00:13:20.966\n&gt;&gt; I don't think that's gonna work,\nJustin.\n\n246\n00:13:20.966 --> 00:13:23.036\n&gt;&gt; Yeah, cause that's not actually-\n&gt;&gt; I mean your intentions were good.\n\n247\n00:13:23.036 --> 00:13:24.089\n&gt;&gt; Yeah, yeah.\n\n248\n00:13:24.089 --> 00:13:25.712\n&gt;&gt; I don't think it's gonna [CROSSTALK]\n&gt;&gt; Notice, I said should.\n\n249\n00:13:25.712 --> 00:13:27.294\n&gt;&gt; Yeah, you did, you did.\n\n250\n00:13:27.294 --> 00:13:29.319\n&gt;&gt; Notice, I said should.\nSo I'm gonna hop over here and\n\n251\n00:13:29.319 --> 00:13:33.228\nI'm just gonna say,\nI think it's address and then port?\n\n252\n00:13:33.228 --> 00:13:34.128\n&gt;&gt; Yes, yes.\n\n253\n00:13:34.128 --> 00:13:37.546\n&gt;&gt; So I'm just gonna say local host,\nand then 8080.\n\n254\n00:13:37.546 --> 00:13:41.070\nAnd boom, and now it makes the connection.\n\n255\n00:13:41.070 --> 00:13:45.234\nIt's not keeping the connection open,\nbecause it's not in an infinite loop,\n\n256\n00:13:45.234 --> 00:13:46.301\nlike an event loop.\n\n257\n00:13:46.301 --> 00:13:48.542\nBut what we got is this print out and\n\n258\n00:13:48.542 --> 00:13:52.850\nyou'll notice there's\na bunch of stuff here, right?\n\n259\n00:13:52.850 --> 00:13:57.769\nAnd it's kind of hard to read, so\n\n260\n00:13:57.769 --> 00:14:04.455\nlet me hop in here and\nkind of pull this apart.\n\n261\n00:14:04.455 --> 00:14:05.713\nWait for it, wait for it.\n\n262\n00:14:05.713 --> 00:14:06.653\nThere we go.\n&gt;&gt; [LAUGH]\n\n263\n00:14:06.653 --> 00:14:08.698\n&gt;&gt; It's like I forgot how to type there\n\n264\n00:14:08.698 --> 00:14:09.521\nfor a minute.\n\n265\n00:14:09.521 --> 00:14:15.412\nLet me just put these on new lines, so we\ncan see what the individual elements are.\n\n266\n00:14:15.412 --> 00:14:20.102\nSo I'm gonna map string of results,\nyou don't necessarily have to worry about\n\n267\n00:14:20.102 --> 00:14:22.972\nthe syntax because it's\ngonna go away shortly.\n\n268\n00:14:22.972 --> 00:14:28.272\nSo Python 3 sever address already in use,\nyou know what?\n\n269\n00:14:28.272 --> 00:14:29.472\nI forgot to close that.\n\n270\n00:14:29.472 --> 00:14:30.412\n&gt;&gt; Close that down.\n\n271\n00:14:30.412 --> 00:14:31.350\n&gt;&gt; Yeah, yeah.\n\n272\n00:14:31.350 --> 00:14:34.703\n&gt;&gt; It doesn't like that whole trying to\nuse a port you're already using thing.\n\n273\n00:14:34.703 --> 00:14:36.710\n&gt;&gt; Yeah, yeah, man.\n\n274\n00:14:36.710 --> 00:14:40.457\nAll right, so let's see here,\n\n275\n00:14:43.072 --> 00:14:46.893\nI'm just gonna change the port and\nlet's just hand wave at it a little bit.\n\n276\n00:14:46.893 --> 00:14:48.891\nWe'll handle that in just a moment.\n\n277\n00:14:48.891 --> 00:14:52.856\nSo I'm gonna change this to,\n\n278\n00:14:55.042 --> 00:15:00.292\nBut I am gonna do one final thing,\nand that's self.socket.close.\n\n279\n00:15:00.292 --> 00:15:02.111\nAll right, there, so\nI can go ahead and close that off.\n\n280\n00:15:02.111 --> 00:15:05.017\nNow, it may take some time to clean it up,\nand\n\n281\n00:15:05.017 --> 00:15:09.238\neventually that process should\nget cleaned up, but there we go.\n\n282\n00:15:09.238 --> 00:15:12.780\nSo python3 server, there it is,\n\n283\n00:15:12.780 --> 00:15:17.676\nand hopefully this prints\nout appropriately.\n\n284\n00:15:17.676 --> 00:15:19.923\nThere we go, so boom.\n\n285\n00:15:19.923 --> 00:15:25.462\nAnd now what's kinda weird is that\nit's hard to see is I have this.\n\n286\n00:15:25.462 --> 00:15:30.473\nThis is actually the saga connection,\nand this is some additional information.\n\n287\n00:15:30.473 --> 00:15:32.653\nSo these are on new lines.\n\n288\n00:15:32.653 --> 00:15:37.584\nThis entire thing is a single\nthing that I have, okay?\n\n289\n00:15:37.584 --> 00:15:44.422\nNow, [COUGH] if we come over to\nthe documentation and we look for accept.\n\n290\n00:15:44.422 --> 00:15:47.676\nWait for it, the accept method.\n\n291\n00:15:47.676 --> 00:15:49.948\nLet me go back to the top.\n\n292\n00:15:49.948 --> 00:15:54.151\nNow close, File, accept.\n\n293\n00:15:54.151 --> 00:15:55.936\nI like how it's like, nope.\n\n294\n00:15:55.936 --> 00:15:58.447\nSo let's go back up here,\ncuz I know it's above that.\n\n295\n00:15:58.447 --> 00:15:59.326\nThere we go.\n\n296\n00:15:59.326 --> 00:16:00.289\nAccept a connection.\n\n297\n00:16:00.289 --> 00:16:02.701\nThe cycle must be bound to an address.\n\n298\n00:16:02.701 --> 00:16:06.885\nThe return value is the pair,\na connection type, and an address.\n\n299\n00:16:06.885 --> 00:16:09.282\nSo, it actually gives\nyou the address back.\n\n300\n00:16:09.282 --> 00:16:13.817\nIf we come over here,\nnotice 127.0.0.1 is looped back.\n\n301\n00:16:13.817 --> 00:16:20.072\nAnd then, well,\nthat's not what I'm, what is that?\n\n302\n00:16:20.072 --> 00:16:22.737\nThe connection is what we care about, so,\n\n303\n00:16:22.737 --> 00:16:25.704\nwe're gonna kinda leave that one be,\nfor now.\n\n304\n00:16:28.371 --> 00:16:31.092\nHere's where we really care\nabout is this portion.\n\n305\n00:16:31.092 --> 00:16:35.133\nWhat is it connected externally to, right?\n\n306\n00:16:35.133 --> 00:16:39.178\nSo [COUGH] 80, 81, okay.\n\n307\n00:16:39.178 --> 00:16:46.380\nNow if I come back in Python3,\nI'm gonna get rid of this print line here.\n\n308\n00:16:47.380 --> 00:16:53.520\nI'm going to get a connection,\nand an address, just like that.\n\n309\n00:16:53.520 --> 00:16:58.390\nSo I can unpack them as I tuple,\nand then I can say, so\n\n310\n00:16:58.390 --> 00:16:59.927\nit will clean up after itself.\n\n311\n00:16:59.927 --> 00:17:06.525\nUndo, There we go.\n\n312\n00:17:06.525 --> 00:17:10.397\nI can say with this connection,\nthis is a context manager, and\n\n313\n00:17:10.397 --> 00:17:14.132\nthat one calls close and\nshut down and terminate and remove.\n\n314\n00:17:14.132 --> 00:17:17.220\nAll of those thing with that connection.\n\n315\n00:17:18.520 --> 00:17:26.130\nSo I don't have to handle that by myself\nor kinda of straightforward procedurally.\n\n316\n00:17:26.130 --> 00:17:29.290\nThat's what I'm trying to say,\nbut once I have this connection,\n\n317\n00:17:29.290 --> 00:17:35.034\nI'm gonna say while True I'm gonna say,\n\n318\n00:17:35.034 --> 00:17:38.880\n[COUGH]\nreceive.\n\n319\n00:17:38.880 --> 00:17:40.260\nNow, what is that receive?\n\n320\n00:17:40.260 --> 00:17:47.120\nWell, this connection is a receive type.\n\n321\n00:17:47.120 --> 00:17:51.026\nSo, if we come over here and we look for\nconnection, there's our connection.\n\n322\n00:17:51.026 --> 00:17:56.590\nAnd then connect, I'm looking for receive.\n\n323\n00:17:58.140 --> 00:18:01.040\nSo, receive, receive, receive, and\n\n324\n00:18:01.040 --> 00:18:04.890\nwe should just be able to receive\ndata from the connection, okay.\n\n325\n00:18:06.890 --> 00:18:11.690\nSo, I'm gonna say,\ndata = connection receive.\n\n326\n00:18:14.500 --> 00:18:18.820\nAnd we have to give it a buffer length and\nI'm just gonna say 1024.\n\n327\n00:18:18.820 --> 00:18:21.488\nAnd then if data print data,\n\n328\n00:18:21.488 --> 00:18:26.722\nit won't let me more\nappropriately format that there.\n\n329\n00:18:29.631 --> 00:18:34.100\nAnd then, we'll just leave that until\nI Ctrl + C, keyboard interrupt.\n\n330\n00:18:35.820 --> 00:18:40.763\nSo get rid of this, python3 server,\nthere it's running.\n\n331\n00:18:40.763 --> 00:18:46.875\nLet's hop over into Netcat,\nload the host ADAD and now,\n\n332\n00:18:50.854 --> 00:18:55.460\nI can actually send information as binary\ndata over the wire back to the server.\n\n333\n00:18:56.460 --> 00:19:00.195\nWell, we can now build a server\nthat we host somewhere else,\n\n334\n00:19:00.195 --> 00:19:04.045\nread our client connection\nproblematically in our sniffer.\n\n335\n00:19:04.045 --> 00:19:09.134\nAnd then send those packets\nover either in raw form,\n\n336\n00:19:09.134 --> 00:19:12.020\nright, and to be parsed somewhere else.\n\n337\n00:19:12.020 --> 00:19:16.710\nOr maybe I parse them there and\nsend out the smallest little bit of\n\n338\n00:19:16.710 --> 00:19:21.680\ninformation that I need so it's maybe\nsomeone is monitoring network traffic and\n\n339\n00:19:21.680 --> 00:19:24.480\nI need to reduce my pay\nload to incredibly small.\n\n340\n00:19:24.480 --> 00:19:26.440\nSo there's a couple of different ways, but\n\n341\n00:19:26.440 --> 00:19:28.590\nsince we have the server,\nwe're able to do that.\n\n342\n00:19:28.590 --> 00:19:30.630\nBut since,\nI wanna show you both those ways.\n\n343\n00:19:30.630 --> 00:19:33.590\nMaybe it's best if we come\nback to actually make our\n\n344\n00:19:33.590 --> 00:19:35.770\npacket sniffer a phone\nhome packet sniffer.\n\n345\n00:19:35.770 --> 00:19:39.130\n&gt;&gt; Well, that does sound like\na very interesting project, indeed.\n\n346\n00:19:39.130 --> 00:19:40.690\nVery cool to see the server get up and\nrunning.\n\n347\n00:19:40.690 --> 00:19:44.510\nWell, it didn't seem too difficult,\nvery simplistic, make that connection, and\n\n348\n00:19:44.510 --> 00:19:47.390\nthen allow for data to pass between them.\n\n349\n00:19:47.390 --> 00:19:48.790\nVery, very nice and neatly done.\n\n350\n00:19:48.790 --> 00:19:51.430\nJustin, I thank you for\nshowing us how we can do that.\n\n351\n00:19:51.430 --> 00:19:53.010\nAnd you didn't take the easy route right?\n\n352\n00:19:53.010 --> 00:19:56.280\nYou didn't just go well yeah, Python has\nthat built into it, you can do that.\n\n353\n00:19:56.280 --> 00:20:01.570\nPython is a very powerful tool,\nbut if we want to learn we wanna\n\n354\n00:20:01.570 --> 00:20:04.740\nunderstand more in depth how\nthese things are happening.\n\n355\n00:20:04.740 --> 00:20:06.980\nDoing it your way is definitely\nthe better way to go.\n\n356\n00:20:06.980 --> 00:20:09.820\nJustin I appreciate you dropping by today,\nI do appreciate our audience for\n\n357\n00:20:09.820 --> 00:20:13.590\nwatching too, but it does look like\nwe are at the end of this episode.\n\n358\n00:20:13.590 --> 00:20:17.420\nCome back and see how that client works\nout, but for here we're gonna go ahead and\n\n359\n00:20:17.420 --> 00:20:17.940\ncall it a day.\n\n360\n00:20:17.940 --> 00:20:20.920\nThanks for watching, signing off for\nDevProTV, I've been your host,\n\n361\n00:20:20.920 --> 00:20:21.660\nDaniel Lowrie.\n\n362\n00:20:21.660 --> 00:20:22.773\n&gt;&gt; And I'm Justin Dennison.\n\n363\n00:20:22.773 --> 00:20:24.201\n&gt;&gt; We'll see you next time.\n\n364\n00:20:24.201 --> 00:20:29.080\n[MUSIC]\n\n",
          "vimeoId": "229136448"
        },
        {
          "description": "In this episode, Daniel and Justin take many of the projects that they've been building and throw them all together into an amalgamation they call the Forwarding Packet Sniffer.",
          "length": "1490",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-7-1-forwarding_packet_sniffer-081017-PGM.00_25_34_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-7-1-forwarding_packet_sniffer-081017-PGM.00_25_34_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pythonforsecurity/techskills-pythonforsecurity-7-1-forwarding_packet_sniffer-081017-PGM.00_25_34_05.Still001-sm.jpg",
          "title": "Forwarding Packet Sniffer",
          "transcript": "WEBVTT\n\n1\n00:00:00.000 --> 00:00:10.000\n[MUSIC]\n\n2\n00:00:12.969 --> 00:00:14.218\nAll right, greetings everyone.\n\n3\n00:00:14.218 --> 00:00:17.466\nWelcome back to another\ngreat episode of DevPro TV.\n\n4\n00:00:17.466 --> 00:00:18.891\nI'm your host Daniel Lowrie.\n\n5\n00:00:18.891 --> 00:00:23.120\nIn today's episode, well it's more,\nwhat is it, Python, for security.\n\n6\n00:00:23.120 --> 00:00:25.090\nThat's right, I do so\nmany shows around here.\n\n7\n00:00:25.090 --> 00:00:26.610\nI forget where I'm at half the time.\n\n8\n00:00:26.610 --> 00:00:27.940\nJoining us back in the studio yet\n\n9\n00:00:27.940 --> 00:00:31.280\nagain to continue that conversation,\nour good friend Mr. Justin Dennison.\n\n10\n00:00:31.280 --> 00:00:32.530\nJustin, welcome, Sir.\n\n11\n00:00:32.530 --> 00:00:33.390\nHow's it going today?\n\n12\n00:00:33.390 --> 00:00:34.750\n&gt;&gt; It is going fairly well.\n\n13\n00:00:34.750 --> 00:00:35.933\nI was about to forget where I was.\n\n14\n00:00:35.933 --> 00:00:37.413\nI'm like, how'd I get here?\n\n15\n00:00:37.413 --> 00:00:38.157\n&gt;&gt; Yeah.\n\n16\n00:00:38.157 --> 00:00:39.109\n&gt;&gt; I don't know, but luckily.\n\n17\n00:00:39.109 --> 00:00:39.660\n&gt;&gt; Osmosis.\n\n18\n00:00:39.660 --> 00:00:42.458\n[LAUGH]\n&gt;&gt; I do know about one of the topic at\n\n19\n00:00:42.458 --> 00:00:47.570\nhand, and that's we've seen the last few\nepisodes, we've made a packet sniffer.\n\n20\n00:00:47.570 --> 00:00:48.270\n&gt;&gt; We did.\n\n21\n00:00:48.270 --> 00:00:49.580\n&gt;&gt; And we made a server.\n\n22\n00:00:49.580 --> 00:00:53.210\nAnd we've been able to make client\nconnections to said servers.\n\n23\n00:00:53.210 --> 00:00:57.400\nAnd I had this maniacal evil genius plan,\nor I like to put it that way.\n\n24\n00:00:57.400 --> 00:01:00.445\nYou can take all those and\njust put them in a blender and [SOUND].\n\n25\n00:01:00.445 --> 00:01:05.700\nThen we could, we could, hear me out,\nmake a packet sniffer that phones home.\n\n26\n00:01:05.700 --> 00:01:09.220\nInstead of saving it locally, it just\nsends it over to another server and\n\n27\n00:01:09.220 --> 00:01:10.907\nthen all of our parsing and stuff.\n\n28\n00:01:10.907 --> 00:01:12.579\nSo I just kinda forward that along.\n\n29\n00:01:12.579 --> 00:01:14.619\n&gt;&gt; You diabolical genius, you.\n\n30\n00:01:14.619 --> 00:01:15.507\n&gt;&gt; I know, I know.\n\n31\n00:01:15.507 --> 00:01:16.491\n&gt;&gt; I like how you think, Sir.\n\n32\n00:01:16.491 --> 00:01:20.510\n&gt;&gt; So I think this will\nall come together nicely.\n\n33\n00:01:20.510 --> 00:01:23.540\nSo let's go and take a look at my screen,\nkinda look at the setup a little bit.\n\n34\n00:01:25.030 --> 00:01:27.910\nMainly because, well I'm running a VM,\nhas Linux in it but\n\n35\n00:01:27.910 --> 00:01:33.550\nI'm also gonna run something locally on my\nMac to simulate the actual across net now.\n\n36\n00:01:33.550 --> 00:01:36.949\nIt is through the network but\nI'm saying a distance, right?\n\n37\n00:01:36.949 --> 00:01:40.343\nFar apart machines that can\nmake some kinda connections.\n\n38\n00:01:40.343 --> 00:01:43.704\nSo this is the Linux VM that I'm running.\n\n39\n00:01:43.704 --> 00:01:47.073\nAnd well, what is going to happen here?\n\n40\n00:01:47.073 --> 00:01:51.535\nWell, I'm gonna take the packet sniffer\nthat we've written before, right?\n\n41\n00:01:51.535 --> 00:01:53.170\nI'm gonna pare it down.\n\n42\n00:01:53.170 --> 00:01:55.000\nIt's not gonna do all the parsing here.\n\n43\n00:01:55.000 --> 00:01:57.490\nAll it's gonna do is intercept traffic.\n\n44\n00:01:57.490 --> 00:02:00.000\nThis is the machine maybe\nthat I've targeted,\n\n45\n00:02:00.000 --> 00:02:02.079\nI've already escalated privileges.\n\n46\n00:02:02.079 --> 00:02:02.927\nI'm gonna ground the packets.\n\n47\n00:02:02.927 --> 00:02:07.607\nBut instead of saying, all right,\nput these in a PCAT file, parse these,\n\n48\n00:02:07.607 --> 00:02:11.862\nprint these out, I'm just gonna\ngrab that data, the packet data.\n\n49\n00:02:11.862 --> 00:02:13.597\nI'm gonna go ahead and\nsend them somewhere else.\n\n50\n00:02:13.597 --> 00:02:17.360\nForward them to some other server\nbecause we know how to write a server.\n\n51\n00:02:17.360 --> 00:02:18.230\nOn another machine,\n\n52\n00:02:18.230 --> 00:02:23.478\nI'm gonna write the server that's\nlistening for that very connection, okay?\n\n53\n00:02:23.478 --> 00:02:26.540\nNow this would be one of those\nkind of quick and dirty things.\n\n54\n00:02:26.540 --> 00:02:31.198\nIf you wanted to make this robust so\nit ran forever and ever and ever,\n\n55\n00:02:31.198 --> 00:02:33.179\neh, could be a little iffy.\n\n56\n00:02:33.179 --> 00:02:36.577\nOur server could be a little\nmore robust in that capacity.\n\n57\n00:02:36.577 --> 00:02:39.437\nBut what that means is I\nactually have to set up\n\n58\n00:02:39.437 --> 00:02:43.000\nboth pieces before we can\nkinda see it come to fruition.\n\n59\n00:02:43.000 --> 00:02:46.750\nSo there's a little bit of work at hand.\n\n60\n00:02:46.750 --> 00:02:47.590\nDaniel, are you ready?\n\n61\n00:02:47.590 --> 00:02:48.930\n&gt;&gt; I am ready, Sir.\n\n62\n00:02:48.930 --> 00:02:50.796\n&gt;&gt; He is chomping at the bit.\n\n63\n00:02:50.796 --> 00:02:53.821\n&gt;&gt; [LAUGH]\n&gt;&gt; He's just like that, so\n\n64\n00:02:53.821 --> 00:02:55.855\nlet's go ahead and make our sniffer.\n\n65\n00:02:55.855 --> 00:02:58.470\nAnd we've already seen some of this, but\n\n66\n00:02:58.470 --> 00:03:01.170\nwe're gonna add just a little bit,\npare it down.\n\n67\n00:03:01.170 --> 00:03:05.200\nIt's actually gonna become a lot simpler\nthan it was in the previous few episodes.\n\n68\n00:03:05.200 --> 00:03:07.720\nSo let's see here.\n\n69\n00:03:07.720 --> 00:03:12.410\nI am going to create,\nlet's call it the phone home sniffer.\n\n70\n00:03:13.570 --> 00:03:16.947\nPhone home sniffer, all right?\n\n71\n00:03:16.947 --> 00:03:19.131\nSo here's what I wanna do.\n\n72\n00:03:19.131 --> 00:03:21.161\nI don't wanna be in visual mode.\n\n73\n00:03:21.161 --> 00:03:23.850\nSo I'm gonna import the socket library.\n\n74\n00:03:23.850 --> 00:03:25.671\nAnd I'm gonna create a main function, and\n\n75\n00:03:25.671 --> 00:03:28.010\nthis is essentially\ngonna be our main loop.\n\n76\n00:03:28.010 --> 00:03:29.270\nI could write this in a class.\n\n77\n00:03:29.270 --> 00:03:34.240\nBut just to keep this small, I don't\nneed to store a lot of information.\n\n78\n00:03:34.240 --> 00:03:36.165\nI don't need to have\nhigh level interactions.\n\n79\n00:03:36.165 --> 00:03:39.195\nSo a lot of times,\na function will suffice as well.\n\n80\n00:03:39.195 --> 00:03:41.100\nIt's just about style, right?\n\n81\n00:03:41.100 --> 00:03:44.430\nAll the previous episodes, I technically\njust wrote a bunch of functions that did\n\n82\n00:03:44.430 --> 00:03:46.339\nexactly the same thing and\ncoordinated those.\n\n83\n00:03:47.350 --> 00:03:49.910\nSo, it's all about preference.\n\n84\n00:03:49.910 --> 00:03:51.350\nSo, what are we gonna do here?\n\n85\n00:03:51.350 --> 00:03:54.621\nWell, right now I'm just\ngonna write a pass.\n\n86\n00:03:54.621 --> 00:03:57.657\nI'm gonna go ahead and set this up, and\n\n87\n00:03:57.657 --> 00:04:03.273\nmake sure that I have nothing going\non that would cause me trouble later.\n\n88\n00:04:03.273 --> 00:04:05.360\nSo there's our main function.\n\n89\n00:04:05.360 --> 00:04:06.655\nLet's see if this works.\n\n90\n00:04:06.655 --> 00:04:08.500\nphone_home packet sniffer, it runs.\n\n91\n00:04:08.500 --> 00:04:09.848\nThere's no syntax errors.\n\n92\n00:04:09.848 --> 00:04:13.400\nSo let me hop back in here, and\n\n93\n00:04:13.400 --> 00:04:17.690\nnow there's a few things\nthat I would need to know.\n\n94\n00:04:17.690 --> 00:04:20.990\nWhen I create the connection here,\nfirst of all,\n\n95\n00:04:20.990 --> 00:04:24.870\nI wanna create a connection that's\nactually sniffing for traffic.\n\n96\n00:04:24.870 --> 00:04:27.160\nThat's the part that requires\nescalated privileges.\n\n97\n00:04:27.160 --> 00:04:29.890\nBut I also need to create\na forwarding connection.\n\n98\n00:04:29.890 --> 00:04:32.130\nSo when I grab that,\nI just use that to forward.\n\n99\n00:04:33.510 --> 00:04:37.670\nThat is typically assuming based on\nhow our server's going to be written.\n\n100\n00:04:37.670 --> 00:04:41.510\nThe server already is set up, it already\nexists, it's ready to go in order for\n\n101\n00:04:41.510 --> 00:04:44.740\nthe connection to actually occur, okay?\n\n102\n00:04:44.740 --> 00:04:48.319\nSo let's first create\nthe sniffing connection.\n\n103\n00:04:48.319 --> 00:04:54.695\nSo socket.socket(socket_AF_PACKET.\n\n104\n00:04:54.695 --> 00:05:01.191\nsocket.SOCK_RAW.\n\n105\n00:05:01.191 --> 00:05:07.623\nsocket.intohs/g).\n\n106\n00:05:07.623 --> 00:05:08.905\nYeah, there we go, there we go.\n\n107\n00:05:08.905 --> 00:05:13.321\nSo, what host am I going to\nexpect my server to be running?\n\n108\n00:05:13.321 --> 00:05:18.683\nWell, it's gonna be on my\nlocal machine which is,\n\n109\n00:05:18.683 --> 00:05:21.936\n10.10.10.140.\n\n110\n00:05:21.936 --> 00:05:26.846\nThere we go, and then, port, 8080.\n\n111\n00:05:26.846 --> 00:05:30.460\nAnd now that I have where that\nconnection's going to go,\n\n112\n00:05:30.460 --> 00:05:33.660\nI'm gonna actually create my\nforwarding connection as such.\n\n113\n00:05:33.660 --> 00:05:35.979\nSo my forwarding connection\nis also a socket.\n\n114\n00:05:35.979 --> 00:05:40.599\nHowever, we're now back to AF, just IPB4,\n\n115\n00:05:40.599 --> 00:05:45.227\nfive connections, with socket sockstream.\n\n116\n00:05:45.227 --> 00:05:51.228\nSo SOCK_SRTEAM, just like that.\n\n117\n00:05:51.228 --> 00:05:56.329\nAnd now here's the tricky part.\n\n118\n00:05:56.329 --> 00:06:03.885\nDon't forget to call forward.connect\non a host port just like that.\n\n119\n00:06:03.885 --> 00:06:05.757\nIf you forget that,\nit'll just always break the pipe.\n\n120\n00:06:05.757 --> 00:06:09.873\nThe process'll die and\nyou'll never get any forwarded traffic,\n\n121\n00:06:09.873 --> 00:06:13.267\nregardless of whether it's\nsniffing traffic or not.\n\n122\n00:06:13.267 --> 00:06:18.149\nSo while True,\nI'm gonna get the data and the adder and\n\n123\n00:06:18.149 --> 00:06:23.550\nthat's going to be from\nour sniffing connection.\n\n124\n00:06:23.550 --> 00:06:27.520\nSo this is the sniffing part and 6ff35.\n\n125\n00:06:29.010 --> 00:06:33.833\nAnd if there is data, that means if\nthe data is not an empty string or\n\n126\n00:06:33.833 --> 00:06:38.500\nsomething like that,\nthen I want to forward said information.\n\n127\n00:06:38.500 --> 00:06:40.574\nI'm gonna send it all.\n\n128\n00:06:40.574 --> 00:06:44.800\nWe haven't seen send it all, but\nwell, it's kinda self-explanatory.\n\n129\n00:06:44.800 --> 00:06:46.607\nWhat do you wanna do?\nI wanna send it all.\n\n130\n00:06:46.607 --> 00:06:52.649\nOkay, so that is gonna grab a packet from\nthe network that this is running on.\n\n131\n00:06:52.649 --> 00:06:54.130\n[SOUND] Let's go ahead and\n\n132\n00:06:54.130 --> 00:06:57.877\nforward it through this kinda\nforwarding connection, okay?\n\n133\n00:06:57.877 --> 00:07:02.006\nNow, before we can start this up, though,\n\n134\n00:07:02.006 --> 00:07:08.950\nI actually need to run over here,\nand I need to make a server, okay?\n\n135\n00:07:08.950 --> 00:07:14.058\nSo I'm going to say,\nlet's just call it home server.\n\n136\n00:07:14.058 --> 00:07:19.439\nAnd I'm gonna import the socket connection\nhere as well or the socket library.\n\n137\n00:07:19.439 --> 00:07:23.310\nI'm gonna create another main, and\nthis is a different main, right?\n\n138\n00:07:23.310 --> 00:07:24.850\nThis is the actual server.\n\n139\n00:07:26.400 --> 00:07:30.810\nAnd I think one of the most\nkind of perplexing things for\n\n140\n00:07:30.810 --> 00:07:35.610\npeople when they start trying to do these\nis even if it's acting as a server or\n\n141\n00:07:35.610 --> 00:07:38.700\nas a client,\na lot of these method names are the same.\n\n142\n00:07:38.700 --> 00:07:41.680\nLike send and receive and received from.\n\n143\n00:07:41.680 --> 00:07:43.310\nWell, which one's which?\n\n144\n00:07:43.310 --> 00:07:45.690\nIt's all about perspective, right?\n\n145\n00:07:45.690 --> 00:07:50.035\nIf your client is receiving\nthings from the server,\n\n146\n00:07:50.035 --> 00:07:52.809\nthen it's which side are you on?\n\n147\n00:07:52.809 --> 00:07:57.152\nSo, it's nonsensical to have different\nmethods for server and client,\n\n148\n00:07:57.152 --> 00:08:01.929\nunless you're using the socket server or\nlibrary that's bundled with Python.\n\n149\n00:08:01.929 --> 00:08:03.854\nAgain, we don't wanna\ntake the easy way out.\n\n150\n00:08:03.854 --> 00:08:08.955\nIf you wanted something that was more\nrobust and ran longer You might want\n\n151\n00:08:08.955 --> 00:08:14.905\nto look into that, so let's see if this\nworks, python home_server, looks good.\n\n152\n00:08:17.513 --> 00:08:24.220\nAnd now, If we create the server that is\n\n153\n00:08:24.220 --> 00:08:32.558\ngonna be socket.socket, socket.AF_INIT,\n\n154\n00:08:32.558 --> 00:08:40.350\nsocket.SOCK_STREAM, just like so.\n\n155\n00:08:40.350 --> 00:08:45.565\nSo here's where it varies a little bit,\nwe're going to bind this to a local IP.\n\n156\n00:08:45.565 --> 00:08:49.657\nWe've seen that, if you haven't seen how,\nI'll just make a very kind of quick and\n\n157\n00:08:49.657 --> 00:08:51.481\neasy server, we do that with a bind.\n\n158\n00:08:51.481 --> 00:08:54.416\nNow I'm showing this in a little\ndifferent context just to show you,\n\n159\n00:08:54.416 --> 00:08:56.200\nyou don't have to do it exactly that way.\n\n160\n00:08:56.200 --> 00:09:03.520\nSo I'm gonna say server, maybe,\nserver.bind, and what do we wanna bind to?\n\n161\n00:09:03.520 --> 00:09:08.990\nWell, it's still a host port,\nbut if I leave\n\n162\n00:09:08.990 --> 00:09:12.852\nit as an empty string, it essentially\nbinds to the machine that it starts up on.\n\n163\n00:09:12.852 --> 00:09:17.906\n0.0 0.0, whatever that IP\nthat is allocated to it, so\n\n164\n00:09:17.906 --> 00:09:24.561\nI'm gonna listen on 8080 as the port,\nand I'm gonna say server.listen.\n\n165\n00:09:24.561 --> 00:09:26.792\nNow this listen, just as a reminder,\n\n166\n00:09:26.792 --> 00:09:31.468\nthat number in the parentheses is what\nallows us to dictate how many connections\n\n167\n00:09:31.468 --> 00:09:35.350\ncan be queued up before you\nstart refusing connections.\n\n168\n00:09:35.350 --> 00:09:40.200\nIf you were doing something like this, I\nwouldn't want a whole bunch of connections\n\n169\n00:09:40.200 --> 00:09:45.075\nkind of working, well,\nbeing allowed to connect to the server.\n\n170\n00:09:45.075 --> 00:09:50.000\nCuz it may draw some attention\nthat you may not want,\n\n171\n00:09:50.000 --> 00:09:52.560\nso that's my justification there.\n\n172\n00:09:52.560 --> 00:09:56.760\nAnd now we actually want to grab\nthe connection and the addr, and\n\n173\n00:09:56.760 --> 00:10:02.600\nwe do that by saying server.accept(), so\nthis is going to accept those connections.\n\n174\n00:10:02.600 --> 00:10:07.211\nAnd then with conn: while\n\n175\n00:10:07.211 --> 00:10:13.860\nTrue: and to some extent,\nthe way I'm programming this,\n\n176\n00:10:13.860 --> 00:10:16.880\nI'm putting it into an infinite loop\nafter I accept the first connection.\n\n177\n00:10:18.200 --> 00:10:22.190\nThat means that there's probably no other\nconnections that are going to be made.\n\n178\n00:10:22.190 --> 00:10:26.700\nSo I could change this around and\nthen spin up a bunch of connections and\n\n179\n00:10:26.700 --> 00:10:27.640\nthreads.\n\n180\n00:10:27.640 --> 00:10:31.611\nSeems like an unnecessary complication,\n\n181\n00:10:31.611 --> 00:10:34.180\nbased on what we're trying\nto accomplish here.\n\n182\n00:10:35.520 --> 00:10:41.652\nAnd so I'm gonna say for\nthis connection, I want to receive 1024,\n\n183\n00:10:41.652 --> 00:10:47.508\nI just wanna receive\nthose first 1,024 bytes.\n\n184\n00:10:47.508 --> 00:10:51.110\nAnd, well, if there is data here, then,\n\n185\n00:10:51.110 --> 00:10:55.730\nwell, let's just print out that data,\nso we're just gonna get that now.\n\n186\n00:10:55.730 --> 00:10:59.630\nCuz our ultimate goal is to see\nthat we started the server and\n\n187\n00:10:59.630 --> 00:11:03.931\nwe start up our sniffer,\nwill our sniffer forward to the server?\n\n188\n00:11:03.931 --> 00:11:08.105\nSo we can grab those packets\nfrom a remote location and\n\n189\n00:11:08.105 --> 00:11:12.300\nthen do the parsing,\nanalyzing, in this context.\n\n190\n00:11:12.300 --> 00:11:19.670\nSo let's go ahead and get some crazy\nvim action going on here, there we go.\n\n191\n00:11:19.670 --> 00:11:24.620\nAnd then now I'm gonna say\npython3 home_server, so\n\n192\n00:11:24.620 --> 00:11:28.824\nyou don't see anything, but it's running.\n\n193\n00:11:28.824 --> 00:11:32.360\nIf it doesn't immediately return-\n&gt;&gt; So if it's in that or something.\n\n194\n00:11:32.360 --> 00:11:36.720\n&gt;&gt; Yeah, so you'll see an error, hey,\nsocket connection, blah blah blah blah.\n\n195\n00:11:36.720 --> 00:11:39.514\nIt would be nice if we had\na print message there.\n\n196\n00:11:39.514 --> 00:11:44.040\n&gt;&gt; That said, waiting for connections,\nor whatever, and server running.\n\n197\n00:11:44.040 --> 00:11:48.801\n&gt;&gt; Server now listening on blah blah\nblah blah, so it's now running.\n\n198\n00:11:48.801 --> 00:11:53.518\nAnd now that we have this running,\nwe can hop back over here and\n\n199\n00:11:53.518 --> 00:11:55.273\nstart up our sniffer.\n\n200\n00:11:55.273 --> 00:12:01.253\nSo sudo python3 phone_home_sniffer,\n\n201\n00:12:01.253 --> 00:12:08.820\nand there we go, and\nlet's see if I can refresh.\n\n202\n00:12:08.820 --> 00:12:10.283\nAnd you're like, but\nthere's nothing going on here.\n\n203\n00:12:10.283 --> 00:12:16.898\nWell, I never printed out anything\nover here, let's go check it out.\n\n204\n00:12:16.898 --> 00:12:18.324\n&gt;&gt; My goodness.\n\n205\n00:12:18.324 --> 00:12:19.640\n&gt;&gt; Man, that is just pumping data.\n\n206\n00:12:19.640 --> 00:12:22.804\n&gt;&gt; It's just puking hex on the screen.\n\n207\n00:12:22.804 --> 00:12:23.596\n&gt;&gt; It is, it is.\n\n208\n00:12:23.596 --> 00:12:26.452\n&gt;&gt; It is violently ill.\n\n209\n00:12:26.452 --> 00:12:29.030\n&gt;&gt; Don't stare at this too long,\ndon't stare at this too long.\n\n210\n00:12:29.030 --> 00:12:33.640\nHowever, this is all right,\nI think I got this down.\n\n211\n00:12:33.640 --> 00:12:37.130\nHowever, there's no guarantee that\nthis is actually still valid data.\n\n212\n00:12:37.130 --> 00:12:40.730\nAnd it would be nice if I could\nprove to you to some extent,\n\n213\n00:12:40.730 --> 00:12:44.250\nmaybe not quite to the in-depth that\nwe have in the previous episodes.\n\n214\n00:12:44.250 --> 00:12:48.052\nBut I could grab these, parse them and\nthen actually grab information from them,\n\n215\n00:12:48.052 --> 00:12:53.290\nso let's go ahead and kill that, like so.\n\n216\n00:12:53.290 --> 00:12:58.330\nAnd that means that this connection will\neventually kind of drop, and error out.\n\n217\n00:12:58.330 --> 00:13:02.868\nCuz my server's gone and\nthings, and I'm not saying, hey,\n\n218\n00:13:02.868 --> 00:13:07.948\nif the connection times out or\nif it drops, restart the connection.\n\n219\n00:13:07.948 --> 00:13:11.738\nThis is kind of a tool that I'm starting\nup here, I'm anticipating the server,\n\n220\n00:13:11.738 --> 00:13:15.270\nwhich I do have control over,\nwhere it resides, it's always gonna be on.\n\n221\n00:13:15.270 --> 00:13:19.017\nAnd I would probably spend more time\nmaking that more robust, but the sniffing\n\n222\n00:13:19.017 --> 00:13:22.164\ntool is something I would just turn on and\nlet it run as long it can.\n\n223\n00:13:22.164 --> 00:13:26.540\nAnd then maybe, maybe it dies,\nmaybe it doesn't,\n\n224\n00:13:26.540 --> 00:13:30.550\nmaybe I actually kind of shut it down.\n\n225\n00:13:30.550 --> 00:13:35.318\nSo before we come and\nstart this back up, I had this\n\n226\n00:13:35.318 --> 00:13:40.385\nTCP sniffer, that's actually\nfrom the last few episodes,\n\n227\n00:13:40.385 --> 00:13:45.430\nwhere we built ethernet frame parser,\nor excuse me, class.\n\n228\n00:13:45.430 --> 00:13:49.280\nThe IP header, the TCP segment,\nthe UDP segment,\n\n229\n00:13:49.280 --> 00:13:53.750\nall of those respective classes,\nwe'll, they're in that TCP sniffer.\n\n230\n00:13:53.750 --> 00:13:58.780\nNow, they're in that folder,\nI'm not going to mess with the folder.\n\n231\n00:13:58.780 --> 00:14:00.590\nI'm just going to see if\nI can bring them in and\n\n232\n00:14:00.590 --> 00:14:05.330\nuse them, because I've written them\nalmost like as a package toolkit.\n\n233\n00:14:05.330 --> 00:14:12.911\nSo if I come into home server, TCPSniffer,\nyou actually have to go to the same file.\n\n234\n00:14:12.911 --> 00:14:13.414\n&gt;&gt; That’s ridiculous.\n\n235\n00:14:13.414 --> 00:14:16.830\n&gt;&gt; I know, that’s crazy, so\n\n236\n00:14:16.830 --> 00:14:21.590\nfrom TCPSniffer_nettypes import.\n\n237\n00:14:23.630 --> 00:14:27.140\nI want to import, let's just get\nthe ethernet frame, because if I get\n\n238\n00:14:27.140 --> 00:14:32.970\nthe ethernet frame, I have a pretty good\nfeeling that I can get the IP header.\n\n239\n00:14:32.970 --> 00:14:37.840\nSo let's start with the ethernet frame\nfirst, and now if there is data,\n\n240\n00:14:37.840 --> 00:14:43.610\nI want to create the EthernetFrame object.\n\n241\n00:14:43.610 --> 00:14:48.489\nSo there's the data, and boom,\n\n242\n00:14:48.489 --> 00:14:51.290\nso print(eth).\n\n243\n00:14:51.290 --> 00:14:55.550\nNow, because I have a toString\nmethod there, that should now print\n\n244\n00:14:55.550 --> 00:14:58.890\nall of the information that I can\ngather from the EthernetFrame.\n\n245\n00:14:58.890 --> 00:15:01.500\nProtocol, destination, source, and\nthen there'll be some leftover data.\n\n246\n00:15:03.033 --> 00:15:09.340\nSo I guess whether this runs, there's\nabout to be a moment of truth here.\n\n247\n00:15:09.340 --> 00:15:13.310\nSo home server and\nour import worked, all right,\n\n248\n00:15:13.310 --> 00:15:16.330\nnow that I've already built those classes,\nI can just reuse them a bunch of times.\n\n249\n00:15:16.330 --> 00:15:20.890\nEither in a localized sniffer, or\non a server that's receiving these.\n\n250\n00:15:20.890 --> 00:15:24.704\nWell, I'm making a pretty strong assertion\nthere, Daniel, I might be wrong.\n\n251\n00:15:24.704 --> 00:15:26.400\n&gt;&gt; You tend to do that.\n\n252\n00:15:26.400 --> 00:15:27.820\n&gt;&gt; I do, like, it's gonna work, maybe.\n\n253\n00:15:27.820 --> 00:15:33.390\n&gt;&gt; Absolutely positively might work.\n\n254\n00:15:33.390 --> 00:15:37.040\n&gt;&gt; [LAUGH]\n&gt;&gt; Key word in there is might.\n\n255\n00:15:37.040 --> 00:15:38.911\n&gt;&gt; Yeah [LAUGH].\n&gt;&gt; So we have our server running,\n\n256\n00:15:38.911 --> 00:15:43.690\nnow let's actually start our sniffer up\nthat's going to forward this information.\n\n257\n00:15:43.690 --> 00:15:46.970\nSee if instead of just hex num,\nwe actually get-\n\n258\n00:15:46.970 --> 00:15:48.600\n&gt;&gt; That would be special.\n\n259\n00:15:48.600 --> 00:15:50.660\n&gt;&gt; Well,\nwe're going to cross our fingers, Dave.\n\n260\n00:15:50.660 --> 00:15:56.190\n&gt;&gt; I mean I've worked with hex before, but\nI don't know that I'm that good [LAUGH].\n\n261\n00:15:56.190 --> 00:16:01.149\n&gt;&gt; I know for a fact I'm not,\n[LAUGH] what'd you do?\n\n262\n00:16:01.149 --> 00:16:05.810\nWell, the thing is,\nthe thing is, I don't know.\n\n263\n00:16:05.810 --> 00:16:07.029\n&gt;&gt; I quit my job [LAUGH].\n\n264\n00:16:07.029 --> 00:16:10.713\n&gt;&gt; What would you Hex editor, all day.\n\n265\n00:16:10.713 --> 00:16:11.241\n&gt;&gt; You use one?\n\n266\n00:16:11.241 --> 00:16:12.409\n&gt;&gt; No, I was, again,\n[LAUGH] that's what I did.\n\n267\n00:16:12.409 --> 00:16:17.214\n[LAUGH] So let's go ahead and\nstart this up, see if it works,\n\n268\n00:16:17.214 --> 00:16:21.850\nand then that will be,\nI guess it calls for celebration.\n\n269\n00:16:21.850 --> 00:16:29.171\nMaybe some smoke and music, and\nwho knows, so come over here, boom.\n\n270\n00:16:29.171 --> 00:16:32.614\nSo I got something that\nwas a little weird, and\n\n271\n00:16:32.614 --> 00:16:37.310\nhere's something you're always\ngoing to have to handle.\n\n272\n00:16:37.310 --> 00:16:42.240\nI'm gonna have to check\nthe length of the data,\n\n273\n00:16:42.240 --> 00:16:46.120\nI'm gonna have to do some additional\nchecks, because what happened here?\n\n274\n00:16:46.120 --> 00:16:50.750\nThis unpack failed on the ethernet frame,\nbecause I grabbed a packet that\n\n275\n00:16:50.750 --> 00:16:54.650\ndidn't actually have the full first\n20 bytes of an ethernet frame.\n\n276\n00:16:54.650 --> 00:16:57.720\nThere was something going on there,\nand it calls this to die.\n\n277\n00:16:59.490 --> 00:17:01.420\nSo maybe I put a little check in there,\n\n278\n00:17:01.420 --> 00:17:04.885\njust to make sure we can get all of\nthat kind of scrolling out and not die.\n\n279\n00:17:04.885 --> 00:17:08.653\nHowever I do implore you,\nlook at that, source, destination,\n\n280\n00:17:08.653 --> 00:17:11.472\nprotocol, source, destination, protocol.\n\n281\n00:17:11.472 --> 00:17:15.320\nAnd this protocol, 35850,\ndo you know what that protocol is?\n\n282\n00:17:15.320 --> 00:17:16.135\n&gt;&gt; No, not off the top of my head.\n\n283\n00:17:16.135 --> 00:17:17.839\n&gt;&gt; Yeah, I do not either, so\n\n284\n00:17:17.839 --> 00:17:23.110\nit may be something that's very short\npacket length and it just dies.\n\n285\n00:17:23.110 --> 00:17:24.780\nActually, I think it\nmight be the next one,\n\n286\n00:17:24.780 --> 00:17:27.200\nso maybe this precedes\nsomething that's weird.\n\n287\n00:17:28.730 --> 00:17:30.700\nSo actually, let's fix that real quick, so\n\n288\n00:17:30.700 --> 00:17:35.860\nwe can see all of that\nwonderful stuff print out here.\n\n289\n00:17:35.860 --> 00:17:41.660\nSo if the length of\nthe data is greater than,\n\n290\n00:17:41.660 --> 00:17:48.000\nwell, ethernetframe.length.\n\n291\n00:17:48.000 --> 00:17:51.080\nNow, because I've stored\nthat on the class, actually,\n\n292\n00:17:51.080 --> 00:17:53.900\nI don't think I can do that,\nI thought I was gonna get slick there.\n\n293\n00:17:53.900 --> 00:17:56.420\nI don't think I can do that,\n\n294\n00:17:56.420 --> 00:18:01.510\nbecause it is not a static value,\nit is an instance value.\n\n295\n00:18:01.510 --> 00:18:06.050\nBoom, so if the length of\nthe data is greater than 20,\n\n296\n00:18:06.050 --> 00:18:08.130\nthen we can create an EthernetFrame.\n\n297\n00:18:08.130 --> 00:18:13.168\nMy assumption there, so again, this is\nwhere we start into this troubleshooting.\n\n298\n00:18:13.168 --> 00:18:17.762\nSo python3 home_server,\nthere it is, let's go over here and\n\n299\n00:18:17.762 --> 00:18:22.963\nkill this one and restart, just to\nmake sure that connection gets made.\n\n300\n00:18:22.963 --> 00:18:26.460\nAnd then [SOUND] there is\na whole bunch of ethernet\n\n301\n00:18:26.460 --> 00:18:27.392\nframes-\n&gt;&gt; That's cranking.\n\n302\n00:18:27.392 --> 00:18:28.658\n&gt;&gt; That's hammering away,\n\n303\n00:18:28.658 --> 00:18:30.553\nit's almost like it's faster here-\n&gt;&gt; I know.\n\n304\n00:18:30.553 --> 00:18:33.012\n&gt;&gt; Than it was-\n&gt;&gt; It's super fast.\n\n305\n00:18:33.012 --> 00:18:35.714\n&gt;&gt; [LAUGH]\n&gt;&gt; So it's kind of crazy,\n\n306\n00:18:35.714 --> 00:18:37.795\nit's kind of crazy.\n\n307\n00:18:37.795 --> 00:18:38.750\n&gt;&gt; It is.\n&gt;&gt; But again,\n\n308\n00:18:38.750 --> 00:18:43.470\nwe were doing some other things,\nthis is a VM on another one.\n\n309\n00:18:43.470 --> 00:18:46.820\nThis is my regular machine,\nmy native machine,\n\n310\n00:18:46.820 --> 00:18:50.402\nit's got a lot more resources\nto it than my VM does.\n\n311\n00:18:50.402 --> 00:18:54.790\nSo there's our ethernet frame, now,\n\n312\n00:18:54.790 --> 00:18:59.600\nI could continue to go in and\ngrab IP headers, and grab the TCP segment,\n\n313\n00:18:59.600 --> 00:19:03.310\nUDP segment, or\neven open a PCAT file and save them.\n\n314\n00:19:03.310 --> 00:19:07.431\nActually, I might do that one, but\nthe IP header is kinda just rinse and\n\n315\n00:19:07.431 --> 00:19:09.367\nrepeat of our previous episode.\n\n316\n00:19:09.367 --> 00:19:13.663\nBut I do wanna see if I can open\na PCAT file on the server and\n\n317\n00:19:13.663 --> 00:19:15.633\njust kind of have it go-\n&gt;&gt; Fill it up.\n\n318\n00:19:15.633 --> 00:19:19.990\n&gt;&gt; And fill it up, let's find out.\n\n319\n00:19:19.990 --> 00:19:21.319\n&gt;&gt; I have faith in you, Justin.\n\n320\n00:19:21.319 --> 00:19:25.783\n&gt;&gt; So we just wanna see if it\nactually writes, if it writes,\n\n321\n00:19:25.783 --> 00:19:29.880\nthen we should be good to go,\nso what does that mean?\n\n322\n00:19:29.880 --> 00:19:31.510\nWe're going to come into home_server,\nactually,\n\n323\n00:19:31.510 --> 00:19:34.000\nI'm going to go over and\nkill this as well.\n\n324\n00:19:34.000 --> 00:19:39.232\nWe're going to come into home_server, and\n\n325\n00:19:39.232 --> 00:19:45.716\nfrom TCPSniffer.capture import PCAPfile,\nlike so.\n\n326\n00:19:45.716 --> 00:19:52.050\nSo I no longer care about\nthese ethernet frames,\n\n327\n00:19:53.810 --> 00:19:59.293\nbut what I do want is,\n\n328\n00:19:59.293 --> 00:20:03.976\nlet's just call it pcap =\n\n329\n00:20:03.976 --> 00:20:08.968\nPCAPfile, let's just call it remote.pcap.\n\n330\n00:20:11.571 --> 00:20:15.074\nSo if it writes, it's a success,\nbecause on a previous episode,\n\n331\n00:20:15.074 --> 00:20:18.516\nwe actually saw that when it actually\nwrites, we can open it up and\n\n332\n00:20:18.516 --> 00:20:22.960\nuse some other analysis tool like\nWireshark or something of that nature.\n\n333\n00:20:22.960 --> 00:20:26.990\nSo if there's data there,\nnow we want to just\n\n334\n00:20:28.500 --> 00:20:32.969\ngo ahead and\nwrite with these pcap files, so\n\n335\n00:20:32.969 --> 00:20:37.963\npcap.write(data).\n\n336\n00:20:42.885 --> 00:20:45.309\nAnd there we go,\nI actually wanted to go the other way.\n\n337\n00:20:46.420 --> 00:20:50.690\nSo once we get down to here,\nI want to say PCAP.close, so\n\n338\n00:20:50.690 --> 00:20:53.850\nwe should always close\nfiles appropriately.\n\n339\n00:20:53.850 --> 00:20:55.250\nNow, if something goes wrong,\n\n340\n00:20:55.250 --> 00:21:00.230\nthere's no guarantee that will\noccur in an appropriate manner.\n\n341\n00:21:00.230 --> 00:21:04.930\nIt might be nice to go back and add some\nniceties to the actual PCAP file class.\n\n342\n00:21:04.930 --> 00:21:09.102\nBut this is all about security tooling,\nwhich sometimes is just, give a quick and\n\n343\n00:21:09.102 --> 00:21:10.019\ndirty solution.\n\n344\n00:21:10.019 --> 00:21:14.037\nInstead of, let's make it really\nrobust and nice and beautiful, and\n\n345\n00:21:14.037 --> 00:21:17.782\nI didn't spend 15 years of my\nlife learning this in school, and\n\n346\n00:21:17.782 --> 00:21:20.048\nI never actually got it to do anything.\n\n347\n00:21:20.048 --> 00:21:25.906\nSo that is no bueno, so\nthis is our home_server,\n\n348\n00:21:25.906 --> 00:21:29.470\nand now if we come back.\n\n349\n00:21:29.470 --> 00:21:32.650\nWhen we run this,\ndoesn't look like it's doing anything, but\n\n350\n00:21:32.650 --> 00:21:34.270\nthat's because we're not\nprinting any output.\n\n351\n00:21:35.320 --> 00:21:39.436\nSo it's running, so as it runs,\nwe're gonna let it run,\n\n352\n00:21:39.436 --> 00:21:44.569\nI'm gonna go ahead and hit refresh\na couple of times, just to make sure.\n\n353\n00:21:44.569 --> 00:21:49.188\nThere we go, refresh,\nrefresh, refresh, and boom,\n\n354\n00:21:49.188 --> 00:21:53.921\nI killed it, and let's see here,\nI have remote.pcap.\n\n355\n00:21:53.921 --> 00:21:58.210\nI'm just gonna open it up to see\nif there's actual data in there.\n\n356\n00:21:58.210 --> 00:22:02.630\nWe're not gonna be able to read it, but\nlet's see if there's data in there.\n\n357\n00:22:02.630 --> 00:22:06.750\nAnd that was maybe a bad decision,\ncuz it might be full of data,\n\n358\n00:22:06.750 --> 00:22:10.540\nand I just opened it up in vim, uh-oh.\n\n359\n00:22:10.540 --> 00:22:13.096\n&gt;&gt; Uh-oh.\n&gt;&gt; So let's go ahead and, well, it would\n\n360\n00:22:13.096 --> 00:22:18.130\nfreeze my computer up, but that is a good\nvalidation that they're actually is data.\n\n361\n00:22:18.130 --> 00:22:20.206\n&gt;&gt; That's right.\n&gt;&gt; It actually flickered on the screen\n\n362\n00:22:20.206 --> 00:22:23.600\njust for a moment, so there's\na fair amount of data in there, and\n\n363\n00:22:23.600 --> 00:22:24.755\nmaybe an easier way.\n\n364\n00:22:24.755 --> 00:22:28.690\n&gt;&gt; [CROSSTALK]\n&gt;&gt; That's a big old file It's in there,\n\n365\n00:22:28.690 --> 00:22:32.360\nand we've already seen,\nwe could open this in Wireshark.\n\n366\n00:22:32.360 --> 00:22:35.736\nThis is a great way that, let me\nstart these up in a couple of places,\n\n367\n00:22:35.736 --> 00:22:38.280\nallow them to make\nconnections to a server.\n\n368\n00:22:38.280 --> 00:22:40.650\nWhen you're gathering\ninformation from several\n\n369\n00:22:42.670 --> 00:22:45.860\nremote kind of targets, if you will.\n\n370\n00:22:45.860 --> 00:22:49.760\nIn addition to,\nyou might be able to just forward and\n\n371\n00:22:49.760 --> 00:22:53.010\nreceive and go, once it gets here,\nI want you to forward it over here.\n\n372\n00:22:53.010 --> 00:22:55.460\nAnd once it gets here, I want you to\nforward it over here, once it gets here,\n\n373\n00:22:55.460 --> 00:22:57.050\nI want you to forward it over here.\n\n374\n00:22:57.050 --> 00:23:01.851\nKind of just bounce around, all around-\n&gt;&gt; You never know when you don't want\n\n375\n00:23:01.851 --> 00:23:03.659\npeople following you [LAUGH].\n\n376\n00:23:03.659 --> 00:23:07.883\n&gt;&gt; So we have now taken our last few\nprojects and put them in a blender,\n\n377\n00:23:07.883 --> 00:23:12.650\nrun them all, and seeing that, well,\nwe can make something kinda crazy.\n\n378\n00:23:12.650 --> 00:23:17.930\nI feel like there's a maniacal\nlaugh that I'm trying to hold back.\n\n379\n00:23:17.930 --> 00:23:21.194\nBut that is all there is to it,\nonce you have the individual pieces,\n\n380\n00:23:21.194 --> 00:23:23.096\nyou can now start to mix and match them.\n\n381\n00:23:23.096 --> 00:23:26.089\n&gt;&gt; Well, Justin, it was a nice\ncapstone project, here at the and\n\n382\n00:23:26.089 --> 00:23:27.509\nof our little Python series.\n\n383\n00:23:27.509 --> 00:23:30.018\nTaking all those bits and pieces,\nslamming them together, and\n\n384\n00:23:30.018 --> 00:23:31.508\nmaking something very cool out of it.\n\n385\n00:23:31.508 --> 00:23:34.373\nWe do appreciate your effort in\ndoing that so we could see, yeah,\n\n386\n00:23:34.373 --> 00:23:37.983\nyou might create a little project here,\nyou might create a little project there.\n\n387\n00:23:37.983 --> 00:23:41.762\nAnd then down the road, go, man, I should\njust smash those two things together, and\n\n388\n00:23:41.762 --> 00:23:43.300\nit would do this, it's amazing.\n\n389\n00:23:43.300 --> 00:23:46.590\nSo that's a good way to start thinking,\nespecially when it comes to security.\n\n390\n00:23:46.590 --> 00:23:51.690\nI always say,\nthe hacker mindset is one of the,\n\n391\n00:23:51.690 --> 00:23:54.600\nnot what it does, but\nwhat can I make it do?\n\n392\n00:23:54.600 --> 00:23:57.183\nSo you wanna keep that in mind,\nand of course,\n\n393\n00:23:57.183 --> 00:24:00.247\nalways thinking about\nproactive security measures.\n\n394\n00:24:00.247 --> 00:24:03.750\nSo that things like this, if you were\nsomething like a penetration tester,\n\n395\n00:24:03.750 --> 00:24:05.830\nhow would you employ things like this?\n\n396\n00:24:05.830 --> 00:24:09.270\nWhat were certain things that I use or\ndo in my job that,\n\n397\n00:24:09.270 --> 00:24:12.700\nmaybe they're being blocked, and I could\nuse all the Python's typically installed.\n\n398\n00:24:12.700 --> 00:24:15.940\nMaybe I could just run to Python and\nbuild something very similar that will fly\n\n399\n00:24:15.940 --> 00:24:18.340\nunderneath the radar, and\nbe able to do that for me.\n\n400\n00:24:18.340 --> 00:24:21.720\nOr maybe even more quickly, or\nmore efficiently, or something like that.\n\n401\n00:24:21.720 --> 00:24:25.425\nVery cool ways in which you can\nthink up to use Python environments,\n\n402\n00:24:25.425 --> 00:24:29.262\ninstead of whatever box you may be\nworking in, legally, hopefully.\n\n403\n00:24:29.262 --> 00:24:32.129\n[LAUGH] All right, Justin,\nthanks for dropping by yet again,\n\n404\n00:24:32.129 --> 00:24:34.170\nwe thank our audience for watching.\n\n405\n00:24:34.170 --> 00:24:36.763\nBut it looks like we're there,\nit's time to sign off for Dev Pro TV,\n\n406\n00:24:36.763 --> 00:24:38.252\nI've been your host, Daniel Lowrie.\n\n407\n00:24:38.252 --> 00:24:39.390\n&gt;&gt; And I'm Justin Dennison.\n\n408\n00:24:39.390 --> 00:24:40.590\n&gt;&gt; And we'll see you next time.\n\n409\n00:24:40.590 --> 00:24:43.765\n[MUSIC]\n\n",
          "vimeoId": "229281721"
        }
      ],
      "title": "Python for Security"
    }
  ],
  "url": "pythonsecurity",
  "vLab": false
}
