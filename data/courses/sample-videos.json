{
  "description": "At ITProTV, we pride ourselves on creating content on a diverse range of IT topics from Azure and A+ to security and servers, with everything in between. The course includes several sample episodes so you can get a feel for our teaching format.",
  "descriptionMD": "",
  "length": "19223",
  "name": "Sample Videos",
  "practiceExam": false,
  "subtitle": "Select videos from the Course Library",
  "tagUrl": "get-started",
  "topics": [
    {
      "episodes": [
        {
          "description": "In this episode, Daniel and Justin use Docker to create a runtime environment for a NodeJS web application. They cover the basics of having applications live in a container.",
          "length": "1827",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-1-building_an_application_with_docker-040317-PGM.00_30_12_18.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-1-building_an_application_with_docker-040317-PGM.00_30_12_18.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-introtodocker/techskills-introductiontodocker-9-1-1-building_an_application_with_docker-040317-PGM.00_30_12_18.Still001-sm.jpg",
          "title": "Building an Application with Docker",
          "transcript": "WEBVTT\n\n1\n00:00:00.074 --> 00:00:01.289\nWelcome to ITProTV.\n\n2\n00:00:01.289 --> 00:00:02.551\nI'm your host, Don Pezet.\n\n3\n00:00:02.551 --> 00:00:08.226\n[CROSSTALK]\n[SOUND]\n\n4\n00:00:08.226 --> 00:00:12.388\n&gt;&gt; You're watching ITProTV.\n\n5\n00:00:12.388 --> 00:00:14.436\n&gt;&gt; All right, greetings, everyone, and\n\n6\n00:00:14.436 --> 00:00:16.795\nwelcome to another great\nepisode of ITProTV.\n\n7\n00:00:16.795 --> 00:00:19.808\nI'm your host, Daniel Lowrie,\nand in today's episode,\n\n8\n00:00:19.808 --> 00:00:22.410\nwe are back with more of\nour Intro to Docker series.\n\n9\n00:00:22.410 --> 00:00:26.640\nAnd of course, joining us in the studio is\nthe person that knows all things Docker,\n\n10\n00:00:26.640 --> 00:00:28.220\nour good friend, Mr Justin Dennison.\n\n11\n00:00:28.220 --> 00:00:30.480\nJustin, my man, how goes it today?\n\n12\n00:00:30.480 --> 00:00:31.260\n&gt;&gt; It goes well, Daniel.\n\n13\n00:00:31.260 --> 00:00:32.020\nHow are you today?\n\n14\n00:00:32.020 --> 00:00:33.240\n&gt;&gt; Can't complain, thanks for asking.\n\n15\n00:00:33.240 --> 00:00:36.790\n&gt;&gt; I feel like you're overselling\nthat all things Docker stuff.\n\n16\n00:00:36.790 --> 00:00:37.895\n&gt;&gt; Just go with it, man.\n\n17\n00:00:37.895 --> 00:00:41.194\n[LAUGH]\n&gt;&gt; Mainly because it is very complex, but\n\n18\n00:00:41.194 --> 00:00:43.734\nwe have been wading our\nway through Docker.\n\n19\n00:00:43.734 --> 00:00:47.740\nAnd we actually have a great amount\nof tools in our repertoire thus far.\n\n20\n00:00:47.740 --> 00:00:51.380\nWe're actually to a point to where\nwe can run containers, build images.\n\n21\n00:00:51.380 --> 00:00:54.814\nBut now how do I actually use\nthat technology that I've been\n\n22\n00:00:54.814 --> 00:00:57.293\nworking with to bundle up an application?\n\n23\n00:00:57.293 --> 00:01:02.150\nNow there's a couple of things you should\nknow before we start down that road.\n\n24\n00:01:02.150 --> 00:01:04.350\nI have chosen Node.js as our runtime,\n\n25\n00:01:04.350 --> 00:01:08.260\nnot because of any other\nreason than I had to pick one.\n\n26\n00:01:08.260 --> 00:01:15.030\nAnd well, it will work the same on Python,\nRuby, Go, Java, any JVM language.\n\n27\n00:01:15.030 --> 00:01:17.440\nThe setup's gonna be a little\nbit different but abstractly,\n\n28\n00:01:17.440 --> 00:01:19.780\nthe same process is gonna occur.\n\n29\n00:01:19.780 --> 00:01:25.730\nIn addition to, well, this is for\na deployment type mindset.\n\n30\n00:01:25.730 --> 00:01:27.705\nIt is not for an active development cycle.\n\n31\n00:01:27.705 --> 00:01:29.395\nIf you're a developer there,\n\n32\n00:01:29.395 --> 00:01:33.170\nI would actually mount the application\nsource code into the volume.\n\n33\n00:01:33.170 --> 00:01:36.343\nAnd then set up a different\ncontainer that would be the runtime.\n\n34\n00:01:36.343 --> 00:01:40.530\nThis is going to be all bundled up,\nsend this off to Docker hub and\n\n35\n00:01:40.530 --> 00:01:43.840\nthen run this through continuous\nintegration to run my test.\n\n36\n00:01:43.840 --> 00:01:47.130\nAlso do an inspection for\nsecurity flaws and the such.\n\n37\n00:01:47.130 --> 00:01:51.060\nSo those are important things to keep\nin your mind before we get started.\n\n38\n00:01:51.060 --> 00:01:54.310\nBut I think there's no better time\nthan now than let's take a look at\n\n39\n00:01:54.310 --> 00:01:55.540\nhow things are gonna play out.\n\n40\n00:01:55.540 --> 00:01:56.930\nLet's take a look at my screen here.\n\n41\n00:01:56.930 --> 00:01:58.560\nAnd so I'm on my desktop.\n\n42\n00:01:58.560 --> 00:02:01.990\nAnd if I ls here,\nI got this random folder.\n\n43\n00:02:01.990 --> 00:02:05.114\nBut I also have nodeapp version 1,\n2 and 3.\n\n44\n00:02:05.114 --> 00:02:10.270\nNow if I was actually on a development\ncycle, I would not keep multiple copies.\n\n45\n00:02:10.270 --> 00:02:13.717\nI would use some version control\nsystem like Git or Mercurial.\n\n46\n00:02:13.717 --> 00:02:17.383\nBut to keep things transparent and\na little easier to follow,\n\n47\n00:02:17.383 --> 00:02:21.770\nI've kept different copies of\nthe application in its different states.\n\n48\n00:02:22.920 --> 00:02:27.490\nIn addition to, we're gonna assume\nthat these are all finally done.\n\n49\n00:02:27.490 --> 00:02:28.360\nNow what does that mean?\n\n50\n00:02:28.360 --> 00:02:30.620\nThat means that you can bundle them up and\ndeploy them.\n\n51\n00:02:31.930 --> 00:02:35.358\nAnd we're going to work\nthrough these one by one.\n\n52\n00:02:35.358 --> 00:02:37.810\nYou gotta definitely finish\nout the folder name there.\n\n53\n00:02:37.810 --> 00:02:38.620\n&gt;&gt; It does help.\n\n54\n00:02:38.620 --> 00:02:39.630\n&gt;&gt; It does help.\n\n55\n00:02:39.630 --> 00:02:43.480\nAnd notice that all I\nhave in here is index.js.\n\n56\n00:02:43.480 --> 00:02:45.980\nWell, you don't have to\nknow anything about Node.\n\n57\n00:02:45.980 --> 00:02:50.570\nAll the source code will be\navailable to you in the show notes.\n\n58\n00:02:50.570 --> 00:02:54.261\nBut there will be a liittle bit\nof programming here and there.\n\n59\n00:02:54.261 --> 00:02:57.616\nYou don't have to know how to do it\nother than this little tiny segments.\n\n60\n00:02:57.616 --> 00:03:00.463\nMost of it will be pre-done for you.\n\n61\n00:03:00.463 --> 00:03:06.223\nAnd well, the whole goal is to focus on\nbundling this up into a Docker image so\n\n62\n00:03:06.223 --> 00:03:11.458\nwe can ship that off to Docker Hub and\nthen deploy that as a container.\n\n63\n00:03:11.458 --> 00:03:13.600\nWe're gonna start very simply though.\n\n64\n00:03:13.600 --> 00:03:15.820\nSo let's take a look at index.js.\n\n65\n00:03:15.820 --> 00:03:21.350\nAnd all it's going to say is\nconsole.log('Running on NodeJS!.');.\n\n66\n00:03:21.350 --> 00:03:22.360\nOkay, well what does that mean?\n\n67\n00:03:22.360 --> 00:03:23.990\nI don't know anything about Node.\n\n68\n00:03:23.990 --> 00:03:29.646\nWell, if I just run this on my computer,\nI have Node installed on my computer.\n\n69\n00:03:29.646 --> 00:03:32.392\nIt just prints it out running on Node.js.\n\n70\n00:03:32.392 --> 00:03:35.957\nWell, that's great, but\nif you can install it on your computer,\n\n71\n00:03:35.957 --> 00:03:38.959\nwhy would we ever even care\nabout building a container?\n\n72\n00:03:40.610 --> 00:03:44.786\nWell, the fact being is every time I\nwanted to deploy this application,\n\n73\n00:03:44.786 --> 00:03:49.030\nI would need to make sure that I provision\nsome Linux server, either a VM or\n\n74\n00:03:49.030 --> 00:03:51.848\nan EC2 instance, or\nsomething of that nature.\n\n75\n00:03:51.848 --> 00:03:55.764\nDo all the setup and\nmake sure Node's installed, and\n\n76\n00:03:55.764 --> 00:03:58.470\nthen actually set up to run, right?\n\n77\n00:03:58.470 --> 00:04:02.530\nI have to expose it on port 80 in order\nto make it available on the Internet.\n\n78\n00:04:02.530 --> 00:04:03.860\nAnd it's just a lot of work.\n\n79\n00:04:03.860 --> 00:04:05.700\nAnd this manual maintenance, this set up,\n\n80\n00:04:05.700 --> 00:04:09.100\nthis tendency kind of\naggregation is a nightmare.\n\n81\n00:04:09.100 --> 00:04:12.310\nAs someone who has actually\ndone that from time to time,\n\n82\n00:04:12.310 --> 00:04:15.510\nsetting up Apache servers and\nstuff, it is not fun time.\n\n83\n00:04:15.510 --> 00:04:18.550\nSo I like the Docker ecosystem\nbecause it makes this easy.\n\n84\n00:04:18.550 --> 00:04:21.350\nYou do it one time and you're done.\n\n85\n00:04:21.350 --> 00:04:24.956\nNow what we need to do is build\na Dockerfile that takes this and\n\n86\n00:04:24.956 --> 00:04:26.732\nputs it kind of all together.\n\n87\n00:04:26.732 --> 00:04:29.099\nWe're gonna start simply and\nmake sure that it runs and\n\n88\n00:04:29.099 --> 00:04:30.660\nlook through a few commands.\n\n89\n00:04:30.660 --> 00:04:35.840\nBut I think there's no better time than\nnow to start building up that Dockerfile.\n\n90\n00:04:35.840 --> 00:04:38.090\nSo you can use any text editor you want.\n\n91\n00:04:38.090 --> 00:04:42.432\nI'm using Vim, or VI is available to you.\n\n92\n00:04:42.432 --> 00:04:45.142\nNano or Adam or any of those,\nbut this is just so\n\n93\n00:04:45.142 --> 00:04:48.840\nyou don't get a little motion\nsick as I swipe between screens.\n\n94\n00:04:49.870 --> 00:04:52.790\nAnd it slows me down a little bit and\nkeeps me honest.\n\n95\n00:04:54.100 --> 00:04:55.260\nSo what am I gonna do?\n\n96\n00:04:55.260 --> 00:04:59.430\nWell, I know from my experience\nthat I know a great deal.\n\n97\n00:04:59.430 --> 00:05:03.070\nWell, when I say a great deal,\nI know a fair amount\n\n98\n00:05:03.070 --> 00:05:07.280\nabout Debian-based Linux distributions,\nthat well,\n\n99\n00:05:07.280 --> 00:05:11.950\nI can provision a great deal of servers\nand I can get Node running fairly quickly.\n\n100\n00:05:11.950 --> 00:05:17.040\nI will forewarn you, on Docker Hub, there\nis a Node.js platform already available.\n\n101\n00:05:17.040 --> 00:05:18.662\nI can say from Node.js, and\n\n102\n00:05:18.662 --> 00:05:23.800\nit will pull a Docker image that already\nhas Node installed and everything.\n\n103\n00:05:23.800 --> 00:05:26.881\nI'm gonna go through this to show you,\nwell, what if I'm not running or\n\n104\n00:05:26.881 --> 00:05:29.473\nsomething that it already has\nthat available to me, right?\n\n105\n00:05:29.473 --> 00:05:33.408\nMaybe it's some weird JVM language\nthat keeps cropping up and\n\n106\n00:05:33.408 --> 00:05:35.764\nI'm building this application in.\n\n107\n00:05:35.764 --> 00:05:37.453\nI need to know how to do this.\n\n108\n00:05:37.453 --> 00:05:39.870\nSo we're starting from a base Linux.\n\n109\n00:05:39.870 --> 00:05:43.660\nAnd then we're gonna build up our runtimes\nso our application will be there.\n\n110\n00:05:43.660 --> 00:05:45.550\nAll right, so starting with Ubuntu,\n\n111\n00:05:45.550 --> 00:05:49.880\nthat's my base image,\nI'm going to issue a few run commands.\n\n112\n00:05:49.880 --> 00:05:53.940\nAnd the first one is apt get update -y.\n\n113\n00:05:53.940 --> 00:05:56.070\nMake sure you put that -y in\nthere because if you don't,\n\n114\n00:05:56.070 --> 00:05:57.230\nit's gonna say, are you sure?\n\n115\n00:05:57.230 --> 00:05:59.311\nAnd then your build's gonna fail.\n\n116\n00:05:59.311 --> 00:06:04.031\nAnd then I'm going to\nrun apt get install if I\n\n117\n00:06:04.031 --> 00:06:08.505\ncan spell apt get appropriately, curl.\n\n118\n00:06:08.505 --> 00:06:10.843\nAlso gonna issue a -y.\n\n119\n00:06:10.843 --> 00:06:14.239\nOkay, well-\n&gt;&gt; Kind of a silent install thing you got\n\n120\n00:06:14.239 --> 00:06:14.852\ngoing on.\n\n121\n00:06:14.852 --> 00:06:16.434\n&gt;&gt; Right.\n\n122\n00:06:16.434 --> 00:06:21.311\n&gt;&gt; Typically if you're doing anything with\naptitude, you're definitely gonna have\n\n123\n00:06:21.311 --> 00:06:26.185\na -y or a -f or something, where there's\nno prompts that require you to interact,\n\n124\n00:06:26.185 --> 00:06:28.580\nbecause the Docker build will fail.\n\n125\n00:06:28.580 --> 00:06:30.070\nAnd we've seen that in previous episodes.\n\n126\n00:06:30.070 --> 00:06:31.400\nBut this is a reminder,\n\n127\n00:06:31.400 --> 00:06:35.280\ncuz this was a point of frustration when\nI first started playing around with this.\n\n128\n00:06:35.280 --> 00:06:39.950\nNow with that said, notice that I'm\nkeeping these on separate lines.\n\n129\n00:06:39.950 --> 00:06:44.473\nWhen I'm done, I would probably move\nthis all into a single run command, or\n\n130\n00:06:44.473 --> 00:06:46.888\nat least start pushing these together.\n\n131\n00:06:46.888 --> 00:06:50.190\nBut I'm utilizing\nthe cache as separate runs.\n\n132\n00:06:50.190 --> 00:06:52.958\nThat way,\nif I need to change this line, well,\n\n133\n00:06:52.958 --> 00:06:55.606\nthen that's the only\nline that has to rerun.\n\n134\n00:06:55.606 --> 00:06:59.230\nWell, and anything after that\nbecause the cache has changed.\n\n135\n00:06:59.230 --> 00:07:02.910\nAll right, so now that I have curl, well,\nI'm gonna type some things here and\n\n136\n00:07:02.910 --> 00:07:04.950\nthen we're gonna talk\nabout what they're doing.\n\n137\n00:07:06.020 --> 00:07:09.103\nSo I'm gonna run\n\n138\n00:07:09.103 --> 00:07:13.728\ncurl -sl, https://\n\n139\n00:07:13.728 --> 00:07:21.665\ndeb.nodesource.com/setup_6.x.\n\n140\n00:07:21.665 --> 00:07:23.720\nAnd then I'm gonna pipe that to bash.\n\n141\n00:07:25.210 --> 00:07:30.589\nAnd finally, well, finally for\nnow, finally for now,\n\n142\n00:07:30.589 --> 00:07:38.350\nwe are going to say, apt-get install\nnodejs and add a -y to that as well.\n\n143\n00:07:38.350 --> 00:07:40.670\nAll right, we're gonna test this.\n\n144\n00:07:40.670 --> 00:07:43.210\nI'm not gonna move any further with\nactually building an application for\n\n145\n00:07:43.210 --> 00:07:45.900\nnow because we wanna make\nsure that this builds.\n\n146\n00:07:45.900 --> 00:07:47.888\nAnd this is a great way to\nthink about Docker images.\n\n147\n00:07:47.888 --> 00:07:52.960\nIf your runtime doesn't exist, let's say\nthat Node didn't exist on Docker Hub,\n\n148\n00:07:52.960 --> 00:07:57.027\nwell, I could build this image,\nsave it to my Docker Hub account.\n\n149\n00:07:57.027 --> 00:08:00.972\nAnd then use it as the base image,\nfor another Docker file.\n\n150\n00:08:00.972 --> 00:08:06.359\nAnd I can then inherit this setup that I'm\ncreating for the respective [CROSSTALK].\n\n151\n00:08:06.359 --> 00:08:09.087\n&gt;&gt; So no reinventing the wheel once\nyou've got the, just like you like it,\n\n152\n00:08:09.087 --> 00:08:10.352\nyou bake that cookie perfectly.\n\n153\n00:08:10.352 --> 00:08:13.237\nYou can redo the recipe over and\nover again with just a copy and\n\n154\n00:08:13.237 --> 00:08:14.266\npaste kind of thing.\n\n155\n00:08:14.266 --> 00:08:17.159\n&gt;&gt; Right, and\nactually it even gets simpler than that.\n\n156\n00:08:17.159 --> 00:08:21.950\nThis FROM command here,\nbecomes instead of FROM ubuntu,\n\n157\n00:08:21.950 --> 00:08:25.905\nit becomes in this case, justindevpro/\n&gt;&gt; Right.\n\n158\n00:08:25.905 --> 00:08:27.940\n&gt;&gt; Node, so they're not gonna\nuse that as a base image.\n\n159\n00:08:27.940 --> 00:08:29.260\nSo we're gonna see that.\n\n160\n00:08:29.260 --> 00:08:30.399\nOne final thought here.\n\n161\n00:08:30.399 --> 00:08:34.974\nIn recent versions, apt-get,\nyou can actually shorten that to apt for\n\n162\n00:08:34.974 --> 00:08:36.474\nthe Aptitude manager,\n\n163\n00:08:36.474 --> 00:08:41.661\nyou will get some weird errors about not\nbeing TTY compliant and all these things.\n\n164\n00:08:41.661 --> 00:08:45.598\nSo I tend to use with apt-get, even though\nwhen I'm messing around in Linux I make\n\n165\n00:08:45.598 --> 00:08:49.095\nsure that I command to apt,\njust because I don't like typing apt-get.\n\n166\n00:08:49.095 --> 00:08:52.047\nBut in Dockerfiles you\nget little warnings about\n\n167\n00:08:52.047 --> 00:08:54.786\nnot having appropriate outputs sometimes.\n\n168\n00:08:54.786 --> 00:08:55.878\nSo leave it there.\n\n169\n00:08:55.878 --> 00:08:58.037\nSo let's go ahead and save this.\n\n170\n00:08:58.037 --> 00:09:02.596\nI did not mean to get out of it, though.\n\n171\n00:09:02.596 --> 00:09:04.776\n&gt;&gt; [LAUGH]\n&gt;&gt; But I did saved it.\n\n172\n00:09:04.776 --> 00:09:05.418\n&gt;&gt; Old habits, right?\n\n173\n00:09:05.418 --> 00:09:05.983\n&gt;&gt; Old habits.\n\n174\n00:09:05.983 --> 00:09:09.330\nBut this one command\nhere was kind of weird.\n\n175\n00:09:09.330 --> 00:09:12.229\nLike where would I,\nhow would I know this, right?\n\n176\n00:09:12.229 --> 00:09:15.541\nHow do I know to type this,\nJustin, you just made that up.\n\n177\n00:09:15.541 --> 00:09:16.403\nNo, I didn't.\n\n178\n00:09:16.403 --> 00:09:20.361\nI had to look this up because this is\nwhere my node run time comes from.\n\n179\n00:09:20.361 --> 00:09:22.954\nAnd I was working on Ubuntu.\n\n180\n00:09:22.954 --> 00:09:25.909\nSo let's go take a look\nwhere did that come from.\n\n181\n00:09:25.909 --> 00:09:31.683\nAnd let's go to Google and\ntype, node.js ubuntu.\n\n182\n00:09:31.683 --> 00:09:35.709\nNow this could of easily been Fedora,\nor Red Hat or Cent.\n\n183\n00:09:35.709 --> 00:09:39.518\nAnd Installing Node js\nvia package manager.\n\n184\n00:09:39.518 --> 00:09:45.030\nAnd here is the list of all\nthese distributions here.\n\n185\n00:09:45.030 --> 00:09:48.367\nArch, Debian based,\nEnterprise Linux, Fedora.\n\n186\n00:09:48.367 --> 00:09:51.743\nSome of these I don't know, and even\nWindows, yeah, which is kind of weird,\n\n187\n00:09:51.743 --> 00:09:54.249\ncuz I don't think of Windows\nas having package managers,\n\n188\n00:09:54.249 --> 00:09:56.213\nbut it does have a couple\nof third party ones.\n\n189\n00:09:56.213 --> 00:09:57.373\n&gt;&gt; Better late than never, right?\n\n190\n00:09:57.373 --> 00:09:58.451\n&gt;&gt; That is exactly right.\n\n191\n00:09:58.451 --> 00:10:01.160\n&gt;&gt; [LAUGH]\n&gt;&gt; So I'm gonna stay with the Debian.\n\n192\n00:10:01.160 --> 00:10:06.366\nAnd notice, here's that command,\nkinda, kinda.\n\n193\n00:10:06.366 --> 00:10:10.514\nHere's that command here that\nI've put into my Dockerfile.\n\n194\n00:10:10.514 --> 00:10:12.937\nAnd what this does is it grab a setup.\n\n195\n00:10:12.937 --> 00:10:18.272\nIt adds a key, it adds it to your\nlist of repositories for apt-get.\n\n196\n00:10:18.272 --> 00:10:22.630\nAnd then I have the ability to\napt-get install In your Dockerfile,\n\n197\n00:10:22.630 --> 00:10:24.928\nyou could use the package manager.\n\n198\n00:10:24.928 --> 00:10:29.975\nYou could also use wget or\ncURL to download the binary, and\n\n199\n00:10:29.975 --> 00:10:34.816\nthen you use your package manager,\nwhether BEM or DNF or\n\n200\n00:10:34.816 --> 00:10:40.074\napt or whatever to install from\nthat Debian package, okay?\n\n201\n00:10:40.074 --> 00:10:43.413\nAnd I think misspoke there,\nthey're a little bit different,\n\n202\n00:10:43.413 --> 00:10:47.828\nnot quite the package manager there but\nlike a, your Debian packaging resources.\n\n203\n00:10:47.828 --> 00:10:53.108\nI don't recommend that because if you\ngo to rebuild this, like let's say that\n\n204\n00:10:53.108 --> 00:10:58.080\nnode has an update, this update will\nstay current with node version six.\n\n205\n00:10:58.080 --> 00:11:02.318\nOtherwise I'm gonna have to change\nthe URL for the actual binary, so\n\n206\n00:11:02.318 --> 00:11:06.423\nI tend to use package managers in\nmy Docker build files where I can.\n\n207\n00:11:06.423 --> 00:11:11.485\nSo if we notice here though, Daniel,\ndo you see anything that's a little\n\n208\n00:11:11.485 --> 00:11:15.991\nodd from this command that's\nhighlighted to this command here?\n\n209\n00:11:15.991 --> 00:11:19.745\n&gt;&gt; Yeah,\nyou're definitely missing that sudo -E.\n\n210\n00:11:19.745 --> 00:11:21.573\n&gt;&gt; Yeah, sudo -E's not there.\n\n211\n00:11:21.573 --> 00:11:23.823\n&gt;&gt; Yeah.\n&gt;&gt; So, and then a sudo here, and\n\n212\n00:11:23.823 --> 00:11:25.051\njust as a reminder,\n\n213\n00:11:25.051 --> 00:11:29.551\nwhen you're doing a Docker build you\nalready have elevated privileges.\n\n214\n00:11:29.551 --> 00:11:32.369\nSo if you go to look, right?\n\n215\n00:11:32.369 --> 00:11:36.439\nI needed to add this node source\nto the Debian package manager.\n\n216\n00:11:36.439 --> 00:11:39.389\nAnd then I have to get\nsudo apt-get installed.\n\n217\n00:11:39.389 --> 00:11:43.161\nOkay, well, if you type sudo,\nyour Docker build will fail.\n\n218\n00:11:43.161 --> 00:11:45.463\nSo keep that in mind, be very careful.\n\n219\n00:11:45.463 --> 00:11:49.590\nYou're already elevated at what\nyou can do inside of a Dockerfile.\n\n220\n00:11:49.590 --> 00:11:52.705\nDon't need sudo,\njust run it and let it rip.\n\n221\n00:11:52.705 --> 00:11:55.632\n&gt;&gt; Think Node Js with Pink and\na little addendum there on their website,\n\n222\n00:11:55.632 --> 00:11:59.231\nletting you know if you're doing this in\nDocker, forget that whole sudo business.\n\n223\n00:11:59.231 --> 00:12:01.684\n&gt;&gt; Well, maybe they just make\nan assumption that, well,\n\n224\n00:12:01.684 --> 00:12:05.188\nif you're doing anything in Docker,\nyou don't need the sudo business at all.\n\n225\n00:12:05.188 --> 00:12:06.696\n&gt;&gt; Yeah.\n&gt;&gt; And that's for\n\n226\n00:12:06.696 --> 00:12:08.267\nthe most part-\n&gt;&gt; It's also an implied thing.\n\n227\n00:12:08.267 --> 00:12:08.862\n&gt;&gt; Yep, so.\nSo\n\n228\n00:12:08.862 --> 00:12:13.770\nI'm going to actually run an appropriate\ncommand and my Dockerfile's done.\n\n229\n00:12:13.770 --> 00:12:16.128\nWe're gonna test this before we\nstart building our application.\n\n230\n00:12:16.128 --> 00:12:20.451\nWell, because I wanna make sure that\nthe actual run time is built up.\n\n231\n00:12:20.451 --> 00:12:25.387\nSo docker build -t, and\nusing our naming convention,\n\n232\n00:12:25.387 --> 00:12:28.124\nthis is my Docker Hub profile.\n\n233\n00:12:28.124 --> 00:12:33.505\nAnd /, I wanna call this node base,\nbecause then I would be able to do,\n\n234\n00:12:33.505 --> 00:12:39.812\nfrom justindevpro/node:base, and\nthen build another Docker image from that.\n\n235\n00:12:39.812 --> 00:12:42.997\nThat's very handy, and\nI'm gonna build from here.\n\n236\n00:12:42.997 --> 00:12:47.153\nSo, running the build context and\nrunning apt-get update.\n\n237\n00:12:47.153 --> 00:12:50.283\nNow sadly,\nI've done a little bit of research, and\n\n238\n00:12:50.283 --> 00:12:54.696\nI've said this in a previous episode but\njust as a reminder apt-get is for\n\n239\n00:12:54.696 --> 00:12:57.698\nsome reason painfully slow\non the initial build.\n\n240\n00:12:57.698 --> 00:13:02.792\nThat's why you should utilize\nthe caching system for your Dockerfiles.\n\n241\n00:13:02.792 --> 00:13:06.649\nSo it will take a little while,\nand this is not nearly as fast.\n\n242\n00:13:06.649 --> 00:13:08.248\nI mean it's still pretty fast, but\n\n243\n00:13:08.248 --> 00:13:11.515\nit's not nearly as fast as it would\nbe if you're in a base Linux install.\n\n244\n00:13:11.515 --> 00:13:16.674\nAnd I think that's getting a little better\nfrom previous iterations that I've seen,\n\n245\n00:13:16.674 --> 00:13:20.150\nbut now because I'm running cURL and\nthis is up and going-\n\n246\n00:13:20.150 --> 00:13:22.277\n&gt;&gt; It's updating, it's gonna take a bit.\n\n247\n00:13:22.277 --> 00:13:23.446\n&gt;&gt; Yeah, exactly.\n\n248\n00:13:23.446 --> 00:13:27.016\nSo we're utilizing those\nindividual run commands to\n\n249\n00:13:27.016 --> 00:13:29.563\nminimize this on subsequent builds.\n\n250\n00:13:29.563 --> 00:13:32.727\nSo running apt-get installed in Node.js,\nand\n\n251\n00:13:32.727 --> 00:13:35.435\nwe just have to give\nit little bit of time.\n\n252\n00:13:35.435 --> 00:13:37.830\nNow, why we're giving it some time.\n\n253\n00:13:37.830 --> 00:13:39.428\nWell, I-\n&gt;&gt; You gave it enough time.\n\n254\n00:13:39.428 --> 00:13:40.321\n&gt;&gt; I gave it enough time.\n\n255\n00:13:40.321 --> 00:13:43.550\n&gt;&gt; [LAUGH]\n&gt;&gt; But before we do, just as a reminder,\n\n256\n00:13:43.550 --> 00:13:47.863\nthis application is going to run and\nquit as soon as we actually build it up.\n\n257\n00:13:47.863 --> 00:13:52.130\nAnd because I've used these\nindividual run commands,\n\n258\n00:13:52.130 --> 00:13:55.306\nI don't have to worry about that taking so\n\n259\n00:13:55.306 --> 00:14:00.042\nmuch time to rebuild because I\nhave these individual layers.\n\n260\n00:14:00.042 --> 00:14:03.840\nSo now that I have my base image,\nI know that it works.\n\n261\n00:14:03.840 --> 00:14:08.382\nOkay, let's actually put\nthis into our Dockerfile.\n\n262\n00:14:08.382 --> 00:14:12.899\nSo if I hop back into my\nDockerfile right after I apt-get\n\n263\n00:14:12.899 --> 00:14:16.657\ninstall Node.js, well, what do I wanna do?\n\n264\n00:14:16.657 --> 00:14:19.064\nI have that index.js file.\n\n265\n00:14:19.064 --> 00:14:22.324\nThat's actually what I want to run,\nall right?\n\n266\n00:14:22.324 --> 00:14:27.727\nSo I'm gonna stay here and\nwell, there's a couple of ways.\n\n267\n00:14:27.727 --> 00:14:28.755\nAnd I'm gonna show you one and\n\n268\n00:14:28.755 --> 00:14:31.524\nthen we're gonna look at the documentation\nto see what the recommendation is.\n\n269\n00:14:31.524 --> 00:14:40.104\nI'm going to add index.js to\na folder inside of my image, right?\n\n270\n00:14:40.104 --> 00:14:46.110\nThen this will be evident in\nthe container, called /app/index.js.\n\n271\n00:14:46.110 --> 00:14:51.060\nNow do use file extensions here, because\nindex.js, if I just left this at /app,\n\n272\n00:14:51.060 --> 00:14:55.514\nit would actually take that file and\nrename it as a folder or it would try to,\n\n273\n00:14:55.514 --> 00:14:57.518\nand then you get some weirdness.\n\n274\n00:14:57.518 --> 00:14:59.713\nNot that I've done that before-\n&gt;&gt; [LAUGH]\n\n275\n00:14:59.713 --> 00:15:01.740\n&gt;&gt; But definitely, I'd be aware of-\n\n276\n00:15:01.740 --> 00:15:02.309\n&gt;&gt; The word on the street is.\n\n277\n00:15:02.309 --> 00:15:03.739\n&gt;&gt; Yeah, so I've heard.\n\n278\n00:15:03.739 --> 00:15:10.690\nSo I'm gonna add index.js to the image\nat /app/index.js, all right.\n\n279\n00:15:10.690 --> 00:15:15.537\nAnd then I'm gonna do one other thing,\nand we're gonna come back to this add\n\n280\n00:15:15.537 --> 00:15:19.192\ncommand cuz there's a,\nit could be a little iffy there.\n\n281\n00:15:19.192 --> 00:15:22.341\nI'm gonna set the working\ndirectory to /app,\n\n282\n00:15:22.341 --> 00:15:27.234\nand that means where is your container\ngoing to start based on this image?\n\n283\n00:15:27.234 --> 00:15:31.232\nSo if I were to Docker\nrun-IT this container,\n\n284\n00:15:31.232 --> 00:15:35.853\nthis would actually put me\nin this folder by default.\n\n285\n00:15:35.853 --> 00:15:40.360\nSo I can set where the container starts\nby default by using this WORXDIR.\n\n286\n00:15:40.360 --> 00:15:41.854\nNow we haven't seen this previously, but\n\n287\n00:15:41.854 --> 00:15:43.980\nthis is important as you're\nbuilding these applications.\n\n288\n00:15:43.980 --> 00:15:47.465\nAnd then finally we need,\nwe'll how is this going to start?\n\n289\n00:15:47.465 --> 00:15:49.550\nHow are we gonna start this up?\n\n290\n00:15:49.550 --> 00:15:52.273\nAnd we're just gonna go with the command,\nbecause maybe this wants to be,\n\n291\n00:15:52.273 --> 00:15:55.101\nthen we want this to be over-runnable,\nor overridable, over-runnable.\n\n292\n00:15:55.101 --> 00:15:58.000\nOverridable, and\n\n293\n00:15:58.000 --> 00:16:03.623\nwe're gonna say node, Index.js.\n\n294\n00:16:03.623 --> 00:16:06.697\nAll right, now I'm gonna come back and\n\n295\n00:16:06.697 --> 00:16:10.870\nmess this up a little bit,\nhopefully this works.\n\n296\n00:16:10.870 --> 00:16:12.810\nWe're assuming this works and\nafter it does,\n\n297\n00:16:12.810 --> 00:16:16.300\nwe're gonna mess it up a little bit and\nsee how things play out.\n\n298\n00:16:16.300 --> 00:16:17.980\nSo I'm gonna run that Docker build again.\n\n299\n00:16:17.980 --> 00:16:23.570\nBut instead of saying base as my image,\nI'm going to say,\n\n300\n00:16:23.570 --> 00:16:30.542\nnodeapp, actually I'm gonna call\nthis nodeapp:1.0, all right.\n\n301\n00:16:30.542 --> 00:16:34.275\nSo I'm calling this\njustindevpro/nodeapp:1.0 and I'm still\n\n302\n00:16:34.275 --> 00:16:38.392\nbuilding from the same directory,\nI'm just tagging this image a little bit\n\n303\n00:16:38.392 --> 00:16:43.380\ndifferently, just so I can, I know that\nit's different than that node base image.\n\n304\n00:16:43.380 --> 00:16:45.457\nSo I rerun, that was fast.\n\n305\n00:16:45.457 --> 00:16:46.450\n&gt;&gt; Super fast.\n\n306\n00:16:46.450 --> 00:16:47.345\n&gt;&gt; Super fast.\n\n307\n00:16:47.345 --> 00:16:48.690\n&gt;&gt; Because I don't have to re-update.\n\n308\n00:16:48.690 --> 00:16:50.580\nAll those other\nintermediate containers and\n\n309\n00:16:50.580 --> 00:16:54.930\nimages already existed from\nthe previous build of node base.\n\n310\n00:16:54.930 --> 00:16:57.960\nSo now all I had to do was\nre-run from this add command.\n\n311\n00:16:57.960 --> 00:17:01.630\nThe moment of truth though, does it run?\n\n312\n00:17:01.630 --> 00:17:05.489\nWell, let's find out,\ncuz I'm not infallible,\n\n313\n00:17:05.489 --> 00:17:07.928\nit may have went horribly awry.\n\n314\n00:17:07.928 --> 00:17:12.299\nSo I'm gonna node run justindevpro and\n\n315\n00:17:12.299 --> 00:17:16.406\nthat was nodeapp:1.0 and boom,\n\n316\n00:17:16.406 --> 00:17:23.810\nI have now bundled up an index.js\nfile into a docker container.\n\n317\n00:17:23.810 --> 00:17:27.090\nWell, it's actually part of an image but\nI ran a container and\n\n318\n00:17:27.090 --> 00:17:31.650\nit printed out just like it\nwould on my laptop previously.\n\n319\n00:17:31.650 --> 00:17:35.237\nWell, that's great cuz I didn't have to,\nif I'm putting this on a brand new server,\n\n320\n00:17:35.237 --> 00:17:37.710\nI don't have to worry about\ninstalling node on the server.\n\n321\n00:17:37.710 --> 00:17:40.710\nI just have to make sure that\nthe image is set up to run and\n\n322\n00:17:40.710 --> 00:17:42.350\nthen that docker is installed in server.\n\n323\n00:17:42.350 --> 00:17:46.397\nAnd it's getting so\nubiquitous that docker is,\n\n324\n00:17:46.397 --> 00:17:50.948\nit's almost a one click\ninstall in a lot of instances.\n\n325\n00:17:50.948 --> 00:17:56.142\nBut, as a matter of experimentation,\nI wonder what happens if I just,\n\n326\n00:17:56.142 --> 00:18:00.918\nyou know what, I'm not even gonna,\nI'm just gonna take it out.\n\n327\n00:18:00.918 --> 00:18:02.230\nYeah, just take it out.\n\n328\n00:18:02.230 --> 00:18:09.786\nSo, let's see here and I'm gonna\nrerun 1.0 and it's still pretty fast.\n\n329\n00:18:09.786 --> 00:18:11.225\n&gt;&gt; So it's successfully built.\n\n330\n00:18:11.225 --> 00:18:16.300\n&gt;&gt; It says successfully built,\nhm, but does it successfully run,\n\n331\n00:18:16.300 --> 00:18:19.116\nthose are two different things\nthat we have to be careful about.\n\n332\n00:18:19.116 --> 00:18:24.785\nSo docker run justindevpro\n\n333\n00:18:24.785 --> 00:18:30.220\nnodeapp:1.0 and.\n\n334\n00:18:30.220 --> 00:18:30.900\n&gt;&gt; You broked it.\n\n335\n00:18:30.900 --> 00:18:32.360\n&gt;&gt; I broked it.\n\n336\n00:18:32.360 --> 00:18:37.330\nIt does give me standard error,\nin this case standard out,\n\n337\n00:18:37.330 --> 00:18:40.651\nfor Cannot find module '/index.js'.\n\n338\n00:18:40.651 --> 00:18:41.957\nWhy is that?\n\n339\n00:18:41.957 --> 00:18:46.517\nWell, if I go and\nlook in my Docker file I added\n\n340\n00:18:46.517 --> 00:18:50.600\nindex.js to a folder in the container.\n\n341\n00:18:50.600 --> 00:18:55.585\nI did not anyway indicate that I should\nbe looking in that folder to try to run\n\n342\n00:18:55.585 --> 00:18:56.940\nthat application.\n\n343\n00:18:58.050 --> 00:19:03.150\nAnd with a lot of web apps and\nthings of that nature, it's really handy\n\n344\n00:19:03.150 --> 00:19:06.990\nto assume that your app is running\nfrom the folder that contains it.\n\n345\n00:19:06.990 --> 00:19:10.610\nJust for logistics purposes, and\nyou don't always have to worry about\n\n346\n00:19:10.610 --> 00:19:13.180\ncreating absolute or\nat least relative paths.\n\n347\n00:19:13.180 --> 00:19:18.000\nSo that's where that WORKDIR comes in.\n\n348\n00:19:18.000 --> 00:19:21.580\nI am setting the working directory for\nthis application.\n\n349\n00:19:21.580 --> 00:19:26.180\nAnd now if we go back and run,\nthat should be, well, don't run, but\n\n350\n00:19:26.180 --> 00:19:29.650\ngo back and build,\nthat's important, gotta rebuild.\n\n351\n00:19:29.650 --> 00:19:33.800\nIf we go back and build, and then I run,\nnotice it's back to working.\n\n352\n00:19:33.800 --> 00:19:37.050\n&gt;&gt; So if you take that work there,\nthat working dir or\n\n353\n00:19:37.050 --> 00:19:41.040\nwhatever it was out of there, it's going\nto fall back to some sort of default\n\n354\n00:19:41.040 --> 00:19:43.980\nwhich is the actual directory that\nyou're in at that moment in time.\n\n355\n00:19:43.980 --> 00:19:44.600\n&gt;&gt; Exactly, and\n\n356\n00:19:44.600 --> 00:19:49.870\nif I'm not mistaken in Ubuntu, it is\nthe root directory is where it defaults.\n\n357\n00:19:49.870 --> 00:19:53.920\nSo this will all be top level and\nthen you'll be adding things to\n\n358\n00:19:53.920 --> 00:19:57.490\nthe root directory, but\nnow this is a sub-directory.\n\n359\n00:19:57.490 --> 00:20:00.510\nOne thing to keep in mind though,\nthis application, or excuse me,\n\n360\n00:20:00.510 --> 00:20:04.180\nthis image is now kind of\ncoupled to the application.\n\n361\n00:20:04.180 --> 00:20:07.910\nThis is not how I would go about\nthis if I was using this image for\n\n362\n00:20:07.910 --> 00:20:09.200\ndevelopment environment.\n\n363\n00:20:09.200 --> 00:20:11.950\nThis is how I would put this\ntogether as an application to\n\n364\n00:20:11.950 --> 00:20:15.170\nsend off to Docker HUB that has\nsome kind of build process or\n\n365\n00:20:15.170 --> 00:20:18.810\ndeployment process that would\nautomatically deploy changes.\n\n366\n00:20:18.810 --> 00:20:19.740\nNow before we move on,\n\n367\n00:20:19.740 --> 00:20:24.020\nthere's a couple of others things that\nI wanna change there before we move on.\n\n368\n00:20:24.020 --> 00:20:27.070\nBecause when I say application,\nall it's doing is printing to the screen.\n\n369\n00:20:27.070 --> 00:20:29.890\nI want to talk about that add command.\n\n370\n00:20:29.890 --> 00:20:34.980\nLet's hop over into, well,\nlet's say dockerfile reference.\n\n371\n00:20:34.980 --> 00:20:38.040\nAnd this will be your friend,\nI recommend keeping up on this.\n\n372\n00:20:38.040 --> 00:20:42.160\nThey've gotten pretty good about keeping\nthis up to date as the version changes.\n\n373\n00:20:42.160 --> 00:20:45.335\nAnd if we look here notice we're on 17.03.\n\n374\n00:20:45.335 --> 00:20:49.570\nThat's the version that's installed on\nmy computer so make sure those match.\n\n375\n00:20:49.570 --> 00:20:52.420\nIf you don't,\nthey have a drop down of older versions.\n\n376\n00:20:53.730 --> 00:20:56.010\nBut I'm gonna zoom out\njust a little bit and\n\n377\n00:20:56.010 --> 00:20:58.840\nif I look over here notice\nthere's this ADD command.\n\n378\n00:21:00.300 --> 00:21:05.950\nSo ADD has two forms,\nmultiple source and then,\n\n379\n00:21:05.950 --> 00:21:13.440\nso excuse me source and destination,\nand then the list type form.\n\n380\n00:21:13.440 --> 00:21:15.120\nAnd okay, well, that's good.\n\n381\n00:21:15.120 --> 00:21:19.829\nAnd then if we scroll down\nwe'll come back, Copy.\n\n382\n00:21:19.829 --> 00:21:25.836\nWell Copy kinda looks like the same thing,\ncopy from source to destination.\n\n383\n00:21:25.836 --> 00:21:30.194\nIt even gives you very similar examples,\nthat's weird.\n\n384\n00:21:30.194 --> 00:21:35.052\nSo why would I,\nwhat difference would I use?\n\n385\n00:21:35.052 --> 00:21:39.634\nHere's the standard difference,\nADD allows you to point to URLs and\n\n386\n00:21:39.634 --> 00:21:44.100\nother things that it will try\nto download and put in there.\n\n387\n00:21:44.100 --> 00:21:47.540\nCopy is for directories and files.\n\n388\n00:21:47.540 --> 00:21:51.031\nThat is the recommendation.\n\n389\n00:21:51.031 --> 00:21:54.800\nIf I can find it here, let's go down and,\n\n390\n00:21:54.800 --> 00:21:58.870\nno, no, wait a minute,\nI'm on the wrong page.\n\n391\n00:21:58.870 --> 00:22:04.925\nSo Docker file ad versus copy and\nif we look docker file add versus copy but\n\n392\n00:22:04.925 --> 00:22:11.100\nwhat we really want is best practices for\nwriting docker files.\n\n393\n00:22:11.100 --> 00:22:15.390\nI don't know why that escaped me\nat that very moment so if I add or\n\n394\n00:22:15.390 --> 00:22:19.728\ncopy there is a recommendation\nof when to use which one.\n\n395\n00:22:19.728 --> 00:22:24.650\nAlthough add and copy are functionally\nsimilar, copy is preferred.\n\n396\n00:22:24.650 --> 00:22:28.830\nSo if you've been using old docker,\nthis is not always the case, and\n\n397\n00:22:28.830 --> 00:22:31.110\nyou will see docker files\nin the wild that use add.\n\n398\n00:22:31.110 --> 00:22:34.990\nI just used it, it works,\nit works as I anticipated.\n\n399\n00:22:34.990 --> 00:22:39.850\nHowever based on the docker file\nbest practices, copy is preferred,\n\n400\n00:22:39.850 --> 00:22:43.140\nthat's because it's more\ntransparent than add.\n\n401\n00:22:43.140 --> 00:22:46.970\nCopy only supports basic copying from\nyour local computer into the image,\n\n402\n00:22:48.030 --> 00:22:51.530\nadd will actually,\nif its a Tar file it will expand it.\n\n403\n00:22:51.530 --> 00:22:55.830\nIt will actually untar it, well that maybe\nunexpected because maybe you expected it\n\n404\n00:22:55.830 --> 00:22:59.160\nto be a Tar file,\nthat your using in your application.\n\n405\n00:22:59.160 --> 00:23:03.640\nIt will also look for,\nlike I said, URLs and\n\n406\n00:23:03.640 --> 00:23:09.140\ntry to bring in the associated resource\nfrom a web-based URL and put it in there.\n\n407\n00:23:09.140 --> 00:23:12.740\nThat may be handy but it's not\ntransparent about what it's doing.\n\n408\n00:23:12.740 --> 00:23:16.490\nI would be, I have this tar file or\nthis zip file and\n\n409\n00:23:16.490 --> 00:23:21.360\nif it's untarred I may be in trouble\nas far as my application's going.\n\n410\n00:23:21.360 --> 00:23:26.800\nSo with that said, we should probably\nchange our Docker file really quickly.\n\n411\n00:23:26.800 --> 00:23:30.680\nAnd then let's actually\nbuild a true replication.\n\n412\n00:23:30.680 --> 00:23:35.919\nSo, Looking into those resources,\n\n413\n00:23:35.919 --> 00:23:40.417\nI'm going to change ADD to COPY and\nit should still work.\n\n414\n00:23:40.417 --> 00:23:44.116\nWe're using the documentation, but let's\nsee if we run into one of those gotchas.\n\n415\n00:23:44.116 --> 00:23:49.492\nDocker build and I'm gonna write\n\n416\n00:23:49.492 --> 00:23:56.600\nover nodeapp: 1.0, and it looks fine.\n\n417\n00:23:56.600 --> 00:23:58.114\nAnd then, if we rerun.\n\n418\n00:23:58.114 --> 00:24:04.710\nEverything works the same so\nI recommend using copy as well.\n\n419\n00:24:04.710 --> 00:24:09.881\nPeriodically I'll get in some old\nbad habits, or I'll be using another\n\n420\n00:24:09.881 --> 00:24:15.720\nDockerfile for a reference but\nyou should really use copy, not add.\n\n421\n00:24:15.720 --> 00:24:18.234\nNow Daniel,\nthere's some other things that go on it,\n\n422\n00:24:18.234 --> 00:24:21.890\ndo you think we have time to actually\nbuild this full scale application?\n\n423\n00:24:21.890 --> 00:24:24.170\n&gt;&gt; Yeah, yeah,\ncuz I know how good Justin is.\n\n424\n00:24:24.170 --> 00:24:27.410\nHe can make that happen in the six\nminutes that we have left on the clock,\n\n425\n00:24:27.410 --> 00:24:28.960\nso fire away my good man.\n\n426\n00:24:28.960 --> 00:24:30.649\n&gt;&gt; All right, well, let's-\n&gt;&gt; [LAUGH]\n\n427\n00:24:30.649 --> 00:24:31.588\n&gt;&gt; Let's find out,\n\n428\n00:24:31.588 --> 00:24:35.154\nso I'm gonna hop over into nodeappv1,\nand all I'm gonna do is make\n\n429\n00:24:35.154 --> 00:24:38.906\na copy because that Dockerfile is gonna\nbe very similar to what we have so\n\n430\n00:24:38.906 --> 00:24:40.850\nwe can see that difference.\n\n431\n00:24:40.850 --> 00:24:44.176\nSo I'm gonna say nodeappv1/dockerfile and\n\n432\n00:24:44.176 --> 00:24:50.590\nwhere am I going to copy that to,\nwell nodeoppv2, that kinda makes sense.\n\n433\n00:24:50.590 --> 00:24:55.952\nAnd if I hop into nodeoppv2 with\nappropriate naming, there we go.\n\n434\n00:24:55.952 --> 00:25:01.342\nAnd I ls, you'll notice\nthere's this extra file here,\n\n435\n00:25:01.342 --> 00:25:04.673\nand index.js, and the Dockerfile.\n\n436\n00:25:04.673 --> 00:25:09.368\nOkay well let's take a look\nat not the Dockerfile,\n\n437\n00:25:09.368 --> 00:25:14.389\nbut the Node index.js and\nwell, this is a full blown,\n\n438\n00:25:14.389 --> 00:25:19.520\nwell full blown,\nit is in a web based application server\n\n439\n00:25:19.520 --> 00:25:24.420\nusing Express which is\npart of the Node runtime.\n\n440\n00:25:24.420 --> 00:25:29.240\nNow this is very standard,\nit's not even the most up to date version\n\n441\n00:25:29.240 --> 00:25:33.520\nthat Node can handle as far as\nthe JavaScript version, but it works and\n\n442\n00:25:33.520 --> 00:25:37.800\njust to show you let's take\na look at what this is doing.\n\n443\n00:25:37.800 --> 00:25:42.820\nSo I have to npm install,\nthat's important, and you should, every\n\n444\n00:25:42.820 --> 00:25:46.080\ntime you're making these applications\nwork like this you should be thinking\n\n445\n00:25:46.080 --> 00:25:49.457\nwhat are the steps I need to take, because\nthose have to be in your Dockerfile cuz\n\n446\n00:25:49.457 --> 00:25:53.488\nDocker's not gonna make any assumption\nabout how to make this application work.\n\n447\n00:25:53.488 --> 00:25:58.658\nSo node index.js, I'm now on port 8080,\nlet's take a look.\n\n448\n00:25:59.809 --> 00:26:03.923\nAnd 8080, and all it says is welcome,\nall right, so\n\n449\n00:26:03.923 --> 00:26:09.180\nthat's what it does, but it is a start\non how to build this application.\n\n450\n00:26:10.890 --> 00:26:12.690\nSo let's kill it.\n\n451\n00:26:12.690 --> 00:26:15.320\nAnd well, what is this other file?\n\n452\n00:26:16.370 --> 00:26:19.373\nNotice that node_modules is there,\nthose are just dependencies,\n\n453\n00:26:19.373 --> 00:26:21.340\nwe don't have to worry about it.\n\n454\n00:26:21.340 --> 00:26:27.220\nThe same would be for Python, for\nGo, actually Go builds a binary,\n\n455\n00:26:27.220 --> 00:26:32.140\nfor Java, anything that has to be pulled\nin, well, you have similar steps.\n\n456\n00:26:32.140 --> 00:26:34.420\nBut what's this package.json?\n\n457\n00:26:34.420 --> 00:26:38.170\nAnd this is what the Node runtime uses for\nsaid dependencies.\n\n458\n00:26:39.370 --> 00:26:43.490\nSo this file is kind of, along with\nother things, kind of like a list of\n\n459\n00:26:43.490 --> 00:26:46.720\nthings that I need in my application for\nmy application to run.\n\n460\n00:26:47.820 --> 00:26:51.630\nThis is probably something good to\ninclude in this Dockerfile, right?\n\n461\n00:26:51.630 --> 00:26:55.940\nIf I bring that list of dependencies\nthrough, then that Dockerfile can actually\n\n462\n00:26:55.940 --> 00:27:00.500\nbuild them and become part of the Docker\nimage that I'm trying to release.\n\n463\n00:27:00.500 --> 00:27:03.560\nSo those are two things,\nagain not necessarily about Node,\n\n464\n00:27:03.560 --> 00:27:07.900\nthis is something that you should be aware\nof for whatever programming language or\n\n465\n00:27:07.900 --> 00:27:13.190\nwhatever runtime you're using,\nwhat pieces do I need to make happen?\n\n466\n00:27:13.190 --> 00:27:17.150\nSo let's go ahead and\nsay Dockerfile, all right.\n\n467\n00:27:17.150 --> 00:27:20.312\nWell, I copied index.js, right,\n\n468\n00:27:20.312 --> 00:27:25.412\nI just told you you needed\nthat package.json file, okay,\n\n469\n00:27:25.412 --> 00:27:30.314\nso let's add a COPY package.json,\nand put that in app.\n\n470\n00:27:32.629 --> 00:27:38.366\nApp.package.json, and package.json is\nkind of a default feature of Node,\n\n471\n00:27:38.366 --> 00:27:40.601\nit knows to look for that file.\n\n472\n00:27:40.601 --> 00:27:46.763\nAnd now that I've copied those,\nbefore I can do this nodeindex.js,\n\n473\n00:27:46.763 --> 00:27:53.145\nyou'll remember it gave me an error\nuntil I ran that npm install, okay.\n\n474\n00:27:53.145 --> 00:27:56.778\nWell this is one of those\nkind of application specific,\n\n475\n00:27:56.778 --> 00:28:01.950\nyou'll have to figure out what\nis needed for your application.\n\n476\n00:28:01.950 --> 00:28:05.310\nSo I'm gonna npm install but\nnotice I'm inside the directory, so\n\n477\n00:28:05.310 --> 00:28:09.440\nI skipped over that after I copied cuz\nI need to be inside that directory\n\n478\n00:28:09.440 --> 00:28:12.489\ncuz this install command is looking for\nthis package.json file.\n\n479\n00:28:13.670 --> 00:28:19.020\nWe will in future episodes look at other\nlanguages, just so it's not very specific.\n\n480\n00:28:19.020 --> 00:28:22.824\nSo if now I run, or excuse me, build.\n\n481\n00:28:24.653 --> 00:28:29.024\nJustindevpro/nodeapp and this is 2.0, so\n\n482\n00:28:29.024 --> 00:28:32.416\nI'm tagging those appropriately.\n\n483\n00:28:32.416 --> 00:28:34.186\nAnd then it's building, it's building.\n\n484\n00:28:34.186 --> 00:28:39.918\nAnd then this npm install is very much\nlike a package management system for,\n\n485\n00:28:39.918 --> 00:28:44.320\nwell, just for\nNode instead of the actual Linux runtime.\n\n486\n00:28:44.320 --> 00:28:47.293\nIt says it's built,\nlet's see what happens.\n\n487\n00:28:47.293 --> 00:28:53.619\nSo docker run dash, well we wanna\nmake sure we bind the ports so\n\n488\n00:28:53.619 --> 00:28:58.863\nwe can check to see if\nthe application's running.\n\n489\n00:28:58.863 --> 00:29:03.299\nAnd justindevpro/nodeapp:2.0 and\n\n490\n00:29:03.299 --> 00:29:06.849\nnow listening on port 8080.\n\n491\n00:29:09.018 --> 00:29:15.124\nHere we go, the moment of truth,\nand if I come back there we go,\n\n492\n00:29:15.124 --> 00:29:18.828\nit says that I've made a get request.\n\n493\n00:29:18.828 --> 00:29:23.279\nI refresh, it looks like everything's\nworking exactly the same,\n\n494\n00:29:23.279 --> 00:29:25.787\nit doesn't seem any different to me.\n\n495\n00:29:25.787 --> 00:29:29.736\nBut now I don't have to worry about do\nI have a node installed on my server,\n\n496\n00:29:29.736 --> 00:29:31.646\nI can just run this as a container and\n\n497\n00:29:31.646 --> 00:29:36.230\nas long as I do a little bit of the setup\nwith the ports I should be good to go.\n\n498\n00:29:36.230 --> 00:29:37.633\nSo let's go ahead and kill this.\n\n499\n00:29:40.491 --> 00:29:42.500\nNo, Daniel, we're in trouble.\n\n500\n00:29:42.500 --> 00:29:43.375\n&gt;&gt; You broke it again?\n\n501\n00:29:43.375 --> 00:29:45.131\n[LAUGH]\n&gt;&gt; I broke it again, and Daniel,\n\n502\n00:29:45.131 --> 00:29:48.506\nI don't know if we have time to\nsolve this problem on this episode.\n\n503\n00:29:48.506 --> 00:29:52.236\n&gt;&gt; Well, that's a nice little cliffhanger\nto leave our lovely viewing audience with.\n\n504\n00:29:52.236 --> 00:29:56.036\nSo you'll have to come back, we'll roll\nthis into a part two and see we have it\n\n505\n00:29:56.036 --> 00:30:00.260\nworking but we can't make it stop working,\nwhich is an interesting problem to have.\n\n506\n00:30:00.260 --> 00:30:04.220\nSo I look forward to seeing what\nthe resolution to that conflict is.\n\n507\n00:30:04.220 --> 00:30:06.700\nJustin, thanks for\ngetting us this far, very cool stuff.\n\n508\n00:30:06.700 --> 00:30:09.330\nAnd we do thank you for watching,\nbut it's time to sign off.\n\n509\n00:30:09.330 --> 00:30:11.440\nFor ITProTV, I've been your host,\nDaniel Lowrie.\n\n510\n00:30:11.440 --> 00:30:12.850\n&gt;&gt; And I'm Justin Dennison.\n\n511\n00:30:12.850 --> 00:30:15.154\n&gt;&gt; And we'll see you next time.\n\n512\n00:30:15.154 --> 00:30:21.144\n[MUSIC]\n\n513\n00:30:21.144 --> 00:30:24.889\nThank you for watching, ITPRO.TV.\n\n",
          "url": "buildingapplicationdocker-sample",
          "vimeoId": "211737194"
        },
        {
          "description": "In this episode Ronnie and Cherokee breakdown the structure of IP addresses. They identify the distinction of host versus network bits and explain why it is important to understand the structure. You will also see them explain a high-level understanding of subnetting.",
          "length": "1680",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/cisco-secfnd210250/cisco-secfnd210250-1-6-describe_basic_network_addressing-011917.00_27_45_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/cisco-secfnd210250/cisco-secfnd210250-1-6-describe_basic_network_addressing-011917.00_27_45_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/cisco-secfnd210250/cisco-secfnd210250-1-6-describe_basic_network_addressing-011917.00_27_45_16.Still001-sm.jpg",
          "title": "Describe Basic Network Addressing",
          "transcript": "",
          "url": "describe-basic-network-addressing",
          "vimeoId": "200558842"
        },
        {
          "description": "In this episode, Dan and Mike begin their look at SQL injection. They discuss what SQL injection is and where the vulnerability occurs. They demonstrate performing a SQL injection through a form on a web page as well as by injecting a command in a URL.",
          "length": "1944",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pentest/techskills-pentest-8-1-1-sql_injection-020317-PGM.00_32_10_07.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pentest/techskills-pentest-8-1-1-sql_injection-020317-PGM.00_32_10_07.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-pentest/techskills-pentest-8-1-1-sql_injection-020317-PGM.00_32_10_07.Still001-sm.jpg",
          "title": "SQL Injection",
          "transcript": "",
          "url": "sql-injection-sample",
          "vimeoId": "202940388"
        },
        {
          "description": "In this episode, Daniel and Don take a look at Virtual Private Clouds(VPCs) in Amazon Web Services. They start with VPC basics, (what is it and where is it used), and then move into more specific topics like Subnets, Route Tables, Elastic IPs, Endpoints and Peering.",
          "length": "1472",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-virtual_private_cloud-030617.00_24_17_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-virtual_private_cloud-030617.00_24_17_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/amazon-acsaa/amazon-acsaa-4-1-virtual_private_cloud-030617.00_24_17_29.Still001-sm.jpg",
          "title": "Virtual Private Cloud",
          "transcript": "",
          "url": "virtual-private-cloud-sample",
          "vimeoId": "208149819"
        },
        {
          "description": "In this episode, Daniel and Adam take time to look at the state of computer forensics in today's world. Here they build your foundational knowledge and vocabulary necessary for the CHFI exam and our series. Specific topics covered includes: Defining computer forensics and the objectives of computer forensics.",
          "length": "1777",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/eccouncil-chfiv9/eccouncil-chfiv9-1-1-1-computer_forensics_in_todays_world-060117-PGM.00_29_23_04.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/eccouncil-chfiv9/eccouncil-chfiv9-1-1-1-computer_forensics_in_todays_world-060117-PGM.00_29_23_04.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/eccouncil-chfiv9/eccouncil-chfiv9-1-1-1-computer_forensics_in_todays_world-060117-PGM.00_29_23_04.Still001-sm.jpg",
          "title": "Computer Forensics in Todays World",
          "transcript": "",
          "url": "computer-forensicstodays-world-sample",
          "vimeoId": "220014844"
        },
        {
          "description": "In this episode, Daniel and Vonne take a few moments to explain input text and special characters in Word 2016. Here they talk about adding basic text like letters, numbers, and symbols like \\*/%/@. They also explain the difference between backspace and delete, paragraphs and line-breaks, and tabs. Finally, they explain the Show/Hide button's function and even give you some history about where the different character sets come from.",
          "length": "1869",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-officeword2016essentials/microsoft-office-word-2016-essentials-1-7-input_text_and_special_characters-061317-PGM.00_30_56_29.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-officeword2016essentials/microsoft-office-word-2016-essentials-1-7-input_text_and_special_characters-061317-PGM.00_30_56_29.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-officeword2016essentials/microsoft-office-word-2016-essentials-1-7-input_text_and_special_characters-061317-PGM.00_30_56_29.Still001-sm.jpg",
          "title": "Input Text and Special Characters",
          "transcript": "",
          "url": "input-textspecial-characters-sample",
          "vimeoId": "221777425"
        },
        {
          "description": "In this episode, Ronnie and Vonne introduce Word 2016 users to image basics.  They discuss different image formats that can be used in Word.  Vonne describes image resolution and why it’s important for the user.  She demonstrates how to insert a local image, an online image and a modified image created in Microsoft Pain.",
          "length": "2002",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-officeword2016advanced/microsoft-office-word-2016-advanced-1-1-images_basics-062117-PGM.00_33_10_08.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-officeword2016advanced/microsoft-office-word-2016-advanced-1-1-images_basics-062117-PGM.00_33_10_08.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-officeword2016advanced/microsoft-office-word-2016-advanced-1-1-images_basics-062117-PGM.00_33_10_08.Still001-sm.jpg",
          "title": "Images Basics",
          "transcript": "",
          "url": "images-basics-sample",
          "vimeoId": "222838668"
        },
        {
          "description": "In this episode, Ronnie and Cherokee introduce offline files.  Cherokee describes this as an option to consider when  low bandwidth considerations are in play or when the internet connection back to the network folders is not available.  She shows how to configure it and explains the options  you must consider before implementation.",
          "length": "1394",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-server70410-2017/microsoft-mcsa-server2012-70410-2-3-1-configure_file_and_share_access-071317-PGM.00_22_58_11.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-server70410-2017/microsoft-mcsa-server2012-70410-2-3-1-configure_file_and_share_access-071317-PGM.00_22_58_11.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/microsoft-server70410-2017/microsoft-mcsa-server2012-70410-2-3-1-configure_file_and_share_access-071317-PGM.00_22_58_11.Still001-sm.jpg",
          "title": "Configure File and Share Access",
          "transcript": "",
          "url": "configure-fileshare-access-sample",
          "vimeoId": "226158399"
        },
        {
          "description": "In this episode, Daniel and Wes take you through commonly used Windows Control Panel utilities. Specific tools looked at includes: Display settings, User Accounts, Folder Options, System, Windows Firewall, and Power Options.",
          "length": "2038",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/comptia-aplus220902-2017/comptia-aplus220902-1-5-2-control_panel_utilities_pt2-071817-PGM.00_36_11_16.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/comptia-aplus220902-2017/comptia-aplus220902-1-5-2-control_panel_utilities_pt2-071817-PGM.00_36_11_16.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/comptia-aplus220902-2017/comptia-aplus220902-1-5-2-control_panel_utilities_pt2-071817-PGM.00_36_11_16.Still001-sm.jpg",
          "title": "Control Panel Utilities Part 2",
          "transcript": "",
          "url": "control-panel-utilities2-sample",
          "vimeoId": "226152481"
        },
        {
          "description": "In this episode, Daniel and Mike attempt to solidify your Kali skills by applying them to real-world type scenarios. Here they will scan a server and use Kali along with pen testing methodology to exploit 2 known vulnerabilities with rlogin and vsftpd.",
          "length": "1281",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-kalilinux-2017/techskills-kalilinux-5-5-1-test_your_skills-071417-PGM.01_23_31_10.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-kalilinux-2017/techskills-kalilinux-5-5-1-test_your_skills-071417-PGM.01_23_31_10.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-kalilinux-2017/techskills-kalilinux-5-5-1-test_your_skills-071417-PGM.01_23_31_10.Still001-sm.jpg",
          "title": "Test Your Skills sample",
          "transcript": "",
          "url": "testskills-sample",
          "vimeoId": "225995217"
        },
        {
          "description": "Don and Zach cover basic log messages from boot-up, system log, SYSLOG, system log rotation, additional maintenance of logs, remote system logs, RSYSLOG, making logs permanent, SystemD Jounal, storing logs as secured binary so they can't be altered, how logging differs on various OS, persistent storage, JournalCTL command, JournalD as a replacement for SYSLOG, filtering for priority and filtering for time.",
          "length": "1939",
          "thumbnail": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxserveradmin/techskills-linuxserveradmin-1-4-configuring_system_logging-071817-PGM.00_32_50_05.Still001.png",
          "thumbnailMed": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxserveradmin/techskills-linuxserveradmin-1-4-configuring_system_logging-071817-PGM.00_32_50_05.Still001-med.jpg",
          "thumbnailSm": "https://itprotv-image-bucket.s3.amazonaws.com/techskills-linuxserveradmin/techskills-linuxserveradmin-1-4-configuring_system_logging-071817-PGM.00_32_50_05.Still001-sm.jpg",
          "title": "Configuring System Logging",
          "transcript": "",
          "url": "configuring-system-logging-sample",
          "vimeoId": "226153361"
        }
      ],
      "title": "Sample Videos"
    }
  ],
  "url": "sample-videos",
  "vLab": false
}
